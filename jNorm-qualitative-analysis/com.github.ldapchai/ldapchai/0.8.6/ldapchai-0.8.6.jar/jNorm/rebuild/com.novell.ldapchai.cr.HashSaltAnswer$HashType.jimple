final enum class com.novell.ldapchai.cr.HashSaltAnswer$HashType extends java.lang.Enum
{
public static final enum com.novell.ldapchai.cr.HashSaltAnswer$HashType MD5;
public static final enum com.novell.ldapchai.cr.HashSaltAnswer$HashType SHA1;
public static final enum com.novell.ldapchai.cr.HashSaltAnswer$HashType SHA1_SALT;
public static final enum com.novell.ldapchai.cr.HashSaltAnswer$HashType SHA256_SALT;
public static final enum com.novell.ldapchai.cr.HashSaltAnswer$HashType SHA512_SALT;
private final com.novell.ldapchai.cr.Answer$FormatType formatType;
private final java.lang.String hashAlgName;
private final boolean saltEnabled;
private static final com.novell.ldapchai.cr.HashSaltAnswer$HashType[] $VALUES;
public static com.novell.ldapchai.cr.HashSaltAnswer$HashType[] values()
{
com.novell.ldapchai.cr.HashSaltAnswer$HashType[] v0;
java.lang.Object v1;
v0 = <com.novell.ldapchai.cr.HashSaltAnswer$HashType: com.novell.ldapchai.cr.HashSaltAnswer$HashType[] $VALUES>;
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
return v1;
}
public static com.novell.ldapchai.cr.HashSaltAnswer$HashType valueOf(java.lang.String)
{
java.lang.String v0;
java.lang.Enum v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/novell/ldapchai/cr/HashSaltAnswer$HashType;", v0);
return v1;
}
private void <init>(java.lang.String, int, com.novell.ldapchai.cr.Answer$FormatType, java.lang.String, boolean)
{
com.novell.ldapchai.cr.Answer$FormatType v3;
int v2;
com.novell.ldapchai.cr.HashSaltAnswer$HashType v0;
java.lang.String v1, v4;
boolean v5;
v0 := @this: com.novell.ldapchai.cr.HashSaltAnswer$HashType;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: com.novell.ldapchai.cr.Answer$FormatType;
v4 := @parameter3: java.lang.String;
v5 := @parameter4: boolean;
specialinvoke v0.<java.lang.Enum: void <init>(java.lang.String,int)>(v1, v2);
v0.<com.novell.ldapchai.cr.HashSaltAnswer$HashType: java.lang.String hashAlgName> = v4;
v0.<com.novell.ldapchai.cr.HashSaltAnswer$HashType: com.novell.ldapchai.cr.Answer$FormatType formatType> = v3;
v0.<com.novell.ldapchai.cr.HashSaltAnswer$HashType: boolean saltEnabled> = v5;
return;
}
public com.novell.ldapchai.cr.Answer$FormatType getFormatType()
{
com.novell.ldapchai.cr.HashSaltAnswer$HashType v0;
com.novell.ldapchai.cr.Answer$FormatType v1;
v0 := @this: com.novell.ldapchai.cr.HashSaltAnswer$HashType;
v1 = v0.<com.novell.ldapchai.cr.HashSaltAnswer$HashType: com.novell.ldapchai.cr.Answer$FormatType formatType>;
return v1;
}
public java.lang.String getHashAlgName()
{
com.novell.ldapchai.cr.HashSaltAnswer$HashType v0;
java.lang.String v1;
v0 := @this: com.novell.ldapchai.cr.HashSaltAnswer$HashType;
v1 = v0.<com.novell.ldapchai.cr.HashSaltAnswer$HashType: java.lang.String hashAlgName>;
return v1;
}
public boolean isSaltEnabled()
{
com.novell.ldapchai.cr.HashSaltAnswer$HashType v0;
boolean v1;
v0 := @this: com.novell.ldapchai.cr.HashSaltAnswer$HashType;
v1 = v0.<com.novell.ldapchai.cr.HashSaltAnswer$HashType: boolean saltEnabled>;
return v1;
}
public static com.novell.ldapchai.cr.HashSaltAnswer$HashType forFormatType(com.novell.ldapchai.cr.Answer$FormatType)
{
com.novell.ldapchai.cr.Answer$FormatType v0;
java.util.function.Predicate v3;
com.novell.ldapchai.cr.HashSaltAnswer$HashType[] v1;
java.util.function.Supplier v6;
java.util.stream.Stream v2, v4;
java.util.Optional v5;
java.lang.Object v7;
v0 := @parameter0: com.novell.ldapchai.cr.Answer$FormatType;
v1 = staticinvoke <com.novell.ldapchai.cr.HashSaltAnswer$HashType: com.novell.ldapchai.cr.HashSaltAnswer$HashType[] values()>();
v2 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>(v1);
v3 = staticinvoke <com.novell.ldapchai.cr.HashSaltAnswer$HashType$lambda_forFormatType_0__29: java.util.function.Predicate bootstrap$(com.novell.ldapchai.cr.Answer$FormatType)>(v0);
v4 = interfaceinvoke v2.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(v3);
v5 = interfaceinvoke v4.<java.util.stream.Stream: java.util.Optional findFirst()>();
v6 = staticinvoke <com.novell.ldapchai.cr.HashSaltAnswer$HashType$lambda_forFormatType_1__30: java.util.function.Supplier bootstrap$()>();
v7 = virtualinvoke v5.<java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>(v6);
return v7;
}
private static com.novell.ldapchai.cr.HashSaltAnswer$HashType[] $values()
{
com.novell.ldapchai.cr.HashSaltAnswer$HashType[] v0;
com.novell.ldapchai.cr.HashSaltAnswer$HashType v1, v2, v3, v4, v5;
v0 = newarray (com.novell.ldapchai.cr.HashSaltAnswer$HashType)[5];
v1 = <com.novell.ldapchai.cr.HashSaltAnswer$HashType: com.novell.ldapchai.cr.HashSaltAnswer$HashType MD5>;
v0[0] = v1;
v2 = <com.novell.ldapchai.cr.HashSaltAnswer$HashType: com.novell.ldapchai.cr.HashSaltAnswer$HashType SHA1>;
v0[1] = v2;
v3 = <com.novell.ldapchai.cr.HashSaltAnswer$HashType: com.novell.ldapchai.cr.HashSaltAnswer$HashType SHA1_SALT>;
v0[2] = v3;
v4 = <com.novell.ldapchai.cr.HashSaltAnswer$HashType: com.novell.ldapchai.cr.HashSaltAnswer$HashType SHA256_SALT>;
v0[3] = v4;
v5 = <com.novell.ldapchai.cr.HashSaltAnswer$HashType: com.novell.ldapchai.cr.HashSaltAnswer$HashType SHA512_SALT>;
v0[4] = v5;
return v0;
}
static void <clinit>()
{
com.novell.ldapchai.cr.Answer$FormatType v1, v3, v5, v7, v9;
com.novell.ldapchai.cr.HashSaltAnswer$HashType[] v10;
com.novell.ldapchai.cr.HashSaltAnswer$HashType v0, v2, v4, v6, v8;
v0 = new com.novell.ldapchai.cr.HashSaltAnswer$HashType;
v1 = <com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType MD5>;
specialinvoke v0.<com.novell.ldapchai.cr.HashSaltAnswer$HashType: void <init>(java.lang.String,int,com.novell.ldapchai.cr.Answer$FormatType,java.lang.String,boolean)>("MD5", 0, v1, "MD5", 0);
<com.novell.ldapchai.cr.HashSaltAnswer$HashType: com.novell.ldapchai.cr.HashSaltAnswer$HashType MD5> = v0;
v2 = new com.novell.ldapchai.cr.HashSaltAnswer$HashType;
v3 = <com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType SHA1>;
specialinvoke v2.<com.novell.ldapchai.cr.HashSaltAnswer$HashType: void <init>(java.lang.String,int,com.novell.ldapchai.cr.Answer$FormatType,java.lang.String,boolean)>("SHA1", 1, v3, "SHA1", 0);
<com.novell.ldapchai.cr.HashSaltAnswer$HashType: com.novell.ldapchai.cr.HashSaltAnswer$HashType SHA1> = v2;
v4 = new com.novell.ldapchai.cr.HashSaltAnswer$HashType;
v5 = <com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType SHA1_SALT>;
specialinvoke v4.<com.novell.ldapchai.cr.HashSaltAnswer$HashType: void <init>(java.lang.String,int,com.novell.ldapchai.cr.Answer$FormatType,java.lang.String,boolean)>("SHA1_SALT", 2, v5, "SHA1", 1);
<com.novell.ldapchai.cr.HashSaltAnswer$HashType: com.novell.ldapchai.cr.HashSaltAnswer$HashType SHA1_SALT> = v4;
v6 = new com.novell.ldapchai.cr.HashSaltAnswer$HashType;
v7 = <com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType SHA256_SALT>;
specialinvoke v6.<com.novell.ldapchai.cr.HashSaltAnswer$HashType: void <init>(java.lang.String,int,com.novell.ldapchai.cr.Answer$FormatType,java.lang.String,boolean)>("SHA256_SALT", 3, v7, "SHA-256", 1);
<com.novell.ldapchai.cr.HashSaltAnswer$HashType: com.novell.ldapchai.cr.HashSaltAnswer$HashType SHA256_SALT> = v6;
v8 = new com.novell.ldapchai.cr.HashSaltAnswer$HashType;
v9 = <com.novell.ldapchai.cr.Answer$FormatType: com.novell.ldapchai.cr.Answer$FormatType SHA512_SALT>;
specialinvoke v8.<com.novell.ldapchai.cr.HashSaltAnswer$HashType: void <init>(java.lang.String,int,com.novell.ldapchai.cr.Answer$FormatType,java.lang.String,boolean)>("SHA512_SALT", 4, v9, "SHA-512", 1);
<com.novell.ldapchai.cr.HashSaltAnswer$HashType: com.novell.ldapchai.cr.HashSaltAnswer$HashType SHA512_SALT> = v8;
v10 = staticinvoke <com.novell.ldapchai.cr.HashSaltAnswer$HashType: com.novell.ldapchai.cr.HashSaltAnswer$HashType[] $values()>();
<com.novell.ldapchai.cr.HashSaltAnswer$HashType: com.novell.ldapchai.cr.HashSaltAnswer$HashType[] $VALUES> = v10;
return;
}
}