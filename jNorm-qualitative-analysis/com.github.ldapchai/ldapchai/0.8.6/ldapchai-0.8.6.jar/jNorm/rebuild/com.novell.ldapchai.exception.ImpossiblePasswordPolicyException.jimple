public class com.novell.ldapchai.exception.ImpossiblePasswordPolicyException extends java.lang.RuntimeException
{
private final com.novell.ldapchai.exception.ImpossiblePasswordPolicyException$ErrorEnum error;
public void <init>(com.novell.ldapchai.exception.ImpossiblePasswordPolicyException$ErrorEnum)
{
java.lang.String v2;
com.novell.ldapchai.exception.ImpossiblePasswordPolicyException$ErrorEnum v1;
com.novell.ldapchai.exception.ImpossiblePasswordPolicyException v0;
v0 := @this: com.novell.ldapchai.exception.ImpossiblePasswordPolicyException;
v1 := @parameter0: com.novell.ldapchai.exception.ImpossiblePasswordPolicyException$ErrorEnum;
v2 = virtualinvoke v1.<com.novell.ldapchai.exception.ImpossiblePasswordPolicyException$ErrorEnum: java.lang.String toString()>();
specialinvoke v0.<java.lang.RuntimeException: void <init>(java.lang.String)>(v2);
v0.<com.novell.ldapchai.exception.ImpossiblePasswordPolicyException: com.novell.ldapchai.exception.ImpossiblePasswordPolicyException$ErrorEnum error> = v1;
return;
}
public com.novell.ldapchai.exception.ImpossiblePasswordPolicyException$ErrorEnum getError()
{
com.novell.ldapchai.exception.ImpossiblePasswordPolicyException$ErrorEnum v1;
com.novell.ldapchai.exception.ImpossiblePasswordPolicyException v0;
v0 := @this: com.novell.ldapchai.exception.ImpossiblePasswordPolicyException;
v1 = v0.<com.novell.ldapchai.exception.ImpossiblePasswordPolicyException: com.novell.ldapchai.exception.ImpossiblePasswordPolicyException$ErrorEnum error>;
return v1;
}
}