public class com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy extends com.novell.ldapchai.impl.apacheds.entry.ApacheDSEntry implements com.novell.ldapchai.ChaiPasswordPolicy
{
private static final java.lang.String ATTR_IPA_PWD_POLICY_MIN_LIFE;
private static final java.lang.String ATTR_IPA_PWD_POLICY_MAX_LIFE;
private static final java.lang.String ATTR_IPA_PWD_POLICY_MIN_LENGTH;
private static final java.lang.String ATTR_IPA_PWD_POLICY_PWD_HISTORY_LENGTH;
private static final java.lang.String ATTR_IPA_PWD_POLICY_MIN_DIFF_CHARS;
private static final java.lang.String ATTR_IPA_PWD_POLICY_MAX_FAILURE;
private static final java.lang.String ATTR_IPA_PWD_POLICY_LOCKOUT_DURATION;
private static final java.lang.String ATTR_IPA_PWD_POLICY_FAIL_COUNT_INTERVAL;
static final java.util.Set PWD_POLICY_LDAP_ATTRIBUTES;
private final java.util.Map ruleMap;
public void <init>(java.lang.String, com.novell.ldapchai.provider.ChaiProvider) throws com.novell.ldapchai.exception.ChaiUnavailableException, com.novell.ldapchai.exception.ChaiOperationException
{
com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy$PwdPolicyAttribute v45;
java.util.Map v10, v16, v19, v22, v25, v34, v48, v50, v52, v6, v7;
boolean v13, v31, v47, v51;
java.util.Set v5;
com.novell.ldapchai.ChaiPasswordRule[] v40;
com.novell.ldapchai.provider.ChaiProvider v2;
com.novell.ldapchai.ChaiPasswordRule v11, v17, v20, v23, v26, v35, v43, v8;
com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy v0;
com.novell.ldapchai.util.internal.ChaiLogger v29, v38;
java.util.HashMap v3, v4;
java.util.function.Supplier v30, v39;
int v15, v33, v41, v42;
java.lang.String v1, v12, v18, v21, v24, v27, v36, v44, v46, v53, v9;
java.lang.NumberFormatException v28, v37;
java.lang.Object v14, v32, v49;
v0 := @this: com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: com.novell.ldapchai.provider.ChaiProvider;
specialinvoke v0.<com.novell.ldapchai.impl.apacheds.entry.ApacheDSEntry: void <init>(java.lang.String,com.novell.ldapchai.provider.ChaiProvider)>(v1, v2);
v3 = new java.util.HashMap;
specialinvoke v3.<java.util.HashMap: void <init>()>();
v0.<com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy: java.util.Map ruleMap> = v3;
v4 = new java.util.HashMap;
specialinvoke v4.<java.util.HashMap: void <init>()>();
v5 = <com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy: java.util.Set PWD_POLICY_LDAP_ATTRIBUTES>;
v6 = virtualinvoke v0.<com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy: java.util.Map readStringAttributes(java.util.Set)>(v5);
interfaceinvoke v4.<java.util.Map: void putAll(java.util.Map)>(v6);
v7 = v0.<com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy: java.util.Map ruleMap>;
v8 = <com.novell.ldapchai.ChaiPasswordRule: com.novell.ldapchai.ChaiPasswordRule AllowNumeric>;
v9 = virtualinvoke v8.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
interfaceinvoke v7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v9, "true");
v10 = v0.<com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy: java.util.Map ruleMap>;
v11 = <com.novell.ldapchai.ChaiPasswordRule: com.novell.ldapchai.ChaiPasswordRule AllowSpecial>;
v12 = virtualinvoke v11.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
interfaceinvoke v10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v12, "true");
v13 = interfaceinvoke v4.<java.util.Map: boolean containsKey(java.lang.Object)>("krbPwdMinDiffChars");
if v13 == 0 goto label07;
label01:
v14 = interfaceinvoke v4.<java.util.Map: java.lang.Object get(java.lang.Object)>("krbPwdMinDiffChars");
v15 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v14);
if v15 < 1 goto label02;
v16 = v0.<com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy: java.util.Map ruleMap>;
v17 = <com.novell.ldapchai.ChaiPasswordRule: com.novell.ldapchai.ChaiPasswordRule MinimumLowerCase>;
v18 = virtualinvoke v17.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
interfaceinvoke v16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v18, "1");
label02:
if v15 < 2 goto label03;
v19 = v0.<com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy: java.util.Map ruleMap>;
v20 = <com.novell.ldapchai.ChaiPasswordRule: com.novell.ldapchai.ChaiPasswordRule MinimumUpperCase>;
v21 = virtualinvoke v20.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
interfaceinvoke v19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v21, "1");
label03:
if v15 < 3 goto label04;
v22 = v0.<com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy: java.util.Map ruleMap>;
v23 = <com.novell.ldapchai.ChaiPasswordRule: com.novell.ldapchai.ChaiPasswordRule MinimumNumeric>;
v24 = virtualinvoke v23.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
interfaceinvoke v22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v24, "1");
label04:
if v15 < 4 goto label07;
v25 = v0.<com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy: java.util.Map ruleMap>;
v26 = <com.novell.ldapchai.ChaiPasswordRule: com.novell.ldapchai.ChaiPasswordRule MinimumSpecial>;
v27 = virtualinvoke v26.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
interfaceinvoke v25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v27, "1");
label05:
goto label07;
label06:
v28 := @caughtexception;
v29 = <com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v30 = staticinvoke <com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy$lambda_new_0__41: java.util.function.Supplier bootstrap$()>();
virtualinvoke v29.<com.novell.ldapchai.util.internal.ChaiLogger: void trace(java.util.function.Supplier)>(v30);
label07:
v31 = interfaceinvoke v4.<java.util.Map: boolean containsKey(java.lang.Object)>("krbPwdHistoryLength");
if v31 == 0 goto label11;
label08:
v32 = interfaceinvoke v4.<java.util.Map: java.lang.Object get(java.lang.Object)>("krbPwdHistoryLength");
v33 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v32);
if v33 <= 0 goto label11;
v34 = v0.<com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy: java.util.Map ruleMap>;
v35 = <com.novell.ldapchai.ChaiPasswordRule: com.novell.ldapchai.ChaiPasswordRule UniqueRequired>;
v36 = virtualinvoke v35.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
interfaceinvoke v34.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v36, "true");
label09:
goto label11;
label10:
v37 := @caughtexception;
v38 = <com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v39 = staticinvoke <com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy$lambda_new_1__40: java.util.function.Supplier bootstrap$()>();
virtualinvoke v38.<com.novell.ldapchai.util.internal.ChaiLogger: void trace(java.util.function.Supplier)>(v39);
label11:
v40 = staticinvoke <com.novell.ldapchai.ChaiPasswordRule: com.novell.ldapchai.ChaiPasswordRule[] values()>();
v41 = lengthof v40;
v42 = 0;
label12:
if v42 >= v41 goto label15;
v43 = v40[v42];
v44 = virtualinvoke v43.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
v45 = staticinvoke <com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy$PwdPolicyAttribute: com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy$PwdPolicyAttribute lookupAttribute(com.novell.ldapchai.ChaiPasswordRule)>(v43);
if v45 == null goto label13;
v46 = virtualinvoke v45.<com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy$PwdPolicyAttribute: java.lang.String getLdapAttribute()>();
if v46 == null goto label13;
v47 = interfaceinvoke v4.<java.util.Map: boolean containsKey(java.lang.Object)>(v46);
if v47 == 0 goto label13;
v48 = v0.<com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy: java.util.Map ruleMap>;
v49 = interfaceinvoke v4.<java.util.Map: java.lang.Object get(java.lang.Object)>(v46);
interfaceinvoke v48.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v44, v49);
label13:
v50 = v0.<com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy: java.util.Map ruleMap>;
v51 = interfaceinvoke v50.<java.util.Map: boolean containsKey(java.lang.Object)>(v44);
if v51 != 0 goto label14;
v52 = v0.<com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy: java.util.Map ruleMap>;
v53 = virtualinvoke v43.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getDefaultValue()>();
interfaceinvoke v52.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v44, v53);
label14:
v42 = v42 + 1;
goto label12;
label15:
return;
catch java.lang.NumberFormatException from label01 to label05 with label06;
catch java.lang.NumberFormatException from label08 to label09 with label10;
}
public java.lang.String getValue(java.lang.String)
{
java.util.Map v2;
java.lang.Object v3;
java.lang.String v1;
com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy v0;
v0 := @this: com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy;
v1 := @parameter0: java.lang.String;
v2 = v0.<com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy: java.util.Map ruleMap>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
return v3;
}
public java.lang.String getValue(com.novell.ldapchai.ChaiPasswordRule)
{
java.util.Map v2;
java.lang.Object v4;
com.novell.ldapchai.ChaiPasswordRule v1;
java.lang.String v3;
com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy v0;
v0 := @this: com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy;
v1 := @parameter0: com.novell.ldapchai.ChaiPasswordRule;
v2 = v0.<com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy: java.util.Map ruleMap>;
v3 = virtualinvoke v1.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
v4 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v3);
return v4;
}
public java.util.Set getKeys()
{
java.util.Map v1;
java.util.Set v2, v3;
com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy v0;
v0 := @this: com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy;
v1 = v0.<com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy: java.util.Map ruleMap>;
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set keySet()>();
v3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(v2);
return v3;
}
public com.novell.ldapchai.ChaiEntry getPolicyEntry()
{
com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy v0;
v0 := @this: com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy;
return v0;
}
public com.novell.ldapchai.util.PasswordRuleHelper getRuleHelper()
{
com.novell.ldapchai.util.GenericRuleHelper v1;
com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy v0;
v0 := @this: com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy;
v1 = new com.novell.ldapchai.util.GenericRuleHelper;
specialinvoke v1.<com.novell.ldapchai.util.GenericRuleHelper: void <init>(com.novell.ldapchai.ChaiPasswordPolicy)>(v0);
return v1;
}
static void <clinit>()
{
java.util.HashSet v0;
com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy$PwdPolicyAttribute v4;
int v2, v3;
java.util.Set v6;
com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy$PwdPolicyAttribute[] v1;
java.lang.String v5;
v0 = new java.util.HashSet;
specialinvoke v0.<java.util.HashSet: void <init>()>();
v1 = staticinvoke <com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy$PwdPolicyAttribute: com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy$PwdPolicyAttribute[] values()>();
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label2;
v4 = v1[v3];
v5 = virtualinvoke v4.<com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy$PwdPolicyAttribute: java.lang.String getLdapAttribute()>();
interfaceinvoke v0.<java.util.Set: boolean add(java.lang.Object)>(v5);
v3 = v3 + 1;
goto label1;
label2:
v6 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(v0);
<com.novell.ldapchai.impl.apacheds.entry.ApacheDSPasswordPolicy: java.util.Set PWD_POLICY_LDAP_ATTRIBUTES> = v6;
return;
}
}