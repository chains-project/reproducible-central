public class com.novell.ldapchai.impl.openldap.entry.OpenLDAPEntries extends java.lang.Object
{
private static final com.novell.ldapchai.util.internal.ChaiLogger LOGGER;
public void <init>()
{
com.novell.ldapchai.impl.openldap.entry.OpenLDAPEntries v0;
v0 := @this: com.novell.ldapchai.impl.openldap.entry.OpenLDAPEntries;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.time.Instant convertZuluToDate(java.lang.String)
{
java.lang.String v0;
java.time.Instant v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <com.novell.ldapchai.impl.edir.entry.EdirEntries: java.time.Instant convertZuluToInstant(java.lang.String)>(v0);
return v1;
}
public static java.lang.String convertDateToZulu(java.time.Instant)
{
java.lang.String v1;
java.time.Instant v0;
v0 := @parameter0: java.time.Instant;
v1 = staticinvoke <com.novell.ldapchai.impl.edir.entry.EdirEntries: java.lang.String convertInstantToZulu(java.time.Instant)>(v0);
return v1;
}
static com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy readPasswordPolicy(com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser) throws com.novell.ldapchai.exception.ChaiUnavailableException, com.novell.ldapchai.exception.ChaiOperationException
{
com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser v0;
com.novell.ldapchai.ChaiEntry v4;
java.util.function.Supplier v10, v23;
int v25, v6;
java.lang.String v16, v2, v21, v24, v8;
com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy v15, v26;
boolean v11, v14, v28, v7;
com.novell.ldapchai.provider.ChaiConfiguration v19;
com.novell.ldapchai.provider.ChaiSetting v20;
com.novell.ldapchai.impl.openldap.entry.OpenLDAPEntry v1, v12, v5;
com.novell.ldapchai.provider.ChaiProvider v13, v17, v18, v27, v3;
com.novell.ldapchai.util.internal.ChaiLogger v22, v9;
v0 := @parameter0: com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser;
v1 = new com.novell.ldapchai.impl.openldap.entry.OpenLDAPEntry;
v2 = virtualinvoke v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser: java.lang.String getEntryDN()>();
v3 = virtualinvoke v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser: com.novell.ldapchai.provider.ChaiProvider getChaiProvider()>();
specialinvoke v1.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPEntry: void <init>(java.lang.String,com.novell.ldapchai.provider.ChaiProvider)>(v2, v3);
v4 = v1;
v5 = null;
v6 = 0;
label1:
if v6 >= 50 goto label3;
if v4 == null goto label3;
if v5 != null goto label3;
v6 = v6 + 1;
v7 = interfaceinvoke v4.<com.novell.ldapchai.ChaiEntry: boolean exists()>();
if v7 == 0 goto label2;
v8 = interfaceinvoke v4.<com.novell.ldapchai.ChaiEntry: java.lang.String readStringAttribute(java.lang.String)>("pwdPolicySubentry");
v9 = <com.novell.ldapchai.impl.openldap.entry.OpenLDAPEntries: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v10 = staticinvoke <com.novell.ldapchai.impl.openldap.entry.OpenLDAPEntries$lambda_readPasswordPolicy_0__90: java.util.function.Supplier bootstrap$(java.lang.String)>(v8);
virtualinvoke v9.<com.novell.ldapchai.util.internal.ChaiLogger: void trace(java.util.function.Supplier)>(v10);
if v8 == null goto label2;
v11 = virtualinvoke v8.<java.lang.String: boolean isEmpty()>();
if v11 != 0 goto label2;
v12 = new com.novell.ldapchai.impl.openldap.entry.OpenLDAPEntry;
v13 = virtualinvoke v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser: com.novell.ldapchai.provider.ChaiProvider getChaiProvider()>();
specialinvoke v12.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPEntry: void <init>(java.lang.String,com.novell.ldapchai.provider.ChaiProvider)>(v8, v13);
v14 = virtualinvoke v12.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPEntry: boolean exists()>();
if v14 == 0 goto label2;
v5 = v12;
label2:
v4 = interfaceinvoke v4.<com.novell.ldapchai.ChaiEntry: com.novell.ldapchai.ChaiEntry getParentEntry()>();
goto label1;
label3:
if v5 == null goto label4;
v15 = new com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy;
v16 = virtualinvoke v5.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPEntry: java.lang.String getEntryDN()>();
v17 = virtualinvoke v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser: com.novell.ldapchai.provider.ChaiProvider getChaiProvider()>();
specialinvoke v15.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy: void <init>(java.lang.String,com.novell.ldapchai.provider.ChaiProvider)>(v16, v17);
return v15;
label4:
v18 = virtualinvoke v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser: com.novell.ldapchai.provider.ChaiProvider getChaiProvider()>();
v19 = interfaceinvoke v18.<com.novell.ldapchai.provider.ChaiProvider: com.novell.ldapchai.provider.ChaiConfiguration getChaiConfiguration()>();
v20 = <com.novell.ldapchai.provider.ChaiSetting: com.novell.ldapchai.provider.ChaiSetting OPENLDAP_PASSWORD_POLICY_DN>;
v21 = virtualinvoke v19.<com.novell.ldapchai.provider.ChaiConfiguration: java.lang.String getSetting(com.novell.ldapchai.provider.ChaiSetting)>(v20);
v22 = <com.novell.ldapchai.impl.openldap.entry.OpenLDAPEntries: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v23 = staticinvoke <com.novell.ldapchai.impl.openldap.entry.OpenLDAPEntries$lambda_readPasswordPolicy_1__89: java.util.function.Supplier bootstrap$(java.lang.String)>(v21);
virtualinvoke v22.<com.novell.ldapchai.util.internal.ChaiLogger: void debug(java.util.function.Supplier)>(v23);
if v21 == null goto label5;
v24 = virtualinvoke v21.<java.lang.String: java.lang.String trim()>();
v25 = virtualinvoke v24.<java.lang.String: int length()>();
if v25 <= 0 goto label5;
v26 = new com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy;
v27 = virtualinvoke v0.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPUser: com.novell.ldapchai.provider.ChaiProvider getChaiProvider()>();
specialinvoke v26.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy: void <init>(java.lang.String,com.novell.ldapchai.provider.ChaiProvider)>(v21, v27);
v28 = virtualinvoke v26.<com.novell.ldapchai.impl.openldap.entry.OpenLDAPPasswordPolicy: boolean exists()>();
if v28 == 0 goto label5;
return v26;
label5:
return null;
}
static void <clinit>()
{
com.novell.ldapchai.util.internal.ChaiLogger v0;
v0 = staticinvoke <com.novell.ldapchai.util.internal.ChaiLogger: com.novell.ldapchai.util.internal.ChaiLogger getLogger(java.lang.Class)>(class "Lcom/novell/ldapchai/impl/openldap/entry/OpenLDAPEntries;");
<com.novell.ldapchai.impl.openldap.entry.OpenLDAPEntries: com.novell.ldapchai.util.internal.ChaiLogger LOGGER> = v0;
return;
}
}