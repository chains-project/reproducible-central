public class com.novell.ldapchai.impl.oracleds.entry.OracleDSEntries extends java.lang.Object
{
public void <init>()
{
com.novell.ldapchai.impl.oracleds.entry.OracleDSEntries v0;
v0 := @this: com.novell.ldapchai.impl.oracleds.entry.OracleDSEntries;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.time.Instant convertZuluToDate(java.lang.String)
{
java.lang.String v0;
java.time.Instant v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <com.novell.ldapchai.impl.edir.entry.EdirEntries: java.time.Instant convertZuluToInstant(java.lang.String)>(v0);
return v1;
}
public static java.lang.String convertDateToZulu(java.time.Instant)
{
java.lang.String v1;
java.time.Instant v0;
v0 := @parameter0: java.time.Instant;
v1 = staticinvoke <com.novell.ldapchai.impl.edir.entry.EdirEntries: java.lang.String convertInstantToZulu(java.time.Instant)>(v0);
return v1;
}
static com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy readPasswordPolicy(com.novell.ldapchai.impl.oracleds.entry.InetOrgPerson) throws com.novell.ldapchai.exception.ChaiUnavailableException, com.novell.ldapchai.exception.ChaiOperationException
{
com.novell.ldapchai.impl.oracleds.entry.InetOrgPerson v0;
com.novell.ldapchai.ChaiEntry v4;
com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy v13, v16;
int v6;
java.lang.String v14, v2, v8;
boolean v12, v18, v7, v9;
com.novell.ldapchai.impl.oracleds.entry.OracleDSEntry v1, v10, v5;
com.novell.ldapchai.provider.ChaiProvider v11, v15, v17, v3;
v0 := @parameter0: com.novell.ldapchai.impl.oracleds.entry.InetOrgPerson;
v1 = new com.novell.ldapchai.impl.oracleds.entry.OracleDSEntry;
v2 = virtualinvoke v0.<com.novell.ldapchai.impl.oracleds.entry.InetOrgPerson: java.lang.String getEntryDN()>();
v3 = virtualinvoke v0.<com.novell.ldapchai.impl.oracleds.entry.InetOrgPerson: com.novell.ldapchai.provider.ChaiProvider getChaiProvider()>();
specialinvoke v1.<com.novell.ldapchai.impl.oracleds.entry.OracleDSEntry: void <init>(java.lang.String,com.novell.ldapchai.provider.ChaiProvider)>(v2, v3);
v4 = v1;
v5 = null;
v6 = 0;
label1:
if v6 >= 50 goto label3;
if v4 == null goto label3;
if v5 != null goto label3;
v6 = v6 + 1;
v7 = interfaceinvoke v4.<com.novell.ldapchai.ChaiEntry: boolean exists()>();
if v7 == 0 goto label2;
v8 = interfaceinvoke v4.<com.novell.ldapchai.ChaiEntry: java.lang.String readStringAttribute(java.lang.String)>("passwordPolicySubentry");
if v8 == null goto label2;
v9 = virtualinvoke v8.<java.lang.String: boolean isEmpty()>();
if v9 != 0 goto label2;
v10 = new com.novell.ldapchai.impl.oracleds.entry.OracleDSEntry;
v11 = virtualinvoke v0.<com.novell.ldapchai.impl.oracleds.entry.InetOrgPerson: com.novell.ldapchai.provider.ChaiProvider getChaiProvider()>();
specialinvoke v10.<com.novell.ldapchai.impl.oracleds.entry.OracleDSEntry: void <init>(java.lang.String,com.novell.ldapchai.provider.ChaiProvider)>(v8, v11);
v12 = virtualinvoke v10.<com.novell.ldapchai.impl.oracleds.entry.OracleDSEntry: boolean exists()>();
if v12 == 0 goto label2;
v5 = v10;
label2:
v4 = interfaceinvoke v4.<com.novell.ldapchai.ChaiEntry: com.novell.ldapchai.ChaiEntry getParentEntry()>();
goto label1;
label3:
if v5 == null goto label4;
v13 = new com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy;
v14 = virtualinvoke v5.<com.novell.ldapchai.impl.oracleds.entry.OracleDSEntry: java.lang.String getEntryDN()>();
v15 = virtualinvoke v0.<com.novell.ldapchai.impl.oracleds.entry.InetOrgPerson: com.novell.ldapchai.provider.ChaiProvider getChaiProvider()>();
specialinvoke v13.<com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy: void <init>(java.lang.String,com.novell.ldapchai.provider.ChaiProvider)>(v14, v15);
return v13;
label4:
v16 = new com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy;
v17 = virtualinvoke v0.<com.novell.ldapchai.impl.oracleds.entry.InetOrgPerson: com.novell.ldapchai.provider.ChaiProvider getChaiProvider()>();
specialinvoke v16.<com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy: void <init>(java.lang.String,com.novell.ldapchai.provider.ChaiProvider)>("cn=Password Policy,cn=config", v17);
v18 = virtualinvoke v16.<com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy: boolean exists()>();
if v18 == 0 goto label5;
return v16;
label5:
return v16;
}
}