abstract class com.novell.ldapchai.provider.AbstractWrapper extends java.lang.Object implements java.lang.reflect.InvocationHandler
{
private static final com.novell.ldapchai.util.internal.ChaiLogger LOGGER;
protected com.novell.ldapchai.provider.ChaiProviderImplementor realProvider;
void <init>()
{
com.novell.ldapchai.provider.AbstractWrapper v0;
v0 := @this: com.novell.ldapchai.provider.AbstractWrapper;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
protected static com.novell.ldapchai.provider.ChaiProviderImplementor factoryImpl(java.lang.Class, com.novell.ldapchai.provider.ChaiSetting, com.novell.ldapchai.provider.ChaiProviderImplementor) throws java.lang.Exception
{
java.lang.IllegalStateException v10;
boolean v12, v13, v5;
java.lang.Exception v25, v31;
java.lang.ClassLoader v21;
com.novell.ldapchai.util.internal.ChaiLogger v14, v29, v8;
java.lang.Object[] v18;
com.novell.ldapchai.provider.ChaiProviderImplementor v2;
java.lang.reflect.Constructor v17;
java.util.function.Supplier v15, v30, v9;
java.lang.String v26, v27, v28, v4, v6, v7;
com.novell.ldapchai.provider.ChaiConfiguration v3;
java.lang.Class[] v16, v23;
com.novell.ldapchai.provider.ChaiSetting v1;
java.lang.Class v0, v11, v20, v22;
java.lang.Object v19, v24;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: com.novell.ldapchai.provider.ChaiSetting;
v2 := @parameter2: com.novell.ldapchai.provider.ChaiProviderImplementor;
v3 = interfaceinvoke v2.<com.novell.ldapchai.provider.ChaiProviderImplementor: com.novell.ldapchai.provider.ChaiConfiguration getChaiConfiguration()>();
v4 = virtualinvoke v3.<com.novell.ldapchai.provider.ChaiConfiguration: java.lang.String getSetting(com.novell.ldapchai.provider.ChaiSetting)>(v1);
v5 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(v4);
if v5 != 0 goto label1;
v6 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("attempt to obtain \u0001 wrapper when not enabled in chaiConfiguration");
v8 = <com.novell.ldapchai.provider.AbstractWrapper: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v9 = staticinvoke <com.novell.ldapchai.provider.AbstractWrapper$lambda_factoryImpl_0__104: java.util.function.Supplier bootstrap$(java.lang.String)>(v7);
virtualinvoke v8.<com.novell.ldapchai.util.internal.ChaiLogger: void warn(java.util.function.Supplier)>(v9);
v10 = new java.lang.IllegalStateException;
specialinvoke v10.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v7);
throw v10;
label1:
v11 = virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v12 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(v11);
if v12 == 0 goto label2;
v13 = virtualinvoke v0.<java.lang.Class: boolean isInstance(java.lang.Object)>(v2);
if v13 == 0 goto label2;
v14 = <com.novell.ldapchai.provider.AbstractWrapper: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v15 = staticinvoke <com.novell.ldapchai.provider.AbstractWrapper$lambda_factoryImpl_1__103: java.util.function.Supplier bootstrap$(java.lang.Class)>(v0);
virtualinvoke v14.<com.novell.ldapchai.util.internal.ChaiLogger: void warn(java.util.function.Supplier)>(v15);
return v2;
label2:
v16 = newarray (java.lang.Class)[1];
v16[0] = class "Lcom/novell/ldapchai/provider/ChaiProviderImplementor;";
v17 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(v16);
v18 = newarray (java.lang.Object)[1];
v18[0] = v2;
v19 = virtualinvoke v17.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(v18);
v20 = virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v21 = virtualinvoke v20.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
v22 = virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v23 = virtualinvoke v22.<java.lang.Class: java.lang.Class[] getInterfaces()>();
v24 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>(v21, v23, v19);
label3:
return v24;
label4:
v25 := @caughtexception;
v26 = virtualinvoke v0.<java.lang.Class: java.lang.String getCanonicalName()>();
v27 = virtualinvoke v25.<java.lang.Exception: java.lang.String getMessage()>();
v28 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v26, v27) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Chai internal error, unable to create wrapper for \u0001\u0001");
v29 = <com.novell.ldapchai.provider.AbstractWrapper: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v30 = staticinvoke <com.novell.ldapchai.provider.AbstractWrapper$lambda_factoryImpl_2__105: java.util.function.Supplier bootstrap$(java.lang.String)>(v28);
virtualinvoke v29.<com.novell.ldapchai.util.internal.ChaiLogger: void error(java.util.function.Supplier,java.lang.Exception)>(v30, v25);
v31 = new java.lang.Exception;
specialinvoke v31.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>(v28, v25);
throw v31;
catch java.lang.Exception from label2 to label3 with label4;
}
static java.lang.Object invoker(com.novell.ldapchai.provider.ChaiProvider, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Exception
{
java.lang.Throwable v11;
java.lang.IllegalStateException v17, v9;
java.lang.Object[] v2;
java.util.function.Supplier v16, v8;
java.lang.String v13, v14, v5, v6;
java.lang.reflect.Method v1;
boolean v12;
java.lang.IllegalAccessException v4;
com.novell.ldapchai.provider.ChaiProvider v0;
java.lang.reflect.InvocationTargetException v10;
java.lang.Object v3;
com.novell.ldapchai.util.internal.ChaiLogger v15, v7;
v0 := @parameter0: com.novell.ldapchai.provider.ChaiProvider;
v1 := @parameter1: java.lang.reflect.Method;
v2 := @parameter2: java.lang.Object[];
label1:
v3 = virtualinvoke v1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v0, v2);
label2:
return v3;
label3:
v4 := @caughtexception;
v5 = virtualinvoke v4.<java.lang.IllegalAccessException: java.lang.String getMessage()>();
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unexpected api error: \u0001");
v7 = <com.novell.ldapchai.provider.AbstractWrapper: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v8 = staticinvoke <com.novell.ldapchai.provider.AbstractWrapper$lambda_invoker_3__107: java.util.function.Supplier bootstrap$(java.lang.String)>(v6);
virtualinvoke v7.<com.novell.ldapchai.util.internal.ChaiLogger: void warn(java.util.function.Supplier,java.lang.Exception)>(v8, v4);
v9 = new java.lang.IllegalStateException;
specialinvoke v9.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v6);
throw v9;
label4:
v10 := @caughtexception;
v11 = virtualinvoke v10.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();
v12 = v11 instanceof java.lang.Exception;
if v12 == 0 goto label5;
throw v11;
label5:
v13 = virtualinvoke v10.<java.lang.reflect.InvocationTargetException: java.lang.String getMessage()>();
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v13) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unexpected api error: \u0001");
v15 = <com.novell.ldapchai.provider.AbstractWrapper: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v16 = staticinvoke <com.novell.ldapchai.provider.AbstractWrapper$lambda_invoker_4__106: java.util.function.Supplier bootstrap$(java.lang.String)>(v14);
virtualinvoke v15.<com.novell.ldapchai.util.internal.ChaiLogger: void warn(java.util.function.Supplier,java.lang.Exception)>(v16, v10);
v17 = new java.lang.IllegalStateException;
specialinvoke v17.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v14);
throw v17;
catch java.lang.IllegalAccessException from label1 to label2 with label3;
catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
}
static void <clinit>()
{
com.novell.ldapchai.util.internal.ChaiLogger v0;
v0 = staticinvoke <com.novell.ldapchai.util.internal.ChaiLogger: com.novell.ldapchai.util.internal.ChaiLogger getLogger(java.lang.Class)>(class "Lcom/novell/ldapchai/provider/AbstractWrapper;");
<com.novell.ldapchai.provider.AbstractWrapper: com.novell.ldapchai.util.internal.ChaiLogger LOGGER> = v0;
return;
}
}