class com.novell.ldapchai.provider.ReadOnlyWrapper extends java.lang.Object implements java.lang.reflect.InvocationHandler
{
private static final com.novell.ldapchai.util.internal.ChaiLogger LOGGER;
private com.novell.ldapchai.provider.ChaiProviderImplementor realProvider;
static com.novell.ldapchai.provider.ChaiProviderImplementor forProvider(com.novell.ldapchai.provider.ChaiProviderImplementor)
{
java.lang.Class[] v9;
com.novell.ldapchai.provider.ChaiProviderImplementor v0;
com.novell.ldapchai.provider.ReadOnlyWrapper v10;
java.util.function.Supplier v5;
java.lang.Class v1, v6, v8;
java.lang.Object v11;
java.lang.ClassLoader v7;
boolean v2, v3;
com.novell.ldapchai.util.internal.ChaiLogger v4;
v0 := @parameter0: com.novell.ldapchai.provider.ChaiProviderImplementor;
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v2 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(v1);
if v2 == 0 goto label1;
v3 = v0 instanceof com.novell.ldapchai.provider.ReadOnlyWrapper;
if v3 == 0 goto label1;
v4 = <com.novell.ldapchai.provider.ReadOnlyWrapper: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v5 = staticinvoke <com.novell.ldapchai.provider.ReadOnlyWrapper$lambda_forProvider_0__158: java.util.function.Supplier bootstrap$()>();
virtualinvoke v4.<com.novell.ldapchai.util.internal.ChaiLogger: void warn(java.util.function.Supplier)>(v5);
return v0;
label1:
v6 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v7 = virtualinvoke v6.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
v8 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v9 = virtualinvoke v8.<java.lang.Class: java.lang.Class[] getInterfaces()>();
v10 = new com.novell.ldapchai.provider.ReadOnlyWrapper;
specialinvoke v10.<com.novell.ldapchai.provider.ReadOnlyWrapper: void <init>(com.novell.ldapchai.provider.ChaiProviderImplementor)>(v0);
v11 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>(v7, v9, v10);
return v11;
}
private void <init>(com.novell.ldapchai.provider.ChaiProviderImplementor)
{
com.novell.ldapchai.provider.ChaiProviderImplementor v1;
com.novell.ldapchai.provider.ReadOnlyWrapper v0;
v0 := @this: com.novell.ldapchai.provider.ReadOnlyWrapper;
v1 := @parameter0: com.novell.ldapchai.provider.ChaiProviderImplementor;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<com.novell.ldapchai.provider.ReadOnlyWrapper: com.novell.ldapchai.provider.ChaiProviderImplementor realProvider> = v1;
return;
}
public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable
{
java.lang.Throwable v11;
java.lang.Object[] v3;
com.novell.ldapchai.provider.ChaiProviderImplementor v8;
com.novell.ldapchai.provider.ReadOnlyWrapper v0;
com.novell.ldapchai.exception.ChaiError v7;
java.lang.reflect.InvocationTargetException v10;
java.lang.'annotation'.Annotation v4;
java.lang.Object v1, v9;
java.lang.reflect.Method v2;
com.novell.ldapchai.exception.ChaiOperationException v6;
boolean v5;
v0 := @this: com.novell.ldapchai.provider.ReadOnlyWrapper;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.reflect.Method;
v3 := @parameter2: java.lang.Object[];
v4 = virtualinvoke v2.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lcom/novell/ldapchai/provider/ChaiProvider$ModifyOperation;");
if v4 == null goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
if v5 == 0 goto label3;
v6 = new com.novell.ldapchai.exception.ChaiOperationException;
v7 = <com.novell.ldapchai.exception.ChaiError: com.novell.ldapchai.exception.ChaiError READ_ONLY_VIOLATION>;
specialinvoke v6.<com.novell.ldapchai.exception.ChaiOperationException: void <init>(java.lang.String,com.novell.ldapchai.exception.ChaiError,boolean,boolean)>("attempt to make ldap modifaction, but Chai is configured for read-only", v7, 1, 0);
throw v6;
label3:
v8 = v0.<com.novell.ldapchai.provider.ReadOnlyWrapper: com.novell.ldapchai.provider.ChaiProviderImplementor realProvider>;
v9 = virtualinvoke v2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v8, v3);
label4:
return v9;
label5:
v10 := @caughtexception;
v11 = virtualinvoke v10.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();
throw v11;
catch java.lang.reflect.InvocationTargetException from label3 to label4 with label5;
}
static void <clinit>()
{
com.novell.ldapchai.util.internal.ChaiLogger v0;
v0 = staticinvoke <com.novell.ldapchai.util.internal.ChaiLogger: com.novell.ldapchai.util.internal.ChaiLogger getLogger(java.lang.Class)>(class "Lcom/novell/ldapchai/provider/ReadOnlyWrapper;");
<com.novell.ldapchai.provider.ReadOnlyWrapper: com.novell.ldapchai.util.internal.ChaiLogger LOGGER> = v0;
return;
}
}