class com.novell.ldapchai.provider.WatchdogProviderHolder extends java.lang.Object
{
private static final com.novell.ldapchai.util.internal.ChaiLogger LOGGER;
private final java.util.concurrent.locks.ReadWriteLock usageLock;
private final java.util.concurrent.locks.Lock providerChangeLock;
private final java.lang.String wrapperIdentifier;
private final com.novell.ldapchai.provider.ChaiProviderFactory chaiProviderFactory;
private final com.novell.ldapchai.provider.WatchdogWrapper$Settings settings;
private final com.novell.ldapchai.provider.ChaiConfiguration chaiConfiguration;
private volatile com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder miniHolder;
private volatile java.time.Instant lastActivity;
private volatile boolean closed;
void <init>(java.lang.String, com.novell.ldapchai.provider.ChaiProviderImplementor, com.novell.ldapchai.provider.WatchdogWrapper$Settings)
{
com.novell.ldapchai.provider.WatchdogWrapper$Settings v3;
com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder v9;
java.util.concurrent.locks.ReentrantLock v5;
com.novell.ldapchai.provider.WatchdogProviderHolder v0;
com.novell.ldapchai.provider.ChaiConfiguration v7;
com.novell.ldapchai.provider.ChaiProviderImplementor v2;
java.util.concurrent.locks.ReentrantReadWriteLock v4;
java.time.Instant v6;
java.util.function.Supplier v11;
com.novell.ldapchai.provider.ChaiProviderFactory v8;
java.lang.String v1;
com.novell.ldapchai.util.internal.ChaiLogger v10;
v0 := @this: com.novell.ldapchai.provider.WatchdogProviderHolder;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: com.novell.ldapchai.provider.ChaiProviderImplementor;
v3 := @parameter2: com.novell.ldapchai.provider.WatchdogWrapper$Settings;
specialinvoke v0.<java.lang.Object: void <init>()>();
v4 = new java.util.concurrent.locks.ReentrantReadWriteLock;
specialinvoke v4.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();
v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: java.util.concurrent.locks.ReadWriteLock usageLock> = v4;
v5 = new java.util.concurrent.locks.ReentrantLock;
specialinvoke v5.<java.util.concurrent.locks.ReentrantLock: void <init>()>();
v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: java.util.concurrent.locks.Lock providerChangeLock> = v5;
v6 = staticinvoke <java.time.Instant: java.time.Instant now()>();
v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: java.time.Instant lastActivity> = v6;
v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: boolean closed> = 0;
v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: java.lang.String wrapperIdentifier> = v1;
v7 = interfaceinvoke v2.<com.novell.ldapchai.provider.ChaiProviderImplementor: com.novell.ldapchai.provider.ChaiConfiguration getChaiConfiguration()>();
v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: com.novell.ldapchai.provider.ChaiConfiguration chaiConfiguration> = v7;
v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: com.novell.ldapchai.provider.WatchdogWrapper$Settings settings> = v3;
v8 = interfaceinvoke v2.<com.novell.ldapchai.provider.ChaiProviderImplementor: com.novell.ldapchai.provider.ChaiProviderFactory getProviderFactory()>();
v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: com.novell.ldapchai.provider.ChaiProviderFactory chaiProviderFactory> = v8;
v9 = new com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder;
specialinvoke v9.<com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder: void <init>(com.novell.ldapchai.provider.ChaiProviderImplementor)>(v2);
v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder miniHolder> = v9;
v10 = <com.novell.ldapchai.provider.WatchdogProviderHolder: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v11 = staticinvoke <com.novell.ldapchai.provider.WatchdogProviderHolder$lambda_new_0__169: java.util.function.Supplier bootstrap$(java.lang.String)>(v1);
virtualinvoke v10.<com.novell.ldapchai.util.internal.ChaiLogger: void trace(java.util.function.Supplier)>(v11);
return;
}
public boolean isConnected()
{
com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder v2;
com.novell.ldapchai.provider.WatchdogProviderHolder v0;
boolean v1, v3;
v0 := @this: com.novell.ldapchai.provider.WatchdogProviderHolder;
v1 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: boolean closed>;
if v1 != 0 goto label1;
v2 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder miniHolder>;
if v2 == null goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public void close()
{
com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder v1;
com.novell.ldapchai.provider.WatchdogProviderHolder v0;
com.novell.ldapchai.provider.ChaiProviderImplementor v2;
java.util.function.Supplier v5;
java.lang.Exception v3;
com.novell.ldapchai.util.internal.ChaiLogger v4;
v0 := @this: com.novell.ldapchai.provider.WatchdogProviderHolder;
v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: boolean closed> = 1;
label1:
v1 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder miniHolder>;
if v1 == null goto label4;
v2 = virtualinvoke v1.<com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder: com.novell.ldapchai.provider.ChaiProviderImplementor getRealProvider()>();
interfaceinvoke v2.<com.novell.ldapchai.provider.ChaiProviderImplementor: void close()>();
label2:
goto label4;
label3:
v3 := @caughtexception;
v4 = <com.novell.ldapchai.provider.WatchdogProviderHolder: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v5 = staticinvoke <com.novell.ldapchai.provider.WatchdogProviderHolder$lambda_close_1__170: java.util.function.Supplier bootstrap$(java.lang.Exception)>(v3);
virtualinvoke v4.<com.novell.ldapchai.util.internal.ChaiLogger: void debug(java.util.function.Supplier,java.lang.Exception)>(v5, v3);
label4:
v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder miniHolder> = null;
return;
catch java.lang.Exception from label1 to label2 with label3;
}
java.lang.Object getConnectionObject() throws java.lang.Exception
{
java.lang.Throwable v7;
com.novell.ldapchai.provider.WatchdogProviderHolder v0;
com.novell.ldapchai.provider.ChaiProviderImplementor v3;
java.util.concurrent.locks.Lock v2, v6, v9;
java.lang.Object v4;
java.util.concurrent.locks.ReadWriteLock v1, v5, v8;
v0 := @this: com.novell.ldapchai.provider.WatchdogProviderHolder;
v1 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: java.util.concurrent.locks.ReadWriteLock usageLock>;
v2 = interfaceinvoke v1.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();
interfaceinvoke v2.<java.util.concurrent.locks.Lock: void lock()>();
label1:
v3 = specialinvoke v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: com.novell.ldapchai.provider.ChaiProviderImplementor getProvider()>();
v4 = interfaceinvoke v3.<com.novell.ldapchai.provider.ChaiProviderImplementor: java.lang.Object getConnectionObject()>();
label2:
v5 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: java.util.concurrent.locks.ReadWriteLock usageLock>;
v6 = interfaceinvoke v5.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();
interfaceinvoke v6.<java.util.concurrent.locks.Lock: void unlock()>();
return v4;
label3:
v7 := @caughtexception;
v8 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: java.util.concurrent.locks.ReadWriteLock usageLock>;
v9 = interfaceinvoke v8.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();
interfaceinvoke v9.<java.util.concurrent.locks.Lock: void unlock()>();
throw v7;
catch java.lang.Throwable from label1 to label2 with label3;
}
java.lang.Object execute(com.novell.ldapchai.provider.WatchdogProviderHolder$LdapFunction) throws com.novell.ldapchai.exception.ChaiOperationException, com.novell.ldapchai.exception.ChaiUnavailableException
{
java.lang.Throwable v14;
com.novell.ldapchai.provider.ChaiProviderImplementor v5;
com.novell.ldapchai.provider.WatchdogProviderHolder$LdapFunction v1;
java.util.function.Supplier v13;
java.util.concurrent.locks.ReadWriteLock v15, v2, v8;
boolean v11;
com.novell.ldapchai.exception.ChaiException v10;
com.novell.ldapchai.provider.WatchdogProviderHolder v0;
java.time.Instant v4, v7;
java.util.concurrent.locks.Lock v16, v3, v9;
java.lang.Object v6;
com.novell.ldapchai.util.internal.ChaiLogger v12;
v0 := @this: com.novell.ldapchai.provider.WatchdogProviderHolder;
v1 := @parameter0: com.novell.ldapchai.provider.WatchdogProviderHolder$LdapFunction;
v2 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: java.util.concurrent.locks.ReadWriteLock usageLock>;
v3 = interfaceinvoke v2.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();
interfaceinvoke v3.<java.util.concurrent.locks.Lock: void lock()>();
label1:
v4 = staticinvoke <java.time.Instant: java.time.Instant now()>();
v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: java.time.Instant lastActivity> = v4;
v5 = specialinvoke v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: com.novell.ldapchai.provider.ChaiProviderImplementor getProvider()>();
v6 = interfaceinvoke v1.<com.novell.ldapchai.provider.WatchdogProviderHolder$LdapFunction: java.lang.Object execute(com.novell.ldapchai.provider.ChaiProvider)>(v5);
v7 = staticinvoke <java.time.Instant: java.time.Instant now()>();
v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: java.time.Instant lastActivity> = v7;
label2:
v8 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: java.util.concurrent.locks.ReadWriteLock usageLock>;
v9 = interfaceinvoke v8.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();
interfaceinvoke v9.<java.util.concurrent.locks.Lock: void unlock()>();
return v6;
label3:
v10 := @caughtexception;
v11 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: boolean closed>;
if v11 == 0 goto label4;
v12 = <com.novell.ldapchai.provider.WatchdogProviderHolder: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v13 = staticinvoke <com.novell.ldapchai.provider.WatchdogProviderHolder$lambda_execute_2__171: java.util.function.Supplier bootstrap$(com.novell.ldapchai.exception.ChaiException)>(v10);
virtualinvoke v12.<com.novell.ldapchai.util.internal.ChaiLogger: void debug(java.util.function.Supplier)>(v13);
label4:
throw v10;
label5:
v14 := @caughtexception;
v15 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: java.util.concurrent.locks.ReadWriteLock usageLock>;
v16 = interfaceinvoke v15.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();
interfaceinvoke v16.<java.util.concurrent.locks.Lock: void unlock()>();
throw v14;
catch com.novell.ldapchai.exception.ChaiUnavailableException from label1 to label2 with label3;
catch com.novell.ldapchai.exception.ChaiOperationException from label1 to label2 with label3;
catch java.lang.Throwable from label1 to label2 with label5;
}
private com.novell.ldapchai.provider.ChaiProviderImplementor getProvider() throws com.novell.ldapchai.exception.ChaiUnavailableException
{
java.lang.Throwable v15;
java.lang.IllegalStateException v8;
com.novell.ldapchai.provider.ChaiProviderImplementor v11, v13, v4;
java.util.function.Supplier v6;
boolean v5, v7;
com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder v10, v2, v3, v9;
com.novell.ldapchai.provider.WatchdogProviderHolder v0;
java.util.concurrent.locks.Lock v1, v12, v14, v16;
v0 := @this: com.novell.ldapchai.provider.WatchdogProviderHolder;
v1 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: java.util.concurrent.locks.Lock providerChangeLock>;
interfaceinvoke v1.<java.util.concurrent.locks.Lock: void lock()>();
label1:
v2 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder miniHolder>;
if v2 == null goto label2;
v3 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder miniHolder>;
v4 = virtualinvoke v3.<com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder: com.novell.ldapchai.provider.ChaiProviderImplementor getRealProvider()>();
v5 = interfaceinvoke v4.<com.novell.ldapchai.provider.ChaiProviderImplementor: boolean isConnected()>();
if v5 != 0 goto label2;
v6 = staticinvoke <com.novell.ldapchai.provider.WatchdogProviderHolder$lambda_getProvider_3__172: java.util.function.Supplier bootstrap$()>();
specialinvoke v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: void disconnectRealProvider(java.util.function.Supplier)>(v6);
label2:
v7 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: boolean closed>;
if v7 == 0 goto label3;
v8 = new java.lang.IllegalStateException;
specialinvoke v8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ChaiProvider instance has been closed");
throw v8;
label3:
v9 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder miniHolder>;
if v9 == null goto label5;
v10 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder miniHolder>;
v11 = virtualinvoke v10.<com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder: com.novell.ldapchai.provider.ChaiProviderImplementor getRealProvider()>();
label4:
v12 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: java.util.concurrent.locks.Lock providerChangeLock>;
interfaceinvoke v12.<java.util.concurrent.locks.Lock: void unlock()>();
return v11;
label5:
v13 = specialinvoke v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: com.novell.ldapchai.provider.ChaiProviderImplementor restoreRealProvider()>();
label6:
v14 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: java.util.concurrent.locks.Lock providerChangeLock>;
interfaceinvoke v14.<java.util.concurrent.locks.Lock: void unlock()>();
return v13;
label7:
v15 := @caughtexception;
v16 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: java.util.concurrent.locks.Lock providerChangeLock>;
interfaceinvoke v16.<java.util.concurrent.locks.Lock: void unlock()>();
throw v15;
catch java.lang.Throwable from label1 to label4 with label7;
catch java.lang.Throwable from label5 to label6 with label7;
}
void periodicStatusCheck()
{
java.lang.Throwable v9;
com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder v1;
com.novell.ldapchai.provider.WatchdogProviderHolder v0;
java.util.concurrent.locks.Lock v10, v12, v3, v5, v6, v8;
java.util.concurrent.locks.ReadWriteLock v11, v2, v7;
boolean v4;
v0 := @this: com.novell.ldapchai.provider.WatchdogProviderHolder;
v1 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder miniHolder>;
if v1 != null goto label1;
return;
label1:
v2 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: java.util.concurrent.locks.ReadWriteLock usageLock>;
v3 = interfaceinvoke v2.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
v4 = interfaceinvoke v3.<java.util.concurrent.locks.Lock: boolean tryLock()>();
if v4 == 0 goto label5;
v5 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: java.util.concurrent.locks.Lock providerChangeLock>;
interfaceinvoke v5.<java.util.concurrent.locks.Lock: void lock()>();
label2:
specialinvoke v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: void checkMaxLifetimeDuration()>();
specialinvoke v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: void checkIdleTimeout()>();
label3:
v6 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: java.util.concurrent.locks.Lock providerChangeLock>;
interfaceinvoke v6.<java.util.concurrent.locks.Lock: void unlock()>();
v7 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: java.util.concurrent.locks.ReadWriteLock usageLock>;
v8 = interfaceinvoke v7.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
interfaceinvoke v8.<java.util.concurrent.locks.Lock: void unlock()>();
goto label6;
label4:
v9 := @caughtexception;
v10 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: java.util.concurrent.locks.Lock providerChangeLock>;
interfaceinvoke v10.<java.util.concurrent.locks.Lock: void unlock()>();
v11 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: java.util.concurrent.locks.ReadWriteLock usageLock>;
v12 = interfaceinvoke v11.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
interfaceinvoke v12.<java.util.concurrent.locks.Lock: void unlock()>();
throw v9;
label5:
specialinvoke v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: void checkOperationTimeout()>();
label6:
return;
catch java.lang.Throwable from label2 to label3 with label4;
}
private void checkIdleTimeout()
{
com.novell.ldapchai.provider.WatchdogWrapper$Settings v5;
com.novell.ldapchai.provider.WatchdogProviderHolder v0;
long v4;
java.time.Instant v1, v2;
java.util.function.Supplier v8;
byte v7;
java.time.Duration v3;
int v6;
v0 := @this: com.novell.ldapchai.provider.WatchdogProviderHolder;
v1 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: java.time.Instant lastActivity>;
v2 = staticinvoke <java.time.Instant: java.time.Instant now()>();
v3 = staticinvoke <java.time.Duration: java.time.Duration between(java.time.temporal.Temporal,java.time.temporal.Temporal)>(v1, v2);
v4 = virtualinvoke v3.<java.time.Duration: long toMillis()>();
v5 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: com.novell.ldapchai.provider.WatchdogWrapper$Settings settings>;
v6 = virtualinvoke v5.<com.novell.ldapchai.provider.WatchdogWrapper$Settings: int getIdleTimeoutMS()>();
v7 = v4 cmp v6;
if v7 <= 0 goto label1;
v8 = staticinvoke <com.novell.ldapchai.provider.WatchdogProviderHolder$lambda_checkIdleTimeout_4__173: java.util.function.Supplier bootstrap$(com.novell.ldapchai.provider.WatchdogProviderHolder,java.time.Duration)>(v0, v3);
specialinvoke v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: void disconnectRealProvider(java.util.function.Supplier)>(v8);
label1:
return;
}
private void checkMaxLifetimeDuration()
{
com.novell.ldapchai.provider.WatchdogWrapper$Settings v1;
com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder v3, v6;
com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder$DetectAllowDisconnectSupplier v4;
com.novell.ldapchai.provider.WatchdogProviderHolder v0;
java.time.Instant v7, v8;
java.util.function.Supplier v11;
java.time.Duration v2, v9;
int v10;
boolean v5;
v0 := @this: com.novell.ldapchai.provider.WatchdogProviderHolder;
v1 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: com.novell.ldapchai.provider.WatchdogWrapper$Settings settings>;
v2 = virtualinvoke v1.<com.novell.ldapchai.provider.WatchdogWrapper$Settings: java.time.Duration getMaxConnectionLifetime()>();
v3 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder miniHolder>;
v4 = virtualinvoke v3.<com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder: com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder$DetectAllowDisconnectSupplier getAllowDisconnectSupplier()>();
v5 = virtualinvoke v4.<com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder$DetectAllowDisconnectSupplier: boolean getAsBoolean()>();
if v5 == 0 goto label1;
if v2 != null goto label2;
label1:
return;
label2:
v6 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder miniHolder>;
v7 = virtualinvoke v6.<com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder: java.time.Instant getConnectionEstablishedTime()>();
v8 = staticinvoke <java.time.Instant: java.time.Instant now()>();
v9 = staticinvoke <java.time.Duration: java.time.Duration between(java.time.temporal.Temporal,java.time.temporal.Temporal)>(v7, v8);
v10 = virtualinvoke v9.<java.time.Duration: int compareTo(java.time.Duration)>(v2);
if v10 <= 0 goto label3;
v11 = staticinvoke <com.novell.ldapchai.provider.WatchdogProviderHolder$lambda_checkMaxLifetimeDuration_5__174: java.util.function.Supplier bootstrap$(java.time.Duration,java.time.Duration)>(v9, v2);
specialinvoke v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: void disconnectRealProvider(java.util.function.Supplier)>(v11);
label3:
return;
}
private void checkOperationTimeout()
{
com.novell.ldapchai.provider.WatchdogWrapper$Settings v6;
com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder v1;
com.novell.ldapchai.provider.WatchdogProviderHolder v0;
long v5;
java.time.Instant v2, v3;
java.util.function.Supplier v9;
byte v8;
java.time.Duration v4;
int v7;
v0 := @this: com.novell.ldapchai.provider.WatchdogProviderHolder;
v1 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder miniHolder>;
if v1 != null goto label1;
return;
label1:
v2 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: java.time.Instant lastActivity>;
v3 = staticinvoke <java.time.Instant: java.time.Instant now()>();
v4 = staticinvoke <java.time.Duration: java.time.Duration between(java.time.temporal.Temporal,java.time.temporal.Temporal)>(v2, v3);
v5 = virtualinvoke v4.<java.time.Duration: long toMillis()>();
v6 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: com.novell.ldapchai.provider.WatchdogWrapper$Settings settings>;
v7 = virtualinvoke v6.<com.novell.ldapchai.provider.WatchdogWrapper$Settings: int getOperationTimeoutMS()>();
v8 = v5 cmp v7;
if v8 <= 0 goto label2;
v9 = staticinvoke <com.novell.ldapchai.provider.WatchdogProviderHolder$lambda_checkOperationTimeout_6__175: java.util.function.Supplier bootstrap$(com.novell.ldapchai.provider.WatchdogProviderHolder,java.time.Duration)>(v0, v4);
specialinvoke v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: void disconnectRealProvider(java.util.function.Supplier)>(v9);
label2:
return;
}
private com.novell.ldapchai.provider.ChaiProviderImplementor restoreRealProvider() throws com.novell.ldapchai.exception.ChaiUnavailableException
{
com.novell.ldapchai.provider.ChaiProviderImplementor v4;
java.util.function.Supplier v15, v7;
com.novell.ldapchai.provider.ChaiProviderFactory v2;
java.time.Duration v9;
java.lang.String v11, v12, v13;
com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder v5;
com.novell.ldapchai.provider.WatchdogProviderHolder v0;
com.novell.ldapchai.provider.ChaiConfiguration v3;
java.time.Instant v1, v8;
com.novell.ldapchai.exception.ChaiUnavailableException v10;
com.novell.ldapchai.util.internal.ChaiLogger v14, v6;
v0 := @this: com.novell.ldapchai.provider.WatchdogProviderHolder;
label1:
v1 = staticinvoke <java.time.Instant: java.time.Instant now()>();
v2 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: com.novell.ldapchai.provider.ChaiProviderFactory chaiProviderFactory>;
v3 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: com.novell.ldapchai.provider.ChaiConfiguration chaiConfiguration>;
v4 = virtualinvoke v2.<com.novell.ldapchai.provider.ChaiProviderFactory: com.novell.ldapchai.provider.ChaiProviderImplementor createFailOverOrConcreteProvider(com.novell.ldapchai.provider.ChaiConfiguration)>(v3);
v5 = new com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder;
specialinvoke v5.<com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder: void <init>(com.novell.ldapchai.provider.ChaiProviderImplementor)>(v4);
v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder miniHolder> = v5;
v6 = <com.novell.ldapchai.provider.WatchdogProviderHolder: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v7 = staticinvoke <com.novell.ldapchai.provider.WatchdogProviderHolder$lambda_restoreRealProvider_7__176: java.util.function.Supplier bootstrap$(com.novell.ldapchai.provider.WatchdogProviderHolder)>(v0);
v8 = staticinvoke <java.time.Instant: java.time.Instant now()>();
v9 = staticinvoke <java.time.Duration: java.time.Duration between(java.time.temporal.Temporal,java.time.temporal.Temporal)>(v1, v8);
virtualinvoke v6.<com.novell.ldapchai.util.internal.ChaiLogger: void trace(java.util.function.Supplier,java.time.Duration)>(v7, v9);
label2:
return v4;
label3:
v10 := @caughtexception;
v11 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: java.lang.String wrapperIdentifier>;
v12 = virtualinvoke v10.<com.novell.ldapchai.exception.ChaiUnavailableException: java.lang.String getMessage()>();
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v11, v12) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("error reopening ldap connection for id=\u0001, error: \u0001");
v14 = <com.novell.ldapchai.provider.WatchdogProviderHolder: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v15 = staticinvoke <com.novell.ldapchai.provider.WatchdogProviderHolder$lambda_restoreRealProvider_8__177: java.util.function.Supplier bootstrap$(java.lang.String)>(v13);
virtualinvoke v14.<com.novell.ldapchai.util.internal.ChaiLogger: void debug(java.util.function.Supplier)>(v15);
throw v10;
catch com.novell.ldapchai.exception.ChaiUnavailableException from label1 to label2 with label3;
}
private void disconnectRealProvider(java.util.function.Supplier)
{
com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder v2;
com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder$DetectAllowDisconnectSupplier v3;
com.novell.ldapchai.provider.WatchdogProviderHolder v0;
com.novell.ldapchai.provider.ChaiProviderImplementor v5;
java.util.function.Supplier v1;
boolean v4;
com.novell.ldapchai.util.internal.ChaiLogger v6;
v0 := @this: com.novell.ldapchai.provider.WatchdogProviderHolder;
v1 := @parameter0: java.util.function.Supplier;
v2 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder miniHolder>;
if v2 != null goto label1;
return;
label1:
v3 = virtualinvoke v2.<com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder: com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder$DetectAllowDisconnectSupplier getAllowDisconnectSupplier()>();
v4 = virtualinvoke v3.<com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder$DetectAllowDisconnectSupplier: boolean getAsBoolean()>();
if v4 != 0 goto label2;
return;
label2:
v5 = virtualinvoke v2.<com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder: com.novell.ldapchai.provider.ChaiProviderImplementor getRealProvider()>();
interfaceinvoke v5.<com.novell.ldapchai.provider.ChaiProviderImplementor: void close()>();
v0.<com.novell.ldapchai.provider.WatchdogProviderHolder: com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder miniHolder> = null;
v6 = <com.novell.ldapchai.provider.WatchdogProviderHolder: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
virtualinvoke v6.<com.novell.ldapchai.util.internal.ChaiLogger: void trace(java.util.function.Supplier)>(v1);
return;
}
static void <clinit>()
{
com.novell.ldapchai.util.internal.ChaiLogger v0;
v0 = staticinvoke <com.novell.ldapchai.util.internal.ChaiLogger: com.novell.ldapchai.util.internal.ChaiLogger getLogger(java.lang.Class)>(class "Lcom/novell/ldapchai/provider/WatchdogProviderHolder;");
<com.novell.ldapchai.provider.WatchdogProviderHolder: com.novell.ldapchai.util.internal.ChaiLogger LOGGER> = v0;
return;
}
}