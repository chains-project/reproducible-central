public final enum class com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum extends java.lang.Enum
{
public static final enum com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum EQUALS;
public static final enum com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum APPROX_EQUALS;
public static final enum com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum GREATER;
public static final enum com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum LESS;
private final java.lang.String matchCode;
private static final com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum[] $VALUES;
public static com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum[] values()
{
com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum[] v0;
java.lang.Object v1;
v0 = <com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum: com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum[] $VALUES>;
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
return v1;
}
public static com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum valueOf(java.lang.String)
{
java.lang.String v0;
java.lang.Enum v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/novell/ldapchai/util/SearchHelper$FilterSequence$MatchingRuleEnum;", v0);
return v1;
}
private void <init>(java.lang.String, int, java.lang.String)
{
int v2;
java.lang.String v1, v3;
com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum v0;
v0 := @this: com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: java.lang.String;
specialinvoke v0.<java.lang.Enum: void <init>(java.lang.String,int)>(v1, v2);
v0.<com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum: java.lang.String matchCode> = v3;
return;
}
public java.lang.String getMatchCode()
{
java.lang.String v1;
com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum v0;
v0 := @this: com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum;
v1 = v0.<com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum: java.lang.String matchCode>;
return v1;
}
private static com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum[] $values()
{
com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum[] v0;
com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum v1, v2, v3, v4;
v0 = newarray (com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum)[4];
v1 = <com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum: com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum EQUALS>;
v0[0] = v1;
v2 = <com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum: com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum APPROX_EQUALS>;
v0[1] = v2;
v3 = <com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum: com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum GREATER>;
v0[2] = v3;
v4 = <com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum: com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum LESS>;
v0[3] = v4;
return v0;
}
static void <clinit>()
{
com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum[] v4;
com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum v0, v1, v2, v3;
v0 = new com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum;
specialinvoke v0.<com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum: void <init>(java.lang.String,int,java.lang.String)>("EQUALS", 0, "=");
<com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum: com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum EQUALS> = v0;
v1 = new com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum;
specialinvoke v1.<com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum: void <init>(java.lang.String,int,java.lang.String)>("APPROX_EQUALS", 1, "~=");
<com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum: com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum APPROX_EQUALS> = v1;
v2 = new com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum;
specialinvoke v2.<com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum: void <init>(java.lang.String,int,java.lang.String)>("GREATER", 2, ">=");
<com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum: com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum GREATER> = v2;
v3 = new com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum;
specialinvoke v3.<com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum: void <init>(java.lang.String,int,java.lang.String)>("LESS", 3, "<=");
<com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum: com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum LESS> = v3;
v4 = staticinvoke <com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum: com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum[] $values()>();
<com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum: com.novell.ldapchai.util.SearchHelper$FilterSequence$MatchingRuleEnum[] $VALUES> = v4;
return;
}
}