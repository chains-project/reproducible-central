class com.novell.ldapchai.cr.PasswordCryptAnswer extends java.lang.Object implements com.novell.ldapchai.cr.Answer
{
private static final java.util.function.Supplier SECURE_RANDOM_SUPPLIER;
private final java.lang.String answerHash;
private final boolean caseInsensitive;
private final com.novell.ldapchai.cr.Answer$FormatType formatType;
private void <init>(java.lang.String, boolean, com.novell.ldapchai.cr.Answer$FormatType)
{
com.novell.ldapchai.cr.Answer$FormatType v3;
com.novell.ldapchai.cr.PasswordCryptAnswer v0;
int v4;
java.lang.String v1;
java.lang.IllegalArgumentException v5;
boolean v2;
v0 := @this: com.novell.ldapchai.cr.PasswordCryptAnswer;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
v3 := @parameter2: com.novell.ldapchai.cr.Answer$FormatType;
specialinvoke v0.<java.lang.Object: void <init>()>();
if v1 == null goto label1;
v4 = virtualinvoke v1.<java.lang.String: int length()>();
if v4 >= 1 goto label2;
label1:
v5 = new java.lang.IllegalArgumentException;
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("missing answer text");
throw v5;
label2:
v0.<com.novell.ldapchai.cr.PasswordCryptAnswer: java.lang.String answerHash> = v1;
v0.<com.novell.ldapchai.cr.PasswordCryptAnswer: boolean caseInsensitive> = v2;
v0.<com.novell.ldapchai.cr.PasswordCryptAnswer: com.novell.ldapchai.cr.Answer$FormatType formatType> = v3;
return;
}
private void <init>(com.novell.ldapchai.cr.AnswerConfiguration, java.lang.String)
{
byte[] v17;
com.novell.ldapchai.cr.AnswerConfiguration v1;
java.util.function.Supplier v18;
int[] v13;
int v10, v11, v12, v15, v16, v3, v9;
java.lang.String v2, v21, v22, v25, v26, v8;
boolean v5, v7;
com.novell.ldapchai.cr.Answer$FormatType v14, v24, v6;
com.novell.ldapchai.cr.PasswordCryptAnswer v0;
java.lang.IllegalArgumentException v23, v4;
char[] v20;
java.lang.Object v19;
v0 := @this: com.novell.ldapchai.cr.PasswordCryptAnswer;
v1 := @parameter0: com.novell.ldapchai.cr.AnswerConfiguration;
v2 := @parameter1: java.lang.String;
specialinvoke v0.<java.lang.Object: void <init>()>();
if v2 == null goto label1;
v3 = virtualinvoke v2.<java.lang.String: int length()>();
if v3 >= 1 goto label2;
label1:
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("missing answerHash text");
throw v4;
label2:
v5 = virtualinvoke v1.<com.novell.ldapchai.cr.AnswerConfiguration: boolean isCaseInsensitive()>();
v0.<com.novell.ldapchai.cr.PasswordCryptAnswer: boolean caseInsensitive> = v5;
v6 = v1.<com.novell.ldapchai.cr.AnswerConfiguration: com.novell.ldapchai.cr.Answer$FormatType formatType>;
v0.<com.novell.ldapchai.cr.PasswordCryptAnswer: com.novell.ldapchai.cr.Answer$FormatType formatType> = v6;
v7 = v0.<com.novell.ldapchai.cr.PasswordCryptAnswer: boolean caseInsensitive>;
if v7 == 0 goto label3;
v8 = virtualinvoke v2.<java.lang.String: java.lang.String toLowerCase()>();
goto label4;
label3:
v8 = v2;
label4:
v9 = virtualinvoke v1.<com.novell.ldapchai.cr.AnswerConfiguration: int getIterations()>();
v10 = staticinvoke <java.lang.Math: int max(int,int)>(10, v9);
v11 = virtualinvoke v1.<com.novell.ldapchai.cr.AnswerConfiguration: int getSaltCharCount()>();
v12 = staticinvoke <java.lang.Math: int max(int,int)>(16, v11);
v13 = <com.novell.ldapchai.cr.PasswordCryptAnswer$1: int[] $SwitchMap$com$novell$ldapchai$cr$Answer$FormatType>;
v14 = v0.<com.novell.ldapchai.cr.PasswordCryptAnswer: com.novell.ldapchai.cr.Answer$FormatType formatType>;
v15 = virtualinvoke v14.<com.novell.ldapchai.cr.Answer$FormatType: int ordinal()>();
v16 = v13[v15];
lookupswitch(v16)
{
case 1: goto label5;
case 2: goto label6;
default: goto label7;
};
label5:
v17 = newarray (byte)[v12];
v18 = <com.novell.ldapchai.cr.PasswordCryptAnswer: java.util.function.Supplier SECURE_RANDOM_SUPPLIER>;
v19 = interfaceinvoke v18.<java.util.function.Supplier: java.lang.Object get()>();
virtualinvoke v19.<java.security.SecureRandom: void nextBytes(byte[])>(v17);
v20 = virtualinvoke v8.<java.lang.String: char[] toCharArray()>();
v21 = staticinvoke <org.bouncycastle.crypto.generators.OpenBSDBCrypt: java.lang.String generate(char[],byte[],int)>(v20, v17, v10);
v0.<com.novell.ldapchai.cr.PasswordCryptAnswer: java.lang.String answerHash> = v21;
goto label8;
label6:
v22 = staticinvoke <com.novell.ldapchai.util.internal.SCryptUtil: java.lang.String scrypt(java.lang.String,int,int)>(v8, v12, v10);
v0.<com.novell.ldapchai.cr.PasswordCryptAnswer: java.lang.String answerHash> = v22;
goto label8;
label7:
v23 = new java.lang.IllegalArgumentException;
v24 = v0.<com.novell.ldapchai.cr.PasswordCryptAnswer: com.novell.ldapchai.cr.Answer$FormatType formatType>;
v25 = virtualinvoke v24.<com.novell.ldapchai.cr.Answer$FormatType: java.lang.String toString()>();
v26 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v25) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("can\'t test answer for unknown format \u0001");
specialinvoke v23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v26);
throw v23;
label8:
return;
}
public org.jrivard.xmlchai.XmlElement toXml()
{
com.novell.ldapchai.cr.Answer$FormatType v4;
com.novell.ldapchai.cr.PasswordCryptAnswer v0;
java.lang.String v3, v5;
org.jrivard.xmlchai.XmlFactory v1;
org.jrivard.xmlchai.XmlElement v2;
v0 := @this: com.novell.ldapchai.cr.PasswordCryptAnswer;
v1 = staticinvoke <org.jrivard.xmlchai.XmlFactory: org.jrivard.xmlchai.XmlFactory getFactory()>();
v2 = interfaceinvoke v1.<org.jrivard.xmlchai.XmlFactory: org.jrivard.xmlchai.XmlElement newElement(java.lang.String)>("answer");
v3 = v0.<com.novell.ldapchai.cr.PasswordCryptAnswer: java.lang.String answerHash>;
interfaceinvoke v2.<org.jrivard.xmlchai.XmlElement: void setText(java.lang.String)>(v3);
v4 = v0.<com.novell.ldapchai.cr.PasswordCryptAnswer: com.novell.ldapchai.cr.Answer$FormatType formatType>;
v5 = virtualinvoke v4.<com.novell.ldapchai.cr.Answer$FormatType: java.lang.String toString()>();
interfaceinvoke v2.<org.jrivard.xmlchai.XmlElement: void setAttribute(java.lang.String,java.lang.String)>("format", v5);
return v2;
}
public boolean testAnswer(java.lang.String)
{
int[] v4;
int v6, v7;
java.lang.String v1, v11, v15, v16, v3, v8;
boolean v10, v12, v2;
com.novell.ldapchai.cr.Answer$FormatType v14, v5;
com.novell.ldapchai.cr.PasswordCryptAnswer v0;
java.lang.IllegalArgumentException v13;
char[] v9;
v0 := @this: com.novell.ldapchai.cr.PasswordCryptAnswer;
v1 := @parameter0: java.lang.String;
if v1 != null goto label1;
return 0;
label1:
v2 = v0.<com.novell.ldapchai.cr.PasswordCryptAnswer: boolean caseInsensitive>;
if v2 == 0 goto label2;
v3 = virtualinvoke v1.<java.lang.String: java.lang.String toLowerCase()>();
goto label3;
label2:
v3 = v1;
label3:
v4 = <com.novell.ldapchai.cr.PasswordCryptAnswer$1: int[] $SwitchMap$com$novell$ldapchai$cr$Answer$FormatType>;
v5 = v0.<com.novell.ldapchai.cr.PasswordCryptAnswer: com.novell.ldapchai.cr.Answer$FormatType formatType>;
v6 = virtualinvoke v5.<com.novell.ldapchai.cr.Answer$FormatType: int ordinal()>();
v7 = v4[v6];
lookupswitch(v7)
{
case 1: goto label4;
case 2: goto label5;
default: goto label6;
};
label4:
v8 = v0.<com.novell.ldapchai.cr.PasswordCryptAnswer: java.lang.String answerHash>;
v9 = virtualinvoke v3.<java.lang.String: char[] toCharArray()>();
v10 = staticinvoke <org.bouncycastle.crypto.generators.OpenBSDBCrypt: boolean checkPassword(java.lang.String,char[])>(v8, v9);
return v10;
label5:
v11 = v0.<com.novell.ldapchai.cr.PasswordCryptAnswer: java.lang.String answerHash>;
v12 = staticinvoke <com.novell.ldapchai.util.internal.SCryptUtil: boolean check(java.lang.String,java.lang.String)>(v3, v11);
return v12;
label6:
v13 = new java.lang.IllegalArgumentException;
v14 = v0.<com.novell.ldapchai.cr.PasswordCryptAnswer: com.novell.ldapchai.cr.Answer$FormatType formatType>;
v15 = virtualinvoke v14.<com.novell.ldapchai.cr.Answer$FormatType: java.lang.String toString()>();
v16 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v15) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("can\'t test answer for unknown format \u0001");
specialinvoke v13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v16);
throw v13;
}
public com.novell.ldapchai.cr.bean.AnswerBean asAnswerBean()
{
com.novell.ldapchai.cr.Answer$FormatType v2;
com.novell.ldapchai.cr.PasswordCryptAnswer v0;
int v5;
com.novell.ldapchai.cr.bean.AnswerBean v1;
java.lang.String v3;
boolean v4;
v0 := @this: com.novell.ldapchai.cr.PasswordCryptAnswer;
v1 = new com.novell.ldapchai.cr.bean.AnswerBean;
v2 = v0.<com.novell.ldapchai.cr.PasswordCryptAnswer: com.novell.ldapchai.cr.Answer$FormatType formatType>;
v3 = v0.<com.novell.ldapchai.cr.PasswordCryptAnswer: java.lang.String answerHash>;
v4 = v0.<com.novell.ldapchai.cr.PasswordCryptAnswer: boolean caseInsensitive>;
v5 = (int) -1;
specialinvoke v1.<com.novell.ldapchai.cr.bean.AnswerBean: void <init>(com.novell.ldapchai.cr.Answer$FormatType,java.lang.String,java.lang.String,java.lang.String,int,boolean)>(v2, null, v3, null, v5, v4);
return v1;
}
static void <clinit>()
{
java.util.function.Supplier v0;
v0 = staticinvoke <com.novell.ldapchai.cr.PasswordCryptAnswer$init__36: java.util.function.Supplier bootstrap$()>();
<com.novell.ldapchai.cr.PasswordCryptAnswer: java.util.function.Supplier SECURE_RANDOM_SUPPLIER> = v0;
return;
}
}