public class com.novell.ldapchai.impl.ad.value.UserAccountControl extends java.lang.Object
{
private final int uacValue;
public void <init>(java.lang.String)
{
int v2;
java.lang.String v1;
com.novell.ldapchai.impl.ad.value.UserAccountControl v0;
v0 := @this: com.novell.ldapchai.impl.ad.value.UserAccountControl;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = staticinvoke <com.novell.ldapchai.util.internal.StringHelper: int convertStrToInt(java.lang.String,int)>(v1, 0);
v0.<com.novell.ldapchai.impl.ad.value.UserAccountControl: int uacValue> = v2;
return;
}
public void <init>(int)
{
int v1;
com.novell.ldapchai.impl.ad.value.UserAccountControl v0;
v0 := @this: com.novell.ldapchai.impl.ad.value.UserAccountControl;
v1 := @parameter0: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<com.novell.ldapchai.impl.ad.value.UserAccountControl: int uacValue> = v1;
return;
}
public boolean isAccountLockout()
{
com.novell.ldapchai.impl.ad.value.UserAccountControl$UACBit v1;
com.novell.ldapchai.impl.ad.value.UserAccountControl v0;
boolean v2;
v0 := @this: com.novell.ldapchai.impl.ad.value.UserAccountControl;
v1 = <com.novell.ldapchai.impl.ad.value.UserAccountControl$UACBit: com.novell.ldapchai.impl.ad.value.UserAccountControl$UACBit ACCOUNT_LOCKOUT>;
v2 = virtualinvoke v0.<com.novell.ldapchai.impl.ad.value.UserAccountControl: boolean isBit(com.novell.ldapchai.impl.ad.value.UserAccountControl$UACBit)>(v1);
return v2;
}
public boolean isAccountActive()
{
com.novell.ldapchai.impl.ad.value.UserAccountControl$UACBit v1;
com.novell.ldapchai.impl.ad.value.UserAccountControl v0;
boolean v2;
v0 := @this: com.novell.ldapchai.impl.ad.value.UserAccountControl;
v1 = <com.novell.ldapchai.impl.ad.value.UserAccountControl$UACBit: com.novell.ldapchai.impl.ad.value.UserAccountControl$UACBit ACCOUNT_ACTIVE>;
v2 = virtualinvoke v0.<com.novell.ldapchai.impl.ad.value.UserAccountControl: boolean isBit(com.novell.ldapchai.impl.ad.value.UserAccountControl$UACBit)>(v1);
return v2;
}
public boolean isPasswordCantChange()
{
com.novell.ldapchai.impl.ad.value.UserAccountControl$UACBit v1;
com.novell.ldapchai.impl.ad.value.UserAccountControl v0;
boolean v2;
v0 := @this: com.novell.ldapchai.impl.ad.value.UserAccountControl;
v1 = <com.novell.ldapchai.impl.ad.value.UserAccountControl$UACBit: com.novell.ldapchai.impl.ad.value.UserAccountControl$UACBit PASSWORD_CANT_CHANGE>;
v2 = virtualinvoke v0.<com.novell.ldapchai.impl.ad.value.UserAccountControl: boolean isBit(com.novell.ldapchai.impl.ad.value.UserAccountControl$UACBit)>(v1);
return v2;
}
public boolean isPasswordExpired()
{
com.novell.ldapchai.impl.ad.value.UserAccountControl$UACBit v1;
com.novell.ldapchai.impl.ad.value.UserAccountControl v0;
boolean v2;
v0 := @this: com.novell.ldapchai.impl.ad.value.UserAccountControl;
v1 = <com.novell.ldapchai.impl.ad.value.UserAccountControl$UACBit: com.novell.ldapchai.impl.ad.value.UserAccountControl$UACBit PASSWORD_EXPIRED>;
v2 = virtualinvoke v0.<com.novell.ldapchai.impl.ad.value.UserAccountControl: boolean isBit(com.novell.ldapchai.impl.ad.value.UserAccountControl$UACBit)>(v1);
return v2;
}
public boolean isPasswordNeverExpires()
{
com.novell.ldapchai.impl.ad.value.UserAccountControl$UACBit v1;
com.novell.ldapchai.impl.ad.value.UserAccountControl v0;
boolean v2;
v0 := @this: com.novell.ldapchai.impl.ad.value.UserAccountControl;
v1 = <com.novell.ldapchai.impl.ad.value.UserAccountControl$UACBit: com.novell.ldapchai.impl.ad.value.UserAccountControl$UACBit PASSWORD_CANT_CHANGE>;
v2 = virtualinvoke v0.<com.novell.ldapchai.impl.ad.value.UserAccountControl: boolean isBit(com.novell.ldapchai.impl.ad.value.UserAccountControl$UACBit)>(v1);
return v2;
}
public boolean isBit(com.novell.ldapchai.impl.ad.value.UserAccountControl$UACBit)
{
com.novell.ldapchai.impl.ad.value.UserAccountControl$UACBit v1;
int v2, v3, v4, v5;
com.novell.ldapchai.impl.ad.value.UserAccountControl v0;
boolean v6;
v0 := @this: com.novell.ldapchai.impl.ad.value.UserAccountControl;
v1 := @parameter0: com.novell.ldapchai.impl.ad.value.UserAccountControl$UACBit;
v2 = v0.<com.novell.ldapchai.impl.ad.value.UserAccountControl: int uacValue>;
v3 = virtualinvoke v1.<com.novell.ldapchai.impl.ad.value.UserAccountControl$UACBit: int bitValue()>();
v4 = v2 & v3;
v5 = virtualinvoke v1.<com.novell.ldapchai.impl.ad.value.UserAccountControl$UACBit: int bitValue()>();
if v4 != v5 goto label1;
v6 = 1;
goto label2;
label1:
v6 = 0;
label2:
return v6;
}
}