public class com.novell.ldapchai.impl.edir.entry.EdirEntries extends java.lang.Object
{
private static final java.lang.String EDIR_TIMESTAMP_PATTERN;
private static final java.time.format.DateTimeFormatter EDIR_TIMESTAMP_FORMATTER;
private static final com.novell.ldapchai.util.internal.ChaiLogger LOGGER;
static final java.lang.String EDIR_ATTR_SUBORDINATE_COUNT;
public static java.lang.String convertInstantToZulu(java.time.Instant)
{
java.time.ZonedDateTime v4;
java.lang.IllegalArgumentException v7;
java.time.Instant v0;
java.lang.NullPointerException v1;
java.time.format.DateTimeParseException v6;
java.time.format.DateTimeFormatter v2;
java.lang.String v5, v8, v9;
java.time.ZoneOffset v3;
v0 := @parameter0: java.time.Instant;
if v0 != null goto label1;
v1 = new java.lang.NullPointerException;
specialinvoke v1.<java.lang.NullPointerException: void <init>()>();
throw v1;
label1:
v2 = <com.novell.ldapchai.impl.edir.entry.EdirEntries: java.time.format.DateTimeFormatter EDIR_TIMESTAMP_FORMATTER>;
v3 = <java.time.ZoneOffset: java.time.ZoneOffset UTC>;
v4 = virtualinvoke v0.<java.time.Instant: java.time.ZonedDateTime atZone(java.time.ZoneId)>(v3);
v5 = virtualinvoke v2.<java.time.format.DateTimeFormatter: java.lang.String format(java.time.temporal.TemporalAccessor)>(v4);
label2:
return v5;
label3:
v6 := @caughtexception;
v7 = new java.lang.IllegalArgumentException;
v8 = virtualinvoke v6.<java.time.format.DateTimeParseException: java.lang.String getMessage()>();
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unable to format zulu time-string: \u0001");
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v9);
throw v7;
catch java.time.format.DateTimeParseException from label1 to label2 with label3;
}
public static java.time.Instant convertZuluToInstant(java.lang.String)
{
java.time.ZonedDateTime v5;
java.time.LocalDateTime v3;
java.lang.IllegalArgumentException v8;
java.time.Instant v6;
java.lang.NullPointerException v1;
java.time.format.DateTimeParseException v7;
java.time.format.DateTimeFormatter v2;
java.lang.String v0, v10, v9;
java.time.ZoneOffset v4;
v0 := @parameter0: java.lang.String;
if v0 != null goto label1;
v1 = new java.lang.NullPointerException;
specialinvoke v1.<java.lang.NullPointerException: void <init>()>();
throw v1;
label1:
v2 = <com.novell.ldapchai.impl.edir.entry.EdirEntries: java.time.format.DateTimeFormatter EDIR_TIMESTAMP_FORMATTER>;
v3 = staticinvoke <java.time.LocalDateTime: java.time.LocalDateTime parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>(v0, v2);
v4 = <java.time.ZoneOffset: java.time.ZoneOffset UTC>;
v5 = virtualinvoke v3.<java.time.LocalDateTime: java.time.ZonedDateTime atZone(java.time.ZoneId)>(v4);
v6 = staticinvoke <java.time.Instant: java.time.Instant 'from'(java.time.temporal.TemporalAccessor)>(v5);
label2:
return v6;
label3:
v7 := @caughtexception;
v8 = new java.lang.IllegalArgumentException;
v9 = virtualinvoke v7.<java.time.format.DateTimeParseException: java.lang.String getMessage()>();
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unable to parse zulu time-string: \u0001");
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v10);
throw v8;
catch java.time.format.DateTimeParseException from label1 to label2 with label3;
}
static boolean convertStrToBoolean(java.lang.String)
{
java.lang.String v0;
boolean v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <com.novell.ldapchai.util.internal.StringHelper: boolean convertStrToBoolean(java.lang.String)>(v0);
return v1;
}
static int convertStrToInt(java.lang.String, int)
{
int v1, v2;
java.lang.String v0;
java.lang.Exception v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
if v0 != null goto label1;
return v1;
label1:
v2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v0);
label2:
return v2;
label3:
v3 := @caughtexception;
return v1;
catch java.lang.Exception from label1 to label2 with label3;
}
public static com.novell.ldapchai.ChaiUser createUser(java.lang.String, java.lang.String, com.novell.ldapchai.provider.ChaiProvider) throws com.novell.ldapchai.exception.ChaiOperationException, com.novell.ldapchai.exception.ChaiUnavailableException
{
com.novell.ldapchai.ChaiUser v5;
com.novell.ldapchai.ChaiEntryFactory v4;
java.util.HashMap v3;
java.lang.String v0, v1;
com.novell.ldapchai.provider.ChaiProvider v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: com.novell.ldapchai.provider.ChaiProvider;
v3 = new java.util.HashMap;
specialinvoke v3.<java.util.HashMap: void <init>()>();
interfaceinvoke v3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sn", v1);
interfaceinvoke v2.<com.novell.ldapchai.provider.ChaiProvider: void createEntry(java.lang.String,java.lang.String,java.util.Map)>(v0, "inetOrgPerson", v3);
v4 = interfaceinvoke v2.<com.novell.ldapchai.provider.ChaiProvider: com.novell.ldapchai.ChaiEntryFactory getEntryFactory()>();
v5 = virtualinvoke v4.<com.novell.ldapchai.ChaiEntryFactory: com.novell.ldapchai.ChaiUser newChaiUser(java.lang.String)>(v0);
return v5;
}
private static com.novell.ldapchai.ChaiEntry findPartitionRoot(com.novell.ldapchai.ChaiEntry) throws com.novell.ldapchai.exception.ChaiUnavailableException, com.novell.ldapchai.exception.ChaiOperationException
{
java.util.Set v2;
com.novell.ldapchai.ChaiEntry v0, v1;
boolean v3;
v0 := @parameter0: com.novell.ldapchai.ChaiEntry;
v1 = v0;
label1:
if v1 == null goto label3;
v2 = interfaceinvoke v1.<com.novell.ldapchai.ChaiEntry: java.util.Set readMultiStringAttribute(java.lang.String)>("objectClass");
v3 = interfaceinvoke v2.<java.util.Set: boolean contains(java.lang.Object)>("Partition");
if v3 == 0 goto label2;
return v1;
label2:
v1 = interfaceinvoke v1.<com.novell.ldapchai.ChaiEntry: com.novell.ldapchai.ChaiEntry getParentEntry()>();
goto label1;
label3:
return null;
}
public static com.novell.ldapchai.ChaiPasswordPolicy readPasswordPolicy(com.novell.ldapchai.ChaiUser) throws com.novell.ldapchai.exception.ChaiUnavailableException, com.novell.ldapchai.exception.ChaiOperationException
{
com.novell.ldapchai.ChaiUser v0;
com.novell.ldapchai.ChaiPasswordPolicy v1;
v0 := @parameter0: com.novell.ldapchai.ChaiUser;
v1 = staticinvoke <com.novell.ldapchai.impl.edir.entry.EdirEntries$UserPasswordPolicyReader: com.novell.ldapchai.ChaiPasswordPolicy readPasswordPolicy(com.novell.ldapchai.ChaiUser)>(v0);
return v1;
}
public static void removeGroupMembership(com.novell.ldapchai.ChaiUser, com.novell.ldapchai.ChaiGroup) throws com.novell.ldapchai.exception.ChaiOperationException, com.novell.ldapchai.exception.ChaiUnavailableException
{
com.novell.ldapchai.ChaiUser v0;
java.lang.NullPointerException v2, v3;
java.lang.String v4, v5, v6, v7;
com.novell.ldapchai.ChaiGroup v1;
v0 := @parameter0: com.novell.ldapchai.ChaiUser;
v1 := @parameter1: com.novell.ldapchai.ChaiGroup;
if v0 != null goto label1;
v2 = new java.lang.NullPointerException;
specialinvoke v2.<java.lang.NullPointerException: void <init>(java.lang.String)>("user cannot be null");
throw v2;
label1:
if v1 != null goto label2;
v3 = new java.lang.NullPointerException;
specialinvoke v3.<java.lang.NullPointerException: void <init>(java.lang.String)>("group cannot be null");
throw v3;
label2:
v4 = interfaceinvoke v1.<com.novell.ldapchai.ChaiGroup: java.lang.String getEntryDN()>();
interfaceinvoke v0.<com.novell.ldapchai.ChaiUser: void deleteAttribute(java.lang.String,java.lang.String)>("groupMembership", v4);
v5 = interfaceinvoke v1.<com.novell.ldapchai.ChaiGroup: java.lang.String getEntryDN()>();
interfaceinvoke v0.<com.novell.ldapchai.ChaiUser: void deleteAttribute(java.lang.String,java.lang.String)>("securityEquals", v5);
v6 = interfaceinvoke v0.<com.novell.ldapchai.ChaiUser: java.lang.String getEntryDN()>();
interfaceinvoke v1.<com.novell.ldapchai.ChaiGroup: void deleteAttribute(java.lang.String,java.lang.String)>("member", v6);
v7 = interfaceinvoke v0.<com.novell.ldapchai.ChaiUser: java.lang.String getEntryDN()>();
interfaceinvoke v1.<com.novell.ldapchai.ChaiGroup: void deleteAttribute(java.lang.String,java.lang.String)>("equivalentToMe", v7);
return;
}
public static void writeGroupMembership(com.novell.ldapchai.ChaiUser, com.novell.ldapchai.ChaiGroup) throws com.novell.ldapchai.exception.ChaiOperationException, com.novell.ldapchai.exception.ChaiUnavailableException
{
com.novell.ldapchai.ChaiUser v0;
java.lang.NullPointerException v2, v3;
java.lang.String v4, v5, v6, v7;
com.novell.ldapchai.ChaiGroup v1;
v0 := @parameter0: com.novell.ldapchai.ChaiUser;
v1 := @parameter1: com.novell.ldapchai.ChaiGroup;
if v0 != null goto label1;
v2 = new java.lang.NullPointerException;
specialinvoke v2.<java.lang.NullPointerException: void <init>(java.lang.String)>("user cannot be null");
throw v2;
label1:
if v1 != null goto label2;
v3 = new java.lang.NullPointerException;
specialinvoke v3.<java.lang.NullPointerException: void <init>(java.lang.String)>("group cannot be null");
throw v3;
label2:
v4 = interfaceinvoke v1.<com.novell.ldapchai.ChaiGroup: java.lang.String getEntryDN()>();
interfaceinvoke v0.<com.novell.ldapchai.ChaiUser: void addAttribute(java.lang.String,java.lang.String)>("groupMembership", v4);
v5 = interfaceinvoke v1.<com.novell.ldapchai.ChaiGroup: java.lang.String getEntryDN()>();
interfaceinvoke v0.<com.novell.ldapchai.ChaiUser: void addAttribute(java.lang.String,java.lang.String)>("securityEquals", v5);
v6 = interfaceinvoke v0.<com.novell.ldapchai.ChaiUser: java.lang.String getEntryDN()>();
interfaceinvoke v1.<com.novell.ldapchai.ChaiGroup: void addAttribute(java.lang.String,java.lang.String)>("member", v6);
v7 = interfaceinvoke v0.<com.novell.ldapchai.ChaiUser: java.lang.String getEntryDN()>();
interfaceinvoke v1.<com.novell.ldapchai.ChaiGroup: void addAttribute(java.lang.String,java.lang.String)>("equivalentToMe", v7);
return;
}
private void <init>()
{
com.novell.ldapchai.impl.edir.entry.EdirEntries v0;
v0 := @this: com.novell.ldapchai.impl.edir.entry.EdirEntries;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static java.lang.String readGuid(com.novell.ldapchai.ChaiEntry) throws com.novell.ldapchai.exception.ChaiUnavailableException, com.novell.ldapchai.exception.ChaiOperationException
{
byte[] v4;
byte[][] v3;
com.novell.ldapchai.ChaiEntry v0;
java.math.BigInteger v5;
java.lang.String v2, v6;
com.novell.ldapchai.provider.ChaiProvider v1;
v0 := @parameter0: com.novell.ldapchai.ChaiEntry;
v1 = interfaceinvoke v0.<com.novell.ldapchai.ChaiEntry: com.novell.ldapchai.provider.ChaiProvider getChaiProvider()>();
v2 = interfaceinvoke v0.<com.novell.ldapchai.ChaiEntry: java.lang.String getEntryDN()>();
v3 = interfaceinvoke v1.<com.novell.ldapchai.provider.ChaiProvider: byte[][] readMultiByteAttribute(java.lang.String,java.lang.String)>(v2, "guid");
v4 = v3[0];
v5 = new java.math.BigInteger;
specialinvoke v5.<java.math.BigInteger: void <init>(int,byte[])>(1, v4);
v6 = virtualinvoke v5.<java.math.BigInteger: java.lang.String toString(int)>(16);
return v6;
}
static void <clinit>()
{
java.time.format.DateTimeFormatterBuilder v0, v1;
java.time.format.DateTimeFormatter v2;
com.novell.ldapchai.util.internal.ChaiLogger v3;
v0 = new java.time.format.DateTimeFormatterBuilder;
specialinvoke v0.<java.time.format.DateTimeFormatterBuilder: void <init>()>();
v1 = virtualinvoke v0.<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendPattern(java.lang.String)>("yyyyMMddHHmmss\'Z\'");
v2 = virtualinvoke v1.<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatter toFormatter()>();
<com.novell.ldapchai.impl.edir.entry.EdirEntries: java.time.format.DateTimeFormatter EDIR_TIMESTAMP_FORMATTER> = v2;
v3 = staticinvoke <com.novell.ldapchai.util.internal.ChaiLogger: com.novell.ldapchai.util.internal.ChaiLogger getLogger(java.lang.Class)>(class "Lcom/novell/ldapchai/impl/edir/entry/EdirEntries;");
<com.novell.ldapchai.impl.edir.entry.EdirEntries: com.novell.ldapchai.util.internal.ChaiLogger LOGGER> = v3;
return;
}
}