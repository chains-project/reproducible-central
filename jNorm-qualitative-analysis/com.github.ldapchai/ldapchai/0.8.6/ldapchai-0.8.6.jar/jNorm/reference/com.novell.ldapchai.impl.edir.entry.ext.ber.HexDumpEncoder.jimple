public class com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder extends java.lang.Object
{
private int offset;
private int thisLineLength;
private int currentByte;
private final byte[] thisLine;
protected java.io.PrintStream printStream;
public void <init>()
{
com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder v0;
byte[] v1;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = newarray (byte)[16];
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: byte[] thisLine> = v1;
return;
}
static void hexDigit(java.io.PrintStream, byte)
{
java.io.PrintStream v0;
byte v1;
char v2, v3;
v0 := @parameter0: java.io.PrintStream;
v1 := @parameter1: byte;
virtualinvoke v0.<java.io.PrintStream: void write(int)>(v2);
virtualinvoke v0.<java.io.PrintStream: void write(int)>(v3);
return;
}
protected int bytesPerAtom()
{
com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder v0;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder;
return 1;
}
protected int bytesPerLine()
{
com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder v0;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder;
return 16;
}
protected void encodeBufferPrefix(java.io.OutputStream) throws java.io.IOException
{
com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder v0;
java.io.OutputStream v1;
java.io.PrintStream v2;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder;
v1 := @parameter0: java.io.OutputStream;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: int offset> = 0;
v2 = new java.io.PrintStream;
specialinvoke v2.<java.io.PrintStream: void <init>(java.io.OutputStream)>(v1);
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: java.io.PrintStream printStream> = v2;
return;
}
protected void encodeLinePrefix(java.io.OutputStream, int) throws java.io.IOException
{
com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder v0;
java.io.OutputStream v1;
java.io.PrintStream v10, v3, v7;
int v2, v4, v5, v6, v8, v9;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder;
v1 := @parameter0: java.io.OutputStream;
v2 := @parameter1: int;
v3 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: java.io.PrintStream printStream>;
v4 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: int offset>;
v5 = v4 >>> 8;
v6 = v5 & 255;
staticinvoke <com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: void hexDigit(java.io.PrintStream,byte)>(v3, v6);
v7 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: java.io.PrintStream printStream>;
v8 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: int offset>;
v9 = v8 & 255;
staticinvoke <com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: void hexDigit(java.io.PrintStream,byte)>(v7, v9);
v10 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: java.io.PrintStream printStream>;
virtualinvoke v10.<java.io.PrintStream: void print(java.lang.String)>(": ");
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: int currentByte> = 0;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: int thisLineLength> = v2;
return;
}
protected void encodeAtom(java.io.OutputStream, byte[], int, int) throws java.io.IOException
{
com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder v0;
java.io.OutputStream v1;
java.io.PrintStream v10, v14, v8;
byte[] v2, v5;
byte v7, v9;
int v11, v12, v13, v3, v4, v6;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder;
v1 := @parameter0: java.io.OutputStream;
v2 := @parameter1: byte[];
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: byte[] thisLine>;
v6 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: int currentByte>;
v7 = v2[v3];
v5[v6] = v7;
v8 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: java.io.PrintStream printStream>;
v9 = v2[v3];
staticinvoke <com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: void hexDigit(java.io.PrintStream,byte)>(v8, v9);
v10 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: java.io.PrintStream printStream>;
virtualinvoke v10.<java.io.PrintStream: void print(java.lang.String)>(" ");
v11 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: int currentByte>;
v12 = v11 + 1;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: int currentByte> = v12;
v13 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: int currentByte>;
if v13 != 8 goto label1;
v14 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: java.io.PrintStream printStream>;
virtualinvoke v14.<java.io.PrintStream: void print(java.lang.String)>("  ");
label1:
return;
}
protected void encodeLineSuffix(java.io.OutputStream) throws java.io.IOException
{
byte[] v11, v15, v9;
byte v10, v12, v16;
int v18, v19, v2, v20, v3, v7, v8;
com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder v0;
java.io.OutputStream v1;
java.io.PrintStream v13, v14, v17, v4, v5, v6;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder;
v1 := @parameter0: java.io.OutputStream;
v2 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: int thisLineLength>;
if v2 >= 16 goto label3;
v3 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: int thisLineLength>;
label1:
if v3 >= 16 goto label3;
v4 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: java.io.PrintStream printStream>;
virtualinvoke v4.<java.io.PrintStream: void print(java.lang.String)>("   ");
if v3 != 7 goto label2;
v5 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: java.io.PrintStream printStream>;
virtualinvoke v5.<java.io.PrintStream: void print(java.lang.String)>("  ");
label2:
v3 = v3 + 1;
goto label1;
label3:
v6 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: java.io.PrintStream printStream>;
virtualinvoke v6.<java.io.PrintStream: void print(java.lang.String)>(" ");
v7 = 0;
label4:
v8 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: int thisLineLength>;
if v7 >= v8 goto label8;
v9 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: byte[] thisLine>;
v10 = v9[v7];
if v10 < 32 goto label5;
v11 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: byte[] thisLine>;
v12 = v11[v7];
if v12 <= 122 goto label6;
label5:
v13 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: java.io.PrintStream printStream>;
virtualinvoke v13.<java.io.PrintStream: void print(java.lang.String)>(".");
goto label7;
label6:
v14 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: java.io.PrintStream printStream>;
v15 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: byte[] thisLine>;
v16 = v15[v7];
virtualinvoke v14.<java.io.PrintStream: void write(int)>(v16);
label7:
v7 = v7 + 1;
goto label4;
label8:
v17 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: java.io.PrintStream printStream>;
virtualinvoke v17.<java.io.PrintStream: void println()>();
v18 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: int offset>;
v19 = v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: int thisLineLength>;
v20 = v18 + v19;
v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: int offset> = v20;
return;
}
protected int readFully(java.io.InputStream, byte[]) throws java.io.IOException
{
com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder v0;
byte[] v2;
int v3, v4, v5, v6, v7;
java.io.InputStream v1;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder;
v1 := @parameter0: java.io.InputStream;
v2 := @parameter1: byte[];
v3 = 0;
label1:
v4 = lengthof v2;
if v3 >= v4 goto label3;
v5 = virtualinvoke v1.<java.io.InputStream: int read()>();
v6 = (int) -1;
if v5 != v6 goto label2;
return v3;
label2:
v2[v3] = v5;
v3 = v3 + 1;
goto label1;
label3:
v7 = lengthof v2;
return v7;
}
public void encode(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
{
com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder v0;
java.io.OutputStream v2;
byte[] v4;
int v10, v11, v12, v3, v5, v6, v7, v8, v9;
java.io.InputStream v1;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder;
v1 := @parameter0: java.io.InputStream;
v2 := @parameter1: java.io.OutputStream;
v3 = virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: int bytesPerLine()>();
v4 = newarray (byte)[v3];
virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: void encodeBufferPrefix(java.io.OutputStream)>(v2);
label1:
v5 = virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: int readFully(java.io.InputStream,byte[])>(v1, v4);
if v5 == 0 goto label6;
virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: void encodeLinePrefix(java.io.OutputStream,int)>(v2, v5);
v6 = 0;
label2:
if v6 >= v5 goto label5;
v7 = virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: int bytesPerAtom()>();
v8 = v6 + v7;
if v8 > v5 goto label3;
v9 = virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: int bytesPerAtom()>();
virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: void encodeAtom(java.io.OutputStream,byte[],int,int)>(v2, v4, v6, v9);
goto label4;
label3:
v10 = v5 - v6;
virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: void encodeAtom(java.io.OutputStream,byte[],int,int)>(v2, v4, v6, v10);
label4:
v11 = virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: int bytesPerAtom()>();
v6 = v6 + v11;
goto label2;
label5:
v12 = virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: int bytesPerLine()>();
if v5 < v12 goto label6;
virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: void encodeLineSuffix(java.io.OutputStream)>(v2);
goto label1;
label6:
return;
}
public java.lang.String encode(byte[])
{
com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder v0;
byte[] v1;
java.io.ByteArrayInputStream v3;
java.io.ByteArrayOutputStream v2;
java.lang.Error v6;
java.lang.String v4;
java.lang.Exception v5;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder;
v1 := @parameter0: byte[];
v2 = new java.io.ByteArrayOutputStream;
specialinvoke v2.<java.io.ByteArrayOutputStream: void <init>()>();
v3 = new java.io.ByteArrayInputStream;
specialinvoke v3.<java.io.ByteArrayInputStream: void <init>(byte[])>(v1);
label1:
virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: void encode(java.io.InputStream,java.io.OutputStream)>(v3, v2);
v4 = virtualinvoke v2.<java.io.ByteArrayOutputStream: java.lang.String toString(java.lang.String)>("ISO-8859-1");
label2:
goto label4;
label3:
v5 := @caughtexception;
v6 = new java.lang.Error;
specialinvoke v6.<java.lang.Error: void <init>(java.lang.String)>("CharacterEncoder.encode internal error");
throw v6;
label4:
return v4;
catch java.lang.Exception from label1 to label2 with label3;
}
private byte[] getBytes(java.nio.ByteBuffer)
{
com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder v0;
byte[] v2, v4;
java.nio.ByteBuffer v1;
int v10, v5, v6, v7, v8, v9;
boolean v3;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder;
v1 := @parameter0: java.nio.ByteBuffer;
v2 = null;
v3 = virtualinvoke v1.<java.nio.ByteBuffer: boolean hasArray()>();
if v3 == 0 goto label1;
v4 = virtualinvoke v1.<java.nio.ByteBuffer: byte[] array()>();
v5 = lengthof v4;
v6 = virtualinvoke v1.<java.nio.ByteBuffer: int capacity()>();
if v5 != v6 goto label1;
v7 = lengthof v4;
v8 = virtualinvoke v1.<java.nio.ByteBuffer: int remaining()>();
if v7 != v8 goto label1;
v2 = v4;
v9 = virtualinvoke v1.<java.nio.ByteBuffer: int limit()>();
virtualinvoke v1.<java.nio.ByteBuffer: java.nio.ByteBuffer position(int)>(v9);
label1:
if v2 != null goto label2;
v10 = virtualinvoke v1.<java.nio.ByteBuffer: int remaining()>();
v2 = newarray (byte)[v10];
virtualinvoke v1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(v2);
label2:
return v2;
}
public java.lang.String encode(java.nio.ByteBuffer)
{
com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder v0;
byte[] v2;
java.lang.String v3;
java.nio.ByteBuffer v1;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder;
v1 := @parameter0: java.nio.ByteBuffer;
v2 = specialinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: byte[] getBytes(java.nio.ByteBuffer)>(v1);
v3 = virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: java.lang.String encode(byte[])>(v2);
return v3;
}
public void encodeBuffer(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
{
com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder v0;
java.io.OutputStream v2;
byte[] v4;
int v10, v11, v12, v3, v5, v6, v7, v8, v9;
java.io.InputStream v1;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder;
v1 := @parameter0: java.io.InputStream;
v2 := @parameter1: java.io.OutputStream;
v3 = virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: int bytesPerLine()>();
v4 = newarray (byte)[v3];
virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: void encodeBufferPrefix(java.io.OutputStream)>(v2);
label1:
v5 = virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: int readFully(java.io.InputStream,byte[])>(v1, v4);
if v5 == 0 goto label6;
virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: void encodeLinePrefix(java.io.OutputStream,int)>(v2, v5);
v6 = 0;
label2:
if v6 >= v5 goto label5;
v7 = virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: int bytesPerAtom()>();
v8 = v6 + v7;
if v8 > v5 goto label3;
v9 = virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: int bytesPerAtom()>();
virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: void encodeAtom(java.io.OutputStream,byte[],int,int)>(v2, v4, v6, v9);
goto label4;
label3:
v10 = v5 - v6;
virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: void encodeAtom(java.io.OutputStream,byte[],int,int)>(v2, v4, v6, v10);
label4:
v11 = virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: int bytesPerAtom()>();
v6 = v6 + v11;
goto label2;
label5:
virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: void encodeLineSuffix(java.io.OutputStream)>(v2);
v12 = virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: int bytesPerLine()>();
if v5 >= v12 goto label1;
label6:
return;
}
public void encodeBuffer(byte[], java.io.OutputStream) throws java.io.IOException
{
com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder v0;
java.io.OutputStream v2;
byte[] v1;
java.io.ByteArrayInputStream v3;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder;
v1 := @parameter0: byte[];
v2 := @parameter1: java.io.OutputStream;
v3 = new java.io.ByteArrayInputStream;
specialinvoke v3.<java.io.ByteArrayInputStream: void <init>(byte[])>(v1);
virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: void encodeBuffer(java.io.InputStream,java.io.OutputStream)>(v3, v2);
return;
}
public java.lang.String encodeBuffer(byte[])
{
com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder v0;
byte[] v1;
java.io.ByteArrayInputStream v3;
java.io.ByteArrayOutputStream v2;
java.lang.Error v5;
java.lang.String v6;
java.lang.Exception v4;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder;
v1 := @parameter0: byte[];
v2 = new java.io.ByteArrayOutputStream;
specialinvoke v2.<java.io.ByteArrayOutputStream: void <init>()>();
v3 = new java.io.ByteArrayInputStream;
specialinvoke v3.<java.io.ByteArrayInputStream: void <init>(byte[])>(v1);
label1:
virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: void encodeBuffer(java.io.InputStream,java.io.OutputStream)>(v3, v2);
label2:
goto label4;
label3:
v4 := @caughtexception;
v5 = new java.lang.Error;
specialinvoke v5.<java.lang.Error: void <init>(java.lang.String)>("CharacterEncoder.encodeBuffer internal error");
throw v5;
label4:
v6 = virtualinvoke v2.<java.io.ByteArrayOutputStream: java.lang.String toString()>();
return v6;
catch java.lang.Exception from label1 to label2 with label3;
}
public void encodeBuffer(java.nio.ByteBuffer, java.io.OutputStream) throws java.io.IOException
{
com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder v0;
java.io.OutputStream v2;
byte[] v3;
java.nio.ByteBuffer v1;
v0 := @this: com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder;
v1 := @parameter0: java.nio.ByteBuffer;
v2 := @parameter1: java.io.OutputStream;
v3 = specialinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: byte[] getBytes(java.nio.ByteBuffer)>(v1);
virtualinvoke v0.<com.novell.ldapchai.impl.edir.entry.ext.ber.HexDumpEncoder: void encodeBuffer(byte[],java.io.OutputStream)>(v3, v2);
return;
}
}