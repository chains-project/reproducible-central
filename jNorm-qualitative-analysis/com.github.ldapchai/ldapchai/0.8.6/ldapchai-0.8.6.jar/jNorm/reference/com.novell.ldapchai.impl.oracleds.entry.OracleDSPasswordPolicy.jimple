public class com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy extends com.novell.ldapchai.impl.oracleds.entry.OracleDSEntry implements com.novell.ldapchai.ChaiPasswordPolicy
{
static final java.util.Set LDAP_PASSWORD_ATTRIBUTES;
private final java.util.Map ruleMap;
private final java.util.Map allEntryValues;
void <init>(java.lang.String, com.novell.ldapchai.provider.ChaiProvider) throws com.novell.ldapchai.exception.ChaiUnavailableException, com.novell.ldapchai.exception.ChaiOperationException
{
java.util.Set v6;
java.util.HashMap v3, v4;
com.novell.ldapchai.provider.ChaiProvider v2;
com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy v0;
java.util.Map v10, v5, v7, v8, v9;
java.lang.String v1;
v0 := @this: com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: com.novell.ldapchai.provider.ChaiProvider;
specialinvoke v0.<com.novell.ldapchai.impl.oracleds.entry.OracleDSEntry: void <init>(java.lang.String,com.novell.ldapchai.provider.ChaiProvider)>(v1, v2);
v3 = new java.util.HashMap;
specialinvoke v3.<java.util.HashMap: void <init>()>();
v0.<com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy: java.util.Map ruleMap> = v3;
v4 = new java.util.HashMap;
specialinvoke v4.<java.util.HashMap: void <init>()>();
v0.<com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy: java.util.Map allEntryValues> = v4;
v5 = v0.<com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy: java.util.Map allEntryValues>;
v6 = <com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy: java.util.Set LDAP_PASSWORD_ATTRIBUTES>;
v7 = virtualinvoke v0.<com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy: java.util.Map readStringAttributes(java.util.Set)>(v6);
interfaceinvoke v5.<java.util.Map: void putAll(java.util.Map)>(v7);
v8 = v0.<com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy: java.util.Map ruleMap>;
v9 = v0.<com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy: java.util.Map allEntryValues>;
v10 = staticinvoke <com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy: java.util.Map createRuleMapUsingAttributeValues(java.util.Map)>(v9);
interfaceinvoke v8.<java.util.Map: void putAll(java.util.Map)>(v10);
return;
}
public java.lang.String getLdapObjectClassName()
{
com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy v0;
v0 := @this: com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy;
return "pwdPolicy";
}
public java.lang.String getSourceDN()
{
com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy v0;
java.lang.String v1;
v0 := @this: com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy;
v1 = virtualinvoke v0.<com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy: java.lang.String getEntryDN()>();
return v1;
}
public com.novell.ldapchai.util.PasswordRuleHelper getRuleHelper()
{
com.novell.ldapchai.util.GenericRuleHelper v1;
com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy v0;
v0 := @this: com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy;
v1 = new com.novell.ldapchai.util.GenericRuleHelper;
specialinvoke v1.<com.novell.ldapchai.util.GenericRuleHelper: void <init>(com.novell.ldapchai.ChaiPasswordPolicy)>(v0);
return v1;
}
private static java.util.Map createRuleMapUsingAttributeValues(java.util.Map)
{
com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy$Attribute v15;
java.util.Map v0;
boolean v19, v23, v26;
com.novell.ldapchai.ChaiPasswordRule[] v11;
java.lang.Exception v31;
com.novell.ldapchai.ChaiPasswordRule v14, v2, v29, v5, v8;
com.novell.ldapchai.util.internal.ChaiLogger v32;
java.util.HashMap v1;
java.util.function.Supplier v33;
int v12, v13, v28;
java.lang.String v10, v16, v17, v18, v20, v22, v24, v25, v3, v30, v4, v6, v7, v9;
java.lang.Object v21, v27;
v0 := @parameter0: java.util.Map;
v1 = new java.util.HashMap;
specialinvoke v1.<java.util.HashMap: void <init>()>();
v2 = <com.novell.ldapchai.ChaiPasswordRule: com.novell.ldapchai.ChaiPasswordRule AllowNumeric>;
v3 = virtualinvoke v2.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
v4 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(1);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v3, v4);
v5 = <com.novell.ldapchai.ChaiPasswordRule: com.novell.ldapchai.ChaiPasswordRule AllowSpecial>;
v6 = virtualinvoke v5.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
v7 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(1);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v6, v7);
v8 = <com.novell.ldapchai.ChaiPasswordRule: com.novell.ldapchai.ChaiPasswordRule CaseSensitive>;
v9 = virtualinvoke v8.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
v10 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(1);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v9, v10);
v11 = staticinvoke <com.novell.ldapchai.ChaiPasswordRule: com.novell.ldapchai.ChaiPasswordRule[] values()>();
v12 = lengthof v11;
v13 = 0;
label1:
if v13 >= v12 goto label4;
v14 = v11[v13];
v15 = staticinvoke <com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy$Attribute: com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy$Attribute attributeForRule(com.novell.ldapchai.ChaiPasswordRule)>(v14);
if v15 == null goto label2;
v16 = virtualinvoke v14.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
v17 = virtualinvoke v15.<com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy$Attribute: java.lang.String getDefaultValue()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v16, v17);
v18 = virtualinvoke v15.<com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy$Attribute: java.lang.String getLdapAttribute()>();
if v18 == null goto label2;
if v0 == null goto label2;
v19 = interfaceinvoke v0.<java.util.Map: boolean containsKey(java.lang.Object)>(v18);
if v19 == 0 goto label2;
v20 = virtualinvoke v14.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
v21 = interfaceinvoke v0.<java.util.Map: java.lang.Object get(java.lang.Object)>(v18);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v20, v21);
label2:
v22 = virtualinvoke v14.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
v23 = interfaceinvoke v1.<java.util.Map: boolean containsKey(java.lang.Object)>(v22);
if v23 != 0 goto label3;
v24 = virtualinvoke v14.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
v25 = virtualinvoke v14.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getDefaultValue()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v24, v25);
label3:
v13 = v13 + 1;
goto label1;
label4:
if v0 == null goto label8;
v26 = interfaceinvoke v0.<java.util.Map: boolean containsKey(java.lang.Object)>("pwdInHistory");
if v26 == 0 goto label8;
label5:
v27 = interfaceinvoke v0.<java.util.Map: java.lang.Object get(java.lang.Object)>("pwdInHistory");
v28 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v27);
if v28 <= 0 goto label8;
v29 = <com.novell.ldapchai.ChaiPasswordRule: com.novell.ldapchai.ChaiPasswordRule UniqueRequired>;
v30 = virtualinvoke v29.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v30, "true");
label6:
goto label8;
label7:
v31 := @caughtexception;
v32 = <com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v33 = staticinvoke <com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy$lambda_createRuleMapUsingAttributeValues_0__98: java.util.function.Supplier bootstrap$(java.lang.Exception)>(v31);
virtualinvoke v32.<com.novell.ldapchai.util.internal.ChaiLogger: void error(java.util.function.Supplier)>(v33);
label8:
return v1;
catch java.lang.Exception from label5 to label6 with label7;
}
public java.lang.String getValue(java.lang.String)
{
com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy v0;
java.util.Map v2;
java.lang.Object v3;
java.lang.String v1;
v0 := @this: com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy;
v1 := @parameter0: java.lang.String;
v2 = v0.<com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy: java.util.Map ruleMap>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
return v3;
}
public java.lang.String getValue(com.novell.ldapchai.ChaiPasswordRule)
{
com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy v0;
java.util.Map v2;
java.lang.Object v4;
com.novell.ldapchai.ChaiPasswordRule v1;
java.lang.String v3;
v0 := @this: com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy;
v1 := @parameter0: com.novell.ldapchai.ChaiPasswordRule;
v2 = v0.<com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy: java.util.Map ruleMap>;
v3 = virtualinvoke v1.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
v4 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v3);
return v4;
}
public java.util.Set getKeys()
{
com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy v0;
java.util.Map v1;
java.util.Set v2, v3;
v0 := @this: com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy;
v1 = v0.<com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy: java.util.Map ruleMap>;
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set keySet()>();
v3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(v2);
return v3;
}
public com.novell.ldapchai.ChaiEntry getPolicyEntry()
{
com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy v0;
v0 := @this: com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy;
return v0;
}
static void <clinit>()
{
com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy$Attribute v4;
java.util.HashSet v0;
com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy$Attribute[] v1;
int v2, v3;
java.util.Set v6;
java.lang.String v5;
v0 = new java.util.HashSet;
specialinvoke v0.<java.util.HashSet: void <init>()>();
v1 = staticinvoke <com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy$Attribute: com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy$Attribute[] values()>();
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label2;
v4 = v1[v3];
v5 = virtualinvoke v4.<com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy$Attribute: java.lang.String getLdapAttribute()>();
interfaceinvoke v0.<java.util.Set: boolean add(java.lang.Object)>(v5);
v3 = v3 + 1;
goto label1;
label2:
v6 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(v0);
<com.novell.ldapchai.impl.oracleds.entry.OracleDSPasswordPolicy: java.util.Set LDAP_PASSWORD_ATTRIBUTES> = v6;
return;
}
}