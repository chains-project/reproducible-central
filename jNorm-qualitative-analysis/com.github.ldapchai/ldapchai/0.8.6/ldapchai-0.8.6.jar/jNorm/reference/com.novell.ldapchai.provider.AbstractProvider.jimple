abstract class com.novell.ldapchai.provider.AbstractProvider extends java.lang.Object implements com.novell.ldapchai.provider.ChaiProvider, com.novell.ldapchai.provider.ChaiProviderImplementor
{
private static final com.novell.ldapchai.provider.AbstractProvider$ChaiProviderInputValidator INPUT_VALIDATOR;
private static final com.novell.ldapchai.util.internal.ChaiLogger LOGGER;
protected com.novell.ldapchai.provider.ChaiConfiguration chaiConfig;
private com.novell.ldapchai.provider.ChaiProviderFactory providerFactory;
protected volatile com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState state;
private final java.util.Map cacheFailureMap;
private com.novell.ldapchai.provider.DirectoryVendor cachedDirectoryVendor;
private static final java.util.concurrent.atomic.AtomicInteger ID_COUNTER;
private final int counter;
void <init>()
{
com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState v1;
java.util.concurrent.atomic.AtomicInteger v3;
int v4;
java.util.HashMap v2;
com.novell.ldapchai.provider.AbstractProvider v0;
v0 := @this: com.novell.ldapchai.provider.AbstractProvider;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = <com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState: com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState NEW>;
v0.<com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState state> = v1;
v2 = new java.util.HashMap;
specialinvoke v2.<java.util.HashMap: void <init>()>();
v0.<com.novell.ldapchai.provider.AbstractProvider: java.util.Map cacheFailureMap> = v2;
v3 = <com.novell.ldapchai.provider.AbstractProvider: java.util.concurrent.atomic.AtomicInteger ID_COUNTER>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
v0.<com.novell.ldapchai.provider.AbstractProvider: int counter> = v4;
return;
}
public java.lang.String toString()
{
com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState v11, v12, v9;
int v18, v3;
java.lang.String v14, v17, v19, v7;
com.novell.ldapchai.provider.AbstractProvider v0;
boolean v13;
com.novell.ldapchai.provider.ChaiConfiguration v15;
com.novell.ldapchai.provider.ChaiSetting v16;
java.lang.Class v6;
java.lang.StringBuilder v1, v10, v2, v4, v5, v8;
v0 := @this: com.novell.ldapchai.provider.AbstractProvider;
v1 = new java.lang.StringBuilder;
specialinvoke v1.<java.lang.StringBuilder: void <init>()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ChaiProvider ");
v2 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");
v3 = v0.<com.novell.ldapchai.provider.AbstractProvider: int counter>;
v4 = virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v3);
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
v5 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");
v6 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v7 = virtualinvoke v6.<java.lang.Class: java.lang.String getSimpleName()>();
v8 = virtualinvoke v5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v7);
virtualinvoke v8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), ");
v9 = virtualinvoke v0.<com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState getConnectionState()>();
v10 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v9);
virtualinvoke v10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
v11 = virtualinvoke v0.<com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState getConnectionState()>();
v12 = <com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState: com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState OPEN>;
v13 = virtualinvoke v11.<com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState: boolean equals(java.lang.Object)>(v12);
if v13 == 0 goto label1;
v14 = virtualinvoke v0.<com.novell.ldapchai.provider.AbstractProvider: java.lang.String getCurrentConnectionURL()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v14);
v15 = virtualinvoke v0.<com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.provider.ChaiConfiguration getChaiConfiguration()>();
v16 = <com.novell.ldapchai.provider.ChaiSetting: com.novell.ldapchai.provider.ChaiSetting BIND_DN>;
v17 = virtualinvoke v15.<com.novell.ldapchai.provider.ChaiConfiguration: java.lang.String getSetting(com.novell.ldapchai.provider.ChaiSetting)>(v16);
if v17 == null goto label1;
v18 = virtualinvoke v17.<java.lang.String: int length()>();
if v18 <= 1 goto label1;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v17);
label1:
v19 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.String toString()>();
return v19;
}
public void close()
{
com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState v1;
com.novell.ldapchai.provider.AbstractProvider v0;
com.novell.ldapchai.provider.ChaiProviderFactory$CentralService v3;
com.novell.ldapchai.provider.ChaiProviderFactory v2;
v0 := @this: com.novell.ldapchai.provider.AbstractProvider;
v1 = <com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState: com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState CLOSED>;
v0.<com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState state> = v1;
v2 = v0.<com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.provider.ChaiProviderFactory providerFactory>;
v3 = virtualinvoke v2.<com.novell.ldapchai.provider.ChaiProviderFactory: com.novell.ldapchai.provider.ChaiProviderFactory$CentralService getCentralService()>();
virtualinvoke v3.<com.novell.ldapchai.provider.ChaiProviderFactory$CentralService: void deRegisterProvider(com.novell.ldapchai.provider.ChaiProviderImplementor)>(v0);
return;
}
public com.novell.ldapchai.provider.ChaiConfiguration getChaiConfiguration()
{
com.novell.ldapchai.provider.ChaiConfiguration v1;
com.novell.ldapchai.provider.AbstractProvider v0;
v0 := @this: com.novell.ldapchai.provider.AbstractProvider;
v1 = v0.<com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.provider.ChaiConfiguration chaiConfig>;
return v1;
}
public com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState getConnectionState()
{
com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState v1;
com.novell.ldapchai.provider.AbstractProvider v0;
v0 := @this: com.novell.ldapchai.provider.AbstractProvider;
v1 = v0.<com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState state>;
return v1;
}
public void init(com.novell.ldapchai.provider.ChaiConfiguration, com.novell.ldapchai.provider.ChaiProviderFactory) throws com.novell.ldapchai.exception.ChaiUnavailableException
{
java.lang.IllegalStateException v5, v8;
com.novell.ldapchai.provider.ChaiConfiguration v1;
com.novell.ldapchai.provider.ChaiProviderFactory v2;
com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState v3, v4, v6, v7, v9;
com.novell.ldapchai.provider.AbstractProvider v0;
v0 := @this: com.novell.ldapchai.provider.AbstractProvider;
v1 := @parameter0: com.novell.ldapchai.provider.ChaiConfiguration;
v2 := @parameter1: com.novell.ldapchai.provider.ChaiProviderFactory;
v3 = v0.<com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState state>;
v4 = <com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState: com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState OPEN>;
if v3 != v4 goto label1;
v5 = new java.lang.IllegalStateException;
specialinvoke v5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("provider already initialized");
throw v5;
label1:
v6 = v0.<com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState state>;
v7 = <com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState: com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState CLOSED>;
if v6 != v7 goto label2;
v8 = new java.lang.IllegalStateException;
specialinvoke v8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("instance has been closed");
throw v8;
label2:
v0.<com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.provider.ChaiProviderFactory providerFactory> = v2;
v0.<com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.provider.ChaiConfiguration chaiConfig> = v1;
v9 = <com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState: com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState OPEN>;
v0.<com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState state> = v9;
specialinvoke v0.<com.novell.ldapchai.provider.AbstractProvider: void incrementBindStatistic()>();
return;
}
protected void activityPreCheck()
{
java.lang.IllegalStateException v3, v6;
com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState v1, v2, v4, v5;
com.novell.ldapchai.provider.AbstractProvider v0;
v0 := @this: com.novell.ldapchai.provider.AbstractProvider;
v1 = v0.<com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState state>;
v2 = <com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState: com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState NEW>;
if v1 != v2 goto label1;
v3 = new java.lang.IllegalStateException;
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ChaiProvider instance is not yet initialized");
throw v3;
label1:
v4 = v0.<com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState state>;
v5 = <com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState: com.novell.ldapchai.provider.ChaiProviderImplementor$ConnectionState CLOSED>;
if v4 != v5 goto label2;
v6 = new java.lang.IllegalStateException;
specialinvoke v6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ChaiProvider instance has been closed");
throw v6;
label2:
return;
}
public boolean errorIsRetryable(java.lang.Exception)
{
com.novell.ldapchai.provider.AbstractProvider v0;
java.lang.Exception v1;
boolean v2, v3, v4, v5;
v0 := @this: com.novell.ldapchai.provider.AbstractProvider;
v1 := @parameter0: java.lang.Exception;
v2 = v1 instanceof java.io.IOException;
if v2 == 0 goto label1;
return 1;
label1:
v3 = v1 instanceof com.novell.ldapchai.exception.ChaiException;
if v3 == 0 goto label4;
v4 = virtualinvoke v1.<com.novell.ldapchai.exception.ChaiException: boolean isPermanent()>();
if v4 != 0 goto label2;
v5 = 1;
goto label3;
label2:
v5 = 0;
label3:
return v5;
label4:
return 0;
}
protected void preCheckExtendedOperation(javax.naming.ldap.ExtendedRequest) throws com.novell.ldapchai.exception.ChaiOperationException
{
com.novell.ldapchai.provider.ChaiConfiguration v3;
javax.naming.ldap.ExtendedRequest v1;
com.novell.ldapchai.provider.ChaiSetting v4;
java.util.function.Supplier v11;
java.util.Map v12, v8;
java.lang.Object v13;
java.lang.String v2, v5, v7;
com.novell.ldapchai.provider.AbstractProvider v0;
boolean v6, v9;
com.novell.ldapchai.util.internal.ChaiLogger v10;
v0 := @this: com.novell.ldapchai.provider.AbstractProvider;
v1 := @parameter0: javax.naming.ldap.ExtendedRequest;
v2 = "true";
v3 = virtualinvoke v0.<com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.provider.ChaiConfiguration getChaiConfiguration()>();
v4 = <com.novell.ldapchai.provider.ChaiSetting: com.novell.ldapchai.provider.ChaiSetting EXTENDED_OPERATION_FAILURE_CACHE>;
v5 = virtualinvoke v3.<com.novell.ldapchai.provider.ChaiConfiguration: java.lang.String getSetting(com.novell.ldapchai.provider.ChaiSetting)>(v4);
v6 = virtualinvoke v2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v5);
if v6 == 0 goto label1;
v7 = interfaceinvoke v1.<javax.naming.ldap.ExtendedRequest: java.lang.String getID()>();
v8 = v0.<com.novell.ldapchai.provider.AbstractProvider: java.util.Map cacheFailureMap>;
v9 = interfaceinvoke v8.<java.util.Map: boolean containsKey(java.lang.Object)>(v7);
if v9 == 0 goto label1;
v10 = <com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v11 = staticinvoke <com.novell.ldapchai.provider.AbstractProvider$lambda_preCheckExtendedOperation_0__99: java.util.function.Supplier bootstrap$(java.lang.String)>(v7);
virtualinvoke v10.<com.novell.ldapchai.util.internal.ChaiLogger: void debug(java.util.function.Supplier)>(v11);
v12 = v0.<com.novell.ldapchai.provider.AbstractProvider: java.util.Map cacheFailureMap>;
v13 = interfaceinvoke v12.<java.util.Map: java.lang.Object get(java.lang.Object)>(v7);
throw v13;
label1:
return;
}
protected void cacheExtendedOperationException(javax.naming.ldap.ExtendedRequest, java.lang.Exception) throws com.novell.ldapchai.exception.ChaiOperationException
{
com.novell.ldapchai.provider.ChaiConfiguration v3;
javax.naming.ldap.ExtendedRequest v1;
com.novell.ldapchai.provider.ChaiSetting v4;
java.util.function.Supplier v13;
com.novell.ldapchai.exception.ChaiError v8, v9;
java.lang.Exception v2;
java.util.Map v11;
java.lang.String v10, v6;
com.novell.ldapchai.exception.ChaiOperationException v7;
com.novell.ldapchai.provider.AbstractProvider v0;
boolean v5;
com.novell.ldapchai.util.internal.ChaiLogger v12;
v0 := @this: com.novell.ldapchai.provider.AbstractProvider;
v1 := @parameter0: javax.naming.ldap.ExtendedRequest;
v2 := @parameter1: java.lang.Exception;
v3 = virtualinvoke v0.<com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.provider.ChaiConfiguration getChaiConfiguration()>();
v4 = <com.novell.ldapchai.provider.ChaiSetting: com.novell.ldapchai.provider.ChaiSetting EXTENDED_OPERATION_FAILURE_CACHE>;
v5 = virtualinvoke v3.<com.novell.ldapchai.provider.ChaiConfiguration: boolean getBooleanSetting(com.novell.ldapchai.provider.ChaiSetting)>(v4);
if v5 == 0 goto label1;
v6 = virtualinvoke v2.<java.lang.Exception: java.lang.String getMessage()>();
v7 = staticinvoke <com.novell.ldapchai.exception.ChaiOperationException: com.novell.ldapchai.exception.ChaiOperationException forErrorMessage(java.lang.String,java.lang.Throwable)>(v6, v2);
v8 = virtualinvoke v7.<com.novell.ldapchai.exception.ChaiOperationException: com.novell.ldapchai.exception.ChaiError getErrorCode()>();
v9 = <com.novell.ldapchai.exception.ChaiError: com.novell.ldapchai.exception.ChaiError UNSUPPORTED_OPERATION>;
if v8 != v9 goto label1;
v10 = interfaceinvoke v1.<javax.naming.ldap.ExtendedRequest: java.lang.String getID()>();
v11 = v0.<com.novell.ldapchai.provider.AbstractProvider: java.util.Map cacheFailureMap>;
interfaceinvoke v11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v10, v7);
v12 = <com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v13 = staticinvoke <com.novell.ldapchai.provider.AbstractProvider$lambda_cacheExtendedOperationException_1__100: java.util.function.Supplier bootstrap$(java.lang.String)>(v10);
virtualinvoke v12.<com.novell.ldapchai.util.internal.ChaiLogger: void trace(java.util.function.Supplier)>(v13);
throw v7;
label1:
return;
}
public com.novell.ldapchai.provider.DirectoryVendor getDirectoryVendor() throws com.novell.ldapchai.exception.ChaiUnavailableException
{
com.novell.ldapchai.ChaiEntry v11;
com.novell.ldapchai.provider.DirectoryVendor v1, v12, v16, v2, v20, v21, v6;
java.util.function.Supplier v15;
com.novell.ldapchai.provider.ChaiProviderFactory$CentralService v18, v4;
com.novell.ldapchai.provider.ChaiProviderFactory v17, v3;
com.novell.ldapchai.exception.ChaiOperationException v13;
com.novell.ldapchai.provider.AbstractProvider v0;
boolean v9;
com.novell.ldapchai.provider.ChaiConfiguration v19, v5, v7;
java.util.Optional v8;
java.lang.Object v10;
com.novell.ldapchai.util.internal.ChaiLogger v14;
v0 := @this: com.novell.ldapchai.provider.AbstractProvider;
v1 = v0.<com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.provider.DirectoryVendor cachedDirectoryVendor>;
if v1 == null goto label1;
v2 = v0.<com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.provider.DirectoryVendor cachedDirectoryVendor>;
return v2;
label1:
v3 = virtualinvoke v0.<com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.provider.ChaiProviderFactory getProviderFactory()>();
v4 = virtualinvoke v3.<com.novell.ldapchai.provider.ChaiProviderFactory: com.novell.ldapchai.provider.ChaiProviderFactory$CentralService getCentralService()>();
v5 = v0.<com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.provider.ChaiConfiguration chaiConfig>;
v6 = virtualinvoke v4.<com.novell.ldapchai.provider.ChaiProviderFactory$CentralService: com.novell.ldapchai.provider.DirectoryVendor getVendorCache(com.novell.ldapchai.provider.ChaiConfiguration)>(v5);
if v6 == null goto label2;
return v6;
label2:
v7 = virtualinvoke v0.<com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.provider.ChaiConfiguration getChaiConfiguration()>();
v8 = virtualinvoke v7.<com.novell.ldapchai.provider.ChaiConfiguration: java.util.Optional getDefaultVendor()>();
v9 = virtualinvoke v8.<java.util.Optional: boolean isPresent()>();
if v9 == 0 goto label3;
v10 = virtualinvoke v8.<java.util.Optional: java.lang.Object get()>();
v0.<com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.provider.DirectoryVendor cachedDirectoryVendor> = v10;
goto label6;
label3:
v11 = staticinvoke <com.novell.ldapchai.util.ChaiUtility: com.novell.ldapchai.ChaiEntry getRootDSE(com.novell.ldapchai.provider.ChaiProvider)>(v0);
v12 = staticinvoke <com.novell.ldapchai.util.ChaiUtility: com.novell.ldapchai.provider.DirectoryVendor determineDirectoryVendor(com.novell.ldapchai.ChaiEntry)>(v11);
v0.<com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.provider.DirectoryVendor cachedDirectoryVendor> = v12;
label4:
goto label6;
label5:
v13 := @caughtexception;
v14 = <com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v15 = staticinvoke <com.novell.ldapchai.provider.AbstractProvider$lambda_getDirectoryVendor_2__101: java.util.function.Supplier bootstrap$(com.novell.ldapchai.exception.ChaiOperationException)>(v13);
virtualinvoke v14.<com.novell.ldapchai.util.internal.ChaiLogger: void warn(java.util.function.Supplier,java.lang.Exception)>(v15, v13);
v16 = <com.novell.ldapchai.provider.DirectoryVendor: com.novell.ldapchai.provider.DirectoryVendor GENERIC>;
return v16;
label6:
v17 = virtualinvoke v0.<com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.provider.ChaiProviderFactory getProviderFactory()>();
v18 = virtualinvoke v17.<com.novell.ldapchai.provider.ChaiProviderFactory: com.novell.ldapchai.provider.ChaiProviderFactory$CentralService getCentralService()>();
v19 = v0.<com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.provider.ChaiConfiguration chaiConfig>;
v20 = v0.<com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.provider.DirectoryVendor cachedDirectoryVendor>;
virtualinvoke v18.<com.novell.ldapchai.provider.ChaiProviderFactory$CentralService: void addVendorCache(com.novell.ldapchai.provider.ChaiConfiguration,com.novell.ldapchai.provider.DirectoryVendor)>(v19, v20);
v21 = v0.<com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.provider.DirectoryVendor cachedDirectoryVendor>;
return v21;
catch com.novell.ldapchai.exception.ChaiOperationException from label3 to label4 with label5;
}
public java.lang.String getIdentifier()
{
int v1;
java.lang.String v2;
com.novell.ldapchai.provider.AbstractProvider v0;
v0 := @this: com.novell.ldapchai.provider.AbstractProvider;
v1 = v0.<com.novell.ldapchai.provider.AbstractProvider: int counter>;
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("providerId=\u0001");
return v2;
}
public com.novell.ldapchai.provider.ChaiProviderFactory getProviderFactory()
{
com.novell.ldapchai.provider.AbstractProvider v0;
com.novell.ldapchai.provider.ChaiProviderFactory v1;
v0 := @this: com.novell.ldapchai.provider.AbstractProvider;
v1 = v0.<com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.provider.ChaiProviderFactory providerFactory>;
return v1;
}
public com.novell.ldapchai.ChaiEntryFactory getEntryFactory()
{
com.novell.ldapchai.ChaiEntryFactory v1;
com.novell.ldapchai.provider.AbstractProvider v0;
v0 := @this: com.novell.ldapchai.provider.AbstractProvider;
v1 = staticinvoke <com.novell.ldapchai.ChaiEntryFactory: com.novell.ldapchai.ChaiEntryFactory newChaiFactory(com.novell.ldapchai.provider.ChaiProvider)>(v0);
return v1;
}
protected com.novell.ldapchai.provider.AbstractProvider$ChaiProviderInputValidator getInputValidator()
{
com.novell.ldapchai.provider.AbstractProvider$ChaiProviderInputValidator v1;
com.novell.ldapchai.provider.AbstractProvider v0;
v0 := @this: com.novell.ldapchai.provider.AbstractProvider;
v1 = <com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.provider.AbstractProvider$ChaiProviderInputValidator INPUT_VALIDATOR>;
return v1;
}
static com.novell.ldapchai.exception.ChaiException convertInvocationExceptionToChaiException(java.lang.Exception)
{
java.lang.IllegalStateException v5;
java.lang.String v6;
java.util.function.Supplier v4;
java.lang.Exception v0;
boolean v1, v2;
com.novell.ldapchai.util.internal.ChaiLogger v3;
v0 := @parameter0: java.lang.Exception;
v1 = v0 instanceof com.novell.ldapchai.exception.ChaiOperationException;
if v1 == 0 goto label1;
return v0;
label1:
v2 = v0 instanceof com.novell.ldapchai.exception.ChaiUnavailableException;
if v2 == 0 goto label2;
return v0;
label2:
v3 = <com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v4 = staticinvoke <com.novell.ldapchai.provider.AbstractProvider$lambda_convertInvocationExceptionToChaiException_3__102: java.util.function.Supplier bootstrap$(java.lang.Exception)>(v0);
virtualinvoke v3.<com.novell.ldapchai.util.internal.ChaiLogger: void warn(java.util.function.Supplier,java.lang.Exception)>(v4, v0);
v5 = new java.lang.IllegalStateException;
v6 = virtualinvoke v0.<java.lang.Exception: java.lang.String getMessage()>();
specialinvoke v5.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>(v6, v0);
throw v5;
}
private void incrementBindStatistic()
{
com.novell.ldapchai.provider.ChaiConfiguration v1;
com.novell.ldapchai.provider.ChaiSetting v2;
com.novell.ldapchai.provider.ChaiProviderFactory$CentralService v5;
com.novell.ldapchai.provider.StatisticsWrapper$StatsBean v6;
com.novell.ldapchai.provider.ChaiProviderFactory v4;
com.novell.ldapchai.provider.ProviderStatistics$IncrementerStatistic v7;
com.novell.ldapchai.provider.AbstractProvider v0;
boolean v3;
v0 := @this: com.novell.ldapchai.provider.AbstractProvider;
v1 = virtualinvoke v0.<com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.provider.ChaiConfiguration getChaiConfiguration()>();
v2 = <com.novell.ldapchai.provider.ChaiSetting: com.novell.ldapchai.provider.ChaiSetting STATISTICS_ENABLE>;
v3 = virtualinvoke v1.<com.novell.ldapchai.provider.ChaiConfiguration: boolean getBooleanSetting(com.novell.ldapchai.provider.ChaiSetting)>(v2);
if v3 == 0 goto label1;
v4 = virtualinvoke v0.<com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.provider.ChaiProviderFactory getProviderFactory()>();
v5 = virtualinvoke v4.<com.novell.ldapchai.provider.ChaiProviderFactory: com.novell.ldapchai.provider.ChaiProviderFactory$CentralService getCentralService()>();
v6 = virtualinvoke v5.<com.novell.ldapchai.provider.ChaiProviderFactory$CentralService: com.novell.ldapchai.provider.StatisticsWrapper$StatsBean getStatsBean()>();
v7 = <com.novell.ldapchai.provider.ProviderStatistics$IncrementerStatistic: com.novell.ldapchai.provider.ProviderStatistics$IncrementerStatistic BIND_COUNT>;
virtualinvoke v6.<com.novell.ldapchai.provider.StatisticsWrapper$StatsBean: void incrementStatistic(com.novell.ldapchai.provider.ProviderStatistics$IncrementerStatistic)>(v7);
label1:
return;
}
static void <clinit>()
{
com.novell.ldapchai.provider.AbstractProvider$ChaiProviderInputValidator v0;
java.util.concurrent.atomic.AtomicInteger v2;
com.novell.ldapchai.util.internal.ChaiLogger v1;
v0 = new com.novell.ldapchai.provider.AbstractProvider$ChaiProviderInputValidator;
specialinvoke v0.<com.novell.ldapchai.provider.AbstractProvider$ChaiProviderInputValidator: void <init>()>();
<com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.provider.AbstractProvider$ChaiProviderInputValidator INPUT_VALIDATOR> = v0;
v1 = staticinvoke <com.novell.ldapchai.util.internal.ChaiLogger: com.novell.ldapchai.util.internal.ChaiLogger getLogger(java.lang.Class)>(class "Lcom/novell/ldapchai/provider/AbstractProvider;");
<com.novell.ldapchai.provider.AbstractProvider: com.novell.ldapchai.util.internal.ChaiLogger LOGGER> = v1;
v2 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v2.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);
<com.novell.ldapchai.provider.AbstractProvider: java.util.concurrent.atomic.AtomicInteger ID_COUNTER> = v2;
return;
}
}