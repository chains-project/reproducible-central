class com.novell.ldapchai.provider.CachingWrapper$Memorizer extends java.lang.Object implements java.lang.reflect.InvocationHandler
{
private static final com.novell.ldapchai.util.internal.ChaiLogger LOGGER;
private final java.lang.Object memorizedObject;
private final java.util.Map hardCache;
private final java.util.Map weakCache;
private final java.util.Deque valueStack;
private final java.util.concurrent.locks.ReentrantLock lock;
private int maxSize;
private int maxAge;
public static java.lang.Object forObject(java.lang.Object, int, int)
{
java.lang.Class[] v9;
java.util.function.Supplier v5;
com.novell.ldapchai.provider.CachingWrapper$Memorizer v10;
int v1, v12, v13, v2;
java.lang.Class v6, v8;
java.lang.Object v0, v11;
java.lang.ClassLoader v7;
boolean v3;
com.novell.ldapchai.util.internal.ChaiLogger v4;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = v0 instanceof com.novell.ldapchai.provider.CachingWrapper$Memorizer;
if v3 == 0 goto label1;
v4 = <com.novell.ldapchai.provider.CachingWrapper$Memorizer: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v5 = staticinvoke <com.novell.ldapchai.provider.CachingWrapper$Memorizer$lambda_forObject_0__111: java.util.function.Supplier bootstrap$()>();
virtualinvoke v4.<com.novell.ldapchai.util.internal.ChaiLogger: void warn(java.util.function.Supplier)>(v5);
return v0;
label1:
v6 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v7 = virtualinvoke v6.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
v8 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v9 = virtualinvoke v8.<java.lang.Class: java.lang.Class[] getInterfaces()>();
v10 = new com.novell.ldapchai.provider.CachingWrapper$Memorizer;
specialinvoke v10.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: void <init>(java.lang.Object)>(v0);
v11 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>(v7, v9, v10);
if v1 < 0 goto label2;
v12 = v1;
goto label3;
label2:
v12 = 0;
label3:
v11.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: int maxAge> = v12;
if v2 < 0 goto label4;
v13 = v2;
goto label5;
label4:
v13 = 0;
label5:
v11.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: int maxSize> = v13;
return v11;
}
private void <init>(java.lang.Object)
{
java.util.concurrent.locks.ReentrantLock v5;
java.util.HashMap v2, v3;
com.novell.ldapchai.provider.ChaiSetting v6, v9;
com.novell.ldapchai.provider.CachingWrapper$Memorizer v0;
int v11, v8;
java.lang.Object v1;
java.lang.String v10, v7;
java.util.ArrayDeque v4;
v0 := @this: com.novell.ldapchai.provider.CachingWrapper$Memorizer;
v1 := @parameter0: java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.HashMap;
specialinvoke v2.<java.util.HashMap: void <init>()>();
v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: java.util.Map hardCache> = v2;
v3 = new java.util.HashMap;
specialinvoke v3.<java.util.HashMap: void <init>()>();
v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: java.util.Map weakCache> = v3;
v4 = new java.util.ArrayDeque;
specialinvoke v4.<java.util.ArrayDeque: void <init>()>();
v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: java.util.Deque valueStack> = v4;
v5 = new java.util.concurrent.locks.ReentrantLock;
specialinvoke v5.<java.util.concurrent.locks.ReentrantLock: void <init>()>();
v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: java.util.concurrent.locks.ReentrantLock lock> = v5;
v6 = <com.novell.ldapchai.provider.ChaiSetting: com.novell.ldapchai.provider.ChaiSetting CACHE_MAXIMUM_SIZE>;
v7 = virtualinvoke v6.<com.novell.ldapchai.provider.ChaiSetting: java.lang.String getDefaultValue()>();
v8 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v7);
v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: int maxSize> = v8;
v9 = <com.novell.ldapchai.provider.ChaiSetting: com.novell.ldapchai.provider.ChaiSetting CACHE_MAXIMUM_AGE>;
v10 = virtualinvoke v9.<com.novell.ldapchai.provider.ChaiSetting: java.lang.String getDefaultValue()>();
v11 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v10);
v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: int maxAge> = v11;
v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: java.lang.Object memorizedObject> = v1;
virtualinvoke v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: void clearCache()>();
return;
}
public void clearCache()
{
com.novell.ldapchai.provider.CachingWrapper$Memorizer v0;
java.util.Map v1;
v0 := @this: com.novell.ldapchai.provider.CachingWrapper$Memorizer;
v1 = v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: java.util.Map hardCache>;
interfaceinvoke v1.<java.util.Map: void clear()>();
return;
}
public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable
{
java.lang.Throwable v14;
java.lang.Object[] v3;
java.lang.Exception v13;
java.util.List v9;
com.novell.ldapchai.provider.CachingWrapper$Memorizer$ValueWrapper v12;
com.novell.ldapchai.provider.CachingWrapper$Memorizer v0;
java.lang.Class v4, v5;
java.lang.Object v1, v10, v11, v7, v8;
java.lang.reflect.Method v2;
boolean v6;
v0 := @this: com.novell.ldapchai.provider.CachingWrapper$Memorizer;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.reflect.Method;
v3 := @parameter2: java.lang.Object[];
v4 = virtualinvoke v2.<java.lang.reflect.Method: java.lang.Class getReturnType()>();
v5 = <java.lang.Void: java.lang.Class TYPE>;
v6 = virtualinvoke v4.<java.lang.Object: boolean equals(java.lang.Object)>(v5);
if v6 == 0 goto label1;
v7 = v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: java.lang.Object memorizedObject>;
v8 = virtualinvoke v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>(v7, v2, v3);
return v8;
label1:
v9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v3);
v10 = specialinvoke v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: java.lang.Object getCachedValue(java.lang.reflect.Method,java.util.List)>(v2, v9);
if v10 != null goto label5;
label2:
v11 = v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: java.lang.Object memorizedObject>;
v10 = virtualinvoke v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>(v11, v2, v3);
v12 = new com.novell.ldapchai.provider.CachingWrapper$Memorizer$ValueWrapper;
specialinvoke v12.<com.novell.ldapchai.provider.CachingWrapper$Memorizer$ValueWrapper: void <init>(java.lang.reflect.Method,java.util.List,java.lang.Object)>(v2, v9, v10);
specialinvoke v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: void addCachedValue(com.novell.ldapchai.provider.CachingWrapper$Memorizer$ValueWrapper)>(v12);
label3:
goto label5;
label4:
v13 := @caughtexception;
v14 = virtualinvoke v13.<java.lang.Exception: java.lang.Throwable getCause()>();
throw v14;
label5:
return v10;
catch java.lang.Exception from label2 to label3 with label4;
}
private java.util.Map getHardCachedInvocations(java.lang.reflect.Method)
{
com.novell.ldapchai.provider.CachingWrapper$Memorizer v0;
java.util.Map v2;
java.lang.Object v4;
java.lang.reflect.Method v1;
java.util.function.Function v3;
v0 := @this: com.novell.ldapchai.provider.CachingWrapper$Memorizer;
v1 := @parameter0: java.lang.reflect.Method;
v2 = v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: java.util.Map hardCache>;
v3 = staticinvoke <com.novell.ldapchai.provider.CachingWrapper$Memorizer$lambda_getHardCachedInvocations_1__112: java.util.function.Function bootstrap$()>();
v4 = interfaceinvoke v2.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(v1, v3);
return v4;
}
private java.util.Map getWeakCachedInvocations(java.lang.reflect.Method)
{
com.novell.ldapchai.provider.CachingWrapper$Memorizer v0;
java.util.Map v2;
java.lang.Object v4;
java.lang.reflect.Method v1;
java.util.function.Function v3;
v0 := @this: com.novell.ldapchai.provider.CachingWrapper$Memorizer;
v1 := @parameter0: java.lang.reflect.Method;
v2 = v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: java.util.Map weakCache>;
v3 = staticinvoke <com.novell.ldapchai.provider.CachingWrapper$Memorizer$lambda_getWeakCachedInvocations_2__113: java.util.function.Function bootstrap$()>();
v4 = interfaceinvoke v2.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(v1, v3);
return v4;
}
private java.lang.Object getCachedValue(java.lang.reflect.Method, java.util.List)
{
long v7, v8, v9;
java.util.List v2;
byte v11;
com.novell.ldapchai.provider.CachingWrapper$Memorizer v0;
java.util.Map v3, v5;
int v10;
java.lang.Object v12, v4, v6;
java.lang.reflect.Method v1;
v0 := @this: com.novell.ldapchai.provider.CachingWrapper$Memorizer;
v1 := @parameter0: java.lang.reflect.Method;
v2 := @parameter1: java.util.List;
v3 = specialinvoke v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: java.util.Map getHardCachedInvocations(java.lang.reflect.Method)>(v1);
v4 = interfaceinvoke v3.<java.util.Map: java.lang.Object get(java.lang.Object)>(v2);
if v4 != null goto label2;
v5 = specialinvoke v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: java.util.Map getWeakCachedInvocations(java.lang.reflect.Method)>(v1);
v6 = interfaceinvoke v5.<java.util.Map: java.lang.Object get(java.lang.Object)>(v2);
if v6 == null goto label1;
virtualinvoke v6.<java.lang.ref.WeakReference: java.lang.Object get()>();
label1:
if v4 != null goto label2;
return null;
label2:
v7 = staticinvoke <java.lang.System: long currentTimeMillis()>();
v8 = virtualinvoke v4.<com.novell.ldapchai.provider.CachingWrapper$Memorizer$ValueWrapper: long getTimestamp()>();
v9 = v7 - v8;
v10 = v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: int maxAge>;
v11 = v9 cmp v10;
if v11 <= 0 goto label3;
specialinvoke v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: void removeCachedValue(com.novell.ldapchai.provider.CachingWrapper$Memorizer$ValueWrapper,boolean)>(v4, 0);
return null;
label3:
v12 = virtualinvoke v4.<com.novell.ldapchai.provider.CachingWrapper$Memorizer$ValueWrapper: java.lang.Object getValue()>();
return v12;
}
private void removeCachedValue(com.novell.ldapchai.provider.CachingWrapper$Memorizer$ValueWrapper, boolean)
{
java.lang.Throwable v13;
java.util.concurrent.locks.ReentrantLock v12, v14, v3;
java.util.Deque v7;
java.util.List v10, v6;
com.novell.ldapchai.provider.CachingWrapper$Memorizer$ValueWrapper v1;
com.novell.ldapchai.provider.CachingWrapper$Memorizer v0;
java.util.Map v5, v9;
java.lang.ref.WeakReference v11;
java.lang.reflect.Method v4, v8;
boolean v2;
v0 := @this: com.novell.ldapchai.provider.CachingWrapper$Memorizer;
v1 := @parameter0: com.novell.ldapchai.provider.CachingWrapper$Memorizer$ValueWrapper;
v2 := @parameter1: boolean;
v3 = v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: java.util.concurrent.locks.ReentrantLock lock>;
virtualinvoke v3.<java.util.concurrent.locks.ReentrantLock: void lock()>();
label1:
v4 = virtualinvoke v1.<com.novell.ldapchai.provider.CachingWrapper$Memorizer$ValueWrapper: java.lang.reflect.Method getMethod()>();
v5 = specialinvoke v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: java.util.Map getHardCachedInvocations(java.lang.reflect.Method)>(v4);
v6 = virtualinvoke v1.<com.novell.ldapchai.provider.CachingWrapper$Memorizer$ValueWrapper: java.util.List getKey()>();
interfaceinvoke v5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v6);
v7 = v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: java.util.Deque valueStack>;
interfaceinvoke v7.<java.util.Deque: boolean remove(java.lang.Object)>(v1);
if v2 == 0 goto label2;
v8 = virtualinvoke v1.<com.novell.ldapchai.provider.CachingWrapper$Memorizer$ValueWrapper: java.lang.reflect.Method getMethod()>();
v9 = specialinvoke v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: java.util.Map getWeakCachedInvocations(java.lang.reflect.Method)>(v8);
v10 = virtualinvoke v1.<com.novell.ldapchai.provider.CachingWrapper$Memorizer$ValueWrapper: java.util.List getKey()>();
v11 = new java.lang.ref.WeakReference;
specialinvoke v11.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(v1);
interfaceinvoke v9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v10, v11);
label2:
v12 = v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: java.util.concurrent.locks.ReentrantLock lock>;
virtualinvoke v12.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
goto label4;
label3:
v13 := @caughtexception;
v14 = v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: java.util.concurrent.locks.ReentrantLock lock>;
virtualinvoke v14.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
throw v13;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
private void addCachedValue(com.novell.ldapchai.provider.CachingWrapper$Memorizer$ValueWrapper)
{
java.lang.Throwable v9;
java.util.Deque v11, v14, v6, v7;
com.novell.ldapchai.provider.CachingWrapper$Memorizer$ValueWrapper v1;
com.novell.ldapchai.provider.CachingWrapper$Memorizer v0;
java.util.Map v4;
int v12, v13;
java.lang.reflect.Method v3;
java.util.concurrent.locks.ReentrantLock v10, v2, v8;
java.util.List v5;
java.lang.Object v15;
v0 := @this: com.novell.ldapchai.provider.CachingWrapper$Memorizer;
v1 := @parameter0: com.novell.ldapchai.provider.CachingWrapper$Memorizer$ValueWrapper;
v2 = v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: java.util.concurrent.locks.ReentrantLock lock>;
virtualinvoke v2.<java.util.concurrent.locks.ReentrantLock: void lock()>();
label1:
v3 = virtualinvoke v1.<com.novell.ldapchai.provider.CachingWrapper$Memorizer$ValueWrapper: java.lang.reflect.Method getMethod()>();
v4 = specialinvoke v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: java.util.Map getHardCachedInvocations(java.lang.reflect.Method)>(v3);
v5 = virtualinvoke v1.<com.novell.ldapchai.provider.CachingWrapper$Memorizer$ValueWrapper: java.util.List getKey()>();
interfaceinvoke v4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v5, v1);
v6 = v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: java.util.Deque valueStack>;
interfaceinvoke v6.<java.util.Deque: boolean remove(java.lang.Object)>(v1);
v7 = v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: java.util.Deque valueStack>;
interfaceinvoke v7.<java.util.Deque: void addFirst(java.lang.Object)>(v1);
label2:
v8 = v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: java.util.concurrent.locks.ReentrantLock lock>;
virtualinvoke v8.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
goto label4;
label3:
v9 := @caughtexception;
v10 = v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: java.util.concurrent.locks.ReentrantLock lock>;
virtualinvoke v10.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
throw v9;
label4:
v11 = v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: java.util.Deque valueStack>;
v12 = interfaceinvoke v11.<java.util.Deque: int size()>();
v13 = v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: int maxSize>;
if v12 <= v13 goto label5;
v14 = v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: java.util.Deque valueStack>;
v15 = interfaceinvoke v14.<java.util.Deque: java.lang.Object getLast()>();
specialinvoke v0.<com.novell.ldapchai.provider.CachingWrapper$Memorizer: void removeCachedValue(com.novell.ldapchai.provider.CachingWrapper$Memorizer$ValueWrapper,boolean)>(v15, 1);
goto label4;
label5:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
static void <clinit>()
{
com.novell.ldapchai.util.internal.ChaiLogger v0;
v0 = staticinvoke <com.novell.ldapchai.util.internal.ChaiLogger: com.novell.ldapchai.util.internal.ChaiLogger getLogger(java.lang.Class)>(class "Lcom/novell/ldapchai/provider/CachingWrapper$Memorizer;");
<com.novell.ldapchai.provider.CachingWrapper$Memorizer: com.novell.ldapchai.util.internal.ChaiLogger LOGGER> = v0;
return;
}
}