class com.novell.ldapchai.provider.ChaiProviderFactory$WeakReferenceHolder extends java.lang.Object
{
private java.util.WeakHashMap internalWeakMap;
private final java.lang.Object lock;
void <init>()
{
com.novell.ldapchai.provider.ChaiProviderFactory$WeakReferenceHolder v0;
java.lang.Object v2;
java.util.WeakHashMap v1;
v0 := @this: com.novell.ldapchai.provider.ChaiProviderFactory$WeakReferenceHolder;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.WeakHashMap;
specialinvoke v1.<java.util.WeakHashMap: void <init>()>();
v0.<com.novell.ldapchai.provider.ChaiProviderFactory$WeakReferenceHolder: java.util.WeakHashMap internalWeakMap> = v1;
v2 = new java.lang.Object;
specialinvoke v2.<java.lang.Object: void <init>()>();
v0.<com.novell.ldapchai.provider.ChaiProviderFactory$WeakReferenceHolder: java.lang.Object lock> = v2;
return;
}
void add(java.lang.Object)
{
java.lang.Throwable v4;
com.novell.ldapchai.provider.ChaiProviderFactory$WeakReferenceHolder v0;
java.lang.Object v1, v2;
java.util.WeakHashMap v3;
v0 := @this: com.novell.ldapchai.provider.ChaiProviderFactory$WeakReferenceHolder;
v1 := @parameter0: java.lang.Object;
v2 = v0.<com.novell.ldapchai.provider.ChaiProviderFactory$WeakReferenceHolder: java.lang.Object lock>;
entermonitor v2;
label1:
v3 = v0.<com.novell.ldapchai.provider.ChaiProviderFactory$WeakReferenceHolder: java.util.WeakHashMap internalWeakMap>;
virtualinvoke v3.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, null);
exitmonitor v2;
label2:
goto label4;
label3:
v4 := @caughtexception;
exitmonitor v2;
throw v4;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
void remove(java.lang.Object)
{
java.lang.Throwable v4;
com.novell.ldapchai.provider.ChaiProviderFactory$WeakReferenceHolder v0;
java.lang.Object v1, v2;
java.util.WeakHashMap v3;
v0 := @this: com.novell.ldapchai.provider.ChaiProviderFactory$WeakReferenceHolder;
v1 := @parameter0: java.lang.Object;
v2 = v0.<com.novell.ldapchai.provider.ChaiProviderFactory$WeakReferenceHolder: java.lang.Object lock>;
entermonitor v2;
label1:
v3 = v0.<com.novell.ldapchai.provider.ChaiProviderFactory$WeakReferenceHolder: java.util.WeakHashMap internalWeakMap>;
virtualinvoke v3.<java.util.WeakHashMap: boolean remove(java.lang.Object,java.lang.Object)>(v1, null);
exitmonitor v2;
label2:
goto label4;
label3:
v4 := @caughtexception;
exitmonitor v2;
throw v4;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
java.util.Collection allValues()
{
java.lang.Throwable v5;
java.util.HashSet v2;
java.util.Set v4;
com.novell.ldapchai.provider.ChaiProviderFactory$WeakReferenceHolder v0;
java.lang.Object v1;
java.util.WeakHashMap v3;
v0 := @this: com.novell.ldapchai.provider.ChaiProviderFactory$WeakReferenceHolder;
v1 = v0.<com.novell.ldapchai.provider.ChaiProviderFactory$WeakReferenceHolder: java.lang.Object lock>;
entermonitor v1;
label1:
v2 = new java.util.HashSet;
v3 = v0.<com.novell.ldapchai.provider.ChaiProviderFactory$WeakReferenceHolder: java.util.WeakHashMap internalWeakMap>;
v4 = virtualinvoke v3.<java.util.WeakHashMap: java.util.Set keySet()>();
specialinvoke v2.<java.util.HashSet: void <init>(java.util.Collection)>(v4);
interfaceinvoke v2.<java.util.Set: boolean remove(java.lang.Object)>(null);
exitmonitor v1;
label2:
goto label4;
label3:
v5 := @caughtexception;
exitmonitor v1;
throw v5;
label4:
return v2;
catch java.lang.Throwable from label1 to label2 with label3;
}
}