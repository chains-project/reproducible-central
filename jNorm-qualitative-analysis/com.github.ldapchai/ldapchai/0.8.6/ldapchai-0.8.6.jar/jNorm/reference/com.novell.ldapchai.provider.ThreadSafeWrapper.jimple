class com.novell.ldapchai.provider.ThreadSafeWrapper extends com.novell.ldapchai.provider.AbstractWrapper
{
private static final com.novell.ldapchai.util.internal.ChaiLogger LOGGER;
private final java.util.concurrent.locks.ReentrantLock lock;
static com.novell.ldapchai.provider.ChaiProviderImplementor forProvider(com.novell.ldapchai.provider.ChaiProviderImplementor)
{
java.lang.IllegalStateException v7;
com.novell.ldapchai.provider.ChaiProviderImplementor v0;
java.util.function.Supplier v12, v6;
java.lang.String v3;
boolean v10, v4, v9;
com.novell.ldapchai.provider.ChaiConfiguration v1;
java.lang.Class[] v16;
com.novell.ldapchai.provider.ChaiSetting v2;
com.novell.ldapchai.provider.ThreadSafeWrapper v17;
java.lang.Class v13, v15, v8;
java.lang.Object v18;
java.lang.ClassLoader v14;
com.novell.ldapchai.util.internal.ChaiLogger v11, v5;
v0 := @parameter0: com.novell.ldapchai.provider.ChaiProviderImplementor;
v1 = interfaceinvoke v0.<com.novell.ldapchai.provider.ChaiProviderImplementor: com.novell.ldapchai.provider.ChaiConfiguration getChaiConfiguration()>();
v2 = <com.novell.ldapchai.provider.ChaiSetting: com.novell.ldapchai.provider.ChaiSetting THREAD_SAFE_ENABLE>;
v3 = virtualinvoke v1.<com.novell.ldapchai.provider.ChaiConfiguration: java.lang.String getSetting(com.novell.ldapchai.provider.ChaiSetting)>(v2);
v4 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(v3);
if v4 != 0 goto label1;
v5 = <com.novell.ldapchai.provider.ThreadSafeWrapper: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v6 = staticinvoke <com.novell.ldapchai.provider.ThreadSafeWrapper$lambda_forProvider_0__167: java.util.function.Supplier bootstrap$()>();
virtualinvoke v5.<com.novell.ldapchai.util.internal.ChaiLogger: void warn(java.util.function.Supplier)>(v6);
v7 = new java.lang.IllegalStateException;
specialinvoke v7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("attempt to obtain ThreadSafeWrapper wrapper when thread safe is not enabled in chai config");
throw v7;
label1:
v8 = interfaceinvoke v0.<com.novell.ldapchai.provider.ChaiProviderImplementor: java.lang.Class getClass()>();
v9 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(v8);
if v9 == 0 goto label2;
v10 = v0 instanceof com.novell.ldapchai.provider.ThreadSafeWrapper;
if v10 == 0 goto label2;
v11 = <com.novell.ldapchai.provider.ThreadSafeWrapper: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v12 = staticinvoke <com.novell.ldapchai.provider.ThreadSafeWrapper$lambda_forProvider_1__166: java.util.function.Supplier bootstrap$()>();
virtualinvoke v11.<com.novell.ldapchai.util.internal.ChaiLogger: void warn(java.util.function.Supplier)>(v12);
return v0;
label2:
v13 = interfaceinvoke v0.<com.novell.ldapchai.provider.ChaiProviderImplementor: java.lang.Class getClass()>();
v14 = virtualinvoke v13.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
v15 = interfaceinvoke v0.<com.novell.ldapchai.provider.ChaiProviderImplementor: java.lang.Class getClass()>();
v16 = virtualinvoke v15.<java.lang.Class: java.lang.Class[] getInterfaces()>();
v17 = new com.novell.ldapchai.provider.ThreadSafeWrapper;
specialinvoke v17.<com.novell.ldapchai.provider.ThreadSafeWrapper: void <init>(com.novell.ldapchai.provider.ChaiProviderImplementor)>(v0);
v18 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>(v14, v16, v17);
return v18;
}
void <init>(com.novell.ldapchai.provider.ChaiProviderImplementor)
{
com.novell.ldapchai.provider.ChaiProviderImplementor v1;
java.util.concurrent.locks.ReentrantLock v2;
com.novell.ldapchai.provider.ThreadSafeWrapper v0;
v0 := @this: com.novell.ldapchai.provider.ThreadSafeWrapper;
v1 := @parameter0: com.novell.ldapchai.provider.ChaiProviderImplementor;
specialinvoke v0.<com.novell.ldapchai.provider.AbstractWrapper: void <init>()>();
v2 = new java.util.concurrent.locks.ReentrantLock;
specialinvoke v2.<java.util.concurrent.locks.ReentrantLock: void <init>()>();
v0.<com.novell.ldapchai.provider.ThreadSafeWrapper: java.util.concurrent.locks.ReentrantLock lock> = v2;
v0.<com.novell.ldapchai.provider.ThreadSafeWrapper: com.novell.ldapchai.provider.ChaiProviderImplementor realProvider> = v1;
return;
}
public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable
{
java.lang.Throwable v10, v15;
java.lang.Object[] v3;
com.novell.ldapchai.provider.ChaiProviderImplementor v12, v7;
java.lang.String v18, v19;
java.lang.reflect.Method v2;
boolean v5;
java.util.concurrent.locks.ReentrantLock v11, v6, v9;
java.lang.RuntimeException v17;
java.lang.Exception v16;
java.lang.reflect.InvocationTargetException v14;
com.novell.ldapchai.provider.ThreadSafeWrapper v0;
java.lang.'annotation'.Annotation v4;
java.lang.Object v1, v13, v8;
v0 := @this: com.novell.ldapchai.provider.ThreadSafeWrapper;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.reflect.Method;
v3 := @parameter2: java.lang.Object[];
v4 = virtualinvoke v2.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lcom/novell/ldapchai/provider/ChaiProvider$LdapOperation;");
if v4 == null goto label01;
v5 = 1;
goto label02;
label01:
v5 = 0;
label02:
if v5 == 0 goto label07;
v6 = v0.<com.novell.ldapchai.provider.ThreadSafeWrapper: java.util.concurrent.locks.ReentrantLock lock>;
virtualinvoke v6.<java.util.concurrent.locks.ReentrantLock: void lock()>();
label03:
v7 = v0.<com.novell.ldapchai.provider.ThreadSafeWrapper: com.novell.ldapchai.provider.ChaiProviderImplementor realProvider>;
v8 = virtualinvoke v2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v7, v3);
label04:
v9 = v0.<com.novell.ldapchai.provider.ThreadSafeWrapper: java.util.concurrent.locks.ReentrantLock lock>;
virtualinvoke v9.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
label05:
return v8;
label06:
v10 := @caughtexception;
v11 = v0.<com.novell.ldapchai.provider.ThreadSafeWrapper: java.util.concurrent.locks.ReentrantLock lock>;
virtualinvoke v11.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
throw v10;
label07:
v12 = v0.<com.novell.ldapchai.provider.ThreadSafeWrapper: com.novell.ldapchai.provider.ChaiProviderImplementor realProvider>;
v13 = virtualinvoke v2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v12, v3);
label08:
return v13;
label09:
v14 := @caughtexception;
v15 = virtualinvoke v14.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();
throw v15;
label10:
v16 := @caughtexception;
v17 = new java.lang.RuntimeException;
v18 = virtualinvoke v16.<java.lang.Exception: java.lang.String getMessage()>();
v19 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v18) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unexpected invocation exception: \u0001");
specialinvoke v17.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(v19, v16);
throw v17;
catch java.lang.Throwable from label03 to label04 with label06;
catch java.lang.reflect.InvocationTargetException from label02 to label05 with label09;
catch java.lang.reflect.InvocationTargetException from label06 to label08 with label09;
catch java.lang.Exception from label02 to label05 with label10;
catch java.lang.Exception from label06 to label08 with label10;
}
static void <clinit>()
{
com.novell.ldapchai.util.internal.ChaiLogger v0;
v0 = staticinvoke <com.novell.ldapchai.util.internal.ChaiLogger: com.novell.ldapchai.util.internal.ChaiLogger getLogger(java.lang.Class)>(class "Lcom/novell/ldapchai/provider/ThreadSafeWrapper;");
<com.novell.ldapchai.provider.ThreadSafeWrapper: com.novell.ldapchai.util.internal.ChaiLogger LOGGER> = v0;
return;
}
}