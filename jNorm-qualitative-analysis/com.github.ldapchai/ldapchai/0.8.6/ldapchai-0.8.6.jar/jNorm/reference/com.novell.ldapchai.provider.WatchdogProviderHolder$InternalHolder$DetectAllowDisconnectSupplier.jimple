class com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder$DetectAllowDisconnectSupplier extends java.lang.Object implements java.util.function.BooleanSupplier
{
private boolean supplied;
private boolean result;
final com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder this$0;
void <init>(com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder)
{
com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder v1;
com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder$DetectAllowDisconnectSupplier v0;
v0 := @this: com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder$DetectAllowDisconnectSupplier;
v1 := @parameter0: com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder;
v0.<com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder$DetectAllowDisconnectSupplier: com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public boolean getAsBoolean()
{
com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder$DetectAllowDisconnectSupplier v0;
boolean v1, v2, v3;
v0 := @this: com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder$DetectAllowDisconnectSupplier;
v1 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder$DetectAllowDisconnectSupplier: boolean supplied>;
if v1 != 0 goto label1;
v2 = virtualinvoke v0.<com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder$DetectAllowDisconnectSupplier: boolean impl()>();
v0.<com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder$DetectAllowDisconnectSupplier: boolean result> = v2;
label1:
v3 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder$DetectAllowDisconnectSupplier: boolean result>;
return v3;
}
public boolean impl()
{
com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder v1;
com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder$DetectAllowDisconnectSupplier v0;
com.novell.ldapchai.provider.ChaiProviderImplementor v2;
com.novell.ldapchai.provider.DirectoryVendor v3;
java.util.function.Supplier v8;
com.novell.ldapchai.impl.VendorFactory v4;
com.novell.ldapchai.exception.ChaiUnavailableException v6;
boolean v5;
com.novell.ldapchai.util.internal.ChaiLogger v7;
v0 := @this: com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder$DetectAllowDisconnectSupplier;
v1 = v0.<com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder$DetectAllowDisconnectSupplier: com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder this$0>;
v2 = v1.<com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder: com.novell.ldapchai.provider.ChaiProviderImplementor realProvider>;
if v2 == null goto label4;
label1:
v3 = interfaceinvoke v2.<com.novell.ldapchai.provider.ChaiProviderImplementor: com.novell.ldapchai.provider.DirectoryVendor getDirectoryVendor()>();
if v3 == null goto label4;
v0.<com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder$DetectAllowDisconnectSupplier: boolean supplied> = 1;
v4 = virtualinvoke v3.<com.novell.ldapchai.provider.DirectoryVendor: com.novell.ldapchai.impl.VendorFactory getVendorFactory()>();
v5 = interfaceinvoke v4.<com.novell.ldapchai.impl.VendorFactory: boolean allowWatchdogDisconnect(com.novell.ldapchai.provider.ChaiProviderImplementor)>(v2);
label2:
return v5;
label3:
v6 := @caughtexception;
v7 = <com.novell.ldapchai.provider.WatchdogProviderHolder: com.novell.ldapchai.util.internal.ChaiLogger LOGGER>;
v8 = staticinvoke <com.novell.ldapchai.provider.WatchdogProviderHolder$InternalHolder$DetectAllowDisconnectSupplier$lambda_impl_0__168: java.util.function.Supplier bootstrap$(com.novell.ldapchai.exception.ChaiUnavailableException)>(v6);
virtualinvoke v7.<com.novell.ldapchai.util.internal.ChaiLogger: void debug(java.util.function.Supplier,java.lang.Exception)>(v8, v6);
label4:
return 1;
catch com.novell.ldapchai.exception.ChaiUnavailableException from label1 to label2 with label3;
}
}