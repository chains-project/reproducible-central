public class com.novell.ldapchai.util.DefaultChaiPasswordPolicy extends java.lang.Object implements com.novell.ldapchai.ChaiPasswordPolicy
{
private final java.util.Map rules;
private static java.util.Map makeDefaultRuleMap()
{
int v2, v3;
com.novell.ldapchai.ChaiPasswordRule[] v1;
java.util.HashMap v0;
com.novell.ldapchai.ChaiPasswordRule v4;
java.lang.String v5, v6;
v0 = new java.util.HashMap;
specialinvoke v0.<java.util.HashMap: void <init>()>();
v1 = staticinvoke <com.novell.ldapchai.ChaiPasswordRule: com.novell.ldapchai.ChaiPasswordRule[] values()>();
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label2;
v4 = v1[v3];
v5 = virtualinvoke v4.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
v6 = virtualinvoke v4.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getDefaultValue()>();
interfaceinvoke v0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v5, v6);
v3 = v3 + 1;
goto label1;
label2:
return v0;
}
public void <init>()
{
com.novell.ldapchai.util.DefaultChaiPasswordPolicy v0;
java.util.Map v1;
v0 := @this: com.novell.ldapchai.util.DefaultChaiPasswordPolicy;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = staticinvoke <com.novell.ldapchai.util.DefaultChaiPasswordPolicy: java.util.Map makeDefaultRuleMap()>();
v0.<com.novell.ldapchai.util.DefaultChaiPasswordPolicy: java.util.Map rules> = v1;
return;
}
public java.lang.String getValue(java.lang.String)
{
com.novell.ldapchai.util.DefaultChaiPasswordPolicy v0;
java.util.Map v2;
java.lang.Object v3;
java.lang.String v1;
v0 := @this: com.novell.ldapchai.util.DefaultChaiPasswordPolicy;
v1 := @parameter0: java.lang.String;
v2 = v0.<com.novell.ldapchai.util.DefaultChaiPasswordPolicy: java.util.Map rules>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
return v3;
}
public java.lang.String getValue(com.novell.ldapchai.ChaiPasswordRule)
{
com.novell.ldapchai.util.DefaultChaiPasswordPolicy v0;
java.util.Map v2;
java.lang.Object v4;
com.novell.ldapchai.ChaiPasswordRule v1;
java.lang.String v3;
v0 := @this: com.novell.ldapchai.util.DefaultChaiPasswordPolicy;
v1 := @parameter0: com.novell.ldapchai.ChaiPasswordRule;
v2 = v0.<com.novell.ldapchai.util.DefaultChaiPasswordPolicy: java.util.Map rules>;
v3 = virtualinvoke v1.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
v4 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v3);
return v4;
}
public java.util.Set getKeys()
{
com.novell.ldapchai.util.DefaultChaiPasswordPolicy v0;
java.util.Map v1;
java.util.Set v2, v3;
v0 := @this: com.novell.ldapchai.util.DefaultChaiPasswordPolicy;
v1 = v0.<com.novell.ldapchai.util.DefaultChaiPasswordPolicy: java.util.Map rules>;
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set keySet()>();
v3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(v2);
return v3;
}
public com.novell.ldapchai.util.PasswordRuleHelper getRuleHelper()
{
com.novell.ldapchai.util.GenericRuleHelper v1;
com.novell.ldapchai.util.DefaultChaiPasswordPolicy v0;
v0 := @this: com.novell.ldapchai.util.DefaultChaiPasswordPolicy;
v1 = new com.novell.ldapchai.util.GenericRuleHelper;
specialinvoke v1.<com.novell.ldapchai.util.GenericRuleHelper: void <init>(com.novell.ldapchai.ChaiPasswordPolicy)>(v0);
return v1;
}
public static com.novell.ldapchai.util.DefaultChaiPasswordPolicy createDefaultChaiPasswordPolicy(java.util.Map)
{
com.novell.ldapchai.util.DefaultChaiPasswordPolicy v1;
java.util.Map v0, v2;
v0 := @parameter0: java.util.Map;
v1 = new com.novell.ldapchai.util.DefaultChaiPasswordPolicy;
specialinvoke v1.<com.novell.ldapchai.util.DefaultChaiPasswordPolicy: void <init>()>();
if v0 == null goto label1;
v2 = v1.<com.novell.ldapchai.util.DefaultChaiPasswordPolicy: java.util.Map rules>;
interfaceinvoke v2.<java.util.Map: void putAll(java.util.Map)>(v0);
label1:
return v1;
}
public static com.novell.ldapchai.util.DefaultChaiPasswordPolicy createDefaultChaiPasswordPolicyByRule(java.util.Map)
{
java.util.Iterator v3;
java.util.Set v2;
com.novell.ldapchai.util.DefaultChaiPasswordPolicy v1;
java.util.Map v0, v6;
java.lang.Object v5, v7, v9;
java.lang.String v8;
boolean v4;
v0 := @parameter0: java.util.Map;
v1 = new com.novell.ldapchai.util.DefaultChaiPasswordPolicy;
specialinvoke v1.<com.novell.ldapchai.util.DefaultChaiPasswordPolicy: void <init>()>();
if v0 == null goto label2;
v2 = interfaceinvoke v0.<java.util.Map: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = v1.<com.novell.ldapchai.util.DefaultChaiPasswordPolicy: java.util.Map rules>;
v7 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
v8 = virtualinvoke v7.<com.novell.ldapchai.ChaiPasswordRule: java.lang.String getKey()>();
v9 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getValue()>();
interfaceinvoke v6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v8, v9);
goto label1;
label2:
return v1;
}
public static com.novell.ldapchai.util.DefaultChaiPasswordPolicy createDefaultChaiPasswordPolicy()
{
com.novell.ldapchai.util.DefaultChaiPasswordPolicy v0;
v0 = new com.novell.ldapchai.util.DefaultChaiPasswordPolicy;
specialinvoke v0.<com.novell.ldapchai.util.DefaultChaiPasswordPolicy: void <init>()>();
return v0;
}
public java.lang.String toString()
{
com.novell.ldapchai.util.DefaultChaiPasswordPolicy v0;
java.lang.String v1;
v0 := @this: com.novell.ldapchai.util.DefaultChaiPasswordPolicy;
v1 = staticinvoke <com.novell.ldapchai.util.ChaiUtility: java.lang.String passwordPolicyToString(com.novell.ldapchai.ChaiPasswordPolicy)>(v0);
return v1;
}
public com.novell.ldapchai.ChaiEntry getPolicyEntry()
{
com.novell.ldapchai.util.DefaultChaiPasswordPolicy v0;
v0 := @this: com.novell.ldapchai.util.DefaultChaiPasswordPolicy;
return null;
}
}