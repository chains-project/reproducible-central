Classfile /home/aman/Desktop/experiments/reproducible-central/results/com.github.ldapchai/ldapchai/0.8.6/ldapchai-0.8.6.jar/jNorm/reference/HashSaltAnswer.class
  Last modified Oct 21, 2024; size 6365 bytes
  SHA-256 checksum 9c58124ecaa55f0c5f3edcc72cbe330d01450de60345cd9beea672787c7a5e8d
  Compiled from "HashSaltAnswer.java"
class com.novell.ldapchai.cr.HashSaltAnswer implements com.novell.ldapchai.cr.Answer
  minor version: 0
  major version: 52
  flags: (0x0020) ACC_SUPER
  this_class: #27                         // com/novell/ldapchai/cr/HashSaltAnswer
  super_class: #2                         // java/lang/Object
  interfaces: 1, fields: 8, methods: 9, attributes: 2
Constant pool:
    #1 = Methodref          #2.#3         // java/lang/Object."<init>":()V
    #2 = Class              #4            // java/lang/Object
    #3 = NameAndType        #5:#6         // "<init>":()V
    #4 = Utf8               java/lang/Object
    #5 = Utf8               <init>
    #6 = Utf8               ()V
    #7 = Methodref          #8.#9         // com/novell/ldapchai/util/internal/StringHelper.isEmpty:(Ljava/lang/CharSequence;)Z
    #8 = Class              #10           // com/novell/ldapchai/util/internal/StringHelper
    #9 = NameAndType        #11:#12       // isEmpty:(Ljava/lang/CharSequence;)Z
   #10 = Utf8               com/novell/ldapchai/util/internal/StringHelper
   #11 = Utf8               isEmpty
   #12 = Utf8               (Ljava/lang/CharSequence;)Z
   #13 = Class              #14           // java/lang/IllegalArgumentException
   #14 = Utf8               java/lang/IllegalArgumentException
   #15 = String             #16           // missing answerHash value
   #16 = Utf8               missing answerHash value
   #17 = Methodref          #13.#18       // java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
   #18 = NameAndType        #5:#19        // "<init>":(Ljava/lang/String;)V
   #19 = Utf8               (Ljava/lang/String;)V
   #20 = Methodref          #21.#22       // com/novell/ldapchai/cr/HashSaltAnswer$HashType.forFormatType:(Lcom/novell/ldapchai/cr/Answer$FormatType;)Lcom/novell/ldapchai/cr/HashSaltAnswer$HashType;
   #21 = Class              #23           // com/novell/ldapchai/cr/HashSaltAnswer$HashType
   #22 = NameAndType        #24:#25       // forFormatType:(Lcom/novell/ldapchai/cr/Answer$FormatType;)Lcom/novell/ldapchai/cr/HashSaltAnswer$HashType;
   #23 = Utf8               com/novell/ldapchai/cr/HashSaltAnswer$HashType
   #24 = Utf8               forFormatType
   #25 = Utf8               (Lcom/novell/ldapchai/cr/Answer$FormatType;)Lcom/novell/ldapchai/cr/HashSaltAnswer$HashType;
   #26 = Fieldref           #27.#28       // com/novell/ldapchai/cr/HashSaltAnswer.answerHash:Ljava/lang/String;
   #27 = Class              #29           // com/novell/ldapchai/cr/HashSaltAnswer
   #28 = NameAndType        #30:#31       // answerHash:Ljava/lang/String;
   #29 = Utf8               com/novell/ldapchai/cr/HashSaltAnswer
   #30 = Utf8               answerHash
   #31 = Utf8               Ljava/lang/String;
   #32 = Fieldref           #27.#33       // com/novell/ldapchai/cr/HashSaltAnswer.version:Lcom/novell/ldapchai/cr/HashSaltAnswer$VERSION;
   #33 = NameAndType        #34:#35       // version:Lcom/novell/ldapchai/cr/HashSaltAnswer$VERSION;
   #34 = Utf8               version
   #35 = Utf8               Lcom/novell/ldapchai/cr/HashSaltAnswer$VERSION;
   #36 = Fieldref           #27.#37       // com/novell/ldapchai/cr/HashSaltAnswer.formatType:Lcom/novell/ldapchai/cr/Answer$FormatType;
   #37 = NameAndType        #38:#39       // formatType:Lcom/novell/ldapchai/cr/Answer$FormatType;
   #38 = Utf8               formatType
   #39 = Utf8               Lcom/novell/ldapchai/cr/Answer$FormatType;
   #40 = Fieldref           #27.#41       // com/novell/ldapchai/cr/HashSaltAnswer.salt:Ljava/lang/String;
   #41 = NameAndType        #42:#31       // salt:Ljava/lang/String;
   #42 = Utf8               salt
   #43 = Fieldref           #27.#44       // com/novell/ldapchai/cr/HashSaltAnswer.hashCount:I
   #44 = NameAndType        #45:#46       // hashCount:I
   #45 = Utf8               hashCount
   #46 = Utf8               I
   #47 = Fieldref           #27.#48       // com/novell/ldapchai/cr/HashSaltAnswer.caseInsensitive:Z
   #48 = NameAndType        #49:#50       // caseInsensitive:Z
   #49 = Utf8               caseInsensitive
   #50 = Utf8               Z
   #51 = Fieldref           #52.#53       // com/novell/ldapchai/cr/AnswerConfiguration.iterations:I
   #52 = Class              #54           // com/novell/ldapchai/cr/AnswerConfiguration
   #53 = NameAndType        #55:#46       // iterations:I
   #54 = Utf8               com/novell/ldapchai/cr/AnswerConfiguration
   #55 = Utf8               iterations
   #56 = Fieldref           #52.#48       // com/novell/ldapchai/cr/AnswerConfiguration.caseInsensitive:Z
   #57 = Fieldref           #52.#37       // com/novell/ldapchai/cr/AnswerConfiguration.formatType:Lcom/novell/ldapchai/cr/Answer$FormatType;
   #58 = Fieldref           #27.#59       // com/novell/ldapchai/cr/HashSaltAnswer.DEFAULT_VERSION:Lcom/novell/ldapchai/cr/HashSaltAnswer$VERSION;
   #59 = NameAndType        #60:#35       // DEFAULT_VERSION:Lcom/novell/ldapchai/cr/HashSaltAnswer$VERSION;
   #60 = Utf8               DEFAULT_VERSION
   #61 = String             #62           // missing answer value
   #62 = Utf8               missing answer value
   #63 = Methodref          #21.#64       // com/novell/ldapchai/cr/HashSaltAnswer$HashType.isSaltEnabled:()Z
   #64 = NameAndType        #65:#66       // isSaltEnabled:()Z
   #65 = Utf8               isSaltEnabled
   #66 = Utf8               ()Z
   #67 = Methodref          #68.#69       // java/lang/String.toLowerCase:()Ljava/lang/String;
   #68 = Class              #70           // java/lang/String
   #69 = NameAndType        #71:#72       // toLowerCase:()Ljava/lang/String;
   #70 = Utf8               java/lang/String
   #71 = Utf8               toLowerCase
   #72 = Utf8               ()Ljava/lang/String;
   #73 = Methodref          #52.#74       // com/novell/ldapchai/cr/AnswerConfiguration.getSaltCharCount:()I
   #74 = NameAndType        #75:#76       // getSaltCharCount:()I
   #75 = Utf8               getSaltCharCount
   #76 = Utf8               ()I
   #77 = Methodref          #27.#78       // com/novell/ldapchai/cr/HashSaltAnswer.generateSalt:(I)Ljava/lang/String;
   #78 = NameAndType        #79:#80       // generateSalt:(I)Ljava/lang/String;
   #79 = Utf8               generateSalt
   #80 = Utf8               (I)Ljava/lang/String;
   #81 = String             #82           //
   #82 = Utf8
   #83 = Class              #84           // java/lang/StringBuilder
   #84 = Utf8               java/lang/StringBuilder
   #85 = Methodref          #83.#3        // java/lang/StringBuilder."<init>":()V
   #86 = Methodref          #83.#87       // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   #87 = NameAndType        #88:#89       // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   #88 = Utf8               append
   #89 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;
   #90 = Methodref          #83.#91       // java/lang/StringBuilder.toString:()Ljava/lang/String;
   #91 = NameAndType        #92:#72       // toString:()Ljava/lang/String;
   #92 = Utf8               toString
   #93 = Methodref          #27.#94       // com/novell/ldapchai/cr/HashSaltAnswer.hashValue:(Ljava/lang/String;)Ljava/lang/String;
   #94 = NameAndType        #95:#96       // hashValue:(Ljava/lang/String;)Ljava/lang/String;
   #95 = Utf8               hashValue
   #96 = Utf8               (Ljava/lang/String;)Ljava/lang/String;
   #97 = InterfaceMethodref #98.#99       // org/jrivard/xmlchai/XmlFactory.getFactory:()Lorg/jrivard/xmlchai/XmlFactory;
   #98 = Class              #100          // org/jrivard/xmlchai/XmlFactory
   #99 = NameAndType        #101:#102     // getFactory:()Lorg/jrivard/xmlchai/XmlFactory;
  #100 = Utf8               org/jrivard/xmlchai/XmlFactory
  #101 = Utf8               getFactory
  #102 = Utf8               ()Lorg/jrivard/xmlchai/XmlFactory;
  #103 = Class              #104          // com/novell/ldapchai/cr/ChaiResponseSet
  #104 = Utf8               com/novell/ldapchai/cr/ChaiResponseSet
  #105 = String             #106          // answer
  #106 = Utf8               answer
  #107 = InterfaceMethodref #98.#108      // org/jrivard/xmlchai/XmlFactory.newElement:(Ljava/lang/String;)Lorg/jrivard/xmlchai/XmlElement;
  #108 = NameAndType        #109:#110     // newElement:(Ljava/lang/String;)Lorg/jrivard/xmlchai/XmlElement;
  #109 = Utf8               newElement
  #110 = Utf8               (Ljava/lang/String;)Lorg/jrivard/xmlchai/XmlElement;
  #111 = Methodref          #112.#91      // com/novell/ldapchai/cr/HashSaltAnswer$VERSION.toString:()Ljava/lang/String;
  #112 = Class              #113          // com/novell/ldapchai/cr/HashSaltAnswer$VERSION
  #113 = Utf8               com/novell/ldapchai/cr/HashSaltAnswer$VERSION
  #114 = String             #115          // :
  #115 = Utf8               :
  #116 = InterfaceMethodref #117.#118     // org/jrivard/xmlchai/XmlElement.setText:(Ljava/lang/String;)V
  #117 = Class              #119          // org/jrivard/xmlchai/XmlElement
  #118 = NameAndType        #120:#19      // setText:(Ljava/lang/String;)V
  #119 = Utf8               org/jrivard/xmlchai/XmlElement
  #120 = Utf8               setText
  #121 = String             #42           // salt
  #122 = InterfaceMethodref #117.#123     // org/jrivard/xmlchai/XmlElement.setAttribute:(Ljava/lang/String;Ljava/lang/String;)V
  #123 = NameAndType        #124:#125     // setAttribute:(Ljava/lang/String;Ljava/lang/String;)V
  #124 = Utf8               setAttribute
  #125 = Utf8               (Ljava/lang/String;Ljava/lang/String;)V
  #126 = String             #127          // format
  #127 = Utf8               format
  #128 = Methodref          #129.#91      // com/novell/ldapchai/cr/Answer$FormatType.toString:()Ljava/lang/String;
  #129 = Class              #130          // com/novell/ldapchai/cr/Answer$FormatType
  #130 = Utf8               com/novell/ldapchai/cr/Answer$FormatType
  #131 = String             #132          // hashcount
  #132 = Utf8               hashcount
  #133 = Methodref          #68.#134      // java/lang/String.valueOf:(I)Ljava/lang/String;
  #134 = NameAndType        #135:#80      // valueOf:(I)Ljava/lang/String;
  #135 = Utf8               valueOf
  #136 = Methodref          #68.#137      // java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
  #137 = NameAndType        #138:#139     // equalsIgnoreCase:(Ljava/lang/String;)Z
  #138 = Utf8               equalsIgnoreCase
  #139 = Utf8               (Ljava/lang/String;)Z
  #140 = Methodref          #27.#141      // com/novell/ldapchai/cr/HashSaltAnswer.doHash:(Ljava/lang/String;ILcom/novell/ldapchai/cr/Answer$FormatType;Lcom/novell/ldapchai/cr/HashSaltAnswer$VERSION;)Ljava/lang/String;
  #141 = NameAndType        #142:#143     // doHash:(Ljava/lang/String;ILcom/novell/ldapchai/cr/Answer$FormatType;Lcom/novell/ldapchai/cr/HashSaltAnswer$VERSION;)Ljava/lang/String;
  #142 = Utf8               doHash
  #143 = Utf8               (Ljava/lang/String;ILcom/novell/ldapchai/cr/Answer$FormatType;Lcom/novell/ldapchai/cr/HashSaltAnswer$VERSION;)Ljava/lang/String;
  #144 = Methodref          #21.#145      // com/novell/ldapchai/cr/HashSaltAnswer$HashType.getHashAlgName:()Ljava/lang/String;
  #145 = NameAndType        #146:#72      // getHashAlgName:()Ljava/lang/String;
  #146 = Utf8               getHashAlgName
  #147 = Methodref          #148.#149     // java/security/MessageDigest.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;
  #148 = Class              #150          // java/security/MessageDigest
  #149 = NameAndType        #151:#152     // getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;
  #150 = Utf8               java/security/MessageDigest
  #151 = Utf8               getInstance
  #152 = Utf8               (Ljava/lang/String;)Ljava/security/MessageDigest;
  #153 = Class              #154          // java/security/NoSuchAlgorithmException
  #154 = Utf8               java/security/NoSuchAlgorithmException
  #155 = Class              #156          // java/lang/IllegalStateException
  #156 = Utf8               java/lang/IllegalStateException
  #157 = String             #158          // unable to load
  #158 = Utf8               unable to load
  #159 = String             #160          //  message digest algorithm:
  #160 = Utf8                message digest algorithm:
  #161 = Methodref          #153.#162     // java/security/NoSuchAlgorithmException.getMessage:()Ljava/lang/String;
  #162 = NameAndType        #163:#72      // getMessage:()Ljava/lang/String;
  #163 = Utf8               getMessage
  #164 = Methodref          #155.#18      // java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
  #165 = Fieldref           #166.#167     // com/novell/ldapchai/cr/ChaiCrFactory.DEFAULT_CHARSET:Ljava/nio/charset/Charset;
  #166 = Class              #168          // com/novell/ldapchai/cr/ChaiCrFactory
  #167 = NameAndType        #169:#170     // DEFAULT_CHARSET:Ljava/nio/charset/Charset;
  #168 = Utf8               com/novell/ldapchai/cr/ChaiCrFactory
  #169 = Utf8               DEFAULT_CHARSET
  #170 = Utf8               Ljava/nio/charset/Charset;
  #171 = Methodref          #68.#172      // java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B
  #172 = NameAndType        #173:#174     // getBytes:(Ljava/nio/charset/Charset;)[B
  #173 = Utf8               getBytes
  #174 = Utf8               (Ljava/nio/charset/Charset;)[B
  #175 = Methodref          #112.#176     // com/novell/ldapchai/cr/HashSaltAnswer$VERSION.ordinal:()I
  #176 = NameAndType        #177:#76      // ordinal:()I
  #177 = Utf8               ordinal
  #178 = Methodref          #148.#179     // java/security/MessageDigest.digest:([B)[B
  #179 = NameAndType        #180:#181     // digest:([B)[B
  #180 = Utf8               digest
  #181 = Utf8               ([B)[B
  #182 = Class              #183          // com/novell/ldapchai/util/internal/StringHelper$Base64Options
  #183 = Utf8               com/novell/ldapchai/util/internal/StringHelper$Base64Options
  #184 = Methodref          #8.#185       // com/novell/ldapchai/util/internal/StringHelper.base64Encode:([B[Lcom/novell/ldapchai/util/internal/StringHelper$Base64Options;)Ljava/lang/String;
  #185 = NameAndType        #186:#187     // base64Encode:([B[Lcom/novell/ldapchai/util/internal/StringHelper$Base64Options;)Ljava/lang/String;
  #186 = Utf8               base64Encode
  #187 = Utf8               ([B[Lcom/novell/ldapchai/util/internal/StringHelper$Base64Options;)Ljava/lang/String;
  #188 = String             #189          // unexpected version enum in hash method
  #189 = Utf8               unexpected version enum in hash method
  #190 = Class              #191          // java/security/SecureRandom
  #191 = Utf8               java/security/SecureRandom
  #192 = Methodref          #190.#3       // java/security/SecureRandom."<init>":()V
  #193 = Methodref          #83.#194      // java/lang/StringBuilder."<init>":(I)V
  #194 = NameAndType        #5:#195       // "<init>":(I)V
  #195 = Utf8               (I)V
  #196 = String             #197          // ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789
  #197 = Utf8               ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789
  #198 = Methodref          #68.#199      // java/lang/String.length:()I
  #199 = NameAndType        #200:#76      // length:()I
  #200 = Utf8               length
  #201 = Methodref          #190.#202     // java/security/SecureRandom.nextInt:(I)I
  #202 = NameAndType        #203:#204     // nextInt:(I)I
  #203 = Utf8               nextInt
  #204 = Utf8               (I)I
  #205 = Methodref          #68.#206      // java/lang/String.charAt:(I)C
  #206 = NameAndType        #207:#208     // charAt:(I)C
  #207 = Utf8               charAt
  #208 = Utf8               (I)C
  #209 = Methodref          #83.#210      // java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
  #210 = NameAndType        #88:#211      // append:(C)Ljava/lang/StringBuilder;
  #211 = Utf8               (C)Ljava/lang/StringBuilder;
  #212 = Class              #213          // com/novell/ldapchai/cr/bean/AnswerBean
  #213 = Utf8               com/novell/ldapchai/cr/bean/AnswerBean
  #214 = Methodref          #212.#215     // com/novell/ldapchai/cr/bean/AnswerBean."<init>":(Lcom/novell/ldapchai/cr/Answer$FormatType;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IZ)V
  #215 = NameAndType        #5:#216       // "<init>":(Lcom/novell/ldapchai/cr/Answer$FormatType;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IZ)V
  #216 = Utf8               (Lcom/novell/ldapchai/cr/Answer$FormatType;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IZ)V
  #217 = Fieldref           #112.#218     // com/novell/ldapchai/cr/HashSaltAnswer$VERSION.B:Lcom/novell/ldapchai/cr/HashSaltAnswer$VERSION;
  #218 = NameAndType        #219:#35      // B:Lcom/novell/ldapchai/cr/HashSaltAnswer$VERSION;
  #219 = Utf8               B
  #220 = Class              #221          // com/novell/ldapchai/cr/Answer
  #221 = Utf8               com/novell/ldapchai/cr/Answer
  #222 = Utf8               VERSION_SEPARATOR
  #223 = Utf8               ConstantValue
  #224 = Utf8               (Ljava/lang/String;Ljava/lang/String;IZLcom/novell/ldapchai/cr/Answer$FormatType;Lcom/novell/ldapchai/cr/HashSaltAnswer$VERSION;)V
  #225 = Utf8               Code
  #226 = Utf8               LineNumberTable
  #227 = Utf8               LocalVariableTable
  #228 = Utf8               this
  #229 = Utf8               Lcom/novell/ldapchai/cr/HashSaltAnswer;
  #230 = Utf8               StackMapTable
  #231 = Utf8               (Lcom/novell/ldapchai/cr/AnswerConfiguration;Ljava/lang/String;)V
  #232 = Utf8               answerConfiguration
  #233 = Utf8               Lcom/novell/ldapchai/cr/AnswerConfiguration;
  #234 = Utf8               hashType
  #235 = Utf8               Lcom/novell/ldapchai/cr/HashSaltAnswer$HashType;
  #236 = Utf8               includeSalt
  #237 = Utf8               casedAnswer
  #238 = Utf8               saltedAnswer
  #239 = Utf8               toXml
  #240 = Utf8               ()Lorg/jrivard/xmlchai/XmlElement;
  #241 = Utf8               answerElement
  #242 = Utf8               Lorg/jrivard/xmlchai/XmlElement;
  #243 = Utf8               testAnswer
  #244 = Utf8               testResponse
  #245 = Utf8               casedResponse
  #246 = Utf8               saltedTest
  #247 = Utf8               hashedTest
  #248 = Utf8               input
  #249 = Utf8               md
  #250 = Utf8               Ljava/security/MessageDigest;
  #251 = Utf8               e
  #252 = Utf8               Ljava/security/NoSuchAlgorithmException;
  #253 = Utf8               i
  #254 = Utf8               hashedBytes
  #255 = Utf8               [B
  #256 = Class              #255          // "[B"
  #257 = Utf8               Exceptions
  #258 = Utf8               random
  #259 = Utf8               Ljava/security/SecureRandom;
  #260 = Utf8               sb
  #261 = Utf8               Ljava/lang/StringBuilder;
  #262 = Utf8               asAnswerBean
  #263 = Utf8               ()Lcom/novell/ldapchai/cr/bean/AnswerBean;
  #264 = Utf8               <clinit>
  #265 = Utf8               SourceFile
  #266 = Utf8               HashSaltAnswer.java
  #267 = Utf8               InnerClasses
  #268 = Utf8               HashType
  #269 = Utf8               FormatType
  #270 = Utf8               VERSION
  #271 = Utf8               Base64Options
  #272 = Class              #273          // com/novell/ldapchai/cr/HashSaltAnswer$HashSaltAnswerFactory
  #273 = Utf8               com/novell/ldapchai/cr/HashSaltAnswer$HashSaltAnswerFactory
  #274 = Utf8               HashSaltAnswerFactory
{
  private static final java.lang.String VERSION_SEPARATOR = ":";
    descriptor: Ljava/lang/String;
    flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL
    ConstantValue: String :

  private static final com.novell.ldapchai.cr.HashSaltAnswer$VERSION DEFAULT_VERSION;
    descriptor: Lcom/novell/ldapchai/cr/HashSaltAnswer$VERSION;
    flags: (0x001a) ACC_PRIVATE, ACC_STATIC, ACC_FINAL

  protected final java.lang.String answerHash;
    descriptor: Ljava/lang/String;
    flags: (0x0014) ACC_PROTECTED, ACC_FINAL

  protected final java.lang.String salt;
    descriptor: Ljava/lang/String;
    flags: (0x0014) ACC_PROTECTED, ACC_FINAL

  protected final int hashCount;
    descriptor: I
    flags: (0x0014) ACC_PROTECTED, ACC_FINAL

  protected final boolean caseInsensitive;
    descriptor: Z
    flags: (0x0014) ACC_PROTECTED, ACC_FINAL

  protected final com.novell.ldapchai.cr.Answer$FormatType formatType;
    descriptor: Lcom/novell/ldapchai/cr/Answer$FormatType;
    flags: (0x0014) ACC_PROTECTED, ACC_FINAL

  protected final com.novell.ldapchai.cr.HashSaltAnswer$VERSION version;
    descriptor: Lcom/novell/ldapchai/cr/HashSaltAnswer$VERSION;
    flags: (0x0014) ACC_PROTECTED, ACC_FINAL

  com.novell.ldapchai.cr.HashSaltAnswer(java.lang.String, java.lang.String, int, boolean, com.novell.ldapchai.cr.Answer$FormatType, com.novell.ldapchai.cr.HashSaltAnswer$VERSION);
    descriptor: (Ljava/lang/String;Ljava/lang/String;IZLcom/novell/ldapchai/cr/Answer$FormatType;Lcom/novell/ldapchai/cr/HashSaltAnswer$VERSION;)V
    flags: (0x0000)
    Code:
      stack=3, locals=7, args_size=7
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object."<init>":()V
         4: aload_1
         5: invokestatic  #7                  // Method com/novell/ldapchai/util/internal/StringHelper.isEmpty:(Ljava/lang/CharSequence;)Z
         8: ifeq          21
        11: new           #13                 // class java/lang/IllegalArgumentException
        14: dup
        15: ldc           #15                 // String missing answerHash value
        17: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
        20: athrow
        21: aload         5
        23: invokestatic  #20                 // Method com/novell/ldapchai/cr/HashSaltAnswer$HashType.forFormatType:(Lcom/novell/ldapchai/cr/Answer$FormatType;)Lcom/novell/ldapchai/cr/HashSaltAnswer$HashType;
        26: pop
        27: aload_0
        28: aload_1
        29: putfield      #26                 // Field answerHash:Ljava/lang/String;
        32: aload_0
        33: aload         6
        35: putfield      #32                 // Field version:Lcom/novell/ldapchai/cr/HashSaltAnswer$VERSION;
        38: aload_0
        39: aload         5
        41: putfield      #36                 // Field formatType:Lcom/novell/ldapchai/cr/Answer$FormatType;
        44: aload_0
        45: aload_2
        46: putfield      #40                 // Field salt:Ljava/lang/String;
        49: aload_0
        50: iload_3
        51: putfield      #43                 // Field hashCount:I
        54: aload_0
        55: iload         4
        57: putfield      #47                 // Field caseInsensitive:Z
        60: return
      LineNumberTable:
        line 106: 0
        line 107: 4
        line 109: 11
        line 113: 21
        line 115: 27
        line 116: 32
        line 117: 38
        line 118: 44
        line 119: 49
        line 120: 54
        line 121: 60
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      61     0  this   Lcom/novell/ldapchai/cr/HashSaltAnswer;
            0      61     1 answerHash   Ljava/lang/String;
            0      61     2  salt   Ljava/lang/String;
            0      61     3 hashCount   I
            0      61     4 caseInsensitive   Z
            0      61     5 formatType   Lcom/novell/ldapchai/cr/Answer$FormatType;
            0      61     6 version   Lcom/novell/ldapchai/cr/HashSaltAnswer$VERSION;
      StackMapTable: number_of_entries = 1
        frame_type = 255 /* full_frame */
          offset_delta = 21
          locals = [ class com/novell/ldapchai/cr/HashSaltAnswer, class java/lang/String, class java/lang/String, int, int, class com/novell/ldapchai/cr/Answer$FormatType, class com/novell/ldapchai/cr/HashSaltAnswer$VERSION ]
          stack = []

  com.novell.ldapchai.cr.HashSaltAnswer(com.novell.ldapchai.cr.AnswerConfiguration, java.lang.String);
    descriptor: (Lcom/novell/ldapchai/cr/AnswerConfiguration;Ljava/lang/String;)V
    flags: (0x0000)
    Code:
      stack=3, locals=7, args_size=3
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object."<init>":()V
         4: aload_0
         5: aload_1
         6: getfield      #51                 // Field com/novell/ldapchai/cr/AnswerConfiguration.iterations:I
         9: putfield      #43                 // Field hashCount:I
        12: aload_0
        13: aload_1
        14: getfield      #56                 // Field com/novell/ldapchai/cr/AnswerConfiguration.caseInsensitive:Z
        17: putfield      #47                 // Field caseInsensitive:Z
        20: aload_0
        21: aload_1
        22: getfield      #57                 // Field com/novell/ldapchai/cr/AnswerConfiguration.formatType:Lcom/novell/ldapchai/cr/Answer$FormatType;
        25: putfield      #36                 // Field formatType:Lcom/novell/ldapchai/cr/Answer$FormatType;
        28: aload_0
        29: getstatic     #58                 // Field DEFAULT_VERSION:Lcom/novell/ldapchai/cr/HashSaltAnswer$VERSION;
        32: putfield      #32                 // Field version:Lcom/novell/ldapchai/cr/HashSaltAnswer$VERSION;
        35: aload_2
        36: invokestatic  #7                  // Method com/novell/ldapchai/util/internal/StringHelper.isEmpty:(Ljava/lang/CharSequence;)Z
        39: ifeq          52
        42: new           #13                 // class java/lang/IllegalArgumentException
        45: dup
        46: ldc           #61                 // String missing answer value
        48: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
        51: athrow
        52: aload_0
        53: getfield      #36                 // Field formatType:Lcom/novell/ldapchai/cr/Answer$FormatType;
        56: invokestatic  #20                 // Method com/novell/ldapchai/cr/HashSaltAnswer$HashType.forFormatType:(Lcom/novell/ldapchai/cr/Answer$FormatType;)Lcom/novell/ldapchai/cr/HashSaltAnswer$HashType;
        59: astore_3
        60: aload_3
        61: invokevirtual #63                 // Method com/novell/ldapchai/cr/HashSaltAnswer$HashType.isSaltEnabled:()Z
        64: istore        4
        66: aload_0
        67: getfield      #47                 // Field caseInsensitive:Z
        70: ifeq          80
        73: aload_2
        74: invokevirtual #67                 // Method java/lang/String.toLowerCase:()Ljava/lang/String;
        77: goto          81
        80: aload_2
        81: astore        5
        83: aload_0
        84: iload         4
        86: ifeq          99
        89: aload_1
        90: invokevirtual #73                 // Method com/novell/ldapchai/cr/AnswerConfiguration.getSaltCharCount:()I
        93: invokestatic  #77                 // Method generateSalt:(I)Ljava/lang/String;
        96: goto          101
        99: ldc           #81                 // String
       101: putfield      #40                 // Field salt:Ljava/lang/String;
       104: iload         4
       106: ifeq          134
       109: new           #83                 // class java/lang/StringBuilder
       112: dup
       113: invokespecial #85                 // Method java/lang/StringBuilder."<init>":()V
       116: aload_0
       117: getfield      #40                 // Field salt:Ljava/lang/String;
       120: invokevirtual #86                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
       123: aload         5
       125: invokevirtual #86                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
       128: invokevirtual #90                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
       131: goto          136
       134: aload         5
       136: astore        6
       138: aload_0
       139: aload_0
       140: aload         6
       142: invokevirtual #93                 // Method hashValue:(Ljava/lang/String;)Ljava/lang/String;
       145: putfield      #26                 // Field answerHash:Ljava/lang/String;
       148: return
      LineNumberTable:
        line 124: 0
        line 125: 4
        line 126: 12
        line 127: 20
        line 128: 28
        line 130: 35
        line 132: 42
        line 135: 52
        line 138: 60
        line 139: 66
        line 140: 83
        line 141: 104
        line 142: 138
        line 143: 148
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0     149     0  this   Lcom/novell/ldapchai/cr/HashSaltAnswer;
            0     149     1 answerConfiguration   Lcom/novell/ldapchai/cr/AnswerConfiguration;
            0     149     2 answer   Ljava/lang/String;
           60      89     3 hashType   Lcom/novell/ldapchai/cr/HashSaltAnswer$HashType;
           66      83     4 includeSalt   Z
           83      66     5 casedAnswer   Ljava/lang/String;
          138      11     6 saltedAnswer   Ljava/lang/String;
      StackMapTable: number_of_entries = 7
        frame_type = 255 /* full_frame */
          offset_delta = 52
          locals = [ class com/novell/ldapchai/cr/HashSaltAnswer, class com/novell/ldapchai/cr/AnswerConfiguration, class java/lang/String ]
          stack = []
        frame_type = 253 /* append */
          offset_delta = 27
          locals = [ class com/novell/ldapchai/cr/HashSaltAnswer$HashType, int ]
        frame_type = 64 /* same_locals_1_stack_item */
          stack = [ class java/lang/String ]
        frame_type = 255 /* full_frame */
          offset_delta = 17
          locals = [ class com/novell/ldapchai/cr/HashSaltAnswer, class com/novell/ldapchai/cr/AnswerConfiguration, class java/lang/String, class com/novell/ldapchai/cr/HashSaltAnswer$HashType, int, class java/lang/String ]
          stack = [ class com/novell/ldapchai/cr/HashSaltAnswer ]
        frame_type = 255 /* full_frame */
          offset_delta = 1
          locals = [ class com/novell/ldapchai/cr/HashSaltAnswer, class com/novell/ldapchai/cr/AnswerConfiguration, class java/lang/String, class com/novell/ldapchai/cr/HashSaltAnswer$HashType, int, class java/lang/String ]
          stack = [ class com/novell/ldapchai/cr/HashSaltAnswer, class java/lang/String ]
        frame_type = 32 /* same */
        frame_type = 65 /* same_locals_1_stack_item */
          stack = [ class java/lang/String ]

  public org.jrivard.xmlchai.XmlElement toXml();
    descriptor: ()Lorg/jrivard/xmlchai/XmlElement;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=3, locals=2, args_size=1
         0: invokestatic  #97                 // InterfaceMethod org/jrivard/xmlchai/XmlFactory.getFactory:()Lorg/jrivard/xmlchai/XmlFactory;
         3: ldc           #105                // String answer
         5: invokeinterface #107,  2          // InterfaceMethod org/jrivard/xmlchai/XmlFactory.newElement:(Ljava/lang/String;)Lorg/jrivard/xmlchai/XmlElement;
        10: astore_1
        11: aload_1
        12: new           #83                 // class java/lang/StringBuilder
        15: dup
        16: invokespecial #85                 // Method java/lang/StringBuilder."<init>":()V
        19: aload_0
        20: getfield      #32                 // Field version:Lcom/novell/ldapchai/cr/HashSaltAnswer$VERSION;
        23: invokevirtual #111                // Method com/novell/ldapchai/cr/HashSaltAnswer$VERSION.toString:()Ljava/lang/String;
        26: invokevirtual #86                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        29: ldc           #114                // String :
        31: invokevirtual #86                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        34: aload_0
        35: getfield      #26                 // Field answerHash:Ljava/lang/String;
        38: invokevirtual #86                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        41: invokevirtual #90                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        44: invokeinterface #116,  2          // InterfaceMethod org/jrivard/xmlchai/XmlElement.setText:(Ljava/lang/String;)V
        49: aload_0
        50: getfield      #40                 // Field salt:Ljava/lang/String;
        53: invokestatic  #7                  // Method com/novell/ldapchai/util/internal/StringHelper.isEmpty:(Ljava/lang/CharSequence;)Z
        56: ifne          71
        59: aload_1
        60: ldc           #121                // String salt
        62: aload_0
        63: getfield      #40                 // Field salt:Ljava/lang/String;
        66: invokeinterface #122,  3          // InterfaceMethod org/jrivard/xmlchai/XmlElement.setAttribute:(Ljava/lang/String;Ljava/lang/String;)V
        71: aload_1
        72: ldc           #126                // String format
        74: aload_0
        75: getfield      #36                 // Field formatType:Lcom/novell/ldapchai/cr/Answer$FormatType;
        78: invokevirtual #128                // Method com/novell/ldapchai/cr/Answer$FormatType.toString:()Ljava/lang/String;
        81: invokeinterface #122,  3          // InterfaceMethod org/jrivard/xmlchai/XmlElement.setAttribute:(Ljava/lang/String;Ljava/lang/String;)V
        86: aload_0
        87: getfield      #43                 // Field hashCount:I
        90: iconst_1
        91: if_icmple     109
        94: aload_1
        95: ldc           #131                // String hashcount
        97: aload_0
        98: getfield      #43                 // Field hashCount:I
       101: invokestatic  #133                // Method java/lang/String.valueOf:(I)Ljava/lang/String;
       104: invokeinterface #122,  3          // InterfaceMethod org/jrivard/xmlchai/XmlElement.setAttribute:(Ljava/lang/String;Ljava/lang/String;)V
       109: aload_1
       110: areturn
      LineNumberTable:
        line 148: 0
        line 149: 11
        line 151: 49
        line 153: 59
        line 156: 71
        line 157: 86
        line 159: 94
        line 161: 109
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0     111     0  this   Lcom/novell/ldapchai/cr/HashSaltAnswer;
           11     100     1 answerElement   Lorg/jrivard/xmlchai/XmlElement;
      StackMapTable: number_of_entries = 2
        frame_type = 252 /* append */
          offset_delta = 71
          locals = [ class org/jrivard/xmlchai/XmlElement ]
        frame_type = 37 /* same */

  public boolean testAnswer(java.lang.String);
    descriptor: (Ljava/lang/String;)Z
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=2, locals=5, args_size=2
         0: aload_1
         1: ifnonnull     6
         4: iconst_0
         5: ireturn
         6: aload_0
         7: getfield      #47                 // Field caseInsensitive:Z
        10: ifeq          20
        13: aload_1
        14: invokevirtual #67                 // Method java/lang/String.toLowerCase:()Ljava/lang/String;
        17: goto          21
        20: aload_1
        21: astore_2
        22: new           #83                 // class java/lang/StringBuilder
        25: dup
        26: invokespecial #85                 // Method java/lang/StringBuilder."<init>":()V
        29: aload_0
        30: getfield      #40                 // Field salt:Ljava/lang/String;
        33: invokevirtual #86                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        36: aload_2
        37: invokevirtual #86                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        40: invokevirtual #90                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        43: astore_3
        44: aload_0
        45: aload_3
        46: invokevirtual #93                 // Method hashValue:(Ljava/lang/String;)Ljava/lang/String;
        49: astore        4
        51: aload_0
        52: getfield      #26                 // Field answerHash:Ljava/lang/String;
        55: aload         4
        57: invokevirtual #136                // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
        60: ireturn
      LineNumberTable:
        line 168: 0
        line 170: 4
        line 173: 6
        line 174: 22
        line 175: 44
        line 176: 51
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      61     0  this   Lcom/novell/ldapchai/cr/HashSaltAnswer;
            0      61     1 testResponse   Ljava/lang/String;
           22      39     2 casedResponse   Ljava/lang/String;
           44      17     3 saltedTest   Ljava/lang/String;
           51      10     4 hashedTest   Ljava/lang/String;
      StackMapTable: number_of_entries = 3
        frame_type = 6 /* same */
        frame_type = 13 /* same */
        frame_type = 64 /* same_locals_1_stack_item */
          stack = [ class java/lang/String ]

  protected java.lang.String hashValue(java.lang.String);
    descriptor: (Ljava/lang/String;)Ljava/lang/String;
    flags: (0x0004) ACC_PROTECTED
    Code:
      stack=4, locals=2, args_size=2
         0: aload_1
         1: aload_0
         2: getfield      #43                 // Field hashCount:I
         5: aload_0
         6: getfield      #36                 // Field formatType:Lcom/novell/ldapchai/cr/Answer$FormatType;
         9: aload_0
        10: getfield      #32                 // Field version:Lcom/novell/ldapchai/cr/HashSaltAnswer$VERSION;
        13: invokestatic  #140                // Method doHash:(Ljava/lang/String;ILcom/novell/ldapchai/cr/Answer$FormatType;Lcom/novell/ldapchai/cr/HashSaltAnswer$VERSION;)Ljava/lang/String;
        16: areturn
      LineNumberTable:
        line 181: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      17     0  this   Lcom/novell/ldapchai/cr/HashSaltAnswer;
            0      17     1 input   Ljava/lang/String;

  static java.lang.String doHash(java.lang.String, int, com.novell.ldapchai.cr.Answer$FormatType, com.novell.ldapchai.cr.HashSaltAnswer$VERSION) throws java.lang.IllegalStateException;
    descriptor: (Ljava/lang/String;ILcom/novell/ldapchai/cr/Answer$FormatType;Lcom/novell/ldapchai/cr/HashSaltAnswer$VERSION;)Ljava/lang/String;
    flags: (0x0008) ACC_STATIC
    Code:
      stack=4, locals=8, args_size=4
         0: aload_2
         1: invokestatic  #20                 // Method com/novell/ldapchai/cr/HashSaltAnswer$HashType.forFormatType:(Lcom/novell/ldapchai/cr/Answer$FormatType;)Lcom/novell/ldapchai/cr/HashSaltAnswer$HashType;
         4: astore        4
         6: aload         4
         8: invokevirtual #144                // Method com/novell/ldapchai/cr/HashSaltAnswer$HashType.getHashAlgName:()Ljava/lang/String;
        11: invokestatic  #147                // Method java/security/MessageDigest.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;
        14: astore        5
        16: goto          65
        19: astore        6
        21: new           #155                // class java/lang/IllegalStateException
        24: dup
        25: new           #83                 // class java/lang/StringBuilder
        28: dup
        29: invokespecial #85                 // Method java/lang/StringBuilder."<init>":()V
        32: ldc           #157                // String unable to load
        34: invokevirtual #86                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        37: aload         4
        39: invokevirtual #144                // Method com/novell/ldapchai/cr/HashSaltAnswer$HashType.getHashAlgName:()Ljava/lang/String;
        42: invokevirtual #86                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        45: ldc           #159                // String  message digest algorithm:
        47: invokevirtual #86                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        50: aload         6
        52: invokevirtual #161                // Method java/security/NoSuchAlgorithmException.getMessage:()Ljava/lang/String;
        55: invokevirtual #86                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        58: invokevirtual #90                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        61: invokespecial #164                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
        64: athrow
        65: aload_0
        66: getstatic     #165                // Field com/novell/ldapchai/cr/ChaiCrFactory.DEFAULT_CHARSET:Ljava/nio/charset/Charset;
        69: invokevirtual #171                // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B
        72: astore        6
        74: aload_3
        75: invokevirtual #175                // Method com/novell/ldapchai/cr/HashSaltAnswer$VERSION.ordinal:()I
        78: lookupswitch  { // 2
                       0: 104
                       1: 123
                 default: 157
            }
       104: aload         5
       106: aload         6
       108: invokevirtual #178                // Method java/security/MessageDigest.digest:([B)[B
       111: astore        6
       113: aload         6
       115: iconst_0
       116: anewarray     #182                // class com/novell/ldapchai/util/internal/StringHelper$Base64Options
       119: invokestatic  #184                // Method com/novell/ldapchai/util/internal/StringHelper.base64Encode:([B[Lcom/novell/ldapchai/util/internal/StringHelper$Base64Options;)Ljava/lang/String;
       122: areturn
       123: iconst_0
       124: istore        7
       126: iload         7
       128: iload_1
       129: if_icmpge     147
       132: aload         5
       134: aload         6
       136: invokevirtual #178                // Method java/security/MessageDigest.digest:([B)[B
       139: astore        6
       141: iinc          7, 1
       144: goto          126
       147: aload         6
       149: iconst_0
       150: anewarray     #182                // class com/novell/ldapchai/util/internal/StringHelper$Base64Options
       153: invokestatic  #184                // Method com/novell/ldapchai/util/internal/StringHelper.base64Encode:([B[Lcom/novell/ldapchai/util/internal/StringHelper$Base64Options;)Ljava/lang/String;
       156: areturn
       157: new           #155                // class java/lang/IllegalStateException
       160: dup
       161: ldc           #188                // String unexpected version enum in hash method
       163: invokespecial #164                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
       166: athrow
      Exception table:
         from    to  target type
             6    16    19   Class java/security/NoSuchAlgorithmException
      LineNumberTable:
        line 192: 0
        line 196: 6
        line 201: 16
        line 198: 19
        line 200: 21
        line 204: 65
        line 205: 74
        line 208: 104
        line 209: 113
        line 212: 123
        line 214: 132
        line 212: 141
        line 216: 147
        line 219: 157
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           16       3     5    md   Ljava/security/MessageDigest;
           21      44     6     e   Ljava/security/NoSuchAlgorithmException;
          126      21     7     i   I
            0     167     0 input   Ljava/lang/String;
            0     167     1 hashCount   I
            0     167     2 formatType   Lcom/novell/ldapchai/cr/Answer$FormatType;
            0     167     3 version   Lcom/novell/ldapchai/cr/HashSaltAnswer$VERSION;
            6     161     4 hashType   Lcom/novell/ldapchai/cr/HashSaltAnswer$HashType;
           65     102     5    md   Ljava/security/MessageDigest;
           74      93     6 hashedBytes   [B
      StackMapTable: number_of_entries = 7
        frame_type = 255 /* full_frame */
          offset_delta = 19
          locals = [ class java/lang/String, int, class com/novell/ldapchai/cr/Answer$FormatType, class com/novell/ldapchai/cr/HashSaltAnswer$VERSION, class com/novell/ldapchai/cr/HashSaltAnswer$HashType ]
          stack = [ class java/security/NoSuchAlgorithmException ]
        frame_type = 252 /* append */
          offset_delta = 45
          locals = [ class java/security/MessageDigest ]
        frame_type = 252 /* append */
          offset_delta = 38
          locals = [ class "[B" ]
        frame_type = 18 /* same */
        frame_type = 252 /* append */
          offset_delta = 2
          locals = [ int ]
        frame_type = 250 /* chop */
          offset_delta = 20
        frame_type = 9 /* same */
    Exceptions:
      throws java.lang.IllegalStateException

  private static java.lang.String generateSalt(int);
    descriptor: (I)Ljava/lang/String;
    flags: (0x000a) ACC_PRIVATE, ACC_STATIC
    Code:
      stack=4, locals=4, args_size=1
         0: new           #190                // class java/security/SecureRandom
         3: dup
         4: invokespecial #192                // Method java/security/SecureRandom."<init>":()V
         7: astore_1
         8: new           #83                 // class java/lang/StringBuilder
        11: dup
        12: iload_0
        13: invokespecial #193                // Method java/lang/StringBuilder."<init>":(I)V
        16: astore_2
        17: iconst_0
        18: istore_3
        19: iload_3
        20: iload_0
        21: if_icmpge     49
        24: aload_2
        25: ldc           #196                // String ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789
        27: aload_1
        28: ldc           #196                // String ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789
        30: invokevirtual #198                // Method java/lang/String.length:()I
        33: invokevirtual #201                // Method java/security/SecureRandom.nextInt:(I)I
        36: invokevirtual #205                // Method java/lang/String.charAt:(I)C
        39: invokevirtual #209                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
        42: pop
        43: iinc          3, 1
        46: goto          19
        49: aload_2
        50: invokevirtual #90                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        53: areturn
      LineNumberTable:
        line 226: 0
        line 227: 8
        line 228: 17
        line 230: 24
        line 228: 43
        line 232: 49
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
           19      30     3     i   I
            0      54     0 length   I
            8      46     1 random   Ljava/security/SecureRandom;
           17      37     2    sb   Ljava/lang/StringBuilder;
      StackMapTable: number_of_entries = 2
        frame_type = 254 /* append */
          offset_delta = 19
          locals = [ class java/security/SecureRandom, class java/lang/StringBuilder, int ]
        frame_type = 250 /* chop */
          offset_delta = 29

  public com.novell.ldapchai.cr.bean.AnswerBean asAnswerBean();
    descriptor: ()Lcom/novell/ldapchai/cr/bean/AnswerBean;
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=8, locals=1, args_size=1
         0: new           #212                // class com/novell/ldapchai/cr/bean/AnswerBean
         3: dup
         4: aload_0
         5: getfield      #36                 // Field formatType:Lcom/novell/ldapchai/cr/Answer$FormatType;
         8: aconst_null
         9: new           #83                 // class java/lang/StringBuilder
        12: dup
        13: invokespecial #85                 // Method java/lang/StringBuilder."<init>":()V
        16: aload_0
        17: getfield      #32                 // Field version:Lcom/novell/ldapchai/cr/HashSaltAnswer$VERSION;
        20: invokevirtual #111                // Method com/novell/ldapchai/cr/HashSaltAnswer$VERSION.toString:()Ljava/lang/String;
        23: invokevirtual #86                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        26: ldc           #114                // String :
        28: invokevirtual #86                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        31: aload_0
        32: getfield      #26                 // Field answerHash:Ljava/lang/String;
        35: invokevirtual #86                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
        38: invokevirtual #90                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
        41: aload_0
        42: getfield      #40                 // Field salt:Ljava/lang/String;
        45: aload_0
        46: getfield      #43                 // Field hashCount:I
        49: aload_0
        50: getfield      #47                 // Field caseInsensitive:Z
        53: invokespecial #214                // Method com/novell/ldapchai/cr/bean/AnswerBean."<init>":(Lcom/novell/ldapchai/cr/Answer$FormatType;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IZ)V
        56: areturn
      LineNumberTable:
        line 238: 0
        line 241: 20
        line 238: 56
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      57     0  this   Lcom/novell/ldapchai/cr/HashSaltAnswer;

  static {};
    descriptor: ()V
    flags: (0x0008) ACC_STATIC
    Code:
      stack=1, locals=0, args_size=0
         0: getstatic     #217                // Field com/novell/ldapchai/cr/HashSaltAnswer$VERSION.B:Lcom/novell/ldapchai/cr/HashSaltAnswer$VERSION;
         3: putstatic     #58                 // Field DEFAULT_VERSION:Lcom/novell/ldapchai/cr/HashSaltAnswer$VERSION;
         6: return
      LineNumberTable:
        line 35: 0
}
SourceFile: "HashSaltAnswer.java"
InnerClasses:
  static final #268= #21 of #27;          // HashType=class com/novell/ldapchai/cr/HashSaltAnswer$HashType of class com/novell/ldapchai/cr/HashSaltAnswer
  public static final #269= #129 of #220; // FormatType=class com/novell/ldapchai/cr/Answer$FormatType of class com/novell/ldapchai/cr/Answer
  static final #270= #112 of #27;         // VERSION=class com/novell/ldapchai/cr/HashSaltAnswer$VERSION of class com/novell/ldapchai/cr/HashSaltAnswer
  public static final #271= #182 of #8;   // Base64Options=class com/novell/ldapchai/util/internal/StringHelper$Base64Options of class com/novell/ldapchai/util/internal/StringHelper
  static #274= #272 of #27;               // HashSaltAnswerFactory=class com/novell/ldapchai/cr/HashSaltAnswer$HashSaltAnswerFactory of class com/novell/ldapchai/cr/HashSaltAnswer
