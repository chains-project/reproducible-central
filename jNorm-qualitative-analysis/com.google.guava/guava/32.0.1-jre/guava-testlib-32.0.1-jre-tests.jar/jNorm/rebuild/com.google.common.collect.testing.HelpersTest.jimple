public class com.google.common.collect.testing.HelpersTest extends junit.framework.TestCase
{
public void <init>()
{
com.google.common.collect.testing.HelpersTest v0;
v0 := @this: com.google.common.collect.testing.HelpersTest;
specialinvoke v0.<junit.framework.TestCase: void <init>()>();
return;
}
public void testNullsBeforeB()
{
com.google.common.collect.testing.Helpers$NullsBeforeB v1;
java.lang.String[] v2;
com.google.common.collect.testing.HelpersTest v0;
v0 := @this: com.google.common.collect.testing.HelpersTest;
v1 = <com.google.common.collect.testing.Helpers$NullsBeforeB: com.google.common.collect.testing.Helpers$NullsBeforeB INSTANCE>;
v2 = newarray (java.lang.String)[5];
v2[0] = "a";
v2[1] = "azzzzzz";
v2[2] = null;
v2[3] = "b";
v2[4] = "c";
staticinvoke <com.google.common.collect.testing.Helpers: void testComparator(java.util.Comparator,java.lang.Object[])>(v1, v2);
return;
}
public void testIsEmpty_iterable()
{
java.lang.Error v3;
com.google.common.collect.testing.HelpersTest$1 v2;
com.google.common.collect.testing.HelpersTest v0;
java.util.ArrayList v1;
v0 := @this: com.google.common.collect.testing.HelpersTest;
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
staticinvoke <com.google.common.collect.testing.Helpers: void assertEmpty(java.lang.Iterable)>(v1);
v2 = new com.google.common.collect.testing.HelpersTest$1;
specialinvoke v2.<com.google.common.collect.testing.HelpersTest$1: void <init>(com.google.common.collect.testing.HelpersTest)>(v0);
staticinvoke <com.google.common.collect.testing.Helpers: void assertEmpty(java.lang.Iterable)>(v2);
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>("a");
staticinvoke <com.google.common.collect.testing.Helpers: void assertEmpty(java.lang.Iterable)>(v1);
v3 = new java.lang.Error;
specialinvoke v3.<java.lang.Error: void <init>()>();
throw v3;
}
public void testIsEmpty_map()
{
java.lang.Error v2;
java.util.HashMap v1;
com.google.common.collect.testing.HelpersTest v0;
v0 := @this: com.google.common.collect.testing.HelpersTest;
v1 = new java.util.HashMap;
specialinvoke v1.<java.util.HashMap: void <init>()>();
staticinvoke <com.google.common.collect.testing.Helpers: void assertEmpty(java.util.Map)>(v1);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("a", "b");
staticinvoke <com.google.common.collect.testing.Helpers: void assertEmpty(java.util.Map)>(v1);
v2 = new java.lang.Error;
specialinvoke v2.<java.lang.Error: void <init>()>();
throw v2;
}
public void testAssertEqualInOrder()
{
java.util.List v2, v4;
java.lang.Error v5;
java.lang.String[] v1, v3;
com.google.common.collect.testing.HelpersTest v0;
v0 := @this: com.google.common.collect.testing.HelpersTest;
v1 = newarray (java.lang.String)[3];
v1[0] = "a";
v1[1] = "b";
v1[2] = "c";
v2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
staticinvoke <com.google.common.collect.testing.Helpers: void assertEqualInOrder(java.lang.Iterable,java.lang.Iterable)>(v2, v2);
v3 = newarray (java.lang.String)[2];
v3[0] = "a";
v3[1] = "b";
v4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v3);
staticinvoke <com.google.common.collect.testing.Helpers: void assertEqualInOrder(java.lang.Iterable,java.lang.Iterable)>(v2, v4);
v5 = new java.lang.Error;
specialinvoke v5.<java.lang.Error: void <init>()>();
throw v5;
}
public void testAssertContentsInOrder()
{
java.util.List v2;
java.lang.Object[] v3, v4;
java.lang.Error v5;
java.lang.String[] v1;
com.google.common.collect.testing.HelpersTest v0;
v0 := @this: com.google.common.collect.testing.HelpersTest;
v1 = newarray (java.lang.String)[3];
v1[0] = "a";
v1[1] = "b";
v1[2] = "c";
v2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
v3 = newarray (java.lang.Object)[3];
v3[0] = "a";
v3[1] = "b";
v3[2] = "c";
staticinvoke <com.google.common.collect.testing.Helpers: void assertContentsInOrder(java.lang.Iterable,java.lang.Object[])>(v2, v3);
v4 = newarray (java.lang.Object)[2];
v4[0] = "a";
v4[1] = "b";
staticinvoke <com.google.common.collect.testing.Helpers: void assertContentsInOrder(java.lang.Iterable,java.lang.Object[])>(v2, v4);
v5 = new java.lang.Error;
specialinvoke v5.<java.lang.Error: void <init>()>();
throw v5;
}
public void testAssertContains()
{
java.util.List v2;
java.lang.Error v3;
java.lang.String[] v1;
com.google.common.collect.testing.HelpersTest v0;
v0 := @this: com.google.common.collect.testing.HelpersTest;
v1 = newarray (java.lang.String)[2];
v1[0] = "a";
v1[1] = "b";
v2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
staticinvoke <com.google.common.collect.testing.Helpers: void assertContains(java.lang.Iterable,java.lang.Object)>(v2, "a");
staticinvoke <com.google.common.collect.testing.Helpers: void assertContains(java.lang.Iterable,java.lang.Object)>(v2, "b");
staticinvoke <com.google.common.collect.testing.Helpers: void assertContains(java.lang.Iterable,java.lang.Object)>(v2, "c");
v3 = new java.lang.Error;
specialinvoke v3.<java.lang.Error: void <init>()>();
throw v3;
}
public void testAssertContainsAllOf()
{
java.lang.Object[] v3, v4, v5, v6, v7;
java.lang.Error v8;
java.lang.String[] v1;
java.util.List v2;
com.google.common.collect.testing.HelpersTest v0;
v0 := @this: com.google.common.collect.testing.HelpersTest;
v1 = newarray (java.lang.String)[4];
v1[0] = "a";
v1[1] = "a";
v1[2] = "b";
v1[3] = "c";
v2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
v3 = newarray (java.lang.Object)[1];
v3[0] = "a";
staticinvoke <com.google.common.collect.testing.Helpers: void assertContainsAllOf(java.lang.Iterable,java.lang.Object[])>(v2, v3);
v4 = newarray (java.lang.Object)[2];
v4[0] = "a";
v4[1] = "a";
staticinvoke <com.google.common.collect.testing.Helpers: void assertContainsAllOf(java.lang.Iterable,java.lang.Object[])>(v2, v4);
v5 = newarray (java.lang.Object)[3];
v5[0] = "a";
v5[1] = "b";
v5[2] = "c";
staticinvoke <com.google.common.collect.testing.Helpers: void assertContainsAllOf(java.lang.Iterable,java.lang.Object[])>(v2, v5);
v6 = newarray (java.lang.Object)[4];
v6[0] = "a";
v6[1] = "b";
v6[2] = "c";
v6[3] = "a";
staticinvoke <com.google.common.collect.testing.Helpers: void assertContainsAllOf(java.lang.Iterable,java.lang.Object[])>(v2, v6);
v7 = newarray (java.lang.Object)[1];
v7[0] = "d";
staticinvoke <com.google.common.collect.testing.Helpers: void assertContainsAllOf(java.lang.Iterable,java.lang.Object[])>(v2, v7);
v8 = new java.lang.Error;
specialinvoke v8.<java.lang.Error: void <init>()>();
throw v8;
}
}