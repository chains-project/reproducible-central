public class com.google.common.testing.EqualsTesterTest extends junit.framework.TestCase
{
private com.google.common.testing.EqualsTesterTest$ValidTestObject reference;
private com.google.common.testing.EqualsTester equalsTester;
private com.google.common.testing.EqualsTesterTest$ValidTestObject equalObject1;
private com.google.common.testing.EqualsTesterTest$ValidTestObject equalObject2;
private com.google.common.testing.EqualsTesterTest$ValidTestObject notEqualObject1;
public void <init>()
{
com.google.common.testing.EqualsTesterTest v0;
v0 := @this: com.google.common.testing.EqualsTesterTest;
specialinvoke v0.<junit.framework.TestCase: void <init>()>();
return;
}
public void setUp() throws java.lang.Exception
{
com.google.common.testing.EqualsTesterTest v0;
com.google.common.testing.EqualsTesterTest$ValidTestObject v1, v3, v4, v5;
com.google.common.testing.EqualsTester v2;
v0 := @this: com.google.common.testing.EqualsTesterTest;
specialinvoke v0.<junit.framework.TestCase: void setUp()>();
v1 = new com.google.common.testing.EqualsTesterTest$ValidTestObject;
specialinvoke v1.<com.google.common.testing.EqualsTesterTest$ValidTestObject: void <init>(int,int)>(1, 2);
v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTesterTest$ValidTestObject reference> = v1;
v2 = new com.google.common.testing.EqualsTester;
specialinvoke v2.<com.google.common.testing.EqualsTester: void <init>()>();
v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTester equalsTester> = v2;
v3 = new com.google.common.testing.EqualsTesterTest$ValidTestObject;
specialinvoke v3.<com.google.common.testing.EqualsTesterTest$ValidTestObject: void <init>(int,int)>(1, 2);
v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTesterTest$ValidTestObject equalObject1> = v3;
v4 = new com.google.common.testing.EqualsTesterTest$ValidTestObject;
specialinvoke v4.<com.google.common.testing.EqualsTesterTest$ValidTestObject: void <init>(int,int)>(1, 2);
v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTesterTest$ValidTestObject equalObject2> = v4;
v5 = new com.google.common.testing.EqualsTesterTest$ValidTestObject;
specialinvoke v5.<com.google.common.testing.EqualsTesterTest$ValidTestObject: void <init>(int,int)>(0, 2);
v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTesterTest$ValidTestObject notEqualObject1> = v5;
return;
}
public void testAddNullReference()
{
java.lang.Object[] v2;
com.google.common.testing.EqualsTesterTest v0;
java.lang.NullPointerException v3;
com.google.common.testing.EqualsTester v1;
v0 := @this: com.google.common.testing.EqualsTesterTest;
label1:
v1 = v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTester equalsTester>;
v2 = newarray (java.lang.Object)[1];
v2[0] = null;
virtualinvoke v1.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester addEqualityGroup(java.lang.Object[])>(v2);
staticinvoke <com.google.common.testing.EqualsTesterTest: void fail(java.lang.String)>("Should fail on null reference");
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testAddTwoEqualObjectsAtOnceWithNull()
{
java.lang.Object[] v2;
com.google.common.testing.EqualsTesterTest v0;
com.google.common.testing.EqualsTesterTest$ValidTestObject v3, v4;
java.lang.NullPointerException v5;
com.google.common.testing.EqualsTester v1;
v0 := @this: com.google.common.testing.EqualsTesterTest;
label1:
v1 = v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTester equalsTester>;
v2 = newarray (java.lang.Object)[3];
v3 = v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTesterTest$ValidTestObject reference>;
v2[0] = v3;
v4 = v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTesterTest$ValidTestObject equalObject1>;
v2[1] = v4;
v2[2] = null;
virtualinvoke v1.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester addEqualityGroup(java.lang.Object[])>(v2);
staticinvoke <com.google.common.testing.EqualsTesterTest: void fail(java.lang.String)>("Should fail on null equal object");
label2:
goto label4;
label3:
v5 := @caughtexception;
label4:
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testAddNullEqualObject()
{
java.lang.Object[] v2, v4;
com.google.common.testing.EqualsTesterTest v0;
com.google.common.testing.EqualsTesterTest$ValidTestObject v3;
java.lang.NullPointerException v5;
com.google.common.testing.EqualsTester v1;
v0 := @this: com.google.common.testing.EqualsTesterTest;
label1:
v1 = v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTester equalsTester>;
v2 = newarray (java.lang.Object)[2];
v3 = v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTesterTest$ValidTestObject reference>;
v2[0] = v3;
v4 = (java.lang.Object[]) null;
v2[1] = v4;
virtualinvoke v1.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester addEqualityGroup(java.lang.Object[])>(v2);
staticinvoke <com.google.common.testing.EqualsTesterTest: void fail(java.lang.String)>("Should fail on null equal object");
label2:
goto label4;
label3:
v5 := @caughtexception;
label4:
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testAddEqualObjectWithOArgConstructor()
{
java.lang.Throwable v6;
java.lang.Object[] v2;
com.google.common.testing.EqualsTesterTest$ValidTestObject v3, v4, v7, v8;
com.google.common.testing.EqualsTester v1, v5;
com.google.common.testing.EqualsTesterTest v0;
java.lang.String v9;
v0 := @this: com.google.common.testing.EqualsTesterTest;
v1 = v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTester equalsTester>;
v2 = newarray (java.lang.Object)[2];
v3 = v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTesterTest$ValidTestObject equalObject1>;
v2[0] = v3;
v4 = v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTesterTest$ValidTestObject notEqualObject1>;
v2[1] = v4;
virtualinvoke v1.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester addEqualityGroup(java.lang.Object[])>(v2);
label1:
v5 = v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTester equalsTester>;
virtualinvoke v5.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester testEquals()>();
label2:
goto label4;
label3:
v6 := @caughtexception;
v7 = v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTesterTest$ValidTestObject equalObject1>;
v8 = v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTesterTest$ValidTestObject notEqualObject1>;
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (com.google.common.testing.EqualsTesterTest$ValidTestObject,com.google.common.testing.EqualsTesterTest$ValidTestObject)>(v7, v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 [group 1, item 1] must be Object#equals to \u0001 [group 1, item 2]");
staticinvoke <com.google.common.testing.EqualsTesterTest: void assertErrorMessage(java.lang.Throwable,java.lang.String)>(v6, v9);
return;
label4:
staticinvoke <com.google.common.testing.EqualsTesterTest: void fail(java.lang.String)>("Should get not equal to equal object error");
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testTestEqualsEmptyLists()
{
java.lang.Object[] v2;
com.google.common.testing.EqualsTesterTest v0;
com.google.common.testing.EqualsTesterTest$ValidTestObject v3;
com.google.common.testing.EqualsTester v1, v4;
v0 := @this: com.google.common.testing.EqualsTesterTest;
v1 = v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTester equalsTester>;
v2 = newarray (java.lang.Object)[1];
v3 = v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTesterTest$ValidTestObject reference>;
v2[0] = v3;
virtualinvoke v1.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester addEqualityGroup(java.lang.Object[])>(v2);
v4 = v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTester equalsTester>;
virtualinvoke v4.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester testEquals()>();
return;
}
public void testTestEqualsEqualsObjects()
{
java.lang.Object[] v2;
com.google.common.testing.EqualsTesterTest v0;
com.google.common.testing.EqualsTesterTest$ValidTestObject v3, v4, v5;
com.google.common.testing.EqualsTester v1, v6;
v0 := @this: com.google.common.testing.EqualsTesterTest;
v1 = v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTester equalsTester>;
v2 = newarray (java.lang.Object)[3];
v3 = v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTesterTest$ValidTestObject reference>;
v2[0] = v3;
v4 = v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTesterTest$ValidTestObject equalObject1>;
v2[1] = v4;
v5 = v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTesterTest$ValidTestObject equalObject2>;
v2[2] = v5;
virtualinvoke v1.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester addEqualityGroup(java.lang.Object[])>(v2);
v6 = v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTester equalsTester>;
virtualinvoke v6.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester testEquals()>();
return;
}
public void testNonReflexiveEquals()
{
java.lang.Throwable v5;
java.lang.Object[] v3;
com.google.common.testing.EqualsTesterTest v0;
java.lang.String v6;
com.google.common.testing.EqualsTesterTest$NonReflexiveObject v1;
com.google.common.testing.EqualsTester v2, v4;
v0 := @this: com.google.common.testing.EqualsTesterTest;
v1 = new com.google.common.testing.EqualsTesterTest$NonReflexiveObject;
specialinvoke v1.<com.google.common.testing.EqualsTesterTest$NonReflexiveObject: void <init>()>();
v2 = v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTester equalsTester>;
v3 = newarray (java.lang.Object)[1];
v3[0] = v1;
virtualinvoke v2.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester addEqualityGroup(java.lang.Object[])>(v3);
label1:
v4 = v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTester equalsTester>;
virtualinvoke v4.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester testEquals()>();
label2:
goto label4;
label3:
v5 := @caughtexception;
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (com.google.common.testing.EqualsTesterTest$NonReflexiveObject)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 must be Object#equals to itself");
staticinvoke <com.google.common.testing.EqualsTesterTest: void assertErrorMessage(java.lang.Throwable,java.lang.String)>(v5, v6);
return;
label4:
staticinvoke <com.google.common.testing.EqualsTesterTest: void fail(java.lang.String)>("Should get non-reflexive error");
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testInvalidEqualsNull()
{
java.lang.Throwable v5;
java.lang.Object[] v3;
com.google.common.testing.EqualsTesterTest v0;
com.google.common.testing.EqualsTesterTest$InvalidEqualsNullObject v1;
java.lang.String v6;
com.google.common.testing.EqualsTester v2, v4;
v0 := @this: com.google.common.testing.EqualsTesterTest;
v1 = new com.google.common.testing.EqualsTesterTest$InvalidEqualsNullObject;
specialinvoke v1.<com.google.common.testing.EqualsTesterTest$InvalidEqualsNullObject: void <init>()>();
v2 = v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTester equalsTester>;
v3 = newarray (java.lang.Object)[1];
v3[0] = v1;
virtualinvoke v2.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester addEqualityGroup(java.lang.Object[])>(v3);
label1:
v4 = v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTester equalsTester>;
virtualinvoke v4.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester testEquals()>();
label2:
goto label4;
label3:
v5 := @caughtexception;
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (com.google.common.testing.EqualsTesterTest$InvalidEqualsNullObject)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 must not be Object#equals to null");
staticinvoke <com.google.common.testing.EqualsTesterTest: void assertErrorMessage(java.lang.Throwable,java.lang.String)>(v5, v6);
return;
label4:
staticinvoke <com.google.common.testing.EqualsTesterTest: void fail(java.lang.String)>("Should get equal to null error");
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testInvalidEqualsIncompatibleClass()
{
java.lang.Throwable v5;
java.lang.Object[] v3;
com.google.common.testing.EqualsTesterTest v0;
java.lang.String v6;
com.google.common.testing.EqualsTesterTest$InvalidEqualsIncompatibleClassObject v1;
com.google.common.testing.EqualsTester v2, v4;
v0 := @this: com.google.common.testing.EqualsTesterTest;
v1 = new com.google.common.testing.EqualsTesterTest$InvalidEqualsIncompatibleClassObject;
specialinvoke v1.<com.google.common.testing.EqualsTesterTest$InvalidEqualsIncompatibleClassObject: void <init>()>();
v2 = v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTester equalsTester>;
v3 = newarray (java.lang.Object)[1];
v3[0] = v1;
virtualinvoke v2.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester addEqualityGroup(java.lang.Object[])>(v3);
label1:
v4 = v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTester equalsTester>;
virtualinvoke v4.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester testEquals()>();
label2:
goto label4;
label3:
v5 := @caughtexception;
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (com.google.common.testing.EqualsTesterTest$InvalidEqualsIncompatibleClassObject)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 must not be Object#equals to an arbitrary object of another class");
staticinvoke <com.google.common.testing.EqualsTesterTest: void assertErrorMessage(java.lang.Throwable,java.lang.String)>(v5, v6);
return;
label4:
staticinvoke <com.google.common.testing.EqualsTesterTest: void fail(java.lang.String)>("Should get equal to incompatible class error");
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testInvalidNotEqualsEqualObject()
{
java.lang.Throwable v6;
java.lang.Object[] v2;
com.google.common.testing.EqualsTesterTest$ValidTestObject v3, v4, v7, v9;
com.google.common.testing.EqualsTester v1, v5;
com.google.common.testing.EqualsTesterTest v0;
java.lang.String v10, v8;
v0 := @this: com.google.common.testing.EqualsTesterTest;
v1 = v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTester equalsTester>;
v2 = newarray (java.lang.Object)[2];
v3 = v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTesterTest$ValidTestObject reference>;
v2[0] = v3;
v4 = v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTesterTest$ValidTestObject notEqualObject1>;
v2[1] = v4;
virtualinvoke v1.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester addEqualityGroup(java.lang.Object[])>(v2);
label1:
v5 = v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTester equalsTester>;
virtualinvoke v5.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester testEquals()>();
label2:
goto label4;
label3:
v6 := @caughtexception;
v7 = v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTesterTest$ValidTestObject reference>;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (com.google.common.testing.EqualsTesterTest$ValidTestObject)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 [group 1, item 1]");
staticinvoke <com.google.common.testing.EqualsTesterTest: void assertErrorMessage(java.lang.Throwable,java.lang.String)>(v6, v8);
v9 = v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTesterTest$ValidTestObject notEqualObject1>;
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (com.google.common.testing.EqualsTesterTest$ValidTestObject)>(v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 [group 1, item 2]");
staticinvoke <com.google.common.testing.EqualsTesterTest: void assertErrorMessage(java.lang.Throwable,java.lang.String)>(v6, v10);
return;
label4:
staticinvoke <com.google.common.testing.EqualsTesterTest: void fail(java.lang.String)>("Should get not equal to equal object error");
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testInvalidHashCode()
{
java.lang.Throwable v6;
java.lang.Object[] v4;
com.google.common.testing.EqualsTesterTest$InvalidHashCodeObject v1, v2;
com.google.common.testing.EqualsTester v3, v5;
com.google.common.testing.EqualsTesterTest v0;
int v7, v8;
java.lang.String v9;
v0 := @this: com.google.common.testing.EqualsTesterTest;
v1 = new com.google.common.testing.EqualsTesterTest$InvalidHashCodeObject;
specialinvoke v1.<com.google.common.testing.EqualsTesterTest$InvalidHashCodeObject: void <init>(int,int)>(1, 2);
v2 = new com.google.common.testing.EqualsTesterTest$InvalidHashCodeObject;
specialinvoke v2.<com.google.common.testing.EqualsTesterTest$InvalidHashCodeObject: void <init>(int,int)>(1, 2);
v3 = v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTester equalsTester>;
v4 = newarray (java.lang.Object)[2];
v4[0] = v1;
v4[1] = v2;
virtualinvoke v3.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester addEqualityGroup(java.lang.Object[])>(v4);
label1:
v5 = v0.<com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTester equalsTester>;
virtualinvoke v5.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester testEquals()>();
label2:
goto label4;
label3:
v6 := @caughtexception;
v7 = virtualinvoke v1.<java.lang.Object: int hashCode()>();
v8 = virtualinvoke v2.<java.lang.Object: int hashCode()>();
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,com.google.common.testing.EqualsTesterTest$InvalidHashCodeObject,int,com.google.common.testing.EqualsTesterTest$InvalidHashCodeObject)>(v7, v1, v8, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("the Object#hashCode (\u0001) of \u0001 [group 1, item 1] must be equal to the Object#hashCode (\u0001) of \u0001");
staticinvoke <com.google.common.testing.EqualsTesterTest: void assertErrorMessage(java.lang.Throwable,java.lang.String)>(v6, v9);
return;
label4:
staticinvoke <com.google.common.testing.EqualsTesterTest: void fail(java.lang.String)>("Should get invalid hashCode error");
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testNullEqualityGroup()
{
java.lang.Object[] v2;
com.google.common.testing.EqualsTesterTest v0;
java.lang.NullPointerException v3;
com.google.common.testing.EqualsTester v1;
v0 := @this: com.google.common.testing.EqualsTesterTest;
v1 = new com.google.common.testing.EqualsTester;
specialinvoke v1.<com.google.common.testing.EqualsTester: void <init>()>();
label1:
v2 = (java.lang.Object[]) null;
virtualinvoke v1.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester addEqualityGroup(java.lang.Object[])>(v2);
staticinvoke <com.google.common.testing.EqualsTesterTest: void fail()>();
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testNullObjectInEqualityGroup()
{
java.lang.Object[] v2;
com.google.common.testing.EqualsTesterTest v0;
java.lang.Integer v3, v4;
java.lang.NullPointerException v5;
com.google.common.testing.EqualsTester v1;
v0 := @this: com.google.common.testing.EqualsTesterTest;
v1 = new com.google.common.testing.EqualsTester;
specialinvoke v1.<com.google.common.testing.EqualsTester: void <init>()>();
label1:
v2 = newarray (java.lang.Object)[3];
v3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
v2[0] = v3;
v2[1] = null;
v4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);
v2[2] = v4;
virtualinvoke v1.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester addEqualityGroup(java.lang.Object[])>(v2);
staticinvoke <com.google.common.testing.EqualsTesterTest: void fail()>();
label2:
goto label4;
label3:
v5 := @caughtexception;
staticinvoke <com.google.common.testing.EqualsTesterTest: void assertErrorMessage(java.lang.Throwable,java.lang.String)>(v5, "at index 1");
label4:
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testSymmetryBroken()
{
java.lang.Throwable v8;
java.lang.Object[] v2;
com.google.common.testing.EqualsTesterTest$NamedObject v3, v5, v6;
java.lang.String[] v4;
com.google.common.testing.EqualsTester v1, v7;
com.google.common.testing.EqualsTesterTest v0;
v0 := @this: com.google.common.testing.EqualsTesterTest;
v1 = new com.google.common.testing.EqualsTester;
specialinvoke v1.<com.google.common.testing.EqualsTester: void <init>()>();
v2 = newarray (java.lang.Object)[2];
v3 = staticinvoke <com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTesterTest$NamedObject named(java.lang.String)>("foo");
v4 = newarray (java.lang.String)[1];
v4[0] = "bar";
v5 = virtualinvoke v3.<com.google.common.testing.EqualsTesterTest$NamedObject: com.google.common.testing.EqualsTesterTest$NamedObject addPeers(java.lang.String[])>(v4);
v2[0] = v5;
v6 = staticinvoke <com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTesterTest$NamedObject named(java.lang.String)>("bar");
v2[1] = v6;
v7 = virtualinvoke v1.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester addEqualityGroup(java.lang.Object[])>(v2);
label1:
virtualinvoke v7.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester testEquals()>();
label2:
goto label4;
label3:
v8 := @caughtexception;
staticinvoke <com.google.common.testing.EqualsTesterTest: void assertErrorMessage(java.lang.Throwable,java.lang.String)>(v8, "bar [group 1, item 2] must be Object#equals to foo [group 1, item 1]");
return;
label4:
staticinvoke <com.google.common.testing.EqualsTesterTest: void fail(java.lang.String)>("should failed because symmetry is broken");
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testTransitivityBrokenInEqualityGroup()
{
java.lang.Throwable v13;
java.lang.Object[] v2;
com.google.common.testing.EqualsTesterTest$NamedObject v11, v3, v5, v6, v8, v9;
java.lang.String[] v10, v4, v7;
com.google.common.testing.EqualsTester v1, v12;
com.google.common.testing.EqualsTesterTest v0;
v0 := @this: com.google.common.testing.EqualsTesterTest;
v1 = new com.google.common.testing.EqualsTester;
specialinvoke v1.<com.google.common.testing.EqualsTester: void <init>()>();
v2 = newarray (java.lang.Object)[3];
v3 = staticinvoke <com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTesterTest$NamedObject named(java.lang.String)>("foo");
v4 = newarray (java.lang.String)[2];
v4[0] = "bar";
v4[1] = "baz";
v5 = virtualinvoke v3.<com.google.common.testing.EqualsTesterTest$NamedObject: com.google.common.testing.EqualsTesterTest$NamedObject addPeers(java.lang.String[])>(v4);
v2[0] = v5;
v6 = staticinvoke <com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTesterTest$NamedObject named(java.lang.String)>("bar");
v7 = newarray (java.lang.String)[1];
v7[0] = "foo";
v8 = virtualinvoke v6.<com.google.common.testing.EqualsTesterTest$NamedObject: com.google.common.testing.EqualsTesterTest$NamedObject addPeers(java.lang.String[])>(v7);
v2[1] = v8;
v9 = staticinvoke <com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTesterTest$NamedObject named(java.lang.String)>("baz");
v10 = newarray (java.lang.String)[1];
v10[0] = "foo";
v11 = virtualinvoke v9.<com.google.common.testing.EqualsTesterTest$NamedObject: com.google.common.testing.EqualsTesterTest$NamedObject addPeers(java.lang.String[])>(v10);
v2[2] = v11;
v12 = virtualinvoke v1.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester addEqualityGroup(java.lang.Object[])>(v2);
label1:
virtualinvoke v12.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester testEquals()>();
label2:
goto label4;
label3:
v13 := @caughtexception;
staticinvoke <com.google.common.testing.EqualsTesterTest: void assertErrorMessage(java.lang.Throwable,java.lang.String)>(v13, "bar [group 1, item 2] must be Object#equals to baz [group 1, item 3]");
return;
label4:
staticinvoke <com.google.common.testing.EqualsTesterTest: void fail(java.lang.String)>("should failed because transitivity is broken");
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testUnequalObjectsInEqualityGroup()
{
java.lang.Throwable v6;
java.lang.Object[] v2;
com.google.common.testing.EqualsTesterTest v0;
com.google.common.testing.EqualsTesterTest$NamedObject v3, v4;
com.google.common.testing.EqualsTester v1, v5;
v0 := @this: com.google.common.testing.EqualsTesterTest;
v1 = new com.google.common.testing.EqualsTester;
specialinvoke v1.<com.google.common.testing.EqualsTester: void <init>()>();
v2 = newarray (java.lang.Object)[2];
v3 = staticinvoke <com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTesterTest$NamedObject named(java.lang.String)>("foo");
v2[0] = v3;
v4 = staticinvoke <com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTesterTest$NamedObject named(java.lang.String)>("bar");
v2[1] = v4;
v5 = virtualinvoke v1.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester addEqualityGroup(java.lang.Object[])>(v2);
label1:
virtualinvoke v5.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester testEquals()>();
label2:
goto label4;
label3:
v6 := @caughtexception;
staticinvoke <com.google.common.testing.EqualsTesterTest: void assertErrorMessage(java.lang.Throwable,java.lang.String)>(v6, "foo [group 1, item 1] must be Object#equals to bar [group 1, item 2]");
return;
label4:
staticinvoke <com.google.common.testing.EqualsTesterTest: void fail(java.lang.String)>("should failed because of unequal objects in the same equality group");
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testTransitivityBrokenAcrossEqualityGroups()
{
java.lang.Throwable v18;
java.lang.Object[] v10, v2;
com.google.common.testing.EqualsTesterTest$NamedObject v11, v13, v14, v16, v3, v5, v6, v8;
java.lang.String[] v12, v15, v4, v7;
com.google.common.testing.EqualsTesterTest v0;
com.google.common.testing.EqualsTester v1, v17, v9;
v0 := @this: com.google.common.testing.EqualsTesterTest;
v1 = new com.google.common.testing.EqualsTester;
specialinvoke v1.<com.google.common.testing.EqualsTester: void <init>()>();
v2 = newarray (java.lang.Object)[2];
v3 = staticinvoke <com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTesterTest$NamedObject named(java.lang.String)>("foo");
v4 = newarray (java.lang.String)[1];
v4[0] = "bar";
v5 = virtualinvoke v3.<com.google.common.testing.EqualsTesterTest$NamedObject: com.google.common.testing.EqualsTesterTest$NamedObject addPeers(java.lang.String[])>(v4);
v2[0] = v5;
v6 = staticinvoke <com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTesterTest$NamedObject named(java.lang.String)>("bar");
v7 = newarray (java.lang.String)[2];
v7[0] = "foo";
v7[1] = "x";
v8 = virtualinvoke v6.<com.google.common.testing.EqualsTesterTest$NamedObject: com.google.common.testing.EqualsTesterTest$NamedObject addPeers(java.lang.String[])>(v7);
v2[1] = v8;
v9 = virtualinvoke v1.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester addEqualityGroup(java.lang.Object[])>(v2);
v10 = newarray (java.lang.Object)[2];
v11 = staticinvoke <com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTesterTest$NamedObject named(java.lang.String)>("baz");
v12 = newarray (java.lang.String)[1];
v12[0] = "x";
v13 = virtualinvoke v11.<com.google.common.testing.EqualsTesterTest$NamedObject: com.google.common.testing.EqualsTesterTest$NamedObject addPeers(java.lang.String[])>(v12);
v10[0] = v13;
v14 = staticinvoke <com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTesterTest$NamedObject named(java.lang.String)>("x");
v15 = newarray (java.lang.String)[2];
v15[0] = "baz";
v15[1] = "bar";
v16 = virtualinvoke v14.<com.google.common.testing.EqualsTesterTest$NamedObject: com.google.common.testing.EqualsTesterTest$NamedObject addPeers(java.lang.String[])>(v15);
v10[1] = v16;
v17 = virtualinvoke v9.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester addEqualityGroup(java.lang.Object[])>(v10);
label1:
virtualinvoke v17.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester testEquals()>();
label2:
goto label4;
label3:
v18 := @caughtexception;
staticinvoke <com.google.common.testing.EqualsTesterTest: void assertErrorMessage(java.lang.Throwable,java.lang.String)>(v18, "bar [group 1, item 2] must not be Object#equals to x [group 2, item 2]");
return;
label4:
staticinvoke <com.google.common.testing.EqualsTesterTest: void fail(java.lang.String)>("should failed because transitivity is broken");
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testEqualityGroups()
{
java.lang.Object[] v10, v2;
com.google.common.testing.EqualsTesterTest$NamedObject v11, v12, v3, v5, v6, v8;
java.lang.String[] v4, v7;
com.google.common.testing.EqualsTester v1, v13, v9;
com.google.common.testing.EqualsTesterTest v0;
v0 := @this: com.google.common.testing.EqualsTesterTest;
v1 = new com.google.common.testing.EqualsTester;
specialinvoke v1.<com.google.common.testing.EqualsTester: void <init>()>();
v2 = newarray (java.lang.Object)[2];
v3 = staticinvoke <com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTesterTest$NamedObject named(java.lang.String)>("foo");
v4 = newarray (java.lang.String)[1];
v4[0] = "bar";
v5 = virtualinvoke v3.<com.google.common.testing.EqualsTesterTest$NamedObject: com.google.common.testing.EqualsTesterTest$NamedObject addPeers(java.lang.String[])>(v4);
v2[0] = v5;
v6 = staticinvoke <com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTesterTest$NamedObject named(java.lang.String)>("bar");
v7 = newarray (java.lang.String)[1];
v7[0] = "foo";
v8 = virtualinvoke v6.<com.google.common.testing.EqualsTesterTest$NamedObject: com.google.common.testing.EqualsTesterTest$NamedObject addPeers(java.lang.String[])>(v7);
v2[1] = v8;
v9 = virtualinvoke v1.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester addEqualityGroup(java.lang.Object[])>(v2);
v10 = newarray (java.lang.Object)[2];
v11 = staticinvoke <com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTesterTest$NamedObject named(java.lang.String)>("baz");
v10[0] = v11;
v12 = staticinvoke <com.google.common.testing.EqualsTesterTest: com.google.common.testing.EqualsTesterTest$NamedObject named(java.lang.String)>("baz");
v10[1] = v12;
v13 = virtualinvoke v9.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester addEqualityGroup(java.lang.Object[])>(v10);
virtualinvoke v13.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester testEquals()>();
return;
}
public void testEqualityBasedOnToString()
{
java.lang.Throwable v5;
java.lang.Object[] v2;
com.google.common.testing.EqualsTesterTest$EqualsBasedOnToString v3;
com.google.common.testing.EqualsTester v1, v4;
com.google.common.testing.EqualsTesterTest v0;
java.lang.String v6;
boolean v7;
v0 := @this: com.google.common.testing.EqualsTesterTest;
label1:
v1 = new com.google.common.testing.EqualsTester;
specialinvoke v1.<com.google.common.testing.EqualsTester: void <init>()>();
v2 = newarray (java.lang.Object)[1];
v3 = new com.google.common.testing.EqualsTesterTest$EqualsBasedOnToString;
specialinvoke v3.<com.google.common.testing.EqualsTesterTest$EqualsBasedOnToString: void <init>(java.lang.String)>("foo");
v2[0] = v3;
v4 = virtualinvoke v1.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester addEqualityGroup(java.lang.Object[])>(v2);
virtualinvoke v4.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester testEquals()>();
staticinvoke <com.google.common.testing.EqualsTesterTest: void fail()>();
label2:
goto label4;
label3:
v5 := @caughtexception;
v6 = virtualinvoke v5.<junit.framework.AssertionFailedError: java.lang.String getMessage()>();
v7 = virtualinvoke v6.<java.lang.String: boolean contains(java.lang.CharSequence)>("toString representation");
staticinvoke <com.google.common.testing.EqualsTesterTest: void assertTrue(boolean)>(v7);
label4:
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
private static void assertErrorMessage(java.lang.Throwable, java.lang.String)
{
java.lang.Throwable v0;
java.lang.String v1, v2, v4, v5;
boolean v3;
v0 := @parameter0: java.lang.Throwable;
v1 := @parameter1: java.lang.String;
v2 = virtualinvoke v0.<java.lang.Throwable: java.lang.String getMessage()>();
v3 = virtualinvoke v2.<java.lang.String: boolean contains(java.lang.CharSequence)>(v1);
if v3 != 0 goto label1;
v4 = virtualinvoke v0.<java.lang.Throwable: java.lang.String getMessage()>();
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v4, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("expected <\u0001> to contain <\u0001>");
staticinvoke <com.google.common.testing.EqualsTesterTest: void fail(java.lang.String)>(v5);
label1:
return;
}
private static com.google.common.testing.EqualsTesterTest$NamedObject named(java.lang.String)
{
java.lang.String v0;
com.google.common.testing.EqualsTesterTest$NamedObject v1;
v0 := @parameter0: java.lang.String;
v1 = new com.google.common.testing.EqualsTesterTest$NamedObject;
specialinvoke v1.<com.google.common.testing.EqualsTesterTest$NamedObject: void <init>(java.lang.String)>(v0);
return v1;
}
}