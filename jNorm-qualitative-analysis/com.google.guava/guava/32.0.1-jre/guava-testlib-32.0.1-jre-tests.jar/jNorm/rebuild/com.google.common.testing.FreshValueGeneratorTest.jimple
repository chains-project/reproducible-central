public class com.google.common.testing.FreshValueGeneratorTest extends junit.framework.TestCase
{
public void <init>()
{
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
specialinvoke v0.<junit.framework.TestCase: void <init>()>();
return;
}
public void testFreshInstance()
{
java.lang.Class[] v1;
java.lang.Class v2, v3, v4, v5, v6, v7;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = newarray (java.lang.Class)[71];
v1[0] = class "Ljava/lang/String;";
v1[1] = class "Ljava/lang/CharSequence;";
v1[2] = class "Ljava/lang/Appendable;";
v1[3] = class "Ljava/lang/StringBuffer;";
v1[4] = class "Ljava/lang/StringBuilder;";
v1[5] = class "Ljava/util/regex/Pattern;";
v1[6] = class "Ljava/util/regex/MatchResult;";
v1[7] = class "Ljava/lang/Number;";
v2 = <java.lang.Integer: java.lang.Class TYPE>;
v1[8] = v2;
v1[9] = class "Ljava/lang/Integer;";
v3 = <java.lang.Long: java.lang.Class TYPE>;
v1[10] = v3;
v1[11] = class "Ljava/lang/Long;";
v4 = <java.lang.Short: java.lang.Class TYPE>;
v1[12] = v4;
v1[13] = class "Ljava/lang/Short;";
v5 = <java.lang.Byte: java.lang.Class TYPE>;
v1[14] = v5;
v1[15] = class "Ljava/lang/Byte;";
v6 = <java.lang.Boolean: java.lang.Class TYPE>;
v1[16] = v6;
v1[17] = class "Ljava/lang/Boolean;";
v7 = <java.lang.Character: java.lang.Class TYPE>;
v1[18] = v7;
v1[19] = class "Ljava/lang/Character;";
v1[20] = class "[I";
v1[21] = class "[Ljava/lang/Object;";
v1[22] = class "Lcom/google/common/primitives/UnsignedInteger;";
v1[23] = class "Lcom/google/common/primitives/UnsignedLong;";
v1[24] = class "Ljava/math/BigInteger;";
v1[25] = class "Ljava/math/BigDecimal;";
v1[26] = class "Ljava/lang/Throwable;";
v1[27] = class "Ljava/lang/Error;";
v1[28] = class "Ljava/lang/Exception;";
v1[29] = class "Ljava/lang/RuntimeException;";
v1[30] = class "Ljava/nio/charset/Charset;";
v1[31] = class "Ljava/util/Locale;";
v1[32] = class "Ljava/util/Currency;";
v1[33] = class "Ljava/util/List;";
v1[34] = class "Ljava/util/Map$Entry;";
v1[35] = class "Ljava/lang/Object;";
v1[36] = class "Lcom/google/common/base/Equivalence;";
v1[37] = class "Lcom/google/common/base/Predicate;";
v1[38] = class "Lcom/google/common/base/Function;";
v1[39] = class "Ljava/lang/Comparable;";
v1[40] = class "Ljava/util/Comparator;";
v1[41] = class "Lcom/google/common/collect/Ordering;";
v1[42] = class "Ljava/lang/Class;";
v1[43] = class "Ljava/lang/reflect/Type;";
v1[44] = class "Lcom/google/common/reflect/TypeToken;";
v1[45] = class "Ljava/util/concurrent/TimeUnit;";
v1[46] = class "Lcom/google/common/base/Ticker;";
v1[47] = class "Lcom/google/common/base/Joiner;";
v1[48] = class "Lcom/google/common/base/Splitter;";
v1[49] = class "Lcom/google/common/base/CharMatcher;";
v1[50] = class "Ljava/io/InputStream;";
v1[51] = class "Ljava/io/ByteArrayInputStream;";
v1[52] = class "Ljava/io/Reader;";
v1[53] = class "Ljava/lang/Readable;";
v1[54] = class "Ljava/io/StringReader;";
v1[55] = class "Ljava/io/OutputStream;";
v1[56] = class "Ljava/io/ByteArrayOutputStream;";
v1[57] = class "Ljava/io/Writer;";
v1[58] = class "Ljava/io/StringWriter;";
v1[59] = class "Ljava/io/File;";
v1[60] = class "Ljava/nio/Buffer;";
v1[61] = class "Ljava/nio/ByteBuffer;";
v1[62] = class "Ljava/nio/CharBuffer;";
v1[63] = class "Ljava/nio/ShortBuffer;";
v1[64] = class "Ljava/nio/IntBuffer;";
v1[65] = class "Ljava/nio/LongBuffer;";
v1[66] = class "Ljava/nio/FloatBuffer;";
v1[67] = class "Ljava/nio/DoubleBuffer;";
v1[68] = class "[Ljava/lang/String;";
v1[69] = class "[Ljava/lang/Object;";
v1[70] = class "[I";
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstances(java.lang.Class[])>(v1);
return;
}
public void testStringArray()
{
java.lang.Object v2, v3;
java.lang.String v4, v5;
com.google.common.testing.FreshValueGenerator v1;
com.google.common.testing.FreshValueGeneratorTest v0;
boolean v6;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGenerator;
specialinvoke v1.<com.google.common.testing.FreshValueGenerator: void <init>()>();
v2 = virtualinvoke v1.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(java.lang.Class)>(class "[Ljava/lang/String;");
v3 = virtualinvoke v1.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(java.lang.Class)>(class "[Ljava/lang/String;");
v4 = v2[0];
v5 = v3[0];
v6 = virtualinvoke v4.<java.lang.String: boolean equals(java.lang.Object)>(v5);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFalse(boolean)>(v6);
return;
}
public void testPrimitiveArray()
{
int v4, v5;
java.lang.Object v2, v3;
com.google.common.testing.FreshValueGenerator v1;
com.google.common.testing.FreshValueGeneratorTest v0;
boolean v6;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGenerator;
specialinvoke v1.<com.google.common.testing.FreshValueGenerator: void <init>()>();
v2 = virtualinvoke v1.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(java.lang.Class)>(class "[I");
v3 = virtualinvoke v1.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(java.lang.Class)>(class "[I");
v4 = v2[0];
v5 = v3[0];
if v4 == v5 goto label1;
v6 = 1;
goto label2;
label1:
v6 = 0;
label2:
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertTrue(boolean)>(v6);
return;
}
public void testRange()
{
com.google.common.testing.FreshValueGeneratorTest$1 v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$1;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$1: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testImmutableList()
{
com.google.common.testing.FreshValueGeneratorTest$2 v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$2;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$2: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testImmutableSet()
{
com.google.common.testing.FreshValueGeneratorTest v0;
com.google.common.testing.FreshValueGeneratorTest$3 v1;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$3;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$3: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testImmutableSortedSet()
{
com.google.common.testing.FreshValueGeneratorTest v0;
com.google.common.testing.FreshValueGeneratorTest$4 v1;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$4;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$4: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testImmutableMultiset()
{
com.google.common.testing.FreshValueGeneratorTest$5 v1;
com.google.common.testing.FreshValueGeneratorTest$6 v2;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$5;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$5: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
v2 = new com.google.common.testing.FreshValueGeneratorTest$6;
specialinvoke v2.<com.google.common.testing.FreshValueGeneratorTest$6: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertNotInstantiable(com.google.common.reflect.TypeToken)>(v2);
return;
}
public void testImmutableCollection()
{
com.google.common.testing.FreshValueGeneratorTest$7 v1;
com.google.common.testing.FreshValueGeneratorTest$8 v2;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$7;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$7: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
v2 = new com.google.common.testing.FreshValueGeneratorTest$8;
specialinvoke v2.<com.google.common.testing.FreshValueGeneratorTest$8: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertNotInstantiable(com.google.common.reflect.TypeToken)>(v2);
return;
}
public void testImmutableMap()
{
com.google.common.testing.FreshValueGeneratorTest$9 v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$9;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$9: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testImmutableSortedMap()
{
com.google.common.testing.FreshValueGeneratorTest$10 v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$10;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$10: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testImmutableMultimap()
{
com.google.common.testing.FreshValueGeneratorTest$12 v2;
com.google.common.testing.FreshValueGeneratorTest$11 v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$11;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$11: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
v2 = new com.google.common.testing.FreshValueGeneratorTest$12;
specialinvoke v2.<com.google.common.testing.FreshValueGeneratorTest$12: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertNotInstantiable(com.google.common.reflect.TypeToken)>(v2);
return;
}
public void testImmutableListMultimap()
{
com.google.common.testing.FreshValueGeneratorTest$13 v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$13;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$13: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testImmutableSetMultimap()
{
com.google.common.testing.FreshValueGeneratorTest$14 v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$14;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$14: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testImmutableBiMap()
{
com.google.common.testing.FreshValueGeneratorTest$15 v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$15;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$15: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testImmutableTable()
{
com.google.common.testing.FreshValueGeneratorTest v0;
com.google.common.testing.FreshValueGeneratorTest$16 v1;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$16;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$16: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testList()
{
com.google.common.testing.FreshValueGeneratorTest$18 v2;
com.google.common.testing.FreshValueGeneratorTest v0;
com.google.common.testing.FreshValueGeneratorTest$17 v1;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$17;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$17: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
v2 = new com.google.common.testing.FreshValueGeneratorTest$18;
specialinvoke v2.<com.google.common.testing.FreshValueGeneratorTest$18: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertNotInstantiable(com.google.common.reflect.TypeToken)>(v2);
return;
}
public void testArrayList()
{
com.google.common.testing.FreshValueGeneratorTest$19 v1;
com.google.common.testing.FreshValueGeneratorTest v0;
com.google.common.testing.FreshValueGeneratorTest$20 v2;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$19;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$19: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
v2 = new com.google.common.testing.FreshValueGeneratorTest$20;
specialinvoke v2.<com.google.common.testing.FreshValueGeneratorTest$20: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertNotInstantiable(com.google.common.reflect.TypeToken)>(v2);
return;
}
public void testLinkedList()
{
com.google.common.testing.FreshValueGeneratorTest$21 v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$21;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$21: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testSet()
{
com.google.common.testing.FreshValueGeneratorTest$23 v2;
com.google.common.testing.FreshValueGeneratorTest$22 v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$22;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$22: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
v2 = new com.google.common.testing.FreshValueGeneratorTest$23;
specialinvoke v2.<com.google.common.testing.FreshValueGeneratorTest$23: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertNotInstantiable(com.google.common.reflect.TypeToken)>(v2);
return;
}
public void testHashSet()
{
com.google.common.testing.FreshValueGeneratorTest$24 v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$24;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$24: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testLinkedHashSet()
{
com.google.common.testing.FreshValueGeneratorTest$25 v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$25;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$25: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testTreeSet()
{
com.google.common.testing.FreshValueGeneratorTest$26 v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$26;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$26: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testSortedSet()
{
com.google.common.testing.FreshValueGeneratorTest v0;
com.google.common.testing.FreshValueGeneratorTest$27 v1;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$27;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$27: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testNavigableSet()
{
com.google.common.testing.FreshValueGeneratorTest v0;
com.google.common.testing.FreshValueGeneratorTest$28 v1;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$28;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$28: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testMultiset()
{
com.google.common.testing.FreshValueGeneratorTest$29 v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$29;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$29: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testSortedMultiset()
{
com.google.common.testing.FreshValueGeneratorTest v0;
com.google.common.testing.FreshValueGeneratorTest$30 v1;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$30;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$30: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testHashMultiset()
{
com.google.common.testing.FreshValueGeneratorTest v0;
com.google.common.testing.FreshValueGeneratorTest$31 v1;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$31;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$31: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testLinkedHashMultiset()
{
com.google.common.testing.FreshValueGeneratorTest$32 v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$32;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$32: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testTreeMultiset()
{
com.google.common.testing.FreshValueGeneratorTest$33 v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$33;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$33: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testImmutableSortedMultiset()
{
com.google.common.testing.FreshValueGeneratorTest$34 v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$34;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$34: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testCollection()
{
com.google.common.testing.FreshValueGeneratorTest$35 v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$35;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$35: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testIterable()
{
com.google.common.testing.FreshValueGeneratorTest$36 v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$36;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$36: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testMap()
{
com.google.common.testing.FreshValueGeneratorTest$37 v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$37;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$37: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testHashMap()
{
com.google.common.testing.FreshValueGeneratorTest v0;
com.google.common.testing.FreshValueGeneratorTest$38 v1;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$38;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$38: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testLinkedHashMap()
{
com.google.common.testing.FreshValueGeneratorTest v0;
com.google.common.testing.FreshValueGeneratorTest$39 v1;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$39;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$39: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testTreeMap()
{
com.google.common.testing.FreshValueGeneratorTest$40 v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$40;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$40: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testSortedMap()
{
com.google.common.testing.FreshValueGeneratorTest v0;
com.google.common.testing.FreshValueGeneratorTest$41 v1;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$41;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$41: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testNavigableMap()
{
com.google.common.testing.FreshValueGeneratorTest v0;
com.google.common.testing.FreshValueGeneratorTest$42 v1;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$42;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$42: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testConcurrentMap()
{
com.google.common.testing.FreshValueGeneratorTest$43 v1;
com.google.common.testing.FreshValueGeneratorTest$44 v2;
com.google.common.testing.FreshValueGeneratorTest v0;
java.util.concurrent.ConcurrentMap v3;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$43;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$43: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
v2 = new com.google.common.testing.FreshValueGeneratorTest$44;
specialinvoke v2.<com.google.common.testing.FreshValueGeneratorTest$44: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
v3 = staticinvoke <com.google.common.collect.Maps: java.util.concurrent.ConcurrentMap newConcurrentMap()>();
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertCanGenerateOnly(com.google.common.reflect.TypeToken,java.lang.Object)>(v2, v3);
return;
}
public void testMultimap()
{
com.google.common.testing.FreshValueGeneratorTest$45 v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$45;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$45: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testHashMultimap()
{
com.google.common.testing.FreshValueGeneratorTest$46 v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$46;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$46: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testLinkedHashMultimap()
{
com.google.common.testing.FreshValueGeneratorTest$47 v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$47;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$47: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testListMultimap()
{
com.google.common.testing.FreshValueGeneratorTest$48 v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$48;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$48: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testArrayListMultimap()
{
com.google.common.testing.FreshValueGeneratorTest v0;
com.google.common.testing.FreshValueGeneratorTest$49 v1;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$49;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$49: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testSetMultimap()
{
com.google.common.testing.FreshValueGeneratorTest$50 v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$50;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$50: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testBiMap()
{
com.google.common.testing.FreshValueGeneratorTest$51 v1;
com.google.common.testing.FreshValueGeneratorTest v0;
com.google.common.testing.FreshValueGeneratorTest$52 v2;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$51;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$51: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
v2 = new com.google.common.testing.FreshValueGeneratorTest$52;
specialinvoke v2.<com.google.common.testing.FreshValueGeneratorTest$52: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertNotInstantiable(com.google.common.reflect.TypeToken)>(v2);
return;
}
public void testHashBiMap()
{
com.google.common.testing.FreshValueGeneratorTest v0;
com.google.common.testing.FreshValueGeneratorTest$53 v1;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$53;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$53: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testTable()
{
com.google.common.testing.FreshValueGeneratorTest$54 v1;
com.google.common.testing.FreshValueGeneratorTest$55 v2;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$54;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$54: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
v2 = new com.google.common.testing.FreshValueGeneratorTest$55;
specialinvoke v2.<com.google.common.testing.FreshValueGeneratorTest$55: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertNotInstantiable(com.google.common.reflect.TypeToken)>(v2);
return;
}
public void testHashBasedTable()
{
com.google.common.testing.FreshValueGeneratorTest$56 v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$56;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$56: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testRowSortedTable()
{
com.google.common.testing.FreshValueGeneratorTest$57 v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$57;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$57: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testTreeBasedTable()
{
com.google.common.testing.FreshValueGeneratorTest$58 v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$58;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$58: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testObject()
{
java.lang.Object v2, v4;
com.google.common.testing.FreshValueGenerator v1, v3;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGenerator;
specialinvoke v1.<com.google.common.testing.FreshValueGenerator: void <init>()>();
v2 = virtualinvoke v1.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(java.lang.Class)>(class "Ljava/lang/String;");
v3 = new com.google.common.testing.FreshValueGenerator;
specialinvoke v3.<com.google.common.testing.FreshValueGenerator: void <init>()>();
v4 = virtualinvoke v3.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(java.lang.Class)>(class "Ljava/lang/Object;");
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertEquals(java.lang.Object,java.lang.Object)>(v2, v4);
return;
}
public void testEnums()
{
com.google.common.testing.FreshValueGeneratorTest$61 v4;
com.google.common.testing.FreshValueGeneratorTest$60 v3;
com.google.common.testing.FreshValueGeneratorTest$59 v2;
com.google.common.testing.FreshValueGeneratorTest$OneConstantEnum v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertEqualInstance(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/testing/FreshValueGeneratorTest$EmptyEnum;", null);
v1 = <com.google.common.testing.FreshValueGeneratorTest$OneConstantEnum: com.google.common.testing.FreshValueGeneratorTest$OneConstantEnum CONSTANT1>;
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertEqualInstance(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/testing/FreshValueGeneratorTest$OneConstantEnum;", v1);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(java.lang.Class,int)>(class "Lcom/google/common/testing/FreshValueGeneratorTest$TwoConstantEnum;", 2);
v2 = new com.google.common.testing.FreshValueGeneratorTest$59;
specialinvoke v2.<com.google.common.testing.FreshValueGeneratorTest$59: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken,int)>(v2, 2);
v3 = new com.google.common.testing.FreshValueGeneratorTest$60;
specialinvoke v3.<com.google.common.testing.FreshValueGeneratorTest$60: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken,int)>(v3, 1);
v4 = new com.google.common.testing.FreshValueGeneratorTest$61;
specialinvoke v4.<com.google.common.testing.FreshValueGeneratorTest$61: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken,int)>(v4, 2);
return;
}
public void testGoogleOptional()
{
com.google.common.testing.FreshValueGeneratorTest$62 v3;
com.google.common.base.Optional v12, v2, v5, v8;
com.google.common.testing.FreshValueGeneratorTest$OneConstantEnum v11;
java.lang.Object v10, v14, v4, v7;
com.google.common.testing.FreshValueGenerator v1;
com.google.common.testing.FreshValueGeneratorTest$65 v13;
com.google.common.testing.FreshValueGeneratorTest v0;
com.google.common.testing.FreshValueGeneratorTest$63 v6;
com.google.common.testing.FreshValueGeneratorTest$64 v9;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGenerator;
specialinvoke v1.<com.google.common.testing.FreshValueGenerator: void <init>()>();
v2 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional absent()>();
v3 = new com.google.common.testing.FreshValueGeneratorTest$62;
specialinvoke v3.<com.google.common.testing.FreshValueGeneratorTest$62: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
v4 = virtualinvoke v1.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(com.google.common.reflect.TypeToken)>(v3);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertEquals(java.lang.Object,java.lang.Object)>(v2, v4);
v5 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional of(java.lang.Object)>("2");
v6 = new com.google.common.testing.FreshValueGeneratorTest$63;
specialinvoke v6.<com.google.common.testing.FreshValueGeneratorTest$63: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
v7 = virtualinvoke v1.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(com.google.common.reflect.TypeToken)>(v6);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertEquals(java.lang.Object,java.lang.Object)>(v5, v7);
v8 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional absent()>();
v9 = new com.google.common.testing.FreshValueGeneratorTest$64;
specialinvoke v9.<com.google.common.testing.FreshValueGeneratorTest$64: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
v10 = virtualinvoke v1.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(com.google.common.reflect.TypeToken)>(v9);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertEquals(java.lang.Object,java.lang.Object)>(v8, v10);
v11 = <com.google.common.testing.FreshValueGeneratorTest$OneConstantEnum: com.google.common.testing.FreshValueGeneratorTest$OneConstantEnum CONSTANT1>;
v12 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional of(java.lang.Object)>(v11);
v13 = new com.google.common.testing.FreshValueGeneratorTest$65;
specialinvoke v13.<com.google.common.testing.FreshValueGeneratorTest$65: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
v14 = virtualinvoke v1.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(com.google.common.reflect.TypeToken)>(v13);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertEquals(java.lang.Object,java.lang.Object)>(v12, v14);
return;
}
public void testJavaOptional()
{
com.google.common.testing.FreshValueGeneratorTest$69 v13;
java.util.Optional v12, v2, v5, v8;
com.google.common.testing.FreshValueGeneratorTest$67 v6;
com.google.common.testing.FreshValueGeneratorTest$OneConstantEnum v11;
java.lang.Object v10, v14, v4, v7;
com.google.common.testing.FreshValueGeneratorTest$68 v9;
com.google.common.testing.FreshValueGenerator v1;
com.google.common.testing.FreshValueGeneratorTest$66 v3;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGenerator;
specialinvoke v1.<com.google.common.testing.FreshValueGenerator: void <init>()>();
v2 = staticinvoke <java.util.Optional: java.util.Optional empty()>();
v3 = new com.google.common.testing.FreshValueGeneratorTest$66;
specialinvoke v3.<com.google.common.testing.FreshValueGeneratorTest$66: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
v4 = virtualinvoke v1.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(com.google.common.reflect.TypeToken)>(v3);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertEquals(java.lang.Object,java.lang.Object)>(v2, v4);
v5 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>("2");
v6 = new com.google.common.testing.FreshValueGeneratorTest$67;
specialinvoke v6.<com.google.common.testing.FreshValueGeneratorTest$67: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
v7 = virtualinvoke v1.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(com.google.common.reflect.TypeToken)>(v6);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertEquals(java.lang.Object,java.lang.Object)>(v5, v7);
v8 = staticinvoke <java.util.Optional: java.util.Optional empty()>();
v9 = new com.google.common.testing.FreshValueGeneratorTest$68;
specialinvoke v9.<com.google.common.testing.FreshValueGeneratorTest$68: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
v10 = virtualinvoke v1.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(com.google.common.reflect.TypeToken)>(v9);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertEquals(java.lang.Object,java.lang.Object)>(v8, v10);
v11 = <com.google.common.testing.FreshValueGeneratorTest$OneConstantEnum: com.google.common.testing.FreshValueGeneratorTest$OneConstantEnum CONSTANT1>;
v12 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>(v11);
v13 = new com.google.common.testing.FreshValueGeneratorTest$69;
specialinvoke v13.<com.google.common.testing.FreshValueGeneratorTest$69: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
v14 = virtualinvoke v1.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(com.google.common.reflect.TypeToken)>(v13);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertEquals(java.lang.Object,java.lang.Object)>(v12, v14);
return;
}
public void testOptionalInt()
{
com.google.common.testing.FreshValueGeneratorTest$70 v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$70;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$70: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testOptionalLong()
{
com.google.common.testing.FreshValueGeneratorTest$71 v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$71;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$71: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testOptionalDouble()
{
com.google.common.testing.FreshValueGeneratorTest$72 v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGeneratorTest$72;
specialinvoke v1.<com.google.common.testing.FreshValueGeneratorTest$72: void <init>(com.google.common.testing.FreshValueGeneratorTest)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken)>(v1);
return;
}
public void testAddSampleInstances_twoInstances()
{
com.google.common.collect.ImmutableList v2;
java.lang.Object v3, v4, v5;
com.google.common.testing.FreshValueGenerator v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGenerator;
specialinvoke v1.<com.google.common.testing.FreshValueGenerator: void <init>()>();
v2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>("a", "b");
virtualinvoke v1.<com.google.common.testing.FreshValueGenerator: void addSampleInstances(java.lang.Class,java.lang.Iterable)>(class "Ljava/lang/String;", v2);
v3 = virtualinvoke v1.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(java.lang.Class)>(class "Ljava/lang/String;");
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertEquals(java.lang.String,java.lang.String)>("a", v3);
v4 = virtualinvoke v1.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(java.lang.Class)>(class "Ljava/lang/String;");
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertEquals(java.lang.String,java.lang.String)>("b", v4);
v5 = virtualinvoke v1.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(java.lang.Class)>(class "Ljava/lang/String;");
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertEquals(java.lang.String,java.lang.String)>("a", v5);
return;
}
public void testAddSampleInstances_oneInstance()
{
com.google.common.collect.ImmutableList v2;
java.lang.Object v3, v4;
com.google.common.testing.FreshValueGenerator v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGenerator;
specialinvoke v1.<com.google.common.testing.FreshValueGenerator: void <init>()>();
v2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object)>("a");
virtualinvoke v1.<com.google.common.testing.FreshValueGenerator: void addSampleInstances(java.lang.Class,java.lang.Iterable)>(class "Ljava/lang/String;", v2);
v3 = virtualinvoke v1.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(java.lang.Class)>(class "Ljava/lang/String;");
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertEquals(java.lang.String,java.lang.String)>("a", v3);
v4 = virtualinvoke v1.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(java.lang.Class)>(class "Ljava/lang/String;");
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertEquals(java.lang.String,java.lang.String)>("a", v4);
return;
}
public void testAddSampleInstances_noInstance()
{
com.google.common.collect.ImmutableList v2;
java.lang.Object v4, v5;
com.google.common.testing.FreshValueGenerator v1, v3;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGenerator;
specialinvoke v1.<com.google.common.testing.FreshValueGenerator: void <init>()>();
v2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>();
virtualinvoke v1.<com.google.common.testing.FreshValueGenerator: void addSampleInstances(java.lang.Class,java.lang.Iterable)>(class "Ljava/lang/String;", v2);
v3 = new com.google.common.testing.FreshValueGenerator;
specialinvoke v3.<com.google.common.testing.FreshValueGenerator: void <init>()>();
v4 = virtualinvoke v3.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(java.lang.Class)>(class "Ljava/lang/String;");
v5 = virtualinvoke v1.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(java.lang.Class)>(class "Ljava/lang/String;");
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertEquals(java.lang.String,java.lang.String)>(v4, v5);
return;
}
public void testFreshCurrency()
{
java.lang.Object v2, v3, v4;
com.google.common.testing.FreshValueGenerator v1;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.FreshValueGenerator;
specialinvoke v1.<com.google.common.testing.FreshValueGenerator: void <init>()>();
v2 = virtualinvoke v1.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(java.lang.Class)>(class "Ljava/util/Currency;");
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertNotNull(java.lang.Object)>(v2);
v3 = virtualinvoke v1.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(java.lang.Class)>(class "Ljava/util/Currency;");
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertNotNull(java.lang.Object)>(v3);
v4 = virtualinvoke v1.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(java.lang.Class)>(class "Ljava/util/Currency;");
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertNotNull(java.lang.Object)>(v4);
return;
}
public void testNulls() throws java.lang.Exception
{
java.lang.Class[] v3;
java.lang.Class v2;
com.google.common.testing.ClassSanityTester v1, v5;
java.lang.reflect.Method v4;
com.google.common.testing.FreshValueGeneratorTest v0;
v0 := @this: com.google.common.testing.FreshValueGeneratorTest;
v1 = new com.google.common.testing.ClassSanityTester;
specialinvoke v1.<com.google.common.testing.ClassSanityTester: void <init>()>();
v2 = class "Lcom/google/common/testing/FreshValueGeneratorTest;";
v3 = newarray (java.lang.Class)[0];
v4 = virtualinvoke v2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("testNulls", v3);
v5 = virtualinvoke v1.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester setDefault(java.lang.Class,java.lang.Object)>(class "Ljava/lang/reflect/Method;", v4);
virtualinvoke v5.<com.google.common.testing.ClassSanityTester: void testNulls(java.lang.Class)>(class "Lcom/google/common/testing/FreshValueGenerator;");
return;
}
private static transient void assertFreshInstances(java.lang.Class[])
{
int v1, v2;
java.lang.Class[] v0;
java.lang.Class v3;
v0 := @parameter0: java.lang.Class[];
v1 = lengthof v0;
v2 = 0;
label1:
if v2 >= v1 goto label2;
v3 = v0[v2];
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(java.lang.Class,int)>(v3, 2);
v2 = v2 + 1;
goto label1;
label2:
return;
}
private static void assertFreshInstance(com.google.common.reflect.TypeToken)
{
com.google.common.reflect.TypeToken v0;
v0 := @parameter0: com.google.common.reflect.TypeToken;
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken,int)>(v0, 3);
return;
}
private static void assertFreshInstance(java.lang.Class, int)
{
int v1;
java.lang.Class v0;
com.google.common.reflect.TypeToken v2;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: int;
v2 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.Class)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertFreshInstance(com.google.common.reflect.TypeToken,int)>(v2, v1);
return;
}
private static void assertFreshInstance(com.google.common.reflect.TypeToken, int)
{
java.lang.Object[] v5;
int v1, v4;
java.lang.Object v6;
com.google.common.reflect.TypeToken v0;
com.google.common.testing.FreshValueGenerator v2;
com.google.common.testing.EqualsTester v3;
v0 := @parameter0: com.google.common.reflect.TypeToken;
v1 := @parameter1: int;
v2 = new com.google.common.testing.FreshValueGenerator;
specialinvoke v2.<com.google.common.testing.FreshValueGenerator: void <init>()>();
v3 = new com.google.common.testing.EqualsTester;
specialinvoke v3.<com.google.common.testing.EqualsTester: void <init>()>();
v4 = 0;
label1:
if v4 >= v1 goto label2;
v5 = newarray (java.lang.Object)[1];
v6 = virtualinvoke v2.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(com.google.common.reflect.TypeToken)>(v0);
v5[0] = v6;
virtualinvoke v3.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester addEqualityGroup(java.lang.Object[])>(v5);
v4 = v4 + 1;
goto label1;
label2:
virtualinvoke v3.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester testEquals()>();
return;
}
private static void assertEqualInstance(java.lang.Class, java.lang.Object)
{
java.lang.Class v0;
java.lang.Object v1, v3, v4;
com.google.common.testing.FreshValueGenerator v2;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Object;
v2 = new com.google.common.testing.FreshValueGenerator;
specialinvoke v2.<com.google.common.testing.FreshValueGenerator: void <init>()>();
v3 = virtualinvoke v2.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(java.lang.Class)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertEquals(java.lang.Object,java.lang.Object)>(v1, v3);
v4 = virtualinvoke v2.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(java.lang.Class)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertEquals(java.lang.Object,java.lang.Object)>(v1, v4);
return;
}
private static void assertCanGenerateOnly(com.google.common.reflect.TypeToken, java.lang.Object)
{
java.lang.Object v1, v3, v4;
com.google.common.reflect.TypeToken v0;
com.google.common.testing.FreshValueGenerator v2;
v0 := @parameter0: com.google.common.reflect.TypeToken;
v1 := @parameter1: java.lang.Object;
v2 = new com.google.common.testing.FreshValueGenerator;
specialinvoke v2.<com.google.common.testing.FreshValueGenerator: void <init>()>();
v3 = virtualinvoke v2.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(com.google.common.reflect.TypeToken)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertValueAndTypeEquals(java.lang.Object,java.lang.Object)>(v1, v3);
v4 = virtualinvoke v2.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(com.google.common.reflect.TypeToken)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertNull(java.lang.Object)>(v4);
return;
}
private static void assertNotInstantiable(com.google.common.reflect.TypeToken)
{
java.lang.Object v2;
com.google.common.reflect.TypeToken v0;
com.google.common.testing.FreshValueGenerator v1;
v0 := @parameter0: com.google.common.reflect.TypeToken;
v1 = new com.google.common.testing.FreshValueGenerator;
specialinvoke v1.<com.google.common.testing.FreshValueGenerator: void <init>()>();
v2 = virtualinvoke v1.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(com.google.common.reflect.TypeToken)>(v0);
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertNull(java.lang.Object)>(v2);
return;
}
private static void assertValueAndTypeEquals(java.lang.Object, java.lang.Object)
{
java.lang.Class v2, v3;
java.lang.Object v0, v1;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertEquals(java.lang.Object,java.lang.Object)>(v0, v1);
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
staticinvoke <com.google.common.testing.FreshValueGeneratorTest: void assertEquals(java.lang.Object,java.lang.Object)>(v2, v3);
return;
}
}