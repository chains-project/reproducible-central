class com.google.common.testing.NullPointerTesterTest$MultipleInterfacesDefaultValueChecker extends com.google.common.testing.NullPointerTesterTest$DefaultValueChecker
{
private void <init>()
{
com.google.common.testing.NullPointerTesterTest$MultipleInterfacesDefaultValueChecker v0;
v0 := @this: com.google.common.testing.NullPointerTesterTest$MultipleInterfacesDefaultValueChecker;
specialinvoke v0.<com.google.common.testing.NullPointerTesterTest$DefaultValueChecker: void <init>()>();
return;
}
public void checkArray(com.google.common.testing.NullPointerTesterTest$FromTo, java.lang.String)
{
com.google.common.testing.NullPointerTesterTest$FromTo v1;
java.lang.Object[] v3;
com.google.common.testing.NullPointerTesterTest$MultipleInterfacesDefaultValueChecker v0;
java.lang.String v2;
v0 := @this: com.google.common.testing.NullPointerTesterTest$MultipleInterfacesDefaultValueChecker;
v1 := @parameter0: com.google.common.testing.NullPointerTesterTest$FromTo;
v2 := @parameter1: java.lang.String;
v3 = newarray (java.lang.Object)[2];
v3[0] = v1;
v3[1] = v2;
virtualinvoke v0.<com.google.common.testing.NullPointerTesterTest$MultipleInterfacesDefaultValueChecker: void calledWith(java.lang.Object[])>(v3);
return;
}
void check()
{
com.google.common.testing.NullPointerTesterTest$FromTo v6;
java.lang.Long v4;
java.lang.Object v1, v3, v5;
com.google.common.testing.NullPointerTesterTest$MultipleInterfacesDefaultValueChecker v0;
java.lang.Integer v2;
v0 := @this: com.google.common.testing.NullPointerTesterTest$MultipleInterfacesDefaultValueChecker;
virtualinvoke v0.<com.google.common.testing.NullPointerTesterTest$MultipleInterfacesDefaultValueChecker: com.google.common.testing.NullPointerTesterTest$DefaultValueChecker runTester()>();
v1 = virtualinvoke v0.<com.google.common.testing.NullPointerTesterTest$MultipleInterfacesDefaultValueChecker: java.lang.Object getDefaultParameterValue(int)>(0);
v2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
v3 = interfaceinvoke v1.<com.google.common.testing.NullPointerTesterTest$FromTo: java.lang.Object apply(java.lang.Object)>(null);
staticinvoke <junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)>(v2, v3);
v4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);
v5 = interfaceinvoke v6.<com.google.common.base.Supplier: java.lang.Object get()>();
staticinvoke <junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)>(v4, v5);
return;
}
}