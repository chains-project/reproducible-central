class com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$ForwardingRunnable extends java.lang.Object implements java.lang.Runnable
{
private final java.lang.Runnable runnable;
final com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest this$0;
void <init>(com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest, java.lang.Runnable)
{
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$ForwardingRunnable v0;
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest v1;
java.lang.Runnable v2;
v0 := @this: com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$ForwardingRunnable;
v1 := @parameter0: com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest;
v2 := @parameter1: java.lang.Runnable;
v0.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$ForwardingRunnable: com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$ForwardingRunnable: java.lang.Runnable runnable> = v2;
return;
}
public void run()
{
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$ForwardingRunnable v0;
java.lang.Runnable v1;
v0 := @this: com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$ForwardingRunnable;
v1 = v0.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$ForwardingRunnable: java.lang.Runnable runnable>;
interfaceinvoke v1.<java.lang.Runnable: void run()>();
return;
}
public java.lang.String toString()
{
com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$ForwardingRunnable v0;
java.lang.String v2;
java.lang.Runnable v1;
v0 := @this: com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$ForwardingRunnable;
v1 = v0.<com.google.common.testing.anotherpackage.ForwardingWrapperTesterTest$ForwardingRunnable: java.lang.Runnable runnable>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
return v2;
}
}