public class com.google.common.util.concurrent.testing.TestingExecutorsTest extends junit.framework.TestCase
{
private volatile boolean taskDone;
public void <init>()
{
com.google.common.util.concurrent.testing.TestingExecutorsTest v0;
v0 := @this: com.google.common.util.concurrent.testing.TestingExecutorsTest;
specialinvoke v0.<junit.framework.TestCase: void <init>()>();
return;
}
public void testNoOpScheduledExecutor() throws java.lang.InterruptedException
{
java.util.concurrent.TimeUnit v3;
com.google.common.util.concurrent.testing.TestingExecutorsTest v0;
com.google.common.util.concurrent.testing.TestingExecutorsTest$1 v1;
com.google.common.util.concurrent.ListenableScheduledFuture v4;
com.google.common.util.concurrent.ListeningScheduledExecutorService v2;
boolean v5, v6;
v0 := @this: com.google.common.util.concurrent.testing.TestingExecutorsTest;
v0.<com.google.common.util.concurrent.testing.TestingExecutorsTest: boolean taskDone> = 0;
v1 = new com.google.common.util.concurrent.testing.TestingExecutorsTest$1;
specialinvoke v1.<com.google.common.util.concurrent.testing.TestingExecutorsTest$1: void <init>(com.google.common.util.concurrent.testing.TestingExecutorsTest)>(v0);
v2 = staticinvoke <com.google.common.util.concurrent.testing.TestingExecutors: com.google.common.util.concurrent.ListeningScheduledExecutorService noOpScheduledExecutor()>();
v3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
v4 = interfaceinvoke v2.<com.google.common.util.concurrent.ListeningScheduledExecutorService: com.google.common.util.concurrent.ListenableScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(v1, 10L, v3);
staticinvoke <java.lang.Thread: void sleep(long)>(20L);
v5 = v0.<com.google.common.util.concurrent.testing.TestingExecutorsTest: boolean taskDone>;
staticinvoke <com.google.common.util.concurrent.testing.TestingExecutorsTest: void assertFalse(boolean)>(v5);
v6 = interfaceinvoke v4.<java.util.concurrent.ScheduledFuture: boolean isDone()>();
staticinvoke <com.google.common.util.concurrent.testing.TestingExecutorsTest: void assertFalse(boolean)>(v6);
return;
}
public void testNoOpScheduledExecutorShutdown()
{
com.google.common.util.concurrent.testing.TestingExecutorsTest v0;
com.google.common.util.concurrent.ListeningScheduledExecutorService v1;
boolean v2, v3, v4, v5;
v0 := @this: com.google.common.util.concurrent.testing.TestingExecutorsTest;
v1 = staticinvoke <com.google.common.util.concurrent.testing.TestingExecutors: com.google.common.util.concurrent.ListeningScheduledExecutorService noOpScheduledExecutor()>();
v2 = interfaceinvoke v1.<com.google.common.util.concurrent.ListeningScheduledExecutorService: boolean isShutdown()>();
staticinvoke <com.google.common.util.concurrent.testing.TestingExecutorsTest: void assertFalse(boolean)>(v2);
v3 = interfaceinvoke v1.<com.google.common.util.concurrent.ListeningScheduledExecutorService: boolean isTerminated()>();
staticinvoke <com.google.common.util.concurrent.testing.TestingExecutorsTest: void assertFalse(boolean)>(v3);
interfaceinvoke v1.<com.google.common.util.concurrent.ListeningScheduledExecutorService: void shutdown()>();
v4 = interfaceinvoke v1.<com.google.common.util.concurrent.ListeningScheduledExecutorService: boolean isShutdown()>();
staticinvoke <com.google.common.util.concurrent.testing.TestingExecutorsTest: void assertTrue(boolean)>(v4);
v5 = interfaceinvoke v1.<com.google.common.util.concurrent.ListeningScheduledExecutorService: boolean isTerminated()>();
staticinvoke <com.google.common.util.concurrent.testing.TestingExecutorsTest: void assertTrue(boolean)>(v5);
return;
}
public void testNoOpScheduledExecutorInvokeAll() throws java.util.concurrent.ExecutionException, java.lang.InterruptedException
{
java.util.concurrent.CancellationException v9;
com.google.common.util.concurrent.testing.TestingExecutorsTest$2 v2;
java.util.concurrent.TimeUnit v4;
com.google.common.util.concurrent.testing.TestingExecutorsTest v0;
java.util.List v5;
com.google.common.collect.ImmutableList v3;
java.lang.Object v6;
com.google.common.util.concurrent.ListeningScheduledExecutorService v1;
boolean v7, v8;
v0 := @this: com.google.common.util.concurrent.testing.TestingExecutorsTest;
v1 = staticinvoke <com.google.common.util.concurrent.testing.TestingExecutors: com.google.common.util.concurrent.ListeningScheduledExecutorService noOpScheduledExecutor()>();
v0.<com.google.common.util.concurrent.testing.TestingExecutorsTest: boolean taskDone> = 0;
v2 = new com.google.common.util.concurrent.testing.TestingExecutorsTest$2;
specialinvoke v2.<com.google.common.util.concurrent.testing.TestingExecutorsTest$2: void <init>(com.google.common.util.concurrent.testing.TestingExecutorsTest)>(v0);
v3 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object)>(v2);
v4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
v5 = interfaceinvoke v1.<com.google.common.util.concurrent.ListeningScheduledExecutorService: java.util.List invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)>(v3, 10L, v4);
v6 = interfaceinvoke v5.<java.util.List: java.lang.Object get(int)>(0);
v7 = v0.<com.google.common.util.concurrent.testing.TestingExecutorsTest: boolean taskDone>;
staticinvoke <com.google.common.util.concurrent.testing.TestingExecutorsTest: void assertFalse(boolean)>(v7);
v8 = interfaceinvoke v6.<java.util.concurrent.Future: boolean isDone()>();
staticinvoke <com.google.common.util.concurrent.testing.TestingExecutorsTest: void assertTrue(boolean)>(v8);
label1:
interfaceinvoke v6.<java.util.concurrent.Future: java.lang.Object get()>();
staticinvoke <com.google.common.util.concurrent.testing.TestingExecutorsTest: void fail()>();
label2:
goto label4;
label3:
v9 := @caughtexception;
label4:
return;
catch java.util.concurrent.CancellationException from label1 to label2 with label3;
}
public void testSameThreadScheduledExecutor() throws java.util.concurrent.ExecutionException, java.lang.InterruptedException
{
java.util.concurrent.TimeUnit v3;
com.google.common.util.concurrent.testing.TestingExecutorsTest$3 v1;
com.google.common.util.concurrent.testing.TestingExecutorsTest v0;
int v7;
com.google.common.util.concurrent.ListenableScheduledFuture v4;
java.lang.Object v6;
com.google.common.util.concurrent.ListeningScheduledExecutorService v2;
boolean v5;
v0 := @this: com.google.common.util.concurrent.testing.TestingExecutorsTest;
v0.<com.google.common.util.concurrent.testing.TestingExecutorsTest: boolean taskDone> = 0;
v1 = new com.google.common.util.concurrent.testing.TestingExecutorsTest$3;
specialinvoke v1.<com.google.common.util.concurrent.testing.TestingExecutorsTest$3: void <init>(com.google.common.util.concurrent.testing.TestingExecutorsTest)>(v0);
v2 = staticinvoke <com.google.common.util.concurrent.testing.TestingExecutors: com.google.common.util.concurrent.ListeningScheduledExecutorService sameThreadScheduledExecutor()>();
v3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
v4 = interfaceinvoke v2.<com.google.common.util.concurrent.ListeningScheduledExecutorService: com.google.common.util.concurrent.ListenableScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)>(v1, 10000L, v3);
v5 = v0.<com.google.common.util.concurrent.testing.TestingExecutorsTest: boolean taskDone>;
staticinvoke <com.google.common.util.concurrent.testing.TestingExecutorsTest: void assertTrue(java.lang.String,boolean)>("Should run callable immediately", v5);
v6 = interfaceinvoke v4.<java.util.concurrent.Future: java.lang.Object get()>();
v7 = virtualinvoke v6.<java.lang.Integer: int intValue()>();
staticinvoke <com.google.common.util.concurrent.testing.TestingExecutorsTest: void assertEquals(int,int)>(6, v7);
return;
}
public void testSameThreadScheduledExecutorWithException() throws java.lang.InterruptedException
{
java.util.concurrent.ExecutionException v4;
com.google.common.util.concurrent.testing.TestingExecutorsTest v0;
com.google.common.util.concurrent.testing.TestingExecutorsTest$4 v1;
com.google.common.util.concurrent.ListenableFuture v3;
com.google.common.util.concurrent.ListeningScheduledExecutorService v2;
v0 := @this: com.google.common.util.concurrent.testing.TestingExecutorsTest;
v1 = new com.google.common.util.concurrent.testing.TestingExecutorsTest$4;
specialinvoke v1.<com.google.common.util.concurrent.testing.TestingExecutorsTest$4: void <init>(com.google.common.util.concurrent.testing.TestingExecutorsTest)>(v0);
v2 = staticinvoke <com.google.common.util.concurrent.testing.TestingExecutors: com.google.common.util.concurrent.ListeningScheduledExecutorService sameThreadScheduledExecutor()>();
v3 = interfaceinvoke v2.<com.google.common.util.concurrent.ListeningScheduledExecutorService: com.google.common.util.concurrent.ListenableFuture submit(java.lang.Runnable)>(v1);
label1:
interfaceinvoke v3.<java.util.concurrent.Future: java.lang.Object get()>();
staticinvoke <com.google.common.util.concurrent.testing.TestingExecutorsTest: void fail(java.lang.String)>("Should have thrown exception");
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
return;
catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
}
}