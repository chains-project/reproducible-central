class com.google.common.collect.testing.MapTestSuiteBuilderTests$2$1 extends java.util.AbstractMap
{
final java.util.HashMap val$map;
void <init>(com.google.common.collect.testing.MapTestSuiteBuilderTests$2, java.util.HashMap)
{
com.google.common.collect.testing.MapTestSuiteBuilderTests$2 v1;
java.util.HashMap v2;
com.google.common.collect.testing.MapTestSuiteBuilderTests$2$1 v0;
v0 := @this: com.google.common.collect.testing.MapTestSuiteBuilderTests$2$1;
v1 := @parameter0: com.google.common.collect.testing.MapTestSuiteBuilderTests$2;
v2 := @parameter1: java.util.HashMap;
v0.<com.google.common.collect.testing.MapTestSuiteBuilderTests$2$1: java.util.HashMap val$map> = v2;
specialinvoke v0.<java.util.AbstractMap: void <init>()>();
return;
}
public java.util.Set entrySet()
{
com.google.common.collect.testing.MapTestSuiteBuilderTests$2$1 v0;
com.google.common.collect.testing.MapTestSuiteBuilderTests$2$1$EntrySet v1;
v0 := @this: com.google.common.collect.testing.MapTestSuiteBuilderTests$2$1;
v1 = new com.google.common.collect.testing.MapTestSuiteBuilderTests$2$1$EntrySet;
specialinvoke v1.<com.google.common.collect.testing.MapTestSuiteBuilderTests$2$1$EntrySet: void <init>(com.google.common.collect.testing.MapTestSuiteBuilderTests$2$1)>(v0);
return v1;
}
public int hashCode()
{
int v2;
java.util.HashMap v1;
com.google.common.collect.testing.MapTestSuiteBuilderTests$2$1 v0;
v0 := @this: com.google.common.collect.testing.MapTestSuiteBuilderTests$2$1;
v1 = v0.<com.google.common.collect.testing.MapTestSuiteBuilderTests$2$1: java.util.HashMap val$map>;
v2 = virtualinvoke v1.<java.util.HashMap: int hashCode()>();
return v2;
}
public boolean equals(java.lang.Object)
{
com.google.common.collect.testing.MapTestSuiteBuilderTests$2$1 v0;
java.lang.Object v1;
java.util.HashMap v2;
boolean v3;
v0 := @this: com.google.common.collect.testing.MapTestSuiteBuilderTests$2$1;
v1 := @parameter0: java.lang.Object;
v2 = v0.<com.google.common.collect.testing.MapTestSuiteBuilderTests$2$1: java.util.HashMap val$map>;
v3 = virtualinvoke v2.<java.util.HashMap: boolean equals(java.lang.Object)>(v1);
return v3;
}
public java.lang.String toString()
{
java.util.HashMap v1;
java.lang.String v2;
com.google.common.collect.testing.MapTestSuiteBuilderTests$2$1 v0;
v0 := @this: com.google.common.collect.testing.MapTestSuiteBuilderTests$2$1;
v1 = v0.<com.google.common.collect.testing.MapTestSuiteBuilderTests$2$1: java.util.HashMap val$map>;
v2 = virtualinvoke v1.<java.util.HashMap: java.lang.String toString()>();
return v2;
}
public java.lang.String remove(java.lang.Object)
{
com.google.common.collect.testing.MapTestSuiteBuilderTests$2$1 v0;
java.lang.Object v1, v3;
java.util.HashMap v2;
v0 := @this: com.google.common.collect.testing.MapTestSuiteBuilderTests$2$1;
v1 := @parameter0: java.lang.Object;
v2 = v0.<com.google.common.collect.testing.MapTestSuiteBuilderTests$2$1: java.util.HashMap val$map>;
v3 = virtualinvoke v2.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(v1);
return v3;
}
public boolean remove(java.lang.Object, java.lang.Object)
{
com.google.common.collect.testing.MapTestSuiteBuilderTests$2$1 v0;
java.lang.Object v1, v2;
java.util.HashMap v3;
boolean v4;
v0 := @this: com.google.common.collect.testing.MapTestSuiteBuilderTests$2$1;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = v0.<com.google.common.collect.testing.MapTestSuiteBuilderTests$2$1: java.util.HashMap val$map>;
v4 = virtualinvoke v3.<java.util.HashMap: boolean remove(java.lang.Object,java.lang.Object)>(v1, v2);
return v4;
}
public java.lang.String put(java.lang.String, java.lang.String)
{
com.google.common.collect.testing.MapTestSuiteBuilderTests$2$1 v0;
java.lang.Object v4;
java.util.HashMap v3;
java.lang.String v1, v2;
v0 := @this: com.google.common.collect.testing.MapTestSuiteBuilderTests$2$1;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(v2);
v3 = v0.<com.google.common.collect.testing.MapTestSuiteBuilderTests$2$1: java.util.HashMap val$map>;
v4 = virtualinvoke v3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v2);
return v4;
}
}