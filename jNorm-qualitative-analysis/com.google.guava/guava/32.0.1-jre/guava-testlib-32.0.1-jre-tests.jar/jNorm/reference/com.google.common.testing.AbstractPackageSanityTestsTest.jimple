public class com.google.common.testing.AbstractPackageSanityTestsTest extends junit.framework.TestCase
{
private final com.google.common.testing.AbstractPackageSanityTests sanityTests;
public void <init>()
{
com.google.common.testing.AbstractPackageSanityTestsTest$ConcretePackageSanityTests v1;
com.google.common.testing.AbstractPackageSanityTestsTest v0;
v0 := @this: com.google.common.testing.AbstractPackageSanityTestsTest;
specialinvoke v0.<junit.framework.TestCase: void <init>()>();
v1 = new com.google.common.testing.AbstractPackageSanityTestsTest$ConcretePackageSanityTests;
specialinvoke v1.<com.google.common.testing.AbstractPackageSanityTestsTest$ConcretePackageSanityTests: void <init>()>();
v0.<com.google.common.testing.AbstractPackageSanityTestsTest: com.google.common.testing.AbstractPackageSanityTests sanityTests> = v1;
return;
}
public void testFindClassesToTest_testClass()
{
com.google.common.testing.AbstractPackageSanityTestsTest v0;
java.lang.String[] v10, v14, v2, v6;
com.google.common.collect.ImmutableList v1, v13, v5, v9;
com.google.common.truth.IterableSubject v12, v16, v4, v8;
java.util.List v11, v15, v3, v7;
v0 := @this: com.google.common.testing.AbstractPackageSanityTestsTest;
v1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object)>(class "Lcom/google/common/testing/AbstractPackageSanityTestsTest$EmptyTest;");
v2 = newarray (java.lang.String)[0];
v3 = specialinvoke v0.<com.google.common.testing.AbstractPackageSanityTestsTest: java.util.List findClassesToTest(java.lang.Iterable,java.lang.String[])>(v1, v2);
v4 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>(v3);
virtualinvoke v4.<com.google.common.truth.IterableSubject: void isEmpty()>();
v5 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object)>(class "Lcom/google/common/testing/AbstractPackageSanityTestsTest$EmptyTests;");
v6 = newarray (java.lang.String)[0];
v7 = specialinvoke v0.<com.google.common.testing.AbstractPackageSanityTestsTest: java.util.List findClassesToTest(java.lang.Iterable,java.lang.String[])>(v5, v6);
v8 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>(v7);
virtualinvoke v8.<com.google.common.truth.IterableSubject: void isEmpty()>();
v9 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object)>(class "Lcom/google/common/testing/AbstractPackageSanityTestsTest$EmptyTestCase;");
v10 = newarray (java.lang.String)[0];
v11 = specialinvoke v0.<com.google.common.testing.AbstractPackageSanityTestsTest: java.util.List findClassesToTest(java.lang.Iterable,java.lang.String[])>(v9, v10);
v12 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>(v11);
virtualinvoke v12.<com.google.common.truth.IterableSubject: void isEmpty()>();
v13 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object)>(class "Lcom/google/common/testing/AbstractPackageSanityTestsTest$EmptyTestSuite;");
v14 = newarray (java.lang.String)[0];
v15 = specialinvoke v0.<com.google.common.testing.AbstractPackageSanityTestsTest: java.util.List findClassesToTest(java.lang.Iterable,java.lang.String[])>(v13, v14);
v16 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>(v15);
virtualinvoke v16.<com.google.common.truth.IterableSubject: void isEmpty()>();
return;
}
public void testFindClassesToTest_noCorrespondingTestClass()
{
com.google.common.testing.AbstractPackageSanityTestsTest v0;
java.lang.Object[] v10, v5;
java.lang.String[] v2, v7;
java.util.List v3, v8;
com.google.common.collect.ImmutableList v1, v6;
com.google.common.truth.IterableSubject v4, v9;
v0 := @this: com.google.common.testing.AbstractPackageSanityTestsTest;
v1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object)>(class "Lcom/google/common/testing/AbstractPackageSanityTestsTest$Foo;");
v2 = newarray (java.lang.String)[0];
v3 = specialinvoke v0.<com.google.common.testing.AbstractPackageSanityTestsTest: java.util.List findClassesToTest(java.lang.Iterable,java.lang.String[])>(v1, v2);
v4 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>(v3);
v5 = newarray (java.lang.Object)[1];
v5[0] = class "Lcom/google/common/testing/AbstractPackageSanityTestsTest$Foo;";
virtualinvoke v4.<com.google.common.truth.IterableSubject: com.google.common.truth.Ordered containsExactly(java.lang.Object[])>(v5);
v6 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(class "Lcom/google/common/testing/AbstractPackageSanityTestsTest$Foo;", class "Lcom/google/common/testing/AbstractPackageSanityTestsTest$Foo2Test;");
v7 = newarray (java.lang.String)[0];
v8 = specialinvoke v0.<com.google.common.testing.AbstractPackageSanityTestsTest: java.util.List findClassesToTest(java.lang.Iterable,java.lang.String[])>(v6, v7);
v9 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>(v8);
v10 = newarray (java.lang.Object)[1];
v10[0] = class "Lcom/google/common/testing/AbstractPackageSanityTestsTest$Foo;";
virtualinvoke v9.<com.google.common.truth.IterableSubject: com.google.common.truth.Ordered containsExactly(java.lang.Object[])>(v10);
return;
}
public void testFindClassesToTest_publicApiOnly()
{
com.google.common.testing.AbstractPackageSanityTestsTest v0;
com.google.common.testing.AbstractPackageSanityTests v1;
java.lang.String[] v3, v7;
java.util.List v4, v8;
com.google.common.collect.ImmutableList v2, v6;
com.google.common.truth.IterableSubject v5, v9;
v0 := @this: com.google.common.testing.AbstractPackageSanityTestsTest;
v1 = v0.<com.google.common.testing.AbstractPackageSanityTestsTest: com.google.common.testing.AbstractPackageSanityTests sanityTests>;
virtualinvoke v1.<com.google.common.testing.AbstractPackageSanityTests: void publicApiOnly()>();
v2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object)>(class "Lcom/google/common/testing/AbstractPackageSanityTestsTest$Foo;");
v3 = newarray (java.lang.String)[0];
v4 = specialinvoke v0.<com.google.common.testing.AbstractPackageSanityTestsTest: java.util.List findClassesToTest(java.lang.Iterable,java.lang.String[])>(v2, v3);
v5 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>(v4);
virtualinvoke v5.<com.google.common.truth.IterableSubject: void isEmpty()>();
v6 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object)>(class "Lcom/google/common/testing/AbstractPackageSanityTestsTest$PublicFoo;");
v7 = newarray (java.lang.String)[0];
v8 = specialinvoke v0.<com.google.common.testing.AbstractPackageSanityTestsTest: java.util.List findClassesToTest(java.lang.Iterable,java.lang.String[])>(v6, v7);
v9 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>(v8);
virtualinvoke v9.<com.google.common.truth.IterableSubject: void contains(java.lang.Object)>(class "Lcom/google/common/testing/AbstractPackageSanityTestsTest$PublicFoo;");
return;
}
public void testFindClassesToTest_ignoreClasses()
{
com.google.common.testing.AbstractPackageSanityTestsTest v0;
com.google.common.testing.AbstractPackageSanityTests v1;
java.lang.String[] v4, v8;
java.util.List v5, v9;
com.google.common.collect.ImmutableList v3, v7;
com.google.common.truth.IterableSubject v10, v6;
com.google.common.base.Predicate v2;
v0 := @this: com.google.common.testing.AbstractPackageSanityTestsTest;
v1 = v0.<com.google.common.testing.AbstractPackageSanityTestsTest: com.google.common.testing.AbstractPackageSanityTests sanityTests>;
v2 = staticinvoke <com.google.common.base.Predicates: com.google.common.base.Predicate equalTo(java.lang.Object)>(class "Lcom/google/common/testing/AbstractPackageSanityTestsTest$PublicFoo;");
virtualinvoke v1.<com.google.common.testing.AbstractPackageSanityTests: void ignoreClasses(com.google.common.base.Predicate)>(v2);
v3 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object)>(class "Lcom/google/common/testing/AbstractPackageSanityTestsTest$PublicFoo;");
v4 = newarray (java.lang.String)[0];
v5 = specialinvoke v0.<com.google.common.testing.AbstractPackageSanityTestsTest: java.util.List findClassesToTest(java.lang.Iterable,java.lang.String[])>(v3, v4);
v6 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>(v5);
virtualinvoke v6.<com.google.common.truth.IterableSubject: void isEmpty()>();
v7 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object)>(class "Lcom/google/common/testing/AbstractPackageSanityTestsTest$Foo;");
v8 = newarray (java.lang.String)[0];
v9 = specialinvoke v0.<com.google.common.testing.AbstractPackageSanityTestsTest: java.util.List findClassesToTest(java.lang.Iterable,java.lang.String[])>(v7, v8);
v10 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>(v9);
virtualinvoke v10.<com.google.common.truth.IterableSubject: void contains(java.lang.Object)>(class "Lcom/google/common/testing/AbstractPackageSanityTestsTest$Foo;");
return;
}
public void testFindClassesToTest_ignoreUnderscores()
{
com.google.common.testing.AbstractPackageSanityTestsTest v0;
java.lang.Object[] v12, v5;
com.google.common.testing.AbstractPackageSanityTests v6;
java.lang.String[] v2, v9;
java.util.List v10, v3;
com.google.common.collect.ImmutableList v1, v8;
com.google.common.truth.IterableSubject v11, v4;
com.google.common.base.Predicate v7;
v0 := @this: com.google.common.testing.AbstractPackageSanityTestsTest;
v1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(class "Lcom/google/common/testing/AbstractPackageSanityTestsTest$Foo;", class "Lcom/google/common/testing/AbstractPackageSanityTestsTest$Foo_Bar;");
v2 = newarray (java.lang.String)[0];
v3 = specialinvoke v0.<com.google.common.testing.AbstractPackageSanityTestsTest: java.util.List findClassesToTest(java.lang.Iterable,java.lang.String[])>(v1, v2);
v4 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>(v3);
v5 = newarray (java.lang.Object)[2];
v5[0] = class "Lcom/google/common/testing/AbstractPackageSanityTestsTest$Foo;";
v5[1] = class "Lcom/google/common/testing/AbstractPackageSanityTestsTest$Foo_Bar;";
virtualinvoke v4.<com.google.common.truth.IterableSubject: com.google.common.truth.Ordered containsExactly(java.lang.Object[])>(v5);
v6 = v0.<com.google.common.testing.AbstractPackageSanityTestsTest: com.google.common.testing.AbstractPackageSanityTests sanityTests>;
v7 = <com.google.common.testing.AbstractPackageSanityTests: com.google.common.base.Predicate UNDERSCORE_IN_NAME>;
virtualinvoke v6.<com.google.common.testing.AbstractPackageSanityTests: void ignoreClasses(com.google.common.base.Predicate)>(v7);
v8 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(class "Lcom/google/common/testing/AbstractPackageSanityTestsTest$Foo;", class "Lcom/google/common/testing/AbstractPackageSanityTestsTest$Foo_Bar;");
v9 = newarray (java.lang.String)[0];
v10 = specialinvoke v0.<com.google.common.testing.AbstractPackageSanityTestsTest: java.util.List findClassesToTest(java.lang.Iterable,java.lang.String[])>(v8, v9);
v11 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>(v10);
v12 = newarray (java.lang.Object)[1];
v12[0] = class "Lcom/google/common/testing/AbstractPackageSanityTestsTest$Foo;";
virtualinvoke v11.<com.google.common.truth.IterableSubject: com.google.common.truth.Ordered containsExactly(java.lang.Object[])>(v12);
return;
}
public void testFindClassesToTest_withCorrespondingTestClassButNotExplicitlyTested()
{
com.google.common.testing.AbstractPackageSanityTestsTest v0;
java.lang.Object[] v10, v5;
java.lang.String[] v2, v7;
java.util.List v3, v8;
com.google.common.collect.ImmutableList v1, v6;
com.google.common.truth.IterableSubject v4, v9;
v0 := @this: com.google.common.testing.AbstractPackageSanityTestsTest;
v1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(class "Lcom/google/common/testing/AbstractPackageSanityTestsTest$Foo;", class "Lcom/google/common/testing/AbstractPackageSanityTestsTest$FooTest;");
v2 = newarray (java.lang.String)[1];
v2[0] = "testNotThere";
v3 = specialinvoke v0.<com.google.common.testing.AbstractPackageSanityTestsTest: java.util.List findClassesToTest(java.lang.Iterable,java.lang.String[])>(v1, v2);
v4 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>(v3);
v5 = newarray (java.lang.Object)[1];
v5[0] = class "Lcom/google/common/testing/AbstractPackageSanityTestsTest$Foo;";
virtualinvoke v4.<com.google.common.truth.IterableSubject: com.google.common.truth.Ordered containsExactly(java.lang.Object[])>(v5);
v6 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(class "Lcom/google/common/testing/AbstractPackageSanityTestsTest$Foo;", class "Lcom/google/common/testing/AbstractPackageSanityTestsTest$FooTest;");
v7 = newarray (java.lang.String)[1];
v7[0] = "testNotPublic";
v8 = specialinvoke v0.<com.google.common.testing.AbstractPackageSanityTestsTest: java.util.List findClassesToTest(java.lang.Iterable,java.lang.String[])>(v6, v7);
v9 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>(v8);
v10 = newarray (java.lang.Object)[1];
v10[0] = class "Lcom/google/common/testing/AbstractPackageSanityTestsTest$Foo;";
virtualinvoke v9.<com.google.common.truth.IterableSubject: com.google.common.truth.Ordered containsExactly(java.lang.Object[])>(v10);
return;
}
public void testFindClassesToTest_withCorrespondingTestClassAndExplicitlyTested()
{
com.google.common.testing.AbstractPackageSanityTestsTest v0;
java.lang.String[] v2, v5;
java.util.List v3, v6;
com.google.common.collect.ImmutableList v1;
com.google.common.truth.IterableSubject v4, v7;
v0 := @this: com.google.common.testing.AbstractPackageSanityTestsTest;
v1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(class "Lcom/google/common/testing/AbstractPackageSanityTestsTest$Foo;", class "Lcom/google/common/testing/AbstractPackageSanityTestsTest$FooTest;");
v2 = newarray (java.lang.String)[1];
v2[0] = "testPublic";
v3 = specialinvoke v0.<com.google.common.testing.AbstractPackageSanityTestsTest: java.util.List findClassesToTest(java.lang.Iterable,java.lang.String[])>(v1, v2);
v4 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>(v3);
virtualinvoke v4.<com.google.common.truth.IterableSubject: void isEmpty()>();
v5 = newarray (java.lang.String)[2];
v5[0] = "testNotThere";
v5[1] = "testPublic";
v6 = specialinvoke v0.<com.google.common.testing.AbstractPackageSanityTestsTest: java.util.List findClassesToTest(java.lang.Iterable,java.lang.String[])>(v1, v5);
v7 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>(v6);
virtualinvoke v7.<com.google.common.truth.IterableSubject: void isEmpty()>();
return;
}
public void testFindClassesToTest_withCorrespondingTestClass_noTestName()
{
com.google.common.testing.AbstractPackageSanityTestsTest v0;
java.util.List v3;
java.lang.Object[] v5;
com.google.common.collect.ImmutableList v1;
com.google.common.truth.IterableSubject v4;
java.lang.String[] v2;
v0 := @this: com.google.common.testing.AbstractPackageSanityTestsTest;
v1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object,java.lang.Object)>(class "Lcom/google/common/testing/AbstractPackageSanityTestsTest$Foo;", class "Lcom/google/common/testing/AbstractPackageSanityTestsTest$FooTest;");
v2 = newarray (java.lang.String)[0];
v3 = specialinvoke v0.<com.google.common.testing.AbstractPackageSanityTestsTest: java.util.List findClassesToTest(java.lang.Iterable,java.lang.String[])>(v1, v2);
v4 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.IterableSubject assertThat(java.lang.Iterable)>(v3);
v5 = newarray (java.lang.Object)[1];
v5[0] = class "Lcom/google/common/testing/AbstractPackageSanityTestsTest$Foo;";
virtualinvoke v4.<com.google.common.truth.IterableSubject: com.google.common.truth.Ordered containsExactly(java.lang.Object[])>(v5);
return;
}
private transient java.util.List findClassesToTest(java.lang.Iterable, java.lang.String[])
{
com.google.common.testing.AbstractPackageSanityTestsTest v0;
java.util.List v4, v5;
com.google.common.testing.AbstractPackageSanityTests v3;
java.lang.String[] v2;
java.lang.Iterable v1;
v0 := @this: com.google.common.testing.AbstractPackageSanityTestsTest;
v1 := @parameter0: java.lang.Iterable;
v2 := @parameter1: java.lang.String[];
v3 = v0.<com.google.common.testing.AbstractPackageSanityTestsTest: com.google.common.testing.AbstractPackageSanityTests sanityTests>;
v4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v2);
v5 = virtualinvoke v3.<com.google.common.testing.AbstractPackageSanityTests: java.util.List findClassesToTest(java.lang.Iterable,java.lang.Iterable)>(v1, v4);
return v5;
}
}