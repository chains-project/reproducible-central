public class com.google.common.testing.ArbitraryInstancesTest extends junit.framework.TestCase
{
public void <init>()
{
com.google.common.testing.ArbitraryInstancesTest v0;
v0 := @this: com.google.common.testing.ArbitraryInstancesTest;
specialinvoke v0.<junit.framework.TestCase: void <init>()>();
return;
}
public void testGet_primitives()
{
java.lang.Float v34, v37;
java.lang.Integer v24, v27, v57;
java.lang.Character v12, v9;
java.lang.Long v29, v32;
com.google.common.primitives.UnsignedInteger v44;
java.lang.Double v39, v42;
com.google.common.testing.ArbitraryInstancesTest v0;
com.google.common.primitives.UnsignedLong v46;
java.util.OptionalLong v65;
java.lang.Short v19, v22;
java.lang.Byte v14, v17;
java.util.Optional v61;
java.util.OptionalDouble v67;
java.util.OptionalInt v63;
java.nio.charset.Charset v59;
int v49, v51;
java.lang.Boolean v4, v7;
java.util.concurrent.TimeUnit v54;
java.lang.Class v1, v10, v15, v20, v25, v30, v35, v40, v5;
java.lang.Object v11, v13, v16, v18, v2, v21, v23, v26, v28, v3, v31, v33, v36, v38, v41, v43, v45, v47, v48, v50, v52, v53, v55, v56, v58, v6, v60, v62, v64, v66, v68, v69, v8;
v0 := @this: com.google.common.testing.ArbitraryInstancesTest;
v1 = <java.lang.Void: java.lang.Class TYPE>;
v2 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(v1);
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertNull(java.lang.Object)>(v2);
v3 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/lang/Void;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertNull(java.lang.Object)>(v3);
v4 = <java.lang.Boolean: java.lang.Boolean FALSE>;
v5 = <java.lang.Boolean: java.lang.Class TYPE>;
v6 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(v5);
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v4, v6);
v7 = <java.lang.Boolean: java.lang.Boolean FALSE>;
v8 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/lang/Boolean;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v7, v8);
v9 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(0);
v10 = <java.lang.Character: java.lang.Class TYPE>;
v11 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(v10);
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v9, v11);
v12 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(0);
v13 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/lang/Character;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v12, v13);
v14 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(0);
v15 = <java.lang.Byte: java.lang.Class TYPE>;
v16 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(v15);
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v14, v16);
v17 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(0);
v18 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/lang/Byte;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v17, v18);
v19 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(0);
v20 = <java.lang.Short: java.lang.Class TYPE>;
v21 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(v20);
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v19, v21);
v22 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(0);
v23 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/lang/Short;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v22, v23);
v24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
v25 = <java.lang.Integer: java.lang.Class TYPE>;
v26 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(v25);
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v24, v26);
v27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
v28 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/lang/Integer;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v27, v28);
v29 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);
v30 = <java.lang.Long: java.lang.Class TYPE>;
v31 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(v30);
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v29, v31);
v32 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);
v33 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/lang/Long;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v32, v33);
v34 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);
v35 = <java.lang.Float: java.lang.Class TYPE>;
v36 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(v35);
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v34, v36);
v37 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);
v38 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/lang/Float;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v37, v38);
v39 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);
v40 = <java.lang.Double: java.lang.Class TYPE>;
v41 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(v40);
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v39, v41);
v42 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);
v43 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/lang/Double;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v42, v43);
v44 = <com.google.common.primitives.UnsignedInteger: com.google.common.primitives.UnsignedInteger ZERO>;
v45 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/primitives/UnsignedInteger;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v44, v45);
v46 = <com.google.common.primitives.UnsignedLong: com.google.common.primitives.UnsignedLong ZERO>;
v47 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/primitives/UnsignedLong;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v46, v47);
v48 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/math/BigDecimal;");
v49 = virtualinvoke v48.<java.math.BigDecimal: int intValue()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(int,int)>(0, v49);
v50 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/math/BigInteger;");
v51 = virtualinvoke v50.<java.math.BigInteger: int intValue()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(int,int)>(0, v51);
v52 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/lang/String;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.String,java.lang.String)>("", v52);
v53 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/lang/CharSequence;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>("", v53);
v54 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
v55 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/concurrent/TimeUnit;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v54, v55);
v56 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/lang/Object;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertNotNull(java.lang.Object)>(v56);
v57 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
v58 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/lang/Number;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v57, v58);
v59 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_8>;
v60 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/nio/charset/Charset;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v59, v60);
v61 = staticinvoke <java.util.Optional: java.util.Optional empty()>();
v62 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/Optional;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v61, v62);
v63 = staticinvoke <java.util.OptionalInt: java.util.OptionalInt empty()>();
v64 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/OptionalInt;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v63, v64);
v65 = staticinvoke <java.util.OptionalLong: java.util.OptionalLong empty()>();
v66 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/OptionalLong;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v65, v66);
v67 = staticinvoke <java.util.OptionalDouble: java.util.OptionalDouble empty()>();
v68 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/OptionalDouble;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v67, v68);
v69 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/UUID;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertNotNull(java.lang.Object)>(v69);
return;
}
public void testGet_collections()
{
com.google.common.collect.Range v72;
com.google.common.testing.ArbitraryInstancesTest v0;
com.google.common.collect.ImmutableMultiset v34, v36;
com.google.common.collect.ImmutableMultimap v40, v42;
com.google.common.collect.ImmutableSortedMap v30, v32;
com.google.common.collect.ImmutableSortedSet v14, v16;
java.lang.Class[] v92;
com.google.common.collect.UnmodifiableIterator v2;
boolean v39, v45, v5, v51, v57, v59, v61, v63, v65, v67, v69, v7, v71, v75, v77, v79, v81, v83, v85, v87, v89, v91;
com.google.common.collect.ImmutableSet v1, v10, v12, v8;
com.google.common.collect.ImmutableMap v26, v28;
com.google.common.collect.ImmutableBiMap v52, v54;
com.google.common.collect.ImmutableList v18, v20, v22, v24;
com.google.common.collect.ImmutableTable v46, v48;
java.lang.Object v11, v13, v15, v17, v19, v21, v23, v25, v27, v29, v3, v31, v33, v35, v37, v38, v4, v41, v43, v44, v47, v49, v50, v53, v55, v56, v58, v6, v60, v62, v64, v66, v68, v70, v73, v74, v76, v78, v80, v82, v84, v86, v88, v9, v90;
v0 := @this: com.google.common.testing.ArbitraryInstancesTest;
v1 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of()>();
v2 = virtualinvoke v1.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>();
v3 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/Iterator;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v2, v3);
v4 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/collect/PeekingIterator;");
v5 = interfaceinvoke v4.<com.google.common.collect.PeekingIterator: boolean hasNext()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertFalse(boolean)>(v5);
v6 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/ListIterator;");
v7 = interfaceinvoke v6.<java.util.ListIterator: boolean hasNext()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertFalse(boolean)>(v7);
v8 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of()>();
v9 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/lang/Iterable;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v8, v9);
v10 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of()>();
v11 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/Set;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v10, v11);
v12 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of()>();
v13 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/collect/ImmutableSet;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v12, v13);
v14 = staticinvoke <com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet of()>();
v15 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/SortedSet;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v14, v15);
v16 = staticinvoke <com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet of()>();
v17 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/collect/ImmutableSortedSet;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v16, v17);
v18 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>();
v19 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/Collection;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v18, v19);
v20 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>();
v21 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/collect/ImmutableCollection;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v20, v21);
v22 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>();
v23 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/List;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v22, v23);
v24 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>();
v25 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/collect/ImmutableList;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v24, v25);
v26 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of()>();
v27 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/Map;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v26, v27);
v28 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of()>();
v29 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/collect/ImmutableMap;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v28, v29);
v30 = staticinvoke <com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap of()>();
v31 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/SortedMap;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v30, v31);
v32 = staticinvoke <com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap of()>();
v33 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/collect/ImmutableSortedMap;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v32, v33);
v34 = staticinvoke <com.google.common.collect.ImmutableMultiset: com.google.common.collect.ImmutableMultiset of()>();
v35 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/collect/Multiset;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v34, v35);
v36 = staticinvoke <com.google.common.collect.ImmutableMultiset: com.google.common.collect.ImmutableMultiset of()>();
v37 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/collect/ImmutableMultiset;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v36, v37);
v38 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/collect/SortedMultiset;");
v39 = interfaceinvoke v38.<com.google.common.collect.SortedMultiset: boolean isEmpty()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertTrue(boolean)>(v39);
v40 = staticinvoke <com.google.common.collect.ImmutableMultimap: com.google.common.collect.ImmutableMultimap of()>();
v41 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/collect/Multimap;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v40, v41);
v42 = staticinvoke <com.google.common.collect.ImmutableMultimap: com.google.common.collect.ImmutableMultimap of()>();
v43 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/collect/ImmutableMultimap;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v42, v43);
v44 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/collect/SortedSetMultimap;");
v45 = interfaceinvoke v44.<com.google.common.collect.SortedSetMultimap: boolean isEmpty()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertTrue(boolean)>(v45);
v46 = staticinvoke <com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableTable of()>();
v47 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/collect/Table;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v46, v47);
v48 = staticinvoke <com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableTable of()>();
v49 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/collect/ImmutableTable;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v48, v49);
v50 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/collect/RowSortedTable;");
v51 = interfaceinvoke v50.<com.google.common.collect.RowSortedTable: boolean isEmpty()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertTrue(boolean)>(v51);
v52 = staticinvoke <com.google.common.collect.ImmutableBiMap: com.google.common.collect.ImmutableBiMap of()>();
v53 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/collect/BiMap;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v52, v53);
v54 = staticinvoke <com.google.common.collect.ImmutableBiMap: com.google.common.collect.ImmutableBiMap of()>();
v55 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/collect/ImmutableBiMap;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v54, v55);
v56 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/collect/ImmutableClassToInstanceMap;");
v57 = virtualinvoke v56.<com.google.common.collect.ImmutableClassToInstanceMap: boolean isEmpty()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertTrue(boolean)>(v57);
v58 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/collect/ClassToInstanceMap;");
v59 = interfaceinvoke v58.<com.google.common.collect.ClassToInstanceMap: boolean isEmpty()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertTrue(boolean)>(v59);
v60 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/collect/ListMultimap;");
v61 = interfaceinvoke v60.<com.google.common.collect.ListMultimap: boolean isEmpty()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertTrue(boolean)>(v61);
v62 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/collect/ImmutableListMultimap;");
v63 = virtualinvoke v62.<com.google.common.collect.ImmutableListMultimap: boolean isEmpty()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertTrue(boolean)>(v63);
v64 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/collect/SetMultimap;");
v65 = interfaceinvoke v64.<com.google.common.collect.SetMultimap: boolean isEmpty()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertTrue(boolean)>(v65);
v66 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/collect/ImmutableSetMultimap;");
v67 = virtualinvoke v66.<com.google.common.collect.ImmutableSetMultimap: boolean isEmpty()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertTrue(boolean)>(v67);
v68 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/collect/MapDifference;");
v69 = interfaceinvoke v68.<com.google.common.collect.MapDifference: boolean areEqual()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertTrue(boolean)>(v69);
v70 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/collect/SortedMapDifference;");
v71 = interfaceinvoke v70.<com.google.common.collect.SortedMapDifference: boolean areEqual()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertTrue(boolean)>(v71);
v72 = staticinvoke <com.google.common.collect.Range: com.google.common.collect.Range all()>();
v73 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/collect/Range;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v72, v73);
v74 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/NavigableSet;");
v75 = interfaceinvoke v74.<java.util.NavigableSet: boolean isEmpty()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertTrue(boolean)>(v75);
v76 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/NavigableMap;");
v77 = interfaceinvoke v76.<java.util.NavigableMap: boolean isEmpty()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertTrue(boolean)>(v77);
v78 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/LinkedList;");
v79 = virtualinvoke v78.<java.util.LinkedList: boolean isEmpty()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertTrue(boolean)>(v79);
v80 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/Deque;");
v81 = interfaceinvoke v80.<java.util.Deque: boolean isEmpty()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertTrue(boolean)>(v81);
v82 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/Queue;");
v83 = interfaceinvoke v82.<java.util.Queue: boolean isEmpty()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertTrue(boolean)>(v83);
v84 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/PriorityQueue;");
v85 = virtualinvoke v84.<java.util.PriorityQueue: boolean isEmpty()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertTrue(boolean)>(v85);
v86 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/BitSet;");
v87 = virtualinvoke v86.<java.util.BitSet: boolean isEmpty()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertTrue(boolean)>(v87);
v88 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/TreeSet;");
v89 = virtualinvoke v88.<java.util.TreeSet: boolean isEmpty()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertTrue(boolean)>(v89);
v90 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/TreeMap;");
v91 = virtualinvoke v90.<java.util.TreeMap: boolean isEmpty()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertTrue(boolean)>(v91);
v92 = newarray (java.lang.Class)[7];
v92[0] = class "Ljava/util/LinkedList;";
v92[1] = class "Ljava/util/Deque;";
v92[2] = class "Ljava/util/Queue;";
v92[3] = class "Ljava/util/PriorityQueue;";
v92[4] = class "Ljava/util/BitSet;";
v92[5] = class "Ljava/util/TreeSet;";
v92[6] = class "Ljava/util/TreeMap;";
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertFreshInstanceReturned(java.lang.Class[])>(v92);
return;
}
public void testGet_misc()
{
com.google.common.testing.ArbitraryInstancesTest v0;
java.lang.Iterable v9;
com.google.common.collect.ImmutableList v6;
int v16, v18;
com.google.common.truth.GuavaOptionalSubject v11;
java.lang.String v3, v7;
java.lang.Class[] v14;
java.lang.Object v1, v10, v12, v13, v15, v17, v2, v4, v5, v8;
v0 := @this: com.google.common.testing.ArbitraryInstancesTest;
v1 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/base/CharMatcher;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertNotNull(java.lang.Object)>(v1);
v2 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/Currency;");
v3 = virtualinvoke v2.<java.util.Currency: java.lang.String getCurrencyCode()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertNotNull(java.lang.Object)>(v3);
v4 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/Locale;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertNotNull(java.lang.Object)>(v4);
v5 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/base/Joiner;");
v6 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object)>("a");
v7 = virtualinvoke v5.<com.google.common.base.Joiner: java.lang.String join(java.lang.Iterable)>(v6);
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertNotNull(java.lang.Object)>(v7);
v8 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/base/Splitter;");
v9 = virtualinvoke v8.<com.google.common.base.Splitter: java.lang.Iterable split(java.lang.CharSequence)>("a,b");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertNotNull(java.lang.Object)>(v9);
v10 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/base/Optional;");
v11 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.GuavaOptionalSubject assertThat(com.google.common.base.Optional)>(v10);
virtualinvoke v11.<com.google.common.truth.GuavaOptionalSubject: void isAbsent()>();
v12 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/base/Stopwatch;");
virtualinvoke v12.<com.google.common.base.Stopwatch: com.google.common.base.Stopwatch start()>();
v13 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/base/Ticker;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertNotNull(java.lang.Object)>(v13);
v14 = newarray (java.lang.Class)[1];
v14[0] = class "Ljava/util/Random;";
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertFreshInstanceReturned(java.lang.Class[])>(v14);
v15 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/Random;");
v16 = virtualinvoke v15.<java.util.Random: int nextInt()>();
v17 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/Random;");
v18 = virtualinvoke v17.<java.util.Random: int nextInt()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(int,int)>(v16, v18);
return;
}
public void testGet_concurrent()
{
com.google.common.testing.ArbitraryInstancesTest v0;
boolean v10, v12, v14, v2, v4, v6, v8;
java.lang.Class[] v18;
java.lang.Object v1, v11, v13, v15, v16, v17, v3, v5, v7, v9;
v0 := @this: com.google.common.testing.ArbitraryInstancesTest;
v1 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/concurrent/BlockingDeque;");
v2 = interfaceinvoke v1.<java.util.concurrent.BlockingDeque: boolean isEmpty()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertTrue(boolean)>(v2);
v3 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/concurrent/BlockingQueue;");
v4 = interfaceinvoke v3.<java.util.concurrent.BlockingQueue: boolean isEmpty()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertTrue(boolean)>(v4);
v5 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/concurrent/DelayQueue;");
v6 = virtualinvoke v5.<java.util.concurrent.DelayQueue: boolean isEmpty()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertTrue(boolean)>(v6);
v7 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/concurrent/SynchronousQueue;");
v8 = virtualinvoke v7.<java.util.concurrent.SynchronousQueue: boolean isEmpty()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertTrue(boolean)>(v8);
v9 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/concurrent/PriorityBlockingQueue;");
v10 = virtualinvoke v9.<java.util.concurrent.PriorityBlockingQueue: boolean isEmpty()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertTrue(boolean)>(v10);
v11 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/concurrent/ConcurrentMap;");
v12 = interfaceinvoke v11.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertTrue(boolean)>(v12);
v13 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/concurrent/ConcurrentNavigableMap;");
v14 = interfaceinvoke v13.<java.util.concurrent.ConcurrentNavigableMap: boolean isEmpty()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertTrue(boolean)>(v14);
v15 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/concurrent/Executor;");
v16 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/lang/Runnable;");
interfaceinvoke v15.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(v16);
v17 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/concurrent/ThreadFactory;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertNotNull(java.lang.Object)>(v17);
v18 = newarray (java.lang.Class)[12];
v18[0] = class "Ljava/util/concurrent/BlockingQueue;";
v18[1] = class "Ljava/util/concurrent/BlockingDeque;";
v18[2] = class "Ljava/util/concurrent/PriorityBlockingQueue;";
v18[3] = class "Ljava/util/concurrent/DelayQueue;";
v18[4] = class "Ljava/util/concurrent/SynchronousQueue;";
v18[5] = class "Ljava/util/concurrent/ConcurrentMap;";
v18[6] = class "Ljava/util/concurrent/ConcurrentNavigableMap;";
v18[7] = class "Ljava/util/concurrent/atomic/AtomicReference;";
v18[8] = class "Ljava/util/concurrent/atomic/AtomicBoolean;";
v18[9] = class "Ljava/util/concurrent/atomic/AtomicInteger;";
v18[10] = class "Ljava/util/concurrent/atomic/AtomicLong;";
v18[11] = class "Lcom/google/common/util/concurrent/AtomicDouble;";
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertFreshInstanceReturned(java.lang.Class[])>(v18);
return;
}
public void testGet_functors()
{
com.google.common.testing.ArbitraryInstancesTest v0;
java.lang.Integer v11, v12, v2, v7, v8;
int v3;
java.lang.Object v1, v10, v4, v6;
boolean v13, v5, v9;
v0 := @this: com.google.common.testing.ArbitraryInstancesTest;
v1 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/Comparator;");
v2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(123);
v3 = interfaceinvoke v1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>("abc", v2);
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(int,int)>(0, v3);
v4 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/base/Predicate;");
v5 = interfaceinvoke v4.<com.google.common.base.Predicate: boolean apply(java.lang.Object)>("abc");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertTrue(boolean)>(v5);
v6 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/base/Equivalence;");
v7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
v8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
v9 = virtualinvoke v6.<com.google.common.base.Equivalence: boolean equivalent(java.lang.Object,java.lang.Object)>(v7, v8);
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertTrue(boolean)>(v9);
v10 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/base/Equivalence;");
v11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);
v12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);
v13 = virtualinvoke v10.<com.google.common.base.Equivalence: boolean equivalent(java.lang.Object,java.lang.Object)>(v11, v12);
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertFalse(boolean)>(v13);
return;
}
public void testGet_comparable()
{
com.google.common.testing.ArbitraryInstancesTest v0;
int v2, v3;
java.lang.Object v1;
java.lang.NullPointerException v5;
boolean v4;
v0 := @this: com.google.common.testing.ArbitraryInstancesTest;
v1 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/lang/Comparable;");
v2 = interfaceinvoke v1.<java.lang.Comparable: int compareTo(java.lang.Object)>(v1);
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(int,int)>(0, v2);
v3 = interfaceinvoke v1.<java.lang.Comparable: int compareTo(java.lang.Object)>("");
if v3 <= 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertTrue(boolean)>(v4);
label3:
interfaceinvoke v1.<java.lang.Comparable: int compareTo(java.lang.Object)>(null);
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void fail()>();
label4:
goto label6;
label5:
v5 := @caughtexception;
label6:
return;
catch java.lang.NullPointerException from label3 to label4 with label5;
}
public void testGet_array()
{
com.google.common.truth.ObjectArraySubject v4, v6;
com.google.common.testing.ArbitraryInstancesTest v0;
java.lang.Object v1, v3, v5;
com.google.common.truth.PrimitiveIntArraySubject v2;
v0 := @this: com.google.common.testing.ArbitraryInstancesTest;
v1 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "[I");
v2 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.PrimitiveIntArraySubject assertThat(int[])>(v1);
virtualinvoke v2.<com.google.common.truth.PrimitiveIntArraySubject: void isEmpty()>();
v3 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "[Ljava/lang/Object;");
v4 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.ObjectArraySubject assertThat(java.lang.Object[])>(v3);
virtualinvoke v4.<com.google.common.truth.ObjectArraySubject: void isEmpty()>();
v5 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "[Ljava/lang/String;");
v6 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.ObjectArraySubject assertThat(java.lang.Object[])>(v5);
virtualinvoke v6.<com.google.common.truth.ObjectArraySubject: void isEmpty()>();
return;
}
public void testGet_enum()
{
com.google.common.testing.ArbitraryInstancesTest v0;
java.lang.Object v1, v3;
com.google.common.testing.ArbitraryInstancesTest$Direction v2;
v0 := @this: com.google.common.testing.ArbitraryInstancesTest;
v1 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/testing/ArbitraryInstancesTest$EmptyEnum;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertNull(java.lang.Object)>(v1);
v2 = <com.google.common.testing.ArbitraryInstancesTest$Direction: com.google.common.testing.ArbitraryInstancesTest$Direction UP>;
v3 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/testing/ArbitraryInstancesTest$Direction;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v2, v3);
return;
}
public void testGet_interface()
{
java.lang.Object v1;
com.google.common.testing.ArbitraryInstancesTest v0;
v0 := @this: com.google.common.testing.ArbitraryInstancesTest;
v1 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/testing/ArbitraryInstancesTest$SomeInterface;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertNull(java.lang.Object)>(v1);
return;
}
public void testGet_runnable()
{
java.lang.Object v1;
com.google.common.testing.ArbitraryInstancesTest v0;
v0 := @this: com.google.common.testing.ArbitraryInstancesTest;
v1 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/lang/Runnable;");
interfaceinvoke v1.<java.lang.Runnable: void run()>();
return;
}
public void testGet_class()
{
com.google.common.testing.ArbitraryInstancesTest$WithPrivateConstructor v3;
com.google.common.testing.ArbitraryInstancesTest$SomeAbstractClass v1;
com.google.common.testing.ArbitraryInstancesTest v0;
com.google.common.testing.ArbitraryInstancesTest$WithExceptionalConstructor v6;
java.lang.Object v2, v4, v5, v7, v8;
v0 := @this: com.google.common.testing.ArbitraryInstancesTest;
v1 = <com.google.common.testing.ArbitraryInstancesTest$SomeAbstractClass: com.google.common.testing.ArbitraryInstancesTest$SomeAbstractClass INSTANCE>;
v2 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/testing/ArbitraryInstancesTest$SomeAbstractClass;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertSame(java.lang.Object,java.lang.Object)>(v1, v2);
v3 = <com.google.common.testing.ArbitraryInstancesTest$WithPrivateConstructor: com.google.common.testing.ArbitraryInstancesTest$WithPrivateConstructor INSTANCE>;
v4 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/testing/ArbitraryInstancesTest$WithPrivateConstructor;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertSame(java.lang.Object,java.lang.Object)>(v3, v4);
v5 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/testing/ArbitraryInstancesTest$NoDefaultConstructor;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertNull(java.lang.Object)>(v5);
v6 = <com.google.common.testing.ArbitraryInstancesTest$WithExceptionalConstructor: com.google.common.testing.ArbitraryInstancesTest$WithExceptionalConstructor INSTANCE>;
v7 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/testing/ArbitraryInstancesTest$WithExceptionalConstructor;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertSame(java.lang.Object,java.lang.Object)>(v6, v7);
v8 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/testing/ArbitraryInstancesTest$NonPublicClass;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertNull(java.lang.Object)>(v8);
return;
}
public void testGet_mutable()
{
com.google.common.testing.ArbitraryInstancesTest v0;
java.lang.Class[] v14;
com.google.common.truth.StringSubject v10, v13, v7;
int v2, v4;
java.lang.Object v1, v11, v3, v5, v8;
java.lang.String v12, v6, v9;
v0 := @this: com.google.common.testing.ArbitraryInstancesTest;
v1 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/ArrayList;");
v2 = virtualinvoke v1.<java.util.ArrayList: int size()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(int,int)>(0, v2);
v3 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/HashMap;");
v4 = virtualinvoke v3.<java.util.HashMap: int size()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(int,int)>(0, v4);
v5 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/lang/Appendable;");
v6 = virtualinvoke v5.<java.lang.Object: java.lang.String toString()>();
v7 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.StringSubject assertThat(java.lang.String)>(v6);
virtualinvoke v7.<com.google.common.truth.StringSubject: void isEmpty()>();
v8 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/lang/StringBuilder;");
v9 = virtualinvoke v8.<java.lang.StringBuilder: java.lang.String toString()>();
v10 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.StringSubject assertThat(java.lang.String)>(v9);
virtualinvoke v10.<com.google.common.truth.StringSubject: void isEmpty()>();
v11 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/lang/StringBuffer;");
v12 = virtualinvoke v11.<java.lang.StringBuffer: java.lang.String toString()>();
v13 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.StringSubject assertThat(java.lang.String)>(v12);
virtualinvoke v13.<com.google.common.truth.StringSubject: void isEmpty()>();
v14 = newarray (java.lang.Class)[7];
v14[0] = class "Ljava/util/ArrayList;";
v14[1] = class "Ljava/util/HashMap;";
v14[2] = class "Ljava/lang/Appendable;";
v14[3] = class "Ljava/lang/StringBuilder;";
v14[4] = class "Ljava/lang/StringBuffer;";
v14[5] = class "Ljava/lang/Throwable;";
v14[6] = class "Ljava/lang/Exception;";
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertFreshInstanceReturned(java.lang.Class[])>(v14);
return;
}
public void testGet_io() throws java.io.IOException
{
java.nio.CharBuffer v8;
com.google.common.testing.ArbitraryInstancesTest v0;
int v10, v12, v13, v15, v16, v18, v2, v20, v22, v24, v26, v28, v3, v30, v32, v5, v6, v9;
com.google.common.io.CharSource v39;
com.google.common.io.ByteSource v37;
java.lang.Class[] v36;
java.lang.Object v1, v11, v14, v17, v19, v21, v23, v25, v27, v29, v31, v33, v34, v35, v38, v4, v40, v41, v42, v7;
v0 := @this: com.google.common.testing.ArbitraryInstancesTest;
v1 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/io/InputStream;");
v2 = virtualinvoke v1.<java.io.InputStream: int read()>();
v3 = (int) -1;
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(int,int)>(v3, v2);
v4 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/io/ByteArrayInputStream;");
v5 = virtualinvoke v4.<java.io.ByteArrayInputStream: int read()>();
v6 = (int) -1;
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(int,int)>(v6, v5);
v7 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/lang/Readable;");
v8 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>(1);
v9 = interfaceinvoke v7.<java.lang.Readable: int read(java.nio.CharBuffer)>(v8);
v10 = (int) -1;
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(int,int)>(v10, v9);
v11 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/io/Reader;");
v12 = virtualinvoke v11.<java.io.Reader: int read()>();
v13 = (int) -1;
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(int,int)>(v13, v12);
v14 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/io/StringReader;");
v15 = virtualinvoke v14.<java.io.StringReader: int read()>();
v16 = (int) -1;
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(int,int)>(v16, v15);
v17 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/nio/Buffer;");
v18 = virtualinvoke v17.<java.nio.Buffer: int capacity()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(int,int)>(0, v18);
v19 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/nio/CharBuffer;");
v20 = virtualinvoke v19.<java.nio.CharBuffer: int capacity()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(int,int)>(0, v20);
v21 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/nio/ByteBuffer;");
v22 = virtualinvoke v21.<java.nio.ByteBuffer: int capacity()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(int,int)>(0, v22);
v23 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/nio/ShortBuffer;");
v24 = virtualinvoke v23.<java.nio.ShortBuffer: int capacity()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(int,int)>(0, v24);
v25 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/nio/IntBuffer;");
v26 = virtualinvoke v25.<java.nio.IntBuffer: int capacity()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(int,int)>(0, v26);
v27 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/nio/LongBuffer;");
v28 = virtualinvoke v27.<java.nio.LongBuffer: int capacity()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(int,int)>(0, v28);
v29 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/nio/FloatBuffer;");
v30 = virtualinvoke v29.<java.nio.FloatBuffer: int capacity()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(int,int)>(0, v30);
v31 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/nio/DoubleBuffer;");
v32 = virtualinvoke v31.<java.nio.DoubleBuffer: int capacity()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(int,int)>(0, v32);
v33 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/io/PrintStream;");
virtualinvoke v33.<java.io.PrintStream: void println(java.lang.String)>("test");
v34 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/io/PrintWriter;");
virtualinvoke v34.<java.io.PrintWriter: void println(java.lang.String)>("test");
v35 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/io/File;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertNotNull(java.lang.Object)>(v35);
v36 = newarray (java.lang.Class)[6];
v36[0] = class "Ljava/io/ByteArrayOutputStream;";
v36[1] = class "Ljava/io/OutputStream;";
v36[2] = class "Ljava/io/Writer;";
v36[3] = class "Ljava/io/StringWriter;";
v36[4] = class "Ljava/io/PrintStream;";
v36[5] = class "Ljava/io/PrintWriter;";
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertFreshInstanceReturned(java.lang.Class[])>(v36);
v37 = staticinvoke <com.google.common.io.ByteSource: com.google.common.io.ByteSource empty()>();
v38 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/io/ByteSource;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v37, v38);
v39 = staticinvoke <com.google.common.io.CharSource: com.google.common.io.CharSource empty()>();
v40 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/io/CharSource;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.Object,java.lang.Object)>(v39, v40);
v41 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/io/ByteSink;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertNotNull(java.lang.Object)>(v41);
v42 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/io/CharSink;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertNotNull(java.lang.Object)>(v42);
return;
}
public void testGet_reflect()
{
com.google.common.testing.ArbitraryInstancesTest v0;
java.lang.Object v1, v2, v3;
v0 := @this: com.google.common.testing.ArbitraryInstancesTest;
v1 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/lang/reflect/Type;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertNotNull(java.lang.Object)>(v1);
v2 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/lang/reflect/AnnotatedElement;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertNotNull(java.lang.Object)>(v2);
v3 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/lang/reflect/GenericDeclaration;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertNotNull(java.lang.Object)>(v3);
return;
}
public void testGet_regex()
{
com.google.common.testing.ArbitraryInstancesTest v0;
int v6;
java.lang.Object v3, v5;
java.lang.String v2, v4;
java.util.regex.Pattern v1;
v0 := @this: com.google.common.testing.ArbitraryInstancesTest;
v1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("");
v2 = virtualinvoke v1.<java.util.regex.Pattern: java.lang.String pattern()>();
v3 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/regex/Pattern;");
v4 = virtualinvoke v3.<java.util.regex.Pattern: java.lang.String pattern()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(java.lang.String,java.lang.String)>(v2, v4);
v5 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Ljava/util/regex/MatchResult;");
v6 = interfaceinvoke v5.<java.util.regex.MatchResult: int groupCount()>();
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertEquals(int,int)>(0, v6);
return;
}
public void testGet_usePublicConstant()
{
java.lang.Object v2;
com.google.common.testing.ArbitraryInstancesTest$WithPublicConstant v1;
com.google.common.testing.ArbitraryInstancesTest v0;
v0 := @this: com.google.common.testing.ArbitraryInstancesTest;
v1 = <com.google.common.testing.ArbitraryInstancesTest$WithPublicConstant: com.google.common.testing.ArbitraryInstancesTest$WithPublicConstant INSTANCE>;
v2 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/testing/ArbitraryInstancesTest$WithPublicConstant;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertSame(java.lang.Object,java.lang.Object)>(v1, v2);
return;
}
public void testGet_useFirstPublicConstant()
{
com.google.common.testing.ArbitraryInstancesTest$WithPublicConstants v1;
java.lang.Object v2;
com.google.common.testing.ArbitraryInstancesTest v0;
v0 := @this: com.google.common.testing.ArbitraryInstancesTest;
v1 = <com.google.common.testing.ArbitraryInstancesTest$WithPublicConstants: com.google.common.testing.ArbitraryInstancesTest$WithPublicConstants FIRST>;
v2 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/testing/ArbitraryInstancesTest$WithPublicConstants;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertSame(java.lang.Object,java.lang.Object)>(v1, v2);
return;
}
public void testGet_nullConstantIgnored()
{
java.lang.Object v2;
com.google.common.testing.ArbitraryInstancesTest$FirstConstantIsNull v1;
com.google.common.testing.ArbitraryInstancesTest v0;
v0 := @this: com.google.common.testing.ArbitraryInstancesTest;
v1 = <com.google.common.testing.ArbitraryInstancesTest$FirstConstantIsNull: com.google.common.testing.ArbitraryInstancesTest$FirstConstantIsNull SECOND>;
v2 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/testing/ArbitraryInstancesTest$FirstConstantIsNull;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertSame(java.lang.Object,java.lang.Object)>(v1, v2);
return;
}
public void testGet_constantWithGenericsNotUsed()
{
java.lang.Object v1;
com.google.common.testing.ArbitraryInstancesTest v0;
v0 := @this: com.google.common.testing.ArbitraryInstancesTest;
v1 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/testing/ArbitraryInstancesTest$WithGenericConstant;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertNull(java.lang.Object)>(v1);
return;
}
public void testGet_nullConstant()
{
java.lang.Object v1;
com.google.common.testing.ArbitraryInstancesTest v0;
v0 := @this: com.google.common.testing.ArbitraryInstancesTest;
v1 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/testing/ArbitraryInstancesTest$WithNullConstant;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertNull(java.lang.Object)>(v1);
return;
}
public void testGet_constantTypeDoesNotMatch()
{
java.lang.Object v1;
com.google.common.testing.ArbitraryInstancesTest v0;
v0 := @this: com.google.common.testing.ArbitraryInstancesTest;
v1 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/testing/ArbitraryInstancesTest$ParentClassHasConstant;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertNull(java.lang.Object)>(v1);
return;
}
public void testGet_nonPublicConstantNotUsed()
{
java.lang.Object v1;
com.google.common.testing.ArbitraryInstancesTest v0;
v0 := @this: com.google.common.testing.ArbitraryInstancesTest;
v1 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/testing/ArbitraryInstancesTest$NonPublicConstantIgnored;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertNull(java.lang.Object)>(v1);
return;
}
public void testGet_nonStaticFieldNotUsed()
{
java.lang.Object v1;
com.google.common.testing.ArbitraryInstancesTest v0;
v0 := @this: com.google.common.testing.ArbitraryInstancesTest;
v1 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/testing/ArbitraryInstancesTest$NonStaticFieldIgnored;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertNull(java.lang.Object)>(v1);
return;
}
public void testGet_constructorPreferredOverConstants()
{
com.google.common.testing.ArbitraryInstancesTest v0;
java.lang.Object v1, v2, v3;
boolean v4;
v0 := @this: com.google.common.testing.ArbitraryInstancesTest;
v1 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/testing/ArbitraryInstancesTest$WithPublicConstructorAndConstant;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertNotNull(java.lang.Object)>(v1);
v2 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/testing/ArbitraryInstancesTest$WithPublicConstructorAndConstant;");
v3 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/testing/ArbitraryInstancesTest$WithPublicConstructorAndConstant;");
if v2 == v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertTrue(boolean)>(v4);
return;
}
public void testGet_nonFinalFieldNotUsed()
{
java.lang.Object v1;
com.google.common.testing.ArbitraryInstancesTest v0;
v0 := @this: com.google.common.testing.ArbitraryInstancesTest;
v1 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(class "Lcom/google/common/testing/ArbitraryInstancesTest$NonFinalFieldIgnored;");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertNull(java.lang.Object)>(v1);
return;
}
private static transient void assertFreshInstanceReturned(java.lang.Class[])
{
java.lang.Class[] v0;
int v1, v2;
java.lang.Class v3;
java.lang.Object v4, v7;
java.lang.String v5, v6;
v0 := @parameter0: java.lang.Class[];
v1 = lengthof v0;
v2 = 0;
label1:
if v2 >= v1 goto label2;
v3 = v0[v2];
v4 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(v3);
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Class)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Expected to return non-null for: \u0001");
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertNotNull(java.lang.String,java.lang.Object)>(v5, v4);
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Class)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Expected to return fresh instance for: \u0001");
v7 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(v3);
staticinvoke <com.google.common.testing.ArbitraryInstancesTest: void assertNotSame(java.lang.String,java.lang.Object,java.lang.Object)>(v6, v4, v7);
v2 = v2 + 1;
goto label1;
label2:
return;
}
}