public class com.google.common.testing.ClassSanityTesterTest extends junit.framework.TestCase
{
private final com.google.common.testing.ClassSanityTester tester;
public void <init>()
{
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
specialinvoke v0.<junit.framework.TestCase: void <init>()>();
v1 = new com.google.common.testing.ClassSanityTester;
specialinvoke v1.<com.google.common.testing.ClassSanityTester: void <init>()>();
v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester> = v1;
return;
}
public void testEqualsOnReturnValues_good() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester v2;
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v2 = virtualinvoke v1.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester forAllPublicStaticMethods(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$GoodEqualsFactory;");
virtualinvoke v2.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester testEquals()>();
return;
}
public void testForAllPublicStaticMethods_noPublicStaticMethods() throws java.lang.Exception
{
java.lang.Throwable v3;
com.google.common.testing.ClassSanityTesterTest v0;
java.lang.String v6;
com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester v2;
com.google.common.testing.ClassSanityTester v1;
com.google.common.truth.StringSubject v5;
com.google.common.truth.ThrowableSubject v4;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
label1:
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v2 = virtualinvoke v1.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester forAllPublicStaticMethods(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$NoPublicStaticMethods;");
virtualinvoke v2.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester testEquals()>();
label2:
goto label4;
label3:
v3 := @caughtexception;
v4 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.ThrowableSubject assertThat(java.lang.Throwable)>(v3);
v5 = virtualinvoke v4.<com.google.common.truth.ThrowableSubject: com.google.common.truth.StringSubject hasMessageThat()>();
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$NoPublicStaticMethods;") <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("No public static methods that return java.lang.Object or subtype are found in \u0001.");
virtualinvoke v5.<com.google.common.truth.StringSubject: void isEqualTo(java.lang.Object)>(v6);
return;
label4:
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void fail()>();
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testEqualsOnReturnValues_bad() throws java.lang.Exception
{
java.lang.Throwable v3;
com.google.common.testing.ClassSanityTesterTest v0;
com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester v2;
com.google.common.testing.ClassSanityTester v1;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
label1:
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v2 = virtualinvoke v1.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester forAllPublicStaticMethods(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$BadEqualsFactory;");
virtualinvoke v2.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester testEquals()>();
label2:
goto label4;
label3:
v3 := @caughtexception;
return;
label4:
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void fail()>();
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testNullsOnReturnValues_good() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester v2;
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v2 = virtualinvoke v1.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester forAllPublicStaticMethods(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$GoodNullsFactory;");
virtualinvoke v2.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester testNulls()>();
return;
}
public void testNullsOnReturnValues_bad() throws java.lang.Exception
{
java.lang.Throwable v4;
com.google.common.testing.ClassSanityTesterTest v0;
com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester v2, v3;
com.google.common.testing.ClassSanityTester v1;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
label1:
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v2 = virtualinvoke v1.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester forAllPublicStaticMethods(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$BadNullsFactory;");
v3 = virtualinvoke v2.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester thatReturn(java.lang.Class)>(class "Ljava/lang/Object;");
virtualinvoke v3.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester testNulls()>();
label2:
goto label4;
label3:
v4 := @caughtexception;
return;
label4:
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void fail()>();
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testNullsOnReturnValues_returnTypeFiltered() throws java.lang.Exception
{
java.lang.Throwable v4;
com.google.common.truth.StringSubject v6;
com.google.common.testing.ClassSanityTesterTest v0;
java.lang.String v7;
com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester v2, v3;
com.google.common.testing.ClassSanityTester v1;
com.google.common.truth.ThrowableSubject v5;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
label1:
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v2 = virtualinvoke v1.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester forAllPublicStaticMethods(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$BadNullsFactory;");
v3 = virtualinvoke v2.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester thatReturn(java.lang.Class)>(class "Ljava/lang/Iterable;");
virtualinvoke v3.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester testNulls()>();
label2:
goto label4;
label3:
v4 := @caughtexception;
v5 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.ThrowableSubject assertThat(java.lang.Throwable)>(v4);
v6 = virtualinvoke v5.<com.google.common.truth.ThrowableSubject: com.google.common.truth.StringSubject hasMessageThat()>();
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$BadNullsFactory;") <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("No public static methods that return java.lang.Iterable or subtype are found in \u0001.");
virtualinvoke v6.<com.google.common.truth.StringSubject: void isEqualTo(java.lang.Object)>(v7);
return;
label4:
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void fail()>();
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testSerializableOnReturnValues_good() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester v2;
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v2 = virtualinvoke v1.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester forAllPublicStaticMethods(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$GoodSerializableFactory;");
virtualinvoke v2.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester testSerializable()>();
return;
}
public void testSerializableOnReturnValues_bad() throws java.lang.Exception
{
java.lang.Throwable v3;
com.google.common.testing.ClassSanityTesterTest v0;
com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester v2;
com.google.common.testing.ClassSanityTester v1;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
label1:
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v2 = virtualinvoke v1.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester forAllPublicStaticMethods(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$BadSerializableFactory;");
virtualinvoke v2.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester testSerializable()>();
label2:
goto label4;
label3:
v3 := @caughtexception;
return;
label4:
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void fail()>();
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testEqualsAndSerializableOnReturnValues_equalsIsGoodButNotSerializable() throws java.lang.Exception
{
java.lang.Throwable v3;
com.google.common.testing.ClassSanityTesterTest v0;
com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester v2;
com.google.common.testing.ClassSanityTester v1;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
label1:
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v2 = virtualinvoke v1.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester forAllPublicStaticMethods(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$GoodEqualsFactory;");
virtualinvoke v2.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester testEqualsAndSerializable()>();
label2:
goto label4;
label3:
v3 := @caughtexception;
return;
label4:
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void fail(java.lang.String)>("should have failed");
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testEqualsAndSerializableOnReturnValues_serializableButNotEquals() throws java.lang.Exception
{
java.lang.Throwable v3;
com.google.common.testing.ClassSanityTesterTest v0;
com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester v2;
com.google.common.testing.ClassSanityTester v1;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
label1:
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v2 = virtualinvoke v1.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester forAllPublicStaticMethods(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$GoodSerializableFactory;");
virtualinvoke v2.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester testEqualsAndSerializable()>();
label2:
goto label4;
label3:
v3 := @caughtexception;
return;
label4:
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void fail(java.lang.String)>("should have failed");
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testEqualsAndSerializableOnReturnValues_good() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester v2;
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v2 = virtualinvoke v1.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester forAllPublicStaticMethods(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$GoodEqualsAndSerializableFactory;");
virtualinvoke v2.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester testEqualsAndSerializable()>();
return;
}
public void testEqualsForReturnValues_factoryReturnsNullButNotAnnotated() throws java.lang.Exception
{
java.lang.Throwable v3;
com.google.common.testing.ClassSanityTesterTest v0;
com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester v2;
com.google.common.testing.ClassSanityTester v1;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
label1:
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v2 = virtualinvoke v1.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester forAllPublicStaticMethods(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$FactoryThatReturnsNullButNotAnnotated;");
virtualinvoke v2.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester testEquals()>();
label2:
goto label4;
label3:
v3 := @caughtexception;
return;
label4:
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void fail()>();
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testNullsForReturnValues_factoryReturnsNullButNotAnnotated() throws java.lang.Exception
{
java.lang.Throwable v3;
com.google.common.testing.ClassSanityTesterTest v0;
com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester v2;
com.google.common.testing.ClassSanityTester v1;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
label1:
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v2 = virtualinvoke v1.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester forAllPublicStaticMethods(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$FactoryThatReturnsNullButNotAnnotated;");
virtualinvoke v2.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester testNulls()>();
label2:
goto label4;
label3:
v3 := @caughtexception;
return;
label4:
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void fail()>();
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testSerializableForReturnValues_factoryReturnsNullButNotAnnotated() throws java.lang.Exception
{
java.lang.Throwable v3;
com.google.common.testing.ClassSanityTesterTest v0;
com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester v2;
com.google.common.testing.ClassSanityTester v1;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
label1:
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v2 = virtualinvoke v1.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester forAllPublicStaticMethods(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$FactoryThatReturnsNullButNotAnnotated;");
virtualinvoke v2.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester testSerializable()>();
label2:
goto label4;
label3:
v3 := @caughtexception;
return;
label4:
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void fail()>();
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testEqualsAndSerializableForReturnValues_factoryReturnsNullButNotAnnotated() throws java.lang.Exception
{
java.lang.Throwable v3;
com.google.common.testing.ClassSanityTesterTest v0;
com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester v2;
com.google.common.testing.ClassSanityTester v1;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
label1:
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v2 = virtualinvoke v1.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester forAllPublicStaticMethods(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$FactoryThatReturnsNullButNotAnnotated;");
virtualinvoke v2.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester testEqualsAndSerializable()>();
label2:
goto label4;
label3:
v3 := @caughtexception;
return;
label4:
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void fail()>();
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testEqualsForReturnValues_factoryReturnsNullAndAnnotated() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester v2;
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v2 = virtualinvoke v1.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester forAllPublicStaticMethods(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$FactoryThatReturnsNullAndAnnotated;");
virtualinvoke v2.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester testEquals()>();
return;
}
public void testNullsForReturnValues_factoryReturnsNullAndAnnotated() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester v2;
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v2 = virtualinvoke v1.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester forAllPublicStaticMethods(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$FactoryThatReturnsNullAndAnnotated;");
virtualinvoke v2.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester testNulls()>();
return;
}
public void testSerializableForReturnValues_factoryReturnsNullAndAnnotated() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester v2;
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v2 = virtualinvoke v1.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester forAllPublicStaticMethods(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$FactoryThatReturnsNullAndAnnotated;");
virtualinvoke v2.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester testSerializable()>();
return;
}
public void testEqualsAndSerializableForReturnValues_factoryReturnsNullAndAnnotated() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester v2;
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v2 = virtualinvoke v1.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester forAllPublicStaticMethods(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$FactoryThatReturnsNullAndAnnotated;");
virtualinvoke v2.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester testEqualsAndSerializable()>();
return;
}
public void testGoodEquals() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: void testEquals(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$GoodEquals;");
return;
}
public void testEquals_interface()
{
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: void testEquals(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$AnInterface;");
return;
}
public void testEquals_abstractClass()
{
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: void testEquals(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$AnAbstractClass;");
return;
}
public void testEquals_enum()
{
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: void testEquals(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$OneConstantEnum;");
return;
}
public void testBadEquals() throws java.lang.Exception
{
java.lang.Throwable v2;
com.google.common.testing.ClassSanityTesterTest v0;
com.google.common.testing.ClassSanityTester v1;
com.google.common.truth.StringSubject v4;
com.google.common.truth.ThrowableSubject v3;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
label1:
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: void testEquals(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$BadEquals;");
label2:
goto label4;
label3:
v2 := @caughtexception;
v3 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.ThrowableSubject assertThat(java.lang.Throwable)>(v2);
v4 = virtualinvoke v3.<com.google.common.truth.ThrowableSubject: com.google.common.truth.StringSubject hasMessageThat()>();
virtualinvoke v4.<com.google.common.truth.StringSubject: void contains(java.lang.CharSequence)>("create(null)");
return;
label4:
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void fail(java.lang.String)>("should have failed");
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testBadEquals_withParameterizedType() throws java.lang.Exception
{
java.lang.Throwable v2;
com.google.common.testing.ClassSanityTesterTest v0;
com.google.common.testing.ClassSanityTester v1;
com.google.common.truth.StringSubject v4;
com.google.common.truth.ThrowableSubject v3;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
label1:
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: void testEquals(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$BadEqualsWithParameterizedType;");
label2:
goto label4;
label3:
v2 := @caughtexception;
v3 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.ThrowableSubject assertThat(java.lang.Throwable)>(v2);
v4 = virtualinvoke v3.<com.google.common.truth.ThrowableSubject: com.google.common.truth.StringSubject hasMessageThat()>();
virtualinvoke v4.<com.google.common.truth.StringSubject: void contains(java.lang.CharSequence)>("create([[1]])");
return;
label4:
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void fail(java.lang.String)>("should have failed");
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testBadEquals_withSingleParameterValue() throws java.lang.Exception
{
java.lang.Throwable v2;
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
label1:
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: void doTestEquals(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$ConstructorParameterWithOptionalNotInstantiable;");
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void fail()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
return;
catch com.google.common.testing.ClassSanityTester$ParameterHasNoDistinctValueException from label1 to label2 with label3;
}
public void testGoodReferentialEqualityComparison() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTesterTest v0;
com.google.common.testing.ClassSanityTester v1, v2, v3;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: void testEquals(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$UsesEnum;");
v2 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v2.<com.google.common.testing.ClassSanityTester: void testEquals(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$UsesReferentialEquality;");
v3 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v3.<com.google.common.testing.ClassSanityTester: void testEquals(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$SameListInstance;");
return;
}
public void testStreamParameterSkippedForNullTesting() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: void testNulls(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$WithStreamParameter;");
return;
}
public void testEqualsUsingReferentialEquality() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
specialinvoke v0.<com.google.common.testing.ClassSanityTesterTest: void assertBadUseOfReferentialEquality(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$SameIntegerInstance;");
specialinvoke v0.<com.google.common.testing.ClassSanityTesterTest: void assertBadUseOfReferentialEquality(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$SameLongInstance;");
specialinvoke v0.<com.google.common.testing.ClassSanityTesterTest: void assertBadUseOfReferentialEquality(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$SameFloatInstance;");
specialinvoke v0.<com.google.common.testing.ClassSanityTesterTest: void assertBadUseOfReferentialEquality(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$SameDoubleInstance;");
specialinvoke v0.<com.google.common.testing.ClassSanityTesterTest: void assertBadUseOfReferentialEquality(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$SameShortInstance;");
specialinvoke v0.<com.google.common.testing.ClassSanityTesterTest: void assertBadUseOfReferentialEquality(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$SameByteInstance;");
specialinvoke v0.<com.google.common.testing.ClassSanityTesterTest: void assertBadUseOfReferentialEquality(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$SameCharacterInstance;");
specialinvoke v0.<com.google.common.testing.ClassSanityTesterTest: void assertBadUseOfReferentialEquality(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$SameBooleanInstance;");
specialinvoke v0.<com.google.common.testing.ClassSanityTesterTest: void assertBadUseOfReferentialEquality(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$SameObjectInstance;");
specialinvoke v0.<com.google.common.testing.ClassSanityTesterTest: void assertBadUseOfReferentialEquality(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$SameStringInstance;");
specialinvoke v0.<com.google.common.testing.ClassSanityTesterTest: void assertBadUseOfReferentialEquality(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$SameInterfaceInstance;");
return;
}
private void assertBadUseOfReferentialEquality(java.lang.Class) throws java.lang.Exception
{
java.lang.Throwable v3;
com.google.common.truth.StringSubject v5;
com.google.common.testing.ClassSanityTesterTest v0;
java.lang.Class v1;
java.lang.String v6, v7, v8;
com.google.common.testing.ClassSanityTester v2;
com.google.common.truth.ThrowableSubject v4;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 := @parameter0: java.lang.Class;
label1:
v2 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v2.<com.google.common.testing.ClassSanityTester: void testEquals(java.lang.Class)>(v1);
label2:
goto label4;
label3:
v3 := @caughtexception;
v4 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.ThrowableSubject assertThat(java.lang.Throwable)>(v3);
v5 = virtualinvoke v4.<com.google.common.truth.ThrowableSubject: com.google.common.truth.StringSubject hasMessageThat()>();
v6 = virtualinvoke v1.<java.lang.Class: java.lang.String getSimpleName()>();
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001(");
virtualinvoke v5.<com.google.common.truth.StringSubject: void contains(java.lang.CharSequence)>(v7);
return;
label4:
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Class)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("should have failed for \u0001");
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void fail(java.lang.String)>(v8);
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testParameterNotInstantiableForEqualsTest() throws java.lang.Exception
{
java.lang.Throwable v2;
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
label1:
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: void doTestEquals(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$ConstructorParameterNotInstantiable;");
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void fail(java.lang.String)>("should have failed");
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
return;
catch com.google.common.testing.ClassSanityTester$ParameterNotInstantiableException from label1 to label2 with label3;
}
public void testNoDistinctValueForEqualsTest() throws java.lang.Exception
{
java.lang.Throwable v2;
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
label1:
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: void doTestEquals(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$ConstructorParameterSingleValue;");
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void fail(java.lang.String)>("should have failed");
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
return;
catch com.google.common.testing.ClassSanityTester$ParameterHasNoDistinctValueException from label1 to label2 with label3;
}
public void testConstructorThrowsForEqualsTest() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
java.lang.reflect.InvocationTargetException v2;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
label1:
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: void doTestEquals(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$ConstructorThrows;");
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void fail(java.lang.String)>("should have failed");
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
return;
catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
}
public void testFactoryMethodReturnsNullForEqualsTest() throws java.lang.Exception
{
java.lang.Throwable v2;
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
label1:
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: void doTestEquals(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$FactoryMethodReturnsNullAndAnnotated;");
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void fail(java.lang.String)>("should have failed");
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
return;
catch com.google.common.testing.ClassSanityTester$FactoryMethodReturnsNullException from label1 to label2 with label3;
}
public void testFactoryMethodReturnsNullButNotAnnotatedInEqualsTest() throws java.lang.Exception
{
java.lang.Throwable v2;
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
label1:
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: void testEquals(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$FactoryMethodReturnsNullButNotAnnotated;");
label2:
goto label4;
label3:
v2 := @caughtexception;
return;
label4:
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void fail(java.lang.String)>("should have failed");
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testNoEqualsChecksOnEnum() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTesterTest v0;
com.google.common.testing.ClassSanityTester v1, v2, v3;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: void testEquals(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$OneConstantEnum;");
v2 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v2.<com.google.common.testing.ClassSanityTester: void testEquals(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$NoConstantEnum;");
v3 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v3.<com.google.common.testing.ClassSanityTester: void testEquals(java.lang.Class)>(class "Ljava/util/concurrent/TimeUnit;");
return;
}
public void testNoEqualsChecksOnInterface() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: void testEquals(java.lang.Class)>(class "Ljava/lang/Runnable;");
return;
}
public void testNoEqualsChecksOnAnnotation() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: void testEquals(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$MyAnnotation;");
return;
}
public void testGoodNulls() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: void testNulls(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$GoodNulls;");
return;
}
public void testNoNullCheckNeededDespiteNotInstantiable() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
com.google.common.testing.NullPointerTester$Visibility v2;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v2 = <com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PACKAGE>;
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: void doTestNulls(java.lang.Class,com.google.common.testing.NullPointerTester$Visibility)>(class "Lcom/google/common/testing/ClassSanityTesterTest$NoNullCheckNeededDespiteNotInstantiable;", v2);
return;
}
public void testNulls_interface()
{
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: void testNulls(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$AnInterface;");
return;
}
public void testNulls_abstractClass()
{
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: void testNulls(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$AnAbstractClass;");
return;
}
public void testNulls_enum() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTesterTest v0;
com.google.common.testing.ClassSanityTester v1, v2, v3;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: void testNulls(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$OneConstantEnum;");
v2 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v2.<com.google.common.testing.ClassSanityTester: void testNulls(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$NoConstantEnum;");
v3 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v3.<com.google.common.testing.ClassSanityTester: void testNulls(java.lang.Class)>(class "Ljava/util/concurrent/TimeUnit;");
return;
}
public void testNulls_parameterOptionalNotInstantiable() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: void testNulls(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$ConstructorParameterWithOptionalNotInstantiable;");
return;
}
public void testEnumFailsToCheckNull() throws java.lang.Exception
{
java.lang.Throwable v2;
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
label1:
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: void testNulls(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$EnumFailsToCheckNull;");
label2:
goto label4;
label3:
v2 := @caughtexception;
return;
label4:
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void fail(java.lang.String)>("should have failed");
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testNoNullChecksOnInterface() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: void testNulls(java.lang.Class)>(class "Ljava/lang/Runnable;");
return;
}
public void testNoNullChecksOnAnnotation() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: void testNulls(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$MyAnnotation;");
return;
}
public void testBadNulls() throws java.lang.Exception
{
java.lang.Throwable v2;
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
label1:
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: void testNulls(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$BadNulls;");
label2:
goto label4;
label3:
v2 := @caughtexception;
return;
label4:
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void fail(java.lang.String)>("should have failed");
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testInstantiate_factoryMethodReturnsNullButNotAnnotated() throws java.lang.Exception
{
java.lang.Throwable v2;
com.google.common.testing.ClassSanityTesterTest v0;
com.google.common.testing.ClassSanityTester v1;
com.google.common.truth.StringSubject v4;
com.google.common.truth.ThrowableSubject v3;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
label1:
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: java.lang.Object instantiate(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$FactoryMethodReturnsNullButNotAnnotated;");
label2:
goto label4;
label3:
v2 := @caughtexception;
v3 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.ThrowableSubject assertThat(java.lang.Throwable)>(v2);
v4 = virtualinvoke v3.<com.google.common.truth.ThrowableSubject: com.google.common.truth.StringSubject hasMessageThat()>();
virtualinvoke v4.<com.google.common.truth.StringSubject: void contains(java.lang.CharSequence)>("@Nullable");
return;
label4:
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void fail(java.lang.String)>("should have failed");
return;
catch junit.framework.AssertionFailedError from label1 to label2 with label3;
}
public void testInstantiate_factoryMethodReturnsNullAndAnnotated() throws java.lang.Exception
{
java.lang.Throwable v2;
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
label1:
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: java.lang.Object instantiate(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$FactoryMethodReturnsNullAndAnnotated;");
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void fail(java.lang.String)>("should have failed");
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
return;
catch com.google.common.testing.ClassSanityTester$FactoryMethodReturnsNullException from label1 to label2 with label3;
}
public void testInstantiate_factoryMethodAcceptsNull() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTesterTest v0;
java.lang.Object v2;
java.lang.String v3;
com.google.common.testing.ClassSanityTester v1;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v2 = virtualinvoke v1.<com.google.common.testing.ClassSanityTester: java.lang.Object instantiate(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$FactoryMethodAcceptsNull;");
v3 = v2.<com.google.common.testing.ClassSanityTesterTest$FactoryMethodAcceptsNull: java.lang.String name>;
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void assertNull(java.lang.Object)>(v3);
return;
}
public void testInstantiate_factoryMethodDoesNotAcceptNull() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTesterTest v0;
java.lang.Object v2;
java.lang.String v3;
com.google.common.testing.ClassSanityTester v1;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v2 = virtualinvoke v1.<com.google.common.testing.ClassSanityTester: java.lang.Object instantiate(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$FactoryMethodDoesNotAcceptNull;");
v3 = v2.<com.google.common.testing.ClassSanityTesterTest$FactoryMethodDoesNotAcceptNull: java.lang.String name>;
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void assertNotNull(java.lang.Object)>(v3);
return;
}
public void testInstantiate_constructorAcceptsNull() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTesterTest v0;
java.lang.Object v2;
java.lang.String v3;
com.google.common.testing.ClassSanityTester v1;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v2 = virtualinvoke v1.<com.google.common.testing.ClassSanityTester: java.lang.Object instantiate(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$ConstructorAcceptsNull;");
v3 = v2.<com.google.common.testing.ClassSanityTesterTest$ConstructorAcceptsNull: java.lang.String name>;
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void assertNull(java.lang.Object)>(v3);
return;
}
public void testInstantiate_constructorDoesNotAcceptNull() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTesterTest v0;
java.lang.Object v2;
java.lang.String v3;
com.google.common.testing.ClassSanityTester v1;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v2 = virtualinvoke v1.<com.google.common.testing.ClassSanityTester: java.lang.Object instantiate(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$ConstructorDoesNotAcceptNull;");
v3 = v2.<com.google.common.testing.ClassSanityTesterTest$ConstructorDoesNotAcceptNull: java.lang.String name>;
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void assertNotNull(java.lang.Object)>(v3);
return;
}
public void testInstantiate_notInstantiable() throws java.lang.Exception
{
java.lang.Object v2;
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v2 = virtualinvoke v1.<com.google.common.testing.ClassSanityTester: java.lang.Object instantiate(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$NotInstantiable;");
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void assertNull(java.lang.Object)>(v2);
return;
}
public void testInstantiate_noConstantEnum() throws java.lang.Exception
{
java.lang.Object v2;
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v2 = virtualinvoke v1.<com.google.common.testing.ClassSanityTester: java.lang.Object instantiate(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$NoConstantEnum;");
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void assertNull(java.lang.Object)>(v2);
return;
}
public void testInstantiate_oneConstantEnum() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTesterTest v0;
java.lang.Object v3;
com.google.common.testing.ClassSanityTester v2;
com.google.common.testing.ClassSanityTesterTest$OneConstantEnum v1;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = <com.google.common.testing.ClassSanityTesterTest$OneConstantEnum: com.google.common.testing.ClassSanityTesterTest$OneConstantEnum A>;
v2 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v3 = virtualinvoke v2.<com.google.common.testing.ClassSanityTester: java.lang.Object instantiate(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$OneConstantEnum;");
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void assertEquals(java.lang.Object,java.lang.Object)>(v1, v3);
return;
}
public void testInstantiate_interface() throws java.lang.Exception
{
java.lang.Object v2;
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v2 = virtualinvoke v1.<com.google.common.testing.ClassSanityTester: java.lang.Object instantiate(java.lang.Class)>(class "Ljava/lang/Runnable;");
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void assertNull(java.lang.Object)>(v2);
return;
}
public void testInstantiate_abstractClass() throws java.lang.Exception
{
java.lang.Object v2;
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v2 = virtualinvoke v1.<com.google.common.testing.ClassSanityTester: java.lang.Object instantiate(java.lang.Class)>(class "Ljava/util/AbstractList;");
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void assertNull(java.lang.Object)>(v2);
return;
}
public void testInstantiate_annotation() throws java.lang.Exception
{
java.lang.Object v2;
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v2 = virtualinvoke v1.<com.google.common.testing.ClassSanityTester: java.lang.Object instantiate(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$MyAnnotation;");
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void assertNull(java.lang.Object)>(v2);
return;
}
public void testInstantiate_setDefault() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTesterTest v0;
com.google.common.testing.ClassSanityTesterTest$NotInstantiable v1;
java.lang.Object v4;
com.google.common.testing.ClassSanityTester v2, v3;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = new com.google.common.testing.ClassSanityTesterTest$NotInstantiable;
specialinvoke v1.<com.google.common.testing.ClassSanityTesterTest$NotInstantiable: void <init>()>();
v2 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v2.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester setDefault(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/testing/ClassSanityTesterTest$NotInstantiable;", v1);
v3 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v4 = virtualinvoke v3.<com.google.common.testing.ClassSanityTester: java.lang.Object instantiate(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$ConstructorParameterNotInstantiable;");
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void assertNotNull(java.lang.Object)>(v4);
return;
}
public void testSetDistinctValues_equalInstances()
{
java.lang.IllegalArgumentException v2;
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
label1:
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester setDistinctValues(java.lang.Class,java.lang.Object,java.lang.Object)>(class "Ljava/lang/String;", "", "");
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void fail()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
return;
catch java.lang.IllegalArgumentException from label1 to label2 with label3;
}
public void testInstantiate_setDistinctValues() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTesterTest v0;
com.google.common.testing.ClassSanityTesterTest$NotInstantiable v1, v2;
java.lang.Object v5;
com.google.common.testing.ClassSanityTester v3, v4, v6;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = new com.google.common.testing.ClassSanityTesterTest$NotInstantiable;
specialinvoke v1.<com.google.common.testing.ClassSanityTesterTest$NotInstantiable: void <init>()>();
v2 = new com.google.common.testing.ClassSanityTesterTest$NotInstantiable;
specialinvoke v2.<com.google.common.testing.ClassSanityTesterTest$NotInstantiable: void <init>()>();
v3 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v3.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester setDistinctValues(java.lang.Class,java.lang.Object,java.lang.Object)>(class "Lcom/google/common/testing/ClassSanityTesterTest$NotInstantiable;", v1, v2);
v4 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v5 = virtualinvoke v4.<com.google.common.testing.ClassSanityTester: java.lang.Object instantiate(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$ConstructorParameterNotInstantiable;");
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void assertNotNull(java.lang.Object)>(v5);
v6 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v6.<com.google.common.testing.ClassSanityTester: void testEquals(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$ConstructorParameterMapOfNotInstantiable;");
return;
}
public void testInstantiate_constructorThrows() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
java.lang.reflect.InvocationTargetException v2;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
label1:
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: java.lang.Object instantiate(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$ConstructorThrows;");
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void fail()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
return;
catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
}
public void testInstantiate_factoryMethodThrows() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
java.lang.reflect.InvocationTargetException v2;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
label1:
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: java.lang.Object instantiate(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$FactoryMethodThrows;");
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void fail()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
return;
catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
}
public void testInstantiate_constructorParameterNotInstantiable() throws java.lang.Exception
{
java.lang.Throwable v2;
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
label1:
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: java.lang.Object instantiate(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$ConstructorParameterNotInstantiable;");
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void fail()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
return;
catch com.google.common.testing.ClassSanityTester$ParameterNotInstantiableException from label1 to label2 with label3;
}
public void testInstantiate_factoryMethodParameterNotInstantiable() throws java.lang.Exception
{
java.lang.Throwable v2;
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
label1:
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: java.lang.Object instantiate(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$FactoryMethodParameterNotInstantiable;");
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void fail()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
return;
catch com.google.common.testing.ClassSanityTester$ParameterNotInstantiableException from label1 to label2 with label3;
}
public void testInstantiate_instantiableFactoryMethodChosen() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTesterTest v0;
java.lang.Object v2;
java.lang.String v3;
com.google.common.testing.ClassSanityTester v1;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v2 = virtualinvoke v1.<com.google.common.testing.ClassSanityTester: java.lang.Object instantiate(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$InstantiableFactoryMethodChosen;");
v3 = v2.<com.google.common.testing.ClassSanityTesterTest$InstantiableFactoryMethodChosen: java.lang.String name>;
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void assertEquals(java.lang.String,java.lang.String)>("good", v3);
return;
}
public void testInterfaceProxySerializable() throws java.lang.Exception
{
java.lang.Object v2;
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v2 = virtualinvoke v1.<com.google.common.testing.ClassSanityTester: java.lang.Object instantiate(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$HasAnInterface;");
staticinvoke <com.google.common.testing.SerializableTester: java.lang.Object reserializeAndAssert(java.lang.Object)>(v2);
return;
}
public void testReturnValuesFromAnotherPackageIgnoredForNullTests() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester v2;
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = new com.google.common.testing.ClassSanityTester;
specialinvoke v1.<com.google.common.testing.ClassSanityTester: void <init>()>();
v2 = virtualinvoke v1.<com.google.common.testing.ClassSanityTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester forAllPublicStaticMethods(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$JdkObjectFactory;");
virtualinvoke v2.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester testNulls()>();
return;
}
public void testInstantiate_instantiableConstructorChosen() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTesterTest v0;
java.lang.Object v2;
java.lang.String v3;
com.google.common.testing.ClassSanityTester v1;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
v1 = v0.<com.google.common.testing.ClassSanityTesterTest: com.google.common.testing.ClassSanityTester tester>;
v2 = virtualinvoke v1.<com.google.common.testing.ClassSanityTester: java.lang.Object instantiate(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$InstantiableConstructorChosen;");
v3 = v2.<com.google.common.testing.ClassSanityTesterTest$InstantiableConstructorChosen: java.lang.String name>;
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void assertEquals(java.lang.String,java.lang.String)>("good", v3);
return;
}
public void testEquals_setOfNonInstantiable() throws java.lang.Exception
{
java.lang.Throwable v2;
com.google.common.testing.ClassSanityTester v1;
com.google.common.testing.ClassSanityTesterTest v0;
v0 := @this: com.google.common.testing.ClassSanityTesterTest;
label1:
v1 = new com.google.common.testing.ClassSanityTester;
specialinvoke v1.<com.google.common.testing.ClassSanityTester: void <init>()>();
virtualinvoke v1.<com.google.common.testing.ClassSanityTester: void doTestEquals(java.lang.Class)>(class "Lcom/google/common/testing/ClassSanityTesterTest$SetWrapper;");
staticinvoke <com.google.common.testing.ClassSanityTesterTest: void fail()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
return;
catch com.google.common.testing.ClassSanityTester$ParameterNotInstantiableException from label1 to label2 with label3;
}
}