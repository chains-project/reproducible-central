public class com.google.common.testing.GcFinalizationTest extends junit.framework.TestCase
{
public void <init>()
{
com.google.common.testing.GcFinalizationTest v0;
v0 := @this: com.google.common.testing.GcFinalizationTest;
specialinvoke v0.<junit.framework.TestCase: void <init>()>();
return;
}
public void testAwait_CountDownLatch()
{
java.util.concurrent.CountDownLatch v1;
com.google.common.testing.GcFinalizationTest v0;
com.google.common.testing.GcFinalizationTest$1 v2;
long v3;
v0 := @this: com.google.common.testing.GcFinalizationTest;
v1 = new java.util.concurrent.CountDownLatch;
specialinvoke v1.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);
v2 = new com.google.common.testing.GcFinalizationTest$1;
specialinvoke v2.<com.google.common.testing.GcFinalizationTest$1: void <init>(com.google.common.testing.GcFinalizationTest,java.util.concurrent.CountDownLatch)>(v0, v1);
staticinvoke <com.google.common.testing.GcFinalization: void await(java.util.concurrent.CountDownLatch)>(v1);
v3 = virtualinvoke v1.<java.util.concurrent.CountDownLatch: long getCount()>();
staticinvoke <com.google.common.testing.GcFinalizationTest: void assertEquals(long,long)>(0L, v3);
return;
}
public void testAwaitDone_Future()
{
com.google.common.testing.GcFinalizationTest v0;
com.google.common.testing.GcFinalizationTest$2 v2;
com.google.common.util.concurrent.SettableFuture v1;
boolean v3, v4;
v0 := @this: com.google.common.testing.GcFinalizationTest;
v1 = staticinvoke <com.google.common.util.concurrent.SettableFuture: com.google.common.util.concurrent.SettableFuture create()>();
v2 = new com.google.common.testing.GcFinalizationTest$2;
specialinvoke v2.<com.google.common.testing.GcFinalizationTest$2: void <init>(com.google.common.testing.GcFinalizationTest,com.google.common.util.concurrent.SettableFuture)>(v0, v1);
staticinvoke <com.google.common.testing.GcFinalization: void awaitDone(java.util.concurrent.Future)>(v1);
v3 = virtualinvoke v1.<com.google.common.util.concurrent.SettableFuture: boolean isDone()>();
staticinvoke <com.google.common.testing.GcFinalizationTest: void assertTrue(boolean)>(v3);
v4 = virtualinvoke v1.<com.google.common.util.concurrent.SettableFuture: boolean isCancelled()>();
staticinvoke <com.google.common.testing.GcFinalizationTest: void assertFalse(boolean)>(v4);
return;
}
public void testAwaitDone_Future_Cancel()
{
com.google.common.testing.GcFinalizationTest v0;
com.google.common.util.concurrent.SettableFuture v1;
com.google.common.testing.GcFinalizationTest$3 v2;
boolean v3, v4;
v0 := @this: com.google.common.testing.GcFinalizationTest;
v1 = staticinvoke <com.google.common.util.concurrent.SettableFuture: com.google.common.util.concurrent.SettableFuture create()>();
v2 = new com.google.common.testing.GcFinalizationTest$3;
specialinvoke v2.<com.google.common.testing.GcFinalizationTest$3: void <init>(com.google.common.testing.GcFinalizationTest,com.google.common.util.concurrent.SettableFuture)>(v0, v1);
staticinvoke <com.google.common.testing.GcFinalization: void awaitDone(java.util.concurrent.Future)>(v1);
v3 = virtualinvoke v1.<com.google.common.util.concurrent.SettableFuture: boolean isDone()>();
staticinvoke <com.google.common.testing.GcFinalizationTest: void assertTrue(boolean)>(v3);
v4 = virtualinvoke v1.<com.google.common.util.concurrent.SettableFuture: boolean isCancelled()>();
staticinvoke <com.google.common.testing.GcFinalizationTest: void assertTrue(boolean)>(v4);
return;
}
public void testAwaitClear()
{
com.google.common.testing.GcFinalizationTest v0;
java.lang.Object v2, v3;
java.lang.ref.WeakReference v1;
v0 := @this: com.google.common.testing.GcFinalizationTest;
v1 = new java.lang.ref.WeakReference;
v2 = new java.lang.Object;
specialinvoke v2.<java.lang.Object: void <init>()>();
specialinvoke v1.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(v2);
staticinvoke <com.google.common.testing.GcFinalization: void awaitClear(java.lang.ref.WeakReference)>(v1);
v3 = virtualinvoke v1.<java.lang.ref.WeakReference: java.lang.Object get()>();
staticinvoke <com.google.common.testing.GcFinalizationTest: void assertNull(java.lang.Object)>(v3);
return;
}
public void testAwaitDone_FinalizationPredicate()
{
com.google.common.testing.GcFinalizationTest v0;
java.lang.Boolean v3;
java.lang.Object v2;
java.util.WeakHashMap v1;
boolean v5;
com.google.common.testing.GcFinalizationTest$4 v4;
v0 := @this: com.google.common.testing.GcFinalizationTest;
v1 = new java.util.WeakHashMap;
specialinvoke v1.<java.util.WeakHashMap: void <init>()>();
v2 = new java.lang.Object;
specialinvoke v2.<java.lang.Object: void <init>()>();
v3 = <java.lang.Boolean: java.lang.Boolean TRUE>;
virtualinvoke v1.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v2, v3);
v4 = new com.google.common.testing.GcFinalizationTest$4;
specialinvoke v4.<com.google.common.testing.GcFinalizationTest$4: void <init>(com.google.common.testing.GcFinalizationTest,java.util.WeakHashMap)>(v0, v1);
staticinvoke <com.google.common.testing.GcFinalization: void awaitDone(com.google.common.testing.GcFinalization$FinalizationPredicate)>(v4);
v5 = virtualinvoke v1.<java.util.WeakHashMap: boolean isEmpty()>();
staticinvoke <com.google.common.testing.GcFinalizationTest: void assertTrue(boolean)>(v5);
return;
}
void assertWrapsInterruptedException(java.lang.RuntimeException)
{
com.google.common.testing.GcFinalizationTest v0;
java.lang.RuntimeException v1;
com.google.common.truth.StringSubject v3;
com.google.common.truth.ThrowableSubject v2, v4, v5;
v0 := @this: com.google.common.testing.GcFinalizationTest;
v1 := @parameter0: java.lang.RuntimeException;
v2 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.ThrowableSubject assertThat(java.lang.Throwable)>(v1);
v3 = virtualinvoke v2.<com.google.common.truth.ThrowableSubject: com.google.common.truth.StringSubject hasMessageThat()>();
virtualinvoke v3.<com.google.common.truth.StringSubject: void contains(java.lang.CharSequence)>("Unexpected interrupt");
v4 = staticinvoke <com.google.common.truth.Truth: com.google.common.truth.ThrowableSubject assertThat(java.lang.Throwable)>(v1);
v5 = virtualinvoke v4.<com.google.common.truth.ThrowableSubject: com.google.common.truth.ThrowableSubject hasCauseThat()>();
virtualinvoke v5.<com.google.common.truth.ThrowableSubject: void isInstanceOf(java.lang.Class)>(class "Ljava/lang/InterruptedException;");
return;
}
public void testAwait_CountDownLatch_Interrupted()
{
java.lang.Throwable v5;
java.util.concurrent.CountDownLatch v3;
com.google.common.testing.GcFinalizationTest v0;
java.lang.Thread v2;
java.lang.RuntimeException v4;
com.google.common.testing.GcFinalizationTest$Interruptenator v1;
v0 := @this: com.google.common.testing.GcFinalizationTest;
v1 = new com.google.common.testing.GcFinalizationTest$Interruptenator;
v2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
specialinvoke v1.<com.google.common.testing.GcFinalizationTest$Interruptenator: void <init>(com.google.common.testing.GcFinalizationTest,java.lang.Thread)>(v0, v2);
label1:
v3 = new java.util.concurrent.CountDownLatch;
specialinvoke v3.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);
label2:
staticinvoke <com.google.common.testing.GcFinalization: void await(java.util.concurrent.CountDownLatch)>(v3);
staticinvoke <com.google.common.testing.GcFinalizationTest: void fail(java.lang.String)>("should throw");
label3:
goto label5;
label4:
v4 := @caughtexception;
virtualinvoke v0.<com.google.common.testing.GcFinalizationTest: void assertWrapsInterruptedException(java.lang.RuntimeException)>(v4);
label5:
virtualinvoke v1.<com.google.common.testing.GcFinalizationTest$Interruptenator: void shutdown()>();
staticinvoke <java.lang.Thread: boolean interrupted()>();
goto label7;
label6:
v5 := @caughtexception;
virtualinvoke v1.<com.google.common.testing.GcFinalizationTest$Interruptenator: void shutdown()>();
staticinvoke <java.lang.Thread: boolean interrupted()>();
throw v5;
label7:
return;
catch java.lang.RuntimeException from label2 to label3 with label4;
catch java.lang.Throwable from label1 to label5 with label6;
}
public void testAwaitDone_Future_Interrupted_Interrupted()
{
java.lang.Throwable v5;
com.google.common.testing.GcFinalizationTest v0;
java.lang.Thread v2;
java.lang.RuntimeException v4;
com.google.common.testing.GcFinalizationTest$Interruptenator v1;
com.google.common.util.concurrent.SettableFuture v3;
v0 := @this: com.google.common.testing.GcFinalizationTest;
v1 = new com.google.common.testing.GcFinalizationTest$Interruptenator;
v2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
specialinvoke v1.<com.google.common.testing.GcFinalizationTest$Interruptenator: void <init>(com.google.common.testing.GcFinalizationTest,java.lang.Thread)>(v0, v2);
label1:
v3 = staticinvoke <com.google.common.util.concurrent.SettableFuture: com.google.common.util.concurrent.SettableFuture create()>();
label2:
staticinvoke <com.google.common.testing.GcFinalization: void awaitDone(java.util.concurrent.Future)>(v3);
staticinvoke <com.google.common.testing.GcFinalizationTest: void fail(java.lang.String)>("should throw");
label3:
goto label5;
label4:
v4 := @caughtexception;
virtualinvoke v0.<com.google.common.testing.GcFinalizationTest: void assertWrapsInterruptedException(java.lang.RuntimeException)>(v4);
label5:
virtualinvoke v1.<com.google.common.testing.GcFinalizationTest$Interruptenator: void shutdown()>();
staticinvoke <java.lang.Thread: boolean interrupted()>();
goto label7;
label6:
v5 := @caughtexception;
virtualinvoke v1.<com.google.common.testing.GcFinalizationTest$Interruptenator: void shutdown()>();
staticinvoke <java.lang.Thread: boolean interrupted()>();
throw v5;
label7:
return;
catch java.lang.RuntimeException from label2 to label3 with label4;
catch java.lang.Throwable from label1 to label5 with label6;
}
public void testAwaitClear_Interrupted()
{
java.lang.Throwable v6;
com.google.common.testing.GcFinalizationTest v0;
java.lang.Thread v2;
java.lang.Boolean v4;
java.lang.RuntimeException v5;
com.google.common.testing.GcFinalizationTest$Interruptenator v1;
java.lang.ref.WeakReference v3;
v0 := @this: com.google.common.testing.GcFinalizationTest;
v1 = new com.google.common.testing.GcFinalizationTest$Interruptenator;
v2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
specialinvoke v1.<com.google.common.testing.GcFinalizationTest$Interruptenator: void <init>(com.google.common.testing.GcFinalizationTest,java.lang.Thread)>(v0, v2);
label1:
v3 = new java.lang.ref.WeakReference;
v4 = <java.lang.Boolean: java.lang.Boolean TRUE>;
specialinvoke v3.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(v4);
label2:
staticinvoke <com.google.common.testing.GcFinalization: void awaitClear(java.lang.ref.WeakReference)>(v3);
staticinvoke <com.google.common.testing.GcFinalizationTest: void fail(java.lang.String)>("should throw");
label3:
goto label5;
label4:
v5 := @caughtexception;
virtualinvoke v0.<com.google.common.testing.GcFinalizationTest: void assertWrapsInterruptedException(java.lang.RuntimeException)>(v5);
label5:
virtualinvoke v1.<com.google.common.testing.GcFinalizationTest$Interruptenator: void shutdown()>();
staticinvoke <java.lang.Thread: boolean interrupted()>();
goto label7;
label6:
v6 := @caughtexception;
virtualinvoke v1.<com.google.common.testing.GcFinalizationTest$Interruptenator: void shutdown()>();
staticinvoke <java.lang.Thread: boolean interrupted()>();
throw v6;
label7:
return;
catch java.lang.RuntimeException from label2 to label3 with label4;
catch java.lang.Throwable from label1 to label5 with label6;
}
public void testAwaitDone_FinalizationPredicate_Interrupted()
{
java.lang.Throwable v5;
com.google.common.testing.GcFinalizationTest v0;
java.lang.Thread v2;
java.lang.RuntimeException v4;
com.google.common.testing.GcFinalizationTest$5 v3;
com.google.common.testing.GcFinalizationTest$Interruptenator v1;
v0 := @this: com.google.common.testing.GcFinalizationTest;
v1 = new com.google.common.testing.GcFinalizationTest$Interruptenator;
v2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
specialinvoke v1.<com.google.common.testing.GcFinalizationTest$Interruptenator: void <init>(com.google.common.testing.GcFinalizationTest,java.lang.Thread)>(v0, v2);
label1:
v3 = new com.google.common.testing.GcFinalizationTest$5;
specialinvoke v3.<com.google.common.testing.GcFinalizationTest$5: void <init>(com.google.common.testing.GcFinalizationTest)>(v0);
staticinvoke <com.google.common.testing.GcFinalization: void awaitDone(com.google.common.testing.GcFinalization$FinalizationPredicate)>(v3);
staticinvoke <com.google.common.testing.GcFinalizationTest: void fail(java.lang.String)>("should throw");
label2:
goto label4;
label3:
v4 := @caughtexception;
virtualinvoke v0.<com.google.common.testing.GcFinalizationTest: void assertWrapsInterruptedException(java.lang.RuntimeException)>(v4);
label4:
virtualinvoke v1.<com.google.common.testing.GcFinalizationTest$Interruptenator: void shutdown()>();
staticinvoke <java.lang.Thread: boolean interrupted()>();
goto label6;
label5:
v5 := @caughtexception;
virtualinvoke v1.<com.google.common.testing.GcFinalizationTest$Interruptenator: void shutdown()>();
staticinvoke <java.lang.Thread: boolean interrupted()>();
throw v5;
label6:
return;
catch java.lang.RuntimeException from label1 to label2 with label3;
catch java.lang.Throwable from label1 to label4 with label5;
}
public void testAwaitFullGc()
{
java.util.concurrent.CountDownLatch v1;
com.google.common.testing.GcFinalizationTest v0;
java.lang.Object v5;
long v4;
java.lang.ref.WeakReference v2;
com.google.common.testing.GcFinalizationTest$6 v3;
v0 := @this: com.google.common.testing.GcFinalizationTest;
v1 = new java.util.concurrent.CountDownLatch;
specialinvoke v1.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);
v2 = new java.lang.ref.WeakReference;
v3 = new com.google.common.testing.GcFinalizationTest$6;
specialinvoke v3.<com.google.common.testing.GcFinalizationTest$6: void <init>(com.google.common.testing.GcFinalizationTest,java.util.concurrent.CountDownLatch)>(v0, v1);
specialinvoke v2.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(v3);
staticinvoke <com.google.common.testing.GcFinalization: void awaitFullGc()>();
v4 = virtualinvoke v1.<java.util.concurrent.CountDownLatch: long getCount()>();
staticinvoke <com.google.common.testing.GcFinalizationTest: void assertEquals(long,long)>(0L, v4);
v5 = virtualinvoke v2.<java.lang.ref.WeakReference: java.lang.Object get()>();
staticinvoke <com.google.common.testing.GcFinalizationTest: void assertNull(java.lang.Object)>(v5);
return;
}
}