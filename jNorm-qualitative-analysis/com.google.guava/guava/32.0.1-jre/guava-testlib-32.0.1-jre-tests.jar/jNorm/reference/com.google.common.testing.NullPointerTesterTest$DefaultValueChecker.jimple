abstract class com.google.common.testing.NullPointerTesterTest$DefaultValueChecker extends java.lang.Object
{
private final java.util.Map arguments;
private void <init>()
{
com.google.common.testing.NullPointerTesterTest$DefaultValueChecker v0;
java.util.HashMap v1;
v0 := @this: com.google.common.testing.NullPointerTesterTest$DefaultValueChecker;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>();
v0.<com.google.common.testing.NullPointerTesterTest$DefaultValueChecker: java.util.Map arguments> = v1;
return;
}
final com.google.common.testing.NullPointerTesterTest$DefaultValueChecker runTester()
{
com.google.common.testing.NullPointerTesterTest$DefaultValueChecker v0;
com.google.common.testing.NullPointerTester v1;
com.google.common.testing.NullPointerTester$Visibility v2;
v0 := @this: com.google.common.testing.NullPointerTesterTest$DefaultValueChecker;
v1 = new com.google.common.testing.NullPointerTester;
specialinvoke v1.<com.google.common.testing.NullPointerTester: void <init>()>();
v2 = <com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PACKAGE>;
virtualinvoke v1.<com.google.common.testing.NullPointerTester: void testInstanceMethods(java.lang.Object,com.google.common.testing.NullPointerTester$Visibility)>(v0, v2);
return v0;
}
final transient void assertNonNullValues(java.lang.Object[])
{
java.lang.Object[] v1;
com.google.common.testing.NullPointerTesterTest$DefaultValueChecker v0;
java.lang.Integer v10;
java.util.Map v3, v9;
int v2, v4, v5, v6;
java.lang.Object v11, v8;
java.lang.String v7;
v0 := @this: com.google.common.testing.NullPointerTesterTest$DefaultValueChecker;
v1 := @parameter0: java.lang.Object[];
v2 = lengthof v1;
v3 = v0.<com.google.common.testing.NullPointerTesterTest$DefaultValueChecker: java.util.Map arguments>;
v4 = interfaceinvoke v3.<java.util.Map: int size()>();
staticinvoke <junit.framework.TestCase: void assertEquals(int,int)>(v2, v4);
v5 = 0;
label1:
v6 = lengthof v1;
if v5 >= v6 goto label2;
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Default value for parameter #\u0001");
v8 = v1[v5];
v9 = v0.<com.google.common.testing.NullPointerTesterTest$DefaultValueChecker: java.util.Map arguments>;
v10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v5);
v11 = interfaceinvoke v9.<java.util.Map: java.lang.Object get(java.lang.Object)>(v10);
staticinvoke <junit.framework.TestCase: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>(v7, v8, v11);
v5 = v5 + 1;
goto label1;
label2:
return;
}
final java.lang.Object getDefaultParameterValue(int)
{
java.util.Map v2;
com.google.common.testing.NullPointerTesterTest$DefaultValueChecker v0;
int v1;
java.lang.Object v4;
java.lang.Integer v3;
v0 := @this: com.google.common.testing.NullPointerTesterTest$DefaultValueChecker;
v1 := @parameter0: int;
v2 = v0.<com.google.common.testing.NullPointerTesterTest$DefaultValueChecker: java.util.Map arguments>;
v3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v4 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v3);
return v4;
}
final transient void calledWith(java.lang.Object[])
{
java.lang.Object[] v1;
com.google.common.testing.NullPointerTesterTest$DefaultValueChecker v0;
java.lang.Integer v6;
java.util.Map v5;
int v2, v3, v8, v9;
java.lang.Object v10, v4, v7;
v0 := @this: com.google.common.testing.NullPointerTesterTest$DefaultValueChecker;
v1 := @parameter0: java.lang.Object[];
v2 = 0;
label1:
v3 = lengthof v1;
if v2 >= v3 goto label3;
v4 = v1[v2];
if v4 == null goto label2;
v5 = v0.<com.google.common.testing.NullPointerTesterTest$DefaultValueChecker: java.util.Map arguments>;
v6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v2);
v7 = v1[v2];
interfaceinvoke v5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v6, v7);
label2:
v2 = v2 + 1;
goto label1;
label3:
v8 = lengthof v1;
v9 = 0;
label4:
if v9 >= v8 goto label5;
v10 = v1[v9];
staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(v10);
v9 = v9 + 1;
goto label4;
label5:
return;
}
}