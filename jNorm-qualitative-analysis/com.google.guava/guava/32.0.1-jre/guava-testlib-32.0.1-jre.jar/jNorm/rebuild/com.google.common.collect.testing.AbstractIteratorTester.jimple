abstract class com.google.common.collect.testing.AbstractIteratorTester extends java.lang.Object
{
private com.google.common.collect.testing.AbstractIteratorTester$Stimulus[] stimuli;
private final java.util.Iterator elementsToInsert;
private final java.util.Set features;
private final java.util.List expectedElements;
private final int startIndex;
private final com.google.common.collect.testing.AbstractIteratorTester$KnownOrder knownOrder;
private static final com.google.common.collect.testing.AbstractIteratorTester$IteratorOperation REMOVE_METHOD;
private static final com.google.common.collect.testing.AbstractIteratorTester$IteratorOperation NEXT_METHOD;
private static final com.google.common.collect.testing.AbstractIteratorTester$IteratorOperation PREVIOUS_METHOD;
com.google.common.collect.testing.AbstractIteratorTester$Stimulus hasNext;
com.google.common.collect.testing.AbstractIteratorTester$Stimulus next;
com.google.common.collect.testing.AbstractIteratorTester$Stimulus remove;
com.google.common.collect.testing.AbstractIteratorTester$Stimulus hasPrevious;
com.google.common.collect.testing.AbstractIteratorTester$Stimulus nextIndex;
com.google.common.collect.testing.AbstractIteratorTester$Stimulus previousIndex;
com.google.common.collect.testing.AbstractIteratorTester$Stimulus previous;
com.google.common.collect.testing.AbstractIteratorTester$Stimulus add;
com.google.common.collect.testing.AbstractIteratorTester$Stimulus set;
void <init>(int, java.lang.Iterable, java.lang.Iterable, java.lang.Iterable, com.google.common.collect.testing.AbstractIteratorTester$KnownOrder, int)
{
com.google.common.collect.testing.AbstractIteratorTester v0;
com.google.common.collect.testing.AbstractIteratorTester$6 v7;
java.lang.Iterable v2, v3, v4;
com.google.common.collect.testing.AbstractIteratorTester$7 v8;
int v1, v6;
boolean v18;
java.util.Iterator v17, v20;
java.util.Set v21;
java.lang.IllegalArgumentException v19;
com.google.common.collect.testing.AbstractIteratorTester$8 v9;
com.google.common.collect.testing.AbstractIteratorTester$9 v10;
java.util.List v22;
com.google.common.collect.testing.AbstractIteratorTester$10 v11;
com.google.common.collect.testing.AbstractIteratorTester$KnownOrder v5;
com.google.common.collect.testing.AbstractIteratorTester$11 v12;
com.google.common.collect.testing.AbstractIteratorTester$12 v13;
com.google.common.collect.testing.AbstractIteratorTester$13 v14;
com.google.common.collect.testing.AbstractIteratorTester$Stimulus[] v16;
com.google.common.collect.testing.AbstractIteratorTester$14 v15;
v0 := @this: com.google.common.collect.testing.AbstractIteratorTester;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.Iterable;
v3 := @parameter2: java.lang.Iterable;
v4 := @parameter3: java.lang.Iterable;
v5 := @parameter4: com.google.common.collect.testing.AbstractIteratorTester$KnownOrder;
v6 := @parameter5: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v7 = new com.google.common.collect.testing.AbstractIteratorTester$6;
specialinvoke v7.<com.google.common.collect.testing.AbstractIteratorTester$6: void <init>(com.google.common.collect.testing.AbstractIteratorTester,java.lang.String)>(v0, "hasNext");
v0.<com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$Stimulus hasNext> = v7;
v8 = new com.google.common.collect.testing.AbstractIteratorTester$7;
specialinvoke v8.<com.google.common.collect.testing.AbstractIteratorTester$7: void <init>(com.google.common.collect.testing.AbstractIteratorTester,java.lang.String)>(v0, "next");
v0.<com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$Stimulus next> = v8;
v9 = new com.google.common.collect.testing.AbstractIteratorTester$8;
specialinvoke v9.<com.google.common.collect.testing.AbstractIteratorTester$8: void <init>(com.google.common.collect.testing.AbstractIteratorTester,java.lang.String)>(v0, "remove");
v0.<com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$Stimulus remove> = v9;
v10 = new com.google.common.collect.testing.AbstractIteratorTester$9;
specialinvoke v10.<com.google.common.collect.testing.AbstractIteratorTester$9: void <init>(com.google.common.collect.testing.AbstractIteratorTester,java.lang.String)>(v0, "hasPrevious");
v0.<com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$Stimulus hasPrevious> = v10;
v11 = new com.google.common.collect.testing.AbstractIteratorTester$10;
specialinvoke v11.<com.google.common.collect.testing.AbstractIteratorTester$10: void <init>(com.google.common.collect.testing.AbstractIteratorTester,java.lang.String)>(v0, "nextIndex");
v0.<com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$Stimulus nextIndex> = v11;
v12 = new com.google.common.collect.testing.AbstractIteratorTester$11;
specialinvoke v12.<com.google.common.collect.testing.AbstractIteratorTester$11: void <init>(com.google.common.collect.testing.AbstractIteratorTester,java.lang.String)>(v0, "previousIndex");
v0.<com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$Stimulus previousIndex> = v12;
v13 = new com.google.common.collect.testing.AbstractIteratorTester$12;
specialinvoke v13.<com.google.common.collect.testing.AbstractIteratorTester$12: void <init>(com.google.common.collect.testing.AbstractIteratorTester,java.lang.String)>(v0, "previous");
v0.<com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$Stimulus previous> = v13;
v14 = new com.google.common.collect.testing.AbstractIteratorTester$13;
specialinvoke v14.<com.google.common.collect.testing.AbstractIteratorTester$13: void <init>(com.google.common.collect.testing.AbstractIteratorTester,java.lang.String)>(v0, "add");
v0.<com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$Stimulus add> = v14;
v15 = new com.google.common.collect.testing.AbstractIteratorTester$14;
specialinvoke v15.<com.google.common.collect.testing.AbstractIteratorTester$14: void <init>(com.google.common.collect.testing.AbstractIteratorTester,java.lang.String)>(v0, "set");
v0.<com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$Stimulus set> = v15;
v16 = newarray (com.google.common.collect.testing.AbstractIteratorTester$Stimulus)[v1];
v0.<com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$Stimulus[] stimuli> = v16;
v17 = interfaceinvoke v2.<java.lang.Iterable: java.util.Iterator iterator()>();
v18 = interfaceinvoke v17.<java.util.Iterator: boolean hasNext()>();
if v18 != 0 goto label1;
v19 = new java.lang.IllegalArgumentException;
specialinvoke v19.<java.lang.IllegalArgumentException: void <init>()>();
throw v19;
label1:
v20 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Iterator cycle(java.lang.Iterable)>(v2);
v0.<com.google.common.collect.testing.AbstractIteratorTester: java.util.Iterator elementsToInsert> = v20;
v21 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Set copyToSet(java.lang.Iterable)>(v3);
v0.<com.google.common.collect.testing.AbstractIteratorTester: java.util.Set features> = v21;
v22 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.List copyToList(java.lang.Iterable)>(v4);
v0.<com.google.common.collect.testing.AbstractIteratorTester: java.util.List expectedElements> = v22;
v0.<com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$KnownOrder knownOrder> = v5;
v0.<com.google.common.collect.testing.AbstractIteratorTester: int startIndex> = v6;
return;
}
protected abstract java.lang.Iterable getStimulusValues();
protected abstract java.util.Iterator newTargetIterator();
protected void verify(java.util.List)
{
com.google.common.collect.testing.AbstractIteratorTester v0;
java.util.List v1;
v0 := @this: com.google.common.collect.testing.AbstractIteratorTester;
v1 := @parameter0: java.util.List;
return;
}
public final void test()
{
com.google.common.collect.testing.AbstractIteratorTester v0;
java.lang.RuntimeException v1, v2;
java.lang.String v4;
com.google.common.collect.testing.AbstractIteratorTester$Stimulus[] v3;
v0 := @this: com.google.common.collect.testing.AbstractIteratorTester;
label1:
specialinvoke v0.<com.google.common.collect.testing.AbstractIteratorTester: void recurse(int)>(0);
label2:
goto label4;
label3:
v1 := @caughtexception;
v2 = new java.lang.RuntimeException;
v3 = v0.<com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$Stimulus[] stimuli>;
v4 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(v3);
specialinvoke v2.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(v4, v1);
throw v2;
label4:
return;
catch java.lang.RuntimeException from label1 to label2 with label3;
}
public void testForEachRemaining()
{
java.util.Iterator v6;
com.google.common.collect.testing.AbstractIteratorTester v0;
java.util.ArrayList v5;
java.util.function.Consumer v9;
java.util.List v12, v13, v2;
com.google.common.collect.testing.AbstractIteratorTester$KnownOrder v10, v11;
int v1, v3, v4, v7;
java.lang.Object v8;
v0 := @this: com.google.common.collect.testing.AbstractIteratorTester;
v1 = 0;
label1:
v2 = v0.<com.google.common.collect.testing.AbstractIteratorTester: java.util.List expectedElements>;
v3 = interfaceinvoke v2.<java.util.List: int size()>();
v4 = v3 - 1;
if v1 >= v4 goto label6;
v5 = new java.util.ArrayList;
specialinvoke v5.<java.util.ArrayList: void <init>()>();
v6 = virtualinvoke v0.<com.google.common.collect.testing.AbstractIteratorTester: java.util.Iterator newTargetIterator()>();
v7 = 0;
label2:
if v7 >= v1 goto label3;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v5.<java.util.List: boolean add(java.lang.Object)>(v8);
v7 = v7 + 1;
goto label2;
label3:
virtualinvoke v5.<java.lang.Object: java.lang.Class getClass()>();
v9 = staticinvoke <com.google.common.collect.testing.AbstractIteratorTester$add__1: java.util.function.Consumer bootstrap$(java.util.List)>(v5);
interfaceinvoke v6.<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>(v9);
v10 = v0.<com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$KnownOrder knownOrder>;
v11 = <com.google.common.collect.testing.AbstractIteratorTester$KnownOrder: com.google.common.collect.testing.AbstractIteratorTester$KnownOrder KNOWN_ORDER>;
if v10 != v11 goto label4;
v12 = v0.<com.google.common.collect.testing.AbstractIteratorTester: java.util.List expectedElements>;
staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(v12, v5);
goto label5;
label4:
v13 = v0.<com.google.common.collect.testing.AbstractIteratorTester: java.util.List expectedElements>;
staticinvoke <com.google.common.collect.testing.Helpers: void assertEqualIgnoringOrder(java.lang.Iterable,java.lang.Iterable)>(v13, v5);
label5:
v1 = v1 + 1;
goto label1;
label6:
return;
}
private void recurse(int)
{
java.util.Iterator v5;
com.google.common.collect.testing.AbstractIteratorTester v0;
java.lang.Iterable v4;
int v1, v3, v9;
java.lang.Object v7;
com.google.common.collect.testing.AbstractIteratorTester$Stimulus[] v2, v8;
boolean v6;
v0 := @this: com.google.common.collect.testing.AbstractIteratorTester;
v1 := @parameter0: int;
v2 = v0.<com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$Stimulus[] stimuli>;
v3 = lengthof v2;
if v1 != v3 goto label1;
specialinvoke v0.<com.google.common.collect.testing.AbstractIteratorTester: void compareResultsForThisListOfStimuli()>();
goto label3;
label1:
v4 = virtualinvoke v0.<com.google.common.collect.testing.AbstractIteratorTester: java.lang.Iterable getStimulusValues()>();
v5 = interfaceinvoke v4.<java.lang.Iterable: java.util.Iterator iterator()>();
label2:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label3;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = v0.<com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$Stimulus[] stimuli>;
v8[v1] = v7;
v9 = v1 + 1;
specialinvoke v0.<com.google.common.collect.testing.AbstractIteratorTester: void recurse(int)>(v9);
goto label2;
label3:
return;
}
private void compareResultsForThisListOfStimuli()
{
java.lang.Throwable v19;
com.google.common.collect.testing.AbstractIteratorTester v0;
com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator v10;
int v13, v15, v21, v4, v9;
java.lang.String v23;
boolean v7;
java.util.Iterator v12;
java.util.Set v5;
com.google.common.collect.testing.AbstractIteratorTester$Stimulus v17, v3;
java.util.List v11, v18, v2, v22;
com.google.common.collect.testing.IteratorFeature v6;
com.google.common.collect.testing.AbstractIteratorTester$Stimulus[] v1, v14, v16, v20, v8;
v0 := @this: com.google.common.collect.testing.AbstractIteratorTester;
v1 = v0.<com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$Stimulus[] stimuli>;
v2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
v3 = v0.<com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$Stimulus remove>;
v4 = staticinvoke <java.util.Collections: int frequency(java.util.Collection,java.lang.Object)>(v2, v3);
v5 = v0.<com.google.common.collect.testing.AbstractIteratorTester: java.util.Set features>;
v6 = <com.google.common.collect.testing.IteratorFeature: com.google.common.collect.testing.IteratorFeature SUPPORTS_REMOVE>;
v7 = interfaceinvoke v5.<java.util.Set: boolean contains(java.lang.Object)>(v6);
if v7 != 0 goto label1;
if v4 > 1 goto label2;
label1:
v8 = v0.<com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$Stimulus[] stimuli>;
v9 = lengthof v8;
if v9 < 5 goto label3;
if v4 <= 2 goto label3;
label2:
return;
label3:
v10 = new com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator;
v11 = v0.<com.google.common.collect.testing.AbstractIteratorTester: java.util.List expectedElements>;
specialinvoke v10.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: void <init>(com.google.common.collect.testing.AbstractIteratorTester,java.util.List)>(v0, v11);
v12 = virtualinvoke v0.<com.google.common.collect.testing.AbstractIteratorTester: java.util.Iterator newTargetIterator()>();
v13 = 0;
label4:
v14 = v0.<com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$Stimulus[] stimuli>;
v15 = lengthof v14;
if v13 >= v15 goto label9;
label5:
v16 = v0.<com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$Stimulus[] stimuli>;
v17 = v16[v13];
virtualinvoke v17.<com.google.common.collect.testing.AbstractIteratorTester$Stimulus: void executeAndCompare(java.util.ListIterator,java.util.Iterator)>(v10, v12);
v18 = specialinvoke v10.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: java.util.List getElements()>();
virtualinvoke v0.<com.google.common.collect.testing.AbstractIteratorTester: void verify(java.util.List)>(v18);
label6:
goto label8;
label7:
v19 := @caughtexception;
v20 = v0.<com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$Stimulus[] stimuli>;
v21 = v13 + 1;
v22 = staticinvoke <com.google.common.collect.testing.AbstractIteratorTester: java.util.List subListCopy(java.lang.Object[],int)>(v20, v21);
v23 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.util.List)>(v22) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("failed with stimuli \u0001");
staticinvoke <com.google.common.collect.testing.Helpers: void fail(java.lang.Throwable,java.lang.Object)>(v19, v23);
label8:
v13 = v13 + 1;
goto label4;
label9:
return;
catch junit.framework.AssertionFailedError from label5 to label6 with label7;
}
private static java.util.List subListCopy(java.lang.Object[], int)
{
java.util.List v3;
java.lang.Object[] v0, v2;
int v1;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: int;
v2 = newarray (java.lang.Object)[v1];
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v0, 0, v2, 0, v1);
v3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v2);
return v3;
}
private void internalExecuteAndCompare(java.util.Iterator, java.util.Iterator, com.google.common.collect.testing.AbstractIteratorTester$IteratorOperation)
{
com.google.common.collect.testing.AbstractIteratorTester$IteratorOperation v3, v9;
com.google.common.collect.testing.AbstractIteratorTester v0;
java.lang.String v14, v15;
java.util.Iterator v1, v2;
java.lang.RuntimeException v7, v8;
com.google.common.collect.testing.AbstractIteratorTester$PermittedMetaException v12, v5;
com.google.common.collect.testing.AbstractIteratorTester$UnknownElementException v13;
com.google.common.collect.testing.AbstractIteratorTester$KnownOrder v10, v11;
java.lang.Object v4, v6;
v0 := @this: com.google.common.collect.testing.AbstractIteratorTester;
v1 := @parameter0: java.util.Iterator;
v2 := @parameter1: java.util.Iterator;
v3 := @parameter2: com.google.common.collect.testing.AbstractIteratorTester$IteratorOperation;
v4 = null;
v5 = null;
v6 = null;
v7 = null;
label01:
v6 = interfaceinvoke v3.<com.google.common.collect.testing.AbstractIteratorTester$IteratorOperation: java.lang.Object execute(java.util.Iterator)>(v2);
label02:
goto label04;
label03:
v8 := @caughtexception;
v7 = v8;
label04:
v9 = <com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$IteratorOperation NEXT_METHOD>;
if v3 != v9 goto label05;
if v7 != null goto label05;
v10 = v0.<com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$KnownOrder knownOrder>;
v11 = <com.google.common.collect.testing.AbstractIteratorTester$KnownOrder: com.google.common.collect.testing.AbstractIteratorTester$KnownOrder UNKNOWN_ORDER>;
if v10 != v11 goto label05;
virtualinvoke v1.<com.google.common.collect.testing.AbstractIteratorTester$MultiExceptionListIterator: void promoteToNext(java.lang.Object)>(v6);
label05:
v4 = interfaceinvoke v3.<com.google.common.collect.testing.AbstractIteratorTester$IteratorOperation: java.lang.Object execute(java.util.Iterator)>(v1);
label06:
goto label09;
label07:
v12 := @caughtexception;
v5 = v12;
goto label09;
label08:
v13 := @caughtexception;
v14 = virtualinvoke v13.<com.google.common.collect.testing.AbstractIteratorTester$UnknownElementException: java.lang.String getMessage()>();
staticinvoke <com.google.common.collect.testing.Helpers: void fail(java.lang.Throwable,java.lang.Object)>(v13, v14);
label09:
if v5 != null goto label11;
if v7 == null goto label10;
staticinvoke <com.google.common.collect.testing.Helpers: void fail(java.lang.Throwable,java.lang.Object)>(v7, "Target threw exception when reference did not");
label10:
staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(v4, v6);
return;
label11:
if v7 != null goto label12;
v15 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (com.google.common.collect.testing.AbstractIteratorTester$PermittedMetaException)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Target failed to throw \u0001");
staticinvoke <junit.framework.Assert: void fail(java.lang.String)>(v15);
label12:
virtualinvoke v5.<com.google.common.collect.testing.AbstractIteratorTester$PermittedMetaException: void assertPermitted(java.lang.RuntimeException)>(v7);
return;
catch java.lang.RuntimeException from label01 to label02 with label03;
catch com.google.common.collect.testing.AbstractIteratorTester$PermittedMetaException from label04 to label06 with label07;
catch com.google.common.collect.testing.AbstractIteratorTester$UnknownElementException from label04 to label06 with label08;
}
private final com.google.common.collect.testing.AbstractIteratorTester$IteratorOperation newAddMethod()
{
java.util.Iterator v1;
com.google.common.collect.testing.AbstractIteratorTester v0;
java.lang.Object v2;
com.google.common.collect.testing.AbstractIteratorTester$4 v3;
v0 := @this: com.google.common.collect.testing.AbstractIteratorTester;
v1 = v0.<com.google.common.collect.testing.AbstractIteratorTester: java.util.Iterator elementsToInsert>;
v2 = interfaceinvoke v1.<java.util.Iterator: java.lang.Object next()>();
v3 = new com.google.common.collect.testing.AbstractIteratorTester$4;
specialinvoke v3.<com.google.common.collect.testing.AbstractIteratorTester$4: void <init>(com.google.common.collect.testing.AbstractIteratorTester,java.lang.Object)>(v0, v2);
return v3;
}
private final com.google.common.collect.testing.AbstractIteratorTester$IteratorOperation newSetMethod()
{
java.util.Iterator v1;
com.google.common.collect.testing.AbstractIteratorTester v0;
java.lang.Object v2;
com.google.common.collect.testing.AbstractIteratorTester$5 v3;
v0 := @this: com.google.common.collect.testing.AbstractIteratorTester;
v1 = v0.<com.google.common.collect.testing.AbstractIteratorTester: java.util.Iterator elementsToInsert>;
v2 = interfaceinvoke v1.<java.util.Iterator: java.lang.Object next()>();
v3 = new com.google.common.collect.testing.AbstractIteratorTester$5;
specialinvoke v3.<com.google.common.collect.testing.AbstractIteratorTester$5: void <init>(com.google.common.collect.testing.AbstractIteratorTester,java.lang.Object)>(v0, v2);
return v3;
}
java.util.List iteratorStimuli()
{
java.util.List v5;
com.google.common.collect.testing.AbstractIteratorTester v0;
com.google.common.collect.testing.AbstractIteratorTester$Stimulus v2, v3, v4;
com.google.common.collect.testing.AbstractIteratorTester$Stimulus[] v1;
v0 := @this: com.google.common.collect.testing.AbstractIteratorTester;
v1 = newarray (com.google.common.collect.testing.AbstractIteratorTester$Stimulus)[3];
v2 = v0.<com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$Stimulus hasNext>;
v1[0] = v2;
v3 = v0.<com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$Stimulus next>;
v1[1] = v3;
v4 = v0.<com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$Stimulus remove>;
v1[2] = v4;
v5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
return v5;
}
java.util.List listIteratorStimuli()
{
com.google.common.collect.testing.AbstractIteratorTester v0;
com.google.common.collect.testing.AbstractIteratorTester$Stimulus v2, v3, v4, v5, v6, v7;
java.util.List v8;
com.google.common.collect.testing.AbstractIteratorTester$Stimulus[] v1;
v0 := @this: com.google.common.collect.testing.AbstractIteratorTester;
v1 = newarray (com.google.common.collect.testing.AbstractIteratorTester$Stimulus)[6];
v2 = v0.<com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$Stimulus hasPrevious>;
v1[0] = v2;
v3 = v0.<com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$Stimulus nextIndex>;
v1[1] = v3;
v4 = v0.<com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$Stimulus previousIndex>;
v1[2] = v4;
v5 = v0.<com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$Stimulus previous>;
v1[3] = v5;
v6 = v0.<com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$Stimulus add>;
v1[4] = v6;
v7 = v0.<com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$Stimulus set>;
v1[5] = v7;
v8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
return v8;
}
static void <clinit>()
{
com.google.common.collect.testing.AbstractIteratorTester$1 v0;
com.google.common.collect.testing.AbstractIteratorTester$2 v1;
com.google.common.collect.testing.AbstractIteratorTester$3 v2;
v0 = new com.google.common.collect.testing.AbstractIteratorTester$1;
specialinvoke v0.<com.google.common.collect.testing.AbstractIteratorTester$1: void <init>()>();
<com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$IteratorOperation REMOVE_METHOD> = v0;
v1 = new com.google.common.collect.testing.AbstractIteratorTester$2;
specialinvoke v1.<com.google.common.collect.testing.AbstractIteratorTester$2: void <init>()>();
<com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$IteratorOperation NEXT_METHOD> = v1;
v2 = new com.google.common.collect.testing.AbstractIteratorTester$3;
specialinvoke v2.<com.google.common.collect.testing.AbstractIteratorTester$3: void <init>()>();
<com.google.common.collect.testing.AbstractIteratorTester: com.google.common.collect.testing.AbstractIteratorTester$IteratorOperation PREVIOUS_METHOD> = v2;
return;
}
}