class com.google.common.collect.testing.TestsForMapsInJavaUtil$20 extends com.google.common.collect.testing.TestStringSortedMapGenerator
{
final com.google.common.collect.testing.TestsForMapsInJavaUtil this$0;
void <init>(com.google.common.collect.testing.TestsForMapsInJavaUtil)
{
com.google.common.collect.testing.TestsForMapsInJavaUtil v1;
com.google.common.collect.testing.TestsForMapsInJavaUtil$20 v0;
v0 := @this: com.google.common.collect.testing.TestsForMapsInJavaUtil$20;
v1 := @parameter0: com.google.common.collect.testing.TestsForMapsInJavaUtil;
v0.<com.google.common.collect.testing.TestsForMapsInJavaUtil$20: com.google.common.collect.testing.TestsForMapsInJavaUtil this$0> = v1;
specialinvoke v0.<com.google.common.collect.testing.TestStringSortedMapGenerator: void <init>()>();
return;
}
protected java.util.SortedMap create(java.util.Map$Entry[])
{
java.util.concurrent.ConcurrentSkipListMap v2;
com.google.common.collect.testing.TestsForMapsInJavaUtil$20 v0;
java.util.Map v4;
java.util.Comparator v3;
java.util.Map$Entry[] v1;
v0 := @this: com.google.common.collect.testing.TestsForMapsInJavaUtil$20;
v1 := @parameter0: java.util.Map$Entry[];
v2 = new java.util.concurrent.ConcurrentSkipListMap;
v3 = staticinvoke <com.google.common.collect.testing.TestsForMapsInJavaUtil: java.util.Comparator arbitraryNullFriendlyComparator()>();
specialinvoke v2.<java.util.concurrent.ConcurrentSkipListMap: void <init>(java.util.Comparator)>(v3);
v4 = staticinvoke <com.google.common.collect.testing.TestsForMapsInJavaUtil: java.util.Map populate(java.util.Map,java.util.Map$Entry[])>(v2, v1);
return v4;
}
}