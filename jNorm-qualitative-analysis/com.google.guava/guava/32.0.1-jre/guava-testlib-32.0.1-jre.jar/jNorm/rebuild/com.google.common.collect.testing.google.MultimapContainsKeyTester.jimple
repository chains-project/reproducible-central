public class com.google.common.collect.testing.google.MultimapContainsKeyTester extends com.google.common.collect.testing.google.AbstractMultimapTester
{
public void <init>()
{
com.google.common.collect.testing.google.MultimapContainsKeyTester v0;
v0 := @this: com.google.common.collect.testing.google.MultimapContainsKeyTester;
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultimapTester: void <init>()>();
return;
}
public void testContainsKeyYes()
{
com.google.common.collect.testing.google.MultimapContainsKeyTester v0;
java.lang.Object v2;
com.google.common.collect.Multimap v1;
boolean v3;
v0 := @this: com.google.common.collect.testing.google.MultimapContainsKeyTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapContainsKeyTester: com.google.common.collect.Multimap multimap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapContainsKeyTester: java.lang.Object k0()>();
v3 = interfaceinvoke v1.<com.google.common.collect.Multimap: boolean containsKey(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.google.MultimapContainsKeyTester: void assertTrue(boolean)>(v3);
return;
}
public void testContainsKeyNo()
{
com.google.common.collect.testing.google.MultimapContainsKeyTester v0;
java.lang.Object v2;
com.google.common.collect.Multimap v1;
boolean v3;
v0 := @this: com.google.common.collect.testing.google.MultimapContainsKeyTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapContainsKeyTester: com.google.common.collect.Multimap multimap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapContainsKeyTester: java.lang.Object k3()>();
v3 = interfaceinvoke v1.<com.google.common.collect.Multimap: boolean containsKey(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.google.MultimapContainsKeyTester: void assertFalse(boolean)>(v3);
return;
}
public void testContainsKeysFromKeySet()
{
java.util.Iterator v3;
java.util.Set v2;
com.google.common.collect.Multimap v1, v6;
com.google.common.collect.testing.google.MultimapContainsKeyTester v0;
java.lang.Object v5;
boolean v4, v7;
v0 := @this: com.google.common.collect.testing.google.MultimapContainsKeyTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapContainsKeyTester: com.google.common.collect.Multimap multimap()>();
v2 = interfaceinvoke v1.<com.google.common.collect.Multimap: java.util.Set keySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapContainsKeyTester: com.google.common.collect.Multimap multimap()>();
v7 = interfaceinvoke v6.<com.google.common.collect.Multimap: boolean containsKey(java.lang.Object)>(v5);
staticinvoke <com.google.common.collect.testing.google.MultimapContainsKeyTester: void assertTrue(boolean)>(v7);
goto label1;
label2:
return;
}
public void testContainsKeyAgreesWithGet()
{
java.util.Iterator v2;
com.google.common.collect.testing.SampleElements v1;
java.util.Collection v6;
com.google.common.collect.Multimap v5, v9;
com.google.common.collect.testing.google.MultimapContainsKeyTester v0;
java.lang.Object v4;
boolean v10, v3, v7, v8;
v0 := @this: com.google.common.collect.testing.google.MultimapContainsKeyTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapContainsKeyTester: com.google.common.collect.testing.SampleElements sampleKeys()>();
v2 = virtualinvoke v1.<com.google.common.collect.testing.SampleElements: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label4;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapContainsKeyTester: com.google.common.collect.Multimap multimap()>();
v6 = interfaceinvoke v5.<com.google.common.collect.Multimap: java.util.Collection get(java.lang.Object)>(v4);
v7 = interfaceinvoke v6.<java.util.Collection: boolean isEmpty()>();
if v7 != 0 goto label2;
v8 = 1;
goto label3;
label2:
v8 = 0;
label3:
v9 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapContainsKeyTester: com.google.common.collect.Multimap multimap()>();
v10 = interfaceinvoke v9.<com.google.common.collect.Multimap: boolean containsKey(java.lang.Object)>(v4);
staticinvoke <com.google.common.collect.testing.google.MultimapContainsKeyTester: void assertEquals(boolean,boolean)>(v8, v10);
goto label1;
label4:
return;
}
public void testContainsKeyAgreesWithAsMap()
{
java.util.Iterator v2;
com.google.common.collect.testing.SampleElements v1;
com.google.common.collect.Multimap v5, v7;
java.util.Map v8;
com.google.common.collect.testing.google.MultimapContainsKeyTester v0;
java.lang.Object v4;
boolean v3, v6, v9;
v0 := @this: com.google.common.collect.testing.google.MultimapContainsKeyTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapContainsKeyTester: com.google.common.collect.testing.SampleElements sampleKeys()>();
v2 = virtualinvoke v1.<com.google.common.collect.testing.SampleElements: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapContainsKeyTester: com.google.common.collect.Multimap multimap()>();
v6 = interfaceinvoke v5.<com.google.common.collect.Multimap: boolean containsKey(java.lang.Object)>(v4);
v7 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapContainsKeyTester: com.google.common.collect.Multimap multimap()>();
v8 = interfaceinvoke v7.<com.google.common.collect.Multimap: java.util.Map asMap()>();
v9 = interfaceinvoke v8.<java.util.Map: boolean containsKey(java.lang.Object)>(v4);
staticinvoke <com.google.common.collect.testing.google.MultimapContainsKeyTester: void assertEquals(boolean,boolean)>(v6, v9);
goto label1;
label2:
return;
}
public void testContainsKeyAgreesWithKeySet()
{
java.util.Iterator v2;
com.google.common.collect.testing.SampleElements v1;
java.util.Set v8;
com.google.common.collect.Multimap v5, v7;
com.google.common.collect.testing.google.MultimapContainsKeyTester v0;
java.lang.Object v4;
boolean v3, v6, v9;
v0 := @this: com.google.common.collect.testing.google.MultimapContainsKeyTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapContainsKeyTester: com.google.common.collect.testing.SampleElements sampleKeys()>();
v2 = virtualinvoke v1.<com.google.common.collect.testing.SampleElements: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapContainsKeyTester: com.google.common.collect.Multimap multimap()>();
v6 = interfaceinvoke v5.<com.google.common.collect.Multimap: boolean containsKey(java.lang.Object)>(v4);
v7 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapContainsKeyTester: com.google.common.collect.Multimap multimap()>();
v8 = interfaceinvoke v7.<com.google.common.collect.Multimap: java.util.Set keySet()>();
v9 = interfaceinvoke v8.<java.util.Set: boolean contains(java.lang.Object)>(v4);
staticinvoke <com.google.common.collect.testing.google.MultimapContainsKeyTester: void assertEquals(boolean,boolean)>(v6, v9);
goto label1;
label2:
return;
}
public void testContainsKeyNullPresent()
{
com.google.common.collect.testing.google.MultimapContainsKeyTester v0;
com.google.common.collect.Multimap v1;
boolean v2;
v0 := @this: com.google.common.collect.testing.google.MultimapContainsKeyTester;
virtualinvoke v0.<com.google.common.collect.testing.google.MultimapContainsKeyTester: void initMultimapWithNullKey()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapContainsKeyTester: com.google.common.collect.Multimap multimap()>();
v2 = interfaceinvoke v1.<com.google.common.collect.Multimap: boolean containsKey(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.google.MultimapContainsKeyTester: void assertTrue(boolean)>(v2);
return;
}
public void testContainsKeyNullAbsent()
{
com.google.common.collect.testing.google.MultimapContainsKeyTester v0;
com.google.common.collect.Multimap v1;
boolean v2;
v0 := @this: com.google.common.collect.testing.google.MultimapContainsKeyTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapContainsKeyTester: com.google.common.collect.Multimap multimap()>();
v2 = interfaceinvoke v1.<com.google.common.collect.Multimap: boolean containsKey(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.google.MultimapContainsKeyTester: void assertFalse(boolean)>(v2);
return;
}
public void testContainsKeyNullDisallowed()
{
com.google.common.collect.testing.google.MultimapContainsKeyTester v0;
com.google.common.collect.Multimap v1;
java.lang.NullPointerException v2;
v0 := @this: com.google.common.collect.testing.google.MultimapContainsKeyTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapContainsKeyTester: com.google.common.collect.Multimap multimap()>();
interfaceinvoke v1.<com.google.common.collect.Multimap: boolean containsKey(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.google.MultimapContainsKeyTester: void fail(java.lang.String)>("Expected NullPointerException");
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
}