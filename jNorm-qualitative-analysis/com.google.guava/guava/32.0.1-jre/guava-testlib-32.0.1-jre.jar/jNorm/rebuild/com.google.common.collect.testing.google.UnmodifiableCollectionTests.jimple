public class com.google.common.collect.testing.google.UnmodifiableCollectionTests extends java.lang.Object
{
public void <init>()
{
com.google.common.collect.testing.google.UnmodifiableCollectionTests v0;
v0 := @this: com.google.common.collect.testing.google.UnmodifiableCollectionTests;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static void assertMapEntryIsUnmodifiable(java.util.Map$Entry)
{
java.lang.UnsupportedOperationException v1;
java.util.Map$Entry v0;
v0 := @parameter0: java.util.Map$Entry;
label1:
interfaceinvoke v0.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>(null);
staticinvoke <junit.framework.TestCase: void fail(java.lang.String)>("setValue on unmodifiable Map.Entry succeeded");
label2:
goto label4;
label3:
v1 := @caughtexception;
label4:
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public static void assertIteratorIsUnmodifiable(java.util.Iterator)
{
java.lang.UnsupportedOperationException v2;
java.util.Iterator v0;
boolean v1;
v0 := @parameter0: java.util.Iterator;
label1:
v1 = interfaceinvoke v0.<java.util.Iterator: boolean hasNext()>();
if v1 == 0 goto label5;
interfaceinvoke v0.<java.util.Iterator: java.lang.Object next()>();
label2:
interfaceinvoke v0.<java.util.Iterator: void remove()>();
staticinvoke <junit.framework.TestCase: void fail(java.lang.String)>("Remove on unmodifiable iterator succeeded");
label3:
goto label1;
label4:
v2 := @caughtexception;
goto label1;
label5:
return;
catch java.lang.UnsupportedOperationException from label2 to label3 with label4;
}
public static void assertIteratorsInOrder(java.util.Iterator, java.util.Iterator)
{
java.util.Iterator v0, v1;
int v2;
java.lang.Object v10, v4, v7;
java.lang.String v11, v5, v8;
boolean v3, v6, v9;
v0 := @parameter0: java.util.Iterator;
v1 := @parameter1: java.util.Iterator;
v2 = 0;
label1:
v3 = interfaceinvoke v0.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v0.<java.util.Iterator: java.lang.Object next()>();
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,java.lang.Object)>(v2, v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("index \u0001 expected <\u0001., actual is exhausted");
v6 = interfaceinvoke v1.<java.util.Iterator: boolean hasNext()>();
staticinvoke <junit.framework.TestCase: void assertTrue(java.lang.String,boolean)>(v5, v6);
v7 = interfaceinvoke v1.<java.util.Iterator: java.lang.Object next()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("index \u0001");
staticinvoke <junit.framework.TestCase: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>(v8, v4, v7);
v2 = v2 + 1;
goto label1;
label2:
v9 = interfaceinvoke v1.<java.util.Iterator: boolean hasNext()>();
if v9 == 0 goto label3;
v10 = interfaceinvoke v1.<java.util.Iterator: java.lang.Object next()>();
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,java.lang.Object)>(v2, v10) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("index \u0001, expected is exhausted, actual <\u0001>");
staticinvoke <junit.framework.TestCase: void fail(java.lang.String)>(v11);
label3:
return;
}
public static void assertCollectionIsUnmodifiable(java.util.Collection, java.lang.Object)
{
java.lang.UnsupportedOperationException v10, v11, v5, v6, v7, v9;
java.util.Iterator v4, v8;
java.util.Collection v0;
java.util.ArrayList v2, v3;
java.lang.Object v1;
v0 := @parameter0: java.util.Collection;
v1 := @parameter1: java.lang.Object;
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
interfaceinvoke v2.<java.util.Collection: boolean add(java.lang.Object)>(v1);
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
v4 = interfaceinvoke v0.<java.util.Collection: java.util.Iterator iterator()>();
staticinvoke <com.google.common.collect.Iterators: boolean addAll(java.util.Collection,java.util.Iterator)>(v3, v4);
label01:
interfaceinvoke v0.<java.util.Collection: boolean add(java.lang.Object)>(v1);
staticinvoke <junit.framework.TestCase: void fail(java.lang.String)>("add succeeded on unmodifiable collection");
label02:
goto label04;
label03:
v5 := @caughtexception;
label04:
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertCollectionsAreEquivalent(java.util.Collection,java.util.Collection)>(v3, v0);
label05:
interfaceinvoke v0.<java.util.Collection: boolean addAll(java.util.Collection)>(v2);
staticinvoke <junit.framework.TestCase: void fail(java.lang.String)>("addAll succeeded on unmodifiable collection");
label06:
goto label08;
label07:
v6 := @caughtexception;
label08:
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertCollectionsAreEquivalent(java.util.Collection,java.util.Collection)>(v3, v0);
label09:
interfaceinvoke v0.<java.util.Collection: void clear()>();
staticinvoke <junit.framework.TestCase: void fail(java.lang.String)>("clear succeeded on unmodifiable collection");
label10:
goto label12;
label11:
v7 := @caughtexception;
label12:
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertCollectionsAreEquivalent(java.util.Collection,java.util.Collection)>(v3, v0);
v8 = interfaceinvoke v0.<java.util.Collection: java.util.Iterator iterator()>();
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertIteratorIsUnmodifiable(java.util.Iterator)>(v8);
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertCollectionsAreEquivalent(java.util.Collection,java.util.Collection)>(v3, v0);
label13:
interfaceinvoke v0.<java.util.Collection: boolean remove(java.lang.Object)>(v1);
staticinvoke <junit.framework.TestCase: void fail(java.lang.String)>("remove succeeded on unmodifiable collection");
label14:
goto label16;
label15:
v9 := @caughtexception;
label16:
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertCollectionsAreEquivalent(java.util.Collection,java.util.Collection)>(v3, v0);
label17:
interfaceinvoke v0.<java.util.Collection: boolean removeAll(java.util.Collection)>(v2);
staticinvoke <junit.framework.TestCase: void fail(java.lang.String)>("removeAll succeeded on unmodifiable collection");
label18:
goto label20;
label19:
v10 := @caughtexception;
label20:
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertCollectionsAreEquivalent(java.util.Collection,java.util.Collection)>(v3, v0);
label21:
interfaceinvoke v0.<java.util.Collection: boolean retainAll(java.util.Collection)>(v2);
staticinvoke <junit.framework.TestCase: void fail(java.lang.String)>("retainAll succeeded on unmodifiable collection");
label22:
goto label24;
label23:
v11 := @caughtexception;
label24:
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertCollectionsAreEquivalent(java.util.Collection,java.util.Collection)>(v3, v0);
return;
catch java.lang.UnsupportedOperationException from label01 to label02 with label03;
catch java.lang.UnsupportedOperationException from label05 to label06 with label07;
catch java.lang.UnsupportedOperationException from label09 to label10 with label11;
catch java.lang.UnsupportedOperationException from label13 to label14 with label15;
catch java.lang.UnsupportedOperationException from label17 to label18 with label19;
catch java.lang.UnsupportedOperationException from label21 to label22 with label23;
}
public static void assertSetIsUnmodifiable(java.util.Set, java.lang.Object)
{
java.util.Set v0;
java.lang.Object v1;
v0 := @parameter0: java.util.Set;
v1 := @parameter1: java.lang.Object;
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertCollectionIsUnmodifiable(java.util.Collection,java.lang.Object)>(v0, v1);
return;
}
public static void assertMultisetIsUnmodifiable(com.google.common.collect.Multiset, java.lang.Object)
{
java.lang.UnsupportedOperationException v3, v4;
com.google.common.collect.Multiset v0;
java.util.Set v5, v6;
com.google.common.collect.testing.google.UnmodifiableCollectionTests$1 v7;
com.google.common.collect.LinkedHashMultiset v2;
java.lang.Object v1;
v0 := @parameter0: com.google.common.collect.Multiset;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <com.google.common.collect.LinkedHashMultiset: com.google.common.collect.LinkedHashMultiset create(java.lang.Iterable)>(v0);
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertCollectionsAreEquivalent(java.util.Collection,java.util.Collection)>(v0, v2);
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertCollectionIsUnmodifiable(java.util.Collection,java.lang.Object)>(v0, v1);
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertCollectionsAreEquivalent(java.util.Collection,java.util.Collection)>(v0, v2);
label1:
interfaceinvoke v0.<com.google.common.collect.Multiset: int add(java.lang.Object,int)>(v1, 2);
staticinvoke <junit.framework.TestCase: void fail(java.lang.String)>("add(Object, int) succeeded on unmodifiable collection");
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertCollectionsAreEquivalent(java.util.Collection,java.util.Collection)>(v0, v2);
label5:
interfaceinvoke v0.<com.google.common.collect.Multiset: int remove(java.lang.Object,int)>(v1, 2);
staticinvoke <junit.framework.TestCase: void fail(java.lang.String)>("remove(Object, int) succeeded on unmodifiable collection");
label6:
goto label8;
label7:
v4 := @caughtexception;
label8:
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertCollectionsAreEquivalent(java.util.Collection,java.util.Collection)>(v0, v2);
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertCollectionsAreEquivalent(java.util.Collection,java.util.Collection)>(v0, v2);
v5 = interfaceinvoke v0.<com.google.common.collect.Multiset: java.util.Set elementSet()>();
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertSetIsUnmodifiable(java.util.Set,java.lang.Object)>(v5, v1);
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertCollectionsAreEquivalent(java.util.Collection,java.util.Collection)>(v0, v2);
v6 = interfaceinvoke v0.<com.google.common.collect.Multiset: java.util.Set entrySet()>();
v7 = new com.google.common.collect.testing.google.UnmodifiableCollectionTests$1;
specialinvoke v7.<com.google.common.collect.testing.google.UnmodifiableCollectionTests$1: void <init>(java.lang.Object)>(v1);
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertSetIsUnmodifiable(java.util.Set,java.lang.Object)>(v6, v7);
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertCollectionsAreEquivalent(java.util.Collection,java.util.Collection)>(v0, v2);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
catch java.lang.UnsupportedOperationException from label5 to label6 with label7;
}
public static void assertMultimapIsUnmodifiable(com.google.common.collect.Multimap, java.lang.Object, java.lang.Object)
{
com.google.common.collect.ArrayListMultimap v32;
java.util.Map v12, v37, v43, v46, v51, v8;
boolean v11, v21, v25, v39;
java.util.Collection v17, v19, v29, v3, v47, v52, v56;
java.util.Set v13, v24, v26, v40, v6, v9;
java.util.List v5;
java.lang.Object[] v53;
com.google.common.collect.Multiset v23;
com.google.common.collect.Multimap v0;
java.util.ArrayList v4;
java.lang.UnsupportedOperationException v30, v31, v33, v34, v35, v36, v38, v45, v50, v55, v7;
java.util.Map$Entry v10, v18;
java.util.Iterator v14, v20, v27, v41, v48;
java.lang.Object v1, v15, v16, v2, v22, v28, v42, v44, v49, v54;
v0 := @parameter0: com.google.common.collect.Multimap;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: java.lang.Object;
v3 = interfaceinvoke v0.<com.google.common.collect.Multimap: java.util.Collection entries()>();
v4 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>(v3);
v5 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(v4);
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertMultimapRemainsUnmodified(com.google.common.collect.Multimap,java.util.List)>(v0, v5);
v6 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(v2);
label01:
interfaceinvoke v0.<com.google.common.collect.Multimap: void clear()>();
staticinvoke <junit.framework.TestCase: void fail(java.lang.String)>("clear succeeded on unmodifiable multimap");
label02:
goto label04;
label03:
v7 := @caughtexception;
label04:
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertMultimapRemainsUnmodified(com.google.common.collect.Multimap,java.util.List)>(v0, v5);
v8 = interfaceinvoke v0.<com.google.common.collect.Multimap: java.util.Map asMap()>();
v9 = interfaceinvoke v8.<java.util.Map: java.util.Set entrySet()>();
v10 = staticinvoke <com.google.common.collect.Maps: java.util.Map$Entry immutableEntry(java.lang.Object,java.lang.Object)>(v1, v6);
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertSetIsUnmodifiable(java.util.Set,java.lang.Object)>(v9, v10);
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertMultimapRemainsUnmodified(com.google.common.collect.Multimap,java.util.List)>(v0, v5);
v11 = interfaceinvoke v0.<com.google.common.collect.Multimap: boolean isEmpty()>();
if v11 != 0 goto label05;
v12 = interfaceinvoke v0.<com.google.common.collect.Multimap: java.util.Map asMap()>();
v13 = interfaceinvoke v12.<java.util.Map: java.util.Set entrySet()>();
v14 = interfaceinvoke v13.<java.util.Set: java.util.Iterator iterator()>();
v15 = interfaceinvoke v14.<java.util.Iterator: java.lang.Object next()>();
v16 = interfaceinvoke v15.<java.util.Map$Entry: java.lang.Object getValue()>();
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertCollectionIsUnmodifiable(java.util.Collection,java.lang.Object)>(v16, v2);
label05:
v17 = interfaceinvoke v0.<com.google.common.collect.Multimap: java.util.Collection entries()>();
v18 = staticinvoke <com.google.common.collect.Maps: java.util.Map$Entry immutableEntry(java.lang.Object,java.lang.Object)>(v1, v2);
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertCollectionIsUnmodifiable(java.util.Collection,java.lang.Object)>(v17, v18);
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertMultimapRemainsUnmodified(com.google.common.collect.Multimap,java.util.List)>(v0, v5);
v19 = interfaceinvoke v0.<com.google.common.collect.Multimap: java.util.Collection entries()>();
v20 = interfaceinvoke v19.<java.util.Collection: java.util.Iterator iterator()>();
label06:
v21 = interfaceinvoke v20.<java.util.Iterator: boolean hasNext()>();
if v21 == 0 goto label07;
v22 = interfaceinvoke v20.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertMapEntryIsUnmodifiable(java.util.Map$Entry)>(v22);
goto label06;
label07:
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertMultimapRemainsUnmodified(com.google.common.collect.Multimap,java.util.List)>(v0, v5);
v23 = interfaceinvoke v0.<com.google.common.collect.Multimap: com.google.common.collect.Multiset keys()>();
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertMultisetIsUnmodifiable(com.google.common.collect.Multiset,java.lang.Object)>(v23, v1);
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertMultimapRemainsUnmodified(com.google.common.collect.Multimap,java.util.List)>(v0, v5);
v24 = interfaceinvoke v0.<com.google.common.collect.Multimap: java.util.Set keySet()>();
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertSetIsUnmodifiable(java.util.Set,java.lang.Object)>(v24, v1);
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertMultimapRemainsUnmodified(com.google.common.collect.Multimap,java.util.List)>(v0, v5);
v25 = interfaceinvoke v0.<com.google.common.collect.Multimap: boolean isEmpty()>();
if v25 != 0 goto label08;
v26 = interfaceinvoke v0.<com.google.common.collect.Multimap: java.util.Set keySet()>();
v27 = interfaceinvoke v26.<java.util.Set: java.util.Iterator iterator()>();
v28 = interfaceinvoke v27.<java.util.Iterator: java.lang.Object next()>();
v29 = interfaceinvoke v0.<com.google.common.collect.Multimap: java.util.Collection get(java.lang.Object)>(v28);
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertCollectionIsUnmodifiable(java.util.Collection,java.lang.Object)>(v29, v2);
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertMultimapRemainsUnmodified(com.google.common.collect.Multimap,java.util.List)>(v0, v5);
label08:
interfaceinvoke v0.<com.google.common.collect.Multimap: boolean put(java.lang.Object,java.lang.Object)>(v1, v2);
staticinvoke <junit.framework.TestCase: void fail(java.lang.String)>("put succeeded on unmodifiable multimap");
label09:
goto label11;
label10:
v30 := @caughtexception;
label11:
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertMultimapRemainsUnmodified(com.google.common.collect.Multimap,java.util.List)>(v0, v5);
label12:
interfaceinvoke v0.<com.google.common.collect.Multimap: boolean putAll(java.lang.Object,java.lang.Iterable)>(v1, v6);
staticinvoke <junit.framework.TestCase: void fail(java.lang.String)>("putAll(K, Iterable) succeeded on unmodifiable multimap");
label13:
goto label15;
label14:
v31 := @caughtexception;
label15:
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertMultimapRemainsUnmodified(com.google.common.collect.Multimap,java.util.List)>(v0, v5);
v32 = staticinvoke <com.google.common.collect.ArrayListMultimap: com.google.common.collect.ArrayListMultimap create()>();
interfaceinvoke v32.<com.google.common.collect.Multimap: boolean put(java.lang.Object,java.lang.Object)>(v1, v2);
label16:
interfaceinvoke v0.<com.google.common.collect.Multimap: boolean putAll(com.google.common.collect.Multimap)>(v32);
staticinvoke <junit.framework.TestCase: void fail(java.lang.String)>("putAll(Multimap<K, V>) succeeded on unmodifiable multimap");
label17:
goto label19;
label18:
v33 := @caughtexception;
label19:
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertMultimapRemainsUnmodified(com.google.common.collect.Multimap,java.util.List)>(v0, v5);
label20:
interfaceinvoke v0.<com.google.common.collect.Multimap: boolean remove(java.lang.Object,java.lang.Object)>(v1, v2);
staticinvoke <junit.framework.TestCase: void fail(java.lang.String)>("remove succeeded on unmodifiable multimap");
label21:
goto label23;
label22:
v34 := @caughtexception;
label23:
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertMultimapRemainsUnmodified(com.google.common.collect.Multimap,java.util.List)>(v0, v5);
label24:
interfaceinvoke v0.<com.google.common.collect.Multimap: java.util.Collection removeAll(java.lang.Object)>(v1);
staticinvoke <junit.framework.TestCase: void fail(java.lang.String)>("removeAll succeeded on unmodifiable multimap");
label25:
goto label27;
label26:
v35 := @caughtexception;
label27:
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertMultimapRemainsUnmodified(com.google.common.collect.Multimap,java.util.List)>(v0, v5);
label28:
interfaceinvoke v0.<com.google.common.collect.Multimap: java.util.Collection replaceValues(java.lang.Object,java.lang.Iterable)>(v1, v6);
staticinvoke <junit.framework.TestCase: void fail(java.lang.String)>("replaceValues succeeded on unmodifiable multimap");
label29:
goto label31;
label30:
v36 := @caughtexception;
label31:
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertMultimapRemainsUnmodified(com.google.common.collect.Multimap,java.util.List)>(v0, v5);
label32:
v37 = interfaceinvoke v0.<com.google.common.collect.Multimap: java.util.Map asMap()>();
interfaceinvoke v37.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v1);
staticinvoke <junit.framework.TestCase: void fail(java.lang.String)>("asMap().remove() succeeded on unmodifiable multimap");
label33:
goto label35;
label34:
v38 := @caughtexception;
label35:
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertMultimapRemainsUnmodified(com.google.common.collect.Multimap,java.util.List)>(v0, v5);
v39 = interfaceinvoke v0.<com.google.common.collect.Multimap: boolean isEmpty()>();
if v39 != 0 goto label46;
v40 = interfaceinvoke v0.<com.google.common.collect.Multimap: java.util.Set keySet()>();
v41 = interfaceinvoke v40.<java.util.Set: java.util.Iterator iterator()>();
v42 = interfaceinvoke v41.<java.util.Iterator: java.lang.Object next()>();
label36:
v43 = interfaceinvoke v0.<com.google.common.collect.Multimap: java.util.Map asMap()>();
v44 = interfaceinvoke v43.<java.util.Map: java.lang.Object get(java.lang.Object)>(v42);
interfaceinvoke v44.<java.util.Collection: boolean remove(java.lang.Object)>(v2);
staticinvoke <junit.framework.TestCase: void fail(java.lang.String)>("asMap().get().remove() succeeded on unmodifiable multimap");
label37:
goto label39;
label38:
v45 := @caughtexception;
label39:
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertMultimapRemainsUnmodified(com.google.common.collect.Multimap,java.util.List)>(v0, v5);
label40:
v46 = interfaceinvoke v0.<com.google.common.collect.Multimap: java.util.Map asMap()>();
v47 = interfaceinvoke v46.<java.util.Map: java.util.Collection values()>();
v48 = interfaceinvoke v47.<java.util.Collection: java.util.Iterator iterator()>();
v49 = interfaceinvoke v48.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v49.<java.util.Collection: boolean remove(java.lang.Object)>(v2);
staticinvoke <junit.framework.TestCase: void fail(java.lang.String)>("asMap().values().iterator().next().remove() succeeded on unmodifiable multimap");
label41:
goto label43;
label42:
v50 := @caughtexception;
label43:
v51 = interfaceinvoke v0.<com.google.common.collect.Multimap: java.util.Map asMap()>();
v52 = interfaceinvoke v51.<java.util.Map: java.util.Collection values()>();
v53 = interfaceinvoke v52.<java.util.Collection: java.lang.Object[] toArray()>();
v54 = v53[0];
interfaceinvoke v54.<java.util.Collection: void clear()>();
staticinvoke <junit.framework.TestCase: void fail(java.lang.String)>("asMap().values().toArray()[0].clear() succeeded on unmodifiable multimap");
label44:
goto label46;
label45:
v55 := @caughtexception;
label46:
v56 = interfaceinvoke v0.<com.google.common.collect.Multimap: java.util.Collection values()>();
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertCollectionIsUnmodifiable(java.util.Collection,java.lang.Object)>(v56, v2);
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertMultimapRemainsUnmodified(com.google.common.collect.Multimap,java.util.List)>(v0, v5);
return;
catch java.lang.UnsupportedOperationException from label01 to label02 with label03;
catch java.lang.UnsupportedOperationException from label08 to label09 with label10;
catch java.lang.UnsupportedOperationException from label12 to label13 with label14;
catch java.lang.UnsupportedOperationException from label16 to label17 with label18;
catch java.lang.UnsupportedOperationException from label20 to label21 with label22;
catch java.lang.UnsupportedOperationException from label24 to label25 with label26;
catch java.lang.UnsupportedOperationException from label28 to label29 with label30;
catch java.lang.UnsupportedOperationException from label32 to label33 with label34;
catch java.lang.UnsupportedOperationException from label36 to label37 with label38;
catch java.lang.UnsupportedOperationException from label40 to label41 with label42;
catch java.lang.UnsupportedOperationException from label43 to label44 with label45;
}
private static void assertCollectionsAreEquivalent(java.util.Collection, java.util.Collection)
{
java.util.Iterator v2, v3;
java.util.Collection v0, v1;
v0 := @parameter0: java.util.Collection;
v1 := @parameter1: java.util.Collection;
v2 = interfaceinvoke v0.<java.util.Collection: java.util.Iterator iterator()>();
v3 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertIteratorsInOrder(java.util.Iterator,java.util.Iterator)>(v2, v3);
return;
}
private static void assertMultimapRemainsUnmodified(com.google.common.collect.Multimap, java.util.List)
{
java.util.List v1;
java.util.Iterator v3, v4;
java.util.Collection v2;
com.google.common.collect.Multimap v0;
v0 := @parameter0: com.google.common.collect.Multimap;
v1 := @parameter1: java.util.List;
v2 = interfaceinvoke v0.<com.google.common.collect.Multimap: java.util.Collection entries()>();
v3 = interfaceinvoke v2.<java.util.Collection: java.util.Iterator iterator()>();
v4 = interfaceinvoke v1.<java.util.List: java.util.Iterator iterator()>();
staticinvoke <com.google.common.collect.testing.google.UnmodifiableCollectionTests: void assertIteratorsInOrder(java.util.Iterator,java.util.Iterator)>(v3, v4);
return;
}
}