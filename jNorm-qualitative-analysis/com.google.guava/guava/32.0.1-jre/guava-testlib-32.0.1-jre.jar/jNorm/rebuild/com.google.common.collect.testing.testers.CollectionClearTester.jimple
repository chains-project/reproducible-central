public class com.google.common.collect.testing.testers.CollectionClearTester extends com.google.common.collect.testing.AbstractCollectionTester
{
public void <init>()
{
com.google.common.collect.testing.testers.CollectionClearTester v0;
v0 := @this: com.google.common.collect.testing.testers.CollectionClearTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractCollectionTester: void <init>()>();
return;
}
public void testClear()
{
java.util.Iterator v7;
java.util.Collection v1, v2, v4, v6;
com.google.common.collect.testing.testers.CollectionClearTester v0;
int v5;
boolean v3, v8;
v0 := @this: com.google.common.collect.testing.testers.CollectionClearTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionClearTester: java.util.Collection collection>;
interfaceinvoke v1.<java.util.Collection: void clear()>();
v2 = v0.<com.google.common.collect.testing.testers.CollectionClearTester: java.util.Collection collection>;
v3 = interfaceinvoke v2.<java.util.Collection: boolean isEmpty()>();
staticinvoke <com.google.common.collect.testing.testers.CollectionClearTester: void assertTrue(java.lang.String,boolean)>("After clear(), a collection should be empty.", v3);
v4 = v0.<com.google.common.collect.testing.testers.CollectionClearTester: java.util.Collection collection>;
v5 = interfaceinvoke v4.<java.util.Collection: int size()>();
staticinvoke <com.google.common.collect.testing.testers.CollectionClearTester: void assertEquals(int,int)>(0, v5);
v6 = v0.<com.google.common.collect.testing.testers.CollectionClearTester: java.util.Collection collection>;
v7 = interfaceinvoke v6.<java.util.Collection: java.util.Iterator iterator()>();
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
staticinvoke <com.google.common.collect.testing.testers.CollectionClearTester: void assertFalse(boolean)>(v8);
return;
}
public void testClear_unsupported()
{
java.lang.UnsupportedOperationException v2;
com.google.common.collect.testing.testers.CollectionClearTester v0;
java.util.Collection v1;
v0 := @this: com.google.common.collect.testing.testers.CollectionClearTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.CollectionClearTester: java.util.Collection collection>;
interfaceinvoke v1.<java.util.Collection: void clear()>();
staticinvoke <com.google.common.collect.testing.testers.CollectionClearTester: void fail(java.lang.String)>("clear() should throw UnsupportedOperation if a collection does not support it and is not empty.");
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionClearTester: void expectUnchanged()>();
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testClear_unsupportedByEmptyCollection()
{
java.lang.UnsupportedOperationException v2;
com.google.common.collect.testing.testers.CollectionClearTester v0;
java.util.Collection v1;
v0 := @this: com.google.common.collect.testing.testers.CollectionClearTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.CollectionClearTester: java.util.Collection collection>;
interfaceinvoke v1.<java.util.Collection: void clear()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionClearTester: void expectUnchanged()>();
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testClearConcurrentWithIteration()
{
java.util.Iterator v2;
java.util.Collection v1, v3;
java.util.ConcurrentModificationException v4;
com.google.common.collect.testing.testers.CollectionClearTester v0;
v0 := @this: com.google.common.collect.testing.testers.CollectionClearTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.CollectionClearTester: java.util.Collection collection>;
v2 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
v3 = v0.<com.google.common.collect.testing.testers.CollectionClearTester: java.util.Collection collection>;
interfaceinvoke v3.<java.util.Collection: void clear()>();
interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <com.google.common.collect.testing.testers.CollectionClearTester: void fail(java.lang.String)>("Expected ConcurrentModificationException");
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
return;
catch java.util.ConcurrentModificationException from label1 to label2 with label3;
}
}