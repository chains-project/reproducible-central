public class com.google.common.collect.testing.testers.CollectionStreamTester extends com.google.common.collect.testing.AbstractCollectionTester
{
public void <init>()
{
com.google.common.collect.testing.testers.CollectionStreamTester v0;
v0 := @this: com.google.common.collect.testing.testers.CollectionStreamTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractCollectionTester: void <init>()>();
return;
}
public void testStreamToArrayUnknownOrder()
{
java.lang.Throwable v7;
java.lang.Object[] v5;
java.util.Collection v1, v2, v3;
com.google.common.collect.testing.testers.CollectionStreamTester v0;
java.util.List v6;
java.util.stream.Stream v4;
v0 := @this: com.google.common.collect.testing.testers.CollectionStreamTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionStreamTester: java.util.Collection collection>;
entermonitor v1;
label1:
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionStreamTester: java.util.Collection getSampleElements()>();
v3 = v0.<com.google.common.collect.testing.testers.CollectionStreamTester: java.util.Collection collection>;
v4 = interfaceinvoke v3.<java.util.Collection: java.util.stream.Stream stream()>();
v5 = interfaceinvoke v4.<java.util.stream.Stream: java.lang.Object[] toArray()>();
v6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v5);
staticinvoke <com.google.common.collect.testing.Helpers: void assertEqualIgnoringOrder(java.lang.Iterable,java.lang.Iterable)>(v2, v6);
exitmonitor v1;
label2:
goto label4;
label3:
v7 := @caughtexception;
exitmonitor v1;
throw v7;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void testStreamToArrayKnownOrder()
{
java.lang.Throwable v7;
java.lang.Object[] v5;
java.util.Collection v1, v3;
com.google.common.collect.testing.testers.CollectionStreamTester v0;
java.util.List v2, v6;
java.util.stream.Stream v4;
v0 := @this: com.google.common.collect.testing.testers.CollectionStreamTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionStreamTester: java.util.Collection collection>;
entermonitor v1;
label1:
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionStreamTester: java.util.List getOrderedElements()>();
v3 = v0.<com.google.common.collect.testing.testers.CollectionStreamTester: java.util.Collection collection>;
v4 = interfaceinvoke v3.<java.util.Collection: java.util.stream.Stream stream()>();
v5 = interfaceinvoke v4.<java.util.stream.Stream: java.lang.Object[] toArray()>();
v6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v5);
staticinvoke <com.google.common.collect.testing.testers.CollectionStreamTester: void assertEquals(java.lang.Object,java.lang.Object)>(v2, v6);
exitmonitor v1;
label2:
goto label4;
label3:
v7 := @caughtexception;
exitmonitor v1;
throw v7;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void testStreamCount()
{
java.lang.Throwable v6;
java.util.stream.Stream v4;
java.util.Collection v1, v3;
int v2;
com.google.common.collect.testing.testers.CollectionStreamTester v0;
long v5;
v0 := @this: com.google.common.collect.testing.testers.CollectionStreamTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionStreamTester: java.util.Collection collection>;
entermonitor v1;
label1:
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionStreamTester: int getNumElements()>();
v3 = v0.<com.google.common.collect.testing.testers.CollectionStreamTester: java.util.Collection collection>;
v4 = interfaceinvoke v3.<java.util.Collection: java.util.stream.Stream stream()>();
v5 = interfaceinvoke v4.<java.util.stream.Stream: long count()>();
staticinvoke <com.google.common.collect.testing.testers.CollectionStreamTester: void assertEquals(long,long)>(v2, v5);
exitmonitor v1;
label2:
goto label4;
label3:
v6 := @caughtexception;
exitmonitor v1;
throw v6;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
}