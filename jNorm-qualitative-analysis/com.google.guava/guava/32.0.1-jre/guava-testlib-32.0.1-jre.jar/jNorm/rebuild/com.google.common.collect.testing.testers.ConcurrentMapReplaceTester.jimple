public class com.google.common.collect.testing.testers.ConcurrentMapReplaceTester extends com.google.common.collect.testing.AbstractMapTester
{
public void <init>()
{
com.google.common.collect.testing.testers.ConcurrentMapReplaceTester v0;
v0 := @this: com.google.common.collect.testing.testers.ConcurrentMapReplaceTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractMapTester: void <init>()>();
return;
}
protected java.util.concurrent.ConcurrentMap getMap()
{
com.google.common.collect.testing.testers.ConcurrentMapReplaceTester v0;
java.util.Map v1;
v0 := @this: com.google.common.collect.testing.testers.ConcurrentMapReplaceTester;
v1 = specialinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.util.Map getMap()>();
return v1;
}
public void testReplace_supportedPresent()
{
java.util.Map$Entry v8;
com.google.common.collect.testing.testers.ConcurrentMapReplaceTester v0;
java.util.concurrent.ConcurrentMap v2;
java.lang.Object v1, v3, v4, v5, v6, v7;
v0 := @this: com.google.common.collect.testing.testers.ConcurrentMapReplaceTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: java.lang.Object v0()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: java.util.concurrent.ConcurrentMap getMap()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: java.lang.Object k0()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: java.lang.Object v3()>();
v5 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.lang.Object replace(java.lang.Object,java.lang.Object)>(v3, v4);
staticinvoke <com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: void assertEquals(java.lang.Object,java.lang.Object)>(v1, v5);
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: java.lang.Object k0()>();
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: java.lang.Object v3()>();
v8 = virtualinvoke v0.<com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>(v6, v7);
virtualinvoke v0.<com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: void expectReplacement(java.util.Map$Entry)>(v8);
return;
}
public void testReplace_supportedPresentNoChange()
{
com.google.common.collect.testing.testers.ConcurrentMapReplaceTester v0;
java.lang.Object v1, v3, v4, v5;
java.util.concurrent.ConcurrentMap v2;
v0 := @this: com.google.common.collect.testing.testers.ConcurrentMapReplaceTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: java.lang.Object v0()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: java.util.concurrent.ConcurrentMap getMap()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: java.lang.Object k0()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: java.lang.Object v0()>();
v5 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.lang.Object replace(java.lang.Object,java.lang.Object)>(v3, v4);
staticinvoke <com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: void assertEquals(java.lang.Object,java.lang.Object)>(v1, v5);
virtualinvoke v0.<com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: void expectUnchanged()>();
return;
}
public void testReplace_supportedAbsent()
{
com.google.common.collect.testing.testers.ConcurrentMapReplaceTester v0;
java.lang.Object v2, v3, v4;
java.util.concurrent.ConcurrentMap v1;
v0 := @this: com.google.common.collect.testing.testers.ConcurrentMapReplaceTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: java.util.concurrent.ConcurrentMap getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: java.lang.Object k3()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: java.lang.Object v3()>();
v4 = interfaceinvoke v1.<java.util.concurrent.ConcurrentMap: java.lang.Object replace(java.lang.Object,java.lang.Object)>(v2, v3);
staticinvoke <com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: void assertNull(java.lang.Object)>(v4);
virtualinvoke v0.<com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: void expectUnchanged()>();
return;
}
public void testReplace_presentNullValueUnsupported()
{
com.google.common.collect.testing.testers.ConcurrentMapReplaceTester v0;
java.lang.Object v2;
java.lang.NullPointerException v3;
java.util.concurrent.ConcurrentMap v1;
v0 := @this: com.google.common.collect.testing.testers.ConcurrentMapReplaceTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: java.util.concurrent.ConcurrentMap getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: java.lang.Object k0()>();
interfaceinvoke v1.<java.util.concurrent.ConcurrentMap: java.lang.Object replace(java.lang.Object,java.lang.Object)>(v2, null);
staticinvoke <com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: void fail(java.lang.String)>("Expected NullPointerException");
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: void expectUnchanged()>();
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testReplace_absentNullValueUnsupported()
{
com.google.common.collect.testing.testers.ConcurrentMapReplaceTester v0;
java.lang.Object v2;
java.lang.NullPointerException v3;
java.util.concurrent.ConcurrentMap v1;
v0 := @this: com.google.common.collect.testing.testers.ConcurrentMapReplaceTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: java.util.concurrent.ConcurrentMap getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: java.lang.Object k3()>();
interfaceinvoke v1.<java.util.concurrent.ConcurrentMap: java.lang.Object replace(java.lang.Object,java.lang.Object)>(v2, null);
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: void expectUnchanged()>();
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testReplace_absentNullKeyUnsupported()
{
com.google.common.collect.testing.testers.ConcurrentMapReplaceTester v0;
java.lang.Object v2;
java.lang.NullPointerException v3;
java.util.concurrent.ConcurrentMap v1;
v0 := @this: com.google.common.collect.testing.testers.ConcurrentMapReplaceTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: java.util.concurrent.ConcurrentMap getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: java.lang.Object v3()>();
interfaceinvoke v1.<java.util.concurrent.ConcurrentMap: java.lang.Object replace(java.lang.Object,java.lang.Object)>(null, v2);
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: void expectUnchanged()>();
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testReplace_unsupportedPresent()
{
java.lang.UnsupportedOperationException v4;
com.google.common.collect.testing.testers.ConcurrentMapReplaceTester v0;
java.lang.Object v2, v3;
java.util.concurrent.ConcurrentMap v1;
v0 := @this: com.google.common.collect.testing.testers.ConcurrentMapReplaceTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: java.util.concurrent.ConcurrentMap getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: java.lang.Object k0()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: java.lang.Object v3()>();
interfaceinvoke v1.<java.util.concurrent.ConcurrentMap: java.lang.Object replace(java.lang.Object,java.lang.Object)>(v2, v3);
staticinvoke <com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: void fail(java.lang.String)>("Expected UnsupportedOperationException");
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.ConcurrentMapReplaceTester: void expectUnchanged()>();
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
}