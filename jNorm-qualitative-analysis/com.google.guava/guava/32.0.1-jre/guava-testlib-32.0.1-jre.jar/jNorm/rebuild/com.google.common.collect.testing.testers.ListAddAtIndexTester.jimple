public class com.google.common.collect.testing.testers.ListAddAtIndexTester extends com.google.common.collect.testing.testers.AbstractListTester
{
public void <init>()
{
com.google.common.collect.testing.testers.ListAddAtIndexTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListAddAtIndexTester;
specialinvoke v0.<com.google.common.collect.testing.testers.AbstractListTester: void <init>()>();
return;
}
public void testAddAtIndex_supportedPresent()
{
java.util.List v1;
java.lang.Object[] v3;
com.google.common.collect.testing.testers.ListAddAtIndexTester v0;
java.lang.Object v2, v4;
v0 := @this: com.google.common.collect.testing.testers.ListAddAtIndexTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: java.util.List getList()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: java.lang.Object e0()>();
interfaceinvoke v1.<java.util.List: void add(int,java.lang.Object)>(0, v2);
v3 = newarray (java.lang.Object)[1];
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: java.lang.Object e0()>();
v3[0] = v4;
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: void expectAdded(int,java.lang.Object[])>(0, v3);
return;
}
public void testAddAtIndex_unsupportedPresent()
{
java.lang.UnsupportedOperationException v3;
java.util.List v1;
com.google.common.collect.testing.testers.ListAddAtIndexTester v0;
java.lang.Object v2;
v0 := @this: com.google.common.collect.testing.testers.ListAddAtIndexTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: java.util.List getList()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: java.lang.Object e0()>();
interfaceinvoke v1.<java.util.List: void add(int,java.lang.Object)>(0, v2);
staticinvoke <com.google.common.collect.testing.testers.ListAddAtIndexTester: void fail(java.lang.String)>("add(n, present) should throw");
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: void expectUnchanged()>();
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testAddAtIndex_supportedNotPresent()
{
java.util.List v1;
java.lang.Object[] v3;
com.google.common.collect.testing.testers.ListAddAtIndexTester v0;
java.lang.Object v2, v4;
v0 := @this: com.google.common.collect.testing.testers.ListAddAtIndexTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: java.util.List getList()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: java.lang.Object e3()>();
interfaceinvoke v1.<java.util.List: void add(int,java.lang.Object)>(0, v2);
v3 = newarray (java.lang.Object)[1];
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: java.lang.Object e3()>();
v3[0] = v4;
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: void expectAdded(int,java.lang.Object[])>(0, v3);
return;
}
public void testAddAtIndexConcurrentWithIteration()
{
java.util.List v3;
java.util.Iterator v2;
com.google.common.collect.testing.testers.ListAddAtIndexTester v0;
java.util.Collection v1;
java.lang.Object v4;
java.util.ConcurrentModificationException v5;
v0 := @this: com.google.common.collect.testing.testers.ListAddAtIndexTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: java.util.Collection collection>;
v2 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: java.util.List getList()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: java.lang.Object e3()>();
interfaceinvoke v3.<java.util.List: void add(int,java.lang.Object)>(0, v4);
interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <com.google.common.collect.testing.testers.ListAddAtIndexTester: void fail(java.lang.String)>("Expected ConcurrentModificationException");
label2:
goto label4;
label3:
v5 := @caughtexception;
label4:
return;
catch java.util.ConcurrentModificationException from label1 to label2 with label3;
}
public void testAddAtIndex_unsupportedNotPresent()
{
java.lang.UnsupportedOperationException v3;
java.util.List v1;
java.lang.Object[] v4;
com.google.common.collect.testing.testers.ListAddAtIndexTester v0;
java.lang.Object v2, v5;
v0 := @this: com.google.common.collect.testing.testers.ListAddAtIndexTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: java.util.List getList()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: java.lang.Object e3()>();
interfaceinvoke v1.<java.util.List: void add(int,java.lang.Object)>(0, v2);
staticinvoke <com.google.common.collect.testing.testers.ListAddAtIndexTester: void fail(java.lang.String)>("add(n, notPresent) should throw");
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: void expectUnchanged()>();
v4 = newarray (java.lang.Object)[1];
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: java.lang.Object e3()>();
v4[0] = v5;
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: void expectMissing(java.lang.Object[])>(v4);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testAddAtIndex_middle()
{
java.lang.Object[] v7;
com.google.common.collect.testing.testers.ListAddAtIndexTester v0;
java.util.List v1;
int v2, v3, v5, v6;
java.lang.Object v4, v8;
v0 := @this: com.google.common.collect.testing.testers.ListAddAtIndexTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: java.util.List getList()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: int getNumElements()>();
v3 = v2 / 2;
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: java.lang.Object e3()>();
interfaceinvoke v1.<java.util.List: void add(int,java.lang.Object)>(v3, v4);
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: int getNumElements()>();
v6 = v5 / 2;
v7 = newarray (java.lang.Object)[1];
v8 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: java.lang.Object e3()>();
v7[0] = v8;
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: void expectAdded(int,java.lang.Object[])>(v6, v7);
return;
}
public void testAddAtIndex_end()
{
java.util.List v1;
java.lang.Object[] v5;
com.google.common.collect.testing.testers.ListAddAtIndexTester v0;
int v2, v4;
java.lang.Object v3, v6;
v0 := @this: com.google.common.collect.testing.testers.ListAddAtIndexTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: java.util.List getList()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: int getNumElements()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: java.lang.Object e3()>();
interfaceinvoke v1.<java.util.List: void add(int,java.lang.Object)>(v2, v3);
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: int getNumElements()>();
v5 = newarray (java.lang.Object)[1];
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: java.lang.Object e3()>();
v5[0] = v6;
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: void expectAdded(int,java.lang.Object[])>(v4, v5);
return;
}
public void testAddAtIndex_nullSupported()
{
java.util.List v1;
java.lang.Object[] v2;
com.google.common.collect.testing.testers.ListAddAtIndexTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListAddAtIndexTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: java.util.List getList()>();
interfaceinvoke v1.<java.util.List: void add(int,java.lang.Object)>(0, null);
v2 = newarray (java.lang.Object)[1];
v2[0] = null;
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: void expectAdded(int,java.lang.Object[])>(0, v2);
return;
}
public void testAddAtIndex_nullUnsupported()
{
java.util.List v1;
com.google.common.collect.testing.testers.ListAddAtIndexTester v0;
java.lang.NullPointerException v2;
v0 := @this: com.google.common.collect.testing.testers.ListAddAtIndexTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: java.util.List getList()>();
interfaceinvoke v1.<java.util.List: void add(int,java.lang.Object)>(0, null);
staticinvoke <com.google.common.collect.testing.testers.ListAddAtIndexTester: void fail(java.lang.String)>("add(n, null) should throw");
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: void expectUnchanged()>();
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: void expectNullMissingWhenNullUnsupported(java.lang.String)>("Should not contain null after unsupported add(n, null)");
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testAddAtIndex_negative()
{
java.lang.IndexOutOfBoundsException v4;
java.util.List v1;
java.lang.Object[] v5;
com.google.common.collect.testing.testers.ListAddAtIndexTester v0;
int v3;
java.lang.Object v2, v6;
v0 := @this: com.google.common.collect.testing.testers.ListAddAtIndexTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: java.util.List getList()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: java.lang.Object e3()>();
v3 = (int) -1;
interfaceinvoke v1.<java.util.List: void add(int,java.lang.Object)>(v3, v2);
staticinvoke <com.google.common.collect.testing.testers.ListAddAtIndexTester: void fail(java.lang.String)>("add(-1, e) should throw");
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: void expectUnchanged()>();
v5 = newarray (java.lang.Object)[1];
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: java.lang.Object e3()>();
v5[0] = v6;
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: void expectMissing(java.lang.Object[])>(v5);
return;
catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
}
public void testAddAtIndex_tooLarge()
{
java.lang.IndexOutOfBoundsException v5;
java.lang.Object[] v6;
com.google.common.collect.testing.testers.ListAddAtIndexTester v0;
java.util.List v1;
int v2, v3;
java.lang.Object v4, v7;
v0 := @this: com.google.common.collect.testing.testers.ListAddAtIndexTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: java.util.List getList()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: int getNumElements()>();
v3 = v2 + 1;
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: java.lang.Object e3()>();
interfaceinvoke v1.<java.util.List: void add(int,java.lang.Object)>(v3, v4);
staticinvoke <com.google.common.collect.testing.testers.ListAddAtIndexTester: void fail(java.lang.String)>("add(size + 1, e) should throw");
label2:
goto label4;
label3:
v5 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: void expectUnchanged()>();
v6 = newarray (java.lang.Object)[1];
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: java.lang.Object e3()>();
v6[0] = v7;
virtualinvoke v0.<com.google.common.collect.testing.testers.ListAddAtIndexTester: void expectMissing(java.lang.Object[])>(v6);
return;
catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
}
public static java.lang.reflect.Method getAddNullSupportedMethod()
{
java.lang.reflect.Method v0;
v0 = staticinvoke <com.google.common.collect.testing.Helpers: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String)>(class "Lcom/google/common/collect/testing/testers/ListAddAtIndexTester;", "testAddAtIndex_nullSupported");
return v0;
}
}