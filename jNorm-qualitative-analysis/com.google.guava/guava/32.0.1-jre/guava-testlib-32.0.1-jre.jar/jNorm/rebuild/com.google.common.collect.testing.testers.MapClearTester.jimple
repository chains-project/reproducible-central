public class com.google.common.collect.testing.testers.MapClearTester extends com.google.common.collect.testing.AbstractMapTester
{
public void <init>()
{
com.google.common.collect.testing.testers.MapClearTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapClearTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractMapTester: void <init>()>();
return;
}
public void testClear()
{
java.util.Iterator v8;
java.util.Set v7;
com.google.common.collect.testing.testers.MapClearTester v0;
java.util.Map v1, v2, v4, v6;
int v5;
boolean v3, v9;
v0 := @this: com.google.common.collect.testing.testers.MapClearTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapClearTester: java.util.Map getMap()>();
interfaceinvoke v1.<java.util.Map: void clear()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapClearTester: java.util.Map getMap()>();
v3 = interfaceinvoke v2.<java.util.Map: boolean isEmpty()>();
staticinvoke <com.google.common.collect.testing.testers.MapClearTester: void assertTrue(java.lang.String,boolean)>("After clear(), a map should be empty.", v3);
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapClearTester: java.util.Map getMap()>();
v5 = interfaceinvoke v4.<java.util.Map: int size()>();
staticinvoke <com.google.common.collect.testing.testers.MapClearTester: void assertEquals(int,int)>(0, v5);
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapClearTester: java.util.Map getMap()>();
v7 = interfaceinvoke v6.<java.util.Map: java.util.Set entrySet()>();
v8 = interfaceinvoke v7.<java.util.Set: java.util.Iterator iterator()>();
v9 = interfaceinvoke v8.<java.util.Iterator: boolean hasNext()>();
staticinvoke <com.google.common.collect.testing.testers.MapClearTester: void assertFalse(boolean)>(v9);
return;
}
public void testClearConcurrentWithEntrySetIteration()
{
java.util.Iterator v3;
java.util.Map v1, v4;
java.util.Set v2;
com.google.common.collect.testing.testers.MapClearTester v0;
java.util.ConcurrentModificationException v5;
v0 := @this: com.google.common.collect.testing.testers.MapClearTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapClearTester: java.util.Map getMap()>();
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapClearTester: java.util.Map getMap()>();
interfaceinvoke v4.<java.util.Map: void clear()>();
interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <com.google.common.collect.testing.testers.MapClearTester: void fail(java.lang.String)>("Expected ConcurrentModificationException");
label2:
goto label4;
label3:
v5 := @caughtexception;
label4:
return;
catch java.util.ConcurrentModificationException from label1 to label2 with label3;
}
public void testClearConcurrentWithKeySetIteration()
{
java.util.Iterator v3;
java.util.Map v1, v4;
java.util.Set v2;
com.google.common.collect.testing.testers.MapClearTester v0;
java.util.ConcurrentModificationException v5;
v0 := @this: com.google.common.collect.testing.testers.MapClearTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapClearTester: java.util.Map getMap()>();
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set keySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapClearTester: java.util.Map getMap()>();
interfaceinvoke v4.<java.util.Map: void clear()>();
interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <com.google.common.collect.testing.testers.MapClearTester: void fail(java.lang.String)>("Expected ConcurrentModificationException");
label2:
goto label4;
label3:
v5 := @caughtexception;
label4:
return;
catch java.util.ConcurrentModificationException from label1 to label2 with label3;
}
public void testClearConcurrentWithValuesIteration()
{
java.util.Iterator v3;
java.util.Collection v2;
java.util.Map v1, v4;
com.google.common.collect.testing.testers.MapClearTester v0;
java.util.ConcurrentModificationException v5;
v0 := @this: com.google.common.collect.testing.testers.MapClearTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapClearTester: java.util.Map getMap()>();
v2 = interfaceinvoke v1.<java.util.Map: java.util.Collection values()>();
v3 = interfaceinvoke v2.<java.util.Collection: java.util.Iterator iterator()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapClearTester: java.util.Map getMap()>();
interfaceinvoke v4.<java.util.Map: void clear()>();
interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <com.google.common.collect.testing.testers.MapClearTester: void fail(java.lang.String)>("Expected ConcurrentModificationException");
label2:
goto label4;
label3:
v5 := @caughtexception;
label4:
return;
catch java.util.ConcurrentModificationException from label1 to label2 with label3;
}
public void testClear_unsupported()
{
java.lang.UnsupportedOperationException v2;
com.google.common.collect.testing.testers.MapClearTester v0;
java.util.Map v1;
v0 := @this: com.google.common.collect.testing.testers.MapClearTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapClearTester: java.util.Map getMap()>();
interfaceinvoke v1.<java.util.Map: void clear()>();
staticinvoke <com.google.common.collect.testing.testers.MapClearTester: void fail(java.lang.String)>("clear() should throw UnsupportedOperation if a map does not support it and is not empty.");
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapClearTester: void expectUnchanged()>();
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testClear_unsupportedByEmptyCollection()
{
java.lang.UnsupportedOperationException v2;
com.google.common.collect.testing.testers.MapClearTester v0;
java.util.Map v1;
v0 := @this: com.google.common.collect.testing.testers.MapClearTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapClearTester: java.util.Map getMap()>();
interfaceinvoke v1.<java.util.Map: void clear()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapClearTester: void expectUnchanged()>();
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
}