public class com.google.common.collect.testing.testers.MapComputeIfPresentTester extends com.google.common.collect.testing.AbstractMapTester
{
public void <init>()
{
com.google.common.collect.testing.testers.MapComputeIfPresentTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapComputeIfPresentTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractMapTester: void <init>()>();
return;
}
public void testComputeIfPresent_supportedAbsent()
{
java.util.Map v1;
java.util.function.BiFunction v3;
java.lang.Object v2, v4;
com.google.common.collect.testing.testers.MapComputeIfPresentTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapComputeIfPresentTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: java.lang.Object k3()>();
v3 = staticinvoke <com.google.common.collect.testing.testers.MapComputeIfPresentTester$lambda_testComputeIfPresent_supportedAbsent_0__43: java.util.function.BiFunction bootstrap$()>();
v4 = interfaceinvoke v1.<java.util.Map: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>(v2, v3);
staticinvoke <com.google.common.collect.testing.testers.MapComputeIfPresentTester: void assertNull(java.lang.String,java.lang.Object)>("computeIfPresent(notPresent, function) should return null", v4);
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: void expectUnchanged()>();
return;
}
public void testComputeIfPresent_supportedPresent()
{
java.util.Map$Entry v8;
java.util.function.BiFunction v4;
com.google.common.collect.testing.testers.MapComputeIfPresentTester v0;
java.util.Map v2;
java.lang.Object v1, v3, v5, v6, v7;
v0 := @this: com.google.common.collect.testing.testers.MapComputeIfPresentTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: java.lang.Object v3()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: java.util.Map getMap()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: java.lang.Object k0()>();
v4 = staticinvoke <com.google.common.collect.testing.testers.MapComputeIfPresentTester$lambda_testComputeIfPresent_supportedPresent_1__44: java.util.function.BiFunction bootstrap$(com.google.common.collect.testing.testers.MapComputeIfPresentTester)>(v0);
v5 = interfaceinvoke v2.<java.util.Map: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>(v3, v4);
staticinvoke <com.google.common.collect.testing.testers.MapComputeIfPresentTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("computeIfPresent(present, function) should return new value", v1, v5);
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: java.lang.Object k0()>();
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: java.lang.Object v3()>();
v8 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>(v6, v7);
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: void expectReplacement(java.util.Map$Entry)>(v8);
return;
}
public void testComputeIfPresent_functionReturnsNull()
{
java.util.Map v1;
java.util.function.BiFunction v3;
java.lang.Object v2, v4, v6;
java.util.Map$Entry[] v5;
com.google.common.collect.testing.testers.MapComputeIfPresentTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapComputeIfPresentTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: java.lang.Object k0()>();
v3 = staticinvoke <com.google.common.collect.testing.testers.MapComputeIfPresentTester$lambda_testComputeIfPresent_functionReturnsNull_2__45: java.util.function.BiFunction bootstrap$(com.google.common.collect.testing.testers.MapComputeIfPresentTester)>(v0);
v4 = interfaceinvoke v1.<java.util.Map: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>(v2, v3);
staticinvoke <com.google.common.collect.testing.testers.MapComputeIfPresentTester: void assertNull(java.lang.String,java.lang.Object)>("computeIfPresent(present, returnsNull) should return null", v4);
v5 = newarray (java.util.Map$Entry)[1];
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: java.lang.Object e0()>();
v5[0] = v6;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: void expectMissing(java.util.Map$Entry[])>(v5);
return;
}
public void testComputeIfPresent_nullTreatedAsAbsent()
{
java.util.Map$Entry v6;
java.util.Map v1;
java.util.function.BiFunction v3;
java.lang.Object v2, v4, v5;
com.google.common.collect.testing.testers.MapComputeIfPresentTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapComputeIfPresentTester;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: void initMapWithNullValue()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: java.lang.Object getKeyForNullValue()>();
v3 = staticinvoke <com.google.common.collect.testing.testers.MapComputeIfPresentTester$lambda_testComputeIfPresent_nullTreatedAsAbsent_3__46: java.util.function.BiFunction bootstrap$()>();
v4 = interfaceinvoke v1.<java.util.Map: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>(v2, v3);
staticinvoke <com.google.common.collect.testing.testers.MapComputeIfPresentTester: void assertNull(java.lang.String,java.lang.Object)>("computeIfPresent(presentAssignedToNull, function) should return null", v4);
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: java.lang.Object getKeyForNullValue()>();
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>(v5, null);
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: void expectReplacement(java.util.Map$Entry)>(v6);
return;
}
public void testComputeIfPresent_functionThrows()
{
com.google.common.collect.testing.testers.MapComputeIfPresentTester$ExpectedException v4;
java.util.Map v1;
java.util.function.BiFunction v3;
java.lang.Object v2;
com.google.common.collect.testing.testers.MapComputeIfPresentTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapComputeIfPresentTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: java.lang.Object k0()>();
v3 = staticinvoke <com.google.common.collect.testing.testers.MapComputeIfPresentTester$lambda_testComputeIfPresent_functionThrows_4__47: java.util.function.BiFunction bootstrap$(com.google.common.collect.testing.testers.MapComputeIfPresentTester)>(v0);
interfaceinvoke v1.<java.util.Map: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>(v2, v3);
staticinvoke <com.google.common.collect.testing.testers.MapComputeIfPresentTester: void fail(java.lang.String)>("Expected ExpectedException");
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: void expectUnchanged()>();
return;
catch com.google.common.collect.testing.testers.MapComputeIfPresentTester$ExpectedException from label1 to label2 with label3;
}
public void testComputeIfPresent_nullKeySupportedPresent()
{
java.util.Map$Entry v8;
java.util.function.BiFunction v3;
com.google.common.collect.testing.testers.MapComputeIfPresentTester v0;
java.util.Map v2;
int v6;
java.lang.Object v1, v4, v7;
java.util.Map$Entry[] v5;
v0 := @this: com.google.common.collect.testing.testers.MapComputeIfPresentTester;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: void initMapWithNullKey()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: java.lang.Object v3()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: java.util.Map getMap()>();
v3 = staticinvoke <com.google.common.collect.testing.testers.MapComputeIfPresentTester$lambda_testComputeIfPresent_nullKeySupportedPresent_5__48: java.util.function.BiFunction bootstrap$(com.google.common.collect.testing.testers.MapComputeIfPresentTester)>(v0);
v4 = interfaceinvoke v2.<java.util.Map: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>(null, v3);
staticinvoke <com.google.common.collect.testing.testers.MapComputeIfPresentTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("computeIfPresent(null, function) should return new value", v1, v4);
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: java.util.Map$Entry[] createArrayWithNullKey()>();
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: int getNullLocation()>();
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: java.lang.Object v3()>();
v8 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>(null, v7);
v5[v6] = v8;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: void expectContents(java.lang.Object[])>(v5);
return;
}
public void testComputeIfPresent_nullKeySupportedAbsent()
{
java.util.Map v1;
java.util.function.BiFunction v2;
java.lang.Object v3;
com.google.common.collect.testing.testers.MapComputeIfPresentTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapComputeIfPresentTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: java.util.Map getMap()>();
v2 = staticinvoke <com.google.common.collect.testing.testers.MapComputeIfPresentTester$lambda_testComputeIfPresent_nullKeySupportedAbsent_6__49: java.util.function.BiFunction bootstrap$()>();
v3 = interfaceinvoke v1.<java.util.Map: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>(null, v2);
staticinvoke <com.google.common.collect.testing.testers.MapComputeIfPresentTester: void assertNull(java.lang.String,java.lang.Object)>("computeIfPresent(null, function) should return null", v3);
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: void expectUnchanged()>();
return;
}
public void testComputeIfPresent_unsupportedAbsent()
{
java.lang.UnsupportedOperationException v4;
java.util.Map v1;
java.util.function.BiFunction v3;
java.lang.Object v2;
com.google.common.collect.testing.testers.MapComputeIfPresentTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapComputeIfPresentTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: java.lang.Object k3()>();
v3 = staticinvoke <com.google.common.collect.testing.testers.MapComputeIfPresentTester$lambda_testComputeIfPresent_unsupportedAbsent_7__50: java.util.function.BiFunction bootstrap$()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>(v2, v3);
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: void expectUnchanged()>();
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testComputeIfPresent_unsupportedPresent()
{
java.lang.UnsupportedOperationException v4;
java.util.Map v1;
java.util.function.BiFunction v3;
java.lang.Object v2;
com.google.common.collect.testing.testers.MapComputeIfPresentTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapComputeIfPresentTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: java.lang.Object k0()>();
v3 = staticinvoke <com.google.common.collect.testing.testers.MapComputeIfPresentTester$lambda_testComputeIfPresent_unsupportedPresent_8__51: java.util.function.BiFunction bootstrap$(com.google.common.collect.testing.testers.MapComputeIfPresentTester)>(v0);
interfaceinvoke v1.<java.util.Map: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>(v2, v3);
staticinvoke <com.google.common.collect.testing.testers.MapComputeIfPresentTester: void fail(java.lang.String)>("Expected UnsupportedOperationException");
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapComputeIfPresentTester: void expectUnchanged()>();
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
}