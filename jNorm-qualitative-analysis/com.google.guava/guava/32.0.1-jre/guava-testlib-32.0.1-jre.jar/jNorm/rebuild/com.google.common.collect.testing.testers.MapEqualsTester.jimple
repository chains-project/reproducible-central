public class com.google.common.collect.testing.testers.MapEqualsTester extends com.google.common.collect.testing.AbstractMapTester
{
public void <init>()
{
com.google.common.collect.testing.testers.MapEqualsTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapEqualsTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractMapTester: void <init>()>();
return;
}
public void testEquals_otherMapWithSameEntries()
{
com.google.common.collect.testing.testers.MapEqualsTester v0;
java.util.Collection v2;
java.util.Map v1;
java.util.HashMap v3;
boolean v4;
v0 := @this: com.google.common.collect.testing.testers.MapEqualsTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: java.util.Collection getSampleEntries()>();
v3 = staticinvoke <com.google.common.collect.testing.testers.MapEqualsTester: java.util.HashMap newHashMap(java.util.Collection)>(v2);
v4 = interfaceinvoke v1.<java.util.Map: boolean equals(java.lang.Object)>(v3);
staticinvoke <com.google.common.collect.testing.testers.MapEqualsTester: void assertTrue(java.lang.String,boolean)>("A Map should equal any other Map containing the same entries.", v4);
return;
}
public void testEquals_otherMapWithDifferentEntries()
{
com.google.common.collect.testing.testers.MapEqualsTester v0;
java.util.Collection v3;
java.util.HashMap v4;
java.util.Map v7;
int v1, v2;
java.lang.Object v5, v6;
boolean v8;
v0 := @this: com.google.common.collect.testing.testers.MapEqualsTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: int getNumEntries()>();
v2 = v1 - 1;
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: java.util.Collection getSampleEntries(int)>(v2);
v4 = staticinvoke <com.google.common.collect.testing.testers.MapEqualsTester: java.util.HashMap newHashMap(java.util.Collection)>(v3);
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: java.lang.Object k3()>();
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: java.lang.Object v3()>();
interfaceinvoke v4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v5, v6);
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: java.util.Map getMap()>();
v8 = interfaceinvoke v7.<java.util.Map: boolean equals(java.lang.Object)>(v4);
staticinvoke <com.google.common.collect.testing.testers.MapEqualsTester: void assertFalse(java.lang.String,boolean)>("A Map should not equal another Map containing different entries.", v8);
return;
}
public void testEquals_containingNullKey()
{
com.google.common.collect.testing.testers.MapEqualsTester v0;
java.util.Map$Entry v5;
java.lang.Object[] v7;
java.util.Collection v3;
java.util.HashMap v10;
java.util.Map v9;
int v1, v2;
java.lang.Object v4, v6, v8;
boolean v11;
v0 := @this: com.google.common.collect.testing.testers.MapEqualsTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: int getNumEntries()>();
v2 = v1 - 1;
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: java.util.Collection getSampleEntries(int)>(v2);
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: java.lang.Object v3()>();
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>(null, v4);
interfaceinvoke v3.<java.util.Collection: boolean add(java.lang.Object)>(v5);
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: java.lang.Object getSubjectGenerator()>();
v7 = interfaceinvoke v3.<java.util.Collection: java.lang.Object[] toArray()>();
v8 = interfaceinvoke v6.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.lang.Object create(java.lang.Object[])>(v7);
virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: java.lang.Object resetContainer(java.lang.Object)>(v8);
v9 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: java.util.Map getMap()>();
v10 = staticinvoke <com.google.common.collect.testing.testers.MapEqualsTester: java.util.HashMap newHashMap(java.util.Collection)>(v3);
v11 = interfaceinvoke v9.<java.util.Map: boolean equals(java.lang.Object)>(v10);
staticinvoke <com.google.common.collect.testing.testers.MapEqualsTester: void assertTrue(java.lang.String,boolean)>("A Map should equal any other Map containing the same entries, even if some keys are null.", v11);
return;
}
public void testEquals_otherContainsNullKey()
{
com.google.common.collect.testing.testers.MapEqualsTester v0;
java.util.Map$Entry v5;
java.util.Collection v3;
java.util.HashMap v6;
java.util.Map v7;
int v1, v2;
java.lang.Object v4;
boolean v8;
v0 := @this: com.google.common.collect.testing.testers.MapEqualsTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: int getNumEntries()>();
v2 = v1 - 1;
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: java.util.Collection getSampleEntries(int)>(v2);
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: java.lang.Object v3()>();
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>(null, v4);
interfaceinvoke v3.<java.util.Collection: boolean add(java.lang.Object)>(v5);
v6 = staticinvoke <com.google.common.collect.testing.testers.MapEqualsTester: java.util.HashMap newHashMap(java.util.Collection)>(v3);
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: java.util.Map getMap()>();
v8 = interfaceinvoke v7.<java.util.Map: boolean equals(java.lang.Object)>(v6);
staticinvoke <com.google.common.collect.testing.testers.MapEqualsTester: void assertFalse(java.lang.String,boolean)>("Two Maps should not be equal if exactly one of them contains a null key.", v8);
return;
}
public void testEquals_containingNullValue()
{
com.google.common.collect.testing.testers.MapEqualsTester v0;
java.util.Map$Entry v5;
java.lang.Object[] v7;
java.util.Collection v3;
java.util.HashMap v10;
java.util.Map v9;
int v1, v2;
java.lang.Object v4, v6, v8;
boolean v11;
v0 := @this: com.google.common.collect.testing.testers.MapEqualsTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: int getNumEntries()>();
v2 = v1 - 1;
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: java.util.Collection getSampleEntries(int)>(v2);
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: java.lang.Object k3()>();
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>(v4, null);
interfaceinvoke v3.<java.util.Collection: boolean add(java.lang.Object)>(v5);
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: java.lang.Object getSubjectGenerator()>();
v7 = interfaceinvoke v3.<java.util.Collection: java.lang.Object[] toArray()>();
v8 = interfaceinvoke v6.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.lang.Object create(java.lang.Object[])>(v7);
virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: java.lang.Object resetContainer(java.lang.Object)>(v8);
v9 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: java.util.Map getMap()>();
v10 = staticinvoke <com.google.common.collect.testing.testers.MapEqualsTester: java.util.HashMap newHashMap(java.util.Collection)>(v3);
v11 = interfaceinvoke v9.<java.util.Map: boolean equals(java.lang.Object)>(v10);
staticinvoke <com.google.common.collect.testing.testers.MapEqualsTester: void assertTrue(java.lang.String,boolean)>("A Map should equal any other Map containing the same entries, even if some values are null.", v11);
return;
}
public void testEquals_otherContainsNullValue()
{
com.google.common.collect.testing.testers.MapEqualsTester v0;
java.util.Map$Entry v5;
java.util.Collection v3;
java.util.HashMap v6;
java.util.Map v7;
int v1, v2;
java.lang.Object v4;
boolean v8;
v0 := @this: com.google.common.collect.testing.testers.MapEqualsTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: int getNumEntries()>();
v2 = v1 - 1;
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: java.util.Collection getSampleEntries(int)>(v2);
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: java.lang.Object k3()>();
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>(v4, null);
interfaceinvoke v3.<java.util.Collection: boolean add(java.lang.Object)>(v5);
v6 = staticinvoke <com.google.common.collect.testing.testers.MapEqualsTester: java.util.HashMap newHashMap(java.util.Collection)>(v3);
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: java.util.Map getMap()>();
v8 = interfaceinvoke v7.<java.util.Map: boolean equals(java.lang.Object)>(v6);
staticinvoke <com.google.common.collect.testing.testers.MapEqualsTester: void assertFalse(java.lang.String,boolean)>("Two Maps should not be equal if exactly one of them contains a null value.", v8);
return;
}
public void testEquals_smallerMap()
{
com.google.common.collect.testing.testers.MapEqualsTester v0;
java.util.Collection v3;
java.util.Map v4;
int v1, v2;
java.util.HashMap v5;
boolean v6;
v0 := @this: com.google.common.collect.testing.testers.MapEqualsTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: int getNumEntries()>();
v2 = v1 - 1;
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: java.util.Collection getSampleEntries(int)>(v2);
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: java.util.Map getMap()>();
v5 = staticinvoke <com.google.common.collect.testing.testers.MapEqualsTester: java.util.HashMap newHashMap(java.util.Collection)>(v3);
v6 = interfaceinvoke v4.<java.util.Map: boolean equals(java.lang.Object)>(v5);
staticinvoke <com.google.common.collect.testing.testers.MapEqualsTester: void assertFalse(java.lang.String,boolean)>("Maps of different sizes should not be equal.", v6);
return;
}
public void testEquals_largerMap()
{
com.google.common.collect.testing.testers.MapEqualsTester v0;
java.util.Collection v3;
java.util.Map v4;
int v1, v2;
java.util.HashMap v5;
boolean v6;
v0 := @this: com.google.common.collect.testing.testers.MapEqualsTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: int getNumEntries()>();
v2 = v1 + 1;
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: java.util.Collection getSampleEntries(int)>(v2);
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: java.util.Map getMap()>();
v5 = staticinvoke <com.google.common.collect.testing.testers.MapEqualsTester: java.util.HashMap newHashMap(java.util.Collection)>(v3);
v6 = interfaceinvoke v4.<java.util.Map: boolean equals(java.lang.Object)>(v5);
staticinvoke <com.google.common.collect.testing.testers.MapEqualsTester: void assertFalse(java.lang.String,boolean)>("Maps of different sizes should not be equal.", v6);
return;
}
public void testEquals_list()
{
com.google.common.collect.testing.testers.MapEqualsTester v0;
java.util.List v4;
java.util.Map v1, v2;
java.util.Set v3;
boolean v5;
v0 := @this: com.google.common.collect.testing.testers.MapEqualsTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapEqualsTester: java.util.Map getMap()>();
v3 = interfaceinvoke v2.<java.util.Map: java.util.Set entrySet()>();
v4 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.List copyToList(java.lang.Iterable)>(v3);
v5 = interfaceinvoke v1.<java.util.Map: boolean equals(java.lang.Object)>(v4);
staticinvoke <com.google.common.collect.testing.testers.MapEqualsTester: void assertFalse(java.lang.String,boolean)>("A List should never equal a Map.", v5);
return;
}
private static java.util.HashMap newHashMap(java.util.Collection)
{
java.util.Iterator v2;
java.util.Collection v0;
java.lang.Object v4, v5, v6;
java.util.HashMap v1;
boolean v3;
v0 := @parameter0: java.util.Collection;
v1 = new java.util.HashMap;
specialinvoke v1.<java.util.HashMap: void <init>()>();
v2 = interfaceinvoke v0.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getKey()>();
v6 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
virtualinvoke v1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v5, v6);
goto label1;
label2:
return v1;
}
}