public class com.google.common.collect.testing.testers.MapGetTester extends com.google.common.collect.testing.AbstractMapTester
{
public void <init>()
{
com.google.common.collect.testing.testers.MapGetTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapGetTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractMapTester: void <init>()>();
return;
}
public void testGet_yes()
{
com.google.common.collect.testing.testers.MapGetTester v0;
java.lang.Object v1, v2, v3;
v0 := @this: com.google.common.collect.testing.testers.MapGetTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetTester: java.lang.Object v0()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetTester: java.lang.Object k0()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetTester: java.lang.Object get(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.testers.MapGetTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("get(present) should return the associated value", v1, v3);
return;
}
public void testGet_no()
{
com.google.common.collect.testing.testers.MapGetTester v0;
java.lang.Object v1, v2;
v0 := @this: com.google.common.collect.testing.testers.MapGetTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetTester: java.lang.Object k3()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetTester: java.lang.Object get(java.lang.Object)>(v1);
staticinvoke <com.google.common.collect.testing.testers.MapGetTester: void assertNull(java.lang.String,java.lang.Object)>("get(notPresent) should return null", v2);
return;
}
public void testGet_nullNotContainedButAllowed()
{
com.google.common.collect.testing.testers.MapGetTester v0;
java.lang.Object v1;
v0 := @this: com.google.common.collect.testing.testers.MapGetTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetTester: java.lang.Object get(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.testers.MapGetTester: void assertNull(java.lang.String,java.lang.Object)>("get(null) should return null", v1);
return;
}
public void testGet_nullNotContainedAndUnsupported()
{
com.google.common.collect.testing.testers.MapGetTester v0;
java.lang.Object v1;
java.lang.NullPointerException v2;
v0 := @this: com.google.common.collect.testing.testers.MapGetTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetTester: java.lang.Object get(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.testers.MapGetTester: void assertNull(java.lang.String,java.lang.Object)>("get(null) should return null or throw", v1);
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testGet_nonNullWhenNullContained()
{
com.google.common.collect.testing.testers.MapGetTester v0;
java.lang.Object v1, v2;
v0 := @this: com.google.common.collect.testing.testers.MapGetTester;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetTester: void initMapWithNullKey()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetTester: java.lang.Object k3()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetTester: java.lang.Object get(java.lang.Object)>(v1);
staticinvoke <com.google.common.collect.testing.testers.MapGetTester: void assertNull(java.lang.String,java.lang.Object)>("get(notPresent) should return null", v2);
return;
}
public void testGet_nullContained()
{
com.google.common.collect.testing.testers.MapGetTester v0;
java.lang.Object v1, v2;
v0 := @this: com.google.common.collect.testing.testers.MapGetTester;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetTester: void initMapWithNullKey()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetTester: java.lang.Object getValueForNullKey()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetTester: java.lang.Object get(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.testers.MapGetTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("get(null) should return the associated value", v1, v2);
return;
}
public void testGet_wrongType()
{
com.google.common.collect.testing.testers.MapGetTester v0;
com.google.common.collect.testing.WrongType v2;
java.util.Map v1;
java.lang.Object v3;
java.lang.ClassCastException v4;
v0 := @this: com.google.common.collect.testing.testers.MapGetTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapGetTester: java.util.Map getMap()>();
v2 = <com.google.common.collect.testing.WrongType: com.google.common.collect.testing.WrongType VALUE>;
v3 = interfaceinvoke v1.<java.util.Map: java.lang.Object get(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.testers.MapGetTester: void assertNull(java.lang.String,java.lang.Object)>("get(wrongType) should return null or throw", v3);
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
return;
catch java.lang.ClassCastException from label1 to label2 with label3;
}
}