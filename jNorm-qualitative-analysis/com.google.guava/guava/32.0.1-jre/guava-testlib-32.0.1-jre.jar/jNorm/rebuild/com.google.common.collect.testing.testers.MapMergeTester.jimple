public class com.google.common.collect.testing.testers.MapMergeTester extends com.google.common.collect.testing.AbstractMapTester
{
public void <init>()
{
com.google.common.collect.testing.testers.MapMergeTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapMergeTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractMapTester: void <init>()>();
return;
}
public void testAbsent()
{
java.util.function.BiFunction v5;
com.google.common.collect.testing.testers.MapMergeTester v0;
java.util.Map v2;
java.lang.Object v1, v3, v4, v6, v8;
java.util.Map$Entry[] v7;
v0 := @this: com.google.common.collect.testing.testers.MapMergeTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.lang.Object v3()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.util.Map getMap()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.lang.Object k3()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.lang.Object v3()>();
v5 = staticinvoke <com.google.common.collect.testing.testers.MapMergeTester$lambda_testAbsent_0__65: java.util.function.BiFunction bootstrap$()>();
v6 = interfaceinvoke v2.<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>(v3, v4, v5);
staticinvoke <com.google.common.collect.testing.testers.MapMergeTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Map.merge(absent, value, function) should return value", v1, v6);
v7 = newarray (java.util.Map$Entry)[1];
v8 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.lang.Object e3()>();
v7[0] = v8;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: void expectAdded(java.lang.Object[])>(v7);
return;
}
public void testMappedToNull()
{
java.util.Map$Entry v9;
java.util.function.BiFunction v5;
com.google.common.collect.testing.testers.MapMergeTester v0;
java.util.Map v2;
java.lang.Object v1, v3, v4, v6, v7, v8;
v0 := @this: com.google.common.collect.testing.testers.MapMergeTester;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: void initMapWithNullValue()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.lang.Object v3()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.util.Map getMap()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.lang.Object getKeyForNullValue()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.lang.Object v3()>();
v5 = staticinvoke <com.google.common.collect.testing.testers.MapMergeTester$lambda_testMappedToNull_1__66: java.util.function.BiFunction bootstrap$()>();
v6 = interfaceinvoke v2.<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>(v3, v4, v5);
staticinvoke <com.google.common.collect.testing.testers.MapMergeTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Map.merge(keyMappedToNull, value, function) should return value", v1, v6);
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.lang.Object getKeyForNullValue()>();
v8 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.lang.Object v3()>();
v9 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>(v7, v8);
virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: void expectReplacement(java.util.Map$Entry)>(v9);
return;
}
public void testMergeAbsentNullKey()
{
java.util.Map$Entry v8;
java.util.function.BiFunction v4;
com.google.common.collect.testing.testers.MapMergeTester v0;
java.util.Map v2;
java.lang.Object v1, v3, v5, v7;
java.util.Map$Entry[] v6;
v0 := @this: com.google.common.collect.testing.testers.MapMergeTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.lang.Object v3()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.util.Map getMap()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.lang.Object v3()>();
v4 = staticinvoke <com.google.common.collect.testing.testers.MapMergeTester$lambda_testMergeAbsentNullKey_2__67: java.util.function.BiFunction bootstrap$()>();
v5 = interfaceinvoke v2.<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>(null, v3, v4);
staticinvoke <com.google.common.collect.testing.testers.MapMergeTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Map.merge(null, value, function) should return value", v1, v5);
v6 = newarray (java.util.Map$Entry)[1];
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.lang.Object v3()>();
v8 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>(null, v7);
v6[0] = v8;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: void expectAdded(java.lang.Object[])>(v6);
return;
}
public void testMergePresent()
{
java.util.Map$Entry v9;
java.util.function.BiFunction v5;
com.google.common.collect.testing.testers.MapMergeTester v0;
java.util.Map v2;
java.lang.Object v1, v3, v4, v6, v7, v8;
v0 := @this: com.google.common.collect.testing.testers.MapMergeTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.lang.Object v4()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.util.Map getMap()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.lang.Object k0()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.lang.Object v3()>();
v5 = staticinvoke <com.google.common.collect.testing.testers.MapMergeTester$lambda_testMergePresent_3__68: java.util.function.BiFunction bootstrap$(com.google.common.collect.testing.testers.MapMergeTester)>(v0);
v6 = interfaceinvoke v2.<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>(v3, v4, v5);
staticinvoke <com.google.common.collect.testing.testers.MapMergeTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Map.merge(present, value, function) should return function result", v1, v6);
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.lang.Object k0()>();
v8 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.lang.Object v4()>();
v9 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>(v7, v8);
virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: void expectReplacement(java.util.Map$Entry)>(v9);
return;
}
public void testMergeFunctionThrows()
{
com.google.common.collect.testing.testers.MapMergeTester v0;
java.util.Map v1;
java.util.function.BiFunction v4;
com.google.common.collect.testing.testers.MapMergeTester$ExpectedException v5;
java.lang.Object v2, v3;
v0 := @this: com.google.common.collect.testing.testers.MapMergeTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.lang.Object k0()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.lang.Object v3()>();
v4 = staticinvoke <com.google.common.collect.testing.testers.MapMergeTester$lambda_testMergeFunctionThrows_4__69: java.util.function.BiFunction bootstrap$(com.google.common.collect.testing.testers.MapMergeTester)>(v0);
interfaceinvoke v1.<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>(v2, v3, v4);
staticinvoke <com.google.common.collect.testing.testers.MapMergeTester: void fail(java.lang.String)>("Expected ExpectedException");
label2:
goto label4;
label3:
v5 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: void expectUnchanged()>();
return;
catch com.google.common.collect.testing.testers.MapMergeTester$ExpectedException from label1 to label2 with label3;
}
public void testMergePresentToNull()
{
java.util.function.BiFunction v4;
com.google.common.collect.testing.testers.MapMergeTester v0;
java.util.Map v1;
java.lang.Object v2, v3, v5, v7;
java.util.Map$Entry[] v6;
v0 := @this: com.google.common.collect.testing.testers.MapMergeTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.lang.Object k0()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.lang.Object v3()>();
v4 = staticinvoke <com.google.common.collect.testing.testers.MapMergeTester$lambda_testMergePresentToNull_5__70: java.util.function.BiFunction bootstrap$(com.google.common.collect.testing.testers.MapMergeTester)>(v0);
v5 = interfaceinvoke v1.<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>(v2, v3, v4);
staticinvoke <com.google.common.collect.testing.testers.MapMergeTester: void assertNull(java.lang.String,java.lang.Object)>("Map.merge(present, value, functionReturningNull) should return null", v5);
v6 = newarray (java.util.Map$Entry)[1];
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.lang.Object e0()>();
v6[0] = v7;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: void expectMissing(java.util.Map$Entry[])>(v6);
return;
}
public void testMergeNullValue()
{
com.google.common.collect.testing.testers.MapMergeTester v0;
java.util.Map v1;
java.util.function.BiFunction v3;
java.lang.Object v2;
java.lang.RuntimeException v4;
v0 := @this: com.google.common.collect.testing.testers.MapMergeTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.lang.Object k0()>();
v3 = staticinvoke <com.google.common.collect.testing.testers.MapMergeTester$lambda_testMergeNullValue_6__71: java.util.function.BiFunction bootstrap$()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>(v2, null, v3);
staticinvoke <com.google.common.collect.testing.testers.MapMergeTester: void fail(java.lang.String)>("Expected NullPointerException or UnsupportedOperationException");
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testMergeNullFunction()
{
com.google.common.collect.testing.testers.MapMergeTester v0;
java.util.Map v1;
java.lang.Object v2, v3;
java.lang.RuntimeException v4;
v0 := @this: com.google.common.collect.testing.testers.MapMergeTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.lang.Object k0()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.lang.Object v3()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>(v2, v3, null);
staticinvoke <com.google.common.collect.testing.testers.MapMergeTester: void fail(java.lang.String)>("Expected NullPointerException or UnsupportedOperationException");
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testMergeUnsupported()
{
java.lang.UnsupportedOperationException v5;
com.google.common.collect.testing.testers.MapMergeTester v0;
java.util.Map v1;
java.util.function.BiFunction v4;
java.lang.Object v2, v3;
v0 := @this: com.google.common.collect.testing.testers.MapMergeTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.lang.Object k3()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapMergeTester: java.lang.Object v3()>();
v4 = staticinvoke <com.google.common.collect.testing.testers.MapMergeTester$lambda_testMergeUnsupported_7__72: java.util.function.BiFunction bootstrap$()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>(v2, v3, v4);
staticinvoke <com.google.common.collect.testing.testers.MapMergeTester: void fail(java.lang.String)>("Expected UnsupportedOperationException");
label2:
goto label4;
label3:
v5 := @caughtexception;
label4:
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public static java.lang.reflect.Method getMergeNullValueMethod()
{
java.lang.reflect.Method v0;
v0 = staticinvoke <com.google.common.collect.testing.Helpers: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String)>(class "Lcom/google/common/collect/testing/testers/MapMergeTester;", "testMergeNullValue");
return v0;
}
}