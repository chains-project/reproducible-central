public class com.google.common.collect.testing.testers.MapPutAllTester extends com.google.common.collect.testing.AbstractMapTester
{
private java.util.List containsNullKey;
private java.util.List containsNullValue;
public void <init>()
{
com.google.common.collect.testing.testers.MapPutAllTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapPutAllTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractMapTester: void <init>()>();
return;
}
public void setUp() throws java.lang.Exception
{
com.google.common.collect.testing.testers.MapPutAllTester v0;
java.util.List v3, v6;
java.util.Map$Entry v2, v5;
java.lang.Object v1, v4;
v0 := @this: com.google.common.collect.testing.testers.MapPutAllTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractMapTester: void setUp()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: java.lang.Object v3()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>(null, v1);
v3 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(v2);
v0.<com.google.common.collect.testing.testers.MapPutAllTester: java.util.List containsNullKey> = v3;
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: java.lang.Object k3()>();
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>(v4, null);
v6 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(v5);
v0.<com.google.common.collect.testing.testers.MapPutAllTester: java.util.List containsNullValue> = v6;
return;
}
public void testPutAll_supportedNothing()
{
com.google.common.collect.testing.testers.MapPutAllTester v0;
java.util.Map v1, v2;
v0 := @this: com.google.common.collect.testing.testers.MapPutAllTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: java.util.Map getMap()>();
v2 = specialinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: java.util.Map emptyMap()>();
interfaceinvoke v1.<java.util.Map: void putAll(java.util.Map)>(v2);
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: void expectUnchanged()>();
return;
}
public void testPutAll_unsupportedNothing()
{
java.lang.UnsupportedOperationException v3;
com.google.common.collect.testing.testers.MapPutAllTester v0;
java.util.Map v1, v2;
v0 := @this: com.google.common.collect.testing.testers.MapPutAllTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: java.util.Map getMap()>();
v2 = specialinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: java.util.Map emptyMap()>();
interfaceinvoke v1.<java.util.Map: void putAll(java.util.Map)>(v2);
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: void expectUnchanged()>();
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testPutAll_supportedNonePresent()
{
com.google.common.collect.testing.testers.MapPutAllTester v0;
java.lang.Object v3, v4;
com.google.common.collect.testing.MinimalCollection v1;
java.util.Map$Entry[] v2;
v0 := @this: com.google.common.collect.testing.testers.MapPutAllTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: com.google.common.collect.testing.MinimalCollection createDisjointCollection()>();
specialinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: void putAll(java.lang.Iterable)>(v1);
v2 = newarray (java.util.Map$Entry)[2];
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: java.lang.Object e3()>();
v2[0] = v3;
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: java.lang.Object e4()>();
v2[1] = v4;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: void expectAdded(java.lang.Object[])>(v2);
return;
}
public void testPutAll_unsupportedNonePresent()
{
java.lang.UnsupportedOperationException v2;
com.google.common.collect.testing.testers.MapPutAllTester v0;
java.lang.Object v4, v5;
com.google.common.collect.testing.MinimalCollection v1;
java.util.Map$Entry[] v3;
v0 := @this: com.google.common.collect.testing.testers.MapPutAllTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: com.google.common.collect.testing.MinimalCollection createDisjointCollection()>();
specialinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: void putAll(java.lang.Iterable)>(v1);
staticinvoke <com.google.common.collect.testing.testers.MapPutAllTester: void fail(java.lang.String)>("putAll(nonePresent) should throw");
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: void expectUnchanged()>();
v3 = newarray (java.util.Map$Entry)[2];
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: java.lang.Object e3()>();
v3[0] = v4;
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: java.lang.Object e4()>();
v3[1] = v5;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: void expectMissing(java.util.Map$Entry[])>(v3);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testPutAll_supportedSomePresent()
{
com.google.common.collect.testing.testers.MapPutAllTester v0;
java.lang.Object v2, v3, v6;
com.google.common.collect.testing.MinimalCollection v4;
java.util.Map$Entry[] v1, v5;
v0 := @this: com.google.common.collect.testing.testers.MapPutAllTester;
v1 = newarray (java.util.Map$Entry)[2];
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: java.lang.Object e3()>();
v1[0] = v2;
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: java.lang.Object e0()>();
v1[1] = v3;
v4 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v1);
specialinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: void putAll(java.lang.Iterable)>(v4);
v5 = newarray (java.util.Map$Entry)[1];
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: java.lang.Object e3()>();
v5[0] = v6;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: void expectAdded(java.lang.Object[])>(v5);
return;
}
public void testPutAllSomePresentConcurrentWithEntrySetIteration()
{
com.google.common.collect.testing.testers.MapPutAllTester v0;
java.util.Iterator v3;
java.util.Set v2;
java.util.Map v1;
java.lang.Object v5, v6;
com.google.common.collect.testing.MinimalCollection v7;
java.util.ConcurrentModificationException v8;
java.util.Map$Entry[] v4;
v0 := @this: com.google.common.collect.testing.testers.MapPutAllTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: java.util.Map getMap()>();
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
v4 = newarray (java.util.Map$Entry)[2];
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: java.lang.Object e3()>();
v4[0] = v5;
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: java.lang.Object e0()>();
v4[1] = v6;
v7 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v4);
specialinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: void putAll(java.lang.Iterable)>(v7);
interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <com.google.common.collect.testing.testers.MapPutAllTester: void fail(java.lang.String)>("Expected ConcurrentModificationException");
label2:
goto label4;
label3:
v8 := @caughtexception;
label4:
return;
catch java.util.ConcurrentModificationException from label1 to label2 with label3;
}
public void testPutAll_unsupportedSomePresent()
{
java.lang.UnsupportedOperationException v5;
com.google.common.collect.testing.testers.MapPutAllTester v0;
java.lang.Object v2, v3;
com.google.common.collect.testing.MinimalCollection v4;
java.util.Map$Entry[] v1;
v0 := @this: com.google.common.collect.testing.testers.MapPutAllTester;
label1:
v1 = newarray (java.util.Map$Entry)[2];
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: java.lang.Object e3()>();
v1[0] = v2;
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: java.lang.Object e0()>();
v1[1] = v3;
v4 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v1);
specialinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: void putAll(java.lang.Iterable)>(v4);
staticinvoke <com.google.common.collect.testing.testers.MapPutAllTester: void fail(java.lang.String)>("putAll(somePresent) should throw");
label2:
goto label4;
label3:
v5 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: void expectUnchanged()>();
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testPutAll_unsupportedAllPresent()
{
java.lang.UnsupportedOperationException v4;
com.google.common.collect.testing.testers.MapPutAllTester v0;
java.lang.Object v2;
com.google.common.collect.testing.MinimalCollection v3;
java.util.Map$Entry[] v1;
v0 := @this: com.google.common.collect.testing.testers.MapPutAllTester;
label1:
v1 = newarray (java.util.Map$Entry)[1];
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: java.lang.Object e0()>();
v1[0] = v2;
v3 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v1);
specialinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: void putAll(java.lang.Iterable)>(v3);
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: void expectUnchanged()>();
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testPutAll_nullKeySupported()
{
com.google.common.collect.testing.testers.MapPutAllTester v0;
java.util.List v1, v3;
java.lang.Object v4;
java.util.Map$Entry[] v2;
v0 := @this: com.google.common.collect.testing.testers.MapPutAllTester;
v1 = v0.<com.google.common.collect.testing.testers.MapPutAllTester: java.util.List containsNullKey>;
specialinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: void putAll(java.lang.Iterable)>(v1);
v2 = newarray (java.util.Map$Entry)[1];
v3 = v0.<com.google.common.collect.testing.testers.MapPutAllTester: java.util.List containsNullKey>;
v4 = interfaceinvoke v3.<java.util.List: java.lang.Object get(int)>(0);
v2[0] = v4;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: void expectAdded(java.lang.Object[])>(v2);
return;
}
public void testPutAll_nullKeyUnsupported()
{
com.google.common.collect.testing.testers.MapPutAllTester v0;
java.util.List v1;
java.lang.NullPointerException v2;
v0 := @this: com.google.common.collect.testing.testers.MapPutAllTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.MapPutAllTester: java.util.List containsNullKey>;
specialinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: void putAll(java.lang.Iterable)>(v1);
staticinvoke <com.google.common.collect.testing.testers.MapPutAllTester: void fail(java.lang.String)>("putAll(containsNullKey) should throw");
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: void expectUnchanged()>();
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: void expectNullKeyMissingWhenNullKeysUnsupported(java.lang.String)>("Should not contain null key after unsupported putAll(containsNullKey)");
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testPutAll_nullValueSupported()
{
com.google.common.collect.testing.testers.MapPutAllTester v0;
java.util.List v1, v3;
java.lang.Object v4;
java.util.Map$Entry[] v2;
v0 := @this: com.google.common.collect.testing.testers.MapPutAllTester;
v1 = v0.<com.google.common.collect.testing.testers.MapPutAllTester: java.util.List containsNullValue>;
specialinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: void putAll(java.lang.Iterable)>(v1);
v2 = newarray (java.util.Map$Entry)[1];
v3 = v0.<com.google.common.collect.testing.testers.MapPutAllTester: java.util.List containsNullValue>;
v4 = interfaceinvoke v3.<java.util.List: java.lang.Object get(int)>(0);
v2[0] = v4;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: void expectAdded(java.lang.Object[])>(v2);
return;
}
public void testPutAll_nullValueUnsupported()
{
com.google.common.collect.testing.testers.MapPutAllTester v0;
java.util.List v1;
java.lang.NullPointerException v2;
v0 := @this: com.google.common.collect.testing.testers.MapPutAllTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.MapPutAllTester: java.util.List containsNullValue>;
specialinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: void putAll(java.lang.Iterable)>(v1);
staticinvoke <com.google.common.collect.testing.testers.MapPutAllTester: void fail(java.lang.String)>("putAll(containsNullValue) should throw");
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: void expectUnchanged()>();
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: void expectNullValueMissingWhenNullValuesUnsupported(java.lang.String)>("Should not contain null value after unsupported putAll(containsNullValue)");
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testPutAll_nullCollectionReference()
{
com.google.common.collect.testing.testers.MapPutAllTester v0;
java.lang.NullPointerException v2;
java.util.Map v1;
v0 := @this: com.google.common.collect.testing.testers.MapPutAllTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: java.util.Map getMap()>();
interfaceinvoke v1.<java.util.Map: void putAll(java.util.Map)>(null);
staticinvoke <com.google.common.collect.testing.testers.MapPutAllTester: void fail(java.lang.String)>("putAll(null) should throw NullPointerException");
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
private java.util.Map emptyMap()
{
com.google.common.collect.testing.testers.MapPutAllTester v0;
java.util.Map v1;
v0 := @this: com.google.common.collect.testing.testers.MapPutAllTester;
v1 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
return v1;
}
private void putAll(java.lang.Iterable)
{
com.google.common.collect.testing.testers.MapPutAllTester v0;
java.util.Iterator v3;
java.lang.Iterable v1;
java.util.LinkedHashMap v2;
java.util.Map v8;
java.lang.Object v5, v6, v7;
boolean v4;
v0 := @this: com.google.common.collect.testing.testers.MapPutAllTester;
v1 := @parameter0: java.lang.Iterable;
v2 = new java.util.LinkedHashMap;
specialinvoke v2.<java.util.LinkedHashMap: void <init>()>();
v3 = interfaceinvoke v1.<java.lang.Iterable: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
v7 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getValue()>();
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v6, v7);
goto label1;
label2:
v8 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutAllTester: java.util.Map getMap()>();
interfaceinvoke v8.<java.util.Map: void putAll(java.util.Map)>(v2);
return;
}
public static java.lang.reflect.Method getPutAllNullKeyUnsupportedMethod()
{
java.lang.reflect.Method v0;
v0 = staticinvoke <com.google.common.collect.testing.Helpers: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String)>(class "Lcom/google/common/collect/testing/testers/MapPutAllTester;", "testPutAll_nullKeyUnsupported");
return v0;
}
}