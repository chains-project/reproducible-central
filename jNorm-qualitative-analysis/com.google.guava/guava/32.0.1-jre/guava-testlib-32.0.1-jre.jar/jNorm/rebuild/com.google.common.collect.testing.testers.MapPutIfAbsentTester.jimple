public class com.google.common.collect.testing.testers.MapPutIfAbsentTester extends com.google.common.collect.testing.AbstractMapTester
{
public void <init>()
{
com.google.common.collect.testing.testers.MapPutIfAbsentTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapPutIfAbsentTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractMapTester: void <init>()>();
return;
}
public void testPutIfAbsent_supportedAbsent()
{
java.util.Map v1;
java.lang.Object v2, v3, v4, v6;
com.google.common.collect.testing.testers.MapPutIfAbsentTester v0;
java.util.Map$Entry[] v5;
v0 := @this: com.google.common.collect.testing.testers.MapPutIfAbsentTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: java.lang.Object k3()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: java.lang.Object v3()>();
v4 = interfaceinvoke v1.<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(v2, v3);
staticinvoke <com.google.common.collect.testing.testers.MapPutIfAbsentTester: void assertNull(java.lang.String,java.lang.Object)>("putIfAbsent(notPresent, value) should return null", v4);
v5 = newarray (java.util.Map$Entry)[1];
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: java.lang.Object e3()>();
v5[0] = v6;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: void expectAdded(java.lang.Object[])>(v5);
return;
}
public void testPutIfAbsent_supportedPresent()
{
java.util.Map v2;
java.lang.Object v1, v3, v4, v5;
com.google.common.collect.testing.testers.MapPutIfAbsentTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapPutIfAbsentTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: java.lang.Object v0()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: java.util.Map getMap()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: java.lang.Object k0()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: java.lang.Object v3()>();
v5 = interfaceinvoke v2.<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(v3, v4);
staticinvoke <com.google.common.collect.testing.testers.MapPutIfAbsentTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("putIfAbsent(present, value) should return existing value", v1, v5);
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: void expectUnchanged()>();
return;
}
public void testPutIfAbsent_unsupportedAbsent()
{
java.lang.UnsupportedOperationException v4;
java.util.Map v1;
java.lang.Object v2, v3, v6;
com.google.common.collect.testing.testers.MapPutIfAbsentTester v0;
java.util.Map$Entry[] v5;
v0 := @this: com.google.common.collect.testing.testers.MapPutIfAbsentTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: java.lang.Object k3()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: java.lang.Object v3()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(v2, v3);
staticinvoke <com.google.common.collect.testing.testers.MapPutIfAbsentTester: void fail(java.lang.String)>("putIfAbsent(notPresent, value) should throw");
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: void expectUnchanged()>();
v5 = newarray (java.util.Map$Entry)[1];
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: java.lang.Object e3()>();
v5[0] = v6;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: void expectMissing(java.util.Map$Entry[])>(v5);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testPutIfAbsent_unsupportedPresentExistingValue()
{
java.lang.UnsupportedOperationException v6;
java.util.Map v2;
java.lang.Object v1, v3, v4, v5;
com.google.common.collect.testing.testers.MapPutIfAbsentTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapPutIfAbsentTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: java.lang.Object v0()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: java.util.Map getMap()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: java.lang.Object k0()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: java.lang.Object v0()>();
v5 = interfaceinvoke v2.<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(v3, v4);
staticinvoke <com.google.common.collect.testing.testers.MapPutIfAbsentTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("putIfAbsent(present, existingValue) should return present or throw", v1, v5);
label2:
goto label4;
label3:
v6 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: void expectUnchanged()>();
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testPutIfAbsent_unsupportedPresentDifferentValue()
{
java.lang.UnsupportedOperationException v4;
java.util.Map v1;
java.lang.Object v2, v3;
com.google.common.collect.testing.testers.MapPutIfAbsentTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapPutIfAbsentTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: java.lang.Object k0()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: java.lang.Object v3()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(v2, v3);
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: void expectUnchanged()>();
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testPutIfAbsent_nullKeyUnsupported()
{
java.util.Map v1;
java.lang.Object v2;
com.google.common.collect.testing.testers.MapPutIfAbsentTester v0;
java.lang.NullPointerException v3;
v0 := @this: com.google.common.collect.testing.testers.MapPutIfAbsentTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: java.lang.Object v3()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(null, v2);
staticinvoke <com.google.common.collect.testing.testers.MapPutIfAbsentTester: void fail(java.lang.String)>("putIfAbsent(null, value) should throw");
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: void expectUnchanged()>();
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: void expectNullKeyMissingWhenNullKeysUnsupported(java.lang.String)>("Should not contain null key after unsupported putIfAbsent(null, value)");
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testPutIfAbsent_nullValueUnsupported()
{
java.util.Map v1;
java.lang.Object v2;
com.google.common.collect.testing.testers.MapPutIfAbsentTester v0;
java.lang.NullPointerException v3;
v0 := @this: com.google.common.collect.testing.testers.MapPutIfAbsentTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: java.lang.Object k3()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(v2, null);
staticinvoke <com.google.common.collect.testing.testers.MapPutIfAbsentTester: void fail(java.lang.String)>("putIfAbsent(key, null) should throw");
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: void expectUnchanged()>();
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: void expectNullValueMissingWhenNullValuesUnsupported(java.lang.String)>("Should not contain null value after unsupported put(key, null)");
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testPutIfAbsent_putWithNullValueUnsupported()
{
java.util.Map v1;
java.lang.Object v2;
com.google.common.collect.testing.testers.MapPutIfAbsentTester v0;
java.lang.NullPointerException v3;
v0 := @this: com.google.common.collect.testing.testers.MapPutIfAbsentTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: java.lang.Object k0()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(v2, null);
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: void expectUnchanged()>();
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutIfAbsentTester: void expectNullValueMissingWhenNullValuesUnsupported(java.lang.String)>("Should not contain null after unsupported putIfAbsent(present, null)");
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
}