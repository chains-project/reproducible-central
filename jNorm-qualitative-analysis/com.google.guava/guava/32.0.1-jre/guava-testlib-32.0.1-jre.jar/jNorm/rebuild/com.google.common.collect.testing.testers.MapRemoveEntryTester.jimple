public class com.google.common.collect.testing.testers.MapRemoveEntryTester extends com.google.common.collect.testing.AbstractMapTester
{
public void <init>()
{
com.google.common.collect.testing.testers.MapRemoveEntryTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapRemoveEntryTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractMapTester: void <init>()>();
return;
}
public void testRemove_supportedPresent()
{
java.util.Map v1;
com.google.common.collect.testing.testers.MapRemoveEntryTester v0;
java.lang.Object v2, v3, v6;
java.util.Map$Entry[] v5;
boolean v4;
v0 := @this: com.google.common.collect.testing.testers.MapRemoveEntryTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveEntryTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveEntryTester: java.lang.Object k0()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveEntryTester: java.lang.Object v0()>();
v4 = interfaceinvoke v1.<java.util.Map: boolean remove(java.lang.Object,java.lang.Object)>(v2, v3);
staticinvoke <com.google.common.collect.testing.testers.MapRemoveEntryTester: void assertTrue(boolean)>(v4);
v5 = newarray (java.util.Map$Entry)[1];
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveEntryTester: java.lang.Object e0()>();
v5[0] = v6;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveEntryTester: void expectMissing(java.util.Map$Entry[])>(v5);
return;
}
public void testRemove_supportedPresentKeyWrongValue()
{
java.util.Map v1;
com.google.common.collect.testing.testers.MapRemoveEntryTester v0;
java.lang.Object v2, v3;
boolean v4;
v0 := @this: com.google.common.collect.testing.testers.MapRemoveEntryTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveEntryTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveEntryTester: java.lang.Object k0()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveEntryTester: java.lang.Object v3()>();
v4 = interfaceinvoke v1.<java.util.Map: boolean remove(java.lang.Object,java.lang.Object)>(v2, v3);
staticinvoke <com.google.common.collect.testing.testers.MapRemoveEntryTester: void assertFalse(boolean)>(v4);
virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveEntryTester: void expectUnchanged()>();
return;
}
public void testRemove_supportedWrongKeyPresentValue()
{
java.util.Map v1;
com.google.common.collect.testing.testers.MapRemoveEntryTester v0;
java.lang.Object v2, v3;
boolean v4;
v0 := @this: com.google.common.collect.testing.testers.MapRemoveEntryTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveEntryTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveEntryTester: java.lang.Object k3()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveEntryTester: java.lang.Object v0()>();
v4 = interfaceinvoke v1.<java.util.Map: boolean remove(java.lang.Object,java.lang.Object)>(v2, v3);
staticinvoke <com.google.common.collect.testing.testers.MapRemoveEntryTester: void assertFalse(boolean)>(v4);
virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveEntryTester: void expectUnchanged()>();
return;
}
public void testRemove_supportedAbsentKeyAbsentValue()
{
java.util.Map v1;
com.google.common.collect.testing.testers.MapRemoveEntryTester v0;
java.lang.Object v2, v3;
boolean v4;
v0 := @this: com.google.common.collect.testing.testers.MapRemoveEntryTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveEntryTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveEntryTester: java.lang.Object k3()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveEntryTester: java.lang.Object v3()>();
v4 = interfaceinvoke v1.<java.util.Map: boolean remove(java.lang.Object,java.lang.Object)>(v2, v3);
staticinvoke <com.google.common.collect.testing.testers.MapRemoveEntryTester: void assertFalse(boolean)>(v4);
virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveEntryTester: void expectUnchanged()>();
return;
}
public void testRemove_nullKeyQueriesUnsupported()
{
java.util.Map v1;
com.google.common.collect.testing.testers.MapRemoveEntryTester v0;
java.lang.Object v2;
java.lang.NullPointerException v4;
boolean v3;
v0 := @this: com.google.common.collect.testing.testers.MapRemoveEntryTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveEntryTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveEntryTester: java.lang.Object v3()>();
v3 = interfaceinvoke v1.<java.util.Map: boolean remove(java.lang.Object,java.lang.Object)>(null, v2);
staticinvoke <com.google.common.collect.testing.testers.MapRemoveEntryTester: void assertFalse(boolean)>(v3);
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveEntryTester: void expectUnchanged()>();
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testRemove_nullValueQueriesUnsupported()
{
java.util.Map v1;
com.google.common.collect.testing.testers.MapRemoveEntryTester v0;
java.lang.Object v2;
java.lang.NullPointerException v4;
boolean v3;
v0 := @this: com.google.common.collect.testing.testers.MapRemoveEntryTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveEntryTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveEntryTester: java.lang.Object k3()>();
v3 = interfaceinvoke v1.<java.util.Map: boolean remove(java.lang.Object,java.lang.Object)>(v2, null);
staticinvoke <com.google.common.collect.testing.testers.MapRemoveEntryTester: void assertFalse(boolean)>(v3);
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveEntryTester: void expectUnchanged()>();
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testRemove_unsupportedPresent()
{
java.lang.UnsupportedOperationException v4;
java.util.Map v1;
com.google.common.collect.testing.testers.MapRemoveEntryTester v0;
java.lang.Object v2, v3;
v0 := @this: com.google.common.collect.testing.testers.MapRemoveEntryTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveEntryTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveEntryTester: java.lang.Object k0()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveEntryTester: java.lang.Object v0()>();
interfaceinvoke v1.<java.util.Map: boolean remove(java.lang.Object,java.lang.Object)>(v2, v3);
staticinvoke <com.google.common.collect.testing.testers.MapRemoveEntryTester: void fail(java.lang.String)>("Expected UnsupportedOperationException");
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveEntryTester: void expectUnchanged()>();
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testRemove_unsupportedAbsent()
{
java.lang.UnsupportedOperationException v5;
java.util.Map v1;
com.google.common.collect.testing.testers.MapRemoveEntryTester v0;
java.lang.Object v2, v3;
boolean v4;
v0 := @this: com.google.common.collect.testing.testers.MapRemoveEntryTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveEntryTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveEntryTester: java.lang.Object k0()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveEntryTester: java.lang.Object v3()>();
v4 = interfaceinvoke v1.<java.util.Map: boolean remove(java.lang.Object,java.lang.Object)>(v2, v3);
staticinvoke <com.google.common.collect.testing.testers.MapRemoveEntryTester: void assertFalse(boolean)>(v4);
label2:
goto label4;
label3:
v5 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapRemoveEntryTester: void expectUnchanged()>();
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
}