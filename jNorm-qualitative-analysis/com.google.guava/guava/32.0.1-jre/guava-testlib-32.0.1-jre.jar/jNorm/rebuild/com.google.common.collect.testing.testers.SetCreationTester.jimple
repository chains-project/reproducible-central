public class com.google.common.collect.testing.testers.SetCreationTester extends com.google.common.collect.testing.testers.AbstractSetTester
{
public void <init>()
{
com.google.common.collect.testing.testers.SetCreationTester v0;
v0 := @this: com.google.common.collect.testing.testers.SetCreationTester;
specialinvoke v0.<com.google.common.collect.testing.testers.AbstractSetTester: void <init>()>();
return;
}
public void testCreateWithDuplicates_nullDuplicatesNotRejected()
{
com.google.common.collect.testing.testers.SetCreationTester v0;
java.util.List v4, v6;
java.lang.Object[] v1;
int v5;
java.lang.Object v2, v3;
v0 := @this: com.google.common.collect.testing.testers.SetCreationTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetCreationTester: java.lang.Object[] createArrayWithNullElement()>();
v1[0] = null;
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetCreationTester: java.lang.Object getSubjectGenerator()>();
v3 = interfaceinvoke v2.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.lang.Object create(java.lang.Object[])>(v1);
v0.<com.google.common.collect.testing.testers.SetCreationTester: java.util.Collection collection> = v3;
v4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetCreationTester: int getNumElements()>();
v6 = interfaceinvoke v4.<java.util.List: java.util.List subList(int,int)>(1, v5);
virtualinvoke v0.<com.google.common.collect.testing.testers.SetCreationTester: void expectContents(java.util.Collection)>(v6);
return;
}
public void testCreateWithDuplicates_nonNullDuplicatesNotRejected()
{
com.google.common.collect.testing.testers.SetCreationTester v0;
java.lang.Object[] v1;
java.util.List v5, v7;
int v6;
java.lang.Object v2, v3, v4;
v0 := @this: com.google.common.collect.testing.testers.SetCreationTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetCreationTester: java.lang.Object[] createSamplesArray()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetCreationTester: java.lang.Object e0()>();
v1[1] = v2;
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetCreationTester: java.lang.Object getSubjectGenerator()>();
v4 = interfaceinvoke v3.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.lang.Object create(java.lang.Object[])>(v1);
v0.<com.google.common.collect.testing.testers.SetCreationTester: java.util.Collection collection> = v4;
v5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetCreationTester: int getNumElements()>();
v7 = interfaceinvoke v5.<java.util.List: java.util.List subList(int,int)>(1, v6);
virtualinvoke v0.<com.google.common.collect.testing.testers.SetCreationTester: void expectContents(java.util.Collection)>(v7);
return;
}
public void testCreateWithDuplicates_nullDuplicatesRejected()
{
com.google.common.collect.testing.testers.SetCreationTester v0;
java.lang.Object[] v1;
java.lang.Object v2, v3;
java.lang.IllegalArgumentException v4;
v0 := @this: com.google.common.collect.testing.testers.SetCreationTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetCreationTester: java.lang.Object[] createArrayWithNullElement()>();
v1[0] = null;
label1:
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetCreationTester: java.lang.Object getSubjectGenerator()>();
v3 = interfaceinvoke v2.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.lang.Object create(java.lang.Object[])>(v1);
v0.<com.google.common.collect.testing.testers.SetCreationTester: java.util.Collection collection> = v3;
staticinvoke <com.google.common.collect.testing.testers.SetCreationTester: void fail(java.lang.String)>("Should reject duplicate null elements at creation");
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
return;
catch java.lang.IllegalArgumentException from label1 to label2 with label3;
}
public void testCreateWithDuplicates_nonNullDuplicatesRejected()
{
com.google.common.collect.testing.testers.SetCreationTester v0;
java.lang.Object[] v1;
java.lang.Object v2, v3, v4;
java.lang.IllegalArgumentException v5;
v0 := @this: com.google.common.collect.testing.testers.SetCreationTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetCreationTester: java.lang.Object[] createSamplesArray()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetCreationTester: java.lang.Object e0()>();
v1[1] = v2;
label1:
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetCreationTester: java.lang.Object getSubjectGenerator()>();
v4 = interfaceinvoke v3.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.lang.Object create(java.lang.Object[])>(v1);
v0.<com.google.common.collect.testing.testers.SetCreationTester: java.util.Collection collection> = v4;
staticinvoke <com.google.common.collect.testing.testers.SetCreationTester: void fail(java.lang.String)>("Should reject duplicate non-null elements at creation");
label2:
goto label4;
label3:
v5 := @caughtexception;
label4:
return;
catch java.lang.IllegalArgumentException from label1 to label2 with label3;
}
}