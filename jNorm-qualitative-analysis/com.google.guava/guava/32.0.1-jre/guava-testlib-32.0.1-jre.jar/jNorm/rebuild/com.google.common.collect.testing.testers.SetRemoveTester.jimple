public class com.google.common.collect.testing.testers.SetRemoveTester extends com.google.common.collect.testing.testers.AbstractSetTester
{
public void <init>()
{
com.google.common.collect.testing.testers.SetRemoveTester v0;
v0 := @this: com.google.common.collect.testing.testers.SetRemoveTester;
specialinvoke v0.<com.google.common.collect.testing.testers.AbstractSetTester: void <init>()>();
return;
}
public void testRemove_present()
{
com.google.common.collect.testing.testers.SetRemoveTester v0;
java.util.Set v1, v3;
java.lang.Object v2, v4;
boolean v5;
v0 := @this: com.google.common.collect.testing.testers.SetRemoveTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetRemoveTester: java.util.Set getSet()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetRemoveTester: java.lang.Object e0()>();
interfaceinvoke v1.<java.util.Set: boolean remove(java.lang.Object)>(v2);
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetRemoveTester: java.util.Set getSet()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.SetRemoveTester: java.lang.Object e0()>();
v5 = interfaceinvoke v3.<java.util.Set: boolean contains(java.lang.Object)>(v4);
staticinvoke <com.google.common.collect.testing.testers.SetRemoveTester: void assertFalse(java.lang.String,boolean)>("After remove(present) a set should not contain the removed element.", v5);
return;
}
}