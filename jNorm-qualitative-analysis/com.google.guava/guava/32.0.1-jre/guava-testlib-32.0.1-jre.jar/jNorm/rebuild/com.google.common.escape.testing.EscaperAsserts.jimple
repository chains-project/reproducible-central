public final class com.google.common.escape.testing.EscaperAsserts extends java.lang.Object
{
private void <init>()
{
com.google.common.escape.testing.EscaperAsserts v0;
v0 := @this: com.google.common.escape.testing.EscaperAsserts;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static void assertBasic(com.google.common.escape.Escaper) throws java.io.IOException
{
com.google.common.escape.Escaper v0;
java.lang.String v1, v2;
java.lang.NullPointerException v3;
v0 := @parameter0: com.google.common.escape.Escaper;
v1 = virtualinvoke v0.<com.google.common.escape.Escaper: java.lang.String escape(java.lang.String)>("");
staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>("", v1);
label1:
v2 = null;
virtualinvoke v0.<com.google.common.escape.Escaper: java.lang.String escape(java.lang.String)>(v2);
staticinvoke <junit.framework.Assert: void fail(java.lang.String)>("exception not thrown when escaping a null string");
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public static void assertEscaping(com.google.common.escape.CharEscaper, java.lang.String, char)
{
com.google.common.escape.CharEscaper v0;
char v2;
java.lang.String v1, v3;
v0 := @parameter0: com.google.common.escape.CharEscaper;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: char;
v3 = staticinvoke <com.google.common.escape.Escapers: java.lang.String computeReplacement(com.google.common.escape.CharEscaper,char)>(v0, v2);
staticinvoke <junit.framework.Assert: void assertNotNull(java.lang.Object)>(v3);
staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>(v1, v3);
return;
}
public static void assertEscaping(com.google.common.escape.UnicodeEscaper, java.lang.String, int)
{
com.google.common.escape.UnicodeEscaper v0;
int v2;
java.lang.String v1, v3;
v0 := @parameter0: com.google.common.escape.UnicodeEscaper;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: int;
v3 = staticinvoke <com.google.common.escape.Escapers: java.lang.String computeReplacement(com.google.common.escape.UnicodeEscaper,int)>(v0, v2);
staticinvoke <junit.framework.Assert: void assertNotNull(java.lang.Object)>(v3);
staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>(v1, v3);
return;
}
public static void assertUnescaped(com.google.common.escape.CharEscaper, char)
{
char v1;
java.lang.String v2;
com.google.common.escape.CharEscaper v0;
v0 := @parameter0: com.google.common.escape.CharEscaper;
v1 := @parameter1: char;
v2 = staticinvoke <com.google.common.escape.Escapers: java.lang.String computeReplacement(com.google.common.escape.CharEscaper,char)>(v0, v1);
staticinvoke <junit.framework.Assert: void assertNull(java.lang.Object)>(v2);
return;
}
public static void assertUnescaped(com.google.common.escape.UnicodeEscaper, int)
{
int v1;
java.lang.String v2;
com.google.common.escape.UnicodeEscaper v0;
v0 := @parameter0: com.google.common.escape.UnicodeEscaper;
v1 := @parameter1: int;
v2 = staticinvoke <com.google.common.escape.Escapers: java.lang.String computeReplacement(com.google.common.escape.UnicodeEscaper,int)>(v0, v1);
staticinvoke <junit.framework.Assert: void assertNull(java.lang.Object)>(v2);
return;
}
public static void assertUnicodeEscaping(com.google.common.escape.UnicodeEscaper, java.lang.String, char, char)
{
com.google.common.escape.UnicodeEscaper v0;
int v4;
char v2, v3;
java.lang.String v1, v5;
v0 := @parameter0: com.google.common.escape.UnicodeEscaper;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: char;
v3 := @parameter3: char;
v4 = staticinvoke <java.lang.Character: int toCodePoint(char,char)>(v2, v3);
v5 = staticinvoke <com.google.common.escape.Escapers: java.lang.String computeReplacement(com.google.common.escape.UnicodeEscaper,int)>(v0, v4);
staticinvoke <junit.framework.Assert: void assertNotNull(java.lang.Object)>(v5);
staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>(v1, v5);
return;
}
}