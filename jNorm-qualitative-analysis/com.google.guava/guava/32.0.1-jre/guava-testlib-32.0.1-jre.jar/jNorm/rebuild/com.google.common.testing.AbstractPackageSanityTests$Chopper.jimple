abstract class com.google.common.testing.AbstractPackageSanityTests$Chopper extends java.lang.Object
{
void <init>()
{
com.google.common.testing.AbstractPackageSanityTests$Chopper v0;
v0 := @this: com.google.common.testing.AbstractPackageSanityTests$Chopper;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
final com.google.common.testing.AbstractPackageSanityTests$Chopper or(com.google.common.testing.AbstractPackageSanityTests$Chopper)
{
com.google.common.testing.AbstractPackageSanityTests$Chopper$1 v2;
com.google.common.testing.AbstractPackageSanityTests$Chopper v0, v1;
v0 := @this: com.google.common.testing.AbstractPackageSanityTests$Chopper;
v1 := @parameter0: com.google.common.testing.AbstractPackageSanityTests$Chopper;
v2 = new com.google.common.testing.AbstractPackageSanityTests$Chopper$1;
specialinvoke v2.<com.google.common.testing.AbstractPackageSanityTests$Chopper$1: void <init>(com.google.common.testing.AbstractPackageSanityTests$Chopper,com.google.common.testing.AbstractPackageSanityTests$Chopper,com.google.common.testing.AbstractPackageSanityTests$Chopper)>(v0, v0, v1);
return v2;
}
abstract com.google.common.base.Optional chop(java.lang.String);
static com.google.common.testing.AbstractPackageSanityTests$Chopper suffix(java.lang.String)
{
com.google.common.testing.AbstractPackageSanityTests$Chopper$2 v1;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = new com.google.common.testing.AbstractPackageSanityTests$Chopper$2;
specialinvoke v1.<com.google.common.testing.AbstractPackageSanityTests$Chopper$2: void <init>(java.lang.String)>(v0);
return v1;
}
}