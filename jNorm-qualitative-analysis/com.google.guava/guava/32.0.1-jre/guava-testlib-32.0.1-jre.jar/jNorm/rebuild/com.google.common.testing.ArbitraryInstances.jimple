public final class com.google.common.testing.ArbitraryInstances extends java.lang.Object
{
private static final com.google.common.collect.Ordering BY_FIELD_NAME;
private static final com.google.common.collect.ClassToInstanceMap DEFAULTS;
private static final java.util.concurrent.ConcurrentMap implementations;
private static final java.util.logging.Logger logger;
private static java.util.regex.MatchResult newMatchResult()
{
java.util.regex.MatchResult v2;
java.util.regex.Matcher v1;
java.util.regex.Pattern v0;
v0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(".");
v1 = virtualinvoke v0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>("X");
virtualinvoke v1.<java.util.regex.Matcher: boolean find()>();
v2 = virtualinvoke v1.<java.util.regex.Matcher: java.util.regex.MatchResult toMatchResult()>();
return v2;
}
private static void setImplementation(java.lang.Class, java.lang.Class)
{
java.util.concurrent.ConcurrentMap v6;
com.google.common.collect.ClassToInstanceMap v3;
java.lang.Class v0, v1;
java.lang.Object v7;
boolean v2, v4, v5, v8;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Class;
if v0 == v1 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>(v2, "Don\'t register %s to itself!", v0);
v3 = <com.google.common.testing.ArbitraryInstances: com.google.common.collect.ClassToInstanceMap DEFAULTS>;
v4 = interfaceinvoke v3.<com.google.common.collect.ClassToInstanceMap: boolean containsKey(java.lang.Object)>(v0);
if v4 != 0 goto label3;
v5 = 1;
goto label4;
label3:
v5 = 0;
label4:
staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>(v5, "A default value was already registered for %s", v0);
v6 = <com.google.common.testing.ArbitraryInstances: java.util.concurrent.ConcurrentMap implementations>;
v7 = interfaceinvoke v6.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v0, v1);
if v7 != null goto label5;
v8 = 1;
goto label6;
label5:
v8 = 0;
label6:
staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>(v8, "Implementation for %s was already registered", v0);
return;
}
private static java.lang.Class getImplementation(java.lang.Class)
{
java.lang.Class v0;
java.lang.Object v2;
java.util.concurrent.ConcurrentMap v1;
v0 := @parameter0: java.lang.Class;
v1 = <com.google.common.testing.ArbitraryInstances: java.util.concurrent.ConcurrentMap implementations>;
v2 = interfaceinvoke v1.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v0);
return v2;
}
public static java.lang.Object get(java.lang.Class)
{
java.lang.NoSuchMethodException v22;
java.lang.InstantiationException v26;
boolean v11, v16, v18, v7;
java.lang.IllegalAccessException v28;
java.util.logging.Logger v31;
java.lang.reflect.InvocationTargetException v30;
java.util.stream.Stream v5;
java.lang.Throwable v33;
java.lang.Object[] v24, v8;
java.lang.AssertionError v27, v29;
java.lang.reflect.Constructor v21;
java.util.logging.Level v32;
com.google.common.collect.ClassToInstanceMap v1;
int v15, v17, v9;
java.lang.Class[] v20;
java.lang.Class v0, v13, v3;
java.lang.Object v10, v12, v14, v19, v2, v23, v25, v34, v4, v6;
v0 := @parameter0: java.lang.Class;
v1 = <com.google.common.testing.ArbitraryInstances: com.google.common.collect.ClassToInstanceMap DEFAULTS>;
v2 = interfaceinvoke v1.<com.google.common.collect.ClassToInstanceMap: java.lang.Object getInstance(java.lang.Class)>(v0);
if v2 == null goto label01;
return v2;
label01:
v3 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Class getImplementation(java.lang.Class)>(v0);
if v3 == null goto label02;
v4 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object get(java.lang.Class)>(v3);
return v4;
label02:
if v0 != class "Ljava/util/stream/Stream;" goto label03;
v5 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream empty()>();
v6 = virtualinvoke v0.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(v5);
return v6;
label03:
v7 = virtualinvoke v0.<java.lang.Class: boolean isEnum()>();
if v7 == 0 goto label07;
v8 = virtualinvoke v0.<java.lang.Class: java.lang.Object[] getEnumConstants()>();
if v8 == null goto label04;
v9 = lengthof v8;
if v9 != 0 goto label05;
label04:
v10 = null;
goto label06;
label05:
v10 = v8[0];
label06:
return v10;
label07:
v11 = virtualinvoke v0.<java.lang.Class: boolean isArray()>();
if v11 == 0 goto label08;
v12 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object createEmptyArray(java.lang.Class)>(v0);
return v12;
label08:
v13 = staticinvoke <com.google.common.primitives.Primitives: java.lang.Class unwrap(java.lang.Class)>(v0);
v14 = staticinvoke <com.google.common.base.Defaults: java.lang.Object defaultValue(java.lang.Class)>(v13);
if v14 == null goto label09;
return v14;
label09:
v15 = virtualinvoke v0.<java.lang.Class: int getModifiers()>();
v16 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>(v15);
if v16 != 0 goto label10;
v17 = virtualinvoke v0.<java.lang.Class: int getModifiers()>();
v18 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>(v17);
if v18 != 0 goto label11;
label10:
v19 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object arbitraryConstantInstanceOrNull(java.lang.Class)>(v0);
return v19;
label11:
v20 = newarray (java.lang.Class)[0];
v21 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(v20);
label12:
goto label14;
label13:
v22 := @caughtexception;
v23 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object arbitraryConstantInstanceOrNull(java.lang.Class)>(v0);
return v23;
label14:
virtualinvoke v21.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);
label15:
v24 = newarray (java.lang.Object)[0];
v25 = virtualinvoke v21.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(v24);
label16:
return v25;
label17:
v26 := @caughtexception;
v27 = new java.lang.AssertionError;
specialinvoke v27.<java.lang.AssertionError: void <init>(java.lang.Object)>(v26);
throw v27;
label18:
v28 := @caughtexception;
v29 = new java.lang.AssertionError;
specialinvoke v29.<java.lang.AssertionError: void <init>(java.lang.Object)>(v28);
throw v29;
label19:
v30 := @caughtexception;
v31 = <com.google.common.testing.ArbitraryInstances: java.util.logging.Logger logger>;
v32 = <java.util.logging.Level: java.util.logging.Level WARNING>;
v33 = virtualinvoke v30.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();
virtualinvoke v31.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>(v32, "Exception while invoking default constructor.", v33);
v34 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.lang.Object arbitraryConstantInstanceOrNull(java.lang.Class)>(v0);
return v34;
catch java.lang.NoSuchMethodException from label11 to label12 with label13;
catch java.lang.InstantiationException from label15 to label16 with label17;
catch java.lang.IllegalAccessException from label15 to label16 with label18;
catch java.lang.reflect.InvocationTargetException from label15 to label16 with label19;
}
private static java.lang.Object arbitraryConstantInstanceOrNull(java.lang.Class)
{
java.lang.AssertionError v19;
int v10, v3, v4, v6, v8;
boolean v11, v15, v7, v9;
java.lang.IllegalAccessException v18;
java.lang.reflect.Field v5;
java.lang.reflect.Field[] v1;
com.google.common.collect.Ordering v2;
java.lang.reflect.Type v12;
java.lang.Class v0, v13, v14;
java.lang.Object v16, v17;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();
v2 = <com.google.common.testing.ArbitraryInstances: com.google.common.collect.Ordering BY_FIELD_NAME>;
staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(v1, v2);
v3 = lengthof v1;
v4 = 0;
label1:
if v4 >= v3 goto label6;
v5 = v1[v4];
v6 = virtualinvoke v5.<java.lang.reflect.Field: int getModifiers()>();
v7 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>(v6);
if v7 == 0 goto label5;
v8 = virtualinvoke v5.<java.lang.reflect.Field: int getModifiers()>();
v9 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(v8);
if v9 == 0 goto label5;
v10 = virtualinvoke v5.<java.lang.reflect.Field: int getModifiers()>();
v11 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>(v10);
if v11 == 0 goto label5;
v12 = virtualinvoke v5.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
v13 = virtualinvoke v5.<java.lang.reflect.Field: java.lang.Class getType()>();
if v12 != v13 goto label5;
v14 = virtualinvoke v5.<java.lang.reflect.Field: java.lang.Class getType()>();
v15 = virtualinvoke v0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v14);
if v15 == 0 goto label5;
virtualinvoke v5.<java.lang.reflect.Field: void setAccessible(boolean)>(1);
label2:
v16 = virtualinvoke v5.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);
v17 = virtualinvoke v0.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(v16);
if v17 == null goto label5;
label3:
return v17;
label4:
v18 := @caughtexception;
v19 = new java.lang.AssertionError;
specialinvoke v19.<java.lang.AssertionError: void <init>(java.lang.Object)>(v18);
throw v19;
label5:
v4 = v4 + 1;
goto label1;
label6:
return null;
catch java.lang.IllegalAccessException from label2 to label3 with label4;
}
private static java.lang.Object createEmptyArray(java.lang.Class)
{
java.lang.Class v0, v1;
java.lang.Object v2, v3;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: java.lang.Class getComponentType()>();
v2 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(v1, 0);
v3 = virtualinvoke v0.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(v2);
return v3;
}
private void <init>()
{
com.google.common.testing.ArbitraryInstances v0;
v0 := @this: com.google.common.testing.ArbitraryInstances;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void <clinit>()
{
byte[] v55, v58;
com.google.common.collect.PeekingIterator v99;
java.lang.Integer v3;
com.google.common.primitives.UnsignedInteger v5;
com.google.common.collect.ImmutableClassToInstanceMap$Builder v1, v10, v100, v103, v105, v107, v109, v111, v113, v115, v117, v119, v12, v121, v124, v126, v128, v13, v130, v132, v135, v137, v139, v14, v141, v143, v145, v147, v150, v152, v154, v156, v158, v16, v160, v162, v164, v166, v169, v170, v172, v173, v175, v177, v179, v18, v181, v183, v187, v191, v192, v193, v194, v2, v20, v22, v25, v27, v29, v31, v33, v35, v37, v39, v4, v41, v43, v45, v47, v49, v51, v53, v56, v59, v6, v61, v63, v65, v67, v69, v71, v73, v75, v77, v79, v8, v81, v83, v85, v87, v89, v93, v96;
java.math.BigInteger v9;
com.google.common.collect.RowSortedTable v168;
com.google.common.base.Predicate v46;
com.google.common.base.Joiner v40;
com.google.common.primitives.UnsignedLong v7;
java.util.Currency v24;
java.util.OptionalLong v32;
com.google.common.collect.UnmodifiableListIterator v102;
com.google.common.collect.ImmutableMultimap v136, v138;
com.google.common.collect.ImmutableSortedSet v118, v120;
com.google.common.base.CharMatcher v38;
com.google.common.collect.TreeBasedTable v167;
java.io.StringReader v60, v62, v64;
java.util.TreeMap v133;
java.nio.FloatBuffer v78;
java.io.ByteArrayInputStream v54, v57;
java.nio.IntBuffer v74;
java.util.Locale v23, v26;
com.google.common.collect.ImmutableSetMultimap v144, v146;
com.google.common.collect.ImmutableSet v104, v114, v116, v94, v97;
com.google.common.collect.SortedSetMultimap v149;
java.util.UUID v36;
java.util.NavigableMap v134;
java.util.OptionalDouble v34;
java.util.OptionalInt v30;
java.util.concurrent.ConcurrentMap v196;
com.google.common.collect.ImmutableList v101, v106, v108, v110, v112;
java.nio.charset.Charset v21, v91;
com.google.common.io.CharSource v86;
java.nio.DoubleBuffer v80;
com.google.common.collect.ImmutableTable v163, v165;
java.lang.Class v197;
java.math.BigDecimal v11;
com.google.common.base.Optional v44;
com.google.common.collect.Range v182;
com.google.common.base.Ticker v50;
com.google.common.collect.SortedMapDifference v190;
com.google.common.collect.ImmutableListMultimap v140, v142;
com.google.common.testing.ArbitraryInstances$AlwaysEqual v178, v180;
java.util.TreeSet v122;
com.google.common.collect.ImmutableMultiset v151, v153;
java.lang.String v198;
com.google.common.io.ByteSource v84;
com.google.common.collect.ImmutableSortedMap v129, v131, v188, v189;
java.io.File v82;
com.google.common.collect.MapDifference v186;
java.nio.LongBuffer v76;
com.google.common.collect.UnmodifiableIterator v95, v98;
com.google.common.collect.ImmutableSortedMultiset v155, v157;
java.util.regex.MatchResult v17;
java.nio.ByteBuffer v66, v70;
com.google.common.testing.ArbitraryInstances$NullByteSink v88, v90;
com.google.common.collect.TreeMultimap v148;
com.google.common.base.Splitter v42;
com.google.common.collect.ImmutableMap v125, v127, v184, v185;
java.nio.CharBuffer v68;
java.util.NavigableSet v123;
java.util.logging.Logger v199;
java.util.Optional v28;
java.util.regex.Pattern v15;
com.google.common.collect.ImmutableClassToInstanceMap v171, v174, v195;
com.google.common.base.Stopwatch v52;
java.nio.ShortBuffer v72;
com.google.common.io.CharSink v92;
com.google.common.collect.ImmutableBiMap v159, v161;
com.google.common.base.Equivalence v48;
com.google.common.testing.ArbitraryInstances$ByToString v176;
com.google.common.testing.ArbitraryInstances$1 v0;
java.util.concurrent.TimeUnit v19;
v0 = new com.google.common.testing.ArbitraryInstances$1;
specialinvoke v0.<com.google.common.testing.ArbitraryInstances$1: void <init>()>();
<com.google.common.testing.ArbitraryInstances: com.google.common.collect.Ordering BY_FIELD_NAME> = v0;
v1 = staticinvoke <com.google.common.collect.ImmutableClassToInstanceMap: com.google.common.collect.ImmutableClassToInstanceMap$Builder builder()>();
v2 = virtualinvoke v1.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/lang/Object;", "");
v3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
v4 = virtualinvoke v2.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/lang/Number;", v3);
v5 = <com.google.common.primitives.UnsignedInteger: com.google.common.primitives.UnsignedInteger ZERO>;
v6 = virtualinvoke v4.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/primitives/UnsignedInteger;", v5);
v7 = <com.google.common.primitives.UnsignedLong: com.google.common.primitives.UnsignedLong ZERO>;
v8 = virtualinvoke v6.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/primitives/UnsignedLong;", v7);
v9 = <java.math.BigInteger: java.math.BigInteger ZERO>;
v10 = virtualinvoke v8.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/math/BigInteger;", v9);
v11 = <java.math.BigDecimal: java.math.BigDecimal ZERO>;
v12 = virtualinvoke v10.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/math/BigDecimal;", v11);
v13 = virtualinvoke v12.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/lang/CharSequence;", "");
v14 = virtualinvoke v13.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/lang/String;", "");
v15 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("");
v16 = virtualinvoke v14.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/util/regex/Pattern;", v15);
v17 = staticinvoke <com.google.common.testing.ArbitraryInstances: java.util.regex.MatchResult newMatchResult()>();
v18 = virtualinvoke v16.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/util/regex/MatchResult;", v17);
v19 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
v20 = virtualinvoke v18.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/util/concurrent/TimeUnit;", v19);
v21 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_8>;
v22 = virtualinvoke v20.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/nio/charset/Charset;", v21);
v23 = <java.util.Locale: java.util.Locale US>;
v24 = staticinvoke <java.util.Currency: java.util.Currency getInstance(java.util.Locale)>(v23);
v25 = virtualinvoke v22.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/util/Currency;", v24);
v26 = <java.util.Locale: java.util.Locale US>;
v27 = virtualinvoke v25.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/util/Locale;", v26);
v28 = staticinvoke <java.util.Optional: java.util.Optional empty()>();
v29 = virtualinvoke v27.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/util/Optional;", v28);
v30 = staticinvoke <java.util.OptionalInt: java.util.OptionalInt empty()>();
v31 = virtualinvoke v29.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/util/OptionalInt;", v30);
v32 = staticinvoke <java.util.OptionalLong: java.util.OptionalLong empty()>();
v33 = virtualinvoke v31.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/util/OptionalLong;", v32);
v34 = staticinvoke <java.util.OptionalDouble: java.util.OptionalDouble empty()>();
v35 = virtualinvoke v33.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/util/OptionalDouble;", v34);
v36 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();
v37 = virtualinvoke v35.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/util/UUID;", v36);
v38 = staticinvoke <com.google.common.base.CharMatcher: com.google.common.base.CharMatcher none()>();
v39 = virtualinvoke v37.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/base/CharMatcher;", v38);
v40 = staticinvoke <com.google.common.base.Joiner: com.google.common.base.Joiner on(char)>(44);
v41 = virtualinvoke v39.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/base/Joiner;", v40);
v42 = staticinvoke <com.google.common.base.Splitter: com.google.common.base.Splitter on(char)>(44);
v43 = virtualinvoke v41.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/base/Splitter;", v42);
v44 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional absent()>();
v45 = virtualinvoke v43.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/base/Optional;", v44);
v46 = staticinvoke <com.google.common.base.Predicates: com.google.common.base.Predicate alwaysTrue()>();
v47 = virtualinvoke v45.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/base/Predicate;", v46);
v48 = staticinvoke <com.google.common.base.Equivalence: com.google.common.base.Equivalence equals()>();
v49 = virtualinvoke v47.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/base/Equivalence;", v48);
v50 = staticinvoke <com.google.common.base.Ticker: com.google.common.base.Ticker systemTicker()>();
v51 = virtualinvoke v49.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/base/Ticker;", v50);
v52 = staticinvoke <com.google.common.base.Stopwatch: com.google.common.base.Stopwatch createUnstarted()>();
v53 = virtualinvoke v51.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/base/Stopwatch;", v52);
v54 = new java.io.ByteArrayInputStream;
v55 = newarray (byte)[0];
specialinvoke v54.<java.io.ByteArrayInputStream: void <init>(byte[])>(v55);
v56 = virtualinvoke v53.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/io/InputStream;", v54);
v57 = new java.io.ByteArrayInputStream;
v58 = newarray (byte)[0];
specialinvoke v57.<java.io.ByteArrayInputStream: void <init>(byte[])>(v58);
v59 = virtualinvoke v56.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/io/ByteArrayInputStream;", v57);
v60 = new java.io.StringReader;
specialinvoke v60.<java.io.StringReader: void <init>(java.lang.String)>("");
v61 = virtualinvoke v59.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/lang/Readable;", v60);
v62 = new java.io.StringReader;
specialinvoke v62.<java.io.StringReader: void <init>(java.lang.String)>("");
v63 = virtualinvoke v61.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/io/Reader;", v62);
v64 = new java.io.StringReader;
specialinvoke v64.<java.io.StringReader: void <init>(java.lang.String)>("");
v65 = virtualinvoke v63.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/io/StringReader;", v64);
v66 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(0);
v67 = virtualinvoke v65.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/nio/Buffer;", v66);
v68 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>(0);
v69 = virtualinvoke v67.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/nio/CharBuffer;", v68);
v70 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(0);
v71 = virtualinvoke v69.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/nio/ByteBuffer;", v70);
v72 = staticinvoke <java.nio.ShortBuffer: java.nio.ShortBuffer allocate(int)>(0);
v73 = virtualinvoke v71.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/nio/ShortBuffer;", v72);
v74 = staticinvoke <java.nio.IntBuffer: java.nio.IntBuffer allocate(int)>(0);
v75 = virtualinvoke v73.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/nio/IntBuffer;", v74);
v76 = staticinvoke <java.nio.LongBuffer: java.nio.LongBuffer allocate(int)>(0);
v77 = virtualinvoke v75.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/nio/LongBuffer;", v76);
v78 = staticinvoke <java.nio.FloatBuffer: java.nio.FloatBuffer allocate(int)>(0);
v79 = virtualinvoke v77.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/nio/FloatBuffer;", v78);
v80 = staticinvoke <java.nio.DoubleBuffer: java.nio.DoubleBuffer allocate(int)>(0);
v81 = virtualinvoke v79.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/nio/DoubleBuffer;", v80);
v82 = new java.io.File;
specialinvoke v82.<java.io.File: void <init>(java.lang.String)>("");
v83 = virtualinvoke v81.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/io/File;", v82);
v84 = staticinvoke <com.google.common.io.ByteSource: com.google.common.io.ByteSource empty()>();
v85 = virtualinvoke v83.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/io/ByteSource;", v84);
v86 = staticinvoke <com.google.common.io.CharSource: com.google.common.io.CharSource empty()>();
v87 = virtualinvoke v85.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/io/CharSource;", v86);
v88 = <com.google.common.testing.ArbitraryInstances$NullByteSink: com.google.common.testing.ArbitraryInstances$NullByteSink INSTANCE>;
v89 = virtualinvoke v87.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/io/ByteSink;", v88);
v90 = <com.google.common.testing.ArbitraryInstances$NullByteSink: com.google.common.testing.ArbitraryInstances$NullByteSink INSTANCE>;
v91 = <com.google.common.base.Charsets: java.nio.charset.Charset UTF_8>;
v92 = virtualinvoke v90.<com.google.common.testing.ArbitraryInstances$NullByteSink: com.google.common.io.CharSink asCharSink(java.nio.charset.Charset)>(v91);
v93 = virtualinvoke v89.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/io/CharSink;", v92);
v94 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of()>();
v95 = virtualinvoke v94.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>();
v96 = virtualinvoke v93.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/util/Iterator;", v95);
v97 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of()>();
v98 = virtualinvoke v97.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>();
v99 = staticinvoke <com.google.common.collect.Iterators: com.google.common.collect.PeekingIterator peekingIterator(java.util.Iterator)>(v98);
v100 = virtualinvoke v96.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/collect/PeekingIterator;", v99);
v101 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>();
v102 = virtualinvoke v101.<com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableListIterator listIterator()>();
v103 = virtualinvoke v100.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/util/ListIterator;", v102);
v104 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of()>();
v105 = virtualinvoke v103.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/lang/Iterable;", v104);
v106 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>();
v107 = virtualinvoke v105.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/util/Collection;", v106);
v108 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>();
v109 = virtualinvoke v107.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/collect/ImmutableCollection;", v108);
v110 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>();
v111 = virtualinvoke v109.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/util/List;", v110);
v112 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>();
v113 = virtualinvoke v111.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/collect/ImmutableList;", v112);
v114 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of()>();
v115 = virtualinvoke v113.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/util/Set;", v114);
v116 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of()>();
v117 = virtualinvoke v115.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/collect/ImmutableSet;", v116);
v118 = staticinvoke <com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet of()>();
v119 = virtualinvoke v117.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/util/SortedSet;", v118);
v120 = staticinvoke <com.google.common.collect.ImmutableSortedSet: com.google.common.collect.ImmutableSortedSet of()>();
v121 = virtualinvoke v119.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/collect/ImmutableSortedSet;", v120);
v122 = staticinvoke <com.google.common.collect.Sets: java.util.TreeSet newTreeSet()>();
v123 = staticinvoke <com.google.common.collect.Sets: java.util.NavigableSet unmodifiableNavigableSet(java.util.NavigableSet)>(v122);
v124 = virtualinvoke v121.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/util/NavigableSet;", v123);
v125 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of()>();
v126 = virtualinvoke v124.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/util/Map;", v125);
v127 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of()>();
v128 = virtualinvoke v126.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/collect/ImmutableMap;", v127);
v129 = staticinvoke <com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap of()>();
v130 = virtualinvoke v128.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/util/SortedMap;", v129);
v131 = staticinvoke <com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap of()>();
v132 = virtualinvoke v130.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/collect/ImmutableSortedMap;", v131);
v133 = staticinvoke <com.google.common.collect.Maps: java.util.TreeMap newTreeMap()>();
v134 = staticinvoke <com.google.common.collect.Maps: java.util.NavigableMap unmodifiableNavigableMap(java.util.NavigableMap)>(v133);
v135 = virtualinvoke v132.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/util/NavigableMap;", v134);
v136 = staticinvoke <com.google.common.collect.ImmutableMultimap: com.google.common.collect.ImmutableMultimap of()>();
v137 = virtualinvoke v135.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/collect/Multimap;", v136);
v138 = staticinvoke <com.google.common.collect.ImmutableMultimap: com.google.common.collect.ImmutableMultimap of()>();
v139 = virtualinvoke v137.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/collect/ImmutableMultimap;", v138);
v140 = staticinvoke <com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableListMultimap of()>();
v141 = virtualinvoke v139.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/collect/ListMultimap;", v140);
v142 = staticinvoke <com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableListMultimap of()>();
v143 = virtualinvoke v141.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/collect/ImmutableListMultimap;", v142);
v144 = staticinvoke <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap of()>();
v145 = virtualinvoke v143.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/collect/SetMultimap;", v144);
v146 = staticinvoke <com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableSetMultimap of()>();
v147 = virtualinvoke v145.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/collect/ImmutableSetMultimap;", v146);
v148 = staticinvoke <com.google.common.collect.TreeMultimap: com.google.common.collect.TreeMultimap create()>();
v149 = staticinvoke <com.google.common.collect.Multimaps: com.google.common.collect.SortedSetMultimap unmodifiableSortedSetMultimap(com.google.common.collect.SortedSetMultimap)>(v148);
v150 = virtualinvoke v147.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/collect/SortedSetMultimap;", v149);
v151 = staticinvoke <com.google.common.collect.ImmutableMultiset: com.google.common.collect.ImmutableMultiset of()>();
v152 = virtualinvoke v150.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/collect/Multiset;", v151);
v153 = staticinvoke <com.google.common.collect.ImmutableMultiset: com.google.common.collect.ImmutableMultiset of()>();
v154 = virtualinvoke v152.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/collect/ImmutableMultiset;", v153);
v155 = staticinvoke <com.google.common.collect.ImmutableSortedMultiset: com.google.common.collect.ImmutableSortedMultiset of()>();
v156 = virtualinvoke v154.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/collect/SortedMultiset;", v155);
v157 = staticinvoke <com.google.common.collect.ImmutableSortedMultiset: com.google.common.collect.ImmutableSortedMultiset of()>();
v158 = virtualinvoke v156.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/collect/ImmutableSortedMultiset;", v157);
v159 = staticinvoke <com.google.common.collect.ImmutableBiMap: com.google.common.collect.ImmutableBiMap of()>();
v160 = virtualinvoke v158.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/collect/BiMap;", v159);
v161 = staticinvoke <com.google.common.collect.ImmutableBiMap: com.google.common.collect.ImmutableBiMap of()>();
v162 = virtualinvoke v160.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/collect/ImmutableBiMap;", v161);
v163 = staticinvoke <com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableTable of()>();
v164 = virtualinvoke v162.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/collect/Table;", v163);
v165 = staticinvoke <com.google.common.collect.ImmutableTable: com.google.common.collect.ImmutableTable of()>();
v166 = virtualinvoke v164.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/collect/ImmutableTable;", v165);
v167 = staticinvoke <com.google.common.collect.TreeBasedTable: com.google.common.collect.TreeBasedTable create()>();
v168 = staticinvoke <com.google.common.collect.Tables: com.google.common.collect.RowSortedTable unmodifiableRowSortedTable(com.google.common.collect.RowSortedTable)>(v167);
v169 = virtualinvoke v166.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/collect/RowSortedTable;", v168);
v170 = staticinvoke <com.google.common.collect.ImmutableClassToInstanceMap: com.google.common.collect.ImmutableClassToInstanceMap$Builder builder()>();
v171 = virtualinvoke v170.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap build()>();
v172 = virtualinvoke v169.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/collect/ClassToInstanceMap;", v171);
v173 = staticinvoke <com.google.common.collect.ImmutableClassToInstanceMap: com.google.common.collect.ImmutableClassToInstanceMap$Builder builder()>();
v174 = virtualinvoke v173.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap build()>();
v175 = virtualinvoke v172.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/collect/ImmutableClassToInstanceMap;", v174);
v176 = <com.google.common.testing.ArbitraryInstances$ByToString: com.google.common.testing.ArbitraryInstances$ByToString INSTANCE>;
v177 = virtualinvoke v175.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/lang/Comparable;", v176);
v178 = <com.google.common.testing.ArbitraryInstances$AlwaysEqual: com.google.common.testing.ArbitraryInstances$AlwaysEqual INSTANCE>;
v179 = virtualinvoke v177.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/util/Comparator;", v178);
v180 = <com.google.common.testing.ArbitraryInstances$AlwaysEqual: com.google.common.testing.ArbitraryInstances$AlwaysEqual INSTANCE>;
v181 = virtualinvoke v179.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/collect/Ordering;", v180);
v182 = staticinvoke <com.google.common.collect.Range: com.google.common.collect.Range all()>();
v183 = virtualinvoke v181.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/collect/Range;", v182);
v184 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of()>();
v185 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of()>();
v186 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.MapDifference difference(java.util.Map,java.util.Map)>(v184, v185);
v187 = virtualinvoke v183.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/collect/MapDifference;", v186);
v188 = staticinvoke <com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap of()>();
v189 = staticinvoke <com.google.common.collect.ImmutableSortedMap: com.google.common.collect.ImmutableSortedMap of()>();
v190 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.SortedMapDifference difference(java.util.SortedMap,java.util.Map)>(v188, v189);
v191 = virtualinvoke v187.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Lcom/google/common/collect/SortedMapDifference;", v190);
v192 = virtualinvoke v191.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/lang/reflect/AnnotatedElement;", class "Ljava/lang/Object;");
v193 = virtualinvoke v192.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/lang/reflect/GenericDeclaration;", class "Ljava/lang/Object;");
v194 = virtualinvoke v193.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder put(java.lang.Class,java.lang.Object)>(class "Ljava/lang/reflect/Type;", class "Ljava/lang/Object;");
v195 = virtualinvoke v194.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap build()>();
<com.google.common.testing.ArbitraryInstances: com.google.common.collect.ClassToInstanceMap DEFAULTS> = v195;
v196 = staticinvoke <com.google.common.collect.Maps: java.util.concurrent.ConcurrentMap newConcurrentMap()>();
<com.google.common.testing.ArbitraryInstances: java.util.concurrent.ConcurrentMap implementations> = v196;
staticinvoke <com.google.common.testing.ArbitraryInstances: void setImplementation(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Appendable;", class "Ljava/lang/StringBuilder;");
staticinvoke <com.google.common.testing.ArbitraryInstances: void setImplementation(java.lang.Class,java.lang.Class)>(class "Ljava/util/concurrent/BlockingQueue;", class "Ljava/util/concurrent/LinkedBlockingDeque;");
staticinvoke <com.google.common.testing.ArbitraryInstances: void setImplementation(java.lang.Class,java.lang.Class)>(class "Ljava/util/concurrent/BlockingDeque;", class "Ljava/util/concurrent/LinkedBlockingDeque;");
staticinvoke <com.google.common.testing.ArbitraryInstances: void setImplementation(java.lang.Class,java.lang.Class)>(class "Ljava/util/concurrent/ConcurrentMap;", class "Ljava/util/concurrent/ConcurrentHashMap;");
staticinvoke <com.google.common.testing.ArbitraryInstances: void setImplementation(java.lang.Class,java.lang.Class)>(class "Ljava/util/concurrent/ConcurrentNavigableMap;", class "Ljava/util/concurrent/ConcurrentSkipListMap;");
staticinvoke <com.google.common.testing.ArbitraryInstances: void setImplementation(java.lang.Class,java.lang.Class)>(class "Ljava/util/concurrent/CountDownLatch;", class "Lcom/google/common/testing/ArbitraryInstances$Dummies$DummyCountDownLatch;");
staticinvoke <com.google.common.testing.ArbitraryInstances: void setImplementation(java.lang.Class,java.lang.Class)>(class "Ljava/util/Deque;", class "Ljava/util/ArrayDeque;");
staticinvoke <com.google.common.testing.ArbitraryInstances: void setImplementation(java.lang.Class,java.lang.Class)>(class "Ljava/io/OutputStream;", class "Ljava/io/ByteArrayOutputStream;");
staticinvoke <com.google.common.testing.ArbitraryInstances: void setImplementation(java.lang.Class,java.lang.Class)>(class "Ljava/io/PrintStream;", class "Lcom/google/common/testing/ArbitraryInstances$Dummies$InMemoryPrintStream;");
staticinvoke <com.google.common.testing.ArbitraryInstances: void setImplementation(java.lang.Class,java.lang.Class)>(class "Ljava/io/PrintWriter;", class "Lcom/google/common/testing/ArbitraryInstances$Dummies$InMemoryPrintWriter;");
staticinvoke <com.google.common.testing.ArbitraryInstances: void setImplementation(java.lang.Class,java.lang.Class)>(class "Ljava/util/Queue;", class "Ljava/util/ArrayDeque;");
staticinvoke <com.google.common.testing.ArbitraryInstances: void setImplementation(java.lang.Class,java.lang.Class)>(class "Ljava/util/Random;", class "Lcom/google/common/testing/ArbitraryInstances$Dummies$DeterministicRandom;");
staticinvoke <com.google.common.testing.ArbitraryInstances: void setImplementation(java.lang.Class,java.lang.Class)>(class "Ljava/util/concurrent/ScheduledThreadPoolExecutor;", class "Lcom/google/common/testing/ArbitraryInstances$Dummies$DummyScheduledThreadPoolExecutor;");
staticinvoke <com.google.common.testing.ArbitraryInstances: void setImplementation(java.lang.Class,java.lang.Class)>(class "Ljava/util/concurrent/ThreadPoolExecutor;", class "Lcom/google/common/testing/ArbitraryInstances$Dummies$DummyScheduledThreadPoolExecutor;");
staticinvoke <com.google.common.testing.ArbitraryInstances: void setImplementation(java.lang.Class,java.lang.Class)>(class "Ljava/io/Writer;", class "Ljava/io/StringWriter;");
staticinvoke <com.google.common.testing.ArbitraryInstances: void setImplementation(java.lang.Class,java.lang.Class)>(class "Ljava/lang/Runnable;", class "Lcom/google/common/testing/ArbitraryInstances$Dummies$DummyRunnable;");
staticinvoke <com.google.common.testing.ArbitraryInstances: void setImplementation(java.lang.Class,java.lang.Class)>(class "Ljava/util/concurrent/ThreadFactory;", class "Lcom/google/common/testing/ArbitraryInstances$Dummies$DummyThreadFactory;");
staticinvoke <com.google.common.testing.ArbitraryInstances: void setImplementation(java.lang.Class,java.lang.Class)>(class "Ljava/util/concurrent/Executor;", class "Lcom/google/common/testing/ArbitraryInstances$Dummies$DummyExecutor;");
v197 = class "Lcom/google/common/testing/ArbitraryInstances;";
v198 = virtualinvoke v197.<java.lang.Class: java.lang.String getName()>();
v199 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>(v198);
<com.google.common.testing.ArbitraryInstances: java.util.logging.Logger logger> = v199;
return;
}
}