class com.google.common.testing.DummyProxy$DummyHandler extends com.google.common.reflect.AbstractInvocationHandler implements java.io.Serializable
{
private final com.google.common.reflect.TypeToken interfaceType;
final com.google.common.testing.DummyProxy this$0;
void <init>(com.google.common.testing.DummyProxy, com.google.common.reflect.TypeToken)
{
com.google.common.testing.DummyProxy v1;
com.google.common.testing.DummyProxy$DummyHandler v0;
com.google.common.reflect.TypeToken v2;
v0 := @this: com.google.common.testing.DummyProxy$DummyHandler;
v1 := @parameter0: com.google.common.testing.DummyProxy;
v2 := @parameter1: com.google.common.reflect.TypeToken;
v0.<com.google.common.testing.DummyProxy$DummyHandler: com.google.common.testing.DummyProxy this$0> = v1;
specialinvoke v0.<com.google.common.reflect.AbstractInvocationHandler: void <init>()>();
v0.<com.google.common.testing.DummyProxy$DummyHandler: com.google.common.reflect.TypeToken interfaceType> = v2;
return;
}
protected java.lang.Object handleInvocation(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])
{
com.google.common.testing.DummyProxy v12;
com.google.common.testing.DummyProxy$DummyHandler v0;
java.lang.Object[] v3;
com.google.common.reflect.TypeToken v13, v15, v4;
com.google.common.collect.ImmutableList v6;
int v7, v8;
java.lang.reflect.Method v2;
boolean v10;
java.lang.reflect.Type v14;
com.google.common.reflect.Invokable v5;
java.lang.Object v1, v11, v16, v9;
v0 := @this: com.google.common.testing.DummyProxy$DummyHandler;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.reflect.Method;
v3 := @parameter2: java.lang.Object[];
v4 = v0.<com.google.common.testing.DummyProxy$DummyHandler: com.google.common.reflect.TypeToken interfaceType>;
v5 = virtualinvoke v4.<com.google.common.reflect.TypeToken: com.google.common.reflect.Invokable method(java.lang.reflect.Method)>(v2);
v6 = virtualinvoke v5.<com.google.common.reflect.Invokable: com.google.common.collect.ImmutableList getParameters()>();
v7 = 0;
label1:
v8 = lengthof v3;
if v7 >= v8 goto label3;
v9 = virtualinvoke v6.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>(v7);
v10 = staticinvoke <com.google.common.testing.NullPointerTester: boolean isNullable(com.google.common.reflect.Parameter)>(v9);
if v10 != 0 goto label2;
v11 = v3[v7];
staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(v11);
label2:
v7 = v7 + 1;
goto label1;
label3:
v12 = v0.<com.google.common.testing.DummyProxy$DummyHandler: com.google.common.testing.DummyProxy this$0>;
v13 = v0.<com.google.common.testing.DummyProxy$DummyHandler: com.google.common.reflect.TypeToken interfaceType>;
v14 = virtualinvoke v2.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>();
v15 = virtualinvoke v13.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken resolveType(java.lang.reflect.Type)>(v14);
v16 = virtualinvoke v12.<com.google.common.testing.DummyProxy: java.lang.Object dummyReturnValue(com.google.common.reflect.TypeToken)>(v15);
return v16;
}
public int hashCode()
{
int v2;
com.google.common.testing.DummyProxy v1;
com.google.common.testing.DummyProxy$DummyHandler v0;
v0 := @this: com.google.common.testing.DummyProxy$DummyHandler;
v1 = specialinvoke v0.<com.google.common.testing.DummyProxy$DummyHandler: com.google.common.testing.DummyProxy identity()>();
v2 = virtualinvoke v1.<java.lang.Object: int hashCode()>();
return v2;
}
public boolean equals(java.lang.Object)
{
com.google.common.testing.DummyProxy v3, v4;
com.google.common.testing.DummyProxy$DummyHandler v0;
java.lang.Object v1;
boolean v2, v5;
v0 := @this: com.google.common.testing.DummyProxy$DummyHandler;
v1 := @parameter0: java.lang.Object;
v2 = v1 instanceof com.google.common.testing.DummyProxy$DummyHandler;
if v2 == 0 goto label1;
v3 = specialinvoke v0.<com.google.common.testing.DummyProxy$DummyHandler: com.google.common.testing.DummyProxy identity()>();
v4 = specialinvoke v1.<com.google.common.testing.DummyProxy$DummyHandler: com.google.common.testing.DummyProxy identity()>();
v5 = virtualinvoke v3.<java.lang.Object: boolean equals(java.lang.Object)>(v4);
return v5;
label1:
return 0;
}
private com.google.common.testing.DummyProxy identity()
{
com.google.common.testing.DummyProxy v1;
com.google.common.testing.DummyProxy$DummyHandler v0;
v0 := @this: com.google.common.testing.DummyProxy$DummyHandler;
v1 = v0.<com.google.common.testing.DummyProxy$DummyHandler: com.google.common.testing.DummyProxy this$0>;
return v1;
}
public java.lang.String toString()
{
com.google.common.testing.DummyProxy$DummyHandler v0;
com.google.common.reflect.TypeToken v1;
java.lang.String v2;
v0 := @this: com.google.common.testing.DummyProxy$DummyHandler;
v1 = v0.<com.google.common.testing.DummyProxy$DummyHandler: com.google.common.reflect.TypeToken interfaceType>;
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (com.google.common.reflect.TypeToken)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Dummy proxy for \u0001");
return v2;
}
private java.lang.Object writeReplace()
{
com.google.common.testing.DummyProxy v2;
com.google.common.testing.DummyProxy$DummyHandler v0, v1;
java.lang.Class v4;
com.google.common.reflect.TypeToken v3, v5;
v0 := @this: com.google.common.testing.DummyProxy$DummyHandler;
v1 = new com.google.common.testing.DummyProxy$DummyHandler;
v2 = v0.<com.google.common.testing.DummyProxy$DummyHandler: com.google.common.testing.DummyProxy this$0>;
v3 = v0.<com.google.common.testing.DummyProxy$DummyHandler: com.google.common.reflect.TypeToken interfaceType>;
v4 = virtualinvoke v3.<com.google.common.reflect.TypeToken: java.lang.Class getRawType()>();
v5 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.Class)>(v4);
specialinvoke v1.<com.google.common.testing.DummyProxy$DummyHandler: void <init>(com.google.common.testing.DummyProxy,com.google.common.reflect.TypeToken)>(v2, v5);
return v1;
}
}