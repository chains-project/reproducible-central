public abstract enum class com.google.common.testing.NullPointerTester$Visibility extends java.lang.Enum
{
public static final enum com.google.common.testing.NullPointerTester$Visibility PACKAGE;
public static final enum com.google.common.testing.NullPointerTester$Visibility PROTECTED;
public static final enum com.google.common.testing.NullPointerTester$Visibility PUBLIC;
private static final com.google.common.testing.NullPointerTester$Visibility[] $VALUES;
public static com.google.common.testing.NullPointerTester$Visibility[] values()
{
com.google.common.testing.NullPointerTester$Visibility[] v0;
java.lang.Object v1;
v0 = <com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility[] $VALUES>;
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
return v1;
}
public static com.google.common.testing.NullPointerTester$Visibility valueOf(java.lang.String)
{
java.lang.String v0;
java.lang.Enum v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/google/common/testing/NullPointerTester$Visibility;", v0);
return v1;
}
private void <init>(java.lang.String, int)
{
int v2;
java.lang.String v1;
com.google.common.testing.NullPointerTester$Visibility v0;
v0 := @this: com.google.common.testing.NullPointerTester$Visibility;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
specialinvoke v0.<java.lang.Enum: void <init>(java.lang.String,int)>(v1, v2);
return;
}
abstract boolean isVisible(int);
final boolean isVisible(java.lang.reflect.Member)
{
java.lang.reflect.Member v1;
int v2;
com.google.common.testing.NullPointerTester$Visibility v0;
boolean v3;
v0 := @this: com.google.common.testing.NullPointerTester$Visibility;
v1 := @parameter0: java.lang.reflect.Member;
v2 = interfaceinvoke v1.<java.lang.reflect.Member: int getModifiers()>();
v3 = virtualinvoke v0.<com.google.common.testing.NullPointerTester$Visibility: boolean isVisible(int)>(v2);
return v3;
}
final java.lang.Iterable getStaticMethods(java.lang.Class)
{
com.google.common.testing.NullPointerTester$Visibility v0;
com.google.common.collect.ImmutableList v3, v9;
com.google.common.reflect.Invokable v7;
java.lang.Class v1;
java.lang.Object v6;
com.google.common.collect.UnmodifiableIterator v4;
boolean v5, v8;
com.google.common.collect.ImmutableList$Builder v2;
v0 := @this: com.google.common.testing.NullPointerTester$Visibility;
v1 := @parameter0: java.lang.Class;
v2 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList$Builder builder()>();
v3 = specialinvoke v0.<com.google.common.testing.NullPointerTester$Visibility: com.google.common.collect.ImmutableList getVisibleMethods(java.lang.Class)>(v1);
v4 = virtualinvoke v3.<com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableIterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = staticinvoke <com.google.common.reflect.Invokable: com.google.common.reflect.Invokable 'from'(java.lang.reflect.Method)>(v6);
v8 = virtualinvoke v7.<com.google.common.reflect.Invokable: boolean isStatic()>();
if v8 == 0 goto label1;
virtualinvoke v2.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder add(java.lang.Object)>(v6);
goto label1;
label2:
v9 = virtualinvoke v2.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList build()>();
return v9;
}
final java.lang.Iterable getInstanceMethods(java.lang.Class)
{
java.util.Collection v10;
com.google.common.testing.NullPointerTester$Visibility v0;
java.util.concurrent.ConcurrentMap v2;
com.google.common.testing.NullPointerTester$Signature v9;
com.google.common.collect.ImmutableList v3;
com.google.common.reflect.Invokable v7;
java.lang.Class v1;
java.lang.Object v6;
com.google.common.collect.UnmodifiableIterator v4;
boolean v5, v8;
v0 := @this: com.google.common.testing.NullPointerTester$Visibility;
v1 := @parameter0: java.lang.Class;
v2 = staticinvoke <com.google.common.collect.Maps: java.util.concurrent.ConcurrentMap newConcurrentMap()>();
v3 = specialinvoke v0.<com.google.common.testing.NullPointerTester$Visibility: com.google.common.collect.ImmutableList getVisibleMethods(java.lang.Class)>(v1);
v4 = virtualinvoke v3.<com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableIterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = staticinvoke <com.google.common.reflect.Invokable: com.google.common.reflect.Invokable 'from'(java.lang.reflect.Method)>(v6);
v8 = virtualinvoke v7.<com.google.common.reflect.Invokable: boolean isStatic()>();
if v8 != 0 goto label1;
v9 = new com.google.common.testing.NullPointerTester$Signature;
specialinvoke v9.<com.google.common.testing.NullPointerTester$Signature: void <init>(java.lang.reflect.Method)>(v6);
interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(v9, v6);
goto label1;
label2:
v10 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();
return v10;
}
private com.google.common.collect.ImmutableList getVisibleMethods(java.lang.Class)
{
com.google.common.reflect.TypeToken v4;
com.google.common.testing.NullPointerTester$Visibility v0;
java.lang.reflect.Method[] v12;
com.google.common.collect.ImmutableList v18;
int v13, v14;
java.lang.String v10, v2;
com.google.common.reflect.TypeToken$TypeSet v5;
java.lang.reflect.Method v15;
boolean v11, v16, v17, v8;
java.util.Iterator v7;
java.util.Set v6;
java.lang.Class v1;
java.lang.Object v9;
com.google.common.collect.ImmutableList$Builder v3;
v0 := @this: com.google.common.testing.NullPointerTester$Visibility;
v1 := @parameter0: java.lang.Class;
v2 = staticinvoke <com.google.common.reflect.Reflection: java.lang.String getPackageName(java.lang.Class)>(v1);
v3 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList$Builder builder()>();
v4 = staticinvoke <com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.Class)>(v1);
v5 = virtualinvoke v4.<com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken$TypeSet getTypes()>();
v6 = virtualinvoke v5.<com.google.common.reflect.TypeToken$TypeSet: java.util.Set rawTypes()>();
v7 = interfaceinvoke v6.<java.util.Set: java.util.Iterator iterator()>();
label1:
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label4;
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
v10 = staticinvoke <com.google.common.reflect.Reflection: java.lang.String getPackageName(java.lang.Class)>(v9);
v11 = virtualinvoke v10.<java.lang.String: boolean equals(java.lang.Object)>(v2);
if v11 == 0 goto label4;
v12 = virtualinvoke v9.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();
v13 = lengthof v12;
v14 = 0;
label2:
if v14 >= v13 goto label1;
v15 = v12[v14];
v16 = virtualinvoke v15.<java.lang.reflect.Method: boolean isSynthetic()>();
if v16 != 0 goto label3;
v17 = virtualinvoke v0.<com.google.common.testing.NullPointerTester$Visibility: boolean isVisible(java.lang.reflect.Member)>(v15);
if v17 == 0 goto label3;
virtualinvoke v3.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder add(java.lang.Object)>(v15);
label3:
v14 = v14 + 1;
goto label2;
label4:
v18 = virtualinvoke v3.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList build()>();
return v18;
}
private static com.google.common.testing.NullPointerTester$Visibility[] $values()
{
com.google.common.testing.NullPointerTester$Visibility[] v0;
com.google.common.testing.NullPointerTester$Visibility v1, v2, v3;
v0 = newarray (com.google.common.testing.NullPointerTester$Visibility)[3];
v1 = <com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PACKAGE>;
v0[0] = v1;
v2 = <com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PROTECTED>;
v0[1] = v2;
v3 = <com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PUBLIC>;
v0[2] = v3;
return v0;
}
static void <clinit>()
{
com.google.common.testing.NullPointerTester$Visibility$1 v0;
com.google.common.testing.NullPointerTester$Visibility$2 v1;
com.google.common.testing.NullPointerTester$Visibility$3 v2;
com.google.common.testing.NullPointerTester$Visibility[] v3;
v0 = new com.google.common.testing.NullPointerTester$Visibility$1;
specialinvoke v0.<com.google.common.testing.NullPointerTester$Visibility$1: void <init>(java.lang.String,int)>("PACKAGE", 0);
<com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PACKAGE> = v0;
v1 = new com.google.common.testing.NullPointerTester$Visibility$2;
specialinvoke v1.<com.google.common.testing.NullPointerTester$Visibility$2: void <init>(java.lang.String,int)>("PROTECTED", 1);
<com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PROTECTED> = v1;
v2 = new com.google.common.testing.NullPointerTester$Visibility$3;
specialinvoke v2.<com.google.common.testing.NullPointerTester$Visibility$3: void <init>(java.lang.String,int)>("PUBLIC", 2);
<com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility PUBLIC> = v2;
v3 = staticinvoke <com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility[] $values()>();
<com.google.common.testing.NullPointerTester$Visibility: com.google.common.testing.NullPointerTester$Visibility[] $VALUES> = v3;
return;
}
}