final class com.google.common.testing.RelationshipTester extends java.lang.Object
{
private final com.google.common.base.Equivalence equivalence;
private final java.lang.String relationshipName;
private final java.lang.String hashName;
private final com.google.common.testing.RelationshipTester$ItemReporter itemReporter;
private final java.util.List groups;
void <init>(com.google.common.base.Equivalence, java.lang.String, java.lang.String, com.google.common.testing.RelationshipTester$ItemReporter)
{
com.google.common.base.Equivalence v1;
com.google.common.testing.RelationshipTester v0;
java.util.ArrayList v5;
com.google.common.testing.RelationshipTester$ItemReporter v4;
java.lang.Object v6, v7, v8, v9;
java.lang.String v2, v3;
v0 := @this: com.google.common.testing.RelationshipTester;
v1 := @parameter0: com.google.common.base.Equivalence;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: com.google.common.testing.RelationshipTester$ItemReporter;
specialinvoke v0.<java.lang.Object: void <init>()>();
v5 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();
v0.<com.google.common.testing.RelationshipTester: java.util.List groups> = v5;
v6 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(v1);
v0.<com.google.common.testing.RelationshipTester: com.google.common.base.Equivalence equivalence> = v6;
v7 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(v2);
v0.<com.google.common.testing.RelationshipTester: java.lang.String relationshipName> = v7;
v8 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(v3);
v0.<com.google.common.testing.RelationshipTester: java.lang.String hashName> = v8;
v9 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(v4);
v0.<com.google.common.testing.RelationshipTester: com.google.common.testing.RelationshipTester$ItemReporter itemReporter> = v9;
return;
}
public com.google.common.testing.RelationshipTester addRelatedGroup(java.lang.Iterable)
{
java.util.List v2;
com.google.common.collect.ImmutableList v3;
com.google.common.testing.RelationshipTester v0;
java.lang.Iterable v1;
v0 := @this: com.google.common.testing.RelationshipTester;
v1 := @parameter0: java.lang.Iterable;
v2 = v0.<com.google.common.testing.RelationshipTester: java.util.List groups>;
v3 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Iterable)>(v1);
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v3);
return v0;
}
public void test()
{
com.google.common.testing.RelationshipTester v0;
int v1, v10, v12, v15, v16, v3, v6, v7, v8, v9;
java.util.List v11, v13, v2, v4;
java.lang.Object v14, v5;
v0 := @this: com.google.common.testing.RelationshipTester;
v1 = 0;
label01:
v2 = v0.<com.google.common.testing.RelationshipTester: java.util.List groups>;
v3 = interfaceinvoke v2.<java.util.List: int size()>();
if v1 >= v3 goto label11;
v4 = v0.<com.google.common.testing.RelationshipTester: java.util.List groups>;
v5 = interfaceinvoke v4.<java.util.List: java.lang.Object get(int)>(v1);
v6 = 0;
label02:
v7 = virtualinvoke v5.<com.google.common.collect.ImmutableList: int size()>();
if v6 >= v7 goto label10;
v8 = 0;
label03:
v9 = virtualinvoke v5.<com.google.common.collect.ImmutableList: int size()>();
if v8 >= v9 goto label05;
if v6 == v8 goto label04;
specialinvoke v0.<com.google.common.testing.RelationshipTester: void assertRelated(int,int,int)>(v1, v6, v8);
label04:
v8 = v8 + 1;
goto label03;
label05:
v10 = 0;
label06:
v11 = v0.<com.google.common.testing.RelationshipTester: java.util.List groups>;
v12 = interfaceinvoke v11.<java.util.List: int size()>();
if v10 >= v12 goto label09;
if v1 == v10 goto label08;
v13 = v0.<com.google.common.testing.RelationshipTester: java.util.List groups>;
v14 = interfaceinvoke v13.<java.util.List: java.lang.Object get(int)>(v10);
v15 = 0;
label07:
v16 = virtualinvoke v14.<com.google.common.collect.ImmutableList: int size()>();
if v15 >= v16 goto label08;
specialinvoke v0.<com.google.common.testing.RelationshipTester: void assertUnrelated(int,int,int,int)>(v1, v6, v10, v15);
v15 = v15 + 1;
goto label07;
label08:
v10 = v10 + 1;
goto label06;
label09:
v6 = v6 + 1;
goto label02;
label10:
v1 = v1 + 1;
goto label01;
label11:
return;
}
private void assertRelated(int, int, int)
{
com.google.common.testing.RelationshipTester v0;
com.google.common.testing.RelationshipTester$Item v4, v5;
int v1, v11, v13, v2, v3;
java.lang.String v14;
boolean v15, v9;
com.google.common.base.Equivalence v10, v12, v8;
java.lang.Object v6, v7;
v0 := @this: com.google.common.testing.RelationshipTester;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = specialinvoke v0.<com.google.common.testing.RelationshipTester: com.google.common.testing.RelationshipTester$Item getItem(int,int)>(v1, v2);
v5 = specialinvoke v0.<com.google.common.testing.RelationshipTester: com.google.common.testing.RelationshipTester$Item getItem(int,int)>(v1, v3);
v6 = v4.<com.google.common.testing.RelationshipTester$Item: java.lang.Object value>;
v7 = v5.<com.google.common.testing.RelationshipTester$Item: java.lang.Object value>;
v8 = v0.<com.google.common.testing.RelationshipTester: com.google.common.base.Equivalence equivalence>;
v9 = virtualinvoke v8.<com.google.common.base.Equivalence: boolean equivalent(java.lang.Object,java.lang.Object)>(v6, v7);
specialinvoke v0.<com.google.common.testing.RelationshipTester: void assertWithTemplate(java.lang.String,com.google.common.testing.RelationshipTester$Item,com.google.common.testing.RelationshipTester$Item,boolean)>("$ITEM must be $RELATIONSHIP to $OTHER", v4, v5, v9);
v10 = v0.<com.google.common.testing.RelationshipTester: com.google.common.base.Equivalence equivalence>;
v11 = virtualinvoke v10.<com.google.common.base.Equivalence: int hash(java.lang.Object)>(v6);
v12 = v0.<com.google.common.testing.RelationshipTester: com.google.common.base.Equivalence equivalence>;
v13 = virtualinvoke v12.<com.google.common.base.Equivalence: int hash(java.lang.Object)>(v7);
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v11, v13) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("the $HASH (\u0001) of $ITEM must be equal to the $HASH (\u0001) of $OTHER");
if v11 != v13 goto label1;
v15 = 1;
goto label2;
label1:
v15 = 0;
label2:
specialinvoke v0.<com.google.common.testing.RelationshipTester: void assertWithTemplate(java.lang.String,com.google.common.testing.RelationshipTester$Item,com.google.common.testing.RelationshipTester$Item,boolean)>(v14, v4, v5, v15);
return;
}
private void assertUnrelated(int, int, int, int)
{
com.google.common.base.Equivalence v7;
com.google.common.testing.RelationshipTester v0;
com.google.common.testing.RelationshipTester$Item v5, v6;
int v1, v2, v3, v4;
java.lang.Object v8, v9;
boolean v10, v11;
v0 := @this: com.google.common.testing.RelationshipTester;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 = specialinvoke v0.<com.google.common.testing.RelationshipTester: com.google.common.testing.RelationshipTester$Item getItem(int,int)>(v1, v2);
v6 = specialinvoke v0.<com.google.common.testing.RelationshipTester: com.google.common.testing.RelationshipTester$Item getItem(int,int)>(v3, v4);
v7 = v0.<com.google.common.testing.RelationshipTester: com.google.common.base.Equivalence equivalence>;
v8 = v5.<com.google.common.testing.RelationshipTester$Item: java.lang.Object value>;
v9 = v6.<com.google.common.testing.RelationshipTester$Item: java.lang.Object value>;
v10 = virtualinvoke v7.<com.google.common.base.Equivalence: boolean equivalent(java.lang.Object,java.lang.Object)>(v8, v9);
if v10 != 0 goto label1;
v11 = 1;
goto label2;
label1:
v11 = 0;
label2:
specialinvoke v0.<com.google.common.testing.RelationshipTester: void assertWithTemplate(java.lang.String,com.google.common.testing.RelationshipTester$Item,com.google.common.testing.RelationshipTester$Item,boolean)>("$ITEM must not be $RELATIONSHIP to $OTHER", v5, v6, v11);
return;
}
private void assertWithTemplate(java.lang.String, com.google.common.testing.RelationshipTester$Item, com.google.common.testing.RelationshipTester$Item, boolean)
{
com.google.common.testing.RelationshipTester v0;
com.google.common.testing.RelationshipTester$Item v2, v3;
java.lang.String v1, v11, v12, v14, v15, v6, v7, v8, v9;
boolean v4;
junit.framework.AssertionFailedError v5;
com.google.common.testing.RelationshipTester$ItemReporter v10, v13;
v0 := @this: com.google.common.testing.RelationshipTester;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: com.google.common.testing.RelationshipTester$Item;
v3 := @parameter2: com.google.common.testing.RelationshipTester$Item;
v4 := @parameter3: boolean;
if v4 != 0 goto label1;
v5 = new junit.framework.AssertionFailedError;
v6 = v0.<com.google.common.testing.RelationshipTester: java.lang.String relationshipName>;
v7 = virtualinvoke v1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("$RELATIONSHIP", v6);
v8 = v0.<com.google.common.testing.RelationshipTester: java.lang.String hashName>;
v9 = virtualinvoke v7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("$HASH", v8);
v10 = v0.<com.google.common.testing.RelationshipTester: com.google.common.testing.RelationshipTester$ItemReporter itemReporter>;
v11 = virtualinvoke v10.<com.google.common.testing.RelationshipTester$ItemReporter: java.lang.String reportItem(com.google.common.testing.RelationshipTester$Item)>(v2);
v12 = virtualinvoke v9.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("$ITEM", v11);
v13 = v0.<com.google.common.testing.RelationshipTester: com.google.common.testing.RelationshipTester$ItemReporter itemReporter>;
v14 = virtualinvoke v13.<com.google.common.testing.RelationshipTester$ItemReporter: java.lang.String reportItem(com.google.common.testing.RelationshipTester$Item)>(v3);
v15 = virtualinvoke v12.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("$OTHER", v14);
specialinvoke v5.<junit.framework.AssertionFailedError: void <init>(java.lang.String)>(v15);
throw v5;
label1:
return;
}
private com.google.common.testing.RelationshipTester$Item getItem(int, int)
{
java.util.List v4;
com.google.common.testing.RelationshipTester v0;
int v1, v2;
java.lang.Object v5, v6;
com.google.common.testing.RelationshipTester$Item v3;
v0 := @this: com.google.common.testing.RelationshipTester;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = new com.google.common.testing.RelationshipTester$Item;
v4 = v0.<com.google.common.testing.RelationshipTester: java.util.List groups>;
v5 = interfaceinvoke v4.<java.util.List: java.lang.Object get(int)>(v1);
v6 = virtualinvoke v5.<com.google.common.collect.ImmutableList: java.lang.Object get(int)>(v2);
specialinvoke v3.<com.google.common.testing.RelationshipTester$Item: void <init>(java.lang.Object,int,int)>(v6, v1, v2);
return v3;
}
}