final class com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService extends com.google.common.util.concurrent.AbstractListeningExecutorService implements com.google.common.util.concurrent.ListeningScheduledExecutorService
{
private volatile boolean shutdown;
private void <init>()
{
com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService v0;
v0 := @this: com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService;
specialinvoke v0.<com.google.common.util.concurrent.AbstractListeningExecutorService: void <init>()>();
return;
}
public void shutdown()
{
com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService v0;
v0 := @this: com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService;
v0.<com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService: boolean shutdown> = 1;
return;
}
public java.util.List shutdownNow()
{
com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService v0;
com.google.common.collect.ImmutableList v1;
v0 := @this: com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService;
virtualinvoke v0.<com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService: void shutdown()>();
v1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()>();
return v1;
}
public boolean isShutdown()
{
com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService v0;
boolean v1;
v0 := @this: com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService;
v1 = v0.<com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService: boolean shutdown>;
return v1;
}
public boolean isTerminated()
{
com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService v0;
boolean v1;
v0 := @this: com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService;
v1 = v0.<com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService: boolean shutdown>;
return v1;
}
public boolean awaitTermination(long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v2;
com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService v0;
long v1;
v0 := @this: com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService;
v1 := @parameter0: long;
v2 := @parameter1: java.util.concurrent.TimeUnit;
return 1;
}
public void execute(java.lang.Runnable)
{
com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService v0;
java.lang.Runnable v1;
v0 := @this: com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService;
v1 := @parameter0: java.lang.Runnable;
return;
}
public com.google.common.util.concurrent.ListenableScheduledFuture schedule(java.util.concurrent.Callable, long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v3;
com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService$NeverScheduledFuture v4;
com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService v0;
java.util.concurrent.Callable v1;
long v2;
v0 := @this: com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService;
v1 := @parameter0: java.util.concurrent.Callable;
v2 := @parameter1: long;
v3 := @parameter2: java.util.concurrent.TimeUnit;
v4 = staticinvoke <com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService$NeverScheduledFuture: com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService$NeverScheduledFuture create()>();
return v4;
}
public com.google.common.util.concurrent.ListenableScheduledFuture schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v3;
com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService$NeverScheduledFuture v4;
com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService v0;
long v2;
java.lang.Runnable v1;
v0 := @this: com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService;
v1 := @parameter0: java.lang.Runnable;
v2 := @parameter1: long;
v3 := @parameter2: java.util.concurrent.TimeUnit;
v4 = staticinvoke <com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService$NeverScheduledFuture: com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService$NeverScheduledFuture create()>();
return v4;
}
public com.google.common.util.concurrent.ListenableScheduledFuture scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v4;
com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService$NeverScheduledFuture v5;
com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService v0;
long v2, v3;
java.lang.Runnable v1;
v0 := @this: com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService;
v1 := @parameter0: java.lang.Runnable;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 := @parameter3: java.util.concurrent.TimeUnit;
v5 = staticinvoke <com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService$NeverScheduledFuture: com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService$NeverScheduledFuture create()>();
return v5;
}
public com.google.common.util.concurrent.ListenableScheduledFuture scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v4;
com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService$NeverScheduledFuture v5;
com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService v0;
long v2, v3;
java.lang.Runnable v1;
v0 := @this: com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService;
v1 := @parameter0: java.lang.Runnable;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 := @parameter3: java.util.concurrent.TimeUnit;
v5 = staticinvoke <com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService$NeverScheduledFuture: com.google.common.util.concurrent.testing.TestingExecutors$NoOpScheduledExecutorService$NeverScheduledFuture create()>();
return v5;
}
}