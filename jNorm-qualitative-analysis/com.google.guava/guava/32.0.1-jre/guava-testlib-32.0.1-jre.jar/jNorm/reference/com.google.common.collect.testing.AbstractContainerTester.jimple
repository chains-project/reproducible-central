public abstract class com.google.common.collect.testing.AbstractContainerTester extends com.google.common.collect.testing.AbstractTester
{
protected com.google.common.collect.testing.SampleElements samples;
protected java.lang.Object container;
public void <init>()
{
com.google.common.collect.testing.AbstractContainerTester v0;
v0 := @this: com.google.common.collect.testing.AbstractContainerTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractTester: void <init>()>();
return;
}
public void setUp() throws java.lang.Exception
{
com.google.common.collect.testing.AbstractContainerTester v0;
java.lang.Object v1;
com.google.common.collect.testing.SampleElements v2;
v0 := @this: com.google.common.collect.testing.AbstractContainerTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractTester: void setUp()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.AbstractContainerTester: java.lang.Object getSubjectGenerator()>();
v2 = interfaceinvoke v1.<com.google.common.collect.testing.OneSizeTestContainerGenerator: com.google.common.collect.testing.SampleElements samples()>();
v0.<com.google.common.collect.testing.AbstractContainerTester: com.google.common.collect.testing.SampleElements samples> = v2;
virtualinvoke v0.<com.google.common.collect.testing.AbstractContainerTester: java.lang.Object resetContainer()>();
return;
}
protected abstract java.util.Collection actualContents();
protected java.lang.Object resetContainer()
{
com.google.common.collect.testing.AbstractContainerTester v0;
java.lang.Object v1, v2, v3;
v0 := @this: com.google.common.collect.testing.AbstractContainerTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.AbstractContainerTester: java.lang.Object getSubjectGenerator()>();
v2 = interfaceinvoke v1.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.lang.Object createTestSubject()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.AbstractContainerTester: java.lang.Object resetContainer(java.lang.Object)>(v2);
return v3;
}
protected java.lang.Object resetContainer(java.lang.Object)
{
com.google.common.collect.testing.AbstractContainerTester v0;
java.lang.Object v1, v2;
v0 := @this: com.google.common.collect.testing.AbstractContainerTester;
v1 := @parameter0: java.lang.Object;
v0.<com.google.common.collect.testing.AbstractContainerTester: java.lang.Object container> = v1;
v2 = v0.<com.google.common.collect.testing.AbstractContainerTester: java.lang.Object container>;
return v2;
}
protected final transient void expectContents(java.lang.Object[])
{
com.google.common.collect.testing.AbstractContainerTester v0;
java.util.List v2;
java.lang.Object[] v1;
v0 := @this: com.google.common.collect.testing.AbstractContainerTester;
v1 := @parameter0: java.lang.Object[];
v2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
virtualinvoke v0.<com.google.common.collect.testing.AbstractContainerTester: void expectContents(java.util.Collection)>(v2);
return;
}
protected void expectContents(java.util.Collection)
{
com.google.common.collect.testing.AbstractContainerTester v0;
java.util.Collection v1, v2;
v0 := @this: com.google.common.collect.testing.AbstractContainerTester;
v1 := @parameter0: java.util.Collection;
v2 = virtualinvoke v0.<com.google.common.collect.testing.AbstractContainerTester: java.util.Collection actualContents()>();
staticinvoke <com.google.common.collect.testing.Helpers: void assertEqualIgnoringOrder(java.lang.Iterable,java.lang.Iterable)>(v1, v2);
return;
}
protected void expectUnchanged()
{
com.google.common.collect.testing.AbstractContainerTester v0;
java.util.List v1;
v0 := @this: com.google.common.collect.testing.AbstractContainerTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.AbstractContainerTester: java.util.List getOrderedElements()>();
virtualinvoke v0.<com.google.common.collect.testing.AbstractContainerTester: void expectContents(java.util.Collection)>(v1);
return;
}
protected final transient void expectAdded(java.lang.Object[])
{
com.google.common.collect.testing.AbstractContainerTester v0;
java.util.List v3, v4;
java.lang.Object[] v1;
java.util.Collection v2;
v0 := @this: com.google.common.collect.testing.AbstractContainerTester;
v1 := @parameter0: java.lang.Object[];
v2 = virtualinvoke v0.<com.google.common.collect.testing.AbstractContainerTester: java.util.Collection getSampleElements()>();
v3 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.List copyToList(java.lang.Iterable)>(v2);
v4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
interfaceinvoke v3.<java.util.List: boolean addAll(java.util.Collection)>(v4);
virtualinvoke v0.<com.google.common.collect.testing.AbstractContainerTester: void expectContents(java.util.Collection)>(v3);
return;
}
protected final transient void expectAdded(int, java.lang.Object[])
{
com.google.common.collect.testing.AbstractContainerTester v0;
java.util.List v3;
java.lang.Object[] v2;
int v1;
v0 := @this: com.google.common.collect.testing.AbstractContainerTester;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.Object[];
v3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v2);
virtualinvoke v0.<com.google.common.collect.testing.AbstractContainerTester: void expectAdded(int,java.util.Collection)>(v1, v3);
return;
}
protected final void expectAdded(int, java.util.Collection)
{
com.google.common.collect.testing.AbstractContainerTester v0;
java.util.List v4;
java.util.Collection v2, v3;
int v1;
v0 := @this: com.google.common.collect.testing.AbstractContainerTester;
v1 := @parameter0: int;
v2 := @parameter1: java.util.Collection;
v3 = virtualinvoke v0.<com.google.common.collect.testing.AbstractContainerTester: java.util.Collection getSampleElements()>();
v4 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.List copyToList(java.lang.Iterable)>(v3);
interfaceinvoke v4.<java.util.List: boolean addAll(int,java.util.Collection)>(v1, v2);
virtualinvoke v0.<com.google.common.collect.testing.AbstractContainerTester: void expectContents(java.util.Collection)>(v4);
return;
}
protected transient void expectMissing(java.lang.Object[])
{
com.google.common.collect.testing.AbstractContainerTester v0;
java.lang.Object[] v1;
java.util.Collection v6;
int v2, v3;
java.lang.Object v4;
java.lang.String v5;
boolean v7;
v0 := @this: com.google.common.collect.testing.AbstractContainerTester;
v1 := @parameter0: java.lang.Object[];
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label2;
v4 = v1[v3];
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Should not contain \u0001");
v6 = virtualinvoke v0.<com.google.common.collect.testing.AbstractContainerTester: java.util.Collection actualContents()>();
v7 = interfaceinvoke v6.<java.util.Collection: boolean contains(java.lang.Object)>(v4);
staticinvoke <com.google.common.collect.testing.AbstractContainerTester: void assertFalse(java.lang.String,boolean)>(v5, v7);
v3 = v3 + 1;
goto label1;
label2:
return;
}
protected java.lang.Object[] createSamplesArray()
{
com.google.common.collect.testing.AbstractContainerTester v0;
java.lang.Object[] v3;
java.util.Collection v4;
int v2;
java.lang.Object v1;
v0 := @this: com.google.common.collect.testing.AbstractContainerTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.AbstractContainerTester: java.lang.Object getSubjectGenerator()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.AbstractContainerTester: int getNumElements()>();
v3 = interfaceinvoke v1.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.lang.Object[] createArray(int)>(v2);
v4 = virtualinvoke v0.<com.google.common.collect.testing.AbstractContainerTester: java.util.Collection getSampleElements()>();
interfaceinvoke v4.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(v3);
return v3;
}
protected java.lang.Object[] createOrderedArray()
{
com.google.common.collect.testing.AbstractContainerTester v0;
java.util.List v4;
java.lang.Object[] v3;
int v2;
java.lang.Object v1;
v0 := @this: com.google.common.collect.testing.AbstractContainerTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.AbstractContainerTester: java.lang.Object getSubjectGenerator()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.AbstractContainerTester: int getNumElements()>();
v3 = interfaceinvoke v1.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.lang.Object[] createArray(int)>(v2);
v4 = virtualinvoke v0.<com.google.common.collect.testing.AbstractContainerTester: java.util.List getOrderedElements()>();
interfaceinvoke v4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v3);
return v3;
}
protected com.google.common.collect.testing.AbstractContainerTester$ArrayWithDuplicate createArrayWithDuplicateElement()
{
com.google.common.collect.testing.AbstractContainerTester v0;
java.lang.Object[] v1;
int v2, v3, v4, v6, v7, v8;
java.lang.Object v5;
com.google.common.collect.testing.AbstractContainerTester$ArrayWithDuplicate v9;
v0 := @this: com.google.common.collect.testing.AbstractContainerTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.AbstractContainerTester: java.lang.Object[] createSamplesArray()>();
v2 = lengthof v1;
v3 = v2 / 2;
v4 = v3 - 1;
v5 = v1[v4];
v6 = lengthof v1;
v7 = v6 / 2;
v8 = v7 + 1;
v1[v8] = v5;
v9 = new com.google.common.collect.testing.AbstractContainerTester$ArrayWithDuplicate;
specialinvoke v9.<com.google.common.collect.testing.AbstractContainerTester$ArrayWithDuplicate: void <init>(java.lang.Object[],java.lang.Object)>(v1, v5);
return v9;
}
protected int getNumElements()
{
com.google.common.collect.testing.AbstractContainerTester v0;
int v3;
java.lang.Object v1;
com.google.common.collect.testing.features.CollectionSize v2;
v0 := @this: com.google.common.collect.testing.AbstractContainerTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.AbstractContainerTester: java.lang.Object getSubjectGenerator()>();
v2 = interfaceinvoke v1.<com.google.common.collect.testing.OneSizeTestContainerGenerator: com.google.common.collect.testing.features.CollectionSize getCollectionSize()>();
v3 = virtualinvoke v2.<com.google.common.collect.testing.features.CollectionSize: int getNumElements()>();
return v3;
}
protected java.util.Collection getSampleElements(int)
{
com.google.common.collect.testing.AbstractContainerTester v0;
java.util.Collection v3;
int v1;
java.lang.Object v2;
v0 := @this: com.google.common.collect.testing.AbstractContainerTester;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<com.google.common.collect.testing.AbstractContainerTester: java.lang.Object getSubjectGenerator()>();
v3 = interfaceinvoke v2.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.util.Collection getSampleElements(int)>(v1);
return v3;
}
protected java.util.Collection getSampleElements()
{
int v1;
com.google.common.collect.testing.AbstractContainerTester v0;
java.util.Collection v2;
v0 := @this: com.google.common.collect.testing.AbstractContainerTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.AbstractContainerTester: int getNumElements()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.AbstractContainerTester: java.util.Collection getSampleElements(int)>(v1);
return v2;
}
protected java.util.List getOrderedElements()
{
com.google.common.collect.testing.AbstractContainerTester v0;
java.util.Iterator v6;
java.util.Collection v4;
java.lang.Iterable v5;
java.util.ArrayList v1, v3;
java.util.List v9;
java.lang.Object v2, v8;
boolean v7;
v0 := @this: com.google.common.collect.testing.AbstractContainerTester;
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.AbstractContainerTester: java.lang.Object getSubjectGenerator()>();
v3 = new java.util.ArrayList;
v4 = virtualinvoke v0.<com.google.common.collect.testing.AbstractContainerTester: java.util.Collection getSampleElements()>();
specialinvoke v3.<java.util.ArrayList: void <init>(java.util.Collection)>(v4);
v5 = interfaceinvoke v2.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.lang.Iterable order(java.util.List)>(v3);
v6 = interfaceinvoke v5.<java.lang.Iterable: java.util.Iterator iterator()>();
label1:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label2;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v8);
goto label1;
label2:
v9 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(v1);
return v9;
}
protected int getNullLocation()
{
int v1, v2;
com.google.common.collect.testing.AbstractContainerTester v0;
v0 := @this: com.google.common.collect.testing.AbstractContainerTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.AbstractContainerTester: int getNumElements()>();
v2 = v1 / 2;
return v2;
}
protected com.google.common.collect.testing.MinimalCollection createDisjointCollection()
{
com.google.common.collect.testing.AbstractContainerTester v0;
java.lang.Object[] v1;
java.lang.Object v2, v3;
com.google.common.collect.testing.MinimalCollection v4;
v0 := @this: com.google.common.collect.testing.AbstractContainerTester;
v1 = newarray (java.lang.Object)[2];
v2 = virtualinvoke v0.<com.google.common.collect.testing.AbstractContainerTester: java.lang.Object e3()>();
v1[0] = v2;
v3 = virtualinvoke v0.<com.google.common.collect.testing.AbstractContainerTester: java.lang.Object e4()>();
v1[1] = v3;
v4 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v1);
return v4;
}
protected com.google.common.collect.testing.MinimalCollection emptyCollection()
{
com.google.common.collect.testing.AbstractContainerTester v0;
com.google.common.collect.testing.MinimalCollection v2;
java.lang.Object[] v1;
v0 := @this: com.google.common.collect.testing.AbstractContainerTester;
v1 = newarray (java.lang.Object)[0];
v2 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v1);
return v2;
}
protected final java.lang.Object e0()
{
com.google.common.collect.testing.AbstractContainerTester v0;
java.lang.Object v2;
com.google.common.collect.testing.SampleElements v1;
v0 := @this: com.google.common.collect.testing.AbstractContainerTester;
v1 = v0.<com.google.common.collect.testing.AbstractContainerTester: com.google.common.collect.testing.SampleElements samples>;
v2 = virtualinvoke v1.<com.google.common.collect.testing.SampleElements: java.lang.Object e0()>();
return v2;
}
protected final java.lang.Object e1()
{
com.google.common.collect.testing.AbstractContainerTester v0;
java.lang.Object v2;
com.google.common.collect.testing.SampleElements v1;
v0 := @this: com.google.common.collect.testing.AbstractContainerTester;
v1 = v0.<com.google.common.collect.testing.AbstractContainerTester: com.google.common.collect.testing.SampleElements samples>;
v2 = virtualinvoke v1.<com.google.common.collect.testing.SampleElements: java.lang.Object e1()>();
return v2;
}
protected final java.lang.Object e2()
{
com.google.common.collect.testing.AbstractContainerTester v0;
java.lang.Object v2;
com.google.common.collect.testing.SampleElements v1;
v0 := @this: com.google.common.collect.testing.AbstractContainerTester;
v1 = v0.<com.google.common.collect.testing.AbstractContainerTester: com.google.common.collect.testing.SampleElements samples>;
v2 = virtualinvoke v1.<com.google.common.collect.testing.SampleElements: java.lang.Object e2()>();
return v2;
}
protected final java.lang.Object e3()
{
com.google.common.collect.testing.AbstractContainerTester v0;
java.lang.Object v2;
com.google.common.collect.testing.SampleElements v1;
v0 := @this: com.google.common.collect.testing.AbstractContainerTester;
v1 = v0.<com.google.common.collect.testing.AbstractContainerTester: com.google.common.collect.testing.SampleElements samples>;
v2 = virtualinvoke v1.<com.google.common.collect.testing.SampleElements: java.lang.Object e3()>();
return v2;
}
protected final java.lang.Object e4()
{
com.google.common.collect.testing.AbstractContainerTester v0;
java.lang.Object v2;
com.google.common.collect.testing.SampleElements v1;
v0 := @this: com.google.common.collect.testing.AbstractContainerTester;
v1 = v0.<com.google.common.collect.testing.AbstractContainerTester: com.google.common.collect.testing.SampleElements samples>;
v2 = virtualinvoke v1.<com.google.common.collect.testing.SampleElements: java.lang.Object e4()>();
return v2;
}
}