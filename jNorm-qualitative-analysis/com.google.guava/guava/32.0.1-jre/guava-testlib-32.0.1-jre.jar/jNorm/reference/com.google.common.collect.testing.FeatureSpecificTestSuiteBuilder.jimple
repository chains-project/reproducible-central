public abstract class com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder extends java.lang.Object
{
private java.lang.Object subjectGenerator;
private java.lang.Runnable setUp;
private java.lang.Runnable tearDown;
private final java.util.Set features;
private java.lang.String name;
private final java.util.Set suppressedTests;
private static final java.util.logging.Logger logger;
public void <init>()
{
java.util.HashSet v2;
com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder v0;
java.util.LinkedHashSet v1;
v0 := @this: com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.LinkedHashSet;
specialinvoke v1.<java.util.LinkedHashSet: void <init>()>();
v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.util.Set features> = v1;
v2 = new java.util.HashSet;
specialinvoke v2.<java.util.HashSet: void <init>()>();
v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.util.Set suppressedTests> = v2;
return;
}
protected com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder self()
{
com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder v0;
v0 := @this: com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder;
return v0;
}
protected com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder usingGenerator(java.lang.Object)
{
java.lang.Object v1;
com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder v0, v2;
v0 := @this: com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder;
v1 := @parameter0: java.lang.Object;
v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.lang.Object subjectGenerator> = v1;
v2 = virtualinvoke v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder self()>();
return v2;
}
public java.lang.Object getSubjectGenerator()
{
java.lang.Object v1;
com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder v0;
v0 := @this: com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder;
v1 = v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.lang.Object subjectGenerator>;
return v1;
}
public com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder withSetUp(java.lang.Runnable)
{
com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder v0, v2;
java.lang.Runnable v1;
v0 := @this: com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder;
v1 := @parameter0: java.lang.Runnable;
v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.lang.Runnable setUp> = v1;
v2 = virtualinvoke v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder self()>();
return v2;
}
public java.lang.Runnable getSetUp()
{
com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder v0;
java.lang.Runnable v1;
v0 := @this: com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder;
v1 = v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.lang.Runnable setUp>;
return v1;
}
public com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder withTearDown(java.lang.Runnable)
{
com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder v0, v2;
java.lang.Runnable v1;
v0 := @this: com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder;
v1 := @parameter0: java.lang.Runnable;
v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.lang.Runnable tearDown> = v1;
v2 = virtualinvoke v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder self()>();
return v2;
}
public java.lang.Runnable getTearDown()
{
com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder v0;
java.lang.Runnable v1;
v0 := @this: com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder;
v1 = v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.lang.Runnable tearDown>;
return v1;
}
public transient com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder withFeatures(com.google.common.collect.testing.features.Feature[])
{
java.util.List v2;
com.google.common.collect.testing.features.Feature[] v1;
com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder v0, v3;
v0 := @this: com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder;
v1 := @parameter0: com.google.common.collect.testing.features.Feature[];
v2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
v3 = virtualinvoke v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder withFeatures(java.lang.Iterable)>(v2);
return v3;
}
public com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder withFeatures(java.lang.Iterable)
{
java.util.Iterator v2;
java.util.Set v5;
java.lang.Object v4;
com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder v0, v6;
java.lang.Iterable v1;
boolean v3;
v0 := @this: com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder;
v1 := @parameter0: java.lang.Iterable;
v2 = interfaceinvoke v1.<java.lang.Iterable: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.util.Set features>;
interfaceinvoke v5.<java.util.Set: boolean add(java.lang.Object)>(v4);
goto label1;
label2:
v6 = virtualinvoke v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder self()>();
return v6;
}
public java.util.Set getFeatures()
{
java.util.Set v1, v2;
com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder v0;
v0 := @this: com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder;
v1 = v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.util.Set features>;
v2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(v1);
return v2;
}
public com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder named(java.lang.String)
{
java.lang.String v1;
java.lang.IllegalArgumentException v3;
com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder v0, v4;
boolean v2;
v0 := @this: com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v1.<java.lang.String: boolean contains(java.lang.CharSequence)>("(");
if v2 == 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Eclipse hides all characters after \'(\'; please use \'[]\' or other characters instead of parentheses");
throw v3;
label1:
v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.lang.String name> = v1;
v4 = virtualinvoke v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder self()>();
return v4;
}
public java.lang.String getName()
{
java.lang.String v1;
com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder v0;
v0 := @this: com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder;
v1 = v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.lang.String name>;
return v1;
}
public transient com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder suppressing(java.lang.reflect.Method[])
{
java.util.List v2;
com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder v0, v3;
java.lang.reflect.Method[] v1;
v0 := @this: com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder;
v1 := @parameter0: java.lang.reflect.Method[];
v2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
v3 = virtualinvoke v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder suppressing(java.util.Collection)>(v2);
return v3;
}
public com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder suppressing(java.util.Collection)
{
java.util.Collection v1;
java.util.Set v2;
com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder v0, v3;
v0 := @this: com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder;
v1 := @parameter0: java.util.Collection;
v2 = v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.util.Set suppressedTests>;
interfaceinvoke v2.<java.util.Set: boolean addAll(java.util.Collection)>(v1);
v3 = virtualinvoke v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder self()>();
return v3;
}
public java.util.Set getSuppressedTests()
{
java.util.Set v1;
com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder v0;
v0 := @this: com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder;
v1 = v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.util.Set suppressedTests>;
return v1;
}
public junit.framework.TestSuite createTestSuite()
{
junit.framework.TestSuite v14, v19;
int v20;
java.lang.String v11, v12, v15, v2, v3, v6, v7;
boolean v17;
java.util.Iterator v16;
java.util.Set v10, v5, v8;
java.util.logging.Logger v1, v4, v9;
java.util.List v13;
java.lang.Object v18;
com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder v0;
v0 := @this: com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder;
virtualinvoke v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: void checkCanCreate()>();
v1 = <com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.util.logging.Logger logger>;
v2 = v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.lang.String name>;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>(" Testing: \u0001");
virtualinvoke v1.<java.util.logging.Logger: void fine(java.lang.String)>(v3);
v4 = <com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.util.logging.Logger logger>;
v5 = v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.util.Set features>;
v6 = staticinvoke <com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.lang.String formatFeatureSet(java.util.Set)>(v5);
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Features: \u0001");
virtualinvoke v4.<java.util.logging.Logger: void fine(java.lang.String)>(v7);
v8 = v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.util.Set features>;
staticinvoke <com.google.common.collect.testing.features.FeatureUtil: java.util.Set addImpliedFeatures(java.util.Set)>(v8);
v9 = <com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.util.logging.Logger logger>;
v10 = v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.util.Set features>;
v11 = staticinvoke <com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.lang.String formatFeatureSet(java.util.Set)>(v10);
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Expanded: \u0001");
virtualinvoke v9.<java.util.logging.Logger: void fine(java.lang.String)>(v12);
v13 = virtualinvoke v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.util.List getTesters()>();
v14 = new junit.framework.TestSuite;
v15 = v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.lang.String name>;
specialinvoke v14.<junit.framework.TestSuite: void <init>(java.lang.String)>(v15);
v16 = interfaceinvoke v13.<java.util.List: java.util.Iterator iterator()>();
label1:
v17 = interfaceinvoke v16.<java.util.Iterator: boolean hasNext()>();
if v17 == 0 goto label2;
v18 = interfaceinvoke v16.<java.util.Iterator: java.lang.Object next()>();
v19 = virtualinvoke v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: junit.framework.TestSuite makeSuiteForTesterClass(java.lang.Class)>(v18);
v20 = virtualinvoke v19.<junit.framework.TestSuite: int countTestCases()>();
if v20 <= 0 goto label1;
virtualinvoke v14.<junit.framework.TestSuite: void addTest(junit.framework.Test)>(v19);
goto label1;
label2:
return v14;
}
protected void checkCanCreate()
{
java.lang.IllegalStateException v2, v4, v6;
java.util.Set v5;
java.lang.Object v1;
java.lang.String v3;
com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder v0;
v0 := @this: com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder;
v1 = v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.lang.Object subjectGenerator>;
if v1 != null goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Call using() before createTestSuite().");
throw v2;
label1:
v3 = v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.lang.String name>;
if v3 != null goto label2;
v4 = new java.lang.IllegalStateException;
specialinvoke v4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Call named() before createTestSuite().");
throw v4;
label2:
v5 = v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.util.Set features>;
if v5 != null goto label3;
v6 = new java.lang.IllegalStateException;
specialinvoke v6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Call withFeatures() before createTestSuite().");
throw v6;
label3:
return;
}
protected abstract java.util.List getTesters();
private boolean matches(junit.framework.Test)
{
com.google.common.collect.testing.features.TesterRequirements v13;
java.lang.reflect.Method v2;
boolean v18, v21, v30, v33, v9;
java.util.Set v16, v17, v22, v23, v24, v28, v29, v34, v35, v36, v8;
java.util.logging.Logger v10, v19, v25, v31, v37, v4;
java.lang.Object[] v11, v26, v38, v5;
junit.framework.Test v1;
java.util.logging.Level v20, v32;
com.google.common.collect.testing.features.ConflictingRequirementsException v14;
java.lang.String v12, v27, v39, v6, v7;
java.lang.RuntimeException v15;
java.lang.IllegalArgumentException v3;
com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder v0;
v0 := @this: com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder;
v1 := @parameter0: junit.framework.Test;
label01:
v2 = staticinvoke <com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.lang.reflect.Method extractMethod(junit.framework.Test)>(v1);
label02:
goto label04;
label03:
v3 := @caughtexception;
v4 = <com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.util.logging.Logger logger>;
v5 = newarray (java.lang.Object)[2];
v5[0] = v1;
v6 = virtualinvoke v3.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();
v5[1] = v6;
v7 = staticinvoke <com.google.common.collect.testing.Platform: java.lang.String format(java.lang.String,java.lang.Object[])>("%s: including by default: %s", v5);
virtualinvoke v4.<java.util.logging.Logger: void finer(java.lang.String)>(v7);
return 1;
label04:
v8 = v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.util.Set suppressedTests>;
v9 = interfaceinvoke v8.<java.util.Set: boolean contains(java.lang.Object)>(v2);
if v9 == 0 goto label05;
v10 = <com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.util.logging.Logger logger>;
v11 = newarray (java.lang.Object)[1];
v11[0] = v1;
v12 = staticinvoke <com.google.common.collect.testing.Platform: java.lang.String format(java.lang.String,java.lang.Object[])>("%s: excluding because it was explicitly suppressed.", v11);
virtualinvoke v10.<java.util.logging.Logger: void finer(java.lang.String)>(v12);
return 0;
label05:
v13 = staticinvoke <com.google.common.collect.testing.features.FeatureUtil: com.google.common.collect.testing.features.TesterRequirements getTesterRequirements(java.lang.reflect.Method)>(v2);
label06:
goto label08;
label07:
v14 := @caughtexception;
v15 = new java.lang.RuntimeException;
specialinvoke v15.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(v14);
throw v15;
label08:
v16 = v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.util.Set features>;
v17 = virtualinvoke v13.<com.google.common.collect.testing.features.TesterRequirements: java.util.Set getPresentFeatures()>();
v18 = interfaceinvoke v16.<java.util.Set: boolean containsAll(java.util.Collection)>(v17);
if v18 != 0 goto label10;
v19 = <com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.util.logging.Logger logger>;
v20 = <java.util.logging.Level: java.util.logging.Level FINER>;
v21 = virtualinvoke v19.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>(v20);
if v21 == 0 goto label09;
v22 = virtualinvoke v13.<com.google.common.collect.testing.features.TesterRequirements: java.util.Set getPresentFeatures()>();
v23 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Set copyToSet(java.lang.Iterable)>(v22);
v24 = v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.util.Set features>;
interfaceinvoke v23.<java.util.Set: boolean removeAll(java.util.Collection)>(v24);
v25 = <com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.util.logging.Logger logger>;
v26 = newarray (java.lang.Object)[2];
v26[0] = v2;
v26[1] = v23;
v27 = staticinvoke <com.google.common.collect.testing.Platform: java.lang.String format(java.lang.String,java.lang.Object[])>("%s: skipping because these features are absent: %s", v26);
virtualinvoke v25.<java.util.logging.Logger: void finer(java.lang.String)>(v27);
label09:
return 0;
label10:
v28 = v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.util.Set features>;
v29 = virtualinvoke v13.<com.google.common.collect.testing.features.TesterRequirements: java.util.Set getAbsentFeatures()>();
v30 = staticinvoke <com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: boolean intersect(java.util.Set,java.util.Set)>(v28, v29);
if v30 == 0 goto label12;
v31 = <com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.util.logging.Logger logger>;
v32 = <java.util.logging.Level: java.util.logging.Level FINER>;
v33 = virtualinvoke v31.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>(v32);
if v33 == 0 goto label11;
v34 = virtualinvoke v13.<com.google.common.collect.testing.features.TesterRequirements: java.util.Set getAbsentFeatures()>();
v35 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Set copyToSet(java.lang.Iterable)>(v34);
v36 = v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.util.Set features>;
interfaceinvoke v35.<java.util.Set: boolean retainAll(java.util.Collection)>(v36);
v37 = <com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.util.logging.Logger logger>;
v38 = newarray (java.lang.Object)[2];
v38[0] = v2;
v38[1] = v35;
v39 = staticinvoke <com.google.common.collect.testing.Platform: java.lang.String format(java.lang.String,java.lang.Object[])>("%s: skipping because these features are present: %s", v38);
virtualinvoke v37.<java.util.logging.Logger: void finer(java.lang.String)>(v39);
label11:
return 0;
label12:
return 1;
catch java.lang.IllegalArgumentException from label01 to label02 with label03;
catch com.google.common.collect.testing.features.ConflictingRequirementsException from label05 to label06 with label07;
}
private static boolean intersect(java.util.Set, java.util.Set)
{
java.util.Set v0, v1;
boolean v2, v3;
v0 := @parameter0: java.util.Set;
v1 := @parameter1: java.util.Set;
v2 = staticinvoke <java.util.Collections: boolean disjoint(java.util.Collection,java.util.Collection)>(v0, v1);
if v2 != 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
private static java.lang.reflect.Method extractMethod(junit.framework.Test)
{
junit.framework.Test v0;
java.lang.IllegalArgumentException v9;
java.lang.Class v2, v6;
java.lang.String v3, v7;
java.lang.reflect.Method v4, v8;
boolean v1, v5;
v0 := @parameter0: junit.framework.Test;
v1 = v0 instanceof com.google.common.collect.testing.AbstractTester;
if v1 == 0 goto label1;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.AbstractTester: java.lang.String getTestMethodName()>();
v4 = staticinvoke <com.google.common.collect.testing.Helpers: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String)>(v2, v3);
return v4;
label1:
v5 = v0 instanceof junit.framework.TestCase;
if v5 == 0 goto label2;
v6 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v7 = virtualinvoke v0.<junit.framework.TestCase: java.lang.String getName()>();
v8 = staticinvoke <com.google.common.collect.testing.Helpers: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String)>(v6, v7);
return v8;
label2:
v9 = new java.lang.IllegalArgumentException;
specialinvoke v9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unable to extract method from test: not a TestCase.");
throw v9;
}
protected junit.framework.TestSuite makeSuiteForTesterClass(java.lang.Class)
{
java.util.Enumeration v4;
java.lang.Runnable v10, v11;
junit.framework.TestSuite v2, v3;
java.lang.Class v1;
java.lang.Object v6, v8;
java.lang.String v9;
com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder v0;
boolean v5, v7;
v0 := @this: com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder;
v1 := @parameter0: java.lang.Class;
v2 = new junit.framework.TestSuite;
specialinvoke v2.<junit.framework.TestSuite: void <init>(java.lang.Class)>(v1);
v3 = specialinvoke v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: junit.framework.TestSuite filterSuite(junit.framework.TestSuite)>(v2);
v4 = virtualinvoke v3.<junit.framework.TestSuite: java.util.Enumeration tests()>();
label1:
v5 = interfaceinvoke v4.<java.util.Enumeration: boolean hasMoreElements()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Enumeration: java.lang.Object nextElement()>();
v7 = v6 instanceof com.google.common.collect.testing.AbstractTester;
if v7 == 0 goto label1;
v8 = v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.lang.Object subjectGenerator>;
v9 = v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.lang.String name>;
v10 = v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.lang.Runnable setUp>;
v11 = v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.lang.Runnable tearDown>;
virtualinvoke v6.<com.google.common.collect.testing.AbstractTester: void init(java.lang.Object,java.lang.String,java.lang.Runnable,java.lang.Runnable)>(v8, v9, v10, v11);
goto label1;
label2:
return v3;
}
private junit.framework.TestSuite filterSuite(junit.framework.TestSuite)
{
java.util.Enumeration v4;
junit.framework.TestSuite v1, v2;
java.lang.Object v6;
java.lang.String v3;
com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder v0;
boolean v5, v7;
v0 := @this: com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder;
v1 := @parameter0: junit.framework.TestSuite;
v2 = new junit.framework.TestSuite;
v3 = virtualinvoke v1.<junit.framework.TestSuite: java.lang.String getName()>();
specialinvoke v2.<junit.framework.TestSuite: void <init>(java.lang.String)>(v3);
v4 = virtualinvoke v1.<junit.framework.TestSuite: java.util.Enumeration tests()>();
label1:
v5 = interfaceinvoke v4.<java.util.Enumeration: boolean hasMoreElements()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Enumeration: java.lang.Object nextElement()>();
v7 = specialinvoke v0.<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: boolean matches(junit.framework.Test)>(v6);
if v7 == 0 goto label1;
virtualinvoke v2.<junit.framework.TestSuite: void addTest(junit.framework.Test)>(v6);
goto label1;
label2:
return v2;
}
protected static java.lang.String formatFeatureSet(java.util.Set)
{
java.util.Iterator v2;
java.util.Set v0;
java.util.ArrayList v1;
java.lang.Class v6;
java.lang.Object v4;
java.lang.String v10, v7, v8, v9;
boolean v3, v5;
v0 := @parameter0: java.util.Set;
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v2 = interfaceinvoke v0.<java.util.Set: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label3;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = v4 instanceof java.lang.Enum;
if v5 == 0 goto label2;
v6 = virtualinvoke v4.<java.lang.Enum: java.lang.Class getDeclaringClass()>();
v7 = virtualinvoke v6.<java.lang.Class: java.lang.String getSimpleName()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,com.google.common.collect.testing.features.Feature)>(v7, v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.\u0001");
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v8);
goto label1;
label2:
v9 = virtualinvoke v4.<java.lang.Object: java.lang.String toString()>();
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v9);
goto label1;
label3:
v10 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
return v10;
}
static void <clinit>()
{
java.lang.Class v0;
java.lang.String v1;
java.util.logging.Logger v2;
v0 = class "Lcom/google/common/collect/testing/FeatureSpecificTestSuiteBuilder;";
v1 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>(v1);
<com.google.common.collect.testing.FeatureSpecificTestSuiteBuilder: java.util.logging.Logger logger> = v2;
return;
}
}