public class com.google.common.collect.testing.Helpers extends java.lang.Object
{
private static final java.util.Comparator NATURAL_ORDER;
public void <init>()
{
com.google.common.collect.testing.Helpers v0;
v0 := @this: com.google.common.collect.testing.Helpers;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static boolean equal(java.lang.Object, java.lang.Object)
{
java.lang.Object v0, v1;
boolean v2, v3;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
if v0 == v1 goto label1;
if v0 == null goto label2;
v2 = virtualinvoke v0.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v2 == 0 goto label2;
label1:
v3 = 1;
goto label3;
label2:
v3 = 0;
label3:
return v3;
}
public static java.util.List copyToList(java.lang.Iterable)
{
java.lang.Iterable v0;
java.util.ArrayList v1;
v0 := @parameter0: java.lang.Iterable;
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
staticinvoke <com.google.common.collect.testing.Helpers: boolean addAll(java.util.Collection,java.lang.Iterable)>(v1, v0);
return v1;
}
public static java.util.List copyToList(java.lang.Object[])
{
java.util.List v1, v2;
java.lang.Object[] v0;
v0 := @parameter0: java.lang.Object[];
v1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v0);
v2 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.List copyToList(java.lang.Iterable)>(v1);
return v2;
}
public static java.util.Set copyToSet(java.lang.Iterable)
{
java.lang.Iterable v0;
java.util.LinkedHashSet v1;
v0 := @parameter0: java.lang.Iterable;
v1 = new java.util.LinkedHashSet;
specialinvoke v1.<java.util.LinkedHashSet: void <init>()>();
staticinvoke <com.google.common.collect.testing.Helpers: boolean addAll(java.util.Collection,java.lang.Iterable)>(v1, v0);
return v1;
}
public static java.util.Set copyToSet(java.lang.Object[])
{
java.util.Set v2;
java.util.List v1;
java.lang.Object[] v0;
v0 := @parameter0: java.lang.Object[];
v1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v0);
v2 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Set copyToSet(java.lang.Iterable)>(v1);
return v2;
}
public static java.util.Map$Entry mapEntry(java.lang.Object, java.lang.Object)
{
java.util.Iterator v4;
java.util.Map v2;
java.util.Set v3;
java.lang.Object v0, v1, v5;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>(v0, v1);
v3 = interfaceinvoke v2.<java.util.Map: java.util.Set entrySet()>();
v4 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
v5 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
return v5;
}
private static boolean isEmpty(java.lang.Iterable)
{
java.util.Iterator v3;
java.lang.Iterable v0;
boolean v1, v2, v4;
v0 := @parameter0: java.lang.Iterable;
v1 = v0 instanceof java.util.Collection;
if v1 == 0 goto label1;
v2 = interfaceinvoke v0.<java.util.Collection: boolean isEmpty()>();
goto label3;
label1:
v3 = interfaceinvoke v0.<java.lang.Iterable: java.util.Iterator iterator()>();
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 != 0 goto label2;
v2 = 1;
goto label3;
label2:
v2 = 0;
label3:
return v2;
}
public static void assertEmpty(java.lang.Iterable)
{
java.lang.String v2;
java.lang.Iterable v0;
boolean v1;
v0 := @parameter0: java.lang.Iterable;
v1 = staticinvoke <com.google.common.collect.testing.Helpers: boolean isEmpty(java.lang.Iterable)>(v0);
if v1 != 0 goto label1;
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Iterable)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Not true that \u0001 is empty");
staticinvoke <junit.framework.Assert: void fail(java.lang.String)>(v2);
label1:
return;
}
public static void assertEmpty(java.util.Map)
{
java.lang.String v2;
boolean v1;
java.util.Map v0;
v0 := @parameter0: java.util.Map;
v1 = interfaceinvoke v0.<java.util.Map: boolean isEmpty()>();
if v1 != 0 goto label1;
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.util.Map)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Not true that \u0001 is empty");
staticinvoke <junit.framework.Assert: void fail(java.lang.String)>(v2);
label1:
return;
}
public static void assertEqualInOrder(java.lang.Iterable, java.lang.Iterable)
{
java.util.Iterator v2, v3;
java.lang.Iterable v0, v1;
java.lang.Object v6, v7;
java.lang.String v12, v9;
boolean v10, v11, v4, v5, v8;
v0 := @parameter0: java.lang.Iterable;
v1 := @parameter1: java.lang.Iterable;
v2 = interfaceinvoke v0.<java.lang.Iterable: java.util.Iterator iterator()>();
v3 = interfaceinvoke v1.<java.lang.Iterable: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v7 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v8 = staticinvoke <com.google.common.collect.testing.Helpers: boolean equal(java.lang.Object,java.lang.Object)>(v6, v7);
if v8 != 0 goto label1;
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Iterable,java.lang.Iterable)>(v0, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("contents were not equal and in the same order: expected = \u0001, actual = \u0001");
staticinvoke <junit.framework.Assert: void fail(java.lang.String)>(v9);
goto label1;
label2:
v10 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v10 != 0 goto label3;
v11 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v11 == 0 goto label4;
label3:
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Iterable,java.lang.Iterable)>(v0, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("contents were not equal and in the same order: expected = \u0001, actual = \u0001");
staticinvoke <junit.framework.Assert: void fail(java.lang.String)>(v12);
label4:
return;
}
public static transient void assertContentsInOrder(java.lang.Iterable, java.lang.Object[])
{
java.util.List v2;
java.lang.Object[] v1;
java.lang.Iterable v0;
v0 := @parameter0: java.lang.Iterable;
v1 := @parameter1: java.lang.Object[];
v2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
staticinvoke <com.google.common.collect.testing.Helpers: void assertEqualInOrder(java.lang.Iterable,java.lang.Iterable)>(v2, v0);
return;
}
public static void assertEqualIgnoringOrder(java.lang.Iterable, java.lang.Iterable)
{
java.util.Iterator v5;
java.lang.Iterable v0, v1;
java.util.List v2, v3;
java.lang.Object v7;
java.lang.String v10, v4, v9;
boolean v11, v6, v8;
v0 := @parameter0: java.lang.Iterable;
v1 := @parameter1: java.lang.Iterable;
v2 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.List copyToList(java.lang.Iterable)>(v0);
v3 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.List copyToList(java.lang.Iterable)>(v1);
v4 = virtualinvoke v3.<java.lang.Object: java.lang.String toString()>();
v5 = interfaceinvoke v2.<java.util.List: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label2;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = interfaceinvoke v3.<java.util.List: boolean remove(java.lang.Object)>(v7);
if v8 != 0 goto label1;
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object,java.util.List,java.lang.String)>(v7, v2, v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("did not contain expected element \u0001, expected = \u0001, actual = \u0001");
staticinvoke <junit.framework.Assert: void fail(java.lang.String)>(v9);
goto label1;
label2:
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.util.List)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unexpected elements: \u0001");
v11 = interfaceinvoke v3.<java.util.List: boolean isEmpty()>();
staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>(v10, v11);
return;
}
public static transient void assertContentsAnyOrder(java.lang.Iterable, java.lang.Object[])
{
java.util.List v2;
java.lang.Object[] v1;
java.lang.Iterable v0;
v0 := @parameter0: java.lang.Iterable;
v1 := @parameter1: java.lang.Object[];
v2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
staticinvoke <com.google.common.collect.testing.Helpers: void assertEqualIgnoringOrder(java.lang.Iterable,java.lang.Iterable)>(v2, v0);
return;
}
public static void assertContains(java.lang.Iterable, java.lang.Object)
{
java.util.Iterator v4;
java.lang.Iterable v0;
java.lang.Object v1, v6;
java.lang.String v8;
boolean v2, v3, v5, v7;
v0 := @parameter0: java.lang.Iterable;
v1 := @parameter1: java.lang.Object;
v2 = 0;
v3 = v0 instanceof java.util.Collection;
if v3 == 0 goto label1;
v2 = interfaceinvoke v0.<java.util.Collection: boolean contains(java.lang.Object)>(v1);
goto label3;
label1:
v4 = interfaceinvoke v0.<java.lang.Iterable: java.util.Iterator iterator()>();
label2:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label3;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = staticinvoke <com.google.common.collect.testing.Helpers: boolean equal(java.lang.Object,java.lang.Object)>(v6, v1);
if v7 == 0 goto label2;
v2 = 1;
label3:
if v2 != 0 goto label4;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Iterable,java.lang.Object)>(v0, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Not true that \u0001 contains \u0001");
staticinvoke <junit.framework.Assert: void fail(java.lang.String)>(v8);
label4:
return;
}
public static transient void assertContainsAllOf(java.lang.Iterable, java.lang.Object[])
{
java.lang.Object[] v1;
java.util.Iterator v4;
java.lang.Iterable v0;
java.util.ArrayList v2;
java.util.List v3, v8;
java.lang.Object v6;
java.lang.String v9;
boolean v5, v7;
v0 := @parameter0: java.lang.Iterable;
v1 := @parameter1: java.lang.Object[];
v2 = new java.util.ArrayList;
v3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
specialinvoke v2.<java.util.ArrayList: void <init>(java.util.Collection)>(v3);
v4 = interfaceinvoke v0.<java.lang.Iterable: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v2.<java.util.List: boolean remove(java.lang.Object)>(v6);
goto label1;
label2:
v7 = interfaceinvoke v2.<java.util.List: boolean isEmpty()>();
if v7 != 0 goto label3;
v8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Iterable,java.util.List)>(v0, v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Not true that \u0001 contains all of \u0001");
staticinvoke <junit.framework.Assert: void fail(java.lang.String)>(v9);
label3:
return;
}
public static boolean addAll(java.util.Collection, java.lang.Iterable)
{
java.util.Iterator v3;
java.util.Collection v0;
java.lang.Object v5;
java.lang.Iterable v1;
boolean v2, v4, v6;
v0 := @parameter0: java.util.Collection;
v1 := @parameter1: java.lang.Iterable;
v2 = 0;
v3 = interfaceinvoke v1.<java.lang.Iterable: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = interfaceinvoke v0.<java.util.Collection: boolean add(java.lang.Object)>(v5);
v2 = v2 | v6;
goto label1;
label2:
return v2;
}
static java.lang.Iterable reverse(java.util.List)
{
java.util.List v0;
com.google.common.collect.testing.Helpers$1 v1;
v0 := @parameter0: java.util.List;
v1 = new com.google.common.collect.testing.Helpers$1;
specialinvoke v1.<com.google.common.collect.testing.Helpers$1: void <init>(java.util.List)>(v0);
return v1;
}
static java.util.Iterator cycle(java.lang.Iterable)
{
com.google.common.collect.testing.Helpers$2 v1;
java.lang.Iterable v0;
v0 := @parameter0: java.lang.Iterable;
v1 = new com.google.common.collect.testing.Helpers$2;
specialinvoke v1.<com.google.common.collect.testing.Helpers$2: void <init>(java.lang.Iterable)>(v0);
return v1;
}
static java.lang.Object get(java.util.Iterator, int)
{
java.util.Iterator v0;
int v1, v2;
java.lang.Object v3;
v0 := @parameter0: java.util.Iterator;
v1 := @parameter1: int;
v2 = 0;
label1:
if v2 >= v1 goto label2;
interfaceinvoke v0.<java.util.Iterator: java.lang.Object next()>();
v2 = v2 + 1;
goto label1;
label2:
v3 = interfaceinvoke v0.<java.util.Iterator: java.lang.Object next()>();
return v3;
}
static void fail(java.lang.Throwable, java.lang.Object)
{
java.lang.Throwable v0;
java.lang.Object v1;
junit.framework.AssertionFailedError v2;
java.lang.String v3;
v0 := @parameter0: java.lang.Throwable;
v1 := @parameter1: java.lang.Object;
v2 = new junit.framework.AssertionFailedError;
v3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(v1);
specialinvoke v2.<junit.framework.AssertionFailedError: void <init>(java.lang.String)>(v3);
virtualinvoke v2.<junit.framework.AssertionFailedError: java.lang.Throwable initCause(java.lang.Throwable)>(v0);
throw v2;
}
public static java.util.Comparator entryComparator(java.util.Comparator)
{
java.util.Comparator v0;
com.google.common.collect.testing.Helpers$EntryComparator v1;
v0 := @parameter0: java.util.Comparator;
v1 = new com.google.common.collect.testing.Helpers$EntryComparator;
specialinvoke v1.<com.google.common.collect.testing.Helpers$EntryComparator: void <init>(java.util.Comparator)>(v0);
return v1;
}
public static transient void testComparator(java.util.Comparator, java.lang.Object[])
{
java.util.List v2;
java.lang.Object[] v1;
java.util.Comparator v0;
v0 := @parameter0: java.util.Comparator;
v1 := @parameter1: java.lang.Object[];
v2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
staticinvoke <com.google.common.collect.testing.Helpers: void testComparator(java.util.Comparator,java.util.List)>(v0, v2);
return;
}
public static void testComparator(java.util.Comparator, java.util.List)
{
int v11, v12, v13, v16, v2, v3, v5, v8;
java.lang.String v10, v15, v7;
boolean v17, v9;
java.util.List v1;
java.lang.Object v14, v4, v6;
java.util.Comparator v0;
v0 := @parameter0: java.util.Comparator;
v1 := @parameter1: java.util.List;
v2 = 0;
label01:
v3 = interfaceinvoke v1.<java.util.List: int size()>();
if v2 >= v3 goto label10;
v4 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(v2);
v5 = 0;
label02:
if v5 >= v2 goto label05;
v6 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(v5);
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.util.Comparator,java.lang.Object,java.lang.Object)>(v0, v6, v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.compare(\u0001, \u0001)");
v8 = interfaceinvoke v0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(v6, v4);
if v8 >= 0 goto label03;
v9 = 1;
goto label04;
label03:
v9 = 0;
label04:
staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>(v7, v9);
v5 = v5 + 1;
goto label02;
label05:
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.util.Comparator,java.lang.Object,java.lang.Object)>(v0, v4, v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.compare(\u0001, \u0001)");
v11 = interfaceinvoke v0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(v4, v4);
staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>(v10, 0, v11);
v12 = v2 + 1;
label06:
v13 = interfaceinvoke v1.<java.util.List: int size()>();
if v12 >= v13 goto label09;
v14 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(v12);
v15 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.util.Comparator,java.lang.Object,java.lang.Object)>(v0, v14, v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.compare(\u0001, \u0001)");
v16 = interfaceinvoke v0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(v14, v4);
if v16 <= 0 goto label07;
v17 = 1;
goto label08;
label07:
v17 = 0;
label08:
staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>(v15, v17);
v12 = v12 + 1;
goto label06;
label09:
v2 = v2 + 1;
goto label01;
label10:
return;
}
public static void testCompareToAndEquals(java.util.List)
{
int v1, v11, v13, v14, v17, v2, v4, v7;
java.lang.String v10, v16, v6;
boolean v12, v18, v19, v8, v9;
java.util.List v0;
java.lang.Comparable v20, v21;
java.lang.Object v15, v3, v5;
v0 := @parameter0: java.util.List;
v1 = 0;
label01:
v2 = interfaceinvoke v0.<java.util.List: int size()>();
if v1 >= v2 goto label10;
v3 = interfaceinvoke v0.<java.util.List: java.lang.Object get(int)>(v1);
v4 = 0;
label02:
if v4 >= v1 goto label05;
v5 = interfaceinvoke v0.<java.util.List: java.lang.Object get(int)>(v4);
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object,java.lang.Comparable)>(v5, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.compareTo(\u0001)");
v7 = interfaceinvoke v20.<java.lang.Comparable: int compareTo(java.lang.Object)>(v3);
if v7 >= 0 goto label03;
v8 = 1;
goto label04;
label03:
v8 = 0;
label04:
staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>(v6, v8);
v9 = virtualinvoke v20.<java.lang.Object: boolean equals(java.lang.Object)>(v3);
staticinvoke <junit.framework.Assert: void assertFalse(boolean)>(v9);
v4 = v4 + 1;
goto label02;
label05:
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Comparable,java.lang.Comparable)>(v3, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.compareTo(\u0001)");
v11 = interfaceinvoke v3.<java.lang.Comparable: int compareTo(java.lang.Object)>(v3);
staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>(v10, 0, v11);
v12 = virtualinvoke v3.<java.lang.Object: boolean equals(java.lang.Object)>(v3);
staticinvoke <junit.framework.Assert: void assertTrue(boolean)>(v12);
v13 = v1 + 1;
label06:
v14 = interfaceinvoke v0.<java.util.List: int size()>();
if v13 >= v14 goto label09;
v15 = interfaceinvoke v0.<java.util.List: java.lang.Object get(int)>(v13);
v16 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object,java.lang.Comparable)>(v15, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.compareTo(\u0001)");
v17 = interfaceinvoke v21.<java.lang.Comparable: int compareTo(java.lang.Object)>(v3);
if v17 <= 0 goto label07;
v18 = 1;
goto label08;
label07:
v18 = 0;
label08:
staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>(v16, v18);
v19 = virtualinvoke v21.<java.lang.Object: boolean equals(java.lang.Object)>(v3);
staticinvoke <junit.framework.Assert: void assertFalse(boolean)>(v19);
v13 = v13 + 1;
goto label06;
label09:
v1 = v1 + 1;
goto label01;
label10:
return;
}
public static java.util.Collection misleadingSizeCollection(int)
{
int v0;
com.google.common.collect.testing.Helpers$3 v1;
v0 := @parameter0: int;
v1 = new com.google.common.collect.testing.Helpers$3;
specialinvoke v1.<com.google.common.collect.testing.Helpers$3: void <init>(int)>(v0);
return v1;
}
public static java.util.Map$Entry nefariousMapEntry(java.lang.Object, java.lang.Object)
{
java.lang.Object v0, v1;
com.google.common.collect.testing.Helpers$4 v2;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 = new com.google.common.collect.testing.Helpers$4;
specialinvoke v2.<com.google.common.collect.testing.Helpers$4: void <init>(java.lang.Object,java.lang.Object)>(v0, v1);
return v2;
}
static java.util.List castOrCopyToList(java.lang.Iterable)
{
java.util.Iterator v3;
java.lang.Object v5;
java.lang.Iterable v0;
boolean v1, v4;
java.util.ArrayList v2;
v0 := @parameter0: java.lang.Iterable;
v1 = v0 instanceof java.util.List;
if v1 == 0 goto label1;
return v0;
label1:
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
v3 = interfaceinvoke v0.<java.lang.Iterable: java.util.Iterator iterator()>();
label2:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label3;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v5);
goto label2;
label3:
return v2;
}
public static java.lang.Iterable orderEntriesByKey(java.util.List)
{
java.util.List v0;
java.util.Comparator v1, v2;
v0 := @parameter0: java.util.List;
v1 = <com.google.common.collect.testing.Helpers: java.util.Comparator NATURAL_ORDER>;
v2 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Comparator entryComparator(java.util.Comparator)>(v1);
staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(v0, v2);
return v0;
}
public static java.lang.reflect.Method getMethod(java.lang.Class, java.lang.String)
{
java.lang.Class[] v2;
java.lang.Class v0;
java.lang.String v1;
java.lang.IllegalArgumentException v5;
java.lang.reflect.Method v3;
java.lang.Exception v4;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.String;
label1:
v2 = newarray (java.lang.Class)[0];
v3 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(v1, v2);
label2:
return v3;
label3:
v4 := @caughtexception;
v5 = new java.lang.IllegalArgumentException;
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(v4);
throw v5;
catch java.lang.Exception from label1 to label2 with label3;
}
static void <clinit>()
{
com.google.common.collect.testing.Helpers$5 v0;
v0 = new com.google.common.collect.testing.Helpers$5;
specialinvoke v0.<com.google.common.collect.testing.Helpers$5: void <init>()>();
<com.google.common.collect.testing.Helpers: java.util.Comparator NATURAL_ORDER> = v0;
return;
}
}