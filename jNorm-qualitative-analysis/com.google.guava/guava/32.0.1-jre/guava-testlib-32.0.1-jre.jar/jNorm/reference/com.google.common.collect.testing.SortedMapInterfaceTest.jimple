public abstract class com.google.common.collect.testing.SortedMapInterfaceTest extends com.google.common.collect.testing.MapInterfaceTest
{
protected void <init>(boolean, boolean, boolean, boolean, boolean)
{
com.google.common.collect.testing.SortedMapInterfaceTest v0;
boolean v1, v2, v3, v4, v5;
v0 := @this: com.google.common.collect.testing.SortedMapInterfaceTest;
v1 := @parameter0: boolean;
v2 := @parameter1: boolean;
v3 := @parameter2: boolean;
v4 := @parameter3: boolean;
v5 := @parameter4: boolean;
specialinvoke v0.<com.google.common.collect.testing.MapInterfaceTest: void <init>(boolean,boolean,boolean,boolean,boolean)>(v1, v2, v3, v4, v5);
return;
}
protected abstract java.util.SortedMap makeEmptyMap() throws java.lang.UnsupportedOperationException;
protected abstract java.util.SortedMap makePopulatedMap() throws java.lang.UnsupportedOperationException;
protected java.util.SortedMap makeEitherMap()
{
java.lang.UnsupportedOperationException v2;
com.google.common.collect.testing.SortedMapInterfaceTest v0;
java.util.SortedMap v1, v3;
v0 := @this: com.google.common.collect.testing.SortedMapInterfaceTest;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.SortedMapInterfaceTest: java.util.SortedMap makePopulatedMap()>();
label2:
return v1;
label3:
v2 := @caughtexception;
v3 = virtualinvoke v0.<com.google.common.collect.testing.SortedMapInterfaceTest: java.util.SortedMap makeEmptyMap()>();
return v3;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testTailMapWriteThrough()
{
int v3;
com.google.common.collect.testing.SortedMapInterfaceTest v0;
boolean v4;
java.lang.UnsupportedOperationException v2;
java.util.Iterator v6;
java.util.Set v5;
java.lang.IllegalArgumentException v15;
java.lang.Object v11, v12, v13, v14, v7, v8, v9;
java.util.SortedMap v1, v10;
v0 := @this: com.google.common.collect.testing.SortedMapInterfaceTest;
label01:
v1 = virtualinvoke v0.<com.google.common.collect.testing.SortedMapInterfaceTest: java.util.SortedMap makePopulatedMap()>();
label02:
goto label04;
label03:
v2 := @caughtexception;
return;
label04:
v3 = interfaceinvoke v1.<java.util.SortedMap: int size()>();
if v3 < 2 goto label05;
v4 = v0.<com.google.common.collect.testing.SortedMapInterfaceTest: boolean supportsPut>;
if v4 != 0 goto label06;
label05:
return;
label06:
v5 = interfaceinvoke v1.<java.util.SortedMap: java.util.Set entrySet()>();
v6 = interfaceinvoke v5.<java.util.Set: java.util.Iterator iterator()>();
v7 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = interfaceinvoke v8.<java.util.Map$Entry: java.lang.Object getKey()>();
v10 = interfaceinvoke v1.<java.util.SortedMap: java.util.SortedMap tailMap(java.lang.Object)>(v9);
v11 = virtualinvoke v0.<com.google.common.collect.testing.SortedMapInterfaceTest: java.lang.Object getValueNotInPopulatedMap()>();
interfaceinvoke v10.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v9, v11);
v12 = interfaceinvoke v8.<java.util.Map$Entry: java.lang.Object getValue()>();
staticinvoke <com.google.common.collect.testing.SortedMapInterfaceTest: void assertEquals(java.lang.Object,java.lang.Object)>(v12, v11);
v13 = interfaceinvoke v1.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>(v9);
staticinvoke <com.google.common.collect.testing.SortedMapInterfaceTest: void assertEquals(java.lang.Object,java.lang.Object)>(v13, v11);
label07:
v14 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getKey()>();
interfaceinvoke v10.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v14, v11);
staticinvoke <com.google.common.collect.testing.SortedMapInterfaceTest: void fail(java.lang.String)>("Expected IllegalArgumentException");
label08:
goto label10;
label09:
v15 := @caughtexception;
label10:
return;
catch java.lang.UnsupportedOperationException from label01 to label02 with label03;
catch java.lang.IllegalArgumentException from label07 to label08 with label09;
}
public void testTailMapRemoveThrough()
{
int v14, v15, v17, v18, v3, v4;
com.google.common.collect.testing.SortedMapInterfaceTest v0;
boolean v16, v5;
java.lang.UnsupportedOperationException v2;
java.util.Iterator v7;
java.util.Set v6;
java.lang.Object v10, v12, v13, v8, v9;
java.util.SortedMap v1, v11;
v0 := @this: com.google.common.collect.testing.SortedMapInterfaceTest;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.SortedMapInterfaceTest: java.util.SortedMap makePopulatedMap()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
return;
label4:
v3 = interfaceinvoke v1.<java.util.SortedMap: int size()>();
v4 = interfaceinvoke v1.<java.util.SortedMap: int size()>();
if v4 < 2 goto label5;
v5 = v0.<com.google.common.collect.testing.SortedMapInterfaceTest: boolean supportsRemove>;
if v5 != 0 goto label6;
label5:
return;
label6:
v6 = interfaceinvoke v1.<java.util.SortedMap: java.util.Set entrySet()>();
v7 = interfaceinvoke v6.<java.util.Set: java.util.Iterator iterator()>();
v8 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
v10 = interfaceinvoke v9.<java.util.Map$Entry: java.lang.Object getKey()>();
v11 = interfaceinvoke v1.<java.util.SortedMap: java.util.SortedMap tailMap(java.lang.Object)>(v10);
interfaceinvoke v11.<java.util.SortedMap: java.lang.Object remove(java.lang.Object)>(v10);
v12 = interfaceinvoke v8.<java.util.Map$Entry: java.lang.Object getKey()>();
v13 = interfaceinvoke v11.<java.util.SortedMap: java.lang.Object remove(java.lang.Object)>(v12);
staticinvoke <com.google.common.collect.testing.SortedMapInterfaceTest: void assertNull(java.lang.Object)>(v13);
v14 = interfaceinvoke v1.<java.util.SortedMap: int size()>();
v15 = v3 - 1;
staticinvoke <com.google.common.collect.testing.SortedMapInterfaceTest: void assertEquals(int,int)>(v14, v15);
v16 = interfaceinvoke v1.<java.util.SortedMap: boolean containsKey(java.lang.Object)>(v10);
staticinvoke <com.google.common.collect.testing.SortedMapInterfaceTest: void assertFalse(boolean)>(v16);
v17 = interfaceinvoke v11.<java.util.SortedMap: int size()>();
v18 = v3 - 2;
staticinvoke <com.google.common.collect.testing.SortedMapInterfaceTest: void assertEquals(int,int)>(v17, v18);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testTailMapClearThrough()
{
java.lang.UnsupportedOperationException v2;
java.util.Iterator v7;
java.util.Set v6;
int v11, v12, v13, v3, v4;
java.lang.Object v8, v9;
com.google.common.collect.testing.SortedMapInterfaceTest v0;
java.util.SortedMap v1, v10;
boolean v14, v5;
v0 := @this: com.google.common.collect.testing.SortedMapInterfaceTest;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.SortedMapInterfaceTest: java.util.SortedMap makePopulatedMap()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
return;
label4:
v3 = interfaceinvoke v1.<java.util.SortedMap: int size()>();
v4 = interfaceinvoke v1.<java.util.SortedMap: int size()>();
if v4 < 2 goto label5;
v5 = v0.<com.google.common.collect.testing.SortedMapInterfaceTest: boolean supportsClear>;
if v5 != 0 goto label6;
label5:
return;
label6:
v6 = interfaceinvoke v1.<java.util.SortedMap: java.util.Set entrySet()>();
v7 = interfaceinvoke v6.<java.util.Set: java.util.Iterator iterator()>();
interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
v8 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
v9 = interfaceinvoke v8.<java.util.Map$Entry: java.lang.Object getKey()>();
v10 = interfaceinvoke v1.<java.util.SortedMap: java.util.SortedMap tailMap(java.lang.Object)>(v9);
v11 = interfaceinvoke v10.<java.util.SortedMap: int size()>();
interfaceinvoke v10.<java.util.SortedMap: void clear()>();
v12 = interfaceinvoke v1.<java.util.SortedMap: int size()>();
v13 = v3 - v11;
staticinvoke <com.google.common.collect.testing.SortedMapInterfaceTest: void assertEquals(int,int)>(v12, v13);
v14 = interfaceinvoke v10.<java.util.SortedMap: boolean isEmpty()>();
staticinvoke <com.google.common.collect.testing.SortedMapInterfaceTest: void assertTrue(boolean)>(v14);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
}