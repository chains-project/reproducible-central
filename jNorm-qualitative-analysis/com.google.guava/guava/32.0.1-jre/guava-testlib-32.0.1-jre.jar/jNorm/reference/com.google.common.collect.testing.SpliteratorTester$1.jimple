class com.google.common.collect.testing.SpliteratorTester$1 extends java.lang.Object implements com.google.common.collect.testing.SpliteratorTester$Ordered
{
final java.util.List val$resultsForAllStrategies;
final java.lang.Iterable val$elements;
void <init>(com.google.common.collect.testing.SpliteratorTester, java.util.List, java.lang.Iterable)
{
java.util.List v2;
com.google.common.collect.testing.SpliteratorTester$1 v0;
com.google.common.collect.testing.SpliteratorTester v1;
java.lang.Iterable v3;
v0 := @this: com.google.common.collect.testing.SpliteratorTester$1;
v1 := @parameter0: com.google.common.collect.testing.SpliteratorTester;
v2 := @parameter1: java.util.List;
v3 := @parameter2: java.lang.Iterable;
v0.<com.google.common.collect.testing.SpliteratorTester$1: java.util.List val$resultsForAllStrategies> = v2;
v0.<com.google.common.collect.testing.SpliteratorTester$1: java.lang.Iterable val$elements> = v3;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void inOrder()
{
java.util.List v1;
java.util.Iterator v2;
com.google.common.collect.testing.SpliteratorTester$1 v0;
java.lang.Object v4;
java.lang.Iterable v5;
boolean v3;
v0 := @this: com.google.common.collect.testing.SpliteratorTester$1;
v1 = v0.<com.google.common.collect.testing.SpliteratorTester$1: java.util.List val$resultsForAllStrategies>;
v2 = interfaceinvoke v1.<java.util.List: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = v0.<com.google.common.collect.testing.SpliteratorTester$1: java.lang.Iterable val$elements>;
staticinvoke <com.google.common.collect.testing.Helpers: void assertEqualInOrder(java.lang.Iterable,java.lang.Iterable)>(v5, v4);
goto label1;
label2:
return;
}
}