public final class com.google.common.collect.testing.SpliteratorTester extends java.lang.Object
{
private final com.google.common.collect.ImmutableSet spliteratorSuppliers;
private static com.google.common.collect.testing.SpliteratorTester$GeneralSpliterator trySplitTestingSize(com.google.common.collect.testing.SpliteratorTester$GeneralSpliterator)
{
java.lang.Object[] v13, v6;
long v11, v14, v18, v19, v2, v20, v21, v4, v7;
byte v12, v5;
java.lang.Long v15, v16, v8, v9;
java.lang.String v10, v17;
boolean v1;
com.google.common.collect.testing.SpliteratorTester$GeneralSpliterator v0, v3;
v0 := @parameter0: com.google.common.collect.testing.SpliteratorTester$GeneralSpliterator;
v1 = virtualinvoke v0.<com.google.common.collect.testing.SpliteratorTester$GeneralSpliterator: boolean hasCharacteristics(int)>(16384);
v2 = virtualinvoke v0.<com.google.common.collect.testing.SpliteratorTester$GeneralSpliterator: long estimateSize()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.SpliteratorTester$GeneralSpliterator: com.google.common.collect.testing.SpliteratorTester$GeneralSpliterator trySplit()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.SpliteratorTester$GeneralSpliterator: long estimateSize()>();
v5 = v4 cmp v2;
if v5 <= 0 goto label1;
v6 = newarray (java.lang.Object)[2];
v7 = virtualinvoke v0.<com.google.common.collect.testing.SpliteratorTester$GeneralSpliterator: long estimateSize()>();
v8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v7);
v6[0] = v8;
v9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v2);
v6[1] = v9;
v10 = staticinvoke <com.google.common.collect.testing.Platform: java.lang.String format(java.lang.String,java.lang.Object[])>("estimated size of spliterator after trySplit (%s) is larger than original size (%s)", v6);
staticinvoke <junit.framework.Assert: void fail(java.lang.String)>(v10);
label1:
if v3 == null goto label2;
v11 = virtualinvoke v3.<com.google.common.collect.testing.SpliteratorTester$GeneralSpliterator: long estimateSize()>();
v12 = v11 cmp v2;
if v12 <= 0 goto label2;
v13 = newarray (java.lang.Object)[2];
v14 = virtualinvoke v3.<com.google.common.collect.testing.SpliteratorTester$GeneralSpliterator: long estimateSize()>();
v15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v14);
v13[0] = v15;
v16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v2);
v13[1] = v16;
v17 = staticinvoke <com.google.common.collect.testing.Platform: java.lang.String format(java.lang.String,java.lang.Object[])>("estimated size of trySplit result (%s) is larger than original size (%s)", v13);
staticinvoke <junit.framework.Assert: void fail(java.lang.String)>(v17);
label2:
if v1 == 0 goto label4;
if v3 == null goto label3;
v18 = virtualinvoke v3.<com.google.common.collect.testing.SpliteratorTester$GeneralSpliterator: long estimateSize()>();
v19 = virtualinvoke v0.<com.google.common.collect.testing.SpliteratorTester$GeneralSpliterator: long estimateSize()>();
v20 = v18 + v19;
staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,long,long)>("sum of estimated sizes of trySplit and original spliterator after trySplit", v2, v20);
goto label4;
label3:
v21 = virtualinvoke v0.<com.google.common.collect.testing.SpliteratorTester$GeneralSpliterator: long estimateSize()>();
staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,long,long)>("estimated size of spliterator after failed trySplit", v2, v21);
label4:
return v3;
}
public static com.google.common.collect.testing.SpliteratorTester of(java.util.function.Supplier)
{
com.google.common.collect.ImmutableSet v3;
com.google.common.collect.testing.SpliteratorTester v1;
java.util.function.Supplier v0, v2;
v0 := @parameter0: java.util.function.Supplier;
v1 = new com.google.common.collect.testing.SpliteratorTester;
v2 = staticinvoke <com.google.common.collect.testing.SpliteratorTester$lambda_of_0__3: java.util.function.Supplier bootstrap$(java.util.function.Supplier)>(v0);
v3 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of(java.lang.Object)>(v2);
specialinvoke v1.<com.google.common.collect.testing.SpliteratorTester: void <init>(com.google.common.collect.ImmutableSet)>(v3);
return v1;
}
public static com.google.common.collect.testing.SpliteratorTester ofInt(java.util.function.Supplier)
{
com.google.common.collect.ImmutableSet v4;
com.google.common.collect.testing.SpliteratorTester v1;
java.util.function.Supplier v0, v2, v3;
v0 := @parameter0: java.util.function.Supplier;
v1 = new com.google.common.collect.testing.SpliteratorTester;
v2 = staticinvoke <com.google.common.collect.testing.SpliteratorTester$lambda_ofInt_1__4: java.util.function.Supplier bootstrap$(java.util.function.Supplier)>(v0);
v3 = staticinvoke <com.google.common.collect.testing.SpliteratorTester$lambda_ofInt_3__5: java.util.function.Supplier bootstrap$(java.util.function.Supplier)>(v0);
v4 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of(java.lang.Object,java.lang.Object)>(v2, v3);
specialinvoke v1.<com.google.common.collect.testing.SpliteratorTester: void <init>(com.google.common.collect.ImmutableSet)>(v4);
return v1;
}
public static com.google.common.collect.testing.SpliteratorTester ofLong(java.util.function.Supplier)
{
com.google.common.collect.ImmutableSet v4;
com.google.common.collect.testing.SpliteratorTester v1;
java.util.function.Supplier v0, v2, v3;
v0 := @parameter0: java.util.function.Supplier;
v1 = new com.google.common.collect.testing.SpliteratorTester;
v2 = staticinvoke <com.google.common.collect.testing.SpliteratorTester$lambda_ofLong_4__6: java.util.function.Supplier bootstrap$(java.util.function.Supplier)>(v0);
v3 = staticinvoke <com.google.common.collect.testing.SpliteratorTester$lambda_ofLong_6__7: java.util.function.Supplier bootstrap$(java.util.function.Supplier)>(v0);
v4 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of(java.lang.Object,java.lang.Object)>(v2, v3);
specialinvoke v1.<com.google.common.collect.testing.SpliteratorTester: void <init>(com.google.common.collect.ImmutableSet)>(v4);
return v1;
}
public static com.google.common.collect.testing.SpliteratorTester ofDouble(java.util.function.Supplier)
{
com.google.common.collect.ImmutableSet v4;
com.google.common.collect.testing.SpliteratorTester v1;
java.util.function.Supplier v0, v2, v3;
v0 := @parameter0: java.util.function.Supplier;
v1 = new com.google.common.collect.testing.SpliteratorTester;
v2 = staticinvoke <com.google.common.collect.testing.SpliteratorTester$lambda_ofDouble_7__8: java.util.function.Supplier bootstrap$(java.util.function.Supplier)>(v0);
v3 = staticinvoke <com.google.common.collect.testing.SpliteratorTester$lambda_ofDouble_9__9: java.util.function.Supplier bootstrap$(java.util.function.Supplier)>(v0);
v4 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of(java.lang.Object,java.lang.Object)>(v2, v3);
specialinvoke v1.<com.google.common.collect.testing.SpliteratorTester: void <init>(com.google.common.collect.ImmutableSet)>(v4);
return v1;
}
private void <init>(com.google.common.collect.ImmutableSet)
{
com.google.common.collect.testing.SpliteratorTester v0;
java.lang.Object v2;
com.google.common.collect.ImmutableSet v1;
v0 := @this: com.google.common.collect.testing.SpliteratorTester;
v1 := @parameter0: com.google.common.collect.ImmutableSet;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(v1);
v0.<com.google.common.collect.testing.SpliteratorTester: com.google.common.collect.ImmutableSet spliteratorSuppliers> = v2;
return;
}
public final transient com.google.common.collect.testing.SpliteratorTester$Ordered expect(java.lang.Object[])
{
java.util.List v2;
java.lang.Object[] v1;
com.google.common.collect.testing.SpliteratorTester$Ordered v3;
com.google.common.collect.testing.SpliteratorTester v0;
v0 := @this: com.google.common.collect.testing.SpliteratorTester;
v1 := @parameter0: java.lang.Object[];
v2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
v3 = virtualinvoke v0.<com.google.common.collect.testing.SpliteratorTester: com.google.common.collect.testing.SpliteratorTester$Ordered expect(java.lang.Iterable)>(v2);
return v3;
}
public final com.google.common.collect.testing.SpliteratorTester$Ordered expect(java.lang.Iterable)
{
long v9;
java.lang.Iterable v1;
java.util.ArrayList v14, v2;
int v17, v19, v23, v24, v25, v8;
java.util.EnumSet v10;
boolean v12, v18, v22, v5;
com.google.common.collect.ImmutableSet v3;
java.util.Iterator v11;
com.google.common.collect.testing.SpliteratorTester$1 v26;
java.util.function.Consumer v16;
com.google.common.collect.Ordering v21;
com.google.common.collect.testing.SpliteratorTester v0;
java.lang.Object v13, v15, v6, v7;
com.google.common.collect.UnmodifiableIterator v4;
java.util.Comparator v20;
v0 := @this: com.google.common.collect.testing.SpliteratorTester;
v1 := @parameter0: java.lang.Iterable;
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
v3 = v0.<com.google.common.collect.testing.SpliteratorTester: com.google.common.collect.ImmutableSet spliteratorSuppliers>;
v4 = virtualinvoke v3.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label7;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = interfaceinvoke v6.<java.util.function.Supplier: java.lang.Object get()>();
v8 = virtualinvoke v7.<com.google.common.collect.testing.SpliteratorTester$GeneralSpliterator: int characteristics()>();
v9 = virtualinvoke v7.<com.google.common.collect.testing.SpliteratorTester$GeneralSpliterator: long estimateSize()>();
v10 = staticinvoke <java.util.EnumSet: java.util.EnumSet allOf(java.lang.Class)>(class "Lcom/google/common/collect/testing/SpliteratorTester$SpliteratorDecompositionStrategy;");
v11 = virtualinvoke v10.<java.util.EnumSet: java.util.Iterator iterator()>();
label2:
v12 = interfaceinvoke v11.<java.util.Iterator: boolean hasNext()>();
if v12 == 0 goto label1;
v13 = interfaceinvoke v11.<java.util.Iterator: java.lang.Object next()>();
v14 = new java.util.ArrayList;
specialinvoke v14.<java.util.ArrayList: void <init>()>();
v15 = interfaceinvoke v6.<java.util.function.Supplier: java.lang.Object get()>();
virtualinvoke v14.<java.lang.Object: java.lang.Class getClass()>();
v16 = staticinvoke <com.google.common.collect.testing.SpliteratorTester$add__10: java.util.function.Consumer bootstrap$(java.util.List)>(v14);
virtualinvoke v13.<com.google.common.collect.testing.SpliteratorTester$SpliteratorDecompositionStrategy: void forEach(com.google.common.collect.testing.SpliteratorTester$GeneralSpliterator,java.util.function.Consumer)>(v15, v16);
v17 = v8 & 256;
if v17 == 0 goto label3;
v18 = interfaceinvoke v14.<java.util.List: boolean contains(java.lang.Object)>(null);
staticinvoke <junit.framework.Assert: void assertFalse(boolean)>(v18);
label3:
v19 = v8 & 4;
if v19 == 0 goto label5;
v20 = virtualinvoke v7.<com.google.common.collect.testing.SpliteratorTester$GeneralSpliterator: java.util.Comparator getComparator()>();
if v20 != null goto label4;
v20 = staticinvoke <java.util.Comparator: java.util.Comparator naturalOrder()>();
label4:
v21 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering 'from'(java.util.Comparator)>(v20);
v22 = virtualinvoke v21.<com.google.common.collect.Ordering: boolean isOrdered(java.lang.Iterable)>(v14);
staticinvoke <junit.framework.Assert: void assertTrue(boolean)>(v22);
label5:
v23 = v8 & 64;
if v23 == 0 goto label6;
v24 = staticinvoke <com.google.common.primitives.Ints: int checkedCast(long)>(v9);
v25 = interfaceinvoke v14.<java.util.List: int size()>();
staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(v24, v25);
label6:
staticinvoke <com.google.common.collect.testing.Helpers: void assertEqualIgnoringOrder(java.lang.Iterable,java.lang.Iterable)>(v1, v14);
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v14);
goto label2;
label7:
v26 = new com.google.common.collect.testing.SpliteratorTester$1;
specialinvoke v26.<com.google.common.collect.testing.SpliteratorTester$1: void <init>(com.google.common.collect.testing.SpliteratorTester,java.util.List,java.lang.Iterable)>(v0, v2, v1);
return v26;
}
}