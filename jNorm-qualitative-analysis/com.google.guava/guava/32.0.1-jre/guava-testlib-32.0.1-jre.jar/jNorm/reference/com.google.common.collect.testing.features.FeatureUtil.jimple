public class com.google.common.collect.testing.features.FeatureUtil extends java.lang.Object
{
private static java.util.Map annotationCache;
private static final java.util.Map classTesterRequirementsCache;
private static final java.util.Map methodTesterRequirementsCache;
public void <init>()
{
com.google.common.collect.testing.features.FeatureUtil v0;
v0 := @this: com.google.common.collect.testing.features.FeatureUtil;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.util.Set addImpliedFeatures(java.util.Set)
{
java.util.Iterator v5;
java.util.Set v0, v4;
java.lang.Object v3, v7;
java.util.ArrayDeque v1;
boolean v2, v6, v8;
v0 := @parameter0: java.util.Set;
v1 = new java.util.ArrayDeque;
specialinvoke v1.<java.util.ArrayDeque: void <init>(java.util.Collection)>(v0);
label1:
v2 = interfaceinvoke v1.<java.util.Queue: boolean isEmpty()>();
if v2 != 0 goto label3;
v3 = interfaceinvoke v1.<java.util.Queue: java.lang.Object remove()>();
v4 = interfaceinvoke v3.<com.google.common.collect.testing.features.Feature: java.util.Set getImpliedFeatures()>();
v5 = interfaceinvoke v4.<java.util.Set: java.util.Iterator iterator()>();
label2:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label1;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = interfaceinvoke v0.<java.util.Set: boolean add(java.lang.Object)>(v7);
if v8 == 0 goto label2;
interfaceinvoke v1.<java.util.Queue: boolean add(java.lang.Object)>(v7);
goto label2;
label3:
return v0;
}
public static java.util.Set impliedFeatures(java.util.Set)
{
java.util.Iterator v6;
java.util.Set v0, v5;
java.lang.Object v4, v8;
java.util.ArrayDeque v2;
java.util.LinkedHashSet v1;
boolean v10, v3, v7, v9;
v0 := @parameter0: java.util.Set;
v1 = new java.util.LinkedHashSet;
specialinvoke v1.<java.util.LinkedHashSet: void <init>()>();
v2 = new java.util.ArrayDeque;
specialinvoke v2.<java.util.ArrayDeque: void <init>(java.util.Collection)>(v0);
label1:
v3 = interfaceinvoke v2.<java.util.Queue: boolean isEmpty()>();
if v3 != 0 goto label3;
v4 = interfaceinvoke v2.<java.util.Queue: java.lang.Object remove()>();
v5 = interfaceinvoke v4.<com.google.common.collect.testing.features.Feature: java.util.Set getImpliedFeatures()>();
v6 = interfaceinvoke v5.<java.util.Set: java.util.Iterator iterator()>();
label2:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label1;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = interfaceinvoke v0.<java.util.Set: boolean contains(java.lang.Object)>(v8);
if v9 != 0 goto label2;
v10 = interfaceinvoke v1.<java.util.Set: boolean add(java.lang.Object)>(v8);
if v10 == 0 goto label2;
interfaceinvoke v2.<java.util.Queue: boolean add(java.lang.Object)>(v8);
goto label2;
label3:
return v1;
}
public static com.google.common.collect.testing.features.TesterRequirements getTesterRequirements(java.lang.Class) throws com.google.common.collect.testing.features.ConflictingRequirementsException
{
java.lang.Throwable v5;
java.util.Map v1, v2, v4;
java.lang.Class v0;
java.lang.Object v3;
v0 := @parameter0: java.lang.Class;
v1 = <com.google.common.collect.testing.features.FeatureUtil: java.util.Map classTesterRequirementsCache>;
entermonitor v1;
label1:
v2 = <com.google.common.collect.testing.features.FeatureUtil: java.util.Map classTesterRequirementsCache>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v0);
if v3 != null goto label2;
v3 = staticinvoke <com.google.common.collect.testing.features.FeatureUtil: com.google.common.collect.testing.features.TesterRequirements buildTesterRequirements(java.lang.Class)>(v0);
v4 = <com.google.common.collect.testing.features.FeatureUtil: java.util.Map classTesterRequirementsCache>;
interfaceinvoke v4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v0, v3);
label2:
exitmonitor v1;
label3:
return v3;
label4:
v5 := @caughtexception;
exitmonitor v1;
throw v5;
catch java.lang.Throwable from label1 to label3 with label4;
}
public static com.google.common.collect.testing.features.TesterRequirements getTesterRequirements(java.lang.reflect.Method) throws com.google.common.collect.testing.features.ConflictingRequirementsException
{
java.lang.Throwable v5;
java.util.Map v1, v2, v4;
java.lang.Object v3;
java.lang.reflect.Method v0;
v0 := @parameter0: java.lang.reflect.Method;
v1 = <com.google.common.collect.testing.features.FeatureUtil: java.util.Map methodTesterRequirementsCache>;
entermonitor v1;
label1:
v2 = <com.google.common.collect.testing.features.FeatureUtil: java.util.Map methodTesterRequirementsCache>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v0);
if v3 != null goto label2;
v3 = staticinvoke <com.google.common.collect.testing.features.FeatureUtil: com.google.common.collect.testing.features.TesterRequirements buildTesterRequirements(java.lang.reflect.Method)>(v0);
v4 = <com.google.common.collect.testing.features.FeatureUtil: java.util.Map methodTesterRequirementsCache>;
interfaceinvoke v4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v0, v3);
label2:
exitmonitor v1;
label3:
return v3;
label4:
v5 := @caughtexception;
exitmonitor v1;
throw v5;
catch java.lang.Throwable from label1 to label3 with label4;
}
static com.google.common.collect.testing.features.TesterRequirements buildTesterRequirements(java.lang.Class) throws com.google.common.collect.testing.features.ConflictingRequirementsException
{
java.lang.Class v0, v2;
com.google.common.collect.testing.features.TesterRequirements v1, v3, v4, v5;
v0 := @parameter0: java.lang.Class;
v1 = staticinvoke <com.google.common.collect.testing.features.FeatureUtil: com.google.common.collect.testing.features.TesterRequirements buildDeclaredTesterRequirements(java.lang.reflect.AnnotatedElement)>(v0);
v2 = virtualinvoke v0.<java.lang.Class: java.lang.Class getSuperclass()>();
if v2 != null goto label1;
return v1;
label1:
v3 = new com.google.common.collect.testing.features.TesterRequirements;
v4 = staticinvoke <com.google.common.collect.testing.features.FeatureUtil: com.google.common.collect.testing.features.TesterRequirements getTesterRequirements(java.lang.Class)>(v2);
specialinvoke v3.<com.google.common.collect.testing.features.TesterRequirements: void <init>(com.google.common.collect.testing.features.TesterRequirements)>(v4);
v5 = staticinvoke <com.google.common.collect.testing.features.FeatureUtil: com.google.common.collect.testing.features.TesterRequirements incorporateRequirements(com.google.common.collect.testing.features.TesterRequirements,com.google.common.collect.testing.features.TesterRequirements,java.lang.Object)>(v3, v1, v0);
return v5;
}
static com.google.common.collect.testing.features.TesterRequirements buildTesterRequirements(java.lang.reflect.Method) throws com.google.common.collect.testing.features.ConflictingRequirementsException
{
java.lang.Class v2;
com.google.common.collect.testing.features.TesterRequirements v1, v3, v4, v5;
java.lang.reflect.Method v0;
v0 := @parameter0: java.lang.reflect.Method;
v1 = new com.google.common.collect.testing.features.TesterRequirements;
v2 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();
v3 = staticinvoke <com.google.common.collect.testing.features.FeatureUtil: com.google.common.collect.testing.features.TesterRequirements getTesterRequirements(java.lang.Class)>(v2);
specialinvoke v1.<com.google.common.collect.testing.features.TesterRequirements: void <init>(com.google.common.collect.testing.features.TesterRequirements)>(v3);
v4 = staticinvoke <com.google.common.collect.testing.features.FeatureUtil: com.google.common.collect.testing.features.TesterRequirements buildDeclaredTesterRequirements(java.lang.reflect.AnnotatedElement)>(v0);
v5 = staticinvoke <com.google.common.collect.testing.features.FeatureUtil: com.google.common.collect.testing.features.TesterRequirements incorporateRequirements(com.google.common.collect.testing.features.TesterRequirements,com.google.common.collect.testing.features.TesterRequirements,java.lang.Object)>(v1, v4, v0);
return v5;
}
private static com.google.common.collect.testing.features.TesterRequirements buildTesterRequirements(java.lang.'annotation'.Annotation) throws com.google.common.collect.testing.features.ConflictingRequirementsException
{
java.lang.Object[] v4, v8;
com.google.common.collect.testing.features.TesterRequirements v19;
com.google.common.collect.testing.features.ConflictingRequirementsException v17;
java.lang.reflect.Method v3, v7;
boolean v16;
java.lang.Class[] v2, v6;
java.util.Set v12, v13, v14, v15, v18;
java.lang.IllegalArgumentException v11;
java.lang.Exception v10;
java.lang.'annotation'.Annotation v0;
java.lang.Class v1;
java.lang.Object v5, v9;
v0 := @parameter0: java.lang.'annotation'.Annotation;
v1 = interfaceinvoke v0.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();
label1:
v2 = newarray (java.lang.Class)[0];
v3 = virtualinvoke v1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("value", v2);
v4 = newarray (java.lang.Object)[0];
v5 = virtualinvoke v3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v0, v4);
v6 = newarray (java.lang.Class)[0];
v7 = virtualinvoke v1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("absent", v6);
v8 = newarray (java.lang.Object)[0];
v9 = virtualinvoke v7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v0, v8);
label2:
goto label4;
label3:
v10 := @caughtexception;
v11 = new java.lang.IllegalArgumentException;
specialinvoke v11.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Error extracting features from tester annotation.", v10);
throw v11;
label4:
v12 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Set copyToSet(java.lang.Object[])>(v5);
v13 = staticinvoke <com.google.common.collect.testing.features.FeatureUtil: java.util.Set addImpliedFeatures(java.util.Set)>(v12);
v14 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Set copyToSet(java.lang.Object[])>(v9);
v15 = staticinvoke <com.google.common.collect.testing.features.FeatureUtil: java.util.Set addImpliedFeatures(java.util.Set)>(v14);
v16 = staticinvoke <java.util.Collections: boolean disjoint(java.util.Collection,java.util.Collection)>(v13, v15);
if v16 != 0 goto label5;
v17 = new com.google.common.collect.testing.features.ConflictingRequirementsException;
v18 = staticinvoke <com.google.common.collect.testing.features.FeatureUtil: java.util.Set intersection(java.util.Set,java.util.Set)>(v13, v15);
specialinvoke v17.<com.google.common.collect.testing.features.ConflictingRequirementsException: void <init>(java.lang.String,java.util.Set,java.lang.Object)>("Annotation explicitly or implicitly requires one or more features to be both present and absent.", v18, v0);
throw v17;
label5:
v19 = new com.google.common.collect.testing.features.TesterRequirements;
specialinvoke v19.<com.google.common.collect.testing.features.TesterRequirements: void <init>(java.util.Set,java.util.Set)>(v13, v15);
return v19;
catch java.lang.Exception from label1 to label2 with label3;
}
public static com.google.common.collect.testing.features.TesterRequirements buildDeclaredTesterRequirements(java.lang.reflect.AnnotatedElement) throws com.google.common.collect.testing.features.ConflictingRequirementsException
{
java.util.Iterator v3;
java.lang.Object v5;
com.google.common.collect.testing.features.TesterRequirements v1, v6;
java.lang.Iterable v2;
boolean v4;
java.lang.reflect.AnnotatedElement v0;
v0 := @parameter0: java.lang.reflect.AnnotatedElement;
v1 = new com.google.common.collect.testing.features.TesterRequirements;
specialinvoke v1.<com.google.common.collect.testing.features.TesterRequirements: void <init>()>();
v2 = staticinvoke <com.google.common.collect.testing.features.FeatureUtil: java.lang.Iterable getTesterAnnotations(java.lang.reflect.AnnotatedElement)>(v0);
v3 = interfaceinvoke v2.<java.lang.Iterable: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = staticinvoke <com.google.common.collect.testing.features.FeatureUtil: com.google.common.collect.testing.features.TesterRequirements buildTesterRequirements(java.lang.'annotation'.Annotation)>(v5);
staticinvoke <com.google.common.collect.testing.features.FeatureUtil: com.google.common.collect.testing.features.TesterRequirements incorporateRequirements(com.google.common.collect.testing.features.TesterRequirements,com.google.common.collect.testing.features.TesterRequirements,java.lang.Object)>(v1, v6, v5);
goto label1;
label2:
return v1;
}
public static java.lang.Iterable getTesterAnnotations(java.lang.reflect.AnnotatedElement)
{
java.lang.Throwable v12;
java.lang.'annotation'.Annotation[] v5;
java.util.ArrayList v4;
java.util.Map v1, v11, v2;
int v6, v7;
java.lang.'annotation'.Annotation v8;
java.lang.Class v9;
java.lang.Object v3;
boolean v10;
java.lang.reflect.AnnotatedElement v0;
v0 := @parameter0: java.lang.reflect.AnnotatedElement;
v1 = <com.google.common.collect.testing.features.FeatureUtil: java.util.Map annotationCache>;
entermonitor v1;
label1:
v2 = <com.google.common.collect.testing.features.FeatureUtil: java.util.Map annotationCache>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v0);
if v3 != null goto label5;
v4 = new java.util.ArrayList;
specialinvoke v4.<java.util.ArrayList: void <init>()>();
v5 = interfaceinvoke v0.<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>();
v6 = lengthof v5;
v7 = 0;
label2:
if v7 >= v6 goto label4;
v8 = v5[v7];
v9 = interfaceinvoke v8.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();
v10 = virtualinvoke v9.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>(class "Lcom/google/common/collect/testing/features/TesterAnnotation;");
if v10 == 0 goto label3;
interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(v8);
label3:
v7 = v7 + 1;
goto label2;
label4:
v3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(v4);
v11 = <com.google.common.collect.testing.features.FeatureUtil: java.util.Map annotationCache>;
interfaceinvoke v11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v0, v3);
label5:
exitmonitor v1;
label6:
return v3;
label7:
v12 := @caughtexception;
exitmonitor v1;
throw v12;
catch java.lang.Throwable from label1 to label6 with label7;
}
private static com.google.common.collect.testing.features.TesterRequirements incorporateRequirements(com.google.common.collect.testing.features.TesterRequirements, com.google.common.collect.testing.features.TesterRequirements, java.lang.Object) throws com.google.common.collect.testing.features.ConflictingRequirementsException
{
java.util.Set v3, v4, v5, v6;
java.lang.Object v2;
com.google.common.collect.testing.features.TesterRequirements v0, v1;
v0 := @parameter0: com.google.common.collect.testing.features.TesterRequirements;
v1 := @parameter1: com.google.common.collect.testing.features.TesterRequirements;
v2 := @parameter2: java.lang.Object;
v3 = virtualinvoke v0.<com.google.common.collect.testing.features.TesterRequirements: java.util.Set getPresentFeatures()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.features.TesterRequirements: java.util.Set getAbsentFeatures()>();
v5 = virtualinvoke v1.<com.google.common.collect.testing.features.TesterRequirements: java.util.Set getPresentFeatures()>();
v6 = virtualinvoke v1.<com.google.common.collect.testing.features.TesterRequirements: java.util.Set getAbsentFeatures()>();
staticinvoke <com.google.common.collect.testing.features.FeatureUtil: void checkConflict(java.lang.String,java.util.Set,java.lang.String,java.util.Set,java.lang.Object)>("absent", v4, "present", v5, v2);
staticinvoke <com.google.common.collect.testing.features.FeatureUtil: void checkConflict(java.lang.String,java.util.Set,java.lang.String,java.util.Set,java.lang.Object)>("present", v3, "absent", v6, v2);
interfaceinvoke v3.<java.util.Set: boolean addAll(java.util.Collection)>(v5);
interfaceinvoke v4.<java.util.Set: boolean addAll(java.util.Collection)>(v6);
return v0;
}
private static void checkConflict(java.lang.String, java.util.Set, java.lang.String, java.util.Set, java.lang.Object) throws com.google.common.collect.testing.features.ConflictingRequirementsException
{
java.lang.Object[] v8;
java.util.Set v1, v10, v3;
com.google.common.collect.testing.features.ConflictingRequirementsException v6;
java.util.Locale v7;
java.lang.Object v4;
java.lang.String v0, v2, v9;
boolean v5;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.util.Set;
v2 := @parameter2: java.lang.String;
v3 := @parameter3: java.util.Set;
v4 := @parameter4: java.lang.Object;
v5 = staticinvoke <java.util.Collections: boolean disjoint(java.util.Collection,java.util.Collection)>(v3, v1);
if v5 != 0 goto label1;
v6 = new com.google.common.collect.testing.features.ConflictingRequirementsException;
v7 = <java.util.Locale: java.util.Locale ROOT>;
v8 = newarray (java.lang.Object)[2];
v8[0] = v2;
v8[1] = v0;
v9 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(v7, "Annotation requires to be %s features that earlier annotations required to be %s.", v8);
v10 = staticinvoke <com.google.common.collect.testing.features.FeatureUtil: java.util.Set intersection(java.util.Set,java.util.Set)>(v3, v1);
specialinvoke v6.<com.google.common.collect.testing.features.ConflictingRequirementsException: void <init>(java.lang.String,java.util.Set,java.lang.Object)>(v9, v10, v4);
throw v6;
label1:
return;
}
public static java.util.Set intersection(java.util.Set, java.util.Set)
{
java.util.Set v0, v1, v2;
v0 := @parameter0: java.util.Set;
v1 := @parameter1: java.util.Set;
v2 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Set copyToSet(java.lang.Iterable)>(v0);
interfaceinvoke v2.<java.util.Set: boolean retainAll(java.util.Collection)>(v1);
return v2;
}
static void <clinit>()
{
java.util.HashMap v0, v1, v2;
v0 = new java.util.HashMap;
specialinvoke v0.<java.util.HashMap: void <init>()>();
<com.google.common.collect.testing.features.FeatureUtil: java.util.Map annotationCache> = v0;
v1 = new java.util.HashMap;
specialinvoke v1.<java.util.HashMap: void <init>()>();
<com.google.common.collect.testing.features.FeatureUtil: java.util.Map classTesterRequirementsCache> = v1;
v2 = new java.util.HashMap;
specialinvoke v2.<java.util.HashMap: void <init>()>();
<com.google.common.collect.testing.features.FeatureUtil: java.util.Map methodTesterRequirementsCache> = v2;
return;
}
}