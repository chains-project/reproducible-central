public abstract class com.google.common.collect.testing.google.AbstractBiMapTester extends com.google.common.collect.testing.AbstractMapTester
{
public void <init>()
{
com.google.common.collect.testing.google.AbstractBiMapTester v0;
v0 := @this: com.google.common.collect.testing.google.AbstractBiMapTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractMapTester: void <init>()>();
return;
}
protected com.google.common.collect.BiMap getMap()
{
com.google.common.collect.testing.google.AbstractBiMapTester v0;
java.util.Map v1;
v0 := @this: com.google.common.collect.testing.google.AbstractBiMapTester;
v1 = specialinvoke v0.<com.google.common.collect.testing.AbstractMapTester: java.util.Map getMap()>();
return v1;
}
static java.util.Map$Entry reverseEntry(java.util.Map$Entry)
{
java.util.Map$Entry v0, v3;
java.lang.Object v1, v2;
v0 := @parameter0: java.util.Map$Entry;
v1 = interfaceinvoke v0.<java.util.Map$Entry: java.lang.Object getValue()>();
v2 = interfaceinvoke v0.<java.util.Map$Entry: java.lang.Object getKey()>();
v3 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(v1, v2);
return v3;
}
protected void expectContents(java.util.Collection)
{
java.util.ArrayList v2;
com.google.common.collect.testing.google.AbstractBiMapTester v0;
java.lang.String v14;
boolean v11, v4;
com.google.common.collect.BiMap v16, v17, v7, v8;
java.util.Map$Entry v6;
java.util.Iterator v10, v3;
java.util.Collection v1;
java.util.Set v9;
java.lang.Object v12, v13, v15, v18, v19, v5;
v0 := @this: com.google.common.collect.testing.google.AbstractBiMapTester;
v1 := @parameter0: java.util.Collection;
specialinvoke v0.<com.google.common.collect.testing.AbstractMapTester: void expectContents(java.util.Collection)>(v1);
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
v3 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = staticinvoke <com.google.common.collect.testing.google.AbstractBiMapTester: java.util.Map$Entry reverseEntry(java.util.Map$Entry)>(v5);
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v6);
goto label1;
label2:
v7 = virtualinvoke v0.<com.google.common.collect.testing.google.AbstractBiMapTester: com.google.common.collect.BiMap getMap()>();
v8 = interfaceinvoke v7.<com.google.common.collect.BiMap: com.google.common.collect.BiMap inverse()>();
v9 = interfaceinvoke v8.<com.google.common.collect.BiMap: java.util.Set entrySet()>();
staticinvoke <com.google.common.collect.testing.Helpers: void assertEqualIgnoringOrder(java.lang.Iterable,java.lang.Iterable)>(v9, v2);
v10 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
label3:
v11 = interfaceinvoke v10.<java.util.Iterator: boolean hasNext()>();
if v11 == 0 goto label4;
v12 = interfaceinvoke v10.<java.util.Iterator: java.lang.Object next()>();
v13 = interfaceinvoke v12.<java.util.Map$Entry: java.lang.Object getValue()>();
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v13) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Wrong key for value \u0001");
v15 = interfaceinvoke v12.<java.util.Map$Entry: java.lang.Object getKey()>();
v16 = virtualinvoke v0.<com.google.common.collect.testing.google.AbstractBiMapTester: com.google.common.collect.BiMap getMap()>();
v17 = interfaceinvoke v16.<com.google.common.collect.BiMap: com.google.common.collect.BiMap inverse()>();
v18 = interfaceinvoke v12.<java.util.Map$Entry: java.lang.Object getValue()>();
v19 = interfaceinvoke v17.<com.google.common.collect.BiMap: java.lang.Object get(java.lang.Object)>(v18);
staticinvoke <com.google.common.collect.testing.google.AbstractBiMapTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>(v14, v15, v19);
goto label3;
label4:
return;
}
protected transient void expectMissing(java.util.Map$Entry[])
{
int v2, v3;
com.google.common.collect.testing.google.AbstractBiMapTester v0;
java.lang.String v12, v16, v20, v8;
java.util.Map$Entry[] v1;
boolean v10, v14, v18;
com.google.common.collect.BiMap v6, v7;
java.util.Map$Entry v4, v5;
java.util.Set v9;
java.lang.Object v11, v13, v15, v17, v19, v21, v22;
v0 := @this: com.google.common.collect.testing.google.AbstractBiMapTester;
v1 := @parameter0: java.util.Map$Entry[];
specialinvoke v0.<com.google.common.collect.testing.AbstractMapTester: void expectMissing(java.util.Map$Entry[])>(v1);
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label2;
v4 = v1[v3];
v5 = staticinvoke <com.google.common.collect.testing.google.AbstractBiMapTester: java.util.Map$Entry reverseEntry(java.util.Map$Entry)>(v4);
v6 = virtualinvoke v0.<com.google.common.collect.testing.google.AbstractBiMapTester: com.google.common.collect.BiMap getMap()>();
v7 = interfaceinvoke v6.<com.google.common.collect.BiMap: com.google.common.collect.BiMap inverse()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.util.Map$Entry)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Inverse should not contain entry \u0001");
v9 = interfaceinvoke v7.<com.google.common.collect.BiMap: java.util.Set entrySet()>();
v10 = interfaceinvoke v9.<java.util.Set: boolean contains(java.lang.Object)>(v5);
staticinvoke <com.google.common.collect.testing.google.AbstractBiMapTester: void assertFalse(java.lang.String,boolean)>(v8, v10);
v11 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Inverse should not contain key \u0001");
v13 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
v14 = interfaceinvoke v7.<com.google.common.collect.BiMap: boolean containsKey(java.lang.Object)>(v13);
staticinvoke <com.google.common.collect.testing.google.AbstractBiMapTester: void assertFalse(java.lang.String,boolean)>(v12, v14);
v15 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getValue()>();
v16 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v15) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Inverse should not contain value \u0001");
v17 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getValue()>();
v18 = interfaceinvoke v7.<com.google.common.collect.BiMap: boolean containsValue(java.lang.Object)>(v17);
staticinvoke <com.google.common.collect.testing.google.AbstractBiMapTester: void assertFalse(java.lang.String,boolean)>(v16, v18);
v19 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
v20 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v19) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Inverse should not return a mapping for key \u0001");
v21 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
v22 = interfaceinvoke v7.<com.google.common.collect.BiMap: java.lang.Object get(java.lang.Object)>(v21);
staticinvoke <com.google.common.collect.testing.google.AbstractBiMapTester: void assertNull(java.lang.String,java.lang.Object)>(v20, v22);
v3 = v3 + 1;
goto label1;
label2:
return;
}
}