public abstract class com.google.common.collect.testing.google.AbstractMultisetSetCountTester extends com.google.common.collect.testing.google.AbstractMultisetTester
{
public void <init>()
{
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetTester: void <init>()>();
return;
}
private void assertSetCount(java.lang.Object, int)
{
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
java.util.Iterator v8;
com.google.common.collect.Multiset v12, v3, v6;
java.util.Set v7;
int v11, v13, v2, v4, v5;
java.lang.Object v1, v10;
boolean v9;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: int;
virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void setCountCheckReturnValue(java.lang.Object,int)>(v1, v2);
v3 = virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: com.google.common.collect.Multiset getMultiset()>();
v4 = interfaceinvoke v3.<com.google.common.collect.Multiset: int count(java.lang.Object)>(v1);
staticinvoke <com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertEquals(java.lang.String,int,int)>("multiset.count() should return the value passed to setCount()", v2, v4);
v5 = 0;
v6 = virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: com.google.common.collect.Multiset getMultiset()>();
v7 = interfaceinvoke v6.<com.google.common.collect.Multiset: java.util.Set entrySet()>();
v8 = interfaceinvoke v7.<java.util.Set: java.util.Iterator iterator()>();
label1:
v9 = interfaceinvoke v8.<java.util.Iterator: boolean hasNext()>();
if v9 == 0 goto label2;
v10 = interfaceinvoke v8.<java.util.Iterator: java.lang.Object next()>();
v11 = interfaceinvoke v10.<com.google.common.collect.Multiset$Entry: int getCount()>();
v5 = v5 + v11;
goto label1;
label2:
v12 = virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: com.google.common.collect.Multiset getMultiset()>();
v13 = interfaceinvoke v12.<com.google.common.collect.Multiset: int size()>();
staticinvoke <com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertEquals(java.lang.String,int,int)>("multiset.size() should be the sum of the counts of all entries", v5, v13);
return;
}
abstract void setCountCheckReturnValue(java.lang.Object, int);
abstract void setCountNoCheckReturnValue(java.lang.Object, int);
private void assertSetCountIncreasingFailure(java.lang.Object, int)
{
java.lang.UnsupportedOperationException v3;
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
int v2;
java.lang.Object v1;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: int;
label1:
virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void setCountNoCheckReturnValue(java.lang.Object,int)>(v1, v2);
staticinvoke <com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void fail(java.lang.String)>("a call to multiset.setCount() to increase an element\'s count should throw");
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
private void assertSetCountDecreasingFailure(java.lang.Object, int)
{
java.lang.UnsupportedOperationException v3;
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
int v2;
java.lang.Object v1;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: int;
label1:
virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void setCountNoCheckReturnValue(java.lang.Object,int)>(v1, v2);
staticinvoke <com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void fail(java.lang.String)>("a call to multiset.setCount() to decrease an element\'s count should throw");
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
private void assertZeroToZero()
{
java.lang.Object v1;
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: java.lang.Object e3()>();
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertSetCount(java.lang.Object,int)>(v1, 0);
return;
}
private void assertOneToOne()
{
java.lang.Object v1;
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: java.lang.Object e0()>();
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertSetCount(java.lang.Object,int)>(v1, 1);
return;
}
private void assertThreeToThree()
{
java.lang.Object v1;
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void initThreeCopies()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: java.lang.Object e0()>();
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertSetCount(java.lang.Object,int)>(v1, 3);
return;
}
public void testSetCount_zeroToZero_addSupported()
{
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertZeroToZero()>();
return;
}
public void testSetCount_zeroToZero_removeSupported()
{
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertZeroToZero()>();
return;
}
public void testSetCount_zeroToZero_unsupported()
{
java.lang.UnsupportedOperationException v1;
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
label1:
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertZeroToZero()>();
label2:
goto label4;
label3:
v1 := @caughtexception;
label4:
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testSetCount_oneToOne_addSupported()
{
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertOneToOne()>();
return;
}
public void testSetCount_oneToOne_removeSupported()
{
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertOneToOne()>();
return;
}
public void testSetCount_oneToOne_unsupported()
{
java.lang.UnsupportedOperationException v1;
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
label1:
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertOneToOne()>();
label2:
goto label4;
label3:
v1 := @caughtexception;
label4:
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testSetCount_threeToThree_addSupported()
{
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertThreeToThree()>();
return;
}
public void testSetCount_threeToThree_removeSupported()
{
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertThreeToThree()>();
return;
}
public void testSetCount_threeToThree_unsupported()
{
java.lang.UnsupportedOperationException v1;
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
label1:
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertThreeToThree()>();
label2:
goto label4;
label3:
v1 := @caughtexception;
label4:
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testSetCount_zeroToOne_supported()
{
java.lang.Object v1;
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: java.lang.Object e3()>();
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertSetCount(java.lang.Object,int)>(v1, 1);
return;
}
public void testSetCountZeroToOneConcurrentWithIteration()
{
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
java.util.Iterator v2;
java.util.Collection v1;
java.lang.Object v3;
java.util.ConcurrentModificationException v4;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
label1:
v1 = v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: java.util.Collection collection>;
v2 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: java.lang.Object e3()>();
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertSetCount(java.lang.Object,int)>(v3, 1);
interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void fail(java.lang.String)>("Expected ConcurrentModificationException");
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
return;
catch java.util.ConcurrentModificationException from label1 to label2 with label3;
}
public void testSetCountZeroToOneConcurrentWithEntrySetIteration()
{
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
java.util.Iterator v3;
com.google.common.collect.Multiset v1;
java.util.Set v2;
java.lang.Object v4;
java.util.ConcurrentModificationException v5;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: com.google.common.collect.Multiset getMultiset()>();
v2 = interfaceinvoke v1.<com.google.common.collect.Multiset: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: java.lang.Object e3()>();
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertSetCount(java.lang.Object,int)>(v4, 1);
interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void fail(java.lang.String)>("Expected ConcurrentModificationException");
label2:
goto label4;
label3:
v5 := @caughtexception;
label4:
return;
catch java.util.ConcurrentModificationException from label1 to label2 with label3;
}
public void testSetCount_zeroToThree_supported()
{
java.lang.Object v1;
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: java.lang.Object e3()>();
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertSetCount(java.lang.Object,int)>(v1, 3);
return;
}
public void testSetCount_oneToThree_supported()
{
java.lang.Object v1;
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: java.lang.Object e0()>();
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertSetCount(java.lang.Object,int)>(v1, 3);
return;
}
public void testSetCount_zeroToOne_unsupported()
{
java.lang.Object v1;
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: java.lang.Object e3()>();
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertSetCountIncreasingFailure(java.lang.Object,int)>(v1, 1);
return;
}
public void testSetCount_zeroToThree_unsupported()
{
java.lang.Object v1;
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: java.lang.Object e3()>();
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertSetCountIncreasingFailure(java.lang.Object,int)>(v1, 3);
return;
}
public void testSetCount_oneToThree_unsupported()
{
java.lang.Object v1;
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: java.lang.Object e3()>();
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertSetCountIncreasingFailure(java.lang.Object,int)>(v1, 3);
return;
}
public void testSetCount_oneToZero_supported()
{
java.lang.Object v1;
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: java.lang.Object e0()>();
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertSetCount(java.lang.Object,int)>(v1, 0);
return;
}
public void testSetCountOneToZeroConcurrentWithIteration()
{
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
java.util.Iterator v2;
java.util.Collection v1;
java.lang.Object v3;
java.util.ConcurrentModificationException v4;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
label1:
v1 = v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: java.util.Collection collection>;
v2 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: java.lang.Object e0()>();
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertSetCount(java.lang.Object,int)>(v3, 0);
interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void fail(java.lang.String)>("Expected ConcurrentModificationException");
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
return;
catch java.util.ConcurrentModificationException from label1 to label2 with label3;
}
public void testSetCountOneToZeroConcurrentWithEntrySetIteration()
{
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
java.util.Iterator v3;
com.google.common.collect.Multiset v1;
java.util.Set v2;
java.lang.Object v4;
java.util.ConcurrentModificationException v5;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: com.google.common.collect.Multiset getMultiset()>();
v2 = interfaceinvoke v1.<com.google.common.collect.Multiset: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: java.lang.Object e0()>();
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertSetCount(java.lang.Object,int)>(v4, 0);
interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void fail(java.lang.String)>("Expected ConcurrentModificationException");
label2:
goto label4;
label3:
v5 := @caughtexception;
label4:
return;
catch java.util.ConcurrentModificationException from label1 to label2 with label3;
}
public void testSetCount_threeToZero_supported()
{
java.lang.Object v1;
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void initThreeCopies()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: java.lang.Object e0()>();
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertSetCount(java.lang.Object,int)>(v1, 0);
return;
}
public void testSetCount_threeToOne_supported()
{
java.lang.Object v1;
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void initThreeCopies()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: java.lang.Object e0()>();
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertSetCount(java.lang.Object,int)>(v1, 1);
return;
}
public void testSetCount_oneToZero_unsupported()
{
java.lang.Object v1;
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: java.lang.Object e0()>();
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertSetCountDecreasingFailure(java.lang.Object,int)>(v1, 0);
return;
}
public void testSetCount_threeToZero_unsupported()
{
java.lang.Object v1;
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void initThreeCopies()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: java.lang.Object e0()>();
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertSetCountDecreasingFailure(java.lang.Object,int)>(v1, 0);
return;
}
public void testSetCount_threeToOne_unsupported()
{
java.lang.Object v1;
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void initThreeCopies()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: java.lang.Object e0()>();
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertSetCountDecreasingFailure(java.lang.Object,int)>(v1, 1);
return;
}
public void testSetCount_removeNull_nullSupported()
{
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void initCollectionWithNullElement()>();
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertSetCount(java.lang.Object,int)>(null, 0);
return;
}
public void testSetCount_addNull_nullSupported()
{
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertSetCount(java.lang.Object,int)>(null, 1);
return;
}
public void testSetCount_addNull_nullUnsupported()
{
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
java.lang.NullPointerException v1;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
label1:
virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void setCountNoCheckReturnValue(java.lang.Object,int)>(null, 1);
staticinvoke <com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void fail(java.lang.String)>("adding null with setCount() should throw NullPointerException");
label2:
goto label4;
label3:
v1 := @caughtexception;
label4:
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testSetCount_noOpNull_nullSupported()
{
java.lang.UnsupportedOperationException v1;
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
label1:
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertSetCount(java.lang.Object,int)>(null, 0);
label2:
goto label4;
label3:
v1 := @caughtexception;
label4:
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testSetCount_noOpNull_nullUnsupported()
{
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
java.lang.RuntimeException v1;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
label1:
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertSetCount(java.lang.Object,int)>(null, 0);
label2:
goto label4;
label3:
v1 := @caughtexception;
label4:
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testSetCount_existingNoNopNull_nullSupported()
{
java.lang.UnsupportedOperationException v1;
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void initCollectionWithNullElement()>();
label1:
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void assertSetCount(java.lang.Object,int)>(null, 1);
label2:
goto label4;
label3:
v1 := @caughtexception;
label4:
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testSetCount_negative_removeSupported()
{
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
int v2;
java.lang.Object v1;
java.lang.IllegalArgumentException v3;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: java.lang.Object e3()>();
v2 = (int) -1;
virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void setCountNoCheckReturnValue(java.lang.Object,int)>(v1, v2);
staticinvoke <com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void fail(java.lang.String)>("calling setCount() with a negative count should throw IllegalArgumentException");
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
return;
catch java.lang.IllegalArgumentException from label1 to label2 with label3;
}
public void testSetCount_negative_removeUnsupported()
{
com.google.common.collect.testing.google.AbstractMultisetSetCountTester v0;
int v2;
java.lang.Object v1;
java.lang.RuntimeException v3;
v0 := @this: com.google.common.collect.testing.google.AbstractMultisetSetCountTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: java.lang.Object e3()>();
v2 = (int) -1;
virtualinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void setCountNoCheckReturnValue(java.lang.Object,int)>(v1, v2);
staticinvoke <com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void fail(java.lang.String)>("calling setCount() with a negative count should throw IllegalArgumentException or UnsupportedOperationException");
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
return;
catch java.lang.IllegalArgumentException from label1 to label2 with label3;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public static java.util.List getSetCountDuplicateInitializingMethods()
{
java.util.List v4;
java.lang.reflect.Method v1, v2, v3;
java.lang.reflect.Method[] v0;
v0 = newarray (java.lang.reflect.Method)[3];
v1 = staticinvoke <com.google.common.collect.testing.google.AbstractMultisetSetCountTester: java.lang.reflect.Method getMethod(java.lang.String)>("testSetCount_threeToThree_removeSupported");
v0[0] = v1;
v2 = staticinvoke <com.google.common.collect.testing.google.AbstractMultisetSetCountTester: java.lang.reflect.Method getMethod(java.lang.String)>("testSetCount_threeToZero_supported");
v0[1] = v2;
v3 = staticinvoke <com.google.common.collect.testing.google.AbstractMultisetSetCountTester: java.lang.reflect.Method getMethod(java.lang.String)>("testSetCount_threeToOne_supported");
v0[2] = v3;
v4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v0);
return v4;
}
private static java.lang.reflect.Method getMethod(java.lang.String)
{
java.lang.String v0;
java.lang.reflect.Method v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <com.google.common.collect.testing.Helpers: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String)>(class "Lcom/google/common/collect/testing/google/AbstractMultisetSetCountTester;", v0);
return v1;
}
}