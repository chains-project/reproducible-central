public class com.google.common.collect.testing.google.BiMapEntrySetTester extends com.google.common.collect.testing.google.AbstractBiMapTester
{
public void <init>()
{
com.google.common.collect.testing.google.BiMapEntrySetTester v0;
v0 := @this: com.google.common.collect.testing.google.BiMapEntrySetTester;
specialinvoke v0.<com.google.common.collect.testing.google.AbstractBiMapTester: void <init>()>();
return;
}
public void testSetValue_valueAbsent()
{
com.google.common.collect.BiMap v1;
java.util.Map$Entry v14;
java.util.Iterator v3;
java.util.Set v2;
java.lang.Object v10, v11, v12, v13, v5, v6, v7, v9;
com.google.common.collect.testing.google.BiMapEntrySetTester v0;
boolean v4, v8;
v0 := @this: com.google.common.collect.testing.google.BiMapEntrySetTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapEntrySetTester: com.google.common.collect.BiMap getMap()>();
v2 = interfaceinvoke v1.<com.google.common.collect.BiMap: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
v7 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapEntrySetTester: java.lang.Object k0()>();
v8 = virtualinvoke v6.<java.lang.Object: boolean equals(java.lang.Object)>(v7);
if v8 == 0 goto label1;
v9 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapEntrySetTester: java.lang.Object v0()>();
v10 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapEntrySetTester: java.lang.Object v3()>();
v11 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>(v10);
staticinvoke <com.google.common.collect.testing.google.BiMapEntrySetTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("entry.setValue() should return the old value", v9, v11);
goto label1;
label2:
v12 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapEntrySetTester: java.lang.Object k0()>();
v13 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapEntrySetTester: java.lang.Object v3()>();
v14 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapEntrySetTester: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>(v12, v13);
virtualinvoke v0.<com.google.common.collect.testing.google.BiMapEntrySetTester: void expectReplacement(java.util.Map$Entry)>(v14);
return;
}
public void testSetValue_valuePresent()
{
com.google.common.collect.BiMap v1;
java.util.Iterator v3;
java.util.Set v2;
java.lang.IllegalArgumentException v10;
java.lang.Object v5, v6, v7, v9;
com.google.common.collect.testing.google.BiMapEntrySetTester v0;
boolean v4, v8;
v0 := @this: com.google.common.collect.testing.google.BiMapEntrySetTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapEntrySetTester: com.google.common.collect.BiMap getMap()>();
v2 = interfaceinvoke v1.<com.google.common.collect.BiMap: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label5;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
v7 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapEntrySetTester: java.lang.Object k0()>();
v8 = virtualinvoke v6.<java.lang.Object: boolean equals(java.lang.Object)>(v7);
if v8 == 0 goto label1;
label2:
v9 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapEntrySetTester: java.lang.Object v1()>();
interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>(v9);
staticinvoke <com.google.common.collect.testing.google.BiMapEntrySetTester: void fail(java.lang.String)>("Expected IllegalArgumentException");
label3:
goto label1;
label4:
v10 := @caughtexception;
goto label1;
label5:
virtualinvoke v0.<com.google.common.collect.testing.google.BiMapEntrySetTester: void expectUnchanged()>();
return;
catch java.lang.IllegalArgumentException from label2 to label3 with label4;
}
public void testSetValueNullUnsupported()
{
com.google.common.collect.BiMap v1;
java.util.Iterator v3;
java.util.Set v2;
java.lang.Object v5;
com.google.common.collect.testing.google.BiMapEntrySetTester v0;
java.lang.NullPointerException v6;
boolean v4;
v0 := @this: com.google.common.collect.testing.google.BiMapEntrySetTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapEntrySetTester: com.google.common.collect.BiMap getMap()>();
v2 = interfaceinvoke v1.<com.google.common.collect.BiMap: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label6;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
label2:
interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.google.BiMapEntrySetTester: void fail(java.lang.String)>("Expected NullPointerException");
label3:
goto label5;
label4:
v6 := @caughtexception;
label5:
virtualinvoke v0.<com.google.common.collect.testing.google.BiMapEntrySetTester: void expectUnchanged()>();
goto label1;
label6:
return;
catch java.lang.NullPointerException from label2 to label3 with label4;
}
public void testSetValueNullSupported()
{
com.google.common.collect.BiMap v1;
java.util.Map$Entry v10;
java.util.Iterator v3;
java.util.Set v2;
java.lang.Object v5, v6, v7, v9;
com.google.common.collect.testing.google.BiMapEntrySetTester v0;
boolean v4, v8;
v0 := @this: com.google.common.collect.testing.google.BiMapEntrySetTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapEntrySetTester: com.google.common.collect.BiMap getMap()>();
v2 = interfaceinvoke v1.<com.google.common.collect.BiMap: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
v7 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapEntrySetTester: java.lang.Object k0()>();
v8 = virtualinvoke v6.<java.lang.Object: boolean equals(java.lang.Object)>(v7);
if v8 == 0 goto label1;
interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>(null);
goto label1;
label2:
v9 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapEntrySetTester: java.lang.Object k0()>();
v10 = virtualinvoke v0.<com.google.common.collect.testing.google.BiMapEntrySetTester: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>(v9, null);
virtualinvoke v0.<com.google.common.collect.testing.google.BiMapEntrySetTester: void expectReplacement(java.util.Map$Entry)>(v10);
return;
}
}