public class com.google.common.collect.testing.google.MapGenerators$ImmutableMapValuesAsSingletonSetGenerator extends java.lang.Object implements com.google.common.collect.testing.TestMapGenerator
{
public void <init>()
{
com.google.common.collect.testing.google.MapGenerators$ImmutableMapValuesAsSingletonSetGenerator v0;
v0 := @this: com.google.common.collect.testing.google.MapGenerators$ImmutableMapValuesAsSingletonSetGenerator;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public com.google.common.collect.testing.SampleElements samples()
{
java.util.Map$Entry v11, v13, v3, v6, v8;
com.google.common.collect.testing.SampleElements v1;
java.util.Collection v10, v12, v2, v5, v7;
com.google.common.collect.testing.google.MapGenerators$ImmutableMapValuesAsSingletonSetGenerator v0;
int v4, v9;
v0 := @this: com.google.common.collect.testing.google.MapGenerators$ImmutableMapValuesAsSingletonSetGenerator;
v1 = new com.google.common.collect.testing.SampleElements;
v2 = staticinvoke <com.google.common.collect.testing.google.MapGenerators$ImmutableMapValuesAsSingletonSetGenerator: java.util.Collection collectionOf(int)>(10000);
v3 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>("one", v2);
v4 = (int) -2000;
v5 = staticinvoke <com.google.common.collect.testing.google.MapGenerators$ImmutableMapValuesAsSingletonSetGenerator: java.util.Collection collectionOf(int)>(v4);
v6 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>("two", v5);
v7 = staticinvoke <com.google.common.collect.testing.google.MapGenerators$ImmutableMapValuesAsSingletonSetGenerator: java.util.Collection collectionOf(int)>(300);
v8 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>("three", v7);
v9 = (int) -40;
v10 = staticinvoke <com.google.common.collect.testing.google.MapGenerators$ImmutableMapValuesAsSingletonSetGenerator: java.util.Collection collectionOf(int)>(v9);
v11 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>("four", v10);
v12 = staticinvoke <com.google.common.collect.testing.google.MapGenerators$ImmutableMapValuesAsSingletonSetGenerator: java.util.Collection collectionOf(int)>(5);
v13 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>("five", v12);
specialinvoke v1.<com.google.common.collect.testing.SampleElements: void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(v3, v6, v8, v11, v13);
return v1;
}
private static java.util.Collection collectionOf(int)
{
int v0;
com.google.common.collect.ImmutableSet v2;
java.lang.Integer v1;
v0 := @parameter0: int;
v1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v0);
v2 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of(java.lang.Object)>(v1);
return v2;
}
public transient java.util.Map create(java.lang.Object[])
{
java.lang.Object[] v1;
com.google.common.collect.ImmutableMap v11, v9;
com.google.common.collect.ImmutableMap$Builder v2;
com.google.common.collect.testing.google.MapGenerators$ImmutableMapValuesAsSingletonSetGenerator v0;
int v3, v4;
java.lang.Object v5, v6, v7, v8;
com.google.common.collect.ImmutableSetMultimap v10;
v0 := @this: com.google.common.collect.testing.google.MapGenerators$ImmutableMapValuesAsSingletonSetGenerator;
v1 := @parameter0: java.lang.Object[];
v2 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap$Builder builder()>();
v3 = lengthof v1;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v1[v4];
v6 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getValue()>();
v7 = staticinvoke <com.google.common.collect.Iterables: java.lang.Object getOnlyElement(java.lang.Iterable)>(v6);
v8 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
virtualinvoke v2.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>(v8, v7);
v4 = v4 + 1;
goto label1;
label2:
v9 = virtualinvoke v2.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap buildOrThrow()>();
v10 = virtualinvoke v9.<com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableSetMultimap asMultimap()>();
v11 = virtualinvoke v10.<com.google.common.collect.ImmutableSetMultimap: com.google.common.collect.ImmutableMap asMap()>();
return v11;
}
public java.util.Map$Entry[] createArray(int)
{
int v1;
com.google.common.collect.testing.google.MapGenerators$ImmutableMapValuesAsSingletonSetGenerator v0;
java.util.Map$Entry[] v2;
v0 := @this: com.google.common.collect.testing.google.MapGenerators$ImmutableMapValuesAsSingletonSetGenerator;
v1 := @parameter0: int;
v2 = newarray (java.util.Map$Entry)[v1];
return v2;
}
public java.lang.Iterable order(java.util.List)
{
java.util.List v1;
com.google.common.collect.testing.google.MapGenerators$ImmutableMapValuesAsSingletonSetGenerator v0;
v0 := @this: com.google.common.collect.testing.google.MapGenerators$ImmutableMapValuesAsSingletonSetGenerator;
v1 := @parameter0: java.util.List;
return v1;
}
public java.lang.String[] createKeyArray(int)
{
int v1;
java.lang.String[] v2;
com.google.common.collect.testing.google.MapGenerators$ImmutableMapValuesAsSingletonSetGenerator v0;
v0 := @this: com.google.common.collect.testing.google.MapGenerators$ImmutableMapValuesAsSingletonSetGenerator;
v1 := @parameter0: int;
v2 = newarray (java.lang.String)[v1];
return v2;
}
public com.google.common.collect.ImmutableSet[] createValueArray(int)
{
int v1;
com.google.common.collect.ImmutableSet[] v2;
com.google.common.collect.testing.google.MapGenerators$ImmutableMapValuesAsSingletonSetGenerator v0;
v0 := @this: com.google.common.collect.testing.google.MapGenerators$ImmutableMapValuesAsSingletonSetGenerator;
v1 := @parameter0: int;
v2 = newarray (com.google.common.collect.ImmutableSet)[v1];
return v2;
}
}