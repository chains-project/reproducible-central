public class com.google.common.collect.testing.google.MultimapPutAllMultimapTester extends com.google.common.collect.testing.google.AbstractMultimapTester
{
public void <init>()
{
com.google.common.collect.testing.google.MultimapPutAllMultimapTester v0;
v0 := @this: com.google.common.collect.testing.google.MultimapPutAllMultimapTester;
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultimapTester: void <init>()>();
return;
}
public void testPutUnsupported()
{
java.lang.UnsupportedOperationException v8;
java.util.Map$Entry v6;
java.lang.Object[] v3;
com.google.common.collect.Multimap v1;
java.lang.Object v2, v4, v5, v7;
com.google.common.collect.testing.google.MultimapPutAllMultimapTester v0;
v0 := @this: com.google.common.collect.testing.google.MultimapPutAllMultimapTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: com.google.common.collect.Multimap multimap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: java.lang.Object getSubjectGenerator()>();
v3 = newarray (java.lang.Object)[1];
v4 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: java.lang.Object k3()>();
v5 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: java.lang.Object v3()>();
v6 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(v4, v5);
v3[0] = v6;
v7 = interfaceinvoke v2.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.lang.Object create(java.lang.Object[])>(v3);
interfaceinvoke v1.<com.google.common.collect.Multimap: boolean putAll(com.google.common.collect.Multimap)>(v7);
staticinvoke <com.google.common.collect.testing.google.MultimapPutAllMultimapTester: void fail(java.lang.String)>("Expected UnsupportedOperationException");
label2:
goto label4;
label3:
v8 := @caughtexception;
label4:
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testPutAllIntoEmpty()
{
java.lang.Object[] v2;
com.google.common.collect.Multimap v4, v7, v9;
java.lang.Object v1, v3;
com.google.common.collect.testing.google.MultimapPutAllMultimapTester v0;
boolean v5, v6, v8;
v0 := @this: com.google.common.collect.testing.google.MultimapPutAllMultimapTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: java.lang.Object getSubjectGenerator()>();
v2 = newarray (java.lang.Object)[0];
v3 = interfaceinvoke v1.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.lang.Object create(java.lang.Object[])>(v2);
v4 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: com.google.common.collect.Multimap multimap()>();
v5 = interfaceinvoke v4.<com.google.common.collect.Multimap: boolean isEmpty()>();
if v5 != 0 goto label1;
v6 = 1;
goto label2;
label1:
v6 = 0;
label2:
v7 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: com.google.common.collect.Multimap multimap()>();
v8 = interfaceinvoke v3.<com.google.common.collect.Multimap: boolean putAll(com.google.common.collect.Multimap)>(v7);
staticinvoke <com.google.common.collect.testing.google.MultimapPutAllMultimapTester: void assertEquals(boolean,boolean)>(v6, v8);
v9 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: com.google.common.collect.Multimap multimap()>();
staticinvoke <com.google.common.collect.testing.google.MultimapPutAllMultimapTester: void assertEquals(java.lang.Object,java.lang.Object)>(v9, v3);
return;
}
public void testPutAll()
{
java.lang.Object[] v2;
com.google.common.collect.Multimap v10, v12, v16;
com.google.common.collect.testing.google.MultimapPutAllMultimapTester v0;
boolean v11, v15, v19;
java.util.Map$Entry v5, v8;
java.lang.Object v1, v13, v14, v17, v18, v3, v4, v6, v7, v9;
v0 := @this: com.google.common.collect.testing.google.MultimapPutAllMultimapTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: java.lang.Object getSubjectGenerator()>();
v2 = newarray (java.lang.Object)[2];
v3 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: java.lang.Object k0()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: java.lang.Object v3()>();
v5 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(v3, v4);
v2[0] = v5;
v6 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: java.lang.Object k3()>();
v7 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: java.lang.Object v3()>();
v8 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(v6, v7);
v2[1] = v8;
v9 = interfaceinvoke v1.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.lang.Object create(java.lang.Object[])>(v2);
v10 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: com.google.common.collect.Multimap multimap()>();
v11 = interfaceinvoke v10.<com.google.common.collect.Multimap: boolean putAll(com.google.common.collect.Multimap)>(v9);
staticinvoke <com.google.common.collect.testing.google.MultimapPutAllMultimapTester: void assertTrue(boolean)>(v11);
v12 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: com.google.common.collect.Multimap multimap()>();
v13 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: java.lang.Object k0()>();
v14 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: java.lang.Object v3()>();
v15 = interfaceinvoke v12.<com.google.common.collect.Multimap: boolean containsEntry(java.lang.Object,java.lang.Object)>(v13, v14);
staticinvoke <com.google.common.collect.testing.google.MultimapPutAllMultimapTester: void assertTrue(boolean)>(v15);
v16 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: com.google.common.collect.Multimap multimap()>();
v17 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: java.lang.Object k3()>();
v18 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: java.lang.Object v3()>();
v19 = interfaceinvoke v16.<com.google.common.collect.Multimap: boolean containsEntry(java.lang.Object,java.lang.Object)>(v17, v18);
staticinvoke <com.google.common.collect.testing.google.MultimapPutAllMultimapTester: void assertTrue(boolean)>(v19);
return;
}
public void testPutAllWithNullValue()
{
java.util.Map$Entry v4;
java.lang.Object[] v2;
com.google.common.collect.Multimap v6, v8;
java.lang.Object v1, v3, v5, v9;
com.google.common.collect.testing.google.MultimapPutAllMultimapTester v0;
boolean v10, v7;
v0 := @this: com.google.common.collect.testing.google.MultimapPutAllMultimapTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: java.lang.Object getSubjectGenerator()>();
v2 = newarray (java.lang.Object)[1];
v3 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: java.lang.Object k0()>();
v4 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(v3, null);
v2[0] = v4;
v5 = interfaceinvoke v1.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.lang.Object create(java.lang.Object[])>(v2);
v6 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: com.google.common.collect.Multimap multimap()>();
v7 = interfaceinvoke v6.<com.google.common.collect.Multimap: boolean putAll(com.google.common.collect.Multimap)>(v5);
staticinvoke <com.google.common.collect.testing.google.MultimapPutAllMultimapTester: void assertTrue(boolean)>(v7);
v8 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: com.google.common.collect.Multimap multimap()>();
v9 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: java.lang.Object k0()>();
v10 = interfaceinvoke v8.<com.google.common.collect.Multimap: boolean containsEntry(java.lang.Object,java.lang.Object)>(v9, null);
staticinvoke <com.google.common.collect.testing.google.MultimapPutAllMultimapTester: void assertTrue(boolean)>(v10);
return;
}
public void testPutAllWithNullKey()
{
java.util.Map$Entry v4;
java.lang.Object[] v2;
com.google.common.collect.Multimap v6, v8;
java.lang.Object v1, v3, v5, v9;
com.google.common.collect.testing.google.MultimapPutAllMultimapTester v0;
boolean v10, v7;
v0 := @this: com.google.common.collect.testing.google.MultimapPutAllMultimapTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: java.lang.Object getSubjectGenerator()>();
v2 = newarray (java.lang.Object)[1];
v3 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: java.lang.Object v0()>();
v4 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(null, v3);
v2[0] = v4;
v5 = interfaceinvoke v1.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.lang.Object create(java.lang.Object[])>(v2);
v6 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: com.google.common.collect.Multimap multimap()>();
v7 = interfaceinvoke v6.<com.google.common.collect.Multimap: boolean putAll(com.google.common.collect.Multimap)>(v5);
staticinvoke <com.google.common.collect.testing.google.MultimapPutAllMultimapTester: void assertTrue(boolean)>(v7);
v8 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: com.google.common.collect.Multimap multimap()>();
v9 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: java.lang.Object v0()>();
v10 = interfaceinvoke v8.<com.google.common.collect.Multimap: boolean containsEntry(java.lang.Object,java.lang.Object)>(null, v9);
staticinvoke <com.google.common.collect.testing.google.MultimapPutAllMultimapTester: void assertTrue(boolean)>(v10);
return;
}
public void testPutAllRejectsNullValue()
{
java.util.Map$Entry v4;
java.lang.Object[] v2;
com.google.common.collect.Multimap v6;
java.lang.NullPointerException v7;
java.lang.Object v1, v3, v5;
com.google.common.collect.testing.google.MultimapPutAllMultimapTester v0;
v0 := @this: com.google.common.collect.testing.google.MultimapPutAllMultimapTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: java.lang.Object getSubjectGenerator()>();
v2 = newarray (java.lang.Object)[1];
v3 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: java.lang.Object k0()>();
v4 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(v3, null);
v2[0] = v4;
v5 = interfaceinvoke v1.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.lang.Object create(java.lang.Object[])>(v2);
label1:
v6 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: com.google.common.collect.Multimap multimap()>();
interfaceinvoke v6.<com.google.common.collect.Multimap: boolean putAll(com.google.common.collect.Multimap)>(v5);
staticinvoke <com.google.common.collect.testing.google.MultimapPutAllMultimapTester: void fail(java.lang.String)>("Expected NullPointerException");
label2:
goto label4;
label3:
v7 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: void expectUnchanged()>();
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testPutAllRejectsNullKey()
{
java.util.Map$Entry v4;
java.lang.Object[] v2;
com.google.common.collect.Multimap v6;
java.lang.NullPointerException v7;
java.lang.Object v1, v3, v5;
com.google.common.collect.testing.google.MultimapPutAllMultimapTester v0;
v0 := @this: com.google.common.collect.testing.google.MultimapPutAllMultimapTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: java.lang.Object getSubjectGenerator()>();
v2 = newarray (java.lang.Object)[1];
v3 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: java.lang.Object v0()>();
v4 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(null, v3);
v2[0] = v4;
v5 = interfaceinvoke v1.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.lang.Object create(java.lang.Object[])>(v2);
label1:
v6 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: com.google.common.collect.Multimap multimap()>();
interfaceinvoke v6.<com.google.common.collect.Multimap: boolean putAll(com.google.common.collect.Multimap)>(v5);
staticinvoke <com.google.common.collect.testing.google.MultimapPutAllMultimapTester: void fail(java.lang.String)>("Expected NullPointerException");
label2:
goto label4;
label3:
v7 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: void expectUnchanged()>();
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testPutAllPropagatesToGet()
{
java.lang.Object[] v2;
com.google.common.collect.Multimap v10, v14;
int v13, v16, v17;
com.google.common.collect.testing.google.MultimapPutAllMultimapTester v0;
boolean v15;
java.util.Map$Entry v5, v8;
java.util.Collection v12;
java.lang.Object v1, v11, v18, v3, v4, v6, v7, v9;
v0 := @this: com.google.common.collect.testing.google.MultimapPutAllMultimapTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: java.lang.Object getSubjectGenerator()>();
v2 = newarray (java.lang.Object)[2];
v3 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: java.lang.Object k0()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: java.lang.Object v3()>();
v5 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(v3, v4);
v2[0] = v5;
v6 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: java.lang.Object k3()>();
v7 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: java.lang.Object v3()>();
v8 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.Map$Entry mapEntry(java.lang.Object,java.lang.Object)>(v6, v7);
v2[1] = v8;
v9 = interfaceinvoke v1.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.lang.Object create(java.lang.Object[])>(v2);
v10 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: com.google.common.collect.Multimap multimap()>();
v11 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: java.lang.Object k0()>();
v12 = interfaceinvoke v10.<com.google.common.collect.Multimap: java.util.Collection get(java.lang.Object)>(v11);
v13 = interfaceinvoke v12.<java.util.Collection: int size()>();
v14 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: com.google.common.collect.Multimap multimap()>();
v15 = interfaceinvoke v14.<com.google.common.collect.Multimap: boolean putAll(com.google.common.collect.Multimap)>(v9);
staticinvoke <com.google.common.collect.testing.google.MultimapPutAllMultimapTester: void assertTrue(boolean)>(v15);
v16 = v13 + 1;
v17 = interfaceinvoke v12.<java.util.Collection: int size()>();
staticinvoke <com.google.common.collect.testing.google.MultimapPutAllMultimapTester: void assertEquals(int,int)>(v16, v17);
v18 = virtualinvoke v0.<com.google.common.collect.testing.google.MultimapPutAllMultimapTester: java.lang.Object v3()>();
staticinvoke <com.google.common.collect.testing.Helpers: void assertContains(java.lang.Iterable,java.lang.Object)>(v12, v18);
return;
}
}