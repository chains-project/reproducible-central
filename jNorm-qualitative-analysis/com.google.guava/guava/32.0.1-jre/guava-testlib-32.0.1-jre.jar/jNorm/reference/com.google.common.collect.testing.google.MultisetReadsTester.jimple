public class com.google.common.collect.testing.google.MultisetReadsTester extends com.google.common.collect.testing.google.AbstractMultisetTester
{
public void <init>()
{
com.google.common.collect.testing.google.MultisetReadsTester v0;
v0 := @this: com.google.common.collect.testing.google.MultisetReadsTester;
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetTester: void <init>()>();
return;
}
public void testElementSet_contains()
{
com.google.common.collect.testing.google.MultisetReadsTester v0;
com.google.common.collect.Multiset v1;
java.util.Set v2;
java.lang.Object v3;
boolean v4;
v0 := @this: com.google.common.collect.testing.google.MultisetReadsTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetReadsTester: com.google.common.collect.Multiset getMultiset()>();
v2 = interfaceinvoke v1.<com.google.common.collect.Multiset: java.util.Set elementSet()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetReadsTester: java.lang.Object e0()>();
v4 = interfaceinvoke v2.<java.util.Set: boolean contains(java.lang.Object)>(v3);
staticinvoke <com.google.common.collect.testing.google.MultisetReadsTester: void assertTrue(java.lang.String,boolean)>("multiset.elementSet().contains(present) returned false", v4);
return;
}
public void testEntrySet_contains()
{
com.google.common.collect.testing.google.MultisetReadsTester v0;
com.google.common.collect.Multiset v1;
java.util.Set v2;
java.lang.Object v3;
com.google.common.collect.Multiset$Entry v4;
boolean v5;
v0 := @this: com.google.common.collect.testing.google.MultisetReadsTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetReadsTester: com.google.common.collect.Multiset getMultiset()>();
v2 = interfaceinvoke v1.<com.google.common.collect.Multiset: java.util.Set entrySet()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetReadsTester: java.lang.Object e0()>();
v4 = staticinvoke <com.google.common.collect.Multisets: com.google.common.collect.Multiset$Entry immutableEntry(java.lang.Object,int)>(v3, 1);
v5 = interfaceinvoke v2.<java.util.Set: boolean contains(java.lang.Object)>(v4);
staticinvoke <com.google.common.collect.testing.google.MultisetReadsTester: void assertTrue(java.lang.String,boolean)>("multiset.entrySet() didn\'t contain [present, 1]", v5);
return;
}
public void testEntrySet_contains_count0()
{
com.google.common.collect.testing.google.MultisetReadsTester v0;
com.google.common.collect.Multiset v1;
java.util.Set v2;
java.lang.Object v3;
com.google.common.collect.Multiset$Entry v4;
boolean v5;
v0 := @this: com.google.common.collect.testing.google.MultisetReadsTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetReadsTester: com.google.common.collect.Multiset getMultiset()>();
v2 = interfaceinvoke v1.<com.google.common.collect.Multiset: java.util.Set entrySet()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetReadsTester: java.lang.Object e3()>();
v4 = staticinvoke <com.google.common.collect.Multisets: com.google.common.collect.Multiset$Entry immutableEntry(java.lang.Object,int)>(v3, 0);
v5 = interfaceinvoke v2.<java.util.Set: boolean contains(java.lang.Object)>(v4);
staticinvoke <com.google.common.collect.testing.google.MultisetReadsTester: void assertFalse(java.lang.String,boolean)>("multiset.entrySet() contains [missing, 0]", v5);
return;
}
public void testEntrySet_contains_nonentry()
{
com.google.common.collect.testing.google.MultisetReadsTester v0;
com.google.common.collect.Multiset v1;
java.util.Set v2;
java.lang.Object v3;
boolean v4;
v0 := @this: com.google.common.collect.testing.google.MultisetReadsTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetReadsTester: com.google.common.collect.Multiset getMultiset()>();
v2 = interfaceinvoke v1.<com.google.common.collect.Multiset: java.util.Set entrySet()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetReadsTester: java.lang.Object e0()>();
v4 = interfaceinvoke v2.<java.util.Set: boolean contains(java.lang.Object)>(v3);
staticinvoke <com.google.common.collect.testing.google.MultisetReadsTester: void assertFalse(java.lang.String,boolean)>("multiset.entrySet() contains a non-entry", v4);
return;
}
public void testEntrySet_twice()
{
com.google.common.collect.testing.google.MultisetReadsTester v0;
com.google.common.collect.Multiset v1, v3;
java.util.Set v2, v4;
v0 := @this: com.google.common.collect.testing.google.MultisetReadsTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetReadsTester: com.google.common.collect.Multiset getMultiset()>();
v2 = interfaceinvoke v1.<com.google.common.collect.Multiset: java.util.Set entrySet()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetReadsTester: com.google.common.collect.Multiset getMultiset()>();
v4 = interfaceinvoke v3.<com.google.common.collect.Multiset: java.util.Set entrySet()>();
staticinvoke <com.google.common.collect.testing.google.MultisetReadsTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("calling multiset.entrySet() twice returned unequal sets", v2, v4);
return;
}
public void testEntrySet_hashCode_size0()
{
com.google.common.collect.testing.google.MultisetReadsTester v0;
com.google.common.collect.Multiset v1;
int v3;
java.util.Set v2;
v0 := @this: com.google.common.collect.testing.google.MultisetReadsTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetReadsTester: com.google.common.collect.Multiset getMultiset()>();
v2 = interfaceinvoke v1.<com.google.common.collect.Multiset: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: int hashCode()>();
staticinvoke <com.google.common.collect.testing.google.MultisetReadsTester: void assertEquals(java.lang.String,int,int)>("multiset.entrySet() has incorrect hash code", 0, v3);
return;
}
public void testEntrySet_hashCode_size1()
{
com.google.common.collect.testing.google.MultisetReadsTester v0;
com.google.common.collect.Multiset v4;
int v2, v3, v6;
java.util.Set v5;
java.lang.Object v1;
v0 := @this: com.google.common.collect.testing.google.MultisetReadsTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetReadsTester: java.lang.Object e0()>();
v2 = virtualinvoke v1.<java.lang.Object: int hashCode()>();
v3 = 1 ^ v2;
v4 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetReadsTester: com.google.common.collect.Multiset getMultiset()>();
v5 = interfaceinvoke v4.<com.google.common.collect.Multiset: java.util.Set entrySet()>();
v6 = interfaceinvoke v5.<java.util.Set: int hashCode()>();
staticinvoke <com.google.common.collect.testing.google.MultisetReadsTester: void assertEquals(java.lang.String,int,int)>("multiset.entrySet() has incorrect hash code", v3, v6);
return;
}
public void testEquals_yes()
{
com.google.common.collect.testing.google.MultisetReadsTester v0;
com.google.common.collect.HashMultiset v3;
com.google.common.collect.Multiset v1;
java.util.Collection v2;
boolean v4;
v0 := @this: com.google.common.collect.testing.google.MultisetReadsTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetReadsTester: com.google.common.collect.Multiset getMultiset()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetReadsTester: java.util.Collection getSampleElements()>();
v3 = staticinvoke <com.google.common.collect.HashMultiset: com.google.common.collect.HashMultiset create(java.lang.Iterable)>(v2);
v4 = interfaceinvoke v1.<com.google.common.collect.Multiset: boolean equals(java.lang.Object)>(v3);
staticinvoke <com.google.common.collect.testing.google.MultisetReadsTester: void assertTrue(java.lang.String,boolean)>("multiset doesn\'t equal a multiset with the same elements", v4);
return;
}
public void testEquals_differentSize()
{
com.google.common.collect.testing.google.MultisetReadsTester v0;
com.google.common.collect.HashMultiset v2;
com.google.common.collect.Multiset v4;
java.util.Collection v1;
java.lang.Object v3;
boolean v5;
v0 := @this: com.google.common.collect.testing.google.MultisetReadsTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetReadsTester: java.util.Collection getSampleElements()>();
v2 = staticinvoke <com.google.common.collect.HashMultiset: com.google.common.collect.HashMultiset create(java.lang.Iterable)>(v1);
v3 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetReadsTester: java.lang.Object e0()>();
interfaceinvoke v2.<com.google.common.collect.Multiset: boolean add(java.lang.Object)>(v3);
v4 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetReadsTester: com.google.common.collect.Multiset getMultiset()>();
v5 = interfaceinvoke v4.<com.google.common.collect.Multiset: boolean equals(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.google.MultisetReadsTester: void assertFalse(java.lang.String,boolean)>("multiset equals a multiset with a different size", v5);
return;
}
public void testEquals_differentElements()
{
com.google.common.collect.testing.google.MultisetReadsTester v0;
com.google.common.collect.HashMultiset v2;
com.google.common.collect.Multiset v5;
java.util.Collection v1;
java.lang.Object v3, v4;
boolean v6;
v0 := @this: com.google.common.collect.testing.google.MultisetReadsTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetReadsTester: java.util.Collection getSampleElements()>();
v2 = staticinvoke <com.google.common.collect.HashMultiset: com.google.common.collect.HashMultiset create(java.lang.Iterable)>(v1);
v3 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetReadsTester: java.lang.Object e0()>();
interfaceinvoke v2.<com.google.common.collect.Multiset: boolean remove(java.lang.Object)>(v3);
v4 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetReadsTester: java.lang.Object e3()>();
interfaceinvoke v2.<com.google.common.collect.Multiset: boolean add(java.lang.Object)>(v4);
v5 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetReadsTester: com.google.common.collect.Multiset getMultiset()>();
v6 = interfaceinvoke v5.<com.google.common.collect.Multiset: boolean equals(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.google.MultisetReadsTester: void assertFalse(java.lang.String,boolean)>("multiset equals a multiset with different elements", v6);
return;
}
public void testHashCode_size0()
{
int v2;
com.google.common.collect.testing.google.MultisetReadsTester v0;
com.google.common.collect.Multiset v1;
v0 := @this: com.google.common.collect.testing.google.MultisetReadsTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetReadsTester: com.google.common.collect.Multiset getMultiset()>();
v2 = interfaceinvoke v1.<com.google.common.collect.Multiset: int hashCode()>();
staticinvoke <com.google.common.collect.testing.google.MultisetReadsTester: void assertEquals(java.lang.String,int,int)>("multiset has incorrect hash code", 0, v2);
return;
}
public void testHashCode_size1()
{
com.google.common.collect.testing.google.MultisetReadsTester v0;
com.google.common.collect.Multiset v4;
int v2, v3, v5;
java.lang.Object v1;
v0 := @this: com.google.common.collect.testing.google.MultisetReadsTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetReadsTester: java.lang.Object e0()>();
v2 = virtualinvoke v1.<java.lang.Object: int hashCode()>();
v3 = 1 ^ v2;
v4 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetReadsTester: com.google.common.collect.Multiset getMultiset()>();
v5 = interfaceinvoke v4.<com.google.common.collect.Multiset: int hashCode()>();
staticinvoke <com.google.common.collect.testing.google.MultisetReadsTester: void assertEquals(java.lang.String,int,int)>("multiset has incorrect hash code", v3, v5);
return;
}
}