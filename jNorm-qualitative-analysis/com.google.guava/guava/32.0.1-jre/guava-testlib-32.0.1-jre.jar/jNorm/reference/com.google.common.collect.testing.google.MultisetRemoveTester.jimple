public class com.google.common.collect.testing.google.MultisetRemoveTester extends com.google.common.collect.testing.google.AbstractMultisetTester
{
public void <init>()
{
com.google.common.collect.testing.google.MultisetRemoveTester v0;
v0 := @this: com.google.common.collect.testing.google.MultisetRemoveTester;
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetTester: void <init>()>();
return;
}
public void testRemoveNegative()
{
com.google.common.collect.Multiset v1;
com.google.common.collect.testing.google.MultisetRemoveTester v0;
int v3;
java.lang.Object v2;
java.lang.IllegalArgumentException v4;
v0 := @this: com.google.common.collect.testing.google.MultisetRemoveTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: com.google.common.collect.Multiset getMultiset()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: java.lang.Object e0()>();
v3 = (int) -1;
interfaceinvoke v1.<com.google.common.collect.Multiset: int remove(java.lang.Object,int)>(v2, v3);
staticinvoke <com.google.common.collect.testing.google.MultisetRemoveTester: void fail(java.lang.String)>("Expected IllegalArgumentException");
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: void expectUnchanged()>();
return;
catch java.lang.IllegalArgumentException from label1 to label2 with label3;
}
public void testRemoveUnsupported()
{
java.lang.UnsupportedOperationException v3;
com.google.common.collect.Multiset v1;
com.google.common.collect.testing.google.MultisetRemoveTester v0;
java.lang.Object v2;
v0 := @this: com.google.common.collect.testing.google.MultisetRemoveTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: com.google.common.collect.Multiset getMultiset()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: java.lang.Object e0()>();
interfaceinvoke v1.<com.google.common.collect.Multiset: int remove(java.lang.Object,int)>(v2, 2);
staticinvoke <com.google.common.collect.testing.google.MultisetRemoveTester: void fail(java.lang.String)>("Expected UnsupportedOperationException");
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testRemoveZeroNoOp()
{
com.google.common.collect.Multiset v1, v4;
com.google.common.collect.testing.google.MultisetRemoveTester v0;
int v3, v6;
java.lang.Object v2, v5;
v0 := @this: com.google.common.collect.testing.google.MultisetRemoveTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: com.google.common.collect.Multiset getMultiset()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: java.lang.Object e0()>();
v3 = interfaceinvoke v1.<com.google.common.collect.Multiset: int count(java.lang.Object)>(v2);
v4 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: com.google.common.collect.Multiset getMultiset()>();
v5 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: java.lang.Object e0()>();
v6 = interfaceinvoke v4.<com.google.common.collect.Multiset: int remove(java.lang.Object,int)>(v5, 0);
staticinvoke <com.google.common.collect.testing.google.MultisetRemoveTester: void assertEquals(java.lang.String,int,int)>("old count", v3, v6);
virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: void expectUnchanged()>();
return;
}
public void testRemove_occurrences_present()
{
com.google.common.collect.Multiset v1, v4, v7;
com.google.common.collect.testing.google.MultisetRemoveTester v0;
int v3, v9;
java.lang.Object v2, v5, v8;
boolean v6;
v0 := @this: com.google.common.collect.testing.google.MultisetRemoveTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: com.google.common.collect.Multiset getMultiset()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: java.lang.Object e0()>();
v3 = interfaceinvoke v1.<com.google.common.collect.Multiset: int remove(java.lang.Object,int)>(v2, 2);
staticinvoke <com.google.common.collect.testing.google.MultisetRemoveTester: void assertEquals(java.lang.String,int,int)>("multiset.remove(present, 2) didn\'t return the old count", 1, v3);
v4 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: com.google.common.collect.Multiset getMultiset()>();
v5 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: java.lang.Object e0()>();
v6 = interfaceinvoke v4.<com.google.common.collect.Multiset: boolean contains(java.lang.Object)>(v5);
staticinvoke <com.google.common.collect.testing.google.MultisetRemoveTester: void assertFalse(java.lang.String,boolean)>("multiset contains present after multiset.remove(present, 2)", v6);
v7 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: com.google.common.collect.Multiset getMultiset()>();
v8 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: java.lang.Object e0()>();
v9 = interfaceinvoke v7.<com.google.common.collect.Multiset: int count(java.lang.Object)>(v8);
staticinvoke <com.google.common.collect.testing.google.MultisetRemoveTester: void assertEquals(int,int)>(0, v9);
return;
}
public void testRemove_some_occurrences_present()
{
com.google.common.collect.Multiset v1, v4, v7;
com.google.common.collect.testing.google.MultisetRemoveTester v0;
int v3, v9;
java.lang.Object v2, v5, v8;
boolean v6;
v0 := @this: com.google.common.collect.testing.google.MultisetRemoveTester;
virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: void initThreeCopies()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: com.google.common.collect.Multiset getMultiset()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: java.lang.Object e0()>();
v3 = interfaceinvoke v1.<com.google.common.collect.Multiset: int remove(java.lang.Object,int)>(v2, 2);
staticinvoke <com.google.common.collect.testing.google.MultisetRemoveTester: void assertEquals(java.lang.String,int,int)>("multiset.remove(present, 2) didn\'t return the old count", 3, v3);
v4 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: com.google.common.collect.Multiset getMultiset()>();
v5 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: java.lang.Object e0()>();
v6 = interfaceinvoke v4.<com.google.common.collect.Multiset: boolean contains(java.lang.Object)>(v5);
staticinvoke <com.google.common.collect.testing.google.MultisetRemoveTester: void assertTrue(java.lang.String,boolean)>("multiset contains present after multiset.remove(present, 2)", v6);
v7 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: com.google.common.collect.Multiset getMultiset()>();
v8 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: java.lang.Object e0()>();
v9 = interfaceinvoke v7.<com.google.common.collect.Multiset: int count(java.lang.Object)>(v8);
staticinvoke <com.google.common.collect.testing.google.MultisetRemoveTester: void assertEquals(int,int)>(1, v9);
return;
}
public void testRemove_occurrences_absent()
{
com.google.common.collect.Multiset v1, v4, v7;
com.google.common.collect.testing.google.MultisetRemoveTester v0;
java.util.Set v2, v8;
int v3, v6, v9;
java.lang.Object v5;
v0 := @this: com.google.common.collect.testing.google.MultisetRemoveTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: com.google.common.collect.Multiset getMultiset()>();
v2 = interfaceinvoke v1.<com.google.common.collect.Multiset: java.util.Set elementSet()>();
v3 = interfaceinvoke v2.<java.util.Set: int size()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: com.google.common.collect.Multiset getMultiset()>();
v5 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: java.lang.Object e3()>();
v6 = interfaceinvoke v4.<com.google.common.collect.Multiset: int remove(java.lang.Object,int)>(v5, 2);
staticinvoke <com.google.common.collect.testing.google.MultisetRemoveTester: void assertEquals(java.lang.String,int,int)>("multiset.remove(absent, 0) didn\'t return 0", 0, v6);
v7 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: com.google.common.collect.Multiset getMultiset()>();
v8 = interfaceinvoke v7.<com.google.common.collect.Multiset: java.util.Set elementSet()>();
v9 = interfaceinvoke v8.<java.util.Set: int size()>();
staticinvoke <com.google.common.collect.testing.google.MultisetRemoveTester: void assertEquals(int,int)>(v3, v9);
return;
}
public void testRemove_occurrences_unsupported_absent()
{
java.lang.UnsupportedOperationException v4;
com.google.common.collect.Multiset v1;
com.google.common.collect.testing.google.MultisetRemoveTester v0;
int v3;
java.lang.Object v2;
v0 := @this: com.google.common.collect.testing.google.MultisetRemoveTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: com.google.common.collect.Multiset getMultiset()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: java.lang.Object e3()>();
v3 = interfaceinvoke v1.<com.google.common.collect.Multiset: int remove(java.lang.Object,int)>(v2, 2);
staticinvoke <com.google.common.collect.testing.google.MultisetRemoveTester: void assertEquals(java.lang.String,int,int)>("multiset.remove(absent, 2) didn\'t return 0 or throw an exception", 0, v3);
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testRemove_occurrences_0()
{
com.google.common.collect.Multiset v1, v4;
com.google.common.collect.testing.google.MultisetRemoveTester v0;
int v3, v6;
java.lang.Object v2, v5;
v0 := @this: com.google.common.collect.testing.google.MultisetRemoveTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: com.google.common.collect.Multiset getMultiset()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: java.lang.Object e0()>();
v3 = interfaceinvoke v1.<com.google.common.collect.Multiset: int count(java.lang.Object)>(v2);
v4 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: com.google.common.collect.Multiset getMultiset()>();
v5 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: java.lang.Object e0()>();
v6 = interfaceinvoke v4.<com.google.common.collect.Multiset: int remove(java.lang.Object,int)>(v5, 0);
staticinvoke <com.google.common.collect.testing.google.MultisetRemoveTester: void assertEquals(java.lang.String,int,int)>("multiset.remove(E, 0) didn\'t return the old count", v3, v6);
return;
}
public void testRemove_occurrences_negative()
{
com.google.common.collect.Multiset v1;
com.google.common.collect.testing.google.MultisetRemoveTester v0;
int v3;
java.lang.Object v2;
java.lang.IllegalArgumentException v4;
v0 := @this: com.google.common.collect.testing.google.MultisetRemoveTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: com.google.common.collect.Multiset getMultiset()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: java.lang.Object e0()>();
v3 = (int) -1;
interfaceinvoke v1.<com.google.common.collect.Multiset: int remove(java.lang.Object,int)>(v2, v3);
staticinvoke <com.google.common.collect.testing.google.MultisetRemoveTester: void fail(java.lang.String)>("multiset.remove(E, -1) didn\'t throw an exception");
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
return;
catch java.lang.IllegalArgumentException from label1 to label2 with label3;
}
public void testRemove_occurrences_wrongType()
{
com.google.common.collect.Multiset v1;
com.google.common.collect.testing.WrongType v2;
com.google.common.collect.testing.google.MultisetRemoveTester v0;
int v3;
v0 := @this: com.google.common.collect.testing.google.MultisetRemoveTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: com.google.common.collect.Multiset getMultiset()>();
v2 = <com.google.common.collect.testing.WrongType: com.google.common.collect.testing.WrongType VALUE>;
v3 = interfaceinvoke v1.<com.google.common.collect.Multiset: int remove(java.lang.Object,int)>(v2, 1);
staticinvoke <com.google.common.collect.testing.google.MultisetRemoveTester: void assertEquals(java.lang.String,int,int)>("multiset.remove(wrongType, 1) didn\'t return 0", 0, v3);
return;
}
public void testRemove_nullPresent()
{
com.google.common.collect.Multiset v1, v3, v5;
com.google.common.collect.testing.google.MultisetRemoveTester v0;
int v2, v6;
boolean v4;
v0 := @this: com.google.common.collect.testing.google.MultisetRemoveTester;
virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: void initCollectionWithNullElement()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: com.google.common.collect.Multiset getMultiset()>();
v2 = interfaceinvoke v1.<com.google.common.collect.Multiset: int remove(java.lang.Object,int)>(null, 2);
staticinvoke <com.google.common.collect.testing.google.MultisetRemoveTester: void assertEquals(int,int)>(1, v2);
v3 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: com.google.common.collect.Multiset getMultiset()>();
v4 = interfaceinvoke v3.<com.google.common.collect.Multiset: boolean contains(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.google.MultisetRemoveTester: void assertFalse(java.lang.String,boolean)>("multiset contains present after multiset.remove(present, 2)", v4);
v5 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: com.google.common.collect.Multiset getMultiset()>();
v6 = interfaceinvoke v5.<com.google.common.collect.Multiset: int count(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.google.MultisetRemoveTester: void assertEquals(int,int)>(0, v6);
return;
}
public void testRemove_nullAbsent()
{
com.google.common.collect.testing.google.MultisetRemoveTester v0;
int v2;
com.google.common.collect.Multiset v1;
v0 := @this: com.google.common.collect.testing.google.MultisetRemoveTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: com.google.common.collect.Multiset getMultiset()>();
v2 = interfaceinvoke v1.<com.google.common.collect.Multiset: int remove(java.lang.Object,int)>(null, 2);
staticinvoke <com.google.common.collect.testing.google.MultisetRemoveTester: void assertEquals(int,int)>(0, v2);
return;
}
public void testRemove_nullForbidden()
{
com.google.common.collect.testing.google.MultisetRemoveTester v0;
com.google.common.collect.Multiset v1;
java.lang.NullPointerException v2;
v0 := @this: com.google.common.collect.testing.google.MultisetRemoveTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: com.google.common.collect.Multiset getMultiset()>();
interfaceinvoke v1.<com.google.common.collect.Multiset: int remove(java.lang.Object,int)>(null, 2);
staticinvoke <com.google.common.collect.testing.google.MultisetRemoveTester: void fail(java.lang.String)>("Expected NullPointerException");
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testRemoveAllIgnoresCount()
{
com.google.common.collect.Multiset v1, v5;
com.google.common.collect.testing.google.MultisetRemoveTester v0;
java.util.Set v3;
java.lang.Object v2;
boolean v4;
v0 := @this: com.google.common.collect.testing.google.MultisetRemoveTester;
virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: void initThreeCopies()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: com.google.common.collect.Multiset getMultiset()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: java.lang.Object e0()>();
v3 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(v2);
v4 = interfaceinvoke v1.<com.google.common.collect.Multiset: boolean removeAll(java.util.Collection)>(v3);
staticinvoke <com.google.common.collect.testing.google.MultisetRemoveTester: void assertTrue(boolean)>(v4);
v5 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: com.google.common.collect.Multiset getMultiset()>();
staticinvoke <com.google.common.collect.testing.Helpers: void assertEmpty(java.lang.Iterable)>(v5);
return;
}
public void testRetainAllIgnoresCount()
{
java.util.List v2;
com.google.common.collect.Multiset v1, v3;
com.google.common.collect.testing.google.MultisetRemoveTester v0;
java.util.Set v5;
java.lang.Object v4;
boolean v6;
v0 := @this: com.google.common.collect.testing.google.MultisetRemoveTester;
virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: void initThreeCopies()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: com.google.common.collect.Multiset getMultiset()>();
v2 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.List copyToList(java.lang.Iterable)>(v1);
v3 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: com.google.common.collect.Multiset getMultiset()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: java.lang.Object e0()>();
v5 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(v4);
v6 = interfaceinvoke v3.<com.google.common.collect.Multiset: boolean retainAll(java.util.Collection)>(v5);
staticinvoke <com.google.common.collect.testing.google.MultisetRemoveTester: void assertFalse(boolean)>(v6);
virtualinvoke v0.<com.google.common.collect.testing.google.MultisetRemoveTester: void expectContents(java.util.Collection)>(v2);
return;
}
public static java.util.List getRemoveDuplicateInitializingMethods()
{
java.util.List v2;
java.lang.reflect.Method v1;
java.lang.reflect.Method[] v0;
v0 = newarray (java.lang.reflect.Method)[1];
v1 = staticinvoke <com.google.common.collect.testing.Helpers: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String)>(class "Lcom/google/common/collect/testing/google/MultisetRemoveTester;", "testRemove_some_occurrences_present");
v0[0] = v1;
v2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v0);
return v2;
}
}