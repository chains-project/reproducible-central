public class com.google.common.collect.testing.google.MultisetSetCountConditionallyTester extends com.google.common.collect.testing.google.AbstractMultisetSetCountTester
{
public void <init>()
{
com.google.common.collect.testing.google.MultisetSetCountConditionallyTester v0;
v0 := @this: com.google.common.collect.testing.google.MultisetSetCountConditionallyTester;
specialinvoke v0.<com.google.common.collect.testing.google.AbstractMultisetSetCountTester: void <init>()>();
return;
}
void setCountCheckReturnValue(java.lang.Object, int)
{
com.google.common.collect.testing.google.MultisetSetCountConditionallyTester v0;
int v2;
java.lang.Object v1;
boolean v3;
v0 := @this: com.google.common.collect.testing.google.MultisetSetCountConditionallyTester;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: int;
v3 = specialinvoke v0.<com.google.common.collect.testing.google.MultisetSetCountConditionallyTester: boolean setCount(java.lang.Object,int)>(v1, v2);
staticinvoke <com.google.common.collect.testing.google.MultisetSetCountConditionallyTester: void assertTrue(java.lang.String,boolean)>("setCount() with the correct expected present count should return true", v3);
return;
}
void setCountNoCheckReturnValue(java.lang.Object, int)
{
int v2;
java.lang.Object v1;
com.google.common.collect.testing.google.MultisetSetCountConditionallyTester v0;
v0 := @this: com.google.common.collect.testing.google.MultisetSetCountConditionallyTester;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: int;
specialinvoke v0.<com.google.common.collect.testing.google.MultisetSetCountConditionallyTester: boolean setCount(java.lang.Object,int)>(v1, v2);
return;
}
private boolean setCount(java.lang.Object, int)
{
com.google.common.collect.testing.google.MultisetSetCountConditionallyTester v0;
com.google.common.collect.Multiset v3, v4;
int v2, v5;
java.lang.Object v1;
boolean v6;
v0 := @this: com.google.common.collect.testing.google.MultisetSetCountConditionallyTester;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: int;
v3 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetSetCountConditionallyTester: com.google.common.collect.Multiset getMultiset()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetSetCountConditionallyTester: com.google.common.collect.Multiset getMultiset()>();
v5 = interfaceinvoke v4.<com.google.common.collect.Multiset: int count(java.lang.Object)>(v1);
v6 = interfaceinvoke v3.<com.google.common.collect.Multiset: boolean setCount(java.lang.Object,int,int)>(v1, v5, v2);
return v6;
}
private void assertSetCountNegativeOldCount()
{
com.google.common.collect.testing.google.MultisetSetCountConditionallyTester v0;
com.google.common.collect.Multiset v1;
int v3;
java.lang.Object v2;
java.lang.IllegalArgumentException v4;
v0 := @this: com.google.common.collect.testing.google.MultisetSetCountConditionallyTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetSetCountConditionallyTester: com.google.common.collect.Multiset getMultiset()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetSetCountConditionallyTester: java.lang.Object e3()>();
v3 = (int) -1;
interfaceinvoke v1.<com.google.common.collect.Multiset: boolean setCount(java.lang.Object,int,int)>(v2, v3, 1);
staticinvoke <com.google.common.collect.testing.google.MultisetSetCountConditionallyTester: void fail(java.lang.String)>("calling setCount() with a negative oldCount should throw IllegalArgumentException");
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
return;
catch java.lang.IllegalArgumentException from label1 to label2 with label3;
}
public void testSetCountConditional_negativeOldCount_addSupported()
{
com.google.common.collect.testing.google.MultisetSetCountConditionallyTester v0;
v0 := @this: com.google.common.collect.testing.google.MultisetSetCountConditionallyTester;
specialinvoke v0.<com.google.common.collect.testing.google.MultisetSetCountConditionallyTester: void assertSetCountNegativeOldCount()>();
return;
}
public void testSetCountConditional_negativeOldCount_addUnsupported()
{
java.lang.UnsupportedOperationException v1;
com.google.common.collect.testing.google.MultisetSetCountConditionallyTester v0;
v0 := @this: com.google.common.collect.testing.google.MultisetSetCountConditionallyTester;
label1:
specialinvoke v0.<com.google.common.collect.testing.google.MultisetSetCountConditionallyTester: void assertSetCountNegativeOldCount()>();
label2:
goto label4;
label3:
v1 := @caughtexception;
label4:
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testSetCountConditional_oldCountTooLarge()
{
com.google.common.collect.testing.google.MultisetSetCountConditionallyTester v0;
com.google.common.collect.Multiset v1;
java.lang.Object v2;
boolean v3;
v0 := @this: com.google.common.collect.testing.google.MultisetSetCountConditionallyTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetSetCountConditionallyTester: com.google.common.collect.Multiset getMultiset()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetSetCountConditionallyTester: java.lang.Object e0()>();
v3 = interfaceinvoke v1.<com.google.common.collect.Multiset: boolean setCount(java.lang.Object,int,int)>(v2, 2, 3);
staticinvoke <com.google.common.collect.testing.google.MultisetSetCountConditionallyTester: void assertFalse(java.lang.String,boolean)>("setCount() with a too-large oldCount should return false", v3);
virtualinvoke v0.<com.google.common.collect.testing.google.MultisetSetCountConditionallyTester: void expectUnchanged()>();
return;
}
public void testSetCountConditional_oldCountTooSmallZero()
{
com.google.common.collect.testing.google.MultisetSetCountConditionallyTester v0;
com.google.common.collect.Multiset v1;
java.lang.Object v2;
boolean v3;
v0 := @this: com.google.common.collect.testing.google.MultisetSetCountConditionallyTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetSetCountConditionallyTester: com.google.common.collect.Multiset getMultiset()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetSetCountConditionallyTester: java.lang.Object e0()>();
v3 = interfaceinvoke v1.<com.google.common.collect.Multiset: boolean setCount(java.lang.Object,int,int)>(v2, 0, 2);
staticinvoke <com.google.common.collect.testing.google.MultisetSetCountConditionallyTester: void assertFalse(java.lang.String,boolean)>("setCount() with a too-small oldCount should return false", v3);
virtualinvoke v0.<com.google.common.collect.testing.google.MultisetSetCountConditionallyTester: void expectUnchanged()>();
return;
}
public void testSetCountConditional_oldCountTooSmallNonzero()
{
java.util.List v5;
com.google.common.collect.testing.google.MultisetSetCountConditionallyTester v0;
com.google.common.collect.Multiset v1;
java.lang.Object v2, v4;
boolean v3;
v0 := @this: com.google.common.collect.testing.google.MultisetSetCountConditionallyTester;
virtualinvoke v0.<com.google.common.collect.testing.google.MultisetSetCountConditionallyTester: void initThreeCopies()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetSetCountConditionallyTester: com.google.common.collect.Multiset getMultiset()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetSetCountConditionallyTester: java.lang.Object e0()>();
v3 = interfaceinvoke v1.<com.google.common.collect.Multiset: boolean setCount(java.lang.Object,int,int)>(v2, 1, 5);
staticinvoke <com.google.common.collect.testing.google.MultisetSetCountConditionallyTester: void assertFalse(java.lang.String,boolean)>("setCount() with a too-small oldCount should return false", v3);
v4 = virtualinvoke v0.<com.google.common.collect.testing.google.MultisetSetCountConditionallyTester: java.lang.Object e0()>();
v5 = staticinvoke <java.util.Collections: java.util.List nCopies(int,java.lang.Object)>(3, v4);
virtualinvoke v0.<com.google.common.collect.testing.google.MultisetSetCountConditionallyTester: void expectContents(java.util.Collection)>(v5);
return;
}
}