public class com.google.common.collect.testing.google.SetGenerators$ContiguousSetDescendingGenerator extends com.google.common.collect.testing.google.SetGenerators$AbstractContiguousSetGenerator
{
public void <init>()
{
com.google.common.collect.testing.google.SetGenerators$ContiguousSetDescendingGenerator v0;
v0 := @this: com.google.common.collect.testing.google.SetGenerators$ContiguousSetDescendingGenerator;
specialinvoke v0.<com.google.common.collect.testing.google.SetGenerators$AbstractContiguousSetGenerator: void <init>()>();
return;
}
protected java.util.SortedSet create(java.lang.Integer[])
{
com.google.common.collect.ImmutableSortedSet v4;
com.google.common.collect.ContiguousSet v3;
java.util.SortedSet v2;
com.google.common.collect.testing.google.SetGenerators$ContiguousSetDescendingGenerator v0;
java.lang.Integer[] v1;
v0 := @this: com.google.common.collect.testing.google.SetGenerators$ContiguousSetDescendingGenerator;
v1 := @parameter0: java.lang.Integer[];
v2 = staticinvoke <com.google.common.collect.testing.google.SetGenerators: java.util.SortedSet nullCheckedTreeSet(java.lang.Comparable[])>(v1);
v3 = virtualinvoke v0.<com.google.common.collect.testing.google.SetGenerators$ContiguousSetDescendingGenerator: com.google.common.collect.ContiguousSet checkedCreate(java.util.SortedSet)>(v2);
v4 = virtualinvoke v3.<com.google.common.collect.ContiguousSet: com.google.common.collect.ImmutableSortedSet descendingSet()>();
return v4;
}
public java.util.List order(java.util.List)
{
java.util.List v1;
com.google.common.collect.Ordering v2, v3;
com.google.common.collect.testing.google.SetGenerators$ContiguousSetDescendingGenerator v0;
v0 := @this: com.google.common.collect.testing.google.SetGenerators$ContiguousSetDescendingGenerator;
v1 := @parameter0: java.util.List;
v2 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering natural()>();
v3 = virtualinvoke v2.<com.google.common.collect.Ordering: com.google.common.collect.Ordering reverse()>();
staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(v1, v3);
return v1;
}
}