public class com.google.common.collect.testing.google.SetGenerators extends java.lang.Object
{
public void <init>()
{
com.google.common.collect.testing.google.SetGenerators v0;
v0 := @this: com.google.common.collect.testing.google.SetGenerators;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
private static com.google.common.collect.Ordering createExplicitComparator(java.lang.String[])
{
java.util.List v2;
com.google.common.collect.Ordering v4;
java.lang.String[] v0;
java.util.LinkedHashSet v1;
java.util.ArrayList v3;
v0 := @parameter0: java.lang.String[];
v1 = staticinvoke <com.google.common.collect.Sets: java.util.LinkedHashSet newLinkedHashSet()>();
interfaceinvoke v1.<java.util.Set: boolean add(java.lang.Object)>("\u0000");
interfaceinvoke v1.<java.util.Set: boolean add(java.lang.Object)>("\u0000\u0000");
v2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v0);
interfaceinvoke v1.<java.util.Set: boolean addAll(java.util.Collection)>(v2);
interfaceinvoke v1.<java.util.Set: boolean add(java.lang.Object)>("z");
interfaceinvoke v1.<java.util.Set: boolean add(java.lang.Object)>("zz");
v3 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>(v1);
v4 = staticinvoke <com.google.common.collect.Ordering: com.google.common.collect.Ordering explicit(java.util.List)>(v3);
return v4;
}
private static java.util.SortedSet nullCheckedTreeSet(java.lang.Comparable[])
{
int v2, v3;
java.lang.Comparable v4;
java.lang.Object v5;
java.lang.Comparable[] v0;
java.util.TreeSet v1;
v0 := @parameter0: java.lang.Comparable[];
v1 = staticinvoke <com.google.common.collect.Sets: java.util.TreeSet newTreeSet()>();
v2 = lengthof v0;
v3 = 0;
label1:
if v3 >= v2 goto label2;
v4 = v0[v3];
v5 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(v4);
interfaceinvoke v1.<java.util.SortedSet: boolean add(java.lang.Object)>(v5);
v3 = v3 + 1;
goto label1;
label2:
return v1;
}
}