public class com.google.common.collect.testing.testers.CollectionAddAllTester extends com.google.common.collect.testing.AbstractCollectionTester
{
public void <init>()
{
com.google.common.collect.testing.testers.CollectionAddAllTester v0;
v0 := @this: com.google.common.collect.testing.testers.CollectionAddAllTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractCollectionTester: void <init>()>();
return;
}
public void testAddAll_supportedNothing()
{
com.google.common.collect.testing.testers.CollectionAddAllTester v0;
java.util.Collection v1;
com.google.common.collect.testing.MinimalCollection v2;
boolean v3;
v0 := @this: com.google.common.collect.testing.testers.CollectionAddAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: java.util.Collection collection>;
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: com.google.common.collect.testing.MinimalCollection emptyCollection()>();
v3 = interfaceinvoke v1.<java.util.Collection: boolean addAll(java.util.Collection)>(v2);
staticinvoke <com.google.common.collect.testing.testers.CollectionAddAllTester: void assertFalse(java.lang.String,boolean)>("addAll(nothing) should return false", v3);
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: void expectUnchanged()>();
return;
}
public void testAddAll_unsupportedNothing()
{
java.lang.UnsupportedOperationException v4;
com.google.common.collect.testing.testers.CollectionAddAllTester v0;
java.util.Collection v1;
com.google.common.collect.testing.MinimalCollection v2;
boolean v3;
v0 := @this: com.google.common.collect.testing.testers.CollectionAddAllTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: java.util.Collection collection>;
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: com.google.common.collect.testing.MinimalCollection emptyCollection()>();
v3 = interfaceinvoke v1.<java.util.Collection: boolean addAll(java.util.Collection)>(v2);
staticinvoke <com.google.common.collect.testing.testers.CollectionAddAllTester: void assertFalse(java.lang.String,boolean)>("addAll(nothing) should return false or throw", v3);
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: void expectUnchanged()>();
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testAddAll_supportedNonePresent()
{
com.google.common.collect.testing.testers.CollectionAddAllTester v0;
java.lang.Object[] v4;
java.util.Collection v1;
java.lang.Object v5, v6;
com.google.common.collect.testing.MinimalCollection v2;
boolean v3;
v0 := @this: com.google.common.collect.testing.testers.CollectionAddAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: java.util.Collection collection>;
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: com.google.common.collect.testing.MinimalCollection createDisjointCollection()>();
v3 = interfaceinvoke v1.<java.util.Collection: boolean addAll(java.util.Collection)>(v2);
staticinvoke <com.google.common.collect.testing.testers.CollectionAddAllTester: void assertTrue(java.lang.String,boolean)>("addAll(nonePresent) should return true", v3);
v4 = newarray (java.lang.Object)[2];
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: java.lang.Object e3()>();
v4[0] = v5;
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: java.lang.Object e4()>();
v4[1] = v6;
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: void expectAdded(java.lang.Object[])>(v4);
return;
}
public void testAddAll_unsupportedNonePresent()
{
java.lang.UnsupportedOperationException v3;
com.google.common.collect.testing.testers.CollectionAddAllTester v0;
java.lang.Object[] v4;
java.util.Collection v1;
java.lang.Object v5, v6;
com.google.common.collect.testing.MinimalCollection v2;
v0 := @this: com.google.common.collect.testing.testers.CollectionAddAllTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: java.util.Collection collection>;
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: com.google.common.collect.testing.MinimalCollection createDisjointCollection()>();
interfaceinvoke v1.<java.util.Collection: boolean addAll(java.util.Collection)>(v2);
staticinvoke <com.google.common.collect.testing.testers.CollectionAddAllTester: void fail(java.lang.String)>("addAll(nonePresent) should throw");
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: void expectUnchanged()>();
v4 = newarray (java.lang.Object)[2];
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: java.lang.Object e3()>();
v4[0] = v5;
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: java.lang.Object e4()>();
v4[1] = v6;
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: void expectMissing(java.lang.Object[])>(v4);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testAddAll_supportedSomePresent()
{
com.google.common.collect.testing.testers.CollectionAddAllTester v0;
java.lang.Object[] v2;
com.google.common.collect.testing.MinimalCollection v5;
java.lang.String v13, v8;
boolean v11, v16, v6;
java.util.Collection v1, v14, v9;
java.lang.Object v10, v12, v15, v3, v4, v7;
v0 := @this: com.google.common.collect.testing.testers.CollectionAddAllTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: java.util.Collection collection>;
v2 = newarray (java.lang.Object)[2];
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: java.lang.Object e3()>();
v2[0] = v3;
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: java.lang.Object e0()>();
v2[1] = v4;
v5 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v2);
v6 = interfaceinvoke v1.<java.util.Collection: boolean addAll(java.util.Collection)>(v5);
staticinvoke <com.google.common.collect.testing.testers.CollectionAddAllTester: void assertTrue(java.lang.String,boolean)>("addAll(somePresent) should return true", v6);
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: java.lang.Object e3()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("should contain \u0001");
v9 = v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: java.util.Collection collection>;
v10 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: java.lang.Object e3()>();
v11 = interfaceinvoke v9.<java.util.Collection: boolean contains(java.lang.Object)>(v10);
staticinvoke <com.google.common.collect.testing.testers.CollectionAddAllTester: void assertTrue(java.lang.String,boolean)>(v8, v11);
v12 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: java.lang.Object e0()>();
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v12) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("should contain \u0001");
v14 = v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: java.util.Collection collection>;
v15 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: java.lang.Object e0()>();
v16 = interfaceinvoke v14.<java.util.Collection: boolean contains(java.lang.Object)>(v15);
staticinvoke <com.google.common.collect.testing.testers.CollectionAddAllTester: void assertTrue(java.lang.String,boolean)>(v13, v16);
return;
}
public void testAddAll_unsupportedSomePresent()
{
java.lang.UnsupportedOperationException v6;
com.google.common.collect.testing.testers.CollectionAddAllTester v0;
java.lang.Object[] v2;
java.util.Collection v1;
java.lang.Object v3, v4;
com.google.common.collect.testing.MinimalCollection v5;
v0 := @this: com.google.common.collect.testing.testers.CollectionAddAllTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: java.util.Collection collection>;
v2 = newarray (java.lang.Object)[2];
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: java.lang.Object e3()>();
v2[0] = v3;
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: java.lang.Object e0()>();
v2[1] = v4;
v5 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v2);
interfaceinvoke v1.<java.util.Collection: boolean addAll(java.util.Collection)>(v5);
staticinvoke <com.google.common.collect.testing.testers.CollectionAddAllTester: void fail(java.lang.String)>("addAll(somePresent) should throw");
label2:
goto label4;
label3:
v6 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: void expectUnchanged()>();
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testAddAllConcurrentWithIteration()
{
com.google.common.collect.testing.testers.CollectionAddAllTester v0;
java.lang.Object[] v4;
java.util.Iterator v2;
java.util.Collection v1, v3;
java.lang.Object v5, v6;
com.google.common.collect.testing.MinimalCollection v7;
java.util.ConcurrentModificationException v9;
boolean v8;
v0 := @this: com.google.common.collect.testing.testers.CollectionAddAllTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: java.util.Collection collection>;
v2 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
v3 = v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: java.util.Collection collection>;
v4 = newarray (java.lang.Object)[2];
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: java.lang.Object e3()>();
v4[0] = v5;
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: java.lang.Object e0()>();
v4[1] = v6;
v7 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v4);
v8 = interfaceinvoke v3.<java.util.Collection: boolean addAll(java.util.Collection)>(v7);
staticinvoke <com.google.common.collect.testing.testers.CollectionAddAllTester: void assertTrue(boolean)>(v8);
interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <com.google.common.collect.testing.testers.CollectionAddAllTester: void fail(java.lang.String)>("Expected ConcurrentModificationException");
label2:
goto label4;
label3:
v9 := @caughtexception;
label4:
return;
catch java.util.ConcurrentModificationException from label1 to label2 with label3;
}
public void testAddAll_unsupportedAllPresent()
{
java.lang.UnsupportedOperationException v6;
com.google.common.collect.testing.testers.CollectionAddAllTester v0;
java.lang.Object[] v2;
java.util.Collection v1;
java.lang.Object v3;
com.google.common.collect.testing.MinimalCollection v4;
boolean v5;
v0 := @this: com.google.common.collect.testing.testers.CollectionAddAllTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: java.util.Collection collection>;
v2 = newarray (java.lang.Object)[1];
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: java.lang.Object e0()>();
v2[0] = v3;
v4 = staticinvoke <com.google.common.collect.testing.MinimalCollection: com.google.common.collect.testing.MinimalCollection of(java.lang.Object[])>(v2);
v5 = interfaceinvoke v1.<java.util.Collection: boolean addAll(java.util.Collection)>(v4);
staticinvoke <com.google.common.collect.testing.testers.CollectionAddAllTester: void assertFalse(java.lang.String,boolean)>("addAll(allPresent) should return false or throw", v5);
label2:
goto label4;
label3:
v6 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: void expectUnchanged()>();
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testAddAll_nullSupported()
{
java.util.List v1;
com.google.common.collect.testing.testers.CollectionAddAllTester v0;
java.lang.Object[] v4;
java.util.Collection v2;
boolean v3;
v0 := @this: com.google.common.collect.testing.testers.CollectionAddAllTester;
v1 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(null);
v2 = v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: java.util.Collection collection>;
v3 = interfaceinvoke v2.<java.util.Collection: boolean addAll(java.util.Collection)>(v1);
staticinvoke <com.google.common.collect.testing.testers.CollectionAddAllTester: void assertTrue(java.lang.String,boolean)>("addAll(containsNull) should return true", v3);
v4 = newarray (java.lang.Object)[1];
v4[0] = null;
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: void expectAdded(java.lang.Object[])>(v4);
return;
}
public void testAddAll_nullUnsupported()
{
java.util.List v1;
com.google.common.collect.testing.testers.CollectionAddAllTester v0;
java.util.Collection v2;
java.lang.NullPointerException v3;
v0 := @this: com.google.common.collect.testing.testers.CollectionAddAllTester;
v1 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(null);
label1:
v2 = v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: java.util.Collection collection>;
interfaceinvoke v2.<java.util.Collection: boolean addAll(java.util.Collection)>(v1);
staticinvoke <com.google.common.collect.testing.testers.CollectionAddAllTester: void fail(java.lang.String)>("addAll(containsNull) should throw");
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: void expectUnchanged()>();
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: void expectNullMissingWhenNullUnsupported(java.lang.String)>("Should not contain null after unsupported addAll(containsNull)");
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testAddAll_nullCollectionReference()
{
com.google.common.collect.testing.testers.CollectionAddAllTester v0;
java.lang.NullPointerException v2;
java.util.Collection v1;
v0 := @this: com.google.common.collect.testing.testers.CollectionAddAllTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.CollectionAddAllTester: java.util.Collection collection>;
interfaceinvoke v1.<java.util.Collection: boolean addAll(java.util.Collection)>(null);
staticinvoke <com.google.common.collect.testing.testers.CollectionAddAllTester: void fail(java.lang.String)>("addAll(null) should throw NullPointerException");
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public static java.lang.reflect.Method getAddAllNullUnsupportedMethod()
{
java.lang.reflect.Method v0;
v0 = staticinvoke <com.google.common.collect.testing.Helpers: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String)>(class "Lcom/google/common/collect/testing/testers/CollectionAddAllTester;", "testAddAll_nullUnsupported");
return v0;
}
public static java.lang.reflect.Method getAddAllUnsupportedNonePresentMethod()
{
java.lang.reflect.Method v0;
v0 = staticinvoke <com.google.common.collect.testing.Helpers: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String)>(class "Lcom/google/common/collect/testing/testers/CollectionAddAllTester;", "testAddAll_unsupportedNonePresent");
return v0;
}
public static java.lang.reflect.Method getAddAllUnsupportedSomePresentMethod()
{
java.lang.reflect.Method v0;
v0 = staticinvoke <com.google.common.collect.testing.Helpers: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String)>(class "Lcom/google/common/collect/testing/testers/CollectionAddAllTester;", "testAddAll_unsupportedSomePresent");
return v0;
}
}