public class com.google.common.collect.testing.testers.CollectionAddTester extends com.google.common.collect.testing.AbstractCollectionTester
{
public void <init>()
{
com.google.common.collect.testing.testers.CollectionAddTester v0;
v0 := @this: com.google.common.collect.testing.testers.CollectionAddTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractCollectionTester: void <init>()>();
return;
}
public void testAdd_supportedNotPresent()
{
java.lang.Object[] v4;
java.util.Collection v1;
com.google.common.collect.testing.testers.CollectionAddTester v0;
java.lang.Object v2, v5;
boolean v3;
v0 := @this: com.google.common.collect.testing.testers.CollectionAddTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionAddTester: java.util.Collection collection>;
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddTester: java.lang.Object e3()>();
v3 = interfaceinvoke v1.<java.util.Collection: boolean add(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.testers.CollectionAddTester: void assertTrue(java.lang.String,boolean)>("add(notPresent) should return true", v3);
v4 = newarray (java.lang.Object)[1];
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddTester: java.lang.Object e3()>();
v4[0] = v5;
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddTester: void expectAdded(java.lang.Object[])>(v4);
return;
}
public void testAdd_unsupportedNotPresent()
{
java.lang.UnsupportedOperationException v3;
java.lang.Object[] v4;
java.util.Collection v1;
com.google.common.collect.testing.testers.CollectionAddTester v0;
java.lang.Object v2, v5;
v0 := @this: com.google.common.collect.testing.testers.CollectionAddTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.CollectionAddTester: java.util.Collection collection>;
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddTester: java.lang.Object e3()>();
interfaceinvoke v1.<java.util.Collection: boolean add(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.testers.CollectionAddTester: void fail(java.lang.String)>("add(notPresent) should throw");
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddTester: void expectUnchanged()>();
v4 = newarray (java.lang.Object)[1];
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddTester: java.lang.Object e3()>();
v4[0] = v5;
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddTester: void expectMissing(java.lang.Object[])>(v4);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testAdd_unsupportedPresent()
{
java.lang.UnsupportedOperationException v4;
java.util.Collection v1;
com.google.common.collect.testing.testers.CollectionAddTester v0;
java.lang.Object v2;
boolean v3;
v0 := @this: com.google.common.collect.testing.testers.CollectionAddTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.CollectionAddTester: java.util.Collection collection>;
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddTester: java.lang.Object e0()>();
v3 = interfaceinvoke v1.<java.util.Collection: boolean add(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.testers.CollectionAddTester: void assertFalse(java.lang.String,boolean)>("add(present) should return false or throw", v3);
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddTester: void expectUnchanged()>();
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testAdd_nullSupported()
{
java.lang.Object[] v3;
java.util.Collection v1;
com.google.common.collect.testing.testers.CollectionAddTester v0;
boolean v2;
v0 := @this: com.google.common.collect.testing.testers.CollectionAddTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionAddTester: java.util.Collection collection>;
v2 = interfaceinvoke v1.<java.util.Collection: boolean add(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.testers.CollectionAddTester: void assertTrue(java.lang.String,boolean)>("add(null) should return true", v2);
v3 = newarray (java.lang.Object)[1];
v3[0] = null;
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddTester: void expectAdded(java.lang.Object[])>(v3);
return;
}
public void testAdd_nullUnsupported()
{
com.google.common.collect.testing.testers.CollectionAddTester v0;
java.lang.NullPointerException v2;
java.util.Collection v1;
v0 := @this: com.google.common.collect.testing.testers.CollectionAddTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.CollectionAddTester: java.util.Collection collection>;
interfaceinvoke v1.<java.util.Collection: boolean add(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.testers.CollectionAddTester: void fail(java.lang.String)>("add(null) should throw");
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddTester: void expectUnchanged()>();
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddTester: void expectNullMissingWhenNullUnsupported(java.lang.String)>("Should not contain null after unsupported add(null)");
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testAddConcurrentWithIteration()
{
java.util.Iterator v2;
java.util.Collection v1, v3;
com.google.common.collect.testing.testers.CollectionAddTester v0;
java.lang.Object v4;
java.util.ConcurrentModificationException v6;
boolean v5;
v0 := @this: com.google.common.collect.testing.testers.CollectionAddTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.CollectionAddTester: java.util.Collection collection>;
v2 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
v3 = v0.<com.google.common.collect.testing.testers.CollectionAddTester: java.util.Collection collection>;
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionAddTester: java.lang.Object e3()>();
v5 = interfaceinvoke v3.<java.util.Collection: boolean add(java.lang.Object)>(v4);
staticinvoke <com.google.common.collect.testing.testers.CollectionAddTester: void assertTrue(boolean)>(v5);
interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <com.google.common.collect.testing.testers.CollectionAddTester: void fail(java.lang.String)>("Expected ConcurrentModificationException");
label2:
goto label4;
label3:
v6 := @caughtexception;
label4:
return;
catch java.util.ConcurrentModificationException from label1 to label2 with label3;
}
public static java.lang.reflect.Method getAddNullSupportedMethod()
{
java.lang.reflect.Method v0;
v0 = staticinvoke <com.google.common.collect.testing.Helpers: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String)>(class "Lcom/google/common/collect/testing/testers/CollectionAddTester;", "testAdd_nullSupported");
return v0;
}
public static java.lang.reflect.Method getAddNullUnsupportedMethod()
{
java.lang.reflect.Method v0;
v0 = staticinvoke <com.google.common.collect.testing.Helpers: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String)>(class "Lcom/google/common/collect/testing/testers/CollectionAddTester;", "testAdd_nullUnsupported");
return v0;
}
public static java.lang.reflect.Method getAddUnsupportedNotPresentMethod()
{
java.lang.reflect.Method v0;
v0 = staticinvoke <com.google.common.collect.testing.Helpers: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String)>(class "Lcom/google/common/collect/testing/testers/CollectionAddTester;", "testAdd_unsupportedNotPresent");
return v0;
}
}