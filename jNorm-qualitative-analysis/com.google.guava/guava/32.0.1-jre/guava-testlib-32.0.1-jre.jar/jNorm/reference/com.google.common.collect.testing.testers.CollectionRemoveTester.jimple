public class com.google.common.collect.testing.testers.CollectionRemoveTester extends com.google.common.collect.testing.AbstractCollectionTester
{
public void <init>()
{
com.google.common.collect.testing.testers.CollectionRemoveTester v0;
v0 := @this: com.google.common.collect.testing.testers.CollectionRemoveTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractCollectionTester: void <init>()>();
return;
}
public void testRemove_present()
{
java.lang.Object[] v9;
java.util.Collection v1, v3, v7;
com.google.common.collect.testing.testers.CollectionRemoveTester v0;
int v2, v6, v8;
java.lang.Object v10, v4;
boolean v5;
v0 := @this: com.google.common.collect.testing.testers.CollectionRemoveTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: java.util.Collection collection>;
v2 = interfaceinvoke v1.<java.util.Collection: int size()>();
v3 = v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: java.util.Collection collection>;
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: java.lang.Object e0()>();
v5 = interfaceinvoke v3.<java.util.Collection: boolean remove(java.lang.Object)>(v4);
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveTester: void assertTrue(java.lang.String,boolean)>("remove(present) should return true", v5);
v6 = v2 - 1;
v7 = v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: java.util.Collection collection>;
v8 = interfaceinvoke v7.<java.util.Collection: int size()>();
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveTester: void assertEquals(java.lang.String,int,int)>("remove(present) should decrease a collection\'s size by one.", v6, v8);
v9 = newarray (java.lang.Object)[1];
v10 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: java.lang.Object e0()>();
v9[0] = v10;
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: void expectMissing(java.lang.Object[])>(v9);
return;
}
public void testRemovePresentConcurrentWithIteration()
{
com.google.common.collect.testing.testers.CollectionRemoveTester v0;
java.util.Iterator v2;
java.util.Collection v1, v3;
java.lang.Object v4;
java.util.ConcurrentModificationException v6;
boolean v5;
v0 := @this: com.google.common.collect.testing.testers.CollectionRemoveTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: java.util.Collection collection>;
v2 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
v3 = v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: java.util.Collection collection>;
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: java.lang.Object e0()>();
v5 = interfaceinvoke v3.<java.util.Collection: boolean remove(java.lang.Object)>(v4);
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveTester: void assertTrue(boolean)>(v5);
interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveTester: void fail(java.lang.String)>("Expected ConcurrentModificationException");
label2:
goto label4;
label3:
v6 := @caughtexception;
label4:
return;
catch java.util.ConcurrentModificationException from label1 to label2 with label3;
}
public void testRemove_notPresent()
{
com.google.common.collect.testing.testers.CollectionRemoveTester v0;
java.util.Collection v1;
java.lang.Object v2;
boolean v3;
v0 := @this: com.google.common.collect.testing.testers.CollectionRemoveTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: java.util.Collection collection>;
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: java.lang.Object e3()>();
v3 = interfaceinvoke v1.<java.util.Collection: boolean remove(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveTester: void assertFalse(java.lang.String,boolean)>("remove(notPresent) should return false", v3);
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: void expectUnchanged()>();
return;
}
public void testRemove_nullPresent()
{
java.lang.Object[] v11, v2;
java.util.Collection v4, v6, v9;
com.google.common.collect.testing.testers.CollectionRemoveTester v0;
int v10, v5, v8;
java.lang.Object v1, v3;
boolean v7;
v0 := @this: com.google.common.collect.testing.testers.CollectionRemoveTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: java.lang.Object getSubjectGenerator()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: java.lang.Object[] createArrayWithNullElement()>();
v3 = interfaceinvoke v1.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.lang.Object create(java.lang.Object[])>(v2);
v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: java.util.Collection collection> = v3;
v4 = v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: java.util.Collection collection>;
v5 = interfaceinvoke v4.<java.util.Collection: int size()>();
v6 = v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: java.util.Collection collection>;
v7 = interfaceinvoke v6.<java.util.Collection: boolean remove(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveTester: void assertTrue(java.lang.String,boolean)>("remove(null) should return true", v7);
v8 = v5 - 1;
v9 = v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: java.util.Collection collection>;
v10 = interfaceinvoke v9.<java.util.Collection: int size()>();
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveTester: void assertEquals(java.lang.String,int,int)>("remove(present) should decrease a collection\'s size by one.", v8, v10);
v11 = newarray (java.lang.Object)[1];
v11[0] = null;
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: void expectMissing(java.lang.Object[])>(v11);
return;
}
public void testRemove_unsupported()
{
com.google.common.collect.testing.testers.CollectionRemoveTester v0;
java.lang.UnsupportedOperationException v3;
java.util.Collection v1, v4;
java.lang.Object v2, v5;
boolean v6;
v0 := @this: com.google.common.collect.testing.testers.CollectionRemoveTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: java.util.Collection collection>;
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: java.lang.Object e0()>();
interfaceinvoke v1.<java.util.Collection: boolean remove(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveTester: void fail(java.lang.String)>("remove(present) should throw UnsupportedOperationException");
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: void expectUnchanged()>();
v4 = v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: java.util.Collection collection>;
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: java.lang.Object e0()>();
v6 = interfaceinvoke v4.<java.util.Collection: boolean contains(java.lang.Object)>(v5);
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveTester: void assertTrue(java.lang.String,boolean)>("remove(present) should not remove the element", v6);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testRemove_unsupportedNotPresent()
{
com.google.common.collect.testing.testers.CollectionRemoveTester v0;
java.lang.UnsupportedOperationException v4;
java.lang.Object[] v5;
java.util.Collection v1;
java.lang.Object v2, v6;
boolean v3;
v0 := @this: com.google.common.collect.testing.testers.CollectionRemoveTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: java.util.Collection collection>;
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: java.lang.Object e3()>();
v3 = interfaceinvoke v1.<java.util.Collection: boolean remove(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveTester: void assertFalse(java.lang.String,boolean)>("remove(notPresent) should return false or throw UnsupportedOperationException", v3);
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: void expectUnchanged()>();
v5 = newarray (java.lang.Object)[1];
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: java.lang.Object e3()>();
v5[0] = v6;
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: void expectMissing(java.lang.Object[])>(v5);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testRemove_nullNotSupported()
{
com.google.common.collect.testing.testers.CollectionRemoveTester v0;
java.util.Collection v1;
java.lang.NullPointerException v3;
boolean v2;
v0 := @this: com.google.common.collect.testing.testers.CollectionRemoveTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: java.util.Collection collection>;
v2 = interfaceinvoke v1.<java.util.Collection: boolean remove(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveTester: void assertFalse(java.lang.String,boolean)>("remove(null) should return false or throw NullPointerException", v2);
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: void expectUnchanged()>();
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testRemove_nullAllowed()
{
com.google.common.collect.testing.testers.CollectionRemoveTester v0;
boolean v2;
java.util.Collection v1;
v0 := @this: com.google.common.collect.testing.testers.CollectionRemoveTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: java.util.Collection collection>;
v2 = interfaceinvoke v1.<java.util.Collection: boolean remove(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveTester: void assertFalse(java.lang.String,boolean)>("remove(null) should return false", v2);
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: void expectUnchanged()>();
return;
}
public void testIteratorRemove_unsupported()
{
com.google.common.collect.testing.testers.CollectionRemoveTester v0;
java.lang.UnsupportedOperationException v3;
java.util.Iterator v2;
java.util.Collection v1, v4;
java.lang.Object v5;
boolean v6;
v0 := @this: com.google.common.collect.testing.testers.CollectionRemoveTester;
v1 = v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: java.util.Collection collection>;
v2 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
label1:
interfaceinvoke v2.<java.util.Iterator: void remove()>();
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveTester: void fail(java.lang.String)>("iterator.remove() should throw UnsupportedOperationException");
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: void expectUnchanged()>();
v4 = v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: java.util.Collection collection>;
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: java.lang.Object e0()>();
v6 = interfaceinvoke v4.<java.util.Collection: boolean contains(java.lang.Object)>(v5);
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveTester: void assertTrue(boolean)>(v6);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testRemove_wrongType()
{
com.google.common.collect.testing.testers.CollectionRemoveTester v0;
com.google.common.collect.testing.WrongType v2;
java.util.Collection v1;
java.lang.ClassCastException v4;
boolean v3;
v0 := @this: com.google.common.collect.testing.testers.CollectionRemoveTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: java.util.Collection collection>;
v2 = <com.google.common.collect.testing.WrongType: com.google.common.collect.testing.WrongType VALUE>;
v3 = interfaceinvoke v1.<java.util.Collection: boolean remove(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.testers.CollectionRemoveTester: void assertFalse(boolean)>(v3);
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.CollectionRemoveTester: void expectUnchanged()>();
return;
catch java.lang.ClassCastException from label1 to label2 with label3;
}
}