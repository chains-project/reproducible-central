public class com.google.common.collect.testing.testers.ListEqualsTester extends com.google.common.collect.testing.testers.AbstractListTester
{
public void <init>()
{
com.google.common.collect.testing.testers.ListEqualsTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListEqualsTester;
specialinvoke v0.<com.google.common.collect.testing.testers.AbstractListTester: void <init>()>();
return;
}
public void testEquals_otherListWithSameElements()
{
java.util.List v1, v3;
com.google.common.collect.testing.testers.ListEqualsTester v0;
boolean v4;
java.util.ArrayList v2;
v0 := @this: com.google.common.collect.testing.testers.ListEqualsTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListEqualsTester: java.util.List getList()>();
v2 = new java.util.ArrayList;
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListEqualsTester: java.util.List getOrderedElements()>();
specialinvoke v2.<java.util.ArrayList: void <init>(java.util.Collection)>(v3);
v4 = interfaceinvoke v1.<java.util.List: boolean equals(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.testers.ListEqualsTester: void assertTrue(java.lang.String,boolean)>("A List should equal any other List containing the same elements.", v4);
return;
}
public void testEquals_otherListWithDifferentElements()
{
com.google.common.collect.testing.SampleElements v6;
java.util.Collection v2;
com.google.common.collect.testing.testers.ListEqualsTester v0;
java.util.ArrayList v1;
java.util.List v8;
int v3, v4;
java.lang.Object v5, v7;
boolean v9;
v0 := @this: com.google.common.collect.testing.testers.ListEqualsTester;
v1 = new java.util.ArrayList;
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListEqualsTester: java.util.Collection getSampleElements()>();
specialinvoke v1.<java.util.ArrayList: void <init>(java.util.Collection)>(v2);
v3 = virtualinvoke v1.<java.util.ArrayList: int size()>();
v4 = v3 / 2;
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListEqualsTester: java.lang.Object getSubjectGenerator()>();
v6 = interfaceinvoke v5.<com.google.common.collect.testing.OneSizeTestContainerGenerator: com.google.common.collect.testing.SampleElements samples()>();
v7 = virtualinvoke v6.<com.google.common.collect.testing.SampleElements: java.lang.Object e3()>();
virtualinvoke v1.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>(v4, v7);
v8 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListEqualsTester: java.util.List getList()>();
v9 = interfaceinvoke v8.<java.util.List: boolean equals(java.lang.Object)>(v1);
staticinvoke <com.google.common.collect.testing.testers.ListEqualsTester: void assertFalse(java.lang.String,boolean)>("A List should not equal another List containing different elements.", v9);
return;
}
public void testEquals_otherListContainingNull()
{
java.util.List v5;
java.util.Collection v2;
int v3, v4;
com.google.common.collect.testing.testers.ListEqualsTester v0;
boolean v6;
java.util.ArrayList v1;
v0 := @this: com.google.common.collect.testing.testers.ListEqualsTester;
v1 = new java.util.ArrayList;
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListEqualsTester: java.util.Collection getSampleElements()>();
specialinvoke v1.<java.util.ArrayList: void <init>(java.util.Collection)>(v2);
v3 = interfaceinvoke v1.<java.util.List: int size()>();
v4 = v3 / 2;
interfaceinvoke v1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(v4, null);
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListEqualsTester: java.util.List getList()>();
v6 = interfaceinvoke v5.<java.util.List: boolean equals(java.lang.Object)>(v1);
staticinvoke <com.google.common.collect.testing.testers.ListEqualsTester: void assertFalse(java.lang.String,boolean)>("Two Lists should not be equal if exactly one of them has null at a given index.", v6);
return;
}
public void testEquals_containingNull()
{
java.lang.Object[] v6;
java.util.Collection v2, v9;
com.google.common.collect.testing.testers.ListEqualsTester v0;
java.util.ArrayList v1, v8;
java.util.List v10;
int v3, v4;
java.lang.Object v5, v7;
boolean v11;
v0 := @this: com.google.common.collect.testing.testers.ListEqualsTester;
v1 = new java.util.ArrayList;
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListEqualsTester: java.util.Collection getSampleElements()>();
specialinvoke v1.<java.util.ArrayList: void <init>(java.util.Collection)>(v2);
v3 = virtualinvoke v1.<java.util.ArrayList: int size()>();
v4 = v3 / 2;
virtualinvoke v1.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>(v4, null);
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListEqualsTester: java.lang.Object getSubjectGenerator()>();
v6 = virtualinvoke v1.<java.util.ArrayList: java.lang.Object[] toArray()>();
v7 = interfaceinvoke v5.<com.google.common.collect.testing.OneSizeTestContainerGenerator: java.lang.Object create(java.lang.Object[])>(v6);
v0.<com.google.common.collect.testing.testers.ListEqualsTester: java.util.Collection collection> = v7;
v8 = new java.util.ArrayList;
v9 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListEqualsTester: java.util.Collection getSampleElements()>();
specialinvoke v8.<java.util.ArrayList: void <init>(java.util.Collection)>(v9);
v10 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListEqualsTester: java.util.List getList()>();
v11 = interfaceinvoke v10.<java.util.List: boolean equals(java.lang.Object)>(v8);
staticinvoke <com.google.common.collect.testing.testers.ListEqualsTester: void assertFalse(java.lang.String,boolean)>("Two Lists should not be equal if exactly one of them has null at a given index.", v11);
return;
}
public void testEquals_shorterList()
{
java.util.List v4;
java.util.Collection v3;
int v1, v2;
com.google.common.collect.testing.testers.ListEqualsTester v0;
boolean v6;
java.util.ArrayList v5;
v0 := @this: com.google.common.collect.testing.testers.ListEqualsTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListEqualsTester: int getNumElements()>();
v2 = v1 - 1;
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListEqualsTester: java.util.Collection getSampleElements(int)>(v2);
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListEqualsTester: java.util.List getList()>();
v5 = new java.util.ArrayList;
specialinvoke v5.<java.util.ArrayList: void <init>(java.util.Collection)>(v3);
v6 = interfaceinvoke v4.<java.util.List: boolean equals(java.lang.Object)>(v5);
staticinvoke <com.google.common.collect.testing.testers.ListEqualsTester: void assertFalse(java.lang.String,boolean)>("Lists of different sizes should not be equal.", v6);
return;
}
public void testEquals_longerList()
{
java.util.List v4;
java.util.Collection v3;
int v1, v2;
com.google.common.collect.testing.testers.ListEqualsTester v0;
boolean v6;
java.util.ArrayList v5;
v0 := @this: com.google.common.collect.testing.testers.ListEqualsTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListEqualsTester: int getNumElements()>();
v2 = v1 + 1;
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListEqualsTester: java.util.Collection getSampleElements(int)>(v2);
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListEqualsTester: java.util.List getList()>();
v5 = new java.util.ArrayList;
specialinvoke v5.<java.util.ArrayList: void <init>(java.util.Collection)>(v3);
v6 = interfaceinvoke v4.<java.util.List: boolean equals(java.lang.Object)>(v5);
staticinvoke <com.google.common.collect.testing.testers.ListEqualsTester: void assertFalse(java.lang.String,boolean)>("Lists of different sizes should not be equal.", v6);
return;
}
public void testEquals_set()
{
java.util.List v1, v2;
com.google.common.collect.testing.MinimalSet v3;
com.google.common.collect.testing.testers.ListEqualsTester v0;
boolean v4;
v0 := @this: com.google.common.collect.testing.testers.ListEqualsTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListEqualsTester: java.util.List getList()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListEqualsTester: java.util.List getList()>();
v3 = staticinvoke <com.google.common.collect.testing.MinimalSet: com.google.common.collect.testing.MinimalSet 'from'(java.util.Collection)>(v2);
v4 = interfaceinvoke v1.<java.util.List: boolean equals(java.lang.Object)>(v3);
staticinvoke <com.google.common.collect.testing.testers.ListEqualsTester: void assertFalse(java.lang.String,boolean)>("A List should never equal a Set.", v4);
return;
}
}