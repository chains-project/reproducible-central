public class com.google.common.collect.testing.testers.ListSubListTester extends com.google.common.collect.testing.testers.AbstractListTester
{
public void <init>()
{
com.google.common.collect.testing.testers.ListSubListTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListSubListTester;
specialinvoke v0.<com.google.common.collect.testing.testers.AbstractListTester: void <init>()>();
return;
}
public void testSubList_startNegative()
{
java.lang.IndexOutOfBoundsException v3;
java.util.List v1;
int v2;
com.google.common.collect.testing.testers.ListSubListTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListSubListTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.util.List getList()>();
v2 = (int) -1;
interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(v2, 0);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void fail(java.lang.String)>("subList(-1, 0) should throw");
label2:
goto label4;
label3:
v3 := @caughtexception;
label4:
return;
catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
}
public void testSubList_endTooLarge()
{
java.lang.IndexOutOfBoundsException v4;
java.util.List v1;
int v2, v3;
com.google.common.collect.testing.testers.ListSubListTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListSubListTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.util.List getList()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: int getNumElements()>();
v3 = v2 + 1;
interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(0, v3);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void fail(java.lang.String)>("subList(0, size + 1) should throw");
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
return;
catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
}
public void testSubList_startGreaterThanEnd()
{
java.lang.IndexOutOfBoundsException v2;
java.util.List v1;
java.lang.IllegalArgumentException v3;
com.google.common.collect.testing.testers.ListSubListTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListSubListTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.util.List getList()>();
interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(1, 0);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void fail(java.lang.String)>("subList(1, 0) should throw");
label2:
goto label5;
label3:
v2 := @caughtexception;
goto label5;
label4:
v3 := @caughtexception;
label5:
return;
catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
catch java.lang.IllegalArgumentException from label1 to label2 with label4;
}
public void testSubList_empty()
{
java.util.List v1, v2, v3;
com.google.common.collect.testing.testers.ListSubListTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListSubListTester;
v1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.util.List getList()>();
v3 = interfaceinvoke v2.<java.util.List: java.util.List subList(int,int)>(0, 0);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("subList(0, 0) should be empty", v1, v3);
return;
}
public void testSubList_entireList()
{
java.util.List v1, v2, v4;
int v3;
com.google.common.collect.testing.testers.ListSubListTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListSubListTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.util.List getList()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.util.List getList()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: int getNumElements()>();
v4 = interfaceinvoke v2.<java.util.List: java.util.List subList(int,int)>(0, v3);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("subList(0, size) should be equal to the original list", v1, v4);
return;
}
public void testSubList_subListRemoveAffectsOriginal()
{
java.util.List v1, v2, v4, v6;
java.lang.Object[] v3;
int v5;
com.google.common.collect.testing.testers.ListSubListTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListSubListTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.util.List getList()>();
v2 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(0, 1);
interfaceinvoke v2.<java.util.List: java.lang.Object remove(int)>(0);
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.lang.Object[] createSamplesArray()>();
v4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v3);
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: int getNumElements()>();
v6 = interfaceinvoke v4.<java.util.List: java.util.List subList(int,int)>(1, v5);
virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: void expectContents(java.util.Collection)>(v6);
return;
}
public void testSubList_subListClearAffectsOriginal()
{
java.util.List v1, v2, v4, v6;
java.lang.Object[] v3;
int v5;
com.google.common.collect.testing.testers.ListSubListTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListSubListTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.util.List getList()>();
v2 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(0, 1);
interfaceinvoke v2.<java.util.List: void clear()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.lang.Object[] createSamplesArray()>();
v4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v3);
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: int getNumElements()>();
v6 = interfaceinvoke v4.<java.util.List: java.util.List subList(int,int)>(1, v5);
virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: void expectContents(java.util.Collection)>(v6);
return;
}
public void testSubList_subListAddAffectsOriginal()
{
java.util.List v1, v2;
java.lang.Object[] v4;
java.lang.Object v3, v5;
com.google.common.collect.testing.testers.ListSubListTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListSubListTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.util.List getList()>();
v2 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(0, 0);
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.lang.Object e3()>();
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v3);
v4 = newarray (java.lang.Object)[1];
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.lang.Object e3()>();
v4[0] = v5;
virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: void expectAdded(int,java.lang.Object[])>(0, v4);
return;
}
public void testSubList_subListSetAffectsOriginal()
{
java.util.List v1, v2, v5;
java.lang.Object[] v4;
java.lang.Object v3, v6;
com.google.common.collect.testing.testers.ListSubListTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListSubListTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.util.List getList()>();
v2 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(0, 1);
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.lang.Object e3()>();
interfaceinvoke v2.<java.util.List: java.lang.Object set(int,java.lang.Object)>(0, v3);
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.lang.Object[] createSamplesArray()>();
v5 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.List copyToList(java.lang.Object[])>(v4);
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.lang.Object e3()>();
interfaceinvoke v5.<java.util.List: java.lang.Object set(int,java.lang.Object)>(0, v6);
virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: void expectContents(java.util.Collection)>(v5);
return;
}
public void testSubList_originalListSetAffectsSubList()
{
java.util.List v1, v2, v3, v6;
java.lang.Object v4, v5;
com.google.common.collect.testing.testers.ListSubListTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListSubListTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.util.List getList()>();
v2 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(0, 1);
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.util.List getList()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.lang.Object e3()>();
interfaceinvoke v3.<java.util.List: java.lang.Object set(int,java.lang.Object)>(0, v4);
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.lang.Object e3()>();
v6 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(v5);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("A set() call to a list after a sublist has been created should be reflected in the sublist", v6, v2);
return;
}
public void testSubList_subListRemoveAffectsOriginalLargeList()
{
java.util.List v1, v2, v5;
java.lang.Object[] v4;
java.lang.Object v3;
com.google.common.collect.testing.testers.ListSubListTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListSubListTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.util.List getList()>();
v2 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(1, 3);
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.lang.Object e2()>();
interfaceinvoke v2.<java.util.List: boolean remove(java.lang.Object)>(v3);
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.lang.Object[] createSamplesArray()>();
v5 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.List copyToList(java.lang.Object[])>(v4);
interfaceinvoke v5.<java.util.List: java.lang.Object remove(int)>(2);
virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: void expectContents(java.util.Collection)>(v5);
return;
}
public void testSubList_subListAddAtIndexAffectsOriginalLargeList()
{
java.util.List v1, v2;
java.lang.Object[] v4;
java.lang.Object v3, v5;
com.google.common.collect.testing.testers.ListSubListTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListSubListTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.util.List getList()>();
v2 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(2, 3);
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.lang.Object e3()>();
interfaceinvoke v2.<java.util.List: void add(int,java.lang.Object)>(0, v3);
v4 = newarray (java.lang.Object)[1];
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.lang.Object e3()>();
v4[0] = v5;
virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: void expectAdded(int,java.lang.Object[])>(2, v4);
return;
}
public void testSubList_subListSetAffectsOriginalLargeList()
{
java.util.List v1, v2, v5;
java.lang.Object[] v4;
java.lang.Object v3, v6;
com.google.common.collect.testing.testers.ListSubListTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListSubListTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.util.List getList()>();
v2 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(1, 2);
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.lang.Object e3()>();
interfaceinvoke v2.<java.util.List: java.lang.Object set(int,java.lang.Object)>(0, v3);
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.lang.Object[] createSamplesArray()>();
v5 = staticinvoke <com.google.common.collect.testing.Helpers: java.util.List copyToList(java.lang.Object[])>(v4);
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.lang.Object e3()>();
interfaceinvoke v5.<java.util.List: java.lang.Object set(int,java.lang.Object)>(1, v6);
virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: void expectContents(java.util.Collection)>(v5);
return;
}
public void testSubList_originalListSetAffectsSubListLargeList()
{
java.lang.Object[] v5;
java.util.List v1, v2, v3, v8;
java.lang.Object v4, v6, v7;
com.google.common.collect.testing.testers.ListSubListTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListSubListTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.util.List getList()>();
v2 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(1, 3);
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.util.List getList()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.lang.Object e3()>();
interfaceinvoke v3.<java.util.List: java.lang.Object set(int,java.lang.Object)>(1, v4);
v5 = newarray (java.lang.Object)[2];
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.lang.Object e3()>();
v5[0] = v6;
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.lang.Object e2()>();
v5[1] = v7;
v8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v5);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("A set() call to a list after a sublist has been created should be reflected in the sublist", v8, v2);
return;
}
public void testSubList_ofSubListEmpty()
{
java.util.List v1, v2, v3, v4;
com.google.common.collect.testing.testers.ListSubListTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListSubListTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.util.List getList()>();
v2 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(0, 0);
v3 = interfaceinvoke v2.<java.util.List: java.util.List subList(int,int)>(0, 0);
v4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("subList(0, 0).subList(0, 0) should be an empty list", v4, v3);
return;
}
public void testSubList_ofSubListNonEmpty()
{
java.util.List v1, v2, v3, v4, v6;
java.lang.Object v5;
com.google.common.collect.testing.testers.ListSubListTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListSubListTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.util.List getList()>();
v2 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(0, 2);
v3 = interfaceinvoke v2.<java.util.List: java.util.List subList(int,int)>(1, 2);
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.util.List getOrderedElements()>();
v5 = interfaceinvoke v4.<java.util.List: java.lang.Object get(int)>(1);
v6 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(v5);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("subList(0, 2).subList(1, 2) should be a single-element list of the element at index 1", v6, v3);
return;
}
public void testSubList_size()
{
int v11, v13, v15, v2, v4, v5, v6, v8, v9;
java.util.List v1, v10, v12, v14, v3, v7;
com.google.common.collect.testing.testers.ListSubListTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListSubListTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.util.List getList()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: int getNumElements()>();
v3 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(0, v2);
v4 = interfaceinvoke v3.<java.util.List: int size()>();
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertEquals(int,int)>(v2, v4);
v5 = v2 - 1;
v6 = v2 - 1;
v7 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(0, v6);
v8 = interfaceinvoke v7.<java.util.List: int size()>();
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertEquals(int,int)>(v5, v8);
v9 = v2 - 1;
v10 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(1, v2);
v11 = interfaceinvoke v10.<java.util.List: int size()>();
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertEquals(int,int)>(v9, v11);
v12 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(v2, v2);
v13 = interfaceinvoke v12.<java.util.List: int size()>();
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertEquals(int,int)>(0, v13);
v14 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(0, 0);
v15 = interfaceinvoke v14.<java.util.List: int size()>();
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertEquals(int,int)>(0, v15);
return;
}
public void testSubList_isEmpty()
{
java.util.List[] v3;
int v14, v2, v5;
boolean v12, v15, v16;
java.util.Iterator v11;
java.util.List v1, v10, v4, v6, v7, v8, v9;
java.lang.Object v13;
com.google.common.collect.testing.testers.ListSubListTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListSubListTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.util.List getList()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: int getNumElements()>();
v3 = newarray (java.util.List)[5];
v4 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(0, v2);
v3[0] = v4;
v5 = v2 - 1;
v6 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(0, v5);
v3[1] = v6;
v7 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(1, v2);
v3[2] = v7;
v8 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(0, 0);
v3[3] = v8;
v9 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(v2, v2);
v3[4] = v9;
v10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v3);
v11 = interfaceinvoke v10.<java.util.List: java.util.Iterator iterator()>();
label1:
v12 = interfaceinvoke v11.<java.util.Iterator: boolean hasNext()>();
if v12 == 0 goto label4;
v13 = interfaceinvoke v11.<java.util.Iterator: java.lang.Object next()>();
v14 = interfaceinvoke v13.<java.util.List: int size()>();
if v14 != 0 goto label2;
v15 = 1;
goto label3;
label2:
v15 = 0;
label3:
v16 = interfaceinvoke v13.<java.util.List: boolean isEmpty()>();
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertEquals(boolean,boolean)>(v15, v16);
goto label1;
label4:
return;
}
public void testSubList_get()
{
java.lang.IndexOutOfBoundsException v40;
java.util.List[] v25;
java.lang.Integer v32, v34;
boolean v28, v37;
java.util.List v1, v26, v3, v35, v5, v6;
java.lang.Integer[] v30;
int v11, v15, v17, v2, v21, v23, v31, v33, v39, v4, v9;
java.util.Iterator v27, v36;
java.lang.Object v10, v12, v13, v14, v16, v18, v19, v20, v22, v24, v29, v38, v7, v8;
com.google.common.collect.testing.testers.ListSubListTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListSubListTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.util.List getList()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: int getNumElements()>();
v3 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(0, v2);
v4 = v2 - 1;
v5 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(0, v4);
v6 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(1, v2);
v7 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(0);
v8 = interfaceinvoke v3.<java.util.List: java.lang.Object get(int)>(0);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertEquals(java.lang.Object,java.lang.Object)>(v7, v8);
v9 = v2 - 1;
v10 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(v9);
v11 = v2 - 1;
v12 = interfaceinvoke v3.<java.util.List: java.lang.Object get(int)>(v11);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertEquals(java.lang.Object,java.lang.Object)>(v10, v12);
v13 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(1);
v14 = interfaceinvoke v6.<java.util.List: java.lang.Object get(int)>(0);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertEquals(java.lang.Object,java.lang.Object)>(v13, v14);
v15 = v2 - 1;
v16 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(v15);
v17 = v2 - 2;
v18 = interfaceinvoke v6.<java.util.List: java.lang.Object get(int)>(v17);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertEquals(java.lang.Object,java.lang.Object)>(v16, v18);
v19 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(0);
v20 = interfaceinvoke v5.<java.util.List: java.lang.Object get(int)>(0);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertEquals(java.lang.Object,java.lang.Object)>(v19, v20);
v21 = v2 - 2;
v22 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(v21);
v23 = v2 - 2;
v24 = interfaceinvoke v5.<java.util.List: java.lang.Object get(int)>(v23);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertEquals(java.lang.Object,java.lang.Object)>(v22, v24);
v25 = newarray (java.util.List)[3];
v25[0] = v3;
v25[1] = v5;
v25[2] = v6;
v26 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v25);
v27 = interfaceinvoke v26.<java.util.List: java.util.Iterator iterator()>();
label1:
v28 = interfaceinvoke v27.<java.util.Iterator: boolean hasNext()>();
if v28 == 0 goto label6;
v29 = interfaceinvoke v27.<java.util.Iterator: java.lang.Object next()>();
v30 = newarray (java.lang.Integer)[2];
v31 = (int) -1;
v32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v31);
v30[0] = v32;
v33 = interfaceinvoke v29.<java.util.List: int size()>();
v34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v33);
v30[1] = v34;
v35 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v30);
v36 = interfaceinvoke v35.<java.util.List: java.util.Iterator iterator()>();
label2:
v37 = interfaceinvoke v36.<java.util.Iterator: boolean hasNext()>();
if v37 == 0 goto label1;
v38 = interfaceinvoke v36.<java.util.Iterator: java.lang.Object next()>();
v39 = virtualinvoke v38.<java.lang.Integer: int intValue()>();
label3:
interfaceinvoke v29.<java.util.List: java.lang.Object get(int)>(v39);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void fail(java.lang.String)>("expected IndexOutOfBoundsException");
label4:
goto label2;
label5:
v40 := @caughtexception;
goto label2;
label6:
return;
catch java.lang.IndexOutOfBoundsException from label3 to label4 with label5;
}
public void testSubList_contains()
{
int v13, v16, v19, v2, v22, v4;
boolean v10, v12, v15, v18, v21, v24, v26, v8;
java.util.List v1, v3, v5, v6;
java.lang.Object v11, v14, v17, v20, v23, v25, v7, v9;
com.google.common.collect.testing.testers.ListSubListTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListSubListTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.util.List getList()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: int getNumElements()>();
v3 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(0, v2);
v4 = v2 - 1;
v5 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(0, v4);
v6 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(1, v2);
v7 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(0);
v8 = interfaceinvoke v3.<java.util.List: boolean contains(java.lang.Object)>(v7);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertTrue(boolean)>(v8);
v9 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(0);
v10 = interfaceinvoke v5.<java.util.List: boolean contains(java.lang.Object)>(v9);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertTrue(boolean)>(v10);
v11 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(1);
v12 = interfaceinvoke v6.<java.util.List: boolean contains(java.lang.Object)>(v11);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertTrue(boolean)>(v12);
v13 = v2 - 1;
v14 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(v13);
v15 = interfaceinvoke v3.<java.util.List: boolean contains(java.lang.Object)>(v14);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertTrue(boolean)>(v15);
v16 = v2 - 2;
v17 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(v16);
v18 = interfaceinvoke v5.<java.util.List: boolean contains(java.lang.Object)>(v17);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertTrue(boolean)>(v18);
v19 = v2 - 1;
v20 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(v19);
v21 = interfaceinvoke v6.<java.util.List: boolean contains(java.lang.Object)>(v20);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertTrue(boolean)>(v21);
v22 = v2 - 1;
v23 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(v22);
v24 = interfaceinvoke v5.<java.util.List: boolean contains(java.lang.Object)>(v23);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertFalse(boolean)>(v24);
v25 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(0);
v26 = interfaceinvoke v6.<java.util.List: boolean contains(java.lang.Object)>(v25);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertFalse(boolean)>(v26);
return;
}
public void testSubList_indexOf()
{
java.util.List v1, v3, v5, v6;
int v10, v12, v13, v14, v16, v17, v18, v2, v20, v21, v22, v24, v25, v27, v28, v30, v31, v4, v8;
java.lang.Object v11, v15, v19, v23, v26, v29, v7, v9;
com.google.common.collect.testing.testers.ListSubListTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListSubListTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.util.List getList()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: int getNumElements()>();
v3 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(0, v2);
v4 = v2 - 1;
v5 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(0, v4);
v6 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(1, v2);
v7 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(0);
v8 = interfaceinvoke v3.<java.util.List: int indexOf(java.lang.Object)>(v7);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertEquals(int,int)>(0, v8);
v9 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(0);
v10 = interfaceinvoke v5.<java.util.List: int indexOf(java.lang.Object)>(v9);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertEquals(int,int)>(0, v10);
v11 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(1);
v12 = interfaceinvoke v6.<java.util.List: int indexOf(java.lang.Object)>(v11);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertEquals(int,int)>(0, v12);
v13 = v2 - 1;
v14 = v2 - 1;
v15 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(v14);
v16 = interfaceinvoke v3.<java.util.List: int indexOf(java.lang.Object)>(v15);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertEquals(int,int)>(v13, v16);
v17 = v2 - 2;
v18 = v2 - 2;
v19 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(v18);
v20 = interfaceinvoke v5.<java.util.List: int indexOf(java.lang.Object)>(v19);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertEquals(int,int)>(v17, v20);
v21 = v2 - 2;
v22 = v2 - 1;
v23 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(v22);
v24 = interfaceinvoke v6.<java.util.List: int indexOf(java.lang.Object)>(v23);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertEquals(int,int)>(v21, v24);
v25 = v2 - 1;
v26 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(v25);
v27 = interfaceinvoke v5.<java.util.List: int indexOf(java.lang.Object)>(v26);
v28 = (int) -1;
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertEquals(int,int)>(v28, v27);
v29 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(0);
v30 = interfaceinvoke v6.<java.util.List: int indexOf(java.lang.Object)>(v29);
v31 = (int) -1;
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertEquals(int,int)>(v31, v30);
return;
}
public void testSubList_lastIndexOf()
{
java.util.List v1, v3, v5, v6;
int v10, v11, v12, v14, v15, v16, v18, v2, v20, v22, v24, v25, v27, v28, v30, v31, v4, v7, v8;
java.lang.Object v13, v17, v19, v21, v23, v26, v29, v9;
com.google.common.collect.testing.testers.ListSubListTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListSubListTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.util.List getList()>();
v2 = interfaceinvoke v1.<java.util.List: int size()>();
v3 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(0, v2);
v4 = v2 - 1;
v5 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(0, v4);
v6 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(1, v2);
v7 = v2 - 1;
v8 = v2 - 1;
v9 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(v8);
v10 = interfaceinvoke v3.<java.util.List: int lastIndexOf(java.lang.Object)>(v9);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertEquals(int,int)>(v7, v10);
v11 = v2 - 2;
v12 = v2 - 2;
v13 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(v12);
v14 = interfaceinvoke v5.<java.util.List: int lastIndexOf(java.lang.Object)>(v13);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertEquals(int,int)>(v11, v14);
v15 = v2 - 2;
v16 = v2 - 1;
v17 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(v16);
v18 = interfaceinvoke v6.<java.util.List: int lastIndexOf(java.lang.Object)>(v17);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertEquals(int,int)>(v15, v18);
v19 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(0);
v20 = interfaceinvoke v3.<java.util.List: int lastIndexOf(java.lang.Object)>(v19);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertEquals(int,int)>(0, v20);
v21 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(0);
v22 = interfaceinvoke v5.<java.util.List: int lastIndexOf(java.lang.Object)>(v21);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertEquals(int,int)>(0, v22);
v23 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(1);
v24 = interfaceinvoke v6.<java.util.List: int lastIndexOf(java.lang.Object)>(v23);
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertEquals(int,int)>(0, v24);
v25 = v2 - 1;
v26 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(v25);
v27 = interfaceinvoke v5.<java.util.List: int lastIndexOf(java.lang.Object)>(v26);
v28 = (int) -1;
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertEquals(int,int)>(v28, v27);
v29 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(0);
v30 = interfaceinvoke v6.<java.util.List: int lastIndexOf(java.lang.Object)>(v29);
v31 = (int) -1;
staticinvoke <com.google.common.collect.testing.testers.ListSubListTester: void assertEquals(int,int)>(v31, v30);
return;
}
public void testReserializeWholeSubList()
{
java.util.List v1, v3;
int v2;
com.google.common.collect.testing.testers.ListSubListTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListSubListTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.util.List getList()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: int getNumElements()>();
v3 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(0, v2);
staticinvoke <com.google.common.testing.SerializableTester: java.lang.Object reserializeAndAssert(java.lang.Object)>(v3);
return;
}
public void testReserializeEmptySubList()
{
java.util.List v1, v2;
com.google.common.collect.testing.testers.ListSubListTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListSubListTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.util.List getList()>();
v2 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(0, 0);
staticinvoke <com.google.common.testing.SerializableTester: java.lang.Object reserializeAndAssert(java.lang.Object)>(v2);
return;
}
public void testReserializeSubList()
{
java.util.List v1, v2;
com.google.common.collect.testing.testers.ListSubListTester v0;
v0 := @this: com.google.common.collect.testing.testers.ListSubListTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.ListSubListTester: java.util.List getList()>();
v2 = interfaceinvoke v1.<java.util.List: java.util.List subList(int,int)>(0, 2);
staticinvoke <com.google.common.testing.SerializableTester: java.lang.Object reserializeAndAssert(java.lang.Object)>(v2);
return;
}
public static java.lang.reflect.Method getSubListOriginalListSetAffectsSubListMethod()
{
java.lang.reflect.Method v0;
v0 = staticinvoke <com.google.common.collect.testing.Helpers: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String)>(class "Lcom/google/common/collect/testing/testers/ListSubListTester;", "testSubList_originalListSetAffectsSubList");
return v0;
}
public static java.lang.reflect.Method getSubListOriginalListSetAffectsSubListLargeListMethod()
{
java.lang.reflect.Method v0;
v0 = staticinvoke <com.google.common.collect.testing.Helpers: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String)>(class "Lcom/google/common/collect/testing/testers/ListSubListTester;", "testSubList_originalListSetAffectsSubListLargeList");
return v0;
}
public static java.lang.reflect.Method getSubListSubListRemoveAffectsOriginalLargeListMethod()
{
java.lang.reflect.Method v0;
v0 = staticinvoke <com.google.common.collect.testing.Helpers: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String)>(class "Lcom/google/common/collect/testing/testers/ListSubListTester;", "testSubList_subListRemoveAffectsOriginalLargeList");
return v0;
}
}