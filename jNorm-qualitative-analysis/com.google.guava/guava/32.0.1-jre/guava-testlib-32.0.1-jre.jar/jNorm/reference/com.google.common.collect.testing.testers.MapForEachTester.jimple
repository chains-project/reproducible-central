public class com.google.common.collect.testing.testers.MapForEachTester extends com.google.common.collect.testing.AbstractMapTester
{
public void <init>()
{
com.google.common.collect.testing.testers.MapForEachTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapForEachTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractMapTester: void <init>()>();
return;
}
public void testForEachKnownOrder()
{
java.util.List v4;
com.google.common.collect.testing.testers.MapForEachTester v0;
java.util.Map v2;
java.util.function.BiConsumer v3;
java.util.ArrayList v1;
v0 := @this: com.google.common.collect.testing.testers.MapForEachTester;
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapForEachTester: java.util.Map getMap()>();
v3 = staticinvoke <com.google.common.collect.testing.testers.MapForEachTester$lambda_testForEachKnownOrder_0__61: java.util.function.BiConsumer bootstrap$(com.google.common.collect.testing.testers.MapForEachTester,java.util.List)>(v0, v1);
interfaceinvoke v2.<java.util.Map: void forEach(java.util.function.BiConsumer)>(v3);
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapForEachTester: java.util.List getOrderedElements()>();
staticinvoke <com.google.common.collect.testing.testers.MapForEachTester: void assertEquals(java.lang.Object,java.lang.Object)>(v4, v1);
return;
}
public void testForEachUnknownOrder()
{
com.google.common.collect.testing.testers.MapForEachTester v0;
java.util.Collection v4;
java.util.Map v2;
java.util.function.BiConsumer v3;
java.util.ArrayList v1;
v0 := @this: com.google.common.collect.testing.testers.MapForEachTester;
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapForEachTester: java.util.Map getMap()>();
v3 = staticinvoke <com.google.common.collect.testing.testers.MapForEachTester$lambda_testForEachUnknownOrder_1__62: java.util.function.BiConsumer bootstrap$(com.google.common.collect.testing.testers.MapForEachTester,java.util.List)>(v0, v1);
interfaceinvoke v2.<java.util.Map: void forEach(java.util.function.BiConsumer)>(v3);
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapForEachTester: java.util.Collection getSampleEntries()>();
staticinvoke <com.google.common.collect.testing.Helpers: void assertEqualIgnoringOrder(java.lang.Iterable,java.lang.Iterable)>(v4, v1);
return;
}
public void testForEach_nullKeys()
{
java.util.List v2;
com.google.common.collect.testing.testers.MapForEachTester v0;
java.util.Map v4;
java.util.function.BiConsumer v5;
java.util.Map$Entry[] v1;
java.util.ArrayList v3;
v0 := @this: com.google.common.collect.testing.testers.MapForEachTester;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapForEachTester: void initMapWithNullKey()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapForEachTester: java.util.Map$Entry[] createArrayWithNullKey()>();
v2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapForEachTester: java.util.Map getMap()>();
v5 = staticinvoke <com.google.common.collect.testing.testers.MapForEachTester$lambda_testForEach_nullKeys_2__63: java.util.function.BiConsumer bootstrap$(com.google.common.collect.testing.testers.MapForEachTester,java.util.List)>(v0, v3);
interfaceinvoke v4.<java.util.Map: void forEach(java.util.function.BiConsumer)>(v5);
staticinvoke <com.google.common.collect.testing.Helpers: void assertEqualIgnoringOrder(java.lang.Iterable,java.lang.Iterable)>(v2, v3);
return;
}
public void testForEach_nullValues()
{
java.util.List v2;
com.google.common.collect.testing.testers.MapForEachTester v0;
java.util.Map v4;
java.util.function.BiConsumer v5;
java.util.Map$Entry[] v1;
java.util.ArrayList v3;
v0 := @this: com.google.common.collect.testing.testers.MapForEachTester;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapForEachTester: void initMapWithNullValue()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapForEachTester: java.util.Map$Entry[] createArrayWithNullValue()>();
v2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapForEachTester: java.util.Map getMap()>();
v5 = staticinvoke <com.google.common.collect.testing.testers.MapForEachTester$lambda_testForEach_nullValues_3__64: java.util.function.BiConsumer bootstrap$(com.google.common.collect.testing.testers.MapForEachTester,java.util.List)>(v0, v3);
interfaceinvoke v4.<java.util.Map: void forEach(java.util.function.BiConsumer)>(v5);
staticinvoke <com.google.common.collect.testing.Helpers: void assertEqualIgnoringOrder(java.lang.Iterable,java.lang.Iterable)>(v2, v3);
return;
}
}