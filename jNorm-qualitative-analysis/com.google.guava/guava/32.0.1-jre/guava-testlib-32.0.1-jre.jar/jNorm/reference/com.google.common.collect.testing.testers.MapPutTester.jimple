public class com.google.common.collect.testing.testers.MapPutTester extends com.google.common.collect.testing.AbstractMapTester
{
private java.util.Map$Entry nullKeyEntry;
private java.util.Map$Entry nullValueEntry;
private java.util.Map$Entry nullKeyValueEntry;
private java.util.Map$Entry presentKeyNullValueEntry;
public void <init>()
{
com.google.common.collect.testing.testers.MapPutTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapPutTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractMapTester: void <init>()>();
return;
}
public void setUp() throws java.lang.Exception
{
com.google.common.collect.testing.testers.MapPutTester v0;
java.util.Map$Entry v2, v4, v5, v7;
java.lang.Object v1, v3, v6;
v0 := @this: com.google.common.collect.testing.testers.MapPutTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractMapTester: void setUp()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object v3()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>(null, v1);
v0.<com.google.common.collect.testing.testers.MapPutTester: java.util.Map$Entry nullKeyEntry> = v2;
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object k3()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>(v3, null);
v0.<com.google.common.collect.testing.testers.MapPutTester: java.util.Map$Entry nullValueEntry> = v4;
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>(null, null);
v0.<com.google.common.collect.testing.testers.MapPutTester: java.util.Map$Entry nullKeyValueEntry> = v5;
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object k0()>();
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>(v6, null);
v0.<com.google.common.collect.testing.testers.MapPutTester: java.util.Map$Entry presentKeyNullValueEntry> = v7;
return;
}
public void testPut_supportedPresent()
{
com.google.common.collect.testing.testers.MapPutTester v0;
java.util.Map$Entry v8;
java.util.Map v2;
java.lang.Object v1, v3, v4, v5, v6, v7;
v0 := @this: com.google.common.collect.testing.testers.MapPutTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object v0()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.util.Map getMap()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object k0()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object v3()>();
v5 = interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v3, v4);
staticinvoke <com.google.common.collect.testing.testers.MapPutTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("put(present, value) should return the old value", v1, v5);
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object k0()>();
v7 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object v3()>();
v8 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>(v6, v7);
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: void expectReplacement(java.util.Map$Entry)>(v8);
return;
}
public void testPut_supportedNotPresent()
{
com.google.common.collect.testing.testers.MapPutTester v0;
java.lang.Object v1, v2, v4;
java.util.Map$Entry[] v3;
v0 := @this: com.google.common.collect.testing.testers.MapPutTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object e3()>();
v2 = specialinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object put(java.util.Map$Entry)>(v1);
staticinvoke <com.google.common.collect.testing.testers.MapPutTester: void assertNull(java.lang.String,java.lang.Object)>("put(notPresent, value) should return null", v2);
v3 = newarray (java.util.Map$Entry)[1];
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object e3()>();
v3[0] = v4;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: void expectAdded(java.lang.Object[])>(v3);
return;
}
public void testPutAbsentConcurrentWithEntrySetIteration()
{
com.google.common.collect.testing.testers.MapPutTester v0;
java.util.Iterator v3;
java.util.Map v1;
java.util.Set v2;
java.lang.Object v4;
java.util.ConcurrentModificationException v5;
v0 := @this: com.google.common.collect.testing.testers.MapPutTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.util.Map getMap()>();
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object e3()>();
specialinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object put(java.util.Map$Entry)>(v4);
interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <com.google.common.collect.testing.testers.MapPutTester: void fail(java.lang.String)>("Expected ConcurrentModificationException");
label2:
goto label4;
label3:
v5 := @caughtexception;
label4:
return;
catch java.util.ConcurrentModificationException from label1 to label2 with label3;
}
public void testPutAbsentConcurrentWithKeySetIteration()
{
com.google.common.collect.testing.testers.MapPutTester v0;
java.util.Iterator v3;
java.util.Map v1;
java.util.Set v2;
java.lang.Object v4;
java.util.ConcurrentModificationException v5;
v0 := @this: com.google.common.collect.testing.testers.MapPutTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.util.Map getMap()>();
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set keySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object e3()>();
specialinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object put(java.util.Map$Entry)>(v4);
interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <com.google.common.collect.testing.testers.MapPutTester: void fail(java.lang.String)>("Expected ConcurrentModificationException");
label2:
goto label4;
label3:
v5 := @caughtexception;
label4:
return;
catch java.util.ConcurrentModificationException from label1 to label2 with label3;
}
public void testPutAbsentConcurrentWithValueIteration()
{
com.google.common.collect.testing.testers.MapPutTester v0;
java.util.Iterator v3;
java.util.Collection v2;
java.util.Map v1;
java.lang.Object v4;
java.util.ConcurrentModificationException v5;
v0 := @this: com.google.common.collect.testing.testers.MapPutTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.util.Map getMap()>();
v2 = interfaceinvoke v1.<java.util.Map: java.util.Collection values()>();
v3 = interfaceinvoke v2.<java.util.Collection: java.util.Iterator iterator()>();
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object e3()>();
specialinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object put(java.util.Map$Entry)>(v4);
interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <com.google.common.collect.testing.testers.MapPutTester: void fail(java.lang.String)>("Expected ConcurrentModificationException");
label2:
goto label4;
label3:
v5 := @caughtexception;
label4:
return;
catch java.util.ConcurrentModificationException from label1 to label2 with label3;
}
public void testPut_unsupportedNotPresent()
{
java.lang.UnsupportedOperationException v2;
com.google.common.collect.testing.testers.MapPutTester v0;
java.lang.Object v1, v4;
java.util.Map$Entry[] v3;
v0 := @this: com.google.common.collect.testing.testers.MapPutTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object e3()>();
specialinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object put(java.util.Map$Entry)>(v1);
staticinvoke <com.google.common.collect.testing.testers.MapPutTester: void fail(java.lang.String)>("put(notPresent, value) should throw");
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: void expectUnchanged()>();
v3 = newarray (java.util.Map$Entry)[1];
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object e3()>();
v3[0] = v4;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: void expectMissing(java.util.Map$Entry[])>(v3);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testPut_unsupportedPresentExistingValue()
{
java.lang.UnsupportedOperationException v4;
com.google.common.collect.testing.testers.MapPutTester v0;
java.lang.Object v1, v2, v3;
v0 := @this: com.google.common.collect.testing.testers.MapPutTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object v0()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object e0()>();
v3 = specialinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object put(java.util.Map$Entry)>(v2);
staticinvoke <com.google.common.collect.testing.testers.MapPutTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("put(present, existingValue) should return present or throw", v1, v3);
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: void expectUnchanged()>();
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testPut_unsupportedPresentDifferentValue()
{
java.lang.UnsupportedOperationException v4;
com.google.common.collect.testing.testers.MapPutTester v0;
java.util.Map v1;
java.lang.Object v2, v3;
v0 := @this: com.google.common.collect.testing.testers.MapPutTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object k0()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object v3()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v2, v3);
staticinvoke <com.google.common.collect.testing.testers.MapPutTester: void fail(java.lang.String)>("put(present, differentValue) should throw");
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: void expectUnchanged()>();
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
}
public void testPut_nullKeySupportedNotPresent()
{
com.google.common.collect.testing.testers.MapPutTester v0;
java.util.Map$Entry v1, v4;
java.lang.Object v2;
java.util.Map$Entry[] v3;
v0 := @this: com.google.common.collect.testing.testers.MapPutTester;
v1 = v0.<com.google.common.collect.testing.testers.MapPutTester: java.util.Map$Entry nullKeyEntry>;
v2 = specialinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object put(java.util.Map$Entry)>(v1);
staticinvoke <com.google.common.collect.testing.testers.MapPutTester: void assertNull(java.lang.String,java.lang.Object)>("put(null, value) should return null", v2);
v3 = newarray (java.util.Map$Entry)[1];
v4 = v0.<com.google.common.collect.testing.testers.MapPutTester: java.util.Map$Entry nullKeyEntry>;
v3[0] = v4;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: void expectAdded(java.lang.Object[])>(v3);
return;
}
public void testPut_nullKeySupportedPresent()
{
com.google.common.collect.testing.testers.MapPutTester v0;
java.util.Map$Entry v2;
int v6;
java.lang.Object v1, v3, v4;
java.util.Map$Entry[] v5;
v0 := @this: com.google.common.collect.testing.testers.MapPutTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object v3()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>(null, v1);
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: void initMapWithNullKey()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object getValueForNullKey()>();
v4 = specialinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object put(java.util.Map$Entry)>(v2);
staticinvoke <com.google.common.collect.testing.testers.MapPutTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("put(present, value) should return the associated value", v3, v4);
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.util.Map$Entry[] createArrayWithNullKey()>();
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: int getNullLocation()>();
v5[v6] = v2;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: void expectContents(java.lang.Object[])>(v5);
return;
}
public void testPut_nullKeyUnsupported()
{
com.google.common.collect.testing.testers.MapPutTester v0;
java.util.Map$Entry v1;
java.lang.NullPointerException v2;
v0 := @this: com.google.common.collect.testing.testers.MapPutTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.MapPutTester: java.util.Map$Entry nullKeyEntry>;
specialinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object put(java.util.Map$Entry)>(v1);
staticinvoke <com.google.common.collect.testing.testers.MapPutTester: void fail(java.lang.String)>("put(null, value) should throw");
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: void expectUnchanged()>();
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: void expectNullKeyMissingWhenNullKeysUnsupported(java.lang.String)>("Should not contain null key after unsupported put(null, value)");
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testPut_nullValueSupported()
{
com.google.common.collect.testing.testers.MapPutTester v0;
java.util.Map$Entry v1, v4;
java.lang.Object v2;
java.util.Map$Entry[] v3;
v0 := @this: com.google.common.collect.testing.testers.MapPutTester;
v1 = v0.<com.google.common.collect.testing.testers.MapPutTester: java.util.Map$Entry nullValueEntry>;
v2 = specialinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object put(java.util.Map$Entry)>(v1);
staticinvoke <com.google.common.collect.testing.testers.MapPutTester: void assertNull(java.lang.String,java.lang.Object)>("put(key, null) should return null", v2);
v3 = newarray (java.util.Map$Entry)[1];
v4 = v0.<com.google.common.collect.testing.testers.MapPutTester: java.util.Map$Entry nullValueEntry>;
v3[0] = v4;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: void expectAdded(java.lang.Object[])>(v3);
return;
}
public void testPut_nullValueUnsupported()
{
com.google.common.collect.testing.testers.MapPutTester v0;
java.util.Map$Entry v1;
java.lang.NullPointerException v2;
v0 := @this: com.google.common.collect.testing.testers.MapPutTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.MapPutTester: java.util.Map$Entry nullValueEntry>;
specialinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object put(java.util.Map$Entry)>(v1);
staticinvoke <com.google.common.collect.testing.testers.MapPutTester: void fail(java.lang.String)>("put(key, null) should throw");
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: void expectUnchanged()>();
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: void expectNullValueMissingWhenNullValuesUnsupported(java.lang.String)>("Should not contain null value after unsupported put(key, null)");
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testPut_replaceWithNullValueSupported()
{
com.google.common.collect.testing.testers.MapPutTester v0;
java.util.Map$Entry v2, v4;
java.lang.Object v1, v3;
v0 := @this: com.google.common.collect.testing.testers.MapPutTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object v0()>();
v2 = v0.<com.google.common.collect.testing.testers.MapPutTester: java.util.Map$Entry presentKeyNullValueEntry>;
v3 = specialinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object put(java.util.Map$Entry)>(v2);
staticinvoke <com.google.common.collect.testing.testers.MapPutTester: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("put(present, null) should return the associated value", v1, v3);
v4 = v0.<com.google.common.collect.testing.testers.MapPutTester: java.util.Map$Entry presentKeyNullValueEntry>;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: void expectReplacement(java.util.Map$Entry)>(v4);
return;
}
public void testPut_replaceWithNullValueUnsupported()
{
com.google.common.collect.testing.testers.MapPutTester v0;
java.util.Map$Entry v1;
java.lang.NullPointerException v2;
v0 := @this: com.google.common.collect.testing.testers.MapPutTester;
label1:
v1 = v0.<com.google.common.collect.testing.testers.MapPutTester: java.util.Map$Entry presentKeyNullValueEntry>;
specialinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object put(java.util.Map$Entry)>(v1);
staticinvoke <com.google.common.collect.testing.testers.MapPutTester: void fail(java.lang.String)>("put(present, null) should throw");
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: void expectUnchanged()>();
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: void expectNullValueMissingWhenNullValuesUnsupported(java.lang.String)>("Should not contain null after unsupported put(present, null)");
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
public void testPut_replaceNullValueWithNullSupported()
{
com.google.common.collect.testing.testers.MapPutTester v0;
java.util.Map v1;
java.lang.Object v2, v3;
java.util.Map$Entry[] v4;
v0 := @this: com.google.common.collect.testing.testers.MapPutTester;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: void initMapWithNullValue()>();
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.util.Map getMap()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object getKeyForNullValue()>();
v3 = interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v2, null);
staticinvoke <com.google.common.collect.testing.testers.MapPutTester: void assertNull(java.lang.String,java.lang.Object)>("put(present, null) should return the associated value (null)", v3);
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.util.Map$Entry[] createArrayWithNullValue()>();
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: void expectContents(java.lang.Object[])>(v4);
return;
}
public void testPut_replaceNullValueWithNonNullSupported()
{
com.google.common.collect.testing.testers.MapPutTester v0;
java.util.Map$Entry v3;
int v6;
java.lang.Object v1, v2, v4;
java.util.Map$Entry[] v5;
v0 := @this: com.google.common.collect.testing.testers.MapPutTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object getKeyForNullValue()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object v3()>();
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>(v1, v2);
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: void initMapWithNullValue()>();
v4 = specialinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object put(java.util.Map$Entry)>(v3);
staticinvoke <com.google.common.collect.testing.testers.MapPutTester: void assertNull(java.lang.String,java.lang.Object)>("put(present, value) should return the associated value (null)", v4);
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.util.Map$Entry[] createArrayWithNullValue()>();
v6 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: int getNullLocation()>();
v5[v6] = v3;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: void expectContents(java.lang.Object[])>(v5);
return;
}
public void testPut_nullKeyAndValueSupported()
{
com.google.common.collect.testing.testers.MapPutTester v0;
java.util.Map$Entry v1, v4;
java.lang.Object v2;
java.util.Map$Entry[] v3;
v0 := @this: com.google.common.collect.testing.testers.MapPutTester;
v1 = v0.<com.google.common.collect.testing.testers.MapPutTester: java.util.Map$Entry nullKeyValueEntry>;
v2 = specialinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.lang.Object put(java.util.Map$Entry)>(v1);
staticinvoke <com.google.common.collect.testing.testers.MapPutTester: void assertNull(java.lang.String,java.lang.Object)>("put(null, null) should return null", v2);
v3 = newarray (java.util.Map$Entry)[1];
v4 = v0.<com.google.common.collect.testing.testers.MapPutTester: java.util.Map$Entry nullKeyValueEntry>;
v3[0] = v4;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: void expectAdded(java.lang.Object[])>(v3);
return;
}
private java.lang.Object put(java.util.Map$Entry)
{
com.google.common.collect.testing.testers.MapPutTester v0;
java.util.Map$Entry v1;
java.util.Map v2;
java.lang.Object v3, v4, v5;
v0 := @this: com.google.common.collect.testing.testers.MapPutTester;
v1 := @parameter0: java.util.Map$Entry;
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapPutTester: java.util.Map getMap()>();
v3 = interfaceinvoke v1.<java.util.Map$Entry: java.lang.Object getKey()>();
v4 = interfaceinvoke v1.<java.util.Map$Entry: java.lang.Object getValue()>();
v5 = interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v3, v4);
return v5;
}
public static java.lang.reflect.Method getPutNullKeyUnsupportedMethod()
{
java.lang.reflect.Method v0;
v0 = staticinvoke <com.google.common.collect.testing.Helpers: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String)>(class "Lcom/google/common/collect/testing/testers/MapPutTester;", "testPut_nullKeyUnsupported");
return v0;
}
}