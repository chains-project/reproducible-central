public class com.google.common.collect.testing.testers.MapToStringTester extends com.google.common.collect.testing.AbstractMapTester
{
public void <init>()
{
com.google.common.collect.testing.testers.MapToStringTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapToStringTester;
specialinvoke v0.<com.google.common.collect.testing.AbstractMapTester: void <init>()>();
return;
}
public void testToString_minimal()
{
com.google.common.collect.testing.testers.MapToStringTester v0;
java.lang.String v2;
java.util.Map v1;
v0 := @this: com.google.common.collect.testing.testers.MapToStringTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapToStringTester: java.util.Map getMap()>();
v2 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
staticinvoke <com.google.common.collect.testing.testers.MapToStringTester: void assertNotNull(java.lang.String,java.lang.Object)>("toString() should not return null", v2);
return;
}
public void testToString_size0()
{
com.google.common.collect.testing.testers.MapToStringTester v0;
java.lang.String v2;
java.util.Map v1;
v0 := @this: com.google.common.collect.testing.testers.MapToStringTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapToStringTester: java.util.Map getMap()>();
v2 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
staticinvoke <com.google.common.collect.testing.testers.MapToStringTester: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("emptyMap.toString should return {}", "{}", v2);
return;
}
public void testToString_size1()
{
java.util.Map v3;
com.google.common.collect.testing.testers.MapToStringTester v0;
java.lang.Object v1;
java.lang.String v2, v4;
v0 := @this: com.google.common.collect.testing.testers.MapToStringTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapToStringTester: java.lang.Object e0()>();
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("{\u0001}");
v3 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapToStringTester: java.util.Map getMap()>();
v4 = virtualinvoke v3.<java.lang.Object: java.lang.String toString()>();
staticinvoke <com.google.common.collect.testing.testers.MapToStringTester: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("size1Map.toString should return {entry}", v2, v4);
return;
}
public void testToStringWithNullKey()
{
com.google.common.collect.testing.testers.MapToStringTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapToStringTester;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapToStringTester: void initMapWithNullKey()>();
virtualinvoke v0.<com.google.common.collect.testing.testers.MapToStringTester: void testToString_formatting()>();
return;
}
public void testToStringWithNullValue()
{
com.google.common.collect.testing.testers.MapToStringTester v0;
v0 := @this: com.google.common.collect.testing.testers.MapToStringTester;
virtualinvoke v0.<com.google.common.collect.testing.testers.MapToStringTester: void initMapWithNullValue()>();
virtualinvoke v0.<com.google.common.collect.testing.testers.MapToStringTester: void testToString_formatting()>();
return;
}
public void testToString_formatting()
{
java.util.Map v1, v4;
com.google.common.collect.testing.testers.MapToStringTester v0;
java.util.Set v2;
java.lang.String v3, v5;
v0 := @this: com.google.common.collect.testing.testers.MapToStringTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapToStringTester: java.util.Map getMap()>();
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v3 = specialinvoke v0.<com.google.common.collect.testing.testers.MapToStringTester: java.lang.String expectedToString(java.util.Set)>(v2);
v4 = virtualinvoke v0.<com.google.common.collect.testing.testers.MapToStringTester: java.util.Map getMap()>();
v5 = virtualinvoke v4.<java.lang.Object: java.lang.String toString()>();
staticinvoke <com.google.common.collect.testing.testers.MapToStringTester: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("map.toString() incorrect", v3, v5);
return;
}
private java.lang.String expectedToString(java.util.Set)
{
java.util.Iterator v3;
java.util.Set v1;
java.util.LinkedHashMap v2;
com.google.common.collect.testing.testers.MapToStringTester v0;
java.lang.Object v5, v6, v7;
java.lang.String v8;
boolean v4;
v0 := @this: com.google.common.collect.testing.testers.MapToStringTester;
v1 := @parameter0: java.util.Set;
v2 = new java.util.LinkedHashMap;
specialinvoke v2.<java.util.LinkedHashMap: void <init>()>();
v3 = interfaceinvoke v1.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
v7 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getValue()>();
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v6, v7);
goto label1;
label2:
v8 = virtualinvoke v2.<java.lang.Object: java.lang.String toString()>();
return v8;
}
}