public class com.google.common.collect.testing.testers.QueueOfferTester extends com.google.common.collect.testing.testers.AbstractQueueTester
{
public void <init>()
{
com.google.common.collect.testing.testers.QueueOfferTester v0;
v0 := @this: com.google.common.collect.testing.testers.QueueOfferTester;
specialinvoke v0.<com.google.common.collect.testing.testers.AbstractQueueTester: void <init>()>();
return;
}
public void testOffer_supportedNotPresent()
{
java.lang.Object[] v4;
java.lang.Object v2, v5;
java.util.Queue v1;
com.google.common.collect.testing.testers.QueueOfferTester v0;
boolean v3;
v0 := @this: com.google.common.collect.testing.testers.QueueOfferTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.QueueOfferTester: java.util.Queue getQueue()>();
v2 = virtualinvoke v0.<com.google.common.collect.testing.testers.QueueOfferTester: java.lang.Object e3()>();
v3 = interfaceinvoke v1.<java.util.Queue: boolean offer(java.lang.Object)>(v2);
staticinvoke <com.google.common.collect.testing.testers.QueueOfferTester: void assertTrue(java.lang.String,boolean)>("offer(notPresent) should return true", v3);
v4 = newarray (java.lang.Object)[1];
v5 = virtualinvoke v0.<com.google.common.collect.testing.testers.QueueOfferTester: java.lang.Object e3()>();
v4[0] = v5;
virtualinvoke v0.<com.google.common.collect.testing.testers.QueueOfferTester: void expectAdded(java.lang.Object[])>(v4);
return;
}
public void testOffer_nullSupported()
{
java.lang.Object[] v3;
java.util.Queue v1;
com.google.common.collect.testing.testers.QueueOfferTester v0;
boolean v2;
v0 := @this: com.google.common.collect.testing.testers.QueueOfferTester;
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.QueueOfferTester: java.util.Queue getQueue()>();
v2 = interfaceinvoke v1.<java.util.Queue: boolean offer(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.testers.QueueOfferTester: void assertTrue(java.lang.String,boolean)>("offer(null) should return true", v2);
v3 = newarray (java.lang.Object)[1];
v3[0] = null;
virtualinvoke v0.<com.google.common.collect.testing.testers.QueueOfferTester: void expectAdded(java.lang.Object[])>(v3);
return;
}
public void testOffer_nullUnsupported()
{
java.util.Queue v1;
com.google.common.collect.testing.testers.QueueOfferTester v0;
java.lang.NullPointerException v2;
v0 := @this: com.google.common.collect.testing.testers.QueueOfferTester;
label1:
v1 = virtualinvoke v0.<com.google.common.collect.testing.testers.QueueOfferTester: java.util.Queue getQueue()>();
interfaceinvoke v1.<java.util.Queue: boolean offer(java.lang.Object)>(null);
staticinvoke <com.google.common.collect.testing.testers.QueueOfferTester: void fail(java.lang.String)>("offer(null) should throw");
label2:
goto label4;
label3:
v2 := @caughtexception;
label4:
virtualinvoke v0.<com.google.common.collect.testing.testers.QueueOfferTester: void expectUnchanged()>();
virtualinvoke v0.<com.google.common.collect.testing.testers.QueueOfferTester: void expectNullMissingWhenNullUnsupported(java.lang.String)>("Should not contain null after unsupported offer(null)");
return;
catch java.lang.NullPointerException from label1 to label2 with label3;
}
}