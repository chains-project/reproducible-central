class com.google.common.testing.AbstractPackageSanityTests$Chopper$2 extends com.google.common.testing.AbstractPackageSanityTests$Chopper
{
final java.lang.String val$suffix;
void <init>(java.lang.String)
{
com.google.common.testing.AbstractPackageSanityTests$Chopper$2 v0;
java.lang.String v1;
v0 := @this: com.google.common.testing.AbstractPackageSanityTests$Chopper$2;
v1 := @parameter0: java.lang.String;
v0.<com.google.common.testing.AbstractPackageSanityTests$Chopper$2: java.lang.String val$suffix> = v1;
specialinvoke v0.<com.google.common.testing.AbstractPackageSanityTests$Chopper: void <init>()>();
return;
}
com.google.common.base.Optional chop(java.lang.String)
{
com.google.common.base.Optional v10, v9;
int v4, v6, v7;
com.google.common.testing.AbstractPackageSanityTests$Chopper$2 v0;
java.lang.String v1, v2, v5, v8;
boolean v3;
v0 := @this: com.google.common.testing.AbstractPackageSanityTests$Chopper$2;
v1 := @parameter0: java.lang.String;
v2 = v0.<com.google.common.testing.AbstractPackageSanityTests$Chopper$2: java.lang.String val$suffix>;
v3 = virtualinvoke v1.<java.lang.String: boolean endsWith(java.lang.String)>(v2);
if v3 == 0 goto label1;
v4 = virtualinvoke v1.<java.lang.String: int length()>();
v5 = v0.<com.google.common.testing.AbstractPackageSanityTests$Chopper$2: java.lang.String val$suffix>;
v6 = virtualinvoke v5.<java.lang.String: int length()>();
v7 = v4 - v6;
v8 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int,int)>(0, v7);
v9 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional of(java.lang.Object)>(v8);
return v9;
label1:
v10 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional absent()>();
return v10;
}
}