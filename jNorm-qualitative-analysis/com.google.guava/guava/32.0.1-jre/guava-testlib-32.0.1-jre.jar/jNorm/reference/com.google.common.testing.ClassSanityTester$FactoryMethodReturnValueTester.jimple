public final class com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester extends java.lang.Object
{
private final java.util.Set packagesToTest;
private final java.lang.Class declaringClass;
private final com.google.common.collect.ImmutableList factories;
private final java.lang.String factoryMethodsDescription;
private java.lang.Class returnTypeToTest;
final com.google.common.testing.ClassSanityTester this$0;
private void <init>(com.google.common.testing.ClassSanityTester, java.lang.Class, com.google.common.collect.ImmutableList, java.lang.String)
{
java.util.Set v6;
java.util.HashSet v5;
com.google.common.collect.ImmutableList v3;
java.lang.Class v2;
java.lang.String v4, v7;
com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester v0;
com.google.common.testing.ClassSanityTester v1;
v0 := @this: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester;
v1 := @parameter0: com.google.common.testing.ClassSanityTester;
v2 := @parameter1: java.lang.Class;
v3 := @parameter2: com.google.common.collect.ImmutableList;
v4 := @parameter3: java.lang.String;
v0.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.testing.ClassSanityTester this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v5 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet()>();
v0.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: java.util.Set packagesToTest> = v5;
v0.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: java.lang.Class returnTypeToTest> = class "Ljava/lang/Object;";
v0.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: java.lang.Class declaringClass> = v2;
v0.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.collect.ImmutableList factories> = v3;
v0.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: java.lang.String factoryMethodsDescription> = v4;
v6 = v0.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: java.util.Set packagesToTest>;
v7 = staticinvoke <com.google.common.reflect.Reflection: java.lang.String getPackageName(java.lang.Class)>(v2);
interfaceinvoke v6.<java.util.Set: boolean add(java.lang.Object)>(v7);
return;
}
public com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester thatReturn(java.lang.Class)
{
java.lang.Class v1;
com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester v0;
v0 := @this: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester;
v1 := @parameter0: java.lang.Class;
v0.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: java.lang.Class returnTypeToTest> = v1;
return v0;
}
public com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester testNulls() throws java.lang.Exception
{
java.lang.AssertionError v13;
com.google.common.collect.ImmutableList v1;
java.lang.String v15, v9;
com.google.common.testing.ClassSanityTester v11, v5;
boolean v10, v3;
com.google.common.testing.NullPointerTester v12;
java.util.Set v7;
junit.framework.AssertionFailedError v14;
java.lang.Class v8;
java.lang.Object v4, v6;
com.google.common.collect.UnmodifiableIterator v2;
com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester v0;
v0 := @this: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester;
v1 = specialinvoke v0.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.collect.ImmutableList getFactoriesToTest()>();
v2 = virtualinvoke v1.<com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableIterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label5;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = v0.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.testing.ClassSanityTester this$0>;
v6 = specialinvoke v5.<com.google.common.testing.ClassSanityTester: java.lang.Object instantiate(com.google.common.reflect.Invokable)>(v4);
if v6 == null goto label1;
v7 = v0.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: java.util.Set packagesToTest>;
v8 = virtualinvoke v6.<java.lang.Object: java.lang.Class getClass()>();
v9 = staticinvoke <com.google.common.reflect.Reflection: java.lang.String getPackageName(java.lang.Class)>(v8);
v10 = interfaceinvoke v7.<java.util.Set: boolean contains(java.lang.Object)>(v9);
if v10 == 0 goto label1;
label2:
v11 = v0.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.testing.ClassSanityTester this$0>;
v12 = v11.<com.google.common.testing.ClassSanityTester: com.google.common.testing.NullPointerTester nullPointerTester>;
virtualinvoke v12.<com.google.common.testing.NullPointerTester: void testAllPublicInstanceMethods(java.lang.Object)>(v6);
label3:
goto label1;
label4:
v13 := @caughtexception;
v14 = new junit.framework.AssertionFailedError;
v15 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (com.google.common.reflect.Invokable)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Null check failed on return value of \u0001");
specialinvoke v14.<junit.framework.AssertionFailedError: void <init>(java.lang.String)>(v15);
virtualinvoke v14.<java.lang.AssertionError: java.lang.Throwable initCause(java.lang.Throwable)>(v13);
throw v14;
label5:
return v0;
catch java.lang.AssertionError from label2 to label3 with label4;
}
public com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester testEquals() throws java.lang.Exception
{
com.google.common.testing.ClassSanityTester$FactoryMethodReturnsNullException v6;
com.google.common.collect.ImmutableList v1;
java.lang.Object v4;
com.google.common.collect.UnmodifiableIterator v2;
com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester v0;
com.google.common.testing.ClassSanityTester v5;
boolean v3;
v0 := @this: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester;
v1 = specialinvoke v0.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.collect.ImmutableList getFactoriesToTest()>();
v2 = virtualinvoke v1.<com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableIterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label5;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
label2:
v5 = v0.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.testing.ClassSanityTester this$0>;
specialinvoke v5.<com.google.common.testing.ClassSanityTester: void testEqualsUsing(com.google.common.reflect.Invokable)>(v4);
label3:
goto label1;
label4:
v6 := @caughtexception;
goto label1;
label5:
return v0;
catch com.google.common.testing.ClassSanityTester$FactoryMethodReturnsNullException from label2 to label3 with label4;
}
public com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester testSerializable() throws java.lang.Exception
{
java.lang.Throwable v10;
junit.framework.AssertionFailedError v8;
java.lang.RuntimeException v7;
com.google.common.collect.ImmutableList v1;
java.lang.Object v4, v6;
com.google.common.collect.UnmodifiableIterator v2;
java.lang.String v9;
com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester v0;
com.google.common.testing.ClassSanityTester v5;
boolean v3;
v0 := @this: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester;
v1 = specialinvoke v0.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.collect.ImmutableList getFactoriesToTest()>();
v2 = virtualinvoke v1.<com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableIterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label5;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = v0.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.testing.ClassSanityTester this$0>;
v6 = specialinvoke v5.<com.google.common.testing.ClassSanityTester: java.lang.Object instantiate(com.google.common.reflect.Invokable)>(v4);
if v6 == null goto label1;
label2:
staticinvoke <com.google.common.testing.SerializableTester: java.lang.Object reserialize(java.lang.Object)>(v6);
label3:
goto label1;
label4:
v7 := @caughtexception;
v8 = new junit.framework.AssertionFailedError;
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (com.google.common.reflect.Invokable)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Serialization failed on return value of \u0001");
specialinvoke v8.<junit.framework.AssertionFailedError: void <init>(java.lang.String)>(v9);
v10 = virtualinvoke v7.<java.lang.RuntimeException: java.lang.Throwable getCause()>();
virtualinvoke v8.<java.lang.AssertionError: java.lang.Throwable initCause(java.lang.Throwable)>(v10);
throw v8;
label5:
return v0;
catch java.lang.RuntimeException from label2 to label3 with label4;
}
public com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester testEqualsAndSerializable() throws java.lang.Exception
{
java.lang.Throwable v12, v13;
com.google.common.collect.ImmutableList v1;
java.lang.String v11, v15;
com.google.common.testing.ClassSanityTester v5, v7;
boolean v3;
com.google.common.testing.ClassSanityTester$FactoryMethodReturnsNullException v6;
junit.framework.AssertionFailedError v10, v14;
java.lang.RuntimeException v9;
java.lang.Object v4, v8;
com.google.common.collect.UnmodifiableIterator v2;
com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester v0;
v0 := @this: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester;
v1 = specialinvoke v0.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.collect.ImmutableList getFactoriesToTest()>();
v2 = virtualinvoke v1.<com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableIterator iterator()>();
label01:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label10;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
label02:
v5 = v0.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.testing.ClassSanityTester this$0>;
specialinvoke v5.<com.google.common.testing.ClassSanityTester: void testEqualsUsing(com.google.common.reflect.Invokable)>(v4);
label03:
goto label05;
label04:
v6 := @caughtexception;
label05:
v7 = v0.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.testing.ClassSanityTester this$0>;
v8 = specialinvoke v7.<com.google.common.testing.ClassSanityTester: java.lang.Object instantiate(com.google.common.reflect.Invokable)>(v4);
if v8 == null goto label01;
label06:
staticinvoke <com.google.common.testing.SerializableTester: java.lang.Object reserializeAndAssert(java.lang.Object)>(v8);
label07:
goto label01;
label08:
v9 := @caughtexception;
v10 = new junit.framework.AssertionFailedError;
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (com.google.common.reflect.Invokable)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Serialization failed on return value of \u0001");
specialinvoke v10.<junit.framework.AssertionFailedError: void <init>(java.lang.String)>(v11);
v12 = virtualinvoke v9.<java.lang.RuntimeException: java.lang.Throwable getCause()>();
virtualinvoke v10.<java.lang.AssertionError: java.lang.Throwable initCause(java.lang.Throwable)>(v12);
throw v10;
label09:
v13 := @caughtexception;
v14 = new junit.framework.AssertionFailedError;
v15 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (com.google.common.reflect.Invokable)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Return value of \u0001 reserialized to an unequal value");
specialinvoke v14.<junit.framework.AssertionFailedError: void <init>(java.lang.String)>(v15);
virtualinvoke v14.<java.lang.AssertionError: java.lang.Throwable initCause(java.lang.Throwable)>(v13);
throw v14;
label10:
return v0;
catch com.google.common.testing.ClassSanityTester$FactoryMethodReturnsNullException from label02 to label03 with label04;
catch java.lang.RuntimeException from label06 to label07 with label08;
catch junit.framework.AssertionFailedError from label06 to label07 with label09;
}
private com.google.common.collect.ImmutableList getFactoriesToTest()
{
com.google.common.reflect.TypeToken v7;
com.google.common.collect.ImmutableList v10, v2;
java.lang.String v11, v13, v15;
boolean v16, v4, v9;
java.lang.Class v12, v14, v6, v8;
java.lang.Object v5;
com.google.common.collect.UnmodifiableIterator v3;
com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester v0;
com.google.common.collect.ImmutableList$Builder v1;
v0 := @this: com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester;
v1 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList$Builder builder()>();
v2 = v0.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: com.google.common.collect.ImmutableList factories>;
v3 = virtualinvoke v2.<com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableIterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = v0.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: java.lang.Class returnTypeToTest>;
v7 = virtualinvoke v5.<com.google.common.reflect.Invokable: com.google.common.reflect.TypeToken getReturnType()>();
v8 = virtualinvoke v7.<com.google.common.reflect.TypeToken: java.lang.Class getRawType()>();
v9 = virtualinvoke v6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v8);
if v9 == 0 goto label1;
virtualinvoke v1.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder add(java.lang.Object)>(v5);
goto label1;
label2:
v10 = virtualinvoke v1.<com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList build()>();
v11 = v0.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: java.lang.String factoryMethodsDescription>;
v12 = v0.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: java.lang.Class returnTypeToTest>;
v13 = virtualinvoke v12.<java.lang.Class: java.lang.String getName()>();
v14 = v0.<com.google.common.testing.ClassSanityTester$FactoryMethodReturnValueTester: java.lang.Class declaringClass>;
v15 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.Class)>(v11, v13, v14) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("No \u0001 that return \u0001 or subtype are found in \u0001.");
v16 = virtualinvoke v10.<com.google.common.collect.ImmutableList: boolean isEmpty()>();
staticinvoke <junit.framework.Assert: void assertFalse(java.lang.String,boolean)>(v15, v16);
return v10;
}
}