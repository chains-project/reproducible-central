public final class com.google.common.testing.EqualsTester extends java.lang.Object
{
private static final int REPETITIONS;
private final java.util.List equalityGroups;
private final com.google.common.testing.RelationshipTester$ItemReporter itemReporter;
public void <init>()
{
com.google.common.testing.RelationshipTester$ItemReporter v1;
com.google.common.testing.EqualsTester v0;
v0 := @this: com.google.common.testing.EqualsTester;
v1 = new com.google.common.testing.RelationshipTester$ItemReporter;
specialinvoke v1.<com.google.common.testing.RelationshipTester$ItemReporter: void <init>()>();
specialinvoke v0.<com.google.common.testing.EqualsTester: void <init>(com.google.common.testing.RelationshipTester$ItemReporter)>(v1);
return;
}
void <init>(com.google.common.testing.RelationshipTester$ItemReporter)
{
com.google.common.testing.RelationshipTester$ItemReporter v1;
java.lang.Object v3;
com.google.common.testing.EqualsTester v0;
java.util.ArrayList v2;
v0 := @this: com.google.common.testing.EqualsTester;
v1 := @parameter0: com.google.common.testing.RelationshipTester$ItemReporter;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();
v0.<com.google.common.testing.EqualsTester: java.util.List equalityGroups> = v2;
v3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(v1);
v0.<com.google.common.testing.EqualsTester: com.google.common.testing.RelationshipTester$ItemReporter itemReporter> = v3;
return;
}
public transient com.google.common.testing.EqualsTester addEqualityGroup(java.lang.Object[])
{
java.lang.Object[] v1;
java.lang.NullPointerException v7;
com.google.common.testing.EqualsTester v0;
java.util.ArrayList v2;
java.util.List v9;
int v3, v4, v5;
java.lang.Object v6;
java.lang.String v8;
v0 := @this: com.google.common.testing.EqualsTester;
v1 := @parameter0: java.lang.Object[];
staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(v1);
v2 = new java.util.ArrayList;
v3 = lengthof v1;
specialinvoke v2.<java.util.ArrayList: void <init>(int)>(v3);
v4 = 0;
label1:
v5 = lengthof v1;
if v4 >= v5 goto label3;
v6 = v1[v4];
if v6 != null goto label2;
v7 = new java.lang.NullPointerException;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("at index \u0001");
specialinvoke v7.<java.lang.NullPointerException: void <init>(java.lang.String)>(v8);
throw v7;
label2:
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v6);
v4 = v4 + 1;
goto label1;
label3:
v9 = v0.<com.google.common.testing.EqualsTester: java.util.List equalityGroups>;
interfaceinvoke v9.<java.util.List: boolean add(java.lang.Object)>(v2);
return v0;
}
public com.google.common.testing.EqualsTester testEquals()
{
com.google.common.base.Equivalence v2;
com.google.common.testing.RelationshipTester v1;
java.util.Iterator v5;
com.google.common.testing.EqualsTester v0;
com.google.common.testing.RelationshipTester$ItemReporter v3;
java.util.List v4;
int v8;
java.lang.Object v7;
boolean v6;
v0 := @this: com.google.common.testing.EqualsTester;
v1 = new com.google.common.testing.RelationshipTester;
v2 = staticinvoke <com.google.common.base.Equivalence: com.google.common.base.Equivalence equals()>();
v3 = v0.<com.google.common.testing.EqualsTester: com.google.common.testing.RelationshipTester$ItemReporter itemReporter>;
specialinvoke v1.<com.google.common.testing.RelationshipTester: void <init>(com.google.common.base.Equivalence,java.lang.String,java.lang.String,com.google.common.testing.RelationshipTester$ItemReporter)>(v2, "Object#equals", "Object#hashCode", v3);
v4 = v0.<com.google.common.testing.EqualsTester: java.util.List equalityGroups>;
v5 = interfaceinvoke v4.<java.util.List: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label2;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v1.<com.google.common.testing.RelationshipTester: com.google.common.testing.RelationshipTester addRelatedGroup(java.lang.Iterable)>(v7);
goto label1;
label2:
v8 = 0;
label3:
if v8 >= 3 goto label4;
specialinvoke v0.<com.google.common.testing.EqualsTester: void testItems()>();
virtualinvoke v1.<com.google.common.testing.RelationshipTester: void test()>();
v8 = v8 + 1;
goto label3;
label4:
return v0;
}
private void testItems()
{
java.lang.Iterable v2;
int v16, v17;
java.lang.String v13, v15, v19, v20, v6, v9;
boolean v11, v12, v14, v18, v21, v22, v4, v7, v8;
com.google.common.testing.EqualsTester$NotAnInstance v10;
java.util.Iterator v3;
com.google.common.testing.EqualsTester v0;
java.util.List v1;
java.lang.Object v5;
v0 := @this: com.google.common.testing.EqualsTester;
v1 = v0.<com.google.common.testing.EqualsTester: java.util.List equalityGroups>;
v2 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable concat(java.lang.Iterable)>(v1);
v3 = interfaceinvoke v2.<java.lang.Iterable: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label8;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 must not be Object#equals to null");
v7 = virtualinvoke v5.<java.lang.Object: boolean equals(java.lang.Object)>(null);
if v7 != 0 goto label2;
v8 = 1;
goto label3;
label2:
v8 = 0;
label3:
staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>(v6, v8);
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 must not be Object#equals to an arbitrary object of another class");
v10 = <com.google.common.testing.EqualsTester$NotAnInstance: com.google.common.testing.EqualsTester$NotAnInstance EQUAL_TO_NOTHING>;
v11 = virtualinvoke v5.<java.lang.Object: boolean equals(java.lang.Object)>(v10);
if v11 != 0 goto label4;
v12 = 1;
goto label5;
label4:
v12 = 0;
label5:
staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>(v9, v12);
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 must be Object#equals to itself");
v14 = virtualinvoke v5.<java.lang.Object: boolean equals(java.lang.Object)>(v5);
staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>(v13, v14);
v15 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("the Object#hashCode of \u0001 must be consistent");
v16 = virtualinvoke v5.<java.lang.Object: int hashCode()>();
v17 = virtualinvoke v5.<java.lang.Object: int hashCode()>();
staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>(v15, v16, v17);
v18 = v5 instanceof java.lang.String;
if v18 != 0 goto label1;
v19 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 must not be Object#equals to its Object#toString representation");
v20 = virtualinvoke v5.<java.lang.Object: java.lang.String toString()>();
v21 = virtualinvoke v5.<java.lang.Object: boolean equals(java.lang.Object)>(v20);
if v21 != 0 goto label6;
v22 = 1;
goto label7;
label6:
v22 = 0;
label7:
staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>(v19, v22);
goto label1;
label8:
return;
}
}