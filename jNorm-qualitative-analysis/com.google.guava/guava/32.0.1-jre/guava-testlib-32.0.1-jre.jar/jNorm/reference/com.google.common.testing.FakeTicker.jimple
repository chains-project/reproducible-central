public class com.google.common.testing.FakeTicker extends com.google.common.base.Ticker
{
private final java.util.concurrent.atomic.AtomicLong nanos;
private volatile long autoIncrementStepNanos;
public void <init>()
{
java.util.concurrent.atomic.AtomicLong v1;
com.google.common.testing.FakeTicker v0;
v0 := @this: com.google.common.testing.FakeTicker;
specialinvoke v0.<com.google.common.base.Ticker: void <init>()>();
v1 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v1.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<com.google.common.testing.FakeTicker: java.util.concurrent.atomic.AtomicLong nanos> = v1;
return;
}
public com.google.common.testing.FakeTicker advance(long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v2;
com.google.common.testing.FakeTicker v0, v4;
long v1, v3;
v0 := @this: com.google.common.testing.FakeTicker;
v1 := @parameter0: long;
v2 := @parameter1: java.util.concurrent.TimeUnit;
v3 = virtualinvoke v2.<java.util.concurrent.TimeUnit: long toNanos(long)>(v1);
v4 = virtualinvoke v0.<com.google.common.testing.FakeTicker: com.google.common.testing.FakeTicker advance(long)>(v3);
return v4;
}
public com.google.common.testing.FakeTicker advance(long)
{
java.util.concurrent.atomic.AtomicLong v2;
com.google.common.testing.FakeTicker v0;
long v1;
v0 := @this: com.google.common.testing.FakeTicker;
v1 := @parameter0: long;
v2 = v0.<com.google.common.testing.FakeTicker: java.util.concurrent.atomic.AtomicLong nanos>;
virtualinvoke v2.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(v1);
return v0;
}
public com.google.common.testing.FakeTicker advance(java.time.Duration)
{
com.google.common.testing.FakeTicker v0, v3;
java.time.Duration v1;
long v2;
v0 := @this: com.google.common.testing.FakeTicker;
v1 := @parameter0: java.time.Duration;
v2 = virtualinvoke v1.<java.time.Duration: long toNanos()>();
v3 = virtualinvoke v0.<com.google.common.testing.FakeTicker: com.google.common.testing.FakeTicker advance(long)>(v2);
return v3;
}
public com.google.common.testing.FakeTicker setAutoIncrementStep(long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v2;
com.google.common.testing.FakeTicker v0;
byte v3;
long v1, v5;
boolean v4;
v0 := @this: com.google.common.testing.FakeTicker;
v1 := @parameter0: long;
v2 := @parameter1: java.util.concurrent.TimeUnit;
v3 = v1 cmp 0L;
if v3 < 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>(v4, "May not auto-increment by a negative amount");
v5 = virtualinvoke v2.<java.util.concurrent.TimeUnit: long toNanos(long)>(v1);
v0.<com.google.common.testing.FakeTicker: long autoIncrementStepNanos> = v5;
return v0;
}
public com.google.common.testing.FakeTicker setAutoIncrementStep(java.time.Duration)
{
java.util.concurrent.TimeUnit v3;
com.google.common.testing.FakeTicker v0, v4;
java.time.Duration v1;
long v2;
v0 := @this: com.google.common.testing.FakeTicker;
v1 := @parameter0: java.time.Duration;
v2 = virtualinvoke v1.<java.time.Duration: long toNanos()>();
v3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
v4 = virtualinvoke v0.<com.google.common.testing.FakeTicker: com.google.common.testing.FakeTicker setAutoIncrementStep(long,java.util.concurrent.TimeUnit)>(v2, v3);
return v4;
}
public long read()
{
java.util.concurrent.atomic.AtomicLong v1;
com.google.common.testing.FakeTicker v0;
long v2, v3;
v0 := @this: com.google.common.testing.FakeTicker;
v1 = v0.<com.google.common.testing.FakeTicker: java.util.concurrent.atomic.AtomicLong nanos>;
v2 = v0.<com.google.common.testing.FakeTicker: long autoIncrementStepNanos>;
v3 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: long getAndAdd(long)>(v2);
return v3;
}
}