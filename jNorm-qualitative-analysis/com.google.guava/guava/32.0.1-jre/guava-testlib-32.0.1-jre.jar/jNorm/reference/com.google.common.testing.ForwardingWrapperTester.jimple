public final class com.google.common.testing.ForwardingWrapperTester extends java.lang.Object
{
private boolean testsEquals;
public void <init>()
{
com.google.common.testing.ForwardingWrapperTester v0;
v0 := @this: com.google.common.testing.ForwardingWrapperTester;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<com.google.common.testing.ForwardingWrapperTester: boolean testsEquals> = 0;
return;
}
public com.google.common.testing.ForwardingWrapperTester includingEquals()
{
com.google.common.testing.ForwardingWrapperTester v0;
v0 := @this: com.google.common.testing.ForwardingWrapperTester;
v0.<com.google.common.testing.ForwardingWrapperTester: boolean testsEquals> = 1;
return v0;
}
public void testForwarding(java.lang.Class, com.google.common.base.Function)
{
java.lang.reflect.Method[] v4;
int v13, v19, v23, v5, v6, v8;
java.lang.String v10, v16, v20;
java.lang.reflect.Method v7;
boolean v11, v17, v21, v24, v3, v9;
com.google.common.base.Function v2;
java.lang.Class[] v12, v14, v18, v22;
com.google.common.testing.ForwardingWrapperTester v0;
java.lang.Class v1, v15;
v0 := @this: com.google.common.testing.ForwardingWrapperTester;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: com.google.common.base.Function;
staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(v2);
v3 = virtualinvoke v1.<java.lang.Class: boolean isInterface()>();
staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)>(v3, "%s isn\'t an interface", v1);
v4 = staticinvoke <com.google.common.testing.ForwardingWrapperTester: java.lang.reflect.Method[] getMostConcreteMethods(java.lang.Class)>(v1);
staticinvoke <java.lang.reflect.AccessibleObject: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)>(v4, 1);
v5 = lengthof v4;
v6 = 0;
label1:
if v6 >= v5 goto label6;
v7 = v4[v6];
v8 = virtualinvoke v7.<java.lang.reflect.Method: int getModifiers()>();
v9 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>(v8);
if v9 == 0 goto label5;
v10 = virtualinvoke v7.<java.lang.reflect.Method: java.lang.String getName()>();
v11 = virtualinvoke v10.<java.lang.String: boolean equals(java.lang.Object)>("equals");
if v11 == 0 goto label2;
v12 = virtualinvoke v7.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
v13 = lengthof v12;
if v13 != 1 goto label2;
v14 = virtualinvoke v7.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
v15 = v14[0];
if v15 == class "Ljava/lang/Object;" goto label5;
label2:
v16 = virtualinvoke v7.<java.lang.reflect.Method: java.lang.String getName()>();
v17 = virtualinvoke v16.<java.lang.String: boolean equals(java.lang.Object)>("hashCode");
if v17 == 0 goto label3;
v18 = virtualinvoke v7.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
v19 = lengthof v18;
if v19 == 0 goto label5;
label3:
v20 = virtualinvoke v7.<java.lang.reflect.Method: java.lang.String getName()>();
v21 = virtualinvoke v20.<java.lang.String: boolean equals(java.lang.Object)>("toString");
if v21 == 0 goto label4;
v22 = virtualinvoke v7.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
v23 = lengthof v22;
if v23 == 0 goto label5;
label4:
staticinvoke <com.google.common.testing.ForwardingWrapperTester: void testSuccessfulForwarding(java.lang.Class,java.lang.reflect.Method,com.google.common.base.Function)>(v1, v7, v2);
staticinvoke <com.google.common.testing.ForwardingWrapperTester: void testExceptionPropagation(java.lang.Class,java.lang.reflect.Method,com.google.common.base.Function)>(v1, v7, v2);
label5:
v6 = v6 + 1;
goto label1;
label6:
v24 = v0.<com.google.common.testing.ForwardingWrapperTester: boolean testsEquals>;
if v24 == 0 goto label7;
staticinvoke <com.google.common.testing.ForwardingWrapperTester: void testEquals(java.lang.Class,com.google.common.base.Function)>(v1, v2);
label7:
staticinvoke <com.google.common.testing.ForwardingWrapperTester: void testToString(java.lang.Class,com.google.common.base.Function)>(v1, v2);
return;
}
private static java.lang.reflect.Method[] getMostConcreteMethods(java.lang.Class)
{
java.lang.Class[] v7;
java.lang.RuntimeException v10;
java.lang.Exception v9;
java.lang.reflect.Method[] v1;
int v2, v3;
java.lang.Class v0;
java.lang.String v5;
java.lang.reflect.Method v4, v6, v8;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();
v2 = 0;
label1:
v3 = lengthof v1;
if v2 >= v3 goto label6;
label2:
v4 = v1[v2];
v5 = virtualinvoke v4.<java.lang.reflect.Method: java.lang.String getName()>();
v6 = v1[v2];
v7 = virtualinvoke v6.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
v8 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(v5, v7);
v1[v2] = v8;
label3:
goto label5;
label4:
v9 := @caughtexception;
staticinvoke <com.google.common.base.Throwables: void throwIfUnchecked(java.lang.Throwable)>(v9);
v10 = new java.lang.RuntimeException;
specialinvoke v10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(v9);
throw v10;
label5:
v2 = v2 + 1;
goto label1;
label6:
return v1;
catch java.lang.Exception from label2 to label3 with label4;
}
private static void testSuccessfulForwarding(java.lang.Class, java.lang.reflect.Method, com.google.common.base.Function)
{
com.google.common.base.Function v2;
com.google.common.testing.ForwardingWrapperTester$InteractionTester v3;
java.lang.Class v0;
java.lang.reflect.Method v1;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.reflect.Method;
v2 := @parameter2: com.google.common.base.Function;
v3 = new com.google.common.testing.ForwardingWrapperTester$InteractionTester;
specialinvoke v3.<com.google.common.testing.ForwardingWrapperTester$InteractionTester: void <init>(java.lang.Class,java.lang.reflect.Method)>(v0, v1);
virtualinvoke v3.<com.google.common.testing.ForwardingWrapperTester$InteractionTester: void testInteraction(com.google.common.base.Function)>(v2);
return;
}
private static void testExceptionPropagation(java.lang.Class, java.lang.reflect.Method, com.google.common.base.Function)
{
java.lang.Throwable v10;
java.lang.IllegalAccessException v12;
com.google.common.base.Function v2;
java.lang.Object[] v7;
com.google.common.testing.ForwardingWrapperTester$1 v4;
java.lang.AssertionError v13;
java.lang.RuntimeException v11, v3;
java.lang.reflect.InvocationTargetException v9;
java.lang.Class v0;
java.lang.Object v5, v6;
java.lang.String v8;
java.lang.reflect.Method v1;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.reflect.Method;
v2 := @parameter2: com.google.common.base.Function;
v3 = new java.lang.RuntimeException;
specialinvoke v3.<java.lang.RuntimeException: void <init>()>();
v4 = new com.google.common.testing.ForwardingWrapperTester$1;
specialinvoke v4.<com.google.common.testing.ForwardingWrapperTester$1: void <init>(java.lang.RuntimeException)>(v3);
v5 = staticinvoke <com.google.common.reflect.Reflection: java.lang.Object newProxy(java.lang.Class,java.lang.reflect.InvocationHandler)>(v0, v4);
v6 = interfaceinvoke v2.<com.google.common.base.Function: java.lang.Object apply(java.lang.Object)>(v5);
label1:
v7 = staticinvoke <com.google.common.testing.ForwardingWrapperTester: java.lang.Object[] getParameterValues(java.lang.reflect.Method)>(v1);
virtualinvoke v1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v6, v7);
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.reflect.Method)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 failed to throw exception as is.");
staticinvoke <junit.framework.Assert: void fail(java.lang.String)>(v8);
label2:
goto label5;
label3:
v9 := @caughtexception;
v10 = virtualinvoke v9.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();
if v3 == v10 goto label5;
v11 = new java.lang.RuntimeException;
specialinvoke v11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(v9);
throw v11;
label4:
v12 := @caughtexception;
v13 = new java.lang.AssertionError;
specialinvoke v13.<java.lang.AssertionError: void <init>(java.lang.Object)>(v12);
throw v13;
label5:
return;
catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
catch java.lang.IllegalAccessException from label1 to label2 with label4;
}
private static void testEquals(java.lang.Class, com.google.common.base.Function)
{
com.google.common.base.Function v1;
java.lang.Object[] v5, v9;
com.google.common.testing.EqualsTester v12, v4, v8;
java.lang.Class v0;
java.lang.Object v10, v11, v3, v6, v7;
com.google.common.testing.FreshValueGenerator v2;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: com.google.common.base.Function;
v2 = new com.google.common.testing.FreshValueGenerator;
specialinvoke v2.<com.google.common.testing.FreshValueGenerator: void <init>()>();
v3 = virtualinvoke v2.<com.google.common.testing.FreshValueGenerator: java.lang.Object newFreshProxy(java.lang.Class)>(v0);
v4 = new com.google.common.testing.EqualsTester;
specialinvoke v4.<com.google.common.testing.EqualsTester: void <init>()>();
v5 = newarray (java.lang.Object)[2];
v6 = interfaceinvoke v1.<com.google.common.base.Function: java.lang.Object apply(java.lang.Object)>(v3);
v5[0] = v6;
v7 = interfaceinvoke v1.<com.google.common.base.Function: java.lang.Object apply(java.lang.Object)>(v3);
v5[1] = v7;
v8 = virtualinvoke v4.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester addEqualityGroup(java.lang.Object[])>(v5);
v9 = newarray (java.lang.Object)[1];
v10 = virtualinvoke v2.<com.google.common.testing.FreshValueGenerator: java.lang.Object newFreshProxy(java.lang.Class)>(v0);
v11 = interfaceinvoke v1.<com.google.common.base.Function: java.lang.Object apply(java.lang.Object)>(v10);
v9[0] = v11;
v12 = virtualinvoke v8.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester addEqualityGroup(java.lang.Object[])>(v9);
virtualinvoke v12.<com.google.common.testing.EqualsTester: com.google.common.testing.EqualsTester testEquals()>();
return;
}
private static void testToString(java.lang.Class, com.google.common.base.Function)
{
com.google.common.base.Function v1;
java.lang.Class v0;
java.lang.Object v3, v5;
java.lang.String v4, v6;
com.google.common.testing.FreshValueGenerator v2;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: com.google.common.base.Function;
v2 = new com.google.common.testing.FreshValueGenerator;
specialinvoke v2.<com.google.common.testing.FreshValueGenerator: void <init>()>();
v3 = virtualinvoke v2.<com.google.common.testing.FreshValueGenerator: java.lang.Object newFreshProxy(java.lang.Class)>(v0);
v4 = virtualinvoke v3.<java.lang.Object: java.lang.String toString()>();
v5 = interfaceinvoke v1.<com.google.common.base.Function: java.lang.Object apply(java.lang.Object)>(v3);
v6 = virtualinvoke v5.<java.lang.Object: java.lang.String toString()>();
staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("toString() isn\'t properly forwarded", v4, v6);
return;
}
private static java.lang.Object[] getParameterValues(java.lang.reflect.Method)
{
java.lang.Object[] v8;
java.lang.Class[] v3;
java.util.ArrayList v2;
int v4, v5;
java.lang.Class v6;
java.lang.Object v7;
com.google.common.testing.FreshValueGenerator v1;
java.lang.reflect.Method v0;
v0 := @parameter0: java.lang.reflect.Method;
v1 = new com.google.common.testing.FreshValueGenerator;
specialinvoke v1.<com.google.common.testing.FreshValueGenerator: void <init>()>();
v2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();
v3 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
v4 = lengthof v3;
v5 = 0;
label1:
if v5 >= v4 goto label2;
v6 = v3[v5];
v7 = virtualinvoke v1.<com.google.common.testing.FreshValueGenerator: java.lang.Object generateFresh(java.lang.Class)>(v6);
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v7);
v5 = v5 + 1;
goto label1;
label2:
v8 = interfaceinvoke v2.<java.util.List: java.lang.Object[] toArray()>();
return v8;
}
}