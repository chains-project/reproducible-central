public class com.google.common.util.concurrent.testing.MockFutureListener extends java.lang.Object implements java.lang.Runnable
{
private final java.util.concurrent.CountDownLatch countDownLatch;
private final com.google.common.util.concurrent.ListenableFuture future;
public void <init>(com.google.common.util.concurrent.ListenableFuture)
{
java.util.concurrent.CountDownLatch v2;
com.google.common.util.concurrent.ListenableFuture v1;
java.util.concurrent.Executor v3;
com.google.common.util.concurrent.testing.MockFutureListener v0;
v0 := @this: com.google.common.util.concurrent.testing.MockFutureListener;
v1 := @parameter0: com.google.common.util.concurrent.ListenableFuture;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.concurrent.CountDownLatch;
specialinvoke v2.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);
v0.<com.google.common.util.concurrent.testing.MockFutureListener: java.util.concurrent.CountDownLatch countDownLatch> = v2;
v0.<com.google.common.util.concurrent.testing.MockFutureListener: com.google.common.util.concurrent.ListenableFuture future> = v1;
v3 = staticinvoke <com.google.common.util.concurrent.MoreExecutors: java.util.concurrent.Executor directExecutor()>();
interfaceinvoke v1.<com.google.common.util.concurrent.ListenableFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)>(v0, v3);
return;
}
public void run()
{
java.util.concurrent.CountDownLatch v1;
com.google.common.util.concurrent.testing.MockFutureListener v0;
v0 := @this: com.google.common.util.concurrent.testing.MockFutureListener;
v1 = v0.<com.google.common.util.concurrent.testing.MockFutureListener: java.util.concurrent.CountDownLatch countDownLatch>;
virtualinvoke v1.<java.util.concurrent.CountDownLatch: void countDown()>();
return;
}
public void assertSuccess(java.lang.Object) throws java.lang.Throwable
{
java.lang.Throwable v8;
com.google.common.util.concurrent.ListenableFuture v5;
com.google.common.util.concurrent.testing.MockFutureListener v0;
java.util.concurrent.ExecutionException v7;
java.util.concurrent.TimeUnit v3;
java.util.concurrent.CountDownLatch v2;
java.lang.Object v1, v6;
boolean v4;
v0 := @this: com.google.common.util.concurrent.testing.MockFutureListener;
v1 := @parameter0: java.lang.Object;
v2 = v0.<com.google.common.util.concurrent.testing.MockFutureListener: java.util.concurrent.CountDownLatch countDownLatch>;
v3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
v4 = virtualinvoke v2.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(1L, v3);
staticinvoke <junit.framework.Assert: void assertTrue(boolean)>(v4);
label1:
v5 = v0.<com.google.common.util.concurrent.testing.MockFutureListener: com.google.common.util.concurrent.ListenableFuture future>;
v6 = interfaceinvoke v5.<com.google.common.util.concurrent.ListenableFuture: java.lang.Object get()>();
staticinvoke <junit.framework.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(v1, v6);
label2:
goto label4;
label3:
v7 := @caughtexception;
v8 = virtualinvoke v7.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();
throw v8;
label4:
return;
catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
}
public void assertException(java.lang.Throwable) throws java.lang.Exception
{
java.lang.Throwable v1, v7;
com.google.common.util.concurrent.ListenableFuture v5;
com.google.common.util.concurrent.testing.MockFutureListener v0;
java.util.concurrent.ExecutionException v6;
java.util.concurrent.TimeUnit v3;
java.util.concurrent.CountDownLatch v2;
boolean v4;
v0 := @this: com.google.common.util.concurrent.testing.MockFutureListener;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<com.google.common.util.concurrent.testing.MockFutureListener: java.util.concurrent.CountDownLatch countDownLatch>;
v3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
v4 = virtualinvoke v2.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(1L, v3);
staticinvoke <junit.framework.Assert: void assertTrue(boolean)>(v4);
label1:
v5 = v0.<com.google.common.util.concurrent.testing.MockFutureListener: com.google.common.util.concurrent.ListenableFuture future>;
interfaceinvoke v5.<com.google.common.util.concurrent.ListenableFuture: java.lang.Object get()>();
staticinvoke <junit.framework.Assert: void fail(java.lang.String)>("This call was supposed to throw an ExecutionException");
label2:
goto label4;
label3:
v6 := @caughtexception;
v7 = virtualinvoke v6.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();
staticinvoke <junit.framework.Assert: void assertSame(java.lang.Object,java.lang.Object)>(v1, v7);
label4:
return;
catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
}
public void assertTimeout() throws java.lang.Exception
{
java.util.concurrent.TimeUnit v2;
java.util.concurrent.CountDownLatch v1;
com.google.common.util.concurrent.testing.MockFutureListener v0;
boolean v3;
v0 := @this: com.google.common.util.concurrent.testing.MockFutureListener;
v1 = v0.<com.google.common.util.concurrent.testing.MockFutureListener: java.util.concurrent.CountDownLatch countDownLatch>;
v2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
v3 = virtualinvoke v1.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(1L, v2);
staticinvoke <junit.framework.Assert: void assertFalse(boolean)>(v3);
return;
}
}