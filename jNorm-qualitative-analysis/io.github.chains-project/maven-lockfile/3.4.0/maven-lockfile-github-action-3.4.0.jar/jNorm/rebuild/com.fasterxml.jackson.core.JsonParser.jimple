public abstract class com.fasterxml.jackson.core.JsonParser extends java.lang.Object implements java.io.Closeable, com.fasterxml.jackson.core.Versioned
{
private static final int MIN_BYTE_I;
private static final int MAX_BYTE_I;
private static final int MIN_SHORT_I;
private static final int MAX_SHORT_I;
protected static final com.fasterxml.jackson.core.util.JacksonFeatureSet DEFAULT_READ_CAPABILITIES;
protected int _features;
protected transient com.fasterxml.jackson.core.util.RequestPayload _requestPayload;
protected void <init>()
{
int v1;
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = <com.fasterxml.jackson.core.JsonFactory: int DEFAULT_PARSER_FEATURE_FLAGS>;
v0.<com.fasterxml.jackson.core.JsonParser: int _features> = v1;
return;
}
protected void <init>(int)
{
int v1;
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<com.fasterxml.jackson.core.JsonParser: int _features> = v1;
return;
}
public abstract com.fasterxml.jackson.core.ObjectCodec getCodec();
public abstract void setCodec(com.fasterxml.jackson.core.ObjectCodec);
public java.lang.Object getInputSource()
{
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
return null;
}
public void setRequestPayloadOnError(com.fasterxml.jackson.core.util.RequestPayload)
{
com.fasterxml.jackson.core.JsonParser v0;
com.fasterxml.jackson.core.util.RequestPayload v1;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.util.RequestPayload;
v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.util.RequestPayload _requestPayload> = v1;
return;
}
public void setRequestPayloadOnError(byte[], java.lang.String)
{
byte[] v1;
com.fasterxml.jackson.core.JsonParser v0;
com.fasterxml.jackson.core.util.RequestPayload v3;
java.lang.String v2;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: byte[];
v2 := @parameter1: java.lang.String;
if v1 != null goto label1;
v3 = null;
goto label2;
label1:
v3 = new com.fasterxml.jackson.core.util.RequestPayload;
specialinvoke v3.<com.fasterxml.jackson.core.util.RequestPayload: void <init>(byte[],java.lang.String)>(v1, v2);
label2:
v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.util.RequestPayload _requestPayload> = v3;
return;
}
public void setRequestPayloadOnError(java.lang.String)
{
java.lang.String v1;
com.fasterxml.jackson.core.JsonParser v0;
com.fasterxml.jackson.core.util.RequestPayload v2;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: java.lang.String;
if v1 != null goto label1;
v2 = null;
goto label2;
label1:
v2 = new com.fasterxml.jackson.core.util.RequestPayload;
specialinvoke v2.<com.fasterxml.jackson.core.util.RequestPayload: void <init>(java.lang.CharSequence)>(v1);
label2:
v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.util.RequestPayload _requestPayload> = v2;
return;
}
public com.fasterxml.jackson.core.StreamReadConstraints streamReadConstraints()
{
com.fasterxml.jackson.core.StreamReadConstraints v1;
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 = staticinvoke <com.fasterxml.jackson.core.StreamReadConstraints: com.fasterxml.jackson.core.StreamReadConstraints defaults()>();
return v1;
}
public void setSchema(com.fasterxml.jackson.core.FormatSchema)
{
java.lang.UnsupportedOperationException v2;
com.fasterxml.jackson.core.JsonParser v0;
com.fasterxml.jackson.core.FormatSchema v1;
java.lang.Class v3;
java.lang.String v4, v5, v6;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.FormatSchema;
v2 = new java.lang.UnsupportedOperationException;
v3 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v4 = virtualinvoke v3.<java.lang.Class: java.lang.String getName()>();
v5 = interfaceinvoke v1.<com.fasterxml.jackson.core.FormatSchema: java.lang.String getSchemaType()>();
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v4, v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Parser of type \u0001 does not support schema of type \'\u0001\'");
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(v6);
throw v2;
}
public com.fasterxml.jackson.core.FormatSchema getSchema()
{
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
return null;
}
public boolean canUseSchema(com.fasterxml.jackson.core.FormatSchema)
{
com.fasterxml.jackson.core.FormatSchema v1;
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.FormatSchema;
return 0;
}
public boolean requiresCustomCodec()
{
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
return 0;
}
public boolean canParseAsync()
{
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
return 0;
}
public com.fasterxml.jackson.core.async.NonBlockingInputFeeder getNonBlockingInputFeeder()
{
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
return null;
}
public com.fasterxml.jackson.core.util.JacksonFeatureSet getReadCapabilities()
{
com.fasterxml.jackson.core.JsonParser v0;
com.fasterxml.jackson.core.util.JacksonFeatureSet v1;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 = <com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.util.JacksonFeatureSet DEFAULT_READ_CAPABILITIES>;
return v1;
}
public abstract com.fasterxml.jackson.core.Version version();
public abstract void close() throws java.io.IOException;
public abstract boolean isClosed();
public abstract com.fasterxml.jackson.core.JsonStreamContext getParsingContext();
public com.fasterxml.jackson.core.JsonLocation currentLocation()
{
com.fasterxml.jackson.core.JsonLocation v1;
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonLocation getCurrentLocation()>();
return v1;
}
public com.fasterxml.jackson.core.JsonLocation currentTokenLocation()
{
com.fasterxml.jackson.core.JsonLocation v1;
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonLocation getTokenLocation()>();
return v1;
}
public abstract com.fasterxml.jackson.core.JsonLocation getCurrentLocation();
public abstract com.fasterxml.jackson.core.JsonLocation getTokenLocation();
public java.lang.Object currentValue()
{
java.lang.Object v1;
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: java.lang.Object getCurrentValue()>();
return v1;
}
public void assignCurrentValue(java.lang.Object)
{
java.lang.Object v1;
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: java.lang.Object;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: void setCurrentValue(java.lang.Object)>(v1);
return;
}
public java.lang.Object getCurrentValue()
{
com.fasterxml.jackson.core.JsonStreamContext v1;
java.lang.Object v2;
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonStreamContext getParsingContext()>();
if v1 != null goto label1;
v2 = null;
goto label2;
label1:
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonStreamContext: java.lang.Object getCurrentValue()>();
label2:
return v2;
}
public void setCurrentValue(java.lang.Object)
{
com.fasterxml.jackson.core.JsonStreamContext v2;
java.lang.Object v1;
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonStreamContext getParsingContext()>();
if v2 == null goto label1;
virtualinvoke v2.<com.fasterxml.jackson.core.JsonStreamContext: void setCurrentValue(java.lang.Object)>(v1);
label1:
return;
}
public int releaseBuffered(java.io.OutputStream) throws java.io.IOException
{
int v2;
java.io.OutputStream v1;
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: java.io.OutputStream;
v2 = (int) -1;
return v2;
}
public int releaseBuffered(java.io.Writer) throws java.io.IOException
{
int v2;
java.io.Writer v1;
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: java.io.Writer;
v2 = (int) -1;
return v2;
}
public com.fasterxml.jackson.core.JsonParser enable(com.fasterxml.jackson.core.JsonParser$Feature)
{
com.fasterxml.jackson.core.JsonParser$Feature v1;
com.fasterxml.jackson.core.JsonParser v0;
int v2, v3, v4;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.JsonParser$Feature;
v2 = v0.<com.fasterxml.jackson.core.JsonParser: int _features>;
v3 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();
v4 = v2 | v3;
v0.<com.fasterxml.jackson.core.JsonParser: int _features> = v4;
return v0;
}
public com.fasterxml.jackson.core.JsonParser disable(com.fasterxml.jackson.core.JsonParser$Feature)
{
com.fasterxml.jackson.core.JsonParser$Feature v1;
com.fasterxml.jackson.core.JsonParser v0;
int v2, v3, v4, v5, v6;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.JsonParser$Feature;
v2 = v0.<com.fasterxml.jackson.core.JsonParser: int _features>;
v3 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();
v4 = (int) -1;
v5 = v3 ^ v4;
v6 = v2 & v5;
v0.<com.fasterxml.jackson.core.JsonParser: int _features> = v6;
return v0;
}
public com.fasterxml.jackson.core.JsonParser configure(com.fasterxml.jackson.core.JsonParser$Feature, boolean)
{
com.fasterxml.jackson.core.JsonParser$Feature v1;
com.fasterxml.jackson.core.JsonParser v0;
boolean v2;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.JsonParser$Feature;
v2 := @parameter1: boolean;
if v2 == 0 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonParser enable(com.fasterxml.jackson.core.JsonParser$Feature)>(v1);
goto label2;
label1:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonParser disable(com.fasterxml.jackson.core.JsonParser$Feature)>(v1);
label2:
return v0;
}
public boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)
{
com.fasterxml.jackson.core.JsonParser$Feature v1;
com.fasterxml.jackson.core.JsonParser v0;
int v2;
boolean v3;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.JsonParser$Feature;
v2 = v0.<com.fasterxml.jackson.core.JsonParser: int _features>;
v3 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonParser$Feature: boolean enabledIn(int)>(v2);
return v3;
}
public boolean isEnabled(com.fasterxml.jackson.core.StreamReadFeature)
{
com.fasterxml.jackson.core.JsonParser$Feature v2;
com.fasterxml.jackson.core.JsonParser v0;
int v3;
com.fasterxml.jackson.core.StreamReadFeature v1;
boolean v4;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.StreamReadFeature;
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.StreamReadFeature: com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();
v3 = v0.<com.fasterxml.jackson.core.JsonParser: int _features>;
v4 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonParser$Feature: boolean enabledIn(int)>(v3);
return v4;
}
public int getFeatureMask()
{
int v1;
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 = v0.<com.fasterxml.jackson.core.JsonParser: int _features>;
return v1;
}
public com.fasterxml.jackson.core.JsonParser setFeatureMask(int)
{
int v1;
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: int;
v0.<com.fasterxml.jackson.core.JsonParser: int _features> = v1;
return v0;
}
public com.fasterxml.jackson.core.JsonParser overrideStdFeatures(int, int)
{
com.fasterxml.jackson.core.JsonParser v0, v9;
int v1, v2, v3, v4, v5, v6, v7, v8;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v0.<com.fasterxml.jackson.core.JsonParser: int _features>;
v4 = (int) -1;
v5 = v2 ^ v4;
v6 = v3 & v5;
v7 = v1 & v2;
v8 = v6 | v7;
v9 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonParser setFeatureMask(int)>(v8);
return v9;
}
public int getFormatFeatures()
{
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
return 0;
}
public com.fasterxml.jackson.core.JsonParser overrideFormatFeatures(int, int)
{
int v1, v2;
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: int;
v2 := @parameter1: int;
return v0;
}
public abstract com.fasterxml.jackson.core.JsonToken nextToken() throws java.io.IOException;
public abstract com.fasterxml.jackson.core.JsonToken nextValue() throws java.io.IOException;
public boolean nextFieldName(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser v0;
com.fasterxml.jackson.core.SerializableString v1;
com.fasterxml.jackson.core.JsonToken v2, v3;
java.lang.String v4, v5;
boolean v6, v7;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.SerializableString;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>();
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v2 != v3 goto label1;
v4 = interfaceinvoke v1.<com.fasterxml.jackson.core.SerializableString: java.lang.String getValue()>();
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: java.lang.String getCurrentName()>();
v6 = virtualinvoke v4.<java.lang.String: boolean equals(java.lang.Object)>(v5);
if v6 == 0 goto label1;
v7 = 1;
goto label2;
label1:
v7 = 0;
label2:
return v7;
}
public java.lang.String nextFieldName() throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser v0;
com.fasterxml.jackson.core.JsonToken v1, v2;
java.lang.String v3;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>();
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v1 != v2 goto label1;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: java.lang.String getCurrentName()>();
goto label2;
label1:
v3 = null;
label2:
return v3;
}
public java.lang.String nextTextValue() throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser v0;
com.fasterxml.jackson.core.JsonToken v1, v2;
java.lang.String v3;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>();
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v1 != v2 goto label1;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: java.lang.String getText()>();
goto label2;
label1:
v3 = null;
label2:
return v3;
}
public int nextIntValue(int) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser v0;
int v1, v4;
com.fasterxml.jackson.core.JsonToken v2, v3;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>();
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
if v2 != v3 goto label1;
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: int getIntValue()>();
goto label2;
label1:
v4 = v1;
label2:
return v4;
}
public long nextLongValue(long) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser v0;
long v1, v4;
com.fasterxml.jackson.core.JsonToken v2, v3;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: long;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>();
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
if v2 != v3 goto label1;
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: long getLongValue()>();
goto label2;
label1:
v4 = v1;
label2:
return v4;
}
public java.lang.Boolean nextBooleanValue() throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser v0;
java.lang.Boolean v3, v5;
com.fasterxml.jackson.core.JsonToken v1, v2, v4;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>();
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;
if v1 != v2 goto label1;
v3 = <java.lang.Boolean: java.lang.Boolean TRUE>;
return v3;
label1:
v4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;
if v1 != v4 goto label2;
v5 = <java.lang.Boolean: java.lang.Boolean FALSE>;
return v5;
label2:
return null;
}
public abstract com.fasterxml.jackson.core.JsonParser skipChildren() throws java.io.IOException;
public void finishToken() throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
return;
}
public com.fasterxml.jackson.core.JsonToken currentToken()
{
com.fasterxml.jackson.core.JsonToken v1;
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken getCurrentToken()>();
return v1;
}
public int currentTokenId()
{
int v1;
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: int getCurrentTokenId()>();
return v1;
}
public abstract com.fasterxml.jackson.core.JsonToken getCurrentToken();
public abstract int getCurrentTokenId();
public abstract boolean hasCurrentToken();
public abstract boolean hasTokenId(int);
public abstract boolean hasToken(com.fasterxml.jackson.core.JsonToken);
public boolean isExpectedStartArrayToken()
{
com.fasterxml.jackson.core.JsonParser v0;
com.fasterxml.jackson.core.JsonToken v1, v2;
boolean v3;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken currentToken()>();
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isExpectedStartObjectToken()
{
com.fasterxml.jackson.core.JsonParser v0;
com.fasterxml.jackson.core.JsonToken v1, v2;
boolean v3;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken currentToken()>();
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isExpectedNumberIntToken()
{
com.fasterxml.jackson.core.JsonParser v0;
com.fasterxml.jackson.core.JsonToken v1, v2;
boolean v3;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken currentToken()>();
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isNaN() throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
return 0;
}
public abstract void clearCurrentToken();
public abstract com.fasterxml.jackson.core.JsonToken getLastClearedToken();
public abstract void overrideCurrentName(java.lang.String);
public abstract java.lang.String getCurrentName() throws java.io.IOException;
public java.lang.String currentName() throws java.io.IOException
{
java.lang.String v1;
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: java.lang.String getCurrentName()>();
return v1;
}
public abstract java.lang.String getText() throws java.io.IOException;
public int getText(java.io.Writer) throws java.io.IOException, java.lang.UnsupportedOperationException
{
com.fasterxml.jackson.core.JsonParser v0;
int v3;
java.io.Writer v1;
java.lang.String v2;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: java.io.Writer;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: java.lang.String getText()>();
if v2 != null goto label1;
return 0;
label1:
virtualinvoke v1.<java.io.Writer: void write(java.lang.String)>(v2);
v3 = virtualinvoke v2.<java.lang.String: int length()>();
return v3;
}
public abstract char[] getTextCharacters() throws java.io.IOException;
public abstract int getTextLength() throws java.io.IOException;
public abstract int getTextOffset() throws java.io.IOException;
public abstract boolean hasTextCharacters();
public abstract java.lang.Number getNumberValue() throws java.io.IOException;
public java.lang.Number getNumberValueExact() throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser v0;
java.lang.Number v1;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: java.lang.Number getNumberValue()>();
return v1;
}
public java.lang.Object getNumberValueDeferred() throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser v0;
java.lang.Number v1;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: java.lang.Number getNumberValue()>();
return v1;
}
public abstract com.fasterxml.jackson.core.JsonParser$NumberType getNumberType() throws java.io.IOException;
public byte getByteValue() throws java.io.IOException
{
java.lang.Object[] v4;
com.fasterxml.jackson.core.JsonParser v0;
com.fasterxml.jackson.core.exc.InputCoercionException v3;
int v1, v2;
java.lang.Class v8;
com.fasterxml.jackson.core.JsonToken v7;
java.lang.String v5, v6;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: int getIntValue()>();
v2 = (int) -128;
if v1 < v2 goto label1;
if v1 <= 255 goto label2;
label1:
v3 = new com.fasterxml.jackson.core.exc.InputCoercionException;
v4 = newarray (java.lang.Object)[1];
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: java.lang.String getText()>();
v4[0] = v5;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Numeric value (%s) out of range of Java byte", v4);
v7 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
v8 = <java.lang.Byte: java.lang.Class TYPE>;
specialinvoke v3.<com.fasterxml.jackson.core.exc.InputCoercionException: void <init>(com.fasterxml.jackson.core.JsonParser,java.lang.String,com.fasterxml.jackson.core.JsonToken,java.lang.Class)>(v0, v6, v7, v8);
throw v3;
label2:
return v1;
}
public short getShortValue() throws java.io.IOException
{
java.lang.Object[] v4;
com.fasterxml.jackson.core.JsonParser v0;
com.fasterxml.jackson.core.exc.InputCoercionException v3;
int v1, v2;
java.lang.Class v8;
com.fasterxml.jackson.core.JsonToken v7;
java.lang.String v5, v6;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: int getIntValue()>();
v2 = (int) -32768;
if v1 < v2 goto label1;
if v1 <= 32767 goto label2;
label1:
v3 = new com.fasterxml.jackson.core.exc.InputCoercionException;
v4 = newarray (java.lang.Object)[1];
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: java.lang.String getText()>();
v4[0] = v5;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Numeric value (%s) out of range of Java short", v4);
v7 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
v8 = <java.lang.Short: java.lang.Class TYPE>;
specialinvoke v3.<com.fasterxml.jackson.core.exc.InputCoercionException: void <init>(com.fasterxml.jackson.core.JsonParser,java.lang.String,com.fasterxml.jackson.core.JsonToken,java.lang.Class)>(v0, v6, v7, v8);
throw v3;
label2:
return v1;
}
public abstract int getIntValue() throws java.io.IOException;
public abstract long getLongValue() throws java.io.IOException;
public abstract java.math.BigInteger getBigIntegerValue() throws java.io.IOException;
public abstract float getFloatValue() throws java.io.IOException;
public abstract double getDoubleValue() throws java.io.IOException;
public abstract java.math.BigDecimal getDecimalValue() throws java.io.IOException;
public boolean getBooleanValue() throws java.io.IOException
{
java.lang.Object[] v5;
com.fasterxml.jackson.core.JsonParser v0;
com.fasterxml.jackson.core.util.RequestPayload v7;
com.fasterxml.jackson.core.JsonToken v1, v2, v3;
java.lang.String v6;
com.fasterxml.jackson.core.JsonParseException v4, v8;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken currentToken()>();
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;
if v1 != v2 goto label1;
return 1;
label1:
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;
if v1 != v3 goto label2;
return 0;
label2:
v4 = new com.fasterxml.jackson.core.JsonParseException;
v5 = newarray (java.lang.Object)[1];
v5[0] = v1;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Current token (%s) not of boolean type", v5);
specialinvoke v4.<com.fasterxml.jackson.core.JsonParseException: void <init>(com.fasterxml.jackson.core.JsonParser,java.lang.String)>(v0, v6);
v7 = v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.util.RequestPayload _requestPayload>;
v8 = virtualinvoke v4.<com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException withRequestPayload(com.fasterxml.jackson.core.util.RequestPayload)>(v7);
throw v8;
}
public java.lang.Object getEmbeddedObject() throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
return null;
}
public abstract byte[] getBinaryValue(com.fasterxml.jackson.core.Base64Variant) throws java.io.IOException;
public byte[] getBinaryValue() throws java.io.IOException
{
com.fasterxml.jackson.core.Base64Variant v1;
byte[] v2;
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 = staticinvoke <com.fasterxml.jackson.core.Base64Variants: com.fasterxml.jackson.core.Base64Variant getDefaultVariant()>();
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: byte[] getBinaryValue(com.fasterxml.jackson.core.Base64Variant)>(v1);
return v2;
}
public int readBinaryValue(java.io.OutputStream) throws java.io.IOException
{
com.fasterxml.jackson.core.Base64Variant v2;
java.io.OutputStream v1;
com.fasterxml.jackson.core.JsonParser v0;
int v3;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: java.io.OutputStream;
v2 = staticinvoke <com.fasterxml.jackson.core.Base64Variants: com.fasterxml.jackson.core.Base64Variant getDefaultVariant()>();
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: int readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)>(v2, v1);
return v3;
}
public int readBinaryValue(com.fasterxml.jackson.core.Base64Variant, java.io.OutputStream) throws java.io.IOException
{
com.fasterxml.jackson.core.Base64Variant v1;
java.io.OutputStream v2;
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.Base64Variant;
v2 := @parameter1: java.io.OutputStream;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: void _reportUnsupportedOperation()>();
return 0;
}
public int getValueAsInt() throws java.io.IOException
{
int v1;
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: int getValueAsInt(int)>(0);
return v1;
}
public int getValueAsInt(int) throws java.io.IOException
{
int v1;
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: int;
return v1;
}
public long getValueAsLong() throws java.io.IOException
{
long v1;
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: long getValueAsLong(long)>(0L);
return v1;
}
public long getValueAsLong(long) throws java.io.IOException
{
long v1;
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: long;
return v1;
}
public double getValueAsDouble() throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser v0;
double v1;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: double getValueAsDouble(double)>(0.0);
return v1;
}
public double getValueAsDouble(double) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser v0;
double v1;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: double;
return v1;
}
public boolean getValueAsBoolean() throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser v0;
boolean v1;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: boolean getValueAsBoolean(boolean)>(0);
return v1;
}
public boolean getValueAsBoolean(boolean) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser v0;
boolean v1;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: boolean;
return v1;
}
public java.lang.String getValueAsString() throws java.io.IOException
{
java.lang.String v1;
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: java.lang.String getValueAsString(java.lang.String)>(null);
return v1;
}
public abstract java.lang.String getValueAsString(java.lang.String) throws java.io.IOException;
public boolean canReadObjectId()
{
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
return 0;
}
public boolean canReadTypeId()
{
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
return 0;
}
public java.lang.Object getObjectId() throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
return null;
}
public java.lang.Object getTypeId() throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
return null;
}
public java.lang.Object readValueAs(java.lang.Class) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser v0;
com.fasterxml.jackson.core.ObjectCodec v2;
java.lang.Class v1;
java.lang.Object v3;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: java.lang.Class;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.ObjectCodec _codec()>();
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.ObjectCodec: java.lang.Object readValue(com.fasterxml.jackson.core.JsonParser,java.lang.Class)>(v0, v1);
return v3;
}
public java.lang.Object readValueAs(com.fasterxml.jackson.core.type.TypeReference) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser v0;
com.fasterxml.jackson.core.ObjectCodec v2;
java.lang.Object v3;
com.fasterxml.jackson.core.type.TypeReference v1;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.type.TypeReference;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.ObjectCodec _codec()>();
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.ObjectCodec: java.lang.Object readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.TypeReference)>(v0, v1);
return v3;
}
public java.util.Iterator readValuesAs(java.lang.Class) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser v0;
java.util.Iterator v3;
com.fasterxml.jackson.core.ObjectCodec v2;
java.lang.Class v1;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: java.lang.Class;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.ObjectCodec _codec()>();
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.ObjectCodec: java.util.Iterator readValues(com.fasterxml.jackson.core.JsonParser,java.lang.Class)>(v0, v1);
return v3;
}
public java.util.Iterator readValuesAs(com.fasterxml.jackson.core.type.TypeReference) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser v0;
java.util.Iterator v3;
com.fasterxml.jackson.core.ObjectCodec v2;
com.fasterxml.jackson.core.type.TypeReference v1;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.type.TypeReference;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.ObjectCodec _codec()>();
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.ObjectCodec: java.util.Iterator readValues(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.TypeReference)>(v0, v1);
return v3;
}
public com.fasterxml.jackson.core.TreeNode readValueAsTree() throws java.io.IOException
{
com.fasterxml.jackson.core.TreeNode v2;
com.fasterxml.jackson.core.ObjectCodec v1;
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.ObjectCodec _codec()>();
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.ObjectCodec: com.fasterxml.jackson.core.TreeNode readTree(com.fasterxml.jackson.core.JsonParser)>(v0);
return v2;
}
protected com.fasterxml.jackson.core.ObjectCodec _codec()
{
java.lang.IllegalStateException v2;
com.fasterxml.jackson.core.ObjectCodec v1;
com.fasterxml.jackson.core.JsonParser v0;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.ObjectCodec getCodec()>();
if v1 != null goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No ObjectCodec defined for parser, needed for deserialization");
throw v2;
label1:
return v1;
}
protected com.fasterxml.jackson.core.JsonParseException _constructError(java.lang.String)
{
com.fasterxml.jackson.core.JsonParser v0;
com.fasterxml.jackson.core.util.RequestPayload v3;
java.lang.String v1;
com.fasterxml.jackson.core.JsonParseException v2, v4;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: java.lang.String;
v2 = new com.fasterxml.jackson.core.JsonParseException;
specialinvoke v2.<com.fasterxml.jackson.core.JsonParseException: void <init>(com.fasterxml.jackson.core.JsonParser,java.lang.String)>(v0, v1);
v3 = v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.util.RequestPayload _requestPayload>;
v4 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException withRequestPayload(com.fasterxml.jackson.core.util.RequestPayload)>(v3);
return v4;
}
protected void _reportUnsupportedOperation()
{
java.lang.UnsupportedOperationException v1;
com.fasterxml.jackson.core.JsonParser v0;
java.lang.Class v2;
java.lang.String v3, v4;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 = new java.lang.UnsupportedOperationException;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v2.<java.lang.Class: java.lang.String getName()>();
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Operation not supported by parser of type \u0001");
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(v4);
throw v1;
}
protected com.fasterxml.jackson.core.JsonParseException _constructReadException(java.lang.String)
{
java.lang.String v1;
com.fasterxml.jackson.core.JsonParser v0;
com.fasterxml.jackson.core.JsonParseException v2;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonParseException _constructError(java.lang.String)>(v1);
return v2;
}
protected com.fasterxml.jackson.core.JsonParseException _constructReadException(java.lang.String, java.lang.Object)
{
java.lang.Object[] v3;
com.fasterxml.jackson.core.JsonParser v0;
java.lang.Object v2;
java.lang.String v1, v4;
com.fasterxml.jackson.core.JsonParseException v5;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object;
v3 = newarray (java.lang.Object)[1];
v3[0] = v2;
v4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v1, v3);
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonParseException _constructReadException(java.lang.String)>(v4);
return v5;
}
protected com.fasterxml.jackson.core.JsonParseException _constructReadException(java.lang.String, java.lang.Object, java.lang.Object)
{
java.lang.Object[] v4;
com.fasterxml.jackson.core.JsonParser v0;
java.lang.Object v2, v3;
java.lang.String v1, v5;
com.fasterxml.jackson.core.JsonParseException v6;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.lang.Object;
v4 = newarray (java.lang.Object)[2];
v4[0] = v2;
v4[1] = v3;
v5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v1, v4);
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonParseException _constructReadException(java.lang.String)>(v5);
return v6;
}
protected com.fasterxml.jackson.core.JsonParseException _constructReadException(java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object)
{
java.lang.Object[] v5;
com.fasterxml.jackson.core.JsonParser v0;
java.lang.Object v2, v3, v4;
java.lang.String v1, v6;
com.fasterxml.jackson.core.JsonParseException v7;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.lang.Object;
v4 := @parameter3: java.lang.Object;
v5 = newarray (java.lang.Object)[3];
v5[0] = v2;
v5[1] = v3;
v5[2] = v4;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v1, v5);
v7 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonParseException _constructReadException(java.lang.String)>(v6);
return v7;
}
protected com.fasterxml.jackson.core.JsonParseException _constructReadException(java.lang.String, java.lang.Throwable)
{
java.lang.Throwable v2;
com.fasterxml.jackson.core.JsonParser v0;
com.fasterxml.jackson.core.util.RequestPayload v5, v6;
java.lang.String v1;
com.fasterxml.jackson.core.JsonParseException v3, v4;
v0 := @this: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Throwable;
v3 = new com.fasterxml.jackson.core.JsonParseException;
specialinvoke v3.<com.fasterxml.jackson.core.JsonParseException: void <init>(com.fasterxml.jackson.core.JsonParser,java.lang.String,java.lang.Throwable)>(v0, v1, v2);
v4 = v3;
v5 = v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.util.RequestPayload _requestPayload>;
if v5 == null goto label1;
v6 = v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.util.RequestPayload _requestPayload>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.JsonParseException: com.fasterxml.jackson.core.JsonParseException withRequestPayload(com.fasterxml.jackson.core.util.RequestPayload)>(v6);
label1:
return v4;
}
static void <clinit>()
{
com.fasterxml.jackson.core.StreamReadCapability[] v0;
com.fasterxml.jackson.core.util.JacksonFeatureSet v1;
v0 = staticinvoke <com.fasterxml.jackson.core.StreamReadCapability: com.fasterxml.jackson.core.StreamReadCapability[] values()>();
v1 = staticinvoke <com.fasterxml.jackson.core.util.JacksonFeatureSet: com.fasterxml.jackson.core.util.JacksonFeatureSet fromDefaults(com.fasterxml.jackson.core.util.JacksonFeature[])>(v0);
<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.util.JacksonFeatureSet DEFAULT_READ_CAPABILITIES> = v1;
return;
}
}