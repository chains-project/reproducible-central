public class com.fasterxml.jackson.core.format.InputAccessor$Std extends java.lang.Object implements com.fasterxml.jackson.core.format.InputAccessor
{
protected final java.io.InputStream _in;
protected final byte[] _buffer;
protected final int _bufferedStart;
protected int _bufferedEnd;
protected int _ptr;
public void <init>(java.io.InputStream, byte[])
{
byte[] v2;
com.fasterxml.jackson.core.format.InputAccessor$Std v0;
java.io.InputStream v1;
v0 := @this: com.fasterxml.jackson.core.format.InputAccessor$Std;
v1 := @parameter0: java.io.InputStream;
v2 := @parameter1: byte[];
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: java.io.InputStream _in> = v1;
v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: byte[] _buffer> = v2;
v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: int _bufferedStart> = 0;
v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: int _ptr> = 0;
v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: int _bufferedEnd> = 0;
return;
}
public void <init>(byte[])
{
int v2;
byte[] v1;
com.fasterxml.jackson.core.format.InputAccessor$Std v0;
v0 := @this: com.fasterxml.jackson.core.format.InputAccessor$Std;
v1 := @parameter0: byte[];
v2 = lengthof v1;
specialinvoke v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: void <init>(byte[],int,int)>(v1, 0, v2);
return;
}
public void <init>(byte[], int, int)
{
byte[] v1;
com.fasterxml.jackson.core.format.InputAccessor$Std v0;
int v2, v3, v4;
v0 := @this: com.fasterxml.jackson.core.format.InputAccessor$Std;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: java.io.InputStream _in> = null;
v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: byte[] _buffer> = v1;
v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: int _ptr> = v2;
v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: int _bufferedStart> = v2;
v4 = v2 + v3;
v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: int _bufferedEnd> = v4;
return;
}
public boolean hasMoreBytes() throws java.io.IOException
{
byte[] v4, v9;
com.fasterxml.jackson.core.format.InputAccessor$Std v0;
int v1, v10, v11, v12, v13, v2, v5, v6, v7;
java.io.InputStream v3, v8;
v0 := @this: com.fasterxml.jackson.core.format.InputAccessor$Std;
v1 = v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: int _ptr>;
v2 = v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: int _bufferedEnd>;
if v1 >= v2 goto label1;
return 1;
label1:
v3 = v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: java.io.InputStream _in>;
if v3 != null goto label2;
return 0;
label2:
v4 = v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: byte[] _buffer>;
v5 = lengthof v4;
v6 = v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: int _ptr>;
v7 = v5 - v6;
if v7 >= 1 goto label3;
return 0;
label3:
v8 = v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: java.io.InputStream _in>;
v9 = v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: byte[] _buffer>;
v10 = v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: int _ptr>;
v11 = virtualinvoke v8.<java.io.InputStream: int read(byte[],int,int)>(v9, v10, v7);
if v11 > 0 goto label4;
return 0;
label4:
v12 = v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: int _bufferedEnd>;
v13 = v12 + v11;
v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: int _bufferedEnd> = v13;
return 1;
}
public byte nextByte() throws java.io.IOException
{
byte[] v6, v9;
com.fasterxml.jackson.core.format.InputAccessor$Std v0;
java.io.EOFException v4;
byte v12;
int v1, v10, v11, v2, v5, v7;
java.lang.String v8;
boolean v3;
v0 := @this: com.fasterxml.jackson.core.format.InputAccessor$Std;
v1 = v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: int _ptr>;
v2 = v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: int _bufferedEnd>;
if v1 < v2 goto label1;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: boolean hasMoreBytes()>();
if v3 != 0 goto label1;
v4 = new java.io.EOFException;
v5 = v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: int _ptr>;
v6 = v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: byte[] _buffer>;
v7 = lengthof v6;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v5, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed auto-detect: could not read more than \u0001 bytes (max buffer size: \u0001)");
specialinvoke v4.<java.io.EOFException: void <init>(java.lang.String)>(v8);
throw v4;
label1:
v9 = v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: byte[] _buffer>;
v10 = v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: int _ptr>;
v11 = v10 + 1;
v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: int _ptr> = v11;
v12 = v9[v10];
return v12;
}
public void reset()
{
int v1;
com.fasterxml.jackson.core.format.InputAccessor$Std v0;
v0 := @this: com.fasterxml.jackson.core.format.InputAccessor$Std;
v1 = v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: int _bufferedStart>;
v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: int _ptr> = v1;
return;
}
public com.fasterxml.jackson.core.format.DataFormatMatcher createMatcher(com.fasterxml.jackson.core.JsonFactory, com.fasterxml.jackson.core.format.MatchStrength)
{
byte[] v5;
com.fasterxml.jackson.core.format.DataFormatMatcher v3;
com.fasterxml.jackson.core.format.InputAccessor$Std v0;
com.fasterxml.jackson.core.format.MatchStrength v2;
com.fasterxml.jackson.core.JsonFactory v1;
int v6, v7, v8, v9;
java.io.InputStream v4;
v0 := @this: com.fasterxml.jackson.core.format.InputAccessor$Std;
v1 := @parameter0: com.fasterxml.jackson.core.JsonFactory;
v2 := @parameter1: com.fasterxml.jackson.core.format.MatchStrength;
v3 = new com.fasterxml.jackson.core.format.DataFormatMatcher;
v4 = v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: java.io.InputStream _in>;
v5 = v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: byte[] _buffer>;
v6 = v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: int _bufferedStart>;
v7 = v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: int _bufferedEnd>;
v8 = v0.<com.fasterxml.jackson.core.format.InputAccessor$Std: int _bufferedStart>;
v9 = v7 - v8;
specialinvoke v3.<com.fasterxml.jackson.core.format.DataFormatMatcher: void <init>(java.io.InputStream,byte[],int,int,com.fasterxml.jackson.core.JsonFactory,com.fasterxml.jackson.core.format.MatchStrength)>(v4, v5, v6, v9, v1, v2);
return v3;
}
}