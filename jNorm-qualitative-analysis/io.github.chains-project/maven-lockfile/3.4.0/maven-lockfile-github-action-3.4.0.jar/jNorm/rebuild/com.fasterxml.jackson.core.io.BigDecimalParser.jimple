public final class com.fasterxml.jackson.core.io.BigDecimalParser extends java.lang.Object
{
static final int MAX_CHARS_TO_REPORT;
private void <init>()
{
com.fasterxml.jackson.core.io.BigDecimalParser v0;
v0 := @this: com.fasterxml.jackson.core.io.BigDecimalParser;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.math.BigDecimal parse(java.lang.String)
{
char[] v1;
java.math.BigDecimal v2;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = virtualinvoke v0.<java.lang.String: char[] toCharArray()>();
v2 = staticinvoke <com.fasterxml.jackson.core.io.BigDecimalParser: java.math.BigDecimal parse(char[])>(v1);
return v2;
}
public static java.math.BigDecimal parse(char[], int, int)
{
java.lang.NumberFormatException v13;
java.lang.RuntimeException v6;
java.math.BigDecimal v3, v5;
int v1, v12, v2, v4;
char[] v0, v11;
java.lang.String v10, v14, v7, v8, v9;
v0 := @parameter0: char[];
v1 := @parameter1: int;
v2 := @parameter2: int;
label1:
if v2 >= 500 goto label3;
v3 = new java.math.BigDecimal;
specialinvoke v3.<java.math.BigDecimal: void <init>(char[],int,int)>(v0, v1, v2);
label2:
return v3;
label3:
v4 = v2 / 10;
v5 = staticinvoke <com.fasterxml.jackson.core.io.BigDecimalParser: java.math.BigDecimal parseBigDecimal(char[],int,int,int)>(v0, v1, v2, v4);
label4:
return v5;
label5:
v6 := @caughtexception;
v7 = virtualinvoke v6.<java.lang.RuntimeException: java.lang.String getMessage()>();
if v7 != null goto label6;
v7 = "Not a valid number representation";
label6:
if v2 > 1000 goto label7;
v8 = new java.lang.String;
specialinvoke v8.<java.lang.String: void <init>(char[],int,int)>(v0, v1, v2);
v9 = v8;
goto label8;
label7:
v10 = new java.lang.String;
v11 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>(v0, v1, 1000);
specialinvoke v10.<java.lang.String: void <init>(char[])>(v11);
v12 = lengthof v0;
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int)>(v10, v12) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001(truncated, full length is \u0001 chars)");
label8:
v13 = new java.lang.NumberFormatException;
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v9, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Value \"\u0001\" can not be represented as `java.math.BigDecimal`, reason: \u0001");
specialinvoke v13.<java.lang.NumberFormatException: void <init>(java.lang.String)>(v14);
throw v13;
catch java.lang.ArithmeticException from label1 to label2 with label5;
catch java.lang.NumberFormatException from label1 to label2 with label5;
catch java.lang.ArithmeticException from label3 to label4 with label5;
catch java.lang.NumberFormatException from label3 to label4 with label5;
}
public static java.math.BigDecimal parse(char[])
{
int v1;
char[] v0;
java.math.BigDecimal v2;
v0 := @parameter0: char[];
v1 = lengthof v0;
v2 = staticinvoke <com.fasterxml.jackson.core.io.BigDecimalParser: java.math.BigDecimal parse(char[],int,int)>(v0, 0, v1);
return v2;
}
public static java.math.BigDecimal parseWithFastParser(java.lang.String)
{
java.lang.NumberFormatException v2, v6;
java.math.BigDecimal v1;
int v3;
java.lang.String v0, v4, v5, v7, v8;
v0 := @parameter0: java.lang.String;
label1:
v1 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.JavaBigDecimalParser: java.math.BigDecimal parseBigDecimal(java.lang.CharSequence)>(v0);
label2:
return v1;
label3:
v2 := @caughtexception;
v3 = virtualinvoke v0.<java.lang.String: int length()>();
if v3 > 1000 goto label4;
v4 = v0;
goto label5;
label4:
v5 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(0, 1000);
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 [truncated]");
label5:
v6 = new java.lang.NumberFormatException;
v7 = virtualinvoke v2.<java.lang.NumberFormatException: java.lang.String getMessage()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v4, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Value \"\u0001\" can not be represented as `java.math.BigDecimal`, reason: \u0001");
specialinvoke v6.<java.lang.NumberFormatException: void <init>(java.lang.String)>(v8);
throw v6;
catch java.lang.NumberFormatException from label1 to label2 with label3;
}
public static java.math.BigDecimal parseWithFastParser(char[], int, int)
{
java.lang.NumberFormatException v4, v7;
java.math.BigDecimal v3;
int v1, v2;
char[] v0;
java.lang.String v5, v6, v8, v9;
v0 := @parameter0: char[];
v1 := @parameter1: int;
v2 := @parameter2: int;
label1:
v3 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.JavaBigDecimalParser: java.math.BigDecimal parseBigDecimal(char[],int,int)>(v0, v1, v2);
label2:
return v3;
label3:
v4 := @caughtexception;
if v2 > 1000 goto label4;
v5 = new java.lang.String;
specialinvoke v5.<java.lang.String: void <init>(char[],int,int)>(v0, v1, v2);
goto label5;
label4:
v6 = new java.lang.String;
specialinvoke v6.<java.lang.String: void <init>(char[],int,int)>(v0, v1, 1000);
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 [truncated]");
label5:
v7 = new java.lang.NumberFormatException;
v8 = virtualinvoke v4.<java.lang.NumberFormatException: java.lang.String getMessage()>();
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v5, v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Value \"\u0001\" can not be represented as `java.math.BigDecimal`, reason: \u0001");
specialinvoke v7.<java.lang.NumberFormatException: void <init>(java.lang.String)>(v9);
throw v7;
catch java.lang.NumberFormatException from label1 to label2 with label3;
}
private static java.math.BigDecimal parseBigDecimal(char[], int, int, int)
{
java.math.BigDecimal v30, v35, v36;
boolean v4, v5, v6;
int v1, v10, v11, v12, v13, v14, v2, v22, v23, v24, v26, v27, v28, v29, v3, v31, v32, v33, v34, v37, v7, v8, v9;
java.lang.String v25;
char v15;
java.lang.NumberFormatException v16, v17, v18, v19, v20, v21;
char[] v0;
v0 := @parameter0: char[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 = 0;
v5 = 0;
v6 = 0;
v7 = v1;
v8 = (int) -1;
v9 = v8;
v10 = (int) -1;
v11 = v10;
v12 = 0;
v13 = v1 + v2;
v14 = v1;
label01:
if v14 >= v13 goto label16;
v15 = v0[v14];
lookupswitch(v15)
{
case 43: goto label02;
case 45: goto label06;
case 46: goto label12;
case 69: goto label10;
case 101: goto label10;
default: goto label14;
};
label02:
if v9 < 0 goto label04;
if v5 == 0 goto label03;
v16 = new java.lang.NumberFormatException;
specialinvoke v16.<java.lang.NumberFormatException: void <init>(java.lang.String)>("Multiple signs in exponent");
throw v16;
label03:
v5 = 1;
goto label15;
label04:
if v4 == 0 goto label05;
v17 = new java.lang.NumberFormatException;
specialinvoke v17.<java.lang.NumberFormatException: void <init>(java.lang.String)>("Multiple signs in number");
throw v17;
label05:
v4 = 1;
v7 = v14 + 1;
goto label15;
label06:
if v9 < 0 goto label08;
if v5 == 0 goto label07;
v18 = new java.lang.NumberFormatException;
specialinvoke v18.<java.lang.NumberFormatException: void <init>(java.lang.String)>("Multiple signs in exponent");
throw v18;
label07:
v5 = 1;
goto label15;
label08:
if v4 == 0 goto label09;
v19 = new java.lang.NumberFormatException;
specialinvoke v19.<java.lang.NumberFormatException: void <init>(java.lang.String)>("Multiple signs in number");
throw v19;
label09:
v4 = 1;
v6 = 1;
v7 = v14 + 1;
goto label15;
label10:
if v9 < 0 goto label11;
v20 = new java.lang.NumberFormatException;
specialinvoke v20.<java.lang.NumberFormatException: void <init>(java.lang.String)>("Multiple exponent markers");
throw v20;
label11:
v9 = v14;
goto label15;
label12:
if v11 < 0 goto label13;
v21 = new java.lang.NumberFormatException;
specialinvoke v21.<java.lang.NumberFormatException: void <init>(java.lang.String)>("Multiple decimal points");
throw v21;
label13:
v11 = v14;
goto label15;
label14:
if v11 < 0 goto label15;
v22 = (int) -1;
if v9 != v22 goto label15;
v12 = v12 + 1;
label15:
v14 = v14 + 1;
goto label01;
label16:
v23 = 0;
if v9 < 0 goto label17;
v24 = v9;
v25 = new java.lang.String;
v26 = v9 + 1;
v27 = v13 - v9;
v28 = v27 - 1;
specialinvoke v25.<java.lang.String: void <init>(char[],int,int)>(v0, v26, v28);
v23 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v25);
v12 = staticinvoke <com.fasterxml.jackson.core.io.BigDecimalParser: int adjustScale(int,long)>(v12, v23);
goto label18;
label17:
v24 = v13;
label18:
if v11 < 0 goto label19;
v29 = v11 - v7;
v30 = staticinvoke <com.fasterxml.jackson.core.io.BigDecimalParser: java.math.BigDecimal toBigDecimalRec(char[],int,int,int,int)>(v0, v7, v29, v23, v3);
v31 = v24 - v11;
v32 = v31 - 1;
v33 = v11 + 1;
v34 = v23 - v32;
v35 = staticinvoke <com.fasterxml.jackson.core.io.BigDecimalParser: java.math.BigDecimal toBigDecimalRec(char[],int,int,int,int)>(v0, v33, v32, v34, v3);
v36 = virtualinvoke v30.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>(v35);
goto label20;
label19:
v37 = v24 - v7;
v36 = staticinvoke <com.fasterxml.jackson.core.io.BigDecimalParser: java.math.BigDecimal toBigDecimalRec(char[],int,int,int,int)>(v0, v7, v37, v23, v3);
label20:
if v12 == 0 goto label21;
v36 = virtualinvoke v36.<java.math.BigDecimal: java.math.BigDecimal setScale(int)>(v12);
label21:
if v6 == 0 goto label22;
v36 = virtualinvoke v36.<java.math.BigDecimal: java.math.BigDecimal negate()>();
label22:
return v36;
}
private static int adjustScale(int, long)
{
byte v3, v4;
int v0;
java.lang.NumberFormatException v5;
long v1, v2;
java.lang.String v6;
v0 := @parameter0: int;
v1 := @parameter1: long;
v2 = v0 - v1;
v3 = v2 cmp 2147483647L;
if v3 > 0 goto label1;
v4 = v2 cmp -2147483648L;
if v4 >= 0 goto label2;
label1:
v5 = new java.lang.NumberFormatException;
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long,int,long)>(v2, v0, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Scale out of range: \u0001 while adjusting scale \u0001 to exponent \u0001");
specialinvoke v5.<java.lang.NumberFormatException: void <init>(java.lang.String)>(v6);
throw v5;
label2:
return v2;
}
private static java.math.BigDecimal toBigDecimalRec(char[], int, int, int, int)
{
java.math.BigDecimal v11, v12, v13, v14, v15, v8;
int v1, v10, v2, v3, v4, v5, v6, v7, v9;
char[] v0;
v0 := @parameter0: char[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 := @parameter4: int;
if v2 <= v4 goto label1;
v5 = v2 / 2;
v6 = v3 + v2;
v7 = v6 - v5;
v8 = staticinvoke <com.fasterxml.jackson.core.io.BigDecimalParser: java.math.BigDecimal toBigDecimalRec(char[],int,int,int,int)>(v0, v1, v5, v7, v4);
v9 = v1 + v5;
v10 = v2 - v5;
v11 = staticinvoke <com.fasterxml.jackson.core.io.BigDecimalParser: java.math.BigDecimal toBigDecimalRec(char[],int,int,int,int)>(v0, v9, v10, v3, v4);
v12 = virtualinvoke v8.<java.math.BigDecimal: java.math.BigDecimal add(java.math.BigDecimal)>(v11);
return v12;
label1:
if v2 != 0 goto label2;
v13 = <java.math.BigDecimal: java.math.BigDecimal ZERO>;
return v13;
label2:
v14 = new java.math.BigDecimal;
specialinvoke v14.<java.math.BigDecimal: void <init>(char[],int,int)>(v0, v1, v2);
v15 = virtualinvoke v14.<java.math.BigDecimal: java.math.BigDecimal scaleByPowerOfTen(int)>(v3);
return v15;
}
}