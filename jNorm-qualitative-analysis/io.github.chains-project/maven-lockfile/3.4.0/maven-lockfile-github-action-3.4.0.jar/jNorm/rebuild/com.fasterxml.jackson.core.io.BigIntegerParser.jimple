public final class com.fasterxml.jackson.core.io.BigIntegerParser extends java.lang.Object
{
private void <init>()
{
com.fasterxml.jackson.core.io.BigIntegerParser v0;
v0 := @this: com.fasterxml.jackson.core.io.BigIntegerParser;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.math.BigInteger parseWithFastParser(java.lang.String)
{
java.lang.NumberFormatException v2, v6;
int v3;
java.math.BigInteger v1;
java.lang.String v0, v4, v5, v7, v8;
v0 := @parameter0: java.lang.String;
label1:
v1 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerParser: java.math.BigInteger parseBigInteger(java.lang.CharSequence)>(v0);
label2:
return v1;
label3:
v2 := @caughtexception;
v3 = virtualinvoke v0.<java.lang.String: int length()>();
if v3 > 1000 goto label4;
v4 = v0;
goto label5;
label4:
v5 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(0, 1000);
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 [truncated]");
label5:
v6 = new java.lang.NumberFormatException;
v7 = virtualinvoke v2.<java.lang.NumberFormatException: java.lang.String getMessage()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v4, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Value \"\u0001\" can not be represented as `java.math.BigInteger`, reason: \u0001");
specialinvoke v6.<java.lang.NumberFormatException: void <init>(java.lang.String)>(v8);
throw v6;
catch java.lang.NumberFormatException from label1 to label2 with label3;
}
public static java.math.BigInteger parseWithFastParser(java.lang.String, int)
{
java.lang.NumberFormatException v3, v7;
int v1, v4;
java.math.BigInteger v2;
java.lang.String v0, v5, v6, v8, v9;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
label1:
v2 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerParser: java.math.BigInteger parseBigInteger(java.lang.CharSequence,int)>(v0, v1);
label2:
return v2;
label3:
v3 := @caughtexception;
v4 = virtualinvoke v0.<java.lang.String: int length()>();
if v4 > 1000 goto label4;
v5 = v0;
goto label5;
label4:
v6 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(0, 1000);
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 [truncated]");
label5:
v7 = new java.lang.NumberFormatException;
v8 = virtualinvoke v3.<java.lang.NumberFormatException: java.lang.String getMessage()>();
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int,java.lang.String)>(v5, v1, v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Value \"\u0001\" can not be represented as `java.math.BigInteger` with radix \u0001, reason: \u0001");
specialinvoke v7.<java.lang.NumberFormatException: void <init>(java.lang.String)>(v9);
throw v7;
catch java.lang.NumberFormatException from label1 to label2 with label3;
}
}