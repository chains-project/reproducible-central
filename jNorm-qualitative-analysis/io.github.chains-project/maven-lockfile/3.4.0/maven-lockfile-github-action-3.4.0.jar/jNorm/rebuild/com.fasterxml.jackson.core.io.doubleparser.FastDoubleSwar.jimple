class com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar extends java.lang.Object
{
void <init>()
{
com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar v0;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
protected static boolean isDigit(char)
{
char v0, v2;
boolean v1;
v0 := @parameter0: char;
if v2 >= 10 goto label1;
v1 = 1;
goto label2;
label1:
v1 = 0;
label2:
return v1;
}
protected static boolean isDigit(byte)
{
char v2;
byte v0;
boolean v1;
v0 := @parameter0: byte;
if v2 >= 10 goto label1;
v1 = 1;
goto label2;
label1:
v1 = 0;
label2:
return v1;
}
public static boolean isEightDigits(byte[], int)
{
byte[] v0;
int v1;
long v2;
boolean v3;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: long readLongLE(byte[],int)>(v0, v1);
v3 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: boolean isEightDigitsUtf8(long)>(v2);
return v3;
}
public static boolean isEightDigits(char[], int)
{
long v10, v13, v14, v19, v20, v23, v24, v27, v28, v5, v6, v9;
int v1, v11, v15, v17, v21, v25, v3, v7;
boolean v29;
char v12, v16, v18, v2, v22, v26, v4, v8;
char[] v0;
v0 := @parameter0: char[];
v1 := @parameter1: int;
v2 = v0[v1];
v3 = v1 + 1;
v4 = v0[v3];
v5 = v4 << 16;
v6 = v2 | v5;
v7 = v1 + 2;
v8 = v0[v7];
v9 = v8 << 32;
v10 = v6 | v9;
v11 = v1 + 3;
v12 = v0[v11];
v13 = v12 << 48;
v14 = v10 | v13;
v15 = v1 + 4;
v16 = v0[v15];
v17 = v1 + 5;
v18 = v0[v17];
v19 = v18 << 16;
v20 = v16 | v19;
v21 = v1 + 6;
v22 = v0[v21];
v23 = v22 << 32;
v24 = v20 | v23;
v25 = v1 + 7;
v26 = v0[v25];
v27 = v26 << 48;
v28 = v24 | v27;
v29 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: boolean isEightDigitsUtf16(long,long)>(v14, v28);
return v29;
}
public static boolean isEightDigits(java.lang.CharSequence, int)
{
java.lang.CharSequence v0;
int v1, v3, v4;
char v5;
boolean v2, v6;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: int;
v2 = 1;
v3 = 0;
label1:
if v3 >= 8 goto label2;
v4 = v3 + v1;
v5 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v4);
v6 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: boolean isDigit(char)>(v5);
v2 = v2 & v6;
v3 = v3 + 1;
goto label1;
label2:
return v2;
}
public static boolean isEightDigitsUtf16(long, long)
{
long v0, v1, v2, v3, v4, v5, v6, v7, v8, v9;
byte v10;
boolean v11;
v0 := @parameter0: long;
v1 := @parameter1: long;
v2 = v0 - 13511005043687472L;
v3 = v1 - 13511005043687472L;
v4 = v0 + 19703549022044230L;
v5 = v4 | v2;
v6 = v1 + 19703549022044230L;
v7 = v6 | v3;
v8 = v5 | v7;
v9 = v8 & -35747867511423104L;
v10 = v9 cmp 0L;
if v10 != 0 goto label1;
v11 = 1;
goto label2;
label1:
v11 = 0;
label2:
return v11;
}
public static boolean isEightDigitsUtf8(long)
{
byte v5;
long v0, v1, v2, v3, v4;
boolean v6;
v0 := @parameter0: long;
v1 = v0 - 3472328296227680304L;
v2 = v0 + 5063812098665367110L;
v3 = v2 | v1;
v4 = v3 & -9187201950435737472L;
v5 = v4 cmp 0L;
if v5 != 0 goto label1;
v6 = 1;
goto label2;
label1:
v6 = 0;
label2:
return v6;
}
public static boolean isEightZeroes(byte[], int)
{
byte[] v0;
int v1;
long v2;
boolean v3;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: long readLongLE(byte[],int)>(v0, v1);
v3 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: boolean isEightZeroesUtf8(long)>(v2);
return v3;
}
public static boolean isEightZeroes(java.lang.CharSequence, int)
{
java.lang.CharSequence v0;
char v6;
int v1, v3, v5;
boolean v2, v4, v7;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: int;
v2 = 1;
v3 = 0;
label1:
if v3 >= 8 goto label4;
v4 = v2;
v5 = v3 + v1;
v6 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v5);
if 48 != v6 goto label2;
v7 = 1;
goto label3;
label2:
v7 = 0;
label3:
v2 = v4 & v7;
v3 = v3 + 1;
goto label1;
label4:
return v2;
}
public static boolean isEightZeroes(char[], int)
{
long v10, v13, v14, v19, v20, v23, v24, v27, v28, v5, v6, v9;
int v1, v11, v15, v17, v21, v25, v3, v7;
boolean v29;
char v12, v16, v18, v2, v22, v26, v4, v8;
char[] v0;
v0 := @parameter0: char[];
v1 := @parameter1: int;
v2 = v0[v1];
v3 = v1 + 1;
v4 = v0[v3];
v5 = v4 << 16;
v6 = v2 | v5;
v7 = v1 + 2;
v8 = v0[v7];
v9 = v8 << 32;
v10 = v6 | v9;
v11 = v1 + 3;
v12 = v0[v11];
v13 = v12 << 48;
v14 = v10 | v13;
v15 = v1 + 4;
v16 = v0[v15];
v17 = v1 + 5;
v18 = v0[v17];
v19 = v18 << 16;
v20 = v16 | v19;
v21 = v1 + 6;
v22 = v0[v21];
v23 = v22 << 32;
v24 = v20 | v23;
v25 = v1 + 7;
v26 = v0[v25];
v27 = v26 << 48;
v28 = v24 | v27;
v29 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: boolean isEightZeroesUtf16(long,long)>(v14, v28);
return v29;
}
public static boolean isEightZeroesUtf16(long, long)
{
byte v2, v3;
long v0, v1;
boolean v4;
v0 := @parameter0: long;
v1 := @parameter1: long;
v2 = v0 cmp 13511005043687472L;
if v2 != 0 goto label1;
v3 = v1 cmp 13511005043687472L;
if v3 != 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public static boolean isEightZeroesUtf8(long)
{
long v0;
byte v1;
boolean v2;
v0 := @parameter0: long;
v1 = v0 cmp 3472328296227680304L;
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public static int parseEightDigitsUtf16(long, long)
{
long v0, v1, v2, v3, v4, v5, v6, v7;
int v8, v9;
v0 := @parameter0: long;
v1 := @parameter1: long;
v2 = v0 - 13511005043687472L;
v3 = v1 - 13511005043687472L;
v4 = v3 * 281475406208040961L;
v5 = v4 >>> 48;
v6 = v2 * 281475406208040961L;
v7 = v6 >>> 48;
v8 = v7 * 10000;
v9 = v5 + v8;
return v9;
}
public static int readIntBE(byte[], int)
{
byte[] v0;
short v12, v17, v3, v7;
byte v11, v16, v2, v6;
int v1, v10, v13, v14, v15, v18, v4, v5, v8, v9;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 = v0[v1];
v3 = v2 & 255;
v4 = v3 << 24;
v5 = v1 + 1;
v6 = v0[v5];
v7 = v6 & 255;
v8 = v7 << 16;
v9 = v4 | v8;
v10 = v1 + 2;
v11 = v0[v10];
v12 = v11 & 255;
v13 = v12 << 8;
v14 = v9 | v13;
v15 = v1 + 3;
v16 = v0[v15];
v17 = v16 & 255;
v18 = v14 | v17;
return v18;
}
public static int readIntLE(byte[], int)
{
byte[] v0;
short v13, v17, v4, v8;
byte v12, v16, v3, v7;
int v1, v10, v11, v14, v15, v18, v2, v5, v6, v9;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 = v1 + 3;
v3 = v0[v2];
v4 = v3 & 255;
v5 = v4 << 24;
v6 = v1 + 2;
v7 = v0[v6];
v8 = v7 & 255;
v9 = v8 << 16;
v10 = v5 | v9;
v11 = v1 + 1;
v12 = v0[v11];
v13 = v12 & 255;
v14 = v13 << 8;
v15 = v10 | v14;
v16 = v0[v1];
v17 = v16 & 255;
v18 = v15 | v17;
return v18;
}
public static long readLongBE(byte[], int)
{
byte[] v0;
byte v11, v16, v2, v21, v26, v31, v36, v6;
long v12, v13, v14, v17, v18, v19, v22, v23, v24, v27, v28, v29, v3, v32, v33, v34, v37, v38, v4, v7, v8, v9;
int v1, v10, v15, v20, v25, v30, v35, v5;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 = v0[v1];
v3 = v2 & 255L;
v4 = v3 << 56;
v5 = v1 + 1;
v6 = v0[v5];
v7 = v6 & 255L;
v8 = v7 << 48;
v9 = v4 | v8;
v10 = v1 + 2;
v11 = v0[v10];
v12 = v11 & 255L;
v13 = v12 << 40;
v14 = v9 | v13;
v15 = v1 + 3;
v16 = v0[v15];
v17 = v16 & 255L;
v18 = v17 << 32;
v19 = v14 | v18;
v20 = v1 + 4;
v21 = v0[v20];
v22 = v21 & 255L;
v23 = v22 << 24;
v24 = v19 | v23;
v25 = v1 + 5;
v26 = v0[v25];
v27 = v26 & 255L;
v28 = v27 << 16;
v29 = v24 | v28;
v30 = v1 + 6;
v31 = v0[v30];
v32 = v31 & 255L;
v33 = v32 << 8;
v34 = v29 | v33;
v35 = v1 + 7;
v36 = v0[v35];
v37 = v36 & 255L;
v38 = v34 | v37;
return v38;
}
public static long readLongLE(byte[], int)
{
byte[] v0;
byte v12, v17, v22, v27, v3, v32, v36, v7;
long v10, v13, v14, v15, v18, v19, v20, v23, v24, v25, v28, v29, v30, v33, v34, v35, v37, v38, v4, v5, v8, v9;
int v1, v11, v16, v2, v21, v26, v31, v6;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 = v1 + 7;
v3 = v0[v2];
v4 = v3 & 255L;
v5 = v4 << 56;
v6 = v1 + 6;
v7 = v0[v6];
v8 = v7 & 255L;
v9 = v8 << 48;
v10 = v5 | v9;
v11 = v1 + 5;
v12 = v0[v11];
v13 = v12 & 255L;
v14 = v13 << 40;
v15 = v10 | v14;
v16 = v1 + 4;
v17 = v0[v16];
v18 = v17 & 255L;
v19 = v18 << 32;
v20 = v15 | v19;
v21 = v1 + 3;
v22 = v0[v21];
v23 = v22 & 255L;
v24 = v23 << 24;
v25 = v20 | v24;
v26 = v1 + 2;
v27 = v0[v26];
v28 = v27 & 255L;
v29 = v28 << 16;
v30 = v25 | v29;
v31 = v1 + 1;
v32 = v0[v31];
v33 = v32 & 255L;
v34 = v33 << 8;
v35 = v30 | v34;
v36 = v0[v1];
v37 = v36 & 255L;
v38 = v35 | v37;
return v38;
}
public static int tryToParseEightDigits(char[], int)
{
long v10, v13, v14, v19, v20, v23, v24, v27, v28, v5, v6, v9;
int v1, v11, v15, v17, v21, v25, v29, v3, v7;
char v12, v16, v18, v2, v22, v26, v4, v8;
char[] v0;
v0 := @parameter0: char[];
v1 := @parameter1: int;
v2 = v0[v1];
v3 = v1 + 1;
v4 = v0[v3];
v5 = v4 << 16;
v6 = v2 | v5;
v7 = v1 + 2;
v8 = v0[v7];
v9 = v8 << 32;
v10 = v6 | v9;
v11 = v1 + 3;
v12 = v0[v11];
v13 = v12 << 48;
v14 = v10 | v13;
v15 = v1 + 4;
v16 = v0[v15];
v17 = v1 + 5;
v18 = v0[v17];
v19 = v18 << 16;
v20 = v16 | v19;
v21 = v1 + 6;
v22 = v0[v21];
v23 = v22 << 32;
v24 = v20 | v23;
v25 = v1 + 7;
v26 = v0[v25];
v27 = v26 << 48;
v28 = v24 | v27;
v29 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: int tryToParseEightDigitsUtf16(long,long)>(v14, v28);
return v29;
}
public static int tryToParseEightDigits(byte[], int)
{
byte[] v0;
int v1, v3;
long v2;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: long readLongLE(byte[],int)>(v0, v1);
v3 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: int tryToParseEightDigitsUtf8(long)>(v2);
return v3;
}
public static int tryToParseEightDigits(java.lang.CharSequence, int)
{
long v10, v13, v14, v19, v20, v23, v24, v27, v28, v5, v6, v9;
int v1, v11, v15, v17, v21, v25, v29, v3, v7;
java.lang.CharSequence v0;
char v12, v16, v18, v2, v22, v26, v4, v8;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: int;
v2 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v1);
v3 = v1 + 1;
v4 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v3);
v5 = v4 << 16;
v6 = v2 | v5;
v7 = v1 + 2;
v8 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v7);
v9 = v8 << 32;
v10 = v6 | v9;
v11 = v1 + 3;
v12 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v11);
v13 = v12 << 48;
v14 = v10 | v13;
v15 = v1 + 4;
v16 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v15);
v17 = v1 + 5;
v18 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v17);
v19 = v18 << 16;
v20 = v16 | v19;
v21 = v1 + 6;
v22 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v21);
v23 = v22 << 32;
v24 = v20 | v23;
v25 = v1 + 7;
v26 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v25);
v27 = v26 << 48;
v28 = v24 | v27;
v29 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: int tryToParseEightDigitsUtf16(long,long)>(v14, v28);
return v29;
}
public static int tryToParseEightDigitsUtf16(long, long)
{
long v0, v1, v12, v13, v14, v15, v2, v3, v4, v5, v6, v7, v8, v9;
byte v10;
int v11, v16, v17;
v0 := @parameter0: long;
v1 := @parameter1: long;
v2 = v0 - 13511005043687472L;
v3 = v1 - 13511005043687472L;
v4 = v0 + 19703549022044230L;
v5 = v4 | v2;
v6 = v1 + 19703549022044230L;
v7 = v6 | v3;
v8 = v5 | v7;
v9 = v8 & -35747867511423104L;
v10 = v9 cmp 0L;
if v10 == 0 goto label1;
v11 = (int) -1;
return v11;
label1:
v12 = v3 * 281475406208040961L;
v13 = v12 >>> 48;
v14 = v2 * 281475406208040961L;
v15 = v14 >>> 48;
v16 = v15 * 10000;
v17 = v13 + v16;
return v17;
}
public static int tryToParseEightDigitsUtf8(byte[], int)
{
byte[] v0;
int v1, v3;
long v2;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: long readLongLE(byte[],int)>(v0, v1);
v3 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: int tryToParseEightDigitsUtf8(long)>(v2);
return v3;
}
public static int tryToParseEightDigitsUtf8(long)
{
long v0, v1, v10, v11, v12, v13, v14, v15, v16, v2, v3, v4, v7, v8, v9;
byte v5;
int v6;
v0 := @parameter0: long;
v1 = v0 - 3472328296227680304L;
v2 = v0 + 5063812098665367110L;
v3 = v2 | v1;
v4 = v3 & -9187201950435737472L;
v5 = v4 cmp 0L;
if v5 == 0 goto label1;
v6 = (int) -1;
return v6;
label1:
v7 = v1 * 10L;
v8 = v1 >>> 8;
v9 = v7 + v8;
v10 = v9 & 1095216660735L;
v11 = v10 * 4294967296000100L;
v12 = v9 >>> 16;
v13 = v12 & 1095216660735L;
v14 = v13 * 42949672960001L;
v15 = v11 + v14;
v16 = v15 >>> 32;
return v16;
}
public static long tryToParseEightHexDigits(java.lang.CharSequence, int)
{
long v10, v11, v14, v17, v20, v21, v24, v25, v28, v29, v3, v6, v7;
int v1, v12, v15, v18, v22, v26, v4, v8;
java.lang.CharSequence v0;
char v13, v16, v19, v2, v23, v27, v5, v9;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: int;
v2 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v1);
v3 = v2 << 48;
v4 = v1 + 1;
v5 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v4);
v6 = v5 << 32;
v7 = v3 | v6;
v8 = v1 + 2;
v9 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v8);
v10 = v9 << 16;
v11 = v7 | v10;
v12 = v1 + 3;
v13 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v12);
v14 = v11 | v13;
v15 = v1 + 4;
v16 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v15);
v17 = v16 << 48;
v18 = v1 + 5;
v19 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v18);
v20 = v19 << 32;
v21 = v17 | v20;
v22 = v1 + 6;
v23 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v22);
v24 = v23 << 16;
v25 = v21 | v24;
v26 = v1 + 7;
v27 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v26);
v28 = v25 | v27;
v29 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: long tryToParseEightHexDigitsUtf16(long,long)>(v14, v28);
return v29;
}
public static long tryToParseEightHexDigits(char[], int)
{
long v10, v11, v14, v17, v20, v21, v24, v25, v28, v29, v3, v6, v7;
int v1, v12, v15, v18, v22, v26, v4, v8;
char v13, v16, v19, v2, v23, v27, v5, v9;
char[] v0;
v0 := @parameter0: char[];
v1 := @parameter1: int;
v2 = v0[v1];
v3 = v2 << 48;
v4 = v1 + 1;
v5 = v0[v4];
v6 = v5 << 32;
v7 = v3 | v6;
v8 = v1 + 2;
v9 = v0[v8];
v10 = v9 << 16;
v11 = v7 | v10;
v12 = v1 + 3;
v13 = v0[v12];
v14 = v11 | v13;
v15 = v1 + 4;
v16 = v0[v15];
v17 = v16 << 48;
v18 = v1 + 5;
v19 = v0[v18];
v20 = v19 << 32;
v21 = v17 | v20;
v22 = v1 + 6;
v23 = v0[v22];
v24 = v23 << 16;
v25 = v21 | v24;
v26 = v1 + 7;
v27 = v0[v26];
v28 = v25 | v27;
v29 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: long tryToParseEightHexDigitsUtf16(long,long)>(v14, v28);
return v29;
}
public static long tryToParseEightHexDigits(byte[], int)
{
byte[] v0;
int v1;
long v2, v3;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: long readLongBE(byte[],int)>(v0, v1);
v3 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: long tryToParseEightHexDigitsUtf8(long)>(v2);
return v3;
}
public static long tryToParseEightHexDigitsUtf16(long, long)
{
long v0, v1, v2, v3, v4, v5;
v0 := @parameter0: long;
v1 := @parameter1: long;
v2 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: long tryToParseFourHexDigitsUtf16(long)>(v0);
v3 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: long tryToParseFourHexDigitsUtf16(long)>(v1);
v4 = v2 << 16;
v5 = v4 | v3;
return v5;
}
public static long tryToParseEightHexDigitsUtf8(long)
{
long v0, v1, v11, v12, v13, v14, v15, v16, v17, v18, v19, v2, v20, v21, v22, v23, v24, v25, v26, v3, v4, v5, v6, v7, v8, v9;
byte v10;
v0 := @parameter0: long;
v1 = v0 | 2314885530818453536L;
v2 = v1 - 3472328296227680304L;
v3 = v2 + 8536140394893047414L;
v4 = v3 & -9187201950435737472L;
v5 = v2 + 5714873654208057167L;
v6 = v5 & -9187201950435737472L;
v7 = v2 ^ 9187201950435737471L;
v8 = 3978709506094217015L + v7;
v9 = v6 & v8;
v10 = v4 cmp v9;
if v10 == 0 goto label1;
return -1L;
label1:
v11 = v4 >>> 7;
v12 = v11 * 255L;
v13 = v12 ^ -1L;
v14 = v2 & v13;
v15 = 2821266740684990247L & v12;
v16 = v2 - v15;
v17 = v14 | v16;
v18 = v17 >>> 4;
v19 = v17 | v18;
v20 = v19 & 71777214294589695L;
v21 = v20 >>> 8;
v22 = v20 | v21;
v23 = v22 >>> 16;
v24 = v23 & 4294901760L;
v25 = v22 & 65535L;
v26 = v24 | v25;
return v26;
}
public static int tryToParseFourDigits(char[], int)
{
long v10, v13, v14, v5, v6, v9;
int v1, v11, v15, v3, v7;
char v12, v2, v4, v8;
char[] v0;
v0 := @parameter0: char[];
v1 := @parameter1: int;
v2 = v0[v1];
v3 = v1 + 1;
v4 = v0[v3];
v5 = v4 << 16;
v6 = v2 | v5;
v7 = v1 + 2;
v8 = v0[v7];
v9 = v8 << 32;
v10 = v6 | v9;
v11 = v1 + 3;
v12 = v0[v11];
v13 = v12 << 48;
v14 = v10 | v13;
v15 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: int tryToParseFourDigitsUtf16(long)>(v14);
return v15;
}
public static int tryToParseFourDigits(java.lang.CharSequence, int)
{
long v10, v13, v14, v5, v6, v9;
int v1, v11, v15, v3, v7;
java.lang.CharSequence v0;
char v12, v2, v4, v8;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: int;
v2 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v1);
v3 = v1 + 1;
v4 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v3);
v5 = v4 << 16;
v6 = v2 | v5;
v7 = v1 + 2;
v8 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v7);
v9 = v8 << 32;
v10 = v6 | v9;
v11 = v1 + 3;
v12 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v11);
v13 = v12 << 48;
v14 = v10 | v13;
v15 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: int tryToParseFourDigitsUtf16(long)>(v14);
return v15;
}
public static int tryToParseFourDigits(byte[], int)
{
byte[] v0;
int v1, v2, v3;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: int readIntLE(byte[],int)>(v0, v1);
v3 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: int tryToParseFourDigitsUtf8(int)>(v2);
return v3;
}
public static int tryToParseFourDigitsUtf16(long)
{
long v0, v1, v2, v3, v4, v7, v8;
byte v5;
int v6;
v0 := @parameter0: long;
v1 = v0 - 13511005043687472L;
v2 = v0 + 19703549022044230L;
v3 = v2 | v1;
v4 = v3 & -35747867511423104L;
v5 = v4 cmp 0L;
if v5 == 0 goto label1;
v6 = (int) -1;
return v6;
label1:
v7 = v1 * 281475406208040961L;
v8 = v7 >>> 48;
return v8;
}
public static int tryToParseFourDigitsUtf8(int)
{
byte v5;
int v0, v1, v10, v11, v12, v13, v2, v3, v4, v6, v7, v8, v9;
v0 := @parameter0: int;
v1 = v0 - 808464432;
v2 = v0 + 1179010630;
v3 = v2 | v1;
v4 = v3 & -2139062144;
v5 = v4 cmp 0L;
if v5 == 0 goto label1;
v6 = (int) -1;
return v6;
label1:
v7 = v1 * 2561;
v8 = v7 >>> 8;
v9 = v8 & 255;
v10 = v9 * 100;
v11 = v8 & 16711680;
v12 = v11 >> 16;
v13 = v10 + v12;
return v13;
}
public static long tryToParseFourHexDigitsUtf16(long)
{
long v0, v1, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v2, v20, v21, v3, v4, v5, v6, v7, v8;
byte v9;
v0 := @parameter0: long;
v1 = v0 - 13511005043687472L;
v2 = v1 + 9220697983773212662L;
v3 = v2 & -9223231297218904064L;
v4 = v1 + 9209720292175216591L;
v5 = v4 & -9223231297218904064L;
v6 = v1 ^ 9223231297218904063L;
v7 = 15481359945891895L + v6;
v8 = v5 & v7;
v9 = v3 cmp v8;
if v9 == 0 goto label1;
return -1L;
label1:
v10 = v3 >>> 15;
v11 = v10 * 65535L;
v12 = v11 ^ -1L;
v13 = v1 & v12;
v14 = 10977691597996071L & v11;
v15 = v1 - v14;
v16 = v13 | v15;
v17 = v16 >>> 12;
v18 = v16 | v17;
v19 = v18 >>> 24;
v20 = v18 | v19;
v21 = v20 & 65535L;
return v21;
}
public static int tryToParseUpTo7Digits(byte[], int, int)
{
byte[] v0;
byte v5;
int v1, v10, v2, v3, v7, v8, v9;
boolean v4, v6;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = 0;
v4 = 1;
label1:
if v1 >= v2 goto label2;
v5 = v0[v1];
v6 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: boolean isDigit(byte)>(v5);
v4 = v4 & v6;
v7 = 10 * v3;
v8 = v7 + v5;
v3 = v8 - 48;
v1 = v1 + 1;
goto label1;
label2:
if v4 == 0 goto label3;
v9 = v3;
goto label4;
label3:
v10 = (int) -1;
v9 = v10;
label4:
return v9;
}
public static int tryToParseUpTo7Digits(char[], int, int)
{
char v5;
int v1, v10, v2, v3, v7, v8, v9;
char[] v0;
boolean v4, v6;
v0 := @parameter0: char[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = 0;
v4 = 1;
label1:
if v1 >= v2 goto label2;
v5 = v0[v1];
v6 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: boolean isDigit(char)>(v5);
v4 = v4 & v6;
v7 = 10 * v3;
v8 = v7 + v5;
v3 = v8 - 48;
v1 = v1 + 1;
goto label1;
label2:
if v4 == 0 goto label3;
v9 = v3;
goto label4;
label3:
v10 = (int) -1;
v9 = v10;
label4:
return v9;
}
public static int tryToParseUpTo7Digits(java.lang.CharSequence, int, int)
{
java.lang.CharSequence v0;
char v5;
int v1, v10, v2, v3, v7, v8, v9;
boolean v4, v6;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = 0;
v4 = 1;
label1:
if v1 >= v2 goto label2;
v5 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v1);
v6 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: boolean isDigit(char)>(v5);
v4 = v4 & v6;
v7 = 10 * v3;
v8 = v7 + v5;
v3 = v8 - 48;
v1 = v1 + 1;
goto label1;
label2:
if v4 == 0 goto label3;
v9 = v3;
goto label4;
label3:
v10 = (int) -1;
v9 = v10;
label4:
return v9;
}
public static void writeIntBE(byte[], int, int)
{
byte[] v0;
int v1, v2, v3, v4, v5, v6, v7, v8;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = v2 >>> 24;
v0[v1] = v3;
v4 = v1 + 1;
v5 = v2 >>> 16;
v0[v4] = v5;
v6 = v1 + 2;
v7 = v2 >>> 8;
v0[v6] = v7;
v8 = v1 + 3;
v0[v8] = v2;
return;
}
public static void writeLongBE(byte[], int, long)
{
byte[] v0;
long v2;
int v1, v10, v11, v12, v13, v14, v15, v16, v17, v3, v4, v5, v6, v7, v8, v9;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: long;
v0[v1] = v10;
v3 = v1 + 1;
v0[v3] = v11;
v4 = v1 + 2;
v0[v4] = v12;
v5 = v1 + 3;
v0[v5] = v13;
v6 = v1 + 4;
v0[v6] = v14;
v7 = v1 + 5;
v0[v7] = v15;
v8 = v1 + 6;
v0[v8] = v16;
v9 = v1 + 7;
v0[v9] = v17;
return;
}
public static double fma(double, double, double)
{
double v0, v1, v2, v3, v4;
v0 := @parameter0: double;
v1 := @parameter1: double;
v2 := @parameter2: double;
v3 = v0 * v1;
v4 = v3 + v2;
return v4;
}
}