class com.fasterxml.jackson.core.io.doubleparser.FastFloatMath extends java.lang.Object
{
private static final int FLOAT_EXPONENT_BIAS;
private static final int FLOAT_SIGNIFICAND_WIDTH;
private static final int FLOAT_MIN_EXPONENT_POWER_OF_TEN;
private static final int FLOAT_MAX_EXPONENT_POWER_OF_TEN;
private static final int FLOAT_MIN_EXPONENT_POWER_OF_TWO;
private static final int FLOAT_MAX_EXPONENT_POWER_OF_TWO;
private static final float[] FLOAT_POWER_OF_TEN;
private void <init>()
{
com.fasterxml.jackson.core.io.doubleparser.FastFloatMath v0;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FastFloatMath;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static float decFloatLiteralToFloat(boolean, long, int, boolean, int)
{
long v1, v9;
byte v12, v5;
int v14, v2, v4, v7;
float v10, v13, v6, v8;
boolean v0, v11, v3;
v0 := @parameter0: boolean;
v1 := @parameter1: long;
v2 := @parameter2: int;
v3 := @parameter3: boolean;
v4 := @parameter4: int;
v5 = v1 cmp 0L;
if v5 != 0 goto label3;
if v0 == 0 goto label1;
v6 = -0.0F;
goto label2;
label1:
v6 = 0.0F;
label2:
return v6;
label3:
if v3 == 0 goto label5;
v7 = (int) -45;
if v7 > v4 goto label4;
if v4 > 38 goto label4;
v8 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastFloatMath: float tryDecToFloatWithFastAlgorithm(boolean,long,int)>(v0, v1, v4);
v9 = v1 + 1L;
v10 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastFloatMath: float tryDecToFloatWithFastAlgorithm(boolean,long,int)>(v0, v9, v4);
v11 = staticinvoke <java.lang.Float: boolean isNaN(float)>(v8);
if v11 != 0 goto label4;
v12 = v10 cmpl v8;
if v12 != 0 goto label4;
return v8;
label4:
v13 = #NaNF;
goto label7;
label5:
v14 = (int) -45;
if v14 > v2 goto label6;
if v2 > 38 goto label6;
v13 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastFloatMath: float tryDecToFloatWithFastAlgorithm(boolean,long,int)>(v0, v1, v2);
goto label7;
label6:
v13 = #NaNF;
label7:
return v13;
}
static float hexFloatLiteralToFloat(boolean, long, int, boolean, int)
{
long v1;
int v2, v4, v5, v6;
float v7, v8, v9;
boolean v0, v3;
v0 := @parameter0: boolean;
v1 := @parameter1: long;
v2 := @parameter2: int;
v3 := @parameter3: boolean;
v4 := @parameter4: int;
if v3 == 0 goto label1;
v5 = v4;
goto label2;
label1:
v5 = v2;
label2:
v6 = (int) -126;
if v6 > v5 goto label4;
if v5 > 127 goto label4;
v7 = staticinvoke <java.lang.Math: float abs(float)>(v1);
v8 = staticinvoke <java.lang.Math: float scalb(float,int)>(1.0F, v5);
v9 = v7 * v8;
if v0 == 0 goto label3;
v9 = neg v9;
label3:
return v9;
label4:
return #NaNF;
}
static float tryDecToFloatWithFastAlgorithm(boolean, long, int)
{
byte v30, v32, v34, v37, v40, v41;
boolean v0;
float v10, v11, v46, v7, v8;
float[] v5, v9;
long v1, v15, v16, v17, v18, v19, v21, v23, v24, v25, v26, v27, v29, v31, v33, v35, v36, v38, v39, v42, v43, v44, v45;
long[] v12;
int v13, v14, v2, v20, v28, v3, v4, v6;
com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath$UInt128 v22;
v0 := @parameter0: boolean;
v1 := @parameter1: long;
v2 := @parameter2: int;
v3 = (int) -10;
if v3 > v2 goto label05;
if v2 > 10 goto label05;
v4 = staticinvoke <java.lang.Long: int compareUnsigned(long,long)>(v1, 16777215L);
if v4 > 0 goto label05;
if v2 >= 0 goto label01;
v5 = <com.fasterxml.jackson.core.io.doubleparser.FastFloatMath: float[] FLOAT_POWER_OF_TEN>;
v6 = neg v2;
v7 = v5[v6];
v8 = v1 / v7;
goto label02;
label01:
v9 = <com.fasterxml.jackson.core.io.doubleparser.FastFloatMath: float[] FLOAT_POWER_OF_TEN>;
v10 = v9[v2];
v8 = v1 * v10;
label02:
if v0 == 0 goto label03;
v11 = neg v8;
goto label04;
label03:
v11 = v8;
label04:
return v11;
label05:
v12 = <com.fasterxml.jackson.core.io.doubleparser.FastDoubleMath: long[] MANTISSA_64>;
v13 = (int) -325;
v14 = v2 - v13;
v15 = v12[v14];
v16 = 217706L * v2;
v17 = v16 >> 16;
v18 = v17 + 127L;
v19 = v18 + 64L;
v20 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(v1);
v21 = v1 << v20;
v22 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath: com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath$UInt128 fullMultiplication(long,long)>(v21, v15);
v23 = v22.<com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath$UInt128: long high>;
v24 = v23 >>> 63;
v25 = v24 + 38L;
v26 = v23 >>> v25;
v27 = 1L ^ v24;
v28 = v20 + v27;
v29 = v23 & 274877906943L;
v30 = v29 cmp 274877906943L;
if v30 == 0 goto label06;
v31 = v23 & 274877906943L;
v32 = v31 cmp 0L;
if v32 != 0 goto label07;
v33 = v26 & 3L;
v34 = v33 cmp 1L;
if v34 != 0 goto label07;
label06:
return #NaNF;
label07:
v35 = v26 + 1L;
v36 = v35 >>> 1;
v37 = v36 cmp 16777216L;
if v37 < 0 goto label08;
v36 = 8388608L;
v28 = v28 - 1;
label08:
v38 = v36 & -8388609L;
v39 = v19 - v28;
v40 = v39 cmp 1L;
if v40 < 0 goto label09;
v41 = v39 cmp 254L;
if v41 <= 0 goto label10;
label09:
return #NaNF;
label10:
v42 = v39 << 23;
v43 = v38 | v42;
if v0 == 0 goto label11;
v44 = 2147483648L;
goto label12;
label11:
v44 = 0L;
label12:
v45 = v43 | v44;
v46 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>(v45);
return v46;
}
static void <clinit>()
{
float[] v0;
v0 = newarray (float)[11];
v0[0] = 1.0F;
v0[1] = 10.0F;
v0[2] = 100.0F;
v0[3] = 1000.0F;
v0[4] = 10000.0F;
v0[5] = 100000.0F;
v0[6] = 1000000.0F;
v0[7] = 1.0E7F;
v0[8] = 1.0E8F;
v0[9] = 1.0E9F;
v0[10] = 1.0E10F;
<com.fasterxml.jackson.core.io.doubleparser.FastFloatMath: float[] FLOAT_POWER_OF_TEN> = v0;
return;
}
}