class com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence extends com.fasterxml.jackson.core.io.doubleparser.AbstractNumberParser
{
public static final int MAX_INPUT_LENGTH;
private static final int MAX_DECIMAL_DIGITS;
private static final int MAX_HEX_DIGITS;
void <init>()
{
com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence v0;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence;
specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.AbstractNumberParser: void <init>()>();
return;
}
public java.math.BigInteger parseBigIntegerLiteral(java.lang.CharSequence, int, int, int) throws java.lang.NumberFormatException
{
com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence v0;
int v2, v3, v4, v5, v6, v8;
java.lang.ArithmeticException v19;
java.math.BigInteger v14, v15, v16;
java.lang.String v18;
boolean v10, v11;
java.lang.CharSequence v1, v17;
char v12, v9;
java.lang.NumberFormatException v13, v20;
java.lang.IllegalArgumentException v7;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: int;
label01:
v5 = v2 + v3;
if v2 < 0 goto label02;
if v5 < v2 goto label02;
v6 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
if v5 > v6 goto label02;
if v3 <= 1292782622 goto label03;
label02:
v7 = new java.lang.IllegalArgumentException;
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("offset < 0 or length > str.length");
throw v7;
label03:
v8 = v2;
v9 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v2);
if v9 != 45 goto label04;
v10 = 1;
goto label05;
label04:
v10 = 0;
label05:
v11 = v10;
if v10 != 0 goto label06;
if v9 != 43 goto label07;
label06:
v8 = v2 + 1;
v12 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence: char charAt(java.lang.CharSequence,int,int)>(v1, v8, v5);
if v12 != 0 goto label07;
v13 = new java.lang.NumberFormatException;
specialinvoke v13.<java.lang.NumberFormatException: void <init>(java.lang.String)>("illegal syntax");
throw v13;
label07:
lookupswitch(v4)
{
case 10: goto label08;
case 16: goto label10;
default: goto label12;
};
label08:
v14 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence: java.math.BigInteger parseDecDigits(java.lang.CharSequence,int,int,boolean)>(v1, v8, v5, v11);
label09:
return v14;
label10:
v15 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence: java.math.BigInteger parseHexDigits(java.lang.CharSequence,int,int,boolean)>(v1, v8, v5, v11);
label11:
return v15;
label12:
v16 = new java.math.BigInteger;
v17 = interfaceinvoke v1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(v2, v3);
v18 = virtualinvoke v17.<java.lang.Object: java.lang.String toString()>();
specialinvoke v16.<java.math.BigInteger: void <init>(java.lang.String,int)>(v18, v4);
label13:
return v16;
label14:
v19 := @caughtexception;
v20 = new java.lang.NumberFormatException;
specialinvoke v20.<java.lang.NumberFormatException: void <init>(java.lang.String)>("value exceeds limits");
virtualinvoke v20.<java.lang.NumberFormatException: java.lang.Throwable initCause(java.lang.Throwable)>(v19);
throw v20;
catch java.lang.ArithmeticException from label01 to label09 with label14;
catch java.lang.ArithmeticException from label10 to label11 with label14;
catch java.lang.ArithmeticException from label12 to label13 with label14;
}
private java.math.BigInteger parseDecDigits(java.lang.CharSequence, int, int, boolean)
{
long v17, v19;
com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence v0;
byte v10;
int v13, v14, v2, v3, v5, v7, v8, v9;
java.math.BigInteger v20, v6;
boolean v11, v12, v15, v16, v4;
java.lang.CharSequence v1;
java.lang.NumberFormatException v18;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 = v3 - v2;
if v5 <= 18 goto label01;
v6 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence: java.math.BigInteger parseManyDecDigits(java.lang.CharSequence,int,int,boolean)>(v1, v2, v3, v4);
return v6;
label01:
v7 = v5 & 7;
v8 = v2 + v7;
v9 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: int tryToParseUpTo7Digits(java.lang.CharSequence,int,int)>(v1, v2, v8);
v10 = v9 cmp 0L;
if v10 < 0 goto label02;
v11 = 1;
goto label03;
label02:
v11 = 0;
label03:
v12 = v11;
v13 = v8;
label04:
if v13 >= v3 goto label07;
v14 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: int tryToParseEightDigits(java.lang.CharSequence,int)>(v1, v13);
v15 = v12;
if v14 < 0 goto label05;
v16 = 1;
goto label06;
label05:
v16 = 0;
label06:
v12 = v15 & v16;
v17 = v9 * 100000000L;
v9 = v17 + v14;
v13 = v13 + 8;
goto label04;
label07:
if v12 != 0 goto label08;
v18 = new java.lang.NumberFormatException;
specialinvoke v18.<java.lang.NumberFormatException: void <init>(java.lang.String)>("illegal syntax");
throw v18;
label08:
if v4 == 0 goto label09;
v19 = neg v9;
goto label10;
label09:
v19 = v9;
label10:
v20 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(v19);
return v20;
}
private java.math.BigInteger parseHexDigits(java.lang.CharSequence, int, int, boolean)
{
byte[] v12;
com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence v0;
byte v35;
java.math.BigInteger v38, v39, v7;
boolean v14, v19, v31, v32, v34, v36, v4;
java.lang.CharSequence v1;
long v33;
int v10, v11, v13, v15, v16, v18, v2, v20, v21, v22, v24, v26, v27, v28, v29, v3, v30, v5, v6, v9;
char v17, v23, v25;
java.lang.NumberFormatException v37, v8;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence: int skipZeroes(java.lang.CharSequence,int,int)>(v1, v2, v3);
v6 = v3 - v5;
if v6 > 0 goto label01;
v7 = <java.math.BigInteger: java.math.BigInteger ZERO>;
return v7;
label01:
if v6 <= 536870912 goto label02;
v8 = new java.lang.NumberFormatException;
specialinvoke v8.<java.lang.NumberFormatException: void <init>(java.lang.String)>("value exceeds limits");
throw v8;
label02:
v9 = v6 + 1;
v10 = v9 >> 1;
v11 = v10 + 1;
v12 = newarray (byte)[v11];
v13 = 1;
v14 = 0;
v15 = v6 & 1;
if v15 == 0 goto label05;
v16 = v5;
v5 = v5 + 1;
v17 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v16);
v18 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence: int lookupHex(char)>(v17);
v13 = 2;
v12[1] = v18;
if v18 >= 0 goto label03;
v19 = 1;
goto label04;
label03:
v19 = 0;
label04:
v14 = v19;
label05:
v20 = v3 - v5;
v21 = v20 & 7;
v22 = v5 + v21;
label06:
if v5 >= v22 goto label10;
v23 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v5);
v24 = v5 + 1;
v25 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v24);
v26 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence: int lookupHex(char)>(v23);
v27 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence: int lookupHex(char)>(v25);
v28 = v13;
v13 = v13 + 1;
v29 = v26 << 4;
v30 = v29 | v27;
v12[v28] = v30;
v31 = v14;
if v27 < 0 goto label07;
if v26 >= 0 goto label08;
label07:
v32 = 1;
goto label09;
label08:
v32 = 0;
label09:
v14 = v31 | v32;
v5 = v5 + 2;
goto label06;
label10:
if v5 >= v3 goto label13;
v33 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: long tryToParseEightHexDigits(java.lang.CharSequence,int)>(v1, v5);
staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: void writeIntBE(byte[],int,int)>(v12, v13, v33);
v34 = v14;
v35 = v33 cmp 0L;
if v35 >= 0 goto label11;
v36 = 1;
goto label12;
label11:
v36 = 0;
label12:
v14 = v34 | v36;
v5 = v5 + 8;
v13 = v13 + 4;
goto label10;
label13:
if v14 == 0 goto label14;
v37 = new java.lang.NumberFormatException;
specialinvoke v37.<java.lang.NumberFormatException: void <init>(java.lang.String)>("illegal syntax");
throw v37;
label14:
v38 = new java.math.BigInteger;
specialinvoke v38.<java.math.BigInteger: void <init>(byte[])>(v12);
if v4 == 0 goto label15;
v39 = virtualinvoke v38.<java.math.BigInteger: java.math.BigInteger negate()>();
goto label16;
label15:
v39 = v38;
label16:
return v39;
}
private java.math.BigInteger parseManyDecDigits(java.lang.CharSequence, int, int, boolean)
{
java.lang.CharSequence v1;
java.lang.NumberFormatException v7;
java.util.NavigableMap v8;
com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence v0;
int v2, v3, v5, v6;
java.math.BigInteger v10, v9;
boolean v4;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence: int skipZeroes(java.lang.CharSequence,int,int)>(v1, v2, v3);
v6 = v3 - v5;
if v6 <= 646456993 goto label1;
v7 = new java.lang.NumberFormatException;
specialinvoke v7.<java.lang.NumberFormatException: void <init>(java.lang.String)>("value exceeds limits");
throw v7;
label1:
v8 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastIntegerMath: java.util.NavigableMap fillPowersOf10Floor16(int,int)>(v5, v3);
v9 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.ParseDigitsTaskCharSequence: java.math.BigInteger parseDigitsRecursive(java.lang.CharSequence,int,int,java.util.Map)>(v1, v5, v3, v8);
if v4 == 0 goto label2;
v10 = virtualinvoke v9.<java.math.BigInteger: java.math.BigInteger negate()>();
goto label3;
label2:
v10 = v9;
label3:
return v10;
}
private int skipZeroes(java.lang.CharSequence, int, int)
{
java.lang.CharSequence v1;
int v2, v3;
char v4;
com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence v0;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 := @parameter2: int;
label1:
if v2 >= v3 goto label2;
v4 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v2);
if v4 != 48 goto label2;
v2 = v2 + 1;
goto label1;
label2:
return v2;
}
}