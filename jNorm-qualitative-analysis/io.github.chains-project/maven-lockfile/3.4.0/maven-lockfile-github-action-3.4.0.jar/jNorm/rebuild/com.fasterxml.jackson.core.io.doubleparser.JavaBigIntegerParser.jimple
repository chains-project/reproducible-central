public class com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerParser extends java.lang.Object
{
private static final com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromByteArray BYTE_ARRAY_PARSER;
private static final com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharArray CHAR_ARRAY_PARSER;
private static final com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence CHAR_SEQUENCE_PARSER;
private void <init>()
{
com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerParser v0;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerParser;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.math.BigInteger parseBigInteger(java.lang.CharSequence)
{
java.lang.CharSequence v0;
int v2;
java.math.BigInteger v3;
com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence v1;
v0 := @parameter0: java.lang.CharSequence;
v1 = <com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerParser: com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence CHAR_SEQUENCE_PARSER>;
v2 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v3 = virtualinvoke v1.<com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence: java.math.BigInteger parseBigIntegerLiteral(java.lang.CharSequence,int,int,int)>(v0, 0, v2, 10);
return v3;
}
public static java.math.BigInteger parseBigInteger(java.lang.CharSequence, int)
{
java.lang.CharSequence v0;
int v1, v3;
java.math.BigInteger v4;
com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence v2;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: int;
v2 = <com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerParser: com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence CHAR_SEQUENCE_PARSER>;
v3 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v4 = virtualinvoke v2.<com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence: java.math.BigInteger parseBigIntegerLiteral(java.lang.CharSequence,int,int,int)>(v0, 0, v3, v1);
return v4;
}
public static java.math.BigInteger parseBigInteger(java.lang.CharSequence, int, int)
{
java.lang.CharSequence v0;
int v1, v2;
java.math.BigInteger v4;
com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence v3;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = <com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerParser: com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence CHAR_SEQUENCE_PARSER>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence: java.math.BigInteger parseBigIntegerLiteral(java.lang.CharSequence,int,int,int)>(v0, v1, v2, 10);
return v4;
}
public static java.math.BigInteger parseBigInteger(java.lang.CharSequence, int, int, int)
{
java.lang.CharSequence v0;
int v1, v2, v3;
java.math.BigInteger v5;
com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence v4;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 = <com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerParser: com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence CHAR_SEQUENCE_PARSER>;
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence: java.math.BigInteger parseBigIntegerLiteral(java.lang.CharSequence,int,int,int)>(v0, v1, v2, v3);
return v5;
}
public static java.math.BigInteger parseBigInteger(byte[])
{
byte[] v0;
int v2;
com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromByteArray v1;
java.math.BigInteger v3;
v0 := @parameter0: byte[];
v1 = <com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerParser: com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromByteArray BYTE_ARRAY_PARSER>;
v2 = lengthof v0;
v3 = virtualinvoke v1.<com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromByteArray: java.math.BigInteger parseBigIntegerLiteral(byte[],int,int,int)>(v0, 0, v2, 10);
return v3;
}
public static java.math.BigInteger parseBigInteger(byte[], int)
{
byte[] v0;
int v1, v3;
com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromByteArray v2;
java.math.BigInteger v4;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 = <com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerParser: com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromByteArray BYTE_ARRAY_PARSER>;
v3 = lengthof v0;
v4 = virtualinvoke v2.<com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromByteArray: java.math.BigInteger parseBigIntegerLiteral(byte[],int,int,int)>(v0, 0, v3, v1);
return v4;
}
public static java.math.BigInteger parseBigInteger(byte[], int, int)
{
byte[] v0;
int v1, v2;
com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromByteArray v3;
java.math.BigInteger v4;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = <com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerParser: com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromByteArray BYTE_ARRAY_PARSER>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromByteArray: java.math.BigInteger parseBigIntegerLiteral(byte[],int,int,int)>(v0, v1, v2, 10);
return v4;
}
public static java.math.BigInteger parseBigInteger(byte[], int, int, int)
{
byte[] v0;
int v1, v2, v3;
com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromByteArray v4;
java.math.BigInteger v5;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 = <com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerParser: com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromByteArray BYTE_ARRAY_PARSER>;
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromByteArray: java.math.BigInteger parseBigIntegerLiteral(byte[],int,int,int)>(v0, v1, v2, v3);
return v5;
}
public static java.math.BigInteger parseBigInteger(char[])
{
com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharArray v1;
int v2;
char[] v0;
java.math.BigInteger v3;
v0 := @parameter0: char[];
v1 = <com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerParser: com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharArray CHAR_ARRAY_PARSER>;
v2 = lengthof v0;
v3 = virtualinvoke v1.<com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharArray: java.math.BigInteger parseBigIntegerLiteral(char[],int,int,int)>(v0, 0, v2, 10);
return v3;
}
public static java.math.BigInteger parseBigInteger(char[], int)
{
com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharArray v2;
int v1, v3;
char[] v0;
java.math.BigInteger v4;
v0 := @parameter0: char[];
v1 := @parameter1: int;
v2 = <com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerParser: com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharArray CHAR_ARRAY_PARSER>;
v3 = lengthof v0;
v4 = virtualinvoke v2.<com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharArray: java.math.BigInteger parseBigIntegerLiteral(char[],int,int,int)>(v0, 0, v3, v1);
return v4;
}
public static java.math.BigInteger parseBigInteger(char[], int, int)
{
com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharArray v3;
int v1, v2;
char[] v0;
java.math.BigInteger v4;
v0 := @parameter0: char[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = <com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerParser: com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharArray CHAR_ARRAY_PARSER>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharArray: java.math.BigInteger parseBigIntegerLiteral(char[],int,int,int)>(v0, v1, v2, 10);
return v4;
}
public static java.math.BigInteger parseBigInteger(char[], int, int, int)
{
com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharArray v4;
int v1, v2, v3;
char[] v0;
java.math.BigInteger v5;
v0 := @parameter0: char[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 = <com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerParser: com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharArray CHAR_ARRAY_PARSER>;
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharArray: java.math.BigInteger parseBigIntegerLiteral(char[],int,int,int)>(v0, v1, v2, v3);
return v5;
}
static void <clinit>()
{
com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharArray v1;
com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromByteArray v0;
com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence v2;
v0 = new com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromByteArray;
specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromByteArray: void <init>()>();
<com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerParser: com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromByteArray BYTE_ARRAY_PARSER> = v0;
v1 = new com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharArray;
specialinvoke v1.<com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharArray: void <init>()>();
<com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerParser: com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharArray CHAR_ARRAY_PARSER> = v1;
v2 = new com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence;
specialinvoke v2.<com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence: void <init>()>();
<com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerParser: com.fasterxml.jackson.core.io.doubleparser.JavaBigIntegerFromCharSequence CHAR_SEQUENCE_PARSER> = v2;
return;
}
}