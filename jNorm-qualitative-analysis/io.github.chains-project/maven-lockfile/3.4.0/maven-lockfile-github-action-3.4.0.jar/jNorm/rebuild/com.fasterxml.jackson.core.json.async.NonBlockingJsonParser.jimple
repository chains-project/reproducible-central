public class com.fasterxml.jackson.core.json.async.NonBlockingJsonParser extends com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase implements com.fasterxml.jackson.core.async.ByteArrayFeeder
{
private byte[] _inputBuffer;
public void <init>(com.fasterxml.jackson.core.io.IOContext, int, com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)
{
byte[] v4;
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer v3;
com.fasterxml.jackson.core.io.IOContext v1;
int v2;
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.io.IOContext;
v2 := @parameter1: int;
v3 := @parameter2: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
specialinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingUtf8JsonParserBase: void <init>(com.fasterxml.jackson.core.io.IOContext,int,com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer)>(v1, v2, v3);
v4 = <com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: byte[] NO_BYTES>;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: byte[] _inputBuffer> = v4;
return;
}
public com.fasterxml.jackson.core.async.ByteArrayFeeder getNonBlockingInputFeeder()
{
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParser;
return v0;
}
public void feedInput(byte[], int, int) throws java.io.IOException
{
byte[] v1;
long v13, v15;
java.lang.Integer v10, v11, v9;
int v14, v16, v17, v18, v19, v2, v20, v3, v4, v5, v6, v7, v8;
boolean v12;
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParser;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: int _inputPtr>;
v5 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: int _inputEnd>;
if v4 >= v5 goto label1;
v6 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: int _inputEnd>;
v7 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: int _inputPtr>;
v8 = v6 - v7;
v9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v8);
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: void _reportError(java.lang.String,java.lang.Object)>("Still have %d undecoded bytes, should not call \'feedInput\'", v9);
label1:
if v3 >= v2 goto label2;
v10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v3);
v11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v2);
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: void _reportError(java.lang.String,java.lang.Object,java.lang.Object)>("Input end (%d) may not be before start (%d)", v10, v11);
label2:
v12 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: boolean _endOfInput>;
if v12 == 0 goto label3;
virtualinvoke v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: void _reportError(java.lang.String)>("Already closed, can not feed more input");
label3:
v13 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: long _currInputProcessed>;
v14 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: int _origBufferLen>;
v15 = v13 + v14;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: long _currInputProcessed> = v15;
v16 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: int _inputEnd>;
v17 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: int _currInputRowStart>;
v18 = v16 - v17;
v19 = v2 - v18;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: int _currInputRowStart> = v19;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: int _currBufferStart> = v2;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: byte[] _inputBuffer> = v1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: int _inputPtr> = v2;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: int _inputEnd> = v3;
v20 = v3 - v2;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: int _origBufferLen> = v20;
return;
}
public int releaseBuffered(java.io.OutputStream) throws java.io.IOException
{
java.io.OutputStream v1;
byte[] v5;
int v2, v3, v4, v6;
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParser;
v1 := @parameter0: java.io.OutputStream;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: int _inputEnd>;
v3 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: int _inputPtr>;
v4 = v2 - v3;
if v4 <= 0 goto label1;
v5 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: byte[] _inputBuffer>;
v6 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: int _inputPtr>;
virtualinvoke v1.<java.io.OutputStream: void write(byte[],int,int)>(v5, v6, v4);
label1:
return v4;
}
protected byte getNextSignedByteFromBuffer()
{
byte[] v1;
byte v4;
int v2, v3;
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: byte[] _inputBuffer>;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: int _inputPtr>;
v3 = v2 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: int _inputPtr> = v3;
v4 = v1[v2];
return v4;
}
protected int getNextUnsignedByteFromBuffer()
{
byte[] v1;
short v5;
byte v4;
int v2, v3;
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: byte[] _inputBuffer>;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: int _inputPtr>;
v3 = v2 + 1;
v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: int _inputPtr> = v3;
v4 = v1[v2];
v5 = v4 & 255;
return v5;
}
protected byte getByteFromBuffer(int)
{
byte[] v2;
byte v3;
int v1;
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.async.NonBlockingJsonParser;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.json.async.NonBlockingJsonParser: byte[] _inputBuffer>;
v3 = v2[v1];
return v3;
}
}