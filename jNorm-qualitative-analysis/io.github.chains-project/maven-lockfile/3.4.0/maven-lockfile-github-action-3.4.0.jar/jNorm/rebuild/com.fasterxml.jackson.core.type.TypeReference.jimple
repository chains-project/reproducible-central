public abstract class com.fasterxml.jackson.core.type.TypeReference extends java.lang.Object implements java.lang.Comparable
{
protected final java.lang.reflect.Type _type;
protected void <init>()
{
java.lang.reflect.Type v2, v6;
java.lang.reflect.Type[] v5;
java.lang.Class v1;
com.fasterxml.jackson.core.type.TypeReference v0;
java.lang.IllegalArgumentException v4;
boolean v3;
v0 := @this: com.fasterxml.jackson.core.type.TypeReference;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v2 = virtualinvoke v1.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();
v3 = v2 instanceof java.lang.Class;
if v3 == 0 goto label1;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Internal error: TypeReference constructed without actual type information");
throw v4;
label1:
v5 = interfaceinvoke v2.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v6 = v5[0];
v0.<com.fasterxml.jackson.core.type.TypeReference: java.lang.reflect.Type _type> = v6;
return;
}
public java.lang.reflect.Type getType()
{
com.fasterxml.jackson.core.type.TypeReference v0;
java.lang.reflect.Type v1;
v0 := @this: com.fasterxml.jackson.core.type.TypeReference;
v1 = v0.<com.fasterxml.jackson.core.type.TypeReference: java.lang.reflect.Type _type>;
return v1;
}
public int compareTo(com.fasterxml.jackson.core.type.TypeReference)
{
com.fasterxml.jackson.core.type.TypeReference v0, v1;
v0 := @this: com.fasterxml.jackson.core.type.TypeReference;
v1 := @parameter0: com.fasterxml.jackson.core.type.TypeReference;
return 0;
}
}