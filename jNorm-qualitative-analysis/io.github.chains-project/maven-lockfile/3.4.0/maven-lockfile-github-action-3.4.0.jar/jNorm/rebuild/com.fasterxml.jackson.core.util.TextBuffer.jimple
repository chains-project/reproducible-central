public class com.fasterxml.jackson.core.util.TextBuffer extends java.lang.Object
{
static final char[] NO_CHARS;
static final int MIN_SEGMENT_LEN;
static final int MAX_SEGMENT_LEN;
private final com.fasterxml.jackson.core.util.BufferRecycler _allocator;
private char[] _inputBuffer;
private int _inputStart;
private int _inputLen;
private java.util.ArrayList _segments;
private boolean _hasSegments;
private int _segmentSize;
private char[] _currentSegment;
private int _currentSize;
private java.lang.String _resultString;
private char[] _resultArray;
public void <init>(com.fasterxml.jackson.core.util.BufferRecycler)
{
com.fasterxml.jackson.core.util.TextBuffer v0;
com.fasterxml.jackson.core.util.BufferRecycler v1;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 := @parameter0: com.fasterxml.jackson.core.util.BufferRecycler;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<com.fasterxml.jackson.core.util.TextBuffer: com.fasterxml.jackson.core.util.BufferRecycler _allocator> = v1;
return;
}
protected void <init>(com.fasterxml.jackson.core.util.BufferRecycler, char[])
{
int v3, v4;
char[] v2;
com.fasterxml.jackson.core.util.TextBuffer v0;
com.fasterxml.jackson.core.util.BufferRecycler v1;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 := @parameter0: com.fasterxml.jackson.core.util.BufferRecycler;
v2 := @parameter1: char[];
specialinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void <init>(com.fasterxml.jackson.core.util.BufferRecycler)>(v1);
v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment> = v2;
v3 = lengthof v2;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize> = v3;
v4 = (int) -1;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputStart> = v4;
return;
}
public static com.fasterxml.jackson.core.util.TextBuffer fromInitial(char[])
{
char[] v0;
com.fasterxml.jackson.core.util.TextBuffer v1;
v0 := @parameter0: char[];
v1 = new com.fasterxml.jackson.core.util.TextBuffer;
specialinvoke v1.<com.fasterxml.jackson.core.util.TextBuffer: void <init>(com.fasterxml.jackson.core.util.BufferRecycler,char[])>(null, v0);
return v1;
}
public void releaseBuffers()
{
int v1;
char[] v4, v5;
com.fasterxml.jackson.core.util.TextBuffer v0;
com.fasterxml.jackson.core.util.BufferRecycler v3, v6;
boolean v2;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 = (int) -1;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputStart> = v1;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize> = 0;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputLen> = 0;
v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _inputBuffer> = null;
v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _resultArray> = null;
v2 = v0.<com.fasterxml.jackson.core.util.TextBuffer: boolean _hasSegments>;
if v2 == 0 goto label1;
specialinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void clearSegments()>();
label1:
v3 = v0.<com.fasterxml.jackson.core.util.TextBuffer: com.fasterxml.jackson.core.util.BufferRecycler _allocator>;
if v3 == null goto label2;
v4 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
if v4 == null goto label2;
v5 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment> = null;
v6 = v0.<com.fasterxml.jackson.core.util.TextBuffer: com.fasterxml.jackson.core.util.BufferRecycler _allocator>;
virtualinvoke v6.<com.fasterxml.jackson.core.util.BufferRecycler: void releaseCharBuffer(int,char[])>(2, v5);
label2:
return;
}
public void resetWithEmpty()
{
int v1;
com.fasterxml.jackson.core.util.TextBuffer v0;
boolean v2;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 = (int) -1;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputStart> = v1;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize> = 0;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputLen> = 0;
v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _inputBuffer> = null;
v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String _resultString> = null;
v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _resultArray> = null;
v2 = v0.<com.fasterxml.jackson.core.util.TextBuffer: boolean _hasSegments>;
if v2 == 0 goto label1;
specialinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void clearSegments()>();
label1:
return;
}
public void resetWith(char)
{
int v2;
char[] v4, v5, v6;
char v1;
com.fasterxml.jackson.core.util.TextBuffer v0;
boolean v3;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 := @parameter0: char;
v2 = (int) -1;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputStart> = v2;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputLen> = 0;
v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String _resultString> = null;
v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _resultArray> = null;
v3 = v0.<com.fasterxml.jackson.core.util.TextBuffer: boolean _hasSegments>;
if v3 == 0 goto label1;
specialinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void clearSegments()>();
goto label2;
label1:
v4 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
if v4 != null goto label2;
v5 = specialinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] buf(int)>(1);
v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment> = v5;
label2:
v6 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
v6[0] = v1;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _segmentSize> = 1;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize> = 1;
return;
}
public void resetWithShared(char[], int, int)
{
int v2, v3;
char[] v1;
com.fasterxml.jackson.core.util.TextBuffer v0;
boolean v4;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String _resultString> = null;
v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _resultArray> = null;
v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _inputBuffer> = v1;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputStart> = v2;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputLen> = v3;
v4 = v0.<com.fasterxml.jackson.core.util.TextBuffer: boolean _hasSegments>;
if v4 == 0 goto label1;
specialinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void clearSegments()>();
label1:
return;
}
public void resetWithCopy(char[], int, int) throws java.io.IOException
{
com.fasterxml.jackson.core.util.TextBuffer v0;
int v2, v3, v4;
char[] v1, v6, v7;
boolean v5;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _inputBuffer> = null;
v4 = (int) -1;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputStart> = v4;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputLen> = 0;
v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String _resultString> = null;
v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _resultArray> = null;
v5 = v0.<com.fasterxml.jackson.core.util.TextBuffer: boolean _hasSegments>;
if v5 == 0 goto label1;
specialinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void clearSegments()>();
goto label2;
label1:
v6 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
if v6 != null goto label2;
v7 = specialinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] buf(int)>(v3);
v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment> = v7;
label2:
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _segmentSize> = 0;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize> = 0;
virtualinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void append(char[],int,int)>(v1, v2, v3);
return;
}
public void resetWithCopy(java.lang.String, int, int) throws java.io.IOException
{
com.fasterxml.jackson.core.util.TextBuffer v0;
int v2, v3, v4;
char[] v6, v7;
java.lang.String v1;
boolean v5;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: int;
v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _inputBuffer> = null;
v4 = (int) -1;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputStart> = v4;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputLen> = 0;
v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String _resultString> = null;
v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _resultArray> = null;
v5 = v0.<com.fasterxml.jackson.core.util.TextBuffer: boolean _hasSegments>;
if v5 == 0 goto label1;
specialinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void clearSegments()>();
goto label2;
label1:
v6 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
if v6 != null goto label2;
v7 = specialinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] buf(int)>(v3);
v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment> = v7;
label2:
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _segmentSize> = 0;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize> = 0;
virtualinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void append(java.lang.String,int,int)>(v1, v2, v3);
return;
}
public void resetWithString(java.lang.String) throws java.io.IOException
{
int v2, v3;
java.lang.String v1;
com.fasterxml.jackson.core.util.TextBuffer v0;
boolean v4;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 := @parameter0: java.lang.String;
v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _inputBuffer> = null;
v2 = (int) -1;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputStart> = v2;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputLen> = 0;
v3 = virtualinvoke v1.<java.lang.String: int length()>();
virtualinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void validateStringLength(int)>(v3);
v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String _resultString> = v1;
v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _resultArray> = null;
v4 = v0.<com.fasterxml.jackson.core.util.TextBuffer: boolean _hasSegments>;
if v4 == 0 goto label1;
specialinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void clearSegments()>();
label1:
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize> = 0;
return;
}
public char[] getBufferWithoutReset()
{
char[] v1;
com.fasterxml.jackson.core.util.TextBuffer v0;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
return v1;
}
private char[] buf(int)
{
int v1, v5;
char[] v4, v6;
com.fasterxml.jackson.core.util.TextBuffer v0;
com.fasterxml.jackson.core.util.BufferRecycler v2, v3;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.util.TextBuffer: com.fasterxml.jackson.core.util.BufferRecycler _allocator>;
if v2 == null goto label1;
v3 = v0.<com.fasterxml.jackson.core.util.TextBuffer: com.fasterxml.jackson.core.util.BufferRecycler _allocator>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.util.BufferRecycler: char[] allocCharBuffer(int,int)>(2, v1);
return v4;
label1:
v5 = staticinvoke <java.lang.Math: int max(int,int)>(v1, 500);
v6 = newarray (char)[v5];
return v6;
}
private void clearSegments()
{
com.fasterxml.jackson.core.util.TextBuffer v0;
java.util.ArrayList v1;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v0.<com.fasterxml.jackson.core.util.TextBuffer: boolean _hasSegments> = 0;
v1 = v0.<com.fasterxml.jackson.core.util.TextBuffer: java.util.ArrayList _segments>;
virtualinvoke v1.<java.util.ArrayList: void clear()>();
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _segmentSize> = 0;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize> = 0;
return;
}
public int size()
{
com.fasterxml.jackson.core.util.TextBuffer v0;
int v1, v10, v11, v2, v5, v8, v9;
char[] v3, v4;
java.lang.String v6, v7;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputStart>;
if v1 < 0 goto label1;
v2 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputLen>;
return v2;
label1:
v3 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _resultArray>;
if v3 == null goto label2;
v4 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _resultArray>;
v5 = lengthof v4;
return v5;
label2:
v6 = v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String _resultString>;
if v6 == null goto label3;
v7 = v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String _resultString>;
v8 = virtualinvoke v7.<java.lang.String: int length()>();
return v8;
label3:
v9 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _segmentSize>;
v10 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize>;
v11 = v9 + v10;
return v11;
}
public int getTextOffset()
{
int v1, v2;
com.fasterxml.jackson.core.util.TextBuffer v0;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputStart>;
if v1 < 0 goto label1;
v2 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputStart>;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public boolean hasTextAsCharacters()
{
int v1;
char[] v2;
java.lang.String v3;
com.fasterxml.jackson.core.util.TextBuffer v0;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputStart>;
if v1 >= 0 goto label1;
v2 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _resultArray>;
if v2 == null goto label2;
label1:
return 1;
label2:
v3 = v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String _resultString>;
if v3 == null goto label3;
return 0;
label3:
return 1;
}
public char[] getTextBuffer() throws java.io.IOException
{
com.fasterxml.jackson.core.util.TextBuffer v0;
int v1;
char[] v10, v11, v2, v3, v4, v7, v9;
java.lang.String v5, v6;
boolean v8;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputStart>;
if v1 < 0 goto label1;
v2 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _inputBuffer>;
return v2;
label1:
v3 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _resultArray>;
if v3 == null goto label2;
v4 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _resultArray>;
return v4;
label2:
v5 = v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String _resultString>;
if v5 == null goto label3;
v6 = v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String _resultString>;
v7 = virtualinvoke v6.<java.lang.String: char[] toCharArray()>();
v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _resultArray> = v7;
return v7;
label3:
v8 = v0.<com.fasterxml.jackson.core.util.TextBuffer: boolean _hasSegments>;
if v8 != 0 goto label6;
v9 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
if v9 != null goto label4;
v10 = <com.fasterxml.jackson.core.util.TextBuffer: char[] NO_CHARS>;
goto label5;
label4:
v10 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
label5:
return v10;
label6:
v11 = virtualinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] contentsAsArray()>();
return v11;
}
public java.lang.String contentsAsString() throws java.io.IOException
{
java.util.ArrayList v18, v20, v22;
int v10, v11, v12, v13, v16, v19, v21, v24, v26, v5, v6, v7;
java.lang.String v1, v14, v27, v28, v3, v8;
com.fasterxml.jackson.core.util.TextBuffer v0;
char[] v15, v2, v25, v4, v9;
java.lang.Object v23;
java.lang.StringBuilder v17;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 = v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String _resultString>;
if v1 != null goto label9;
v2 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _resultArray>;
if v2 == null goto label1;
v3 = new java.lang.String;
v4 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _resultArray>;
specialinvoke v3.<java.lang.String: void <init>(char[])>(v4);
v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String _resultString> = v3;
goto label9;
label1:
v5 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputStart>;
if v5 < 0 goto label3;
v6 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputLen>;
if v6 >= 1 goto label2;
v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String _resultString> = "";
return "";
label2:
v7 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputLen>;
virtualinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void validateStringLength(int)>(v7);
v8 = new java.lang.String;
v9 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _inputBuffer>;
v10 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputStart>;
v11 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputLen>;
specialinvoke v8.<java.lang.String: void <init>(char[],int,int)>(v9, v10, v11);
v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String _resultString> = v8;
goto label9;
label3:
v12 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _segmentSize>;
v13 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize>;
if v12 != 0 goto label5;
if v13 != 0 goto label4;
v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String _resultString> = "";
goto label9;
label4:
virtualinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void validateStringLength(int)>(v13);
v14 = new java.lang.String;
v15 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
specialinvoke v14.<java.lang.String: void <init>(char[],int,int)>(v15, 0, v13);
v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String _resultString> = v14;
goto label9;
label5:
v16 = v12 + v13;
if v16 >= 0 goto label6;
virtualinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void _reportBufferOverflow(int,int)>(v12, v13);
label6:
virtualinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void validateStringLength(int)>(v16);
v17 = new java.lang.StringBuilder;
specialinvoke v17.<java.lang.StringBuilder: void <init>(int)>(v16);
v18 = v0.<com.fasterxml.jackson.core.util.TextBuffer: java.util.ArrayList _segments>;
if v18 == null goto label8;
v19 = 0;
v20 = v0.<com.fasterxml.jackson.core.util.TextBuffer: java.util.ArrayList _segments>;
v21 = virtualinvoke v20.<java.util.ArrayList: int size()>();
label7:
if v19 >= v21 goto label8;
v22 = v0.<com.fasterxml.jackson.core.util.TextBuffer: java.util.ArrayList _segments>;
v23 = virtualinvoke v22.<java.util.ArrayList: java.lang.Object get(int)>(v19);
v24 = lengthof v23;
virtualinvoke v17.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(v23, 0, v24);
v19 = v19 + 1;
goto label7;
label8:
v25 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
v26 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize>;
virtualinvoke v17.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(v25, 0, v26);
v27 = virtualinvoke v17.<java.lang.StringBuilder: java.lang.String toString()>();
v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String _resultString> = v27;
label9:
v28 = v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String _resultString>;
return v28;
}
public char[] contentsAsArray() throws java.io.IOException
{
char[] v1, v2;
com.fasterxml.jackson.core.util.TextBuffer v0;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _resultArray>;
if v1 != null goto label1;
v2 = specialinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] resultArray()>();
v1 = v2;
v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _resultArray> = v2;
label1:
return v1;
}
public double contentsAsDouble(boolean) throws java.lang.NumberFormatException
{
java.io.IOException v4;
java.lang.NumberFormatException v5;
java.lang.String v2, v6;
com.fasterxml.jackson.core.util.TextBuffer v0;
boolean v1;
double v3;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 := @parameter0: boolean;
label1:
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();
v3 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: double parseDouble(java.lang.String,boolean)>(v2, v1);
label2:
return v3;
label3:
v4 := @caughtexception;
v5 = new java.lang.NumberFormatException;
v6 = virtualinvoke v4.<java.io.IOException: java.lang.String getMessage()>();
specialinvoke v5.<java.lang.NumberFormatException: void <init>(java.lang.String)>(v6);
throw v5;
catch java.io.IOException from label1 to label2 with label3;
}
public double contentsAsDouble() throws java.lang.NumberFormatException
{
com.fasterxml.jackson.core.util.TextBuffer v0;
double v1;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: double contentsAsDouble(boolean)>(0);
return v1;
}
public float contentsAsFloat() throws java.lang.NumberFormatException
{
float v1;
com.fasterxml.jackson.core.util.TextBuffer v0;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: float contentsAsFloat(boolean)>(0);
return v1;
}
public float contentsAsFloat(boolean) throws java.lang.NumberFormatException
{
float v3;
java.io.IOException v4;
java.lang.NumberFormatException v5;
java.lang.String v2, v6;
com.fasterxml.jackson.core.util.TextBuffer v0;
boolean v1;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 := @parameter0: boolean;
label1:
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();
v3 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: float parseFloat(java.lang.String,boolean)>(v2, v1);
label2:
return v3;
label3:
v4 := @caughtexception;
v5 = new java.lang.NumberFormatException;
v6 = virtualinvoke v4.<java.io.IOException: java.lang.String getMessage()>();
specialinvoke v5.<java.lang.NumberFormatException: void <init>(java.lang.String)>(v6);
throw v5;
catch java.io.IOException from label1 to label2 with label3;
}
public java.math.BigDecimal contentsAsDecimal() throws java.lang.NumberFormatException
{
java.math.BigDecimal v2;
char[] v1;
java.io.IOException v3;
java.lang.NumberFormatException v4;
java.lang.String v5;
com.fasterxml.jackson.core.util.TextBuffer v0;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
label1:
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] contentsAsArray()>();
v2 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: java.math.BigDecimal parseBigDecimal(char[])>(v1);
label2:
return v2;
label3:
v3 := @caughtexception;
v4 = new java.lang.NumberFormatException;
v5 = virtualinvoke v3.<java.io.IOException: java.lang.String getMessage()>();
specialinvoke v4.<java.lang.NumberFormatException: void <init>(java.lang.String)>(v5);
throw v4;
catch java.io.IOException from label1 to label2 with label3;
}
public int contentsAsInt(boolean)
{
int v10, v12, v13, v14, v16, v17, v18, v19, v2, v21, v22, v5, v6, v7, v8, v9;
boolean v1;
com.fasterxml.jackson.core.util.TextBuffer v0;
char[] v11, v15, v20, v3, v4;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 := @parameter0: boolean;
v2 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputStart>;
if v2 < 0 goto label2;
v3 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _inputBuffer>;
if v3 == null goto label2;
if v1 == 0 goto label1;
v4 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _inputBuffer>;
v5 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputStart>;
v6 = v5 + 1;
v7 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputLen>;
v8 = v7 - 1;
v9 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: int parseInt(char[],int,int)>(v4, v6, v8);
v10 = neg v9;
return v10;
label1:
v11 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _inputBuffer>;
v12 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputStart>;
v13 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputLen>;
v14 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: int parseInt(char[],int,int)>(v11, v12, v13);
return v14;
label2:
if v1 == 0 goto label3;
v15 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
v16 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize>;
v17 = v16 - 1;
v18 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: int parseInt(char[],int,int)>(v15, 1, v17);
v19 = neg v18;
return v19;
label3:
v20 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
v21 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize>;
v22 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: int parseInt(char[],int,int)>(v20, 0, v21);
return v22;
}
public long contentsAsLong(boolean)
{
long v10, v14, v18, v19, v22, v9;
int v12, v13, v16, v17, v2, v21, v5, v6, v7, v8;
boolean v1;
com.fasterxml.jackson.core.util.TextBuffer v0;
char[] v11, v15, v20, v3, v4;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 := @parameter0: boolean;
v2 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputStart>;
if v2 < 0 goto label2;
v3 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _inputBuffer>;
if v3 == null goto label2;
if v1 == 0 goto label1;
v4 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _inputBuffer>;
v5 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputStart>;
v6 = v5 + 1;
v7 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputLen>;
v8 = v7 - 1;
v9 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: long parseLong(char[],int,int)>(v4, v6, v8);
v10 = neg v9;
return v10;
label1:
v11 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _inputBuffer>;
v12 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputStart>;
v13 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputLen>;
v14 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: long parseLong(char[],int,int)>(v11, v12, v13);
return v14;
label2:
if v1 == 0 goto label3;
v15 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
v16 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize>;
v17 = v16 - 1;
v18 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: long parseLong(char[],int,int)>(v15, 1, v17);
v19 = neg v18;
return v19;
label3:
v20 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
v21 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize>;
v22 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: long parseLong(char[],int,int)>(v20, 0, v21);
return v22;
}
public int contentsToWriter(java.io.Writer) throws java.io.IOException
{
java.util.ArrayList v15, v17, v19;
int v10, v11, v13, v14, v16, v18, v21, v22, v5, v9;
java.lang.String v6, v7, v8;
com.fasterxml.jackson.core.util.TextBuffer v0;
java.io.Writer v1;
char[] v12, v2, v23, v3, v4;
java.lang.Object v20;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 := @parameter0: java.io.Writer;
v2 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _resultArray>;
if v2 == null goto label1;
v3 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _resultArray>;
virtualinvoke v1.<java.io.Writer: void write(char[])>(v3);
v4 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _resultArray>;
v5 = lengthof v4;
return v5;
label1:
v6 = v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String _resultString>;
if v6 == null goto label2;
v7 = v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String _resultString>;
virtualinvoke v1.<java.io.Writer: void write(java.lang.String)>(v7);
v8 = v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String _resultString>;
v9 = virtualinvoke v8.<java.lang.String: int length()>();
return v9;
label2:
v10 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputStart>;
if v10 < 0 goto label4;
v11 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputLen>;
if v11 <= 0 goto label3;
v12 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _inputBuffer>;
v13 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputStart>;
virtualinvoke v1.<java.io.Writer: void write(char[],int,int)>(v12, v13, v11);
label3:
return v11;
label4:
v14 = 0;
v15 = v0.<com.fasterxml.jackson.core.util.TextBuffer: java.util.ArrayList _segments>;
if v15 == null goto label6;
v16 = 0;
v17 = v0.<com.fasterxml.jackson.core.util.TextBuffer: java.util.ArrayList _segments>;
v18 = virtualinvoke v17.<java.util.ArrayList: int size()>();
label5:
if v16 >= v18 goto label6;
v19 = v0.<com.fasterxml.jackson.core.util.TextBuffer: java.util.ArrayList _segments>;
v20 = virtualinvoke v19.<java.util.ArrayList: java.lang.Object get(int)>(v16);
v21 = lengthof v20;
v14 = v14 + v21;
virtualinvoke v1.<java.io.Writer: void write(char[],int,int)>(v20, 0, v21);
v16 = v16 + 1;
goto label5;
label6:
v22 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize>;
if v22 <= 0 goto label7;
v14 = v14 + v22;
v23 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
virtualinvoke v1.<java.io.Writer: void write(char[],int,int)>(v23, 0, v22);
label7:
return v14;
}
public void ensureNotShared()
{
int v1;
com.fasterxml.jackson.core.util.TextBuffer v0;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputStart>;
if v1 < 0 goto label1;
specialinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void unshare(int)>(16);
label1:
return;
}
public void append(char) throws java.io.IOException
{
char v1;
com.fasterxml.jackson.core.util.TextBuffer v0;
int v2, v4, v5, v6, v7;
char[] v3;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 := @parameter0: char;
v2 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputStart>;
if v2 < 0 goto label1;
specialinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void unshare(int)>(16);
label1:
v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String _resultString> = null;
v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _resultArray> = null;
v3 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
v4 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize>;
v5 = lengthof v3;
if v4 < v5 goto label2;
specialinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void validateAppend(int)>(1);
specialinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void expand()>();
v3 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
label2:
v6 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize>;
v7 = v6 + 1;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize> = v7;
v3[v6] = v1;
return;
}
public void append(char[], int, int) throws java.io.IOException
{
int v10, v11, v12, v14, v15, v17, v18, v2, v3, v4, v6, v7, v8, v9;
com.fasterxml.jackson.core.util.TextBuffer v0;
char[] v1, v13, v16, v5;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputStart>;
if v4 < 0 goto label1;
specialinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void unshare(int)>(v3);
label1:
v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String _resultString> = null;
v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _resultArray> = null;
v5 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
v6 = lengthof v5;
v7 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize>;
v8 = v6 - v7;
if v8 < v3 goto label2;
v9 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize>;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, v2, v5, v9, v3);
v10 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize>;
v11 = v10 + v3;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize> = v11;
return;
label2:
specialinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void validateAppend(int)>(v3);
if v8 <= 0 goto label3;
v12 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize>;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, v2, v5, v12, v8);
v2 = v2 + v8;
v3 = v3 - v8;
label3:
specialinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void expand()>();
v13 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
v14 = lengthof v13;
v15 = staticinvoke <java.lang.Math: int min(int,int)>(v14, v3);
v16 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, v2, v16, 0, v15);
v17 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize>;
v18 = v17 + v15;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize> = v18;
v2 = v2 + v15;
v3 = v3 - v15;
if v3 > 0 goto label3;
return;
}
public void append(java.lang.String, int, int) throws java.io.IOException
{
int v10, v11, v12, v13, v14, v16, v17, v18, v2, v20, v21, v3, v4, v6, v7, v8, v9;
java.lang.String v1;
com.fasterxml.jackson.core.util.TextBuffer v0;
char[] v15, v19, v5;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputStart>;
if v4 < 0 goto label1;
specialinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void unshare(int)>(v3);
label1:
v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String _resultString> = null;
v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _resultArray> = null;
v5 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
v6 = lengthof v5;
v7 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize>;
v8 = v6 - v7;
if v8 < v3 goto label2;
v9 = v2 + v3;
v10 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize>;
virtualinvoke v1.<java.lang.String: void getChars(int,int,char[],int)>(v2, v9, v5, v10);
v11 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize>;
v12 = v11 + v3;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize> = v12;
return;
label2:
specialinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void validateAppend(int)>(v3);
if v8 <= 0 goto label3;
v13 = v2 + v8;
v14 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize>;
virtualinvoke v1.<java.lang.String: void getChars(int,int,char[],int)>(v2, v13, v5, v14);
v3 = v3 - v8;
v2 = v2 + v8;
label3:
specialinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void expand()>();
v15 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
v16 = lengthof v15;
v17 = staticinvoke <java.lang.Math: int min(int,int)>(v16, v3);
v18 = v2 + v17;
v19 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
virtualinvoke v1.<java.lang.String: void getChars(int,int,char[],int)>(v2, v18, v19, 0);
v20 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize>;
v21 = v20 + v17;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize> = v21;
v2 = v2 + v17;
v3 = v3 - v17;
if v3 > 0 goto label3;
return;
}
private void validateAppend(int) throws java.io.IOException
{
int v1, v2, v3, v4, v5;
com.fasterxml.jackson.core.util.TextBuffer v0;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _segmentSize>;
v3 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize>;
v4 = v2 + v3;
v5 = v4 + v1;
if v5 >= 0 goto label1;
v5 = 2147483647;
label1:
virtualinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void validateStringLength(int)>(v5);
return;
}
public char[] getCurrentSegment()
{
int v1, v4, v5;
char[] v2, v3, v6;
com.fasterxml.jackson.core.util.TextBuffer v0;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputStart>;
if v1 < 0 goto label1;
specialinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void unshare(int)>(1);
goto label3;
label1:
v2 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
if v2 != null goto label2;
v3 = specialinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] buf(int)>(0);
v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment> = v3;
goto label3;
label2:
v4 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize>;
v5 = lengthof v2;
if v4 < v5 goto label3;
specialinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void expand()>();
label3:
v6 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
return v6;
}
public char[] emptyAndGetCurrentSegment()
{
int v1;
char[] v3, v4;
com.fasterxml.jackson.core.util.TextBuffer v0;
boolean v2;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 = (int) -1;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputStart> = v1;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize> = 0;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputLen> = 0;
v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _inputBuffer> = null;
v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String _resultString> = null;
v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _resultArray> = null;
v2 = v0.<com.fasterxml.jackson.core.util.TextBuffer: boolean _hasSegments>;
if v2 == 0 goto label1;
specialinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void clearSegments()>();
label1:
v3 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
if v3 != null goto label2;
v4 = specialinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] buf(int)>(0);
v3 = v4;
v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment> = v4;
label2:
return v3;
}
public int getCurrentSegmentSize()
{
int v1;
com.fasterxml.jackson.core.util.TextBuffer v0;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize>;
return v1;
}
public void setCurrentLength(int)
{
int v1;
com.fasterxml.jackson.core.util.TextBuffer v0;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 := @parameter0: int;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize> = v1;
return;
}
public java.lang.String setCurrentAndReturn(int) throws java.io.IOException
{
int v1, v2, v4;
char[] v6;
java.lang.String v3, v5;
com.fasterxml.jackson.core.util.TextBuffer v0;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 := @parameter0: int;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize> = v1;
v2 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _segmentSize>;
if v2 <= 0 goto label1;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();
return v3;
label1:
v4 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize>;
virtualinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void validateStringLength(int)>(v4);
if v4 != 0 goto label2;
v5 = "";
goto label3;
label2:
v5 = new java.lang.String;
v6 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
specialinvoke v5.<java.lang.String: void <init>(char[],int,int)>(v6, 0, v4);
label3:
v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String _resultString> = v5;
return v5;
}
public char[] finishCurrentSegment() throws java.io.IOException
{
java.util.ArrayList v1, v2, v3;
int v10, v11, v12, v13, v14, v6, v7, v8, v9;
com.fasterxml.jackson.core.util.TextBuffer v0;
char[] v15, v4, v5;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 = v0.<com.fasterxml.jackson.core.util.TextBuffer: java.util.ArrayList _segments>;
if v1 != null goto label1;
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
v0.<com.fasterxml.jackson.core.util.TextBuffer: java.util.ArrayList _segments> = v2;
label1:
v0.<com.fasterxml.jackson.core.util.TextBuffer: boolean _hasSegments> = 1;
v3 = v0.<com.fasterxml.jackson.core.util.TextBuffer: java.util.ArrayList _segments>;
v4 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
virtualinvoke v3.<java.util.ArrayList: boolean add(java.lang.Object)>(v4);
v5 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
v6 = lengthof v5;
v7 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _segmentSize>;
v8 = v7 + v6;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _segmentSize> = v8;
v9 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _segmentSize>;
if v9 >= 0 goto label2;
v10 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _segmentSize>;
v11 = v10 - v6;
virtualinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void _reportBufferOverflow(int,int)>(v11, v6);
label2:
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize> = 0;
v12 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _segmentSize>;
virtualinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void validateStringLength(int)>(v12);
v13 = v6 >> 1;
v14 = v6 + v13;
if v14 >= 500 goto label3;
v14 = 500;
goto label4;
label3:
if v14 <= 65536 goto label4;
v14 = 65536;
label4:
v15 = specialinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] carr(int)>(v14);
v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment> = v15;
return v15;
}
public java.lang.String finishAndReturn(int, boolean) throws java.io.IOException
{
char v5;
com.fasterxml.jackson.core.util.TextBuffer v0;
int v1, v3;
char[] v4;
java.lang.String v6, v7;
boolean v2;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 := @parameter0: int;
v2 := @parameter1: boolean;
if v2 == 0 goto label2;
v3 = v1 - 1;
if v3 < 0 goto label1;
v4 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
v5 = v4[v3];
if v5 > 32 goto label2;
label1:
v6 = specialinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String _doTrim(int)>(v3);
return v6;
label2:
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize> = v1;
v7 = virtualinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();
return v7;
}
private java.lang.String _doTrim(int) throws java.io.IOException
{
java.util.ArrayList v10, v6, v7, v9;
int v1, v11, v12, v4;
java.lang.String v15, v5;
boolean v8;
char v3;
com.fasterxml.jackson.core.util.TextBuffer v0;
char[] v14, v2;
java.lang.Object v13;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 := @parameter0: int;
label1:
v2 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
label2:
v1 = v1 - 1;
if v1 < 0 goto label3;
v3 = v2[v1];
if v3 <= 32 goto label2;
v4 = v1 + 1;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize> = v4;
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();
return v5;
label3:
v6 = v0.<com.fasterxml.jackson.core.util.TextBuffer: java.util.ArrayList _segments>;
if v6 == null goto label4;
v7 = v0.<com.fasterxml.jackson.core.util.TextBuffer: java.util.ArrayList _segments>;
v8 = virtualinvoke v7.<java.util.ArrayList: boolean isEmpty()>();
if v8 != 0 goto label4;
v9 = v0.<com.fasterxml.jackson.core.util.TextBuffer: java.util.ArrayList _segments>;
v10 = v0.<com.fasterxml.jackson.core.util.TextBuffer: java.util.ArrayList _segments>;
v11 = virtualinvoke v10.<java.util.ArrayList: int size()>();
v12 = v11 - 1;
v13 = virtualinvoke v9.<java.util.ArrayList: java.lang.Object remove(int)>(v12);
v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment> = v13;
v14 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
v1 = lengthof v14;
goto label1;
label4:
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize> = 0;
v0.<com.fasterxml.jackson.core.util.TextBuffer: boolean _hasSegments> = 0;
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();
return v15;
}
public char[] expandCurrentSegment()
{
int v2, v3, v4, v5;
char[] v1, v6;
com.fasterxml.jackson.core.util.TextBuffer v0;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
v2 = lengthof v1;
v3 = v2 >> 1;
v4 = v2 + v3;
if v4 <= 65536 goto label1;
v5 = v2 >> 2;
v4 = v2 + v5;
label1:
v6 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(v1, v4);
v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment> = v6;
return v6;
}
public char[] expandCurrentSegment(int)
{
int v1, v3;
char[] v2, v4;
com.fasterxml.jackson.core.util.TextBuffer v0;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
v3 = lengthof v2;
if v3 < v1 goto label1;
return v2;
label1:
v4 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(v2, v1);
v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment> = v4;
return v4;
}
public java.lang.String toString()
{
java.io.IOException v2;
java.lang.String v1;
com.fasterxml.jackson.core.util.TextBuffer v0;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
label1:
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();
label2:
return v1;
label3:
v2 := @caughtexception;
return "TextBuffer: Exception when reading contents";
catch java.io.IOException from label1 to label2 with label3;
}
private void unshare(int)
{
com.fasterxml.jackson.core.util.TextBuffer v0;
int v1, v2, v4, v5, v6, v9;
char[] v10, v11, v3, v7, v8;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputLen>;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputLen> = 0;
v3 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _inputBuffer>;
v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _inputBuffer> = null;
v4 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputStart>;
v5 = (int) -1;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputStart> = v5;
v6 = v2 + v1;
v7 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
if v7 == null goto label1;
v8 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
v9 = lengthof v8;
if v6 <= v9 goto label2;
label1:
v10 = specialinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] buf(int)>(v6);
v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment> = v10;
label2:
if v2 <= 0 goto label3;
v11 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v3, v4, v11, 0, v2);
label3:
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _segmentSize> = 0;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize> = v2;
return;
}
private void expand()
{
java.util.ArrayList v1, v2, v4;
int v10, v11, v12, v13, v14, v15, v5, v6, v7, v8, v9;
com.fasterxml.jackson.core.util.TextBuffer v0;
char[] v16, v3;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 = v0.<com.fasterxml.jackson.core.util.TextBuffer: java.util.ArrayList _segments>;
if v1 != null goto label1;
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
v0.<com.fasterxml.jackson.core.util.TextBuffer: java.util.ArrayList _segments> = v2;
label1:
v3 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
v0.<com.fasterxml.jackson.core.util.TextBuffer: boolean _hasSegments> = 1;
v4 = v0.<com.fasterxml.jackson.core.util.TextBuffer: java.util.ArrayList _segments>;
virtualinvoke v4.<java.util.ArrayList: boolean add(java.lang.Object)>(v3);
v5 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _segmentSize>;
v6 = lengthof v3;
v7 = v5 + v6;
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _segmentSize> = v7;
v8 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _segmentSize>;
if v8 >= 0 goto label2;
v9 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _segmentSize>;
v10 = lengthof v3;
v11 = v9 - v10;
v12 = lengthof v3;
virtualinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void _reportBufferOverflow(int,int)>(v11, v12);
label2:
v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize> = 0;
v13 = lengthof v3;
v14 = v13 >> 1;
v15 = v13 + v14;
if v15 >= 500 goto label3;
v15 = 500;
goto label4;
label3:
if v15 <= 65536 goto label4;
v15 = 65536;
label4:
v16 = specialinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] carr(int)>(v15);
v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment> = v16;
return;
}
private char[] resultArray() throws java.io.IOException
{
java.util.ArrayList v19, v21, v23;
int v11, v13, v14, v15, v17, v20, v22, v25, v27, v4, v5, v7;
java.lang.String v1, v2;
com.fasterxml.jackson.core.util.TextBuffer v0;
char[] v10, v12, v16, v18, v26, v3, v6, v8, v9;
java.lang.Object v24;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 = v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String _resultString>;
if v1 == null goto label1;
v2 = v0.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String _resultString>;
v3 = virtualinvoke v2.<java.lang.String: char[] toCharArray()>();
return v3;
label1:
v4 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputStart>;
if v4 < 0 goto label4;
v5 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputLen>;
if v5 >= 1 goto label2;
v6 = <com.fasterxml.jackson.core.util.TextBuffer: char[] NO_CHARS>;
return v6;
label2:
virtualinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void validateStringLength(int)>(v5);
v7 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _inputStart>;
if v7 != 0 goto label3;
v8 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _inputBuffer>;
v9 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(v8, v5);
return v9;
label3:
v10 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _inputBuffer>;
v11 = v7 + v5;
v12 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>(v10, v7, v11);
return v12;
label4:
v13 = virtualinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: int size()>();
if v13 >= 1 goto label6;
if v13 >= 0 goto label5;
v14 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _segmentSize>;
v15 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize>;
virtualinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void _reportBufferOverflow(int,int)>(v14, v15);
label5:
v16 = <com.fasterxml.jackson.core.util.TextBuffer: char[] NO_CHARS>;
return v16;
label6:
virtualinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: void validateStringLength(int)>(v13);
v17 = 0;
v18 = specialinvoke v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] carr(int)>(v13);
v19 = v0.<com.fasterxml.jackson.core.util.TextBuffer: java.util.ArrayList _segments>;
if v19 == null goto label8;
v20 = 0;
v21 = v0.<com.fasterxml.jackson.core.util.TextBuffer: java.util.ArrayList _segments>;
v22 = virtualinvoke v21.<java.util.ArrayList: int size()>();
label7:
if v20 >= v22 goto label8;
v23 = v0.<com.fasterxml.jackson.core.util.TextBuffer: java.util.ArrayList _segments>;
v24 = virtualinvoke v23.<java.util.ArrayList: java.lang.Object get(int)>(v20);
v25 = lengthof v24;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v24, 0, v18, v17, v25);
v17 = v17 + v25;
v20 = v20 + 1;
goto label7;
label8:
v26 = v0.<com.fasterxml.jackson.core.util.TextBuffer: char[] _currentSegment>;
v27 = v0.<com.fasterxml.jackson.core.util.TextBuffer: int _currentSize>;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v26, 0, v18, v17, v27);
return v18;
}
private char[] carr(int)
{
int v1;
char[] v2;
com.fasterxml.jackson.core.util.TextBuffer v0;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 := @parameter0: int;
v2 = newarray (char)[v1];
return v2;
}
protected void _reportBufferOverflow(int, int)
{
java.lang.IllegalStateException v4;
int v1, v2;
long v3;
java.lang.String v5;
com.fasterxml.jackson.core.util.TextBuffer v0;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v1 + v2;
v4 = new java.lang.IllegalStateException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("TextBuffer overrun: size reached (\u0001) exceeds maximum of 2147483647");
specialinvoke v4.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v5);
throw v4;
}
protected void validateStringLength(int) throws java.io.IOException
{
int v1;
com.fasterxml.jackson.core.util.TextBuffer v0;
v0 := @this: com.fasterxml.jackson.core.util.TextBuffer;
v1 := @parameter0: int;
return;
}
static void <clinit>()
{
char[] v0;
v0 = newarray (char)[0];
<com.fasterxml.jackson.core.util.TextBuffer: char[] NO_CHARS> = v0;
return;
}
}