public abstract class com.fasterxml.jackson.databind.DatabindContext extends java.lang.Object
{
private static final int MAX_ERROR_STR_LEN;
public void <init>()
{
com.fasterxml.jackson.databind.DatabindContext v0;
v0 := @this: com.fasterxml.jackson.databind.DatabindContext;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public abstract com.fasterxml.jackson.databind.cfg.MapperConfig getConfig();
public abstract com.fasterxml.jackson.databind.AnnotationIntrospector getAnnotationIntrospector();
public abstract boolean isEnabled(com.fasterxml.jackson.databind.MapperFeature);
public abstract boolean isEnabled(com.fasterxml.jackson.databind.cfg.DatatypeFeature);
public abstract com.fasterxml.jackson.databind.cfg.DatatypeFeatures getDatatypeFeatures();
public abstract boolean canOverrideAccessModifiers();
public abstract java.lang.Class getActiveView();
public abstract java.util.Locale getLocale();
public abstract java.util.TimeZone getTimeZone();
public abstract com.fasterxml.jackson.'annotation'.JsonFormat$Value getDefaultPropertyFormat(java.lang.Class);
public abstract java.lang.Object getAttribute(java.lang.Object);
public abstract com.fasterxml.jackson.databind.DatabindContext setAttribute(java.lang.Object, java.lang.Object);
public com.fasterxml.jackson.databind.JavaType constructType(java.lang.reflect.Type)
{
com.fasterxml.jackson.databind.type.TypeFactory v2;
java.lang.reflect.Type v1;
com.fasterxml.jackson.databind.JavaType v3;
com.fasterxml.jackson.databind.DatabindContext v0;
v0 := @this: com.fasterxml.jackson.databind.DatabindContext;
v1 := @parameter0: java.lang.reflect.Type;
if v1 != null goto label1;
return null;
label1:
v2 = virtualinvoke v0.<com.fasterxml.jackson.databind.DatabindContext: com.fasterxml.jackson.databind.type.TypeFactory getTypeFactory()>();
v3 = virtualinvoke v2.<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType constructType(java.lang.reflect.Type)>(v1);
return v3;
}
public abstract com.fasterxml.jackson.databind.JavaType constructSpecializedType(com.fasterxml.jackson.databind.JavaType, java.lang.Class);
public com.fasterxml.jackson.databind.JavaType resolveSubType(com.fasterxml.jackson.databind.JavaType, java.lang.String) throws com.fasterxml.jackson.databind.JsonMappingException
{
java.lang.Object[] v12;
com.fasterxml.jackson.databind.DatabindContext v0;
com.fasterxml.jackson.databind.type.TypeFactory v19, v4, v8;
int v3;
com.fasterxml.jackson.databind.JavaType v1, v20, v5;
java.lang.String v14, v15, v16, v2;
boolean v18, v7;
java.lang.Exception v11;
java.lang.Class v13, v6, v9;
java.lang.ClassNotFoundException v10;
com.fasterxml.jackson.databind.JsonMappingException v17, v21;
v0 := @this: com.fasterxml.jackson.databind.DatabindContext;
v1 := @parameter0: com.fasterxml.jackson.databind.JavaType;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v2.<java.lang.String: int indexOf(int)>(60);
if v3 <= 0 goto label1;
v4 = virtualinvoke v0.<com.fasterxml.jackson.databind.DatabindContext: com.fasterxml.jackson.databind.type.TypeFactory getTypeFactory()>();
v5 = virtualinvoke v4.<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType constructFromCanonical(java.lang.String)>(v2);
v6 = virtualinvoke v1.<com.fasterxml.jackson.databind.JavaType: java.lang.Class getRawClass()>();
v7 = virtualinvoke v5.<com.fasterxml.jackson.databind.JavaType: boolean isTypeOrSubTypeOf(java.lang.Class)>(v6);
if v7 == 0 goto label6;
return v5;
label1:
v8 = virtualinvoke v0.<com.fasterxml.jackson.databind.DatabindContext: com.fasterxml.jackson.databind.type.TypeFactory getTypeFactory()>();
v9 = virtualinvoke v8.<com.fasterxml.jackson.databind.type.TypeFactory: java.lang.Class findClass(java.lang.String)>(v2);
label2:
goto label5;
label3:
v10 := @caughtexception;
return null;
label4:
v11 := @caughtexception;
v12 = newarray (java.lang.Object)[2];
v13 = virtualinvoke v11.<java.lang.Object: java.lang.Class getClass()>();
v14 = virtualinvoke v13.<java.lang.Class: java.lang.String getName()>();
v12[0] = v14;
v15 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String exceptionMessage(java.lang.Throwable)>(v11);
v12[1] = v15;
v16 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("problem: (%s) %s", v12);
v17 = virtualinvoke v0.<com.fasterxml.jackson.databind.DatabindContext: com.fasterxml.jackson.databind.JsonMappingException invalidTypeIdException(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.String)>(v1, v2, v16);
throw v17;
label5:
v18 = virtualinvoke v1.<com.fasterxml.jackson.databind.JavaType: boolean isTypeOrSuperTypeOf(java.lang.Class)>(v9);
if v18 == 0 goto label6;
v19 = virtualinvoke v0.<com.fasterxml.jackson.databind.DatabindContext: com.fasterxml.jackson.databind.type.TypeFactory getTypeFactory()>();
v20 = virtualinvoke v19.<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class)>(v1, v9);
return v20;
label6:
v21 = virtualinvoke v0.<com.fasterxml.jackson.databind.DatabindContext: com.fasterxml.jackson.databind.JsonMappingException invalidTypeIdException(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.String)>(v1, v2, "Not a subtype");
throw v21;
catch java.lang.ClassNotFoundException from label1 to label2 with label3;
catch java.lang.Exception from label1 to label2 with label4;
}
public com.fasterxml.jackson.databind.JavaType resolveAndValidateSubType(com.fasterxml.jackson.databind.JavaType, java.lang.String, com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator) throws com.fasterxml.jackson.databind.JsonMappingException
{
java.lang.Object[] v14;
com.fasterxml.jackson.databind.DatabindContext v0;
com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator v3;
com.fasterxml.jackson.databind.type.TypeFactory v10, v22;
int v4;
com.fasterxml.jackson.databind.JavaType v1, v23, v5;
java.lang.String v16, v17, v18, v2;
boolean v20;
com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity v24, v25, v26, v7, v8;
java.lang.Exception v13;
com.fasterxml.jackson.databind.cfg.MapperConfig v6;
java.lang.Class v11, v15;
java.lang.ClassNotFoundException v12;
java.lang.Object v21, v27, v9;
com.fasterxml.jackson.databind.JsonMappingException v19;
v0 := @this: com.fasterxml.jackson.databind.DatabindContext;
v1 := @parameter0: com.fasterxml.jackson.databind.JavaType;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;
v4 = virtualinvoke v2.<java.lang.String: int indexOf(int)>(60);
if v4 <= 0 goto label1;
v5 = specialinvoke v0.<com.fasterxml.jackson.databind.DatabindContext: com.fasterxml.jackson.databind.JavaType _resolveAndValidateGeneric(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator,int)>(v1, v2, v3, v4);
return v5;
label1:
v6 = virtualinvoke v0.<com.fasterxml.jackson.databind.DatabindContext: com.fasterxml.jackson.databind.cfg.MapperConfig getConfig()>();
v7 = virtualinvoke v3.<com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity validateSubClassName(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,java.lang.String)>(v6, v1, v2);
v8 = <com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity DENIED>;
if v7 != v8 goto label2;
v9 = virtualinvoke v0.<com.fasterxml.jackson.databind.DatabindContext: java.lang.Object _throwSubtypeNameNotAllowed(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)>(v1, v2, v3);
return v9;
label2:
v10 = virtualinvoke v0.<com.fasterxml.jackson.databind.DatabindContext: com.fasterxml.jackson.databind.type.TypeFactory getTypeFactory()>();
v11 = virtualinvoke v10.<com.fasterxml.jackson.databind.type.TypeFactory: java.lang.Class findClass(java.lang.String)>(v2);
label3:
goto label6;
label4:
v12 := @caughtexception;
return null;
label5:
v13 := @caughtexception;
v14 = newarray (java.lang.Object)[2];
v15 = virtualinvoke v13.<java.lang.Object: java.lang.Class getClass()>();
v16 = virtualinvoke v15.<java.lang.Class: java.lang.String getName()>();
v14[0] = v16;
v17 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String exceptionMessage(java.lang.Throwable)>(v13);
v14[1] = v17;
v18 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("problem: (%s) %s", v14);
v19 = virtualinvoke v0.<com.fasterxml.jackson.databind.DatabindContext: com.fasterxml.jackson.databind.JsonMappingException invalidTypeIdException(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.String)>(v1, v2, v18);
throw v19;
label6:
v20 = virtualinvoke v1.<com.fasterxml.jackson.databind.JavaType: boolean isTypeOrSuperTypeOf(java.lang.Class)>(v11);
if v20 != 0 goto label7;
v21 = virtualinvoke v0.<com.fasterxml.jackson.databind.DatabindContext: java.lang.Object _throwNotASubtype(com.fasterxml.jackson.databind.JavaType,java.lang.String)>(v1, v2);
return v21;
label7:
v22 = virtualinvoke v6.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.type.TypeFactory getTypeFactory()>();
v23 = virtualinvoke v22.<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class)>(v1, v11);
v24 = <com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity INDETERMINATE>;
if v7 != v24 goto label8;
v25 = virtualinvoke v3.<com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity validateSubType(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)>(v6, v1, v23);
v26 = <com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity ALLOWED>;
if v25 == v26 goto label8;
v27 = virtualinvoke v0.<com.fasterxml.jackson.databind.DatabindContext: java.lang.Object _throwSubtypeClassNotAllowed(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)>(v1, v2, v3);
return v27;
label8:
return v23;
catch java.lang.ClassNotFoundException from label2 to label3 with label4;
catch java.lang.Exception from label2 to label3 with label5;
}
private com.fasterxml.jackson.databind.JavaType _resolveAndValidateGeneric(com.fasterxml.jackson.databind.JavaType, java.lang.String, com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator, int) throws com.fasterxml.jackson.databind.JsonMappingException
{
com.fasterxml.jackson.databind.DatabindContext v0;
com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator v3;
com.fasterxml.jackson.databind.type.TypeFactory v10;
int v4;
com.fasterxml.jackson.databind.JavaType v1, v11;
java.lang.String v2, v6;
boolean v13;
com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity v15, v16, v17, v7, v8;
com.fasterxml.jackson.databind.cfg.MapperConfig v5;
java.lang.Class v12;
java.lang.Object v14, v18, v9;
v0 := @this: com.fasterxml.jackson.databind.DatabindContext;
v1 := @parameter0: com.fasterxml.jackson.databind.JavaType;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;
v4 := @parameter3: int;
v5 = virtualinvoke v0.<com.fasterxml.jackson.databind.DatabindContext: com.fasterxml.jackson.databind.cfg.MapperConfig getConfig()>();
v6 = virtualinvoke v2.<java.lang.String: java.lang.String substring(int,int)>(0, v4);
v7 = virtualinvoke v3.<com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity validateSubClassName(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,java.lang.String)>(v5, v1, v6);
v8 = <com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity DENIED>;
if v7 != v8 goto label1;
v9 = virtualinvoke v0.<com.fasterxml.jackson.databind.DatabindContext: java.lang.Object _throwSubtypeNameNotAllowed(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)>(v1, v2, v3);
return v9;
label1:
v10 = virtualinvoke v0.<com.fasterxml.jackson.databind.DatabindContext: com.fasterxml.jackson.databind.type.TypeFactory getTypeFactory()>();
v11 = virtualinvoke v10.<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType constructFromCanonical(java.lang.String)>(v2);
v12 = virtualinvoke v1.<com.fasterxml.jackson.databind.JavaType: java.lang.Class getRawClass()>();
v13 = virtualinvoke v11.<com.fasterxml.jackson.databind.JavaType: boolean isTypeOrSubTypeOf(java.lang.Class)>(v12);
if v13 != 0 goto label2;
v14 = virtualinvoke v0.<com.fasterxml.jackson.databind.DatabindContext: java.lang.Object _throwNotASubtype(com.fasterxml.jackson.databind.JavaType,java.lang.String)>(v1, v2);
return v14;
label2:
v15 = <com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity ALLOWED>;
if v7 == v15 goto label3;
v16 = virtualinvoke v3.<com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity validateSubType(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)>(v5, v1, v11);
v17 = <com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity ALLOWED>;
if v16 == v17 goto label3;
v18 = virtualinvoke v0.<com.fasterxml.jackson.databind.DatabindContext: java.lang.Object _throwSubtypeClassNotAllowed(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)>(v1, v2, v3);
return v18;
label3:
return v11;
}
protected java.lang.Object _throwNotASubtype(com.fasterxml.jackson.databind.JavaType, java.lang.String) throws com.fasterxml.jackson.databind.JsonMappingException
{
com.fasterxml.jackson.databind.JavaType v1;
com.fasterxml.jackson.databind.JsonMappingException v3;
java.lang.String v2;
com.fasterxml.jackson.databind.DatabindContext v0;
v0 := @this: com.fasterxml.jackson.databind.DatabindContext;
v1 := @parameter0: com.fasterxml.jackson.databind.JavaType;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.DatabindContext: com.fasterxml.jackson.databind.JsonMappingException invalidTypeIdException(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.String)>(v1, v2, "Not a subtype");
throw v3;
}
protected java.lang.Object _throwSubtypeNameNotAllowed(com.fasterxml.jackson.databind.JavaType, java.lang.String, com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator) throws com.fasterxml.jackson.databind.JsonMappingException
{
com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator v3;
com.fasterxml.jackson.databind.JavaType v1;
com.fasterxml.jackson.databind.JsonMappingException v6;
java.lang.String v2, v4, v5;
com.fasterxml.jackson.databind.DatabindContext v0;
v0 := @this: com.fasterxml.jackson.databind.DatabindContext;
v1 := @parameter0: com.fasterxml.jackson.databind.JavaType;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;
v4 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String classNameOf(java.lang.Object)>(v3);
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Configured `PolymorphicTypeValidator` (of type \u0001) denied resolution");
v6 = virtualinvoke v0.<com.fasterxml.jackson.databind.DatabindContext: com.fasterxml.jackson.databind.JsonMappingException invalidTypeIdException(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.String)>(v1, v2, v5);
throw v6;
}
protected java.lang.Object _throwSubtypeClassNotAllowed(com.fasterxml.jackson.databind.JavaType, java.lang.String, com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator) throws com.fasterxml.jackson.databind.JsonMappingException
{
com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator v3;
com.fasterxml.jackson.databind.JavaType v1;
com.fasterxml.jackson.databind.JsonMappingException v6;
java.lang.String v2, v4, v5;
com.fasterxml.jackson.databind.DatabindContext v0;
v0 := @this: com.fasterxml.jackson.databind.DatabindContext;
v1 := @parameter0: com.fasterxml.jackson.databind.JavaType;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;
v4 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String classNameOf(java.lang.Object)>(v3);
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Configured `PolymorphicTypeValidator` (of type \u0001) denied resolution");
v6 = virtualinvoke v0.<com.fasterxml.jackson.databind.DatabindContext: com.fasterxml.jackson.databind.JsonMappingException invalidTypeIdException(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.String)>(v1, v2, v5);
throw v6;
}
protected abstract com.fasterxml.jackson.databind.JsonMappingException invalidTypeIdException(com.fasterxml.jackson.databind.JavaType, java.lang.String, java.lang.String);
public abstract com.fasterxml.jackson.databind.type.TypeFactory getTypeFactory();
public com.fasterxml.jackson.'annotation'.ObjectIdGenerator objectIdGeneratorInstance(com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.introspect.ObjectIdInfo) throws com.fasterxml.jackson.databind.JsonMappingException
{
com.fasterxml.jackson.'annotation'.ObjectIdGenerator v10, v6;
com.fasterxml.jackson.databind.cfg.HandlerInstantiator v5;
com.fasterxml.jackson.databind.DatabindContext v0;
com.fasterxml.jackson.databind.introspect.Annotated v1;
com.fasterxml.jackson.databind.cfg.MapperConfig v4;
java.lang.Class v3, v9;
java.lang.Object v8;
com.fasterxml.jackson.databind.introspect.ObjectIdInfo v2;
boolean v7;
v0 := @this: com.fasterxml.jackson.databind.DatabindContext;
v1 := @parameter0: com.fasterxml.jackson.databind.introspect.Annotated;
v2 := @parameter1: com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
v3 = virtualinvoke v2.<com.fasterxml.jackson.databind.introspect.ObjectIdInfo: java.lang.Class getGeneratorType()>();
v4 = virtualinvoke v0.<com.fasterxml.jackson.databind.DatabindContext: com.fasterxml.jackson.databind.cfg.MapperConfig getConfig()>();
v5 = virtualinvoke v4.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.cfg.HandlerInstantiator getHandlerInstantiator()>();
if v5 != null goto label1;
v6 = null;
goto label2;
label1:
v6 = virtualinvoke v5.<com.fasterxml.jackson.databind.cfg.HandlerInstantiator: com.fasterxml.jackson.'annotation'.ObjectIdGenerator objectIdGeneratorInstance(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Class)>(v4, v1, v3);
label2:
if v6 != null goto label3;
v7 = virtualinvoke v4.<com.fasterxml.jackson.databind.cfg.MapperConfig: boolean canOverrideAccessModifiers()>();
v8 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Object createInstance(java.lang.Class,boolean)>(v3, v7);
label3:
v9 = virtualinvoke v2.<com.fasterxml.jackson.databind.introspect.ObjectIdInfo: java.lang.Class getScope()>();
v10 = virtualinvoke v8.<com.fasterxml.jackson.'annotation'.ObjectIdGenerator: com.fasterxml.jackson.'annotation'.ObjectIdGenerator forScope(java.lang.Class)>(v9);
return v10;
}
public com.fasterxml.jackson.'annotation'.ObjectIdResolver objectIdResolverInstance(com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.introspect.ObjectIdInfo)
{
com.fasterxml.jackson.'annotation'.ObjectIdResolver v6;
com.fasterxml.jackson.databind.cfg.HandlerInstantiator v5;
com.fasterxml.jackson.databind.DatabindContext v0;
com.fasterxml.jackson.databind.introspect.Annotated v1;
com.fasterxml.jackson.databind.cfg.MapperConfig v4;
java.lang.Class v3;
java.lang.Object v8;
com.fasterxml.jackson.databind.introspect.ObjectIdInfo v2;
boolean v7;
v0 := @this: com.fasterxml.jackson.databind.DatabindContext;
v1 := @parameter0: com.fasterxml.jackson.databind.introspect.Annotated;
v2 := @parameter1: com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
v3 = virtualinvoke v2.<com.fasterxml.jackson.databind.introspect.ObjectIdInfo: java.lang.Class getResolverType()>();
v4 = virtualinvoke v0.<com.fasterxml.jackson.databind.DatabindContext: com.fasterxml.jackson.databind.cfg.MapperConfig getConfig()>();
v5 = virtualinvoke v4.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.cfg.HandlerInstantiator getHandlerInstantiator()>();
if v5 != null goto label1;
v6 = null;
goto label2;
label1:
v6 = virtualinvoke v5.<com.fasterxml.jackson.databind.cfg.HandlerInstantiator: com.fasterxml.jackson.'annotation'.ObjectIdResolver resolverIdGeneratorInstance(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Class)>(v4, v1, v3);
label2:
if v6 != null goto label3;
v7 = virtualinvoke v4.<com.fasterxml.jackson.databind.cfg.MapperConfig: boolean canOverrideAccessModifiers()>();
v8 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Object createInstance(java.lang.Class,boolean)>(v3, v7);
label3:
return v8;
}
public com.fasterxml.jackson.databind.util.Converter converterInstance(com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Object) throws com.fasterxml.jackson.databind.JsonMappingException
{
java.lang.IllegalStateException v12, v5;
com.fasterxml.jackson.databind.util.Converter v17;
com.fasterxml.jackson.databind.DatabindContext v0;
java.lang.String v13, v14, v7, v8;
boolean v11, v18, v3, v4, v9;
com.fasterxml.jackson.databind.cfg.HandlerInstantiator v16;
com.fasterxml.jackson.databind.introspect.Annotated v1;
com.fasterxml.jackson.databind.cfg.MapperConfig v15;
java.lang.Class v10, v6;
java.lang.Object v19, v2;
v0 := @this: com.fasterxml.jackson.databind.DatabindContext;
v1 := @parameter0: com.fasterxml.jackson.databind.introspect.Annotated;
v2 := @parameter1: java.lang.Object;
if v2 != null goto label1;
return null;
label1:
v3 = v2 instanceof com.fasterxml.jackson.databind.util.Converter;
if v3 == 0 goto label2;
return v2;
label2:
v4 = v2 instanceof java.lang.Class;
if v4 != 0 goto label3;
v5 = new java.lang.IllegalStateException;
v6 = virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v7 = virtualinvoke v6.<java.lang.Class: java.lang.String getName()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("AnnotationIntrospector returned Converter definition of type \u0001; expected type Converter or Class<Converter> instead");
specialinvoke v5.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v8);
throw v5;
label3:
if v2 == class "Lcom/fasterxml/jackson/databind/util/Converter$None;" goto label4;
v9 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: boolean isBogusClass(java.lang.Class)>(v2);
if v9 == 0 goto label5;
label4:
return null;
label5:
v10 = class "Lcom/fasterxml/jackson/databind/util/Converter;";
v11 = virtualinvoke v10.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v2);
if v11 != 0 goto label6;
v12 = new java.lang.IllegalStateException;
v13 = virtualinvoke v2.<java.lang.Class: java.lang.String getName()>();
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v13) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("AnnotationIntrospector returned Class \u0001; expected Class<Converter>");
specialinvoke v12.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v14);
throw v12;
label6:
v15 = virtualinvoke v0.<com.fasterxml.jackson.databind.DatabindContext: com.fasterxml.jackson.databind.cfg.MapperConfig getConfig()>();
v16 = virtualinvoke v15.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.cfg.HandlerInstantiator getHandlerInstantiator()>();
if v16 != null goto label7;
v17 = null;
goto label8;
label7:
v17 = virtualinvoke v16.<com.fasterxml.jackson.databind.cfg.HandlerInstantiator: com.fasterxml.jackson.databind.util.Converter converterInstance(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Class)>(v15, v1, v2);
label8:
if v17 != null goto label9;
v18 = virtualinvoke v15.<com.fasterxml.jackson.databind.cfg.MapperConfig: boolean canOverrideAccessModifiers()>();
v19 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Object createInstance(java.lang.Class,boolean)>(v2, v18);
label9:
return v19;
}
public abstract java.lang.Object reportBadDefinition(com.fasterxml.jackson.databind.JavaType, java.lang.String) throws com.fasterxml.jackson.databind.JsonMappingException;
public java.lang.Object reportBadDefinition(java.lang.Class, java.lang.String) throws com.fasterxml.jackson.databind.JsonMappingException
{
java.lang.Class v1;
java.lang.Object v4;
com.fasterxml.jackson.databind.JavaType v3;
java.lang.String v2;
com.fasterxml.jackson.databind.DatabindContext v0;
v0 := @this: com.fasterxml.jackson.databind.DatabindContext;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.DatabindContext: com.fasterxml.jackson.databind.JavaType constructType(java.lang.reflect.Type)>(v1);
v4 = virtualinvoke v0.<com.fasterxml.jackson.databind.DatabindContext: java.lang.Object reportBadDefinition(com.fasterxml.jackson.databind.JavaType,java.lang.String)>(v3, v2);
return v4;
}
protected final transient java.lang.String _format(java.lang.String, java.lang.Object[])
{
java.lang.Object[] v2;
int v3;
java.lang.String v1, v4;
com.fasterxml.jackson.databind.DatabindContext v0;
v0 := @this: com.fasterxml.jackson.databind.DatabindContext;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object[];
v3 = lengthof v2;
if v3 <= 0 goto label1;
v4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v1, v2);
return v4;
label1:
return v1;
}
protected final java.lang.String _truncate(java.lang.String)
{
com.fasterxml.jackson.databind.DatabindContext v0;
int v2, v4, v5;
java.lang.String v1, v3, v6, v7;
v0 := @this: com.fasterxml.jackson.databind.DatabindContext;
v1 := @parameter0: java.lang.String;
if v1 != null goto label1;
return "";
label1:
v2 = virtualinvoke v1.<java.lang.String: int length()>();
if v2 > 500 goto label2;
return v1;
label2:
v3 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int,int)>(0, 500);
v4 = virtualinvoke v1.<java.lang.String: int length()>();
v5 = v4 - 500;
v6 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int)>(v5);
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v3, v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001]...[\u0001");
return v7;
}
protected java.lang.String _quotedString(java.lang.String)
{
java.lang.Object[] v2;
java.lang.String v1, v3, v4;
com.fasterxml.jackson.databind.DatabindContext v0;
v0 := @this: com.fasterxml.jackson.databind.DatabindContext;
v1 := @parameter0: java.lang.String;
if v1 != null goto label1;
return "[N/A]";
label1:
v2 = newarray (java.lang.Object)[1];
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.DatabindContext: java.lang.String _truncate(java.lang.String)>(v1);
v2[0] = v3;
v4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\"%s\"", v2);
return v4;
}
protected java.lang.String _colonConcat(java.lang.String, java.lang.String)
{
java.lang.String v1, v2, v3;
com.fasterxml.jackson.databind.DatabindContext v0;
v0 := @this: com.fasterxml.jackson.databind.DatabindContext;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
if v2 != null goto label1;
return v1;
label1:
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v1, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001: \u0001");
return v3;
}
protected java.lang.String _desc(java.lang.String)
{
java.lang.String v1, v2;
com.fasterxml.jackson.databind.DatabindContext v0;
v0 := @this: com.fasterxml.jackson.databind.DatabindContext;
v1 := @parameter0: java.lang.String;
if v1 != null goto label1;
return "[N/A]";
label1:
v2 = virtualinvoke v0.<com.fasterxml.jackson.databind.DatabindContext: java.lang.String _truncate(java.lang.String)>(v1);
return v2;
}
}