public abstract class com.fasterxml.jackson.databind.JsonNode extends com.fasterxml.jackson.databind.JsonSerializable$Base implements com.fasterxml.jackson.core.TreeNode, java.lang.Iterable
{
protected void <init>()
{
com.fasterxml.jackson.databind.JsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
specialinvoke v0.<com.fasterxml.jackson.databind.JsonSerializable$Base: void <init>()>();
return;
}
public abstract com.fasterxml.jackson.databind.JsonNode deepCopy();
public int size()
{
com.fasterxml.jackson.databind.JsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
return 0;
}
public boolean isEmpty()
{
int v1;
com.fasterxml.jackson.databind.JsonNode v0;
boolean v2;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: int size()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public final boolean isValueNode()
{
int[] v1;
int v3, v4;
com.fasterxml.jackson.databind.JsonNode v0;
com.fasterxml.jackson.databind.node.JsonNodeType v2;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 = <com.fasterxml.jackson.databind.JsonNode$1: int[] $SwitchMap$com$fasterxml$jackson$databind$node$JsonNodeType>;
v2 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.node.JsonNodeType getNodeType()>();
v3 = virtualinvoke v2.<com.fasterxml.jackson.databind.node.JsonNodeType: int ordinal()>();
v4 = v1[v3];
tableswitch(v4)
{
case 1: goto label1;
case 2: goto label1;
case 3: goto label1;
default: goto label2;
};
label1:
return 0;
label2:
return 1;
}
public final boolean isContainerNode()
{
com.fasterxml.jackson.databind.JsonNode v0;
boolean v4;
com.fasterxml.jackson.databind.node.JsonNodeType v1, v2, v3;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.node.JsonNodeType getNodeType()>();
v2 = <com.fasterxml.jackson.databind.node.JsonNodeType: com.fasterxml.jackson.databind.node.JsonNodeType OBJECT>;
if v1 == v2 goto label1;
v3 = <com.fasterxml.jackson.databind.node.JsonNodeType: com.fasterxml.jackson.databind.node.JsonNodeType ARRAY>;
if v1 != v3 goto label2;
label1:
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
return v4;
}
public boolean isMissingNode()
{
com.fasterxml.jackson.databind.JsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
return 0;
}
public boolean isArray()
{
com.fasterxml.jackson.databind.JsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
return 0;
}
public boolean isObject()
{
com.fasterxml.jackson.databind.JsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
return 0;
}
public abstract com.fasterxml.jackson.databind.JsonNode get(int);
public com.fasterxml.jackson.databind.JsonNode get(java.lang.String)
{
com.fasterxml.jackson.databind.JsonNode v0;
java.lang.String v1;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 := @parameter0: java.lang.String;
return null;
}
public abstract com.fasterxml.jackson.databind.JsonNode path(java.lang.String);
public abstract com.fasterxml.jackson.databind.JsonNode path(int);
public java.util.Iterator fieldNames()
{
com.fasterxml.jackson.databind.JsonNode v0;
java.util.Iterator v1;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.util.Iterator emptyIterator()>();
return v1;
}
public final com.fasterxml.jackson.databind.JsonNode at(com.fasterxml.jackson.core.JsonPointer)
{
com.fasterxml.jackson.core.JsonPointer v1, v5;
com.fasterxml.jackson.databind.JsonNode v0, v3, v6;
com.fasterxml.jackson.databind.node.MissingNode v4;
boolean v2;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 := @parameter0: com.fasterxml.jackson.core.JsonPointer;
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonPointer: boolean matches()>();
if v2 == 0 goto label1;
return v0;
label1:
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode _at(com.fasterxml.jackson.core.JsonPointer)>(v1);
if v3 != null goto label2;
v4 = staticinvoke <com.fasterxml.jackson.databind.node.MissingNode: com.fasterxml.jackson.databind.node.MissingNode getInstance()>();
return v4;
label2:
v5 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonPointer: com.fasterxml.jackson.core.JsonPointer tail()>();
v6 = virtualinvoke v3.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode at(com.fasterxml.jackson.core.JsonPointer)>(v5);
return v6;
}
public final com.fasterxml.jackson.databind.JsonNode at(java.lang.String)
{
com.fasterxml.jackson.core.JsonPointer v2;
com.fasterxml.jackson.databind.JsonNode v0, v3;
java.lang.String v1;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <com.fasterxml.jackson.core.JsonPointer: com.fasterxml.jackson.core.JsonPointer compile(java.lang.String)>(v1);
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode at(com.fasterxml.jackson.core.JsonPointer)>(v2);
return v3;
}
protected abstract com.fasterxml.jackson.databind.JsonNode _at(com.fasterxml.jackson.core.JsonPointer);
public abstract com.fasterxml.jackson.databind.node.JsonNodeType getNodeType();
public final boolean isPojo()
{
com.fasterxml.jackson.databind.JsonNode v0;
boolean v3;
com.fasterxml.jackson.databind.node.JsonNodeType v1, v2;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.node.JsonNodeType getNodeType()>();
v2 = <com.fasterxml.jackson.databind.node.JsonNodeType: com.fasterxml.jackson.databind.node.JsonNodeType POJO>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public final boolean isNumber()
{
com.fasterxml.jackson.databind.JsonNode v0;
boolean v3;
com.fasterxml.jackson.databind.node.JsonNodeType v1, v2;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.node.JsonNodeType getNodeType()>();
v2 = <com.fasterxml.jackson.databind.node.JsonNodeType: com.fasterxml.jackson.databind.node.JsonNodeType NUMBER>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isIntegralNumber()
{
com.fasterxml.jackson.databind.JsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
return 0;
}
public boolean isFloatingPointNumber()
{
com.fasterxml.jackson.databind.JsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
return 0;
}
public boolean isShort()
{
com.fasterxml.jackson.databind.JsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
return 0;
}
public boolean isInt()
{
com.fasterxml.jackson.databind.JsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
return 0;
}
public boolean isLong()
{
com.fasterxml.jackson.databind.JsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
return 0;
}
public boolean isFloat()
{
com.fasterxml.jackson.databind.JsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
return 0;
}
public boolean isDouble()
{
com.fasterxml.jackson.databind.JsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
return 0;
}
public boolean isBigDecimal()
{
com.fasterxml.jackson.databind.JsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
return 0;
}
public boolean isBigInteger()
{
com.fasterxml.jackson.databind.JsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
return 0;
}
public final boolean isTextual()
{
com.fasterxml.jackson.databind.JsonNode v0;
boolean v3;
com.fasterxml.jackson.databind.node.JsonNodeType v1, v2;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.node.JsonNodeType getNodeType()>();
v2 = <com.fasterxml.jackson.databind.node.JsonNodeType: com.fasterxml.jackson.databind.node.JsonNodeType STRING>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public final boolean isBoolean()
{
com.fasterxml.jackson.databind.JsonNode v0;
boolean v3;
com.fasterxml.jackson.databind.node.JsonNodeType v1, v2;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.node.JsonNodeType getNodeType()>();
v2 = <com.fasterxml.jackson.databind.node.JsonNodeType: com.fasterxml.jackson.databind.node.JsonNodeType BOOLEAN>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public final boolean isNull()
{
com.fasterxml.jackson.databind.JsonNode v0;
boolean v3;
com.fasterxml.jackson.databind.node.JsonNodeType v1, v2;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.node.JsonNodeType getNodeType()>();
v2 = <com.fasterxml.jackson.databind.node.JsonNodeType: com.fasterxml.jackson.databind.node.JsonNodeType NULL>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public final boolean isBinary()
{
com.fasterxml.jackson.databind.JsonNode v0;
boolean v3;
com.fasterxml.jackson.databind.node.JsonNodeType v1, v2;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.node.JsonNodeType getNodeType()>();
v2 = <com.fasterxml.jackson.databind.node.JsonNodeType: com.fasterxml.jackson.databind.node.JsonNodeType BINARY>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean canConvertToInt()
{
com.fasterxml.jackson.databind.JsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
return 0;
}
public boolean canConvertToLong()
{
com.fasterxml.jackson.databind.JsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
return 0;
}
public boolean canConvertToExactIntegral()
{
com.fasterxml.jackson.databind.JsonNode v0;
boolean v1;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: boolean isIntegralNumber()>();
return v1;
}
public java.lang.String textValue()
{
com.fasterxml.jackson.databind.JsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
return null;
}
public byte[] binaryValue() throws java.io.IOException
{
com.fasterxml.jackson.databind.JsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
return null;
}
public boolean booleanValue()
{
com.fasterxml.jackson.databind.JsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
return 0;
}
public java.lang.Number numberValue()
{
com.fasterxml.jackson.databind.JsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
return null;
}
public short shortValue()
{
com.fasterxml.jackson.databind.JsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
return 0;
}
public int intValue()
{
com.fasterxml.jackson.databind.JsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
return 0;
}
public long longValue()
{
com.fasterxml.jackson.databind.JsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
return 0L;
}
public float floatValue()
{
com.fasterxml.jackson.databind.JsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
return 0.0F;
}
public double doubleValue()
{
com.fasterxml.jackson.databind.JsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
return 0.0;
}
public java.math.BigDecimal decimalValue()
{
java.math.BigDecimal v1;
com.fasterxml.jackson.databind.JsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 = <java.math.BigDecimal: java.math.BigDecimal ZERO>;
return v1;
}
public java.math.BigInteger bigIntegerValue()
{
com.fasterxml.jackson.databind.JsonNode v0;
java.math.BigInteger v1;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 = <java.math.BigInteger: java.math.BigInteger ZERO>;
return v1;
}
public abstract java.lang.String asText();
public java.lang.String asText(java.lang.String)
{
com.fasterxml.jackson.databind.JsonNode v0;
java.lang.String v1, v2, v3;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: java.lang.String asText()>();
if v2 != null goto label1;
v3 = v1;
goto label2;
label1:
v3 = v2;
label2:
return v3;
}
public int asInt()
{
int v1;
com.fasterxml.jackson.databind.JsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: int asInt(int)>(0);
return v1;
}
public int asInt(int)
{
int v1;
com.fasterxml.jackson.databind.JsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 := @parameter0: int;
return v1;
}
public long asLong()
{
com.fasterxml.jackson.databind.JsonNode v0;
long v1;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: long asLong(long)>(0L);
return v1;
}
public long asLong(long)
{
com.fasterxml.jackson.databind.JsonNode v0;
long v1;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 := @parameter0: long;
return v1;
}
public double asDouble()
{
com.fasterxml.jackson.databind.JsonNode v0;
double v1;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: double asDouble(double)>(0.0);
return v1;
}
public double asDouble(double)
{
com.fasterxml.jackson.databind.JsonNode v0;
double v1;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 := @parameter0: double;
return v1;
}
public boolean asBoolean()
{
com.fasterxml.jackson.databind.JsonNode v0;
boolean v1;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: boolean asBoolean(boolean)>(0);
return v1;
}
public boolean asBoolean(boolean)
{
com.fasterxml.jackson.databind.JsonNode v0;
boolean v1;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 := @parameter0: boolean;
return v1;
}
public com.fasterxml.jackson.databind.JsonNode require() throws java.lang.IllegalArgumentException
{
com.fasterxml.jackson.databind.JsonNode v0, v1;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode _this()>();
return v1;
}
public com.fasterxml.jackson.databind.JsonNode requireNonNull() throws java.lang.IllegalArgumentException
{
com.fasterxml.jackson.databind.JsonNode v0, v1;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode _this()>();
return v1;
}
public com.fasterxml.jackson.databind.JsonNode required(java.lang.String) throws java.lang.IllegalArgumentException
{
java.lang.Object[] v2;
com.fasterxml.jackson.databind.JsonNode v0;
java.lang.Class v3;
java.lang.Object v5;
java.lang.String v1, v4;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 := @parameter0: java.lang.String;
v2 = newarray (java.lang.Object)[1];
v3 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v4 = virtualinvoke v3.<java.lang.Class: java.lang.String getName()>();
v2[0] = v4;
v5 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: java.lang.Object _reportRequiredViolation(java.lang.String,java.lang.Object[])>("Node of type `%s` has no fields", v2);
return v5;
}
public com.fasterxml.jackson.databind.JsonNode required(int) throws java.lang.IllegalArgumentException
{
java.lang.Object[] v2;
int v1;
com.fasterxml.jackson.databind.JsonNode v0;
java.lang.Class v3;
java.lang.Object v5;
java.lang.String v4;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 := @parameter0: int;
v2 = newarray (java.lang.Object)[1];
v3 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v4 = virtualinvoke v3.<java.lang.Class: java.lang.String getName()>();
v2[0] = v4;
v5 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: java.lang.Object _reportRequiredViolation(java.lang.String,java.lang.Object[])>("Node of type `%s` has no indexed values", v2);
return v5;
}
public com.fasterxml.jackson.databind.JsonNode requiredAt(java.lang.String) throws java.lang.IllegalArgumentException
{
com.fasterxml.jackson.core.JsonPointer v2;
com.fasterxml.jackson.databind.JsonNode v0, v3;
java.lang.String v1;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <com.fasterxml.jackson.core.JsonPointer: com.fasterxml.jackson.core.JsonPointer compile(java.lang.String)>(v1);
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode requiredAt(com.fasterxml.jackson.core.JsonPointer)>(v2);
return v3;
}
public final com.fasterxml.jackson.databind.JsonNode requiredAt(com.fasterxml.jackson.core.JsonPointer) throws java.lang.IllegalArgumentException
{
com.fasterxml.jackson.core.JsonPointer v1, v2;
java.lang.Object[] v5;
com.fasterxml.jackson.databind.JsonNode v0, v3;
boolean v4;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 := @parameter0: com.fasterxml.jackson.core.JsonPointer;
v2 = v1;
v3 = v0;
label1:
v4 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonPointer: boolean matches()>();
if v4 == 0 goto label2;
return v3;
label2:
v3 = virtualinvoke v3.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode _at(com.fasterxml.jackson.core.JsonPointer)>(v2);
if v3 != null goto label3;
v5 = newarray (java.lang.Object)[2];
v5[0] = v1;
v5[1] = v2;
virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: java.lang.Object _reportRequiredViolation(java.lang.String,java.lang.Object[])>("No node at \'%s\' (unmatched part: \'%s\')", v5);
label3:
v2 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonPointer: com.fasterxml.jackson.core.JsonPointer tail()>();
goto label1;
}
public boolean has(java.lang.String)
{
com.fasterxml.jackson.databind.JsonNode v0, v2;
java.lang.String v1;
boolean v3;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(v1);
if v2 == null goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean has(int)
{
int v1;
com.fasterxml.jackson.databind.JsonNode v0, v2;
boolean v3;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(int)>(v1);
if v2 == null goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean hasNonNull(java.lang.String)
{
com.fasterxml.jackson.databind.JsonNode v0, v2;
java.lang.String v1;
boolean v3, v4;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(v1);
if v2 == null goto label1;
v3 = virtualinvoke v2.<com.fasterxml.jackson.databind.JsonNode: boolean isNull()>();
if v3 != 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public boolean hasNonNull(int)
{
int v1;
com.fasterxml.jackson.databind.JsonNode v0, v2;
boolean v3, v4;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(int)>(v1);
if v2 == null goto label1;
v3 = virtualinvoke v2.<com.fasterxml.jackson.databind.JsonNode: boolean isNull()>();
if v3 != 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public final java.util.Iterator iterator()
{
com.fasterxml.jackson.databind.JsonNode v0;
java.util.Iterator v1;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator elements()>();
return v1;
}
public java.util.Iterator elements()
{
com.fasterxml.jackson.databind.JsonNode v0;
java.util.Iterator v1;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.util.Iterator emptyIterator()>();
return v1;
}
public java.util.Iterator fields()
{
com.fasterxml.jackson.databind.JsonNode v0;
java.util.Iterator v1;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.util.Iterator emptyIterator()>();
return v1;
}
public java.util.Set properties()
{
java.util.Set v1;
com.fasterxml.jackson.databind.JsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
return v1;
}
public abstract com.fasterxml.jackson.databind.JsonNode findValue(java.lang.String);
public final java.util.List findValues(java.lang.String)
{
java.util.List v2, v3;
com.fasterxml.jackson.databind.JsonNode v0;
java.lang.String v1;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: java.util.List findValues(java.lang.String,java.util.List)>(v1, null);
if v2 != null goto label1;
v3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v3;
label1:
return v2;
}
public final java.util.List findValuesAsText(java.lang.String)
{
java.util.List v2, v3;
com.fasterxml.jackson.databind.JsonNode v0;
java.lang.String v1;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: java.util.List findValuesAsText(java.lang.String,java.util.List)>(v1, null);
if v2 != null goto label1;
v3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v3;
label1:
return v2;
}
public abstract com.fasterxml.jackson.databind.JsonNode findPath(java.lang.String);
public abstract com.fasterxml.jackson.databind.JsonNode findParent(java.lang.String);
public final java.util.List findParents(java.lang.String)
{
java.util.List v2, v3;
com.fasterxml.jackson.databind.JsonNode v0;
java.lang.String v1;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: java.util.List findParents(java.lang.String,java.util.List)>(v1, null);
if v2 != null goto label1;
v3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v3;
label1:
return v2;
}
public abstract java.util.List findValues(java.lang.String, java.util.List);
public abstract java.util.List findValuesAsText(java.lang.String, java.util.List);
public abstract java.util.List findParents(java.lang.String, java.util.List);
public final com.fasterxml.jackson.databind.node.ObjectNode withObject(java.lang.String)
{
com.fasterxml.jackson.core.JsonPointer v2;
com.fasterxml.jackson.databind.JsonNode v0;
java.lang.String v1;
com.fasterxml.jackson.databind.node.ObjectNode v3;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <com.fasterxml.jackson.core.JsonPointer: com.fasterxml.jackson.core.JsonPointer compile(java.lang.String)>(v1);
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.node.ObjectNode withObject(com.fasterxml.jackson.core.JsonPointer)>(v2);
return v3;
}
public final com.fasterxml.jackson.databind.node.ObjectNode withObject(java.lang.String, com.fasterxml.jackson.databind.JsonNode$OverwriteMode, boolean)
{
com.fasterxml.jackson.core.JsonPointer v4;
com.fasterxml.jackson.databind.JsonNode$OverwriteMode v2;
com.fasterxml.jackson.databind.JsonNode v0;
java.lang.String v1;
com.fasterxml.jackson.databind.node.ObjectNode v5;
boolean v3;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: com.fasterxml.jackson.databind.JsonNode$OverwriteMode;
v3 := @parameter2: boolean;
v4 = staticinvoke <com.fasterxml.jackson.core.JsonPointer: com.fasterxml.jackson.core.JsonPointer compile(java.lang.String)>(v1);
v5 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.node.ObjectNode withObject(com.fasterxml.jackson.core.JsonPointer,com.fasterxml.jackson.databind.JsonNode$OverwriteMode,boolean)>(v4, v2, v3);
return v5;
}
public final com.fasterxml.jackson.databind.node.ObjectNode withObject(com.fasterxml.jackson.core.JsonPointer)
{
com.fasterxml.jackson.core.JsonPointer v1;
com.fasterxml.jackson.databind.JsonNode$OverwriteMode v2;
com.fasterxml.jackson.databind.JsonNode v0;
com.fasterxml.jackson.databind.node.ObjectNode v3;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 := @parameter0: com.fasterxml.jackson.core.JsonPointer;
v2 = <com.fasterxml.jackson.databind.JsonNode$OverwriteMode: com.fasterxml.jackson.databind.JsonNode$OverwriteMode NULLS>;
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.node.ObjectNode withObject(com.fasterxml.jackson.core.JsonPointer,com.fasterxml.jackson.databind.JsonNode$OverwriteMode,boolean)>(v1, v2, 1);
return v3;
}
public com.fasterxml.jackson.databind.node.ObjectNode withObject(com.fasterxml.jackson.core.JsonPointer, com.fasterxml.jackson.databind.JsonNode$OverwriteMode, boolean)
{
java.lang.UnsupportedOperationException v4;
com.fasterxml.jackson.core.JsonPointer v1;
com.fasterxml.jackson.databind.JsonNode$OverwriteMode v2;
com.fasterxml.jackson.databind.JsonNode v0;
java.lang.Class v5;
java.lang.String v6, v7;
boolean v3;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 := @parameter0: com.fasterxml.jackson.core.JsonPointer;
v2 := @parameter1: com.fasterxml.jackson.databind.JsonNode$OverwriteMode;
v3 := @parameter2: boolean;
v4 = new java.lang.UnsupportedOperationException;
v5 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v6 = virtualinvoke v5.<java.lang.Class: java.lang.String getName()>();
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("`withObject(JsonPointer)` not implemented by `\u0001`");
specialinvoke v4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(v7);
throw v4;
}
public com.fasterxml.jackson.databind.JsonNode 'with'(java.lang.String)
{
java.lang.UnsupportedOperationException v2;
com.fasterxml.jackson.databind.JsonNode v0;
java.lang.Class v3;
java.lang.String v1, v4, v5;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 := @parameter0: java.lang.String;
v2 = new java.lang.UnsupportedOperationException;
v3 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v4 = virtualinvoke v3.<java.lang.Class: java.lang.String getName()>();
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("`JsonNode` not of type `ObjectNode` (but \u0001), cannot call `with(String)` on it");
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(v5);
throw v2;
}
public com.fasterxml.jackson.databind.JsonNode withArray(java.lang.String)
{
java.lang.UnsupportedOperationException v2;
com.fasterxml.jackson.databind.JsonNode v0;
java.lang.Class v3;
java.lang.String v1, v4, v5;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 := @parameter0: java.lang.String;
v2 = new java.lang.UnsupportedOperationException;
v3 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v4 = virtualinvoke v3.<java.lang.Class: java.lang.String getName()>();
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("`JsonNode` not of type `ObjectNode` (but `\u0001)`, cannot call `withArray()` on it");
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(v5);
throw v2;
}
public com.fasterxml.jackson.databind.node.ArrayNode withArray(java.lang.String, com.fasterxml.jackson.databind.JsonNode$OverwriteMode, boolean)
{
com.fasterxml.jackson.databind.node.ArrayNode v5;
com.fasterxml.jackson.core.JsonPointer v4;
com.fasterxml.jackson.databind.JsonNode$OverwriteMode v2;
com.fasterxml.jackson.databind.JsonNode v0;
java.lang.String v1;
boolean v3;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: com.fasterxml.jackson.databind.JsonNode$OverwriteMode;
v3 := @parameter2: boolean;
v4 = staticinvoke <com.fasterxml.jackson.core.JsonPointer: com.fasterxml.jackson.core.JsonPointer compile(java.lang.String)>(v1);
v5 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.node.ArrayNode withArray(com.fasterxml.jackson.core.JsonPointer,com.fasterxml.jackson.databind.JsonNode$OverwriteMode,boolean)>(v4, v2, v3);
return v5;
}
public final com.fasterxml.jackson.databind.node.ArrayNode withArray(com.fasterxml.jackson.core.JsonPointer)
{
com.fasterxml.jackson.databind.node.ArrayNode v3;
com.fasterxml.jackson.core.JsonPointer v1;
com.fasterxml.jackson.databind.JsonNode$OverwriteMode v2;
com.fasterxml.jackson.databind.JsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 := @parameter0: com.fasterxml.jackson.core.JsonPointer;
v2 = <com.fasterxml.jackson.databind.JsonNode$OverwriteMode: com.fasterxml.jackson.databind.JsonNode$OverwriteMode NULLS>;
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.node.ArrayNode withArray(com.fasterxml.jackson.core.JsonPointer,com.fasterxml.jackson.databind.JsonNode$OverwriteMode,boolean)>(v1, v2, 1);
return v3;
}
public com.fasterxml.jackson.databind.node.ArrayNode withArray(com.fasterxml.jackson.core.JsonPointer, com.fasterxml.jackson.databind.JsonNode$OverwriteMode, boolean)
{
java.lang.UnsupportedOperationException v4;
com.fasterxml.jackson.core.JsonPointer v1;
com.fasterxml.jackson.databind.JsonNode$OverwriteMode v2;
com.fasterxml.jackson.databind.JsonNode v0;
java.lang.Class v5;
java.lang.String v6, v7;
boolean v3;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 := @parameter0: com.fasterxml.jackson.core.JsonPointer;
v2 := @parameter1: com.fasterxml.jackson.databind.JsonNode$OverwriteMode;
v3 := @parameter2: boolean;
v4 = new java.lang.UnsupportedOperationException;
v5 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v6 = virtualinvoke v5.<java.lang.Class: java.lang.String getName()>();
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("`withArray(JsonPointer)` not implemented by \u0001");
specialinvoke v4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(v7);
throw v4;
}
public boolean equals(java.util.Comparator, com.fasterxml.jackson.databind.JsonNode)
{
int v3;
com.fasterxml.jackson.databind.JsonNode v0, v2;
java.util.Comparator v1;
boolean v4;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 := @parameter0: java.util.Comparator;
v2 := @parameter1: com.fasterxml.jackson.databind.JsonNode;
v3 = interfaceinvoke v1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(v0, v2);
if v3 != 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public abstract java.lang.String toString();
public java.lang.String toPrettyString()
{
com.fasterxml.jackson.databind.JsonNode v0;
java.lang.String v1;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 = virtualinvoke v0.<com.fasterxml.jackson.databind.JsonNode: java.lang.String toString()>();
return v1;
}
public abstract boolean equals(java.lang.Object);
protected com.fasterxml.jackson.databind.JsonNode _this()
{
com.fasterxml.jackson.databind.JsonNode v0;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
return v0;
}
protected transient java.lang.Object _reportRequiredViolation(java.lang.String, java.lang.Object[])
{
java.lang.Object[] v2;
com.fasterxml.jackson.databind.JsonNode v0;
java.lang.String v1, v4;
java.lang.IllegalArgumentException v3;
v0 := @this: com.fasterxml.jackson.databind.JsonNode;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object[];
v3 = new java.lang.IllegalArgumentException;
v4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v1, v2);
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v4);
throw v3;
}
}