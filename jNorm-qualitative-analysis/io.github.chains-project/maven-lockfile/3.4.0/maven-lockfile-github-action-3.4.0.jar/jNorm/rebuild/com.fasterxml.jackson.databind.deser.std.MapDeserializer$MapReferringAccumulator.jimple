final class com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator extends java.lang.Object
{
private final java.lang.Class _valueType;
private java.util.Map _result;
private java.util.List _accumulator;
public void <init>(java.lang.Class, java.util.Map)
{
com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator v0;
java.util.Map v2;
java.lang.Class v1;
java.util.ArrayList v3;
v0 := @this: com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.util.Map;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
v0.<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator: java.util.List _accumulator> = v3;
v0.<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator: java.lang.Class _valueType> = v1;
v0.<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator: java.util.Map _result> = v2;
return;
}
public void put(java.lang.Object, java.lang.Object)
{
com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator v0;
java.util.List v3, v6, v7;
java.util.Map v11, v5;
int v8, v9;
java.lang.Object v1, v10, v2;
boolean v4;
v0 := @this: com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = v0.<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator: java.util.List _accumulator>;
v4 = interfaceinvoke v3.<java.util.List: boolean isEmpty()>();
if v4 == 0 goto label1;
v5 = v0.<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator: java.util.Map _result>;
interfaceinvoke v5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v2);
goto label2;
label1:
v6 = v0.<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator: java.util.List _accumulator>;
v7 = v0.<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator: java.util.List _accumulator>;
v8 = interfaceinvoke v7.<java.util.List: int size()>();
v9 = v8 - 1;
v10 = interfaceinvoke v6.<java.util.List: java.lang.Object get(int)>(v9);
v11 = v10.<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferring: java.util.Map next>;
interfaceinvoke v11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v2);
label2:
return;
}
public com.fasterxml.jackson.databind.deser.impl.ReadableObjectId$Referring handleUnresolvedReference(com.fasterxml.jackson.databind.deser.UnresolvedForwardReference, java.lang.Object)
{
java.util.List v5;
com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator v0;
com.fasterxml.jackson.databind.deser.UnresolvedForwardReference v1;
java.lang.Class v4;
java.lang.Object v2;
com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferring v3;
v0 := @this: com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator;
v1 := @parameter0: com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;
v2 := @parameter1: java.lang.Object;
v3 = new com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferring;
v4 = v0.<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator: java.lang.Class _valueType>;
specialinvoke v3.<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferring: void <init>(com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator,com.fasterxml.jackson.databind.deser.UnresolvedForwardReference,java.lang.Class,java.lang.Object)>(v0, v1, v4, v2);
v5 = v0.<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator: java.util.List _accumulator>;
interfaceinvoke v5.<java.util.List: boolean add(java.lang.Object)>(v3);
return v3;
}
public void resolveForwardReference(java.lang.Object, java.lang.Object) throws java.io.IOException
{
com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator v0;
java.util.Iterator v4;
java.lang.IllegalArgumentException v11;
java.util.List v3;
java.util.Map v10, v5;
java.lang.Object v1, v2, v7, v9;
java.lang.String v12;
boolean v6, v8;
v0 := @this: com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = v0.<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator: java.util.List _accumulator>;
v4 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
v5 = v0.<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferringAccumulator: java.util.Map _result>;
label1:
v6 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label3;
v7 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v8 = virtualinvoke v7.<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferring: boolean hasId(java.lang.Object)>(v1);
if v8 == 0 goto label2;
interfaceinvoke v4.<java.util.Iterator: void remove()>();
v9 = v7.<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferring: java.lang.Object key>;
interfaceinvoke v5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v9, v2);
v10 = v7.<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferring: java.util.Map next>;
interfaceinvoke v5.<java.util.Map: void putAll(java.util.Map)>(v10);
return;
label2:
v5 = v7.<com.fasterxml.jackson.databind.deser.std.MapDeserializer$MapReferring: java.util.Map next>;
goto label1;
label3:
v11 = new java.lang.IllegalArgumentException;
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Trying to resolve a forward reference with id [\u0001] that wasn\'t previously seen as unresolved.");
specialinvoke v11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v12);
throw v11;
}
}