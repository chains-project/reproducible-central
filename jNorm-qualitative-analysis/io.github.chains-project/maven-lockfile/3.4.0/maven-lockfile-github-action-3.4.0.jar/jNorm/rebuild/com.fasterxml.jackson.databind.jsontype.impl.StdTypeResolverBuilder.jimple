public class com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder extends java.lang.Object implements com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder
{
protected com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id _idType;
protected com.fasterxml.jackson.'annotation'.JsonTypeInfo$As _includeAs;
protected java.lang.String _typeProperty;
protected boolean _typeIdVisible;
protected java.lang.Class _defaultImpl;
protected com.fasterxml.jackson.databind.jsontype.TypeIdResolver _customIdResolver;
public void <init>()
{
com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder v0;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: boolean _typeIdVisible> = 0;
return;
}
protected void <init>(com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id, com.fasterxml.jackson.'annotation'.JsonTypeInfo$As, java.lang.String)
{
com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id v1;
com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder v0;
com.fasterxml.jackson.'annotation'.JsonTypeInfo$As v2;
java.lang.String v3;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
v1 := @parameter0: com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id;
v2 := @parameter1: com.fasterxml.jackson.'annotation'.JsonTypeInfo$As;
v3 := @parameter2: java.lang.String;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: boolean _typeIdVisible> = 0;
v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id _idType> = v1;
v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.'annotation'.JsonTypeInfo$As _includeAs> = v2;
v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: java.lang.String _typeProperty> = v3;
return;
}
protected void <init>(com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder, java.lang.Class)
{
com.fasterxml.jackson.'annotation'.JsonTypeInfo$As v4;
com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id v3;
com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder v0, v1;
java.lang.Class v2;
java.lang.String v5;
boolean v6;
com.fasterxml.jackson.databind.jsontype.TypeIdResolver v7;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
v1 := @parameter0: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
v2 := @parameter1: java.lang.Class;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: boolean _typeIdVisible> = 0;
v3 = v1.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id _idType>;
v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id _idType> = v3;
v4 = v1.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.'annotation'.JsonTypeInfo$As _includeAs>;
v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.'annotation'.JsonTypeInfo$As _includeAs> = v4;
v5 = v1.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: java.lang.String _typeProperty>;
v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: java.lang.String _typeProperty> = v5;
v6 = v1.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: boolean _typeIdVisible>;
v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: boolean _typeIdVisible> = v6;
v7 = v1.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeIdResolver _customIdResolver>;
v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeIdResolver _customIdResolver> = v7;
v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: java.lang.Class _defaultImpl> = v2;
return;
}
public static com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder noTypeInfoBuilder()
{
com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id v1;
com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder v0, v2;
v0 = new com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
specialinvoke v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: void <init>()>();
v1 = <com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id: com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id NONE>;
v2 = virtualinvoke v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder init(com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id,com.fasterxml.jackson.databind.jsontype.TypeIdResolver)>(v1, null);
return v2;
}
public com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder init(com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id, com.fasterxml.jackson.databind.jsontype.TypeIdResolver)
{
com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id v1;
com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder v0;
java.lang.String v4;
java.lang.IllegalArgumentException v3;
com.fasterxml.jackson.databind.jsontype.TypeIdResolver v2;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
v1 := @parameter0: com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id;
v2 := @parameter1: com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
if v1 != null goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("idType cannot be null");
throw v3;
label1:
v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id _idType> = v1;
v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeIdResolver _customIdResolver> = v2;
v4 = virtualinvoke v1.<com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id: java.lang.String getDefaultPropertyName()>();
v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: java.lang.String _typeProperty> = v4;
return v0;
}
public com.fasterxml.jackson.databind.jsontype.TypeSerializer buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.JavaType, java.util.Collection)
{
java.lang.IllegalStateException v25;
com.fasterxml.jackson.'annotation'.JsonTypeInfo$As v14, v26;
com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer v18;
com.fasterxml.jackson.databind.SerializationConfig v1;
com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator v11;
com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer v17;
int[] v13;
int v15, v16;
com.fasterxml.jackson.databind.JavaType v2;
com.fasterxml.jackson.databind.jsontype.impl.AsDeductionTypeSerializer v10;
java.lang.String v19, v22, v24, v27;
com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer v21;
boolean v6, v7;
com.fasterxml.jackson.databind.jsontype.TypeIdResolver v12;
java.util.Collection v3;
com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeSerializer v20;
com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id v4, v5, v8, v9;
com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder v0;
com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer v23;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
v1 := @parameter0: com.fasterxml.jackson.databind.SerializationConfig;
v2 := @parameter1: com.fasterxml.jackson.databind.JavaType;
v3 := @parameter2: java.util.Collection;
v4 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id _idType>;
v5 = <com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id: com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id NONE>;
if v4 != v5 goto label1;
return null;
label1:
v6 = virtualinvoke v2.<com.fasterxml.jackson.databind.JavaType: boolean isPrimitive()>();
if v6 == 0 goto label2;
v7 = virtualinvoke v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: boolean allowPrimitiveTypes(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType)>(v1, v2);
if v7 != 0 goto label2;
return null;
label2:
v8 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id _idType>;
v9 = <com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id: com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id DEDUCTION>;
if v8 != v9 goto label3;
v10 = staticinvoke <com.fasterxml.jackson.databind.jsontype.impl.AsDeductionTypeSerializer: com.fasterxml.jackson.databind.jsontype.impl.AsDeductionTypeSerializer instance()>();
return v10;
label3:
v11 = virtualinvoke v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator subTypeValidator(com.fasterxml.jackson.databind.cfg.MapperConfig)>(v1);
v12 = virtualinvoke v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeIdResolver idResolver(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator,java.util.Collection,boolean,boolean)>(v1, v2, v11, v3, 1, 0);
v13 = <com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder$1: int[] $SwitchMap$com$fasterxml$jackson$annotation$JsonTypeInfo$As>;
v14 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.'annotation'.JsonTypeInfo$As _includeAs>;
v15 = virtualinvoke v14.<com.fasterxml.jackson.'annotation'.JsonTypeInfo$As: int ordinal()>();
v16 = v13[v15];
tableswitch(v16)
{
case 1: goto label4;
case 2: goto label5;
case 3: goto label6;
case 4: goto label7;
case 5: goto label8;
default: goto label9;
};
label4:
v17 = new com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer;
specialinvoke v17.<com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeSerializer: void <init>(com.fasterxml.jackson.databind.jsontype.TypeIdResolver,com.fasterxml.jackson.databind.BeanProperty)>(v12, null);
return v17;
label5:
v18 = new com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer;
v19 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: java.lang.String _typeProperty>;
specialinvoke v18.<com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeSerializer: void <init>(com.fasterxml.jackson.databind.jsontype.TypeIdResolver,com.fasterxml.jackson.databind.BeanProperty,java.lang.String)>(v12, null, v19);
return v18;
label6:
v20 = new com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeSerializer;
specialinvoke v20.<com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeSerializer: void <init>(com.fasterxml.jackson.databind.jsontype.TypeIdResolver,com.fasterxml.jackson.databind.BeanProperty)>(v12, null);
return v20;
label7:
v21 = new com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer;
v22 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: java.lang.String _typeProperty>;
specialinvoke v21.<com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeSerializer: void <init>(com.fasterxml.jackson.databind.jsontype.TypeIdResolver,com.fasterxml.jackson.databind.BeanProperty,java.lang.String)>(v12, null, v22);
return v21;
label8:
v23 = new com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer;
v24 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: java.lang.String _typeProperty>;
specialinvoke v23.<com.fasterxml.jackson.databind.jsontype.impl.AsExistingPropertyTypeSerializer: void <init>(com.fasterxml.jackson.databind.jsontype.TypeIdResolver,com.fasterxml.jackson.databind.BeanProperty,java.lang.String)>(v12, null, v24);
return v23;
label9:
v25 = new java.lang.IllegalStateException;
v26 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.'annotation'.JsonTypeInfo$As _includeAs>;
v27 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (com.fasterxml.jackson.'annotation'.JsonTypeInfo$As)>(v26) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Do not know how to construct standard type serializer for inclusion type: \u0001");
specialinvoke v25.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v27);
throw v25;
}
public com.fasterxml.jackson.databind.jsontype.TypeDeserializer buildTypeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType, java.util.Collection)
{
java.lang.IllegalStateException v32;
com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator v8;
com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer v21;
int[] v14;
boolean v20, v23, v25, v28, v31, v6, v7;
java.util.Collection v3;
com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id v11, v12, v4, v5;
com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder v0;
com.fasterxml.jackson.databind.jsontype.impl.AsDeductionTypeDeserializer v13;
com.fasterxml.jackson.'annotation'.JsonTypeInfo$As v15, v24, v33;
com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer v29;
com.fasterxml.jackson.databind.DeserializationConfig v1;
int v16, v17;
com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer v26;
com.fasterxml.jackson.databind.JavaType v10, v2;
java.lang.String v19, v22, v27, v30, v34;
com.fasterxml.jackson.databind.jsontype.TypeIdResolver v9;
com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer v18;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
v1 := @parameter0: com.fasterxml.jackson.databind.DeserializationConfig;
v2 := @parameter1: com.fasterxml.jackson.databind.JavaType;
v3 := @parameter2: java.util.Collection;
v4 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id _idType>;
v5 = <com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id: com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id NONE>;
if v4 != v5 goto label1;
return null;
label1:
v6 = virtualinvoke v2.<com.fasterxml.jackson.databind.JavaType: boolean isPrimitive()>();
if v6 == 0 goto label2;
v7 = virtualinvoke v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: boolean allowPrimitiveTypes(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType)>(v1, v2);
if v7 != 0 goto label2;
return null;
label2:
v8 = virtualinvoke v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator verifyBaseTypeValidity(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType)>(v1, v2);
v9 = virtualinvoke v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeIdResolver idResolver(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator,java.util.Collection,boolean,boolean)>(v1, v2, v8, v3, 0, 1);
v10 = virtualinvoke v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.JavaType defineDefaultImpl(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType)>(v1, v2);
v11 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id _idType>;
v12 = <com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id: com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id DEDUCTION>;
if v11 != v12 goto label3;
v13 = new com.fasterxml.jackson.databind.jsontype.impl.AsDeductionTypeDeserializer;
specialinvoke v13.<com.fasterxml.jackson.databind.jsontype.impl.AsDeductionTypeDeserializer: void <init>(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsontype.TypeIdResolver,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.DeserializationConfig,java.util.Collection)>(v2, v9, v10, v1, v3);
return v13;
label3:
v14 = <com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder$1: int[] $SwitchMap$com$fasterxml$jackson$annotation$JsonTypeInfo$As>;
v15 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.'annotation'.JsonTypeInfo$As _includeAs>;
v16 = virtualinvoke v15.<com.fasterxml.jackson.'annotation'.JsonTypeInfo$As: int ordinal()>();
v17 = v14[v16];
tableswitch(v17)
{
case 1: goto label4;
case 2: goto label5;
case 3: goto label6;
case 4: goto label7;
case 5: goto label5;
default: goto label8;
};
label4:
v18 = new com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
v19 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: java.lang.String _typeProperty>;
v20 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: boolean _typeIdVisible>;
specialinvoke v18.<com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer: void <init>(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsontype.TypeIdResolver,java.lang.String,boolean,com.fasterxml.jackson.databind.JavaType)>(v2, v9, v19, v20, v10);
return v18;
label5:
v21 = new com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
v22 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: java.lang.String _typeProperty>;
v23 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: boolean _typeIdVisible>;
v24 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.'annotation'.JsonTypeInfo$As _includeAs>;
v25 = virtualinvoke v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: boolean _strictTypeIdHandling(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType)>(v1, v2);
specialinvoke v21.<com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer: void <init>(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsontype.TypeIdResolver,java.lang.String,boolean,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.'annotation'.JsonTypeInfo$As,boolean)>(v2, v9, v22, v23, v10, v24, v25);
return v21;
label6:
v26 = new com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
v27 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: java.lang.String _typeProperty>;
v28 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: boolean _typeIdVisible>;
specialinvoke v26.<com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer: void <init>(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsontype.TypeIdResolver,java.lang.String,boolean,com.fasterxml.jackson.databind.JavaType)>(v2, v9, v27, v28, v10);
return v26;
label7:
v29 = new com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
v30 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: java.lang.String _typeProperty>;
v31 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: boolean _typeIdVisible>;
specialinvoke v29.<com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer: void <init>(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsontype.TypeIdResolver,java.lang.String,boolean,com.fasterxml.jackson.databind.JavaType)>(v2, v9, v30, v31, v10);
return v29;
label8:
v32 = new java.lang.IllegalStateException;
v33 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.'annotation'.JsonTypeInfo$As _includeAs>;
v34 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (com.fasterxml.jackson.'annotation'.JsonTypeInfo$As)>(v33) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Do not know how to construct standard type serializer for inclusion type: \u0001");
specialinvoke v32.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v34);
throw v32;
}
protected com.fasterxml.jackson.databind.JavaType defineDefaultImpl(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType)
{
com.fasterxml.jackson.databind.DeserializationConfig v1;
com.fasterxml.jackson.databind.MapperFeature v18;
com.fasterxml.jackson.databind.type.TypeFactory v13, v6;
com.fasterxml.jackson.databind.JavaType v15, v2, v8;
boolean v10, v12, v17, v19, v20;
com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder v0;
java.lang.Class v11, v14, v16, v3, v4, v5, v7, v9;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
v1 := @parameter0: com.fasterxml.jackson.databind.DeserializationConfig;
v2 := @parameter1: com.fasterxml.jackson.databind.JavaType;
v3 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: java.lang.Class _defaultImpl>;
if v3 == null goto label5;
v4 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: java.lang.Class _defaultImpl>;
if v4 == class "Ljava/lang/Void;" goto label1;
v5 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: java.lang.Class _defaultImpl>;
if v5 != class "Lcom/fasterxml/jackson/databind/annotation/NoClass;" goto label2;
label1:
v6 = virtualinvoke v1.<com.fasterxml.jackson.databind.DeserializationConfig: com.fasterxml.jackson.databind.type.TypeFactory getTypeFactory()>();
v7 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: java.lang.Class _defaultImpl>;
v8 = virtualinvoke v6.<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType constructType(java.lang.reflect.Type)>(v7);
return v8;
label2:
v9 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: java.lang.Class _defaultImpl>;
v10 = virtualinvoke v2.<com.fasterxml.jackson.databind.JavaType: boolean hasRawClass(java.lang.Class)>(v9);
if v10 == 0 goto label3;
return v2;
label3:
v11 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: java.lang.Class _defaultImpl>;
v12 = virtualinvoke v2.<com.fasterxml.jackson.databind.JavaType: boolean isTypeOrSuperTypeOf(java.lang.Class)>(v11);
if v12 == 0 goto label4;
v13 = virtualinvoke v1.<com.fasterxml.jackson.databind.DeserializationConfig: com.fasterxml.jackson.databind.type.TypeFactory getTypeFactory()>();
v14 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: java.lang.Class _defaultImpl>;
v15 = virtualinvoke v13.<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class)>(v2, v14);
return v15;
label4:
v16 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: java.lang.Class _defaultImpl>;
v17 = virtualinvoke v2.<com.fasterxml.jackson.databind.JavaType: boolean hasRawClass(java.lang.Class)>(v16);
if v17 == 0 goto label5;
return v2;
label5:
v18 = <com.fasterxml.jackson.databind.MapperFeature: com.fasterxml.jackson.databind.MapperFeature USE_BASE_TYPE_AS_DEFAULT_IMPL>;
v19 = virtualinvoke v1.<com.fasterxml.jackson.databind.DeserializationConfig: boolean isEnabled(com.fasterxml.jackson.databind.MapperFeature)>(v18);
if v19 == 0 goto label6;
v20 = virtualinvoke v2.<com.fasterxml.jackson.databind.JavaType: boolean isAbstract()>();
if v20 != 0 goto label6;
return v2;
label6:
return null;
}
public com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder inclusion(com.fasterxml.jackson.'annotation'.JsonTypeInfo$As)
{
java.lang.IllegalArgumentException v2;
com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder v0;
com.fasterxml.jackson.'annotation'.JsonTypeInfo$As v1;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
v1 := @parameter0: com.fasterxml.jackson.'annotation'.JsonTypeInfo$As;
if v1 != null goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("includeAs cannot be null");
throw v2;
label1:
v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.'annotation'.JsonTypeInfo$As _includeAs> = v1;
return v0;
}
public com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder typeProperty(java.lang.String)
{
com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id v3;
com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder v0;
java.lang.String v1;
boolean v2;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
v1 := @parameter0: java.lang.String;
if v1 == null goto label1;
v2 = virtualinvoke v1.<java.lang.String: boolean isEmpty()>();
if v2 == 0 goto label2;
label1:
v3 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id _idType>;
v1 = virtualinvoke v3.<com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id: java.lang.String getDefaultPropertyName()>();
label2:
v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: java.lang.String _typeProperty> = v1;
return v0;
}
public com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder defaultImpl(java.lang.Class)
{
java.lang.Class v1;
com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder v0;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
v1 := @parameter0: java.lang.Class;
v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: java.lang.Class _defaultImpl> = v1;
return v0;
}
public com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder typeIdVisibility(boolean)
{
com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder v0;
boolean v1;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
v1 := @parameter0: boolean;
v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: boolean _typeIdVisible> = v1;
return v0;
}
public com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder withDefaultImpl(java.lang.Class)
{
com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder v0, v3;
java.lang.Class v1, v2;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
v1 := @parameter0: java.lang.Class;
v2 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: java.lang.Class _defaultImpl>;
if v2 != v1 goto label1;
return v0;
label1:
staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: void verifyMustOverride(java.lang.Class,java.lang.Object,java.lang.String)>(class "Lcom/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder;", v0, "withDefaultImpl");
v3 = new com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
specialinvoke v3.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: void <init>(com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder,java.lang.Class)>(v0, v1);
return v3;
}
public java.lang.Class getDefaultImpl()
{
java.lang.Class v1;
com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder v0;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
v1 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: java.lang.Class _defaultImpl>;
return v1;
}
public java.lang.String getTypeProperty()
{
java.lang.String v1;
com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder v0;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
v1 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: java.lang.String _typeProperty>;
return v1;
}
public boolean isTypeIdVisible()
{
com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder v0;
boolean v1;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
v1 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: boolean _typeIdVisible>;
return v1;
}
protected com.fasterxml.jackson.databind.jsontype.TypeIdResolver idResolver(com.fasterxml.jackson.databind.cfg.MapperConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator, java.util.Collection, boolean, boolean)
{
java.lang.IllegalStateException v10, v18;
com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver v15;
com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator v3;
int[] v11;
int v13, v14;
com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver v17;
com.fasterxml.jackson.databind.JavaType v2;
java.lang.String v20;
boolean v5, v6;
com.fasterxml.jackson.databind.jsontype.TypeIdResolver v7, v8;
java.util.Collection v4;
com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id v12, v19, v9;
com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver v16;
com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder v0;
com.fasterxml.jackson.databind.cfg.MapperConfig v1;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
v1 := @parameter0: com.fasterxml.jackson.databind.cfg.MapperConfig;
v2 := @parameter1: com.fasterxml.jackson.databind.JavaType;
v3 := @parameter2: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;
v4 := @parameter3: java.util.Collection;
v5 := @parameter4: boolean;
v6 := @parameter5: boolean;
v7 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeIdResolver _customIdResolver>;
if v7 == null goto label1;
v8 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.TypeIdResolver _customIdResolver>;
return v8;
label1:
v9 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id _idType>;
if v9 != null goto label2;
v10 = new java.lang.IllegalStateException;
specialinvoke v10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot build, \'init()\' not yet called");
throw v10;
label2:
v11 = <com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder$1: int[] $SwitchMap$com$fasterxml$jackson$annotation$JsonTypeInfo$Id>;
v12 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id _idType>;
v13 = virtualinvoke v12.<com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id: int ordinal()>();
v14 = v11[v13];
tableswitch(v14)
{
case 1: goto label3;
case 2: goto label3;
case 3: goto label4;
case 4: goto label5;
case 5: goto label6;
case 6: goto label7;
default: goto label7;
};
label3:
v15 = staticinvoke <com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver: com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver construct(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)>(v2, v1, v3);
return v15;
label4:
v16 = staticinvoke <com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver: com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver construct(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)>(v2, v1, v3);
return v16;
label5:
v17 = staticinvoke <com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver: com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver construct(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection,boolean,boolean)>(v1, v2, v4, v5, v6);
return v17;
label6:
return null;
label7:
v18 = new java.lang.IllegalStateException;
v19 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id _idType>;
v20 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id)>(v19) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Do not know how to construct standard type id resolver for idType: \u0001");
specialinvoke v18.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v20);
throw v18;
}
public com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator subTypeValidator(com.fasterxml.jackson.databind.cfg.MapperConfig)
{
com.fasterxml.jackson.databind.cfg.MapperConfig v1;
com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator v2;
com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder v0;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
v1 := @parameter0: com.fasterxml.jackson.databind.cfg.MapperConfig;
v2 = virtualinvoke v1.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator getPolymorphicTypeValidator()>();
return v2;
}
protected com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator verifyBaseTypeValidity(com.fasterxml.jackson.databind.cfg.MapperConfig, com.fasterxml.jackson.databind.JavaType)
{
com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity v11, v8, v9;
com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id v4, v5, v6, v7;
com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator v10, v3;
com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder v0;
com.fasterxml.jackson.databind.cfg.MapperConfig v1;
com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator v12;
com.fasterxml.jackson.databind.JavaType v2;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
v1 := @parameter0: com.fasterxml.jackson.databind.cfg.MapperConfig;
v2 := @parameter1: com.fasterxml.jackson.databind.JavaType;
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator subTypeValidator(com.fasterxml.jackson.databind.cfg.MapperConfig)>(v1);
v4 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id _idType>;
v5 = <com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id: com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id CLASS>;
if v4 == v5 goto label1;
v6 = v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id _idType>;
v7 = <com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id: com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id MINIMAL_CLASS>;
if v6 != v7 goto label3;
label1:
v8 = virtualinvoke v3.<com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity validateBaseType(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType)>(v1, v2);
v9 = <com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity DENIED>;
if v8 != v9 goto label2;
v10 = virtualinvoke v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator reportInvalidBaseType(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)>(v1, v2, v3);
return v10;
label2:
v11 = <com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator$Validity ALLOWED>;
if v8 != v11 goto label3;
v12 = <com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator: com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator instance>;
return v12;
label3:
return v3;
}
protected com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator reportInvalidBaseType(com.fasterxml.jackson.databind.cfg.MapperConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
{
java.lang.Object[] v5;
java.lang.IllegalArgumentException v4;
com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator v3;
com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder v0;
com.fasterxml.jackson.databind.cfg.MapperConfig v1;
java.lang.Class v7;
com.fasterxml.jackson.databind.JavaType v2;
java.lang.String v6, v8, v9;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
v1 := @parameter0: com.fasterxml.jackson.databind.cfg.MapperConfig;
v2 := @parameter1: com.fasterxml.jackson.databind.JavaType;
v3 := @parameter2: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;
v4 = new java.lang.IllegalArgumentException;
v5 = newarray (java.lang.Object)[2];
v6 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String classNameOf(java.lang.Object)>(v3);
v5[0] = v6;
v7 = virtualinvoke v2.<com.fasterxml.jackson.databind.JavaType: java.lang.Class getRawClass()>();
v8 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String classNameOf(java.lang.Object)>(v7);
v5[1] = v8;
v9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Configured `PolymorphicTypeValidator` (of type %s) denied resolution of all subtypes of base type %s", v5);
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v9);
throw v4;
}
protected boolean allowPrimitiveTypes(com.fasterxml.jackson.databind.cfg.MapperConfig, com.fasterxml.jackson.databind.JavaType)
{
com.fasterxml.jackson.databind.cfg.MapperConfig v1;
com.fasterxml.jackson.databind.JavaType v2;
com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder v0;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
v1 := @parameter0: com.fasterxml.jackson.databind.cfg.MapperConfig;
v2 := @parameter1: com.fasterxml.jackson.databind.JavaType;
return 0;
}
protected boolean _strictTypeIdHandling(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType)
{
com.fasterxml.jackson.databind.DeserializationConfig v1;
com.fasterxml.jackson.databind.MapperFeature v3;
com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder v0;
com.fasterxml.jackson.databind.JavaType v2;
boolean v4, v5;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
v1 := @parameter0: com.fasterxml.jackson.databind.DeserializationConfig;
v2 := @parameter1: com.fasterxml.jackson.databind.JavaType;
v3 = <com.fasterxml.jackson.databind.MapperFeature: com.fasterxml.jackson.databind.MapperFeature REQUIRE_TYPE_ID_FOR_SUBTYPES>;
v4 = virtualinvoke v1.<com.fasterxml.jackson.databind.DeserializationConfig: boolean isEnabled(com.fasterxml.jackson.databind.MapperFeature)>(v3);
if v4 == 0 goto label1;
return 1;
label1:
v5 = virtualinvoke v0.<com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder: boolean _hasTypeResolver(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType)>(v1, v2);
return v5;
}
protected boolean _hasTypeResolver(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType)
{
com.fasterxml.jackson.databind.AnnotationIntrospector v5;
com.fasterxml.jackson.databind.DeserializationConfig v1;
com.fasterxml.jackson.databind.introspect.AnnotatedClass v4;
com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder v0;
java.lang.Class v3;
com.fasterxml.jackson.databind.JavaType v2;
com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder v6;
boolean v7;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
v1 := @parameter0: com.fasterxml.jackson.databind.DeserializationConfig;
v2 := @parameter1: com.fasterxml.jackson.databind.JavaType;
v3 = virtualinvoke v2.<com.fasterxml.jackson.databind.JavaType: java.lang.Class getRawClass()>();
v4 = staticinvoke <com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver: com.fasterxml.jackson.databind.introspect.AnnotatedClass resolveWithoutSuperTypes(com.fasterxml.jackson.databind.cfg.MapperConfig,java.lang.Class)>(v1, v3);
v5 = virtualinvoke v1.<com.fasterxml.jackson.databind.DeserializationConfig: com.fasterxml.jackson.databind.AnnotationIntrospector getAnnotationIntrospector()>();
v6 = virtualinvoke v5.<com.fasterxml.jackson.databind.AnnotationIntrospector: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder findTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.introspect.AnnotatedClass,com.fasterxml.jackson.databind.JavaType)>(v1, v4, v2);
if v6 == null goto label1;
v7 = 1;
goto label2;
label1:
v7 = 0;
label2:
return v7;
}
}