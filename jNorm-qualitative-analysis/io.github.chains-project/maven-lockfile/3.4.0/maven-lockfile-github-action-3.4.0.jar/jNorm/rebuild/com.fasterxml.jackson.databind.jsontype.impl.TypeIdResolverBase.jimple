public abstract class com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase extends java.lang.Object implements com.fasterxml.jackson.databind.jsontype.TypeIdResolver
{
protected final com.fasterxml.jackson.databind.type.TypeFactory _typeFactory;
protected final com.fasterxml.jackson.databind.JavaType _baseType;
protected void <init>()
{
com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase v0;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase;
specialinvoke v0.<com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase: void <init>(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.type.TypeFactory)>(null, null);
return;
}
protected void <init>(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.type.TypeFactory)
{
com.fasterxml.jackson.databind.JavaType v1;
com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase v0;
com.fasterxml.jackson.databind.type.TypeFactory v2;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase;
v1 := @parameter0: com.fasterxml.jackson.databind.JavaType;
v2 := @parameter1: com.fasterxml.jackson.databind.type.TypeFactory;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase: com.fasterxml.jackson.databind.JavaType _baseType> = v1;
v0.<com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase: com.fasterxml.jackson.databind.type.TypeFactory _typeFactory> = v2;
return;
}
public void init(com.fasterxml.jackson.databind.JavaType)
{
com.fasterxml.jackson.databind.JavaType v1;
com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase v0;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase;
v1 := @parameter0: com.fasterxml.jackson.databind.JavaType;
return;
}
public java.lang.String idFromBaseType()
{
com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase v0;
java.lang.Class v2;
com.fasterxml.jackson.databind.JavaType v1;
java.lang.String v3;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase;
v1 = v0.<com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase: com.fasterxml.jackson.databind.JavaType _baseType>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.databind.JavaType: java.lang.Class getRawClass()>();
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase: java.lang.String idFromValueAndType(java.lang.Object,java.lang.Class)>(null, v2);
return v3;
}
public com.fasterxml.jackson.databind.JavaType typeFromId(com.fasterxml.jackson.databind.DatabindContext, java.lang.String) throws java.io.IOException
{
java.lang.IllegalStateException v3;
com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase v0;
java.lang.Class v4;
java.lang.String v2, v5, v6;
com.fasterxml.jackson.databind.DatabindContext v1;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase;
v1 := @parameter0: com.fasterxml.jackson.databind.DatabindContext;
v2 := @parameter1: java.lang.String;
v3 = new java.lang.IllegalStateException;
v4 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v5 = virtualinvoke v4.<java.lang.Class: java.lang.String getName()>();
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Sub-class \u0001 MUST implement `typeFromId(DatabindContext,String)");
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v6);
throw v3;
}
public java.lang.String getDescForKnownTypeIds()
{
com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase v0;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase;
return null;
}
}