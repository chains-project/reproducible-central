public class com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver extends com.fasterxml.jackson.databind.AbstractTypeResolver implements java.io.Serializable
{
private static final long serialVersionUID;
protected final java.util.HashMap _mappings;
public void <init>()
{
java.util.HashMap v1;
com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver v0;
v0 := @this: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
specialinvoke v0.<com.fasterxml.jackson.databind.AbstractTypeResolver: void <init>()>();
v1 = new java.util.HashMap;
specialinvoke v1.<java.util.HashMap: void <init>()>();
v0.<com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver: java.util.HashMap _mappings> = v1;
return;
}
public com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver addMapping(java.lang.Class, java.lang.Class)
{
java.util.HashMap v14;
com.fasterxml.jackson.databind.type.ClassKey v15;
int v9;
java.lang.String v12, v13, v6, v7, v8;
boolean v10, v4;
com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver v0;
java.lang.IllegalArgumentException v11, v3, v5;
java.lang.Class v1, v2;
v0 := @this: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.Class;
if v1 != v2 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot add mapping from class to itself");
throw v3;
label1:
v4 = virtualinvoke v1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v2);
if v4 != 0 goto label2;
v5 = new java.lang.IllegalArgumentException;
v6 = virtualinvoke v1.<java.lang.Class: java.lang.String getName()>();
v7 = virtualinvoke v2.<java.lang.Class: java.lang.String getName()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v6, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot add mapping from class \u0001 to \u0001, as latter is not a subtype of former");
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v8);
throw v5;
label2:
v9 = virtualinvoke v1.<java.lang.Class: int getModifiers()>();
v10 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>(v9);
if v10 != 0 goto label3;
v11 = new java.lang.IllegalArgumentException;
v12 = virtualinvoke v1.<java.lang.Class: java.lang.String getName()>();
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v12) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot add mapping from class \u0001 since it is not abstract");
specialinvoke v11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v13);
throw v11;
label3:
v14 = v0.<com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver: java.util.HashMap _mappings>;
v15 = new com.fasterxml.jackson.databind.type.ClassKey;
specialinvoke v15.<com.fasterxml.jackson.databind.type.ClassKey: void <init>(java.lang.Class)>(v1);
virtualinvoke v14.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v15, v2);
return v0;
}
public com.fasterxml.jackson.databind.JavaType findTypeMapping(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType)
{
java.util.HashMap v4;
com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver v0;
com.fasterxml.jackson.databind.DeserializationConfig v1;
com.fasterxml.jackson.databind.type.ClassKey v5;
com.fasterxml.jackson.databind.type.TypeFactory v7;
java.lang.Class v3;
java.lang.Object v6;
com.fasterxml.jackson.databind.JavaType v2, v8;
v0 := @this: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
v1 := @parameter0: com.fasterxml.jackson.databind.DeserializationConfig;
v2 := @parameter1: com.fasterxml.jackson.databind.JavaType;
v3 = virtualinvoke v2.<com.fasterxml.jackson.databind.JavaType: java.lang.Class getRawClass()>();
v4 = v0.<com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver: java.util.HashMap _mappings>;
v5 = new com.fasterxml.jackson.databind.type.ClassKey;
specialinvoke v5.<com.fasterxml.jackson.databind.type.ClassKey: void <init>(java.lang.Class)>(v3);
v6 = virtualinvoke v4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(v5);
if v6 != null goto label1;
return null;
label1:
v7 = virtualinvoke v1.<com.fasterxml.jackson.databind.DeserializationConfig: com.fasterxml.jackson.databind.type.TypeFactory getTypeFactory()>();
v8 = virtualinvoke v7.<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class)>(v2, v6);
return v8;
}
public com.fasterxml.jackson.databind.JavaType resolveAbstractType(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType)
{
com.fasterxml.jackson.databind.DeserializationConfig v1;
com.fasterxml.jackson.databind.JavaType v2;
com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver v0;
v0 := @this: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
v1 := @parameter0: com.fasterxml.jackson.databind.DeserializationConfig;
v2 := @parameter1: com.fasterxml.jackson.databind.JavaType;
return null;
}
public com.fasterxml.jackson.databind.JavaType resolveAbstractType(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription)
{
com.fasterxml.jackson.databind.DeserializationConfig v1;
com.fasterxml.jackson.databind.BeanDescription v2;
com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver v0;
v0 := @this: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
v1 := @parameter0: com.fasterxml.jackson.databind.DeserializationConfig;
v2 := @parameter1: com.fasterxml.jackson.databind.BeanDescription;
return null;
}
}