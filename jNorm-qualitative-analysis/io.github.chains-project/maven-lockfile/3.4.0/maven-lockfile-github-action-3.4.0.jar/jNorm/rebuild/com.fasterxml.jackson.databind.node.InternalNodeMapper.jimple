final class com.fasterxml.jackson.databind.node.InternalNodeMapper extends java.lang.Object
{
private static final com.fasterxml.jackson.databind.json.JsonMapper JSON_MAPPER;
private static final com.fasterxml.jackson.databind.ObjectWriter STD_WRITER;
private static final com.fasterxml.jackson.databind.ObjectWriter PRETTY_WRITER;
private static final com.fasterxml.jackson.databind.ObjectReader NODE_READER;
void <init>()
{
com.fasterxml.jackson.databind.node.InternalNodeMapper v0;
v0 := @this: com.fasterxml.jackson.databind.node.InternalNodeMapper;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.lang.String nodeToString(com.fasterxml.jackson.databind.node.BaseJsonNode)
{
com.fasterxml.jackson.databind.ObjectWriter v1;
com.fasterxml.jackson.databind.node.BaseJsonNode v0;
com.fasterxml.jackson.databind.JsonSerializable v2;
java.io.IOException v4;
java.lang.RuntimeException v5;
java.lang.String v3;
v0 := @parameter0: com.fasterxml.jackson.databind.node.BaseJsonNode;
label1:
v1 = <com.fasterxml.jackson.databind.node.InternalNodeMapper: com.fasterxml.jackson.databind.ObjectWriter STD_WRITER>;
v2 = staticinvoke <com.fasterxml.jackson.databind.node.InternalNodeMapper: com.fasterxml.jackson.databind.JsonSerializable _wrapper(com.fasterxml.jackson.databind.node.BaseJsonNode)>(v0);
v3 = virtualinvoke v1.<com.fasterxml.jackson.databind.ObjectWriter: java.lang.String writeValueAsString(java.lang.Object)>(v2);
label2:
return v3;
label3:
v4 := @caughtexception;
v5 = new java.lang.RuntimeException;
specialinvoke v5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(v4);
throw v5;
catch java.io.IOException from label1 to label2 with label3;
}
public static java.lang.String nodeToPrettyString(com.fasterxml.jackson.databind.node.BaseJsonNode)
{
com.fasterxml.jackson.databind.ObjectWriter v1;
com.fasterxml.jackson.databind.node.BaseJsonNode v0;
com.fasterxml.jackson.databind.JsonSerializable v2;
java.io.IOException v4;
java.lang.RuntimeException v5;
java.lang.String v3;
v0 := @parameter0: com.fasterxml.jackson.databind.node.BaseJsonNode;
label1:
v1 = <com.fasterxml.jackson.databind.node.InternalNodeMapper: com.fasterxml.jackson.databind.ObjectWriter PRETTY_WRITER>;
v2 = staticinvoke <com.fasterxml.jackson.databind.node.InternalNodeMapper: com.fasterxml.jackson.databind.JsonSerializable _wrapper(com.fasterxml.jackson.databind.node.BaseJsonNode)>(v0);
v3 = virtualinvoke v1.<com.fasterxml.jackson.databind.ObjectWriter: java.lang.String writeValueAsString(java.lang.Object)>(v2);
label2:
return v3;
label3:
v4 := @caughtexception;
v5 = new java.lang.RuntimeException;
specialinvoke v5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(v4);
throw v5;
catch java.io.IOException from label1 to label2 with label3;
}
public static byte[] valueToBytes(java.lang.Object) throws java.io.IOException
{
byte[] v2;
java.lang.Object v0;
com.fasterxml.jackson.databind.json.JsonMapper v1;
v0 := @parameter0: java.lang.Object;
v1 = <com.fasterxml.jackson.databind.node.InternalNodeMapper: com.fasterxml.jackson.databind.json.JsonMapper JSON_MAPPER>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.databind.json.JsonMapper: byte[] writeValueAsBytes(java.lang.Object)>(v0);
return v2;
}
public static com.fasterxml.jackson.databind.JsonNode bytesToNode(byte[]) throws java.io.IOException
{
com.fasterxml.jackson.databind.ObjectReader v1;
byte[] v0;
java.lang.Object v2;
v0 := @parameter0: byte[];
v1 = <com.fasterxml.jackson.databind.node.InternalNodeMapper: com.fasterxml.jackson.databind.ObjectReader NODE_READER>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.databind.ObjectReader: java.lang.Object readValue(byte[])>(v0);
return v2;
}
private static com.fasterxml.jackson.databind.JsonSerializable _wrapper(com.fasterxml.jackson.databind.node.BaseJsonNode)
{
com.fasterxml.jackson.databind.node.InternalNodeMapper$WrapperForSerializer v1;
com.fasterxml.jackson.databind.node.BaseJsonNode v0;
v0 := @parameter0: com.fasterxml.jackson.databind.node.BaseJsonNode;
v1 = new com.fasterxml.jackson.databind.node.InternalNodeMapper$WrapperForSerializer;
specialinvoke v1.<com.fasterxml.jackson.databind.node.InternalNodeMapper$WrapperForSerializer: void <init>(com.fasterxml.jackson.databind.node.BaseJsonNode)>(v0);
return v1;
}
static void <clinit>()
{
com.fasterxml.jackson.databind.ObjectWriter v2, v4, v5;
com.fasterxml.jackson.databind.json.JsonMapper v0, v1, v3, v6;
com.fasterxml.jackson.databind.ObjectReader v7;
v0 = new com.fasterxml.jackson.databind.json.JsonMapper;
specialinvoke v0.<com.fasterxml.jackson.databind.json.JsonMapper: void <init>()>();
<com.fasterxml.jackson.databind.node.InternalNodeMapper: com.fasterxml.jackson.databind.json.JsonMapper JSON_MAPPER> = v0;
v1 = <com.fasterxml.jackson.databind.node.InternalNodeMapper: com.fasterxml.jackson.databind.json.JsonMapper JSON_MAPPER>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.databind.json.JsonMapper: com.fasterxml.jackson.databind.ObjectWriter writer()>();
<com.fasterxml.jackson.databind.node.InternalNodeMapper: com.fasterxml.jackson.databind.ObjectWriter STD_WRITER> = v2;
v3 = <com.fasterxml.jackson.databind.node.InternalNodeMapper: com.fasterxml.jackson.databind.json.JsonMapper JSON_MAPPER>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.databind.json.JsonMapper: com.fasterxml.jackson.databind.ObjectWriter writer()>();
v5 = virtualinvoke v4.<com.fasterxml.jackson.databind.ObjectWriter: com.fasterxml.jackson.databind.ObjectWriter withDefaultPrettyPrinter()>();
<com.fasterxml.jackson.databind.node.InternalNodeMapper: com.fasterxml.jackson.databind.ObjectWriter PRETTY_WRITER> = v5;
v6 = <com.fasterxml.jackson.databind.node.InternalNodeMapper: com.fasterxml.jackson.databind.json.JsonMapper JSON_MAPPER>;
v7 = virtualinvoke v6.<com.fasterxml.jackson.databind.json.JsonMapper: com.fasterxml.jackson.databind.ObjectReader readerFor(java.lang.Class)>(class "Lcom/fasterxml/jackson/databind/JsonNode;");
<com.fasterxml.jackson.databind.node.InternalNodeMapper: com.fasterxml.jackson.databind.ObjectReader NODE_READER> = v7;
return;
}
}