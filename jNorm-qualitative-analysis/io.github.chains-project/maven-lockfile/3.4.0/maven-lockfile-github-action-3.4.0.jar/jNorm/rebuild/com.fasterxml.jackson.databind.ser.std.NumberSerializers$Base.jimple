public abstract class com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer implements com.fasterxml.jackson.databind.ser.ContextualSerializer
{
protected final com.fasterxml.jackson.core.JsonParser$NumberType _numberType;
protected final java.lang.String _schemaType;
protected final boolean _isInt;
protected void <init>(java.lang.Class, com.fasterxml.jackson.core.JsonParser$NumberType, java.lang.String)
{
com.fasterxml.jackson.core.JsonParser$NumberType v2, v4, v5, v6;
com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base v0;
java.lang.Class v1;
java.lang.String v3;
boolean v7;
v0 := @this: com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: com.fasterxml.jackson.core.JsonParser$NumberType;
v3 := @parameter2: java.lang.String;
specialinvoke v0.<com.fasterxml.jackson.databind.ser.std.StdScalarSerializer: void <init>(java.lang.Class,boolean)>(v1, 0);
v0.<com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base: com.fasterxml.jackson.core.JsonParser$NumberType _numberType> = v2;
v0.<com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base: java.lang.String _schemaType> = v3;
v4 = <com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType INT>;
if v2 == v4 goto label1;
v5 = <com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType LONG>;
if v2 == v5 goto label1;
v6 = <com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType BIG_INTEGER>;
if v2 != v6 goto label2;
label1:
v7 = 1;
goto label3;
label2:
v7 = 0;
label3:
v0.<com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base: boolean _isInt> = v7;
return;
}
public com.fasterxml.jackson.databind.JsonNode getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)
{
com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base v0;
java.lang.reflect.Type v2;
com.fasterxml.jackson.databind.SerializerProvider v1;
java.lang.String v3;
com.fasterxml.jackson.databind.node.ObjectNode v4;
v0 := @this: com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base;
v1 := @parameter0: com.fasterxml.jackson.databind.SerializerProvider;
v2 := @parameter1: java.lang.reflect.Type;
v3 = v0.<com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base: java.lang.String _schemaType>;
v4 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base: com.fasterxml.jackson.databind.node.ObjectNode createSchemaNode(java.lang.String,boolean)>(v3, 1);
return v4;
}
public void acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType) throws com.fasterxml.jackson.databind.JsonMappingException
{
com.fasterxml.jackson.core.JsonParser$NumberType v4, v5;
com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base v0;
com.fasterxml.jackson.databind.JavaType v2;
boolean v3;
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper v1;
v0 := @this: com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base;
v1 := @parameter0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
v2 := @parameter1: com.fasterxml.jackson.databind.JavaType;
v3 = v0.<com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base: boolean _isInt>;
if v3 == 0 goto label1;
v4 = v0.<com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base: com.fasterxml.jackson.core.JsonParser$NumberType _numberType>;
virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base: void visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser$NumberType)>(v1, v2, v4);
goto label2;
label1:
v5 = v0.<com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base: com.fasterxml.jackson.core.JsonParser$NumberType _numberType>;
virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base: void visitFloatFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser$NumberType)>(v1, v2, v5);
label2:
return;
}
public com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty) throws com.fasterxml.jackson.databind.JsonMappingException
{
com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base v0;
com.fasterxml.jackson.databind.ser.std.ToStringSerializer v11;
com.fasterxml.jackson.databind.BeanProperty v2;
com.fasterxml.jackson.'annotation'.JsonFormat$Value v4;
int[] v5;
com.fasterxml.jackson.'annotation'.JsonFormat$Shape v6;
int v7, v8;
com.fasterxml.jackson.databind.JsonSerializer v10;
java.lang.Class v3, v9;
com.fasterxml.jackson.databind.SerializerProvider v1;
v0 := @this: com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base;
v1 := @parameter0: com.fasterxml.jackson.databind.SerializerProvider;
v2 := @parameter1: com.fasterxml.jackson.databind.BeanProperty;
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base: java.lang.Class handledType()>();
v4 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base: com.fasterxml.jackson.'annotation'.JsonFormat$Value findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class)>(v1, v2, v3);
if v4 == null goto label3;
v5 = <com.fasterxml.jackson.databind.ser.std.NumberSerializers$1: int[] $SwitchMap$com$fasterxml$jackson$annotation$JsonFormat$Shape>;
v6 = virtualinvoke v4.<com.fasterxml.jackson.'annotation'.JsonFormat$Value: com.fasterxml.jackson.'annotation'.JsonFormat$Shape getShape()>();
v7 = virtualinvoke v6.<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: int ordinal()>();
v8 = v5[v7];
lookupswitch(v8)
{
case 1: goto label1;
default: goto label3;
};
label1:
v9 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.NumberSerializers$Base: java.lang.Class handledType()>();
if v9 != class "Ljava/math/BigDecimal;" goto label2;
v10 = staticinvoke <com.fasterxml.jackson.databind.ser.std.NumberSerializer: com.fasterxml.jackson.databind.JsonSerializer bigDecimalAsStringSerializer()>();
return v10;
label2:
v11 = <com.fasterxml.jackson.databind.ser.std.ToStringSerializer: com.fasterxml.jackson.databind.ser.std.ToStringSerializer instance>;
return v11;
label3:
return v0;
}
}