public class com.fasterxml.jackson.databind.util.ISO8601Utils extends java.lang.Object
{
protected static final int DEF_8601_LEN;
private static final java.util.TimeZone TIMEZONE_Z;
public void <init>()
{
com.fasterxml.jackson.databind.util.ISO8601Utils v0;
v0 := @this: com.fasterxml.jackson.databind.util.ISO8601Utils;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.lang.String format(java.util.Date)
{
java.lang.String v2;
java.util.Date v0;
java.util.TimeZone v1;
v0 := @parameter0: java.util.Date;
v1 = <com.fasterxml.jackson.databind.util.ISO8601Utils: java.util.TimeZone TIMEZONE_Z>;
v2 = staticinvoke <com.fasterxml.jackson.databind.util.ISO8601Utils: java.lang.String format(java.util.Date,boolean,java.util.TimeZone)>(v0, 0, v1);
return v2;
}
public static java.lang.String format(java.util.Date, boolean)
{
java.util.Date v0;
java.util.TimeZone v2;
java.lang.String v3;
boolean v1;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: boolean;
v2 = <com.fasterxml.jackson.databind.util.ISO8601Utils: java.util.TimeZone TIMEZONE_Z>;
v3 = staticinvoke <com.fasterxml.jackson.databind.util.ISO8601Utils: java.lang.String format(java.util.Date,boolean,java.util.TimeZone)>(v0, v1, v2);
return v3;
}
public static java.lang.String format(java.util.Date, boolean, java.util.TimeZone)
{
java.util.Date v0;
java.util.Locale v3;
java.util.TimeZone v2;
java.lang.String v4;
boolean v1;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: boolean;
v2 := @parameter2: java.util.TimeZone;
v3 = <java.util.Locale: java.util.Locale US>;
v4 = staticinvoke <com.fasterxml.jackson.databind.util.ISO8601Utils: java.lang.String format(java.util.Date,boolean,java.util.TimeZone,java.util.Locale)>(v0, v1, v2, v3);
return v4;
}
public static java.lang.String format(java.util.Date, boolean, java.util.TimeZone, java.util.Locale)
{
java.util.Date v0;
java.lang.Integer v11, v13, v15, v17, v19, v23, v38, v39, v8;
java.lang.Character v37;
java.util.Locale v3;
boolean v1;
java.util.GregorianCalendar v4;
java.util.TimeZone v2;
java.lang.StringBuilder v5;
java.lang.Object[] v21, v35, v6;
long v25;
int v10, v12, v14, v16, v18, v22, v26, v27, v28, v29, v30, v31, v32, v33, v34, v7, v9;
java.lang.String v20, v24, v40, v41;
char v36;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: boolean;
v2 := @parameter2: java.util.TimeZone;
v3 := @parameter3: java.util.Locale;
v4 = new java.util.GregorianCalendar;
specialinvoke v4.<java.util.GregorianCalendar: void <init>(java.util.TimeZone,java.util.Locale)>(v2, v3);
virtualinvoke v4.<java.util.Calendar: void setTime(java.util.Date)>(v0);
v5 = new java.lang.StringBuilder;
specialinvoke v5.<java.lang.StringBuilder: void <init>(int)>(30);
v6 = newarray (java.lang.Object)[6];
v7 = virtualinvoke v4.<java.util.Calendar: int get(int)>(1);
v8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v7);
v6[0] = v8;
v9 = virtualinvoke v4.<java.util.Calendar: int get(int)>(2);
v10 = v9 + 1;
v11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v10);
v6[1] = v11;
v12 = virtualinvoke v4.<java.util.Calendar: int get(int)>(5);
v13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v12);
v6[2] = v13;
v14 = virtualinvoke v4.<java.util.Calendar: int get(int)>(11);
v15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v14);
v6[3] = v15;
v16 = virtualinvoke v4.<java.util.Calendar: int get(int)>(12);
v17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v16);
v6[4] = v17;
v18 = virtualinvoke v4.<java.util.Calendar: int get(int)>(13);
v19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v18);
v6[5] = v19;
v20 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%04d-%02d-%02dT%02d:%02d:%02d", v6);
virtualinvoke v5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v20);
if v1 == 0 goto label1;
v21 = newarray (java.lang.Object)[1];
v22 = virtualinvoke v4.<java.util.Calendar: int get(int)>(14);
v23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v22);
v21[0] = v23;
v24 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(".%03d", v21);
virtualinvoke v5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v24);
label1:
v25 = virtualinvoke v4.<java.util.Calendar: long getTimeInMillis()>();
v26 = virtualinvoke v2.<java.util.TimeZone: int getOffset(long)>(v25);
if v26 == 0 goto label4;
v27 = (int) 60000;
v28 = v26 / v27;
v29 = v28 / 60;
v30 = staticinvoke <java.lang.Math: int abs(int)>(v29);
v31 = (int) 60000;
v32 = v26 / v31;
v33 = v32 % 60;
v34 = staticinvoke <java.lang.Math: int abs(int)>(v33);
v35 = newarray (java.lang.Object)[3];
if v26 >= 0 goto label2;
v36 = 45;
goto label3;
label2:
v36 = 43;
label3:
v37 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(v36);
v35[0] = v37;
v38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v30);
v35[1] = v38;
v39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v34);
v35[2] = v39;
v40 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%c%02d:%02d", v35);
virtualinvoke v5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v40);
goto label5;
label4:
virtualinvoke v5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(90);
label5:
v41 = virtualinvoke v5.<java.lang.StringBuilder: java.lang.String toString()>();
return v41;
}
public static java.util.Date parse(java.lang.String, java.text.ParsePosition) throws java.text.ParseException
{
java.lang.IndexOutOfBoundsException v51, v54;
java.util.GregorianCalendar v17, v56;
java.lang.Exception v59;
java.lang.String v0, v40, v42, v44, v46, v47, v49, v52, v53, v55, v60, v61, v62, v65, v67;
java.util.Date v19, v58;
java.text.ParseException v66;
boolean v15, v22, v23, v27, v43, v45, v48, v5, v50, v63, v8;
java.util.TimeZone v38;
java.text.ParsePosition v1;
int v10, v11, v12, v13, v14, v16, v18, v2, v20, v21, v24, v26, v28, v29, v3, v30, v31, v32, v33, v34, v35, v39, v4, v41, v57, v6, v68, v7, v9;
char v25, v37;
java.lang.IllegalArgumentException v36;
java.lang.Class v64;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.text.ParsePosition;
virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
label01:
v2 = virtualinvoke v1.<java.text.ParsePosition: int getIndex()>();
v3 = v2 + 4;
v4 = staticinvoke <com.fasterxml.jackson.databind.util.ISO8601Utils: int parseInt(java.lang.String,int,int)>(v0, v2, v3);
v5 = staticinvoke <com.fasterxml.jackson.databind.util.ISO8601Utils: boolean checkOffset(java.lang.String,int,char)>(v0, v3, 45);
if v5 == 0 goto label02;
v3 = v3 + 1;
label02:
v6 = v3 + 2;
v7 = staticinvoke <com.fasterxml.jackson.databind.util.ISO8601Utils: int parseInt(java.lang.String,int,int)>(v0, v3, v6);
v8 = staticinvoke <com.fasterxml.jackson.databind.util.ISO8601Utils: boolean checkOffset(java.lang.String,int,char)>(v0, v6, 45);
if v8 == 0 goto label03;
v6 = v6 + 1;
label03:
v9 = v6 + 2;
v10 = staticinvoke <com.fasterxml.jackson.databind.util.ISO8601Utils: int parseInt(java.lang.String,int,int)>(v0, v6, v9);
v11 = 0;
v12 = 0;
v13 = 0;
v14 = 0;
v15 = staticinvoke <com.fasterxml.jackson.databind.util.ISO8601Utils: boolean checkOffset(java.lang.String,int,char)>(v0, v9, 84);
if v15 != 0 goto label05;
v16 = virtualinvoke v0.<java.lang.String: int length()>();
if v16 > v9 goto label05;
v17 = new java.util.GregorianCalendar;
v18 = v7 - 1;
specialinvoke v17.<java.util.GregorianCalendar: void <init>(int,int,int)>(v4, v18, v10);
virtualinvoke v1.<java.text.ParsePosition: void setIndex(int)>(v9);
v19 = virtualinvoke v17.<java.util.Calendar: java.util.Date getTime()>();
label04:
return v19;
label05:
if v15 == 0 goto label13;
v20 = v9 + 1;
v21 = v20 + 2;
v11 = staticinvoke <com.fasterxml.jackson.databind.util.ISO8601Utils: int parseInt(java.lang.String,int,int)>(v0, v20, v21);
v22 = staticinvoke <com.fasterxml.jackson.databind.util.ISO8601Utils: boolean checkOffset(java.lang.String,int,char)>(v0, v21, 58);
if v22 == 0 goto label06;
v21 = v21 + 1;
label06:
v9 = v21 + 2;
v12 = staticinvoke <com.fasterxml.jackson.databind.util.ISO8601Utils: int parseInt(java.lang.String,int,int)>(v0, v21, v9);
v23 = staticinvoke <com.fasterxml.jackson.databind.util.ISO8601Utils: boolean checkOffset(java.lang.String,int,char)>(v0, v9, 58);
if v23 == 0 goto label07;
v9 = v9 + 1;
label07:
v24 = virtualinvoke v0.<java.lang.String: int length()>();
if v24 <= v9 goto label13;
v25 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v9);
if v25 == 90 goto label13;
if v25 == 43 goto label13;
if v25 == 45 goto label13;
v26 = v9;
v9 = v9 + 2;
v13 = staticinvoke <com.fasterxml.jackson.databind.util.ISO8601Utils: int parseInt(java.lang.String,int,int)>(v0, v26, v9);
if v13 <= 59 goto label08;
if v13 >= 63 goto label08;
v13 = 59;
label08:
v27 = staticinvoke <com.fasterxml.jackson.databind.util.ISO8601Utils: boolean checkOffset(java.lang.String,int,char)>(v0, v9, 46);
if v27 == 0 goto label13;
v28 = v9 + 1;
v29 = v28 + 1;
v30 = staticinvoke <com.fasterxml.jackson.databind.util.ISO8601Utils: int indexOfNonDigit(java.lang.String,int)>(v0, v29);
v31 = v28 + 3;
v32 = staticinvoke <java.lang.Math: int min(int,int)>(v30, v31);
v33 = staticinvoke <com.fasterxml.jackson.databind.util.ISO8601Utils: int parseInt(java.lang.String,int,int)>(v0, v28, v32);
v34 = v32 - v28;
lookupswitch(v34)
{
case 1: goto label10;
case 2: goto label09;
default: goto label11;
};
label09:
v14 = v33 * 10;
goto label12;
label10:
v14 = v33 * 100;
goto label12;
label11:
v14 = v33;
label12:
v9 = v30;
label13:
v35 = virtualinvoke v0.<java.lang.String: int length()>();
if v35 > v9 goto label14;
v36 = new java.lang.IllegalArgumentException;
specialinvoke v36.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No time zone indicator");
throw v36;
label14:
v37 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v9);
if v37 != 90 goto label15;
v38 = <com.fasterxml.jackson.databind.util.ISO8601Utils: java.util.TimeZone TIMEZONE_Z>;
v39 = v9 + 1;
goto label20;
label15:
if v37 == 43 goto label16;
if v37 != 45 goto label19;
label16:
v40 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(v9);
v41 = virtualinvoke v40.<java.lang.String: int length()>();
v39 = v9 + v41;
v42 = "+0000";
v43 = virtualinvoke v42.<java.lang.String: boolean equals(java.lang.Object)>(v40);
if v43 != 0 goto label17;
v44 = "+00:00";
v45 = virtualinvoke v44.<java.lang.String: boolean equals(java.lang.Object)>(v40);
if v45 == 0 goto label18;
label17:
v38 = <com.fasterxml.jackson.databind.util.ISO8601Utils: java.util.TimeZone TIMEZONE_Z>;
goto label20;
label18:
v46 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v40) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("GMT\u0001");
v38 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>(v46);
v47 = virtualinvoke v38.<java.util.TimeZone: java.lang.String getID()>();
v48 = virtualinvoke v47.<java.lang.String: boolean equals(java.lang.Object)>(v46);
if v48 != 0 goto label20;
v49 = virtualinvoke v47.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "");
v50 = virtualinvoke v49.<java.lang.String: boolean equals(java.lang.Object)>(v46);
if v50 != 0 goto label20;
v51 = new java.lang.IndexOutOfBoundsException;
v52 = virtualinvoke v38.<java.util.TimeZone: java.lang.String getID()>();
v53 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v46, v52) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Mismatching time zone indicator: \u0001 given, resolves to \u0001");
specialinvoke v51.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v53);
throw v51;
label19:
v54 = new java.lang.IndexOutOfBoundsException;
v55 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (char)>(v37) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid time zone indicator \'\u0001\'");
specialinvoke v54.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v55);
throw v54;
label20:
v56 = new java.util.GregorianCalendar;
specialinvoke v56.<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>(v38);
virtualinvoke v56.<java.util.Calendar: void setLenient(boolean)>(0);
virtualinvoke v56.<java.util.Calendar: void set(int,int)>(1, v4);
v57 = v7 - 1;
virtualinvoke v56.<java.util.Calendar: void set(int,int)>(2, v57);
virtualinvoke v56.<java.util.Calendar: void set(int,int)>(5, v10);
virtualinvoke v56.<java.util.Calendar: void set(int,int)>(11, v11);
virtualinvoke v56.<java.util.Calendar: void set(int,int)>(12, v12);
virtualinvoke v56.<java.util.Calendar: void set(int,int)>(13, v13);
virtualinvoke v56.<java.util.Calendar: void set(int,int)>(14, v14);
virtualinvoke v1.<java.text.ParsePosition: void setIndex(int)>(v39);
v58 = virtualinvoke v56.<java.util.Calendar: java.util.Date getTime()>();
label21:
return v58;
label22:
v59 := @caughtexception;
if v0 != null goto label23;
v60 = null;
goto label24;
label23:
v60 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\"\u0001\"");
label24:
v61 = v60;
v62 = virtualinvoke v59.<java.lang.Exception: java.lang.String getMessage()>();
if v62 == null goto label25;
v63 = virtualinvoke v62.<java.lang.String: boolean isEmpty()>();
if v63 == 0 goto label26;
label25:
v64 = virtualinvoke v59.<java.lang.Object: java.lang.Class getClass()>();
v65 = virtualinvoke v64.<java.lang.Class: java.lang.String getName()>();
v62 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v65) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("(\u0001)");
label26:
v66 = new java.text.ParseException;
v67 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v61, v62) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to parse date \u0001: \u0001");
v68 = virtualinvoke v1.<java.text.ParsePosition: int getIndex()>();
specialinvoke v66.<java.text.ParseException: void <init>(java.lang.String,int)>(v67, v68);
virtualinvoke v66.<java.text.ParseException: java.lang.Throwable initCause(java.lang.Throwable)>(v59);
throw v66;
catch java.lang.Exception from label01 to label04 with label22;
catch java.lang.Exception from label05 to label21 with label22;
}
private static boolean checkOffset(java.lang.String, int, char)
{
int v1, v3;
char v2, v4;
java.lang.String v0;
boolean v5;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 := @parameter2: char;
v3 = virtualinvoke v0.<java.lang.String: int length()>();
if v1 >= v3 goto label1;
v4 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v1);
if v4 != v2 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
private static int parseInt(java.lang.String, int, int) throws java.lang.NumberFormatException
{
int v1, v12, v14, v18, v19, v2, v3, v5, v6, v8;
java.lang.String v0, v10, v11, v16, v17;
char v13, v7;
java.lang.NumberFormatException v15, v4, v9;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 := @parameter2: int;
if v1 < 0 goto label1;
v3 = virtualinvoke v0.<java.lang.String: int length()>();
if v2 > v3 goto label1;
if v1 <= v2 goto label2;
label1:
v4 = new java.lang.NumberFormatException;
specialinvoke v4.<java.lang.NumberFormatException: void <init>(java.lang.String)>(v0);
throw v4;
label2:
v5 = v1;
v6 = 0;
if v1 >= v2 goto label4;
v5 = v1 + 1;
v7 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v1);
v8 = staticinvoke <java.lang.Character: int digit(char,int)>(v7, 10);
if v8 >= 0 goto label3;
v9 = new java.lang.NumberFormatException;
v10 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(v1, v2);
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v10) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid number: \u0001");
specialinvoke v9.<java.lang.NumberFormatException: void <init>(java.lang.String)>(v11);
throw v9;
label3:
v6 = neg v8;
label4:
if v5 >= v2 goto label6;
v12 = v5;
v5 = v5 + 1;
v13 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v12);
v14 = staticinvoke <java.lang.Character: int digit(char,int)>(v13, 10);
if v14 >= 0 goto label5;
v15 = new java.lang.NumberFormatException;
v16 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(v1, v2);
v17 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v16) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid number: \u0001");
specialinvoke v15.<java.lang.NumberFormatException: void <init>(java.lang.String)>(v17);
throw v15;
label5:
v18 = v6 * 10;
v6 = v18 - v14;
goto label4;
label6:
v19 = neg v6;
return v19;
}
private static int indexOfNonDigit(java.lang.String, int)
{
int v1, v2, v3, v5;
char v4;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 = v1;
label1:
v3 = virtualinvoke v0.<java.lang.String: int length()>();
if v2 >= v3 goto label4;
v4 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v2);
if v4 < 48 goto label2;
if v4 <= 57 goto label3;
label2:
return v2;
label3:
v2 = v2 + 1;
goto label1;
label4:
v5 = virtualinvoke v0.<java.lang.String: int length()>();
return v5;
}
static void <clinit>()
{
int v1;
java.lang.String v0;
java.util.TimeZone v2;
v0 = "yyyy-MM-ddThh:mm:ss.SSS+00:00";
v1 = virtualinvoke v0.<java.lang.String: int length()>();
<com.fasterxml.jackson.databind.util.ISO8601Utils: int DEF_8601_LEN> = v1;
v2 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("UTC");
<com.fasterxml.jackson.databind.util.ISO8601Utils: java.util.TimeZone TIMEZONE_Z> = v2;
return;
}
}