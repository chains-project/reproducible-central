final class com.fasterxml.jackson.datatype.jdk8.OptionalLongSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer
{
private static final long serialVersionUID;
static final com.fasterxml.jackson.datatype.jdk8.OptionalLongSerializer INSTANCE;
public void <init>()
{
com.fasterxml.jackson.datatype.jdk8.OptionalLongSerializer v0;
v0 := @this: com.fasterxml.jackson.datatype.jdk8.OptionalLongSerializer;
specialinvoke v0.<com.fasterxml.jackson.databind.ser.std.StdScalarSerializer: void <init>(java.lang.Class)>(class "Ljava/util/OptionalLong;");
return;
}
public boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider, java.util.OptionalLong)
{
java.util.OptionalLong v2;
com.fasterxml.jackson.datatype.jdk8.OptionalLongSerializer v0;
com.fasterxml.jackson.databind.SerializerProvider v1;
boolean v3, v4;
v0 := @this: com.fasterxml.jackson.datatype.jdk8.OptionalLongSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.SerializerProvider;
v2 := @parameter1: java.util.OptionalLong;
if v2 == null goto label1;
v3 = virtualinvoke v2.<java.util.OptionalLong: boolean isPresent()>();
if v3 != 0 goto label2;
label1:
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
return v4;
}
public void acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType) throws com.fasterxml.jackson.databind.JsonMappingException
{
com.fasterxml.jackson.core.JsonParser$NumberType v4;
com.fasterxml.jackson.datatype.jdk8.OptionalLongSerializer v0;
com.fasterxml.jackson.databind.JavaType v2;
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor v3;
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper v1;
v0 := @this: com.fasterxml.jackson.datatype.jdk8.OptionalLongSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
v2 := @parameter1: com.fasterxml.jackson.databind.JavaType;
v3 = interfaceinvoke v1.<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor expectIntegerFormat(com.fasterxml.jackson.databind.JavaType)>(v2);
if v3 == null goto label1;
v4 = <com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType LONG>;
interfaceinvoke v3.<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor: void numberType(com.fasterxml.jackson.core.JsonParser$NumberType)>(v4);
label1:
return;
}
public void serialize(java.util.OptionalLong, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider) throws java.io.IOException
{
java.util.OptionalLong v1;
com.fasterxml.jackson.core.JsonGenerator v2;
com.fasterxml.jackson.datatype.jdk8.OptionalLongSerializer v0;
long v5;
com.fasterxml.jackson.databind.SerializerProvider v3;
boolean v4;
v0 := @this: com.fasterxml.jackson.datatype.jdk8.OptionalLongSerializer;
v1 := @parameter0: java.util.OptionalLong;
v2 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;
v3 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;
v4 = virtualinvoke v1.<java.util.OptionalLong: boolean isPresent()>();
if v4 == 0 goto label1;
v5 = virtualinvoke v1.<java.util.OptionalLong: long getAsLong()>();
virtualinvoke v2.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(long)>(v5);
goto label2;
label1:
virtualinvoke v2.<com.fasterxml.jackson.core.JsonGenerator: void writeNull()>();
label2:
return;
}
static void <clinit>()
{
com.fasterxml.jackson.datatype.jdk8.OptionalLongSerializer v0;
v0 = new com.fasterxml.jackson.datatype.jdk8.OptionalLongSerializer;
specialinvoke v0.<com.fasterxml.jackson.datatype.jdk8.OptionalLongSerializer: void <init>()>();
<com.fasterxml.jackson.datatype.jdk8.OptionalLongSerializer: com.fasterxml.jackson.datatype.jdk8.OptionalLongSerializer INSTANCE> = v0;
return;
}
}