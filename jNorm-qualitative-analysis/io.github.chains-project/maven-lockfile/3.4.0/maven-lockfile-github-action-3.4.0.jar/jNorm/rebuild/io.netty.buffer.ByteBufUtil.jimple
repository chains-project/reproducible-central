public final class io.netty.buffer.ByteBufUtil extends java.lang.Object
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private static final io.netty.util.concurrent.FastThreadLocal BYTE_ARRAYS;
private static final byte WRITE_UTF_UNKNOWN;
private static final int MAX_CHAR_BUFFER_SIZE;
private static final int THREAD_LOCAL_BUFFER_SIZE;
private static final int MAX_BYTES_PER_CHAR_UTF8;
static final int WRITE_CHUNK_SIZE;
static final io.netty.buffer.ByteBufAllocator DEFAULT_ALLOCATOR;
static final int MAX_TL_ARRAY_LEN;
private static final io.netty.util.ByteProcessor FIND_NON_ASCII;
static final boolean $assertionsDisabled;
static byte[] threadLocalTempArray(int)
{
int v0;
java.lang.Object v2;
io.netty.util.concurrent.FastThreadLocal v1;
v0 := @parameter0: int;
if v0 > 1024 goto label1;
v1 = <io.netty.buffer.ByteBufUtil: io.netty.util.concurrent.FastThreadLocal BYTE_ARRAYS>;
v2 = virtualinvoke v1.<io.netty.util.concurrent.FastThreadLocal: java.lang.Object get()>();
goto label2;
label1:
v2 = staticinvoke <io.netty.util.internal.PlatformDependent: byte[] allocateUninitializedArray(int)>(v0);
label2:
return v2;
}
public static boolean isAccessible(io.netty.buffer.ByteBuf)
{
io.netty.buffer.ByteBuf v0;
boolean v1;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 = virtualinvoke v0.<io.netty.buffer.ByteBuf: boolean isAccessible()>();
return v1;
}
public static io.netty.buffer.ByteBuf ensureAccessible(io.netty.buffer.ByteBuf)
{
io.netty.buffer.ByteBuf v0;
io.netty.util.IllegalReferenceCountException v2;
int v3;
boolean v1;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 = virtualinvoke v0.<io.netty.buffer.ByteBuf: boolean isAccessible()>();
if v1 != 0 goto label1;
v2 = new io.netty.util.IllegalReferenceCountException;
v3 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int refCnt()>();
specialinvoke v2.<io.netty.util.IllegalReferenceCountException: void <init>(int)>(v3);
throw v2;
label1:
return v0;
}
public static java.lang.String hexDump(io.netty.buffer.ByteBuf)
{
io.netty.buffer.ByteBuf v0;
int v1, v2;
java.lang.String v3;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int readerIndex()>();
v2 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int readableBytes()>();
v3 = staticinvoke <io.netty.buffer.ByteBufUtil: java.lang.String hexDump(io.netty.buffer.ByteBuf,int,int)>(v0, v1, v2);
return v3;
}
public static java.lang.String hexDump(io.netty.buffer.ByteBuf, int, int)
{
io.netty.buffer.ByteBuf v0;
int v1, v2;
java.lang.String v3;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = staticinvoke <io.netty.buffer.ByteBufUtil$HexUtil: java.lang.String hexDump(io.netty.buffer.ByteBuf,int,int)>(v0, v1, v2);
return v3;
}
public static java.lang.String hexDump(byte[])
{
int v1;
byte[] v0;
java.lang.String v2;
v0 := @parameter0: byte[];
v1 = lengthof v0;
v2 = staticinvoke <io.netty.buffer.ByteBufUtil: java.lang.String hexDump(byte[],int,int)>(v0, 0, v1);
return v2;
}
public static java.lang.String hexDump(byte[], int, int)
{
byte[] v0;
int v1, v2;
java.lang.String v3;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = staticinvoke <io.netty.buffer.ByteBufUtil$HexUtil: java.lang.String hexDump(byte[],int,int)>(v0, v1, v2);
return v3;
}
public static byte decodeHexByte(java.lang.CharSequence, int)
{
int v1;
byte v2;
java.lang.CharSequence v0;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: int;
v2 = staticinvoke <io.netty.util.internal.StringUtil: byte decodeHexByte(java.lang.CharSequence,int)>(v0, v1);
return v2;
}
public static byte[] decodeHexDump(java.lang.CharSequence)
{
int v1;
byte[] v2;
java.lang.CharSequence v0;
v0 := @parameter0: java.lang.CharSequence;
v1 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v2 = staticinvoke <io.netty.util.internal.StringUtil: byte[] decodeHexDump(java.lang.CharSequence,int,int)>(v0, 0, v1);
return v2;
}
public static byte[] decodeHexDump(java.lang.CharSequence, int, int)
{
byte[] v3;
java.lang.CharSequence v0;
int v1, v2;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = staticinvoke <io.netty.util.internal.StringUtil: byte[] decodeHexDump(java.lang.CharSequence,int,int)>(v0, v1, v2);
return v3;
}
public static boolean ensureWritableSuccess(int)
{
int v0;
boolean v1;
v0 := @parameter0: int;
if v0 == 0 goto label1;
if v0 != 2 goto label2;
label1:
v1 = 1;
goto label3;
label2:
v1 = 0;
label3:
return v1;
}
public static int hashCode(io.netty.buffer.ByteBuf)
{
byte v18;
io.netty.buffer.ByteBuf v0;
int v1, v10, v11, v12, v13, v14, v15, v16, v17, v2, v3, v4, v5, v8, v9;
java.nio.ByteOrder v6, v7;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int readableBytes()>();
v2 = v1 >>> 2;
v3 = v1 & 3;
v4 = 1;
v5 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int readerIndex()>();
v6 = virtualinvoke v0.<io.netty.buffer.ByteBuf: java.nio.ByteOrder order()>();
v7 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;
if v6 != v7 goto label2;
v8 = v2;
label1:
if v8 <= 0 goto label4;
v9 = 31 * v4;
v10 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int getInt(int)>(v5);
v4 = v9 + v10;
v5 = v5 + 4;
v8 = v8 - 1;
goto label1;
label2:
v11 = v2;
label3:
if v11 <= 0 goto label4;
v12 = 31 * v4;
v13 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int getInt(int)>(v5);
v14 = staticinvoke <io.netty.buffer.ByteBufUtil: int swapInt(int)>(v13);
v4 = v12 + v14;
v5 = v5 + 4;
v11 = v11 - 1;
goto label3;
label4:
v15 = v3;
label5:
if v15 <= 0 goto label6;
v16 = 31 * v4;
v17 = v5;
v5 = v5 + 1;
v18 = virtualinvoke v0.<io.netty.buffer.ByteBuf: byte getByte(int)>(v17);
v4 = v16 + v18;
v15 = v15 - 1;
goto label5;
label6:
if v4 != 0 goto label7;
v4 = 1;
label7:
return v4;
}
public static int indexOf(io.netty.buffer.ByteBuf, io.netty.buffer.ByteBuf)
{
byte v11, v33, v36, v40, v43, v56, v59, v63, v66;
long v16, v17, v18, v19;
boolean v26;
io.netty.buffer.ByteBuf v0, v1;
int v10, v12, v13, v14, v15, v2, v20, v21, v22, v23, v24, v25, v27, v28, v29, v3, v30, v31, v32, v34, v35, v37, v38, v39, v4, v41, v42, v44, v45, v46, v47, v48, v49, v5, v50, v51, v52, v53, v54, v55, v57, v58, v6, v60, v61, v62, v64, v65, v67, v68, v69, v7, v8, v9;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: io.netty.buffer.ByteBuf;
if v1 == null goto label01;
if v0 != null goto label02;
label01:
v2 = (int) -1;
return v2;
label02:
v3 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int readableBytes()>();
v4 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
if v3 <= v4 goto label03;
v5 = (int) -1;
return v5;
label03:
v6 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
v7 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int readableBytes()>();
if v7 != 0 goto label04;
return 0;
label04:
if v7 != 1 goto label05;
v8 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readerIndex()>();
v9 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int writerIndex()>();
v10 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int readerIndex()>();
v11 = virtualinvoke v0.<io.netty.buffer.ByteBuf: byte getByte(int)>(v10);
v12 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int indexOf(int,int,byte)>(v8, v9, v11);
return v12;
label05:
v13 = 0;
v14 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int readerIndex()>();
v15 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readerIndex()>();
v16 = staticinvoke <io.netty.buffer.ByteBufUtil: long maxSuf(io.netty.buffer.ByteBuf,int,int,boolean)>(v0, v7, v14, 1);
v17 = staticinvoke <io.netty.buffer.ByteBufUtil: long maxSuf(io.netty.buffer.ByteBuf,int,int,boolean)>(v0, v7, v14, 0);
v18 = v16 >> 32;
v19 = v17 >> 32;
v20 = staticinvoke <java.lang.Math: int max(int,int)>(v18, v19);
v21 = staticinvoke <java.lang.Math: int max(int,int)>(v16, v17);
v22 = v7 - v21;
v23 = v20 + 1;
v24 = staticinvoke <java.lang.Math: int min(int,int)>(v22, v23);
v25 = v14 + v21;
v26 = staticinvoke <io.netty.buffer.ByteBufUtil: boolean equals(io.netty.buffer.ByteBuf,int,io.netty.buffer.ByteBuf,int,int)>(v0, v14, v0, v25, v24);
if v26 == 0 goto label14;
v27 = (int) -1;
v28 = v27;
label06:
v29 = v6 - v7;
if v13 > v29 goto label23;
v30 = staticinvoke <java.lang.Math: int max(int,int)>(v20, v28);
v31 = v30 + 1;
label07:
if v31 >= v7 goto label08;
v32 = v31 + v14;
v33 = virtualinvoke v0.<io.netty.buffer.ByteBuf: byte getByte(int)>(v32);
v34 = v31 + v13;
v35 = v34 + v15;
v36 = virtualinvoke v1.<io.netty.buffer.ByteBuf: byte getByte(int)>(v35);
if v33 != v36 goto label08;
v31 = v31 + 1;
goto label07;
label08:
if v31 <= v6 goto label09;
v37 = (int) -1;
return v37;
label09:
if v31 < v7 goto label13;
v38 = v20;
label10:
if v38 <= v28 goto label11;
v39 = v38 + v14;
v40 = virtualinvoke v0.<io.netty.buffer.ByteBuf: byte getByte(int)>(v39);
v41 = v38 + v13;
v42 = v41 + v15;
v43 = virtualinvoke v1.<io.netty.buffer.ByteBuf: byte getByte(int)>(v42);
if v40 != v43 goto label11;
v38 = v38 - 1;
goto label10;
label11:
if v38 > v28 goto label12;
v44 = v13 + v15;
return v44;
label12:
v13 = v13 + v21;
v45 = v7 - v21;
v28 = v45 - 1;
goto label06;
label13:
v46 = v31 - v20;
v13 = v13 + v46;
v47 = (int) -1;
v28 = v47;
goto label06;
label14:
v48 = v20 + 1;
v49 = v7 - v20;
v50 = v49 - 1;
v51 = staticinvoke <java.lang.Math: int max(int,int)>(v48, v50);
v52 = v51 + 1;
label15:
v53 = v6 - v7;
if v13 > v53 goto label23;
v54 = v20 + 1;
label16:
if v54 >= v7 goto label17;
v55 = v54 + v14;
v56 = virtualinvoke v0.<io.netty.buffer.ByteBuf: byte getByte(int)>(v55);
v57 = v54 + v13;
v58 = v57 + v15;
v59 = virtualinvoke v1.<io.netty.buffer.ByteBuf: byte getByte(int)>(v58);
if v56 != v59 goto label17;
v54 = v54 + 1;
goto label16;
label17:
if v54 <= v6 goto label18;
v60 = (int) -1;
return v60;
label18:
if v54 < v7 goto label22;
v61 = v20;
label19:
if v61 < 0 goto label20;
v62 = v61 + v14;
v63 = virtualinvoke v0.<io.netty.buffer.ByteBuf: byte getByte(int)>(v62);
v64 = v61 + v13;
v65 = v64 + v15;
v66 = virtualinvoke v1.<io.netty.buffer.ByteBuf: byte getByte(int)>(v65);
if v63 != v66 goto label20;
v61 = v61 - 1;
goto label19;
label20:
if v61 >= 0 goto label21;
v67 = v13 + v15;
return v67;
label21:
v13 = v13 + v52;
goto label15;
label22:
v68 = v54 - v20;
v13 = v13 + v68;
goto label15;
label23:
v69 = (int) -1;
return v69;
}
private static long maxSuf(io.netty.buffer.ByteBuf, int, int, boolean)
{
long v15, v16;
byte v11, v13;
io.netty.buffer.ByteBuf v0;
int v1, v10, v12, v2, v4, v5, v6, v7, v8, v9;
boolean v14, v3;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: boolean;
v4 = 1;
v5 = (int) -1;
v6 = v5;
v7 = v2;
v8 = 1;
label1:
v9 = v7 + v8;
if v9 >= v1 goto label9;
v10 = v7 + v8;
v11 = virtualinvoke v0.<io.netty.buffer.ByteBuf: byte getByte(int)>(v10);
v12 = v6 + v8;
v13 = virtualinvoke v0.<io.netty.buffer.ByteBuf: byte getByte(int)>(v12);
if v3 == 0 goto label3;
if v11 >= v13 goto label2;
v14 = 1;
goto label5;
label2:
v14 = 0;
goto label5;
label3:
if v11 <= v13 goto label4;
v14 = 1;
goto label5;
label4:
v14 = 0;
label5:
if v14 == 0 goto label6;
v7 = v7 + v8;
v8 = 1;
v4 = v7 - v6;
goto label1;
label6:
if v11 != v13 goto label8;
if v8 == v4 goto label7;
v8 = v8 + 1;
goto label1;
label7:
v7 = v7 + v4;
v8 = 1;
goto label1;
label8:
v6 = v7;
v7 = v7 + 1;
v4 = 1;
v8 = 1;
goto label1;
label9:
v15 = v6 << 32;
v16 = v15 + v4;
return v16;
}
public static boolean equals(io.netty.buffer.ByteBuf, int, io.netty.buffer.ByteBuf, int, int)
{
long v14, v15, v18, v19, v20;
byte v16, v21, v23, v24;
io.netty.buffer.ByteBuf v0, v2;
int v1, v10, v13, v17, v22, v3, v4, v5, v6, v7, v8, v9;
java.nio.ByteOrder v11, v12;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: int;
v2 := @parameter2: io.netty.buffer.ByteBuf;
v3 := @parameter3: int;
v4 := @parameter4: int;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, "a");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "b");
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositiveOrZero(int,java.lang.String)>(v1, "aStartIndex");
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositiveOrZero(int,java.lang.String)>(v3, "bStartIndex");
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositiveOrZero(int,java.lang.String)>(v4, "length");
v5 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int writerIndex()>();
v6 = v5 - v4;
if v6 < v1 goto label01;
v7 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int writerIndex()>();
v8 = v7 - v4;
if v8 >= v3 goto label02;
label01:
return 0;
label02:
v9 = v4 >>> 3;
v10 = v4 & 7;
v11 = virtualinvoke v0.<io.netty.buffer.ByteBuf: java.nio.ByteOrder order()>();
v12 = virtualinvoke v2.<io.netty.buffer.ByteBuf: java.nio.ByteOrder order()>();
if v11 != v12 goto label05;
v13 = v9;
label03:
if v13 <= 0 goto label08;
v14 = virtualinvoke v0.<io.netty.buffer.ByteBuf: long getLong(int)>(v1);
v15 = virtualinvoke v2.<io.netty.buffer.ByteBuf: long getLong(int)>(v3);
v16 = v14 cmp v15;
if v16 == 0 goto label04;
return 0;
label04:
v1 = v1 + 8;
v3 = v3 + 8;
v13 = v13 - 1;
goto label03;
label05:
v17 = v9;
label06:
if v17 <= 0 goto label08;
v18 = virtualinvoke v0.<io.netty.buffer.ByteBuf: long getLong(int)>(v1);
v19 = virtualinvoke v2.<io.netty.buffer.ByteBuf: long getLong(int)>(v3);
v20 = staticinvoke <io.netty.buffer.ByteBufUtil: long swapLong(long)>(v19);
v21 = v18 cmp v20;
if v21 == 0 goto label07;
return 0;
label07:
v1 = v1 + 8;
v3 = v3 + 8;
v17 = v17 - 1;
goto label06;
label08:
v22 = v10;
label09:
if v22 <= 0 goto label11;
v23 = virtualinvoke v0.<io.netty.buffer.ByteBuf: byte getByte(int)>(v1);
v24 = virtualinvoke v2.<io.netty.buffer.ByteBuf: byte getByte(int)>(v3);
if v23 == v24 goto label10;
return 0;
label10:
v1 = v1 + 1;
v3 = v3 + 1;
v22 = v22 - 1;
goto label09;
label11:
return 1;
}
public static boolean equals(io.netty.buffer.ByteBuf, io.netty.buffer.ByteBuf)
{
io.netty.buffer.ByteBuf v0, v1;
int v2, v3, v4, v5;
boolean v6;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: io.netty.buffer.ByteBuf;
if v0 != v1 goto label1;
return 1;
label1:
v2 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int readableBytes()>();
v3 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
if v2 == v3 goto label2;
return 0;
label2:
v4 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int readerIndex()>();
v5 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readerIndex()>();
v6 = staticinvoke <io.netty.buffer.ByteBufUtil: boolean equals(io.netty.buffer.ByteBuf,int,io.netty.buffer.ByteBuf,int,int)>(v0, v4, v1, v5, v2);
return v6;
}
public static int compare(io.netty.buffer.ByteBuf, io.netty.buffer.ByteBuf)
{
long v15, v16, v17, v19, v20;
short v22, v23;
byte v18;
io.netty.buffer.ByteBuf v0, v1;
int v12, v2, v21, v24, v25, v3, v4, v5, v6, v7, v8;
boolean v11;
java.nio.ByteOrder v10, v13, v14, v9;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: io.netty.buffer.ByteBuf;
if v0 != v1 goto label01;
return 0;
label01:
v2 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int readableBytes()>();
v3 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
v4 = staticinvoke <java.lang.Math: int min(int,int)>(v2, v3);
v5 = v4 >>> 2;
v6 = v4 & 3;
v7 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int readerIndex()>();
v8 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readerIndex()>();
if v5 <= 0 goto label11;
v9 = virtualinvoke v0.<io.netty.buffer.ByteBuf: java.nio.ByteOrder order()>();
v10 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;
if v9 != v10 goto label02;
v11 = 1;
goto label03;
label02:
v11 = 0;
label03:
v12 = v5 << 2;
v13 = virtualinvoke v0.<io.netty.buffer.ByteBuf: java.nio.ByteOrder order()>();
v14 = virtualinvoke v1.<io.netty.buffer.ByteBuf: java.nio.ByteOrder order()>();
if v13 != v14 goto label06;
if v11 == 0 goto label04;
v15 = staticinvoke <io.netty.buffer.ByteBufUtil: long compareUintBigEndian(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int,int,int)>(v0, v1, v7, v8, v12);
goto label05;
label04:
v15 = staticinvoke <io.netty.buffer.ByteBufUtil: long compareUintLittleEndian(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int,int,int)>(v0, v1, v7, v8, v12);
label05:
v16 = v15;
goto label09;
label06:
if v11 == 0 goto label07;
v17 = staticinvoke <io.netty.buffer.ByteBufUtil: long compareUintBigEndianA(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int,int,int)>(v0, v1, v7, v8, v12);
goto label08;
label07:
v17 = staticinvoke <io.netty.buffer.ByteBufUtil: long compareUintBigEndianB(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int,int,int)>(v0, v1, v7, v8, v12);
label08:
v16 = v17;
label09:
v18 = v16 cmp 0L;
if v18 == 0 goto label10;
v19 = staticinvoke <java.lang.Math: long max(long,long)>(-2147483648L, v16);
v20 = staticinvoke <java.lang.Math: long min(long,long)>(2147483647L, v19);
return v20;
label10:
v7 = v7 + v12;
v8 = v8 + v12;
label11:
v21 = v7 + v6;
label12:
if v7 >= v21 goto label14;
v22 = virtualinvoke v0.<io.netty.buffer.ByteBuf: short getUnsignedByte(int)>(v7);
v23 = virtualinvoke v1.<io.netty.buffer.ByteBuf: short getUnsignedByte(int)>(v8);
v24 = v22 - v23;
if v24 == 0 goto label13;
return v24;
label13:
v7 = v7 + 1;
v8 = v8 + 1;
goto label12;
label14:
v25 = v2 - v3;
return v25;
}
private static long compareUintBigEndian(io.netty.buffer.ByteBuf, io.netty.buffer.ByteBuf, int, int, int)
{
long v6, v7, v8;
byte v9;
io.netty.buffer.ByteBuf v0, v1;
int v2, v3, v4, v5;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: io.netty.buffer.ByteBuf;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 := @parameter4: int;
v5 = v2 + v4;
label1:
if v2 >= v5 goto label3;
v6 = virtualinvoke v0.<io.netty.buffer.ByteBuf: long getUnsignedInt(int)>(v2);
v7 = virtualinvoke v1.<io.netty.buffer.ByteBuf: long getUnsignedInt(int)>(v3);
v8 = v6 - v7;
v9 = v8 cmp 0L;
if v9 == 0 goto label2;
return v8;
label2:
v2 = v2 + 4;
v3 = v3 + 4;
goto label1;
label3:
return 0L;
}
private static long compareUintLittleEndian(io.netty.buffer.ByteBuf, io.netty.buffer.ByteBuf, int, int, int)
{
long v10, v6, v7, v8, v9;
byte v11;
io.netty.buffer.ByteBuf v0, v1;
int v2, v3, v4, v5;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: io.netty.buffer.ByteBuf;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 := @parameter4: int;
v5 = v2 + v4;
label1:
if v2 >= v5 goto label3;
v6 = virtualinvoke v0.<io.netty.buffer.ByteBuf: long getUnsignedIntLE(int)>(v2);
v7 = staticinvoke <io.netty.buffer.ByteBufUtil: long uintFromLE(long)>(v6);
v8 = virtualinvoke v1.<io.netty.buffer.ByteBuf: long getUnsignedIntLE(int)>(v3);
v9 = staticinvoke <io.netty.buffer.ByteBufUtil: long uintFromLE(long)>(v8);
v10 = v7 - v9;
v11 = v10 cmp 0L;
if v11 == 0 goto label2;
return v10;
label2:
v2 = v2 + 4;
v3 = v3 + 4;
goto label1;
label3:
return 0L;
}
private static long compareUintBigEndianA(io.netty.buffer.ByteBuf, io.netty.buffer.ByteBuf, int, int, int)
{
long v6, v7, v8, v9;
byte v10;
io.netty.buffer.ByteBuf v0, v1;
int v2, v3, v4, v5;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: io.netty.buffer.ByteBuf;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 := @parameter4: int;
v5 = v2 + v4;
label1:
if v2 >= v5 goto label3;
v6 = virtualinvoke v0.<io.netty.buffer.ByteBuf: long getUnsignedInt(int)>(v2);
v7 = virtualinvoke v1.<io.netty.buffer.ByteBuf: long getUnsignedIntLE(int)>(v3);
v8 = staticinvoke <io.netty.buffer.ByteBufUtil: long uintFromLE(long)>(v7);
v9 = v6 - v8;
v10 = v9 cmp 0L;
if v10 == 0 goto label2;
return v9;
label2:
v2 = v2 + 4;
v3 = v3 + 4;
goto label1;
label3:
return 0L;
}
private static long compareUintBigEndianB(io.netty.buffer.ByteBuf, io.netty.buffer.ByteBuf, int, int, int)
{
long v6, v7, v8, v9;
byte v10;
io.netty.buffer.ByteBuf v0, v1;
int v2, v3, v4, v5;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: io.netty.buffer.ByteBuf;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 := @parameter4: int;
v5 = v2 + v4;
label1:
if v2 >= v5 goto label3;
v6 = virtualinvoke v0.<io.netty.buffer.ByteBuf: long getUnsignedIntLE(int)>(v2);
v7 = staticinvoke <io.netty.buffer.ByteBufUtil: long uintFromLE(long)>(v6);
v8 = virtualinvoke v1.<io.netty.buffer.ByteBuf: long getUnsignedInt(int)>(v3);
v9 = v7 - v8;
v10 = v9 cmp 0L;
if v10 == 0 goto label2;
return v9;
label2:
v2 = v2 + 4;
v3 = v3 + 4;
goto label1;
label3:
return 0L;
}
private static long uintFromLE(long)
{
long v0, v1, v2;
v0 := @parameter0: long;
v1 = staticinvoke <java.lang.Long: long reverseBytes(long)>(v0);
v2 = v1 >>> 32;
return v2;
}
private static int unrolledFirstIndexOf(io.netty.buffer.AbstractByteBuf, int, int, byte)
{
byte v13, v17, v21, v25, v29, v3, v6, v9;
boolean v4;
io.netty.buffer.AbstractByteBuf v0;
java.lang.AssertionError v5;
int v1, v10, v11, v12, v14, v15, v16, v18, v19, v2, v20, v22, v23, v24, v26, v27, v28, v30, v31, v7, v8;
v0 := @parameter0: io.netty.buffer.AbstractByteBuf;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: byte;
v4 = <io.netty.buffer.ByteBufUtil: boolean $assertionsDisabled>;
if v4 != 0 goto label02;
if v2 <= 0 goto label01;
if v2 < 8 goto label02;
label01:
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label02:
v6 = virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: byte _getByte(int)>(v1);
if v6 != v3 goto label03;
return v1;
label03:
if v2 != 1 goto label04;
v7 = (int) -1;
return v7;
label04:
v8 = v1 + 1;
v9 = virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: byte _getByte(int)>(v8);
if v9 != v3 goto label05;
v10 = v1 + 1;
return v10;
label05:
if v2 != 2 goto label06;
v11 = (int) -1;
return v11;
label06:
v12 = v1 + 2;
v13 = virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: byte _getByte(int)>(v12);
if v13 != v3 goto label07;
v14 = v1 + 2;
return v14;
label07:
if v2 != 3 goto label08;
v15 = (int) -1;
return v15;
label08:
v16 = v1 + 3;
v17 = virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: byte _getByte(int)>(v16);
if v17 != v3 goto label09;
v18 = v1 + 3;
return v18;
label09:
if v2 != 4 goto label10;
v19 = (int) -1;
return v19;
label10:
v20 = v1 + 4;
v21 = virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: byte _getByte(int)>(v20);
if v21 != v3 goto label11;
v22 = v1 + 4;
return v22;
label11:
if v2 != 5 goto label12;
v23 = (int) -1;
return v23;
label12:
v24 = v1 + 5;
v25 = virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: byte _getByte(int)>(v24);
if v25 != v3 goto label13;
v26 = v1 + 5;
return v26;
label13:
if v2 != 6 goto label14;
v27 = (int) -1;
return v27;
label14:
v28 = v1 + 6;
v29 = virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: byte _getByte(int)>(v28);
if v29 != v3 goto label15;
v30 = v1 + 6;
return v30;
label15:
v31 = (int) -1;
return v31;
}
static int firstIndexOf(io.netty.buffer.AbstractByteBuf, int, int, byte)
{
byte v3;
boolean v10, v11, v21, v22, v24, v25, v8;
io.netty.buffer.AbstractByteBuf v0;
java.nio.ByteOrder v19, v20, v23;
long v26, v28;
java.lang.AssertionError v12;
int v1, v13, v14, v15, v16, v17, v18, v2, v27, v29, v30, v31, v4, v5, v6, v7, v9;
v0 := @parameter0: io.netty.buffer.AbstractByteBuf;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: byte;
v4 = staticinvoke <java.lang.Math: int max(int,int)>(v1, 0);
if v4 >= v2 goto label01;
v5 = virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: int capacity()>();
if v5 != 0 goto label02;
label01:
v6 = (int) -1;
return v6;
label02:
v7 = v2 - v4;
virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: void checkIndex(int,int)>(v4, v7);
v8 = staticinvoke <io.netty.util.internal.PlatformDependent: boolean isUnaligned()>();
if v8 != 0 goto label03;
v9 = staticinvoke <io.netty.buffer.ByteBufUtil: int linearFirstIndexOf(io.netty.buffer.AbstractByteBuf,int,int,byte)>(v0, v4, v2, v3);
return v9;
label03:
v10 = <io.netty.buffer.ByteBufUtil: boolean $assertionsDisabled>;
if v10 != 0 goto label04;
v11 = staticinvoke <io.netty.util.internal.PlatformDependent: boolean isUnaligned()>();
if v11 != 0 goto label04;
v12 = new java.lang.AssertionError;
specialinvoke v12.<java.lang.AssertionError: void <init>()>();
throw v12;
label04:
v13 = v4;
v14 = v7 & 7;
if v14 <= 0 goto label06;
v15 = staticinvoke <io.netty.buffer.ByteBufUtil: int unrolledFirstIndexOf(io.netty.buffer.AbstractByteBuf,int,int,byte)>(v0, v4, v14, v3);
v16 = (int) -1;
if v15 == v16 goto label05;
return v15;
label05:
v13 = v4 + v14;
if v13 != v2 goto label06;
v17 = (int) -1;
return v17;
label06:
v18 = v7 >>> 3;
v19 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();
v20 = virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: java.nio.ByteOrder order()>();
if v19 != v20 goto label07;
v21 = 1;
goto label08;
label07:
v21 = 0;
label08:
v22 = v21;
v23 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;
if v19 != v23 goto label09;
v24 = 1;
goto label10;
label09:
v24 = 0;
label10:
v25 = v24;
v26 = staticinvoke <io.netty.buffer.ByteBufUtil$SWARByteSearch: long compilePattern(byte)>(v3);
v27 = 0;
label11:
if v27 >= v18 goto label15;
if v25 == 0 goto label12;
v28 = virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: long _getLongLE(int)>(v13);
goto label13;
label12:
v28 = virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: long _getLong(int)>(v13);
label13:
v29 = staticinvoke <io.netty.buffer.ByteBufUtil$SWARByteSearch: int firstAnyPattern(long,long,boolean)>(v28, v26, v22);
if v29 >= 8 goto label14;
v30 = v13 + v29;
return v30;
label14:
v13 = v13 + 8;
v27 = v27 + 1;
goto label11;
label15:
v31 = (int) -1;
return v31;
}
private static int linearFirstIndexOf(io.netty.buffer.AbstractByteBuf, int, int, byte)
{
io.netty.buffer.AbstractByteBuf v0;
byte v3, v5;
int v1, v2, v4, v6;
v0 := @parameter0: io.netty.buffer.AbstractByteBuf;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: byte;
v4 = v1;
label1:
if v4 >= v2 goto label3;
v5 = virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: byte _getByte(int)>(v4);
if v5 != v3 goto label2;
return v4;
label2:
v4 = v4 + 1;
goto label1;
label3:
v6 = (int) -1;
return v6;
}
public static int indexOf(io.netty.buffer.ByteBuf, int, int, byte)
{
byte v3;
io.netty.buffer.ByteBuf v0;
int v1, v2, v4;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: byte;
v4 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int indexOf(int,int,byte)>(v1, v2, v3);
return v4;
}
public static short swapShort(short)
{
short v0, v1;
v0 := @parameter0: short;
v1 = staticinvoke <java.lang.Short: short reverseBytes(short)>(v0);
return v1;
}
public static int swapMedium(int)
{
int v0, v1, v2, v3, v4, v5, v6, v7, v8, v9;
v0 := @parameter0: int;
v1 = v0 << 16;
v2 = v1 & 16711680;
v3 = (int) 65280;
v4 = v0 & v3;
v5 = v2 | v4;
v6 = v0 >>> 16;
v7 = v6 & 255;
v8 = v5 | v7;
v9 = v8 & 8388608;
if v9 == 0 goto label1;
v8 = v8 | -16777216;
label1:
return v8;
}
public static int swapInt(int)
{
int v0, v1;
v0 := @parameter0: int;
v1 = staticinvoke <java.lang.Integer: int reverseBytes(int)>(v0);
return v1;
}
public static long swapLong(long)
{
long v0, v1;
v0 := @parameter0: long;
v1 = staticinvoke <java.lang.Long: long reverseBytes(long)>(v0);
return v1;
}
public static io.netty.buffer.ByteBuf writeShortBE(io.netty.buffer.ByteBuf, int)
{
java.nio.ByteOrder v2, v3;
short v5;
io.netty.buffer.ByteBuf v0, v4;
int v1;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: int;
v2 = virtualinvoke v0.<io.netty.buffer.ByteBuf: java.nio.ByteOrder order()>();
v3 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;
if v2 != v3 goto label1;
v4 = virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeShort(int)>(v1);
goto label2;
label1:
v5 = staticinvoke <io.netty.buffer.ByteBufUtil: short swapShort(short)>(v1);
v4 = virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeShort(int)>(v5);
label2:
return v4;
}
public static io.netty.buffer.ByteBuf setShortBE(io.netty.buffer.ByteBuf, int, int)
{
java.nio.ByteOrder v3, v4;
short v6;
io.netty.buffer.ByteBuf v0, v5;
int v1, v2;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = virtualinvoke v0.<io.netty.buffer.ByteBuf: java.nio.ByteOrder order()>();
v4 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;
if v3 != v4 goto label1;
v5 = virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf setShort(int,int)>(v1, v2);
goto label2;
label1:
v6 = staticinvoke <io.netty.buffer.ByteBufUtil: short swapShort(short)>(v2);
v5 = virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf setShort(int,int)>(v1, v6);
label2:
return v5;
}
public static io.netty.buffer.ByteBuf writeMediumBE(io.netty.buffer.ByteBuf, int)
{
java.nio.ByteOrder v2, v3;
io.netty.buffer.ByteBuf v0, v4;
int v1, v5;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: int;
v2 = virtualinvoke v0.<io.netty.buffer.ByteBuf: java.nio.ByteOrder order()>();
v3 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;
if v2 != v3 goto label1;
v4 = virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeMedium(int)>(v1);
goto label2;
label1:
v5 = staticinvoke <io.netty.buffer.ByteBufUtil: int swapMedium(int)>(v1);
v4 = virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeMedium(int)>(v5);
label2:
return v4;
}
public static io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBufAllocator, io.netty.buffer.ByteBuf, int)
{
java.lang.Throwable v4;
io.netty.buffer.ByteBuf v1, v3;
io.netty.buffer.ByteBufAllocator v0;
int v2;
v0 := @parameter0: io.netty.buffer.ByteBufAllocator;
v1 := @parameter1: io.netty.buffer.ByteBuf;
v2 := @parameter2: int;
v3 = interfaceinvoke v0.<io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf buffer(int)>(v2);
label1:
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf)>(v3);
label2:
return v3;
label3:
v4 := @caughtexception;
virtualinvoke v3.<io.netty.buffer.ByteBuf: boolean release()>();
throw v4;
catch java.lang.Throwable from label1 to label2 with label3;
}
static int lastIndexOf(io.netty.buffer.AbstractByteBuf, int, int, byte)
{
io.netty.buffer.AbstractByteBuf v0;
java.lang.AssertionError v5;
byte v11, v3;
int v1, v10, v12, v2, v6, v7, v8, v9;
boolean v4;
v0 := @parameter0: io.netty.buffer.AbstractByteBuf;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: byte;
v4 = <io.netty.buffer.ByteBufUtil: boolean $assertionsDisabled>;
if v4 != 0 goto label1;
if v1 > v2 goto label1;
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label1:
v6 = virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: int capacity()>();
v7 = staticinvoke <java.lang.Math: int min(int,int)>(v1, v6);
if v7 < 0 goto label2;
if v6 != 0 goto label3;
label2:
v8 = (int) -1;
return v8;
label3:
v9 = v7 - v2;
virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: void checkIndex(int,int)>(v2, v9);
v10 = v7 - 1;
label4:
if v10 < v2 goto label6;
v11 = virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: byte _getByte(int)>(v10);
if v11 != v3 goto label5;
return v10;
label5:
v10 = v10 - 1;
goto label4;
label6:
v12 = (int) -1;
return v12;
}
private static java.lang.CharSequence checkCharSequenceBounds(java.lang.CharSequence, int, int)
{
java.lang.IndexOutOfBoundsException v6;
java.lang.CharSequence v0;
int v1, v2, v3, v4, v7;
java.lang.String v8;
boolean v5;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = v2 - v1;
v4 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v5 = staticinvoke <io.netty.util.internal.MathUtil: boolean isOutOfBounds(int,int,int)>(v1, v3, v4);
if v5 == 0 goto label1;
v6 = new java.lang.IndexOutOfBoundsException;
v7 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int,int)>(v1, v2, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("expected: 0 <= start(\u0001) <= end (\u0001) <= seq.length(\u0001)");
specialinvoke v6.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v8);
throw v6;
label1:
return v0;
}
public static io.netty.buffer.ByteBuf writeUtf8(io.netty.buffer.ByteBufAllocator, java.lang.CharSequence)
{
io.netty.buffer.ByteBuf v3;
java.lang.CharSequence v1;
io.netty.buffer.ByteBufAllocator v0;
int v2;
v0 := @parameter0: io.netty.buffer.ByteBufAllocator;
v1 := @parameter1: java.lang.CharSequence;
v2 = staticinvoke <io.netty.buffer.ByteBufUtil: int utf8MaxBytes(java.lang.CharSequence)>(v1);
v3 = interfaceinvoke v0.<io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf buffer(int)>(v2);
staticinvoke <io.netty.buffer.ByteBufUtil: int writeUtf8(io.netty.buffer.ByteBuf,java.lang.CharSequence)>(v3, v1);
return v3;
}
public static int writeUtf8(io.netty.buffer.ByteBuf, java.lang.CharSequence)
{
io.netty.buffer.ByteBuf v0;
java.lang.CharSequence v1;
int v2, v3, v4;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: java.lang.CharSequence;
v2 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
v3 = staticinvoke <io.netty.buffer.ByteBufUtil: int utf8MaxBytes(int)>(v2);
v4 = staticinvoke <io.netty.buffer.ByteBufUtil: int reserveAndWriteUtf8Seq(io.netty.buffer.ByteBuf,java.lang.CharSequence,int,int,int)>(v0, v1, 0, v2, v3);
return v4;
}
public static int writeUtf8(io.netty.buffer.ByteBuf, java.lang.CharSequence, int, int)
{
io.netty.buffer.ByteBuf v0;
java.lang.CharSequence v1;
int v2, v3, v4, v5, v6;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: java.lang.CharSequence;
v2 := @parameter2: int;
v3 := @parameter3: int;
staticinvoke <io.netty.buffer.ByteBufUtil: java.lang.CharSequence checkCharSequenceBounds(java.lang.CharSequence,int,int)>(v1, v2, v3);
v4 = v3 - v2;
v5 = staticinvoke <io.netty.buffer.ByteBufUtil: int utf8MaxBytes(int)>(v4);
v6 = staticinvoke <io.netty.buffer.ByteBufUtil: int reserveAndWriteUtf8Seq(io.netty.buffer.ByteBuf,java.lang.CharSequence,int,int,int)>(v0, v1, v2, v3, v5);
return v6;
}
public static int reserveAndWriteUtf8(io.netty.buffer.ByteBuf, java.lang.CharSequence, int)
{
io.netty.buffer.ByteBuf v0;
java.lang.CharSequence v1;
int v2, v3, v4;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: java.lang.CharSequence;
v2 := @parameter2: int;
v3 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
v4 = staticinvoke <io.netty.buffer.ByteBufUtil: int reserveAndWriteUtf8Seq(io.netty.buffer.ByteBuf,java.lang.CharSequence,int,int,int)>(v0, v1, 0, v3, v2);
return v4;
}
public static int reserveAndWriteUtf8(io.netty.buffer.ByteBuf, java.lang.CharSequence, int, int, int)
{
io.netty.buffer.ByteBuf v0;
java.lang.CharSequence v1, v5;
int v2, v3, v4, v6;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: java.lang.CharSequence;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 := @parameter4: int;
v5 = staticinvoke <io.netty.buffer.ByteBufUtil: java.lang.CharSequence checkCharSequenceBounds(java.lang.CharSequence,int,int)>(v1, v2, v3);
v6 = staticinvoke <io.netty.buffer.ByteBufUtil: int reserveAndWriteUtf8Seq(io.netty.buffer.ByteBuf,java.lang.CharSequence,int,int,int)>(v0, v5, v2, v3, v4);
return v6;
}
private static int reserveAndWriteUtf8Seq(io.netty.buffer.ByteBuf, java.lang.CharSequence, int, int, int)
{
byte[] v15;
io.netty.buffer.ByteBuf v0;
java.nio.charset.Charset v14;
int v10, v16, v2, v3, v4, v7, v8, v9;
java.lang.String v13;
boolean v11, v5, v6;
java.lang.CharSequence v1, v12;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: java.lang.CharSequence;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 := @parameter4: int;
label1:
v5 = v0 instanceof io.netty.buffer.WrappedCompositeByteBuf;
if v5 == 0 goto label2;
v0 = virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf unwrap()>();
goto label1;
label2:
v6 = v0 instanceof io.netty.buffer.AbstractByteBuf;
if v6 == 0 goto label3;
virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: void ensureWritable0(int)>(v4);
v7 = v0.<io.netty.buffer.AbstractByteBuf: int writerIndex>;
v8 = staticinvoke <io.netty.buffer.ByteBufUtil: int writeUtf8(io.netty.buffer.AbstractByteBuf,int,int,java.lang.CharSequence,int,int)>(v0, v7, v4, v1, v2, v3);
v9 = v0.<io.netty.buffer.AbstractByteBuf: int writerIndex>;
v10 = v9 + v8;
v0.<io.netty.buffer.AbstractByteBuf: int writerIndex> = v10;
return v8;
label3:
v11 = v0 instanceof io.netty.buffer.WrappedByteBuf;
if v11 == 0 goto label4;
v0 = virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf unwrap()>();
goto label1;
label4:
v12 = interfaceinvoke v1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(v2, v3);
v13 = virtualinvoke v12.<java.lang.Object: java.lang.String toString()>();
v14 = <io.netty.util.CharsetUtil: java.nio.charset.Charset UTF_8>;
v15 = virtualinvoke v13.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(v14);
virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeBytes(byte[])>(v15);
v16 = lengthof v15;
return v16;
}
static int writeUtf8(io.netty.buffer.AbstractByteBuf, int, int, java.lang.CharSequence, int)
{
io.netty.buffer.AbstractByteBuf v0;
java.lang.CharSequence v3;
int v1, v2, v4, v5;
v0 := @parameter0: io.netty.buffer.AbstractByteBuf;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: java.lang.CharSequence;
v4 := @parameter4: int;
v5 = staticinvoke <io.netty.buffer.ByteBufUtil: int writeUtf8(io.netty.buffer.AbstractByteBuf,int,int,java.lang.CharSequence,int,int)>(v0, v1, v2, v3, 0, v4);
return v5;
}
static int writeUtf8(io.netty.buffer.AbstractByteBuf, int, int, java.lang.CharSequence, int, int)
{
byte[] v10, v19;
long v11, v16;
java.lang.AssertionError v26;
java.nio.ByteBuffer v27;
int v1, v12, v13, v14, v17, v2, v20, v21, v22, v25, v28, v29, v30, v4, v5, v7;
boolean v15, v18, v23, v24, v6, v8, v9;
io.netty.buffer.AbstractByteBuf v0;
java.lang.CharSequence v3;
v0 := @parameter0: io.netty.buffer.AbstractByteBuf;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: java.lang.CharSequence;
v4 := @parameter4: int;
v5 := @parameter5: int;
v6 = v3 instanceof io.netty.util.AsciiString;
if v6 == 0 goto label1;
staticinvoke <io.netty.buffer.ByteBufUtil: void writeAsciiString(io.netty.buffer.AbstractByteBuf,int,io.netty.util.AsciiString,int,int)>(v0, v1, v3, v4, v5);
v7 = v5 - v4;
return v7;
label1:
v8 = staticinvoke <io.netty.util.internal.PlatformDependent: boolean hasUnsafe()>();
if v8 == 0 goto label3;
v9 = virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: boolean hasArray()>();
if v9 == 0 goto label2;
v10 = virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: byte[] array()>();
v11 = staticinvoke <io.netty.util.internal.PlatformDependent: long byteArrayBaseOffset()>();
v12 = virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: int arrayOffset()>();
v13 = v12 + v1;
v14 = staticinvoke <io.netty.buffer.ByteBufUtil: int unsafeWriteUtf8(byte[],long,int,java.lang.CharSequence,int,int)>(v10, v11, v13, v3, v4, v5);
return v14;
label2:
v15 = virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: boolean hasMemoryAddress()>();
if v15 == 0 goto label6;
v16 = virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: long memoryAddress()>();
v17 = staticinvoke <io.netty.buffer.ByteBufUtil: int unsafeWriteUtf8(byte[],long,int,java.lang.CharSequence,int,int)>(null, v16, v1, v3, v4, v5);
return v17;
label3:
v18 = virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: boolean hasArray()>();
if v18 == 0 goto label4;
v19 = virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: byte[] array()>();
v20 = virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: int arrayOffset()>();
v21 = v20 + v1;
v22 = staticinvoke <io.netty.buffer.ByteBufUtil: int safeArrayWriteUtf8(byte[],int,java.lang.CharSequence,int,int)>(v19, v21, v3, v4, v5);
return v22;
label4:
v23 = virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: boolean isDirect()>();
if v23 == 0 goto label6;
v24 = <io.netty.buffer.ByteBufUtil: boolean $assertionsDisabled>;
if v24 != 0 goto label5;
v25 = virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: int nioBufferCount()>();
if v25 == 1 goto label5;
v26 = new java.lang.AssertionError;
specialinvoke v26.<java.lang.AssertionError: void <init>()>();
throw v26;
label5:
v27 = virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: java.nio.ByteBuffer internalNioBuffer(int,int)>(v1, v2);
v28 = virtualinvoke v27.<java.nio.ByteBuffer: int position()>();
v29 = staticinvoke <io.netty.buffer.ByteBufUtil: int safeDirectWriteUtf8(java.nio.ByteBuffer,int,java.lang.CharSequence,int,int)>(v27, v28, v3, v4, v5);
return v29;
label6:
v30 = staticinvoke <io.netty.buffer.ByteBufUtil: int safeWriteUtf8(io.netty.buffer.AbstractByteBuf,int,java.lang.CharSequence,int,int)>(v0, v1, v3, v4, v5);
return v30;
}
static void writeAsciiString(io.netty.buffer.AbstractByteBuf, int, io.netty.util.AsciiString, int, int)
{
byte[] v10, v11, v15, v19, v20, v23;
io.netty.util.AsciiString v2;
long v16, v17;
int v1, v12, v13, v21, v22, v3, v4, v5, v6, v7;
boolean v14, v18, v8, v9;
io.netty.buffer.AbstractByteBuf v0;
v0 := @parameter0: io.netty.buffer.AbstractByteBuf;
v1 := @parameter1: int;
v2 := @parameter2: io.netty.util.AsciiString;
v3 := @parameter3: int;
v4 := @parameter4: int;
v5 = virtualinvoke v2.<io.netty.util.AsciiString: int arrayOffset()>();
v6 = v5 + v3;
v7 = v4 - v3;
v8 = staticinvoke <io.netty.util.internal.PlatformDependent: boolean hasUnsafe()>();
if v8 == 0 goto label2;
v9 = virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: boolean hasArray()>();
if v9 == 0 goto label1;
v10 = virtualinvoke v2.<io.netty.util.AsciiString: byte[] array()>();
v11 = virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: byte[] array()>();
v12 = virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: int arrayOffset()>();
v13 = v12 + v1;
staticinvoke <io.netty.util.internal.PlatformDependent: void copyMemory(byte[],int,byte[],int,long)>(v10, v6, v11, v13, v7);
return;
label1:
v14 = virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: boolean hasMemoryAddress()>();
if v14 == 0 goto label2;
v15 = virtualinvoke v2.<io.netty.util.AsciiString: byte[] array()>();
v16 = virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: long memoryAddress()>();
v17 = v16 + v1;
staticinvoke <io.netty.util.internal.PlatformDependent: void copyMemory(byte[],int,long,long)>(v15, v6, v17, v7);
return;
label2:
v18 = virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: boolean hasArray()>();
if v18 == 0 goto label3;
v19 = virtualinvoke v2.<io.netty.util.AsciiString: byte[] array()>();
v20 = virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: byte[] array()>();
v21 = virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: int arrayOffset()>();
v22 = v21 + v1;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v19, v6, v20, v22, v7);
return;
label3:
v23 = virtualinvoke v2.<io.netty.util.AsciiString: byte[] array()>();
virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)>(v1, v23, v6, v7);
return;
}
private static int safeDirectWriteUtf8(java.nio.ByteBuffer, int, java.lang.CharSequence, int, int)
{
java.nio.ByteBuffer v0;
boolean v17, v18, v22, v48, v5, v6;
java.lang.CharSequence v2;
java.lang.AssertionError v7;
short v16, v46;
int v1, v11, v12, v13, v14, v19, v20, v23, v24, v25, v26, v27, v28, v29, v3, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v4, v40, v41, v42, v43, v44, v47, v8, v9;
char v10, v15, v21, v45;
v0 := @parameter0: java.nio.ByteBuffer;
v1 := @parameter1: int;
v2 := @parameter2: java.lang.CharSequence;
v3 := @parameter3: int;
v4 := @parameter4: int;
v5 = <io.netty.buffer.ByteBufUtil: boolean $assertionsDisabled>;
if v5 != 0 goto label01;
v6 = v2 instanceof io.netty.util.AsciiString;
if v6 == 0 goto label01;
v7 = new java.lang.AssertionError;
specialinvoke v7.<java.lang.AssertionError: void <init>()>();
throw v7;
label01:
v8 = v1;
v9 = v3;
label02:
if v9 >= v4 goto label10;
v10 = interfaceinvoke v2.<java.lang.CharSequence: char charAt(int)>(v9);
if v10 >= 128 goto label03;
v11 = v1;
v1 = v1 + 1;
virtualinvoke v0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>(v11, v10);
goto label09;
label03:
if v10 >= 2048 goto label04;
v12 = v1 + 1;
v13 = v10 >> 6;
v14 = 192 | v13;
virtualinvoke v0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>(v1, v14);
v1 = v12 + 1;
v15 = v10 & 63;
v16 = 128 | v15;
virtualinvoke v0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>(v12, v16);
goto label09;
label04:
v17 = staticinvoke <io.netty.util.internal.StringUtil: boolean isSurrogate(char)>(v10);
if v17 == 0 goto label08;
v18 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(v10);
if v18 != 0 goto label05;
v19 = v1;
v1 = v1 + 1;
virtualinvoke v0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>(v19, 63);
goto label09;
label05:
v9 = v9 + 1;
if v9 != v4 goto label06;
v20 = v1;
v1 = v1 + 1;
virtualinvoke v0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>(v20, 63);
goto label10;
label06:
v21 = interfaceinvoke v2.<java.lang.CharSequence: char charAt(int)>(v9);
v22 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>(v21);
if v22 != 0 goto label07;
v23 = v1 + 1;
virtualinvoke v0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>(v1, 63);
v1 = v23 + 1;
staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(v21);
virtualinvoke v0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>(v23, v21);
goto label09;
label07:
v24 = staticinvoke <java.lang.Character: int toCodePoint(char,char)>(v10, v21);
v25 = v1 + 1;
v26 = v24 >> 18;
v27 = 240 | v26;
virtualinvoke v0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>(v1, v27);
v28 = v25 + 1;
v29 = v24 >> 12;
v30 = v29 & 63;
v31 = 128 | v30;
virtualinvoke v0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>(v25, v31);
v32 = v28 + 1;
v33 = v24 >> 6;
v34 = v33 & 63;
v35 = 128 | v34;
virtualinvoke v0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>(v28, v35);
v1 = v32 + 1;
v36 = v24 & 63;
v37 = 128 | v36;
virtualinvoke v0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>(v32, v37);
goto label09;
label08:
v38 = v1 + 1;
v39 = v10 >> 12;
v40 = 224 | v39;
virtualinvoke v0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>(v1, v40);
v41 = v38 + 1;
v42 = v10 >> 6;
v43 = v42 & 63;
v44 = 128 | v43;
virtualinvoke v0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>(v38, v44);
v1 = v41 + 1;
v45 = v10 & 63;
v46 = 128 | v45;
virtualinvoke v0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>(v41, v46);
label09:
v9 = v9 + 1;
goto label02;
label10:
v47 = v1 - v8;
return v47;
}
private static int safeWriteUtf8(io.netty.buffer.AbstractByteBuf, int, java.lang.CharSequence, int, int)
{
byte v28, v29, v30, v31, v32, v33, v34, v35, v36, v37;
boolean v13, v14, v18, v20, v5, v6;
io.netty.buffer.AbstractByteBuf v0;
java.lang.CharSequence v2;
java.lang.AssertionError v7;
int v1, v11, v12, v15, v16, v19, v21, v22, v23, v24, v25, v26, v27, v3, v4, v8, v9;
char v10, v17;
v0 := @parameter0: io.netty.buffer.AbstractByteBuf;
v1 := @parameter1: int;
v2 := @parameter2: java.lang.CharSequence;
v3 := @parameter3: int;
v4 := @parameter4: int;
v5 = <io.netty.buffer.ByteBufUtil: boolean $assertionsDisabled>;
if v5 != 0 goto label01;
v6 = v2 instanceof io.netty.util.AsciiString;
if v6 == 0 goto label01;
v7 = new java.lang.AssertionError;
specialinvoke v7.<java.lang.AssertionError: void <init>()>();
throw v7;
label01:
v8 = v1;
v9 = v3;
label02:
if v9 >= v4 goto label12;
v10 = interfaceinvoke v2.<java.lang.CharSequence: char charAt(int)>(v9);
if v10 >= 128 goto label03;
v11 = v1;
v1 = v1 + 1;
virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: void _setByte(int,int)>(v11, v37);
goto label11;
label03:
if v10 >= 2048 goto label04;
v12 = v1 + 1;
virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: void _setByte(int,int)>(v1, v35);
v1 = v12 + 1;
virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: void _setByte(int,int)>(v12, v36);
goto label11;
label04:
v13 = staticinvoke <io.netty.util.internal.StringUtil: boolean isSurrogate(char)>(v10);
if v13 == 0 goto label10;
v14 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(v10);
if v14 != 0 goto label05;
v15 = v1;
v1 = v1 + 1;
virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: void _setByte(int,int)>(v15, 63);
goto label11;
label05:
v9 = v9 + 1;
if v9 != v4 goto label06;
v16 = v1;
v1 = v1 + 1;
virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: void _setByte(int,int)>(v16, 63);
goto label12;
label06:
v17 = interfaceinvoke v2.<java.lang.CharSequence: char charAt(int)>(v9);
v18 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>(v17);
if v18 != 0 goto label09;
v19 = v1 + 1;
virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: void _setByte(int,int)>(v1, 63);
v1 = v19 + 1;
v20 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(v17);
if v20 == 0 goto label07;
v21 = 63;
goto label08;
label07:
v21 = v17;
label08:
virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: void _setByte(int,int)>(v19, v21);
goto label11;
label09:
staticinvoke <java.lang.Character: int toCodePoint(char,char)>(v10, v17);
v22 = v1 + 1;
virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: void _setByte(int,int)>(v1, v31);
v23 = v22 + 1;
virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: void _setByte(int,int)>(v22, v32);
v24 = v23 + 1;
virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: void _setByte(int,int)>(v23, v33);
v1 = v24 + 1;
virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: void _setByte(int,int)>(v24, v34);
goto label11;
label10:
v25 = v1 + 1;
virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: void _setByte(int,int)>(v1, v28);
v26 = v25 + 1;
virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: void _setByte(int,int)>(v25, v29);
v1 = v26 + 1;
virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: void _setByte(int,int)>(v26, v30);
label11:
v9 = v9 + 1;
goto label02;
label12:
v27 = v1 - v8;
return v27;
}
private static int safeArrayWriteUtf8(byte[], int, java.lang.CharSequence, int, int)
{
byte[] v0;
boolean v14, v15, v19, v21;
java.lang.CharSequence v2;
short v13, v45;
int v1, v10, v11, v16, v17, v20, v22, v23, v24, v25, v26, v27, v28, v29, v3, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v4, v40, v41, v42, v43, v46, v5, v6, v8, v9;
char v12, v18, v44, v7;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: java.lang.CharSequence;
v3 := @parameter3: int;
v4 := @parameter4: int;
v5 = v1;
v6 = v3;
label01:
if v6 >= v4 goto label11;
v7 = interfaceinvoke v2.<java.lang.CharSequence: char charAt(int)>(v6);
if v7 >= 128 goto label02;
v8 = v1;
v1 = v1 + 1;
v0[v8] = v7;
goto label10;
label02:
if v7 >= 2048 goto label03;
v9 = v1 + 1;
v10 = v7 >> 6;
v11 = 192 | v10;
v0[v1] = v11;
v1 = v9 + 1;
v12 = v7 & 63;
v13 = 128 | v12;
v0[v9] = v13;
goto label10;
label03:
v14 = staticinvoke <io.netty.util.internal.StringUtil: boolean isSurrogate(char)>(v7);
if v14 == 0 goto label09;
v15 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(v7);
if v15 != 0 goto label04;
v16 = v1;
v1 = v1 + 1;
v0[v16] = 63;
goto label10;
label04:
v6 = v6 + 1;
if v6 != v4 goto label05;
v17 = v1;
v1 = v1 + 1;
v0[v17] = 63;
goto label11;
label05:
v18 = interfaceinvoke v2.<java.lang.CharSequence: char charAt(int)>(v6);
v19 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>(v18);
if v19 != 0 goto label08;
v20 = v1 + 1;
v0[v1] = 63;
v1 = v20 + 1;
v21 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(v18);
if v21 == 0 goto label06;
v22 = 63;
goto label07;
label06:
v22 = v18;
label07:
v0[v20] = v22;
goto label10;
label08:
v23 = staticinvoke <java.lang.Character: int toCodePoint(char,char)>(v7, v18);
v24 = v1 + 1;
v25 = v23 >> 18;
v26 = 240 | v25;
v0[v1] = v26;
v27 = v24 + 1;
v28 = v23 >> 12;
v29 = v28 & 63;
v30 = 128 | v29;
v0[v24] = v30;
v31 = v27 + 1;
v32 = v23 >> 6;
v33 = v32 & 63;
v34 = 128 | v33;
v0[v27] = v34;
v1 = v31 + 1;
v35 = v23 & 63;
v36 = 128 | v35;
v0[v31] = v36;
goto label10;
label09:
v37 = v1 + 1;
v38 = v7 >> 12;
v39 = 224 | v38;
v0[v1] = v39;
v40 = v37 + 1;
v41 = v7 >> 6;
v42 = v41 & 63;
v43 = 128 | v42;
v0[v37] = v43;
v1 = v40 + 1;
v44 = v7 & 63;
v45 = 128 | v44;
v0[v40] = v45;
label10:
v6 = v6 + 1;
goto label01;
label11:
v46 = v1 - v5;
return v46;
}
private static int unsafeWriteUtf8(byte[], long, int, java.lang.CharSequence, int, int)
{
byte[] v0;
boolean v19, v20, v24, v26, v6, v7;
java.lang.CharSequence v3;
long v1, v10, v13, v14, v21, v22, v25, v29, v32, v36, v42, v45, v51, v9;
java.lang.AssertionError v8;
short v18, v50;
int v11, v15, v16, v2, v27, v28, v30, v31, v33, v34, v35, v37, v38, v39, v4, v40, v41, v43, v44, v46, v47, v48, v5;
char v12, v17, v23, v49;
v0 := @parameter0: byte[];
v1 := @parameter1: long;
v2 := @parameter2: int;
v3 := @parameter3: java.lang.CharSequence;
v4 := @parameter4: int;
v5 := @parameter5: int;
v6 = <io.netty.buffer.ByteBufUtil: boolean $assertionsDisabled>;
if v6 != 0 goto label01;
v7 = v3 instanceof io.netty.util.AsciiString;
if v7 == 0 goto label01;
v8 = new java.lang.AssertionError;
specialinvoke v8.<java.lang.AssertionError: void <init>()>();
throw v8;
label01:
v9 = v1 + v2;
v10 = v9;
v11 = v4;
label02:
if v11 >= v5 goto label12;
v12 = interfaceinvoke v3.<java.lang.CharSequence: char charAt(int)>(v11);
if v12 >= 128 goto label03;
v13 = v9;
v9 = v9 + 1L;
staticinvoke <io.netty.util.internal.PlatformDependent: void putByte(java.lang.Object,long,byte)>(v0, v13, v12);
goto label11;
label03:
if v12 >= 2048 goto label04;
v14 = v9 + 1L;
v15 = v12 >> 6;
v16 = 192 | v15;
staticinvoke <io.netty.util.internal.PlatformDependent: void putByte(java.lang.Object,long,byte)>(v0, v9, v16);
v9 = v14 + 1L;
v17 = v12 & 63;
v18 = 128 | v17;
staticinvoke <io.netty.util.internal.PlatformDependent: void putByte(java.lang.Object,long,byte)>(v0, v14, v18);
goto label11;
label04:
v19 = staticinvoke <io.netty.util.internal.StringUtil: boolean isSurrogate(char)>(v12);
if v19 == 0 goto label10;
v20 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(v12);
if v20 != 0 goto label05;
v21 = v9;
v9 = v9 + 1L;
staticinvoke <io.netty.util.internal.PlatformDependent: void putByte(java.lang.Object,long,byte)>(v0, v21, 63);
goto label11;
label05:
v11 = v11 + 1;
if v11 != v5 goto label06;
v22 = v9;
v9 = v9 + 1L;
staticinvoke <io.netty.util.internal.PlatformDependent: void putByte(java.lang.Object,long,byte)>(v0, v22, 63);
goto label12;
label06:
v23 = interfaceinvoke v3.<java.lang.CharSequence: char charAt(int)>(v11);
v24 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>(v23);
if v24 != 0 goto label09;
v25 = v9 + 1L;
staticinvoke <io.netty.util.internal.PlatformDependent: void putByte(java.lang.Object,long,byte)>(v0, v9, 63);
v9 = v25 + 1L;
v26 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(v23);
if v26 == 0 goto label07;
v27 = 63;
goto label08;
label07:
v27 = v23;
label08:
staticinvoke <io.netty.util.internal.PlatformDependent: void putByte(java.lang.Object,long,byte)>(v0, v25, v27);
goto label11;
label09:
v28 = staticinvoke <java.lang.Character: int toCodePoint(char,char)>(v12, v23);
v29 = v9 + 1L;
v30 = v28 >> 18;
v31 = 240 | v30;
staticinvoke <io.netty.util.internal.PlatformDependent: void putByte(java.lang.Object,long,byte)>(v0, v9, v31);
v32 = v29 + 1L;
v33 = v28 >> 12;
v34 = v33 & 63;
v35 = 128 | v34;
staticinvoke <io.netty.util.internal.PlatformDependent: void putByte(java.lang.Object,long,byte)>(v0, v29, v35);
v36 = v32 + 1L;
v37 = v28 >> 6;
v38 = v37 & 63;
v39 = 128 | v38;
staticinvoke <io.netty.util.internal.PlatformDependent: void putByte(java.lang.Object,long,byte)>(v0, v32, v39);
v9 = v36 + 1L;
v40 = v28 & 63;
v41 = 128 | v40;
staticinvoke <io.netty.util.internal.PlatformDependent: void putByte(java.lang.Object,long,byte)>(v0, v36, v41);
goto label11;
label10:
v42 = v9 + 1L;
v43 = v12 >> 12;
v44 = 224 | v43;
staticinvoke <io.netty.util.internal.PlatformDependent: void putByte(java.lang.Object,long,byte)>(v0, v9, v44);
v45 = v42 + 1L;
v46 = v12 >> 6;
v47 = v46 & 63;
v48 = 128 | v47;
staticinvoke <io.netty.util.internal.PlatformDependent: void putByte(java.lang.Object,long,byte)>(v0, v42, v48);
v9 = v45 + 1L;
v49 = v12 & 63;
v50 = 128 | v49;
staticinvoke <io.netty.util.internal.PlatformDependent: void putByte(java.lang.Object,long,byte)>(v0, v45, v50);
label11:
v11 = v11 + 1;
goto label02;
label12:
v51 = v9 - v10;
return v51;
}
public static int utf8MaxBytes(int)
{
int v0, v1, v2;
v0 := @parameter0: int;
v1 = <io.netty.buffer.ByteBufUtil: int MAX_BYTES_PER_CHAR_UTF8>;
v2 = v0 * v1;
return v2;
}
public static int utf8MaxBytes(java.lang.CharSequence)
{
java.lang.CharSequence v0;
int v2, v3, v4;
boolean v1;
v0 := @parameter0: java.lang.CharSequence;
v1 = v0 instanceof io.netty.util.AsciiString;
if v1 == 0 goto label1;
v2 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
return v2;
label1:
v3 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v4 = staticinvoke <io.netty.buffer.ByteBufUtil: int utf8MaxBytes(int)>(v3);
return v4;
}
public static int utf8Bytes(java.lang.CharSequence)
{
int v1, v2;
java.lang.CharSequence v0;
v0 := @parameter0: java.lang.CharSequence;
v1 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v2 = staticinvoke <io.netty.buffer.ByteBufUtil: int utf8ByteCount(java.lang.CharSequence,int,int)>(v0, 0, v1);
return v2;
}
public static int utf8Bytes(java.lang.CharSequence, int, int)
{
java.lang.CharSequence v0, v3;
int v1, v2, v4;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = staticinvoke <io.netty.buffer.ByteBufUtil: java.lang.CharSequence checkCharSequenceBounds(java.lang.CharSequence,int,int)>(v0, v1, v2);
v4 = staticinvoke <io.netty.buffer.ByteBufUtil: int utf8ByteCount(java.lang.CharSequence,int,int)>(v3, v1, v2);
return v4;
}
private static int utf8ByteCount(java.lang.CharSequence, int, int)
{
java.lang.CharSequence v0;
char v6;
int v1, v2, v4, v5, v7, v8, v9;
boolean v3;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = v0 instanceof io.netty.util.AsciiString;
if v3 == 0 goto label1;
v4 = v2 - v1;
return v4;
label1:
v5 = v1;
label2:
if v5 >= v2 goto label4;
v6 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v5);
if v6 >= 128 goto label3;
v5 = v5 + 1;
goto label2;
label3:
if v5 >= v2 goto label4;
v7 = v5 - v1;
v8 = staticinvoke <io.netty.buffer.ByteBufUtil: int utf8BytesNonAscii(java.lang.CharSequence,int,int)>(v0, v5, v2);
v9 = v7 + v8;
goto label5;
label4:
v9 = v5 - v1;
label5:
return v9;
}
private static int utf8BytesNonAscii(java.lang.CharSequence, int, int)
{
java.lang.CharSequence v0;
char v11, v5;
int v1, v2, v3, v4, v6, v7, v8;
boolean v10, v12, v9;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = 0;
v4 = v1;
label1:
if v4 >= v2 goto label8;
v5 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v4);
if v5 >= 2048 goto label2;
v6 = 127 - v5;
v7 = v6 >>> 31;
v8 = v7 + 1;
v3 = v3 + v8;
goto label7;
label2:
v9 = staticinvoke <io.netty.util.internal.StringUtil: boolean isSurrogate(char)>(v5);
if v9 == 0 goto label6;
v10 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(v5);
if v10 != 0 goto label3;
v3 = v3 + 1;
goto label7;
label3:
v4 = v4 + 1;
if v4 != v2 goto label4;
v3 = v3 + 1;
goto label8;
label4:
v11 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v4);
v12 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>(v11);
if v12 != 0 goto label5;
v3 = v3 + 2;
goto label7;
label5:
v3 = v3 + 4;
goto label7;
label6:
v3 = v3 + 3;
label7:
v4 = v4 + 1;
goto label1;
label8:
return v3;
}
public static io.netty.buffer.ByteBuf writeAscii(io.netty.buffer.ByteBufAllocator, java.lang.CharSequence)
{
io.netty.buffer.ByteBuf v3;
java.lang.CharSequence v1;
io.netty.buffer.ByteBufAllocator v0;
int v2;
v0 := @parameter0: io.netty.buffer.ByteBufAllocator;
v1 := @parameter1: java.lang.CharSequence;
v2 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
v3 = interfaceinvoke v0.<io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf buffer(int)>(v2);
staticinvoke <io.netty.buffer.ByteBufUtil: int writeAscii(io.netty.buffer.ByteBuf,java.lang.CharSequence)>(v3, v1);
return v3;
}
public static int writeAscii(io.netty.buffer.ByteBuf, java.lang.CharSequence)
{
byte[] v16;
java.lang.AssertionError v10;
io.netty.buffer.ByteBuf v0;
java.nio.charset.Charset v15;
int v11, v12, v17, v4, v6, v7, v8;
java.lang.String v14;
boolean v13, v2, v3, v5, v9;
java.lang.CharSequence v1;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: java.lang.CharSequence;
label1:
v2 = v0 instanceof io.netty.buffer.WrappedCompositeByteBuf;
if v2 == 0 goto label2;
v0 = virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf unwrap()>();
goto label1;
label2:
v3 = v0 instanceof io.netty.buffer.AbstractByteBuf;
if v3 == 0 goto label5;
v4 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: void ensureWritable0(int)>(v4);
v5 = v1 instanceof io.netty.util.AsciiString;
if v5 == 0 goto label3;
v6 = v0.<io.netty.buffer.AbstractByteBuf: int writerIndex>;
staticinvoke <io.netty.buffer.ByteBufUtil: void writeAsciiString(io.netty.buffer.AbstractByteBuf,int,io.netty.util.AsciiString,int,int)>(v0, v6, v1, 0, v4);
goto label4;
label3:
v7 = v0.<io.netty.buffer.AbstractByteBuf: int writerIndex>;
v8 = staticinvoke <io.netty.buffer.ByteBufUtil: int writeAscii(io.netty.buffer.AbstractByteBuf,int,java.lang.CharSequence,int)>(v0, v7, v1, v4);
v9 = <io.netty.buffer.ByteBufUtil: boolean $assertionsDisabled>;
if v9 != 0 goto label4;
if v8 == v4 goto label4;
v10 = new java.lang.AssertionError;
specialinvoke v10.<java.lang.AssertionError: void <init>()>();
throw v10;
label4:
v11 = v0.<io.netty.buffer.AbstractByteBuf: int writerIndex>;
v12 = v11 + v4;
v0.<io.netty.buffer.AbstractByteBuf: int writerIndex> = v12;
return v4;
label5:
v13 = v0 instanceof io.netty.buffer.WrappedByteBuf;
if v13 == 0 goto label6;
v0 = virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf unwrap()>();
goto label1;
label6:
v14 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
v15 = <io.netty.util.CharsetUtil: java.nio.charset.Charset US_ASCII>;
v16 = virtualinvoke v14.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(v15);
virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeBytes(byte[])>(v16);
v17 = lengthof v16;
return v17;
}
static int writeAscii(io.netty.buffer.AbstractByteBuf, int, java.lang.CharSequence, int)
{
io.netty.buffer.AbstractByteBuf v0;
java.lang.CharSequence v2;
int v1, v3;
boolean v4;
v0 := @parameter0: io.netty.buffer.AbstractByteBuf;
v1 := @parameter1: int;
v2 := @parameter2: java.lang.CharSequence;
v3 := @parameter3: int;
v4 = v2 instanceof io.netty.util.AsciiString;
if v4 == 0 goto label1;
staticinvoke <io.netty.buffer.ByteBufUtil: void writeAsciiString(io.netty.buffer.AbstractByteBuf,int,io.netty.util.AsciiString,int,int)>(v0, v1, v2, 0, v3);
goto label2;
label1:
staticinvoke <io.netty.buffer.ByteBufUtil: int writeAsciiCharSequence(io.netty.buffer.AbstractByteBuf,int,java.lang.CharSequence,int)>(v0, v1, v2, v3);
label2:
return v3;
}
private static int writeAsciiCharSequence(io.netty.buffer.AbstractByteBuf, int, java.lang.CharSequence, int)
{
io.netty.buffer.AbstractByteBuf v0;
java.lang.CharSequence v2;
char v6;
byte v7;
int v1, v3, v4, v5;
v0 := @parameter0: io.netty.buffer.AbstractByteBuf;
v1 := @parameter1: int;
v2 := @parameter2: java.lang.CharSequence;
v3 := @parameter3: int;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v1;
v1 = v1 + 1;
v6 = interfaceinvoke v2.<java.lang.CharSequence: char charAt(int)>(v4);
v7 = staticinvoke <io.netty.util.AsciiString: byte c2b(char)>(v6);
virtualinvoke v0.<io.netty.buffer.AbstractByteBuf: void _setByte(int,int)>(v5, v7);
v4 = v4 + 1;
goto label1;
label2:
return v3;
}
public static io.netty.buffer.ByteBuf encodeString(io.netty.buffer.ByteBufAllocator, java.nio.CharBuffer, java.nio.charset.Charset)
{
io.netty.buffer.ByteBuf v3;
java.nio.charset.Charset v2;
java.nio.CharBuffer v1;
io.netty.buffer.ByteBufAllocator v0;
v0 := @parameter0: io.netty.buffer.ByteBufAllocator;
v1 := @parameter1: java.nio.CharBuffer;
v2 := @parameter2: java.nio.charset.Charset;
v3 = staticinvoke <io.netty.buffer.ByteBufUtil: io.netty.buffer.ByteBuf encodeString0(io.netty.buffer.ByteBufAllocator,boolean,java.nio.CharBuffer,java.nio.charset.Charset,int)>(v0, 0, v1, v2, 0);
return v3;
}
public static io.netty.buffer.ByteBuf encodeString(io.netty.buffer.ByteBufAllocator, java.nio.CharBuffer, java.nio.charset.Charset, int)
{
io.netty.buffer.ByteBuf v4;
java.nio.charset.Charset v2;
java.nio.CharBuffer v1;
io.netty.buffer.ByteBufAllocator v0;
int v3;
v0 := @parameter0: io.netty.buffer.ByteBufAllocator;
v1 := @parameter1: java.nio.CharBuffer;
v2 := @parameter2: java.nio.charset.Charset;
v3 := @parameter3: int;
v4 = staticinvoke <io.netty.buffer.ByteBufUtil: io.netty.buffer.ByteBuf encodeString0(io.netty.buffer.ByteBufAllocator,boolean,java.nio.CharBuffer,java.nio.charset.Charset,int)>(v0, 0, v1, v2, v3);
return v4;
}
static io.netty.buffer.ByteBuf encodeString0(io.netty.buffer.ByteBufAllocator, boolean, java.nio.CharBuffer, java.nio.charset.Charset, int)
{
java.lang.Throwable v25;
java.lang.IllegalStateException v24;
java.nio.charset.CharacterCodingException v23;
io.netty.buffer.ByteBufAllocator v0;
java.nio.ByteBuffer v12;
java.nio.charset.CoderResult v14, v16;
io.netty.buffer.ByteBuf v10, v22;
java.nio.charset.Charset v3;
int v11, v13, v18, v19, v20, v21, v4, v6, v9;
boolean v1, v15, v17;
double v8;
java.nio.CharBuffer v2;
java.nio.charset.CharsetEncoder v5;
float v7;
v0 := @parameter0: io.netty.buffer.ByteBufAllocator;
v1 := @parameter1: boolean;
v2 := @parameter2: java.nio.CharBuffer;
v3 := @parameter3: java.nio.charset.Charset;
v4 := @parameter4: int;
v5 = staticinvoke <io.netty.util.CharsetUtil: java.nio.charset.CharsetEncoder encoder(java.nio.charset.Charset)>(v3);
v6 = virtualinvoke v2.<java.nio.CharBuffer: int remaining()>();
v7 = virtualinvoke v5.<java.nio.charset.CharsetEncoder: float maxBytesPerChar()>();
v8 = v6 * v7;
v9 = v8 + v4;
if v1 == 0 goto label1;
v10 = interfaceinvoke v0.<io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf heapBuffer(int)>(v9);
goto label2;
label1:
v10 = interfaceinvoke v0.<io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf buffer(int)>(v9);
label2:
v11 = virtualinvoke v10.<io.netty.buffer.ByteBuf: int readerIndex()>();
v12 = virtualinvoke v10.<io.netty.buffer.ByteBuf: java.nio.ByteBuffer internalNioBuffer(int,int)>(v11, v9);
v13 = virtualinvoke v12.<java.nio.ByteBuffer: int position()>();
v14 = virtualinvoke v5.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>(v2, v12, 1);
v15 = virtualinvoke v14.<java.nio.charset.CoderResult: boolean isUnderflow()>();
if v15 != 0 goto label3;
virtualinvoke v14.<java.nio.charset.CoderResult: void throwException()>();
label3:
v16 = virtualinvoke v5.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult flush(java.nio.ByteBuffer)>(v12);
v17 = virtualinvoke v16.<java.nio.charset.CoderResult: boolean isUnderflow()>();
if v17 != 0 goto label4;
virtualinvoke v16.<java.nio.charset.CoderResult: void throwException()>();
label4:
v18 = virtualinvoke v10.<io.netty.buffer.ByteBuf: int writerIndex()>();
v19 = virtualinvoke v12.<java.nio.ByteBuffer: int position()>();
v20 = v18 + v19;
v21 = v20 - v13;
virtualinvoke v10.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writerIndex(int)>(v21);
v22 = v10;
label5:
return v22;
label6:
v23 := @caughtexception;
v24 = new java.lang.IllegalStateException;
specialinvoke v24.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(v23);
throw v24;
label7:
v25 := @caughtexception;
virtualinvoke v10.<io.netty.buffer.ByteBuf: boolean release()>();
throw v25;
catch java.nio.charset.CharacterCodingException from label2 to label5 with label6;
catch java.lang.Throwable from label2 to label5 with label7;
}
static java.lang.String decodeString(io.netty.buffer.ByteBuf, int, int, java.nio.charset.Charset)
{
byte[] v5;
io.netty.buffer.ByteBuf v0;
java.nio.charset.Charset v3, v8;
int v1, v2, v6, v7;
java.lang.String v10, v11;
boolean v4, v9;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: java.nio.charset.Charset;
if v2 != 0 goto label1;
return "";
label1:
v4 = virtualinvoke v0.<io.netty.buffer.ByteBuf: boolean hasArray()>();
if v4 == 0 goto label2;
v5 = virtualinvoke v0.<io.netty.buffer.ByteBuf: byte[] array()>();
v6 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int arrayOffset()>();
v7 = v6 + v1;
goto label3;
label2:
v5 = staticinvoke <io.netty.buffer.ByteBufUtil: byte[] threadLocalTempArray(int)>(v2);
v7 = 0;
virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)>(v1, v5, 0, v2);
label3:
v8 = <io.netty.util.CharsetUtil: java.nio.charset.Charset US_ASCII>;
v9 = virtualinvoke v8.<java.nio.charset.Charset: boolean equals(java.lang.Object)>(v3);
if v9 == 0 goto label4;
v10 = new java.lang.String;
specialinvoke v10.<java.lang.String: void <init>(byte[],int,int,int)>(v5, 0, v7, v2);
return v10;
label4:
v11 = new java.lang.String;
specialinvoke v11.<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>(v5, v7, v2, v3);
return v11;
}
public static io.netty.buffer.ByteBuf threadLocalDirectBuffer()
{
io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf v3;
int v0;
io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf v2;
boolean v1;
v0 = <io.netty.buffer.ByteBufUtil: int THREAD_LOCAL_BUFFER_SIZE>;
if v0 > 0 goto label1;
return null;
label1:
v1 = staticinvoke <io.netty.util.internal.PlatformDependent: boolean hasUnsafe()>();
if v1 == 0 goto label2;
v2 = staticinvoke <io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf: io.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf newInstance()>();
return v2;
label2:
v3 = staticinvoke <io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf: io.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf newInstance()>();
return v3;
}
public static byte[] getBytes(io.netty.buffer.ByteBuf)
{
byte[] v3;
io.netty.buffer.ByteBuf v0;
int v1, v2;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int readerIndex()>();
v2 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int readableBytes()>();
v3 = staticinvoke <io.netty.buffer.ByteBufUtil: byte[] getBytes(io.netty.buffer.ByteBuf,int,int)>(v0, v1, v2);
return v3;
}
public static byte[] getBytes(io.netty.buffer.ByteBuf, int, int)
{
byte[] v3;
io.netty.buffer.ByteBuf v0;
int v1, v2;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = staticinvoke <io.netty.buffer.ByteBufUtil: byte[] getBytes(io.netty.buffer.ByteBuf,int,int,boolean)>(v0, v1, v2, 1);
return v3;
}
public static byte[] getBytes(io.netty.buffer.ByteBuf, int, int, boolean)
{
byte[] v11, v14, v15;
java.lang.IndexOutOfBoundsException v6;
io.netty.buffer.ByteBuf v0;
int v1, v10, v12, v13, v2, v4, v9;
java.lang.String v7;
boolean v3, v5, v8;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: boolean;
v4 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int capacity()>();
v5 = staticinvoke <io.netty.util.internal.MathUtil: boolean isOutOfBounds(int,int,int)>(v1, v2, v4);
if v5 == 0 goto label1;
v6 = new java.lang.IndexOutOfBoundsException;
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int,int)>(v1, v2, v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("expected: 0 <= start(\u0001) <= start + length(\u0001) <= buf.capacity(\u0001)");
specialinvoke v6.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v7);
throw v6;
label1:
v8 = virtualinvoke v0.<io.netty.buffer.ByteBuf: boolean hasArray()>();
if v8 == 0 goto label4;
v9 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int arrayOffset()>();
v10 = v9 + v1;
v11 = virtualinvoke v0.<io.netty.buffer.ByteBuf: byte[] array()>();
if v3 != 0 goto label2;
if v10 != 0 goto label2;
v12 = lengthof v11;
if v2 == v12 goto label3;
label2:
v13 = v10 + v2;
v14 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(v11, v10, v13);
return v14;
label3:
return v11;
label4:
v15 = staticinvoke <io.netty.util.internal.PlatformDependent: byte[] allocateUninitializedArray(int)>(v2);
virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf getBytes(int,byte[])>(v1, v15);
return v15;
}
public static void copy(io.netty.util.AsciiString, io.netty.buffer.ByteBuf)
{
int v2;
io.netty.util.AsciiString v0;
io.netty.buffer.ByteBuf v1;
v0 := @parameter0: io.netty.util.AsciiString;
v1 := @parameter1: io.netty.buffer.ByteBuf;
v2 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
staticinvoke <io.netty.buffer.ByteBufUtil: void copy(io.netty.util.AsciiString,int,io.netty.buffer.ByteBuf,int)>(v0, 0, v1, v2);
return;
}
public static void copy(io.netty.util.AsciiString, int, io.netty.buffer.ByteBuf, int, int)
{
byte[] v11;
java.lang.IndexOutOfBoundsException v7;
io.netty.util.AsciiString v0;
io.netty.buffer.ByteBuf v2;
int v1, v12, v13, v3, v4, v5, v8;
java.lang.Object v10;
java.lang.String v9;
boolean v6;
v0 := @parameter0: io.netty.util.AsciiString;
v1 := @parameter1: int;
v2 := @parameter2: io.netty.buffer.ByteBuf;
v3 := @parameter3: int;
v4 := @parameter4: int;
v5 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v6 = staticinvoke <io.netty.util.internal.MathUtil: boolean isOutOfBounds(int,int,int)>(v1, v4, v5);
if v6 == 0 goto label1;
v7 = new java.lang.IndexOutOfBoundsException;
v8 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int,int)>(v1, v4, v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("expected: 0 <= srcIdx(\u0001) <= srcIdx + length(\u0001) <= srcLen(\u0001)");
specialinvoke v7.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v9);
throw v7;
label1:
v10 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "dst");
v11 = virtualinvoke v0.<io.netty.util.AsciiString: byte[] array()>();
v12 = virtualinvoke v0.<io.netty.util.AsciiString: int arrayOffset()>();
v13 = v1 + v12;
virtualinvoke v10.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)>(v3, v11, v13, v4);
return;
}
public static void copy(io.netty.util.AsciiString, int, io.netty.buffer.ByteBuf, int)
{
byte[] v10;
java.lang.IndexOutOfBoundsException v6;
io.netty.util.AsciiString v0;
io.netty.buffer.ByteBuf v2;
int v1, v11, v12, v3, v4, v7;
java.lang.Object v9;
java.lang.String v8;
boolean v5;
v0 := @parameter0: io.netty.util.AsciiString;
v1 := @parameter1: int;
v2 := @parameter2: io.netty.buffer.ByteBuf;
v3 := @parameter3: int;
v4 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v5 = staticinvoke <io.netty.util.internal.MathUtil: boolean isOutOfBounds(int,int,int)>(v1, v3, v4);
if v5 == 0 goto label1;
v6 = new java.lang.IndexOutOfBoundsException;
v7 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int,int)>(v1, v3, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("expected: 0 <= srcIdx(\u0001) <= srcIdx + length(\u0001) <= srcLen(\u0001)");
specialinvoke v6.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v8);
throw v6;
label1:
v9 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "dst");
v10 = virtualinvoke v0.<io.netty.util.AsciiString: byte[] array()>();
v11 = virtualinvoke v0.<io.netty.util.AsciiString: int arrayOffset()>();
v12 = v1 + v11;
virtualinvoke v9.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeBytes(byte[],int,int)>(v10, v12, v3);
return;
}
public static java.lang.String prettyHexDump(io.netty.buffer.ByteBuf)
{
io.netty.buffer.ByteBuf v0;
int v1, v2;
java.lang.String v3;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int readerIndex()>();
v2 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int readableBytes()>();
v3 = staticinvoke <io.netty.buffer.ByteBufUtil: java.lang.String prettyHexDump(io.netty.buffer.ByteBuf,int,int)>(v0, v1, v2);
return v3;
}
public static java.lang.String prettyHexDump(io.netty.buffer.ByteBuf, int, int)
{
io.netty.buffer.ByteBuf v0;
int v1, v2;
java.lang.String v3;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = staticinvoke <io.netty.buffer.ByteBufUtil$HexUtil: java.lang.String prettyHexDump(io.netty.buffer.ByteBuf,int,int)>(v0, v1, v2);
return v3;
}
public static void appendPrettyHexDump(java.lang.StringBuilder, io.netty.buffer.ByteBuf)
{
io.netty.buffer.ByteBuf v1;
int v2, v3;
java.lang.StringBuilder v0;
v0 := @parameter0: java.lang.StringBuilder;
v1 := @parameter1: io.netty.buffer.ByteBuf;
v2 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readerIndex()>();
v3 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
staticinvoke <io.netty.buffer.ByteBufUtil: void appendPrettyHexDump(java.lang.StringBuilder,io.netty.buffer.ByteBuf,int,int)>(v0, v1, v2, v3);
return;
}
public static void appendPrettyHexDump(java.lang.StringBuilder, io.netty.buffer.ByteBuf, int, int)
{
io.netty.buffer.ByteBuf v1;
int v2, v3;
java.lang.StringBuilder v0;
v0 := @parameter0: java.lang.StringBuilder;
v1 := @parameter1: io.netty.buffer.ByteBuf;
v2 := @parameter2: int;
v3 := @parameter3: int;
staticinvoke <io.netty.buffer.ByteBufUtil$HexUtil: void appendPrettyHexDump(java.lang.StringBuilder,io.netty.buffer.ByteBuf,int,int)>(v0, v1, v2, v3);
return;
}
public static boolean isText(io.netty.buffer.ByteBuf, java.nio.charset.Charset)
{
io.netty.buffer.ByteBuf v0;
java.nio.charset.Charset v1;
int v2, v3;
boolean v4;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: java.nio.charset.Charset;
v2 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int readerIndex()>();
v3 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int readableBytes()>();
v4 = staticinvoke <io.netty.buffer.ByteBufUtil: boolean isText(io.netty.buffer.ByteBuf,int,int,java.nio.charset.Charset)>(v0, v2, v3, v1);
return v4;
}
public static boolean isText(io.netty.buffer.ByteBuf, int, int, java.nio.charset.Charset)
{
java.lang.Throwable v25;
java.lang.IndexOutOfBoundsException v8;
java.nio.charset.CharacterCodingException v26;
io.netty.buffer.ByteBufAllocator v21;
java.nio.ByteBuffer v20, v24;
io.netty.buffer.ByteBuf v0, v22;
java.nio.charset.Charset v10, v13, v3;
java.nio.charset.CodingErrorAction v16, v17;
int v1, v19, v2, v23, v4, v5, v6, v7;
java.lang.String v9;
boolean v11, v12, v14, v15;
java.nio.charset.CharsetDecoder v18;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: java.nio.charset.Charset;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, "buf");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v3, "charset");
v4 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int readerIndex()>();
v5 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int readableBytes()>();
v6 = v4 + v5;
if v1 < 0 goto label01;
if v2 < 0 goto label01;
v7 = v6 - v2;
if v1 <= v7 goto label02;
label01:
v8 = new java.lang.IndexOutOfBoundsException;
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v1, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("index: \u0001 length: \u0001");
specialinvoke v8.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v9);
throw v8;
label02:
v10 = <io.netty.util.CharsetUtil: java.nio.charset.Charset UTF_8>;
v11 = virtualinvoke v3.<java.nio.charset.Charset: boolean equals(java.lang.Object)>(v10);
if v11 == 0 goto label03;
v12 = staticinvoke <io.netty.buffer.ByteBufUtil: boolean isUtf8(io.netty.buffer.ByteBuf,int,int)>(v0, v1, v2);
return v12;
label03:
v13 = <io.netty.util.CharsetUtil: java.nio.charset.Charset US_ASCII>;
v14 = virtualinvoke v3.<java.nio.charset.Charset: boolean equals(java.lang.Object)>(v13);
if v14 == 0 goto label04;
v15 = staticinvoke <io.netty.buffer.ByteBufUtil: boolean isAscii(io.netty.buffer.ByteBuf,int,int)>(v0, v1, v2);
return v15;
label04:
v16 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;
v17 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;
v18 = staticinvoke <io.netty.util.CharsetUtil: java.nio.charset.CharsetDecoder decoder(java.nio.charset.Charset,java.nio.charset.CodingErrorAction,java.nio.charset.CodingErrorAction)>(v3, v16, v17);
label05:
v19 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int nioBufferCount()>();
if v19 != 1 goto label06;
v20 = virtualinvoke v0.<io.netty.buffer.ByteBuf: java.nio.ByteBuffer nioBuffer(int,int)>(v1, v2);
virtualinvoke v18.<java.nio.charset.CharsetDecoder: java.nio.CharBuffer decode(java.nio.ByteBuffer)>(v20);
goto label10;
label06:
v21 = virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBufAllocator alloc()>();
v22 = interfaceinvoke v21.<io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf heapBuffer(int)>(v2);
label07:
virtualinvoke v22.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)>(v0, v1, v2);
v23 = virtualinvoke v22.<io.netty.buffer.ByteBuf: int readerIndex()>();
v24 = virtualinvoke v22.<io.netty.buffer.ByteBuf: java.nio.ByteBuffer internalNioBuffer(int,int)>(v23, v2);
virtualinvoke v18.<java.nio.charset.CharsetDecoder: java.nio.CharBuffer decode(java.nio.ByteBuffer)>(v24);
label08:
virtualinvoke v22.<io.netty.buffer.ByteBuf: boolean release()>();
goto label10;
label09:
v25 := @caughtexception;
virtualinvoke v22.<io.netty.buffer.ByteBuf: boolean release()>();
throw v25;
label10:
return 1;
label11:
v26 := @caughtexception;
return 0;
catch java.lang.Throwable from label07 to label08 with label09;
catch java.nio.charset.CharacterCodingException from label05 to label10 with label11;
}
private static boolean isAscii(io.netty.buffer.ByteBuf, int, int)
{
io.netty.buffer.ByteBuf v0;
int v1, v2, v4, v5;
io.netty.util.ByteProcessor v3;
boolean v6;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = <io.netty.buffer.ByteBufUtil: io.netty.util.ByteProcessor FIND_NON_ASCII>;
v4 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int forEachByte(int,int,io.netty.util.ByteProcessor)>(v1, v2, v3);
v5 = (int) -1;
if v4 != v5 goto label1;
v6 = 1;
goto label2;
label1:
v6 = 0;
label2:
return v6;
}
private static boolean isUtf8(io.netty.buffer.ByteBuf, int, int)
{
byte v15, v16, v19, v21, v26, v28, v29, v5, v9;
short v10, v11, v12, v17, v18, v20, v22, v23, v30, v31, v32, v33, v34, v35, v36, v37, v6, v7;
io.netty.buffer.ByteBuf v0;
int v1, v13, v14, v2, v24, v25, v27, v3, v4, v8;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = v1 + v2;
label01:
if v1 >= v3 goto label16;
v4 = v1;
v1 = v1 + 1;
v5 = virtualinvoke v0.<io.netty.buffer.ByteBuf: byte getByte(int)>(v4);
v6 = v5 & 128;
if v6 == 0 goto label01;
v7 = v5 & 224;
if v7 != 192 goto label04;
if v1 < v3 goto label02;
return 0;
label02:
v8 = v1;
v1 = v1 + 1;
v9 = virtualinvoke v0.<io.netty.buffer.ByteBuf: byte getByte(int)>(v8);
v10 = v9 & 192;
if v10 == 128 goto label03;
return 0;
label03:
v11 = v5 & 255;
if v11 >= 194 goto label01;
return 0;
label04:
v12 = v5 & 240;
if v12 != 224 goto label09;
v13 = v3 - 2;
if v1 <= v13 goto label05;
return 0;
label05:
v14 = v1 + 1;
v15 = virtualinvoke v0.<io.netty.buffer.ByteBuf: byte getByte(int)>(v1);
v1 = v14 + 1;
v16 = virtualinvoke v0.<io.netty.buffer.ByteBuf: byte getByte(int)>(v14);
v17 = v15 & 192;
if v17 != 128 goto label06;
v18 = v16 & 192;
if v18 == 128 goto label07;
label06:
return 0;
label07:
v19 = v5 & 15;
if v19 != 0 goto label08;
v20 = v15 & 255;
if v20 >= 160 goto label08;
return 0;
label08:
v21 = v5 & 15;
if v21 != 13 goto label01;
v22 = v15 & 255;
if v22 <= 159 goto label01;
return 0;
label09:
v23 = v5 & 248;
if v23 != 240 goto label15;
v24 = v3 - 3;
if v1 <= v24 goto label10;
return 0;
label10:
v25 = v1 + 1;
v26 = virtualinvoke v0.<io.netty.buffer.ByteBuf: byte getByte(int)>(v1);
v27 = v25 + 1;
v28 = virtualinvoke v0.<io.netty.buffer.ByteBuf: byte getByte(int)>(v25);
v1 = v27 + 1;
v29 = virtualinvoke v0.<io.netty.buffer.ByteBuf: byte getByte(int)>(v27);
v30 = v26 & 192;
if v30 != 128 goto label11;
v31 = v28 & 192;
if v31 != 128 goto label11;
v32 = v29 & 192;
if v32 == 128 goto label12;
label11:
return 0;
label12:
v33 = v5 & 255;
if v33 > 244 goto label14;
v34 = v5 & 255;
if v34 != 240 goto label13;
v35 = v26 & 255;
if v35 < 144 goto label14;
label13:
v36 = v5 & 255;
if v36 != 244 goto label01;
v37 = v26 & 255;
if v37 <= 143 goto label01;
label14:
return 0;
label15:
return 0;
label16:
return 1;
}
static void readBytes(io.netty.buffer.ByteBufAllocator, java.nio.ByteBuffer, int, int, java.io.OutputStream) throws java.io.IOException
{
java.lang.Throwable v16;
byte[] v12, v14, v6;
io.netty.buffer.ByteBufAllocator v0;
java.nio.ByteBuffer v1, v10;
io.netty.buffer.ByteBuf v13;
int v15, v2, v3, v7, v8, v9;
boolean v11, v5;
java.io.OutputStream v4;
v0 := @parameter0: io.netty.buffer.ByteBufAllocator;
v1 := @parameter1: java.nio.ByteBuffer;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 := @parameter4: java.io.OutputStream;
v5 = virtualinvoke v1.<java.nio.ByteBuffer: boolean hasArray()>();
if v5 == 0 goto label1;
v6 = virtualinvoke v1.<java.nio.ByteBuffer: byte[] array()>();
v7 = virtualinvoke v1.<java.nio.ByteBuffer: int arrayOffset()>();
v8 = v2 + v7;
virtualinvoke v4.<java.io.OutputStream: void write(byte[],int,int)>(v6, v8, v3);
goto label7;
label1:
v9 = staticinvoke <java.lang.Math: int min(int,int)>(v3, 8192);
v10 = virtualinvoke v1.<java.nio.ByteBuffer: java.nio.ByteBuffer clear()>();
virtualinvoke v10.<java.nio.ByteBuffer: java.nio.ByteBuffer position(int)>(v2);
if v3 <= 1024 goto label2;
v11 = interfaceinvoke v0.<io.netty.buffer.ByteBufAllocator: boolean isDirectBufferPooled()>();
if v11 != 0 goto label3;
label2:
v12 = staticinvoke <io.netty.buffer.ByteBufUtil: byte[] threadLocalTempArray(int)>(v9);
staticinvoke <io.netty.buffer.ByteBufUtil: void getBytes(java.nio.ByteBuffer,byte[],int,int,java.io.OutputStream,int)>(v1, v12, 0, v9, v4, v3);
goto label7;
label3:
v13 = interfaceinvoke v0.<io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf heapBuffer(int)>(v9);
label4:
v14 = virtualinvoke v13.<io.netty.buffer.ByteBuf: byte[] array()>();
v15 = virtualinvoke v13.<io.netty.buffer.ByteBuf: int arrayOffset()>();
staticinvoke <io.netty.buffer.ByteBufUtil: void getBytes(java.nio.ByteBuffer,byte[],int,int,java.io.OutputStream,int)>(v1, v14, v15, v9, v4, v3);
label5:
virtualinvoke v13.<io.netty.buffer.ByteBuf: boolean release()>();
goto label7;
label6:
v16 := @caughtexception;
virtualinvoke v13.<io.netty.buffer.ByteBuf: boolean release()>();
throw v16;
label7:
return;
catch java.lang.Throwable from label4 to label5 with label6;
}
private static void getBytes(java.nio.ByteBuffer, byte[], int, int, java.io.OutputStream, int) throws java.io.IOException
{
java.io.OutputStream v4;
byte[] v1;
int v2, v3, v5, v6;
java.nio.ByteBuffer v0;
v0 := @parameter0: java.nio.ByteBuffer;
v1 := @parameter1: byte[];
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 := @parameter4: java.io.OutputStream;
v5 := @parameter5: int;
label1:
v6 = staticinvoke <java.lang.Math: int min(int,int)>(v3, v5);
virtualinvoke v0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(v1, v2, v6);
virtualinvoke v4.<java.io.OutputStream: void write(byte[],int,int)>(v1, v2, v6);
v5 = v5 - v6;
if v5 > 0 goto label1;
return;
}
private void <init>()
{
io.netty.buffer.ByteBufUtil v0;
v0 := @this: io.netty.buffer.ByteBufUtil;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void <clinit>()
{
io.netty.buffer.ByteBufUtil$1 v4;
io.netty.buffer.ByteBufUtil$2 v30;
java.lang.Integer v25, v29;
java.nio.charset.Charset v5;
java.util.Locale v11;
int v22, v24, v26, v28;
java.lang.String v10, v12, v13, v14, v18, v9;
boolean v1, v15, v19, v2, v8;
io.netty.buffer.AbstractByteBufAllocator v16;
java.nio.charset.CharsetEncoder v6;
io.netty.util.internal.logging.InternalLogger v17, v20, v21, v23, v27, v3;
float v7;
java.lang.Class v0;
v0 = class "Lio/netty/buffer/ByteBufUtil;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.buffer.ByteBufUtil: boolean $assertionsDisabled> = v2;
v3 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/buffer/ByteBufUtil;");
<io.netty.buffer.ByteBufUtil: io.netty.util.internal.logging.InternalLogger logger> = v3;
v4 = new io.netty.buffer.ByteBufUtil$1;
specialinvoke v4.<io.netty.buffer.ByteBufUtil$1: void <init>()>();
<io.netty.buffer.ByteBufUtil: io.netty.util.concurrent.FastThreadLocal BYTE_ARRAYS> = v4;
v5 = <io.netty.util.CharsetUtil: java.nio.charset.Charset UTF_8>;
v6 = staticinvoke <io.netty.util.CharsetUtil: java.nio.charset.CharsetEncoder encoder(java.nio.charset.Charset)>(v5);
v7 = virtualinvoke v6.<java.nio.charset.CharsetEncoder: float maxBytesPerChar()>();
<io.netty.buffer.ByteBufUtil: int MAX_BYTES_PER_CHAR_UTF8> = v7;
v8 = staticinvoke <io.netty.util.internal.PlatformDependent: boolean isAndroid()>();
if v8 == 0 goto label3;
v9 = "unpooled";
goto label4;
label3:
v9 = "pooled";
label4:
v10 = staticinvoke <io.netty.util.internal.SystemPropertyUtil: java.lang.String get(java.lang.String,java.lang.String)>("io.netty.allocator.type", v9);
v11 = <java.util.Locale: java.util.Locale US>;
v12 = virtualinvoke v10.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>(v11);
v13 = virtualinvoke v12.<java.lang.String: java.lang.String trim()>();
v14 = "unpooled";
v15 = virtualinvoke v14.<java.lang.String: boolean equals(java.lang.Object)>(v13);
if v15 == 0 goto label5;
v16 = <io.netty.buffer.UnpooledByteBufAllocator: io.netty.buffer.UnpooledByteBufAllocator DEFAULT>;
v17 = <io.netty.buffer.ByteBufUtil: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v17.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object)>("-Dio.netty.allocator.type: {}", v13);
goto label7;
label5:
v18 = "pooled";
v19 = virtualinvoke v18.<java.lang.String: boolean equals(java.lang.Object)>(v13);
if v19 == 0 goto label6;
v16 = <io.netty.buffer.PooledByteBufAllocator: io.netty.buffer.PooledByteBufAllocator DEFAULT>;
v20 = <io.netty.buffer.ByteBufUtil: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v20.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object)>("-Dio.netty.allocator.type: {}", v13);
goto label7;
label6:
v16 = <io.netty.buffer.PooledByteBufAllocator: io.netty.buffer.PooledByteBufAllocator DEFAULT>;
v21 = <io.netty.buffer.ByteBufUtil: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v21.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object)>("-Dio.netty.allocator.type: pooled (unknown: {})", v13);
label7:
<io.netty.buffer.ByteBufUtil: io.netty.buffer.ByteBufAllocator DEFAULT_ALLOCATOR> = v16;
v22 = staticinvoke <io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>("io.netty.threadLocalDirectBufferSize", 0);
<io.netty.buffer.ByteBufUtil: int THREAD_LOCAL_BUFFER_SIZE> = v22;
v23 = <io.netty.buffer.ByteBufUtil: io.netty.util.internal.logging.InternalLogger logger>;
v24 = <io.netty.buffer.ByteBufUtil: int THREAD_LOCAL_BUFFER_SIZE>;
v25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v24);
interfaceinvoke v23.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object)>("-Dio.netty.threadLocalDirectBufferSize: {}", v25);
v26 = staticinvoke <io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>("io.netty.maxThreadLocalCharBufferSize", 16384);
<io.netty.buffer.ByteBufUtil: int MAX_CHAR_BUFFER_SIZE> = v26;
v27 = <io.netty.buffer.ByteBufUtil: io.netty.util.internal.logging.InternalLogger logger>;
v28 = <io.netty.buffer.ByteBufUtil: int MAX_CHAR_BUFFER_SIZE>;
v29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v28);
interfaceinvoke v27.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object)>("-Dio.netty.maxThreadLocalCharBufferSize: {}", v29);
v30 = new io.netty.buffer.ByteBufUtil$2;
specialinvoke v30.<io.netty.buffer.ByteBufUtil$2: void <init>()>();
<io.netty.buffer.ByteBufUtil: io.netty.util.ByteProcessor FIND_NON_ASCII> = v30;
return;
}
}