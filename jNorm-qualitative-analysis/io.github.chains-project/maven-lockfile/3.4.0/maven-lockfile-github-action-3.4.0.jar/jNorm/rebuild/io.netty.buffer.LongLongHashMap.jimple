final class io.netty.buffer.LongLongHashMap extends java.lang.Object
{
private static final int MASK_TEMPLATE;
private int mask;
private long[] array;
private int maxProbe;
private long zeroVal;
private final long emptyVal;
void <init>(long)
{
long v1;
long[] v2;
io.netty.buffer.LongLongHashMap v0;
v0 := @this: io.netty.buffer.LongLongHashMap;
v1 := @parameter0: long;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.buffer.LongLongHashMap: long emptyVal> = v1;
v0.<io.netty.buffer.LongLongHashMap: long zeroVal> = v1;
v2 = newarray (long)[32];
v0.<io.netty.buffer.LongLongHashMap: long[] array> = v2;
v0.<io.netty.buffer.LongLongHashMap: int mask> = 31;
specialinvoke v0.<io.netty.buffer.LongLongHashMap: void computeMaskAndProbe()>();
return;
}
public long put(long, long)
{
long v1, v13, v16, v2, v24, v4, v9;
long[] v14, v17, v18, v23, v26, v27, v8;
byte v10, v11, v12, v25, v3;
int v15, v19, v20, v21, v22, v28, v29, v30, v5, v6, v7;
io.netty.buffer.LongLongHashMap v0;
v0 := @this: io.netty.buffer.LongLongHashMap;
v1 := @parameter0: long;
v2 := @parameter1: long;
v3 = v1 cmp 0L;
if v3 != 0 goto label01;
v4 = v0.<io.netty.buffer.LongLongHashMap: long zeroVal>;
v0.<io.netty.buffer.LongLongHashMap: long zeroVal> = v2;
return v4;
label01:
v5 = specialinvoke v0.<io.netty.buffer.LongLongHashMap: int index(long)>(v1);
v6 = 0;
label02:
v7 = v0.<io.netty.buffer.LongLongHashMap: int maxProbe>;
if v6 >= v7 goto label10;
v8 = v0.<io.netty.buffer.LongLongHashMap: long[] array>;
v9 = v8[v5];
v10 = v9 cmp v1;
if v10 == 0 goto label03;
v11 = v9 cmp 0L;
if v11 != 0 goto label09;
label03:
v12 = v9 cmp 0L;
if v12 != 0 goto label04;
v13 = v0.<io.netty.buffer.LongLongHashMap: long emptyVal>;
goto label05;
label04:
v14 = v0.<io.netty.buffer.LongLongHashMap: long[] array>;
v15 = v5 + 1;
v13 = v14[v15];
label05:
v16 = v13;
v17 = v0.<io.netty.buffer.LongLongHashMap: long[] array>;
v17[v5] = v1;
v18 = v0.<io.netty.buffer.LongLongHashMap: long[] array>;
v19 = v5 + 1;
v18[v19] = v2;
label06:
v20 = v0.<io.netty.buffer.LongLongHashMap: int maxProbe>;
if v6 >= v20 goto label08;
v21 = v5 + 2;
v22 = v0.<io.netty.buffer.LongLongHashMap: int mask>;
v5 = v21 & v22;
v23 = v0.<io.netty.buffer.LongLongHashMap: long[] array>;
v24 = v23[v5];
v25 = v24 cmp v1;
if v25 != 0 goto label07;
v26 = v0.<io.netty.buffer.LongLongHashMap: long[] array>;
v26[v5] = 0L;
v27 = v0.<io.netty.buffer.LongLongHashMap: long[] array>;
v28 = v5 + 1;
v16 = v27[v28];
goto label08;
label07:
v6 = v6 + 1;
goto label06;
label08:
return v16;
label09:
v29 = v5 + 2;
v30 = v0.<io.netty.buffer.LongLongHashMap: int mask>;
v5 = v29 & v30;
v6 = v6 + 1;
goto label02;
label10:
specialinvoke v0.<io.netty.buffer.LongLongHashMap: void expand()>();
goto label01;
}
public void remove(long)
{
long v1, v3, v8;
long[] v10, v7;
byte v2, v9;
int v11, v12, v4, v5, v6;
io.netty.buffer.LongLongHashMap v0;
v0 := @this: io.netty.buffer.LongLongHashMap;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 != 0 goto label1;
v3 = v0.<io.netty.buffer.LongLongHashMap: long emptyVal>;
v0.<io.netty.buffer.LongLongHashMap: long zeroVal> = v3;
return;
label1:
v4 = specialinvoke v0.<io.netty.buffer.LongLongHashMap: int index(long)>(v1);
v5 = 0;
label2:
v6 = v0.<io.netty.buffer.LongLongHashMap: int maxProbe>;
if v5 >= v6 goto label4;
v7 = v0.<io.netty.buffer.LongLongHashMap: long[] array>;
v8 = v7[v4];
v9 = v8 cmp v1;
if v9 != 0 goto label3;
v10 = v0.<io.netty.buffer.LongLongHashMap: long[] array>;
v10[v4] = 0L;
goto label4;
label3:
v11 = v4 + 2;
v12 = v0.<io.netty.buffer.LongLongHashMap: int mask>;
v4 = v11 & v12;
v5 = v5 + 1;
goto label2;
label4:
return;
}
public long get(long)
{
long v1, v12, v15, v3, v8;
long[] v10, v7;
byte v2, v9;
int v11, v13, v14, v4, v5, v6;
io.netty.buffer.LongLongHashMap v0;
v0 := @this: io.netty.buffer.LongLongHashMap;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 != 0 goto label1;
v3 = v0.<io.netty.buffer.LongLongHashMap: long zeroVal>;
return v3;
label1:
v4 = specialinvoke v0.<io.netty.buffer.LongLongHashMap: int index(long)>(v1);
v5 = 0;
label2:
v6 = v0.<io.netty.buffer.LongLongHashMap: int maxProbe>;
if v5 >= v6 goto label4;
v7 = v0.<io.netty.buffer.LongLongHashMap: long[] array>;
v8 = v7[v4];
v9 = v8 cmp v1;
if v9 != 0 goto label3;
v10 = v0.<io.netty.buffer.LongLongHashMap: long[] array>;
v11 = v4 + 1;
v12 = v10[v11];
return v12;
label3:
v13 = v4 + 2;
v14 = v0.<io.netty.buffer.LongLongHashMap: int mask>;
v4 = v13 & v14;
v5 = v5 + 1;
goto label2;
label4:
v15 = v0.<io.netty.buffer.LongLongHashMap: long emptyVal>;
return v15;
}
private int index(long)
{
long v1, v2, v3, v4, v5, v6, v7, v8, v9;
int v10, v11;
io.netty.buffer.LongLongHashMap v0;
v0 := @this: io.netty.buffer.LongLongHashMap;
v1 := @parameter0: long;
v2 = v1 >>> 33;
v3 = v1 ^ v2;
v4 = v3 * -49064778989728563L;
v5 = v4 >>> 33;
v6 = v4 ^ v5;
v7 = v6 * -4265267296055464877L;
v8 = v7 >>> 33;
v9 = v7 ^ v8;
v10 = v0.<io.netty.buffer.LongLongHashMap: int mask>;
v11 = v9 & v10;
return v11;
}
private void expand()
{
long v10, v7;
long[] v1, v4;
byte v8;
int v2, v3, v5, v6, v9;
io.netty.buffer.LongLongHashMap v0;
v0 := @this: io.netty.buffer.LongLongHashMap;
v1 = v0.<io.netty.buffer.LongLongHashMap: long[] array>;
v2 = lengthof v1;
v3 = v2 * 2;
v4 = newarray (long)[v3];
v0.<io.netty.buffer.LongLongHashMap: long[] array> = v4;
specialinvoke v0.<io.netty.buffer.LongLongHashMap: void computeMaskAndProbe()>();
v5 = 0;
label1:
v6 = lengthof v1;
if v5 >= v6 goto label3;
v7 = v1[v5];
v8 = v7 cmp 0L;
if v8 == 0 goto label2;
v9 = v5 + 1;
v10 = v1[v9];
virtualinvoke v0.<io.netty.buffer.LongLongHashMap: long put(long,long)>(v7, v10);
label2:
v5 = v5 + 2;
goto label1;
label3:
return;
}
private void computeMaskAndProbe()
{
long[] v1;
int v2, v3, v4, v5;
io.netty.buffer.LongLongHashMap v0;
double v6;
v0 := @this: io.netty.buffer.LongLongHashMap;
v1 = v0.<io.netty.buffer.LongLongHashMap: long[] array>;
v2 = lengthof v1;
v3 = v2 - 1;
v4 = (int) -2;
v5 = v3 & v4;
v0.<io.netty.buffer.LongLongHashMap: int mask> = v5;
v6 = staticinvoke <java.lang.Math: double log(double)>(v2);
v0.<io.netty.buffer.LongLongHashMap: int maxProbe> = v6;
return;
}
}