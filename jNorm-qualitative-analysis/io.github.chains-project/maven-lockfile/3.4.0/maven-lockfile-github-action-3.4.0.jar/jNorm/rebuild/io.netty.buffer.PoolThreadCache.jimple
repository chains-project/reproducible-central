final class io.netty.buffer.PoolThreadCache extends java.lang.Object
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private static final int INTEGER_SIZE_MINUS_ONE;
final io.netty.buffer.PoolArena heapArena;
final io.netty.buffer.PoolArena directArena;
private final io.netty.buffer.PoolThreadCache$MemoryRegionCache[] smallSubPageHeapCaches;
private final io.netty.buffer.PoolThreadCache$MemoryRegionCache[] smallSubPageDirectCaches;
private final io.netty.buffer.PoolThreadCache$MemoryRegionCache[] normalHeapCaches;
private final io.netty.buffer.PoolThreadCache$MemoryRegionCache[] normalDirectCaches;
private final int freeSweepAllocationThreshold;
private final java.util.concurrent.atomic.AtomicBoolean freed;
private int allocations;
void <init>(io.netty.buffer.PoolArena, io.netty.buffer.PoolArena, int, int, int, int)
{
java.util.concurrent.atomic.AtomicBoolean v7;
java.util.concurrent.atomic.AtomicInteger v11, v15;
int v12, v3, v4, v5, v6, v8;
java.lang.String v21;
io.netty.buffer.PoolThreadCache$MemoryRegionCache[] v10, v13, v14, v16, v17, v18, v19, v9;
io.netty.buffer.PoolArena v1, v2;
java.lang.IllegalArgumentException v20;
io.netty.buffer.PoolThreadCache v0;
v0 := @this: io.netty.buffer.PoolThreadCache;
v1 := @parameter0: io.netty.buffer.PoolArena;
v2 := @parameter1: io.netty.buffer.PoolArena;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 := @parameter4: int;
v6 := @parameter5: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v7 = new java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v7.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();
v0.<io.netty.buffer.PoolThreadCache: java.util.concurrent.atomic.AtomicBoolean freed> = v7;
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositiveOrZero(int,java.lang.String)>(v5, "maxCachedBufferCapacity");
v0.<io.netty.buffer.PoolThreadCache: int freeSweepAllocationThreshold> = v6;
v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolArena heapArena> = v1;
v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolArena directArena> = v2;
if v2 == null goto label1;
v8 = v2.<io.netty.buffer.PoolArena: int numSmallSubpagePools>;
v9 = staticinvoke <io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache[] createSubPageCaches(int,int)>(v3, v8);
v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache[] smallSubPageDirectCaches> = v9;
v10 = staticinvoke <io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache[] createNormalCaches(int,int,io.netty.buffer.PoolArena)>(v4, v5, v2);
v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache[] normalDirectCaches> = v10;
v11 = v2.<io.netty.buffer.PoolArena: java.util.concurrent.atomic.AtomicInteger numThreadCaches>;
virtualinvoke v11.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
goto label2;
label1:
v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache[] smallSubPageDirectCaches> = null;
v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache[] normalDirectCaches> = null;
label2:
if v1 == null goto label3;
v12 = v1.<io.netty.buffer.PoolArena: int numSmallSubpagePools>;
v13 = staticinvoke <io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache[] createSubPageCaches(int,int)>(v3, v12);
v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache[] smallSubPageHeapCaches> = v13;
v14 = staticinvoke <io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache[] createNormalCaches(int,int,io.netty.buffer.PoolArena)>(v4, v5, v1);
v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache[] normalHeapCaches> = v14;
v15 = v1.<io.netty.buffer.PoolArena: java.util.concurrent.atomic.AtomicInteger numThreadCaches>;
virtualinvoke v15.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
goto label4;
label3:
v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache[] smallSubPageHeapCaches> = null;
v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache[] normalHeapCaches> = null;
label4:
v16 = v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache[] smallSubPageDirectCaches>;
if v16 != null goto label5;
v17 = v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache[] normalDirectCaches>;
if v17 != null goto label5;
v18 = v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache[] smallSubPageHeapCaches>;
if v18 != null goto label5;
v19 = v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache[] normalHeapCaches>;
if v19 == null goto label6;
label5:
if v6 >= 1 goto label6;
v20 = new java.lang.IllegalArgumentException;
v21 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("freeSweepAllocationThreshold: \u0001 (expected: > 0)");
specialinvoke v20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v21);
throw v20;
label6:
return;
}
private static io.netty.buffer.PoolThreadCache$MemoryRegionCache[] createSubPageCaches(int, int)
{
int v0, v1, v3, v4;
io.netty.buffer.PoolThreadCache$SubPageMemoryRegionCache v5;
io.netty.buffer.PoolThreadCache$MemoryRegionCache[] v2;
v0 := @parameter0: int;
v1 := @parameter1: int;
if v0 <= 0 goto label3;
if v1 <= 0 goto label3;
v2 = newarray (io.netty.buffer.PoolThreadCache$MemoryRegionCache)[v1];
v3 = 0;
label1:
v4 = lengthof v2;
if v3 >= v4 goto label2;
v5 = new io.netty.buffer.PoolThreadCache$SubPageMemoryRegionCache;
specialinvoke v5.<io.netty.buffer.PoolThreadCache$SubPageMemoryRegionCache: void <init>(int)>(v0);
v2[v3] = v5;
v3 = v3 + 1;
goto label1;
label2:
return v2;
label3:
return null;
}
private static io.netty.buffer.PoolThreadCache$MemoryRegionCache[] createNormalCaches(int, int, io.netty.buffer.PoolArena)
{
java.lang.Object[] v11;
io.netty.buffer.PoolThreadCache$NormalMemoryRegionCache v9;
io.netty.buffer.PoolArena v2;
java.util.ArrayList v5;
int v0, v1, v3, v4, v6, v7, v8;
io.netty.buffer.PoolThreadCache$MemoryRegionCache[] v10;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 := @parameter2: io.netty.buffer.PoolArena;
if v0 <= 0 goto label3;
if v1 <= 0 goto label3;
v3 = v2.<io.netty.buffer.PoolArena: int chunkSize>;
v4 = staticinvoke <java.lang.Math: int min(int,int)>(v3, v1);
v5 = new java.util.ArrayList;
specialinvoke v5.<java.util.ArrayList: void <init>()>();
v6 = v2.<io.netty.buffer.PoolArena: int numSmallSubpagePools>;
label1:
v7 = v2.<io.netty.buffer.PoolArena: int nSizes>;
if v6 >= v7 goto label2;
v8 = virtualinvoke v2.<io.netty.buffer.PoolArena: int sizeIdx2size(int)>(v6);
if v8 > v4 goto label2;
v9 = new io.netty.buffer.PoolThreadCache$NormalMemoryRegionCache;
specialinvoke v9.<io.netty.buffer.PoolThreadCache$NormalMemoryRegionCache: void <init>(int)>(v0);
interfaceinvoke v5.<java.util.List: boolean add(java.lang.Object)>(v9);
v6 = v6 + 1;
goto label1;
label2:
v10 = newarray (io.netty.buffer.PoolThreadCache$MemoryRegionCache)[0];
v11 = interfaceinvoke v5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v10);
return v11;
label3:
return null;
}
static int log2(int)
{
int v0, v1, v2;
v0 := @parameter0: int;
v1 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(v0);
v2 = 31 - v1;
return v2;
}
boolean allocateSmall(io.netty.buffer.PoolArena, io.netty.buffer.PooledByteBuf, int, int)
{
io.netty.buffer.PoolThreadCache v0;
io.netty.buffer.PoolArena v1;
int v3, v4;
io.netty.buffer.PoolThreadCache$MemoryRegionCache v5;
io.netty.buffer.PooledByteBuf v2;
boolean v6;
v0 := @this: io.netty.buffer.PoolThreadCache;
v1 := @parameter0: io.netty.buffer.PoolArena;
v2 := @parameter1: io.netty.buffer.PooledByteBuf;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 = specialinvoke v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache cacheForSmall(io.netty.buffer.PoolArena,int)>(v1, v4);
v6 = specialinvoke v0.<io.netty.buffer.PoolThreadCache: boolean allocate(io.netty.buffer.PoolThreadCache$MemoryRegionCache,io.netty.buffer.PooledByteBuf,int)>(v5, v2, v3);
return v6;
}
boolean allocateNormal(io.netty.buffer.PoolArena, io.netty.buffer.PooledByteBuf, int, int)
{
io.netty.buffer.PoolThreadCache v0;
io.netty.buffer.PoolArena v1;
int v3, v4;
io.netty.buffer.PoolThreadCache$MemoryRegionCache v5;
io.netty.buffer.PooledByteBuf v2;
boolean v6;
v0 := @this: io.netty.buffer.PoolThreadCache;
v1 := @parameter0: io.netty.buffer.PoolArena;
v2 := @parameter1: io.netty.buffer.PooledByteBuf;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 = specialinvoke v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache cacheForNormal(io.netty.buffer.PoolArena,int)>(v1, v4);
v6 = specialinvoke v0.<io.netty.buffer.PoolThreadCache: boolean allocate(io.netty.buffer.PoolThreadCache$MemoryRegionCache,io.netty.buffer.PooledByteBuf,int)>(v5, v2, v3);
return v6;
}
private boolean allocate(io.netty.buffer.PoolThreadCache$MemoryRegionCache, io.netty.buffer.PooledByteBuf, int)
{
io.netty.buffer.PoolThreadCache$MemoryRegionCache v1;
io.netty.buffer.PooledByteBuf v2;
io.netty.buffer.PoolThreadCache v0;
int v3, v5, v6, v7;
boolean v4;
v0 := @this: io.netty.buffer.PoolThreadCache;
v1 := @parameter0: io.netty.buffer.PoolThreadCache$MemoryRegionCache;
v2 := @parameter1: io.netty.buffer.PooledByteBuf;
v3 := @parameter2: int;
if v1 != null goto label1;
return 0;
label1:
v4 = virtualinvoke v1.<io.netty.buffer.PoolThreadCache$MemoryRegionCache: boolean allocate(io.netty.buffer.PooledByteBuf,int,io.netty.buffer.PoolThreadCache)>(v2, v3, v0);
v5 = v0.<io.netty.buffer.PoolThreadCache: int allocations>;
v6 = v5 + 1;
v0.<io.netty.buffer.PoolThreadCache: int allocations> = v6;
v7 = v0.<io.netty.buffer.PoolThreadCache: int freeSweepAllocationThreshold>;
if v6 < v7 goto label2;
v0.<io.netty.buffer.PoolThreadCache: int allocations> = 0;
virtualinvoke v0.<io.netty.buffer.PoolThreadCache: void trim()>();
label2:
return v4;
}
boolean add(io.netty.buffer.PoolArena, io.netty.buffer.PoolChunk, java.nio.ByteBuffer, long, int, io.netty.buffer.PoolArena$SizeClass)
{
io.netty.buffer.PoolArena v1;
io.netty.buffer.PoolThreadCache$MemoryRegionCache v8;
java.util.concurrent.atomic.AtomicBoolean v9;
long v4;
java.nio.ByteBuffer v3;
io.netty.buffer.PoolThreadCache v0;
int v5, v7;
io.netty.buffer.PoolChunk v2;
io.netty.buffer.PoolArena$SizeClass v6;
boolean v10, v11;
v0 := @this: io.netty.buffer.PoolThreadCache;
v1 := @parameter0: io.netty.buffer.PoolArena;
v2 := @parameter1: io.netty.buffer.PoolChunk;
v3 := @parameter2: java.nio.ByteBuffer;
v4 := @parameter3: long;
v5 := @parameter4: int;
v6 := @parameter5: io.netty.buffer.PoolArena$SizeClass;
v7 = virtualinvoke v1.<io.netty.buffer.PoolArena: int size2SizeIdx(int)>(v5);
v8 = specialinvoke v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache cache(io.netty.buffer.PoolArena,int,io.netty.buffer.PoolArena$SizeClass)>(v1, v7, v6);
if v8 != null goto label1;
return 0;
label1:
v9 = v0.<io.netty.buffer.PoolThreadCache: java.util.concurrent.atomic.AtomicBoolean freed>;
v10 = virtualinvoke v9.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
if v10 == 0 goto label2;
return 0;
label2:
v11 = virtualinvoke v8.<io.netty.buffer.PoolThreadCache$MemoryRegionCache: boolean add(io.netty.buffer.PoolChunk,java.nio.ByteBuffer,long,int)>(v2, v3, v4, v5);
return v11;
}
private io.netty.buffer.PoolThreadCache$MemoryRegionCache cache(io.netty.buffer.PoolArena, int, io.netty.buffer.PoolArena$SizeClass)
{
io.netty.buffer.PoolArena v1;
io.netty.buffer.PoolThreadCache$MemoryRegionCache v7, v8;
java.lang.Error v9;
io.netty.buffer.PoolThreadCache v0;
int[] v4;
int v2, v5, v6;
io.netty.buffer.PoolArena$SizeClass v3;
v0 := @this: io.netty.buffer.PoolThreadCache;
v1 := @parameter0: io.netty.buffer.PoolArena;
v2 := @parameter1: int;
v3 := @parameter2: io.netty.buffer.PoolArena$SizeClass;
v4 = <io.netty.buffer.PoolThreadCache$1: int[] $SwitchMap$io$netty$buffer$PoolArena$SizeClass>;
v5 = virtualinvoke v3.<io.netty.buffer.PoolArena$SizeClass: int ordinal()>();
v6 = v4[v5];
lookupswitch(v6)
{
case 1: goto label1;
case 2: goto label2;
default: goto label3;
};
label1:
v7 = specialinvoke v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache cacheForNormal(io.netty.buffer.PoolArena,int)>(v1, v2);
return v7;
label2:
v8 = specialinvoke v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache cacheForSmall(io.netty.buffer.PoolArena,int)>(v1, v2);
return v8;
label3:
v9 = new java.lang.Error;
specialinvoke v9.<java.lang.Error: void <init>()>();
throw v9;
}
protected void finalize() throws java.lang.Throwable
{
java.lang.Throwable v1;
io.netty.buffer.PoolThreadCache v0;
v0 := @this: io.netty.buffer.PoolThreadCache;
label1:
specialinvoke v0.<java.lang.Object: void finalize()>();
label2:
virtualinvoke v0.<io.netty.buffer.PoolThreadCache: void free(boolean)>(1);
goto label4;
label3:
v1 := @caughtexception;
virtualinvoke v0.<io.netty.buffer.PoolThreadCache: void free(boolean)>(1);
throw v1;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
void free(boolean)
{
java.util.concurrent.atomic.AtomicBoolean v2;
java.lang.Integer v18;
java.util.concurrent.atomic.AtomicInteger v23, v26;
java.lang.Thread v19;
int v10, v11, v13, v14, v5, v7, v8;
java.lang.String v20;
io.netty.buffer.PoolThreadCache$MemoryRegionCache[] v12, v27, v28, v29, v30, v4, v6, v9;
boolean v1, v16, v3;
io.netty.buffer.PoolArena v21, v22, v24, v25;
io.netty.buffer.PoolThreadCache v0;
io.netty.util.internal.logging.InternalLogger v15, v17;
v0 := @this: io.netty.buffer.PoolThreadCache;
v1 := @parameter0: boolean;
v2 = v0.<io.netty.buffer.PoolThreadCache: java.util.concurrent.atomic.AtomicBoolean freed>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);
if v3 == 0 goto label3;
v4 = v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache[] smallSubPageDirectCaches>;
v5 = staticinvoke <io.netty.buffer.PoolThreadCache: int free(io.netty.buffer.PoolThreadCache$MemoryRegionCache[],boolean)>(v4, v1);
v6 = v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache[] normalDirectCaches>;
v7 = staticinvoke <io.netty.buffer.PoolThreadCache: int free(io.netty.buffer.PoolThreadCache$MemoryRegionCache[],boolean)>(v6, v1);
v8 = v5 + v7;
v9 = v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache[] smallSubPageHeapCaches>;
v10 = staticinvoke <io.netty.buffer.PoolThreadCache: int free(io.netty.buffer.PoolThreadCache$MemoryRegionCache[],boolean)>(v9, v1);
v11 = v8 + v10;
v12 = v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache[] normalHeapCaches>;
v13 = staticinvoke <io.netty.buffer.PoolThreadCache: int free(io.netty.buffer.PoolThreadCache$MemoryRegionCache[],boolean)>(v12, v1);
v14 = v11 + v13;
if v14 <= 0 goto label1;
v15 = <io.netty.buffer.PoolThreadCache: io.netty.util.internal.logging.InternalLogger logger>;
v16 = interfaceinvoke v15.<io.netty.util.internal.logging.InternalLogger: boolean isDebugEnabled()>();
if v16 == 0 goto label1;
v17 = <io.netty.buffer.PoolThreadCache: io.netty.util.internal.logging.InternalLogger logger>;
v18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v14);
v19 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v20 = virtualinvoke v19.<java.lang.Thread: java.lang.String getName()>();
interfaceinvoke v17.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Freed {} thread-local buffer(s) from thread: {}", v18, v20);
label1:
v21 = v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolArena directArena>;
if v21 == null goto label2;
v22 = v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolArena directArena>;
v23 = v22.<io.netty.buffer.PoolArena: java.util.concurrent.atomic.AtomicInteger numThreadCaches>;
virtualinvoke v23.<java.util.concurrent.atomic.AtomicInteger: int getAndDecrement()>();
label2:
v24 = v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolArena heapArena>;
if v24 == null goto label4;
v25 = v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolArena heapArena>;
v26 = v25.<io.netty.buffer.PoolArena: java.util.concurrent.atomic.AtomicInteger numThreadCaches>;
virtualinvoke v26.<java.util.concurrent.atomic.AtomicInteger: int getAndDecrement()>();
goto label4;
label3:
v27 = v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache[] smallSubPageDirectCaches>;
staticinvoke <io.netty.buffer.PoolThreadCache: void checkCacheMayLeak(io.netty.buffer.PoolThreadCache$MemoryRegionCache[],java.lang.String)>(v27, "SmallSubPageDirectCaches");
v28 = v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache[] normalDirectCaches>;
staticinvoke <io.netty.buffer.PoolThreadCache: void checkCacheMayLeak(io.netty.buffer.PoolThreadCache$MemoryRegionCache[],java.lang.String)>(v28, "NormalDirectCaches");
v29 = v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache[] smallSubPageHeapCaches>;
staticinvoke <io.netty.buffer.PoolThreadCache: void checkCacheMayLeak(io.netty.buffer.PoolThreadCache$MemoryRegionCache[],java.lang.String)>(v29, "SmallSubPageHeapCaches");
v30 = v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache[] normalHeapCaches>;
staticinvoke <io.netty.buffer.PoolThreadCache: void checkCacheMayLeak(io.netty.buffer.PoolThreadCache$MemoryRegionCache[],java.lang.String)>(v30, "NormalHeapCaches");
label4:
return;
}
private static void checkCacheMayLeak(io.netty.buffer.PoolThreadCache$MemoryRegionCache[], java.lang.String)
{
io.netty.buffer.PoolThreadCache$MemoryRegionCache v4;
io.netty.util.internal.logging.InternalLogger v7;
int v2, v3;
java.lang.String v1;
java.util.Queue v5;
io.netty.buffer.PoolThreadCache$MemoryRegionCache[] v0;
boolean v6;
v0 := @parameter0: io.netty.buffer.PoolThreadCache$MemoryRegionCache[];
v1 := @parameter1: java.lang.String;
v2 = lengthof v0;
v3 = 0;
label1:
if v3 >= v2 goto label3;
v4 = v0[v3];
v5 = v4.<io.netty.buffer.PoolThreadCache$MemoryRegionCache: java.util.Queue queue>;
v6 = interfaceinvoke v5.<java.util.Queue: boolean isEmpty()>();
if v6 != 0 goto label2;
v7 = <io.netty.buffer.PoolThreadCache: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v7.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object)>("{} memory may leak.", v1);
return;
label2:
v3 = v3 + 1;
goto label1;
label3:
return;
}
private static int free(io.netty.buffer.PoolThreadCache$MemoryRegionCache[], boolean)
{
int v2, v3, v4, v6;
io.netty.buffer.PoolThreadCache$MemoryRegionCache v5;
io.netty.buffer.PoolThreadCache$MemoryRegionCache[] v0;
boolean v1;
v0 := @parameter0: io.netty.buffer.PoolThreadCache$MemoryRegionCache[];
v1 := @parameter1: boolean;
if v0 != null goto label1;
return 0;
label1:
v2 = 0;
v3 = lengthof v0;
v4 = 0;
label2:
if v4 >= v3 goto label3;
v5 = v0[v4];
v6 = staticinvoke <io.netty.buffer.PoolThreadCache: int free(io.netty.buffer.PoolThreadCache$MemoryRegionCache,boolean)>(v5, v1);
v2 = v2 + v6;
v4 = v4 + 1;
goto label2;
label3:
return v2;
}
private static int free(io.netty.buffer.PoolThreadCache$MemoryRegionCache, boolean)
{
int v2;
io.netty.buffer.PoolThreadCache$MemoryRegionCache v0;
boolean v1;
v0 := @parameter0: io.netty.buffer.PoolThreadCache$MemoryRegionCache;
v1 := @parameter1: boolean;
if v0 != null goto label1;
return 0;
label1:
v2 = virtualinvoke v0.<io.netty.buffer.PoolThreadCache$MemoryRegionCache: int free(boolean)>(v1);
return v2;
}
void trim()
{
io.netty.buffer.PoolThreadCache v0;
io.netty.buffer.PoolThreadCache$MemoryRegionCache[] v1, v2, v3, v4;
v0 := @this: io.netty.buffer.PoolThreadCache;
v1 = v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache[] smallSubPageDirectCaches>;
staticinvoke <io.netty.buffer.PoolThreadCache: void trim(io.netty.buffer.PoolThreadCache$MemoryRegionCache[])>(v1);
v2 = v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache[] normalDirectCaches>;
staticinvoke <io.netty.buffer.PoolThreadCache: void trim(io.netty.buffer.PoolThreadCache$MemoryRegionCache[])>(v2);
v3 = v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache[] smallSubPageHeapCaches>;
staticinvoke <io.netty.buffer.PoolThreadCache: void trim(io.netty.buffer.PoolThreadCache$MemoryRegionCache[])>(v3);
v4 = v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache[] normalHeapCaches>;
staticinvoke <io.netty.buffer.PoolThreadCache: void trim(io.netty.buffer.PoolThreadCache$MemoryRegionCache[])>(v4);
return;
}
private static void trim(io.netty.buffer.PoolThreadCache$MemoryRegionCache[])
{
int v1, v2;
io.netty.buffer.PoolThreadCache$MemoryRegionCache v3;
io.netty.buffer.PoolThreadCache$MemoryRegionCache[] v0;
v0 := @parameter0: io.netty.buffer.PoolThreadCache$MemoryRegionCache[];
if v0 != null goto label1;
return;
label1:
v1 = lengthof v0;
v2 = 0;
label2:
if v2 >= v1 goto label3;
v3 = v0[v2];
staticinvoke <io.netty.buffer.PoolThreadCache: void trim(io.netty.buffer.PoolThreadCache$MemoryRegionCache)>(v3);
v2 = v2 + 1;
goto label2;
label3:
return;
}
private static void trim(io.netty.buffer.PoolThreadCache$MemoryRegionCache)
{
io.netty.buffer.PoolThreadCache$MemoryRegionCache v0;
v0 := @parameter0: io.netty.buffer.PoolThreadCache$MemoryRegionCache;
if v0 != null goto label1;
return;
label1:
virtualinvoke v0.<io.netty.buffer.PoolThreadCache$MemoryRegionCache: void trim()>();
return;
}
private io.netty.buffer.PoolThreadCache$MemoryRegionCache cacheForSmall(io.netty.buffer.PoolArena, int)
{
io.netty.buffer.PoolArena v1;
io.netty.buffer.PoolThreadCache$MemoryRegionCache v5, v7;
io.netty.buffer.PoolThreadCache v0;
int v2;
io.netty.buffer.PoolThreadCache$MemoryRegionCache[] v4, v6;
boolean v3;
v0 := @this: io.netty.buffer.PoolThreadCache;
v1 := @parameter0: io.netty.buffer.PoolArena;
v2 := @parameter1: int;
v3 = virtualinvoke v1.<io.netty.buffer.PoolArena: boolean isDirect()>();
if v3 == 0 goto label1;
v4 = v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache[] smallSubPageDirectCaches>;
v5 = staticinvoke <io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache cache(io.netty.buffer.PoolThreadCache$MemoryRegionCache[],int)>(v4, v2);
return v5;
label1:
v6 = v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache[] smallSubPageHeapCaches>;
v7 = staticinvoke <io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache cache(io.netty.buffer.PoolThreadCache$MemoryRegionCache[],int)>(v6, v2);
return v7;
}
private io.netty.buffer.PoolThreadCache$MemoryRegionCache cacheForNormal(io.netty.buffer.PoolArena, int)
{
io.netty.buffer.PoolArena v1;
io.netty.buffer.PoolThreadCache$MemoryRegionCache v7, v9;
io.netty.buffer.PoolThreadCache v0;
int v2, v3, v4;
io.netty.buffer.PoolThreadCache$MemoryRegionCache[] v6, v8;
boolean v5;
v0 := @this: io.netty.buffer.PoolThreadCache;
v1 := @parameter0: io.netty.buffer.PoolArena;
v2 := @parameter1: int;
v3 = v1.<io.netty.buffer.PoolArena: int numSmallSubpagePools>;
v4 = v2 - v3;
v5 = virtualinvoke v1.<io.netty.buffer.PoolArena: boolean isDirect()>();
if v5 == 0 goto label1;
v6 = v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache[] normalDirectCaches>;
v7 = staticinvoke <io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache cache(io.netty.buffer.PoolThreadCache$MemoryRegionCache[],int)>(v6, v4);
return v7;
label1:
v8 = v0.<io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache[] normalHeapCaches>;
v9 = staticinvoke <io.netty.buffer.PoolThreadCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache cache(io.netty.buffer.PoolThreadCache$MemoryRegionCache[],int)>(v8, v4);
return v9;
}
private static io.netty.buffer.PoolThreadCache$MemoryRegionCache cache(io.netty.buffer.PoolThreadCache$MemoryRegionCache[], int)
{
int v1, v2, v3;
io.netty.buffer.PoolThreadCache$MemoryRegionCache v4;
io.netty.buffer.PoolThreadCache$MemoryRegionCache[] v0;
v0 := @parameter0: io.netty.buffer.PoolThreadCache$MemoryRegionCache[];
v1 := @parameter1: int;
if v0 == null goto label1;
v2 = lengthof v0;
v3 = v2 - 1;
if v1 <= v3 goto label2;
label1:
return null;
label2:
v4 = v0[v1];
return v4;
}
static void <clinit>()
{
io.netty.util.internal.logging.InternalLogger v0;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/buffer/PoolThreadCache;");
<io.netty.buffer.PoolThreadCache: io.netty.util.internal.logging.InternalLogger logger> = v0;
return;
}
}