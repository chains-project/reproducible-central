abstract class io.netty.buffer.SizeClasses extends java.lang.Object implements io.netty.buffer.SizeClassesMetric
{
static final int LOG2_QUANTUM;
private static final int LOG2_SIZE_CLASS_GROUP;
private static final int LOG2_MAX_LOOKUP_SIZE;
private static final int INDEX_IDX;
private static final int LOG2GROUP_IDX;
private static final int LOG2DELTA_IDX;
private static final int NDELTA_IDX;
private static final int PAGESIZE_IDX;
private static final int SUBPAGE_IDX;
private static final int LOG2_DELTA_LOOKUP_IDX;
private static final byte no;
private static final byte yes;
protected final int pageSize;
protected final int pageShifts;
protected final int chunkSize;
protected final int directMemoryCacheAlignment;
final int nSizes;
final int nSubpages;
final int nPSizes;
final int lookupMaxSize;
final int smallMaxSizeIdx;
private final int[] pageIdx2sizeTab;
private final int[] sizeIdx2sizeTab;
private final int[] size2idxTab;
static final boolean $assertionsDisabled;
protected void <init>(int, int, int, int)
{
short[][] v10;
int[] v33, v34, v35;
boolean v22;
short[] v17, v20, v29;
java.lang.AssertionError v23;
short v30, v31, v32;
int v1, v11, v12, v13, v14, v15, v16, v18, v19, v2, v21, v24, v25, v26, v27, v28, v3, v4, v5, v6, v7, v8, v9;
io.netty.buffer.SizeClasses v0;
v0 := @this: io.netty.buffer.SizeClasses;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v5 = staticinvoke <io.netty.buffer.PoolThreadCache: int log2(int)>(v3);
v6 = v5 - 4;
v7 = v6 - 2;
v8 = v7 + 1;
v9 = v8 << 2;
v10 = newmultiarray (short)[v9][7];
v11 = (int) -1;
v12 = v11;
v13 = 0;
v14 = 0;
v15 = 4;
v16 = 0;
label01:
if v16 >= 4 goto label02;
v17 = staticinvoke <io.netty.buffer.SizeClasses: short[] newSizeClass(int,int,int,int,int)>(v13, 4, 4, v16, v2);
v10[v13] = v17;
v14 = staticinvoke <io.netty.buffer.SizeClasses: int sizeOf(short[],int)>(v17, v4);
v16 = v16 + 1;
v13 = v13 + 1;
goto label01;
label02:
v18 = 6;
label03:
if v14 >= v3 goto label06;
v19 = 1;
label04:
if v19 > 4 goto label05;
if v14 >= v3 goto label05;
v20 = staticinvoke <io.netty.buffer.SizeClasses: short[] newSizeClass(int,int,int,int,int)>(v13, v18, v15, v19, v2);
v10[v13] = v20;
v21 = staticinvoke <io.netty.buffer.SizeClasses: int sizeOf(short[],int)>(v20, v4);
v12 = v21;
v14 = v21;
v19 = v19 + 1;
v13 = v13 + 1;
goto label04;
label05:
v18 = v18 + 1;
v15 = v15 + 1;
goto label03;
label06:
v22 = <io.netty.buffer.SizeClasses: boolean $assertionsDisabled>;
if v22 != 0 goto label07;
if v3 == v12 goto label07;
v23 = new java.lang.AssertionError;
specialinvoke v23.<java.lang.AssertionError: void <init>()>();
throw v23;
label07:
v24 = 0;
v25 = 0;
v26 = 0;
v27 = 0;
v28 = 0;
label08:
if v28 >= v13 goto label12;
v29 = v10[v28];
v30 = v29[4];
if v30 != 1 goto label09;
v26 = v26 + 1;
label09:
v31 = v29[5];
if v31 != 1 goto label10;
v27 = v27 + 1;
v24 = v28;
label10:
v32 = v29[6];
if v32 == 0 goto label11;
v25 = staticinvoke <io.netty.buffer.SizeClasses: int sizeOf(short[],int)>(v29, v4);
label11:
v28 = v28 + 1;
goto label08;
label12:
v0.<io.netty.buffer.SizeClasses: int smallMaxSizeIdx> = v24;
v0.<io.netty.buffer.SizeClasses: int lookupMaxSize> = v25;
v0.<io.netty.buffer.SizeClasses: int nPSizes> = v26;
v0.<io.netty.buffer.SizeClasses: int nSubpages> = v27;
v0.<io.netty.buffer.SizeClasses: int nSizes> = v13;
v0.<io.netty.buffer.SizeClasses: int pageSize> = v1;
v0.<io.netty.buffer.SizeClasses: int pageShifts> = v2;
v0.<io.netty.buffer.SizeClasses: int chunkSize> = v3;
v0.<io.netty.buffer.SizeClasses: int directMemoryCacheAlignment> = v4;
v33 = staticinvoke <io.netty.buffer.SizeClasses: int[] newIdx2SizeTab(short[][],int,int)>(v10, v13, v4);
v0.<io.netty.buffer.SizeClasses: int[] sizeIdx2sizeTab> = v33;
v34 = staticinvoke <io.netty.buffer.SizeClasses: int[] newPageIdx2sizeTab(short[][],int,int,int)>(v10, v13, v26, v4);
v0.<io.netty.buffer.SizeClasses: int[] pageIdx2sizeTab> = v34;
v35 = staticinvoke <io.netty.buffer.SizeClasses: int[] newSize2idxTab(int,short[][])>(v25, v10);
v0.<io.netty.buffer.SizeClasses: int[] size2idxTab> = v35;
return;
}
private static short[] newSizeClass(int, int, int, int, int)
{
byte v10, v20, v21, v5;
int v0, v1, v11, v12, v13, v16, v17, v18, v19, v2, v22, v3, v4, v6, v7, v8, v9;
boolean v14, v15;
short[] v23;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 := @parameter4: int;
if v2 < v4 goto label01;
v5 = 1;
goto label04;
label01:
v6 = 1 << v4;
v7 = staticinvoke <io.netty.buffer.SizeClasses: int calculateSize(int,int,int)>(v1, v3, v2);
v8 = v7 / v6;
v9 = v8 * v6;
if v7 != v9 goto label02;
v10 = 1;
goto label03;
label02:
v10 = 0;
label03:
v5 = v10;
label04:
if v3 != 0 goto label05;
v11 = 0;
goto label06;
label05:
v11 = staticinvoke <io.netty.buffer.PoolThreadCache: int log2(int)>(v3);
label06:
v12 = v11;
v13 = 1 << v11;
if v13 >= v3 goto label07;
v14 = 1;
goto label08;
label07:
v14 = 0;
label08:
v15 = v14;
v16 = v2 + v12;
if v16 != v1 goto label09;
v17 = v1 + 1;
goto label10;
label09:
v17 = v1;
label10:
v18 = v17;
if v17 != v1 goto label11;
v15 = 1;
label11:
v19 = v4 + 2;
if v18 >= v19 goto label12;
v20 = 1;
goto label13;
label12:
v20 = 0;
label13:
v21 = v20;
if v18 < 12 goto label14;
if v18 != 12 goto label15;
if v15 != 0 goto label15;
label14:
v22 = v2;
goto label16;
label15:
v22 = 0;
label16:
v23 = newarray (short)[7];
v23[0] = v0;
v23[1] = v1;
v23[2] = v2;
v23[3] = v3;
v23[4] = v5;
v23[5] = v21;
v23[6] = v22;
return v23;
}
private static int[] newIdx2SizeTab(short[][], int, int)
{
int[] v3;
int v1, v2, v4, v6;
short[][] v0;
short[] v5;
v0 := @parameter0: short[][];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = newarray (int)[v1];
v4 = 0;
label1:
if v4 >= v1 goto label2;
v5 = v0[v4];
v6 = staticinvoke <io.netty.buffer.SizeClasses: int sizeOf(short[],int)>(v5, v2);
v3[v4] = v6;
v4 = v4 + 1;
goto label1;
label2:
return v3;
}
private static int calculateSize(int, int, int)
{
int v0, v1, v2, v3, v4, v5;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = 1 << v0;
v4 = v1 << v2;
v5 = v3 + v4;
return v5;
}
private static int sizeOf(short[], int)
{
short v2, v3, v4;
int v1, v5, v6;
short[] v0;
v0 := @parameter0: short[];
v1 := @parameter1: int;
v2 = v0[1];
v3 = v0[2];
v4 = v0[3];
v5 = staticinvoke <io.netty.buffer.SizeClasses: int calculateSize(int,int,int)>(v2, v4, v3);
v6 = staticinvoke <io.netty.buffer.SizeClasses: int alignSizeIfNeeded(int,int)>(v5, v1);
return v6;
}
private static int[] newPageIdx2sizeTab(short[][], int, int, int)
{
short[][] v0;
short v8;
int[] v4;
int v1, v10, v2, v3, v5, v6, v9;
short[] v7;
v0 := @parameter0: short[][];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 = newarray (int)[v2];
v5 = 0;
v6 = 0;
label1:
if v6 >= v1 goto label3;
v7 = v0[v6];
v8 = v7[4];
if v8 != 1 goto label2;
v9 = v5;
v5 = v5 + 1;
v10 = staticinvoke <io.netty.buffer.SizeClasses: int sizeOf(short[],int)>(v7, v3);
v4[v9] = v10;
label2:
v6 = v6 + 1;
goto label1;
label3:
return v4;
}
private static int[] newSize2idxTab(int, short[][])
{
short[][] v1;
short v8;
int[] v3;
int v0, v10, v11, v12, v13, v2, v4, v5, v6, v9;
short[] v7;
v0 := @parameter0: int;
v1 := @parameter1: short[][];
v2 = v0 >> 4;
v3 = newarray (int)[v2];
v4 = 0;
v5 = 0;
v6 = 0;
label1:
if v5 > v0 goto label4;
v7 = v1[v6];
v8 = v7[2];
v9 = v8 - 4;
v10 = 1 << v9;
label2:
if v5 > v0 goto label3;
v11 = v10;
v10 = v10 - 1;
if v11 <= 0 goto label3;
v12 = v4;
v4 = v4 + 1;
v3[v12] = v6;
v13 = v4 + 1;
v5 = v13 << 4;
goto label2;
label3:
v6 = v6 + 1;
goto label1;
label4:
return v3;
}
public int sizeIdx2size(int)
{
int[] v2;
int v1, v3;
io.netty.buffer.SizeClasses v0;
v0 := @this: io.netty.buffer.SizeClasses;
v1 := @parameter0: int;
v2 = v0.<io.netty.buffer.SizeClasses: int[] sizeIdx2sizeTab>;
v3 = v2[v1];
return v3;
}
public int sizeIdx2sizeCompute(int)
{
io.netty.buffer.SizeClasses v0;
int v1, v10, v11, v2, v3, v4, v5, v6, v7, v8, v9;
v0 := @this: io.netty.buffer.SizeClasses;
v1 := @parameter0: int;
v2 = v1 >> 2;
v3 = v1 & 3;
if v2 != 0 goto label1;
v4 = 0;
goto label2;
label1:
v4 = 32 << v2;
label2:
v5 = v4;
if v2 != 0 goto label3;
v6 = 1;
goto label4;
label3:
v6 = v2;
label4:
v7 = v6 + 4;
v8 = v7 - 1;
v9 = v3 + 1;
v10 = v9 << v8;
v11 = v5 + v10;
return v11;
}
public long pageIdx2size(int)
{
int[] v2;
int v1, v3;
io.netty.buffer.SizeClasses v0;
v0 := @this: io.netty.buffer.SizeClasses;
v1 := @parameter0: int;
v2 = v0.<io.netty.buffer.SizeClasses: int[] pageIdx2sizeTab>;
v3 = v2[v1];
return v3;
}
public long pageIdx2sizeCompute(int)
{
long v16, v4, v8, v9;
int v1, v10, v11, v12, v13, v14, v15, v2, v3, v5, v6, v7;
io.netty.buffer.SizeClasses v0;
v0 := @this: io.netty.buffer.SizeClasses;
v1 := @parameter0: int;
v2 = v1 >> 2;
v3 = v1 & 3;
if v2 != 0 goto label1;
v4 = 0L;
goto label2;
label1:
v5 = v0.<io.netty.buffer.SizeClasses: int pageShifts>;
v6 = v5 + 2;
v7 = v6 - 1;
v8 = 1L << v7;
v4 = v8 << v2;
label2:
v9 = v4;
if v2 != 0 goto label3;
v10 = 1;
goto label4;
label3:
v10 = v2;
label4:
v11 = v0.<io.netty.buffer.SizeClasses: int pageShifts>;
v12 = v10 + v11;
v13 = v12 - 1;
v14 = v3 + 1;
v15 = v14 << v13;
v16 = v9 + v15;
return v16;
}
public int size2SizeIdx(int)
{
int[] v7;
int v1, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v2, v20, v21, v3, v4, v5, v6, v8, v9;
io.netty.buffer.SizeClasses v0;
v0 := @this: io.netty.buffer.SizeClasses;
v1 := @parameter0: int;
if v1 != 0 goto label1;
return 0;
label1:
v2 = v0.<io.netty.buffer.SizeClasses: int chunkSize>;
if v1 <= v2 goto label2;
v3 = v0.<io.netty.buffer.SizeClasses: int nSizes>;
return v3;
label2:
v4 = v0.<io.netty.buffer.SizeClasses: int directMemoryCacheAlignment>;
v5 = staticinvoke <io.netty.buffer.SizeClasses: int alignSizeIfNeeded(int,int)>(v1, v4);
v6 = v0.<io.netty.buffer.SizeClasses: int lookupMaxSize>;
if v5 > v6 goto label3;
v7 = v0.<io.netty.buffer.SizeClasses: int[] size2idxTab>;
v8 = v5 - 1;
v9 = v8 >> 4;
v10 = v7[v9];
return v10;
label3:
v11 = v5 << 1;
v12 = v11 - 1;
v13 = staticinvoke <io.netty.buffer.PoolThreadCache: int log2(int)>(v12);
if v13 >= 7 goto label4;
v14 = 0;
goto label5;
label4:
v14 = v13 - 6;
label5:
v15 = v14 << 2;
if v13 >= 7 goto label6;
v16 = 4;
goto label7;
label6:
v17 = v13 - 2;
v16 = v17 - 1;
label7:
v18 = v5 - 1;
v19 = v18 >> v16;
v20 = v19 & 3;
v21 = v15 + v20;
return v21;
}
public int pages2pageIdx(int)
{
int v1, v2;
io.netty.buffer.SizeClasses v0;
v0 := @this: io.netty.buffer.SizeClasses;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.netty.buffer.SizeClasses: int pages2pageIdxCompute(int,boolean)>(v1, 0);
return v2;
}
public int pages2pageIdxFloor(int)
{
int v1, v2;
io.netty.buffer.SizeClasses v0;
v0 := @this: io.netty.buffer.SizeClasses;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.netty.buffer.SizeClasses: int pages2pageIdxCompute(int,boolean)>(v1, 1);
return v2;
}
private int pages2pageIdxCompute(int, boolean)
{
int[] v25;
int v1, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v26, v27, v28, v3, v4, v5, v6, v7, v8, v9;
boolean v2;
io.netty.buffer.SizeClasses v0;
v0 := @this: io.netty.buffer.SizeClasses;
v1 := @parameter0: int;
v2 := @parameter1: boolean;
v3 = v0.<io.netty.buffer.SizeClasses: int pageShifts>;
v4 = v1 << v3;
v5 = v0.<io.netty.buffer.SizeClasses: int chunkSize>;
if v4 <= v5 goto label1;
v6 = v0.<io.netty.buffer.SizeClasses: int nPSizes>;
return v6;
label1:
v7 = v4 << 1;
v8 = v7 - 1;
v9 = staticinvoke <io.netty.buffer.PoolThreadCache: int log2(int)>(v8);
v10 = v0.<io.netty.buffer.SizeClasses: int pageShifts>;
v11 = 2 + v10;
if v9 >= v11 goto label2;
v12 = 0;
goto label3;
label2:
v13 = v0.<io.netty.buffer.SizeClasses: int pageShifts>;
v14 = 2 + v13;
v12 = v9 - v14;
label3:
v15 = v12 << 2;
v16 = v0.<io.netty.buffer.SizeClasses: int pageShifts>;
v17 = 2 + v16;
v18 = v17 + 1;
if v9 >= v18 goto label4;
v19 = v0.<io.netty.buffer.SizeClasses: int pageShifts>;
goto label5;
label4:
v20 = v9 - 2;
v19 = v20 - 1;
label5:
v21 = v4 - 1;
v22 = v21 >> v19;
v23 = v22 & 3;
v24 = v15 + v23;
if v2 == 0 goto label6;
v25 = v0.<io.netty.buffer.SizeClasses: int[] pageIdx2sizeTab>;
v26 = v25[v24];
v27 = v0.<io.netty.buffer.SizeClasses: int pageShifts>;
v28 = v1 << v27;
if v26 <= v28 goto label6;
v24 = v24 - 1;
label6:
return v24;
}
private static int alignSizeIfNeeded(int, int)
{
int v0, v1, v2, v3, v4, v5;
v0 := @parameter0: int;
v1 := @parameter1: int;
if v1 > 0 goto label1;
return v0;
label1:
v2 = v1 - 1;
v3 = v0 & v2;
if v3 != 0 goto label2;
v4 = v0;
goto label3;
label2:
v5 = v0 + v1;
v4 = v5 - v3;
label3:
return v4;
}
public int normalizeSize(int)
{
java.lang.AssertionError v15;
int[] v2, v7, v8;
int v1, v10, v11, v12, v14, v16, v3, v4, v5, v6, v9;
boolean v13;
io.netty.buffer.SizeClasses v0;
v0 := @this: io.netty.buffer.SizeClasses;
v1 := @parameter0: int;
if v1 != 0 goto label1;
v2 = v0.<io.netty.buffer.SizeClasses: int[] sizeIdx2sizeTab>;
v3 = v2[0];
return v3;
label1:
v4 = v0.<io.netty.buffer.SizeClasses: int directMemoryCacheAlignment>;
v5 = staticinvoke <io.netty.buffer.SizeClasses: int alignSizeIfNeeded(int,int)>(v1, v4);
v6 = v0.<io.netty.buffer.SizeClasses: int lookupMaxSize>;
if v5 > v6 goto label3;
v7 = v0.<io.netty.buffer.SizeClasses: int[] sizeIdx2sizeTab>;
v8 = v0.<io.netty.buffer.SizeClasses: int[] size2idxTab>;
v9 = v5 - 1;
v10 = v9 >> 4;
v11 = v8[v10];
v12 = v7[v11];
v13 = <io.netty.buffer.SizeClasses: boolean $assertionsDisabled>;
if v13 != 0 goto label2;
v14 = staticinvoke <io.netty.buffer.SizeClasses: int normalizeSizeCompute(int)>(v5);
if v12 == v14 goto label2;
v15 = new java.lang.AssertionError;
specialinvoke v15.<java.lang.AssertionError: void <init>()>();
throw v15;
label2:
return v12;
label3:
v16 = staticinvoke <io.netty.buffer.SizeClasses: int normalizeSizeCompute(int)>(v5);
return v16;
}
private static int normalizeSizeCompute(int)
{
int v0, v1, v10, v11, v2, v3, v4, v5, v6, v7, v8, v9;
v0 := @parameter0: int;
v1 = v0 << 1;
v2 = v1 - 1;
v3 = staticinvoke <io.netty.buffer.PoolThreadCache: int log2(int)>(v2);
if v3 >= 7 goto label1;
v4 = 4;
goto label2;
label1:
v5 = v3 - 2;
v4 = v5 - 1;
label2:
v6 = 1 << v4;
v7 = v6 - 1;
v8 = v0 + v7;
v9 = (int) -1;
v10 = v7 ^ v9;
v11 = v8 & v10;
return v11;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/buffer/SizeClasses;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.buffer.SizeClasses: boolean $assertionsDisabled> = v2;
return;
}
}