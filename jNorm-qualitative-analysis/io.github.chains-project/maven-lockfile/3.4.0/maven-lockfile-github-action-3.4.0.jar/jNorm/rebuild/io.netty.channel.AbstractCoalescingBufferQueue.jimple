public abstract class io.netty.channel.AbstractCoalescingBufferQueue extends java.lang.Object
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private final java.util.ArrayDeque bufAndListenerPairs;
private final io.netty.channel.PendingBytesTracker tracker;
private int readableBytes;
static final boolean $assertionsDisabled;
protected void <init>(io.netty.channel.Channel, int)
{
io.netty.channel.Channel v1;
io.netty.channel.PendingBytesTracker v4;
io.netty.channel.AbstractCoalescingBufferQueue v0;
int v2;
java.util.ArrayDeque v3;
v0 := @this: io.netty.channel.AbstractCoalescingBufferQueue;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new java.util.ArrayDeque;
specialinvoke v3.<java.util.ArrayDeque: void <init>(int)>(v2);
v0.<io.netty.channel.AbstractCoalescingBufferQueue: java.util.ArrayDeque bufAndListenerPairs> = v3;
if v1 != null goto label1;
v4 = null;
goto label2;
label1:
v4 = staticinvoke <io.netty.channel.PendingBytesTracker: io.netty.channel.PendingBytesTracker newTracker(io.netty.channel.Channel)>(v1);
label2:
v0.<io.netty.channel.AbstractCoalescingBufferQueue: io.netty.channel.PendingBytesTracker tracker> = v4;
return;
}
public final void addFirst(io.netty.buffer.ByteBuf, io.netty.channel.ChannelPromise)
{
io.netty.buffer.ByteBuf v1;
io.netty.channel.ChannelPromise v2;
io.netty.channel.AbstractCoalescingBufferQueue v0;
io.netty.channel.ChannelFutureListener v3;
v0 := @this: io.netty.channel.AbstractCoalescingBufferQueue;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = staticinvoke <io.netty.channel.AbstractCoalescingBufferQueue: io.netty.channel.ChannelFutureListener toChannelFutureListener(io.netty.channel.ChannelPromise)>(v2);
specialinvoke v0.<io.netty.channel.AbstractCoalescingBufferQueue: void addFirst(io.netty.buffer.ByteBuf,io.netty.channel.ChannelFutureListener)>(v1, v3);
return;
}
private void addFirst(io.netty.buffer.ByteBuf, io.netty.channel.ChannelFutureListener)
{
io.netty.buffer.ByteBuf v1;
io.netty.channel.AbstractCoalescingBufferQueue v0;
io.netty.channel.ChannelFutureListener v2;
int v5;
java.util.ArrayDeque v3, v4;
v0 := @this: io.netty.channel.AbstractCoalescingBufferQueue;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 := @parameter1: io.netty.channel.ChannelFutureListener;
if v2 == null goto label1;
v3 = v0.<io.netty.channel.AbstractCoalescingBufferQueue: java.util.ArrayDeque bufAndListenerPairs>;
virtualinvoke v3.<java.util.ArrayDeque: void addFirst(java.lang.Object)>(v2);
label1:
v4 = v0.<io.netty.channel.AbstractCoalescingBufferQueue: java.util.ArrayDeque bufAndListenerPairs>;
virtualinvoke v4.<java.util.ArrayDeque: void addFirst(java.lang.Object)>(v1);
v5 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
specialinvoke v0.<io.netty.channel.AbstractCoalescingBufferQueue: void incrementReadableBytes(int)>(v5);
return;
}
public final void add(io.netty.buffer.ByteBuf)
{
io.netty.buffer.ByteBuf v1;
io.netty.channel.AbstractCoalescingBufferQueue v0;
io.netty.channel.ChannelFutureListener v2;
v0 := @this: io.netty.channel.AbstractCoalescingBufferQueue;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 = null;
virtualinvoke v0.<io.netty.channel.AbstractCoalescingBufferQueue: void add(io.netty.buffer.ByteBuf,io.netty.channel.ChannelFutureListener)>(v1, v2);
return;
}
public final void add(io.netty.buffer.ByteBuf, io.netty.channel.ChannelPromise)
{
io.netty.buffer.ByteBuf v1;
io.netty.channel.ChannelPromise v2;
io.netty.channel.AbstractCoalescingBufferQueue v0;
io.netty.channel.ChannelFutureListener v3;
v0 := @this: io.netty.channel.AbstractCoalescingBufferQueue;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = staticinvoke <io.netty.channel.AbstractCoalescingBufferQueue: io.netty.channel.ChannelFutureListener toChannelFutureListener(io.netty.channel.ChannelPromise)>(v2);
virtualinvoke v0.<io.netty.channel.AbstractCoalescingBufferQueue: void add(io.netty.buffer.ByteBuf,io.netty.channel.ChannelFutureListener)>(v1, v3);
return;
}
public final void add(io.netty.buffer.ByteBuf, io.netty.channel.ChannelFutureListener)
{
io.netty.buffer.ByteBuf v1;
io.netty.channel.AbstractCoalescingBufferQueue v0;
io.netty.channel.ChannelFutureListener v2;
int v5;
java.util.ArrayDeque v3, v4;
v0 := @this: io.netty.channel.AbstractCoalescingBufferQueue;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 := @parameter1: io.netty.channel.ChannelFutureListener;
v3 = v0.<io.netty.channel.AbstractCoalescingBufferQueue: java.util.ArrayDeque bufAndListenerPairs>;
virtualinvoke v3.<java.util.ArrayDeque: boolean add(java.lang.Object)>(v1);
if v2 == null goto label1;
v4 = v0.<io.netty.channel.AbstractCoalescingBufferQueue: java.util.ArrayDeque bufAndListenerPairs>;
virtualinvoke v4.<java.util.ArrayDeque: boolean add(java.lang.Object)>(v2);
label1:
v5 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
specialinvoke v0.<io.netty.channel.AbstractCoalescingBufferQueue: void incrementReadableBytes(int)>(v5);
return;
}
public final io.netty.buffer.ByteBuf removeFirst(io.netty.channel.ChannelPromise)
{
java.lang.AssertionError v6;
io.netty.channel.ChannelPromise v1;
io.netty.channel.AbstractCoalescingBufferQueue v0;
int v7;
java.lang.Object v3, v9;
java.util.ArrayDeque v11, v2, v8;
boolean v10, v4, v5;
v0 := @this: io.netty.channel.AbstractCoalescingBufferQueue;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 = v0.<io.netty.channel.AbstractCoalescingBufferQueue: java.util.ArrayDeque bufAndListenerPairs>;
v3 = virtualinvoke v2.<java.util.ArrayDeque: java.lang.Object poll()>();
if v3 != null goto label1;
return null;
label1:
v4 = <io.netty.channel.AbstractCoalescingBufferQueue: boolean $assertionsDisabled>;
if v4 != 0 goto label2;
v5 = v3 instanceof io.netty.buffer.ByteBuf;
if v5 != 0 goto label2;
v6 = new java.lang.AssertionError;
specialinvoke v6.<java.lang.AssertionError: void <init>()>();
throw v6;
label2:
v7 = virtualinvoke v3.<io.netty.buffer.ByteBuf: int readableBytes()>();
specialinvoke v0.<io.netty.channel.AbstractCoalescingBufferQueue: void decrementReadableBytes(int)>(v7);
v8 = v0.<io.netty.channel.AbstractCoalescingBufferQueue: java.util.ArrayDeque bufAndListenerPairs>;
v9 = virtualinvoke v8.<java.util.ArrayDeque: java.lang.Object peek()>();
v10 = v9 instanceof io.netty.channel.ChannelFutureListener;
if v10 == 0 goto label3;
interfaceinvoke v1.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise addListener(io.netty.util.concurrent.GenericFutureListener)>(v9);
v11 = v0.<io.netty.channel.AbstractCoalescingBufferQueue: java.util.ArrayDeque bufAndListenerPairs>;
virtualinvoke v11.<java.util.ArrayDeque: java.lang.Object poll()>();
label3:
return v3;
}
public final io.netty.buffer.ByteBuf remove(io.netty.buffer.ByteBufAllocator, int, io.netty.channel.ChannelPromise)
{
java.lang.Throwable v22;
io.netty.buffer.ByteBufAllocator v1;
java.lang.AssertionError v8;
io.netty.buffer.ByteBuf v12, v19, v21, v9;
io.netty.channel.ChannelPromise v3;
io.netty.channel.AbstractCoalescingBufferQueue v0;
int v10, v11, v13, v17, v2, v20, v23, v7;
boolean v16, v5, v6;
java.lang.Object v15;
java.util.ArrayDeque v14, v18, v4;
v0 := @this: io.netty.channel.AbstractCoalescingBufferQueue;
v1 := @parameter0: io.netty.buffer.ByteBufAllocator;
v2 := @parameter1: int;
v3 := @parameter2: io.netty.channel.ChannelPromise;
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositiveOrZero(int,java.lang.String)>(v2, "bytes");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v3, "aggregatePromise");
v4 = v0.<io.netty.channel.AbstractCoalescingBufferQueue: java.util.ArrayDeque bufAndListenerPairs>;
v5 = virtualinvoke v4.<java.util.ArrayDeque: boolean isEmpty()>();
if v5 == 0 goto label02;
v6 = <io.netty.channel.AbstractCoalescingBufferQueue: boolean $assertionsDisabled>;
if v6 != 0 goto label01;
v7 = v0.<io.netty.channel.AbstractCoalescingBufferQueue: int readableBytes>;
if v7 == 0 goto label01;
v8 = new java.lang.AssertionError;
specialinvoke v8.<java.lang.AssertionError: void <init>()>();
throw v8;
label01:
v9 = virtualinvoke v0.<io.netty.channel.AbstractCoalescingBufferQueue: io.netty.buffer.ByteBuf removeEmptyValue()>();
return v9;
label02:
v10 = v0.<io.netty.channel.AbstractCoalescingBufferQueue: int readableBytes>;
v11 = staticinvoke <java.lang.Math: int min(int,int)>(v2, v10);
v12 = null;
v13 = v11;
label03:
v14 = v0.<io.netty.channel.AbstractCoalescingBufferQueue: java.util.ArrayDeque bufAndListenerPairs>;
v15 = virtualinvoke v14.<java.util.ArrayDeque: java.lang.Object poll()>();
if v15 == null goto label11;
v16 = v15 instanceof io.netty.channel.ChannelFutureListener;
if v16 == 0 goto label04;
interfaceinvoke v3.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise addListener(io.netty.util.concurrent.GenericFutureListener)>(v15);
goto label03;
label04:
v17 = virtualinvoke v15.<io.netty.buffer.ByteBuf: int readableBytes()>();
if v17 <= v11 goto label07;
v18 = v0.<io.netty.channel.AbstractCoalescingBufferQueue: java.util.ArrayDeque bufAndListenerPairs>;
virtualinvoke v18.<java.util.ArrayDeque: void addFirst(java.lang.Object)>(v15);
if v11 <= 0 goto label11;
v15 = virtualinvoke v15.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readRetainedSlice(int)>(v11);
if v12 != null goto label05;
v19 = virtualinvoke v0.<io.netty.channel.AbstractCoalescingBufferQueue: io.netty.buffer.ByteBuf composeFirst(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf)>(v1, v15);
goto label06;
label05:
v19 = virtualinvoke v0.<io.netty.channel.AbstractCoalescingBufferQueue: io.netty.buffer.ByteBuf compose(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)>(v1, v12, v15);
label06:
v12 = v19;
v11 = 0;
goto label11;
label07:
v20 = virtualinvoke v15.<io.netty.buffer.ByteBuf: int readableBytes()>();
v11 = v11 - v20;
if v12 != null goto label08;
v21 = virtualinvoke v0.<io.netty.channel.AbstractCoalescingBufferQueue: io.netty.buffer.ByteBuf composeFirst(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf)>(v1, v15);
goto label09;
label08:
v21 = virtualinvoke v0.<io.netty.channel.AbstractCoalescingBufferQueue: io.netty.buffer.ByteBuf compose(io.netty.buffer.ByteBufAllocator,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)>(v1, v12, v15);
label09:
v12 = v21;
v15 = null;
goto label03;
label10:
v22 := @caughtexception;
staticinvoke <io.netty.util.ReferenceCountUtil: void safeRelease(java.lang.Object)>(v15);
staticinvoke <io.netty.util.ReferenceCountUtil: void safeRelease(java.lang.Object)>(v12);
interfaceinvoke v3.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v22);
staticinvoke <io.netty.util.internal.PlatformDependent: void throwException(java.lang.Throwable)>(v22);
label11:
v23 = v13 - v11;
specialinvoke v0.<io.netty.channel.AbstractCoalescingBufferQueue: void decrementReadableBytes(int)>(v23);
return v12;
catch java.lang.Throwable from label03 to label10 with label10;
}
public final int readableBytes()
{
int v1;
io.netty.channel.AbstractCoalescingBufferQueue v0;
v0 := @this: io.netty.channel.AbstractCoalescingBufferQueue;
v1 = v0.<io.netty.channel.AbstractCoalescingBufferQueue: int readableBytes>;
return v1;
}
public final boolean isEmpty()
{
java.util.ArrayDeque v1;
io.netty.channel.AbstractCoalescingBufferQueue v0;
boolean v2;
v0 := @this: io.netty.channel.AbstractCoalescingBufferQueue;
v1 = v0.<io.netty.channel.AbstractCoalescingBufferQueue: java.util.ArrayDeque bufAndListenerPairs>;
v2 = virtualinvoke v1.<java.util.ArrayDeque: boolean isEmpty()>();
return v2;
}
public final void releaseAndFailAll(io.netty.channel.ChannelOutboundInvoker, java.lang.Throwable)
{
java.lang.Throwable v2;
io.netty.channel.AbstractCoalescingBufferQueue v0;
io.netty.channel.ChannelOutboundInvoker v1;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.channel.AbstractCoalescingBufferQueue;
v1 := @parameter0: io.netty.channel.ChannelOutboundInvoker;
v2 := @parameter1: java.lang.Throwable;
v3 = interfaceinvoke v1.<io.netty.channel.ChannelOutboundInvoker: io.netty.channel.ChannelFuture newFailedFuture(java.lang.Throwable)>(v2);
specialinvoke v0.<io.netty.channel.AbstractCoalescingBufferQueue: void releaseAndCompleteAll(io.netty.channel.ChannelFuture)>(v3);
return;
}
public final void copyTo(io.netty.channel.AbstractCoalescingBufferQueue)
{
io.netty.channel.AbstractCoalescingBufferQueue v0, v1;
int v4;
java.util.ArrayDeque v2, v3;
v0 := @this: io.netty.channel.AbstractCoalescingBufferQueue;
v1 := @parameter0: io.netty.channel.AbstractCoalescingBufferQueue;
v2 = v1.<io.netty.channel.AbstractCoalescingBufferQueue: java.util.ArrayDeque bufAndListenerPairs>;
v3 = v0.<io.netty.channel.AbstractCoalescingBufferQueue: java.util.ArrayDeque bufAndListenerPairs>;
virtualinvoke v2.<java.util.ArrayDeque: boolean addAll(java.util.Collection)>(v3);
v4 = v0.<io.netty.channel.AbstractCoalescingBufferQueue: int readableBytes>;
specialinvoke v1.<io.netty.channel.AbstractCoalescingBufferQueue: void incrementReadableBytes(int)>(v4);
return;
}
public final void writeAndRemoveAll(io.netty.channel.ChannelHandlerContext)
{
java.lang.Throwable v10, v2;
java.lang.IllegalStateException v12;
io.netty.channel.ChannelFuture v9;
io.netty.channel.ChannelHandlerContext v1;
io.netty.buffer.ByteBuf v13;
io.netty.channel.AbstractCoalescingBufferQueue v0;
io.netty.util.internal.logging.InternalLogger v11;
int v7, v8;
java.lang.Object v4;
java.util.ArrayDeque v3;
boolean v5, v6;
v0 := @this: io.netty.channel.AbstractCoalescingBufferQueue;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = null;
label1:
v3 = v0.<io.netty.channel.AbstractCoalescingBufferQueue: java.util.ArrayDeque bufAndListenerPairs>;
v4 = virtualinvoke v3.<java.util.ArrayDeque: java.lang.Object poll()>();
label2:
if v4 == null goto label8;
label3:
v5 = v4 instanceof io.netty.buffer.ByteBuf;
if v5 != 0 goto label1;
v6 = v4 instanceof io.netty.channel.ChannelPromise;
if v6 == 0 goto label4;
v7 = virtualinvoke v4.<io.netty.buffer.ByteBuf: int readableBytes()>();
specialinvoke v0.<io.netty.channel.AbstractCoalescingBufferQueue: void decrementReadableBytes(int)>(v7);
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)>(v4, v4);
goto label1;
label4:
v8 = virtualinvoke v4.<io.netty.buffer.ByteBuf: int readableBytes()>();
specialinvoke v0.<io.netty.channel.AbstractCoalescingBufferQueue: void decrementReadableBytes(int)>(v8);
v9 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object)>(v4);
interfaceinvoke v9.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v4);
label5:
goto label1;
label6:
v10 := @caughtexception;
if v2 != null goto label7;
v2 = v10;
goto label1;
label7:
v11 = <io.netty.channel.AbstractCoalescingBufferQueue: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v11.<io.netty.util.internal.logging.InternalLogger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Throwable being suppressed because Throwable {} is already pending", v2, v10);
goto label1;
label8:
if v2 == null goto label9;
v12 = new java.lang.IllegalStateException;
specialinvoke v12.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(v2);
throw v12;
label9:
return;
catch java.lang.Throwable from label2 to label3 with label6;
catch java.lang.Throwable from label3 to label5 with label6;
}
public java.lang.String toString()
{
io.netty.channel.AbstractCoalescingBufferQueue v0;
int v1, v2, v3;
java.lang.String v4;
v0 := @this: io.netty.channel.AbstractCoalescingBufferQueue;
v1 = v0.<io.netty.channel.AbstractCoalescingBufferQueue: int readableBytes>;
v2 = virtualinvoke v0.<io.netty.channel.AbstractCoalescingBufferQueue: int size()>();
v3 = v2 >> 1;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v1, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("bytes: \u0001 buffers: \u0001");
return v4;
}
protected abstract io.netty.buffer.ByteBuf compose(io.netty.buffer.ByteBufAllocator, io.netty.buffer.ByteBuf, io.netty.buffer.ByteBuf);
protected final io.netty.buffer.ByteBuf composeIntoComposite(io.netty.buffer.ByteBufAllocator, io.netty.buffer.ByteBuf, io.netty.buffer.ByteBuf)
{
java.lang.Throwable v7;
io.netty.buffer.ByteBufAllocator v1;
io.netty.buffer.CompositeByteBuf v6;
io.netty.buffer.ByteBuf v2, v3;
io.netty.channel.AbstractCoalescingBufferQueue v0;
int v4, v5;
v0 := @this: io.netty.channel.AbstractCoalescingBufferQueue;
v1 := @parameter0: io.netty.buffer.ByteBufAllocator;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 := @parameter2: io.netty.buffer.ByteBuf;
v4 = virtualinvoke v0.<io.netty.channel.AbstractCoalescingBufferQueue: int size()>();
v5 = v4 + 2;
v6 = interfaceinvoke v1.<io.netty.buffer.ByteBufAllocator: io.netty.buffer.CompositeByteBuf compositeBuffer(int)>(v5);
label1:
virtualinvoke v6.<io.netty.buffer.CompositeByteBuf: io.netty.buffer.CompositeByteBuf addComponent(boolean,io.netty.buffer.ByteBuf)>(1, v2);
virtualinvoke v6.<io.netty.buffer.CompositeByteBuf: io.netty.buffer.CompositeByteBuf addComponent(boolean,io.netty.buffer.ByteBuf)>(1, v3);
label2:
goto label4;
label3:
v7 := @caughtexception;
virtualinvoke v6.<io.netty.buffer.CompositeByteBuf: boolean release()>();
staticinvoke <io.netty.util.ReferenceCountUtil: void safeRelease(java.lang.Object)>(v3);
staticinvoke <io.netty.util.internal.PlatformDependent: void throwException(java.lang.Throwable)>(v7);
label4:
return v6;
catch java.lang.Throwable from label1 to label2 with label3;
}
protected final io.netty.buffer.ByteBuf copyAndCompose(io.netty.buffer.ByteBufAllocator, io.netty.buffer.ByteBuf, io.netty.buffer.ByteBuf)
{
java.lang.Throwable v9;
io.netty.buffer.ByteBufAllocator v1;
io.netty.buffer.ByteBuf v2, v3, v7, v8;
io.netty.channel.AbstractCoalescingBufferQueue v0;
int v4, v5, v6;
v0 := @this: io.netty.channel.AbstractCoalescingBufferQueue;
v1 := @parameter0: io.netty.buffer.ByteBufAllocator;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 := @parameter2: io.netty.buffer.ByteBuf;
v4 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readableBytes()>();
v5 = virtualinvoke v3.<io.netty.buffer.ByteBuf: int readableBytes()>();
v6 = v4 + v5;
v7 = interfaceinvoke v1.<io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf ioBuffer(int)>(v6);
label1:
v8 = virtualinvoke v7.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf)>(v2);
virtualinvoke v8.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf)>(v3);
label2:
goto label4;
label3:
v9 := @caughtexception;
virtualinvoke v7.<io.netty.buffer.ByteBuf: boolean release()>();
staticinvoke <io.netty.util.ReferenceCountUtil: void safeRelease(java.lang.Object)>(v3);
staticinvoke <io.netty.util.internal.PlatformDependent: void throwException(java.lang.Throwable)>(v9);
label4:
virtualinvoke v2.<io.netty.buffer.ByteBuf: boolean release()>();
virtualinvoke v3.<io.netty.buffer.ByteBuf: boolean release()>();
return v7;
catch java.lang.Throwable from label1 to label2 with label3;
}
protected io.netty.buffer.ByteBuf composeFirst(io.netty.buffer.ByteBufAllocator, io.netty.buffer.ByteBuf)
{
io.netty.buffer.ByteBuf v2;
io.netty.buffer.ByteBufAllocator v1;
io.netty.channel.AbstractCoalescingBufferQueue v0;
v0 := @this: io.netty.channel.AbstractCoalescingBufferQueue;
v1 := @parameter0: io.netty.buffer.ByteBufAllocator;
v2 := @parameter1: io.netty.buffer.ByteBuf;
return v2;
}
protected abstract io.netty.buffer.ByteBuf removeEmptyValue();
protected final int size()
{
int v2;
java.util.ArrayDeque v1;
io.netty.channel.AbstractCoalescingBufferQueue v0;
v0 := @this: io.netty.channel.AbstractCoalescingBufferQueue;
v1 = v0.<io.netty.channel.AbstractCoalescingBufferQueue: java.util.ArrayDeque bufAndListenerPairs>;
v2 = virtualinvoke v1.<java.util.ArrayDeque: int size()>();
return v2;
}
private void releaseAndCompleteAll(io.netty.channel.ChannelFuture)
{
java.lang.Throwable v2, v7;
java.lang.IllegalStateException v9;
io.netty.channel.ChannelFuture v1;
io.netty.channel.AbstractCoalescingBufferQueue v0;
io.netty.util.internal.logging.InternalLogger v8;
int v6;
java.lang.Object v4;
java.util.ArrayDeque v3;
boolean v5;
v0 := @this: io.netty.channel.AbstractCoalescingBufferQueue;
v1 := @parameter0: io.netty.channel.ChannelFuture;
v2 = null;
label1:
v3 = v0.<io.netty.channel.AbstractCoalescingBufferQueue: java.util.ArrayDeque bufAndListenerPairs>;
v4 = virtualinvoke v3.<java.util.ArrayDeque: java.lang.Object poll()>();
if v4 == null goto label7;
label2:
v5 = v4 instanceof io.netty.buffer.ByteBuf;
if v5 == 0 goto label3;
v6 = virtualinvoke v4.<io.netty.buffer.ByteBuf: int readableBytes()>();
specialinvoke v0.<io.netty.channel.AbstractCoalescingBufferQueue: void decrementReadableBytes(int)>(v6);
staticinvoke <io.netty.util.ReferenceCountUtil: void safeRelease(java.lang.Object)>(v4);
goto label1;
label3:
interfaceinvoke v4.<io.netty.channel.ChannelFutureListener: void operationComplete(io.netty.util.concurrent.Future)>(v1);
label4:
goto label1;
label5:
v7 := @caughtexception;
if v2 != null goto label6;
v2 = v7;
goto label1;
label6:
v8 = <io.netty.channel.AbstractCoalescingBufferQueue: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v8.<io.netty.util.internal.logging.InternalLogger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Throwable being suppressed because Throwable {} is already pending", v2, v7);
goto label1;
label7:
if v2 == null goto label8;
v9 = new java.lang.IllegalStateException;
specialinvoke v9.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(v2);
throw v9;
label8:
return;
catch java.lang.Throwable from label2 to label4 with label5;
}
private void incrementReadableBytes(int)
{
io.netty.channel.PendingBytesTracker v8, v9;
java.lang.IllegalStateException v5;
io.netty.channel.AbstractCoalescingBufferQueue v0;
int v1, v2, v3, v4, v6;
java.lang.String v7;
v0 := @this: io.netty.channel.AbstractCoalescingBufferQueue;
v1 := @parameter0: int;
v2 = v0.<io.netty.channel.AbstractCoalescingBufferQueue: int readableBytes>;
v3 = v2 + v1;
v4 = v0.<io.netty.channel.AbstractCoalescingBufferQueue: int readableBytes>;
if v3 >= v4 goto label1;
v5 = new java.lang.IllegalStateException;
v6 = v0.<io.netty.channel.AbstractCoalescingBufferQueue: int readableBytes>;
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v6, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("buffer queue length overflow: \u0001 + \u0001");
specialinvoke v5.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v7);
throw v5;
label1:
v0.<io.netty.channel.AbstractCoalescingBufferQueue: int readableBytes> = v3;
v8 = v0.<io.netty.channel.AbstractCoalescingBufferQueue: io.netty.channel.PendingBytesTracker tracker>;
if v8 == null goto label2;
v9 = v0.<io.netty.channel.AbstractCoalescingBufferQueue: io.netty.channel.PendingBytesTracker tracker>;
virtualinvoke v9.<io.netty.channel.PendingBytesTracker: void incrementPendingOutboundBytes(long)>(v1);
label2:
return;
}
private void decrementReadableBytes(int)
{
io.netty.channel.PendingBytesTracker v7, v8;
java.lang.AssertionError v6;
io.netty.channel.AbstractCoalescingBufferQueue v0;
int v1, v2, v3, v5;
boolean v4;
v0 := @this: io.netty.channel.AbstractCoalescingBufferQueue;
v1 := @parameter0: int;
v2 = v0.<io.netty.channel.AbstractCoalescingBufferQueue: int readableBytes>;
v3 = v2 - v1;
v0.<io.netty.channel.AbstractCoalescingBufferQueue: int readableBytes> = v3;
v4 = <io.netty.channel.AbstractCoalescingBufferQueue: boolean $assertionsDisabled>;
if v4 != 0 goto label1;
v5 = v0.<io.netty.channel.AbstractCoalescingBufferQueue: int readableBytes>;
if v5 >= 0 goto label1;
v6 = new java.lang.AssertionError;
specialinvoke v6.<java.lang.AssertionError: void <init>()>();
throw v6;
label1:
v7 = v0.<io.netty.channel.AbstractCoalescingBufferQueue: io.netty.channel.PendingBytesTracker tracker>;
if v7 == null goto label2;
v8 = v0.<io.netty.channel.AbstractCoalescingBufferQueue: io.netty.channel.PendingBytesTracker tracker>;
virtualinvoke v8.<io.netty.channel.PendingBytesTracker: void decrementPendingOutboundBytes(long)>(v1);
label2:
return;
}
private static io.netty.channel.ChannelFutureListener toChannelFutureListener(io.netty.channel.ChannelPromise)
{
io.netty.channel.DelegatingChannelPromiseNotifier v2;
io.netty.channel.ChannelPromise v0;
boolean v1;
v0 := @parameter0: io.netty.channel.ChannelPromise;
v1 = interfaceinvoke v0.<io.netty.channel.ChannelPromise: boolean isVoid()>();
if v1 == 0 goto label1;
v2 = null;
goto label2;
label1:
v2 = new io.netty.channel.DelegatingChannelPromiseNotifier;
specialinvoke v2.<io.netty.channel.DelegatingChannelPromiseNotifier: void <init>(io.netty.channel.ChannelPromise)>(v0);
label2:
return v2;
}
static void <clinit>()
{
io.netty.util.internal.logging.InternalLogger v3;
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/channel/AbstractCoalescingBufferQueue;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.channel.AbstractCoalescingBufferQueue: boolean $assertionsDisabled> = v2;
v3 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/channel/AbstractCoalescingBufferQueue;");
<io.netty.channel.AbstractCoalescingBufferQueue: io.netty.util.internal.logging.InternalLogger logger> = v3;
return;
}
}