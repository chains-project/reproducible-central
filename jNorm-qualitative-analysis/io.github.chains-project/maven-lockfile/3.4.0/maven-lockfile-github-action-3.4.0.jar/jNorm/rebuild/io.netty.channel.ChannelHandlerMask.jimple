final class io.netty.channel.ChannelHandlerMask extends java.lang.Object
{
private static final io.netty.util.internal.logging.InternalLogger logger;
static final int MASK_EXCEPTION_CAUGHT;
static final int MASK_CHANNEL_REGISTERED;
static final int MASK_CHANNEL_UNREGISTERED;
static final int MASK_CHANNEL_ACTIVE;
static final int MASK_CHANNEL_INACTIVE;
static final int MASK_CHANNEL_READ;
static final int MASK_CHANNEL_READ_COMPLETE;
static final int MASK_USER_EVENT_TRIGGERED;
static final int MASK_CHANNEL_WRITABILITY_CHANGED;
static final int MASK_BIND;
static final int MASK_CONNECT;
static final int MASK_DISCONNECT;
static final int MASK_CLOSE;
static final int MASK_DEREGISTER;
static final int MASK_READ;
static final int MASK_WRITE;
static final int MASK_FLUSH;
static final int MASK_ONLY_INBOUND;
private static final int MASK_ALL_INBOUND;
static final int MASK_ONLY_OUTBOUND;
private static final int MASK_ALL_OUTBOUND;
private static final io.netty.util.concurrent.FastThreadLocal MASKS;
static int mask(java.lang.Class)
{
io.netty.util.concurrent.FastThreadLocal v1;
int v4, v5;
java.lang.Class v0;
java.lang.Object v2, v3;
v0 := @parameter0: java.lang.Class;
v1 = <io.netty.channel.ChannelHandlerMask: io.netty.util.concurrent.FastThreadLocal MASKS>;
v2 = virtualinvoke v1.<io.netty.util.concurrent.FastThreadLocal: java.lang.Object get()>();
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v0);
if v3 != null goto label1;
v4 = staticinvoke <io.netty.channel.ChannelHandlerMask: int mask0(java.lang.Class)>(v0);
v3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v4);
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v0, v3);
label1:
v5 = virtualinvoke v3.<java.lang.Integer: int intValue()>();
return v5;
}
private static int mask0(java.lang.Class)
{
boolean v11, v14, v17, v20, v23, v26, v29, v3, v31, v34, v37, v40, v43, v46, v49, v5, v51, v53, v8;
java.lang.Exception v55;
int v1, v12, v15, v18, v21, v24, v27, v32, v35, v38, v41, v44, v47, v54, v6, v9;
java.lang.Class[] v10, v13, v16, v19, v22, v25, v30, v33, v36, v39, v4, v42, v45, v48, v50, v52, v7;
java.lang.Class v0, v2, v28;
v0 := @parameter0: java.lang.Class;
v1 = 1;
label01:
v2 = class "Lio/netty/channel/ChannelInboundHandler;";
v3 = virtualinvoke v2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v0);
if v3 == 0 goto label09;
v1 = 511;
v4 = newarray (java.lang.Class)[1];
v4[0] = class "Lio/netty/channel/ChannelHandlerContext;";
v5 = staticinvoke <io.netty.channel.ChannelHandlerMask: boolean isSkippable(java.lang.Class,java.lang.String,java.lang.Class[])>(v0, "channelRegistered", v4);
if v5 == 0 goto label02;
v6 = (int) -3;
v1 = 511 & v6;
label02:
v7 = newarray (java.lang.Class)[1];
v7[0] = class "Lio/netty/channel/ChannelHandlerContext;";
v8 = staticinvoke <io.netty.channel.ChannelHandlerMask: boolean isSkippable(java.lang.Class,java.lang.String,java.lang.Class[])>(v0, "channelUnregistered", v7);
if v8 == 0 goto label03;
v9 = (int) -5;
v1 = v1 & v9;
label03:
v10 = newarray (java.lang.Class)[1];
v10[0] = class "Lio/netty/channel/ChannelHandlerContext;";
v11 = staticinvoke <io.netty.channel.ChannelHandlerMask: boolean isSkippable(java.lang.Class,java.lang.String,java.lang.Class[])>(v0, "channelActive", v10);
if v11 == 0 goto label04;
v12 = (int) -9;
v1 = v1 & v12;
label04:
v13 = newarray (java.lang.Class)[1];
v13[0] = class "Lio/netty/channel/ChannelHandlerContext;";
v14 = staticinvoke <io.netty.channel.ChannelHandlerMask: boolean isSkippable(java.lang.Class,java.lang.String,java.lang.Class[])>(v0, "channelInactive", v13);
if v14 == 0 goto label05;
v15 = (int) -17;
v1 = v1 & v15;
label05:
v16 = newarray (java.lang.Class)[2];
v16[0] = class "Lio/netty/channel/ChannelHandlerContext;";
v16[1] = class "Ljava/lang/Object;";
v17 = staticinvoke <io.netty.channel.ChannelHandlerMask: boolean isSkippable(java.lang.Class,java.lang.String,java.lang.Class[])>(v0, "channelRead", v16);
if v17 == 0 goto label06;
v18 = (int) -33;
v1 = v1 & v18;
label06:
v19 = newarray (java.lang.Class)[1];
v19[0] = class "Lio/netty/channel/ChannelHandlerContext;";
v20 = staticinvoke <io.netty.channel.ChannelHandlerMask: boolean isSkippable(java.lang.Class,java.lang.String,java.lang.Class[])>(v0, "channelReadComplete", v19);
if v20 == 0 goto label07;
v21 = (int) -65;
v1 = v1 & v21;
label07:
v22 = newarray (java.lang.Class)[1];
v22[0] = class "Lio/netty/channel/ChannelHandlerContext;";
v23 = staticinvoke <io.netty.channel.ChannelHandlerMask: boolean isSkippable(java.lang.Class,java.lang.String,java.lang.Class[])>(v0, "channelWritabilityChanged", v22);
if v23 == 0 goto label08;
v24 = (int) -257;
v1 = v1 & v24;
label08:
v25 = newarray (java.lang.Class)[2];
v25[0] = class "Lio/netty/channel/ChannelHandlerContext;";
v25[1] = class "Ljava/lang/Object;";
v26 = staticinvoke <io.netty.channel.ChannelHandlerMask: boolean isSkippable(java.lang.Class,java.lang.String,java.lang.Class[])>(v0, "userEventTriggered", v25);
if v26 == 0 goto label09;
v27 = (int) -129;
v1 = v1 & v27;
label09:
v28 = class "Lio/netty/channel/ChannelOutboundHandler;";
v29 = virtualinvoke v28.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v0);
if v29 == 0 goto label17;
v1 = v1 | 130561;
v30 = newarray (java.lang.Class)[3];
v30[0] = class "Lio/netty/channel/ChannelHandlerContext;";
v30[1] = class "Ljava/net/SocketAddress;";
v30[2] = class "Lio/netty/channel/ChannelPromise;";
v31 = staticinvoke <io.netty.channel.ChannelHandlerMask: boolean isSkippable(java.lang.Class,java.lang.String,java.lang.Class[])>(v0, "bind", v30);
if v31 == 0 goto label10;
v32 = (int) -513;
v1 = v1 & v32;
label10:
v33 = newarray (java.lang.Class)[4];
v33[0] = class "Lio/netty/channel/ChannelHandlerContext;";
v33[1] = class "Ljava/net/SocketAddress;";
v33[2] = class "Ljava/net/SocketAddress;";
v33[3] = class "Lio/netty/channel/ChannelPromise;";
v34 = staticinvoke <io.netty.channel.ChannelHandlerMask: boolean isSkippable(java.lang.Class,java.lang.String,java.lang.Class[])>(v0, "connect", v33);
if v34 == 0 goto label11;
v35 = (int) -1025;
v1 = v1 & v35;
label11:
v36 = newarray (java.lang.Class)[2];
v36[0] = class "Lio/netty/channel/ChannelHandlerContext;";
v36[1] = class "Lio/netty/channel/ChannelPromise;";
v37 = staticinvoke <io.netty.channel.ChannelHandlerMask: boolean isSkippable(java.lang.Class,java.lang.String,java.lang.Class[])>(v0, "disconnect", v36);
if v37 == 0 goto label12;
v38 = (int) -2049;
v1 = v1 & v38;
label12:
v39 = newarray (java.lang.Class)[2];
v39[0] = class "Lio/netty/channel/ChannelHandlerContext;";
v39[1] = class "Lio/netty/channel/ChannelPromise;";
v40 = staticinvoke <io.netty.channel.ChannelHandlerMask: boolean isSkippable(java.lang.Class,java.lang.String,java.lang.Class[])>(v0, "close", v39);
if v40 == 0 goto label13;
v41 = (int) -4097;
v1 = v1 & v41;
label13:
v42 = newarray (java.lang.Class)[2];
v42[0] = class "Lio/netty/channel/ChannelHandlerContext;";
v42[1] = class "Lio/netty/channel/ChannelPromise;";
v43 = staticinvoke <io.netty.channel.ChannelHandlerMask: boolean isSkippable(java.lang.Class,java.lang.String,java.lang.Class[])>(v0, "deregister", v42);
if v43 == 0 goto label14;
v44 = (int) -8193;
v1 = v1 & v44;
label14:
v45 = newarray (java.lang.Class)[1];
v45[0] = class "Lio/netty/channel/ChannelHandlerContext;";
v46 = staticinvoke <io.netty.channel.ChannelHandlerMask: boolean isSkippable(java.lang.Class,java.lang.String,java.lang.Class[])>(v0, "read", v45);
if v46 == 0 goto label15;
v47 = (int) -16385;
v1 = v1 & v47;
label15:
v48 = newarray (java.lang.Class)[3];
v48[0] = class "Lio/netty/channel/ChannelHandlerContext;";
v48[1] = class "Ljava/lang/Object;";
v48[2] = class "Lio/netty/channel/ChannelPromise;";
v49 = staticinvoke <io.netty.channel.ChannelHandlerMask: boolean isSkippable(java.lang.Class,java.lang.String,java.lang.Class[])>(v0, "write", v48);
if v49 == 0 goto label16;
v1 = v1 & -32769;
label16:
v50 = newarray (java.lang.Class)[1];
v50[0] = class "Lio/netty/channel/ChannelHandlerContext;";
v51 = staticinvoke <io.netty.channel.ChannelHandlerMask: boolean isSkippable(java.lang.Class,java.lang.String,java.lang.Class[])>(v0, "flush", v50);
if v51 == 0 goto label17;
v1 = v1 & -65537;
label17:
v52 = newarray (java.lang.Class)[2];
v52[0] = class "Lio/netty/channel/ChannelHandlerContext;";
v52[1] = class "Ljava/lang/Throwable;";
v53 = staticinvoke <io.netty.channel.ChannelHandlerMask: boolean isSkippable(java.lang.Class,java.lang.String,java.lang.Class[])>(v0, "exceptionCaught", v52);
if v53 == 0 goto label20;
v54 = (int) -2;
v1 = v1 & v54;
label18:
goto label20;
label19:
v55 := @caughtexception;
staticinvoke <io.netty.util.internal.PlatformDependent: void throwException(java.lang.Throwable)>(v55);
label20:
return v1;
catch java.lang.Exception from label01 to label18 with label19;
}
private static transient boolean isSkippable(java.lang.Class, java.lang.String, java.lang.Class[]) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerMask$2 v3;
java.lang.Class[] v2;
java.lang.Class v0;
java.lang.Object v4;
java.lang.String v1;
boolean v5;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.Class[];
v3 = new io.netty.channel.ChannelHandlerMask$2;
specialinvoke v3.<io.netty.channel.ChannelHandlerMask$2: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>(v0, v1, v2);
v4 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>(v3);
v5 = virtualinvoke v4.<java.lang.Boolean: boolean booleanValue()>();
return v5;
}
private void <init>()
{
io.netty.channel.ChannelHandlerMask v0;
v0 := @this: io.netty.channel.ChannelHandlerMask;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void <clinit>()
{
io.netty.channel.ChannelHandlerMask$1 v1;
io.netty.util.internal.logging.InternalLogger v0;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/channel/ChannelHandlerMask;");
<io.netty.channel.ChannelHandlerMask: io.netty.util.internal.logging.InternalLogger logger> = v0;
v1 = new io.netty.channel.ChannelHandlerMask$1;
specialinvoke v1.<io.netty.channel.ChannelHandlerMask$1: void <init>()>();
<io.netty.channel.ChannelHandlerMask: io.netty.util.concurrent.FastThreadLocal MASKS> = v1;
return;
}
}