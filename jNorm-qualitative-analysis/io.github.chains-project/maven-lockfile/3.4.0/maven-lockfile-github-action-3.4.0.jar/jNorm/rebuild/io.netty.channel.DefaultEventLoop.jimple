public class io.netty.channel.DefaultEventLoop extends io.netty.channel.SingleThreadEventLoop
{
public void <init>()
{
io.netty.channel.EventLoopGroup v1;
io.netty.channel.DefaultEventLoop v0;
v0 := @this: io.netty.channel.DefaultEventLoop;
v1 = null;
specialinvoke v0.<io.netty.channel.DefaultEventLoop: void <init>(io.netty.channel.EventLoopGroup)>(v1);
return;
}
public void <init>(java.util.concurrent.ThreadFactory)
{
java.util.concurrent.ThreadFactory v1;
io.netty.channel.DefaultEventLoop v0;
v0 := @this: io.netty.channel.DefaultEventLoop;
v1 := @parameter0: java.util.concurrent.ThreadFactory;
specialinvoke v0.<io.netty.channel.DefaultEventLoop: void <init>(io.netty.channel.EventLoopGroup,java.util.concurrent.ThreadFactory)>(null, v1);
return;
}
public void <init>(java.util.concurrent.Executor)
{
java.util.concurrent.Executor v1;
io.netty.channel.DefaultEventLoop v0;
v0 := @this: io.netty.channel.DefaultEventLoop;
v1 := @parameter0: java.util.concurrent.Executor;
specialinvoke v0.<io.netty.channel.DefaultEventLoop: void <init>(io.netty.channel.EventLoopGroup,java.util.concurrent.Executor)>(null, v1);
return;
}
public void <init>(io.netty.channel.EventLoopGroup)
{
io.netty.channel.EventLoopGroup v1;
io.netty.util.concurrent.DefaultThreadFactory v2;
io.netty.channel.DefaultEventLoop v0;
v0 := @this: io.netty.channel.DefaultEventLoop;
v1 := @parameter0: io.netty.channel.EventLoopGroup;
v2 = new io.netty.util.concurrent.DefaultThreadFactory;
specialinvoke v2.<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.Class)>(class "Lio/netty/channel/DefaultEventLoop;");
specialinvoke v0.<io.netty.channel.DefaultEventLoop: void <init>(io.netty.channel.EventLoopGroup,java.util.concurrent.ThreadFactory)>(v1, v2);
return;
}
public void <init>(io.netty.channel.EventLoopGroup, java.util.concurrent.ThreadFactory)
{
io.netty.channel.EventLoopGroup v1;
java.util.concurrent.ThreadFactory v2;
io.netty.channel.DefaultEventLoop v0;
v0 := @this: io.netty.channel.DefaultEventLoop;
v1 := @parameter0: io.netty.channel.EventLoopGroup;
v2 := @parameter1: java.util.concurrent.ThreadFactory;
specialinvoke v0.<io.netty.channel.SingleThreadEventLoop: void <init>(io.netty.channel.EventLoopGroup,java.util.concurrent.ThreadFactory,boolean)>(v1, v2, 1);
return;
}
public void <init>(io.netty.channel.EventLoopGroup, java.util.concurrent.Executor)
{
io.netty.channel.EventLoopGroup v1;
java.util.concurrent.Executor v2;
io.netty.channel.DefaultEventLoop v0;
v0 := @this: io.netty.channel.DefaultEventLoop;
v1 := @parameter0: io.netty.channel.EventLoopGroup;
v2 := @parameter1: java.util.concurrent.Executor;
specialinvoke v0.<io.netty.channel.SingleThreadEventLoop: void <init>(io.netty.channel.EventLoopGroup,java.util.concurrent.Executor,boolean)>(v1, v2, 1);
return;
}
protected void run()
{
java.lang.Runnable v1;
io.netty.channel.DefaultEventLoop v0;
boolean v2;
v0 := @this: io.netty.channel.DefaultEventLoop;
label1:
v1 = virtualinvoke v0.<io.netty.channel.DefaultEventLoop: java.lang.Runnable takeTask()>();
if v1 == null goto label2;
staticinvoke <io.netty.channel.DefaultEventLoop: void runTask(java.lang.Runnable)>(v1);
virtualinvoke v0.<io.netty.channel.DefaultEventLoop: void updateLastExecutionTime()>();
label2:
v2 = virtualinvoke v0.<io.netty.channel.DefaultEventLoop: boolean confirmShutdown()>();
if v2 == 0 goto label1;
return;
}
}