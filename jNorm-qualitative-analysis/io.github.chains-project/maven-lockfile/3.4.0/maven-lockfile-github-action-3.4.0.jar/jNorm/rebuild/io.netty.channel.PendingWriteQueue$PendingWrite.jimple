final class io.netty.channel.PendingWriteQueue$PendingWrite extends java.lang.Object
{
private static final io.netty.util.internal.ObjectPool RECYCLER;
private final io.netty.util.internal.ObjectPool$Handle handle;
private io.netty.channel.PendingWriteQueue$PendingWrite next;
private long size;
private io.netty.channel.ChannelPromise promise;
private java.lang.Object msg;
private void <init>(io.netty.util.internal.ObjectPool$Handle)
{
io.netty.channel.PendingWriteQueue$PendingWrite v0;
io.netty.util.internal.ObjectPool$Handle v1;
v0 := @this: io.netty.channel.PendingWriteQueue$PendingWrite;
v1 := @parameter0: io.netty.util.internal.ObjectPool$Handle;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.channel.PendingWriteQueue$PendingWrite: io.netty.util.internal.ObjectPool$Handle handle> = v1;
return;
}
static io.netty.channel.PendingWriteQueue$PendingWrite newInstance(java.lang.Object, int, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v2;
int v1;
java.lang.Object v0, v4;
io.netty.util.internal.ObjectPool v3;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: int;
v2 := @parameter2: io.netty.channel.ChannelPromise;
v3 = <io.netty.channel.PendingWriteQueue$PendingWrite: io.netty.util.internal.ObjectPool RECYCLER>;
v4 = virtualinvoke v3.<io.netty.util.internal.ObjectPool: java.lang.Object get()>();
v4.<io.netty.channel.PendingWriteQueue$PendingWrite: long size> = v1;
v4.<io.netty.channel.PendingWriteQueue$PendingWrite: java.lang.Object msg> = v0;
v4.<io.netty.channel.PendingWriteQueue$PendingWrite: io.netty.channel.ChannelPromise promise> = v2;
return v4;
}
private void recycle()
{
io.netty.channel.PendingWriteQueue$PendingWrite v0;
io.netty.util.internal.ObjectPool$Handle v1;
v0 := @this: io.netty.channel.PendingWriteQueue$PendingWrite;
v0.<io.netty.channel.PendingWriteQueue$PendingWrite: long size> = 0L;
v0.<io.netty.channel.PendingWriteQueue$PendingWrite: io.netty.channel.PendingWriteQueue$PendingWrite next> = null;
v0.<io.netty.channel.PendingWriteQueue$PendingWrite: java.lang.Object msg> = null;
v0.<io.netty.channel.PendingWriteQueue$PendingWrite: io.netty.channel.ChannelPromise promise> = null;
v1 = v0.<io.netty.channel.PendingWriteQueue$PendingWrite: io.netty.util.internal.ObjectPool$Handle handle>;
interfaceinvoke v1.<io.netty.util.internal.ObjectPool$Handle: void recycle(java.lang.Object)>(v0);
return;
}
static void <clinit>()
{
io.netty.channel.PendingWriteQueue$PendingWrite$1 v0;
io.netty.util.internal.ObjectPool v1;
v0 = new io.netty.channel.PendingWriteQueue$PendingWrite$1;
specialinvoke v0.<io.netty.channel.PendingWriteQueue$PendingWrite$1: void <init>()>();
v1 = staticinvoke <io.netty.util.internal.ObjectPool: io.netty.util.internal.ObjectPool newPool(io.netty.util.internal.ObjectPool$ObjectCreator)>(v0);
<io.netty.channel.PendingWriteQueue$PendingWrite: io.netty.util.internal.ObjectPool RECYCLER> = v1;
return;
}
}