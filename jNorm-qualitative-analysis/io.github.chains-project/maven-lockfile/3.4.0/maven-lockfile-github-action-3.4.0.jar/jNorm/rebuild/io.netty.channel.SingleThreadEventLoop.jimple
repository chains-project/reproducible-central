public abstract class io.netty.channel.SingleThreadEventLoop extends io.netty.util.concurrent.SingleThreadEventExecutor implements io.netty.channel.EventLoop
{
protected static final int DEFAULT_MAX_PENDING_TASKS;
private final java.util.Queue tailTasks;
protected void <init>(io.netty.channel.EventLoopGroup, java.util.concurrent.ThreadFactory, boolean)
{
io.netty.channel.EventLoopGroup v1;
io.netty.channel.SingleThreadEventLoop v0;
int v4;
java.util.concurrent.ThreadFactory v2;
io.netty.util.concurrent.RejectedExecutionHandler v5;
boolean v3;
v0 := @this: io.netty.channel.SingleThreadEventLoop;
v1 := @parameter0: io.netty.channel.EventLoopGroup;
v2 := @parameter1: java.util.concurrent.ThreadFactory;
v3 := @parameter2: boolean;
v4 = <io.netty.channel.SingleThreadEventLoop: int DEFAULT_MAX_PENDING_TASKS>;
v5 = staticinvoke <io.netty.util.concurrent.RejectedExecutionHandlers: io.netty.util.concurrent.RejectedExecutionHandler reject()>();
specialinvoke v0.<io.netty.channel.SingleThreadEventLoop: void <init>(io.netty.channel.EventLoopGroup,java.util.concurrent.ThreadFactory,boolean,int,io.netty.util.concurrent.RejectedExecutionHandler)>(v1, v2, v3, v4, v5);
return;
}
protected void <init>(io.netty.channel.EventLoopGroup, java.util.concurrent.Executor, boolean)
{
io.netty.channel.EventLoopGroup v1;
java.util.concurrent.Executor v2;
io.netty.channel.SingleThreadEventLoop v0;
int v4;
io.netty.util.concurrent.RejectedExecutionHandler v5;
boolean v3;
v0 := @this: io.netty.channel.SingleThreadEventLoop;
v1 := @parameter0: io.netty.channel.EventLoopGroup;
v2 := @parameter1: java.util.concurrent.Executor;
v3 := @parameter2: boolean;
v4 = <io.netty.channel.SingleThreadEventLoop: int DEFAULT_MAX_PENDING_TASKS>;
v5 = staticinvoke <io.netty.util.concurrent.RejectedExecutionHandlers: io.netty.util.concurrent.RejectedExecutionHandler reject()>();
specialinvoke v0.<io.netty.channel.SingleThreadEventLoop: void <init>(io.netty.channel.EventLoopGroup,java.util.concurrent.Executor,boolean,int,io.netty.util.concurrent.RejectedExecutionHandler)>(v1, v2, v3, v4, v5);
return;
}
protected void <init>(io.netty.channel.EventLoopGroup, java.util.concurrent.ThreadFactory, boolean, int, io.netty.util.concurrent.RejectedExecutionHandler)
{
io.netty.channel.EventLoopGroup v1;
io.netty.channel.SingleThreadEventLoop v0;
int v4;
java.util.Queue v6;
java.util.concurrent.ThreadFactory v2;
io.netty.util.concurrent.RejectedExecutionHandler v5;
boolean v3;
v0 := @this: io.netty.channel.SingleThreadEventLoop;
v1 := @parameter0: io.netty.channel.EventLoopGroup;
v2 := @parameter1: java.util.concurrent.ThreadFactory;
v3 := @parameter2: boolean;
v4 := @parameter3: int;
v5 := @parameter4: io.netty.util.concurrent.RejectedExecutionHandler;
specialinvoke v0.<io.netty.util.concurrent.SingleThreadEventExecutor: void <init>(io.netty.util.concurrent.EventExecutorGroup,java.util.concurrent.ThreadFactory,boolean,int,io.netty.util.concurrent.RejectedExecutionHandler)>(v1, v2, v3, v4, v5);
v6 = virtualinvoke v0.<io.netty.channel.SingleThreadEventLoop: java.util.Queue newTaskQueue(int)>(v4);
v0.<io.netty.channel.SingleThreadEventLoop: java.util.Queue tailTasks> = v6;
return;
}
protected void <init>(io.netty.channel.EventLoopGroup, java.util.concurrent.Executor, boolean, int, io.netty.util.concurrent.RejectedExecutionHandler)
{
io.netty.channel.EventLoopGroup v1;
java.util.concurrent.Executor v2;
io.netty.channel.SingleThreadEventLoop v0;
int v4;
java.util.Queue v6;
io.netty.util.concurrent.RejectedExecutionHandler v5;
boolean v3;
v0 := @this: io.netty.channel.SingleThreadEventLoop;
v1 := @parameter0: io.netty.channel.EventLoopGroup;
v2 := @parameter1: java.util.concurrent.Executor;
v3 := @parameter2: boolean;
v4 := @parameter3: int;
v5 := @parameter4: io.netty.util.concurrent.RejectedExecutionHandler;
specialinvoke v0.<io.netty.util.concurrent.SingleThreadEventExecutor: void <init>(io.netty.util.concurrent.EventExecutorGroup,java.util.concurrent.Executor,boolean,int,io.netty.util.concurrent.RejectedExecutionHandler)>(v1, v2, v3, v4, v5);
v6 = virtualinvoke v0.<io.netty.channel.SingleThreadEventLoop: java.util.Queue newTaskQueue(int)>(v4);
v0.<io.netty.channel.SingleThreadEventLoop: java.util.Queue tailTasks> = v6;
return;
}
protected void <init>(io.netty.channel.EventLoopGroup, java.util.concurrent.Executor, boolean, java.util.Queue, java.util.Queue, io.netty.util.concurrent.RejectedExecutionHandler)
{
io.netty.channel.EventLoopGroup v1;
java.util.concurrent.Executor v2;
io.netty.channel.SingleThreadEventLoop v0;
java.lang.Object v7;
java.util.Queue v4, v5;
io.netty.util.concurrent.RejectedExecutionHandler v6;
boolean v3;
v0 := @this: io.netty.channel.SingleThreadEventLoop;
v1 := @parameter0: io.netty.channel.EventLoopGroup;
v2 := @parameter1: java.util.concurrent.Executor;
v3 := @parameter2: boolean;
v4 := @parameter3: java.util.Queue;
v5 := @parameter4: java.util.Queue;
v6 := @parameter5: io.netty.util.concurrent.RejectedExecutionHandler;
specialinvoke v0.<io.netty.util.concurrent.SingleThreadEventExecutor: void <init>(io.netty.util.concurrent.EventExecutorGroup,java.util.concurrent.Executor,boolean,java.util.Queue,io.netty.util.concurrent.RejectedExecutionHandler)>(v1, v2, v3, v4, v6);
v7 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v5, "tailTaskQueue");
v0.<io.netty.channel.SingleThreadEventLoop: java.util.Queue tailTasks> = v7;
return;
}
public io.netty.channel.EventLoopGroup parent()
{
io.netty.util.concurrent.EventExecutorGroup v1;
io.netty.channel.SingleThreadEventLoop v0;
v0 := @this: io.netty.channel.SingleThreadEventLoop;
v1 = specialinvoke v0.<io.netty.util.concurrent.SingleThreadEventExecutor: io.netty.util.concurrent.EventExecutorGroup parent()>();
return v1;
}
public io.netty.channel.EventLoop next()
{
io.netty.util.concurrent.EventExecutor v1;
io.netty.channel.SingleThreadEventLoop v0;
v0 := @this: io.netty.channel.SingleThreadEventLoop;
v1 = specialinvoke v0.<io.netty.util.concurrent.SingleThreadEventExecutor: io.netty.util.concurrent.EventExecutor next()>();
return v1;
}
public io.netty.channel.ChannelFuture register(io.netty.channel.Channel)
{
io.netty.channel.Channel v1;
io.netty.channel.SingleThreadEventLoop v0;
io.netty.channel.DefaultChannelPromise v2;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.channel.SingleThreadEventLoop;
v1 := @parameter0: io.netty.channel.Channel;
v2 = new io.netty.channel.DefaultChannelPromise;
specialinvoke v2.<io.netty.channel.DefaultChannelPromise: void <init>(io.netty.channel.Channel,io.netty.util.concurrent.EventExecutor)>(v1, v0);
v3 = virtualinvoke v0.<io.netty.channel.SingleThreadEventLoop: io.netty.channel.ChannelFuture register(io.netty.channel.ChannelPromise)>(v2);
return v3;
}
public io.netty.channel.ChannelFuture register(io.netty.channel.ChannelPromise)
{
io.netty.channel.Channel v2;
io.netty.channel.ChannelPromise v1;
io.netty.channel.SingleThreadEventLoop v0;
io.netty.channel.Channel$Unsafe v3;
v0 := @this: io.netty.channel.SingleThreadEventLoop;
v1 := @parameter0: io.netty.channel.ChannelPromise;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "promise");
v2 = interfaceinvoke v1.<io.netty.channel.ChannelPromise: io.netty.channel.Channel channel()>();
v3 = interfaceinvoke v2.<io.netty.channel.Channel: io.netty.channel.Channel$Unsafe unsafe()>();
interfaceinvoke v3.<io.netty.channel.Channel$Unsafe: void register(io.netty.channel.EventLoop,io.netty.channel.ChannelPromise)>(v0, v1);
return v1;
}
public io.netty.channel.ChannelFuture register(io.netty.channel.Channel, io.netty.channel.ChannelPromise)
{
io.netty.channel.Channel v1;
io.netty.channel.ChannelPromise v2;
io.netty.channel.SingleThreadEventLoop v0;
io.netty.channel.Channel$Unsafe v3;
v0 := @this: io.netty.channel.SingleThreadEventLoop;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: io.netty.channel.ChannelPromise;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "promise");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "channel");
v3 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.Channel$Unsafe unsafe()>();
interfaceinvoke v3.<io.netty.channel.Channel$Unsafe: void register(io.netty.channel.EventLoop,io.netty.channel.ChannelPromise)>(v0, v2);
return v2;
}
public final void executeAfterEventLoopIteration(java.lang.Runnable)
{
io.netty.channel.SingleThreadEventLoop v0;
java.util.Queue v3;
java.lang.Runnable v1;
boolean v2, v4, v5, v6;
v0 := @this: io.netty.channel.SingleThreadEventLoop;
v1 := @parameter0: java.lang.Runnable;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "task");
v2 = virtualinvoke v0.<io.netty.channel.SingleThreadEventLoop: boolean isShutdown()>();
if v2 == 0 goto label1;
staticinvoke <io.netty.channel.SingleThreadEventLoop: void reject()>();
label1:
v3 = v0.<io.netty.channel.SingleThreadEventLoop: java.util.Queue tailTasks>;
v4 = interfaceinvoke v3.<java.util.Queue: boolean offer(java.lang.Object)>(v1);
if v4 != 0 goto label2;
virtualinvoke v0.<io.netty.channel.SingleThreadEventLoop: void reject(java.lang.Runnable)>(v1);
label2:
v5 = virtualinvoke v0.<io.netty.channel.SingleThreadEventLoop: boolean wakesUpForTask(java.lang.Runnable)>(v1);
if v5 == 0 goto label3;
v6 = virtualinvoke v0.<io.netty.channel.SingleThreadEventLoop: boolean inEventLoop()>();
virtualinvoke v0.<io.netty.channel.SingleThreadEventLoop: void wakeup(boolean)>(v6);
label3:
return;
}
final boolean removeAfterEventLoopIterationTask(java.lang.Runnable)
{
io.netty.channel.SingleThreadEventLoop v0;
java.lang.Object v3;
java.util.Queue v2;
java.lang.Runnable v1;
boolean v4;
v0 := @this: io.netty.channel.SingleThreadEventLoop;
v1 := @parameter0: java.lang.Runnable;
v2 = v0.<io.netty.channel.SingleThreadEventLoop: java.util.Queue tailTasks>;
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "task");
v4 = interfaceinvoke v2.<java.util.Queue: boolean remove(java.lang.Object)>(v3);
return v4;
}
protected void afterRunningAllTasks()
{
java.util.Queue v1;
io.netty.channel.SingleThreadEventLoop v0;
v0 := @this: io.netty.channel.SingleThreadEventLoop;
v1 = v0.<io.netty.channel.SingleThreadEventLoop: java.util.Queue tailTasks>;
virtualinvoke v0.<io.netty.channel.SingleThreadEventLoop: boolean runAllTasksFrom(java.util.Queue)>(v1);
return;
}
protected boolean hasTasks()
{
io.netty.channel.SingleThreadEventLoop v0;
java.util.Queue v2;
boolean v1, v3, v4;
v0 := @this: io.netty.channel.SingleThreadEventLoop;
v1 = specialinvoke v0.<io.netty.util.concurrent.SingleThreadEventExecutor: boolean hasTasks()>();
if v1 != 0 goto label1;
v2 = v0.<io.netty.channel.SingleThreadEventLoop: java.util.Queue tailTasks>;
v3 = interfaceinvoke v2.<java.util.Queue: boolean isEmpty()>();
if v3 != 0 goto label2;
label1:
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
return v4;
}
public int pendingTasks()
{
io.netty.channel.SingleThreadEventLoop v0;
int v1, v3, v4;
java.util.Queue v2;
v0 := @this: io.netty.channel.SingleThreadEventLoop;
v1 = specialinvoke v0.<io.netty.util.concurrent.SingleThreadEventExecutor: int pendingTasks()>();
v2 = v0.<io.netty.channel.SingleThreadEventLoop: java.util.Queue tailTasks>;
v3 = interfaceinvoke v2.<java.util.Queue: int size()>();
v4 = v1 + v3;
return v4;
}
public int registeredChannels()
{
int v1;
io.netty.channel.SingleThreadEventLoop v0;
v0 := @this: io.netty.channel.SingleThreadEventLoop;
v1 = (int) -1;
return v1;
}
public java.util.Iterator registeredChannelsIterator()
{
java.lang.UnsupportedOperationException v1;
io.netty.channel.SingleThreadEventLoop v0;
v0 := @this: io.netty.channel.SingleThreadEventLoop;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("registeredChannelsIterator");
throw v1;
}
static void <clinit>()
{
int v0, v1;
v0 = staticinvoke <io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>("io.netty.eventLoop.maxPendingTasks", 2147483647);
v1 = staticinvoke <java.lang.Math: int max(int,int)>(16, v0);
<io.netty.channel.SingleThreadEventLoop: int DEFAULT_MAX_PENDING_TASKS> = v1;
return;
}
}