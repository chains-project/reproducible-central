public class io.netty.channel.ThreadPerChannelEventLoopGroup extends io.netty.util.concurrent.AbstractEventExecutorGroup implements io.netty.channel.EventLoopGroup
{
private final java.lang.Object[] childArgs;
private final int maxChannels;
final java.util.concurrent.Executor executor;
final java.util.Set activeChildren;
final java.util.Queue idleChildren;
private final io.netty.channel.ChannelException tooManyChannels;
private volatile boolean shuttingDown;
private final io.netty.util.concurrent.Promise terminationFuture;
private final io.netty.util.concurrent.FutureListener childTerminationListener;
protected void <init>()
{
io.netty.channel.ThreadPerChannelEventLoopGroup v0;
v0 := @this: io.netty.channel.ThreadPerChannelEventLoopGroup;
specialinvoke v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: void <init>(int)>(0);
return;
}
protected void <init>(int)
{
java.lang.Object[] v3;
int v1;
io.netty.channel.ThreadPerChannelEventLoopGroup v0;
java.util.concurrent.ThreadFactory v2;
v0 := @this: io.netty.channel.ThreadPerChannelEventLoopGroup;
v1 := @parameter0: int;
v2 = null;
v3 = newarray (java.lang.Object)[0];
specialinvoke v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: void <init>(int,java.util.concurrent.ThreadFactory,java.lang.Object[])>(v1, v2, v3);
return;
}
protected transient void <init>(int, java.util.concurrent.ThreadFactory, java.lang.Object[])
{
io.netty.util.concurrent.ThreadPerTaskExecutor v4;
java.lang.Object[] v3;
int v1;
io.netty.channel.ThreadPerChannelEventLoopGroup v0;
java.util.concurrent.ThreadFactory v2;
v0 := @this: io.netty.channel.ThreadPerChannelEventLoopGroup;
v1 := @parameter0: int;
v2 := @parameter1: java.util.concurrent.ThreadFactory;
v3 := @parameter2: java.lang.Object[];
if v2 != null goto label1;
v4 = null;
goto label2;
label1:
v4 = new io.netty.util.concurrent.ThreadPerTaskExecutor;
specialinvoke v4.<io.netty.util.concurrent.ThreadPerTaskExecutor: void <init>(java.util.concurrent.ThreadFactory)>(v2);
label2:
specialinvoke v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: void <init>(int,java.util.concurrent.Executor,java.lang.Object[])>(v1, v4, v3);
return;
}
protected transient void <init>(int, java.util.concurrent.Executor, java.lang.Object[])
{
io.netty.util.concurrent.DefaultThreadFactory v11;
java.lang.Object[] v13, v3;
java.util.concurrent.ConcurrentMap v4;
io.netty.util.concurrent.GlobalEventExecutor v8;
int v1;
java.lang.String v15;
io.netty.channel.ThreadPerChannelEventLoopGroup$1 v9;
java.util.concurrent.Executor v2;
io.netty.channel.ThreadPerChannelEventLoopGroup v0;
java.util.Set v5;
io.netty.util.concurrent.ThreadPerTaskExecutor v10;
io.netty.util.concurrent.DefaultPromise v7;
io.netty.channel.ChannelException v16;
java.lang.Class v12;
java.lang.Object v14;
java.util.concurrent.ConcurrentLinkedQueue v6;
v0 := @this: io.netty.channel.ThreadPerChannelEventLoopGroup;
v1 := @parameter0: int;
v2 := @parameter1: java.util.concurrent.Executor;
v3 := @parameter2: java.lang.Object[];
specialinvoke v0.<io.netty.util.concurrent.AbstractEventExecutorGroup: void <init>()>();
v4 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.concurrent.ConcurrentMap newConcurrentHashMap()>();
v5 = staticinvoke <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>(v4);
v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: java.util.Set activeChildren> = v5;
v6 = new java.util.concurrent.ConcurrentLinkedQueue;
specialinvoke v6.<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>();
v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: java.util.Queue idleChildren> = v6;
v7 = new io.netty.util.concurrent.DefaultPromise;
v8 = <io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.concurrent.GlobalEventExecutor INSTANCE>;
specialinvoke v7.<io.netty.util.concurrent.DefaultPromise: void <init>(io.netty.util.concurrent.EventExecutor)>(v8);
v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: io.netty.util.concurrent.Promise terminationFuture> = v7;
v9 = new io.netty.channel.ThreadPerChannelEventLoopGroup$1;
specialinvoke v9.<io.netty.channel.ThreadPerChannelEventLoopGroup$1: void <init>(io.netty.channel.ThreadPerChannelEventLoopGroup)>(v0);
v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: io.netty.util.concurrent.FutureListener childTerminationListener> = v9;
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositiveOrZero(int,java.lang.String)>(v1, "maxChannels");
if v2 != null goto label1;
v10 = new io.netty.util.concurrent.ThreadPerTaskExecutor;
v11 = new io.netty.util.concurrent.DefaultThreadFactory;
v12 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
specialinvoke v11.<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.Class)>(v12);
specialinvoke v10.<io.netty.util.concurrent.ThreadPerTaskExecutor: void <init>(java.util.concurrent.ThreadFactory)>(v11);
v2 = v10;
label1:
if v3 != null goto label2;
v13 = <io.netty.util.internal.EmptyArrays: java.lang.Object[] EMPTY_OBJECTS>;
v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: java.lang.Object[] childArgs> = v13;
goto label3;
label2:
v14 = virtualinvoke v3.<java.lang.Object: java.lang.Object clone()>();
v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: java.lang.Object[] childArgs> = v14;
label3:
v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: int maxChannels> = v1;
v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: java.util.concurrent.Executor executor> = v2;
v15 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("too many channels (max: \u0001)");
v16 = staticinvoke <io.netty.channel.ChannelException: io.netty.channel.ChannelException newStatic(java.lang.String,java.lang.Class,java.lang.String)>(v15, class "Lio/netty/channel/ThreadPerChannelEventLoopGroup;", "nextChild()");
v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: io.netty.channel.ChannelException tooManyChannels> = v16;
return;
}
protected transient io.netty.channel.EventLoop newChild(java.lang.Object[]) throws java.lang.Exception
{
io.netty.channel.ThreadPerChannelEventLoopGroup v0;
io.netty.channel.ThreadPerChannelEventLoop v2;
java.lang.Object[] v1;
v0 := @this: io.netty.channel.ThreadPerChannelEventLoopGroup;
v1 := @parameter0: java.lang.Object[];
v2 = new io.netty.channel.ThreadPerChannelEventLoop;
specialinvoke v2.<io.netty.channel.ThreadPerChannelEventLoop: void <init>(io.netty.channel.ThreadPerChannelEventLoopGroup)>(v0);
return v2;
}
public java.util.Iterator iterator()
{
java.util.Iterator v3;
io.netty.channel.ThreadPerChannelEventLoopGroup v0;
io.netty.util.internal.ReadOnlyIterator v1;
java.util.Set v2;
v0 := @this: io.netty.channel.ThreadPerChannelEventLoopGroup;
v1 = new io.netty.util.internal.ReadOnlyIterator;
v2 = v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: java.util.Set activeChildren>;
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
specialinvoke v1.<io.netty.util.internal.ReadOnlyIterator: void <init>(java.util.Iterator)>(v3);
return v1;
}
public io.netty.channel.EventLoop next()
{
io.netty.channel.ThreadPerChannelEventLoopGroup v0;
java.lang.UnsupportedOperationException v1;
v0 := @this: io.netty.channel.ThreadPerChannelEventLoopGroup;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>()>();
throw v1;
}
public io.netty.util.concurrent.Future shutdownGracefully(long, long, java.util.concurrent.TimeUnit)
{
io.netty.util.concurrent.Promise v13;
java.util.Iterator v5, v9;
io.netty.channel.ThreadPerChannelEventLoopGroup v0;
java.util.Set v4;
long v1, v2;
java.util.concurrent.TimeUnit v3;
java.lang.Object v11, v7;
java.util.Queue v8;
io.netty.util.concurrent.Future v14;
boolean v10, v12, v6;
v0 := @this: io.netty.channel.ThreadPerChannelEventLoopGroup;
v1 := @parameter0: long;
v2 := @parameter1: long;
v3 := @parameter2: java.util.concurrent.TimeUnit;
v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: boolean shuttingDown> = 1;
v4 = v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: java.util.Set activeChildren>;
v5 = interfaceinvoke v4.<java.util.Set: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label2;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v7.<io.netty.channel.EventLoop: io.netty.util.concurrent.Future shutdownGracefully(long,long,java.util.concurrent.TimeUnit)>(v1, v2, v3);
goto label1;
label2:
v8 = v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: java.util.Queue idleChildren>;
v9 = interfaceinvoke v8.<java.util.Queue: java.util.Iterator iterator()>();
label3:
v10 = interfaceinvoke v9.<java.util.Iterator: boolean hasNext()>();
if v10 == 0 goto label4;
v11 = interfaceinvoke v9.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v11.<io.netty.channel.EventLoop: io.netty.util.concurrent.Future shutdownGracefully(long,long,java.util.concurrent.TimeUnit)>(v1, v2, v3);
goto label3;
label4:
v12 = virtualinvoke v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: boolean isTerminated()>();
if v12 == 0 goto label5;
v13 = v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: io.netty.util.concurrent.Promise terminationFuture>;
interfaceinvoke v13.<io.netty.util.concurrent.Promise: boolean trySuccess(java.lang.Object)>(null);
label5:
v14 = virtualinvoke v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: io.netty.util.concurrent.Future terminationFuture()>();
return v14;
}
public io.netty.util.concurrent.Future terminationFuture()
{
io.netty.channel.ThreadPerChannelEventLoopGroup v0;
io.netty.util.concurrent.Promise v1;
v0 := @this: io.netty.channel.ThreadPerChannelEventLoopGroup;
v1 = v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: io.netty.util.concurrent.Promise terminationFuture>;
return v1;
}
public void shutdown()
{
io.netty.util.concurrent.Promise v10;
java.util.Iterator v2, v6;
io.netty.channel.ThreadPerChannelEventLoopGroup v0;
java.util.Set v1;
java.lang.Object v4, v8;
java.util.Queue v5;
boolean v3, v7, v9;
v0 := @this: io.netty.channel.ThreadPerChannelEventLoopGroup;
v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: boolean shuttingDown> = 1;
v1 = v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: java.util.Set activeChildren>;
v2 = interfaceinvoke v1.<java.util.Set: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v4.<io.netty.channel.EventLoop: void shutdown()>();
goto label1;
label2:
v5 = v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: java.util.Queue idleChildren>;
v6 = interfaceinvoke v5.<java.util.Queue: java.util.Iterator iterator()>();
label3:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label4;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v8.<io.netty.channel.EventLoop: void shutdown()>();
goto label3;
label4:
v9 = virtualinvoke v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: boolean isTerminated()>();
if v9 == 0 goto label5;
v10 = v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: io.netty.util.concurrent.Promise terminationFuture>;
interfaceinvoke v10.<io.netty.util.concurrent.Promise: boolean trySuccess(java.lang.Object)>(null);
label5:
return;
}
public boolean isShuttingDown()
{
java.util.Iterator v2, v7;
io.netty.channel.ThreadPerChannelEventLoopGroup v0;
java.util.Set v1;
java.lang.Object v4, v9;
java.util.Queue v6;
boolean v10, v3, v5, v8;
v0 := @this: io.netty.channel.ThreadPerChannelEventLoopGroup;
v1 = v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: java.util.Set activeChildren>;
v2 = interfaceinvoke v1.<java.util.Set: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = interfaceinvoke v4.<io.netty.channel.EventLoop: boolean isShuttingDown()>();
if v5 != 0 goto label1;
return 0;
label2:
v6 = v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: java.util.Queue idleChildren>;
v7 = interfaceinvoke v6.<java.util.Queue: java.util.Iterator iterator()>();
label3:
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label4;
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
v10 = interfaceinvoke v9.<io.netty.channel.EventLoop: boolean isShuttingDown()>();
if v10 != 0 goto label3;
return 0;
label4:
return 1;
}
public boolean isShutdown()
{
java.util.Iterator v2, v7;
io.netty.channel.ThreadPerChannelEventLoopGroup v0;
java.util.Set v1;
java.lang.Object v4, v9;
java.util.Queue v6;
boolean v10, v3, v5, v8;
v0 := @this: io.netty.channel.ThreadPerChannelEventLoopGroup;
v1 = v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: java.util.Set activeChildren>;
v2 = interfaceinvoke v1.<java.util.Set: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = interfaceinvoke v4.<io.netty.channel.EventLoop: boolean isShutdown()>();
if v5 != 0 goto label1;
return 0;
label2:
v6 = v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: java.util.Queue idleChildren>;
v7 = interfaceinvoke v6.<java.util.Queue: java.util.Iterator iterator()>();
label3:
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label4;
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
v10 = interfaceinvoke v9.<io.netty.channel.EventLoop: boolean isShutdown()>();
if v10 != 0 goto label3;
return 0;
label4:
return 1;
}
public boolean isTerminated()
{
java.util.Iterator v2, v7;
io.netty.channel.ThreadPerChannelEventLoopGroup v0;
java.util.Set v1;
java.lang.Object v4, v9;
java.util.Queue v6;
boolean v10, v3, v5, v8;
v0 := @this: io.netty.channel.ThreadPerChannelEventLoopGroup;
v1 = v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: java.util.Set activeChildren>;
v2 = interfaceinvoke v1.<java.util.Set: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = interfaceinvoke v4.<io.netty.channel.EventLoop: boolean isTerminated()>();
if v5 != 0 goto label1;
return 0;
label2:
v6 = v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: java.util.Queue idleChildren>;
v7 = interfaceinvoke v6.<java.util.Queue: java.util.Iterator iterator()>();
label3:
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label4;
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
v10 = interfaceinvoke v9.<io.netty.channel.EventLoop: boolean isTerminated()>();
if v10 != 0 goto label3;
return 0;
label4:
return 1;
}
public boolean awaitTermination(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
{
long v1, v10, v11, v20, v21, v3, v4, v5;
byte v12, v22;
boolean v13, v15, v18, v23, v25, v26, v8;
java.util.Iterator v17, v7;
io.netty.channel.ThreadPerChannelEventLoopGroup v0;
java.util.Set v6;
java.util.concurrent.TimeUnit v14, v2, v24;
java.lang.Object v19, v9;
java.util.Queue v16;
v0 := @this: io.netty.channel.ThreadPerChannelEventLoopGroup;
v1 := @parameter0: long;
v2 := @parameter1: java.util.concurrent.TimeUnit;
v3 = staticinvoke <java.lang.System: long nanoTime()>();
v4 = virtualinvoke v2.<java.util.concurrent.TimeUnit: long toNanos(long)>(v1);
v5 = v3 + v4;
v6 = v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: java.util.Set activeChildren>;
v7 = interfaceinvoke v6.<java.util.Set: java.util.Iterator iterator()>();
label1:
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label4;
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
label2:
v10 = staticinvoke <java.lang.System: long nanoTime()>();
v11 = v5 - v10;
v12 = v11 cmp 0L;
if v12 > 0 goto label3;
v13 = virtualinvoke v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: boolean isTerminated()>();
return v13;
label3:
v14 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
v15 = interfaceinvoke v9.<io.netty.channel.EventLoop: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(v11, v14);
if v15 != 0 goto label1;
goto label2;
label4:
v16 = v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: java.util.Queue idleChildren>;
v17 = interfaceinvoke v16.<java.util.Queue: java.util.Iterator iterator()>();
label5:
v18 = interfaceinvoke v17.<java.util.Iterator: boolean hasNext()>();
if v18 == 0 goto label8;
v19 = interfaceinvoke v17.<java.util.Iterator: java.lang.Object next()>();
label6:
v20 = staticinvoke <java.lang.System: long nanoTime()>();
v21 = v5 - v20;
v22 = v21 cmp 0L;
if v22 > 0 goto label7;
v23 = virtualinvoke v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: boolean isTerminated()>();
return v23;
label7:
v24 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
v25 = interfaceinvoke v19.<io.netty.channel.EventLoop: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(v21, v24);
if v25 != 0 goto label5;
goto label6;
label8:
v26 = virtualinvoke v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: boolean isTerminated()>();
return v26;
}
public io.netty.channel.ChannelFuture register(io.netty.channel.Channel)
{
java.lang.Throwable v5;
io.netty.channel.ThreadPerChannelEventLoopGroup v0;
io.netty.channel.EventLoop v2;
io.netty.channel.ChannelFuture v4;
io.netty.channel.Channel v1;
io.netty.util.concurrent.GlobalEventExecutor v7;
io.netty.channel.FailedChannelFuture v6;
io.netty.channel.DefaultChannelPromise v3;
v0 := @this: io.netty.channel.ThreadPerChannelEventLoopGroup;
v1 := @parameter0: io.netty.channel.Channel;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "channel");
label1:
v2 = specialinvoke v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: io.netty.channel.EventLoop nextChild()>();
v3 = new io.netty.channel.DefaultChannelPromise;
specialinvoke v3.<io.netty.channel.DefaultChannelPromise: void <init>(io.netty.channel.Channel,io.netty.util.concurrent.EventExecutor)>(v1, v2);
v4 = interfaceinvoke v2.<io.netty.channel.EventLoop: io.netty.channel.ChannelFuture register(io.netty.channel.ChannelPromise)>(v3);
label2:
return v4;
label3:
v5 := @caughtexception;
v6 = new io.netty.channel.FailedChannelFuture;
v7 = <io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.concurrent.GlobalEventExecutor INSTANCE>;
specialinvoke v6.<io.netty.channel.FailedChannelFuture: void <init>(io.netty.channel.Channel,io.netty.util.concurrent.EventExecutor,java.lang.Throwable)>(v1, v7, v5);
return v6;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.netty.channel.ChannelFuture register(io.netty.channel.ChannelPromise)
{
java.lang.Throwable v4;
io.netty.channel.ChannelPromise v1;
io.netty.channel.ThreadPerChannelEventLoopGroup v0;
io.netty.channel.EventLoop v2;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.channel.ThreadPerChannelEventLoopGroup;
v1 := @parameter0: io.netty.channel.ChannelPromise;
label1:
v2 = specialinvoke v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: io.netty.channel.EventLoop nextChild()>();
v3 = interfaceinvoke v2.<io.netty.channel.EventLoop: io.netty.channel.ChannelFuture register(io.netty.channel.ChannelPromise)>(v1);
label2:
return v3;
label3:
v4 := @caughtexception;
interfaceinvoke v1.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v4);
return v1;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.netty.channel.ChannelFuture register(io.netty.channel.Channel, io.netty.channel.ChannelPromise)
{
io.netty.channel.Channel v1;
java.lang.Throwable v5;
io.netty.channel.ChannelPromise v2;
io.netty.channel.ThreadPerChannelEventLoopGroup v0;
io.netty.channel.EventLoop v3;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.channel.ThreadPerChannelEventLoopGroup;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: io.netty.channel.ChannelPromise;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "channel");
label1:
v3 = specialinvoke v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: io.netty.channel.EventLoop nextChild()>();
v4 = interfaceinvoke v3.<io.netty.channel.EventLoop: io.netty.channel.ChannelFuture register(io.netty.channel.Channel,io.netty.channel.ChannelPromise)>(v1, v2);
label2:
return v4;
label3:
v5 := @caughtexception;
interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v5);
return v2;
catch java.lang.Throwable from label1 to label2 with label3;
}
private io.netty.channel.EventLoop nextChild() throws java.lang.Exception
{
java.lang.Object[] v10;
io.netty.util.concurrent.FutureListener v12;
io.netty.channel.ThreadPerChannelEventLoopGroup v0;
java.util.Set v13, v6;
io.netty.channel.ChannelException v9;
java.util.concurrent.RejectedExecutionException v2;
int v5, v7, v8;
java.lang.Object v4;
java.util.Queue v3;
io.netty.util.concurrent.Future v11;
boolean v1;
v0 := @this: io.netty.channel.ThreadPerChannelEventLoopGroup;
v1 = v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: boolean shuttingDown>;
if v1 == 0 goto label1;
v2 = new java.util.concurrent.RejectedExecutionException;
specialinvoke v2.<java.util.concurrent.RejectedExecutionException: void <init>(java.lang.String)>("shutting down");
throw v2;
label1:
v3 = v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: java.util.Queue idleChildren>;
v4 = interfaceinvoke v3.<java.util.Queue: java.lang.Object poll()>();
if v4 != null goto label3;
v5 = v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: int maxChannels>;
if v5 <= 0 goto label2;
v6 = v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: java.util.Set activeChildren>;
v7 = interfaceinvoke v6.<java.util.Set: int size()>();
v8 = v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: int maxChannels>;
if v7 < v8 goto label2;
v9 = v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: io.netty.channel.ChannelException tooManyChannels>;
throw v9;
label2:
v10 = v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: java.lang.Object[] childArgs>;
v4 = virtualinvoke v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: io.netty.channel.EventLoop newChild(java.lang.Object[])>(v10);
v11 = interfaceinvoke v4.<io.netty.channel.EventLoop: io.netty.util.concurrent.Future terminationFuture()>();
v12 = v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: io.netty.util.concurrent.FutureListener childTerminationListener>;
interfaceinvoke v11.<io.netty.util.concurrent.Future: io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)>(v12);
label3:
v13 = v0.<io.netty.channel.ThreadPerChannelEventLoopGroup: java.util.Set activeChildren>;
interfaceinvoke v13.<java.util.Set: boolean add(java.lang.Object)>(v4);
return v4;
}
}