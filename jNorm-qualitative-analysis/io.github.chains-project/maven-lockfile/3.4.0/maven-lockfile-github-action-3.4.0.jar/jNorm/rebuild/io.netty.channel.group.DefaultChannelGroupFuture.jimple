final class io.netty.channel.group.DefaultChannelGroupFuture extends io.netty.util.concurrent.DefaultPromise implements io.netty.channel.group.ChannelGroupFuture
{
private final io.netty.channel.group.ChannelGroup group;
private final java.util.Map futures;
private int successCount;
private int failureCount;
private final io.netty.channel.ChannelFutureListener childListener;
void <init>(io.netty.channel.group.ChannelGroup, java.util.Collection, io.netty.util.concurrent.EventExecutor)
{
io.netty.util.concurrent.EventExecutor v3;
java.util.LinkedHashMap v6;
io.netty.channel.ChannelFutureListener v17;
java.util.Map v11, v12, v18;
boolean v15, v19, v8;
io.netty.channel.group.DefaultChannelGroupFuture$1 v4;
io.netty.channel.group.ChannelGroup v1;
java.util.Iterator v14, v7;
java.util.Collection v13, v2;
io.netty.channel.Channel v10;
io.netty.channel.group.DefaultChannelGroupFuture v0;
java.lang.Object v16, v5, v9;
v0 := @this: io.netty.channel.group.DefaultChannelGroupFuture;
v1 := @parameter0: io.netty.channel.group.ChannelGroup;
v2 := @parameter1: java.util.Collection;
v3 := @parameter2: io.netty.util.concurrent.EventExecutor;
specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: void <init>(io.netty.util.concurrent.EventExecutor)>(v3);
v4 = new io.netty.channel.group.DefaultChannelGroupFuture$1;
specialinvoke v4.<io.netty.channel.group.DefaultChannelGroupFuture$1: void <init>(io.netty.channel.group.DefaultChannelGroupFuture)>(v0);
v0.<io.netty.channel.group.DefaultChannelGroupFuture: io.netty.channel.ChannelFutureListener childListener> = v4;
v5 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "group");
v0.<io.netty.channel.group.DefaultChannelGroupFuture: io.netty.channel.group.ChannelGroup group> = v5;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "futures");
v6 = new java.util.LinkedHashMap;
specialinvoke v6.<java.util.LinkedHashMap: void <init>()>();
v7 = interfaceinvoke v2.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label2;
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
v10 = interfaceinvoke v9.<io.netty.channel.ChannelFuture: io.netty.channel.Channel channel()>();
interfaceinvoke v6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v10, v9);
goto label1;
label2:
v11 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(v6);
v0.<io.netty.channel.group.DefaultChannelGroupFuture: java.util.Map futures> = v11;
v12 = v0.<io.netty.channel.group.DefaultChannelGroupFuture: java.util.Map futures>;
v13 = interfaceinvoke v12.<java.util.Map: java.util.Collection values()>();
v14 = interfaceinvoke v13.<java.util.Collection: java.util.Iterator iterator()>();
label3:
v15 = interfaceinvoke v14.<java.util.Iterator: boolean hasNext()>();
if v15 == 0 goto label4;
v16 = interfaceinvoke v14.<java.util.Iterator: java.lang.Object next()>();
v17 = v0.<io.netty.channel.group.DefaultChannelGroupFuture: io.netty.channel.ChannelFutureListener childListener>;
interfaceinvoke v16.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v17);
goto label3;
label4:
v18 = v0.<io.netty.channel.group.DefaultChannelGroupFuture: java.util.Map futures>;
v19 = interfaceinvoke v18.<java.util.Map: boolean isEmpty()>();
if v19 == 0 goto label5;
specialinvoke v0.<io.netty.channel.group.DefaultChannelGroupFuture: void setSuccess0()>();
label5:
return;
}
void <init>(io.netty.channel.group.ChannelGroup, java.util.Map, io.netty.util.concurrent.EventExecutor)
{
io.netty.util.concurrent.EventExecutor v3;
io.netty.channel.group.DefaultChannelGroupFuture$1 v4;
io.netty.channel.group.ChannelGroup v1;
java.util.Iterator v8;
java.util.Collection v7;
io.netty.channel.group.DefaultChannelGroupFuture v0;
io.netty.channel.ChannelFutureListener v11;
java.util.Map v12, v2, v5, v6;
java.lang.Object v10;
boolean v13, v9;
v0 := @this: io.netty.channel.group.DefaultChannelGroupFuture;
v1 := @parameter0: io.netty.channel.group.ChannelGroup;
v2 := @parameter1: java.util.Map;
v3 := @parameter2: io.netty.util.concurrent.EventExecutor;
specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: void <init>(io.netty.util.concurrent.EventExecutor)>(v3);
v4 = new io.netty.channel.group.DefaultChannelGroupFuture$1;
specialinvoke v4.<io.netty.channel.group.DefaultChannelGroupFuture$1: void <init>(io.netty.channel.group.DefaultChannelGroupFuture)>(v0);
v0.<io.netty.channel.group.DefaultChannelGroupFuture: io.netty.channel.ChannelFutureListener childListener> = v4;
v0.<io.netty.channel.group.DefaultChannelGroupFuture: io.netty.channel.group.ChannelGroup group> = v1;
v5 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(v2);
v0.<io.netty.channel.group.DefaultChannelGroupFuture: java.util.Map futures> = v5;
v6 = v0.<io.netty.channel.group.DefaultChannelGroupFuture: java.util.Map futures>;
v7 = interfaceinvoke v6.<java.util.Map: java.util.Collection values()>();
v8 = interfaceinvoke v7.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v9 = interfaceinvoke v8.<java.util.Iterator: boolean hasNext()>();
if v9 == 0 goto label2;
v10 = interfaceinvoke v8.<java.util.Iterator: java.lang.Object next()>();
v11 = v0.<io.netty.channel.group.DefaultChannelGroupFuture: io.netty.channel.ChannelFutureListener childListener>;
interfaceinvoke v10.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v11);
goto label1;
label2:
v12 = v0.<io.netty.channel.group.DefaultChannelGroupFuture: java.util.Map futures>;
v13 = interfaceinvoke v12.<java.util.Map: boolean isEmpty()>();
if v13 == 0 goto label3;
specialinvoke v0.<io.netty.channel.group.DefaultChannelGroupFuture: void setSuccess0()>();
label3:
return;
}
public io.netty.channel.group.ChannelGroup group()
{
io.netty.channel.group.DefaultChannelGroupFuture v0;
io.netty.channel.group.ChannelGroup v1;
v0 := @this: io.netty.channel.group.DefaultChannelGroupFuture;
v1 = v0.<io.netty.channel.group.DefaultChannelGroupFuture: io.netty.channel.group.ChannelGroup group>;
return v1;
}
public io.netty.channel.ChannelFuture find(io.netty.channel.Channel)
{
io.netty.channel.Channel v1;
io.netty.channel.group.DefaultChannelGroupFuture v0;
java.util.Map v2;
java.lang.Object v3;
v0 := @this: io.netty.channel.group.DefaultChannelGroupFuture;
v1 := @parameter0: io.netty.channel.Channel;
v2 = v0.<io.netty.channel.group.DefaultChannelGroupFuture: java.util.Map futures>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
return v3;
}
public java.util.Iterator iterator()
{
io.netty.channel.group.DefaultChannelGroupFuture v0;
java.util.Iterator v3;
java.util.Collection v2;
java.util.Map v1;
v0 := @this: io.netty.channel.group.DefaultChannelGroupFuture;
v1 = v0.<io.netty.channel.group.DefaultChannelGroupFuture: java.util.Map futures>;
v2 = interfaceinvoke v1.<java.util.Map: java.util.Collection values()>();
v3 = interfaceinvoke v2.<java.util.Collection: java.util.Iterator iterator()>();
return v3;
}
public synchronized boolean isPartialSuccess()
{
io.netty.channel.group.DefaultChannelGroupFuture v0;
java.util.Map v3;
int v1, v2, v4;
boolean v5;
v0 := @this: io.netty.channel.group.DefaultChannelGroupFuture;
v1 = v0.<io.netty.channel.group.DefaultChannelGroupFuture: int successCount>;
if v1 == 0 goto label1;
v2 = v0.<io.netty.channel.group.DefaultChannelGroupFuture: int successCount>;
v3 = v0.<io.netty.channel.group.DefaultChannelGroupFuture: java.util.Map futures>;
v4 = interfaceinvoke v3.<java.util.Map: int size()>();
if v2 == v4 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
public synchronized boolean isPartialFailure()
{
io.netty.channel.group.DefaultChannelGroupFuture v0;
java.util.Map v3;
int v1, v2, v4;
boolean v5;
v0 := @this: io.netty.channel.group.DefaultChannelGroupFuture;
v1 = v0.<io.netty.channel.group.DefaultChannelGroupFuture: int failureCount>;
if v1 == 0 goto label1;
v2 = v0.<io.netty.channel.group.DefaultChannelGroupFuture: int failureCount>;
v3 = v0.<io.netty.channel.group.DefaultChannelGroupFuture: java.util.Map futures>;
v4 = interfaceinvoke v3.<java.util.Map: int size()>();
if v2 == v4 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
public io.netty.channel.group.DefaultChannelGroupFuture addListener(io.netty.util.concurrent.GenericFutureListener)
{
io.netty.channel.group.DefaultChannelGroupFuture v0;
io.netty.util.concurrent.GenericFutureListener v1;
v0 := @this: io.netty.channel.group.DefaultChannelGroupFuture;
v1 := @parameter0: io.netty.util.concurrent.GenericFutureListener;
specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise addListener(io.netty.util.concurrent.GenericFutureListener)>(v1);
return v0;
}
public transient io.netty.channel.group.DefaultChannelGroupFuture addListeners(io.netty.util.concurrent.GenericFutureListener[])
{
io.netty.channel.group.DefaultChannelGroupFuture v0;
io.netty.util.concurrent.GenericFutureListener[] v1;
v0 := @this: io.netty.channel.group.DefaultChannelGroupFuture;
v1 := @parameter0: io.netty.util.concurrent.GenericFutureListener[];
specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise addListeners(io.netty.util.concurrent.GenericFutureListener[])>(v1);
return v0;
}
public io.netty.channel.group.DefaultChannelGroupFuture removeListener(io.netty.util.concurrent.GenericFutureListener)
{
io.netty.channel.group.DefaultChannelGroupFuture v0;
io.netty.util.concurrent.GenericFutureListener v1;
v0 := @this: io.netty.channel.group.DefaultChannelGroupFuture;
v1 := @parameter0: io.netty.util.concurrent.GenericFutureListener;
specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise removeListener(io.netty.util.concurrent.GenericFutureListener)>(v1);
return v0;
}
public transient io.netty.channel.group.DefaultChannelGroupFuture removeListeners(io.netty.util.concurrent.GenericFutureListener[])
{
io.netty.channel.group.DefaultChannelGroupFuture v0;
io.netty.util.concurrent.GenericFutureListener[] v1;
v0 := @this: io.netty.channel.group.DefaultChannelGroupFuture;
v1 := @parameter0: io.netty.util.concurrent.GenericFutureListener[];
specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise removeListeners(io.netty.util.concurrent.GenericFutureListener[])>(v1);
return v0;
}
public io.netty.channel.group.DefaultChannelGroupFuture await() throws java.lang.InterruptedException
{
io.netty.channel.group.DefaultChannelGroupFuture v0;
v0 := @this: io.netty.channel.group.DefaultChannelGroupFuture;
specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise await()>();
return v0;
}
public io.netty.channel.group.DefaultChannelGroupFuture awaitUninterruptibly()
{
io.netty.channel.group.DefaultChannelGroupFuture v0;
v0 := @this: io.netty.channel.group.DefaultChannelGroupFuture;
specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise awaitUninterruptibly()>();
return v0;
}
public io.netty.channel.group.DefaultChannelGroupFuture syncUninterruptibly()
{
io.netty.channel.group.DefaultChannelGroupFuture v0;
v0 := @this: io.netty.channel.group.DefaultChannelGroupFuture;
specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise syncUninterruptibly()>();
return v0;
}
public io.netty.channel.group.DefaultChannelGroupFuture sync() throws java.lang.InterruptedException
{
io.netty.channel.group.DefaultChannelGroupFuture v0;
v0 := @this: io.netty.channel.group.DefaultChannelGroupFuture;
specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise sync()>();
return v0;
}
public io.netty.channel.group.ChannelGroupException cause()
{
java.lang.Throwable v1;
io.netty.channel.group.DefaultChannelGroupFuture v0;
v0 := @this: io.netty.channel.group.DefaultChannelGroupFuture;
v1 = specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: java.lang.Throwable cause()>();
return v1;
}
private void setSuccess0()
{
io.netty.channel.group.DefaultChannelGroupFuture v0;
v0 := @this: io.netty.channel.group.DefaultChannelGroupFuture;
specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise setSuccess(java.lang.Object)>(null);
return;
}
private void setFailure0(io.netty.channel.group.ChannelGroupException)
{
io.netty.channel.group.DefaultChannelGroupFuture v0;
io.netty.channel.group.ChannelGroupException v1;
v0 := @this: io.netty.channel.group.DefaultChannelGroupFuture;
v1 := @parameter0: io.netty.channel.group.ChannelGroupException;
specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>(v1);
return;
}
public io.netty.channel.group.DefaultChannelGroupFuture setSuccess(java.lang.Void)
{
io.netty.channel.group.DefaultChannelGroupFuture v0;
java.lang.IllegalStateException v2;
java.lang.Void v1;
v0 := @this: io.netty.channel.group.DefaultChannelGroupFuture;
v1 := @parameter0: java.lang.Void;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>()>();
throw v2;
}
public boolean trySuccess(java.lang.Void)
{
io.netty.channel.group.DefaultChannelGroupFuture v0;
java.lang.IllegalStateException v2;
java.lang.Void v1;
v0 := @this: io.netty.channel.group.DefaultChannelGroupFuture;
v1 := @parameter0: java.lang.Void;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>()>();
throw v2;
}
public io.netty.channel.group.DefaultChannelGroupFuture setFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
io.netty.channel.group.DefaultChannelGroupFuture v0;
java.lang.IllegalStateException v2;
v0 := @this: io.netty.channel.group.DefaultChannelGroupFuture;
v1 := @parameter0: java.lang.Throwable;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>()>();
throw v2;
}
public boolean tryFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
io.netty.channel.group.DefaultChannelGroupFuture v0;
java.lang.IllegalStateException v2;
v0 := @this: io.netty.channel.group.DefaultChannelGroupFuture;
v1 := @parameter0: java.lang.Throwable;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>()>();
throw v2;
}
protected void checkDeadLock()
{
io.netty.util.concurrent.EventExecutor v1;
io.netty.channel.group.DefaultChannelGroupFuture v0;
io.netty.util.concurrent.ImmediateEventExecutor v2;
io.netty.util.concurrent.BlockingOperationException v4;
boolean v3;
v0 := @this: io.netty.channel.group.DefaultChannelGroupFuture;
v1 = virtualinvoke v0.<io.netty.channel.group.DefaultChannelGroupFuture: io.netty.util.concurrent.EventExecutor executor()>();
if v1 == null goto label1;
v2 = <io.netty.util.concurrent.ImmediateEventExecutor: io.netty.util.concurrent.ImmediateEventExecutor INSTANCE>;
if v1 == v2 goto label1;
v3 = interfaceinvoke v1.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v3 == 0 goto label1;
v4 = new io.netty.util.concurrent.BlockingOperationException;
specialinvoke v4.<io.netty.util.concurrent.BlockingOperationException: void <init>()>();
throw v4;
label1:
return;
}
}