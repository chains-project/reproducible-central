final class io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe extends io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe
{
private final java.util.List readBuf;
static final boolean $assertionsDisabled;
final io.netty.channel.nio.AbstractNioMessageChannel this$0;
private void <init>(io.netty.channel.nio.AbstractNioMessageChannel)
{
io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe v0;
io.netty.channel.nio.AbstractNioMessageChannel v1;
java.util.ArrayList v2;
v0 := @this: io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe;
v1 := @parameter0: io.netty.channel.nio.AbstractNioMessageChannel;
v0.<io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe: io.netty.channel.nio.AbstractNioMessageChannel this$0> = v1;
specialinvoke v0.<io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe: void <init>(io.netty.channel.nio.AbstractNioChannel)>(v1);
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
v0.<io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe: java.util.List readBuf> = v2;
return;
}
public void read()
{
io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe v0;
io.netty.channel.ChannelPromise v32;
boolean v1, v13, v19, v31, v34, v35, v38, v39, v4;
io.netty.channel.ChannelPipeline v9;
io.netty.channel.nio.AbstractNioMessageChannel v10, v15, v18, v2, v24, v28, v29, v30, v33, v37, v6, v8;
java.util.List v16, v21, v25, v27;
java.lang.Throwable v14, v20, v36;
java.lang.AssertionError v5;
int v17, v22, v23;
io.netty.channel.nio.AbstractNioChannel$NioUnsafe v11;
io.netty.channel.RecvByteBufAllocator$Handle v12;
io.netty.channel.ChannelConfig v7;
io.netty.channel.nio.NioEventLoop v3;
java.lang.Object v26;
v0 := @this: io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe;
v1 = <io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe: boolean $assertionsDisabled>;
if v1 != 0 goto label01;
v2 = v0.<io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe: io.netty.channel.nio.AbstractNioMessageChannel this$0>;
v3 = virtualinvoke v2.<io.netty.channel.nio.AbstractNioMessageChannel: io.netty.channel.nio.NioEventLoop eventLoop()>();
v4 = virtualinvoke v3.<io.netty.channel.nio.NioEventLoop: boolean inEventLoop()>();
if v4 != 0 goto label01;
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label01:
v6 = v0.<io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe: io.netty.channel.nio.AbstractNioMessageChannel this$0>;
v7 = virtualinvoke v6.<io.netty.channel.nio.AbstractNioMessageChannel: io.netty.channel.ChannelConfig config()>();
v8 = v0.<io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe: io.netty.channel.nio.AbstractNioMessageChannel this$0>;
v9 = virtualinvoke v8.<io.netty.channel.nio.AbstractNioMessageChannel: io.netty.channel.ChannelPipeline pipeline()>();
v10 = v0.<io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe: io.netty.channel.nio.AbstractNioMessageChannel this$0>;
v11 = virtualinvoke v10.<io.netty.channel.nio.AbstractNioMessageChannel: io.netty.channel.nio.AbstractNioChannel$NioUnsafe unsafe()>();
v12 = interfaceinvoke v11.<io.netty.channel.nio.AbstractNioChannel$NioUnsafe: io.netty.channel.RecvByteBufAllocator$Handle recvBufAllocHandle()>();
interfaceinvoke v12.<io.netty.channel.RecvByteBufAllocator$Handle: void reset(io.netty.channel.ChannelConfig)>(v7);
v13 = 0;
v14 = null;
label02:
v15 = v0.<io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe: io.netty.channel.nio.AbstractNioMessageChannel this$0>;
v16 = v0.<io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe: java.util.List readBuf>;
v17 = virtualinvoke v15.<io.netty.channel.nio.AbstractNioMessageChannel: int doReadMessages(java.util.List)>(v16);
if v17 == 0 goto label06;
if v17 >= 0 goto label03;
v13 = 1;
goto label06;
label03:
interfaceinvoke v12.<io.netty.channel.RecvByteBufAllocator$Handle: void incMessagesRead(int)>(v17);
v18 = v0.<io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe: io.netty.channel.nio.AbstractNioMessageChannel this$0>;
v19 = virtualinvoke v18.<io.netty.channel.nio.AbstractNioMessageChannel: boolean continueReading(io.netty.channel.RecvByteBufAllocator$Handle)>(v12);
if v19 != 0 goto label02;
label04:
goto label06;
label05:
v20 := @caughtexception;
v14 = v20;
label06:
v21 = v0.<io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe: java.util.List readBuf>;
v22 = interfaceinvoke v21.<java.util.List: int size()>();
v23 = 0;
label07:
if v23 >= v22 goto label08;
v24 = v0.<io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe: io.netty.channel.nio.AbstractNioMessageChannel this$0>;
v24.<io.netty.channel.nio.AbstractNioMessageChannel: boolean readPending> = 0;
v25 = v0.<io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe: java.util.List readBuf>;
v26 = interfaceinvoke v25.<java.util.List: java.lang.Object get(int)>(v23);
interfaceinvoke v9.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireChannelRead(java.lang.Object)>(v26);
v23 = v23 + 1;
goto label07;
label08:
v27 = v0.<io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe: java.util.List readBuf>;
interfaceinvoke v27.<java.util.List: void clear()>();
interfaceinvoke v12.<io.netty.channel.RecvByteBufAllocator$Handle: void readComplete()>();
interfaceinvoke v9.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireChannelReadComplete()>();
if v14 == null goto label09;
v28 = v0.<io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe: io.netty.channel.nio.AbstractNioMessageChannel this$0>;
v13 = virtualinvoke v28.<io.netty.channel.nio.AbstractNioMessageChannel: boolean closeOnReadError(java.lang.Throwable)>(v14);
interfaceinvoke v9.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireExceptionCaught(java.lang.Throwable)>(v14);
label09:
if v13 == 0 goto label10;
v29 = v0.<io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe: io.netty.channel.nio.AbstractNioMessageChannel this$0>;
v29.<io.netty.channel.nio.AbstractNioMessageChannel: boolean inputShutdown> = 1;
v30 = v0.<io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe: io.netty.channel.nio.AbstractNioMessageChannel this$0>;
v31 = virtualinvoke v30.<io.netty.channel.nio.AbstractNioMessageChannel: boolean isOpen()>();
if v31 == 0 goto label10;
v32 = virtualinvoke v0.<io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe: io.netty.channel.ChannelPromise voidPromise()>();
virtualinvoke v0.<io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe: void close(io.netty.channel.ChannelPromise)>(v32);
label10:
v33 = v0.<io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe: io.netty.channel.nio.AbstractNioMessageChannel this$0>;
v34 = v33.<io.netty.channel.nio.AbstractNioMessageChannel: boolean readPending>;
if v34 != 0 goto label13;
v35 = interfaceinvoke v7.<io.netty.channel.ChannelConfig: boolean isAutoRead()>();
if v35 != 0 goto label13;
virtualinvoke v0.<io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe: void removeReadOp()>();
goto label13;
label11:
v36 := @caughtexception;
v37 = v0.<io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe: io.netty.channel.nio.AbstractNioMessageChannel this$0>;
v38 = v37.<io.netty.channel.nio.AbstractNioMessageChannel: boolean readPending>;
if v38 != 0 goto label12;
v39 = interfaceinvoke v7.<io.netty.channel.ChannelConfig: boolean isAutoRead()>();
if v39 != 0 goto label12;
virtualinvoke v0.<io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe: void removeReadOp()>();
label12:
throw v36;
label13:
return;
catch java.lang.Throwable from label02 to label04 with label05;
catch java.lang.Throwable from label02 to label10 with label11;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/channel/nio/AbstractNioMessageChannel;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe: boolean $assertionsDisabled> = v2;
return;
}
}