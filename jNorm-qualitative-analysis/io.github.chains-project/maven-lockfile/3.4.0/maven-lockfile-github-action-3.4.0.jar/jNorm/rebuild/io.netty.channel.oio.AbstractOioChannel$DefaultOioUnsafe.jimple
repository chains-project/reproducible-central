final class io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe extends io.netty.channel.AbstractChannel$AbstractUnsafe
{
final io.netty.channel.oio.AbstractOioChannel this$0;
private void <init>(io.netty.channel.oio.AbstractOioChannel)
{
io.netty.channel.oio.AbstractOioChannel v1;
io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe v0;
v0 := @this: io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe;
v1 := @parameter0: io.netty.channel.oio.AbstractOioChannel;
v0.<io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe: io.netty.channel.oio.AbstractOioChannel this$0> = v1;
specialinvoke v0.<io.netty.channel.AbstractChannel$AbstractUnsafe: void <init>(io.netty.channel.AbstractChannel)>(v1);
return;
}
public void connect(java.net.SocketAddress, java.net.SocketAddress, io.netty.channel.ChannelPromise)
{
java.lang.Throwable v13, v14;
java.net.SocketAddress v1, v2;
io.netty.channel.oio.AbstractOioChannel v11, v6, v8, v9;
io.netty.channel.ChannelPipeline v12;
io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe v0;
io.netty.channel.ChannelPromise v3;
boolean v10, v4, v5, v7;
v0 := @this: io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe;
v1 := @parameter0: java.net.SocketAddress;
v2 := @parameter1: java.net.SocketAddress;
v3 := @parameter2: io.netty.channel.ChannelPromise;
v4 = interfaceinvoke v3.<io.netty.channel.ChannelPromise: boolean setUncancellable()>();
if v4 == 0 goto label1;
v5 = virtualinvoke v0.<io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe: boolean ensureOpen(io.netty.channel.ChannelPromise)>(v3);
if v5 != 0 goto label2;
label1:
return;
label2:
v6 = v0.<io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe: io.netty.channel.oio.AbstractOioChannel this$0>;
v7 = virtualinvoke v6.<io.netty.channel.oio.AbstractOioChannel: boolean isActive()>();
v8 = v0.<io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe: io.netty.channel.oio.AbstractOioChannel this$0>;
virtualinvoke v8.<io.netty.channel.oio.AbstractOioChannel: void doConnect(java.net.SocketAddress,java.net.SocketAddress)>(v1, v2);
v9 = v0.<io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe: io.netty.channel.oio.AbstractOioChannel this$0>;
v10 = virtualinvoke v9.<io.netty.channel.oio.AbstractOioChannel: boolean isActive()>();
virtualinvoke v0.<io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe: void safeSetSuccess(io.netty.channel.ChannelPromise)>(v3);
if v7 != 0 goto label5;
if v10 == 0 goto label5;
v11 = v0.<io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe: io.netty.channel.oio.AbstractOioChannel this$0>;
v12 = virtualinvoke v11.<io.netty.channel.oio.AbstractOioChannel: io.netty.channel.ChannelPipeline pipeline()>();
interfaceinvoke v12.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireChannelActive()>();
label3:
goto label5;
label4:
v13 := @caughtexception;
v14 = virtualinvoke v0.<io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe: java.lang.Throwable annotateConnectException(java.lang.Throwable,java.net.SocketAddress)>(v13, v1);
virtualinvoke v0.<io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe: void safeSetFailure(io.netty.channel.ChannelPromise,java.lang.Throwable)>(v3, v14);
virtualinvoke v0.<io.netty.channel.oio.AbstractOioChannel$DefaultOioUnsafe: void closeIfClosed()>();
label5:
return;
catch java.lang.Throwable from label2 to label3 with label4;
}
}