abstract class io.netty.channel.pool.FixedChannelPool$TimeoutTask extends java.lang.Object implements java.lang.Runnable
{
static final boolean $assertionsDisabled;
final io.netty.channel.pool.FixedChannelPool this$0;
private void <init>(io.netty.channel.pool.FixedChannelPool)
{
io.netty.channel.pool.FixedChannelPool$TimeoutTask v0;
io.netty.channel.pool.FixedChannelPool v1;
v0 := @this: io.netty.channel.pool.FixedChannelPool$TimeoutTask;
v1 := @parameter0: io.netty.channel.pool.FixedChannelPool;
v0.<io.netty.channel.pool.FixedChannelPool$TimeoutTask: io.netty.channel.pool.FixedChannelPool this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public final void run()
{
io.netty.util.concurrent.EventExecutor v3;
long v10, v11, v6;
java.lang.AssertionError v5;
byte v12;
io.netty.channel.pool.FixedChannelPool v13, v15, v2, v7;
io.netty.channel.pool.FixedChannelPool$TimeoutTask v0;
boolean v1, v4;
java.lang.Object v9;
java.util.Queue v14, v8;
v0 := @this: io.netty.channel.pool.FixedChannelPool$TimeoutTask;
v1 = <io.netty.channel.pool.FixedChannelPool$TimeoutTask: boolean $assertionsDisabled>;
if v1 != 0 goto label1;
v2 = v0.<io.netty.channel.pool.FixedChannelPool$TimeoutTask: io.netty.channel.pool.FixedChannelPool this$0>;
v3 = v2.<io.netty.channel.pool.FixedChannelPool: io.netty.util.concurrent.EventExecutor executor>;
v4 = interfaceinvoke v3.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v4 != 0 goto label1;
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label1:
v6 = staticinvoke <java.lang.System: long nanoTime()>();
label2:
v7 = v0.<io.netty.channel.pool.FixedChannelPool$TimeoutTask: io.netty.channel.pool.FixedChannelPool this$0>;
v8 = v7.<io.netty.channel.pool.FixedChannelPool: java.util.Queue pendingAcquireQueue>;
v9 = interfaceinvoke v8.<java.util.Queue: java.lang.Object peek()>();
if v9 == null goto label3;
v10 = v9.<io.netty.channel.pool.FixedChannelPool$AcquireTask: long expireNanoTime>;
v11 = v6 - v10;
v12 = v11 cmp 0L;
if v12 < 0 goto label3;
v13 = v0.<io.netty.channel.pool.FixedChannelPool$TimeoutTask: io.netty.channel.pool.FixedChannelPool this$0>;
v14 = v13.<io.netty.channel.pool.FixedChannelPool: java.util.Queue pendingAcquireQueue>;
interfaceinvoke v14.<java.util.Queue: java.lang.Object remove()>();
v15 = v0.<io.netty.channel.pool.FixedChannelPool$TimeoutTask: io.netty.channel.pool.FixedChannelPool this$0>;
staticinvoke <io.netty.channel.pool.FixedChannelPool: int access$906(io.netty.channel.pool.FixedChannelPool)>(v15);
virtualinvoke v0.<io.netty.channel.pool.FixedChannelPool$TimeoutTask: void onTimeout(io.netty.channel.pool.FixedChannelPool$AcquireTask)>(v9);
goto label2;
label3:
return;
}
public abstract void onTimeout(io.netty.channel.pool.FixedChannelPool$AcquireTask);
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/channel/pool/FixedChannelPool;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.channel.pool.FixedChannelPool$TimeoutTask: boolean $assertionsDisabled> = v2;
return;
}
}