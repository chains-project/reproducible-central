public class io.netty.channel.socket.DefaultSocketChannelConfig extends io.netty.channel.DefaultChannelConfig implements io.netty.channel.socket.SocketChannelConfig
{
protected final java.net.Socket javaSocket;
private volatile boolean allowHalfClosure;
public void <init>(io.netty.channel.socket.SocketChannel, java.net.Socket)
{
java.net.Socket v2;
io.netty.channel.socket.DefaultSocketChannelConfig v0;
java.lang.Object v3;
io.netty.channel.socket.SocketChannel v1;
java.lang.Exception v5;
boolean v4;
v0 := @this: io.netty.channel.socket.DefaultSocketChannelConfig;
v1 := @parameter0: io.netty.channel.socket.SocketChannel;
v2 := @parameter1: java.net.Socket;
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: void <init>(io.netty.channel.Channel)>(v1);
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "javaSocket");
v0.<io.netty.channel.socket.DefaultSocketChannelConfig: java.net.Socket javaSocket> = v3;
v4 = staticinvoke <io.netty.util.internal.PlatformDependent: boolean canEnableTcpNoDelayByDefault()>();
if v4 == 0 goto label4;
label1:
virtualinvoke v0.<io.netty.channel.socket.DefaultSocketChannelConfig: io.netty.channel.socket.SocketChannelConfig setTcpNoDelay(boolean)>(1);
label2:
goto label4;
label3:
v5 := @caughtexception;
label4:
return;
catch java.lang.Exception from label1 to label2 with label3;
}
public java.util.Map getOptions()
{
io.netty.channel.ChannelOption v10, v3, v4, v5, v6, v7, v8, v9;
io.netty.channel.ChannelOption[] v2;
io.netty.channel.socket.DefaultSocketChannelConfig v0;
java.util.Map v1, v11;
v0 := @this: io.netty.channel.socket.DefaultSocketChannelConfig;
v1 = specialinvoke v0.<io.netty.channel.DefaultChannelConfig: java.util.Map getOptions()>();
v2 = newarray (io.netty.channel.ChannelOption)[8];
v3 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_RCVBUF>;
v2[0] = v3;
v4 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_SNDBUF>;
v2[1] = v4;
v5 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption TCP_NODELAY>;
v2[2] = v5;
v6 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_KEEPALIVE>;
v2[3] = v6;
v7 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_REUSEADDR>;
v2[4] = v7;
v8 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_LINGER>;
v2[5] = v8;
v9 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption IP_TOS>;
v2[6] = v9;
v10 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption ALLOW_HALF_CLOSURE>;
v2[7] = v10;
v11 = virtualinvoke v0.<io.netty.channel.socket.DefaultSocketChannelConfig: java.util.Map getOptions(java.util.Map,io.netty.channel.ChannelOption[])>(v1, v2);
return v11;
}
public java.lang.Object getOption(io.netty.channel.ChannelOption)
{
io.netty.channel.ChannelOption v1, v11, v14, v17, v2, v20, v23, v5, v8;
java.lang.Integer v19, v22, v4, v7;
io.netty.channel.socket.DefaultSocketChannelConfig v0;
int v18, v21, v3, v6;
java.lang.Boolean v10, v13, v16, v25;
boolean v12, v15, v24, v9;
java.lang.Object v26;
v0 := @this: io.netty.channel.socket.DefaultSocketChannelConfig;
v1 := @parameter0: io.netty.channel.ChannelOption;
v2 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_RCVBUF>;
if v1 != v2 goto label1;
v3 = virtualinvoke v0.<io.netty.channel.socket.DefaultSocketChannelConfig: int getReceiveBufferSize()>();
v4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v3);
return v4;
label1:
v5 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_SNDBUF>;
if v1 != v5 goto label2;
v6 = virtualinvoke v0.<io.netty.channel.socket.DefaultSocketChannelConfig: int getSendBufferSize()>();
v7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v6);
return v7;
label2:
v8 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption TCP_NODELAY>;
if v1 != v8 goto label3;
v9 = virtualinvoke v0.<io.netty.channel.socket.DefaultSocketChannelConfig: boolean isTcpNoDelay()>();
v10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v9);
return v10;
label3:
v11 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_KEEPALIVE>;
if v1 != v11 goto label4;
v12 = virtualinvoke v0.<io.netty.channel.socket.DefaultSocketChannelConfig: boolean isKeepAlive()>();
v13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v12);
return v13;
label4:
v14 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_REUSEADDR>;
if v1 != v14 goto label5;
v15 = virtualinvoke v0.<io.netty.channel.socket.DefaultSocketChannelConfig: boolean isReuseAddress()>();
v16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v15);
return v16;
label5:
v17 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_LINGER>;
if v1 != v17 goto label6;
v18 = virtualinvoke v0.<io.netty.channel.socket.DefaultSocketChannelConfig: int getSoLinger()>();
v19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v18);
return v19;
label6:
v20 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption IP_TOS>;
if v1 != v20 goto label7;
v21 = virtualinvoke v0.<io.netty.channel.socket.DefaultSocketChannelConfig: int getTrafficClass()>();
v22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v21);
return v22;
label7:
v23 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption ALLOW_HALF_CLOSURE>;
if v1 != v23 goto label8;
v24 = virtualinvoke v0.<io.netty.channel.socket.DefaultSocketChannelConfig: boolean isAllowHalfClosure()>();
v25 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v24);
return v25;
label8:
v26 = specialinvoke v0.<io.netty.channel.DefaultChannelConfig: java.lang.Object getOption(io.netty.channel.ChannelOption)>(v1);
return v26;
}
public boolean setOption(io.netty.channel.ChannelOption, java.lang.Object)
{
io.netty.channel.ChannelOption v1, v11, v13, v15, v17, v3, v5, v7, v9;
io.netty.channel.socket.DefaultSocketChannelConfig v0;
int v14, v16, v4, v6;
boolean v10, v12, v18, v19, v8;
java.lang.Object v2;
v0 := @this: io.netty.channel.socket.DefaultSocketChannelConfig;
v1 := @parameter0: io.netty.channel.ChannelOption;
v2 := @parameter1: java.lang.Object;
virtualinvoke v0.<io.netty.channel.socket.DefaultSocketChannelConfig: void validate(io.netty.channel.ChannelOption,java.lang.Object)>(v1, v2);
v3 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_RCVBUF>;
if v1 != v3 goto label1;
v4 = virtualinvoke v2.<java.lang.Integer: int intValue()>();
virtualinvoke v0.<io.netty.channel.socket.DefaultSocketChannelConfig: io.netty.channel.socket.SocketChannelConfig setReceiveBufferSize(int)>(v4);
goto label9;
label1:
v5 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_SNDBUF>;
if v1 != v5 goto label2;
v6 = virtualinvoke v2.<java.lang.Integer: int intValue()>();
virtualinvoke v0.<io.netty.channel.socket.DefaultSocketChannelConfig: io.netty.channel.socket.SocketChannelConfig setSendBufferSize(int)>(v6);
goto label9;
label2:
v7 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption TCP_NODELAY>;
if v1 != v7 goto label3;
v8 = virtualinvoke v2.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v0.<io.netty.channel.socket.DefaultSocketChannelConfig: io.netty.channel.socket.SocketChannelConfig setTcpNoDelay(boolean)>(v8);
goto label9;
label3:
v9 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_KEEPALIVE>;
if v1 != v9 goto label4;
v10 = virtualinvoke v2.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v0.<io.netty.channel.socket.DefaultSocketChannelConfig: io.netty.channel.socket.SocketChannelConfig setKeepAlive(boolean)>(v10);
goto label9;
label4:
v11 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_REUSEADDR>;
if v1 != v11 goto label5;
v12 = virtualinvoke v2.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v0.<io.netty.channel.socket.DefaultSocketChannelConfig: io.netty.channel.socket.SocketChannelConfig setReuseAddress(boolean)>(v12);
goto label9;
label5:
v13 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_LINGER>;
if v1 != v13 goto label6;
v14 = virtualinvoke v2.<java.lang.Integer: int intValue()>();
virtualinvoke v0.<io.netty.channel.socket.DefaultSocketChannelConfig: io.netty.channel.socket.SocketChannelConfig setSoLinger(int)>(v14);
goto label9;
label6:
v15 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption IP_TOS>;
if v1 != v15 goto label7;
v16 = virtualinvoke v2.<java.lang.Integer: int intValue()>();
virtualinvoke v0.<io.netty.channel.socket.DefaultSocketChannelConfig: io.netty.channel.socket.SocketChannelConfig setTrafficClass(int)>(v16);
goto label9;
label7:
v17 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption ALLOW_HALF_CLOSURE>;
if v1 != v17 goto label8;
v18 = virtualinvoke v2.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v0.<io.netty.channel.socket.DefaultSocketChannelConfig: io.netty.channel.socket.SocketChannelConfig setAllowHalfClosure(boolean)>(v18);
goto label9;
label8:
v19 = specialinvoke v0.<io.netty.channel.DefaultChannelConfig: boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)>(v1, v2);
return v19;
label9:
return 1;
}
public int getReceiveBufferSize()
{
io.netty.channel.ChannelException v4;
java.net.Socket v1;
java.net.SocketException v3;
io.netty.channel.socket.DefaultSocketChannelConfig v0;
int v2;
v0 := @this: io.netty.channel.socket.DefaultSocketChannelConfig;
label1:
v1 = v0.<io.netty.channel.socket.DefaultSocketChannelConfig: java.net.Socket javaSocket>;
v2 = virtualinvoke v1.<java.net.Socket: int getReceiveBufferSize()>();
label2:
return v2;
label3:
v3 := @caughtexception;
v4 = new io.netty.channel.ChannelException;
specialinvoke v4.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v3);
throw v4;
catch java.net.SocketException from label1 to label2 with label3;
}
public int getSendBufferSize()
{
io.netty.channel.ChannelException v4;
java.net.Socket v1;
java.net.SocketException v3;
io.netty.channel.socket.DefaultSocketChannelConfig v0;
int v2;
v0 := @this: io.netty.channel.socket.DefaultSocketChannelConfig;
label1:
v1 = v0.<io.netty.channel.socket.DefaultSocketChannelConfig: java.net.Socket javaSocket>;
v2 = virtualinvoke v1.<java.net.Socket: int getSendBufferSize()>();
label2:
return v2;
label3:
v3 := @caughtexception;
v4 = new io.netty.channel.ChannelException;
specialinvoke v4.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v3);
throw v4;
catch java.net.SocketException from label1 to label2 with label3;
}
public int getSoLinger()
{
io.netty.channel.ChannelException v4;
java.net.Socket v1;
java.net.SocketException v3;
io.netty.channel.socket.DefaultSocketChannelConfig v0;
int v2;
v0 := @this: io.netty.channel.socket.DefaultSocketChannelConfig;
label1:
v1 = v0.<io.netty.channel.socket.DefaultSocketChannelConfig: java.net.Socket javaSocket>;
v2 = virtualinvoke v1.<java.net.Socket: int getSoLinger()>();
label2:
return v2;
label3:
v3 := @caughtexception;
v4 = new io.netty.channel.ChannelException;
specialinvoke v4.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v3);
throw v4;
catch java.net.SocketException from label1 to label2 with label3;
}
public int getTrafficClass()
{
io.netty.channel.ChannelException v4;
java.net.Socket v1;
java.net.SocketException v3;
io.netty.channel.socket.DefaultSocketChannelConfig v0;
int v2;
v0 := @this: io.netty.channel.socket.DefaultSocketChannelConfig;
label1:
v1 = v0.<io.netty.channel.socket.DefaultSocketChannelConfig: java.net.Socket javaSocket>;
v2 = virtualinvoke v1.<java.net.Socket: int getTrafficClass()>();
label2:
return v2;
label3:
v3 := @caughtexception;
v4 = new io.netty.channel.ChannelException;
specialinvoke v4.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v3);
throw v4;
catch java.net.SocketException from label1 to label2 with label3;
}
public boolean isKeepAlive()
{
io.netty.channel.ChannelException v4;
java.net.Socket v1;
java.net.SocketException v3;
io.netty.channel.socket.DefaultSocketChannelConfig v0;
boolean v2;
v0 := @this: io.netty.channel.socket.DefaultSocketChannelConfig;
label1:
v1 = v0.<io.netty.channel.socket.DefaultSocketChannelConfig: java.net.Socket javaSocket>;
v2 = virtualinvoke v1.<java.net.Socket: boolean getKeepAlive()>();
label2:
return v2;
label3:
v3 := @caughtexception;
v4 = new io.netty.channel.ChannelException;
specialinvoke v4.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v3);
throw v4;
catch java.net.SocketException from label1 to label2 with label3;
}
public boolean isReuseAddress()
{
io.netty.channel.ChannelException v4;
java.net.Socket v1;
java.net.SocketException v3;
io.netty.channel.socket.DefaultSocketChannelConfig v0;
boolean v2;
v0 := @this: io.netty.channel.socket.DefaultSocketChannelConfig;
label1:
v1 = v0.<io.netty.channel.socket.DefaultSocketChannelConfig: java.net.Socket javaSocket>;
v2 = virtualinvoke v1.<java.net.Socket: boolean getReuseAddress()>();
label2:
return v2;
label3:
v3 := @caughtexception;
v4 = new io.netty.channel.ChannelException;
specialinvoke v4.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v3);
throw v4;
catch java.net.SocketException from label1 to label2 with label3;
}
public boolean isTcpNoDelay()
{
io.netty.channel.ChannelException v4;
java.net.Socket v1;
java.net.SocketException v3;
io.netty.channel.socket.DefaultSocketChannelConfig v0;
boolean v2;
v0 := @this: io.netty.channel.socket.DefaultSocketChannelConfig;
label1:
v1 = v0.<io.netty.channel.socket.DefaultSocketChannelConfig: java.net.Socket javaSocket>;
v2 = virtualinvoke v1.<java.net.Socket: boolean getTcpNoDelay()>();
label2:
return v2;
label3:
v3 := @caughtexception;
v4 = new io.netty.channel.ChannelException;
specialinvoke v4.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v3);
throw v4;
catch java.net.SocketException from label1 to label2 with label3;
}
public io.netty.channel.socket.SocketChannelConfig setKeepAlive(boolean)
{
io.netty.channel.ChannelException v4;
java.net.Socket v2;
java.net.SocketException v3;
io.netty.channel.socket.DefaultSocketChannelConfig v0;
boolean v1;
v0 := @this: io.netty.channel.socket.DefaultSocketChannelConfig;
v1 := @parameter0: boolean;
label1:
v2 = v0.<io.netty.channel.socket.DefaultSocketChannelConfig: java.net.Socket javaSocket>;
virtualinvoke v2.<java.net.Socket: void setKeepAlive(boolean)>(v1);
label2:
goto label4;
label3:
v3 := @caughtexception;
v4 = new io.netty.channel.ChannelException;
specialinvoke v4.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v3);
throw v4;
label4:
return v0;
catch java.net.SocketException from label1 to label2 with label3;
}
public io.netty.channel.socket.SocketChannelConfig setPerformancePreferences(int, int, int)
{
java.net.Socket v4;
io.netty.channel.socket.DefaultSocketChannelConfig v0;
int v1, v2, v3;
v0 := @this: io.netty.channel.socket.DefaultSocketChannelConfig;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<io.netty.channel.socket.DefaultSocketChannelConfig: java.net.Socket javaSocket>;
virtualinvoke v4.<java.net.Socket: void setPerformancePreferences(int,int,int)>(v1, v2, v3);
return v0;
}
public io.netty.channel.socket.SocketChannelConfig setReceiveBufferSize(int)
{
io.netty.channel.ChannelException v4;
java.net.Socket v2;
java.net.SocketException v3;
io.netty.channel.socket.DefaultSocketChannelConfig v0;
int v1;
v0 := @this: io.netty.channel.socket.DefaultSocketChannelConfig;
v1 := @parameter0: int;
label1:
v2 = v0.<io.netty.channel.socket.DefaultSocketChannelConfig: java.net.Socket javaSocket>;
virtualinvoke v2.<java.net.Socket: void setReceiveBufferSize(int)>(v1);
label2:
goto label4;
label3:
v3 := @caughtexception;
v4 = new io.netty.channel.ChannelException;
specialinvoke v4.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v3);
throw v4;
label4:
return v0;
catch java.net.SocketException from label1 to label2 with label3;
}
public io.netty.channel.socket.SocketChannelConfig setReuseAddress(boolean)
{
io.netty.channel.ChannelException v4;
java.net.Socket v2;
java.net.SocketException v3;
io.netty.channel.socket.DefaultSocketChannelConfig v0;
boolean v1;
v0 := @this: io.netty.channel.socket.DefaultSocketChannelConfig;
v1 := @parameter0: boolean;
label1:
v2 = v0.<io.netty.channel.socket.DefaultSocketChannelConfig: java.net.Socket javaSocket>;
virtualinvoke v2.<java.net.Socket: void setReuseAddress(boolean)>(v1);
label2:
goto label4;
label3:
v3 := @caughtexception;
v4 = new io.netty.channel.ChannelException;
specialinvoke v4.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v3);
throw v4;
label4:
return v0;
catch java.net.SocketException from label1 to label2 with label3;
}
public io.netty.channel.socket.SocketChannelConfig setSendBufferSize(int)
{
io.netty.channel.ChannelException v4;
java.net.Socket v2;
java.net.SocketException v3;
io.netty.channel.socket.DefaultSocketChannelConfig v0;
int v1;
v0 := @this: io.netty.channel.socket.DefaultSocketChannelConfig;
v1 := @parameter0: int;
label1:
v2 = v0.<io.netty.channel.socket.DefaultSocketChannelConfig: java.net.Socket javaSocket>;
virtualinvoke v2.<java.net.Socket: void setSendBufferSize(int)>(v1);
label2:
goto label4;
label3:
v3 := @caughtexception;
v4 = new io.netty.channel.ChannelException;
specialinvoke v4.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v3);
throw v4;
label4:
return v0;
catch java.net.SocketException from label1 to label2 with label3;
}
public io.netty.channel.socket.SocketChannelConfig setSoLinger(int)
{
io.netty.channel.ChannelException v5;
java.net.Socket v2, v3;
java.net.SocketException v4;
io.netty.channel.socket.DefaultSocketChannelConfig v0;
int v1;
v0 := @this: io.netty.channel.socket.DefaultSocketChannelConfig;
v1 := @parameter0: int;
label1:
if v1 >= 0 goto label2;
v2 = v0.<io.netty.channel.socket.DefaultSocketChannelConfig: java.net.Socket javaSocket>;
virtualinvoke v2.<java.net.Socket: void setSoLinger(boolean,int)>(0, 0);
goto label5;
label2:
v3 = v0.<io.netty.channel.socket.DefaultSocketChannelConfig: java.net.Socket javaSocket>;
virtualinvoke v3.<java.net.Socket: void setSoLinger(boolean,int)>(1, v1);
label3:
goto label5;
label4:
v4 := @caughtexception;
v5 = new io.netty.channel.ChannelException;
specialinvoke v5.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v4);
throw v5;
label5:
return v0;
catch java.net.SocketException from label1 to label3 with label4;
}
public io.netty.channel.socket.SocketChannelConfig setTcpNoDelay(boolean)
{
io.netty.channel.ChannelException v4;
java.net.Socket v2;
java.net.SocketException v3;
io.netty.channel.socket.DefaultSocketChannelConfig v0;
boolean v1;
v0 := @this: io.netty.channel.socket.DefaultSocketChannelConfig;
v1 := @parameter0: boolean;
label1:
v2 = v0.<io.netty.channel.socket.DefaultSocketChannelConfig: java.net.Socket javaSocket>;
virtualinvoke v2.<java.net.Socket: void setTcpNoDelay(boolean)>(v1);
label2:
goto label4;
label3:
v3 := @caughtexception;
v4 = new io.netty.channel.ChannelException;
specialinvoke v4.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v3);
throw v4;
label4:
return v0;
catch java.net.SocketException from label1 to label2 with label3;
}
public io.netty.channel.socket.SocketChannelConfig setTrafficClass(int)
{
io.netty.channel.ChannelException v4;
java.net.Socket v2;
java.net.SocketException v3;
io.netty.channel.socket.DefaultSocketChannelConfig v0;
int v1;
v0 := @this: io.netty.channel.socket.DefaultSocketChannelConfig;
v1 := @parameter0: int;
label1:
v2 = v0.<io.netty.channel.socket.DefaultSocketChannelConfig: java.net.Socket javaSocket>;
virtualinvoke v2.<java.net.Socket: void setTrafficClass(int)>(v1);
label2:
goto label4;
label3:
v3 := @caughtexception;
v4 = new io.netty.channel.ChannelException;
specialinvoke v4.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v3);
throw v4;
label4:
return v0;
catch java.net.SocketException from label1 to label2 with label3;
}
public boolean isAllowHalfClosure()
{
io.netty.channel.socket.DefaultSocketChannelConfig v0;
boolean v1;
v0 := @this: io.netty.channel.socket.DefaultSocketChannelConfig;
v1 = v0.<io.netty.channel.socket.DefaultSocketChannelConfig: boolean allowHalfClosure>;
return v1;
}
public io.netty.channel.socket.SocketChannelConfig setAllowHalfClosure(boolean)
{
io.netty.channel.socket.DefaultSocketChannelConfig v0;
boolean v1;
v0 := @this: io.netty.channel.socket.DefaultSocketChannelConfig;
v1 := @parameter0: boolean;
v0.<io.netty.channel.socket.DefaultSocketChannelConfig: boolean allowHalfClosure> = v1;
return v0;
}
public io.netty.channel.socket.SocketChannelConfig setConnectTimeoutMillis(int)
{
int v1;
io.netty.channel.socket.DefaultSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultSocketChannelConfig;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setConnectTimeoutMillis(int)>(v1);
return v0;
}
public io.netty.channel.socket.SocketChannelConfig setMaxMessagesPerRead(int)
{
int v1;
io.netty.channel.socket.DefaultSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultSocketChannelConfig;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setMaxMessagesPerRead(int)>(v1);
return v0;
}
public io.netty.channel.socket.SocketChannelConfig setWriteSpinCount(int)
{
int v1;
io.netty.channel.socket.DefaultSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultSocketChannelConfig;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setWriteSpinCount(int)>(v1);
return v0;
}
public io.netty.channel.socket.SocketChannelConfig setAllocator(io.netty.buffer.ByteBufAllocator)
{
io.netty.channel.socket.DefaultSocketChannelConfig v0;
io.netty.buffer.ByteBufAllocator v1;
v0 := @this: io.netty.channel.socket.DefaultSocketChannelConfig;
v1 := @parameter0: io.netty.buffer.ByteBufAllocator;
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setAllocator(io.netty.buffer.ByteBufAllocator)>(v1);
return v0;
}
public io.netty.channel.socket.SocketChannelConfig setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator)
{
io.netty.channel.RecvByteBufAllocator v1;
io.netty.channel.socket.DefaultSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultSocketChannelConfig;
v1 := @parameter0: io.netty.channel.RecvByteBufAllocator;
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator)>(v1);
return v0;
}
public io.netty.channel.socket.SocketChannelConfig setAutoRead(boolean)
{
io.netty.channel.socket.DefaultSocketChannelConfig v0;
boolean v1;
v0 := @this: io.netty.channel.socket.DefaultSocketChannelConfig;
v1 := @parameter0: boolean;
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setAutoRead(boolean)>(v1);
return v0;
}
public io.netty.channel.socket.SocketChannelConfig setAutoClose(boolean)
{
io.netty.channel.socket.DefaultSocketChannelConfig v0;
boolean v1;
v0 := @this: io.netty.channel.socket.DefaultSocketChannelConfig;
v1 := @parameter0: boolean;
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setAutoClose(boolean)>(v1);
return v0;
}
public io.netty.channel.socket.SocketChannelConfig setWriteBufferHighWaterMark(int)
{
int v1;
io.netty.channel.socket.DefaultSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultSocketChannelConfig;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setWriteBufferHighWaterMark(int)>(v1);
return v0;
}
public io.netty.channel.socket.SocketChannelConfig setWriteBufferLowWaterMark(int)
{
int v1;
io.netty.channel.socket.DefaultSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultSocketChannelConfig;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setWriteBufferLowWaterMark(int)>(v1);
return v0;
}
public io.netty.channel.socket.SocketChannelConfig setWriteBufferWaterMark(io.netty.channel.WriteBufferWaterMark)
{
io.netty.channel.WriteBufferWaterMark v1;
io.netty.channel.socket.DefaultSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultSocketChannelConfig;
v1 := @parameter0: io.netty.channel.WriteBufferWaterMark;
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setWriteBufferWaterMark(io.netty.channel.WriteBufferWaterMark)>(v1);
return v0;
}
public io.netty.channel.socket.SocketChannelConfig setMessageSizeEstimator(io.netty.channel.MessageSizeEstimator)
{
io.netty.channel.MessageSizeEstimator v1;
io.netty.channel.socket.DefaultSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultSocketChannelConfig;
v1 := @parameter0: io.netty.channel.MessageSizeEstimator;
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setMessageSizeEstimator(io.netty.channel.MessageSizeEstimator)>(v1);
return v0;
}
}