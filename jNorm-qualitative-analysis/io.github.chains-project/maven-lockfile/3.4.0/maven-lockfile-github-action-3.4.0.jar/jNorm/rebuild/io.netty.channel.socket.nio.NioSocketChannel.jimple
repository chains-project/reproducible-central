public class io.netty.channel.socket.nio.NioSocketChannel extends io.netty.channel.nio.AbstractNioByteChannel implements io.netty.channel.socket.SocketChannel
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private static final java.nio.channels.spi.SelectorProvider DEFAULT_SELECTOR_PROVIDER;
private static final java.lang.reflect.Method OPEN_SOCKET_CHANNEL_WITH_FAMILY;
private final io.netty.channel.socket.SocketChannelConfig config;
private static java.nio.channels.SocketChannel newChannel(java.nio.channels.spi.SelectorProvider, io.netty.channel.socket.InternetProtocolFamily)
{
io.netty.channel.ChannelException v6;
java.nio.channels.spi.SelectorProvider v0;
java.nio.channels.SocketChannel v4;
io.netty.channel.socket.InternetProtocolFamily v1;
java.io.IOException v5;
java.lang.reflect.Method v2;
java.nio.channels.Channel v3;
v0 := @parameter0: java.nio.channels.spi.SelectorProvider;
v1 := @parameter1: io.netty.channel.socket.InternetProtocolFamily;
label1:
v2 = <io.netty.channel.socket.nio.NioSocketChannel: java.lang.reflect.Method OPEN_SOCKET_CHANNEL_WITH_FAMILY>;
v3 = staticinvoke <io.netty.channel.socket.nio.SelectorProviderUtil: java.nio.channels.Channel newChannel(java.lang.reflect.Method,java.nio.channels.spi.SelectorProvider,io.netty.channel.socket.InternetProtocolFamily)>(v2, v0, v1);
if v3 != null goto label2;
v4 = virtualinvoke v0.<java.nio.channels.spi.SelectorProvider: java.nio.channels.SocketChannel openSocketChannel()>();
goto label3;
label2:
v4 = v3;
label3:
return v4;
label4:
v5 := @caughtexception;
v6 = new io.netty.channel.ChannelException;
specialinvoke v6.<io.netty.channel.ChannelException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to open a socket.", v5);
throw v6;
catch java.io.IOException from label1 to label3 with label4;
}
public void <init>()
{
io.netty.channel.socket.nio.NioSocketChannel v0;
java.nio.channels.spi.SelectorProvider v1;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 = <io.netty.channel.socket.nio.NioSocketChannel: java.nio.channels.spi.SelectorProvider DEFAULT_SELECTOR_PROVIDER>;
specialinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: void <init>(java.nio.channels.spi.SelectorProvider)>(v1);
return;
}
public void <init>(java.nio.channels.spi.SelectorProvider)
{
io.netty.channel.socket.nio.NioSocketChannel v0;
java.nio.channels.spi.SelectorProvider v1;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 := @parameter0: java.nio.channels.spi.SelectorProvider;
specialinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: void <init>(java.nio.channels.spi.SelectorProvider,io.netty.channel.socket.InternetProtocolFamily)>(v1, null);
return;
}
public void <init>(java.nio.channels.spi.SelectorProvider, io.netty.channel.socket.InternetProtocolFamily)
{
io.netty.channel.socket.nio.NioSocketChannel v0;
java.nio.channels.spi.SelectorProvider v1;
java.nio.channels.SocketChannel v3;
io.netty.channel.socket.InternetProtocolFamily v2;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 := @parameter0: java.nio.channels.spi.SelectorProvider;
v2 := @parameter1: io.netty.channel.socket.InternetProtocolFamily;
v3 = staticinvoke <io.netty.channel.socket.nio.NioSocketChannel: java.nio.channels.SocketChannel newChannel(java.nio.channels.spi.SelectorProvider,io.netty.channel.socket.InternetProtocolFamily)>(v1, v2);
specialinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: void <init>(java.nio.channels.SocketChannel)>(v3);
return;
}
public void <init>(java.nio.channels.SocketChannel)
{
io.netty.channel.socket.nio.NioSocketChannel v0;
java.nio.channels.SocketChannel v1;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 := @parameter0: java.nio.channels.SocketChannel;
specialinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: void <init>(io.netty.channel.Channel,java.nio.channels.SocketChannel)>(null, v1);
return;
}
public void <init>(io.netty.channel.Channel, java.nio.channels.SocketChannel)
{
io.netty.channel.Channel v1;
io.netty.channel.socket.nio.NioSocketChannel v0;
java.net.Socket v4;
java.nio.channels.SocketChannel v2;
io.netty.channel.socket.nio.NioSocketChannel$NioSocketChannelConfig v3;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: java.nio.channels.SocketChannel;
specialinvoke v0.<io.netty.channel.nio.AbstractNioByteChannel: void <init>(io.netty.channel.Channel,java.nio.channels.SelectableChannel)>(v1, v2);
v3 = new io.netty.channel.socket.nio.NioSocketChannel$NioSocketChannelConfig;
v4 = virtualinvoke v2.<java.nio.channels.SocketChannel: java.net.Socket socket()>();
specialinvoke v3.<io.netty.channel.socket.nio.NioSocketChannel$NioSocketChannelConfig: void <init>(io.netty.channel.socket.nio.NioSocketChannel,io.netty.channel.socket.nio.NioSocketChannel,java.net.Socket)>(v0, v0, v4);
v0.<io.netty.channel.socket.nio.NioSocketChannel: io.netty.channel.socket.SocketChannelConfig config> = v3;
return;
}
public io.netty.channel.socket.ServerSocketChannel parent()
{
io.netty.channel.Channel v1;
io.netty.channel.socket.nio.NioSocketChannel v0;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 = specialinvoke v0.<io.netty.channel.nio.AbstractNioByteChannel: io.netty.channel.Channel parent()>();
return v1;
}
public io.netty.channel.socket.SocketChannelConfig config()
{
io.netty.channel.socket.nio.NioSocketChannel v0;
io.netty.channel.socket.SocketChannelConfig v1;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 = v0.<io.netty.channel.socket.nio.NioSocketChannel: io.netty.channel.socket.SocketChannelConfig config>;
return v1;
}
protected java.nio.channels.SocketChannel javaChannel()
{
io.netty.channel.socket.nio.NioSocketChannel v0;
java.nio.channels.SelectableChannel v1;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 = specialinvoke v0.<io.netty.channel.nio.AbstractNioByteChannel: java.nio.channels.SelectableChannel javaChannel()>();
return v1;
}
public boolean isActive()
{
io.netty.channel.socket.nio.NioSocketChannel v0;
java.nio.channels.SocketChannel v1;
boolean v2, v3, v4;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: java.nio.channels.SocketChannel javaChannel()>();
v2 = virtualinvoke v1.<java.nio.channels.SocketChannel: boolean isOpen()>();
if v2 == 0 goto label1;
v3 = virtualinvoke v1.<java.nio.channels.SocketChannel: boolean isConnected()>();
if v3 == 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public boolean isOutputShutdown()
{
io.netty.channel.socket.nio.NioSocketChannel v0;
java.net.Socket v2;
java.nio.channels.SocketChannel v1;
boolean v3, v4, v5;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: java.nio.channels.SocketChannel javaChannel()>();
v2 = virtualinvoke v1.<java.nio.channels.SocketChannel: java.net.Socket socket()>();
v3 = virtualinvoke v2.<java.net.Socket: boolean isOutputShutdown()>();
if v3 != 0 goto label1;
v4 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: boolean isActive()>();
if v4 != 0 goto label2;
label1:
v5 = 1;
goto label3;
label2:
v5 = 0;
label3:
return v5;
}
public boolean isInputShutdown()
{
io.netty.channel.socket.nio.NioSocketChannel v0;
java.net.Socket v2;
java.nio.channels.SocketChannel v1;
boolean v3, v4, v5;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: java.nio.channels.SocketChannel javaChannel()>();
v2 = virtualinvoke v1.<java.nio.channels.SocketChannel: java.net.Socket socket()>();
v3 = virtualinvoke v2.<java.net.Socket: boolean isInputShutdown()>();
if v3 != 0 goto label1;
v4 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: boolean isActive()>();
if v4 != 0 goto label2;
label1:
v5 = 1;
goto label3;
label2:
v5 = 0;
label3:
return v5;
}
public boolean isShutdown()
{
io.netty.channel.socket.nio.NioSocketChannel v0;
java.net.Socket v2;
java.nio.channels.SocketChannel v1;
boolean v3, v4, v5, v6;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: java.nio.channels.SocketChannel javaChannel()>();
v2 = virtualinvoke v1.<java.nio.channels.SocketChannel: java.net.Socket socket()>();
v3 = virtualinvoke v2.<java.net.Socket: boolean isInputShutdown()>();
if v3 == 0 goto label1;
v4 = virtualinvoke v2.<java.net.Socket: boolean isOutputShutdown()>();
if v4 != 0 goto label2;
label1:
v5 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: boolean isActive()>();
if v5 != 0 goto label3;
label2:
v6 = 1;
goto label4;
label3:
v6 = 0;
label4:
return v6;
}
public java.net.InetSocketAddress localAddress()
{
io.netty.channel.socket.nio.NioSocketChannel v0;
java.net.SocketAddress v1;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 = specialinvoke v0.<io.netty.channel.nio.AbstractNioByteChannel: java.net.SocketAddress localAddress()>();
return v1;
}
public java.net.InetSocketAddress remoteAddress()
{
io.netty.channel.socket.nio.NioSocketChannel v0;
java.net.SocketAddress v1;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 = specialinvoke v0.<io.netty.channel.nio.AbstractNioByteChannel: java.net.SocketAddress remoteAddress()>();
return v1;
}
protected final void doShutdownOutput() throws java.lang.Exception
{
io.netty.channel.socket.nio.NioSocketChannel v0;
java.net.Socket v4;
java.nio.channels.SocketChannel v2, v3;
int v1;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 = staticinvoke <io.netty.util.internal.PlatformDependent: int javaVersion()>();
if v1 < 7 goto label1;
v2 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: java.nio.channels.SocketChannel javaChannel()>();
virtualinvoke v2.<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel shutdownOutput()>();
goto label2;
label1:
v3 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: java.nio.channels.SocketChannel javaChannel()>();
v4 = virtualinvoke v3.<java.nio.channels.SocketChannel: java.net.Socket socket()>();
virtualinvoke v4.<java.net.Socket: void shutdownOutput()>();
label2:
return;
}
public io.netty.channel.ChannelFuture shutdownOutput()
{
io.netty.channel.socket.nio.NioSocketChannel v0;
io.netty.channel.ChannelPromise v1;
io.netty.channel.ChannelFuture v2;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: io.netty.channel.ChannelPromise newPromise()>();
v2 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)>(v1);
return v2;
}
public io.netty.channel.ChannelFuture shutdownOutput(io.netty.channel.ChannelPromise)
{
io.netty.channel.socket.nio.NioSocketChannel v0;
io.netty.channel.ChannelPromise v1;
io.netty.channel.nio.NioEventLoop v2;
io.netty.channel.socket.nio.NioSocketChannel$1 v5;
boolean v3;
io.netty.channel.nio.AbstractNioChannel$NioUnsafe v4;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: io.netty.channel.nio.NioEventLoop eventLoop()>();
v3 = interfaceinvoke v2.<io.netty.channel.EventLoop: boolean inEventLoop()>();
if v3 == 0 goto label1;
v4 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: io.netty.channel.nio.AbstractNioChannel$NioUnsafe unsafe()>();
virtualinvoke v4.<io.netty.channel.AbstractChannel$AbstractUnsafe: void shutdownOutput(io.netty.channel.ChannelPromise)>(v1);
goto label2;
label1:
v5 = new io.netty.channel.socket.nio.NioSocketChannel$1;
specialinvoke v5.<io.netty.channel.socket.nio.NioSocketChannel$1: void <init>(io.netty.channel.socket.nio.NioSocketChannel,io.netty.channel.ChannelPromise)>(v0, v1);
interfaceinvoke v2.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>(v5);
label2:
return v1;
}
public io.netty.channel.ChannelFuture shutdownInput()
{
io.netty.channel.socket.nio.NioSocketChannel v0;
io.netty.channel.ChannelPromise v1;
io.netty.channel.ChannelFuture v2;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: io.netty.channel.ChannelPromise newPromise()>();
v2 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: io.netty.channel.ChannelFuture shutdownInput(io.netty.channel.ChannelPromise)>(v1);
return v2;
}
protected boolean isInputShutdown0()
{
io.netty.channel.socket.nio.NioSocketChannel v0;
boolean v1;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: boolean isInputShutdown()>();
return v1;
}
public io.netty.channel.ChannelFuture shutdownInput(io.netty.channel.ChannelPromise)
{
io.netty.channel.socket.nio.NioSocketChannel v0;
io.netty.channel.socket.nio.NioSocketChannel$2 v4;
io.netty.channel.ChannelPromise v1;
io.netty.channel.nio.NioEventLoop v2;
boolean v3;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: io.netty.channel.nio.NioEventLoop eventLoop()>();
v3 = interfaceinvoke v2.<io.netty.channel.EventLoop: boolean inEventLoop()>();
if v3 == 0 goto label1;
specialinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: void shutdownInput0(io.netty.channel.ChannelPromise)>(v1);
goto label2;
label1:
v4 = new io.netty.channel.socket.nio.NioSocketChannel$2;
specialinvoke v4.<io.netty.channel.socket.nio.NioSocketChannel$2: void <init>(io.netty.channel.socket.nio.NioSocketChannel,io.netty.channel.ChannelPromise)>(v0, v1);
interfaceinvoke v2.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>(v4);
label2:
return v1;
}
public io.netty.channel.ChannelFuture shutdown()
{
io.netty.channel.socket.nio.NioSocketChannel v0;
io.netty.channel.ChannelPromise v1;
io.netty.channel.ChannelFuture v2;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: io.netty.channel.ChannelPromise newPromise()>();
v2 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: io.netty.channel.ChannelFuture shutdown(io.netty.channel.ChannelPromise)>(v1);
return v2;
}
public io.netty.channel.ChannelFuture shutdown(io.netty.channel.ChannelPromise)
{
io.netty.channel.socket.nio.NioSocketChannel v0;
io.netty.channel.socket.nio.NioSocketChannel$3 v4;
io.netty.channel.ChannelPromise v1;
boolean v3;
io.netty.channel.ChannelFuture v2;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: io.netty.channel.ChannelFuture shutdownOutput()>();
v3 = interfaceinvoke v2.<io.netty.channel.ChannelFuture: boolean isDone()>();
if v3 == 0 goto label1;
specialinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: void shutdownOutputDone(io.netty.channel.ChannelFuture,io.netty.channel.ChannelPromise)>(v2, v1);
goto label2;
label1:
v4 = new io.netty.channel.socket.nio.NioSocketChannel$3;
specialinvoke v4.<io.netty.channel.socket.nio.NioSocketChannel$3: void <init>(io.netty.channel.socket.nio.NioSocketChannel,io.netty.channel.ChannelPromise)>(v0, v1);
interfaceinvoke v2.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v4);
label2:
return v1;
}
private void shutdownOutputDone(io.netty.channel.ChannelFuture, io.netty.channel.ChannelPromise)
{
io.netty.channel.socket.nio.NioSocketChannel v0;
io.netty.channel.socket.nio.NioSocketChannel$4 v5;
io.netty.channel.ChannelPromise v2;
boolean v4;
io.netty.channel.ChannelFuture v1, v3;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 := @parameter0: io.netty.channel.ChannelFuture;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: io.netty.channel.ChannelFuture shutdownInput()>();
v4 = interfaceinvoke v3.<io.netty.channel.ChannelFuture: boolean isDone()>();
if v4 == 0 goto label1;
staticinvoke <io.netty.channel.socket.nio.NioSocketChannel: void shutdownDone(io.netty.channel.ChannelFuture,io.netty.channel.ChannelFuture,io.netty.channel.ChannelPromise)>(v1, v3, v2);
goto label2;
label1:
v5 = new io.netty.channel.socket.nio.NioSocketChannel$4;
specialinvoke v5.<io.netty.channel.socket.nio.NioSocketChannel$4: void <init>(io.netty.channel.socket.nio.NioSocketChannel,io.netty.channel.ChannelFuture,io.netty.channel.ChannelPromise)>(v0, v1, v2);
interfaceinvoke v3.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v5);
label2:
return;
}
private static void shutdownDone(io.netty.channel.ChannelFuture, io.netty.channel.ChannelFuture, io.netty.channel.ChannelPromise)
{
java.lang.Throwable v3, v4;
io.netty.channel.ChannelPromise v2;
io.netty.util.internal.logging.InternalLogger v5;
io.netty.channel.ChannelFuture v0, v1;
v0 := @parameter0: io.netty.channel.ChannelFuture;
v1 := @parameter1: io.netty.channel.ChannelFuture;
v2 := @parameter2: io.netty.channel.ChannelPromise;
v3 = interfaceinvoke v0.<io.netty.channel.ChannelFuture: java.lang.Throwable cause()>();
v4 = interfaceinvoke v1.<io.netty.channel.ChannelFuture: java.lang.Throwable cause()>();
if v3 == null goto label2;
if v4 == null goto label1;
v5 = <io.netty.channel.socket.nio.NioSocketChannel: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v5.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Throwable)>("Exception suppressed because a previous exception occurred.", v4);
label1:
interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v3);
goto label4;
label2:
if v4 == null goto label3;
interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v4);
goto label4;
label3:
interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setSuccess()>();
label4:
return;
}
private void shutdownInput0(io.netty.channel.ChannelPromise)
{
io.netty.channel.socket.nio.NioSocketChannel v0;
java.lang.Throwable v2;
io.netty.channel.ChannelPromise v1;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 := @parameter0: io.netty.channel.ChannelPromise;
label1:
specialinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: void shutdownInput0()>();
interfaceinvoke v1.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setSuccess()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
interfaceinvoke v1.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v2);
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
private void shutdownInput0() throws java.lang.Exception
{
io.netty.channel.socket.nio.NioSocketChannel v0;
java.net.Socket v4;
java.nio.channels.SocketChannel v2, v3;
int v1;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 = staticinvoke <io.netty.util.internal.PlatformDependent: int javaVersion()>();
if v1 < 7 goto label1;
v2 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: java.nio.channels.SocketChannel javaChannel()>();
virtualinvoke v2.<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel shutdownInput()>();
goto label2;
label1:
v3 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: java.nio.channels.SocketChannel javaChannel()>();
v4 = virtualinvoke v3.<java.nio.channels.SocketChannel: java.net.Socket socket()>();
virtualinvoke v4.<java.net.Socket: void shutdownInput()>();
label2:
return;
}
protected java.net.SocketAddress localAddress0()
{
io.netty.channel.socket.nio.NioSocketChannel v0;
java.net.Socket v2;
java.net.SocketAddress v3;
java.nio.channels.SocketChannel v1;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: java.nio.channels.SocketChannel javaChannel()>();
v2 = virtualinvoke v1.<java.nio.channels.SocketChannel: java.net.Socket socket()>();
v3 = virtualinvoke v2.<java.net.Socket: java.net.SocketAddress getLocalSocketAddress()>();
return v3;
}
protected java.net.SocketAddress remoteAddress0()
{
io.netty.channel.socket.nio.NioSocketChannel v0;
java.net.Socket v2;
java.net.SocketAddress v3;
java.nio.channels.SocketChannel v1;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: java.nio.channels.SocketChannel javaChannel()>();
v2 = virtualinvoke v1.<java.nio.channels.SocketChannel: java.net.Socket socket()>();
v3 = virtualinvoke v2.<java.net.Socket: java.net.SocketAddress getRemoteSocketAddress()>();
return v3;
}
protected void doBind(java.net.SocketAddress) throws java.lang.Exception
{
io.netty.channel.socket.nio.NioSocketChannel v0;
java.net.SocketAddress v1;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 := @parameter0: java.net.SocketAddress;
specialinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: void doBind0(java.net.SocketAddress)>(v1);
return;
}
private void doBind0(java.net.SocketAddress) throws java.lang.Exception
{
io.netty.channel.socket.nio.NioSocketChannel v0;
java.net.Socket v5;
java.net.SocketAddress v1;
java.nio.channels.SocketChannel v3, v4;
int v2;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 := @parameter0: java.net.SocketAddress;
v2 = staticinvoke <io.netty.util.internal.PlatformDependent: int javaVersion()>();
if v2 < 7 goto label1;
v3 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: java.nio.channels.SocketChannel javaChannel()>();
staticinvoke <io.netty.util.internal.SocketUtils: void bind(java.nio.channels.SocketChannel,java.net.SocketAddress)>(v3, v1);
goto label2;
label1:
v4 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: java.nio.channels.SocketChannel javaChannel()>();
v5 = virtualinvoke v4.<java.nio.channels.SocketChannel: java.net.Socket socket()>();
staticinvoke <io.netty.util.internal.SocketUtils: void bind(java.net.Socket,java.net.SocketAddress)>(v5, v1);
label2:
return;
}
protected boolean doConnect(java.net.SocketAddress, java.net.SocketAddress) throws java.lang.Exception
{
io.netty.channel.socket.nio.NioSocketChannel v0;
java.lang.Throwable v6;
java.net.SocketAddress v1, v2;
java.nio.channels.SocketChannel v3;
java.nio.channels.SelectionKey v5;
boolean v4;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 := @parameter0: java.net.SocketAddress;
v2 := @parameter1: java.net.SocketAddress;
if v2 == null goto label1;
specialinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: void doBind0(java.net.SocketAddress)>(v2);
label1:
v3 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: java.nio.channels.SocketChannel javaChannel()>();
v4 = staticinvoke <io.netty.util.internal.SocketUtils: boolean connect(java.nio.channels.SocketChannel,java.net.SocketAddress)>(v3, v1);
if v4 != 0 goto label2;
v5 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: java.nio.channels.SelectionKey selectionKey()>();
virtualinvoke v5.<java.nio.channels.SelectionKey: java.nio.channels.SelectionKey interestOps(int)>(8);
label2:
return v4;
label3:
v6 := @caughtexception;
virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: void doClose()>();
throw v6;
catch java.lang.Throwable from label1 to label2 with label3;
}
protected void doFinishConnect() throws java.lang.Exception
{
io.netty.channel.socket.nio.NioSocketChannel v0;
java.nio.channels.SocketChannel v1;
java.lang.Error v3;
boolean v2;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: java.nio.channels.SocketChannel javaChannel()>();
v2 = virtualinvoke v1.<java.nio.channels.SocketChannel: boolean finishConnect()>();
if v2 != 0 goto label1;
v3 = new java.lang.Error;
specialinvoke v3.<java.lang.Error: void <init>()>();
throw v3;
label1:
return;
}
protected void doDisconnect() throws java.lang.Exception
{
io.netty.channel.socket.nio.NioSocketChannel v0;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: void doClose()>();
return;
}
protected void doClose() throws java.lang.Exception
{
io.netty.channel.socket.nio.NioSocketChannel v0;
java.nio.channels.SocketChannel v1;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
specialinvoke v0.<io.netty.channel.nio.AbstractNioByteChannel: void doClose()>();
v1 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: java.nio.channels.SocketChannel javaChannel()>();
virtualinvoke v1.<java.nio.channels.SocketChannel: void close()>();
return;
}
protected int doReadBytes(io.netty.buffer.ByteBuf) throws java.lang.Exception
{
io.netty.channel.socket.nio.NioSocketChannel v0;
io.netty.channel.RecvByteBufAllocator$Handle v3;
io.netty.buffer.ByteBuf v1;
java.nio.channels.SocketChannel v5;
int v4, v6, v7;
io.netty.channel.nio.AbstractNioChannel$NioUnsafe v2;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: io.netty.channel.nio.AbstractNioChannel$NioUnsafe unsafe()>();
v3 = interfaceinvoke v2.<io.netty.channel.nio.AbstractNioChannel$NioUnsafe: io.netty.channel.RecvByteBufAllocator$Handle recvBufAllocHandle()>();
v4 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int writableBytes()>();
interfaceinvoke v3.<io.netty.channel.RecvByteBufAllocator$Handle: void attemptedBytesRead(int)>(v4);
v5 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: java.nio.channels.SocketChannel javaChannel()>();
v6 = interfaceinvoke v3.<io.netty.channel.RecvByteBufAllocator$Handle: int attemptedBytesRead()>();
v7 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int writeBytes(java.nio.channels.ScatteringByteChannel,int)>(v5, v6);
return v7;
}
protected int doWriteBytes(io.netty.buffer.ByteBuf) throws java.lang.Exception
{
io.netty.channel.socket.nio.NioSocketChannel v0;
io.netty.buffer.ByteBuf v1;
java.nio.channels.SocketChannel v3;
int v2, v4;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
v3 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: java.nio.channels.SocketChannel javaChannel()>();
v4 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readBytes(java.nio.channels.GatheringByteChannel,int)>(v3, v2);
return v4;
}
protected long doWriteFileRegion(io.netty.channel.FileRegion) throws java.lang.Exception
{
io.netty.channel.socket.nio.NioSocketChannel v0;
java.nio.channels.SocketChannel v3;
long v2, v4;
io.netty.channel.FileRegion v1;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 := @parameter0: io.netty.channel.FileRegion;
v2 = interfaceinvoke v1.<io.netty.channel.FileRegion: long transferred()>();
v3 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: java.nio.channels.SocketChannel javaChannel()>();
v4 = interfaceinvoke v1.<io.netty.channel.FileRegion: long transferTo(java.nio.channels.WritableByteChannel,long)>(v3, v2);
return v4;
}
private void adjustMaxBytesPerGatheringWrite(int, int, int)
{
io.netty.channel.socket.nio.NioSocketChannel v0;
io.netty.channel.socket.SocketChannelConfig v5, v8;
int v1, v2, v3, v4, v6, v7, v9;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
if v1 != v2 goto label1;
v4 = v1 << 1;
if v4 <= v3 goto label2;
v5 = v0.<io.netty.channel.socket.nio.NioSocketChannel: io.netty.channel.socket.SocketChannelConfig config>;
v6 = v1 << 1;
virtualinvoke v5.<io.netty.channel.socket.nio.NioSocketChannel$NioSocketChannelConfig: void setMaxBytesPerGatheringWrite(int)>(v6);
goto label2;
label1:
if v1 <= 4096 goto label2;
v7 = v1 >>> 1;
if v2 >= v7 goto label2;
v8 = v0.<io.netty.channel.socket.nio.NioSocketChannel: io.netty.channel.socket.SocketChannelConfig config>;
v9 = v1 >>> 1;
virtualinvoke v8.<io.netty.channel.socket.nio.NioSocketChannel$NioSocketChannelConfig: void setMaxBytesPerGatheringWrite(int)>(v9);
label2:
return;
}
protected void doWrite(io.netty.channel.ChannelOutboundBuffer) throws java.lang.Exception
{
io.netty.channel.socket.nio.NioSocketChannel v0;
io.netty.channel.socket.SocketChannelConfig v3, v6;
long v14, v15;
java.nio.ByteBuffer v11;
byte v16;
java.nio.channels.SocketChannel v2;
int v10, v12, v13, v4, v7, v9;
boolean v17, v5;
java.nio.ByteBuffer[] v8;
io.netty.channel.ChannelOutboundBuffer v1;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 := @parameter0: io.netty.channel.ChannelOutboundBuffer;
v2 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: java.nio.channels.SocketChannel javaChannel()>();
v3 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: io.netty.channel.socket.SocketChannelConfig config()>();
v4 = interfaceinvoke v3.<io.netty.channel.socket.SocketChannelConfig: int getWriteSpinCount()>();
label01:
v5 = virtualinvoke v1.<io.netty.channel.ChannelOutboundBuffer: boolean isEmpty()>();
if v5 == 0 goto label02;
virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: void clearOpWrite()>();
return;
label02:
v6 = v0.<io.netty.channel.socket.nio.NioSocketChannel: io.netty.channel.socket.SocketChannelConfig config>;
v7 = virtualinvoke v6.<io.netty.channel.socket.nio.NioSocketChannel$NioSocketChannelConfig: int getMaxBytesPerGatheringWrite()>();
v8 = virtualinvoke v1.<io.netty.channel.ChannelOutboundBuffer: java.nio.ByteBuffer[] nioBuffers(int,long)>(1024, v7);
v9 = virtualinvoke v1.<io.netty.channel.ChannelOutboundBuffer: int nioBufferCount()>();
lookupswitch(v9)
{
case 0: goto label03;
case 1: goto label04;
default: goto label06;
};
label03:
v10 = virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: int doWrite0(io.netty.channel.ChannelOutboundBuffer)>(v1);
v4 = v4 - v10;
goto label08;
label04:
v11 = v8[0];
v12 = virtualinvoke v11.<java.nio.ByteBuffer: int remaining()>();
v13 = virtualinvoke v2.<java.nio.channels.SocketChannel: int write(java.nio.ByteBuffer)>(v11);
if v13 > 0 goto label05;
virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: void incompleteWrite(boolean)>(1);
return;
label05:
specialinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: void adjustMaxBytesPerGatheringWrite(int,int,int)>(v12, v13, v7);
virtualinvoke v1.<io.netty.channel.ChannelOutboundBuffer: void removeBytes(long)>(v13);
v4 = v4 - 1;
goto label08;
label06:
v14 = virtualinvoke v1.<io.netty.channel.ChannelOutboundBuffer: long nioBufferSize()>();
v15 = virtualinvoke v2.<java.nio.channels.SocketChannel: long write(java.nio.ByteBuffer[],int,int)>(v8, 0, v9);
v16 = v15 cmp 0L;
if v16 > 0 goto label07;
virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: void incompleteWrite(boolean)>(1);
return;
label07:
specialinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: void adjustMaxBytesPerGatheringWrite(int,int,int)>(v14, v15, v7);
virtualinvoke v1.<io.netty.channel.ChannelOutboundBuffer: void removeBytes(long)>(v15);
v4 = v4 - 1;
label08:
if v4 > 0 goto label01;
if v4 >= 0 goto label09;
v17 = 1;
goto label10;
label09:
v17 = 0;
label10:
virtualinvoke v0.<io.netty.channel.socket.nio.NioSocketChannel: void incompleteWrite(boolean)>(v17);
return;
}
protected io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe newUnsafe()
{
io.netty.channel.socket.nio.NioSocketChannel v0;
io.netty.channel.socket.nio.NioSocketChannel$NioSocketChannelUnsafe v1;
v0 := @this: io.netty.channel.socket.nio.NioSocketChannel;
v1 = new io.netty.channel.socket.nio.NioSocketChannel$NioSocketChannelUnsafe;
specialinvoke v1.<io.netty.channel.socket.nio.NioSocketChannel$NioSocketChannelUnsafe: void <init>(io.netty.channel.socket.nio.NioSocketChannel)>(v0);
return v1;
}
static void <clinit>()
{
java.nio.channels.spi.SelectorProvider v1;
java.lang.reflect.Method v2;
io.netty.util.internal.logging.InternalLogger v0;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/channel/socket/nio/NioSocketChannel;");
<io.netty.channel.socket.nio.NioSocketChannel: io.netty.util.internal.logging.InternalLogger logger> = v0;
v1 = staticinvoke <java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider()>();
<io.netty.channel.socket.nio.NioSocketChannel: java.nio.channels.spi.SelectorProvider DEFAULT_SELECTOR_PROVIDER> = v1;
v2 = staticinvoke <io.netty.channel.socket.nio.SelectorProviderUtil: java.lang.reflect.Method findOpenMethod(java.lang.String)>("openSocketChannel");
<io.netty.channel.socket.nio.NioSocketChannel: java.lang.reflect.Method OPEN_SOCKET_CHANNEL_WITH_FAMILY> = v2;
return;
}
}