final class io.netty.handler.codec.compression.Bzip2BitWriter extends java.lang.Object
{
private long bitBuffer;
private int bitCount;
void <init>()
{
io.netty.handler.codec.compression.Bzip2BitWriter v0;
v0 := @this: io.netty.handler.codec.compression.Bzip2BitWriter;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
void writeBits(io.netty.buffer.ByteBuf, int, long)
{
long v10, v11, v13, v3, v7, v9;
io.netty.handler.codec.compression.Bzip2BitWriter v0;
java.lang.IllegalArgumentException v4;
io.netty.buffer.ByteBuf v1;
int v12, v2, v6, v8;
java.lang.String v5;
v0 := @this: io.netty.handler.codec.compression.Bzip2BitWriter;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 := @parameter1: int;
v3 := @parameter2: long;
if v2 < 0 goto label1;
if v2 <= 32 goto label2;
label1:
v4 = new java.lang.IllegalArgumentException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("count: \u0001 (expected: 0-32)");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v4;
label2:
v6 = v0.<io.netty.handler.codec.compression.Bzip2BitWriter: int bitCount>;
v7 = v0.<io.netty.handler.codec.compression.Bzip2BitWriter: long bitBuffer>;
v8 = 64 - v2;
v9 = v3 << v8;
v10 = v9 >>> v6;
v11 = v7 | v10;
v12 = v6 + v2;
if v12 < 32 goto label3;
v13 = v11 >>> 32;
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeInt(int)>(v13);
v11 = v11 << 32;
v12 = v12 - 32;
label3:
v0.<io.netty.handler.codec.compression.Bzip2BitWriter: long bitBuffer> = v11;
v0.<io.netty.handler.codec.compression.Bzip2BitWriter: int bitCount> = v12;
return;
}
void writeBoolean(io.netty.buffer.ByteBuf, boolean)
{
long v5, v7, v8, v9;
io.netty.handler.codec.compression.Bzip2BitWriter v0;
io.netty.buffer.ByteBuf v1;
int v3, v4, v6;
boolean v2;
v0 := @this: io.netty.handler.codec.compression.Bzip2BitWriter;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 := @parameter1: boolean;
v3 = v0.<io.netty.handler.codec.compression.Bzip2BitWriter: int bitCount>;
v4 = v3 + 1;
v5 = v0.<io.netty.handler.codec.compression.Bzip2BitWriter: long bitBuffer>;
if v2 == 0 goto label1;
v6 = 64 - v4;
v7 = 1L << v6;
goto label2;
label1:
v7 = 0L;
label2:
v8 = v5 | v7;
if v4 != 32 goto label3;
v9 = v8 >>> 32;
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeInt(int)>(v9);
v8 = 0L;
v4 = 0;
label3:
v0.<io.netty.handler.codec.compression.Bzip2BitWriter: long bitBuffer> = v8;
v0.<io.netty.handler.codec.compression.Bzip2BitWriter: int bitCount> = v4;
return;
}
void writeUnary(io.netty.buffer.ByteBuf, int)
{
io.netty.buffer.ByteBuf v1;
int v2, v5;
java.lang.String v4;
io.netty.handler.codec.compression.Bzip2BitWriter v0;
java.lang.IllegalArgumentException v3;
v0 := @this: io.netty.handler.codec.compression.Bzip2BitWriter;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 := @parameter1: int;
if v2 >= 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("value: \u0001 (expected 0 or more)");
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v4);
throw v3;
label1:
v5 = v2;
v2 = v2 - 1;
if v5 <= 0 goto label2;
virtualinvoke v0.<io.netty.handler.codec.compression.Bzip2BitWriter: void writeBoolean(io.netty.buffer.ByteBuf,boolean)>(v1, 1);
goto label1;
label2:
virtualinvoke v0.<io.netty.handler.codec.compression.Bzip2BitWriter: void writeBoolean(io.netty.buffer.ByteBuf,boolean)>(v1, 0);
return;
}
void writeInt(io.netty.buffer.ByteBuf, int)
{
int v2;
io.netty.buffer.ByteBuf v1;
io.netty.handler.codec.compression.Bzip2BitWriter v0;
v0 := @this: io.netty.handler.codec.compression.Bzip2BitWriter;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 := @parameter1: int;
virtualinvoke v0.<io.netty.handler.codec.compression.Bzip2BitWriter: void writeBits(io.netty.buffer.ByteBuf,int,long)>(v1, 32, v2);
return;
}
void flush(io.netty.buffer.ByteBuf)
{
long v10, v11, v13, v14, v16, v3, v5, v7, v8;
io.netty.handler.codec.compression.Bzip2BitWriter v0;
io.netty.buffer.ByteBuf v1;
int v12, v15, v2, v4, v6, v9;
v0 := @this: io.netty.handler.codec.compression.Bzip2BitWriter;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 = v0.<io.netty.handler.codec.compression.Bzip2BitWriter: int bitCount>;
if v2 <= 0 goto label4;
v3 = v0.<io.netty.handler.codec.compression.Bzip2BitWriter: long bitBuffer>;
v4 = 64 - v2;
if v2 > 8 goto label1;
v5 = v3 >>> v4;
v6 = 8 - v2;
v7 = v5 << v6;
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeByte(int)>(v7);
goto label4;
label1:
if v2 > 16 goto label2;
v8 = v3 >>> v4;
v9 = 16 - v2;
v10 = v8 << v9;
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeShort(int)>(v10);
goto label4;
label2:
if v2 > 24 goto label3;
v11 = v3 >>> v4;
v12 = 24 - v2;
v13 = v11 << v12;
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeMedium(int)>(v13);
goto label4;
label3:
v14 = v3 >>> v4;
v15 = 32 - v2;
v16 = v14 << v15;
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeInt(int)>(v16);
label4:
return;
}
}