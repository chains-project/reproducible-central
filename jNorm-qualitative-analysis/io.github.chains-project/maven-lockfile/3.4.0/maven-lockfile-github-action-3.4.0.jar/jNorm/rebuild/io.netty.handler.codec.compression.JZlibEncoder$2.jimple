class io.netty.handler.codec.compression.JZlibEncoder$2 extends java.lang.Object implements java.lang.Runnable
{
final io.netty.channel.ChannelPromise val$promise;
final io.netty.channel.ChannelHandlerContext val$ctx;
final io.netty.handler.codec.compression.JZlibEncoder this$0;
void <init>(io.netty.handler.codec.compression.JZlibEncoder, io.netty.channel.ChannelPromise, io.netty.channel.ChannelHandlerContext)
{
io.netty.channel.ChannelHandlerContext v3;
io.netty.channel.ChannelPromise v2;
io.netty.handler.codec.compression.JZlibEncoder v1;
io.netty.handler.codec.compression.JZlibEncoder$2 v0;
v0 := @this: io.netty.handler.codec.compression.JZlibEncoder$2;
v1 := @parameter0: io.netty.handler.codec.compression.JZlibEncoder;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 := @parameter2: io.netty.channel.ChannelHandlerContext;
v0.<io.netty.handler.codec.compression.JZlibEncoder$2: io.netty.handler.codec.compression.JZlibEncoder this$0> = v1;
v0.<io.netty.handler.codec.compression.JZlibEncoder$2: io.netty.channel.ChannelPromise val$promise> = v2;
v0.<io.netty.handler.codec.compression.JZlibEncoder$2: io.netty.channel.ChannelHandlerContext val$ctx> = v3;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void run()
{
io.netty.channel.ChannelHandlerContext v3;
io.netty.channel.ChannelPromise v1, v4;
io.netty.handler.codec.compression.JZlibEncoder$2 v0;
boolean v2;
v0 := @this: io.netty.handler.codec.compression.JZlibEncoder$2;
v1 = v0.<io.netty.handler.codec.compression.JZlibEncoder$2: io.netty.channel.ChannelPromise val$promise>;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelPromise: boolean isDone()>();
if v2 != 0 goto label1;
v3 = v0.<io.netty.handler.codec.compression.JZlibEncoder$2: io.netty.channel.ChannelHandlerContext val$ctx>;
v4 = v0.<io.netty.handler.codec.compression.JZlibEncoder$2: io.netty.channel.ChannelPromise val$promise>;
interfaceinvoke v3.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)>(v4);
label1:
return;
}
}