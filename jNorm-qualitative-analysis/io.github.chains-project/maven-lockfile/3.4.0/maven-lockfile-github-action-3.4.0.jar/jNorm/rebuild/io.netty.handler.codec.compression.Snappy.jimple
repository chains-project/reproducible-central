public final class io.netty.handler.codec.compression.Snappy extends java.lang.Object
{
private static final int MAX_HT_SIZE;
private static final int MIN_COMPRESSIBLE_BYTES;
private static final int PREAMBLE_NOT_FULL;
private static final int NOT_ENOUGH_INPUT;
private static final int LITERAL;
private static final int COPY_1_BYTE_OFFSET;
private static final int COPY_2_BYTE_OFFSET;
private static final int COPY_4_BYTE_OFFSET;
private io.netty.handler.codec.compression.Snappy$State state;
private byte tag;
private int written;
public void <init>()
{
io.netty.handler.codec.compression.Snappy v0;
io.netty.handler.codec.compression.Snappy$State v1;
v0 := @this: io.netty.handler.codec.compression.Snappy;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = <io.netty.handler.codec.compression.Snappy$State: io.netty.handler.codec.compression.Snappy$State READING_PREAMBLE>;
v0.<io.netty.handler.codec.compression.Snappy: io.netty.handler.codec.compression.Snappy$State state> = v1;
return;
}
public void reset()
{
io.netty.handler.codec.compression.Snappy v0;
io.netty.handler.codec.compression.Snappy$State v1;
v0 := @this: io.netty.handler.codec.compression.Snappy;
v1 = <io.netty.handler.codec.compression.Snappy$State: io.netty.handler.codec.compression.Snappy$State READING_PREAMBLE>;
v0.<io.netty.handler.codec.compression.Snappy: io.netty.handler.codec.compression.Snappy$State state> = v1;
v0.<io.netty.handler.codec.compression.Snappy: byte tag> = 0;
v0.<io.netty.handler.codec.compression.Snappy: int written> = 0;
return;
}
public void encode(io.netty.buffer.ByteBuf, io.netty.buffer.ByteBuf, int)
{
io.netty.handler.codec.compression.Snappy v0;
short[] v12;
short v27, v48;
io.netty.buffer.ByteBuf v1, v2;
int v10, v11, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v28, v29, v3, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v4, v40, v41, v42, v43, v44, v45, v46, v47, v49, v5, v50, v51, v52, v53, v54, v6, v7, v8, v9;
v0 := @this: io.netty.handler.codec.compression.Snappy;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 := @parameter2: int;
v4 = 0;
label1:
v5 = v4 * 7;
v6 = v3 >>> v5;
v7 = (int) -128;
v8 = v6 & v7;
if v8 == 0 goto label2;
v9 = v6 & 127;
v10 = v9 | 128;
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeByte(int)>(v10);
goto label3;
label2:
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeByte(int)>(v6);
goto label4;
label3:
v4 = v4 + 1;
goto label1;
label4:
v11 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readerIndex()>();
v12 = staticinvoke <io.netty.handler.codec.compression.Snappy: short[] getHashTable(int)>(v3);
v13 = lengthof v12;
v14 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(v13);
v15 = v14 + 1;
v16 = v11;
v17 = v3 - v11;
if v17 < 15 goto label8;
v18 = v11 + 1;
v19 = staticinvoke <io.netty.handler.codec.compression.Snappy: int hash(io.netty.buffer.ByteBuf,int,int)>(v1, v18, v15);
label5:
v20 = 32;
v21 = v18;
label6:
v22 = v21;
v23 = v19;
v24 = v20;
v20 = v20 + 1;
v25 = v24 >> 5;
v21 = v21 + v25;
v26 = v3 - 4;
if v21 > v26 goto label8;
v19 = staticinvoke <io.netty.handler.codec.compression.Snappy: int hash(io.netty.buffer.ByteBuf,int,int)>(v1, v21, v15);
v27 = v12[v23];
v28 = v11 + v27;
v29 = v22 - v11;
v12[v23] = v29;
v30 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int getInt(int)>(v22);
v31 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int getInt(int)>(v28);
if v30 != v31 goto label6;
v32 = v22 - v16;
staticinvoke <io.netty.handler.codec.compression.Snappy: void encodeLiteral(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)>(v1, v2, v32);
label7:
v33 = v22;
v34 = v28 + 4;
v35 = v22 + 4;
v36 = staticinvoke <io.netty.handler.codec.compression.Snappy: int findMatchingLength(io.netty.buffer.ByteBuf,int,int,int)>(v1, v34, v35, v3);
v37 = 4 + v36;
v22 = v22 + v37;
v38 = v33 - v28;
staticinvoke <io.netty.handler.codec.compression.Snappy: void encodeCopy(io.netty.buffer.ByteBuf,int,int)>(v2, v38, v37);
v39 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readerIndex()>();
v40 = v39 + v37;
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readerIndex(int)>(v40);
v41 = v22 - 1;
v16 = v22;
v42 = v3 - 4;
if v22 >= v42 goto label8;
v43 = staticinvoke <io.netty.handler.codec.compression.Snappy: int hash(io.netty.buffer.ByteBuf,int,int)>(v1, v41, v15);
v44 = v22 - v11;
v45 = v44 - 1;
v12[v43] = v45;
v46 = v41 + 1;
v47 = staticinvoke <io.netty.handler.codec.compression.Snappy: int hash(io.netty.buffer.ByteBuf,int,int)>(v1, v46, v15);
v48 = v12[v47];
v28 = v11 + v48;
v49 = v22 - v11;
v12[v47] = v49;
v50 = v41 + 1;
v51 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int getInt(int)>(v50);
v52 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int getInt(int)>(v28);
if v51 == v52 goto label7;
v53 = v41 + 2;
v19 = staticinvoke <io.netty.handler.codec.compression.Snappy: int hash(io.netty.buffer.ByteBuf,int,int)>(v1, v53, v15);
v18 = v22 + 1;
goto label5;
label8:
if v16 >= v3 goto label9;
v54 = v3 - v16;
staticinvoke <io.netty.handler.codec.compression.Snappy: void encodeLiteral(io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)>(v1, v2, v54);
label9:
return;
}
private static int hash(io.netty.buffer.ByteBuf, int, int)
{
io.netty.buffer.ByteBuf v0;
int v1, v2, v3, v4, v5;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int getInt(int)>(v1);
v4 = v3 * 506832829;
v5 = v4 >>> v2;
return v5;
}
private static short[] getHashTable(int)
{
int v0, v1;
short[] v2;
v0 := @parameter0: int;
v1 = 256;
label1:
if v1 >= 16384 goto label2;
if v1 >= v0 goto label2;
v1 = v1 << 1;
goto label1;
label2:
v2 = newarray (short)[v1];
return v2;
}
private static int findMatchingLength(io.netty.buffer.ByteBuf, int, int, int)
{
byte v10, v11;
io.netty.buffer.ByteBuf v0;
int v1, v2, v3, v4, v5, v6, v7, v8, v9;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 = 0;
label1:
v5 = v3 - 4;
if v2 > v5 goto label2;
v6 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int getInt(int)>(v2);
v7 = v1 + v4;
v8 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int getInt(int)>(v7);
if v6 != v8 goto label2;
v2 = v2 + 4;
v4 = v4 + 4;
goto label1;
label2:
if v2 >= v3 goto label3;
v9 = v1 + v4;
v10 = virtualinvoke v0.<io.netty.buffer.ByteBuf: byte getByte(int)>(v9);
v11 = virtualinvoke v0.<io.netty.buffer.ByteBuf: byte getByte(int)>(v2);
if v10 != v11 goto label3;
v2 = v2 + 1;
v4 = v4 + 1;
goto label2;
label3:
return v4;
}
private static int bitsToEncode(int)
{
int v0, v1, v2, v3;
v0 := @parameter0: int;
v1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>(v0);
v2 = 0;
label1:
v3 = v1 >> 1;
v1 = v3;
if v3 == 0 goto label2;
v2 = v2 + 1;
goto label1;
label2:
return v2;
}
static void encodeLiteral(io.netty.buffer.ByteBuf, io.netty.buffer.ByteBuf, int)
{
io.netty.buffer.ByteBuf v0, v1;
int v10, v11, v12, v13, v14, v15, v2, v3, v4, v5, v6, v7, v8, v9;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: io.netty.buffer.ByteBuf;
v2 := @parameter2: int;
if v2 >= 61 goto label1;
v3 = v2 - 1;
v4 = v3 << 2;
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeByte(int)>(v4);
goto label3;
label1:
v5 = v2 - 1;
v6 = staticinvoke <io.netty.handler.codec.compression.Snappy: int bitsToEncode(int)>(v5);
v7 = v6 / 8;
v8 = 1 + v7;
v9 = 59 + v8;
v10 = v9 << 2;
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeByte(int)>(v10);
v11 = 0;
label2:
if v11 >= v8 goto label3;
v12 = v2 - 1;
v13 = v11 * 8;
v14 = v12 >> v13;
v15 = v14 & 255;
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeByte(int)>(v15);
v11 = v11 + 1;
goto label2;
label3:
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int)>(v0, v2);
return;
}
private static void encodeCopyWithOffset(io.netty.buffer.ByteBuf, int, int)
{
io.netty.buffer.ByteBuf v0;
int v1, v10, v11, v12, v13, v14, v15, v2, v3, v4, v5, v6, v7, v8, v9;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: int;
v2 := @parameter2: int;
if v2 >= 12 goto label1;
if v1 >= 2048 goto label1;
v3 = v2 - 4;
v4 = v3 << 2;
v5 = 1 | v4;
v6 = v1 >> 8;
v7 = v6 << 5;
v8 = v5 | v7;
virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeByte(int)>(v8);
v9 = v1 & 255;
virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeByte(int)>(v9);
goto label2;
label1:
v10 = v2 - 1;
v11 = v10 << 2;
v12 = 2 | v11;
virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeByte(int)>(v12);
v13 = v1 & 255;
virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeByte(int)>(v13);
v14 = v1 >> 8;
v15 = v14 & 255;
virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeByte(int)>(v15);
label2:
return;
}
private static void encodeCopy(io.netty.buffer.ByteBuf, int, int)
{
int v1, v2;
io.netty.buffer.ByteBuf v0;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: int;
v2 := @parameter2: int;
label1:
if v2 < 68 goto label2;
staticinvoke <io.netty.handler.codec.compression.Snappy: void encodeCopyWithOffset(io.netty.buffer.ByteBuf,int,int)>(v0, v1, 64);
v2 = v2 - 64;
goto label1;
label2:
if v2 <= 64 goto label3;
staticinvoke <io.netty.handler.codec.compression.Snappy: void encodeCopyWithOffset(io.netty.buffer.ByteBuf,int,int)>(v0, v1, 60);
v2 = v2 - 60;
label3:
staticinvoke <io.netty.handler.codec.compression.Snappy: void encodeCopyWithOffset(io.netty.buffer.ByteBuf,int,int)>(v0, v1, v2);
return;
}
public void decode(io.netty.buffer.ByteBuf, io.netty.buffer.ByteBuf)
{
byte v12, v13, v14, v17, v23, v24, v25, v32, v39;
int[] v4;
boolean v11, v3;
io.netty.handler.codec.compression.Snappy v0;
io.netty.buffer.ByteBuf v1, v2;
int v18, v19, v21, v22, v26, v27, v28, v30, v31, v33, v34, v35, v37, v38, v40, v41, v42, v44, v45, v6, v7, v8, v9;
io.netty.handler.codec.compression.Snappy$State v10, v15, v16, v20, v29, v36, v43, v5;
v0 := @this: io.netty.handler.codec.compression.Snappy;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 := @parameter1: io.netty.buffer.ByteBuf;
label01:
v3 = virtualinvoke v1.<io.netty.buffer.ByteBuf: boolean isReadable()>();
if v3 == 0 goto label18;
v4 = <io.netty.handler.codec.compression.Snappy$1: int[] $SwitchMap$io$netty$handler$codec$compression$Snappy$State>;
v5 = v0.<io.netty.handler.codec.compression.Snappy: io.netty.handler.codec.compression.Snappy$State state>;
v6 = virtualinvoke v5.<io.netty.handler.codec.compression.Snappy$State: int ordinal()>();
v7 = v4[v6];
tableswitch(v7)
{
case 1: goto label02;
case 2: goto label05;
case 3: goto label09;
case 4: goto label11;
default: goto label01;
};
label02:
v8 = staticinvoke <io.netty.handler.codec.compression.Snappy: int readPreamble(io.netty.buffer.ByteBuf)>(v1);
v9 = (int) -1;
if v8 != v9 goto label03;
return;
label03:
if v8 != 0 goto label04;
return;
label04:
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf ensureWritable(int)>(v8);
v10 = <io.netty.handler.codec.compression.Snappy$State: io.netty.handler.codec.compression.Snappy$State READING_TAG>;
v0.<io.netty.handler.codec.compression.Snappy: io.netty.handler.codec.compression.Snappy$State state> = v10;
label05:
v11 = virtualinvoke v1.<io.netty.buffer.ByteBuf: boolean isReadable()>();
if v11 != 0 goto label06;
return;
label06:
v12 = virtualinvoke v1.<io.netty.buffer.ByteBuf: byte readByte()>();
v0.<io.netty.handler.codec.compression.Snappy: byte tag> = v12;
v13 = v0.<io.netty.handler.codec.compression.Snappy: byte tag>;
v14 = v13 & 3;
tableswitch(v14)
{
case 0: goto label07;
case 1: goto label08;
case 2: goto label08;
case 3: goto label08;
default: goto label01;
};
label07:
v15 = <io.netty.handler.codec.compression.Snappy$State: io.netty.handler.codec.compression.Snappy$State READING_LITERAL>;
v0.<io.netty.handler.codec.compression.Snappy: io.netty.handler.codec.compression.Snappy$State state> = v15;
goto label01;
label08:
v16 = <io.netty.handler.codec.compression.Snappy$State: io.netty.handler.codec.compression.Snappy$State READING_COPY>;
v0.<io.netty.handler.codec.compression.Snappy: io.netty.handler.codec.compression.Snappy$State state> = v16;
goto label01;
label09:
v17 = v0.<io.netty.handler.codec.compression.Snappy: byte tag>;
v18 = staticinvoke <io.netty.handler.codec.compression.Snappy: int decodeLiteral(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf)>(v17, v1, v2);
v19 = (int) -1;
if v18 == v19 goto label10;
v20 = <io.netty.handler.codec.compression.Snappy$State: io.netty.handler.codec.compression.Snappy$State READING_TAG>;
v0.<io.netty.handler.codec.compression.Snappy: io.netty.handler.codec.compression.Snappy$State state> = v20;
v21 = v0.<io.netty.handler.codec.compression.Snappy: int written>;
v22 = v21 + v18;
v0.<io.netty.handler.codec.compression.Snappy: int written> = v22;
goto label01;
label10:
return;
label11:
v23 = v0.<io.netty.handler.codec.compression.Snappy: byte tag>;
v24 = v23 & 3;
tableswitch(v24)
{
case 1: goto label12;
case 2: goto label14;
case 3: goto label16;
default: goto label01;
};
label12:
v25 = v0.<io.netty.handler.codec.compression.Snappy: byte tag>;
v26 = v0.<io.netty.handler.codec.compression.Snappy: int written>;
v27 = staticinvoke <io.netty.handler.codec.compression.Snappy: int decodeCopyWith1ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)>(v25, v1, v2, v26);
v28 = (int) -1;
if v27 == v28 goto label13;
v29 = <io.netty.handler.codec.compression.Snappy$State: io.netty.handler.codec.compression.Snappy$State READING_TAG>;
v0.<io.netty.handler.codec.compression.Snappy: io.netty.handler.codec.compression.Snappy$State state> = v29;
v30 = v0.<io.netty.handler.codec.compression.Snappy: int written>;
v31 = v30 + v27;
v0.<io.netty.handler.codec.compression.Snappy: int written> = v31;
goto label01;
label13:
return;
label14:
v32 = v0.<io.netty.handler.codec.compression.Snappy: byte tag>;
v33 = v0.<io.netty.handler.codec.compression.Snappy: int written>;
v34 = staticinvoke <io.netty.handler.codec.compression.Snappy: int decodeCopyWith2ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)>(v32, v1, v2, v33);
v35 = (int) -1;
if v34 == v35 goto label15;
v36 = <io.netty.handler.codec.compression.Snappy$State: io.netty.handler.codec.compression.Snappy$State READING_TAG>;
v0.<io.netty.handler.codec.compression.Snappy: io.netty.handler.codec.compression.Snappy$State state> = v36;
v37 = v0.<io.netty.handler.codec.compression.Snappy: int written>;
v38 = v37 + v34;
v0.<io.netty.handler.codec.compression.Snappy: int written> = v38;
goto label01;
label15:
return;
label16:
v39 = v0.<io.netty.handler.codec.compression.Snappy: byte tag>;
v40 = v0.<io.netty.handler.codec.compression.Snappy: int written>;
v41 = staticinvoke <io.netty.handler.codec.compression.Snappy: int decodeCopyWith4ByteOffset(byte,io.netty.buffer.ByteBuf,io.netty.buffer.ByteBuf,int)>(v39, v1, v2, v40);
v42 = (int) -1;
if v41 == v42 goto label17;
v43 = <io.netty.handler.codec.compression.Snappy$State: io.netty.handler.codec.compression.Snappy$State READING_TAG>;
v0.<io.netty.handler.codec.compression.Snappy: io.netty.handler.codec.compression.Snappy$State state> = v43;
v44 = v0.<io.netty.handler.codec.compression.Snappy: int written>;
v45 = v44 + v41;
v0.<io.netty.handler.codec.compression.Snappy: int written> = v45;
goto label01;
label17:
return;
label18:
return;
}
private static int readPreamble(io.netty.buffer.ByteBuf)
{
io.netty.handler.codec.compression.DecompressionException v10;
short v4, v5, v9;
io.netty.buffer.ByteBuf v0;
int v1, v2, v6, v7, v8;
boolean v3;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 = 0;
v2 = 0;
label1:
v3 = virtualinvoke v0.<io.netty.buffer.ByteBuf: boolean isReadable()>();
if v3 == 0 goto label3;
v4 = virtualinvoke v0.<io.netty.buffer.ByteBuf: short readUnsignedByte()>();
v5 = v4 & 127;
v6 = v2;
v2 = v2 + 1;
v7 = v6 * 7;
v8 = v5 << v7;
v1 = v1 | v8;
v9 = v4 & 128;
if v9 != 0 goto label2;
return v1;
label2:
if v2 < 4 goto label1;
v10 = new io.netty.handler.codec.compression.DecompressionException;
specialinvoke v10.<io.netty.handler.codec.compression.DecompressionException: void <init>(java.lang.String)>("Preamble is greater than 4 bytes");
throw v10;
label3:
return 0;
}
int getPreamble(io.netty.buffer.ByteBuf)
{
java.lang.Throwable v6;
io.netty.buffer.ByteBuf v1;
int v4, v5;
io.netty.handler.codec.compression.Snappy v0;
io.netty.handler.codec.compression.Snappy$State v2, v3;
v0 := @this: io.netty.handler.codec.compression.Snappy;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 = v0.<io.netty.handler.codec.compression.Snappy: io.netty.handler.codec.compression.Snappy$State state>;
v3 = <io.netty.handler.codec.compression.Snappy$State: io.netty.handler.codec.compression.Snappy$State READING_PREAMBLE>;
if v2 != v3 goto label4;
v4 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readerIndex()>();
label1:
v5 = staticinvoke <io.netty.handler.codec.compression.Snappy: int readPreamble(io.netty.buffer.ByteBuf)>(v1);
label2:
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readerIndex(int)>(v4);
return v5;
label3:
v6 := @caughtexception;
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readerIndex(int)>(v4);
throw v6;
label4:
return 0;
catch java.lang.Throwable from label1 to label2 with label3;
}
static int decodeLiteral(byte, io.netty.buffer.ByteBuf, io.netty.buffer.ByteBuf)
{
short v7;
byte v0;
io.netty.buffer.ByteBuf v1, v2;
int v10, v11, v12, v13, v14, v15, v16, v17, v18, v3, v4, v6, v8, v9;
boolean v5;
v0 := @parameter0: byte;
v1 := @parameter1: io.netty.buffer.ByteBuf;
v2 := @parameter2: io.netty.buffer.ByteBuf;
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf markReaderIndex()>();
v3 = v0 >> 2;
v4 = v3 & 63;
tableswitch(v4)
{
case 60: goto label01;
case 61: goto label03;
case 62: goto label05;
case 63: goto label07;
default: goto label09;
};
label01:
v5 = virtualinvoke v1.<io.netty.buffer.ByteBuf: boolean isReadable()>();
if v5 != 0 goto label02;
v6 = (int) -1;
return v6;
label02:
v7 = virtualinvoke v1.<io.netty.buffer.ByteBuf: short readUnsignedByte()>();
v8 = v7;
goto label10;
label03:
v9 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
if v9 >= 2 goto label04;
v10 = (int) -1;
return v10;
label04:
v8 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readUnsignedShortLE()>();
goto label10;
label05:
v11 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
if v11 >= 3 goto label06;
v12 = (int) -1;
return v12;
label06:
v8 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readUnsignedMediumLE()>();
goto label10;
label07:
v13 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
if v13 >= 4 goto label08;
v14 = (int) -1;
return v14;
label08:
v8 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readIntLE()>();
goto label10;
label09:
v15 = v0 >> 2;
v8 = v15 & 63;
label10:
v16 = v8 + 1;
v17 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
if v17 >= v16 goto label11;
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf resetReaderIndex()>();
v18 = (int) -1;
return v18;
label11:
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int)>(v1, v16);
return v16;
}
private static int decodeCopyWith1ByteOffset(byte, io.netty.buffer.ByteBuf, io.netty.buffer.ByteBuf, int)
{
short v10, v13;
byte v0, v7;
io.netty.buffer.ByteBuf v1, v2;
int v11, v12, v14, v15, v16, v17, v18, v19, v20, v3, v5, v6, v8, v9;
boolean v4;
v0 := @parameter0: byte;
v1 := @parameter1: io.netty.buffer.ByteBuf;
v2 := @parameter2: io.netty.buffer.ByteBuf;
v3 := @parameter3: int;
v4 = virtualinvoke v1.<io.netty.buffer.ByteBuf: boolean isReadable()>();
if v4 != 0 goto label1;
v5 = (int) -1;
return v5;
label1:
v6 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int writerIndex()>();
v7 = v0 & 28;
v8 = v7 >> 2;
v9 = 4 + v8;
v10 = v0 & 224;
v11 = v10 << 8;
v12 = v11 >> 5;
v13 = virtualinvoke v1.<io.netty.buffer.ByteBuf: short readUnsignedByte()>();
v14 = v12 | v13;
staticinvoke <io.netty.handler.codec.compression.Snappy: void validateOffset(int,int)>(v14, v3);
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf markReaderIndex()>();
if v14 >= v9 goto label4;
v15 = v9 / v14;
label2:
if v15 <= 0 goto label3;
v16 = v6 - v14;
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readerIndex(int)>(v16);
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)>(v2, v14);
v15 = v15 - 1;
goto label2;
label3:
v17 = v9 % v14;
if v17 == 0 goto label5;
v18 = v6 - v14;
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readerIndex(int)>(v18);
v19 = v9 % v14;
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)>(v2, v19);
goto label5;
label4:
v20 = v6 - v14;
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readerIndex(int)>(v20);
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)>(v2, v9);
label5:
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf resetReaderIndex()>();
return v9;
}
private static int decodeCopyWith2ByteOffset(byte, io.netty.buffer.ByteBuf, io.netty.buffer.ByteBuf, int)
{
byte v0;
io.netty.buffer.ByteBuf v1, v2;
int v10, v11, v12, v13, v14, v15, v16, v3, v4, v5, v6, v7, v8, v9;
v0 := @parameter0: byte;
v1 := @parameter1: io.netty.buffer.ByteBuf;
v2 := @parameter2: io.netty.buffer.ByteBuf;
v3 := @parameter3: int;
v4 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
if v4 >= 2 goto label1;
v5 = (int) -1;
return v5;
label1:
v6 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int writerIndex()>();
v7 = v0 >> 2;
v8 = v7 & 63;
v9 = 1 + v8;
v10 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readUnsignedShortLE()>();
staticinvoke <io.netty.handler.codec.compression.Snappy: void validateOffset(int,int)>(v10, v3);
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf markReaderIndex()>();
if v10 >= v9 goto label4;
v11 = v9 / v10;
label2:
if v11 <= 0 goto label3;
v12 = v6 - v10;
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readerIndex(int)>(v12);
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)>(v2, v10);
v11 = v11 - 1;
goto label2;
label3:
v13 = v9 % v10;
if v13 == 0 goto label5;
v14 = v6 - v10;
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readerIndex(int)>(v14);
v15 = v9 % v10;
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)>(v2, v15);
goto label5;
label4:
v16 = v6 - v10;
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readerIndex(int)>(v16);
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)>(v2, v9);
label5:
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf resetReaderIndex()>();
return v9;
}
private static int decodeCopyWith4ByteOffset(byte, io.netty.buffer.ByteBuf, io.netty.buffer.ByteBuf, int)
{
byte v0;
io.netty.buffer.ByteBuf v1, v2;
int v10, v11, v12, v13, v14, v15, v16, v3, v4, v5, v6, v7, v8, v9;
v0 := @parameter0: byte;
v1 := @parameter1: io.netty.buffer.ByteBuf;
v2 := @parameter2: io.netty.buffer.ByteBuf;
v3 := @parameter3: int;
v4 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
if v4 >= 4 goto label1;
v5 = (int) -1;
return v5;
label1:
v6 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int writerIndex()>();
v7 = v0 >> 2;
v8 = v7 & 63;
v9 = 1 + v8;
v10 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readIntLE()>();
staticinvoke <io.netty.handler.codec.compression.Snappy: void validateOffset(int,int)>(v10, v3);
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf markReaderIndex()>();
if v10 >= v9 goto label4;
v11 = v9 / v10;
label2:
if v11 <= 0 goto label3;
v12 = v6 - v10;
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readerIndex(int)>(v12);
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)>(v2, v10);
v11 = v11 - 1;
goto label2;
label3:
v13 = v9 % v10;
if v13 == 0 goto label5;
v14 = v6 - v10;
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readerIndex(int)>(v14);
v15 = v9 % v10;
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)>(v2, v15);
goto label5;
label4:
v16 = v6 - v10;
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readerIndex(int)>(v16);
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf,int)>(v2, v9);
label5:
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf resetReaderIndex()>();
return v9;
}
private static void validateOffset(int, int)
{
io.netty.handler.codec.compression.DecompressionException v2, v3, v4;
int v0, v1;
v0 := @parameter0: int;
v1 := @parameter1: int;
if v0 != 0 goto label1;
v2 = new io.netty.handler.codec.compression.DecompressionException;
specialinvoke v2.<io.netty.handler.codec.compression.DecompressionException: void <init>(java.lang.String)>("Offset is less than minimum permissible value");
throw v2;
label1:
if v0 >= 0 goto label2;
v3 = new io.netty.handler.codec.compression.DecompressionException;
specialinvoke v3.<io.netty.handler.codec.compression.DecompressionException: void <init>(java.lang.String)>("Offset is greater than maximum value supported by this implementation");
throw v3;
label2:
if v0 <= v1 goto label3;
v4 = new io.netty.handler.codec.compression.DecompressionException;
specialinvoke v4.<io.netty.handler.codec.compression.DecompressionException: void <init>(java.lang.String)>("Offset exceeds size of chunk");
throw v4;
label3:
return;
}
static int calculateChecksum(io.netty.buffer.ByteBuf)
{
io.netty.buffer.ByteBuf v0;
int v1, v2, v3;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int readerIndex()>();
v2 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int readableBytes()>();
v3 = staticinvoke <io.netty.handler.codec.compression.Snappy: int calculateChecksum(io.netty.buffer.ByteBuf,int,int)>(v0, v1, v2);
return v3;
}
static int calculateChecksum(io.netty.buffer.ByteBuf, int, int)
{
java.lang.Throwable v6;
io.netty.handler.codec.compression.Crc32c v3;
io.netty.buffer.ByteBuf v0;
int v1, v2, v5;
long v4;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = new io.netty.handler.codec.compression.Crc32c;
specialinvoke v3.<io.netty.handler.codec.compression.Crc32c: void <init>()>();
label1:
virtualinvoke v3.<io.netty.handler.codec.compression.Crc32c: void update(io.netty.buffer.ByteBuf,int,int)>(v0, v1, v2);
v4 = virtualinvoke v3.<io.netty.handler.codec.compression.Crc32c: long getValue()>();
v5 = staticinvoke <io.netty.handler.codec.compression.Snappy: int maskChecksum(long)>(v4);
label2:
virtualinvoke v3.<io.netty.handler.codec.compression.Crc32c: void reset()>();
return v5;
label3:
v6 := @caughtexception;
virtualinvoke v3.<io.netty.handler.codec.compression.Crc32c: void reset()>();
throw v6;
catch java.lang.Throwable from label1 to label2 with label3;
}
static void validateChecksum(int, io.netty.buffer.ByteBuf)
{
io.netty.buffer.ByteBuf v1;
int v0, v2, v3;
v0 := @parameter0: int;
v1 := @parameter1: io.netty.buffer.ByteBuf;
v2 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readerIndex()>();
v3 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
staticinvoke <io.netty.handler.codec.compression.Snappy: void validateChecksum(int,io.netty.buffer.ByteBuf,int,int)>(v0, v1, v2, v3);
return;
}
static void validateChecksum(int, io.netty.buffer.ByteBuf, int, int)
{
io.netty.handler.codec.compression.DecompressionException v5;
io.netty.buffer.ByteBuf v1;
int v0, v2, v3, v4;
java.lang.String v6, v7, v8;
v0 := @parameter0: int;
v1 := @parameter1: io.netty.buffer.ByteBuf;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 = staticinvoke <io.netty.handler.codec.compression.Snappy: int calculateChecksum(io.netty.buffer.ByteBuf,int,int)>(v1, v2, v3);
if v4 == v0 goto label1;
v5 = new io.netty.handler.codec.compression.DecompressionException;
v6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v4);
v7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v0);
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v6, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("mismatching checksum: \u0001 (expected: \u0001)");
specialinvoke v5.<io.netty.handler.codec.compression.DecompressionException: void <init>(java.lang.String)>(v8);
throw v5;
label1:
return;
}
static int maskChecksum(long)
{
long v0, v1, v2, v3, v4;
v0 := @parameter0: long;
v1 = v0 >> 15;
v2 = v0 << 17;
v3 = v1 | v2;
v4 = v3 + -1568478504L;
return v4;
}
}