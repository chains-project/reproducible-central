public class io.netty.handler.codec.http.EmptyHttpHeaders extends io.netty.handler.codec.http.HttpHeaders
{
static final java.util.Iterator EMPTY_CHARS_ITERATOR;
public static final io.netty.handler.codec.http.EmptyHttpHeaders INSTANCE;
static io.netty.handler.codec.http.EmptyHttpHeaders instance()
{
io.netty.handler.codec.http.EmptyHttpHeaders v0;
v0 = <io.netty.handler.codec.http.EmptyHttpHeaders$InstanceInitializer: io.netty.handler.codec.http.EmptyHttpHeaders EMPTY_HEADERS>;
return v0;
}
protected void <init>()
{
io.netty.handler.codec.http.EmptyHttpHeaders v0;
v0 := @this: io.netty.handler.codec.http.EmptyHttpHeaders;
specialinvoke v0.<io.netty.handler.codec.http.HttpHeaders: void <init>()>();
return;
}
public java.lang.String get(java.lang.String)
{
io.netty.handler.codec.http.EmptyHttpHeaders v0;
java.lang.String v1;
v0 := @this: io.netty.handler.codec.http.EmptyHttpHeaders;
v1 := @parameter0: java.lang.String;
return null;
}
public java.lang.Integer getInt(java.lang.CharSequence)
{
io.netty.handler.codec.http.EmptyHttpHeaders v0;
java.lang.CharSequence v1;
v0 := @this: io.netty.handler.codec.http.EmptyHttpHeaders;
v1 := @parameter0: java.lang.CharSequence;
return null;
}
public int getInt(java.lang.CharSequence, int)
{
int v2;
io.netty.handler.codec.http.EmptyHttpHeaders v0;
java.lang.CharSequence v1;
v0 := @this: io.netty.handler.codec.http.EmptyHttpHeaders;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
return v2;
}
public java.lang.Short getShort(java.lang.CharSequence)
{
io.netty.handler.codec.http.EmptyHttpHeaders v0;
java.lang.CharSequence v1;
v0 := @this: io.netty.handler.codec.http.EmptyHttpHeaders;
v1 := @parameter0: java.lang.CharSequence;
return null;
}
public short getShort(java.lang.CharSequence, short)
{
io.netty.handler.codec.http.EmptyHttpHeaders v0;
short v2;
java.lang.CharSequence v1;
v0 := @this: io.netty.handler.codec.http.EmptyHttpHeaders;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: short;
return v2;
}
public java.lang.Long getTimeMillis(java.lang.CharSequence)
{
io.netty.handler.codec.http.EmptyHttpHeaders v0;
java.lang.CharSequence v1;
v0 := @this: io.netty.handler.codec.http.EmptyHttpHeaders;
v1 := @parameter0: java.lang.CharSequence;
return null;
}
public long getTimeMillis(java.lang.CharSequence, long)
{
io.netty.handler.codec.http.EmptyHttpHeaders v0;
long v2;
java.lang.CharSequence v1;
v0 := @this: io.netty.handler.codec.http.EmptyHttpHeaders;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: long;
return v2;
}
public java.util.List getAll(java.lang.String)
{
io.netty.handler.codec.http.EmptyHttpHeaders v0;
java.util.List v2;
java.lang.String v1;
v0 := @this: io.netty.handler.codec.http.EmptyHttpHeaders;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v2;
}
public java.util.List entries()
{
io.netty.handler.codec.http.EmptyHttpHeaders v0;
java.util.List v1;
v0 := @this: io.netty.handler.codec.http.EmptyHttpHeaders;
v1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v1;
}
public boolean contains(java.lang.String)
{
io.netty.handler.codec.http.EmptyHttpHeaders v0;
java.lang.String v1;
v0 := @this: io.netty.handler.codec.http.EmptyHttpHeaders;
v1 := @parameter0: java.lang.String;
return 0;
}
public boolean isEmpty()
{
io.netty.handler.codec.http.EmptyHttpHeaders v0;
v0 := @this: io.netty.handler.codec.http.EmptyHttpHeaders;
return 1;
}
public int size()
{
io.netty.handler.codec.http.EmptyHttpHeaders v0;
v0 := @this: io.netty.handler.codec.http.EmptyHttpHeaders;
return 0;
}
public java.util.Set names()
{
io.netty.handler.codec.http.EmptyHttpHeaders v0;
java.util.Set v1;
v0 := @this: io.netty.handler.codec.http.EmptyHttpHeaders;
v1 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
return v1;
}
public io.netty.handler.codec.http.HttpHeaders add(java.lang.String, java.lang.Object)
{
io.netty.handler.codec.http.EmptyHttpHeaders v0;
java.lang.UnsupportedOperationException v3;
java.lang.Object v2;
java.lang.String v1;
v0 := @this: io.netty.handler.codec.http.EmptyHttpHeaders;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http.HttpHeaders add(java.lang.String, java.lang.Iterable)
{
io.netty.handler.codec.http.EmptyHttpHeaders v0;
java.lang.UnsupportedOperationException v3;
java.lang.String v1;
java.lang.Iterable v2;
v0 := @this: io.netty.handler.codec.http.EmptyHttpHeaders;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Iterable;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http.HttpHeaders addInt(java.lang.CharSequence, int)
{
io.netty.handler.codec.http.EmptyHttpHeaders v0;
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
int v2;
v0 := @this: io.netty.handler.codec.http.EmptyHttpHeaders;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http.HttpHeaders addShort(java.lang.CharSequence, short)
{
io.netty.handler.codec.http.EmptyHttpHeaders v0;
java.lang.UnsupportedOperationException v3;
short v2;
java.lang.CharSequence v1;
v0 := @this: io.netty.handler.codec.http.EmptyHttpHeaders;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: short;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http.HttpHeaders set(java.lang.String, java.lang.Object)
{
io.netty.handler.codec.http.EmptyHttpHeaders v0;
java.lang.UnsupportedOperationException v3;
java.lang.Object v2;
java.lang.String v1;
v0 := @this: io.netty.handler.codec.http.EmptyHttpHeaders;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http.HttpHeaders set(java.lang.String, java.lang.Iterable)
{
io.netty.handler.codec.http.EmptyHttpHeaders v0;
java.lang.UnsupportedOperationException v3;
java.lang.String v1;
java.lang.Iterable v2;
v0 := @this: io.netty.handler.codec.http.EmptyHttpHeaders;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Iterable;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http.HttpHeaders setInt(java.lang.CharSequence, int)
{
io.netty.handler.codec.http.EmptyHttpHeaders v0;
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
int v2;
v0 := @this: io.netty.handler.codec.http.EmptyHttpHeaders;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http.HttpHeaders setShort(java.lang.CharSequence, short)
{
io.netty.handler.codec.http.EmptyHttpHeaders v0;
java.lang.UnsupportedOperationException v3;
short v2;
java.lang.CharSequence v1;
v0 := @this: io.netty.handler.codec.http.EmptyHttpHeaders;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: short;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http.HttpHeaders remove(java.lang.String)
{
io.netty.handler.codec.http.EmptyHttpHeaders v0;
java.lang.UnsupportedOperationException v2;
java.lang.String v1;
v0 := @this: io.netty.handler.codec.http.EmptyHttpHeaders;
v1 := @parameter0: java.lang.String;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v2;
}
public io.netty.handler.codec.http.HttpHeaders clear()
{
io.netty.handler.codec.http.EmptyHttpHeaders v0;
java.lang.UnsupportedOperationException v1;
v0 := @this: io.netty.handler.codec.http.EmptyHttpHeaders;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v1;
}
public java.util.Iterator iterator()
{
io.netty.handler.codec.http.EmptyHttpHeaders v0;
java.util.List v1;
java.util.Iterator v2;
v0 := @this: io.netty.handler.codec.http.EmptyHttpHeaders;
v1 = virtualinvoke v0.<io.netty.handler.codec.http.EmptyHttpHeaders: java.util.List entries()>();
v2 = interfaceinvoke v1.<java.util.List: java.util.Iterator iterator()>();
return v2;
}
public java.util.Iterator iteratorCharSequence()
{
io.netty.handler.codec.http.EmptyHttpHeaders v0;
java.util.Iterator v1;
v0 := @this: io.netty.handler.codec.http.EmptyHttpHeaders;
v1 = <io.netty.handler.codec.http.EmptyHttpHeaders: java.util.Iterator EMPTY_CHARS_ITERATOR>;
return v1;
}
static void <clinit>()
{
io.netty.handler.codec.http.EmptyHttpHeaders v2;
java.util.List v0;
java.util.Iterator v1;
v0 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
v1 = interfaceinvoke v0.<java.util.List: java.util.Iterator iterator()>();
<io.netty.handler.codec.http.EmptyHttpHeaders: java.util.Iterator EMPTY_CHARS_ITERATOR> = v1;
v2 = staticinvoke <io.netty.handler.codec.http.EmptyHttpHeaders: io.netty.handler.codec.http.EmptyHttpHeaders instance()>();
<io.netty.handler.codec.http.EmptyHttpHeaders: io.netty.handler.codec.http.EmptyHttpHeaders INSTANCE> = v2;
return;
}
}