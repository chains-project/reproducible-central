public abstract class io.netty.handler.codec.http.HttpObjectDecoder extends io.netty.handler.codec.ByteToMessageDecoder
{
public static final int DEFAULT_MAX_INITIAL_LINE_LENGTH;
public static final int DEFAULT_MAX_HEADER_SIZE;
public static final boolean DEFAULT_CHUNKED_SUPPORTED;
public static final boolean DEFAULT_ALLOW_PARTIAL_CHUNKS;
public static final int DEFAULT_MAX_CHUNK_SIZE;
public static final boolean DEFAULT_VALIDATE_HEADERS;
public static final int DEFAULT_INITIAL_BUFFER_SIZE;
public static final boolean DEFAULT_ALLOW_DUPLICATE_CONTENT_LENGTHS;
private final int maxChunkSize;
private final boolean chunkedSupported;
private final boolean allowPartialChunks;
protected final boolean validateHeaders;
private final boolean allowDuplicateContentLengths;
private final io.netty.buffer.ByteBuf parserScratchBuffer;
private final io.netty.handler.codec.http.HttpObjectDecoder$HeaderParser headerParser;
private final io.netty.handler.codec.http.HttpObjectDecoder$LineParser lineParser;
private io.netty.handler.codec.http.HttpMessage message;
private long chunkSize;
private long contentLength;
private final java.util.concurrent.atomic.AtomicBoolean resetRequested;
private io.netty.util.AsciiString name;
private java.lang.String value;
private io.netty.handler.codec.http.LastHttpContent trailer;
private io.netty.handler.codec.http.HttpObjectDecoder$State currentState;
private static final boolean[] SP_LENIENT_BYTES;
private static final boolean[] LATIN_WHITESPACE;
private static final boolean[] ISO_CONTROL_OR_WHITESPACE;
private static final io.netty.util.ByteProcessor SKIP_CONTROL_CHARS_BYTES;
static final boolean $assertionsDisabled;
protected void handlerRemoved0(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
java.lang.Throwable v3;
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.codec.http.HttpObjectDecoder v0;
io.netty.buffer.ByteBuf v2;
v0 := @this: io.netty.handler.codec.http.HttpObjectDecoder;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
label1:
v2 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.buffer.ByteBuf parserScratchBuffer>;
virtualinvoke v2.<io.netty.buffer.ByteBuf: boolean release()>();
label2:
specialinvoke v0.<io.netty.handler.codec.ByteToMessageDecoder: void handlerRemoved0(io.netty.channel.ChannelHandlerContext)>(v1);
goto label4;
label3:
v3 := @caughtexception;
specialinvoke v0.<io.netty.handler.codec.ByteToMessageDecoder: void handlerRemoved0(io.netty.channel.ChannelHandlerContext)>(v1);
throw v3;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
protected void <init>()
{
io.netty.handler.codec.http.HttpObjectDecoder v0;
v0 := @this: io.netty.handler.codec.http.HttpObjectDecoder;
specialinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: void <init>(int,int,int,boolean)>(4096, 8192, 8192, 1);
return;
}
protected void <init>(int, int, int, boolean)
{
io.netty.handler.codec.http.HttpObjectDecoder v0;
int v1, v2, v3;
boolean v4;
v0 := @this: io.netty.handler.codec.http.HttpObjectDecoder;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
specialinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: void <init>(int,int,int,boolean,boolean)>(v1, v2, v3, v4, 1);
return;
}
protected void <init>(int, int, int, boolean, boolean)
{
io.netty.handler.codec.http.HttpObjectDecoder v0;
int v1, v2, v3;
boolean v4, v5;
v0 := @this: io.netty.handler.codec.http.HttpObjectDecoder;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 := @parameter4: boolean;
specialinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: void <init>(int,int,int,boolean,boolean,int)>(v1, v2, v3, v4, v5, 128);
return;
}
protected void <init>(int, int, int, boolean, boolean, int)
{
io.netty.handler.codec.http.HttpObjectDecoder v0;
int v1, v2, v3, v6;
boolean v4, v5;
v0 := @this: io.netty.handler.codec.http.HttpObjectDecoder;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 := @parameter4: boolean;
v6 := @parameter5: int;
specialinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: void <init>(int,int,int,boolean,boolean,int,boolean)>(v1, v2, v3, v4, v5, v6, 0);
return;
}
protected void <init>(int, int, int, boolean, boolean, int, boolean)
{
io.netty.handler.codec.http.HttpObjectDecoder v0;
int v1, v2, v3, v6;
boolean v4, v5, v7;
v0 := @this: io.netty.handler.codec.http.HttpObjectDecoder;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 := @parameter4: boolean;
v6 := @parameter5: int;
v7 := @parameter6: boolean;
specialinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: void <init>(int,int,int,boolean,boolean,int,boolean,boolean)>(v1, v2, v3, v4, v5, v6, v7, 1);
return;
}
protected void <init>(int, int, int, boolean, boolean, int, boolean, boolean)
{
java.util.concurrent.atomic.AtomicBoolean v9;
io.netty.handler.codec.http.HttpObjectDecoder$HeaderParser v14;
io.netty.buffer.ByteBuf v11, v13, v15;
int v1, v2, v3, v6;
boolean v4, v5, v7, v8;
io.netty.handler.codec.http.HttpObjectDecoder v0;
io.netty.handler.codec.http.HttpObjectDecoder$State v10;
io.netty.handler.codec.http.HttpObjectDecoder$LineParser v12;
v0 := @this: io.netty.handler.codec.http.HttpObjectDecoder;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 := @parameter4: boolean;
v6 := @parameter5: int;
v7 := @parameter6: boolean;
v8 := @parameter7: boolean;
specialinvoke v0.<io.netty.handler.codec.ByteToMessageDecoder: void <init>()>();
v0.<io.netty.handler.codec.http.HttpObjectDecoder: long contentLength> = -9223372036854775808L;
v9 = new java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v9.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();
v0.<io.netty.handler.codec.http.HttpObjectDecoder: java.util.concurrent.atomic.AtomicBoolean resetRequested> = v9;
v10 = <io.netty.handler.codec.http.HttpObjectDecoder$State: io.netty.handler.codec.http.HttpObjectDecoder$State SKIP_CONTROL_CHARS>;
v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpObjectDecoder$State currentState> = v10;
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositive(int,java.lang.String)>(v1, "maxInitialLineLength");
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositive(int,java.lang.String)>(v2, "maxHeaderSize");
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositive(int,java.lang.String)>(v3, "maxChunkSize");
v11 = staticinvoke <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf buffer(int)>(v6);
v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.buffer.ByteBuf parserScratchBuffer> = v11;
v12 = new io.netty.handler.codec.http.HttpObjectDecoder$LineParser;
v13 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.buffer.ByteBuf parserScratchBuffer>;
specialinvoke v12.<io.netty.handler.codec.http.HttpObjectDecoder$LineParser: void <init>(io.netty.handler.codec.http.HttpObjectDecoder,io.netty.buffer.ByteBuf,int)>(v0, v13, v1);
v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpObjectDecoder$LineParser lineParser> = v12;
v14 = new io.netty.handler.codec.http.HttpObjectDecoder$HeaderParser;
v15 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.buffer.ByteBuf parserScratchBuffer>;
specialinvoke v14.<io.netty.handler.codec.http.HttpObjectDecoder$HeaderParser: void <init>(io.netty.buffer.ByteBuf,int)>(v15, v2);
v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpObjectDecoder$HeaderParser headerParser> = v14;
v0.<io.netty.handler.codec.http.HttpObjectDecoder: int maxChunkSize> = v3;
v0.<io.netty.handler.codec.http.HttpObjectDecoder: boolean chunkedSupported> = v4;
v0.<io.netty.handler.codec.http.HttpObjectDecoder: boolean validateHeaders> = v5;
v0.<io.netty.handler.codec.http.HttpObjectDecoder: boolean allowDuplicateContentLengths> = v7;
v0.<io.netty.handler.codec.http.HttpObjectDecoder: boolean allowPartialChunks> = v8;
return;
}
protected void decode(io.netty.channel.ChannelHandlerContext, io.netty.buffer.ByteBuf, java.util.List) throws java.lang.Exception
{
byte[] v64;
io.netty.handler.codec.http.HttpMessage v16, v19, v24, v28, v33, v39, v42;
byte v30, v31, v52, v58, v76, v90, v95;
io.netty.handler.codec.http.HttpObjectDecoder v0;
java.lang.Exception v18, v41, v72, v98;
long v29, v51, v53, v55, v56, v57, v75, v78, v87, v88, v89;
java.lang.AssertionError v15, v38, v77;
io.netty.handler.codec.http.HttpContent v73, v99;
io.netty.handler.codec.http.HttpObjectDecoder$State v17, v20, v36, v37, v40, v7, v70, v71, v91, v96;
io.netty.handler.codec.http.DefaultHttpContent v47, v61, v85;
io.netty.handler.codec.http.HttpObjectDecoder$LineParser v10, v62;
int[] v21, v6;
boolean v13, v26, v32, v35, v5, v60, v74, v81;
java.util.List v3;
java.util.concurrent.atomic.AtomicBoolean v4;
java.lang.String[] v12;
io.netty.handler.codec.http.LastHttpContent v25, v34, v97;
io.netty.channel.ChannelHandlerContext v1;
io.netty.buffer.ByteBuf v102, v11, v2, v46, v54, v63, v86;
int v100, v101, v14, v22, v23, v43, v44, v45, v48, v49, v50, v65, v66, v67, v68, v69, v79, v8, v80, v82, v83, v84, v9, v92, v93, v94;
java.lang.IllegalArgumentException v27;
io.netty.handler.codec.http.DefaultLastHttpContent v59;
v0 := @this: io.netty.handler.codec.http.HttpObjectDecoder;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 := @parameter2: java.util.List;
v4 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: java.util.concurrent.atomic.AtomicBoolean resetRequested>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
if v5 == 0 goto label01;
specialinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: void resetNow()>();
label01:
v6 = <io.netty.handler.codec.http.HttpObjectDecoder$2: int[] $SwitchMap$io$netty$handler$codec$http$HttpObjectDecoder$State>;
v7 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpObjectDecoder$State currentState>;
v8 = virtualinvoke v7.<io.netty.handler.codec.http.HttpObjectDecoder$State: int ordinal()>();
v9 = v6[v8];
tableswitch(v9)
{
case 1: goto label02;
case 2: goto label30;
case 3: goto label02;
case 4: goto label08;
case 5: goto label23;
case 6: goto label25;
case 7: goto label37;
case 8: goto label42;
case 9: goto label45;
case 10: goto label50;
case 11: goto label51;
default: goto label52;
};
label02:
v10 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpObjectDecoder$LineParser lineParser>;
v11 = virtualinvoke v10.<io.netty.handler.codec.http.HttpObjectDecoder$LineParser: io.netty.buffer.ByteBuf parse(io.netty.buffer.ByteBuf)>(v2);
if v11 != null goto label04;
label03:
return;
label04:
v12 = specialinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: java.lang.String[] splitInitialLine(io.netty.buffer.ByteBuf)>(v11);
v13 = <io.netty.handler.codec.http.HttpObjectDecoder: boolean $assertionsDisabled>;
if v13 != 0 goto label05;
v14 = lengthof v12;
if v14 == 3 goto label05;
v15 = new java.lang.AssertionError;
specialinvoke v15.<java.lang.AssertionError: void <init>(java.lang.Object)>("initialLine::length must be 3");
throw v15;
label05:
v16 = virtualinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpMessage createMessage(java.lang.String[])>(v12);
v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpMessage message> = v16;
v17 = <io.netty.handler.codec.http.HttpObjectDecoder$State: io.netty.handler.codec.http.HttpObjectDecoder$State READ_HEADER>;
v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpObjectDecoder$State currentState> = v17;
label06:
goto label08;
label07:
v18 := @caughtexception;
v19 = specialinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpMessage invalidMessage(io.netty.buffer.ByteBuf,java.lang.Exception)>(v2, v18);
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v19);
return;
label08:
v20 = specialinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpObjectDecoder$State readHeaders(io.netty.buffer.ByteBuf)>(v2);
if v20 != null goto label10;
label09:
return;
label10:
v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpObjectDecoder$State currentState> = v20;
v21 = <io.netty.handler.codec.http.HttpObjectDecoder$2: int[] $SwitchMap$io$netty$handler$codec$http$HttpObjectDecoder$State>;
v22 = virtualinvoke v20.<io.netty.handler.codec.http.HttpObjectDecoder$State: int ordinal()>();
v23 = v21[v22];
lookupswitch(v23)
{
case 1: goto label11;
case 2: goto label13;
default: goto label16;
};
label11:
v24 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpMessage message>;
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v24);
v25 = <io.netty.handler.codec.http.LastHttpContent: io.netty.handler.codec.http.LastHttpContent EMPTY_LAST_CONTENT>;
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v25);
specialinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: void resetNow()>();
label12:
return;
label13:
v26 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: boolean chunkedSupported>;
if v26 != 0 goto label14;
v27 = new java.lang.IllegalArgumentException;
specialinvoke v27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Chunked messages not supported");
throw v27;
label14:
v28 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpMessage message>;
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v28);
label15:
return;
label16:
v29 = specialinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: long contentLength()>();
v30 = v29 cmp 0L;
if v30 == 0 goto label17;
v31 = v29 cmp -1L;
if v31 != 0 goto label19;
v32 = virtualinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: boolean isDecodingRequest()>();
if v32 == 0 goto label19;
label17:
v33 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpMessage message>;
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v33);
v34 = <io.netty.handler.codec.http.LastHttpContent: io.netty.handler.codec.http.LastHttpContent EMPTY_LAST_CONTENT>;
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v34);
specialinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: void resetNow()>();
label18:
return;
label19:
v35 = <io.netty.handler.codec.http.HttpObjectDecoder: boolean $assertionsDisabled>;
if v35 != 0 goto label20;
v36 = <io.netty.handler.codec.http.HttpObjectDecoder$State: io.netty.handler.codec.http.HttpObjectDecoder$State READ_FIXED_LENGTH_CONTENT>;
if v20 == v36 goto label20;
v37 = <io.netty.handler.codec.http.HttpObjectDecoder$State: io.netty.handler.codec.http.HttpObjectDecoder$State READ_VARIABLE_LENGTH_CONTENT>;
if v20 == v37 goto label20;
v38 = new java.lang.AssertionError;
specialinvoke v38.<java.lang.AssertionError: void <init>()>();
throw v38;
label20:
v39 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpMessage message>;
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v39);
v40 = <io.netty.handler.codec.http.HttpObjectDecoder$State: io.netty.handler.codec.http.HttpObjectDecoder$State READ_FIXED_LENGTH_CONTENT>;
if v20 != v40 goto label21;
v0.<io.netty.handler.codec.http.HttpObjectDecoder: long chunkSize> = v29;
label21:
return;
label22:
v41 := @caughtexception;
v42 = specialinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpMessage invalidMessage(io.netty.buffer.ByteBuf,java.lang.Exception)>(v2, v41);
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v42);
return;
label23:
v43 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readableBytes()>();
v44 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: int maxChunkSize>;
v45 = staticinvoke <java.lang.Math: int min(int,int)>(v43, v44);
if v45 <= 0 goto label24;
v46 = virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readRetainedSlice(int)>(v45);
v47 = new io.netty.handler.codec.http.DefaultHttpContent;
specialinvoke v47.<io.netty.handler.codec.http.DefaultHttpContent: void <init>(io.netty.buffer.ByteBuf)>(v46);
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v47);
label24:
return;
label25:
v48 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readableBytes()>();
if v48 != 0 goto label26;
return;
label26:
v49 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: int maxChunkSize>;
v50 = staticinvoke <java.lang.Math: int min(int,int)>(v48, v49);
v51 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: long chunkSize>;
v52 = v50 cmp v51;
if v52 <= 0 goto label27;
v53 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: long chunkSize>;
label27:
v54 = virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readRetainedSlice(int)>(v53);
v55 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: long chunkSize>;
v56 = v55 - v50;
v0.<io.netty.handler.codec.http.HttpObjectDecoder: long chunkSize> = v56;
v57 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: long chunkSize>;
v58 = v57 cmp 0L;
if v58 != 0 goto label28;
v59 = new io.netty.handler.codec.http.DefaultLastHttpContent;
v60 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: boolean validateHeaders>;
specialinvoke v59.<io.netty.handler.codec.http.DefaultLastHttpContent: void <init>(io.netty.buffer.ByteBuf,boolean)>(v54, v60);
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v59);
specialinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: void resetNow()>();
goto label29;
label28:
v61 = new io.netty.handler.codec.http.DefaultHttpContent;
specialinvoke v61.<io.netty.handler.codec.http.DefaultHttpContent: void <init>(io.netty.buffer.ByteBuf)>(v54);
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v61);
label29:
return;
label30:
v62 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpObjectDecoder$LineParser lineParser>;
v63 = virtualinvoke v62.<io.netty.handler.codec.http.HttpObjectDecoder$LineParser: io.netty.buffer.ByteBuf parse(io.netty.buffer.ByteBuf)>(v2);
if v63 != null goto label32;
label31:
return;
label32:
v64 = virtualinvoke v63.<io.netty.buffer.ByteBuf: byte[] array()>();
v65 = virtualinvoke v63.<io.netty.buffer.ByteBuf: int arrayOffset()>();
v66 = virtualinvoke v63.<io.netty.buffer.ByteBuf: int readerIndex()>();
v67 = v65 + v66;
v68 = virtualinvoke v63.<io.netty.buffer.ByteBuf: int readableBytes()>();
v69 = staticinvoke <io.netty.handler.codec.http.HttpObjectDecoder: int getChunkSize(byte[],int,int)>(v64, v67, v68);
v0.<io.netty.handler.codec.http.HttpObjectDecoder: long chunkSize> = v69;
if v69 != 0 goto label34;
v70 = <io.netty.handler.codec.http.HttpObjectDecoder$State: io.netty.handler.codec.http.HttpObjectDecoder$State READ_CHUNK_FOOTER>;
v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpObjectDecoder$State currentState> = v70;
label33:
return;
label34:
v71 = <io.netty.handler.codec.http.HttpObjectDecoder$State: io.netty.handler.codec.http.HttpObjectDecoder$State READ_CHUNKED_CONTENT>;
v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpObjectDecoder$State currentState> = v71;
label35:
goto label37;
label36:
v72 := @caughtexception;
v73 = specialinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpContent invalidChunk(io.netty.buffer.ByteBuf,java.lang.Exception)>(v2, v72);
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v73);
return;
label37:
v74 = <io.netty.handler.codec.http.HttpObjectDecoder: boolean $assertionsDisabled>;
if v74 != 0 goto label38;
v75 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: long chunkSize>;
v76 = v75 cmp 2147483647L;
if v76 <= 0 goto label38;
v77 = new java.lang.AssertionError;
specialinvoke v77.<java.lang.AssertionError: void <init>()>();
throw v77;
label38:
v78 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: long chunkSize>;
v79 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: int maxChunkSize>;
v80 = staticinvoke <java.lang.Math: int min(int,int)>(v78, v79);
v81 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: boolean allowPartialChunks>;
if v81 != 0 goto label39;
v82 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readableBytes()>();
if v82 >= v80 goto label39;
return;
label39:
v83 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readableBytes()>();
v84 = staticinvoke <java.lang.Math: int min(int,int)>(v80, v83);
if v84 != 0 goto label40;
return;
label40:
v85 = new io.netty.handler.codec.http.DefaultHttpContent;
v86 = virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readRetainedSlice(int)>(v84);
specialinvoke v85.<io.netty.handler.codec.http.DefaultHttpContent: void <init>(io.netty.buffer.ByteBuf)>(v86);
v87 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: long chunkSize>;
v88 = v87 - v84;
v0.<io.netty.handler.codec.http.HttpObjectDecoder: long chunkSize> = v88;
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v85);
v89 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: long chunkSize>;
v90 = v89 cmp 0L;
if v90 == 0 goto label41;
return;
label41:
v91 = <io.netty.handler.codec.http.HttpObjectDecoder$State: io.netty.handler.codec.http.HttpObjectDecoder$State READ_CHUNK_DELIMITER>;
v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpObjectDecoder$State currentState> = v91;
label42:
v92 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int writerIndex()>();
v93 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readerIndex()>();
label43:
if v92 <= v93 goto label44;
v94 = v93;
v93 = v93 + 1;
v95 = virtualinvoke v2.<io.netty.buffer.ByteBuf: byte getByte(int)>(v94);
if v95 != 10 goto label43;
v96 = <io.netty.handler.codec.http.HttpObjectDecoder$State: io.netty.handler.codec.http.HttpObjectDecoder$State READ_CHUNK_SIZE>;
v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpObjectDecoder$State currentState> = v96;
label44:
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readerIndex(int)>(v93);
return;
label45:
v97 = specialinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.LastHttpContent readTrailingHeaders(io.netty.buffer.ByteBuf)>(v2);
if v97 != null goto label47;
label46:
return;
label47:
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v97);
specialinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: void resetNow()>();
label48:
return;
label49:
v98 := @caughtexception;
v99 = specialinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpContent invalidChunk(io.netty.buffer.ByteBuf,java.lang.Exception)>(v2, v98);
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v99);
return;
label50:
v100 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readableBytes()>();
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf skipBytes(int)>(v100);
goto label52;
label51:
v101 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readableBytes()>();
if v101 <= 0 goto label52;
v102 = virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readBytes(int)>(v101);
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v102);
label52:
return;
catch java.lang.Exception from label02 to label03 with label07;
catch java.lang.Exception from label04 to label06 with label07;
catch java.lang.Exception from label08 to label09 with label22;
catch java.lang.Exception from label10 to label12 with label22;
catch java.lang.Exception from label13 to label15 with label22;
catch java.lang.Exception from label16 to label18 with label22;
catch java.lang.Exception from label19 to label21 with label22;
catch java.lang.Exception from label30 to label31 with label36;
catch java.lang.Exception from label32 to label33 with label36;
catch java.lang.Exception from label34 to label35 with label36;
catch java.lang.Exception from label45 to label46 with label49;
catch java.lang.Exception from label47 to label48 with label49;
}
protected void decodeLast(io.netty.channel.ChannelHandlerContext, io.netty.buffer.ByteBuf, java.util.List) throws java.lang.Exception
{
io.netty.handler.codec.PrematureChannelClosureException v16;
io.netty.handler.codec.http.HttpMessage v17, v6, v7;
java.util.concurrent.atomic.AtomicBoolean v4;
long v20;
io.netty.handler.codec.http.LastHttpContent v12, v23;
io.netty.channel.ChannelHandlerContext v1;
byte v21;
io.netty.buffer.ByteBuf v15, v2;
boolean v11, v18, v19, v22, v5, v8;
io.netty.handler.codec.http.HttpObjectDecoder v0;
io.netty.handler.codec.http.HttpObjectDecoder$State v10, v13, v14, v9;
java.util.List v3;
v0 := @this: io.netty.handler.codec.http.HttpObjectDecoder;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 := @parameter2: java.util.List;
specialinvoke v0.<io.netty.handler.codec.ByteToMessageDecoder: void decodeLast(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)>(v1, v2, v3);
v4 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: java.util.concurrent.atomic.AtomicBoolean resetRequested>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
if v5 == 0 goto label01;
specialinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: void resetNow()>();
label01:
v6 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpMessage message>;
if v6 == null goto label10;
v7 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpMessage message>;
v8 = staticinvoke <io.netty.handler.codec.http.HttpUtil: boolean isTransferEncodingChunked(io.netty.handler.codec.http.HttpMessage)>(v7);
v9 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpObjectDecoder$State currentState>;
v10 = <io.netty.handler.codec.http.HttpObjectDecoder$State: io.netty.handler.codec.http.HttpObjectDecoder$State READ_VARIABLE_LENGTH_CONTENT>;
if v9 != v10 goto label02;
v11 = virtualinvoke v2.<io.netty.buffer.ByteBuf: boolean isReadable()>();
if v11 != 0 goto label02;
if v8 != 0 goto label02;
v12 = <io.netty.handler.codec.http.LastHttpContent: io.netty.handler.codec.http.LastHttpContent EMPTY_LAST_CONTENT>;
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v12);
specialinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: void resetNow()>();
return;
label02:
v13 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpObjectDecoder$State currentState>;
v14 = <io.netty.handler.codec.http.HttpObjectDecoder$State: io.netty.handler.codec.http.HttpObjectDecoder$State READ_HEADER>;
if v13 != v14 goto label03;
v15 = <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf EMPTY_BUFFER>;
v16 = new io.netty.handler.codec.PrematureChannelClosureException;
specialinvoke v16.<io.netty.handler.codec.PrematureChannelClosureException: void <init>(java.lang.String)>("Connection closed before received headers");
v17 = specialinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpMessage invalidMessage(io.netty.buffer.ByteBuf,java.lang.Exception)>(v15, v16);
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v17);
specialinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: void resetNow()>();
return;
label03:
v18 = virtualinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: boolean isDecodingRequest()>();
if v18 != 0 goto label04;
if v8 == 0 goto label05;
label04:
v19 = 1;
goto label08;
label05:
v20 = specialinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: long contentLength()>();
v21 = v20 cmp 0L;
if v21 <= 0 goto label06;
v22 = 1;
goto label07;
label06:
v22 = 0;
label07:
v19 = v22;
label08:
if v19 != 0 goto label09;
v23 = <io.netty.handler.codec.http.LastHttpContent: io.netty.handler.codec.http.LastHttpContent EMPTY_LAST_CONTENT>;
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v23);
label09:
specialinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: void resetNow()>();
label10:
return;
}
public void userEventTriggered(io.netty.channel.ChannelHandlerContext, java.lang.Object) throws java.lang.Exception
{
io.netty.handler.codec.http.HttpObjectDecoder v0;
io.netty.handler.codec.http.HttpObjectDecoder$State v5;
io.netty.channel.ChannelHandlerContext v1;
int[] v4;
int v6, v7;
java.lang.Object v2;
boolean v3;
v0 := @this: io.netty.handler.codec.http.HttpObjectDecoder;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 = v2 instanceof io.netty.handler.codec.http.HttpExpectationFailedEvent;
if v3 == 0 goto label2;
v4 = <io.netty.handler.codec.http.HttpObjectDecoder$2: int[] $SwitchMap$io$netty$handler$codec$http$HttpObjectDecoder$State>;
v5 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpObjectDecoder$State currentState>;
v6 = virtualinvoke v5.<io.netty.handler.codec.http.HttpObjectDecoder$State: int ordinal()>();
v7 = v4[v6];
tableswitch(v7)
{
case 2: goto label1;
case 3: goto label2;
case 4: goto label2;
case 5: goto label1;
case 6: goto label1;
default: goto label2;
};
label1:
virtualinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: void reset()>();
label2:
specialinvoke v0.<io.netty.handler.codec.ByteToMessageDecoder: void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)>(v1, v2);
return;
}
protected boolean isContentAlwaysEmpty(io.netty.handler.codec.http.HttpMessage)
{
io.netty.handler.codec.http.HttpObjectDecoder v0;
io.netty.handler.codec.http.HttpHeaders v10, v7;
io.netty.handler.codec.http.HttpMessage v1;
io.netty.util.AsciiString v11, v12, v8;
io.netty.handler.codec.http.HttpResponseStatus v3;
io.netty.handler.codec.http.HttpStatusClass v5, v6;
int v4;
boolean v13, v14, v2, v9;
v0 := @this: io.netty.handler.codec.http.HttpObjectDecoder;
v1 := @parameter0: io.netty.handler.codec.http.HttpMessage;
v2 = v1 instanceof io.netty.handler.codec.http.HttpResponse;
if v2 == 0 goto label7;
v3 = interfaceinvoke v1.<io.netty.handler.codec.http.HttpResponse: io.netty.handler.codec.http.HttpResponseStatus status()>();
v4 = virtualinvoke v3.<io.netty.handler.codec.http.HttpResponseStatus: int code()>();
v5 = virtualinvoke v3.<io.netty.handler.codec.http.HttpResponseStatus: io.netty.handler.codec.http.HttpStatusClass codeClass()>();
v6 = <io.netty.handler.codec.http.HttpStatusClass: io.netty.handler.codec.http.HttpStatusClass INFORMATIONAL>;
if v5 != v6 goto label4;
if v4 != 101 goto label1;
v7 = interfaceinvoke v1.<io.netty.handler.codec.http.HttpResponse: io.netty.handler.codec.http.HttpHeaders headers()>();
v8 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString SEC_WEBSOCKET_ACCEPT>;
v9 = virtualinvoke v7.<io.netty.handler.codec.http.HttpHeaders: boolean contains(java.lang.CharSequence)>(v8);
if v9 != 0 goto label1;
v10 = interfaceinvoke v1.<io.netty.handler.codec.http.HttpResponse: io.netty.handler.codec.http.HttpHeaders headers()>();
v11 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString UPGRADE>;
v12 = <io.netty.handler.codec.http.HttpHeaderValues: io.netty.util.AsciiString WEBSOCKET>;
v13 = virtualinvoke v10.<io.netty.handler.codec.http.HttpHeaders: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)>(v11, v12, 1);
if v13 != 0 goto label2;
label1:
v14 = 1;
goto label3;
label2:
v14 = 0;
label3:
return v14;
label4:
lookupswitch(v4)
{
case 204: goto label5;
case 304: goto label5;
default: goto label6;
};
label5:
return 1;
label6:
return 0;
label7:
return 0;
}
protected boolean isSwitchingToNonHttp1Protocol(io.netty.handler.codec.http.HttpResponse)
{
io.netty.handler.codec.http.HttpVersion v12, v9;
io.netty.handler.codec.http.HttpHeaders v6;
io.netty.util.AsciiString v7;
int v3, v5;
java.lang.String v10, v13, v8;
boolean v11, v14, v15;
io.netty.handler.codec.http.HttpObjectDecoder v0;
io.netty.handler.codec.http.HttpResponseStatus v2, v4;
io.netty.handler.codec.http.HttpResponse v1;
v0 := @this: io.netty.handler.codec.http.HttpObjectDecoder;
v1 := @parameter0: io.netty.handler.codec.http.HttpResponse;
v2 = interfaceinvoke v1.<io.netty.handler.codec.http.HttpResponse: io.netty.handler.codec.http.HttpResponseStatus status()>();
v3 = virtualinvoke v2.<io.netty.handler.codec.http.HttpResponseStatus: int code()>();
v4 = <io.netty.handler.codec.http.HttpResponseStatus: io.netty.handler.codec.http.HttpResponseStatus SWITCHING_PROTOCOLS>;
v5 = virtualinvoke v4.<io.netty.handler.codec.http.HttpResponseStatus: int code()>();
if v3 == v5 goto label1;
return 0;
label1:
v6 = interfaceinvoke v1.<io.netty.handler.codec.http.HttpResponse: io.netty.handler.codec.http.HttpHeaders headers()>();
v7 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString UPGRADE>;
v8 = virtualinvoke v6.<io.netty.handler.codec.http.HttpHeaders: java.lang.String get(java.lang.CharSequence)>(v7);
if v8 == null goto label2;
v9 = <io.netty.handler.codec.http.HttpVersion: io.netty.handler.codec.http.HttpVersion HTTP_1_0>;
v10 = virtualinvoke v9.<io.netty.handler.codec.http.HttpVersion: java.lang.String text()>();
v11 = virtualinvoke v8.<java.lang.String: boolean contains(java.lang.CharSequence)>(v10);
if v11 != 0 goto label3;
v12 = <io.netty.handler.codec.http.HttpVersion: io.netty.handler.codec.http.HttpVersion HTTP_1_1>;
v13 = virtualinvoke v12.<io.netty.handler.codec.http.HttpVersion: java.lang.String text()>();
v14 = virtualinvoke v8.<java.lang.String: boolean contains(java.lang.CharSequence)>(v13);
if v14 != 0 goto label3;
label2:
v15 = 1;
goto label4;
label3:
v15 = 0;
label4:
return v15;
}
public void reset()
{
io.netty.handler.codec.http.HttpObjectDecoder v0;
java.util.concurrent.atomic.AtomicBoolean v1;
v0 := @this: io.netty.handler.codec.http.HttpObjectDecoder;
v1 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: java.util.concurrent.atomic.AtomicBoolean resetRequested>;
virtualinvoke v1.<java.util.concurrent.atomic.AtomicBoolean: void lazySet(boolean)>(1);
return;
}
private void resetNow()
{
io.netty.handler.codec.http.HttpObjectDecoder v0;
io.netty.handler.codec.http.HttpObjectDecoder$State v6, v8;
io.netty.handler.codec.http.HttpMessage v1;
java.util.concurrent.atomic.AtomicBoolean v7;
io.netty.handler.codec.http.HttpObjectDecoder$HeaderParser v3;
io.netty.handler.codec.http.HttpObjectDecoder$LineParser v2;
boolean v4, v5;
v0 := @this: io.netty.handler.codec.http.HttpObjectDecoder;
v1 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpMessage message>;
v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpMessage message> = null;
v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.util.AsciiString name> = null;
v0.<io.netty.handler.codec.http.HttpObjectDecoder: java.lang.String value> = null;
v0.<io.netty.handler.codec.http.HttpObjectDecoder: long contentLength> = -9223372036854775808L;
v2 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpObjectDecoder$LineParser lineParser>;
virtualinvoke v2.<io.netty.handler.codec.http.HttpObjectDecoder$LineParser: void reset()>();
v3 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpObjectDecoder$HeaderParser headerParser>;
virtualinvoke v3.<io.netty.handler.codec.http.HttpObjectDecoder$HeaderParser: void reset()>();
v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.LastHttpContent trailer> = null;
v4 = virtualinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: boolean isDecodingRequest()>();
if v4 != 0 goto label1;
if v1 == null goto label1;
v5 = virtualinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: boolean isSwitchingToNonHttp1Protocol(io.netty.handler.codec.http.HttpResponse)>(v1);
if v5 == 0 goto label1;
v6 = <io.netty.handler.codec.http.HttpObjectDecoder$State: io.netty.handler.codec.http.HttpObjectDecoder$State UPGRADED>;
v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpObjectDecoder$State currentState> = v6;
return;
label1:
v7 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: java.util.concurrent.atomic.AtomicBoolean resetRequested>;
virtualinvoke v7.<java.util.concurrent.atomic.AtomicBoolean: void lazySet(boolean)>(0);
v8 = <io.netty.handler.codec.http.HttpObjectDecoder$State: io.netty.handler.codec.http.HttpObjectDecoder$State SKIP_CONTROL_CHARS>;
v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpObjectDecoder$State currentState> = v8;
return;
}
private io.netty.handler.codec.http.HttpMessage invalidMessage(io.netty.buffer.ByteBuf, java.lang.Exception)
{
io.netty.handler.codec.http.HttpObjectDecoder v0;
io.netty.handler.codec.http.HttpObjectDecoder$State v3;
io.netty.handler.codec.http.HttpMessage v5, v6, v7, v9;
java.lang.Exception v2;
io.netty.handler.codec.DecoderResult v8;
io.netty.buffer.ByteBuf v1;
int v4;
v0 := @this: io.netty.handler.codec.http.HttpObjectDecoder;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 := @parameter1: java.lang.Exception;
v3 = <io.netty.handler.codec.http.HttpObjectDecoder$State: io.netty.handler.codec.http.HttpObjectDecoder$State BAD_MESSAGE>;
v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpObjectDecoder$State currentState> = v3;
v4 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf skipBytes(int)>(v4);
v5 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpMessage message>;
if v5 != null goto label1;
v6 = virtualinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpMessage createInvalidMessage()>();
v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpMessage message> = v6;
label1:
v7 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpMessage message>;
v8 = staticinvoke <io.netty.handler.codec.DecoderResult: io.netty.handler.codec.DecoderResult failure(java.lang.Throwable)>(v2);
interfaceinvoke v7.<io.netty.handler.codec.http.HttpMessage: void setDecoderResult(io.netty.handler.codec.DecoderResult)>(v8);
v9 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpMessage message>;
v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpMessage message> = null;
return v9;
}
private io.netty.handler.codec.http.HttpContent invalidChunk(io.netty.buffer.ByteBuf, java.lang.Exception)
{
io.netty.handler.codec.http.HttpObjectDecoder v0;
io.netty.handler.codec.http.HttpObjectDecoder$State v3;
java.lang.Exception v2;
io.netty.handler.codec.DecoderResult v7;
io.netty.buffer.ByteBuf v1, v6;
io.netty.handler.codec.http.DefaultLastHttpContent v5;
int v4;
v0 := @this: io.netty.handler.codec.http.HttpObjectDecoder;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 := @parameter1: java.lang.Exception;
v3 = <io.netty.handler.codec.http.HttpObjectDecoder$State: io.netty.handler.codec.http.HttpObjectDecoder$State BAD_MESSAGE>;
v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpObjectDecoder$State currentState> = v3;
v4 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf skipBytes(int)>(v4);
v5 = new io.netty.handler.codec.http.DefaultLastHttpContent;
v6 = <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf EMPTY_BUFFER>;
specialinvoke v5.<io.netty.handler.codec.http.DefaultLastHttpContent: void <init>(io.netty.buffer.ByteBuf)>(v6);
v7 = staticinvoke <io.netty.handler.codec.DecoderResult: io.netty.handler.codec.DecoderResult failure(java.lang.Throwable)>(v2);
interfaceinvoke v5.<io.netty.handler.codec.http.HttpContent: void setDecoderResult(io.netty.handler.codec.DecoderResult)>(v7);
v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpMessage message> = null;
v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.LastHttpContent trailer> = null;
return v5;
}
private io.netty.handler.codec.http.HttpObjectDecoder$State readHeaders(io.netty.buffer.ByteBuf)
{
byte[] v7;
io.netty.handler.codec.http.HttpHeaders v3;
io.netty.handler.codec.http.HttpMessage v2;
io.netty.util.AsciiString v12, v17, v18, v20, v21, v27, v45;
byte v11, v38, v56;
java.lang.Long v47;
boolean v29, v34, v35, v44, v48, v50, v51;
io.netty.handler.codec.http.HttpObjectDecoder v0;
java.util.List v28;
io.netty.handler.codec.http.HttpVersion v30, v52, v53;
long v36, v37, v42, v46, v55;
io.netty.handler.codec.http.HttpObjectDecoder$HeaderParser v4;
io.netty.buffer.ByteBuf v1, v5;
io.netty.handler.codec.http.HttpMessageDecoderResult v23;
int v10, v25, v26, v31, v32, v33, v41, v6, v8, v9;
java.lang.String v13, v14, v15, v16, v19, v22, v40, v43;
io.netty.handler.codec.http.HttpObjectDecoder$State v49, v54, v57, v58;
java.lang.Object v39;
io.netty.handler.codec.http.HttpObjectDecoder$LineParser v24;
v0 := @this: io.netty.handler.codec.http.HttpObjectDecoder;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpMessage message>;
v3 = interfaceinvoke v2.<io.netty.handler.codec.http.HttpMessage: io.netty.handler.codec.http.HttpHeaders headers()>();
v4 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpObjectDecoder$HeaderParser headerParser>;
v5 = virtualinvoke v4.<io.netty.handler.codec.http.HttpObjectDecoder$HeaderParser: io.netty.buffer.ByteBuf parse(io.netty.buffer.ByteBuf)>(v1);
if v5 != null goto label01;
return null;
label01:
v6 = virtualinvoke v5.<io.netty.buffer.ByteBuf: int readableBytes()>();
label02:
if v6 <= 0 goto label08;
v7 = virtualinvoke v5.<io.netty.buffer.ByteBuf: byte[] array()>();
v8 = virtualinvoke v5.<io.netty.buffer.ByteBuf: int arrayOffset()>();
v9 = virtualinvoke v5.<io.netty.buffer.ByteBuf: int readerIndex()>();
v10 = v8 + v9;
v11 = v7[v10];
v12 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.util.AsciiString name>;
if v12 == null goto label04;
if v11 == 32 goto label03;
if v11 != 9 goto label04;
label03:
v13 = staticinvoke <io.netty.handler.codec.http.HttpObjectDecoder: java.lang.String langAsciiString(byte[],int,int)>(v7, v10, v6);
v14 = virtualinvoke v13.<java.lang.String: java.lang.String trim()>();
v15 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: java.lang.String value>;
v16 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v15, v14) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 \u0001");
v0.<io.netty.handler.codec.http.HttpObjectDecoder: java.lang.String value> = v16;
goto label06;
label04:
v17 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.util.AsciiString name>;
if v17 == null goto label05;
v18 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.util.AsciiString name>;
v19 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: java.lang.String value>;
virtualinvoke v3.<io.netty.handler.codec.http.HttpHeaders: io.netty.handler.codec.http.HttpHeaders add(java.lang.CharSequence,java.lang.Object)>(v18, v19);
label05:
specialinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: void splitHeader(byte[],int,int)>(v7, v10, v6);
label06:
v5 = virtualinvoke v4.<io.netty.handler.codec.http.HttpObjectDecoder$HeaderParser: io.netty.buffer.ByteBuf parse(io.netty.buffer.ByteBuf)>(v1);
if v5 != null goto label07;
return null;
label07:
v6 = virtualinvoke v5.<io.netty.buffer.ByteBuf: int readableBytes()>();
goto label02;
label08:
v20 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.util.AsciiString name>;
if v20 == null goto label09;
v21 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.util.AsciiString name>;
v22 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: java.lang.String value>;
virtualinvoke v3.<io.netty.handler.codec.http.HttpHeaders: io.netty.handler.codec.http.HttpHeaders add(java.lang.CharSequence,java.lang.Object)>(v21, v22);
label09:
v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.util.AsciiString name> = null;
v0.<io.netty.handler.codec.http.HttpObjectDecoder: java.lang.String value> = null;
v23 = new io.netty.handler.codec.http.HttpMessageDecoderResult;
v24 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpObjectDecoder$LineParser lineParser>;
v25 = v24.<io.netty.handler.codec.http.HttpObjectDecoder$LineParser: int size>;
v26 = v4.<io.netty.handler.codec.http.HttpObjectDecoder$HeaderParser: int size>;
specialinvoke v23.<io.netty.handler.codec.http.HttpMessageDecoderResult: void <init>(int,int)>(v25, v26);
interfaceinvoke v2.<io.netty.handler.codec.http.HttpMessage: void setDecoderResult(io.netty.handler.codec.DecoderResult)>(v23);
v27 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString CONTENT_LENGTH>;
v28 = virtualinvoke v3.<io.netty.handler.codec.http.HttpHeaders: java.util.List getAll(java.lang.CharSequence)>(v27);
v29 = interfaceinvoke v28.<java.util.List: boolean isEmpty()>();
if v29 != 0 goto label14;
v30 = interfaceinvoke v2.<io.netty.handler.codec.http.HttpMessage: io.netty.handler.codec.http.HttpVersion protocolVersion()>();
v31 = virtualinvoke v30.<io.netty.handler.codec.http.HttpVersion: int majorVersion()>();
if v31 < 1 goto label10;
v32 = virtualinvoke v30.<io.netty.handler.codec.http.HttpVersion: int majorVersion()>();
if v32 != 1 goto label11;
v33 = virtualinvoke v30.<io.netty.handler.codec.http.HttpVersion: int minorVersion()>();
if v33 != 0 goto label11;
label10:
v34 = 1;
goto label12;
label11:
v34 = 0;
label12:
v35 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: boolean allowDuplicateContentLengths>;
v36 = staticinvoke <io.netty.handler.codec.http.HttpUtil: long normalizeAndGetContentLength(java.util.List,boolean,boolean)>(v28, v34, v35);
v0.<io.netty.handler.codec.http.HttpObjectDecoder: long contentLength> = v36;
v37 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: long contentLength>;
v38 = v37 cmp -1L;
if v38 == 0 goto label14;
v39 = interfaceinvoke v28.<java.util.List: java.lang.Object get(int)>(0);
v40 = virtualinvoke v39.<java.lang.String: java.lang.String trim()>();
v41 = interfaceinvoke v28.<java.util.List: int size()>();
if v41 > 1 goto label13;
v42 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: long contentLength>;
v43 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(v42);
v44 = virtualinvoke v40.<java.lang.String: boolean equals(java.lang.Object)>(v43);
if v44 != 0 goto label14;
label13:
v45 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString CONTENT_LENGTH>;
v46 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: long contentLength>;
v47 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v46);
virtualinvoke v3.<io.netty.handler.codec.http.HttpHeaders: io.netty.handler.codec.http.HttpHeaders set(java.lang.CharSequence,java.lang.Object)>(v45, v47);
label14:
v48 = virtualinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: boolean isContentAlwaysEmpty(io.netty.handler.codec.http.HttpMessage)>(v2);
if v48 == 0 goto label15;
staticinvoke <io.netty.handler.codec.http.HttpUtil: void setTransferEncodingChunked(io.netty.handler.codec.http.HttpMessage,boolean)>(v2, 0);
v49 = <io.netty.handler.codec.http.HttpObjectDecoder$State: io.netty.handler.codec.http.HttpObjectDecoder$State SKIP_CONTROL_CHARS>;
return v49;
label15:
v50 = staticinvoke <io.netty.handler.codec.http.HttpUtil: boolean isTransferEncodingChunked(io.netty.handler.codec.http.HttpMessage)>(v2);
if v50 == 0 goto label17;
v51 = interfaceinvoke v28.<java.util.List: boolean isEmpty()>();
if v51 != 0 goto label16;
v52 = interfaceinvoke v2.<io.netty.handler.codec.http.HttpMessage: io.netty.handler.codec.http.HttpVersion protocolVersion()>();
v53 = <io.netty.handler.codec.http.HttpVersion: io.netty.handler.codec.http.HttpVersion HTTP_1_1>;
if v52 != v53 goto label16;
virtualinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: void handleTransferEncodingChunkedWithContentLength(io.netty.handler.codec.http.HttpMessage)>(v2);
label16:
v54 = <io.netty.handler.codec.http.HttpObjectDecoder$State: io.netty.handler.codec.http.HttpObjectDecoder$State READ_CHUNK_SIZE>;
return v54;
label17:
v55 = specialinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: long contentLength()>();
v56 = v55 cmp 0L;
if v56 < 0 goto label18;
v57 = <io.netty.handler.codec.http.HttpObjectDecoder$State: io.netty.handler.codec.http.HttpObjectDecoder$State READ_FIXED_LENGTH_CONTENT>;
return v57;
label18:
v58 = <io.netty.handler.codec.http.HttpObjectDecoder$State: io.netty.handler.codec.http.HttpObjectDecoder$State READ_VARIABLE_LENGTH_CONTENT>;
return v58;
}
protected void handleTransferEncodingChunkedWithContentLength(io.netty.handler.codec.http.HttpMessage)
{
io.netty.handler.codec.http.HttpObjectDecoder v0;
io.netty.handler.codec.http.HttpHeaders v2;
io.netty.handler.codec.http.HttpMessage v1;
io.netty.util.AsciiString v3;
v0 := @this: io.netty.handler.codec.http.HttpObjectDecoder;
v1 := @parameter0: io.netty.handler.codec.http.HttpMessage;
v2 = interfaceinvoke v1.<io.netty.handler.codec.http.HttpMessage: io.netty.handler.codec.http.HttpHeaders headers()>();
v3 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString CONTENT_LENGTH>;
virtualinvoke v2.<io.netty.handler.codec.http.HttpHeaders: io.netty.handler.codec.http.HttpHeaders remove(java.lang.CharSequence)>(v3);
v0.<io.netty.handler.codec.http.HttpObjectDecoder: long contentLength> = -9223372036854775808L;
return;
}
private long contentLength()
{
io.netty.handler.codec.http.HttpObjectDecoder v0;
byte v2;
io.netty.handler.codec.http.HttpMessage v3;
long v1, v4, v5;
v0 := @this: io.netty.handler.codec.http.HttpObjectDecoder;
v1 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: long contentLength>;
v2 = v1 cmp -9223372036854775808L;
if v2 != 0 goto label1;
v3 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpMessage message>;
v4 = staticinvoke <io.netty.handler.codec.http.HttpUtil: long getContentLength(io.netty.handler.codec.http.HttpMessage,long)>(v3, -1L);
v0.<io.netty.handler.codec.http.HttpObjectDecoder: long contentLength> = v4;
label1:
v5 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: long contentLength>;
return v5;
}
private io.netty.handler.codec.http.LastHttpContent readTrailingHeaders(io.netty.buffer.ByteBuf)
{
byte[] v11;
io.netty.handler.codec.http.HttpHeaders v16, v33;
io.netty.util.AsciiString v26, v27, v29, v31, v7;
byte v15;
boolean v10, v18, v28, v30, v32;
io.netty.handler.codec.http.HttpObjectDecoder v0;
java.util.List v17;
io.netty.handler.codec.http.HttpObjectDecoder$HeaderParser v2;
io.netty.handler.codec.http.LastHttpContent v4, v6;
io.netty.buffer.ByteBuf v1, v3, v9;
int v12, v13, v14, v19, v20, v21, v5;
java.lang.String v22, v23, v25, v34;
io.netty.handler.codec.http.DefaultLastHttpContent v8;
java.lang.Object v24;
v0 := @this: io.netty.handler.codec.http.HttpObjectDecoder;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpObjectDecoder$HeaderParser headerParser>;
v3 = virtualinvoke v2.<io.netty.handler.codec.http.HttpObjectDecoder$HeaderParser: io.netty.buffer.ByteBuf parse(io.netty.buffer.ByteBuf)>(v1);
if v3 != null goto label1;
return null;
label1:
v4 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.LastHttpContent trailer>;
v5 = virtualinvoke v3.<io.netty.buffer.ByteBuf: int readableBytes()>();
if v5 != 0 goto label2;
if v4 != null goto label2;
v6 = <io.netty.handler.codec.http.LastHttpContent: io.netty.handler.codec.http.LastHttpContent EMPTY_LAST_CONTENT>;
return v6;
label2:
v7 = null;
if v4 != null goto label3;
v8 = new io.netty.handler.codec.http.DefaultLastHttpContent;
v9 = <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf EMPTY_BUFFER>;
v10 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: boolean validateHeaders>;
specialinvoke v8.<io.netty.handler.codec.http.DefaultLastHttpContent: void <init>(io.netty.buffer.ByteBuf,boolean)>(v9, v10);
v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.LastHttpContent trailer> = v8;
v4 = v8;
label3:
if v5 <= 0 goto label9;
v11 = virtualinvoke v3.<io.netty.buffer.ByteBuf: byte[] array()>();
v12 = virtualinvoke v3.<io.netty.buffer.ByteBuf: int arrayOffset()>();
v13 = virtualinvoke v3.<io.netty.buffer.ByteBuf: int readerIndex()>();
v14 = v12 + v13;
v15 = v11[v14];
if v7 == null goto label5;
if v15 == 32 goto label4;
if v15 != 9 goto label5;
label4:
v16 = interfaceinvoke v4.<io.netty.handler.codec.http.LastHttpContent: io.netty.handler.codec.http.HttpHeaders trailingHeaders()>();
v17 = virtualinvoke v16.<io.netty.handler.codec.http.HttpHeaders: java.util.List getAll(java.lang.CharSequence)>(v7);
v18 = interfaceinvoke v17.<java.util.List: boolean isEmpty()>();
if v18 != 0 goto label7;
v19 = interfaceinvoke v17.<java.util.List: int size()>();
v20 = v19 - 1;
v21 = virtualinvoke v3.<io.netty.buffer.ByteBuf: int readableBytes()>();
v22 = staticinvoke <io.netty.handler.codec.http.HttpObjectDecoder: java.lang.String langAsciiString(byte[],int,int)>(v11, v14, v21);
v23 = virtualinvoke v22.<java.lang.String: java.lang.String trim()>();
v24 = interfaceinvoke v17.<java.util.List: java.lang.Object get(int)>(v20);
v25 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object,java.lang.String)>(v24, v23) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001");
interfaceinvoke v17.<java.util.List: java.lang.Object set(int,java.lang.Object)>(v20, v25);
goto label7;
label5:
specialinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: void splitHeader(byte[],int,int)>(v11, v14, v5);
v26 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.util.AsciiString name>;
v27 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString CONTENT_LENGTH>;
v28 = virtualinvoke v27.<io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence)>(v26);
if v28 != 0 goto label6;
v29 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString TRANSFER_ENCODING>;
v30 = virtualinvoke v29.<io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence)>(v26);
if v30 != 0 goto label6;
v31 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString TRAILER>;
v32 = virtualinvoke v31.<io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence)>(v26);
if v32 != 0 goto label6;
v33 = interfaceinvoke v4.<io.netty.handler.codec.http.LastHttpContent: io.netty.handler.codec.http.HttpHeaders trailingHeaders()>();
v34 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: java.lang.String value>;
virtualinvoke v33.<io.netty.handler.codec.http.HttpHeaders: io.netty.handler.codec.http.HttpHeaders add(java.lang.CharSequence,java.lang.Object)>(v26, v34);
label6:
v7 = v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.util.AsciiString name>;
v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.util.AsciiString name> = null;
v0.<io.netty.handler.codec.http.HttpObjectDecoder: java.lang.String value> = null;
label7:
v3 = virtualinvoke v2.<io.netty.handler.codec.http.HttpObjectDecoder$HeaderParser: io.netty.buffer.ByteBuf parse(io.netty.buffer.ByteBuf)>(v1);
if v3 != null goto label8;
return null;
label8:
v5 = virtualinvoke v3.<io.netty.buffer.ByteBuf: int readableBytes()>();
goto label3;
label9:
v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.LastHttpContent trailer> = null;
return v4;
}
protected abstract boolean isDecodingRequest();
protected abstract io.netty.handler.codec.http.HttpMessage createMessage(java.lang.String[]) throws java.lang.Exception;
protected abstract io.netty.handler.codec.http.HttpMessage createInvalidMessage();
private static int skipWhiteSpaces(byte[], int, int)
{
byte[] v0;
byte v5;
int v1, v2, v3, v4;
boolean v6;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = 0;
label1:
if v3 >= v2 goto label3;
v4 = v1 + v3;
v5 = v0[v4];
v6 = staticinvoke <io.netty.handler.codec.http.HttpObjectDecoder: boolean isWhitespace(byte)>(v5);
if v6 != 0 goto label2;
return v3;
label2:
v3 = v3 + 1;
goto label1;
label3:
return v2;
}
private static int getChunkSize(byte[], int, int)
{
byte[] v0;
byte v10, v14;
int v1, v11, v12, v13, v18, v2, v3, v5, v6, v7, v8, v9;
boolean v15;
java.lang.NumberFormatException v16, v17, v4;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = staticinvoke <io.netty.handler.codec.http.HttpObjectDecoder: int skipWhiteSpaces(byte[],int,int)>(v0, v1, v2);
if v3 != v2 goto label1;
v4 = new java.lang.NumberFormatException;
specialinvoke v4.<java.lang.NumberFormatException: void <init>()>();
throw v4;
label1:
v5 = v1 + v3;
v6 = v2 - v3;
v7 = 0;
v8 = 0;
label2:
if v8 >= v6 goto label7;
v9 = v5 + v8;
v10 = v0[v9];
v11 = staticinvoke <io.netty.util.internal.StringUtil: int decodeHexNibble(byte)>(v10);
v12 = (int) -1;
if v11 != v12 goto label6;
v13 = v5 + v8;
v14 = v0[v13];
if v14 == 59 goto label3;
v15 = staticinvoke <io.netty.handler.codec.http.HttpObjectDecoder: boolean isControlOrWhitespaceAsciiChar(byte)>(v14);
if v15 == 0 goto label5;
label3:
if v8 != 0 goto label4;
v16 = new java.lang.NumberFormatException;
specialinvoke v16.<java.lang.NumberFormatException: void <init>()>();
throw v16;
label4:
return v7;
label5:
v17 = new java.lang.NumberFormatException;
specialinvoke v17.<java.lang.NumberFormatException: void <init>()>();
throw v17;
label6:
v18 = v7 * 16;
v7 = v18 + v11;
v8 = v8 + 1;
goto label2;
label7:
return v7;
}
private java.lang.String[] splitInitialLine(io.netty.buffer.ByteBuf)
{
byte[] v2;
java.lang.String[] v16;
io.netty.buffer.ByteBuf v1;
int v10, v11, v12, v13, v14, v15, v17, v19, v21, v3, v4, v5, v6, v7, v8, v9;
java.lang.String v18, v20, v22;
io.netty.handler.codec.http.HttpObjectDecoder v0;
v0 := @this: io.netty.handler.codec.http.HttpObjectDecoder;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 = virtualinvoke v1.<io.netty.buffer.ByteBuf: byte[] array()>();
v3 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int arrayOffset()>();
v4 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readerIndex()>();
v5 = v3 + v4;
v6 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
v7 = v5 + v6;
v8 = staticinvoke <io.netty.handler.codec.http.HttpObjectDecoder: int findNonSPLenient(byte[],int,int)>(v2, v5, v7);
v9 = staticinvoke <io.netty.handler.codec.http.HttpObjectDecoder: int findSPLenient(byte[],int,int)>(v2, v8, v7);
v10 = staticinvoke <io.netty.handler.codec.http.HttpObjectDecoder: int findNonSPLenient(byte[],int,int)>(v2, v9, v7);
v11 = staticinvoke <io.netty.handler.codec.http.HttpObjectDecoder: int findSPLenient(byte[],int,int)>(v2, v10, v7);
v12 = staticinvoke <io.netty.handler.codec.http.HttpObjectDecoder: int findNonSPLenient(byte[],int,int)>(v2, v11, v7);
v13 = v12 - 1;
v14 = staticinvoke <java.lang.Math: int max(int,int)>(v13, v5);
v15 = staticinvoke <io.netty.handler.codec.http.HttpObjectDecoder: int findEndOfString(byte[],int,int)>(v2, v14, v7);
v16 = newarray (java.lang.String)[3];
v17 = v9 - v8;
v18 = virtualinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: java.lang.String splitFirstWordInitialLine(byte[],int,int)>(v2, v8, v17);
v16[0] = v18;
v19 = v11 - v10;
v20 = virtualinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: java.lang.String splitSecondWordInitialLine(byte[],int,int)>(v2, v10, v19);
v16[1] = v20;
if v12 >= v15 goto label1;
v21 = v15 - v12;
v22 = virtualinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: java.lang.String splitThirdWordInitialLine(byte[],int,int)>(v2, v12, v21);
goto label2;
label1:
v22 = "";
label2:
v16[2] = v22;
return v16;
}
protected java.lang.String splitFirstWordInitialLine(byte[], int, int)
{
byte[] v1;
io.netty.handler.codec.http.HttpObjectDecoder v0;
int v2, v3;
java.lang.String v4;
v0 := @this: io.netty.handler.codec.http.HttpObjectDecoder;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = staticinvoke <io.netty.handler.codec.http.HttpObjectDecoder: java.lang.String langAsciiString(byte[],int,int)>(v1, v2, v3);
return v4;
}
protected java.lang.String splitSecondWordInitialLine(byte[], int, int)
{
byte[] v1;
io.netty.handler.codec.http.HttpObjectDecoder v0;
int v2, v3;
java.lang.String v4;
v0 := @this: io.netty.handler.codec.http.HttpObjectDecoder;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = staticinvoke <io.netty.handler.codec.http.HttpObjectDecoder: java.lang.String langAsciiString(byte[],int,int)>(v1, v2, v3);
return v4;
}
protected java.lang.String splitThirdWordInitialLine(byte[], int, int)
{
byte[] v1;
io.netty.handler.codec.http.HttpObjectDecoder v0;
int v2, v3;
java.lang.String v4;
v0 := @this: io.netty.handler.codec.http.HttpObjectDecoder;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = staticinvoke <io.netty.handler.codec.http.HttpObjectDecoder: java.lang.String langAsciiString(byte[],int,int)>(v1, v2, v3);
return v4;
}
private static java.lang.String langAsciiString(byte[], int, int)
{
byte[] v0;
int v1, v2, v3, v5;
java.lang.String v4, v6, v7;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: int;
if v2 != 0 goto label1;
return "";
label1:
if v1 != 0 goto label3;
v3 = lengthof v0;
if v2 != v3 goto label2;
v4 = new java.lang.String;
v5 = lengthof v0;
specialinvoke v4.<java.lang.String: void <init>(byte[],int,int,int)>(v0, 0, 0, v5);
return v4;
label2:
v6 = new java.lang.String;
specialinvoke v6.<java.lang.String: void <init>(byte[],int,int,int)>(v0, 0, 0, v2);
return v6;
label3:
v7 = new java.lang.String;
specialinvoke v7.<java.lang.String: void <init>(byte[],int,int,int)>(v0, 0, v1, v2);
return v7;
}
private void splitHeader(byte[], int, int)
{
byte[] v1;
io.netty.util.AsciiString v14;
byte v12, v8;
int v11, v13, v15, v16, v17, v2, v3, v4, v5, v7;
java.lang.String v18;
boolean v6, v9;
io.netty.handler.codec.http.HttpObjectDecoder v0;
java.lang.IllegalArgumentException v10;
v0 := @this: io.netty.handler.codec.http.HttpObjectDecoder;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v2 + v3;
v5 = staticinvoke <io.netty.handler.codec.http.HttpObjectDecoder: int findNonWhitespace(byte[],int,int)>(v1, v2, v4);
v6 = virtualinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: boolean isDecodingRequest()>();
v7 = v5;
label1:
if v7 >= v4 goto label3;
v8 = v1[v7];
if v8 == 58 goto label3;
if v6 != 0 goto label2;
v9 = staticinvoke <io.netty.handler.codec.http.HttpObjectDecoder: boolean isOWS(byte)>(v8);
if v9 != 0 goto label3;
label2:
v7 = v7 + 1;
goto label1;
label3:
if v7 != v4 goto label4;
v10 = new java.lang.IllegalArgumentException;
specialinvoke v10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No colon found");
throw v10;
label4:
v11 = v7;
label5:
if v11 >= v4 goto label7;
v12 = v1[v11];
if v12 != 58 goto label6;
v11 = v11 + 1;
goto label7;
label6:
v11 = v11 + 1;
goto label5;
label7:
v13 = v7 - v5;
v14 = virtualinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.util.AsciiString splitHeaderName(byte[],int,int)>(v1, v5, v13);
v0.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.util.AsciiString name> = v14;
v15 = staticinvoke <io.netty.handler.codec.http.HttpObjectDecoder: int findNonWhitespace(byte[],int,int)>(v1, v11, v4);
if v15 != v4 goto label8;
v0.<io.netty.handler.codec.http.HttpObjectDecoder: java.lang.String value> = "";
goto label9;
label8:
v16 = staticinvoke <io.netty.handler.codec.http.HttpObjectDecoder: int findEndOfString(byte[],int,int)>(v1, v2, v4);
v17 = v16 - v15;
v18 = staticinvoke <io.netty.handler.codec.http.HttpObjectDecoder: java.lang.String langAsciiString(byte[],int,int)>(v1, v15, v17);
v0.<io.netty.handler.codec.http.HttpObjectDecoder: java.lang.String value> = v18;
label9:
return;
}
protected io.netty.util.AsciiString splitHeaderName(byte[], int, int)
{
byte[] v1;
io.netty.handler.codec.http.HttpObjectDecoder v0;
int v2, v3;
io.netty.util.AsciiString v4;
v0 := @this: io.netty.handler.codec.http.HttpObjectDecoder;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = new io.netty.util.AsciiString;
specialinvoke v4.<io.netty.util.AsciiString: void <init>(byte[],int,int,boolean)>(v1, v2, v3, 1);
return v4;
}
private static int findNonSPLenient(byte[], int, int)
{
byte[] v0;
java.lang.IllegalArgumentException v7;
byte v4;
int v1, v2, v3;
boolean v5, v6;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = v1;
label1:
if v3 >= v2 goto label4;
v4 = v0[v3];
v5 = staticinvoke <io.netty.handler.codec.http.HttpObjectDecoder: boolean isSPLenient(byte)>(v4);
if v5 != 0 goto label3;
v6 = staticinvoke <io.netty.handler.codec.http.HttpObjectDecoder: boolean isWhitespace(byte)>(v4);
if v6 == 0 goto label2;
v7 = new java.lang.IllegalArgumentException;
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid separator");
throw v7;
label2:
return v3;
label3:
v3 = v3 + 1;
goto label1;
label4:
return v2;
}
private static int findSPLenient(byte[], int, int)
{
byte[] v0;
byte v4;
int v1, v2, v3;
boolean v5;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = v1;
label1:
if v3 >= v2 goto label3;
v4 = v0[v3];
v5 = staticinvoke <io.netty.handler.codec.http.HttpObjectDecoder: boolean isSPLenient(byte)>(v4);
if v5 == 0 goto label2;
return v3;
label2:
v3 = v3 + 1;
goto label1;
label3:
return v2;
}
private static boolean isSPLenient(byte)
{
byte v0;
boolean[] v1;
int v2;
boolean v3;
v0 := @parameter0: byte;
v1 = <io.netty.handler.codec.http.HttpObjectDecoder: boolean[] SP_LENIENT_BYTES>;
v2 = v0 + 128;
v3 = v1[v2];
return v3;
}
private static boolean isWhitespace(byte)
{
byte v0;
boolean[] v1;
int v2;
boolean v3;
v0 := @parameter0: byte;
v1 = <io.netty.handler.codec.http.HttpObjectDecoder: boolean[] LATIN_WHITESPACE>;
v2 = v0 + 128;
v3 = v1[v2];
return v3;
}
private static int findNonWhitespace(byte[], int, int)
{
byte[] v0;
java.lang.IllegalArgumentException v7;
byte v4;
int v1, v2, v3;
java.lang.String v8, v9;
boolean v5, v6;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = v1;
label1:
if v3 >= v2 goto label4;
v4 = v0[v3];
v5 = staticinvoke <io.netty.handler.codec.http.HttpObjectDecoder: boolean isWhitespace(byte)>(v4);
if v5 != 0 goto label2;
return v3;
label2:
v6 = staticinvoke <io.netty.handler.codec.http.HttpObjectDecoder: boolean isOWS(byte)>(v4);
if v6 != 0 goto label3;
v7 = new java.lang.IllegalArgumentException;
v8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v4);
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (byte,java.lang.String)>(v4, v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid separator, only a single space or horizontal tab allowed, but received a \'\u0001\' (0x\u0001)");
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v9);
throw v7;
label3:
v3 = v3 + 1;
goto label1;
label4:
return v2;
}
private static int findEndOfString(byte[], int, int)
{
byte[] v0;
byte v4;
int v1, v2, v3, v6;
boolean v5;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = v2 - 1;
label1:
if v3 <= v1 goto label3;
v4 = v0[v3];
v5 = staticinvoke <io.netty.handler.codec.http.HttpObjectDecoder: boolean isWhitespace(byte)>(v4);
if v5 != 0 goto label2;
v6 = v3 + 1;
return v6;
label2:
v3 = v3 - 1;
goto label1;
label3:
return 0;
}
private static boolean isOWS(byte)
{
byte v0;
boolean v1;
v0 := @parameter0: byte;
if v0 == 32 goto label1;
if v0 != 9 goto label2;
label1:
v1 = 1;
goto label3;
label2:
v1 = 0;
label3:
return v1;
}
private static boolean isControlOrWhitespaceAsciiChar(byte)
{
byte v0;
boolean[] v1;
int v2;
boolean v3;
v0 := @parameter0: byte;
v1 = <io.netty.handler.codec.http.HttpObjectDecoder: boolean[] ISO_CONTROL_OR_WHITESPACE>;
v2 = 128 + v0;
v3 = v1[v2];
return v3;
}
static void <clinit>()
{
boolean[] v10, v3, v4, v5, v6, v7, v8, v9;
java.lang.Class v0;
boolean v1, v11, v2;
v0 = class "Lio/netty/handler/codec/http/HttpObjectDecoder;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.handler.codec.http.HttpObjectDecoder: boolean $assertionsDisabled> = v2;
v3 = newarray (boolean)[256];
<io.netty.handler.codec.http.HttpObjectDecoder: boolean[] SP_LENIENT_BYTES> = v3;
v4 = <io.netty.handler.codec.http.HttpObjectDecoder: boolean[] SP_LENIENT_BYTES>;
v4[160] = 1;
v5 = <io.netty.handler.codec.http.HttpObjectDecoder: boolean[] SP_LENIENT_BYTES>;
v5[137] = 1;
v6 = <io.netty.handler.codec.http.HttpObjectDecoder: boolean[] SP_LENIENT_BYTES>;
v6[139] = 1;
v7 = <io.netty.handler.codec.http.HttpObjectDecoder: boolean[] SP_LENIENT_BYTES>;
v7[140] = 1;
v8 = <io.netty.handler.codec.http.HttpObjectDecoder: boolean[] SP_LENIENT_BYTES>;
v8[141] = 1;
v9 = newarray (boolean)[256];
<io.netty.handler.codec.http.HttpObjectDecoder: boolean[] LATIN_WHITESPACE> = v9;
label3:
v10 = <io.netty.handler.codec.http.HttpObjectDecoder: boolean[] LATIN_WHITESPACE>;
v11 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(-128);
v10[0] = v11;
goto label3;
}
}