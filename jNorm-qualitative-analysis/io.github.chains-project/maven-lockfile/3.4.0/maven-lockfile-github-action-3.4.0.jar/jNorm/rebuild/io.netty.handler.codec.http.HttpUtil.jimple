public final class io.netty.handler.codec.http.HttpUtil extends java.lang.Object
{
private static final io.netty.util.AsciiString CHARSET_EQUALS;
private static final io.netty.util.AsciiString SEMICOLON;
private static final java.lang.String COMMA_STRING;
private void <init>()
{
io.netty.handler.codec.http.HttpUtil v0;
v0 := @this: io.netty.handler.codec.http.HttpUtil;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static boolean isOriginForm(java.net.URI)
{
java.lang.String v1;
java.net.URI v0;
boolean v2;
v0 := @parameter0: java.net.URI;
v1 = virtualinvoke v0.<java.net.URI: java.lang.String toString()>();
v2 = staticinvoke <io.netty.handler.codec.http.HttpUtil: boolean isOriginForm(java.lang.String)>(v1);
return v2;
}
public static boolean isOriginForm(java.lang.String)
{
java.lang.String v0;
boolean v1;
v0 := @parameter0: java.lang.String;
v1 = virtualinvoke v0.<java.lang.String: boolean startsWith(java.lang.String)>("/");
return v1;
}
public static boolean isAsteriskForm(java.net.URI)
{
java.lang.String v1;
java.net.URI v0;
boolean v2;
v0 := @parameter0: java.net.URI;
v1 = virtualinvoke v0.<java.net.URI: java.lang.String toString()>();
v2 = staticinvoke <io.netty.handler.codec.http.HttpUtil: boolean isAsteriskForm(java.lang.String)>(v1);
return v2;
}
public static boolean isAsteriskForm(java.lang.String)
{
java.lang.String v0, v1;
boolean v2;
v0 := @parameter0: java.lang.String;
v1 = "*";
v2 = virtualinvoke v1.<java.lang.String: boolean equals(java.lang.Object)>(v0);
return v2;
}
public static boolean isKeepAlive(io.netty.handler.codec.http.HttpMessage)
{
io.netty.handler.codec.http.HttpVersion v5;
io.netty.handler.codec.http.HttpHeaders v1, v7;
io.netty.handler.codec.http.HttpMessage v0;
io.netty.util.AsciiString v2, v3, v8, v9;
boolean v10, v11, v4, v6;
v0 := @parameter0: io.netty.handler.codec.http.HttpMessage;
v1 = interfaceinvoke v0.<io.netty.handler.codec.http.HttpMessage: io.netty.handler.codec.http.HttpHeaders headers()>();
v2 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString CONNECTION>;
v3 = <io.netty.handler.codec.http.HttpHeaderValues: io.netty.util.AsciiString CLOSE>;
v4 = virtualinvoke v1.<io.netty.handler.codec.http.HttpHeaders: boolean containsValue(java.lang.CharSequence,java.lang.CharSequence,boolean)>(v2, v3, 1);
if v4 != 0 goto label2;
v5 = interfaceinvoke v0.<io.netty.handler.codec.http.HttpMessage: io.netty.handler.codec.http.HttpVersion protocolVersion()>();
v6 = virtualinvoke v5.<io.netty.handler.codec.http.HttpVersion: boolean isKeepAliveDefault()>();
if v6 != 0 goto label1;
v7 = interfaceinvoke v0.<io.netty.handler.codec.http.HttpMessage: io.netty.handler.codec.http.HttpHeaders headers()>();
v8 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString CONNECTION>;
v9 = <io.netty.handler.codec.http.HttpHeaderValues: io.netty.util.AsciiString KEEP_ALIVE>;
v10 = virtualinvoke v7.<io.netty.handler.codec.http.HttpHeaders: boolean containsValue(java.lang.CharSequence,java.lang.CharSequence,boolean)>(v8, v9, 1);
if v10 == 0 goto label2;
label1:
v11 = 1;
goto label3;
label2:
v11 = 0;
label3:
return v11;
}
public static void setKeepAlive(io.netty.handler.codec.http.HttpMessage, boolean)
{
io.netty.handler.codec.http.HttpVersion v3;
io.netty.handler.codec.http.HttpHeaders v2;
io.netty.handler.codec.http.HttpMessage v0;
boolean v1;
v0 := @parameter0: io.netty.handler.codec.http.HttpMessage;
v1 := @parameter1: boolean;
v2 = interfaceinvoke v0.<io.netty.handler.codec.http.HttpMessage: io.netty.handler.codec.http.HttpHeaders headers()>();
v3 = interfaceinvoke v0.<io.netty.handler.codec.http.HttpMessage: io.netty.handler.codec.http.HttpVersion protocolVersion()>();
staticinvoke <io.netty.handler.codec.http.HttpUtil: void setKeepAlive(io.netty.handler.codec.http.HttpHeaders,io.netty.handler.codec.http.HttpVersion,boolean)>(v2, v3, v1);
return;
}
public static void setKeepAlive(io.netty.handler.codec.http.HttpHeaders, io.netty.handler.codec.http.HttpVersion, boolean)
{
io.netty.handler.codec.http.HttpVersion v1;
io.netty.handler.codec.http.HttpHeaders v0;
io.netty.util.AsciiString v4, v5, v6, v7, v8, v9;
boolean v2, v3;
v0 := @parameter0: io.netty.handler.codec.http.HttpHeaders;
v1 := @parameter1: io.netty.handler.codec.http.HttpVersion;
v2 := @parameter2: boolean;
v3 = virtualinvoke v1.<io.netty.handler.codec.http.HttpVersion: boolean isKeepAliveDefault()>();
if v3 == 0 goto label2;
if v2 == 0 goto label1;
v4 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString CONNECTION>;
virtualinvoke v0.<io.netty.handler.codec.http.HttpHeaders: io.netty.handler.codec.http.HttpHeaders remove(java.lang.CharSequence)>(v4);
goto label4;
label1:
v5 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString CONNECTION>;
v6 = <io.netty.handler.codec.http.HttpHeaderValues: io.netty.util.AsciiString CLOSE>;
virtualinvoke v0.<io.netty.handler.codec.http.HttpHeaders: io.netty.handler.codec.http.HttpHeaders set(java.lang.CharSequence,java.lang.Object)>(v5, v6);
goto label4;
label2:
if v2 == 0 goto label3;
v7 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString CONNECTION>;
v8 = <io.netty.handler.codec.http.HttpHeaderValues: io.netty.util.AsciiString KEEP_ALIVE>;
virtualinvoke v0.<io.netty.handler.codec.http.HttpHeaders: io.netty.handler.codec.http.HttpHeaders set(java.lang.CharSequence,java.lang.Object)>(v7, v8);
goto label4;
label3:
v9 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString CONNECTION>;
virtualinvoke v0.<io.netty.handler.codec.http.HttpHeaders: io.netty.handler.codec.http.HttpHeaders remove(java.lang.CharSequence)>(v9);
label4:
return;
}
public static long getContentLength(io.netty.handler.codec.http.HttpMessage)
{
io.netty.handler.codec.http.HttpHeaders v1;
io.netty.handler.codec.http.HttpMessage v0;
io.netty.util.AsciiString v2, v8;
java.lang.NumberFormatException v7;
long v4;
byte v6;
int v5;
java.lang.String v3, v9;
v0 := @parameter0: io.netty.handler.codec.http.HttpMessage;
v1 = interfaceinvoke v0.<io.netty.handler.codec.http.HttpMessage: io.netty.handler.codec.http.HttpHeaders headers()>();
v2 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString CONTENT_LENGTH>;
v3 = virtualinvoke v1.<io.netty.handler.codec.http.HttpHeaders: java.lang.String get(java.lang.CharSequence)>(v2);
if v3 == null goto label1;
v4 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(v3);
return v4;
label1:
v5 = staticinvoke <io.netty.handler.codec.http.HttpUtil: int getWebSocketContentLength(io.netty.handler.codec.http.HttpMessage)>(v0);
v6 = v5 cmp 0L;
if v6 < 0 goto label2;
return v5;
label2:
v7 = new java.lang.NumberFormatException;
v8 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString CONTENT_LENGTH>;
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.netty.util.AsciiString)>(v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("header not found: \u0001");
specialinvoke v7.<java.lang.NumberFormatException: void <init>(java.lang.String)>(v9);
throw v7;
}
public static long getContentLength(io.netty.handler.codec.http.HttpMessage, long)
{
io.netty.handler.codec.http.HttpHeaders v2;
io.netty.handler.codec.http.HttpMessage v0;
io.netty.util.AsciiString v3;
long v1, v5;
byte v7;
int v6;
java.lang.String v4;
v0 := @parameter0: io.netty.handler.codec.http.HttpMessage;
v1 := @parameter1: long;
v2 = interfaceinvoke v0.<io.netty.handler.codec.http.HttpMessage: io.netty.handler.codec.http.HttpHeaders headers()>();
v3 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString CONTENT_LENGTH>;
v4 = virtualinvoke v2.<io.netty.handler.codec.http.HttpHeaders: java.lang.String get(java.lang.CharSequence)>(v3);
if v4 == null goto label1;
v5 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(v4);
return v5;
label1:
v6 = staticinvoke <io.netty.handler.codec.http.HttpUtil: int getWebSocketContentLength(io.netty.handler.codec.http.HttpMessage)>(v0);
v7 = v6 cmp 0L;
if v7 < 0 goto label2;
return v6;
label2:
return v1;
}
public static int getContentLength(io.netty.handler.codec.http.HttpMessage, int)
{
io.netty.handler.codec.http.HttpMessage v0;
int v1;
long v2, v3;
v0 := @parameter0: io.netty.handler.codec.http.HttpMessage;
v1 := @parameter1: int;
v2 = staticinvoke <io.netty.handler.codec.http.HttpUtil: long getContentLength(io.netty.handler.codec.http.HttpMessage,long)>(v0, v1);
v3 = staticinvoke <java.lang.Math: long min(long,long)>(2147483647L, v2);
return v3;
}
private static int getWebSocketContentLength(io.netty.handler.codec.http.HttpMessage)
{
io.netty.handler.codec.http.HttpHeaders v1;
io.netty.handler.codec.http.HttpMessage v0;
io.netty.util.AsciiString v13, v15, v6, v8;
int v12, v17;
boolean v10, v14, v16, v2, v5, v7, v9;
io.netty.handler.codec.http.HttpMethod v3, v4;
io.netty.handler.codec.http.HttpResponseStatus v11;
v0 := @parameter0: io.netty.handler.codec.http.HttpMessage;
v1 = interfaceinvoke v0.<io.netty.handler.codec.http.HttpMessage: io.netty.handler.codec.http.HttpHeaders headers()>();
v2 = v0 instanceof io.netty.handler.codec.http.HttpRequest;
if v2 == 0 goto label1;
v3 = <io.netty.handler.codec.http.HttpMethod: io.netty.handler.codec.http.HttpMethod GET>;
v4 = interfaceinvoke v0.<io.netty.handler.codec.http.HttpRequest: io.netty.handler.codec.http.HttpMethod method()>();
v5 = virtualinvoke v3.<io.netty.handler.codec.http.HttpMethod: boolean equals(java.lang.Object)>(v4);
if v5 == 0 goto label2;
v6 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString SEC_WEBSOCKET_KEY1>;
v7 = virtualinvoke v1.<io.netty.handler.codec.http.HttpHeaders: boolean contains(java.lang.CharSequence)>(v6);
if v7 == 0 goto label2;
v8 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString SEC_WEBSOCKET_KEY2>;
v9 = virtualinvoke v1.<io.netty.handler.codec.http.HttpHeaders: boolean contains(java.lang.CharSequence)>(v8);
if v9 == 0 goto label2;
return 8;
label1:
v10 = v0 instanceof io.netty.handler.codec.http.HttpResponse;
if v10 == 0 goto label2;
v11 = interfaceinvoke v0.<io.netty.handler.codec.http.HttpResponse: io.netty.handler.codec.http.HttpResponseStatus status()>();
v12 = virtualinvoke v11.<io.netty.handler.codec.http.HttpResponseStatus: int code()>();
if v12 != 101 goto label2;
v13 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString SEC_WEBSOCKET_ORIGIN>;
v14 = virtualinvoke v1.<io.netty.handler.codec.http.HttpHeaders: boolean contains(java.lang.CharSequence)>(v13);
if v14 == 0 goto label2;
v15 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString SEC_WEBSOCKET_LOCATION>;
v16 = virtualinvoke v1.<io.netty.handler.codec.http.HttpHeaders: boolean contains(java.lang.CharSequence)>(v15);
if v16 == 0 goto label2;
return 16;
label2:
v17 = (int) -1;
return v17;
}
public static void setContentLength(io.netty.handler.codec.http.HttpMessage, long)
{
io.netty.handler.codec.http.HttpHeaders v2;
java.lang.Long v4;
io.netty.handler.codec.http.HttpMessage v0;
io.netty.util.AsciiString v3;
long v1;
v0 := @parameter0: io.netty.handler.codec.http.HttpMessage;
v1 := @parameter1: long;
v2 = interfaceinvoke v0.<io.netty.handler.codec.http.HttpMessage: io.netty.handler.codec.http.HttpHeaders headers()>();
v3 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString CONTENT_LENGTH>;
v4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v1);
virtualinvoke v2.<io.netty.handler.codec.http.HttpHeaders: io.netty.handler.codec.http.HttpHeaders set(java.lang.CharSequence,java.lang.Object)>(v3, v4);
return;
}
public static boolean isContentLengthSet(io.netty.handler.codec.http.HttpMessage)
{
io.netty.handler.codec.http.HttpHeaders v1;
io.netty.handler.codec.http.HttpMessage v0;
io.netty.util.AsciiString v2;
boolean v3;
v0 := @parameter0: io.netty.handler.codec.http.HttpMessage;
v1 = interfaceinvoke v0.<io.netty.handler.codec.http.HttpMessage: io.netty.handler.codec.http.HttpHeaders headers()>();
v2 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString CONTENT_LENGTH>;
v3 = virtualinvoke v1.<io.netty.handler.codec.http.HttpHeaders: boolean contains(java.lang.CharSequence)>(v2);
return v3;
}
public static boolean is100ContinueExpected(io.netty.handler.codec.http.HttpMessage)
{
io.netty.handler.codec.http.HttpHeaders v2;
io.netty.handler.codec.http.HttpMessage v0;
io.netty.util.AsciiString v3, v4;
boolean v1, v5, v6;
v0 := @parameter0: io.netty.handler.codec.http.HttpMessage;
v1 = staticinvoke <io.netty.handler.codec.http.HttpUtil: boolean isExpectHeaderValid(io.netty.handler.codec.http.HttpMessage)>(v0);
if v1 == 0 goto label1;
v2 = interfaceinvoke v0.<io.netty.handler.codec.http.HttpMessage: io.netty.handler.codec.http.HttpHeaders headers()>();
v3 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString EXPECT>;
v4 = <io.netty.handler.codec.http.HttpHeaderValues: io.netty.util.AsciiString CONTINUE>;
v5 = virtualinvoke v2.<io.netty.handler.codec.http.HttpHeaders: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)>(v3, v4, 1);
if v5 == 0 goto label1;
v6 = 1;
goto label2;
label1:
v6 = 0;
label2:
return v6;
}
static boolean isUnsupportedExpectation(io.netty.handler.codec.http.HttpMessage)
{
io.netty.handler.codec.http.HttpHeaders v2;
io.netty.handler.codec.http.HttpMessage v0;
io.netty.util.AsciiString v3, v5;
java.lang.String v4, v6;
boolean v1, v7, v8;
v0 := @parameter0: io.netty.handler.codec.http.HttpMessage;
v1 = staticinvoke <io.netty.handler.codec.http.HttpUtil: boolean isExpectHeaderValid(io.netty.handler.codec.http.HttpMessage)>(v0);
if v1 != 0 goto label1;
return 0;
label1:
v2 = interfaceinvoke v0.<io.netty.handler.codec.http.HttpMessage: io.netty.handler.codec.http.HttpHeaders headers()>();
v3 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString EXPECT>;
v4 = virtualinvoke v2.<io.netty.handler.codec.http.HttpHeaders: java.lang.String get(java.lang.CharSequence)>(v3);
if v4 == null goto label2;
v5 = <io.netty.handler.codec.http.HttpHeaderValues: io.netty.util.AsciiString CONTINUE>;
v6 = virtualinvoke v5.<io.netty.util.AsciiString: java.lang.String toString()>();
v7 = virtualinvoke v6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v4);
if v7 != 0 goto label2;
v8 = 1;
goto label3;
label2:
v8 = 0;
label3:
return v8;
}
private static boolean isExpectHeaderValid(io.netty.handler.codec.http.HttpMessage)
{
io.netty.handler.codec.http.HttpVersion v2, v3;
io.netty.handler.codec.http.HttpMessage v0;
int v4;
boolean v1, v5;
v0 := @parameter0: io.netty.handler.codec.http.HttpMessage;
v1 = v0 instanceof io.netty.handler.codec.http.HttpRequest;
if v1 == 0 goto label1;
v2 = interfaceinvoke v0.<io.netty.handler.codec.http.HttpMessage: io.netty.handler.codec.http.HttpVersion protocolVersion()>();
v3 = <io.netty.handler.codec.http.HttpVersion: io.netty.handler.codec.http.HttpVersion HTTP_1_1>;
v4 = virtualinvoke v2.<io.netty.handler.codec.http.HttpVersion: int compareTo(io.netty.handler.codec.http.HttpVersion)>(v3);
if v4 < 0 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
public static void set100ContinueExpected(io.netty.handler.codec.http.HttpMessage, boolean)
{
io.netty.handler.codec.http.HttpHeaders v2, v5;
io.netty.handler.codec.http.HttpMessage v0;
io.netty.util.AsciiString v3, v4, v6;
boolean v1;
v0 := @parameter0: io.netty.handler.codec.http.HttpMessage;
v1 := @parameter1: boolean;
if v1 == 0 goto label1;
v2 = interfaceinvoke v0.<io.netty.handler.codec.http.HttpMessage: io.netty.handler.codec.http.HttpHeaders headers()>();
v3 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString EXPECT>;
v4 = <io.netty.handler.codec.http.HttpHeaderValues: io.netty.util.AsciiString CONTINUE>;
virtualinvoke v2.<io.netty.handler.codec.http.HttpHeaders: io.netty.handler.codec.http.HttpHeaders set(java.lang.CharSequence,java.lang.Object)>(v3, v4);
goto label2;
label1:
v5 = interfaceinvoke v0.<io.netty.handler.codec.http.HttpMessage: io.netty.handler.codec.http.HttpHeaders headers()>();
v6 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString EXPECT>;
virtualinvoke v5.<io.netty.handler.codec.http.HttpHeaders: io.netty.handler.codec.http.HttpHeaders remove(java.lang.CharSequence)>(v6);
label2:
return;
}
public static boolean isTransferEncodingChunked(io.netty.handler.codec.http.HttpMessage)
{
io.netty.handler.codec.http.HttpHeaders v1;
io.netty.handler.codec.http.HttpMessage v0;
io.netty.util.AsciiString v2, v3;
boolean v4;
v0 := @parameter0: io.netty.handler.codec.http.HttpMessage;
v1 = interfaceinvoke v0.<io.netty.handler.codec.http.HttpMessage: io.netty.handler.codec.http.HttpHeaders headers()>();
v2 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString TRANSFER_ENCODING>;
v3 = <io.netty.handler.codec.http.HttpHeaderValues: io.netty.util.AsciiString CHUNKED>;
v4 = virtualinvoke v1.<io.netty.handler.codec.http.HttpHeaders: boolean containsValue(java.lang.CharSequence,java.lang.CharSequence,boolean)>(v2, v3, 1);
return v4;
}
public static void setTransferEncodingChunked(io.netty.handler.codec.http.HttpMessage, boolean)
{
io.netty.handler.codec.http.HttpHeaders v18, v2, v20, v5, v7;
io.netty.handler.codec.http.HttpMessage v0;
io.netty.util.AsciiString v15, v19, v21, v3, v4, v6, v8;
java.util.ArrayList v11;
boolean v1, v10, v13, v16, v17;
java.util.Iterator v12;
java.util.List v9;
java.lang.Object v14;
v0 := @parameter0: io.netty.handler.codec.http.HttpMessage;
v1 := @parameter1: boolean;
if v1 == 0 goto label1;
v2 = interfaceinvoke v0.<io.netty.handler.codec.http.HttpMessage: io.netty.handler.codec.http.HttpHeaders headers()>();
v3 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString TRANSFER_ENCODING>;
v4 = <io.netty.handler.codec.http.HttpHeaderValues: io.netty.util.AsciiString CHUNKED>;
virtualinvoke v2.<io.netty.handler.codec.http.HttpHeaders: io.netty.handler.codec.http.HttpHeaders set(java.lang.CharSequence,java.lang.Object)>(v3, v4);
v5 = interfaceinvoke v0.<io.netty.handler.codec.http.HttpMessage: io.netty.handler.codec.http.HttpHeaders headers()>();
v6 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString CONTENT_LENGTH>;
virtualinvoke v5.<io.netty.handler.codec.http.HttpHeaders: io.netty.handler.codec.http.HttpHeaders remove(java.lang.CharSequence)>(v6);
goto label6;
label1:
v7 = interfaceinvoke v0.<io.netty.handler.codec.http.HttpMessage: io.netty.handler.codec.http.HttpHeaders headers()>();
v8 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString TRANSFER_ENCODING>;
v9 = virtualinvoke v7.<io.netty.handler.codec.http.HttpHeaders: java.util.List getAll(java.lang.CharSequence)>(v8);
v10 = interfaceinvoke v9.<java.util.List: boolean isEmpty()>();
if v10 == 0 goto label2;
return;
label2:
v11 = new java.util.ArrayList;
specialinvoke v11.<java.util.ArrayList: void <init>(java.util.Collection)>(v9);
v12 = interfaceinvoke v11.<java.util.List: java.util.Iterator iterator()>();
label3:
v13 = interfaceinvoke v12.<java.util.Iterator: boolean hasNext()>();
if v13 == 0 goto label4;
v14 = interfaceinvoke v12.<java.util.Iterator: java.lang.Object next()>();
v15 = <io.netty.handler.codec.http.HttpHeaderValues: io.netty.util.AsciiString CHUNKED>;
v16 = virtualinvoke v15.<io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence)>(v14);
if v16 == 0 goto label3;
interfaceinvoke v12.<java.util.Iterator: void remove()>();
goto label3;
label4:
v17 = interfaceinvoke v11.<java.util.List: boolean isEmpty()>();
if v17 == 0 goto label5;
v18 = interfaceinvoke v0.<io.netty.handler.codec.http.HttpMessage: io.netty.handler.codec.http.HttpHeaders headers()>();
v19 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString TRANSFER_ENCODING>;
virtualinvoke v18.<io.netty.handler.codec.http.HttpHeaders: io.netty.handler.codec.http.HttpHeaders remove(java.lang.CharSequence)>(v19);
goto label6;
label5:
v20 = interfaceinvoke v0.<io.netty.handler.codec.http.HttpMessage: io.netty.handler.codec.http.HttpHeaders headers()>();
v21 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString TRANSFER_ENCODING>;
virtualinvoke v20.<io.netty.handler.codec.http.HttpHeaders: io.netty.handler.codec.http.HttpHeaders set(java.lang.CharSequence,java.lang.Iterable)>(v21, v11);
label6:
return;
}
public static java.nio.charset.Charset getCharset(io.netty.handler.codec.http.HttpMessage)
{
java.nio.charset.Charset v1, v2;
io.netty.handler.codec.http.HttpMessage v0;
v0 := @parameter0: io.netty.handler.codec.http.HttpMessage;
v1 = <io.netty.util.CharsetUtil: java.nio.charset.Charset ISO_8859_1>;
v2 = staticinvoke <io.netty.handler.codec.http.HttpUtil: java.nio.charset.Charset getCharset(io.netty.handler.codec.http.HttpMessage,java.nio.charset.Charset)>(v0, v1);
return v2;
}
public static java.nio.charset.Charset getCharset(java.lang.CharSequence)
{
java.lang.CharSequence v0;
java.nio.charset.Charset v1, v2, v3;
v0 := @parameter0: java.lang.CharSequence;
if v0 == null goto label1;
v1 = <io.netty.util.CharsetUtil: java.nio.charset.Charset ISO_8859_1>;
v2 = staticinvoke <io.netty.handler.codec.http.HttpUtil: java.nio.charset.Charset getCharset(java.lang.CharSequence,java.nio.charset.Charset)>(v0, v1);
return v2;
label1:
v3 = <io.netty.util.CharsetUtil: java.nio.charset.Charset ISO_8859_1>;
return v3;
}
public static java.nio.charset.Charset getCharset(io.netty.handler.codec.http.HttpMessage, java.nio.charset.Charset)
{
io.netty.handler.codec.http.HttpHeaders v2;
java.nio.charset.Charset v1, v5;
io.netty.handler.codec.http.HttpMessage v0;
io.netty.util.AsciiString v3;
java.lang.String v4;
v0 := @parameter0: io.netty.handler.codec.http.HttpMessage;
v1 := @parameter1: java.nio.charset.Charset;
v2 = interfaceinvoke v0.<io.netty.handler.codec.http.HttpMessage: io.netty.handler.codec.http.HttpHeaders headers()>();
v3 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString CONTENT_TYPE>;
v4 = virtualinvoke v2.<io.netty.handler.codec.http.HttpHeaders: java.lang.String get(java.lang.CharSequence)>(v3);
if v4 == null goto label1;
v5 = staticinvoke <io.netty.handler.codec.http.HttpUtil: java.nio.charset.Charset getCharset(java.lang.CharSequence,java.nio.charset.Charset)>(v4, v1);
return v5;
label1:
return v1;
}
public static java.nio.charset.Charset getCharset(java.lang.CharSequence, java.nio.charset.Charset)
{
java.lang.CharSequence v0, v2;
char v4, v7;
java.nio.charset.Charset v1, v11;
int v3, v5, v6, v8, v9;
java.nio.charset.IllegalCharsetNameException v12;
java.lang.String v10;
java.nio.charset.UnsupportedCharsetException v13;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.nio.charset.Charset;
if v0 == null goto label5;
v2 = staticinvoke <io.netty.handler.codec.http.HttpUtil: java.lang.CharSequence getCharsetAsSequence(java.lang.CharSequence)>(v0);
if v2 == null goto label5;
v3 = interfaceinvoke v2.<java.lang.CharSequence: int length()>();
if v3 <= 2 goto label1;
v4 = interfaceinvoke v2.<java.lang.CharSequence: char charAt(int)>(0);
if v4 != 34 goto label1;
v5 = interfaceinvoke v2.<java.lang.CharSequence: int length()>();
v6 = v5 - 1;
v7 = interfaceinvoke v2.<java.lang.CharSequence: char charAt(int)>(v6);
if v7 != 34 goto label1;
v8 = interfaceinvoke v2.<java.lang.CharSequence: int length()>();
v9 = v8 - 1;
v2 = interfaceinvoke v2.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(1, v9);
label1:
v10 = virtualinvoke v2.<java.lang.Object: java.lang.String toString()>();
v11 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(v10);
label2:
return v11;
label3:
v12 := @caughtexception;
goto label5;
label4:
v13 := @caughtexception;
label5:
return v1;
catch java.nio.charset.IllegalCharsetNameException from label1 to label2 with label3;
catch java.nio.charset.UnsupportedCharsetException from label1 to label2 with label4;
}
public static java.lang.CharSequence getCharsetAsString(io.netty.handler.codec.http.HttpMessage)
{
java.lang.CharSequence v1;
io.netty.handler.codec.http.HttpMessage v0;
v0 := @parameter0: io.netty.handler.codec.http.HttpMessage;
v1 = staticinvoke <io.netty.handler.codec.http.HttpUtil: java.lang.CharSequence getCharsetAsSequence(io.netty.handler.codec.http.HttpMessage)>(v0);
return v1;
}
public static java.lang.CharSequence getCharsetAsSequence(io.netty.handler.codec.http.HttpMessage)
{
io.netty.handler.codec.http.HttpHeaders v1;
java.lang.CharSequence v4;
io.netty.handler.codec.http.HttpMessage v0;
io.netty.util.AsciiString v2;
java.lang.String v3;
v0 := @parameter0: io.netty.handler.codec.http.HttpMessage;
v1 = interfaceinvoke v0.<io.netty.handler.codec.http.HttpMessage: io.netty.handler.codec.http.HttpHeaders headers()>();
v2 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString CONTENT_TYPE>;
v3 = virtualinvoke v1.<io.netty.handler.codec.http.HttpHeaders: java.lang.String get(java.lang.CharSequence)>(v2);
if v3 == null goto label1;
v4 = staticinvoke <io.netty.handler.codec.http.HttpUtil: java.lang.CharSequence getCharsetAsSequence(java.lang.CharSequence)>(v3);
return v4;
label1:
return null;
}
public static java.lang.CharSequence getCharsetAsSequence(java.lang.CharSequence)
{
java.lang.CharSequence v0, v13, v9;
io.netty.util.AsciiString v1, v10, v4;
int v11, v12, v2, v3, v5, v6, v7, v8;
v0 := @parameter0: java.lang.CharSequence;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, "contentTypeValue");
v1 = <io.netty.handler.codec.http.HttpUtil: io.netty.util.AsciiString CHARSET_EQUALS>;
v2 = staticinvoke <io.netty.util.AsciiString: int indexOfIgnoreCaseAscii(java.lang.CharSequence,java.lang.CharSequence,int)>(v0, v1, 0);
v3 = (int) -1;
if v2 != v3 goto label1;
return null;
label1:
v4 = <io.netty.handler.codec.http.HttpUtil: io.netty.util.AsciiString CHARSET_EQUALS>;
v5 = virtualinvoke v4.<io.netty.util.AsciiString: int length()>();
v6 = v2 + v5;
v7 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
if v6 >= v7 goto label3;
v8 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v9 = interfaceinvoke v0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(v6, v8);
v10 = <io.netty.handler.codec.http.HttpUtil: io.netty.util.AsciiString SEMICOLON>;
v11 = staticinvoke <io.netty.util.AsciiString: int indexOfIgnoreCaseAscii(java.lang.CharSequence,java.lang.CharSequence,int)>(v9, v10, 0);
v12 = (int) -1;
if v11 != v12 goto label2;
return v9;
label2:
v13 = interfaceinvoke v9.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, v11);
return v13;
label3:
return null;
}
public static java.lang.CharSequence getMimeType(io.netty.handler.codec.http.HttpMessage)
{
io.netty.handler.codec.http.HttpHeaders v1;
java.lang.CharSequence v4;
io.netty.handler.codec.http.HttpMessage v0;
io.netty.util.AsciiString v2;
java.lang.String v3;
v0 := @parameter0: io.netty.handler.codec.http.HttpMessage;
v1 = interfaceinvoke v0.<io.netty.handler.codec.http.HttpMessage: io.netty.handler.codec.http.HttpHeaders headers()>();
v2 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString CONTENT_TYPE>;
v3 = virtualinvoke v1.<io.netty.handler.codec.http.HttpHeaders: java.lang.String get(java.lang.CharSequence)>(v2);
if v3 == null goto label1;
v4 = staticinvoke <io.netty.handler.codec.http.HttpUtil: java.lang.CharSequence getMimeType(java.lang.CharSequence)>(v3);
return v4;
label1:
return null;
}
public static java.lang.CharSequence getMimeType(java.lang.CharSequence)
{
java.lang.CharSequence v0, v4, v6;
int v2, v3, v5;
io.netty.util.AsciiString v1;
v0 := @parameter0: java.lang.CharSequence;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, "contentTypeValue");
v1 = <io.netty.handler.codec.http.HttpUtil: io.netty.util.AsciiString SEMICOLON>;
v2 = staticinvoke <io.netty.util.AsciiString: int indexOfIgnoreCaseAscii(java.lang.CharSequence,java.lang.CharSequence,int)>(v0, v1, 0);
v3 = (int) -1;
if v2 == v3 goto label1;
v4 = interfaceinvoke v0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, v2);
return v4;
label1:
v5 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
if v5 <= 0 goto label2;
v6 = v0;
goto label3;
label2:
v6 = null;
label3:
return v6;
}
public static java.lang.String formatHostnameForHttp(java.net.InetSocketAddress)
{
java.net.InetAddress v4;
java.lang.String v1, v5;
java.net.InetSocketAddress v0;
boolean v2, v3;
v0 := @parameter0: java.net.InetSocketAddress;
v1 = staticinvoke <io.netty.util.NetUtil: java.lang.String getHostname(java.net.InetSocketAddress)>(v0);
v2 = staticinvoke <io.netty.util.NetUtil: boolean isValidIpV6Address(java.lang.String)>(v1);
if v2 == 0 goto label2;
v3 = virtualinvoke v0.<java.net.InetSocketAddress: boolean isUnresolved()>();
if v3 != 0 goto label1;
v4 = virtualinvoke v0.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
v1 = staticinvoke <io.netty.util.NetUtil: java.lang.String toAddressString(java.net.InetAddress)>(v4);
label1:
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("[\u0001]");
return v5;
label2:
return v1;
}
public static long normalizeAndGetContentLength(java.util.List, boolean, boolean)
{
boolean v1, v11, v2, v21, v26, v28, v3, v8;
java.util.List v0;
java.lang.String[] v16;
long v31, v32;
int v15, v17, v18, v6, v7;
java.lang.String v13, v14, v19, v20, v23, v25, v30, v35, v5, v9;
java.util.Iterator v10;
char v27;
java.lang.NumberFormatException v33;
java.lang.IllegalArgumentException v22, v24, v29, v34;
java.lang.Object v12, v4;
v0 := @parameter0: java.util.List;
v1 := @parameter1: boolean;
v2 := @parameter2: boolean;
v3 = interfaceinvoke v0.<java.util.List: boolean isEmpty()>();
if v3 == 0 goto label01;
return -1L;
label01:
v4 = interfaceinvoke v0.<java.util.List: java.lang.Object get(int)>(0);
v5 = virtualinvoke v4.<java.lang.Object: java.lang.String toString()>();
v6 = interfaceinvoke v0.<java.util.List: int size()>();
if v6 > 1 goto label02;
v7 = virtualinvoke v5.<java.lang.String: int indexOf(int)>(44);
if v7 < 0 goto label03;
label02:
v8 = 1;
goto label04;
label03:
v8 = 0;
label04:
if v8 == 0 goto label11;
if v1 != 0 goto label11;
if v2 == 0 goto label10;
v9 = null;
v10 = interfaceinvoke v0.<java.util.List: java.util.Iterator iterator()>();
label05:
v11 = interfaceinvoke v10.<java.util.Iterator: boolean hasNext()>();
if v11 == 0 goto label09;
v12 = interfaceinvoke v10.<java.util.Iterator: java.lang.Object next()>();
v13 = virtualinvoke v12.<java.lang.Object: java.lang.String toString()>();
v14 = <io.netty.handler.codec.http.HttpUtil: java.lang.String COMMA_STRING>;
v15 = (int) -1;
v16 = virtualinvoke v13.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(v14, v15);
v17 = lengthof v16;
v18 = 0;
label06:
if v18 >= v17 goto label05;
v19 = v16[v18];
v20 = virtualinvoke v19.<java.lang.String: java.lang.String trim()>();
if v9 != null goto label07;
v9 = v20;
goto label08;
label07:
v21 = virtualinvoke v20.<java.lang.String: boolean equals(java.lang.Object)>(v9);
if v21 != 0 goto label08;
v22 = new java.lang.IllegalArgumentException;
v23 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.util.List)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Multiple Content-Length values found: \u0001");
specialinvoke v22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v23);
throw v22;
label08:
v18 = v18 + 1;
goto label06;
label09:
v5 = v9;
goto label11;
label10:
v24 = new java.lang.IllegalArgumentException;
v25 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.util.List)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Multiple Content-Length values found: \u0001");
specialinvoke v24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v25);
throw v24;
label11:
v26 = virtualinvoke v5.<java.lang.String: boolean isEmpty()>();
if v26 != 0 goto label12;
v27 = virtualinvoke v5.<java.lang.String: char charAt(int)>(0);
v28 = staticinvoke <java.lang.Character: boolean isDigit(char)>(v27);
if v28 != 0 goto label13;
label12:
v29 = new java.lang.IllegalArgumentException;
v30 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Content-Length value is not a number: \u0001");
specialinvoke v29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v30);
throw v29;
label13:
v31 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(v5);
v32 = staticinvoke <io.netty.util.internal.ObjectUtil: long checkPositiveOrZero(long,java.lang.String)>(v31, "Content-Length value");
label14:
return v32;
label15:
v33 := @caughtexception;
v34 = new java.lang.IllegalArgumentException;
v35 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Content-Length value is not a number: \u0001");
specialinvoke v34.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>(v35, v33);
throw v34;
catch java.lang.NumberFormatException from label13 to label14 with label15;
}
static void <clinit>()
{
io.netty.util.AsciiString v0, v2, v3;
java.lang.String v1, v4;
v0 = <io.netty.handler.codec.http.HttpHeaderValues: io.netty.util.AsciiString CHARSET>;
v1 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.netty.util.AsciiString)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001=");
v2 = staticinvoke <io.netty.util.AsciiString: io.netty.util.AsciiString of(java.lang.CharSequence)>(v1);
<io.netty.handler.codec.http.HttpUtil: io.netty.util.AsciiString CHARSET_EQUALS> = v2;
v3 = staticinvoke <io.netty.util.AsciiString: io.netty.util.AsciiString cached(java.lang.String)>(";");
<io.netty.handler.codec.http.HttpUtil: io.netty.util.AsciiString SEMICOLON> = v3;
v4 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(44);
<io.netty.handler.codec.http.HttpUtil: java.lang.String COMMA_STRING> = v4;
return;
}
}