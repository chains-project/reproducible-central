public class io.netty.handler.codec.http.HttpVersion extends java.lang.Object implements java.lang.Comparable
{
private static final java.util.regex.Pattern VERSION_PATTERN;
static final java.lang.String HTTP_1_0_STRING;
static final java.lang.String HTTP_1_1_STRING;
public static final io.netty.handler.codec.http.HttpVersion HTTP_1_0;
public static final io.netty.handler.codec.http.HttpVersion HTTP_1_1;
private final java.lang.String protocolName;
private final int majorVersion;
private final int minorVersion;
private final java.lang.String text;
private final boolean keepAliveDefault;
private final byte[] bytes;
public static io.netty.handler.codec.http.HttpVersion valueOf(java.lang.String)
{
io.netty.handler.codec.http.HttpVersion v1, v2, v6, v7;
java.lang.IllegalArgumentException v5;
java.lang.String v0, v3;
boolean v4;
v0 := @parameter0: java.lang.String;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, "text");
if v0 != "HTTP/1.1" goto label1;
v1 = <io.netty.handler.codec.http.HttpVersion: io.netty.handler.codec.http.HttpVersion HTTP_1_1>;
return v1;
label1:
if v0 != "HTTP/1.0" goto label2;
v2 = <io.netty.handler.codec.http.HttpVersion: io.netty.handler.codec.http.HttpVersion HTTP_1_0>;
return v2;
label2:
v3 = virtualinvoke v0.<java.lang.String: java.lang.String trim()>();
v4 = virtualinvoke v3.<java.lang.String: boolean isEmpty()>();
if v4 == 0 goto label3;
v5 = new java.lang.IllegalArgumentException;
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("text is empty (possibly HTTP/0.9)");
throw v5;
label3:
v6 = staticinvoke <io.netty.handler.codec.http.HttpVersion: io.netty.handler.codec.http.HttpVersion version0(java.lang.String)>(v3);
if v6 != null goto label4;
v7 = new io.netty.handler.codec.http.HttpVersion;
specialinvoke v7.<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,boolean)>(v3, 1);
v6 = v7;
label4:
return v6;
}
private static io.netty.handler.codec.http.HttpVersion version0(java.lang.String)
{
io.netty.handler.codec.http.HttpVersion v3, v6;
java.lang.String v0, v1, v4;
boolean v2, v5;
v0 := @parameter0: java.lang.String;
v1 = "HTTP/1.1";
v2 = virtualinvoke v1.<java.lang.String: boolean equals(java.lang.Object)>(v0);
if v2 == 0 goto label1;
v3 = <io.netty.handler.codec.http.HttpVersion: io.netty.handler.codec.http.HttpVersion HTTP_1_1>;
return v3;
label1:
v4 = "HTTP/1.0";
v5 = virtualinvoke v4.<java.lang.String: boolean equals(java.lang.Object)>(v0);
if v5 == 0 goto label2;
v6 = <io.netty.handler.codec.http.HttpVersion: io.netty.handler.codec.http.HttpVersion HTTP_1_0>;
return v6;
label2:
return null;
}
public void <init>(java.lang.String, boolean)
{
io.netty.handler.codec.http.HttpVersion v0;
java.util.regex.Matcher v6;
int v12, v14, v16, v17;
java.lang.String v1, v10, v11, v13, v15, v18, v3, v4, v9;
boolean v2, v7;
java.lang.IllegalArgumentException v8;
java.util.regex.Pattern v5;
v0 := @this: io.netty.handler.codec.http.HttpVersion;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.String checkNonEmptyAfterTrim(java.lang.String,java.lang.String)>(v1, "text");
v4 = virtualinvoke v3.<java.lang.String: java.lang.String toUpperCase()>();
v5 = <io.netty.handler.codec.http.HttpVersion: java.util.regex.Pattern VERSION_PATTERN>;
v6 = virtualinvoke v5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v4);
v7 = virtualinvoke v6.<java.util.regex.Matcher: boolean matches()>();
if v7 != 0 goto label1;
v8 = new java.lang.IllegalArgumentException;
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("invalid version format: \u0001");
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v9);
throw v8;
label1:
v10 = virtualinvoke v6.<java.util.regex.Matcher: java.lang.String group(int)>(1);
v0.<io.netty.handler.codec.http.HttpVersion: java.lang.String protocolName> = v10;
v11 = virtualinvoke v6.<java.util.regex.Matcher: java.lang.String group(int)>(2);
v12 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v11);
v0.<io.netty.handler.codec.http.HttpVersion: int majorVersion> = v12;
v13 = virtualinvoke v6.<java.util.regex.Matcher: java.lang.String group(int)>(3);
v14 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v13);
v0.<io.netty.handler.codec.http.HttpVersion: int minorVersion> = v14;
v15 = v0.<io.netty.handler.codec.http.HttpVersion: java.lang.String protocolName>;
v16 = v0.<io.netty.handler.codec.http.HttpVersion: int majorVersion>;
v17 = v0.<io.netty.handler.codec.http.HttpVersion: int minorVersion>;
v18 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int,int)>(v15, v16, v17) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001/\u0001.\u0001");
v0.<io.netty.handler.codec.http.HttpVersion: java.lang.String text> = v18;
v0.<io.netty.handler.codec.http.HttpVersion: boolean keepAliveDefault> = v2;
v0.<io.netty.handler.codec.http.HttpVersion: byte[] bytes> = null;
return;
}
public void <init>(java.lang.String, int, int, boolean)
{
io.netty.handler.codec.http.HttpVersion v0;
int v2, v3;
java.lang.String v1;
boolean v4;
v0 := @this: io.netty.handler.codec.http.HttpVersion;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
specialinvoke v0.<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,int,int,boolean,boolean)>(v1, v2, v3, v4, 0);
return;
}
private void <init>(java.lang.String, int, int, boolean, boolean)
{
byte[] v18;
io.netty.handler.codec.http.HttpVersion v0;
java.nio.charset.Charset v17;
int v2, v3, v8, v9;
java.lang.String v1, v15, v16, v6, v7;
boolean v11, v13, v4, v5;
char v10, v12;
java.lang.IllegalArgumentException v14;
v0 := @this: io.netty.handler.codec.http.HttpVersion;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 := @parameter4: boolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
v6 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.String checkNonEmptyAfterTrim(java.lang.String,java.lang.String)>(v1, "protocolName");
v7 = virtualinvoke v6.<java.lang.String: java.lang.String toUpperCase()>();
v8 = 0;
label1:
v9 = virtualinvoke v7.<java.lang.String: int length()>();
if v8 >= v9 goto label4;
v10 = virtualinvoke v7.<java.lang.String: char charAt(int)>(v8);
v11 = staticinvoke <java.lang.Character: boolean isISOControl(char)>(v10);
if v11 != 0 goto label2;
v12 = virtualinvoke v7.<java.lang.String: char charAt(int)>(v8);
v13 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(v12);
if v13 == 0 goto label3;
label2:
v14 = new java.lang.IllegalArgumentException;
specialinvoke v14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid character in protocolName");
throw v14;
label3:
v8 = v8 + 1;
goto label1;
label4:
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositiveOrZero(int,java.lang.String)>(v2, "majorVersion");
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositiveOrZero(int,java.lang.String)>(v3, "minorVersion");
v0.<io.netty.handler.codec.http.HttpVersion: java.lang.String protocolName> = v7;
v0.<io.netty.handler.codec.http.HttpVersion: int majorVersion> = v2;
v0.<io.netty.handler.codec.http.HttpVersion: int minorVersion> = v3;
v15 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int,int)>(v7, v2, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001/\u0001.\u0001");
v0.<io.netty.handler.codec.http.HttpVersion: java.lang.String text> = v15;
v0.<io.netty.handler.codec.http.HttpVersion: boolean keepAliveDefault> = v4;
if v5 == 0 goto label5;
v16 = v0.<io.netty.handler.codec.http.HttpVersion: java.lang.String text>;
v17 = <io.netty.util.CharsetUtil: java.nio.charset.Charset US_ASCII>;
v18 = virtualinvoke v16.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(v17);
v0.<io.netty.handler.codec.http.HttpVersion: byte[] bytes> = v18;
goto label6;
label5:
v0.<io.netty.handler.codec.http.HttpVersion: byte[] bytes> = null;
label6:
return;
}
public java.lang.String protocolName()
{
io.netty.handler.codec.http.HttpVersion v0;
java.lang.String v1;
v0 := @this: io.netty.handler.codec.http.HttpVersion;
v1 = v0.<io.netty.handler.codec.http.HttpVersion: java.lang.String protocolName>;
return v1;
}
public int majorVersion()
{
int v1;
io.netty.handler.codec.http.HttpVersion v0;
v0 := @this: io.netty.handler.codec.http.HttpVersion;
v1 = v0.<io.netty.handler.codec.http.HttpVersion: int majorVersion>;
return v1;
}
public int minorVersion()
{
int v1;
io.netty.handler.codec.http.HttpVersion v0;
v0 := @this: io.netty.handler.codec.http.HttpVersion;
v1 = v0.<io.netty.handler.codec.http.HttpVersion: int minorVersion>;
return v1;
}
public java.lang.String text()
{
io.netty.handler.codec.http.HttpVersion v0;
java.lang.String v1;
v0 := @this: io.netty.handler.codec.http.HttpVersion;
v1 = v0.<io.netty.handler.codec.http.HttpVersion: java.lang.String text>;
return v1;
}
public boolean isKeepAliveDefault()
{
io.netty.handler.codec.http.HttpVersion v0;
boolean v1;
v0 := @this: io.netty.handler.codec.http.HttpVersion;
v1 = v0.<io.netty.handler.codec.http.HttpVersion: boolean keepAliveDefault>;
return v1;
}
public java.lang.String toString()
{
io.netty.handler.codec.http.HttpVersion v0;
java.lang.String v1;
v0 := @this: io.netty.handler.codec.http.HttpVersion;
v1 = virtualinvoke v0.<io.netty.handler.codec.http.HttpVersion: java.lang.String text()>();
return v1;
}
public int hashCode()
{
io.netty.handler.codec.http.HttpVersion v0;
int v2, v3, v4, v5, v6, v7, v8;
java.lang.String v1;
v0 := @this: io.netty.handler.codec.http.HttpVersion;
v1 = virtualinvoke v0.<io.netty.handler.codec.http.HttpVersion: java.lang.String protocolName()>();
v2 = virtualinvoke v1.<java.lang.String: int hashCode()>();
v3 = v2 * 31;
v4 = virtualinvoke v0.<io.netty.handler.codec.http.HttpVersion: int majorVersion()>();
v5 = v3 + v4;
v6 = v5 * 31;
v7 = virtualinvoke v0.<io.netty.handler.codec.http.HttpVersion: int minorVersion()>();
v8 = v6 + v7;
return v8;
}
public boolean equals(java.lang.Object)
{
io.netty.handler.codec.http.HttpVersion v0;
int v3, v4, v5, v6;
java.lang.Object v1;
java.lang.String v7, v8;
boolean v10, v2, v9;
v0 := @this: io.netty.handler.codec.http.HttpVersion;
v1 := @parameter0: java.lang.Object;
v2 = v1 instanceof io.netty.handler.codec.http.HttpVersion;
if v2 != 0 goto label1;
return 0;
label1:
v3 = virtualinvoke v0.<io.netty.handler.codec.http.HttpVersion: int minorVersion()>();
v4 = virtualinvoke v1.<io.netty.handler.codec.http.HttpVersion: int minorVersion()>();
if v3 != v4 goto label2;
v5 = virtualinvoke v0.<io.netty.handler.codec.http.HttpVersion: int majorVersion()>();
v6 = virtualinvoke v1.<io.netty.handler.codec.http.HttpVersion: int majorVersion()>();
if v5 != v6 goto label2;
v7 = virtualinvoke v0.<io.netty.handler.codec.http.HttpVersion: java.lang.String protocolName()>();
v8 = virtualinvoke v1.<io.netty.handler.codec.http.HttpVersion: java.lang.String protocolName()>();
v9 = virtualinvoke v7.<java.lang.String: boolean equals(java.lang.Object)>(v8);
if v9 == 0 goto label2;
v10 = 1;
goto label3;
label2:
v10 = 0;
label3:
return v10;
}
public int compareTo(io.netty.handler.codec.http.HttpVersion)
{
io.netty.handler.codec.http.HttpVersion v0, v1;
int v10, v4, v5, v6, v7, v8, v9;
java.lang.String v2, v3;
v0 := @this: io.netty.handler.codec.http.HttpVersion;
v1 := @parameter0: io.netty.handler.codec.http.HttpVersion;
v2 = virtualinvoke v0.<io.netty.handler.codec.http.HttpVersion: java.lang.String protocolName()>();
v3 = virtualinvoke v1.<io.netty.handler.codec.http.HttpVersion: java.lang.String protocolName()>();
v4 = virtualinvoke v2.<java.lang.String: int compareTo(java.lang.String)>(v3);
if v4 == 0 goto label1;
return v4;
label1:
v5 = virtualinvoke v0.<io.netty.handler.codec.http.HttpVersion: int majorVersion()>();
v6 = virtualinvoke v1.<io.netty.handler.codec.http.HttpVersion: int majorVersion()>();
v7 = v5 - v6;
if v7 == 0 goto label2;
return v7;
label2:
v8 = virtualinvoke v0.<io.netty.handler.codec.http.HttpVersion: int minorVersion()>();
v9 = virtualinvoke v1.<io.netty.handler.codec.http.HttpVersion: int minorVersion()>();
v10 = v8 - v9;
return v10;
}
void encode(io.netty.buffer.ByteBuf)
{
byte[] v2, v5;
io.netty.handler.codec.http.HttpVersion v0;
io.netty.buffer.ByteBuf v1;
java.nio.charset.Charset v4;
java.lang.String v3;
v0 := @this: io.netty.handler.codec.http.HttpVersion;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 = v0.<io.netty.handler.codec.http.HttpVersion: byte[] bytes>;
if v2 != null goto label1;
v3 = v0.<io.netty.handler.codec.http.HttpVersion: java.lang.String text>;
v4 = <io.netty.util.CharsetUtil: java.nio.charset.Charset US_ASCII>;
virtualinvoke v1.<io.netty.buffer.ByteBuf: int writeCharSequence(java.lang.CharSequence,java.nio.charset.Charset)>(v3, v4);
goto label2;
label1:
v5 = v0.<io.netty.handler.codec.http.HttpVersion: byte[] bytes>;
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeBytes(byte[])>(v5);
label2:
return;
}
static void <clinit>()
{
io.netty.handler.codec.http.HttpVersion v1, v2;
java.util.regex.Pattern v0;
v0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(\\S+)/(\\d+)\\.(\\d+)");
<io.netty.handler.codec.http.HttpVersion: java.util.regex.Pattern VERSION_PATTERN> = v0;
v1 = new io.netty.handler.codec.http.HttpVersion;
specialinvoke v1.<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,int,int,boolean,boolean)>("HTTP", 1, 0, 0, 1);
<io.netty.handler.codec.http.HttpVersion: io.netty.handler.codec.http.HttpVersion HTTP_1_0> = v1;
v2 = new io.netty.handler.codec.http.HttpVersion;
specialinvoke v2.<io.netty.handler.codec.http.HttpVersion: void <init>(java.lang.String,int,int,boolean,boolean)>("HTTP", 1, 1, 1, 1);
<io.netty.handler.codec.http.HttpVersion: io.netty.handler.codec.http.HttpVersion HTTP_1_1> = v2;
return;
}
}