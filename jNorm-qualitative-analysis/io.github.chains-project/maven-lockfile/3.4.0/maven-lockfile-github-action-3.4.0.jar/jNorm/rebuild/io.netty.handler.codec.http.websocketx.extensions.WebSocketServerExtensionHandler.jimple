public class io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler extends io.netty.channel.ChannelDuplexHandler
{
private final java.util.List extensionHandshakers;
private final java.util.Queue validExtensions;
public transient void <init>(io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandshaker[])
{
java.util.List v4;
io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler v0;
io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandshaker[] v1;
java.lang.Object[] v3;
java.util.ArrayDeque v2;
v0 := @this: io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler;
v1 := @parameter0: io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandshaker[];
specialinvoke v0.<io.netty.channel.ChannelDuplexHandler: void <init>()>();
v2 = new java.util.ArrayDeque;
specialinvoke v2.<java.util.ArrayDeque: void <init>(int)>(4);
v0.<io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler: java.util.Queue validExtensions> = v2;
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object[] checkNonEmpty(java.lang.Object[],java.lang.String)>(v1, "extensionHandshakers");
v4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v3);
v0.<io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler: java.util.List extensionHandshakers> = v4;
return;
}
public void channelRead(io.netty.channel.ChannelHandlerContext, java.lang.Object) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler v0;
java.lang.Object v2;
boolean v4, v5;
io.netty.handler.codec.http.LastHttpContent v3;
v0 := @this: io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 = <io.netty.handler.codec.http.LastHttpContent: io.netty.handler.codec.http.LastHttpContent EMPTY_LAST_CONTENT>;
if v2 == v3 goto label3;
v4 = v2 instanceof io.netty.handler.codec.http.DefaultHttpRequest;
if v4 == 0 goto label1;
virtualinvoke v0.<io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler: void onHttpRequestChannelRead(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest)>(v1, v2);
goto label4;
label1:
v5 = v2 instanceof io.netty.handler.codec.http.HttpRequest;
if v5 == 0 goto label2;
virtualinvoke v0.<io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler: void onHttpRequestChannelRead(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest)>(v1, v2);
goto label4;
label2:
specialinvoke v0.<io.netty.channel.ChannelDuplexHandler: void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)>(v1, v2);
goto label4;
label3:
specialinvoke v0.<io.netty.channel.ChannelDuplexHandler: void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)>(v1, v2);
label4:
return;
}
protected void onHttpRequestChannelRead(io.netty.channel.ChannelHandlerContext, io.netty.handler.codec.http.HttpRequest) throws java.lang.Exception
{
io.netty.handler.codec.http.HttpHeaders v4, v6;
io.netty.util.AsciiString v7;
io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtension v16;
java.util.ArrayList v21;
io.netty.channel.ChannelHandlerContext v1;
int v10, v19, v20, v22;
java.lang.String v8;
boolean v12, v17, v5;
io.netty.handler.codec.http.HttpRequest v2;
java.util.Iterator v11, v15;
java.util.List v14, v3, v9;
io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler v0;
java.lang.Object v13, v18;
java.util.Queue v23;
v0 := @this: io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.handler.codec.http.HttpRequest;
v3 = null;
v4 = interfaceinvoke v2.<io.netty.handler.codec.http.HttpRequest: io.netty.handler.codec.http.HttpHeaders headers()>();
v5 = staticinvoke <io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionUtil: boolean isWebsocketUpgrade(io.netty.handler.codec.http.HttpHeaders)>(v4);
if v5 == 0 goto label5;
v6 = interfaceinvoke v2.<io.netty.handler.codec.http.HttpRequest: io.netty.handler.codec.http.HttpHeaders headers()>();
v7 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString SEC_WEBSOCKET_EXTENSIONS>;
v8 = virtualinvoke v6.<io.netty.handler.codec.http.HttpHeaders: java.lang.String getAsString(java.lang.CharSequence)>(v7);
if v8 == null goto label5;
v9 = staticinvoke <io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionUtil: java.util.List extractExtensions(java.lang.String)>(v8);
v10 = 0;
v11 = interfaceinvoke v9.<java.util.List: java.util.Iterator iterator()>();
label1:
v12 = interfaceinvoke v11.<java.util.Iterator: boolean hasNext()>();
if v12 == 0 goto label5;
v13 = interfaceinvoke v11.<java.util.Iterator: java.lang.Object next()>();
v14 = v0.<io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler: java.util.List extensionHandshakers>;
v15 = interfaceinvoke v14.<java.util.List: java.util.Iterator iterator()>();
v16 = null;
label2:
if v16 != null goto label3;
v17 = interfaceinvoke v15.<java.util.Iterator: boolean hasNext()>();
if v17 == 0 goto label3;
v18 = interfaceinvoke v15.<java.util.Iterator: java.lang.Object next()>();
v16 = interfaceinvoke v18.<io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandshaker: io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtension handshakeExtension(io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionData)>(v13);
goto label2;
label3:
if v16 == null goto label1;
v19 = interfaceinvoke v16.<io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtension: int rsv()>();
v20 = v19 & v10;
if v20 != 0 goto label1;
if v3 != null goto label4;
v21 = new java.util.ArrayList;
specialinvoke v21.<java.util.ArrayList: void <init>(int)>(1);
v3 = v21;
label4:
v22 = interfaceinvoke v16.<io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtension: int rsv()>();
v10 = v10 | v22;
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v16);
goto label1;
label5:
if v3 != null goto label6;
v3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
label6:
v23 = v0.<io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler: java.util.Queue validExtensions>;
interfaceinvoke v23.<java.util.Queue: boolean offer(java.lang.Object)>(v3);
specialinvoke v0.<io.netty.channel.ChannelDuplexHandler: void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)>(v1, v2);
return;
}
public void write(io.netty.channel.ChannelHandlerContext, java.lang.Object, io.netty.channel.ChannelPromise) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler v0;
io.netty.buffer.ByteBuf v4;
io.netty.channel.ChannelPromise v3;
java.lang.Object v2;
boolean v5, v6, v7;
v0 := @this: io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: io.netty.channel.ChannelPromise;
v4 = <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf EMPTY_BUFFER>;
if v2 == v4 goto label3;
v5 = v2 instanceof io.netty.buffer.ByteBuf;
if v5 != 0 goto label3;
v6 = v2 instanceof io.netty.handler.codec.http.DefaultHttpResponse;
if v6 == 0 goto label1;
virtualinvoke v0.<io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler: void onHttpResponseWrite(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpResponse,io.netty.channel.ChannelPromise)>(v1, v2, v3);
goto label4;
label1:
v7 = v2 instanceof io.netty.handler.codec.http.HttpResponse;
if v7 == 0 goto label2;
virtualinvoke v0.<io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler: void onHttpResponseWrite(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpResponse,io.netty.channel.ChannelPromise)>(v1, v2, v3);
goto label4;
label2:
specialinvoke v0.<io.netty.channel.ChannelDuplexHandler: void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>(v1, v2, v3);
goto label4;
label3:
specialinvoke v0.<io.netty.channel.ChannelDuplexHandler: void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>(v1, v2, v3);
label4:
return;
}
protected void onHttpResponseWrite(io.netty.channel.ChannelHandlerContext, io.netty.handler.codec.http.HttpResponse, io.netty.channel.ChannelPromise) throws java.lang.Exception
{
io.netty.handler.codec.http.HttpResponseStatus v6, v7;
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler v0;
io.netty.channel.ChannelPromise v3;
io.netty.handler.codec.http.HttpResponse v2;
java.lang.Object v5;
java.util.Queue v4;
boolean v8;
v0 := @this: io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.handler.codec.http.HttpResponse;
v3 := @parameter2: io.netty.channel.ChannelPromise;
v4 = v0.<io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler: java.util.Queue validExtensions>;
v5 = interfaceinvoke v4.<java.util.Queue: java.lang.Object poll()>();
v6 = <io.netty.handler.codec.http.HttpResponseStatus: io.netty.handler.codec.http.HttpResponseStatus SWITCHING_PROTOCOLS>;
v7 = interfaceinvoke v2.<io.netty.handler.codec.http.HttpResponse: io.netty.handler.codec.http.HttpResponseStatus status()>();
v8 = virtualinvoke v6.<io.netty.handler.codec.http.HttpResponseStatus: boolean equals(java.lang.Object)>(v7);
if v8 == 0 goto label1;
specialinvoke v0.<io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler: void handlePotentialUpgrade(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise,io.netty.handler.codec.http.HttpResponse,java.util.List)>(v1, v3, v2, v5);
label1:
specialinvoke v0.<io.netty.channel.ChannelDuplexHandler: void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>(v1, v2, v3);
return;
}
private void handlePotentialUpgrade(io.netty.channel.ChannelHandlerContext, io.netty.channel.ChannelPromise, io.netty.handler.codec.http.HttpResponse, java.util.List)
{
io.netty.handler.codec.http.HttpHeaders v5;
io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler$2 v20;
io.netty.util.AsciiString v19, v8;
java.util.ArrayList v10;
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelPromise v2;
int v12;
io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler$1 v18;
java.lang.String v17, v9;
boolean v14, v6, v7;
io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionData v16;
java.util.Iterator v13;
java.util.List v11, v4;
io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler v0;
io.netty.handler.codec.http.HttpResponse v3;
java.lang.Object v15;
v0 := @this: io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 := @parameter2: io.netty.handler.codec.http.HttpResponse;
v4 := @parameter3: java.util.List;
v5 = interfaceinvoke v3.<io.netty.handler.codec.http.HttpResponse: io.netty.handler.codec.http.HttpHeaders headers()>();
v6 = staticinvoke <io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionUtil: boolean isWebsocketUpgrade(io.netty.handler.codec.http.HttpHeaders)>(v5);
if v6 == 0 goto label4;
if v4 == null goto label3;
v7 = interfaceinvoke v4.<java.util.List: boolean isEmpty()>();
if v7 != 0 goto label3;
v8 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString SEC_WEBSOCKET_EXTENSIONS>;
v9 = virtualinvoke v5.<io.netty.handler.codec.http.HttpHeaders: java.lang.String getAsString(java.lang.CharSequence)>(v8);
v10 = new java.util.ArrayList;
v11 = v0.<io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler: java.util.List extensionHandshakers>;
v12 = interfaceinvoke v11.<java.util.List: int size()>();
specialinvoke v10.<java.util.ArrayList: void <init>(int)>(v12);
v13 = interfaceinvoke v4.<java.util.List: java.util.Iterator iterator()>();
label1:
v14 = interfaceinvoke v13.<java.util.Iterator: boolean hasNext()>();
if v14 == 0 goto label2;
v15 = interfaceinvoke v13.<java.util.Iterator: java.lang.Object next()>();
v16 = interfaceinvoke v15.<io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtension: io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionData newReponseData()>();
interfaceinvoke v10.<java.util.List: boolean add(java.lang.Object)>(v16);
goto label1;
label2:
v17 = staticinvoke <io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionUtil: java.lang.String computeMergeExtensionsHeaderValue(java.lang.String,java.util.List)>(v9, v10);
v18 = new io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler$1;
specialinvoke v18.<io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler$1: void <init>(io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler,java.util.List,io.netty.channel.ChannelHandlerContext)>(v0, v4, v1);
interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise addListener(io.netty.util.concurrent.GenericFutureListener)>(v18);
if v17 == null goto label3;
v19 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString SEC_WEBSOCKET_EXTENSIONS>;
virtualinvoke v5.<io.netty.handler.codec.http.HttpHeaders: io.netty.handler.codec.http.HttpHeaders set(java.lang.CharSequence,java.lang.Object)>(v19, v17);
label3:
v20 = new io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler$2;
specialinvoke v20.<io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler$2: void <init>(io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler,io.netty.channel.ChannelHandlerContext)>(v0, v1);
interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise addListener(io.netty.util.concurrent.GenericFutureListener)>(v20);
label4:
return;
}
}