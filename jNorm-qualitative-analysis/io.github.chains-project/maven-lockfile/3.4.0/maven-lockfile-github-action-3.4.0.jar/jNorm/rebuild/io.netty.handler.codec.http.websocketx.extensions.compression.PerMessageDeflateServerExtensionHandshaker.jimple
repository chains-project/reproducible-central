public final class io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateServerExtensionHandshaker extends java.lang.Object implements io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandshaker
{
public static final int MIN_WINDOW_SIZE;
public static final int MAX_WINDOW_SIZE;
static final java.lang.String PERMESSAGE_DEFLATE_EXTENSION;
static final java.lang.String CLIENT_MAX_WINDOW;
static final java.lang.String SERVER_MAX_WINDOW;
static final java.lang.String CLIENT_NO_CONTEXT;
static final java.lang.String SERVER_NO_CONTEXT;
private final int compressionLevel;
private final boolean allowServerWindowSize;
private final int preferredClientWindowSize;
private final boolean allowServerNoContext;
private final boolean preferredClientNoContext;
private final io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionFilterProvider extensionFilterProvider;
public void <init>()
{
io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateServerExtensionHandshaker v0;
boolean v1;
v0 := @this: io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateServerExtensionHandshaker;
v1 = staticinvoke <io.netty.handler.codec.compression.ZlibCodecFactory: boolean isSupportingWindowSizeAndMemLevel()>();
specialinvoke v0.<io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateServerExtensionHandshaker: void <init>(int,boolean,int,boolean,boolean)>(6, v1, 15, 0, 0);
return;
}
public void <init>(int, boolean, int, boolean, boolean)
{
io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionFilterProvider v6;
io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateServerExtensionHandshaker v0;
int v1, v3;
boolean v2, v4, v5;
v0 := @this: io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateServerExtensionHandshaker;
v1 := @parameter0: int;
v2 := @parameter1: boolean;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 := @parameter4: boolean;
v6 = <io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionFilterProvider: io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionFilterProvider DEFAULT>;
specialinvoke v0.<io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateServerExtensionHandshaker: void <init>(int,boolean,int,boolean,boolean,io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionFilterProvider)>(v1, v2, v3, v4, v5, v6);
return;
}
public void <init>(int, boolean, int, boolean, boolean, io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionFilterProvider)
{
io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionFilterProvider v6;
io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateServerExtensionHandshaker v0;
java.lang.IllegalArgumentException v7, v9;
int v1, v3;
java.lang.Object v11;
java.lang.String v10, v8;
boolean v2, v4, v5;
v0 := @this: io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateServerExtensionHandshaker;
v1 := @parameter0: int;
v2 := @parameter1: boolean;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 := @parameter4: boolean;
v6 := @parameter5: io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionFilterProvider;
specialinvoke v0.<java.lang.Object: void <init>()>();
if v3 > 15 goto label1;
if v3 >= 8 goto label2;
label1:
v7 = new java.lang.IllegalArgumentException;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("preferredServerWindowSize: \u0001 (expected: 8-15)");
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v8);
throw v7;
label2:
if v1 < 0 goto label3;
if v1 <= 9 goto label4;
label3:
v9 = new java.lang.IllegalArgumentException;
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("compressionLevel: \u0001 (expected: 0-9)");
specialinvoke v9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v10);
throw v9;
label4:
v0.<io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateServerExtensionHandshaker: int compressionLevel> = v1;
v0.<io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateServerExtensionHandshaker: boolean allowServerWindowSize> = v2;
v0.<io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateServerExtensionHandshaker: int preferredClientWindowSize> = v3;
v0.<io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateServerExtensionHandshaker: boolean allowServerNoContext> = v4;
v0.<io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateServerExtensionHandshaker: boolean preferredClientNoContext> = v5;
v11 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v6, "extensionFilterProvider");
v0.<io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateServerExtensionHandshaker: io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionFilterProvider extensionFilterProvider> = v11;
return;
}
public io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtension handshakeExtension(io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionData)
{
java.util.Map v10;
boolean v13, v17, v20, v21, v25, v28, v29, v4, v5, v8, v9;
io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionData v1;
io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateServerExtensionHandshaker v0;
java.util.Set v11;
io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionFilterProvider v32;
io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateServerExtensionHandshaker$PermessageDeflateExtension v30;
int v31, v6, v7;
java.lang.String v15, v18, v2, v23, v26, v3;
java.util.Iterator v12;
java.lang.Object v14, v16, v19, v22, v24, v27;
v0 := @this: io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateServerExtensionHandshaker;
v1 := @parameter0: io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionData;
v2 = "permessage-deflate";
v3 = virtualinvoke v1.<io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionData: java.lang.String name()>();
v4 = virtualinvoke v2.<java.lang.String: boolean equals(java.lang.Object)>(v3);
if v4 != 0 goto label01;
return null;
label01:
v5 = 1;
v6 = 15;
v7 = 15;
v8 = 0;
v9 = 0;
v10 = virtualinvoke v1.<io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionData: java.util.Map parameters()>();
v11 = interfaceinvoke v10.<java.util.Map: java.util.Set entrySet()>();
v12 = interfaceinvoke v11.<java.util.Set: java.util.Iterator iterator()>();
label02:
if v5 == 0 goto label11;
v13 = interfaceinvoke v12.<java.util.Iterator: boolean hasNext()>();
if v13 == 0 goto label10;
v14 = interfaceinvoke v12.<java.util.Iterator: java.lang.Object next()>();
v15 = "client_max_window_bits";
v16 = interfaceinvoke v14.<java.util.Map$Entry: java.lang.Object getKey()>();
v17 = virtualinvoke v15.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v16);
if v17 == 0 goto label03;
v6 = v0.<io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateServerExtensionHandshaker: int preferredClientWindowSize>;
goto label02;
label03:
v18 = "server_max_window_bits";
v19 = interfaceinvoke v14.<java.util.Map$Entry: java.lang.Object getKey()>();
v20 = virtualinvoke v18.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v19);
if v20 == 0 goto label06;
v21 = v0.<io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateServerExtensionHandshaker: boolean allowServerWindowSize>;
if v21 == 0 goto label05;
v22 = interfaceinvoke v14.<java.util.Map$Entry: java.lang.Object getValue()>();
v7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v22);
if v7 > 15 goto label04;
if v7 >= 8 goto label02;
label04:
v5 = 0;
goto label02;
label05:
v5 = 0;
goto label02;
label06:
v23 = "client_no_context_takeover";
v24 = interfaceinvoke v14.<java.util.Map$Entry: java.lang.Object getKey()>();
v25 = virtualinvoke v23.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v24);
if v25 == 0 goto label07;
v9 = v0.<io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateServerExtensionHandshaker: boolean preferredClientNoContext>;
goto label02;
label07:
v26 = "server_no_context_takeover";
v27 = interfaceinvoke v14.<java.util.Map$Entry: java.lang.Object getKey()>();
v28 = virtualinvoke v26.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v27);
if v28 == 0 goto label09;
v29 = v0.<io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateServerExtensionHandshaker: boolean allowServerNoContext>;
if v29 == 0 goto label08;
v8 = 1;
goto label02;
label08:
v5 = 0;
goto label02;
label09:
v5 = 0;
goto label02;
label10:
if v5 == 0 goto label11;
v30 = new io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateServerExtensionHandshaker$PermessageDeflateExtension;
v31 = v0.<io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateServerExtensionHandshaker: int compressionLevel>;
v32 = v0.<io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateServerExtensionHandshaker: io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionFilterProvider extensionFilterProvider>;
specialinvoke v30.<io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateServerExtensionHandshaker$PermessageDeflateExtension: void <init>(int,boolean,int,boolean,int,io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionFilterProvider)>(v31, v8, v7, v9, v6, v32);
return v30;
label11:
return null;
}
}