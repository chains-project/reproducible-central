public class io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder extends io.netty.handler.codec.http2.DecoratingHttp2ConnectionEncoder
{
public static final int DEFAULT_COMPRESSION_LEVEL;
public static final int DEFAULT_WINDOW_BITS;
public static final int DEFAULT_MEM_LEVEL;
private int compressionLevel;
private int windowBits;
private int memLevel;
private final io.netty.handler.codec.http2.Http2Connection$PropertyKey propertyKey;
private final boolean supportsCompressionOptions;
private io.netty.handler.codec.compression.BrotliOptions brotliOptions;
private io.netty.handler.codec.compression.GzipOptions gzipCompressionOptions;
private io.netty.handler.codec.compression.DeflateOptions deflateOptions;
private io.netty.handler.codec.compression.ZstdOptions zstdOptions;
public void <init>(io.netty.handler.codec.http2.Http2ConnectionEncoder)
{
io.netty.handler.codec.http2.Http2ConnectionEncoder v1;
io.netty.handler.codec.compression.CompressionOptions[] v2;
io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder v0;
v0 := @this: io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder;
v1 := @parameter0: io.netty.handler.codec.http2.Http2ConnectionEncoder;
v2 = staticinvoke <io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.handler.codec.compression.CompressionOptions[] defaultCompressionOptions()>();
specialinvoke v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: void <init>(io.netty.handler.codec.http2.Http2ConnectionEncoder,io.netty.handler.codec.compression.CompressionOptions[])>(v1, v2);
return;
}
private static io.netty.handler.codec.compression.CompressionOptions[] defaultCompressionOptions()
{
io.netty.handler.codec.compression.CompressionOptions[] v1, v5;
io.netty.handler.codec.compression.GzipOptions v3, v6;
io.netty.handler.codec.compression.BrotliOptions v2;
io.netty.handler.codec.compression.DeflateOptions v4, v7;
boolean v0;
v0 = staticinvoke <io.netty.handler.codec.compression.Brotli: boolean isAvailable()>();
if v0 == 0 goto label1;
v1 = newarray (io.netty.handler.codec.compression.CompressionOptions)[3];
v2 = staticinvoke <io.netty.handler.codec.compression.StandardCompressionOptions: io.netty.handler.codec.compression.BrotliOptions brotli()>();
v1[0] = v2;
v3 = staticinvoke <io.netty.handler.codec.compression.StandardCompressionOptions: io.netty.handler.codec.compression.GzipOptions gzip()>();
v1[1] = v3;
v4 = staticinvoke <io.netty.handler.codec.compression.StandardCompressionOptions: io.netty.handler.codec.compression.DeflateOptions deflate()>();
v1[2] = v4;
return v1;
label1:
v5 = newarray (io.netty.handler.codec.compression.CompressionOptions)[2];
v6 = staticinvoke <io.netty.handler.codec.compression.StandardCompressionOptions: io.netty.handler.codec.compression.GzipOptions gzip()>();
v5[0] = v6;
v7 = staticinvoke <io.netty.handler.codec.compression.StandardCompressionOptions: io.netty.handler.codec.compression.DeflateOptions deflate()>();
v5[1] = v7;
return v5;
}
public void <init>(io.netty.handler.codec.http2.Http2ConnectionEncoder, int, int, int)
{
io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder v0;
io.netty.handler.codec.http2.Http2ConnectionEncoder v1;
io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder$1 v11;
io.netty.handler.codec.http2.Http2Connection v10, v8;
io.netty.handler.codec.http2.Http2Connection$PropertyKey v9;
int v2, v3, v4, v5, v6, v7;
v0 := @this: io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder;
v1 := @parameter0: io.netty.handler.codec.http2.Http2ConnectionEncoder;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: int;
specialinvoke v0.<io.netty.handler.codec.http2.DecoratingHttp2ConnectionEncoder: void <init>(io.netty.handler.codec.http2.Http2ConnectionEncoder)>(v1);
v5 = staticinvoke <io.netty.util.internal.ObjectUtil: int checkInRange(int,int,int,java.lang.String)>(v2, 0, 9, "compressionLevel");
v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: int compressionLevel> = v5;
v6 = staticinvoke <io.netty.util.internal.ObjectUtil: int checkInRange(int,int,int,java.lang.String)>(v3, 9, 15, "windowBits");
v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: int windowBits> = v6;
v7 = staticinvoke <io.netty.util.internal.ObjectUtil: int checkInRange(int,int,int,java.lang.String)>(v4, 1, 9, "memLevel");
v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: int memLevel> = v7;
v8 = virtualinvoke v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2Connection connection()>();
v9 = interfaceinvoke v8.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Connection$PropertyKey newKey()>();
v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2Connection$PropertyKey propertyKey> = v9;
v10 = virtualinvoke v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2Connection connection()>();
v11 = new io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder$1;
specialinvoke v11.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder$1: void <init>(io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder)>(v0);
interfaceinvoke v10.<io.netty.handler.codec.http2.Http2Connection: void addListener(io.netty.handler.codec.http2.Http2Connection$Listener)>(v11);
v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: boolean supportsCompressionOptions> = 0;
return;
}
public transient void <init>(io.netty.handler.codec.http2.Http2ConnectionEncoder, io.netty.handler.codec.compression.CompressionOptions[])
{
io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder v0;
io.netty.handler.codec.http2.Http2ConnectionEncoder v1;
io.netty.handler.codec.compression.CompressionOptions v5;
int v3, v4;
java.lang.String v13, v14;
boolean v10, v6, v7, v8, v9;
io.netty.handler.codec.compression.CompressionOptions[] v2;
java.lang.IllegalArgumentException v11;
io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder$2 v18;
io.netty.handler.codec.http2.Http2Connection v15, v17;
io.netty.handler.codec.http2.Http2Connection$PropertyKey v16;
java.lang.Class v12;
v0 := @this: io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder;
v1 := @parameter0: io.netty.handler.codec.http2.Http2ConnectionEncoder;
v2 := @parameter1: io.netty.handler.codec.compression.CompressionOptions[];
specialinvoke v0.<io.netty.handler.codec.http2.DecoratingHttp2ConnectionEncoder: void <init>(io.netty.handler.codec.http2.Http2ConnectionEncoder)>(v1);
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "CompressionOptions");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object[] deepCheckNotNull(java.lang.String,java.lang.Object[])>("CompressionOptions", v2);
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label7;
v5 = v2[v4];
v6 = staticinvoke <io.netty.handler.codec.compression.Brotli: boolean isAvailable()>();
if v6 == 0 goto label2;
v7 = v5 instanceof io.netty.handler.codec.compression.BrotliOptions;
if v7 == 0 goto label2;
v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.handler.codec.compression.BrotliOptions brotliOptions> = v5;
goto label6;
label2:
v8 = v5 instanceof io.netty.handler.codec.compression.GzipOptions;
if v8 == 0 goto label3;
v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.handler.codec.compression.GzipOptions gzipCompressionOptions> = v5;
goto label6;
label3:
v9 = v5 instanceof io.netty.handler.codec.compression.DeflateOptions;
if v9 == 0 goto label4;
v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.handler.codec.compression.DeflateOptions deflateOptions> = v5;
goto label6;
label4:
v10 = v5 instanceof io.netty.handler.codec.compression.ZstdOptions;
if v10 == 0 goto label5;
v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.handler.codec.compression.ZstdOptions zstdOptions> = v5;
goto label6;
label5:
v11 = new java.lang.IllegalArgumentException;
v12 = class "Lio/netty/handler/codec/compression/CompressionOptions;";
v13 = virtualinvoke v12.<java.lang.Class: java.lang.String getSimpleName()>();
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,io.netty.handler.codec.compression.CompressionOptions)>(v13, v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unsupported \u0001: \u0001");
specialinvoke v11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v14);
throw v11;
label6:
v4 = v4 + 1;
goto label1;
label7:
v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: boolean supportsCompressionOptions> = 1;
v15 = virtualinvoke v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2Connection connection()>();
v16 = interfaceinvoke v15.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Connection$PropertyKey newKey()>();
v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2Connection$PropertyKey propertyKey> = v16;
v17 = virtualinvoke v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2Connection connection()>();
v18 = new io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder$2;
specialinvoke v18.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder$2: void <init>(io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder)>(v0);
interfaceinvoke v17.<io.netty.handler.codec.http2.Http2Connection: void addListener(io.netty.handler.codec.http2.Http2Connection$Listener)>(v18);
return;
}
public io.netty.channel.ChannelFuture writeData(io.netty.channel.ChannelHandlerContext, int, io.netty.buffer.ByteBuf, int, boolean, io.netty.channel.ChannelPromise)
{
io.netty.util.concurrent.EventExecutor v18;
java.lang.Throwable v25, v26;
io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder v0;
java.lang.Object[] v12;
io.netty.channel.ChannelHandlerContext v1;
io.netty.buffer.ByteBuf v13, v15, v19, v3;
io.netty.channel.ChannelPromise v24, v6;
int v2, v4;
io.netty.handler.codec.http2.Http2Stream v8;
boolean v14, v20, v21, v22, v23, v5;
io.netty.util.concurrent.PromiseCombiner v17;
io.netty.channel.ChannelFuture v11, v16;
io.netty.handler.codec.http2.Http2Connection v7;
io.netty.handler.codec.http2.Http2Connection$PropertyKey v9;
java.lang.Object v10;
v0 := @this: io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: int;
v3 := @parameter2: io.netty.buffer.ByteBuf;
v4 := @parameter3: int;
v5 := @parameter4: boolean;
v6 := @parameter5: io.netty.channel.ChannelPromise;
v7 = virtualinvoke v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2Connection connection()>();
v8 = interfaceinvoke v7.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Stream stream(int)>(v2);
if v8 == null goto label01;
v9 = v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2Connection$PropertyKey propertyKey>;
v10 = interfaceinvoke v8.<io.netty.handler.codec.http2.Http2Stream: java.lang.Object getProperty(io.netty.handler.codec.http2.Http2Connection$PropertyKey)>(v9);
label01:
if v10 != null goto label02;
v11 = specialinvoke v0.<io.netty.handler.codec.http2.DecoratingHttp2ConnectionEncoder: io.netty.channel.ChannelFuture writeData(io.netty.channel.ChannelHandlerContext,int,io.netty.buffer.ByteBuf,int,boolean,io.netty.channel.ChannelPromise)>(v1, v2, v3, v4, v5, v6);
return v11;
label02:
v12 = newarray (java.lang.Object)[1];
v12[0] = v3;
virtualinvoke v10.<io.netty.channel.embedded.EmbeddedChannel: boolean writeOutbound(java.lang.Object[])>(v12);
v13 = staticinvoke <io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.buffer.ByteBuf nextReadableBuf(io.netty.channel.embedded.EmbeddedChannel)>(v10);
if v13 != null goto label11;
if v5 == 0 goto label08;
v14 = virtualinvoke v10.<io.netty.channel.embedded.EmbeddedChannel: boolean finish()>();
if v14 == 0 goto label03;
v13 = staticinvoke <io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.buffer.ByteBuf nextReadableBuf(io.netty.channel.embedded.EmbeddedChannel)>(v10);
label03:
if v13 != null goto label04;
v15 = <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf EMPTY_BUFFER>;
goto label05;
label04:
v15 = v13;
label05:
v16 = specialinvoke v0.<io.netty.handler.codec.http2.DecoratingHttp2ConnectionEncoder: io.netty.channel.ChannelFuture writeData(io.netty.channel.ChannelHandlerContext,int,io.netty.buffer.ByteBuf,int,boolean,io.netty.channel.ChannelPromise)>(v1, v2, v15, v4, 1, v6);
label06:
if v5 == 0 goto label07;
virtualinvoke v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: void cleanup(io.netty.handler.codec.http2.Http2Stream,io.netty.channel.embedded.EmbeddedChannel)>(v8, v10);
label07:
return v16;
label08:
interfaceinvoke v6.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setSuccess()>();
label09:
if v5 == 0 goto label10;
virtualinvoke v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: void cleanup(io.netty.handler.codec.http2.Http2Stream,io.netty.channel.embedded.EmbeddedChannel)>(v8, v10);
label10:
return v6;
label11:
v17 = new io.netty.util.concurrent.PromiseCombiner;
v18 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
specialinvoke v17.<io.netty.util.concurrent.PromiseCombiner: void <init>(io.netty.util.concurrent.EventExecutor)>(v18);
label12:
v19 = staticinvoke <io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.buffer.ByteBuf nextReadableBuf(io.netty.channel.embedded.EmbeddedChannel)>(v10);
if v19 != null goto label13;
if v5 == 0 goto label13;
v20 = 1;
goto label14;
label13:
v20 = 0;
label14:
v21 = v20;
if v20 == 0 goto label17;
v22 = virtualinvoke v10.<io.netty.channel.embedded.EmbeddedChannel: boolean finish()>();
if v22 == 0 goto label17;
v19 = staticinvoke <io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.buffer.ByteBuf nextReadableBuf(io.netty.channel.embedded.EmbeddedChannel)>(v10);
if v19 != null goto label15;
v23 = 1;
goto label16;
label15:
v23 = 0;
label16:
v21 = v23;
label17:
v24 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPromise newPromise()>();
virtualinvoke v17.<io.netty.util.concurrent.PromiseCombiner: void add(io.netty.util.concurrent.Promise)>(v24);
specialinvoke v0.<io.netty.handler.codec.http2.DecoratingHttp2ConnectionEncoder: io.netty.channel.ChannelFuture writeData(io.netty.channel.ChannelHandlerContext,int,io.netty.buffer.ByteBuf,int,boolean,io.netty.channel.ChannelPromise)>(v1, v2, v13, v4, v21, v24);
if v19 == null goto label18;
v4 = 0;
v13 = v19;
goto label12;
label18:
virtualinvoke v17.<io.netty.util.concurrent.PromiseCombiner: void finish(io.netty.util.concurrent.Promise)>(v6);
label19:
if v5 == 0 goto label24;
virtualinvoke v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: void cleanup(io.netty.handler.codec.http2.Http2Stream,io.netty.channel.embedded.EmbeddedChannel)>(v8, v10);
goto label24;
label20:
v25 := @caughtexception;
interfaceinvoke v6.<io.netty.channel.ChannelPromise: boolean tryFailure(java.lang.Throwable)>(v25);
label21:
if v5 == 0 goto label24;
virtualinvoke v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: void cleanup(io.netty.handler.codec.http2.Http2Stream,io.netty.channel.embedded.EmbeddedChannel)>(v8, v10);
goto label24;
label22:
v26 := @caughtexception;
if v5 == 0 goto label23;
virtualinvoke v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: void cleanup(io.netty.handler.codec.http2.Http2Stream,io.netty.channel.embedded.EmbeddedChannel)>(v8, v10);
label23:
throw v26;
label24:
return v6;
catch java.lang.Throwable from label02 to label06 with label20;
catch java.lang.Throwable from label08 to label09 with label20;
catch java.lang.Throwable from label11 to label19 with label20;
catch java.lang.Throwable from label20 to label21 with label22;
}
public io.netty.channel.ChannelFuture writeHeaders(io.netty.channel.ChannelHandlerContext, int, io.netty.handler.codec.http2.Http2Headers, int, boolean, io.netty.channel.ChannelPromise)
{
java.lang.Throwable v9;
io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder v0;
io.netty.channel.embedded.EmbeddedChannel v7;
io.netty.channel.ChannelFuture v8;
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelPromise v6;
io.netty.handler.codec.http2.Http2Headers v3;
int v2, v4;
boolean v5;
v0 := @this: io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: int;
v3 := @parameter2: io.netty.handler.codec.http2.Http2Headers;
v4 := @parameter3: int;
v5 := @parameter4: boolean;
v6 := @parameter5: io.netty.channel.ChannelPromise;
label1:
v7 = specialinvoke v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.channel.embedded.EmbeddedChannel newCompressor(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http2.Http2Headers,boolean)>(v1, v3, v5);
v8 = specialinvoke v0.<io.netty.handler.codec.http2.DecoratingHttp2ConnectionEncoder: io.netty.channel.ChannelFuture writeHeaders(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.http2.Http2Headers,int,boolean,io.netty.channel.ChannelPromise)>(v1, v2, v3, v4, v5, v6);
specialinvoke v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: void bindCompressorToStream(io.netty.channel.embedded.EmbeddedChannel,int)>(v7, v2);
label2:
return v8;
label3:
v9 := @caughtexception;
interfaceinvoke v6.<io.netty.channel.ChannelPromise: boolean tryFailure(java.lang.Throwable)>(v9);
return v6;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.netty.channel.ChannelFuture writeHeaders(io.netty.channel.ChannelHandlerContext, int, io.netty.handler.codec.http2.Http2Headers, int, short, boolean, int, boolean, io.netty.channel.ChannelPromise)
{
java.lang.Throwable v12;
io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder v0;
io.netty.channel.embedded.EmbeddedChannel v10;
io.netty.channel.ChannelFuture v11;
io.netty.channel.ChannelHandlerContext v1;
short v5;
io.netty.channel.ChannelPromise v9;
io.netty.handler.codec.http2.Http2Headers v3;
int v2, v4, v7;
boolean v6, v8;
v0 := @this: io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: int;
v3 := @parameter2: io.netty.handler.codec.http2.Http2Headers;
v4 := @parameter3: int;
v5 := @parameter4: short;
v6 := @parameter5: boolean;
v7 := @parameter6: int;
v8 := @parameter7: boolean;
v9 := @parameter8: io.netty.channel.ChannelPromise;
label1:
v10 = specialinvoke v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.channel.embedded.EmbeddedChannel newCompressor(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http2.Http2Headers,boolean)>(v1, v3, v8);
v11 = specialinvoke v0.<io.netty.handler.codec.http2.DecoratingHttp2ConnectionEncoder: io.netty.channel.ChannelFuture writeHeaders(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.http2.Http2Headers,int,short,boolean,int,boolean,io.netty.channel.ChannelPromise)>(v1, v2, v3, v4, v5, v6, v7, v8, v9);
specialinvoke v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: void bindCompressorToStream(io.netty.channel.embedded.EmbeddedChannel,int)>(v10, v2);
label2:
return v11;
label3:
v12 := @caughtexception;
interfaceinvoke v9.<io.netty.channel.ChannelPromise: boolean tryFailure(java.lang.Throwable)>(v12);
return v9;
catch java.lang.Throwable from label1 to label2 with label3;
}
protected io.netty.channel.embedded.EmbeddedChannel newContentCompressor(io.netty.channel.ChannelHandlerContext, java.lang.CharSequence) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.channel.ChannelId v21, v36;
io.netty.util.AsciiString v11, v17, v3, v32, v5, v9;
boolean v10, v12, v15, v18, v24, v33, v39, v4, v6;
io.netty.handler.codec.compression.ZstdOptions v31, v44, v46, v48;
java.lang.CharSequence v2;
io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder v0;
io.netty.channel.ChannelHandlerContext v1;
int v45, v47, v49;
io.netty.handler.codec.compression.BrotliOptions v16, v29;
io.netty.channel.ChannelMetadata v23, v38;
com.aayushatharva.brotli4j.encoder.Encoder$Parameters v30;
io.netty.handler.codec.compression.BrotliEncoder v28;
io.netty.channel.embedded.EmbeddedChannel v14, v19, v34, v8;
io.netty.handler.codec.compression.ZlibWrapper v13, v7;
io.netty.channel.ChannelHandler[] v27, v42;
io.netty.channel.Channel v20, v22, v25, v35, v37, v40;
io.netty.handler.codec.compression.ZstdEncoder v43;
io.netty.channel.ChannelConfig v26, v41;
v0 := @this: io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.CharSequence;
v3 = <io.netty.handler.codec.http.HttpHeaderValues: io.netty.util.AsciiString GZIP>;
v4 = virtualinvoke v3.<io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence)>(v2);
if v4 != 0 goto label1;
v5 = <io.netty.handler.codec.http.HttpHeaderValues: io.netty.util.AsciiString X_GZIP>;
v6 = virtualinvoke v5.<io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence)>(v2);
if v6 == 0 goto label2;
label1:
v7 = <io.netty.handler.codec.compression.ZlibWrapper: io.netty.handler.codec.compression.ZlibWrapper GZIP>;
v8 = specialinvoke v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.channel.embedded.EmbeddedChannel newCompressionChannel(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.compression.ZlibWrapper)>(v1, v7);
return v8;
label2:
v9 = <io.netty.handler.codec.http.HttpHeaderValues: io.netty.util.AsciiString DEFLATE>;
v10 = virtualinvoke v9.<io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence)>(v2);
if v10 != 0 goto label3;
v11 = <io.netty.handler.codec.http.HttpHeaderValues: io.netty.util.AsciiString X_DEFLATE>;
v12 = virtualinvoke v11.<io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence)>(v2);
if v12 == 0 goto label4;
label3:
v13 = <io.netty.handler.codec.compression.ZlibWrapper: io.netty.handler.codec.compression.ZlibWrapper ZLIB>;
v14 = specialinvoke v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.channel.embedded.EmbeddedChannel newCompressionChannel(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.compression.ZlibWrapper)>(v1, v13);
return v14;
label4:
v15 = staticinvoke <io.netty.handler.codec.compression.Brotli: boolean isAvailable()>();
if v15 == 0 goto label5;
v16 = v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.handler.codec.compression.BrotliOptions brotliOptions>;
if v16 == null goto label5;
v17 = <io.netty.handler.codec.http.HttpHeaderValues: io.netty.util.AsciiString BR>;
v18 = virtualinvoke v17.<io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence)>(v2);
if v18 == 0 goto label5;
v19 = new io.netty.channel.embedded.EmbeddedChannel;
v20 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v21 = interfaceinvoke v20.<io.netty.channel.Channel: io.netty.channel.ChannelId id()>();
v22 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v23 = interfaceinvoke v22.<io.netty.channel.Channel: io.netty.channel.ChannelMetadata metadata()>();
v24 = virtualinvoke v23.<io.netty.channel.ChannelMetadata: boolean hasDisconnect()>();
v25 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v26 = interfaceinvoke v25.<io.netty.channel.Channel: io.netty.channel.ChannelConfig config()>();
v27 = newarray (io.netty.channel.ChannelHandler)[1];
v28 = new io.netty.handler.codec.compression.BrotliEncoder;
v29 = v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.handler.codec.compression.BrotliOptions brotliOptions>;
v30 = virtualinvoke v29.<io.netty.handler.codec.compression.BrotliOptions: com.aayushatharva.brotli4j.encoder.Encoder$Parameters parameters()>();
specialinvoke v28.<io.netty.handler.codec.compression.BrotliEncoder: void <init>(com.aayushatharva.brotli4j.encoder.Encoder$Parameters)>(v30);
v27[0] = v28;
specialinvoke v19.<io.netty.channel.embedded.EmbeddedChannel: void <init>(io.netty.channel.ChannelId,boolean,io.netty.channel.ChannelConfig,io.netty.channel.ChannelHandler[])>(v21, v24, v26, v27);
return v19;
label5:
v31 = v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.handler.codec.compression.ZstdOptions zstdOptions>;
if v31 == null goto label6;
v32 = <io.netty.handler.codec.http.HttpHeaderValues: io.netty.util.AsciiString ZSTD>;
v33 = virtualinvoke v32.<io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence)>(v2);
if v33 == 0 goto label6;
v34 = new io.netty.channel.embedded.EmbeddedChannel;
v35 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v36 = interfaceinvoke v35.<io.netty.channel.Channel: io.netty.channel.ChannelId id()>();
v37 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v38 = interfaceinvoke v37.<io.netty.channel.Channel: io.netty.channel.ChannelMetadata metadata()>();
v39 = virtualinvoke v38.<io.netty.channel.ChannelMetadata: boolean hasDisconnect()>();
v40 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v41 = interfaceinvoke v40.<io.netty.channel.Channel: io.netty.channel.ChannelConfig config()>();
v42 = newarray (io.netty.channel.ChannelHandler)[1];
v43 = new io.netty.handler.codec.compression.ZstdEncoder;
v44 = v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.handler.codec.compression.ZstdOptions zstdOptions>;
v45 = virtualinvoke v44.<io.netty.handler.codec.compression.ZstdOptions: int compressionLevel()>();
v46 = v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.handler.codec.compression.ZstdOptions zstdOptions>;
v47 = virtualinvoke v46.<io.netty.handler.codec.compression.ZstdOptions: int blockSize()>();
v48 = v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.handler.codec.compression.ZstdOptions zstdOptions>;
v49 = virtualinvoke v48.<io.netty.handler.codec.compression.ZstdOptions: int maxEncodeSize()>();
specialinvoke v43.<io.netty.handler.codec.compression.ZstdEncoder: void <init>(int,int,int)>(v45, v47, v49);
v42[0] = v43;
specialinvoke v34.<io.netty.channel.embedded.EmbeddedChannel: void <init>(io.netty.channel.ChannelId,boolean,io.netty.channel.ChannelConfig,io.netty.channel.ChannelHandler[])>(v36, v39, v41, v42);
return v34;
label6:
return null;
}
protected java.lang.CharSequence getTargetContentEncoding(java.lang.CharSequence) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder v0;
java.lang.CharSequence v1;
v0 := @this: io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder;
v1 := @parameter0: java.lang.CharSequence;
return v1;
}
private io.netty.channel.embedded.EmbeddedChannel newCompressionChannel(io.netty.channel.ChannelHandlerContext, io.netty.handler.codec.compression.ZlibWrapper)
{
io.netty.channel.ChannelId v26, v44, v8;
io.netty.handler.codec.compression.ZlibEncoder v21, v39, v54;
io.netty.handler.codec.compression.DeflateOptions v23, v33, v35, v37;
boolean v11, v29, v3, v47;
io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder v0;
io.netty.channel.ChannelHandlerContext v1;
int v16, v18, v20, v34, v36, v38, v51, v52, v53;
io.netty.channel.ChannelMetadata v10, v28, v46;
java.lang.String v41;
io.netty.channel.embedded.EmbeddedChannel v24, v42, v6;
io.netty.handler.codec.compression.ZlibWrapper v2, v22, v4;
java.lang.IllegalArgumentException v40;
io.netty.channel.ChannelHandler[] v14, v32, v50;
io.netty.handler.codec.compression.GzipOptions v15, v17, v19, v5;
io.netty.channel.Channel v12, v25, v27, v30, v43, v45, v48, v7, v9;
io.netty.channel.ChannelConfig v13, v31, v49;
v0 := @this: io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.handler.codec.compression.ZlibWrapper;
v3 = v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: boolean supportsCompressionOptions>;
if v3 == 0 goto label3;
v4 = <io.netty.handler.codec.compression.ZlibWrapper: io.netty.handler.codec.compression.ZlibWrapper GZIP>;
if v2 != v4 goto label1;
v5 = v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.handler.codec.compression.GzipOptions gzipCompressionOptions>;
if v5 == null goto label1;
v6 = new io.netty.channel.embedded.EmbeddedChannel;
v7 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v8 = interfaceinvoke v7.<io.netty.channel.Channel: io.netty.channel.ChannelId id()>();
v9 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v10 = interfaceinvoke v9.<io.netty.channel.Channel: io.netty.channel.ChannelMetadata metadata()>();
v11 = virtualinvoke v10.<io.netty.channel.ChannelMetadata: boolean hasDisconnect()>();
v12 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v13 = interfaceinvoke v12.<io.netty.channel.Channel: io.netty.channel.ChannelConfig config()>();
v14 = newarray (io.netty.channel.ChannelHandler)[1];
v15 = v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.handler.codec.compression.GzipOptions gzipCompressionOptions>;
v16 = virtualinvoke v15.<io.netty.handler.codec.compression.GzipOptions: int compressionLevel()>();
v17 = v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.handler.codec.compression.GzipOptions gzipCompressionOptions>;
v18 = virtualinvoke v17.<io.netty.handler.codec.compression.GzipOptions: int windowBits()>();
v19 = v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.handler.codec.compression.GzipOptions gzipCompressionOptions>;
v20 = virtualinvoke v19.<io.netty.handler.codec.compression.GzipOptions: int memLevel()>();
v21 = staticinvoke <io.netty.handler.codec.compression.ZlibCodecFactory: io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(io.netty.handler.codec.compression.ZlibWrapper,int,int,int)>(v2, v16, v18, v20);
v14[0] = v21;
specialinvoke v6.<io.netty.channel.embedded.EmbeddedChannel: void <init>(io.netty.channel.ChannelId,boolean,io.netty.channel.ChannelConfig,io.netty.channel.ChannelHandler[])>(v8, v11, v13, v14);
return v6;
label1:
v22 = <io.netty.handler.codec.compression.ZlibWrapper: io.netty.handler.codec.compression.ZlibWrapper ZLIB>;
if v2 != v22 goto label2;
v23 = v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.handler.codec.compression.DeflateOptions deflateOptions>;
if v23 == null goto label2;
v24 = new io.netty.channel.embedded.EmbeddedChannel;
v25 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v26 = interfaceinvoke v25.<io.netty.channel.Channel: io.netty.channel.ChannelId id()>();
v27 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v28 = interfaceinvoke v27.<io.netty.channel.Channel: io.netty.channel.ChannelMetadata metadata()>();
v29 = virtualinvoke v28.<io.netty.channel.ChannelMetadata: boolean hasDisconnect()>();
v30 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v31 = interfaceinvoke v30.<io.netty.channel.Channel: io.netty.channel.ChannelConfig config()>();
v32 = newarray (io.netty.channel.ChannelHandler)[1];
v33 = v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.handler.codec.compression.DeflateOptions deflateOptions>;
v34 = virtualinvoke v33.<io.netty.handler.codec.compression.DeflateOptions: int compressionLevel()>();
v35 = v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.handler.codec.compression.DeflateOptions deflateOptions>;
v36 = virtualinvoke v35.<io.netty.handler.codec.compression.DeflateOptions: int windowBits()>();
v37 = v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.handler.codec.compression.DeflateOptions deflateOptions>;
v38 = virtualinvoke v37.<io.netty.handler.codec.compression.DeflateOptions: int memLevel()>();
v39 = staticinvoke <io.netty.handler.codec.compression.ZlibCodecFactory: io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(io.netty.handler.codec.compression.ZlibWrapper,int,int,int)>(v2, v34, v36, v38);
v32[0] = v39;
specialinvoke v24.<io.netty.channel.embedded.EmbeddedChannel: void <init>(io.netty.channel.ChannelId,boolean,io.netty.channel.ChannelConfig,io.netty.channel.ChannelHandler[])>(v26, v29, v31, v32);
return v24;
label2:
v40 = new java.lang.IllegalArgumentException;
v41 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.netty.handler.codec.compression.ZlibWrapper)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unsupported ZlibWrapper: \u0001");
specialinvoke v40.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v41);
throw v40;
label3:
v42 = new io.netty.channel.embedded.EmbeddedChannel;
v43 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v44 = interfaceinvoke v43.<io.netty.channel.Channel: io.netty.channel.ChannelId id()>();
v45 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v46 = interfaceinvoke v45.<io.netty.channel.Channel: io.netty.channel.ChannelMetadata metadata()>();
v47 = virtualinvoke v46.<io.netty.channel.ChannelMetadata: boolean hasDisconnect()>();
v48 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v49 = interfaceinvoke v48.<io.netty.channel.Channel: io.netty.channel.ChannelConfig config()>();
v50 = newarray (io.netty.channel.ChannelHandler)[1];
v51 = v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: int compressionLevel>;
v52 = v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: int windowBits>;
v53 = v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: int memLevel>;
v54 = staticinvoke <io.netty.handler.codec.compression.ZlibCodecFactory: io.netty.handler.codec.compression.ZlibEncoder newZlibEncoder(io.netty.handler.codec.compression.ZlibWrapper,int,int,int)>(v2, v51, v52, v53);
v50[0] = v54;
specialinvoke v42.<io.netty.channel.embedded.EmbeddedChannel: void <init>(io.netty.channel.ChannelId,boolean,io.netty.channel.ChannelConfig,io.netty.channel.ChannelHandler[])>(v44, v47, v49, v50);
return v42;
}
private io.netty.channel.embedded.EmbeddedChannel newCompressor(io.netty.channel.ChannelHandlerContext, io.netty.handler.codec.http2.Http2Headers, boolean) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder v0;
java.lang.CharSequence v7;
io.netty.channel.embedded.EmbeddedChannel v6;
io.netty.util.AsciiString v10, v11, v12, v4, v8;
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.codec.http2.Http2Headers v2;
java.lang.Object v5;
boolean v3, v9;
v0 := @this: io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.handler.codec.http2.Http2Headers;
v3 := @parameter2: boolean;
if v3 == 0 goto label1;
return null;
label1:
v4 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString CONTENT_ENCODING>;
v5 = interfaceinvoke v2.<io.netty.handler.codec.http2.Http2Headers: java.lang.Object get(java.lang.Object)>(v4);
if v5 != null goto label2;
v5 = <io.netty.handler.codec.http.HttpHeaderValues: io.netty.util.AsciiString IDENTITY>;
label2:
v6 = virtualinvoke v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.channel.embedded.EmbeddedChannel newContentCompressor(io.netty.channel.ChannelHandlerContext,java.lang.CharSequence)>(v1, v5);
if v6 == null goto label5;
v7 = virtualinvoke v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: java.lang.CharSequence getTargetContentEncoding(java.lang.CharSequence)>(v5);
v8 = <io.netty.handler.codec.http.HttpHeaderValues: io.netty.util.AsciiString IDENTITY>;
v9 = virtualinvoke v8.<io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence)>(v7);
if v9 == 0 goto label3;
v10 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString CONTENT_ENCODING>;
interfaceinvoke v2.<io.netty.handler.codec.http2.Http2Headers: boolean remove(java.lang.Object)>(v10);
goto label4;
label3:
v11 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString CONTENT_ENCODING>;
interfaceinvoke v2.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.Headers set(java.lang.Object,java.lang.Object)>(v11, v7);
label4:
v12 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString CONTENT_LENGTH>;
interfaceinvoke v2.<io.netty.handler.codec.http2.Http2Headers: boolean remove(java.lang.Object)>(v12);
label5:
return v6;
}
private void bindCompressorToStream(io.netty.channel.embedded.EmbeddedChannel, int)
{
io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder v0;
io.netty.handler.codec.http2.Http2Connection v3;
io.netty.handler.codec.http2.Http2Connection$PropertyKey v5;
io.netty.channel.embedded.EmbeddedChannel v1;
int v2;
io.netty.handler.codec.http2.Http2Stream v4;
v0 := @this: io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder;
v1 := @parameter0: io.netty.channel.embedded.EmbeddedChannel;
v2 := @parameter1: int;
if v1 == null goto label1;
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2Connection connection()>();
v4 = interfaceinvoke v3.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Stream stream(int)>(v2);
if v4 == null goto label1;
v5 = v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2Connection$PropertyKey propertyKey>;
interfaceinvoke v4.<io.netty.handler.codec.http2.Http2Stream: java.lang.Object setProperty(io.netty.handler.codec.http2.Http2Connection$PropertyKey,java.lang.Object)>(v5, v1);
label1:
return;
}
void cleanup(io.netty.handler.codec.http2.Http2Stream, io.netty.channel.embedded.EmbeddedChannel)
{
io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder v0;
io.netty.handler.codec.http2.Http2Connection$PropertyKey v3;
io.netty.channel.embedded.EmbeddedChannel v2;
io.netty.handler.codec.http2.Http2Stream v1;
v0 := @this: io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Stream;
v2 := @parameter1: io.netty.channel.embedded.EmbeddedChannel;
virtualinvoke v2.<io.netty.channel.embedded.EmbeddedChannel: boolean finishAndReleaseAll()>();
v3 = v0.<io.netty.handler.codec.http2.CompressorHttp2ConnectionEncoder: io.netty.handler.codec.http2.Http2Connection$PropertyKey propertyKey>;
interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Stream: java.lang.Object removeProperty(io.netty.handler.codec.http2.Http2Connection$PropertyKey)>(v3);
return;
}
private static io.netty.buffer.ByteBuf nextReadableBuf(io.netty.channel.embedded.EmbeddedChannel)
{
java.lang.Object v1;
boolean v2;
io.netty.channel.embedded.EmbeddedChannel v0;
v0 := @parameter0: io.netty.channel.embedded.EmbeddedChannel;
label1:
v1 = virtualinvoke v0.<io.netty.channel.embedded.EmbeddedChannel: java.lang.Object readOutbound()>();
if v1 != null goto label2;
return null;
label2:
v2 = virtualinvoke v1.<io.netty.buffer.ByteBuf: boolean isReadable()>();
if v2 != 0 goto label3;
virtualinvoke v1.<io.netty.buffer.ByteBuf: boolean release()>();
goto label1;
label3:
return v1;
}
}