public class io.netty.handler.codec.http2.DefaultHttp2FrameReader extends java.lang.Object implements io.netty.handler.codec.http2.Http2FrameReader, io.netty.handler.codec.http2.Http2FrameSizePolicy, io.netty.handler.codec.http2.Http2FrameReader$Configuration
{
private final io.netty.handler.codec.http2.Http2HeadersDecoder headersDecoder;
private boolean readingHeaders;
private boolean readError;
private byte frameType;
private int streamId;
private io.netty.handler.codec.http2.Http2Flags flags;
private int payloadLength;
private io.netty.handler.codec.http2.DefaultHttp2FrameReader$HeadersContinuation headersContinuation;
private int maxFrameSize;
public void <init>()
{
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void <init>(boolean)>(1);
return;
}
public void <init>(boolean)
{
io.netty.handler.codec.http2.DefaultHttp2HeadersDecoder v2;
boolean v1;
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
v1 := @parameter0: boolean;
v2 = new io.netty.handler.codec.http2.DefaultHttp2HeadersDecoder;
specialinvoke v2.<io.netty.handler.codec.http2.DefaultHttp2HeadersDecoder: void <init>(boolean)>(v1);
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void <init>(io.netty.handler.codec.http2.Http2HeadersDecoder)>(v2);
return;
}
public void <init>(io.netty.handler.codec.http2.Http2HeadersDecoder)
{
io.netty.handler.codec.http2.Http2HeadersDecoder v1;
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
v1 := @parameter0: io.netty.handler.codec.http2.Http2HeadersDecoder;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: boolean readingHeaders> = 1;
v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.Http2HeadersDecoder headersDecoder> = v1;
v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int maxFrameSize> = 16384;
return;
}
public io.netty.handler.codec.http2.Http2HeadersDecoder$Configuration headersConfiguration()
{
io.netty.handler.codec.http2.Http2HeadersDecoder v1;
io.netty.handler.codec.http2.Http2HeadersDecoder$Configuration v2;
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.Http2HeadersDecoder headersDecoder>;
v2 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2HeadersDecoder: io.netty.handler.codec.http2.Http2HeadersDecoder$Configuration configuration()>();
return v2;
}
public io.netty.handler.codec.http2.Http2FrameReader$Configuration configuration()
{
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
return v0;
}
public io.netty.handler.codec.http2.Http2FrameSizePolicy frameSizePolicy()
{
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
return v0;
}
public void maxFrameSize(int) throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Object[] v5;
java.lang.Integer v6;
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
io.netty.handler.codec.http2.Http2Exception v7;
int v1, v3;
io.netty.handler.codec.http2.Http2Error v4;
boolean v2;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
v1 := @parameter0: int;
v2 = staticinvoke <io.netty.handler.codec.http2.Http2CodecUtil: boolean isMaxFrameSizeValid(int)>(v1);
if v2 != 0 goto label1;
v3 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int streamId>;
v4 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error FRAME_SIZE_ERROR>;
v5 = newarray (java.lang.Object)[1];
v6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v5[0] = v6;
v7 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception streamError(int,io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v3, v4, "Invalid MAX_FRAME_SIZE specified in sent settings: %d", v5);
throw v7;
label1:
v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int maxFrameSize> = v1;
return;
}
public int maxFrameSize()
{
int v1;
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int maxFrameSize>;
return v1;
}
public void close()
{
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void closeHeadersContinuation()>();
return;
}
private void closeHeadersContinuation()
{
io.netty.handler.codec.http2.DefaultHttp2FrameReader$HeadersContinuation v1, v2;
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.DefaultHttp2FrameReader$HeadersContinuation headersContinuation>;
if v1 == null goto label1;
v2 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.DefaultHttp2FrameReader$HeadersContinuation headersContinuation>;
virtualinvoke v2.<io.netty.handler.codec.http2.DefaultHttp2FrameReader$HeadersContinuation: void close()>();
v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.DefaultHttp2FrameReader$HeadersContinuation headersContinuation> = null;
label1:
return;
}
public void readFrame(io.netty.channel.ChannelHandlerContext, io.netty.buffer.ByteBuf, io.netty.handler.codec.http2.Http2FrameListener) throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Throwable v14;
java.lang.RuntimeException v13;
io.netty.handler.codec.http2.Http2FrameListener v3;
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
io.netty.channel.ChannelHandlerContext v1;
io.netty.buffer.ByteBuf v2;
io.netty.handler.codec.http2.Http2Exception v10;
int v5;
boolean v11, v12, v4, v6, v7, v8, v9;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 := @parameter2: io.netty.handler.codec.http2.Http2FrameListener;
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: boolean readError>;
if v4 == 0 goto label01;
v5 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readableBytes()>();
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf skipBytes(int)>(v5);
return;
label01:
v6 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: boolean readingHeaders>;
if v6 == 0 goto label03;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void processHeaderState(io.netty.buffer.ByteBuf)>(v2);
v7 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: boolean readingHeaders>;
if v7 == 0 goto label03;
label02:
return;
label03:
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void processPayloadState(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.handler.codec.http2.Http2FrameListener)>(v1, v2, v3);
v8 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: boolean readingHeaders>;
if v8 != 0 goto label05;
label04:
return;
label05:
v9 = virtualinvoke v2.<io.netty.buffer.ByteBuf: boolean isReadable()>();
if v9 != 0 goto label01;
label06:
goto label12;
label07:
v10 := @caughtexception;
v11 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: boolean isStreamError(io.netty.handler.codec.http2.Http2Exception)>(v10);
if v11 != 0 goto label08;
v12 = 1;
goto label09;
label08:
v12 = 0;
label09:
v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: boolean readError> = v12;
throw v10;
label10:
v13 := @caughtexception;
v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: boolean readError> = 1;
throw v13;
label11:
v14 := @caughtexception;
v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: boolean readError> = 1;
staticinvoke <io.netty.util.internal.PlatformDependent: void throwException(java.lang.Throwable)>(v14);
label12:
return;
catch io.netty.handler.codec.http2.Http2Exception from label01 to label02 with label07;
catch io.netty.handler.codec.http2.Http2Exception from label03 to label04 with label07;
catch io.netty.handler.codec.http2.Http2Exception from label05 to label06 with label07;
catch java.lang.RuntimeException from label01 to label02 with label10;
catch java.lang.RuntimeException from label03 to label04 with label10;
catch java.lang.RuntimeException from label05 to label06 with label10;
catch java.lang.Throwable from label01 to label02 with label11;
catch java.lang.Throwable from label03 to label04 with label11;
catch java.lang.Throwable from label05 to label06 with label11;
}
private void processHeaderState(io.netty.buffer.ByteBuf) throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Object[] v7;
java.lang.Integer v11, v9;
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
short v15;
byte v13, v17;
io.netty.buffer.ByteBuf v1;
io.netty.handler.codec.http2.Http2Exception v12;
int v10, v16, v2, v3, v4, v5, v8;
io.netty.handler.codec.http2.Http2Flags v14;
io.netty.handler.codec.http2.Http2Error v6;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
if v2 >= 9 goto label01;
return;
label01:
v3 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readUnsignedMedium()>();
v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int payloadLength> = v3;
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int payloadLength>;
v5 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int maxFrameSize>;
if v4 <= v5 goto label02;
v6 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error FRAME_SIZE_ERROR>;
v7 = newarray (java.lang.Object)[2];
v8 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int payloadLength>;
v9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v8);
v7[0] = v9;
v10 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int maxFrameSize>;
v11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v10);
v7[1] = v11;
v12 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception connectionError(io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v6, "Frame length: %d exceeds maximum: %d", v7);
throw v12;
label02:
v13 = virtualinvoke v1.<io.netty.buffer.ByteBuf: byte readByte()>();
v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: byte frameType> = v13;
v14 = new io.netty.handler.codec.http2.Http2Flags;
v15 = virtualinvoke v1.<io.netty.buffer.ByteBuf: short readUnsignedByte()>();
specialinvoke v14.<io.netty.handler.codec.http2.Http2Flags: void <init>(short)>(v15);
v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.Http2Flags flags> = v14;
v16 = staticinvoke <io.netty.handler.codec.http2.Http2CodecUtil: int readUnsignedInt(io.netty.buffer.ByteBuf)>(v1);
v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int streamId> = v16;
v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: boolean readingHeaders> = 0;
v17 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: byte frameType>;
tableswitch(v17)
{
case 0: goto label03;
case 1: goto label04;
case 2: goto label05;
case 3: goto label06;
case 4: goto label07;
case 5: goto label08;
case 6: goto label09;
case 7: goto label10;
case 8: goto label11;
case 9: goto label12;
default: goto label13;
};
label03:
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void verifyDataFrame()>();
goto label14;
label04:
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void verifyHeadersFrame()>();
goto label14;
label05:
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void verifyPriorityFrame()>();
goto label14;
label06:
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void verifyRstStreamFrame()>();
goto label14;
label07:
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void verifySettingsFrame()>();
goto label14;
label08:
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void verifyPushPromiseFrame()>();
goto label14;
label09:
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void verifyPingFrame()>();
goto label14;
label10:
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void verifyGoAwayFrame()>();
goto label14;
label11:
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void verifyWindowUpdateFrame()>();
goto label14;
label12:
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void verifyContinuationFrame()>();
goto label14;
label13:
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void verifyUnknownFrame()>();
label14:
return;
}
private void processPayloadState(io.netty.channel.ChannelHandlerContext, io.netty.buffer.ByteBuf, io.netty.handler.codec.http2.Http2FrameListener) throws io.netty.handler.codec.http2.Http2Exception
{
long v10;
io.netty.handler.codec.http2.Http2FrameListener v3;
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
io.netty.channel.ChannelHandlerContext v1;
byte v9;
io.netty.buffer.ByteBuf v2;
int v4, v5, v6, v7, v8;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 := @parameter2: io.netty.handler.codec.http2.Http2FrameListener;
v4 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readableBytes()>();
v5 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int payloadLength>;
if v4 >= v5 goto label01;
return;
label01:
v6 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readerIndex()>();
v7 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int payloadLength>;
v8 = v6 + v7;
v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: boolean readingHeaders> = 1;
v9 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: byte frameType>;
tableswitch(v9)
{
case 0: goto label02;
case 1: goto label03;
case 2: goto label04;
case 3: goto label05;
case 4: goto label06;
case 5: goto label07;
case 6: goto label08;
case 7: goto label09;
case 8: goto label10;
case 9: goto label11;
default: goto label12;
};
label02:
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void readDataFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.http2.Http2FrameListener)>(v1, v2, v8, v3);
goto label13;
label03:
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void readHeadersFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.http2.Http2FrameListener)>(v1, v2, v8, v3);
goto label13;
label04:
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void readPriorityFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.handler.codec.http2.Http2FrameListener)>(v1, v2, v3);
goto label13;
label05:
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void readRstStreamFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.handler.codec.http2.Http2FrameListener)>(v1, v2, v3);
goto label13;
label06:
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void readSettingsFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.handler.codec.http2.Http2FrameListener)>(v1, v2, v3);
goto label13;
label07:
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void readPushPromiseFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.http2.Http2FrameListener)>(v1, v2, v8, v3);
goto label13;
label08:
v10 = virtualinvoke v2.<io.netty.buffer.ByteBuf: long readLong()>();
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void readPingFrame(io.netty.channel.ChannelHandlerContext,long,io.netty.handler.codec.http2.Http2FrameListener)>(v1, v10, v3);
goto label13;
label09:
staticinvoke <io.netty.handler.codec.http2.DefaultHttp2FrameReader: void readGoAwayFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.http2.Http2FrameListener)>(v1, v2, v8, v3);
goto label13;
label10:
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void readWindowUpdateFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,io.netty.handler.codec.http2.Http2FrameListener)>(v1, v2, v3);
goto label13;
label11:
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void readContinuationFrame(io.netty.buffer.ByteBuf,int,io.netty.handler.codec.http2.Http2FrameListener)>(v2, v8, v3);
goto label13;
label12:
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void readUnknownFrame(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.http2.Http2FrameListener)>(v1, v2, v8, v3);
label13:
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readerIndex(int)>(v8);
return;
}
private void verifyDataFrame() throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Object[] v6;
io.netty.handler.codec.http2.Http2Flags v2;
java.lang.Integer v8;
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
io.netty.handler.codec.http2.Http2Exception v9;
int v1, v3, v4, v7;
io.netty.handler.codec.http2.Http2Error v5;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void verifyAssociatedWithAStream()>();
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void verifyNotProcessingHeaders()>();
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int payloadLength>;
v2 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.Http2Flags flags>;
v3 = virtualinvoke v2.<io.netty.handler.codec.http2.Http2Flags: int getPaddingPresenceFieldLength()>();
if v1 >= v3 goto label1;
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int streamId>;
v5 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error FRAME_SIZE_ERROR>;
v6 = newarray (java.lang.Object)[1];
v7 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int payloadLength>;
v8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v7);
v6[0] = v8;
v9 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception streamError(int,io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v4, v5, "Frame length %d too small.", v6);
throw v9;
label1:
return;
}
private void verifyHeadersFrame() throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Object[] v11;
io.netty.handler.codec.http2.Http2Flags v1, v3;
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
io.netty.handler.codec.http2.Http2Exception v12;
int v2, v4, v5, v6, v7, v9;
io.netty.handler.codec.http2.Http2Error v8;
java.lang.String v10;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void verifyAssociatedWithAStream()>();
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void verifyNotProcessingHeaders()>();
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.Http2Flags flags>;
v2 = virtualinvoke v1.<io.netty.handler.codec.http2.Http2Flags: int getPaddingPresenceFieldLength()>();
v3 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.Http2Flags flags>;
v4 = virtualinvoke v3.<io.netty.handler.codec.http2.Http2Flags: int getNumPriorityBytes()>();
v5 = v2 + v4;
v6 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int payloadLength>;
if v6 >= v5 goto label1;
v7 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int streamId>;
v8 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error FRAME_SIZE_ERROR>;
v9 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int payloadLength>;
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Frame length too small.\u0001");
v11 = newarray (java.lang.Object)[0];
v12 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception streamError(int,io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v7, v8, v10, v11);
throw v12;
label1:
return;
}
private void verifyPriorityFrame() throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Object[] v4;
java.lang.Integer v6;
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
io.netty.handler.codec.http2.Http2Exception v7;
int v1, v2, v5;
io.netty.handler.codec.http2.Http2Error v3;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void verifyAssociatedWithAStream()>();
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void verifyNotProcessingHeaders()>();
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int payloadLength>;
if v1 == 5 goto label1;
v2 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int streamId>;
v3 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error FRAME_SIZE_ERROR>;
v4 = newarray (java.lang.Object)[1];
v5 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int payloadLength>;
v6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v5);
v4[0] = v6;
v7 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception streamError(int,io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v2, v3, "Invalid frame length %d.", v4);
throw v7;
label1:
return;
}
private void verifyRstStreamFrame() throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Object[] v3;
io.netty.handler.codec.http2.Http2Exception v6;
int v1, v4;
io.netty.handler.codec.http2.Http2Error v2;
java.lang.Integer v5;
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void verifyAssociatedWithAStream()>();
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void verifyNotProcessingHeaders()>();
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int payloadLength>;
if v1 == 4 goto label1;
v2 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error FRAME_SIZE_ERROR>;
v3 = newarray (java.lang.Object)[1];
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int payloadLength>;
v5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v4);
v3[0] = v5;
v6 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception connectionError(io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v2, "Invalid frame length %d.", v3);
throw v6;
label1:
return;
}
private void verifySettingsFrame() throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Object[] v14, v3, v9;
java.lang.Integer v16;
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
io.netty.handler.codec.http2.Http2Exception v10, v17, v4;
int v1, v11, v12, v15, v7;
boolean v6;
io.netty.handler.codec.http2.Http2Flags v5;
io.netty.handler.codec.http2.Http2Error v13, v2, v8;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void verifyNotProcessingHeaders()>();
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int streamId>;
if v1 == 0 goto label1;
v2 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error PROTOCOL_ERROR>;
v3 = newarray (java.lang.Object)[0];
v4 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception connectionError(io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v2, "A stream ID must be zero.", v3);
throw v4;
label1:
v5 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.Http2Flags flags>;
v6 = virtualinvoke v5.<io.netty.handler.codec.http2.Http2Flags: boolean ack()>();
if v6 == 0 goto label2;
v7 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int payloadLength>;
if v7 <= 0 goto label2;
v8 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error FRAME_SIZE_ERROR>;
v9 = newarray (java.lang.Object)[0];
v10 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception connectionError(io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v8, "Ack settings frame must have an empty payload.", v9);
throw v10;
label2:
v11 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int payloadLength>;
v12 = v11 % 6;
if v12 <= 0 goto label3;
v13 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error FRAME_SIZE_ERROR>;
v14 = newarray (java.lang.Object)[1];
v15 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int payloadLength>;
v16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v15);
v14[0] = v16;
v17 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception connectionError(io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v13, "Frame length %d invalid.", v14);
throw v17;
label3:
return;
}
private void verifyPushPromiseFrame() throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Object[] v7;
io.netty.handler.codec.http2.Http2Flags v1;
java.lang.Integer v9;
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
io.netty.handler.codec.http2.Http2Exception v10;
int v2, v3, v4, v5, v8;
io.netty.handler.codec.http2.Http2Error v6;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void verifyNotProcessingHeaders()>();
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.Http2Flags flags>;
v2 = virtualinvoke v1.<io.netty.handler.codec.http2.Http2Flags: int getPaddingPresenceFieldLength()>();
v3 = v2 + 4;
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int payloadLength>;
if v4 >= v3 goto label1;
v5 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int streamId>;
v6 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error FRAME_SIZE_ERROR>;
v7 = newarray (java.lang.Object)[1];
v8 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int payloadLength>;
v9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v8);
v7[0] = v9;
v10 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception streamError(int,io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v5, v6, "Frame length %d too small.", v7);
throw v10;
label1:
return;
}
private void verifyPingFrame() throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Object[] v3, v7;
java.lang.Integer v9;
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
io.netty.handler.codec.http2.Http2Exception v10, v4;
int v1, v5, v8;
io.netty.handler.codec.http2.Http2Error v2, v6;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void verifyNotProcessingHeaders()>();
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int streamId>;
if v1 == 0 goto label1;
v2 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error PROTOCOL_ERROR>;
v3 = newarray (java.lang.Object)[0];
v4 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception connectionError(io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v2, "A stream ID must be zero.", v3);
throw v4;
label1:
v5 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int payloadLength>;
if v5 == 8 goto label2;
v6 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error FRAME_SIZE_ERROR>;
v7 = newarray (java.lang.Object)[1];
v8 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int payloadLength>;
v9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v8);
v7[0] = v9;
v10 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception connectionError(io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v6, "Frame length %d incorrect size for ping.", v7);
throw v10;
label2:
return;
}
private void verifyGoAwayFrame() throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Object[] v3, v7;
java.lang.Integer v9;
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
io.netty.handler.codec.http2.Http2Exception v10, v4;
int v1, v5, v8;
io.netty.handler.codec.http2.Http2Error v2, v6;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void verifyNotProcessingHeaders()>();
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int streamId>;
if v1 == 0 goto label1;
v2 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error PROTOCOL_ERROR>;
v3 = newarray (java.lang.Object)[0];
v4 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception connectionError(io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v2, "A stream ID must be zero.", v3);
throw v4;
label1:
v5 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int payloadLength>;
if v5 >= 8 goto label2;
v6 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error FRAME_SIZE_ERROR>;
v7 = newarray (java.lang.Object)[1];
v8 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int payloadLength>;
v9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v8);
v7[0] = v9;
v10 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception connectionError(io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v6, "Frame length %d too small.", v7);
throw v10;
label2:
return;
}
private void verifyWindowUpdateFrame() throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Object[] v4;
java.lang.Integer v6;
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
io.netty.handler.codec.http2.Http2Exception v7;
int v1, v2, v5;
io.netty.handler.codec.http2.Http2Error v3;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void verifyNotProcessingHeaders()>();
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int streamId>;
staticinvoke <io.netty.handler.codec.http2.DefaultHttp2FrameReader: void verifyStreamOrConnectionId(int,java.lang.String)>(v1, "Stream ID");
v2 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int payloadLength>;
if v2 == 4 goto label1;
v3 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error FRAME_SIZE_ERROR>;
v4 = newarray (java.lang.Object)[1];
v5 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int payloadLength>;
v6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v5);
v4[0] = v6;
v7 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception connectionError(io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v3, "Invalid frame length %d.", v4);
throw v7;
label1:
return;
}
private void verifyContinuationFrame() throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Object[] v11, v23, v3;
java.lang.Integer v14, v16, v25;
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
byte v4;
io.netty.handler.codec.http2.Http2Exception v17, v26, v6;
int v13, v15, v18, v20, v21, v24, v7, v9;
java.lang.Byte v5;
io.netty.handler.codec.http2.Http2Flags v19;
io.netty.handler.codec.http2.DefaultHttp2FrameReader$HeadersContinuation v1, v12, v8;
io.netty.handler.codec.http2.Http2Error v10, v2, v22;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void verifyAssociatedWithAStream()>();
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.DefaultHttp2FrameReader$HeadersContinuation headersContinuation>;
if v1 != null goto label1;
v2 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error PROTOCOL_ERROR>;
v3 = newarray (java.lang.Object)[1];
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: byte frameType>;
v5 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(v4);
v3[0] = v5;
v6 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception connectionError(io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v2, "Received %s frame but not currently processing headers.", v3);
throw v6;
label1:
v7 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int streamId>;
v8 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.DefaultHttp2FrameReader$HeadersContinuation headersContinuation>;
v9 = virtualinvoke v8.<io.netty.handler.codec.http2.DefaultHttp2FrameReader$HeadersContinuation: int getStreamId()>();
if v7 == v9 goto label2;
v10 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error PROTOCOL_ERROR>;
v11 = newarray (java.lang.Object)[2];
v12 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.DefaultHttp2FrameReader$HeadersContinuation headersContinuation>;
v13 = virtualinvoke v12.<io.netty.handler.codec.http2.DefaultHttp2FrameReader$HeadersContinuation: int getStreamId()>();
v14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v13);
v11[0] = v14;
v15 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int streamId>;
v16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v15);
v11[1] = v16;
v17 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception connectionError(io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v10, "Continuation stream ID does not match pending headers. Expected %d, but received %d.", v11);
throw v17;
label2:
v18 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int payloadLength>;
v19 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.Http2Flags flags>;
v20 = virtualinvoke v19.<io.netty.handler.codec.http2.Http2Flags: int getPaddingPresenceFieldLength()>();
if v18 >= v20 goto label3;
v21 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int streamId>;
v22 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error FRAME_SIZE_ERROR>;
v23 = newarray (java.lang.Object)[1];
v24 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int payloadLength>;
v25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v24);
v23[0] = v25;
v26 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception streamError(int,io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v21, v22, "Frame length %d too small for padding.", v23);
throw v26;
label3:
return;
}
private void verifyUnknownFrame() throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void verifyNotProcessingHeaders()>();
return;
}
private void readDataFrame(io.netty.channel.ChannelHandlerContext, io.netty.buffer.ByteBuf, int, io.netty.handler.codec.http2.Http2FrameListener) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.handler.codec.http2.Http2Flags v11;
io.netty.handler.codec.http2.Http2FrameListener v4;
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
io.netty.channel.ChannelHandlerContext v1;
io.netty.buffer.ByteBuf v2, v9;
int v10, v3, v5, v6, v7, v8;
boolean v12;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 := @parameter2: int;
v4 := @parameter3: io.netty.handler.codec.http2.Http2FrameListener;
v5 = specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int readPadding(io.netty.buffer.ByteBuf)>(v2);
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void verifyPadding(int)>(v5);
v6 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readerIndex()>();
v7 = v3 - v6;
v8 = staticinvoke <io.netty.handler.codec.http2.DefaultHttp2FrameReader: int lengthWithoutTrailingPadding(int,int)>(v7, v5);
v9 = virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readSlice(int)>(v8);
v10 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int streamId>;
v11 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.Http2Flags flags>;
v12 = virtualinvoke v11.<io.netty.handler.codec.http2.Http2Flags: boolean endOfStream()>();
interfaceinvoke v4.<io.netty.handler.codec.http2.Http2FrameListener: int onDataRead(io.netty.channel.ChannelHandlerContext,int,io.netty.buffer.ByteBuf,int,boolean)>(v1, v10, v9, v5, v12);
return;
}
private void readHeadersFrame(io.netty.channel.ChannelHandlerContext, io.netty.buffer.ByteBuf, int, io.netty.handler.codec.http2.Http2FrameListener) throws io.netty.handler.codec.http2.Http2Exception
{
byte v12;
io.netty.handler.codec.http2.Http2Exception v19;
io.netty.handler.codec.http2.DefaultHttp2FrameReader$1 v25;
io.netty.handler.codec.http2.DefaultHttp2FrameReader$2 v31;
boolean v13, v28, v30, v37, v39, v9;
io.netty.handler.codec.http2.Http2Flags v27, v29, v36, v38, v6, v8;
io.netty.handler.codec.http2.Http2FrameListener v4;
io.netty.handler.codec.http2.Http2Error v17;
java.lang.Object[] v18;
long v10, v11, v14;
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
io.netty.channel.ChannelHandlerContext v1;
short v20;
io.netty.buffer.ByteBuf v2;
int v15, v16, v21, v22, v23, v24, v3, v32, v33, v34, v5, v7;
io.netty.handler.codec.http2.DefaultHttp2FrameReader$HeadersContinuation v26, v35;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 := @parameter2: int;
v4 := @parameter3: io.netty.handler.codec.http2.Http2FrameListener;
v5 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int streamId>;
v6 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.Http2Flags flags>;
v7 = specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int readPadding(io.netty.buffer.ByteBuf)>(v2);
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void verifyPadding(int)>(v7);
v8 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.Http2Flags flags>;
v9 = virtualinvoke v8.<io.netty.handler.codec.http2.Http2Flags: boolean priorityPresent()>();
if v9 == 0 goto label4;
v10 = virtualinvoke v2.<io.netty.buffer.ByteBuf: long readUnsignedInt()>();
v11 = v10 & 2147483648L;
v12 = v11 cmp 0L;
if v12 == 0 goto label1;
v13 = 1;
goto label2;
label1:
v13 = 0;
label2:
v14 = v10 & 2147483647L;
v15 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int streamId>;
if v14 != v15 goto label3;
v16 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int streamId>;
v17 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error PROTOCOL_ERROR>;
v18 = newarray (java.lang.Object)[0];
v19 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception streamError(int,io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v16, v17, "A stream cannot depend on itself.", v18);
throw v19;
label3:
v20 = virtualinvoke v2.<io.netty.buffer.ByteBuf: short readUnsignedByte()>();
v21 = v20 + 1;
v22 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readerIndex()>();
v23 = v3 - v22;
v24 = staticinvoke <io.netty.handler.codec.http2.DefaultHttp2FrameReader: int lengthWithoutTrailingPadding(int,int)>(v23, v7);
v25 = new io.netty.handler.codec.http2.DefaultHttp2FrameReader$1;
specialinvoke v25.<io.netty.handler.codec.http2.DefaultHttp2FrameReader$1: void <init>(io.netty.handler.codec.http2.DefaultHttp2FrameReader,int,io.netty.channel.ChannelHandlerContext,int,short,boolean,int,io.netty.handler.codec.http2.Http2Flags)>(v0, v5, v1, v14, v21, v13, v7, v6);
v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.DefaultHttp2FrameReader$HeadersContinuation headersContinuation> = v25;
v26 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.DefaultHttp2FrameReader$HeadersContinuation headersContinuation>;
v27 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.Http2Flags flags>;
v28 = virtualinvoke v27.<io.netty.handler.codec.http2.Http2Flags: boolean endOfHeaders()>();
virtualinvoke v26.<io.netty.handler.codec.http2.DefaultHttp2FrameReader$HeadersContinuation: void processFragment(boolean,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.http2.Http2FrameListener)>(v28, v2, v24, v4);
v29 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.Http2Flags flags>;
v30 = virtualinvoke v29.<io.netty.handler.codec.http2.Http2Flags: boolean endOfHeaders()>();
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void resetHeadersContinuationIfEnd(boolean)>(v30);
return;
label4:
v31 = new io.netty.handler.codec.http2.DefaultHttp2FrameReader$2;
specialinvoke v31.<io.netty.handler.codec.http2.DefaultHttp2FrameReader$2: void <init>(io.netty.handler.codec.http2.DefaultHttp2FrameReader,int,io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.http2.Http2Flags)>(v0, v5, v1, v7, v6);
v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.DefaultHttp2FrameReader$HeadersContinuation headersContinuation> = v31;
v32 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readerIndex()>();
v33 = v3 - v32;
v34 = staticinvoke <io.netty.handler.codec.http2.DefaultHttp2FrameReader: int lengthWithoutTrailingPadding(int,int)>(v33, v7);
v35 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.DefaultHttp2FrameReader$HeadersContinuation headersContinuation>;
v36 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.Http2Flags flags>;
v37 = virtualinvoke v36.<io.netty.handler.codec.http2.Http2Flags: boolean endOfHeaders()>();
virtualinvoke v35.<io.netty.handler.codec.http2.DefaultHttp2FrameReader$HeadersContinuation: void processFragment(boolean,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.http2.Http2FrameListener)>(v37, v2, v34, v4);
v38 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.Http2Flags flags>;
v39 = virtualinvoke v38.<io.netty.handler.codec.http2.Http2Flags: boolean endOfHeaders()>();
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void resetHeadersContinuationIfEnd(boolean)>(v39);
return;
}
private void resetHeadersContinuationIfEnd(boolean)
{
boolean v1;
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
v1 := @parameter0: boolean;
if v1 == 0 goto label1;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void closeHeadersContinuation()>();
label1:
return;
}
private void readPriorityFrame(io.netty.channel.ChannelHandlerContext, io.netty.buffer.ByteBuf, io.netty.handler.codec.http2.Http2FrameListener) throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Object[] v12;
long v4, v5, v8;
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
io.netty.channel.ChannelHandlerContext v1;
short v14;
byte v6;
io.netty.buffer.ByteBuf v2;
io.netty.handler.codec.http2.Http2Exception v13;
int v10, v15, v16, v9;
boolean v7;
io.netty.handler.codec.http2.Http2FrameListener v3;
io.netty.handler.codec.http2.Http2Error v11;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 := @parameter2: io.netty.handler.codec.http2.Http2FrameListener;
v4 = virtualinvoke v2.<io.netty.buffer.ByteBuf: long readUnsignedInt()>();
v5 = v4 & 2147483648L;
v6 = v5 cmp 0L;
if v6 == 0 goto label1;
v7 = 1;
goto label2;
label1:
v7 = 0;
label2:
v8 = v4 & 2147483647L;
v9 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int streamId>;
if v8 != v9 goto label3;
v10 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int streamId>;
v11 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error PROTOCOL_ERROR>;
v12 = newarray (java.lang.Object)[0];
v13 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception streamError(int,io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v10, v11, "A stream cannot depend on itself.", v12);
throw v13;
label3:
v14 = virtualinvoke v2.<io.netty.buffer.ByteBuf: short readUnsignedByte()>();
v15 = v14 + 1;
v16 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int streamId>;
interfaceinvoke v3.<io.netty.handler.codec.http2.Http2FrameListener: void onPriorityRead(io.netty.channel.ChannelHandlerContext,int,int,short,boolean)>(v1, v16, v8, v15, v7);
return;
}
private void readRstStreamFrame(io.netty.channel.ChannelHandlerContext, io.netty.buffer.ByteBuf, io.netty.handler.codec.http2.Http2FrameListener) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.buffer.ByteBuf v2;
int v5;
long v4;
io.netty.handler.codec.http2.Http2FrameListener v3;
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 := @parameter2: io.netty.handler.codec.http2.Http2FrameListener;
v4 = virtualinvoke v2.<io.netty.buffer.ByteBuf: long readUnsignedInt()>();
v5 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int streamId>;
interfaceinvoke v3.<io.netty.handler.codec.http2.Http2FrameListener: void onRstStreamRead(io.netty.channel.ChannelHandlerContext,int,long)>(v1, v5, v4);
return;
}
private void readSettingsFrame(io.netty.channel.ChannelHandlerContext, io.netty.buffer.ByteBuf, io.netty.handler.codec.http2.Http2FrameListener) throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Object[] v15, v19;
long v11;
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
io.netty.channel.ChannelHandlerContext v1;
io.netty.buffer.ByteBuf v2;
java.lang.Long v12;
io.netty.handler.codec.http2.Http2Exception v17, v21;
int v10, v6, v7, v9;
java.lang.String v16, v20;
boolean v5;
io.netty.handler.codec.http2.Http2Flags v4;
char v22;
java.lang.IllegalArgumentException v13;
io.netty.handler.codec.http2.Http2FrameListener v3;
io.netty.handler.codec.http2.Http2Settings v8;
io.netty.handler.codec.http2.Http2Error v14, v18;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 := @parameter2: io.netty.handler.codec.http2.Http2FrameListener;
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.Http2Flags flags>;
v5 = virtualinvoke v4.<io.netty.handler.codec.http2.Http2Flags: boolean ack()>();
if v5 == 0 goto label1;
interfaceinvoke v3.<io.netty.handler.codec.http2.Http2FrameListener: void onSettingsAckRead(io.netty.channel.ChannelHandlerContext)>(v1);
goto label9;
label1:
v6 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int payloadLength>;
v7 = v6 / 6;
v8 = new io.netty.handler.codec.http2.Http2Settings;
specialinvoke v8.<io.netty.handler.codec.http2.Http2Settings: void <init>()>();
v9 = 0;
label2:
if v9 >= v7 goto label8;
v10 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readUnsignedShort()>();
v11 = virtualinvoke v2.<io.netty.buffer.ByteBuf: long readUnsignedInt()>();
label3:
v12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v11);
virtualinvoke v8.<io.netty.handler.codec.http2.Http2Settings: java.lang.Long put(char,java.lang.Long)>(v10, v12);
label4:
goto label7;
label5:
v13 := @caughtexception;
if v22 != 4 goto label6;
v14 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error FLOW_CONTROL_ERROR>;
v15 = newarray (java.lang.Object)[1];
v16 = virtualinvoke v13.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();
v15[0] = v16;
v17 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception connectionError(io.netty.handler.codec.http2.Http2Error,java.lang.Throwable,java.lang.String,java.lang.Object[])>(v14, v13, "Failed setting initial window size: %s", v15);
throw v17;
label6:
v18 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error PROTOCOL_ERROR>;
v19 = newarray (java.lang.Object)[1];
v20 = virtualinvoke v13.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();
v19[0] = v20;
v21 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception connectionError(io.netty.handler.codec.http2.Http2Error,java.lang.Throwable,java.lang.String,java.lang.Object[])>(v18, v13, "Protocol error: %s", v19);
throw v21;
label7:
v9 = v9 + 1;
goto label2;
label8:
interfaceinvoke v3.<io.netty.handler.codec.http2.Http2FrameListener: void onSettingsRead(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http2.Http2Settings)>(v1, v8);
label9:
return;
catch java.lang.IllegalArgumentException from label3 to label4 with label5;
}
private void readPushPromiseFrame(io.netty.channel.ChannelHandlerContext, io.netty.buffer.ByteBuf, int, io.netty.handler.codec.http2.Http2FrameListener) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
io.netty.channel.ChannelHandlerContext v1;
io.netty.buffer.ByteBuf v2;
int v10, v11, v3, v5, v6, v7, v9;
io.netty.handler.codec.http2.DefaultHttp2FrameReader$3 v8;
boolean v14, v16;
io.netty.handler.codec.http2.Http2Flags v13, v15;
io.netty.handler.codec.http2.Http2FrameListener v4;
io.netty.handler.codec.http2.DefaultHttp2FrameReader$HeadersContinuation v12;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 := @parameter2: int;
v4 := @parameter3: io.netty.handler.codec.http2.Http2FrameListener;
v5 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int streamId>;
v6 = specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int readPadding(io.netty.buffer.ByteBuf)>(v2);
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void verifyPadding(int)>(v6);
v7 = staticinvoke <io.netty.handler.codec.http2.Http2CodecUtil: int readUnsignedInt(io.netty.buffer.ByteBuf)>(v2);
v8 = new io.netty.handler.codec.http2.DefaultHttp2FrameReader$3;
specialinvoke v8.<io.netty.handler.codec.http2.DefaultHttp2FrameReader$3: void <init>(io.netty.handler.codec.http2.DefaultHttp2FrameReader,int,io.netty.channel.ChannelHandlerContext,int,int)>(v0, v5, v1, v7, v6);
v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.DefaultHttp2FrameReader$HeadersContinuation headersContinuation> = v8;
v9 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readerIndex()>();
v10 = v3 - v9;
v11 = staticinvoke <io.netty.handler.codec.http2.DefaultHttp2FrameReader: int lengthWithoutTrailingPadding(int,int)>(v10, v6);
v12 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.DefaultHttp2FrameReader$HeadersContinuation headersContinuation>;
v13 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.Http2Flags flags>;
v14 = virtualinvoke v13.<io.netty.handler.codec.http2.Http2Flags: boolean endOfHeaders()>();
virtualinvoke v12.<io.netty.handler.codec.http2.DefaultHttp2FrameReader$HeadersContinuation: void processFragment(boolean,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.http2.Http2FrameListener)>(v14, v2, v11, v4);
v15 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.Http2Flags flags>;
v16 = virtualinvoke v15.<io.netty.handler.codec.http2.Http2Flags: boolean endOfHeaders()>();
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void resetHeadersContinuationIfEnd(boolean)>(v16);
return;
}
private void readPingFrame(io.netty.channel.ChannelHandlerContext, long, io.netty.handler.codec.http2.Http2FrameListener) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.codec.http2.Http2Flags v4;
long v2;
io.netty.handler.codec.http2.Http2FrameListener v3;
boolean v5;
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: long;
v3 := @parameter2: io.netty.handler.codec.http2.Http2FrameListener;
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.Http2Flags flags>;
v5 = virtualinvoke v4.<io.netty.handler.codec.http2.Http2Flags: boolean ack()>();
if v5 == 0 goto label1;
interfaceinvoke v3.<io.netty.handler.codec.http2.Http2FrameListener: void onPingAckRead(io.netty.channel.ChannelHandlerContext,long)>(v1, v2);
goto label2;
label1:
interfaceinvoke v3.<io.netty.handler.codec.http2.Http2FrameListener: void onPingRead(io.netty.channel.ChannelHandlerContext,long)>(v1, v2);
label2:
return;
}
private static void readGoAwayFrame(io.netty.channel.ChannelHandlerContext, io.netty.buffer.ByteBuf, int, io.netty.handler.codec.http2.Http2FrameListener) throws io.netty.handler.codec.http2.Http2Exception
{
long v5;
io.netty.handler.codec.http2.Http2FrameListener v3;
io.netty.channel.ChannelHandlerContext v0;
io.netty.buffer.ByteBuf v1, v8;
int v2, v4, v6, v7;
v0 := @parameter0: io.netty.channel.ChannelHandlerContext;
v1 := @parameter1: io.netty.buffer.ByteBuf;
v2 := @parameter2: int;
v3 := @parameter3: io.netty.handler.codec.http2.Http2FrameListener;
v4 = staticinvoke <io.netty.handler.codec.http2.Http2CodecUtil: int readUnsignedInt(io.netty.buffer.ByteBuf)>(v1);
v5 = virtualinvoke v1.<io.netty.buffer.ByteBuf: long readUnsignedInt()>();
v6 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readerIndex()>();
v7 = v2 - v6;
v8 = virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readSlice(int)>(v7);
interfaceinvoke v3.<io.netty.handler.codec.http2.Http2FrameListener: void onGoAwayRead(io.netty.channel.ChannelHandlerContext,int,long,io.netty.buffer.ByteBuf)>(v0, v4, v5, v8);
return;
}
private void readWindowUpdateFrame(io.netty.channel.ChannelHandlerContext, io.netty.buffer.ByteBuf, io.netty.handler.codec.http2.Http2FrameListener) throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Object[] v7;
io.netty.handler.codec.http2.Http2FrameListener v3;
java.lang.Integer v9;
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
io.netty.channel.ChannelHandlerContext v1;
io.netty.buffer.ByteBuf v2;
io.netty.handler.codec.http2.Http2Exception v10;
int v11, v4, v5, v8;
io.netty.handler.codec.http2.Http2Error v6;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 := @parameter2: io.netty.handler.codec.http2.Http2FrameListener;
v4 = staticinvoke <io.netty.handler.codec.http2.Http2CodecUtil: int readUnsignedInt(io.netty.buffer.ByteBuf)>(v2);
if v4 != 0 goto label1;
v5 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int streamId>;
v6 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error PROTOCOL_ERROR>;
v7 = newarray (java.lang.Object)[1];
v8 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int streamId>;
v9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v8);
v7[0] = v9;
v10 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception streamError(int,io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v5, v6, "Received WINDOW_UPDATE with delta 0 for stream: %d", v7);
throw v10;
label1:
v11 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int streamId>;
interfaceinvoke v3.<io.netty.handler.codec.http2.Http2FrameListener: void onWindowUpdateRead(io.netty.channel.ChannelHandlerContext,int,int)>(v1, v11, v4);
return;
}
private void readContinuationFrame(io.netty.buffer.ByteBuf, int, io.netty.handler.codec.http2.Http2FrameListener) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.handler.codec.http2.Http2Flags v5, v9;
io.netty.handler.codec.http2.Http2FrameListener v3;
io.netty.handler.codec.http2.DefaultHttp2FrameReader$HeadersContinuation v4;
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
io.netty.buffer.ByteBuf v1;
int v2, v7, v8;
boolean v10, v6;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 := @parameter1: int;
v3 := @parameter2: io.netty.handler.codec.http2.Http2FrameListener;
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.DefaultHttp2FrameReader$HeadersContinuation headersContinuation>;
v5 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.Http2Flags flags>;
v6 = virtualinvoke v5.<io.netty.handler.codec.http2.Http2Flags: boolean endOfHeaders()>();
v7 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readerIndex()>();
v8 = v2 - v7;
virtualinvoke v4.<io.netty.handler.codec.http2.DefaultHttp2FrameReader$HeadersContinuation: void processFragment(boolean,io.netty.buffer.ByteBuf,int,io.netty.handler.codec.http2.Http2FrameListener)>(v6, v1, v8, v3);
v9 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.Http2Flags flags>;
v10 = virtualinvoke v9.<io.netty.handler.codec.http2.Http2Flags: boolean endOfHeaders()>();
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void resetHeadersContinuationIfEnd(boolean)>(v10);
return;
}
private void readUnknownFrame(io.netty.channel.ChannelHandlerContext, io.netty.buffer.ByteBuf, int, io.netty.handler.codec.http2.Http2FrameListener) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.handler.codec.http2.Http2Flags v10;
io.netty.handler.codec.http2.Http2FrameListener v4;
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
io.netty.channel.ChannelHandlerContext v1;
byte v8;
io.netty.buffer.ByteBuf v2, v7;
int v3, v5, v6, v9;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 := @parameter2: int;
v4 := @parameter3: io.netty.handler.codec.http2.Http2FrameListener;
v5 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readerIndex()>();
v6 = v3 - v5;
v7 = virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readSlice(int)>(v6);
v8 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: byte frameType>;
v9 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int streamId>;
v10 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.Http2Flags flags>;
interfaceinvoke v4.<io.netty.handler.codec.http2.Http2FrameListener: void onUnknownFrame(io.netty.channel.ChannelHandlerContext,byte,int,io.netty.handler.codec.http2.Http2Flags,io.netty.buffer.ByteBuf)>(v1, v8, v9, v10, v7);
return;
}
private int readPadding(io.netty.buffer.ByteBuf)
{
short v4;
io.netty.buffer.ByteBuf v1;
io.netty.handler.codec.http2.Http2Flags v2;
int v5;
boolean v3;
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.Http2Flags flags>;
v3 = virtualinvoke v2.<io.netty.handler.codec.http2.Http2Flags: boolean paddingPresent()>();
if v3 != 0 goto label1;
return 0;
label1:
v4 = virtualinvoke v1.<io.netty.buffer.ByteBuf: short readUnsignedByte()>();
v5 = v4 + 1;
return v5;
}
private void verifyPadding(int) throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Object[] v5;
io.netty.handler.codec.http2.Http2Exception v6;
int v1, v2, v3;
io.netty.handler.codec.http2.Http2Error v4;
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
v1 := @parameter0: int;
v2 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int payloadLength>;
v3 = staticinvoke <io.netty.handler.codec.http2.DefaultHttp2FrameReader: int lengthWithoutTrailingPadding(int,int)>(v2, v1);
if v3 >= 0 goto label1;
v4 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error PROTOCOL_ERROR>;
v5 = newarray (java.lang.Object)[0];
v6 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception connectionError(io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v4, "Frame payload too small for padding.", v5);
throw v6;
label1:
return;
}
private static int lengthWithoutTrailingPadding(int, int)
{
int v0, v1, v2, v3;
v0 := @parameter0: int;
v1 := @parameter1: int;
if v1 != 0 goto label1;
v2 = v0;
goto label2;
label1:
v3 = v1 - 1;
v2 = v0 - v3;
label2:
return v2;
}
private void verifyNotProcessingHeaders() throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Object[] v3;
java.lang.Integer v8;
io.netty.handler.codec.http2.DefaultHttp2FrameReader$HeadersContinuation v1, v6;
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
byte v4;
io.netty.handler.codec.http2.Http2Exception v9;
int v7;
io.netty.handler.codec.http2.Http2Error v2;
java.lang.Byte v5;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.DefaultHttp2FrameReader$HeadersContinuation headersContinuation>;
if v1 == null goto label1;
v2 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error PROTOCOL_ERROR>;
v3 = newarray (java.lang.Object)[2];
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: byte frameType>;
v5 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(v4);
v3[0] = v5;
v6 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: io.netty.handler.codec.http2.DefaultHttp2FrameReader$HeadersContinuation headersContinuation>;
v7 = virtualinvoke v6.<io.netty.handler.codec.http2.DefaultHttp2FrameReader$HeadersContinuation: int getStreamId()>();
v8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v7);
v3[1] = v8;
v9 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception connectionError(io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v2, "Received frame of type %s while processing headers on stream %d.", v3);
throw v9;
label1:
return;
}
private void verifyAssociatedWithAStream() throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Object[] v3;
byte v4;
io.netty.handler.codec.http2.Http2Exception v6;
int v1;
io.netty.handler.codec.http2.Http2Error v2;
java.lang.Byte v5;
io.netty.handler.codec.http2.DefaultHttp2FrameReader v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2FrameReader;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: int streamId>;
if v1 != 0 goto label1;
v2 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error PROTOCOL_ERROR>;
v3 = newarray (java.lang.Object)[1];
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: byte frameType>;
v5 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(v4);
v3[0] = v5;
v6 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception connectionError(io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v2, "Frame of type %s must be associated with a stream.", v3);
throw v6;
label1:
return;
}
private static void verifyStreamOrConnectionId(int, java.lang.String) throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Object[] v3;
io.netty.handler.codec.http2.Http2Exception v4;
int v0;
io.netty.handler.codec.http2.Http2Error v2;
java.lang.String v1;
v0 := @parameter0: int;
v1 := @parameter1: java.lang.String;
if v0 >= 0 goto label1;
v2 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error PROTOCOL_ERROR>;
v3 = newarray (java.lang.Object)[1];
v3[0] = v1;
v4 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception connectionError(io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v2, "%s must be >= 0", v3);
throw v4;
label1:
return;
}
}