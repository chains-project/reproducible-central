final class io.netty.handler.codec.http2.HpackHuffmanEncoder extends java.lang.Object
{
private final int[] codes;
private final byte[] lengths;
private final io.netty.handler.codec.http2.HpackHuffmanEncoder$EncodedLengthProcessor encodedLengthProcessor;
private final io.netty.handler.codec.http2.HpackHuffmanEncoder$EncodeProcessor encodeProcessor;
void <init>()
{
byte[] v2;
int[] v1;
io.netty.handler.codec.http2.HpackHuffmanEncoder v0;
v0 := @this: io.netty.handler.codec.http2.HpackHuffmanEncoder;
v1 = <io.netty.handler.codec.http2.HpackUtil: int[] HUFFMAN_CODES>;
v2 = <io.netty.handler.codec.http2.HpackUtil: byte[] HUFFMAN_CODE_LENGTHS>;
specialinvoke v0.<io.netty.handler.codec.http2.HpackHuffmanEncoder: void <init>(int[],byte[])>(v1, v2);
return;
}
private void <init>(int[], byte[])
{
io.netty.handler.codec.http2.HpackHuffmanEncoder$EncodedLengthProcessor v3;
byte[] v2;
io.netty.handler.codec.http2.HpackHuffmanEncoder$EncodeProcessor v4;
int[] v1;
io.netty.handler.codec.http2.HpackHuffmanEncoder v0;
v0 := @this: io.netty.handler.codec.http2.HpackHuffmanEncoder;
v1 := @parameter0: int[];
v2 := @parameter1: byte[];
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new io.netty.handler.codec.http2.HpackHuffmanEncoder$EncodedLengthProcessor;
specialinvoke v3.<io.netty.handler.codec.http2.HpackHuffmanEncoder$EncodedLengthProcessor: void <init>(io.netty.handler.codec.http2.HpackHuffmanEncoder)>(v0);
v0.<io.netty.handler.codec.http2.HpackHuffmanEncoder: io.netty.handler.codec.http2.HpackHuffmanEncoder$EncodedLengthProcessor encodedLengthProcessor> = v3;
v4 = new io.netty.handler.codec.http2.HpackHuffmanEncoder$EncodeProcessor;
specialinvoke v4.<io.netty.handler.codec.http2.HpackHuffmanEncoder$EncodeProcessor: void <init>(io.netty.handler.codec.http2.HpackHuffmanEncoder)>(v0);
v0.<io.netty.handler.codec.http2.HpackHuffmanEncoder: io.netty.handler.codec.http2.HpackHuffmanEncoder$EncodeProcessor encodeProcessor> = v4;
v0.<io.netty.handler.codec.http2.HpackHuffmanEncoder: int[] codes> = v1;
v0.<io.netty.handler.codec.http2.HpackHuffmanEncoder: byte[] lengths> = v2;
return;
}
public void encode(io.netty.buffer.ByteBuf, java.lang.CharSequence)
{
java.lang.Throwable v9;
java.lang.CharSequence v2;
java.lang.Exception v7;
io.netty.handler.codec.http2.HpackHuffmanEncoder v0;
io.netty.handler.codec.http2.HpackHuffmanEncoder$EncodeProcessor v10, v4, v5, v6, v8;
io.netty.buffer.ByteBuf v1;
boolean v3;
v0 := @this: io.netty.handler.codec.http2.HpackHuffmanEncoder;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 := @parameter1: java.lang.CharSequence;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "out");
v3 = v2 instanceof io.netty.util.AsciiString;
if v3 == 0 goto label6;
label1:
v4 = v0.<io.netty.handler.codec.http2.HpackHuffmanEncoder: io.netty.handler.codec.http2.HpackHuffmanEncoder$EncodeProcessor encodeProcessor>;
v4.<io.netty.handler.codec.http2.HpackHuffmanEncoder$EncodeProcessor: io.netty.buffer.ByteBuf out> = v1;
v5 = v0.<io.netty.handler.codec.http2.HpackHuffmanEncoder: io.netty.handler.codec.http2.HpackHuffmanEncoder$EncodeProcessor encodeProcessor>;
virtualinvoke v2.<io.netty.util.AsciiString: int forEachByte(io.netty.util.ByteProcessor)>(v5);
label2:
v6 = v0.<io.netty.handler.codec.http2.HpackHuffmanEncoder: io.netty.handler.codec.http2.HpackHuffmanEncoder$EncodeProcessor encodeProcessor>;
virtualinvoke v6.<io.netty.handler.codec.http2.HpackHuffmanEncoder$EncodeProcessor: void end()>();
goto label7;
label3:
v7 := @caughtexception;
staticinvoke <io.netty.util.internal.PlatformDependent: void throwException(java.lang.Throwable)>(v7);
label4:
v8 = v0.<io.netty.handler.codec.http2.HpackHuffmanEncoder: io.netty.handler.codec.http2.HpackHuffmanEncoder$EncodeProcessor encodeProcessor>;
virtualinvoke v8.<io.netty.handler.codec.http2.HpackHuffmanEncoder$EncodeProcessor: void end()>();
goto label7;
label5:
v9 := @caughtexception;
v10 = v0.<io.netty.handler.codec.http2.HpackHuffmanEncoder: io.netty.handler.codec.http2.HpackHuffmanEncoder$EncodeProcessor encodeProcessor>;
virtualinvoke v10.<io.netty.handler.codec.http2.HpackHuffmanEncoder$EncodeProcessor: void end()>();
throw v9;
label6:
specialinvoke v0.<io.netty.handler.codec.http2.HpackHuffmanEncoder: void encodeSlowPath(io.netty.buffer.ByteBuf,java.lang.CharSequence)>(v1, v2);
label7:
return;
catch java.lang.Exception from label1 to label2 with label3;
catch java.lang.Throwable from label1 to label2 with label5;
catch java.lang.Throwable from label3 to label4 with label5;
}
private void encodeSlowPath(io.netty.buffer.ByteBuf, java.lang.CharSequence)
{
byte[] v11;
long v13, v14, v16, v18, v3;
byte v12;
io.netty.buffer.ByteBuf v1;
int[] v9;
int v10, v15, v17, v4, v5, v6;
java.lang.CharSequence v2;
char v7, v8;
io.netty.handler.codec.http2.HpackHuffmanEncoder v0;
v0 := @this: io.netty.handler.codec.http2.HpackHuffmanEncoder;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 := @parameter1: java.lang.CharSequence;
v3 = 0L;
v4 = 0;
v5 = 0;
label1:
v6 = interfaceinvoke v2.<java.lang.CharSequence: int length()>();
if v5 >= v6 goto label4;
v7 = interfaceinvoke v2.<java.lang.CharSequence: char charAt(int)>(v5);
v8 = v7 & 255;
v9 = v0.<io.netty.handler.codec.http2.HpackHuffmanEncoder: int[] codes>;
v10 = v9[v8];
v11 = v0.<io.netty.handler.codec.http2.HpackHuffmanEncoder: byte[] lengths>;
v12 = v11[v8];
v13 = v3 << v12;
v3 = v13 | v10;
v4 = v4 + v12;
label2:
if v4 < 8 goto label3;
v4 = v4 - 8;
v14 = v3 >> v4;
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeByte(int)>(v14);
goto label2;
label3:
v5 = v5 + 1;
goto label1;
label4:
if v4 <= 0 goto label5;
v15 = 8 - v4;
v16 = v3 << v15;
v17 = 255 >>> v4;
v18 = v16 | v17;
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeByte(int)>(v18);
label5:
return;
}
int getEncodedLength(java.lang.CharSequence)
{
java.lang.CharSequence v1;
java.lang.Exception v7;
io.netty.handler.codec.http2.HpackHuffmanEncoder v0;
io.netty.handler.codec.http2.HpackHuffmanEncoder$EncodedLengthProcessor v3, v4, v5;
int v6, v8, v9;
boolean v2;
v0 := @this: io.netty.handler.codec.http2.HpackHuffmanEncoder;
v1 := @parameter0: java.lang.CharSequence;
v2 = v1 instanceof io.netty.util.AsciiString;
if v2 == 0 goto label4;
label1:
v3 = v0.<io.netty.handler.codec.http2.HpackHuffmanEncoder: io.netty.handler.codec.http2.HpackHuffmanEncoder$EncodedLengthProcessor encodedLengthProcessor>;
virtualinvoke v3.<io.netty.handler.codec.http2.HpackHuffmanEncoder$EncodedLengthProcessor: void reset()>();
v4 = v0.<io.netty.handler.codec.http2.HpackHuffmanEncoder: io.netty.handler.codec.http2.HpackHuffmanEncoder$EncodedLengthProcessor encodedLengthProcessor>;
virtualinvoke v1.<io.netty.util.AsciiString: int forEachByte(io.netty.util.ByteProcessor)>(v4);
v5 = v0.<io.netty.handler.codec.http2.HpackHuffmanEncoder: io.netty.handler.codec.http2.HpackHuffmanEncoder$EncodedLengthProcessor encodedLengthProcessor>;
v6 = virtualinvoke v5.<io.netty.handler.codec.http2.HpackHuffmanEncoder$EncodedLengthProcessor: int length()>();
label2:
return v6;
label3:
v7 := @caughtexception;
staticinvoke <io.netty.util.internal.PlatformDependent: void throwException(java.lang.Throwable)>(v7);
v8 = (int) -1;
return v8;
label4:
v9 = specialinvoke v0.<io.netty.handler.codec.http2.HpackHuffmanEncoder: int getEncodedLengthSlowPath(java.lang.CharSequence)>(v1);
return v9;
catch java.lang.Exception from label1 to label2 with label3;
}
private int getEncodedLengthSlowPath(java.lang.CharSequence)
{
byte[] v5;
java.lang.CharSequence v1;
char v6, v7;
long v10, v2, v9;
io.netty.handler.codec.http2.HpackHuffmanEncoder v0;
byte v8;
int v3, v4;
v0 := @this: io.netty.handler.codec.http2.HpackHuffmanEncoder;
v1 := @parameter0: java.lang.CharSequence;
v2 = 0L;
v3 = 0;
label1:
v4 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
if v3 >= v4 goto label2;
v5 = v0.<io.netty.handler.codec.http2.HpackHuffmanEncoder: byte[] lengths>;
v6 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v3);
v7 = v6 & 255;
v8 = v5[v7];
v2 = v2 + v8;
v3 = v3 + 1;
goto label1;
label2:
v9 = v2 + 7L;
v10 = v9 >> 3;
return v10;
}
}