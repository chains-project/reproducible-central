public final class io.netty.handler.codec.http2.Http2CodecUtil extends java.lang.Object
{
public static final int CONNECTION_STREAM_ID;
public static final int HTTP_UPGRADE_STREAM_ID;
public static final java.lang.CharSequence HTTP_UPGRADE_SETTINGS_HEADER;
public static final java.lang.CharSequence HTTP_UPGRADE_PROTOCOL_NAME;
public static final java.lang.CharSequence TLS_UPGRADE_PROTOCOL_NAME;
public static final int PING_FRAME_PAYLOAD_LENGTH;
public static final short MAX_UNSIGNED_BYTE;
public static final int MAX_PADDING;
public static final long MAX_UNSIGNED_INT;
public static final int FRAME_HEADER_LENGTH;
public static final int SETTING_ENTRY_LENGTH;
public static final int PRIORITY_ENTRY_LENGTH;
public static final int INT_FIELD_LENGTH;
public static final short MAX_WEIGHT;
public static final short MIN_WEIGHT;
private static final io.netty.buffer.ByteBuf CONNECTION_PREFACE;
private static final int MAX_PADDING_LENGTH_LENGTH;
public static final int DATA_FRAME_HEADER_LENGTH;
public static final int HEADERS_FRAME_HEADER_LENGTH;
public static final int PRIORITY_FRAME_LENGTH;
public static final int RST_STREAM_FRAME_LENGTH;
public static final int PUSH_PROMISE_FRAME_HEADER_LENGTH;
public static final int GO_AWAY_FRAME_HEADER_LENGTH;
public static final int WINDOW_UPDATE_FRAME_LENGTH;
public static final int CONTINUATION_FRAME_HEADER_LENGTH;
public static final char SETTINGS_HEADER_TABLE_SIZE;
public static final char SETTINGS_ENABLE_PUSH;
public static final char SETTINGS_MAX_CONCURRENT_STREAMS;
public static final char SETTINGS_INITIAL_WINDOW_SIZE;
public static final char SETTINGS_MAX_FRAME_SIZE;
public static final char SETTINGS_MAX_HEADER_LIST_SIZE;
public static final int NUM_STANDARD_SETTINGS;
public static final long MAX_HEADER_TABLE_SIZE;
public static final long MAX_CONCURRENT_STREAMS;
public static final int MAX_INITIAL_WINDOW_SIZE;
public static final int MAX_FRAME_SIZE_LOWER_BOUND;
public static final int MAX_FRAME_SIZE_UPPER_BOUND;
public static final long MAX_HEADER_LIST_SIZE;
public static final long MIN_HEADER_TABLE_SIZE;
public static final long MIN_CONCURRENT_STREAMS;
public static final int MIN_INITIAL_WINDOW_SIZE;
public static final long MIN_HEADER_LIST_SIZE;
public static final int DEFAULT_WINDOW_SIZE;
public static final short DEFAULT_PRIORITY_WEIGHT;
public static final int DEFAULT_HEADER_TABLE_SIZE;
public static final long DEFAULT_HEADER_LIST_SIZE;
public static final int DEFAULT_MAX_FRAME_SIZE;
public static final int SMALLEST_MAX_CONCURRENT_STREAMS;
static final int DEFAULT_MAX_RESERVED_STREAMS;
static final int DEFAULT_MIN_ALLOCATION_CHUNK;
public static final long DEFAULT_GRACEFUL_SHUTDOWN_TIMEOUT_MILLIS;
public static final int DEFAULT_MAX_QUEUED_CONTROL_FRAMES;
public static long calculateMaxHeaderListSizeGoAway(long)
{
long v0, v1, v2;
v0 := @parameter0: long;
v1 = v0 >>> 2;
v2 = v0 + v1;
return v2;
}
public static boolean isOutboundStream(boolean, int)
{
int v1, v2;
boolean v0, v3, v4;
v0 := @parameter0: boolean;
v1 := @parameter1: int;
v2 = v1 & 1;
if v2 != 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
if v1 <= 0 goto label3;
if v0 != v3 goto label3;
v4 = 1;
goto label4;
label3:
v4 = 0;
label4:
return v4;
}
public static boolean isStreamIdValid(int)
{
int v0;
boolean v1;
v0 := @parameter0: int;
if v0 < 0 goto label1;
v1 = 1;
goto label2;
label1:
v1 = 0;
label2:
return v1;
}
static boolean isStreamIdValid(int, boolean)
{
int v0, v3;
boolean v1, v2, v4, v5;
v0 := @parameter0: int;
v1 := @parameter1: boolean;
v2 = staticinvoke <io.netty.handler.codec.http2.Http2CodecUtil: boolean isStreamIdValid(int)>(v0);
if v2 == 0 goto label3;
v3 = v0 & 1;
if v3 != 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
if v1 != v4 goto label3;
v5 = 1;
goto label4;
label3:
v5 = 0;
label4:
return v5;
}
public static boolean isMaxFrameSizeValid(int)
{
int v0;
boolean v1;
v0 := @parameter0: int;
if v0 < 16384 goto label1;
if v0 > 16777215 goto label1;
v1 = 1;
goto label2;
label1:
v1 = 0;
label2:
return v1;
}
public static io.netty.buffer.ByteBuf connectionPrefaceBuf()
{
io.netty.buffer.ByteBuf v0, v1;
v0 = <io.netty.handler.codec.http2.Http2CodecUtil: io.netty.buffer.ByteBuf CONNECTION_PREFACE>;
v1 = virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf retainedDuplicate()>();
return v1;
}
public static io.netty.handler.codec.http2.Http2Exception getEmbeddedHttp2Exception(java.lang.Throwable)
{
java.lang.Throwable v0;
boolean v1;
v0 := @parameter0: java.lang.Throwable;
label1:
if v0 == null goto label3;
v1 = v0 instanceof io.netty.handler.codec.http2.Http2Exception;
if v1 == 0 goto label2;
return v0;
label2:
v0 = virtualinvoke v0.<java.lang.Throwable: java.lang.Throwable getCause()>();
goto label1;
label3:
return null;
}
public static io.netty.buffer.ByteBuf toByteBuf(io.netty.channel.ChannelHandlerContext, java.lang.Throwable)
{
java.lang.Throwable v1;
io.netty.channel.ChannelHandlerContext v0;
io.netty.buffer.ByteBuf v3, v6;
io.netty.buffer.ByteBufAllocator v4;
java.lang.String v2, v5;
v0 := @parameter0: io.netty.channel.ChannelHandlerContext;
v1 := @parameter1: java.lang.Throwable;
if v1 == null goto label1;
v2 = virtualinvoke v1.<java.lang.Throwable: java.lang.String getMessage()>();
if v2 != null goto label2;
label1:
v3 = <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf EMPTY_BUFFER>;
return v3;
label2:
v4 = interfaceinvoke v0.<io.netty.channel.ChannelHandlerContext: io.netty.buffer.ByteBufAllocator alloc()>();
v5 = virtualinvoke v1.<java.lang.Throwable: java.lang.String getMessage()>();
v6 = staticinvoke <io.netty.buffer.ByteBufUtil: io.netty.buffer.ByteBuf writeUtf8(io.netty.buffer.ByteBufAllocator,java.lang.CharSequence)>(v4, v5);
return v6;
}
public static int readUnsignedInt(io.netty.buffer.ByteBuf)
{
int v1, v2;
io.netty.buffer.ByteBuf v0;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int readInt()>();
v2 = v1 & 2147483647;
return v2;
}
public static void writeFrameHeader(io.netty.buffer.ByteBuf, int, byte, io.netty.handler.codec.http2.Http2Flags, int)
{
byte v2;
io.netty.buffer.ByteBuf v0;
io.netty.handler.codec.http2.Http2Flags v3;
int v1, v4, v5;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: int;
v2 := @parameter2: byte;
v3 := @parameter3: io.netty.handler.codec.http2.Http2Flags;
v4 := @parameter4: int;
v5 = 9 + v1;
virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf ensureWritable(int)>(v5);
staticinvoke <io.netty.handler.codec.http2.Http2CodecUtil: void writeFrameHeaderInternal(io.netty.buffer.ByteBuf,int,byte,io.netty.handler.codec.http2.Http2Flags,int)>(v0, v1, v2, v3, v4);
return;
}
public static int streamableBytes(io.netty.handler.codec.http2.StreamByteDistributor$StreamState)
{
int v2, v4;
long v1, v3;
io.netty.handler.codec.http2.StreamByteDistributor$StreamState v0;
v0 := @parameter0: io.netty.handler.codec.http2.StreamByteDistributor$StreamState;
v1 = interfaceinvoke v0.<io.netty.handler.codec.http2.StreamByteDistributor$StreamState: long pendingBytes()>();
v2 = interfaceinvoke v0.<io.netty.handler.codec.http2.StreamByteDistributor$StreamState: int windowSize()>();
v3 = staticinvoke <java.lang.Math: long min(long,long)>(v1, v2);
v4 = staticinvoke <java.lang.Math: int max(int,int)>(0, v3);
return v4;
}
public static void headerListSizeExceeded(int, long, boolean) throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Object[] v4;
java.lang.Long v5;
io.netty.handler.codec.http2.Http2Exception v6;
int v0;
io.netty.handler.codec.http2.Http2Error v3;
long v1;
boolean v2;
v0 := @parameter0: int;
v1 := @parameter1: long;
v2 := @parameter2: boolean;
v3 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error PROTOCOL_ERROR>;
v4 = newarray (java.lang.Object)[1];
v5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v1);
v4[0] = v5;
v6 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception headerListSizeError(int,io.netty.handler.codec.http2.Http2Error,boolean,java.lang.String,java.lang.Object[])>(v0, v3, v2, "Header size exceeded max allowed size (%d)", v4);
throw v6;
}
public static void headerListSizeExceeded(long) throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Object[] v2;
java.lang.Long v3;
io.netty.handler.codec.http2.Http2Exception v4;
io.netty.handler.codec.http2.Http2Error v1;
long v0;
v0 := @parameter0: long;
v1 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error PROTOCOL_ERROR>;
v2 = newarray (java.lang.Object)[1];
v3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v0);
v2[0] = v3;
v4 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception connectionError(io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v1, "Header size exceeded max allowed size (%d)", v2);
throw v4;
}
static void writeFrameHeaderInternal(io.netty.buffer.ByteBuf, int, byte, io.netty.handler.codec.http2.Http2Flags, int)
{
short v5;
byte v2;
io.netty.buffer.ByteBuf v0;
io.netty.handler.codec.http2.Http2Flags v3;
int v1, v4;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: int;
v2 := @parameter2: byte;
v3 := @parameter3: io.netty.handler.codec.http2.Http2Flags;
v4 := @parameter4: int;
virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeMedium(int)>(v1);
virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeByte(int)>(v2);
v5 = virtualinvoke v3.<io.netty.handler.codec.http2.Http2Flags: short value()>();
virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeByte(int)>(v5);
virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeInt(int)>(v4);
return;
}
public static void verifyPadding(int)
{
java.lang.Object[] v2;
int v0;
java.lang.String v5;
java.lang.IllegalArgumentException v1;
java.lang.Integer v3, v4;
v0 := @parameter0: int;
if v0 < 0 goto label1;
if v0 <= 256 goto label2;
label1:
v1 = new java.lang.IllegalArgumentException;
v2 = newarray (java.lang.Object)[2];
v3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v0);
v2[0] = v3;
v4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(256);
v2[1] = v4;
v5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Invalid padding \'%d\'. Padding must be between 0 and %d (inclusive).", v2);
specialinvoke v1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v1;
label2:
return;
}
private void <init>()
{
io.netty.handler.codec.http2.Http2CodecUtil v0;
v0 := @this: io.netty.handler.codec.http2.Http2CodecUtil;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void <clinit>()
{
byte[] v4;
io.netty.util.AsciiString v0;
long v10;
java.util.concurrent.TimeUnit v8, v9;
io.netty.buffer.ByteBuf v1, v5, v6, v7;
java.nio.charset.Charset v3;
java.lang.String v2;
v0 = staticinvoke <io.netty.util.AsciiString: io.netty.util.AsciiString cached(java.lang.String)>("HTTP2-Settings");
<io.netty.handler.codec.http2.Http2CodecUtil: java.lang.CharSequence HTTP_UPGRADE_SETTINGS_HEADER> = v0;
<io.netty.handler.codec.http2.Http2CodecUtil: java.lang.CharSequence HTTP_UPGRADE_PROTOCOL_NAME> = "h2c";
<io.netty.handler.codec.http2.Http2CodecUtil: java.lang.CharSequence TLS_UPGRADE_PROTOCOL_NAME> = "h2";
v1 = staticinvoke <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf directBuffer(int)>(24);
v2 = "PRI * HTTP/2.0\r\n\r\nSM\r\n\r\n";
v3 = <io.netty.util.CharsetUtil: java.nio.charset.Charset UTF_8>;
v4 = virtualinvoke v2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(v3);
v5 = virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeBytes(byte[])>(v4);
v6 = staticinvoke <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf unreleasableBuffer(io.netty.buffer.ByteBuf)>(v5);
v7 = virtualinvoke v6.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf asReadOnly()>();
<io.netty.handler.codec.http2.Http2CodecUtil: io.netty.buffer.ByteBuf CONNECTION_PREFACE> = v7;
v8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
v9 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
v10 = virtualinvoke v8.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>(30L, v9);
<io.netty.handler.codec.http2.Http2CodecUtil: long DEFAULT_GRACEFUL_SHUTDOWN_TIMEOUT_MILLIS> = v10;
return;
}
}