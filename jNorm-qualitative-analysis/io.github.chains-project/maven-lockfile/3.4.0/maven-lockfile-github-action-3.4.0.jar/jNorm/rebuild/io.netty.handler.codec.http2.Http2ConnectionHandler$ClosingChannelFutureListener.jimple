final class io.netty.handler.codec.http2.Http2ConnectionHandler$ClosingChannelFutureListener extends java.lang.Object implements io.netty.channel.ChannelFutureListener
{
private final io.netty.channel.ChannelHandlerContext ctx;
private final io.netty.channel.ChannelPromise promise;
private final io.netty.util.concurrent.Future timeoutTask;
private boolean closed;
static final boolean $assertionsDisabled;
void <init>(io.netty.channel.ChannelHandlerContext, io.netty.channel.ChannelPromise)
{
io.netty.handler.codec.http2.Http2ConnectionHandler$ClosingChannelFutureListener v0;
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelPromise v2;
v0 := @this: io.netty.handler.codec.http2.Http2ConnectionHandler$ClosingChannelFutureListener;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.channel.ChannelPromise;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.handler.codec.http2.Http2ConnectionHandler$ClosingChannelFutureListener: io.netty.channel.ChannelHandlerContext ctx> = v1;
v0.<io.netty.handler.codec.http2.Http2ConnectionHandler$ClosingChannelFutureListener: io.netty.channel.ChannelPromise promise> = v2;
v0.<io.netty.handler.codec.http2.Http2ConnectionHandler$ClosingChannelFutureListener: io.netty.util.concurrent.Future timeoutTask> = null;
return;
}
void <init>(io.netty.channel.ChannelHandlerContext, io.netty.channel.ChannelPromise, long, java.util.concurrent.TimeUnit)
{
io.netty.util.concurrent.EventExecutor v5;
io.netty.handler.codec.http2.Http2ConnectionHandler$ClosingChannelFutureListener$1 v6;
io.netty.util.concurrent.ScheduledFuture v7;
long v3;
io.netty.handler.codec.http2.Http2ConnectionHandler$ClosingChannelFutureListener v0;
java.util.concurrent.TimeUnit v4;
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelPromise v2;
v0 := @this: io.netty.handler.codec.http2.Http2ConnectionHandler$ClosingChannelFutureListener;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 := @parameter2: long;
v4 := @parameter3: java.util.concurrent.TimeUnit;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.handler.codec.http2.Http2ConnectionHandler$ClosingChannelFutureListener: io.netty.channel.ChannelHandlerContext ctx> = v1;
v0.<io.netty.handler.codec.http2.Http2ConnectionHandler$ClosingChannelFutureListener: io.netty.channel.ChannelPromise promise> = v2;
v5 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v6 = new io.netty.handler.codec.http2.Http2ConnectionHandler$ClosingChannelFutureListener$1;
specialinvoke v6.<io.netty.handler.codec.http2.Http2ConnectionHandler$ClosingChannelFutureListener$1: void <init>(io.netty.handler.codec.http2.Http2ConnectionHandler$ClosingChannelFutureListener)>(v0);
v7 = interfaceinvoke v5.<io.netty.util.concurrent.EventExecutor: io.netty.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(v6, v3, v4);
v0.<io.netty.handler.codec.http2.Http2ConnectionHandler$ClosingChannelFutureListener: io.netty.util.concurrent.Future timeoutTask> = v7;
return;
}
public void operationComplete(io.netty.channel.ChannelFuture)
{
io.netty.handler.codec.http2.Http2ConnectionHandler$ClosingChannelFutureListener v0;
io.netty.util.concurrent.Future v2, v3;
io.netty.channel.ChannelFuture v1;
v0 := @this: io.netty.handler.codec.http2.Http2ConnectionHandler$ClosingChannelFutureListener;
v1 := @parameter0: io.netty.channel.ChannelFuture;
v2 = v0.<io.netty.handler.codec.http2.Http2ConnectionHandler$ClosingChannelFutureListener: io.netty.util.concurrent.Future timeoutTask>;
if v2 == null goto label1;
v3 = v0.<io.netty.handler.codec.http2.Http2ConnectionHandler$ClosingChannelFutureListener: io.netty.util.concurrent.Future timeoutTask>;
interfaceinvoke v3.<io.netty.util.concurrent.Future: boolean cancel(boolean)>(0);
label1:
specialinvoke v0.<io.netty.handler.codec.http2.Http2ConnectionHandler$ClosingChannelFutureListener: void doClose()>();
return;
}
private void doClose()
{
java.lang.AssertionError v4;
io.netty.handler.codec.http2.Http2ConnectionHandler$ClosingChannelFutureListener v0;
io.netty.channel.ChannelHandlerContext v6, v7;
io.netty.channel.ChannelPromise v5, v8;
io.netty.util.concurrent.Future v3;
boolean v1, v2;
v0 := @this: io.netty.handler.codec.http2.Http2ConnectionHandler$ClosingChannelFutureListener;
v1 = v0.<io.netty.handler.codec.http2.Http2ConnectionHandler$ClosingChannelFutureListener: boolean closed>;
if v1 == 0 goto label2;
v2 = <io.netty.handler.codec.http2.Http2ConnectionHandler$ClosingChannelFutureListener: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
v3 = v0.<io.netty.handler.codec.http2.Http2ConnectionHandler$ClosingChannelFutureListener: io.netty.util.concurrent.Future timeoutTask>;
if v3 != null goto label1;
v4 = new java.lang.AssertionError;
specialinvoke v4.<java.lang.AssertionError: void <init>()>();
throw v4;
label1:
return;
label2:
v0.<io.netty.handler.codec.http2.Http2ConnectionHandler$ClosingChannelFutureListener: boolean closed> = 1;
v5 = v0.<io.netty.handler.codec.http2.Http2ConnectionHandler$ClosingChannelFutureListener: io.netty.channel.ChannelPromise promise>;
if v5 != null goto label3;
v6 = v0.<io.netty.handler.codec.http2.Http2ConnectionHandler$ClosingChannelFutureListener: io.netty.channel.ChannelHandlerContext ctx>;
interfaceinvoke v6.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture close()>();
goto label4;
label3:
v7 = v0.<io.netty.handler.codec.http2.Http2ConnectionHandler$ClosingChannelFutureListener: io.netty.channel.ChannelHandlerContext ctx>;
v8 = v0.<io.netty.handler.codec.http2.Http2ConnectionHandler$ClosingChannelFutureListener: io.netty.channel.ChannelPromise promise>;
interfaceinvoke v7.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)>(v8);
label4:
return;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/handler/codec/http2/Http2ConnectionHandler;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.handler.codec.http2.Http2ConnectionHandler$ClosingChannelFutureListener: boolean $assertionsDisabled> = v2;
return;
}
}