public final class io.netty.handler.codec.http2.Http2MultiplexHandler extends io.netty.handler.codec.http2.Http2ChannelDuplexHandler
{
static final io.netty.channel.ChannelFutureListener CHILD_CHANNEL_REGISTRATION_LISTENER;
private final io.netty.channel.ChannelHandler inboundStreamHandler;
private final io.netty.channel.ChannelHandler upgradeStreamHandler;
private final java.util.Queue readCompletePendingQueue;
private boolean parentReadInProgress;
private int idCount;
private volatile io.netty.channel.ChannelHandlerContext ctx;
public void <init>(io.netty.channel.ChannelHandler)
{
io.netty.handler.codec.http2.Http2MultiplexHandler v0;
io.netty.channel.ChannelHandler v1;
v0 := @this: io.netty.handler.codec.http2.Http2MultiplexHandler;
v1 := @parameter0: io.netty.channel.ChannelHandler;
specialinvoke v0.<io.netty.handler.codec.http2.Http2MultiplexHandler: void <init>(io.netty.channel.ChannelHandler,io.netty.channel.ChannelHandler)>(v1, null);
return;
}
public void <init>(io.netty.channel.ChannelHandler, io.netty.channel.ChannelHandler)
{
io.netty.handler.codec.http2.Http2MultiplexHandler v0;
io.netty.handler.codec.http2.MaxCapacityQueue v3;
io.netty.channel.ChannelHandler v1, v2;
java.lang.Object v5;
java.util.ArrayDeque v4;
v0 := @this: io.netty.handler.codec.http2.Http2MultiplexHandler;
v1 := @parameter0: io.netty.channel.ChannelHandler;
v2 := @parameter1: io.netty.channel.ChannelHandler;
specialinvoke v0.<io.netty.handler.codec.http2.Http2ChannelDuplexHandler: void <init>()>();
v3 = new io.netty.handler.codec.http2.MaxCapacityQueue;
v4 = new java.util.ArrayDeque;
specialinvoke v4.<java.util.ArrayDeque: void <init>(int)>(8);
specialinvoke v3.<io.netty.handler.codec.http2.MaxCapacityQueue: void <init>(java.util.Queue,int)>(v4, 100);
v0.<io.netty.handler.codec.http2.Http2MultiplexHandler: java.util.Queue readCompletePendingQueue> = v3;
v5 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "inboundStreamHandler");
v0.<io.netty.handler.codec.http2.Http2MultiplexHandler: io.netty.channel.ChannelHandler inboundStreamHandler> = v5;
v0.<io.netty.handler.codec.http2.Http2MultiplexHandler: io.netty.channel.ChannelHandler upgradeStreamHandler> = v2;
return;
}
static void registerDone(io.netty.channel.ChannelFuture)
{
io.netty.channel.Channel v2;
io.netty.channel.Channel$Unsafe v4;
boolean v1, v3;
io.netty.channel.ChannelFuture v0;
v0 := @parameter0: io.netty.channel.ChannelFuture;
v1 = interfaceinvoke v0.<io.netty.channel.ChannelFuture: boolean isSuccess()>();
if v1 != 0 goto label2;
v2 = interfaceinvoke v0.<io.netty.channel.ChannelFuture: io.netty.channel.Channel channel()>();
v3 = interfaceinvoke v2.<io.netty.channel.Channel: boolean isRegistered()>();
if v3 == 0 goto label1;
interfaceinvoke v2.<io.netty.channel.Channel: io.netty.channel.ChannelFuture close()>();
goto label2;
label1:
v4 = interfaceinvoke v2.<io.netty.channel.Channel: io.netty.channel.Channel$Unsafe unsafe()>();
interfaceinvoke v4.<io.netty.channel.Channel$Unsafe: void closeForcibly()>();
label2:
return;
}
protected void handlerAdded0(io.netty.channel.ChannelHandlerContext)
{
io.netty.channel.Channel v3;
io.netty.util.concurrent.EventExecutor v2;
io.netty.channel.ChannelHandlerContext v1;
java.lang.IllegalStateException v5;
io.netty.handler.codec.http2.Http2MultiplexHandler v0;
io.netty.channel.EventLoop v4;
v0 := @this: io.netty.handler.codec.http2.Http2MultiplexHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v3 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v4 = interfaceinvoke v3.<io.netty.channel.Channel: io.netty.channel.EventLoop eventLoop()>();
if v2 == v4 goto label1;
v5 = new java.lang.IllegalStateException;
specialinvoke v5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("EventExecutor must be EventLoop of Channel");
throw v5;
label1:
v0.<io.netty.handler.codec.http2.Http2MultiplexHandler: io.netty.channel.ChannelHandlerContext ctx> = v1;
return;
}
protected void handlerRemoved0(io.netty.channel.ChannelHandlerContext)
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.codec.http2.Http2MultiplexHandler v0;
java.util.Queue v2;
v0 := @this: io.netty.handler.codec.http2.Http2MultiplexHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = v0.<io.netty.handler.codec.http2.Http2MultiplexHandler: java.util.Queue readCompletePendingQueue>;
interfaceinvoke v2.<java.util.Queue: void clear()>();
return;
}
public void channelRead(io.netty.channel.ChannelHandlerContext, java.lang.Object) throws java.lang.Exception
{
io.netty.channel.ChannelPipeline v8;
io.netty.channel.Channel v6;
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.codec.http2.Http2FrameStream v5;
io.netty.handler.codec.http2.Http2MultiplexHandler v0;
java.lang.Object v2;
boolean v3, v4, v7, v9;
v0 := @this: io.netty.handler.codec.http2.Http2MultiplexHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v0.<io.netty.handler.codec.http2.Http2MultiplexHandler: boolean parentReadInProgress> = 1;
v3 = v2 instanceof io.netty.handler.codec.http2.Http2StreamFrame;
if v3 == 0 goto label4;
v4 = v2 instanceof io.netty.handler.codec.http2.Http2WindowUpdateFrame;
if v4 == 0 goto label1;
return;
label1:
v5 = interfaceinvoke v2.<io.netty.handler.codec.http2.Http2StreamFrame: io.netty.handler.codec.http2.Http2FrameStream stream()>();
v6 = v5.<io.netty.handler.codec.http2.Http2FrameCodec$DefaultHttp2FrameStream: io.netty.channel.Channel attachment>;
v7 = v2 instanceof io.netty.handler.codec.http2.Http2ResetFrame;
if v7 == 0 goto label2;
v8 = virtualinvoke v6.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPipeline pipeline()>();
interfaceinvoke v8.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireUserEventTriggered(java.lang.Object)>(v2);
goto label3;
label2:
virtualinvoke v6.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: void fireChildRead(io.netty.handler.codec.http2.Http2Frame)>(v2);
label3:
return;
label4:
v9 = v2 instanceof io.netty.handler.codec.http2.Http2GoAwayFrame;
if v9 == 0 goto label5;
specialinvoke v0.<io.netty.handler.codec.http2.Http2MultiplexHandler: void onHttp2GoAwayFrame(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http2.Http2GoAwayFrame)>(v1, v2);
label5:
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)>(v2);
return;
}
public void channelWritabilityChanged(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.Channel v2;
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.codec.http2.Http2FrameStreamVisitor v4;
io.netty.handler.codec.http2.Http2MultiplexHandler v0;
boolean v3;
v0 := @this: io.netty.handler.codec.http2.Http2MultiplexHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v3 = interfaceinvoke v2.<io.netty.channel.Channel: boolean isWritable()>();
if v3 == 0 goto label1;
v4 = <io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.Http2FrameStreamVisitor WRITABLE_VISITOR>;
virtualinvoke v0.<io.netty.handler.codec.http2.Http2MultiplexHandler: void forEachActiveStream(io.netty.handler.codec.http2.Http2FrameStreamVisitor)>(v4);
label1:
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()>();
return;
}
public void userEventTriggered(io.netty.channel.ChannelHandlerContext, java.lang.Object) throws java.lang.Exception
{
java.lang.Object[] v17;
io.netty.channel.ChannelHandlerContext v1;
int[] v7;
io.netty.channel.ChannelFutureListener v28;
io.netty.handler.codec.http2.Http2Exception v18;
int v10, v11, v13, v9;
io.netty.handler.codec.http2.Http2MultiplexHandler$Http2MultiplexHandlerStreamChannel v19, v21, v22;
boolean v14, v27, v3;
io.netty.handler.codec.http2.Http2Stream$State v8;
io.netty.channel.EventLoop v25;
io.netty.channel.ChannelFuture v26;
io.netty.channel.Channel v12, v24, v29;
io.netty.handler.codec.http2.Http2FrameStreamEvent$Type v5, v6;
io.netty.handler.codec.http2.Http2Error v16;
io.netty.handler.codec.http2.Http2FrameStream v4;
io.netty.handler.codec.http2.Http2MultiplexHandler v0;
io.netty.channel.ChannelHandler v15, v20, v23;
java.lang.Object v2;
v0 := @this: io.netty.handler.codec.http2.Http2MultiplexHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 = v2 instanceof io.netty.handler.codec.http2.Http2FrameStreamEvent;
if v3 == 0 goto label9;
v4 = virtualinvoke v2.<io.netty.handler.codec.http2.Http2FrameStreamEvent: io.netty.handler.codec.http2.Http2FrameStream stream()>();
v5 = virtualinvoke v2.<io.netty.handler.codec.http2.Http2FrameStreamEvent: io.netty.handler.codec.http2.Http2FrameStreamEvent$Type type()>();
v6 = <io.netty.handler.codec.http2.Http2FrameStreamEvent$Type: io.netty.handler.codec.http2.Http2FrameStreamEvent$Type State>;
if v5 != v6 goto label8;
v7 = <io.netty.handler.codec.http2.Http2MultiplexHandler$4: int[] $SwitchMap$io$netty$handler$codec$http2$Http2Stream$State>;
v8 = virtualinvoke v4.<io.netty.handler.codec.http2.Http2FrameCodec$DefaultHttp2FrameStream: io.netty.handler.codec.http2.Http2Stream$State state()>();
v9 = virtualinvoke v8.<io.netty.handler.codec.http2.Http2Stream$State: int ordinal()>();
v10 = v7[v9];
tableswitch(v10)
{
case 1: goto label1;
case 2: goto label2;
case 3: goto label2;
case 4: goto label7;
default: goto label8;
};
label1:
v11 = virtualinvoke v4.<io.netty.handler.codec.http2.Http2FrameCodec$DefaultHttp2FrameStream: int id()>();
if v11 != 1 goto label8;
label2:
v12 = v4.<io.netty.handler.codec.http2.Http2FrameCodec$DefaultHttp2FrameStream: io.netty.channel.Channel attachment>;
if v12 != null goto label8;
v13 = virtualinvoke v4.<io.netty.handler.codec.http2.Http2FrameCodec$DefaultHttp2FrameStream: int id()>();
if v13 != 1 goto label4;
v14 = staticinvoke <io.netty.handler.codec.http2.Http2MultiplexHandler: boolean isServer(io.netty.channel.ChannelHandlerContext)>(v1);
if v14 != 0 goto label4;
v15 = v0.<io.netty.handler.codec.http2.Http2MultiplexHandler: io.netty.channel.ChannelHandler upgradeStreamHandler>;
if v15 != null goto label3;
v16 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error INTERNAL_ERROR>;
v17 = newarray (java.lang.Object)[0];
v18 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception connectionError(io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v16, "Client is misconfigured for upgrade requests", v17);
throw v18;
label3:
v19 = new io.netty.handler.codec.http2.Http2MultiplexHandler$Http2MultiplexHandlerStreamChannel;
v20 = v0.<io.netty.handler.codec.http2.Http2MultiplexHandler: io.netty.channel.ChannelHandler upgradeStreamHandler>;
specialinvoke v19.<io.netty.handler.codec.http2.Http2MultiplexHandler$Http2MultiplexHandlerStreamChannel: void <init>(io.netty.handler.codec.http2.Http2MultiplexHandler,io.netty.handler.codec.http2.Http2FrameCodec$DefaultHttp2FrameStream,io.netty.channel.ChannelHandler)>(v0, v4, v20);
v21 = v19;
virtualinvoke v19.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: void closeOutbound()>();
goto label5;
label4:
v22 = new io.netty.handler.codec.http2.Http2MultiplexHandler$Http2MultiplexHandlerStreamChannel;
v23 = v0.<io.netty.handler.codec.http2.Http2MultiplexHandler: io.netty.channel.ChannelHandler inboundStreamHandler>;
specialinvoke v22.<io.netty.handler.codec.http2.Http2MultiplexHandler$Http2MultiplexHandlerStreamChannel: void <init>(io.netty.handler.codec.http2.Http2MultiplexHandler,io.netty.handler.codec.http2.Http2FrameCodec$DefaultHttp2FrameStream,io.netty.channel.ChannelHandler)>(v0, v4, v23);
v21 = v22;
label5:
v24 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v25 = interfaceinvoke v24.<io.netty.channel.Channel: io.netty.channel.EventLoop eventLoop()>();
v26 = interfaceinvoke v25.<io.netty.channel.EventLoop: io.netty.channel.ChannelFuture register(io.netty.channel.Channel)>(v21);
v27 = interfaceinvoke v26.<io.netty.channel.ChannelFuture: boolean isDone()>();
if v27 == 0 goto label6;
staticinvoke <io.netty.handler.codec.http2.Http2MultiplexHandler: void registerDone(io.netty.channel.ChannelFuture)>(v26);
goto label8;
label6:
v28 = <io.netty.handler.codec.http2.Http2MultiplexHandler: io.netty.channel.ChannelFutureListener CHILD_CHANNEL_REGISTRATION_LISTENER>;
interfaceinvoke v26.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v28);
goto label8;
label7:
v29 = v4.<io.netty.handler.codec.http2.Http2FrameCodec$DefaultHttp2FrameStream: io.netty.channel.Channel attachment>;
if v29 == null goto label8;
virtualinvoke v29.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: void streamClosed()>();
label8:
return;
label9:
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireUserEventTriggered(java.lang.Object)>(v2);
return;
}
io.netty.handler.codec.http2.Http2StreamChannel newOutboundStream()
{
io.netty.handler.codec.http2.Http2FrameStream v2;
io.netty.handler.codec.http2.Http2MultiplexHandler v0;
io.netty.handler.codec.http2.Http2MultiplexHandler$Http2MultiplexHandlerStreamChannel v1;
v0 := @this: io.netty.handler.codec.http2.Http2MultiplexHandler;
v1 = new io.netty.handler.codec.http2.Http2MultiplexHandler$Http2MultiplexHandlerStreamChannel;
v2 = virtualinvoke v0.<io.netty.handler.codec.http2.Http2MultiplexHandler: io.netty.handler.codec.http2.Http2FrameStream newStream()>();
specialinvoke v1.<io.netty.handler.codec.http2.Http2MultiplexHandler$Http2MultiplexHandlerStreamChannel: void <init>(io.netty.handler.codec.http2.Http2MultiplexHandler,io.netty.handler.codec.http2.Http2FrameCodec$DefaultHttp2FrameStream,io.netty.channel.ChannelHandler)>(v0, v2, null);
return v1;
}
public void exceptionCaught(io.netty.channel.ChannelHandlerContext, java.lang.Throwable) throws java.lang.Exception
{
java.lang.Throwable v12, v13, v2, v7, v9;
io.netty.channel.ChannelPipeline v6;
io.netty.channel.Channel v5;
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.codec.http2.Http2Error v10, v8;
io.netty.handler.codec.http2.Http2FrameStream v4;
io.netty.handler.codec.http2.Http2MultiplexHandler v0;
boolean v11, v14, v3;
v0 := @this: io.netty.handler.codec.http2.Http2MultiplexHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Throwable;
v3 = v2 instanceof io.netty.handler.codec.http2.Http2FrameStreamException;
if v3 == 0 goto label5;
v4 = virtualinvoke v2.<io.netty.handler.codec.http2.Http2FrameStreamException: io.netty.handler.codec.http2.Http2FrameStream stream()>();
v5 = v4.<io.netty.handler.codec.http2.Http2FrameCodec$DefaultHttp2FrameStream: io.netty.channel.Channel attachment>;
label1:
v6 = virtualinvoke v5.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPipeline pipeline()>();
v7 = virtualinvoke v2.<java.lang.Throwable: java.lang.Throwable getCause()>();
interfaceinvoke v6.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireExceptionCaught(java.lang.Throwable)>(v7);
label2:
v8 = virtualinvoke v2.<io.netty.handler.codec.http2.Http2FrameStreamException: io.netty.handler.codec.http2.Http2Error error()>();
virtualinvoke v5.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: void closeWithError(io.netty.handler.codec.http2.Http2Error)>(v8);
goto label4;
label3:
v9 := @caughtexception;
v10 = virtualinvoke v2.<io.netty.handler.codec.http2.Http2FrameStreamException: io.netty.handler.codec.http2.Http2Error error()>();
virtualinvoke v5.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: void closeWithError(io.netty.handler.codec.http2.Http2Error)>(v10);
throw v9;
label4:
return;
label5:
v11 = v2 instanceof io.netty.handler.codec.http2.Http2MultiplexActiveStreamsException;
if v11 == 0 goto label6;
v12 = virtualinvoke v2.<java.lang.Throwable: java.lang.Throwable getCause()>();
specialinvoke v0.<io.netty.handler.codec.http2.Http2MultiplexHandler: void fireExceptionCaughtForActiveStream(java.lang.Throwable)>(v12);
return;
label6:
v13 = virtualinvoke v2.<java.lang.Throwable: java.lang.Throwable getCause()>();
v14 = v13 instanceof javax.net.ssl.SSLException;
if v14 == 0 goto label7;
specialinvoke v0.<io.netty.handler.codec.http2.Http2MultiplexHandler: void fireExceptionCaughtForActiveStream(java.lang.Throwable)>(v2);
label7:
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireExceptionCaught(java.lang.Throwable)>(v2);
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
private void fireExceptionCaughtForActiveStream(java.lang.Throwable) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.handler.codec.http2.Http2MultiplexHandler$2 v2;
java.lang.Throwable v1;
io.netty.handler.codec.http2.Http2MultiplexHandler v0;
v0 := @this: io.netty.handler.codec.http2.Http2MultiplexHandler;
v1 := @parameter0: java.lang.Throwable;
v2 = new io.netty.handler.codec.http2.Http2MultiplexHandler$2;
specialinvoke v2.<io.netty.handler.codec.http2.Http2MultiplexHandler$2: void <init>(io.netty.handler.codec.http2.Http2MultiplexHandler,java.lang.Throwable)>(v0, v1);
virtualinvoke v0.<io.netty.handler.codec.http2.Http2MultiplexHandler: void forEachActiveStream(io.netty.handler.codec.http2.Http2FrameStreamVisitor)>(v2);
return;
}
private static boolean isServer(io.netty.channel.ChannelHandlerContext)
{
io.netty.channel.Channel v1, v2;
io.netty.channel.ChannelHandlerContext v0;
boolean v3;
v0 := @parameter0: io.netty.channel.ChannelHandlerContext;
v1 = interfaceinvoke v0.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v2 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.Channel parent()>();
v3 = v2 instanceof io.netty.channel.ServerChannel;
return v3;
}
private void onHttp2GoAwayFrame(io.netty.channel.ChannelHandlerContext, io.netty.handler.codec.http2.Http2GoAwayFrame)
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.codec.http2.Http2MultiplexHandler$3 v5;
io.netty.handler.codec.http2.Http2Exception v6;
int v3;
io.netty.handler.codec.http2.Http2MultiplexHandler v0;
io.netty.handler.codec.http2.Http2GoAwayFrame v2;
boolean v4;
v0 := @this: io.netty.handler.codec.http2.Http2MultiplexHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.handler.codec.http2.Http2GoAwayFrame;
v3 = interfaceinvoke v2.<io.netty.handler.codec.http2.Http2GoAwayFrame: int lastStreamId()>();
if v3 != 2147483647 goto label1;
return;
label1:
v4 = staticinvoke <io.netty.handler.codec.http2.Http2MultiplexHandler: boolean isServer(io.netty.channel.ChannelHandlerContext)>(v1);
v5 = new io.netty.handler.codec.http2.Http2MultiplexHandler$3;
specialinvoke v5.<io.netty.handler.codec.http2.Http2MultiplexHandler$3: void <init>(io.netty.handler.codec.http2.Http2MultiplexHandler,io.netty.handler.codec.http2.Http2GoAwayFrame,boolean)>(v0, v2, v4);
virtualinvoke v0.<io.netty.handler.codec.http2.Http2MultiplexHandler: void forEachActiveStream(io.netty.handler.codec.http2.Http2FrameStreamVisitor)>(v5);
label2:
goto label4;
label3:
v6 := @caughtexception;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireExceptionCaught(java.lang.Throwable)>(v6);
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture close()>();
label4:
return;
catch io.netty.handler.codec.http2.Http2Exception from label1 to label2 with label3;
}
public void channelReadComplete(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.codec.http2.Http2MultiplexHandler v0;
v0 := @this: io.netty.handler.codec.http2.Http2MultiplexHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
specialinvoke v0.<io.netty.handler.codec.http2.Http2MultiplexHandler: void processPendingReadCompleteQueue()>();
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelReadComplete()>();
return;
}
private void processPendingReadCompleteQueue()
{
java.lang.Throwable v4;
io.netty.channel.ChannelHandlerContext v6;
io.netty.handler.codec.http2.Http2MultiplexHandler v0;
java.lang.Object v2;
java.util.Queue v1, v3, v5;
v0 := @this: io.netty.handler.codec.http2.Http2MultiplexHandler;
v0.<io.netty.handler.codec.http2.Http2MultiplexHandler: boolean parentReadInProgress> = 1;
v1 = v0.<io.netty.handler.codec.http2.Http2MultiplexHandler: java.util.Queue readCompletePendingQueue>;
v2 = interfaceinvoke v1.<java.util.Queue: java.lang.Object poll()>();
if v2 == null goto label3;
label1:
virtualinvoke v2.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: void fireChildReadComplete()>();
v3 = v0.<io.netty.handler.codec.http2.Http2MultiplexHandler: java.util.Queue readCompletePendingQueue>;
interfaceinvoke v3.<java.util.Queue: java.lang.Object poll()>();
goto label1;
label2:
v4 := @caughtexception;
v0.<io.netty.handler.codec.http2.Http2MultiplexHandler: boolean parentReadInProgress> = 0;
v5 = v0.<io.netty.handler.codec.http2.Http2MultiplexHandler: java.util.Queue readCompletePendingQueue>;
interfaceinvoke v5.<java.util.Queue: void clear()>();
v6 = v0.<io.netty.handler.codec.http2.Http2MultiplexHandler: io.netty.channel.ChannelHandlerContext ctx>;
interfaceinvoke v6.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext flush()>();
throw v4;
label3:
v0.<io.netty.handler.codec.http2.Http2MultiplexHandler: boolean parentReadInProgress> = 0;
return;
catch java.lang.Throwable from label1 to label2 with label2;
}
static void <clinit>()
{
io.netty.handler.codec.http2.Http2MultiplexHandler$1 v0;
v0 = new io.netty.handler.codec.http2.Http2MultiplexHandler$1;
specialinvoke v0.<io.netty.handler.codec.http2.Http2MultiplexHandler$1: void <init>()>();
<io.netty.handler.codec.http2.Http2MultiplexHandler: io.netty.channel.ChannelFutureListener CHILD_CHANNEL_REGISTRATION_LISTENER> = v0;
return;
}
}