public final class io.netty.handler.codec.http2.WeightedFairQueueByteDistributor extends java.lang.Object implements io.netty.handler.codec.http2.StreamByteDistributor
{
static final int INITIAL_CHILDREN_MAP_SIZE;
private static final int DEFAULT_MAX_STATE_ONLY_SIZE;
private final io.netty.handler.codec.http2.Http2Connection$PropertyKey stateKey;
private final io.netty.util.collection.IntObjectMap stateOnlyMap;
private final io.netty.util.internal.PriorityQueue stateOnlyRemovalQueue;
private final io.netty.handler.codec.http2.Http2Connection connection;
private final io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State connectionState;
private int allocationQuantum;
private final int maxStateOnlySize;
static final boolean $assertionsDisabled;
public void <init>(io.netty.handler.codec.http2.Http2Connection)
{
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor v0;
io.netty.handler.codec.http2.Http2Connection v1;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Connection;
specialinvoke v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: void <init>(io.netty.handler.codec.http2.Http2Connection,int)>(v1, 5);
return;
}
public void <init>(io.netty.handler.codec.http2.Http2Connection, int)
{
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v12;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor v0;
io.netty.util.internal.EmptyPriorityQueue v4;
io.netty.handler.codec.http2.Http2Connection v1;
io.netty.handler.codec.http2.Http2Connection$PropertyKey v11, v9;
io.netty.util.internal.DefaultPriorityQueue v6;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$StateOnlyComparator v7;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$1 v13;
io.netty.util.collection.IntObjectMap v3;
int v2, v8;
io.netty.handler.codec.http2.Http2Stream v10;
io.netty.util.collection.IntObjectHashMap v5;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Connection;
v2 := @parameter1: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: int allocationQuantum> = 1024;
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositiveOrZero(int,java.lang.String)>(v2, "maxStateOnlySize");
if v2 != 0 goto label1;
v3 = staticinvoke <io.netty.util.collection.IntCollections: io.netty.util.collection.IntObjectMap emptyMap()>();
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.util.collection.IntObjectMap stateOnlyMap> = v3;
v4 = staticinvoke <io.netty.util.internal.EmptyPriorityQueue: io.netty.util.internal.EmptyPriorityQueue instance()>();
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.util.internal.PriorityQueue stateOnlyRemovalQueue> = v4;
goto label2;
label1:
v5 = new io.netty.util.collection.IntObjectHashMap;
specialinvoke v5.<io.netty.util.collection.IntObjectHashMap: void <init>(int)>(v2);
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.util.collection.IntObjectMap stateOnlyMap> = v5;
v6 = new io.netty.util.internal.DefaultPriorityQueue;
v7 = <io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$StateOnlyComparator: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$StateOnlyComparator INSTANCE>;
v8 = v2 + 2;
specialinvoke v6.<io.netty.util.internal.DefaultPriorityQueue: void <init>(java.util.Comparator,int)>(v7, v8);
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.util.internal.PriorityQueue stateOnlyRemovalQueue> = v6;
label2:
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: int maxStateOnlySize> = v2;
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.handler.codec.http2.Http2Connection connection> = v1;
v9 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Connection$PropertyKey newKey()>();
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.handler.codec.http2.Http2Connection$PropertyKey stateKey> = v9;
v10 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Stream connectionStream()>();
v11 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.handler.codec.http2.Http2Connection$PropertyKey stateKey>;
v12 = new io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
specialinvoke v12.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void <init>(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor,io.netty.handler.codec.http2.Http2Stream,int)>(v0, v10, 16);
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State connectionState> = v12;
interfaceinvoke v10.<io.netty.handler.codec.http2.Http2Stream: java.lang.Object setProperty(io.netty.handler.codec.http2.Http2Connection$PropertyKey,java.lang.Object)>(v11, v12);
v13 = new io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$1;
specialinvoke v13.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$1: void <init>(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor)>(v0);
interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Connection: void addListener(io.netty.handler.codec.http2.Http2Connection$Listener)>(v13);
return;
}
public void updateStreamableBytes(io.netty.handler.codec.http2.StreamByteDistributor$StreamState)
{
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v3;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor v0;
io.netty.handler.codec.http2.StreamByteDistributor$StreamState v1;
int v4, v6;
io.netty.handler.codec.http2.Http2Stream v2;
boolean v5, v7;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor;
v1 := @parameter0: io.netty.handler.codec.http2.StreamByteDistributor$StreamState;
v2 = interfaceinvoke v1.<io.netty.handler.codec.http2.StreamByteDistributor$StreamState: io.netty.handler.codec.http2.Http2Stream stream()>();
v3 = specialinvoke v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State state(io.netty.handler.codec.http2.Http2Stream)>(v2);
v4 = staticinvoke <io.netty.handler.codec.http2.Http2CodecUtil: int streamableBytes(io.netty.handler.codec.http2.StreamByteDistributor$StreamState)>(v1);
v5 = interfaceinvoke v1.<io.netty.handler.codec.http2.StreamByteDistributor$StreamState: boolean hasFrame()>();
if v5 == 0 goto label1;
v6 = interfaceinvoke v1.<io.netty.handler.codec.http2.StreamByteDistributor$StreamState: int windowSize()>();
if v6 < 0 goto label1;
v7 = 1;
goto label2;
label1:
v7 = 0;
label2:
virtualinvoke v3.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void updateStreamableBytes(int,boolean)>(v4, v7);
return;
}
public void updateDependencyTree(int, int, short, boolean)
{
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v10, v12, v16, v18, v19, v24, v33, v43, v5, v7;
boolean v27, v4;
io.netty.util.internal.PriorityQueue v13, v38, v41, v8;
long v20, v23;
java.util.ArrayList v15, v28, v32, v34;
short v21, v3;
io.netty.util.collection.IntObjectMap v14, v25, v29, v35, v44, v9;
int v1, v11, v17, v2, v22, v26, v30, v31, v36, v37, v39, v40, v45, v6;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor v0;
java.lang.Object v42;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: short;
v4 := @parameter3: boolean;
v5 = specialinvoke v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State state(int)>(v1);
if v5 != null goto label02;
v6 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: int maxStateOnlySize>;
if v6 != 0 goto label01;
return;
label01:
v7 = new io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
specialinvoke v7.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void <init>(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor,int)>(v0, v1);
v5 = v7;
v8 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.util.internal.PriorityQueue stateOnlyRemovalQueue>;
interfaceinvoke v8.<io.netty.util.internal.PriorityQueue: boolean add(java.lang.Object)>(v7);
v9 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.util.collection.IntObjectMap stateOnlyMap>;
interfaceinvoke v9.<io.netty.util.collection.IntObjectMap: java.lang.Object put(int,java.lang.Object)>(v1, v7);
label02:
v10 = specialinvoke v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State state(int)>(v2);
if v10 != null goto label04;
v11 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: int maxStateOnlySize>;
if v11 != 0 goto label03;
return;
label03:
v12 = new io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
specialinvoke v12.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void <init>(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor,int)>(v0, v2);
v10 = v12;
v13 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.util.internal.PriorityQueue stateOnlyRemovalQueue>;
interfaceinvoke v13.<io.netty.util.internal.PriorityQueue: boolean add(java.lang.Object)>(v12);
v14 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.util.collection.IntObjectMap stateOnlyMap>;
interfaceinvoke v14.<io.netty.util.collection.IntObjectMap: java.lang.Object put(int,java.lang.Object)>(v2, v12);
v15 = new java.util.ArrayList;
specialinvoke v15.<java.util.ArrayList: void <init>(int)>(1);
v16 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State connectionState>;
virtualinvoke v16.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void takeChild(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State,boolean,java.util.List)>(v12, 0, v15);
virtualinvoke v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: void notifyParentChanged(java.util.List)>(v15);
label04:
v17 = v5.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int activeCountForTree>;
if v17 == 0 goto label05;
v18 = v5.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State parent>;
if v18 == null goto label05;
v19 = v5.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State parent>;
v20 = v19.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: long totalQueuedWeights>;
v21 = v5.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: short weight>;
v22 = v3 - v21;
v23 = v20 + v22;
v19.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: long totalQueuedWeights> = v23;
label05:
v5.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: short weight> = v3;
v24 = v5.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State parent>;
if v10 != v24 goto label06;
if v4 == 0 goto label13;
v25 = v10.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.util.collection.IntObjectMap children>;
v26 = interfaceinvoke v25.<io.netty.util.collection.IntObjectMap: int size()>();
if v26 == 1 goto label13;
label06:
v27 = virtualinvoke v10.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: boolean isDescendantOf(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State)>(v5);
if v27 == 0 goto label09;
v28 = new java.util.ArrayList;
if v4 == 0 goto label07;
v29 = v10.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.util.collection.IntObjectMap children>;
v30 = interfaceinvoke v29.<io.netty.util.collection.IntObjectMap: int size()>();
goto label08;
label07:
v30 = 0;
label08:
v31 = 2 + v30;
specialinvoke v28.<java.util.ArrayList: void <init>(int)>(v31);
v32 = v28;
v33 = v5.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State parent>;
virtualinvoke v33.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void takeChild(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State,boolean,java.util.List)>(v10, 0, v28);
goto label12;
label09:
v34 = new java.util.ArrayList;
if v4 == 0 goto label10;
v35 = v10.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.util.collection.IntObjectMap children>;
v36 = interfaceinvoke v35.<io.netty.util.collection.IntObjectMap: int size()>();
goto label11;
label10:
v36 = 0;
label11:
v37 = 1 + v36;
specialinvoke v34.<java.util.ArrayList: void <init>(int)>(v37);
v32 = v34;
label12:
virtualinvoke v10.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void takeChild(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State,boolean,java.util.List)>(v5, v4, v32);
virtualinvoke v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: void notifyParentChanged(java.util.List)>(v32);
label13:
v38 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.util.internal.PriorityQueue stateOnlyRemovalQueue>;
v39 = interfaceinvoke v38.<io.netty.util.internal.PriorityQueue: int size()>();
v40 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: int maxStateOnlySize>;
if v39 <= v40 goto label14;
v41 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.util.internal.PriorityQueue stateOnlyRemovalQueue>;
v42 = interfaceinvoke v41.<io.netty.util.internal.PriorityQueue: java.lang.Object poll()>();
v43 = v42.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State parent>;
virtualinvoke v43.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void removeChild(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State)>(v42);
v44 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.util.collection.IntObjectMap stateOnlyMap>;
v45 = v42.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int streamId>;
interfaceinvoke v44.<io.netty.util.collection.IntObjectMap: java.lang.Object remove(int)>(v45);
goto label13;
label14:
return;
}
public boolean distribute(int, io.netty.handler.codec.http2.StreamByteDistributor$Writer) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v11, v13, v3, v5, v7, v9;
int v1, v10, v12, v14, v4, v6, v8;
boolean v15;
io.netty.handler.codec.http2.StreamByteDistributor$Writer v2;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor v0;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor;
v1 := @parameter0: int;
v2 := @parameter1: io.netty.handler.codec.http2.StreamByteDistributor$Writer;
v3 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State connectionState>;
v4 = v3.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int activeCountForTree>;
if v4 != 0 goto label1;
return 0;
label1:
v5 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State connectionState>;
v6 = v5.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int activeCountForTree>;
v7 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State connectionState>;
v8 = specialinvoke v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: int distributeToChildren(int,io.netty.handler.codec.http2.StreamByteDistributor$Writer,io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State)>(v1, v2, v7);
v1 = v1 - v8;
v9 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State connectionState>;
v10 = v9.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int activeCountForTree>;
if v10 == 0 goto label2;
if v1 > 0 goto label1;
v11 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State connectionState>;
v12 = v11.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int activeCountForTree>;
if v6 != v12 goto label1;
label2:
v13 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State connectionState>;
v14 = v13.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int activeCountForTree>;
if v14 == 0 goto label3;
v15 = 1;
goto label4;
label3:
v15 = 0;
label4:
return v15;
}
public void allocationQuantum(int)
{
int v1;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor v0;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor;
v1 := @parameter0: int;
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositive(int,java.lang.String)>(v1, "allocationQuantum");
v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: int allocationQuantum> = v1;
return;
}
private int distribute(int, io.netty.handler.codec.http2.StreamByteDistributor$Writer, io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.handler.codec.http2.StreamByteDistributor$Writer v2;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v3;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor v0;
int v1, v5, v6, v7, v8;
boolean v4;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor;
v1 := @parameter0: int;
v2 := @parameter1: io.netty.handler.codec.http2.StreamByteDistributor$Writer;
v3 := @parameter2: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v4 = virtualinvoke v3.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: boolean isActive()>();
if v4 == 0 goto label2;
v5 = v3.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int streamableBytes>;
v6 = staticinvoke <java.lang.Math: int min(int,int)>(v1, v5);
virtualinvoke v3.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void write(int,io.netty.handler.codec.http2.StreamByteDistributor$Writer)>(v6, v2);
if v6 != 0 goto label1;
if v1 == 0 goto label1;
v7 = v3.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int streamableBytes>;
virtualinvoke v3.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void updateStreamableBytes(int,boolean)>(v7, 0);
label1:
return v6;
label2:
v8 = specialinvoke v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: int distributeToChildren(int,io.netty.handler.codec.http2.StreamByteDistributor$Writer,io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State)>(v1, v2, v3);
return v8;
}
private int distributeToChildren(int, io.netty.handler.codec.http2.StreamByteDistributor$Writer, io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v3, v5, v6;
byte v10;
boolean v7;
io.netty.handler.codec.http2.StreamByteDistributor$Writer v2;
java.lang.Throwable v31;
long v13, v15, v18, v19, v20, v22, v23, v25, v26, v28, v29, v4, v8, v9;
java.lang.AssertionError v11;
short v21;
int v1, v12, v14, v17, v24, v27, v30, v32;
java.lang.String v16;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor v0;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor;
v1 := @parameter0: int;
v2 := @parameter1: io.netty.handler.codec.http2.StreamByteDistributor$Writer;
v3 := @parameter2: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State;
v4 = v3.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: long totalQueuedWeights>;
v5 = virtualinvoke v3.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State pollPseudoTimeQueue()>();
v6 = virtualinvoke v3.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State peekPseudoTimeQueue()>();
virtualinvoke v5.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void setDistributing()>();
label1:
v7 = <io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: boolean $assertionsDisabled>;
if v7 != 0 goto label2;
if v6 == null goto label2;
v8 = v6.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: long pseudoTimeToWrite>;
v9 = v5.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: long pseudoTimeToWrite>;
v10 = v8 cmp v9;
if v10 >= 0 goto label2;
v11 = new java.lang.AssertionError;
v12 = v6.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int streamId>;
v13 = v6.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: long pseudoTimeToWrite>;
v14 = v5.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int streamId>;
v15 = v5.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: long pseudoTimeToWrite>;
v16 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,long,int,long)>(v12, v13, v14, v15) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("nextChildState[\u0001].pseudoTime(\u0001) <  childState[\u0001].pseudoTime(\u0001)");
specialinvoke v11.<java.lang.AssertionError: void <init>(java.lang.Object)>(v16);
throw v11;
label2:
if v6 != null goto label3;
v17 = v1;
goto label4;
label3:
v18 = v6.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: long pseudoTimeToWrite>;
v19 = v5.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: long pseudoTimeToWrite>;
v20 = v18 - v19;
v21 = v5.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: short weight>;
v22 = v20 * v21;
v23 = v22 / v4;
v24 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: int allocationQuantum>;
v25 = v23 + v24;
v26 = staticinvoke <java.lang.Math: long min(long,long)>(v25, 2147483647L);
v17 = staticinvoke <java.lang.Math: int min(int,int)>(v1, v26);
label4:
v27 = specialinvoke v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: int distribute(int,io.netty.handler.codec.http2.StreamByteDistributor$Writer,io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State)>(v17, v2, v5);
v28 = v3.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: long pseudoTime>;
v29 = v28 + v27;
v3.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: long pseudoTime> = v29;
virtualinvoke v5.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void updatePseudoTime(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State,int,long)>(v3, v27, v4);
label5:
virtualinvoke v5.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void unsetDistributing()>();
v30 = v5.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int activeCountForTree>;
if v30 == 0 goto label6;
virtualinvoke v3.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void offerPseudoTimeQueue(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State)>(v5);
label6:
return v27;
label7:
v31 := @caughtexception;
virtualinvoke v5.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void unsetDistributing()>();
v32 = v5.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int activeCountForTree>;
if v32 == 0 goto label8;
virtualinvoke v3.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void offerPseudoTimeQueue(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State)>(v5);
label8:
throw v31;
catch java.lang.Throwable from label1 to label5 with label7;
}
private io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State state(io.netty.handler.codec.http2.Http2Stream)
{
io.netty.handler.codec.http2.Http2Connection$PropertyKey v2;
io.netty.handler.codec.http2.Http2Stream v1;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor v0;
java.lang.Object v3;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Stream;
v2 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.handler.codec.http2.Http2Connection$PropertyKey stateKey>;
v3 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Stream: java.lang.Object getProperty(io.netty.handler.codec.http2.Http2Connection$PropertyKey)>(v2);
return v3;
}
private io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State state(int)
{
io.netty.handler.codec.http2.Http2Connection v2;
io.netty.util.collection.IntObjectMap v4;
int v1;
io.netty.handler.codec.http2.Http2Stream v3;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor v0;
java.lang.Object v5;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor;
v1 := @parameter0: int;
v2 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.handler.codec.http2.Http2Connection connection>;
v3 = interfaceinvoke v2.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Stream stream(int)>(v1);
if v3 == null goto label1;
specialinvoke v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State state(io.netty.handler.codec.http2.Http2Stream)>(v3);
goto label2;
label1:
v4 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.util.collection.IntObjectMap stateOnlyMap>;
v5 = interfaceinvoke v4.<io.netty.util.collection.IntObjectMap: java.lang.Object get(int)>(v1);
label2:
return v5;
}
boolean isChild(int, int, short)
{
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v4, v7, v8;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor v0;
short v3, v9;
io.netty.util.collection.IntObjectMap v5;
int v1, v2;
boolean v10, v6;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: short;
v4 = specialinvoke v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State state(int)>(v2);
v5 = v4.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.util.collection.IntObjectMap children>;
v6 = interfaceinvoke v5.<io.netty.util.collection.IntObjectMap: boolean containsKey(int)>(v1);
if v6 == 0 goto label1;
v7 = specialinvoke v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State state(int)>(v1);
v8 = v7.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State parent>;
if v8 != v4 goto label1;
v9 = v7.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: short weight>;
if v9 != v3 goto label1;
v10 = 1;
goto label2;
label1:
v10 = 0;
label2:
return v10;
}
int numChildren(int)
{
io.netty.util.collection.IntObjectMap v4;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v2;
int v1, v3;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor v0;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State state(int)>(v1);
if v2 != null goto label1;
v3 = 0;
goto label2;
label1:
v4 = v2.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.util.collection.IntObjectMap children>;
v3 = interfaceinvoke v4.<io.netty.util.collection.IntObjectMap: int size()>();
label2:
return v3;
}
void notifyParentChanged(java.util.List)
{
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State v11, v12, v13, v14, v15, v16, v6, v7, v8, v9;
io.netty.util.internal.PriorityQueue v5;
int v10, v17, v2, v3;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor v0;
java.util.List v1;
java.lang.Object v4;
v0 := @this: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor;
v1 := @parameter0: java.util.List;
v2 = 0;
label1:
v3 = interfaceinvoke v1.<java.util.List: int size()>();
if v2 >= v3 goto label3;
v4 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(v2);
v5 = v0.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: io.netty.util.internal.PriorityQueue stateOnlyRemovalQueue>;
v6 = v4.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$ParentChangedEvent: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State state>;
interfaceinvoke v5.<io.netty.util.internal.PriorityQueue: void priorityChanged(java.lang.Object)>(v6);
v7 = v4.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$ParentChangedEvent: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State state>;
v8 = v7.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State parent>;
if v8 == null goto label2;
v9 = v4.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$ParentChangedEvent: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State state>;
v10 = v9.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int activeCountForTree>;
if v10 == 0 goto label2;
v11 = v4.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$ParentChangedEvent: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State state>;
v12 = v11.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State parent>;
v13 = v4.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$ParentChangedEvent: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State state>;
virtualinvoke v12.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void offerAndInitializePseudoTime(io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State)>(v13);
v14 = v4.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$ParentChangedEvent: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State state>;
v15 = v14.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State parent>;
v16 = v4.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$ParentChangedEvent: io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State state>;
v17 = v16.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: int activeCountForTree>;
virtualinvoke v15.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor$State: void activeCountChangeForTree(int)>(v17);
label2:
v2 = v2 + 1;
goto label1;
label3:
return;
}
static void <clinit>()
{
int v3, v4;
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/handler/codec/http2/WeightedFairQueueByteDistributor;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: boolean $assertionsDisabled> = v2;
v3 = staticinvoke <io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>("io.netty.http2.childrenMapSize", 2);
v4 = staticinvoke <java.lang.Math: int max(int,int)>(1, v3);
<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: int INITIAL_CHILDREN_MAP_SIZE> = v4;
return;
}
}