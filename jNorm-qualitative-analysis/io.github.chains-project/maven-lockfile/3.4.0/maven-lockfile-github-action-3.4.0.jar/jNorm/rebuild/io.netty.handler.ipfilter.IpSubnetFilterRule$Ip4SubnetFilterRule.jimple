final class io.netty.handler.ipfilter.IpSubnetFilterRule$Ip4SubnetFilterRule extends java.lang.Object implements io.netty.handler.ipfilter.IpFilterRule
{
private final int networkAddress;
private final int subnetMask;
private final io.netty.handler.ipfilter.IpFilterRuleType ruleType;
private void <init>(java.net.Inet4Address, int, io.netty.handler.ipfilter.IpFilterRuleType)
{
java.lang.Object[] v5;
io.netty.handler.ipfilter.IpSubnetFilterRule$Ip4SubnetFilterRule v0;
java.lang.IllegalArgumentException v4;
java.lang.Integer v6;
java.net.Inet4Address v1;
int v10, v11, v2, v8, v9;
java.lang.String v7;
io.netty.handler.ipfilter.IpFilterRuleType v3;
v0 := @this: io.netty.handler.ipfilter.IpSubnetFilterRule$Ip4SubnetFilterRule;
v1 := @parameter0: java.net.Inet4Address;
v2 := @parameter1: int;
v3 := @parameter2: io.netty.handler.ipfilter.IpFilterRuleType;
specialinvoke v0.<java.lang.Object: void <init>()>();
if v2 < 0 goto label1;
if v2 <= 32 goto label2;
label1:
v4 = new java.lang.IllegalArgumentException;
v5 = newarray (java.lang.Object)[1];
v6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v2);
v5[0] = v6;
v7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("IPv4 requires the subnet prefix to be in range of [0,32]. The prefix was: %d", v5);
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v7);
throw v4;
label2:
v8 = staticinvoke <io.netty.handler.ipfilter.IpSubnetFilterRule$Ip4SubnetFilterRule: int prefixToSubnetMask(int)>(v2);
v0.<io.netty.handler.ipfilter.IpSubnetFilterRule$Ip4SubnetFilterRule: int subnetMask> = v8;
v9 = staticinvoke <io.netty.util.NetUtil: int ipv4AddressToInt(java.net.Inet4Address)>(v1);
v10 = v0.<io.netty.handler.ipfilter.IpSubnetFilterRule$Ip4SubnetFilterRule: int subnetMask>;
v11 = v9 & v10;
v0.<io.netty.handler.ipfilter.IpSubnetFilterRule$Ip4SubnetFilterRule: int networkAddress> = v11;
v0.<io.netty.handler.ipfilter.IpSubnetFilterRule$Ip4SubnetFilterRule: io.netty.handler.ipfilter.IpFilterRuleType ruleType> = v3;
return;
}
public boolean matches(java.net.InetSocketAddress)
{
io.netty.handler.ipfilter.IpSubnetFilterRule$Ip4SubnetFilterRule v0;
java.net.InetSocketAddress v1;
java.net.InetAddress v2;
int v4, v5, v6, v7;
boolean v3, v8;
v0 := @this: io.netty.handler.ipfilter.IpSubnetFilterRule$Ip4SubnetFilterRule;
v1 := @parameter0: java.net.InetSocketAddress;
v2 = virtualinvoke v1.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
v3 = v2 instanceof java.net.Inet4Address;
if v3 == 0 goto label3;
v4 = staticinvoke <io.netty.util.NetUtil: int ipv4AddressToInt(java.net.Inet4Address)>(v2);
v5 = v0.<io.netty.handler.ipfilter.IpSubnetFilterRule$Ip4SubnetFilterRule: int subnetMask>;
v6 = v4 & v5;
v7 = v0.<io.netty.handler.ipfilter.IpSubnetFilterRule$Ip4SubnetFilterRule: int networkAddress>;
if v6 != v7 goto label1;
v8 = 1;
goto label2;
label1:
v8 = 0;
label2:
return v8;
label3:
return 0;
}
public io.netty.handler.ipfilter.IpFilterRuleType ruleType()
{
io.netty.handler.ipfilter.IpSubnetFilterRule$Ip4SubnetFilterRule v0;
io.netty.handler.ipfilter.IpFilterRuleType v1;
v0 := @this: io.netty.handler.ipfilter.IpSubnetFilterRule$Ip4SubnetFilterRule;
v1 = v0.<io.netty.handler.ipfilter.IpSubnetFilterRule$Ip4SubnetFilterRule: io.netty.handler.ipfilter.IpFilterRuleType ruleType>;
return v1;
}
private static int prefixToSubnetMask(int)
{
int v0, v1;
long v2;
v0 := @parameter0: int;
v1 = 32 - v0;
v2 = -1L << v1;
return v2;
}
}