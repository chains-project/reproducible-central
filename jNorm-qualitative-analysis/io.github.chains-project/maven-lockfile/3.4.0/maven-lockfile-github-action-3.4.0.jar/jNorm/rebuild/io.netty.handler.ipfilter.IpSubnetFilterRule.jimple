public final class io.netty.handler.ipfilter.IpSubnetFilterRule extends java.lang.Object implements io.netty.handler.ipfilter.IpFilterRule, java.lang.Comparable
{
private final io.netty.handler.ipfilter.IpFilterRule filterRule;
private final java.lang.String ipAddress;
public void <init>(java.lang.String, int, io.netty.handler.ipfilter.IpFilterRuleType)
{
io.netty.handler.ipfilter.IpFilterRule v5;
java.lang.IllegalArgumentException v7;
java.net.UnknownHostException v6;
java.net.InetAddress v4;
io.netty.handler.ipfilter.IpSubnetFilterRule v0;
int v2;
java.lang.String v1;
io.netty.handler.ipfilter.IpFilterRuleType v3;
v0 := @this: io.netty.handler.ipfilter.IpSubnetFilterRule;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: io.netty.handler.ipfilter.IpFilterRuleType;
specialinvoke v0.<java.lang.Object: void <init>()>();
label1:
v0.<io.netty.handler.ipfilter.IpSubnetFilterRule: java.lang.String ipAddress> = v1;
v4 = staticinvoke <io.netty.util.internal.SocketUtils: java.net.InetAddress addressByName(java.lang.String)>(v1);
v5 = staticinvoke <io.netty.handler.ipfilter.IpSubnetFilterRule: io.netty.handler.ipfilter.IpFilterRule selectFilterRule(java.net.InetAddress,int,io.netty.handler.ipfilter.IpFilterRuleType)>(v4, v2, v3);
v0.<io.netty.handler.ipfilter.IpSubnetFilterRule: io.netty.handler.ipfilter.IpFilterRule filterRule> = v5;
label2:
goto label4;
label3:
v6 := @caughtexception;
v7 = new java.lang.IllegalArgumentException;
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("ipAddress", v6);
throw v7;
label4:
return;
catch java.net.UnknownHostException from label1 to label2 with label3;
}
public void <init>(java.net.InetAddress, int, io.netty.handler.ipfilter.IpFilterRuleType)
{
io.netty.handler.ipfilter.IpFilterRule v5;
java.net.InetAddress v1;
io.netty.handler.ipfilter.IpSubnetFilterRule v0;
int v2;
java.lang.String v4;
io.netty.handler.ipfilter.IpFilterRuleType v3;
v0 := @this: io.netty.handler.ipfilter.IpSubnetFilterRule;
v1 := @parameter0: java.net.InetAddress;
v2 := @parameter1: int;
v3 := @parameter2: io.netty.handler.ipfilter.IpFilterRuleType;
specialinvoke v0.<java.lang.Object: void <init>()>();
v4 = virtualinvoke v1.<java.net.InetAddress: java.lang.String getHostAddress()>();
v0.<io.netty.handler.ipfilter.IpSubnetFilterRule: java.lang.String ipAddress> = v4;
v5 = staticinvoke <io.netty.handler.ipfilter.IpSubnetFilterRule: io.netty.handler.ipfilter.IpFilterRule selectFilterRule(java.net.InetAddress,int,io.netty.handler.ipfilter.IpFilterRuleType)>(v1, v2, v3);
v0.<io.netty.handler.ipfilter.IpSubnetFilterRule: io.netty.handler.ipfilter.IpFilterRule filterRule> = v5;
return;
}
private static io.netty.handler.ipfilter.IpFilterRule selectFilterRule(java.net.InetAddress, int, io.netty.handler.ipfilter.IpFilterRuleType)
{
io.netty.handler.ipfilter.IpSubnetFilterRule$Ip4SubnetFilterRule v4;
java.lang.IllegalArgumentException v7;
java.net.InetAddress v0;
int v1;
io.netty.handler.ipfilter.IpSubnetFilterRule$Ip6SubnetFilterRule v6;
io.netty.handler.ipfilter.IpFilterRuleType v2;
boolean v3, v5;
v0 := @parameter0: java.net.InetAddress;
v1 := @parameter1: int;
v2 := @parameter2: io.netty.handler.ipfilter.IpFilterRuleType;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, "ipAddress");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "ruleType");
v3 = v0 instanceof java.net.Inet4Address;
if v3 == 0 goto label1;
v4 = new io.netty.handler.ipfilter.IpSubnetFilterRule$Ip4SubnetFilterRule;
specialinvoke v4.<io.netty.handler.ipfilter.IpSubnetFilterRule$Ip4SubnetFilterRule: void <init>(java.net.Inet4Address,int,io.netty.handler.ipfilter.IpFilterRuleType)>(v0, v1, v2);
return v4;
label1:
v5 = v0 instanceof java.net.Inet6Address;
if v5 == 0 goto label2;
v6 = new io.netty.handler.ipfilter.IpSubnetFilterRule$Ip6SubnetFilterRule;
specialinvoke v6.<io.netty.handler.ipfilter.IpSubnetFilterRule$Ip6SubnetFilterRule: void <init>(java.net.Inet6Address,int,io.netty.handler.ipfilter.IpFilterRuleType)>(v0, v1, v2);
return v6;
label2:
v7 = new java.lang.IllegalArgumentException;
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Only IPv4 and IPv6 addresses are supported");
throw v7;
}
public boolean matches(java.net.InetSocketAddress)
{
io.netty.handler.ipfilter.IpFilterRule v2;
io.netty.handler.ipfilter.IpSubnetFilterRule v0;
java.net.InetSocketAddress v1;
boolean v3;
v0 := @this: io.netty.handler.ipfilter.IpSubnetFilterRule;
v1 := @parameter0: java.net.InetSocketAddress;
v2 = v0.<io.netty.handler.ipfilter.IpSubnetFilterRule: io.netty.handler.ipfilter.IpFilterRule filterRule>;
v3 = interfaceinvoke v2.<io.netty.handler.ipfilter.IpFilterRule: boolean matches(java.net.InetSocketAddress)>(v1);
return v3;
}
public io.netty.handler.ipfilter.IpFilterRuleType ruleType()
{
io.netty.handler.ipfilter.IpFilterRule v1;
io.netty.handler.ipfilter.IpSubnetFilterRule v0;
io.netty.handler.ipfilter.IpFilterRuleType v2;
v0 := @this: io.netty.handler.ipfilter.IpSubnetFilterRule;
v1 = v0.<io.netty.handler.ipfilter.IpSubnetFilterRule: io.netty.handler.ipfilter.IpFilterRule filterRule>;
v2 = interfaceinvoke v1.<io.netty.handler.ipfilter.IpFilterRule: io.netty.handler.ipfilter.IpFilterRuleType ruleType()>();
return v2;
}
java.lang.String getIpAddress()
{
java.lang.String v1;
io.netty.handler.ipfilter.IpSubnetFilterRule v0;
v0 := @this: io.netty.handler.ipfilter.IpSubnetFilterRule;
v1 = v0.<io.netty.handler.ipfilter.IpSubnetFilterRule: java.lang.String ipAddress>;
return v1;
}
io.netty.handler.ipfilter.IpFilterRule getFilterRule()
{
io.netty.handler.ipfilter.IpFilterRule v1;
io.netty.handler.ipfilter.IpSubnetFilterRule v0;
v0 := @this: io.netty.handler.ipfilter.IpSubnetFilterRule;
v1 = v0.<io.netty.handler.ipfilter.IpSubnetFilterRule: io.netty.handler.ipfilter.IpFilterRule filterRule>;
return v1;
}
public int compareTo(io.netty.handler.ipfilter.IpSubnetFilterRule)
{
io.netty.handler.ipfilter.IpFilterRule v11, v2, v4, v6, v9;
io.netty.handler.ipfilter.IpSubnetFilterRule v0, v1;
int v13, v5, v7, v8;
java.math.BigInteger v10, v12;
boolean v3;
v0 := @this: io.netty.handler.ipfilter.IpSubnetFilterRule;
v1 := @parameter0: io.netty.handler.ipfilter.IpSubnetFilterRule;
v2 = v0.<io.netty.handler.ipfilter.IpSubnetFilterRule: io.netty.handler.ipfilter.IpFilterRule filterRule>;
v3 = v2 instanceof io.netty.handler.ipfilter.IpSubnetFilterRule$Ip4SubnetFilterRule;
if v3 == 0 goto label1;
v4 = v0.<io.netty.handler.ipfilter.IpSubnetFilterRule: io.netty.handler.ipfilter.IpFilterRule filterRule>;
v5 = v4.<io.netty.handler.ipfilter.IpSubnetFilterRule$Ip4SubnetFilterRule: int networkAddress>;
v6 = v1.<io.netty.handler.ipfilter.IpSubnetFilterRule: io.netty.handler.ipfilter.IpFilterRule filterRule>;
v7 = v6.<io.netty.handler.ipfilter.IpSubnetFilterRule$Ip4SubnetFilterRule: int networkAddress>;
v8 = staticinvoke <io.netty.handler.ipfilter.IpSubnetFilterRule: int compareInt(int,int)>(v5, v7);
return v8;
label1:
v9 = v0.<io.netty.handler.ipfilter.IpSubnetFilterRule: io.netty.handler.ipfilter.IpFilterRule filterRule>;
v10 = v9.<io.netty.handler.ipfilter.IpSubnetFilterRule$Ip6SubnetFilterRule: java.math.BigInteger networkAddress>;
v11 = v1.<io.netty.handler.ipfilter.IpSubnetFilterRule: io.netty.handler.ipfilter.IpFilterRule filterRule>;
v12 = v11.<io.netty.handler.ipfilter.IpSubnetFilterRule$Ip6SubnetFilterRule: java.math.BigInteger networkAddress>;
v13 = virtualinvoke v10.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(v12);
return v13;
}
int compareTo(java.net.InetSocketAddress)
{
io.netty.handler.ipfilter.IpFilterRule v11, v2, v4;
java.net.InetAddress v13, v6;
io.netty.handler.ipfilter.IpSubnetFilterRule v0;
int v10, v17, v5, v7, v8, v9;
java.math.BigInteger v12, v14, v15, v16;
boolean v3;
java.net.InetSocketAddress v1;
v0 := @this: io.netty.handler.ipfilter.IpSubnetFilterRule;
v1 := @parameter0: java.net.InetSocketAddress;
v2 = v0.<io.netty.handler.ipfilter.IpSubnetFilterRule: io.netty.handler.ipfilter.IpFilterRule filterRule>;
v3 = v2 instanceof io.netty.handler.ipfilter.IpSubnetFilterRule$Ip4SubnetFilterRule;
if v3 == 0 goto label1;
v4 = v0.<io.netty.handler.ipfilter.IpSubnetFilterRule: io.netty.handler.ipfilter.IpFilterRule filterRule>;
v5 = v4.<io.netty.handler.ipfilter.IpSubnetFilterRule$Ip4SubnetFilterRule: int networkAddress>;
v6 = virtualinvoke v1.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
v7 = staticinvoke <io.netty.util.NetUtil: int ipv4AddressToInt(java.net.Inet4Address)>(v6);
v8 = v4.<io.netty.handler.ipfilter.IpSubnetFilterRule$Ip4SubnetFilterRule: int subnetMask>;
v9 = v7 & v8;
v10 = staticinvoke <io.netty.handler.ipfilter.IpSubnetFilterRule: int compareInt(int,int)>(v5, v9);
return v10;
label1:
v11 = v0.<io.netty.handler.ipfilter.IpSubnetFilterRule: io.netty.handler.ipfilter.IpFilterRule filterRule>;
v12 = v11.<io.netty.handler.ipfilter.IpSubnetFilterRule$Ip6SubnetFilterRule: java.math.BigInteger networkAddress>;
v13 = virtualinvoke v1.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
v14 = staticinvoke <io.netty.handler.ipfilter.IpSubnetFilterRule$Ip6SubnetFilterRule: java.math.BigInteger ipToInt(java.net.Inet6Address)>(v13);
v15 = v11.<io.netty.handler.ipfilter.IpSubnetFilterRule$Ip6SubnetFilterRule: java.math.BigInteger networkAddress>;
v16 = virtualinvoke v14.<java.math.BigInteger: java.math.BigInteger and(java.math.BigInteger)>(v15);
v17 = virtualinvoke v12.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(v16);
return v17;
}
private static int compareInt(int, int)
{
int v0, v1;
byte v2;
v0 := @parameter0: int;
v1 := @parameter1: int;
if v0 >= v1 goto label1;
v2 = -1;
goto label3;
label1:
if v0 != v1 goto label2;
v2 = 0;
goto label3;
label2:
v2 = 1;
label3:
return v2;
}
}