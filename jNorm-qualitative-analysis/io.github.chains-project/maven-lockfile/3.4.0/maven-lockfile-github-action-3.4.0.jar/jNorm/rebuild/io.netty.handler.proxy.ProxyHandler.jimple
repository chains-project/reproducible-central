public abstract class io.netty.handler.proxy.ProxyHandler extends io.netty.channel.ChannelDuplexHandler
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private static final long DEFAULT_CONNECT_TIMEOUT_MILLIS;
static final java.lang.String AUTH_NONE;
private final java.net.SocketAddress proxyAddress;
private volatile java.net.SocketAddress destinationAddress;
private volatile long connectTimeoutMillis;
private volatile io.netty.channel.ChannelHandlerContext ctx;
private io.netty.channel.PendingWriteQueue pendingWrites;
private boolean finished;
private boolean suppressChannelReadComplete;
private boolean flushedPrematurely;
private final io.netty.handler.proxy.ProxyHandler$LazyChannelPromise connectPromise;
private io.netty.util.concurrent.Future connectTimeoutFuture;
private final io.netty.channel.ChannelFutureListener writeListener;
protected void <init>(java.net.SocketAddress)
{
io.netty.handler.proxy.ProxyHandler v0;
io.netty.handler.proxy.ProxyHandler$1 v3;
java.net.SocketAddress v1;
java.lang.Object v4;
io.netty.handler.proxy.ProxyHandler$LazyChannelPromise v2;
v0 := @this: io.netty.handler.proxy.ProxyHandler;
v1 := @parameter0: java.net.SocketAddress;
specialinvoke v0.<io.netty.channel.ChannelDuplexHandler: void <init>()>();
v0.<io.netty.handler.proxy.ProxyHandler: long connectTimeoutMillis> = 10000L;
v2 = new io.netty.handler.proxy.ProxyHandler$LazyChannelPromise;
specialinvoke v2.<io.netty.handler.proxy.ProxyHandler$LazyChannelPromise: void <init>(io.netty.handler.proxy.ProxyHandler)>(v0);
v0.<io.netty.handler.proxy.ProxyHandler: io.netty.handler.proxy.ProxyHandler$LazyChannelPromise connectPromise> = v2;
v3 = new io.netty.handler.proxy.ProxyHandler$1;
specialinvoke v3.<io.netty.handler.proxy.ProxyHandler$1: void <init>(io.netty.handler.proxy.ProxyHandler)>(v0);
v0.<io.netty.handler.proxy.ProxyHandler: io.netty.channel.ChannelFutureListener writeListener> = v3;
v4 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "proxyAddress");
v0.<io.netty.handler.proxy.ProxyHandler: java.net.SocketAddress proxyAddress> = v4;
return;
}
public abstract java.lang.String protocol();
public abstract java.lang.String authScheme();
public final java.net.SocketAddress proxyAddress()
{
io.netty.handler.proxy.ProxyHandler v0;
java.net.SocketAddress v1;
v0 := @this: io.netty.handler.proxy.ProxyHandler;
v1 = v0.<io.netty.handler.proxy.ProxyHandler: java.net.SocketAddress proxyAddress>;
return v1;
}
public final java.net.SocketAddress destinationAddress()
{
io.netty.handler.proxy.ProxyHandler v0;
java.net.SocketAddress v1;
v0 := @this: io.netty.handler.proxy.ProxyHandler;
v1 = v0.<io.netty.handler.proxy.ProxyHandler: java.net.SocketAddress destinationAddress>;
return v1;
}
public final boolean isConnected()
{
io.netty.handler.proxy.ProxyHandler v0;
boolean v2;
io.netty.handler.proxy.ProxyHandler$LazyChannelPromise v1;
v0 := @this: io.netty.handler.proxy.ProxyHandler;
v1 = v0.<io.netty.handler.proxy.ProxyHandler: io.netty.handler.proxy.ProxyHandler$LazyChannelPromise connectPromise>;
v2 = virtualinvoke v1.<io.netty.handler.proxy.ProxyHandler$LazyChannelPromise: boolean isSuccess()>();
return v2;
}
public final io.netty.util.concurrent.Future connectFuture()
{
io.netty.handler.proxy.ProxyHandler v0;
io.netty.handler.proxy.ProxyHandler$LazyChannelPromise v1;
v0 := @this: io.netty.handler.proxy.ProxyHandler;
v1 = v0.<io.netty.handler.proxy.ProxyHandler: io.netty.handler.proxy.ProxyHandler$LazyChannelPromise connectPromise>;
return v1;
}
public final long connectTimeoutMillis()
{
long v1;
io.netty.handler.proxy.ProxyHandler v0;
v0 := @this: io.netty.handler.proxy.ProxyHandler;
v1 = v0.<io.netty.handler.proxy.ProxyHandler: long connectTimeoutMillis>;
return v1;
}
public final void setConnectTimeoutMillis(long)
{
long v1;
byte v2;
io.netty.handler.proxy.ProxyHandler v0;
v0 := @this: io.netty.handler.proxy.ProxyHandler;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 > 0 goto label1;
v1 = 0L;
label1:
v0.<io.netty.handler.proxy.ProxyHandler: long connectTimeoutMillis> = v1;
return;
}
public final void handlerAdded(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.Channel v2;
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.proxy.ProxyHandler v0;
boolean v3;
v0 := @this: io.netty.handler.proxy.ProxyHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v0.<io.netty.handler.proxy.ProxyHandler: io.netty.channel.ChannelHandlerContext ctx> = v1;
virtualinvoke v0.<io.netty.handler.proxy.ProxyHandler: void addCodec(io.netty.channel.ChannelHandlerContext)>(v1);
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v3 = interfaceinvoke v2.<io.netty.channel.Channel: boolean isActive()>();
if v3 == 0 goto label1;
specialinvoke v0.<io.netty.handler.proxy.ProxyHandler: void sendInitialMessage(io.netty.channel.ChannelHandlerContext)>(v1);
label1:
return;
}
protected abstract void addCodec(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception;
protected abstract void removeEncoder(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception;
protected abstract void removeDecoder(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception;
public final void connect(io.netty.channel.ChannelHandlerContext, java.net.SocketAddress, java.net.SocketAddress, io.netty.channel.ChannelPromise) throws java.lang.Exception
{
io.netty.handler.proxy.ProxyHandler v0;
java.net.SocketAddress v2, v3, v5, v7;
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelPromise v4;
java.nio.channels.ConnectionPendingException v6;
v0 := @this: io.netty.handler.proxy.ProxyHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.net.SocketAddress;
v3 := @parameter2: java.net.SocketAddress;
v4 := @parameter3: io.netty.channel.ChannelPromise;
v5 = v0.<io.netty.handler.proxy.ProxyHandler: java.net.SocketAddress destinationAddress>;
if v5 == null goto label1;
v6 = new java.nio.channels.ConnectionPendingException;
specialinvoke v6.<java.nio.channels.ConnectionPendingException: void <init>()>();
interfaceinvoke v4.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v6);
return;
label1:
v0.<io.netty.handler.proxy.ProxyHandler: java.net.SocketAddress destinationAddress> = v2;
v7 = v0.<io.netty.handler.proxy.ProxyHandler: java.net.SocketAddress proxyAddress>;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)>(v7, v3, v4);
return;
}
public final void channelActive(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.proxy.ProxyHandler v0;
v0 := @this: io.netty.handler.proxy.ProxyHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
specialinvoke v0.<io.netty.handler.proxy.ProxyHandler: void sendInitialMessage(io.netty.channel.ChannelHandlerContext)>(v1);
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelActive()>();
return;
}
private void sendInitialMessage(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.util.concurrent.EventExecutor v4;
io.netty.handler.proxy.ProxyHandler v0;
io.netty.util.concurrent.ScheduledFuture v7;
long v2;
java.util.concurrent.TimeUnit v6;
io.netty.channel.ChannelHandlerContext v1;
byte v3;
io.netty.handler.proxy.ProxyHandler$2 v5;
java.lang.Object v8;
v0 := @this: io.netty.handler.proxy.ProxyHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = v0.<io.netty.handler.proxy.ProxyHandler: long connectTimeoutMillis>;
v3 = v2 cmp 0L;
if v3 <= 0 goto label1;
v4 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v5 = new io.netty.handler.proxy.ProxyHandler$2;
specialinvoke v5.<io.netty.handler.proxy.ProxyHandler$2: void <init>(io.netty.handler.proxy.ProxyHandler)>(v0);
v6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
v7 = interfaceinvoke v4.<io.netty.util.concurrent.EventExecutor: io.netty.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(v5, v2, v6);
v0.<io.netty.handler.proxy.ProxyHandler: io.netty.util.concurrent.Future connectTimeoutFuture> = v7;
label1:
v8 = virtualinvoke v0.<io.netty.handler.proxy.ProxyHandler: java.lang.Object newInitialMessage(io.netty.channel.ChannelHandlerContext)>(v1);
if v8 == null goto label2;
virtualinvoke v0.<io.netty.handler.proxy.ProxyHandler: void sendToProxyServer(java.lang.Object)>(v8);
label2:
staticinvoke <io.netty.handler.proxy.ProxyHandler: void readIfNeeded(io.netty.channel.ChannelHandlerContext)>(v1);
return;
}
protected abstract java.lang.Object newInitialMessage(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception;
protected final void sendToProxyServer(java.lang.Object)
{
io.netty.channel.ChannelHandlerContext v2;
io.netty.handler.proxy.ProxyHandler v0;
io.netty.channel.ChannelFutureListener v4;
java.lang.Object v1;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.handler.proxy.ProxyHandler;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.netty.handler.proxy.ProxyHandler: io.netty.channel.ChannelHandlerContext ctx>;
v3 = interfaceinvoke v2.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object)>(v1);
v4 = v0.<io.netty.handler.proxy.ProxyHandler: io.netty.channel.ChannelFutureListener writeListener>;
interfaceinvoke v3.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v4);
return;
}
public final void channelInactive(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.proxy.ProxyConnectException v3;
io.netty.handler.proxy.ProxyHandler v0;
java.lang.String v4;
boolean v2;
v0 := @this: io.netty.handler.proxy.ProxyHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = v0.<io.netty.handler.proxy.ProxyHandler: boolean finished>;
if v2 == 0 goto label1;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelInactive()>();
goto label2;
label1:
v3 = new io.netty.handler.proxy.ProxyConnectException;
v4 = virtualinvoke v0.<io.netty.handler.proxy.ProxyHandler: java.lang.String exceptionMessage(java.lang.String)>("disconnected");
specialinvoke v3.<io.netty.handler.proxy.ProxyConnectException: void <init>(java.lang.String)>(v4);
specialinvoke v0.<io.netty.handler.proxy.ProxyHandler: void setConnectFailure(java.lang.Throwable)>(v3);
label2:
return;
}
public final void exceptionCaught(io.netty.channel.ChannelHandlerContext, java.lang.Throwable) throws java.lang.Exception
{
java.lang.Throwable v2;
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.proxy.ProxyHandler v0;
boolean v3;
v0 := @this: io.netty.handler.proxy.ProxyHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Throwable;
v3 = v0.<io.netty.handler.proxy.ProxyHandler: boolean finished>;
if v3 == 0 goto label1;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireExceptionCaught(java.lang.Throwable)>(v2);
goto label2;
label1:
specialinvoke v0.<io.netty.handler.proxy.ProxyHandler: void setConnectFailure(java.lang.Throwable)>(v2);
label2:
return;
}
public final void channelRead(io.netty.channel.ChannelHandlerContext, java.lang.Object) throws java.lang.Exception
{
java.lang.Throwable v5, v6;
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.proxy.ProxyHandler v0;
java.lang.Object v2;
boolean v3, v4;
v0 := @this: io.netty.handler.proxy.ProxyHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 = v0.<io.netty.handler.proxy.ProxyHandler: boolean finished>;
if v3 == 0 goto label1;
v0.<io.netty.handler.proxy.ProxyHandler: boolean suppressChannelReadComplete> = 0;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)>(v2);
goto label7;
label1:
v0.<io.netty.handler.proxy.ProxyHandler: boolean suppressChannelReadComplete> = 1;
label2:
v4 = virtualinvoke v0.<io.netty.handler.proxy.ProxyHandler: boolean handleResponse(io.netty.channel.ChannelHandlerContext,java.lang.Object)>(v1, v2);
if v4 == 0 goto label3;
specialinvoke v0.<io.netty.handler.proxy.ProxyHandler: void setConnectSuccess()>();
label3:
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v2);
goto label7;
label4:
v5 := @caughtexception;
label5:
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v2);
specialinvoke v0.<io.netty.handler.proxy.ProxyHandler: void setConnectFailure(java.lang.Throwable)>(v5);
goto label7;
label6:
v6 := @caughtexception;
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v2);
throw v6;
label7:
return;
catch java.lang.Throwable from label2 to label3 with label4;
catch java.lang.Throwable from label4 to label5 with label6;
}
protected abstract boolean handleResponse(io.netty.channel.ChannelHandlerContext, java.lang.Object) throws java.lang.Exception;
private void setConnectSuccess()
{
io.netty.handler.proxy.ProxyHandler v0;
java.net.SocketAddress v10, v9;
io.netty.handler.proxy.ProxyConnectionEvent v6;
io.netty.channel.ChannelHandlerContext v14, v16, v5;
java.lang.String v7, v8;
boolean v11, v12, v13, v2, v3, v4;
io.netty.handler.proxy.ProxyConnectException v18;
io.netty.handler.proxy.ProxyHandler$LazyChannelPromise v1, v15;
io.netty.channel.Channel v17;
v0 := @this: io.netty.handler.proxy.ProxyHandler;
v0.<io.netty.handler.proxy.ProxyHandler: boolean finished> = 1;
specialinvoke v0.<io.netty.handler.proxy.ProxyHandler: void cancelConnectTimeoutFuture()>();
v1 = v0.<io.netty.handler.proxy.ProxyHandler: io.netty.handler.proxy.ProxyHandler$LazyChannelPromise connectPromise>;
v2 = virtualinvoke v1.<io.netty.handler.proxy.ProxyHandler$LazyChannelPromise: boolean isDone()>();
if v2 != 0 goto label3;
v3 = specialinvoke v0.<io.netty.handler.proxy.ProxyHandler: boolean safeRemoveEncoder()>();
v4 = 1 & v3;
v5 = v0.<io.netty.handler.proxy.ProxyHandler: io.netty.channel.ChannelHandlerContext ctx>;
v6 = new io.netty.handler.proxy.ProxyConnectionEvent;
v7 = virtualinvoke v0.<io.netty.handler.proxy.ProxyHandler: java.lang.String protocol()>();
v8 = virtualinvoke v0.<io.netty.handler.proxy.ProxyHandler: java.lang.String authScheme()>();
v9 = v0.<io.netty.handler.proxy.ProxyHandler: java.net.SocketAddress proxyAddress>;
v10 = v0.<io.netty.handler.proxy.ProxyHandler: java.net.SocketAddress destinationAddress>;
specialinvoke v6.<io.netty.handler.proxy.ProxyConnectionEvent: void <init>(java.lang.String,java.lang.String,java.net.SocketAddress,java.net.SocketAddress)>(v7, v8, v9, v10);
interfaceinvoke v5.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireUserEventTriggered(java.lang.Object)>(v6);
v11 = specialinvoke v0.<io.netty.handler.proxy.ProxyHandler: boolean safeRemoveDecoder()>();
v12 = v4 & v11;
if v12 == 0 goto label2;
specialinvoke v0.<io.netty.handler.proxy.ProxyHandler: void writePendingWrites()>();
v13 = v0.<io.netty.handler.proxy.ProxyHandler: boolean flushedPrematurely>;
if v13 == 0 goto label1;
v14 = v0.<io.netty.handler.proxy.ProxyHandler: io.netty.channel.ChannelHandlerContext ctx>;
interfaceinvoke v14.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext flush()>();
label1:
v15 = v0.<io.netty.handler.proxy.ProxyHandler: io.netty.handler.proxy.ProxyHandler$LazyChannelPromise connectPromise>;
v16 = v0.<io.netty.handler.proxy.ProxyHandler: io.netty.channel.ChannelHandlerContext ctx>;
v17 = interfaceinvoke v16.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
virtualinvoke v15.<io.netty.handler.proxy.ProxyHandler$LazyChannelPromise: boolean trySuccess(java.lang.Object)>(v17);
goto label3;
label2:
v18 = new io.netty.handler.proxy.ProxyConnectException;
specialinvoke v18.<io.netty.handler.proxy.ProxyConnectException: void <init>(java.lang.String)>("failed to remove all codec handlers added by the proxy handler; bug?");
specialinvoke v0.<io.netty.handler.proxy.ProxyHandler: void failPendingWritesAndClose(java.lang.Throwable)>(v18);
label3:
return;
}
private boolean safeRemoveDecoder()
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.proxy.ProxyHandler v0;
io.netty.util.internal.logging.InternalLogger v3;
java.lang.Exception v2;
v0 := @this: io.netty.handler.proxy.ProxyHandler;
label1:
v1 = v0.<io.netty.handler.proxy.ProxyHandler: io.netty.channel.ChannelHandlerContext ctx>;
virtualinvoke v0.<io.netty.handler.proxy.ProxyHandler: void removeDecoder(io.netty.channel.ChannelHandlerContext)>(v1);
label2:
return 1;
label3:
v2 := @caughtexception;
v3 = <io.netty.handler.proxy.ProxyHandler: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v3.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Throwable)>("Failed to remove proxy decoders:", v2);
return 0;
catch java.lang.Exception from label1 to label2 with label3;
}
private boolean safeRemoveEncoder()
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.proxy.ProxyHandler v0;
io.netty.util.internal.logging.InternalLogger v3;
java.lang.Exception v2;
v0 := @this: io.netty.handler.proxy.ProxyHandler;
label1:
v1 = v0.<io.netty.handler.proxy.ProxyHandler: io.netty.channel.ChannelHandlerContext ctx>;
virtualinvoke v0.<io.netty.handler.proxy.ProxyHandler: void removeEncoder(io.netty.channel.ChannelHandlerContext)>(v1);
label2:
return 1;
label3:
v2 := @caughtexception;
v3 = <io.netty.handler.proxy.ProxyHandler: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v3.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Throwable)>("Failed to remove proxy encoders:", v2);
return 0;
catch java.lang.Exception from label1 to label2 with label3;
}
private void setConnectFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
io.netty.handler.proxy.ProxyConnectException v5;
io.netty.handler.proxy.ProxyHandler v0;
io.netty.handler.proxy.ProxyHandler$LazyChannelPromise v2;
java.lang.String v6, v7;
boolean v3, v4;
v0 := @this: io.netty.handler.proxy.ProxyHandler;
v1 := @parameter0: java.lang.Throwable;
v0.<io.netty.handler.proxy.ProxyHandler: boolean finished> = 1;
specialinvoke v0.<io.netty.handler.proxy.ProxyHandler: void cancelConnectTimeoutFuture()>();
v2 = v0.<io.netty.handler.proxy.ProxyHandler: io.netty.handler.proxy.ProxyHandler$LazyChannelPromise connectPromise>;
v3 = virtualinvoke v2.<io.netty.handler.proxy.ProxyHandler$LazyChannelPromise: boolean isDone()>();
if v3 != 0 goto label2;
v4 = v1 instanceof io.netty.handler.proxy.ProxyConnectException;
if v4 != 0 goto label1;
v5 = new io.netty.handler.proxy.ProxyConnectException;
v6 = virtualinvoke v1.<java.lang.Throwable: java.lang.String toString()>();
v7 = virtualinvoke v0.<io.netty.handler.proxy.ProxyHandler: java.lang.String exceptionMessage(java.lang.String)>(v6);
specialinvoke v5.<io.netty.handler.proxy.ProxyConnectException: void <init>(java.lang.String,java.lang.Throwable)>(v7, v1);
v1 = v5;
label1:
specialinvoke v0.<io.netty.handler.proxy.ProxyHandler: boolean safeRemoveDecoder()>();
specialinvoke v0.<io.netty.handler.proxy.ProxyHandler: boolean safeRemoveEncoder()>();
specialinvoke v0.<io.netty.handler.proxy.ProxyHandler: void failPendingWritesAndClose(java.lang.Throwable)>(v1);
label2:
return;
}
private void failPendingWritesAndClose(java.lang.Throwable)
{
java.lang.Throwable v1;
io.netty.channel.ChannelHandlerContext v3, v4;
io.netty.handler.proxy.ProxyHandler v0;
io.netty.handler.proxy.ProxyHandler$LazyChannelPromise v2;
v0 := @this: io.netty.handler.proxy.ProxyHandler;
v1 := @parameter0: java.lang.Throwable;
specialinvoke v0.<io.netty.handler.proxy.ProxyHandler: void failPendingWrites(java.lang.Throwable)>(v1);
v2 = v0.<io.netty.handler.proxy.ProxyHandler: io.netty.handler.proxy.ProxyHandler$LazyChannelPromise connectPromise>;
virtualinvoke v2.<io.netty.handler.proxy.ProxyHandler$LazyChannelPromise: boolean tryFailure(java.lang.Throwable)>(v1);
v3 = v0.<io.netty.handler.proxy.ProxyHandler: io.netty.channel.ChannelHandlerContext ctx>;
interfaceinvoke v3.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireExceptionCaught(java.lang.Throwable)>(v1);
v4 = v0.<io.netty.handler.proxy.ProxyHandler: io.netty.channel.ChannelHandlerContext ctx>;
interfaceinvoke v4.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture close()>();
return;
}
private void cancelConnectTimeoutFuture()
{
io.netty.handler.proxy.ProxyHandler v0;
io.netty.util.concurrent.Future v1, v2;
v0 := @this: io.netty.handler.proxy.ProxyHandler;
v1 = v0.<io.netty.handler.proxy.ProxyHandler: io.netty.util.concurrent.Future connectTimeoutFuture>;
if v1 == null goto label1;
v2 = v0.<io.netty.handler.proxy.ProxyHandler: io.netty.util.concurrent.Future connectTimeoutFuture>;
interfaceinvoke v2.<io.netty.util.concurrent.Future: boolean cancel(boolean)>(0);
v0.<io.netty.handler.proxy.ProxyHandler: io.netty.util.concurrent.Future connectTimeoutFuture> = null;
label1:
return;
}
protected final java.lang.String exceptionMessage(java.lang.String)
{
io.netty.handler.proxy.ProxyHandler v0;
java.net.SocketAddress v6, v7;
int v2, v3;
java.lang.StringBuilder v10, v11;
java.lang.String v1, v4, v5, v9;
boolean v8;
v0 := @this: io.netty.handler.proxy.ProxyHandler;
v1 := @parameter0: java.lang.String;
if v1 != null goto label1;
v1 = "";
label1:
v2 = virtualinvoke v1.<java.lang.String: int length()>();
v3 = 128 + v2;
specialinvoke v10.<java.lang.StringBuilder: void <init>(int)>(v3);
v4 = virtualinvoke v0.<io.netty.handler.proxy.ProxyHandler: java.lang.String protocol()>();
v5 = virtualinvoke v0.<io.netty.handler.proxy.ProxyHandler: java.lang.String authScheme()>();
v6 = v0.<io.netty.handler.proxy.ProxyHandler: java.net.SocketAddress proxyAddress>;
v7 = v0.<io.netty.handler.proxy.ProxyHandler: java.net.SocketAddress destinationAddress>;
v8 = virtualinvoke v1.<java.lang.String: boolean isEmpty()>();
if v8 != 0 goto label2;
virtualinvoke v11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v1);
label2:
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.net.SocketAddress,java.net.SocketAddress)>(v4, v5, v6, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001, \u0001, \u0001 => \u0001, ");
return v9;
}
public final void channelReadComplete(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.proxy.ProxyHandler v0;
boolean v2;
v0 := @this: io.netty.handler.proxy.ProxyHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = v0.<io.netty.handler.proxy.ProxyHandler: boolean suppressChannelReadComplete>;
if v2 == 0 goto label1;
v0.<io.netty.handler.proxy.ProxyHandler: boolean suppressChannelReadComplete> = 0;
staticinvoke <io.netty.handler.proxy.ProxyHandler: void readIfNeeded(io.netty.channel.ChannelHandlerContext)>(v1);
goto label2;
label1:
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelReadComplete()>();
label2:
return;
}
public final void write(io.netty.channel.ChannelHandlerContext, java.lang.Object, io.netty.channel.ChannelPromise) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelPromise v3;
io.netty.handler.proxy.ProxyHandler v0;
java.lang.Object v2;
boolean v4;
v0 := @this: io.netty.handler.proxy.ProxyHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: io.netty.channel.ChannelPromise;
v4 = v0.<io.netty.handler.proxy.ProxyHandler: boolean finished>;
if v4 == 0 goto label1;
specialinvoke v0.<io.netty.handler.proxy.ProxyHandler: void writePendingWrites()>();
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)>(v2, v3);
goto label2;
label1:
specialinvoke v0.<io.netty.handler.proxy.ProxyHandler: void addPendingWrite(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>(v1, v2, v3);
label2:
return;
}
public final void flush(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.proxy.ProxyHandler v0;
boolean v2;
v0 := @this: io.netty.handler.proxy.ProxyHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = v0.<io.netty.handler.proxy.ProxyHandler: boolean finished>;
if v2 == 0 goto label1;
specialinvoke v0.<io.netty.handler.proxy.ProxyHandler: void writePendingWrites()>();
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext flush()>();
goto label2;
label1:
v0.<io.netty.handler.proxy.ProxyHandler: boolean flushedPrematurely> = 1;
label2:
return;
}
private static void readIfNeeded(io.netty.channel.ChannelHandlerContext)
{
io.netty.channel.Channel v1;
io.netty.channel.ChannelHandlerContext v0;
io.netty.channel.ChannelConfig v2;
boolean v3;
v0 := @parameter0: io.netty.channel.ChannelHandlerContext;
v1 = interfaceinvoke v0.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v2 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelConfig config()>();
v3 = interfaceinvoke v2.<io.netty.channel.ChannelConfig: boolean isAutoRead()>();
if v3 != 0 goto label1;
interfaceinvoke v0.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext read()>();
label1:
return;
}
private void writePendingWrites()
{
io.netty.handler.proxy.ProxyHandler v0;
io.netty.channel.PendingWriteQueue v1, v2;
v0 := @this: io.netty.handler.proxy.ProxyHandler;
v1 = v0.<io.netty.handler.proxy.ProxyHandler: io.netty.channel.PendingWriteQueue pendingWrites>;
if v1 == null goto label1;
v2 = v0.<io.netty.handler.proxy.ProxyHandler: io.netty.channel.PendingWriteQueue pendingWrites>;
virtualinvoke v2.<io.netty.channel.PendingWriteQueue: io.netty.channel.ChannelFuture removeAndWriteAll()>();
v0.<io.netty.handler.proxy.ProxyHandler: io.netty.channel.PendingWriteQueue pendingWrites> = null;
label1:
return;
}
private void failPendingWrites(java.lang.Throwable)
{
java.lang.Throwable v1;
io.netty.handler.proxy.ProxyHandler v0;
io.netty.channel.PendingWriteQueue v2, v3;
v0 := @this: io.netty.handler.proxy.ProxyHandler;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.netty.handler.proxy.ProxyHandler: io.netty.channel.PendingWriteQueue pendingWrites>;
if v2 == null goto label1;
v3 = v0.<io.netty.handler.proxy.ProxyHandler: io.netty.channel.PendingWriteQueue pendingWrites>;
virtualinvoke v3.<io.netty.channel.PendingWriteQueue: void removeAndFailAll(java.lang.Throwable)>(v1);
v0.<io.netty.handler.proxy.ProxyHandler: io.netty.channel.PendingWriteQueue pendingWrites> = null;
label1:
return;
}
private void addPendingWrite(io.netty.channel.ChannelHandlerContext, java.lang.Object, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelPromise v3;
io.netty.handler.proxy.ProxyHandler v0;
io.netty.channel.PendingWriteQueue v4, v5;
java.lang.Object v2;
v0 := @this: io.netty.handler.proxy.ProxyHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: io.netty.channel.ChannelPromise;
v4 = v0.<io.netty.handler.proxy.ProxyHandler: io.netty.channel.PendingWriteQueue pendingWrites>;
if v4 != null goto label1;
v5 = new io.netty.channel.PendingWriteQueue;
specialinvoke v5.<io.netty.channel.PendingWriteQueue: void <init>(io.netty.channel.ChannelHandlerContext)>(v1);
v4 = v5;
v0.<io.netty.handler.proxy.ProxyHandler: io.netty.channel.PendingWriteQueue pendingWrites> = v5;
label1:
virtualinvoke v4.<io.netty.channel.PendingWriteQueue: void add(java.lang.Object,io.netty.channel.ChannelPromise)>(v2, v3);
return;
}
static void <clinit>()
{
io.netty.util.internal.logging.InternalLogger v0;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/handler/proxy/ProxyHandler;");
<io.netty.handler.proxy.ProxyHandler: io.netty.util.internal.logging.InternalLogger logger> = v0;
return;
}
}