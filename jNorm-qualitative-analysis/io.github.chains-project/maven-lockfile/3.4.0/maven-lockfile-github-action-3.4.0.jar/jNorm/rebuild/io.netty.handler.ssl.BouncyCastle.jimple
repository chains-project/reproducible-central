final class io.netty.handler.ssl.BouncyCastle extends java.lang.Object
{
private static final boolean BOUNCY_CASTLE_ON_CLASSPATH;
static boolean isAvailable()
{
boolean v0;
v0 = <io.netty.handler.ssl.BouncyCastle: boolean BOUNCY_CASTLE_ON_CLASSPATH>;
return v0;
}
static boolean isInUse(javax.net.ssl.SSLEngine)
{
java.lang.Package v2;
java.lang.Class v1;
java.lang.String v3;
boolean v4;
javax.net.ssl.SSLEngine v0;
v0 := @parameter0: javax.net.ssl.SSLEngine;
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v2 = virtualinvoke v1.<java.lang.Class: java.lang.Package getPackage()>();
v3 = virtualinvoke v2.<java.lang.Package: java.lang.String getName()>();
v4 = virtualinvoke v3.<java.lang.String: boolean startsWith(java.lang.String)>("org.bouncycastle.jsse.provider");
return v4;
}
private void <init>()
{
io.netty.handler.ssl.BouncyCastle v0;
v0 := @this: io.netty.handler.ssl.BouncyCastle;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void <clinit>()
{
java.lang.Throwable v1;
boolean v0;
v0 = 0;
label1:
staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.bouncycastle.jsse.provider.BouncyCastleJsseProvider");
v0 = 1;
label2:
goto label4;
label3:
v1 := @caughtexception;
label4:
<io.netty.handler.ssl.BouncyCastle: boolean BOUNCY_CASTLE_ON_CLASSPATH> = v0;
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
}