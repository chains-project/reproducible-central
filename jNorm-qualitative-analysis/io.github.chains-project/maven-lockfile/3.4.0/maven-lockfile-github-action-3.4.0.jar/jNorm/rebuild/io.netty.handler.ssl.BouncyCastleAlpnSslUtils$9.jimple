class io.netty.handler.ssl.BouncyCastleAlpnSslUtils$9 extends java.lang.Object implements java.lang.reflect.InvocationHandler
{
final java.util.function.BiFunction val$selector;
void <init>(java.util.function.BiFunction)
{
io.netty.handler.ssl.BouncyCastleAlpnSslUtils$9 v0;
java.util.function.BiFunction v1;
v0 := @this: io.netty.handler.ssl.BouncyCastleAlpnSslUtils$9;
v1 := @parameter0: java.util.function.BiFunction;
v0.<io.netty.handler.ssl.BouncyCastleAlpnSslUtils$9: java.util.function.BiFunction val$selector> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable
{
java.lang.Object[] v13, v3;
java.util.function.BiFunction v6;
java.lang.ClassCastException v10;
java.lang.String v14, v15, v4;
java.lang.reflect.Method v2;
boolean v5;
java.lang.UnsupportedOperationException v12;
java.lang.RuntimeException v11;
io.netty.handler.ssl.BouncyCastleAlpnSslUtils$9 v0;
java.lang.Object v1, v7, v8, v9;
v0 := @this: io.netty.handler.ssl.BouncyCastleAlpnSslUtils$9;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.reflect.Method;
v3 := @parameter2: java.lang.Object[];
v4 = virtualinvoke v2.<java.lang.reflect.Method: java.lang.String getName()>();
v5 = virtualinvoke v4.<java.lang.String: boolean equals(java.lang.Object)>("select");
if v5 == 0 goto label4;
label1:
v6 = v0.<io.netty.handler.ssl.BouncyCastleAlpnSslUtils$9: java.util.function.BiFunction val$selector>;
v7 = v3[0];
v8 = v3[1];
v9 = interfaceinvoke v6.<java.util.function.BiFunction: java.lang.Object apply(java.lang.Object,java.lang.Object)>(v7, v8);
label2:
return v9;
label3:
v10 := @caughtexception;
v11 = new java.lang.RuntimeException;
specialinvoke v11.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("BCApplicationProtocolSelector select method parameter of invalid type.", v10);
throw v11;
label4:
v12 = new java.lang.UnsupportedOperationException;
v13 = newarray (java.lang.Object)[1];
v14 = virtualinvoke v2.<java.lang.reflect.Method: java.lang.String getName()>();
v13[0] = v14;
v15 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Method \'%s\' not supported.", v13);
specialinvoke v12.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(v15);
throw v12;
catch java.lang.ClassCastException from label1 to label2 with label3;
}
}