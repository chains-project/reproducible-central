final class io.netty.handler.ssl.ConscryptAlpnSslEngine$BufferAdapter extends org.conscrypt.AllocatedBuffer
{
private final io.netty.buffer.ByteBuf nettyBuffer;
private final java.nio.ByteBuffer buffer;
void <init>(io.netty.buffer.ByteBuf)
{
io.netty.buffer.ByteBuf v1;
int v2;
io.netty.handler.ssl.ConscryptAlpnSslEngine$BufferAdapter v0;
java.nio.ByteBuffer v3;
v0 := @this: io.netty.handler.ssl.ConscryptAlpnSslEngine$BufferAdapter;
v1 := @parameter0: io.netty.buffer.ByteBuf;
specialinvoke v0.<org.conscrypt.AllocatedBuffer: void <init>()>();
v0.<io.netty.handler.ssl.ConscryptAlpnSslEngine$BufferAdapter: io.netty.buffer.ByteBuf nettyBuffer> = v1;
v2 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int capacity()>();
v3 = virtualinvoke v1.<io.netty.buffer.ByteBuf: java.nio.ByteBuffer nioBuffer(int,int)>(0, v2);
v0.<io.netty.handler.ssl.ConscryptAlpnSslEngine$BufferAdapter: java.nio.ByteBuffer buffer> = v3;
return;
}
public java.nio.ByteBuffer nioBuffer()
{
io.netty.handler.ssl.ConscryptAlpnSslEngine$BufferAdapter v0;
java.nio.ByteBuffer v1;
v0 := @this: io.netty.handler.ssl.ConscryptAlpnSslEngine$BufferAdapter;
v1 = v0.<io.netty.handler.ssl.ConscryptAlpnSslEngine$BufferAdapter: java.nio.ByteBuffer buffer>;
return v1;
}
public org.conscrypt.AllocatedBuffer retain()
{
io.netty.handler.ssl.ConscryptAlpnSslEngine$BufferAdapter v0;
io.netty.buffer.ByteBuf v1;
v0 := @this: io.netty.handler.ssl.ConscryptAlpnSslEngine$BufferAdapter;
v1 = v0.<io.netty.handler.ssl.ConscryptAlpnSslEngine$BufferAdapter: io.netty.buffer.ByteBuf nettyBuffer>;
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf retain()>();
return v0;
}
public org.conscrypt.AllocatedBuffer release()
{
io.netty.handler.ssl.ConscryptAlpnSslEngine$BufferAdapter v0;
io.netty.buffer.ByteBuf v1;
v0 := @this: io.netty.handler.ssl.ConscryptAlpnSslEngine$BufferAdapter;
v1 = v0.<io.netty.handler.ssl.ConscryptAlpnSslEngine$BufferAdapter: io.netty.buffer.ByteBuf nettyBuffer>;
virtualinvoke v1.<io.netty.buffer.ByteBuf: boolean release()>();
return v0;
}
}