final class io.netty.handler.ssl.ConscryptAlpnSslEngine$ClientEngine extends io.netty.handler.ssl.ConscryptAlpnSslEngine
{
private final io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListener protocolListener;
void <init>(javax.net.ssl.SSLEngine, io.netty.buffer.ByteBufAllocator, io.netty.handler.ssl.JdkApplicationProtocolNegotiator)
{
io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListener v8;
io.netty.buffer.ByteBufAllocator v2;
io.netty.handler.ssl.JdkApplicationProtocolNegotiator v3;
io.netty.handler.ssl.ConscryptAlpnSslEngine$ClientEngine v0;
io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory v6;
io.netty.handler.ssl.ConscryptAlpnSslEngine$ClientEngine$1 v5;
javax.net.ssl.SSLEngine v1;
java.util.List v4, v7;
java.lang.Object v9;
v0 := @this: io.netty.handler.ssl.ConscryptAlpnSslEngine$ClientEngine;
v1 := @parameter0: javax.net.ssl.SSLEngine;
v2 := @parameter1: io.netty.buffer.ByteBufAllocator;
v3 := @parameter2: io.netty.handler.ssl.JdkApplicationProtocolNegotiator;
v4 = interfaceinvoke v3.<io.netty.handler.ssl.JdkApplicationProtocolNegotiator: java.util.List protocols()>();
specialinvoke v0.<io.netty.handler.ssl.ConscryptAlpnSslEngine: void <init>(javax.net.ssl.SSLEngine,io.netty.buffer.ByteBufAllocator,java.util.List)>(v1, v2, v4);
v5 = new io.netty.handler.ssl.ConscryptAlpnSslEngine$ClientEngine$1;
specialinvoke v5.<io.netty.handler.ssl.ConscryptAlpnSslEngine$ClientEngine$1: void <init>(io.netty.handler.ssl.ConscryptAlpnSslEngine$ClientEngine)>(v0);
staticinvoke <org.conscrypt.Conscrypt: void setHandshakeListener(javax.net.ssl.SSLEngine,org.conscrypt.HandshakeListener)>(v1, v5);
v6 = interfaceinvoke v3.<io.netty.handler.ssl.JdkApplicationProtocolNegotiator: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory protocolListenerFactory()>();
v7 = interfaceinvoke v3.<io.netty.handler.ssl.JdkApplicationProtocolNegotiator: java.util.List protocols()>();
v8 = interfaceinvoke v6.<io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListener newListener(javax.net.ssl.SSLEngine,java.util.List)>(v0, v7);
v9 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v8, "protocolListener");
v0.<io.netty.handler.ssl.ConscryptAlpnSslEngine$ClientEngine: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListener protocolListener> = v9;
return;
}
private void selectProtocol() throws javax.net.ssl.SSLException
{
java.lang.Throwable v4;
io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListener v3;
javax.net.ssl.SSLHandshakeException v5;
io.netty.handler.ssl.ConscryptAlpnSslEngine$ClientEngine v0;
java.lang.String v2;
javax.net.ssl.SSLEngine v1;
v0 := @this: io.netty.handler.ssl.ConscryptAlpnSslEngine$ClientEngine;
v1 = virtualinvoke v0.<io.netty.handler.ssl.ConscryptAlpnSslEngine$ClientEngine: javax.net.ssl.SSLEngine getWrappedEngine()>();
v2 = staticinvoke <org.conscrypt.Conscrypt: java.lang.String getApplicationProtocol(javax.net.ssl.SSLEngine)>(v1);
label1:
v3 = v0.<io.netty.handler.ssl.ConscryptAlpnSslEngine$ClientEngine: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListener protocolListener>;
interfaceinvoke v3.<io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListener: void selected(java.lang.String)>(v2);
label2:
goto label4;
label3:
v4 := @caughtexception;
v5 = staticinvoke <io.netty.handler.ssl.SslUtils: javax.net.ssl.SSLHandshakeException toSSLHandshakeException(java.lang.Throwable)>(v4);
throw v5;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
}