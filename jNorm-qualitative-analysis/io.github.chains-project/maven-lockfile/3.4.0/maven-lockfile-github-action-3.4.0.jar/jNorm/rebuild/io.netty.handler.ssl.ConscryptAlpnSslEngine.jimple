abstract class io.netty.handler.ssl.ConscryptAlpnSslEngine extends io.netty.handler.ssl.JdkSslEngine
{
private static final boolean USE_BUFFER_ALLOCATOR;
static io.netty.handler.ssl.ConscryptAlpnSslEngine newClientEngine(javax.net.ssl.SSLEngine, io.netty.buffer.ByteBufAllocator, io.netty.handler.ssl.JdkApplicationProtocolNegotiator)
{
io.netty.buffer.ByteBufAllocator v1;
io.netty.handler.ssl.JdkApplicationProtocolNegotiator v2;
io.netty.handler.ssl.ConscryptAlpnSslEngine$ClientEngine v3;
javax.net.ssl.SSLEngine v0;
v0 := @parameter0: javax.net.ssl.SSLEngine;
v1 := @parameter1: io.netty.buffer.ByteBufAllocator;
v2 := @parameter2: io.netty.handler.ssl.JdkApplicationProtocolNegotiator;
v3 = new io.netty.handler.ssl.ConscryptAlpnSslEngine$ClientEngine;
specialinvoke v3.<io.netty.handler.ssl.ConscryptAlpnSslEngine$ClientEngine: void <init>(javax.net.ssl.SSLEngine,io.netty.buffer.ByteBufAllocator,io.netty.handler.ssl.JdkApplicationProtocolNegotiator)>(v0, v1, v2);
return v3;
}
static io.netty.handler.ssl.ConscryptAlpnSslEngine newServerEngine(javax.net.ssl.SSLEngine, io.netty.buffer.ByteBufAllocator, io.netty.handler.ssl.JdkApplicationProtocolNegotiator)
{
io.netty.handler.ssl.ConscryptAlpnSslEngine$ServerEngine v3;
io.netty.buffer.ByteBufAllocator v1;
io.netty.handler.ssl.JdkApplicationProtocolNegotiator v2;
javax.net.ssl.SSLEngine v0;
v0 := @parameter0: javax.net.ssl.SSLEngine;
v1 := @parameter1: io.netty.buffer.ByteBufAllocator;
v2 := @parameter2: io.netty.handler.ssl.JdkApplicationProtocolNegotiator;
v3 = new io.netty.handler.ssl.ConscryptAlpnSslEngine$ServerEngine;
specialinvoke v3.<io.netty.handler.ssl.ConscryptAlpnSslEngine$ServerEngine: void <init>(javax.net.ssl.SSLEngine,io.netty.buffer.ByteBufAllocator,io.netty.handler.ssl.JdkApplicationProtocolNegotiator)>(v0, v1, v2);
return v3;
}
private void <init>(javax.net.ssl.SSLEngine, io.netty.buffer.ByteBufAllocator, java.util.List)
{
java.lang.Object[] v7;
io.netty.buffer.ByteBufAllocator v2;
java.lang.String[] v6;
javax.net.ssl.SSLEngine v1;
io.netty.handler.ssl.ConscryptAlpnSslEngine v0;
java.util.List v3;
io.netty.handler.ssl.ConscryptAlpnSslEngine$BufferAllocatorAdapter v5;
boolean v4;
v0 := @this: io.netty.handler.ssl.ConscryptAlpnSslEngine;
v1 := @parameter0: javax.net.ssl.SSLEngine;
v2 := @parameter1: io.netty.buffer.ByteBufAllocator;
v3 := @parameter2: java.util.List;
specialinvoke v0.<io.netty.handler.ssl.JdkSslEngine: void <init>(javax.net.ssl.SSLEngine)>(v1);
v4 = <io.netty.handler.ssl.ConscryptAlpnSslEngine: boolean USE_BUFFER_ALLOCATOR>;
if v4 == 0 goto label1;
v5 = new io.netty.handler.ssl.ConscryptAlpnSslEngine$BufferAllocatorAdapter;
specialinvoke v5.<io.netty.handler.ssl.ConscryptAlpnSslEngine$BufferAllocatorAdapter: void <init>(io.netty.buffer.ByteBufAllocator)>(v2);
staticinvoke <org.conscrypt.Conscrypt: void setBufferAllocator(javax.net.ssl.SSLEngine,org.conscrypt.BufferAllocator)>(v1, v5);
label1:
v6 = newarray (java.lang.String)[0];
v7 = interfaceinvoke v3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v6);
staticinvoke <org.conscrypt.Conscrypt: void setApplicationProtocols(javax.net.ssl.SSLEngine,java.lang.String[])>(v1, v7);
return;
}
final int calculateOutNetBufSize(int, int)
{
long v5, v6, v7;
javax.net.ssl.SSLEngine v3;
io.netty.handler.ssl.ConscryptAlpnSslEngine v0;
int v1, v2, v4;
v0 := @this: io.netty.handler.ssl.ConscryptAlpnSslEngine;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = virtualinvoke v0.<io.netty.handler.ssl.ConscryptAlpnSslEngine: javax.net.ssl.SSLEngine getWrappedEngine()>();
v4 = staticinvoke <org.conscrypt.Conscrypt: int maxSealOverhead(javax.net.ssl.SSLEngine)>(v3);
v5 = v4 * v2;
v6 = v1 + v5;
v7 = staticinvoke <java.lang.Math: long min(long,long)>(2147483647L, v6);
return v7;
}
final javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer[], java.nio.ByteBuffer[]) throws javax.net.ssl.SSLException
{
io.netty.handler.ssl.ConscryptAlpnSslEngine v0;
java.nio.ByteBuffer[] v1, v2;
javax.net.ssl.SSLEngineResult v4;
javax.net.ssl.SSLEngine v3;
v0 := @this: io.netty.handler.ssl.ConscryptAlpnSslEngine;
v1 := @parameter0: java.nio.ByteBuffer[];
v2 := @parameter1: java.nio.ByteBuffer[];
v3 = virtualinvoke v0.<io.netty.handler.ssl.ConscryptAlpnSslEngine: javax.net.ssl.SSLEngine getWrappedEngine()>();
v4 = staticinvoke <org.conscrypt.Conscrypt: javax.net.ssl.SSLEngineResult unwrap(javax.net.ssl.SSLEngine,java.nio.ByteBuffer[],java.nio.ByteBuffer[])>(v3, v1, v2);
return v4;
}
static void <clinit>()
{
boolean v0;
v0 = staticinvoke <io.netty.util.internal.SystemPropertyUtil: boolean getBoolean(java.lang.String,boolean)>("io.netty.handler.ssl.conscrypt.useBufferAllocator", 1);
<io.netty.handler.ssl.ConscryptAlpnSslEngine: boolean USE_BUFFER_ALLOCATOR> = v0;
return;
}
}