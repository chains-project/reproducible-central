final class io.netty.handler.ssl.DefaultOpenSslKeyMaterial extends io.netty.util.AbstractReferenceCounted implements io.netty.handler.ssl.OpenSslKeyMaterial
{
private static final io.netty.util.ResourceLeakDetector leakDetector;
private final io.netty.util.ResourceLeakTracker leak;
private final java.security.cert.X509Certificate[] x509CertificateChain;
private long chain;
private long privateKey;
static final boolean $assertionsDisabled;
void <init>(long, long, java.security.cert.X509Certificate[])
{
io.netty.handler.ssl.DefaultOpenSslKeyMaterial v0;
long v1, v2;
io.netty.util.ResourceLeakDetector v4;
java.security.cert.X509Certificate[] v3;
io.netty.util.ResourceLeakTracker v5;
v0 := @this: io.netty.handler.ssl.DefaultOpenSslKeyMaterial;
v1 := @parameter0: long;
v2 := @parameter1: long;
v3 := @parameter2: java.security.cert.X509Certificate[];
specialinvoke v0.<io.netty.util.AbstractReferenceCounted: void <init>()>();
v0.<io.netty.handler.ssl.DefaultOpenSslKeyMaterial: long chain> = v1;
v0.<io.netty.handler.ssl.DefaultOpenSslKeyMaterial: long privateKey> = v2;
v0.<io.netty.handler.ssl.DefaultOpenSslKeyMaterial: java.security.cert.X509Certificate[] x509CertificateChain> = v3;
v4 = <io.netty.handler.ssl.DefaultOpenSslKeyMaterial: io.netty.util.ResourceLeakDetector leakDetector>;
v5 = virtualinvoke v4.<io.netty.util.ResourceLeakDetector: io.netty.util.ResourceLeakTracker track(java.lang.Object)>(v0);
v0.<io.netty.handler.ssl.DefaultOpenSslKeyMaterial: io.netty.util.ResourceLeakTracker leak> = v5;
return;
}
public java.security.cert.X509Certificate[] certificateChain()
{
java.lang.Object v2;
java.security.cert.X509Certificate[] v1;
io.netty.handler.ssl.DefaultOpenSslKeyMaterial v0;
v0 := @this: io.netty.handler.ssl.DefaultOpenSslKeyMaterial;
v1 = v0.<io.netty.handler.ssl.DefaultOpenSslKeyMaterial: java.security.cert.X509Certificate[] x509CertificateChain>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.Object clone()>();
return v2;
}
public long certificateChainAddress()
{
io.netty.util.IllegalReferenceCountException v2;
io.netty.handler.ssl.DefaultOpenSslKeyMaterial v0;
int v1;
long v3;
v0 := @this: io.netty.handler.ssl.DefaultOpenSslKeyMaterial;
v1 = virtualinvoke v0.<io.netty.handler.ssl.DefaultOpenSslKeyMaterial: int refCnt()>();
if v1 > 0 goto label1;
v2 = new io.netty.util.IllegalReferenceCountException;
specialinvoke v2.<io.netty.util.IllegalReferenceCountException: void <init>()>();
throw v2;
label1:
v3 = v0.<io.netty.handler.ssl.DefaultOpenSslKeyMaterial: long chain>;
return v3;
}
public long privateKeyAddress()
{
io.netty.util.IllegalReferenceCountException v2;
io.netty.handler.ssl.DefaultOpenSslKeyMaterial v0;
int v1;
long v3;
v0 := @this: io.netty.handler.ssl.DefaultOpenSslKeyMaterial;
v1 = virtualinvoke v0.<io.netty.handler.ssl.DefaultOpenSslKeyMaterial: int refCnt()>();
if v1 > 0 goto label1;
v2 = new io.netty.util.IllegalReferenceCountException;
specialinvoke v2.<io.netty.util.IllegalReferenceCountException: void <init>()>();
throw v2;
label1:
v3 = v0.<io.netty.handler.ssl.DefaultOpenSslKeyMaterial: long privateKey>;
return v3;
}
protected void deallocate()
{
io.netty.handler.ssl.DefaultOpenSslKeyMaterial v0;
long v1, v2;
java.lang.AssertionError v7;
io.netty.util.ResourceLeakTracker v3, v4;
boolean v5, v6;
v0 := @this: io.netty.handler.ssl.DefaultOpenSslKeyMaterial;
v1 = v0.<io.netty.handler.ssl.DefaultOpenSslKeyMaterial: long chain>;
staticinvoke <io.netty.internal.tcnative.SSL: void freeX509Chain(long)>(v1);
v0.<io.netty.handler.ssl.DefaultOpenSslKeyMaterial: long chain> = 0L;
v2 = v0.<io.netty.handler.ssl.DefaultOpenSslKeyMaterial: long privateKey>;
staticinvoke <io.netty.internal.tcnative.SSL: void freePrivateKey(long)>(v2);
v0.<io.netty.handler.ssl.DefaultOpenSslKeyMaterial: long privateKey> = 0L;
v3 = v0.<io.netty.handler.ssl.DefaultOpenSslKeyMaterial: io.netty.util.ResourceLeakTracker leak>;
if v3 == null goto label1;
v4 = v0.<io.netty.handler.ssl.DefaultOpenSslKeyMaterial: io.netty.util.ResourceLeakTracker leak>;
v5 = interfaceinvoke v4.<io.netty.util.ResourceLeakTracker: boolean close(java.lang.Object)>(v0);
v6 = <io.netty.handler.ssl.DefaultOpenSslKeyMaterial: boolean $assertionsDisabled>;
if v6 != 0 goto label1;
if v5 != 0 goto label1;
v7 = new java.lang.AssertionError;
specialinvoke v7.<java.lang.AssertionError: void <init>()>();
throw v7;
label1:
return;
}
public io.netty.handler.ssl.DefaultOpenSslKeyMaterial retain()
{
io.netty.handler.ssl.DefaultOpenSslKeyMaterial v0;
io.netty.util.ResourceLeakTracker v1, v2;
v0 := @this: io.netty.handler.ssl.DefaultOpenSslKeyMaterial;
v1 = v0.<io.netty.handler.ssl.DefaultOpenSslKeyMaterial: io.netty.util.ResourceLeakTracker leak>;
if v1 == null goto label1;
v2 = v0.<io.netty.handler.ssl.DefaultOpenSslKeyMaterial: io.netty.util.ResourceLeakTracker leak>;
interfaceinvoke v2.<io.netty.util.ResourceLeakTracker: void record()>();
label1:
specialinvoke v0.<io.netty.util.AbstractReferenceCounted: io.netty.util.ReferenceCounted retain()>();
return v0;
}
public io.netty.handler.ssl.DefaultOpenSslKeyMaterial retain(int)
{
io.netty.handler.ssl.DefaultOpenSslKeyMaterial v0;
int v1;
io.netty.util.ResourceLeakTracker v2, v3;
v0 := @this: io.netty.handler.ssl.DefaultOpenSslKeyMaterial;
v1 := @parameter0: int;
v2 = v0.<io.netty.handler.ssl.DefaultOpenSslKeyMaterial: io.netty.util.ResourceLeakTracker leak>;
if v2 == null goto label1;
v3 = v0.<io.netty.handler.ssl.DefaultOpenSslKeyMaterial: io.netty.util.ResourceLeakTracker leak>;
interfaceinvoke v3.<io.netty.util.ResourceLeakTracker: void record()>();
label1:
specialinvoke v0.<io.netty.util.AbstractReferenceCounted: io.netty.util.ReferenceCounted retain(int)>(v1);
return v0;
}
public io.netty.handler.ssl.DefaultOpenSslKeyMaterial touch()
{
io.netty.handler.ssl.DefaultOpenSslKeyMaterial v0;
io.netty.util.ResourceLeakTracker v1, v2;
v0 := @this: io.netty.handler.ssl.DefaultOpenSslKeyMaterial;
v1 = v0.<io.netty.handler.ssl.DefaultOpenSslKeyMaterial: io.netty.util.ResourceLeakTracker leak>;
if v1 == null goto label1;
v2 = v0.<io.netty.handler.ssl.DefaultOpenSslKeyMaterial: io.netty.util.ResourceLeakTracker leak>;
interfaceinvoke v2.<io.netty.util.ResourceLeakTracker: void record()>();
label1:
specialinvoke v0.<io.netty.util.AbstractReferenceCounted: io.netty.util.ReferenceCounted touch()>();
return v0;
}
public io.netty.handler.ssl.DefaultOpenSslKeyMaterial touch(java.lang.Object)
{
io.netty.handler.ssl.DefaultOpenSslKeyMaterial v0;
java.lang.Object v1;
io.netty.util.ResourceLeakTracker v2, v3;
v0 := @this: io.netty.handler.ssl.DefaultOpenSslKeyMaterial;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.netty.handler.ssl.DefaultOpenSslKeyMaterial: io.netty.util.ResourceLeakTracker leak>;
if v2 == null goto label1;
v3 = v0.<io.netty.handler.ssl.DefaultOpenSslKeyMaterial: io.netty.util.ResourceLeakTracker leak>;
interfaceinvoke v3.<io.netty.util.ResourceLeakTracker: void record(java.lang.Object)>(v1);
label1:
return v0;
}
public boolean release()
{
io.netty.handler.ssl.DefaultOpenSslKeyMaterial v0;
io.netty.util.ResourceLeakTracker v1, v2;
boolean v3;
v0 := @this: io.netty.handler.ssl.DefaultOpenSslKeyMaterial;
v1 = v0.<io.netty.handler.ssl.DefaultOpenSslKeyMaterial: io.netty.util.ResourceLeakTracker leak>;
if v1 == null goto label1;
v2 = v0.<io.netty.handler.ssl.DefaultOpenSslKeyMaterial: io.netty.util.ResourceLeakTracker leak>;
interfaceinvoke v2.<io.netty.util.ResourceLeakTracker: void record()>();
label1:
v3 = specialinvoke v0.<io.netty.util.AbstractReferenceCounted: boolean release()>();
return v3;
}
public boolean release(int)
{
io.netty.handler.ssl.DefaultOpenSslKeyMaterial v0;
int v1;
io.netty.util.ResourceLeakTracker v2, v3;
boolean v4;
v0 := @this: io.netty.handler.ssl.DefaultOpenSslKeyMaterial;
v1 := @parameter0: int;
v2 = v0.<io.netty.handler.ssl.DefaultOpenSslKeyMaterial: io.netty.util.ResourceLeakTracker leak>;
if v2 == null goto label1;
v3 = v0.<io.netty.handler.ssl.DefaultOpenSslKeyMaterial: io.netty.util.ResourceLeakTracker leak>;
interfaceinvoke v3.<io.netty.util.ResourceLeakTracker: void record()>();
label1:
v4 = specialinvoke v0.<io.netty.util.AbstractReferenceCounted: boolean release(int)>(v1);
return v4;
}
static void <clinit>()
{
io.netty.util.ResourceLeakDetectorFactory v3;
java.lang.Class v0;
io.netty.util.ResourceLeakDetector v4;
boolean v1, v2;
v0 = class "Lio/netty/handler/ssl/DefaultOpenSslKeyMaterial;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.handler.ssl.DefaultOpenSslKeyMaterial: boolean $assertionsDisabled> = v2;
v3 = staticinvoke <io.netty.util.ResourceLeakDetectorFactory: io.netty.util.ResourceLeakDetectorFactory instance()>();
v4 = virtualinvoke v3.<io.netty.util.ResourceLeakDetectorFactory: io.netty.util.ResourceLeakDetector newResourceLeakDetector(java.lang.Class)>(class "Lio/netty/handler/ssl/DefaultOpenSslKeyMaterial;");
<io.netty.handler.ssl.DefaultOpenSslKeyMaterial: io.netty.util.ResourceLeakDetector leakDetector> = v4;
return;
}
}