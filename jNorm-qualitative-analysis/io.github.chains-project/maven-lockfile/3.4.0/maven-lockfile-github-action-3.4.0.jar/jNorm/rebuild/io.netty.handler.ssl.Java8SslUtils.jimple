final class io.netty.handler.ssl.Java8SslUtils extends java.lang.Object
{
private void <init>()
{
io.netty.handler.ssl.Java8SslUtils v0;
v0 := @this: io.netty.handler.ssl.Java8SslUtils;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static java.util.List getSniHostNames(javax.net.ssl.SSLParameters)
{
javax.net.ssl.SNIServerName v15;
javax.net.ssl.SSLParameters v0;
java.util.ArrayList v4;
int v5;
java.lang.String v10, v13, v14;
boolean v2, v7, v9;
java.util.Iterator v6;
java.lang.IllegalArgumentException v11;
java.util.List v1, v3;
java.lang.Class v12;
java.lang.Object v8;
v0 := @parameter0: javax.net.ssl.SSLParameters;
v1 = virtualinvoke v0.<javax.net.ssl.SSLParameters: java.util.List getServerNames()>();
if v1 == null goto label1;
v2 = interfaceinvoke v1.<java.util.List: boolean isEmpty()>();
if v2 == 0 goto label2;
label1:
v3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v3;
label2:
v4 = new java.util.ArrayList;
v5 = interfaceinvoke v1.<java.util.List: int size()>();
specialinvoke v4.<java.util.ArrayList: void <init>(int)>(v5);
v6 = interfaceinvoke v1.<java.util.List: java.util.Iterator iterator()>();
label3:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label5;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = v8 instanceof javax.net.ssl.SNIHostName;
if v9 == 0 goto label4;
v10 = virtualinvoke v15.<javax.net.ssl.SNIHostName: java.lang.String getAsciiName()>();
interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(v10);
goto label3;
label4:
v11 = new java.lang.IllegalArgumentException;
v12 = class "Ljavax/net/ssl/SNIHostName;";
v13 = virtualinvoke v12.<java.lang.Class: java.lang.String getName()>();
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,javax.net.ssl.SNIServerName)>(v13, v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Only \u0001 instances are supported, but found: \u0001");
specialinvoke v11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v14);
throw v11;
label5:
return v4;
}
static void setSniHostNames(javax.net.ssl.SSLParameters, java.util.List)
{
java.util.List v1, v2;
javax.net.ssl.SSLParameters v0;
v0 := @parameter0: javax.net.ssl.SSLParameters;
v1 := @parameter1: java.util.List;
v2 = staticinvoke <io.netty.handler.ssl.Java8SslUtils: java.util.List getSniHostNames(java.util.List)>(v1);
virtualinvoke v0.<javax.net.ssl.SSLParameters: void setServerNames(java.util.List)>(v2);
return;
}
static boolean isValidHostNameForSNI(java.lang.String)
{
java.lang.String v0;
javax.net.ssl.SNIHostName v1;
java.lang.IllegalArgumentException v2;
v0 := @parameter0: java.lang.String;
label1:
v1 = new javax.net.ssl.SNIHostName;
specialinvoke v1.<javax.net.ssl.SNIHostName: void <init>(java.lang.String)>(v0);
label2:
return 1;
label3:
v2 := @caughtexception;
return 0;
catch java.lang.IllegalArgumentException from label1 to label2 with label3;
}
static java.util.List getSniHostNames(java.util.List)
{
byte[] v10;
javax.net.ssl.SNIHostName v8;
java.util.Iterator v5;
java.util.ArrayList v3;
java.util.List v0, v2;
java.nio.charset.Charset v9;
int v4;
java.lang.Object v7;
boolean v1, v6;
v0 := @parameter0: java.util.List;
if v0 == null goto label1;
v1 = interfaceinvoke v0.<java.util.List: boolean isEmpty()>();
if v1 == 0 goto label2;
label1:
v2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v2;
label2:
v3 = new java.util.ArrayList;
v4 = interfaceinvoke v0.<java.util.List: int size()>();
specialinvoke v3.<java.util.ArrayList: void <init>(int)>(v4);
v5 = interfaceinvoke v0.<java.util.List: java.util.Iterator iterator()>();
label3:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label4;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = new javax.net.ssl.SNIHostName;
v9 = <io.netty.util.CharsetUtil: java.nio.charset.Charset UTF_8>;
v10 = virtualinvoke v7.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(v9);
specialinvoke v8.<javax.net.ssl.SNIHostName: void <init>(byte[])>(v10);
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v8);
goto label3;
label4:
return v3;
}
static java.util.List getSniHostName(byte[])
{
byte[] v0;
java.util.List v2, v4;
javax.net.ssl.SNIHostName v3;
int v1;
v0 := @parameter0: byte[];
if v0 == null goto label1;
v1 = lengthof v0;
if v1 != 0 goto label2;
label1:
v2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v2;
label2:
v3 = new javax.net.ssl.SNIHostName;
specialinvoke v3.<javax.net.ssl.SNIHostName: void <init>(byte[])>(v0);
v4 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(v3);
return v4;
}
static boolean getUseCipherSuitesOrder(javax.net.ssl.SSLParameters)
{
boolean v1;
javax.net.ssl.SSLParameters v0;
v0 := @parameter0: javax.net.ssl.SSLParameters;
v1 = virtualinvoke v0.<javax.net.ssl.SSLParameters: boolean getUseCipherSuitesOrder()>();
return v1;
}
static void setUseCipherSuitesOrder(javax.net.ssl.SSLParameters, boolean)
{
boolean v1;
javax.net.ssl.SSLParameters v0;
v0 := @parameter0: javax.net.ssl.SSLParameters;
v1 := @parameter1: boolean;
virtualinvoke v0.<javax.net.ssl.SSLParameters: void setUseCipherSuitesOrder(boolean)>(v1);
return;
}
static void setSNIMatchers(javax.net.ssl.SSLParameters, java.util.Collection)
{
java.util.Collection v1;
javax.net.ssl.SSLParameters v0;
v0 := @parameter0: javax.net.ssl.SSLParameters;
v1 := @parameter1: java.util.Collection;
virtualinvoke v0.<javax.net.ssl.SSLParameters: void setSNIMatchers(java.util.Collection)>(v1);
return;
}
static boolean checkSniHostnameMatch(java.util.Collection, byte[])
{
byte[] v1;
javax.net.ssl.SNIHostName v3;
java.util.Iterator v4;
java.util.Collection v0;
int v7;
java.lang.Object v6;
boolean v2, v5, v8;
v0 := @parameter0: java.util.Collection;
v1 := @parameter1: byte[];
if v0 == null goto label3;
v2 = interfaceinvoke v0.<java.util.Collection: boolean isEmpty()>();
if v2 != 0 goto label3;
v3 = new javax.net.ssl.SNIHostName;
specialinvoke v3.<javax.net.ssl.SNIHostName: void <init>(byte[])>(v1);
v4 = interfaceinvoke v0.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = virtualinvoke v6.<javax.net.ssl.SNIMatcher: int getType()>();
if v7 != 0 goto label1;
v8 = virtualinvoke v6.<javax.net.ssl.SNIMatcher: boolean matches(javax.net.ssl.SNIServerName)>(v3);
if v8 == 0 goto label1;
return 1;
label2:
return 0;
label3:
return 1;
}
}