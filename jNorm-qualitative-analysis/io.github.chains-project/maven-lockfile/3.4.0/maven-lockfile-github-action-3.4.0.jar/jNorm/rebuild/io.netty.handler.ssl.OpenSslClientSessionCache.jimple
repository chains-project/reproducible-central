final class io.netty.handler.ssl.OpenSslClientSessionCache extends io.netty.handler.ssl.OpenSslSessionCache
{
private final java.util.Map sessions;
static final boolean $assertionsDisabled;
void <init>(io.netty.handler.ssl.OpenSslEngineMap)
{
java.util.HashMap v2;
io.netty.handler.ssl.OpenSslClientSessionCache v0;
io.netty.handler.ssl.OpenSslEngineMap v1;
v0 := @this: io.netty.handler.ssl.OpenSslClientSessionCache;
v1 := @parameter0: io.netty.handler.ssl.OpenSslEngineMap;
specialinvoke v0.<io.netty.handler.ssl.OpenSslSessionCache: void <init>(io.netty.handler.ssl.OpenSslEngineMap)>(v1);
v2 = new java.util.HashMap;
specialinvoke v2.<java.util.HashMap: void <init>()>();
v0.<io.netty.handler.ssl.OpenSslClientSessionCache: java.util.Map sessions> = v2;
return;
}
protected boolean sessionCreated(io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession)
{
io.netty.handler.ssl.OpenSslClientSessionCache$HostPort v7;
java.lang.AssertionError v4;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v1;
io.netty.handler.ssl.OpenSslClientSessionCache v0;
java.util.Map v10, v8;
int v6;
java.lang.String v5;
boolean v2, v3, v9;
v0 := @this: io.netty.handler.ssl.OpenSslClientSessionCache;
v1 := @parameter0: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v2 = <io.netty.handler.ssl.OpenSslClientSessionCache: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
v3 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>(v0);
if v3 != 0 goto label1;
v4 = new java.lang.AssertionError;
specialinvoke v4.<java.lang.AssertionError: void <init>()>();
throw v4;
label1:
v5 = virtualinvoke v1.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: java.lang.String getPeerHost()>();
v6 = virtualinvoke v1.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: int getPeerPort()>();
v7 = staticinvoke <io.netty.handler.ssl.OpenSslClientSessionCache: io.netty.handler.ssl.OpenSslClientSessionCache$HostPort keyFor(java.lang.String,int)>(v5, v6);
if v7 == null goto label2;
v8 = v0.<io.netty.handler.ssl.OpenSslClientSessionCache: java.util.Map sessions>;
v9 = interfaceinvoke v8.<java.util.Map: boolean containsKey(java.lang.Object)>(v7);
if v9 == 0 goto label3;
label2:
return 0;
label3:
v10 = v0.<io.netty.handler.ssl.OpenSslClientSessionCache: java.util.Map sessions>;
interfaceinvoke v10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v7, v1);
return 1;
}
protected void sessionRemoved(io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession)
{
io.netty.handler.ssl.OpenSslClientSessionCache$HostPort v7;
java.lang.AssertionError v4;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v1;
io.netty.handler.ssl.OpenSslClientSessionCache v0;
java.util.Map v8;
int v6;
java.lang.String v5;
boolean v2, v3;
v0 := @this: io.netty.handler.ssl.OpenSslClientSessionCache;
v1 := @parameter0: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v2 = <io.netty.handler.ssl.OpenSslClientSessionCache: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
v3 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>(v0);
if v3 != 0 goto label1;
v4 = new java.lang.AssertionError;
specialinvoke v4.<java.lang.AssertionError: void <init>()>();
throw v4;
label1:
v5 = virtualinvoke v1.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: java.lang.String getPeerHost()>();
v6 = virtualinvoke v1.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: int getPeerPort()>();
v7 = staticinvoke <io.netty.handler.ssl.OpenSslClientSessionCache: io.netty.handler.ssl.OpenSslClientSessionCache$HostPort keyFor(java.lang.String,int)>(v5, v6);
if v7 != null goto label2;
return;
label2:
v8 = v0.<io.netty.handler.ssl.OpenSslClientSessionCache: java.util.Map sessions>;
interfaceinvoke v8.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v7);
return;
}
void setSession(long, java.lang.String, int)
{
java.lang.Throwable v11;
io.netty.handler.ssl.OpenSslClientSessionCache$HostPort v4;
long v1, v9;
io.netty.handler.ssl.OpenSslSessionId v8;
io.netty.handler.ssl.OpenSslClientSessionCache v0;
java.util.Map v5;
int v3;
java.lang.Object v6;
java.lang.String v2;
boolean v10, v12, v7;
v0 := @this: io.netty.handler.ssl.OpenSslClientSessionCache;
v1 := @parameter0: long;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: int;
v4 = staticinvoke <io.netty.handler.ssl.OpenSslClientSessionCache: io.netty.handler.ssl.OpenSslClientSessionCache$HostPort keyFor(java.lang.String,int)>(v2, v3);
if v4 != null goto label01;
return;
label01:
entermonitor v0;
label02:
v5 = v0.<io.netty.handler.ssl.OpenSslClientSessionCache: java.util.Map sessions>;
v6 = interfaceinvoke v5.<java.util.Map: java.lang.Object get(java.lang.Object)>(v4);
if v6 != null goto label04;
exitmonitor v0;
label03:
return;
label04:
v7 = virtualinvoke v6.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: boolean isValid()>();
if v7 != 0 goto label06;
v8 = virtualinvoke v6.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: io.netty.handler.ssl.OpenSslSessionId sessionId()>();
virtualinvoke v0.<io.netty.handler.ssl.OpenSslClientSessionCache: void removeSessionWithId(io.netty.handler.ssl.OpenSslSessionId)>(v8);
exitmonitor v0;
label05:
return;
label06:
v9 = virtualinvoke v6.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: long session()>();
v10 = staticinvoke <io.netty.internal.tcnative.SSL: boolean setSession(long,long)>(v1, v9);
exitmonitor v0;
label07:
goto label09;
label08:
v11 := @caughtexception;
exitmonitor v0;
throw v11;
label09:
if v10 == 0 goto label11;
v12 = virtualinvoke v6.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: boolean shouldBeSingleUse()>();
if v12 == 0 goto label10;
virtualinvoke v6.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: void invalidate()>();
label10:
virtualinvoke v6.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: void updateLastAccessedTime()>();
label11:
return;
catch java.lang.Throwable from label02 to label03 with label08;
catch java.lang.Throwable from label04 to label05 with label08;
catch java.lang.Throwable from label06 to label07 with label08;
}
private static io.netty.handler.ssl.OpenSslClientSessionCache$HostPort keyFor(java.lang.String, int)
{
int v1;
io.netty.handler.ssl.OpenSslClientSessionCache$HostPort v2;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
if v0 != null goto label1;
if v1 >= 1 goto label1;
return null;
label1:
v2 = new io.netty.handler.ssl.OpenSslClientSessionCache$HostPort;
specialinvoke v2.<io.netty.handler.ssl.OpenSslClientSessionCache$HostPort: void <init>(java.lang.String,int)>(v0, v1);
return v2;
}
synchronized void clear()
{
io.netty.handler.ssl.OpenSslClientSessionCache v0;
java.util.Map v1;
v0 := @this: io.netty.handler.ssl.OpenSslClientSessionCache;
specialinvoke v0.<io.netty.handler.ssl.OpenSslSessionCache: void clear()>();
v1 = v0.<io.netty.handler.ssl.OpenSslClientSessionCache: java.util.Map sessions>;
interfaceinvoke v1.<java.util.Map: void clear()>();
return;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/handler/ssl/OpenSslClientSessionCache;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.handler.ssl.OpenSslClientSessionCache: boolean $assertionsDisabled> = v2;
return;
}
}