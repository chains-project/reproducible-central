public abstract class io.netty.handler.ssl.OpenSslContext extends io.netty.handler.ssl.ReferenceCountedOpenSslContext
{
transient void <init>(java.lang.Iterable, io.netty.handler.ssl.CipherSuiteFilter, io.netty.handler.ssl.ApplicationProtocolConfig, int, java.security.cert.Certificate[], io.netty.handler.ssl.ClientAuth, java.lang.String[], boolean, boolean, java.util.Map$Entry[]) throws javax.net.ssl.SSLException
{
io.netty.handler.ssl.OpenSslContext v0;
java.lang.String[] v7;
java.lang.Iterable v1;
io.netty.handler.ssl.CipherSuiteFilter v2;
io.netty.handler.ssl.ClientAuth v6;
int v4;
io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator v11;
java.security.cert.Certificate[] v5;
java.util.Map$Entry[] v10;
io.netty.handler.ssl.ApplicationProtocolConfig v3;
boolean v8, v9;
v0 := @this: io.netty.handler.ssl.OpenSslContext;
v1 := @parameter0: java.lang.Iterable;
v2 := @parameter1: io.netty.handler.ssl.CipherSuiteFilter;
v3 := @parameter2: io.netty.handler.ssl.ApplicationProtocolConfig;
v4 := @parameter3: int;
v5 := @parameter4: java.security.cert.Certificate[];
v6 := @parameter5: io.netty.handler.ssl.ClientAuth;
v7 := @parameter6: java.lang.String[];
v8 := @parameter7: boolean;
v9 := @parameter8: boolean;
v10 := @parameter9: java.util.Map$Entry[];
v11 = staticinvoke <io.netty.handler.ssl.OpenSslContext: io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator toNegotiator(io.netty.handler.ssl.ApplicationProtocolConfig)>(v3);
specialinvoke v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext: void <init>(java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,int,java.security.cert.Certificate[],io.netty.handler.ssl.ClientAuth,java.lang.String[],boolean,boolean,boolean,java.util.Map$Entry[])>(v1, v2, v11, v4, v5, v6, v7, v8, v9, 0, v10);
return;
}
transient void <init>(java.lang.Iterable, io.netty.handler.ssl.CipherSuiteFilter, io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator, int, java.security.cert.Certificate[], io.netty.handler.ssl.ClientAuth, java.lang.String[], boolean, boolean, java.util.Map$Entry[]) throws javax.net.ssl.SSLException
{
io.netty.handler.ssl.OpenSslContext v0;
java.lang.String[] v7;
java.lang.Iterable v1;
io.netty.handler.ssl.CipherSuiteFilter v2;
io.netty.handler.ssl.ClientAuth v6;
int v4;
io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator v3;
java.security.cert.Certificate[] v5;
java.util.Map$Entry[] v10;
boolean v8, v9;
v0 := @this: io.netty.handler.ssl.OpenSslContext;
v1 := @parameter0: java.lang.Iterable;
v2 := @parameter1: io.netty.handler.ssl.CipherSuiteFilter;
v3 := @parameter2: io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator;
v4 := @parameter3: int;
v5 := @parameter4: java.security.cert.Certificate[];
v6 := @parameter5: io.netty.handler.ssl.ClientAuth;
v7 := @parameter6: java.lang.String[];
v8 := @parameter7: boolean;
v9 := @parameter8: boolean;
v10 := @parameter9: java.util.Map$Entry[];
specialinvoke v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext: void <init>(java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,int,java.security.cert.Certificate[],io.netty.handler.ssl.ClientAuth,java.lang.String[],boolean,boolean,boolean,java.util.Map$Entry[])>(v1, v2, v3, v4, v5, v6, v7, v8, v9, 0, v10);
return;
}
final javax.net.ssl.SSLEngine newEngine0(io.netty.buffer.ByteBufAllocator, java.lang.String, int, boolean)
{
io.netty.buffer.ByteBufAllocator v1;
io.netty.handler.ssl.OpenSslEngine v5;
int v3;
io.netty.handler.ssl.OpenSslContext v0;
java.lang.String v2;
boolean v4;
v0 := @this: io.netty.handler.ssl.OpenSslContext;
v1 := @parameter0: io.netty.buffer.ByteBufAllocator;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 = new io.netty.handler.ssl.OpenSslEngine;
specialinvoke v5.<io.netty.handler.ssl.OpenSslEngine: void <init>(io.netty.handler.ssl.OpenSslContext,io.netty.buffer.ByteBufAllocator,java.lang.String,int,boolean)>(v0, v1, v2, v3, v4);
return v5;
}
protected final void finalize() throws java.lang.Throwable
{
io.netty.handler.ssl.OpenSslContext v0;
v0 := @this: io.netty.handler.ssl.OpenSslContext;
specialinvoke v0.<java.lang.Object: void finalize()>();
staticinvoke <io.netty.handler.ssl.OpenSsl: void releaseIfNeeded(io.netty.util.ReferenceCounted)>(v0);
return;
}
}