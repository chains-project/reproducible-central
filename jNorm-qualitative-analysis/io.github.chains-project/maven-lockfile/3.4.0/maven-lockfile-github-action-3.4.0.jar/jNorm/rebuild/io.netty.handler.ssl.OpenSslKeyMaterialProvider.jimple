class io.netty.handler.ssl.OpenSslKeyMaterialProvider extends java.lang.Object
{
private final javax.net.ssl.X509KeyManager keyManager;
private final java.lang.String password;
void <init>(javax.net.ssl.X509KeyManager, java.lang.String)
{
javax.net.ssl.X509KeyManager v1;
java.lang.String v2;
io.netty.handler.ssl.OpenSslKeyMaterialProvider v0;
v0 := @this: io.netty.handler.ssl.OpenSslKeyMaterialProvider;
v1 := @parameter0: javax.net.ssl.X509KeyManager;
v2 := @parameter1: java.lang.String;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.handler.ssl.OpenSslKeyMaterialProvider: javax.net.ssl.X509KeyManager keyManager> = v1;
v0.<io.netty.handler.ssl.OpenSslKeyMaterialProvider: java.lang.String password> = v2;
return;
}
static void validateKeyMaterialSupported(java.security.cert.X509Certificate[], java.security.PrivateKey, java.lang.String) throws javax.net.ssl.SSLException
{
java.lang.String v2;
java.security.PrivateKey v1;
java.security.cert.X509Certificate[] v0;
v0 := @parameter0: java.security.cert.X509Certificate[];
v1 := @parameter1: java.security.PrivateKey;
v2 := @parameter2: java.lang.String;
staticinvoke <io.netty.handler.ssl.OpenSslKeyMaterialProvider: void validateSupported(java.security.cert.X509Certificate[])>(v0);
staticinvoke <io.netty.handler.ssl.OpenSslKeyMaterialProvider: void validateSupported(java.security.PrivateKey,java.lang.String)>(v1, v2);
return;
}
private static void validateSupported(java.security.PrivateKey, java.lang.String) throws javax.net.ssl.SSLException
{
io.netty.buffer.UnpooledByteBufAllocator v3;
java.lang.Throwable v10;
long v2, v4;
java.lang.Exception v6;
javax.net.ssl.SSLException v7;
byte v5;
java.security.PrivateKey v0;
java.lang.String v1, v8, v9;
v0 := @parameter0: java.security.PrivateKey;
v1 := @parameter1: java.lang.String;
if v0 != null goto label1;
return;
label1:
v2 = 0L;
label2:
v3 = <io.netty.buffer.UnpooledByteBufAllocator: io.netty.buffer.UnpooledByteBufAllocator DEFAULT>;
v2 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslContext: long toBIO(io.netty.buffer.ByteBufAllocator,java.security.PrivateKey)>(v3, v0);
v4 = staticinvoke <io.netty.internal.tcnative.SSL: long parsePrivateKey(long,java.lang.String)>(v2, v1);
label3:
staticinvoke <io.netty.internal.tcnative.SSL: void freeBIO(long)>(v2);
v5 = v4 cmp 0L;
if v5 == 0 goto label6;
staticinvoke <io.netty.internal.tcnative.SSL: void freePrivateKey(long)>(v4);
goto label6;
label4:
v6 := @caughtexception;
v7 = new javax.net.ssl.SSLException;
v8 = interfaceinvoke v0.<java.security.PrivateKey: java.lang.String getFormat()>();
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("PrivateKey type not supported \u0001");
specialinvoke v7.<javax.net.ssl.SSLException: void <init>(java.lang.String,java.lang.Throwable)>(v9, v6);
throw v7;
label5:
v10 := @caughtexception;
staticinvoke <io.netty.internal.tcnative.SSL: void freeBIO(long)>(v2);
throw v10;
label6:
return;
catch java.lang.Exception from label2 to label3 with label4;
catch java.lang.Throwable from label2 to label3 with label5;
}
private static void validateSupported(java.security.cert.X509Certificate[]) throws javax.net.ssl.SSLException
{
io.netty.buffer.UnpooledByteBufAllocator v4, v5;
java.lang.Throwable v11;
io.netty.handler.ssl.PemEncoded v3, v6;
long v2, v7;
java.lang.Exception v9;
javax.net.ssl.SSLException v10;
byte v8;
int v1;
java.security.cert.X509Certificate[] v0;
v0 := @parameter0: java.security.cert.X509Certificate[];
if v0 == null goto label1;
v1 = lengthof v0;
if v1 != 0 goto label2;
label1:
return;
label2:
v2 = 0L;
v3 = null;
label3:
v4 = <io.netty.buffer.UnpooledByteBufAllocator: io.netty.buffer.UnpooledByteBufAllocator DEFAULT>;
v3 = staticinvoke <io.netty.handler.ssl.PemX509Certificate: io.netty.handler.ssl.PemEncoded toPEM(io.netty.buffer.ByteBufAllocator,boolean,java.security.cert.X509Certificate[])>(v4, 1, v0);
v5 = <io.netty.buffer.UnpooledByteBufAllocator: io.netty.buffer.UnpooledByteBufAllocator DEFAULT>;
v6 = interfaceinvoke v3.<io.netty.handler.ssl.PemEncoded: io.netty.handler.ssl.PemEncoded retain()>();
v2 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslContext: long toBIO(io.netty.buffer.ByteBufAllocator,io.netty.handler.ssl.PemEncoded)>(v5, v6);
v7 = staticinvoke <io.netty.internal.tcnative.SSL: long parseX509Chain(long)>(v2);
label4:
staticinvoke <io.netty.internal.tcnative.SSL: void freeBIO(long)>(v2);
v8 = v7 cmp 0L;
if v8 == 0 goto label5;
staticinvoke <io.netty.internal.tcnative.SSL: void freeX509Chain(long)>(v7);
label5:
interfaceinvoke v3.<io.netty.handler.ssl.PemEncoded: boolean release()>();
goto label9;
label6:
v9 := @caughtexception;
v10 = new javax.net.ssl.SSLException;
specialinvoke v10.<javax.net.ssl.SSLException: void <init>(java.lang.String,java.lang.Throwable)>("Certificate type not supported", v9);
throw v10;
label7:
v11 := @caughtexception;
staticinvoke <io.netty.internal.tcnative.SSL: void freeBIO(long)>(v2);
if v3 == null goto label8;
interfaceinvoke v3.<io.netty.handler.ssl.PemEncoded: boolean release()>();
label8:
throw v11;
label9:
return;
catch java.lang.Exception from label3 to label4 with label6;
catch java.lang.Throwable from label3 to label4 with label7;
}
javax.net.ssl.X509KeyManager keyManager()
{
javax.net.ssl.X509KeyManager v1;
io.netty.handler.ssl.OpenSslKeyMaterialProvider v0;
v0 := @this: io.netty.handler.ssl.OpenSslKeyMaterialProvider;
v1 = v0.<io.netty.handler.ssl.OpenSslKeyMaterialProvider: javax.net.ssl.X509KeyManager keyManager>;
return v1;
}
io.netty.handler.ssl.OpenSslKeyMaterial chooseKeyMaterial(io.netty.buffer.ByteBufAllocator, java.lang.String) throws java.lang.Exception
{
java.lang.Throwable v20;
javax.net.ssl.X509KeyManager v3, v6;
io.netty.buffer.ByteBufAllocator v1;
io.netty.handler.ssl.DefaultOpenSslKeyMaterial v18;
io.netty.handler.ssl.PemEncoded v13, v8;
long v10, v11, v12, v16, v9;
byte v21, v22;
int v5;
java.lang.String v17, v2;
boolean v14;
io.netty.handler.ssl.OpenSslKeyMaterialProvider v0;
java.security.PrivateKey v7;
io.netty.handler.ssl.OpenSslKeyMaterial v15, v19;
java.security.cert.X509Certificate[] v4;
v0 := @this: io.netty.handler.ssl.OpenSslKeyMaterialProvider;
v1 := @parameter0: io.netty.buffer.ByteBufAllocator;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.netty.handler.ssl.OpenSslKeyMaterialProvider: javax.net.ssl.X509KeyManager keyManager>;
v4 = interfaceinvoke v3.<javax.net.ssl.X509KeyManager: java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)>(v2);
if v4 == null goto label01;
v5 = lengthof v4;
if v5 != 0 goto label02;
label01:
return null;
label02:
v6 = v0.<io.netty.handler.ssl.OpenSslKeyMaterialProvider: javax.net.ssl.X509KeyManager keyManager>;
v7 = interfaceinvoke v6.<javax.net.ssl.X509KeyManager: java.security.PrivateKey getPrivateKey(java.lang.String)>(v2);
v8 = staticinvoke <io.netty.handler.ssl.PemX509Certificate: io.netty.handler.ssl.PemEncoded toPEM(io.netty.buffer.ByteBufAllocator,boolean,java.security.cert.X509Certificate[])>(v1, 1, v4);
v9 = 0L;
v10 = 0L;
v11 = 0L;
v12 = 0L;
label03:
v13 = interfaceinvoke v8.<io.netty.handler.ssl.PemEncoded: io.netty.handler.ssl.PemEncoded retain()>();
v9 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslContext: long toBIO(io.netty.buffer.ByteBufAllocator,io.netty.handler.ssl.PemEncoded)>(v1, v13);
v11 = staticinvoke <io.netty.internal.tcnative.SSL: long parseX509Chain(long)>(v9);
v14 = v7 instanceof io.netty.handler.ssl.OpenSslPrivateKey;
if v14 == 0 goto label04;
v15 = virtualinvoke v7.<io.netty.handler.ssl.OpenSslPrivateKey: io.netty.handler.ssl.OpenSslKeyMaterial newKeyMaterial(long,java.security.cert.X509Certificate[])>(v11, v4);
goto label07;
label04:
v10 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslContext: long toBIO(io.netty.buffer.ByteBufAllocator,java.security.PrivateKey)>(v1, v7);
if v7 != null goto label05;
v16 = 0L;
goto label06;
label05:
v17 = v0.<io.netty.handler.ssl.OpenSslKeyMaterialProvider: java.lang.String password>;
v16 = staticinvoke <io.netty.internal.tcnative.SSL: long parsePrivateKey(long,java.lang.String)>(v10, v17);
label06:
v12 = v16;
v18 = new io.netty.handler.ssl.DefaultOpenSslKeyMaterial;
specialinvoke v18.<io.netty.handler.ssl.DefaultOpenSslKeyMaterial: void <init>(long,long,java.security.cert.X509Certificate[])>(v11, v16, v4);
v15 = v18;
label07:
v19 = v15;
label08:
staticinvoke <io.netty.internal.tcnative.SSL: void freeBIO(long)>(v9);
staticinvoke <io.netty.internal.tcnative.SSL: void freeBIO(long)>(v10);
interfaceinvoke v8.<io.netty.handler.ssl.PemEncoded: boolean release()>();
return v19;
label09:
v20 := @caughtexception;
staticinvoke <io.netty.internal.tcnative.SSL: void freeBIO(long)>(v9);
staticinvoke <io.netty.internal.tcnative.SSL: void freeBIO(long)>(v10);
v21 = v11 cmp 0L;
if v21 == 0 goto label10;
staticinvoke <io.netty.internal.tcnative.SSL: void freeX509Chain(long)>(v11);
label10:
v22 = v12 cmp 0L;
if v22 == 0 goto label11;
staticinvoke <io.netty.internal.tcnative.SSL: void freePrivateKey(long)>(v12);
label11:
interfaceinvoke v8.<io.netty.handler.ssl.PemEncoded: boolean release()>();
throw v20;
catch java.lang.Throwable from label03 to label08 with label09;
}
void destroy()
{
io.netty.handler.ssl.OpenSslKeyMaterialProvider v0;
v0 := @this: io.netty.handler.ssl.OpenSslKeyMaterialProvider;
return;
}
}