class io.netty.handler.ssl.OpenSslSessionCache$1 extends java.util.LinkedHashMap
{
private static final long serialVersionUID;
final io.netty.handler.ssl.OpenSslSessionCache this$0;
void <init>(io.netty.handler.ssl.OpenSslSessionCache)
{
io.netty.handler.ssl.OpenSslSessionCache$1 v0;
io.netty.handler.ssl.OpenSslSessionCache v1;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$1;
v1 := @parameter0: io.netty.handler.ssl.OpenSslSessionCache;
v0.<io.netty.handler.ssl.OpenSslSessionCache$1: io.netty.handler.ssl.OpenSslSessionCache this$0> = v1;
specialinvoke v0.<java.util.LinkedHashMap: void <init>()>();
return;
}
protected boolean removeEldestEntry(java.util.Map$Entry)
{
java.util.Map$Entry v1;
io.netty.handler.ssl.OpenSslSessionCache v2, v6;
io.netty.handler.ssl.OpenSslSessionCache$1 v0;
java.util.concurrent.atomic.AtomicInteger v3;
int v4, v5;
java.lang.Object v7;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$1;
v1 := @parameter0: java.util.Map$Entry;
v2 = v0.<io.netty.handler.ssl.OpenSslSessionCache$1: io.netty.handler.ssl.OpenSslSessionCache this$0>;
v3 = v2.<io.netty.handler.ssl.OpenSslSessionCache: java.util.concurrent.atomic.AtomicInteger maximumCacheSize>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicInteger: int get()>();
if v4 < 0 goto label1;
v5 = virtualinvoke v0.<io.netty.handler.ssl.OpenSslSessionCache$1: int size()>();
if v5 <= v4 goto label1;
v6 = v0.<io.netty.handler.ssl.OpenSslSessionCache$1: io.netty.handler.ssl.OpenSslSessionCache this$0>;
v7 = interfaceinvoke v1.<java.util.Map$Entry: java.lang.Object getKey()>();
virtualinvoke v6.<io.netty.handler.ssl.OpenSslSessionCache: void removeSessionWithId(io.netty.handler.ssl.OpenSslSessionId)>(v7);
label1:
return 0;
}
}