final class io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession extends java.lang.Object implements io.netty.handler.ssl.OpenSslSession
{
static final io.netty.util.ResourceLeakDetector LEAK_DETECTOR;
private final io.netty.util.ResourceLeakTracker leakTracker;
private final long session;
private final java.lang.String peerHost;
private final int peerPort;
private final io.netty.handler.ssl.OpenSslSessionId id;
private final long timeout;
private final long creationTime;
private volatile long lastAccessedTime;
private volatile boolean valid;
private boolean freed;
static final boolean $assertionsDisabled;
void <init>(long, java.lang.String, int, long)
{
byte[] v8;
long v1, v4, v5, v6;
io.netty.util.ResourceLeakDetector v9;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
io.netty.handler.ssl.OpenSslSessionId v7;
int v3;
java.lang.String v2;
io.netty.util.ResourceLeakTracker v10;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v1 := @parameter0: long;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: int;
v4 := @parameter3: long;
specialinvoke v0.<java.lang.Object: void <init>()>();
v5 = staticinvoke <java.lang.System: long currentTimeMillis()>();
v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: long creationTime> = v5;
v6 = v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: long creationTime>;
v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: long lastAccessedTime> = v6;
v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: boolean valid> = 1;
v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: long session> = v1;
v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: java.lang.String peerHost> = v2;
v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: int peerPort> = v3;
v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: long timeout> = v4;
v7 = new io.netty.handler.ssl.OpenSslSessionId;
v8 = staticinvoke <io.netty.internal.tcnative.SSLSession: byte[] getSessionId(long)>(v1);
specialinvoke v7.<io.netty.handler.ssl.OpenSslSessionId: void <init>(byte[])>(v8);
v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: io.netty.handler.ssl.OpenSslSessionId id> = v7;
v9 = <io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: io.netty.util.ResourceLeakDetector LEAK_DETECTOR>;
v10 = virtualinvoke v9.<io.netty.util.ResourceLeakDetector: io.netty.util.ResourceLeakTracker track(java.lang.Object)>(v0);
v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: io.netty.util.ResourceLeakTracker leakTracker> = v10;
return;
}
public void setSessionId(io.netty.handler.ssl.OpenSslSessionId)
{
java.lang.UnsupportedOperationException v2;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
io.netty.handler.ssl.OpenSslSessionId v1;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v1 := @parameter0: io.netty.handler.ssl.OpenSslSessionId;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
boolean shouldBeSingleUse()
{
long v4;
java.lang.AssertionError v3;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
boolean v1, v2, v5;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v1 = <io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: boolean $assertionsDisabled>;
if v1 != 0 goto label1;
v2 = v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: boolean freed>;
if v2 == 0 goto label1;
v3 = new java.lang.AssertionError;
specialinvoke v3.<java.lang.AssertionError: void <init>()>();
throw v3;
label1:
v4 = v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: long session>;
v5 = staticinvoke <io.netty.internal.tcnative.SSLSession: boolean shouldBeSingleUse(long)>(v4);
return v5;
}
long session()
{
long v4;
java.lang.AssertionError v3;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
boolean v1, v2;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v1 = <io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: boolean $assertionsDisabled>;
if v1 != 0 goto label1;
v2 = v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: boolean freed>;
if v2 == 0 goto label1;
v3 = new java.lang.AssertionError;
specialinvoke v3.<java.lang.AssertionError: void <init>()>();
throw v3;
label1:
v4 = v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: long session>;
return v4;
}
boolean upRef()
{
long v4;
java.lang.AssertionError v3;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
boolean v1, v2, v5;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v1 = <io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: boolean $assertionsDisabled>;
if v1 != 0 goto label1;
v2 = v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: boolean freed>;
if v2 == 0 goto label1;
v3 = new java.lang.AssertionError;
specialinvoke v3.<java.lang.AssertionError: void <init>()>();
throw v3;
label1:
v4 = v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: long session>;
v5 = staticinvoke <io.netty.internal.tcnative.SSLSession: boolean upRef(long)>(v4);
return v5;
}
synchronized void free()
{
long v1;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
virtualinvoke v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: void close()>();
v1 = v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: long session>;
staticinvoke <io.netty.internal.tcnative.SSLSession: void free(long)>(v1);
return;
}
void close()
{
java.lang.AssertionError v3;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
io.netty.util.ResourceLeakTracker v4, v5;
boolean v1, v2;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v1 = <io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: boolean $assertionsDisabled>;
if v1 != 0 goto label1;
v2 = v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: boolean freed>;
if v2 == 0 goto label1;
v3 = new java.lang.AssertionError;
specialinvoke v3.<java.lang.AssertionError: void <init>()>();
throw v3;
label1:
v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: boolean freed> = 1;
virtualinvoke v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: void invalidate()>();
v4 = v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: io.netty.util.ResourceLeakTracker leakTracker>;
if v4 == null goto label2;
v5 = v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: io.netty.util.ResourceLeakTracker leakTracker>;
interfaceinvoke v5.<io.netty.util.ResourceLeakTracker: boolean close(java.lang.Object)>(v0);
label2:
return;
}
public io.netty.handler.ssl.OpenSslSessionId sessionId()
{
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
io.netty.handler.ssl.OpenSslSessionId v1;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v1 = v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: io.netty.handler.ssl.OpenSslSessionId id>;
return v1;
}
boolean isValid(long)
{
long v1, v2, v3, v4;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
byte v5;
boolean v6, v7;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v1 := @parameter0: long;
v2 = v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: long creationTime>;
v3 = v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: long timeout>;
v4 = v2 + v3;
v5 = v4 cmp v1;
if v5 < 0 goto label1;
v6 = v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: boolean valid>;
if v6 == 0 goto label1;
v7 = 1;
goto label2;
label1:
v7 = 0;
label2:
return v7;
}
public void setLocalCertificate(java.security.cert.Certificate[])
{
java.lang.UnsupportedOperationException v2;
java.security.cert.Certificate[] v1;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v1 := @parameter0: java.security.cert.Certificate[];
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public io.netty.handler.ssl.OpenSslSessionContext getSessionContext()
{
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
return null;
}
public void tryExpandApplicationBufferSize(int)
{
int v1;
java.lang.UnsupportedOperationException v2;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v1 := @parameter0: int;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public void handshakeFinished(byte[], java.lang.String, java.lang.String, byte[], byte[][], long, long)
{
byte[] v1, v4;
java.lang.UnsupportedOperationException v8;
long v6, v7;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
byte[][] v5;
java.lang.String v2, v3;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v1 := @parameter0: byte[];
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: byte[];
v5 := @parameter4: byte[][];
v6 := @parameter5: long;
v7 := @parameter6: long;
v8 = new java.lang.UnsupportedOperationException;
specialinvoke v8.<java.lang.UnsupportedOperationException: void <init>()>();
throw v8;
}
public byte[] getId()
{
byte[] v2;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
io.netty.handler.ssl.OpenSslSessionId v1;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v1 = v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: io.netty.handler.ssl.OpenSslSessionId id>;
v2 = virtualinvoke v1.<io.netty.handler.ssl.OpenSslSessionId: byte[] cloneBytes()>();
return v2;
}
public long getCreationTime()
{
long v1;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v1 = v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: long creationTime>;
return v1;
}
void updateLastAccessedTime()
{
long v1;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v1 = staticinvoke <java.lang.System: long currentTimeMillis()>();
v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: long lastAccessedTime> = v1;
return;
}
public long getLastAccessedTime()
{
long v1;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v1 = v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: long lastAccessedTime>;
return v1;
}
public void invalidate()
{
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: boolean valid> = 0;
return;
}
public boolean isValid()
{
long v1;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
boolean v2;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v1 = staticinvoke <java.lang.System: long currentTimeMillis()>();
v2 = virtualinvoke v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: boolean isValid(long)>(v1);
return v2;
}
public void putValue(java.lang.String, java.lang.Object)
{
java.lang.UnsupportedOperationException v3;
java.lang.Object v2;
java.lang.String v1;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>()>();
throw v3;
}
public java.lang.Object getValue(java.lang.String)
{
java.lang.String v1;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v1 := @parameter0: java.lang.String;
return null;
}
public void removeValue(java.lang.String)
{
java.lang.String v1;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v1 := @parameter0: java.lang.String;
return;
}
public java.lang.String[] getValueNames()
{
java.lang.String[] v1;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v1 = <io.netty.util.internal.EmptyArrays: java.lang.String[] EMPTY_STRINGS>;
return v1;
}
public java.security.cert.Certificate[] getPeerCertificates()
{
java.lang.UnsupportedOperationException v1;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>()>();
throw v1;
}
public java.security.cert.Certificate[] getLocalCertificates()
{
java.lang.UnsupportedOperationException v1;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>()>();
throw v1;
}
public javax.security.cert.X509Certificate[] getPeerCertificateChain()
{
java.lang.UnsupportedOperationException v1;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>()>();
throw v1;
}
public java.security.Principal getPeerPrincipal()
{
java.lang.UnsupportedOperationException v1;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>()>();
throw v1;
}
public java.security.Principal getLocalPrincipal()
{
java.lang.UnsupportedOperationException v1;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>()>();
throw v1;
}
public java.lang.String getCipherSuite()
{
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
return null;
}
public java.lang.String getProtocol()
{
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
return null;
}
public java.lang.String getPeerHost()
{
java.lang.String v1;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v1 = v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: java.lang.String peerHost>;
return v1;
}
public int getPeerPort()
{
int v1;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v1 = v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: int peerPort>;
return v1;
}
public int getPacketBufferSize()
{
int v1;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v1 = <io.netty.handler.ssl.ReferenceCountedOpenSslEngine: int MAX_RECORD_SIZE>;
return v1;
}
public int getApplicationBufferSize()
{
int v1;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v1 = <io.netty.handler.ssl.ReferenceCountedOpenSslEngine: int MAX_PLAINTEXT_LENGTH>;
return v1;
}
public int hashCode()
{
int v2;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
io.netty.handler.ssl.OpenSslSessionId v1;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v1 = v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: io.netty.handler.ssl.OpenSslSessionId id>;
v2 = virtualinvoke v1.<io.netty.handler.ssl.OpenSslSessionId: int hashCode()>();
return v2;
}
public boolean equals(java.lang.Object)
{
java.lang.Object v1;
io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession v0;
io.netty.handler.ssl.OpenSslSessionId v3, v4;
boolean v2, v5;
v0 := @this: io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
v2 = v1 instanceof io.netty.handler.ssl.OpenSslSession;
if v2 != 0 goto label2;
return 0;
label2:
v3 = v0.<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: io.netty.handler.ssl.OpenSslSessionId id>;
v4 = interfaceinvoke v1.<io.netty.handler.ssl.OpenSslSession: io.netty.handler.ssl.OpenSslSessionId sessionId()>();
v5 = virtualinvoke v3.<io.netty.handler.ssl.OpenSslSessionId: boolean equals(java.lang.Object)>(v4);
return v5;
}
static void <clinit>()
{
io.netty.util.ResourceLeakDetectorFactory v3;
java.lang.Class v0;
io.netty.util.ResourceLeakDetector v4;
boolean v1, v2;
v0 = class "Lio/netty/handler/ssl/OpenSslSessionCache;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: boolean $assertionsDisabled> = v2;
v3 = staticinvoke <io.netty.util.ResourceLeakDetectorFactory: io.netty.util.ResourceLeakDetectorFactory instance()>();
v4 = virtualinvoke v3.<io.netty.util.ResourceLeakDetectorFactory: io.netty.util.ResourceLeakDetector newResourceLeakDetector(java.lang.Class)>(class "Lio/netty/handler/ssl/OpenSslSessionCache$NativeSslSession;");
<io.netty.handler.ssl.OpenSslSessionCache$NativeSslSession: io.netty.util.ResourceLeakDetector LEAK_DETECTOR> = v4;
return;
}
}