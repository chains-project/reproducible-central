public abstract class io.netty.handler.ssl.OpenSslSessionContext extends java.lang.Object implements javax.net.ssl.SSLSessionContext
{
private final io.netty.handler.ssl.OpenSslSessionStats stats;
private final io.netty.handler.ssl.OpenSslKeyMaterialProvider provider;
final io.netty.handler.ssl.ReferenceCountedOpenSslContext context;
private final io.netty.handler.ssl.OpenSslSessionCache sessionCache;
private final long mask;
void <init>(io.netty.handler.ssl.ReferenceCountedOpenSslContext, io.netty.handler.ssl.OpenSslKeyMaterialProvider, long, io.netty.handler.ssl.OpenSslSessionCache)
{
io.netty.handler.ssl.OpenSslSessionStats v5;
io.netty.handler.ssl.OpenSslKeyMaterialProvider v2;
io.netty.handler.ssl.OpenSslSessionContext v0;
long v3, v6;
io.netty.handler.ssl.OpenSslSessionCache v4;
io.netty.handler.ssl.ReferenceCountedOpenSslContext v1;
v0 := @this: io.netty.handler.ssl.OpenSslSessionContext;
v1 := @parameter0: io.netty.handler.ssl.ReferenceCountedOpenSslContext;
v2 := @parameter1: io.netty.handler.ssl.OpenSslKeyMaterialProvider;
v3 := @parameter2: long;
v4 := @parameter3: io.netty.handler.ssl.OpenSslSessionCache;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.handler.ssl.OpenSslSessionContext: io.netty.handler.ssl.ReferenceCountedOpenSslContext context> = v1;
v0.<io.netty.handler.ssl.OpenSslSessionContext: io.netty.handler.ssl.OpenSslKeyMaterialProvider provider> = v2;
v0.<io.netty.handler.ssl.OpenSslSessionContext: long mask> = v3;
v5 = new io.netty.handler.ssl.OpenSslSessionStats;
specialinvoke v5.<io.netty.handler.ssl.OpenSslSessionStats: void <init>(io.netty.handler.ssl.ReferenceCountedOpenSslContext)>(v1);
v0.<io.netty.handler.ssl.OpenSslSessionContext: io.netty.handler.ssl.OpenSslSessionStats stats> = v5;
v0.<io.netty.handler.ssl.OpenSslSessionContext: io.netty.handler.ssl.OpenSslSessionCache sessionCache> = v4;
v6 = v1.<io.netty.handler.ssl.ReferenceCountedOpenSslContext: long ctx>;
staticinvoke <io.netty.internal.tcnative.SSLContext: void setSSLSessionCache(long,io.netty.internal.tcnative.SSLSessionCache)>(v6, v4);
return;
}
final boolean useKeyManager()
{
io.netty.handler.ssl.OpenSslSessionContext v0;
io.netty.handler.ssl.OpenSslKeyMaterialProvider v1;
boolean v2;
v0 := @this: io.netty.handler.ssl.OpenSslSessionContext;
v1 = v0.<io.netty.handler.ssl.OpenSslSessionContext: io.netty.handler.ssl.OpenSslKeyMaterialProvider provider>;
if v1 == null goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public void setSessionCacheSize(int)
{
int v1;
io.netty.handler.ssl.OpenSslSessionContext v0;
io.netty.handler.ssl.OpenSslSessionCache v2;
v0 := @this: io.netty.handler.ssl.OpenSslSessionContext;
v1 := @parameter0: int;
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositiveOrZero(int,java.lang.String)>(v1, "size");
v2 = v0.<io.netty.handler.ssl.OpenSslSessionContext: io.netty.handler.ssl.OpenSslSessionCache sessionCache>;
virtualinvoke v2.<io.netty.handler.ssl.OpenSslSessionCache: void setSessionCacheSize(int)>(v1);
return;
}
public int getSessionCacheSize()
{
int v2;
io.netty.handler.ssl.OpenSslSessionContext v0;
io.netty.handler.ssl.OpenSslSessionCache v1;
v0 := @this: io.netty.handler.ssl.OpenSslSessionContext;
v1 = v0.<io.netty.handler.ssl.OpenSslSessionContext: io.netty.handler.ssl.OpenSslSessionCache sessionCache>;
v2 = virtualinvoke v1.<io.netty.handler.ssl.OpenSslSessionCache: int getSessionCacheSize()>();
return v2;
}
public void setSessionTimeout(int)
{
java.lang.Throwable v8;
long v6;
io.netty.handler.ssl.OpenSslSessionCache v7;
java.util.concurrent.locks.Lock v4;
int v1;
io.netty.handler.ssl.OpenSslSessionContext v0;
io.netty.handler.ssl.ReferenceCountedOpenSslContext v2, v5;
java.util.concurrent.locks.ReadWriteLock v3;
v0 := @this: io.netty.handler.ssl.OpenSslSessionContext;
v1 := @parameter0: int;
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositiveOrZero(int,java.lang.String)>(v1, "seconds");
v2 = v0.<io.netty.handler.ssl.OpenSslSessionContext: io.netty.handler.ssl.ReferenceCountedOpenSslContext context>;
v3 = v2.<io.netty.handler.ssl.ReferenceCountedOpenSslContext: java.util.concurrent.locks.ReadWriteLock ctxLock>;
v4 = interfaceinvoke v3.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
interfaceinvoke v4.<java.util.concurrent.locks.Lock: void lock()>();
label1:
v5 = v0.<io.netty.handler.ssl.OpenSslSessionContext: io.netty.handler.ssl.ReferenceCountedOpenSslContext context>;
v6 = v5.<io.netty.handler.ssl.ReferenceCountedOpenSslContext: long ctx>;
staticinvoke <io.netty.internal.tcnative.SSLContext: long setSessionCacheTimeout(long,long)>(v6, v1);
v7 = v0.<io.netty.handler.ssl.OpenSslSessionContext: io.netty.handler.ssl.OpenSslSessionCache sessionCache>;
virtualinvoke v7.<io.netty.handler.ssl.OpenSslSessionCache: void setSessionTimeout(int)>(v1);
label2:
interfaceinvoke v4.<java.util.concurrent.locks.Lock: void unlock()>();
goto label4;
label3:
v8 := @caughtexception;
interfaceinvoke v4.<java.util.concurrent.locks.Lock: void unlock()>();
throw v8;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public int getSessionTimeout()
{
int v2;
io.netty.handler.ssl.OpenSslSessionContext v0;
io.netty.handler.ssl.OpenSslSessionCache v1;
v0 := @this: io.netty.handler.ssl.OpenSslSessionContext;
v1 = v0.<io.netty.handler.ssl.OpenSslSessionContext: io.netty.handler.ssl.OpenSslSessionCache sessionCache>;
v2 = virtualinvoke v1.<io.netty.handler.ssl.OpenSslSessionCache: int getSessionTimeout()>();
return v2;
}
public javax.net.ssl.SSLSession getSession(byte[])
{
byte[] v1;
io.netty.handler.ssl.OpenSslSession v4;
io.netty.handler.ssl.OpenSslSessionContext v0;
io.netty.handler.ssl.OpenSslSessionCache v2;
io.netty.handler.ssl.OpenSslSessionId v3;
v0 := @this: io.netty.handler.ssl.OpenSslSessionContext;
v1 := @parameter0: byte[];
v2 = v0.<io.netty.handler.ssl.OpenSslSessionContext: io.netty.handler.ssl.OpenSslSessionCache sessionCache>;
v3 = new io.netty.handler.ssl.OpenSslSessionId;
specialinvoke v3.<io.netty.handler.ssl.OpenSslSessionId: void <init>(byte[])>(v1);
v4 = virtualinvoke v2.<io.netty.handler.ssl.OpenSslSessionCache: io.netty.handler.ssl.OpenSslSession getSession(io.netty.handler.ssl.OpenSslSessionId)>(v3);
return v4;
}
public java.util.Enumeration getIds()
{
io.netty.handler.ssl.OpenSslSessionContext v0;
io.netty.handler.ssl.OpenSslSessionContext$1 v1;
v0 := @this: io.netty.handler.ssl.OpenSslSessionContext;
v1 = new io.netty.handler.ssl.OpenSslSessionContext$1;
specialinvoke v1.<io.netty.handler.ssl.OpenSslSessionContext$1: void <init>(io.netty.handler.ssl.OpenSslSessionContext)>(v0);
return v1;
}
public void setTicketKeys(byte[])
{
java.lang.Throwable v25;
byte[] v1, v11, v13, v15;
long v21, v24;
io.netty.internal.tcnative.SessionTicketKey[] v7;
int v10, v12, v14, v2, v22, v3, v5, v6, v8, v9;
java.util.concurrent.locks.ReadWriteLock v18;
java.lang.IllegalArgumentException v4;
java.util.concurrent.locks.Lock v19;
io.netty.handler.ssl.OpenSslSessionContext v0;
io.netty.internal.tcnative.SessionTicketKey v16;
io.netty.handler.ssl.ReferenceCountedOpenSslContext v17, v20, v23;
v0 := @this: io.netty.handler.ssl.OpenSslSessionContext;
v1 := @parameter0: byte[];
v2 = lengthof v1;
v3 = v2 % 48;
if v3 == 0 goto label1;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("keys.length % 48 != 0");
throw v4;
label1:
v5 = lengthof v1;
v6 = v5 / 48;
v7 = newarray (io.netty.internal.tcnative.SessionTicketKey)[v6];
v8 = 0;
v9 = 0;
label2:
v10 = lengthof v7;
if v8 >= v10 goto label3;
v11 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(v1, v9, 16);
v12 = v9 + 16;
v13 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(v1, v12, 16);
v14 = v8 + 16;
v15 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(v1, v12, 16);
v9 = v12 + 16;
v16 = new io.netty.internal.tcnative.SessionTicketKey;
specialinvoke v16.<io.netty.internal.tcnative.SessionTicketKey: void <init>(byte[],byte[],byte[])>(v11, v13, v15);
v7[v14] = v16;
v8 = v14 + 1;
goto label2;
label3:
v17 = v0.<io.netty.handler.ssl.OpenSslSessionContext: io.netty.handler.ssl.ReferenceCountedOpenSslContext context>;
v18 = v17.<io.netty.handler.ssl.ReferenceCountedOpenSslContext: java.util.concurrent.locks.ReadWriteLock ctxLock>;
v19 = interfaceinvoke v18.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
interfaceinvoke v19.<java.util.concurrent.locks.Lock: void lock()>();
label4:
v20 = v0.<io.netty.handler.ssl.OpenSslSessionContext: io.netty.handler.ssl.ReferenceCountedOpenSslContext context>;
v21 = v20.<io.netty.handler.ssl.ReferenceCountedOpenSslContext: long ctx>;
v22 = <io.netty.internal.tcnative.SSL: int SSL_OP_NO_TICKET>;
staticinvoke <io.netty.internal.tcnative.SSLContext: void clearOptions(long,int)>(v21, v22);
v23 = v0.<io.netty.handler.ssl.OpenSslSessionContext: io.netty.handler.ssl.ReferenceCountedOpenSslContext context>;
v24 = v23.<io.netty.handler.ssl.ReferenceCountedOpenSslContext: long ctx>;
staticinvoke <io.netty.internal.tcnative.SSLContext: void setSessionTicketKeys(long,io.netty.internal.tcnative.SessionTicketKey[])>(v24, v7);
label5:
interfaceinvoke v19.<java.util.concurrent.locks.Lock: void unlock()>();
goto label7;
label6:
v25 := @caughtexception;
interfaceinvoke v19.<java.util.concurrent.locks.Lock: void unlock()>();
throw v25;
label7:
return;
catch java.lang.Throwable from label4 to label5 with label6;
}
public transient void setTicketKeys(io.netty.handler.ssl.OpenSslSessionTicketKey[])
{
java.lang.Throwable v17;
long v12, v16;
io.netty.handler.ssl.OpenSslSessionTicketKey v6;
io.netty.internal.tcnative.SessionTicketKey[] v3;
int v13, v14, v2, v4, v5;
java.util.concurrent.locks.ReadWriteLock v9;
io.netty.handler.ssl.OpenSslSessionTicketKey[] v1;
java.util.concurrent.locks.Lock v10;
io.netty.handler.ssl.OpenSslSessionContext v0;
io.netty.internal.tcnative.SessionTicketKey v7;
io.netty.handler.ssl.ReferenceCountedOpenSslContext v11, v15, v8;
v0 := @this: io.netty.handler.ssl.OpenSslSessionContext;
v1 := @parameter0: io.netty.handler.ssl.OpenSslSessionTicketKey[];
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "keys");
v2 = lengthof v1;
v3 = newarray (io.netty.internal.tcnative.SessionTicketKey)[v2];
v4 = 0;
label1:
v5 = lengthof v3;
if v4 >= v5 goto label2;
v6 = v1[v4];
v7 = v6.<io.netty.handler.ssl.OpenSslSessionTicketKey: io.netty.internal.tcnative.SessionTicketKey key>;
v3[v4] = v7;
v4 = v4 + 1;
goto label1;
label2:
v8 = v0.<io.netty.handler.ssl.OpenSslSessionContext: io.netty.handler.ssl.ReferenceCountedOpenSslContext context>;
v9 = v8.<io.netty.handler.ssl.ReferenceCountedOpenSslContext: java.util.concurrent.locks.ReadWriteLock ctxLock>;
v10 = interfaceinvoke v9.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
interfaceinvoke v10.<java.util.concurrent.locks.Lock: void lock()>();
label3:
v11 = v0.<io.netty.handler.ssl.OpenSslSessionContext: io.netty.handler.ssl.ReferenceCountedOpenSslContext context>;
v12 = v11.<io.netty.handler.ssl.ReferenceCountedOpenSslContext: long ctx>;
v13 = <io.netty.internal.tcnative.SSL: int SSL_OP_NO_TICKET>;
staticinvoke <io.netty.internal.tcnative.SSLContext: void clearOptions(long,int)>(v12, v13);
v14 = lengthof v3;
if v14 <= 0 goto label4;
v15 = v0.<io.netty.handler.ssl.OpenSslSessionContext: io.netty.handler.ssl.ReferenceCountedOpenSslContext context>;
v16 = v15.<io.netty.handler.ssl.ReferenceCountedOpenSslContext: long ctx>;
staticinvoke <io.netty.internal.tcnative.SSLContext: void setSessionTicketKeys(long,io.netty.internal.tcnative.SessionTicketKey[])>(v16, v3);
label4:
interfaceinvoke v10.<java.util.concurrent.locks.Lock: void unlock()>();
goto label6;
label5:
v17 := @caughtexception;
interfaceinvoke v10.<java.util.concurrent.locks.Lock: void unlock()>();
throw v17;
label6:
return;
catch java.lang.Throwable from label3 to label4 with label5;
}
public void setSessionCacheEnabled(boolean)
{
java.lang.Throwable v13;
long v11, v2, v3, v4, v5, v6;
io.netty.handler.ssl.OpenSslSessionCache v12;
java.util.concurrent.locks.Lock v9;
io.netty.handler.ssl.OpenSslSessionContext v0;
io.netty.handler.ssl.ReferenceCountedOpenSslContext v10, v7;
java.util.concurrent.locks.ReadWriteLock v8;
boolean v1;
v0 := @this: io.netty.handler.ssl.OpenSslSessionContext;
v1 := @parameter0: boolean;
if v1 == 0 goto label1;
v2 = v0.<io.netty.handler.ssl.OpenSslSessionContext: long mask>;
v3 = <io.netty.internal.tcnative.SSL: long SSL_SESS_CACHE_NO_INTERNAL_LOOKUP>;
v4 = v2 | v3;
v5 = <io.netty.internal.tcnative.SSL: long SSL_SESS_CACHE_NO_INTERNAL_STORE>;
v6 = v4 | v5;
goto label2;
label1:
v6 = <io.netty.internal.tcnative.SSL: long SSL_SESS_CACHE_OFF>;
label2:
v7 = v0.<io.netty.handler.ssl.OpenSslSessionContext: io.netty.handler.ssl.ReferenceCountedOpenSslContext context>;
v8 = v7.<io.netty.handler.ssl.ReferenceCountedOpenSslContext: java.util.concurrent.locks.ReadWriteLock ctxLock>;
v9 = interfaceinvoke v8.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();
interfaceinvoke v9.<java.util.concurrent.locks.Lock: void lock()>();
label3:
v10 = v0.<io.netty.handler.ssl.OpenSslSessionContext: io.netty.handler.ssl.ReferenceCountedOpenSslContext context>;
v11 = v10.<io.netty.handler.ssl.ReferenceCountedOpenSslContext: long ctx>;
staticinvoke <io.netty.internal.tcnative.SSLContext: long setSessionCacheMode(long,long)>(v11, v6);
if v1 != 0 goto label4;
v12 = v0.<io.netty.handler.ssl.OpenSslSessionContext: io.netty.handler.ssl.OpenSslSessionCache sessionCache>;
virtualinvoke v12.<io.netty.handler.ssl.OpenSslSessionCache: void clear()>();
label4:
interfaceinvoke v9.<java.util.concurrent.locks.Lock: void unlock()>();
goto label6;
label5:
v13 := @caughtexception;
interfaceinvoke v9.<java.util.concurrent.locks.Lock: void unlock()>();
throw v13;
label6:
return;
catch java.lang.Throwable from label3 to label4 with label5;
}
public boolean isSessionCacheEnabled()
{
java.lang.Throwable v11;
long v5, v6, v7, v8;
java.util.concurrent.locks.Lock v3;
byte v9;
io.netty.handler.ssl.OpenSslSessionContext v0;
io.netty.handler.ssl.ReferenceCountedOpenSslContext v1, v4;
java.util.concurrent.locks.ReadWriteLock v2;
boolean v10;
v0 := @this: io.netty.handler.ssl.OpenSslSessionContext;
v1 = v0.<io.netty.handler.ssl.OpenSslSessionContext: io.netty.handler.ssl.ReferenceCountedOpenSslContext context>;
v2 = v1.<io.netty.handler.ssl.ReferenceCountedOpenSslContext: java.util.concurrent.locks.ReadWriteLock ctxLock>;
v3 = interfaceinvoke v2.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();
interfaceinvoke v3.<java.util.concurrent.locks.Lock: void lock()>();
label1:
v4 = v0.<io.netty.handler.ssl.OpenSslSessionContext: io.netty.handler.ssl.ReferenceCountedOpenSslContext context>;
v5 = v4.<io.netty.handler.ssl.ReferenceCountedOpenSslContext: long ctx>;
v6 = staticinvoke <io.netty.internal.tcnative.SSLContext: long getSessionCacheMode(long)>(v5);
v7 = v0.<io.netty.handler.ssl.OpenSslSessionContext: long mask>;
v8 = v6 & v7;
v9 = v8 cmp 0L;
if v9 == 0 goto label2;
v10 = 1;
goto label3;
label2:
v10 = 0;
label3:
interfaceinvoke v3.<java.util.concurrent.locks.Lock: void unlock()>();
return v10;
label4:
v11 := @caughtexception;
interfaceinvoke v3.<java.util.concurrent.locks.Lock: void unlock()>();
throw v11;
catch java.lang.Throwable from label1 to label3 with label4;
}
public io.netty.handler.ssl.OpenSslSessionStats stats()
{
io.netty.handler.ssl.OpenSslSessionContext v0;
io.netty.handler.ssl.OpenSslSessionStats v1;
v0 := @this: io.netty.handler.ssl.OpenSslSessionContext;
v1 = v0.<io.netty.handler.ssl.OpenSslSessionContext: io.netty.handler.ssl.OpenSslSessionStats stats>;
return v1;
}
final void removeFromCache(io.netty.handler.ssl.OpenSslSessionId)
{
io.netty.handler.ssl.OpenSslSessionContext v0;
io.netty.handler.ssl.OpenSslSessionCache v2;
io.netty.handler.ssl.OpenSslSessionId v1;
v0 := @this: io.netty.handler.ssl.OpenSslSessionContext;
v1 := @parameter0: io.netty.handler.ssl.OpenSslSessionId;
v2 = v0.<io.netty.handler.ssl.OpenSslSessionContext: io.netty.handler.ssl.OpenSslSessionCache sessionCache>;
virtualinvoke v2.<io.netty.handler.ssl.OpenSslSessionCache: void removeSessionWithId(io.netty.handler.ssl.OpenSslSessionId)>(v1);
return;
}
final boolean isInCache(io.netty.handler.ssl.OpenSslSessionId)
{
io.netty.handler.ssl.OpenSslSessionContext v0;
io.netty.handler.ssl.OpenSslSessionCache v2;
io.netty.handler.ssl.OpenSslSessionId v1;
boolean v3;
v0 := @this: io.netty.handler.ssl.OpenSslSessionContext;
v1 := @parameter0: io.netty.handler.ssl.OpenSslSessionId;
v2 = v0.<io.netty.handler.ssl.OpenSslSessionContext: io.netty.handler.ssl.OpenSslSessionCache sessionCache>;
v3 = virtualinvoke v2.<io.netty.handler.ssl.OpenSslSessionCache: boolean containsSessionWithId(io.netty.handler.ssl.OpenSslSessionId)>(v1);
return v3;
}
void setSessionFromCache(java.lang.String, int, long)
{
int v2;
io.netty.handler.ssl.OpenSslSessionContext v0;
long v3;
java.lang.String v1;
io.netty.handler.ssl.OpenSslSessionCache v4;
v0 := @this: io.netty.handler.ssl.OpenSslSessionContext;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: long;
v4 = v0.<io.netty.handler.ssl.OpenSslSessionContext: io.netty.handler.ssl.OpenSslSessionCache sessionCache>;
virtualinvoke v4.<io.netty.handler.ssl.OpenSslSessionCache: void setSession(long,java.lang.String,int)>(v3, v1, v2);
return;
}
final void destroy()
{
io.netty.handler.ssl.OpenSslKeyMaterialProvider v1, v2;
io.netty.handler.ssl.OpenSslSessionContext v0;
io.netty.handler.ssl.OpenSslSessionCache v3;
v0 := @this: io.netty.handler.ssl.OpenSslSessionContext;
v1 = v0.<io.netty.handler.ssl.OpenSslSessionContext: io.netty.handler.ssl.OpenSslKeyMaterialProvider provider>;
if v1 == null goto label1;
v2 = v0.<io.netty.handler.ssl.OpenSslSessionContext: io.netty.handler.ssl.OpenSslKeyMaterialProvider provider>;
virtualinvoke v2.<io.netty.handler.ssl.OpenSslKeyMaterialProvider: void destroy()>();
label1:
v3 = v0.<io.netty.handler.ssl.OpenSslSessionContext: io.netty.handler.ssl.OpenSslSessionCache sessionCache>;
virtualinvoke v3.<io.netty.handler.ssl.OpenSslSessionCache: void clear()>();
return;
}
}