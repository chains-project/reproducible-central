class io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1 extends java.security.KeyStoreSpi
{
private final java.util.Date creationDate;
final boolean val$keyless;
final java.security.cert.X509Certificate[] val$certificateChain;
void <init>(boolean, java.security.cert.X509Certificate[])
{
io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1 v0;
java.util.Date v3;
java.security.cert.X509Certificate[] v2;
boolean v1;
v0 := @this: io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1;
v1 := @parameter0: boolean;
v2 := @parameter1: java.security.cert.X509Certificate[];
v0.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1: boolean val$keyless> = v1;
v0.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1: java.security.cert.X509Certificate[] val$certificateChain> = v2;
specialinvoke v0.<java.security.KeyStoreSpi: void <init>()>();
v3 = new java.util.Date;
specialinvoke v3.<java.util.Date: void <init>()>();
v0.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1: java.util.Date creationDate> = v3;
return;
}
public java.security.Key engineGetKey(java.lang.String, char[]) throws java.security.UnrecoverableKeyException
{
io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1 v0;
long v5;
java.lang.Exception v7;
io.netty.handler.ssl.OpenSslPrivateKey v9;
java.security.UnrecoverableKeyException v8;
char[] v2;
java.lang.String v1, v6;
boolean v3, v4;
v0 := @this: io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: char[];
v3 = virtualinvoke v0.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1: boolean engineContainsAlias(java.lang.String)>(v1);
if v3 == 0 goto label7;
v4 = v0.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1: boolean val$keyless>;
if v4 == 0 goto label1;
v5 = 0L;
goto label6;
label1:
if v2 != null goto label2;
v6 = null;
goto label3;
label2:
v6 = new java.lang.String;
specialinvoke v6.<java.lang.String: void <init>(char[])>(v2);
label3:
v5 = staticinvoke <io.netty.internal.tcnative.SSL: long loadPrivateKeyFromEngine(java.lang.String,java.lang.String)>(v1, v6);
label4:
goto label6;
label5:
v7 := @caughtexception;
v8 = new java.security.UnrecoverableKeyException;
specialinvoke v8.<java.security.UnrecoverableKeyException: void <init>(java.lang.String)>("Unable to load key from engine");
virtualinvoke v8.<java.security.UnrecoverableKeyException: java.lang.Throwable initCause(java.lang.Throwable)>(v7);
throw v8;
label6:
v9 = new io.netty.handler.ssl.OpenSslPrivateKey;
specialinvoke v9.<io.netty.handler.ssl.OpenSslPrivateKey: void <init>(long)>(v5);
return v9;
label7:
return null;
catch java.lang.Exception from label1 to label4 with label5;
}
public java.security.cert.Certificate[] engineGetCertificateChain(java.lang.String)
{
io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1 v0;
java.lang.Object v4;
java.lang.String v1;
java.security.cert.X509Certificate[] v3;
boolean v2;
v0 := @this: io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1: boolean engineContainsAlias(java.lang.String)>(v1);
if v2 == 0 goto label1;
v3 = v0.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1: java.security.cert.X509Certificate[] val$certificateChain>;
v4 = virtualinvoke v3.<java.lang.Object: java.lang.Object clone()>();
goto label2;
label1:
v4 = null;
label2:
return v4;
}
public java.security.cert.Certificate engineGetCertificate(java.lang.String)
{
io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1 v0;
java.security.cert.X509Certificate v4;
java.lang.String v1;
java.security.cert.X509Certificate[] v3;
boolean v2;
v0 := @this: io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1: boolean engineContainsAlias(java.lang.String)>(v1);
if v2 == 0 goto label1;
v3 = v0.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1: java.security.cert.X509Certificate[] val$certificateChain>;
v4 = v3[0];
goto label2;
label1:
v4 = null;
label2:
return v4;
}
public java.util.Date engineGetCreationDate(java.lang.String)
{
io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1 v0;
java.util.Date v3;
java.lang.String v1;
boolean v2;
v0 := @this: io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1: boolean engineContainsAlias(java.lang.String)>(v1);
if v2 == 0 goto label1;
v3 = v0.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1: java.util.Date creationDate>;
goto label2;
label1:
v3 = null;
label2:
return v3;
}
public void engineSetKeyEntry(java.lang.String, java.security.Key, char[], java.security.cert.Certificate[]) throws java.security.KeyStoreException
{
io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1 v0;
java.security.Key v2;
char[] v3;
java.security.cert.Certificate[] v4;
java.lang.String v1;
java.security.KeyStoreException v5;
v0 := @this: io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.security.Key;
v3 := @parameter2: char[];
v4 := @parameter3: java.security.cert.Certificate[];
v5 = new java.security.KeyStoreException;
specialinvoke v5.<java.security.KeyStoreException: void <init>(java.lang.String)>("Not supported");
throw v5;
}
public void engineSetKeyEntry(java.lang.String, byte[], java.security.cert.Certificate[]) throws java.security.KeyStoreException
{
io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1 v0;
byte[] v2;
java.security.cert.Certificate[] v3;
java.lang.String v1;
java.security.KeyStoreException v4;
v0 := @this: io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: byte[];
v3 := @parameter2: java.security.cert.Certificate[];
v4 = new java.security.KeyStoreException;
specialinvoke v4.<java.security.KeyStoreException: void <init>(java.lang.String)>("Not supported");
throw v4;
}
public void engineSetCertificateEntry(java.lang.String, java.security.cert.Certificate) throws java.security.KeyStoreException
{
io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1 v0;
java.security.cert.Certificate v2;
java.lang.String v1;
java.security.KeyStoreException v3;
v0 := @this: io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.security.cert.Certificate;
v3 = new java.security.KeyStoreException;
specialinvoke v3.<java.security.KeyStoreException: void <init>(java.lang.String)>("Not supported");
throw v3;
}
public void engineDeleteEntry(java.lang.String) throws java.security.KeyStoreException
{
io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1 v0;
java.lang.String v1;
java.security.KeyStoreException v2;
v0 := @this: io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1;
v1 := @parameter0: java.lang.String;
v2 = new java.security.KeyStoreException;
specialinvoke v2.<java.security.KeyStoreException: void <init>(java.lang.String)>("Not supported");
throw v2;
}
public java.util.Enumeration engineAliases()
{
io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1 v0;
java.util.Set v1;
java.util.Enumeration v2;
v0 := @this: io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1;
v1 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>("key");
v2 = staticinvoke <java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>(v1);
return v2;
}
public boolean engineContainsAlias(java.lang.String)
{
io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1 v0;
java.lang.String v1, v2;
boolean v3;
v0 := @this: io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1;
v1 := @parameter0: java.lang.String;
v2 = "key";
v3 = virtualinvoke v2.<java.lang.String: boolean equals(java.lang.Object)>(v1);
return v3;
}
public int engineSize()
{
io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1 v0;
v0 := @this: io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1;
return 1;
}
public boolean engineIsKeyEntry(java.lang.String)
{
io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1 v0;
java.lang.String v1;
boolean v2;
v0 := @this: io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1: boolean engineContainsAlias(java.lang.String)>(v1);
return v2;
}
public boolean engineIsCertificateEntry(java.lang.String)
{
io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1 v0;
java.lang.String v1;
boolean v2;
v0 := @this: io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1: boolean engineContainsAlias(java.lang.String)>(v1);
return v2;
}
public java.lang.String engineGetCertificateAlias(java.security.cert.Certificate)
{
io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1 v0;
java.security.cert.X509Certificate v6;
java.security.cert.Certificate v1;
int v4, v5;
java.security.cert.X509Certificate[] v3;
boolean v2, v7;
v0 := @this: io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1;
v1 := @parameter0: java.security.cert.Certificate;
v2 = v1 instanceof java.security.cert.X509Certificate;
if v2 == 0 goto label3;
v3 = v0.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1: java.security.cert.X509Certificate[] val$certificateChain>;
v4 = lengthof v3;
v5 = 0;
label1:
if v5 >= v4 goto label3;
v6 = v3[v5];
v7 = virtualinvoke v6.<java.security.cert.X509Certificate: boolean equals(java.lang.Object)>(v1);
if v7 == 0 goto label2;
return "key";
label2:
v5 = v5 + 1;
goto label1;
label3:
return null;
}
public void engineStore(java.io.OutputStream, char[])
{
io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1 v0;
java.io.OutputStream v1;
java.lang.UnsupportedOperationException v3;
char[] v2;
v0 := @this: io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1;
v1 := @parameter0: java.io.OutputStream;
v2 := @parameter1: char[];
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>()>();
throw v3;
}
public void engineLoad(java.io.InputStream, char[])
{
io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1 v0;
java.lang.UnsupportedOperationException v3;
char[] v2;
java.io.InputStream v1;
v0 := @this: io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore$1;
v1 := @parameter0: java.io.InputStream;
v2 := @parameter1: char[];
if v1 == null goto label1;
if v2 == null goto label1;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>()>();
throw v3;
label1:
return;
}
}