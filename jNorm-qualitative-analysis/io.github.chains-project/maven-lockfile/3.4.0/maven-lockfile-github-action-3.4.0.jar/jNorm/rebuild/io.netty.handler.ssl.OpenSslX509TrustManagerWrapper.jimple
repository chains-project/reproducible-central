final class io.netty.handler.ssl.OpenSslX509TrustManagerWrapper extends java.lang.Object
{
private static final io.netty.util.internal.logging.InternalLogger LOGGER;
private static final io.netty.handler.ssl.OpenSslX509TrustManagerWrapper$TrustManagerWrapper WRAPPER;
private void <init>()
{
io.netty.handler.ssl.OpenSslX509TrustManagerWrapper v0;
v0 := @this: io.netty.handler.ssl.OpenSslX509TrustManagerWrapper;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static javax.net.ssl.X509TrustManager wrapIfNeeded(javax.net.ssl.X509TrustManager)
{
io.netty.handler.ssl.OpenSslX509TrustManagerWrapper$TrustManagerWrapper v1;
javax.net.ssl.X509TrustManager v0, v2;
v0 := @parameter0: javax.net.ssl.X509TrustManager;
v1 = <io.netty.handler.ssl.OpenSslX509TrustManagerWrapper: io.netty.handler.ssl.OpenSslX509TrustManagerWrapper$TrustManagerWrapper WRAPPER>;
v2 = interfaceinvoke v1.<io.netty.handler.ssl.OpenSslX509TrustManagerWrapper$TrustManagerWrapper: javax.net.ssl.X509TrustManager wrapIfNeeded(javax.net.ssl.X509TrustManager)>(v0);
return v2;
}
private static javax.net.ssl.SSLContext newSSLContext() throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
{
javax.net.ssl.SSLContext v0;
v0 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.lang.String)>("TLS", "SunJSSE");
return v0;
}
static void <clinit>()
{
java.lang.Throwable v2, v3, v7;
javax.net.ssl.SSLContext v4;
io.netty.handler.ssl.OpenSslX509TrustManagerWrapper$1 v1;
io.netty.handler.ssl.OpenSslX509TrustManagerWrapper$3 v9;
io.netty.handler.ssl.OpenSslX509TrustManagerWrapper$2 v6;
javax.net.ssl.TrustManager[] v5;
io.netty.util.internal.logging.InternalLogger v0, v12, v13, v8;
java.lang.Object v10;
boolean v11;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/handler/ssl/OpenSslX509TrustManagerWrapper;");
<io.netty.handler.ssl.OpenSslX509TrustManagerWrapper: io.netty.util.internal.logging.InternalLogger LOGGER> = v0;
v1 = new io.netty.handler.ssl.OpenSslX509TrustManagerWrapper$1;
specialinvoke v1.<io.netty.handler.ssl.OpenSslX509TrustManagerWrapper$1: void <init>()>();
v2 = null;
v3 = staticinvoke <io.netty.util.internal.PlatformDependent: java.lang.Throwable getUnsafeUnavailabilityCause()>();
if v3 != null goto label6;
label1:
v4 = staticinvoke <io.netty.handler.ssl.OpenSslX509TrustManagerWrapper: javax.net.ssl.SSLContext newSSLContext()>();
v5 = newarray (javax.net.ssl.TrustManager)[1];
v6 = new io.netty.handler.ssl.OpenSslX509TrustManagerWrapper$2;
specialinvoke v6.<io.netty.handler.ssl.OpenSslX509TrustManagerWrapper$2: void <init>()>();
v5[0] = v6;
virtualinvoke v4.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(null, v5, null);
label2:
goto label4;
label3:
v7 := @caughtexception;
v4 = null;
v2 = v7;
label4:
if v2 == null goto label5;
v8 = <io.netty.handler.ssl.OpenSslX509TrustManagerWrapper: io.netty.util.internal.logging.InternalLogger LOGGER>;
interfaceinvoke v8.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Throwable)>("Unable to access wrapped TrustManager", v2);
goto label7;
label5:
v9 = new io.netty.handler.ssl.OpenSslX509TrustManagerWrapper$3;
specialinvoke v9.<io.netty.handler.ssl.OpenSslX509TrustManagerWrapper$3: void <init>(javax.net.ssl.SSLContext)>(v4);
v10 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>(v9);
v11 = v10 instanceof java.lang.Throwable;
if v11 == 0 goto label7;
v12 = <io.netty.handler.ssl.OpenSslX509TrustManagerWrapper: io.netty.util.internal.logging.InternalLogger LOGGER>;
interfaceinvoke v12.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Throwable)>("Unable to access wrapped TrustManager", v10);
goto label7;
label6:
v13 = <io.netty.handler.ssl.OpenSslX509TrustManagerWrapper: io.netty.util.internal.logging.InternalLogger LOGGER>;
interfaceinvoke v13.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Throwable)>("Unable to access wrapped TrustManager", null);
label7:
<io.netty.handler.ssl.OpenSslX509TrustManagerWrapper: io.netty.handler.ssl.OpenSslX509TrustManagerWrapper$TrustManagerWrapper WRAPPER> = v10;
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
}