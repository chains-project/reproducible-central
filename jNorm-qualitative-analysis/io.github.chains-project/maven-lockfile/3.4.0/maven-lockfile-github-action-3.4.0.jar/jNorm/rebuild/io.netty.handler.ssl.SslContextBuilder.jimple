public final class io.netty.handler.ssl.SslContextBuilder extends java.lang.Object
{
private static final java.util.Map$Entry[] EMPTY_ENTRIES;
private final boolean forServer;
private io.netty.handler.ssl.SslProvider provider;
private java.security.Provider sslContextProvider;
private java.security.cert.X509Certificate[] trustCertCollection;
private javax.net.ssl.TrustManagerFactory trustManagerFactory;
private java.security.cert.X509Certificate[] keyCertChain;
private java.security.PrivateKey key;
private java.lang.String keyPassword;
private javax.net.ssl.KeyManagerFactory keyManagerFactory;
private java.lang.Iterable ciphers;
private io.netty.handler.ssl.CipherSuiteFilter cipherFilter;
private io.netty.handler.ssl.ApplicationProtocolConfig apn;
private long sessionCacheSize;
private long sessionTimeout;
private io.netty.handler.ssl.ClientAuth clientAuth;
private java.lang.String[] protocols;
private boolean startTls;
private boolean enableOcsp;
private java.lang.String keyStoreType;
private final java.util.Map options;
public static io.netty.handler.ssl.SslContextBuilder forClient()
{
io.netty.handler.ssl.SslContextBuilder v0;
v0 = new io.netty.handler.ssl.SslContextBuilder;
specialinvoke v0.<io.netty.handler.ssl.SslContextBuilder: void <init>(boolean)>(0);
return v0;
}
public static io.netty.handler.ssl.SslContextBuilder forServer(java.io.File, java.io.File)
{
io.netty.handler.ssl.SslContextBuilder v2, v3;
java.io.File v0, v1;
v0 := @parameter0: java.io.File;
v1 := @parameter1: java.io.File;
v2 = new io.netty.handler.ssl.SslContextBuilder;
specialinvoke v2.<io.netty.handler.ssl.SslContextBuilder: void <init>(boolean)>(1);
v3 = virtualinvoke v2.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder keyManager(java.io.File,java.io.File)>(v0, v1);
return v3;
}
public static io.netty.handler.ssl.SslContextBuilder forServer(java.io.InputStream, java.io.InputStream)
{
io.netty.handler.ssl.SslContextBuilder v2, v3;
java.io.InputStream v0, v1;
v0 := @parameter0: java.io.InputStream;
v1 := @parameter1: java.io.InputStream;
v2 = new io.netty.handler.ssl.SslContextBuilder;
specialinvoke v2.<io.netty.handler.ssl.SslContextBuilder: void <init>(boolean)>(1);
v3 = virtualinvoke v2.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder keyManager(java.io.InputStream,java.io.InputStream)>(v0, v1);
return v3;
}
public static transient io.netty.handler.ssl.SslContextBuilder forServer(java.security.PrivateKey, java.security.cert.X509Certificate[])
{
java.security.PrivateKey v0;
io.netty.handler.ssl.SslContextBuilder v2, v3;
java.security.cert.X509Certificate[] v1;
v0 := @parameter0: java.security.PrivateKey;
v1 := @parameter1: java.security.cert.X509Certificate[];
v2 = new io.netty.handler.ssl.SslContextBuilder;
specialinvoke v2.<io.netty.handler.ssl.SslContextBuilder: void <init>(boolean)>(1);
v3 = virtualinvoke v2.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder keyManager(java.security.PrivateKey,java.security.cert.X509Certificate[])>(v0, v1);
return v3;
}
public static io.netty.handler.ssl.SslContextBuilder forServer(java.security.PrivateKey, java.lang.Iterable)
{
java.lang.Object[] v3;
java.security.PrivateKey v0;
io.netty.handler.ssl.SslContextBuilder v4;
java.security.cert.X509Certificate[] v2;
java.lang.Iterable v1;
v0 := @parameter0: java.security.PrivateKey;
v1 := @parameter1: java.lang.Iterable;
v2 = <io.netty.util.internal.EmptyArrays: java.security.cert.X509Certificate[] EMPTY_X509_CERTIFICATES>;
v3 = staticinvoke <io.netty.handler.ssl.SslContextBuilder: java.lang.Object[] toArray(java.lang.Iterable,java.lang.Object[])>(v1, v2);
v4 = staticinvoke <io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder forServer(java.security.PrivateKey,java.security.cert.X509Certificate[])>(v0, v3);
return v4;
}
public static io.netty.handler.ssl.SslContextBuilder forServer(java.io.File, java.io.File, java.lang.String)
{
io.netty.handler.ssl.SslContextBuilder v3, v4;
java.lang.String v2;
java.io.File v0, v1;
v0 := @parameter0: java.io.File;
v1 := @parameter1: java.io.File;
v2 := @parameter2: java.lang.String;
v3 = new io.netty.handler.ssl.SslContextBuilder;
specialinvoke v3.<io.netty.handler.ssl.SslContextBuilder: void <init>(boolean)>(1);
v4 = virtualinvoke v3.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder keyManager(java.io.File,java.io.File,java.lang.String)>(v0, v1, v2);
return v4;
}
public static io.netty.handler.ssl.SslContextBuilder forServer(java.io.InputStream, java.io.InputStream, java.lang.String)
{
io.netty.handler.ssl.SslContextBuilder v3, v4;
java.lang.String v2;
java.io.InputStream v0, v1;
v0 := @parameter0: java.io.InputStream;
v1 := @parameter1: java.io.InputStream;
v2 := @parameter2: java.lang.String;
v3 = new io.netty.handler.ssl.SslContextBuilder;
specialinvoke v3.<io.netty.handler.ssl.SslContextBuilder: void <init>(boolean)>(1);
v4 = virtualinvoke v3.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder keyManager(java.io.InputStream,java.io.InputStream,java.lang.String)>(v0, v1, v2);
return v4;
}
public static transient io.netty.handler.ssl.SslContextBuilder forServer(java.security.PrivateKey, java.lang.String, java.security.cert.X509Certificate[])
{
java.security.PrivateKey v0;
io.netty.handler.ssl.SslContextBuilder v3, v4;
java.lang.String v1;
java.security.cert.X509Certificate[] v2;
v0 := @parameter0: java.security.PrivateKey;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.security.cert.X509Certificate[];
v3 = new io.netty.handler.ssl.SslContextBuilder;
specialinvoke v3.<io.netty.handler.ssl.SslContextBuilder: void <init>(boolean)>(1);
v4 = virtualinvoke v3.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder keyManager(java.security.PrivateKey,java.lang.String,java.security.cert.X509Certificate[])>(v0, v1, v2);
return v4;
}
public static io.netty.handler.ssl.SslContextBuilder forServer(java.security.PrivateKey, java.lang.String, java.lang.Iterable)
{
java.lang.Object[] v4;
java.security.PrivateKey v0;
io.netty.handler.ssl.SslContextBuilder v5;
java.lang.String v1;
java.security.cert.X509Certificate[] v3;
java.lang.Iterable v2;
v0 := @parameter0: java.security.PrivateKey;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.Iterable;
v3 = <io.netty.util.internal.EmptyArrays: java.security.cert.X509Certificate[] EMPTY_X509_CERTIFICATES>;
v4 = staticinvoke <io.netty.handler.ssl.SslContextBuilder: java.lang.Object[] toArray(java.lang.Iterable,java.lang.Object[])>(v2, v3);
v5 = staticinvoke <io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder forServer(java.security.PrivateKey,java.lang.String,java.security.cert.X509Certificate[])>(v0, v1, v4);
return v5;
}
public static io.netty.handler.ssl.SslContextBuilder forServer(javax.net.ssl.KeyManagerFactory)
{
io.netty.handler.ssl.SslContextBuilder v1, v2;
javax.net.ssl.KeyManagerFactory v0;
v0 := @parameter0: javax.net.ssl.KeyManagerFactory;
v1 = new io.netty.handler.ssl.SslContextBuilder;
specialinvoke v1.<io.netty.handler.ssl.SslContextBuilder: void <init>(boolean)>(1);
v2 = virtualinvoke v1.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder keyManager(javax.net.ssl.KeyManagerFactory)>(v0);
return v2;
}
public static io.netty.handler.ssl.SslContextBuilder forServer(javax.net.ssl.KeyManager)
{
io.netty.handler.ssl.SslContextBuilder v1, v2;
javax.net.ssl.KeyManager v0;
v0 := @parameter0: javax.net.ssl.KeyManager;
v1 = new io.netty.handler.ssl.SslContextBuilder;
specialinvoke v1.<io.netty.handler.ssl.SslContextBuilder: void <init>(boolean)>(1);
v2 = virtualinvoke v1.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder keyManager(javax.net.ssl.KeyManager)>(v0);
return v2;
}
private void <init>(boolean)
{
io.netty.handler.ssl.IdentityCipherSuiteFilter v2;
io.netty.handler.ssl.ClientAuth v3;
io.netty.handler.ssl.SslContextBuilder v0;
java.util.HashMap v5;
java.lang.String v4;
boolean v1;
v0 := @this: io.netty.handler.ssl.SslContextBuilder;
v1 := @parameter0: boolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = <io.netty.handler.ssl.IdentityCipherSuiteFilter: io.netty.handler.ssl.IdentityCipherSuiteFilter INSTANCE>;
v0.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.CipherSuiteFilter cipherFilter> = v2;
v3 = <io.netty.handler.ssl.ClientAuth: io.netty.handler.ssl.ClientAuth NONE>;
v0.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.ClientAuth clientAuth> = v3;
v4 = staticinvoke <java.security.KeyStore: java.lang.String getDefaultType()>();
v0.<io.netty.handler.ssl.SslContextBuilder: java.lang.String keyStoreType> = v4;
v5 = new java.util.HashMap;
specialinvoke v5.<java.util.HashMap: void <init>()>();
v0.<io.netty.handler.ssl.SslContextBuilder: java.util.Map options> = v5;
v0.<io.netty.handler.ssl.SslContextBuilder: boolean forServer> = v1;
return;
}
public io.netty.handler.ssl.SslContextBuilder option(io.netty.handler.ssl.SslContextOption, java.lang.Object)
{
io.netty.handler.ssl.SslContextOption v1;
java.util.Map v3, v4;
io.netty.handler.ssl.SslContextBuilder v0;
java.lang.Object v2;
v0 := @this: io.netty.handler.ssl.SslContextBuilder;
v1 := @parameter0: io.netty.handler.ssl.SslContextOption;
v2 := @parameter1: java.lang.Object;
if v2 != null goto label1;
v3 = v0.<io.netty.handler.ssl.SslContextBuilder: java.util.Map options>;
interfaceinvoke v3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v1);
goto label2;
label1:
v4 = v0.<io.netty.handler.ssl.SslContextBuilder: java.util.Map options>;
interfaceinvoke v4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v2);
label2:
return v0;
}
public io.netty.handler.ssl.SslContextBuilder sslProvider(io.netty.handler.ssl.SslProvider)
{
io.netty.handler.ssl.SslContextBuilder v0;
io.netty.handler.ssl.SslProvider v1;
v0 := @this: io.netty.handler.ssl.SslContextBuilder;
v1 := @parameter0: io.netty.handler.ssl.SslProvider;
v0.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslProvider provider> = v1;
return v0;
}
public io.netty.handler.ssl.SslContextBuilder keyStoreType(java.lang.String)
{
io.netty.handler.ssl.SslContextBuilder v0;
java.lang.String v1;
v0 := @this: io.netty.handler.ssl.SslContextBuilder;
v1 := @parameter0: java.lang.String;
v0.<io.netty.handler.ssl.SslContextBuilder: java.lang.String keyStoreType> = v1;
return v0;
}
public io.netty.handler.ssl.SslContextBuilder sslContextProvider(java.security.Provider)
{
io.netty.handler.ssl.SslContextBuilder v0;
java.security.Provider v1;
v0 := @this: io.netty.handler.ssl.SslContextBuilder;
v1 := @parameter0: java.security.Provider;
v0.<io.netty.handler.ssl.SslContextBuilder: java.security.Provider sslContextProvider> = v1;
return v0;
}
public io.netty.handler.ssl.SslContextBuilder trustManager(java.io.File)
{
io.netty.handler.ssl.SslContextBuilder v0, v3;
java.lang.String v6;
java.lang.IllegalArgumentException v5;
java.security.cert.X509Certificate[] v2;
java.io.File v1;
java.lang.Exception v4;
v0 := @this: io.netty.handler.ssl.SslContextBuilder;
v1 := @parameter0: java.io.File;
label1:
v2 = staticinvoke <io.netty.handler.ssl.SslContext: java.security.cert.X509Certificate[] toX509Certificates(java.io.File)>(v1);
v3 = virtualinvoke v0.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder trustManager(java.security.cert.X509Certificate[])>(v2);
label2:
return v3;
label3:
v4 := @caughtexception;
v5 = new java.lang.IllegalArgumentException;
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.io.File)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("File does not contain valid certificates: \u0001");
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>(v6, v4);
throw v5;
catch java.lang.Exception from label1 to label2 with label3;
}
public io.netty.handler.ssl.SslContextBuilder trustManager(java.io.InputStream)
{
io.netty.handler.ssl.SslContextBuilder v0, v3;
java.lang.IllegalArgumentException v5;
java.security.cert.X509Certificate[] v2;
java.lang.Exception v4;
java.io.InputStream v1;
v0 := @this: io.netty.handler.ssl.SslContextBuilder;
v1 := @parameter0: java.io.InputStream;
label1:
v2 = staticinvoke <io.netty.handler.ssl.SslContext: java.security.cert.X509Certificate[] toX509Certificates(java.io.InputStream)>(v1);
v3 = virtualinvoke v0.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder trustManager(java.security.cert.X509Certificate[])>(v2);
label2:
return v3;
label3:
v4 := @caughtexception;
v5 = new java.lang.IllegalArgumentException;
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Input stream does not contain valid certificates.", v4);
throw v5;
catch java.lang.Exception from label1 to label2 with label3;
}
public transient io.netty.handler.ssl.SslContextBuilder trustManager(java.security.cert.X509Certificate[])
{
io.netty.handler.ssl.SslContextBuilder v0;
java.lang.Object v2;
java.security.cert.X509Certificate[] v1;
v0 := @this: io.netty.handler.ssl.SslContextBuilder;
v1 := @parameter0: java.security.cert.X509Certificate[];
if v1 == null goto label1;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.Object clone()>();
goto label2;
label1:
v2 = null;
label2:
v0.<io.netty.handler.ssl.SslContextBuilder: java.security.cert.X509Certificate[] trustCertCollection> = v2;
v0.<io.netty.handler.ssl.SslContextBuilder: javax.net.ssl.TrustManagerFactory trustManagerFactory> = null;
return v0;
}
public io.netty.handler.ssl.SslContextBuilder trustManager(java.lang.Iterable)
{
java.lang.Object[] v3;
io.netty.handler.ssl.SslContextBuilder v0, v4;
java.security.cert.X509Certificate[] v2;
java.lang.Iterable v1;
v0 := @this: io.netty.handler.ssl.SslContextBuilder;
v1 := @parameter0: java.lang.Iterable;
v2 = <io.netty.util.internal.EmptyArrays: java.security.cert.X509Certificate[] EMPTY_X509_CERTIFICATES>;
v3 = staticinvoke <io.netty.handler.ssl.SslContextBuilder: java.lang.Object[] toArray(java.lang.Iterable,java.lang.Object[])>(v1, v2);
v4 = virtualinvoke v0.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder trustManager(java.security.cert.X509Certificate[])>(v3);
return v4;
}
public io.netty.handler.ssl.SslContextBuilder trustManager(javax.net.ssl.TrustManagerFactory)
{
io.netty.handler.ssl.SslContextBuilder v0;
javax.net.ssl.TrustManagerFactory v1;
v0 := @this: io.netty.handler.ssl.SslContextBuilder;
v1 := @parameter0: javax.net.ssl.TrustManagerFactory;
v0.<io.netty.handler.ssl.SslContextBuilder: java.security.cert.X509Certificate[] trustCertCollection> = null;
v0.<io.netty.handler.ssl.SslContextBuilder: javax.net.ssl.TrustManagerFactory trustManagerFactory> = v1;
return v0;
}
public io.netty.handler.ssl.SslContextBuilder trustManager(javax.net.ssl.TrustManager)
{
io.netty.handler.ssl.SslContextBuilder v0;
javax.net.ssl.TrustManager v1;
io.netty.handler.ssl.util.TrustManagerFactoryWrapper v2;
v0 := @this: io.netty.handler.ssl.SslContextBuilder;
v1 := @parameter0: javax.net.ssl.TrustManager;
if v1 == null goto label1;
v2 = new io.netty.handler.ssl.util.TrustManagerFactoryWrapper;
specialinvoke v2.<io.netty.handler.ssl.util.TrustManagerFactoryWrapper: void <init>(javax.net.ssl.TrustManager)>(v1);
v0.<io.netty.handler.ssl.SslContextBuilder: javax.net.ssl.TrustManagerFactory trustManagerFactory> = v2;
goto label2;
label1:
v0.<io.netty.handler.ssl.SslContextBuilder: javax.net.ssl.TrustManagerFactory trustManagerFactory> = null;
label2:
v0.<io.netty.handler.ssl.SslContextBuilder: java.security.cert.X509Certificate[] trustCertCollection> = null;
return v0;
}
public io.netty.handler.ssl.SslContextBuilder keyManager(java.io.File, java.io.File)
{
io.netty.handler.ssl.SslContextBuilder v0, v3;
java.io.File v1, v2;
v0 := @this: io.netty.handler.ssl.SslContextBuilder;
v1 := @parameter0: java.io.File;
v2 := @parameter1: java.io.File;
v3 = virtualinvoke v0.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder keyManager(java.io.File,java.io.File,java.lang.String)>(v1, v2, null);
return v3;
}
public io.netty.handler.ssl.SslContextBuilder keyManager(java.io.InputStream, java.io.InputStream)
{
io.netty.handler.ssl.SslContextBuilder v0, v3;
java.io.InputStream v1, v2;
v0 := @this: io.netty.handler.ssl.SslContextBuilder;
v1 := @parameter0: java.io.InputStream;
v2 := @parameter1: java.io.InputStream;
v3 = virtualinvoke v0.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder keyManager(java.io.InputStream,java.io.InputStream,java.lang.String)>(v1, v2, null);
return v3;
}
public transient io.netty.handler.ssl.SslContextBuilder keyManager(java.security.PrivateKey, java.security.cert.X509Certificate[])
{
java.security.PrivateKey v1;
io.netty.handler.ssl.SslContextBuilder v0, v3;
java.security.cert.X509Certificate[] v2;
v0 := @this: io.netty.handler.ssl.SslContextBuilder;
v1 := @parameter0: java.security.PrivateKey;
v2 := @parameter1: java.security.cert.X509Certificate[];
v3 = virtualinvoke v0.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder keyManager(java.security.PrivateKey,java.lang.String,java.security.cert.X509Certificate[])>(v1, null, v2);
return v3;
}
public io.netty.handler.ssl.SslContextBuilder keyManager(java.security.PrivateKey, java.lang.Iterable)
{
java.lang.Object[] v4;
java.security.PrivateKey v1;
io.netty.handler.ssl.SslContextBuilder v0, v5;
java.security.cert.X509Certificate[] v3;
java.lang.Iterable v2;
v0 := @this: io.netty.handler.ssl.SslContextBuilder;
v1 := @parameter0: java.security.PrivateKey;
v2 := @parameter1: java.lang.Iterable;
v3 = <io.netty.util.internal.EmptyArrays: java.security.cert.X509Certificate[] EMPTY_X509_CERTIFICATES>;
v4 = staticinvoke <io.netty.handler.ssl.SslContextBuilder: java.lang.Object[] toArray(java.lang.Iterable,java.lang.Object[])>(v2, v3);
v5 = virtualinvoke v0.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder keyManager(java.security.PrivateKey,java.security.cert.X509Certificate[])>(v1, v4);
return v5;
}
public io.netty.handler.ssl.SslContextBuilder keyManager(java.io.File, java.io.File, java.lang.String)
{
java.lang.IllegalArgumentException v10, v6;
java.io.File v1, v2;
java.lang.Exception v5, v9;
java.security.PrivateKey v8;
io.netty.handler.ssl.SslContextBuilder v0, v12;
java.lang.String v11, v3, v7;
java.security.cert.X509Certificate[] v4;
v0 := @this: io.netty.handler.ssl.SslContextBuilder;
v1 := @parameter0: java.io.File;
v2 := @parameter1: java.io.File;
v3 := @parameter2: java.lang.String;
label1:
v4 = staticinvoke <io.netty.handler.ssl.SslContext: java.security.cert.X509Certificate[] toX509Certificates(java.io.File)>(v1);
label2:
goto label4;
label3:
v5 := @caughtexception;
v6 = new java.lang.IllegalArgumentException;
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.io.File)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("File does not contain valid certificates: \u0001");
specialinvoke v6.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>(v7, v5);
throw v6;
label4:
v8 = staticinvoke <io.netty.handler.ssl.SslContext: java.security.PrivateKey toPrivateKey(java.io.File,java.lang.String)>(v2, v3);
label5:
goto label7;
label6:
v9 := @caughtexception;
v10 = new java.lang.IllegalArgumentException;
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.io.File)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("File does not contain valid private key: \u0001");
specialinvoke v10.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>(v11, v9);
throw v10;
label7:
v12 = virtualinvoke v0.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder keyManager(java.security.PrivateKey,java.lang.String,java.security.cert.X509Certificate[])>(v8, v3, v4);
return v12;
catch java.lang.Exception from label1 to label2 with label3;
catch java.lang.Exception from label4 to label5 with label6;
}
public io.netty.handler.ssl.SslContextBuilder keyManager(java.io.InputStream, java.io.InputStream, java.lang.String)
{
java.lang.IllegalArgumentException v6, v9;
java.lang.Exception v5, v8;
java.security.PrivateKey v7;
io.netty.handler.ssl.SslContextBuilder v0, v10;
java.lang.String v3;
java.security.cert.X509Certificate[] v4;
java.io.InputStream v1, v2;
v0 := @this: io.netty.handler.ssl.SslContextBuilder;
v1 := @parameter0: java.io.InputStream;
v2 := @parameter1: java.io.InputStream;
v3 := @parameter2: java.lang.String;
label1:
v4 = staticinvoke <io.netty.handler.ssl.SslContext: java.security.cert.X509Certificate[] toX509Certificates(java.io.InputStream)>(v1);
label2:
goto label4;
label3:
v5 := @caughtexception;
v6 = new java.lang.IllegalArgumentException;
specialinvoke v6.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Input stream not contain valid certificates.", v5);
throw v6;
label4:
v7 = staticinvoke <io.netty.handler.ssl.SslContext: java.security.PrivateKey toPrivateKey(java.io.InputStream,java.lang.String)>(v2, v3);
label5:
goto label7;
label6:
v8 := @caughtexception;
v9 = new java.lang.IllegalArgumentException;
specialinvoke v9.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Input stream does not contain valid private key.", v8);
throw v9;
label7:
v10 = virtualinvoke v0.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder keyManager(java.security.PrivateKey,java.lang.String,java.security.cert.X509Certificate[])>(v7, v3, v4);
return v10;
catch java.lang.Exception from label1 to label2 with label3;
catch java.lang.Exception from label4 to label5 with label6;
}
public transient io.netty.handler.ssl.SslContextBuilder keyManager(java.security.PrivateKey, java.lang.String, java.security.cert.X509Certificate[])
{
java.security.cert.X509Certificate v8;
java.security.PrivateKey v1;
int v5, v6, v7;
io.netty.handler.ssl.SslContextBuilder v0;
java.lang.Object v9;
java.lang.String v2;
java.security.cert.X509Certificate[] v3;
boolean v4;
v0 := @this: io.netty.handler.ssl.SslContextBuilder;
v1 := @parameter0: java.security.PrivateKey;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.security.cert.X509Certificate[];
v4 = v0.<io.netty.handler.ssl.SslContextBuilder: boolean forServer>;
if v4 == 0 goto label1;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object[] checkNonEmpty(java.lang.Object[],java.lang.String)>(v3, "keyCertChain");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "key required for servers");
label1:
if v3 == null goto label2;
v5 = lengthof v3;
if v5 != 0 goto label3;
label2:
v0.<io.netty.handler.ssl.SslContextBuilder: java.security.cert.X509Certificate[] keyCertChain> = null;
goto label6;
label3:
v6 = lengthof v3;
v7 = 0;
label4:
if v7 >= v6 goto label5;
v8 = v3[v7];
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNullWithIAE(java.lang.Object,java.lang.String)>(v8, "cert");
v7 = v7 + 1;
goto label4;
label5:
v9 = virtualinvoke v3.<java.lang.Object: java.lang.Object clone()>();
v0.<io.netty.handler.ssl.SslContextBuilder: java.security.cert.X509Certificate[] keyCertChain> = v9;
label6:
v0.<io.netty.handler.ssl.SslContextBuilder: java.security.PrivateKey key> = v1;
v0.<io.netty.handler.ssl.SslContextBuilder: java.lang.String keyPassword> = v2;
v0.<io.netty.handler.ssl.SslContextBuilder: javax.net.ssl.KeyManagerFactory keyManagerFactory> = null;
return v0;
}
public io.netty.handler.ssl.SslContextBuilder keyManager(java.security.PrivateKey, java.lang.String, java.lang.Iterable)
{
java.lang.Object[] v5;
java.security.PrivateKey v1;
io.netty.handler.ssl.SslContextBuilder v0, v6;
java.lang.String v2;
java.security.cert.X509Certificate[] v4;
java.lang.Iterable v3;
v0 := @this: io.netty.handler.ssl.SslContextBuilder;
v1 := @parameter0: java.security.PrivateKey;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.Iterable;
v4 = <io.netty.util.internal.EmptyArrays: java.security.cert.X509Certificate[] EMPTY_X509_CERTIFICATES>;
v5 = staticinvoke <io.netty.handler.ssl.SslContextBuilder: java.lang.Object[] toArray(java.lang.Iterable,java.lang.Object[])>(v3, v4);
v6 = virtualinvoke v0.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder keyManager(java.security.PrivateKey,java.lang.String,java.security.cert.X509Certificate[])>(v1, v2, v5);
return v6;
}
public io.netty.handler.ssl.SslContextBuilder keyManager(javax.net.ssl.KeyManagerFactory)
{
io.netty.handler.ssl.SslContextBuilder v0;
javax.net.ssl.KeyManagerFactory v1;
boolean v2;
v0 := @this: io.netty.handler.ssl.SslContextBuilder;
v1 := @parameter0: javax.net.ssl.KeyManagerFactory;
v2 = v0.<io.netty.handler.ssl.SslContextBuilder: boolean forServer>;
if v2 == 0 goto label1;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "keyManagerFactory required for servers");
label1:
v0.<io.netty.handler.ssl.SslContextBuilder: java.security.cert.X509Certificate[] keyCertChain> = null;
v0.<io.netty.handler.ssl.SslContextBuilder: java.security.PrivateKey key> = null;
v0.<io.netty.handler.ssl.SslContextBuilder: java.lang.String keyPassword> = null;
v0.<io.netty.handler.ssl.SslContextBuilder: javax.net.ssl.KeyManagerFactory keyManagerFactory> = v1;
return v0;
}
public io.netty.handler.ssl.SslContextBuilder keyManager(javax.net.ssl.KeyManager)
{
io.netty.handler.ssl.SslContextBuilder v0;
javax.net.ssl.KeyManager v1;
boolean v2;
io.netty.handler.ssl.util.KeyManagerFactoryWrapper v3;
v0 := @this: io.netty.handler.ssl.SslContextBuilder;
v1 := @parameter0: javax.net.ssl.KeyManager;
v2 = v0.<io.netty.handler.ssl.SslContextBuilder: boolean forServer>;
if v2 == 0 goto label1;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "keyManager required for servers");
label1:
if v1 == null goto label2;
v3 = new io.netty.handler.ssl.util.KeyManagerFactoryWrapper;
specialinvoke v3.<io.netty.handler.ssl.util.KeyManagerFactoryWrapper: void <init>(javax.net.ssl.KeyManager)>(v1);
v0.<io.netty.handler.ssl.SslContextBuilder: javax.net.ssl.KeyManagerFactory keyManagerFactory> = v3;
goto label3;
label2:
v0.<io.netty.handler.ssl.SslContextBuilder: javax.net.ssl.KeyManagerFactory keyManagerFactory> = null;
label3:
v0.<io.netty.handler.ssl.SslContextBuilder: java.security.cert.X509Certificate[] keyCertChain> = null;
v0.<io.netty.handler.ssl.SslContextBuilder: java.security.PrivateKey key> = null;
v0.<io.netty.handler.ssl.SslContextBuilder: java.lang.String keyPassword> = null;
return v0;
}
public io.netty.handler.ssl.SslContextBuilder ciphers(java.lang.Iterable)
{
io.netty.handler.ssl.IdentityCipherSuiteFilter v2;
io.netty.handler.ssl.SslContextBuilder v0, v3;
java.lang.Iterable v1;
v0 := @this: io.netty.handler.ssl.SslContextBuilder;
v1 := @parameter0: java.lang.Iterable;
v2 = <io.netty.handler.ssl.IdentityCipherSuiteFilter: io.netty.handler.ssl.IdentityCipherSuiteFilter INSTANCE>;
v3 = virtualinvoke v0.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder ciphers(java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter)>(v1, v2);
return v3;
}
public io.netty.handler.ssl.SslContextBuilder ciphers(java.lang.Iterable, io.netty.handler.ssl.CipherSuiteFilter)
{
io.netty.handler.ssl.CipherSuiteFilter v2;
io.netty.handler.ssl.SslContextBuilder v0;
java.lang.Object v3;
java.lang.Iterable v1;
v0 := @this: io.netty.handler.ssl.SslContextBuilder;
v1 := @parameter0: java.lang.Iterable;
v2 := @parameter1: io.netty.handler.ssl.CipherSuiteFilter;
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "cipherFilter");
v0.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.CipherSuiteFilter cipherFilter> = v3;
v0.<io.netty.handler.ssl.SslContextBuilder: java.lang.Iterable ciphers> = v1;
return v0;
}
public io.netty.handler.ssl.SslContextBuilder applicationProtocolConfig(io.netty.handler.ssl.ApplicationProtocolConfig)
{
io.netty.handler.ssl.SslContextBuilder v0;
io.netty.handler.ssl.ApplicationProtocolConfig v1;
v0 := @this: io.netty.handler.ssl.SslContextBuilder;
v1 := @parameter0: io.netty.handler.ssl.ApplicationProtocolConfig;
v0.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.ApplicationProtocolConfig apn> = v1;
return v0;
}
public io.netty.handler.ssl.SslContextBuilder sessionCacheSize(long)
{
io.netty.handler.ssl.SslContextBuilder v0;
long v1;
v0 := @this: io.netty.handler.ssl.SslContextBuilder;
v1 := @parameter0: long;
v0.<io.netty.handler.ssl.SslContextBuilder: long sessionCacheSize> = v1;
return v0;
}
public io.netty.handler.ssl.SslContextBuilder sessionTimeout(long)
{
io.netty.handler.ssl.SslContextBuilder v0;
long v1;
v0 := @this: io.netty.handler.ssl.SslContextBuilder;
v1 := @parameter0: long;
v0.<io.netty.handler.ssl.SslContextBuilder: long sessionTimeout> = v1;
return v0;
}
public io.netty.handler.ssl.SslContextBuilder clientAuth(io.netty.handler.ssl.ClientAuth)
{
io.netty.handler.ssl.ClientAuth v1;
io.netty.handler.ssl.SslContextBuilder v0;
java.lang.Object v2;
v0 := @this: io.netty.handler.ssl.SslContextBuilder;
v1 := @parameter0: io.netty.handler.ssl.ClientAuth;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "clientAuth");
v0.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.ClientAuth clientAuth> = v2;
return v0;
}
public transient io.netty.handler.ssl.SslContextBuilder protocols(java.lang.String[])
{
io.netty.handler.ssl.SslContextBuilder v0;
java.lang.Object v2;
java.lang.String[] v1;
v0 := @this: io.netty.handler.ssl.SslContextBuilder;
v1 := @parameter0: java.lang.String[];
if v1 == null goto label1;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.Object clone()>();
label1:
v0.<io.netty.handler.ssl.SslContextBuilder: java.lang.String[] protocols> = v2;
return v0;
}
public io.netty.handler.ssl.SslContextBuilder protocols(java.lang.Iterable)
{
java.lang.Object[] v3;
io.netty.handler.ssl.SslContextBuilder v0, v4;
java.lang.String[] v2;
java.lang.Iterable v1;
v0 := @this: io.netty.handler.ssl.SslContextBuilder;
v1 := @parameter0: java.lang.Iterable;
v2 = <io.netty.util.internal.EmptyArrays: java.lang.String[] EMPTY_STRINGS>;
v3 = staticinvoke <io.netty.handler.ssl.SslContextBuilder: java.lang.Object[] toArray(java.lang.Iterable,java.lang.Object[])>(v1, v2);
v4 = virtualinvoke v0.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslContextBuilder protocols(java.lang.String[])>(v3);
return v4;
}
public io.netty.handler.ssl.SslContextBuilder startTls(boolean)
{
io.netty.handler.ssl.SslContextBuilder v0;
boolean v1;
v0 := @this: io.netty.handler.ssl.SslContextBuilder;
v1 := @parameter0: boolean;
v0.<io.netty.handler.ssl.SslContextBuilder: boolean startTls> = v1;
return v0;
}
public io.netty.handler.ssl.SslContextBuilder enableOcsp(boolean)
{
io.netty.handler.ssl.SslContextBuilder v0;
boolean v1;
v0 := @this: io.netty.handler.ssl.SslContextBuilder;
v1 := @parameter0: boolean;
v0.<io.netty.handler.ssl.SslContextBuilder: boolean enableOcsp> = v1;
return v0;
}
public io.netty.handler.ssl.SslContext build() throws javax.net.ssl.SSLException
{
io.netty.handler.ssl.CipherSuiteFilter v11, v34;
io.netty.handler.ssl.ClientAuth v15;
java.util.Map v20, v41;
io.netty.handler.ssl.ApplicationProtocolConfig v12, v35;
boolean v1, v17, v18, v39;
javax.net.ssl.TrustManagerFactory v28, v5;
java.util.Set v21, v42;
java.security.Provider v26, v3;
java.security.PrivateKey v30, v7;
java.security.cert.X509Certificate[] v27, v29, v4, v6;
java.lang.Object[] v23, v44;
java.lang.String[] v16, v36;
long v13, v14, v37, v38;
java.lang.Iterable v10, v33;
java.lang.String v19, v31, v40, v8;
java.util.Map$Entry[] v22, v43;
io.netty.handler.ssl.SslContext v24, v45;
javax.net.ssl.KeyManagerFactory v32, v9;
io.netty.handler.ssl.SslProvider v2, v25;
io.netty.handler.ssl.SslContextBuilder v0;
v0 := @this: io.netty.handler.ssl.SslContextBuilder;
v1 = v0.<io.netty.handler.ssl.SslContextBuilder: boolean forServer>;
if v1 == 0 goto label1;
v2 = v0.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslProvider provider>;
v3 = v0.<io.netty.handler.ssl.SslContextBuilder: java.security.Provider sslContextProvider>;
v4 = v0.<io.netty.handler.ssl.SslContextBuilder: java.security.cert.X509Certificate[] trustCertCollection>;
v5 = v0.<io.netty.handler.ssl.SslContextBuilder: javax.net.ssl.TrustManagerFactory trustManagerFactory>;
v6 = v0.<io.netty.handler.ssl.SslContextBuilder: java.security.cert.X509Certificate[] keyCertChain>;
v7 = v0.<io.netty.handler.ssl.SslContextBuilder: java.security.PrivateKey key>;
v8 = v0.<io.netty.handler.ssl.SslContextBuilder: java.lang.String keyPassword>;
v9 = v0.<io.netty.handler.ssl.SslContextBuilder: javax.net.ssl.KeyManagerFactory keyManagerFactory>;
v10 = v0.<io.netty.handler.ssl.SslContextBuilder: java.lang.Iterable ciphers>;
v11 = v0.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.CipherSuiteFilter cipherFilter>;
v12 = v0.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.ApplicationProtocolConfig apn>;
v13 = v0.<io.netty.handler.ssl.SslContextBuilder: long sessionCacheSize>;
v14 = v0.<io.netty.handler.ssl.SslContextBuilder: long sessionTimeout>;
v15 = v0.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.ClientAuth clientAuth>;
v16 = v0.<io.netty.handler.ssl.SslContextBuilder: java.lang.String[] protocols>;
v17 = v0.<io.netty.handler.ssl.SslContextBuilder: boolean startTls>;
v18 = v0.<io.netty.handler.ssl.SslContextBuilder: boolean enableOcsp>;
v19 = v0.<io.netty.handler.ssl.SslContextBuilder: java.lang.String keyStoreType>;
v20 = v0.<io.netty.handler.ssl.SslContextBuilder: java.util.Map options>;
v21 = interfaceinvoke v20.<java.util.Map: java.util.Set entrySet()>();
v22 = <io.netty.handler.ssl.SslContextBuilder: java.util.Map$Entry[] EMPTY_ENTRIES>;
v23 = staticinvoke <io.netty.handler.ssl.SslContextBuilder: java.lang.Object[] toArray(java.lang.Iterable,java.lang.Object[])>(v21, v22);
v24 = staticinvoke <io.netty.handler.ssl.SslContext: io.netty.handler.ssl.SslContext newServerContextInternal(io.netty.handler.ssl.SslProvider,java.security.Provider,java.security.cert.X509Certificate[],javax.net.ssl.TrustManagerFactory,java.security.cert.X509Certificate[],java.security.PrivateKey,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,long,long,io.netty.handler.ssl.ClientAuth,java.lang.String[],boolean,boolean,java.lang.String,java.util.Map$Entry[])>(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v23);
return v24;
label1:
v25 = v0.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.SslProvider provider>;
v26 = v0.<io.netty.handler.ssl.SslContextBuilder: java.security.Provider sslContextProvider>;
v27 = v0.<io.netty.handler.ssl.SslContextBuilder: java.security.cert.X509Certificate[] trustCertCollection>;
v28 = v0.<io.netty.handler.ssl.SslContextBuilder: javax.net.ssl.TrustManagerFactory trustManagerFactory>;
v29 = v0.<io.netty.handler.ssl.SslContextBuilder: java.security.cert.X509Certificate[] keyCertChain>;
v30 = v0.<io.netty.handler.ssl.SslContextBuilder: java.security.PrivateKey key>;
v31 = v0.<io.netty.handler.ssl.SslContextBuilder: java.lang.String keyPassword>;
v32 = v0.<io.netty.handler.ssl.SslContextBuilder: javax.net.ssl.KeyManagerFactory keyManagerFactory>;
v33 = v0.<io.netty.handler.ssl.SslContextBuilder: java.lang.Iterable ciphers>;
v34 = v0.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.CipherSuiteFilter cipherFilter>;
v35 = v0.<io.netty.handler.ssl.SslContextBuilder: io.netty.handler.ssl.ApplicationProtocolConfig apn>;
v36 = v0.<io.netty.handler.ssl.SslContextBuilder: java.lang.String[] protocols>;
v37 = v0.<io.netty.handler.ssl.SslContextBuilder: long sessionCacheSize>;
v38 = v0.<io.netty.handler.ssl.SslContextBuilder: long sessionTimeout>;
v39 = v0.<io.netty.handler.ssl.SslContextBuilder: boolean enableOcsp>;
v40 = v0.<io.netty.handler.ssl.SslContextBuilder: java.lang.String keyStoreType>;
v41 = v0.<io.netty.handler.ssl.SslContextBuilder: java.util.Map options>;
v42 = interfaceinvoke v41.<java.util.Map: java.util.Set entrySet()>();
v43 = <io.netty.handler.ssl.SslContextBuilder: java.util.Map$Entry[] EMPTY_ENTRIES>;
v44 = staticinvoke <io.netty.handler.ssl.SslContextBuilder: java.lang.Object[] toArray(java.lang.Iterable,java.lang.Object[])>(v42, v43);
v45 = staticinvoke <io.netty.handler.ssl.SslContext: io.netty.handler.ssl.SslContext newClientContextInternal(io.netty.handler.ssl.SslProvider,java.security.Provider,java.security.cert.X509Certificate[],javax.net.ssl.TrustManagerFactory,java.security.cert.X509Certificate[],java.security.PrivateKey,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.ApplicationProtocolConfig,java.lang.String[],long,long,boolean,java.lang.String,java.util.Map$Entry[])>(v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v44);
return v45;
}
private static java.lang.Object[] toArray(java.lang.Iterable, java.lang.Object[])
{
java.lang.Object[] v1, v6;
java.util.Iterator v3;
java.lang.Object v5;
java.lang.Iterable v0;
boolean v4;
java.util.ArrayList v2;
v0 := @parameter0: java.lang.Iterable;
v1 := @parameter1: java.lang.Object[];
if v0 != null goto label1;
return null;
label1:
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
v3 = interfaceinvoke v0.<java.lang.Iterable: java.util.Iterator iterator()>();
label2:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label3;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v5);
goto label2;
label3:
v6 = interfaceinvoke v2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v1);
return v6;
}
static void <clinit>()
{
java.util.Map$Entry[] v0;
v0 = newarray (java.util.Map$Entry)[0];
<io.netty.handler.ssl.SslContextBuilder: java.util.Map$Entry[] EMPTY_ENTRIES> = v0;
return;
}
}