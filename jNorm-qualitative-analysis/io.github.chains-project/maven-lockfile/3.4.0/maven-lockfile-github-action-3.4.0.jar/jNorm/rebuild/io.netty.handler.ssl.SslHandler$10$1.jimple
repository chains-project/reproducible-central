class io.netty.handler.ssl.SslHandler$10$1 extends java.lang.Object implements java.lang.Runnable
{
final long val$closeNotifyReadTimeout;
final io.netty.handler.ssl.SslHandler$10 this$1;
void <init>(io.netty.handler.ssl.SslHandler$10, long)
{
long v2;
io.netty.handler.ssl.SslHandler$10 v1;
io.netty.handler.ssl.SslHandler$10$1 v0;
v0 := @this: io.netty.handler.ssl.SslHandler$10$1;
v1 := @parameter0: io.netty.handler.ssl.SslHandler$10;
v2 := @parameter1: long;
v0.<io.netty.handler.ssl.SslHandler$10$1: io.netty.handler.ssl.SslHandler$10 this$1> = v1;
v0.<io.netty.handler.ssl.SslHandler$10$1: long val$closeNotifyReadTimeout> = v2;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void run()
{
io.netty.handler.ssl.SslHandler$10$1 v0;
long v9;
io.netty.channel.ChannelHandlerContext v12, v14, v7;
io.netty.channel.ChannelPromise v15, v18;
io.netty.handler.ssl.SslHandler$10 v1, v11, v13, v17, v6;
java.lang.Long v10;
boolean v4;
io.netty.channel.ChannelFuture v16;
io.netty.channel.Channel v8;
io.netty.handler.ssl.SslHandler v2;
io.netty.util.internal.logging.InternalLogger v5;
io.netty.handler.ssl.SslHandler$LazyChannelPromise v3;
v0 := @this: io.netty.handler.ssl.SslHandler$10$1;
v1 = v0.<io.netty.handler.ssl.SslHandler$10$1: io.netty.handler.ssl.SslHandler$10 this$1>;
v2 = v1.<io.netty.handler.ssl.SslHandler$10: io.netty.handler.ssl.SslHandler this$0>;
v3 = v2.<io.netty.handler.ssl.SslHandler: io.netty.handler.ssl.SslHandler$LazyChannelPromise sslClosePromise>;
v4 = virtualinvoke v3.<io.netty.handler.ssl.SslHandler$LazyChannelPromise: boolean isDone()>();
if v4 != 0 goto label1;
v5 = <io.netty.handler.ssl.SslHandler: io.netty.util.internal.logging.InternalLogger logger>;
v6 = v0.<io.netty.handler.ssl.SslHandler$10$1: io.netty.handler.ssl.SslHandler$10 this$1>;
v7 = v6.<io.netty.handler.ssl.SslHandler$10: io.netty.channel.ChannelHandlerContext val$ctx>;
v8 = interfaceinvoke v7.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v9 = v0.<io.netty.handler.ssl.SslHandler$10$1: long val$closeNotifyReadTimeout>;
v10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v9);
interfaceinvoke v5.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("{} did not receive close_notify in {}ms; force-closing the connection.", v8, v10);
v11 = v0.<io.netty.handler.ssl.SslHandler$10$1: io.netty.handler.ssl.SslHandler$10 this$1>;
v12 = v11.<io.netty.handler.ssl.SslHandler$10: io.netty.channel.ChannelHandlerContext val$ctx>;
v13 = v0.<io.netty.handler.ssl.SslHandler$10$1: io.netty.handler.ssl.SslHandler$10 this$1>;
v14 = v13.<io.netty.handler.ssl.SslHandler$10: io.netty.channel.ChannelHandlerContext val$ctx>;
v15 = interfaceinvoke v14.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPromise newPromise()>();
v16 = interfaceinvoke v12.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)>(v15);
v17 = v0.<io.netty.handler.ssl.SslHandler$10$1: io.netty.handler.ssl.SslHandler$10 this$1>;
v18 = v17.<io.netty.handler.ssl.SslHandler$10: io.netty.channel.ChannelPromise val$promise>;
staticinvoke <io.netty.handler.ssl.SslHandler: void addCloseListener(io.netty.channel.ChannelFuture,io.netty.channel.ChannelPromise)>(v16, v18);
label1:
return;
}
}