class io.netty.handler.ssl.SslHandler$9 extends java.lang.Object implements java.lang.Runnable
{
final io.netty.channel.ChannelFuture val$flushFuture;
final io.netty.channel.ChannelHandlerContext val$ctx;
final io.netty.channel.ChannelPromise val$promise;
final io.netty.handler.ssl.SslHandler this$0;
void <init>(io.netty.handler.ssl.SslHandler, io.netty.channel.ChannelFuture, io.netty.channel.ChannelHandlerContext, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelHandlerContext v3;
io.netty.channel.ChannelPromise v4;
io.netty.handler.ssl.SslHandler v1;
io.netty.handler.ssl.SslHandler$9 v0;
io.netty.channel.ChannelFuture v2;
v0 := @this: io.netty.handler.ssl.SslHandler$9;
v1 := @parameter0: io.netty.handler.ssl.SslHandler;
v2 := @parameter1: io.netty.channel.ChannelFuture;
v3 := @parameter2: io.netty.channel.ChannelHandlerContext;
v4 := @parameter3: io.netty.channel.ChannelPromise;
v0.<io.netty.handler.ssl.SslHandler$9: io.netty.handler.ssl.SslHandler this$0> = v1;
v0.<io.netty.handler.ssl.SslHandler$9: io.netty.channel.ChannelFuture val$flushFuture> = v2;
v0.<io.netty.handler.ssl.SslHandler$9: io.netty.channel.ChannelHandlerContext val$ctx> = v3;
v0.<io.netty.handler.ssl.SslHandler$9: io.netty.channel.ChannelPromise val$promise> = v4;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void run()
{
io.netty.channel.ChannelFuture v1, v9;
io.netty.channel.Channel v5;
io.netty.channel.ChannelHandlerContext v4, v6, v7;
io.netty.channel.ChannelPromise v10, v8;
io.netty.util.internal.logging.InternalLogger v3;
io.netty.handler.ssl.SslHandler$9 v0;
boolean v2;
v0 := @this: io.netty.handler.ssl.SslHandler$9;
v1 = v0.<io.netty.handler.ssl.SslHandler$9: io.netty.channel.ChannelFuture val$flushFuture>;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelFuture: boolean isDone()>();
if v2 != 0 goto label1;
v3 = <io.netty.handler.ssl.SslHandler: io.netty.util.internal.logging.InternalLogger logger>;
v4 = v0.<io.netty.handler.ssl.SslHandler$9: io.netty.channel.ChannelHandlerContext val$ctx>;
v5 = interfaceinvoke v4.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
interfaceinvoke v3.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object)>("{} Last write attempt timed out; force-closing the connection.", v5);
v6 = v0.<io.netty.handler.ssl.SslHandler$9: io.netty.channel.ChannelHandlerContext val$ctx>;
v7 = v0.<io.netty.handler.ssl.SslHandler$9: io.netty.channel.ChannelHandlerContext val$ctx>;
v8 = interfaceinvoke v7.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPromise newPromise()>();
v9 = interfaceinvoke v6.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)>(v8);
v10 = v0.<io.netty.handler.ssl.SslHandler$9: io.netty.channel.ChannelPromise val$promise>;
staticinvoke <io.netty.handler.ssl.SslHandler: void addCloseListener(io.netty.channel.ChannelFuture,io.netty.channel.ChannelPromise)>(v9, v10);
label1:
return;
}
}