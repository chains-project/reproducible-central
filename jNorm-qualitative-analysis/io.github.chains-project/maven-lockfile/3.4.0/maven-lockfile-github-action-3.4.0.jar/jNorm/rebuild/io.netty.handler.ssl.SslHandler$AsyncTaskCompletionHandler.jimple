final class io.netty.handler.ssl.SslHandler$AsyncTaskCompletionHandler extends java.lang.Object implements java.lang.Runnable
{
private final boolean inUnwrap;
boolean didRun;
boolean resumeLater;
final io.netty.handler.ssl.SslHandler this$0;
void <init>(io.netty.handler.ssl.SslHandler, boolean)
{
io.netty.handler.ssl.SslHandler v1;
io.netty.handler.ssl.SslHandler$AsyncTaskCompletionHandler v0;
boolean v2;
v0 := @this: io.netty.handler.ssl.SslHandler$AsyncTaskCompletionHandler;
v1 := @parameter0: io.netty.handler.ssl.SslHandler;
v2 := @parameter1: boolean;
v0.<io.netty.handler.ssl.SslHandler$AsyncTaskCompletionHandler: io.netty.handler.ssl.SslHandler this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.handler.ssl.SslHandler$AsyncTaskCompletionHandler: boolean inUnwrap> = v2;
return;
}
public void run()
{
io.netty.handler.ssl.SslHandler$SslTasksRunner v4;
io.netty.handler.ssl.SslHandler v2;
io.netty.handler.ssl.SslHandler$AsyncTaskCompletionHandler v0;
boolean v1, v3;
v0 := @this: io.netty.handler.ssl.SslHandler$AsyncTaskCompletionHandler;
v0.<io.netty.handler.ssl.SslHandler$AsyncTaskCompletionHandler: boolean didRun> = 1;
v1 = v0.<io.netty.handler.ssl.SslHandler$AsyncTaskCompletionHandler: boolean resumeLater>;
if v1 == 0 goto label1;
v2 = v0.<io.netty.handler.ssl.SslHandler$AsyncTaskCompletionHandler: io.netty.handler.ssl.SslHandler this$0>;
v3 = v0.<io.netty.handler.ssl.SslHandler$AsyncTaskCompletionHandler: boolean inUnwrap>;
v4 = specialinvoke v2.<io.netty.handler.ssl.SslHandler: io.netty.handler.ssl.SslHandler$SslTasksRunner getTaskRunner(boolean)>(v3);
virtualinvoke v4.<io.netty.handler.ssl.SslHandler$SslTasksRunner: void runComplete()>();
label1:
return;
}
boolean resumeLater()
{
io.netty.handler.ssl.SslHandler$AsyncTaskCompletionHandler v0;
boolean v1;
v0 := @this: io.netty.handler.ssl.SslHandler$AsyncTaskCompletionHandler;
v1 = v0.<io.netty.handler.ssl.SslHandler$AsyncTaskCompletionHandler: boolean didRun>;
if v1 != 0 goto label1;
v0.<io.netty.handler.ssl.SslHandler$AsyncTaskCompletionHandler: boolean resumeLater> = 1;
return 1;
label1:
return 0;
}
}