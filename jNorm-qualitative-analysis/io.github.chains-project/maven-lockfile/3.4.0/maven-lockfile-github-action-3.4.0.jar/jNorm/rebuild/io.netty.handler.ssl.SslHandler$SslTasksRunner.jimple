final class io.netty.handler.ssl.SslHandler$SslTasksRunner extends java.lang.Object implements java.lang.Runnable
{
private final boolean inUnwrap;
private final java.lang.Runnable runCompleteTask;
static final boolean $assertionsDisabled;
final io.netty.handler.ssl.SslHandler this$0;
void <init>(io.netty.handler.ssl.SslHandler, boolean)
{
io.netty.handler.ssl.SslHandler$SslTasksRunner v0;
io.netty.handler.ssl.SslHandler v1;
boolean v2;
io.netty.handler.ssl.SslHandler$SslTasksRunner$1 v3;
v0 := @this: io.netty.handler.ssl.SslHandler$SslTasksRunner;
v1 := @parameter0: io.netty.handler.ssl.SslHandler;
v2 := @parameter1: boolean;
v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new io.netty.handler.ssl.SslHandler$SslTasksRunner$1;
specialinvoke v3.<io.netty.handler.ssl.SslHandler$SslTasksRunner$1: void <init>(io.netty.handler.ssl.SslHandler$SslTasksRunner)>(v0);
v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: java.lang.Runnable runCompleteTask> = v3;
v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: boolean inUnwrap> = v2;
return;
}
private void taskError(java.lang.Throwable)
{
java.lang.Throwable v1, v6;
io.netty.channel.ChannelHandlerContext v12, v5, v9;
io.netty.handler.ssl.SslHandler$SslTasksRunner v0;
io.netty.handler.ssl.SslHandler v10, v11, v3, v4, v7, v8;
boolean v2;
v0 := @this: io.netty.handler.ssl.SslHandler$SslTasksRunner;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: boolean inUnwrap>;
if v2 == 0 goto label4;
label1:
v3 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v4 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v5 = v4.<io.netty.handler.ssl.SslHandler: io.netty.channel.ChannelHandlerContext ctx>;
specialinvoke v3.<io.netty.handler.ssl.SslHandler: void handleUnwrapThrowable(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)>(v5, v1);
label2:
goto label5;
label3:
v6 := @caughtexception;
specialinvoke v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: void safeExceptionCaught(java.lang.Throwable)>(v6);
goto label5;
label4:
v7 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v8 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v9 = v8.<io.netty.handler.ssl.SslHandler: io.netty.channel.ChannelHandlerContext ctx>;
specialinvoke v7.<io.netty.handler.ssl.SslHandler: void setHandshakeFailure(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)>(v9, v1);
v10 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v11 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v12 = v11.<io.netty.handler.ssl.SslHandler: io.netty.channel.ChannelHandlerContext ctx>;
specialinvoke v10.<io.netty.handler.ssl.SslHandler: void forceFlush(io.netty.channel.ChannelHandlerContext)>(v12);
label5:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
private void safeExceptionCaught(java.lang.Throwable)
{
java.lang.Throwable v1, v5, v6;
io.netty.channel.ChannelHandlerContext v4, v8;
io.netty.handler.ssl.SslHandler$SslTasksRunner v0;
io.netty.handler.ssl.SslHandler v2, v3, v7;
v0 := @this: io.netty.handler.ssl.SslHandler$SslTasksRunner;
v1 := @parameter0: java.lang.Throwable;
label1:
v2 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v3 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v4 = v3.<io.netty.handler.ssl.SslHandler: io.netty.channel.ChannelHandlerContext ctx>;
v5 = specialinvoke v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: java.lang.Throwable wrapIfNeeded(java.lang.Throwable)>(v1);
virtualinvoke v2.<io.netty.handler.ssl.SslHandler: void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)>(v4, v5);
label2:
goto label4;
label3:
v6 := @caughtexception;
v7 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v8 = v7.<io.netty.handler.ssl.SslHandler: io.netty.channel.ChannelHandlerContext ctx>;
interfaceinvoke v8.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireExceptionCaught(java.lang.Throwable)>(v6);
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
private java.lang.Throwable wrapIfNeeded(java.lang.Throwable)
{
java.lang.Throwable v1, v4;
io.netty.handler.codec.DecoderException v5;
io.netty.handler.ssl.SslHandler$SslTasksRunner v0;
boolean v2, v3;
v0 := @this: io.netty.handler.ssl.SslHandler$SslTasksRunner;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: boolean inUnwrap>;
if v2 != 0 goto label1;
return v1;
label1:
v3 = v1 instanceof io.netty.handler.codec.DecoderException;
if v3 == 0 goto label2;
v4 = v1;
goto label3;
label2:
v5 = new io.netty.handler.codec.DecoderException;
v4 = v5;
specialinvoke v5.<io.netty.handler.codec.DecoderException: void <init>(java.lang.Throwable)>(v1);
label3:
return v4;
}
private void tryDecodeAgain()
{
java.lang.Throwable v12, v8;
io.netty.channel.ChannelHandlerContext v11, v15, v3, v7;
io.netty.buffer.ByteBuf v4;
io.netty.handler.ssl.SslHandler$SslTasksRunner v0;
io.netty.handler.ssl.SslHandler v1, v10, v13, v14, v2, v5, v6, v9;
v0 := @this: io.netty.handler.ssl.SslHandler$SslTasksRunner;
label1:
v1 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v2 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v3 = v2.<io.netty.handler.ssl.SslHandler: io.netty.channel.ChannelHandlerContext ctx>;
v4 = <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf EMPTY_BUFFER>;
virtualinvoke v1.<io.netty.handler.ssl.SslHandler: void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)>(v3, v4);
label2:
v5 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v6 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v7 = v6.<io.netty.handler.ssl.SslHandler: io.netty.channel.ChannelHandlerContext ctx>;
specialinvoke v5.<io.netty.handler.ssl.SslHandler: void channelReadComplete0(io.netty.channel.ChannelHandlerContext)>(v7);
goto label6;
label3:
v8 := @caughtexception;
specialinvoke v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: void safeExceptionCaught(java.lang.Throwable)>(v8);
label4:
v9 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v10 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v11 = v10.<io.netty.handler.ssl.SslHandler: io.netty.channel.ChannelHandlerContext ctx>;
specialinvoke v9.<io.netty.handler.ssl.SslHandler: void channelReadComplete0(io.netty.channel.ChannelHandlerContext)>(v11);
goto label6;
label5:
v12 := @caughtexception;
v13 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v14 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v15 = v14.<io.netty.handler.ssl.SslHandler: io.netty.channel.ChannelHandlerContext ctx>;
specialinvoke v13.<io.netty.handler.ssl.SslHandler: void channelReadComplete0(io.netty.channel.ChannelHandlerContext)>(v15);
throw v12;
label6:
return;
catch java.lang.Throwable from label1 to label2 with label3;
catch java.lang.Throwable from label3 to label4 with label5;
}
private void resumeOnEventExecutor()
{
javax.net.ssl.SSLEngineResult$HandshakeStatus v10;
int[] v11;
boolean v1, v19, v21, v38, v39, v5;
javax.net.ssl.SSLException v31;
io.netty.handler.ssl.SslHandler v14, v15, v16, v17, v2, v22, v23, v25, v26, v28, v29, v32, v33, v35, v36, v40, v41, v43, v44, v7, v8;
io.netty.util.concurrent.EventExecutor v4;
java.lang.Throwable v20, v46, v48;
java.lang.AssertionError v47, v6;
javax.net.ssl.SSLEngine v9;
io.netty.channel.ChannelHandlerContext v18, v24, v27, v3, v30, v34, v37, v42, v45;
int v12, v13;
io.netty.handler.ssl.SslHandler$SslTasksRunner v0;
v0 := @this: io.netty.handler.ssl.SslHandler$SslTasksRunner;
v1 = <io.netty.handler.ssl.SslHandler$SslTasksRunner: boolean $assertionsDisabled>;
if v1 != 0 goto label01;
v2 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v3 = v2.<io.netty.handler.ssl.SslHandler: io.netty.channel.ChannelHandlerContext ctx>;
v4 = interfaceinvoke v3.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v5 = interfaceinvoke v4.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v5 != 0 goto label01;
v6 = new java.lang.AssertionError;
specialinvoke v6.<java.lang.AssertionError: void <init>()>();
throw v6;
label01:
v7 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
specialinvoke v7.<io.netty.handler.ssl.SslHandler: void clearState(int)>(128);
label02:
v8 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v9 = v8.<io.netty.handler.ssl.SslHandler: javax.net.ssl.SSLEngine engine>;
v10 = virtualinvoke v9.<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();
v11 = <io.netty.handler.ssl.SslHandler$11: int[] $SwitchMap$javax$net$ssl$SSLEngineResult$HandshakeStatus>;
v12 = virtualinvoke v10.<javax.net.ssl.SSLEngineResult$HandshakeStatus: int ordinal()>();
v13 = v11[v12];
tableswitch(v13)
{
case 1: goto label03;
case 2: goto label04;
case 3: goto label04;
case 4: goto label16;
case 5: goto label11;
default: goto label22;
};
label03:
v14 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
specialinvoke v14.<io.netty.handler.ssl.SslHandler: void executeDelegatedTask(io.netty.handler.ssl.SslHandler$SslTasksRunner)>(v0);
goto label24;
label04:
v15 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
specialinvoke v15.<io.netty.handler.ssl.SslHandler: boolean setHandshakeSuccess()>();
label05:
v16 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v17 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v18 = v17.<io.netty.handler.ssl.SslHandler: io.netty.channel.ChannelHandlerContext ctx>;
v19 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: boolean inUnwrap>;
specialinvoke v16.<io.netty.handler.ssl.SslHandler: void wrap(io.netty.channel.ChannelHandlerContext,boolean)>(v18, v19);
label06:
goto label09;
label07:
v20 := @caughtexception;
specialinvoke v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: void taskError(java.lang.Throwable)>(v20);
label08:
return;
label09:
v21 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: boolean inUnwrap>;
if v21 == 0 goto label10;
v22 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v23 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v24 = v23.<io.netty.handler.ssl.SslHandler: io.netty.channel.ChannelHandlerContext ctx>;
specialinvoke v22.<io.netty.handler.ssl.SslHandler: int unwrapNonAppData(io.netty.channel.ChannelHandlerContext)>(v24);
label10:
v25 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v26 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v27 = v26.<io.netty.handler.ssl.SslHandler: io.netty.channel.ChannelHandlerContext ctx>;
specialinvoke v25.<io.netty.handler.ssl.SslHandler: void forceFlush(io.netty.channel.ChannelHandlerContext)>(v27);
specialinvoke v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: void tryDecodeAgain()>();
goto label24;
label11:
v28 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v29 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v30 = v29.<io.netty.handler.ssl.SslHandler: io.netty.channel.ChannelHandlerContext ctx>;
specialinvoke v28.<io.netty.handler.ssl.SslHandler: int unwrapNonAppData(io.netty.channel.ChannelHandlerContext)>(v30);
label12:
goto label15;
label13:
v31 := @caughtexception;
v32 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v33 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v34 = v33.<io.netty.handler.ssl.SslHandler: io.netty.channel.ChannelHandlerContext ctx>;
specialinvoke v32.<io.netty.handler.ssl.SslHandler: void handleUnwrapThrowable(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)>(v34, v31);
label14:
return;
label15:
specialinvoke v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: void tryDecodeAgain()>();
goto label24;
label16:
v35 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v36 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v37 = v36.<io.netty.handler.ssl.SslHandler: io.netty.channel.ChannelHandlerContext ctx>;
v38 = specialinvoke v35.<io.netty.handler.ssl.SslHandler: boolean wrapNonAppData(io.netty.channel.ChannelHandlerContext,boolean)>(v37, 0);
if v38 != 0 goto label17;
v39 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: boolean inUnwrap>;
if v39 == 0 goto label17;
v40 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v41 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v42 = v41.<io.netty.handler.ssl.SslHandler: io.netty.channel.ChannelHandlerContext ctx>;
specialinvoke v40.<io.netty.handler.ssl.SslHandler: int unwrapNonAppData(io.netty.channel.ChannelHandlerContext)>(v42);
label17:
v43 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v44 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v45 = v44.<io.netty.handler.ssl.SslHandler: io.netty.channel.ChannelHandlerContext ctx>;
specialinvoke v43.<io.netty.handler.ssl.SslHandler: void forceFlush(io.netty.channel.ChannelHandlerContext)>(v45);
label18:
goto label21;
label19:
v46 := @caughtexception;
specialinvoke v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: void taskError(java.lang.Throwable)>(v46);
label20:
return;
label21:
specialinvoke v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: void tryDecodeAgain()>();
goto label24;
label22:
v47 = new java.lang.AssertionError;
specialinvoke v47.<java.lang.AssertionError: void <init>()>();
throw v47;
label23:
v48 := @caughtexception;
specialinvoke v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: void safeExceptionCaught(java.lang.Throwable)>(v48);
label24:
return;
catch java.lang.Throwable from label05 to label06 with label07;
catch javax.net.ssl.SSLException from label11 to label12 with label13;
catch java.lang.Throwable from label16 to label18 with label19;
catch java.lang.Throwable from label02 to label08 with label23;
catch java.lang.Throwable from label09 to label14 with label23;
catch java.lang.Throwable from label15 to label20 with label23;
catch java.lang.Throwable from label21 to label23 with label23;
}
void runComplete()
{
io.netty.util.concurrent.EventExecutor v3;
io.netty.channel.ChannelHandlerContext v2;
io.netty.handler.ssl.SslHandler$SslTasksRunner v0;
io.netty.handler.ssl.SslHandler v1;
io.netty.handler.ssl.SslHandler$SslTasksRunner$2 v4;
v0 := @this: io.netty.handler.ssl.SslHandler$SslTasksRunner;
v1 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v2 = v1.<io.netty.handler.ssl.SslHandler: io.netty.channel.ChannelHandlerContext ctx>;
v3 = interfaceinvoke v2.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v4 = new io.netty.handler.ssl.SslHandler$SslTasksRunner$2;
specialinvoke v4.<io.netty.handler.ssl.SslHandler$SslTasksRunner$2: void <init>(io.netty.handler.ssl.SslHandler$SslTasksRunner)>(v0);
interfaceinvoke v3.<io.netty.util.concurrent.EventExecutor: void execute(java.lang.Runnable)>(v4);
return;
}
public void run()
{
java.lang.Throwable v6;
io.netty.handler.ssl.SslHandler$SslTasksRunner v0;
io.netty.handler.ssl.SslHandler v1;
java.lang.Runnable v3, v5;
boolean v4;
javax.net.ssl.SSLEngine v2;
v0 := @this: io.netty.handler.ssl.SslHandler$SslTasksRunner;
label1:
v1 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v2 = v1.<io.netty.handler.ssl.SslHandler: javax.net.ssl.SSLEngine engine>;
v3 = virtualinvoke v2.<javax.net.ssl.SSLEngine: java.lang.Runnable getDelegatedTask()>();
if v3 != null goto label3;
label2:
return;
label3:
v4 = v3 instanceof io.netty.handler.ssl.AsyncRunnable;
if v4 == 0 goto label4;
v5 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: java.lang.Runnable runCompleteTask>;
interfaceinvoke v3.<io.netty.handler.ssl.AsyncRunnable: void run(java.lang.Runnable)>(v5);
goto label7;
label4:
interfaceinvoke v3.<java.lang.Runnable: void run()>();
virtualinvoke v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: void runComplete()>();
label5:
goto label7;
label6:
v6 := @caughtexception;
specialinvoke v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: void handleException(java.lang.Throwable)>(v6);
label7:
return;
catch java.lang.Throwable from label1 to label2 with label6;
catch java.lang.Throwable from label3 to label5 with label6;
}
private void handleException(java.lang.Throwable)
{
io.netty.util.concurrent.EventExecutor v4;
java.lang.Throwable v1;
io.netty.handler.ssl.SslHandler$SslTasksRunner$3 v7;
io.netty.channel.ChannelHandlerContext v11, v3;
java.util.concurrent.RejectedExecutionException v8;
io.netty.handler.ssl.SslHandler$SslTasksRunner v0;
io.netty.handler.ssl.SslHandler v10, v2, v6, v9;
boolean v5;
v0 := @this: io.netty.handler.ssl.SslHandler$SslTasksRunner;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v3 = v2.<io.netty.handler.ssl.SslHandler: io.netty.channel.ChannelHandlerContext ctx>;
v4 = interfaceinvoke v3.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v5 = interfaceinvoke v4.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v5 == 0 goto label1;
v6 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
specialinvoke v6.<io.netty.handler.ssl.SslHandler: void clearState(int)>(128);
specialinvoke v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: void safeExceptionCaught(java.lang.Throwable)>(v1);
goto label4;
label1:
v7 = new io.netty.handler.ssl.SslHandler$SslTasksRunner$3;
specialinvoke v7.<io.netty.handler.ssl.SslHandler$SslTasksRunner$3: void <init>(io.netty.handler.ssl.SslHandler$SslTasksRunner,java.lang.Throwable)>(v0, v1);
interfaceinvoke v4.<io.netty.util.concurrent.EventExecutor: void execute(java.lang.Runnable)>(v7);
label2:
goto label4;
label3:
v8 := @caughtexception;
v9 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
specialinvoke v9.<io.netty.handler.ssl.SslHandler: void clearState(int)>(128);
v10 = v0.<io.netty.handler.ssl.SslHandler$SslTasksRunner: io.netty.handler.ssl.SslHandler this$0>;
v11 = v10.<io.netty.handler.ssl.SslHandler: io.netty.channel.ChannelHandlerContext ctx>;
interfaceinvoke v11.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireExceptionCaught(java.lang.Throwable)>(v1);
label4:
return;
catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/handler/ssl/SslHandler;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.handler.ssl.SslHandler$SslTasksRunner: boolean $assertionsDisabled> = v2;
return;
}
}