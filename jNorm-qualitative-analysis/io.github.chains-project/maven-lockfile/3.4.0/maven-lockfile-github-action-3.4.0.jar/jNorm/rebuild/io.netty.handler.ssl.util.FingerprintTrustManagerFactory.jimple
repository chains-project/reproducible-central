public final class io.netty.handler.ssl.util.FingerprintTrustManagerFactory extends io.netty.handler.ssl.util.SimpleTrustManagerFactory
{
private static final java.util.regex.Pattern FINGERPRINT_PATTERN;
private static final java.util.regex.Pattern FINGERPRINT_STRIP_PATTERN;
private final io.netty.util.concurrent.FastThreadLocal tlmd;
private final javax.net.ssl.TrustManager tm;
private final byte[][] fingerprints;
public static io.netty.handler.ssl.util.FingerprintTrustManagerFactoryBuilder builder(java.lang.String)
{
io.netty.handler.ssl.util.FingerprintTrustManagerFactoryBuilder v1;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = new io.netty.handler.ssl.util.FingerprintTrustManagerFactoryBuilder;
specialinvoke v1.<io.netty.handler.ssl.util.FingerprintTrustManagerFactoryBuilder: void <init>(java.lang.String)>(v0);
return v1;
}
public void <init>(java.lang.Iterable)
{
byte[][] v2;
io.netty.handler.ssl.util.FingerprintTrustManagerFactory v0;
java.lang.Iterable v1;
v0 := @this: io.netty.handler.ssl.util.FingerprintTrustManagerFactory;
v1 := @parameter0: java.lang.Iterable;
v2 = staticinvoke <io.netty.handler.ssl.util.FingerprintTrustManagerFactory: byte[][] toFingerprintArray(java.lang.Iterable)>(v1);
specialinvoke v0.<io.netty.handler.ssl.util.FingerprintTrustManagerFactory: void <init>(java.lang.String,byte[][])>("SHA1", v2);
return;
}
public transient void <init>(java.lang.String[])
{
byte[][] v3;
java.util.List v2;
io.netty.handler.ssl.util.FingerprintTrustManagerFactory v0;
java.lang.String[] v1;
v0 := @this: io.netty.handler.ssl.util.FingerprintTrustManagerFactory;
v1 := @parameter0: java.lang.String[];
v2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
v3 = staticinvoke <io.netty.handler.ssl.util.FingerprintTrustManagerFactory: byte[][] toFingerprintArray(java.lang.Iterable)>(v2);
specialinvoke v0.<io.netty.handler.ssl.util.FingerprintTrustManagerFactory: void <init>(java.lang.String,byte[][])>("SHA1", v3);
return;
}
public transient void <init>(byte[][])
{
byte[][] v1;
io.netty.handler.ssl.util.FingerprintTrustManagerFactory v0;
v0 := @this: io.netty.handler.ssl.util.FingerprintTrustManagerFactory;
v1 := @parameter0: byte[][];
specialinvoke v0.<io.netty.handler.ssl.util.FingerprintTrustManagerFactory: void <init>(java.lang.String,byte[][])>("SHA1", v1);
return;
}
void <init>(java.lang.String, byte[][])
{
byte[] v16;
java.lang.Object[] v19, v29, v9;
java.security.MessageDigest v6;
java.lang.Integer v21, v22;
java.util.ArrayList v12;
io.netty.buffer.ByteBuf v23;
io.netty.handler.ssl.util.FingerprintTrustManagerFactory v0;
int v11, v13, v14, v15, v17, v20, v4;
java.lang.String v1, v10, v24, v25;
java.lang.IllegalArgumentException v18, v5, v8;
byte[][] v2, v28;
io.netty.handler.ssl.util.FingerprintTrustManagerFactory$1 v3;
io.netty.handler.ssl.util.FingerprintTrustManagerFactory$2 v27;
java.security.NoSuchAlgorithmException v7;
java.lang.Object v26;
v0 := @this: io.netty.handler.ssl.util.FingerprintTrustManagerFactory;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: byte[][];
specialinvoke v0.<io.netty.handler.ssl.util.SimpleTrustManagerFactory: void <init>()>();
v3 = new io.netty.handler.ssl.util.FingerprintTrustManagerFactory$1;
specialinvoke v3.<io.netty.handler.ssl.util.FingerprintTrustManagerFactory$1: void <init>(io.netty.handler.ssl.util.FingerprintTrustManagerFactory)>(v0);
v0.<io.netty.handler.ssl.util.FingerprintTrustManagerFactory: javax.net.ssl.TrustManager tm> = v3;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "algorithm");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "fingerprints");
v4 = lengthof v2;
if v4 != 0 goto label1;
v5 = new java.lang.IllegalArgumentException;
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No fingerprints provided");
throw v5;
label1:
v6 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(v1);
label2:
goto label4;
label3:
v7 := @caughtexception;
v8 = new java.lang.IllegalArgumentException;
v9 = newarray (java.lang.Object)[1];
v9[0] = v1;
v10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unsupported hash algorithm: %s", v9);
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>(v10, v7);
throw v8;
label4:
v11 = virtualinvoke v6.<java.security.MessageDigest: int getDigestLength()>();
v12 = new java.util.ArrayList;
v13 = lengthof v2;
specialinvoke v12.<java.util.ArrayList: void <init>(int)>(v13);
v14 = lengthof v2;
v15 = 0;
label5:
if v15 >= v14 goto label7;
v16 = v2[v15];
if v16 == null goto label7;
v17 = lengthof v16;
if v17 == v11 goto label6;
v18 = new java.lang.IllegalArgumentException;
v19 = newarray (java.lang.Object)[3];
v20 = lengthof v16;
v21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v20);
v19[0] = v21;
v22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v11);
v19[1] = v22;
v23 = staticinvoke <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf wrappedBuffer(byte[])>(v16);
v24 = staticinvoke <io.netty.buffer.ByteBufUtil: java.lang.String hexDump(io.netty.buffer.ByteBuf)>(v23);
v19[2] = v24;
v25 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("malformed fingerprint (length is %d but expected %d): %s", v19);
specialinvoke v18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v25);
throw v18;
label6:
v26 = virtualinvoke v16.<java.lang.Object: java.lang.Object clone()>();
interfaceinvoke v12.<java.util.List: boolean add(java.lang.Object)>(v26);
v15 = v15 + 1;
goto label5;
label7:
v27 = new io.netty.handler.ssl.util.FingerprintTrustManagerFactory$2;
specialinvoke v27.<io.netty.handler.ssl.util.FingerprintTrustManagerFactory$2: void <init>(io.netty.handler.ssl.util.FingerprintTrustManagerFactory,java.lang.String)>(v0, v1);
v0.<io.netty.handler.ssl.util.FingerprintTrustManagerFactory: io.netty.util.concurrent.FastThreadLocal tlmd> = v27;
v28 = newarray (byte[])[0];
v29 = interfaceinvoke v12.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v28);
v0.<io.netty.handler.ssl.util.FingerprintTrustManagerFactory: byte[][] fingerprints> = v29;
return;
catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
}
static byte[][] toFingerprintArray(java.lang.Iterable)
{
byte[] v13;
java.lang.Object[] v15;
java.lang.Iterable v0;
java.util.ArrayList v1;
java.util.regex.Matcher v11, v6;
java.lang.String v12, v9;
boolean v3, v7;
java.util.Iterator v2;
java.lang.IllegalArgumentException v8;
byte[][] v14;
java.lang.Object v4;
java.util.regex.Pattern v10, v5;
v0 := @parameter0: java.lang.Iterable;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, "fingerprints");
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v2 = interfaceinvoke v0.<java.lang.Iterable: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label3;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
if v4 == null goto label3;
v5 = <io.netty.handler.ssl.util.FingerprintTrustManagerFactory: java.util.regex.Pattern FINGERPRINT_PATTERN>;
v6 = virtualinvoke v5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v4);
v7 = virtualinvoke v6.<java.util.regex.Matcher: boolean matches()>();
if v7 != 0 goto label2;
v8 = new java.lang.IllegalArgumentException;
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("malformed fingerprint: \u0001");
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v9);
throw v8;
label2:
v10 = <io.netty.handler.ssl.util.FingerprintTrustManagerFactory: java.util.regex.Pattern FINGERPRINT_STRIP_PATTERN>;
v11 = virtualinvoke v10.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v4);
v12 = virtualinvoke v11.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>("");
v13 = staticinvoke <io.netty.util.internal.StringUtil: byte[] decodeHexDump(java.lang.CharSequence)>(v12);
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v13);
goto label1;
label3:
v14 = newarray (byte[])[0];
v15 = interfaceinvoke v1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v14);
return v15;
}
protected void engineInit(java.security.KeyStore) throws java.lang.Exception
{
java.security.KeyStore v1;
io.netty.handler.ssl.util.FingerprintTrustManagerFactory v0;
v0 := @this: io.netty.handler.ssl.util.FingerprintTrustManagerFactory;
v1 := @parameter0: java.security.KeyStore;
return;
}
protected void engineInit(javax.net.ssl.ManagerFactoryParameters) throws java.lang.Exception
{
javax.net.ssl.ManagerFactoryParameters v1;
io.netty.handler.ssl.util.FingerprintTrustManagerFactory v0;
v0 := @this: io.netty.handler.ssl.util.FingerprintTrustManagerFactory;
v1 := @parameter0: javax.net.ssl.ManagerFactoryParameters;
return;
}
protected javax.net.ssl.TrustManager[] engineGetTrustManagers()
{
javax.net.ssl.TrustManager v2;
io.netty.handler.ssl.util.FingerprintTrustManagerFactory v0;
javax.net.ssl.TrustManager[] v1;
v0 := @this: io.netty.handler.ssl.util.FingerprintTrustManagerFactory;
v1 = newarray (javax.net.ssl.TrustManager)[1];
v2 = v0.<io.netty.handler.ssl.util.FingerprintTrustManagerFactory: javax.net.ssl.TrustManager tm>;
v1[0] = v2;
return v1;
}
static void <clinit>()
{
java.util.regex.Pattern v0, v1;
v0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^[0-9a-fA-F:]+$");
<io.netty.handler.ssl.util.FingerprintTrustManagerFactory: java.util.regex.Pattern FINGERPRINT_PATTERN> = v0;
v1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(":");
<io.netty.handler.ssl.util.FingerprintTrustManagerFactory: java.util.regex.Pattern FINGERPRINT_STRIP_PATTERN> = v1;
return;
}
}