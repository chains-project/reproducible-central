abstract class io.netty.handler.timeout.IdleStateHandler$AbstractIdleTask extends java.lang.Object implements java.lang.Runnable
{
private final io.netty.channel.ChannelHandlerContext ctx;
void <init>(io.netty.channel.ChannelHandlerContext)
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.timeout.IdleStateHandler$AbstractIdleTask v0;
v0 := @this: io.netty.handler.timeout.IdleStateHandler$AbstractIdleTask;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.handler.timeout.IdleStateHandler$AbstractIdleTask: io.netty.channel.ChannelHandlerContext ctx> = v1;
return;
}
public void run()
{
io.netty.channel.Channel v2;
io.netty.channel.ChannelHandlerContext v1, v4;
boolean v3;
io.netty.handler.timeout.IdleStateHandler$AbstractIdleTask v0;
v0 := @this: io.netty.handler.timeout.IdleStateHandler$AbstractIdleTask;
v1 = v0.<io.netty.handler.timeout.IdleStateHandler$AbstractIdleTask: io.netty.channel.ChannelHandlerContext ctx>;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v3 = interfaceinvoke v2.<io.netty.channel.Channel: boolean isOpen()>();
if v3 != 0 goto label1;
return;
label1:
v4 = v0.<io.netty.handler.timeout.IdleStateHandler$AbstractIdleTask: io.netty.channel.ChannelHandlerContext ctx>;
virtualinvoke v0.<io.netty.handler.timeout.IdleStateHandler$AbstractIdleTask: void run(io.netty.channel.ChannelHandlerContext)>(v4);
return;
}
protected abstract void run(io.netty.channel.ChannelHandlerContext);
}