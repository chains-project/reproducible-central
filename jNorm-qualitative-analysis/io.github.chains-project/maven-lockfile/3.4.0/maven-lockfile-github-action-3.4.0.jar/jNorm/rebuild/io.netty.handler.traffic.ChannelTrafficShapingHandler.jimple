public class io.netty.handler.traffic.ChannelTrafficShapingHandler extends io.netty.handler.traffic.AbstractTrafficShapingHandler
{
private final java.util.ArrayDeque messagesQueue;
private long queueSize;
public void <init>(long, long, long, long)
{
io.netty.handler.traffic.ChannelTrafficShapingHandler v0;
long v1, v2, v3, v4;
java.util.ArrayDeque v5;
v0 := @this: io.netty.handler.traffic.ChannelTrafficShapingHandler;
v1 := @parameter0: long;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 := @parameter3: long;
specialinvoke v0.<io.netty.handler.traffic.AbstractTrafficShapingHandler: void <init>(long,long,long,long)>(v1, v2, v3, v4);
v5 = new java.util.ArrayDeque;
specialinvoke v5.<java.util.ArrayDeque: void <init>()>();
v0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: java.util.ArrayDeque messagesQueue> = v5;
return;
}
public void <init>(long, long, long)
{
io.netty.handler.traffic.ChannelTrafficShapingHandler v0;
long v1, v2, v3;
java.util.ArrayDeque v4;
v0 := @this: io.netty.handler.traffic.ChannelTrafficShapingHandler;
v1 := @parameter0: long;
v2 := @parameter1: long;
v3 := @parameter2: long;
specialinvoke v0.<io.netty.handler.traffic.AbstractTrafficShapingHandler: void <init>(long,long,long)>(v1, v2, v3);
v4 = new java.util.ArrayDeque;
specialinvoke v4.<java.util.ArrayDeque: void <init>()>();
v0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: java.util.ArrayDeque messagesQueue> = v4;
return;
}
public void <init>(long, long)
{
io.netty.handler.traffic.ChannelTrafficShapingHandler v0;
long v1, v2;
java.util.ArrayDeque v3;
v0 := @this: io.netty.handler.traffic.ChannelTrafficShapingHandler;
v1 := @parameter0: long;
v2 := @parameter1: long;
specialinvoke v0.<io.netty.handler.traffic.AbstractTrafficShapingHandler: void <init>(long,long)>(v1, v2);
v3 = new java.util.ArrayDeque;
specialinvoke v3.<java.util.ArrayDeque: void <init>()>();
v0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: java.util.ArrayDeque messagesQueue> = v3;
return;
}
public void <init>(long)
{
long v1;
java.util.ArrayDeque v2;
io.netty.handler.traffic.ChannelTrafficShapingHandler v0;
v0 := @this: io.netty.handler.traffic.ChannelTrafficShapingHandler;
v1 := @parameter0: long;
specialinvoke v0.<io.netty.handler.traffic.AbstractTrafficShapingHandler: void <init>(long)>(v1);
v2 = new java.util.ArrayDeque;
specialinvoke v2.<java.util.ArrayDeque: void <init>()>();
v0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: java.util.ArrayDeque messagesQueue> = v2;
return;
}
public void handlerAdded(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.handler.traffic.TrafficCounter v2;
io.netty.util.concurrent.EventExecutor v3;
io.netty.handler.traffic.ChannelTrafficShapingHandler v0;
long v7;
io.netty.channel.Channel v4;
io.netty.channel.ChannelHandlerContext v1;
int v5;
java.lang.String v6;
v0 := @this: io.netty.handler.traffic.ChannelTrafficShapingHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = new io.netty.handler.traffic.TrafficCounter;
v3 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v4 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v5 = virtualinvoke v4.<java.lang.Object: int hashCode()>();
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("ChannelTC\u0001");
v7 = v0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: long checkInterval>;
specialinvoke v2.<io.netty.handler.traffic.TrafficCounter: void <init>(io.netty.handler.traffic.AbstractTrafficShapingHandler,java.util.concurrent.ScheduledExecutorService,java.lang.String,long)>(v0, v3, v6, v7);
virtualinvoke v0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: void setTrafficCounter(io.netty.handler.traffic.TrafficCounter)>(v2);
virtualinvoke v2.<io.netty.handler.traffic.TrafficCounter: void start()>();
specialinvoke v0.<io.netty.handler.traffic.AbstractTrafficShapingHandler: void handlerAdded(io.netty.channel.ChannelHandlerContext)>(v1);
return;
}
public void handlerRemoved(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.handler.traffic.TrafficCounter v11, v2;
java.lang.Throwable v24;
long v10, v12, v13;
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelPromise v15;
boolean v18, v21, v4, v7;
java.util.Iterator v17, v6;
io.netty.handler.traffic.ChannelTrafficShapingHandler v0;
io.netty.channel.Channel v3;
java.lang.Object v14, v19, v20, v22, v8, v9;
java.util.ArrayDeque v16, v23, v5;
v0 := @this: io.netty.handler.traffic.ChannelTrafficShapingHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = v0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: io.netty.handler.traffic.TrafficCounter trafficCounter>;
virtualinvoke v2.<io.netty.handler.traffic.TrafficCounter: void stop()>();
entermonitor v0;
label1:
v3 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v4 = interfaceinvoke v3.<io.netty.channel.Channel: boolean isActive()>();
if v4 == 0 goto label3;
v5 = v0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: java.util.ArrayDeque messagesQueue>;
v6 = virtualinvoke v5.<java.util.ArrayDeque: java.util.Iterator iterator()>();
label2:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label5;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = v8.<io.netty.handler.traffic.ChannelTrafficShapingHandler$ToSend: java.lang.Object toSend>;
v10 = virtualinvoke v0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: long calculateSize(java.lang.Object)>(v9);
v11 = v0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: io.netty.handler.traffic.TrafficCounter trafficCounter>;
virtualinvoke v11.<io.netty.handler.traffic.TrafficCounter: void bytesRealWriteFlowControl(long)>(v10);
v12 = v0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: long queueSize>;
v13 = v12 - v10;
v0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: long queueSize> = v13;
v14 = v8.<io.netty.handler.traffic.ChannelTrafficShapingHandler$ToSend: java.lang.Object toSend>;
v15 = v8.<io.netty.handler.traffic.ChannelTrafficShapingHandler$ToSend: io.netty.channel.ChannelPromise promise>;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)>(v14, v15);
goto label2;
label3:
v16 = v0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: java.util.ArrayDeque messagesQueue>;
v17 = virtualinvoke v16.<java.util.ArrayDeque: java.util.Iterator iterator()>();
label4:
v18 = interfaceinvoke v17.<java.util.Iterator: boolean hasNext()>();
if v18 == 0 goto label5;
v19 = interfaceinvoke v17.<java.util.Iterator: java.lang.Object next()>();
v20 = v19.<io.netty.handler.traffic.ChannelTrafficShapingHandler$ToSend: java.lang.Object toSend>;
v21 = v20 instanceof io.netty.buffer.ByteBuf;
if v21 == 0 goto label4;
v22 = v19.<io.netty.handler.traffic.ChannelTrafficShapingHandler$ToSend: java.lang.Object toSend>;
virtualinvoke v22.<io.netty.buffer.ByteBuf: boolean release()>();
goto label4;
label5:
v23 = v0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: java.util.ArrayDeque messagesQueue>;
virtualinvoke v23.<java.util.ArrayDeque: void clear()>();
exitmonitor v0;
label6:
goto label8;
label7:
v24 := @caughtexception;
exitmonitor v0;
throw v24;
label8:
virtualinvoke v0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: void releaseWriteSuspended(io.netty.channel.ChannelHandlerContext)>(v1);
virtualinvoke v0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: void releaseReadSuspended(io.netty.channel.ChannelHandlerContext)>(v1);
specialinvoke v0.<io.netty.handler.traffic.AbstractTrafficShapingHandler: void handlerRemoved(io.netty.channel.ChannelHandlerContext)>(v1);
return;
catch java.lang.Throwable from label1 to label6 with label7;
}
void submitWrite(io.netty.channel.ChannelHandlerContext, java.lang.Object, long, long, long, io.netty.channel.ChannelPromise)
{
io.netty.handler.traffic.TrafficCounter v10;
io.netty.util.concurrent.EventExecutor v19;
java.lang.Throwable v17;
long v12, v14, v15, v16, v18, v3, v4, v5;
io.netty.channel.ChannelHandlerContext v1;
byte v7;
io.netty.channel.ChannelPromise v6;
io.netty.handler.traffic.ChannelTrafficShapingHandler$1 v20;
boolean v9;
io.netty.handler.traffic.ChannelTrafficShapingHandler v0;
java.util.concurrent.TimeUnit v21;
java.lang.Object v2;
io.netty.handler.traffic.ChannelTrafficShapingHandler$ToSend v11;
java.util.ArrayDeque v13, v8;
v0 := @this: io.netty.handler.traffic.ChannelTrafficShapingHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: long;
v4 := @parameter3: long;
v5 := @parameter4: long;
v6 := @parameter5: io.netty.channel.ChannelPromise;
entermonitor v0;
label1:
v7 = v4 cmp 0L;
if v7 != 0 goto label3;
v8 = v0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: java.util.ArrayDeque messagesQueue>;
v9 = virtualinvoke v8.<java.util.ArrayDeque: boolean isEmpty()>();
if v9 == 0 goto label3;
v10 = v0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: io.netty.handler.traffic.TrafficCounter trafficCounter>;
virtualinvoke v10.<io.netty.handler.traffic.TrafficCounter: void bytesRealWriteFlowControl(long)>(v3);
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)>(v2, v6);
exitmonitor v0;
label2:
return;
label3:
v11 = new io.netty.handler.traffic.ChannelTrafficShapingHandler$ToSend;
v12 = v4 + v5;
specialinvoke v11.<io.netty.handler.traffic.ChannelTrafficShapingHandler$ToSend: void <init>(long,java.lang.Object,io.netty.channel.ChannelPromise)>(v12, v2, v6);
v13 = v0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: java.util.ArrayDeque messagesQueue>;
virtualinvoke v13.<java.util.ArrayDeque: void addLast(java.lang.Object)>(v11);
v14 = v0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: long queueSize>;
v15 = v14 + v3;
v0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: long queueSize> = v15;
v16 = v0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: long queueSize>;
virtualinvoke v0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: void checkWriteSuspend(io.netty.channel.ChannelHandlerContext,long,long)>(v1, v4, v16);
exitmonitor v0;
label4:
goto label6;
label5:
v17 := @caughtexception;
exitmonitor v0;
throw v17;
label6:
v18 = v11.<io.netty.handler.traffic.ChannelTrafficShapingHandler$ToSend: long relativeTimeAction>;
v19 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v20 = new io.netty.handler.traffic.ChannelTrafficShapingHandler$1;
specialinvoke v20.<io.netty.handler.traffic.ChannelTrafficShapingHandler$1: void <init>(io.netty.handler.traffic.ChannelTrafficShapingHandler,io.netty.channel.ChannelHandlerContext,long)>(v0, v1, v18);
v21 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
interfaceinvoke v19.<io.netty.util.concurrent.EventExecutor: io.netty.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(v20, v4, v21);
return;
catch java.lang.Throwable from label1 to label2 with label5;
catch java.lang.Throwable from label3 to label4 with label5;
}
private void sendAllValid(io.netty.channel.ChannelHandlerContext, long)
{
io.netty.handler.traffic.TrafficCounter v9;
java.lang.Throwable v18;
long v10, v11, v2, v5, v8;
io.netty.channel.ChannelHandlerContext v1;
byte v6;
io.netty.channel.ChannelPromise v13;
boolean v17;
io.netty.handler.traffic.ChannelTrafficShapingHandler v0;
java.lang.Object v12, v4, v7;
java.util.ArrayDeque v14, v15, v16, v3;
v0 := @this: io.netty.handler.traffic.ChannelTrafficShapingHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: long;
entermonitor v0;
label1:
v3 = v0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: java.util.ArrayDeque messagesQueue>;
v4 = virtualinvoke v3.<java.util.ArrayDeque: java.lang.Object pollFirst()>();
label2:
if v4 == null goto label5;
v5 = v4.<io.netty.handler.traffic.ChannelTrafficShapingHandler$ToSend: long relativeTimeAction>;
v6 = v5 cmp v2;
if v6 > 0 goto label3;
v7 = v4.<io.netty.handler.traffic.ChannelTrafficShapingHandler$ToSend: java.lang.Object toSend>;
v8 = virtualinvoke v0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: long calculateSize(java.lang.Object)>(v7);
v9 = v0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: io.netty.handler.traffic.TrafficCounter trafficCounter>;
virtualinvoke v9.<io.netty.handler.traffic.TrafficCounter: void bytesRealWriteFlowControl(long)>(v8);
v10 = v0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: long queueSize>;
v11 = v10 - v8;
v0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: long queueSize> = v11;
v12 = v4.<io.netty.handler.traffic.ChannelTrafficShapingHandler$ToSend: java.lang.Object toSend>;
v13 = v4.<io.netty.handler.traffic.ChannelTrafficShapingHandler$ToSend: io.netty.channel.ChannelPromise promise>;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)>(v12, v13);
goto label4;
label3:
v14 = v0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: java.util.ArrayDeque messagesQueue>;
virtualinvoke v14.<java.util.ArrayDeque: void addFirst(java.lang.Object)>(v4);
goto label5;
label4:
v15 = v0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: java.util.ArrayDeque messagesQueue>;
virtualinvoke v15.<java.util.ArrayDeque: java.lang.Object pollFirst()>();
goto label2;
label5:
v16 = v0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: java.util.ArrayDeque messagesQueue>;
v17 = virtualinvoke v16.<java.util.ArrayDeque: boolean isEmpty()>();
if v17 == 0 goto label6;
virtualinvoke v0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: void releaseWriteSuspended(io.netty.channel.ChannelHandlerContext)>(v1);
label6:
exitmonitor v0;
label7:
goto label9;
label8:
v18 := @caughtexception;
exitmonitor v0;
throw v18;
label9:
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext flush()>();
return;
catch java.lang.Throwable from label1 to label7 with label8;
}
public long queueSize()
{
long v1;
io.netty.handler.traffic.ChannelTrafficShapingHandler v0;
v0 := @this: io.netty.handler.traffic.ChannelTrafficShapingHandler;
v1 = v0.<io.netty.handler.traffic.ChannelTrafficShapingHandler: long queueSize>;
return v1;
}
}