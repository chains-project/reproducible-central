public abstract class io.netty.resolver.AbstractAddressResolver extends java.lang.Object implements io.netty.resolver.AddressResolver
{
private final io.netty.util.concurrent.EventExecutor executor;
private final io.netty.util.internal.TypeParameterMatcher matcher;
protected void <init>(io.netty.util.concurrent.EventExecutor)
{
io.netty.util.concurrent.EventExecutor v1;
io.netty.util.internal.TypeParameterMatcher v3;
java.lang.Object v2;
io.netty.resolver.AbstractAddressResolver v0;
v0 := @this: io.netty.resolver.AbstractAddressResolver;
v1 := @parameter0: io.netty.util.concurrent.EventExecutor;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "executor");
v0.<io.netty.resolver.AbstractAddressResolver: io.netty.util.concurrent.EventExecutor executor> = v2;
v3 = staticinvoke <io.netty.util.internal.TypeParameterMatcher: io.netty.util.internal.TypeParameterMatcher find(java.lang.Object,java.lang.Class,java.lang.String)>(v0, class "Lio/netty/resolver/AbstractAddressResolver;", "T");
v0.<io.netty.resolver.AbstractAddressResolver: io.netty.util.internal.TypeParameterMatcher matcher> = v3;
return;
}
protected void <init>(io.netty.util.concurrent.EventExecutor, java.lang.Class)
{
io.netty.util.concurrent.EventExecutor v1;
io.netty.util.internal.TypeParameterMatcher v4;
java.lang.Class v2;
java.lang.Object v3;
io.netty.resolver.AbstractAddressResolver v0;
v0 := @this: io.netty.resolver.AbstractAddressResolver;
v1 := @parameter0: io.netty.util.concurrent.EventExecutor;
v2 := @parameter1: java.lang.Class;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "executor");
v0.<io.netty.resolver.AbstractAddressResolver: io.netty.util.concurrent.EventExecutor executor> = v3;
v4 = staticinvoke <io.netty.util.internal.TypeParameterMatcher: io.netty.util.internal.TypeParameterMatcher get(java.lang.Class)>(v2);
v0.<io.netty.resolver.AbstractAddressResolver: io.netty.util.internal.TypeParameterMatcher matcher> = v4;
return;
}
protected io.netty.util.concurrent.EventExecutor executor()
{
io.netty.util.concurrent.EventExecutor v1;
io.netty.resolver.AbstractAddressResolver v0;
v0 := @this: io.netty.resolver.AbstractAddressResolver;
v1 = v0.<io.netty.resolver.AbstractAddressResolver: io.netty.util.concurrent.EventExecutor executor>;
return v1;
}
public boolean isSupported(java.net.SocketAddress)
{
java.net.SocketAddress v1;
io.netty.util.internal.TypeParameterMatcher v2;
io.netty.resolver.AbstractAddressResolver v0;
boolean v3;
v0 := @this: io.netty.resolver.AbstractAddressResolver;
v1 := @parameter0: java.net.SocketAddress;
v2 = v0.<io.netty.resolver.AbstractAddressResolver: io.netty.util.internal.TypeParameterMatcher matcher>;
v3 = virtualinvoke v2.<io.netty.util.internal.TypeParameterMatcher: boolean match(java.lang.Object)>(v1);
return v3;
}
public final boolean isResolved(java.net.SocketAddress)
{
java.net.SocketAddress v1;
java.nio.channels.UnsupportedAddressTypeException v3;
io.netty.resolver.AbstractAddressResolver v0;
boolean v2, v4;
v0 := @this: io.netty.resolver.AbstractAddressResolver;
v1 := @parameter0: java.net.SocketAddress;
v2 = virtualinvoke v0.<io.netty.resolver.AbstractAddressResolver: boolean isSupported(java.net.SocketAddress)>(v1);
if v2 != 0 goto label1;
v3 = new java.nio.channels.UnsupportedAddressTypeException;
specialinvoke v3.<java.nio.channels.UnsupportedAddressTypeException: void <init>()>();
throw v3;
label1:
v4 = virtualinvoke v0.<io.netty.resolver.AbstractAddressResolver: boolean doIsResolved(java.net.SocketAddress)>(v1);
return v4;
}
protected abstract boolean doIsResolved(java.net.SocketAddress);
public final io.netty.util.concurrent.Future resolve(java.net.SocketAddress)
{
io.netty.util.concurrent.EventExecutor v10, v13, v4, v8;
io.netty.util.concurrent.Promise v11;
java.net.SocketAddress v1;
java.nio.channels.UnsupportedAddressTypeException v5;
io.netty.resolver.AbstractAddressResolver v0;
java.lang.Exception v12;
java.lang.Object v2;
io.netty.util.concurrent.Future v14, v6, v9;
boolean v3, v7;
v0 := @this: io.netty.resolver.AbstractAddressResolver;
v1 := @parameter0: java.net.SocketAddress;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "address");
v3 = virtualinvoke v0.<io.netty.resolver.AbstractAddressResolver: boolean isSupported(java.net.SocketAddress)>(v2);
if v3 != 0 goto label1;
v4 = virtualinvoke v0.<io.netty.resolver.AbstractAddressResolver: io.netty.util.concurrent.EventExecutor executor()>();
v5 = new java.nio.channels.UnsupportedAddressTypeException;
specialinvoke v5.<java.nio.channels.UnsupportedAddressTypeException: void <init>()>();
v6 = interfaceinvoke v4.<io.netty.util.concurrent.EventExecutor: io.netty.util.concurrent.Future newFailedFuture(java.lang.Throwable)>(v5);
return v6;
label1:
v7 = virtualinvoke v0.<io.netty.resolver.AbstractAddressResolver: boolean isResolved(java.net.SocketAddress)>(v1);
if v7 == 0 goto label2;
v8 = v0.<io.netty.resolver.AbstractAddressResolver: io.netty.util.concurrent.EventExecutor executor>;
v9 = interfaceinvoke v8.<io.netty.util.concurrent.EventExecutor: io.netty.util.concurrent.Future newSucceededFuture(java.lang.Object)>(v1);
return v9;
label2:
v10 = virtualinvoke v0.<io.netty.resolver.AbstractAddressResolver: io.netty.util.concurrent.EventExecutor executor()>();
v11 = interfaceinvoke v10.<io.netty.util.concurrent.EventExecutor: io.netty.util.concurrent.Promise newPromise()>();
virtualinvoke v0.<io.netty.resolver.AbstractAddressResolver: void doResolve(java.net.SocketAddress,io.netty.util.concurrent.Promise)>(v1, v11);
label3:
return v11;
label4:
v12 := @caughtexception;
v13 = virtualinvoke v0.<io.netty.resolver.AbstractAddressResolver: io.netty.util.concurrent.EventExecutor executor()>();
v14 = interfaceinvoke v13.<io.netty.util.concurrent.EventExecutor: io.netty.util.concurrent.Future newFailedFuture(java.lang.Throwable)>(v12);
return v14;
catch java.lang.Exception from label2 to label3 with label4;
}
public final io.netty.util.concurrent.Future resolve(java.net.SocketAddress, io.netty.util.concurrent.Promise)
{
io.netty.util.concurrent.Promise v2, v5, v7, v9;
java.net.SocketAddress v1;
java.nio.channels.UnsupportedAddressTypeException v4;
io.netty.resolver.AbstractAddressResolver v0;
java.lang.Exception v8;
boolean v3, v6;
v0 := @this: io.netty.resolver.AbstractAddressResolver;
v1 := @parameter0: java.net.SocketAddress;
v2 := @parameter1: io.netty.util.concurrent.Promise;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "address");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "promise");
v3 = virtualinvoke v0.<io.netty.resolver.AbstractAddressResolver: boolean isSupported(java.net.SocketAddress)>(v1);
if v3 != 0 goto label1;
v4 = new java.nio.channels.UnsupportedAddressTypeException;
specialinvoke v4.<java.nio.channels.UnsupportedAddressTypeException: void <init>()>();
v5 = interfaceinvoke v2.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>(v4);
return v5;
label1:
v6 = virtualinvoke v0.<io.netty.resolver.AbstractAddressResolver: boolean isResolved(java.net.SocketAddress)>(v1);
if v6 == 0 goto label2;
v7 = interfaceinvoke v2.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setSuccess(java.lang.Object)>(v1);
return v7;
label2:
virtualinvoke v0.<io.netty.resolver.AbstractAddressResolver: void doResolve(java.net.SocketAddress,io.netty.util.concurrent.Promise)>(v1, v2);
label3:
return v2;
label4:
v8 := @caughtexception;
v9 = interfaceinvoke v2.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>(v8);
return v9;
catch java.lang.Exception from label2 to label3 with label4;
}
public final io.netty.util.concurrent.Future resolveAll(java.net.SocketAddress)
{
io.netty.util.concurrent.EventExecutor v11, v14, v4, v8;
java.net.SocketAddress v1;
io.netty.resolver.AbstractAddressResolver v0;
boolean v3, v7;
io.netty.util.concurrent.Promise v12;
java.nio.channels.UnsupportedAddressTypeException v5;
java.lang.Exception v13;
java.util.List v9;
java.lang.Object v2;
io.netty.util.concurrent.Future v10, v15, v6;
v0 := @this: io.netty.resolver.AbstractAddressResolver;
v1 := @parameter0: java.net.SocketAddress;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "address");
v3 = virtualinvoke v0.<io.netty.resolver.AbstractAddressResolver: boolean isSupported(java.net.SocketAddress)>(v2);
if v3 != 0 goto label1;
v4 = virtualinvoke v0.<io.netty.resolver.AbstractAddressResolver: io.netty.util.concurrent.EventExecutor executor()>();
v5 = new java.nio.channels.UnsupportedAddressTypeException;
specialinvoke v5.<java.nio.channels.UnsupportedAddressTypeException: void <init>()>();
v6 = interfaceinvoke v4.<io.netty.util.concurrent.EventExecutor: io.netty.util.concurrent.Future newFailedFuture(java.lang.Throwable)>(v5);
return v6;
label1:
v7 = virtualinvoke v0.<io.netty.resolver.AbstractAddressResolver: boolean isResolved(java.net.SocketAddress)>(v1);
if v7 == 0 goto label2;
v8 = v0.<io.netty.resolver.AbstractAddressResolver: io.netty.util.concurrent.EventExecutor executor>;
v9 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(v1);
v10 = interfaceinvoke v8.<io.netty.util.concurrent.EventExecutor: io.netty.util.concurrent.Future newSucceededFuture(java.lang.Object)>(v9);
return v10;
label2:
v11 = virtualinvoke v0.<io.netty.resolver.AbstractAddressResolver: io.netty.util.concurrent.EventExecutor executor()>();
v12 = interfaceinvoke v11.<io.netty.util.concurrent.EventExecutor: io.netty.util.concurrent.Promise newPromise()>();
virtualinvoke v0.<io.netty.resolver.AbstractAddressResolver: void doResolveAll(java.net.SocketAddress,io.netty.util.concurrent.Promise)>(v1, v12);
label3:
return v12;
label4:
v13 := @caughtexception;
v14 = virtualinvoke v0.<io.netty.resolver.AbstractAddressResolver: io.netty.util.concurrent.EventExecutor executor()>();
v15 = interfaceinvoke v14.<io.netty.util.concurrent.EventExecutor: io.netty.util.concurrent.Future newFailedFuture(java.lang.Throwable)>(v13);
return v15;
catch java.lang.Exception from label2 to label3 with label4;
}
public final io.netty.util.concurrent.Future resolveAll(java.net.SocketAddress, io.netty.util.concurrent.Promise)
{
io.netty.util.concurrent.Promise v10, v2, v5, v8;
java.net.SocketAddress v1;
java.nio.channels.UnsupportedAddressTypeException v4;
io.netty.resolver.AbstractAddressResolver v0;
java.lang.Exception v9;
java.util.List v7;
boolean v3, v6;
v0 := @this: io.netty.resolver.AbstractAddressResolver;
v1 := @parameter0: java.net.SocketAddress;
v2 := @parameter1: io.netty.util.concurrent.Promise;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "address");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "promise");
v3 = virtualinvoke v0.<io.netty.resolver.AbstractAddressResolver: boolean isSupported(java.net.SocketAddress)>(v1);
if v3 != 0 goto label1;
v4 = new java.nio.channels.UnsupportedAddressTypeException;
specialinvoke v4.<java.nio.channels.UnsupportedAddressTypeException: void <init>()>();
v5 = interfaceinvoke v2.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>(v4);
return v5;
label1:
v6 = virtualinvoke v0.<io.netty.resolver.AbstractAddressResolver: boolean isResolved(java.net.SocketAddress)>(v1);
if v6 == 0 goto label2;
v7 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(v1);
v8 = interfaceinvoke v2.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setSuccess(java.lang.Object)>(v7);
return v8;
label2:
virtualinvoke v0.<io.netty.resolver.AbstractAddressResolver: void doResolveAll(java.net.SocketAddress,io.netty.util.concurrent.Promise)>(v1, v2);
label3:
return v2;
label4:
v9 := @caughtexception;
v10 = interfaceinvoke v2.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>(v9);
return v10;
catch java.lang.Exception from label2 to label3 with label4;
}
protected abstract void doResolve(java.net.SocketAddress, io.netty.util.concurrent.Promise) throws java.lang.Exception;
protected abstract void doResolveAll(java.net.SocketAddress, io.netty.util.concurrent.Promise) throws java.lang.Exception;
public void close()
{
io.netty.resolver.AbstractAddressResolver v0;
v0 := @this: io.netty.resolver.AbstractAddressResolver;
return;
}
}