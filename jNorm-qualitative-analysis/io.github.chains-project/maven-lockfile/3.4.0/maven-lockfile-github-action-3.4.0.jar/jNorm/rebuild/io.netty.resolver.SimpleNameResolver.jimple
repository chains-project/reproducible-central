public abstract class io.netty.resolver.SimpleNameResolver extends java.lang.Object implements io.netty.resolver.NameResolver
{
private final io.netty.util.concurrent.EventExecutor executor;
protected void <init>(io.netty.util.concurrent.EventExecutor)
{
io.netty.util.concurrent.EventExecutor v1;
java.lang.Object v2;
io.netty.resolver.SimpleNameResolver v0;
v0 := @this: io.netty.resolver.SimpleNameResolver;
v1 := @parameter0: io.netty.util.concurrent.EventExecutor;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "executor");
v0.<io.netty.resolver.SimpleNameResolver: io.netty.util.concurrent.EventExecutor executor> = v2;
return;
}
protected io.netty.util.concurrent.EventExecutor executor()
{
io.netty.util.concurrent.EventExecutor v1;
io.netty.resolver.SimpleNameResolver v0;
v0 := @this: io.netty.resolver.SimpleNameResolver;
v1 = v0.<io.netty.resolver.SimpleNameResolver: io.netty.util.concurrent.EventExecutor executor>;
return v1;
}
public final io.netty.util.concurrent.Future resolve(java.lang.String)
{
io.netty.util.concurrent.EventExecutor v2;
io.netty.util.concurrent.Promise v3;
java.lang.String v1;
io.netty.util.concurrent.Future v4;
io.netty.resolver.SimpleNameResolver v0;
v0 := @this: io.netty.resolver.SimpleNameResolver;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.netty.resolver.SimpleNameResolver: io.netty.util.concurrent.EventExecutor executor()>();
v3 = interfaceinvoke v2.<io.netty.util.concurrent.EventExecutor: io.netty.util.concurrent.Promise newPromise()>();
v4 = virtualinvoke v0.<io.netty.resolver.SimpleNameResolver: io.netty.util.concurrent.Future resolve(java.lang.String,io.netty.util.concurrent.Promise)>(v1, v3);
return v4;
}
public io.netty.util.concurrent.Future resolve(java.lang.String, io.netty.util.concurrent.Promise)
{
io.netty.util.concurrent.Promise v2, v4;
java.lang.String v1;
java.lang.Exception v3;
io.netty.resolver.SimpleNameResolver v0;
v0 := @this: io.netty.resolver.SimpleNameResolver;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.netty.util.concurrent.Promise;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "promise");
label1:
virtualinvoke v0.<io.netty.resolver.SimpleNameResolver: void doResolve(java.lang.String,io.netty.util.concurrent.Promise)>(v1, v2);
label2:
return v2;
label3:
v3 := @caughtexception;
v4 = interfaceinvoke v2.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>(v3);
return v4;
catch java.lang.Exception from label1 to label2 with label3;
}
public final io.netty.util.concurrent.Future resolveAll(java.lang.String)
{
io.netty.util.concurrent.EventExecutor v2;
io.netty.util.concurrent.Promise v3;
java.lang.String v1;
io.netty.util.concurrent.Future v4;
io.netty.resolver.SimpleNameResolver v0;
v0 := @this: io.netty.resolver.SimpleNameResolver;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.netty.resolver.SimpleNameResolver: io.netty.util.concurrent.EventExecutor executor()>();
v3 = interfaceinvoke v2.<io.netty.util.concurrent.EventExecutor: io.netty.util.concurrent.Promise newPromise()>();
v4 = virtualinvoke v0.<io.netty.resolver.SimpleNameResolver: io.netty.util.concurrent.Future resolveAll(java.lang.String,io.netty.util.concurrent.Promise)>(v1, v3);
return v4;
}
public io.netty.util.concurrent.Future resolveAll(java.lang.String, io.netty.util.concurrent.Promise)
{
io.netty.util.concurrent.Promise v2, v4;
java.lang.String v1;
java.lang.Exception v3;
io.netty.resolver.SimpleNameResolver v0;
v0 := @this: io.netty.resolver.SimpleNameResolver;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.netty.util.concurrent.Promise;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "promise");
label1:
virtualinvoke v0.<io.netty.resolver.SimpleNameResolver: void doResolveAll(java.lang.String,io.netty.util.concurrent.Promise)>(v1, v2);
label2:
return v2;
label3:
v3 := @caughtexception;
v4 = interfaceinvoke v2.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>(v3);
return v4;
catch java.lang.Exception from label1 to label2 with label3;
}
protected abstract void doResolve(java.lang.String, io.netty.util.concurrent.Promise) throws java.lang.Exception;
protected abstract void doResolveAll(java.lang.String, io.netty.util.concurrent.Promise) throws java.lang.Exception;
public void close()
{
io.netty.resolver.SimpleNameResolver v0;
v0 := @this: io.netty.resolver.SimpleNameResolver;
return;
}
}