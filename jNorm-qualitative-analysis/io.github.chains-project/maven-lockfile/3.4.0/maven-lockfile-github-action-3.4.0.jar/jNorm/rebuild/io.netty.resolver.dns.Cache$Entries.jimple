final class io.netty.resolver.dns.Cache$Entries extends java.util.concurrent.atomic.AtomicReference implements java.lang.Runnable
{
private final java.lang.String hostname;
volatile java.util.concurrent.ScheduledFuture expirationFuture;
static final boolean $assertionsDisabled;
final io.netty.resolver.dns.Cache this$0;
void <init>(io.netty.resolver.dns.Cache, java.lang.String)
{
java.util.List v3;
io.netty.resolver.dns.Cache v1;
io.netty.resolver.dns.Cache$Entries v0;
java.lang.String v2;
v0 := @this: io.netty.resolver.dns.Cache$Entries;
v1 := @parameter0: io.netty.resolver.dns.Cache;
v2 := @parameter1: java.lang.String;
v0.<io.netty.resolver.dns.Cache$Entries: io.netty.resolver.dns.Cache this$0> = v1;
v3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
specialinvoke v0.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(v3);
v0.<io.netty.resolver.dns.Cache$Entries: java.lang.String hostname> = v2;
return;
}
void add(java.lang.Object, int, io.netty.channel.EventLoop)
{
io.netty.resolver.dns.Cache$Entries v0;
boolean v10, v11, v15, v23, v31, v33, v5, v7;
io.netty.resolver.dns.Cache v22, v28, v4, v9;
io.netty.channel.EventLoop v3;
java.util.List v14, v30, v32, v34;
java.lang.AssertionError v13;
java.util.ArrayList v16;
int v12, v17, v18, v19, v2, v24, v25, v27;
java.lang.String v29;
java.lang.Object v1, v20, v21, v26, v6, v8;
v0 := @this: io.netty.resolver.dns.Cache$Entries;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: int;
v3 := @parameter2: io.netty.channel.EventLoop;
v4 = v0.<io.netty.resolver.dns.Cache$Entries: io.netty.resolver.dns.Cache this$0>;
v5 = virtualinvoke v4.<io.netty.resolver.dns.Cache: boolean shouldReplaceAll(java.lang.Object)>(v1);
if v5 != 0 goto label11;
label01:
v6 = virtualinvoke v0.<io.netty.resolver.dns.Cache$Entries: java.lang.Object get()>();
v7 = interfaceinvoke v6.<java.util.List: boolean isEmpty()>();
if v7 != 0 goto label10;
v8 = interfaceinvoke v6.<java.util.List: java.lang.Object get(int)>(0);
v9 = v0.<io.netty.resolver.dns.Cache$Entries: io.netty.resolver.dns.Cache this$0>;
v10 = virtualinvoke v9.<io.netty.resolver.dns.Cache: boolean shouldReplaceAll(java.lang.Object)>(v8);
if v10 == 0 goto label03;
v11 = <io.netty.resolver.dns.Cache$Entries: boolean $assertionsDisabled>;
if v11 != 0 goto label02;
v12 = interfaceinvoke v6.<java.util.List: int size()>();
if v12 == 1 goto label02;
v13 = new java.lang.AssertionError;
specialinvoke v13.<java.lang.AssertionError: void <init>()>();
throw v13;
label02:
v14 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(v1);
v15 = virtualinvoke v0.<io.netty.resolver.dns.Cache$Entries: boolean compareAndSet(java.lang.Object,java.lang.Object)>(v6, v14);
if v15 == 0 goto label01;
specialinvoke v0.<io.netty.resolver.dns.Cache$Entries: void scheduleCacheExpirationIfNeeded(int,io.netty.channel.EventLoop)>(v2, v3);
return;
label03:
v16 = new java.util.ArrayList;
v17 = interfaceinvoke v6.<java.util.List: int size()>();
v18 = v17 + 1;
specialinvoke v16.<java.util.ArrayList: void <init>(int)>(v18);
v19 = 0;
v20 = null;
label04:
v21 = interfaceinvoke v6.<java.util.List: java.lang.Object get(int)>(v19);
v22 = v0.<io.netty.resolver.dns.Cache$Entries: io.netty.resolver.dns.Cache this$0>;
v23 = virtualinvoke v22.<io.netty.resolver.dns.Cache: boolean equals(java.lang.Object,java.lang.Object)>(v1, v21);
if v23 != 0 goto label05;
interfaceinvoke v16.<java.util.List: boolean add(java.lang.Object)>(v21);
goto label07;
label05:
v20 = v21;
interfaceinvoke v16.<java.util.List: boolean add(java.lang.Object)>(v1);
v24 = v19 + 1;
label06:
v25 = interfaceinvoke v6.<java.util.List: int size()>();
if v24 >= v25 goto label08;
v26 = interfaceinvoke v6.<java.util.List: java.lang.Object get(int)>(v24);
interfaceinvoke v16.<java.util.List: boolean add(java.lang.Object)>(v26);
v24 = v24 + 1;
goto label06;
label07:
v19 = v19 + 1;
v27 = interfaceinvoke v6.<java.util.List: int size()>();
if v19 < v27 goto label04;
label08:
if v20 != null goto label09;
interfaceinvoke v16.<java.util.List: boolean add(java.lang.Object)>(v1);
label09:
v28 = v0.<io.netty.resolver.dns.Cache$Entries: io.netty.resolver.dns.Cache this$0>;
v29 = v0.<io.netty.resolver.dns.Cache$Entries: java.lang.String hostname>;
virtualinvoke v28.<io.netty.resolver.dns.Cache: void sortEntries(java.lang.String,java.util.List)>(v29, v16);
v30 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(v16);
v31 = virtualinvoke v0.<io.netty.resolver.dns.Cache$Entries: boolean compareAndSet(java.lang.Object,java.lang.Object)>(v6, v30);
if v31 == 0 goto label01;
specialinvoke v0.<io.netty.resolver.dns.Cache$Entries: void scheduleCacheExpirationIfNeeded(int,io.netty.channel.EventLoop)>(v2, v3);
return;
label10:
v32 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(v1);
v33 = virtualinvoke v0.<io.netty.resolver.dns.Cache$Entries: boolean compareAndSet(java.lang.Object,java.lang.Object)>(v6, v32);
if v33 == 0 goto label01;
specialinvoke v0.<io.netty.resolver.dns.Cache$Entries: void scheduleCacheExpirationIfNeeded(int,io.netty.channel.EventLoop)>(v2, v3);
return;
label11:
v34 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(v1);
virtualinvoke v0.<io.netty.resolver.dns.Cache$Entries: void set(java.lang.Object)>(v34);
specialinvoke v0.<io.netty.resolver.dns.Cache$Entries: void scheduleCacheExpirationIfNeeded(int,io.netty.channel.EventLoop)>(v2, v3);
return;
}
private void scheduleCacheExpirationIfNeeded(int, io.netty.channel.EventLoop)
{
io.netty.resolver.dns.Cache$Entries v0;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v10, v3;
io.netty.util.concurrent.ScheduledFuture v9;
long v6;
io.netty.channel.EventLoop v2;
java.util.concurrent.TimeUnit v5, v8;
byte v7;
int v1;
java.lang.Object v4;
boolean v11;
v0 := @this: io.netty.resolver.dns.Cache$Entries;
v1 := @parameter0: int;
v2 := @parameter1: io.netty.channel.EventLoop;
label1:
v3 = <io.netty.resolver.dns.Cache: java.util.concurrent.atomic.AtomicReferenceFieldUpdater FUTURE_UPDATER>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(v0);
if v4 == null goto label2;
v5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
v6 = interfaceinvoke v4.<java.util.concurrent.ScheduledFuture: long getDelay(java.util.concurrent.TimeUnit)>(v5);
v7 = v6 cmp v1;
if v7 <= 0 goto label4;
label2:
v8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
v9 = interfaceinvoke v2.<io.netty.channel.EventLoop: io.netty.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(v0, v1, v8);
v10 = <io.netty.resolver.dns.Cache: java.util.concurrent.atomic.AtomicReferenceFieldUpdater FUTURE_UPDATER>;
v11 = virtualinvoke v10.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(v0, v4, v9);
if v11 == 0 goto label3;
if v4 == null goto label4;
interfaceinvoke v4.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(1);
goto label4;
label3:
interfaceinvoke v9.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(1);
goto label1;
label4:
return;
}
boolean clearAndCancel()
{
java.util.List v1;
java.util.concurrent.ScheduledFuture v5;
io.netty.resolver.dns.Cache$Entries v0;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v4;
java.lang.Object v2, v6;
boolean v3;
v0 := @this: io.netty.resolver.dns.Cache$Entries;
v1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
v2 = virtualinvoke v0.<io.netty.resolver.dns.Cache$Entries: java.lang.Object getAndSet(java.lang.Object)>(v1);
v3 = interfaceinvoke v2.<java.util.List: boolean isEmpty()>();
if v3 == 0 goto label1;
return 0;
label1:
v4 = <io.netty.resolver.dns.Cache: java.util.concurrent.atomic.AtomicReferenceFieldUpdater FUTURE_UPDATER>;
v5 = <io.netty.resolver.dns.Cache: java.util.concurrent.ScheduledFuture CANCELLED>;
v6 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object getAndSet(java.lang.Object,java.lang.Object)>(v0, v5);
if v6 == null goto label2;
interfaceinvoke v6.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(0);
label2:
return 1;
}
public void run()
{
io.netty.resolver.dns.Cache v1;
io.netty.resolver.dns.Cache$Entries v0;
java.lang.String v3;
java.util.concurrent.ConcurrentMap v2;
v0 := @this: io.netty.resolver.dns.Cache$Entries;
v1 = v0.<io.netty.resolver.dns.Cache$Entries: io.netty.resolver.dns.Cache this$0>;
v2 = v1.<io.netty.resolver.dns.Cache: java.util.concurrent.ConcurrentMap resolveCache>;
v3 = v0.<io.netty.resolver.dns.Cache$Entries: java.lang.String hostname>;
interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>(v3, v0);
virtualinvoke v0.<io.netty.resolver.dns.Cache$Entries: boolean clearAndCancel()>();
return;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/resolver/dns/Cache;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.resolver.dns.Cache$Entries: boolean $assertionsDisabled> = v2;
return;
}
}