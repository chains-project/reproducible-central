public class io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache extends java.lang.Object implements io.netty.resolver.dns.AuthoritativeDnsServerCache
{
private final int minTtl;
private final int maxTtl;
private final java.util.Comparator comparator;
private final io.netty.resolver.dns.Cache resolveCache;
public void <init>()
{
int v1;
io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache v0;
v0 := @this: io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache;
v1 = <io.netty.resolver.dns.Cache: int MAX_SUPPORTED_TTL_SECS>;
specialinvoke v0.<io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache: void <init>(int,int,java.util.Comparator)>(0, v1, null);
return;
}
public void <init>(int, int, java.util.Comparator)
{
io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache$1 v4;
java.lang.IllegalArgumentException v11;
io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache v0;
int v1, v10, v2, v5, v6, v7, v8, v9;
java.lang.String v12;
java.util.Comparator v3;
v0 := @this: io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: java.util.Comparator;
specialinvoke v0.<java.lang.Object: void <init>()>();
v4 = new io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache$1;
specialinvoke v4.<io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache$1: void <init>(io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache)>(v0);
v0.<io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache: io.netty.resolver.dns.Cache resolveCache> = v4;
v5 = <io.netty.resolver.dns.Cache: int MAX_SUPPORTED_TTL_SECS>;
v6 = staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositiveOrZero(int,java.lang.String)>(v1, "minTtl");
v7 = staticinvoke <java.lang.Math: int min(int,int)>(v5, v6);
v0.<io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache: int minTtl> = v7;
v8 = <io.netty.resolver.dns.Cache: int MAX_SUPPORTED_TTL_SECS>;
v9 = staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositive(int,java.lang.String)>(v2, "maxTtl");
v10 = staticinvoke <java.lang.Math: int min(int,int)>(v8, v9);
v0.<io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache: int maxTtl> = v10;
if v1 <= v2 goto label1;
v11 = new java.lang.IllegalArgumentException;
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v1, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("minTtl: \u0001, maxTtl: \u0001 (expected: 0 <= minTtl <= maxTtl)");
specialinvoke v11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v12);
throw v11;
label1:
v0.<io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache: java.util.Comparator comparator> = v3;
return;
}
public io.netty.resolver.dns.DnsServerAddressStream get(java.lang.String)
{
java.util.List v3;
io.netty.resolver.dns.Cache v2;
io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache v0;
io.netty.resolver.dns.SequentialDnsServerAddressStream v5;
java.lang.String v1;
boolean v4;
v0 := @this: io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache;
v1 := @parameter0: java.lang.String;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "hostname");
v2 = v0.<io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache: io.netty.resolver.dns.Cache resolveCache>;
v3 = virtualinvoke v2.<io.netty.resolver.dns.Cache: java.util.List get(java.lang.String)>(v1);
if v3 == null goto label1;
v4 = interfaceinvoke v3.<java.util.List: boolean isEmpty()>();
if v4 == 0 goto label2;
label1:
return null;
label2:
v5 = new io.netty.resolver.dns.SequentialDnsServerAddressStream;
specialinvoke v5.<io.netty.resolver.dns.SequentialDnsServerAddressStream: void <init>(java.util.List,int)>(v3, 0);
return v5;
}
public void cache(java.lang.String, java.net.InetSocketAddress, long, io.netty.channel.EventLoop)
{
io.netty.resolver.dns.Cache v7;
long v10, v3;
io.netty.channel.EventLoop v4;
java.net.InetSocketAddress v2;
io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache v0;
int v11, v5, v8, v9;
java.lang.String v1, v6;
v0 := @this: io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.net.InetSocketAddress;
v3 := @parameter2: long;
v4 := @parameter3: io.netty.channel.EventLoop;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "hostname");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "address");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v4, "loop");
v5 = staticinvoke <io.netty.util.internal.PlatformDependent: int javaVersion()>();
if v5 < 7 goto label1;
v6 = virtualinvoke v2.<java.net.InetSocketAddress: java.lang.String getHostString()>();
if v6 != null goto label1;
return;
label1:
v7 = v0.<io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache: io.netty.resolver.dns.Cache resolveCache>;
v8 = v0.<io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache: int minTtl>;
v9 = v0.<io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache: int maxTtl>;
v10 = staticinvoke <java.lang.Math: long min(long,long)>(v9, v3);
v11 = staticinvoke <java.lang.Math: int max(int,int)>(v8, v10);
virtualinvoke v7.<io.netty.resolver.dns.Cache: void cache(java.lang.String,java.lang.Object,int,io.netty.channel.EventLoop)>(v1, v2, v11, v4);
return;
}
public void clear()
{
io.netty.resolver.dns.Cache v1;
io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache v0;
v0 := @this: io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache;
v1 = v0.<io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache: io.netty.resolver.dns.Cache resolveCache>;
virtualinvoke v1.<io.netty.resolver.dns.Cache: void clear()>();
return;
}
public boolean clear(java.lang.String)
{
io.netty.resolver.dns.Cache v2;
io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache v0;
java.lang.Object v3;
java.lang.String v1;
boolean v4;
v0 := @this: io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache: io.netty.resolver.dns.Cache resolveCache>;
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "hostname");
v4 = virtualinvoke v2.<io.netty.resolver.dns.Cache: boolean clear(java.lang.String)>(v3);
return v4;
}
public java.lang.String toString()
{
io.netty.resolver.dns.Cache v3;
io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache v0;
int v1, v2, v4;
java.lang.String v5;
v0 := @this: io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache;
v1 = v0.<io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache: int minTtl>;
v2 = v0.<io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache: int maxTtl>;
v3 = v0.<io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache: io.netty.resolver.dns.Cache resolveCache>;
v4 = virtualinvoke v3.<io.netty.resolver.dns.Cache: int size()>();
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int,int)>(v1, v2, v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("DefaultAuthoritativeDnsServerCache(minTtl=\u0001, maxTtl=\u0001, cached nameservers=\u0001)");
return v5;
}
}