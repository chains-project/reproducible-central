public final class io.netty.resolver.dns.DefaultDnsCnameCache extends java.lang.Object implements io.netty.resolver.dns.DnsCnameCache
{
private final int minTtl;
private final int maxTtl;
private final io.netty.resolver.dns.Cache cache;
public void <init>()
{
int v1;
io.netty.resolver.dns.DefaultDnsCnameCache v0;
v0 := @this: io.netty.resolver.dns.DefaultDnsCnameCache;
v1 = <io.netty.resolver.dns.Cache: int MAX_SUPPORTED_TTL_SECS>;
specialinvoke v0.<io.netty.resolver.dns.DefaultDnsCnameCache: void <init>(int,int)>(0, v1);
return;
}
public void <init>(int, int)
{
io.netty.resolver.dns.DefaultDnsCnameCache v0;
java.lang.IllegalArgumentException v10;
io.netty.resolver.dns.DefaultDnsCnameCache$1 v3;
int v1, v2, v4, v5, v6, v7, v8, v9;
java.lang.String v11;
v0 := @this: io.netty.resolver.dns.DefaultDnsCnameCache;
v1 := @parameter0: int;
v2 := @parameter1: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new io.netty.resolver.dns.DefaultDnsCnameCache$1;
specialinvoke v3.<io.netty.resolver.dns.DefaultDnsCnameCache$1: void <init>(io.netty.resolver.dns.DefaultDnsCnameCache)>(v0);
v0.<io.netty.resolver.dns.DefaultDnsCnameCache: io.netty.resolver.dns.Cache cache> = v3;
v4 = <io.netty.resolver.dns.Cache: int MAX_SUPPORTED_TTL_SECS>;
v5 = staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositiveOrZero(int,java.lang.String)>(v1, "minTtl");
v6 = staticinvoke <java.lang.Math: int min(int,int)>(v4, v5);
v0.<io.netty.resolver.dns.DefaultDnsCnameCache: int minTtl> = v6;
v7 = <io.netty.resolver.dns.Cache: int MAX_SUPPORTED_TTL_SECS>;
v8 = staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositive(int,java.lang.String)>(v2, "maxTtl");
v9 = staticinvoke <java.lang.Math: int min(int,int)>(v7, v8);
v0.<io.netty.resolver.dns.DefaultDnsCnameCache: int maxTtl> = v9;
if v1 <= v2 goto label1;
v10 = new java.lang.IllegalArgumentException;
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v1, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("minTtl: \u0001, maxTtl: \u0001 (expected: 0 <= minTtl <= maxTtl)");
specialinvoke v10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v11);
throw v10;
label1:
return;
}
public java.lang.String get(java.lang.String)
{
java.util.List v4;
io.netty.resolver.dns.Cache v2;
io.netty.resolver.dns.DefaultDnsCnameCache v0;
java.lang.Object v3, v6;
java.lang.String v1;
boolean v5;
v0 := @this: io.netty.resolver.dns.DefaultDnsCnameCache;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.netty.resolver.dns.DefaultDnsCnameCache: io.netty.resolver.dns.Cache cache>;
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "hostname");
v4 = virtualinvoke v2.<io.netty.resolver.dns.Cache: java.util.List get(java.lang.String)>(v3);
if v4 == null goto label1;
v5 = interfaceinvoke v4.<java.util.List: boolean isEmpty()>();
if v5 == 0 goto label2;
label1:
return null;
label2:
v6 = interfaceinvoke v4.<java.util.List: java.lang.Object get(int)>(0);
return v6;
}
public void cache(java.lang.String, java.lang.String, long, io.netty.channel.EventLoop)
{
io.netty.resolver.dns.Cache v5;
io.netty.resolver.dns.DefaultDnsCnameCache v0;
long v3, v8;
io.netty.channel.EventLoop v4;
int v6, v7, v9;
java.lang.String v1, v2;
v0 := @this: io.netty.resolver.dns.DefaultDnsCnameCache;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: long;
v4 := @parameter3: io.netty.channel.EventLoop;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "hostname");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "cname");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v4, "loop");
v5 = v0.<io.netty.resolver.dns.DefaultDnsCnameCache: io.netty.resolver.dns.Cache cache>;
v6 = v0.<io.netty.resolver.dns.DefaultDnsCnameCache: int minTtl>;
v7 = v0.<io.netty.resolver.dns.DefaultDnsCnameCache: int maxTtl>;
v8 = staticinvoke <java.lang.Math: long min(long,long)>(v7, v3);
v9 = staticinvoke <java.lang.Math: int max(int,int)>(v6, v8);
virtualinvoke v5.<io.netty.resolver.dns.Cache: void cache(java.lang.String,java.lang.Object,int,io.netty.channel.EventLoop)>(v1, v2, v9, v4);
return;
}
public void clear()
{
io.netty.resolver.dns.Cache v1;
io.netty.resolver.dns.DefaultDnsCnameCache v0;
v0 := @this: io.netty.resolver.dns.DefaultDnsCnameCache;
v1 = v0.<io.netty.resolver.dns.DefaultDnsCnameCache: io.netty.resolver.dns.Cache cache>;
virtualinvoke v1.<io.netty.resolver.dns.Cache: void clear()>();
return;
}
public boolean clear(java.lang.String)
{
io.netty.resolver.dns.Cache v2;
io.netty.resolver.dns.DefaultDnsCnameCache v0;
java.lang.Object v3;
java.lang.String v1;
boolean v4;
v0 := @this: io.netty.resolver.dns.DefaultDnsCnameCache;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.netty.resolver.dns.DefaultDnsCnameCache: io.netty.resolver.dns.Cache cache>;
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "hostname");
v4 = virtualinvoke v2.<io.netty.resolver.dns.Cache: boolean clear(java.lang.String)>(v3);
return v4;
}
}