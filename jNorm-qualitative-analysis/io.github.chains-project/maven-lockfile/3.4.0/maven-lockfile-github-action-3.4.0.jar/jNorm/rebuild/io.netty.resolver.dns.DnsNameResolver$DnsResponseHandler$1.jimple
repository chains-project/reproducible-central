class io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1 extends java.lang.Object implements io.netty.channel.ChannelFutureListener
{
final int val$queryId;
final io.netty.resolver.dns.DnsQueryContext val$qCtx;
final io.netty.handler.codec.dns.DatagramDnsResponse val$res;
final io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler this$1;
void <init>(io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler, int, io.netty.resolver.dns.DnsQueryContext, io.netty.handler.codec.dns.DatagramDnsResponse)
{
io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1 v0;
io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler v1;
int v2;
io.netty.resolver.dns.DnsQueryContext v3;
io.netty.handler.codec.dns.DatagramDnsResponse v4;
v0 := @this: io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1;
v1 := @parameter0: io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler;
v2 := @parameter1: int;
v3 := @parameter2: io.netty.resolver.dns.DnsQueryContext;
v4 := @parameter3: io.netty.handler.codec.dns.DatagramDnsResponse;
v0.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1: io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler this$1> = v1;
v0.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1: int val$queryId> = v2;
v0.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1: io.netty.resolver.dns.DnsQueryContext val$qCtx> = v3;
v0.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1: io.netty.handler.codec.dns.DatagramDnsResponse val$res> = v4;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void operationComplete(io.netty.channel.ChannelFuture)
{
io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1 v0;
java.lang.Throwable v8;
java.net.SocketAddress v17;
io.netty.handler.codec.dns.TcpDnsResponseDecoder v23;
io.netty.resolver.dns.DnsQueryContext v18, v9;
io.netty.handler.codec.dns.DatagramDnsResponse v10;
java.lang.Integer v7;
io.netty.channel.ChannelPromise v29;
int v6;
io.netty.resolver.dns.TcpDnsQueryContext v14;
boolean v2, v4;
io.netty.resolver.dns.DnsNameResolver v16;
io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler v15;
io.netty.util.concurrent.Promise v13;
io.netty.handler.codec.dns.DnsQuestion v19;
io.netty.channel.ChannelPipeline v21, v24;
io.netty.channel.EventLoop v12;
io.netty.channel.ChannelHandler[] v22, v25;
io.netty.channel.ChannelFuture v1;
io.netty.channel.Channel v11, v28;
io.netty.handler.codec.dns.DnsRecord[] v20;
io.netty.util.internal.logging.InternalLogger v3, v5;
io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1$1 v26;
io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1$2 v27;
v0 := @this: io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1;
v1 := @parameter0: io.netty.channel.ChannelFuture;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelFuture: boolean isSuccess()>();
if v2 != 0 goto label2;
v3 = <io.netty.resolver.dns.DnsNameResolver: io.netty.util.internal.logging.InternalLogger logger>;
v4 = interfaceinvoke v3.<io.netty.util.internal.logging.InternalLogger: boolean isDebugEnabled()>();
if v4 == 0 goto label1;
v5 = <io.netty.resolver.dns.DnsNameResolver: io.netty.util.internal.logging.InternalLogger logger>;
v6 = v0.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1: int val$queryId>;
v7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v6);
v8 = interfaceinvoke v1.<io.netty.channel.ChannelFuture: java.lang.Throwable cause()>();
interfaceinvoke v5.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Unable to fallback to TCP [{}]", v7, v8);
label1:
v9 = v0.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1: io.netty.resolver.dns.DnsQueryContext val$qCtx>;
v10 = v0.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1: io.netty.handler.codec.dns.DatagramDnsResponse val$res>;
virtualinvoke v9.<io.netty.resolver.dns.DnsQueryContext: void finish(io.netty.channel.AddressedEnvelope)>(v10);
return;
label2:
v11 = interfaceinvoke v1.<io.netty.channel.ChannelFuture: io.netty.channel.Channel channel()>();
v12 = interfaceinvoke v11.<io.netty.channel.Channel: io.netty.channel.EventLoop eventLoop()>();
v13 = interfaceinvoke v12.<io.netty.channel.EventLoop: io.netty.util.concurrent.Promise newPromise()>();
v14 = new io.netty.resolver.dns.TcpDnsQueryContext;
v15 = v0.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1: io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler this$1>;
v16 = v15.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler: io.netty.resolver.dns.DnsNameResolver this$0>;
v17 = interfaceinvoke v11.<io.netty.channel.Channel: java.net.SocketAddress remoteAddress()>();
v18 = v0.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1: io.netty.resolver.dns.DnsQueryContext val$qCtx>;
v19 = virtualinvoke v18.<io.netty.resolver.dns.DnsQueryContext: io.netty.handler.codec.dns.DnsQuestion question()>();
v20 = <io.netty.resolver.dns.DnsNameResolver: io.netty.handler.codec.dns.DnsRecord[] EMPTY_ADDITIONALS>;
specialinvoke v14.<io.netty.resolver.dns.TcpDnsQueryContext: void <init>(io.netty.resolver.dns.DnsNameResolver,io.netty.channel.Channel,java.net.InetSocketAddress,io.netty.handler.codec.dns.DnsQuestion,io.netty.handler.codec.dns.DnsRecord[],io.netty.util.concurrent.Promise)>(v16, v11, v17, v19, v20, v13);
v21 = interfaceinvoke v11.<io.netty.channel.Channel: io.netty.channel.ChannelPipeline pipeline()>();
v22 = newarray (io.netty.channel.ChannelHandler)[1];
v23 = new io.netty.handler.codec.dns.TcpDnsResponseDecoder;
specialinvoke v23.<io.netty.handler.codec.dns.TcpDnsResponseDecoder: void <init>()>();
v22[0] = v23;
interfaceinvoke v21.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline addLast(io.netty.channel.ChannelHandler[])>(v22);
v24 = interfaceinvoke v11.<io.netty.channel.Channel: io.netty.channel.ChannelPipeline pipeline()>();
v25 = newarray (io.netty.channel.ChannelHandler)[1];
v26 = new io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1$1;
specialinvoke v26.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1$1: void <init>(io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1,io.netty.resolver.dns.TcpDnsQueryContext)>(v0, v14);
v25[0] = v26;
interfaceinvoke v24.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline addLast(io.netty.channel.ChannelHandler[])>(v25);
v27 = new io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1$2;
specialinvoke v27.<io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1$2: void <init>(io.netty.resolver.dns.DnsNameResolver$DnsResponseHandler$1,io.netty.channel.Channel)>(v0, v11);
interfaceinvoke v13.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise addListener(io.netty.util.concurrent.GenericFutureListener)>(v27);
v28 = interfaceinvoke v1.<io.netty.channel.ChannelFuture: io.netty.channel.Channel channel()>();
v29 = interfaceinvoke v28.<io.netty.channel.Channel: io.netty.channel.ChannelPromise newPromise()>();
virtualinvoke v14.<io.netty.resolver.dns.TcpDnsQueryContext: void query(boolean,io.netty.channel.ChannelPromise)>(1, v29);
return;
}
}