class io.netty.resolver.dns.DnsServerAddressStreamProviders$DefaultProviderHolder$1 extends java.lang.Object implements io.netty.resolver.dns.DnsServerAddressStreamProvider
{
private volatile io.netty.resolver.dns.DnsServerAddressStreamProvider currentProvider;
private final java.util.concurrent.atomic.AtomicLong lastRefresh;
void <init>()
{
java.util.concurrent.atomic.AtomicLong v2;
io.netty.resolver.dns.DnsServerAddressStreamProviders$DefaultProviderHolder$1 v0;
io.netty.resolver.dns.DnsServerAddressStreamProvider v1;
long v3;
v0 := @this: io.netty.resolver.dns.DnsServerAddressStreamProviders$DefaultProviderHolder$1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = specialinvoke v0.<io.netty.resolver.dns.DnsServerAddressStreamProviders$DefaultProviderHolder$1: io.netty.resolver.dns.DnsServerAddressStreamProvider provider()>();
v0.<io.netty.resolver.dns.DnsServerAddressStreamProviders$DefaultProviderHolder$1: io.netty.resolver.dns.DnsServerAddressStreamProvider currentProvider> = v1;
v2 = new java.util.concurrent.atomic.AtomicLong;
v3 = staticinvoke <java.lang.System: long nanoTime()>();
specialinvoke v2.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(v3);
v0.<io.netty.resolver.dns.DnsServerAddressStreamProviders$DefaultProviderHolder$1: java.util.concurrent.atomic.AtomicLong lastRefresh> = v2;
return;
}
public io.netty.resolver.dns.DnsServerAddressStream nameServerAddressStream(java.lang.String)
{
io.netty.resolver.dns.DnsServerAddressStream v13;
io.netty.resolver.dns.DnsServerAddressStreamProviders$DefaultProviderHolder$1 v0;
io.netty.resolver.dns.DnsServerAddressStreamProvider v12, v4;
long v10, v3, v5, v6, v7;
java.util.concurrent.atomic.AtomicLong v2, v9;
byte v8;
java.lang.String v1;
boolean v11;
v0 := @this: io.netty.resolver.dns.DnsServerAddressStreamProviders$DefaultProviderHolder$1;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.netty.resolver.dns.DnsServerAddressStreamProviders$DefaultProviderHolder$1: java.util.concurrent.atomic.AtomicLong lastRefresh>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicLong: long get()>();
v4 = v0.<io.netty.resolver.dns.DnsServerAddressStreamProviders$DefaultProviderHolder$1: io.netty.resolver.dns.DnsServerAddressStreamProvider currentProvider>;
v5 = staticinvoke <java.lang.System: long nanoTime()>();
v6 = v5 - v3;
v7 = <io.netty.resolver.dns.DnsServerAddressStreamProviders$DefaultProviderHolder: long REFRESH_INTERVAL>;
v8 = v6 cmp v7;
if v8 <= 0 goto label1;
v9 = v0.<io.netty.resolver.dns.DnsServerAddressStreamProviders$DefaultProviderHolder$1: java.util.concurrent.atomic.AtomicLong lastRefresh>;
v10 = staticinvoke <java.lang.System: long nanoTime()>();
v11 = virtualinvoke v9.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>(v3, v10);
if v11 == 0 goto label1;
v12 = specialinvoke v0.<io.netty.resolver.dns.DnsServerAddressStreamProviders$DefaultProviderHolder$1: io.netty.resolver.dns.DnsServerAddressStreamProvider provider()>();
v0.<io.netty.resolver.dns.DnsServerAddressStreamProviders$DefaultProviderHolder$1: io.netty.resolver.dns.DnsServerAddressStreamProvider currentProvider> = v12;
v4 = v12;
label1:
v13 = interfaceinvoke v4.<io.netty.resolver.dns.DnsServerAddressStreamProvider: io.netty.resolver.dns.DnsServerAddressStream nameServerAddressStream(java.lang.String)>(v1);
return v13;
}
private io.netty.resolver.dns.DnsServerAddressStreamProvider provider()
{
io.netty.resolver.dns.DnsServerAddressStreamProviders$DefaultProviderHolder$1 v0;
boolean v1;
io.netty.resolver.dns.DnsServerAddressStreamProvider v2;
v0 := @this: io.netty.resolver.dns.DnsServerAddressStreamProviders$DefaultProviderHolder$1;
v1 = staticinvoke <io.netty.util.internal.PlatformDependent: boolean isWindows()>();
if v1 == 0 goto label1;
v2 = <io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider: io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider INSTANCE>;
goto label2;
label1:
v2 = staticinvoke <io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: io.netty.resolver.dns.DnsServerAddressStreamProvider parseSilently()>();
label2:
return v2;
}
}