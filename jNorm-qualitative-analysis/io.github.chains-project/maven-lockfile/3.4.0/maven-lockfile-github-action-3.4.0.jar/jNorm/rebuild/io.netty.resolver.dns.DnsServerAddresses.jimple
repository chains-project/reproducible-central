public abstract class io.netty.resolver.dns.DnsServerAddresses extends java.lang.Object
{
public void <init>()
{
io.netty.resolver.dns.DnsServerAddresses v0;
v0 := @this: io.netty.resolver.dns.DnsServerAddresses;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.util.List defaultAddressList()
{
java.util.List v0;
v0 = staticinvoke <io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider: java.util.List defaultAddressList()>();
return v0;
}
public static io.netty.resolver.dns.DnsServerAddresses defaultAddresses()
{
io.netty.resolver.dns.DnsServerAddresses v0;
v0 = staticinvoke <io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider: io.netty.resolver.dns.DnsServerAddresses defaultAddresses()>();
return v0;
}
public static io.netty.resolver.dns.DnsServerAddresses sequential(java.lang.Iterable)
{
java.util.List v1;
io.netty.resolver.dns.DnsServerAddresses v2;
java.lang.Iterable v0;
v0 := @parameter0: java.lang.Iterable;
v1 = staticinvoke <io.netty.resolver.dns.DnsServerAddresses: java.util.List sanitize(java.lang.Iterable)>(v0);
v2 = staticinvoke <io.netty.resolver.dns.DnsServerAddresses: io.netty.resolver.dns.DnsServerAddresses sequential0(java.util.List)>(v1);
return v2;
}
public static transient io.netty.resolver.dns.DnsServerAddresses sequential(java.net.InetSocketAddress[])
{
java.net.InetSocketAddress[] v0;
java.util.List v1;
io.netty.resolver.dns.DnsServerAddresses v2;
v0 := @parameter0: java.net.InetSocketAddress[];
v1 = staticinvoke <io.netty.resolver.dns.DnsServerAddresses: java.util.List sanitize(java.net.InetSocketAddress[])>(v0);
v2 = staticinvoke <io.netty.resolver.dns.DnsServerAddresses: io.netty.resolver.dns.DnsServerAddresses sequential0(java.util.List)>(v1);
return v2;
}
private static io.netty.resolver.dns.DnsServerAddresses sequential0(java.util.List)
{
java.util.List v0;
io.netty.resolver.dns.DnsServerAddresses v3;
io.netty.resolver.dns.DnsServerAddresses$1 v4;
int v1;
java.lang.Object v2;
v0 := @parameter0: java.util.List;
v1 = interfaceinvoke v0.<java.util.List: int size()>();
if v1 != 1 goto label1;
v2 = interfaceinvoke v0.<java.util.List: java.lang.Object get(int)>(0);
v3 = staticinvoke <io.netty.resolver.dns.DnsServerAddresses: io.netty.resolver.dns.DnsServerAddresses singleton(java.net.InetSocketAddress)>(v2);
return v3;
label1:
v4 = new io.netty.resolver.dns.DnsServerAddresses$1;
specialinvoke v4.<io.netty.resolver.dns.DnsServerAddresses$1: void <init>(java.lang.String,java.util.List)>("sequential", v0);
return v4;
}
public static io.netty.resolver.dns.DnsServerAddresses shuffled(java.lang.Iterable)
{
java.util.List v1;
io.netty.resolver.dns.DnsServerAddresses v2;
java.lang.Iterable v0;
v0 := @parameter0: java.lang.Iterable;
v1 = staticinvoke <io.netty.resolver.dns.DnsServerAddresses: java.util.List sanitize(java.lang.Iterable)>(v0);
v2 = staticinvoke <io.netty.resolver.dns.DnsServerAddresses: io.netty.resolver.dns.DnsServerAddresses shuffled0(java.util.List)>(v1);
return v2;
}
public static transient io.netty.resolver.dns.DnsServerAddresses shuffled(java.net.InetSocketAddress[])
{
java.net.InetSocketAddress[] v0;
java.util.List v1;
io.netty.resolver.dns.DnsServerAddresses v2;
v0 := @parameter0: java.net.InetSocketAddress[];
v1 = staticinvoke <io.netty.resolver.dns.DnsServerAddresses: java.util.List sanitize(java.net.InetSocketAddress[])>(v0);
v2 = staticinvoke <io.netty.resolver.dns.DnsServerAddresses: io.netty.resolver.dns.DnsServerAddresses shuffled0(java.util.List)>(v1);
return v2;
}
private static io.netty.resolver.dns.DnsServerAddresses shuffled0(java.util.List)
{
java.util.List v0;
io.netty.resolver.dns.DnsServerAddresses v3;
io.netty.resolver.dns.DnsServerAddresses$2 v4;
int v1;
java.lang.Object v2;
v0 := @parameter0: java.util.List;
v1 = interfaceinvoke v0.<java.util.List: int size()>();
if v1 != 1 goto label1;
v2 = interfaceinvoke v0.<java.util.List: java.lang.Object get(int)>(0);
v3 = staticinvoke <io.netty.resolver.dns.DnsServerAddresses: io.netty.resolver.dns.DnsServerAddresses singleton(java.net.InetSocketAddress)>(v2);
return v3;
label1:
v4 = new io.netty.resolver.dns.DnsServerAddresses$2;
specialinvoke v4.<io.netty.resolver.dns.DnsServerAddresses$2: void <init>(java.lang.String,java.util.List)>("shuffled", v0);
return v4;
}
public static io.netty.resolver.dns.DnsServerAddresses rotational(java.lang.Iterable)
{
java.util.List v1;
io.netty.resolver.dns.DnsServerAddresses v2;
java.lang.Iterable v0;
v0 := @parameter0: java.lang.Iterable;
v1 = staticinvoke <io.netty.resolver.dns.DnsServerAddresses: java.util.List sanitize(java.lang.Iterable)>(v0);
v2 = staticinvoke <io.netty.resolver.dns.DnsServerAddresses: io.netty.resolver.dns.DnsServerAddresses rotational0(java.util.List)>(v1);
return v2;
}
public static transient io.netty.resolver.dns.DnsServerAddresses rotational(java.net.InetSocketAddress[])
{
java.net.InetSocketAddress[] v0;
java.util.List v1;
io.netty.resolver.dns.DnsServerAddresses v2;
v0 := @parameter0: java.net.InetSocketAddress[];
v1 = staticinvoke <io.netty.resolver.dns.DnsServerAddresses: java.util.List sanitize(java.net.InetSocketAddress[])>(v0);
v2 = staticinvoke <io.netty.resolver.dns.DnsServerAddresses: io.netty.resolver.dns.DnsServerAddresses rotational0(java.util.List)>(v1);
return v2;
}
private static io.netty.resolver.dns.DnsServerAddresses rotational0(java.util.List)
{
java.util.List v0;
io.netty.resolver.dns.DnsServerAddresses v3;
io.netty.resolver.dns.RotationalDnsServerAddresses v4;
int v1;
java.lang.Object v2;
v0 := @parameter0: java.util.List;
v1 = interfaceinvoke v0.<java.util.List: int size()>();
if v1 != 1 goto label1;
v2 = interfaceinvoke v0.<java.util.List: java.lang.Object get(int)>(0);
v3 = staticinvoke <io.netty.resolver.dns.DnsServerAddresses: io.netty.resolver.dns.DnsServerAddresses singleton(java.net.InetSocketAddress)>(v2);
return v3;
label1:
v4 = new io.netty.resolver.dns.RotationalDnsServerAddresses;
specialinvoke v4.<io.netty.resolver.dns.RotationalDnsServerAddresses: void <init>(java.util.List)>(v0);
return v4;
}
public static io.netty.resolver.dns.DnsServerAddresses singleton(java.net.InetSocketAddress)
{
java.lang.String v3;
java.lang.IllegalArgumentException v2;
io.netty.resolver.dns.SingletonDnsServerAddresses v4;
java.net.InetSocketAddress v0;
boolean v1;
v0 := @parameter0: java.net.InetSocketAddress;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, "address");
v1 = virtualinvoke v0.<java.net.InetSocketAddress: boolean isUnresolved()>();
if v1 == 0 goto label1;
v2 = new java.lang.IllegalArgumentException;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.net.InetSocketAddress)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("cannot use an unresolved DNS server address: \u0001");
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v3);
throw v2;
label1:
v4 = new io.netty.resolver.dns.SingletonDnsServerAddresses;
specialinvoke v4.<io.netty.resolver.dns.SingletonDnsServerAddresses: void <init>(java.net.InetSocketAddress)>(v0);
return v4;
}
private static java.util.List sanitize(java.lang.Iterable)
{
java.util.Iterator v6;
java.util.Collection v12;
java.lang.IllegalArgumentException v10;
java.lang.Iterable v0;
java.util.ArrayList v2, v4, v5;
int v3;
java.lang.Object v8;
java.lang.String v11;
boolean v1, v7, v9;
v0 := @parameter0: java.lang.Iterable;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, "addresses");
v1 = v0 instanceof java.util.Collection;
if v1 == 0 goto label1;
v2 = new java.util.ArrayList;
v3 = interfaceinvoke v0.<java.util.Collection: int size()>();
specialinvoke v2.<java.util.ArrayList: void <init>(int)>(v3);
v4 = v2;
goto label2;
label1:
v5 = new java.util.ArrayList;
specialinvoke v5.<java.util.ArrayList: void <init>(int)>(4);
v4 = v5;
label2:
v6 = interfaceinvoke v0.<java.lang.Iterable: java.util.Iterator iterator()>();
label3:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label5;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
if v8 == null goto label5;
v9 = virtualinvoke v8.<java.net.InetSocketAddress: boolean isUnresolved()>();
if v9 == 0 goto label4;
v10 = new java.lang.IllegalArgumentException;
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.net.InetSocketAddress)>(v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("cannot use an unresolved DNS server address: \u0001");
specialinvoke v10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v11);
throw v10;
label4:
interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(v8);
goto label3;
label5:
v12 = staticinvoke <io.netty.util.internal.ObjectUtil: java.util.Collection checkNonEmpty(java.util.Collection,java.lang.String)>(v4, "list");
return v12;
}
private static java.util.List sanitize(java.net.InetSocketAddress[])
{
java.lang.IllegalArgumentException v7;
java.net.InetSocketAddress v5;
java.util.ArrayList v1;
java.util.List v10;
int v2, v3, v4;
java.net.InetSocketAddress[] v0;
java.lang.String v8;
boolean v6, v9;
v0 := @parameter0: java.net.InetSocketAddress[];
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, "addresses");
v1 = new java.util.ArrayList;
v2 = lengthof v0;
specialinvoke v1.<java.util.ArrayList: void <init>(int)>(v2);
v3 = lengthof v0;
v4 = 0;
label1:
if v4 >= v3 goto label3;
v5 = v0[v4];
if v5 == null goto label3;
v6 = virtualinvoke v5.<java.net.InetSocketAddress: boolean isUnresolved()>();
if v6 == 0 goto label2;
v7 = new java.lang.IllegalArgumentException;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.net.InetSocketAddress)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("cannot use an unresolved DNS server address: \u0001");
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v8);
throw v7;
label2:
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v5);
v4 = v4 + 1;
goto label1;
label3:
v9 = interfaceinvoke v1.<java.util.List: boolean isEmpty()>();
if v9 == 0 goto label4;
v10 = staticinvoke <io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider: java.util.List defaultAddressList()>();
return v10;
label4:
return v1;
}
public abstract io.netty.resolver.dns.DnsServerAddressStream stream();
}