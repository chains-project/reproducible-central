final class io.netty.resolver.dns.InflightNameResolver extends java.lang.Object implements io.netty.resolver.NameResolver
{
private final io.netty.util.concurrent.EventExecutor executor;
private final io.netty.resolver.NameResolver delegate;
private final java.util.concurrent.ConcurrentMap resolvesInProgress;
private final java.util.concurrent.ConcurrentMap resolveAllsInProgress;
void <init>(io.netty.util.concurrent.EventExecutor, io.netty.resolver.NameResolver, java.util.concurrent.ConcurrentMap, java.util.concurrent.ConcurrentMap)
{
io.netty.resolver.dns.InflightNameResolver v0;
io.netty.util.concurrent.EventExecutor v1;
io.netty.resolver.NameResolver v2;
java.util.concurrent.ConcurrentMap v3, v4;
java.lang.Object v5, v6, v7, v8;
v0 := @this: io.netty.resolver.dns.InflightNameResolver;
v1 := @parameter0: io.netty.util.concurrent.EventExecutor;
v2 := @parameter1: io.netty.resolver.NameResolver;
v3 := @parameter2: java.util.concurrent.ConcurrentMap;
v4 := @parameter3: java.util.concurrent.ConcurrentMap;
specialinvoke v0.<java.lang.Object: void <init>()>();
v5 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "executor");
v0.<io.netty.resolver.dns.InflightNameResolver: io.netty.util.concurrent.EventExecutor executor> = v5;
v6 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "delegate");
v0.<io.netty.resolver.dns.InflightNameResolver: io.netty.resolver.NameResolver delegate> = v6;
v7 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v3, "resolvesInProgress");
v0.<io.netty.resolver.dns.InflightNameResolver: java.util.concurrent.ConcurrentMap resolvesInProgress> = v7;
v8 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v4, "resolveAllsInProgress");
v0.<io.netty.resolver.dns.InflightNameResolver: java.util.concurrent.ConcurrentMap resolveAllsInProgress> = v8;
return;
}
public io.netty.util.concurrent.Future resolve(java.lang.String)
{
io.netty.resolver.dns.InflightNameResolver v0;
io.netty.util.concurrent.EventExecutor v2;
io.netty.util.concurrent.Promise v3, v4;
java.lang.String v1;
v0 := @this: io.netty.resolver.dns.InflightNameResolver;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.netty.resolver.dns.InflightNameResolver: io.netty.util.concurrent.EventExecutor executor>;
v3 = interfaceinvoke v2.<io.netty.util.concurrent.EventExecutor: io.netty.util.concurrent.Promise newPromise()>();
v4 = virtualinvoke v0.<io.netty.resolver.dns.InflightNameResolver: io.netty.util.concurrent.Promise resolve(java.lang.String,io.netty.util.concurrent.Promise)>(v1, v3);
return v4;
}
public io.netty.util.concurrent.Future resolveAll(java.lang.String)
{
io.netty.resolver.dns.InflightNameResolver v0;
io.netty.util.concurrent.EventExecutor v2;
io.netty.util.concurrent.Promise v3, v4;
java.lang.String v1;
v0 := @this: io.netty.resolver.dns.InflightNameResolver;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.netty.resolver.dns.InflightNameResolver: io.netty.util.concurrent.EventExecutor executor>;
v3 = interfaceinvoke v2.<io.netty.util.concurrent.EventExecutor: io.netty.util.concurrent.Promise newPromise()>();
v4 = virtualinvoke v0.<io.netty.resolver.dns.InflightNameResolver: io.netty.util.concurrent.Promise resolveAll(java.lang.String,io.netty.util.concurrent.Promise)>(v1, v3);
return v4;
}
public void close()
{
io.netty.resolver.dns.InflightNameResolver v0;
io.netty.resolver.NameResolver v1;
v0 := @this: io.netty.resolver.dns.InflightNameResolver;
v1 = v0.<io.netty.resolver.dns.InflightNameResolver: io.netty.resolver.NameResolver delegate>;
interfaceinvoke v1.<io.netty.resolver.NameResolver: void close()>();
return;
}
public io.netty.util.concurrent.Promise resolve(java.lang.String, io.netty.util.concurrent.Promise)
{
io.netty.resolver.dns.InflightNameResolver v0;
io.netty.util.concurrent.Promise v2, v4;
java.lang.String v1;
java.util.concurrent.ConcurrentMap v3;
v0 := @this: io.netty.resolver.dns.InflightNameResolver;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.netty.util.concurrent.Promise;
v3 = v0.<io.netty.resolver.dns.InflightNameResolver: java.util.concurrent.ConcurrentMap resolvesInProgress>;
v4 = specialinvoke v0.<io.netty.resolver.dns.InflightNameResolver: io.netty.util.concurrent.Promise resolve(java.util.concurrent.ConcurrentMap,java.lang.String,io.netty.util.concurrent.Promise,boolean)>(v3, v1, v2, 0);
return v4;
}
public io.netty.util.concurrent.Promise resolveAll(java.lang.String, io.netty.util.concurrent.Promise)
{
io.netty.resolver.dns.InflightNameResolver v0;
io.netty.util.concurrent.Promise v2, v4;
java.lang.String v1;
java.util.concurrent.ConcurrentMap v3;
v0 := @this: io.netty.resolver.dns.InflightNameResolver;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.netty.util.concurrent.Promise;
v3 = v0.<io.netty.resolver.dns.InflightNameResolver: java.util.concurrent.ConcurrentMap resolveAllsInProgress>;
v4 = specialinvoke v0.<io.netty.resolver.dns.InflightNameResolver: io.netty.util.concurrent.Promise resolve(java.util.concurrent.ConcurrentMap,java.lang.String,io.netty.util.concurrent.Promise,boolean)>(v3, v1, v2, 1);
return v4;
}
private io.netty.util.concurrent.Promise resolve(java.util.concurrent.ConcurrentMap, java.lang.String, io.netty.util.concurrent.Promise, boolean)
{
io.netty.resolver.dns.InflightNameResolver v0;
java.lang.Throwable v12;
io.netty.util.concurrent.Promise v3;
io.netty.resolver.NameResolver v8, v9;
java.util.concurrent.ConcurrentMap v1;
io.netty.resolver.dns.InflightNameResolver$1 v7;
io.netty.resolver.dns.InflightNameResolver$2 v11, v14;
java.lang.Object v5;
java.lang.String v2;
boolean v10, v13, v4, v6;
v0 := @this: io.netty.resolver.dns.InflightNameResolver;
v1 := @parameter0: java.util.concurrent.ConcurrentMap;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.netty.util.concurrent.Promise;
v4 := @parameter3: boolean;
v5 = interfaceinvoke v1.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(v2, v3);
if v5 == null goto label2;
v6 = interfaceinvoke v5.<io.netty.util.concurrent.Promise: boolean isDone()>();
if v6 == 0 goto label1;
staticinvoke <io.netty.resolver.dns.InflightNameResolver: void transferResult(io.netty.util.concurrent.Future,io.netty.util.concurrent.Promise)>(v5, v3);
goto label9;
label1:
v7 = new io.netty.resolver.dns.InflightNameResolver$1;
specialinvoke v7.<io.netty.resolver.dns.InflightNameResolver$1: void <init>(io.netty.resolver.dns.InflightNameResolver,io.netty.util.concurrent.Promise)>(v0, v3);
interfaceinvoke v5.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise addListener(io.netty.util.concurrent.GenericFutureListener)>(v7);
goto label9;
label2:
if v4 == 0 goto label3;
v8 = v0.<io.netty.resolver.dns.InflightNameResolver: io.netty.resolver.NameResolver delegate>;
interfaceinvoke v8.<io.netty.resolver.NameResolver: io.netty.util.concurrent.Future resolveAll(java.lang.String,io.netty.util.concurrent.Promise)>(v2, v3);
goto label4;
label3:
v9 = v0.<io.netty.resolver.dns.InflightNameResolver: io.netty.resolver.NameResolver delegate>;
interfaceinvoke v9.<io.netty.resolver.NameResolver: io.netty.util.concurrent.Future resolve(java.lang.String,io.netty.util.concurrent.Promise)>(v2, v3);
label4:
v10 = interfaceinvoke v3.<io.netty.util.concurrent.Promise: boolean isDone()>();
if v10 == 0 goto label5;
interfaceinvoke v1.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(v2);
goto label9;
label5:
v11 = new io.netty.resolver.dns.InflightNameResolver$2;
specialinvoke v11.<io.netty.resolver.dns.InflightNameResolver$2: void <init>(io.netty.resolver.dns.InflightNameResolver,java.util.concurrent.ConcurrentMap,java.lang.String)>(v0, v1, v2);
interfaceinvoke v3.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise addListener(io.netty.util.concurrent.GenericFutureListener)>(v11);
goto label9;
label6:
v12 := @caughtexception;
v13 = interfaceinvoke v3.<io.netty.util.concurrent.Promise: boolean isDone()>();
if v13 == 0 goto label7;
interfaceinvoke v1.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(v2);
goto label8;
label7:
v14 = new io.netty.resolver.dns.InflightNameResolver$2;
specialinvoke v14.<io.netty.resolver.dns.InflightNameResolver$2: void <init>(io.netty.resolver.dns.InflightNameResolver,java.util.concurrent.ConcurrentMap,java.lang.String)>(v0, v1, v2);
interfaceinvoke v3.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise addListener(io.netty.util.concurrent.GenericFutureListener)>(v14);
label8:
throw v12;
label9:
return v3;
catch java.lang.Throwable from label2 to label4 with label6;
}
private static void transferResult(io.netty.util.concurrent.Future, io.netty.util.concurrent.Promise)
{
java.lang.Throwable v4;
io.netty.util.concurrent.Promise v1;
java.lang.Object v3;
io.netty.util.concurrent.Future v0;
boolean v2;
v0 := @parameter0: io.netty.util.concurrent.Future;
v1 := @parameter1: io.netty.util.concurrent.Promise;
v2 = interfaceinvoke v0.<io.netty.util.concurrent.Future: boolean isSuccess()>();
if v2 == 0 goto label1;
v3 = interfaceinvoke v0.<io.netty.util.concurrent.Future: java.lang.Object getNow()>();
interfaceinvoke v1.<io.netty.util.concurrent.Promise: boolean trySuccess(java.lang.Object)>(v3);
goto label2;
label1:
v4 = interfaceinvoke v0.<io.netty.util.concurrent.Future: java.lang.Throwable cause()>();
interfaceinvoke v1.<io.netty.util.concurrent.Promise: boolean tryFailure(java.lang.Throwable)>(v4);
label2:
return;
}
public java.lang.String toString()
{
io.netty.resolver.dns.InflightNameResolver v0;
io.netty.resolver.NameResolver v2;
java.lang.String v1, v3;
v0 := @this: io.netty.resolver.dns.InflightNameResolver;
v1 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String simpleClassName(java.lang.Object)>(v0);
v2 = v0.<io.netty.resolver.dns.InflightNameResolver: io.netty.resolver.NameResolver delegate>;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,io.netty.resolver.NameResolver)>(v1, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001(\u0001)");
return v3;
}
}