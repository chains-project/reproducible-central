public class io.netty.util.DefaultAttributeMap extends java.lang.Object implements io.netty.util.AttributeMap
{
private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater ATTRIBUTES_UPDATER;
private static final io.netty.util.DefaultAttributeMap$DefaultAttribute[] EMPTY_ATTRIBUTES;
private volatile io.netty.util.DefaultAttributeMap$DefaultAttribute[] attributes;
static final boolean $assertionsDisabled;
public void <init>()
{
io.netty.util.DefaultAttributeMap$DefaultAttribute[] v1;
io.netty.util.DefaultAttributeMap v0;
v0 := @this: io.netty.util.DefaultAttributeMap;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = <io.netty.util.DefaultAttributeMap: io.netty.util.DefaultAttributeMap$DefaultAttribute[] EMPTY_ATTRIBUTES>;
v0.<io.netty.util.DefaultAttributeMap: io.netty.util.DefaultAttributeMap$DefaultAttribute[] attributes> = v1;
return;
}
private static int searchAttributeByKey(io.netty.util.DefaultAttributeMap$DefaultAttribute[], io.netty.util.AttributeKey)
{
io.netty.util.AttributeKey v1, v8;
io.netty.util.DefaultAttributeMap$DefaultAttribute v7;
java.lang.AssertionError v12;
int v10, v14, v15, v2, v3, v4, v5, v6, v9;
io.netty.util.DefaultAttributeMap$DefaultAttribute[] v0;
boolean v11, v13;
v0 := @parameter0: io.netty.util.DefaultAttributeMap$DefaultAttribute[];
v1 := @parameter1: io.netty.util.AttributeKey;
v2 = 0;
v3 = lengthof v0;
v4 = v3 - 1;
label1:
if v2 > v4 goto label7;
v5 = v2 + v4;
v6 = v5 >>> 1;
v7 = v0[v6];
v8 = v7.<io.netty.util.DefaultAttributeMap$DefaultAttribute: io.netty.util.AttributeKey key>;
if v8 != v1 goto label2;
return v6;
label2:
v9 = virtualinvoke v8.<io.netty.util.AttributeKey: int id()>();
v10 = virtualinvoke v1.<io.netty.util.AttributeKey: int id()>();
v11 = <io.netty.util.DefaultAttributeMap: boolean $assertionsDisabled>;
if v11 != 0 goto label3;
if v9 != v10 goto label3;
v12 = new java.lang.AssertionError;
specialinvoke v12.<java.lang.AssertionError: void <init>()>();
throw v12;
label3:
if v9 >= v10 goto label4;
v13 = 1;
goto label5;
label4:
v13 = 0;
label5:
if v13 == 0 goto label6;
v2 = v6 + 1;
goto label1;
label6:
v4 = v6 - 1;
goto label1;
label7:
v14 = v2 + 1;
v15 = neg v14;
return v15;
}
private static void orderedCopyOnInsert(io.netty.util.DefaultAttributeMap$DefaultAttribute[], int, io.netty.util.DefaultAttributeMap$DefaultAttribute[], io.netty.util.DefaultAttributeMap$DefaultAttribute)
{
io.netty.util.AttributeKey v12, v4, v9;
io.netty.util.DefaultAttributeMap$DefaultAttribute v15, v3, v7;
java.lang.AssertionError v11;
int v1, v10, v13, v14, v16, v17, v5, v6;
io.netty.util.DefaultAttributeMap$DefaultAttribute[] v0, v2;
boolean v8;
v0 := @parameter0: io.netty.util.DefaultAttributeMap$DefaultAttribute[];
v1 := @parameter1: int;
v2 := @parameter2: io.netty.util.DefaultAttributeMap$DefaultAttribute[];
v3 := @parameter3: io.netty.util.DefaultAttributeMap$DefaultAttribute;
v4 = v3.<io.netty.util.DefaultAttributeMap$DefaultAttribute: io.netty.util.AttributeKey key>;
v5 = virtualinvoke v4.<io.netty.util.AttributeKey: int id()>();
v6 = v1 - 1;
label1:
if v6 < 0 goto label3;
v7 = v0[v6];
v8 = <io.netty.util.DefaultAttributeMap: boolean $assertionsDisabled>;
if v8 != 0 goto label2;
v9 = v7.<io.netty.util.DefaultAttributeMap$DefaultAttribute: io.netty.util.AttributeKey key>;
v10 = virtualinvoke v9.<io.netty.util.AttributeKey: int id()>();
if v10 != v5 goto label2;
v11 = new java.lang.AssertionError;
specialinvoke v11.<java.lang.AssertionError: void <init>()>();
throw v11;
label2:
v12 = v7.<io.netty.util.DefaultAttributeMap$DefaultAttribute: io.netty.util.AttributeKey key>;
v13 = virtualinvoke v12.<io.netty.util.AttributeKey: int id()>();
if v13 < v5 goto label3;
v14 = v6 + 1;
v15 = v0[v6];
v2[v14] = v15;
v6 = v6 - 1;
goto label1;
label3:
v16 = v6 + 1;
v2[v16] = v3;
v17 = v6 + 1;
if v17 <= 0 goto label4;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v0, 0, v2, 0, v17);
label4:
return;
}
public io.netty.util.Attribute attr(io.netty.util.AttributeKey)
{
io.netty.util.AttributeKey v1, v7;
java.lang.Object[] v12;
io.netty.util.DefaultAttributeMap$DefaultAttribute v10, v13, v2, v5;
java.lang.AssertionError v8;
io.netty.util.DefaultAttributeMap v0;
int v11, v14, v15, v4;
io.netty.util.DefaultAttributeMap$DefaultAttribute[] v3;
boolean v17, v6, v9;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v16;
v0 := @this: io.netty.util.DefaultAttributeMap;
v1 := @parameter0: io.netty.util.AttributeKey;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "key");
v2 = null;
label1:
v3 = v0.<io.netty.util.DefaultAttributeMap: io.netty.util.DefaultAttributeMap$DefaultAttribute[] attributes>;
v4 = staticinvoke <io.netty.util.DefaultAttributeMap: int searchAttributeByKey(io.netty.util.DefaultAttributeMap$DefaultAttribute[],io.netty.util.AttributeKey)>(v3, v1);
if v4 < 0 goto label5;
v5 = v3[v4];
v6 = <io.netty.util.DefaultAttributeMap: boolean $assertionsDisabled>;
if v6 != 0 goto label2;
v7 = virtualinvoke v5.<io.netty.util.DefaultAttributeMap$DefaultAttribute: io.netty.util.AttributeKey key()>();
if v7 == v1 goto label2;
v8 = new java.lang.AssertionError;
specialinvoke v8.<java.lang.AssertionError: void <init>()>();
throw v8;
label2:
v9 = specialinvoke v5.<io.netty.util.DefaultAttributeMap$DefaultAttribute: boolean isRemoved()>();
if v9 != 0 goto label3;
return v5;
label3:
if v2 != null goto label4;
v10 = new io.netty.util.DefaultAttributeMap$DefaultAttribute;
specialinvoke v10.<io.netty.util.DefaultAttributeMap$DefaultAttribute: void <init>(io.netty.util.DefaultAttributeMap,io.netty.util.AttributeKey)>(v0, v1);
v2 = v10;
label4:
v11 = lengthof v3;
v12 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(v3, v11);
v12[v4] = v2;
goto label7;
label5:
if v2 != null goto label6;
v13 = new io.netty.util.DefaultAttributeMap$DefaultAttribute;
specialinvoke v13.<io.netty.util.DefaultAttributeMap$DefaultAttribute: void <init>(io.netty.util.DefaultAttributeMap,io.netty.util.AttributeKey)>(v0, v1);
v2 = v13;
label6:
v14 = lengthof v3;
v15 = v14 + 1;
v12 = newarray (io.netty.util.DefaultAttributeMap$DefaultAttribute)[v15];
staticinvoke <io.netty.util.DefaultAttributeMap: void orderedCopyOnInsert(io.netty.util.DefaultAttributeMap$DefaultAttribute[],int,io.netty.util.DefaultAttributeMap$DefaultAttribute[],io.netty.util.DefaultAttributeMap$DefaultAttribute)>(v3, v14, v12, v2);
label7:
v16 = <io.netty.util.DefaultAttributeMap: java.util.concurrent.atomic.AtomicReferenceFieldUpdater ATTRIBUTES_UPDATER>;
v17 = virtualinvoke v16.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(v0, v3, v12);
if v17 == 0 goto label1;
return v2;
}
public boolean hasAttr(io.netty.util.AttributeKey)
{
io.netty.util.AttributeKey v1;
io.netty.util.DefaultAttributeMap v0;
int v3;
io.netty.util.DefaultAttributeMap$DefaultAttribute[] v2;
boolean v4;
v0 := @this: io.netty.util.DefaultAttributeMap;
v1 := @parameter0: io.netty.util.AttributeKey;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "key");
v2 = v0.<io.netty.util.DefaultAttributeMap: io.netty.util.DefaultAttributeMap$DefaultAttribute[] attributes>;
v3 = staticinvoke <io.netty.util.DefaultAttributeMap: int searchAttributeByKey(io.netty.util.DefaultAttributeMap$DefaultAttribute[],io.netty.util.AttributeKey)>(v2, v1);
if v3 < 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
private void removeAttributeIfMatch(io.netty.util.AttributeKey, io.netty.util.DefaultAttributeMap$DefaultAttribute)
{
io.netty.util.AttributeKey v1, v7;
io.netty.util.DefaultAttributeMap$DefaultAttribute v2, v5;
java.lang.AssertionError v8;
io.netty.util.DefaultAttributeMap v0;
int v10, v13, v14, v15, v4, v9;
io.netty.util.DefaultAttributeMap$DefaultAttribute[] v11, v12, v3;
boolean v17, v6;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v16;
v0 := @this: io.netty.util.DefaultAttributeMap;
v1 := @parameter0: io.netty.util.AttributeKey;
v2 := @parameter1: io.netty.util.DefaultAttributeMap$DefaultAttribute;
label1:
v3 = v0.<io.netty.util.DefaultAttributeMap: io.netty.util.DefaultAttributeMap$DefaultAttribute[] attributes>;
v4 = staticinvoke <io.netty.util.DefaultAttributeMap: int searchAttributeByKey(io.netty.util.DefaultAttributeMap$DefaultAttribute[],io.netty.util.AttributeKey)>(v3, v1);
if v4 >= 0 goto label2;
return;
label2:
v5 = v3[v4];
v6 = <io.netty.util.DefaultAttributeMap: boolean $assertionsDisabled>;
if v6 != 0 goto label3;
v7 = virtualinvoke v5.<io.netty.util.DefaultAttributeMap$DefaultAttribute: io.netty.util.AttributeKey key()>();
if v7 == v1 goto label3;
v8 = new java.lang.AssertionError;
specialinvoke v8.<java.lang.AssertionError: void <init>()>();
throw v8;
label3:
if v5 == v2 goto label4;
return;
label4:
v9 = lengthof v3;
v10 = v9 - 1;
if v10 != 0 goto label5;
v11 = <io.netty.util.DefaultAttributeMap: io.netty.util.DefaultAttributeMap$DefaultAttribute[] EMPTY_ATTRIBUTES>;
goto label6;
label5:
v11 = newarray (io.netty.util.DefaultAttributeMap$DefaultAttribute)[v10];
label6:
v12 = v11;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v3, 0, v11, 0, v4);
v13 = v9 - v4;
v14 = v13 - 1;
if v14 <= 0 goto label7;
v15 = v4 + 1;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v3, v15, v11, v4, v14);
label7:
v16 = <io.netty.util.DefaultAttributeMap: java.util.concurrent.atomic.AtomicReferenceFieldUpdater ATTRIBUTES_UPDATER>;
v17 = virtualinvoke v16.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(v0, v3, v12);
if v17 == 0 goto label1;
return;
}
static void <clinit>()
{
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v3;
io.netty.util.DefaultAttributeMap$DefaultAttribute[] v4;
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/util/DefaultAttributeMap;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.util.DefaultAttributeMap: boolean $assertionsDisabled> = v2;
v3 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lio/netty/util/DefaultAttributeMap;", class "[Lio/netty/util/DefaultAttributeMap$DefaultAttribute;", "attributes");
<io.netty.util.DefaultAttributeMap: java.util.concurrent.atomic.AtomicReferenceFieldUpdater ATTRIBUTES_UPDATER> = v3;
v4 = newarray (io.netty.util.DefaultAttributeMap$DefaultAttribute)[0];
<io.netty.util.DefaultAttributeMap: io.netty.util.DefaultAttributeMap$DefaultAttribute[] EMPTY_ATTRIBUTES> = v4;
return;
}
}