final class io.netty.util.HashedWheelTimer$HashedWheelBucket extends java.lang.Object
{
private io.netty.util.HashedWheelTimer$HashedWheelTimeout head;
private io.netty.util.HashedWheelTimer$HashedWheelTimeout tail;
static final boolean $assertionsDisabled;
private void <init>()
{
io.netty.util.HashedWheelTimer$HashedWheelBucket v0;
v0 := @this: io.netty.util.HashedWheelTimer$HashedWheelBucket;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void addTimeout(io.netty.util.HashedWheelTimer$HashedWheelTimeout)
{
io.netty.util.HashedWheelTimer$HashedWheelTimeout v1, v5, v6, v7;
java.lang.AssertionError v4;
io.netty.util.HashedWheelTimer$HashedWheelBucket v0, v3;
boolean v2;
v0 := @this: io.netty.util.HashedWheelTimer$HashedWheelBucket;
v1 := @parameter0: io.netty.util.HashedWheelTimer$HashedWheelTimeout;
v2 = <io.netty.util.HashedWheelTimer$HashedWheelBucket: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
v3 = v1.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: io.netty.util.HashedWheelTimer$HashedWheelBucket bucket>;
if v3 == null goto label1;
v4 = new java.lang.AssertionError;
specialinvoke v4.<java.lang.AssertionError: void <init>()>();
throw v4;
label1:
v1.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: io.netty.util.HashedWheelTimer$HashedWheelBucket bucket> = v0;
v5 = v0.<io.netty.util.HashedWheelTimer$HashedWheelBucket: io.netty.util.HashedWheelTimer$HashedWheelTimeout head>;
if v5 != null goto label2;
v0.<io.netty.util.HashedWheelTimer$HashedWheelBucket: io.netty.util.HashedWheelTimer$HashedWheelTimeout tail> = v1;
v0.<io.netty.util.HashedWheelTimer$HashedWheelBucket: io.netty.util.HashedWheelTimer$HashedWheelTimeout head> = v1;
goto label3;
label2:
v6 = v0.<io.netty.util.HashedWheelTimer$HashedWheelBucket: io.netty.util.HashedWheelTimer$HashedWheelTimeout tail>;
v6.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: io.netty.util.HashedWheelTimer$HashedWheelTimeout next> = v1;
v7 = v0.<io.netty.util.HashedWheelTimer$HashedWheelBucket: io.netty.util.HashedWheelTimer$HashedWheelTimeout tail>;
v1.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: io.netty.util.HashedWheelTimer$HashedWheelTimeout prev> = v7;
v0.<io.netty.util.HashedWheelTimer$HashedWheelBucket: io.netty.util.HashedWheelTimer$HashedWheelTimeout tail> = v1;
label3:
return;
}
public void expireTimeouts(long)
{
java.lang.IllegalStateException v8;
java.lang.Object[] v9;
long v1, v10, v15, v16, v4, v6;
byte v5, v7;
java.lang.Long v11, v12;
java.lang.String v13;
boolean v14;
io.netty.util.HashedWheelTimer$HashedWheelTimeout v2, v3;
io.netty.util.HashedWheelTimer$HashedWheelBucket v0;
v0 := @this: io.netty.util.HashedWheelTimer$HashedWheelBucket;
v1 := @parameter0: long;
v2 = v0.<io.netty.util.HashedWheelTimer$HashedWheelBucket: io.netty.util.HashedWheelTimer$HashedWheelTimeout head>;
label1:
if v2 == null goto label6;
v3 = v2.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: io.netty.util.HashedWheelTimer$HashedWheelTimeout next>;
v4 = v2.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: long remainingRounds>;
v5 = v4 cmp 0L;
if v5 > 0 goto label3;
v3 = virtualinvoke v0.<io.netty.util.HashedWheelTimer$HashedWheelBucket: io.netty.util.HashedWheelTimer$HashedWheelTimeout remove(io.netty.util.HashedWheelTimer$HashedWheelTimeout)>(v2);
v6 = v2.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: long deadline>;
v7 = v6 cmp v1;
if v7 > 0 goto label2;
virtualinvoke v2.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: void expire()>();
goto label5;
label2:
v8 = new java.lang.IllegalStateException;
v9 = newarray (java.lang.Object)[2];
v10 = v2.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: long deadline>;
v11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v10);
v9[0] = v11;
v12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v1);
v9[1] = v12;
v13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("timeout.deadline (%d) > deadline (%d)", v9);
specialinvoke v8.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v13);
throw v8;
label3:
v14 = virtualinvoke v2.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: boolean isCancelled()>();
if v14 == 0 goto label4;
v3 = virtualinvoke v0.<io.netty.util.HashedWheelTimer$HashedWheelBucket: io.netty.util.HashedWheelTimer$HashedWheelTimeout remove(io.netty.util.HashedWheelTimer$HashedWheelTimeout)>(v2);
goto label5;
label4:
v15 = v2.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: long remainingRounds>;
v16 = v15 - 1L;
v2.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: long remainingRounds> = v16;
label5:
v2 = v3;
goto label1;
label6:
return;
}
public io.netty.util.HashedWheelTimer$HashedWheelTimeout remove(io.netty.util.HashedWheelTimer$HashedWheelTimeout)
{
io.netty.util.HashedWheelTimer$HashedWheelTimeout v1, v10, v11, v2, v3, v4, v5, v6, v7, v8, v9;
io.netty.util.HashedWheelTimer$HashedWheelBucket v0;
java.util.concurrent.atomic.AtomicLong v13;
io.netty.util.HashedWheelTimer v12;
v0 := @this: io.netty.util.HashedWheelTimer$HashedWheelBucket;
v1 := @parameter0: io.netty.util.HashedWheelTimer$HashedWheelTimeout;
v2 = v1.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: io.netty.util.HashedWheelTimer$HashedWheelTimeout next>;
v3 = v1.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: io.netty.util.HashedWheelTimer$HashedWheelTimeout prev>;
if v3 == null goto label1;
v4 = v1.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: io.netty.util.HashedWheelTimer$HashedWheelTimeout prev>;
v4.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: io.netty.util.HashedWheelTimer$HashedWheelTimeout next> = v2;
label1:
v5 = v1.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: io.netty.util.HashedWheelTimer$HashedWheelTimeout next>;
if v5 == null goto label2;
v6 = v1.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: io.netty.util.HashedWheelTimer$HashedWheelTimeout next>;
v7 = v1.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: io.netty.util.HashedWheelTimer$HashedWheelTimeout prev>;
v6.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: io.netty.util.HashedWheelTimer$HashedWheelTimeout prev> = v7;
label2:
v8 = v0.<io.netty.util.HashedWheelTimer$HashedWheelBucket: io.netty.util.HashedWheelTimer$HashedWheelTimeout head>;
if v1 != v8 goto label4;
v9 = v0.<io.netty.util.HashedWheelTimer$HashedWheelBucket: io.netty.util.HashedWheelTimer$HashedWheelTimeout tail>;
if v1 != v9 goto label3;
v0.<io.netty.util.HashedWheelTimer$HashedWheelBucket: io.netty.util.HashedWheelTimer$HashedWheelTimeout tail> = null;
v0.<io.netty.util.HashedWheelTimer$HashedWheelBucket: io.netty.util.HashedWheelTimer$HashedWheelTimeout head> = null;
goto label5;
label3:
v0.<io.netty.util.HashedWheelTimer$HashedWheelBucket: io.netty.util.HashedWheelTimer$HashedWheelTimeout head> = v2;
goto label5;
label4:
v10 = v0.<io.netty.util.HashedWheelTimer$HashedWheelBucket: io.netty.util.HashedWheelTimer$HashedWheelTimeout tail>;
if v1 != v10 goto label5;
v11 = v1.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: io.netty.util.HashedWheelTimer$HashedWheelTimeout prev>;
v0.<io.netty.util.HashedWheelTimer$HashedWheelBucket: io.netty.util.HashedWheelTimer$HashedWheelTimeout tail> = v11;
label5:
v1.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: io.netty.util.HashedWheelTimer$HashedWheelTimeout prev> = null;
v1.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: io.netty.util.HashedWheelTimer$HashedWheelTimeout next> = null;
v1.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: io.netty.util.HashedWheelTimer$HashedWheelBucket bucket> = null;
v12 = v1.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: io.netty.util.HashedWheelTimer timer>;
v13 = v12.<io.netty.util.HashedWheelTimer: java.util.concurrent.atomic.AtomicLong pendingTimeouts>;
virtualinvoke v13.<java.util.concurrent.atomic.AtomicLong: long decrementAndGet()>();
return v2;
}
public void clearTimeouts(java.util.Set)
{
java.util.Set v1;
io.netty.util.HashedWheelTimer$HashedWheelTimeout v2;
io.netty.util.HashedWheelTimer$HashedWheelBucket v0;
boolean v3, v4;
v0 := @this: io.netty.util.HashedWheelTimer$HashedWheelBucket;
v1 := @parameter0: java.util.Set;
label1:
v2 = specialinvoke v0.<io.netty.util.HashedWheelTimer$HashedWheelBucket: io.netty.util.HashedWheelTimer$HashedWheelTimeout pollTimeout()>();
if v2 != null goto label2;
return;
label2:
v3 = virtualinvoke v2.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: boolean isExpired()>();
if v3 != 0 goto label1;
v4 = virtualinvoke v2.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: boolean isCancelled()>();
if v4 != 0 goto label1;
interfaceinvoke v1.<java.util.Set: boolean add(java.lang.Object)>(v2);
goto label1;
}
private io.netty.util.HashedWheelTimer$HashedWheelTimeout pollTimeout()
{
io.netty.util.HashedWheelTimer$HashedWheelTimeout v1, v2;
io.netty.util.HashedWheelTimer$HashedWheelBucket v0;
v0 := @this: io.netty.util.HashedWheelTimer$HashedWheelBucket;
v1 = v0.<io.netty.util.HashedWheelTimer$HashedWheelBucket: io.netty.util.HashedWheelTimer$HashedWheelTimeout head>;
if v1 != null goto label1;
return null;
label1:
v2 = v1.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: io.netty.util.HashedWheelTimer$HashedWheelTimeout next>;
if v2 != null goto label2;
v0.<io.netty.util.HashedWheelTimer$HashedWheelBucket: io.netty.util.HashedWheelTimer$HashedWheelTimeout head> = null;
v0.<io.netty.util.HashedWheelTimer$HashedWheelBucket: io.netty.util.HashedWheelTimer$HashedWheelTimeout tail> = null;
goto label3;
label2:
v0.<io.netty.util.HashedWheelTimer$HashedWheelBucket: io.netty.util.HashedWheelTimer$HashedWheelTimeout head> = v2;
v2.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: io.netty.util.HashedWheelTimer$HashedWheelTimeout prev> = null;
label3:
v1.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: io.netty.util.HashedWheelTimer$HashedWheelTimeout next> = null;
v1.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: io.netty.util.HashedWheelTimer$HashedWheelTimeout prev> = null;
v1.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: io.netty.util.HashedWheelTimer$HashedWheelBucket bucket> = null;
return v1;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/util/HashedWheelTimer;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.util.HashedWheelTimer$HashedWheelBucket: boolean $assertionsDisabled> = v2;
return;
}
}