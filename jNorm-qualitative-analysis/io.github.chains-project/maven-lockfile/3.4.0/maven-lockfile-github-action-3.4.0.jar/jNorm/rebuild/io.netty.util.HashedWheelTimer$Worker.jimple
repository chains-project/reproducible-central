final class io.netty.util.HashedWheelTimer$Worker extends java.lang.Object implements java.lang.Runnable
{
private final java.util.Set unprocessedTimeouts;
private long tick;
final io.netty.util.HashedWheelTimer this$0;
private void <init>(io.netty.util.HashedWheelTimer)
{
io.netty.util.HashedWheelTimer v1;
java.util.HashSet v2;
io.netty.util.HashedWheelTimer$Worker v0;
v0 := @this: io.netty.util.HashedWheelTimer$Worker;
v1 := @parameter0: io.netty.util.HashedWheelTimer;
v0.<io.netty.util.HashedWheelTimer$Worker: io.netty.util.HashedWheelTimer this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.HashSet;
specialinvoke v2.<java.util.HashSet: void <init>()>();
v0.<io.netty.util.HashedWheelTimer$Worker: java.util.Set unprocessedTimeouts> = v2;
return;
}
public void run()
{
byte v10, v5;
boolean v32;
java.util.Set v28, v33;
io.netty.util.HashedWheelTimer$HashedWheelBucket v17, v27;
java.util.concurrent.CountDownLatch v8;
io.netty.util.HashedWheelTimer v1, v12, v15, v21, v23, v29, v3, v6, v7;
java.util.Queue v30;
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v20;
long v11, v14, v18, v19, v2, v4, v9;
io.netty.util.HashedWheelTimer$Worker v0;
int v13, v22, v25, v26;
io.netty.util.HashedWheelTimer$HashedWheelBucket[] v16, v24;
java.lang.Object v31;
v0 := @this: io.netty.util.HashedWheelTimer$Worker;
v1 = v0.<io.netty.util.HashedWheelTimer$Worker: io.netty.util.HashedWheelTimer this$0>;
v2 = staticinvoke <java.lang.System: long nanoTime()>();
v1.<io.netty.util.HashedWheelTimer: long startTime> = v2;
v3 = v0.<io.netty.util.HashedWheelTimer$Worker: io.netty.util.HashedWheelTimer this$0>;
v4 = v3.<io.netty.util.HashedWheelTimer: long startTime>;
v5 = v4 cmp 0L;
if v5 != 0 goto label1;
v6 = v0.<io.netty.util.HashedWheelTimer$Worker: io.netty.util.HashedWheelTimer this$0>;
v6.<io.netty.util.HashedWheelTimer: long startTime> = 1L;
label1:
v7 = v0.<io.netty.util.HashedWheelTimer$Worker: io.netty.util.HashedWheelTimer this$0>;
v8 = v7.<io.netty.util.HashedWheelTimer: java.util.concurrent.CountDownLatch startTimeInitialized>;
virtualinvoke v8.<java.util.concurrent.CountDownLatch: void countDown()>();
label2:
v9 = specialinvoke v0.<io.netty.util.HashedWheelTimer$Worker: long waitForNextTick()>();
v10 = v9 cmp 0L;
if v10 <= 0 goto label3;
v11 = v0.<io.netty.util.HashedWheelTimer$Worker: long tick>;
v12 = v0.<io.netty.util.HashedWheelTimer$Worker: io.netty.util.HashedWheelTimer this$0>;
v13 = v12.<io.netty.util.HashedWheelTimer: int mask>;
v14 = v11 & v13;
specialinvoke v0.<io.netty.util.HashedWheelTimer$Worker: void processCancelledTasks()>();
v15 = v0.<io.netty.util.HashedWheelTimer$Worker: io.netty.util.HashedWheelTimer this$0>;
v16 = v15.<io.netty.util.HashedWheelTimer: io.netty.util.HashedWheelTimer$HashedWheelBucket[] wheel>;
v17 = v16[v14];
specialinvoke v0.<io.netty.util.HashedWheelTimer$Worker: void transferTimeoutsToBuckets()>();
virtualinvoke v17.<io.netty.util.HashedWheelTimer$HashedWheelBucket: void expireTimeouts(long)>(v9);
v18 = v0.<io.netty.util.HashedWheelTimer$Worker: long tick>;
v19 = v18 + 1L;
v0.<io.netty.util.HashedWheelTimer$Worker: long tick> = v19;
label3:
v20 = <io.netty.util.HashedWheelTimer: java.util.concurrent.atomic.AtomicIntegerFieldUpdater WORKER_STATE_UPDATER>;
v21 = v0.<io.netty.util.HashedWheelTimer$Worker: io.netty.util.HashedWheelTimer this$0>;
v22 = virtualinvoke v20.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>(v21);
if v22 == 1 goto label2;
v23 = v0.<io.netty.util.HashedWheelTimer$Worker: io.netty.util.HashedWheelTimer this$0>;
v24 = v23.<io.netty.util.HashedWheelTimer: io.netty.util.HashedWheelTimer$HashedWheelBucket[] wheel>;
v25 = lengthof v24;
v26 = 0;
label4:
if v26 >= v25 goto label5;
v27 = v24[v26];
v28 = v0.<io.netty.util.HashedWheelTimer$Worker: java.util.Set unprocessedTimeouts>;
virtualinvoke v27.<io.netty.util.HashedWheelTimer$HashedWheelBucket: void clearTimeouts(java.util.Set)>(v28);
v26 = v26 + 1;
goto label4;
label5:
v29 = v0.<io.netty.util.HashedWheelTimer$Worker: io.netty.util.HashedWheelTimer this$0>;
v30 = v29.<io.netty.util.HashedWheelTimer: java.util.Queue timeouts>;
v31 = interfaceinvoke v30.<java.util.Queue: java.lang.Object poll()>();
if v31 == null goto label6;
v32 = virtualinvoke v31.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: boolean isCancelled()>();
if v32 != 0 goto label5;
v33 = v0.<io.netty.util.HashedWheelTimer$Worker: java.util.Set unprocessedTimeouts>;
interfaceinvoke v33.<java.util.Set: boolean add(java.lang.Object)>(v31);
goto label5;
label6:
specialinvoke v0.<io.netty.util.HashedWheelTimer$Worker: void processCancelledTasks()>();
return;
}
private void transferTimeoutsToBuckets()
{
long v10, v11, v15, v16, v17, v20, v6, v8, v9;
io.netty.util.HashedWheelTimer$Worker v0;
int v1, v14, v19, v5;
io.netty.util.HashedWheelTimer$HashedWheelBucket[] v13, v22;
io.netty.util.HashedWheelTimer$HashedWheelBucket v23;
io.netty.util.HashedWheelTimer v12, v18, v2, v21, v7;
java.lang.Object v4;
java.util.Queue v3;
v0 := @this: io.netty.util.HashedWheelTimer$Worker;
v1 = 0;
label1:
if v1 >= 100000 goto label3;
v2 = v0.<io.netty.util.HashedWheelTimer$Worker: io.netty.util.HashedWheelTimer this$0>;
v3 = v2.<io.netty.util.HashedWheelTimer: java.util.Queue timeouts>;
v4 = interfaceinvoke v3.<java.util.Queue: java.lang.Object poll()>();
if v4 == null goto label3;
v5 = virtualinvoke v4.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: int state()>();
if v5 == 1 goto label2;
v6 = v4.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: long deadline>;
v7 = v0.<io.netty.util.HashedWheelTimer$Worker: io.netty.util.HashedWheelTimer this$0>;
v8 = v7.<io.netty.util.HashedWheelTimer: long tickDuration>;
v9 = v6 / v8;
v10 = v0.<io.netty.util.HashedWheelTimer$Worker: long tick>;
v11 = v9 - v10;
v12 = v0.<io.netty.util.HashedWheelTimer$Worker: io.netty.util.HashedWheelTimer this$0>;
v13 = v12.<io.netty.util.HashedWheelTimer: io.netty.util.HashedWheelTimer$HashedWheelBucket[] wheel>;
v14 = lengthof v13;
v15 = v11 / v14;
v4.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: long remainingRounds> = v15;
v16 = v0.<io.netty.util.HashedWheelTimer$Worker: long tick>;
v17 = staticinvoke <java.lang.Math: long max(long,long)>(v9, v16);
v18 = v0.<io.netty.util.HashedWheelTimer$Worker: io.netty.util.HashedWheelTimer this$0>;
v19 = v18.<io.netty.util.HashedWheelTimer: int mask>;
v20 = v17 & v19;
v21 = v0.<io.netty.util.HashedWheelTimer$Worker: io.netty.util.HashedWheelTimer this$0>;
v22 = v21.<io.netty.util.HashedWheelTimer: io.netty.util.HashedWheelTimer$HashedWheelBucket[] wheel>;
v23 = v22[v20];
virtualinvoke v23.<io.netty.util.HashedWheelTimer$HashedWheelBucket: void addTimeout(io.netty.util.HashedWheelTimer$HashedWheelTimeout)>(v4);
label2:
v1 = v1 + 1;
goto label1;
label3:
return;
}
private void processCancelledTasks()
{
java.lang.Throwable v4;
io.netty.util.HashedWheelTimer$Worker v0;
io.netty.util.internal.logging.InternalLogger v5, v7;
io.netty.util.HashedWheelTimer v1;
java.lang.Object v3;
java.util.Queue v2;
boolean v6;
v0 := @this: io.netty.util.HashedWheelTimer$Worker;
label1:
v1 = v0.<io.netty.util.HashedWheelTimer$Worker: io.netty.util.HashedWheelTimer this$0>;
v2 = v1.<io.netty.util.HashedWheelTimer: java.util.Queue cancelledTimeouts>;
v3 = interfaceinvoke v2.<java.util.Queue: java.lang.Object poll()>();
if v3 == null goto label5;
label2:
virtualinvoke v3.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: void remove()>();
label3:
goto label1;
label4:
v4 := @caughtexception;
v5 = <io.netty.util.HashedWheelTimer: io.netty.util.internal.logging.InternalLogger logger>;
v6 = interfaceinvoke v5.<io.netty.util.internal.logging.InternalLogger: boolean isWarnEnabled()>();
if v6 == 0 goto label1;
v7 = <io.netty.util.HashedWheelTimer: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v7.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Throwable)>("An exception was thrown while process a cancellation task", v4);
goto label1;
label5:
return;
catch java.lang.Throwable from label2 to label3 with label4;
}
private long waitForNextTick()
{
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v19;
long v10, v11, v12, v16, v2, v3, v4, v5, v6, v8, v9;
io.netty.util.HashedWheelTimer$Worker v0;
byte v13, v14, v17;
int v21;
boolean v15;
java.lang.InterruptedException v18;
io.netty.util.HashedWheelTimer v1, v20, v7;
v0 := @this: io.netty.util.HashedWheelTimer$Worker;
v1 = v0.<io.netty.util.HashedWheelTimer$Worker: io.netty.util.HashedWheelTimer this$0>;
v2 = v1.<io.netty.util.HashedWheelTimer: long tickDuration>;
v3 = v0.<io.netty.util.HashedWheelTimer$Worker: long tick>;
v4 = v3 + 1L;
v5 = v2 * v4;
label1:
v6 = staticinvoke <java.lang.System: long nanoTime()>();
v7 = v0.<io.netty.util.HashedWheelTimer$Worker: io.netty.util.HashedWheelTimer this$0>;
v8 = v7.<io.netty.util.HashedWheelTimer: long startTime>;
v9 = v6 - v8;
v10 = v5 - v9;
v11 = v10 + 999999L;
v12 = v11 / 1000000L;
v13 = v12 cmp 0L;
if v13 > 0 goto label3;
v14 = v9 cmp -9223372036854775808L;
if v14 != 0 goto label2;
return -9223372036854775807L;
label2:
return v9;
label3:
v15 = staticinvoke <io.netty.util.internal.PlatformDependent: boolean isWindows()>();
if v15 == 0 goto label4;
v16 = v12 / 10L;
v12 = v16 * 10L;
v17 = v12 cmp 0L;
if v17 != 0 goto label4;
v12 = 1L;
label4:
staticinvoke <java.lang.Thread: void sleep(long)>(v12);
label5:
goto label1;
label6:
v18 := @caughtexception;
v19 = <io.netty.util.HashedWheelTimer: java.util.concurrent.atomic.AtomicIntegerFieldUpdater WORKER_STATE_UPDATER>;
v20 = v0.<io.netty.util.HashedWheelTimer$Worker: io.netty.util.HashedWheelTimer this$0>;
v21 = virtualinvoke v19.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>(v20);
if v21 != 2 goto label1;
return -9223372036854775808L;
catch java.lang.InterruptedException from label4 to label5 with label6;
}
public java.util.Set unprocessedTimeouts()
{
java.util.Set v1, v2;
io.netty.util.HashedWheelTimer$Worker v0;
v0 := @this: io.netty.util.HashedWheelTimer$Worker;
v1 = v0.<io.netty.util.HashedWheelTimer$Worker: java.util.Set unprocessedTimeouts>;
v2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(v1);
return v2;
}
}