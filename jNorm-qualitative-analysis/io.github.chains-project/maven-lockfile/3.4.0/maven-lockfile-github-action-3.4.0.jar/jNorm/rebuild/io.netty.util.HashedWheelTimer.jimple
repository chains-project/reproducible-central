public class io.netty.util.HashedWheelTimer extends java.lang.Object implements io.netty.util.Timer
{
static final io.netty.util.internal.logging.InternalLogger logger;
private static final java.util.concurrent.atomic.AtomicInteger INSTANCE_COUNTER;
private static final java.util.concurrent.atomic.AtomicBoolean WARNED_TOO_MANY_INSTANCES;
private static final int INSTANCE_COUNT_LIMIT;
private static final long MILLISECOND_NANOS;
private static final io.netty.util.ResourceLeakDetector leakDetector;
private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater WORKER_STATE_UPDATER;
private final io.netty.util.ResourceLeakTracker leak;
private final io.netty.util.HashedWheelTimer$Worker worker;
private final java.lang.Thread workerThread;
public static final int WORKER_STATE_INIT;
public static final int WORKER_STATE_STARTED;
public static final int WORKER_STATE_SHUTDOWN;
private volatile int workerState;
private final long tickDuration;
private final io.netty.util.HashedWheelTimer$HashedWheelBucket[] wheel;
private final int mask;
private final java.util.concurrent.CountDownLatch startTimeInitialized;
private final java.util.Queue timeouts;
private final java.util.Queue cancelledTimeouts;
private final java.util.concurrent.atomic.AtomicLong pendingTimeouts;
private final long maxPendingTimeouts;
private final java.util.concurrent.Executor taskExecutor;
private volatile long startTime;
static final boolean $assertionsDisabled;
public void <init>()
{
io.netty.util.HashedWheelTimer v0;
java.util.concurrent.ThreadFactory v1;
v0 := @this: io.netty.util.HashedWheelTimer;
v1 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();
specialinvoke v0.<io.netty.util.HashedWheelTimer: void <init>(java.util.concurrent.ThreadFactory)>(v1);
return;
}
public void <init>(long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v2;
io.netty.util.HashedWheelTimer v0;
long v1;
java.util.concurrent.ThreadFactory v3;
v0 := @this: io.netty.util.HashedWheelTimer;
v1 := @parameter0: long;
v2 := @parameter1: java.util.concurrent.TimeUnit;
v3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();
specialinvoke v0.<io.netty.util.HashedWheelTimer: void <init>(java.util.concurrent.ThreadFactory,long,java.util.concurrent.TimeUnit)>(v3, v1, v2);
return;
}
public void <init>(long, java.util.concurrent.TimeUnit, int)
{
java.util.concurrent.TimeUnit v2;
int v3;
io.netty.util.HashedWheelTimer v0;
long v1;
java.util.concurrent.ThreadFactory v4;
v0 := @this: io.netty.util.HashedWheelTimer;
v1 := @parameter0: long;
v2 := @parameter1: java.util.concurrent.TimeUnit;
v3 := @parameter2: int;
v4 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();
specialinvoke v0.<io.netty.util.HashedWheelTimer: void <init>(java.util.concurrent.ThreadFactory,long,java.util.concurrent.TimeUnit,int)>(v4, v1, v2, v3);
return;
}
public void <init>(java.util.concurrent.ThreadFactory)
{
io.netty.util.HashedWheelTimer v0;
java.util.concurrent.TimeUnit v2;
java.util.concurrent.ThreadFactory v1;
v0 := @this: io.netty.util.HashedWheelTimer;
v1 := @parameter0: java.util.concurrent.ThreadFactory;
v2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
specialinvoke v0.<io.netty.util.HashedWheelTimer: void <init>(java.util.concurrent.ThreadFactory,long,java.util.concurrent.TimeUnit)>(v1, 100L, v2);
return;
}
public void <init>(java.util.concurrent.ThreadFactory, long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v3;
io.netty.util.HashedWheelTimer v0;
long v2;
java.util.concurrent.ThreadFactory v1;
v0 := @this: io.netty.util.HashedWheelTimer;
v1 := @parameter0: java.util.concurrent.ThreadFactory;
v2 := @parameter1: long;
v3 := @parameter2: java.util.concurrent.TimeUnit;
specialinvoke v0.<io.netty.util.HashedWheelTimer: void <init>(java.util.concurrent.ThreadFactory,long,java.util.concurrent.TimeUnit,int)>(v1, v2, v3, 512);
return;
}
public void <init>(java.util.concurrent.ThreadFactory, long, java.util.concurrent.TimeUnit, int)
{
java.util.concurrent.TimeUnit v3;
int v4;
io.netty.util.HashedWheelTimer v0;
long v2;
java.util.concurrent.ThreadFactory v1;
v0 := @this: io.netty.util.HashedWheelTimer;
v1 := @parameter0: java.util.concurrent.ThreadFactory;
v2 := @parameter1: long;
v3 := @parameter2: java.util.concurrent.TimeUnit;
v4 := @parameter3: int;
specialinvoke v0.<io.netty.util.HashedWheelTimer: void <init>(java.util.concurrent.ThreadFactory,long,java.util.concurrent.TimeUnit,int,boolean)>(v1, v2, v3, v4, 1);
return;
}
public void <init>(java.util.concurrent.ThreadFactory, long, java.util.concurrent.TimeUnit, int, boolean)
{
java.util.concurrent.TimeUnit v3;
int v4;
io.netty.util.HashedWheelTimer v0;
long v2;
java.util.concurrent.ThreadFactory v1;
boolean v5;
v0 := @this: io.netty.util.HashedWheelTimer;
v1 := @parameter0: java.util.concurrent.ThreadFactory;
v2 := @parameter1: long;
v3 := @parameter2: java.util.concurrent.TimeUnit;
v4 := @parameter3: int;
v5 := @parameter4: boolean;
specialinvoke v0.<io.netty.util.HashedWheelTimer: void <init>(java.util.concurrent.ThreadFactory,long,java.util.concurrent.TimeUnit,int,boolean,long)>(v1, v2, v3, v4, v5, -1L);
return;
}
public void <init>(java.util.concurrent.ThreadFactory, long, java.util.concurrent.TimeUnit, int, boolean, long)
{
long v2, v6;
java.util.concurrent.TimeUnit v3;
int v4;
io.netty.util.HashedWheelTimer v0;
java.util.concurrent.ThreadFactory v1;
io.netty.util.concurrent.ImmediateExecutor v7;
boolean v5;
v0 := @this: io.netty.util.HashedWheelTimer;
v1 := @parameter0: java.util.concurrent.ThreadFactory;
v2 := @parameter1: long;
v3 := @parameter2: java.util.concurrent.TimeUnit;
v4 := @parameter3: int;
v5 := @parameter4: boolean;
v6 := @parameter5: long;
v7 = <io.netty.util.concurrent.ImmediateExecutor: io.netty.util.concurrent.ImmediateExecutor INSTANCE>;
specialinvoke v0.<io.netty.util.HashedWheelTimer: void <init>(java.util.concurrent.ThreadFactory,long,java.util.concurrent.TimeUnit,int,boolean,long,java.util.concurrent.Executor)>(v1, v2, v3, v4, v5, v6, v7);
return;
}
public void <init>(java.util.concurrent.ThreadFactory, long, java.util.concurrent.TimeUnit, int, boolean, long, java.util.concurrent.Executor)
{
byte v22, v32;
java.lang.Long v25, v29, v34, v36;
java.util.concurrent.atomic.AtomicInteger v44;
java.lang.Thread v39, v40;
java.util.concurrent.ThreadFactory v1;
boolean v41, v47, v5;
io.netty.util.ResourceLeakDetector v42;
java.util.concurrent.CountDownLatch v9;
io.netty.util.internal.logging.InternalLogger v33;
io.netty.util.HashedWheelTimer v0;
java.util.Queue v10, v11;
java.lang.Object[] v24;
java.util.concurrent.atomic.AtomicBoolean v46;
long v18, v2, v21, v28, v31, v35, v37, v6;
io.netty.util.HashedWheelTimer$Worker v38, v8;
int v16, v17, v20, v27, v4, v45;
io.netty.util.HashedWheelTimer$HashedWheelBucket[] v14, v15, v19, v26;
java.lang.String v30;
io.netty.util.ResourceLeakTracker v43;
java.util.concurrent.Executor v7;
java.lang.IllegalArgumentException v23;
java.util.concurrent.TimeUnit v3;
java.util.concurrent.atomic.AtomicLong v12;
java.lang.Object v13;
v0 := @this: io.netty.util.HashedWheelTimer;
v1 := @parameter0: java.util.concurrent.ThreadFactory;
v2 := @parameter1: long;
v3 := @parameter2: java.util.concurrent.TimeUnit;
v4 := @parameter3: int;
v5 := @parameter4: boolean;
v6 := @parameter5: long;
v7 := @parameter6: java.util.concurrent.Executor;
specialinvoke v0.<java.lang.Object: void <init>()>();
v8 = new io.netty.util.HashedWheelTimer$Worker;
specialinvoke v8.<io.netty.util.HashedWheelTimer$Worker: void <init>(io.netty.util.HashedWheelTimer)>(v0);
v0.<io.netty.util.HashedWheelTimer: io.netty.util.HashedWheelTimer$Worker worker> = v8;
v9 = new java.util.concurrent.CountDownLatch;
specialinvoke v9.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);
v0.<io.netty.util.HashedWheelTimer: java.util.concurrent.CountDownLatch startTimeInitialized> = v9;
v10 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.Queue newMpscQueue()>();
v0.<io.netty.util.HashedWheelTimer: java.util.Queue timeouts> = v10;
v11 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.Queue newMpscQueue()>();
v0.<io.netty.util.HashedWheelTimer: java.util.Queue cancelledTimeouts> = v11;
v12 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v12.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);
v0.<io.netty.util.HashedWheelTimer: java.util.concurrent.atomic.AtomicLong pendingTimeouts> = v12;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "threadFactory");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v3, "unit");
staticinvoke <io.netty.util.internal.ObjectUtil: long checkPositive(long,java.lang.String)>(v2, "tickDuration");
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositive(int,java.lang.String)>(v4, "ticksPerWheel");
v13 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v7, "taskExecutor");
v0.<io.netty.util.HashedWheelTimer: java.util.concurrent.Executor taskExecutor> = v13;
v14 = staticinvoke <io.netty.util.HashedWheelTimer: io.netty.util.HashedWheelTimer$HashedWheelBucket[] createWheel(int)>(v4);
v0.<io.netty.util.HashedWheelTimer: io.netty.util.HashedWheelTimer$HashedWheelBucket[] wheel> = v14;
v15 = v0.<io.netty.util.HashedWheelTimer: io.netty.util.HashedWheelTimer$HashedWheelBucket[] wheel>;
v16 = lengthof v15;
v17 = v16 - 1;
v0.<io.netty.util.HashedWheelTimer: int mask> = v17;
v18 = virtualinvoke v3.<java.util.concurrent.TimeUnit: long toNanos(long)>(v2);
v19 = v0.<io.netty.util.HashedWheelTimer: io.netty.util.HashedWheelTimer$HashedWheelBucket[] wheel>;
v20 = lengthof v19;
v21 = 9223372036854775807L / v20;
v22 = v18 cmp v21;
if v22 < 0 goto label1;
v23 = new java.lang.IllegalArgumentException;
v24 = newarray (java.lang.Object)[2];
v25 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v2);
v24[0] = v25;
v26 = v0.<io.netty.util.HashedWheelTimer: io.netty.util.HashedWheelTimer$HashedWheelBucket[] wheel>;
v27 = lengthof v26;
v28 = 9223372036854775807L / v27;
v29 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v28);
v24[1] = v29;
v30 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("tickDuration: %d (expected: 0 < tickDuration in nanos < %d", v24);
specialinvoke v23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v30);
throw v23;
label1:
v31 = <io.netty.util.HashedWheelTimer: long MILLISECOND_NANOS>;
v32 = v18 cmp v31;
if v32 >= 0 goto label2;
v33 = <io.netty.util.HashedWheelTimer: io.netty.util.internal.logging.InternalLogger logger>;
v34 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v2);
v35 = <io.netty.util.HashedWheelTimer: long MILLISECOND_NANOS>;
v36 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v35);
interfaceinvoke v33.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Configured tickDuration {} smaller than {}, using 1ms.", v34, v36);
v37 = <io.netty.util.HashedWheelTimer: long MILLISECOND_NANOS>;
v0.<io.netty.util.HashedWheelTimer: long tickDuration> = v37;
goto label3;
label2:
v0.<io.netty.util.HashedWheelTimer: long tickDuration> = v18;
label3:
v38 = v0.<io.netty.util.HashedWheelTimer: io.netty.util.HashedWheelTimer$Worker worker>;
v39 = interfaceinvoke v1.<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>(v38);
v0.<io.netty.util.HashedWheelTimer: java.lang.Thread workerThread> = v39;
if v5 != 0 goto label4;
v40 = v0.<io.netty.util.HashedWheelTimer: java.lang.Thread workerThread>;
v41 = virtualinvoke v40.<java.lang.Thread: boolean isDaemon()>();
if v41 != 0 goto label5;
label4:
v42 = <io.netty.util.HashedWheelTimer: io.netty.util.ResourceLeakDetector leakDetector>;
v43 = virtualinvoke v42.<io.netty.util.ResourceLeakDetector: io.netty.util.ResourceLeakTracker track(java.lang.Object)>(v0);
goto label6;
label5:
v43 = null;
label6:
v0.<io.netty.util.HashedWheelTimer: io.netty.util.ResourceLeakTracker leak> = v43;
v0.<io.netty.util.HashedWheelTimer: long maxPendingTimeouts> = v6;
v44 = <io.netty.util.HashedWheelTimer: java.util.concurrent.atomic.AtomicInteger INSTANCE_COUNTER>;
v45 = virtualinvoke v44.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();
if v45 <= 64 goto label7;
v46 = <io.netty.util.HashedWheelTimer: java.util.concurrent.atomic.AtomicBoolean WARNED_TOO_MANY_INSTANCES>;
v47 = virtualinvoke v46.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);
if v47 == 0 goto label7;
staticinvoke <io.netty.util.HashedWheelTimer: void reportTooManyInstances()>();
label7:
return;
}
protected void finalize() throws java.lang.Throwable
{
java.lang.Throwable v4;
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v1, v5;
java.util.concurrent.atomic.AtomicInteger v3, v7;
int v2, v6;
io.netty.util.HashedWheelTimer v0;
v0 := @this: io.netty.util.HashedWheelTimer;
label1:
specialinvoke v0.<java.lang.Object: void finalize()>();
label2:
v1 = <io.netty.util.HashedWheelTimer: java.util.concurrent.atomic.AtomicIntegerFieldUpdater WORKER_STATE_UPDATER>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndSet(java.lang.Object,int)>(v0, 2);
if v2 == 2 goto label5;
v3 = <io.netty.util.HashedWheelTimer: java.util.concurrent.atomic.AtomicInteger INSTANCE_COUNTER>;
virtualinvoke v3.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();
goto label5;
label3:
v4 := @caughtexception;
v5 = <io.netty.util.HashedWheelTimer: java.util.concurrent.atomic.AtomicIntegerFieldUpdater WORKER_STATE_UPDATER>;
v6 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndSet(java.lang.Object,int)>(v0, 2);
if v6 == 2 goto label4;
v7 = <io.netty.util.HashedWheelTimer: java.util.concurrent.atomic.AtomicInteger INSTANCE_COUNTER>;
virtualinvoke v7.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();
label4:
throw v4;
label5:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
private static io.netty.util.HashedWheelTimer$HashedWheelBucket[] createWheel(int)
{
int v0, v1, v3, v4;
io.netty.util.HashedWheelTimer$HashedWheelBucket[] v2;
io.netty.util.HashedWheelTimer$HashedWheelBucket v5;
v0 := @parameter0: int;
staticinvoke <io.netty.util.internal.ObjectUtil: int checkInRange(int,int,int,java.lang.String)>(v0, 1, 1073741824, "ticksPerWheel");
v1 = staticinvoke <io.netty.util.HashedWheelTimer: int normalizeTicksPerWheel(int)>(v0);
v2 = newarray (io.netty.util.HashedWheelTimer$HashedWheelBucket)[v1];
v3 = 0;
label1:
v4 = lengthof v2;
if v3 >= v4 goto label2;
v5 = new io.netty.util.HashedWheelTimer$HashedWheelBucket;
specialinvoke v5.<io.netty.util.HashedWheelTimer$HashedWheelBucket: void <init>()>();
v2[v3] = v5;
v3 = v3 + 1;
goto label1;
label2:
return v2;
}
private static int normalizeTicksPerWheel(int)
{
int v0, v1;
v0 := @parameter0: int;
v1 = 1;
label1:
if v1 >= v0 goto label2;
v1 = v1 << 1;
goto label1;
label2:
return v1;
}
public void start()
{
java.lang.IllegalStateException v6;
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v1, v3;
java.lang.Error v7;
long v8;
java.util.concurrent.CountDownLatch v10;
byte v9;
java.lang.InterruptedException v11;
java.lang.Thread v5;
int v2;
io.netty.util.HashedWheelTimer v0;
boolean v4;
v0 := @this: io.netty.util.HashedWheelTimer;
v1 = <io.netty.util.HashedWheelTimer: java.util.concurrent.atomic.AtomicIntegerFieldUpdater WORKER_STATE_UPDATER>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>(v0);
tableswitch(v2)
{
case 0: goto label1;
case 1: goto label4;
case 2: goto label2;
default: goto label3;
};
label1:
v3 = <io.netty.util.HashedWheelTimer: java.util.concurrent.atomic.AtomicIntegerFieldUpdater WORKER_STATE_UPDATER>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(v0, 0, 1);
if v4 == 0 goto label4;
v5 = v0.<io.netty.util.HashedWheelTimer: java.lang.Thread workerThread>;
virtualinvoke v5.<java.lang.Thread: void start()>();
goto label4;
label2:
v6 = new java.lang.IllegalStateException;
specialinvoke v6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cannot be started once stopped");
throw v6;
label3:
v7 = new java.lang.Error;
specialinvoke v7.<java.lang.Error: void <init>(java.lang.String)>("Invalid WorkerState");
throw v7;
label4:
v8 = v0.<io.netty.util.HashedWheelTimer: long startTime>;
v9 = v8 cmp 0L;
if v9 != 0 goto label8;
label5:
v10 = v0.<io.netty.util.HashedWheelTimer: java.util.concurrent.CountDownLatch startTimeInitialized>;
virtualinvoke v10.<java.util.concurrent.CountDownLatch: void await()>();
label6:
goto label4;
label7:
v11 := @caughtexception;
goto label4;
label8:
return;
catch java.lang.InterruptedException from label5 to label6 with label7;
}
public java.util.Set stop()
{
java.lang.IllegalStateException v3;
java.util.concurrent.atomic.AtomicInteger v13, v27, v34;
java.lang.Thread v1, v2, v21, v23, v24, v26;
boolean v10, v16, v17, v20, v22, v30, v31, v37, v38;
java.util.Set v19, v41;
io.netty.util.HashedWheelTimer v0;
java.lang.Throwable v33;
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v11, v9;
java.lang.AssertionError v18, v32, v39;
io.netty.util.HashedWheelTimer$Worker v40;
int v12;
java.lang.String v5, v7, v8;
io.netty.util.ResourceLeakTracker v14, v15, v28, v29, v35, v36;
java.lang.InterruptedException v25;
java.lang.Class v4, v6;
v0 := @this: io.netty.util.HashedWheelTimer;
v1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v2 = v0.<io.netty.util.HashedWheelTimer: java.lang.Thread workerThread>;
if v1 != v2 goto label01;
v3 = new java.lang.IllegalStateException;
v4 = class "Lio/netty/util/HashedWheelTimer;";
v5 = virtualinvoke v4.<java.lang.Class: java.lang.String getSimpleName()>();
v6 = class "Lio/netty/util/TimerTask;";
v7 = virtualinvoke v6.<java.lang.Class: java.lang.String getSimpleName()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v5, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.stop() cannot be called from \u0001");
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v8);
throw v3;
label01:
v9 = <io.netty.util.HashedWheelTimer: java.util.concurrent.atomic.AtomicIntegerFieldUpdater WORKER_STATE_UPDATER>;
v10 = virtualinvoke v9.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(v0, 1, 2);
if v10 != 0 goto label03;
v11 = <io.netty.util.HashedWheelTimer: java.util.concurrent.atomic.AtomicIntegerFieldUpdater WORKER_STATE_UPDATER>;
v12 = virtualinvoke v11.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndSet(java.lang.Object,int)>(v0, 2);
if v12 == 2 goto label02;
v13 = <io.netty.util.HashedWheelTimer: java.util.concurrent.atomic.AtomicInteger INSTANCE_COUNTER>;
virtualinvoke v13.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();
v14 = v0.<io.netty.util.HashedWheelTimer: io.netty.util.ResourceLeakTracker leak>;
if v14 == null goto label02;
v15 = v0.<io.netty.util.HashedWheelTimer: io.netty.util.ResourceLeakTracker leak>;
v16 = interfaceinvoke v15.<io.netty.util.ResourceLeakTracker: boolean close(java.lang.Object)>(v0);
v17 = <io.netty.util.HashedWheelTimer: boolean $assertionsDisabled>;
if v17 != 0 goto label02;
if v16 != 0 goto label02;
v18 = new java.lang.AssertionError;
specialinvoke v18.<java.lang.AssertionError: void <init>()>();
throw v18;
label02:
v19 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
return v19;
label03:
v20 = 0;
label04:
v21 = v0.<io.netty.util.HashedWheelTimer: java.lang.Thread workerThread>;
v22 = virtualinvoke v21.<java.lang.Thread: boolean isAlive()>();
if v22 == 0 goto label08;
v23 = v0.<io.netty.util.HashedWheelTimer: java.lang.Thread workerThread>;
virtualinvoke v23.<java.lang.Thread: void interrupt()>();
label05:
v24 = v0.<io.netty.util.HashedWheelTimer: java.lang.Thread workerThread>;
virtualinvoke v24.<java.lang.Thread: void join(long)>(100L);
label06:
goto label04;
label07:
v25 := @caughtexception;
v20 = 1;
goto label04;
label08:
if v20 == 0 goto label09;
v26 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
virtualinvoke v26.<java.lang.Thread: void interrupt()>();
label09:
v27 = <io.netty.util.HashedWheelTimer: java.util.concurrent.atomic.AtomicInteger INSTANCE_COUNTER>;
virtualinvoke v27.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();
v28 = v0.<io.netty.util.HashedWheelTimer: io.netty.util.ResourceLeakTracker leak>;
if v28 == null goto label12;
v29 = v0.<io.netty.util.HashedWheelTimer: io.netty.util.ResourceLeakTracker leak>;
v30 = interfaceinvoke v29.<io.netty.util.ResourceLeakTracker: boolean close(java.lang.Object)>(v0);
v31 = <io.netty.util.HashedWheelTimer: boolean $assertionsDisabled>;
if v31 != 0 goto label12;
if v30 != 0 goto label12;
v32 = new java.lang.AssertionError;
specialinvoke v32.<java.lang.AssertionError: void <init>()>();
throw v32;
label10:
v33 := @caughtexception;
v34 = <io.netty.util.HashedWheelTimer: java.util.concurrent.atomic.AtomicInteger INSTANCE_COUNTER>;
virtualinvoke v34.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();
v35 = v0.<io.netty.util.HashedWheelTimer: io.netty.util.ResourceLeakTracker leak>;
if v35 == null goto label11;
v36 = v0.<io.netty.util.HashedWheelTimer: io.netty.util.ResourceLeakTracker leak>;
v37 = interfaceinvoke v36.<io.netty.util.ResourceLeakTracker: boolean close(java.lang.Object)>(v0);
v38 = <io.netty.util.HashedWheelTimer: boolean $assertionsDisabled>;
if v38 != 0 goto label11;
if v37 != 0 goto label11;
v39 = new java.lang.AssertionError;
specialinvoke v39.<java.lang.AssertionError: void <init>()>();
throw v39;
label11:
throw v33;
label12:
v40 = v0.<io.netty.util.HashedWheelTimer: io.netty.util.HashedWheelTimer$Worker worker>;
v41 = virtualinvoke v40.<io.netty.util.HashedWheelTimer$Worker: java.util.Set unprocessedTimeouts()>();
return v41;
catch java.lang.InterruptedException from label05 to label06 with label07;
catch java.lang.Throwable from label03 to label09 with label10;
}
public io.netty.util.Timeout newTimeout(io.netty.util.TimerTask, long, java.util.concurrent.TimeUnit)
{
long v12, v14, v15, v16, v17, v18, v2, v5, v6, v8;
java.util.concurrent.RejectedExecutionException v11;
byte v19, v20, v7, v9;
io.netty.util.TimerTask v1;
java.lang.String v13;
io.netty.util.HashedWheelTimer$HashedWheelTimeout v21;
java.util.concurrent.TimeUnit v3;
java.util.concurrent.atomic.AtomicLong v10, v4;
io.netty.util.HashedWheelTimer v0;
java.util.Queue v22;
v0 := @this: io.netty.util.HashedWheelTimer;
v1 := @parameter0: io.netty.util.TimerTask;
v2 := @parameter1: long;
v3 := @parameter2: java.util.concurrent.TimeUnit;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "task");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v3, "unit");
v4 = v0.<io.netty.util.HashedWheelTimer: java.util.concurrent.atomic.AtomicLong pendingTimeouts>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();
v6 = v0.<io.netty.util.HashedWheelTimer: long maxPendingTimeouts>;
v7 = v6 cmp 0L;
if v7 <= 0 goto label1;
v8 = v0.<io.netty.util.HashedWheelTimer: long maxPendingTimeouts>;
v9 = v5 cmp v8;
if v9 <= 0 goto label1;
v10 = v0.<io.netty.util.HashedWheelTimer: java.util.concurrent.atomic.AtomicLong pendingTimeouts>;
virtualinvoke v10.<java.util.concurrent.atomic.AtomicLong: long decrementAndGet()>();
v11 = new java.util.concurrent.RejectedExecutionException;
v12 = v0.<io.netty.util.HashedWheelTimer: long maxPendingTimeouts>;
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long,long)>(v5, v12) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Number of pending timeouts (\u0001) is greater than or equal to maximum allowed pending timeouts (\u0001)");
specialinvoke v11.<java.util.concurrent.RejectedExecutionException: void <init>(java.lang.String)>(v13);
throw v11;
label1:
virtualinvoke v0.<io.netty.util.HashedWheelTimer: void start()>();
v14 = staticinvoke <java.lang.System: long nanoTime()>();
v15 = virtualinvoke v3.<java.util.concurrent.TimeUnit: long toNanos(long)>(v2);
v16 = v14 + v15;
v17 = v0.<io.netty.util.HashedWheelTimer: long startTime>;
v18 = v16 - v17;
v19 = v2 cmp 0L;
if v19 <= 0 goto label2;
v20 = v18 cmp 0L;
if v20 >= 0 goto label2;
v18 = 9223372036854775807L;
label2:
v21 = new io.netty.util.HashedWheelTimer$HashedWheelTimeout;
specialinvoke v21.<io.netty.util.HashedWheelTimer$HashedWheelTimeout: void <init>(io.netty.util.HashedWheelTimer,io.netty.util.TimerTask,long)>(v0, v1, v18);
v22 = v0.<io.netty.util.HashedWheelTimer: java.util.Queue timeouts>;
interfaceinvoke v22.<java.util.Queue: boolean add(java.lang.Object)>(v21);
return v21;
}
public long pendingTimeouts()
{
io.netty.util.HashedWheelTimer v0;
java.util.concurrent.atomic.AtomicLong v1;
long v2;
v0 := @this: io.netty.util.HashedWheelTimer;
v1 = v0.<io.netty.util.HashedWheelTimer: java.util.concurrent.atomic.AtomicLong pendingTimeouts>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: long get()>();
return v2;
}
private static void reportTooManyInstances()
{
io.netty.util.internal.logging.InternalLogger v0, v3;
java.lang.String v2, v4;
boolean v1;
v0 = <io.netty.util.HashedWheelTimer: io.netty.util.internal.logging.InternalLogger logger>;
v1 = interfaceinvoke v0.<io.netty.util.internal.logging.InternalLogger: boolean isErrorEnabled()>();
if v1 == 0 goto label1;
v2 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String simpleClassName(java.lang.Class)>(class "Lio/netty/util/HashedWheelTimer;");
v3 = <io.netty.util.HashedWheelTimer: io.netty.util.internal.logging.InternalLogger logger>;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v2, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("You are creating too many \u0001 instances. \u0001 is a shared resource that must be reused across the JVM, so that only a few instances are created.");
interfaceinvoke v3.<io.netty.util.internal.logging.InternalLogger: void error(java.lang.String)>(v4);
label1:
return;
}
static void <clinit>()
{
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v10;
java.util.concurrent.atomic.AtomicBoolean v5;
long v7;
io.netty.util.ResourceLeakDetector v9;
java.util.concurrent.TimeUnit v6;
java.util.concurrent.atomic.AtomicInteger v4;
io.netty.util.internal.logging.InternalLogger v3;
io.netty.util.ResourceLeakDetectorFactory v8;
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/util/HashedWheelTimer;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.util.HashedWheelTimer: boolean $assertionsDisabled> = v2;
v3 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/util/HashedWheelTimer;");
<io.netty.util.HashedWheelTimer: io.netty.util.internal.logging.InternalLogger logger> = v3;
v4 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v4.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
<io.netty.util.HashedWheelTimer: java.util.concurrent.atomic.AtomicInteger INSTANCE_COUNTER> = v4;
v5 = new java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v5.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();
<io.netty.util.HashedWheelTimer: java.util.concurrent.atomic.AtomicBoolean WARNED_TOO_MANY_INSTANCES> = v5;
v6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
v7 = virtualinvoke v6.<java.util.concurrent.TimeUnit: long toNanos(long)>(1L);
<io.netty.util.HashedWheelTimer: long MILLISECOND_NANOS> = v7;
v8 = staticinvoke <io.netty.util.ResourceLeakDetectorFactory: io.netty.util.ResourceLeakDetectorFactory instance()>();
v9 = virtualinvoke v8.<io.netty.util.ResourceLeakDetectorFactory: io.netty.util.ResourceLeakDetector newResourceLeakDetector(java.lang.Class,int)>(class "Lio/netty/util/HashedWheelTimer;", 1);
<io.netty.util.HashedWheelTimer: io.netty.util.ResourceLeakDetector leakDetector> = v9;
v10 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lio/netty/util/HashedWheelTimer;", "workerState");
<io.netty.util.HashedWheelTimer: java.util.concurrent.atomic.AtomicIntegerFieldUpdater WORKER_STATE_UPDATER> = v10;
return;
}
}