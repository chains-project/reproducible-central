final class io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory extends io.netty.util.ResourceLeakDetectorFactory
{
private final java.lang.reflect.Constructor obsoleteCustomClassConstructor;
private final java.lang.reflect.Constructor customClassConstructor;
void <init>()
{
java.lang.Throwable v2;
io.netty.util.internal.logging.InternalLogger v3;
java.lang.String v1;
io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory v0;
java.lang.reflect.Constructor v4, v5;
v0 := @this: io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory;
specialinvoke v0.<io.netty.util.ResourceLeakDetectorFactory: void <init>()>();
label1:
v1 = staticinvoke <io.netty.util.internal.SystemPropertyUtil: java.lang.String get(java.lang.String)>("io.netty.customResourceLeakDetector");
label2:
goto label4;
label3:
v2 := @caughtexception;
v3 = <io.netty.util.ResourceLeakDetectorFactory: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v3.<io.netty.util.internal.logging.InternalLogger: void error(java.lang.String,java.lang.Throwable)>("Could not access System property: io.netty.customResourceLeakDetector", v2);
v1 = null;
label4:
if v1 != null goto label5;
v0.<io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory: java.lang.reflect.Constructor customClassConstructor> = null;
v0.<io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory: java.lang.reflect.Constructor obsoleteCustomClassConstructor> = null;
goto label6;
label5:
v4 = staticinvoke <io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory: java.lang.reflect.Constructor obsoleteCustomClassConstructor(java.lang.String)>(v1);
v0.<io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory: java.lang.reflect.Constructor obsoleteCustomClassConstructor> = v4;
v5 = staticinvoke <io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory: java.lang.reflect.Constructor customClassConstructor(java.lang.String)>(v1);
v0.<io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory: java.lang.reflect.Constructor customClassConstructor> = v5;
label6:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
private static java.lang.reflect.Constructor obsoleteCustomClassConstructor(java.lang.String)
{
java.lang.Throwable v10;
java.lang.Class[] v5;
java.lang.reflect.Constructor v8;
io.netty.util.internal.logging.InternalLogger v11, v9;
java.lang.Class v2, v3, v6, v7;
java.lang.ClassLoader v1;
java.lang.String v0;
boolean v4;
v0 := @parameter0: java.lang.String;
label1:
v1 = staticinvoke <io.netty.util.internal.PlatformDependent: java.lang.ClassLoader getSystemClassLoader()>();
v2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(v0, 1, v1);
v3 = class "Lio/netty/util/ResourceLeakDetector;";
v4 = virtualinvoke v3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v2);
if v4 == 0 goto label3;
v5 = newarray (java.lang.Class)[3];
v5[0] = class "Ljava/lang/Class;";
v6 = <java.lang.Integer: java.lang.Class TYPE>;
v5[1] = v6;
v7 = <java.lang.Long: java.lang.Class TYPE>;
v5[2] = v7;
v8 = virtualinvoke v2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(v5);
label2:
return v8;
label3:
v9 = <io.netty.util.ResourceLeakDetectorFactory: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v9.<io.netty.util.internal.logging.InternalLogger: void error(java.lang.String,java.lang.Object)>("Class {} does not inherit from ResourceLeakDetector.", v0);
label4:
goto label6;
label5:
v10 := @caughtexception;
v11 = <io.netty.util.ResourceLeakDetectorFactory: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v11.<io.netty.util.internal.logging.InternalLogger: void error(java.lang.String,java.lang.Object,java.lang.Object)>("Could not load custom resource leak detector class provided: {}", v0, v10);
label6:
return null;
catch java.lang.Throwable from label1 to label2 with label5;
catch java.lang.Throwable from label3 to label4 with label5;
}
private static java.lang.reflect.Constructor customClassConstructor(java.lang.String)
{
java.lang.Throwable v9;
java.lang.Class[] v5;
java.lang.reflect.Constructor v7;
io.netty.util.internal.logging.InternalLogger v10, v8;
java.lang.Class v2, v3, v6;
java.lang.ClassLoader v1;
java.lang.String v0;
boolean v4;
v0 := @parameter0: java.lang.String;
label1:
v1 = staticinvoke <io.netty.util.internal.PlatformDependent: java.lang.ClassLoader getSystemClassLoader()>();
v2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(v0, 1, v1);
v3 = class "Lio/netty/util/ResourceLeakDetector;";
v4 = virtualinvoke v3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v2);
if v4 == 0 goto label3;
v5 = newarray (java.lang.Class)[2];
v5[0] = class "Ljava/lang/Class;";
v6 = <java.lang.Integer: java.lang.Class TYPE>;
v5[1] = v6;
v7 = virtualinvoke v2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(v5);
label2:
return v7;
label3:
v8 = <io.netty.util.ResourceLeakDetectorFactory: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v8.<io.netty.util.internal.logging.InternalLogger: void error(java.lang.String,java.lang.Object)>("Class {} does not inherit from ResourceLeakDetector.", v0);
label4:
goto label6;
label5:
v9 := @caughtexception;
v10 = <io.netty.util.ResourceLeakDetectorFactory: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v10.<io.netty.util.internal.logging.InternalLogger: void error(java.lang.String,java.lang.Object,java.lang.Object)>("Could not load custom resource leak detector class provided: {}", v0, v9);
label6:
return null;
catch java.lang.Throwable from label1 to label2 with label5;
catch java.lang.Throwable from label3 to label4 with label5;
}
public io.netty.util.ResourceLeakDetector newResourceLeakDetector(java.lang.Class, int, long)
{
java.lang.Throwable v14;
java.lang.Object[] v16, v6;
long v3;
java.lang.Integer v7;
java.lang.reflect.Constructor v11, v17, v4, v5;
java.lang.Long v8;
int v2;
java.lang.String v13, v19;
io.netty.util.ResourceLeakDetector v20;
io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory v0;
io.netty.util.internal.logging.InternalLogger v10, v15, v21;
java.lang.Class v1, v12, v18;
java.lang.Object v9;
v0 := @this: io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: int;
v3 := @parameter2: long;
v4 = v0.<io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory: java.lang.reflect.Constructor obsoleteCustomClassConstructor>;
if v4 == null goto label4;
label1:
v5 = v0.<io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory: java.lang.reflect.Constructor obsoleteCustomClassConstructor>;
v6 = newarray (java.lang.Object)[3];
v6[0] = v1;
v7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v2);
v6[1] = v7;
v8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v3);
v6[2] = v8;
v9 = virtualinvoke v5.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(v6);
v10 = <io.netty.util.ResourceLeakDetectorFactory: io.netty.util.internal.logging.InternalLogger logger>;
v11 = v0.<io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory: java.lang.reflect.Constructor obsoleteCustomClassConstructor>;
v12 = virtualinvoke v11.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();
v13 = virtualinvoke v12.<java.lang.Class: java.lang.String getName()>();
interfaceinvoke v10.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object)>("Loaded custom ResourceLeakDetector: {}", v13);
label2:
return v9;
label3:
v14 := @caughtexception;
v15 = <io.netty.util.ResourceLeakDetectorFactory: io.netty.util.internal.logging.InternalLogger logger>;
v16 = newarray (java.lang.Object)[3];
v17 = v0.<io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory: java.lang.reflect.Constructor obsoleteCustomClassConstructor>;
v18 = virtualinvoke v17.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();
v19 = virtualinvoke v18.<java.lang.Class: java.lang.String getName()>();
v16[0] = v19;
v16[1] = v1;
v16[2] = v14;
interfaceinvoke v15.<io.netty.util.internal.logging.InternalLogger: void error(java.lang.String,java.lang.Object[])>("Could not load custom resource leak detector provided: {} with the given resource: {}", v16);
label4:
v20 = new io.netty.util.ResourceLeakDetector;
specialinvoke v20.<io.netty.util.ResourceLeakDetector: void <init>(java.lang.Class,int,long)>(v1, v2, v3);
v21 = <io.netty.util.ResourceLeakDetectorFactory: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v21.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object)>("Loaded default ResourceLeakDetector: {}", v20);
return v20;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.netty.util.ResourceLeakDetector newResourceLeakDetector(java.lang.Class, int)
{
java.lang.Throwable v12;
java.lang.Object[] v14, v5;
java.lang.Integer v6;
java.lang.reflect.Constructor v15, v3, v4, v9;
int v2;
java.lang.String v11, v17;
io.netty.util.ResourceLeakDetector v18;
io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory v0;
io.netty.util.internal.logging.InternalLogger v13, v19, v8;
java.lang.Class v1, v10, v16;
java.lang.Object v7;
v0 := @this: io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: int;
v3 = v0.<io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory: java.lang.reflect.Constructor customClassConstructor>;
if v3 == null goto label4;
label1:
v4 = v0.<io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory: java.lang.reflect.Constructor customClassConstructor>;
v5 = newarray (java.lang.Object)[2];
v5[0] = v1;
v6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v2);
v5[1] = v6;
v7 = virtualinvoke v4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(v5);
v8 = <io.netty.util.ResourceLeakDetectorFactory: io.netty.util.internal.logging.InternalLogger logger>;
v9 = v0.<io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory: java.lang.reflect.Constructor customClassConstructor>;
v10 = virtualinvoke v9.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();
v11 = virtualinvoke v10.<java.lang.Class: java.lang.String getName()>();
interfaceinvoke v8.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object)>("Loaded custom ResourceLeakDetector: {}", v11);
label2:
return v7;
label3:
v12 := @caughtexception;
v13 = <io.netty.util.ResourceLeakDetectorFactory: io.netty.util.internal.logging.InternalLogger logger>;
v14 = newarray (java.lang.Object)[3];
v15 = v0.<io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory: java.lang.reflect.Constructor customClassConstructor>;
v16 = virtualinvoke v15.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();
v17 = virtualinvoke v16.<java.lang.Class: java.lang.String getName()>();
v14[0] = v17;
v14[1] = v1;
v14[2] = v12;
interfaceinvoke v13.<io.netty.util.internal.logging.InternalLogger: void error(java.lang.String,java.lang.Object[])>("Could not load custom resource leak detector provided: {} with the given resource: {}", v14);
label4:
v18 = new io.netty.util.ResourceLeakDetector;
specialinvoke v18.<io.netty.util.ResourceLeakDetector: void <init>(java.lang.Class,int)>(v1, v2);
v19 = <io.netty.util.ResourceLeakDetectorFactory: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v19.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object)>("Loaded default ResourceLeakDetector: {}", v18);
return v18;
catch java.lang.Throwable from label1 to label2 with label3;
}
}