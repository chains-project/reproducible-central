final class io.netty.util.collection.IntObjectHashMap$KeySet extends java.util.AbstractSet
{
final io.netty.util.collection.IntObjectHashMap this$0;
private void <init>(io.netty.util.collection.IntObjectHashMap)
{
io.netty.util.collection.IntObjectHashMap v1;
io.netty.util.collection.IntObjectHashMap$KeySet v0;
v0 := @this: io.netty.util.collection.IntObjectHashMap$KeySet;
v1 := @parameter0: io.netty.util.collection.IntObjectHashMap;
v0.<io.netty.util.collection.IntObjectHashMap$KeySet: io.netty.util.collection.IntObjectHashMap this$0> = v1;
specialinvoke v0.<java.util.AbstractSet: void <init>()>();
return;
}
public int size()
{
int v2;
io.netty.util.collection.IntObjectHashMap v1;
io.netty.util.collection.IntObjectHashMap$KeySet v0;
v0 := @this: io.netty.util.collection.IntObjectHashMap$KeySet;
v1 = v0.<io.netty.util.collection.IntObjectHashMap$KeySet: io.netty.util.collection.IntObjectHashMap this$0>;
v2 = virtualinvoke v1.<io.netty.util.collection.IntObjectHashMap: int size()>();
return v2;
}
public boolean contains(java.lang.Object)
{
io.netty.util.collection.IntObjectHashMap v2;
java.lang.Object v1;
io.netty.util.collection.IntObjectHashMap$KeySet v0;
boolean v3;
v0 := @this: io.netty.util.collection.IntObjectHashMap$KeySet;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.netty.util.collection.IntObjectHashMap$KeySet: io.netty.util.collection.IntObjectHashMap this$0>;
v3 = virtualinvoke v2.<io.netty.util.collection.IntObjectHashMap: boolean containsKey(java.lang.Object)>(v1);
return v3;
}
public boolean remove(java.lang.Object)
{
io.netty.util.collection.IntObjectHashMap v2;
java.lang.Object v1, v3;
io.netty.util.collection.IntObjectHashMap$KeySet v0;
boolean v4;
v0 := @this: io.netty.util.collection.IntObjectHashMap$KeySet;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.netty.util.collection.IntObjectHashMap$KeySet: io.netty.util.collection.IntObjectHashMap this$0>;
v3 = virtualinvoke v2.<io.netty.util.collection.IntObjectHashMap: java.lang.Object remove(java.lang.Object)>(v1);
if v3 == null goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public boolean retainAll(java.util.Collection)
{
java.util.Iterator v5;
java.util.Collection v1;
java.lang.Integer v9;
java.lang.Iterable v4;
int v8;
io.netty.util.collection.IntObjectHashMap v3;
java.lang.Object v7;
io.netty.util.collection.IntObjectHashMap$KeySet v0;
boolean v10, v2, v6;
v0 := @this: io.netty.util.collection.IntObjectHashMap$KeySet;
v1 := @parameter0: java.util.Collection;
v2 = 0;
v3 = v0.<io.netty.util.collection.IntObjectHashMap$KeySet: io.netty.util.collection.IntObjectHashMap this$0>;
v4 = virtualinvoke v3.<io.netty.util.collection.IntObjectHashMap: java.lang.Iterable entries()>();
v5 = interfaceinvoke v4.<java.lang.Iterable: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label2;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = interfaceinvoke v7.<io.netty.util.collection.IntObjectMap$PrimitiveEntry: int key()>();
v9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v8);
v10 = interfaceinvoke v1.<java.util.Collection: boolean contains(java.lang.Object)>(v9);
if v10 != 0 goto label1;
v2 = 1;
interfaceinvoke v5.<java.util.Iterator: void remove()>();
goto label1;
label2:
return v2;
}
public void clear()
{
io.netty.util.collection.IntObjectHashMap v1;
io.netty.util.collection.IntObjectHashMap$KeySet v0;
v0 := @this: io.netty.util.collection.IntObjectHashMap$KeySet;
v1 = v0.<io.netty.util.collection.IntObjectHashMap$KeySet: io.netty.util.collection.IntObjectHashMap this$0>;
virtualinvoke v1.<io.netty.util.collection.IntObjectHashMap: void clear()>();
return;
}
public java.util.Iterator iterator()
{
io.netty.util.collection.IntObjectHashMap$KeySet v0;
io.netty.util.collection.IntObjectHashMap$KeySet$1 v1;
v0 := @this: io.netty.util.collection.IntObjectHashMap$KeySet;
v1 = new io.netty.util.collection.IntObjectHashMap$KeySet$1;
specialinvoke v1.<io.netty.util.collection.IntObjectHashMap$KeySet$1: void <init>(io.netty.util.collection.IntObjectHashMap$KeySet)>(v0);
return v1;
}
}