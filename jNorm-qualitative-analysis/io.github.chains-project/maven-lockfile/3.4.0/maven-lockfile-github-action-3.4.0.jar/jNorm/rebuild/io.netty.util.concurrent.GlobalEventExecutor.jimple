public final class io.netty.util.concurrent.GlobalEventExecutor extends io.netty.util.concurrent.AbstractScheduledEventExecutor implements io.netty.util.concurrent.OrderedEventExecutor
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private static final long SCHEDULE_QUIET_PERIOD_INTERVAL;
public static final io.netty.util.concurrent.GlobalEventExecutor INSTANCE;
final java.util.concurrent.BlockingQueue taskQueue;
final io.netty.util.concurrent.ScheduledFutureTask quietPeriodTask;
final java.util.concurrent.ThreadFactory threadFactory;
private final io.netty.util.concurrent.GlobalEventExecutor$TaskRunner taskRunner;
private final java.util.concurrent.atomic.AtomicBoolean started;
volatile java.lang.Thread thread;
private final io.netty.util.concurrent.Future terminationFuture;
private void <init>()
{
io.netty.util.concurrent.ScheduledFutureTask v15, v2;
io.netty.util.concurrent.DefaultThreadFactory v16;
io.netty.util.internal.PriorityQueue v14;
java.util.concurrent.atomic.AtomicBoolean v11;
java.util.concurrent.Callable v4;
long v5, v6, v7, v8, v9;
io.netty.util.concurrent.GlobalEventExecutor v0;
java.lang.String v18;
java.util.concurrent.ThreadFactory v19;
io.netty.util.concurrent.GlobalEventExecutor$TaskRunner v10;
java.lang.UnsupportedOperationException v13;
java.util.concurrent.LinkedBlockingQueue v1;
java.lang.Class v17;
io.netty.util.concurrent.FailedFuture v12;
io.netty.util.concurrent.GlobalEventExecutor$1 v3;
v0 := @this: io.netty.util.concurrent.GlobalEventExecutor;
specialinvoke v0.<io.netty.util.concurrent.AbstractScheduledEventExecutor: void <init>()>();
v1 = new java.util.concurrent.LinkedBlockingQueue;
specialinvoke v1.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();
v0.<io.netty.util.concurrent.GlobalEventExecutor: java.util.concurrent.BlockingQueue taskQueue> = v1;
v2 = new io.netty.util.concurrent.ScheduledFutureTask;
v3 = new io.netty.util.concurrent.GlobalEventExecutor$1;
specialinvoke v3.<io.netty.util.concurrent.GlobalEventExecutor$1: void <init>(io.netty.util.concurrent.GlobalEventExecutor)>(v0);
v4 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.Callable callable(java.lang.Runnable,java.lang.Object)>(v3, null);
v5 = virtualinvoke v0.<io.netty.util.concurrent.GlobalEventExecutor: long getCurrentTimeNanos()>();
v6 = <io.netty.util.concurrent.GlobalEventExecutor: long SCHEDULE_QUIET_PERIOD_INTERVAL>;
v7 = staticinvoke <io.netty.util.concurrent.GlobalEventExecutor: long deadlineNanos(long,long)>(v5, v6);
v8 = <io.netty.util.concurrent.GlobalEventExecutor: long SCHEDULE_QUIET_PERIOD_INTERVAL>;
v9 = neg v8;
specialinvoke v2.<io.netty.util.concurrent.ScheduledFutureTask: void <init>(io.netty.util.concurrent.AbstractScheduledEventExecutor,java.util.concurrent.Callable,long,long)>(v0, v4, v7, v9);
v0.<io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.concurrent.ScheduledFutureTask quietPeriodTask> = v2;
v10 = new io.netty.util.concurrent.GlobalEventExecutor$TaskRunner;
specialinvoke v10.<io.netty.util.concurrent.GlobalEventExecutor$TaskRunner: void <init>(io.netty.util.concurrent.GlobalEventExecutor)>(v0);
v0.<io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.concurrent.GlobalEventExecutor$TaskRunner taskRunner> = v10;
v11 = new java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v11.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();
v0.<io.netty.util.concurrent.GlobalEventExecutor: java.util.concurrent.atomic.AtomicBoolean started> = v11;
v12 = new io.netty.util.concurrent.FailedFuture;
v13 = new java.lang.UnsupportedOperationException;
specialinvoke v13.<java.lang.UnsupportedOperationException: void <init>()>();
specialinvoke v12.<io.netty.util.concurrent.FailedFuture: void <init>(io.netty.util.concurrent.EventExecutor,java.lang.Throwable)>(v0, v13);
v0.<io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.concurrent.Future terminationFuture> = v12;
v14 = virtualinvoke v0.<io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.internal.PriorityQueue scheduledTaskQueue()>();
v15 = v0.<io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.concurrent.ScheduledFutureTask quietPeriodTask>;
interfaceinvoke v14.<io.netty.util.internal.PriorityQueue: boolean add(java.lang.Object)>(v15);
v16 = new io.netty.util.concurrent.DefaultThreadFactory;
v17 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v18 = staticinvoke <io.netty.util.concurrent.DefaultThreadFactory: java.lang.String toPoolName(java.lang.Class)>(v17);
specialinvoke v16.<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.String,boolean,int,java.lang.ThreadGroup)>(v18, 0, 5, null);
v19 = staticinvoke <io.netty.util.internal.ThreadExecutorMap: java.util.concurrent.ThreadFactory apply(java.util.concurrent.ThreadFactory,io.netty.util.concurrent.EventExecutor)>(v16, v0);
v0.<io.netty.util.concurrent.GlobalEventExecutor: java.util.concurrent.ThreadFactory threadFactory> = v19;
return;
}
java.lang.Runnable takeTask()
{
io.netty.util.concurrent.ScheduledFutureTask v2;
java.util.concurrent.BlockingQueue v1;
long v5;
io.netty.util.concurrent.GlobalEventExecutor v0;
java.util.concurrent.TimeUnit v7;
byte v6;
java.lang.InterruptedException v4, v9;
java.lang.Object v3, v8;
v0 := @this: io.netty.util.concurrent.GlobalEventExecutor;
v1 = v0.<io.netty.util.concurrent.GlobalEventExecutor: java.util.concurrent.BlockingQueue taskQueue>;
label01:
v2 = virtualinvoke v0.<io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.concurrent.ScheduledFutureTask peekScheduledTask()>();
if v2 != null goto label06;
label02:
v3 = interfaceinvoke v1.<java.util.concurrent.BlockingQueue: java.lang.Object take()>();
label03:
goto label05;
label04:
v4 := @caughtexception;
label05:
return v3;
label06:
v5 = virtualinvoke v2.<io.netty.util.concurrent.ScheduledFutureTask: long delayNanos()>();
v6 = v5 cmp 0L;
if v6 <= 0 goto label10;
label07:
v7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
v8 = interfaceinvoke v1.<java.util.concurrent.BlockingQueue: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>(v5, v7);
label08:
goto label10;
label09:
v9 := @caughtexception;
return null;
label10:
if v8 != null goto label11;
specialinvoke v0.<io.netty.util.concurrent.GlobalEventExecutor: void fetchFromScheduledTaskQueue()>();
interfaceinvoke v1.<java.util.concurrent.BlockingQueue: java.lang.Object poll()>();
label11:
if v8 == null goto label01;
return v8;
catch java.lang.InterruptedException from label02 to label03 with label04;
catch java.lang.InterruptedException from label07 to label08 with label09;
}
private void fetchFromScheduledTaskQueue()
{
io.netty.util.concurrent.GlobalEventExecutor v0;
java.util.concurrent.BlockingQueue v3;
long v1;
java.lang.Runnable v2;
v0 := @this: io.netty.util.concurrent.GlobalEventExecutor;
v1 = virtualinvoke v0.<io.netty.util.concurrent.GlobalEventExecutor: long getCurrentTimeNanos()>();
v2 = virtualinvoke v0.<io.netty.util.concurrent.GlobalEventExecutor: java.lang.Runnable pollScheduledTask(long)>(v1);
label1:
if v2 == null goto label2;
v3 = v0.<io.netty.util.concurrent.GlobalEventExecutor: java.util.concurrent.BlockingQueue taskQueue>;
interfaceinvoke v3.<java.util.concurrent.BlockingQueue: boolean add(java.lang.Object)>(v2);
v2 = virtualinvoke v0.<io.netty.util.concurrent.GlobalEventExecutor: java.lang.Runnable pollScheduledTask(long)>(v1);
goto label1;
label2:
return;
}
public int pendingTasks()
{
int v2;
io.netty.util.concurrent.GlobalEventExecutor v0;
java.util.concurrent.BlockingQueue v1;
v0 := @this: io.netty.util.concurrent.GlobalEventExecutor;
v1 = v0.<io.netty.util.concurrent.GlobalEventExecutor: java.util.concurrent.BlockingQueue taskQueue>;
v2 = interfaceinvoke v1.<java.util.concurrent.BlockingQueue: int size()>();
return v2;
}
private void addTask(java.lang.Runnable)
{
io.netty.util.concurrent.GlobalEventExecutor v0;
java.lang.Object v3;
java.util.concurrent.BlockingQueue v2;
java.lang.Runnable v1;
v0 := @this: io.netty.util.concurrent.GlobalEventExecutor;
v1 := @parameter0: java.lang.Runnable;
v2 = v0.<io.netty.util.concurrent.GlobalEventExecutor: java.util.concurrent.BlockingQueue taskQueue>;
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "task");
interfaceinvoke v2.<java.util.concurrent.BlockingQueue: boolean add(java.lang.Object)>(v3);
return;
}
public boolean inEventLoop(java.lang.Thread)
{
io.netty.util.concurrent.GlobalEventExecutor v0;
java.lang.Thread v1, v2;
boolean v3;
v0 := @this: io.netty.util.concurrent.GlobalEventExecutor;
v1 := @parameter0: java.lang.Thread;
v2 = v0.<io.netty.util.concurrent.GlobalEventExecutor: java.lang.Thread thread>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public io.netty.util.concurrent.Future shutdownGracefully(long, long, java.util.concurrent.TimeUnit)
{
io.netty.util.concurrent.GlobalEventExecutor v0;
java.util.concurrent.TimeUnit v3;
long v1, v2;
io.netty.util.concurrent.Future v4;
v0 := @this: io.netty.util.concurrent.GlobalEventExecutor;
v1 := @parameter0: long;
v2 := @parameter1: long;
v3 := @parameter2: java.util.concurrent.TimeUnit;
v4 = virtualinvoke v0.<io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.concurrent.Future terminationFuture()>();
return v4;
}
public io.netty.util.concurrent.Future terminationFuture()
{
io.netty.util.concurrent.GlobalEventExecutor v0;
io.netty.util.concurrent.Future v1;
v0 := @this: io.netty.util.concurrent.GlobalEventExecutor;
v1 = v0.<io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.concurrent.Future terminationFuture>;
return v1;
}
public void shutdown()
{
io.netty.util.concurrent.GlobalEventExecutor v0;
java.lang.UnsupportedOperationException v1;
v0 := @this: io.netty.util.concurrent.GlobalEventExecutor;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>()>();
throw v1;
}
public boolean isShuttingDown()
{
io.netty.util.concurrent.GlobalEventExecutor v0;
v0 := @this: io.netty.util.concurrent.GlobalEventExecutor;
return 0;
}
public boolean isShutdown()
{
io.netty.util.concurrent.GlobalEventExecutor v0;
v0 := @this: io.netty.util.concurrent.GlobalEventExecutor;
return 0;
}
public boolean isTerminated()
{
io.netty.util.concurrent.GlobalEventExecutor v0;
v0 := @this: io.netty.util.concurrent.GlobalEventExecutor;
return 0;
}
public boolean awaitTermination(long, java.util.concurrent.TimeUnit)
{
io.netty.util.concurrent.GlobalEventExecutor v0;
java.util.concurrent.TimeUnit v2;
long v1;
v0 := @this: io.netty.util.concurrent.GlobalEventExecutor;
v1 := @parameter0: long;
v2 := @parameter1: java.util.concurrent.TimeUnit;
return 0;
}
public boolean awaitInactivity(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
{
java.lang.IllegalStateException v4;
long v1, v5;
io.netty.util.concurrent.GlobalEventExecutor v0;
java.util.concurrent.TimeUnit v2;
java.lang.Thread v3;
boolean v6, v7;
v0 := @this: io.netty.util.concurrent.GlobalEventExecutor;
v1 := @parameter0: long;
v2 := @parameter1: java.util.concurrent.TimeUnit;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "unit");
v3 = v0.<io.netty.util.concurrent.GlobalEventExecutor: java.lang.Thread thread>;
if v3 != null goto label1;
v4 = new java.lang.IllegalStateException;
specialinvoke v4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("thread was not started");
throw v4;
label1:
v5 = virtualinvoke v2.<java.util.concurrent.TimeUnit: long toMillis(long)>(v1);
virtualinvoke v3.<java.lang.Thread: void join(long)>(v5);
v6 = virtualinvoke v3.<java.lang.Thread: boolean isAlive()>();
if v6 != 0 goto label2;
v7 = 1;
goto label3;
label2:
v7 = 0;
label3:
return v7;
}
public void execute(java.lang.Runnable)
{
io.netty.util.concurrent.GlobalEventExecutor v0;
java.lang.Runnable v1;
v0 := @this: io.netty.util.concurrent.GlobalEventExecutor;
v1 := @parameter0: java.lang.Runnable;
specialinvoke v0.<io.netty.util.concurrent.GlobalEventExecutor: void execute0(java.lang.Runnable)>(v1);
return;
}
private void execute0(java.lang.Runnable)
{
io.netty.util.concurrent.GlobalEventExecutor v0;
java.lang.Object v2;
java.lang.Runnable v1;
boolean v3;
v0 := @this: io.netty.util.concurrent.GlobalEventExecutor;
v1 := @parameter0: java.lang.Runnable;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "task");
specialinvoke v0.<io.netty.util.concurrent.GlobalEventExecutor: void addTask(java.lang.Runnable)>(v2);
v3 = virtualinvoke v0.<io.netty.util.concurrent.GlobalEventExecutor: boolean inEventLoop()>();
if v3 != 0 goto label1;
specialinvoke v0.<io.netty.util.concurrent.GlobalEventExecutor: void startThread()>();
label1:
return;
}
private void startThread()
{
io.netty.util.concurrent.GlobalEventExecutor v0;
io.netty.util.concurrent.GlobalEventExecutor$TaskRunner v4;
java.lang.Thread v5;
java.util.concurrent.atomic.AtomicBoolean v1;
java.util.concurrent.ThreadFactory v3;
io.netty.util.concurrent.GlobalEventExecutor$2 v6;
boolean v2;
v0 := @this: io.netty.util.concurrent.GlobalEventExecutor;
v1 = v0.<io.netty.util.concurrent.GlobalEventExecutor: java.util.concurrent.atomic.AtomicBoolean started>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);
if v2 == 0 goto label1;
v3 = v0.<io.netty.util.concurrent.GlobalEventExecutor: java.util.concurrent.ThreadFactory threadFactory>;
v4 = v0.<io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.concurrent.GlobalEventExecutor$TaskRunner taskRunner>;
v5 = interfaceinvoke v3.<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>(v4);
v6 = new io.netty.util.concurrent.GlobalEventExecutor$2;
specialinvoke v6.<io.netty.util.concurrent.GlobalEventExecutor$2: void <init>(io.netty.util.concurrent.GlobalEventExecutor,java.lang.Thread)>(v0, v5);
staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>(v6);
v0.<io.netty.util.concurrent.GlobalEventExecutor: java.lang.Thread thread> = v5;
virtualinvoke v5.<java.lang.Thread: void start()>();
label1:
return;
}
static void <clinit>()
{
io.netty.util.concurrent.GlobalEventExecutor v6;
java.util.concurrent.TimeUnit v4;
io.netty.util.internal.logging.InternalLogger v0, v2;
int v1;
long v5;
java.lang.Integer v3;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/util/concurrent/GlobalEventExecutor;");
<io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.internal.logging.InternalLogger logger> = v0;
v1 = staticinvoke <io.netty.util.internal.SystemPropertyUtil: int getInt(java.lang.String,int)>("io.netty.globalEventExecutor.quietPeriodSeconds", 1);
if v1 > 0 goto label1;
v1 = 1;
label1:
v2 = <io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.internal.logging.InternalLogger logger>;
v3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
interfaceinvoke v2.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object)>("-Dio.netty.globalEventExecutor.quietPeriodSeconds: {}", v3);
v4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
v5 = virtualinvoke v4.<java.util.concurrent.TimeUnit: long toNanos(long)>(v1);
<io.netty.util.concurrent.GlobalEventExecutor: long SCHEDULE_QUIET_PERIOD_INTERVAL> = v5;
v6 = new io.netty.util.concurrent.GlobalEventExecutor;
specialinvoke v6.<io.netty.util.concurrent.GlobalEventExecutor: void <init>()>();
<io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.concurrent.GlobalEventExecutor INSTANCE> = v6;
return;
}
}