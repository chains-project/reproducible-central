final class io.netty.util.concurrent.SingleThreadEventExecutor$DefaultThreadProperties extends java.lang.Object implements io.netty.util.concurrent.ThreadProperties
{
private final java.lang.Thread t;
void <init>(java.lang.Thread)
{
io.netty.util.concurrent.SingleThreadEventExecutor$DefaultThreadProperties v0;
java.lang.Thread v1;
v0 := @this: io.netty.util.concurrent.SingleThreadEventExecutor$DefaultThreadProperties;
v1 := @parameter0: java.lang.Thread;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.util.concurrent.SingleThreadEventExecutor$DefaultThreadProperties: java.lang.Thread t> = v1;
return;
}
public java.lang.Thread$State state()
{
java.lang.Thread$State v2;
io.netty.util.concurrent.SingleThreadEventExecutor$DefaultThreadProperties v0;
java.lang.Thread v1;
v0 := @this: io.netty.util.concurrent.SingleThreadEventExecutor$DefaultThreadProperties;
v1 = v0.<io.netty.util.concurrent.SingleThreadEventExecutor$DefaultThreadProperties: java.lang.Thread t>;
v2 = virtualinvoke v1.<java.lang.Thread: java.lang.Thread$State getState()>();
return v2;
}
public int priority()
{
int v2;
io.netty.util.concurrent.SingleThreadEventExecutor$DefaultThreadProperties v0;
java.lang.Thread v1;
v0 := @this: io.netty.util.concurrent.SingleThreadEventExecutor$DefaultThreadProperties;
v1 = v0.<io.netty.util.concurrent.SingleThreadEventExecutor$DefaultThreadProperties: java.lang.Thread t>;
v2 = virtualinvoke v1.<java.lang.Thread: int getPriority()>();
return v2;
}
public boolean isInterrupted()
{
io.netty.util.concurrent.SingleThreadEventExecutor$DefaultThreadProperties v0;
boolean v2;
java.lang.Thread v1;
v0 := @this: io.netty.util.concurrent.SingleThreadEventExecutor$DefaultThreadProperties;
v1 = v0.<io.netty.util.concurrent.SingleThreadEventExecutor$DefaultThreadProperties: java.lang.Thread t>;
v2 = virtualinvoke v1.<java.lang.Thread: boolean isInterrupted()>();
return v2;
}
public boolean isDaemon()
{
io.netty.util.concurrent.SingleThreadEventExecutor$DefaultThreadProperties v0;
boolean v2;
java.lang.Thread v1;
v0 := @this: io.netty.util.concurrent.SingleThreadEventExecutor$DefaultThreadProperties;
v1 = v0.<io.netty.util.concurrent.SingleThreadEventExecutor$DefaultThreadProperties: java.lang.Thread t>;
v2 = virtualinvoke v1.<java.lang.Thread: boolean isDaemon()>();
return v2;
}
public java.lang.String name()
{
java.lang.String v2;
io.netty.util.concurrent.SingleThreadEventExecutor$DefaultThreadProperties v0;
java.lang.Thread v1;
v0 := @this: io.netty.util.concurrent.SingleThreadEventExecutor$DefaultThreadProperties;
v1 = v0.<io.netty.util.concurrent.SingleThreadEventExecutor$DefaultThreadProperties: java.lang.Thread t>;
v2 = virtualinvoke v1.<java.lang.Thread: java.lang.String getName()>();
return v2;
}
public long id()
{
long v2;
io.netty.util.concurrent.SingleThreadEventExecutor$DefaultThreadProperties v0;
java.lang.Thread v1;
v0 := @this: io.netty.util.concurrent.SingleThreadEventExecutor$DefaultThreadProperties;
v1 = v0.<io.netty.util.concurrent.SingleThreadEventExecutor$DefaultThreadProperties: java.lang.Thread t>;
v2 = virtualinvoke v1.<java.lang.Thread: long getId()>();
return v2;
}
public java.lang.StackTraceElement[] stackTrace()
{
java.lang.StackTraceElement[] v2;
io.netty.util.concurrent.SingleThreadEventExecutor$DefaultThreadProperties v0;
java.lang.Thread v1;
v0 := @this: io.netty.util.concurrent.SingleThreadEventExecutor$DefaultThreadProperties;
v1 = v0.<io.netty.util.concurrent.SingleThreadEventExecutor$DefaultThreadProperties: java.lang.Thread t>;
v2 = virtualinvoke v1.<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>();
return v2;
}
public boolean isAlive()
{
io.netty.util.concurrent.SingleThreadEventExecutor$DefaultThreadProperties v0;
boolean v2;
java.lang.Thread v1;
v0 := @this: io.netty.util.concurrent.SingleThreadEventExecutor$DefaultThreadProperties;
v1 = v0.<io.netty.util.concurrent.SingleThreadEventExecutor$DefaultThreadProperties: java.lang.Thread t>;
v2 = virtualinvoke v1.<java.lang.Thread: boolean isAlive()>();
return v2;
}
}