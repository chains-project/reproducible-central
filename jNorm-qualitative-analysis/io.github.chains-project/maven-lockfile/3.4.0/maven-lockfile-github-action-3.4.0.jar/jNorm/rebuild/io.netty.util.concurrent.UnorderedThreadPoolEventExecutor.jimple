public final class io.netty.util.concurrent.UnorderedThreadPoolEventExecutor extends java.util.concurrent.ScheduledThreadPoolExecutor implements io.netty.util.concurrent.EventExecutor
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private final io.netty.util.concurrent.Promise terminationFuture;
private final java.util.Set executorSet;
public void <init>(int)
{
int v1;
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor v0;
io.netty.util.concurrent.DefaultThreadFactory v2;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor;
v1 := @parameter0: int;
v2 = new io.netty.util.concurrent.DefaultThreadFactory;
specialinvoke v2.<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.Class)>(class "Lio/netty/util/concurrent/UnorderedThreadPoolEventExecutor;");
specialinvoke v0.<io.netty.util.concurrent.UnorderedThreadPoolEventExecutor: void <init>(int,java.util.concurrent.ThreadFactory)>(v1, v2);
return;
}
public void <init>(int, java.util.concurrent.ThreadFactory)
{
io.netty.util.concurrent.GlobalEventExecutor v3;
io.netty.util.concurrent.Promise v4;
int v1;
java.util.Set v5;
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor v0;
java.util.concurrent.ThreadFactory v2;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor;
v1 := @parameter0: int;
v2 := @parameter1: java.util.concurrent.ThreadFactory;
specialinvoke v0.<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int,java.util.concurrent.ThreadFactory)>(v1, v2);
v3 = <io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.concurrent.GlobalEventExecutor INSTANCE>;
v4 = virtualinvoke v3.<io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.concurrent.Promise newPromise()>();
v0.<io.netty.util.concurrent.UnorderedThreadPoolEventExecutor: io.netty.util.concurrent.Promise terminationFuture> = v4;
v5 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(v0);
v0.<io.netty.util.concurrent.UnorderedThreadPoolEventExecutor: java.util.Set executorSet> = v5;
return;
}
public void <init>(int, java.util.concurrent.RejectedExecutionHandler)
{
io.netty.util.concurrent.DefaultThreadFactory v3;
java.util.concurrent.RejectedExecutionHandler v2;
int v1;
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor v0;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor;
v1 := @parameter0: int;
v2 := @parameter1: java.util.concurrent.RejectedExecutionHandler;
v3 = new io.netty.util.concurrent.DefaultThreadFactory;
specialinvoke v3.<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.Class)>(class "Lio/netty/util/concurrent/UnorderedThreadPoolEventExecutor;");
specialinvoke v0.<io.netty.util.concurrent.UnorderedThreadPoolEventExecutor: void <init>(int,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>(v1, v3, v2);
return;
}
public void <init>(int, java.util.concurrent.ThreadFactory, java.util.concurrent.RejectedExecutionHandler)
{
io.netty.util.concurrent.GlobalEventExecutor v4;
io.netty.util.concurrent.Promise v5;
java.util.concurrent.RejectedExecutionHandler v3;
int v1;
java.util.Set v6;
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor v0;
java.util.concurrent.ThreadFactory v2;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor;
v1 := @parameter0: int;
v2 := @parameter1: java.util.concurrent.ThreadFactory;
v3 := @parameter2: java.util.concurrent.RejectedExecutionHandler;
specialinvoke v0.<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>(v1, v2, v3);
v4 = <io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.concurrent.GlobalEventExecutor INSTANCE>;
v5 = virtualinvoke v4.<io.netty.util.concurrent.GlobalEventExecutor: io.netty.util.concurrent.Promise newPromise()>();
v0.<io.netty.util.concurrent.UnorderedThreadPoolEventExecutor: io.netty.util.concurrent.Promise terminationFuture> = v5;
v6 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(v0);
v0.<io.netty.util.concurrent.UnorderedThreadPoolEventExecutor: java.util.Set executorSet> = v6;
return;
}
public io.netty.util.concurrent.EventExecutor next()
{
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor v0;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor;
return v0;
}
public io.netty.util.concurrent.EventExecutorGroup parent()
{
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor v0;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor;
return v0;
}
public boolean inEventLoop()
{
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor v0;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor;
return 0;
}
public boolean inEventLoop(java.lang.Thread)
{
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor v0;
java.lang.Thread v1;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor;
v1 := @parameter0: java.lang.Thread;
return 0;
}
public io.netty.util.concurrent.Promise newPromise()
{
io.netty.util.concurrent.DefaultPromise v1;
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor v0;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor;
v1 = new io.netty.util.concurrent.DefaultPromise;
specialinvoke v1.<io.netty.util.concurrent.DefaultPromise: void <init>(io.netty.util.concurrent.EventExecutor)>(v0);
return v1;
}
public io.netty.util.concurrent.ProgressivePromise newProgressivePromise()
{
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor v0;
io.netty.util.concurrent.DefaultProgressivePromise v1;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor;
v1 = new io.netty.util.concurrent.DefaultProgressivePromise;
specialinvoke v1.<io.netty.util.concurrent.DefaultProgressivePromise: void <init>(io.netty.util.concurrent.EventExecutor)>(v0);
return v1;
}
public io.netty.util.concurrent.Future newSucceededFuture(java.lang.Object)
{
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor v0;
java.lang.Object v1;
io.netty.util.concurrent.SucceededFuture v2;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor;
v1 := @parameter0: java.lang.Object;
v2 = new io.netty.util.concurrent.SucceededFuture;
specialinvoke v2.<io.netty.util.concurrent.SucceededFuture: void <init>(io.netty.util.concurrent.EventExecutor,java.lang.Object)>(v0, v1);
return v2;
}
public io.netty.util.concurrent.Future newFailedFuture(java.lang.Throwable)
{
java.lang.Throwable v1;
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor v0;
io.netty.util.concurrent.FailedFuture v2;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor;
v1 := @parameter0: java.lang.Throwable;
v2 = new io.netty.util.concurrent.FailedFuture;
specialinvoke v2.<io.netty.util.concurrent.FailedFuture: void <init>(io.netty.util.concurrent.EventExecutor,java.lang.Throwable)>(v0, v1);
return v2;
}
public boolean isShuttingDown()
{
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor v0;
boolean v1;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor;
v1 = virtualinvoke v0.<io.netty.util.concurrent.UnorderedThreadPoolEventExecutor: boolean isShutdown()>();
return v1;
}
public java.util.List shutdownNow()
{
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor v0;
java.util.List v1;
io.netty.util.concurrent.Promise v2;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor;
v1 = specialinvoke v0.<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.List shutdownNow()>();
v2 = v0.<io.netty.util.concurrent.UnorderedThreadPoolEventExecutor: io.netty.util.concurrent.Promise terminationFuture>;
interfaceinvoke v2.<io.netty.util.concurrent.Promise: boolean trySuccess(java.lang.Object)>(null);
return v1;
}
public void shutdown()
{
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor v0;
io.netty.util.concurrent.Promise v1;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor;
specialinvoke v0.<java.util.concurrent.ScheduledThreadPoolExecutor: void shutdown()>();
v1 = v0.<io.netty.util.concurrent.UnorderedThreadPoolEventExecutor: io.netty.util.concurrent.Promise terminationFuture>;
interfaceinvoke v1.<io.netty.util.concurrent.Promise: boolean trySuccess(java.lang.Object)>(null);
return;
}
public io.netty.util.concurrent.Future shutdownGracefully()
{
java.util.concurrent.TimeUnit v1;
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor v0;
io.netty.util.concurrent.Future v2;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor;
v1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
v2 = virtualinvoke v0.<io.netty.util.concurrent.UnorderedThreadPoolEventExecutor: io.netty.util.concurrent.Future shutdownGracefully(long,long,java.util.concurrent.TimeUnit)>(2L, 15L, v1);
return v2;
}
public io.netty.util.concurrent.Future shutdownGracefully(long, long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v3;
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor v0;
long v1, v2;
io.netty.util.concurrent.Future v4;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor;
v1 := @parameter0: long;
v2 := @parameter1: long;
v3 := @parameter2: java.util.concurrent.TimeUnit;
virtualinvoke v0.<io.netty.util.concurrent.UnorderedThreadPoolEventExecutor: void shutdown()>();
v4 = virtualinvoke v0.<io.netty.util.concurrent.UnorderedThreadPoolEventExecutor: io.netty.util.concurrent.Future terminationFuture()>();
return v4;
}
public io.netty.util.concurrent.Future terminationFuture()
{
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor v0;
io.netty.util.concurrent.Promise v1;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor;
v1 = v0.<io.netty.util.concurrent.UnorderedThreadPoolEventExecutor: io.netty.util.concurrent.Promise terminationFuture>;
return v1;
}
public java.util.Iterator iterator()
{
java.util.Set v1;
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor v0;
java.util.Iterator v2;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor;
v1 = v0.<io.netty.util.concurrent.UnorderedThreadPoolEventExecutor: java.util.Set executorSet>;
v2 = interfaceinvoke v1.<java.util.Set: java.util.Iterator iterator()>();
return v2;
}
protected java.util.concurrent.RunnableScheduledFuture decorateTask(java.lang.Runnable, java.util.concurrent.RunnableScheduledFuture)
{
java.util.concurrent.RunnableScheduledFuture v2, v4;
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$RunnableScheduledFutureTask v5;
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor v0;
java.lang.Runnable v1;
boolean v3;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor;
v1 := @parameter0: java.lang.Runnable;
v2 := @parameter1: java.util.concurrent.RunnableScheduledFuture;
v3 = v1 instanceof io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$NonNotifyRunnable;
if v3 == 0 goto label1;
v4 = v2;
goto label2;
label1:
v5 = new io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$RunnableScheduledFutureTask;
v4 = v5;
specialinvoke v5.<io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$RunnableScheduledFutureTask: void <init>(io.netty.util.concurrent.EventExecutor,java.util.concurrent.RunnableScheduledFuture,boolean)>(v0, v2, 0);
label2:
return v4;
}
protected java.util.concurrent.RunnableScheduledFuture decorateTask(java.util.concurrent.Callable, java.util.concurrent.RunnableScheduledFuture)
{
java.util.concurrent.RunnableScheduledFuture v2;
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$RunnableScheduledFutureTask v3;
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor v0;
java.util.concurrent.Callable v1;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor;
v1 := @parameter0: java.util.concurrent.Callable;
v2 := @parameter1: java.util.concurrent.RunnableScheduledFuture;
v3 = new io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$RunnableScheduledFutureTask;
specialinvoke v3.<io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$RunnableScheduledFutureTask: void <init>(io.netty.util.concurrent.EventExecutor,java.util.concurrent.RunnableScheduledFuture,boolean)>(v0, v2, 1);
return v3;
}
public io.netty.util.concurrent.ScheduledFuture schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v3;
java.util.concurrent.ScheduledFuture v4;
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor v0;
long v2;
java.lang.Runnable v1;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor;
v1 := @parameter0: java.lang.Runnable;
v2 := @parameter1: long;
v3 := @parameter2: java.util.concurrent.TimeUnit;
v4 = specialinvoke v0.<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(v1, v2, v3);
return v4;
}
public io.netty.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable, long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v3;
java.util.concurrent.ScheduledFuture v4;
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor v0;
java.util.concurrent.Callable v1;
long v2;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor;
v1 := @parameter0: java.util.concurrent.Callable;
v2 := @parameter1: long;
v3 := @parameter2: java.util.concurrent.TimeUnit;
v4 = specialinvoke v0.<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)>(v1, v2, v3);
return v4;
}
public io.netty.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v4;
java.util.concurrent.ScheduledFuture v5;
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor v0;
long v2, v3;
java.lang.Runnable v1;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor;
v1 := @parameter0: java.lang.Runnable;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 := @parameter3: java.util.concurrent.TimeUnit;
v5 = specialinvoke v0.<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>(v1, v2, v3, v4);
return v5;
}
public io.netty.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v4;
java.util.concurrent.ScheduledFuture v5;
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor v0;
long v2, v3;
java.lang.Runnable v1;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor;
v1 := @parameter0: java.lang.Runnable;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 := @parameter3: java.util.concurrent.TimeUnit;
v5 = specialinvoke v0.<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>(v1, v2, v3, v4);
return v5;
}
public io.netty.util.concurrent.Future submit(java.lang.Runnable)
{
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor v0;
java.util.concurrent.Future v2;
java.lang.Runnable v1;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor;
v1 := @parameter0: java.lang.Runnable;
v2 = specialinvoke v0.<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.Future submit(java.lang.Runnable)>(v1);
return v2;
}
public io.netty.util.concurrent.Future submit(java.lang.Runnable, java.lang.Object)
{
java.util.concurrent.Future v3;
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor v0;
java.lang.Object v2;
java.lang.Runnable v1;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor;
v1 := @parameter0: java.lang.Runnable;
v2 := @parameter1: java.lang.Object;
v3 = specialinvoke v0.<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object)>(v1, v2);
return v3;
}
public io.netty.util.concurrent.Future submit(java.util.concurrent.Callable)
{
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor v0;
java.util.concurrent.Callable v1;
java.util.concurrent.Future v2;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor;
v1 := @parameter0: java.util.concurrent.Callable;
v2 = specialinvoke v0.<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.Future submit(java.util.concurrent.Callable)>(v1);
return v2;
}
public void execute(java.lang.Runnable)
{
java.util.concurrent.TimeUnit v3;
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$NonNotifyRunnable v2;
io.netty.util.concurrent.UnorderedThreadPoolEventExecutor v0;
java.lang.Runnable v1;
v0 := @this: io.netty.util.concurrent.UnorderedThreadPoolEventExecutor;
v1 := @parameter0: java.lang.Runnable;
v2 = new io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$NonNotifyRunnable;
specialinvoke v2.<io.netty.util.concurrent.UnorderedThreadPoolEventExecutor$NonNotifyRunnable: void <init>(java.lang.Runnable)>(v1);
v3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
specialinvoke v0.<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(v2, 0L, v3);
return;
}
static void <clinit>()
{
io.netty.util.internal.logging.InternalLogger v0;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/util/concurrent/UnorderedThreadPoolEventExecutor;");
<io.netty.util.concurrent.UnorderedThreadPoolEventExecutor: io.netty.util.internal.logging.InternalLogger logger> = v0;
return;
}
}