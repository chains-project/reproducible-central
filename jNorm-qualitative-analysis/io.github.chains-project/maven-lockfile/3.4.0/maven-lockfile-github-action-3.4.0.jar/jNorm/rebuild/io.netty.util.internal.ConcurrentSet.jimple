public final class io.netty.util.internal.ConcurrentSet extends java.util.AbstractSet implements java.io.Serializable
{
private static final long serialVersionUID;
private final java.util.concurrent.ConcurrentMap map;
public void <init>()
{
io.netty.util.internal.ConcurrentSet v0;
java.util.concurrent.ConcurrentMap v1;
v0 := @this: io.netty.util.internal.ConcurrentSet;
specialinvoke v0.<java.util.AbstractSet: void <init>()>();
v1 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.concurrent.ConcurrentMap newConcurrentHashMap()>();
v0.<io.netty.util.internal.ConcurrentSet: java.util.concurrent.ConcurrentMap map> = v1;
return;
}
public int size()
{
int v2;
io.netty.util.internal.ConcurrentSet v0;
java.util.concurrent.ConcurrentMap v1;
v0 := @this: io.netty.util.internal.ConcurrentSet;
v1 = v0.<io.netty.util.internal.ConcurrentSet: java.util.concurrent.ConcurrentMap map>;
v2 = interfaceinvoke v1.<java.util.concurrent.ConcurrentMap: int size()>();
return v2;
}
public boolean contains(java.lang.Object)
{
java.lang.Object v1;
io.netty.util.internal.ConcurrentSet v0;
boolean v3;
java.util.concurrent.ConcurrentMap v2;
v0 := @this: io.netty.util.internal.ConcurrentSet;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.netty.util.internal.ConcurrentSet: java.util.concurrent.ConcurrentMap map>;
v3 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(v1);
return v3;
}
public boolean add(java.lang.Object)
{
java.lang.Boolean v3;
java.lang.Object v1, v4;
io.netty.util.internal.ConcurrentSet v0;
boolean v5;
java.util.concurrent.ConcurrentMap v2;
v0 := @this: io.netty.util.internal.ConcurrentSet;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.netty.util.internal.ConcurrentSet: java.util.concurrent.ConcurrentMap map>;
v3 = <java.lang.Boolean: java.lang.Boolean TRUE>;
v4 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(v1, v3);
if v4 != null goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
public boolean remove(java.lang.Object)
{
java.lang.Object v1, v3;
io.netty.util.internal.ConcurrentSet v0;
boolean v4;
java.util.concurrent.ConcurrentMap v2;
v0 := @this: io.netty.util.internal.ConcurrentSet;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.netty.util.internal.ConcurrentSet: java.util.concurrent.ConcurrentMap map>;
v3 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(v1);
if v3 == null goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public void clear()
{
io.netty.util.internal.ConcurrentSet v0;
java.util.concurrent.ConcurrentMap v1;
v0 := @this: io.netty.util.internal.ConcurrentSet;
v1 = v0.<io.netty.util.internal.ConcurrentSet: java.util.concurrent.ConcurrentMap map>;
interfaceinvoke v1.<java.util.concurrent.ConcurrentMap: void clear()>();
return;
}
public java.util.Iterator iterator()
{
java.util.Iterator v3;
java.util.Set v2;
io.netty.util.internal.ConcurrentSet v0;
java.util.concurrent.ConcurrentMap v1;
v0 := @this: io.netty.util.internal.ConcurrentSet;
v1 = v0.<io.netty.util.internal.ConcurrentSet: java.util.concurrent.ConcurrentMap map>;
v2 = interfaceinvoke v1.<java.util.concurrent.ConcurrentMap: java.util.Set keySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
return v3;
}
}