public final class io.netty.util.internal.MathUtil extends java.lang.Object
{
static final boolean $assertionsDisabled;
private void <init>()
{
io.netty.util.internal.MathUtil v0;
v0 := @this: io.netty.util.internal.MathUtil;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static int findNextPositivePowerOfTwo(int)
{
int v0, v3, v4, v5, v6;
java.lang.AssertionError v2;
boolean v1;
v0 := @parameter0: int;
v1 = <io.netty.util.internal.MathUtil: boolean $assertionsDisabled>;
if v1 != 0 goto label2;
if v0 <= -2147483648 goto label1;
if v0 < 1073741824 goto label2;
label1:
v2 = new java.lang.AssertionError;
specialinvoke v2.<java.lang.AssertionError: void <init>()>();
throw v2;
label2:
v3 = v0 - 1;
v4 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(v3);
v5 = 32 - v4;
v6 = 1 << v5;
return v6;
}
public static int safeFindNextPositivePowerOfTwo(int)
{
int v0, v1;
v0 := @parameter0: int;
if v0 > 0 goto label1;
v1 = 1;
goto label3;
label1:
if v0 < 1073741824 goto label2;
v1 = 1073741824;
goto label3;
label2:
v1 = staticinvoke <io.netty.util.internal.MathUtil: int findNextPositivePowerOfTwo(int)>(v0);
label3:
return v1;
}
public static boolean isOutOfBounds(int, int, int)
{
int v0, v1, v2, v3, v4, v5, v6, v7, v8, v9;
boolean v10;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = v0 | v1;
v4 = v3 | v2;
v5 = v0 + v1;
v6 = v4 | v5;
v7 = v0 + v1;
v8 = v2 - v7;
v9 = v6 | v8;
if v9 >= 0 goto label1;
v10 = 1;
goto label2;
label1:
v10 = 0;
label2:
return v10;
}
public static int compare(int, int)
{
int v0, v1;
byte v2;
v0 := @parameter0: int;
v1 := @parameter1: int;
if v0 >= v1 goto label1;
v2 = -1;
goto label3;
label1:
if v0 <= v1 goto label2;
v2 = 1;
goto label3;
label2:
v2 = 0;
label3:
return v2;
}
public static int compare(long, long)
{
byte v2, v3, v4;
long v0, v1;
v0 := @parameter0: long;
v1 := @parameter1: long;
v2 = v0 cmp v1;
if v2 >= 0 goto label1;
v3 = -1;
goto label3;
label1:
v4 = v0 cmp v1;
if v4 <= 0 goto label2;
v3 = 1;
goto label3;
label2:
v3 = 0;
label3:
return v3;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/util/internal/MathUtil;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.util.internal.MathUtil: boolean $assertionsDisabled> = v2;
return;
}
}