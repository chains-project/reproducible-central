public final class io.netty.util.internal.PendingWrite extends java.lang.Object
{
private static final io.netty.util.internal.ObjectPool RECYCLER;
private final io.netty.util.internal.ObjectPool$Handle handle;
private java.lang.Object msg;
private io.netty.util.concurrent.Promise promise;
public static io.netty.util.internal.PendingWrite newInstance(java.lang.Object, io.netty.util.concurrent.Promise)
{
io.netty.util.concurrent.Promise v1;
java.lang.Object v0, v3;
io.netty.util.internal.ObjectPool v2;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: io.netty.util.concurrent.Promise;
v2 = <io.netty.util.internal.PendingWrite: io.netty.util.internal.ObjectPool RECYCLER>;
v3 = virtualinvoke v2.<io.netty.util.internal.ObjectPool: java.lang.Object get()>();
v3.<io.netty.util.internal.PendingWrite: java.lang.Object msg> = v0;
v3.<io.netty.util.internal.PendingWrite: io.netty.util.concurrent.Promise promise> = v1;
return v3;
}
private void <init>(io.netty.util.internal.ObjectPool$Handle)
{
io.netty.util.internal.ObjectPool$Handle v1;
io.netty.util.internal.PendingWrite v0;
v0 := @this: io.netty.util.internal.PendingWrite;
v1 := @parameter0: io.netty.util.internal.ObjectPool$Handle;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.util.internal.PendingWrite: io.netty.util.internal.ObjectPool$Handle handle> = v1;
return;
}
public boolean recycle()
{
io.netty.util.internal.ObjectPool$Handle v1;
io.netty.util.internal.PendingWrite v0;
v0 := @this: io.netty.util.internal.PendingWrite;
v0.<io.netty.util.internal.PendingWrite: java.lang.Object msg> = null;
v0.<io.netty.util.internal.PendingWrite: io.netty.util.concurrent.Promise promise> = null;
v1 = v0.<io.netty.util.internal.PendingWrite: io.netty.util.internal.ObjectPool$Handle handle>;
interfaceinvoke v1.<io.netty.util.internal.ObjectPool$Handle: void recycle(java.lang.Object)>(v0);
return 1;
}
public boolean failAndRecycle(java.lang.Throwable)
{
java.lang.Throwable v1;
io.netty.util.concurrent.Promise v3, v4;
java.lang.Object v2;
io.netty.util.internal.PendingWrite v0;
boolean v5;
v0 := @this: io.netty.util.internal.PendingWrite;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.netty.util.internal.PendingWrite: java.lang.Object msg>;
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v2);
v3 = v0.<io.netty.util.internal.PendingWrite: io.netty.util.concurrent.Promise promise>;
if v3 == null goto label1;
v4 = v0.<io.netty.util.internal.PendingWrite: io.netty.util.concurrent.Promise promise>;
interfaceinvoke v4.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>(v1);
label1:
v5 = virtualinvoke v0.<io.netty.util.internal.PendingWrite: boolean recycle()>();
return v5;
}
public boolean successAndRecycle()
{
io.netty.util.concurrent.Promise v1, v2;
io.netty.util.internal.PendingWrite v0;
boolean v3;
v0 := @this: io.netty.util.internal.PendingWrite;
v1 = v0.<io.netty.util.internal.PendingWrite: io.netty.util.concurrent.Promise promise>;
if v1 == null goto label1;
v2 = v0.<io.netty.util.internal.PendingWrite: io.netty.util.concurrent.Promise promise>;
interfaceinvoke v2.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setSuccess(java.lang.Object)>(null);
label1:
v3 = virtualinvoke v0.<io.netty.util.internal.PendingWrite: boolean recycle()>();
return v3;
}
public java.lang.Object msg()
{
java.lang.Object v1;
io.netty.util.internal.PendingWrite v0;
v0 := @this: io.netty.util.internal.PendingWrite;
v1 = v0.<io.netty.util.internal.PendingWrite: java.lang.Object msg>;
return v1;
}
public io.netty.util.concurrent.Promise promise()
{
io.netty.util.concurrent.Promise v1;
io.netty.util.internal.PendingWrite v0;
v0 := @this: io.netty.util.internal.PendingWrite;
v1 = v0.<io.netty.util.internal.PendingWrite: io.netty.util.concurrent.Promise promise>;
return v1;
}
public io.netty.util.concurrent.Promise recycleAndGet()
{
io.netty.util.concurrent.Promise v1;
io.netty.util.internal.PendingWrite v0;
v0 := @this: io.netty.util.internal.PendingWrite;
v1 = v0.<io.netty.util.internal.PendingWrite: io.netty.util.concurrent.Promise promise>;
virtualinvoke v0.<io.netty.util.internal.PendingWrite: boolean recycle()>();
return v1;
}
static void <clinit>()
{
io.netty.util.internal.ObjectPool v1;
io.netty.util.internal.PendingWrite$1 v0;
v0 = new io.netty.util.internal.PendingWrite$1;
specialinvoke v0.<io.netty.util.internal.PendingWrite$1: void <init>()>();
v1 = staticinvoke <io.netty.util.internal.ObjectPool: io.netty.util.internal.ObjectPool newPool(io.netty.util.internal.ObjectPool$ObjectCreator)>(v0);
<io.netty.util.internal.PendingWrite: io.netty.util.internal.ObjectPool RECYCLER> = v1;
return;
}
}