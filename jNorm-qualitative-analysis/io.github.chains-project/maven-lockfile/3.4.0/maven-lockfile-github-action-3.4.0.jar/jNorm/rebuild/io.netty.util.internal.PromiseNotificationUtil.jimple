public final class io.netty.util.internal.PromiseNotificationUtil extends java.lang.Object
{
private void <init>()
{
io.netty.util.internal.PromiseNotificationUtil v0;
v0 := @this: io.netty.util.internal.PromiseNotificationUtil;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static void tryCancel(io.netty.util.concurrent.Promise, io.netty.util.internal.logging.InternalLogger)
{
java.lang.Throwable v3;
io.netty.util.concurrent.Promise v0;
io.netty.util.internal.logging.InternalLogger v1;
boolean v2;
v0 := @parameter0: io.netty.util.concurrent.Promise;
v1 := @parameter1: io.netty.util.internal.logging.InternalLogger;
v2 = interfaceinvoke v0.<io.netty.util.concurrent.Promise: boolean cancel(boolean)>(0);
if v2 != 0 goto label2;
if v1 == null goto label2;
v3 = interfaceinvoke v0.<io.netty.util.concurrent.Promise: java.lang.Throwable cause()>();
if v3 != null goto label1;
interfaceinvoke v1.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object)>("Failed to cancel promise because it has succeeded already: {}", v0);
goto label2;
label1:
interfaceinvoke v1.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Failed to cancel promise because it has failed already: {}, unnotified cause:", v0, v3);
label2:
return;
}
public static void trySuccess(io.netty.util.concurrent.Promise, java.lang.Object, io.netty.util.internal.logging.InternalLogger)
{
java.lang.Throwable v4;
io.netty.util.concurrent.Promise v0;
io.netty.util.internal.logging.InternalLogger v2;
java.lang.Object v1;
boolean v3;
v0 := @parameter0: io.netty.util.concurrent.Promise;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: io.netty.util.internal.logging.InternalLogger;
v3 = interfaceinvoke v0.<io.netty.util.concurrent.Promise: boolean trySuccess(java.lang.Object)>(v1);
if v3 != 0 goto label2;
if v2 == null goto label2;
v4 = interfaceinvoke v0.<io.netty.util.concurrent.Promise: java.lang.Throwable cause()>();
if v4 != null goto label1;
interfaceinvoke v2.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object)>("Failed to mark a promise as success because it has succeeded already: {}", v0);
goto label2;
label1:
interfaceinvoke v2.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Failed to mark a promise as success because it has failed already: {}, unnotified cause:", v0, v4);
label2:
return;
}
public static void tryFailure(io.netty.util.concurrent.Promise, java.lang.Throwable, io.netty.util.internal.logging.InternalLogger)
{
java.lang.Throwable v1, v4;
java.lang.Object[] v6;
io.netty.util.concurrent.Promise v0;
io.netty.util.internal.logging.InternalLogger v2;
java.lang.String v7;
boolean v3, v5;
v0 := @parameter0: io.netty.util.concurrent.Promise;
v1 := @parameter1: java.lang.Throwable;
v2 := @parameter2: io.netty.util.internal.logging.InternalLogger;
v3 = interfaceinvoke v0.<io.netty.util.concurrent.Promise: boolean tryFailure(java.lang.Throwable)>(v1);
if v3 != 0 goto label2;
if v2 == null goto label2;
v4 = interfaceinvoke v0.<io.netty.util.concurrent.Promise: java.lang.Throwable cause()>();
if v4 != null goto label1;
interfaceinvoke v2.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Failed to mark a promise as failure because it has succeeded already: {}", v0, v1);
goto label2;
label1:
v5 = interfaceinvoke v2.<io.netty.util.internal.logging.InternalLogger: boolean isWarnEnabled()>();
if v5 == 0 goto label2;
v6 = newarray (java.lang.Object)[3];
v6[0] = v0;
v7 = staticinvoke <io.netty.util.internal.ThrowableUtil: java.lang.String stackTraceToString(java.lang.Throwable)>(v4);
v6[1] = v7;
v6[2] = v1;
interfaceinvoke v2.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object[])>("Failed to mark a promise as failure because it has failed already: {}, unnotified cause: {}", v6);
label2:
return;
}
}