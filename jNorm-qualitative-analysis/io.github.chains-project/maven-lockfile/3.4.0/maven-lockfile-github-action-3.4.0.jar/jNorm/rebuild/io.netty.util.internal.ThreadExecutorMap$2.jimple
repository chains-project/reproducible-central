class io.netty.util.internal.ThreadExecutorMap$2 extends java.lang.Object implements java.lang.Runnable
{
final io.netty.util.concurrent.EventExecutor val$eventExecutor;
final java.lang.Runnable val$command;
void <init>(io.netty.util.concurrent.EventExecutor, java.lang.Runnable)
{
io.netty.util.concurrent.EventExecutor v1;
io.netty.util.internal.ThreadExecutorMap$2 v0;
java.lang.Runnable v2;
v0 := @this: io.netty.util.internal.ThreadExecutorMap$2;
v1 := @parameter0: io.netty.util.concurrent.EventExecutor;
v2 := @parameter1: java.lang.Runnable;
v0.<io.netty.util.internal.ThreadExecutorMap$2: io.netty.util.concurrent.EventExecutor val$eventExecutor> = v1;
v0.<io.netty.util.internal.ThreadExecutorMap$2: java.lang.Runnable val$command> = v2;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void run()
{
io.netty.util.concurrent.EventExecutor v1;
java.lang.Throwable v3;
io.netty.util.internal.ThreadExecutorMap$2 v0;
java.lang.Runnable v2;
v0 := @this: io.netty.util.internal.ThreadExecutorMap$2;
v1 = v0.<io.netty.util.internal.ThreadExecutorMap$2: io.netty.util.concurrent.EventExecutor val$eventExecutor>;
staticinvoke <io.netty.util.internal.ThreadExecutorMap: void setCurrentEventExecutor(io.netty.util.concurrent.EventExecutor)>(v1);
label1:
v2 = v0.<io.netty.util.internal.ThreadExecutorMap$2: java.lang.Runnable val$command>;
interfaceinvoke v2.<java.lang.Runnable: void run()>();
label2:
staticinvoke <io.netty.util.internal.ThreadExecutorMap: void setCurrentEventExecutor(io.netty.util.concurrent.EventExecutor)>(null);
goto label4;
label3:
v3 := @caughtexception;
staticinvoke <io.netty.util.internal.ThreadExecutorMap: void setCurrentEventExecutor(io.netty.util.concurrent.EventExecutor)>(null);
throw v3;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
}