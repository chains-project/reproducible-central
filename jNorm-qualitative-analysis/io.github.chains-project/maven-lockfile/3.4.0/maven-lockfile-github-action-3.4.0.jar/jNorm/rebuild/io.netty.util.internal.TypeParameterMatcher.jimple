public abstract class io.netty.util.internal.TypeParameterMatcher extends java.lang.Object
{
private static final io.netty.util.internal.TypeParameterMatcher NOOP;
public static io.netty.util.internal.TypeParameterMatcher get(java.lang.Class)
{
io.netty.util.internal.TypeParameterMatcher$ReflectiveMatcher v4;
java.util.Map v2;
io.netty.util.internal.InternalThreadLocalMap v1;
java.lang.Class v0;
java.lang.Object v3;
v0 := @parameter0: java.lang.Class;
v1 = staticinvoke <io.netty.util.internal.InternalThreadLocalMap: io.netty.util.internal.InternalThreadLocalMap get()>();
v2 = virtualinvoke v1.<io.netty.util.internal.InternalThreadLocalMap: java.util.Map typeParameterMatcherGetCache()>();
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v0);
if v3 != null goto label3;
if v0 != class "Ljava/lang/Object;" goto label1;
v3 = <io.netty.util.internal.TypeParameterMatcher: io.netty.util.internal.TypeParameterMatcher NOOP>;
goto label2;
label1:
v4 = new io.netty.util.internal.TypeParameterMatcher$ReflectiveMatcher;
specialinvoke v4.<io.netty.util.internal.TypeParameterMatcher$ReflectiveMatcher: void <init>(java.lang.Class)>(v0);
v3 = v4;
label2:
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v0, v3);
label3:
return v3;
}
public static io.netty.util.internal.TypeParameterMatcher find(java.lang.Object, java.lang.Class, java.lang.String)
{
io.netty.util.internal.InternalThreadLocalMap v3;
java.util.HashMap v7;
java.util.Map v4;
java.lang.Class v1, v5, v9;
java.lang.Object v0, v6, v8;
java.lang.String v2;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Class;
v2 := @parameter2: java.lang.String;
v3 = staticinvoke <io.netty.util.internal.InternalThreadLocalMap: io.netty.util.internal.InternalThreadLocalMap get()>();
v4 = virtualinvoke v3.<io.netty.util.internal.InternalThreadLocalMap: java.util.Map typeParameterMatcherFindCache()>();
v5 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v6 = interfaceinvoke v4.<java.util.Map: java.lang.Object get(java.lang.Object)>(v5);
if v6 != null goto label1;
v7 = new java.util.HashMap;
specialinvoke v7.<java.util.HashMap: void <init>()>();
v6 = v7;
interfaceinvoke v4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v5, v7);
label1:
v8 = interfaceinvoke v6.<java.util.Map: java.lang.Object get(java.lang.Object)>(v2);
if v8 != null goto label2;
v9 = staticinvoke <io.netty.util.internal.TypeParameterMatcher: java.lang.Class find0(java.lang.Object,java.lang.Class,java.lang.String)>(v0, v1, v2);
v8 = staticinvoke <io.netty.util.internal.TypeParameterMatcher: io.netty.util.internal.TypeParameterMatcher get(java.lang.Class)>(v9);
interfaceinvoke v6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v2, v8);
label2:
return v8;
}
private static java.lang.Class find0(java.lang.Object, java.lang.Class, java.lang.String)
{
java.lang.IllegalStateException v15;
boolean v14, v18, v21, v22, v23, v25, v26, v29, v31, v33;
java.lang.reflect.Type v17, v20, v24;
java.lang.reflect.Type[] v19;
int v10, v11, v6, v7;
java.lang.String v13, v16, v2;
java.lang.reflect.GenericDeclaration v30, v32;
java.lang.reflect.TypeVariable v12;
java.lang.reflect.TypeVariable[] v9;
java.lang.Class v1, v28, v3, v34, v35, v4, v5, v8;
java.lang.Object v0, v27;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Class;
v2 := @parameter2: java.lang.String;
v3 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v4 = v3;
label01:
v5 = virtualinvoke v4.<java.lang.Class: java.lang.Class getSuperclass()>();
if v5 != v1 goto label13;
v6 = (int) -1;
v7 = v6;
v8 = virtualinvoke v4.<java.lang.Class: java.lang.Class getSuperclass()>();
v9 = virtualinvoke v8.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();
v10 = 0;
label02:
v11 = lengthof v9;
if v10 >= v11 goto label04;
v12 = v9[v10];
v13 = interfaceinvoke v12.<java.lang.reflect.TypeVariable: java.lang.String getName()>();
v14 = virtualinvoke v2.<java.lang.String: boolean equals(java.lang.Object)>(v13);
if v14 == 0 goto label03;
v7 = v10;
goto label04;
label03:
v10 = v10 + 1;
goto label02;
label04:
if v7 >= 0 goto label05;
v15 = new java.lang.IllegalStateException;
v16 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.Class)>(v2, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unknown type parameter \'\u0001\': \u0001");
specialinvoke v15.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v16);
throw v15;
label05:
v17 = virtualinvoke v4.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();
v18 = v17 instanceof java.lang.reflect.ParameterizedType;
if v18 != 0 goto label06;
return class "Ljava/lang/Object;";
label06:
v19 = interfaceinvoke v17.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v20 = v19[v7];
v21 = v20 instanceof java.lang.reflect.ParameterizedType;
if v21 == 0 goto label07;
v20 = interfaceinvoke v20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
label07:
v22 = v20 instanceof java.lang.Class;
if v22 == 0 goto label08;
return v20;
label08:
v23 = v20 instanceof java.lang.reflect.GenericArrayType;
if v23 == 0 goto label10;
v24 = interfaceinvoke v20.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();
v25 = v24 instanceof java.lang.reflect.ParameterizedType;
if v25 == 0 goto label09;
v24 = interfaceinvoke v24.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
label09:
v26 = v24 instanceof java.lang.Class;
if v26 == 0 goto label10;
v27 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(v24, 0);
v28 = virtualinvoke v27.<java.lang.Object: java.lang.Class getClass()>();
return v28;
label10:
v29 = v20 instanceof java.lang.reflect.TypeVariable;
if v29 == 0 goto label12;
v30 = interfaceinvoke v20.<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>();
v31 = v30 instanceof java.lang.Class;
if v31 != 0 goto label11;
return class "Ljava/lang/Object;";
label11:
v4 = v3;
v32 = interfaceinvoke v20.<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>();
v2 = interfaceinvoke v20.<java.lang.reflect.TypeVariable: java.lang.String getName()>();
v33 = virtualinvoke v32.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v3);
if v33 != 0 goto label01;
return class "Ljava/lang/Object;";
label12:
v34 = staticinvoke <io.netty.util.internal.TypeParameterMatcher: java.lang.Class fail(java.lang.Class,java.lang.String)>(v3, v2);
return v34;
label13:
v4 = virtualinvoke v4.<java.lang.Class: java.lang.Class getSuperclass()>();
if v4 != null goto label01;
v35 = staticinvoke <io.netty.util.internal.TypeParameterMatcher: java.lang.Class fail(java.lang.Class,java.lang.String)>(v3, v2);
return v35;
}
private static java.lang.Class fail(java.lang.Class, java.lang.String)
{
java.lang.IllegalStateException v2;
java.lang.Class v0;
java.lang.String v1, v3;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.String;
v2 = new java.lang.IllegalStateException;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.Class)>(v1, v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("cannot determine the type of the type parameter \'\u0001\': \u0001");
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v3);
throw v2;
}
public abstract boolean match(java.lang.Object);
void <init>()
{
io.netty.util.internal.TypeParameterMatcher v0;
v0 := @this: io.netty.util.internal.TypeParameterMatcher;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void <clinit>()
{
io.netty.util.internal.TypeParameterMatcher$1 v0;
v0 = new io.netty.util.internal.TypeParameterMatcher$1;
specialinvoke v0.<io.netty.util.internal.TypeParameterMatcher$1: void <init>()>();
<io.netty.util.internal.TypeParameterMatcher: io.netty.util.internal.TypeParameterMatcher NOOP> = v0;
return;
}
}