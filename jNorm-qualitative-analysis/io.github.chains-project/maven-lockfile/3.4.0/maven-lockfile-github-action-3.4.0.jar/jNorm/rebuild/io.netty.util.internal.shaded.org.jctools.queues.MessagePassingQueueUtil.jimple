public final class io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueueUtil extends java.lang.Object
{
public void <init>()
{
io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueueUtil v0;
v0 := @this: io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueueUtil;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static int drain(io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue, io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Consumer, int)
{
io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue v0;
java.lang.IllegalArgumentException v3, v4;
io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Consumer v1;
int v2, v6;
java.lang.Object v7;
java.lang.String v5;
v0 := @parameter0: io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue;
v1 := @parameter1: io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Consumer;
v2 := @parameter2: int;
if null != v1 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("c is null");
throw v3;
label1:
if v2 >= 0 goto label2;
v4 = new java.lang.IllegalArgumentException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("limit is negative: \u0001");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v4;
label2:
if v2 != 0 goto label3;
return 0;
label3:
v6 = 0;
label4:
if v6 >= v2 goto label5;
v7 = interfaceinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue: java.lang.Object relaxedPoll()>();
if v7 == null goto label5;
interfaceinvoke v1.<io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Consumer: void accept(java.lang.Object)>(v7);
v6 = v6 + 1;
goto label4;
label5:
return v6;
}
public static int drain(io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue, io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Consumer)
{
io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Consumer v1;
io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue v0;
int v3;
java.lang.Object v4;
java.lang.IllegalArgumentException v2;
v0 := @parameter0: io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue;
v1 := @parameter1: io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Consumer;
if null != v1 goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("c is null");
throw v2;
label1:
v3 = 0;
label2:
v4 = interfaceinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue: java.lang.Object relaxedPoll()>();
if v4 == null goto label3;
v3 = v3 + 1;
interfaceinvoke v1.<io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Consumer: void accept(java.lang.Object)>(v4);
goto label2;
label3:
return v3;
}
public static void drain(io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue, io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Consumer, io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$WaitStrategy, io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$ExitCondition)
{
io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue v0;
io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$WaitStrategy v2;
java.lang.IllegalArgumentException v4, v5, v6;
io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Consumer v1;
io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$ExitCondition v3;
int v7;
java.lang.Object v9;
boolean v8;
v0 := @parameter0: io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue;
v1 := @parameter1: io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Consumer;
v2 := @parameter2: io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$WaitStrategy;
v3 := @parameter3: io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$ExitCondition;
if null != v1 goto label1;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("c is null");
throw v4;
label1:
if null != v2 goto label2;
v5 = new java.lang.IllegalArgumentException;
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("wait is null");
throw v5;
label2:
if null != v3 goto label3;
v6 = new java.lang.IllegalArgumentException;
specialinvoke v6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("exit condition is null");
throw v6;
label3:
v7 = 0;
label4:
v8 = interfaceinvoke v3.<io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$ExitCondition: boolean keepRunning()>();
if v8 == 0 goto label6;
v9 = interfaceinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue: java.lang.Object relaxedPoll()>();
if v9 != null goto label5;
v7 = interfaceinvoke v2.<io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$WaitStrategy: int idle(int)>(v7);
goto label4;
label5:
v7 = 0;
interfaceinvoke v1.<io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Consumer: void accept(java.lang.Object)>(v9);
goto label4;
label6:
return;
}
public static void fill(io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue, io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Supplier, io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$WaitStrategy, io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$ExitCondition)
{
io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue v0;
io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$WaitStrategy v2;
java.lang.IllegalArgumentException v4, v5;
io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Supplier v1;
io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$ExitCondition v3;
int v6, v8, v9;
boolean v7;
v0 := @parameter0: io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue;
v1 := @parameter1: io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Supplier;
v2 := @parameter2: io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$WaitStrategy;
v3 := @parameter3: io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$ExitCondition;
if null != v2 goto label1;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("waiter is null");
throw v4;
label1:
if null != v3 goto label2;
v5 = new java.lang.IllegalArgumentException;
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("exit condition is null");
throw v5;
label2:
v6 = 0;
label3:
v7 = interfaceinvoke v3.<io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$ExitCondition: boolean keepRunning()>();
if v7 == 0 goto label5;
v8 = <io.netty.util.internal.shaded.org.jctools.util.PortableJvmInfo: int RECOMENDED_OFFER_BATCH>;
v9 = interfaceinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue: int fill(io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Supplier,int)>(v1, v8);
if v9 != 0 goto label4;
v6 = interfaceinvoke v2.<io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$WaitStrategy: int idle(int)>(v6);
goto label3;
label4:
v6 = 0;
goto label3;
label5:
return;
}
public static int fillBounded(io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue, io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Supplier)
{
io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue v0;
int v2, v3, v4;
io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Supplier v1;
v0 := @parameter0: io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue;
v1 := @parameter1: io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Supplier;
v2 = <io.netty.util.internal.shaded.org.jctools.util.PortableJvmInfo: int RECOMENDED_OFFER_BATCH>;
v3 = interfaceinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue: int capacity()>();
v4 = staticinvoke <io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueueUtil: int fillInBatchesToLimit(io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue,io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Supplier,int,int)>(v0, v1, v2, v3);
return v4;
}
public static int fillInBatchesToLimit(io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue, io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Supplier, int, int)
{
byte v6;
io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue v0;
int v2, v3, v5;
long v4;
io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Supplier v1;
v0 := @parameter0: io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue;
v1 := @parameter1: io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Supplier;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 = 0L;
label1:
v5 = interfaceinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue: int fill(io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Supplier,int)>(v1, v2);
if v5 != 0 goto label2;
return v4;
label2:
v4 = v4 + v5;
v6 = v4 cmp v3;
if v6 <= 0 goto label1;
return v4;
}
public static int fillUnbounded(io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue, io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Supplier)
{
io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue v0;
int v2, v3;
io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Supplier v1;
v0 := @parameter0: io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue;
v1 := @parameter1: io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Supplier;
v2 = <io.netty.util.internal.shaded.org.jctools.util.PortableJvmInfo: int RECOMENDED_OFFER_BATCH>;
v3 = staticinvoke <io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueueUtil: int fillInBatchesToLimit(io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue,io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue$Supplier,int,int)>(v0, v1, v2, 4096);
return v3;
}
}