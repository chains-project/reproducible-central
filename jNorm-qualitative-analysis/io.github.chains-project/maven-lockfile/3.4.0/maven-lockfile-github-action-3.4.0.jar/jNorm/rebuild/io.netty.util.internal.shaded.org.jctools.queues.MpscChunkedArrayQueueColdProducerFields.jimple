abstract class io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueueColdProducerFields extends io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue
{
protected final long maxQueueCapacity;
void <init>(int, int)
{
int v1, v2, v3, v4, v5;
long v6;
io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueueColdProducerFields v0;
v0 := @this: io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueueColdProducerFields;
v1 := @parameter0: int;
v2 := @parameter1: int;
specialinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.BaseMpscLinkedArrayQueue: void <init>(int)>(v1);
staticinvoke <io.netty.util.internal.shaded.org.jctools.util.RangeUtil: int checkGreaterThanOrEqual(int,int,java.lang.String)>(v2, 4, "maxCapacity");
v3 = staticinvoke <io.netty.util.internal.shaded.org.jctools.util.Pow2: int roundToPowerOfTwo(int)>(v1);
v4 = staticinvoke <io.netty.util.internal.shaded.org.jctools.util.Pow2: int roundToPowerOfTwo(int)>(v2);
staticinvoke <io.netty.util.internal.shaded.org.jctools.util.RangeUtil: int checkLessThan(int,int,java.lang.String)>(v3, v4, "initialCapacity");
v5 = staticinvoke <io.netty.util.internal.shaded.org.jctools.util.Pow2: int roundToPowerOfTwo(int)>(v2);
v6 = v5 << 1;
v0.<io.netty.util.internal.shaded.org.jctools.queues.MpscChunkedArrayQueueColdProducerFields: long maxQueueCapacity> = v6;
return;
}
}