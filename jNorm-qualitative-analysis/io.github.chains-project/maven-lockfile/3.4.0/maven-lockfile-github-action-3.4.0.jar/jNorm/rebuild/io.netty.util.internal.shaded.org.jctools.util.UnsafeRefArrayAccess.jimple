public final class io.netty.util.internal.shaded.org.jctools.util.UnsafeRefArrayAccess extends java.lang.Object
{
public static final long REF_ARRAY_BASE;
public static final int REF_ELEMENT_SHIFT;
public void <init>()
{
io.netty.util.internal.shaded.org.jctools.util.UnsafeRefArrayAccess v0;
v0 := @this: io.netty.util.internal.shaded.org.jctools.util.UnsafeRefArrayAccess;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static void spRefElement(java.lang.Object[], long, java.lang.Object)
{
sun.misc.Unsafe v3;
java.lang.Object[] v0;
java.lang.Object v2;
long v1;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: long;
v2 := @parameter2: java.lang.Object;
v3 = <io.netty.util.internal.shaded.org.jctools.util.UnsafeAccess: sun.misc.Unsafe UNSAFE>;
virtualinvoke v3.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(v0, v1, v2);
return;
}
public static void soRefElement(java.lang.Object[], long, java.lang.Object)
{
sun.misc.Unsafe v3;
java.lang.Object[] v0;
java.lang.Object v2;
long v1;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: long;
v2 := @parameter2: java.lang.Object;
v3 = <io.netty.util.internal.shaded.org.jctools.util.UnsafeAccess: sun.misc.Unsafe UNSAFE>;
virtualinvoke v3.<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>(v0, v1, v2);
return;
}
public static java.lang.Object lpRefElement(java.lang.Object[], long)
{
sun.misc.Unsafe v2;
java.lang.Object[] v0;
java.lang.Object v3;
long v1;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: long;
v2 = <io.netty.util.internal.shaded.org.jctools.util.UnsafeAccess: sun.misc.Unsafe UNSAFE>;
v3 = virtualinvoke v2.<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>(v0, v1);
return v3;
}
public static java.lang.Object lvRefElement(java.lang.Object[], long)
{
sun.misc.Unsafe v2;
java.lang.Object[] v0;
java.lang.Object v3;
long v1;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: long;
v2 = <io.netty.util.internal.shaded.org.jctools.util.UnsafeAccess: sun.misc.Unsafe UNSAFE>;
v3 = virtualinvoke v2.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(v0, v1);
return v3;
}
public static long calcRefElementOffset(long)
{
int v2;
long v0, v1, v3, v4;
v0 := @parameter0: long;
v1 = <io.netty.util.internal.shaded.org.jctools.util.UnsafeRefArrayAccess: long REF_ARRAY_BASE>;
v2 = <io.netty.util.internal.shaded.org.jctools.util.UnsafeRefArrayAccess: int REF_ELEMENT_SHIFT>;
v3 = v0 << v2;
v4 = v1 + v3;
return v4;
}
public static long calcCircularRefElementOffset(long, long)
{
int v4;
long v0, v1, v2, v3, v5, v6;
v0 := @parameter0: long;
v1 := @parameter1: long;
v2 = <io.netty.util.internal.shaded.org.jctools.util.UnsafeRefArrayAccess: long REF_ARRAY_BASE>;
v3 = v0 & v1;
v4 = <io.netty.util.internal.shaded.org.jctools.util.UnsafeRefArrayAccess: int REF_ELEMENT_SHIFT>;
v5 = v3 << v4;
v6 = v2 + v5;
return v6;
}
public static java.lang.Object[] allocateRefArray(int)
{
int v0;
java.lang.Object[] v1;
v0 := @parameter0: int;
v1 = newarray (java.lang.Object)[v0];
return v1;
}
static void <clinit>()
{
sun.misc.Unsafe v0, v4;
java.lang.IllegalStateException v2;
int v1, v5;
java.lang.String v3;
v0 = <io.netty.util.internal.shaded.org.jctools.util.UnsafeAccess: sun.misc.Unsafe UNSAFE>;
v1 = virtualinvoke v0.<sun.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[Ljava/lang/Object;");
if 4 != v1 goto label1;
<io.netty.util.internal.shaded.org.jctools.util.UnsafeRefArrayAccess: int REF_ELEMENT_SHIFT> = 2;
goto label3;
label1:
if 8 != v1 goto label2;
<io.netty.util.internal.shaded.org.jctools.util.UnsafeRefArrayAccess: int REF_ELEMENT_SHIFT> = 3;
goto label3;
label2:
v2 = new java.lang.IllegalStateException;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unknown pointer size: \u0001");
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v3);
throw v2;
label3:
v4 = <io.netty.util.internal.shaded.org.jctools.util.UnsafeAccess: sun.misc.Unsafe UNSAFE>;
v5 = virtualinvoke v4.<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[Ljava/lang/Object;");
<io.netty.util.internal.shaded.org.jctools.util.UnsafeRefArrayAccess: long REF_ARRAY_BASE> = v5;
return;
}
}