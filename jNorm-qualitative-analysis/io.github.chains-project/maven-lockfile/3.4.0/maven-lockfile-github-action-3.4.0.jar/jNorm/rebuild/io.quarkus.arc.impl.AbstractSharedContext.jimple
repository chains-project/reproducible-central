abstract class io.quarkus.arc.impl.AbstractSharedContext extends java.lang.Object implements io.quarkus.arc.InjectableContext, io.quarkus.arc.InjectableContext$ContextState
{
protected final io.quarkus.arc.impl.ComputingCache instances;
public void <init>()
{
io.quarkus.arc.impl.ComputingCache v1;
io.quarkus.arc.impl.AbstractSharedContext v0;
v0 := @this: io.quarkus.arc.impl.AbstractSharedContext;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new io.quarkus.arc.impl.ComputingCache;
specialinvoke v1.<io.quarkus.arc.impl.ComputingCache: void <init>()>();
v0.<io.quarkus.arc.impl.AbstractSharedContext: io.quarkus.arc.impl.ComputingCache instances> = v1;
return;
}
public java.lang.Object get(jakarta.enterprise.context.spi.Contextual, jakarta.enterprise.context.spi.CreationalContext)
{
io.quarkus.arc.impl.AbstractSharedContext$1 v7;
io.quarkus.arc.impl.ComputingCache v5;
jakarta.enterprise.context.spi.CreationalContext v2;
jakarta.enterprise.context.spi.Contextual v1;
java.lang.IllegalArgumentException v4;
io.quarkus.arc.impl.AbstractSharedContext v0;
java.lang.Object v8, v9;
java.lang.String v6;
boolean v3;
v0 := @this: io.quarkus.arc.impl.AbstractSharedContext;
v1 := @parameter0: jakarta.enterprise.context.spi.Contextual;
v2 := @parameter1: jakarta.enterprise.context.spi.CreationalContext;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "Contextual must not be null");
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v2, "CreationalContext must not be null");
v3 = staticinvoke <io.quarkus.arc.impl.Scopes: boolean scopeMatches(io.quarkus.arc.InjectableContext,io.quarkus.arc.InjectableBean)>(v0, v1);
if v3 != 0 goto label1;
v4 = staticinvoke <io.quarkus.arc.impl.Scopes: java.lang.IllegalArgumentException scopeDoesNotMatchException(io.quarkus.arc.InjectableContext,io.quarkus.arc.InjectableBean)>(v0, v1);
throw v4;
label1:
v5 = v0.<io.quarkus.arc.impl.AbstractSharedContext: io.quarkus.arc.impl.ComputingCache instances>;
v6 = interfaceinvoke v1.<io.quarkus.arc.InjectableBean: java.lang.String getIdentifier()>();
v7 = new io.quarkus.arc.impl.AbstractSharedContext$1;
specialinvoke v7.<io.quarkus.arc.impl.AbstractSharedContext$1: void <init>(io.quarkus.arc.impl.AbstractSharedContext,io.quarkus.arc.InjectableBean,jakarta.enterprise.context.spi.CreationalContext)>(v0, v1, v2);
v8 = virtualinvoke v5.<io.quarkus.arc.impl.ComputingCache: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Supplier)>(v6, v7);
v9 = interfaceinvoke v8.<io.quarkus.arc.ContextInstanceHandle: java.lang.Object get()>();
return v9;
}
public java.lang.Object get(jakarta.enterprise.context.spi.Contextual)
{
io.quarkus.arc.impl.ComputingCache v4;
jakarta.enterprise.context.spi.Contextual v1;
java.lang.IllegalArgumentException v3;
io.quarkus.arc.impl.AbstractSharedContext v0;
java.lang.Object v6, v7;
java.lang.String v5;
boolean v2;
v0 := @this: io.quarkus.arc.impl.AbstractSharedContext;
v1 := @parameter0: jakarta.enterprise.context.spi.Contextual;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "Contextual must not be null");
v2 = staticinvoke <io.quarkus.arc.impl.Scopes: boolean scopeMatches(io.quarkus.arc.InjectableContext,io.quarkus.arc.InjectableBean)>(v0, v1);
if v2 != 0 goto label1;
v3 = staticinvoke <io.quarkus.arc.impl.Scopes: java.lang.IllegalArgumentException scopeDoesNotMatchException(io.quarkus.arc.InjectableContext,io.quarkus.arc.InjectableBean)>(v0, v1);
throw v3;
label1:
v4 = v0.<io.quarkus.arc.impl.AbstractSharedContext: io.quarkus.arc.impl.ComputingCache instances>;
v5 = interfaceinvoke v1.<io.quarkus.arc.InjectableBean: java.lang.String getIdentifier()>();
v6 = virtualinvoke v4.<io.quarkus.arc.impl.ComputingCache: java.lang.Object getValueIfPresent(java.lang.Object)>(v5);
if v6 == null goto label2;
v7 = interfaceinvoke v6.<io.quarkus.arc.ContextInstanceHandle: java.lang.Object get()>();
goto label3;
label2:
v7 = null;
label3:
return v7;
}
public io.quarkus.arc.InjectableContext$ContextState getState()
{
io.quarkus.arc.impl.AbstractSharedContext v0;
v0 := @this: io.quarkus.arc.impl.AbstractSharedContext;
return v0;
}
public io.quarkus.arc.InjectableContext$ContextState getStateIfActive()
{
io.quarkus.arc.impl.AbstractSharedContext v0;
v0 := @this: io.quarkus.arc.impl.AbstractSharedContext;
return v0;
}
public java.util.Map getContextualInstances()
{
io.quarkus.arc.impl.ComputingCache v1;
java.util.Set v2;
java.util.function.Function v4, v5;
io.quarkus.arc.impl.AbstractSharedContext v0;
java.util.stream.Stream v3;
java.lang.Object v7;
java.util.stream.Collector v6;
v0 := @this: io.quarkus.arc.impl.AbstractSharedContext;
v1 = v0.<io.quarkus.arc.impl.AbstractSharedContext: io.quarkus.arc.impl.ComputingCache instances>;
v2 = virtualinvoke v1.<io.quarkus.arc.impl.ComputingCache: java.util.Set getPresentValues()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.stream.Stream stream()>();
v4 = staticinvoke <io.quarkus.arc.impl.AbstractSharedContext$getBean__2577: java.util.function.Function bootstrap$()>();
v5 = staticinvoke <io.quarkus.arc.impl.AbstractSharedContext$get__2578: java.util.function.Function bootstrap$()>();
v6 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toUnmodifiableMap(java.util.function.Function,java.util.function.Function)>(v4, v5);
v7 = interfaceinvoke v3.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v6);
return v7;
}
public boolean isActive()
{
io.quarkus.arc.impl.AbstractSharedContext v0;
v0 := @this: io.quarkus.arc.impl.AbstractSharedContext;
return 1;
}
public void destroy(jakarta.enterprise.context.spi.Contextual)
{
io.quarkus.arc.impl.ComputingCache v2;
java.lang.Object v4;
java.lang.String v3;
jakarta.enterprise.context.spi.Contextual v1;
io.quarkus.arc.impl.AbstractSharedContext v0;
v0 := @this: io.quarkus.arc.impl.AbstractSharedContext;
v1 := @parameter0: jakarta.enterprise.context.spi.Contextual;
v2 = v0.<io.quarkus.arc.impl.AbstractSharedContext: io.quarkus.arc.impl.ComputingCache instances>;
v3 = interfaceinvoke v1.<io.quarkus.arc.InjectableBean: java.lang.String getIdentifier()>();
v4 = virtualinvoke v2.<io.quarkus.arc.impl.ComputingCache: java.lang.Object remove(java.lang.Object)>(v3);
if v4 == null goto label1;
interfaceinvoke v4.<io.quarkus.arc.ContextInstanceHandle: void destroy()>();
label1:
return;
}
public synchronized void destroy()
{
java.util.Iterator v3, v8;
io.quarkus.arc.InjectableBean v6, v7;
io.quarkus.arc.impl.ComputingCache v1, v11;
java.util.Set v2;
io.quarkus.arc.impl.AbstractSharedContext v0;
java.lang.Object v10, v5;
boolean v4, v9;
v0 := @this: io.quarkus.arc.impl.AbstractSharedContext;
v1 = v0.<io.quarkus.arc.impl.AbstractSharedContext: io.quarkus.arc.impl.ComputingCache instances>;
v2 = virtualinvoke v1.<io.quarkus.arc.impl.ComputingCache: java.util.Set getPresentValues()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = interfaceinvoke v5.<io.quarkus.arc.ContextInstanceHandle: io.quarkus.arc.InjectableBean getBean()>();
v7 = interfaceinvoke v6.<io.quarkus.arc.InjectableBean: io.quarkus.arc.InjectableBean getDeclaringBean()>();
if v7 == null goto label1;
interfaceinvoke v5.<io.quarkus.arc.ContextInstanceHandle: void destroy()>();
interfaceinvoke v3.<java.util.Iterator: void remove()>();
goto label1;
label2:
v8 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label3:
v9 = interfaceinvoke v8.<java.util.Iterator: boolean hasNext()>();
if v9 == 0 goto label4;
v10 = interfaceinvoke v8.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v10.<io.quarkus.arc.ContextInstanceHandle: void destroy()>();
goto label3;
label4:
v11 = v0.<io.quarkus.arc.impl.AbstractSharedContext: io.quarkus.arc.impl.ComputingCache instances>;
virtualinvoke v11.<io.quarkus.arc.impl.ComputingCache: void clear()>();
return;
}
public void destroy(io.quarkus.arc.InjectableContext$ContextState)
{
java.lang.Class v3;
java.lang.String v4, v5;
java.lang.IllegalArgumentException v2;
io.quarkus.arc.impl.AbstractSharedContext v0;
io.quarkus.arc.InjectableContext$ContextState v1;
v0 := @this: io.quarkus.arc.impl.AbstractSharedContext;
v1 := @parameter0: io.quarkus.arc.InjectableContext$ContextState;
if v1 != v0 goto label1;
virtualinvoke v0.<io.quarkus.arc.impl.AbstractSharedContext: void destroy()>();
goto label2;
label1:
v2 = new java.lang.IllegalArgumentException;
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v4 = virtualinvoke v3.<java.lang.Class: java.lang.String getName()>();
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid state: \u0001");
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v2;
label2:
return;
}
private static io.quarkus.arc.ContextInstanceHandle createInstanceHandle(io.quarkus.arc.InjectableBean, jakarta.enterprise.context.spi.CreationalContext)
{
io.quarkus.arc.InjectableBean v0;
java.lang.Object v3;
jakarta.enterprise.context.spi.CreationalContext v1;
io.quarkus.arc.impl.ContextInstanceHandleImpl v2;
v0 := @parameter0: io.quarkus.arc.InjectableBean;
v1 := @parameter1: jakarta.enterprise.context.spi.CreationalContext;
v2 = new io.quarkus.arc.impl.ContextInstanceHandleImpl;
v3 = interfaceinvoke v0.<io.quarkus.arc.InjectableBean: java.lang.Object create(jakarta.enterprise.context.spi.CreationalContext)>(v1);
specialinvoke v2.<io.quarkus.arc.impl.ContextInstanceHandleImpl: void <init>(io.quarkus.arc.InjectableBean,java.lang.Object,jakarta.enterprise.context.spi.CreationalContext)>(v0, v3, v1);
return v2;
}
}