class io.quarkus.arc.impl.CovariantTypes extends java.lang.Object
{
private void <init>()
{
io.quarkus.arc.impl.CovariantTypes v0;
v0 := @this: io.quarkus.arc.impl.CovariantTypes;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static boolean isAssignableFromAtLeastOne(java.lang.reflect.Type, java.lang.reflect.Type[])
{
java.lang.reflect.Type v0, v4;
int v2, v3;
java.lang.reflect.Type[] v1;
boolean v5;
v0 := @parameter0: java.lang.reflect.Type;
v1 := @parameter1: java.lang.reflect.Type[];
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label3;
v4 = v1[v3];
v5 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.Type,java.lang.reflect.Type)>(v0, v4);
if v5 == 0 goto label2;
return 1;
label2:
v3 = v3 + 1;
goto label1;
label3:
return 0;
}
static boolean isAssignableFrom(java.lang.reflect.Type, java.lang.reflect.Type)
{
java.lang.reflect.ParameterizedType v17, v20, v21, v24, v27, v30, v37, v58, v6;
boolean v10, v11, v12, v13, v15, v16, v18, v19, v2, v22, v23, v25, v26, v28, v29, v3, v31, v33, v34, v35, v36, v38, v39, v4, v40, v41, v42, v43, v44, v46, v47, v48, v49, v5, v50, v51, v52, v54, v55, v56, v57, v59, v60, v61, v62, v63, v64, v65, v7, v8, v9;
java.lang.reflect.Type v0, v1;
java.lang.IllegalArgumentException v14, v32, v45, v53, v66, v67;
v0 := @parameter0: java.lang.reflect.Type;
v1 := @parameter1: java.lang.reflect.Type;
v2 = v0 instanceof java.lang.Class;
if v2 == 0 goto label06;
v3 = v1 instanceof java.lang.Class;
if v3 == 0 goto label01;
v4 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.Class,java.lang.Class)>(v0, v1);
return v4;
label01:
v5 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: boolean isParameterizedType(java.lang.Object)>(v1);
if v5 == 0 goto label02;
v6 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: java.lang.reflect.ParameterizedType asParameterizedType(java.lang.Object)>(v1);
v7 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.Class,java.lang.reflect.ParameterizedType)>(v0, v6);
return v7;
label02:
v8 = v1 instanceof java.lang.reflect.TypeVariable;
if v8 == 0 goto label03;
v9 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.Class,java.lang.reflect.TypeVariable)>(v0, v1);
return v9;
label03:
v10 = v1 instanceof java.lang.reflect.WildcardType;
if v10 == 0 goto label04;
v11 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.Class,java.lang.reflect.WildcardType)>(v0, v1);
return v11;
label04:
v12 = v1 instanceof java.lang.reflect.GenericArrayType;
if v12 == 0 goto label05;
v13 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.Class,java.lang.reflect.GenericArrayType)>(v0, v1);
return v13;
label05:
v14 = staticinvoke <io.quarkus.arc.impl.InvariantTypes: java.lang.IllegalArgumentException unknownType(java.lang.reflect.Type)>(v1);
throw v14;
label06:
v15 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: boolean isParameterizedType(java.lang.Object)>(v0);
if v15 == 0 goto label12;
v16 = v1 instanceof java.lang.Class;
if v16 == 0 goto label07;
v17 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: java.lang.reflect.ParameterizedType asParameterizedType(java.lang.Object)>(v0);
v18 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.ParameterizedType,java.lang.Class)>(v17, v1);
return v18;
label07:
v19 = v1 instanceof java.lang.reflect.ParameterizedType;
if v19 == 0 goto label08;
v20 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: java.lang.reflect.ParameterizedType asParameterizedType(java.lang.Object)>(v0);
v21 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: java.lang.reflect.ParameterizedType asParameterizedType(java.lang.Object)>(v1);
v22 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>(v20, v21);
return v22;
label08:
v23 = v1 instanceof java.lang.reflect.TypeVariable;
if v23 == 0 goto label09;
v24 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: java.lang.reflect.ParameterizedType asParameterizedType(java.lang.Object)>(v0);
v25 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.ParameterizedType,java.lang.reflect.TypeVariable)>(v24, v1);
return v25;
label09:
v26 = v1 instanceof java.lang.reflect.WildcardType;
if v26 == 0 goto label10;
v27 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: java.lang.reflect.ParameterizedType asParameterizedType(java.lang.Object)>(v0);
v28 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.ParameterizedType,java.lang.reflect.WildcardType)>(v27, v1);
return v28;
label10:
v29 = v1 instanceof java.lang.reflect.GenericArrayType;
if v29 == 0 goto label11;
v30 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: java.lang.reflect.ParameterizedType asParameterizedType(java.lang.Object)>(v0);
v31 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.ParameterizedType,java.lang.reflect.GenericArrayType)>(v30, v1);
return v31;
label11:
v32 = staticinvoke <io.quarkus.arc.impl.InvariantTypes: java.lang.IllegalArgumentException unknownType(java.lang.reflect.Type)>(v1);
throw v32;
label12:
v33 = v0 instanceof java.lang.reflect.TypeVariable;
if v33 == 0 goto label18;
v34 = v1 instanceof java.lang.Class;
if v34 == 0 goto label13;
v35 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.TypeVariable,java.lang.Class)>(v0, v1);
return v35;
label13:
v36 = v1 instanceof java.lang.reflect.ParameterizedType;
if v36 == 0 goto label14;
v37 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: java.lang.reflect.ParameterizedType asParameterizedType(java.lang.Object)>(v1);
v38 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.TypeVariable,java.lang.reflect.ParameterizedType)>(v0, v37);
return v38;
label14:
v39 = v1 instanceof java.lang.reflect.TypeVariable;
if v39 == 0 goto label15;
v40 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.TypeVariable,java.lang.reflect.TypeVariable)>(v0, v1);
return v40;
label15:
v41 = v1 instanceof java.lang.reflect.WildcardType;
if v41 == 0 goto label16;
v42 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.TypeVariable,java.lang.reflect.WildcardType)>(v0, v1);
return v42;
label16:
v43 = v1 instanceof java.lang.reflect.GenericArrayType;
if v43 == 0 goto label17;
v44 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.TypeVariable,java.lang.reflect.GenericArrayType)>(v0, v1);
return v44;
label17:
v45 = staticinvoke <io.quarkus.arc.impl.InvariantTypes: java.lang.IllegalArgumentException unknownType(java.lang.reflect.Type)>(v1);
throw v45;
label18:
v46 = v0 instanceof java.lang.reflect.WildcardType;
if v46 == 0 goto label22;
v47 = staticinvoke <io.quarkus.arc.impl.Types: boolean isActualType(java.lang.reflect.Type)>(v1);
if v47 == 0 goto label19;
v48 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.WildcardType,java.lang.reflect.Type)>(v0, v1);
return v48;
label19:
v49 = v1 instanceof java.lang.reflect.TypeVariable;
if v49 == 0 goto label20;
v50 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.WildcardType,java.lang.reflect.TypeVariable)>(v0, v1);
return v50;
label20:
v51 = v1 instanceof java.lang.reflect.WildcardType;
if v51 == 0 goto label21;
v52 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.WildcardType,java.lang.reflect.WildcardType)>(v0, v1);
return v52;
label21:
v53 = staticinvoke <io.quarkus.arc.impl.InvariantTypes: java.lang.IllegalArgumentException unknownType(java.lang.reflect.Type)>(v1);
throw v53;
label22:
v54 = v0 instanceof java.lang.reflect.GenericArrayType;
if v54 == 0 goto label28;
v55 = v1 instanceof java.lang.Class;
if v55 == 0 goto label23;
v56 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.GenericArrayType,java.lang.Class)>(v0, v1);
return v56;
label23:
v57 = v1 instanceof java.lang.reflect.ParameterizedType;
if v57 == 0 goto label24;
v58 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: java.lang.reflect.ParameterizedType asParameterizedType(java.lang.Object)>(v1);
v59 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.GenericArrayType,java.lang.reflect.ParameterizedType)>(v0, v58);
return v59;
label24:
v60 = v1 instanceof java.lang.reflect.TypeVariable;
if v60 == 0 goto label25;
v61 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.GenericArrayType,java.lang.reflect.TypeVariable)>(v0, v1);
return v61;
label25:
v62 = v1 instanceof java.lang.reflect.WildcardType;
if v62 == 0 goto label26;
v63 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.GenericArrayType,java.lang.reflect.WildcardType)>(v0, v1);
return v63;
label26:
v64 = v1 instanceof java.lang.reflect.GenericArrayType;
if v64 == 0 goto label27;
v65 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.GenericArrayType,java.lang.reflect.GenericArrayType)>(v0, v1);
return v65;
label27:
v66 = staticinvoke <io.quarkus.arc.impl.InvariantTypes: java.lang.IllegalArgumentException unknownType(java.lang.reflect.Type)>(v1);
throw v66;
label28:
v67 = staticinvoke <io.quarkus.arc.impl.InvariantTypes: java.lang.IllegalArgumentException unknownType(java.lang.reflect.Type)>(v0);
throw v67;
}
private static boolean isAssignableFrom(java.lang.Class, java.lang.Class)
{
java.lang.Class v0, v1, v2, v3;
boolean v4;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Class;
v2 = staticinvoke <io.quarkus.arc.impl.Types: java.lang.Class boxedClass(java.lang.Class)>(v0);
v3 = staticinvoke <io.quarkus.arc.impl.Types: java.lang.Class boxedClass(java.lang.Class)>(v1);
v4 = virtualinvoke v2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v3);
return v4;
}
private static boolean isAssignableFrom(java.lang.Class, java.lang.reflect.ParameterizedType)
{
java.lang.reflect.ParameterizedType v1;
java.lang.Class v0, v2;
boolean v3;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.reflect.ParameterizedType;
v2 = staticinvoke <io.quarkus.arc.impl.Types: java.lang.Class getRawType(java.lang.reflect.Type)>(v1);
v3 = virtualinvoke v0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v2);
return v3;
}
private static boolean isAssignableFrom(java.lang.Class, java.lang.reflect.TypeVariable)
{
java.lang.reflect.Type v5;
java.lang.reflect.TypeVariable v1;
int v3, v4;
java.lang.reflect.Type[] v2;
java.lang.Class v0;
boolean v6;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.reflect.TypeVariable;
v2 = interfaceinvoke v1.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label3;
v5 = v2[v4];
v6 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.Type,java.lang.reflect.Type)>(v0, v5);
if v6 == 0 goto label2;
return 1;
label2:
v4 = v4 + 1;
goto label1;
label3:
return 0;
}
private static boolean isAssignableFrom(java.lang.Class, java.lang.reflect.WildcardType)
{
java.lang.Class v0;
java.lang.reflect.WildcardType v1;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.reflect.WildcardType;
return 0;
}
private static boolean isAssignableFrom(java.lang.Class, java.lang.reflect.GenericArrayType)
{
java.lang.reflect.GenericArrayType v1;
java.lang.reflect.Type v5;
java.lang.Class v0, v4, v6;
boolean v2, v3, v7, v8;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.reflect.GenericArrayType;
v2 = virtualinvoke v0.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Object;");
if v2 != 0 goto label1;
v3 = virtualinvoke v0.<java.lang.Class: boolean isArray()>();
if v3 == 0 goto label2;
v4 = virtualinvoke v0.<java.lang.Class: java.lang.Class getComponentType()>();
v5 = interfaceinvoke v1.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();
v6 = staticinvoke <io.quarkus.arc.impl.Types: java.lang.Class getRawType(java.lang.reflect.Type)>(v5);
v7 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.Class,java.lang.Class)>(v4, v6);
if v7 == 0 goto label2;
label1:
v8 = 1;
goto label3;
label2:
v8 = 0;
label3:
return v8;
}
private static boolean isAssignableFrom(java.lang.reflect.ParameterizedType, java.lang.Class)
{
io.quarkus.arc.impl.HierarchyDiscovery v6;
java.lang.reflect.ParameterizedType v0;
java.lang.reflect.Type v4;
java.lang.Class v1, v2;
boolean v3, v5, v7;
v0 := @parameter0: java.lang.reflect.ParameterizedType;
v1 := @parameter1: java.lang.Class;
v2 = staticinvoke <io.quarkus.arc.impl.Types: java.lang.Class getRawType(java.lang.reflect.Type)>(v0);
v3 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.Class,java.lang.Class)>(v2, v1);
if v3 != 0 goto label1;
return 0;
label1:
v4 = staticinvoke <io.quarkus.arc.impl.Types: java.lang.reflect.Type getCanonicalType(java.lang.Class)>(v1);
v5 = virtualinvoke v4.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v5 != 0 goto label2;
return 1;
label2:
v6 = new io.quarkus.arc.impl.HierarchyDiscovery;
specialinvoke v6.<io.quarkus.arc.impl.HierarchyDiscovery: void <init>(java.lang.reflect.Type)>(v1);
v7 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean matches(java.lang.reflect.ParameterizedType,io.quarkus.arc.impl.HierarchyDiscovery)>(v0, v6);
return v7;
}
private static boolean isAssignableFrom(java.lang.reflect.ParameterizedType, java.lang.reflect.ParameterizedType)
{
io.quarkus.arc.impl.HierarchyDiscovery v6;
java.lang.reflect.ParameterizedType v0, v1;
java.lang.Class v2, v3;
boolean v4, v5, v7;
v0 := @parameter0: java.lang.reflect.ParameterizedType;
v1 := @parameter1: java.lang.reflect.ParameterizedType;
v2 = staticinvoke <io.quarkus.arc.impl.Types: java.lang.Class getRawType(java.lang.reflect.Type)>(v0);
v3 = staticinvoke <io.quarkus.arc.impl.Types: java.lang.Class getRawType(java.lang.reflect.Type)>(v1);
v4 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.Class,java.lang.Class)>(v2, v3);
if v4 != 0 goto label1;
return 0;
label1:
v5 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean matches(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>(v0, v1);
if v5 == 0 goto label2;
return 1;
label2:
v6 = new io.quarkus.arc.impl.HierarchyDiscovery;
specialinvoke v6.<io.quarkus.arc.impl.HierarchyDiscovery: void <init>(java.lang.reflect.Type)>(v1);
v7 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean matches(java.lang.reflect.ParameterizedType,io.quarkus.arc.impl.HierarchyDiscovery)>(v0, v6);
return v7;
}
private static boolean matches(java.lang.reflect.ParameterizedType, io.quarkus.arc.impl.HierarchyDiscovery)
{
java.util.Iterator v3;
java.util.Set v2;
io.quarkus.arc.impl.HierarchyDiscovery v1;
java.lang.reflect.ParameterizedType v0, v7;
java.lang.Object v5;
boolean v4, v6, v8;
v0 := @parameter0: java.lang.reflect.ParameterizedType;
v1 := @parameter1: io.quarkus.arc.impl.HierarchyDiscovery;
v2 = virtualinvoke v1.<io.quarkus.arc.impl.HierarchyDiscovery: java.util.Set getTypeClosure()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: boolean isParameterizedType(java.lang.Object)>(v5);
if v6 == 0 goto label1;
v7 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: java.lang.reflect.ParameterizedType asParameterizedType(java.lang.Object)>(v5);
v8 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean matches(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>(v0, v7);
if v8 == 0 goto label1;
return 1;
label2:
return 0;
}
private static boolean matches(java.lang.reflect.ParameterizedType, java.lang.reflect.ParameterizedType)
{
int v11, v13, v7, v8;
java.lang.String v10;
boolean v15, v17, v20, v4;
java.lang.IllegalArgumentException v9;
java.lang.reflect.ParameterizedType v0, v1;
java.lang.reflect.Type v14, v16, v18, v19;
java.lang.reflect.Type[] v12, v5, v6;
java.lang.Class v2, v3;
v0 := @parameter0: java.lang.reflect.ParameterizedType;
v1 := @parameter1: java.lang.reflect.ParameterizedType;
v2 = staticinvoke <io.quarkus.arc.impl.Types: java.lang.Class getRawType(java.lang.reflect.Type)>(v0);
v3 = staticinvoke <io.quarkus.arc.impl.Types: java.lang.Class getRawType(java.lang.reflect.Type)>(v1);
v4 = virtualinvoke v2.<java.lang.Object: boolean equals(java.lang.Object)>(v3);
if v4 != 0 goto label1;
return 0;
label1:
v5 = interfaceinvoke v0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v6 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v7 = lengthof v5;
v8 = lengthof v6;
if v7 == v8 goto label2;
v9 = new java.lang.IllegalArgumentException;
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>(v0, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalida argument combination: \u0001 and \u0001");
specialinvoke v9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v10);
throw v9;
label2:
v11 = 0;
label3:
v12 = interfaceinvoke v0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v13 = lengthof v12;
if v11 >= v13 goto label6;
v14 = v5[v11];
v15 = v14 instanceof java.lang.reflect.TypeVariable;
if v15 == 0 goto label4;
v16 = v5[v11];
v17 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isTypeRecursiveIn(java.lang.reflect.ParameterizedType,java.lang.reflect.TypeVariable)>(v0, v16);
if v17 != 0 goto label5;
label4:
v18 = v5[v11];
v19 = v6[v11];
v20 = staticinvoke <io.quarkus.arc.impl.InvariantTypes: boolean isAssignableFrom(java.lang.reflect.Type,java.lang.reflect.Type)>(v18, v19);
if v20 != 0 goto label5;
return 0;
label5:
v11 = v11 + 1;
goto label3;
label6:
return 1;
}
private static boolean isTypeRecursiveIn(java.lang.reflect.ParameterizedType, java.lang.reflect.TypeVariable)
{
java.lang.reflect.TypeVariable v1;
java.lang.reflect.ParameterizedType v0, v8;
java.lang.reflect.Type v12, v5;
int v10, v11, v3, v4;
java.lang.reflect.Type[] v2, v9;
boolean v13, v14, v6, v7;
v0 := @parameter0: java.lang.reflect.ParameterizedType;
v1 := @parameter1: java.lang.reflect.TypeVariable;
v2 = staticinvoke <io.quarkus.arc.impl.BeanTypeAssignabilityRules: java.lang.reflect.Type[] getUppermostTypeVariableBounds(java.lang.reflect.TypeVariable)>(v1);
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label6;
v5 = v2[v4];
v6 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: boolean isParameterizedType(java.lang.Object)>(v5);
if v6 == 0 goto label5;
v7 = virtualinvoke v0.<java.lang.Object: boolean equals(java.lang.Object)>(v5);
if v7 == 0 goto label2;
return 1;
label2:
v8 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: java.lang.reflect.ParameterizedType asParameterizedType(java.lang.Object)>(v5);
v9 = interfaceinvoke v8.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v10 = lengthof v9;
v11 = 0;
label3:
if v11 >= v10 goto label5;
v12 = v9[v11];
v13 = v12 instanceof java.lang.reflect.TypeVariable;
if v13 == 0 goto label4;
v14 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isTypeRecursiveIn(java.lang.reflect.ParameterizedType,java.lang.reflect.TypeVariable)>(v8, v12);
if v14 == 0 goto label4;
return 1;
label4:
v11 = v11 + 1;
goto label3;
label5:
v4 = v4 + 1;
goto label1;
label6:
return 0;
}
private static boolean isAssignableFrom(java.lang.reflect.ParameterizedType, java.lang.reflect.TypeVariable)
{
java.lang.reflect.ParameterizedType v0;
java.lang.reflect.Type v5;
java.lang.reflect.TypeVariable v1;
int v3, v4;
java.lang.reflect.Type[] v2;
boolean v6;
v0 := @parameter0: java.lang.reflect.ParameterizedType;
v1 := @parameter1: java.lang.reflect.TypeVariable;
v2 = interfaceinvoke v1.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label3;
v5 = v2[v4];
v6 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.Type,java.lang.reflect.Type)>(v0, v5);
if v6 == 0 goto label2;
return 1;
label2:
v4 = v4 + 1;
goto label1;
label3:
return 0;
}
private static boolean isAssignableFrom(java.lang.reflect.ParameterizedType, java.lang.reflect.WildcardType)
{
java.lang.reflect.ParameterizedType v0;
java.lang.reflect.WildcardType v1;
v0 := @parameter0: java.lang.reflect.ParameterizedType;
v1 := @parameter1: java.lang.reflect.WildcardType;
return 0;
}
private static boolean isAssignableFrom(java.lang.reflect.ParameterizedType, java.lang.reflect.GenericArrayType)
{
java.lang.reflect.GenericArrayType v1;
java.lang.reflect.ParameterizedType v0;
v0 := @parameter0: java.lang.reflect.ParameterizedType;
v1 := @parameter1: java.lang.reflect.GenericArrayType;
return 0;
}
private static boolean isAssignableFrom(java.lang.reflect.TypeVariable, java.lang.Class)
{
java.lang.Class v1;
java.lang.reflect.TypeVariable v0;
v0 := @parameter0: java.lang.reflect.TypeVariable;
v1 := @parameter1: java.lang.Class;
return 0;
}
private static boolean isAssignableFrom(java.lang.reflect.TypeVariable, java.lang.reflect.ParameterizedType)
{
java.lang.reflect.ParameterizedType v1;
java.lang.reflect.TypeVariable v0;
v0 := @parameter0: java.lang.reflect.TypeVariable;
v1 := @parameter1: java.lang.reflect.ParameterizedType;
return 0;
}
private static boolean isAssignableFrom(java.lang.reflect.TypeVariable, java.lang.reflect.TypeVariable)
{
java.lang.reflect.TypeVariable v0, v1;
java.lang.reflect.Type v4, v7;
java.lang.reflect.Type[] v3, v6;
boolean v2, v5, v8;
v0 := @parameter0: java.lang.reflect.TypeVariable;
v1 := @parameter1: java.lang.reflect.TypeVariable;
v2 = virtualinvoke v0.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v2 == 0 goto label1;
return 1;
label1:
v3 = interfaceinvoke v1.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
v4 = v3[0];
v5 = v4 instanceof java.lang.reflect.TypeVariable;
if v5 == 0 goto label2;
v6 = interfaceinvoke v1.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
v7 = v6[0];
v8 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.TypeVariable,java.lang.reflect.TypeVariable)>(v0, v7);
return v8;
label2:
return 0;
}
private static boolean isAssignableFrom(java.lang.reflect.TypeVariable, java.lang.reflect.WildcardType)
{
java.lang.reflect.TypeVariable v0;
java.lang.reflect.WildcardType v1;
v0 := @parameter0: java.lang.reflect.TypeVariable;
v1 := @parameter1: java.lang.reflect.WildcardType;
return 0;
}
private static boolean isAssignableFrom(java.lang.reflect.TypeVariable, java.lang.reflect.GenericArrayType)
{
java.lang.reflect.GenericArrayType v1;
java.lang.reflect.TypeVariable v0;
v0 := @parameter0: java.lang.reflect.TypeVariable;
v1 := @parameter1: java.lang.reflect.GenericArrayType;
return 0;
}
private static boolean isAssignableFrom(java.lang.reflect.WildcardType, java.lang.reflect.Type)
{
java.lang.reflect.WildcardType v0;
java.lang.reflect.Type v1, v3, v8;
int v6;
java.lang.reflect.Type[] v2, v5, v7;
boolean v4, v9;
v0 := @parameter0: java.lang.reflect.WildcardType;
v1 := @parameter1: java.lang.reflect.Type;
v2 = interfaceinvoke v0.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();
v3 = v2[0];
v4 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.Type,java.lang.reflect.Type)>(v3, v1);
if v4 != 0 goto label1;
return 0;
label1:
v5 = interfaceinvoke v0.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();
v6 = lengthof v5;
if v6 <= 0 goto label2;
v7 = interfaceinvoke v0.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();
v8 = v7[0];
v9 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.Type,java.lang.reflect.Type)>(v1, v8);
if v9 != 0 goto label2;
return 0;
label2:
return 1;
}
private static boolean isAssignableFrom(java.lang.reflect.WildcardType, java.lang.reflect.TypeVariable)
{
java.lang.reflect.TypeVariable v1;
java.lang.reflect.WildcardType v0;
java.lang.reflect.Type v5, v8;
int v3;
java.lang.reflect.Type[] v2, v4, v7;
boolean v6, v9;
v0 := @parameter0: java.lang.reflect.WildcardType;
v1 := @parameter1: java.lang.reflect.TypeVariable;
v2 = interfaceinvoke v0.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();
v3 = lengthof v2;
if v3 <= 0 goto label1;
v4 = interfaceinvoke v0.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();
v5 = v4[0];
v6 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.Type,java.lang.reflect.Type)>(v1, v5);
return v6;
label1:
v7 = interfaceinvoke v0.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();
v8 = v7[0];
v9 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.Type,java.lang.reflect.Type)>(v8, v1);
return v9;
}
private static boolean isAssignableFrom(java.lang.reflect.WildcardType, java.lang.reflect.WildcardType)
{
java.lang.reflect.WildcardType v0, v1;
int v10, v17, v8;
boolean v15, v20, v6;
java.lang.reflect.Type v12, v14, v19, v3, v5;
java.lang.reflect.Type[] v11, v13, v16, v18, v2, v4, v7, v9;
v0 := @parameter0: java.lang.reflect.WildcardType;
v1 := @parameter1: java.lang.reflect.WildcardType;
v2 = interfaceinvoke v0.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();
v3 = v2[0];
v4 = interfaceinvoke v1.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();
v5 = v4[0];
v6 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.Type,java.lang.reflect.Type)>(v3, v5);
if v6 != 0 goto label1;
return 0;
label1:
v7 = interfaceinvoke v0.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();
v8 = lengthof v7;
if v8 <= 0 goto label3;
v9 = interfaceinvoke v1.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();
v10 = lengthof v9;
if v10 <= 0 goto label2;
v11 = interfaceinvoke v1.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();
v12 = v11[0];
v13 = interfaceinvoke v0.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();
v14 = v13[0];
v15 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.Type,java.lang.reflect.Type)>(v12, v14);
return v15;
label2:
return 0;
label3:
v16 = interfaceinvoke v1.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();
v17 = lengthof v16;
if v17 <= 0 goto label4;
v18 = interfaceinvoke v0.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();
v19 = v18[0];
v20 = virtualinvoke v19.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Object;");
return v20;
label4:
return 1;
}
private static boolean isAssignableFrom(java.lang.reflect.GenericArrayType, java.lang.Class)
{
java.lang.reflect.GenericArrayType v0;
java.lang.reflect.Type v3;
java.lang.Class v1, v4, v5;
boolean v2, v6, v7;
v0 := @parameter0: java.lang.reflect.GenericArrayType;
v1 := @parameter1: java.lang.Class;
v2 = virtualinvoke v1.<java.lang.Class: boolean isArray()>();
if v2 == 0 goto label1;
v3 = interfaceinvoke v0.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();
v4 = staticinvoke <io.quarkus.arc.impl.Types: java.lang.Class getRawType(java.lang.reflect.Type)>(v3);
v5 = virtualinvoke v1.<java.lang.Class: java.lang.Class getComponentType()>();
v6 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.Class,java.lang.Class)>(v4, v5);
if v6 == 0 goto label1;
v7 = 1;
goto label2;
label1:
v7 = 0;
label2:
return v7;
}
private static boolean isAssignableFrom(java.lang.reflect.GenericArrayType, java.lang.reflect.ParameterizedType)
{
java.lang.reflect.GenericArrayType v0;
java.lang.reflect.ParameterizedType v1;
v0 := @parameter0: java.lang.reflect.GenericArrayType;
v1 := @parameter1: java.lang.reflect.ParameterizedType;
return 0;
}
private static boolean isAssignableFrom(java.lang.reflect.GenericArrayType, java.lang.reflect.TypeVariable)
{
java.lang.reflect.GenericArrayType v0;
java.lang.reflect.TypeVariable v1;
v0 := @parameter0: java.lang.reflect.GenericArrayType;
v1 := @parameter1: java.lang.reflect.TypeVariable;
return 0;
}
private static boolean isAssignableFrom(java.lang.reflect.GenericArrayType, java.lang.reflect.WildcardType)
{
java.lang.reflect.GenericArrayType v0;
java.lang.reflect.WildcardType v1;
v0 := @parameter0: java.lang.reflect.GenericArrayType;
v1 := @parameter1: java.lang.reflect.WildcardType;
return 0;
}
private static boolean isAssignableFrom(java.lang.reflect.GenericArrayType, java.lang.reflect.GenericArrayType)
{
java.lang.reflect.GenericArrayType v0, v1;
java.lang.reflect.Type v2, v3;
boolean v4;
v0 := @parameter0: java.lang.reflect.GenericArrayType;
v1 := @parameter1: java.lang.reflect.GenericArrayType;
v2 = interfaceinvoke v0.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();
v3 = interfaceinvoke v1.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();
v4 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.Type,java.lang.reflect.Type)>(v2, v3);
return v4;
}
}