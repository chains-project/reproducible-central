abstract class io.quarkus.arc.impl.InjectionPointImpl$AnnotatedBase extends java.lang.Object implements jakarta.enterprise.inject.spi.Annotated
{
private final java.lang.reflect.Type baseType;
private final java.util.Set annotations;
void <init>(java.lang.reflect.Type, java.util.Set)
{
io.quarkus.arc.impl.InjectionPointImpl$AnnotatedBase v0;
java.lang.reflect.Type v1;
java.util.Set v2, v3;
v0 := @this: io.quarkus.arc.impl.InjectionPointImpl$AnnotatedBase;
v1 := @parameter0: java.lang.reflect.Type;
v2 := @parameter1: java.util.Set;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.quarkus.arc.impl.InjectionPointImpl$AnnotatedBase: java.lang.reflect.Type baseType> = v1;
v3 = staticinvoke <io.quarkus.arc.impl.CollectionHelpers: java.util.Set toImmutableSmallSet(java.util.Set)>(v2);
v0.<io.quarkus.arc.impl.InjectionPointImpl$AnnotatedBase: java.util.Set annotations> = v3;
return;
}
public java.lang.reflect.Type getBaseType()
{
io.quarkus.arc.impl.InjectionPointImpl$AnnotatedBase v0;
java.lang.reflect.Type v1;
v0 := @this: io.quarkus.arc.impl.InjectionPointImpl$AnnotatedBase;
v1 = v0.<io.quarkus.arc.impl.InjectionPointImpl$AnnotatedBase: java.lang.reflect.Type baseType>;
return v1;
}
public java.util.Set getTypeClosure()
{
java.lang.UnsupportedOperationException v1;
io.quarkus.arc.impl.InjectionPointImpl$AnnotatedBase v0;
v0 := @this: io.quarkus.arc.impl.InjectionPointImpl$AnnotatedBase;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>()>();
throw v1;
}
public java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)
{
java.lang.UnsupportedOperationException v3;
java.util.Iterator v5;
java.util.Set v2, v4;
io.quarkus.arc.impl.InjectionPointImpl$AnnotatedBase v0;
java.lang.Class v1, v8;
java.lang.Object v7;
boolean v6, v9;
v0 := @this: io.quarkus.arc.impl.InjectionPointImpl$AnnotatedBase;
v1 := @parameter0: java.lang.Class;
v2 = v0.<io.quarkus.arc.impl.InjectionPointImpl$AnnotatedBase: java.util.Set annotations>;
if v2 != null goto label1;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>()>();
throw v3;
label1:
v4 = v0.<io.quarkus.arc.impl.InjectionPointImpl$AnnotatedBase: java.util.Set annotations>;
v5 = interfaceinvoke v4.<java.util.Set: java.util.Iterator iterator()>();
label2:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label3;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = interfaceinvoke v7.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();
v9 = virtualinvoke v8.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v9 == 0 goto label2;
return v7;
label3:
return null;
}
public java.util.Set getAnnotations(java.lang.Class)
{
java.lang.UnsupportedOperationException v3;
java.util.Iterator v6;
java.util.Set v2, v5;
java.util.HashSet v4;
io.quarkus.arc.impl.InjectionPointImpl$AnnotatedBase v0;
java.lang.Class v1, v9;
java.lang.Object v8;
boolean v10, v7;
v0 := @this: io.quarkus.arc.impl.InjectionPointImpl$AnnotatedBase;
v1 := @parameter0: java.lang.Class;
v2 = v0.<io.quarkus.arc.impl.InjectionPointImpl$AnnotatedBase: java.util.Set annotations>;
if v2 != null goto label1;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>()>();
throw v3;
label1:
v4 = new java.util.HashSet;
specialinvoke v4.<java.util.HashSet: void <init>()>();
v5 = v0.<io.quarkus.arc.impl.InjectionPointImpl$AnnotatedBase: java.util.Set annotations>;
v6 = interfaceinvoke v5.<java.util.Set: java.util.Iterator iterator()>();
label2:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label3;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = interfaceinvoke v8.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();
v10 = virtualinvoke v9.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v10 == 0 goto label2;
interfaceinvoke v4.<java.util.Set: boolean add(java.lang.Object)>(v8);
goto label2;
label3:
return v4;
}
public java.util.Set getAnnotations()
{
java.lang.UnsupportedOperationException v2;
io.quarkus.arc.impl.InjectionPointImpl$AnnotatedBase v0;
java.util.Set v1, v3;
v0 := @this: io.quarkus.arc.impl.InjectionPointImpl$AnnotatedBase;
v1 = v0.<io.quarkus.arc.impl.InjectionPointImpl$AnnotatedBase: java.util.Set annotations>;
if v1 != null goto label1;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
label1:
v3 = v0.<io.quarkus.arc.impl.InjectionPointImpl$AnnotatedBase: java.util.Set annotations>;
return v3;
}
public boolean isAnnotationPresent(java.lang.Class)
{
io.quarkus.arc.impl.InjectionPointImpl$AnnotatedBase v0;
java.lang.'annotation'.Annotation v2;
java.lang.Class v1;
boolean v3;
v0 := @this: io.quarkus.arc.impl.InjectionPointImpl$AnnotatedBase;
v1 := @parameter0: java.lang.Class;
v2 = virtualinvoke v0.<io.quarkus.arc.impl.InjectionPointImpl$AnnotatedBase: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(v1);
if v2 == null goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
}