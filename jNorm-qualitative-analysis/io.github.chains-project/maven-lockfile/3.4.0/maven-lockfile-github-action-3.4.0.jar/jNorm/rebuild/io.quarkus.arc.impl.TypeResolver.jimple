class io.quarkus.arc.impl.TypeResolver extends java.lang.Object
{
private final java.util.Map resolvedTypeVariables;
public void <init>(java.util.Map)
{
io.quarkus.arc.impl.TypeResolver v0;
java.util.Map v1;
v0 := @this: io.quarkus.arc.impl.TypeResolver;
v1 := @parameter0: java.util.Map;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.quarkus.arc.impl.TypeResolver: java.util.Map resolvedTypeVariables> = v1;
return;
}
public java.lang.reflect.Type resolveType(java.lang.reflect.TypeVariable)
{
java.lang.reflect.TypeVariable v1;
java.util.Map v2;
io.quarkus.arc.impl.TypeResolver v0;
java.lang.Object v3;
v0 := @this: io.quarkus.arc.impl.TypeResolver;
v1 := @parameter0: java.lang.reflect.TypeVariable;
v2 = v0.<io.quarkus.arc.impl.TypeResolver: java.util.Map resolvedTypeVariables>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v3 != null goto label1;
return v1;
label1:
return v3;
}
public java.lang.reflect.Type resolveType(java.lang.reflect.ParameterizedType)
{
int v4, v6, v7;
io.quarkus.arc.impl.TypeResolver v0;
boolean v10, v3, v9;
java.lang.reflect.ParameterizedType v1, v11;
java.lang.reflect.Type v12, v14, v15, v8;
java.lang.reflect.Type[] v2, v5;
io.quarkus.arc.impl.ParameterizedTypeImpl v13;
v0 := @this: io.quarkus.arc.impl.TypeResolver;
v1 := @parameter0: java.lang.reflect.ParameterizedType;
v2 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v3 = 0;
v4 = lengthof v2;
v5 = newarray (java.lang.reflect.Type)[v4];
v6 = 0;
label1:
v7 = lengthof v2;
if v6 >= v7 goto label5;
v8 = v2[v6];
v9 = v8 instanceof java.lang.reflect.TypeVariable;
if v9 == 0 goto label2;
v8 = virtualinvoke v0.<io.quarkus.arc.impl.TypeResolver: java.lang.reflect.Type resolveType(java.lang.reflect.TypeVariable)>(v8);
label2:
v10 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: boolean isParameterizedType(java.lang.Object)>(v8);
if v10 == 0 goto label3;
v11 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: java.lang.reflect.ParameterizedType asParameterizedType(java.lang.Object)>(v8);
v8 = virtualinvoke v0.<io.quarkus.arc.impl.TypeResolver: java.lang.reflect.Type resolveType(java.lang.reflect.ParameterizedType)>(v11);
label3:
v5[v6] = v8;
v12 = v2[v6];
if v12 == v8 goto label4;
v3 = 1;
label4:
v6 = v6 + 1;
goto label1;
label5:
if v3 == 0 goto label6;
v13 = new io.quarkus.arc.impl.ParameterizedTypeImpl;
v14 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
v15 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();
specialinvoke v13.<io.quarkus.arc.impl.ParameterizedTypeImpl: void <init>(java.lang.reflect.Type,java.lang.reflect.Type[],java.lang.reflect.Type)>(v14, v5, v15);
return v13;
label6:
return v1;
}
public java.lang.reflect.Type resolveType(java.lang.reflect.GenericArrayType)
{
java.lang.reflect.GenericArrayType v1;
io.quarkus.arc.impl.GenericArrayTypeImpl v11;
java.lang.reflect.ParameterizedType v6;
java.lang.reflect.Type v2, v3;
io.quarkus.arc.impl.TypeResolver v0;
java.lang.Class v10;
java.lang.Object v9;
boolean v4, v5, v7, v8;
v0 := @this: io.quarkus.arc.impl.TypeResolver;
v1 := @parameter0: java.lang.reflect.GenericArrayType;
v2 = interfaceinvoke v1.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();
v3 = v2;
v4 = v2 instanceof java.lang.reflect.TypeVariable;
if v4 == 0 goto label1;
v3 = virtualinvoke v0.<io.quarkus.arc.impl.TypeResolver: java.lang.reflect.Type resolveType(java.lang.reflect.TypeVariable)>(v2);
label1:
v5 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: boolean isParameterizedType(java.lang.Object)>(v2);
if v5 == 0 goto label2;
v6 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: java.lang.reflect.ParameterizedType asParameterizedType(java.lang.Object)>(v2);
v3 = virtualinvoke v0.<io.quarkus.arc.impl.TypeResolver: java.lang.reflect.Type resolveType(java.lang.reflect.ParameterizedType)>(v6);
label2:
v7 = v2 instanceof java.lang.reflect.GenericArrayType;
if v7 == 0 goto label3;
v3 = virtualinvoke v0.<io.quarkus.arc.impl.TypeResolver: java.lang.reflect.Type resolveType(java.lang.reflect.GenericArrayType)>(v2);
label3:
v8 = v3 instanceof java.lang.Class;
if v8 == 0 goto label4;
v9 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(v3, 0);
v10 = virtualinvoke v9.<java.lang.Object: java.lang.Class getClass()>();
return v10;
label4:
if v3 != v2 goto label5;
return v1;
label5:
v11 = new io.quarkus.arc.impl.GenericArrayTypeImpl;
specialinvoke v11.<io.quarkus.arc.impl.GenericArrayTypeImpl: void <init>(java.lang.reflect.Type)>(v3);
return v11;
}
public java.lang.reflect.Type resolveType(java.lang.reflect.Type)
{
java.lang.reflect.ParameterizedType v3;
java.lang.reflect.Type v1, v4, v6, v8;
io.quarkus.arc.impl.TypeResolver v0;
boolean v2, v5, v7;
v0 := @this: io.quarkus.arc.impl.TypeResolver;
v1 := @parameter0: java.lang.reflect.Type;
v2 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: boolean isParameterizedType(java.lang.Object)>(v1);
if v2 == 0 goto label1;
v3 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: java.lang.reflect.ParameterizedType asParameterizedType(java.lang.Object)>(v1);
v4 = virtualinvoke v0.<io.quarkus.arc.impl.TypeResolver: java.lang.reflect.Type resolveType(java.lang.reflect.ParameterizedType)>(v3);
return v4;
label1:
v5 = v1 instanceof java.lang.reflect.TypeVariable;
if v5 == 0 goto label2;
v6 = virtualinvoke v0.<io.quarkus.arc.impl.TypeResolver: java.lang.reflect.Type resolveType(java.lang.reflect.TypeVariable)>(v1);
return v6;
label2:
v7 = v1 instanceof java.lang.reflect.GenericArrayType;
if v7 == 0 goto label3;
v8 = virtualinvoke v0.<io.quarkus.arc.impl.TypeResolver: java.lang.reflect.Type resolveType(java.lang.reflect.GenericArrayType)>(v1);
return v8;
label3:
return v1;
}
public java.util.Map getResolvedTypeVariables()
{
io.quarkus.arc.impl.TypeResolver v0;
java.util.Map v1;
v0 := @this: io.quarkus.arc.impl.TypeResolver;
v1 = v0.<io.quarkus.arc.impl.TypeResolver: java.util.Map resolvedTypeVariables>;
return v1;
}
}