public class io.quarkus.arc.runtime.ConfigMappingCreator extends java.lang.Object implements io.quarkus.arc.BeanCreator
{
public void <init>()
{
io.quarkus.arc.runtime.ConfigMappingCreator v0;
v0 := @this: io.quarkus.arc.runtime.ConfigMappingCreator;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public java.lang.Object create(io.quarkus.arc.SyntheticCreationalContext)
{
java.lang.IllegalStateException v4;
io.quarkus.arc.SyntheticCreationalContext v1;
java.lang.'annotation'.Annotation[] v2;
org.eclipse.microprofile.config.Config v9;
java.util.Map v5, v7;
java.util.Optional v10;
io.quarkus.arc.runtime.ConfigMappingCreator v0;
java.lang.Object v11, v12, v3, v6, v8;
v0 := @this: io.quarkus.arc.runtime.ConfigMappingCreator;
v1 := @parameter0: io.quarkus.arc.SyntheticCreationalContext;
v2 = newarray (java.lang.'annotation'.Annotation)[0];
v3 = interfaceinvoke v1.<io.quarkus.arc.SyntheticCreationalContext: java.lang.Object getInjectedReference(java.lang.Class,java.lang.'annotation'.Annotation[])>(class "Ljakarta/enterprise/inject/spi/InjectionPoint;", v2);
if v3 != null goto label1;
v4 = new java.lang.IllegalStateException;
specialinvoke v4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No current injection point found");
throw v4;
label1:
v5 = interfaceinvoke v1.<io.quarkus.arc.SyntheticCreationalContext: java.util.Map getParams()>();
v6 = interfaceinvoke v5.<java.util.Map: java.lang.Object get(java.lang.Object)>("type");
v7 = interfaceinvoke v1.<io.quarkus.arc.SyntheticCreationalContext: java.util.Map getParams()>();
v8 = interfaceinvoke v7.<java.util.Map: java.lang.Object get(java.lang.Object)>("prefix");
v9 = staticinvoke <org.eclipse.microprofile.config.ConfigProvider: org.eclipse.microprofile.config.Config getConfig()>();
v10 = staticinvoke <io.quarkus.arc.runtime.ConfigMappingCreator: java.util.Optional getPrefixFromInjectionPoint(jakarta.enterprise.inject.spi.InjectionPoint)>(v3);
v11 = virtualinvoke v10.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(v8);
v12 = virtualinvoke v9.<io.smallrye.config.SmallRyeConfig: java.lang.Object getConfigMapping(java.lang.Class,java.lang.String)>(v6, v11);
return v12;
}
private static java.util.Optional getPrefixFromInjectionPoint(jakarta.enterprise.inject.spi.InjectionPoint)
{
java.lang.String v11, v18, v19, v21, v3, v5, v8, v9;
boolean v10, v15, v17, v20, v4;
java.util.Iterator v14;
jakarta.enterprise.inject.spi.InjectionPoint v0;
java.util.Set v13;
jakarta.enterprise.inject.spi.Annotated v1;
java.lang.'annotation'.Annotation v2, v24, v7;
java.util.Optional v12, v22, v23, v6;
java.lang.Object v16;
v0 := @parameter0: jakarta.enterprise.inject.spi.InjectionPoint;
v1 = interfaceinvoke v0.<jakarta.enterprise.inject.spi.InjectionPoint: jakarta.enterprise.inject.spi.Annotated getAnnotated()>();
if v1 == null goto label2;
v2 = interfaceinvoke v1.<jakarta.enterprise.inject.spi.Annotated: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/smallrye/config/ConfigMapping;");
if v2 == null goto label1;
v3 = interfaceinvoke v2.<io.smallrye.config.ConfigMapping: java.lang.String prefix()>();
v4 = virtualinvoke v3.<java.lang.String: boolean isEmpty()>();
if v4 != 0 goto label1;
v5 = interfaceinvoke v2.<io.smallrye.config.ConfigMapping: java.lang.String prefix()>();
v6 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>(v5);
return v6;
label1:
v7 = interfaceinvoke v1.<jakarta.enterprise.inject.spi.Annotated: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/eclipse/microprofile/config/inject/ConfigProperties;");
if v7 == null goto label2;
v8 = "org.eclipse.microprofile.config.inject.configproperties.unconfiguredprefix";
v9 = interfaceinvoke v7.<org.eclipse.microprofile.config.inject.ConfigProperties: java.lang.String prefix()>();
v10 = virtualinvoke v8.<java.lang.String: boolean equals(java.lang.Object)>(v9);
if v10 != 0 goto label2;
v11 = interfaceinvoke v7.<org.eclipse.microprofile.config.inject.ConfigProperties: java.lang.String prefix()>();
v12 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>(v11);
return v12;
label2:
v13 = interfaceinvoke v0.<jakarta.enterprise.inject.spi.InjectionPoint: java.util.Set getQualifiers()>();
v14 = interfaceinvoke v13.<java.util.Set: java.util.Iterator iterator()>();
label3:
v15 = interfaceinvoke v14.<java.util.Iterator: boolean hasNext()>();
if v15 == 0 goto label4;
v16 = interfaceinvoke v14.<java.util.Iterator: java.lang.Object next()>();
v17 = v16 instanceof org.eclipse.microprofile.config.inject.ConfigProperties;
if v17 == 0 goto label3;
v18 = "org.eclipse.microprofile.config.inject.configproperties.unconfiguredprefix";
v19 = interfaceinvoke v24.<org.eclipse.microprofile.config.inject.ConfigProperties: java.lang.String prefix()>();
v20 = virtualinvoke v18.<java.lang.String: boolean equals(java.lang.Object)>(v19);
if v20 != 0 goto label3;
v21 = interfaceinvoke v24.<org.eclipse.microprofile.config.inject.ConfigProperties: java.lang.String prefix()>();
v22 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>(v21);
return v22;
label4:
v23 = staticinvoke <java.util.Optional: java.util.Optional empty()>();
return v23;
}
}