public class io.quarkus.arc.runtime.LoggerProducer extends java.lang.Object
{
private final java.util.concurrent.ConcurrentMap loggers;
public void <init>()
{
java.util.concurrent.ConcurrentHashMap v1;
io.quarkus.arc.runtime.LoggerProducer v0;
v0 := @this: io.quarkus.arc.runtime.LoggerProducer;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v0.<io.quarkus.arc.runtime.LoggerProducer: java.util.concurrent.ConcurrentMap loggers> = v1;
return;
}
org.jboss.logging.Logger getSimpleLogger(jakarta.enterprise.inject.spi.InjectionPoint)
{
jakarta.enterprise.inject.spi.InjectionPoint v1;
java.lang.reflect.Member v3;
io.quarkus.arc.runtime.LoggerProducer v0;
java.util.function.Function v6;
java.util.concurrent.ConcurrentMap v2;
java.lang.Class v4;
java.lang.Object v7;
java.lang.String v5;
v0 := @this: io.quarkus.arc.runtime.LoggerProducer;
v1 := @parameter0: jakarta.enterprise.inject.spi.InjectionPoint;
v2 = v0.<io.quarkus.arc.runtime.LoggerProducer: java.util.concurrent.ConcurrentMap loggers>;
v3 = interfaceinvoke v1.<jakarta.enterprise.inject.spi.InjectionPoint: java.lang.reflect.Member getMember()>();
v4 = interfaceinvoke v3.<java.lang.reflect.Member: java.lang.Class getDeclaringClass()>();
v5 = virtualinvoke v4.<java.lang.Class: java.lang.String getName()>();
v6 = staticinvoke <io.quarkus.arc.runtime.LoggerProducer$getLogger__2551: java.util.function.Function bootstrap$()>();
v7 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(v5, v6);
return v7;
}
org.jboss.logging.Logger getLoggerWithCustomName(jakarta.enterprise.inject.spi.InjectionPoint)
{
java.lang.IllegalStateException v10;
io.quarkus.arc.runtime.LoggerProducer v0;
java.util.function.Function v13;
java.util.concurrent.ConcurrentMap v12;
java.lang.String v11, v2;
boolean v5, v8, v9;
java.util.Iterator v4;
jakarta.enterprise.inject.spi.InjectionPoint v1;
java.util.Set v3;
java.lang.'annotation'.Annotation v15;
java.lang.Class v7;
java.lang.Object v14, v6;
v0 := @this: io.quarkus.arc.runtime.LoggerProducer;
v1 := @parameter0: jakarta.enterprise.inject.spi.InjectionPoint;
v2 = null;
v3 = interfaceinvoke v1.<jakarta.enterprise.inject.spi.InjectionPoint: java.util.Set getQualifiers()>();
v4 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = interfaceinvoke v6.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();
v8 = virtualinvoke v7.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lio/quarkus/arc/log/LoggerName;");
if v8 == 0 goto label1;
v2 = interfaceinvoke v15.<io.quarkus.arc.log.LoggerName: java.lang.String value()>();
goto label1;
label2:
if v2 == null goto label3;
v9 = virtualinvoke v2.<java.lang.String: boolean isEmpty()>();
if v9 == 0 goto label4;
label3:
v10 = new java.lang.IllegalStateException;
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (jakarta.enterprise.inject.spi.InjectionPoint)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unable to derive the logger name at \u0001");
specialinvoke v10.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v11);
throw v10;
label4:
v12 = v0.<io.quarkus.arc.runtime.LoggerProducer: java.util.concurrent.ConcurrentMap loggers>;
v13 = staticinvoke <io.quarkus.arc.runtime.LoggerProducer$getLogger__2552: java.util.function.Function bootstrap$()>();
v14 = interfaceinvoke v12.<java.util.concurrent.ConcurrentMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(v2, v13);
return v14;
}
void destroy()
{
io.quarkus.arc.runtime.LoggerProducer v0;
java.util.concurrent.ConcurrentMap v1;
v0 := @this: io.quarkus.arc.runtime.LoggerProducer;
v1 = v0.<io.quarkus.arc.runtime.LoggerProducer: java.util.concurrent.ConcurrentMap loggers>;
interfaceinvoke v1.<java.util.concurrent.ConcurrentMap: void clear()>();
return;
}
}