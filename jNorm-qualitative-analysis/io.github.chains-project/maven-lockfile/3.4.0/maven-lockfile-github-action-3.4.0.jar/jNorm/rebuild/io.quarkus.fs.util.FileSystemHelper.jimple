public class io.quarkus.fs.util.FileSystemHelper extends java.lang.Object
{
public void <init>()
{
io.quarkus.fs.util.FileSystemHelper v0;
v0 := @this: io.quarkus.fs.util.FileSystemHelper;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.nio.file.FileSystem openFS(java.nio.file.Path, java.util.Map, java.lang.ClassLoader) throws java.io.IOException
{
java.util.Map v1;
java.lang.ClassLoader v2;
java.nio.file.FileSystem v3;
java.nio.file.Path v0;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: java.util.Map;
v2 := @parameter2: java.lang.ClassLoader;
v3 = staticinvoke <java.nio.file.FileSystems: java.nio.file.FileSystem newFileSystem(java.nio.file.Path,java.lang.ClassLoader)>(v0, v2);
return v3;
}
public static java.nio.file.FileSystem openFS(java.net.URI, java.util.Map, java.lang.ClassLoader) throws java.io.IOException
{
java.util.Map v1;
java.lang.ClassLoader v2;
java.net.URI v0;
java.nio.file.FileSystem v3;
v0 := @parameter0: java.net.URI;
v1 := @parameter1: java.util.Map;
v2 := @parameter2: java.lang.ClassLoader;
v3 = staticinvoke <java.nio.file.FileSystems: java.nio.file.FileSystem newFileSystem(java.net.URI,java.util.Map,java.lang.ClassLoader)>(v0, v1, v2);
return v3;
}
public static java.nio.file.Path ignoreFileWriteability(java.nio.file.Path)
{
java.nio.file.Path v0;
v0 := @parameter0: java.nio.file.Path;
return v0;
}
}