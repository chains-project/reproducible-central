public abstract class io.quarkus.fs.util.base.DelegatingFileSystem extends java.nio.file.FileSystem
{
protected final java.nio.file.FileSystem delegate;
public void <init>(java.nio.file.FileSystem)
{
java.nio.file.FileSystem v1;
io.quarkus.fs.util.base.DelegatingFileSystem v0;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystem;
v1 := @parameter0: java.nio.file.FileSystem;
specialinvoke v0.<java.nio.file.FileSystem: void <init>()>();
v0.<io.quarkus.fs.util.base.DelegatingFileSystem: java.nio.file.FileSystem delegate> = v1;
return;
}
public java.nio.file.spi.FileSystemProvider provider()
{
java.nio.file.FileSystem v1;
java.nio.file.spi.FileSystemProvider v2;
io.quarkus.fs.util.base.DelegatingFileSystem v0;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystem;
v1 = v0.<io.quarkus.fs.util.base.DelegatingFileSystem: java.nio.file.FileSystem delegate>;
v2 = virtualinvoke v1.<java.nio.file.FileSystem: java.nio.file.spi.FileSystemProvider provider()>();
return v2;
}
public void close() throws java.io.IOException
{
java.nio.file.FileSystem v1;
io.quarkus.fs.util.base.DelegatingFileSystem v0;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystem;
v1 = v0.<io.quarkus.fs.util.base.DelegatingFileSystem: java.nio.file.FileSystem delegate>;
virtualinvoke v1.<java.nio.file.FileSystem: void close()>();
return;
}
public boolean isOpen()
{
java.nio.file.FileSystem v1;
boolean v2;
io.quarkus.fs.util.base.DelegatingFileSystem v0;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystem;
v1 = v0.<io.quarkus.fs.util.base.DelegatingFileSystem: java.nio.file.FileSystem delegate>;
v2 = virtualinvoke v1.<java.nio.file.FileSystem: boolean isOpen()>();
return v2;
}
public boolean isReadOnly()
{
java.nio.file.FileSystem v1;
boolean v2;
io.quarkus.fs.util.base.DelegatingFileSystem v0;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystem;
v1 = v0.<io.quarkus.fs.util.base.DelegatingFileSystem: java.nio.file.FileSystem delegate>;
v2 = virtualinvoke v1.<java.nio.file.FileSystem: boolean isReadOnly()>();
return v2;
}
public java.lang.String getSeparator()
{
java.lang.String v2;
java.nio.file.FileSystem v1;
io.quarkus.fs.util.base.DelegatingFileSystem v0;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystem;
v1 = v0.<io.quarkus.fs.util.base.DelegatingFileSystem: java.nio.file.FileSystem delegate>;
v2 = virtualinvoke v1.<java.nio.file.FileSystem: java.lang.String getSeparator()>();
return v2;
}
public java.lang.Iterable getRootDirectories()
{
java.nio.file.FileSystem v1;
java.lang.Iterable v2;
io.quarkus.fs.util.base.DelegatingFileSystem v0;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystem;
v1 = v0.<io.quarkus.fs.util.base.DelegatingFileSystem: java.nio.file.FileSystem delegate>;
v2 = virtualinvoke v1.<java.nio.file.FileSystem: java.lang.Iterable getRootDirectories()>();
return v2;
}
public java.lang.Iterable getFileStores()
{
java.nio.file.FileSystem v1;
java.lang.Iterable v2;
io.quarkus.fs.util.base.DelegatingFileSystem v0;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystem;
v1 = v0.<io.quarkus.fs.util.base.DelegatingFileSystem: java.nio.file.FileSystem delegate>;
v2 = virtualinvoke v1.<java.nio.file.FileSystem: java.lang.Iterable getFileStores()>();
return v2;
}
public java.util.Set supportedFileAttributeViews()
{
java.util.Set v2;
java.nio.file.FileSystem v1;
io.quarkus.fs.util.base.DelegatingFileSystem v0;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystem;
v1 = v0.<io.quarkus.fs.util.base.DelegatingFileSystem: java.nio.file.FileSystem delegate>;
v2 = virtualinvoke v1.<java.nio.file.FileSystem: java.util.Set supportedFileAttributeViews()>();
return v2;
}
public transient java.nio.file.Path getPath(java.lang.String, java.lang.String[])
{
java.lang.String[] v2;
java.lang.String v1;
java.nio.file.FileSystem v3;
java.nio.file.Path v4;
io.quarkus.fs.util.base.DelegatingFileSystem v0;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String[];
v3 = v0.<io.quarkus.fs.util.base.DelegatingFileSystem: java.nio.file.FileSystem delegate>;
v4 = virtualinvoke v3.<java.nio.file.FileSystem: java.nio.file.Path getPath(java.lang.String,java.lang.String[])>(v1, v2);
return v4;
}
public java.nio.file.PathMatcher getPathMatcher(java.lang.String)
{
java.nio.file.PathMatcher v3;
java.lang.String v1;
java.nio.file.FileSystem v2;
io.quarkus.fs.util.base.DelegatingFileSystem v0;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystem;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.quarkus.fs.util.base.DelegatingFileSystem: java.nio.file.FileSystem delegate>;
v3 = virtualinvoke v2.<java.nio.file.FileSystem: java.nio.file.PathMatcher getPathMatcher(java.lang.String)>(v1);
return v3;
}
public java.nio.file.attribute.UserPrincipalLookupService getUserPrincipalLookupService()
{
java.nio.file.attribute.UserPrincipalLookupService v2;
java.nio.file.FileSystem v1;
io.quarkus.fs.util.base.DelegatingFileSystem v0;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystem;
v1 = v0.<io.quarkus.fs.util.base.DelegatingFileSystem: java.nio.file.FileSystem delegate>;
v2 = virtualinvoke v1.<java.nio.file.FileSystem: java.nio.file.attribute.UserPrincipalLookupService getUserPrincipalLookupService()>();
return v2;
}
public java.nio.file.WatchService newWatchService() throws java.io.IOException
{
java.nio.file.WatchService v2;
java.nio.file.FileSystem v1;
io.quarkus.fs.util.base.DelegatingFileSystem v0;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystem;
v1 = v0.<io.quarkus.fs.util.base.DelegatingFileSystem: java.nio.file.FileSystem delegate>;
v2 = virtualinvoke v1.<java.nio.file.FileSystem: java.nio.file.WatchService newWatchService()>();
return v2;
}
public java.lang.String toString()
{
java.lang.String v2;
java.nio.file.FileSystem v1;
io.quarkus.fs.util.base.DelegatingFileSystem v0;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystem;
v1 = v0.<io.quarkus.fs.util.base.DelegatingFileSystem: java.nio.file.FileSystem delegate>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
return v2;
}
public boolean equals(java.lang.Object)
{
java.lang.Class v2, v3;
java.lang.Object v1;
java.nio.file.FileSystem v4, v5;
boolean v6;
io.quarkus.fs.util.base.DelegatingFileSystem v0;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystem;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v1 == null goto label2;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v2 == v3 goto label3;
label2:
return 0;
label3:
v4 = v0.<io.quarkus.fs.util.base.DelegatingFileSystem: java.nio.file.FileSystem delegate>;
v5 = v1.<io.quarkus.fs.util.base.DelegatingFileSystem: java.nio.file.FileSystem delegate>;
v6 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(v4, v5);
return v6;
}
public int hashCode()
{
java.lang.Object[] v1;
int v3;
java.nio.file.FileSystem v2;
io.quarkus.fs.util.base.DelegatingFileSystem v0;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystem;
v1 = newarray (java.lang.Object)[1];
v2 = v0.<io.quarkus.fs.util.base.DelegatingFileSystem: java.nio.file.FileSystem delegate>;
v1[0] = v2;
v3 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>(v1);
return v3;
}
}