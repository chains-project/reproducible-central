public abstract class io.quarkus.fs.util.base.DelegatingFileSystemProvider extends java.nio.file.spi.FileSystemProvider
{
protected final java.nio.file.spi.FileSystemProvider delegate;
protected void <init>(java.nio.file.spi.FileSystemProvider)
{
io.quarkus.fs.util.base.DelegatingFileSystemProvider v0;
java.nio.file.spi.FileSystemProvider v1;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystemProvider;
v1 := @parameter0: java.nio.file.spi.FileSystemProvider;
specialinvoke v0.<java.nio.file.spi.FileSystemProvider: void <init>()>();
v0.<io.quarkus.fs.util.base.DelegatingFileSystemProvider: java.nio.file.spi.FileSystemProvider delegate> = v1;
return;
}
public java.lang.String getScheme()
{
io.quarkus.fs.util.base.DelegatingFileSystemProvider v0;
java.lang.String v2;
java.nio.file.spi.FileSystemProvider v1;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystemProvider;
v1 = v0.<io.quarkus.fs.util.base.DelegatingFileSystemProvider: java.nio.file.spi.FileSystemProvider delegate>;
v2 = virtualinvoke v1.<java.nio.file.spi.FileSystemProvider: java.lang.String getScheme()>();
return v2;
}
public java.nio.file.FileSystem newFileSystem(java.net.URI, java.util.Map) throws java.io.IOException
{
java.util.Map v2;
io.quarkus.fs.util.base.DelegatingFileSystemProvider v0;
java.net.URI v1;
java.nio.file.FileSystem v4;
java.nio.file.spi.FileSystemProvider v3;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystemProvider;
v1 := @parameter0: java.net.URI;
v2 := @parameter1: java.util.Map;
v3 = v0.<io.quarkus.fs.util.base.DelegatingFileSystemProvider: java.nio.file.spi.FileSystemProvider delegate>;
v4 = virtualinvoke v3.<java.nio.file.spi.FileSystemProvider: java.nio.file.FileSystem newFileSystem(java.net.URI,java.util.Map)>(v1, v2);
return v4;
}
public java.nio.file.FileSystem getFileSystem(java.net.URI)
{
io.quarkus.fs.util.base.DelegatingFileSystemProvider v0;
java.net.URI v1;
java.nio.file.FileSystem v3;
java.nio.file.spi.FileSystemProvider v2;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystemProvider;
v1 := @parameter0: java.net.URI;
v2 = v0.<io.quarkus.fs.util.base.DelegatingFileSystemProvider: java.nio.file.spi.FileSystemProvider delegate>;
v3 = virtualinvoke v2.<java.nio.file.spi.FileSystemProvider: java.nio.file.FileSystem getFileSystem(java.net.URI)>(v1);
return v3;
}
public java.nio.file.Path getPath(java.net.URI)
{
io.quarkus.fs.util.base.DelegatingFileSystemProvider v0;
java.net.URI v1;
java.nio.file.spi.FileSystemProvider v2;
java.nio.file.Path v3;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystemProvider;
v1 := @parameter0: java.net.URI;
v2 = v0.<io.quarkus.fs.util.base.DelegatingFileSystemProvider: java.nio.file.spi.FileSystemProvider delegate>;
v3 = virtualinvoke v2.<java.nio.file.spi.FileSystemProvider: java.nio.file.Path getPath(java.net.URI)>(v1);
return v3;
}
public java.nio.file.FileSystem newFileSystem(java.nio.file.Path, java.util.Map) throws java.io.IOException
{
java.util.Map v2;
io.quarkus.fs.util.base.DelegatingFileSystemProvider v0;
java.nio.file.FileSystem v5;
java.nio.file.spi.FileSystemProvider v3;
java.nio.file.Path v1, v4;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystemProvider;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.util.Map;
v3 = v0.<io.quarkus.fs.util.base.DelegatingFileSystemProvider: java.nio.file.spi.FileSystemProvider delegate>;
v4 = staticinvoke <io.quarkus.fs.util.base.DelegatingPath: java.nio.file.Path unwrap(java.nio.file.Path)>(v1);
v5 = virtualinvoke v3.<java.nio.file.spi.FileSystemProvider: java.nio.file.FileSystem newFileSystem(java.nio.file.Path,java.util.Map)>(v4, v2);
return v5;
}
public transient java.io.InputStream newInputStream(java.nio.file.Path, java.nio.file.OpenOption[]) throws java.io.IOException
{
java.nio.file.OpenOption[] v2;
io.quarkus.fs.util.base.DelegatingFileSystemProvider v0;
java.nio.file.spi.FileSystemProvider v3;
java.nio.file.Path v1, v4;
java.io.InputStream v5;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystemProvider;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.OpenOption[];
v3 = v0.<io.quarkus.fs.util.base.DelegatingFileSystemProvider: java.nio.file.spi.FileSystemProvider delegate>;
v4 = staticinvoke <io.quarkus.fs.util.base.DelegatingPath: java.nio.file.Path unwrap(java.nio.file.Path)>(v1);
v5 = virtualinvoke v3.<java.nio.file.spi.FileSystemProvider: java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])>(v4, v2);
return v5;
}
public transient java.io.OutputStream newOutputStream(java.nio.file.Path, java.nio.file.OpenOption[]) throws java.io.IOException
{
java.io.OutputStream v5;
java.nio.file.OpenOption[] v2;
io.quarkus.fs.util.base.DelegatingFileSystemProvider v0;
java.nio.file.spi.FileSystemProvider v3;
java.nio.file.Path v1, v4;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystemProvider;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.OpenOption[];
v3 = v0.<io.quarkus.fs.util.base.DelegatingFileSystemProvider: java.nio.file.spi.FileSystemProvider delegate>;
v4 = staticinvoke <io.quarkus.fs.util.base.DelegatingPath: java.nio.file.Path unwrap(java.nio.file.Path)>(v1);
v5 = virtualinvoke v3.<java.nio.file.spi.FileSystemProvider: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])>(v4, v2);
return v5;
}
public transient java.nio.channels.FileChannel newFileChannel(java.nio.file.Path, java.util.Set, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException
{
java.nio.file.attribute.FileAttribute[] v3;
java.util.Set v2;
io.quarkus.fs.util.base.DelegatingFileSystemProvider v0;
java.nio.file.spi.FileSystemProvider v4;
java.nio.channels.FileChannel v6;
java.nio.file.Path v1, v5;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystemProvider;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.util.Set;
v3 := @parameter2: java.nio.file.attribute.FileAttribute[];
v4 = v0.<io.quarkus.fs.util.base.DelegatingFileSystemProvider: java.nio.file.spi.FileSystemProvider delegate>;
v5 = staticinvoke <io.quarkus.fs.util.base.DelegatingPath: java.nio.file.Path unwrap(java.nio.file.Path)>(v1);
v6 = virtualinvoke v4.<java.nio.file.spi.FileSystemProvider: java.nio.channels.FileChannel newFileChannel(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute[])>(v5, v2, v3);
return v6;
}
public transient java.nio.channels.AsynchronousFileChannel newAsynchronousFileChannel(java.nio.file.Path, java.util.Set, java.util.concurrent.ExecutorService, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException
{
java.util.Set v2;
java.nio.channels.AsynchronousFileChannel v7;
java.nio.file.spi.FileSystemProvider v5;
java.nio.file.attribute.FileAttribute[] v4;
io.quarkus.fs.util.base.DelegatingFileSystemProvider v0;
java.nio.file.Path v1, v6;
java.util.concurrent.ExecutorService v3;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystemProvider;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.util.Set;
v3 := @parameter2: java.util.concurrent.ExecutorService;
v4 := @parameter3: java.nio.file.attribute.FileAttribute[];
v5 = v0.<io.quarkus.fs.util.base.DelegatingFileSystemProvider: java.nio.file.spi.FileSystemProvider delegate>;
v6 = staticinvoke <io.quarkus.fs.util.base.DelegatingPath: java.nio.file.Path unwrap(java.nio.file.Path)>(v1);
v7 = virtualinvoke v5.<java.nio.file.spi.FileSystemProvider: java.nio.channels.AsynchronousFileChannel newAsynchronousFileChannel(java.nio.file.Path,java.util.Set,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute[])>(v6, v2, v3, v4);
return v7;
}
public transient java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path, java.util.Set, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException
{
java.nio.channels.SeekableByteChannel v6;
java.nio.file.attribute.FileAttribute[] v3;
java.util.Set v2;
io.quarkus.fs.util.base.DelegatingFileSystemProvider v0;
java.nio.file.spi.FileSystemProvider v4;
java.nio.file.Path v1, v5;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystemProvider;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.util.Set;
v3 := @parameter2: java.nio.file.attribute.FileAttribute[];
v4 = v0.<io.quarkus.fs.util.base.DelegatingFileSystemProvider: java.nio.file.spi.FileSystemProvider delegate>;
v5 = staticinvoke <io.quarkus.fs.util.base.DelegatingPath: java.nio.file.Path unwrap(java.nio.file.Path)>(v1);
v6 = virtualinvoke v4.<java.nio.file.spi.FileSystemProvider: java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute[])>(v5, v2, v3);
return v6;
}
public java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path, java.nio.file.DirectoryStream$Filter) throws java.io.IOException
{
java.nio.file.DirectoryStream v5;
java.nio.file.DirectoryStream$Filter v2;
io.quarkus.fs.util.base.DelegatingFileSystemProvider v0;
java.nio.file.spi.FileSystemProvider v3;
java.nio.file.Path v1, v4;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystemProvider;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.DirectoryStream$Filter;
v3 = v0.<io.quarkus.fs.util.base.DelegatingFileSystemProvider: java.nio.file.spi.FileSystemProvider delegate>;
v4 = staticinvoke <io.quarkus.fs.util.base.DelegatingPath: java.nio.file.Path unwrap(java.nio.file.Path)>(v1);
v5 = virtualinvoke v3.<java.nio.file.spi.FileSystemProvider: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path,java.nio.file.DirectoryStream$Filter)>(v4, v2);
return v5;
}
public transient void createDirectory(java.nio.file.Path, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException
{
java.nio.file.attribute.FileAttribute[] v2;
io.quarkus.fs.util.base.DelegatingFileSystemProvider v0;
java.nio.file.spi.FileSystemProvider v3;
java.nio.file.Path v1, v4;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystemProvider;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.attribute.FileAttribute[];
v3 = v0.<io.quarkus.fs.util.base.DelegatingFileSystemProvider: java.nio.file.spi.FileSystemProvider delegate>;
v4 = staticinvoke <io.quarkus.fs.util.base.DelegatingPath: java.nio.file.Path unwrap(java.nio.file.Path)>(v1);
virtualinvoke v3.<java.nio.file.spi.FileSystemProvider: void createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>(v4, v2);
return;
}
public transient void createSymbolicLink(java.nio.file.Path, java.nio.file.Path, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException
{
java.nio.file.attribute.FileAttribute[] v3;
io.quarkus.fs.util.base.DelegatingFileSystemProvider v0;
java.nio.file.spi.FileSystemProvider v4;
java.nio.file.Path v1, v2, v5, v6;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystemProvider;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.Path;
v3 := @parameter2: java.nio.file.attribute.FileAttribute[];
v4 = v0.<io.quarkus.fs.util.base.DelegatingFileSystemProvider: java.nio.file.spi.FileSystemProvider delegate>;
v5 = staticinvoke <io.quarkus.fs.util.base.DelegatingPath: java.nio.file.Path unwrap(java.nio.file.Path)>(v1);
v6 = staticinvoke <io.quarkus.fs.util.base.DelegatingPath: java.nio.file.Path unwrap(java.nio.file.Path)>(v2);
virtualinvoke v4.<java.nio.file.spi.FileSystemProvider: void createSymbolicLink(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>(v5, v6, v3);
return;
}
public void createLink(java.nio.file.Path, java.nio.file.Path) throws java.io.IOException
{
io.quarkus.fs.util.base.DelegatingFileSystemProvider v0;
java.nio.file.spi.FileSystemProvider v3;
java.nio.file.Path v1, v2, v4, v5;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystemProvider;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.Path;
v3 = v0.<io.quarkus.fs.util.base.DelegatingFileSystemProvider: java.nio.file.spi.FileSystemProvider delegate>;
v4 = staticinvoke <io.quarkus.fs.util.base.DelegatingPath: java.nio.file.Path unwrap(java.nio.file.Path)>(v1);
v5 = staticinvoke <io.quarkus.fs.util.base.DelegatingPath: java.nio.file.Path unwrap(java.nio.file.Path)>(v2);
virtualinvoke v3.<java.nio.file.spi.FileSystemProvider: void createLink(java.nio.file.Path,java.nio.file.Path)>(v4, v5);
return;
}
public void delete(java.nio.file.Path) throws java.io.IOException
{
io.quarkus.fs.util.base.DelegatingFileSystemProvider v0;
java.nio.file.spi.FileSystemProvider v2;
java.nio.file.Path v1, v3;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystemProvider;
v1 := @parameter0: java.nio.file.Path;
v2 = v0.<io.quarkus.fs.util.base.DelegatingFileSystemProvider: java.nio.file.spi.FileSystemProvider delegate>;
v3 = staticinvoke <io.quarkus.fs.util.base.DelegatingPath: java.nio.file.Path unwrap(java.nio.file.Path)>(v1);
virtualinvoke v2.<java.nio.file.spi.FileSystemProvider: void delete(java.nio.file.Path)>(v3);
return;
}
public boolean deleteIfExists(java.nio.file.Path) throws java.io.IOException
{
io.quarkus.fs.util.base.DelegatingFileSystemProvider v0;
java.nio.file.spi.FileSystemProvider v2;
java.nio.file.Path v1, v3;
boolean v4;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystemProvider;
v1 := @parameter0: java.nio.file.Path;
v2 = v0.<io.quarkus.fs.util.base.DelegatingFileSystemProvider: java.nio.file.spi.FileSystemProvider delegate>;
v3 = staticinvoke <io.quarkus.fs.util.base.DelegatingPath: java.nio.file.Path unwrap(java.nio.file.Path)>(v1);
v4 = virtualinvoke v2.<java.nio.file.spi.FileSystemProvider: boolean deleteIfExists(java.nio.file.Path)>(v3);
return v4;
}
public java.nio.file.Path readSymbolicLink(java.nio.file.Path) throws java.io.IOException
{
io.quarkus.fs.util.base.DelegatingFileSystemProvider v0;
java.nio.file.spi.FileSystemProvider v2;
java.nio.file.Path v1, v3;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystemProvider;
v1 := @parameter0: java.nio.file.Path;
v2 = v0.<io.quarkus.fs.util.base.DelegatingFileSystemProvider: java.nio.file.spi.FileSystemProvider delegate>;
v3 = virtualinvoke v2.<java.nio.file.spi.FileSystemProvider: java.nio.file.Path readSymbolicLink(java.nio.file.Path)>(v1);
return v3;
}
public transient void copy(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption[]) throws java.io.IOException
{
java.nio.file.CopyOption[] v3;
io.quarkus.fs.util.base.DelegatingFileSystemProvider v0;
java.nio.file.spi.FileSystemProvider v4;
java.nio.file.Path v1, v2, v5, v6;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystemProvider;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.Path;
v3 := @parameter2: java.nio.file.CopyOption[];
v4 = v0.<io.quarkus.fs.util.base.DelegatingFileSystemProvider: java.nio.file.spi.FileSystemProvider delegate>;
v5 = staticinvoke <io.quarkus.fs.util.base.DelegatingPath: java.nio.file.Path unwrap(java.nio.file.Path)>(v1);
v6 = staticinvoke <io.quarkus.fs.util.base.DelegatingPath: java.nio.file.Path unwrap(java.nio.file.Path)>(v2);
virtualinvoke v4.<java.nio.file.spi.FileSystemProvider: void copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>(v5, v6, v3);
return;
}
public transient void move(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption[]) throws java.io.IOException
{
java.nio.file.CopyOption[] v3;
io.quarkus.fs.util.base.DelegatingFileSystemProvider v0;
java.nio.file.spi.FileSystemProvider v4;
java.nio.file.Path v1, v2, v5, v6;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystemProvider;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.Path;
v3 := @parameter2: java.nio.file.CopyOption[];
v4 = v0.<io.quarkus.fs.util.base.DelegatingFileSystemProvider: java.nio.file.spi.FileSystemProvider delegate>;
v5 = staticinvoke <io.quarkus.fs.util.base.DelegatingPath: java.nio.file.Path unwrap(java.nio.file.Path)>(v1);
v6 = staticinvoke <io.quarkus.fs.util.base.DelegatingPath: java.nio.file.Path unwrap(java.nio.file.Path)>(v2);
virtualinvoke v4.<java.nio.file.spi.FileSystemProvider: void move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>(v5, v6, v3);
return;
}
public boolean isSameFile(java.nio.file.Path, java.nio.file.Path) throws java.io.IOException
{
io.quarkus.fs.util.base.DelegatingFileSystemProvider v0;
java.nio.file.spi.FileSystemProvider v3;
java.nio.file.Path v1, v2, v4, v5;
boolean v6;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystemProvider;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.Path;
v3 = v0.<io.quarkus.fs.util.base.DelegatingFileSystemProvider: java.nio.file.spi.FileSystemProvider delegate>;
v4 = staticinvoke <io.quarkus.fs.util.base.DelegatingPath: java.nio.file.Path unwrap(java.nio.file.Path)>(v1);
v5 = staticinvoke <io.quarkus.fs.util.base.DelegatingPath: java.nio.file.Path unwrap(java.nio.file.Path)>(v2);
v6 = virtualinvoke v3.<java.nio.file.spi.FileSystemProvider: boolean isSameFile(java.nio.file.Path,java.nio.file.Path)>(v4, v5);
return v6;
}
public boolean isHidden(java.nio.file.Path) throws java.io.IOException
{
io.quarkus.fs.util.base.DelegatingFileSystemProvider v0;
java.nio.file.spi.FileSystemProvider v2;
java.nio.file.Path v1, v3;
boolean v4;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystemProvider;
v1 := @parameter0: java.nio.file.Path;
v2 = v0.<io.quarkus.fs.util.base.DelegatingFileSystemProvider: java.nio.file.spi.FileSystemProvider delegate>;
v3 = staticinvoke <io.quarkus.fs.util.base.DelegatingPath: java.nio.file.Path unwrap(java.nio.file.Path)>(v1);
v4 = virtualinvoke v2.<java.nio.file.spi.FileSystemProvider: boolean isHidden(java.nio.file.Path)>(v3);
return v4;
}
public java.nio.file.FileStore getFileStore(java.nio.file.Path) throws java.io.IOException
{
java.nio.file.FileStore v4;
io.quarkus.fs.util.base.DelegatingFileSystemProvider v0;
java.nio.file.spi.FileSystemProvider v2;
java.nio.file.Path v1, v3;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystemProvider;
v1 := @parameter0: java.nio.file.Path;
v2 = v0.<io.quarkus.fs.util.base.DelegatingFileSystemProvider: java.nio.file.spi.FileSystemProvider delegate>;
v3 = staticinvoke <io.quarkus.fs.util.base.DelegatingPath: java.nio.file.Path unwrap(java.nio.file.Path)>(v1);
v4 = virtualinvoke v2.<java.nio.file.spi.FileSystemProvider: java.nio.file.FileStore getFileStore(java.nio.file.Path)>(v3);
return v4;
}
public transient void checkAccess(java.nio.file.Path, java.nio.file.AccessMode[]) throws java.io.IOException
{
io.quarkus.fs.util.base.DelegatingFileSystemProvider v0;
java.nio.file.spi.FileSystemProvider v3;
java.nio.file.Path v1, v4;
java.nio.file.AccessMode[] v2;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystemProvider;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.AccessMode[];
v3 = v0.<io.quarkus.fs.util.base.DelegatingFileSystemProvider: java.nio.file.spi.FileSystemProvider delegate>;
v4 = staticinvoke <io.quarkus.fs.util.base.DelegatingPath: java.nio.file.Path unwrap(java.nio.file.Path)>(v1);
virtualinvoke v3.<java.nio.file.spi.FileSystemProvider: void checkAccess(java.nio.file.Path,java.nio.file.AccessMode[])>(v4, v2);
return;
}
public transient java.nio.file.attribute.FileAttributeView getFileAttributeView(java.nio.file.Path, java.lang.Class, java.nio.file.LinkOption[])
{
java.nio.file.LinkOption[] v3;
java.nio.file.attribute.FileAttributeView v6;
io.quarkus.fs.util.base.DelegatingFileSystemProvider v0;
java.lang.Class v2;
java.nio.file.spi.FileSystemProvider v4;
java.nio.file.Path v1, v5;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystemProvider;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.lang.Class;
v3 := @parameter2: java.nio.file.LinkOption[];
v4 = v0.<io.quarkus.fs.util.base.DelegatingFileSystemProvider: java.nio.file.spi.FileSystemProvider delegate>;
v5 = staticinvoke <io.quarkus.fs.util.base.DelegatingPath: java.nio.file.Path unwrap(java.nio.file.Path)>(v1);
v6 = virtualinvoke v4.<java.nio.file.spi.FileSystemProvider: java.nio.file.attribute.FileAttributeView getFileAttributeView(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>(v5, v2, v3);
return v6;
}
public transient java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path, java.lang.Class, java.nio.file.LinkOption[]) throws java.io.IOException
{
java.nio.file.LinkOption[] v3;
io.quarkus.fs.util.base.DelegatingFileSystemProvider v0;
java.lang.Class v2;
java.nio.file.attribute.BasicFileAttributes v6;
java.nio.file.spi.FileSystemProvider v4;
java.nio.file.Path v1, v5;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystemProvider;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.lang.Class;
v3 := @parameter2: java.nio.file.LinkOption[];
v4 = v0.<io.quarkus.fs.util.base.DelegatingFileSystemProvider: java.nio.file.spi.FileSystemProvider delegate>;
v5 = staticinvoke <io.quarkus.fs.util.base.DelegatingPath: java.nio.file.Path unwrap(java.nio.file.Path)>(v1);
v6 = virtualinvoke v4.<java.nio.file.spi.FileSystemProvider: java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>(v5, v2, v3);
return v6;
}
public transient java.util.Map readAttributes(java.nio.file.Path, java.lang.String, java.nio.file.LinkOption[]) throws java.io.IOException
{
java.nio.file.LinkOption[] v3;
java.util.Map v6;
io.quarkus.fs.util.base.DelegatingFileSystemProvider v0;
java.lang.String v2;
java.nio.file.spi.FileSystemProvider v4;
java.nio.file.Path v1, v5;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystemProvider;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.nio.file.LinkOption[];
v4 = v0.<io.quarkus.fs.util.base.DelegatingFileSystemProvider: java.nio.file.spi.FileSystemProvider delegate>;
v5 = staticinvoke <io.quarkus.fs.util.base.DelegatingPath: java.nio.file.Path unwrap(java.nio.file.Path)>(v1);
v6 = virtualinvoke v4.<java.nio.file.spi.FileSystemProvider: java.util.Map readAttributes(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption[])>(v5, v2, v3);
return v6;
}
public transient void setAttribute(java.nio.file.Path, java.lang.String, java.lang.Object, java.nio.file.LinkOption[]) throws java.io.IOException
{
java.nio.file.LinkOption[] v4;
io.quarkus.fs.util.base.DelegatingFileSystemProvider v0;
java.lang.Object v3;
java.lang.String v2;
java.nio.file.spi.FileSystemProvider v5;
java.nio.file.Path v1, v6;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystemProvider;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.Object;
v4 := @parameter3: java.nio.file.LinkOption[];
v5 = v0.<io.quarkus.fs.util.base.DelegatingFileSystemProvider: java.nio.file.spi.FileSystemProvider delegate>;
v6 = staticinvoke <io.quarkus.fs.util.base.DelegatingPath: java.nio.file.Path unwrap(java.nio.file.Path)>(v1);
virtualinvoke v5.<java.nio.file.spi.FileSystemProvider: void setAttribute(java.nio.file.Path,java.lang.String,java.lang.Object,java.nio.file.LinkOption[])>(v6, v2, v3, v4);
return;
}
public boolean equals(java.lang.Object)
{
io.quarkus.fs.util.base.DelegatingFileSystemProvider v0;
java.lang.Class v2, v3;
java.lang.Object v1;
java.nio.file.spi.FileSystemProvider v4, v5;
boolean v6;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystemProvider;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v1 == null goto label2;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v2 == v3 goto label3;
label2:
return 0;
label3:
v4 = v0.<io.quarkus.fs.util.base.DelegatingFileSystemProvider: java.nio.file.spi.FileSystemProvider delegate>;
v5 = v1.<io.quarkus.fs.util.base.DelegatingFileSystemProvider: java.nio.file.spi.FileSystemProvider delegate>;
v6 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(v4, v5);
return v6;
}
public int hashCode()
{
java.lang.Object[] v1;
int v3;
io.quarkus.fs.util.base.DelegatingFileSystemProvider v0;
java.nio.file.spi.FileSystemProvider v2;
v0 := @this: io.quarkus.fs.util.base.DelegatingFileSystemProvider;
v1 = newarray (java.lang.Object)[1];
v2 = v0.<io.quarkus.fs.util.base.DelegatingFileSystemProvider: java.nio.file.spi.FileSystemProvider delegate>;
v1[0] = v2;
v3 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>(v1);
return v3;
}
}