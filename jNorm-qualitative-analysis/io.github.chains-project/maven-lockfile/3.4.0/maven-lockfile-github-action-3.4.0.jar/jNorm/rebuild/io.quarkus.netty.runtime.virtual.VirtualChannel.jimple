public class io.quarkus.netty.runtime.virtual.VirtualChannel extends io.netty.channel.AbstractChannel
{
private static final io.netty.util.internal.logging.InternalLogger logger;
protected static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater FINISH_READ_FUTURE_UPDATER;
private static final io.netty.channel.ChannelMetadata METADATA;
private static final int MAX_READER_STACK_DEPTH;
private final io.netty.channel.ChannelConfig config;
final java.util.Queue inboundBuffer;
final io.quarkus.netty.runtime.virtual.VirtualClientConnection virtualConnection;
private final java.lang.Runnable readTask;
private final java.lang.Runnable shutdownHook;
protected volatile io.quarkus.netty.runtime.virtual.VirtualChannel$State state;
protected volatile io.quarkus.netty.runtime.virtual.VirtualAddress localAddress;
protected volatile java.net.SocketAddress remoteAddress;
protected volatile io.netty.channel.ChannelPromise connectPromise;
protected volatile boolean readInProgress;
protected volatile boolean writeInProgress;
protected volatile io.netty.util.concurrent.Future finishReadFuture;
static final boolean $assertionsDisabled;
protected void <init>(io.quarkus.netty.runtime.virtual.VirtualServerChannel, io.quarkus.netty.runtime.virtual.VirtualClientConnection)
{
io.quarkus.netty.runtime.virtual.VirtualAddress v11;
io.quarkus.netty.runtime.virtual.VirtualServerChannel v1;
java.net.SocketAddress v12;
io.netty.buffer.ByteBufAllocator v10;
io.quarkus.netty.runtime.virtual.VirtualChannel$2 v6;
io.netty.channel.DefaultChannelConfig v3;
io.quarkus.netty.runtime.virtual.VirtualChannel$1 v5;
io.netty.channel.ChannelConfig v7, v9;
io.netty.channel.PreferHeapByteBufAllocator v8;
io.quarkus.netty.runtime.virtual.VirtualClientConnection v2;
io.quarkus.netty.runtime.virtual.VirtualChannel v0;
java.util.Queue v4;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualChannel;
v1 := @parameter0: io.quarkus.netty.runtime.virtual.VirtualServerChannel;
v2 := @parameter1: io.quarkus.netty.runtime.virtual.VirtualClientConnection;
specialinvoke v0.<io.netty.channel.AbstractChannel: void <init>(io.netty.channel.Channel)>(v1);
v3 = new io.netty.channel.DefaultChannelConfig;
specialinvoke v3.<io.netty.channel.DefaultChannelConfig: void <init>(io.netty.channel.Channel)>(v0);
v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.netty.channel.ChannelConfig config> = v3;
v4 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.Queue newSpscQueue()>();
v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: java.util.Queue inboundBuffer> = v4;
v5 = new io.quarkus.netty.runtime.virtual.VirtualChannel$1;
specialinvoke v5.<io.quarkus.netty.runtime.virtual.VirtualChannel$1: void <init>(io.quarkus.netty.runtime.virtual.VirtualChannel)>(v0);
v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: java.lang.Runnable readTask> = v5;
v6 = new io.quarkus.netty.runtime.virtual.VirtualChannel$2;
specialinvoke v6.<io.quarkus.netty.runtime.virtual.VirtualChannel$2: void <init>(io.quarkus.netty.runtime.virtual.VirtualChannel)>(v0);
v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: java.lang.Runnable shutdownHook> = v6;
v7 = virtualinvoke v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.netty.channel.ChannelConfig config()>();
v8 = new io.netty.channel.PreferHeapByteBufAllocator;
v9 = v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.netty.channel.ChannelConfig config>;
v10 = interfaceinvoke v9.<io.netty.channel.ChannelConfig: io.netty.buffer.ByteBufAllocator getAllocator()>();
specialinvoke v8.<io.netty.channel.PreferHeapByteBufAllocator: void <init>(io.netty.buffer.ByteBufAllocator)>(v10);
interfaceinvoke v7.<io.netty.channel.ChannelConfig: io.netty.channel.ChannelConfig setAllocator(io.netty.buffer.ByteBufAllocator)>(v8);
v11 = virtualinvoke v1.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: io.quarkus.netty.runtime.virtual.VirtualAddress localAddress()>();
v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.quarkus.netty.runtime.virtual.VirtualAddress localAddress> = v11;
v12 = virtualinvoke v2.<io.quarkus.netty.runtime.virtual.VirtualClientConnection: java.net.SocketAddress clientAddress()>();
v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: java.net.SocketAddress remoteAddress> = v12;
v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.quarkus.netty.runtime.virtual.VirtualClientConnection virtualConnection> = v2;
return;
}
public io.netty.channel.ChannelMetadata metadata()
{
io.netty.channel.ChannelMetadata v1;
io.quarkus.netty.runtime.virtual.VirtualChannel v0;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualChannel;
v1 = <io.quarkus.netty.runtime.virtual.VirtualChannel: io.netty.channel.ChannelMetadata METADATA>;
return v1;
}
public io.netty.channel.ChannelConfig config()
{
io.quarkus.netty.runtime.virtual.VirtualChannel v0;
io.netty.channel.ChannelConfig v1;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualChannel;
v1 = v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.netty.channel.ChannelConfig config>;
return v1;
}
public io.quarkus.netty.runtime.virtual.VirtualServerChannel parent()
{
io.netty.channel.Channel v1;
io.quarkus.netty.runtime.virtual.VirtualChannel v0;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualChannel;
v1 = specialinvoke v0.<io.netty.channel.AbstractChannel: io.netty.channel.Channel parent()>();
return v1;
}
public io.quarkus.netty.runtime.virtual.VirtualAddress localAddress()
{
io.quarkus.netty.runtime.virtual.VirtualChannel v0;
java.net.SocketAddress v1;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualChannel;
v1 = specialinvoke v0.<io.netty.channel.AbstractChannel: java.net.SocketAddress localAddress()>();
return v1;
}
public java.net.SocketAddress remoteAddress()
{
io.quarkus.netty.runtime.virtual.VirtualChannel v0;
java.net.SocketAddress v1;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualChannel;
v1 = v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: java.net.SocketAddress remoteAddress>;
return v1;
}
public boolean isOpen()
{
io.quarkus.netty.runtime.virtual.VirtualChannel$State v1, v2;
io.quarkus.netty.runtime.virtual.VirtualChannel v0;
boolean v3;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualChannel;
v1 = v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.quarkus.netty.runtime.virtual.VirtualChannel$State state>;
v2 = <io.quarkus.netty.runtime.virtual.VirtualChannel$State: io.quarkus.netty.runtime.virtual.VirtualChannel$State CLOSED>;
if v1 == v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isActive()
{
io.quarkus.netty.runtime.virtual.VirtualChannel$State v1, v2;
io.quarkus.netty.runtime.virtual.VirtualChannel v0;
boolean v3;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualChannel;
v1 = v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.quarkus.netty.runtime.virtual.VirtualChannel$State state>;
v2 = <io.quarkus.netty.runtime.virtual.VirtualChannel$State: io.quarkus.netty.runtime.virtual.VirtualChannel$State CONNECTED>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
protected io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()
{
io.quarkus.netty.runtime.virtual.VirtualChannel v0;
io.quarkus.netty.runtime.virtual.VirtualChannel$LocalUnsafe v1;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualChannel;
v1 = new io.quarkus.netty.runtime.virtual.VirtualChannel$LocalUnsafe;
specialinvoke v1.<io.quarkus.netty.runtime.virtual.VirtualChannel$LocalUnsafe: void <init>(io.quarkus.netty.runtime.virtual.VirtualChannel)>(v0);
return v1;
}
protected boolean isCompatible(io.netty.channel.EventLoop)
{
io.quarkus.netty.runtime.virtual.VirtualChannel v0;
io.netty.channel.EventLoop v1;
boolean v2;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualChannel;
v1 := @parameter0: io.netty.channel.EventLoop;
v2 = v1 instanceof io.netty.channel.SingleThreadEventLoop;
return v2;
}
protected java.net.SocketAddress localAddress0()
{
io.quarkus.netty.runtime.virtual.VirtualAddress v1;
io.quarkus.netty.runtime.virtual.VirtualChannel v0;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualChannel;
v1 = v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.quarkus.netty.runtime.virtual.VirtualAddress localAddress>;
return v1;
}
protected java.net.SocketAddress remoteAddress0()
{
io.quarkus.netty.runtime.virtual.VirtualChannel v0;
java.net.SocketAddress v1;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualChannel;
v1 = v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: java.net.SocketAddress remoteAddress>;
return v1;
}
protected void doRegister() throws java.lang.Exception
{
io.quarkus.netty.runtime.virtual.VirtualServerChannel v1;
io.quarkus.netty.runtime.virtual.VirtualChannel$State v2;
io.quarkus.netty.runtime.virtual.VirtualChannel v0;
io.netty.channel.EventLoop v3;
java.lang.Runnable v4;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualChannel;
v1 = virtualinvoke v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.quarkus.netty.runtime.virtual.VirtualServerChannel parent()>();
if v1 == null goto label1;
v2 = <io.quarkus.netty.runtime.virtual.VirtualChannel$State: io.quarkus.netty.runtime.virtual.VirtualChannel$State CONNECTED>;
v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.quarkus.netty.runtime.virtual.VirtualChannel$State state> = v2;
label1:
v3 = virtualinvoke v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.netty.channel.EventLoop eventLoop()>();
v4 = v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: java.lang.Runnable shutdownHook>;
virtualinvoke v3.<io.netty.util.concurrent.SingleThreadEventExecutor: void addShutdownHook(java.lang.Runnable)>(v4);
return;
}
protected void doBind(java.net.SocketAddress) throws java.lang.Exception
{
io.quarkus.netty.runtime.virtual.VirtualAddress v2, v3;
java.net.SocketAddress v1;
io.quarkus.netty.runtime.virtual.VirtualChannel$State v4;
io.quarkus.netty.runtime.virtual.VirtualChannel v0;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualChannel;
v1 := @parameter0: java.net.SocketAddress;
v2 = v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.quarkus.netty.runtime.virtual.VirtualAddress localAddress>;
v3 = staticinvoke <io.quarkus.netty.runtime.virtual.VirtualChannelRegistry: io.quarkus.netty.runtime.virtual.VirtualAddress register(io.netty.channel.Channel,io.quarkus.netty.runtime.virtual.VirtualAddress,java.net.SocketAddress)>(v0, v2, v1);
v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.quarkus.netty.runtime.virtual.VirtualAddress localAddress> = v3;
v4 = <io.quarkus.netty.runtime.virtual.VirtualChannel$State: io.quarkus.netty.runtime.virtual.VirtualChannel$State BOUND>;
v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.quarkus.netty.runtime.virtual.VirtualChannel$State state> = v4;
return;
}
protected void doDisconnect() throws java.lang.Exception
{
io.quarkus.netty.runtime.virtual.VirtualChannel v0;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualChannel;
virtualinvoke v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: void doClose()>();
return;
}
protected void doClose() throws java.lang.Exception
{
io.quarkus.netty.runtime.virtual.VirtualAddress v4, v6;
java.lang.Throwable v11;
io.quarkus.netty.runtime.virtual.VirtualServerChannel v5;
java.nio.channels.ClosedChannelException v9;
io.netty.channel.ChannelPromise v8;
io.quarkus.netty.runtime.virtual.VirtualChannel$State v10, v12, v2, v3, v7;
io.quarkus.netty.runtime.virtual.VirtualClientConnection v1;
io.quarkus.netty.runtime.virtual.VirtualChannel v0;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualChannel;
v1 = v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.quarkus.netty.runtime.virtual.VirtualClientConnection virtualConnection>;
v2 = v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.quarkus.netty.runtime.virtual.VirtualChannel$State state>;
label1:
v3 = <io.quarkus.netty.runtime.virtual.VirtualChannel$State: io.quarkus.netty.runtime.virtual.VirtualChannel$State CLOSED>;
if v2 == v3 goto label4;
v4 = v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.quarkus.netty.runtime.virtual.VirtualAddress localAddress>;
if v4 == null goto label3;
v5 = virtualinvoke v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.quarkus.netty.runtime.virtual.VirtualServerChannel parent()>();
if v5 != null goto label2;
v6 = v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.quarkus.netty.runtime.virtual.VirtualAddress localAddress>;
staticinvoke <io.quarkus.netty.runtime.virtual.VirtualChannelRegistry: void unregister(io.quarkus.netty.runtime.virtual.VirtualAddress)>(v6);
label2:
v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.quarkus.netty.runtime.virtual.VirtualAddress localAddress> = null;
label3:
v7 = <io.quarkus.netty.runtime.virtual.VirtualChannel$State: io.quarkus.netty.runtime.virtual.VirtualChannel$State CLOSED>;
v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.quarkus.netty.runtime.virtual.VirtualChannel$State state> = v7;
v8 = v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.netty.channel.ChannelPromise connectPromise>;
if v8 == null goto label4;
v9 = new java.nio.channels.ClosedChannelException;
specialinvoke v9.<java.nio.channels.ClosedChannelException: void <init>()>();
interfaceinvoke v8.<io.netty.channel.ChannelPromise: boolean tryFailure(java.lang.Throwable)>(v9);
v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.netty.channel.ChannelPromise connectPromise> = null;
label4:
if v1 == null goto label5;
virtualinvoke v1.<io.quarkus.netty.runtime.virtual.VirtualClientConnection: void close()>();
label5:
if v2 == null goto label8;
v10 = <io.quarkus.netty.runtime.virtual.VirtualChannel$State: io.quarkus.netty.runtime.virtual.VirtualChannel$State CLOSED>;
if v2 == v10 goto label8;
specialinvoke v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: void releaseInboundBuffers()>();
goto label8;
label6:
v11 := @caughtexception;
if v2 == null goto label7;
v12 = <io.quarkus.netty.runtime.virtual.VirtualChannel$State: io.quarkus.netty.runtime.virtual.VirtualChannel$State CLOSED>;
if v2 == v12 goto label7;
specialinvoke v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: void releaseInboundBuffers()>();
label7:
throw v11;
label8:
return;
catch java.lang.Throwable from label1 to label5 with label6;
}
private void tryClose(boolean)
{
io.netty.channel.ChannelPromise v4;
io.quarkus.netty.runtime.virtual.VirtualChannel v0;
io.netty.channel.Channel$Unsafe v2, v3;
boolean v1;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualChannel;
v1 := @parameter0: boolean;
if v1 == 0 goto label1;
v2 = virtualinvoke v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.netty.channel.Channel$Unsafe unsafe()>();
v3 = virtualinvoke v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.netty.channel.Channel$Unsafe unsafe()>();
v4 = interfaceinvoke v3.<io.netty.channel.Channel$Unsafe: io.netty.channel.ChannelPromise voidPromise()>();
interfaceinvoke v2.<io.netty.channel.Channel$Unsafe: void close(io.netty.channel.ChannelPromise)>(v4);
goto label2;
label1:
specialinvoke v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: void releaseInboundBuffers()>();
label2:
return;
}
protected void doDeregister() throws java.lang.Exception
{
io.quarkus.netty.runtime.virtual.VirtualChannel v0;
io.netty.channel.EventLoop v1;
java.lang.Runnable v2;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualChannel;
v1 = virtualinvoke v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.netty.channel.EventLoop eventLoop()>();
v2 = v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: java.lang.Runnable shutdownHook>;
virtualinvoke v1.<io.netty.util.concurrent.SingleThreadEventExecutor: void removeShutdownHook(java.lang.Runnable)>(v2);
return;
}
protected void readInbound()
{
io.netty.channel.ChannelPipeline v4;
io.netty.channel.Channel$Unsafe v1;
io.netty.channel.RecvByteBufAllocator$Handle v2;
io.netty.channel.ChannelConfig v3;
java.lang.Object v6;
io.quarkus.netty.runtime.virtual.VirtualChannel v0;
java.util.Queue v5;
boolean v7;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualChannel;
v1 = virtualinvoke v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.netty.channel.Channel$Unsafe unsafe()>();
v2 = interfaceinvoke v1.<io.netty.channel.Channel$Unsafe: io.netty.channel.RecvByteBufAllocator$Handle recvBufAllocHandle()>();
v3 = virtualinvoke v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.netty.channel.ChannelConfig config()>();
interfaceinvoke v2.<io.netty.channel.RecvByteBufAllocator$Handle: void reset(io.netty.channel.ChannelConfig)>(v3);
v4 = virtualinvoke v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.netty.channel.ChannelPipeline pipeline()>();
label1:
v5 = v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: java.util.Queue inboundBuffer>;
v6 = interfaceinvoke v5.<java.util.Queue: java.lang.Object poll()>();
if v6 == null goto label2;
interfaceinvoke v4.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireChannelRead(java.lang.Object)>(v6);
v7 = interfaceinvoke v2.<io.netty.channel.RecvByteBufAllocator$Handle: boolean continueReading()>();
if v7 != 0 goto label1;
label2:
interfaceinvoke v4.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireChannelReadComplete()>();
return;
}
protected void doBeginRead() throws java.lang.Exception
{
java.lang.Throwable v11, v15;
io.netty.util.internal.InternalThreadLocalMap v4;
java.lang.Integer v6;
java.lang.Runnable v14;
int v10, v12, v5, v7, v8, v9;
io.quarkus.netty.runtime.virtual.VirtualClientConnection v17;
io.quarkus.netty.runtime.virtual.VirtualChannel v0;
boolean v1, v3;
io.netty.channel.EventLoop v13;
io.netty.util.internal.logging.InternalLogger v16;
java.util.Queue v2;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualChannel;
v1 = v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: boolean readInProgress>;
if v1 == 0 goto label1;
return;
label1:
v2 = v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: java.util.Queue inboundBuffer>;
v3 = interfaceinvoke v2.<java.util.Queue: boolean isEmpty()>();
if v3 == 0 goto label2;
v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: boolean readInProgress> = 1;
return;
label2:
v4 = staticinvoke <io.netty.util.internal.InternalThreadLocalMap: io.netty.util.internal.InternalThreadLocalMap get()>();
v5 = virtualinvoke v4.<io.netty.util.internal.InternalThreadLocalMap: int localChannelReaderStackDepth()>();
v6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v5);
v7 = virtualinvoke v6.<java.lang.Integer: int intValue()>();
if v7 >= 8 goto label6;
v8 = virtualinvoke v6.<java.lang.Integer: int intValue()>();
v9 = v8 + 1;
virtualinvoke v4.<io.netty.util.internal.InternalThreadLocalMap: void setLocalChannelReaderStackDepth(int)>(v9);
label3:
virtualinvoke v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: void readInbound()>();
label4:
v10 = virtualinvoke v6.<java.lang.Integer: int intValue()>();
virtualinvoke v4.<io.netty.util.internal.InternalThreadLocalMap: void setLocalChannelReaderStackDepth(int)>(v10);
goto label9;
label5:
v11 := @caughtexception;
v12 = virtualinvoke v6.<java.lang.Integer: int intValue()>();
virtualinvoke v4.<io.netty.util.internal.InternalThreadLocalMap: void setLocalChannelReaderStackDepth(int)>(v12);
throw v11;
label6:
v13 = virtualinvoke v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.netty.channel.EventLoop eventLoop()>();
v14 = v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: java.lang.Runnable readTask>;
interfaceinvoke v13.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>(v14);
label7:
goto label9;
label8:
v15 := @caughtexception;
v16 = <io.quarkus.netty.runtime.virtual.VirtualChannel: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v16.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Closing Local channels {}-{} because exception occurred!", v0, v15);
virtualinvoke v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.netty.channel.ChannelFuture close()>();
v17 = v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.quarkus.netty.runtime.virtual.VirtualClientConnection virtualConnection>;
virtualinvoke v17.<io.quarkus.netty.runtime.virtual.VirtualClientConnection: void close()>();
staticinvoke <io.netty.util.internal.PlatformDependent: void throwException(java.lang.Throwable)>(v15);
label9:
return;
catch java.lang.Throwable from label3 to label4 with label5;
catch java.lang.Throwable from label6 to label7 with label8;
}
protected void doWrite(io.netty.channel.ChannelOutboundBuffer) throws java.lang.Exception
{
java.lang.Throwable v14, v15;
java.nio.channels.NotYetConnectedException v6;
int[] v2;
int v4, v5;
io.quarkus.netty.runtime.virtual.VirtualChannel$State v3;
io.quarkus.netty.runtime.virtual.VirtualClientConnection v8;
io.quarkus.netty.runtime.virtual.VirtualChannel v0;
boolean v11;
io.quarkus.netty.runtime.virtual.VirtualResponseHandler v12;
java.nio.channels.ClosedChannelException v13, v7, v9;
io.netty.channel.ChannelOutboundBuffer v1;
java.lang.Object v10;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualChannel;
v1 := @parameter0: io.netty.channel.ChannelOutboundBuffer;
v2 = <io.quarkus.netty.runtime.virtual.VirtualChannel$3: int[] $SwitchMap$io$quarkus$netty$runtime$virtual$VirtualChannel$State>;
v3 = v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.quarkus.netty.runtime.virtual.VirtualChannel$State state>;
v4 = virtualinvoke v3.<io.quarkus.netty.runtime.virtual.VirtualChannel$State: int ordinal()>();
v5 = v2[v4];
tableswitch(v5)
{
case 1: goto label01;
case 2: goto label01;
case 3: goto label02;
case 4: goto label03;
default: goto label03;
};
label01:
v6 = new java.nio.channels.NotYetConnectedException;
specialinvoke v6.<java.nio.channels.NotYetConnectedException: void <init>()>();
throw v6;
label02:
v7 = new java.nio.channels.ClosedChannelException;
specialinvoke v7.<java.nio.channels.ClosedChannelException: void <init>()>();
throw v7;
label03:
v8 = v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.quarkus.netty.runtime.virtual.VirtualClientConnection virtualConnection>;
v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: boolean writeInProgress> = 1;
label04:
v9 = null;
label05:
v10 = virtualinvoke v1.<io.netty.channel.ChannelOutboundBuffer: java.lang.Object current()>();
if v10 == null goto label11;
label06:
v11 = virtualinvoke v8.<io.quarkus.netty.runtime.virtual.VirtualClientConnection: boolean isConnected()>();
if v11 == 0 goto label07;
staticinvoke <io.netty.util.ReferenceCountUtil: java.lang.Object retain(java.lang.Object)>(v10);
v12 = v8.<io.quarkus.netty.runtime.virtual.VirtualClientConnection: io.quarkus.netty.runtime.virtual.VirtualResponseHandler handler>;
interfaceinvoke v12.<io.quarkus.netty.runtime.virtual.VirtualResponseHandler: void handleMessage(java.lang.Object)>(v10);
virtualinvoke v1.<io.netty.channel.ChannelOutboundBuffer: boolean remove()>();
goto label05;
label07:
if v9 != null goto label08;
v13 = new java.nio.channels.ClosedChannelException;
specialinvoke v13.<java.nio.channels.ClosedChannelException: void <init>()>();
v9 = v13;
label08:
virtualinvoke v1.<io.netty.channel.ChannelOutboundBuffer: boolean remove(java.lang.Throwable)>(v9);
label09:
goto label05;
label10:
v14 := @caughtexception;
virtualinvoke v1.<io.netty.channel.ChannelOutboundBuffer: boolean remove(java.lang.Throwable)>(v14);
goto label05;
label11:
v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: boolean writeInProgress> = 0;
goto label13;
label12:
v15 := @caughtexception;
v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: boolean writeInProgress> = 0;
throw v15;
label13:
return;
catch java.lang.Throwable from label06 to label09 with label10;
catch java.lang.Throwable from label04 to label11 with label12;
}
private void releaseInboundBuffers()
{
java.lang.AssertionError v5;
io.netty.channel.EventLoop v2, v3;
java.lang.Object v7;
io.quarkus.netty.runtime.virtual.VirtualChannel v0;
java.util.Queue v6;
boolean v1, v4;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualChannel;
v1 = <io.quarkus.netty.runtime.virtual.VirtualChannel: boolean $assertionsDisabled>;
if v1 != 0 goto label1;
v2 = virtualinvoke v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.netty.channel.EventLoop eventLoop()>();
if v2 == null goto label1;
v3 = virtualinvoke v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: io.netty.channel.EventLoop eventLoop()>();
v4 = interfaceinvoke v3.<io.netty.channel.EventLoop: boolean inEventLoop()>();
if v4 != 0 goto label1;
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label1:
v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: boolean readInProgress> = 0;
v6 = v0.<io.quarkus.netty.runtime.virtual.VirtualChannel: java.util.Queue inboundBuffer>;
label2:
v7 = interfaceinvoke v6.<java.util.Queue: java.lang.Object poll()>();
if v7 == null goto label3;
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v7);
goto label2;
label3:
return;
}
static void <clinit>()
{
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v4;
io.netty.util.internal.logging.InternalLogger v3;
java.lang.Class v0;
io.netty.channel.ChannelMetadata v5;
boolean v1, v2;
v0 = class "Lio/quarkus/netty/runtime/virtual/VirtualChannel;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.quarkus.netty.runtime.virtual.VirtualChannel: boolean $assertionsDisabled> = v2;
v3 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/quarkus/netty/runtime/virtual/VirtualChannel;");
<io.quarkus.netty.runtime.virtual.VirtualChannel: io.netty.util.internal.logging.InternalLogger logger> = v3;
v4 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lio/quarkus/netty/runtime/virtual/VirtualChannel;", class "Lio/netty/util/concurrent/Future;", "finishReadFuture");
<io.quarkus.netty.runtime.virtual.VirtualChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater FINISH_READ_FUTURE_UPDATER> = v4;
v5 = new io.netty.channel.ChannelMetadata;
specialinvoke v5.<io.netty.channel.ChannelMetadata: void <init>(boolean)>(0);
<io.quarkus.netty.runtime.virtual.VirtualChannel: io.netty.channel.ChannelMetadata METADATA> = v5;
return;
}
}