public class io.quarkus.runtime.configuration.ConfigInstantiator extends java.lang.Object
{
private static java.util.Set SUPPORTED_CLASS_NAME_SUFFIXES;
private static final java.lang.String QUARKUS_PROPERTY_PREFIX;
private static final java.util.regex.Pattern SEGMENT_EXTRACTION_PATTERN;
public void <init>()
{
io.quarkus.runtime.configuration.ConfigInstantiator v0;
v0 := @this: io.quarkus.runtime.configuration.ConfigInstantiator;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.lang.Object handleObject(java.util.function.Supplier)
{
java.lang.Object v1;
java.util.function.Supplier v0;
v0 := @parameter0: java.util.function.Supplier;
v1 = interfaceinvoke v0.<java.util.function.Supplier: java.lang.Object get()>();
staticinvoke <io.quarkus.runtime.configuration.ConfigInstantiator: void handleObject(java.lang.Object)>(v1);
return v1;
}
public static void handleObject(java.lang.Object)
{
java.lang.Object v0;
org.eclipse.microprofile.config.Config v1;
v0 := @parameter0: java.lang.Object;
v1 = staticinvoke <org.eclipse.microprofile.config.ConfigProvider: org.eclipse.microprofile.config.Config getConfig()>();
staticinvoke <io.quarkus.runtime.configuration.ConfigInstantiator: void handleObject(java.lang.Object,io.smallrye.config.SmallRyeConfig)>(v0, v1);
return;
}
public static void handleObject(java.lang.Object, io.smallrye.config.SmallRyeConfig)
{
int v13, v14, v15;
java.lang.String v10, v11, v12, v16, v17, v2, v5, v7;
boolean v6, v8;
io.smallrye.config.SmallRyeConfig v1;
java.lang.IllegalArgumentException v9;
java.util.List v18;
java.lang.'annotation'.Annotation v4;
java.lang.Class v3;
java.lang.Object v0;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: io.smallrye.config.SmallRyeConfig;
v2 = staticinvoke <io.quarkus.runtime.configuration.ConfigInstantiator: java.lang.String getClassNameSuffix(java.lang.Object)>(v0);
if v2 != null goto label1;
return;
label1:
v3 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v4 = virtualinvoke v3.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/quarkus/runtime/annotations/ConfigRoot;");
if v4 == null goto label2;
v5 = interfaceinvoke v4.<io.quarkus.runtime.annotations.ConfigRoot: java.lang.String name()>();
v6 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("<<hyphenated element name>>");
if v6 != 0 goto label2;
v7 = interfaceinvoke v4.<io.quarkus.runtime.annotations.ConfigRoot: java.lang.String name()>();
v8 = virtualinvoke v7.<java.lang.String: boolean startsWith(java.lang.String)>("<<");
if v8 == 0 goto label3;
v9 = new java.lang.IllegalArgumentException;
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.Class)>(v7, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Found unsupported @ConfigRoot.name = \u0001 on \u0001");
specialinvoke v9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v10);
throw v9;
label2:
v11 = virtualinvoke v3.<java.lang.Class: java.lang.String getSimpleName()>();
v12 = virtualinvoke v3.<java.lang.Class: java.lang.String getSimpleName()>();
v13 = virtualinvoke v12.<java.lang.String: int length()>();
v14 = virtualinvoke v2.<java.lang.String: int length()>();
v15 = v13 - v14;
v16 = virtualinvoke v11.<java.lang.String: java.lang.String substring(int,int)>(0, v15);
v7 = staticinvoke <io.quarkus.runtime.configuration.ConfigInstantiator: java.lang.String dashify(java.lang.String)>(v16);
label3:
v17 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("quarkus.\u0001");
v18 = staticinvoke <io.quarkus.runtime.configuration.ConfigInstantiator: java.util.List gatherQuarkusPropertyNames(io.smallrye.config.SmallRyeConfig)>(v1);
staticinvoke <io.quarkus.runtime.configuration.ConfigInstantiator: void handleObject(java.lang.String,java.lang.Object,io.smallrye.config.SmallRyeConfig,java.util.List)>(v17, v0, v1, v18);
return;
}
private static java.util.List gatherQuarkusPropertyNames(io.smallrye.config.SmallRyeConfig)
{
java.util.Iterator v3;
java.lang.Object v5;
io.smallrye.config.SmallRyeConfig v0;
java.lang.Iterable v2;
boolean v4, v6;
java.util.ArrayList v1;
v0 := @parameter0: io.smallrye.config.SmallRyeConfig;
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>(int)>(50);
v2 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfig: java.lang.Iterable getPropertyNames()>();
v3 = interfaceinvoke v2.<java.lang.Iterable: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = virtualinvoke v5.<java.lang.String: boolean startsWith(java.lang.String)>("quarkus.");
if v6 == 0 goto label1;
virtualinvoke v1.<java.util.ArrayList: boolean add(java.lang.Object)>(v5);
goto label1;
label2:
return v1;
}
private static void handleObject(java.lang.String, java.lang.Object, io.smallrye.config.SmallRyeConfig, java.util.List)
{
org.eclipse.microprofile.config.spi.Converter v30;
java.util.Map v29;
boolean v10, v12, v15, v24, v26, v32, v35, v5;
java.lang.Exception v39;
java.util.List v3;
java.lang.reflect.Type v28;
java.lang.'annotation'.Annotation v13;
java.util.Optional v31;
java.lang.Object[] v18;
java.lang.reflect.Constructor v17;
int v11, v7, v8;
java.lang.String v0, v20, v21, v22, v23, v25, v27, v34, v36;
java.util.NoSuchElementException v38;
java.lang.Class[] v16;
io.smallrye.config.SmallRyeConfig v2;
java.lang.RuntimeException v40;
java.lang.reflect.Field v9;
java.lang.reflect.Field[] v6;
java.lang.Class v14, v4;
java.lang.Object v1, v19, v33, v37;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: io.smallrye.config.SmallRyeConfig;
v3 := @parameter3: java.util.List;
label01:
v4 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v5 = staticinvoke <io.quarkus.runtime.configuration.ConfigInstantiator: boolean isClassNameSuffixSupported(java.lang.Object)>(v1);
if v5 != 0 goto label03;
label02:
return;
label03:
v6 = virtualinvoke v4.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();
v7 = lengthof v6;
v8 = 0;
label04:
if v8 >= v7 goto label16;
v9 = v6[v8];
v10 = virtualinvoke v9.<java.lang.reflect.Field: boolean isSynthetic()>();
if v10 != 0 goto label14;
v11 = virtualinvoke v9.<java.lang.reflect.Field: int getModifiers()>();
v12 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>(v11);
if v12 != 0 goto label14;
virtualinvoke v9.<java.lang.reflect.Field: void setAccessible(boolean)>(1);
v13 = virtualinvoke v9.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getDeclaredAnnotation(java.lang.Class)>(class "Lio/quarkus/runtime/annotations/ConfigItem;");
v14 = virtualinvoke v9.<java.lang.reflect.Field: java.lang.Class getType()>();
if v13 == null goto label05;
v15 = virtualinvoke v14.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>(class "Lio/quarkus/runtime/annotations/ConfigGroup;");
if v15 == 0 goto label06;
label05:
v16 = newarray (java.lang.Class)[0];
v17 = virtualinvoke v14.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(v16);
virtualinvoke v17.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);
v18 = newarray (java.lang.Object)[0];
v19 = virtualinvoke v17.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(v18);
virtualinvoke v9.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(v1, v19);
v20 = virtualinvoke v9.<java.lang.reflect.Field: java.lang.String getName()>();
v21 = staticinvoke <io.quarkus.runtime.configuration.ConfigInstantiator: java.lang.String dashify(java.lang.String)>(v20);
v22 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v0, v21) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.\u0001");
staticinvoke <io.quarkus.runtime.configuration.ConfigInstantiator: void handleObject(java.lang.String,java.lang.Object,io.smallrye.config.SmallRyeConfig,java.util.List)>(v22, v19, v2, v3);
goto label14;
label06:
v23 = interfaceinvoke v13.<io.quarkus.runtime.annotations.ConfigItem: java.lang.String name()>();
v24 = virtualinvoke v23.<java.lang.String: boolean equals(java.lang.Object)>("<<hyphenated element name>>");
if v24 == 0 goto label07;
v25 = virtualinvoke v9.<java.lang.reflect.Field: java.lang.String getName()>();
v23 = staticinvoke <io.quarkus.runtime.configuration.ConfigInstantiator: java.lang.String dashify(java.lang.String)>(v25);
goto label08;
label07:
v26 = virtualinvoke v23.<java.lang.String: boolean equals(java.lang.Object)>("<<element name>>");
if v26 == 0 goto label08;
v23 = virtualinvoke v9.<java.lang.reflect.Field: java.lang.String getName()>();
label08:
v27 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v0, v23) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.\u0001");
v28 = virtualinvoke v9.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
if v14 != class "Ljava/util/Map;" goto label09;
v29 = staticinvoke <io.quarkus.runtime.configuration.ConfigInstantiator: java.util.Map handleMap(java.lang.String,java.lang.reflect.Type,io.smallrye.config.SmallRyeConfig,java.util.List)>(v27, v28, v2, v3);
virtualinvoke v9.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(v1, v29);
goto label14;
label09:
v30 = staticinvoke <io.quarkus.runtime.configuration.ConfigInstantiator: org.eclipse.microprofile.config.spi.Converter getConverterFor(java.lang.reflect.Type,io.smallrye.config.SmallRyeConfig)>(v28, v2);
label10:
v31 = virtualinvoke v2.<io.smallrye.config.SmallRyeConfig: java.util.Optional getOptionalValue(java.lang.String,org.eclipse.microprofile.config.spi.Converter)>(v27, v30);
v32 = virtualinvoke v31.<java.util.Optional: boolean isPresent()>();
if v32 == 0 goto label11;
v33 = virtualinvoke v31.<java.util.Optional: java.lang.Object get()>();
virtualinvoke v9.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(v1, v33);
goto label14;
label11:
v34 = interfaceinvoke v13.<io.quarkus.runtime.annotations.ConfigItem: java.lang.String defaultValue()>();
v35 = virtualinvoke v34.<java.lang.String: boolean equals(java.lang.Object)>("<<no default>>");
if v35 != 0 goto label14;
v36 = interfaceinvoke v13.<io.quarkus.runtime.annotations.ConfigItem: java.lang.String defaultValue()>();
v37 = interfaceinvoke v30.<org.eclipse.microprofile.config.spi.Converter: java.lang.Object convert(java.lang.String)>(v36);
virtualinvoke v9.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(v1, v37);
label12:
goto label14;
label13:
v38 := @caughtexception;
label14:
v8 = v8 + 1;
goto label04;
label15:
v39 := @caughtexception;
v40 = new java.lang.RuntimeException;
specialinvoke v40.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(v39);
throw v40;
label16:
return;
catch java.util.NoSuchElementException from label10 to label12 with label13;
catch java.lang.Exception from label01 to label02 with label15;
catch java.lang.Exception from label03 to label15 with label15;
}
private static java.util.Map handleMap(java.lang.String, java.lang.reflect.Type, io.smallrye.config.SmallRyeConfig, java.util.List) throws java.lang.ReflectiveOperationException
{
java.util.regex.Matcher v14;
org.eclipse.microprofile.config.spi.Converter v30;
boolean v12, v15, v17, v21, v23, v25, v26, v8;
java.util.List v3;
java.lang.reflect.Type v1, v20, v22, v5;
java.util.Optional v31;
java.util.regex.Pattern v13;
java.lang.Object[] v29;
java.util.HashMap v4;
java.lang.reflect.Constructor v28;
java.util.HashSet v6;
java.lang.String v0, v10, v11, v16, v18, v19;
java.util.Iterator v7;
java.lang.Class[] v27;
io.smallrye.config.SmallRyeConfig v2;
java.lang.Object v24, v9;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.reflect.Type;
v2 := @parameter2: io.smallrye.config.SmallRyeConfig;
v3 := @parameter3: java.util.List;
v4 = new java.util.HashMap;
specialinvoke v4.<java.util.HashMap: void <init>()>();
v5 = staticinvoke <io.quarkus.runtime.configuration.ConfigInstantiator: java.lang.reflect.Type typeOfParameter(java.lang.reflect.Type,int)>(v1, 0);
if v5 == class "Ljava/lang/String;" goto label1;
return v4;
label1:
v6 = new java.util.HashSet;
specialinvoke v6.<java.util.HashSet: void <init>()>();
v7 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
label2:
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label7;
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.");
v11 = virtualinvoke v9.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(v10, "");
v12 = virtualinvoke v11.<java.lang.String: boolean equals(java.lang.Object)>(v9);
if v12 != 0 goto label2;
v13 = <io.quarkus.runtime.configuration.ConfigInstantiator: java.util.regex.Pattern SEGMENT_EXTRACTION_PATTERN>;
v14 = virtualinvoke v13.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v11);
v15 = virtualinvoke v14.<java.util.regex.Matcher: boolean find()>();
if v15 == 0 goto label2;
v16 = virtualinvoke v14.<java.util.regex.Matcher: java.lang.String group(int)>(1);
v17 = virtualinvoke v6.<java.util.HashSet: boolean add(java.lang.Object)>(v16);
if v17 == 0 goto label2;
v18 = virtualinvoke v16.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\"", "");
v19 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v10, v16) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001");
v20 = staticinvoke <io.quarkus.runtime.configuration.ConfigInstantiator: java.lang.reflect.Type typeOfParameter(java.lang.reflect.Type,int)>(v1, 1);
v21 = v20 instanceof java.lang.reflect.ParameterizedType;
if v21 == 0 goto label3;
v22 = interfaceinvoke v20.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
v23 = virtualinvoke v22.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/util/Map;");
if v23 == 0 goto label3;
v24 = staticinvoke <io.quarkus.runtime.configuration.ConfigInstantiator: java.util.Map handleMap(java.lang.String,java.lang.reflect.Type,io.smallrye.config.SmallRyeConfig,java.util.List)>(v19, v20, v2, v3);
goto label6;
label3:
v25 = v20 instanceof java.lang.Class;
if v25 != 0 goto label4;
v20 = null;
label4:
if v20 == null goto label5;
v26 = virtualinvoke v20.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>(class "Lio/quarkus/runtime/annotations/ConfigGroup;");
if v26 == 0 goto label5;
v27 = newarray (java.lang.Class)[0];
v28 = virtualinvoke v20.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(v27);
virtualinvoke v28.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);
v29 = newarray (java.lang.Object)[0];
v24 = virtualinvoke v28.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(v29);
staticinvoke <io.quarkus.runtime.configuration.ConfigInstantiator: void handleObject(java.lang.String,java.lang.Object,io.smallrye.config.SmallRyeConfig,java.util.List)>(v19, v24, v2, v3);
goto label6;
label5:
v30 = staticinvoke <io.quarkus.runtime.configuration.ConfigInstantiator: org.eclipse.microprofile.config.spi.Converter getConverterFor(java.lang.reflect.Type,io.smallrye.config.SmallRyeConfig)>(v20, v2);
v31 = virtualinvoke v2.<io.smallrye.config.SmallRyeConfig: java.util.Optional getOptionalValue(java.lang.String,org.eclipse.microprofile.config.spi.Converter)>(v19, v30);
v24 = virtualinvoke v31.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(null);
label6:
virtualinvoke v4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v18, v24);
goto label2;
label7:
return v4;
}
private static org.eclipse.microprofile.config.spi.Converter getConverterFor(java.lang.reflect.Type, io.smallrye.config.SmallRyeConfig)
{
io.quarkus.runtime.configuration.HyphenateEnumConverter v5;
org.eclipse.microprofile.config.spi.Converter v10, v12, v14, v16, v18, v7, v8;
boolean v4;
java.util.function.IntFunction v11, v15;
io.smallrye.config.SmallRyeConfig v1;
java.lang.reflect.Type v0, v13, v6, v9;
java.lang.Class v17, v2, v3;
v0 := @parameter0: java.lang.reflect.Type;
v1 := @parameter1: io.smallrye.config.SmallRyeConfig;
v2 = staticinvoke <io.quarkus.runtime.configuration.ConfigInstantiator: java.lang.Class rawTypeOf(java.lang.reflect.Type)>(v0);
v3 = class "Ljava/lang/Enum;";
v4 = virtualinvoke v3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v2);
if v4 == 0 goto label1;
v5 = new io.quarkus.runtime.configuration.HyphenateEnumConverter;
specialinvoke v5.<io.quarkus.runtime.configuration.HyphenateEnumConverter: void <init>(java.lang.Class)>(v2);
return v5;
label1:
if v2 != class "Ljava/util/Optional;" goto label2;
v6 = staticinvoke <io.quarkus.runtime.configuration.ConfigInstantiator: java.lang.reflect.Type typeOfParameter(java.lang.reflect.Type,int)>(v0, 0);
v7 = staticinvoke <io.quarkus.runtime.configuration.ConfigInstantiator: org.eclipse.microprofile.config.spi.Converter getConverterFor(java.lang.reflect.Type,io.smallrye.config.SmallRyeConfig)>(v6, v1);
v8 = staticinvoke <io.smallrye.config.Converters: org.eclipse.microprofile.config.spi.Converter newOptionalConverter(org.eclipse.microprofile.config.spi.Converter)>(v7);
return v8;
label2:
if v2 != class "Ljava/util/List;" goto label3;
v9 = staticinvoke <io.quarkus.runtime.configuration.ConfigInstantiator: java.lang.reflect.Type typeOfParameter(java.lang.reflect.Type,int)>(v0, 0);
v10 = staticinvoke <io.quarkus.runtime.configuration.ConfigInstantiator: org.eclipse.microprofile.config.spi.Converter getConverterFor(java.lang.reflect.Type,io.smallrye.config.SmallRyeConfig)>(v9, v1);
v11 = staticinvoke <io.quarkus.runtime.configuration.ConfigUtils: java.util.function.IntFunction listFactory()>();
v12 = staticinvoke <io.smallrye.config.Converters: org.eclipse.microprofile.config.spi.Converter newCollectionConverter(org.eclipse.microprofile.config.spi.Converter,java.util.function.IntFunction)>(v10, v11);
return v12;
label3:
if v2 != class "Ljava/util/Set;" goto label4;
v13 = staticinvoke <io.quarkus.runtime.configuration.ConfigInstantiator: java.lang.reflect.Type typeOfParameter(java.lang.reflect.Type,int)>(v0, 0);
v14 = staticinvoke <io.quarkus.runtime.configuration.ConfigInstantiator: org.eclipse.microprofile.config.spi.Converter getConverterFor(java.lang.reflect.Type,io.smallrye.config.SmallRyeConfig)>(v13, v1);
v15 = staticinvoke <io.quarkus.runtime.configuration.ConfigUtils: java.util.function.IntFunction setFactory()>();
v16 = staticinvoke <io.smallrye.config.Converters: org.eclipse.microprofile.config.spi.Converter newCollectionConverter(org.eclipse.microprofile.config.spi.Converter,java.util.function.IntFunction)>(v14, v15);
return v16;
label4:
v17 = staticinvoke <io.quarkus.runtime.configuration.ConfigInstantiator: java.lang.Class rawTypeOf(java.lang.reflect.Type)>(v0);
v18 = virtualinvoke v1.<io.smallrye.config.SmallRyeConfig: org.eclipse.microprofile.config.spi.Converter requireConverter(java.lang.Class)>(v17);
return v18;
}
private static java.lang.Class rawTypeOf(java.lang.reflect.Type)
{
java.lang.IllegalArgumentException v10;
java.lang.reflect.Type v0, v3, v6;
java.lang.Class v4, v7, v9;
java.lang.Object v8;
java.lang.String v11;
boolean v1, v2, v5;
v0 := @parameter0: java.lang.reflect.Type;
v1 = v0 instanceof java.lang.Class;
if v1 == 0 goto label1;
return v0;
label1:
v2 = v0 instanceof java.lang.reflect.ParameterizedType;
if v2 == 0 goto label2;
v3 = interfaceinvoke v0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
v4 = staticinvoke <io.quarkus.runtime.configuration.ConfigInstantiator: java.lang.Class rawTypeOf(java.lang.reflect.Type)>(v3);
return v4;
label2:
v5 = v0 instanceof java.lang.reflect.GenericArrayType;
if v5 == 0 goto label3;
v6 = interfaceinvoke v0.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();
v7 = staticinvoke <io.quarkus.runtime.configuration.ConfigInstantiator: java.lang.Class rawTypeOf(java.lang.reflect.Type)>(v6);
v8 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(v7, 0);
v9 = virtualinvoke v8.<java.lang.Object: java.lang.Class getClass()>();
return v9;
label3:
v10 = new java.lang.IllegalArgumentException;
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.reflect.Type)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Type has no raw type class: \u0001");
specialinvoke v10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v11);
throw v10;
}
static java.lang.reflect.Type typeOfParameter(java.lang.reflect.Type, int)
{
java.lang.reflect.Type v0, v4;
int v1;
java.lang.reflect.Type[] v3;
java.lang.String v6;
java.lang.IllegalArgumentException v5;
boolean v2;
v0 := @parameter0: java.lang.reflect.Type;
v1 := @parameter1: int;
v2 = v0 instanceof java.lang.reflect.ParameterizedType;
if v2 == 0 goto label1;
v3 = interfaceinvoke v0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v4 = v3[v1];
return v4;
label1:
v5 = new java.lang.IllegalArgumentException;
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.reflect.Type)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Type is not parameterized: \u0001");
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v6);
throw v5;
}
private static java.lang.String dashify(java.lang.String)
{
char v5, v8;
int v3, v4, v6, v7;
char[] v2;
java.lang.StringBuilder v1;
java.lang.String v0, v9;
v0 := @parameter0: java.lang.String;
v1 = new java.lang.StringBuilder;
specialinvoke v1.<java.lang.StringBuilder: void <init>()>();
v2 = virtualinvoke v0.<java.lang.String: char[] toCharArray()>();
v3 = 0;
label1:
v4 = lengthof v2;
if v3 >= v4 goto label3;
v5 = v2[v3];
if v3 == 0 goto label2;
v6 = lengthof v2;
v7 = v6 - 1;
if v3 == v7 goto label2;
if v5 < 65 goto label2;
if v5 > 90 goto label2;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);
label2:
v8 = staticinvoke <java.lang.Character: char toLowerCase(char)>(v5);
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v8);
v3 = v3 + 1;
goto label1;
label3:
v9 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.String toString()>();
return v9;
}
private static java.lang.String getClassNameSuffix(java.lang.Object)
{
java.util.Iterator v4;
java.util.Set v3;
java.lang.Class v1;
java.lang.Object v0, v6;
java.lang.String v2;
boolean v5, v7;
v0 := @parameter0: java.lang.Object;
if v0 != null goto label1;
return null;
label1:
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v2 = virtualinvoke v1.<java.lang.Class: java.lang.String getName()>();
v3 = <io.quarkus.runtime.configuration.ConfigInstantiator: java.util.Set SUPPORTED_CLASS_NAME_SUFFIXES>;
v4 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
label2:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label3;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = virtualinvoke v2.<java.lang.String: boolean endsWith(java.lang.String)>(v6);
if v7 == 0 goto label2;
return v6;
label3:
return null;
}
private static boolean isClassNameSuffixSupported(java.lang.Object)
{
java.util.Iterator v4;
java.util.Set v3;
java.lang.Class v1;
java.lang.Object v0, v6;
java.lang.String v2;
boolean v5, v7;
v0 := @parameter0: java.lang.Object;
if v0 != null goto label1;
return 0;
label1:
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v2 = virtualinvoke v1.<java.lang.Class: java.lang.String getName()>();
v3 = <io.quarkus.runtime.configuration.ConfigInstantiator: java.util.Set SUPPORTED_CLASS_NAME_SUFFIXES>;
v4 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
label2:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label3;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = virtualinvoke v2.<java.lang.String: boolean endsWith(java.lang.String)>(v6);
if v7 == 0 goto label2;
return 1;
label3:
return 0;
}
static void <clinit>()
{
java.util.Set v0;
java.util.regex.Pattern v1;
v0 = staticinvoke <java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object)>("Config", "Configuration");
<io.quarkus.runtime.configuration.ConfigInstantiator: java.util.Set SUPPORTED_CLASS_NAME_SUFFIXES> = v0;
v1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(\"[^\"]+\"|[^.\"]+).*");
<io.quarkus.runtime.configuration.ConfigInstantiator: java.util.regex.Pattern SEGMENT_EXTRACTION_PATTERN> = v1;
return;
}
}