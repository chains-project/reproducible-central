public interface  io.quarkus.runtime.test.TestHttpEndpointProvider extends java.lang.Object
{
public abstract java.util.function.Function endpointProvider();
public static java.util.List load()
{
java.util.Iterator v4;
java.util.ServiceLoader v3;
java.util.function.Function v7;
java.util.ArrayList v0;
java.lang.Thread v1;
java.lang.Object v6;
java.lang.ClassLoader v2;
boolean v5;
v0 = new java.util.ArrayList;
specialinvoke v0.<java.util.ArrayList: void <init>()>();
v1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v2 = virtualinvoke v1.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
v3 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>(class "Lio/quarkus/runtime/test/TestHttpEndpointProvider;", v2);
v4 = virtualinvoke v3.<java.util.ServiceLoader: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = interfaceinvoke v6.<io.quarkus.runtime.test.TestHttpEndpointProvider: java.util.function.Function endpointProvider()>();
interfaceinvoke v0.<java.util.List: boolean add(java.lang.Object)>(v7);
goto label1;
label2:
return v0;
}
}