public class io.quarkus.vertx.core.runtime.VertxLocalsHelper extends java.lang.Object
{
private static final java.lang.String ILLEGAL_ACCESS_TO_CONTEXT;
private static final java.lang.String ILLEGAL_ACCESS_TO_LOCAL_CONTEXT;
public void <init>()
{
io.quarkus.vertx.core.runtime.VertxLocalsHelper v0;
v0 := @this: io.quarkus.vertx.core.runtime.VertxLocalsHelper;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static void throwOnRootContextAccess()
{
java.lang.UnsupportedOperationException v0;
v0 = new java.lang.UnsupportedOperationException;
specialinvoke v0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Access to Context.put(), Context.get() and Context.remove() are forbidden as it can leak data between unrelated processing. Use Context.putLocal(), Context.getLocal() and Context.removeLocal() instead. Note that these methods can only be used from a \'duplicated\' Context, and so may not be available everywhere.");
throw v0;
}
public static java.lang.Object getLocal(io.vertx.core.impl.ContextInternal, java.lang.Object)
{
java.lang.UnsupportedOperationException v5;
io.vertx.core.impl.ContextInternal v0;
java.lang.Object v1, v4;
boolean v2;
java.util.concurrent.ConcurrentMap v3;
v0 := @parameter0: io.vertx.core.impl.ContextInternal;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <io.smallrye.common.vertx.VertxContext: boolean isDuplicatedContext(io.vertx.core.Context)>(v0);
if v2 == 0 goto label1;
v3 = interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: java.util.concurrent.ConcurrentMap localContextData()>();
v4 = interfaceinvoke v3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v1);
return v4;
label1:
v5 = new java.lang.UnsupportedOperationException;
specialinvoke v5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Access to Context.putLocal(), Context.getLocal() and Context.removeLocal() are forbidden from a \'root\' context  as it can leak data between unrelated processing. Make sure the method runs on a \'duplicated\' (local) Context");
throw v5;
}
public static void putLocal(io.vertx.core.impl.ContextInternal, java.lang.Object, java.lang.Object)
{
java.lang.UnsupportedOperationException v5;
io.vertx.core.impl.ContextInternal v0;
java.lang.Object v1, v2;
boolean v3;
java.util.concurrent.ConcurrentMap v4;
v0 := @parameter0: io.vertx.core.impl.ContextInternal;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: java.lang.Object;
v3 = staticinvoke <io.smallrye.common.vertx.VertxContext: boolean isDuplicatedContext(io.vertx.core.Context)>(v0);
if v3 == 0 goto label1;
v4 = interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: java.util.concurrent.ConcurrentMap localContextData()>();
interfaceinvoke v4.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v2);
goto label2;
label1:
v5 = new java.lang.UnsupportedOperationException;
specialinvoke v5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Access to Context.putLocal(), Context.getLocal() and Context.removeLocal() are forbidden from a \'root\' context  as it can leak data between unrelated processing. Make sure the method runs on a \'duplicated\' (local) Context");
throw v5;
label2:
return;
}
public static boolean removeLocal(io.vertx.core.impl.ContextInternal, java.lang.Object)
{
java.lang.UnsupportedOperationException v6;
io.vertx.core.impl.ContextInternal v0;
java.lang.Object v1, v4;
boolean v2, v5;
java.util.concurrent.ConcurrentMap v3;
v0 := @parameter0: io.vertx.core.impl.ContextInternal;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <io.smallrye.common.vertx.VertxContext: boolean isDuplicatedContext(io.vertx.core.Context)>(v0);
if v2 == 0 goto label3;
v3 = interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: java.util.concurrent.ConcurrentMap localContextData()>();
v4 = interfaceinvoke v3.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(v1);
if v4 == null goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
label3:
v6 = new java.lang.UnsupportedOperationException;
specialinvoke v6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Access to Context.putLocal(), Context.getLocal() and Context.removeLocal() are forbidden from a \'root\' context  as it can leak data between unrelated processing. Make sure the method runs on a \'duplicated\' (local) Context");
throw v6;
}
}