public final enum class io.smallrye.common.expression.Expression$Flag extends java.lang.Enum
{
public static final enum io.smallrye.common.expression.Expression$Flag NO_TRIM;
public static final enum io.smallrye.common.expression.Expression$Flag LENIENT_SYNTAX;
public static final enum io.smallrye.common.expression.Expression$Flag MINI_EXPRS;
public static final enum io.smallrye.common.expression.Expression$Flag NO_RECURSE_KEY;
public static final enum io.smallrye.common.expression.Expression$Flag NO_RECURSE_DEFAULT;
public static final enum io.smallrye.common.expression.Expression$Flag NO_SMART_BRACES;
public static final enum io.smallrye.common.expression.Expression$Flag GENERAL_EXPANSION;
public static final enum io.smallrye.common.expression.Expression$Flag ESCAPES;
public static final enum io.smallrye.common.expression.Expression$Flag DOUBLE_COLON;
private static final io.smallrye.common.expression.Expression$Flag[] $VALUES;
public static io.smallrye.common.expression.Expression$Flag[] values()
{
io.smallrye.common.expression.Expression$Flag[] v0;
java.lang.Object v1;
v0 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag[] $VALUES>;
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
return v1;
}
public static io.smallrye.common.expression.Expression$Flag valueOf(java.lang.String)
{
java.lang.String v0;
java.lang.Enum v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lio/smallrye/common/expression/Expression$Flag;", v0);
return v1;
}
private void <init>(java.lang.String, int)
{
int v2;
java.lang.String v1;
io.smallrye.common.expression.Expression$Flag v0;
v0 := @this: io.smallrye.common.expression.Expression$Flag;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
specialinvoke v0.<java.lang.Enum: void <init>(java.lang.String,int)>(v1, v2);
return;
}
private static io.smallrye.common.expression.Expression$Flag[] $values()
{
io.smallrye.common.expression.Expression$Flag v1, v2, v3, v4, v5, v6, v7, v8, v9;
io.smallrye.common.expression.Expression$Flag[] v0;
v0 = newarray (io.smallrye.common.expression.Expression$Flag)[9];
v1 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag NO_TRIM>;
v0[0] = v1;
v2 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag LENIENT_SYNTAX>;
v0[1] = v2;
v3 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag MINI_EXPRS>;
v0[2] = v3;
v4 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag NO_RECURSE_KEY>;
v0[3] = v4;
v5 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag NO_RECURSE_DEFAULT>;
v0[4] = v5;
v6 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag NO_SMART_BRACES>;
v0[5] = v6;
v7 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag GENERAL_EXPANSION>;
v0[6] = v7;
v8 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag ESCAPES>;
v0[7] = v8;
v9 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag DOUBLE_COLON>;
v0[8] = v9;
return v0;
}
static void <clinit>()
{
io.smallrye.common.expression.Expression$Flag v0, v1, v2, v3, v4, v5, v6, v7, v8;
io.smallrye.common.expression.Expression$Flag[] v9;
v0 = new io.smallrye.common.expression.Expression$Flag;
specialinvoke v0.<io.smallrye.common.expression.Expression$Flag: void <init>(java.lang.String,int)>("NO_TRIM", 0);
<io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag NO_TRIM> = v0;
v1 = new io.smallrye.common.expression.Expression$Flag;
specialinvoke v1.<io.smallrye.common.expression.Expression$Flag: void <init>(java.lang.String,int)>("LENIENT_SYNTAX", 1);
<io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag LENIENT_SYNTAX> = v1;
v2 = new io.smallrye.common.expression.Expression$Flag;
specialinvoke v2.<io.smallrye.common.expression.Expression$Flag: void <init>(java.lang.String,int)>("MINI_EXPRS", 2);
<io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag MINI_EXPRS> = v2;
v3 = new io.smallrye.common.expression.Expression$Flag;
specialinvoke v3.<io.smallrye.common.expression.Expression$Flag: void <init>(java.lang.String,int)>("NO_RECURSE_KEY", 3);
<io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag NO_RECURSE_KEY> = v3;
v4 = new io.smallrye.common.expression.Expression$Flag;
specialinvoke v4.<io.smallrye.common.expression.Expression$Flag: void <init>(java.lang.String,int)>("NO_RECURSE_DEFAULT", 4);
<io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag NO_RECURSE_DEFAULT> = v4;
v5 = new io.smallrye.common.expression.Expression$Flag;
specialinvoke v5.<io.smallrye.common.expression.Expression$Flag: void <init>(java.lang.String,int)>("NO_SMART_BRACES", 5);
<io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag NO_SMART_BRACES> = v5;
v6 = new io.smallrye.common.expression.Expression$Flag;
specialinvoke v6.<io.smallrye.common.expression.Expression$Flag: void <init>(java.lang.String,int)>("GENERAL_EXPANSION", 6);
<io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag GENERAL_EXPANSION> = v6;
v7 = new io.smallrye.common.expression.Expression$Flag;
specialinvoke v7.<io.smallrye.common.expression.Expression$Flag: void <init>(java.lang.String,int)>("ESCAPES", 7);
<io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag ESCAPES> = v7;
v8 = new io.smallrye.common.expression.Expression$Flag;
specialinvoke v8.<io.smallrye.common.expression.Expression$Flag: void <init>(java.lang.String,int)>("DOUBLE_COLON", 8);
<io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag DOUBLE_COLON> = v8;
v9 = staticinvoke <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag[] $values()>();
<io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag[] $VALUES> = v9;
return;
}
}