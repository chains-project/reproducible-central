public interface  io.smallrye.common.function.ExceptionFunction extends java.lang.Object
{
public abstract java.lang.Object apply(java.lang.Object) throws java.lang.Exception;
public io.smallrye.common.function.ExceptionFunction andThen(io.smallrye.common.function.ExceptionFunction)
{
io.smallrye.common.function.ExceptionFunction v0, v1, v2;
v0 := @this: io.smallrye.common.function.ExceptionFunction;
v1 := @parameter0: io.smallrye.common.function.ExceptionFunction;
staticinvoke <io.smallrye.common.constraint.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("after", v1);
v2 = staticinvoke <io.smallrye.common.function.ExceptionFunction$lambda_andThen_0__3165: io.smallrye.common.function.ExceptionFunction bootstrap$(io.smallrye.common.function.ExceptionFunction,io.smallrye.common.function.ExceptionFunction)>(v0, v1);
return v2;
}
public io.smallrye.common.function.ExceptionFunction andThen(io.smallrye.common.function.ExceptionBiFunction)
{
io.smallrye.common.function.ExceptionFunction v0, v2;
io.smallrye.common.function.ExceptionBiFunction v1;
v0 := @this: io.smallrye.common.function.ExceptionFunction;
v1 := @parameter0: io.smallrye.common.function.ExceptionBiFunction;
staticinvoke <io.smallrye.common.constraint.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("after", v1);
v2 = staticinvoke <io.smallrye.common.function.ExceptionFunction$lambda_andThen_1__3166: io.smallrye.common.function.ExceptionFunction bootstrap$(io.smallrye.common.function.ExceptionFunction,io.smallrye.common.function.ExceptionBiFunction)>(v0, v1);
return v2;
}
public io.smallrye.common.function.ExceptionFunction compose(io.smallrye.common.function.ExceptionFunction)
{
io.smallrye.common.function.ExceptionFunction v0, v1, v2;
v0 := @this: io.smallrye.common.function.ExceptionFunction;
v1 := @parameter0: io.smallrye.common.function.ExceptionFunction;
staticinvoke <io.smallrye.common.constraint.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("before", v1);
v2 = staticinvoke <io.smallrye.common.function.ExceptionFunction$lambda_compose_2__3167: io.smallrye.common.function.ExceptionFunction bootstrap$(io.smallrye.common.function.ExceptionFunction,io.smallrye.common.function.ExceptionFunction)>(v0, v1);
return v2;
}
public io.smallrye.common.function.ExceptionConsumer andThen(io.smallrye.common.function.ExceptionConsumer)
{
io.smallrye.common.function.ExceptionFunction v0;
io.smallrye.common.function.ExceptionConsumer v1, v2;
v0 := @this: io.smallrye.common.function.ExceptionFunction;
v1 := @parameter0: io.smallrye.common.function.ExceptionConsumer;
staticinvoke <io.smallrye.common.constraint.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("after", v1);
v2 = staticinvoke <io.smallrye.common.function.ExceptionFunction$lambda_andThen_3__3168: io.smallrye.common.function.ExceptionConsumer bootstrap$(io.smallrye.common.function.ExceptionFunction,io.smallrye.common.function.ExceptionConsumer)>(v0, v1);
return v2;
}
public io.smallrye.common.function.ExceptionConsumer andThen(io.smallrye.common.function.ExceptionBiConsumer)
{
io.smallrye.common.function.ExceptionFunction v0;
io.smallrye.common.function.ExceptionBiConsumer v1;
io.smallrye.common.function.ExceptionConsumer v2;
v0 := @this: io.smallrye.common.function.ExceptionFunction;
v1 := @parameter0: io.smallrye.common.function.ExceptionBiConsumer;
staticinvoke <io.smallrye.common.constraint.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("after", v1);
v2 = staticinvoke <io.smallrye.common.function.ExceptionFunction$lambda_andThen_4__3169: io.smallrye.common.function.ExceptionConsumer bootstrap$(io.smallrye.common.function.ExceptionFunction,io.smallrye.common.function.ExceptionBiConsumer)>(v0, v1);
return v2;
}
public io.smallrye.common.function.ExceptionPredicate andThen(io.smallrye.common.function.ExceptionPredicate)
{
io.smallrye.common.function.ExceptionFunction v0;
io.smallrye.common.function.ExceptionPredicate v1, v2;
v0 := @this: io.smallrye.common.function.ExceptionFunction;
v1 := @parameter0: io.smallrye.common.function.ExceptionPredicate;
staticinvoke <io.smallrye.common.constraint.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("after", v1);
v2 = staticinvoke <io.smallrye.common.function.ExceptionFunction$lambda_andThen_5__3170: io.smallrye.common.function.ExceptionPredicate bootstrap$(io.smallrye.common.function.ExceptionFunction,io.smallrye.common.function.ExceptionPredicate)>(v0, v1);
return v2;
}
public io.smallrye.common.function.ExceptionPredicate andThen(io.smallrye.common.function.ExceptionBiPredicate)
{
io.smallrye.common.function.ExceptionBiPredicate v1;
io.smallrye.common.function.ExceptionFunction v0;
io.smallrye.common.function.ExceptionPredicate v2;
v0 := @this: io.smallrye.common.function.ExceptionFunction;
v1 := @parameter0: io.smallrye.common.function.ExceptionBiPredicate;
staticinvoke <io.smallrye.common.constraint.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("after", v1);
v2 = staticinvoke <io.smallrye.common.function.ExceptionFunction$lambda_andThen_6__3171: io.smallrye.common.function.ExceptionPredicate bootstrap$(io.smallrye.common.function.ExceptionFunction,io.smallrye.common.function.ExceptionBiPredicate)>(v0, v1);
return v2;
}
public io.smallrye.common.function.ExceptionSupplier compose(io.smallrye.common.function.ExceptionSupplier)
{
io.smallrye.common.function.ExceptionFunction v0;
io.smallrye.common.function.ExceptionSupplier v1, v2;
v0 := @this: io.smallrye.common.function.ExceptionFunction;
v1 := @parameter0: io.smallrye.common.function.ExceptionSupplier;
staticinvoke <io.smallrye.common.constraint.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("before", v1);
v2 = staticinvoke <io.smallrye.common.function.ExceptionFunction$lambda_compose_7__3172: io.smallrye.common.function.ExceptionSupplier bootstrap$(io.smallrye.common.function.ExceptionFunction,io.smallrye.common.function.ExceptionSupplier)>(v0, v1);
return v2;
}
}