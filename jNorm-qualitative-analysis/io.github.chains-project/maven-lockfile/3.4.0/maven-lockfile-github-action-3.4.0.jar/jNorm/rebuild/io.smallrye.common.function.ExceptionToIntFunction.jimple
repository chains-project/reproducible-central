public interface  io.smallrye.common.function.ExceptionToIntFunction extends java.lang.Object
{
public abstract int apply(java.lang.Object) throws java.lang.Exception;
public io.smallrye.common.function.ExceptionFunction andThen(io.smallrye.common.function.ExceptionIntFunction)
{
io.smallrye.common.function.ExceptionFunction v2;
io.smallrye.common.function.ExceptionToIntFunction v0;
io.smallrye.common.function.ExceptionIntFunction v1;
v0 := @this: io.smallrye.common.function.ExceptionToIntFunction;
v1 := @parameter0: io.smallrye.common.function.ExceptionIntFunction;
staticinvoke <io.smallrye.common.constraint.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("after", v1);
v2 = staticinvoke <io.smallrye.common.function.ExceptionToIntFunction$lambda_andThen_0__3186: io.smallrye.common.function.ExceptionFunction bootstrap$(io.smallrye.common.function.ExceptionToIntFunction,io.smallrye.common.function.ExceptionIntFunction)>(v0, v1);
return v2;
}
public io.smallrye.common.function.ExceptionFunction andThen(io.smallrye.common.function.ExceptionLongFunction)
{
io.smallrye.common.function.ExceptionFunction v2;
io.smallrye.common.function.ExceptionToIntFunction v0;
io.smallrye.common.function.ExceptionLongFunction v1;
v0 := @this: io.smallrye.common.function.ExceptionToIntFunction;
v1 := @parameter0: io.smallrye.common.function.ExceptionLongFunction;
staticinvoke <io.smallrye.common.constraint.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("after", v1);
v2 = staticinvoke <io.smallrye.common.function.ExceptionToIntFunction$lambda_andThen_1__3187: io.smallrye.common.function.ExceptionFunction bootstrap$(io.smallrye.common.function.ExceptionToIntFunction,io.smallrye.common.function.ExceptionLongFunction)>(v0, v1);
return v2;
}
public io.smallrye.common.function.ExceptionToIntFunction compose(io.smallrye.common.function.ExceptionFunction)
{
io.smallrye.common.function.ExceptionFunction v1;
io.smallrye.common.function.ExceptionToIntFunction v0, v2;
v0 := @this: io.smallrye.common.function.ExceptionToIntFunction;
v1 := @parameter0: io.smallrye.common.function.ExceptionFunction;
staticinvoke <io.smallrye.common.constraint.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("before", v1);
v2 = staticinvoke <io.smallrye.common.function.ExceptionToIntFunction$lambda_compose_2__3188: io.smallrye.common.function.ExceptionToIntFunction bootstrap$(io.smallrye.common.function.ExceptionToIntFunction,io.smallrye.common.function.ExceptionFunction)>(v0, v1);
return v2;
}
}