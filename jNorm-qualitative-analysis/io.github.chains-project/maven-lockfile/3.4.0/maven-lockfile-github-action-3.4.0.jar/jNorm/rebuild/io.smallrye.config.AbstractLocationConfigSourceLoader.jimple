public abstract class io.smallrye.config.AbstractLocationConfigSourceLoader extends java.lang.Object
{
private static final org.eclipse.microprofile.config.spi.Converter URI_CONVERTER;
static final boolean $assertionsDisabled;
public void <init>()
{
io.smallrye.config.AbstractLocationConfigSourceLoader v0;
v0 := @this: io.smallrye.config.AbstractLocationConfigSourceLoader;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
protected boolean failOnMissingFile()
{
io.smallrye.config.AbstractLocationConfigSourceLoader v0;
v0 := @this: io.smallrye.config.AbstractLocationConfigSourceLoader;
return 0;
}
protected abstract java.lang.String[] getFileExtensions();
protected abstract org.eclipse.microprofile.config.spi.ConfigSource loadConfigSource(java.net.URL, int) throws java.io.IOException;
protected java.util.List loadConfigSources(java.lang.String, int)
{
java.util.List v4;
io.smallrye.config.AbstractLocationConfigSourceLoader v0;
int v2;
java.lang.String[] v3;
java.lang.String v1;
v0 := @this: io.smallrye.config.AbstractLocationConfigSourceLoader;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 = newarray (java.lang.String)[1];
v3[0] = v1;
v4 = virtualinvoke v0.<io.smallrye.config.AbstractLocationConfigSourceLoader: java.util.List loadConfigSources(java.lang.String[],int)>(v3, v2);
return v4;
}
protected java.util.List loadConfigSources(java.lang.String, int, java.lang.ClassLoader)
{
java.util.List v5;
io.smallrye.config.AbstractLocationConfigSourceLoader v0;
int v2;
java.lang.String[] v4;
java.lang.ClassLoader v3;
java.lang.String v1;
v0 := @this: io.smallrye.config.AbstractLocationConfigSourceLoader;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: java.lang.ClassLoader;
v4 = newarray (java.lang.String)[1];
v4[0] = v1;
v5 = virtualinvoke v0.<io.smallrye.config.AbstractLocationConfigSourceLoader: java.util.List loadConfigSources(java.lang.String[],int,java.lang.ClassLoader)>(v4, v2, v3);
return v5;
}
protected java.util.List loadConfigSources(java.lang.String[], int)
{
java.util.List v4;
io.smallrye.config.AbstractLocationConfigSourceLoader v0;
int v2;
java.lang.String[] v1;
java.lang.ClassLoader v3;
v0 := @this: io.smallrye.config.AbstractLocationConfigSourceLoader;
v1 := @parameter0: java.lang.String[];
v2 := @parameter1: int;
v3 = staticinvoke <io.smallrye.config.SecuritySupport: java.lang.ClassLoader getContextClassLoader()>();
v4 = virtualinvoke v0.<io.smallrye.config.AbstractLocationConfigSourceLoader: java.util.List loadConfigSources(java.lang.String[],int,java.lang.ClassLoader)>(v1, v2, v3);
return v4;
}
protected java.util.List loadConfigSources(java.lang.String[], int, java.lang.ClassLoader)
{
io.smallrye.config.AbstractLocationConfigSourceLoader v0;
java.lang.String[] v1;
java.util.ArrayList v6;
io.smallrye.config.ConfigMessages v24;
org.eclipse.microprofile.config.spi.Converter v10;
int v2, v4, v7, v8;
java.lang.String v12, v15, v18, v21, v25, v9;
boolean v16, v19, v22;
java.lang.IllegalArgumentException v26;
java.util.List v13, v14, v17, v20, v23, v5;
java.lang.Object v11;
java.lang.ClassLoader v3;
v0 := @this: io.smallrye.config.AbstractLocationConfigSourceLoader;
v1 := @parameter0: java.lang.String[];
v2 := @parameter1: int;
v3 := @parameter2: java.lang.ClassLoader;
if v1 == null goto label1;
v4 = lengthof v1;
if v4 != 0 goto label2;
label1:
v5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v5;
label2:
v6 = new java.util.ArrayList;
specialinvoke v6.<java.util.ArrayList: void <init>()>();
v7 = lengthof v1;
v8 = 0;
label3:
if v8 >= v7 goto label9;
v9 = v1[v8];
v10 = <io.smallrye.config.AbstractLocationConfigSourceLoader: org.eclipse.microprofile.config.spi.Converter URI_CONVERTER>;
v11 = interfaceinvoke v10.<org.eclipse.microprofile.config.spi.Converter: java.lang.Object convert(java.lang.String)>(v9);
v12 = virtualinvoke v11.<java.net.URI: java.lang.String getScheme()>();
if v12 != null goto label4;
v13 = virtualinvoke v0.<io.smallrye.config.AbstractLocationConfigSourceLoader: java.util.List tryFileSystem(java.net.URI,int)>(v11, v2);
interfaceinvoke v6.<java.util.List: boolean addAll(java.util.Collection)>(v13);
v14 = virtualinvoke v0.<io.smallrye.config.AbstractLocationConfigSourceLoader: java.util.List tryClassPath(java.net.URI,int,java.lang.ClassLoader)>(v11, v2, v3);
interfaceinvoke v6.<java.util.List: boolean addAll(java.util.Collection)>(v14);
goto label8;
label4:
v15 = virtualinvoke v11.<java.net.URI: java.lang.String getScheme()>();
v16 = virtualinvoke v15.<java.lang.String: boolean equals(java.lang.Object)>("file");
if v16 == 0 goto label5;
v17 = virtualinvoke v0.<io.smallrye.config.AbstractLocationConfigSourceLoader: java.util.List tryFileSystem(java.net.URI,int)>(v11, v2);
interfaceinvoke v6.<java.util.List: boolean addAll(java.util.Collection)>(v17);
goto label8;
label5:
v18 = virtualinvoke v11.<java.net.URI: java.lang.String getScheme()>();
v19 = virtualinvoke v18.<java.lang.String: boolean equals(java.lang.Object)>("jar");
if v19 == 0 goto label6;
v20 = virtualinvoke v0.<io.smallrye.config.AbstractLocationConfigSourceLoader: java.util.List tryJar(java.net.URI,int)>(v11, v2);
interfaceinvoke v6.<java.util.List: boolean addAll(java.util.Collection)>(v20);
goto label8;
label6:
v21 = virtualinvoke v11.<java.net.URI: java.lang.String getScheme()>();
v22 = virtualinvoke v21.<java.lang.String: boolean startsWith(java.lang.String)>("http");
if v22 == 0 goto label7;
v23 = virtualinvoke v0.<io.smallrye.config.AbstractLocationConfigSourceLoader: java.util.List tryHttpResource(java.net.URI,int)>(v11, v2);
interfaceinvoke v6.<java.util.List: boolean addAll(java.util.Collection)>(v23);
goto label8;
label7:
v24 = <io.smallrye.config.ConfigMessages: io.smallrye.config.ConfigMessages msg>;
v25 = virtualinvoke v11.<java.net.URI: java.lang.String getScheme()>();
v26 = interfaceinvoke v24.<io.smallrye.config.ConfigMessages: java.lang.IllegalArgumentException schemeNotSupported(java.lang.String)>(v25);
throw v26;
label8:
v8 = v8 + 1;
goto label3;
label9:
return v6;
}
protected java.util.List tryFileSystem(java.net.URI, int)
{
io.smallrye.config.AbstractLocationConfigSourceLoader v0;
java.net.URL v11;
java.nio.file.DirectoryStream v16;
java.net.URI v1, v10, v20;
java.nio.file.Path v5;
boolean v14, v18, v28, v30, v31, v9;
java.nio.file.DirectoryStream$Filter v15;
java.io.FileNotFoundException v33;
java.lang.Throwable v21;
java.lang.String[] v7;
io.smallrye.config.AbstractLocationConfigSourceLoader$ConfigSourcePathConsumer v12;
java.util.ArrayList v3;
io.smallrye.config.ConfigMessages v23, v32;
int v2;
java.lang.String v24, v26, v27, v34, v35, v4, v6;
java.nio.file.LinkOption[] v13, v29, v8;
java.util.Iterator v17;
java.io.IOException v22;
java.lang.IllegalArgumentException v25, v36;
java.lang.Object v19;
v0 := @this: io.smallrye.config.AbstractLocationConfigSourceLoader;
v1 := @parameter0: java.net.URI;
v2 := @parameter1: int;
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
v4 = virtualinvoke v1.<java.net.URI: java.lang.String getScheme()>();
if v4 == null goto label01;
v5 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.net.URI)>(v1);
goto label02;
label01:
v6 = virtualinvoke v1.<java.net.URI: java.lang.String getPath()>();
v7 = newarray (java.lang.String)[0];
v5 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>(v6, v7);
label02:
v8 = newarray (java.nio.file.LinkOption)[0];
v9 = staticinvoke <java.nio.file.Files: boolean isRegularFile(java.nio.file.Path,java.nio.file.LinkOption[])>(v5, v8);
if v9 == 0 goto label03;
v10 = interfaceinvoke v5.<java.nio.file.Path: java.net.URI toUri()>();
v11 = staticinvoke <io.smallrye.config.AbstractLocationConfigSourceLoader: java.net.URL toURL(java.net.URI)>(v10);
v12 = new io.smallrye.config.AbstractLocationConfigSourceLoader$ConfigSourcePathConsumer;
specialinvoke v12.<io.smallrye.config.AbstractLocationConfigSourceLoader$ConfigSourcePathConsumer: void <init>(io.smallrye.config.AbstractLocationConfigSourceLoader,int,java.util.List)>(v0, v2, v3);
staticinvoke <io.smallrye.common.classloader.ClassPathUtils: void consumeAsPath(java.net.URL,java.util.function.Consumer)>(v11, v12);
goto label11;
label03:
v13 = newarray (java.nio.file.LinkOption)[0];
v14 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>(v5, v13);
if v14 == 0 goto label10;
label04:
v15 = staticinvoke <io.smallrye.config.AbstractLocationConfigSourceLoader$validExtension__3112: java.nio.file.DirectoryStream$Filter bootstrap$(io.smallrye.config.AbstractLocationConfigSourceLoader)>(v0);
v16 = staticinvoke <java.nio.file.Files: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path,java.nio.file.DirectoryStream$Filter)>(v5, v15);
label05:
v17 = interfaceinvoke v16.<java.nio.file.DirectoryStream: java.util.Iterator iterator()>();
label06:
v18 = interfaceinvoke v17.<java.util.Iterator: boolean hasNext()>();
if v18 == 0 goto label07;
v19 = interfaceinvoke v17.<java.util.Iterator: java.lang.Object next()>();
v20 = interfaceinvoke v19.<java.nio.file.Path: java.net.URI toUri()>();
specialinvoke v0.<io.smallrye.config.AbstractLocationConfigSourceLoader: org.eclipse.microprofile.config.spi.ConfigSource addConfigSource(java.net.URI,int,java.util.List)>(v20, v2, v3);
goto label06;
label07:
interfaceinvoke v16.<java.nio.file.DirectoryStream: void close()>();
goto label11;
label08:
v21 := @caughtexception;
throw v21;
label09:
v22 := @caughtexception;
v23 = <io.smallrye.config.ConfigMessages: io.smallrye.config.ConfigMessages msg>;
v24 = virtualinvoke v1.<java.net.URI: java.lang.String toString()>();
v25 = interfaceinvoke v23.<io.smallrye.config.ConfigMessages: java.lang.IllegalArgumentException failedToLoadResource(java.lang.Throwable,java.lang.String)>(v22, v24);
throw v25;
label10:
v26 = "file";
v27 = virtualinvoke v1.<java.net.URI: java.lang.String getScheme()>();
v28 = virtualinvoke v26.<java.lang.String: boolean equals(java.lang.Object)>(v27);
if v28 == 0 goto label11;
v29 = newarray (java.nio.file.LinkOption)[0];
v30 = staticinvoke <java.nio.file.Files: boolean notExists(java.nio.file.Path,java.nio.file.LinkOption[])>(v5, v29);
if v30 == 0 goto label11;
v31 = virtualinvoke v0.<io.smallrye.config.AbstractLocationConfigSourceLoader: boolean failOnMissingFile()>();
if v31 == 0 goto label11;
v32 = <io.smallrye.config.ConfigMessages: io.smallrye.config.ConfigMessages msg>;
v33 = new java.io.FileNotFoundException;
v34 = virtualinvoke v1.<java.net.URI: java.lang.String toString()>();
specialinvoke v33.<java.io.FileNotFoundException: void <init>(java.lang.String)>(v34);
v35 = virtualinvoke v1.<java.net.URI: java.lang.String toString()>();
v36 = interfaceinvoke v32.<io.smallrye.config.ConfigMessages: java.lang.IllegalArgumentException failedToLoadResource(java.lang.Throwable,java.lang.String)>(v33, v35);
throw v36;
label11:
return v3;
catch java.lang.Throwable from label05 to label07 with label08;
catch java.io.IOException from label04 to label09 with label09;
}
protected java.util.List tryClassPath(java.net.URI, int, java.lang.ClassLoader)
{
io.smallrye.config.AbstractLocationConfigSourceLoader v0;
java.io.IOException v9;
io.smallrye.config.AbstractLocationConfigSourceLoader$ConfigSourcePathConsumer v8;
java.lang.IllegalArgumentException v12, v13;
java.util.ArrayList v4;
java.util.List v14;
io.smallrye.config.ConfigMessages v10;
int v2;
java.lang.ClassLoader v3, v5, v6;
java.lang.String v11, v7;
java.net.URI v1;
v0 := @this: io.smallrye.config.AbstractLocationConfigSourceLoader;
v1 := @parameter0: java.net.URI;
v2 := @parameter1: int;
v3 := @parameter2: java.lang.ClassLoader;
v4 = new java.util.ArrayList;
specialinvoke v4.<java.util.ArrayList: void <init>()>();
if v3 == null goto label1;
v5 = v3;
goto label2;
label1:
v5 = staticinvoke <io.smallrye.config.SecuritySupport: java.lang.ClassLoader getContextClassLoader()>();
label2:
v6 = v5;
label3:
v7 = virtualinvoke v1.<java.net.URI: java.lang.String getPath()>();
v8 = new io.smallrye.config.AbstractLocationConfigSourceLoader$ConfigSourcePathConsumer;
specialinvoke v8.<io.smallrye.config.AbstractLocationConfigSourceLoader$ConfigSourcePathConsumer: void <init>(io.smallrye.config.AbstractLocationConfigSourceLoader,int,java.util.List)>(v0, v2, v4);
staticinvoke <io.smallrye.common.classloader.ClassPathUtils: void consumeAsPaths(java.lang.ClassLoader,java.lang.String,java.util.function.Consumer)>(v5, v7, v8);
label4:
goto label7;
label5:
v9 := @caughtexception;
v10 = <io.smallrye.config.ConfigMessages: io.smallrye.config.ConfigMessages msg>;
v11 = virtualinvoke v1.<java.net.URI: java.lang.String toString()>();
v12 = interfaceinvoke v10.<io.smallrye.config.ConfigMessages: java.lang.IllegalArgumentException failedToLoadResource(java.lang.Throwable,java.lang.String)>(v9, v11);
throw v12;
label6:
v13 := @caughtexception;
v14 = virtualinvoke v0.<io.smallrye.config.AbstractLocationConfigSourceLoader: java.util.List fallbackToUnknownProtocol(java.net.URI,int,java.lang.ClassLoader)>(v1, v2, v6);
interfaceinvoke v4.<java.util.List: boolean addAll(java.util.Collection)>(v14);
label7:
return v4;
catch java.io.IOException from label3 to label4 with label5;
catch java.lang.IllegalArgumentException from label3 to label4 with label6;
}
protected java.util.List tryJar(java.net.URI, int)
{
io.smallrye.config.AbstractLocationConfigSourceLoader v0;
java.net.URL v4;
io.smallrye.config.AbstractLocationConfigSourceLoader$ConfigSourcePathConsumer v5;
java.lang.IllegalArgumentException v9;
java.lang.Exception v6;
java.util.ArrayList v3;
io.smallrye.config.ConfigMessages v7;
int v2;
java.lang.String v8;
java.net.URI v1;
v0 := @this: io.smallrye.config.AbstractLocationConfigSourceLoader;
v1 := @parameter0: java.net.URI;
v2 := @parameter1: int;
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
label1:
v4 = staticinvoke <io.smallrye.config.AbstractLocationConfigSourceLoader: java.net.URL toURL(java.net.URI)>(v1);
v5 = new io.smallrye.config.AbstractLocationConfigSourceLoader$ConfigSourcePathConsumer;
specialinvoke v5.<io.smallrye.config.AbstractLocationConfigSourceLoader$ConfigSourcePathConsumer: void <init>(io.smallrye.config.AbstractLocationConfigSourceLoader,int,java.util.List)>(v0, v2, v3);
staticinvoke <io.smallrye.common.classloader.ClassPathUtils: void consumeAsPath(java.net.URL,java.util.function.Consumer)>(v4, v5);
label2:
goto label4;
label3:
v6 := @caughtexception;
v7 = <io.smallrye.config.ConfigMessages: io.smallrye.config.ConfigMessages msg>;
v8 = virtualinvoke v1.<java.net.URI: java.lang.String toString()>();
v9 = interfaceinvoke v7.<io.smallrye.config.ConfigMessages: java.lang.IllegalArgumentException failedToLoadResource(java.lang.Throwable,java.lang.String)>(v6, v8);
throw v9;
label4:
return v3;
catch java.lang.Exception from label1 to label2 with label3;
}
protected java.util.List fallbackToUnknownProtocol(java.net.URI, int, java.lang.ClassLoader)
{
io.smallrye.config.AbstractLocationConfigSourceLoader v0;
java.util.Enumeration v6;
io.smallrye.config.ConfigurableConfigSource v12;
java.util.ArrayList v4;
io.smallrye.config.ConfigMessages v15;
int v2;
java.lang.String v16, v5, v9;
java.net.URI v1;
boolean v10, v7;
org.eclipse.microprofile.config.spi.ConfigSource v11;
java.io.IOException v14;
java.lang.IllegalArgumentException v17;
java.lang.Object v8;
java.lang.ClassLoader v3;
io.smallrye.config.ProfileConfigSourceFactory v13;
v0 := @this: io.smallrye.config.AbstractLocationConfigSourceLoader;
v1 := @parameter0: java.net.URI;
v2 := @parameter1: int;
v3 := @parameter2: java.lang.ClassLoader;
v4 = new java.util.ArrayList;
specialinvoke v4.<java.util.ArrayList: void <init>()>();
label1:
v5 = virtualinvoke v1.<java.net.URI: java.lang.String toString()>();
v6 = virtualinvoke v3.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(v5);
label2:
v7 = interfaceinvoke v6.<java.util.Enumeration: boolean hasMoreElements()>();
if v7 == 0 goto label4;
v8 = interfaceinvoke v6.<java.util.Enumeration: java.lang.Object nextElement()>();
v9 = virtualinvoke v8.<java.net.URL: java.lang.String getFile()>();
v10 = specialinvoke v0.<io.smallrye.config.AbstractLocationConfigSourceLoader: boolean validExtension(java.lang.String)>(v9);
if v10 == 0 goto label2;
v11 = specialinvoke v0.<io.smallrye.config.AbstractLocationConfigSourceLoader: org.eclipse.microprofile.config.spi.ConfigSource addConfigSource(java.net.URL,int,java.util.List)>(v8, v2, v4);
v12 = new io.smallrye.config.ConfigurableConfigSource;
v13 = staticinvoke <io.smallrye.config.AbstractLocationConfigSourceLoader$lambda_fallbackToUnknownProtocol_0__3113: io.smallrye.config.ProfileConfigSourceFactory bootstrap$(io.smallrye.config.AbstractLocationConfigSourceLoader,org.eclipse.microprofile.config.spi.ConfigSource,java.net.URI,java.lang.ClassLoader)>(v0, v11, v1, v3);
specialinvoke v12.<io.smallrye.config.ConfigurableConfigSource: void <init>(io.smallrye.config.ConfigSourceFactory)>(v13);
interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(v12);
goto label2;
label3:
v14 := @caughtexception;
v15 = <io.smallrye.config.ConfigMessages: io.smallrye.config.ConfigMessages msg>;
v16 = virtualinvoke v1.<java.net.URI: java.lang.String toString()>();
v17 = interfaceinvoke v15.<io.smallrye.config.ConfigMessages: java.lang.IllegalArgumentException failedToLoadResource(java.lang.Throwable,java.lang.String)>(v14, v16);
throw v17;
label4:
return v4;
catch java.io.IOException from label1 to label3 with label3;
}
protected java.util.List tryHttpResource(java.net.URI, int)
{
org.eclipse.microprofile.config.spi.ConfigSource v6;
io.smallrye.config.AbstractLocationConfigSourceLoader v0;
java.util.ArrayList v3;
java.util.List v7;
int v2;
java.lang.String v4;
java.net.URI v1;
boolean v5;
v0 := @this: io.smallrye.config.AbstractLocationConfigSourceLoader;
v1 := @parameter0: java.net.URI;
v2 := @parameter1: int;
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
v4 = virtualinvoke v1.<java.net.URI: java.lang.String getPath()>();
v5 = specialinvoke v0.<io.smallrye.config.AbstractLocationConfigSourceLoader: boolean validExtension(java.lang.String)>(v4);
if v5 == 0 goto label1;
v6 = specialinvoke v0.<io.smallrye.config.AbstractLocationConfigSourceLoader: org.eclipse.microprofile.config.spi.ConfigSource addConfigSource(java.net.URI,int,java.util.List)>(v1, v2, v3);
v7 = virtualinvoke v0.<io.smallrye.config.AbstractLocationConfigSourceLoader: java.util.List tryProfiles(java.net.URI,org.eclipse.microprofile.config.spi.ConfigSource)>(v1, v6);
interfaceinvoke v3.<java.util.List: boolean addAll(java.util.Collection)>(v7);
label1:
return v3;
}
protected java.util.List tryProfiles(java.net.URI, org.eclipse.microprofile.config.spi.ConfigSource)
{
org.eclipse.microprofile.config.spi.ConfigSource v2;
io.smallrye.config.AbstractLocationConfigSourceLoader v0;
io.smallrye.config.AbstractLocationConfigSourceLoader$1 v5;
io.smallrye.config.ConfigurableConfigSource v4;
java.net.URI v1;
java.util.ArrayList v3;
v0 := @this: io.smallrye.config.AbstractLocationConfigSourceLoader;
v1 := @parameter0: java.net.URI;
v2 := @parameter1: org.eclipse.microprofile.config.spi.ConfigSource;
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
v4 = new io.smallrye.config.ConfigurableConfigSource;
v5 = new io.smallrye.config.AbstractLocationConfigSourceLoader$1;
specialinvoke v5.<io.smallrye.config.AbstractLocationConfigSourceLoader$1: void <init>(io.smallrye.config.AbstractLocationConfigSourceLoader,org.eclipse.microprofile.config.spi.ConfigSource,java.net.URI)>(v0, v2, v1);
specialinvoke v4.<io.smallrye.config.ConfigurableConfigSource: void <init>(io.smallrye.config.ConfigSourceFactory)>(v5);
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v4);
return v3;
}
private static java.net.URL toURL(java.net.URI)
{
java.net.MalformedURLException v2;
java.net.URL v1;
java.net.URI v0;
java.lang.IllegalArgumentException v3;
v0 := @parameter0: java.net.URI;
label1:
v1 = virtualinvoke v0.<java.net.URI: java.net.URL toURL()>();
label2:
return v1;
label3:
v2 := @caughtexception;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(v2);
throw v3;
catch java.net.MalformedURLException from label1 to label2 with label3;
}
private org.eclipse.microprofile.config.spi.ConfigSource addConfigSource(java.net.URI, int, java.util.List)
{
org.eclipse.microprofile.config.spi.ConfigSource v5;
java.util.List v3;
io.smallrye.config.AbstractLocationConfigSourceLoader v0;
java.net.URL v4;
int v2;
java.net.URI v1;
v0 := @this: io.smallrye.config.AbstractLocationConfigSourceLoader;
v1 := @parameter0: java.net.URI;
v2 := @parameter1: int;
v3 := @parameter2: java.util.List;
v4 = staticinvoke <io.smallrye.config.AbstractLocationConfigSourceLoader: java.net.URL toURL(java.net.URI)>(v1);
v5 = specialinvoke v0.<io.smallrye.config.AbstractLocationConfigSourceLoader: org.eclipse.microprofile.config.spi.ConfigSource addConfigSource(java.net.URL,int,java.util.List)>(v4, v2, v3);
return v5;
}
private org.eclipse.microprofile.config.spi.ConfigSource addConfigSource(java.net.URL, int, java.util.List)
{
org.eclipse.microprofile.config.spi.ConfigSource v4;
io.smallrye.config.AbstractLocationConfigSourceLoader v0;
java.net.URL v1;
java.io.IOException v5;
java.lang.IllegalArgumentException v8;
java.util.List v3;
io.smallrye.config.ConfigMessages v6;
int v2;
java.lang.String v7;
v0 := @this: io.smallrye.config.AbstractLocationConfigSourceLoader;
v1 := @parameter0: java.net.URL;
v2 := @parameter1: int;
v3 := @parameter2: java.util.List;
label1:
v4 = virtualinvoke v0.<io.smallrye.config.AbstractLocationConfigSourceLoader: org.eclipse.microprofile.config.spi.ConfigSource loadConfigSource(java.net.URL,int)>(v1, v2);
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v4);
label2:
return v4;
label3:
v5 := @caughtexception;
v6 = <io.smallrye.config.ConfigMessages: io.smallrye.config.ConfigMessages msg>;
v7 = virtualinvoke v1.<java.net.URL: java.lang.String toString()>();
v8 = interfaceinvoke v6.<io.smallrye.config.ConfigMessages: java.lang.IllegalArgumentException failedToLoadResource(java.lang.Throwable,java.lang.String)>(v5, v7);
throw v8;
catch java.io.IOException from label1 to label2 with label3;
}
private void addProfileConfigSource(java.net.URL, int, java.util.List)
{
org.eclipse.microprofile.config.spi.ConfigSource v4;
io.smallrye.config.AbstractLocationConfigSourceLoader v0;
java.net.URL v1;
java.io.IOException v5, v6;
java.lang.IllegalArgumentException v9;
java.util.List v3;
io.smallrye.config.ConfigMessages v7;
int v2;
java.lang.String v8;
v0 := @this: io.smallrye.config.AbstractLocationConfigSourceLoader;
v1 := @parameter0: java.net.URL;
v2 := @parameter1: int;
v3 := @parameter2: java.util.List;
label1:
v4 = virtualinvoke v0.<io.smallrye.config.AbstractLocationConfigSourceLoader: org.eclipse.microprofile.config.spi.ConfigSource loadConfigSource(java.net.URL,int)>(v1, v2);
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v4);
label2:
goto label5;
label3:
v5 := @caughtexception;
goto label5;
label4:
v6 := @caughtexception;
v7 = <io.smallrye.config.ConfigMessages: io.smallrye.config.ConfigMessages msg>;
v8 = virtualinvoke v1.<java.net.URL: java.lang.String toString()>();
v9 = interfaceinvoke v7.<io.smallrye.config.ConfigMessages: java.lang.IllegalArgumentException failedToLoadResource(java.lang.Throwable,java.lang.String)>(v6, v8);
throw v9;
label5:
return;
catch java.io.FileNotFoundException from label1 to label2 with label3;
catch java.nio.file.NoSuchFileException from label1 to label2 with label3;
catch java.io.IOException from label1 to label2 with label4;
}
public boolean validExtension(java.nio.file.Path)
{
io.smallrye.config.AbstractLocationConfigSourceLoader v0;
java.lang.String v3;
java.nio.file.Path v1, v2;
boolean v4;
v0 := @this: io.smallrye.config.AbstractLocationConfigSourceLoader;
v1 := @parameter0: java.nio.file.Path;
v2 = interfaceinvoke v1.<java.nio.file.Path: java.nio.file.Path getFileName()>();
v3 = interfaceinvoke v2.<java.nio.file.Path: java.lang.String toString()>();
v4 = specialinvoke v0.<io.smallrye.config.AbstractLocationConfigSourceLoader: boolean validExtension(java.lang.String)>(v3);
return v4;
}
private boolean validExtension(java.lang.String)
{
io.smallrye.config.AbstractLocationConfigSourceLoader v0;
java.lang.String[] v2;
int v3, v4, v5;
java.lang.String v1, v6;
boolean v7;
v0 := @this: io.smallrye.config.AbstractLocationConfigSourceLoader;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.smallrye.config.AbstractLocationConfigSourceLoader: java.lang.String[] getFileExtensions()>();
v3 = lengthof v2;
if v3 != 0 goto label1;
return 1;
label1:
v4 = lengthof v2;
v5 = 0;
label2:
if v5 >= v4 goto label4;
v6 = v2[v5];
v7 = virtualinvoke v1.<java.lang.String: boolean endsWith(java.lang.String)>(v6);
if v7 == 0 goto label3;
return 1;
label3:
v5 = v5 + 1;
goto label2;
label4:
return 0;
}
private static java.net.URI addProfileName(java.net.URI, java.lang.String)
{
java.lang.IllegalStateException v28;
java.net.URISyntaxException v27;
java.lang.AssertionError v12;
int v13, v14, v15, v24;
java.lang.String v1, v10, v17, v18, v19, v2, v21, v22, v23, v25, v26, v3, v5, v8;
java.net.URI v0, v20, v6, v7, v9;
boolean v11, v4;
char v16;
v0 := @parameter0: java.net.URI;
v1 := @parameter1: java.lang.String;
v2 = "jar";
v3 = virtualinvoke v0.<java.net.URI: java.lang.String getScheme()>();
v4 = virtualinvoke v2.<java.lang.String: boolean equals(java.lang.Object)>(v3);
if v4 == 0 goto label1;
v5 = virtualinvoke v0.<java.net.URI: java.lang.String getRawSchemeSpecificPart()>();
v6 = staticinvoke <java.net.URI: java.net.URI create(java.lang.String)>(v5);
v7 = staticinvoke <io.smallrye.config.AbstractLocationConfigSourceLoader: java.net.URI addProfileName(java.net.URI,java.lang.String)>(v6, v1);
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.net.URI)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("jar:\u0001");
v9 = staticinvoke <java.net.URI: java.net.URI create(java.lang.String)>(v8);
return v9;
label1:
v10 = virtualinvoke v0.<java.net.URI: java.lang.String getPath()>();
v11 = <io.smallrye.config.AbstractLocationConfigSourceLoader: boolean $assertionsDisabled>;
if v11 != 0 goto label2;
if v10 != null goto label2;
v12 = new java.lang.AssertionError;
specialinvoke v12.<java.lang.AssertionError: void <init>()>();
throw v12;
label2:
v13 = virtualinvoke v10.<java.lang.String: int lastIndexOf(java.lang.String)>(".");
v14 = (int) -1;
if v13 == v14 goto label3;
if v13 == 0 goto label3;
v15 = v13 - 1;
v16 = virtualinvoke v10.<java.lang.String: char charAt(int)>(v15);
if v16 == 47 goto label3;
v17 = virtualinvoke v10.<java.lang.String: java.lang.String substring(int,int)>(0, v13);
v18 = virtualinvoke v10.<java.lang.String: java.lang.String substring(int)>(v13);
v19 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.String)>(v17, v1, v18) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001-\u0001\u0001");
goto label4;
label3:
v19 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v10, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001-\u0001");
label4:
v20 = new java.net.URI;
v21 = virtualinvoke v0.<java.net.URI: java.lang.String getScheme()>();
v22 = virtualinvoke v0.<java.net.URI: java.lang.String getAuthority()>();
v23 = virtualinvoke v0.<java.net.URI: java.lang.String getHost()>();
v24 = virtualinvoke v0.<java.net.URI: int getPort()>();
v25 = virtualinvoke v0.<java.net.URI: java.lang.String getQuery()>();
v26 = virtualinvoke v0.<java.net.URI: java.lang.String getFragment()>();
specialinvoke v20.<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>(v21, v22, v23, v24, v19, v25, v26);
label5:
return v20;
label6:
v27 := @caughtexception;
v28 = new java.lang.IllegalStateException;
specialinvoke v28.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(v27);
throw v28;
catch java.net.URISyntaxException from label4 to label5 with label6;
}
static void <clinit>()
{
io.smallrye.config.AbstractLocationConfigSourceLoader$URIConverter v3;
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/smallrye/config/AbstractLocationConfigSourceLoader;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.smallrye.config.AbstractLocationConfigSourceLoader: boolean $assertionsDisabled> = v2;
v3 = new io.smallrye.config.AbstractLocationConfigSourceLoader$URIConverter;
specialinvoke v3.<io.smallrye.config.AbstractLocationConfigSourceLoader$URIConverter: void <init>()>();
<io.smallrye.config.AbstractLocationConfigSourceLoader: org.eclipse.microprofile.config.spi.Converter URI_CONVERTER> = v3;
return;
}
}