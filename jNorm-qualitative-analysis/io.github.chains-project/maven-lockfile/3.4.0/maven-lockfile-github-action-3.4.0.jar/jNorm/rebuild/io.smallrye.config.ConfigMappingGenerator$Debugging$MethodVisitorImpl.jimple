final class io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl extends org.objectweb.asm.MethodVisitor
{
void <init>(int)
{
int v1;
io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl v0;
v0 := @this: io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl;
v1 := @parameter0: int;
specialinvoke v0.<org.objectweb.asm.MethodVisitor: void <init>(int)>(v1);
return;
}
void <init>(int, org.objectweb.asm.MethodVisitor)
{
int v1;
org.objectweb.asm.MethodVisitor v2;
io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl v0;
v0 := @this: io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl;
v1 := @parameter0: int;
v2 := @parameter1: org.objectweb.asm.MethodVisitor;
specialinvoke v0.<org.objectweb.asm.MethodVisitor: void <init>(int,org.objectweb.asm.MethodVisitor)>(v1, v2);
return;
}
public void visitInsn(int)
{
io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl v0;
int v1, v4;
org.objectweb.asm.Label v2;
java.lang.StackTraceElement v3;
v0 := @this: io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl;
v1 := @parameter0: int;
v2 = new org.objectweb.asm.Label;
specialinvoke v2.<org.objectweb.asm.Label: void <init>()>();
virtualinvoke v0.<io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl: void visitLabel(org.objectweb.asm.Label)>(v2);
v3 = staticinvoke <io.smallrye.config.ConfigMappingGenerator$Debugging: java.lang.StackTraceElement getCaller()>();
v4 = virtualinvoke v3.<java.lang.StackTraceElement: int getLineNumber()>();
virtualinvoke v0.<io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl: void visitLineNumber(int,org.objectweb.asm.Label)>(v4, v2);
specialinvoke v0.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(v1);
return;
}
public void visitIntInsn(int, int)
{
io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl v0;
int v1, v2, v5;
org.objectweb.asm.Label v3;
java.lang.StackTraceElement v4;
v0 := @this: io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = new org.objectweb.asm.Label;
specialinvoke v3.<org.objectweb.asm.Label: void <init>()>();
virtualinvoke v0.<io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl: void visitLabel(org.objectweb.asm.Label)>(v3);
v4 = staticinvoke <io.smallrye.config.ConfigMappingGenerator$Debugging: java.lang.StackTraceElement getCaller()>();
v5 = virtualinvoke v4.<java.lang.StackTraceElement: int getLineNumber()>();
virtualinvoke v0.<io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl: void visitLineNumber(int,org.objectweb.asm.Label)>(v5, v3);
specialinvoke v0.<org.objectweb.asm.MethodVisitor: void visitIntInsn(int,int)>(v1, v2);
return;
}
public void visitVarInsn(int, int)
{
io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl v0;
int v1, v2, v5;
org.objectweb.asm.Label v3;
java.lang.StackTraceElement v4;
v0 := @this: io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = new org.objectweb.asm.Label;
specialinvoke v3.<org.objectweb.asm.Label: void <init>()>();
virtualinvoke v0.<io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl: void visitLabel(org.objectweb.asm.Label)>(v3);
v4 = staticinvoke <io.smallrye.config.ConfigMappingGenerator$Debugging: java.lang.StackTraceElement getCaller()>();
v5 = virtualinvoke v4.<java.lang.StackTraceElement: int getLineNumber()>();
virtualinvoke v0.<io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl: void visitLineNumber(int,org.objectweb.asm.Label)>(v5, v3);
specialinvoke v0.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(v1, v2);
return;
}
public void visitTypeInsn(int, java.lang.String)
{
io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl v0;
int v1, v5;
org.objectweb.asm.Label v3;
java.lang.StackTraceElement v4;
java.lang.String v2;
v0 := @this: io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.String;
v3 = new org.objectweb.asm.Label;
specialinvoke v3.<org.objectweb.asm.Label: void <init>()>();
virtualinvoke v0.<io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl: void visitLabel(org.objectweb.asm.Label)>(v3);
v4 = staticinvoke <io.smallrye.config.ConfigMappingGenerator$Debugging: java.lang.StackTraceElement getCaller()>();
v5 = virtualinvoke v4.<java.lang.StackTraceElement: int getLineNumber()>();
virtualinvoke v0.<io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl: void visitLineNumber(int,org.objectweb.asm.Label)>(v5, v3);
specialinvoke v0.<org.objectweb.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(v1, v2);
return;
}
public void visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)
{
io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl v0;
org.objectweb.asm.Label v5;
int v1, v7;
java.lang.StackTraceElement v6;
java.lang.String v2, v3, v4;
v0 := @this: io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.String;
v5 = new org.objectweb.asm.Label;
specialinvoke v5.<org.objectweb.asm.Label: void <init>()>();
virtualinvoke v0.<io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl: void visitLabel(org.objectweb.asm.Label)>(v5);
v6 = staticinvoke <io.smallrye.config.ConfigMappingGenerator$Debugging: java.lang.StackTraceElement getCaller()>();
v7 = virtualinvoke v6.<java.lang.StackTraceElement: int getLineNumber()>();
virtualinvoke v0.<io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl: void visitLineNumber(int,org.objectweb.asm.Label)>(v7, v5);
specialinvoke v0.<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3, v4);
return;
}
public void visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)
{
io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl v0;
org.objectweb.asm.Label v5;
int v1, v7;
java.lang.StackTraceElement v6;
java.lang.String v2, v3, v4;
v0 := @this: io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.String;
v5 = new org.objectweb.asm.Label;
specialinvoke v5.<org.objectweb.asm.Label: void <init>()>();
virtualinvoke v0.<io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl: void visitLabel(org.objectweb.asm.Label)>(v5);
v6 = staticinvoke <io.smallrye.config.ConfigMappingGenerator$Debugging: java.lang.StackTraceElement getCaller()>();
v7 = virtualinvoke v6.<java.lang.StackTraceElement: int getLineNumber()>();
virtualinvoke v0.<io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl: void visitLineNumber(int,org.objectweb.asm.Label)>(v7, v5);
specialinvoke v0.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3, v4);
return;
}
public void visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String, boolean)
{
io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl v0;
org.objectweb.asm.Label v6;
int v1, v8;
java.lang.StackTraceElement v7;
java.lang.String v2, v3, v4;
boolean v5;
v0 := @this: io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.String;
v5 := @parameter4: boolean;
v6 = new org.objectweb.asm.Label;
specialinvoke v6.<org.objectweb.asm.Label: void <init>()>();
virtualinvoke v0.<io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl: void visitLabel(org.objectweb.asm.Label)>(v6);
v7 = staticinvoke <io.smallrye.config.ConfigMappingGenerator$Debugging: java.lang.StackTraceElement getCaller()>();
v8 = virtualinvoke v7.<java.lang.StackTraceElement: int getLineNumber()>();
virtualinvoke v0.<io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl: void visitLineNumber(int,org.objectweb.asm.Label)>(v8, v6);
specialinvoke v0.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String,boolean)>(v1, v2, v3, v4, v5);
return;
}
public transient void visitInvokeDynamicInsn(java.lang.String, java.lang.String, org.objectweb.asm.Handle, java.lang.Object[])
{
java.lang.Object[] v4;
io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl v0;
org.objectweb.asm.Label v5;
org.objectweb.asm.Handle v3;
int v7;
java.lang.StackTraceElement v6;
java.lang.String v1, v2;
v0 := @this: io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: org.objectweb.asm.Handle;
v4 := @parameter3: java.lang.Object[];
v5 = new org.objectweb.asm.Label;
specialinvoke v5.<org.objectweb.asm.Label: void <init>()>();
virtualinvoke v0.<io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl: void visitLabel(org.objectweb.asm.Label)>(v5);
v6 = staticinvoke <io.smallrye.config.ConfigMappingGenerator$Debugging: java.lang.StackTraceElement getCaller()>();
v7 = virtualinvoke v6.<java.lang.StackTraceElement: int getLineNumber()>();
virtualinvoke v0.<io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl: void visitLineNumber(int,org.objectweb.asm.Label)>(v7, v5);
specialinvoke v0.<org.objectweb.asm.MethodVisitor: void visitInvokeDynamicInsn(java.lang.String,java.lang.String,org.objectweb.asm.Handle,java.lang.Object[])>(v1, v2, v3, v4);
return;
}
public void visitJumpInsn(int, org.objectweb.asm.Label)
{
io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl v0;
int v1, v5;
org.objectweb.asm.Label v2, v3;
java.lang.StackTraceElement v4;
v0 := @this: io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl;
v1 := @parameter0: int;
v2 := @parameter1: org.objectweb.asm.Label;
v3 = new org.objectweb.asm.Label;
specialinvoke v3.<org.objectweb.asm.Label: void <init>()>();
virtualinvoke v0.<io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl: void visitLabel(org.objectweb.asm.Label)>(v3);
v4 = staticinvoke <io.smallrye.config.ConfigMappingGenerator$Debugging: java.lang.StackTraceElement getCaller()>();
v5 = virtualinvoke v4.<java.lang.StackTraceElement: int getLineNumber()>();
virtualinvoke v0.<io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl: void visitLineNumber(int,org.objectweb.asm.Label)>(v5, v3);
specialinvoke v0.<org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,org.objectweb.asm.Label)>(v1, v2);
return;
}
public void visitLdcInsn(java.lang.Object)
{
io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl v0;
int v4;
org.objectweb.asm.Label v2;
java.lang.Object v1;
java.lang.StackTraceElement v3;
v0 := @this: io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl;
v1 := @parameter0: java.lang.Object;
v2 = new org.objectweb.asm.Label;
specialinvoke v2.<org.objectweb.asm.Label: void <init>()>();
virtualinvoke v0.<io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl: void visitLabel(org.objectweb.asm.Label)>(v2);
v3 = staticinvoke <io.smallrye.config.ConfigMappingGenerator$Debugging: java.lang.StackTraceElement getCaller()>();
v4 = virtualinvoke v3.<java.lang.StackTraceElement: int getLineNumber()>();
virtualinvoke v0.<io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl: void visitLineNumber(int,org.objectweb.asm.Label)>(v4, v2);
specialinvoke v0.<org.objectweb.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(v1);
return;
}
public void visitIincInsn(int, int)
{
io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl v0;
int v1, v2, v5;
org.objectweb.asm.Label v3;
java.lang.StackTraceElement v4;
v0 := @this: io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = new org.objectweb.asm.Label;
specialinvoke v3.<org.objectweb.asm.Label: void <init>()>();
virtualinvoke v0.<io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl: void visitLabel(org.objectweb.asm.Label)>(v3);
v4 = staticinvoke <io.smallrye.config.ConfigMappingGenerator$Debugging: java.lang.StackTraceElement getCaller()>();
v5 = virtualinvoke v4.<java.lang.StackTraceElement: int getLineNumber()>();
virtualinvoke v0.<io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl: void visitLineNumber(int,org.objectweb.asm.Label)>(v5, v3);
specialinvoke v0.<org.objectweb.asm.MethodVisitor: void visitIincInsn(int,int)>(v1, v2);
return;
}
public transient void visitTableSwitchInsn(int, int, org.objectweb.asm.Label, org.objectweb.asm.Label[])
{
io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl v0;
org.objectweb.asm.Label v3, v5;
int v1, v2, v7;
java.lang.StackTraceElement v6;
org.objectweb.asm.Label[] v4;
v0 := @this: io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: org.objectweb.asm.Label;
v4 := @parameter3: org.objectweb.asm.Label[];
v5 = new org.objectweb.asm.Label;
specialinvoke v5.<org.objectweb.asm.Label: void <init>()>();
virtualinvoke v0.<io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl: void visitLabel(org.objectweb.asm.Label)>(v5);
v6 = staticinvoke <io.smallrye.config.ConfigMappingGenerator$Debugging: java.lang.StackTraceElement getCaller()>();
v7 = virtualinvoke v6.<java.lang.StackTraceElement: int getLineNumber()>();
virtualinvoke v0.<io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl: void visitLineNumber(int,org.objectweb.asm.Label)>(v7, v5);
specialinvoke v0.<org.objectweb.asm.MethodVisitor: void visitTableSwitchInsn(int,int,org.objectweb.asm.Label,org.objectweb.asm.Label[])>(v1, v2, v3, v4);
return;
}
public void visitLookupSwitchInsn(org.objectweb.asm.Label, int[], org.objectweb.asm.Label[])
{
io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl v0;
int[] v2;
int v6;
org.objectweb.asm.Label v1, v4;
java.lang.StackTraceElement v5;
org.objectweb.asm.Label[] v3;
v0 := @this: io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl;
v1 := @parameter0: org.objectweb.asm.Label;
v2 := @parameter1: int[];
v3 := @parameter2: org.objectweb.asm.Label[];
v4 = new org.objectweb.asm.Label;
specialinvoke v4.<org.objectweb.asm.Label: void <init>()>();
virtualinvoke v0.<io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl: void visitLabel(org.objectweb.asm.Label)>(v4);
v5 = staticinvoke <io.smallrye.config.ConfigMappingGenerator$Debugging: java.lang.StackTraceElement getCaller()>();
v6 = virtualinvoke v5.<java.lang.StackTraceElement: int getLineNumber()>();
virtualinvoke v0.<io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl: void visitLineNumber(int,org.objectweb.asm.Label)>(v6, v4);
specialinvoke v0.<org.objectweb.asm.MethodVisitor: void visitLookupSwitchInsn(org.objectweb.asm.Label,int[],org.objectweb.asm.Label[])>(v1, v2, v3);
return;
}
public void visitMultiANewArrayInsn(java.lang.String, int)
{
io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl v0;
int v2, v5;
org.objectweb.asm.Label v3;
java.lang.StackTraceElement v4;
java.lang.String v1;
v0 := @this: io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 = new org.objectweb.asm.Label;
specialinvoke v3.<org.objectweb.asm.Label: void <init>()>();
virtualinvoke v0.<io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl: void visitLabel(org.objectweb.asm.Label)>(v3);
v4 = staticinvoke <io.smallrye.config.ConfigMappingGenerator$Debugging: java.lang.StackTraceElement getCaller()>();
v5 = virtualinvoke v4.<java.lang.StackTraceElement: int getLineNumber()>();
virtualinvoke v0.<io.smallrye.config.ConfigMappingGenerator$Debugging$MethodVisitorImpl: void visitLineNumber(int,org.objectweb.asm.Label)>(v5, v3);
specialinvoke v0.<org.objectweb.asm.MethodVisitor: void visitMultiANewArrayInsn(java.lang.String,int)>(v1, v2);
return;
}
}