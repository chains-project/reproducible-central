final class io.smallrye.config.ConfigMappingProvider extends java.lang.Object implements java.io.Serializable
{
private static final long serialVersionUID;
private static final java.util.function.BiConsumer DO_NOTHING;
private static final io.smallrye.config.KeyMap IGNORE_EVERYTHING;
private final java.util.Map roots;
private final io.smallrye.config.KeyMap matchActions;
private final java.util.Map properties;
private final io.smallrye.config.KeyMap defaultValues;
private final boolean validateUnknown;
void <init>(io.smallrye.config.ConfigMappingProvider$Builder)
{
io.smallrye.config.ConfigMappingProvider$GetRootAction v23;
java.util.Map v3, v9;
io.smallrye.config.KeyMap v26, v27, v37, v39, v4, v41, v42, v6;
boolean v12, v16, v18, v21, v31, v36, v7;
io.smallrye.config.ConfigMappingProvider$Builder v1;
java.util.Set v10;
java.util.List v29;
io.smallrye.config.ConfigMappingInterface v25;
java.util.HashMap v2, v5;
io.smallrye.config.ConfigMappingInterface$NamingStrategy v28;
int v33, v34, v38;
java.util.function.BiConsumer v40, v43;
java.lang.String v17, v35;
io.smallrye.config.ConfigMappingProvider v0;
java.util.Iterator v11, v20, v30;
io.smallrye.config.NameIterator v14;
java.lang.Object v13, v15, v19, v22, v24, v32;
java.util.ArrayDeque v8;
v0 := @this: io.smallrye.config.ConfigMappingProvider;
v1 := @parameter0: io.smallrye.config.ConfigMappingProvider$Builder;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.HashMap;
v3 = v1.<io.smallrye.config.ConfigMappingProvider$Builder: java.util.Map roots>;
specialinvoke v2.<java.util.HashMap: void <init>(java.util.Map)>(v3);
v0.<io.smallrye.config.ConfigMappingProvider: java.util.Map roots> = v2;
v4 = new io.smallrye.config.KeyMap;
specialinvoke v4.<io.smallrye.config.KeyMap: void <init>()>();
v0.<io.smallrye.config.ConfigMappingProvider: io.smallrye.config.KeyMap matchActions> = v4;
v5 = new java.util.HashMap;
specialinvoke v5.<java.util.HashMap: void <init>()>();
v0.<io.smallrye.config.ConfigMappingProvider: java.util.Map properties> = v5;
v6 = new io.smallrye.config.KeyMap;
specialinvoke v6.<io.smallrye.config.KeyMap: void <init>()>();
v0.<io.smallrye.config.ConfigMappingProvider: io.smallrye.config.KeyMap defaultValues> = v6;
v7 = v1.<io.smallrye.config.ConfigMappingProvider$Builder: boolean validateUnknown>;
v0.<io.smallrye.config.ConfigMappingProvider: boolean validateUnknown> = v7;
v8 = new java.util.ArrayDeque;
specialinvoke v8.<java.util.ArrayDeque: void <init>()>();
v9 = v0.<io.smallrye.config.ConfigMappingProvider: java.util.Map roots>;
v10 = interfaceinvoke v9.<java.util.Map: java.util.Set entrySet()>();
v11 = interfaceinvoke v10.<java.util.Set: java.util.Iterator iterator()>();
label01:
v12 = interfaceinvoke v11.<java.util.Iterator: boolean hasNext()>();
if v12 == 0 goto label07;
v13 = interfaceinvoke v11.<java.util.Iterator: java.lang.Object next()>();
v14 = new io.smallrye.config.NameIterator;
v15 = interfaceinvoke v13.<java.util.Map$Entry: java.lang.Object getKey()>();
specialinvoke v14.<io.smallrye.config.NameIterator: void <init>(java.lang.String)>(v15);
label02:
v16 = virtualinvoke v14.<io.smallrye.config.NameIterator: boolean hasNext()>();
if v16 == 0 goto label04;
v17 = virtualinvoke v14.<io.smallrye.config.NameIterator: java.lang.String getNextSegment()>();
v18 = virtualinvoke v17.<java.lang.String: boolean isEmpty()>();
if v18 != 0 goto label03;
virtualinvoke v8.<java.util.ArrayDeque: boolean add(java.lang.Object)>(v17);
label03:
virtualinvoke v14.<io.smallrye.config.NameIterator: void next()>();
goto label02;
label04:
v19 = interfaceinvoke v13.<java.util.Map$Entry: java.lang.Object getValue()>();
v20 = interfaceinvoke v19.<java.util.List: java.util.Iterator iterator()>();
label05:
v21 = interfaceinvoke v20.<java.util.Iterator: boolean hasNext()>();
if v21 == 0 goto label06;
v22 = interfaceinvoke v20.<java.util.Iterator: java.lang.Object next()>();
v23 = new io.smallrye.config.ConfigMappingProvider$GetRootAction;
v24 = interfaceinvoke v13.<java.util.Map$Entry: java.lang.Object getKey()>();
specialinvoke v23.<io.smallrye.config.ConfigMappingProvider$GetRootAction: void <init>(java.lang.Class,java.lang.String)>(v22, v24);
v25 = staticinvoke <io.smallrye.config.ConfigMappingLoader: io.smallrye.config.ConfigMappingInterface getConfigMapping(java.lang.Class)>(v22);
v26 = v0.<io.smallrye.config.ConfigMappingProvider: io.smallrye.config.KeyMap matchActions>;
v27 = v0.<io.smallrye.config.ConfigMappingProvider: io.smallrye.config.KeyMap defaultValues>;
v28 = virtualinvoke v25.<io.smallrye.config.ConfigMappingInterface: io.smallrye.config.ConfigMappingInterface$NamingStrategy getNamingStrategy()>();
specialinvoke v0.<io.smallrye.config.ConfigMappingProvider: void processEagerGroup(java.util.ArrayDeque,io.smallrye.config.KeyMap,io.smallrye.config.KeyMap,io.smallrye.config.ConfigMappingInterface$NamingStrategy,io.smallrye.config.ConfigMappingInterface,java.util.function.BiFunction)>(v8, v26, v27, v28, v25, v23);
goto label05;
label06:
virtualinvoke v8.<java.util.ArrayDeque: void clear()>();
goto label01;
label07:
v29 = v1.<io.smallrye.config.ConfigMappingProvider$Builder: java.util.List ignored>;
v30 = interfaceinvoke v29.<java.util.List: java.util.Iterator iterator()>();
label08:
v31 = interfaceinvoke v30.<java.util.Iterator: boolean hasNext()>();
if v31 == 0 goto label10;
v32 = interfaceinvoke v30.<java.util.Iterator: java.lang.Object next()>();
v33 = lengthof v32;
v34 = v33 - 1;
v35 = v32[v34];
v36 = virtualinvoke v35.<java.lang.String: boolean equals(java.lang.Object)>("**");
if v36 == 0 goto label09;
v37 = v0.<io.smallrye.config.ConfigMappingProvider: io.smallrye.config.KeyMap matchActions>;
v38 = v33 - 1;
v39 = virtualinvoke v37.<io.smallrye.config.KeyMap: io.smallrye.config.KeyMap findOrAdd(java.lang.String[],int,int)>(v32, 0, v38);
v40 = <io.smallrye.config.ConfigMappingProvider: java.util.function.BiConsumer DO_NOTHING>;
virtualinvoke v39.<io.smallrye.config.KeyMap: java.lang.Object putRootValue(java.lang.Object)>(v40);
staticinvoke <io.smallrye.config.ConfigMappingProvider: void ignoreRecursively(io.smallrye.config.KeyMap)>(v39);
goto label08;
label09:
v41 = v0.<io.smallrye.config.ConfigMappingProvider: io.smallrye.config.KeyMap matchActions>;
v42 = virtualinvoke v41.<io.smallrye.config.KeyMap: io.smallrye.config.KeyMap findOrAdd(java.lang.String[])>(v32);
v43 = <io.smallrye.config.ConfigMappingProvider: java.util.function.BiConsumer DO_NOTHING>;
virtualinvoke v42.<io.smallrye.config.KeyMap: java.lang.Object putRootValue(java.lang.Object)>(v43);
goto label08;
label10:
return;
}
static void ignoreRecursively(io.smallrye.config.KeyMap)
{
java.util.Iterator v7;
java.util.Collection v6;
java.util.function.BiConsumer v2;
io.smallrye.config.KeyMap v0, v3, v4, v5;
java.lang.Object v1, v9;
boolean v8;
v0 := @parameter0: io.smallrye.config.KeyMap;
v1 = virtualinvoke v0.<io.smallrye.config.KeyMap: java.lang.Object getRootValue()>();
if v1 != null goto label1;
v2 = <io.smallrye.config.ConfigMappingProvider: java.util.function.BiConsumer DO_NOTHING>;
virtualinvoke v0.<io.smallrye.config.KeyMap: java.lang.Object putRootValue(java.lang.Object)>(v2);
label1:
v3 = virtualinvoke v0.<io.smallrye.config.KeyMap: io.smallrye.config.KeyMap getAny()>();
if v3 != null goto label2;
v4 = <io.smallrye.config.ConfigMappingProvider: io.smallrye.config.KeyMap IGNORE_EVERYTHING>;
virtualinvoke v0.<io.smallrye.config.KeyMap: io.smallrye.config.KeyMap putAny(io.smallrye.config.KeyMap)>(v4);
goto label3;
label2:
v5 = virtualinvoke v0.<io.smallrye.config.KeyMap: io.smallrye.config.KeyMap getAny()>();
if v0 == v5 goto label3;
staticinvoke <io.smallrye.config.ConfigMappingProvider: void ignoreRecursively(io.smallrye.config.KeyMap)>(v5);
label3:
v6 = virtualinvoke v0.<io.smallrye.config.KeyMap: java.util.Collection values()>();
v7 = interfaceinvoke v6.<java.util.Collection: java.util.Iterator iterator()>();
label4:
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label5;
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <io.smallrye.config.ConfigMappingProvider: void ignoreRecursively(io.smallrye.config.KeyMap)>(v9);
goto label4;
label5:
return;
}
private void processEagerGroup(java.util.ArrayDeque, io.smallrye.config.KeyMap, io.smallrye.config.KeyMap, io.smallrye.config.ConfigMappingInterface$NamingStrategy, io.smallrye.config.ConfigMappingInterface, java.util.function.BiFunction)
{
io.smallrye.config.ConfigMappingInterface$Property v14;
java.util.function.BiFunction v6;
io.smallrye.config.ConfigMappingInterface v5, v9;
io.smallrye.config.ConfigMappingInterface$NamingStrategy v4;
java.util.HashSet v11;
int v12, v13, v7, v8;
io.smallrye.config.KeyMap v2, v3;
java.lang.String v16, v22, v24;
io.smallrye.config.ConfigMappingProvider v0;
java.lang.reflect.Method v15;
boolean v18, v19, v21, v23;
io.smallrye.config.NameIterator v20;
java.lang.Class v10;
java.util.ArrayDeque v1, v17;
v0 := @this: io.smallrye.config.ConfigMappingProvider;
v1 := @parameter0: java.util.ArrayDeque;
v2 := @parameter1: io.smallrye.config.KeyMap;
v3 := @parameter2: io.smallrye.config.KeyMap;
v4 := @parameter3: io.smallrye.config.ConfigMappingInterface$NamingStrategy;
v5 := @parameter4: io.smallrye.config.ConfigMappingInterface;
v6 := @parameter5: java.util.function.BiFunction;
v7 = virtualinvoke v5.<io.smallrye.config.ConfigMappingInterface: int getSuperTypeCount()>();
v8 = 0;
label1:
if v8 >= v7 goto label2;
v9 = virtualinvoke v5.<io.smallrye.config.ConfigMappingInterface: io.smallrye.config.ConfigMappingInterface getSuperType(int)>(v8);
specialinvoke v0.<io.smallrye.config.ConfigMappingProvider: void processEagerGroup(java.util.ArrayDeque,io.smallrye.config.KeyMap,io.smallrye.config.KeyMap,io.smallrye.config.ConfigMappingInterface$NamingStrategy,io.smallrye.config.ConfigMappingInterface,java.util.function.BiFunction)>(v1, v2, v3, v4, v9, v6);
v8 = v8 + 1;
goto label1;
label2:
v10 = virtualinvoke v5.<io.smallrye.config.ConfigMappingInterface: java.lang.Class getInterfaceType()>();
v11 = new java.util.HashSet;
specialinvoke v11.<java.util.HashSet: void <init>()>();
v12 = 0;
label3:
v13 = virtualinvoke v5.<io.smallrye.config.ConfigMappingInterface: int getPropertyCount()>();
if v12 >= v13 goto label9;
v14 = virtualinvoke v5.<io.smallrye.config.ConfigMappingInterface: io.smallrye.config.ConfigMappingInterface$Property getProperty(int)>(v12);
v15 = virtualinvoke v14.<io.smallrye.config.ConfigMappingInterface$Property: java.lang.reflect.Method getMethod()>();
v16 = virtualinvoke v15.<java.lang.reflect.Method: java.lang.String getName()>();
v17 = new java.util.ArrayDeque;
specialinvoke v17.<java.util.ArrayDeque: void <init>(java.util.Collection)>(v1);
v18 = virtualinvoke v11.<java.util.HashSet: boolean add(java.lang.Object)>(v16);
if v18 == 0 goto label8;
v19 = virtualinvoke v14.<io.smallrye.config.ConfigMappingInterface$Property: boolean isParentPropertyName()>();
if v19 != 0 goto label7;
v20 = new io.smallrye.config.NameIterator;
v21 = virtualinvoke v14.<io.smallrye.config.ConfigMappingInterface$Property: boolean hasPropertyName()>();
if v21 == 0 goto label4;
v22 = virtualinvoke v14.<io.smallrye.config.ConfigMappingInterface$Property: java.lang.String getPropertyName()>();
goto label5;
label4:
v22 = staticinvoke <io.smallrye.config.ConfigMappingProvider: java.lang.String propertyName(io.smallrye.config.ConfigMappingInterface$Property,io.smallrye.config.ConfigMappingInterface,io.smallrye.config.ConfigMappingInterface$NamingStrategy)>(v14, v5, v4);
label5:
specialinvoke v20.<io.smallrye.config.NameIterator: void <init>(java.lang.String)>(v22);
label6:
v23 = virtualinvoke v20.<io.smallrye.config.NameIterator: boolean hasNext()>();
if v23 == 0 goto label7;
v24 = virtualinvoke v20.<io.smallrye.config.NameIterator: java.lang.String getNextSegment()>();
virtualinvoke v17.<java.util.ArrayDeque: boolean add(java.lang.Object)>(v24);
virtualinvoke v20.<io.smallrye.config.NameIterator: void next()>();
goto label6;
label7:
specialinvoke v0.<io.smallrye.config.ConfigMappingProvider: void processProperty(java.util.ArrayDeque,io.smallrye.config.KeyMap,io.smallrye.config.KeyMap,io.smallrye.config.ConfigMappingInterface$NamingStrategy,io.smallrye.config.ConfigMappingInterface,java.util.function.BiFunction,java.lang.Class,java.lang.String,io.smallrye.config.ConfigMappingInterface$Property)>(v17, v2, v3, v4, v5, v6, v10, v16, v14);
label8:
v12 = v12 + 1;
goto label3;
label9:
return;
}
private void processProperty(java.util.ArrayDeque, io.smallrye.config.KeyMap, io.smallrye.config.KeyMap, io.smallrye.config.ConfigMappingInterface$NamingStrategy, io.smallrye.config.ConfigMappingInterface, java.util.function.BiFunction, java.lang.Class, java.lang.String, io.smallrye.config.ConfigMappingInterface$Property)
{
java.util.function.BiFunction v6;
io.smallrye.config.ConfigMappingProvider$GetOrCreateEnclosingGroupInGroup v16;
io.smallrye.config.ConfigMappingInterface$MayBeOptionalProperty v12;
io.smallrye.config.KeyMap v2, v21, v25, v3, v34, v38;
boolean v10, v13, v18, v20, v23, v28, v31, v33, v36, v41, v44, v46;
io.smallrye.config.ConfigMappingInterface$GroupProperty v14, v17;
io.smallrye.config.ConfigMappingInterface$LeafProperty v32;
io.smallrye.config.ConfigMappingInterface$OptionalProperty v11;
io.smallrye.config.ConfigMappingInterface$PrimitiveProperty v19;
io.smallrye.config.ConfigMappingInterface$Property v50, v9;
io.smallrye.config.ConfigMappingInterface v15, v5;
io.smallrye.config.ConfigMappingInterface$NamingStrategy v4;
java.util.function.BiConsumer v27, v30, v40, v43;
java.lang.String v22, v26, v35, v39, v49, v8;
io.smallrye.config.ConfigMappingProvider v0;
io.smallrye.config.ConfigMappingInterface$CollectionProperty v47;
io.smallrye.config.ConfigMappingInterface$MapProperty v45;
java.lang.Class v7;
java.lang.Object v48;
java.util.ArrayDeque v1, v24, v29, v37, v42;
v0 := @this: io.smallrye.config.ConfigMappingProvider;
v1 := @parameter0: java.util.ArrayDeque;
v2 := @parameter1: io.smallrye.config.KeyMap;
v3 := @parameter2: io.smallrye.config.KeyMap;
v4 := @parameter3: io.smallrye.config.ConfigMappingInterface$NamingStrategy;
v5 := @parameter4: io.smallrye.config.ConfigMappingInterface;
v6 := @parameter5: java.util.function.BiFunction;
v7 := @parameter6: java.lang.Class;
v8 := @parameter7: java.lang.String;
v9 := @parameter8: io.smallrye.config.ConfigMappingInterface$Property;
v10 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: boolean isOptional()>();
if v10 == 0 goto label1;
v11 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$OptionalProperty asOptional()>();
v12 = virtualinvoke v11.<io.smallrye.config.ConfigMappingInterface$OptionalProperty: io.smallrye.config.ConfigMappingInterface$MayBeOptionalProperty getNestedProperty()>();
specialinvoke v0.<io.smallrye.config.ConfigMappingProvider: void processOptionalProperty(java.util.ArrayDeque,io.smallrye.config.KeyMap,io.smallrye.config.KeyMap,io.smallrye.config.ConfigMappingInterface$NamingStrategy,io.smallrye.config.ConfigMappingInterface,java.util.function.BiFunction,java.lang.Class,java.lang.String,io.smallrye.config.ConfigMappingInterface$Property)>(v1, v2, v3, v4, v5, v6, v7, v8, v12);
goto label8;
label1:
v13 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: boolean isGroup()>();
if v13 == 0 goto label2;
v14 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$GroupProperty asGroup()>();
v15 = virtualinvoke v14.<io.smallrye.config.ConfigMappingInterface$GroupProperty: io.smallrye.config.ConfigMappingInterface getGroupType()>();
v16 = new io.smallrye.config.ConfigMappingProvider$GetOrCreateEnclosingGroupInGroup;
v17 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$GroupProperty asGroup()>();
specialinvoke v16.<io.smallrye.config.ConfigMappingProvider$GetOrCreateEnclosingGroupInGroup: void <init>(java.util.function.BiFunction,io.smallrye.config.ConfigMappingInterface,io.smallrye.config.ConfigMappingInterface$GroupProperty,java.util.ArrayDeque)>(v6, v5, v17, v1);
specialinvoke v0.<io.smallrye.config.ConfigMappingProvider: void processEagerGroup(java.util.ArrayDeque,io.smallrye.config.KeyMap,io.smallrye.config.KeyMap,io.smallrye.config.ConfigMappingInterface$NamingStrategy,io.smallrye.config.ConfigMappingInterface,java.util.function.BiFunction)>(v1, v2, v3, v4, v15, v16);
goto label8;
label2:
v18 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: boolean isPrimitive()>();
if v18 == 0 goto label4;
v19 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$PrimitiveProperty asPrimitive()>();
v20 = virtualinvoke v19.<io.smallrye.config.ConfigMappingInterface$PrimitiveProperty: boolean hasDefaultValue()>();
if v20 == 0 goto label3;
v21 = virtualinvoke v3.<io.smallrye.config.KeyMap: io.smallrye.config.KeyMap findOrAdd(java.lang.Iterable)>(v1);
v22 = virtualinvoke v19.<io.smallrye.config.ConfigMappingInterface$PrimitiveProperty: java.lang.String getDefaultValue()>();
virtualinvoke v21.<io.smallrye.config.KeyMap: java.lang.Object putRootValue(java.lang.Object)>(v22);
v23 = staticinvoke <io.smallrye.config.ConfigMappingProvider: boolean isCollection(java.util.ArrayDeque)>(v1);
if v23 == 0 goto label3;
v24 = staticinvoke <io.smallrye.config.ConfigMappingProvider: java.util.ArrayDeque inlineCollectionPath(java.util.ArrayDeque)>(v1);
v25 = virtualinvoke v3.<io.smallrye.config.KeyMap: io.smallrye.config.KeyMap findOrAdd(java.lang.Iterable)>(v24);
v26 = virtualinvoke v19.<io.smallrye.config.ConfigMappingInterface$PrimitiveProperty: java.lang.String getDefaultValue()>();
virtualinvoke v25.<io.smallrye.config.KeyMap: java.lang.Object putRootValue(java.lang.Object)>(v26);
label3:
v27 = <io.smallrye.config.ConfigMappingProvider: java.util.function.BiConsumer DO_NOTHING>;
specialinvoke v0.<io.smallrye.config.ConfigMappingProvider: void addAction(java.util.ArrayDeque,io.smallrye.config.ConfigMappingInterface$Property,java.util.function.BiConsumer)>(v1, v9, v27);
v28 = staticinvoke <io.smallrye.config.ConfigMappingProvider: boolean isCollection(java.util.ArrayDeque)>(v1);
if v28 == 0 goto label8;
v29 = staticinvoke <io.smallrye.config.ConfigMappingProvider: java.util.ArrayDeque inlineCollectionPath(java.util.ArrayDeque)>(v1);
v30 = <io.smallrye.config.ConfigMappingProvider: java.util.function.BiConsumer DO_NOTHING>;
specialinvoke v0.<io.smallrye.config.ConfigMappingProvider: void addAction(java.util.ArrayDeque,io.smallrye.config.ConfigMappingInterface$Property,java.util.function.BiConsumer)>(v29, v9, v30);
goto label8;
label4:
v31 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: boolean isLeaf()>();
if v31 == 0 goto label6;
v32 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$LeafProperty asLeaf()>();
v33 = virtualinvoke v32.<io.smallrye.config.ConfigMappingInterface$LeafProperty: boolean hasDefaultValue()>();
if v33 == 0 goto label5;
v34 = virtualinvoke v3.<io.smallrye.config.KeyMap: io.smallrye.config.KeyMap findOrAdd(java.lang.Iterable)>(v1);
v35 = virtualinvoke v32.<io.smallrye.config.ConfigMappingInterface$LeafProperty: java.lang.String getDefaultValue()>();
virtualinvoke v34.<io.smallrye.config.KeyMap: java.lang.Object putRootValue(java.lang.Object)>(v35);
v36 = staticinvoke <io.smallrye.config.ConfigMappingProvider: boolean isCollection(java.util.ArrayDeque)>(v1);
if v36 == 0 goto label5;
v37 = staticinvoke <io.smallrye.config.ConfigMappingProvider: java.util.ArrayDeque inlineCollectionPath(java.util.ArrayDeque)>(v1);
v38 = virtualinvoke v3.<io.smallrye.config.KeyMap: io.smallrye.config.KeyMap findOrAdd(java.lang.Iterable)>(v37);
v39 = virtualinvoke v32.<io.smallrye.config.ConfigMappingInterface$LeafProperty: java.lang.String getDefaultValue()>();
virtualinvoke v38.<io.smallrye.config.KeyMap: java.lang.Object putRootValue(java.lang.Object)>(v39);
label5:
v40 = <io.smallrye.config.ConfigMappingProvider: java.util.function.BiConsumer DO_NOTHING>;
specialinvoke v0.<io.smallrye.config.ConfigMappingProvider: void addAction(java.util.ArrayDeque,io.smallrye.config.ConfigMappingInterface$Property,java.util.function.BiConsumer)>(v1, v9, v40);
v41 = staticinvoke <io.smallrye.config.ConfigMappingProvider: boolean isCollection(java.util.ArrayDeque)>(v1);
if v41 == 0 goto label8;
v42 = staticinvoke <io.smallrye.config.ConfigMappingProvider: java.util.ArrayDeque inlineCollectionPath(java.util.ArrayDeque)>(v1);
v43 = <io.smallrye.config.ConfigMappingProvider: java.util.function.BiConsumer DO_NOTHING>;
specialinvoke v0.<io.smallrye.config.ConfigMappingProvider: void addAction(java.util.ArrayDeque,io.smallrye.config.ConfigMappingInterface$Property,java.util.function.BiConsumer)>(v42, v9, v43);
goto label8;
label6:
v44 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: boolean isMap()>();
if v44 == 0 goto label7;
v45 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$MapProperty asMap()>();
specialinvoke v0.<io.smallrye.config.ConfigMappingProvider: void processLazyMapInGroup(java.util.ArrayDeque,io.smallrye.config.KeyMap,io.smallrye.config.KeyMap,io.smallrye.config.ConfigMappingInterface$MapProperty,java.util.function.BiFunction,io.smallrye.config.ConfigMappingInterface$NamingStrategy,io.smallrye.config.ConfigMappingInterface)>(v1, v2, v3, v45, v6, v4, v5);
goto label8;
label7:
v46 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: boolean isCollection()>();
if v46 == 0 goto label8;
v47 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$CollectionProperty asCollection()>();
v48 = virtualinvoke v1.<java.util.ArrayDeque: java.lang.Object removeLast()>();
v49 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v48) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001[*]");
virtualinvoke v1.<java.util.ArrayDeque: void addLast(java.lang.Object)>(v49);
v50 = virtualinvoke v47.<io.smallrye.config.ConfigMappingInterface$CollectionProperty: io.smallrye.config.ConfigMappingInterface$Property getElement()>();
specialinvoke v0.<io.smallrye.config.ConfigMappingProvider: void processProperty(java.util.ArrayDeque,io.smallrye.config.KeyMap,io.smallrye.config.KeyMap,io.smallrye.config.ConfigMappingInterface$NamingStrategy,io.smallrye.config.ConfigMappingInterface,java.util.function.BiFunction,java.lang.Class,java.lang.String,io.smallrye.config.ConfigMappingInterface$Property)>(v1, v2, v3, v4, v5, v6, v7, v8, v50);
label8:
return;
}
private void processOptionalProperty(java.util.ArrayDeque, io.smallrye.config.KeyMap, io.smallrye.config.KeyMap, io.smallrye.config.ConfigMappingInterface$NamingStrategy, io.smallrye.config.ConfigMappingInterface, java.util.function.BiFunction, java.lang.Class, java.lang.String, io.smallrye.config.ConfigMappingInterface$Property)
{
java.util.function.BiFunction v6;
io.smallrye.config.ConfigMappingProvider$GetOrCreateEnclosingGroupInGroup v12;
io.smallrye.config.KeyMap v18, v2, v22, v3;
boolean v10, v15, v17, v20, v25, v28;
io.smallrye.config.ConfigMappingInterface$GroupProperty v11;
io.smallrye.config.ConfigMappingInterface$LeafProperty v16;
io.smallrye.config.ConfigMappingInterface$Property v32, v9;
io.smallrye.config.ConfigMappingInterface v13, v5;
io.smallrye.config.ConfigMappingInterface$NamingStrategy v4;
java.util.HashSet v14;
java.util.function.BiConsumer v24, v27;
java.lang.String v19, v23, v31, v8;
io.smallrye.config.ConfigMappingProvider v0;
io.smallrye.config.ConfigMappingInterface$CollectionProperty v29;
java.lang.Class v7;
java.lang.Object v30;
java.util.ArrayDeque v1, v21, v26;
v0 := @this: io.smallrye.config.ConfigMappingProvider;
v1 := @parameter0: java.util.ArrayDeque;
v2 := @parameter1: io.smallrye.config.KeyMap;
v3 := @parameter2: io.smallrye.config.KeyMap;
v4 := @parameter3: io.smallrye.config.ConfigMappingInterface$NamingStrategy;
v5 := @parameter4: io.smallrye.config.ConfigMappingInterface;
v6 := @parameter5: java.util.function.BiFunction;
v7 := @parameter6: java.lang.Class;
v8 := @parameter7: java.lang.String;
v9 := @parameter8: io.smallrye.config.ConfigMappingInterface$Property;
v10 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: boolean isGroup()>();
if v10 == 0 goto label1;
v11 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$GroupProperty asGroup()>();
v12 = new io.smallrye.config.ConfigMappingProvider$GetOrCreateEnclosingGroupInGroup;
specialinvoke v12.<io.smallrye.config.ConfigMappingProvider$GetOrCreateEnclosingGroupInGroup: void <init>(java.util.function.BiFunction,io.smallrye.config.ConfigMappingInterface,io.smallrye.config.ConfigMappingInterface$GroupProperty,java.util.ArrayDeque)>(v6, v5, v11, v1);
v13 = virtualinvoke v11.<io.smallrye.config.ConfigMappingInterface$GroupProperty: io.smallrye.config.ConfigMappingInterface getGroupType()>();
v14 = new java.util.HashSet;
specialinvoke v14.<java.util.HashSet: void <init>()>();
specialinvoke v0.<io.smallrye.config.ConfigMappingProvider: void processLazyGroupInGroup(java.util.ArrayDeque,io.smallrye.config.KeyMap,io.smallrye.config.KeyMap,io.smallrye.config.ConfigMappingInterface$NamingStrategy,io.smallrye.config.ConfigMappingInterface,java.util.function.BiConsumer,java.util.HashSet)>(v1, v2, v3, v4, v13, v12, v14);
goto label4;
label1:
v15 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: boolean isLeaf()>();
if v15 == 0 goto label3;
v16 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$LeafProperty asLeaf()>();
v17 = virtualinvoke v16.<io.smallrye.config.ConfigMappingInterface$LeafProperty: boolean hasDefaultValue()>();
if v17 == 0 goto label2;
v18 = virtualinvoke v3.<io.smallrye.config.KeyMap: io.smallrye.config.KeyMap findOrAdd(java.lang.Iterable)>(v1);
v19 = virtualinvoke v16.<io.smallrye.config.ConfigMappingInterface$LeafProperty: java.lang.String getDefaultValue()>();
virtualinvoke v18.<io.smallrye.config.KeyMap: java.lang.Object putRootValue(java.lang.Object)>(v19);
v20 = staticinvoke <io.smallrye.config.ConfigMappingProvider: boolean isCollection(java.util.ArrayDeque)>(v1);
if v20 == 0 goto label2;
v21 = staticinvoke <io.smallrye.config.ConfigMappingProvider: java.util.ArrayDeque inlineCollectionPath(java.util.ArrayDeque)>(v1);
v22 = virtualinvoke v3.<io.smallrye.config.KeyMap: io.smallrye.config.KeyMap findOrAdd(java.lang.Iterable)>(v21);
v23 = virtualinvoke v16.<io.smallrye.config.ConfigMappingInterface$LeafProperty: java.lang.String getDefaultValue()>();
virtualinvoke v22.<io.smallrye.config.KeyMap: java.lang.Object putRootValue(java.lang.Object)>(v23);
label2:
v24 = <io.smallrye.config.ConfigMappingProvider: java.util.function.BiConsumer DO_NOTHING>;
specialinvoke v0.<io.smallrye.config.ConfigMappingProvider: void addAction(java.util.ArrayDeque,io.smallrye.config.ConfigMappingInterface$Property,java.util.function.BiConsumer)>(v1, v9, v24);
v25 = staticinvoke <io.smallrye.config.ConfigMappingProvider: boolean isCollection(java.util.ArrayDeque)>(v1);
if v25 == 0 goto label4;
v26 = staticinvoke <io.smallrye.config.ConfigMappingProvider: java.util.ArrayDeque inlineCollectionPath(java.util.ArrayDeque)>(v1);
v27 = <io.smallrye.config.ConfigMappingProvider: java.util.function.BiConsumer DO_NOTHING>;
specialinvoke v0.<io.smallrye.config.ConfigMappingProvider: void addAction(java.util.ArrayDeque,io.smallrye.config.ConfigMappingInterface$Property,java.util.function.BiConsumer)>(v26, v9, v27);
goto label4;
label3:
v28 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: boolean isCollection()>();
if v28 == 0 goto label4;
v29 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$CollectionProperty asCollection()>();
v30 = virtualinvoke v1.<java.util.ArrayDeque: java.lang.Object removeLast()>();
v31 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v30) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001[*]");
virtualinvoke v1.<java.util.ArrayDeque: void addLast(java.lang.Object)>(v31);
v32 = virtualinvoke v29.<io.smallrye.config.ConfigMappingInterface$CollectionProperty: io.smallrye.config.ConfigMappingInterface$Property getElement()>();
specialinvoke v0.<io.smallrye.config.ConfigMappingProvider: void processProperty(java.util.ArrayDeque,io.smallrye.config.KeyMap,io.smallrye.config.KeyMap,io.smallrye.config.ConfigMappingInterface$NamingStrategy,io.smallrye.config.ConfigMappingInterface,java.util.function.BiFunction,java.lang.Class,java.lang.String,io.smallrye.config.ConfigMappingInterface$Property)>(v1, v2, v3, v4, v5, v6, v7, v8, v32);
label4:
return;
}
private void processLazyGroupInGroup(java.util.ArrayDeque, io.smallrye.config.KeyMap, io.smallrye.config.KeyMap, io.smallrye.config.ConfigMappingInterface$NamingStrategy, io.smallrye.config.ConfigMappingInterface, java.util.function.BiConsumer, java.util.HashSet)
{
io.smallrye.config.ConfigMappingInterface$Property v11;
io.smallrye.config.ConfigMappingInterface v28, v5;
io.smallrye.config.ConfigMappingInterface$NamingStrategy v4;
java.util.HashSet v7;
java.lang.CharSequence[] v18;
int v10, v25, v26, v27, v8, v9;
java.util.function.BiConsumer v6;
io.smallrye.config.KeyMap v2, v3;
java.lang.String v15, v17, v19, v21, v22;
io.smallrye.config.ConfigMappingProvider v0;
java.lang.reflect.Method v20;
boolean v12, v14, v16, v23, v24;
io.smallrye.config.NameIterator v13;
java.util.ArrayDeque v1;
v0 := @this: io.smallrye.config.ConfigMappingProvider;
v1 := @parameter0: java.util.ArrayDeque;
v2 := @parameter1: io.smallrye.config.KeyMap;
v3 := @parameter2: io.smallrye.config.KeyMap;
v4 := @parameter3: io.smallrye.config.ConfigMappingInterface$NamingStrategy;
v5 := @parameter4: io.smallrye.config.ConfigMappingInterface;
v6 := @parameter5: java.util.function.BiConsumer;
v7 := @parameter6: java.util.HashSet;
v8 = virtualinvoke v5.<io.smallrye.config.ConfigMappingInterface: int getPropertyCount()>();
v9 = virtualinvoke v1.<java.util.ArrayDeque: int size()>();
v10 = 0;
label01:
if v10 >= v8 goto label08;
v11 = virtualinvoke v5.<io.smallrye.config.ConfigMappingInterface: io.smallrye.config.ConfigMappingInterface$Property getProperty(int)>(v10);
v12 = virtualinvoke v11.<io.smallrye.config.ConfigMappingInterface$Property: boolean isParentPropertyName()>();
if v12 != 0 goto label05;
v13 = new io.smallrye.config.NameIterator;
v14 = virtualinvoke v11.<io.smallrye.config.ConfigMappingInterface$Property: boolean hasPropertyName()>();
if v14 == 0 goto label02;
v15 = virtualinvoke v11.<io.smallrye.config.ConfigMappingInterface$Property: java.lang.String getPropertyName()>();
goto label03;
label02:
v15 = staticinvoke <io.smallrye.config.ConfigMappingProvider: java.lang.String propertyName(io.smallrye.config.ConfigMappingInterface$Property,io.smallrye.config.ConfigMappingInterface,io.smallrye.config.ConfigMappingInterface$NamingStrategy)>(v11, v5, v4);
label03:
specialinvoke v13.<io.smallrye.config.NameIterator: void <init>(java.lang.String)>(v15);
label04:
v16 = virtualinvoke v13.<io.smallrye.config.NameIterator: boolean hasNext()>();
if v16 == 0 goto label05;
v17 = virtualinvoke v13.<io.smallrye.config.NameIterator: java.lang.String getNextSegment()>();
virtualinvoke v1.<java.util.ArrayDeque: boolean add(java.lang.Object)>(v17);
virtualinvoke v13.<io.smallrye.config.NameIterator: void next()>();
goto label04;
label05:
v18 = newarray (java.lang.CharSequence)[2];
v19 = staticinvoke <java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(".", v1);
v18[0] = v19;
v20 = virtualinvoke v11.<io.smallrye.config.ConfigMappingInterface$Property: java.lang.reflect.Method getMethod()>();
v21 = virtualinvoke v20.<java.lang.reflect.Method: java.lang.String getName()>();
v18[1] = v21;
v22 = staticinvoke <java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.CharSequence[])>(".", v18);
v23 = virtualinvoke v7.<java.util.HashSet: boolean add(java.lang.Object)>(v22);
if v23 == 0 goto label06;
v24 = virtualinvoke v11.<io.smallrye.config.ConfigMappingInterface$Property: boolean isOptional()>();
specialinvoke v0.<io.smallrye.config.ConfigMappingProvider: void processLazyPropertyInGroup(java.util.ArrayDeque,io.smallrye.config.KeyMap,io.smallrye.config.KeyMap,java.util.function.BiConsumer,java.util.HashSet,io.smallrye.config.ConfigMappingInterface$NamingStrategy,io.smallrye.config.ConfigMappingInterface,boolean,io.smallrye.config.ConfigMappingInterface$Property)>(v1, v2, v3, v6, v7, v4, v5, v24, v11);
label06:
v25 = virtualinvoke v1.<java.util.ArrayDeque: int size()>();
if v25 <= v9 goto label07;
virtualinvoke v1.<java.util.ArrayDeque: java.lang.Object removeLast()>();
goto label06;
label07:
v10 = v10 + 1;
goto label01;
label08:
v26 = virtualinvoke v5.<io.smallrye.config.ConfigMappingInterface: int getSuperTypeCount()>();
v27 = 0;
label09:
if v27 >= v26 goto label10;
v28 = virtualinvoke v5.<io.smallrye.config.ConfigMappingInterface: io.smallrye.config.ConfigMappingInterface getSuperType(int)>(v27);
specialinvoke v0.<io.smallrye.config.ConfigMappingProvider: void processLazyGroupInGroup(java.util.ArrayDeque,io.smallrye.config.KeyMap,io.smallrye.config.KeyMap,io.smallrye.config.ConfigMappingInterface$NamingStrategy,io.smallrye.config.ConfigMappingInterface,java.util.function.BiConsumer,java.util.HashSet)>(v1, v2, v3, v4, v28, v6, v7);
v27 = v27 + 1;
goto label09;
label10:
return;
}
private void processLazyPropertyInGroup(java.util.ArrayDeque, io.smallrye.config.KeyMap, io.smallrye.config.KeyMap, java.util.function.BiConsumer, java.util.HashSet, io.smallrye.config.ConfigMappingInterface$NamingStrategy, io.smallrye.config.ConfigMappingInterface, boolean, io.smallrye.config.ConfigMappingInterface$Property)
{
io.smallrye.config.ConfigMappingProvider$GetOrCreateEnclosingGroupInGroup v16, v26;
io.smallrye.config.ConfigMappingInterface$MayBeOptionalProperty v11, v14, v36, v54, v76, v79;
io.smallrye.config.KeyMap v2, v3, v46, v50, v57, v61, v65, v69;
io.smallrye.config.ConfigMappingInterface$OptionalProperty v10, v13, v35, v53, v75, v78;
io.smallrye.config.ConfigMappingInterface$PrimitiveProperty v44;
io.smallrye.config.ConfigMappingInterface$Property v83, v9;
io.smallrye.config.ConfigMappingProvider$GetNestedEnclosing v18, v21, v28, v31, v72;
java.util.function.BiConsumer v39, v4;
java.lang.String v47, v51, v58, v62, v66, v70, v82;
io.smallrye.config.ConfigMappingInterface$CollectionProperty v80;
io.smallrye.config.ConfigMappingInterface$MapProperty v73;
io.smallrye.config.ConfigMappingProvider$ConsumeOneAndThenFn v20, v30;
io.smallrye.config.ConfigMappingProvider$ConsumeOneAndThen v40;
java.util.ArrayDeque v1, v42, v49, v60, v68;
java.util.function.BiFunction v19, v29;
boolean v12, v17, v24, v27, v33, v34, v37, v38, v41, v43, v45, v48, v52, v56, v59, v64, v67, v71, v74, v77, v8;
io.smallrye.config.ConfigMappingInterface$GroupProperty v15, v25;
io.smallrye.config.ConfigMappingInterface$LeafProperty v55, v63;
io.smallrye.config.ConfigMappingInterface v22, v32, v7;
io.smallrye.config.ConfigMappingInterface$NamingStrategy v6;
java.util.HashSet v23, v5;
io.smallrye.config.ConfigMappingProvider v0;
java.lang.Object v81;
v0 := @this: io.smallrye.config.ConfigMappingProvider;
v1 := @parameter0: java.util.ArrayDeque;
v2 := @parameter1: io.smallrye.config.KeyMap;
v3 := @parameter2: io.smallrye.config.KeyMap;
v4 := @parameter3: java.util.function.BiConsumer;
v5 := @parameter4: java.util.HashSet;
v6 := @parameter5: io.smallrye.config.ConfigMappingInterface$NamingStrategy;
v7 := @parameter6: io.smallrye.config.ConfigMappingInterface;
v8 := @parameter7: boolean;
v9 := @parameter8: io.smallrye.config.ConfigMappingInterface$Property;
if v8 == 0 goto label03;
v10 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$OptionalProperty asOptional()>();
v11 = virtualinvoke v10.<io.smallrye.config.ConfigMappingInterface$OptionalProperty: io.smallrye.config.ConfigMappingInterface$MayBeOptionalProperty getNestedProperty()>();
v12 = virtualinvoke v11.<io.smallrye.config.ConfigMappingInterface$MayBeOptionalProperty: boolean isGroup()>();
if v12 == 0 goto label03;
v13 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$OptionalProperty asOptional()>();
v14 = virtualinvoke v13.<io.smallrye.config.ConfigMappingInterface$OptionalProperty: io.smallrye.config.ConfigMappingInterface$MayBeOptionalProperty getNestedProperty()>();
v15 = virtualinvoke v14.<io.smallrye.config.ConfigMappingInterface$MayBeOptionalProperty: io.smallrye.config.ConfigMappingInterface$GroupProperty asGroup()>();
v16 = new io.smallrye.config.ConfigMappingProvider$GetOrCreateEnclosingGroupInGroup;
v17 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: boolean isParentPropertyName()>();
if v17 == 0 goto label01;
v18 = new io.smallrye.config.ConfigMappingProvider$GetNestedEnclosing;
v19 = v18;
specialinvoke v18.<io.smallrye.config.ConfigMappingProvider$GetNestedEnclosing: void <init>(java.util.function.BiConsumer)>(v4);
goto label02;
label01:
v20 = new io.smallrye.config.ConfigMappingProvider$ConsumeOneAndThenFn;
v19 = v20;
v21 = new io.smallrye.config.ConfigMappingProvider$GetNestedEnclosing;
specialinvoke v21.<io.smallrye.config.ConfigMappingProvider$GetNestedEnclosing: void <init>(java.util.function.BiConsumer)>(v4);
specialinvoke v20.<io.smallrye.config.ConfigMappingProvider$ConsumeOneAndThenFn: void <init>(java.util.function.BiFunction)>(v21);
label02:
specialinvoke v16.<io.smallrye.config.ConfigMappingProvider$GetOrCreateEnclosingGroupInGroup: void <init>(java.util.function.BiFunction,io.smallrye.config.ConfigMappingInterface,io.smallrye.config.ConfigMappingInterface$GroupProperty,java.util.ArrayDeque)>(v19, v7, v15, v1);
v22 = virtualinvoke v15.<io.smallrye.config.ConfigMappingInterface$GroupProperty: io.smallrye.config.ConfigMappingInterface getGroupType()>();
v23 = new java.util.HashSet;
specialinvoke v23.<java.util.HashSet: void <init>()>();
specialinvoke v0.<io.smallrye.config.ConfigMappingProvider: void processLazyGroupInGroup(java.util.ArrayDeque,io.smallrye.config.KeyMap,io.smallrye.config.KeyMap,io.smallrye.config.ConfigMappingInterface$NamingStrategy,io.smallrye.config.ConfigMappingInterface,java.util.function.BiConsumer,java.util.HashSet)>(v1, v2, v3, v6, v22, v16, v23);
goto label18;
label03:
v24 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: boolean isGroup()>();
if v24 == 0 goto label06;
v25 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$GroupProperty asGroup()>();
v26 = new io.smallrye.config.ConfigMappingProvider$GetOrCreateEnclosingGroupInGroup;
v27 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: boolean isParentPropertyName()>();
if v27 == 0 goto label04;
v28 = new io.smallrye.config.ConfigMappingProvider$GetNestedEnclosing;
v29 = v28;
specialinvoke v28.<io.smallrye.config.ConfigMappingProvider$GetNestedEnclosing: void <init>(java.util.function.BiConsumer)>(v4);
goto label05;
label04:
v30 = new io.smallrye.config.ConfigMappingProvider$ConsumeOneAndThenFn;
v29 = v30;
v31 = new io.smallrye.config.ConfigMappingProvider$GetNestedEnclosing;
specialinvoke v31.<io.smallrye.config.ConfigMappingProvider$GetNestedEnclosing: void <init>(java.util.function.BiConsumer)>(v4);
specialinvoke v30.<io.smallrye.config.ConfigMappingProvider$ConsumeOneAndThenFn: void <init>(java.util.function.BiFunction)>(v31);
label05:
specialinvoke v26.<io.smallrye.config.ConfigMappingProvider$GetOrCreateEnclosingGroupInGroup: void <init>(java.util.function.BiFunction,io.smallrye.config.ConfigMappingInterface,io.smallrye.config.ConfigMappingInterface$GroupProperty,java.util.ArrayDeque)>(v29, v7, v25, v1);
v32 = virtualinvoke v25.<io.smallrye.config.ConfigMappingInterface$GroupProperty: io.smallrye.config.ConfigMappingInterface getGroupType()>();
specialinvoke v0.<io.smallrye.config.ConfigMappingProvider: void processLazyGroupInGroup(java.util.ArrayDeque,io.smallrye.config.KeyMap,io.smallrye.config.KeyMap,io.smallrye.config.ConfigMappingInterface$NamingStrategy,io.smallrye.config.ConfigMappingInterface,java.util.function.BiConsumer,java.util.HashSet)>(v1, v2, v3, v6, v32, v26, v5);
goto label18;
label06:
v33 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: boolean isLeaf()>();
if v33 != 0 goto label07;
v34 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: boolean isPrimitive()>();
if v34 != 0 goto label07;
if v8 == 0 goto label13;
v35 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$OptionalProperty asOptional()>();
v36 = virtualinvoke v35.<io.smallrye.config.ConfigMappingInterface$OptionalProperty: io.smallrye.config.ConfigMappingInterface$MayBeOptionalProperty getNestedProperty()>();
v37 = virtualinvoke v36.<io.smallrye.config.ConfigMappingInterface$MayBeOptionalProperty: boolean isLeaf()>();
if v37 == 0 goto label13;
label07:
v38 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: boolean isParentPropertyName()>();
if v38 == 0 goto label08;
v39 = v4;
goto label09;
label08:
v40 = new io.smallrye.config.ConfigMappingProvider$ConsumeOneAndThen;
v39 = v40;
specialinvoke v40.<io.smallrye.config.ConfigMappingProvider$ConsumeOneAndThen: void <init>(java.util.function.BiConsumer)>(v4);
label09:
specialinvoke v0.<io.smallrye.config.ConfigMappingProvider: void addAction(java.util.ArrayDeque,io.smallrye.config.ConfigMappingInterface$Property,java.util.function.BiConsumer)>(v1, v9, v39);
v41 = staticinvoke <io.smallrye.config.ConfigMappingProvider: boolean isCollection(java.util.ArrayDeque)>(v1);
if v41 == 0 goto label10;
v42 = staticinvoke <io.smallrye.config.ConfigMappingProvider: java.util.ArrayDeque inlineCollectionPath(java.util.ArrayDeque)>(v1);
specialinvoke v0.<io.smallrye.config.ConfigMappingProvider: void addAction(java.util.ArrayDeque,io.smallrye.config.ConfigMappingInterface$Property,java.util.function.BiConsumer)>(v42, v9, v39);
label10:
v43 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: boolean isPrimitive()>();
if v43 == 0 goto label11;
v44 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$PrimitiveProperty asPrimitive()>();
v45 = virtualinvoke v44.<io.smallrye.config.ConfigMappingInterface$PrimitiveProperty: boolean hasDefaultValue()>();
if v45 == 0 goto label18;
v46 = virtualinvoke v3.<io.smallrye.config.KeyMap: io.smallrye.config.KeyMap findOrAdd(java.lang.Iterable)>(v1);
v47 = virtualinvoke v44.<io.smallrye.config.ConfigMappingInterface$PrimitiveProperty: java.lang.String getDefaultValue()>();
virtualinvoke v46.<io.smallrye.config.KeyMap: java.lang.Object putRootValue(java.lang.Object)>(v47);
v48 = staticinvoke <io.smallrye.config.ConfigMappingProvider: boolean isCollection(java.util.ArrayDeque)>(v1);
if v48 == 0 goto label18;
v49 = staticinvoke <io.smallrye.config.ConfigMappingProvider: java.util.ArrayDeque inlineCollectionPath(java.util.ArrayDeque)>(v1);
v50 = virtualinvoke v3.<io.smallrye.config.KeyMap: io.smallrye.config.KeyMap findOrAdd(java.lang.Iterable)>(v49);
v51 = virtualinvoke v44.<io.smallrye.config.ConfigMappingInterface$PrimitiveProperty: java.lang.String getDefaultValue()>();
virtualinvoke v50.<io.smallrye.config.KeyMap: java.lang.Object putRootValue(java.lang.Object)>(v51);
goto label18;
label11:
v52 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: boolean isLeaf()>();
if v52 == 0 goto label12;
if v8 == 0 goto label12;
v53 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$OptionalProperty asOptional()>();
v54 = virtualinvoke v53.<io.smallrye.config.ConfigMappingInterface$OptionalProperty: io.smallrye.config.ConfigMappingInterface$MayBeOptionalProperty getNestedProperty()>();
v55 = virtualinvoke v54.<io.smallrye.config.ConfigMappingInterface$MayBeOptionalProperty: io.smallrye.config.ConfigMappingInterface$LeafProperty asLeaf()>();
v56 = virtualinvoke v55.<io.smallrye.config.ConfigMappingInterface$LeafProperty: boolean hasDefaultValue()>();
if v56 == 0 goto label18;
v57 = virtualinvoke v3.<io.smallrye.config.KeyMap: io.smallrye.config.KeyMap findOrAdd(java.lang.Iterable)>(v1);
v58 = virtualinvoke v55.<io.smallrye.config.ConfigMappingInterface$LeafProperty: java.lang.String getDefaultValue()>();
virtualinvoke v57.<io.smallrye.config.KeyMap: java.lang.Object putRootValue(java.lang.Object)>(v58);
v59 = staticinvoke <io.smallrye.config.ConfigMappingProvider: boolean isCollection(java.util.ArrayDeque)>(v1);
if v59 == 0 goto label18;
v60 = staticinvoke <io.smallrye.config.ConfigMappingProvider: java.util.ArrayDeque inlineCollectionPath(java.util.ArrayDeque)>(v1);
v61 = virtualinvoke v3.<io.smallrye.config.KeyMap: io.smallrye.config.KeyMap findOrAdd(java.lang.Iterable)>(v60);
v62 = virtualinvoke v55.<io.smallrye.config.ConfigMappingInterface$LeafProperty: java.lang.String getDefaultValue()>();
virtualinvoke v61.<io.smallrye.config.KeyMap: java.lang.Object putRootValue(java.lang.Object)>(v62);
goto label18;
label12:
v63 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$LeafProperty asLeaf()>();
v64 = virtualinvoke v63.<io.smallrye.config.ConfigMappingInterface$LeafProperty: boolean hasDefaultValue()>();
if v64 == 0 goto label18;
v65 = virtualinvoke v3.<io.smallrye.config.KeyMap: io.smallrye.config.KeyMap findOrAdd(java.lang.Iterable)>(v1);
v66 = virtualinvoke v63.<io.smallrye.config.ConfigMappingInterface$LeafProperty: java.lang.String getDefaultValue()>();
virtualinvoke v65.<io.smallrye.config.KeyMap: java.lang.Object putRootValue(java.lang.Object)>(v66);
v67 = staticinvoke <io.smallrye.config.ConfigMappingProvider: boolean isCollection(java.util.ArrayDeque)>(v1);
if v67 == 0 goto label18;
v68 = staticinvoke <io.smallrye.config.ConfigMappingProvider: java.util.ArrayDeque inlineCollectionPath(java.util.ArrayDeque)>(v1);
v69 = virtualinvoke v3.<io.smallrye.config.KeyMap: io.smallrye.config.KeyMap findOrAdd(java.lang.Iterable)>(v68);
v70 = virtualinvoke v63.<io.smallrye.config.ConfigMappingInterface$LeafProperty: java.lang.String getDefaultValue()>();
virtualinvoke v69.<io.smallrye.config.KeyMap: java.lang.Object putRootValue(java.lang.Object)>(v70);
goto label18;
label13:
v71 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: boolean isMap()>();
if v71 == 0 goto label14;
v72 = new io.smallrye.config.ConfigMappingProvider$GetNestedEnclosing;
specialinvoke v72.<io.smallrye.config.ConfigMappingProvider$GetNestedEnclosing: void <init>(java.util.function.BiConsumer)>(v4);
v73 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$MapProperty asMap()>();
specialinvoke v0.<io.smallrye.config.ConfigMappingProvider: void processLazyMapInGroup(java.util.ArrayDeque,io.smallrye.config.KeyMap,io.smallrye.config.KeyMap,io.smallrye.config.ConfigMappingInterface$MapProperty,java.util.function.BiFunction,io.smallrye.config.ConfigMappingInterface$NamingStrategy,io.smallrye.config.ConfigMappingInterface)>(v1, v2, v3, v73, v72, v6, v7);
goto label18;
label14:
v74 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: boolean isCollection()>();
if v74 != 0 goto label15;
if v8 == 0 goto label18;
v75 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$OptionalProperty asOptional()>();
v76 = virtualinvoke v75.<io.smallrye.config.ConfigMappingInterface$OptionalProperty: io.smallrye.config.ConfigMappingInterface$MayBeOptionalProperty getNestedProperty()>();
v77 = virtualinvoke v76.<io.smallrye.config.ConfigMappingInterface$MayBeOptionalProperty: boolean isCollection()>();
if v77 == 0 goto label18;
label15:
if v8 == 0 goto label16;
v78 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$OptionalProperty asOptional()>();
v79 = virtualinvoke v78.<io.smallrye.config.ConfigMappingInterface$OptionalProperty: io.smallrye.config.ConfigMappingInterface$MayBeOptionalProperty getNestedProperty()>();
v80 = virtualinvoke v79.<io.smallrye.config.ConfigMappingInterface$MayBeOptionalProperty: io.smallrye.config.ConfigMappingInterface$CollectionProperty asCollection()>();
goto label17;
label16:
v80 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$CollectionProperty asCollection()>();
label17:
v81 = virtualinvoke v1.<java.util.ArrayDeque: java.lang.Object removeLast()>();
v82 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v81) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001[*]");
virtualinvoke v1.<java.util.ArrayDeque: void addLast(java.lang.Object)>(v82);
v83 = virtualinvoke v80.<io.smallrye.config.ConfigMappingInterface$CollectionProperty: io.smallrye.config.ConfigMappingInterface$Property getElement()>();
specialinvoke v0.<io.smallrye.config.ConfigMappingProvider: void processLazyPropertyInGroup(java.util.ArrayDeque,io.smallrye.config.KeyMap,io.smallrye.config.KeyMap,java.util.function.BiConsumer,java.util.HashSet,io.smallrye.config.ConfigMappingInterface$NamingStrategy,io.smallrye.config.ConfigMappingInterface,boolean,io.smallrye.config.ConfigMappingInterface$Property)>(v1, v2, v3, v4, v5, v6, v7, 0, v83);
label18:
return;
}
private void processLazyMapInGroup(java.util.ArrayDeque, io.smallrye.config.KeyMap, io.smallrye.config.KeyMap, io.smallrye.config.ConfigMappingInterface$MapProperty, java.util.function.BiFunction, io.smallrye.config.ConfigMappingInterface$NamingStrategy, io.smallrye.config.ConfigMappingInterface)
{
io.smallrye.config.ConfigMappingProvider$GetOrCreateEnclosingMapInGroup v8;
java.util.function.BiFunction v5;
io.smallrye.config.ConfigMappingInterface v7;
io.smallrye.config.ConfigMappingInterface$NamingStrategy v6;
io.smallrye.config.KeyMap v2, v3;
io.smallrye.config.ConfigMappingProvider v0;
java.util.ArrayDeque v1;
io.smallrye.config.ConfigMappingInterface$MapProperty v4;
v0 := @this: io.smallrye.config.ConfigMappingProvider;
v1 := @parameter0: java.util.ArrayDeque;
v2 := @parameter1: io.smallrye.config.KeyMap;
v3 := @parameter2: io.smallrye.config.KeyMap;
v4 := @parameter3: io.smallrye.config.ConfigMappingInterface$MapProperty;
v5 := @parameter4: java.util.function.BiFunction;
v6 := @parameter5: io.smallrye.config.ConfigMappingInterface$NamingStrategy;
v7 := @parameter6: io.smallrye.config.ConfigMappingInterface;
v8 = new io.smallrye.config.ConfigMappingProvider$GetOrCreateEnclosingMapInGroup;
specialinvoke v8.<io.smallrye.config.ConfigMappingProvider$GetOrCreateEnclosingMapInGroup: void <init>(java.util.function.BiFunction,io.smallrye.config.ConfigMappingInterface,io.smallrye.config.ConfigMappingInterface$MapProperty,java.util.ArrayDeque)>(v5, v7, v4, v1);
specialinvoke v0.<io.smallrye.config.ConfigMappingProvider: void processLazyMap(java.util.ArrayDeque,io.smallrye.config.KeyMap,io.smallrye.config.KeyMap,io.smallrye.config.ConfigMappingInterface$MapProperty,java.util.function.BiFunction,io.smallrye.config.ConfigMappingInterface$NamingStrategy,io.smallrye.config.ConfigMappingInterface)>(v1, v2, v3, v4, v8, v6, v7);
return;
}
private void processLazyMap(java.util.ArrayDeque, io.smallrye.config.KeyMap, io.smallrye.config.KeyMap, io.smallrye.config.ConfigMappingInterface$MapProperty, java.util.function.BiFunction, io.smallrye.config.ConfigMappingInterface$NamingStrategy, io.smallrye.config.ConfigMappingInterface)
{
io.smallrye.config.ConfigMappingInterface$Property v8;
java.util.function.BiFunction v5;
io.smallrye.config.ConfigMappingInterface v7;
io.smallrye.config.ConfigMappingInterface$NamingStrategy v6;
io.smallrye.config.KeyMap v2, v3;
java.lang.Class v10, v11;
io.smallrye.config.ConfigMappingProvider v0;
java.util.ArrayDeque v1;
io.smallrye.config.ConfigMappingInterface$MapProperty v4;
boolean v9;
v0 := @this: io.smallrye.config.ConfigMappingProvider;
v1 := @parameter0: java.util.ArrayDeque;
v2 := @parameter1: io.smallrye.config.KeyMap;
v3 := @parameter2: io.smallrye.config.KeyMap;
v4 := @parameter3: io.smallrye.config.ConfigMappingInterface$MapProperty;
v5 := @parameter4: java.util.function.BiFunction;
v6 := @parameter5: io.smallrye.config.ConfigMappingInterface$NamingStrategy;
v7 := @parameter6: io.smallrye.config.ConfigMappingInterface;
v8 = virtualinvoke v4.<io.smallrye.config.ConfigMappingInterface$MapProperty: io.smallrye.config.ConfigMappingInterface$Property getValueProperty()>();
v9 = virtualinvoke v4.<io.smallrye.config.ConfigMappingInterface$MapProperty: boolean hasKeyConvertWith()>();
if v9 == 0 goto label1;
v10 = virtualinvoke v4.<io.smallrye.config.ConfigMappingInterface$MapProperty: java.lang.Class getKeyConvertWith()>();
goto label2;
label1:
v10 = null;
label2:
v11 = virtualinvoke v4.<io.smallrye.config.ConfigMappingInterface$MapProperty: java.lang.Class getKeyRawType()>();
virtualinvoke v1.<java.util.ArrayDeque: void addLast(java.lang.Object)>("*");
specialinvoke v0.<io.smallrye.config.ConfigMappingProvider: void processLazyMapValue(java.util.ArrayDeque,io.smallrye.config.KeyMap,io.smallrye.config.KeyMap,io.smallrye.config.ConfigMappingInterface$MapProperty,io.smallrye.config.ConfigMappingInterface$Property,java.lang.Class,java.lang.Class,java.util.function.BiFunction,io.smallrye.config.ConfigMappingInterface$NamingStrategy,io.smallrye.config.ConfigMappingInterface)>(v1, v2, v3, v4, v8, v10, v11, v5, v6, v7);
return;
}
private void processLazyMapValue(java.util.ArrayDeque, io.smallrye.config.KeyMap, io.smallrye.config.KeyMap, io.smallrye.config.ConfigMappingInterface$MapProperty, io.smallrye.config.ConfigMappingInterface$Property, java.lang.Class, java.lang.Class, java.util.function.BiFunction, io.smallrye.config.ConfigMappingInterface$NamingStrategy, io.smallrye.config.ConfigMappingInterface)
{
java.util.function.BiFunction v24, v8;
io.smallrye.config.KeyMap v17, v18, v2, v3;
boolean v11, v19, v22, v25, v31, v34;
io.smallrye.config.ConfigMappingInterface$GroupProperty v27, v28;
io.smallrye.config.ConfigMappingInterface$LeafProperty v12;
io.smallrye.config.ConfigMappingProvider$GetOrCreateEnclosingGroupInMap v26;
io.smallrye.config.ConfigMappingInterface$Property v33, v5;
io.smallrye.config.ConfigMappingInterface v10, v29;
io.smallrye.config.ConfigMappingInterface$NamingStrategy v9;
java.util.HashSet v30;
java.util.function.BiConsumer v16, v21;
java.lang.String v15, v36;
io.smallrye.config.ConfigMappingProvider v0;
io.smallrye.config.ConfigMappingInterface$CollectionProperty v32;
io.smallrye.config.ConfigMappingInterface$MapProperty v23, v4;
java.lang.UnsupportedOperationException v37;
java.lang.Class v13, v14, v6, v7;
java.lang.Object v35;
java.util.ArrayDeque v1, v20;
v0 := @this: io.smallrye.config.ConfigMappingProvider;
v1 := @parameter0: java.util.ArrayDeque;
v2 := @parameter1: io.smallrye.config.KeyMap;
v3 := @parameter2: io.smallrye.config.KeyMap;
v4 := @parameter3: io.smallrye.config.ConfigMappingInterface$MapProperty;
v5 := @parameter4: io.smallrye.config.ConfigMappingInterface$Property;
v6 := @parameter5: java.lang.Class;
v7 := @parameter6: java.lang.Class;
v8 := @parameter7: java.util.function.BiFunction;
v9 := @parameter8: io.smallrye.config.ConfigMappingInterface$NamingStrategy;
v10 := @parameter9: io.smallrye.config.ConfigMappingInterface;
v11 = virtualinvoke v5.<io.smallrye.config.ConfigMappingInterface$Property: boolean isLeaf()>();
if v11 == 0 goto label2;
v12 = virtualinvoke v5.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$LeafProperty asLeaf()>();
v13 = virtualinvoke v12.<io.smallrye.config.ConfigMappingInterface$LeafProperty: java.lang.Class getConvertWith()>();
v14 = virtualinvoke v12.<io.smallrye.config.ConfigMappingInterface$LeafProperty: java.lang.Class getValueRawType()>();
v15 = staticinvoke <java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(".", v1);
v16 = staticinvoke <io.smallrye.config.ConfigMappingProvider$lambda_processLazyMapValue_0__3082: java.util.function.BiConsumer bootstrap$(java.lang.String,java.util.function.BiFunction,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class,io.smallrye.config.ConfigMappingInterface$MapProperty)>(v15, v8, v6, v7, v13, v14, v4);
specialinvoke v0.<io.smallrye.config.ConfigMappingProvider: void addAction(java.util.ArrayDeque,io.smallrye.config.ConfigMappingInterface$Property,java.util.function.BiConsumer)>(v1, v4, v16);
v17 = virtualinvoke v2.<io.smallrye.config.KeyMap: io.smallrye.config.KeyMap find(java.lang.Iterable)>(v1);
if v17 == null goto label1;
v18 = virtualinvoke v2.<io.smallrye.config.KeyMap: io.smallrye.config.KeyMap find(java.lang.Iterable)>(v1);
virtualinvoke v17.<io.smallrye.config.KeyMap: io.smallrye.config.KeyMap putAny(io.smallrye.config.KeyMap)>(v18);
label1:
v19 = staticinvoke <io.smallrye.config.ConfigMappingProvider: boolean isCollection(java.util.ArrayDeque)>(v1);
if v19 == 0 goto label7;
v20 = staticinvoke <io.smallrye.config.ConfigMappingProvider: java.util.ArrayDeque inlineCollectionPath(java.util.ArrayDeque)>(v1);
v21 = <io.smallrye.config.ConfigMappingProvider: java.util.function.BiConsumer DO_NOTHING>;
specialinvoke v0.<io.smallrye.config.ConfigMappingProvider: void addAction(java.util.ArrayDeque,io.smallrye.config.ConfigMappingInterface$Property,java.util.function.BiConsumer)>(v20, v12, v21);
goto label7;
label2:
v22 = virtualinvoke v5.<io.smallrye.config.ConfigMappingInterface$Property: boolean isMap()>();
if v22 == 0 goto label3;
v23 = virtualinvoke v5.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$MapProperty asMap()>();
v24 = staticinvoke <io.smallrye.config.ConfigMappingProvider$lambda_processLazyMapValue_2__3081: java.util.function.BiFunction bootstrap$(java.util.function.BiFunction,java.lang.Class,java.lang.Class)>(v8, v6, v7);
specialinvoke v0.<io.smallrye.config.ConfigMappingProvider: void processLazyMap(java.util.ArrayDeque,io.smallrye.config.KeyMap,io.smallrye.config.KeyMap,io.smallrye.config.ConfigMappingInterface$MapProperty,java.util.function.BiFunction,io.smallrye.config.ConfigMappingInterface$NamingStrategy,io.smallrye.config.ConfigMappingInterface)>(v1, v2, v3, v23, v24, v9, v10);
goto label7;
label3:
v25 = virtualinvoke v5.<io.smallrye.config.ConfigMappingInterface$Property: boolean isGroup()>();
if v25 == 0 goto label4;
v26 = new io.smallrye.config.ConfigMappingProvider$GetOrCreateEnclosingGroupInMap;
v27 = virtualinvoke v5.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$GroupProperty asGroup()>();
specialinvoke v26.<io.smallrye.config.ConfigMappingProvider$GetOrCreateEnclosingGroupInMap: void <init>(java.util.function.BiFunction,io.smallrye.config.ConfigMappingInterface$MapProperty,io.smallrye.config.ConfigMappingInterface,io.smallrye.config.ConfigMappingInterface$GroupProperty,java.util.ArrayDeque)>(v8, v4, v10, v27, v1);
v28 = virtualinvoke v5.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$GroupProperty asGroup()>();
v29 = virtualinvoke v28.<io.smallrye.config.ConfigMappingInterface$GroupProperty: io.smallrye.config.ConfigMappingInterface getGroupType()>();
v30 = new java.util.HashSet;
specialinvoke v30.<java.util.HashSet: void <init>()>();
specialinvoke v0.<io.smallrye.config.ConfigMappingProvider: void processLazyGroupInGroup(java.util.ArrayDeque,io.smallrye.config.KeyMap,io.smallrye.config.KeyMap,io.smallrye.config.ConfigMappingInterface$NamingStrategy,io.smallrye.config.ConfigMappingInterface,java.util.function.BiConsumer,java.util.HashSet)>(v1, v2, v3, v9, v29, v26, v30);
goto label7;
label4:
v31 = virtualinvoke v5.<io.smallrye.config.ConfigMappingInterface$Property: boolean isCollection()>();
if v31 == 0 goto label6;
v32 = virtualinvoke v5.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$CollectionProperty asCollection()>();
v33 = virtualinvoke v32.<io.smallrye.config.ConfigMappingInterface$CollectionProperty: io.smallrye.config.ConfigMappingInterface$Property getElement()>();
v34 = virtualinvoke v33.<io.smallrye.config.ConfigMappingInterface$Property: boolean hasConvertWith()>();
if v34 != 0 goto label5;
v35 = virtualinvoke v1.<java.util.ArrayDeque: java.lang.Object removeLast()>();
v36 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v35) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001[*]");
virtualinvoke v1.<java.util.ArrayDeque: void addLast(java.lang.Object)>(v36);
label5:
specialinvoke v0.<io.smallrye.config.ConfigMappingProvider: void processLazyMapValue(java.util.ArrayDeque,io.smallrye.config.KeyMap,io.smallrye.config.KeyMap,io.smallrye.config.ConfigMappingInterface$MapProperty,io.smallrye.config.ConfigMappingInterface$Property,java.lang.Class,java.lang.Class,java.util.function.BiFunction,io.smallrye.config.ConfigMappingInterface$NamingStrategy,io.smallrye.config.ConfigMappingInterface)>(v1, v2, v3, v4, v33, v6, v7, v8, v9, v10);
goto label7;
label6:
v37 = new java.lang.UnsupportedOperationException;
specialinvoke v37.<java.lang.UnsupportedOperationException: void <init>()>();
throw v37;
label7:
return;
}
private void addAction(java.util.ArrayDeque, io.smallrye.config.ConfigMappingInterface$Property, java.util.function.BiConsumer)
{
io.smallrye.config.ConfigMappingInterface$Property v2;
java.util.Map v6;
java.util.function.BiConsumer v3;
io.smallrye.config.KeyMap v4, v5;
java.lang.String v7;
io.smallrye.config.ConfigMappingProvider v0;
java.util.ArrayDeque v1;
v0 := @this: io.smallrye.config.ConfigMappingProvider;
v1 := @parameter0: java.util.ArrayDeque;
v2 := @parameter1: io.smallrye.config.ConfigMappingInterface$Property;
v3 := @parameter2: java.util.function.BiConsumer;
v4 = v0.<io.smallrye.config.ConfigMappingProvider: io.smallrye.config.KeyMap matchActions>;
v5 = virtualinvoke v4.<io.smallrye.config.KeyMap: io.smallrye.config.KeyMap findOrAdd(java.lang.Iterable)>(v1);
virtualinvoke v5.<io.smallrye.config.KeyMap: java.lang.Object putRootValue(java.lang.Object)>(v3);
v6 = v0.<io.smallrye.config.ConfigMappingProvider: java.util.Map properties>;
v7 = staticinvoke <java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(".", v1);
interfaceinvoke v6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v7, v2);
return;
}
private static boolean isCollection(java.util.ArrayDeque)
{
java.lang.Object v1;
java.util.ArrayDeque v0;
boolean v2;
v0 := @parameter0: java.util.ArrayDeque;
v1 = virtualinvoke v0.<java.util.ArrayDeque: java.lang.Object getLast()>();
v2 = virtualinvoke v1.<java.lang.String: boolean endsWith(java.lang.String)>("[*]");
return v2;
}
private static java.util.ArrayDeque inlineCollectionPath(java.util.ArrayDeque)
{
int v3, v4;
java.lang.Object v2;
java.lang.String v5;
java.util.ArrayDeque v0, v1;
v0 := @parameter0: java.util.ArrayDeque;
v1 = new java.util.ArrayDeque;
specialinvoke v1.<java.util.ArrayDeque: void <init>(java.util.Collection)>(v0);
v2 = virtualinvoke v1.<java.util.ArrayDeque: java.lang.Object removeLast()>();
v3 = virtualinvoke v2.<java.lang.String: int length()>();
v4 = v3 - 3;
v5 = virtualinvoke v2.<java.lang.String: java.lang.String substring(int,int)>(0, v4);
virtualinvoke v1.<java.util.ArrayDeque: void addLast(java.lang.Object)>(v5);
return v1;
}
private static java.lang.String indexName(java.lang.String, java.lang.String, io.smallrye.config.NameIterator)
{
int v10, v11, v12, v16, v17, v18, v20, v23, v24, v7, v8;
java.lang.String v0, v1, v15, v19, v21, v4, v5, v6, v9;
char v13, v14;
java.lang.NumberFormatException v22;
io.smallrye.config.NameIterator v2, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: io.smallrye.config.NameIterator;
v3 = new io.smallrye.config.NameIterator;
specialinvoke v3.<io.smallrye.config.NameIterator: void <init>(java.lang.String,boolean)>(v1, 1);
v4 = virtualinvoke v3.<io.smallrye.config.NameIterator: java.lang.String getPreviousSegment()>();
v5 = virtualinvoke v2.<io.smallrye.config.NameIterator: java.lang.String getAllPreviousSegments()>();
v6 = staticinvoke <io.smallrye.config.ConfigMappingProvider: java.lang.String normalizeIfIndexed(java.lang.String)>(v4);
v7 = virtualinvoke v5.<java.lang.String: int lastIndexOf(java.lang.String)>(v6);
v8 = (int) -1;
if v7 == v8 goto label6;
v9 = staticinvoke <io.smallrye.config.ConfigMappingProvider: java.lang.String normalizeIfIndexed(java.lang.String)>(v4);
v10 = virtualinvoke v9.<java.lang.String: int length()>();
v11 = v7 + v10;
v12 = virtualinvoke v5.<java.lang.String: int length()>();
if v11 >= v12 goto label6;
v13 = virtualinvoke v5.<java.lang.String: char charAt(int)>(v11);
if v13 != 91 goto label6;
label1:
v14 = virtualinvoke v5.<java.lang.String: char charAt(int)>(v11);
if v14 != 93 goto label5;
label2:
v15 = staticinvoke <io.smallrye.config.ConfigMappingProvider: java.lang.String normalizeIfIndexed(java.lang.String)>(v4);
v16 = virtualinvoke v15.<java.lang.String: int length()>();
v17 = v7 + v16;
v18 = v17 + 1;
v19 = virtualinvoke v5.<java.lang.String: java.lang.String substring(int,int)>(v18, v11);
v20 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v19);
v21 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int)>(v0, v20) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001[\u0001]");
label3:
return v21;
label4:
v22 := @caughtexception;
goto label6;
label5:
v23 = virtualinvoke v5.<java.lang.String: int length()>();
v24 = v23 - 1;
if v11 >= v24 goto label6;
v11 = v11 + 1;
goto label1;
label6:
return v0;
catch java.lang.NumberFormatException from label2 to label3 with label4;
}
private static io.smallrye.config.NameIterator atMapPath(java.lang.String, io.smallrye.config.NameIterator)
{
io.smallrye.config.NameIterator v1, v3, v6;
int v2, v5, v8;
java.lang.String v0, v7;
boolean v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: io.smallrye.config.NameIterator;
v2 = 0;
v3 = new io.smallrye.config.NameIterator;
specialinvoke v3.<io.smallrye.config.NameIterator: void <init>(java.lang.String)>(v0);
label1:
v4 = virtualinvoke v3.<io.smallrye.config.NameIterator: boolean hasNext()>();
if v4 == 0 goto label2;
v2 = v2 + 1;
virtualinvoke v3.<io.smallrye.config.NameIterator: void next()>();
goto label1;
label2:
v5 = v2 - 1;
v6 = new io.smallrye.config.NameIterator;
v7 = virtualinvoke v1.<io.smallrye.config.NameIterator: java.lang.String getName()>();
specialinvoke v6.<io.smallrye.config.NameIterator: void <init>(java.lang.String)>(v7);
v8 = 0;
label3:
if v8 >= v5 goto label4;
virtualinvoke v6.<io.smallrye.config.NameIterator: void next()>();
v8 = v8 + 1;
goto label3;
label4:
return v6;
}
private static java.lang.String propertyName(io.smallrye.config.ConfigMappingInterface$Property, io.smallrye.config.ConfigMappingInterface, io.smallrye.config.ConfigMappingInterface$NamingStrategy)
{
io.smallrye.config.ConfigMappingInterface$Property v0;
io.smallrye.config.ConfigMappingInterface v1;
java.lang.Object v6;
java.lang.String v5;
io.smallrye.config.ConfigMappingInterface$NamingStrategy v2, v3, v4;
v0 := @parameter0: io.smallrye.config.ConfigMappingInterface$Property;
v1 := @parameter1: io.smallrye.config.ConfigMappingInterface;
v2 := @parameter2: io.smallrye.config.ConfigMappingInterface$NamingStrategy;
v3 = virtualinvoke v1.<io.smallrye.config.ConfigMappingInterface: io.smallrye.config.ConfigMappingInterface$NamingStrategy getNamingStrategy()>();
v4 = staticinvoke <io.smallrye.config.ConfigMappingProvider: io.smallrye.config.ConfigMappingInterface$NamingStrategy namingStrategy(io.smallrye.config.ConfigMappingInterface$NamingStrategy,io.smallrye.config.ConfigMappingInterface$NamingStrategy)>(v2, v3);
v5 = virtualinvoke v0.<io.smallrye.config.ConfigMappingInterface$Property: java.lang.String getPropertyName()>();
v6 = interfaceinvoke v4.<io.smallrye.config.ConfigMappingInterface$NamingStrategy: java.lang.Object apply(java.lang.Object)>(v5);
return v6;
}
private static io.smallrye.config.ConfigMappingInterface$NamingStrategy namingStrategy(io.smallrye.config.ConfigMappingInterface$NamingStrategy, io.smallrye.config.ConfigMappingInterface$NamingStrategy)
{
boolean v2;
io.smallrye.config.ConfigMappingInterface$NamingStrategy v0, v1;
v0 := @parameter0: io.smallrye.config.ConfigMappingInterface$NamingStrategy;
v1 := @parameter1: io.smallrye.config.ConfigMappingInterface$NamingStrategy;
v2 = interfaceinvoke v1.<io.smallrye.config.ConfigMappingInterface$NamingStrategy: boolean isDefault()>();
if v2 != 0 goto label1;
return v1;
label1:
return v0;
}
public static io.smallrye.config.ConfigMappingProvider$Builder builder()
{
io.smallrye.config.ConfigMappingProvider$Builder v0;
v0 = new io.smallrye.config.ConfigMappingProvider$Builder;
specialinvoke v0.<io.smallrye.config.ConfigMappingProvider$Builder: void <init>()>();
return v0;
}
io.smallrye.config.KeyMap getMatchActions()
{
io.smallrye.config.KeyMap v1;
io.smallrye.config.ConfigMappingProvider v0;
v0 := @this: io.smallrye.config.ConfigMappingProvider;
v1 = v0.<io.smallrye.config.ConfigMappingProvider: io.smallrye.config.KeyMap matchActions>;
return v1;
}
java.util.Map getProperties()
{
io.smallrye.config.ConfigMappingProvider v0;
java.util.Map v1;
v0 := @this: io.smallrye.config.ConfigMappingProvider;
v1 = v0.<io.smallrye.config.ConfigMappingProvider: java.util.Map properties>;
return v1;
}
io.smallrye.config.KeyMap getDefaultValues()
{
io.smallrye.config.KeyMap v1;
io.smallrye.config.ConfigMappingProvider v0;
v0 := @this: io.smallrye.config.ConfigMappingProvider;
v1 = v0.<io.smallrye.config.ConfigMappingProvider: io.smallrye.config.KeyMap defaultValues>;
return v1;
}
io.smallrye.config.ConfigMappingContext mapConfiguration(io.smallrye.config.SmallRyeConfig) throws io.smallrye.config.ConfigValidationException
{
org.eclipse.microprofile.config.spi.ConfigSource v14;
java.util.Iterator v3;
java.util.Set v10, v11;
io.smallrye.config.SmallRyeConfig v1;
java.util.function.Supplier v12;
java.lang.Iterable v2;
java.util.HashSet v8;
java.util.Map v9;
io.smallrye.config.KeyMap v7;
java.lang.Object v13, v5;
io.smallrye.config.ConfigMappingProvider v0;
boolean v4, v6;
v0 := @this: io.smallrye.config.ConfigMappingProvider;
v1 := @parameter0: io.smallrye.config.SmallRyeConfig;
v2 = virtualinvoke v1.<io.smallrye.config.SmallRyeConfig: java.lang.Iterable getConfigSources()>();
v3 = interfaceinvoke v2.<java.lang.Iterable: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = v5 instanceof io.smallrye.config.DefaultValuesConfigSource;
if v6 == 0 goto label1;
v7 = v0.<io.smallrye.config.ConfigMappingProvider: io.smallrye.config.KeyMap defaultValues>;
virtualinvoke v14.<io.smallrye.config.DefaultValuesConfigSource: void registerDefaults(io.smallrye.config.KeyMap)>(v7);
goto label1;
label2:
v8 = new java.util.HashSet;
v9 = virtualinvoke v0.<io.smallrye.config.ConfigMappingProvider: java.util.Map getProperties()>();
v10 = interfaceinvoke v9.<java.util.Map: java.util.Set keySet()>();
specialinvoke v8.<java.util.HashSet: void <init>(java.util.Collection)>(v10);
v11 = staticinvoke <io.smallrye.config.ConfigMappingProvider: java.util.Set additionalMappedProperties(java.util.Set,io.smallrye.config.SmallRyeConfig)>(v8, v1);
virtualinvoke v1.<io.smallrye.config.SmallRyeConfig: void addPropertyNames(java.util.Set)>(v11);
v12 = staticinvoke <io.smallrye.config.ConfigMappingProvider$lambda_mapConfiguration_3__3083: java.util.function.Supplier bootstrap$(io.smallrye.config.ConfigMappingProvider,io.smallrye.config.SmallRyeConfig)>(v0, v1);
v13 = staticinvoke <io.smallrye.config.SecretKeys: java.lang.Object doUnlocked(java.util.function.Supplier)>(v12);
return v13;
}
private io.smallrye.config.ConfigMappingContext mapConfigurationInternal(io.smallrye.config.SmallRyeConfig) throws io.smallrye.config.ConfigValidationException
{
java.util.Map v3, v5;
io.smallrye.config.KeyMap v24;
boolean v13, v20, v23, v28, v31, v33, v4, v8;
java.util.Set v6;
java.util.List v32;
java.util.Optional v27;
java.lang.StringBuilder v15;
java.lang.Object[] v36;
java.lang.Iterable v18;
int v16;
java.lang.Boolean v29;
io.smallrye.config.ConfigMappingProvider v0;
java.util.Iterator v12, v19, v7;
io.smallrye.config.SmallRyeConfig v1;
io.smallrye.config.ConfigMappingContext v2;
io.smallrye.config.ConfigValidationException$Problem[] v35;
io.smallrye.config.NameIterator v22;
io.smallrye.config.ConfigValidationException v34;
java.lang.Class v26;
java.lang.Object v10, v11, v14, v17, v21, v25, v30, v9;
v0 := @this: io.smallrye.config.ConfigMappingProvider;
v1 := @parameter0: io.smallrye.config.SmallRyeConfig;
staticinvoke <io.smallrye.common.constraint.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("config", v1);
v2 = new io.smallrye.config.ConfigMappingContext;
specialinvoke v2.<io.smallrye.config.ConfigMappingContext: void <init>(io.smallrye.config.SmallRyeConfig)>(v1);
v3 = v0.<io.smallrye.config.ConfigMappingProvider: java.util.Map roots>;
v4 = interfaceinvoke v3.<java.util.Map: boolean isEmpty()>();
if v4 == 0 goto label1;
return v2;
label1:
v5 = v0.<io.smallrye.config.ConfigMappingProvider: java.util.Map roots>;
v6 = interfaceinvoke v5.<java.util.Map: java.util.Set entrySet()>();
v7 = interfaceinvoke v6.<java.util.Set: java.util.Iterator iterator()>();
label2:
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label4;
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
v10 = interfaceinvoke v9.<java.util.Map$Entry: java.lang.Object getKey()>();
v11 = interfaceinvoke v9.<java.util.Map$Entry: java.lang.Object getValue()>();
v12 = interfaceinvoke v11.<java.util.List: java.util.Iterator iterator()>();
label3:
v13 = interfaceinvoke v12.<java.util.Iterator: boolean hasNext()>();
if v13 == 0 goto label2;
v14 = interfaceinvoke v12.<java.util.Iterator: java.lang.Object next()>();
v15 = virtualinvoke v2.<io.smallrye.config.ConfigMappingContext: java.lang.StringBuilder getStringBuilder()>();
v16 = virtualinvoke v15.<java.lang.StringBuilder: int length()>();
virtualinvoke v15.<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>(0, v16, v10);
v17 = virtualinvoke v2.<io.smallrye.config.ConfigMappingContext: java.lang.Object constructRoot(java.lang.Class)>(v14);
virtualinvoke v2.<io.smallrye.config.ConfigMappingContext: void registerRoot(java.lang.Class,java.lang.String,io.smallrye.config.ConfigMappingObject)>(v14, v10, v17);
goto label3;
label4:
v18 = virtualinvoke v1.<io.smallrye.config.SmallRyeConfig: java.lang.Iterable getPropertyNames()>();
v19 = interfaceinvoke v18.<java.lang.Iterable: java.util.Iterator iterator()>();
label5:
v20 = interfaceinvoke v19.<java.util.Iterator: boolean hasNext()>();
if v20 == 0 goto label7;
v21 = interfaceinvoke v19.<java.util.Iterator: java.lang.Object next()>();
v22 = new io.smallrye.config.NameIterator;
specialinvoke v22.<io.smallrye.config.NameIterator: void <init>(java.lang.String)>(v21);
v23 = specialinvoke v0.<io.smallrye.config.ConfigMappingProvider: boolean isPropertyInRoot(io.smallrye.config.NameIterator)>(v22);
if v23 == 0 goto label5;
v24 = v0.<io.smallrye.config.ConfigMappingProvider: io.smallrye.config.KeyMap matchActions>;
v25 = virtualinvoke v24.<io.smallrye.config.KeyMap: java.lang.Object findRootValue(io.smallrye.config.NameIterator)>(v22);
if v25 == null goto label6;
interfaceinvoke v25.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>(v2, v22);
goto label5;
label6:
virtualinvoke v2.<io.smallrye.config.ConfigMappingContext: void unknownProperty(java.lang.String)>(v21);
goto label5;
label7:
v26 = <java.lang.Boolean: java.lang.Class TYPE>;
v27 = virtualinvoke v1.<io.smallrye.config.SmallRyeConfig: java.util.Optional getOptionalValue(java.lang.String,java.lang.Class)>("smallrye.config.mapping.validate-unknown", v26);
v28 = v0.<io.smallrye.config.ConfigMappingProvider: boolean validateUnknown>;
v29 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v28);
v30 = virtualinvoke v27.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(v29);
v31 = virtualinvoke v30.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v2.<io.smallrye.config.ConfigMappingContext: void validateUnknown(boolean)>(v31);
v32 = virtualinvoke v2.<io.smallrye.config.ConfigMappingContext: java.util.List getProblems()>();
v33 = interfaceinvoke v32.<java.util.List: boolean isEmpty()>();
if v33 != 0 goto label8;
v34 = new io.smallrye.config.ConfigValidationException;
v35 = <io.smallrye.config.ConfigValidationException$Problem: io.smallrye.config.ConfigValidationException$Problem[] NO_PROBLEMS>;
v36 = interfaceinvoke v32.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v35);
specialinvoke v34.<io.smallrye.config.ConfigValidationException: void <init>(io.smallrye.config.ConfigValidationException$Problem[])>(v36);
throw v34;
label8:
virtualinvoke v2.<io.smallrye.config.ConfigMappingContext: void fillInOptionals()>();
return v2;
}
private boolean isPropertyInRoot(io.smallrye.config.NameIterator)
{
java.util.Map v2;
int v10, v7, v9;
java.lang.String v13, v15, v16, v8;
io.smallrye.config.ConfigMappingProvider v0;
boolean v12, v14, v17, v18, v19, v5;
java.util.Iterator v4;
java.util.Set v3;
io.smallrye.config.NameIterator v1, v11;
java.lang.Object v6;
v0 := @this: io.smallrye.config.ConfigMappingProvider;
v1 := @parameter0: io.smallrye.config.NameIterator;
v2 = v0.<io.smallrye.config.ConfigMappingProvider: java.util.Map roots>;
v3 = interfaceinvoke v2.<java.util.Map: java.util.Set keySet()>();
v4 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label6;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = virtualinvoke v6.<java.lang.String: int length()>();
if v7 != 0 goto label2;
return 1;
label2:
v8 = virtualinvoke v1.<io.smallrye.config.NameIterator: java.lang.String getName()>();
v9 = virtualinvoke v8.<java.lang.String: int length()>();
v10 = virtualinvoke v6.<java.lang.String: int length()>();
if v9 <= v10 goto label1;
v11 = new io.smallrye.config.NameIterator;
specialinvoke v11.<io.smallrye.config.NameIterator: void <init>(java.lang.String)>(v6);
label3:
v12 = virtualinvoke v11.<io.smallrye.config.NameIterator: boolean hasNext()>();
if v12 == 0 goto label1;
v13 = virtualinvoke v11.<io.smallrye.config.NameIterator: java.lang.String getNextSegment()>();
v14 = virtualinvoke v1.<io.smallrye.config.NameIterator: boolean hasNext()>();
if v14 != 0 goto label4;
virtualinvoke v1.<io.smallrye.config.NameIterator: void goToStart()>();
goto label1;
label4:
v15 = virtualinvoke v1.<io.smallrye.config.NameIterator: java.lang.String getNextSegment()>();
v16 = staticinvoke <io.smallrye.config.ConfigMappingProvider: java.lang.String normalizeIfIndexed(java.lang.String)>(v15);
v17 = virtualinvoke v13.<java.lang.String: boolean equals(java.lang.Object)>(v16);
if v17 != 0 goto label5;
virtualinvoke v1.<io.smallrye.config.NameIterator: void goToStart()>();
goto label1;
label5:
virtualinvoke v11.<io.smallrye.config.NameIterator: void next()>();
virtualinvoke v1.<io.smallrye.config.NameIterator: void next()>();
v18 = virtualinvoke v11.<io.smallrye.config.NameIterator: boolean hasNext()>();
if v18 != 0 goto label3;
v19 = virtualinvoke v1.<io.smallrye.config.NameIterator: boolean hasNext()>();
if v19 == 0 goto label3;
virtualinvoke v1.<io.smallrye.config.NameIterator: void goToStart()>();
return 1;
label6:
return 0;
}
private static java.util.Set additionalMappedProperties(java.util.Set, io.smallrye.config.SmallRyeConfig)
{
boolean v10, v14, v19, v21, v24, v26, v38, v5, v50, v53;
java.util.Set v0, v7;
java.lang.StringBuilder v23, v48, v49;
java.lang.Iterable v3, v8;
java.util.HashSet v12, v16, v2;
int v27, v28, v29, v30, v31, v33, v34, v39, v40, v41, v42, v44, v46, v47;
java.lang.String v17, v25, v32, v35, v36, v37, v45, v51, v52;
java.util.Iterator v13, v18, v4, v9;
char v43;
io.smallrye.config.SmallRyeConfig v1;
io.smallrye.config.NameIterator v22;
java.lang.Object v11, v15, v20, v6;
v0 := @parameter0: java.util.Set;
v1 := @parameter1: io.smallrye.config.SmallRyeConfig;
v2 = new java.util.HashSet;
specialinvoke v2.<java.util.HashSet: void <init>()>();
v3 = virtualinvoke v1.<io.smallrye.config.SmallRyeConfig: java.lang.Iterable getConfigSources(java.lang.Class)>(class "Lio/smallrye/config/EnvConfigSource;");
v4 = interfaceinvoke v3.<java.lang.Iterable: java.util.Iterator iterator()>();
label01:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label02;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = interfaceinvoke v6.<org.eclipse.microprofile.config.spi.ConfigSource: java.util.Set getPropertyNames()>();
interfaceinvoke v2.<java.util.Set: boolean addAll(java.util.Collection)>(v7);
goto label01;
label02:
v8 = virtualinvoke v1.<io.smallrye.config.SmallRyeConfig: java.lang.Iterable getPropertyNames()>();
v9 = interfaceinvoke v8.<java.lang.Iterable: java.util.Iterator iterator()>();
label03:
v10 = interfaceinvoke v9.<java.util.Iterator: boolean hasNext()>();
if v10 == 0 goto label04;
v11 = interfaceinvoke v9.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v0.<java.util.Set: boolean remove(java.lang.Object)>(v11);
goto label03;
label04:
v12 = new java.util.HashSet;
specialinvoke v12.<java.util.HashSet: void <init>()>();
v13 = interfaceinvoke v0.<java.util.Set: java.util.Iterator iterator()>();
label05:
v14 = interfaceinvoke v13.<java.util.Iterator: boolean hasNext()>();
if v14 == 0 goto label16;
v15 = interfaceinvoke v13.<java.util.Iterator: java.lang.Object next()>();
v16 = new java.util.HashSet;
specialinvoke v16.<java.util.HashSet: void <init>()>();
v17 = staticinvoke <io.smallrye.config.common.utils.StringUtil: java.lang.String replaceNonAlphanumericByUnderscores(java.lang.String)>(v15);
v18 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label06:
v19 = interfaceinvoke v18.<java.util.Iterator: boolean hasNext()>();
if v19 == 0 goto label15;
v20 = interfaceinvoke v18.<java.util.Iterator: java.lang.Object next()>();
v21 = virtualinvoke v20.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v17);
if v21 == 0 goto label07;
interfaceinvoke v12.<java.util.Set: boolean add(java.lang.Object)>(v15);
interfaceinvoke v16.<java.util.Set: boolean add(java.lang.Object)>(v20);
goto label15;
label07:
v22 = new io.smallrye.config.NameIterator;
specialinvoke v22.<io.smallrye.config.NameIterator: void <init>(java.lang.String)>(v15);
v23 = new java.lang.StringBuilder;
specialinvoke v23.<java.lang.StringBuilder: void <init>()>();
label08:
v24 = virtualinvoke v22.<io.smallrye.config.NameIterator: boolean hasNext()>();
if v24 == 0 goto label14;
v25 = virtualinvoke v22.<io.smallrye.config.NameIterator: java.lang.String getNextSegment()>();
v26 = staticinvoke <io.smallrye.config.ConfigMappingProvider: boolean isIndexed(java.lang.String)>(v25);
if v26 == 0 goto label12;
v27 = virtualinvoke v22.<io.smallrye.config.NameIterator: int getPosition()>();
v28 = virtualinvoke v25.<java.lang.String: int indexOf(java.lang.String)>("[");
v29 = v28 + v27;
v30 = v29 + 1;
v31 = virtualinvoke v20.<java.lang.String: int length()>();
if v31 < v30 goto label13;
v32 = virtualinvoke v20.<java.lang.String: java.lang.String toLowerCase()>();
v33 = v30 - v27;
v34 = v33 - 1;
v35 = virtualinvoke v25.<java.lang.String: java.lang.String substring(int,int)>(0, v34);
v36 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.StringBuilder,java.lang.String)>(v23, v35) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001_");
v37 = staticinvoke <io.smallrye.config.common.utils.StringUtil: java.lang.String replaceNonAlphanumericByUnderscores(java.lang.String)>(v36);
v38 = virtualinvoke v32.<java.lang.String: boolean startsWith(java.lang.String)>(v37);
if v38 == 0 goto label13;
v39 = (int) -1;
v40 = v39;
v41 = v30 + 1;
label09:
v42 = virtualinvoke v20.<java.lang.String: int length()>();
if v41 >= v42 goto label11;
v43 = virtualinvoke v20.<java.lang.String: char charAt(int)>(v41);
if v43 != 95 goto label10;
v40 = v41;
goto label11;
label10:
v41 = v41 + 1;
goto label09;
label11:
v44 = v30 + 1;
v45 = virtualinvoke v20.<java.lang.String: java.lang.String substring(int,int)>(v44, v40);
v46 = virtualinvoke v25.<java.lang.String: int indexOf(java.lang.String)>("[");
v47 = v46 + 1;
v48 = virtualinvoke v23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(v25, 0, v47);
v49 = virtualinvoke v48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v45);
virtualinvoke v49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
goto label13;
label12:
virtualinvoke v23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v25);
label13:
virtualinvoke v22.<io.smallrye.config.NameIterator: void next()>();
v50 = virtualinvoke v22.<io.smallrye.config.NameIterator: boolean hasNext()>();
if v50 == 0 goto label08;
virtualinvoke v23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
goto label08;
label14:
v51 = virtualinvoke v23.<java.lang.StringBuilder: java.lang.String toString()>();
v52 = staticinvoke <io.smallrye.config.common.utils.StringUtil: java.lang.String replaceNonAlphanumericByUnderscores(java.lang.String)>(v51);
v53 = virtualinvoke v20.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v52);
if v53 == 0 goto label06;
interfaceinvoke v12.<java.util.Set: boolean add(java.lang.Object)>(v51);
interfaceinvoke v16.<java.util.Set: boolean add(java.lang.Object)>(v20);
goto label06;
label15:
interfaceinvoke v2.<java.util.Set: boolean removeAll(java.util.Collection)>(v16);
goto label05;
label16:
return v12;
}
private static java.lang.String normalizeIfIndexed(java.lang.String)
{
java.lang.NumberFormatException v10;
int v1, v2, v3, v4, v5;
java.lang.String v0, v6, v8, v9;
boolean v7;
v0 := @parameter0: java.lang.String;
v1 = virtualinvoke v0.<java.lang.String: int indexOf(java.lang.String)>("[");
v2 = virtualinvoke v0.<java.lang.String: int indexOf(java.lang.String)>("]");
v3 = (int) -1;
if v1 == v3 goto label4;
v4 = (int) -1;
if v2 == v4 goto label4;
v5 = v1 + 1;
v6 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(v5, v2);
v7 = virtualinvoke v6.<java.lang.String: boolean equals(java.lang.Object)>("*");
if v7 == 0 goto label1;
v8 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(0, v1);
return v8;
label1:
staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v6);
v9 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(0, v1);
label2:
return v9;
label3:
v10 := @caughtexception;
return v0;
label4:
return v0;
catch java.lang.NumberFormatException from label1 to label2 with label3;
}
private static boolean isIndexed(java.lang.String)
{
java.lang.NumberFormatException v8;
int v1, v2, v3, v4, v5;
java.lang.String v0, v6;
boolean v7;
v0 := @parameter0: java.lang.String;
v1 = virtualinvoke v0.<java.lang.String: int indexOf(java.lang.String)>("[");
v2 = virtualinvoke v0.<java.lang.String: int indexOf(java.lang.String)>("]");
v3 = (int) -1;
if v1 == v3 goto label4;
v4 = (int) -1;
if v2 == v4 goto label4;
v5 = v1 + 1;
v6 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(v5, v2);
v7 = virtualinvoke v6.<java.lang.String: boolean equals(java.lang.Object)>("*");
if v7 == 0 goto label1;
return 1;
label1:
staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v6);
label2:
return 1;
label3:
v8 := @caughtexception;
return 0;
label4:
return 0;
catch java.lang.NumberFormatException from label1 to label2 with label3;
}
static void <clinit>()
{
java.util.function.BiConsumer v0, v2;
io.smallrye.config.KeyMap v1;
v0 = staticinvoke <io.smallrye.common.function.Functions: java.util.function.BiConsumer discardingBiConsumer()>();
<io.smallrye.config.ConfigMappingProvider: java.util.function.BiConsumer DO_NOTHING> = v0;
v1 = new io.smallrye.config.KeyMap;
specialinvoke v1.<io.smallrye.config.KeyMap: void <init>()>();
v2 = <io.smallrye.config.ConfigMappingProvider: java.util.function.BiConsumer DO_NOTHING>;
virtualinvoke v1.<io.smallrye.config.KeyMap: java.lang.Object putRootValue(java.lang.Object)>(v2);
virtualinvoke v1.<io.smallrye.config.KeyMap: io.smallrye.config.KeyMap putAny(io.smallrye.config.KeyMap)>(v1);
<io.smallrye.config.ConfigMappingProvider: io.smallrye.config.KeyMap IGNORE_EVERYTHING> = v1;
return;
}
}