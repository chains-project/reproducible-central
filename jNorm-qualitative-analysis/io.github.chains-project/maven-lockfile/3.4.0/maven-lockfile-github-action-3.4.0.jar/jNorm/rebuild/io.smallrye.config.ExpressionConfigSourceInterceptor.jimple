public class io.smallrye.config.ExpressionConfigSourceInterceptor extends java.lang.Object implements io.smallrye.config.ConfigSourceInterceptor
{
private static final long serialVersionUID;
private static final int MAX_DEPTH;
private final boolean enabled;
public void <init>()
{
io.smallrye.config.ExpressionConfigSourceInterceptor v0;
v0 := @this: io.smallrye.config.ExpressionConfigSourceInterceptor;
specialinvoke v0.<io.smallrye.config.ExpressionConfigSourceInterceptor: void <init>(boolean)>(1);
return;
}
public void <init>(boolean)
{
io.smallrye.config.ExpressionConfigSourceInterceptor v0;
boolean v1;
v0 := @this: io.smallrye.config.ExpressionConfigSourceInterceptor;
v1 := @parameter0: boolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.smallrye.config.ExpressionConfigSourceInterceptor: boolean enabled> = v1;
return;
}
public io.smallrye.config.ConfigValue getValue(io.smallrye.config.ConfigSourceInterceptorContext, java.lang.String)
{
io.smallrye.config.ExpressionConfigSourceInterceptor v0;
io.smallrye.config.ConfigSourceInterceptorContext v1;
java.lang.String v2;
io.smallrye.config.ConfigValue v3;
v0 := @this: io.smallrye.config.ExpressionConfigSourceInterceptor;
v1 := @parameter0: io.smallrye.config.ConfigSourceInterceptorContext;
v2 := @parameter1: java.lang.String;
v3 = specialinvoke v0.<io.smallrye.config.ExpressionConfigSourceInterceptor: io.smallrye.config.ConfigValue getValue(io.smallrye.config.ConfigSourceInterceptorContext,java.lang.String,int)>(v1, v2, 1);
return v3;
}
private io.smallrye.config.ConfigValue getValue(io.smallrye.config.ConfigSourceInterceptorContext, java.lang.String, int)
{
io.smallrye.common.expression.Expression$Flag v14, v15, v16, v17;
io.smallrye.config.ConfigValue$ConfigValueBuilder v10, v21;
io.smallrye.common.expression.Expression$Flag[] v13;
io.smallrye.config.ConfigMessages v4;
int v3;
io.smallrye.config.ExpressionConfigSourceInterceptor$1 v19;
java.lang.String v11, v12, v2, v20, v9;
boolean v7, v8;
io.smallrye.config.ExpressionConfigSourceInterceptor v0;
io.smallrye.common.expression.Expression v18;
java.lang.IllegalArgumentException v5;
io.smallrye.config.ConfigValue v22, v6;
io.smallrye.config.ConfigSourceInterceptorContext v1;
v0 := @this: io.smallrye.config.ExpressionConfigSourceInterceptor;
v1 := @parameter0: io.smallrye.config.ConfigSourceInterceptorContext;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: int;
if v3 < 32 goto label1;
v4 = <io.smallrye.config.ConfigMessages: io.smallrye.config.ConfigMessages msg>;
v5 = interfaceinvoke v4.<io.smallrye.config.ConfigMessages: java.lang.IllegalArgumentException expressionExpansionTooDepth(java.lang.String)>(v2);
throw v5;
label1:
v6 = interfaceinvoke v1.<io.smallrye.config.ConfigSourceInterceptorContext: io.smallrye.config.ConfigValue proceed(java.lang.String)>(v2);
v7 = staticinvoke <io.smallrye.config.Expressions: boolean isEnabled()>();
if v7 == 0 goto label2;
v8 = v0.<io.smallrye.config.ExpressionConfigSourceInterceptor: boolean enabled>;
if v8 != 0 goto label3;
label2:
return v6;
label3:
if v6 == null goto label4;
v9 = virtualinvoke v6.<io.smallrye.config.ConfigValue: java.lang.String getValue()>();
if v9 != null goto label5;
label4:
return null;
label5:
v10 = virtualinvoke v6.<io.smallrye.config.ConfigValue: io.smallrye.config.ConfigValue$ConfigValueBuilder 'from'()>();
v11 = virtualinvoke v6.<io.smallrye.config.ConfigValue: java.lang.String getValue()>();
v12 = specialinvoke v0.<io.smallrye.config.ExpressionConfigSourceInterceptor: java.lang.String escapeDollarIfExists(java.lang.String)>(v11);
v13 = newarray (io.smallrye.common.expression.Expression$Flag)[4];
v14 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag LENIENT_SYNTAX>;
v13[0] = v14;
v15 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag NO_TRIM>;
v13[1] = v15;
v16 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag NO_SMART_BRACES>;
v13[2] = v16;
v17 = <io.smallrye.common.expression.Expression$Flag: io.smallrye.common.expression.Expression$Flag DOUBLE_COLON>;
v13[3] = v17;
v18 = staticinvoke <io.smallrye.common.expression.Expression: io.smallrye.common.expression.Expression compile(java.lang.String,io.smallrye.common.expression.Expression$Flag[])>(v12, v13);
v19 = new io.smallrye.config.ExpressionConfigSourceInterceptor$1;
specialinvoke v19.<io.smallrye.config.ExpressionConfigSourceInterceptor$1: void <init>(io.smallrye.config.ExpressionConfigSourceInterceptor,io.smallrye.config.ConfigValue$ConfigValueBuilder,io.smallrye.config.ConfigSourceInterceptorContext,int,io.smallrye.config.ConfigValue)>(v0, v10, v1, v3, v6);
v20 = virtualinvoke v18.<io.smallrye.common.expression.Expression: java.lang.String evaluate(java.util.function.BiConsumer)>(v19);
v21 = virtualinvoke v10.<io.smallrye.config.ConfigValue$ConfigValueBuilder: io.smallrye.config.ConfigValue$ConfigValueBuilder withValue(java.lang.String)>(v20);
v22 = virtualinvoke v21.<io.smallrye.config.ConfigValue$ConfigValueBuilder: io.smallrye.config.ConfigValue build()>();
return v22;
}
private java.lang.String escapeDollarIfExists(java.lang.String)
{
io.smallrye.config.ExpressionConfigSourceInterceptor v0;
int v2, v3, v4, v6;
java.lang.StringBuilder v5, v7;
java.lang.String v1, v8, v9;
v0 := @this: io.smallrye.config.ExpressionConfigSourceInterceptor;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v1.<java.lang.String: int indexOf(java.lang.String)>("\\$");
v3 = (int) -1;
if v2 == v3 goto label3;
v4 = 0;
v5 = new java.lang.StringBuilder;
specialinvoke v5.<java.lang.StringBuilder: void <init>()>();
label1:
v6 = (int) -1;
if v2 == v6 goto label2;
v7 = virtualinvoke v5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(v1, v4, v2);
virtualinvoke v7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$$");
v4 = v2 + 2;
v2 = virtualinvoke v1.<java.lang.String: int indexOf(java.lang.String,int)>("\\$", v4);
goto label1;
label2:
v8 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int)>(v4);
virtualinvoke v5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v8);
v9 = virtualinvoke v5.<java.lang.StringBuilder: java.lang.String toString()>();
return v9;
label3:
return v1;
}
}