class io.smallrye.config.ImplicitConverters$StaticMethodConverter extends java.lang.Object implements org.eclipse.microprofile.config.spi.Converter, java.io.Serializable
{
private static final long serialVersionUID;
private final java.lang.Class clazz;
private final java.lang.reflect.Method method;
static final boolean $assertionsDisabled;
void <init>(java.lang.Class, java.lang.reflect.Method)
{
io.smallrye.config.ImplicitConverters$StaticMethodConverter v0;
java.lang.Class v1, v4;
java.lang.AssertionError v5;
java.lang.reflect.Method v2;
boolean v3;
v0 := @this: io.smallrye.config.ImplicitConverters$StaticMethodConverter;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.reflect.Method;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = <io.smallrye.config.ImplicitConverters$StaticMethodConverter: boolean $assertionsDisabled>;
if v3 != 0 goto label1;
v4 = virtualinvoke v2.<java.lang.reflect.Method: java.lang.Class getReturnType()>();
if v1 == v4 goto label1;
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label1:
v0.<io.smallrye.config.ImplicitConverters$StaticMethodConverter: java.lang.Class clazz> = v1;
v0.<io.smallrye.config.ImplicitConverters$StaticMethodConverter: java.lang.reflect.Method method> = v2;
return;
}
public java.lang.Object convert(java.lang.String)
{
java.lang.Object[] v5;
io.smallrye.config.ImplicitConverters$StaticMethodConverter v0;
java.lang.ReflectiveOperationException v8;
java.lang.IllegalArgumentException v10;
io.smallrye.config.ConfigMessages v9;
java.lang.Class v3;
java.lang.Object v6, v7;
java.lang.String v1;
java.lang.reflect.Method v4;
boolean v2;
v0 := @this: io.smallrye.config.ImplicitConverters$StaticMethodConverter;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v1.<java.lang.String: boolean isEmpty()>();
if v2 == 0 goto label1;
return null;
label1:
v3 = v0.<io.smallrye.config.ImplicitConverters$StaticMethodConverter: java.lang.Class clazz>;
v4 = v0.<io.smallrye.config.ImplicitConverters$StaticMethodConverter: java.lang.reflect.Method method>;
v5 = newarray (java.lang.Object)[1];
v5[0] = v1;
v6 = virtualinvoke v4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, v5);
v7 = virtualinvoke v3.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(v6);
label2:
return v7;
label3:
v8 := @caughtexception;
v9 = <io.smallrye.config.ConfigMessages: io.smallrye.config.ConfigMessages msg>;
v10 = interfaceinvoke v9.<io.smallrye.config.ConfigMessages: java.lang.IllegalArgumentException staticMethodConverterFailure(java.lang.Throwable)>(v8);
throw v10;
catch java.lang.IllegalAccessException from label1 to label2 with label3;
catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
}
java.lang.Object writeReplace()
{
io.smallrye.config.ImplicitConverters$StaticMethodConverter v0;
io.smallrye.config.ImplicitConverters$StaticMethodConverter$Serialized v1;
java.lang.Class[] v7;
java.lang.Class v3, v8;
java.lang.String v5;
java.lang.reflect.Method v2, v4, v6;
v0 := @this: io.smallrye.config.ImplicitConverters$StaticMethodConverter;
v1 = new io.smallrye.config.ImplicitConverters$StaticMethodConverter$Serialized;
v2 = v0.<io.smallrye.config.ImplicitConverters$StaticMethodConverter: java.lang.reflect.Method method>;
v3 = virtualinvoke v2.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();
v4 = v0.<io.smallrye.config.ImplicitConverters$StaticMethodConverter: java.lang.reflect.Method method>;
v5 = virtualinvoke v4.<java.lang.reflect.Method: java.lang.String getName()>();
v6 = v0.<io.smallrye.config.ImplicitConverters$StaticMethodConverter: java.lang.reflect.Method method>;
v7 = virtualinvoke v6.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
v8 = v7[0];
specialinvoke v1.<io.smallrye.config.ImplicitConverters$StaticMethodConverter$Serialized: void <init>(java.lang.Class,java.lang.String,java.lang.Class)>(v3, v5, v8);
return v1;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/smallrye/config/ImplicitConverters;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.smallrye.config.ImplicitConverters$StaticMethodConverter: boolean $assertionsDisabled> = v2;
return;
}
}