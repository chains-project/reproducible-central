public final class io.smallrye.config.inject.ConfigProducerUtil extends java.lang.Object
{
private void <init>()
{
java.lang.UnsupportedOperationException v1;
io.smallrye.config.inject.ConfigProducerUtil v0;
v0 := @this: io.smallrye.config.inject.ConfigProducerUtil;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>()>();
throw v1;
}
public static java.lang.Object getValue(jakarta.enterprise.inject.spi.InjectionPoint, org.eclipse.microprofile.config.Config)
{
java.lang.reflect.Type v3;
jakarta.enterprise.inject.spi.InjectionPoint v0;
java.lang.Object v5;
java.lang.String v2, v4;
org.eclipse.microprofile.config.Config v1;
v0 := @parameter0: jakarta.enterprise.inject.spi.InjectionPoint;
v1 := @parameter1: org.eclipse.microprofile.config.Config;
v2 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: java.lang.String getName(jakarta.enterprise.inject.spi.InjectionPoint)>(v0);
v3 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: java.lang.reflect.Type getType(jakarta.enterprise.inject.spi.InjectionPoint)>(v0);
v4 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: java.lang.String getDefaultValue(jakarta.enterprise.inject.spi.InjectionPoint)>(v0);
v5 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: java.lang.Object getValue(java.lang.String,java.lang.reflect.Type,java.lang.String,org.eclipse.microprofile.config.Config)>(v2, v3, v4, v1);
return v5;
}
private static java.lang.reflect.Type getType(jakarta.enterprise.inject.spi.InjectionPoint)
{
jakarta.enterprise.inject.spi.InjectionPoint v0;
java.lang.reflect.Type v1, v3, v5, v8;
java.lang.reflect.Type[] v7;
boolean v2, v4, v6;
v0 := @parameter0: jakarta.enterprise.inject.spi.InjectionPoint;
v1 = interfaceinvoke v0.<jakarta.enterprise.inject.spi.InjectionPoint: java.lang.reflect.Type getType()>();
v2 = v1 instanceof java.lang.reflect.ParameterizedType;
if v2 == 0 goto label2;
v3 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
v4 = virtualinvoke v3.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljakarta/inject/Provider;");
if v4 != 0 goto label1;
v5 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
v6 = virtualinvoke v5.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljakarta/enterprise/inject/Instance;");
if v6 == 0 goto label2;
label1:
v7 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v8 = v7[0];
return v8;
label2:
return v1;
}
public static java.lang.Object getValue(java.lang.String, java.lang.reflect.Type, java.lang.String, org.eclipse.microprofile.config.Config)
{
java.util.function.BiFunction v12;
org.eclipse.microprofile.config.spi.Converter v13, v15;
java.lang.String v0, v2, v6, v7;
boolean v11, v9;
org.eclipse.microprofile.config.Config v3;
io.smallrye.config.ConfigValue v5, v8;
java.lang.reflect.Type v1;
java.lang.Object v10, v14, v16, v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.reflect.Type;
v2 := @parameter2: java.lang.String;
v3 := @parameter3: org.eclipse.microprofile.config.Config;
if v0 != null goto label1;
return null;
label1:
v4 = interfaceinvoke v3.<org.eclipse.microprofile.config.Config: java.lang.Object unwrap(java.lang.Class)>(class "Lio/smallrye/config/SmallRyeConfig;");
v5 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: io.smallrye.config.ConfigValue getConfigValue(java.lang.String,io.smallrye.config.SmallRyeConfig)>(v0, v4);
v6 = virtualinvoke v5.<io.smallrye.config.ConfigValue: java.lang.String getValue()>();
v7 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: java.lang.String resolveDefault(java.lang.String,java.lang.String)>(v6, v2);
v8 = virtualinvoke v5.<io.smallrye.config.ConfigValue: io.smallrye.config.ConfigValue withValue(java.lang.String)>(v7);
v9 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: boolean hasCollection(java.lang.reflect.Type)>(v1);
if v9 == 0 goto label2;
v10 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: java.lang.Object convertValues(io.smallrye.config.ConfigValue,java.lang.reflect.Type,io.smallrye.config.SmallRyeConfig)>(v8, v1, v4);
return v10;
label2:
v11 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: boolean hasMap(java.lang.reflect.Type)>(v1);
if v11 == 0 goto label3;
v12 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil$lambda_getValue_0__3060: java.util.function.BiFunction bootstrap$(io.smallrye.config.ConfigValue,org.eclipse.microprofile.config.Config)>(v8, v3);
v13 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: org.eclipse.microprofile.config.spi.Converter resolveConverter(java.lang.reflect.Type,io.smallrye.config.SmallRyeConfig,java.util.function.BiFunction)>(v1, v4, v12);
v14 = virtualinvoke v4.<io.smallrye.config.SmallRyeConfig: java.lang.Object convertValue(io.smallrye.config.ConfigValue,org.eclipse.microprofile.config.spi.Converter)>(v8, v13);
return v14;
label3:
v15 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: org.eclipse.microprofile.config.spi.Converter resolveConverter(java.lang.reflect.Type,io.smallrye.config.SmallRyeConfig)>(v1, v4);
v16 = virtualinvoke v4.<io.smallrye.config.SmallRyeConfig: java.lang.Object convertValue(io.smallrye.config.ConfigValue,org.eclipse.microprofile.config.spi.Converter)>(v8, v15);
return v16;
}
private static java.lang.Object convertValues(io.smallrye.config.ConfigValue, java.lang.reflect.Type, io.smallrye.config.SmallRyeConfig)
{
java.util.function.BiFunction v9;
io.smallrye.config.SmallRyeConfig v2;
io.smallrye.config.ConfigValue v0;
java.util.List v4;
org.eclipse.microprofile.config.spi.Converter v10, v7;
java.lang.reflect.Type v1;
java.lang.Object v11, v8;
java.lang.String v3, v5;
boolean v6;
v0 := @parameter0: io.smallrye.config.ConfigValue;
v1 := @parameter1: java.lang.reflect.Type;
v2 := @parameter2: io.smallrye.config.SmallRyeConfig;
v3 = virtualinvoke v0.<io.smallrye.config.ConfigValue: java.lang.String getName()>();
v4 = virtualinvoke v2.<io.smallrye.config.SmallRyeConfig: java.util.List getIndexedProperties(java.lang.String)>(v3);
v5 = virtualinvoke v0.<io.smallrye.config.ConfigValue: java.lang.String getRawValue()>();
if v5 != null goto label1;
v6 = interfaceinvoke v4.<java.util.List: boolean isEmpty()>();
if v6 == 0 goto label2;
label1:
v7 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: org.eclipse.microprofile.config.spi.Converter resolveConverter(java.lang.reflect.Type,io.smallrye.config.SmallRyeConfig)>(v1, v2);
v8 = virtualinvoke v2.<io.smallrye.config.SmallRyeConfig: java.lang.Object convertValue(io.smallrye.config.ConfigValue,org.eclipse.microprofile.config.spi.Converter)>(v0, v7);
return v8;
label2:
v9 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil$lambda_convertValues_1__3061: java.util.function.BiFunction bootstrap$(java.util.List,io.smallrye.config.SmallRyeConfig)>(v4, v2);
v10 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: org.eclipse.microprofile.config.spi.Converter resolveConverterForIndexed(java.lang.reflect.Type,io.smallrye.config.SmallRyeConfig,java.util.function.BiFunction)>(v1, v2, v9);
v11 = interfaceinvoke v10.<org.eclipse.microprofile.config.spi.Converter: java.lang.Object convert(java.lang.String)>(" ");
return v11;
}
static org.eclipse.microprofile.config.ConfigValue getConfigValue(jakarta.enterprise.inject.spi.InjectionPoint, io.smallrye.config.SmallRyeConfig)
{
jakarta.enterprise.inject.spi.InjectionPoint v0;
io.smallrye.config.SmallRyeConfig v1;
java.lang.String v2, v4, v5;
io.smallrye.config.ConfigValue v3;
v0 := @parameter0: jakarta.enterprise.inject.spi.InjectionPoint;
v1 := @parameter1: io.smallrye.config.SmallRyeConfig;
v2 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: java.lang.String getName(jakarta.enterprise.inject.spi.InjectionPoint)>(v0);
if v2 != null goto label1;
return null;
label1:
v3 = virtualinvoke v1.<io.smallrye.config.SmallRyeConfig: io.smallrye.config.ConfigValue getConfigValue(java.lang.String)>(v2);
v4 = virtualinvoke v3.<io.smallrye.config.ConfigValue: java.lang.String getRawValue()>();
if v4 != null goto label2;
v5 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: java.lang.String getDefaultValue(jakarta.enterprise.inject.spi.InjectionPoint)>(v0);
v3 = virtualinvoke v3.<io.smallrye.config.ConfigValue: io.smallrye.config.ConfigValue withValue(java.lang.String)>(v5);
label2:
return v3;
}
static io.smallrye.config.ConfigValue getConfigValue(java.lang.String, io.smallrye.config.SmallRyeConfig)
{
java.lang.Object v3;
io.smallrye.config.SmallRyeConfig v1;
java.lang.String v0;
java.util.function.Supplier v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: io.smallrye.config.SmallRyeConfig;
v2 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil$lambda_getConfigValue_2__3062: java.util.function.Supplier bootstrap$(io.smallrye.config.SmallRyeConfig,java.lang.String)>(v1, v0);
v3 = staticinvoke <io.smallrye.config.SecretKeys: java.lang.Object doUnlocked(java.util.function.Supplier)>(v2);
return v3;
}
private static java.lang.String resolveDefault(java.lang.String, java.lang.String)
{
java.lang.String v0, v1, v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
if v0 == null goto label1;
v2 = v0;
goto label2;
label1:
v2 = v1;
label2:
return v2;
}
private static org.eclipse.microprofile.config.spi.Converter resolveConverter(java.lang.reflect.Type, io.smallrye.config.SmallRyeConfig)
{
org.eclipse.microprofile.config.spi.Converter v3;
java.lang.reflect.Type v0;
java.util.function.BiFunction v2;
io.smallrye.config.SmallRyeConfig v1;
v0 := @parameter0: java.lang.reflect.Type;
v1 := @parameter1: io.smallrye.config.SmallRyeConfig;
v2 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil$newMapConverter__3063: java.util.function.BiFunction bootstrap$()>();
v3 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: org.eclipse.microprofile.config.spi.Converter resolveConverter(java.lang.reflect.Type,io.smallrye.config.SmallRyeConfig,java.util.function.BiFunction)>(v0, v1, v2);
return v3;
}
private static org.eclipse.microprofile.config.spi.Converter resolveConverter(java.lang.reflect.Type, io.smallrye.config.SmallRyeConfig, java.util.function.BiFunction)
{
java.util.function.BiFunction v2;
java.util.function.Supplier v28;
org.eclipse.microprofile.config.spi.Converter v11, v13, v15, v17, v20, v21, v23, v24, v25, v7, v9;
boolean v4;
java.util.function.IntFunction v12, v8;
io.smallrye.config.SmallRyeConfig v1;
java.lang.reflect.Type v0, v10, v14, v16, v19, v22, v6;
java.lang.reflect.Type[] v5;
java.util.Optional v27;
java.lang.Class v3;
java.lang.Object v18, v26, v29;
v0 := @parameter0: java.lang.reflect.Type;
v1 := @parameter1: io.smallrye.config.SmallRyeConfig;
v2 := @parameter2: java.util.function.BiFunction;
v3 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: java.lang.Class rawTypeOf(java.lang.reflect.Type)>(v0);
v4 = v0 instanceof java.lang.reflect.ParameterizedType;
if v4 == 0 goto label5;
v5 = interfaceinvoke v0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
if v3 != class "Ljava/util/List;" goto label1;
v6 = v5[0];
v7 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: org.eclipse.microprofile.config.spi.Converter resolveConverter(java.lang.reflect.Type,io.smallrye.config.SmallRyeConfig)>(v6, v1);
v8 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil$init__3066: java.util.function.IntFunction bootstrap$()>();
v9 = staticinvoke <io.smallrye.config.Converters: org.eclipse.microprofile.config.spi.Converter newCollectionConverter(org.eclipse.microprofile.config.spi.Converter,java.util.function.IntFunction)>(v7, v8);
return v9;
label1:
if v3 != class "Ljava/util/Set;" goto label2;
v10 = v5[0];
v11 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: org.eclipse.microprofile.config.spi.Converter resolveConverter(java.lang.reflect.Type,io.smallrye.config.SmallRyeConfig)>(v10, v1);
v12 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil$init__3065: java.util.function.IntFunction bootstrap$()>();
v13 = staticinvoke <io.smallrye.config.Converters: org.eclipse.microprofile.config.spi.Converter newCollectionConverter(org.eclipse.microprofile.config.spi.Converter,java.util.function.IntFunction)>(v11, v12);
return v13;
label2:
if v3 != class "Ljava/util/Map;" goto label3;
v14 = v5[0];
v15 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: org.eclipse.microprofile.config.spi.Converter resolveConverter(java.lang.reflect.Type,io.smallrye.config.SmallRyeConfig)>(v14, v1);
v16 = v5[1];
v17 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: org.eclipse.microprofile.config.spi.Converter resolveConverter(java.lang.reflect.Type,io.smallrye.config.SmallRyeConfig)>(v16, v1);
v18 = interfaceinvoke v2.<java.util.function.BiFunction: java.lang.Object apply(java.lang.Object,java.lang.Object)>(v15, v17);
return v18;
label3:
if v3 != class "Ljava/util/Optional;" goto label4;
v19 = v5[0];
v20 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: org.eclipse.microprofile.config.spi.Converter resolveConverter(java.lang.reflect.Type,io.smallrye.config.SmallRyeConfig,java.util.function.BiFunction)>(v19, v1, v2);
v21 = staticinvoke <io.smallrye.config.Converters: org.eclipse.microprofile.config.spi.Converter newOptionalConverter(org.eclipse.microprofile.config.spi.Converter)>(v20);
return v21;
label4:
if v3 != class "Ljava/util/function/Supplier;" goto label6;
v22 = v5[0];
v23 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: org.eclipse.microprofile.config.spi.Converter resolveConverter(java.lang.reflect.Type,io.smallrye.config.SmallRyeConfig,java.util.function.BiFunction)>(v22, v1, v2);
return v23;
label5:
if v3 != class "Ljava/util/Map;" goto label6;
v24 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: org.eclipse.microprofile.config.spi.Converter resolveConverter(java.lang.reflect.Type,io.smallrye.config.SmallRyeConfig)>(class "Ljava/lang/String;", v1);
v25 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: org.eclipse.microprofile.config.spi.Converter resolveConverter(java.lang.reflect.Type,io.smallrye.config.SmallRyeConfig)>(class "Ljava/lang/String;", v1);
v26 = interfaceinvoke v2.<java.util.function.BiFunction: java.lang.Object apply(java.lang.Object,java.lang.Object)>(v24, v25);
return v26;
label6:
v27 = virtualinvoke v1.<io.smallrye.config.SmallRyeConfig: java.util.Optional getConverter(java.lang.Class)>(v3);
v28 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil$lambda_resolveConverter_3__3064: java.util.function.Supplier bootstrap$(java.lang.Class)>(v3);
v29 = virtualinvoke v27.<java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>(v28);
return v29;
}
private static org.eclipse.microprofile.config.spi.Converter resolveConverterForIndexed(java.lang.reflect.Type, io.smallrye.config.SmallRyeConfig, java.util.function.BiFunction)
{
java.lang.IllegalStateException v19;
java.util.function.BiFunction v2;
org.eclipse.microprofile.config.spi.Converter v12, v15, v16, v18, v8;
boolean v4;
java.util.function.IntFunction v13, v9;
io.smallrye.config.SmallRyeConfig v1;
java.lang.reflect.Type v0, v11, v14, v17, v7;
java.lang.reflect.Type[] v5;
java.lang.Class v3;
io.smallrye.config.inject.ConfigProducerUtil$IndexedCollectionConverter v10, v6;
v0 := @parameter0: java.lang.reflect.Type;
v1 := @parameter1: io.smallrye.config.SmallRyeConfig;
v2 := @parameter2: java.util.function.BiFunction;
v3 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: java.lang.Class rawTypeOf(java.lang.reflect.Type)>(v0);
v4 = v0 instanceof java.lang.reflect.ParameterizedType;
if v4 == 0 goto label4;
v5 = interfaceinvoke v0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
if v3 != class "Ljava/util/List;" goto label1;
v6 = new io.smallrye.config.inject.ConfigProducerUtil$IndexedCollectionConverter;
v7 = v5[0];
v8 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: org.eclipse.microprofile.config.spi.Converter resolveConverter(java.lang.reflect.Type,io.smallrye.config.SmallRyeConfig)>(v7, v1);
v9 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil$init__3068: java.util.function.IntFunction bootstrap$()>();
specialinvoke v6.<io.smallrye.config.inject.ConfigProducerUtil$IndexedCollectionConverter: void <init>(org.eclipse.microprofile.config.spi.Converter,java.util.function.IntFunction,java.util.function.BiFunction)>(v8, v9, v2);
return v6;
label1:
if v3 != class "Ljava/util/Set;" goto label2;
v10 = new io.smallrye.config.inject.ConfigProducerUtil$IndexedCollectionConverter;
v11 = v5[0];
v12 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: org.eclipse.microprofile.config.spi.Converter resolveConverter(java.lang.reflect.Type,io.smallrye.config.SmallRyeConfig)>(v11, v1);
v13 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil$init__3067: java.util.function.IntFunction bootstrap$()>();
specialinvoke v10.<io.smallrye.config.inject.ConfigProducerUtil$IndexedCollectionConverter: void <init>(org.eclipse.microprofile.config.spi.Converter,java.util.function.IntFunction,java.util.function.BiFunction)>(v12, v13, v2);
return v10;
label2:
if v3 != class "Ljava/util/Optional;" goto label3;
v14 = v5[0];
v15 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: org.eclipse.microprofile.config.spi.Converter resolveConverterForIndexed(java.lang.reflect.Type,io.smallrye.config.SmallRyeConfig,java.util.function.BiFunction)>(v14, v1, v2);
v16 = staticinvoke <io.smallrye.config.Converters: org.eclipse.microprofile.config.spi.Converter newOptionalConverter(org.eclipse.microprofile.config.spi.Converter)>(v15);
return v16;
label3:
if v3 != class "Ljava/util/function/Supplier;" goto label4;
v17 = v5[0];
v18 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: org.eclipse.microprofile.config.spi.Converter resolveConverterForIndexed(java.lang.reflect.Type,io.smallrye.config.SmallRyeConfig,java.util.function.BiFunction)>(v17, v1, v2);
return v18;
label4:
v19 = new java.lang.IllegalStateException;
specialinvoke v19.<java.lang.IllegalStateException: void <init>()>();
throw v19;
}
private static java.lang.Class rawTypeOf(java.lang.reflect.Type)
{
java.lang.IllegalArgumentException v11;
java.lang.reflect.Type v0, v3, v6;
java.lang.Class v4, v7, v9;
java.lang.Object v8;
io.smallrye.config.inject.InjectionMessages v10;
boolean v1, v2, v5;
v0 := @parameter0: java.lang.reflect.Type;
v1 = v0 instanceof java.lang.Class;
if v1 == 0 goto label1;
return v0;
label1:
v2 = v0 instanceof java.lang.reflect.ParameterizedType;
if v2 == 0 goto label2;
v3 = interfaceinvoke v0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
v4 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: java.lang.Class rawTypeOf(java.lang.reflect.Type)>(v3);
return v4;
label2:
v5 = v0 instanceof java.lang.reflect.GenericArrayType;
if v5 == 0 goto label3;
v6 = interfaceinvoke v0.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();
v7 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: java.lang.Class rawTypeOf(java.lang.reflect.Type)>(v6);
v8 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(v7, 0);
v9 = virtualinvoke v8.<java.lang.Object: java.lang.Class getClass()>();
return v9;
label3:
v10 = <io.smallrye.config.inject.InjectionMessages: io.smallrye.config.inject.InjectionMessages msg>;
v11 = interfaceinvoke v10.<io.smallrye.config.inject.InjectionMessages: java.lang.IllegalArgumentException noRawType(java.lang.reflect.Type)>(v0);
throw v11;
}
private static boolean hasMap(java.lang.reflect.Type)
{
java.lang.reflect.Type v0, v4;
java.lang.reflect.Type[] v3;
java.lang.Class v1;
boolean v2, v5;
v0 := @parameter0: java.lang.reflect.Type;
v1 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: java.lang.Class rawTypeOf(java.lang.reflect.Type)>(v0);
if v1 != class "Ljava/util/Map;" goto label1;
return 1;
label1:
v2 = v0 instanceof java.lang.reflect.ParameterizedType;
if v2 == 0 goto label2;
v3 = interfaceinvoke v0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v4 = v3[0];
v5 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: boolean hasMap(java.lang.reflect.Type)>(v4);
return v5;
label2:
return 0;
}
private static boolean hasCollection(java.lang.reflect.Type)
{
java.lang.reflect.Type v0, v4;
java.lang.reflect.Type[] v3;
java.lang.Class v1;
boolean v2, v5;
v0 := @parameter0: java.lang.reflect.Type;
v1 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: java.lang.Class rawTypeOf(java.lang.reflect.Type)>(v0);
v2 = v0 instanceof java.lang.reflect.ParameterizedType;
if v2 == 0 goto label3;
v3 = interfaceinvoke v0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
if v1 != class "Ljava/util/List;" goto label1;
return 1;
label1:
if v1 != class "Ljava/util/Set;" goto label2;
return 1;
label2:
v4 = v3[0];
v5 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: boolean hasCollection(java.lang.reflect.Type)>(v4);
return v5;
label3:
return 0;
}
private static java.lang.String getName(jakarta.enterprise.inject.spi.InjectionPoint)
{
java.util.Iterator v2;
jakarta.enterprise.inject.spi.InjectionPoint v0;
java.util.Set v1;
java.lang.'annotation'.Annotation v8;
java.lang.Class v5;
java.lang.Object v4;
java.lang.String v7;
boolean v3, v6;
v0 := @parameter0: jakarta.enterprise.inject.spi.InjectionPoint;
v1 = interfaceinvoke v0.<jakarta.enterprise.inject.spi.InjectionPoint: java.util.Set getQualifiers()>();
v2 = interfaceinvoke v1.<java.util.Set: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = interfaceinvoke v4.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();
v6 = virtualinvoke v5.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/eclipse/microprofile/config/inject/ConfigProperty;");
if v6 == 0 goto label1;
v7 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: java.lang.String getConfigKey(jakarta.enterprise.inject.spi.InjectionPoint,org.eclipse.microprofile.config.inject.ConfigProperty)>(v0, v8);
return v7;
label2:
return null;
}
private static java.lang.String getDefaultValue(jakarta.enterprise.inject.spi.InjectionPoint)
{
java.lang.String v7, v8;
boolean v12, v3, v6, v9;
java.util.Iterator v2;
jakarta.enterprise.inject.spi.InjectionPoint v0;
java.util.Set v1;
java.lang.reflect.Type v10;
java.lang.'annotation'.Annotation v15;
java.lang.Class v11, v13, v14, v5;
java.lang.Object v4;
v0 := @parameter0: jakarta.enterprise.inject.spi.InjectionPoint;
v1 = interfaceinvoke v0.<jakarta.enterprise.inject.spi.InjectionPoint: java.util.Set getQualifiers()>();
v2 = interfaceinvoke v1.<java.util.Set: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label6;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = interfaceinvoke v4.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();
v6 = virtualinvoke v5.<java.lang.Object: boolean equals(java.lang.Object)>(class "Lorg/eclipse/microprofile/config/inject/ConfigProperty;");
if v6 == 0 goto label1;
v7 = interfaceinvoke v15.<org.eclipse.microprofile.config.inject.ConfigProperty: java.lang.String defaultValue()>();
v8 = "org.eclipse.microprofile.config.configproperty.unconfigureddvalue";
v9 = virtualinvoke v8.<java.lang.String: boolean equals(java.lang.Object)>(v7);
if v9 != 0 goto label2;
return v7;
label2:
v10 = interfaceinvoke v0.<jakarta.enterprise.inject.spi.InjectionPoint: java.lang.reflect.Type getType()>();
v11 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: java.lang.Class rawTypeOf(java.lang.reflect.Type)>(v10);
v12 = virtualinvoke v11.<java.lang.Class: boolean isPrimitive()>();
if v12 == 0 goto label5;
v13 = <java.lang.Character: java.lang.Class TYPE>;
if v11 != v13 goto label3;
return null;
label3:
v14 = <java.lang.Boolean: java.lang.Class TYPE>;
if v11 != v14 goto label4;
return "false";
label4:
return "0";
label5:
return null;
label6:
return null;
}
static java.lang.String getConfigKey(jakarta.enterprise.inject.spi.InjectionPoint, org.eclipse.microprofile.config.inject.ConfigProperty)
{
java.lang.IllegalStateException v23;
java.lang.String[] v11;
int v14, v15;
java.lang.String v10, v13, v17, v2, v20, v21, v3;
io.smallrye.config.inject.InjectionMessages v22;
boolean v4, v6;
jakarta.enterprise.inject.spi.InjectionPoint v0;
java.lang.reflect.Member v19;
jakarta.enterprise.inject.spi.Annotated v5, v7;
java.lang.Class v9;
java.lang.StringBuilder v12, v16, v18;
jakarta.enterprise.inject.spi.AnnotatedType v8;
org.eclipse.microprofile.config.inject.ConfigProperty v1;
v0 := @parameter0: jakarta.enterprise.inject.spi.InjectionPoint;
v1 := @parameter1: org.eclipse.microprofile.config.inject.ConfigProperty;
v2 = interfaceinvoke v1.<org.eclipse.microprofile.config.inject.ConfigProperty: java.lang.String name()>();
v3 = virtualinvoke v2.<java.lang.String: java.lang.String trim()>();
v4 = virtualinvoke v3.<java.lang.String: boolean isEmpty()>();
if v4 != 0 goto label1;
return v2;
label1:
v5 = interfaceinvoke v0.<jakarta.enterprise.inject.spi.InjectionPoint: jakarta.enterprise.inject.spi.Annotated getAnnotated()>();
v6 = v5 instanceof jakarta.enterprise.inject.spi.AnnotatedMember;
if v6 == 0 goto label4;
v7 = interfaceinvoke v0.<jakarta.enterprise.inject.spi.InjectionPoint: jakarta.enterprise.inject.spi.Annotated getAnnotated()>();
v8 = interfaceinvoke v7.<jakarta.enterprise.inject.spi.AnnotatedMember: jakarta.enterprise.inject.spi.AnnotatedType getDeclaringType()>();
if v8 == null goto label4;
v9 = interfaceinvoke v8.<jakarta.enterprise.inject.spi.AnnotatedType: java.lang.Class getJavaClass()>();
v10 = virtualinvoke v9.<java.lang.Class: java.lang.String getCanonicalName()>();
v11 = virtualinvoke v10.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.");
v12 = new java.lang.StringBuilder;
v13 = v11[0];
specialinvoke v12.<java.lang.StringBuilder: void <init>(java.lang.String)>(v13);
v14 = 1;
label2:
v15 = lengthof v11;
if v14 >= v15 goto label3;
v16 = virtualinvoke v12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
v17 = v11[v14];
virtualinvoke v16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v17);
v14 = v14 + 1;
goto label2;
label3:
v18 = virtualinvoke v12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
v19 = interfaceinvoke v7.<jakarta.enterprise.inject.spi.AnnotatedMember: java.lang.reflect.Member getJavaMember()>();
v20 = interfaceinvoke v19.<java.lang.reflect.Member: java.lang.String getName()>();
virtualinvoke v18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v20);
v21 = virtualinvoke v12.<java.lang.StringBuilder: java.lang.String toString()>();
return v21;
label4:
v22 = <io.smallrye.config.inject.InjectionMessages: io.smallrye.config.inject.InjectionMessages msg>;
v23 = interfaceinvoke v22.<io.smallrye.config.inject.InjectionMessages: java.lang.IllegalStateException noConfigPropertyDefaultName(jakarta.enterprise.inject.spi.InjectionPoint)>(v0);
throw v23;
}
}