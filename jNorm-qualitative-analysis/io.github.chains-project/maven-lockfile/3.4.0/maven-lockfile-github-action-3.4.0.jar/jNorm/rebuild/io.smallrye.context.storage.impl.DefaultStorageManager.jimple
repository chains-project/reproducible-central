public class io.smallrye.context.storage.impl.DefaultStorageManager extends java.lang.Object implements io.smallrye.context.storage.spi.StorageManager
{
private final java.util.Map threadLocals;
public void <init>()
{
java.util.concurrent.ConcurrentHashMap v1;
io.smallrye.context.storage.impl.DefaultStorageManager v0;
v0 := @this: io.smallrye.context.storage.impl.DefaultStorageManager;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v0.<io.smallrye.context.storage.impl.DefaultStorageManager: java.util.Map threadLocals> = v1;
return;
}
public java.lang.ThreadLocal getThreadLocal(java.lang.Class)
{
java.util.Map v2;
java.lang.Class v1;
java.lang.Object v4;
io.smallrye.context.storage.impl.DefaultStorageManager v0;
java.util.function.Function v3;
v0 := @this: io.smallrye.context.storage.impl.DefaultStorageManager;
v1 := @parameter0: java.lang.Class;
v2 = v0.<io.smallrye.context.storage.impl.DefaultStorageManager: java.util.Map threadLocals>;
v3 = staticinvoke <io.smallrye.context.storage.impl.DefaultStorageManager$lambda_getThreadLocal_0__1603: java.util.function.Function bootstrap$()>();
v4 = interfaceinvoke v2.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(v1, v3);
return v4;
}
}