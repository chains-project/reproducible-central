public interface  io.smallrye.context.storage.spi.StorageManagerProvider extends java.lang.Object
{
public static final java.util.concurrent.atomic.AtomicReference INSTANCE;
public static io.smallrye.context.storage.spi.StorageManagerProvider instance()
{
java.lang.IllegalStateException v8;
java.util.Iterator v3;
io.smallrye.context.storage.impl.DefaultStorageManagerProvider v9;
java.util.ServiceLoader v2;
java.util.concurrent.atomic.AtomicReference v0, v6;
java.lang.Object v1, v5;
boolean v4, v7;
v0 = <io.smallrye.context.storage.spi.StorageManagerProvider: java.util.concurrent.atomic.AtomicReference INSTANCE>;
v1 = virtualinvoke v0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v1 != null goto label4;
v2 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class)>(class "Lio/smallrye/context/storage/spi/StorageManagerProvider;");
v3 = virtualinvoke v2.<java.util.ServiceLoader: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label3;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = <io.smallrye.context.storage.spi.StorageManagerProvider: java.util.concurrent.atomic.AtomicReference INSTANCE>;
v7 = virtualinvoke v6.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, v5);
if v7 == 0 goto label2;
v1 = v5;
goto label1;
label2:
v8 = new java.lang.IllegalStateException;
specialinvoke v8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("StorageManagerProvider already set");
throw v8;
label3:
if v1 != null goto label4;
v9 = new io.smallrye.context.storage.impl.DefaultStorageManagerProvider;
specialinvoke v9.<io.smallrye.context.storage.impl.DefaultStorageManagerProvider: void <init>()>();
v1 = v9;
label4:
return v1;
}
public static io.smallrye.context.storage.spi.StorageManagerProviderRegistration register(io.smallrye.context.storage.spi.StorageManagerProvider) throws java.lang.IllegalStateException
{
io.smallrye.context.storage.spi.StorageManagerProvider v0;
java.lang.IllegalStateException v4;
io.smallrye.context.storage.spi.StorageManagerProviderRegistration v3;
java.util.concurrent.atomic.AtomicReference v1;
boolean v2;
v0 := @parameter0: io.smallrye.context.storage.spi.StorageManagerProvider;
v1 = <io.smallrye.context.storage.spi.StorageManagerProvider: java.util.concurrent.atomic.AtomicReference INSTANCE>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, v0);
if v2 == 0 goto label1;
v3 = new io.smallrye.context.storage.spi.StorageManagerProviderRegistration;
specialinvoke v3.<io.smallrye.context.storage.spi.StorageManagerProviderRegistration: void <init>(io.smallrye.context.storage.spi.StorageManagerProvider)>(v0);
return v3;
label1:
v4 = new java.lang.IllegalStateException;
specialinvoke v4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("A StorageManagerProvider implementation has already been registered.");
throw v4;
}
public io.smallrye.context.storage.spi.StorageManager getStorageManager()
{
io.smallrye.context.storage.spi.StorageManagerProvider v0;
java.lang.Thread v2;
io.smallrye.context.storage.spi.StorageManager v5;
java.lang.Object v4;
java.security.PrivilegedAction v3;
java.lang.SecurityManager v1;
v0 := @this: io.smallrye.context.storage.spi.StorageManagerProvider;
v1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
if v1 != null goto label1;
v2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
virtualinvoke v2.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
goto label2;
label1:
v3 = staticinvoke <io.smallrye.context.storage.spi.StorageManagerProvider$lambda_getStorageManager_0__1604: java.security.PrivilegedAction bootstrap$()>();
v4 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>(v3);
label2:
v5 = interfaceinvoke v0.<io.smallrye.context.storage.spi.StorageManagerProvider: io.smallrye.context.storage.spi.StorageManager getStorageManager(java.lang.ClassLoader)>(v4);
return v5;
}
public abstract io.smallrye.context.storage.spi.StorageManager getStorageManager(java.lang.ClassLoader);
static void <clinit>()
{
java.util.concurrent.atomic.AtomicReference v0;
v0 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v0.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
<io.smallrye.context.storage.spi.StorageManagerProvider: java.util.concurrent.atomic.AtomicReference INSTANCE> = v0;
return;
}
}