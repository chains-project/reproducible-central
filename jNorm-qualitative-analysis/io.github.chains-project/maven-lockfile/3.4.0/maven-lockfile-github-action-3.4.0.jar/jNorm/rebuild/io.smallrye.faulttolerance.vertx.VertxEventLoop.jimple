public final class io.smallrye.faulttolerance.vertx.VertxEventLoop extends java.lang.Object implements io.smallrye.faulttolerance.core.event.loop.EventLoop
{
public void <init>()
{
io.smallrye.faulttolerance.vertx.VertxEventLoop v0;
v0 := @this: io.smallrye.faulttolerance.vertx.VertxEventLoop;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public boolean isEventLoopThread()
{
io.smallrye.faulttolerance.vertx.VertxEventLoop v0;
boolean v1;
v0 := @this: io.smallrye.faulttolerance.vertx.VertxEventLoop;
v1 = staticinvoke <io.vertx.core.Context: boolean isOnEventLoopThread()>();
return v1;
}
private void checkEventLoopThread()
{
io.smallrye.faulttolerance.vertx.VertxEventLoop v0;
java.lang.UnsupportedOperationException v2;
boolean v1;
v0 := @this: io.smallrye.faulttolerance.vertx.VertxEventLoop;
v1 = virtualinvoke v0.<io.smallrye.faulttolerance.vertx.VertxEventLoop: boolean isEventLoopThread()>();
if v1 != 0 goto label1;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
label1:
return;
}
public java.util.concurrent.Executor executor()
{
io.smallrye.faulttolerance.vertx.VertxEventLoop v0;
io.smallrye.faulttolerance.vertx.VertxExecutor v1;
io.vertx.core.Context v2;
v0 := @this: io.smallrye.faulttolerance.vertx.VertxEventLoop;
specialinvoke v0.<io.smallrye.faulttolerance.vertx.VertxEventLoop: void checkEventLoopThread()>();
v1 = new io.smallrye.faulttolerance.vertx.VertxExecutor;
v2 = staticinvoke <io.vertx.core.Vertx: io.vertx.core.Context currentContext()>();
specialinvoke v1.<io.smallrye.faulttolerance.vertx.VertxExecutor: void <init>(io.vertx.core.Context)>(v2);
return v1;
}
}