public class io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo extends java.lang.Object
{
private final io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo container;
private final java.lang.reflect.Field field;
private final boolean includeIfNull;
private final java.lang.String name;
private static final java.lang.String JSONB_PROPERTY;
private static final java.lang.String JACKSON_PROPERTY;
void <init>(io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo, java.lang.reflect.Field)
{
io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo v0;
java.lang.'annotation'.Annotation v3;
java.lang.String v5;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v1;
java.lang.reflect.Field v2;
boolean v4;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo;
v1 := @parameter0: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v2 := @parameter1: java.lang.reflect.Field;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo container> = v1;
v0.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: java.lang.reflect.Field field> = v2;
v3 = virtualinvoke v2.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Ljakarta/json/bind/annotation/JsonbProperty;");
if v3 == null goto label1;
v4 = interfaceinvoke v3.<jakarta.json.bind.'annotation'.JsonbProperty: boolean nillable()>();
v0.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: boolean includeIfNull> = v4;
goto label2;
label1:
v0.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: boolean includeIfNull> = 0;
label2:
v5 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: java.lang.String computeName()>();
v0.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: java.lang.String name> = v5;
return;
}
public java.lang.String toString()
{
io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo v0;
java.lang.String v1, v3;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v2;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo;
v1 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: java.lang.String getRawName()>();
v2 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo container>;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo)>(v1, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("field \'\u0001\' in \u0001");
return v3;
}
public io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo getType()
{
java.lang.reflect.Type v4;
io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo v0;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v1, v2;
java.lang.reflect.Field v3;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo;
v1 = new io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v2 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo container>;
v3 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: java.lang.reflect.Field field>;
v4 = virtualinvoke v3.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
specialinvoke v1.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: void <init>(io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo,java.lang.reflect.Type)>(v2, v4);
return v1;
}
public java.lang.String getName()
{
java.lang.String v1;
io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo v0;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo;
v1 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: java.lang.String name>;
return v1;
}
private java.lang.String computeName()
{
io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo v0;
java.lang.reflect.Field v1, v3;
java.util.function.Function v11, v7;
java.lang.'annotation'.Annotation v4;
java.util.Optional v10, v12, v6, v8;
java.lang.Object v13, v9;
java.lang.String v14, v5;
boolean v2;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo;
v1 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: java.lang.reflect.Field field>;
v2 = virtualinvoke v1.<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/eclipse/microprofile/graphql/Name;");
if v2 == 0 goto label1;
v3 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: java.lang.reflect.Field field>;
v4 = virtualinvoke v3.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/eclipse/microprofile/graphql/Name;");
v5 = interfaceinvoke v4.<org.eclipse.microprofile.graphql.Name: java.lang.String value()>();
return v5;
label1:
v6 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: java.util.Optional getAnnotationByClassName(java.lang.String)>("jakarta.json.bind.annotation.JsonbProperty");
v7 = staticinvoke <io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo$getNonEmptyValue__733: java.util.function.Function bootstrap$(io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo)>(v0);
v8 = virtualinvoke v6.<java.util.Optional: java.util.Optional map(java.util.function.Function)>(v7);
v9 = virtualinvoke v8.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(null);
if v9 == null goto label2;
return v9;
label2:
v10 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: java.util.Optional getAnnotationByClassName(java.lang.String)>("com.fasterxml.jackson.annotation.JsonProperty");
v11 = staticinvoke <io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo$getNonEmptyValue__734: java.util.function.Function bootstrap$(io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo)>(v0);
v12 = virtualinvoke v10.<java.util.Optional: java.util.Optional map(java.util.function.Function)>(v11);
v13 = virtualinvoke v12.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(null);
if v13 == null goto label3;
return v13;
label3:
v14 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: java.lang.String getRawName()>();
return v14;
}
private java.util.Optional getAnnotationByClassName(java.lang.String)
{
io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo v0;
java.util.function.Predicate v5;
java.lang.'annotation'.Annotation[] v3;
java.lang.reflect.Field v2;
java.util.stream.Stream v4, v6;
java.util.Optional v7;
java.lang.String v1;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: java.lang.reflect.Field field>;
v3 = virtualinvoke v2.<java.lang.reflect.Field: java.lang.'annotation'.Annotation[] getAnnotations()>();
v4 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>(v3);
v5 = staticinvoke <io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo$lambda_getAnnotationByClassName_0__735: java.util.function.Predicate bootstrap$(java.lang.String)>(v1);
v6 = interfaceinvoke v4.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(v5);
v7 = interfaceinvoke v6.<java.util.stream.Stream: java.util.Optional findAny()>();
return v7;
}
public java.lang.String getNonEmptyValue(java.lang.'annotation'.Annotation)
{
java.lang.Object[] v5;
io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo v0;
java.lang.Class[] v3;
java.lang.RuntimeException v10;
java.lang.Exception v9;
java.lang.'annotation'.Annotation v1;
java.lang.Class v2;
java.lang.Object v6;
java.lang.String v8;
java.lang.reflect.Method v4;
boolean v7;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo;
v1 := @parameter0: java.lang.'annotation'.Annotation;
label1:
v2 = interfaceinvoke v1.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();
v3 = newarray (java.lang.Class)[0];
v4 = virtualinvoke v2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("value", v3);
v5 = newarray (java.lang.Object)[0];
v6 = virtualinvoke v4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v1, v5);
if v6 == null goto label2;
v7 = virtualinvoke v6.<java.lang.String: boolean isEmpty()>();
if v7 == 0 goto label3;
label2:
v8 = null;
goto label4;
label3:
v8 = v6;
label4:
return v8;
label5:
v9 := @caughtexception;
v10 = new java.lang.RuntimeException;
specialinvoke v10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(v9);
throw v10;
catch java.lang.Exception from label1 to label4 with label5;
}
public java.lang.String getRawName()
{
java.lang.String v2;
java.lang.reflect.Field v1;
io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo v0;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo;
v1 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: java.lang.reflect.Field field>;
v2 = virtualinvoke v1.<java.lang.reflect.Field: java.lang.String getName()>();
return v2;
}
public java.util.Optional getAlias()
{
io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo v0;
java.util.Optional v4, v5;
java.lang.String v3;
java.lang.reflect.Field v1;
boolean v2;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo;
v1 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: java.lang.reflect.Field field>;
v2 = virtualinvoke v1.<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/eclipse/microprofile/graphql/Name;");
if v2 == 0 goto label1;
v3 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: java.lang.String getRawName()>();
v4 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>(v3);
return v4;
label1:
v5 = staticinvoke <java.util.Optional: java.util.Optional empty()>();
return v5;
}
public java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)
{
io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo v0;
java.lang.'annotation'.Annotation v3;
java.lang.Class v1;
java.lang.reflect.Field v2;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo;
v1 := @parameter0: java.lang.Class;
v2 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: java.lang.reflect.Field field>;
v3 = virtualinvoke v2.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(v1);
return v3;
}
public java.lang.Object get(java.lang.Object)
{
io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo v0;
java.lang.ReflectiveOperationException v5;
java.lang.RuntimeException v6;
java.lang.reflect.Field v2, v3;
java.lang.Object v1, v4;
java.lang.String v7;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo;
v1 := @parameter0: java.lang.Object;
label1:
v2 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: java.lang.reflect.Field field>;
virtualinvoke v2.<java.lang.reflect.Field: void setAccessible(boolean)>(1);
v3 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: java.lang.reflect.Field field>;
v4 = virtualinvoke v3.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(v1);
label2:
return v4;
label3:
v5 := @caughtexception;
v6 = new java.lang.RuntimeException;
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("can\'t get field \u0001");
specialinvoke v6.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(v7, v5);
throw v6;
catch java.lang.ReflectiveOperationException from label1 to label2 with label3;
}
public void set(java.lang.Object, java.lang.Object)
{
io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo v0;
java.lang.ReflectiveOperationException v5;
java.lang.RuntimeException v6;
java.lang.reflect.Field v3, v4;
java.lang.Object v1, v2;
java.lang.String v7;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
label1:
v3 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: java.lang.reflect.Field field>;
virtualinvoke v3.<java.lang.reflect.Field: void setAccessible(boolean)>(1);
v4 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: java.lang.reflect.Field field>;
virtualinvoke v4.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(v1, v2);
label2:
goto label4;
label3:
v5 := @caughtexception;
v6 = new java.lang.RuntimeException;
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo,java.lang.Object)>(v0, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("can\'t set field \u0001 to \u0001");
specialinvoke v6.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(v7, v5);
throw v6;
label4:
return;
catch java.lang.ReflectiveOperationException from label1 to label2 with label3;
}
public boolean isNonNull()
{
io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo v0;
java.lang.reflect.Field v5, v7;
java.lang.Thread v2;
java.lang.Class v1;
java.lang.ClassNotFoundException v4;
java.lang.ClassLoader v3;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v9;
boolean v10, v11, v6, v8;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo;
v1 = null;
label1:
v2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v3 = virtualinvoke v2.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
v1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("jakarta.validation.constraints.NotNull", 0, v3);
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
v5 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: java.lang.reflect.Field field>;
v6 = virtualinvoke v5.<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/eclipse/microprofile/graphql/NonNull;");
if v6 != 0 goto label6;
if v1 == null goto label5;
v7 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: java.lang.reflect.Field field>;
v8 = virtualinvoke v7.<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>(v1);
if v8 != 0 goto label6;
label5:
v9 = virtualinvoke v0.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo getType()>();
v10 = virtualinvoke v9.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: boolean isPrimitive()>();
if v10 == 0 goto label7;
label6:
v11 = 1;
goto label8;
label7:
v11 = 0;
label8:
return v11;
catch java.lang.ClassNotFoundException from label1 to label2 with label3;
}
public boolean isIncludeNull()
{
io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo v0;
boolean v1;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo;
v1 = v0.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: boolean includeIfNull>;
return v1;
}
}