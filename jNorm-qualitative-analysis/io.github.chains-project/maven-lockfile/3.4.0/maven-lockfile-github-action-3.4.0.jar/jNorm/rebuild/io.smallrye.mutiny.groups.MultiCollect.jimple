public class io.smallrye.mutiny.groups.MultiCollect extends java.lang.Object
{
private final io.smallrye.mutiny.Multi upstream;
public void <init>(io.smallrye.mutiny.Multi)
{
java.lang.Object v2;
io.smallrye.mutiny.Multi v1;
io.smallrye.mutiny.groups.MultiCollect v0;
v0 := @this: io.smallrye.mutiny.groups.MultiCollect;
v1 := @parameter0: io.smallrye.mutiny.Multi;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "upstream");
v0.<io.smallrye.mutiny.groups.MultiCollect: io.smallrye.mutiny.Multi upstream> = v2;
return;
}
public io.smallrye.mutiny.Uni first()
{
io.smallrye.mutiny.groups.UniCreate v1;
io.smallrye.mutiny.groups.MultiCollect v0;
io.smallrye.mutiny.Multi v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.smallrye.mutiny.groups.MultiCollect;
v1 = staticinvoke <io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniCreate createFrom()>();
v2 = v0.<io.smallrye.mutiny.groups.MultiCollect: io.smallrye.mutiny.Multi upstream>;
v3 = virtualinvoke v1.<io.smallrye.mutiny.groups.UniCreate: io.smallrye.mutiny.Uni multi(io.smallrye.mutiny.Multi)>(v2);
return v3;
}
public io.smallrye.mutiny.Uni last()
{
io.smallrye.mutiny.groups.UniCreate v1;
io.smallrye.mutiny.operators.multi.MultiLastItemOp v2;
io.smallrye.mutiny.groups.MultiCollect v0;
io.smallrye.mutiny.Multi v3, v4;
io.smallrye.mutiny.Uni v5;
v0 := @this: io.smallrye.mutiny.groups.MultiCollect;
v1 = staticinvoke <io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniCreate createFrom()>();
v2 = new io.smallrye.mutiny.operators.multi.MultiLastItemOp;
v3 = v0.<io.smallrye.mutiny.groups.MultiCollect: io.smallrye.mutiny.Multi upstream>;
specialinvoke v2.<io.smallrye.mutiny.operators.multi.MultiLastItemOp: void <init>(io.smallrye.mutiny.Multi)>(v3);
v4 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v2);
v5 = virtualinvoke v1.<io.smallrye.mutiny.groups.UniCreate: io.smallrye.mutiny.Uni publisher(java.util.concurrent.Flow$Publisher)>(v4);
return v5;
}
public io.smallrye.mutiny.Uni asList()
{
io.smallrye.mutiny.groups.MultiCollect v0;
java.util.stream.Collector v2;
io.smallrye.mutiny.Multi v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.smallrye.mutiny.groups.MultiCollect;
v1 = v0.<io.smallrye.mutiny.groups.MultiCollect: io.smallrye.mutiny.Multi upstream>;
v2 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();
v3 = staticinvoke <io.smallrye.mutiny.groups.MultiCollect: io.smallrye.mutiny.Uni collector(io.smallrye.mutiny.Multi,java.util.stream.Collector,boolean)>(v1, v2, 0);
return v3;
}
public io.smallrye.mutiny.Uni 'with'(java.util.stream.Collector)
{
io.smallrye.mutiny.groups.MultiCollect v0;
java.util.stream.Collector v1;
io.smallrye.mutiny.Multi v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.smallrye.mutiny.groups.MultiCollect;
v1 := @parameter0: java.util.stream.Collector;
v2 = v0.<io.smallrye.mutiny.groups.MultiCollect: io.smallrye.mutiny.Multi upstream>;
v3 = staticinvoke <io.smallrye.mutiny.groups.MultiCollect: io.smallrye.mutiny.Uni collector(io.smallrye.mutiny.Multi,java.util.stream.Collector,boolean)>(v2, v1, 1);
return v3;
}
public io.smallrye.mutiny.Uni in(java.util.function.Supplier, java.util.function.BiConsumer)
{
java.util.function.Supplier v1, v4;
io.smallrye.mutiny.Multi v11;
java.util.function.BinaryOperator v7;
java.util.stream.Collector$Characteristics v9;
io.smallrye.mutiny.Uni v12;
io.smallrye.mutiny.groups.MultiCollect v0;
java.util.function.BiConsumer v2, v6;
java.lang.Object v3, v5;
java.util.stream.Collector v10;
java.util.stream.Collector$Characteristics[] v8;
v0 := @this: io.smallrye.mutiny.groups.MultiCollect;
v1 := @parameter0: java.util.function.Supplier;
v2 := @parameter1: java.util.function.BiConsumer;
v3 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "supplier");
v4 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.Supplier decorate(java.util.function.Supplier)>(v3);
v5 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v2, "accumulator");
v6 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.BiConsumer decorate(java.util.function.BiConsumer)>(v5);
v7 = staticinvoke <io.smallrye.mutiny.groups.MultiCollect$lambda_in_0__2854: java.util.function.BinaryOperator bootstrap$()>();
v8 = newarray (java.util.stream.Collector$Characteristics)[1];
v9 = <java.util.stream.Collector$Characteristics: java.util.stream.Collector$Characteristics IDENTITY_FINISH>;
v8[0] = v9;
v10 = staticinvoke <java.util.stream.Collector: java.util.stream.Collector of(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.stream.Collector$Characteristics[])>(v4, v6, v7, v8);
v11 = v0.<io.smallrye.mutiny.groups.MultiCollect: io.smallrye.mutiny.Multi upstream>;
v12 = staticinvoke <io.smallrye.mutiny.groups.MultiCollect: io.smallrye.mutiny.Uni collector(io.smallrye.mutiny.Multi,java.util.stream.Collector,boolean)>(v11, v10, 0);
return v12;
}
public io.smallrye.mutiny.Uni asMap(java.util.function.Function)
{
java.util.function.Function v1, v3, v5;
io.smallrye.mutiny.Multi v4;
io.smallrye.mutiny.Uni v7;
io.smallrye.mutiny.groups.MultiCollect v0;
java.lang.Object v2;
java.util.stream.Collector v6;
v0 := @this: io.smallrye.mutiny.groups.MultiCollect;
v1 := @parameter0: java.util.function.Function;
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "keyMapper");
v3 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.Function decorate(java.util.function.Function)>(v2);
v4 = v0.<io.smallrye.mutiny.groups.MultiCollect: io.smallrye.mutiny.Multi upstream>;
v5 = staticinvoke <java.util.function.Function: java.util.function.Function identity()>();
v6 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>(v3, v5);
v7 = staticinvoke <io.smallrye.mutiny.groups.MultiCollect: io.smallrye.mutiny.Uni collector(io.smallrye.mutiny.Multi,java.util.stream.Collector,boolean)>(v4, v6, 0);
return v7;
}
public io.smallrye.mutiny.Uni asMap(java.util.function.Function, java.util.function.Function)
{
java.util.function.Function v1, v2, v4, v6;
io.smallrye.mutiny.Multi v7;
io.smallrye.mutiny.Uni v9;
io.smallrye.mutiny.groups.MultiCollect v0;
java.lang.Object v3, v5;
java.util.stream.Collector v8;
v0 := @this: io.smallrye.mutiny.groups.MultiCollect;
v1 := @parameter0: java.util.function.Function;
v2 := @parameter1: java.util.function.Function;
v3 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "keyMapper");
v4 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.Function decorate(java.util.function.Function)>(v3);
v5 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v2, "valueMapper");
v6 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.Function decorate(java.util.function.Function)>(v5);
v7 = v0.<io.smallrye.mutiny.groups.MultiCollect: io.smallrye.mutiny.Multi upstream>;
v8 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>(v4, v6);
v9 = staticinvoke <io.smallrye.mutiny.groups.MultiCollect: io.smallrye.mutiny.Uni collector(io.smallrye.mutiny.Multi,java.util.stream.Collector,boolean)>(v7, v8, 0);
return v9;
}
public io.smallrye.mutiny.Uni asMap(java.util.function.Function, java.util.function.Function, java.util.function.BinaryOperator)
{
java.util.function.Function v1, v2, v5, v7;
io.smallrye.mutiny.Multi v10;
java.util.function.BinaryOperator v3, v9;
io.smallrye.mutiny.Uni v12;
io.smallrye.mutiny.groups.MultiCollect v0;
java.lang.Object v4, v6, v8;
java.util.stream.Collector v11;
v0 := @this: io.smallrye.mutiny.groups.MultiCollect;
v1 := @parameter0: java.util.function.Function;
v2 := @parameter1: java.util.function.Function;
v3 := @parameter2: java.util.function.BinaryOperator;
v4 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "keyMapper");
v5 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.Function decorate(java.util.function.Function)>(v4);
v6 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v2, "valueMapper");
v7 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.Function decorate(java.util.function.Function)>(v6);
v8 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v3, "mergeFunction");
v9 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.BinaryOperator decorate(java.util.function.BinaryOperator)>(v8);
v10 = v0.<io.smallrye.mutiny.groups.MultiCollect: io.smallrye.mutiny.Multi upstream>;
v11 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)>(v5, v7, v9);
v12 = staticinvoke <io.smallrye.mutiny.groups.MultiCollect: io.smallrye.mutiny.Uni collector(io.smallrye.mutiny.Multi,java.util.stream.Collector,boolean)>(v10, v11, 0);
return v12;
}
public io.smallrye.mutiny.Uni asMultiMap(java.util.function.Function, java.util.function.Function)
{
java.util.function.Function v1, v2, v4, v6, v8;
io.smallrye.mutiny.Multi v7;
java.util.function.BinaryOperator v9;
io.smallrye.mutiny.Uni v11;
io.smallrye.mutiny.groups.MultiCollect v0;
java.lang.Object v3, v5;
java.util.stream.Collector v10;
v0 := @this: io.smallrye.mutiny.groups.MultiCollect;
v1 := @parameter0: java.util.function.Function;
v2 := @parameter1: java.util.function.Function;
v3 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "keyMapper");
v4 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.Function decorate(java.util.function.Function)>(v3);
v5 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v2, "valueMapper");
v6 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.Function decorate(java.util.function.Function)>(v5);
v7 = v0.<io.smallrye.mutiny.groups.MultiCollect: io.smallrye.mutiny.Multi upstream>;
v8 = staticinvoke <io.smallrye.mutiny.groups.MultiCollect$lambda_asMultiMap_1__2855: java.util.function.Function bootstrap$(java.util.function.Function)>(v6);
v9 = staticinvoke <io.smallrye.mutiny.groups.MultiCollect$lambda_asMultiMap_2__2856: java.util.function.BinaryOperator bootstrap$()>();
v10 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)>(v4, v8, v9);
v11 = staticinvoke <io.smallrye.mutiny.groups.MultiCollect: io.smallrye.mutiny.Uni collector(io.smallrye.mutiny.Multi,java.util.stream.Collector,boolean)>(v7, v10, 0);
return v11;
}
public io.smallrye.mutiny.Uni asMultiMap(java.util.function.Function)
{
java.util.function.Function v1, v3, v5;
io.smallrye.mutiny.Multi v4;
java.util.function.BinaryOperator v6;
io.smallrye.mutiny.Uni v8;
io.smallrye.mutiny.groups.MultiCollect v0;
java.lang.Object v2;
java.util.stream.Collector v7;
v0 := @this: io.smallrye.mutiny.groups.MultiCollect;
v1 := @parameter0: java.util.function.Function;
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "keyMapper");
v3 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.Function decorate(java.util.function.Function)>(v2);
v4 = v0.<io.smallrye.mutiny.groups.MultiCollect: io.smallrye.mutiny.Multi upstream>;
v5 = staticinvoke <io.smallrye.mutiny.groups.MultiCollect$lambda_asMultiMap_3__2857: java.util.function.Function bootstrap$()>();
v6 = staticinvoke <io.smallrye.mutiny.groups.MultiCollect$lambda_asMultiMap_4__2858: java.util.function.BinaryOperator bootstrap$()>();
v7 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function,java.util.function.BinaryOperator)>(v3, v5, v6);
v8 = staticinvoke <io.smallrye.mutiny.groups.MultiCollect: io.smallrye.mutiny.Uni collector(io.smallrye.mutiny.Multi,java.util.stream.Collector,boolean)>(v4, v7, 0);
return v8;
}
public io.smallrye.mutiny.groups.MultiCollect where(java.util.function.Predicate)
{
io.smallrye.mutiny.groups.MultiSelect v4;
java.util.function.Predicate v1;
io.smallrye.mutiny.groups.MultiCollect v0, v2;
io.smallrye.mutiny.Multi v3, v5;
v0 := @this: io.smallrye.mutiny.groups.MultiCollect;
v1 := @parameter0: java.util.function.Predicate;
v2 = new io.smallrye.mutiny.groups.MultiCollect;
v3 = v0.<io.smallrye.mutiny.groups.MultiCollect: io.smallrye.mutiny.Multi upstream>;
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiSelect select()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.MultiSelect: io.smallrye.mutiny.Multi where(java.util.function.Predicate)>(v1);
specialinvoke v2.<io.smallrye.mutiny.groups.MultiCollect: void <init>(io.smallrye.mutiny.Multi)>(v5);
return v2;
}
public io.smallrye.mutiny.groups.MultiCollect when(java.util.function.Function)
{
io.smallrye.mutiny.groups.MultiSelect v4;
io.smallrye.mutiny.groups.MultiCollect v0, v2;
java.util.function.Function v1;
io.smallrye.mutiny.Multi v3, v5;
v0 := @this: io.smallrye.mutiny.groups.MultiCollect;
v1 := @parameter0: java.util.function.Function;
v2 = new io.smallrye.mutiny.groups.MultiCollect;
v3 = v0.<io.smallrye.mutiny.groups.MultiCollect: io.smallrye.mutiny.Multi upstream>;
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiSelect select()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.MultiSelect: io.smallrye.mutiny.Multi when(java.util.function.Function)>(v1);
specialinvoke v2.<io.smallrye.mutiny.groups.MultiCollect: void <init>(io.smallrye.mutiny.Multi)>(v5);
return v2;
}
private static io.smallrye.mutiny.Uni collector(io.smallrye.mutiny.Multi, java.util.stream.Collector, boolean)
{
io.smallrye.mutiny.groups.UniCreate v5;
io.smallrye.mutiny.operators.multi.MultiCollectorOp v3;
java.util.stream.Collector v1;
io.smallrye.mutiny.Multi v0, v4;
boolean v2;
io.smallrye.mutiny.Uni v6;
v0 := @parameter0: io.smallrye.mutiny.Multi;
v1 := @parameter1: java.util.stream.Collector;
v2 := @parameter2: boolean;
v3 = new io.smallrye.mutiny.operators.multi.MultiCollectorOp;
specialinvoke v3.<io.smallrye.mutiny.operators.multi.MultiCollectorOp: void <init>(io.smallrye.mutiny.Multi,java.util.stream.Collector,boolean)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v3);
v5 = staticinvoke <io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniCreate createFrom()>();
v6 = virtualinvoke v5.<io.smallrye.mutiny.groups.UniCreate: io.smallrye.mutiny.Uni publisher(java.util.concurrent.Flow$Publisher)>(v4);
return v6;
}
}