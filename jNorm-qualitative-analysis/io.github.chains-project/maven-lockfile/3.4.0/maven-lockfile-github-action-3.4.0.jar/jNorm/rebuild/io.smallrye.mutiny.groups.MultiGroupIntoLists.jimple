public class io.smallrye.mutiny.groups.MultiGroupIntoLists extends java.lang.Object
{
private final io.smallrye.mutiny.Multi upstream;
public void <init>(io.smallrye.mutiny.Multi)
{
io.smallrye.mutiny.groups.MultiGroupIntoLists v0;
java.lang.Object v2;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.smallrye.mutiny.groups.MultiGroupIntoLists;
v1 := @parameter0: io.smallrye.mutiny.Multi;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "upstream");
v0.<io.smallrye.mutiny.groups.MultiGroupIntoLists: io.smallrye.mutiny.Multi upstream> = v2;
return;
}
public io.smallrye.mutiny.Multi every(java.time.Duration)
{
java.time.Duration v1, v4;
io.smallrye.mutiny.groups.MultiGroupIntoLists v0;
java.util.concurrent.ScheduledExecutorService v5;
io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp v2;
io.smallrye.mutiny.Multi v3, v6;
v0 := @this: io.smallrye.mutiny.groups.MultiGroupIntoLists;
v1 := @parameter0: java.time.Duration;
v2 = new io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp;
v3 = v0.<io.smallrye.mutiny.groups.MultiGroupIntoLists: io.smallrye.mutiny.Multi upstream>;
v4 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.time.Duration validate(java.time.Duration,java.lang.String)>(v1, "duration");
v5 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.ScheduledExecutorService getDefaultWorkerPool()>();
specialinvoke v2.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp: void <init>(io.smallrye.mutiny.Multi,int,java.time.Duration,java.util.concurrent.ScheduledExecutorService)>(v3, 2147483647, v4, v5);
v6 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v2);
return v6;
}
public io.smallrye.mutiny.Multi of(int)
{
int v1;
io.smallrye.mutiny.groups.MultiGroupIntoLists v0;
io.smallrye.mutiny.operators.multi.MultiBufferOp v2;
io.smallrye.mutiny.Multi v3, v4;
v0 := @this: io.smallrye.mutiny.groups.MultiGroupIntoLists;
v1 := @parameter0: int;
v2 = new io.smallrye.mutiny.operators.multi.MultiBufferOp;
v3 = v0.<io.smallrye.mutiny.groups.MultiGroupIntoLists: io.smallrye.mutiny.Multi upstream>;
specialinvoke v2.<io.smallrye.mutiny.operators.multi.MultiBufferOp: void <init>(io.smallrye.mutiny.Multi,int,int)>(v3, v1, v1);
v4 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v2);
return v4;
}
public io.smallrye.mutiny.Multi of(int, int)
{
io.smallrye.mutiny.groups.MultiGroupIntoLists v0;
io.smallrye.mutiny.operators.multi.MultiBufferOp v3;
io.smallrye.mutiny.Multi v4, v7;
int v1, v2, v5, v6;
v0 := @this: io.smallrye.mutiny.groups.MultiGroupIntoLists;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = new io.smallrye.mutiny.operators.multi.MultiBufferOp;
v4 = v0.<io.smallrye.mutiny.groups.MultiGroupIntoLists: io.smallrye.mutiny.Multi upstream>;
v5 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: int positive(int,java.lang.String)>(v1, "size");
v6 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: int positive(int,java.lang.String)>(v2, "skip");
specialinvoke v3.<io.smallrye.mutiny.operators.multi.MultiBufferOp: void <init>(io.smallrye.mutiny.Multi,int,int)>(v4, v5, v6);
v7 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v3);
return v7;
}
public io.smallrye.mutiny.Multi of(int, java.time.Duration)
{
io.smallrye.mutiny.groups.MultiGroupIntoLists v0;
io.smallrye.mutiny.Multi v4, v8;
java.time.Duration v2, v6;
int v1, v5;
java.util.concurrent.ScheduledExecutorService v7;
io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp v3;
v0 := @this: io.smallrye.mutiny.groups.MultiGroupIntoLists;
v1 := @parameter0: int;
v2 := @parameter1: java.time.Duration;
v3 = new io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp;
v4 = v0.<io.smallrye.mutiny.groups.MultiGroupIntoLists: io.smallrye.mutiny.Multi upstream>;
v5 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: int positive(int,java.lang.String)>(v1, "size");
v6 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.time.Duration validate(java.time.Duration,java.lang.String)>(v2, "maximumDelay");
v7 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.ScheduledExecutorService getDefaultWorkerPool()>();
specialinvoke v3.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp: void <init>(io.smallrye.mutiny.Multi,int,java.time.Duration,java.util.concurrent.ScheduledExecutorService)>(v4, v5, v6, v7);
v8 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v3);
return v8;
}
}