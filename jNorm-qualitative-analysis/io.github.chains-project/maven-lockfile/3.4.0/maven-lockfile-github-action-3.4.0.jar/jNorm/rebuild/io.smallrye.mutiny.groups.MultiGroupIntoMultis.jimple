public class io.smallrye.mutiny.groups.MultiGroupIntoMultis extends java.lang.Object
{
private final io.smallrye.mutiny.Multi upstream;
public void <init>(io.smallrye.mutiny.Multi)
{
java.lang.Object v2;
io.smallrye.mutiny.groups.MultiGroupIntoMultis v0;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.smallrye.mutiny.groups.MultiGroupIntoMultis;
v1 := @parameter0: io.smallrye.mutiny.Multi;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "upstream");
v0.<io.smallrye.mutiny.groups.MultiGroupIntoMultis: io.smallrye.mutiny.Multi upstream> = v2;
return;
}
public io.smallrye.mutiny.Multi every(java.time.Duration)
{
io.smallrye.mutiny.groups.MultiGroupIntoMultis v0;
java.time.Duration v1, v4;
java.util.concurrent.ScheduledExecutorService v5;
io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp v2;
io.smallrye.mutiny.Multi v3, v6;
v0 := @this: io.smallrye.mutiny.groups.MultiGroupIntoMultis;
v1 := @parameter0: java.time.Duration;
v2 = new io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp;
v3 = v0.<io.smallrye.mutiny.groups.MultiGroupIntoMultis: io.smallrye.mutiny.Multi upstream>;
v4 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.time.Duration validate(java.time.Duration,java.lang.String)>(v1, "duration");
v5 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.ScheduledExecutorService getDefaultWorkerPool()>();
specialinvoke v2.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp: void <init>(io.smallrye.mutiny.Multi,java.time.Duration,java.util.concurrent.ScheduledExecutorService)>(v3, v4, v5);
v6 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v2);
return v6;
}
public io.smallrye.mutiny.Multi of(int)
{
io.smallrye.mutiny.groups.MultiGroupIntoMultis v0;
int v1, v2;
io.smallrye.mutiny.Multi v4, v5;
io.smallrye.mutiny.operators.multi.MultiWindowOp v3;
v0 := @this: io.smallrye.mutiny.groups.MultiGroupIntoMultis;
v1 := @parameter0: int;
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: int positive(int,java.lang.String)>(v1, "size");
v3 = new io.smallrye.mutiny.operators.multi.MultiWindowOp;
v4 = v0.<io.smallrye.mutiny.groups.MultiGroupIntoMultis: io.smallrye.mutiny.Multi upstream>;
specialinvoke v3.<io.smallrye.mutiny.operators.multi.MultiWindowOp: void <init>(io.smallrye.mutiny.Multi,int,int)>(v4, v2, v2);
v5 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v3);
return v5;
}
public io.smallrye.mutiny.Multi of(int, int)
{
io.smallrye.mutiny.groups.MultiGroupIntoMultis v0;
io.smallrye.mutiny.Multi v4, v7;
int v1, v2, v5, v6;
io.smallrye.mutiny.operators.multi.MultiWindowOp v3;
v0 := @this: io.smallrye.mutiny.groups.MultiGroupIntoMultis;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = new io.smallrye.mutiny.operators.multi.MultiWindowOp;
v4 = v0.<io.smallrye.mutiny.groups.MultiGroupIntoMultis: io.smallrye.mutiny.Multi upstream>;
v5 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: int positive(int,java.lang.String)>(v1, "size");
v6 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: int positive(int,java.lang.String)>(v2, "skip");
specialinvoke v3.<io.smallrye.mutiny.operators.multi.MultiWindowOp: void <init>(io.smallrye.mutiny.Multi,int,int)>(v4, v5, v6);
v7 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v3);
return v7;
}
}