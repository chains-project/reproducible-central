public class io.smallrye.mutiny.groups.MultiOnFailure extends java.lang.Object
{
private final io.smallrye.mutiny.Multi upstream;
private final java.util.function.Predicate predicate;
public void <init>(io.smallrye.mutiny.Multi, java.util.function.Predicate)
{
java.util.function.Predicate v2, v3;
io.smallrye.mutiny.groups.MultiOnFailure v0;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.smallrye.mutiny.groups.MultiOnFailure;
v1 := @parameter0: io.smallrye.mutiny.Multi;
v2 := @parameter1: java.util.function.Predicate;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.smallrye.mutiny.groups.MultiOnFailure: io.smallrye.mutiny.Multi upstream> = v1;
if v2 != null goto label1;
v3 = staticinvoke <io.smallrye.mutiny.groups.MultiOnFailure$lambda_new_0__2812: java.util.function.Predicate bootstrap$()>();
goto label2;
label1:
v3 = v2;
label2:
v0.<io.smallrye.mutiny.groups.MultiOnFailure: java.util.function.Predicate predicate> = v3;
return;
}
public io.smallrye.mutiny.Multi invoke(java.util.function.Consumer)
{
io.smallrye.mutiny.operators.multi.MultiOnFailureInvoke v4;
java.util.function.Predicate v6;
io.smallrye.mutiny.Multi v5, v7;
java.util.function.Consumer v1, v3;
java.lang.Object v2;
io.smallrye.mutiny.groups.MultiOnFailure v0;
v0 := @this: io.smallrye.mutiny.groups.MultiOnFailure;
v1 := @parameter0: java.util.function.Consumer;
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "callback");
v3 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.Consumer decorate(java.util.function.Consumer)>(v2);
v4 = new io.smallrye.mutiny.operators.multi.MultiOnFailureInvoke;
v5 = v0.<io.smallrye.mutiny.groups.MultiOnFailure: io.smallrye.mutiny.Multi upstream>;
v6 = v0.<io.smallrye.mutiny.groups.MultiOnFailure: java.util.function.Predicate predicate>;
specialinvoke v4.<io.smallrye.mutiny.operators.multi.MultiOnFailureInvoke: void <init>(io.smallrye.mutiny.Multi,java.util.function.Consumer,java.util.function.Predicate)>(v5, v3, v6);
v7 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v4);
return v7;
}
public io.smallrye.mutiny.Multi invoke(java.lang.Runnable)
{
java.util.function.Consumer v3;
java.lang.Object v2;
io.smallrye.mutiny.groups.MultiOnFailure v0;
java.lang.Runnable v1;
io.smallrye.mutiny.Multi v4;
v0 := @this: io.smallrye.mutiny.groups.MultiOnFailure;
v1 := @parameter0: java.lang.Runnable;
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "callback");
v3 = staticinvoke <io.smallrye.mutiny.groups.MultiOnFailure$lambda_invoke_1__2813: java.util.function.Consumer bootstrap$(java.lang.Runnable)>(v2);
v4 = virtualinvoke v0.<io.smallrye.mutiny.groups.MultiOnFailure: io.smallrye.mutiny.Multi invoke(java.util.function.Consumer)>(v3);
return v4;
}
public io.smallrye.mutiny.Multi call(java.util.function.Function)
{
java.lang.Object v2;
io.smallrye.mutiny.groups.MultiOnFailure v0;
java.util.function.Function v1, v3, v4;
io.smallrye.mutiny.Multi v5;
v0 := @this: io.smallrye.mutiny.groups.MultiOnFailure;
v1 := @parameter0: java.util.function.Function;
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "action");
v3 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.Function decorate(java.util.function.Function)>(v2);
v4 = staticinvoke <io.smallrye.mutiny.groups.MultiOnFailure$lambda_call_5__2814: java.util.function.Function bootstrap$(java.util.function.Function)>(v3);
v5 = virtualinvoke v0.<io.smallrye.mutiny.groups.MultiOnFailure: io.smallrye.mutiny.Multi recoverWithMulti(java.util.function.Function)>(v4);
return v5;
}
public io.smallrye.mutiny.Multi call(java.util.function.Supplier)
{
java.lang.Object v2;
io.smallrye.mutiny.groups.MultiOnFailure v0;
java.util.function.Function v4;
java.util.function.Supplier v1, v3;
io.smallrye.mutiny.Multi v5;
v0 := @this: io.smallrye.mutiny.groups.MultiOnFailure;
v1 := @parameter0: java.util.function.Supplier;
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "action");
v3 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.Supplier decorate(java.util.function.Supplier)>(v2);
v4 = staticinvoke <io.smallrye.mutiny.groups.MultiOnFailure$lambda_call_6__2815: java.util.function.Function bootstrap$(java.util.function.Supplier)>(v3);
v5 = virtualinvoke v0.<io.smallrye.mutiny.groups.MultiOnFailure: io.smallrye.mutiny.Multi call(java.util.function.Function)>(v4);
return v5;
}
public io.smallrye.mutiny.Multi transform(java.util.function.Function)
{
java.util.function.Predicate v6;
java.util.function.Function v1, v3;
io.smallrye.mutiny.Multi v5, v7;
io.smallrye.mutiny.operators.multi.MultiOnFailureTransform v4;
java.lang.Object v2;
io.smallrye.mutiny.groups.MultiOnFailure v0;
v0 := @this: io.smallrye.mutiny.groups.MultiOnFailure;
v1 := @parameter0: java.util.function.Function;
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "mapper");
v3 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.Function decorate(java.util.function.Function)>(v2);
v4 = new io.smallrye.mutiny.operators.multi.MultiOnFailureTransform;
v5 = v0.<io.smallrye.mutiny.groups.MultiOnFailure: io.smallrye.mutiny.Multi upstream>;
v6 = v0.<io.smallrye.mutiny.groups.MultiOnFailure: java.util.function.Predicate predicate>;
specialinvoke v4.<io.smallrye.mutiny.operators.multi.MultiOnFailureTransform: void <init>(io.smallrye.mutiny.Multi,java.util.function.Predicate,java.util.function.Function)>(v5, v6, v3);
v7 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v4);
return v7;
}
public io.smallrye.mutiny.Multi recoverWithItem(java.lang.Object)
{
java.lang.Object v1;
io.smallrye.mutiny.groups.MultiOnFailure v0;
java.util.function.Supplier v2;
io.smallrye.mutiny.Multi v3;
v0 := @this: io.smallrye.mutiny.groups.MultiOnFailure;
v1 := @parameter0: java.lang.Object;
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "fallback");
v2 = staticinvoke <io.smallrye.mutiny.groups.MultiOnFailure$lambda_recoverWithItem_7__2816: java.util.function.Supplier bootstrap$(java.lang.Object)>(v1);
v3 = virtualinvoke v0.<io.smallrye.mutiny.groups.MultiOnFailure: io.smallrye.mutiny.Multi recoverWithItem(java.util.function.Supplier)>(v2);
return v3;
}
public io.smallrye.mutiny.Multi recoverWithItem(java.util.function.Supplier)
{
java.lang.Object v2;
io.smallrye.mutiny.groups.MultiOnFailure v0;
java.util.function.Function v4;
java.util.function.Supplier v1, v3;
io.smallrye.mutiny.Multi v5;
v0 := @this: io.smallrye.mutiny.groups.MultiOnFailure;
v1 := @parameter0: java.util.function.Supplier;
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "supplier");
v3 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.Supplier decorate(java.util.function.Supplier)>(v2);
v4 = staticinvoke <io.smallrye.mutiny.groups.MultiOnFailure$lambda_recoverWithItem_8__2817: java.util.function.Function bootstrap$(java.util.function.Supplier)>(v3);
v5 = virtualinvoke v0.<io.smallrye.mutiny.groups.MultiOnFailure: io.smallrye.mutiny.Multi recoverWithItem(java.util.function.Function)>(v4);
return v5;
}
public io.smallrye.mutiny.Multi recoverWithItem(java.util.function.Function)
{
java.util.function.Predicate v6;
io.smallrye.mutiny.operators.multi.MultiFlatMapOnFailure v4;
java.util.function.Function v1, v3, v7;
io.smallrye.mutiny.Multi v5, v8;
java.lang.Object v2;
io.smallrye.mutiny.groups.MultiOnFailure v0;
v0 := @this: io.smallrye.mutiny.groups.MultiOnFailure;
v1 := @parameter0: java.util.function.Function;
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "function");
v3 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.Function decorate(java.util.function.Function)>(v2);
v4 = new io.smallrye.mutiny.operators.multi.MultiFlatMapOnFailure;
v5 = v0.<io.smallrye.mutiny.groups.MultiOnFailure: io.smallrye.mutiny.Multi upstream>;
v6 = v0.<io.smallrye.mutiny.groups.MultiOnFailure: java.util.function.Predicate predicate>;
v7 = staticinvoke <io.smallrye.mutiny.groups.MultiOnFailure$lambda_recoverWithItem_9__2818: java.util.function.Function bootstrap$(java.util.function.Function)>(v3);
specialinvoke v4.<io.smallrye.mutiny.operators.multi.MultiFlatMapOnFailure: void <init>(io.smallrye.mutiny.Multi,java.util.function.Predicate,java.util.function.Function)>(v5, v6, v7);
v8 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v4);
return v8;
}
public io.smallrye.mutiny.Multi recoverWithCompletion()
{
io.smallrye.mutiny.groups.MultiCreate v1;
io.smallrye.mutiny.groups.MultiOnFailure v0;
io.smallrye.mutiny.Multi v2, v3;
v0 := @this: io.smallrye.mutiny.groups.MultiOnFailure;
v1 = staticinvoke <io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiCreate createFrom()>();
v2 = virtualinvoke v1.<io.smallrye.mutiny.groups.MultiCreate: io.smallrye.mutiny.Multi empty()>();
v3 = virtualinvoke v0.<io.smallrye.mutiny.groups.MultiOnFailure: io.smallrye.mutiny.Multi recoverWithMulti(io.smallrye.mutiny.Multi)>(v2);
return v3;
}
public io.smallrye.mutiny.Multi recoverWithMulti(java.util.function.Function)
{
java.util.function.Predicate v6;
io.smallrye.mutiny.operators.multi.MultiFlatMapOnFailure v4;
java.util.function.Function v1, v3;
io.smallrye.mutiny.Multi v5, v7;
java.lang.Object v2;
io.smallrye.mutiny.groups.MultiOnFailure v0;
v0 := @this: io.smallrye.mutiny.groups.MultiOnFailure;
v1 := @parameter0: java.util.function.Function;
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "function");
v3 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.Function decorate(java.util.function.Function)>(v2);
v4 = new io.smallrye.mutiny.operators.multi.MultiFlatMapOnFailure;
v5 = v0.<io.smallrye.mutiny.groups.MultiOnFailure: io.smallrye.mutiny.Multi upstream>;
v6 = v0.<io.smallrye.mutiny.groups.MultiOnFailure: java.util.function.Predicate predicate>;
specialinvoke v4.<io.smallrye.mutiny.operators.multi.MultiFlatMapOnFailure: void <init>(io.smallrye.mutiny.Multi,java.util.function.Predicate,java.util.function.Function)>(v5, v6, v3);
v7 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v4);
return v7;
}
public io.smallrye.mutiny.Multi recoverWithMulti(java.util.function.Supplier)
{
java.lang.Object v2;
io.smallrye.mutiny.groups.MultiOnFailure v0;
java.util.function.Function v4;
java.util.function.Supplier v1, v3;
io.smallrye.mutiny.Multi v5;
v0 := @this: io.smallrye.mutiny.groups.MultiOnFailure;
v1 := @parameter0: java.util.function.Supplier;
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "supplier");
v3 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.Supplier decorate(java.util.function.Supplier)>(v2);
v4 = staticinvoke <io.smallrye.mutiny.groups.MultiOnFailure$lambda_recoverWithMulti_10__2819: java.util.function.Function bootstrap$(java.util.function.Supplier)>(v3);
v5 = virtualinvoke v0.<io.smallrye.mutiny.groups.MultiOnFailure: io.smallrye.mutiny.Multi recoverWithMulti(java.util.function.Function)>(v4);
return v5;
}
public io.smallrye.mutiny.Multi recoverWithMulti(io.smallrye.mutiny.Multi)
{
io.smallrye.mutiny.groups.MultiOnFailure v0;
java.util.function.Supplier v2;
io.smallrye.mutiny.Multi v1, v3;
v0 := @this: io.smallrye.mutiny.groups.MultiOnFailure;
v1 := @parameter0: io.smallrye.mutiny.Multi;
v2 = staticinvoke <io.smallrye.mutiny.groups.MultiOnFailure$lambda_recoverWithMulti_11__2820: java.util.function.Supplier bootstrap$(io.smallrye.mutiny.Multi)>(v1);
v3 = virtualinvoke v0.<io.smallrye.mutiny.groups.MultiOnFailure: io.smallrye.mutiny.Multi recoverWithMulti(java.util.function.Supplier)>(v2);
return v3;
}
public io.smallrye.mutiny.groups.MultiRetry retry()
{
java.util.function.Predicate v3;
io.smallrye.mutiny.groups.MultiOnFailure v0;
io.smallrye.mutiny.Multi v2;
io.smallrye.mutiny.groups.MultiRetry v1;
v0 := @this: io.smallrye.mutiny.groups.MultiOnFailure;
v1 = new io.smallrye.mutiny.groups.MultiRetry;
v2 = v0.<io.smallrye.mutiny.groups.MultiOnFailure: io.smallrye.mutiny.Multi upstream>;
v3 = v0.<io.smallrye.mutiny.groups.MultiOnFailure: java.util.function.Predicate predicate>;
specialinvoke v1.<io.smallrye.mutiny.groups.MultiRetry: void <init>(io.smallrye.mutiny.Multi,java.util.function.Predicate)>(v2, v3);
return v1;
}
}