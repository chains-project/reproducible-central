public class io.smallrye.mutiny.groups.MultiOverflowStrategy extends java.lang.Object
{
private final io.smallrye.mutiny.Multi upstream;
private final java.util.function.Consumer dropConsumer;
private final java.util.function.Function dropUniMapper;
public void <init>(io.smallrye.mutiny.Multi, java.util.function.Consumer, java.util.function.Function)
{
java.util.function.Consumer v2;
io.smallrye.mutiny.groups.MultiOverflowStrategy v0;
java.util.function.Function v3;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.smallrye.mutiny.groups.MultiOverflowStrategy;
v1 := @parameter0: io.smallrye.mutiny.Multi;
v2 := @parameter1: java.util.function.Consumer;
v3 := @parameter2: java.util.function.Function;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.smallrye.mutiny.groups.MultiOverflowStrategy: io.smallrye.mutiny.Multi upstream> = v1;
v0.<io.smallrye.mutiny.groups.MultiOverflowStrategy: java.util.function.Consumer dropConsumer> = v2;
v0.<io.smallrye.mutiny.groups.MultiOverflowStrategy: java.util.function.Function dropUniMapper> = v3;
return;
}
public io.smallrye.mutiny.Multi drop()
{
java.util.function.Consumer v3;
io.smallrye.mutiny.groups.MultiOverflowStrategy v0;
java.util.function.Function v4;
io.smallrye.mutiny.Multi v2, v5;
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp v1;
v0 := @this: io.smallrye.mutiny.groups.MultiOverflowStrategy;
v1 = new io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp;
v2 = v0.<io.smallrye.mutiny.groups.MultiOverflowStrategy: io.smallrye.mutiny.Multi upstream>;
v3 = v0.<io.smallrye.mutiny.groups.MultiOverflowStrategy: java.util.function.Consumer dropConsumer>;
v4 = v0.<io.smallrye.mutiny.groups.MultiOverflowStrategy: java.util.function.Function dropUniMapper>;
specialinvoke v1.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowDropItemsOp: void <init>(io.smallrye.mutiny.Multi,java.util.function.Consumer,java.util.function.Function)>(v2, v3, v4);
v5 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v1);
return v5;
}
public io.smallrye.mutiny.Multi buffer()
{
int v1;
io.smallrye.mutiny.groups.MultiOverflowStrategy v0;
io.smallrye.mutiny.Multi v2;
v0 := @this: io.smallrye.mutiny.groups.MultiOverflowStrategy;
v1 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: int getMultiOverflowDefaultBufferSize()>();
v2 = virtualinvoke v0.<io.smallrye.mutiny.groups.MultiOverflowStrategy: io.smallrye.mutiny.Multi buffer(int)>(v1);
return v2;
}
public io.smallrye.mutiny.Multi buffer(int)
{
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp v2;
io.smallrye.mutiny.groups.MultiOverflowStrategy v0;
java.util.function.Function v6;
io.smallrye.mutiny.Multi v3, v7;
java.util.function.Consumer v5;
int v1, v4;
v0 := @this: io.smallrye.mutiny.groups.MultiOverflowStrategy;
v1 := @parameter0: int;
v2 = new io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp;
v3 = v0.<io.smallrye.mutiny.groups.MultiOverflowStrategy: io.smallrye.mutiny.Multi upstream>;
v4 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: int positive(int,java.lang.String)>(v1, "size");
v5 = v0.<io.smallrye.mutiny.groups.MultiOverflowStrategy: java.util.function.Consumer dropConsumer>;
v6 = v0.<io.smallrye.mutiny.groups.MultiOverflowStrategy: java.util.function.Function dropUniMapper>;
specialinvoke v2.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp: void <init>(io.smallrye.mutiny.Multi,int,boolean,java.util.function.Consumer,java.util.function.Function)>(v3, v4, 0, v5, v6);
v7 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v2);
return v7;
}
public io.smallrye.mutiny.Multi bufferUnconditionally()
{
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp v1;
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.MultiOverflowStrategy v0;
int v3;
java.util.function.Function v5;
io.smallrye.mutiny.Multi v2, v6;
v0 := @this: io.smallrye.mutiny.groups.MultiOverflowStrategy;
v1 = new io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp;
v2 = v0.<io.smallrye.mutiny.groups.MultiOverflowStrategy: io.smallrye.mutiny.Multi upstream>;
v3 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: int getMultiOverflowDefaultBufferSize()>();
v4 = v0.<io.smallrye.mutiny.groups.MultiOverflowStrategy: java.util.function.Consumer dropConsumer>;
v5 = v0.<io.smallrye.mutiny.groups.MultiOverflowStrategy: java.util.function.Function dropUniMapper>;
specialinvoke v1.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp: void <init>(io.smallrye.mutiny.Multi,int,boolean,java.util.function.Consumer,java.util.function.Function)>(v2, v3, 1, v4, v5);
v6 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v1);
return v6;
}
public io.smallrye.mutiny.Multi dropPreviousItems()
{
java.util.function.Consumer v3;
io.smallrye.mutiny.groups.MultiOverflowStrategy v0;
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp v1;
java.util.function.Function v4;
io.smallrye.mutiny.Multi v2, v5;
v0 := @this: io.smallrye.mutiny.groups.MultiOverflowStrategy;
v1 = new io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp;
v2 = v0.<io.smallrye.mutiny.groups.MultiOverflowStrategy: io.smallrye.mutiny.Multi upstream>;
v3 = v0.<io.smallrye.mutiny.groups.MultiOverflowStrategy: java.util.function.Consumer dropConsumer>;
v4 = v0.<io.smallrye.mutiny.groups.MultiOverflowStrategy: java.util.function.Function dropUniMapper>;
specialinvoke v1.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowKeepLastOp: void <init>(io.smallrye.mutiny.Multi,java.util.function.Consumer,java.util.function.Function)>(v2, v3, v4);
v5 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v1);
return v5;
}
}