public class io.smallrye.mutiny.groups.UniAndGroupIterable extends java.lang.Object
{
private final io.smallrye.mutiny.Uni source;
private final java.util.List unis;
private boolean collectFailures;
private int concurrency;
public void <init>(java.lang.Iterable)
{
java.lang.Iterable v1;
io.smallrye.mutiny.groups.UniAndGroupIterable v0;
v0 := @this: io.smallrye.mutiny.groups.UniAndGroupIterable;
v1 := @parameter0: java.lang.Iterable;
specialinvoke v0.<io.smallrye.mutiny.groups.UniAndGroupIterable: void <init>(io.smallrye.mutiny.Uni,java.lang.Iterable,boolean)>(null, v1, 0);
return;
}
public void <init>(io.smallrye.mutiny.Uni, java.lang.Iterable)
{
java.lang.Iterable v2;
io.smallrye.mutiny.Uni v1;
io.smallrye.mutiny.groups.UniAndGroupIterable v0;
v0 := @this: io.smallrye.mutiny.groups.UniAndGroupIterable;
v1 := @parameter0: io.smallrye.mutiny.Uni;
v2 := @parameter1: java.lang.Iterable;
specialinvoke v0.<io.smallrye.mutiny.groups.UniAndGroupIterable: void <init>(io.smallrye.mutiny.Uni,java.lang.Iterable,boolean)>(v1, v2, 0);
return;
}
public void <init>(io.smallrye.mutiny.Uni, java.lang.Iterable, boolean)
{
io.smallrye.mutiny.groups.UniAndGroupIterable v0;
java.lang.Iterable v2;
io.smallrye.mutiny.Uni v1;
java.util.stream.Stream v7;
int v4;
java.util.stream.Collector v8;
java.util.Spliterator v6;
boolean v3, v5;
v0 := @this: io.smallrye.mutiny.groups.UniAndGroupIterable;
v1 := @parameter0: io.smallrye.mutiny.Uni;
v2 := @parameter1: java.lang.Iterable;
v3 := @parameter2: boolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
v4 = (int) -1;
v0.<io.smallrye.mutiny.groups.UniAndGroupIterable: int concurrency> = v4;
v0.<io.smallrye.mutiny.groups.UniAndGroupIterable: io.smallrye.mutiny.Uni source> = v1;
v5 = v2 instanceof java.util.List;
if v5 != 0 goto label1;
v6 = interfaceinvoke v2.<java.lang.Iterable: java.util.Spliterator spliterator()>();
v7 = staticinvoke <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>(v6, 0);
v8 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();
interfaceinvoke v7.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v8);
label1:
v0.<io.smallrye.mutiny.groups.UniAndGroupIterable: java.util.List unis> = v2;
v0.<io.smallrye.mutiny.groups.UniAndGroupIterable: boolean collectFailures> = v3;
return;
}
public io.smallrye.mutiny.groups.UniAndGroupIterable collectFailures()
{
io.smallrye.mutiny.groups.UniAndGroupIterable v0;
v0 := @this: io.smallrye.mutiny.groups.UniAndGroupIterable;
v0.<io.smallrye.mutiny.groups.UniAndGroupIterable: boolean collectFailures> = 1;
return v0;
}
public io.smallrye.mutiny.groups.UniAndGroupIterable usingConcurrencyOf(int)
{
int v1, v2;
io.smallrye.mutiny.groups.UniAndGroupIterable v0;
v0 := @this: io.smallrye.mutiny.groups.UniAndGroupIterable;
v1 := @parameter0: int;
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: int positive(int,java.lang.String)>(v1, "level");
v0.<io.smallrye.mutiny.groups.UniAndGroupIterable: int concurrency> = v2;
return v0;
}
public io.smallrye.mutiny.Uni combinedWith(java.util.function.Function)
{
io.smallrye.mutiny.groups.UniAndGroupIterable v0;
io.smallrye.mutiny.operators.uni.UniAndCombination v4;
java.util.function.Function v1, v3;
io.smallrye.mutiny.Uni v5, v9;
java.util.List v6;
int v8;
java.lang.Object v2;
boolean v7;
v0 := @this: io.smallrye.mutiny.groups.UniAndGroupIterable;
v1 := @parameter0: java.util.function.Function;
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "function");
v3 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.Function decorate(java.util.function.Function)>(v2);
v4 = new io.smallrye.mutiny.operators.uni.UniAndCombination;
v5 = v0.<io.smallrye.mutiny.groups.UniAndGroupIterable: io.smallrye.mutiny.Uni source>;
v6 = v0.<io.smallrye.mutiny.groups.UniAndGroupIterable: java.util.List unis>;
v7 = v0.<io.smallrye.mutiny.groups.UniAndGroupIterable: boolean collectFailures>;
v8 = v0.<io.smallrye.mutiny.groups.UniAndGroupIterable: int concurrency>;
specialinvoke v4.<io.smallrye.mutiny.operators.uni.UniAndCombination: void <init>(io.smallrye.mutiny.Uni,java.util.List,java.util.function.Function,boolean,int)>(v5, v6, v3, v7, v8);
v9 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Uni onUniCreation(io.smallrye.mutiny.Uni)>(v4);
return v9;
}
public io.smallrye.mutiny.Uni combinedWith(java.lang.Class, java.util.function.Function)
{
io.smallrye.mutiny.groups.UniAndGroupIterable v0;
java.lang.Class v1;
java.util.function.Function v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.smallrye.mutiny.groups.UniAndGroupIterable;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.util.function.Function;
v3 = virtualinvoke v0.<io.smallrye.mutiny.groups.UniAndGroupIterable: io.smallrye.mutiny.Uni combinedWith(java.util.function.Function)>(v2);
return v3;
}
public io.smallrye.mutiny.Uni discardItems()
{
io.smallrye.mutiny.groups.UniAndGroupIterable v0;
io.smallrye.mutiny.operators.uni.UniAndCombination v1;
java.util.function.Function v4;
io.smallrye.mutiny.Uni v2, v7;
java.util.List v3;
int v6;
boolean v5;
v0 := @this: io.smallrye.mutiny.groups.UniAndGroupIterable;
v1 = new io.smallrye.mutiny.operators.uni.UniAndCombination;
v2 = v0.<io.smallrye.mutiny.groups.UniAndGroupIterable: io.smallrye.mutiny.Uni source>;
v3 = v0.<io.smallrye.mutiny.groups.UniAndGroupIterable: java.util.List unis>;
v4 = staticinvoke <io.smallrye.mutiny.groups.UniAndGroupIterable$lambda_discardItems_0__2827: java.util.function.Function bootstrap$()>();
v5 = v0.<io.smallrye.mutiny.groups.UniAndGroupIterable: boolean collectFailures>;
v6 = v0.<io.smallrye.mutiny.groups.UniAndGroupIterable: int concurrency>;
specialinvoke v1.<io.smallrye.mutiny.operators.uni.UniAndCombination: void <init>(io.smallrye.mutiny.Uni,java.util.List,java.util.function.Function,boolean,int)>(v2, v3, v4, v5, v6);
v7 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Uni onUniCreation(io.smallrye.mutiny.Uni)>(v1);
return v7;
}
}