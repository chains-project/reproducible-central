final class io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator extends java.lang.Object implements java.util.concurrent.Flow$Subscriber, java.util.Iterator, io.smallrye.mutiny.subscription.ContextSupport
{
private final java.util.Queue queue;
private final int batchSize;
private final int limit;
private final java.util.concurrent.locks.Lock lock;
private final java.util.concurrent.locks.Condition condition;
private final io.smallrye.mutiny.Context context;
long produced;
java.util.concurrent.atomic.AtomicReference subscription;
java.util.concurrent.atomic.AtomicBoolean done;
java.lang.Throwable failure;
void <init>(java.util.Queue, int, io.smallrye.mutiny.Context)
{
java.util.concurrent.locks.ReentrantLock v6;
java.util.concurrent.atomic.AtomicBoolean v5;
io.smallrye.mutiny.Context v3;
java.util.concurrent.atomic.AtomicReference v4;
io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator v0;
java.util.concurrent.locks.Condition v8;
java.util.concurrent.locks.Lock v7;
int v2;
java.util.Queue v1;
v0 := @this: io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator;
v1 := @parameter0: java.util.Queue;
v2 := @parameter1: int;
v3 := @parameter2: io.smallrye.mutiny.Context;
specialinvoke v0.<java.lang.Object: void <init>()>();
v4 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v4.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: java.util.concurrent.atomic.AtomicReference subscription> = v4;
v5 = new java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v5.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();
v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: java.util.concurrent.atomic.AtomicBoolean done> = v5;
v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: java.util.Queue queue> = v1;
v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: int batchSize> = v2;
v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: int limit> = v2;
v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: io.smallrye.mutiny.Context context> = v3;
v6 = new java.util.concurrent.locks.ReentrantLock;
specialinvoke v6.<java.util.concurrent.locks.ReentrantLock: void <init>()>();
v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: java.util.concurrent.locks.Lock lock> = v6;
v7 = v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: java.util.concurrent.locks.Lock lock>;
v8 = interfaceinvoke v7.<java.util.concurrent.locks.Lock: java.util.concurrent.locks.Condition newCondition()>();
v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: java.util.concurrent.locks.Condition condition> = v8;
return;
}
public boolean hasNext()
{
java.lang.Throwable v21, v5;
java.lang.IllegalStateException v7;
java.util.concurrent.atomic.AtomicBoolean v1, v12;
java.lang.Thread v19, v8;
java.lang.String v10, v9;
boolean v13, v15, v2, v4, v6;
io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator v0;
java.util.concurrent.locks.Condition v16;
java.util.concurrent.locks.Lock v11, v17, v20, v22;
java.lang.InterruptedException v18;
java.util.Queue v14, v3;
v0 := @this: io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator;
label01:
v1 = v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: java.util.concurrent.atomic.AtomicBoolean done>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
v3 = v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: java.util.Queue queue>;
v4 = interfaceinvoke v3.<java.util.Queue: boolean isEmpty()>();
if v2 == 0 goto label03;
v5 = v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: java.lang.Throwable failure>;
if v5 == null goto label02;
staticinvoke <io.smallrye.mutiny.helpers.BlockingIterable: void propagateFailure(java.lang.Throwable)>(v5);
goto label03;
label02:
if v4 == 0 goto label10;
return 0;
label03:
if v4 == 0 goto label10;
v6 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: boolean canCallerThreadBeBlocked()>();
if v6 != 0 goto label04;
v7 = new java.lang.IllegalStateException;
v8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v9 = virtualinvoke v8.<java.lang.Thread: java.lang.String getName()>();
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("The current thread cannot be blocked: \u0001");
specialinvoke v7.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v10);
throw v7;
label04:
v11 = v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: java.util.concurrent.locks.Lock lock>;
interfaceinvoke v11.<java.util.concurrent.locks.Lock: void lock()>();
label05:
v12 = v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: java.util.concurrent.atomic.AtomicBoolean done>;
v13 = virtualinvoke v12.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
if v13 != 0 goto label06;
v14 = v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: java.util.Queue queue>;
v15 = interfaceinvoke v14.<java.util.Queue: boolean isEmpty()>();
if v15 == 0 goto label06;
v16 = v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: java.util.concurrent.locks.Condition condition>;
interfaceinvoke v16.<java.util.concurrent.locks.Condition: void await()>();
goto label05;
label06:
v17 = v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: java.util.concurrent.locks.Lock lock>;
interfaceinvoke v17.<java.util.concurrent.locks.Lock: void unlock()>();
goto label01;
label07:
v18 := @caughtexception;
v19 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
virtualinvoke v19.<java.lang.Thread: void interrupt()>();
specialinvoke v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: void terminateAndFire()>();
staticinvoke <io.smallrye.mutiny.helpers.BlockingIterable: void propagateFailure(java.lang.Throwable)>(v18);
label08:
v20 = v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: java.util.concurrent.locks.Lock lock>;
interfaceinvoke v20.<java.util.concurrent.locks.Lock: void unlock()>();
goto label01;
label09:
v21 := @caughtexception;
v22 = v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: java.util.concurrent.locks.Lock lock>;
interfaceinvoke v22.<java.util.concurrent.locks.Lock: void unlock()>();
throw v21;
label10:
return 1;
catch java.lang.InterruptedException from label05 to label06 with label07;
catch java.lang.Throwable from label05 to label06 with label09;
catch java.lang.Throwable from label07 to label08 with label09;
}
public java.lang.Object next()
{
long v5, v6;
java.lang.IllegalArgumentException v4;
java.util.concurrent.atomic.AtomicReference v9;
io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator v0;
byte v8;
int v7;
java.lang.Object v10, v3;
java.util.Queue v2;
java.util.NoSuchElementException v11;
boolean v1;
v0 := @this: io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator;
v1 = virtualinvoke v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: boolean hasNext()>();
if v1 == 0 goto label4;
v2 = v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: java.util.Queue queue>;
v3 = interfaceinvoke v2.<java.util.Queue: java.lang.Object poll()>();
if v3 != null goto label1;
specialinvoke v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: void terminate()>();
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("`null` is not an accepted value");
staticinvoke <io.smallrye.mutiny.helpers.BlockingIterable: void propagateFailure(java.lang.Throwable)>(v4);
label1:
v5 = v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: long produced>;
v6 = v5 + 1L;
v7 = v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: int limit>;
v8 = v6 cmp v7;
if v8 != 0 goto label2;
v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: long produced> = 0L;
v9 = v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: java.util.concurrent.atomic.AtomicReference subscription>;
v10 = virtualinvoke v9.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
interfaceinvoke v10.<java.util.concurrent.Flow$Subscription: void request(long)>(v6);
goto label3;
label2:
v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: long produced> = v6;
label3:
return v3;
label4:
v11 = new java.util.NoSuchElementException;
specialinvoke v11.<java.util.NoSuchElementException: void <init>()>();
throw v11;
}
void fire()
{
java.lang.Throwable v4;
io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator v0;
java.util.concurrent.locks.Condition v2;
java.util.concurrent.locks.Lock v1, v3, v5;
v0 := @this: io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator;
v1 = v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: java.util.concurrent.locks.Lock lock>;
interfaceinvoke v1.<java.util.concurrent.locks.Lock: void lock()>();
label1:
v2 = v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: java.util.concurrent.locks.Condition condition>;
interfaceinvoke v2.<java.util.concurrent.locks.Condition: void signalAll()>();
label2:
v3 = v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: java.util.concurrent.locks.Lock lock>;
interfaceinvoke v3.<java.util.concurrent.locks.Lock: void unlock()>();
goto label4;
label3:
v4 := @caughtexception;
v5 = v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: java.util.concurrent.locks.Lock lock>;
interfaceinvoke v5.<java.util.concurrent.locks.Lock: void unlock()>();
throw v4;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
private void terminateAndFire()
{
io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator v0;
v0 := @this: io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator;
specialinvoke v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: void terminate()>();
virtualinvoke v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: void fire()>();
return;
}
private void terminate()
{
io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator v0;
io.smallrye.mutiny.subscription.UniSubscription v2;
java.lang.Object v3;
java.util.concurrent.atomic.AtomicReference v1;
v0 := @this: io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator;
v1 = v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: java.util.concurrent.atomic.AtomicReference subscription>;
v2 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription CANCELLED>;
v3 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(v2);
if v3 == null goto label1;
interfaceinvoke v3.<java.util.concurrent.Flow$Subscription: void cancel()>();
label1:
return;
}
public io.smallrye.mutiny.Context context()
{
io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator v0;
io.smallrye.mutiny.Context v1;
v0 := @this: io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator;
v1 = v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: io.smallrye.mutiny.Context context>;
return v1;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator v0;
int v4;
java.util.concurrent.atomic.AtomicReference v2;
boolean v3;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: java.util.concurrent.atomic.AtomicReference subscription>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, v1);
if v3 == 0 goto label1;
v4 = v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: int batchSize>;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void request(long)>(v4);
label1:
return;
}
public void onNext(java.lang.Object)
{
io.smallrye.mutiny.subscription.UniSubscription v5;
java.util.concurrent.atomic.AtomicReference v4;
io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator v0;
io.smallrye.mutiny.subscription.BackPressureFailure v7;
java.lang.Object v1, v6;
java.util.Queue v2;
boolean v3;
v0 := @this: io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: java.util.Queue queue>;
v3 = interfaceinvoke v2.<java.util.Queue: boolean offer(java.lang.Object)>(v1);
if v3 != 0 goto label1;
v4 = v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: java.util.concurrent.atomic.AtomicReference subscription>;
v5 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription CANCELLED>;
v6 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(v5);
interfaceinvoke v6.<java.util.concurrent.Flow$Subscription: void cancel()>();
v7 = new io.smallrye.mutiny.subscription.BackPressureFailure;
specialinvoke v7.<io.smallrye.mutiny.subscription.BackPressureFailure: void <init>(java.lang.String)>("Buffer is full, cannot deliver the item");
virtualinvoke v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: void onError(java.lang.Throwable)>(v7);
goto label2;
label1:
virtualinvoke v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: void fire()>();
label2:
return;
}
public void onError(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator v0;
java.util.concurrent.atomic.AtomicBoolean v2;
v0 := @this: io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator;
v1 := @parameter0: java.lang.Throwable;
v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: java.lang.Throwable failure> = v1;
v2 = v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: java.util.concurrent.atomic.AtomicBoolean done>;
virtualinvoke v2.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);
virtualinvoke v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: void fire()>();
return;
}
public void onComplete()
{
io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator v0;
java.util.concurrent.atomic.AtomicBoolean v1;
v0 := @this: io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator;
v1 = v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: java.util.concurrent.atomic.AtomicBoolean done>;
virtualinvoke v1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);
virtualinvoke v0.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: void fire()>();
return;
}
}