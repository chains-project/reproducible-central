public class io.smallrye.mutiny.helpers.BlockingIterable extends java.lang.Object implements java.lang.Iterable
{
private final io.smallrye.mutiny.Multi upstream;
private final java.util.function.Supplier supplier;
private final int batchSize;
private final java.util.function.Supplier contextSupplier;
public void <init>(io.smallrye.mutiny.Multi, int, java.util.function.Supplier, java.util.function.Supplier)
{
java.util.function.Supplier v3, v4;
io.smallrye.mutiny.Multi v1;
io.smallrye.mutiny.helpers.BlockingIterable v0;
int v2, v6;
java.lang.Object v5, v7, v8;
v0 := @this: io.smallrye.mutiny.helpers.BlockingIterable;
v1 := @parameter0: io.smallrye.mutiny.Multi;
v2 := @parameter1: int;
v3 := @parameter2: java.util.function.Supplier;
v4 := @parameter3: java.util.function.Supplier;
specialinvoke v0.<java.lang.Object: void <init>()>();
v5 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "upstream");
v0.<io.smallrye.mutiny.helpers.BlockingIterable: io.smallrye.mutiny.Multi upstream> = v5;
v6 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: int positive(int,java.lang.String)>(v2, "batchSize");
v0.<io.smallrye.mutiny.helpers.BlockingIterable: int batchSize> = v6;
v7 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v3, "queueSupplier");
v0.<io.smallrye.mutiny.helpers.BlockingIterable: java.util.function.Supplier supplier> = v7;
v8 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v4, "contextSupplier");
v0.<io.smallrye.mutiny.helpers.BlockingIterable: java.util.function.Supplier contextSupplier> = v8;
return;
}
public java.util.Iterator iterator()
{
io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator v1;
java.util.concurrent.Flow$Subscriber v3;
io.smallrye.mutiny.helpers.BlockingIterable v0;
io.smallrye.mutiny.Multi v2, v4;
v0 := @this: io.smallrye.mutiny.helpers.BlockingIterable;
v1 = specialinvoke v0.<io.smallrye.mutiny.helpers.BlockingIterable: io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator create()>();
v2 = v0.<io.smallrye.mutiny.helpers.BlockingIterable: io.smallrye.mutiny.Multi upstream>;
v3 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.Flow$Subscriber onMultiSubscription(java.util.concurrent.Flow$Publisher,java.util.concurrent.Flow$Subscriber)>(v2, v1);
v4 = v0.<io.smallrye.mutiny.helpers.BlockingIterable: io.smallrye.mutiny.Multi upstream>;
interfaceinvoke v4.<io.smallrye.mutiny.Multi: void subscribe(java.util.concurrent.Flow$Subscriber)>(v3);
return v1;
}
public java.util.Spliterator spliterator()
{
io.smallrye.mutiny.helpers.BlockingIterable v0;
java.util.stream.Stream v1;
java.util.Spliterator v2;
v0 := @this: io.smallrye.mutiny.helpers.BlockingIterable;
v1 = virtualinvoke v0.<io.smallrye.mutiny.helpers.BlockingIterable: java.util.stream.Stream stream()>();
v2 = interfaceinvoke v1.<java.util.stream.Stream: java.util.Spliterator spliterator()>();
return v2;
}
public java.util.stream.Stream stream()
{
java.util.concurrent.Executor v8;
java.lang.Runnable v4, v9;
io.smallrye.mutiny.Multi v6;
io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator v1;
java.util.concurrent.Flow$Subscriber v7;
io.smallrye.mutiny.helpers.BlockingIterable v0;
java.util.stream.Stream v3;
java.util.stream.BaseStream v5;
java.util.Spliterator v2;
v0 := @this: io.smallrye.mutiny.helpers.BlockingIterable;
v1 = specialinvoke v0.<io.smallrye.mutiny.helpers.BlockingIterable: io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator create()>();
v2 = staticinvoke <java.util.Spliterators: java.util.Spliterator spliteratorUnknownSize(java.util.Iterator,int)>(v1, 0);
v3 = staticinvoke <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>(v2, 0);
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v4 = staticinvoke <io.smallrye.mutiny.helpers.BlockingIterable$lambda_stream_0__2743: java.lang.Runnable bootstrap$(io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator)>(v1);
v5 = interfaceinvoke v3.<java.util.stream.Stream: java.util.stream.BaseStream onClose(java.lang.Runnable)>(v4);
v6 = v0.<io.smallrye.mutiny.helpers.BlockingIterable: io.smallrye.mutiny.Multi upstream>;
v7 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.Flow$Subscriber onMultiSubscription(java.util.concurrent.Flow$Publisher,java.util.concurrent.Flow$Subscriber)>(v6, v1);
v8 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.Executor getDefaultExecutor()>();
v9 = staticinvoke <io.smallrye.mutiny.helpers.BlockingIterable$lambda_stream_1__2744: java.lang.Runnable bootstrap$(io.smallrye.mutiny.helpers.BlockingIterable,java.util.concurrent.Flow$Subscriber)>(v0, v7);
interfaceinvoke v8.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(v9);
return v5;
}
private io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator create()
{
java.lang.Throwable v3, v7;
java.lang.IllegalStateException v4, v8;
java.util.function.Supplier v1, v5;
io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator v9;
io.smallrye.mutiny.helpers.BlockingIterable v0;
int v10;
java.lang.Object v2, v6;
v0 := @this: io.smallrye.mutiny.helpers.BlockingIterable;
label1:
v1 = v0.<io.smallrye.mutiny.helpers.BlockingIterable: java.util.function.Supplier supplier>;
v2 = interfaceinvoke v1.<java.util.function.Supplier: java.lang.Object get()>();
label2:
goto label4;
label3:
v3 := @caughtexception;
staticinvoke <io.smallrye.mutiny.helpers.BlockingIterable: void propagateFailure(java.lang.Throwable)>(v3);
label4:
if v2 != null goto label5;
v4 = new java.lang.IllegalStateException;
specialinvoke v4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The supplier returned `null`");
throw v4;
label5:
v5 = v0.<io.smallrye.mutiny.helpers.BlockingIterable: java.util.function.Supplier contextSupplier>;
v6 = interfaceinvoke v5.<java.util.function.Supplier: java.lang.Object get()>();
label6:
goto label8;
label7:
v7 := @caughtexception;
staticinvoke <io.smallrye.mutiny.helpers.BlockingIterable: void propagateFailure(java.lang.Throwable)>(v7);
label8:
if v6 != null goto label9;
v8 = new java.lang.IllegalStateException;
specialinvoke v8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The supplier returned `null`");
throw v8;
label9:
v9 = new io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator;
v10 = v0.<io.smallrye.mutiny.helpers.BlockingIterable: int batchSize>;
specialinvoke v9.<io.smallrye.mutiny.helpers.BlockingIterable$SubscriberIterator: void <init>(java.util.Queue,int,io.smallrye.mutiny.Context)>(v2, v10, v6);
return v9;
catch java.lang.Throwable from label1 to label2 with label3;
catch java.lang.Throwable from label5 to label6 with label7;
}
private static void propagateFailure(java.lang.Throwable)
{
java.lang.Throwable v0;
java.lang.RuntimeException v2;
boolean v1;
v0 := @parameter0: java.lang.Throwable;
v1 = v0 instanceof java.lang.RuntimeException;
if v1 == 0 goto label1;
throw v0;
label1:
v2 = new java.lang.RuntimeException;
specialinvoke v2.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(v0);
throw v2;
}
}