public class io.smallrye.mutiny.helpers.MultiEmitterProcessor extends java.lang.Object implements java.util.concurrent.Flow$Processor, io.smallrye.mutiny.subscription.MultiEmitter
{
private final io.smallrye.mutiny.operators.multi.processors.UnicastProcessor processor;
private final java.util.concurrent.atomic.AtomicReference onTermination;
private final java.util.concurrent.atomic.AtomicBoolean terminated;
private final java.util.concurrent.atomic.AtomicLong requested;
private void <init>()
{
java.util.concurrent.atomic.AtomicLong v3;
io.smallrye.mutiny.operators.multi.processors.UnicastProcessor v4;
java.util.concurrent.atomic.AtomicBoolean v2;
java.util.concurrent.atomic.AtomicReference v1;
io.smallrye.mutiny.helpers.MultiEmitterProcessor v0;
v0 := @this: io.smallrye.mutiny.helpers.MultiEmitterProcessor;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v1.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.helpers.MultiEmitterProcessor: java.util.concurrent.atomic.AtomicReference onTermination> = v1;
v2 = new java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v2.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();
v0.<io.smallrye.mutiny.helpers.MultiEmitterProcessor: java.util.concurrent.atomic.AtomicBoolean terminated> = v2;
v3 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v3.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.helpers.MultiEmitterProcessor: java.util.concurrent.atomic.AtomicLong requested> = v3;
v4 = staticinvoke <io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor create()>();
v0.<io.smallrye.mutiny.helpers.MultiEmitterProcessor: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor processor> = v4;
return;
}
public static io.smallrye.mutiny.helpers.MultiEmitterProcessor create()
{
io.smallrye.mutiny.helpers.MultiEmitterProcessor v0;
v0 = new io.smallrye.mutiny.helpers.MultiEmitterProcessor;
specialinvoke v0.<io.smallrye.mutiny.helpers.MultiEmitterProcessor: void <init>()>();
return v0;
}
public io.smallrye.mutiny.subscription.MultiEmitter emit(java.lang.Object)
{
java.lang.Object v1;
io.smallrye.mutiny.helpers.MultiEmitterProcessor v0;
v0 := @this: io.smallrye.mutiny.helpers.MultiEmitterProcessor;
v1 := @parameter0: java.lang.Object;
virtualinvoke v0.<io.smallrye.mutiny.helpers.MultiEmitterProcessor: void onNext(java.lang.Object)>(v1);
return v0;
}
public void fail(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.helpers.MultiEmitterProcessor v0;
v0 := @this: io.smallrye.mutiny.helpers.MultiEmitterProcessor;
v1 := @parameter0: java.lang.Throwable;
virtualinvoke v0.<io.smallrye.mutiny.helpers.MultiEmitterProcessor: void onError(java.lang.Throwable)>(v1);
return;
}
public void complete()
{
io.smallrye.mutiny.helpers.MultiEmitterProcessor v0;
v0 := @this: io.smallrye.mutiny.helpers.MultiEmitterProcessor;
virtualinvoke v0.<io.smallrye.mutiny.helpers.MultiEmitterProcessor: void onComplete()>();
return;
}
public io.smallrye.mutiny.subscription.MultiEmitter onTermination(java.lang.Runnable)
{
java.lang.Runnable v1;
java.util.concurrent.atomic.AtomicReference v2;
io.smallrye.mutiny.helpers.MultiEmitterProcessor v0;
v0 := @this: io.smallrye.mutiny.helpers.MultiEmitterProcessor;
v1 := @parameter0: java.lang.Runnable;
v2 = v0.<io.smallrye.mutiny.helpers.MultiEmitterProcessor: java.util.concurrent.atomic.AtomicReference onTermination>;
virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(v1);
return v0;
}
public boolean isCancelled()
{
java.util.concurrent.atomic.AtomicBoolean v1;
io.smallrye.mutiny.helpers.MultiEmitterProcessor v0;
boolean v2;
v0 := @this: io.smallrye.mutiny.helpers.MultiEmitterProcessor;
v1 = v0.<io.smallrye.mutiny.helpers.MultiEmitterProcessor: java.util.concurrent.atomic.AtomicBoolean terminated>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
return v2;
}
public long requested()
{
java.util.concurrent.atomic.AtomicLong v1;
long v2;
io.smallrye.mutiny.helpers.MultiEmitterProcessor v0;
v0 := @this: io.smallrye.mutiny.helpers.MultiEmitterProcessor;
v1 = v0.<io.smallrye.mutiny.helpers.MultiEmitterProcessor: java.util.concurrent.atomic.AtomicLong requested>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: long get()>();
return v2;
}
public void subscribe(java.util.concurrent.Flow$Subscriber)
{
java.util.concurrent.Flow$Subscriber v1;
io.smallrye.mutiny.operators.multi.processors.UnicastProcessor v2;
io.smallrye.mutiny.helpers.MultiEmitterProcessor$1 v3;
io.smallrye.mutiny.helpers.MultiEmitterProcessor v0;
v0 := @this: io.smallrye.mutiny.helpers.MultiEmitterProcessor;
v1 := @parameter0: java.util.concurrent.Flow$Subscriber;
v2 = v0.<io.smallrye.mutiny.helpers.MultiEmitterProcessor: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor processor>;
v3 = new io.smallrye.mutiny.helpers.MultiEmitterProcessor$1;
specialinvoke v3.<io.smallrye.mutiny.helpers.MultiEmitterProcessor$1: void <init>(io.smallrye.mutiny.helpers.MultiEmitterProcessor,java.util.concurrent.Flow$Subscriber)>(v0, v1);
virtualinvoke v2.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: void subscribe(java.util.concurrent.Flow$Subscriber)>(v3);
return;
}
private void fireTermination()
{
java.util.concurrent.atomic.AtomicBoolean v1;
java.lang.Object v4;
java.util.concurrent.atomic.AtomicReference v3;
io.smallrye.mutiny.helpers.MultiEmitterProcessor v0;
boolean v2;
v0 := @this: io.smallrye.mutiny.helpers.MultiEmitterProcessor;
v1 = v0.<io.smallrye.mutiny.helpers.MultiEmitterProcessor: java.util.concurrent.atomic.AtomicBoolean terminated>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);
if v2 == 0 goto label1;
v3 = v0.<io.smallrye.mutiny.helpers.MultiEmitterProcessor: java.util.concurrent.atomic.AtomicReference onTermination>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(null);
if v4 == null goto label1;
interfaceinvoke v4.<java.lang.Runnable: void run()>();
label1:
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
io.smallrye.mutiny.helpers.MultiEmitterProcessor v0;
io.smallrye.mutiny.operators.multi.processors.UnicastProcessor v2;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.helpers.MultiEmitterProcessor;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = v0.<io.smallrye.mutiny.helpers.MultiEmitterProcessor: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor processor>;
virtualinvoke v2.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v1);
return;
}
public void onNext(java.lang.Object)
{
java.util.concurrent.atomic.AtomicLong v2;
io.smallrye.mutiny.operators.multi.processors.UnicastProcessor v3;
java.lang.Object v1;
io.smallrye.mutiny.helpers.MultiEmitterProcessor v0;
v0 := @this: io.smallrye.mutiny.helpers.MultiEmitterProcessor;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.helpers.MultiEmitterProcessor: java.util.concurrent.atomic.AtomicLong requested>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long subtract(java.util.concurrent.atomic.AtomicLong,long)>(v2, 1L);
v3 = v0.<io.smallrye.mutiny.helpers.MultiEmitterProcessor: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor processor>;
virtualinvoke v3.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: void onNext(java.lang.Object)>(v1);
return;
}
public void onError(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.helpers.MultiEmitterProcessor v0;
io.smallrye.mutiny.operators.multi.processors.UnicastProcessor v2;
v0 := @this: io.smallrye.mutiny.helpers.MultiEmitterProcessor;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.smallrye.mutiny.helpers.MultiEmitterProcessor: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor processor>;
virtualinvoke v2.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: void onError(java.lang.Throwable)>(v1);
return;
}
public void onComplete()
{
io.smallrye.mutiny.helpers.MultiEmitterProcessor v0;
io.smallrye.mutiny.operators.multi.processors.UnicastProcessor v1;
v0 := @this: io.smallrye.mutiny.helpers.MultiEmitterProcessor;
v1 = v0.<io.smallrye.mutiny.helpers.MultiEmitterProcessor: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor processor>;
virtualinvoke v1.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: void onComplete()>();
return;
}
public io.smallrye.mutiny.Multi toMulti()
{
io.smallrye.mutiny.groups.MultiCreate v1;
io.smallrye.mutiny.Multi v2;
io.smallrye.mutiny.helpers.MultiEmitterProcessor v0;
v0 := @this: io.smallrye.mutiny.helpers.MultiEmitterProcessor;
v1 = staticinvoke <io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiCreate createFrom()>();
v2 = virtualinvoke v1.<io.smallrye.mutiny.groups.MultiCreate: io.smallrye.mutiny.Multi publisher(java.util.concurrent.Flow$Publisher)>(v0);
return v2;
}
public io.smallrye.mutiny.Context context()
{
java.lang.UnsupportedOperationException v1;
io.smallrye.mutiny.helpers.MultiEmitterProcessor v0;
v0 := @this: io.smallrye.mutiny.helpers.MultiEmitterProcessor;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This class is used in tests");
throw v1;
}
}