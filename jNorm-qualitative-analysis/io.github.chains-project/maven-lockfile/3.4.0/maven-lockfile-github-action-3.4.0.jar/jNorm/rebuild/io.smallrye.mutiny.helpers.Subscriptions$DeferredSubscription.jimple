public class io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription extends java.lang.Object implements java.util.concurrent.Flow$Subscription
{
private final java.util.concurrent.atomic.AtomicReference subscription;
private final java.util.concurrent.atomic.AtomicLong pendingRequests;
public void <init>()
{
java.util.concurrent.atomic.AtomicLong v2;
java.util.concurrent.atomic.AtomicReference v1;
io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription v0;
v0 := @this: io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v1.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription: java.util.concurrent.atomic.AtomicReference subscription> = v1;
v2 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v2.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription: java.util.concurrent.atomic.AtomicLong pendingRequests> = v2;
return;
}
protected boolean isCancelled()
{
io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription v0;
java.lang.Object v2;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v3;
java.util.concurrent.atomic.AtomicReference v1;
boolean v4;
v0 := @this: io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription;
v1 = v0.<io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription: java.util.concurrent.atomic.AtomicReference subscription>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v3 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v2 != v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public void cancel()
{
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v3, v5, v7;
java.util.concurrent.atomic.AtomicReference v1, v4;
io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription v0;
java.lang.Object v2, v6;
v0 := @this: io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription;
v1 = v0.<io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription: java.util.concurrent.atomic.AtomicReference subscription>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v3 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v2 == v3 goto label1;
v4 = v0.<io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription: java.util.concurrent.atomic.AtomicReference subscription>;
v5 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
v6 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(v5);
if v6 == null goto label1;
v7 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v6 == v7 goto label1;
interfaceinvoke v6.<java.util.concurrent.Flow$Subscription: void cancel()>();
label1:
return;
}
public void request(long)
{
long v1, v8;
java.util.concurrent.atomic.AtomicReference v2, v5;
java.util.concurrent.atomic.AtomicLong v4, v7;
byte v9;
io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription v0;
java.lang.Object v3, v6;
v0 := @this: io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription;
v1 := @parameter0: long;
v2 = v0.<io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription: java.util.concurrent.atomic.AtomicReference subscription>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v3 == null goto label1;
interfaceinvoke v3.<java.util.concurrent.Flow$Subscription: void request(long)>(v1);
goto label2;
label1:
v4 = v0.<io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription: java.util.concurrent.atomic.AtomicLong pendingRequests>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(java.util.concurrent.atomic.AtomicLong,long)>(v4, v1);
v5 = v0.<io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription: java.util.concurrent.atomic.AtomicReference subscription>;
v6 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v6 == null goto label2;
v7 = v0.<io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription: java.util.concurrent.atomic.AtomicLong pendingRequests>;
v8 = virtualinvoke v7.<java.util.concurrent.atomic.AtomicLong: long getAndSet(long)>(0L);
v9 = v8 cmp 0L;
if v9 == 0 goto label2;
interfaceinvoke v6.<java.util.concurrent.Flow$Subscription: void request(long)>(v8);
label2:
return;
}
public boolean set(java.util.concurrent.Flow$Subscription)
{
long v8;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v12, v4;
java.util.concurrent.atomic.AtomicReference v10, v2, v5;
java.util.concurrent.atomic.AtomicLong v7;
byte v9;
io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription v0;
java.lang.Object v11, v3;
boolean v6;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "newSubscription");
v2 = v0.<io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription: java.util.concurrent.atomic.AtomicReference subscription>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v4 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v3 != v4 goto label1;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void cancel()>();
return 0;
label1:
if v3 == null goto label2;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void cancel()>();
return 0;
label2:
v5 = v0.<io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription: java.util.concurrent.atomic.AtomicReference subscription>;
v6 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, v1);
if v6 == 0 goto label4;
v7 = v0.<io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription: java.util.concurrent.atomic.AtomicLong pendingRequests>;
v8 = virtualinvoke v7.<java.util.concurrent.atomic.AtomicLong: long getAndSet(long)>(0L);
v9 = v8 cmp 0L;
if v9 == 0 goto label3;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void request(long)>(v8);
label3:
return 1;
label4:
v10 = v0.<io.smallrye.mutiny.helpers.Subscriptions$DeferredSubscription: java.util.concurrent.atomic.AtomicReference subscription>;
v11 = virtualinvoke v10.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v12 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v11 == v12 goto label5;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void cancel()>();
return 0;
label5:
return 0;
}
}