public class io.smallrye.mutiny.helpers.Subscriptions extends java.lang.Object
{
public static final java.lang.Throwable TERMINATED;
public static final io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED;
private void <init>()
{
io.smallrye.mutiny.helpers.Subscriptions v0;
v0 := @this: io.smallrye.mutiny.helpers.Subscriptions;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.lang.IllegalArgumentException getInvalidRequestException()
{
java.lang.IllegalArgumentException v0;
v0 = new java.lang.IllegalArgumentException;
specialinvoke v0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid request number, must be greater than 0");
return v0;
}
public static java.util.concurrent.Flow$Subscription empty()
{
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v0;
v0 = new io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription;
specialinvoke v0.<io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription: void <init>()>();
return v0;
}
public static void complete(java.util.concurrent.Flow$Subscriber)
{
java.util.concurrent.Flow$Subscriber v0;
java.util.concurrent.Flow$Subscription v1;
v0 := @parameter0: java.util.concurrent.Flow$Subscriber;
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v0, "subscriber");
v1 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: java.util.concurrent.Flow$Subscription empty()>();
interfaceinvoke v0.<java.util.concurrent.Flow$Subscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v1);
interfaceinvoke v0.<java.util.concurrent.Flow$Subscriber: void onComplete()>();
return;
}
public static void fail(java.util.concurrent.Flow$Subscriber, java.lang.Throwable)
{
java.lang.Throwable v1;
java.util.concurrent.Flow$Subscriber v0;
v0 := @parameter0: java.util.concurrent.Flow$Subscriber;
v1 := @parameter1: java.lang.Throwable;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void fail(java.util.concurrent.Flow$Subscriber,java.lang.Throwable,java.util.concurrent.Flow$Publisher)>(v0, v1, null);
return;
}
public static void fail(java.util.concurrent.Flow$Subscriber, java.lang.Throwable, java.util.concurrent.Flow$Publisher)
{
java.lang.Throwable v1;
java.util.concurrent.Flow$Subscriber v0;
java.util.concurrent.Flow$Publisher v2;
io.smallrye.mutiny.helpers.Subscriptions$CancelledSubscriber v3;
java.util.concurrent.Flow$Subscription v4;
v0 := @parameter0: java.util.concurrent.Flow$Subscriber;
v1 := @parameter1: java.lang.Throwable;
v2 := @parameter2: java.util.concurrent.Flow$Publisher;
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v0, "subscriber");
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "failure");
if v2 == null goto label1;
v3 = new io.smallrye.mutiny.helpers.Subscriptions$CancelledSubscriber;
specialinvoke v3.<io.smallrye.mutiny.helpers.Subscriptions$CancelledSubscriber: void <init>()>();
interfaceinvoke v2.<java.util.concurrent.Flow$Publisher: void subscribe(java.util.concurrent.Flow$Subscriber)>(v3);
label1:
v4 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: java.util.concurrent.Flow$Subscription empty()>();
interfaceinvoke v0.<java.util.concurrent.Flow$Subscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v4);
interfaceinvoke v0.<java.util.concurrent.Flow$Subscriber: void onError(java.lang.Throwable)>(v1);
return;
}
public static long add(long, long)
{
byte v3;
long v0, v1, v2;
v0 := @parameter0: long;
v1 := @parameter1: long;
v2 = v0 + v1;
v3 = v2 cmp 0L;
if v3 >= 0 goto label1;
return 9223372036854775807L;
label1:
return v2;
}
public static long add(java.util.concurrent.atomic.AtomicLong, long)
{
java.util.concurrent.atomic.AtomicLong v0;
byte v3;
long v1, v2, v4;
boolean v5;
v0 := @parameter0: java.util.concurrent.atomic.AtomicLong;
v1 := @parameter1: long;
label1:
v2 = virtualinvoke v0.<java.util.concurrent.atomic.AtomicLong: long get()>();
v3 = v2 cmp 9223372036854775807L;
if v3 != 0 goto label2;
return 9223372036854775807L;
label2:
v4 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(long,long)>(v2, v1);
v5 = virtualinvoke v0.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>(v2, v4);
if v5 == 0 goto label1;
return v2;
}
public static long subtract(java.util.concurrent.atomic.AtomicLong, long)
{
java.util.concurrent.atomic.AtomicLong v0;
byte v3, v5;
long v1, v2, v4;
boolean v6;
v0 := @parameter0: java.util.concurrent.atomic.AtomicLong;
v1 := @parameter1: long;
label1:
v2 = virtualinvoke v0.<java.util.concurrent.atomic.AtomicLong: long get()>();
v3 = v2 cmp 9223372036854775807L;
if v3 != 0 goto label2;
return 9223372036854775807L;
label2:
v4 = v2 - v1;
v5 = v4 cmp 0L;
if v5 >= 0 goto label3;
v4 = 0L;
label3:
v6 = virtualinvoke v0.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>(v2, v4);
if v6 == 0 goto label1;
return v4;
}
public static int unboundedOrLimit(int)
{
int v0, v1, v2;
v0 := @parameter0: int;
if v0 != 2147483647 goto label1;
v1 = 2147483647;
goto label2;
label1:
v2 = v0 >> 2;
v1 = v0 - v2;
label2:
return v1;
}
public static long unboundedOrRequests(int)
{
int v0;
v0 := @parameter0: int;
return v0;
}
public static boolean addFailure(java.util.concurrent.atomic.AtomicReference, java.lang.Throwable)
{
java.lang.Throwable v1, v3, v8;
java.util.concurrent.atomic.AtomicReference v0;
io.smallrye.mutiny.CompositeException v5, v6;
java.lang.Throwable[] v7;
java.lang.Object v2;
boolean v4;
v0 := @parameter0: java.util.concurrent.atomic.AtomicReference;
v1 := @parameter1: java.lang.Throwable;
v2 = virtualinvoke v0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v3 = <io.smallrye.mutiny.helpers.Subscriptions: java.lang.Throwable TERMINATED>;
if v2 != v3 goto label1;
return 0;
label1:
v4 = v2 instanceof io.smallrye.mutiny.CompositeException;
if v4 == 0 goto label2;
v5 = new io.smallrye.mutiny.CompositeException;
specialinvoke v5.<io.smallrye.mutiny.CompositeException: void <init>(io.smallrye.mutiny.CompositeException,java.lang.Throwable)>(v8, v1);
virtualinvoke v0.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(v5);
return 1;
label2:
if v2 != null goto label3;
virtualinvoke v0.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(v1);
goto label4;
label3:
v6 = new io.smallrye.mutiny.CompositeException;
v7 = newarray (java.lang.Throwable)[2];
v7[0] = v2;
v7[1] = v1;
specialinvoke v6.<io.smallrye.mutiny.CompositeException: void <init>(java.lang.Throwable[])>(v7);
virtualinvoke v0.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(v6);
label4:
return 1;
}
public static void cancel(java.util.concurrent.atomic.AtomicReference)
{
java.lang.Object v2;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v1, v3;
java.util.concurrent.atomic.AtomicReference v0;
v0 := @parameter0: java.util.concurrent.atomic.AtomicReference;
v1 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
v2 = virtualinvoke v0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(v1);
if v2 == null goto label1;
v3 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v2 == v3 goto label1;
interfaceinvoke v2.<java.util.concurrent.Flow$Subscription: void cancel()>();
label1:
return;
}
public static java.lang.Throwable markFailureAsTerminated(java.util.concurrent.atomic.AtomicReference)
{
java.lang.Throwable v1;
java.lang.Object v2;
java.util.concurrent.atomic.AtomicReference v0;
v0 := @parameter0: java.util.concurrent.atomic.AtomicReference;
v1 = <io.smallrye.mutiny.helpers.Subscriptions: java.lang.Throwable TERMINATED>;
v2 = virtualinvoke v0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(v1);
return v2;
}
public static void terminateAndPropagate(java.util.concurrent.atomic.AtomicReference, java.util.concurrent.Flow$Subscriber)
{
java.lang.Throwable v2, v3;
java.util.concurrent.Flow$Subscriber v1;
java.util.concurrent.atomic.AtomicReference v0;
v0 := @parameter0: java.util.concurrent.atomic.AtomicReference;
v1 := @parameter1: java.util.concurrent.Flow$Subscriber;
v2 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: java.lang.Throwable markFailureAsTerminated(java.util.concurrent.atomic.AtomicReference)>(v0);
if v2 != null goto label1;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscriber: void onComplete()>();
goto label2;
label1:
v3 = <io.smallrye.mutiny.helpers.Subscriptions: java.lang.Throwable TERMINATED>;
if v2 == v3 goto label2;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscriber: void onError(java.lang.Throwable)>(v2);
label2:
return;
}
public static long multiply(long, long)
{
long v0, v1, v2, v3, v4, v6;
byte v5, v7;
v0 := @parameter0: long;
v1 := @parameter1: long;
v2 = v0 * v1;
v3 = v0 | v1;
v4 = v3 >>> 31;
v5 = v4 cmp 0L;
if v5 == 0 goto label1;
v6 = v2 / v0;
v7 = v6 cmp v1;
if v7 == 0 goto label1;
return 9223372036854775807L;
label1:
return v2;
}
public static void requestIfNotNullOrAccumulate(java.util.concurrent.atomic.AtomicReference, java.util.concurrent.atomic.AtomicLong, long)
{
long v2, v6;
java.util.concurrent.atomic.AtomicReference v0;
java.util.concurrent.atomic.AtomicLong v1;
byte v4, v7;
java.lang.Object v3, v5;
v0 := @parameter0: java.util.concurrent.atomic.AtomicReference;
v1 := @parameter1: java.util.concurrent.atomic.AtomicLong;
v2 := @parameter2: long;
v3 = virtualinvoke v0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v3 == null goto label1;
interfaceinvoke v3.<java.util.concurrent.Flow$Subscription: void request(long)>(v2);
goto label2;
label1:
v4 = v2 cmp 0L;
if v4 <= 0 goto label2;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(java.util.concurrent.atomic.AtomicLong,long)>(v1, v2);
v5 = virtualinvoke v0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v5 == null goto label2;
v6 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: long getAndSet(long)>(0L);
v7 = v6 cmp 0L;
if v7 == 0 goto label2;
interfaceinvoke v5.<java.util.concurrent.Flow$Subscription: void request(long)>(v6);
label2:
return;
}
public static boolean setIfEmptyAndRequest(java.util.concurrent.atomic.AtomicReference, java.util.concurrent.atomic.AtomicLong, java.util.concurrent.Flow$Subscription)
{
long v4;
java.lang.IllegalArgumentException v7;
java.util.concurrent.atomic.AtomicReference v0;
java.util.concurrent.atomic.AtomicLong v1;
byte v5, v6;
boolean v3;
java.util.concurrent.Flow$Subscription v2;
v0 := @parameter0: java.util.concurrent.atomic.AtomicReference;
v1 := @parameter1: java.util.concurrent.atomic.AtomicLong;
v2 := @parameter2: java.util.concurrent.Flow$Subscription;
v3 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: boolean setIfEmpty(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.Flow$Subscription)>(v0, v2);
if v3 == 0 goto label3;
v4 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: long getAndSet(long)>(0L);
v5 = v4 cmp 0L;
if v5 <= 0 goto label1;
interfaceinvoke v2.<java.util.concurrent.Flow$Subscription: void request(long)>(v4);
goto label2;
label1:
v6 = v4 cmp 0L;
if v6 >= 0 goto label2;
v7 = new java.lang.IllegalArgumentException;
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid amount of request");
throw v7;
label2:
return 1;
label3:
return 0;
}
public static boolean setIfEmpty(java.util.concurrent.atomic.AtomicReference, java.util.concurrent.Flow$Subscription)
{
java.util.concurrent.atomic.AtomicReference v0;
boolean v2;
java.util.concurrent.Flow$Subscription v1;
v0 := @parameter0: java.util.concurrent.atomic.AtomicReference;
v1 := @parameter1: java.util.concurrent.Flow$Subscription;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "subscription is null");
v2 = virtualinvoke v0.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, v1);
if v2 != 0 goto label1;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void cancel()>();
return 0;
label1:
return 1;
}
public static java.lang.Throwable terminate(java.util.concurrent.atomic.AtomicReference)
{
java.lang.Throwable v1;
java.lang.Object v2;
java.util.concurrent.atomic.AtomicReference v0;
v0 := @parameter0: java.util.concurrent.atomic.AtomicReference;
v1 = <io.smallrye.mutiny.helpers.Subscriptions: java.lang.Throwable TERMINATED>;
v2 = virtualinvoke v0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(v1);
return v2;
}
public static long produced(java.util.concurrent.atomic.AtomicLong, long)
{
java.util.concurrent.atomic.AtomicLong v0;
byte v3, v4;
long v1, v2, v5;
boolean v6;
v0 := @parameter0: java.util.concurrent.atomic.AtomicLong;
v1 := @parameter1: long;
label1:
v2 = virtualinvoke v0.<java.util.concurrent.atomic.AtomicLong: long get()>();
v3 = v2 cmp 0L;
if v3 == 0 goto label2;
v4 = v2 cmp 9223372036854775807L;
if v4 != 0 goto label3;
label2:
return v2;
label3:
v5 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long subOrZero(long,long)>(v2, v1);
v6 = virtualinvoke v0.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>(v2, v5);
if v6 == 0 goto label1;
return v5;
}
public static long subOrZero(long, long)
{
byte v3;
long v0, v1, v2;
v0 := @parameter0: long;
v1 := @parameter1: long;
v2 = v0 - v1;
v3 = v2 cmp 0L;
if v3 >= 0 goto label1;
return 0L;
label1:
return v2;
}
public static java.util.concurrent.Flow$Subscription single(java.util.concurrent.Flow$Subscriber, java.lang.Object)
{
java.util.concurrent.Flow$Subscriber v0;
java.lang.Object v1;
io.smallrye.mutiny.helpers.Subscriptions$SingleItemSubscription v2;
v0 := @parameter0: java.util.concurrent.Flow$Subscriber;
v1 := @parameter1: java.lang.Object;
v2 = new io.smallrye.mutiny.helpers.Subscriptions$SingleItemSubscription;
specialinvoke v2.<io.smallrye.mutiny.helpers.Subscriptions$SingleItemSubscription: void <init>(java.util.concurrent.Flow$Subscriber,java.lang.Object)>(v0, v1);
return v2;
}
public static long producedAndHandleAlreadyCancelled(java.util.concurrent.atomic.AtomicLong, long)
{
long v1, v2, v5;
java.util.concurrent.atomic.AtomicLong v0;
byte v3, v4, v6;
boolean v7;
v0 := @parameter0: java.util.concurrent.atomic.AtomicLong;
v1 := @parameter1: long;
label1:
v2 = virtualinvoke v0.<java.util.concurrent.atomic.AtomicLong: long get()>();
v3 = v2 cmp -9223372036854775808L;
if v3 != 0 goto label2;
return -9223372036854775808L;
label2:
v4 = v2 cmp 9223372036854775807L;
if v4 != 0 goto label3;
return 9223372036854775807L;
label3:
v5 = v2 - v1;
v6 = v5 cmp 0L;
if v6 >= 0 goto label4;
v5 = 0L;
label4:
v7 = virtualinvoke v0.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>(v2, v5);
if v7 == 0 goto label1;
return v5;
}
public static long addAndHandledAlreadyCancelled(java.util.concurrent.atomic.AtomicLong, long)
{
java.util.concurrent.atomic.AtomicLong v0;
byte v3, v4;
long v1, v2, v5;
boolean v6;
v0 := @parameter0: java.util.concurrent.atomic.AtomicLong;
v1 := @parameter1: long;
label1:
v2 = virtualinvoke v0.<java.util.concurrent.atomic.AtomicLong: long get()>();
v3 = v2 cmp -9223372036854775808L;
if v3 != 0 goto label2;
return -9223372036854775808L;
label2:
v4 = v2 cmp 9223372036854775807L;
if v4 != 0 goto label3;
return 9223372036854775807L;
label3:
v5 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(long,long)>(v2, v1);
v6 = virtualinvoke v0.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>(v2, v5);
if v6 == 0 goto label1;
return v2;
}
static void <clinit>()
{
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v1;
java.lang.Exception v0;
v0 = new java.lang.Exception;
specialinvoke v0.<java.lang.Exception: void <init>(java.lang.String)>("Terminated");
<io.smallrye.mutiny.helpers.Subscriptions: java.lang.Throwable TERMINATED> = v0;
v1 = new io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription;
specialinvoke v1.<io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription: void <init>()>();
<io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED> = v1;
return;
}
}