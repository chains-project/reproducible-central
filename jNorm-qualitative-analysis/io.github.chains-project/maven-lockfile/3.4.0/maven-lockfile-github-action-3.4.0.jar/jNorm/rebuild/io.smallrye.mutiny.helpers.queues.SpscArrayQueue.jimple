public final class io.smallrye.mutiny.helpers.queues.SpscArrayQueue extends java.util.concurrent.atomic.AtomicReferenceArray implements java.util.Queue
{
private static final java.lang.Integer MAX_LOOK_AHEAD_STEP;
private final int mask;
private final java.util.concurrent.atomic.AtomicLong producerIndex;
private long producerLookAhead;
private final java.util.concurrent.atomic.AtomicLong consumerIndex;
private final int lookAheadStep;
public void <init>(int)
{
java.lang.Integer v8;
java.util.concurrent.atomic.AtomicLong v3, v4;
int v1, v10, v2, v5, v6, v7, v9;
io.smallrye.mutiny.helpers.queues.SpscArrayQueue v0;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscArrayQueue;
v1 := @parameter0: int;
v2 = staticinvoke <io.smallrye.mutiny.helpers.queues.SpscArrayQueue: int roundToPowerOfTwo(int)>(v1);
specialinvoke v0.<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>(v2);
v3 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v3.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: java.util.concurrent.atomic.AtomicLong producerIndex> = v3;
v4 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v4.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: java.util.concurrent.atomic.AtomicLong consumerIndex> = v4;
v5 = virtualinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: int length()>();
v6 = v5 - 1;
v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: int mask> = v6;
v7 = v1 / 4;
v8 = <io.smallrye.mutiny.helpers.queues.SpscArrayQueue: java.lang.Integer MAX_LOOK_AHEAD_STEP>;
v9 = virtualinvoke v8.<java.lang.Integer: int intValue()>();
v10 = staticinvoke <java.lang.Math: int min(int,int)>(v7, v9);
v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: int lookAheadStep> = v10;
return;
}
public static int roundToPowerOfTwo(int)
{
int v0, v1, v2, v3, v4;
v0 := @parameter0: int;
v1 = v0 - 1;
v2 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(v1);
v3 = 32 - v2;
v4 = 1 << v3;
return v4;
}
public boolean offer(java.lang.Object)
{
long v10, v13, v15, v5, v7;
java.lang.NullPointerException v2;
byte v8;
int v11, v3, v6, v9;
io.smallrye.mutiny.helpers.queues.SpscArrayQueue v0;
java.util.concurrent.atomic.AtomicLong v4;
java.lang.Object v1, v12, v14;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscArrayQueue;
v1 := @parameter0: java.lang.Object;
if null != v1 goto label1;
v2 = new java.lang.NullPointerException;
specialinvoke v2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null is not a valid element");
throw v2;
label1:
v3 = v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: int mask>;
v4 = v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: java.util.concurrent.atomic.AtomicLong producerIndex>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicLong: long get()>();
v6 = virtualinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: int calcElementOffset(long,int)>(v5, v3);
v7 = v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: long producerLookAhead>;
v8 = v5 cmp v7;
if v8 < 0 goto label3;
v9 = v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: int lookAheadStep>;
v10 = v5 + v9;
v11 = virtualinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: int calcElementOffset(long,int)>(v10, v3);
v12 = virtualinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: java.lang.Object lvElement(int)>(v11);
if null != v12 goto label2;
v13 = v5 + v9;
v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: long producerLookAhead> = v13;
goto label3;
label2:
v14 = virtualinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: java.lang.Object lvElement(int)>(v6);
if null == v14 goto label3;
return 0;
label3:
virtualinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: void soElement(int,java.lang.Object)>(v6, v1);
v15 = v5 + 1L;
virtualinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: void soProducerIndex(long)>(v15);
return 1;
}
public java.lang.Object poll()
{
java.util.concurrent.atomic.AtomicLong v1;
int v3;
java.lang.Object v4;
long v2, v5;
io.smallrye.mutiny.helpers.queues.SpscArrayQueue v0;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscArrayQueue;
v1 = v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: java.util.concurrent.atomic.AtomicLong consumerIndex>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: long get()>();
v3 = virtualinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: int calcElementOffset(long)>(v2);
v4 = virtualinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: java.lang.Object lvElement(int)>(v3);
if null != v4 goto label1;
return null;
label1:
v5 = v2 + 1L;
virtualinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: void soConsumerIndex(long)>(v5);
virtualinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: void soElement(int,java.lang.Object)>(v3, null);
return v4;
}
public int size()
{
long v2, v4, v6, v8;
java.util.concurrent.atomic.AtomicLong v1, v3, v5;
byte v7;
io.smallrye.mutiny.helpers.queues.SpscArrayQueue v0;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscArrayQueue;
v1 = v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: java.util.concurrent.atomic.AtomicLong consumerIndex>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: long get()>();
label1:
v3 = v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: java.util.concurrent.atomic.AtomicLong producerIndex>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicLong: long get()>();
v5 = v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: java.util.concurrent.atomic.AtomicLong consumerIndex>;
v6 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicLong: long get()>();
v7 = v2 cmp v6;
if v7 != 0 goto label2;
v8 = v4 - v2;
return v8;
label2:
v2 = v6;
goto label1;
}
public java.lang.Object peek()
{
java.util.concurrent.atomic.AtomicLong v1;
int v3, v4;
java.lang.Object v5;
long v2;
io.smallrye.mutiny.helpers.queues.SpscArrayQueue v0;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscArrayQueue;
v1 = v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: java.util.concurrent.atomic.AtomicLong consumerIndex>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: long get()>();
v3 = v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: int mask>;
v4 = v2 & v3;
v5 = virtualinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: java.lang.Object get(int)>(v4);
return v5;
}
public boolean isEmpty()
{
java.util.concurrent.atomic.AtomicLong v1, v3;
byte v5;
long v2, v4;
io.smallrye.mutiny.helpers.queues.SpscArrayQueue v0;
boolean v6;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscArrayQueue;
v1 = v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: java.util.concurrent.atomic.AtomicLong producerIndex>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: long get()>();
v3 = v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: java.util.concurrent.atomic.AtomicLong consumerIndex>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicLong: long get()>();
v5 = v2 cmp v4;
if v5 != 0 goto label1;
v6 = 1;
goto label2;
label1:
v6 = 0;
label2:
return v6;
}
void soProducerIndex(long)
{
java.util.concurrent.atomic.AtomicLong v2;
long v1;
io.smallrye.mutiny.helpers.queues.SpscArrayQueue v0;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscArrayQueue;
v1 := @parameter0: long;
v2 = v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: java.util.concurrent.atomic.AtomicLong producerIndex>;
virtualinvoke v2.<java.util.concurrent.atomic.AtomicLong: void lazySet(long)>(v1);
return;
}
void soConsumerIndex(long)
{
java.util.concurrent.atomic.AtomicLong v2;
long v1;
io.smallrye.mutiny.helpers.queues.SpscArrayQueue v0;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscArrayQueue;
v1 := @parameter0: long;
v2 = v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: java.util.concurrent.atomic.AtomicLong consumerIndex>;
virtualinvoke v2.<java.util.concurrent.atomic.AtomicLong: void lazySet(long)>(v1);
return;
}
public void clear()
{
java.lang.Object v1;
io.smallrye.mutiny.helpers.queues.SpscArrayQueue v0;
boolean v2;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscArrayQueue;
label1:
v1 = virtualinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: java.lang.Object poll()>();
if v1 != null goto label1;
v2 = virtualinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: boolean isEmpty()>();
if v2 == 0 goto label1;
return;
}
int calcElementOffset(long, int)
{
int v2, v3;
long v1;
io.smallrye.mutiny.helpers.queues.SpscArrayQueue v0;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscArrayQueue;
v1 := @parameter0: long;
v2 := @parameter1: int;
v3 = v1 & v2;
return v3;
}
int calcElementOffset(long)
{
int v2, v3;
long v1;
io.smallrye.mutiny.helpers.queues.SpscArrayQueue v0;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscArrayQueue;
v1 := @parameter0: long;
v2 = v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: int mask>;
v3 = v1 & v2;
return v3;
}
void soElement(int, java.lang.Object)
{
int v1;
java.lang.Object v2;
io.smallrye.mutiny.helpers.queues.SpscArrayQueue v0;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscArrayQueue;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.Object;
virtualinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: void lazySet(int,java.lang.Object)>(v1, v2);
return;
}
java.lang.Object lvElement(int)
{
int v1;
java.lang.Object v2;
io.smallrye.mutiny.helpers.queues.SpscArrayQueue v0;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscArrayQueue;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: java.lang.Object get(int)>(v1);
return v2;
}
public boolean contains(java.lang.Object)
{
java.lang.UnsupportedOperationException v2;
java.lang.Object v1;
io.smallrye.mutiny.helpers.queues.SpscArrayQueue v0;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscArrayQueue;
v1 := @parameter0: java.lang.Object;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public java.util.Iterator iterator()
{
java.lang.UnsupportedOperationException v1;
io.smallrye.mutiny.helpers.queues.SpscArrayQueue v0;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscArrayQueue;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>()>();
throw v1;
}
public java.lang.Object[] toArray()
{
java.lang.UnsupportedOperationException v1;
io.smallrye.mutiny.helpers.queues.SpscArrayQueue v0;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscArrayQueue;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>()>();
throw v1;
}
public java.lang.Object[] toArray(java.lang.Object[])
{
java.lang.UnsupportedOperationException v2;
io.smallrye.mutiny.helpers.queues.SpscArrayQueue v0;
java.lang.Object[] v1;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscArrayQueue;
v1 := @parameter0: java.lang.Object[];
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public boolean remove(java.lang.Object)
{
java.lang.UnsupportedOperationException v2;
java.lang.Object v1;
io.smallrye.mutiny.helpers.queues.SpscArrayQueue v0;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscArrayQueue;
v1 := @parameter0: java.lang.Object;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public boolean containsAll(java.util.Collection)
{
java.lang.UnsupportedOperationException v2;
io.smallrye.mutiny.helpers.queues.SpscArrayQueue v0;
java.util.Collection v1;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscArrayQueue;
v1 := @parameter0: java.util.Collection;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public boolean addAll(java.util.Collection)
{
java.lang.UnsupportedOperationException v2;
io.smallrye.mutiny.helpers.queues.SpscArrayQueue v0;
java.util.Collection v1;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscArrayQueue;
v1 := @parameter0: java.util.Collection;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public boolean removeAll(java.util.Collection)
{
java.lang.UnsupportedOperationException v2;
io.smallrye.mutiny.helpers.queues.SpscArrayQueue v0;
java.util.Collection v1;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscArrayQueue;
v1 := @parameter0: java.util.Collection;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public boolean retainAll(java.util.Collection)
{
java.lang.UnsupportedOperationException v2;
io.smallrye.mutiny.helpers.queues.SpscArrayQueue v0;
java.util.Collection v1;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscArrayQueue;
v1 := @parameter0: java.util.Collection;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public boolean add(java.lang.Object)
{
java.lang.UnsupportedOperationException v2;
java.lang.Object v1;
io.smallrye.mutiny.helpers.queues.SpscArrayQueue v0;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscArrayQueue;
v1 := @parameter0: java.lang.Object;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public java.lang.Object remove()
{
java.lang.UnsupportedOperationException v1;
io.smallrye.mutiny.helpers.queues.SpscArrayQueue v0;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscArrayQueue;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>()>();
throw v1;
}
public java.lang.Object element()
{
java.lang.UnsupportedOperationException v1;
io.smallrye.mutiny.helpers.queues.SpscArrayQueue v0;
v0 := @this: io.smallrye.mutiny.helpers.queues.SpscArrayQueue;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>()>();
throw v1;
}
static void <clinit>()
{
java.lang.Integer v0;
v0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4096);
<io.smallrye.mutiny.helpers.queues.SpscArrayQueue: java.lang.Integer MAX_LOOK_AHEAD_STEP> = v0;
return;
}
}