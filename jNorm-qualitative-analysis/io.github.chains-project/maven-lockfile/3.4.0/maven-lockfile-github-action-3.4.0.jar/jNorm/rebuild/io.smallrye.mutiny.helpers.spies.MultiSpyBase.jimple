abstract class io.smallrye.mutiny.helpers.spies.MultiSpyBase extends io.smallrye.mutiny.operators.multi.AbstractMultiOperator
{
private final java.util.concurrent.atomic.AtomicLong invocationCount;
protected void incrementInvocationCount()
{
java.util.concurrent.atomic.AtomicLong v1;
io.smallrye.mutiny.helpers.spies.MultiSpyBase v0;
v0 := @this: io.smallrye.mutiny.helpers.spies.MultiSpyBase;
v1 = v0.<io.smallrye.mutiny.helpers.spies.MultiSpyBase: java.util.concurrent.atomic.AtomicLong invocationCount>;
virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();
return;
}
public long invocationCount()
{
java.util.concurrent.atomic.AtomicLong v1;
long v2;
io.smallrye.mutiny.helpers.spies.MultiSpyBase v0;
v0 := @this: io.smallrye.mutiny.helpers.spies.MultiSpyBase;
v1 = v0.<io.smallrye.mutiny.helpers.spies.MultiSpyBase: java.util.concurrent.atomic.AtomicLong invocationCount>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: long get()>();
return v2;
}
public boolean invoked()
{
byte v2;
io.smallrye.mutiny.helpers.spies.MultiSpyBase v0;
long v1;
boolean v3;
v0 := @this: io.smallrye.mutiny.helpers.spies.MultiSpyBase;
v1 = virtualinvoke v0.<io.smallrye.mutiny.helpers.spies.MultiSpyBase: long invocationCount()>();
v2 = v1 cmp 0L;
if v2 <= 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public void reset()
{
java.util.concurrent.atomic.AtomicLong v1;
io.smallrye.mutiny.helpers.spies.MultiSpyBase v0;
v0 := @this: io.smallrye.mutiny.helpers.spies.MultiSpyBase;
v1 = v0.<io.smallrye.mutiny.helpers.spies.MultiSpyBase: java.util.concurrent.atomic.AtomicLong invocationCount>;
virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);
return;
}
void <init>(io.smallrye.mutiny.Multi)
{
java.util.concurrent.atomic.AtomicLong v2;
io.smallrye.mutiny.Multi v1;
io.smallrye.mutiny.helpers.spies.MultiSpyBase v0;
v0 := @this: io.smallrye.mutiny.helpers.spies.MultiSpyBase;
v1 := @parameter0: io.smallrye.mutiny.Multi;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.AbstractMultiOperator: void <init>(io.smallrye.mutiny.Multi)>(v1);
v2 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v2.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.helpers.spies.MultiSpyBase: java.util.concurrent.atomic.AtomicLong invocationCount> = v2;
return;
}
public java.lang.String toString()
{
java.util.concurrent.atomic.AtomicLong v1;
java.lang.String v2;
io.smallrye.mutiny.helpers.spies.MultiSpyBase v0;
v0 := @this: io.smallrye.mutiny.helpers.spies.MultiSpyBase;
v1 = v0.<io.smallrye.mutiny.helpers.spies.MultiSpyBase: java.util.concurrent.atomic.AtomicLong invocationCount>;
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.util.concurrent.atomic.AtomicLong)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("MultiSpyBase{invocationCount=\u0001}");
return v2;
}
}