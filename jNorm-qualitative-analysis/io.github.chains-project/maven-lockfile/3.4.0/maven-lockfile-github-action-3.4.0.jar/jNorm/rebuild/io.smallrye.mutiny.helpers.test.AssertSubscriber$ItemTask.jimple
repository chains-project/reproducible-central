class io.smallrye.mutiny.helpers.test.AssertSubscriber$ItemTask extends java.lang.Object
{
private final int expected;
private final io.smallrye.mutiny.helpers.test.AssertSubscriber subscriber;
private final long duration;
public void <init>(int, long, io.smallrye.mutiny.helpers.test.AssertSubscriber)
{
io.smallrye.mutiny.helpers.test.AssertSubscriber v3;
io.smallrye.mutiny.helpers.test.AssertSubscriber$ItemTask v0;
int v1;
long v2;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber$ItemTask;
v1 := @parameter0: int;
v2 := @parameter1: long;
v3 := @parameter2: io.smallrye.mutiny.helpers.test.AssertSubscriber;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber$ItemTask: int expected> = v1;
v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber$ItemTask: io.smallrye.mutiny.helpers.test.AssertSubscriber subscriber> = v3;
v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber$ItemTask: long duration> = v2;
return;
}
public java.util.concurrent.CompletableFuture future()
{
io.smallrye.mutiny.helpers.test.AssertSubscriber$ItemTask v0;
java.lang.Thread v5;
java.util.concurrent.CompletableFuture v1;
long v2, v3, v4;
java.lang.Runnable v6;
v0 := @this: io.smallrye.mutiny.helpers.test.AssertSubscriber$ItemTask;
v1 = new java.util.concurrent.CompletableFuture;
specialinvoke v1.<java.util.concurrent.CompletableFuture: void <init>()>();
v2 = staticinvoke <java.lang.System: long currentTimeMillis()>();
v3 = v0.<io.smallrye.mutiny.helpers.test.AssertSubscriber$ItemTask: long duration>;
v4 = v2 + v3;
v5 = new java.lang.Thread;
v6 = staticinvoke <io.smallrye.mutiny.helpers.test.AssertSubscriber$ItemTask$lambda_future_0__2805: java.lang.Runnable bootstrap$(io.smallrye.mutiny.helpers.test.AssertSubscriber$ItemTask,long,java.util.concurrent.CompletableFuture)>(v0, v4, v1);
specialinvoke v5.<java.lang.Thread: void <init>(java.lang.Runnable)>(v6);
virtualinvoke v5.<java.lang.Thread: void start()>();
return v1;
}
}