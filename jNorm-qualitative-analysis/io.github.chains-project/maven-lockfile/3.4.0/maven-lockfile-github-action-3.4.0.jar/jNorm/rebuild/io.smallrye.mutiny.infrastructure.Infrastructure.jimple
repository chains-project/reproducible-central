public class io.smallrye.mutiny.infrastructure.Infrastructure extends java.lang.Object
{
private static final java.lang.String DISABLE_CALLBACK_DECORATORS_PROP_NAME;
private static final boolean DISABLE_CALLBACK_DECORATORS;
private static java.util.concurrent.ScheduledExecutorService DEFAULT_SCHEDULER;
private static java.util.concurrent.Executor DEFAULT_EXECUTOR;
private static io.smallrye.mutiny.infrastructure.UniInterceptor[] UNI_INTERCEPTORS;
private static io.smallrye.mutiny.infrastructure.MultiInterceptor[] MULTI_INTERCEPTORS;
private static io.smallrye.mutiny.infrastructure.CallbackDecorator[] CALLBACK_DECORATORS;
private static java.util.function.UnaryOperator completableFutureWrapper;
private static java.util.function.Consumer droppedExceptionHandler;
private static java.util.function.BooleanSupplier canCallerThreadBeBlockedSupplier;
private static io.smallrye.mutiny.infrastructure.Infrastructure$OperatorLogger operatorLogger;
private static int multiOverflowDefaultBufferSize;
public static void reload()
{
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void clearInterceptors()>();
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void reloadUniInterceptors()>();
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void reloadMultiInterceptors()>();
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void reloadCallbackDecorators()>();
<io.smallrye.mutiny.infrastructure.Infrastructure: int multiOverflowDefaultBufferSize> = 128;
return;
}
public static void setDefaultExecutor()
{
java.util.concurrent.ExecutorService v0;
v0 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newCachedThreadPool()>();
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void setDefaultExecutor(java.util.concurrent.Executor)>(v0);
return;
}
public static void setDefaultExecutor(java.util.concurrent.Executor)
{
java.util.concurrent.Executor v0, v1, v2;
java.util.concurrent.ScheduledExecutorService v4, v5;
io.smallrye.mutiny.infrastructure.MutinyScheduler v7;
boolean v3, v6;
v0 := @parameter0: java.util.concurrent.Executor;
v1 = <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.Executor DEFAULT_EXECUTOR>;
if v0 != v1 goto label1;
return;
label1:
v2 = <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.Executor DEFAULT_EXECUTOR>;
v3 = v2 instanceof java.util.concurrent.ExecutorService;
if v3 == 0 goto label2;
interfaceinvoke v2.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>();
label2:
v4 = <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.ScheduledExecutorService DEFAULT_SCHEDULER>;
if v4 == null goto label3;
v5 = <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.ScheduledExecutorService DEFAULT_SCHEDULER>;
interfaceinvoke v5.<java.util.concurrent.ScheduledExecutorService: java.util.List shutdownNow()>();
label3:
<io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.Executor DEFAULT_EXECUTOR> = v0;
v6 = v0 instanceof java.util.concurrent.ScheduledExecutorService;
if v6 != 0 goto label4;
v7 = new io.smallrye.mutiny.infrastructure.MutinyScheduler;
v0 = v7;
specialinvoke v7.<io.smallrye.mutiny.infrastructure.MutinyScheduler: void <init>(java.util.concurrent.Executor)>(v7);
label4:
<io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.ScheduledExecutorService DEFAULT_SCHEDULER> = v0;
return;
}
public static java.util.concurrent.ScheduledExecutorService getDefaultWorkerPool()
{
java.util.concurrent.ScheduledExecutorService v0;
v0 = <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.ScheduledExecutorService DEFAULT_SCHEDULER>;
return v0;
}
public static java.util.concurrent.Executor getDefaultExecutor()
{
java.util.concurrent.Executor v0;
v0 = <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.Executor DEFAULT_EXECUTOR>;
return v0;
}
public static io.smallrye.mutiny.Uni onUniCreation(io.smallrye.mutiny.Uni)
{
io.smallrye.mutiny.infrastructure.UniInterceptor[] v2;
int v3, v4;
io.smallrye.mutiny.infrastructure.UniInterceptor v5;
io.smallrye.mutiny.Uni v0, v1;
v0 := @parameter0: io.smallrye.mutiny.Uni;
v1 = v0;
v2 = <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.UniInterceptor[] UNI_INTERCEPTORS>;
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v2[v4];
v1 = interfaceinvoke v5.<io.smallrye.mutiny.infrastructure.UniInterceptor: io.smallrye.mutiny.Uni onUniCreation(io.smallrye.mutiny.Uni)>(v1);
v4 = v4 + 1;
goto label1;
label2:
return v1;
}
public static io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)
{
io.smallrye.mutiny.infrastructure.MultiInterceptor[] v2;
io.smallrye.mutiny.infrastructure.MultiInterceptor v5;
int v3, v4;
io.smallrye.mutiny.Multi v0, v1;
v0 := @parameter0: io.smallrye.mutiny.Multi;
v1 = v0;
v2 = <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.MultiInterceptor[] MULTI_INTERCEPTORS>;
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v2[v4];
v1 = interfaceinvoke v5.<io.smallrye.mutiny.infrastructure.MultiInterceptor: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v1);
v4 = v4 + 1;
goto label1;
label2:
return v1;
}
public static io.smallrye.mutiny.subscription.UniSubscriber onUniSubscription(io.smallrye.mutiny.Uni, io.smallrye.mutiny.subscription.UniSubscriber)
{
io.smallrye.mutiny.infrastructure.UniInterceptor[] v3;
int v4, v5;
io.smallrye.mutiny.infrastructure.UniInterceptor v6;
io.smallrye.mutiny.subscription.UniSubscriber v1, v2;
io.smallrye.mutiny.Uni v0;
v0 := @parameter0: io.smallrye.mutiny.Uni;
v1 := @parameter1: io.smallrye.mutiny.subscription.UniSubscriber;
v2 = v1;
v3 = <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.UniInterceptor[] UNI_INTERCEPTORS>;
v4 = lengthof v3;
v5 = 0;
label1:
if v5 >= v4 goto label2;
v6 = v3[v5];
v2 = interfaceinvoke v6.<io.smallrye.mutiny.infrastructure.UniInterceptor: io.smallrye.mutiny.subscription.UniSubscriber onSubscription(io.smallrye.mutiny.Uni,io.smallrye.mutiny.subscription.UniSubscriber)>(v0, v2);
v5 = v5 + 1;
goto label1;
label2:
return v2;
}
public static java.util.concurrent.Flow$Subscriber onMultiSubscription(java.util.concurrent.Flow$Publisher, java.util.concurrent.Flow$Subscriber)
{
io.smallrye.mutiny.infrastructure.MultiInterceptor[] v3;
java.util.concurrent.Flow$Subscriber v1, v2;
io.smallrye.mutiny.infrastructure.MultiInterceptor v6;
java.util.concurrent.Flow$Publisher v0;
int v4, v5;
v0 := @parameter0: java.util.concurrent.Flow$Publisher;
v1 := @parameter1: java.util.concurrent.Flow$Subscriber;
v2 = v1;
v3 = <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.MultiInterceptor[] MULTI_INTERCEPTORS>;
v4 = lengthof v3;
v5 = 0;
label1:
if v5 >= v4 goto label2;
v6 = v3[v5];
v2 = interfaceinvoke v6.<io.smallrye.mutiny.infrastructure.MultiInterceptor: java.util.concurrent.Flow$Subscriber onSubscription(java.util.concurrent.Flow$Publisher,java.util.concurrent.Flow$Subscriber)>(v0, v2);
v5 = v5 + 1;
goto label1;
label2:
return v2;
}
public static java.util.function.Supplier decorate(java.util.function.Supplier)
{
int v3, v4;
io.smallrye.mutiny.infrastructure.CallbackDecorator v5;
io.smallrye.mutiny.infrastructure.CallbackDecorator[] v2;
java.util.function.Supplier v0, v1;
v0 := @parameter0: java.util.function.Supplier;
v1 = v0;
v2 = <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.CallbackDecorator[] CALLBACK_DECORATORS>;
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v2[v4];
v1 = interfaceinvoke v5.<io.smallrye.mutiny.infrastructure.CallbackDecorator: java.util.function.Supplier decorate(java.util.function.Supplier)>(v1);
v4 = v4 + 1;
goto label1;
label2:
return v1;
}
public static java.util.function.Consumer decorate(java.util.function.Consumer)
{
java.util.function.Consumer v0, v1;
int v3, v4;
io.smallrye.mutiny.infrastructure.CallbackDecorator v5;
io.smallrye.mutiny.infrastructure.CallbackDecorator[] v2;
v0 := @parameter0: java.util.function.Consumer;
v1 = v0;
v2 = <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.CallbackDecorator[] CALLBACK_DECORATORS>;
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v2[v4];
v1 = interfaceinvoke v5.<io.smallrye.mutiny.infrastructure.CallbackDecorator: java.util.function.Consumer decorate(java.util.function.Consumer)>(v1);
v4 = v4 + 1;
goto label1;
label2:
return v1;
}
public static java.util.function.LongConsumer decorate(java.util.function.LongConsumer)
{
int v3, v4;
io.smallrye.mutiny.infrastructure.CallbackDecorator v5;
io.smallrye.mutiny.infrastructure.CallbackDecorator[] v2;
java.util.function.LongConsumer v0, v1;
v0 := @parameter0: java.util.function.LongConsumer;
v1 = v0;
v2 = <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.CallbackDecorator[] CALLBACK_DECORATORS>;
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v2[v4];
v1 = interfaceinvoke v5.<io.smallrye.mutiny.infrastructure.CallbackDecorator: java.util.function.LongConsumer decorate(java.util.function.LongConsumer)>(v1);
v4 = v4 + 1;
goto label1;
label2:
return v1;
}
public static java.lang.Runnable decorate(java.lang.Runnable)
{
int v3, v4;
io.smallrye.mutiny.infrastructure.CallbackDecorator v5;
io.smallrye.mutiny.infrastructure.CallbackDecorator[] v2;
java.lang.Runnable v0, v1;
v0 := @parameter0: java.lang.Runnable;
v1 = v0;
v2 = <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.CallbackDecorator[] CALLBACK_DECORATORS>;
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v2[v4];
v1 = interfaceinvoke v5.<io.smallrye.mutiny.infrastructure.CallbackDecorator: java.lang.Runnable decorate(java.lang.Runnable)>(v1);
v4 = v4 + 1;
goto label1;
label2:
return v1;
}
public static java.util.concurrent.Callable decorate(java.util.concurrent.Callable)
{
int v3, v4;
io.smallrye.mutiny.infrastructure.CallbackDecorator v5;
java.util.concurrent.Callable v0, v1;
io.smallrye.mutiny.infrastructure.CallbackDecorator[] v2;
v0 := @parameter0: java.util.concurrent.Callable;
v1 = v0;
v2 = <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.CallbackDecorator[] CALLBACK_DECORATORS>;
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v2[v4];
v1 = interfaceinvoke v5.<io.smallrye.mutiny.infrastructure.CallbackDecorator: java.util.concurrent.Callable decorate(java.util.concurrent.Callable)>(v1);
v4 = v4 + 1;
goto label1;
label2:
return v1;
}
public static java.util.function.BiConsumer decorate(java.util.function.BiConsumer)
{
int v3, v4;
io.smallrye.mutiny.infrastructure.CallbackDecorator v5;
java.util.function.BiConsumer v0, v1;
io.smallrye.mutiny.infrastructure.CallbackDecorator[] v2;
v0 := @parameter0: java.util.function.BiConsumer;
v1 = v0;
v2 = <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.CallbackDecorator[] CALLBACK_DECORATORS>;
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v2[v4];
v1 = interfaceinvoke v5.<io.smallrye.mutiny.infrastructure.CallbackDecorator: java.util.function.BiConsumer decorate(java.util.function.BiConsumer)>(v1);
v4 = v4 + 1;
goto label1;
label2:
return v1;
}
public static io.smallrye.mutiny.tuples.Functions$Function3 decorate(io.smallrye.mutiny.tuples.Functions$Function3)
{
int v3, v4;
io.smallrye.mutiny.infrastructure.CallbackDecorator v5;
io.smallrye.mutiny.infrastructure.CallbackDecorator[] v2;
io.smallrye.mutiny.tuples.Functions$Function3 v0, v1;
v0 := @parameter0: io.smallrye.mutiny.tuples.Functions$Function3;
v1 = v0;
v2 = <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.CallbackDecorator[] CALLBACK_DECORATORS>;
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v2[v4];
v1 = interfaceinvoke v5.<io.smallrye.mutiny.infrastructure.CallbackDecorator: io.smallrye.mutiny.tuples.Functions$Function3 decorate(io.smallrye.mutiny.tuples.Functions$Function3)>(v1);
v4 = v4 + 1;
goto label1;
label2:
return v1;
}
public static io.smallrye.mutiny.tuples.Functions$Function4 decorate(io.smallrye.mutiny.tuples.Functions$Function4)
{
int v3, v4;
io.smallrye.mutiny.infrastructure.CallbackDecorator v5;
io.smallrye.mutiny.tuples.Functions$Function4 v0, v1;
io.smallrye.mutiny.infrastructure.CallbackDecorator[] v2;
v0 := @parameter0: io.smallrye.mutiny.tuples.Functions$Function4;
v1 = v0;
v2 = <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.CallbackDecorator[] CALLBACK_DECORATORS>;
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v2[v4];
v1 = interfaceinvoke v5.<io.smallrye.mutiny.infrastructure.CallbackDecorator: io.smallrye.mutiny.tuples.Functions$Function4 decorate(io.smallrye.mutiny.tuples.Functions$Function4)>(v1);
v4 = v4 + 1;
goto label1;
label2:
return v1;
}
public static io.smallrye.mutiny.tuples.Functions$Function5 decorate(io.smallrye.mutiny.tuples.Functions$Function5)
{
io.smallrye.mutiny.tuples.Functions$Function5 v0, v1;
int v3, v4;
io.smallrye.mutiny.infrastructure.CallbackDecorator v5;
io.smallrye.mutiny.infrastructure.CallbackDecorator[] v2;
v0 := @parameter0: io.smallrye.mutiny.tuples.Functions$Function5;
v1 = v0;
v2 = <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.CallbackDecorator[] CALLBACK_DECORATORS>;
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v2[v4];
v1 = interfaceinvoke v5.<io.smallrye.mutiny.infrastructure.CallbackDecorator: io.smallrye.mutiny.tuples.Functions$Function5 decorate(io.smallrye.mutiny.tuples.Functions$Function5)>(v1);
v4 = v4 + 1;
goto label1;
label2:
return v1;
}
public static io.smallrye.mutiny.tuples.Functions$Function6 decorate(io.smallrye.mutiny.tuples.Functions$Function6)
{
io.smallrye.mutiny.tuples.Functions$Function6 v0, v1;
int v3, v4;
io.smallrye.mutiny.infrastructure.CallbackDecorator v5;
io.smallrye.mutiny.infrastructure.CallbackDecorator[] v2;
v0 := @parameter0: io.smallrye.mutiny.tuples.Functions$Function6;
v1 = v0;
v2 = <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.CallbackDecorator[] CALLBACK_DECORATORS>;
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v2[v4];
v1 = interfaceinvoke v5.<io.smallrye.mutiny.infrastructure.CallbackDecorator: io.smallrye.mutiny.tuples.Functions$Function6 decorate(io.smallrye.mutiny.tuples.Functions$Function6)>(v1);
v4 = v4 + 1;
goto label1;
label2:
return v1;
}
public static io.smallrye.mutiny.tuples.Functions$Function7 decorate(io.smallrye.mutiny.tuples.Functions$Function7)
{
io.smallrye.mutiny.tuples.Functions$Function7 v0, v1;
int v3, v4;
io.smallrye.mutiny.infrastructure.CallbackDecorator v5;
io.smallrye.mutiny.infrastructure.CallbackDecorator[] v2;
v0 := @parameter0: io.smallrye.mutiny.tuples.Functions$Function7;
v1 = v0;
v2 = <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.CallbackDecorator[] CALLBACK_DECORATORS>;
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v2[v4];
v1 = interfaceinvoke v5.<io.smallrye.mutiny.infrastructure.CallbackDecorator: io.smallrye.mutiny.tuples.Functions$Function7 decorate(io.smallrye.mutiny.tuples.Functions$Function7)>(v1);
v4 = v4 + 1;
goto label1;
label2:
return v1;
}
public static io.smallrye.mutiny.tuples.Functions$Function8 decorate(io.smallrye.mutiny.tuples.Functions$Function8)
{
io.smallrye.mutiny.tuples.Functions$Function8 v0, v1;
int v3, v4;
io.smallrye.mutiny.infrastructure.CallbackDecorator v5;
io.smallrye.mutiny.infrastructure.CallbackDecorator[] v2;
v0 := @parameter0: io.smallrye.mutiny.tuples.Functions$Function8;
v1 = v0;
v2 = <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.CallbackDecorator[] CALLBACK_DECORATORS>;
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v2[v4];
v1 = interfaceinvoke v5.<io.smallrye.mutiny.infrastructure.CallbackDecorator: io.smallrye.mutiny.tuples.Functions$Function8 decorate(io.smallrye.mutiny.tuples.Functions$Function8)>(v1);
v4 = v4 + 1;
goto label1;
label2:
return v1;
}
public static io.smallrye.mutiny.tuples.Functions$Function9 decorate(io.smallrye.mutiny.tuples.Functions$Function9)
{
io.smallrye.mutiny.tuples.Functions$Function9 v0, v1;
int v3, v4;
io.smallrye.mutiny.infrastructure.CallbackDecorator v5;
io.smallrye.mutiny.infrastructure.CallbackDecorator[] v2;
v0 := @parameter0: io.smallrye.mutiny.tuples.Functions$Function9;
v1 = v0;
v2 = <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.CallbackDecorator[] CALLBACK_DECORATORS>;
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v2[v4];
v1 = interfaceinvoke v5.<io.smallrye.mutiny.infrastructure.CallbackDecorator: io.smallrye.mutiny.tuples.Functions$Function9 decorate(io.smallrye.mutiny.tuples.Functions$Function9)>(v1);
v4 = v4 + 1;
goto label1;
label2:
return v1;
}
public static java.util.function.Function decorate(java.util.function.Function)
{
int v3, v4;
io.smallrye.mutiny.infrastructure.CallbackDecorator v5;
io.smallrye.mutiny.infrastructure.CallbackDecorator[] v2;
java.util.function.Function v0, v1;
v0 := @parameter0: java.util.function.Function;
v1 = v0;
v2 = <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.CallbackDecorator[] CALLBACK_DECORATORS>;
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v2[v4];
v1 = interfaceinvoke v5.<io.smallrye.mutiny.infrastructure.CallbackDecorator: java.util.function.Function decorate(java.util.function.Function)>(v1);
v4 = v4 + 1;
goto label1;
label2:
return v1;
}
public static java.util.function.BiFunction decorate(java.util.function.BiFunction)
{
java.util.function.BiFunction v0, v1;
int v3, v4;
io.smallrye.mutiny.infrastructure.CallbackDecorator v5;
io.smallrye.mutiny.infrastructure.CallbackDecorator[] v2;
v0 := @parameter0: java.util.function.BiFunction;
v1 = v0;
v2 = <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.CallbackDecorator[] CALLBACK_DECORATORS>;
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v2[v4];
v1 = interfaceinvoke v5.<io.smallrye.mutiny.infrastructure.CallbackDecorator: java.util.function.BiFunction decorate(java.util.function.BiFunction)>(v1);
v4 = v4 + 1;
goto label1;
label2:
return v1;
}
public static java.util.function.BinaryOperator decorate(java.util.function.BinaryOperator)
{
int v3, v4;
io.smallrye.mutiny.infrastructure.CallbackDecorator v5;
io.smallrye.mutiny.infrastructure.CallbackDecorator[] v2;
java.util.function.BinaryOperator v0, v1;
v0 := @parameter0: java.util.function.BinaryOperator;
v1 = v0;
v2 = <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.CallbackDecorator[] CALLBACK_DECORATORS>;
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v2[v4];
v1 = interfaceinvoke v5.<io.smallrye.mutiny.infrastructure.CallbackDecorator: java.util.function.BinaryOperator decorate(java.util.function.BinaryOperator)>(v1);
v4 = v4 + 1;
goto label1;
label2:
return v1;
}
public static io.smallrye.mutiny.tuples.Functions$TriConsumer decorate(io.smallrye.mutiny.tuples.Functions$TriConsumer)
{
io.smallrye.mutiny.tuples.Functions$TriConsumer v0, v1;
int v3, v4;
io.smallrye.mutiny.infrastructure.CallbackDecorator v5;
io.smallrye.mutiny.infrastructure.CallbackDecorator[] v2;
v0 := @parameter0: io.smallrye.mutiny.tuples.Functions$TriConsumer;
v1 = v0;
v2 = <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.CallbackDecorator[] CALLBACK_DECORATORS>;
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v2[v4];
v1 = interfaceinvoke v5.<io.smallrye.mutiny.infrastructure.CallbackDecorator: io.smallrye.mutiny.tuples.Functions$TriConsumer decorate(io.smallrye.mutiny.tuples.Functions$TriConsumer)>(v1);
v4 = v4 + 1;
goto label1;
label2:
return v1;
}
public static void setCompletableFutureWrapper(java.util.function.UnaryOperator)
{
java.util.function.UnaryOperator v0;
v0 := @parameter0: java.util.function.UnaryOperator;
<io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.UnaryOperator completableFutureWrapper> = v0;
return;
}
public static java.util.concurrent.CompletableFuture wrapCompletableFuture(java.util.concurrent.CompletableFuture)
{
java.lang.Object v2;
java.util.concurrent.CompletableFuture v0;
java.util.function.UnaryOperator v1;
v0 := @parameter0: java.util.concurrent.CompletableFuture;
v1 = <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.UnaryOperator completableFutureWrapper>;
if v1 == null goto label1;
v2 = interfaceinvoke v1.<java.util.function.UnaryOperator: java.lang.Object apply(java.lang.Object)>(v0);
goto label2;
label1:
v2 = v0;
label2:
return v2;
}
public static void handleDroppedException(java.lang.Throwable)
{
java.lang.Throwable v0;
java.util.function.Consumer v1;
v0 := @parameter0: java.lang.Throwable;
v1 = <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.Consumer droppedExceptionHandler>;
interfaceinvoke v1.<java.util.function.Consumer: void accept(java.lang.Object)>(v0);
return;
}
public static void setCanCallerThreadBeBlockedSupplier(java.util.function.BooleanSupplier)
{
java.util.function.BooleanSupplier v0;
v0 := @parameter0: java.util.function.BooleanSupplier;
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v0, "supplier");
<io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.BooleanSupplier canCallerThreadBeBlockedSupplier> = v0;
return;
}
public static boolean canCallerThreadBeBlocked()
{
boolean v1;
java.util.function.BooleanSupplier v0;
v0 = <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.BooleanSupplier canCallerThreadBeBlockedSupplier>;
v1 = interfaceinvoke v0.<java.util.function.BooleanSupplier: boolean getAsBoolean()>();
return v1;
}
public static void setDroppedExceptionHandler(java.util.function.Consumer)
{
java.util.function.Consumer v0;
v0 := @parameter0: java.util.function.Consumer;
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v0, "handler");
<io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.Consumer droppedExceptionHandler> = v0;
return;
}
public static void reloadUniInterceptors()
{
java.util.List v1;
java.lang.Object[] v3;
io.smallrye.mutiny.infrastructure.UniInterceptor[] v2;
java.util.ServiceLoader v0;
v0 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class)>(class "Lio/smallrye/mutiny/infrastructure/UniInterceptor;");
v1 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.List toInterceptorList(java.util.ServiceLoader)>(v0);
v2 = <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.UniInterceptor[] UNI_INTERCEPTORS>;
v3 = interfaceinvoke v1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v2);
<io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.UniInterceptor[] UNI_INTERCEPTORS> = v3;
return;
}
public static void reloadMultiInterceptors()
{
io.smallrye.mutiny.infrastructure.MultiInterceptor[] v2;
java.util.List v1;
java.lang.Object[] v3;
java.util.ServiceLoader v0;
v0 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class)>(class "Lio/smallrye/mutiny/infrastructure/MultiInterceptor;");
v1 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.List toInterceptorList(java.util.ServiceLoader)>(v0);
v2 = <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.MultiInterceptor[] MULTI_INTERCEPTORS>;
v3 = interfaceinvoke v1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v2);
<io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.MultiInterceptor[] MULTI_INTERCEPTORS> = v3;
return;
}
public static void reloadCallbackDecorators()
{
java.util.List v2;
java.lang.Object[] v4;
java.util.ServiceLoader v1;
io.smallrye.mutiny.infrastructure.CallbackDecorator[] v3;
boolean v0;
v0 = <io.smallrye.mutiny.infrastructure.Infrastructure: boolean DISABLE_CALLBACK_DECORATORS>;
if v0 != 0 goto label1;
v1 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class)>(class "Lio/smallrye/mutiny/infrastructure/CallbackDecorator;");
v2 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.List toInterceptorList(java.util.ServiceLoader)>(v1);
v3 = <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.CallbackDecorator[] CALLBACK_DECORATORS>;
v4 = interfaceinvoke v2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v3);
<io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.CallbackDecorator[] CALLBACK_DECORATORS> = v4;
label1:
return;
}
private static java.util.List toInterceptorList(java.util.ServiceLoader)
{
java.util.Iterator v2;
java.lang.Object v4;
java.util.ServiceLoader v0;
io.smallrye.mutiny.infrastructure.Infrastructure$MutinyInterceptorComparator v5;
boolean v3;
java.util.ArrayList v1;
v0 := @parameter0: java.util.ServiceLoader;
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v2 = virtualinvoke v0.<java.util.ServiceLoader: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v4);
goto label1;
label2:
v5 = <io.smallrye.mutiny.infrastructure.Infrastructure$MutinyInterceptorComparator: io.smallrye.mutiny.infrastructure.Infrastructure$MutinyInterceptorComparator INSTANCE>;
interfaceinvoke v1.<java.util.List: void sort(java.util.Comparator)>(v5);
return v1;
}
public static void clearInterceptors()
{
io.smallrye.mutiny.infrastructure.MultiInterceptor[] v1;
io.smallrye.mutiny.infrastructure.CallbackDecorator[] v2;
io.smallrye.mutiny.infrastructure.UniInterceptor[] v0;
v0 = newarray (io.smallrye.mutiny.infrastructure.UniInterceptor)[0];
<io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.UniInterceptor[] UNI_INTERCEPTORS> = v0;
v1 = newarray (io.smallrye.mutiny.infrastructure.MultiInterceptor)[0];
<io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.MultiInterceptor[] MULTI_INTERCEPTORS> = v1;
v2 = newarray (io.smallrye.mutiny.infrastructure.CallbackDecorator)[0];
<io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.CallbackDecorator[] CALLBACK_DECORATORS> = v2;
return;
}
public static void resetDroppedExceptionHandler()
{
io.smallrye.mutiny.infrastructure.Infrastructure$PrintAndDumpThrowableConsumer v0;
v0 = <io.smallrye.mutiny.infrastructure.Infrastructure$PrintAndDumpThrowableConsumer: io.smallrye.mutiny.infrastructure.Infrastructure$PrintAndDumpThrowableConsumer INSTANCE>;
<io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.Consumer droppedExceptionHandler> = v0;
return;
}
public static void resetCanCallerThreadBeBlockedSupplier()
{
io.smallrye.mutiny.infrastructure.Infrastructure$AlwaysTrueBooleanSupplier v0;
v0 = <io.smallrye.mutiny.infrastructure.Infrastructure$AlwaysTrueBooleanSupplier: io.smallrye.mutiny.infrastructure.Infrastructure$AlwaysTrueBooleanSupplier INSTANCE>;
<io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.BooleanSupplier canCallerThreadBeBlockedSupplier> = v0;
return;
}
private void <init>()
{
io.smallrye.mutiny.infrastructure.Infrastructure v0;
v0 := @this: io.smallrye.mutiny.infrastructure.Infrastructure;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.util.function.BooleanSupplier decorate(java.util.function.BooleanSupplier)
{
int v3, v4;
io.smallrye.mutiny.infrastructure.CallbackDecorator v5;
io.smallrye.mutiny.infrastructure.CallbackDecorator[] v2;
java.util.function.BooleanSupplier v0, v1;
v0 := @parameter0: java.util.function.BooleanSupplier;
v1 = v0;
v2 = <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.CallbackDecorator[] CALLBACK_DECORATORS>;
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v2[v4];
v1 = interfaceinvoke v5.<io.smallrye.mutiny.infrastructure.CallbackDecorator: java.util.function.BooleanSupplier decorate(java.util.function.BooleanSupplier)>(v1);
v4 = v4 + 1;
goto label1;
label2:
return v1;
}
public static java.util.function.Predicate decorate(java.util.function.Predicate)
{
java.util.function.Predicate v0, v1;
int v3, v4;
io.smallrye.mutiny.infrastructure.CallbackDecorator v5;
io.smallrye.mutiny.infrastructure.CallbackDecorator[] v2;
v0 := @parameter0: java.util.function.Predicate;
v1 = v0;
v2 = <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.CallbackDecorator[] CALLBACK_DECORATORS>;
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v2[v4];
v1 = interfaceinvoke v5.<io.smallrye.mutiny.infrastructure.CallbackDecorator: java.util.function.Predicate decorate(java.util.function.Predicate)>(v1);
v4 = v4 + 1;
goto label1;
label2:
return v1;
}
public static void logFromOperator(java.lang.String, java.lang.String, java.lang.Object, java.lang.Throwable)
{
java.lang.Throwable v3;
io.smallrye.mutiny.infrastructure.Infrastructure$OperatorLogger v4;
java.lang.Object v2;
java.lang.String v0, v1;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.Object;
v3 := @parameter3: java.lang.Throwable;
v4 = <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.Infrastructure$OperatorLogger operatorLogger>;
interfaceinvoke v4.<io.smallrye.mutiny.infrastructure.Infrastructure$OperatorLogger: void log(java.lang.String,java.lang.String,java.lang.Object,java.lang.Throwable)>(v0, v1, v2, v3);
return;
}
public static void setOperatorLogger(io.smallrye.mutiny.infrastructure.Infrastructure$OperatorLogger)
{
io.smallrye.mutiny.infrastructure.Infrastructure$OperatorLogger v0;
java.lang.Object v1;
v0 := @parameter0: io.smallrye.mutiny.infrastructure.Infrastructure$OperatorLogger;
v1 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v0, "operatorLogger");
<io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.Infrastructure$OperatorLogger operatorLogger> = v1;
return;
}
public static void resetOperatorLogger()
{
io.smallrye.mutiny.infrastructure.Infrastructure$PrintOperatorEventOperatorLogger v0;
v0 = <io.smallrye.mutiny.infrastructure.Infrastructure$PrintOperatorEventOperatorLogger: io.smallrye.mutiny.infrastructure.Infrastructure$PrintOperatorEventOperatorLogger INSTANCE>;
<io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.Infrastructure$OperatorLogger operatorLogger> = v0;
return;
}
public static int getMultiOverflowDefaultBufferSize()
{
int v0;
v0 = <io.smallrye.mutiny.infrastructure.Infrastructure: int multiOverflowDefaultBufferSize>;
return v0;
}
public static void setMultiOverflowDefaultBufferSize(int)
{
int v0, v1;
v0 := @parameter0: int;
v1 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: int positive(int,java.lang.String)>(v0, "size");
<io.smallrye.mutiny.infrastructure.Infrastructure: int multiOverflowDefaultBufferSize> = v1;
return;
}
static void <clinit>()
{
java.util.Iterator v2;
java.util.concurrent.Executor v5;
io.smallrye.mutiny.infrastructure.Infrastructure$PrintOperatorEventOperatorLogger v8;
java.util.ServiceLoader v1;
java.lang.Object v4, v6;
io.smallrye.mutiny.infrastructure.Infrastructure$PrintAndDumpThrowableConsumer v7;
boolean v0, v3;
v0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("mutiny.disableCallBackDecorators");
<io.smallrye.mutiny.infrastructure.Infrastructure: boolean DISABLE_CALLBACK_DECORATORS> = v0;
v1 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class)>(class "Lio/smallrye/mutiny/infrastructure/ExecutorConfiguration;");
v2 = virtualinvoke v1.<java.util.ServiceLoader: java.util.Iterator iterator()>();
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label1;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = interfaceinvoke v4.<io.smallrye.mutiny.infrastructure.ExecutorConfiguration: java.util.concurrent.Executor getDefaultWorkerExecutor()>();
v6 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v5, "executor");
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void setDefaultExecutor(java.util.concurrent.Executor)>(v6);
goto label2;
label1:
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void setDefaultExecutor()>();
label2:
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void reload()>();
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void resetCanCallerThreadBeBlockedSupplier()>();
v7 = <io.smallrye.mutiny.infrastructure.Infrastructure$PrintAndDumpThrowableConsumer: io.smallrye.mutiny.infrastructure.Infrastructure$PrintAndDumpThrowableConsumer INSTANCE>;
<io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.Consumer droppedExceptionHandler> = v7;
v8 = <io.smallrye.mutiny.infrastructure.Infrastructure$PrintOperatorEventOperatorLogger: io.smallrye.mutiny.infrastructure.Infrastructure$PrintOperatorEventOperatorLogger INSTANCE>;
<io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.infrastructure.Infrastructure$OperatorLogger operatorLogger> = v8;
<io.smallrye.mutiny.infrastructure.Infrastructure: int multiOverflowDefaultBufferSize> = 128;
return;
}
}