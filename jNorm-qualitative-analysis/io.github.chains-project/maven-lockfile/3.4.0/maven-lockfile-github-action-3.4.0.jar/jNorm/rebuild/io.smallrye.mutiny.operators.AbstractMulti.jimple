public abstract class io.smallrye.mutiny.operators.AbstractMulti extends java.lang.Object implements io.smallrye.mutiny.Multi
{
public void <init>()
{
io.smallrye.mutiny.operators.AbstractMulti v0;
v0 := @this: io.smallrye.mutiny.operators.AbstractMulti;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)
{
io.smallrye.mutiny.operators.AbstractMulti v0;
java.util.concurrent.Flow$Subscriber v2;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.AbstractMulti;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.Flow$Subscriber onMultiSubscription(java.util.concurrent.Flow$Publisher,java.util.concurrent.Flow$Subscriber)>(v0, v1);
virtualinvoke v0.<io.smallrye.mutiny.operators.AbstractMulti: void subscribe(java.util.concurrent.Flow$Subscriber)>(v2);
return;
}
public void subscribe(java.util.concurrent.Flow$Subscriber)
{
io.smallrye.mutiny.helpers.StrictMultiSubscriber v3;
io.smallrye.mutiny.operators.AbstractMulti v0;
java.util.concurrent.Flow$Subscriber v1;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.AbstractMulti;
v1 := @parameter0: java.util.concurrent.Flow$Subscriber;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "Subscriber is `null`");
v2 = v1 instanceof io.smallrye.mutiny.subscription.MultiSubscriber;
if v2 != 0 goto label1;
v3 = new io.smallrye.mutiny.helpers.StrictMultiSubscriber;
specialinvoke v3.<io.smallrye.mutiny.helpers.StrictMultiSubscriber: void <init>(java.util.concurrent.Flow$Subscriber)>(v1);
v1 = v3;
label1:
virtualinvoke v0.<io.smallrye.mutiny.operators.AbstractMulti: void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)>(v1);
return;
}
public io.smallrye.mutiny.groups.MultiOnItem onItem()
{
io.smallrye.mutiny.operators.AbstractMulti v0;
io.smallrye.mutiny.groups.MultiOnItem v1;
v0 := @this: io.smallrye.mutiny.operators.AbstractMulti;
v1 = new io.smallrye.mutiny.groups.MultiOnItem;
specialinvoke v1.<io.smallrye.mutiny.groups.MultiOnItem: void <init>(io.smallrye.mutiny.Multi)>(v0);
return v1;
}
public io.smallrye.mutiny.groups.MultiSubscribe subscribe()
{
io.smallrye.mutiny.operators.AbstractMulti v0;
io.smallrye.mutiny.groups.MultiSubscribe v1;
v0 := @this: io.smallrye.mutiny.operators.AbstractMulti;
v1 = new io.smallrye.mutiny.groups.MultiSubscribe;
specialinvoke v1.<io.smallrye.mutiny.groups.MultiSubscribe: void <init>(io.smallrye.mutiny.operators.AbstractMulti)>(v0);
return v1;
}
public io.smallrye.mutiny.Uni toUni()
{
io.smallrye.mutiny.operators.AbstractMulti v0;
io.smallrye.mutiny.groups.UniCreate v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.smallrye.mutiny.operators.AbstractMulti;
v1 = staticinvoke <io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniCreate createFrom()>();
v2 = virtualinvoke v1.<io.smallrye.mutiny.groups.UniCreate: io.smallrye.mutiny.Uni publisher(java.util.concurrent.Flow$Publisher)>(v0);
return v2;
}
public io.smallrye.mutiny.groups.MultiOnFailure onFailure()
{
io.smallrye.mutiny.operators.AbstractMulti v0;
io.smallrye.mutiny.groups.MultiOnFailure v1;
v0 := @this: io.smallrye.mutiny.operators.AbstractMulti;
v1 = new io.smallrye.mutiny.groups.MultiOnFailure;
specialinvoke v1.<io.smallrye.mutiny.groups.MultiOnFailure: void <init>(io.smallrye.mutiny.Multi,java.util.function.Predicate)>(v0, null);
return v1;
}
public io.smallrye.mutiny.groups.MultiOnFailure onFailure(java.util.function.Predicate)
{
io.smallrye.mutiny.operators.AbstractMulti v0;
io.smallrye.mutiny.groups.MultiOnFailure v2;
java.util.function.Predicate v1;
v0 := @this: io.smallrye.mutiny.operators.AbstractMulti;
v1 := @parameter0: java.util.function.Predicate;
v2 = new io.smallrye.mutiny.groups.MultiOnFailure;
specialinvoke v2.<io.smallrye.mutiny.groups.MultiOnFailure: void <init>(io.smallrye.mutiny.Multi,java.util.function.Predicate)>(v0, v1);
return v2;
}
public io.smallrye.mutiny.groups.MultiOnFailure onFailure(java.lang.Class)
{
io.smallrye.mutiny.operators.AbstractMulti v0;
java.util.function.Predicate v3;
java.lang.Class v1;
io.smallrye.mutiny.groups.MultiOnFailure v2;
v0 := @this: io.smallrye.mutiny.operators.AbstractMulti;
v1 := @parameter0: java.lang.Class;
v2 = new io.smallrye.mutiny.groups.MultiOnFailure;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v3 = staticinvoke <io.smallrye.mutiny.operators.AbstractMulti$isInstance__2638: java.util.function.Predicate bootstrap$(java.lang.Class)>(v1);
specialinvoke v2.<io.smallrye.mutiny.groups.MultiOnFailure: void <init>(io.smallrye.mutiny.Multi,java.util.function.Predicate)>(v0, v3);
return v2;
}
public io.smallrye.mutiny.groups.MultiIfNoItem ifNoItem()
{
io.smallrye.mutiny.operators.AbstractMulti v0;
io.smallrye.mutiny.groups.MultiIfNoItem v1;
v0 := @this: io.smallrye.mutiny.operators.AbstractMulti;
v1 = new io.smallrye.mutiny.groups.MultiIfNoItem;
specialinvoke v1.<io.smallrye.mutiny.groups.MultiIfNoItem: void <init>(io.smallrye.mutiny.Multi)>(v0);
return v1;
}
public io.smallrye.mutiny.Multi cache()
{
io.smallrye.mutiny.operators.AbstractMulti v0;
io.smallrye.mutiny.Multi v2;
io.smallrye.mutiny.operators.multi.MultiCacheOp v1;
v0 := @this: io.smallrye.mutiny.operators.AbstractMulti;
v1 = new io.smallrye.mutiny.operators.multi.MultiCacheOp;
specialinvoke v1.<io.smallrye.mutiny.operators.multi.MultiCacheOp: void <init>(io.smallrye.mutiny.Multi)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v1);
return v2;
}
public io.smallrye.mutiny.Multi emitOn(java.util.concurrent.Executor)
{
io.smallrye.mutiny.operators.AbstractMulti v0;
java.util.concurrent.Executor v1;
java.lang.Object v3;
io.smallrye.mutiny.Multi v4;
io.smallrye.mutiny.operators.multi.MultiEmitOnOp v2;
v0 := @this: io.smallrye.mutiny.operators.AbstractMulti;
v1 := @parameter0: java.util.concurrent.Executor;
v2 = new io.smallrye.mutiny.operators.multi.MultiEmitOnOp;
v3 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "executor");
specialinvoke v2.<io.smallrye.mutiny.operators.multi.MultiEmitOnOp: void <init>(io.smallrye.mutiny.Multi,java.util.concurrent.Executor)>(v0, v3);
v4 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v2);
return v4;
}
public io.smallrye.mutiny.Multi runSubscriptionOn(java.util.concurrent.Executor)
{
io.smallrye.mutiny.operators.AbstractMulti v0;
java.util.concurrent.Executor v1;
io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp v2;
io.smallrye.mutiny.Multi v3;
v0 := @this: io.smallrye.mutiny.operators.AbstractMulti;
v1 := @parameter0: java.util.concurrent.Executor;
v2 = new io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp;
specialinvoke v2.<io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp: void <init>(io.smallrye.mutiny.Multi,java.util.concurrent.Executor)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v2);
return v3;
}
public io.smallrye.mutiny.groups.MultiOnCompletion onCompletion()
{
io.smallrye.mutiny.operators.AbstractMulti v0;
io.smallrye.mutiny.groups.MultiOnCompletion v1;
v0 := @this: io.smallrye.mutiny.operators.AbstractMulti;
v1 = new io.smallrye.mutiny.groups.MultiOnCompletion;
specialinvoke v1.<io.smallrye.mutiny.groups.MultiOnCompletion: void <init>(io.smallrye.mutiny.Multi)>(v0);
return v1;
}
public io.smallrye.mutiny.groups.MultiSelect select()
{
io.smallrye.mutiny.operators.AbstractMulti v0;
io.smallrye.mutiny.groups.MultiSelect v1;
v0 := @this: io.smallrye.mutiny.operators.AbstractMulti;
v1 = new io.smallrye.mutiny.groups.MultiSelect;
specialinvoke v1.<io.smallrye.mutiny.groups.MultiSelect: void <init>(io.smallrye.mutiny.Multi)>(v0);
return v1;
}
public io.smallrye.mutiny.groups.MultiSkip skip()
{
io.smallrye.mutiny.operators.AbstractMulti v0;
io.smallrye.mutiny.groups.MultiSkip v1;
v0 := @this: io.smallrye.mutiny.operators.AbstractMulti;
v1 = new io.smallrye.mutiny.groups.MultiSkip;
specialinvoke v1.<io.smallrye.mutiny.groups.MultiSkip: void <init>(io.smallrye.mutiny.Multi)>(v0);
return v1;
}
public io.smallrye.mutiny.groups.MultiOverflow onOverflow()
{
io.smallrye.mutiny.operators.AbstractMulti v0;
io.smallrye.mutiny.groups.MultiOverflow v1;
v0 := @this: io.smallrye.mutiny.operators.AbstractMulti;
v1 = new io.smallrye.mutiny.groups.MultiOverflow;
specialinvoke v1.<io.smallrye.mutiny.groups.MultiOverflow: void <init>(io.smallrye.mutiny.Multi)>(v0);
return v1;
}
public io.smallrye.mutiny.groups.MultiOnSubscribe onSubscription()
{
io.smallrye.mutiny.operators.AbstractMulti v0;
io.smallrye.mutiny.groups.MultiOnSubscribe v1;
v0 := @this: io.smallrye.mutiny.operators.AbstractMulti;
v1 = new io.smallrye.mutiny.groups.MultiOnSubscribe;
specialinvoke v1.<io.smallrye.mutiny.groups.MultiOnSubscribe: void <init>(io.smallrye.mutiny.Multi)>(v0);
return v1;
}
public io.smallrye.mutiny.groups.MultiBroadcast broadcast()
{
io.smallrye.mutiny.operators.AbstractMulti v0;
io.smallrye.mutiny.groups.MultiBroadcast v1;
v0 := @this: io.smallrye.mutiny.operators.AbstractMulti;
v1 = new io.smallrye.mutiny.groups.MultiBroadcast;
specialinvoke v1.<io.smallrye.mutiny.groups.MultiBroadcast: void <init>(io.smallrye.mutiny.Multi)>(v0);
return v1;
}
public io.smallrye.mutiny.groups.MultiConvert convert()
{
io.smallrye.mutiny.groups.MultiConvert v1;
io.smallrye.mutiny.operators.AbstractMulti v0;
v0 := @this: io.smallrye.mutiny.operators.AbstractMulti;
v1 = new io.smallrye.mutiny.groups.MultiConvert;
specialinvoke v1.<io.smallrye.mutiny.groups.MultiConvert: void <init>(io.smallrye.mutiny.Multi)>(v0);
return v1;
}
public io.smallrye.mutiny.groups.MultiOnTerminate onTermination()
{
io.smallrye.mutiny.groups.MultiOnTerminate v1;
io.smallrye.mutiny.operators.AbstractMulti v0;
v0 := @this: io.smallrye.mutiny.operators.AbstractMulti;
v1 = new io.smallrye.mutiny.groups.MultiOnTerminate;
specialinvoke v1.<io.smallrye.mutiny.groups.MultiOnTerminate: void <init>(io.smallrye.mutiny.Multi)>(v0);
return v1;
}
public io.smallrye.mutiny.groups.MultiOnCancel onCancellation()
{
io.smallrye.mutiny.operators.AbstractMulti v0;
io.smallrye.mutiny.groups.MultiOnCancel v1;
v0 := @this: io.smallrye.mutiny.operators.AbstractMulti;
v1 = new io.smallrye.mutiny.groups.MultiOnCancel;
specialinvoke v1.<io.smallrye.mutiny.groups.MultiOnCancel: void <init>(io.smallrye.mutiny.Multi)>(v0);
return v1;
}
public io.smallrye.mutiny.groups.MultiOnRequest onRequest()
{
io.smallrye.mutiny.groups.MultiOnRequest v1;
io.smallrye.mutiny.operators.AbstractMulti v0;
v0 := @this: io.smallrye.mutiny.operators.AbstractMulti;
v1 = new io.smallrye.mutiny.groups.MultiOnRequest;
specialinvoke v1.<io.smallrye.mutiny.groups.MultiOnRequest: void <init>(io.smallrye.mutiny.Multi)>(v0);
return v1;
}
public io.smallrye.mutiny.groups.MultiCollect collect()
{
io.smallrye.mutiny.operators.AbstractMulti v0;
io.smallrye.mutiny.groups.MultiCollect v1;
v0 := @this: io.smallrye.mutiny.operators.AbstractMulti;
v1 = new io.smallrye.mutiny.groups.MultiCollect;
specialinvoke v1.<io.smallrye.mutiny.groups.MultiCollect: void <init>(io.smallrye.mutiny.Multi)>(v0);
return v1;
}
public io.smallrye.mutiny.groups.MultiGroup group()
{
io.smallrye.mutiny.groups.MultiGroup v1;
io.smallrye.mutiny.operators.AbstractMulti v0;
v0 := @this: io.smallrye.mutiny.operators.AbstractMulti;
v1 = new io.smallrye.mutiny.groups.MultiGroup;
specialinvoke v1.<io.smallrye.mutiny.groups.MultiGroup: void <init>(io.smallrye.mutiny.Multi)>(v0);
return v1;
}
public io.smallrye.mutiny.Multi toHotStream()
{
io.smallrye.mutiny.operators.AbstractMulti v0;
io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor v1;
v0 := @this: io.smallrye.mutiny.operators.AbstractMulti;
v1 = staticinvoke <io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor: io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor create()>();
virtualinvoke v0.<io.smallrye.mutiny.operators.AbstractMulti: void subscribe(java.util.concurrent.Flow$Subscriber)>(v1);
return v1;
}
public io.smallrye.mutiny.Multi log(java.lang.String)
{
io.smallrye.mutiny.operators.AbstractMulti v0;
java.lang.String v1;
io.smallrye.mutiny.Multi v3;
io.smallrye.mutiny.operators.multi.MultiLogger v2;
v0 := @this: io.smallrye.mutiny.operators.AbstractMulti;
v1 := @parameter0: java.lang.String;
v2 = new io.smallrye.mutiny.operators.multi.MultiLogger;
specialinvoke v2.<io.smallrye.mutiny.operators.multi.MultiLogger: void <init>(io.smallrye.mutiny.Multi,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v2);
return v3;
}
public io.smallrye.mutiny.Multi log()
{
io.smallrye.mutiny.operators.AbstractMulti v0;
java.lang.Class v1;
java.lang.String v2, v3;
io.smallrye.mutiny.Multi v4;
v0 := @this: io.smallrye.mutiny.operators.AbstractMulti;
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v2 = virtualinvoke v1.<java.lang.Class: java.lang.String getSimpleName()>();
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Multi.\u0001");
v4 = virtualinvoke v0.<io.smallrye.mutiny.operators.AbstractMulti: io.smallrye.mutiny.Multi log(java.lang.String)>(v3);
return v4;
}
public io.smallrye.mutiny.Multi withContext(java.util.function.BiFunction)
{
io.smallrye.mutiny.operators.AbstractMulti v0;
io.smallrye.mutiny.operators.multi.MultiWithContext v2;
java.util.function.BiFunction v1;
java.lang.Object v3;
io.smallrye.mutiny.Multi v4;
v0 := @this: io.smallrye.mutiny.operators.AbstractMulti;
v1 := @parameter0: java.util.function.BiFunction;
v2 = new io.smallrye.mutiny.operators.multi.MultiWithContext;
v3 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "builder");
specialinvoke v2.<io.smallrye.mutiny.operators.multi.MultiWithContext: void <init>(io.smallrye.mutiny.Multi,java.util.function.BiFunction)>(v0, v3);
v4 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v2);
return v4;
}
public io.smallrye.mutiny.groups.MultiDemandPacing paceDemand()
{
io.smallrye.mutiny.operators.AbstractMulti v0;
io.smallrye.mutiny.groups.MultiDemandPacing v1;
v0 := @this: io.smallrye.mutiny.operators.AbstractMulti;
v1 = new io.smallrye.mutiny.groups.MultiDemandPacing;
specialinvoke v1.<io.smallrye.mutiny.groups.MultiDemandPacing: void <init>(io.smallrye.mutiny.operators.AbstractMulti)>(v0);
return v1;
}
public io.smallrye.mutiny.Multi capDemandsUsing(java.util.function.LongFunction)
{
io.smallrye.mutiny.operators.AbstractMulti v0;
java.util.function.LongFunction v1;
java.lang.Object v3;
io.smallrye.mutiny.operators.multi.MultiDemandCapping v2;
io.smallrye.mutiny.Multi v4;
v0 := @this: io.smallrye.mutiny.operators.AbstractMulti;
v1 := @parameter0: java.util.function.LongFunction;
v2 = new io.smallrye.mutiny.operators.multi.MultiDemandCapping;
v3 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "function");
specialinvoke v2.<io.smallrye.mutiny.operators.multi.MultiDemandCapping: void <init>(io.smallrye.mutiny.Multi,java.util.function.LongFunction)>(v0, v3);
v4 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v2);
return v4;
}
}