final class io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor extends io.smallrye.mutiny.operators.multi.MultiOperatorProcessor
{
private final java.util.function.Supplier supplier;
private final int size;
private final int skip;
long index;
long produced;
private final java.util.concurrent.atomic.AtomicBoolean firstRequest;
private final java.util.concurrent.atomic.AtomicLong requested;
private final java.util.ArrayDeque queue;
void <init>(io.smallrye.mutiny.subscription.MultiSubscriber, int, int, java.util.function.Supplier)
{
java.util.concurrent.atomic.AtomicBoolean v5;
java.util.function.Supplier v4;
io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor v0;
java.util.concurrent.atomic.AtomicLong v6;
int v2, v3;
java.util.ArrayDeque v7;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: java.util.function.Supplier;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v1);
v5 = new java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v5.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: java.util.concurrent.atomic.AtomicBoolean firstRequest> = v5;
v6 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v6.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: java.util.concurrent.atomic.AtomicLong requested> = v6;
v7 = new java.util.ArrayDeque;
specialinvoke v7.<java.util.ArrayDeque: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: java.util.ArrayDeque queue> = v7;
v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: int size> = v2;
v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: int skip> = v3;
v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: java.util.function.Supplier supplier> = v4;
return;
}
public void request(long)
{
java.util.concurrent.atomic.AtomicBoolean v7;
long v1, v10, v11, v13, v15;
java.util.function.BooleanSupplier v5;
io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor v0;
int v12, v14, v9;
io.smallrye.mutiny.subscription.MultiSubscriber v2;
boolean v6, v8;
java.util.concurrent.atomic.AtomicLong v4;
java.util.ArrayDeque v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor;
v1 := @parameter0: long;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: java.util.ArrayDeque queue>;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: java.util.concurrent.atomic.AtomicLong requested>;
v5 = staticinvoke <io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor$isCancelled__2648: java.util.function.BooleanSupplier bootstrap$(io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor)>(v0);
v6 = staticinvoke <io.smallrye.mutiny.helpers.queues.DrainUtils: boolean postCompleteRequest(long,java.util.concurrent.Flow$Subscriber,java.util.Queue,java.util.concurrent.atomic.AtomicLong,java.util.function.BooleanSupplier)>(v1, v2, v3, v4, v5);
if v6 == 0 goto label1;
return;
label1:
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: java.util.concurrent.atomic.AtomicBoolean firstRequest>;
v8 = virtualinvoke v7.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);
if v8 == 0 goto label2;
v9 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: int skip>;
v10 = v1 - 1L;
v11 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long multiply(long,long)>(v9, v10);
v12 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: int size>;
v13 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(long,long)>(v12, v11);
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void request(long)>(v13);
goto label3;
label2:
v14 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: int skip>;
v15 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long multiply(long,long)>(v14, v1);
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void request(long)>(v15);
label3:
return;
}
public void onItem(java.lang.Object)
{
long v17, v18, v23, v3, v5;
java.util.function.Supplier v7;
io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor v0;
byte v6;
int v12, v13, v14, v4;
io.smallrye.mutiny.subscription.MultiSubscriber v16;
boolean v2, v21;
java.util.Iterator v20;
java.lang.Object v1, v11, v22, v8;
java.util.ArrayDeque v10, v15, v19, v9;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: boolean isDone()>();
if v2 == 0 goto label1;
return;
label1:
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: long index>;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: int skip>;
v5 = v3 % v4;
v6 = v5 cmp 0L;
if v6 != 0 goto label2;
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: java.util.function.Supplier supplier>;
v8 = interfaceinvoke v7.<java.util.function.Supplier: java.lang.Object get()>();
v9 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: java.util.ArrayDeque queue>;
virtualinvoke v9.<java.util.ArrayDeque: boolean offer(java.lang.Object)>(v8);
label2:
v10 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: java.util.ArrayDeque queue>;
v11 = virtualinvoke v10.<java.util.ArrayDeque: java.lang.Object peek()>();
if v11 == null goto label3;
v12 = interfaceinvoke v11.<java.util.List: int size()>();
v13 = v12 + 1;
v14 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: int size>;
if v13 != v14 goto label3;
v15 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: java.util.ArrayDeque queue>;
virtualinvoke v15.<java.util.ArrayDeque: java.lang.Object poll()>();
interfaceinvoke v11.<java.util.List: boolean add(java.lang.Object)>(v1);
v16 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v16.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v11);
v17 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: long produced>;
v18 = v17 + 1L;
v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: long produced> = v18;
label3:
v19 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: java.util.ArrayDeque queue>;
v20 = virtualinvoke v19.<java.util.ArrayDeque: java.util.Iterator iterator()>();
label4:
v21 = interfaceinvoke v20.<java.util.Iterator: boolean hasNext()>();
if v21 == 0 goto label5;
v22 = interfaceinvoke v20.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v22.<java.util.List: boolean add(java.lang.Object)>(v1);
goto label4;
label5:
v23 = v3 + 1L;
v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: long index> = v23;
return;
}
public void onFailure(java.lang.Throwable)
{
io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor v0;
java.lang.Throwable v1;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v2, v4;
io.smallrye.mutiny.subscription.MultiSubscriber v5;
java.util.concurrent.Flow$Subscription v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor;
v1 := @parameter0: java.lang.Throwable;
v2 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
v3 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: java.util.concurrent.Flow$Subscription getAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription)>(v2);
v4 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v3 == v4 goto label1;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v5.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v1);
goto label2;
label1:
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v1);
label2:
return;
}
public void onCompletion()
{
long v4;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v1, v3;
java.util.function.BooleanSupplier v10;
io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor v0;
java.util.concurrent.atomic.AtomicLong v6, v9;
byte v5;
java.util.ArrayDeque v8;
io.smallrye.mutiny.subscription.MultiSubscriber v7;
java.util.concurrent.Flow$Subscription v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor;
v1 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: java.util.concurrent.Flow$Subscription getAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription)>(v1);
v3 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v2 == v3 goto label2;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: long produced>;
v5 = v4 cmp 0L;
if v5 == 0 goto label1;
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: java.util.concurrent.atomic.AtomicLong requested>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long produced(java.util.concurrent.atomic.AtomicLong,long)>(v6, v4);
label1:
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v8 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: java.util.ArrayDeque queue>;
v9 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor: java.util.concurrent.atomic.AtomicLong requested>;
v10 = staticinvoke <io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor$isCancelled__2649: java.util.function.BooleanSupplier bootstrap$(io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferOverlappingProcessor)>(v0);
staticinvoke <io.smallrye.mutiny.helpers.queues.DrainUtils: void postComplete(java.util.concurrent.Flow$Subscriber,java.util.Queue,java.util.concurrent.atomic.AtomicLong,java.util.function.BooleanSupplier)>(v7, v8, v9, v10);
label2:
return;
}
}