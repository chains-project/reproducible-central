public class io.smallrye.mutiny.operators.multi.MultiCombine extends java.lang.Object
{
private void <init>()
{
io.smallrye.mutiny.operators.multi.MultiCombine v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiCombine;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static io.smallrye.mutiny.Multi merge(java.util.List, boolean, int, int)
{
java.util.function.Function v14, v22;
io.smallrye.mutiny.Multi v11, v18, v19, v25, v26, v7;
java.lang.Iterable v4;
int v2, v3, v8;
boolean v1, v5;
io.smallrye.mutiny.groups.MultiFlatten v15, v16, v17, v23, v24;
java.util.List v0;
io.smallrye.mutiny.groups.MultiOnItem v13, v21;
io.smallrye.mutiny.groups.MultiCreate v6, v9;
java.lang.Object v10;
io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti v12, v20;
v0 := @parameter0: java.util.List;
v1 := @parameter1: boolean;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Iterable doesNotContainNull(java.lang.Iterable,java.lang.String)>(v0, "participants");
v5 = interfaceinvoke v0.<java.util.List: boolean isEmpty()>();
if v5 == 0 goto label1;
v6 = staticinvoke <io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiCreate createFrom()>();
v7 = virtualinvoke v6.<io.smallrye.mutiny.groups.MultiCreate: io.smallrye.mutiny.Multi empty()>();
return v7;
label1:
v8 = interfaceinvoke v0.<java.util.List: int size()>();
if v8 != 1 goto label2;
v9 = staticinvoke <io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiCreate createFrom()>();
v10 = interfaceinvoke v0.<java.util.List: java.lang.Object get(int)>(0);
v11 = virtualinvoke v9.<io.smallrye.mutiny.groups.MultiCreate: io.smallrye.mutiny.Multi publisher(java.util.concurrent.Flow$Publisher)>(v10);
return v11;
label2:
if v1 == 0 goto label3;
v12 = new io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti;
specialinvoke v12.<io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti: void <init>(java.util.Collection)>(v4);
v13 = virtualinvoke v12.<io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti: io.smallrye.mutiny.groups.MultiOnItem onItem()>();
v14 = staticinvoke <java.util.function.Function: java.util.function.Function identity()>();
v15 = virtualinvoke v13.<io.smallrye.mutiny.groups.MultiOnItem: io.smallrye.mutiny.groups.MultiFlatten transformToMulti(java.util.function.Function)>(v14);
v16 = virtualinvoke v15.<io.smallrye.mutiny.groups.MultiFlatten: io.smallrye.mutiny.groups.MultiFlatten collectFailures()>();
v17 = virtualinvoke v16.<io.smallrye.mutiny.groups.MultiFlatten: io.smallrye.mutiny.groups.MultiFlatten withRequests(int)>(v2);
v18 = virtualinvoke v17.<io.smallrye.mutiny.groups.MultiFlatten: io.smallrye.mutiny.Multi merge(int)>(v3);
v19 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v18);
return v19;
label3:
v20 = new io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti;
specialinvoke v20.<io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti: void <init>(java.util.Collection)>(v4);
v21 = virtualinvoke v20.<io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti: io.smallrye.mutiny.groups.MultiOnItem onItem()>();
v22 = staticinvoke <java.util.function.Function: java.util.function.Function identity()>();
v23 = virtualinvoke v21.<io.smallrye.mutiny.groups.MultiOnItem: io.smallrye.mutiny.groups.MultiFlatten transformToMulti(java.util.function.Function)>(v22);
v24 = virtualinvoke v23.<io.smallrye.mutiny.groups.MultiFlatten: io.smallrye.mutiny.groups.MultiFlatten withRequests(int)>(v2);
v25 = virtualinvoke v24.<io.smallrye.mutiny.groups.MultiFlatten: io.smallrye.mutiny.Multi merge(int)>(v3);
v26 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v25);
return v26;
}
}