public final class io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber extends java.lang.Object implements io.smallrye.mutiny.subscription.MultiSubscriber, java.util.concurrent.Flow$Subscription, io.smallrye.mutiny.subscription.ContextSupport
{
private static final int STATE_NEW;
private static final int STATE_READY;
private static final int STATE_EMITTING;
private static final int STATE_OUTER_TERMINATED;
private static final int STATE_TERMINATED;
private static final int STATE_CANCELLED;
final java.util.concurrent.atomic.AtomicInteger state;
final io.smallrye.mutiny.subscription.MultiSubscriber downstream;
final java.util.function.Function mapper;
private final boolean delayError;
final java.util.concurrent.atomic.AtomicReference failures;
volatile java.util.concurrent.Flow$Subscription upstream;
private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater UPSTREAM_UPDATER;
final io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapInner inner;
void <init>(io.smallrye.mutiny.subscription.MultiSubscriber, java.util.function.Function, boolean)
{
java.util.concurrent.atomic.AtomicInteger v4;
io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber v0;
io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapInner v6;
java.util.concurrent.atomic.AtomicReference v5;
java.util.function.Function v2;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
boolean v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 := @parameter1: java.util.function.Function;
v3 := @parameter2: boolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
v4 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v4.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);
v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: java.util.concurrent.atomic.AtomicInteger state> = v4;
v5 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v5.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: java.util.concurrent.atomic.AtomicReference failures> = v5;
v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: java.util.concurrent.Flow$Subscription upstream> = null;
v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream> = v1;
v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: java.util.function.Function mapper> = v2;
v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: boolean delayError> = v3;
v6 = new io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapInner;
specialinvoke v6.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapInner: void <init>(io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber)>(v0);
v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapInner inner> = v6;
return;
}
public void request(long)
{
long v1, v9;
io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber v0;
java.lang.IllegalArgumentException v14;
byte v10, v2;
java.util.concurrent.atomic.AtomicInteger v3, v6;
int v7;
io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapInner v12, v8;
io.smallrye.mutiny.subscription.MultiSubscriber v13;
boolean v4;
java.util.concurrent.Flow$Subscription v11, v5;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 <= 0 goto label3;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: java.util.concurrent.atomic.AtomicInteger state>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(0, 1);
if v4 == 0 goto label1;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: java.util.concurrent.Flow$Subscription upstream>;
interfaceinvoke v5.<java.util.concurrent.Flow$Subscription: void request(long)>(1L);
goto label2;
label1:
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: java.util.concurrent.atomic.AtomicInteger state>;
v7 = virtualinvoke v6.<java.util.concurrent.atomic.AtomicInteger: int get()>();
if v7 != 1 goto label2;
v8 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapInner inner>;
v9 = virtualinvoke v8.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapInner: long requested()>();
v10 = v9 cmp 0L;
if v10 != 0 goto label2;
v11 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: java.util.concurrent.Flow$Subscription upstream>;
interfaceinvoke v11.<java.util.concurrent.Flow$Subscription: void request(long)>(1L);
label2:
v12 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapInner inner>;
virtualinvoke v12.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapInner: void request(long)>(v1);
goto label4;
label3:
v13 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v14 = new java.lang.IllegalArgumentException;
specialinvoke v14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid requests, must be greater than 0");
interfaceinvoke v13.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v14);
label4:
return;
}
public void cancel()
{
io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber v0;
java.util.concurrent.atomic.AtomicInteger v1, v3;
int v2;
io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapInner v5, v6;
boolean v4;
java.util.concurrent.Flow$Subscription v7;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber;
label1:
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: java.util.concurrent.atomic.AtomicInteger state>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int get()>();
if v2 != 5 goto label2;
return;
label2:
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: java.util.concurrent.atomic.AtomicInteger state>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(v2, 5);
if v4 == 0 goto label1;
if v2 != 3 goto label3;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapInner inner>;
virtualinvoke v5.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapInner: void cancel()>();
goto label4;
label3:
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapInner inner>;
virtualinvoke v6.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapInner: void cancel()>();
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: java.util.concurrent.Flow$Subscription upstream>;
interfaceinvoke v7.<java.util.concurrent.Flow$Subscription: void cancel()>();
label4:
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v2;
io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber v0;
io.smallrye.mutiny.subscription.MultiSubscriber v4;
boolean v3;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = <io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: java.util.concurrent.atomic.AtomicReferenceFieldUpdater UPSTREAM_UPDATER>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(v0, null, v1);
if v3 == 0 goto label1;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v4.<io.smallrye.mutiny.subscription.MultiSubscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v0);
label1:
return;
}
public void onItem(java.lang.Object)
{
java.lang.Throwable v8;
io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber v0;
java.util.function.Function v4;
java.lang.NullPointerException v6;
java.util.concurrent.atomic.AtomicInteger v2;
java.lang.Object v1, v5;
io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapInner v7;
boolean v10, v3;
java.util.concurrent.Flow$Subscription v9;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: java.util.concurrent.atomic.AtomicInteger state>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(1, 2);
if v3 != 0 goto label1;
return;
label1:
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: java.util.function.Function mapper>;
v5 = interfaceinvoke v4.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v1);
if v5 != null goto label2;
v6 = new java.lang.NullPointerException;
specialinvoke v6.<java.lang.NullPointerException: void <init>(java.lang.String)>("The mapper returned `null`");
throw v6;
label2:
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapInner inner>;
interfaceinvoke v5.<java.util.concurrent.Flow$Publisher: void subscribe(java.util.concurrent.Flow$Subscriber)>(v7);
label3:
goto label5;
label4:
v8 := @caughtexception;
v9 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: java.util.concurrent.Flow$Subscription upstream>;
v10 = specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: boolean postponeFailure(java.lang.Throwable,java.util.concurrent.Flow$Subscription)>(v8, v9);
if v10 == 0 goto label5;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: void innerComplete(long)>(0L);
label5:
return;
catch java.lang.Throwable from label1 to label3 with label4;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber v0;
io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapInner v2;
boolean v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapInner inner>;
v3 = specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: boolean postponeFailure(java.lang.Throwable,java.util.concurrent.Flow$Subscription)>(v1, v2);
if v3 == 0 goto label1;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: void onCompletion()>();
label1:
return;
}
public void onCompletion()
{
java.util.concurrent.atomic.AtomicInteger v1, v3, v5;
int v2;
io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber v0;
boolean v4, v6;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber;
label1:
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: java.util.concurrent.atomic.AtomicInteger state>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int get()>();
if v2 == 0 goto label2;
if v2 != 1 goto label3;
label2:
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: java.util.concurrent.atomic.AtomicInteger state>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(v2, 4);
if v4 == 0 goto label1;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: void terminateDownstream()>();
return;
label3:
if v2 != 2 goto label4;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: java.util.concurrent.atomic.AtomicInteger state>;
v6 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(v2, 3);
if v6 == 0 goto label1;
return;
label4:
return;
}
public synchronized void tryEmit(java.lang.Object)
{
java.util.concurrent.atomic.AtomicInteger v2;
int v3;
java.lang.Object v1;
io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber v0;
io.smallrye.mutiny.subscription.MultiSubscriber v4;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: java.util.concurrent.atomic.AtomicInteger state>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicInteger: int get()>();
lookupswitch(v3)
{
case 2: goto label1;
case 3: goto label1;
default: goto label2;
};
label1:
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v4.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v1);
label2:
return;
}
public void innerComplete(long)
{
long v1, v7;
io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber v0;
byte v8, v9;
java.util.concurrent.atomic.AtomicInteger v11, v2, v4;
int v3;
io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapInner v6;
boolean v12, v5;
java.util.concurrent.Flow$Subscription v10;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber;
v1 := @parameter0: long;
label1:
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: java.util.concurrent.atomic.AtomicInteger state>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicInteger: int get()>();
if v3 != 2 goto label4;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: java.util.concurrent.atomic.AtomicInteger state>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(v3, 1);
if v5 == 0 goto label1;
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapInner inner>;
v7 = virtualinvoke v6.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapInner: long requested()>();
v8 = v7 cmp 0L;
if v8 != 0 goto label2;
v9 = v1 cmp 0L;
if v9 != 0 goto label3;
label2:
v10 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: java.util.concurrent.Flow$Subscription upstream>;
interfaceinvoke v10.<java.util.concurrent.Flow$Subscription: void request(long)>(1L);
label3:
return;
label4:
if v3 != 3 goto label5;
v11 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: java.util.concurrent.atomic.AtomicInteger state>;
v12 = virtualinvoke v11.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(v3, 4);
if v12 == 0 goto label1;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: void terminateDownstream()>();
return;
label5:
return;
}
public void innerFailure(java.lang.Throwable, long)
{
java.lang.Throwable v1;
long v2;
io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber v0;
boolean v4;
java.util.concurrent.Flow$Subscription v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber;
v1 := @parameter0: java.lang.Throwable;
v2 := @parameter1: long;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: java.util.concurrent.Flow$Subscription upstream>;
v4 = specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: boolean postponeFailure(java.lang.Throwable,java.util.concurrent.Flow$Subscription)>(v1, v3);
if v4 == 0 goto label1;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: void innerComplete(long)>(v2);
label1:
return;
}
private boolean postponeFailure(java.lang.Throwable, java.util.concurrent.Flow$Subscription)
{
java.lang.Throwable v1, v12;
io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber v0;
java.util.concurrent.atomic.AtomicReference v10, v3;
java.util.concurrent.atomic.AtomicInteger v5, v7;
int v6;
java.lang.Object v11;
io.smallrye.mutiny.subscription.MultiSubscriber v9;
boolean v4, v8;
java.util.concurrent.Flow$Subscription v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber;
v1 := @parameter0: java.lang.Throwable;
v2 := @parameter1: java.util.concurrent.Flow$Subscription;
if v1 != null goto label1;
return 1;
label1:
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: java.util.concurrent.atomic.AtomicReference failures>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: boolean addFailure(java.util.concurrent.atomic.AtomicReference,java.lang.Throwable)>(v3, v1);
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: boolean delayError>;
if v4 == 0 goto label2;
return 1;
label2:
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: java.util.concurrent.atomic.AtomicInteger state>;
v6 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicInteger: int get()>();
if v6 == 5 goto label3;
if v6 != 4 goto label4;
label3:
return 0;
label4:
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: java.util.concurrent.atomic.AtomicInteger state>;
v8 = virtualinvoke v7.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(v6, 4);
if v8 == 0 goto label2;
interfaceinvoke v2.<java.util.concurrent.Flow$Subscription: void cancel()>();
entermonitor v0;
label5:
v9 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v10 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: java.util.concurrent.atomic.AtomicReference failures>;
v11 = virtualinvoke v10.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
interfaceinvoke v9.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v11);
exitmonitor v0;
label6:
goto label8;
label7:
v12 := @caughtexception;
exitmonitor v0;
throw v12;
label8:
return 0;
catch java.lang.Throwable from label5 to label6 with label7;
}
private void terminateDownstream()
{
java.lang.Object v2;
io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber v0;
java.util.concurrent.atomic.AtomicReference v1;
io.smallrye.mutiny.subscription.MultiSubscriber v3, v4;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: java.util.concurrent.atomic.AtomicReference failures>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v2 == null goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v3.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v2);
return;
label1:
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v4.<io.smallrye.mutiny.subscription.MultiSubscriber: void onCompletion()>();
return;
}
public io.smallrye.mutiny.Context context()
{
io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber v0;
io.smallrye.mutiny.Context v4, v5;
io.smallrye.mutiny.subscription.MultiSubscriber v1, v3;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v2 = v1 instanceof io.smallrye.mutiny.subscription.ContextSupport;
if v2 == 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v4 = interfaceinvoke v3.<io.smallrye.mutiny.subscription.ContextSupport: io.smallrye.mutiny.Context context()>();
return v4;
label1:
v5 = staticinvoke <io.smallrye.mutiny.Context: io.smallrye.mutiny.Context empty()>();
return v5;
}
static void <clinit>()
{
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v0;
v0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lio/smallrye/mutiny/operators/multi/MultiConcatMapOp$ConcatMapMainSubscriber;", class "Ljava/util/concurrent/Flow$Subscription;", "upstream");
<io.smallrye.mutiny.operators.multi.MultiConcatMapOp$ConcatMapMainSubscriber: java.util.concurrent.atomic.AtomicReferenceFieldUpdater UPSTREAM_UPDATER> = v0;
return;
}
}