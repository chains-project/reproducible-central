final class io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArraySubscriber extends io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber
{
private final java.util.concurrent.Flow$Publisher[] upstreams;
private int currentIndex;
private long emitted;
private final java.util.concurrent.atomic.AtomicInteger wip;
void <init>(io.smallrye.mutiny.subscription.MultiSubscriber, java.util.concurrent.Flow$Publisher[])
{
io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArraySubscriber v0;
java.util.concurrent.atomic.AtomicInteger v3;
java.util.concurrent.Flow$Publisher[] v2;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArraySubscriber;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 := @parameter1: java.util.concurrent.Flow$Publisher[];
specialinvoke v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v1);
v3 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v3.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArraySubscriber: java.util.concurrent.atomic.AtomicInteger wip> = v3;
v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArraySubscriber: java.util.concurrent.Flow$Publisher[] upstreams> = v2;
return;
}
public void onItem(java.lang.Object)
{
io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArraySubscriber v0;
java.lang.Object v1;
long v2, v3;
io.smallrye.mutiny.subscription.MultiSubscriber v4;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArraySubscriber;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArraySubscriber: long emitted>;
v3 = v2 + 1L;
v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArraySubscriber: long emitted> = v3;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArraySubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v4.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v1);
return;
}
public void onCompletion()
{
java.util.concurrent.Flow$Publisher[] v3;
long v9;
byte v10;
io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArraySubscriber v0;
java.util.concurrent.atomic.AtomicInteger v1, v14;
int v13, v15, v2, v5, v6;
io.smallrye.mutiny.subscription.MultiSubscriber v7;
boolean v12, v4;
java.util.concurrent.Flow$Subscriber v11;
java.util.concurrent.Flow$Publisher v8;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArraySubscriber;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArraySubscriber: java.util.concurrent.atomic.AtomicInteger wip>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
if v2 != 0 goto label6;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArraySubscriber: java.util.concurrent.Flow$Publisher[] upstreams>;
label1:
v4 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArraySubscriber: boolean isCancelled()>();
if v4 == 0 goto label2;
return;
label2:
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArraySubscriber: int currentIndex>;
v6 = lengthof v3;
if v5 != v6 goto label3;
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArraySubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v7.<io.smallrye.mutiny.subscription.MultiSubscriber: void onCompletion()>();
return;
label3:
v8 = v3[v5];
v9 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArraySubscriber: long emitted>;
v10 = v9 cmp 0L;
if v10 == 0 goto label4;
v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArraySubscriber: long emitted> = 0L;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArraySubscriber: void emitted(long)>(v9);
label4:
v11 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.Flow$Subscriber onMultiSubscription(java.util.concurrent.Flow$Publisher,java.util.concurrent.Flow$Subscriber)>(v8, v0);
interfaceinvoke v8.<java.util.concurrent.Flow$Publisher: void subscribe(java.util.concurrent.Flow$Subscriber)>(v11);
v12 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArraySubscriber: boolean isCancelled()>();
if v12 == 0 goto label5;
return;
label5:
v13 = v5 + 1;
v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArraySubscriber: int currentIndex> = v13;
v14 = v0.<io.smallrye.mutiny.operators.multi.MultiConcatOp$ConcatArraySubscriber: java.util.concurrent.atomic.AtomicInteger wip>;
v15 = virtualinvoke v14.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();
if v15 != 0 goto label1;
label6:
return;
}
}