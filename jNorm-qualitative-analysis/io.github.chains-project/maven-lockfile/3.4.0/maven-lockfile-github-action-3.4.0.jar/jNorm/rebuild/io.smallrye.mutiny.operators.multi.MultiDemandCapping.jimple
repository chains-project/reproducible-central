public class io.smallrye.mutiny.operators.multi.MultiDemandCapping extends io.smallrye.mutiny.operators.MultiOperator
{
private final java.util.function.LongFunction function;
public void <init>(io.smallrye.mutiny.Multi, java.util.function.LongFunction)
{
io.smallrye.mutiny.operators.multi.MultiDemandCapping v0;
java.util.function.LongFunction v2;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiDemandCapping;
v1 := @parameter0: io.smallrye.mutiny.Multi;
v2 := @parameter1: java.util.function.LongFunction;
specialinvoke v0.<io.smallrye.mutiny.operators.MultiOperator: void <init>(io.smallrye.mutiny.Multi)>(v1);
v0.<io.smallrye.mutiny.operators.multi.MultiDemandCapping: java.util.function.LongFunction function> = v2;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)
{
io.smallrye.mutiny.operators.multi.MultiDemandCapping$MultiDemandCappingProcessor v3;
io.smallrye.mutiny.operators.multi.MultiDemandCapping v0;
io.smallrye.mutiny.Multi v2;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiDemandCapping;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiDemandCapping: io.smallrye.mutiny.Multi upstream()>();
v3 = new io.smallrye.mutiny.operators.multi.MultiDemandCapping$MultiDemandCappingProcessor;
specialinvoke v3.<io.smallrye.mutiny.operators.multi.MultiDemandCapping$MultiDemandCappingProcessor: void <init>(io.smallrye.mutiny.operators.multi.MultiDemandCapping,io.smallrye.mutiny.subscription.MultiSubscriber)>(v0, v1);
interfaceinvoke v2.<io.smallrye.mutiny.Multi: void subscribe(java.util.concurrent.Flow$Subscriber)>(v3);
return;
}
}