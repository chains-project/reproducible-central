public final class io.smallrye.mutiny.operators.multi.MultiFlatMapOp extends io.smallrye.mutiny.operators.multi.AbstractMultiOperator
{
private final java.util.function.Function mapper;
private final boolean postponeFailurePropagation;
private final int maxConcurrency;
private final int requests;
public void <init>(io.smallrye.mutiny.Multi, java.util.function.Function, boolean, int, int)
{
io.smallrye.mutiny.operators.multi.MultiFlatMapOp v0;
java.util.function.Function v2;
io.smallrye.mutiny.Multi v1;
int v4, v5, v7, v8;
java.lang.Object v6;
boolean v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiFlatMapOp;
v1 := @parameter0: io.smallrye.mutiny.Multi;
v2 := @parameter1: java.util.function.Function;
v3 := @parameter2: boolean;
v4 := @parameter3: int;
v5 := @parameter4: int;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.AbstractMultiOperator: void <init>(io.smallrye.mutiny.Multi)>(v1);
v6 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v2, "mapper");
v0.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp: java.util.function.Function mapper> = v6;
v0.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp: boolean postponeFailurePropagation> = v3;
v7 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: int positive(int,java.lang.String)>(v4, "maxConcurrency");
v0.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp: int maxConcurrency> = v7;
v8 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: int positive(int,java.lang.String)>(v5, "requests");
v0.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp: int requests> = v8;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)
{
io.smallrye.mutiny.operators.multi.MultiFlatMapOp v0;
java.util.function.Function v4;
io.smallrye.mutiny.Multi v8, v9;
java.lang.NullPointerException v2;
java.util.concurrent.Flow$Subscriber v10;
io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapMainSubscriber v3;
int v6, v7;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
boolean v5;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiFlatMapOp;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
if v1 != null goto label1;
v2 = new java.lang.NullPointerException;
specialinvoke v2.<java.lang.NullPointerException: void <init>(java.lang.String)>("The subscriber must not be `null`");
throw v2;
label1:
v3 = new io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapMainSubscriber;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp: java.util.function.Function mapper>;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp: boolean postponeFailurePropagation>;
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp: int maxConcurrency>;
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp: int requests>;
specialinvoke v3.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp$FlatMapMainSubscriber: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber,java.util.function.Function,boolean,int,int)>(v1, v4, v5, v6, v7);
v8 = v0.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp: io.smallrye.mutiny.Multi upstream>;
v9 = v0.<io.smallrye.mutiny.operators.multi.MultiFlatMapOp: io.smallrye.mutiny.Multi upstream>;
v10 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.Flow$Subscriber onMultiSubscription(java.util.concurrent.Flow$Publisher,java.util.concurrent.Flow$Subscriber)>(v9, v3);
interfaceinvoke v8.<io.smallrye.mutiny.Multi: void subscribe(java.util.concurrent.Flow$Subscriber)>(v10);
return;
}
}