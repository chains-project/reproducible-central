final class io.smallrye.mutiny.operators.multi.MultiGroupByOp$State extends java.lang.Object implements java.util.concurrent.Flow$Subscription, java.util.concurrent.Flow$Publisher
{
private final java.util.concurrent.atomic.AtomicReference downstream;
private final java.util.concurrent.atomic.AtomicBoolean cancelled;
private final java.util.concurrent.atomic.AtomicLong requested;
private final java.util.concurrent.atomic.AtomicBoolean done;
private final java.util.concurrent.atomic.AtomicInteger wip;
private final java.lang.Object key;
private final java.util.Queue queue;
private final io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor parent;
private java.lang.Throwable failure;
void <init>(io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor, java.lang.Object)
{
io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor v1;
java.util.concurrent.atomic.AtomicBoolean v4, v6;
java.util.concurrent.atomic.AtomicReference v3;
java.util.function.Supplier v9;
java.util.concurrent.atomic.AtomicLong v5;
java.util.concurrent.atomic.AtomicInteger v7;
int v8;
java.lang.Object v10, v2;
io.smallrye.mutiny.operators.multi.MultiGroupByOp$State v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiGroupByOp$State;
v1 := @parameter0: io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor;
v2 := @parameter1: java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v3.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: java.util.concurrent.atomic.AtomicReference downstream> = v3;
v4 = new java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v4.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: java.util.concurrent.atomic.AtomicBoolean cancelled> = v4;
v5 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v5.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: java.util.concurrent.atomic.AtomicLong requested> = v5;
v6 = new java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v6.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: java.util.concurrent.atomic.AtomicBoolean done> = v6;
v7 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v7.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: java.util.concurrent.atomic.AtomicInteger wip> = v7;
v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor parent> = v1;
v8 = <io.smallrye.mutiny.helpers.queues.Queues: int BUFFER_S>;
v9 = staticinvoke <io.smallrye.mutiny.helpers.queues.Queues: java.util.function.Supplier unbounded(int)>(v8);
v10 = interfaceinvoke v9.<java.util.function.Supplier: java.lang.Object get()>();
v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: java.util.Queue queue> = v10;
v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: java.lang.Object key> = v2;
return;
}
public void request(long)
{
java.util.concurrent.atomic.AtomicLong v3;
byte v2;
long v1;
io.smallrye.mutiny.operators.multi.MultiGroupByOp$State v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiGroupByOp$State;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 <= 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: java.util.concurrent.atomic.AtomicLong requested>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(java.util.concurrent.atomic.AtomicLong,long)>(v3, v1);
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: void drain()>();
label1:
return;
}
public void cancel()
{
io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor v3;
java.util.concurrent.atomic.AtomicBoolean v1;
java.lang.Object v4;
io.smallrye.mutiny.operators.multi.MultiGroupByOp$State v0;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiGroupByOp$State;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: java.util.concurrent.atomic.AtomicBoolean cancelled>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);
if v2 == 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor parent>;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: java.lang.Object key>;
virtualinvoke v3.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: void cancel(java.lang.Object)>(v4);
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: void drain()>();
label1:
return;
}
public void subscribe(java.util.concurrent.Flow$Subscriber)
{
java.lang.IllegalStateException v4;
java.util.concurrent.Flow$Subscriber v1;
io.smallrye.mutiny.operators.multi.MultiGroupByOp$State v0;
java.util.concurrent.atomic.AtomicReference v2;
boolean v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiGroupByOp$State;
v1 := @parameter0: java.util.concurrent.Flow$Subscriber;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: java.util.concurrent.atomic.AtomicReference downstream>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, v1);
if v3 == 0 goto label1;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v0);
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: void drain()>();
goto label2;
label1:
v4 = new java.lang.IllegalStateException;
specialinvoke v4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("only 1 subscriber allowed");
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void fail(java.util.concurrent.Flow$Subscriber,java.lang.Throwable)>(v1, v4);
label2:
return;
}
public void onItem(java.lang.Object)
{
java.util.concurrent.atomic.AtomicBoolean v2;
java.lang.Object v1;
java.util.Queue v4;
io.smallrye.mutiny.operators.multi.MultiGroupByOp$State v0;
boolean v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiGroupByOp$State;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: java.util.concurrent.atomic.AtomicBoolean done>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
if v3 != 0 goto label1;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: java.util.Queue queue>;
interfaceinvoke v4.<java.util.Queue: boolean offer(java.lang.Object)>(v1);
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: void drain()>();
label1:
return;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
java.util.concurrent.atomic.AtomicBoolean v2;
io.smallrye.mutiny.operators.multi.MultiGroupByOp$State v0;
boolean v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiGroupByOp$State;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: java.util.concurrent.atomic.AtomicBoolean done>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);
if v3 == 0 goto label1;
v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: java.lang.Throwable failure> = v1;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: void drain()>();
goto label2;
label1:
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v1);
label2:
return;
}
public void onCompletion()
{
java.util.concurrent.atomic.AtomicBoolean v1;
io.smallrye.mutiny.operators.multi.MultiGroupByOp$State v0;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiGroupByOp$State;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: java.util.concurrent.atomic.AtomicBoolean done>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);
if v2 == 0 goto label1;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: void drain()>();
label1:
return;
}
void drain()
{
java.util.concurrent.atomic.AtomicBoolean v11, v17;
long v24, v8, v9;
java.util.concurrent.atomic.AtomicReference v29, v5;
byte v10, v16, v21, v22;
java.util.concurrent.atomic.AtomicInteger v1, v27;
int v2, v28, v3;
io.smallrye.mutiny.operators.multi.MultiGroupByOp$State v0;
boolean v12, v14, v15, v18, v19, v20;
java.util.concurrent.Flow$Subscription v26;
io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor v25;
java.util.concurrent.atomic.AtomicLong v23, v7;
java.lang.Object v13, v6;
java.util.Queue v4;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiGroupByOp$State;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: java.util.concurrent.atomic.AtomicInteger wip>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
if v2 == 0 goto label01;
return;
label01:
v3 = 1;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: java.util.Queue queue>;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: java.util.concurrent.atomic.AtomicReference downstream>;
v6 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
label02:
if v6 == null goto label10;
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: java.util.concurrent.atomic.AtomicLong requested>;
v8 = virtualinvoke v7.<java.util.concurrent.atomic.AtomicLong: long get()>();
v9 = 0L;
label03:
v10 = v9 cmp v8;
if v10 == 0 goto label07;
v11 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: java.util.concurrent.atomic.AtomicBoolean done>;
v12 = virtualinvoke v11.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
v13 = interfaceinvoke v4.<java.util.Queue: java.lang.Object poll()>();
if v13 != null goto label04;
v14 = 1;
goto label05;
label04:
v14 = 0;
label05:
v15 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: boolean hasCompleted(boolean,boolean,long)>(v12, v14, v9);
if v15 == 0 goto label06;
return;
label06:
if v14 != 0 goto label07;
interfaceinvoke v6.<java.util.concurrent.Flow$Subscriber: void onNext(java.lang.Object)>(v13);
v9 = v9 + 1L;
goto label03;
label07:
v16 = v9 cmp v8;
if v16 != 0 goto label08;
v17 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: java.util.concurrent.atomic.AtomicBoolean done>;
v18 = virtualinvoke v17.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
v19 = interfaceinvoke v4.<java.util.Queue: boolean isEmpty()>();
v20 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: boolean hasCompleted(boolean,boolean,long)>(v18, v19, v9);
if v20 == 0 goto label08;
return;
label08:
v21 = v9 cmp 0L;
if v21 == 0 goto label10;
v22 = v8 cmp 9223372036854775807L;
if v22 == 0 goto label09;
v23 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: java.util.concurrent.atomic.AtomicLong requested>;
v24 = neg v9;
virtualinvoke v23.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(v24);
label09:
v25 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor parent>;
v26 = virtualinvoke v25.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.util.concurrent.Flow$Subscription getUpstreamSubscription()>();
interfaceinvoke v26.<java.util.concurrent.Flow$Subscription: void request(long)>(v9);
label10:
v27 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: java.util.concurrent.atomic.AtomicInteger wip>;
v28 = neg v3;
v3 = virtualinvoke v27.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(v28);
if v3 == 0 goto label11;
if v6 != null goto label02;
v29 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: java.util.concurrent.atomic.AtomicReference downstream>;
virtualinvoke v29.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
goto label02;
label11:
return;
}
boolean hasCompleted(boolean, boolean, long)
{
java.lang.Throwable v11;
java.util.concurrent.atomic.AtomicBoolean v4;
long v3;
java.util.concurrent.atomic.AtomicReference v13, v15;
byte v8;
io.smallrye.mutiny.operators.multi.MultiGroupByOp$State v0;
boolean v1, v2, v5;
java.util.concurrent.Flow$Subscription v10;
io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor v9;
java.lang.Object v14, v16, v7;
java.util.Queue v12, v6;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiGroupByOp$State;
v1 := @parameter0: boolean;
v2 := @parameter1: boolean;
v3 := @parameter2: long;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: java.util.concurrent.atomic.AtomicBoolean cancelled>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
if v5 == 0 goto label4;
label1:
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: java.util.Queue queue>;
v7 = interfaceinvoke v6.<java.util.Queue: java.lang.Object poll()>();
if v7 == null goto label2;
v3 = v3 + 1L;
goto label1;
label2:
v8 = v3 cmp 0L;
if v8 == 0 goto label3;
v9 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor parent>;
v10 = virtualinvoke v9.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.util.concurrent.Flow$Subscription getUpstreamSubscription()>();
interfaceinvoke v10.<java.util.concurrent.Flow$Subscription: void request(long)>(v3);
label3:
return 1;
label4:
if v1 == 0 goto label6;
v11 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: java.lang.Throwable failure>;
if v11 == null goto label5;
v12 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: java.util.Queue queue>;
interfaceinvoke v12.<java.util.Queue: void clear()>();
v13 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: java.util.concurrent.atomic.AtomicReference downstream>;
v14 = virtualinvoke v13.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
interfaceinvoke v14.<java.util.concurrent.Flow$Subscriber: void onError(java.lang.Throwable)>(v11);
return 1;
label5:
if v2 == 0 goto label6;
v15 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$State: java.util.concurrent.atomic.AtomicReference downstream>;
v16 = virtualinvoke v15.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
interfaceinvoke v16.<java.util.concurrent.Flow$Subscriber: void onComplete()>();
return 1;
label6:
return 0;
}
}