class io.smallrye.mutiny.operators.multi.MultiOnRequestCall$MultiOnRequestCallOperator extends io.smallrye.mutiny.operators.multi.MultiOperatorProcessor
{
private final java.util.concurrent.atomic.AtomicReference cancellable;
private final java.util.concurrent.atomic.AtomicLong requests;
final io.smallrye.mutiny.operators.multi.MultiOnRequestCall this$0;
public void <init>(io.smallrye.mutiny.operators.multi.MultiOnRequestCall, io.smallrye.mutiny.subscription.MultiSubscriber)
{
java.util.concurrent.atomic.AtomicLong v4;
io.smallrye.mutiny.operators.multi.MultiOnRequestCall v1;
io.smallrye.mutiny.operators.multi.MultiOnRequestCall$MultiOnRequestCallOperator v0;
java.util.concurrent.atomic.AtomicReference v3;
io.smallrye.mutiny.subscription.MultiSubscriber v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiOnRequestCall$MultiOnRequestCallOperator;
v1 := @parameter0: io.smallrye.mutiny.operators.multi.MultiOnRequestCall;
v2 := @parameter1: io.smallrye.mutiny.subscription.MultiSubscriber;
v0.<io.smallrye.mutiny.operators.multi.MultiOnRequestCall$MultiOnRequestCallOperator: io.smallrye.mutiny.operators.multi.MultiOnRequestCall this$0> = v1;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v2);
v3 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v3.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiOnRequestCall$MultiOnRequestCallOperator: java.util.concurrent.atomic.AtomicReference cancellable> = v3;
v4 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v4.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiOnRequestCall$MultiOnRequestCallOperator: java.util.concurrent.atomic.AtomicLong requests> = v4;
return;
}
public void request(long)
{
long v1, v3;
io.smallrye.mutiny.operators.multi.MultiOnRequestCall$MultiOnRequestCallOperator v0;
java.lang.IllegalArgumentException v5;
java.util.concurrent.atomic.AtomicReference v6;
io.smallrye.mutiny.Uni v7;
java.util.function.Consumer v10, v9;
java.util.concurrent.atomic.AtomicLong v2;
byte v4;
io.smallrye.mutiny.groups.UniSubscribe v8;
io.smallrye.mutiny.subscription.Cancellable v11;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiOnRequestCall$MultiOnRequestCallOperator;
v1 := @parameter0: long;
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: long positive(long,java.lang.String)>(v1, "requests");
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiOnRequestCall$MultiOnRequestCallOperator: java.util.concurrent.atomic.AtomicLong requests>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(v1);
v4 = v3 cmp 0L;
if v4 >= 0 goto label1;
v5 = new java.lang.IllegalArgumentException;
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The amount of pending requests exceeded Long.MAX_VALUE");
throw v5;
label1:
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiOnRequestCall$MultiOnRequestCallOperator: java.util.concurrent.atomic.AtomicReference cancellable>;
v7 = specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOnRequestCall$MultiOnRequestCallOperator: io.smallrye.mutiny.Uni execute(long)>(v1);
v8 = interfaceinvoke v7.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v9 = staticinvoke <io.smallrye.mutiny.operators.multi.MultiOnRequestCall$MultiOnRequestCallOperator$lambda_request_0__2655: java.util.function.Consumer bootstrap$(io.smallrye.mutiny.operators.multi.MultiOnRequestCall$MultiOnRequestCallOperator,long)>(v0, v1);
v10 = staticinvoke <io.smallrye.mutiny.operators.multi.MultiOnRequestCall$MultiOnRequestCallOperator$lambda_request_1__2656: java.util.function.Consumer bootstrap$(io.smallrye.mutiny.operators.multi.MultiOnRequestCall$MultiOnRequestCallOperator)>(v0);
v11 = virtualinvoke v8.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer,java.util.function.Consumer)>(v9, v10);
virtualinvoke v6.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(v11);
return;
}
public void onItem(java.lang.Object)
{
java.util.concurrent.atomic.AtomicLong v2;
java.lang.Object v1;
io.smallrye.mutiny.operators.multi.MultiOnRequestCall$MultiOnRequestCallOperator v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiOnRequestCall$MultiOnRequestCallOperator;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiOnRequestCall$MultiOnRequestCallOperator: java.util.concurrent.atomic.AtomicLong requests>;
virtualinvoke v2.<java.util.concurrent.atomic.AtomicLong: long decrementAndGet()>();
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void onItem(java.lang.Object)>(v1);
return;
}
public void cancel()
{
java.lang.Object v2;
io.smallrye.mutiny.operators.multi.MultiOnRequestCall$MultiOnRequestCallOperator v0;
java.util.concurrent.atomic.AtomicReference v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiOnRequestCall$MultiOnRequestCallOperator;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiOnRequestCall$MultiOnRequestCallOperator: java.util.concurrent.atomic.AtomicReference cancellable>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(null);
if v2 == null goto label1;
interfaceinvoke v2.<io.smallrye.mutiny.subscription.Cancellable: void cancel()>();
label1:
return;
}
private io.smallrye.mutiny.Uni execute(long)
{
java.lang.Throwable v6;
java.util.function.LongFunction v3;
long v1;
io.smallrye.mutiny.operators.multi.MultiOnRequestCall$MultiOnRequestCallOperator v0;
io.smallrye.mutiny.Uni v8;
io.smallrye.mutiny.groups.UniCreate v7;
io.smallrye.mutiny.operators.multi.MultiOnRequestCall v2;
java.lang.Object v4, v5;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiOnRequestCall$MultiOnRequestCallOperator;
v1 := @parameter0: long;
label1:
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiOnRequestCall$MultiOnRequestCallOperator: io.smallrye.mutiny.operators.multi.MultiOnRequestCall this$0>;
v3 = v2.<io.smallrye.mutiny.operators.multi.MultiOnRequestCall: java.util.function.LongFunction mapper>;
v4 = interfaceinvoke v3.<java.util.function.LongFunction: java.lang.Object apply(long)>(v1);
v5 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v4, "uni");
label2:
return v5;
label3:
v6 := @caughtexception;
v7 = staticinvoke <io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniCreate createFrom()>();
v8 = virtualinvoke v7.<io.smallrye.mutiny.groups.UniCreate: io.smallrye.mutiny.Uni failure(java.lang.Throwable)>(v6);
return v8;
catch java.lang.Throwable from label1 to label2 with label3;
}
}