final class io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$TriggerSubscriber extends io.smallrye.mutiny.operators.AbstractMulti implements io.smallrye.mutiny.Multi, java.util.concurrent.Flow$Subscriber, io.smallrye.mutiny.subscription.ContextSupport
{
io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator operator;
private final java.util.concurrent.Flow$Processor processor;
private io.smallrye.mutiny.Context context;
void <init>()
{
io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$TriggerSubscriber v0;
io.smallrye.mutiny.operators.multi.processors.UnicastProcessor v1;
io.smallrye.mutiny.operators.multi.processors.SerializedProcessor v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$TriggerSubscriber;
specialinvoke v0.<io.smallrye.mutiny.operators.AbstractMulti: void <init>()>();
v1 = staticinvoke <io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor create()>();
v2 = virtualinvoke v1.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: io.smallrye.mutiny.operators.multi.processors.SerializedProcessor serialized()>();
v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$TriggerSubscriber: java.util.concurrent.Flow$Processor processor> = v2;
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator v2;
io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$TriggerSubscriber v0;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$TriggerSubscriber;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$TriggerSubscriber: io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator operator>;
virtualinvoke v2.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: void setWhen(java.util.concurrent.Flow$Subscription)>(v1);
return;
}
public void onNext(java.lang.Object)
{
java.lang.Object v1;
io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator v2;
io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$TriggerSubscriber v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$TriggerSubscriber;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$TriggerSubscriber: io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator operator>;
virtualinvoke v2.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: void resubscribe()>();
return;
}
public void onError(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator v2;
io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$TriggerSubscriber v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$TriggerSubscriber;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$TriggerSubscriber: io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator operator>;
virtualinvoke v2.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: void whenFailure(java.lang.Throwable)>(v1);
return;
}
public void onComplete()
{
io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator v1;
io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$TriggerSubscriber v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$TriggerSubscriber;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$TriggerSubscriber: io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator operator>;
virtualinvoke v1.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: void whenComplete()>();
return;
}
public void subscribe(java.util.concurrent.Flow$Subscriber)
{
java.util.concurrent.Flow$Processor v5;
java.util.concurrent.Flow$Subscriber v1;
io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$TriggerSubscriber v0;
io.smallrye.mutiny.Context v3, v4;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$TriggerSubscriber;
v1 := @parameter0: java.util.concurrent.Flow$Subscriber;
v2 = v1 instanceof io.smallrye.mutiny.subscription.ContextSupport;
if v2 == 0 goto label1;
v3 = interfaceinvoke v1.<io.smallrye.mutiny.subscription.ContextSupport: io.smallrye.mutiny.Context context()>();
v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$TriggerSubscriber: io.smallrye.mutiny.Context context> = v3;
goto label2;
label1:
v4 = staticinvoke <io.smallrye.mutiny.Context: io.smallrye.mutiny.Context empty()>();
v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$TriggerSubscriber: io.smallrye.mutiny.Context context> = v4;
label2:
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$TriggerSubscriber: java.util.concurrent.Flow$Processor processor>;
interfaceinvoke v5.<java.util.concurrent.Flow$Processor: void subscribe(java.util.concurrent.Flow$Subscriber)>(v1);
return;
}
public io.smallrye.mutiny.Context context()
{
io.smallrye.mutiny.Context v1;
io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$TriggerSubscriber v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$TriggerSubscriber;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$TriggerSubscriber: io.smallrye.mutiny.Context context>;
return v1;
}
}