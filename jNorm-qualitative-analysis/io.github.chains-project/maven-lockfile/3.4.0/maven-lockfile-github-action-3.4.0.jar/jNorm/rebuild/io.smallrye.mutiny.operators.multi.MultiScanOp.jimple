public final class io.smallrye.mutiny.operators.multi.MultiScanOp extends io.smallrye.mutiny.operators.multi.AbstractMultiOperator
{
private final java.util.function.BiFunction accumulator;
public void <init>(io.smallrye.mutiny.Multi, java.util.function.BiFunction)
{
java.util.function.BiFunction v2;
java.lang.Object v3;
io.smallrye.mutiny.operators.multi.MultiScanOp v0;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiScanOp;
v1 := @parameter0: io.smallrye.mutiny.Multi;
v2 := @parameter1: java.util.function.BiFunction;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.AbstractMultiOperator: void <init>(io.smallrye.mutiny.Multi)>(v1);
v3 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v2, "accumulator");
v0.<io.smallrye.mutiny.operators.multi.MultiScanOp: java.util.function.BiFunction accumulator> = v3;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)
{
io.smallrye.mutiny.groups.MultiSubscribe v3;
java.util.function.BiFunction v5;
io.smallrye.mutiny.operators.multi.MultiScanOp v0;
io.smallrye.mutiny.operators.multi.MultiScanOp$ScanProcessor v4;
io.smallrye.mutiny.Multi v2;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiScanOp;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiScanOp: io.smallrye.mutiny.Multi upstream>;
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiSubscribe subscribe()>();
v4 = new io.smallrye.mutiny.operators.multi.MultiScanOp$ScanProcessor;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiScanOp: java.util.function.BiFunction accumulator>;
specialinvoke v4.<io.smallrye.mutiny.operators.multi.MultiScanOp$ScanProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber,java.util.function.BiFunction)>(v1, v5);
virtualinvoke v3.<io.smallrye.mutiny.groups.MultiSubscribe: io.smallrye.mutiny.subscription.MultiSubscriber withSubscriber(io.smallrye.mutiny.subscription.MultiSubscriber)>(v4);
return;
}
}