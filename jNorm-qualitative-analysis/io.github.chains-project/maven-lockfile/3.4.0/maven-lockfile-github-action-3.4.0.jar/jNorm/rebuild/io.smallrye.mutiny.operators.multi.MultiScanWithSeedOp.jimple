public final class io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp extends io.smallrye.mutiny.operators.multi.AbstractMultiOperator
{
private final java.util.function.BiFunction accumulator;
private final java.util.function.Supplier seed;
public void <init>(io.smallrye.mutiny.Multi, java.util.function.Supplier, java.util.function.BiFunction)
{
java.util.function.BiFunction v3;
io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp v0;
java.util.function.Supplier v2;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp;
v1 := @parameter0: io.smallrye.mutiny.Multi;
v2 := @parameter1: java.util.function.Supplier;
v3 := @parameter2: java.util.function.BiFunction;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.AbstractMultiOperator: void <init>(io.smallrye.mutiny.Multi)>(v1);
v0.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp: java.util.function.Supplier seed> = v2;
v0.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp: java.util.function.BiFunction accumulator> = v3;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)
{
java.util.function.BiFunction v4;
io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber v2;
io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp v0;
java.util.function.Supplier v5;
io.smallrye.mutiny.Multi v3;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
boolean v6;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 = new io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp: io.smallrye.mutiny.Multi upstream>;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp: java.util.function.BiFunction accumulator>;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp: java.util.function.Supplier seed>;
specialinvoke v2.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber: void <init>(io.smallrye.mutiny.Multi,io.smallrye.mutiny.subscription.MultiSubscriber,java.util.function.BiFunction,java.util.function.Supplier)>(v3, v1, v4, v5);
interfaceinvoke v1.<io.smallrye.mutiny.subscription.MultiSubscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v2);
v6 = virtualinvoke v2.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber: boolean isCancelled()>();
if v6 != 0 goto label1;
virtualinvoke v2.<io.smallrye.mutiny.operators.multi.MultiScanWithSeedOp$ScanSubscriber: void onCompletion()>();
label1:
return;
}
}