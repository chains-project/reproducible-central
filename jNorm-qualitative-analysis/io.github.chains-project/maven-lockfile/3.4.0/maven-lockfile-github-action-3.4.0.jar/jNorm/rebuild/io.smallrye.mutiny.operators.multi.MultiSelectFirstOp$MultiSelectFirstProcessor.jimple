final class io.smallrye.mutiny.operators.multi.MultiSelectFirstOp$MultiSelectFirstProcessor extends io.smallrye.mutiny.operators.multi.MultiOperatorProcessor
{
private final long numberOfItems;
private long remaining;
private final java.util.concurrent.atomic.AtomicInteger wip;
void <init>(io.smallrye.mutiny.subscription.MultiSubscriber, long)
{
io.smallrye.mutiny.operators.multi.MultiSelectFirstOp$MultiSelectFirstProcessor v0;
java.util.concurrent.atomic.AtomicInteger v3;
long v2;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSelectFirstOp$MultiSelectFirstProcessor;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 := @parameter1: long;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v1);
v3 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v3.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstOp$MultiSelectFirstProcessor: java.util.concurrent.atomic.AtomicInteger wip> = v3;
v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstOp$MultiSelectFirstProcessor: long numberOfItems> = v2;
v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstOp$MultiSelectFirstProcessor: long remaining> = v2;
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
long v3;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v5;
io.smallrye.mutiny.operators.multi.MultiSelectFirstOp$MultiSelectFirstProcessor v0;
byte v4;
io.smallrye.mutiny.subscription.MultiSubscriber v7, v8;
boolean v2;
java.util.concurrent.Flow$Subscription v1, v6;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSelectFirstOp$MultiSelectFirstProcessor;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstOp$MultiSelectFirstProcessor: boolean compareAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription,java.util.concurrent.Flow$Subscription)>(null, v1);
if v2 == 0 goto label2;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstOp$MultiSelectFirstProcessor: long numberOfItems>;
v4 = v3 cmp 0L;
if v4 != 0 goto label1;
v5 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
v6 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstOp$MultiSelectFirstProcessor: java.util.concurrent.Flow$Subscription getAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription)>(v5);
interfaceinvoke v6.<java.util.concurrent.Flow$Subscription: void cancel()>();
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstOp$MultiSelectFirstProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void complete(java.util.concurrent.Flow$Subscriber)>(v7);
goto label3;
label1:
v8 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstOp$MultiSelectFirstProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v8.<io.smallrye.mutiny.subscription.MultiSubscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v0);
goto label3;
label2:
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void cancel()>();
label3:
return;
}
public void onItem(java.lang.Object)
{
long v5, v9;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v12, v3, v7;
io.smallrye.mutiny.operators.multi.MultiSelectFirstOp$MultiSelectFirstProcessor v0;
byte v11, v6;
java.lang.Object v1;
io.smallrye.mutiny.subscription.MultiSubscriber v10, v4;
java.util.concurrent.Flow$Subscription v13, v2, v8;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSelectFirstOp$MultiSelectFirstProcessor;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstOp$MultiSelectFirstProcessor: java.util.concurrent.Flow$Subscription getUpstreamSubscription()>();
v3 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v2 != v3 goto label1;
return;
label1:
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstOp$MultiSelectFirstProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstOp$MultiSelectFirstProcessor: long remaining>;
v6 = v5 cmp 0L;
if v6 != 0 goto label2;
v7 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
v8 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstOp$MultiSelectFirstProcessor: java.util.concurrent.Flow$Subscription getAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription)>(v7);
interfaceinvoke v8.<java.util.concurrent.Flow$Subscription: void cancel()>();
interfaceinvoke v4.<io.smallrye.mutiny.subscription.MultiSubscriber: void onCompletion()>();
return;
label2:
v9 = v5 - 1L;
v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstOp$MultiSelectFirstProcessor: long remaining> = v9;
v10 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstOp$MultiSelectFirstProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v10.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v1);
v11 = v9 cmp 0L;
if v11 != 0 goto label3;
v12 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
v13 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstOp$MultiSelectFirstProcessor: java.util.concurrent.Flow$Subscription getAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription)>(v12);
interfaceinvoke v13.<java.util.concurrent.Flow$Subscription: void cancel()>();
interfaceinvoke v4.<io.smallrye.mutiny.subscription.MultiSubscriber: void onCompletion()>();
label3:
return;
}
public void request(long)
{
io.smallrye.mutiny.operators.multi.MultiSelectFirstOp$MultiSelectFirstProcessor v0;
byte v6;
java.util.concurrent.atomic.AtomicInteger v3;
long v1, v5;
boolean v4;
java.util.concurrent.Flow$Subscription v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSelectFirstOp$MultiSelectFirstProcessor;
v1 := @parameter0: long;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstOp$MultiSelectFirstProcessor: java.util.concurrent.Flow$Subscription getUpstreamSubscription()>();
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstOp$MultiSelectFirstProcessor: java.util.concurrent.atomic.AtomicInteger wip>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(0, 1);
if v4 == 0 goto label3;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstOp$MultiSelectFirstProcessor: long numberOfItems>;
v6 = v1 cmp v5;
if v6 < 0 goto label1;
interfaceinvoke v2.<java.util.concurrent.Flow$Subscription: void request(long)>(9223372036854775807L);
goto label2;
label1:
interfaceinvoke v2.<java.util.concurrent.Flow$Subscription: void request(long)>(v1);
label2:
return;
label3:
interfaceinvoke v2.<java.util.concurrent.Flow$Subscription: void request(long)>(v1);
return;
}
}