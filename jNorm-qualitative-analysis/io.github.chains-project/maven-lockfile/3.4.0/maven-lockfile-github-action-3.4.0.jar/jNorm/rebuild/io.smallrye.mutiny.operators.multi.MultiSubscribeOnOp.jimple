public class io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp extends io.smallrye.mutiny.operators.multi.AbstractMultiOperator
{
private final java.util.concurrent.Executor executor;
public void <init>(io.smallrye.mutiny.Multi, java.util.concurrent.Executor)
{
java.util.concurrent.Executor v2;
io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp v0;
java.lang.Object v3;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp;
v1 := @parameter0: io.smallrye.mutiny.Multi;
v2 := @parameter1: java.util.concurrent.Executor;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.AbstractMultiOperator: void <init>(io.smallrye.mutiny.Multi)>(v1);
v3 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v2, "executor");
v0.<io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp: java.util.concurrent.Executor executor> = v3;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)
{
java.util.concurrent.Executor v3;
io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp v0;
io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp$SubscribeOnProcessor v2;
io.smallrye.mutiny.Multi v4;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 = new io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp$SubscribeOnProcessor;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp: java.util.concurrent.Executor executor>;
specialinvoke v2.<io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp$SubscribeOnProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber,java.util.concurrent.Executor)>(v1, v3);
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp: io.smallrye.mutiny.Multi upstream>;
virtualinvoke v2.<io.smallrye.mutiny.operators.multi.MultiSubscribeOnOp$SubscribeOnProcessor: void scheduleSubscription(io.smallrye.mutiny.Multi,java.util.concurrent.Flow$Subscriber)>(v4, v1);
return;
}
}