public class io.smallrye.mutiny.operators.multi.MultiSwitchOnEmpty extends io.smallrye.mutiny.operators.MultiOperator
{
private final java.util.function.Supplier supplier;
public void <init>(io.smallrye.mutiny.Multi, java.util.function.Supplier)
{
java.util.function.Supplier v2;
io.smallrye.mutiny.Multi v1;
io.smallrye.mutiny.operators.multi.MultiSwitchOnEmpty v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSwitchOnEmpty;
v1 := @parameter0: io.smallrye.mutiny.Multi;
v2 := @parameter1: java.util.function.Supplier;
specialinvoke v0.<io.smallrye.mutiny.operators.MultiOperator: void <init>(io.smallrye.mutiny.Multi)>(v1);
v0.<io.smallrye.mutiny.operators.multi.MultiSwitchOnEmpty: java.util.function.Supplier supplier> = v2;
return;
}
public void subscribe(java.util.concurrent.Flow$Subscriber)
{
java.util.function.Supplier v3;
io.smallrye.mutiny.Multi v5, v7, v8;
java.lang.NullPointerException v2;
java.util.concurrent.Flow$Subscriber v1;
io.smallrye.mutiny.groups.MultiCreate v4;
io.smallrye.mutiny.operators.multi.MultiSwitchOnEmptyOp v6;
io.smallrye.mutiny.operators.multi.MultiSwitchOnEmpty v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSwitchOnEmpty;
v1 := @parameter0: java.util.concurrent.Flow$Subscriber;
if v1 != null goto label1;
v2 = new java.lang.NullPointerException;
specialinvoke v2.<java.lang.NullPointerException: void <init>(java.lang.String)>("The subscriber must not be `null`");
throw v2;
label1:
v3 = staticinvoke <io.smallrye.mutiny.operators.multi.MultiSwitchOnEmpty$lambda_subscribe_0__2643: java.util.function.Supplier bootstrap$(io.smallrye.mutiny.operators.multi.MultiSwitchOnEmpty)>(v0);
v4 = staticinvoke <io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiCreate createFrom()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.MultiCreate: io.smallrye.mutiny.Multi deferred(java.util.function.Supplier)>(v3);
v6 = new io.smallrye.mutiny.operators.multi.MultiSwitchOnEmptyOp;
v7 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiSwitchOnEmpty: io.smallrye.mutiny.Multi upstream()>();
specialinvoke v6.<io.smallrye.mutiny.operators.multi.MultiSwitchOnEmptyOp: void <init>(io.smallrye.mutiny.Multi,java.util.concurrent.Flow$Publisher)>(v7, v5);
v8 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v6);
interfaceinvoke v8.<io.smallrye.mutiny.Multi: void subscribe(java.util.concurrent.Flow$Subscriber)>(v1);
return;
}
}