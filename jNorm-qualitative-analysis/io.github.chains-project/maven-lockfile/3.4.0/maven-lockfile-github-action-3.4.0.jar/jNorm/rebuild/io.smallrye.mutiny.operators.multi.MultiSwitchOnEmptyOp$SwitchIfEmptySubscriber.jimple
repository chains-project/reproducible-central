final class io.smallrye.mutiny.operators.multi.MultiSwitchOnEmptyOp$SwitchIfEmptySubscriber extends io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber
{
private final java.util.concurrent.Flow$Publisher alternative;
boolean notEmpty;
void <init>(io.smallrye.mutiny.subscription.MultiSubscriber, java.util.concurrent.Flow$Publisher)
{
io.smallrye.mutiny.operators.multi.MultiSwitchOnEmptyOp$SwitchIfEmptySubscriber v0;
java.util.concurrent.Flow$Publisher v2;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSwitchOnEmptyOp$SwitchIfEmptySubscriber;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 := @parameter1: java.util.concurrent.Flow$Publisher;
specialinvoke v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v1);
v0.<io.smallrye.mutiny.operators.multi.MultiSwitchOnEmptyOp$SwitchIfEmptySubscriber: java.util.concurrent.Flow$Publisher alternative> = v2;
return;
}
public void onItem(java.lang.Object)
{
io.smallrye.mutiny.operators.multi.MultiSwitchOnEmptyOp$SwitchIfEmptySubscriber v0;
java.lang.Object v1;
io.smallrye.mutiny.subscription.MultiSubscriber v3;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSwitchOnEmptyOp$SwitchIfEmptySubscriber;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiSwitchOnEmptyOp$SwitchIfEmptySubscriber: boolean notEmpty>;
if v2 != 0 goto label1;
v0.<io.smallrye.mutiny.operators.multi.MultiSwitchOnEmptyOp$SwitchIfEmptySubscriber: boolean notEmpty> = 1;
label1:
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiSwitchOnEmptyOp$SwitchIfEmptySubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v3.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v1);
return;
}
public void onCompletion()
{
io.smallrye.mutiny.operators.multi.MultiSwitchOnEmptyOp$SwitchIfEmptySubscriber v0;
java.util.concurrent.Flow$Subscriber v4;
java.util.concurrent.Flow$Publisher v2, v3;
io.smallrye.mutiny.subscription.MultiSubscriber v5;
boolean v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSwitchOnEmptyOp$SwitchIfEmptySubscriber;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiSwitchOnEmptyOp$SwitchIfEmptySubscriber: boolean notEmpty>;
if v1 != 0 goto label1;
v0.<io.smallrye.mutiny.operators.multi.MultiSwitchOnEmptyOp$SwitchIfEmptySubscriber: boolean notEmpty> = 1;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiSwitchOnEmptyOp$SwitchIfEmptySubscriber: java.util.concurrent.Flow$Publisher alternative>;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiSwitchOnEmptyOp$SwitchIfEmptySubscriber: java.util.concurrent.Flow$Publisher alternative>;
v4 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.Flow$Subscriber onMultiSubscription(java.util.concurrent.Flow$Publisher,java.util.concurrent.Flow$Subscriber)>(v3, v0);
interfaceinvoke v2.<java.util.concurrent.Flow$Publisher: void subscribe(java.util.concurrent.Flow$Subscriber)>(v4);
goto label2;
label1:
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiSwitchOnEmptyOp$SwitchIfEmptySubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v5.<io.smallrye.mutiny.subscription.MultiSubscriber: void onCompletion()>();
label2:
return;
}
}