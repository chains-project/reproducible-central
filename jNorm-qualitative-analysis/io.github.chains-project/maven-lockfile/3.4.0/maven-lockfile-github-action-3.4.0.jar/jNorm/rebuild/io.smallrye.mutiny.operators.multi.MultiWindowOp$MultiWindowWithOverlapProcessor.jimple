final class io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor extends io.smallrye.mutiny.operators.multi.MultiOperatorProcessor implements java.lang.Runnable
{
private final java.util.ArrayDeque processors;
private final java.util.function.Supplier supplier;
private final java.util.Queue overflow;
private final int size;
private final int skip;
private final java.util.concurrent.atomic.AtomicReference failure;
private final java.util.concurrent.atomic.AtomicInteger count;
private final java.util.concurrent.atomic.AtomicBoolean firstRequest;
private final java.util.concurrent.atomic.AtomicLong requested;
private final java.util.concurrent.atomic.AtomicInteger wip;
private int index;
private int produced;
void <init>(io.smallrye.mutiny.subscription.MultiSubscriber, int, int, java.util.function.Supplier, java.util.Queue)
{
java.util.concurrent.atomic.AtomicBoolean v9;
java.util.concurrent.atomic.AtomicReference v7;
java.util.function.Supplier v4;
java.util.concurrent.atomic.AtomicLong v10;
io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor v0;
java.util.concurrent.atomic.AtomicInteger v11, v12, v8;
int v2, v3;
java.util.Queue v5;
java.util.ArrayDeque v6;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: java.util.function.Supplier;
v5 := @parameter4: java.util.Queue;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v1);
v6 = new java.util.ArrayDeque;
specialinvoke v6.<java.util.ArrayDeque: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: java.util.ArrayDeque processors> = v6;
v7 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v7.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: java.util.concurrent.atomic.AtomicReference failure> = v7;
v8 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v8.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: java.util.concurrent.atomic.AtomicInteger count> = v8;
v9 = new java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v9.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: java.util.concurrent.atomic.AtomicBoolean firstRequest> = v9;
v10 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v10.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: java.util.concurrent.atomic.AtomicLong requested> = v10;
v11 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v11.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: java.util.concurrent.atomic.AtomicInteger wip> = v11;
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: int size> = v2;
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: int skip> = v3;
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: java.util.function.Supplier supplier> = v4;
v12 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: java.util.concurrent.atomic.AtomicInteger count>;
virtualinvoke v12.<java.util.concurrent.atomic.AtomicInteger: void lazySet(int)>(1);
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: java.util.Queue overflow> = v5;
return;
}
public void onItem(java.lang.Object)
{
java.util.function.Supplier v6;
java.util.concurrent.atomic.AtomicInteger v5;
io.smallrye.mutiny.operators.multi.processors.UnicastProcessor v8;
int v11, v16, v17, v18, v19, v20, v23, v3;
boolean v14, v2, v4;
java.util.Iterator v13;
io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor v0;
java.lang.Object v1, v15, v22, v7;
java.util.Queue v10;
java.util.ArrayDeque v12, v21, v9;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: boolean isDone()>();
if v2 == 0 goto label1;
return;
label1:
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: int index>;
if v3 != 0 goto label2;
v4 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: boolean isCancelled()>();
if v4 != 0 goto label2;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: java.util.concurrent.atomic.AtomicInteger count>;
virtualinvoke v5.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: java.util.function.Supplier supplier>;
v7 = interfaceinvoke v6.<java.util.function.Supplier: java.lang.Object get()>();
v8 = staticinvoke <io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor create(java.util.Queue,java.lang.Runnable)>(v7, v0);
v9 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: java.util.ArrayDeque processors>;
virtualinvoke v9.<java.util.ArrayDeque: boolean offer(java.lang.Object)>(v8);
v10 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: java.util.Queue overflow>;
interfaceinvoke v10.<java.util.Queue: boolean offer(java.lang.Object)>(v8);
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: void drain()>();
label2:
v11 = v3 + 1;
v12 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: java.util.ArrayDeque processors>;
v13 = virtualinvoke v12.<java.util.ArrayDeque: java.util.Iterator iterator()>();
label3:
v14 = interfaceinvoke v13.<java.util.Iterator: boolean hasNext()>();
if v14 == 0 goto label4;
v15 = interfaceinvoke v13.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v15.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: void onNext(java.lang.Object)>(v1);
goto label3;
label4:
v16 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: int produced>;
v17 = v16 + 1;
v18 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: int size>;
if v17 != v18 goto label5;
v19 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: int skip>;
v20 = v17 - v19;
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: int produced> = v20;
v21 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: java.util.ArrayDeque processors>;
v22 = virtualinvoke v21.<java.util.ArrayDeque: java.lang.Object poll()>();
if v22 == null goto label6;
virtualinvoke v22.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: void onComplete()>();
goto label6;
label5:
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: int produced> = v17;
label6:
v23 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: int skip>;
if v11 != v23 goto label7;
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: int index> = 0;
goto label8;
label7:
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: int index> = v11;
label8:
return;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
java.util.Iterator v6;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v2, v4;
java.util.concurrent.atomic.AtomicReference v10;
io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor v0;
java.lang.Object v8;
java.util.ArrayDeque v5, v9;
boolean v7;
java.util.concurrent.Flow$Subscription v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor;
v1 := @parameter0: java.lang.Throwable;
v2 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
v3 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: java.util.concurrent.Flow$Subscription getAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription)>(v2);
v4 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v3 == v4 goto label3;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: java.util.ArrayDeque processors>;
v6 = virtualinvoke v5.<java.util.ArrayDeque: java.util.Iterator iterator()>();
label1:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label2;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v8.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: void onError(java.lang.Throwable)>(v1);
goto label1;
label2:
v9 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: java.util.ArrayDeque processors>;
virtualinvoke v9.<java.util.ArrayDeque: void clear()>();
v10 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: java.util.concurrent.atomic.AtomicReference failure>;
virtualinvoke v10.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(v1);
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: void drain()>();
goto label4;
label3:
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v1);
label4:
return;
}
public void onCompletion()
{
java.util.Iterator v5;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v1, v3;
io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor v0;
java.lang.Object v7;
java.util.ArrayDeque v4, v8;
boolean v6;
java.util.concurrent.Flow$Subscription v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor;
v1 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: java.util.concurrent.Flow$Subscription getAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription)>(v1);
v3 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v2 == v3 goto label3;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: java.util.ArrayDeque processors>;
v5 = virtualinvoke v4.<java.util.ArrayDeque: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label2;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v7.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: void onComplete()>();
goto label1;
label2:
v8 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: java.util.ArrayDeque processors>;
virtualinvoke v8.<java.util.ArrayDeque: void clear()>();
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: void drain()>();
label3:
return;
}
void drain()
{
long v21, v7, v8;
byte v14, v18, v19, v9;
java.util.concurrent.atomic.AtomicInteger v1, v22;
int v2, v23, v5;
io.smallrye.mutiny.subscription.MultiSubscriber v3;
boolean v10, v12, v13, v15, v16, v17;
java.util.concurrent.atomic.AtomicLong v20, v6;
io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor v0;
java.lang.Object v11;
java.util.Queue v4;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: java.util.concurrent.atomic.AtomicInteger wip>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
if v2 == 0 goto label1;
return;
label1:
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: java.util.Queue overflow>;
v5 = 1;
label2:
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: java.util.concurrent.atomic.AtomicLong requested>;
v7 = virtualinvoke v6.<java.util.concurrent.atomic.AtomicLong: long get()>();
v8 = 0L;
label3:
v9 = v8 cmp v7;
if v9 == 0 goto label7;
v10 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: boolean isDone()>();
v11 = interfaceinvoke v4.<java.util.Queue: java.lang.Object poll()>();
if v11 != null goto label4;
v12 = 1;
goto label5;
label4:
v12 = 0;
label5:
v13 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: boolean isCancelledOrDone(boolean,boolean,java.util.concurrent.Flow$Subscriber,java.util.Queue)>(v10, v12, v3, v4);
if v13 == 0 goto label6;
return;
label6:
if v12 != 0 goto label7;
interfaceinvoke v3.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v11);
v8 = v8 + 1L;
goto label3;
label7:
v14 = v8 cmp v7;
if v14 != 0 goto label8;
v15 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: boolean isDone()>();
v16 = interfaceinvoke v4.<java.util.Queue: boolean isEmpty()>();
v17 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: boolean isCancelledOrDone(boolean,boolean,java.util.concurrent.Flow$Subscriber,java.util.Queue)>(v15, v16, v3, v4);
if v17 == 0 goto label8;
return;
label8:
v18 = v8 cmp 0L;
if v18 == 0 goto label9;
v19 = v7 cmp 9223372036854775807L;
if v19 == 0 goto label9;
v20 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: java.util.concurrent.atomic.AtomicLong requested>;
v21 = neg v8;
virtualinvoke v20.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(v21);
label9:
v22 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: java.util.concurrent.atomic.AtomicInteger wip>;
v23 = neg v5;
v5 = virtualinvoke v22.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(v23);
if v5 != 0 goto label2;
return;
}
boolean isCancelledOrDone(boolean, boolean, java.util.concurrent.Flow$Subscriber, java.util.Queue)
{
java.util.concurrent.atomic.AtomicReference v6;
java.util.concurrent.Flow$Subscriber v3;
io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor v0;
java.lang.Object v7;
java.util.Queue v4;
boolean v1, v2, v5;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor;
v1 := @parameter0: boolean;
v2 := @parameter1: boolean;
v3 := @parameter2: java.util.concurrent.Flow$Subscriber;
v4 := @parameter3: java.util.Queue;
v5 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: boolean isCancelled()>();
if v5 == 0 goto label1;
interfaceinvoke v4.<java.util.Queue: void clear()>();
return 1;
label1:
if v1 == 0 goto label3;
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: java.util.concurrent.atomic.AtomicReference failure>;
v7 = virtualinvoke v6.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v7 == null goto label2;
interfaceinvoke v4.<java.util.Queue: void clear()>();
interfaceinvoke v3.<java.util.concurrent.Flow$Subscriber: void onError(java.lang.Throwable)>(v7);
return 1;
label2:
if v2 == 0 goto label3;
interfaceinvoke v3.<java.util.concurrent.Flow$Subscriber: void onComplete()>();
return 1;
label3:
return 0;
}
public void request(long)
{
java.util.concurrent.atomic.AtomicBoolean v3;
long v1, v11, v6, v7, v9;
java.util.concurrent.atomic.AtomicLong v2;
io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor v0;
int v10, v5, v8;
boolean v4;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor;
v1 := @parameter0: long;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: java.util.concurrent.atomic.AtomicLong requested>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(java.util.concurrent.atomic.AtomicLong,long)>(v2, v1);
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: java.util.concurrent.atomic.AtomicBoolean firstRequest>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);
if v4 == 0 goto label1;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: int skip>;
v6 = v1 - 1L;
v7 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long multiply(long,long)>(v5, v6);
v8 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: int size>;
v9 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(long,long)>(v8, v7);
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void request(long)>(v9);
goto label2;
label1:
v10 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: int skip>;
v11 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long multiply(long,long)>(v10, v1);
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void request(long)>(v11);
label2:
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: void drain()>();
return;
}
public void cancel()
{
io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor v0;
boolean v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor;
v1 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: boolean compareAndSwapDownstreamCancellationRequest()>();
if v1 == 0 goto label1;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: void run()>();
label1:
return;
}
public void run()
{
io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor v0;
java.util.concurrent.atomic.AtomicInteger v1;
int v2;
java.util.concurrent.Flow$Subscription v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: java.util.concurrent.atomic.AtomicInteger count>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();
if v2 != 0 goto label1;
v3 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiWindowOp$MultiWindowWithOverlapProcessor: java.util.concurrent.Flow$Subscription getUpstreamSubscription()>();
interfaceinvoke v3.<java.util.concurrent.Flow$Subscription: void cancel()>();
label1:
return;
}
}