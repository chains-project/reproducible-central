final class io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator extends java.lang.Object implements java.util.concurrent.Flow$Subscription
{
private final java.util.concurrent.atomic.AtomicInteger wip;
private final io.smallrye.mutiny.subscription.MultiSubscriber downstream;
private final java.util.List subscribers;
private final java.util.function.Function combinator;
private final java.util.concurrent.atomic.AtomicLong requested;
private final java.util.concurrent.atomic.AtomicReference failures;
private final boolean collectFailures;
private volatile boolean cancelled;
private final java.util.List current;
void <init>(io.smallrye.mutiny.subscription.MultiSubscriber, java.util.function.Function, int, int, boolean)
{
io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator v0;
java.util.concurrent.atomic.AtomicReference v8;
java.util.function.Function v2;
io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber v14;
java.util.ArrayList v11;
java.util.concurrent.atomic.AtomicInteger v6;
int v12, v3, v4;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
boolean v5, v9;
io.smallrye.mutiny.operators.multi.MultiZipOp$FixedSizeArrayList v15;
io.smallrye.mutiny.Context v10;
java.util.concurrent.atomic.AtomicLong v7;
java.util.List v13;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 := @parameter1: java.util.function.Function;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 := @parameter4: boolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
v6 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v6.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: java.util.concurrent.atomic.AtomicInteger wip> = v6;
v7 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v7.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: java.util.concurrent.atomic.AtomicLong requested> = v7;
v8 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v8.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: java.util.concurrent.atomic.AtomicReference failures> = v8;
v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: io.smallrye.mutiny.subscription.MultiSubscriber downstream> = v1;
v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: java.util.function.Function combinator> = v2;
v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: boolean collectFailures> = v5;
v9 = v1 instanceof io.smallrye.mutiny.subscription.ContextSupport;
if v9 == 0 goto label1;
v10 = interfaceinvoke v1.<io.smallrye.mutiny.subscription.ContextSupport: io.smallrye.mutiny.Context context()>();
goto label2;
label1:
v10 = staticinvoke <io.smallrye.mutiny.Context: io.smallrye.mutiny.Context empty()>();
label2:
v11 = new java.util.ArrayList;
specialinvoke v11.<java.util.ArrayList: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: java.util.List subscribers> = v11;
v12 = 0;
label3:
if v12 >= v3 goto label4;
v13 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: java.util.List subscribers>;
v14 = new io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber;
specialinvoke v14.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber: void <init>(io.smallrye.mutiny.Context,io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator,int)>(v10, v0, v4);
interfaceinvoke v13.<java.util.List: boolean add(java.lang.Object)>(v14);
v12 = v12 + 1;
goto label3;
label4:
v15 = new io.smallrye.mutiny.operators.multi.MultiZipOp$FixedSizeArrayList;
specialinvoke v15.<io.smallrye.mutiny.operators.multi.MultiZipOp$FixedSizeArrayList: void <init>(int)>(v3);
v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: java.util.List current> = v15;
return;
}
void subscribe(java.util.List)
{
io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator v0;
java.util.concurrent.atomic.AtomicReference v6;
java.util.concurrent.Flow$Subscriber v11;
java.util.List v1, v9;
int v2, v3;
java.lang.Object v10, v7, v8;
boolean v4, v5;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator;
v1 := @parameter0: java.util.List;
v2 = 0;
label1:
v3 = interfaceinvoke v1.<java.util.List: int size()>();
if v2 >= v3 goto label4;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: boolean cancelled>;
if v4 != 0 goto label2;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: boolean collectFailures>;
if v5 != 0 goto label3;
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: java.util.concurrent.atomic.AtomicReference failures>;
v7 = virtualinvoke v6.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v7 == null goto label3;
label2:
return;
label3:
v8 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(v2);
v9 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: java.util.List subscribers>;
v10 = interfaceinvoke v9.<java.util.List: java.lang.Object get(int)>(v2);
v11 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.Flow$Subscriber onMultiSubscription(java.util.concurrent.Flow$Publisher,java.util.concurrent.Flow$Subscriber)>(v8, v10);
interfaceinvoke v8.<java.util.concurrent.Flow$Publisher: void subscribe(java.util.concurrent.Flow$Subscriber)>(v11);
v2 = v2 + 1;
goto label1;
label4:
return;
}
public void request(long)
{
java.util.concurrent.atomic.AtomicLong v3;
byte v2;
io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator v0;
long v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 <= 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: java.util.concurrent.atomic.AtomicLong requested>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(java.util.concurrent.atomic.AtomicLong,long)>(v3, v1);
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: void drain()>();
label1:
return;
}
public void cancel()
{
io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator v0;
boolean v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: boolean cancelled>;
if v1 != 0 goto label1;
v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: boolean cancelled> = 1;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: void cancelAll()>();
label1:
return;
}
void error(io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber, java.lang.Throwable)
{
java.lang.Throwable v2;
io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator v0;
java.util.concurrent.atomic.AtomicReference v3;
boolean v4;
io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator;
v1 := @parameter0: io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber;
v2 := @parameter1: java.lang.Throwable;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: java.util.concurrent.atomic.AtomicReference failures>;
v4 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: boolean addFailure(java.util.concurrent.atomic.AtomicReference,java.lang.Throwable)>(v3, v2);
if v4 == 0 goto label1;
v1.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber: boolean done> = 1;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: void drain()>();
label1:
return;
}
void cancelAll()
{
java.util.List v1;
io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator v0;
java.util.Iterator v2;
java.lang.Object v4;
boolean v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: java.util.List subscribers>;
v2 = interfaceinvoke v1.<java.util.List: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v4.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber: void cancel()>();
goto label1;
label2:
return;
}
private void drain()
{
byte v10, v37, v55, v59;
java.lang.Throwable v32;
io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator v0;
long v61, v8, v9;
java.util.concurrent.atomic.AtomicLong v60, v7;
java.lang.NullPointerException v31;
java.util.concurrent.atomic.AtomicInteger v1, v62;
boolean v11, v12, v17, v21, v25, v26, v38, v39, v47, v51, v52, v57;
java.util.List v3, v5;
java.util.Queue v22, v48;
java.util.concurrent.atomic.AtomicReference v13, v15, v27, v33, v34, v40, v42, v53;
java.util.function.Function v29;
int v18, v2, v4, v44, v6, v63;
io.smallrye.mutiny.subscription.MultiSubscriber v16, v28, v35, v36, v43, v54;
java.util.Iterator v56;
java.lang.Object v14, v19, v20, v23, v24, v30, v41, v45, v46, v49, v50, v58;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: java.util.concurrent.atomic.AtomicInteger wip>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
if v2 == 0 goto label01;
return;
label01:
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: java.util.List subscribers>;
v4 = interfaceinvoke v3.<java.util.List: int size()>();
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: java.util.List current>;
v6 = 1;
label02:
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: java.util.concurrent.atomic.AtomicLong requested>;
v8 = virtualinvoke v7.<java.util.concurrent.atomic.AtomicLong: long get()>();
v9 = 0L;
label03:
v10 = v8 cmp v9;
if v10 == 0 goto label18;
v11 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: boolean cancelled>;
if v11 == 0 goto label04;
return;
label04:
v12 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: boolean collectFailures>;
if v12 != 0 goto label05;
v13 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: java.util.concurrent.atomic.AtomicReference failures>;
v14 = virtualinvoke v13.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v14 == null goto label05;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: void cancelAll()>();
v15 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: java.util.concurrent.atomic.AtomicReference failures>;
v16 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void terminateAndPropagate(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.Flow$Subscriber)>(v15, v16);
return;
label05:
v17 = 0;
v18 = 0;
label06:
if v18 >= v4 goto label14;
v19 = interfaceinvoke v3.<java.util.List: java.lang.Object get(int)>(v18);
v20 = interfaceinvoke v5.<java.util.List: java.lang.Object get(int)>(v18);
if v20 != null goto label13;
v21 = v19.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber: boolean done>;
v22 = v19.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber: java.util.Queue queue>;
if v22 == null goto label07;
v23 = interfaceinvoke v22.<java.util.Queue: java.lang.Object poll()>();
goto label08;
label07:
v23 = null;
label08:
v24 = v23;
if v23 != null goto label09;
v25 = 1;
goto label10;
label09:
v25 = 0;
label10:
v26 = v25;
if v21 == 0 goto label11;
if v25 == 0 goto label11;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: void cancelAll()>();
v27 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: java.util.concurrent.atomic.AtomicReference failures>;
v28 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void terminateAndPropagate(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.Flow$Subscriber)>(v27, v28);
return;
label11:
if v26 != 0 goto label12;
interfaceinvoke v5.<java.util.List: java.lang.Object set(int,java.lang.Object)>(v18, v24);
goto label13;
label12:
v17 = 1;
label13:
v18 = v18 + 1;
goto label06;
label14:
if v17 != 0 goto label18;
label15:
v29 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: java.util.function.Function combinator>;
v30 = interfaceinvoke v29.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v5);
if v30 != null goto label17;
v31 = new java.lang.NullPointerException;
specialinvoke v31.<java.lang.NullPointerException: void <init>(java.lang.String)>("The zipper method returned `null`");
throw v31;
label16:
v32 := @caughtexception;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: void cancelAll()>();
v33 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: java.util.concurrent.atomic.AtomicReference failures>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: boolean addFailure(java.util.concurrent.atomic.AtomicReference,java.lang.Throwable)>(v33, v32);
v34 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: java.util.concurrent.atomic.AtomicReference failures>;
v35 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void terminateAndPropagate(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.Flow$Subscriber)>(v34, v35);
return;
label17:
v36 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v36.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v30);
v9 = v9 + 1L;
interfaceinvoke v5.<java.util.List: void clear()>();
goto label03;
label18:
v37 = v8 cmp v9;
if v37 != 0 goto label28;
v38 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: boolean cancelled>;
if v38 == 0 goto label19;
return;
label19:
v39 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: boolean collectFailures>;
if v39 != 0 goto label20;
v40 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: java.util.concurrent.atomic.AtomicReference failures>;
v41 = virtualinvoke v40.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v41 == null goto label20;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: void cancelAll()>();
v42 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: java.util.concurrent.atomic.AtomicReference failures>;
v43 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void terminateAndPropagate(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.Flow$Subscriber)>(v42, v43);
return;
label20:
v44 = 0;
label21:
if v44 >= v4 goto label28;
v45 = interfaceinvoke v3.<java.util.List: java.lang.Object get(int)>(v44);
v46 = interfaceinvoke v5.<java.util.List: java.lang.Object get(int)>(v44);
if v46 != null goto label27;
v47 = v45.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber: boolean done>;
v48 = v45.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber: java.util.Queue queue>;
if v48 == null goto label22;
v49 = interfaceinvoke v48.<java.util.Queue: java.lang.Object poll()>();
goto label23;
label22:
v49 = null;
label23:
v50 = v49;
if v49 != null goto label24;
v51 = 1;
goto label25;
label24:
v51 = 0;
label25:
v52 = v51;
if v47 == 0 goto label26;
if v51 == 0 goto label26;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: void cancelAll()>();
v53 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: java.util.concurrent.atomic.AtomicReference failures>;
v54 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void terminateAndPropagate(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.Flow$Subscriber)>(v53, v54);
return;
label26:
if v52 != 0 goto label27;
interfaceinvoke v5.<java.util.List: java.lang.Object set(int,java.lang.Object)>(v44, v50);
label27:
v44 = v44 + 1;
goto label21;
label28:
v55 = v9 cmp 0L;
if v55 == 0 goto label31;
v56 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
label29:
v57 = interfaceinvoke v56.<java.util.Iterator: boolean hasNext()>();
if v57 == 0 goto label30;
v58 = interfaceinvoke v56.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v58.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber: void request(long)>(v9);
goto label29;
label30:
v59 = v8 cmp 9223372036854775807L;
if v59 == 0 goto label31;
v60 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: java.util.concurrent.atomic.AtomicLong requested>;
v61 = neg v9;
virtualinvoke v60.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(v61);
label31:
v62 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: java.util.concurrent.atomic.AtomicInteger wip>;
v63 = neg v6;
v6 = virtualinvoke v62.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(v63);
if v6 != 0 goto label02;
return;
catch java.lang.Throwable from label15 to label16 with label16;
}
}