abstract class io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter extends java.lang.Object implements io.smallrye.mutiny.subscription.MultiEmitter, java.util.concurrent.Flow$Subscription, io.smallrye.mutiny.subscription.ContextSupport
{
protected final java.util.concurrent.atomic.AtomicLong requested;
protected final io.smallrye.mutiny.subscription.MultiSubscriber downstream;
private final java.util.concurrent.atomic.AtomicReference onTermination;
private final java.util.concurrent.atomic.AtomicBoolean disposed;
private static final java.lang.Runnable CLEARED;
void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)
{
java.util.concurrent.atomic.AtomicLong v2;
io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter v0;
java.util.concurrent.atomic.AtomicBoolean v3;
java.util.concurrent.atomic.AtomicReference v4;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v2.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: java.util.concurrent.atomic.AtomicLong requested> = v2;
v3 = new java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v3.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: java.util.concurrent.atomic.AtomicBoolean disposed> = v3;
v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: io.smallrye.mutiny.subscription.MultiSubscriber downstream> = v1;
v4 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v4.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: java.util.concurrent.atomic.AtomicReference onTermination> = v4;
return;
}
public io.smallrye.mutiny.Context context()
{
io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter v0;
io.smallrye.mutiny.Context v4, v5;
io.smallrye.mutiny.subscription.MultiSubscriber v1, v3;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter;
v1 = v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v2 = v1 instanceof io.smallrye.mutiny.subscription.ContextSupport;
if v2 == 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v4 = interfaceinvoke v3.<io.smallrye.mutiny.subscription.ContextSupport: io.smallrye.mutiny.Context context()>();
return v4;
label1:
v5 = staticinvoke <io.smallrye.mutiny.Context: io.smallrye.mutiny.Context empty()>();
return v5;
}
public long requested()
{
io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter v0;
java.util.concurrent.atomic.AtomicLong v1;
long v2;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter;
v1 = v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: java.util.concurrent.atomic.AtomicLong requested>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: long get()>();
return v2;
}
public void complete()
{
io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter v0;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: void completion()>();
return;
}
protected void completion()
{
java.lang.Throwable v3;
io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter v0;
io.smallrye.mutiny.subscription.MultiSubscriber v2;
boolean v1;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter;
v1 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: boolean isCancelled()>();
if v1 == 0 goto label1;
return;
label1:
v2 = v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v2.<io.smallrye.mutiny.subscription.MultiSubscriber: void onCompletion()>();
label2:
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: void cleanup()>();
goto label4;
label3:
v3 := @caughtexception;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: void cleanup()>();
throw v3;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public boolean isCancelled()
{
io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter v0;
java.lang.Object v2;
java.lang.Runnable v3;
java.util.concurrent.atomic.AtomicReference v1;
boolean v4;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter;
v1 = v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: java.util.concurrent.atomic.AtomicReference onTermination>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v3 = <io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: java.lang.Runnable CLEARED>;
if v2 != v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
protected void cleanup()
{
io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter v0;
java.util.concurrent.atomic.AtomicBoolean v1;
java.lang.Object v4;
java.lang.Runnable v3, v5;
java.util.concurrent.atomic.AtomicReference v2;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter;
v1 = v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: java.util.concurrent.atomic.AtomicBoolean disposed>;
virtualinvoke v1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);
v2 = v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: java.util.concurrent.atomic.AtomicReference onTermination>;
v3 = <io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: java.lang.Runnable CLEARED>;
v4 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(v3);
if v4 == null goto label1;
v5 = <io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: java.lang.Runnable CLEARED>;
if v4 == v5 goto label1;
interfaceinvoke v4.<java.lang.Runnable: void run()>();
label1:
return;
}
public final void fail(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter v0;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter;
v1 := @parameter0: java.lang.Throwable;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: void failed(java.lang.Throwable)>(v1);
return;
}
protected void failed(java.lang.Throwable)
{
java.lang.Throwable v1, v5;
io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter v0;
io.smallrye.mutiny.subscription.MultiSubscriber v4;
java.lang.NullPointerException v2;
boolean v3;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter;
v1 := @parameter0: java.lang.Throwable;
if v1 != null goto label1;
v2 = new java.lang.NullPointerException;
specialinvoke v2.<java.lang.NullPointerException: void <init>(java.lang.String)>("onError called with null.");
v1 = v2;
label1:
v3 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: boolean isCancelled()>();
if v3 == 0 goto label2;
return;
label2:
v4 = v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v4.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v1);
label3:
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: void cleanup()>();
goto label5;
label4:
v5 := @caughtexception;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: void cleanup()>();
throw v5;
label5:
return;
catch java.lang.Throwable from label2 to label3 with label4;
}
public final void cancel()
{
io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter v0;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: void cleanup()>();
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: void onUnsubscribed()>();
return;
}
void onUnsubscribed()
{
io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter v0;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter;
return;
}
public final void request(long)
{
java.util.concurrent.atomic.AtomicLong v3;
byte v2;
io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter v0;
long v1;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 <= 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: java.util.concurrent.atomic.AtomicLong requested>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(java.util.concurrent.atomic.AtomicLong,long)>(v3, v1);
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: void onRequested()>();
label1:
return;
}
void onRequested()
{
io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter v0;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter;
return;
}
public io.smallrye.mutiny.subscription.MultiEmitter onTermination(java.lang.Runnable)
{
io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter v0;
java.util.concurrent.atomic.AtomicBoolean v2, v5;
java.lang.Runnable v1;
java.util.concurrent.atomic.AtomicReference v4;
boolean v3, v6;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter;
v1 := @parameter0: java.lang.Runnable;
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "onTermination");
v2 = v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: java.util.concurrent.atomic.AtomicBoolean disposed>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
if v3 != 0 goto label1;
v4 = v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: java.util.concurrent.atomic.AtomicReference onTermination>;
virtualinvoke v4.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(v1);
v5 = v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: java.util.concurrent.atomic.AtomicBoolean disposed>;
v6 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
if v6 == 0 goto label2;
interfaceinvoke v1.<java.lang.Runnable: void run()>();
goto label2;
label1:
interfaceinvoke v1.<java.lang.Runnable: void run()>();
label2:
return v0;
}
public io.smallrye.mutiny.subscription.MultiEmitter serialize()
{
io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter v1;
io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter v0;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter;
v1 = new io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter;
specialinvoke v1.<io.smallrye.mutiny.operators.multi.builders.SerializedMultiEmitter: void <init>(io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter)>(v0);
return v1;
}
static void <clinit>()
{
java.lang.Runnable v0;
v0 = staticinvoke <io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter$lambda_static_0__2683: java.lang.Runnable bootstrap$()>();
<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: java.lang.Runnable CLEARED> = v0;
return;
}
}