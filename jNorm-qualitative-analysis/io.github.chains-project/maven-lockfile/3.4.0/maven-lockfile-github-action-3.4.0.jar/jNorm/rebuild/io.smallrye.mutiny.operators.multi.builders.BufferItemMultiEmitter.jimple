public class io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter extends io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter
{
private final java.util.Queue queue;
private java.lang.Throwable failure;
private volatile boolean done;
private final java.util.concurrent.atomic.AtomicInteger wip;
void <init>(io.smallrye.mutiny.subscription.MultiSubscriber, java.util.Queue)
{
java.util.concurrent.atomic.AtomicInteger v3;
io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter v0;
java.util.Queue v2;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 := @parameter1: java.util.Queue;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v1);
v3 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v3.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter: java.util.concurrent.atomic.AtomicInteger wip> = v3;
v0.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter: java.util.Queue queue> = v2;
return;
}
public io.smallrye.mutiny.subscription.MultiEmitter emit(java.lang.Object)
{
io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter$EmitterBufferOverflowException v7;
io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter v0;
java.lang.NullPointerException v4;
java.lang.Object v1;
java.util.Queue v5;
boolean v2, v3, v6;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter: boolean done>;
if v2 != 0 goto label1;
v3 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter: boolean isCancelled()>();
if v3 == 0 goto label2;
label1:
return v0;
label2:
if v1 != null goto label3;
v4 = new java.lang.NullPointerException;
specialinvoke v4.<java.lang.NullPointerException: void <init>(java.lang.String)>("`emit` called with `null`.");
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter: void fail(java.lang.Throwable)>(v4);
return v0;
label3:
v5 = v0.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter: java.util.Queue queue>;
v6 = interfaceinvoke v5.<java.util.Queue: boolean offer(java.lang.Object)>(v1);
if v6 == 0 goto label4;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter: void drain()>();
goto label5;
label4:
v7 = new io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter$EmitterBufferOverflowException;
specialinvoke v7.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter$EmitterBufferOverflowException: void <init>()>();
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter: void fail(java.lang.Throwable)>(v7);
label5:
return v0;
}
protected void cleanup()
{
io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter v0;
java.util.Queue v1;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter;
v1 = v0.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter: java.util.Queue queue>;
interfaceinvoke v1.<java.util.Queue: void clear()>();
specialinvoke v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: void cleanup()>();
return;
}
public void failed(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter v0;
java.lang.NullPointerException v4;
boolean v2, v3;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter: boolean done>;
if v2 != 0 goto label1;
v3 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter: boolean isCancelled()>();
if v3 == 0 goto label2;
label1:
return;
label2:
if v1 != null goto label3;
v4 = new java.lang.NullPointerException;
specialinvoke v4.<java.lang.NullPointerException: void <init>(java.lang.String)>("onError called with null.");
v1 = v4;
label3:
v0.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter: java.lang.Throwable failure> = v1;
v0.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter: boolean done> = 1;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter: void drain()>();
return;
}
public void completion()
{
io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter v0;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter;
v0.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter: boolean done> = 1;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter: void drain()>();
return;
}
void onRequested()
{
io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter v0;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter: void drain()>();
return;
}
void onUnsubscribed()
{
java.util.concurrent.atomic.AtomicInteger v1;
int v2;
io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter v0;
java.util.Queue v3;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter;
v1 = v0.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter: java.util.concurrent.atomic.AtomicInteger wip>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
if v2 != 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter: java.util.Queue queue>;
interfaceinvoke v3.<java.util.Queue: void clear()>();
label1:
return;
}
void drain()
{
java.lang.Throwable v14, v15, v17, v22, v23;
io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter v0;
long v6, v7;
byte v18, v24, v8;
java.util.concurrent.atomic.AtomicInteger v1, v26;
int v2, v27, v3;
io.smallrye.mutiny.subscription.MultiSubscriber v16;
boolean v10, v12, v13, v19, v20, v21, v9;
java.util.concurrent.atomic.AtomicLong v25, v5;
java.lang.Object v11;
java.util.Queue v4;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter;
v1 = v0.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter: java.util.concurrent.atomic.AtomicInteger wip>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
if v2 == 0 goto label01;
return;
label01:
v3 = 1;
v4 = v0.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter: java.util.Queue queue>;
label02:
v5 = v0.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter: java.util.concurrent.atomic.AtomicLong requested>;
v6 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicLong: long get()>();
v7 = 0L;
label03:
v8 = v7 cmp v6;
if v8 == 0 goto label14;
v9 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter: boolean isCancelled()>();
if v9 == 0 goto label04;
interfaceinvoke v4.<java.util.Queue: void clear()>();
return;
label04:
v10 = v0.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter: boolean done>;
v11 = interfaceinvoke v4.<java.util.Queue: java.lang.Object poll()>();
if v11 != null goto label05;
v12 = 1;
goto label06;
label05:
v12 = 0;
label06:
v13 = v12;
if v10 == 0 goto label09;
if v12 == 0 goto label09;
v14 = v0.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter: java.lang.Throwable failure>;
if v14 == null goto label07;
v15 = v0.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter: java.lang.Throwable failure>;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: void failed(java.lang.Throwable)>(v15);
goto label08;
label07:
specialinvoke v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: void completion()>();
label08:
return;
label09:
if v13 != 0 goto label14;
label10:
v16 = v0.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v16.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v11);
label11:
goto label13;
label12:
v17 := @caughtexception;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter: void cancel()>();
label13:
v7 = v7 + 1L;
goto label03;
label14:
v18 = v7 cmp v6;
if v18 != 0 goto label18;
v19 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter: boolean isCancelled()>();
if v19 == 0 goto label15;
interfaceinvoke v4.<java.util.Queue: void clear()>();
return;
label15:
v20 = v0.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter: boolean done>;
v21 = interfaceinvoke v4.<java.util.Queue: boolean isEmpty()>();
if v20 == 0 goto label18;
if v21 == 0 goto label18;
v22 = v0.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter: java.lang.Throwable failure>;
if v22 == null goto label16;
v23 = v0.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter: java.lang.Throwable failure>;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: void failed(java.lang.Throwable)>(v23);
goto label17;
label16:
specialinvoke v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: void completion()>();
label17:
return;
label18:
v24 = v7 cmp 0L;
if v24 == 0 goto label19;
v25 = v0.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter: java.util.concurrent.atomic.AtomicLong requested>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long produced(java.util.concurrent.atomic.AtomicLong,long)>(v25, v7);
label19:
v26 = v0.<io.smallrye.mutiny.operators.multi.builders.BufferItemMultiEmitter: java.util.concurrent.atomic.AtomicInteger wip>;
v27 = neg v3;
v3 = virtualinvoke v26.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(v27);
if v3 != 0 goto label02;
return;
catch java.lang.Throwable from label10 to label11 with label12;
}
}