final class io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription extends java.lang.Object implements java.util.concurrent.Flow$Subscription
{
private final io.smallrye.mutiny.subscription.MultiSubscriber downstream;
private final java.util.List collection;
private int index;
private volatile boolean cancelled;
java.util.concurrent.atomic.AtomicLong requested;
public void <init>(io.smallrye.mutiny.subscription.MultiSubscriber, java.util.Collection)
{
java.util.concurrent.atomic.AtomicLong v3;
java.util.List v4;
io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription v0;
java.util.Collection v2;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 := @parameter1: java.util.Collection;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v3.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription: java.util.concurrent.atomic.AtomicLong requested> = v3;
v0.<io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription: io.smallrye.mutiny.subscription.MultiSubscriber downstream> = v1;
v4 = specialinvoke v0.<io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription: java.util.List wrapIfNotList(java.util.Collection)>(v2);
v0.<io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription: java.util.List collection> = v4;
return;
}
private java.util.List wrapIfNotList(java.util.Collection)
{
io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription v0;
java.util.Collection v1;
boolean v2;
java.util.ArrayList v3;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription;
v1 := @parameter0: java.util.Collection;
v2 = v1 instanceof java.util.List;
if v2 == 0 goto label1;
return v1;
label1:
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>(java.util.Collection)>(v1);
return v3;
}
public void request(long)
{
long v1, v4;
java.lang.IllegalArgumentException v8;
java.util.concurrent.atomic.AtomicLong v3;
byte v2, v5, v6;
io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription v0;
io.smallrye.mutiny.subscription.MultiSubscriber v7;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 <= 0 goto label2;
v3 = v0.<io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription: java.util.concurrent.atomic.AtomicLong requested>;
v4 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(java.util.concurrent.atomic.AtomicLong,long)>(v3, v1);
v5 = v4 cmp 0L;
if v5 != 0 goto label3;
v6 = v1 cmp 9223372036854775807L;
if v6 != 0 goto label1;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription: void produceWithoutBackPressure()>();
goto label3;
label1:
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription: void followRequests(long)>(v1);
goto label3;
label2:
v7 = v0.<io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v8 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: java.lang.IllegalArgumentException getInvalidRequestException()>();
interfaceinvoke v7.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v8);
label3:
return;
}
void followRequests(long)
{
long v1;
byte v13, v16, v7;
io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription v0;
int v15, v3, v4, v5;
io.smallrye.mutiny.subscription.MultiSubscriber v11, v8;
boolean v10, v6;
java.util.concurrent.atomic.AtomicLong v12, v14;
java.util.List v2;
java.lang.Object v9;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription;
v1 := @parameter0: long;
v2 = v0.<io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription: java.util.List collection>;
v3 = interfaceinvoke v2.<java.util.List: int size()>();
v4 = v0.<io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription: int index>;
v5 = 0;
label1:
v6 = v0.<io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription: boolean cancelled>;
if v6 == 0 goto label2;
return;
label2:
if v4 == v3 goto label4;
v7 = v5 cmp v1;
if v7 == 0 goto label4;
v8 = v0.<io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v9 = interfaceinvoke v2.<java.util.List: java.lang.Object get(int)>(v4);
interfaceinvoke v8.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v9);
v10 = v0.<io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription: boolean cancelled>;
if v10 == 0 goto label3;
return;
label3:
v4 = v4 + 1;
v5 = v5 + 1;
goto label2;
label4:
if v4 != v3 goto label5;
v11 = v0.<io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v11.<io.smallrye.mutiny.subscription.MultiSubscriber: void onCompletion()>();
return;
label5:
v12 = v0.<io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription: java.util.concurrent.atomic.AtomicLong requested>;
v1 = virtualinvoke v12.<java.util.concurrent.atomic.AtomicLong: long get()>();
v13 = v1 cmp v5;
if v13 != 0 goto label1;
v0.<io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription: int index> = v4;
v14 = v0.<io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription: java.util.concurrent.atomic.AtomicLong requested>;
v15 = neg v5;
v1 = virtualinvoke v14.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(v15);
v16 = v1 cmp 0L;
if v16 != 0 goto label6;
return;
label6:
v5 = 0;
goto label1;
}
void produceWithoutBackPressure()
{
java.util.List v1, v4;
io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription v0;
int v2, v3;
java.lang.Object v5;
io.smallrye.mutiny.subscription.MultiSubscriber v7, v9;
boolean v6, v8;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription;
v1 = v0.<io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription: java.util.List collection>;
v2 = interfaceinvoke v1.<java.util.List: int size()>();
v3 = v0.<io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription: int index>;
label1:
if v3 >= v2 goto label3;
v4 = v0.<io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription: java.util.List collection>;
v5 = interfaceinvoke v4.<java.util.List: java.lang.Object get(int)>(v3);
v6 = v0.<io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription: boolean cancelled>;
if v6 == 0 goto label2;
return;
label2:
v7 = v0.<io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v7.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v5);
v3 = v3 + 1;
goto label1;
label3:
v8 = v0.<io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription: boolean cancelled>;
if v8 == 0 goto label4;
return;
label4:
v9 = v0.<io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v9.<io.smallrye.mutiny.subscription.MultiSubscriber: void onCompletion()>();
return;
}
public void cancel()
{
io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription v0;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription;
v0.<io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription: boolean cancelled> = 1;
return;
}
}