public class io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti extends io.smallrye.mutiny.operators.AbstractMulti
{
private final java.util.Collection collection;
public transient void <init>(java.lang.Object[])
{
java.util.List v3;
java.lang.Object[] v1, v2;
io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti v0;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti;
v1 := @parameter0: java.lang.Object[];
specialinvoke v0.<io.smallrye.mutiny.operators.AbstractMulti: void <init>()>();
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object[] doesNotContainNull(java.lang.Object[],java.lang.String)>(v1, "array");
v3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v2);
v0.<io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti: java.util.Collection collection> = v3;
return;
}
public void <init>(java.util.Collection)
{
java.util.Collection v1, v3;
java.lang.Iterable v2;
io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti v0;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti;
v1 := @parameter0: java.util.Collection;
specialinvoke v0.<io.smallrye.mutiny.operators.AbstractMulti: void <init>()>();
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Iterable doesNotContainNull(java.lang.Iterable,java.lang.String)>(v1, "collection");
v3 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>(v2);
v0.<io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti: java.util.Collection collection> = v3;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)
{
io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription v4;
java.util.Collection v2, v5;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
boolean v3;
io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti v0;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNullNpe(java.lang.Object,java.lang.String)>(v1, "subscriber");
v2 = v0.<io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti: java.util.Collection collection>;
v3 = interfaceinvoke v2.<java.util.Collection: boolean isEmpty()>();
if v3 == 0 goto label1;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void complete(java.util.concurrent.Flow$Subscriber)>(v1);
return;
label1:
v4 = new io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription;
v5 = v0.<io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti: java.util.Collection collection>;
specialinvoke v4.<io.smallrye.mutiny.operators.multi.builders.CollectionBasedMulti$CollectionSubscription: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber,java.util.Collection)>(v1, v5);
interfaceinvoke v1.<io.smallrye.mutiny.subscription.MultiSubscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v4);
return;
}
}