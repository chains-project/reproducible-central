final class io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter extends io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter
{
private final java.util.concurrent.atomic.AtomicReference queue;
private java.lang.Throwable failure;
private volatile boolean done;
private final java.util.concurrent.atomic.AtomicInteger wip;
void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)
{
io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter v0;
java.util.concurrent.atomic.AtomicInteger v3;
java.util.concurrent.atomic.AtomicReference v2;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v1);
v2 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v2.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter: java.util.concurrent.atomic.AtomicReference queue> = v2;
v3 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v3.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter: java.util.concurrent.atomic.AtomicInteger wip> = v3;
return;
}
public io.smallrye.mutiny.subscription.MultiEmitter emit(java.lang.Object)
{
java.lang.Object v1;
io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter v0;
java.util.concurrent.atomic.AtomicReference v2;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter: java.util.concurrent.atomic.AtomicReference queue>;
virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(v1);
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter: void drain()>();
return v0;
}
public void failed(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter v0;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter;
v1 := @parameter0: java.lang.Throwable;
v0.<io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter: java.lang.Throwable failure> = v1;
v0.<io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter: boolean done> = 1;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter: void drain()>();
return;
}
public void completion()
{
io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter v0;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter;
v0.<io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter: boolean done> = 1;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter: void drain()>();
return;
}
void onRequested()
{
io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter v0;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter: void drain()>();
return;
}
void onUnsubscribed()
{
io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter v0;
java.util.concurrent.atomic.AtomicInteger v1;
int v2;
java.util.concurrent.atomic.AtomicReference v3;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter;
v1 = v0.<io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter: java.util.concurrent.atomic.AtomicInteger wip>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
if v2 != 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter: java.util.concurrent.atomic.AtomicReference queue>;
virtualinvoke v3.<java.util.concurrent.atomic.AtomicReference: void lazySet(java.lang.Object)>(null);
label1:
return;
}
void drain()
{
java.lang.Throwable v14, v21;
long v6, v7;
java.util.concurrent.atomic.AtomicReference v4;
byte v16, v22, v8;
java.util.concurrent.atomic.AtomicInteger v1, v24;
int v2, v25, v3;
io.smallrye.mutiny.subscription.MultiSubscriber v15;
boolean v10, v12, v13, v17, v18, v20, v9;
io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter v0;
java.util.concurrent.atomic.AtomicLong v23, v5;
java.lang.Object v11, v19;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter;
v1 = v0.<io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter: java.util.concurrent.atomic.AtomicInteger wip>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
if v2 == 0 goto label01;
return;
label01:
v3 = 1;
v4 = v0.<io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter: java.util.concurrent.atomic.AtomicReference queue>;
label02:
v5 = v0.<io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter: java.util.concurrent.atomic.AtomicLong requested>;
v6 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicLong: long get()>();
v7 = 0L;
label03:
v8 = v7 cmp v6;
if v8 == 0 goto label10;
v9 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter: boolean isCancelled()>();
if v9 == 0 goto label04;
virtualinvoke v4.<java.util.concurrent.atomic.AtomicReference: void lazySet(java.lang.Object)>(null);
return;
label04:
v10 = v0.<io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter: boolean done>;
v11 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(null);
if v11 != null goto label05;
v12 = 1;
goto label06;
label05:
v12 = 0;
label06:
v13 = v12;
if v10 == 0 goto label09;
if v12 == 0 goto label09;
v14 = v0.<io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter: java.lang.Throwable failure>;
if v14 == null goto label07;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: void failed(java.lang.Throwable)>(v14);
goto label08;
label07:
specialinvoke v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: void completion()>();
label08:
return;
label09:
if v13 != 0 goto label10;
v15 = v0.<io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v15.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v11);
v7 = v7 + 1L;
goto label03;
label10:
v16 = v7 cmp v6;
if v16 != 0 goto label16;
v17 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter: boolean isCancelled()>();
if v17 == 0 goto label11;
virtualinvoke v4.<java.util.concurrent.atomic.AtomicReference: void lazySet(java.lang.Object)>(null);
return;
label11:
v18 = v0.<io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter: boolean done>;
v19 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v19 != null goto label12;
v20 = 1;
goto label13;
label12:
v20 = 0;
label13:
if v18 == 0 goto label16;
if v20 == 0 goto label16;
v21 = v0.<io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter: java.lang.Throwable failure>;
if v21 == null goto label14;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: void failed(java.lang.Throwable)>(v21);
goto label15;
label14:
specialinvoke v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: void completion()>();
label15:
return;
label16:
v22 = v7 cmp 0L;
if v22 == 0 goto label17;
v23 = v0.<io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter: java.util.concurrent.atomic.AtomicLong requested>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long produced(java.util.concurrent.atomic.AtomicLong,long)>(v23, v7);
label17:
v24 = v0.<io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$DropLatestOnOverflowMultiEmitter: java.util.concurrent.atomic.AtomicInteger wip>;
v25 = neg v3;
v3 = virtualinvoke v24.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(v25);
if v3 != 0 goto label02;
return;
}
}