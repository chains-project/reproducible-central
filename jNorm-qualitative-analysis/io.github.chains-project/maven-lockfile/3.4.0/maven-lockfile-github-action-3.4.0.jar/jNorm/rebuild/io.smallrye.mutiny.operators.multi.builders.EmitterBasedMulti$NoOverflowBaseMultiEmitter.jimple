abstract class io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$NoOverflowBaseMultiEmitter extends io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter
{
void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)
{
io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$NoOverflowBaseMultiEmitter v0;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$NoOverflowBaseMultiEmitter;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.builders.BaseMultiEmitter: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v1);
return;
}
public final io.smallrye.mutiny.subscription.MultiEmitter emit(java.lang.Object)
{
java.util.concurrent.atomic.AtomicLong v2, v6;
byte v4;
io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$NoOverflowBaseMultiEmitter v0;
java.lang.Object v1;
long v3;
io.smallrye.mutiny.subscription.MultiSubscriber v5;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$NoOverflowBaseMultiEmitter;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$NoOverflowBaseMultiEmitter: java.util.concurrent.atomic.AtomicLong requested>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicLong: long get()>();
v4 = v3 cmp 0L;
if v4 == 0 goto label1;
v5 = v0.<io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$NoOverflowBaseMultiEmitter: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v5.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v1);
v6 = v0.<io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$NoOverflowBaseMultiEmitter: java.util.concurrent.atomic.AtomicLong requested>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long produced(java.util.concurrent.atomic.AtomicLong,long)>(v6, 1L);
goto label2;
label1:
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.EmitterBasedMulti$NoOverflowBaseMultiEmitter: void onOverflow()>();
label2:
return v0;
}
abstract void onOverflow();
}