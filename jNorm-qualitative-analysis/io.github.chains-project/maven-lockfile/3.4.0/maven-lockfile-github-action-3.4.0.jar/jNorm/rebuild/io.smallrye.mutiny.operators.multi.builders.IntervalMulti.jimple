public class io.smallrye.mutiny.operators.multi.builders.IntervalMulti extends io.smallrye.mutiny.operators.AbstractMulti
{
private final java.util.concurrent.ScheduledExecutorService executor;
private final java.time.Duration initialDelay;
private final java.time.Duration period;
public void <init>(java.time.Duration, java.time.Duration, java.util.concurrent.ScheduledExecutorService)
{
java.time.Duration v1, v2, v4, v5;
java.util.concurrent.ScheduledExecutorService v3;
java.lang.Object v6;
io.smallrye.mutiny.operators.multi.builders.IntervalMulti v0;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.IntervalMulti;
v1 := @parameter0: java.time.Duration;
v2 := @parameter1: java.time.Duration;
v3 := @parameter2: java.util.concurrent.ScheduledExecutorService;
specialinvoke v0.<io.smallrye.mutiny.operators.AbstractMulti: void <init>()>();
v4 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.time.Duration validate(java.time.Duration,java.lang.String)>(v1, "initialDelay");
v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti: java.time.Duration initialDelay> = v4;
v5 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.time.Duration validate(java.time.Duration,java.lang.String)>(v2, "period");
v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti: java.time.Duration period> = v5;
v6 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v3, "executor");
v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti: java.util.concurrent.ScheduledExecutorService executor> = v6;
return;
}
public void <init>(java.time.Duration, java.util.concurrent.ScheduledExecutorService)
{
java.time.Duration v1, v3;
java.util.concurrent.ScheduledExecutorService v2;
java.lang.Object v4;
io.smallrye.mutiny.operators.multi.builders.IntervalMulti v0;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.IntervalMulti;
v1 := @parameter0: java.time.Duration;
v2 := @parameter1: java.util.concurrent.ScheduledExecutorService;
specialinvoke v0.<io.smallrye.mutiny.operators.AbstractMulti: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti: java.time.Duration initialDelay> = null;
v3 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.time.Duration validate(java.time.Duration,java.lang.String)>(v1, "period");
v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti: java.time.Duration period> = v3;
v4 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v2, "executor");
v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti: java.util.concurrent.ScheduledExecutorService executor> = v4;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)
{
java.time.Duration v3, v4;
java.util.concurrent.ScheduledExecutorService v5;
io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable v2;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
io.smallrye.mutiny.operators.multi.builders.IntervalMulti v0;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.IntervalMulti;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 = new io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable;
v3 = v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti: java.time.Duration period>;
v4 = v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti: java.time.Duration initialDelay>;
v5 = v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti: java.util.concurrent.ScheduledExecutorService executor>;
specialinvoke v2.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber,java.time.Duration,java.time.Duration,java.util.concurrent.ScheduledExecutorService)>(v1, v3, v4, v5);
interfaceinvoke v1.<io.smallrye.mutiny.subscription.MultiSubscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v2);
return;
}
}