public class io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection extends java.lang.Object implements java.lang.Runnable, java.util.function.Consumer
{
private static final io.smallrye.mutiny.subscription.Cancellable CANCELLED;
private final io.smallrye.mutiny.operators.multi.multicast.MultiReferenceCount parent;
private final io.smallrye.mutiny.subscription.MultiSubscriber subscriber;
private final java.util.concurrent.atomic.AtomicReference onCancellation;
private io.smallrye.mutiny.subscription.Cancellable timer;
private long subscriberCount;
private boolean connected;
void <init>(io.smallrye.mutiny.operators.multi.multicast.MultiReferenceCount, io.smallrye.mutiny.subscription.MultiSubscriber)
{
io.smallrye.mutiny.operators.multi.multicast.MultiReferenceCount v1;
java.util.concurrent.atomic.AtomicReference v3;
io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection v0;
io.smallrye.mutiny.subscription.MultiSubscriber v2;
v0 := @this: io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection;
v1 := @parameter0: io.smallrye.mutiny.operators.multi.multicast.MultiReferenceCount;
v2 := @parameter1: io.smallrye.mutiny.subscription.MultiSubscriber;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v3.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: java.util.concurrent.atomic.AtomicReference onCancellation> = v3;
v0.<io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: io.smallrye.mutiny.operators.multi.multicast.MultiReferenceCount parent> = v1;
v0.<io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: io.smallrye.mutiny.subscription.MultiSubscriber subscriber> = v2;
return;
}
public void run()
{
io.smallrye.mutiny.operators.multi.multicast.MultiReferenceCount v1;
io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection v0;
v0 := @this: io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection;
v1 = v0.<io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: io.smallrye.mutiny.operators.multi.multicast.MultiReferenceCount parent>;
virtualinvoke v1.<io.smallrye.mutiny.operators.multi.multicast.MultiReferenceCount: void timeout(io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection)>(v0);
return;
}
public void accept(io.smallrye.mutiny.subscription.Cancellable)
{
java.lang.Object v3;
io.smallrye.mutiny.subscription.Cancellable v1, v4;
java.util.concurrent.atomic.AtomicReference v2, v5;
io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection v0;
boolean v6;
v0 := @this: io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection;
v1 := @parameter0: io.smallrye.mutiny.subscription.Cancellable;
label1:
v2 = v0.<io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: java.util.concurrent.atomic.AtomicReference onCancellation>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v4 = <io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: io.smallrye.mutiny.subscription.Cancellable CANCELLED>;
if v3 != v4 goto label2;
if v1 == null goto label2;
interfaceinvoke v1.<io.smallrye.mutiny.subscription.Cancellable: void cancel()>();
label2:
v5 = v0.<io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: java.util.concurrent.atomic.AtomicReference onCancellation>;
v6 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(v3, v1);
if v6 == 0 goto label1;
return;
}
public synchronized boolean shouldConnectAfterIncrement(int)
{
byte v6;
int v1;
long v2, v3, v5;
io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection v0;
boolean v4;
v0 := @this: io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection;
v1 := @parameter0: int;
v2 = v0.<io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: long subscriberCount>;
v3 = v2 + 1L;
v0.<io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: long subscriberCount> = v3;
v4 = v0.<io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: boolean connected>;
if v4 != 0 goto label1;
v5 = v0.<io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: long subscriberCount>;
v6 = v5 cmp v1;
if v6 != 0 goto label1;
v0.<io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: boolean connected> = 1;
return 1;
label1:
return 0;
}
public long getSubscriberCount()
{
long v1;
io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection v0;
v0 := @this: io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection;
v1 = v0.<io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: long subscriberCount>;
return v1;
}
public boolean isConnected()
{
io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection v0;
boolean v1;
v0 := @this: io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection;
v1 = v0.<io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: boolean connected>;
return v1;
}
public void cancelTimerIf0()
{
java.lang.Throwable v5;
byte v2;
long v1;
io.smallrye.mutiny.subscription.Cancellable v3, v6;
io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection v0;
boolean v4;
v0 := @this: io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection;
entermonitor v0;
label1:
v1 = v0.<io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: long subscriberCount>;
v2 = v1 cmp 0L;
if v2 != 0 goto label2;
v3 = v0.<io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: io.smallrye.mutiny.subscription.Cancellable timer>;
if v3 == null goto label2;
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
exitmonitor v0;
label4:
goto label6;
label5:
v5 := @caughtexception;
exitmonitor v0;
throw v5;
label6:
if v4 == 0 goto label7;
v6 = v0.<io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: io.smallrye.mutiny.subscription.Cancellable timer>;
interfaceinvoke v6.<io.smallrye.mutiny.subscription.Cancellable: void cancel()>();
label7:
return;
catch java.lang.Throwable from label1 to label4 with label5;
}
public void cancel()
{
java.lang.Object v3;
io.smallrye.mutiny.subscription.Cancellable v2, v4;
java.util.concurrent.atomic.AtomicReference v1;
io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection v0;
v0 := @this: io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection;
v1 = v0.<io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: java.util.concurrent.atomic.AtomicReference onCancellation>;
v2 = <io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: io.smallrye.mutiny.subscription.Cancellable CANCELLED>;
v3 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(v2);
if v3 == null goto label1;
v4 = <io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: io.smallrye.mutiny.subscription.Cancellable CANCELLED>;
if v3 == v4 goto label1;
interfaceinvoke v3.<io.smallrye.mutiny.subscription.Cancellable: void cancel()>();
label1:
return;
}
synchronized boolean decrementAndReached0()
{
byte v2;
long v1, v3, v4;
io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection v0;
v0 := @this: io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection;
v1 = v0.<io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: long subscriberCount>;
v2 = v1 cmp 1L;
if v2 != 0 goto label1;
v0.<io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: long subscriberCount> = 0L;
return 1;
label1:
v3 = v0.<io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: long subscriberCount>;
v4 = v3 - 1L;
v0.<io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: long subscriberCount> = v4;
return 0;
}
synchronized long decrement()
{
long v1, v2, v3;
io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection v0;
v0 := @this: io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection;
v1 = v0.<io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: long subscriberCount>;
v2 = v1 - 1L;
v0.<io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: long subscriberCount> = v2;
v3 = v0.<io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: long subscriberCount>;
return v3;
}
synchronized void setTimer(io.smallrye.mutiny.subscription.Cancellable)
{
io.smallrye.mutiny.subscription.Cancellable v1, v2, v3, v4, v5;
io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection v0;
v0 := @this: io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection;
v1 := @parameter0: io.smallrye.mutiny.subscription.Cancellable;
v2 = v0.<io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: io.smallrye.mutiny.subscription.Cancellable timer>;
if v2 == null goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: io.smallrye.mutiny.subscription.Cancellable timer>;
v4 = <io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: io.smallrye.mutiny.subscription.Cancellable CANCELLED>;
if v3 == v4 goto label1;
v5 = v0.<io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: io.smallrye.mutiny.subscription.Cancellable timer>;
interfaceinvoke v5.<io.smallrye.mutiny.subscription.Cancellable: void cancel()>();
label1:
v0.<io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: io.smallrye.mutiny.subscription.Cancellable timer> = v1;
return;
}
public io.smallrye.mutiny.subscription.MultiSubscriber getSubscriber()
{
io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection v0;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection;
v1 = v0.<io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: io.smallrye.mutiny.subscription.MultiSubscriber subscriber>;
return v1;
}
static void <clinit>()
{
io.smallrye.mutiny.subscription.Cancellable v0;
v0 = staticinvoke <io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection$lambda_static_0__2680: io.smallrye.mutiny.subscription.Cancellable bootstrap$()>();
<io.smallrye.mutiny.operators.multi.multicast.ConnectableMultiConnection: io.smallrye.mutiny.subscription.Cancellable CANCELLED> = v0;
return;
}
}