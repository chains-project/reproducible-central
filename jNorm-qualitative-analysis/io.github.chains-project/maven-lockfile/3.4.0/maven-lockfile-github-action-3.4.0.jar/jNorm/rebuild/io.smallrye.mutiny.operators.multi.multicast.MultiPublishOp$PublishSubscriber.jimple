final class io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber extends java.lang.Object implements io.smallrye.mutiny.subscription.Cancellable, io.smallrye.mutiny.subscription.MultiSubscriber, io.smallrye.mutiny.subscription.ContextSupport
{
static final io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber[] EMPTY;
static final io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber[] TERMINATED;
final java.util.concurrent.atomic.AtomicReference current;
final int bufferSize;
final java.util.concurrent.atomic.AtomicReference subscribers;
final java.util.concurrent.atomic.AtomicBoolean shouldConnect;
final java.util.concurrent.atomic.AtomicReference upstream;
private final java.util.concurrent.atomic.AtomicReference failureOrCompletion;
private static final java.lang.Throwable COMPLETED;
private final java.util.Queue queue;
private final java.util.concurrent.atomic.AtomicBoolean cancelled;
private final java.util.concurrent.atomic.AtomicInteger wip;
private final io.smallrye.mutiny.Context context;
void <init>(java.util.concurrent.atomic.AtomicReference, int, io.smallrye.mutiny.Context)
{
java.util.concurrent.atomic.AtomicBoolean v10, v6;
io.smallrye.mutiny.Context v3;
java.util.concurrent.atomic.AtomicReference v1, v4, v5, v8;
java.util.function.Supplier v11;
io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber v0;
java.util.concurrent.atomic.AtomicInteger v7;
int v2;
io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber[] v9;
java.lang.Object v12;
v0 := @this: io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber;
v1 := @parameter0: java.util.concurrent.atomic.AtomicReference;
v2 := @parameter1: int;
v3 := @parameter2: io.smallrye.mutiny.Context;
specialinvoke v0.<java.lang.Object: void <init>()>();
v4 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v4.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicReference upstream> = v4;
v5 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v5.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicReference failureOrCompletion> = v5;
v6 = new java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v6.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicBoolean cancelled> = v6;
v7 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v7.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicInteger wip> = v7;
v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: io.smallrye.mutiny.Context context> = v3;
v8 = new java.util.concurrent.atomic.AtomicReference;
v9 = <io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber[] EMPTY>;
specialinvoke v8.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(v9);
v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicReference subscribers> = v8;
v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicReference current> = v1;
v10 = new java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v10.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicBoolean shouldConnect> = v10;
v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: int bufferSize> = v2;
v11 = staticinvoke <io.smallrye.mutiny.helpers.queues.Queues: java.util.function.Supplier get(int)>(v2);
v12 = interfaceinvoke v11.<java.util.function.Supplier: java.lang.Object get()>();
v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.Queue queue> = v12;
return;
}
public void cancel()
{
java.util.concurrent.atomic.AtomicBoolean v1;
java.util.concurrent.atomic.AtomicReference v10, v2, v5, v9;
io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber v0;
io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber[] v4, v6, v8;
java.lang.Object v3, v7;
v0 := @this: io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber;
v1 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicBoolean cancelled>;
virtualinvoke v1.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);
v2 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicReference subscribers>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v4 = <io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber[] TERMINATED>;
if v3 == v4 goto label1;
v5 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicReference subscribers>;
v6 = <io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber[] TERMINATED>;
v7 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(v6);
v8 = <io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber[] TERMINATED>;
if v7 == v8 goto label1;
v9 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicReference current>;
virtualinvoke v9.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(v0, null);
v10 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicReference upstream>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void cancel(java.util.concurrent.atomic.AtomicReference)>(v10);
label1:
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber v0;
int v4;
java.util.concurrent.atomic.AtomicReference v2;
boolean v3;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicReference upstream>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, v1);
if v3 == 0 goto label1;
v4 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: int bufferSize>;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void request(long)>(v4);
label1:
return;
}
public void onItem(java.lang.Object)
{
io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber v0;
io.smallrye.mutiny.subscription.BackPressureFailure v4;
java.lang.Object v1;
java.util.Queue v2;
boolean v3;
v0 := @this: io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.Queue queue>;
v3 = interfaceinvoke v2.<java.util.Queue: boolean offer(java.lang.Object)>(v1);
if v3 != 0 goto label1;
v4 = new io.smallrye.mutiny.subscription.BackPressureFailure;
specialinvoke v4.<io.smallrye.mutiny.subscription.BackPressureFailure: void <init>(java.lang.String)>("Queue is full");
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: void onFailure(java.lang.Throwable)>(v4);
return;
label1:
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: void drain()>();
return;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber v0;
java.util.concurrent.atomic.AtomicReference v2;
boolean v3;
v0 := @this: io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicReference failureOrCompletion>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, v1);
if v3 == 0 goto label1;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: void drain()>();
label1:
return;
}
public void onCompletion()
{
java.lang.Throwable v2;
io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber v0;
java.util.concurrent.atomic.AtomicReference v1;
boolean v3;
v0 := @this: io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber;
v1 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicReference failureOrCompletion>;
v2 = <io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.lang.Throwable COMPLETED>;
v3 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, v2);
if v3 == 0 goto label1;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: void drain()>();
label1:
return;
}
boolean add(io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber)
{
java.util.concurrent.atomic.AtomicReference v2, v8;
io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber v1;
io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber v0;
int v5, v6;
io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber[] v4, v7;
java.lang.Object v3;
boolean v9;
v0 := @this: io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber;
v1 := @parameter0: io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber;
label1:
v2 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicReference subscribers>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v4 = <io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber[] TERMINATED>;
if v3 != v4 goto label2;
return 0;
label2:
v5 = lengthof v3;
v6 = v5 + 1;
v7 = newarray (io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber)[v6];
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v3, 0, v7, 0, v5);
v7[v5] = v1;
v8 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicReference subscribers>;
v9 = virtualinvoke v8.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(v3, v7);
if v9 == 0 goto label1;
return 1;
}
void remove(io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber)
{
java.util.concurrent.atomic.AtomicReference v15, v2;
int v11, v12, v13, v14, v4, v5, v6, v7;
boolean v16, v9;
io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber v1, v8;
io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber v0;
io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber[] v10;
java.lang.Object v3;
v0 := @this: io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber;
v1 := @parameter0: io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber;
label1:
v2 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicReference subscribers>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v4 = lengthof v3;
if v4 == 0 goto label8;
v5 = (int) -1;
v6 = v5;
v7 = 0;
label2:
if v7 >= v4 goto label4;
v8 = v3[v7];
v9 = virtualinvoke v8.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v9 == 0 goto label3;
v6 = v7;
goto label4;
label3:
v7 = v7 + 1;
goto label2;
label4:
if v6 >= 0 goto label5;
return;
label5:
if v4 != 1 goto label6;
v10 = <io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber[] EMPTY>;
goto label7;
label6:
v11 = v4 - 1;
v10 = newarray (io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber)[v11];
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v3, 0, v10, 0, v6);
v12 = v6 + 1;
v13 = v4 - v6;
v14 = v13 - 1;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v3, v12, v10, v6, v14);
label7:
v15 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicReference subscribers>;
v16 = virtualinvoke v15.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(v3, v10);
if v16 == 0 goto label1;
label8:
return;
}
boolean isEmptyOrCompleted(java.lang.Throwable, boolean)
{
java.lang.Throwable v1, v3;
java.util.concurrent.atomic.AtomicReference v12, v13, v4, v5;
int v16, v17, v8, v9;
boolean v2;
io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber v10, v18;
java.util.concurrent.Flow$Subscriber v11, v19;
io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber v0;
io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber[] v14, v6;
java.lang.Object v15, v7;
v0 := @this: io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber;
v1 := @parameter0: java.lang.Throwable;
v2 := @parameter1: boolean;
if v1 == null goto label6;
v3 = <io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.lang.Throwable COMPLETED>;
if v1 != v3 goto label3;
if v2 == 0 goto label6;
v4 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicReference current>;
virtualinvoke v4.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(v0, null);
v5 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicReference subscribers>;
v6 = <io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber[] TERMINATED>;
v7 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(v6);
v8 = lengthof v7;
v9 = 0;
label1:
if v9 >= v8 goto label2;
v10 = v7[v9];
v11 = v10.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber: java.util.concurrent.Flow$Subscriber downstream>;
interfaceinvoke v11.<java.util.concurrent.Flow$Subscriber: void onComplete()>();
v9 = v9 + 1;
goto label1;
label2:
return 1;
label3:
v12 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicReference current>;
virtualinvoke v12.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(v0, null);
v13 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicReference subscribers>;
v14 = <io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber[] TERMINATED>;
v15 = virtualinvoke v13.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(v14);
v16 = lengthof v15;
v17 = 0;
label4:
if v17 >= v16 goto label5;
v18 = v15[v17];
v19 = v18.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber: java.util.concurrent.Flow$Subscriber downstream>;
interfaceinvoke v19.<java.util.concurrent.Flow$Subscriber: void onError(java.lang.Throwable)>(v1);
v17 = v17 + 1;
goto label4;
label5:
return 1;
label6:
return 0;
}
void drain()
{
byte v20, v36, v54, v55, v64;
java.lang.Throwable v26, v30, v40;
long v12, v19, v21, v22, v53, v56, v57;
java.util.concurrent.atomic.AtomicLong v18, v52;
io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber v0;
java.util.concurrent.atomic.AtomicInteger v1, v65;
boolean v10, v31, v32, v44, v45, v47, v9;
io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber v17, v51;
io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber[] v14, v48;
java.util.Queue v8;
java.util.concurrent.atomic.AtomicReference v23, v27, v29, v33, v37, v4, v41, v43, v6, v60, v62;
int v11, v13, v15, v16, v2, v3, v35, v49, v50, v66;
java.util.concurrent.Flow$Subscriber v58;
java.lang.Object v24, v25, v28, v34, v38, v39, v42, v46, v5, v59, v61, v63, v7;
v0 := @this: io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber;
v1 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicInteger wip>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
if v2 == 0 goto label01;
return;
label01:
v3 = 1;
v4 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicReference subscribers>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
label02:
v6 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicReference failureOrCompletion>;
v7 = virtualinvoke v6.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v8 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.Queue queue>;
v9 = interfaceinvoke v8.<java.util.Queue: boolean isEmpty()>();
v10 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: boolean isEmptyOrCompleted(java.lang.Throwable,boolean)>(v7, v9);
if v10 == 0 goto label03;
return;
label03:
if v9 != 0 goto label32;
v11 = lengthof v5;
v12 = 9223372036854775807L;
v13 = 0;
v14 = v5;
v15 = lengthof v5;
v16 = 0;
label04:
if v16 >= v15 goto label07;
v17 = v14[v16];
v18 = v17.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber: java.util.concurrent.atomic.AtomicLong requested>;
v19 = virtualinvoke v18.<java.util.concurrent.atomic.AtomicLong: long get()>();
v20 = v19 cmp -9223372036854775808L;
if v20 == 0 goto label05;
v21 = v17.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber: long emitted>;
v22 = v19 - v21;
v12 = staticinvoke <java.lang.Math: long min(long,long)>(v12, v22);
goto label06;
label05:
v13 = v13 + 1;
label06:
v16 = v16 + 1;
goto label04;
label07:
if v11 != v13 goto label15;
v23 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicReference failureOrCompletion>;
v24 = virtualinvoke v23.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
label08:
v25 = interfaceinvoke v8.<java.util.Queue: java.lang.Object poll()>();
label09:
goto label11;
label10:
v26 := @caughtexception;
v27 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicReference upstream>;
v28 = virtualinvoke v27.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
interfaceinvoke v28.<java.util.concurrent.Flow$Subscription: void cancel()>();
v24 = v26;
v29 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicReference failureOrCompletion>;
virtualinvoke v29.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(v26);
v25 = null;
label11:
v30 = v24;
if v25 != null goto label12;
v31 = 1;
goto label13;
label12:
v31 = 0;
label13:
v32 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: boolean isEmptyOrCompleted(java.lang.Throwable,boolean)>(v30, v31);
if v32 == 0 goto label14;
return;
label14:
v33 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicReference upstream>;
v34 = virtualinvoke v33.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
interfaceinvoke v34.<java.util.concurrent.Flow$Subscription: void request(long)>(1L);
goto label02;
label15:
v35 = 0;
label16:
v36 = v35 cmp v12;
if v36 >= 0 goto label30;
v37 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicReference failureOrCompletion>;
v38 = virtualinvoke v37.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
label17:
v39 = interfaceinvoke v8.<java.util.Queue: java.lang.Object poll()>();
label18:
goto label20;
label19:
v40 := @caughtexception;
v41 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicReference upstream>;
v42 = virtualinvoke v41.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
interfaceinvoke v42.<java.util.concurrent.Flow$Subscription: void cancel()>();
v38 = v40;
v43 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicReference failureOrCompletion>;
virtualinvoke v43.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(v40);
v39 = null;
label20:
if v39 != null goto label21;
v44 = 1;
goto label22;
label21:
v44 = 0;
label22:
v9 = v44;
v45 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: boolean isEmptyOrCompleted(java.lang.Throwable,boolean)>(v38, v44);
if v45 == 0 goto label23;
return;
label23:
if v44 != 0 goto label30;
v46 = v39;
v47 = 0;
v48 = v5;
v49 = lengthof v5;
v50 = 0;
label24:
if v50 >= v49 goto label28;
v51 = v48[v50];
v52 = v51.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber: java.util.concurrent.atomic.AtomicLong requested>;
v53 = virtualinvoke v52.<java.util.concurrent.atomic.AtomicLong: long get()>();
v54 = v53 cmp -9223372036854775808L;
if v54 == 0 goto label26;
v55 = v53 cmp 9223372036854775807L;
if v55 == 0 goto label25;
v56 = v51.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber: long emitted>;
v57 = v56 + 1L;
v51.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber: long emitted> = v57;
label25:
v58 = v51.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber: java.util.concurrent.Flow$Subscriber downstream>;
interfaceinvoke v58.<java.util.concurrent.Flow$Subscriber: void onNext(java.lang.Object)>(v46);
goto label27;
label26:
v47 = 1;
label27:
v50 = v50 + 1;
goto label24;
label28:
v35 = v35 + 1;
v59 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v47 != 0 goto label29;
if v59 == v5 goto label16;
label29:
v5 = v59;
if v35 == 0 goto label02;
v60 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicReference upstream>;
v61 = virtualinvoke v60.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
interfaceinvoke v61.<java.util.concurrent.Flow$Subscription: void request(long)>(v35);
goto label02;
label30:
if v35 == 0 goto label31;
v62 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicReference upstream>;
v63 = virtualinvoke v62.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
interfaceinvoke v63.<java.util.concurrent.Flow$Subscription: void request(long)>(v35);
label31:
v64 = v12 cmp 0L;
if v64 == 0 goto label32;
if v9 == 0 goto label02;
label32:
v65 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.util.concurrent.atomic.AtomicInteger wip>;
v66 = neg v3;
v3 = virtualinvoke v65.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(v66);
if v3 == 0 goto label33;
virtualinvoke v4.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
goto label02;
label33:
return;
catch java.lang.Throwable from label08 to label09 with label10;
catch java.lang.Throwable from label17 to label18 with label19;
}
public io.smallrye.mutiny.Context context()
{
io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber v0;
io.smallrye.mutiny.Context v1;
v0 := @this: io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber;
v1 = v0.<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: io.smallrye.mutiny.Context context>;
return v1;
}
static void <clinit>()
{
io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber[] v0, v1;
java.lang.Exception v2;
v0 = newarray (io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber)[0];
<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber[] EMPTY> = v0;
v1 = newarray (io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber)[0];
<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$InnerSubscriber[] TERMINATED> = v1;
v2 = new java.lang.Exception;
specialinvoke v2.<java.lang.Exception: void <init>()>();
<io.smallrye.mutiny.operators.multi.multicast.MultiPublishOp$PublishSubscriber: java.lang.Throwable COMPLETED> = v2;
return;
}
}