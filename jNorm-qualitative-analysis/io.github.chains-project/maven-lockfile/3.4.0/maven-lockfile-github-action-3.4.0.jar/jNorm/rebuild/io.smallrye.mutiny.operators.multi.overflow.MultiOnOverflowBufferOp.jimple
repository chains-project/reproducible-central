public class io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp extends io.smallrye.mutiny.operators.multi.AbstractMultiOperator
{
private final int bufferSize;
private final boolean unbounded;
private final java.util.function.Consumer dropConsumer;
private final java.util.function.Function dropUniMapper;
public void <init>(io.smallrye.mutiny.Multi, int, boolean, java.util.function.Consumer, java.util.function.Function)
{
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp v0;
java.util.function.Consumer v4;
int v2;
java.util.function.Function v5;
io.smallrye.mutiny.Multi v1;
boolean v3;
v0 := @this: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp;
v1 := @parameter0: io.smallrye.mutiny.Multi;
v2 := @parameter1: int;
v3 := @parameter2: boolean;
v4 := @parameter3: java.util.function.Consumer;
v5 := @parameter4: java.util.function.Function;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.AbstractMultiOperator: void <init>(io.smallrye.mutiny.Multi)>(v1);
v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp: int bufferSize> = v2;
v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp: boolean unbounded> = v3;
v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp: java.util.function.Consumer dropConsumer> = v4;
v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp: java.util.function.Function dropUniMapper> = v5;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)
{
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp v0;
io.smallrye.mutiny.groups.MultiSubscribe v6;
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor v2;
int v3;
io.smallrye.mutiny.Multi v5;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
boolean v4;
v0 := @this: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 = new io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor;
v3 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp: int bufferSize>;
v4 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp: boolean unbounded>;
specialinvoke v2.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: void <init>(io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp,io.smallrye.mutiny.subscription.MultiSubscriber,int,boolean)>(v0, v1, v3, v4);
v5 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp: io.smallrye.mutiny.Multi upstream>;
v6 = interfaceinvoke v5.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiSubscribe subscribe()>();
virtualinvoke v6.<io.smallrye.mutiny.groups.MultiSubscribe: io.smallrye.mutiny.subscription.MultiSubscriber withSubscriber(io.smallrye.mutiny.subscription.MultiSubscriber)>(v2);
return;
}
}