public class io.smallrye.mutiny.operators.uni.UniAndCombination extends io.smallrye.mutiny.operators.UniOperator
{
private static final java.lang.Object SENTINEL;
private final java.util.function.Function combinator;
private final java.util.List unis;
private final boolean collectAllFailureBeforeFiring;
private final int concurrency;
public void <init>(io.smallrye.mutiny.Uni, java.util.List, java.util.function.Function, boolean, int)
{
io.smallrye.mutiny.operators.uni.UniAndCombination v0;
java.util.function.Function v3;
io.smallrye.mutiny.Uni v1;
java.util.ArrayList v6;
java.util.List v2, v7, v8;
int v5;
boolean v4;
v0 := @this: io.smallrye.mutiny.operators.uni.UniAndCombination;
v1 := @parameter0: io.smallrye.mutiny.Uni;
v2 := @parameter1: java.util.List;
v3 := @parameter2: java.util.function.Function;
v4 := @parameter3: boolean;
v5 := @parameter4: int;
specialinvoke v0.<io.smallrye.mutiny.operators.UniOperator: void <init>(io.smallrye.mutiny.Uni)>(v1);
v0.<io.smallrye.mutiny.operators.uni.UniAndCombination: int concurrency> = v5;
v6 = new java.util.ArrayList;
specialinvoke v6.<java.util.ArrayList: void <init>()>();
v0.<io.smallrye.mutiny.operators.uni.UniAndCombination: java.util.List unis> = v6;
if v1 == null goto label1;
v7 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination: java.util.List unis>;
interfaceinvoke v7.<java.util.List: boolean add(java.lang.Object)>(v1);
label1:
v8 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination: java.util.List unis>;
interfaceinvoke v8.<java.util.List: boolean addAll(java.util.Collection)>(v2);
v0.<io.smallrye.mutiny.operators.uni.UniAndCombination: java.util.function.Function combinator> = v3;
v0.<io.smallrye.mutiny.operators.uni.UniAndCombination: boolean collectAllFailureBeforeFiring> = v4;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.UniSubscriber)
{
io.smallrye.mutiny.operators.uni.UniAndCombination v0;
io.smallrye.mutiny.subscription.UniSubscriber v1;
io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor v2;
v0 := @this: io.smallrye.mutiny.operators.uni.UniAndCombination;
v1 := @parameter0: io.smallrye.mutiny.subscription.UniSubscriber;
v2 = new io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor;
specialinvoke v2.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: void <init>(io.smallrye.mutiny.operators.uni.UniAndCombination,io.smallrye.mutiny.subscription.UniSubscriber)>(v0, v1);
interfaceinvoke v1.<io.smallrye.mutiny.subscription.UniSubscriber: void onSubscribe(io.smallrye.mutiny.subscription.UniSubscription)>(v2);
specialinvoke v2.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: void run()>();
return;
}
static void <clinit>()
{
java.lang.Object v0;
v0 = new java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
<io.smallrye.mutiny.operators.uni.UniAndCombination: java.lang.Object SENTINEL> = v0;
return;
}
}