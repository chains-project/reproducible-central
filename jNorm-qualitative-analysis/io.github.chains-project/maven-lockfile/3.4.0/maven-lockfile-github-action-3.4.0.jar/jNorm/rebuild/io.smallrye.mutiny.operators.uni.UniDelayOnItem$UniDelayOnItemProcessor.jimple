class io.smallrye.mutiny.operators.uni.UniDelayOnItem$UniDelayOnItemProcessor extends io.smallrye.mutiny.operators.uni.UniOperatorProcessor
{
private volatile java.util.concurrent.ScheduledFuture scheduledFuture;
final io.smallrye.mutiny.operators.uni.UniDelayOnItem this$0;
public void <init>(io.smallrye.mutiny.operators.uni.UniDelayOnItem, io.smallrye.mutiny.subscription.UniSubscriber)
{
io.smallrye.mutiny.operators.uni.UniDelayOnItem$UniDelayOnItemProcessor v0;
io.smallrye.mutiny.subscription.UniSubscriber v2;
io.smallrye.mutiny.operators.uni.UniDelayOnItem v1;
v0 := @this: io.smallrye.mutiny.operators.uni.UniDelayOnItem$UniDelayOnItemProcessor;
v1 := @parameter0: io.smallrye.mutiny.operators.uni.UniDelayOnItem;
v2 := @parameter1: io.smallrye.mutiny.subscription.UniSubscriber;
v0.<io.smallrye.mutiny.operators.uni.UniDelayOnItem$UniDelayOnItemProcessor: io.smallrye.mutiny.operators.uni.UniDelayOnItem this$0> = v1;
specialinvoke v0.<io.smallrye.mutiny.operators.uni.UniOperatorProcessor: void <init>(io.smallrye.mutiny.subscription.UniSubscriber)>(v2);
return;
}
public void cancel()
{
java.util.concurrent.ScheduledFuture v2, v3;
io.smallrye.mutiny.operators.uni.UniDelayOnItem$UniDelayOnItemProcessor v0;
boolean v1;
v0 := @this: io.smallrye.mutiny.operators.uni.UniDelayOnItem$UniDelayOnItemProcessor;
v1 = virtualinvoke v0.<io.smallrye.mutiny.operators.uni.UniDelayOnItem$UniDelayOnItemProcessor: boolean isCancelled()>();
if v1 != 0 goto label1;
specialinvoke v0.<io.smallrye.mutiny.operators.uni.UniOperatorProcessor: void cancel()>();
v2 = v0.<io.smallrye.mutiny.operators.uni.UniDelayOnItem$UniDelayOnItemProcessor: java.util.concurrent.ScheduledFuture scheduledFuture>;
if v2 == null goto label1;
v3 = v0.<io.smallrye.mutiny.operators.uni.UniDelayOnItem$UniDelayOnItemProcessor: java.util.concurrent.ScheduledFuture scheduledFuture>;
interfaceinvoke v3.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(1);
label1:
return;
}
public void onItem(java.lang.Object)
{
java.lang.Throwable v11;
java.util.concurrent.ScheduledFuture v10;
io.smallrye.mutiny.operators.uni.UniDelayOnItem v4, v6;
long v8;
io.smallrye.mutiny.subscription.UniSubscriber v12;
java.lang.Runnable v3;
java.util.concurrent.TimeUnit v9;
java.time.Duration v7;
java.util.concurrent.ScheduledExecutorService v5;
io.smallrye.mutiny.operators.uni.UniDelayOnItem$UniDelayOnItemProcessor v0;
java.lang.Object v1;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.uni.UniDelayOnItem$UniDelayOnItemProcessor;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.uni.UniDelayOnItem$UniDelayOnItemProcessor: boolean isCancelled()>();
if v2 != 0 goto label4;
label1:
v3 = staticinvoke <io.smallrye.mutiny.operators.uni.UniDelayOnItem$UniDelayOnItemProcessor$lambda_onItem_0__2724: java.lang.Runnable bootstrap$(io.smallrye.mutiny.operators.uni.UniDelayOnItem$UniDelayOnItemProcessor,java.lang.Object)>(v0, v1);
v4 = v0.<io.smallrye.mutiny.operators.uni.UniDelayOnItem$UniDelayOnItemProcessor: io.smallrye.mutiny.operators.uni.UniDelayOnItem this$0>;
v5 = v4.<io.smallrye.mutiny.operators.uni.UniDelayOnItem: java.util.concurrent.ScheduledExecutorService executor>;
v6 = v0.<io.smallrye.mutiny.operators.uni.UniDelayOnItem$UniDelayOnItemProcessor: io.smallrye.mutiny.operators.uni.UniDelayOnItem this$0>;
v7 = v6.<io.smallrye.mutiny.operators.uni.UniDelayOnItem: java.time.Duration duration>;
v8 = virtualinvoke v7.<java.time.Duration: long toMillis()>();
v9 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
v10 = interfaceinvoke v5.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(v3, v8, v9);
v0.<io.smallrye.mutiny.operators.uni.UniDelayOnItem$UniDelayOnItemProcessor: java.util.concurrent.ScheduledFuture scheduledFuture> = v10;
label2:
goto label4;
label3:
v11 := @caughtexception;
v12 = v0.<io.smallrye.mutiny.operators.uni.UniDelayOnItem$UniDelayOnItemProcessor: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
interfaceinvoke v12.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v11);
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
}