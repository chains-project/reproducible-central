class io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor extends io.smallrye.mutiny.operators.uni.UniOperatorProcessor
{
private volatile io.smallrye.mutiny.subscription.UniSubscription innerSubscription;
final io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap this$0;
public void <init>(io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap, io.smallrye.mutiny.subscription.UniSubscriber)
{
io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap v1;
io.smallrye.mutiny.subscription.UniSubscriber v2;
io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor;
v1 := @parameter0: io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap;
v2 := @parameter1: io.smallrye.mutiny.subscription.UniSubscriber;
v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor: io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap this$0> = v1;
specialinvoke v0.<io.smallrye.mutiny.operators.uni.UniOperatorProcessor: void <init>(io.smallrye.mutiny.subscription.UniSubscriber)>(v2);
return;
}
public void onSubscribe(io.smallrye.mutiny.subscription.UniSubscription)
{
io.smallrye.mutiny.subscription.UniSubscription v1, v2, v3;
io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor;
v1 := @parameter0: io.smallrye.mutiny.subscription.UniSubscription;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor: io.smallrye.mutiny.subscription.UniSubscription getCurrentUpstreamSubscription()>();
if v2 != null goto label1;
specialinvoke v0.<io.smallrye.mutiny.operators.uni.UniOperatorProcessor: void onSubscribe(io.smallrye.mutiny.subscription.UniSubscription)>(v1);
goto label3;
label1:
v3 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor: io.smallrye.mutiny.subscription.UniSubscription innerSubscription>;
if v3 != null goto label2;
v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor: io.smallrye.mutiny.subscription.UniSubscription innerSubscription> = v1;
goto label3;
label2:
interfaceinvoke v1.<io.smallrye.mutiny.subscription.UniSubscription: void cancel()>();
label3:
return;
}
public void onItem(java.lang.Object)
{
io.smallrye.mutiny.subscription.UniSubscription v3;
io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor v0;
java.lang.Object v1;
io.smallrye.mutiny.subscription.UniSubscriber v4;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor: boolean isCancelled()>();
if v2 != 0 goto label2;
v3 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor: io.smallrye.mutiny.subscription.UniSubscription innerSubscription>;
if v3 != null goto label1;
specialinvoke v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor: void performInnerSubscription(java.lang.Object,java.lang.Throwable)>(v1, null);
goto label2;
label1:
v4 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
interfaceinvoke v4.<io.smallrye.mutiny.subscription.UniSubscriber: void onItem(java.lang.Object)>(v1);
label2:
return;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.subscription.UniSubscription v3;
io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor v0;
io.smallrye.mutiny.subscription.UniSubscriber v4;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor;
v1 := @parameter0: java.lang.Throwable;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor: boolean isCancelled()>();
if v2 != 0 goto label2;
v3 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor: io.smallrye.mutiny.subscription.UniSubscription innerSubscription>;
if v3 != null goto label1;
specialinvoke v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor: void performInnerSubscription(java.lang.Object,java.lang.Throwable)>(null, v1);
goto label3;
label1:
v4 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
interfaceinvoke v4.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v1);
goto label3;
label2:
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v1);
label3:
return;
}
public void cancel()
{
io.smallrye.mutiny.subscription.UniSubscription v1, v2;
io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor;
v1 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor: io.smallrye.mutiny.subscription.UniSubscription innerSubscription>;
if v1 == null goto label1;
v2 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor: io.smallrye.mutiny.subscription.UniSubscription innerSubscription>;
interfaceinvoke v2.<io.smallrye.mutiny.subscription.UniSubscription: void cancel()>();
label1:
specialinvoke v0.<io.smallrye.mutiny.operators.uni.UniOperatorProcessor: void cancel()>();
return;
}
private void performInnerSubscription(java.lang.Object, java.lang.Throwable)
{
java.lang.Throwable v2, v6;
java.util.function.BiFunction v4;
io.smallrye.mutiny.subscription.UniSubscriber v10, v11, v7;
java.lang.NullPointerException v12;
io.smallrye.mutiny.CompositeException v8;
io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap v3;
io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor v0;
java.lang.Throwable[] v9;
java.lang.Object v1, v5;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Throwable;
label1:
v3 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor: io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap this$0>;
v4 = v3.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap: java.util.function.BiFunction mapper>;
v5 = interfaceinvoke v4.<java.util.function.BiFunction: java.lang.Object apply(java.lang.Object,java.lang.Object)>(v1, v2);
label2:
goto label6;
label3:
v6 := @caughtexception;
if v2 == null goto label4;
v7 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
v8 = new io.smallrye.mutiny.CompositeException;
v9 = newarray (java.lang.Throwable)[2];
v9[0] = v2;
v9[1] = v6;
specialinvoke v8.<io.smallrye.mutiny.CompositeException: void <init>(java.lang.Throwable[])>(v9);
interfaceinvoke v7.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v8);
goto label5;
label4:
v10 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
interfaceinvoke v10.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v6);
label5:
return;
label6:
if v5 != null goto label7;
v11 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
v12 = new java.lang.NullPointerException;
specialinvoke v12.<java.lang.NullPointerException: void <init>(java.lang.String)>("The mapper returned `null`");
interfaceinvoke v11.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v12);
return;
label7:
staticinvoke <io.smallrye.mutiny.operators.AbstractUni: void subscribe(io.smallrye.mutiny.Uni,io.smallrye.mutiny.subscription.UniSubscriber)>(v5, v0);
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
}