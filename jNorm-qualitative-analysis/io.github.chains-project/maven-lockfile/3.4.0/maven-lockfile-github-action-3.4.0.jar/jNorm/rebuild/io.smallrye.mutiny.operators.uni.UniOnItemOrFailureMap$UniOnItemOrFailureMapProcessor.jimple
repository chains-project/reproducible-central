class io.smallrye.mutiny.operators.uni.UniOnItemOrFailureMap$UniOnItemOrFailureMapProcessor extends io.smallrye.mutiny.operators.uni.UniOperatorProcessor
{
final io.smallrye.mutiny.operators.uni.UniOnItemOrFailureMap this$0;
public void <init>(io.smallrye.mutiny.operators.uni.UniOnItemOrFailureMap, io.smallrye.mutiny.subscription.UniSubscriber)
{
io.smallrye.mutiny.operators.uni.UniOnItemOrFailureMap$UniOnItemOrFailureMapProcessor v0;
io.smallrye.mutiny.operators.uni.UniOnItemOrFailureMap v1;
io.smallrye.mutiny.subscription.UniSubscriber v2;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOnItemOrFailureMap$UniOnItemOrFailureMapProcessor;
v1 := @parameter0: io.smallrye.mutiny.operators.uni.UniOnItemOrFailureMap;
v2 := @parameter1: io.smallrye.mutiny.subscription.UniSubscriber;
v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureMap$UniOnItemOrFailureMapProcessor: io.smallrye.mutiny.operators.uni.UniOnItemOrFailureMap this$0> = v1;
specialinvoke v0.<io.smallrye.mutiny.operators.uni.UniOperatorProcessor: void <init>(io.smallrye.mutiny.subscription.UniSubscriber)>(v2);
return;
}
public void onItem(java.lang.Object)
{
java.lang.Throwable v6;
java.util.function.BiFunction v4;
io.smallrye.mutiny.subscription.UniSubscriber v7, v8;
io.smallrye.mutiny.operators.uni.UniOnItemOrFailureMap$UniOnItemOrFailureMapProcessor v0;
java.lang.Object v1, v5;
io.smallrye.mutiny.operators.uni.UniOnItemOrFailureMap v3;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOnItemOrFailureMap$UniOnItemOrFailureMapProcessor;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureMap$UniOnItemOrFailureMapProcessor: boolean isCancelled()>();
if v2 != 0 goto label5;
label1:
v3 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureMap$UniOnItemOrFailureMapProcessor: io.smallrye.mutiny.operators.uni.UniOnItemOrFailureMap this$0>;
v4 = v3.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureMap: java.util.function.BiFunction mapper>;
v5 = interfaceinvoke v4.<java.util.function.BiFunction: java.lang.Object apply(java.lang.Object,java.lang.Object)>(v1, null);
label2:
goto label4;
label3:
v6 := @caughtexception;
v7 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureMap$UniOnItemOrFailureMapProcessor: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
interfaceinvoke v7.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v6);
return;
label4:
v8 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureMap$UniOnItemOrFailureMapProcessor: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
interfaceinvoke v8.<io.smallrye.mutiny.subscription.UniSubscriber: void onItem(java.lang.Object)>(v5);
label5:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1, v6;
java.util.function.BiFunction v4;
io.smallrye.mutiny.subscription.UniSubscriber v10, v7;
io.smallrye.mutiny.CompositeException v8;
io.smallrye.mutiny.operators.uni.UniOnItemOrFailureMap$UniOnItemOrFailureMapProcessor v0;
java.lang.Throwable[] v9;
java.lang.Object v5;
io.smallrye.mutiny.operators.uni.UniOnItemOrFailureMap v3;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOnItemOrFailureMap$UniOnItemOrFailureMapProcessor;
v1 := @parameter0: java.lang.Throwable;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureMap$UniOnItemOrFailureMapProcessor: boolean isCancelled()>();
if v2 != 0 goto label5;
label1:
v3 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureMap$UniOnItemOrFailureMapProcessor: io.smallrye.mutiny.operators.uni.UniOnItemOrFailureMap this$0>;
v4 = v3.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureMap: java.util.function.BiFunction mapper>;
v5 = interfaceinvoke v4.<java.util.function.BiFunction: java.lang.Object apply(java.lang.Object,java.lang.Object)>(null, v1);
label2:
goto label4;
label3:
v6 := @caughtexception;
v7 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureMap$UniOnItemOrFailureMapProcessor: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
v8 = new io.smallrye.mutiny.CompositeException;
v9 = newarray (java.lang.Throwable)[2];
v9[0] = v1;
v9[1] = v6;
specialinvoke v8.<io.smallrye.mutiny.CompositeException: void <init>(java.lang.Throwable[])>(v9);
interfaceinvoke v7.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v8);
return;
label4:
v10 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemOrFailureMap$UniOnItemOrFailureMapProcessor: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
interfaceinvoke v10.<io.smallrye.mutiny.subscription.UniSubscriber: void onItem(java.lang.Object)>(v5);
goto label6;
label5:
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v1);
label6:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
}