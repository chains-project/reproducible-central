final class io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber extends java.lang.Object implements java.util.concurrent.Flow$Subscriber, io.smallrye.mutiny.subscription.UniSubscriber, java.util.concurrent.Flow$Subscription, io.smallrye.mutiny.subscription.ContextSupport
{
private final java.util.concurrent.atomic.AtomicReference secondUpstream;
private final java.util.concurrent.atomic.AtomicReference firstUpstream;
private final java.util.concurrent.Flow$Subscriber downstream;
private final java.util.function.Function mapper;
private final java.util.concurrent.atomic.AtomicLong requested;
void <init>(java.util.concurrent.Flow$Subscriber, java.util.function.Function)
{
java.util.concurrent.Flow$Subscriber v1;
java.util.concurrent.atomic.AtomicLong v3;
io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber v0;
java.util.concurrent.atomic.AtomicReference v4, v5;
java.util.function.Function v2;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber;
v1 := @parameter0: java.util.concurrent.Flow$Subscriber;
v2 := @parameter1: java.util.function.Function;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v3.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber: java.util.concurrent.atomic.AtomicLong requested> = v3;
v0.<io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber: java.util.concurrent.Flow$Subscriber downstream> = v1;
v0.<io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber: java.util.function.Function mapper> = v2;
v4 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v4.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber: java.util.concurrent.atomic.AtomicReference firstUpstream> = v4;
v5 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v5.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber: java.util.concurrent.atomic.AtomicReference secondUpstream> = v5;
return;
}
public void onNext(java.lang.Object)
{
io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber v0;
java.util.concurrent.Flow$Subscriber v2;
java.lang.Object v1;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber: java.util.concurrent.Flow$Subscriber downstream>;
interfaceinvoke v2.<java.util.concurrent.Flow$Subscriber: void onNext(java.lang.Object)>(v1);
return;
}
public void onError(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber v0;
java.util.concurrent.Flow$Subscriber v2;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber: java.util.concurrent.Flow$Subscriber downstream>;
interfaceinvoke v2.<java.util.concurrent.Flow$Subscriber: void onError(java.lang.Throwable)>(v1);
return;
}
public void onComplete()
{
io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber v0;
java.util.concurrent.Flow$Subscriber v1;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber;
v1 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber: java.util.concurrent.Flow$Subscriber downstream>;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscriber: void onComplete()>();
return;
}
public void request(long)
{
java.util.concurrent.atomic.AtomicLong v3;
io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber v0;
long v1;
java.util.concurrent.atomic.AtomicReference v2;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber;
v1 := @parameter0: long;
v2 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber: java.util.concurrent.atomic.AtomicReference secondUpstream>;
v3 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber: java.util.concurrent.atomic.AtomicLong requested>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void requestIfNotNullOrAccumulate(java.util.concurrent.atomic.AtomicReference,java.util.concurrent.atomic.AtomicLong,long)>(v2, v3, v1);
return;
}
public void cancel()
{
io.smallrye.mutiny.subscription.UniSubscription v2, v4;
io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber v0;
java.lang.Object v3;
java.util.concurrent.atomic.AtomicReference v1, v5;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber;
v1 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber: java.util.concurrent.atomic.AtomicReference firstUpstream>;
v2 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription CANCELLED>;
v3 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(v2);
if v3 == null goto label1;
v4 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription CANCELLED>;
if v3 == v4 goto label1;
interfaceinvoke v3.<io.smallrye.mutiny.subscription.UniSubscription: void cancel()>();
label1:
v5 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber: java.util.concurrent.atomic.AtomicReference secondUpstream>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void cancel(java.util.concurrent.atomic.AtomicReference)>(v5);
return;
}
public io.smallrye.mutiny.Context context()
{
java.util.concurrent.Flow$Subscriber v1, v3;
io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber v0;
io.smallrye.mutiny.Context v4, v5;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber;
v1 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber: java.util.concurrent.Flow$Subscriber downstream>;
v2 = v1 instanceof io.smallrye.mutiny.subscription.ContextSupport;
if v2 == 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber: java.util.concurrent.Flow$Subscriber downstream>;
v4 = interfaceinvoke v3.<io.smallrye.mutiny.subscription.ContextSupport: io.smallrye.mutiny.Context context()>();
return v4;
label1:
v5 = staticinvoke <io.smallrye.mutiny.Context: io.smallrye.mutiny.Context empty()>();
return v5;
}
public void onSubscribe(io.smallrye.mutiny.subscription.UniSubscription)
{
io.smallrye.mutiny.subscription.UniSubscription v1;
java.util.concurrent.Flow$Subscriber v4;
io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber v0;
java.util.concurrent.atomic.AtomicReference v2;
boolean v3;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber;
v1 := @parameter0: io.smallrye.mutiny.subscription.UniSubscription;
v2 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber: java.util.concurrent.atomic.AtomicReference firstUpstream>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, v1);
if v3 == 0 goto label1;
v4 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber: java.util.concurrent.Flow$Subscriber downstream>;
interfaceinvoke v4.<java.util.concurrent.Flow$Subscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v0);
label1:
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
java.util.concurrent.atomic.AtomicLong v4;
byte v6;
io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber v0;
long v5;
java.util.concurrent.atomic.AtomicReference v2;
boolean v3;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber: java.util.concurrent.atomic.AtomicReference secondUpstream>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, v1);
if v3 == 0 goto label1;
v4 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber: java.util.concurrent.atomic.AtomicLong requested>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicLong: long getAndSet(long)>(0L);
v6 = v5 cmp 0L;
if v6 == 0 goto label1;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void request(long)>(v5);
label1:
return;
}
public void onItem(java.lang.Object)
{
java.lang.Throwable v5;
java.util.concurrent.Flow$Subscriber v6;
io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber v0;
java.lang.Object v1, v3;
java.util.function.Function v2;
java.lang.NullPointerException v4;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber;
v1 := @parameter0: java.lang.Object;
label1:
v2 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber: java.util.function.Function mapper>;
v3 = interfaceinvoke v2.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v1);
if v3 != null goto label3;
v4 = new java.lang.NullPointerException;
specialinvoke v4.<java.lang.NullPointerException: void <init>(java.lang.String)>("The mapper returned `null`");
throw v4;
label2:
v5 := @caughtexception;
v6 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber: java.util.concurrent.Flow$Subscriber downstream>;
interfaceinvoke v6.<java.util.concurrent.Flow$Subscriber: void onError(java.lang.Throwable)>(v5);
return;
label3:
interfaceinvoke v3.<java.util.concurrent.Flow$Publisher: void subscribe(java.util.concurrent.Flow$Subscriber)>(v0);
return;
catch java.lang.Throwable from label1 to label2 with label2;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber v0;
java.util.concurrent.Flow$Subscriber v2;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.smallrye.mutiny.operators.uni.UniOnItemTransformToMulti$FlatMapPublisherSubscriber: java.util.concurrent.Flow$Subscriber downstream>;
interfaceinvoke v2.<java.util.concurrent.Flow$Subscriber: void onError(java.lang.Throwable)>(v1);
return;
}
}