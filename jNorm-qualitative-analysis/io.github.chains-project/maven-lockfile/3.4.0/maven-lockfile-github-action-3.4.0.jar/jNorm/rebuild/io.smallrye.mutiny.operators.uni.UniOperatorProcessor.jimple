public abstract class io.smallrye.mutiny.operators.uni.UniOperatorProcessor extends java.lang.Object implements io.smallrye.mutiny.subscription.UniSubscriber, io.smallrye.mutiny.subscription.UniSubscription
{
protected final io.smallrye.mutiny.subscription.UniSubscriber downstream;
private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater updater;
private volatile io.smallrye.mutiny.subscription.UniSubscription upstream;
public void <init>(io.smallrye.mutiny.subscription.UniSubscriber)
{
io.smallrye.mutiny.subscription.UniSubscriber v1;
io.smallrye.mutiny.operators.uni.UniOperatorProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOperatorProcessor;
v1 := @parameter0: io.smallrye.mutiny.subscription.UniSubscriber;
specialinvoke v0.<java.lang.Object: void <init>()>();
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "downstream");
v0.<io.smallrye.mutiny.operators.uni.UniOperatorProcessor: io.smallrye.mutiny.subscription.UniSubscriber downstream> = v1;
return;
}
public io.smallrye.mutiny.Context context()
{
io.smallrye.mutiny.subscription.UniSubscriber v1;
io.smallrye.mutiny.Context v2;
io.smallrye.mutiny.operators.uni.UniOperatorProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOperatorProcessor;
v1 = v0.<io.smallrye.mutiny.operators.uni.UniOperatorProcessor: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
v2 = interfaceinvoke v1.<io.smallrye.mutiny.subscription.UniSubscriber: io.smallrye.mutiny.Context context()>();
return v2;
}
public void onSubscribe(io.smallrye.mutiny.subscription.UniSubscription)
{
io.smallrye.mutiny.subscription.UniSubscription v1;
io.smallrye.mutiny.subscription.UniSubscriber v3;
io.smallrye.mutiny.operators.uni.UniOperatorProcessor v0;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOperatorProcessor;
v1 := @parameter0: io.smallrye.mutiny.subscription.UniSubscription;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.uni.UniOperatorProcessor: boolean compareAndSetUpstreamSubscription(io.smallrye.mutiny.subscription.UniSubscription,io.smallrye.mutiny.subscription.UniSubscription)>(null, v1);
if v2 == 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.uni.UniOperatorProcessor: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
interfaceinvoke v3.<io.smallrye.mutiny.subscription.UniSubscriber: void onSubscribe(io.smallrye.mutiny.subscription.UniSubscription)>(v0);
goto label2;
label1:
interfaceinvoke v1.<io.smallrye.mutiny.subscription.UniSubscription: void cancel()>();
label2:
return;
}
public void onItem(java.lang.Object)
{
io.smallrye.mutiny.subscription.UniSubscription v2, v3, v4;
java.lang.Object v1;
io.smallrye.mutiny.subscription.UniSubscriber v5;
io.smallrye.mutiny.operators.uni.UniOperatorProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOperatorProcessor;
v1 := @parameter0: java.lang.Object;
v2 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription CANCELLED>;
v3 = virtualinvoke v0.<io.smallrye.mutiny.operators.uni.UniOperatorProcessor: io.smallrye.mutiny.subscription.UniSubscription getAndSetUpstreamSubscription(io.smallrye.mutiny.subscription.UniSubscription)>(v2);
v4 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription CANCELLED>;
if v3 == v4 goto label1;
v5 = v0.<io.smallrye.mutiny.operators.uni.UniOperatorProcessor: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
interfaceinvoke v5.<io.smallrye.mutiny.subscription.UniSubscriber: void onItem(java.lang.Object)>(v1);
label1:
return;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.subscription.UniSubscription v2, v3, v4;
io.smallrye.mutiny.subscription.UniSubscriber v5;
io.smallrye.mutiny.operators.uni.UniOperatorProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOperatorProcessor;
v1 := @parameter0: java.lang.Throwable;
v2 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription CANCELLED>;
v3 = virtualinvoke v0.<io.smallrye.mutiny.operators.uni.UniOperatorProcessor: io.smallrye.mutiny.subscription.UniSubscription getAndSetUpstreamSubscription(io.smallrye.mutiny.subscription.UniSubscription)>(v2);
v4 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription CANCELLED>;
if v3 == v4 goto label1;
v5 = v0.<io.smallrye.mutiny.operators.uni.UniOperatorProcessor: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
interfaceinvoke v5.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v1);
goto label2;
label1:
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v1);
label2:
return;
}
public void cancel()
{
io.smallrye.mutiny.subscription.UniSubscription v1, v2, v3, v4;
io.smallrye.mutiny.operators.uni.UniOperatorProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOperatorProcessor;
v1 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription CANCELLED>;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.uni.UniOperatorProcessor: io.smallrye.mutiny.subscription.UniSubscription getAndSetUpstreamSubscription(io.smallrye.mutiny.subscription.UniSubscription)>(v1);
if v2 == null goto label1;
v3 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription CANCELLED>;
if v2 == v3 goto label1;
v4 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription DONE>;
if v2 == v4 goto label1;
interfaceinvoke v2.<io.smallrye.mutiny.subscription.UniSubscription: void cancel()>();
label1:
return;
}
public boolean isCancelled()
{
io.smallrye.mutiny.subscription.UniSubscription v1, v2;
io.smallrye.mutiny.operators.uni.UniOperatorProcessor v0;
boolean v3;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOperatorProcessor;
v1 = v0.<io.smallrye.mutiny.operators.uni.UniOperatorProcessor: io.smallrye.mutiny.subscription.UniSubscription upstream>;
v2 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription CANCELLED>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
protected final io.smallrye.mutiny.subscription.UniSubscription getCurrentUpstreamSubscription()
{
io.smallrye.mutiny.subscription.UniSubscription v1;
io.smallrye.mutiny.operators.uni.UniOperatorProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOperatorProcessor;
v1 = v0.<io.smallrye.mutiny.operators.uni.UniOperatorProcessor: io.smallrye.mutiny.subscription.UniSubscription upstream>;
return v1;
}
protected final io.smallrye.mutiny.subscription.UniSubscription getAndSetUpstreamSubscription(io.smallrye.mutiny.subscription.UniSubscription)
{
io.smallrye.mutiny.subscription.UniSubscription v1;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v2;
java.lang.Object v3;
io.smallrye.mutiny.operators.uni.UniOperatorProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOperatorProcessor;
v1 := @parameter0: io.smallrye.mutiny.subscription.UniSubscription;
v2 = <io.smallrye.mutiny.operators.uni.UniOperatorProcessor: java.util.concurrent.atomic.AtomicReferenceFieldUpdater updater>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object getAndSet(java.lang.Object,java.lang.Object)>(v0, v1);
return v3;
}
protected final boolean compareAndSetUpstreamSubscription(io.smallrye.mutiny.subscription.UniSubscription, io.smallrye.mutiny.subscription.UniSubscription)
{
io.smallrye.mutiny.subscription.UniSubscription v1, v2;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v3;
io.smallrye.mutiny.operators.uni.UniOperatorProcessor v0;
boolean v4;
v0 := @this: io.smallrye.mutiny.operators.uni.UniOperatorProcessor;
v1 := @parameter0: io.smallrye.mutiny.subscription.UniSubscription;
v2 := @parameter1: io.smallrye.mutiny.subscription.UniSubscription;
v3 = <io.smallrye.mutiny.operators.uni.UniOperatorProcessor: java.util.concurrent.atomic.AtomicReferenceFieldUpdater updater>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(v0, v1, v2);
return v4;
}
static void <clinit>()
{
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v0;
v0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lio/smallrye/mutiny/operators/uni/UniOperatorProcessor;", class "Lio/smallrye/mutiny/subscription/UniSubscription;", "upstream");
<io.smallrye.mutiny.operators.uni.UniOperatorProcessor: java.util.concurrent.atomic.AtomicReferenceFieldUpdater updater> = v0;
return;
}
}