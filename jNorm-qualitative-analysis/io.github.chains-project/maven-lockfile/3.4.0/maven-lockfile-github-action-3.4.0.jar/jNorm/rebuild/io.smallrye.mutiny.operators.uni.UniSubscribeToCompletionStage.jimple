public class io.smallrye.mutiny.operators.uni.UniSubscribeToCompletionStage extends java.lang.Object
{
public void <init>()
{
io.smallrye.mutiny.operators.uni.UniSubscribeToCompletionStage v0;
v0 := @this: io.smallrye.mutiny.operators.uni.UniSubscribeToCompletionStage;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.util.concurrent.CompletableFuture subscribe(io.smallrye.mutiny.Uni, io.smallrye.mutiny.Context)
{
io.smallrye.mutiny.operators.uni.UniSubscribeToCompletionStage$1 v3;
java.util.concurrent.CompletableFuture v8;
io.smallrye.mutiny.Context v1;
java.util.concurrent.atomic.AtomicReference v2;
io.smallrye.mutiny.Uni v0;
java.util.function.Consumer v5, v6;
io.smallrye.mutiny.groups.UniSubscribe v4;
io.smallrye.mutiny.subscription.Cancellable v7;
v0 := @parameter0: io.smallrye.mutiny.Uni;
v1 := @parameter1: io.smallrye.mutiny.Context;
v2 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v2.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v3 = new io.smallrye.mutiny.operators.uni.UniSubscribeToCompletionStage$1;
specialinvoke v3.<io.smallrye.mutiny.operators.uni.UniSubscribeToCompletionStage$1: void <init>(java.util.concurrent.atomic.AtomicReference)>(v2);
v4 = interfaceinvoke v0.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
virtualinvoke v3.<java.lang.Object: java.lang.Class getClass()>();
v5 = staticinvoke <io.smallrye.mutiny.operators.uni.UniSubscribeToCompletionStage$complete__2725: java.util.function.Consumer bootstrap$(java.util.concurrent.CompletableFuture)>(v3);
virtualinvoke v3.<java.lang.Object: java.lang.Class getClass()>();
v6 = staticinvoke <io.smallrye.mutiny.operators.uni.UniSubscribeToCompletionStage$completeExceptionally__2726: java.util.function.Consumer bootstrap$(java.util.concurrent.CompletableFuture)>(v3);
v7 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(io.smallrye.mutiny.Context,java.util.function.Consumer,java.util.function.Consumer)>(v1, v5, v6);
virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(v7);
v8 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.CompletableFuture wrapCompletableFuture(java.util.concurrent.CompletableFuture)>(v3);
return v8;
}
}