public final class io.smallrye.mutiny.subscription.SafeSubscriber extends java.lang.Object implements java.util.concurrent.Flow$Subscriber, java.util.concurrent.Flow$Subscription, io.smallrye.mutiny.subscription.ContextSupport
{
private final java.util.concurrent.Flow$Subscriber downstream;
private java.util.concurrent.Flow$Subscription upstream;
private final java.util.concurrent.atomic.AtomicBoolean subscribed;
private boolean done;
public void <init>(java.util.concurrent.Flow$Subscriber)
{
io.smallrye.mutiny.subscription.SafeSubscriber v0;
java.util.concurrent.Flow$Subscriber v1;
java.util.concurrent.atomic.AtomicBoolean v2;
v0 := @this: io.smallrye.mutiny.subscription.SafeSubscriber;
v1 := @parameter0: java.util.concurrent.Flow$Subscriber;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v2.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);
v0.<io.smallrye.mutiny.subscription.SafeSubscriber: java.util.concurrent.atomic.AtomicBoolean subscribed> = v2;
v0.<io.smallrye.mutiny.subscription.SafeSubscriber: java.util.concurrent.Flow$Subscriber downstream> = v1;
return;
}
boolean isDone()
{
io.smallrye.mutiny.subscription.SafeSubscriber v0;
boolean v1;
v0 := @this: io.smallrye.mutiny.subscription.SafeSubscriber;
v1 = v0.<io.smallrye.mutiny.subscription.SafeSubscriber: boolean done>;
return v1;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
java.lang.Throwable v5, v6;
java.util.concurrent.Flow$Subscriber v4;
io.smallrye.mutiny.subscription.SafeSubscriber v0;
java.util.concurrent.atomic.AtomicBoolean v2;
boolean v3;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.subscription.SafeSubscriber;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = v0.<io.smallrye.mutiny.subscription.SafeSubscriber: java.util.concurrent.atomic.AtomicBoolean subscribed>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);
if v3 == 0 goto label7;
v0.<io.smallrye.mutiny.subscription.SafeSubscriber: java.util.concurrent.Flow$Subscription upstream> = v1;
label1:
v4 = v0.<io.smallrye.mutiny.subscription.SafeSubscriber: java.util.concurrent.Flow$Subscriber downstream>;
interfaceinvoke v4.<java.util.concurrent.Flow$Subscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v0);
label2:
goto label8;
label3:
v5 := @caughtexception;
v0.<io.smallrye.mutiny.subscription.SafeSubscriber: boolean done> = 1;
label4:
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void cancel()>();
label5:
goto label8;
label6:
v6 := @caughtexception;
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v6);
goto label8;
label7:
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void cancel()>();
label8:
return;
catch java.lang.Throwable from label1 to label2 with label3;
catch java.lang.Throwable from label4 to label5 with label6;
}
public void onNext(java.lang.Object)
{
java.lang.Throwable v6;
java.util.concurrent.Flow$Subscriber v5;
io.smallrye.mutiny.subscription.SafeSubscriber v0;
java.lang.Object v1;
java.lang.NullPointerException v4;
boolean v2;
java.util.concurrent.Flow$Subscription v3;
v0 := @this: io.smallrye.mutiny.subscription.SafeSubscriber;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.subscription.SafeSubscriber: boolean done>;
if v2 == 0 goto label1;
return;
label1:
v3 = v0.<io.smallrye.mutiny.subscription.SafeSubscriber: java.util.concurrent.Flow$Subscription upstream>;
if v3 != null goto label2;
specialinvoke v0.<io.smallrye.mutiny.subscription.SafeSubscriber: void onNextNoSubscription()>();
return;
label2:
if v1 != null goto label3;
v4 = new java.lang.NullPointerException;
specialinvoke v4.<java.lang.NullPointerException: void <init>(java.lang.String)>("onNext called with null.");
specialinvoke v0.<io.smallrye.mutiny.subscription.SafeSubscriber: void cancelAndDispatch(java.lang.Throwable)>(v4);
throw v4;
label3:
v5 = v0.<io.smallrye.mutiny.subscription.SafeSubscriber: java.util.concurrent.Flow$Subscriber downstream>;
interfaceinvoke v5.<java.util.concurrent.Flow$Subscriber: void onNext(java.lang.Object)>(v1);
label4:
goto label6;
label5:
v6 := @caughtexception;
specialinvoke v0.<io.smallrye.mutiny.subscription.SafeSubscriber: void cancelAndDispatch(java.lang.Throwable)>(v6);
label6:
return;
catch java.lang.Throwable from label3 to label4 with label5;
}
private void cancelAndDispatch(java.lang.Throwable)
{
java.lang.Throwable v1, v3;
io.smallrye.mutiny.CompositeException v4;
java.lang.Throwable[] v5;
io.smallrye.mutiny.subscription.SafeSubscriber v0;
java.util.concurrent.Flow$Subscription v2;
v0 := @this: io.smallrye.mutiny.subscription.SafeSubscriber;
v1 := @parameter0: java.lang.Throwable;
label1:
v2 = v0.<io.smallrye.mutiny.subscription.SafeSubscriber: java.util.concurrent.Flow$Subscription upstream>;
interfaceinvoke v2.<java.util.concurrent.Flow$Subscription: void cancel()>();
label2:
goto label4;
label3:
v3 := @caughtexception;
v4 = new io.smallrye.mutiny.CompositeException;
v5 = newarray (java.lang.Throwable)[2];
v5[0] = v1;
v5[1] = v3;
specialinvoke v4.<io.smallrye.mutiny.CompositeException: void <init>(java.lang.Throwable[])>(v5);
virtualinvoke v0.<io.smallrye.mutiny.subscription.SafeSubscriber: void onError(java.lang.Throwable)>(v4);
return;
label4:
virtualinvoke v0.<io.smallrye.mutiny.subscription.SafeSubscriber: void onError(java.lang.Throwable)>(v1);
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
private void onNextNoSubscription()
{
io.smallrye.mutiny.subscription.SafeSubscriber v0;
v0 := @this: io.smallrye.mutiny.subscription.SafeSubscriber;
v0.<io.smallrye.mutiny.subscription.SafeSubscriber: boolean done> = 1;
specialinvoke v0.<io.smallrye.mutiny.subscription.SafeSubscriber: void manageViolationProtocol()>();
return;
}
public void onError(java.lang.Throwable)
{
java.lang.Throwable v1, v13, v17, v7;
java.lang.NullPointerException v4;
io.smallrye.mutiny.subscription.SafeSubscriber v0;
boolean v2;
java.util.concurrent.Flow$Subscription v3, v6;
io.smallrye.mutiny.CompositeException v11, v14, v18, v8;
java.util.concurrent.Flow$Subscriber v10, v16, v5;
java.lang.Throwable[] v12, v15, v19, v9;
v0 := @this: io.smallrye.mutiny.subscription.SafeSubscriber;
v1 := @parameter0: java.lang.Throwable;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = v0.<io.smallrye.mutiny.subscription.SafeSubscriber: boolean done>;
if v2 == 0 goto label01;
return;
label01:
v0.<io.smallrye.mutiny.subscription.SafeSubscriber: boolean done> = 1;
v3 = v0.<io.smallrye.mutiny.subscription.SafeSubscriber: java.util.concurrent.Flow$Subscription upstream>;
if v3 != null goto label09;
v4 = new java.lang.NullPointerException;
specialinvoke v4.<java.lang.NullPointerException: void <init>(java.lang.String)>("Subscription not set!");
label02:
v5 = v0.<io.smallrye.mutiny.subscription.SafeSubscriber: java.util.concurrent.Flow$Subscriber downstream>;
v6 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: java.util.concurrent.Flow$Subscription empty()>();
interfaceinvoke v5.<java.util.concurrent.Flow$Subscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v6);
label03:
goto label05;
label04:
v7 := @caughtexception;
v8 = new io.smallrye.mutiny.CompositeException;
v9 = newarray (java.lang.Throwable)[2];
v9[0] = v1;
v9[1] = v7;
specialinvoke v8.<io.smallrye.mutiny.CompositeException: void <init>(java.lang.Throwable[])>(v9);
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v8);
return;
label05:
v10 = v0.<io.smallrye.mutiny.subscription.SafeSubscriber: java.util.concurrent.Flow$Subscriber downstream>;
v11 = new io.smallrye.mutiny.CompositeException;
v12 = newarray (java.lang.Throwable)[2];
v12[0] = v1;
v12[1] = v4;
specialinvoke v11.<io.smallrye.mutiny.CompositeException: void <init>(java.lang.Throwable[])>(v12);
interfaceinvoke v10.<java.util.concurrent.Flow$Subscriber: void onError(java.lang.Throwable)>(v11);
label06:
goto label08;
label07:
v13 := @caughtexception;
v14 = new io.smallrye.mutiny.CompositeException;
v15 = newarray (java.lang.Throwable)[3];
v15[0] = v1;
v15[1] = v4;
v15[2] = v13;
specialinvoke v14.<io.smallrye.mutiny.CompositeException: void <init>(java.lang.Throwable[])>(v15);
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v14);
label08:
return;
label09:
v16 = v0.<io.smallrye.mutiny.subscription.SafeSubscriber: java.util.concurrent.Flow$Subscriber downstream>;
interfaceinvoke v16.<java.util.concurrent.Flow$Subscriber: void onError(java.lang.Throwable)>(v1);
label10:
goto label12;
label11:
v17 := @caughtexception;
v18 = new io.smallrye.mutiny.CompositeException;
v19 = newarray (java.lang.Throwable)[2];
v19[0] = v1;
v19[1] = v17;
specialinvoke v18.<io.smallrye.mutiny.CompositeException: void <init>(java.lang.Throwable[])>(v19);
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v18);
label12:
return;
catch java.lang.Throwable from label02 to label03 with label04;
catch java.lang.Throwable from label05 to label06 with label07;
catch java.lang.Throwable from label09 to label10 with label11;
}
public void onComplete()
{
java.lang.Throwable v4;
java.util.concurrent.Flow$Subscriber v3;
io.smallrye.mutiny.subscription.SafeSubscriber v0;
boolean v1;
java.util.concurrent.Flow$Subscription v2;
v0 := @this: io.smallrye.mutiny.subscription.SafeSubscriber;
v1 = v0.<io.smallrye.mutiny.subscription.SafeSubscriber: boolean done>;
if v1 == 0 goto label1;
return;
label1:
v0.<io.smallrye.mutiny.subscription.SafeSubscriber: boolean done> = 1;
v2 = v0.<io.smallrye.mutiny.subscription.SafeSubscriber: java.util.concurrent.Flow$Subscription upstream>;
if v2 != null goto label2;
specialinvoke v0.<io.smallrye.mutiny.subscription.SafeSubscriber: void onCompleteNoSubscription()>();
return;
label2:
v3 = v0.<io.smallrye.mutiny.subscription.SafeSubscriber: java.util.concurrent.Flow$Subscriber downstream>;
interfaceinvoke v3.<java.util.concurrent.Flow$Subscriber: void onComplete()>();
label3:
goto label5;
label4:
v4 := @caughtexception;
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v4);
label5:
return;
catch java.lang.Throwable from label2 to label3 with label4;
}
private void onCompleteNoSubscription()
{
io.smallrye.mutiny.subscription.SafeSubscriber v0;
v0 := @this: io.smallrye.mutiny.subscription.SafeSubscriber;
specialinvoke v0.<io.smallrye.mutiny.subscription.SafeSubscriber: void manageViolationProtocol()>();
return;
}
private void manageViolationProtocol()
{
java.lang.Throwable v4, v8;
java.lang.NullPointerException v1;
io.smallrye.mutiny.CompositeException v5, v9;
java.util.concurrent.Flow$Subscriber v2, v7;
java.lang.Throwable[] v10, v6;
io.smallrye.mutiny.subscription.SafeSubscriber v0;
java.util.concurrent.Flow$Subscription v3;
v0 := @this: io.smallrye.mutiny.subscription.SafeSubscriber;
v1 = new java.lang.NullPointerException;
specialinvoke v1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Subscription not set!");
label1:
v2 = v0.<io.smallrye.mutiny.subscription.SafeSubscriber: java.util.concurrent.Flow$Subscriber downstream>;
v3 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: java.util.concurrent.Flow$Subscription empty()>();
interfaceinvoke v2.<java.util.concurrent.Flow$Subscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v3);
label2:
goto label4;
label3:
v4 := @caughtexception;
v5 = new io.smallrye.mutiny.CompositeException;
v6 = newarray (java.lang.Throwable)[2];
v6[0] = v1;
v6[1] = v4;
specialinvoke v5.<io.smallrye.mutiny.CompositeException: void <init>(java.lang.Throwable[])>(v6);
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v5);
return;
label4:
v7 = v0.<io.smallrye.mutiny.subscription.SafeSubscriber: java.util.concurrent.Flow$Subscriber downstream>;
interfaceinvoke v7.<java.util.concurrent.Flow$Subscriber: void onError(java.lang.Throwable)>(v1);
label5:
goto label7;
label6:
v8 := @caughtexception;
v9 = new io.smallrye.mutiny.CompositeException;
v10 = newarray (java.lang.Throwable)[2];
v10[0] = v1;
v10[1] = v8;
specialinvoke v9.<io.smallrye.mutiny.CompositeException: void <init>(java.lang.Throwable[])>(v10);
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v9);
label7:
return;
catch java.lang.Throwable from label1 to label2 with label3;
catch java.lang.Throwable from label4 to label5 with label6;
}
public void request(long)
{
java.lang.Throwable v3, v5;
long v1;
io.smallrye.mutiny.CompositeException v6;
java.lang.Throwable[] v7;
io.smallrye.mutiny.subscription.SafeSubscriber v0;
java.util.concurrent.Flow$Subscription v2, v4;
v0 := @this: io.smallrye.mutiny.subscription.SafeSubscriber;
v1 := @parameter0: long;
label1:
v2 = v0.<io.smallrye.mutiny.subscription.SafeSubscriber: java.util.concurrent.Flow$Subscription upstream>;
interfaceinvoke v2.<java.util.concurrent.Flow$Subscription: void request(long)>(v1);
label2:
goto label7;
label3:
v3 := @caughtexception;
label4:
v4 = v0.<io.smallrye.mutiny.subscription.SafeSubscriber: java.util.concurrent.Flow$Subscription upstream>;
interfaceinvoke v4.<java.util.concurrent.Flow$Subscription: void cancel()>();
label5:
goto label7;
label6:
v5 := @caughtexception;
v6 = new io.smallrye.mutiny.CompositeException;
v7 = newarray (java.lang.Throwable)[2];
v7[0] = v3;
v7[1] = v5;
specialinvoke v6.<io.smallrye.mutiny.CompositeException: void <init>(java.lang.Throwable[])>(v7);
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v6);
label7:
return;
catch java.lang.Throwable from label1 to label2 with label3;
catch java.lang.Throwable from label4 to label5 with label6;
}
public void cancel()
{
io.smallrye.mutiny.subscription.SafeSubscriber v0;
java.lang.Throwable v2;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.subscription.SafeSubscriber;
label1:
v1 = v0.<io.smallrye.mutiny.subscription.SafeSubscriber: java.util.concurrent.Flow$Subscription upstream>;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void cancel()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v2);
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.smallrye.mutiny.Context context()
{
java.util.concurrent.Flow$Subscriber v1, v3;
io.smallrye.mutiny.subscription.SafeSubscriber v0;
io.smallrye.mutiny.Context v4, v5;
boolean v2;
v0 := @this: io.smallrye.mutiny.subscription.SafeSubscriber;
v1 = v0.<io.smallrye.mutiny.subscription.SafeSubscriber: java.util.concurrent.Flow$Subscriber downstream>;
v2 = v1 instanceof io.smallrye.mutiny.subscription.ContextSupport;
if v2 == 0 goto label1;
v3 = v0.<io.smallrye.mutiny.subscription.SafeSubscriber: java.util.concurrent.Flow$Subscriber downstream>;
v4 = interfaceinvoke v3.<io.smallrye.mutiny.subscription.ContextSupport: io.smallrye.mutiny.Context context()>();
return v4;
label1:
v5 = staticinvoke <io.smallrye.mutiny.Context: io.smallrye.mutiny.Context empty()>();
return v5;
}
}