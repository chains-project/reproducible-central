public class io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber extends java.lang.Object implements io.smallrye.mutiny.subscription.CancellableSubscriber, java.util.concurrent.Flow$Subscription, io.smallrye.mutiny.subscription.ContextSupport
{
private volatile java.util.concurrent.Flow$Subscription subscription;
private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater SUBSCRIPTION_UPDATER;
private final io.smallrye.mutiny.Context context;
private final java.util.function.Consumer onItem;
private final java.util.function.Consumer onFailure;
private final java.lang.Runnable onCompletion;
private final java.util.function.Consumer onSubscription;
public void <init>(io.smallrye.mutiny.Context, java.util.function.Consumer, java.util.function.Consumer, java.lang.Runnable, java.util.function.Consumer)
{
io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber v0;
io.smallrye.mutiny.Context v1;
java.lang.Runnable v4;
java.util.function.Consumer v2, v3, v5;
java.lang.Object v6, v7;
v0 := @this: io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber;
v1 := @parameter0: io.smallrye.mutiny.Context;
v2 := @parameter1: java.util.function.Consumer;
v3 := @parameter2: java.util.function.Consumer;
v4 := @parameter3: java.lang.Runnable;
v5 := @parameter4: java.util.function.Consumer;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber: io.smallrye.mutiny.Context context> = v1;
v6 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v2, "onItem");
v0.<io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber: java.util.function.Consumer onItem> = v6;
v0.<io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber: java.util.function.Consumer onFailure> = v3;
v0.<io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber: java.lang.Runnable onCompletion> = v4;
v7 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v5, "onSubscription");
v0.<io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber: java.util.function.Consumer onSubscription> = v7;
return;
}
public io.smallrye.mutiny.Context context()
{
io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber v0;
io.smallrye.mutiny.Context v1;
v0 := @this: io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber;
v1 = v0.<io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber: io.smallrye.mutiny.Context context>;
return v1;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
java.lang.Throwable v5;
java.util.function.Consumer v4;
io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber v0;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v2;
boolean v3;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = <io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber: java.util.concurrent.atomic.AtomicReferenceFieldUpdater SUBSCRIPTION_UPDATER>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(v0, null, v1);
if v3 == 0 goto label4;
label1:
v4 = v0.<io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber: java.util.function.Consumer onSubscription>;
interfaceinvoke v4.<java.util.function.Consumer: void accept(java.lang.Object)>(v0);
label2:
goto label5;
label3:
v5 := @caughtexception;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void cancel()>();
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v5);
goto label5;
label4:
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void cancel()>();
label5:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void onItem(java.lang.Object)
{
java.lang.Throwable v6;
io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber v0;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v2, v7;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v4, v8;
java.util.function.Consumer v5;
java.lang.Object v1, v3, v9;
v0 := @this: io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber;
v1 := @parameter0: java.lang.Object;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = <io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber: java.util.concurrent.atomic.AtomicReferenceFieldUpdater SUBSCRIPTION_UPDATER>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(v0);
v4 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v3 == v4 goto label4;
label1:
v5 = v0.<io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber: java.util.function.Consumer onItem>;
interfaceinvoke v5.<java.util.function.Consumer: void accept(java.lang.Object)>(v1);
label2:
goto label4;
label3:
v6 := @caughtexception;
v7 = <io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber: java.util.concurrent.atomic.AtomicReferenceFieldUpdater SUBSCRIPTION_UPDATER>;
v8 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
v9 = virtualinvoke v7.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object getAndSet(java.lang.Object,java.lang.Object)>(v0, v8);
interfaceinvoke v9.<java.util.concurrent.Flow$Subscription: void cancel()>();
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v6);
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1, v8;
io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber v0;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v2;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v3, v5;
java.util.function.Consumer v6, v7;
io.smallrye.mutiny.CompositeException v9;
java.lang.Throwable[] v10;
java.lang.Object v4;
v0 := @this: io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber;
v1 := @parameter0: java.lang.Throwable;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = <io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber: java.util.concurrent.atomic.AtomicReferenceFieldUpdater SUBSCRIPTION_UPDATER>;
v3 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
v4 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object getAndSet(java.lang.Object,java.lang.Object)>(v0, v3);
v5 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v4 == v5 goto label5;
v6 = v0.<io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber: java.util.function.Consumer onFailure>;
if v6 == null goto label4;
label1:
v7 = v0.<io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber: java.util.function.Consumer onFailure>;
interfaceinvoke v7.<java.util.function.Consumer: void accept(java.lang.Object)>(v1);
label2:
goto label6;
label3:
v8 := @caughtexception;
v9 = new io.smallrye.mutiny.CompositeException;
v10 = newarray (java.lang.Throwable)[2];
v10[0] = v1;
v10[1] = v8;
specialinvoke v9.<io.smallrye.mutiny.CompositeException: void <init>(java.lang.Throwable[])>(v10);
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v9);
goto label6;
label4:
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v1);
goto label6;
label5:
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v1);
label6:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void onCompletion()
{
io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber v0;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v1;
java.lang.Object v3;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v2, v4;
java.lang.Runnable v5, v6;
v0 := @this: io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber;
v1 = <io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber: java.util.concurrent.atomic.AtomicReferenceFieldUpdater SUBSCRIPTION_UPDATER>;
v2 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
v3 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object getAndSet(java.lang.Object,java.lang.Object)>(v0, v2);
v4 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v3 == v4 goto label1;
v5 = v0.<io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber: java.lang.Runnable onCompletion>;
if v5 == null goto label1;
v6 = v0.<io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber: java.lang.Runnable onCompletion>;
interfaceinvoke v6.<java.lang.Runnable: void run()>();
label1:
return;
}
public void request(long)
{
io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber v0;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v2;
java.lang.Object v3;
long v1;
v0 := @this: io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber;
v1 := @parameter0: long;
v2 = <io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber: java.util.concurrent.atomic.AtomicReferenceFieldUpdater SUBSCRIPTION_UPDATER>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(v0);
interfaceinvoke v3.<java.util.concurrent.Flow$Subscription: void request(long)>(v1);
return;
}
public void cancel()
{
io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber v0;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v1;
java.lang.Object v3;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v2, v4;
v0 := @this: io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber;
v1 = <io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber: java.util.concurrent.atomic.AtomicReferenceFieldUpdater SUBSCRIPTION_UPDATER>;
v2 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
v3 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object getAndSet(java.lang.Object,java.lang.Object)>(v0, v2);
if v3 == null goto label1;
v4 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v3 == v4 goto label1;
interfaceinvoke v3.<java.util.concurrent.Flow$Subscription: void cancel()>();
label1:
return;
}
static void <clinit>()
{
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v0;
v0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lio/smallrye/mutiny/subscription/Subscribers$CallbackBasedSubscriber;", class "Ljava/util/concurrent/Flow$Subscription;", "subscription");
<io.smallrye.mutiny.subscription.Subscribers$CallbackBasedSubscriber: java.util.concurrent.atomic.AtomicReferenceFieldUpdater SUBSCRIPTION_UPDATER> = v0;
return;
}
}