public class io.smallrye.mutiny.vertx.MultiHelper extends java.lang.Object
{
public void <init>()
{
io.smallrye.mutiny.vertx.MultiHelper v0;
v0 := @this: io.smallrye.mutiny.vertx.MultiHelper;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static io.vertx.core.streams.ReadStream toReadStream(io.smallrye.mutiny.Multi)
{
io.vertx.core.streams.ReadStream v2;
java.util.function.Function v1;
io.smallrye.mutiny.Multi v0;
v0 := @parameter0: io.smallrye.mutiny.Multi;
v1 = staticinvoke <java.util.function.Function: java.util.function.Function identity()>();
v2 = staticinvoke <io.smallrye.mutiny.vertx.ReadStreamSubscriber: io.vertx.core.streams.ReadStream asReadStream(java.util.concurrent.Flow$Publisher,java.util.function.Function)>(v0, v1);
return v2;
}
public static io.smallrye.mutiny.Multi toMulti(io.vertx.core.streams.ReadStream, java.util.function.Function)
{
io.vertx.core.streams.ReadStream v0;
io.smallrye.mutiny.vertx.MultiReadStream v2;
java.util.function.Function v1;
v0 := @parameter0: io.vertx.core.streams.ReadStream;
v1 := @parameter1: java.util.function.Function;
v2 = new io.smallrye.mutiny.vertx.MultiReadStream;
specialinvoke v2.<io.smallrye.mutiny.vertx.MultiReadStream: void <init>(io.vertx.core.streams.ReadStream,java.util.function.Function)>(v0, v1);
return v2;
}
public static io.smallrye.mutiny.Multi toMulti(io.vertx.core.streams.ReadStream)
{
io.vertx.core.streams.ReadStream v0;
io.smallrye.mutiny.vertx.MultiReadStream v1;
java.util.function.Function v2;
v0 := @parameter0: io.vertx.core.streams.ReadStream;
v1 = new io.smallrye.mutiny.vertx.MultiReadStream;
v2 = staticinvoke <java.util.function.Function: java.util.function.Function identity()>();
specialinvoke v1.<io.smallrye.mutiny.vertx.MultiReadStream: void <init>(io.vertx.core.streams.ReadStream,java.util.function.Function)>(v0, v2);
return v1;
}
}