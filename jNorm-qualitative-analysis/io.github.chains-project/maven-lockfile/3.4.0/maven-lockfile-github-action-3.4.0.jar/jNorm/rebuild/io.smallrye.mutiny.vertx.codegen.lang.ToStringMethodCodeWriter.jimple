public class io.smallrye.mutiny.vertx.codegen.lang.ToStringMethodCodeWriter extends java.lang.Object implements io.smallrye.mutiny.vertx.codegen.lang.ConditionalCodeWriter
{
public void <init>()
{
io.smallrye.mutiny.vertx.codegen.lang.ToStringMethodCodeWriter v0;
v0 := @this: io.smallrye.mutiny.vertx.codegen.lang.ToStringMethodCodeWriter;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void generate(io.vertx.codegen.ClassModel, java.io.PrintWriter)
{
java.io.PrintWriter v2;
io.smallrye.mutiny.vertx.codegen.lang.ToStringMethodCodeWriter v0;
io.vertx.codegen.ClassModel v1;
v0 := @this: io.smallrye.mutiny.vertx.codegen.lang.ToStringMethodCodeWriter;
v1 := @parameter0: io.vertx.codegen.ClassModel;
v2 := @parameter1: java.io.PrintWriter;
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("  @Override");
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("  public String toString() {");
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("    return delegate.toString();");
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("  }");
virtualinvoke v2.<java.io.PrintWriter: void println()>();
return;
}
public boolean test(io.vertx.codegen.ClassModel)
{
io.smallrye.mutiny.vertx.codegen.lang.ToStringMethodCodeWriter v0;
java.util.function.Predicate v5;
io.vertx.codegen.ClassModel v1;
java.util.List v2;
java.util.stream.Stream v4;
boolean v3, v6, v7;
v0 := @this: io.smallrye.mutiny.vertx.codegen.lang.ToStringMethodCodeWriter;
v1 := @parameter0: io.vertx.codegen.ClassModel;
v2 = virtualinvoke v1.<io.vertx.codegen.ClassModel: java.util.List getMethods()>();
v3 = virtualinvoke v1.<io.vertx.codegen.ClassModel: boolean isConcrete()>();
if v3 == 0 goto label1;
v4 = interfaceinvoke v2.<java.util.List: java.util.stream.Stream stream()>();
v5 = staticinvoke <io.smallrye.mutiny.vertx.codegen.lang.ToStringMethodCodeWriter$lambda_test_0__2378: java.util.function.Predicate bootstrap$()>();
v6 = interfaceinvoke v4.<java.util.stream.Stream: boolean noneMatch(java.util.function.Predicate)>(v5);
if v6 == 0 goto label1;
v7 = 1;
goto label2;
label1:
v7 = 0;
label2:
return v7;
}
}