public class io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl extends java.lang.Object implements io.smallrye.mutiny.vertx.WriteStreamSubscriber
{
private static final int BATCH_SIZE;
private final io.vertx.core.streams.WriteStream stream;
private final java.util.function.Function mapping;
private java.util.concurrent.atomic.AtomicReference upstream;
private java.util.concurrent.atomic.AtomicBoolean done;
private int outstanding;
private java.util.function.Consumer onFailure;
private java.lang.Runnable onCompletion;
private java.util.function.Consumer onStreamFailure;
public void <init>(io.vertx.core.streams.WriteStream, java.util.function.Function)
{
io.vertx.core.streams.WriteStream v1;
io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl v0;
java.util.concurrent.atomic.AtomicBoolean v4;
java.lang.Object v5, v6;
java.util.concurrent.atomic.AtomicReference v3;
java.util.function.Function v2;
v0 := @this: io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl;
v1 := @parameter0: io.vertx.core.streams.WriteStream;
v2 := @parameter1: java.util.function.Function;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v3.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl: java.util.concurrent.atomic.AtomicReference upstream> = v3;
v4 = new java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v4.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();
v0.<io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl: java.util.concurrent.atomic.AtomicBoolean done> = v4;
v5 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "writeStream");
v0.<io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl: io.vertx.core.streams.WriteStream stream> = v5;
v6 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v2, "mapping");
v0.<io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl: java.util.function.Function mapping> = v6;
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
java.util.concurrent.atomic.AtomicReference v2;
io.vertx.core.streams.WriteStream v4, v6;
io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl v0;
io.vertx.core.Handler v5, v7;
boolean v3;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNullNpe(java.lang.Object,java.lang.String)>(v1, "upstream");
v2 = v0.<io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl: java.util.concurrent.atomic.AtomicReference upstream>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, v1);
if v3 == 0 goto label1;
v4 = v0.<io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl: io.vertx.core.streams.WriteStream stream>;
v5 = staticinvoke <io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl$lambda_onSubscribe_0__2329: io.vertx.core.Handler bootstrap$(io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl)>(v0);
interfaceinvoke v4.<io.vertx.core.streams.WriteStream: io.vertx.core.streams.WriteStream exceptionHandler(io.vertx.core.Handler)>(v5);
v6 = v0.<io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl: io.vertx.core.streams.WriteStream stream>;
v7 = staticinvoke <io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl$lambda_onSubscribe_1__2330: io.vertx.core.Handler bootstrap$(io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl)>(v0);
interfaceinvoke v6.<io.vertx.core.streams.WriteStream: io.vertx.core.streams.WriteStream drainHandler(io.vertx.core.Handler)>(v7);
specialinvoke v0.<io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl: void requestMore()>();
goto label2;
label1:
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void cancel()>();
label2:
return;
}
private void cancel()
{
java.util.concurrent.atomic.AtomicReference v1;
io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl v0;
v0 := @this: io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl;
v1 = v0.<io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl: java.util.concurrent.atomic.AtomicReference upstream>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void cancel(java.util.concurrent.atomic.AtomicReference)>(v1);
return;
}
public void onNext(java.lang.Object)
{
java.lang.Throwable v14, v15, v16, v17, v6;
java.util.concurrent.atomic.AtomicBoolean v2;
java.util.function.Function v10;
java.lang.NullPointerException v4;
io.vertx.core.streams.WriteStream v20, v9;
int v12, v13;
boolean v21, v3;
java.lang.RuntimeException v5;
io.smallrye.mutiny.CompositeException v18, v7;
io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl v0;
java.lang.Throwable[] v19, v8;
java.lang.Object v1, v11;
v0 := @this: io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl: java.util.concurrent.atomic.AtomicBoolean done>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
if v3 == 0 goto label01;
return;
label01:
if v1 != null goto label06;
v4 = new java.lang.NullPointerException;
specialinvoke v4.<java.lang.NullPointerException: void <init>(java.lang.String)>("onNext called with null");
v5 = v4;
label02:
specialinvoke v0.<io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl: void cancel()>();
label03:
goto label05;
label04:
v6 := @caughtexception;
v7 = new io.smallrye.mutiny.CompositeException;
v8 = newarray (java.lang.Throwable)[2];
v8[0] = v4;
v8[1] = v6;
specialinvoke v7.<io.smallrye.mutiny.CompositeException: void <init>(java.lang.Throwable[])>(v8);
v5 = v7;
label05:
virtualinvoke v0.<io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl: void onError(java.lang.Throwable)>(v5);
return;
label06:
v9 = v0.<io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl: io.vertx.core.streams.WriteStream stream>;
v10 = v0.<io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl: java.util.function.Function mapping>;
v11 = interfaceinvoke v10.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v1);
interfaceinvoke v9.<io.vertx.core.streams.WriteStream: io.vertx.core.Future write(java.lang.Object)>(v11);
entermonitor v0;
label07:
v12 = v0.<io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl: int outstanding>;
v13 = v12 - 1;
v0.<io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl: int outstanding> = v13;
exitmonitor v0;
label08:
goto label15;
label09:
v14 := @caughtexception;
exitmonitor v0;
throw v14;
label10:
v15 := @caughtexception;
label11:
specialinvoke v0.<io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl: void cancel()>();
v16 = v15;
label12:
goto label14;
label13:
v17 := @caughtexception;
v18 = new io.smallrye.mutiny.CompositeException;
v19 = newarray (java.lang.Throwable)[2];
v19[0] = v15;
v19[1] = v17;
specialinvoke v18.<io.smallrye.mutiny.CompositeException: void <init>(java.lang.Throwable[])>(v19);
v16 = v18;
label14:
virtualinvoke v0.<io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl: void onError(java.lang.Throwable)>(v16);
return;
label15:
v20 = v0.<io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl: io.vertx.core.streams.WriteStream stream>;
v21 = interfaceinvoke v20.<io.vertx.core.streams.WriteStream: boolean writeQueueFull()>();
if v21 != 0 goto label16;
specialinvoke v0.<io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl: void requestMore()>();
label16:
return;
catch java.lang.Throwable from label02 to label03 with label04;
catch java.lang.Throwable from label07 to label08 with label09;
catch java.lang.Throwable from label06 to label10 with label10;
catch java.lang.Throwable from label11 to label12 with label13;
}
public void onError(java.lang.Throwable)
{
java.lang.Throwable v1, v5, v6;
java.util.function.Consumer v4;
io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl v0;
java.util.concurrent.atomic.AtomicBoolean v2;
boolean v3;
v0 := @this: io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl: java.util.concurrent.atomic.AtomicBoolean done>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>(1);
if v3 == 0 goto label1;
return;
label1:
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNullNpe(java.lang.Object,java.lang.String)>(v1, "failure");
entermonitor v0;
label2:
v4 = v0.<io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl: java.util.function.Consumer onFailure>;
exitmonitor v0;
label3:
goto label5;
label4:
v5 := @caughtexception;
exitmonitor v0;
throw v5;
label5:
if v4 == null goto label8;
interfaceinvoke v4.<java.util.function.Consumer: void accept(java.lang.Object)>(v1);
label6:
goto label8;
label7:
v6 := @caughtexception;
label8:
return;
catch java.lang.Throwable from label2 to label3 with label4;
catch java.lang.Throwable from label5 to label6 with label7;
}
public void onComplete()
{
java.lang.Throwable v4, v6;
io.vertx.core.streams.WriteStream v5;
io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl v0;
java.util.concurrent.atomic.AtomicBoolean v1;
java.lang.Runnable v3;
boolean v2;
v0 := @this: io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl;
v1 = v0.<io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl: java.util.concurrent.atomic.AtomicBoolean done>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>(1);
if v2 == 0 goto label1;
return;
label1:
entermonitor v0;
label2:
v3 = v0.<io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl: java.lang.Runnable onCompletion>;
exitmonitor v0;
label3:
goto label5;
label4:
v4 := @caughtexception;
exitmonitor v0;
throw v4;
label5:
v5 = v0.<io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl: io.vertx.core.streams.WriteStream stream>;
interfaceinvoke v5.<io.vertx.core.streams.WriteStream: io.vertx.core.Future end()>();
if v3 == null goto label8;
interfaceinvoke v3.<java.lang.Runnable: void run()>();
label6:
goto label8;
label7:
v6 := @caughtexception;
label8:
return;
catch java.lang.Throwable from label2 to label3 with label4;
catch java.lang.Throwable from label5 to label6 with label7;
}
private void requestMore()
{
java.lang.Throwable v6;
io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl v0;
int v5;
java.util.concurrent.atomic.AtomicBoolean v3;
java.lang.Object v2;
java.util.concurrent.atomic.AtomicReference v1;
boolean v4;
v0 := @this: io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl;
v1 = v0.<io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl: java.util.concurrent.atomic.AtomicReference upstream>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v2 != null goto label1;
return;
label1:
entermonitor v0;
label2:
v3 = v0.<io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl: java.util.concurrent.atomic.AtomicBoolean done>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
if v4 != 0 goto label3;
v5 = v0.<io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl: int outstanding>;
if v5 <= 0 goto label5;
label3:
exitmonitor v0;
label4:
return;
label5:
v0.<io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl: int outstanding> = 16;
exitmonitor v0;
label6:
goto label8;
label7:
v6 := @caughtexception;
exitmonitor v0;
throw v6;
label8:
interfaceinvoke v2.<java.util.concurrent.Flow$Subscription: void request(long)>(16L);
return;
catch java.lang.Throwable from label2 to label4 with label7;
catch java.lang.Throwable from label5 to label6 with label7;
}
public synchronized io.smallrye.mutiny.vertx.WriteStreamSubscriber onFailure(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl v0;
v0 := @this: io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl;
v1 := @parameter0: java.util.function.Consumer;
v0.<io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl: java.util.function.Consumer onFailure> = v1;
return v0;
}
public synchronized io.smallrye.mutiny.vertx.WriteStreamSubscriber onComplete(java.lang.Runnable)
{
java.lang.Runnable v1;
io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl v0;
v0 := @this: io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl;
v1 := @parameter0: java.lang.Runnable;
v0.<io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl: java.lang.Runnable onCompletion> = v1;
return v0;
}
public synchronized io.smallrye.mutiny.vertx.WriteStreamSubscriber onWriteStreamError(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl v0;
v0 := @this: io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl;
v1 := @parameter0: java.util.function.Consumer;
v0.<io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl: java.util.function.Consumer onStreamFailure> = v1;
return v0;
}
}