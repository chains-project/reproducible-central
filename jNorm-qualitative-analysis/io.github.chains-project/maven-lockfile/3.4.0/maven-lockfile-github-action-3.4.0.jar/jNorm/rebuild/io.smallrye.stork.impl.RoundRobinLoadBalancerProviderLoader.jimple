public class io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader extends java.lang.Object implements io.smallrye.stork.spi.internal.LoadBalancerLoader
{
private final io.smallrye.stork.impl.RoundRobinLoadBalancerProvider provider;
public void <init>()
{
jakarta.enterprise.inject.spi.CDI v1;
java.lang.Object v4;
io.smallrye.stork.impl.RoundRobinLoadBalancerProvider v6;
java.lang.'annotation'.Annotation[] v2;
io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader v0;
jakarta.enterprise.inject.Instance v3;
java.lang.Exception v5;
v0 := @this: io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader;
specialinvoke v0.<java.lang.Object: void <init>()>();
label1:
v1 = staticinvoke <jakarta.enterprise.inject.spi.CDI: jakarta.enterprise.inject.spi.CDI current()>();
v2 = newarray (java.lang.'annotation'.Annotation)[0];
v3 = virtualinvoke v1.<jakarta.enterprise.inject.spi.CDI: jakarta.enterprise.inject.Instance select(java.lang.Class,java.lang.'annotation'.Annotation[])>(class "Lio/smallrye/stork/impl/RoundRobinLoadBalancerProvider;", v2);
v4 = interfaceinvoke v3.<jakarta.enterprise.inject.Instance: java.lang.Object get()>();
label2:
goto label4;
label3:
v5 := @caughtexception;
v6 = new io.smallrye.stork.impl.RoundRobinLoadBalancerProvider;
specialinvoke v6.<io.smallrye.stork.impl.RoundRobinLoadBalancerProvider: void <init>()>();
v4 = v6;
label4:
v0.<io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader: io.smallrye.stork.impl.RoundRobinLoadBalancerProvider provider> = v4;
return;
catch java.lang.Exception from label1 to label2 with label3;
}
public io.smallrye.stork.api.LoadBalancer createLoadBalancer(io.smallrye.stork.api.config.ConfigWithType, io.smallrye.stork.api.ServiceDiscovery)
{
io.smallrye.stork.api.LoadBalancer v6;
io.smallrye.stork.impl.RoundRobinConfiguration v3;
java.util.Map v4;
io.smallrye.stork.impl.RoundRobinLoadBalancerProvider v5;
io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader v0;
io.smallrye.stork.api.config.ConfigWithType v1;
io.smallrye.stork.api.ServiceDiscovery v2;
v0 := @this: io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader;
v1 := @parameter0: io.smallrye.stork.api.config.ConfigWithType;
v2 := @parameter1: io.smallrye.stork.api.ServiceDiscovery;
v3 = new io.smallrye.stork.impl.RoundRobinConfiguration;
v4 = interfaceinvoke v1.<io.smallrye.stork.api.config.ConfigWithType: java.util.Map parameters()>();
specialinvoke v3.<io.smallrye.stork.impl.RoundRobinConfiguration: void <init>(java.util.Map)>(v4);
v5 = v0.<io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader: io.smallrye.stork.impl.RoundRobinLoadBalancerProvider provider>;
v6 = virtualinvoke v5.<io.smallrye.stork.impl.RoundRobinLoadBalancerProvider: io.smallrye.stork.api.LoadBalancer createLoadBalancer(io.smallrye.stork.impl.RoundRobinConfiguration,io.smallrye.stork.api.ServiceDiscovery)>(v3, v2);
return v6;
}
public java.lang.String type()
{
io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader v0;
v0 := @this: io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader;
return "round-robin";
}
}