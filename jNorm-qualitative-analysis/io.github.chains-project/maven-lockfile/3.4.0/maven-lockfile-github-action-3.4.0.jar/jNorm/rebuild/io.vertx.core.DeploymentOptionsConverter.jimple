public class io.vertx.core.DeploymentOptionsConverter extends java.lang.Object
{
private static final java.util.Base64$Decoder BASE64_DECODER;
private static final java.util.Base64$Encoder BASE64_ENCODER;
public void <init>()
{
io.vertx.core.DeploymentOptionsConverter v0;
v0 := @this: io.vertx.core.DeploymentOptionsConverter;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void fromJson(java.lang.Iterable, io.vertx.core.DeploymentOptions)
{
byte v6;
io.vertx.core.json.JsonObject v19;
boolean v10, v11, v12, v13, v14, v15, v17, v21, v23, v25, v29, v3, v33, v37, v39, v41, v44, v8, v9;
long v31;
java.lang.Iterable v0;
int v27, v46, v7;
java.util.Iterator v2;
java.util.concurrent.TimeUnit v35;
io.vertx.core.DeploymentOptions v1;
java.lang.Object v16, v18, v20, v22, v24, v26, v28, v30, v32, v34, v36, v38, v4, v40, v42, v43, v45, v5;
v0 := @parameter0: java.lang.Iterable;
v1 := @parameter1: io.vertx.core.DeploymentOptions;
v2 = interfaceinvoke v0.<java.lang.Iterable: java.util.Iterator iterator()>();
label01:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label19;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getKey()>();
v6 = -1;
v7 = virtualinvoke v5.<java.lang.String: int hashCode()>();
lookupswitch(v7)
{
case -1564446107: goto label08;
case -1564289061: goto label09;
case -1354792126: goto label02;
case -782085250: goto label07;
case 3321: goto label03;
case 29097598: goto label04;
case 605054080: goto label05;
case 611480100: goto label06;
default: goto label10;
};
label02:
v8 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("config");
if v8 == 0 goto label10;
v6 = 0;
goto label10;
label03:
v9 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("ha");
if v9 == 0 goto label10;
v6 = 1;
goto label10;
label04:
v10 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("instances");
if v10 == 0 goto label10;
v6 = 2;
goto label10;
label05:
v11 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("maxWorkerExecuteTime");
if v11 == 0 goto label10;
v6 = 3;
goto label10;
label06:
v12 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("maxWorkerExecuteTimeUnit");
if v12 == 0 goto label10;
v6 = 4;
goto label10;
label07:
v13 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("worker");
if v13 == 0 goto label10;
v6 = 5;
goto label10;
label08:
v14 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("workerPoolName");
if v14 == 0 goto label10;
v6 = 6;
goto label10;
label09:
v15 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("workerPoolSize");
if v15 == 0 goto label10;
v6 = 7;
label10:
tableswitch(v6)
{
case 0: goto label11;
case 1: goto label12;
case 2: goto label13;
case 3: goto label14;
case 4: goto label15;
case 5: goto label16;
case 6: goto label17;
case 7: goto label18;
default: goto label01;
};
label11:
v16 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v17 = v16 instanceof io.vertx.core.json.JsonObject;
if v17 == 0 goto label01;
v18 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v19 = virtualinvoke v18.<io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()>();
virtualinvoke v1.<io.vertx.core.DeploymentOptions: io.vertx.core.DeploymentOptions setConfig(io.vertx.core.json.JsonObject)>(v19);
goto label01;
label12:
v20 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v21 = v20 instanceof java.lang.Boolean;
if v21 == 0 goto label01;
v22 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v23 = virtualinvoke v22.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.DeploymentOptions: io.vertx.core.DeploymentOptions setHa(boolean)>(v23);
goto label01;
label13:
v24 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v25 = v24 instanceof java.lang.Number;
if v25 == 0 goto label01;
v26 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v27 = virtualinvoke v26.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.DeploymentOptions: io.vertx.core.DeploymentOptions setInstances(int)>(v27);
goto label01;
label14:
v28 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v29 = v28 instanceof java.lang.Number;
if v29 == 0 goto label01;
v30 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v31 = virtualinvoke v30.<java.lang.Number: long longValue()>();
virtualinvoke v1.<io.vertx.core.DeploymentOptions: io.vertx.core.DeploymentOptions setMaxWorkerExecuteTime(long)>(v31);
goto label01;
label15:
v32 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v33 = v32 instanceof java.lang.String;
if v33 == 0 goto label01;
v34 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v35 = staticinvoke <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit valueOf(java.lang.String)>(v34);
virtualinvoke v1.<io.vertx.core.DeploymentOptions: io.vertx.core.DeploymentOptions setMaxWorkerExecuteTimeUnit(java.util.concurrent.TimeUnit)>(v35);
goto label01;
label16:
v36 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v37 = v36 instanceof java.lang.Boolean;
if v37 == 0 goto label01;
v38 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v39 = virtualinvoke v38.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.DeploymentOptions: io.vertx.core.DeploymentOptions setWorker(boolean)>(v39);
goto label01;
label17:
v40 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v41 = v40 instanceof java.lang.String;
if v41 == 0 goto label01;
v42 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
virtualinvoke v1.<io.vertx.core.DeploymentOptions: io.vertx.core.DeploymentOptions setWorkerPoolName(java.lang.String)>(v42);
goto label01;
label18:
v43 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v44 = v43 instanceof java.lang.Number;
if v44 == 0 goto label01;
v45 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v46 = virtualinvoke v45.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.DeploymentOptions: io.vertx.core.DeploymentOptions setWorkerPoolSize(int)>(v46);
goto label01;
label19:
return;
}
static void toJson(io.vertx.core.DeploymentOptions, io.vertx.core.json.JsonObject)
{
io.vertx.core.json.JsonObject v1;
io.vertx.core.DeploymentOptions v0;
java.util.Map v2;
v0 := @parameter0: io.vertx.core.DeploymentOptions;
v1 := @parameter1: io.vertx.core.json.JsonObject;
v2 = virtualinvoke v1.<io.vertx.core.json.JsonObject: java.util.Map getMap()>();
staticinvoke <io.vertx.core.DeploymentOptionsConverter: void toJson(io.vertx.core.DeploymentOptions,java.util.Map)>(v0, v2);
return;
}
static void toJson(io.vertx.core.DeploymentOptions, java.util.Map)
{
long v8;
java.lang.Integer v18, v7;
java.lang.Long v9;
java.util.Map v1;
int v17, v6;
java.lang.Boolean v14, v5;
io.vertx.core.json.JsonObject v2, v3;
java.lang.String v12, v15, v16;
boolean v13, v4;
java.util.concurrent.TimeUnit v10, v11;
io.vertx.core.DeploymentOptions v0;
v0 := @parameter0: io.vertx.core.DeploymentOptions;
v1 := @parameter1: java.util.Map;
v2 = virtualinvoke v0.<io.vertx.core.DeploymentOptions: io.vertx.core.json.JsonObject getConfig()>();
if v2 == null goto label1;
v3 = virtualinvoke v0.<io.vertx.core.DeploymentOptions: io.vertx.core.json.JsonObject getConfig()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("config", v3);
label1:
v4 = virtualinvoke v0.<io.vertx.core.DeploymentOptions: boolean isHa()>();
v5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v4);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ha", v5);
v6 = virtualinvoke v0.<io.vertx.core.DeploymentOptions: int getInstances()>();
v7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v6);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("instances", v7);
v8 = virtualinvoke v0.<io.vertx.core.DeploymentOptions: long getMaxWorkerExecuteTime()>();
v9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v8);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxWorkerExecuteTime", v9);
v10 = virtualinvoke v0.<io.vertx.core.DeploymentOptions: java.util.concurrent.TimeUnit getMaxWorkerExecuteTimeUnit()>();
if v10 == null goto label2;
v11 = virtualinvoke v0.<io.vertx.core.DeploymentOptions: java.util.concurrent.TimeUnit getMaxWorkerExecuteTimeUnit()>();
v12 = virtualinvoke v11.<java.util.concurrent.TimeUnit: java.lang.String name()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxWorkerExecuteTimeUnit", v12);
label2:
v13 = virtualinvoke v0.<io.vertx.core.DeploymentOptions: boolean isWorker()>();
v14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v13);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("worker", v14);
v15 = virtualinvoke v0.<io.vertx.core.DeploymentOptions: java.lang.String getWorkerPoolName()>();
if v15 == null goto label3;
v16 = virtualinvoke v0.<io.vertx.core.DeploymentOptions: java.lang.String getWorkerPoolName()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("workerPoolName", v16);
label3:
v17 = virtualinvoke v0.<io.vertx.core.DeploymentOptions: int getWorkerPoolSize()>();
v18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v17);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("workerPoolSize", v18);
return;
}
static void <clinit>()
{
java.util.Base64$Encoder v1;
java.util.Base64$Decoder v0;
v0 = <io.vertx.core.json.impl.JsonUtil: java.util.Base64$Decoder BASE64_DECODER>;
<io.vertx.core.DeploymentOptionsConverter: java.util.Base64$Decoder BASE64_DECODER> = v0;
v1 = <io.vertx.core.json.impl.JsonUtil: java.util.Base64$Encoder BASE64_ENCODER>;
<io.vertx.core.DeploymentOptionsConverter: java.util.Base64$Encoder BASE64_ENCODER> = v1;
return;
}
}