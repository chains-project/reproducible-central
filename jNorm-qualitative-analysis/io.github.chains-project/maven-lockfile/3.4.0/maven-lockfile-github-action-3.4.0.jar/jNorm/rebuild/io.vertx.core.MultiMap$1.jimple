class io.vertx.core.MultiMap$1 extends java.lang.Object implements java.util.function.Consumer
{
final java.util.function.BiConsumer val$action;
final io.vertx.core.MultiMap this$0;
void <init>(io.vertx.core.MultiMap, java.util.function.BiConsumer)
{
io.vertx.core.MultiMap v1;
java.util.function.BiConsumer v2;
io.vertx.core.MultiMap$1 v0;
v0 := @this: io.vertx.core.MultiMap$1;
v1 := @parameter0: io.vertx.core.MultiMap;
v2 := @parameter1: java.util.function.BiConsumer;
v0.<io.vertx.core.MultiMap$1: io.vertx.core.MultiMap this$0> = v1;
v0.<io.vertx.core.MultiMap$1: java.util.function.BiConsumer val$action> = v2;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void accept(java.util.Map$Entry)
{
java.util.Map$Entry v1;
java.util.function.BiConsumer v2;
io.vertx.core.MultiMap$1 v0;
java.lang.Object v3, v4;
v0 := @this: io.vertx.core.MultiMap$1;
v1 := @parameter0: java.util.Map$Entry;
v2 = v0.<io.vertx.core.MultiMap$1: java.util.function.BiConsumer val$action>;
v3 = interfaceinvoke v1.<java.util.Map$Entry: java.lang.Object getKey()>();
v4 = interfaceinvoke v1.<java.util.Map$Entry: java.lang.Object getValue()>();
interfaceinvoke v2.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>(v3, v4);
return;
}
}