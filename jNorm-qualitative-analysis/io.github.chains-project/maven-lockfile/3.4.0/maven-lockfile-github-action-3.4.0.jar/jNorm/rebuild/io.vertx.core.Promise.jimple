public interface  io.vertx.core.Promise extends java.lang.Object implements io.vertx.core.Handler
{
public static io.vertx.core.Promise promise()
{
io.vertx.core.impl.future.PromiseImpl v0;
v0 = new io.vertx.core.impl.future.PromiseImpl;
specialinvoke v0.<io.vertx.core.impl.future.PromiseImpl: void <init>()>();
return v0;
}
public void handle(io.vertx.core.AsyncResult)
{
java.lang.Throwable v4;
io.vertx.core.Promise v0;
java.lang.Object v3;
io.vertx.core.AsyncResult v1;
boolean v2;
v0 := @this: io.vertx.core.Promise;
v1 := @parameter0: io.vertx.core.AsyncResult;
v2 = interfaceinvoke v1.<io.vertx.core.AsyncResult: boolean succeeded()>();
if v2 == 0 goto label1;
v3 = interfaceinvoke v1.<io.vertx.core.AsyncResult: java.lang.Object result()>();
interfaceinvoke v0.<io.vertx.core.Promise: void complete(java.lang.Object)>(v3);
goto label2;
label1:
v4 = interfaceinvoke v1.<io.vertx.core.AsyncResult: java.lang.Throwable cause()>();
interfaceinvoke v0.<io.vertx.core.Promise: void fail(java.lang.Throwable)>(v4);
label2:
return;
}
public void complete(java.lang.Object)
{
java.lang.IllegalStateException v3;
io.vertx.core.Promise v0;
java.lang.Object v1;
boolean v2;
v0 := @this: io.vertx.core.Promise;
v1 := @parameter0: java.lang.Object;
v2 = interfaceinvoke v0.<io.vertx.core.Promise: boolean tryComplete(java.lang.Object)>(v1);
if v2 != 0 goto label1;
v3 = new java.lang.IllegalStateException;
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Result is already complete");
throw v3;
label1:
return;
}
public void complete()
{
java.lang.IllegalStateException v2;
boolean v1;
io.vertx.core.Promise v0;
v0 := @this: io.vertx.core.Promise;
v1 = interfaceinvoke v0.<io.vertx.core.Promise: boolean tryComplete()>();
if v1 != 0 goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Result is already complete");
throw v2;
label1:
return;
}
public void fail(java.lang.Throwable)
{
java.lang.Throwable v1;
java.lang.IllegalStateException v3;
io.vertx.core.Promise v0;
boolean v2;
v0 := @this: io.vertx.core.Promise;
v1 := @parameter0: java.lang.Throwable;
v2 = interfaceinvoke v0.<io.vertx.core.Promise: boolean tryFail(java.lang.Throwable)>(v1);
if v2 != 0 goto label1;
v3 = new java.lang.IllegalStateException;
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Result is already complete");
throw v3;
label1:
return;
}
public void fail(java.lang.String)
{
java.lang.IllegalStateException v3;
io.vertx.core.Promise v0;
java.lang.String v1;
boolean v2;
v0 := @this: io.vertx.core.Promise;
v1 := @parameter0: java.lang.String;
v2 = interfaceinvoke v0.<io.vertx.core.Promise: boolean tryFail(java.lang.String)>(v1);
if v2 != 0 goto label1;
v3 = new java.lang.IllegalStateException;
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Result is already complete");
throw v3;
label1:
return;
}
public abstract boolean tryComplete(java.lang.Object);
public boolean tryComplete()
{
boolean v1;
io.vertx.core.Promise v0;
v0 := @this: io.vertx.core.Promise;
v1 = interfaceinvoke v0.<io.vertx.core.Promise: boolean tryComplete(java.lang.Object)>(null);
return v1;
}
public abstract boolean tryFail(java.lang.Throwable);
public boolean tryFail(java.lang.String)
{
io.vertx.core.impl.NoStackTraceThrowable v2;
io.vertx.core.Promise v0;
java.lang.String v1;
boolean v3;
v0 := @this: io.vertx.core.Promise;
v1 := @parameter0: java.lang.String;
v2 = new io.vertx.core.impl.NoStackTraceThrowable;
specialinvoke v2.<io.vertx.core.impl.NoStackTraceThrowable: void <init>(java.lang.String)>(v1);
v3 = interfaceinvoke v0.<io.vertx.core.Promise: boolean tryFail(java.lang.Throwable)>(v2);
return v3;
}
public abstract io.vertx.core.Future future();
}