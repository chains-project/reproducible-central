public class io.vertx.core.cli.InvalidValueException extends io.vertx.core.cli.CLIException
{
private final io.vertx.core.cli.Option option;
private final io.vertx.core.cli.Argument argument;
private final java.lang.String value;
public void <init>(io.vertx.core.cli.Option, java.lang.String)
{
io.vertx.core.cli.Option v1;
java.lang.String v2;
io.vertx.core.cli.InvalidValueException v0;
v0 := @this: io.vertx.core.cli.InvalidValueException;
v1 := @parameter0: io.vertx.core.cli.Option;
v2 := @parameter1: java.lang.String;
specialinvoke v0.<io.vertx.core.cli.InvalidValueException: void <init>(io.vertx.core.cli.Option,java.lang.String,java.lang.Exception)>(v1, v2, null);
return;
}
public void <init>(io.vertx.core.cli.Argument, java.lang.String, java.lang.Exception)
{
io.vertx.core.cli.InvalidValueException v0;
io.vertx.core.cli.Argument v1;
java.lang.Exception v3;
java.io.Serializable v5;
int v6;
java.lang.String v2, v4, v7;
v0 := @this: io.vertx.core.cli.InvalidValueException;
v1 := @parameter0: io.vertx.core.cli.Argument;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.Exception;
v4 = virtualinvoke v1.<io.vertx.core.cli.Argument: java.lang.String getArgName()>();
if v4 == null goto label1;
v5 = virtualinvoke v1.<io.vertx.core.cli.Argument: java.lang.String getArgName()>();
goto label2;
label1:
v6 = virtualinvoke v1.<io.vertx.core.cli.Argument: int getIndex()>();
v5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v6);
label2:
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.io.Serializable)>(v2, v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("The value \'\u0001\' is not accepted by the argument \'\u0001\'");
specialinvoke v0.<io.vertx.core.cli.CLIException: void <init>(java.lang.String,java.lang.Exception)>(v7, v3);
v0.<io.vertx.core.cli.InvalidValueException: io.vertx.core.cli.Option option> = null;
v0.<io.vertx.core.cli.InvalidValueException: java.lang.String value> = v2;
v0.<io.vertx.core.cli.InvalidValueException: io.vertx.core.cli.Argument argument> = v1;
return;
}
public void <init>(io.vertx.core.cli.Option, java.lang.String, java.lang.Exception)
{
io.vertx.core.cli.Option v1;
io.vertx.core.cli.InvalidValueException v0;
java.lang.String v2, v4, v5;
java.lang.Exception v3;
v0 := @this: io.vertx.core.cli.InvalidValueException;
v1 := @parameter0: io.vertx.core.cli.Option;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.Exception;
v4 = virtualinvoke v1.<io.vertx.core.cli.Option: java.lang.String getName()>();
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v2, v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("The value \'\u0001\' is not accepted by \'\u0001\'");
specialinvoke v0.<io.vertx.core.cli.CLIException: void <init>(java.lang.String,java.lang.Exception)>(v5, v3);
v0.<io.vertx.core.cli.InvalidValueException: io.vertx.core.cli.Argument argument> = null;
v0.<io.vertx.core.cli.InvalidValueException: java.lang.String value> = v2;
v0.<io.vertx.core.cli.InvalidValueException: io.vertx.core.cli.Option option> = v1;
return;
}
public io.vertx.core.cli.Option getOption()
{
io.vertx.core.cli.Option v1;
io.vertx.core.cli.InvalidValueException v0;
v0 := @this: io.vertx.core.cli.InvalidValueException;
v1 = v0.<io.vertx.core.cli.InvalidValueException: io.vertx.core.cli.Option option>;
return v1;
}
public java.lang.String getValue()
{
java.lang.String v1;
io.vertx.core.cli.InvalidValueException v0;
v0 := @this: io.vertx.core.cli.InvalidValueException;
v1 = v0.<io.vertx.core.cli.InvalidValueException: java.lang.String value>;
return v1;
}
public io.vertx.core.cli.Argument getArgument()
{
io.vertx.core.cli.Argument v1;
io.vertx.core.cli.InvalidValueException v0;
v0 := @this: io.vertx.core.cli.InvalidValueException;
v1 = v0.<io.vertx.core.cli.InvalidValueException: io.vertx.core.cli.Argument argument>;
return v1;
}
}