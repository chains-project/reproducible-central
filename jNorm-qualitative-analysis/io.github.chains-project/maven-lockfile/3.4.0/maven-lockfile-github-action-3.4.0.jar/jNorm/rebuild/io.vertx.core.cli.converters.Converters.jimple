public class io.vertx.core.cli.converters.Converters extends java.lang.Object
{
private static final java.util.Map PRIMITIVE_TO_WRAPPER_TYPE;
private static final java.util.Map WELL_KNOWN_CONVERTERS;
public void <init>()
{
io.vertx.core.cli.converters.Converters v0;
v0 := @this: io.vertx.core.cli.converters.Converters;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.lang.Object create(java.lang.Class, java.lang.String)
{
java.lang.Class v0;
java.lang.Object v4;
io.vertx.core.cli.converters.Converter v3;
java.lang.String v1;
boolean v2;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.String;
v2 = virtualinvoke v0.<java.lang.Class: boolean isPrimitive()>();
if v2 == 0 goto label1;
v0 = staticinvoke <io.vertx.core.cli.converters.Converters: java.lang.Class wrap(java.lang.Class)>(v0);
label1:
v3 = staticinvoke <io.vertx.core.cli.converters.Converters: io.vertx.core.cli.converters.Converter getConverter(java.lang.Class)>(v0);
v4 = interfaceinvoke v3.<io.vertx.core.cli.converters.Converter: java.lang.Object fromString(java.lang.String)>(v1);
return v4;
}
public static java.lang.Object create(java.lang.String, io.vertx.core.cli.converters.Converter)
{
java.lang.Object v2;
io.vertx.core.cli.converters.Converter v1;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: io.vertx.core.cli.converters.Converter;
v2 = interfaceinvoke v1.<io.vertx.core.cli.converters.Converter: java.lang.Object fromString(java.lang.String)>(v0);
return v2;
}
private static java.lang.Class wrap(java.lang.Class)
{
java.util.Map v1;
java.lang.Class v0, v3;
java.lang.Object v2;
v0 := @parameter0: java.lang.Class;
v1 = <io.vertx.core.cli.converters.Converters: java.util.Map PRIMITIVE_TO_WRAPPER_TYPE>;
v2 = interfaceinvoke v1.<java.util.Map: java.lang.Object get(java.lang.Object)>(v0);
if v2 != null goto label1;
v3 = v0;
goto label2;
label1:
v3 = v2;
label2:
return v3;
}
private static io.vertx.core.cli.converters.Converter getConverter(java.lang.Class)
{
io.vertx.core.cli.converters.FromBasedConverter v7;
io.vertx.core.cli.converters.FromStringBasedConverter v8;
io.vertx.core.cli.converters.ValueOfBasedConverter v6;
io.vertx.core.cli.converters.ConstructorBasedConverter v5;
java.util.Map v1, v3;
java.lang.Class v0;
java.lang.Object v4;
java.lang.String v10, v11;
java.util.NoSuchElementException v9;
boolean v2;
v0 := @parameter0: java.lang.Class;
v1 = <io.vertx.core.cli.converters.Converters: java.util.Map WELL_KNOWN_CONVERTERS>;
v2 = interfaceinvoke v1.<java.util.Map: boolean containsKey(java.lang.Object)>(v0);
if v2 == 0 goto label1;
v3 = <io.vertx.core.cli.converters.Converters: java.util.Map WELL_KNOWN_CONVERTERS>;
v4 = interfaceinvoke v3.<java.util.Map: java.lang.Object get(java.lang.Object)>(v0);
return v4;
label1:
v5 = staticinvoke <io.vertx.core.cli.converters.ConstructorBasedConverter: io.vertx.core.cli.converters.ConstructorBasedConverter getIfEligible(java.lang.Class)>(v0);
if v5 == null goto label2;
return v5;
label2:
v6 = staticinvoke <io.vertx.core.cli.converters.ValueOfBasedConverter: io.vertx.core.cli.converters.ValueOfBasedConverter getIfEligible(java.lang.Class)>(v0);
if v6 == null goto label3;
return v6;
label3:
v7 = staticinvoke <io.vertx.core.cli.converters.FromBasedConverter: io.vertx.core.cli.converters.FromBasedConverter getIfEligible(java.lang.Class)>(v0);
if v7 == null goto label4;
return v7;
label4:
v8 = staticinvoke <io.vertx.core.cli.converters.FromStringBasedConverter: io.vertx.core.cli.converters.FromStringBasedConverter getIfEligible(java.lang.Class)>(v0);
if v8 == null goto label5;
return v8;
label5:
v9 = new java.util.NoSuchElementException;
v10 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v10) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot find a converter able to create instance of \u0001");
specialinvoke v9.<java.util.NoSuchElementException: void <init>(java.lang.String)>(v11);
throw v9;
}
public static io.vertx.core.cli.converters.Converter newInstance(java.lang.Class) throws java.lang.IllegalArgumentException
{
java.lang.Object[] v3;
java.lang.Class[] v1;
java.lang.ReflectiveOperationException v5;
java.lang.IllegalArgumentException v6;
java.lang.reflect.Constructor v2;
java.lang.Class v0;
java.lang.Object v4;
java.lang.String v7, v8;
v0 := @parameter0: java.lang.Class;
label1:
v1 = newarray (java.lang.Class)[0];
v2 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(v1);
v3 = newarray (java.lang.Object)[0];
v4 = virtualinvoke v2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(v3);
label2:
return v4;
label3:
v5 := @caughtexception;
v6 = new java.lang.IllegalArgumentException;
v7 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot create a new instance of \u0001 - it requires an public constructor without argument");
specialinvoke v6.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>(v8, v5);
throw v6;
catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
catch java.lang.NoSuchMethodException from label1 to label2 with label3;
catch java.lang.InstantiationException from label1 to label2 with label3;
catch java.lang.IllegalAccessException from label1 to label2 with label3;
}
static void <clinit>()
{
java.util.HashMap v0, v11;
io.vertx.core.cli.converters.BooleanConverter v12;
io.vertx.core.cli.converters.CharacterConverter v14;
java.util.Map v10, v21;
io.vertx.core.cli.converters.Converter v13, v15, v16, v17, v18, v19, v20;
java.lang.Class v1, v2, v3, v4, v5, v6, v7, v8, v9;
v0 = new java.util.HashMap;
specialinvoke v0.<java.util.HashMap: void <init>(int)>(16);
v1 = <java.lang.Boolean: java.lang.Class TYPE>;
interfaceinvoke v0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, class "Ljava/lang/Boolean;");
v2 = <java.lang.Byte: java.lang.Class TYPE>;
interfaceinvoke v0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v2, class "Ljava/lang/Byte;");
v3 = <java.lang.Character: java.lang.Class TYPE>;
interfaceinvoke v0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v3, class "Ljava/lang/Character;");
v4 = <java.lang.Double: java.lang.Class TYPE>;
interfaceinvoke v0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v4, class "Ljava/lang/Double;");
v5 = <java.lang.Float: java.lang.Class TYPE>;
interfaceinvoke v0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v5, class "Ljava/lang/Float;");
v6 = <java.lang.Integer: java.lang.Class TYPE>;
interfaceinvoke v0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v6, class "Ljava/lang/Integer;");
v7 = <java.lang.Long: java.lang.Class TYPE>;
interfaceinvoke v0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v7, class "Ljava/lang/Long;");
v8 = <java.lang.Short: java.lang.Class TYPE>;
interfaceinvoke v0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v8, class "Ljava/lang/Short;");
v9 = <java.lang.Void: java.lang.Class TYPE>;
interfaceinvoke v0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v9, class "Ljava/lang/Void;");
v10 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(v0);
<io.vertx.core.cli.converters.Converters: java.util.Map PRIMITIVE_TO_WRAPPER_TYPE> = v10;
v11 = new java.util.HashMap;
specialinvoke v11.<java.util.HashMap: void <init>(int)>(16);
v12 = <io.vertx.core.cli.converters.BooleanConverter: io.vertx.core.cli.converters.BooleanConverter INSTANCE>;
interfaceinvoke v11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Boolean;", v12);
v13 = staticinvoke <io.vertx.core.cli.converters.Converters$parseByte__1216: io.vertx.core.cli.converters.Converter bootstrap$()>();
interfaceinvoke v11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Byte;", v13);
v14 = <io.vertx.core.cli.converters.CharacterConverter: io.vertx.core.cli.converters.CharacterConverter INSTANCE>;
interfaceinvoke v11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Character;", v14);
v15 = staticinvoke <io.vertx.core.cli.converters.Converters$parseDouble__1217: io.vertx.core.cli.converters.Converter bootstrap$()>();
interfaceinvoke v11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Double;", v15);
v16 = staticinvoke <io.vertx.core.cli.converters.Converters$parseFloat__1218: io.vertx.core.cli.converters.Converter bootstrap$()>();
interfaceinvoke v11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Float;", v16);
v17 = staticinvoke <io.vertx.core.cli.converters.Converters$parseInt__1219: io.vertx.core.cli.converters.Converter bootstrap$()>();
interfaceinvoke v11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Integer;", v17);
v18 = staticinvoke <io.vertx.core.cli.converters.Converters$parseLong__1220: io.vertx.core.cli.converters.Converter bootstrap$()>();
interfaceinvoke v11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Long;", v18);
v19 = staticinvoke <io.vertx.core.cli.converters.Converters$parseShort__1221: io.vertx.core.cli.converters.Converter bootstrap$()>();
interfaceinvoke v11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Short;", v19);
v20 = staticinvoke <io.vertx.core.cli.converters.Converters$lambda_static_0__1222: io.vertx.core.cli.converters.Converter bootstrap$()>();
interfaceinvoke v11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/String;", v20);
v21 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(v11);
<io.vertx.core.cli.converters.Converters: java.util.Map WELL_KNOWN_CONVERTERS> = v21;
return;
}
}