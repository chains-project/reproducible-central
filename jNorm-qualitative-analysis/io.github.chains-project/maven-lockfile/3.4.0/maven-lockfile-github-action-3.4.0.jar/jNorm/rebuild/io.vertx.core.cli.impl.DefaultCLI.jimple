public class io.vertx.core.cli.impl.DefaultCLI extends java.lang.Object implements io.vertx.core.cli.CLI
{
protected java.lang.String name;
protected int priority;
protected java.lang.String description;
protected java.lang.String summary;
protected boolean hidden;
protected java.util.List options;
private java.util.List arguments;
public void <init>()
{
io.vertx.core.cli.impl.DefaultCLI v0;
java.util.ArrayList v1, v2;
v0 := @this: io.vertx.core.cli.impl.DefaultCLI;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v0.<io.vertx.core.cli.impl.DefaultCLI: java.util.List options> = v1;
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
v0.<io.vertx.core.cli.impl.DefaultCLI: java.util.List arguments> = v2;
return;
}
public io.vertx.core.cli.CommandLine parse(java.util.List)
{
io.vertx.core.cli.impl.DefaultParser v2;
java.util.List v1;
io.vertx.core.cli.CommandLine v3;
io.vertx.core.cli.impl.DefaultCLI v0;
v0 := @this: io.vertx.core.cli.impl.DefaultCLI;
v1 := @parameter0: java.util.List;
v2 = new io.vertx.core.cli.impl.DefaultParser;
specialinvoke v2.<io.vertx.core.cli.impl.DefaultParser: void <init>()>();
v3 = virtualinvoke v2.<io.vertx.core.cli.impl.DefaultParser: io.vertx.core.cli.CommandLine parse(io.vertx.core.cli.CLI,java.util.List)>(v0, v1);
return v3;
}
public io.vertx.core.cli.CommandLine parse(java.util.List, boolean)
{
io.vertx.core.cli.impl.DefaultParser v3;
java.util.List v1;
io.vertx.core.cli.CommandLine v4;
io.vertx.core.cli.impl.DefaultCLI v0;
boolean v2;
v0 := @this: io.vertx.core.cli.impl.DefaultCLI;
v1 := @parameter0: java.util.List;
v2 := @parameter1: boolean;
v3 = new io.vertx.core.cli.impl.DefaultParser;
specialinvoke v3.<io.vertx.core.cli.impl.DefaultParser: void <init>()>();
v4 = virtualinvoke v3.<io.vertx.core.cli.impl.DefaultParser: io.vertx.core.cli.CommandLine parse(io.vertx.core.cli.CLI,java.util.List,boolean)>(v0, v1, v2);
return v4;
}
public java.lang.String getName()
{
io.vertx.core.cli.impl.DefaultCLI v0;
java.lang.String v1;
v0 := @this: io.vertx.core.cli.impl.DefaultCLI;
v1 = v0.<io.vertx.core.cli.impl.DefaultCLI: java.lang.String name>;
return v1;
}
public io.vertx.core.cli.CLI setName(java.lang.String)
{
io.vertx.core.cli.impl.DefaultCLI v0;
java.lang.String v1;
java.lang.IllegalArgumentException v3;
boolean v2;
v0 := @this: io.vertx.core.cli.impl.DefaultCLI;
v1 := @parameter0: java.lang.String;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = virtualinvoke v1.<java.lang.String: boolean isEmpty()>();
if v2 == 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid command name");
throw v3;
label1:
v0.<io.vertx.core.cli.impl.DefaultCLI: java.lang.String name> = v1;
return v0;
}
public java.lang.String getDescription()
{
io.vertx.core.cli.impl.DefaultCLI v0;
java.lang.String v1;
v0 := @this: io.vertx.core.cli.impl.DefaultCLI;
v1 = v0.<io.vertx.core.cli.impl.DefaultCLI: java.lang.String description>;
return v1;
}
public io.vertx.core.cli.CLI setDescription(java.lang.String)
{
io.vertx.core.cli.impl.DefaultCLI v0;
java.lang.String v1;
v0 := @this: io.vertx.core.cli.impl.DefaultCLI;
v1 := @parameter0: java.lang.String;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v0.<io.vertx.core.cli.impl.DefaultCLI: java.lang.String description> = v1;
return v0;
}
public java.lang.String getSummary()
{
io.vertx.core.cli.impl.DefaultCLI v0;
java.lang.String v1;
v0 := @this: io.vertx.core.cli.impl.DefaultCLI;
v1 = v0.<io.vertx.core.cli.impl.DefaultCLI: java.lang.String summary>;
return v1;
}
public io.vertx.core.cli.CLI setSummary(java.lang.String)
{
io.vertx.core.cli.impl.DefaultCLI v0;
java.lang.String v1;
v0 := @this: io.vertx.core.cli.impl.DefaultCLI;
v1 := @parameter0: java.lang.String;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v0.<io.vertx.core.cli.impl.DefaultCLI: java.lang.String summary> = v1;
return v0;
}
public boolean isHidden()
{
io.vertx.core.cli.impl.DefaultCLI v0;
boolean v1;
v0 := @this: io.vertx.core.cli.impl.DefaultCLI;
v1 = v0.<io.vertx.core.cli.impl.DefaultCLI: boolean hidden>;
return v1;
}
public io.vertx.core.cli.CLI setHidden(boolean)
{
io.vertx.core.cli.impl.DefaultCLI v0;
boolean v1;
v0 := @this: io.vertx.core.cli.impl.DefaultCLI;
v1 := @parameter0: boolean;
v0.<io.vertx.core.cli.impl.DefaultCLI: boolean hidden> = v1;
return v0;
}
public java.util.List getOptions()
{
java.util.List v1;
io.vertx.core.cli.impl.DefaultCLI v0;
v0 := @this: io.vertx.core.cli.impl.DefaultCLI;
v1 = v0.<io.vertx.core.cli.impl.DefaultCLI: java.util.List options>;
return v1;
}
public io.vertx.core.cli.CLI addOption(io.vertx.core.cli.Option)
{
io.vertx.core.cli.Option v1;
java.util.List v2;
io.vertx.core.cli.impl.DefaultCLI v0;
v0 := @this: io.vertx.core.cli.impl.DefaultCLI;
v1 := @parameter0: io.vertx.core.cli.Option;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = v0.<io.vertx.core.cli.impl.DefaultCLI: java.util.List options>;
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v1);
return v0;
}
public io.vertx.core.cli.CLI addOptions(java.util.List)
{
java.util.function.Consumer v2;
java.util.List v1;
io.vertx.core.cli.impl.DefaultCLI v0;
v0 := @this: io.vertx.core.cli.impl.DefaultCLI;
v1 := @parameter0: java.util.List;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = staticinvoke <io.vertx.core.cli.impl.DefaultCLI$addOption__1229: java.util.function.Consumer bootstrap$(io.vertx.core.cli.impl.DefaultCLI)>(v0);
interfaceinvoke v1.<java.util.List: void forEach(java.util.function.Consumer)>(v2);
return v0;
}
public io.vertx.core.cli.CLI setOptions(java.util.List)
{
java.util.List v1;
io.vertx.core.cli.impl.DefaultCLI v0;
io.vertx.core.cli.CLI v3;
java.util.ArrayList v2;
v0 := @this: io.vertx.core.cli.impl.DefaultCLI;
v1 := @parameter0: java.util.List;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
v0.<io.vertx.core.cli.impl.DefaultCLI: java.util.List options> = v2;
v3 = virtualinvoke v0.<io.vertx.core.cli.impl.DefaultCLI: io.vertx.core.cli.CLI addOptions(java.util.List)>(v1);
return v3;
}
public java.util.List getArguments()
{
java.util.List v1;
io.vertx.core.cli.impl.DefaultCLI v0;
v0 := @this: io.vertx.core.cli.impl.DefaultCLI;
v1 = v0.<io.vertx.core.cli.impl.DefaultCLI: java.util.List arguments>;
return v1;
}
public io.vertx.core.cli.CLI addArgument(io.vertx.core.cli.Argument)
{
java.util.List v2;
io.vertx.core.cli.impl.DefaultCLI v0;
io.vertx.core.cli.Argument v1;
v0 := @this: io.vertx.core.cli.impl.DefaultCLI;
v1 := @parameter0: io.vertx.core.cli.Argument;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = v0.<io.vertx.core.cli.impl.DefaultCLI: java.util.List arguments>;
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v1);
return v0;
}
public io.vertx.core.cli.CLI addArguments(java.util.List)
{
java.util.function.Consumer v2;
java.util.List v1;
io.vertx.core.cli.impl.DefaultCLI v0;
v0 := @this: io.vertx.core.cli.impl.DefaultCLI;
v1 := @parameter0: java.util.List;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = staticinvoke <io.vertx.core.cli.impl.DefaultCLI$addArgument__1230: java.util.function.Consumer bootstrap$(io.vertx.core.cli.impl.DefaultCLI)>(v0);
interfaceinvoke v1.<java.util.List: void forEach(java.util.function.Consumer)>(v2);
return v0;
}
public io.vertx.core.cli.CLI setArguments(java.util.List)
{
java.util.List v1;
io.vertx.core.cli.impl.DefaultCLI v0;
java.util.ArrayList v2;
v0 := @this: io.vertx.core.cli.impl.DefaultCLI;
v1 := @parameter0: java.util.List;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>(java.util.Collection)>(v1);
v0.<io.vertx.core.cli.impl.DefaultCLI: java.util.List arguments> = v2;
return v0;
}
public io.vertx.core.cli.Option getOption(java.lang.String)
{
java.util.function.Predicate[] v2;
java.lang.String v1;
boolean v11, v15, v17;
java.util.Iterator v10, v14;
java.util.function.Predicate v3, v4, v5, v6, v7, v8;
java.util.List v13, v9;
io.vertx.core.cli.impl.DefaultCLI v0;
java.lang.Object v12, v16;
v0 := @this: io.vertx.core.cli.impl.DefaultCLI;
v1 := @parameter0: java.lang.String;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = newarray (java.util.function.Predicate)[6];
v3 = staticinvoke <io.vertx.core.cli.impl.DefaultCLI$lambda_getOption_0__1231: java.util.function.Predicate bootstrap$(java.lang.String)>(v1);
v2[0] = v3;
v4 = staticinvoke <io.vertx.core.cli.impl.DefaultCLI$lambda_getOption_1__1232: java.util.function.Predicate bootstrap$(java.lang.String)>(v1);
v2[1] = v4;
v5 = staticinvoke <io.vertx.core.cli.impl.DefaultCLI$lambda_getOption_2__1233: java.util.function.Predicate bootstrap$(java.lang.String)>(v1);
v2[2] = v5;
v6 = staticinvoke <io.vertx.core.cli.impl.DefaultCLI$lambda_getOption_3__1234: java.util.function.Predicate bootstrap$(java.lang.String)>(v1);
v2[3] = v6;
v7 = staticinvoke <io.vertx.core.cli.impl.DefaultCLI$lambda_getOption_4__1235: java.util.function.Predicate bootstrap$(java.lang.String)>(v1);
v2[4] = v7;
v8 = staticinvoke <io.vertx.core.cli.impl.DefaultCLI$lambda_getOption_5__1236: java.util.function.Predicate bootstrap$(java.lang.String)>(v1);
v2[5] = v8;
v9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v2);
v10 = interfaceinvoke v9.<java.util.List: java.util.Iterator iterator()>();
label1:
v11 = interfaceinvoke v10.<java.util.Iterator: boolean hasNext()>();
if v11 == 0 goto label3;
v12 = interfaceinvoke v10.<java.util.Iterator: java.lang.Object next()>();
v13 = v0.<io.vertx.core.cli.impl.DefaultCLI: java.util.List options>;
v14 = interfaceinvoke v13.<java.util.List: java.util.Iterator iterator()>();
label2:
v15 = interfaceinvoke v14.<java.util.Iterator: boolean hasNext()>();
if v15 == 0 goto label1;
v16 = interfaceinvoke v14.<java.util.Iterator: java.lang.Object next()>();
v17 = interfaceinvoke v12.<java.util.function.Predicate: boolean test(java.lang.Object)>(v16);
if v17 == 0 goto label2;
return v16;
label3:
return null;
}
public io.vertx.core.cli.Argument getArgument(java.lang.String)
{
java.util.Iterator v3;
java.util.List v2;
io.vertx.core.cli.impl.DefaultCLI v0;
java.lang.Object v5;
java.lang.String v1, v6;
boolean v4, v7;
v0 := @this: io.vertx.core.cli.impl.DefaultCLI;
v1 := @parameter0: java.lang.String;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = v0.<io.vertx.core.cli.impl.DefaultCLI: java.util.List arguments>;
v3 = interfaceinvoke v2.<java.util.List: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = virtualinvoke v5.<io.vertx.core.cli.Argument: java.lang.String getArgName()>();
v7 = virtualinvoke v1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v6);
if v7 == 0 goto label1;
return v5;
label2:
return null;
}
public io.vertx.core.cli.Argument getArgument(int)
{
java.util.Iterator v4;
java.lang.IllegalArgumentException v2;
java.util.List v3;
io.vertx.core.cli.impl.DefaultCLI v0;
int v1, v7;
java.lang.Object v6;
boolean v5;
v0 := @this: io.vertx.core.cli.impl.DefaultCLI;
v1 := @parameter0: int;
if v1 >= 0 goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Given index cannot be negative");
throw v2;
label1:
v3 = v0.<io.vertx.core.cli.impl.DefaultCLI: java.util.List arguments>;
v4 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
label2:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label3;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = virtualinvoke v6.<io.vertx.core.cli.Argument: int getIndex()>();
if v1 != v7 goto label2;
return v6;
label3:
return null;
}
public io.vertx.core.cli.CLI removeOption(java.lang.String)
{
java.util.function.Predicate v4;
java.util.List v2;
io.vertx.core.cli.impl.DefaultCLI v0;
java.util.stream.Stream v3, v5;
java.lang.Object v7;
java.lang.String v1;
java.util.stream.Collector v6;
v0 := @this: io.vertx.core.cli.impl.DefaultCLI;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.cli.impl.DefaultCLI: java.util.List options>;
v3 = interfaceinvoke v2.<java.util.List: java.util.stream.Stream stream()>();
v4 = staticinvoke <io.vertx.core.cli.impl.DefaultCLI$lambda_removeOption_6__1237: java.util.function.Predicate bootstrap$(java.lang.String)>(v1);
v5 = interfaceinvoke v3.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(v4);
v6 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();
v7 = interfaceinvoke v5.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v6);
v0.<io.vertx.core.cli.impl.DefaultCLI: java.util.List options> = v7;
return v0;
}
public io.vertx.core.cli.CLI removeArgument(int)
{
java.util.Iterator v4;
java.util.TreeSet v2;
java.util.List v3, v8;
io.vertx.core.cli.impl.DefaultCLI v0;
int v1, v7;
java.lang.Object v6;
boolean v5;
v0 := @this: io.vertx.core.cli.impl.DefaultCLI;
v1 := @parameter0: int;
v2 = new java.util.TreeSet;
v3 = v0.<io.vertx.core.cli.impl.DefaultCLI: java.util.List arguments>;
specialinvoke v2.<java.util.TreeSet: void <init>(java.util.Collection)>(v3);
v4 = virtualinvoke v2.<java.util.TreeSet: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = virtualinvoke v6.<io.vertx.core.cli.Argument: int getIndex()>();
if v7 != v1 goto label1;
v8 = v0.<io.vertx.core.cli.impl.DefaultCLI: java.util.List arguments>;
interfaceinvoke v8.<java.util.List: boolean remove(java.lang.Object)>(v6);
return v0;
label2:
return v0;
}
public io.vertx.core.cli.CLI usage(java.lang.StringBuilder)
{
io.vertx.core.cli.UsageMessageFormatter v2;
java.lang.StringBuilder v1;
io.vertx.core.cli.impl.DefaultCLI v0;
v0 := @this: io.vertx.core.cli.impl.DefaultCLI;
v1 := @parameter0: java.lang.StringBuilder;
v2 = new io.vertx.core.cli.UsageMessageFormatter;
specialinvoke v2.<io.vertx.core.cli.UsageMessageFormatter: void <init>()>();
virtualinvoke v2.<io.vertx.core.cli.UsageMessageFormatter: void usage(java.lang.StringBuilder,io.vertx.core.cli.CLI)>(v1, v0);
return v0;
}
public io.vertx.core.cli.CLI usage(java.lang.StringBuilder, java.lang.String)
{
io.vertx.core.cli.UsageMessageFormatter v3;
io.vertx.core.cli.impl.DefaultCLI v0;
java.lang.StringBuilder v1;
java.lang.String v2;
v0 := @this: io.vertx.core.cli.impl.DefaultCLI;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: java.lang.String;
v3 = new io.vertx.core.cli.UsageMessageFormatter;
specialinvoke v3.<io.vertx.core.cli.UsageMessageFormatter: void <init>()>();
virtualinvoke v3.<io.vertx.core.cli.UsageMessageFormatter: void usage(java.lang.StringBuilder,java.lang.String,io.vertx.core.cli.CLI)>(v1, v2, v0);
return v0;
}
public int getPriority()
{
int v1;
io.vertx.core.cli.impl.DefaultCLI v0;
v0 := @this: io.vertx.core.cli.impl.DefaultCLI;
v1 = v0.<io.vertx.core.cli.impl.DefaultCLI: int priority>;
return v1;
}
public io.vertx.core.cli.CLI setPriority(int)
{
int v1;
io.vertx.core.cli.impl.DefaultCLI v0;
v0 := @this: io.vertx.core.cli.impl.DefaultCLI;
v1 := @parameter0: int;
v0.<io.vertx.core.cli.impl.DefaultCLI: int priority> = v1;
return v0;
}
}