public class io.vertx.core.dns.AddressResolverOptionsConverter extends java.lang.Object
{
private static final java.util.Base64$Decoder BASE64_DECODER;
private static final java.util.Base64$Encoder BASE64_ENCODER;
public void <init>()
{
io.vertx.core.dns.AddressResolverOptionsConverter v0;
v0 := @this: io.vertx.core.dns.AddressResolverOptionsConverter;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void fromJson(java.lang.Iterable, io.vertx.core.dns.AddressResolverOptions)
{
byte[] v41;
byte v6;
java.util.Base64$Decoder v39;
long v58;
java.util.ArrayList v73, v78;
io.vertx.core.dns.AddressResolverOptions v1;
boolean v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v23, v27, v3, v31, v35, v38, v44, v48, v52, v54, v56, v60, v62, v64, v66, v68, v70, v72, v77, v8, v9;
io.vertx.core.buffer.Buffer v42;
java.lang.Iterable v0;
int v25, v29, v33, v46, v50, v7;
java.util.Iterator v2;
java.util.function.Consumer v75, v80;
java.lang.Object v22, v24, v26, v28, v30, v32, v34, v36, v37, v4, v40, v43, v45, v47, v49, v5, v51, v53, v55, v57, v59, v61, v63, v65, v67, v69, v71, v74, v76, v79;
v0 := @parameter0: java.lang.Iterable;
v1 := @parameter1: io.vertx.core.dns.AddressResolverOptions;
v2 = interfaceinvoke v0.<java.lang.Iterable: java.util.Iterator iterator()>();
label01:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label31;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getKey()>();
v6 = -1;
v7 = virtualinvoke v5.<java.lang.String: int hashCode()>();
lookupswitch(v7)
{
case -2009594026: goto label02;
case -1742092363: goto label12;
case -1140930201: goto label14;
case -936699714: goto label11;
case -699876720: goto label05;
case -274347420: goto label13;
case -215807898: goto label06;
case -187287868: goto label03;
case 104676792: goto label08;
case 129555321: goto label10;
case 1176879136: goto label09;
case 1779755115: goto label04;
case 1829024098: goto label07;
case 1984149904: goto label15;
default: goto label16;
};
label02:
v8 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("cacheMaxTimeToLive");
if v8 == 0 goto label16;
v6 = 0;
goto label16;
label03:
v9 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("cacheMinTimeToLive");
if v9 == 0 goto label16;
v6 = 1;
goto label16;
label04:
v10 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("cacheNegativeTimeToLive");
if v10 == 0 goto label16;
v6 = 2;
goto label16;
label05:
v11 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("hostsPath");
if v11 == 0 goto label16;
v6 = 3;
goto label16;
label06:
v12 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("hostsValue");
if v12 == 0 goto label16;
v6 = 4;
goto label16;
label07:
v13 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("maxQueries");
if v13 == 0 goto label16;
v6 = 5;
goto label16;
label08:
v14 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("ndots");
if v14 == 0 goto label16;
v6 = 6;
goto label16;
label09:
v15 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("optResourceEnabled");
if v15 == 0 goto label16;
v6 = 7;
goto label16;
label10:
v16 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("queryTimeout");
if v16 == 0 goto label16;
v6 = 8;
goto label16;
label11:
v17 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("rdFlag");
if v17 == 0 goto label16;
v6 = 9;
goto label16;
label12:
v18 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("rotateServers");
if v18 == 0 goto label16;
v6 = 10;
goto label16;
label13:
v19 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("roundRobinInetAddress");
if v19 == 0 goto label16;
v6 = 11;
goto label16;
label14:
v20 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("searchDomains");
if v20 == 0 goto label16;
v6 = 12;
goto label16;
label15:
v21 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("servers");
if v21 == 0 goto label16;
v6 = 13;
label16:
tableswitch(v6)
{
case 0: goto label17;
case 1: goto label18;
case 2: goto label19;
case 3: goto label20;
case 4: goto label21;
case 5: goto label22;
case 6: goto label23;
case 7: goto label24;
case 8: goto label25;
case 9: goto label26;
case 10: goto label27;
case 11: goto label28;
case 12: goto label29;
case 13: goto label30;
default: goto label01;
};
label17:
v22 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v23 = v22 instanceof java.lang.Number;
if v23 == 0 goto label01;
v24 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v25 = virtualinvoke v24.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.dns.AddressResolverOptions setCacheMaxTimeToLive(int)>(v25);
goto label01;
label18:
v26 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v27 = v26 instanceof java.lang.Number;
if v27 == 0 goto label01;
v28 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v29 = virtualinvoke v28.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.dns.AddressResolverOptions setCacheMinTimeToLive(int)>(v29);
goto label01;
label19:
v30 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v31 = v30 instanceof java.lang.Number;
if v31 == 0 goto label01;
v32 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v33 = virtualinvoke v32.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.dns.AddressResolverOptions setCacheNegativeTimeToLive(int)>(v33);
goto label01;
label20:
v34 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v35 = v34 instanceof java.lang.String;
if v35 == 0 goto label01;
v36 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
virtualinvoke v1.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.dns.AddressResolverOptions setHostsPath(java.lang.String)>(v36);
goto label01;
label21:
v37 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v38 = v37 instanceof java.lang.String;
if v38 == 0 goto label01;
v39 = <io.vertx.core.dns.AddressResolverOptionsConverter: java.util.Base64$Decoder BASE64_DECODER>;
v40 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v41 = virtualinvoke v39.<java.util.Base64$Decoder: byte[] decode(java.lang.String)>(v40);
v42 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(byte[])>(v41);
virtualinvoke v1.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.dns.AddressResolverOptions setHostsValue(io.vertx.core.buffer.Buffer)>(v42);
goto label01;
label22:
v43 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v44 = v43 instanceof java.lang.Number;
if v44 == 0 goto label01;
v45 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v46 = virtualinvoke v45.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.dns.AddressResolverOptions setMaxQueries(int)>(v46);
goto label01;
label23:
v47 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v48 = v47 instanceof java.lang.Number;
if v48 == 0 goto label01;
v49 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v50 = virtualinvoke v49.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.dns.AddressResolverOptions setNdots(int)>(v50);
goto label01;
label24:
v51 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v52 = v51 instanceof java.lang.Boolean;
if v52 == 0 goto label01;
v53 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v54 = virtualinvoke v53.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.dns.AddressResolverOptions setOptResourceEnabled(boolean)>(v54);
goto label01;
label25:
v55 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v56 = v55 instanceof java.lang.Number;
if v56 == 0 goto label01;
v57 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v58 = virtualinvoke v57.<java.lang.Number: long longValue()>();
virtualinvoke v1.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.dns.AddressResolverOptions setQueryTimeout(long)>(v58);
goto label01;
label26:
v59 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v60 = v59 instanceof java.lang.Boolean;
if v60 == 0 goto label01;
v61 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v62 = virtualinvoke v61.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.dns.AddressResolverOptions setRdFlag(boolean)>(v62);
goto label01;
label27:
v63 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v64 = v63 instanceof java.lang.Boolean;
if v64 == 0 goto label01;
v65 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v66 = virtualinvoke v65.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.dns.AddressResolverOptions setRotateServers(boolean)>(v66);
goto label01;
label28:
v67 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v68 = v67 instanceof java.lang.Boolean;
if v68 == 0 goto label01;
v69 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v70 = virtualinvoke v69.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.dns.AddressResolverOptions setRoundRobinInetAddress(boolean)>(v70);
goto label01;
label29:
v71 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v72 = v71 instanceof io.vertx.core.json.JsonArray;
if v72 == 0 goto label01;
v73 = new java.util.ArrayList;
specialinvoke v73.<java.util.ArrayList: void <init>()>();
v74 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v75 = staticinvoke <io.vertx.core.dns.AddressResolverOptionsConverter$lambda_fromJson_0__923: java.util.function.Consumer bootstrap$(java.util.ArrayList)>(v73);
interfaceinvoke v74.<java.lang.Iterable: void forEach(java.util.function.Consumer)>(v75);
virtualinvoke v1.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.dns.AddressResolverOptions setSearchDomains(java.util.List)>(v73);
goto label01;
label30:
v76 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v77 = v76 instanceof io.vertx.core.json.JsonArray;
if v77 == 0 goto label01;
v78 = new java.util.ArrayList;
specialinvoke v78.<java.util.ArrayList: void <init>()>();
v79 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v80 = staticinvoke <io.vertx.core.dns.AddressResolverOptionsConverter$lambda_fromJson_1__922: java.util.function.Consumer bootstrap$(java.util.ArrayList)>(v78);
interfaceinvoke v79.<java.lang.Iterable: void forEach(java.util.function.Consumer)>(v80);
virtualinvoke v1.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.dns.AddressResolverOptions setServers(java.util.List)>(v78);
goto label01;
label31:
return;
}
static void toJson(io.vertx.core.dns.AddressResolverOptions, io.vertx.core.json.JsonObject)
{
io.vertx.core.json.JsonObject v1;
io.vertx.core.dns.AddressResolverOptions v0;
java.util.Map v2;
v0 := @parameter0: io.vertx.core.dns.AddressResolverOptions;
v1 := @parameter1: io.vertx.core.json.JsonObject;
v2 = virtualinvoke v1.<io.vertx.core.json.JsonObject: java.util.Map getMap()>();
staticinvoke <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,java.util.Map)>(v0, v2);
return;
}
static void toJson(io.vertx.core.dns.AddressResolverOptions, java.util.Map)
{
byte[] v13;
io.vertx.core.dns.AddressResolverOptions v0;
java.lang.Integer v16, v18, v3, v5, v7;
java.lang.Long v22;
java.util.Map v1;
boolean v19, v23, v25, v27;
java.util.List v29, v31, v33, v35;
io.vertx.core.buffer.Buffer v10, v12;
long v21;
int v15, v17, v2, v4, v6;
java.lang.Boolean v20, v24, v26, v28;
java.lang.String v14, v8, v9;
java.util.Base64$Encoder v11;
java.util.function.Consumer v32, v36;
io.vertx.core.json.JsonArray v30, v34;
v0 := @parameter0: io.vertx.core.dns.AddressResolverOptions;
v1 := @parameter1: java.util.Map;
v2 = virtualinvoke v0.<io.vertx.core.dns.AddressResolverOptions: int getCacheMaxTimeToLive()>();
v3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v2);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cacheMaxTimeToLive", v3);
v4 = virtualinvoke v0.<io.vertx.core.dns.AddressResolverOptions: int getCacheMinTimeToLive()>();
v5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v4);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cacheMinTimeToLive", v5);
v6 = virtualinvoke v0.<io.vertx.core.dns.AddressResolverOptions: int getCacheNegativeTimeToLive()>();
v7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v6);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cacheNegativeTimeToLive", v7);
v8 = virtualinvoke v0.<io.vertx.core.dns.AddressResolverOptions: java.lang.String getHostsPath()>();
if v8 == null goto label1;
v9 = virtualinvoke v0.<io.vertx.core.dns.AddressResolverOptions: java.lang.String getHostsPath()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hostsPath", v9);
label1:
v10 = virtualinvoke v0.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.buffer.Buffer getHostsValue()>();
if v10 == null goto label2;
v11 = <io.vertx.core.dns.AddressResolverOptionsConverter: java.util.Base64$Encoder BASE64_ENCODER>;
v12 = virtualinvoke v0.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.buffer.Buffer getHostsValue()>();
v13 = interfaceinvoke v12.<io.vertx.core.buffer.Buffer: byte[] getBytes()>();
v14 = virtualinvoke v11.<java.util.Base64$Encoder: java.lang.String encodeToString(byte[])>(v13);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hostsValue", v14);
label2:
v15 = virtualinvoke v0.<io.vertx.core.dns.AddressResolverOptions: int getMaxQueries()>();
v16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v15);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxQueries", v16);
v17 = virtualinvoke v0.<io.vertx.core.dns.AddressResolverOptions: int getNdots()>();
v18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v17);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ndots", v18);
v19 = virtualinvoke v0.<io.vertx.core.dns.AddressResolverOptions: boolean isOptResourceEnabled()>();
v20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v19);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("optResourceEnabled", v20);
v21 = virtualinvoke v0.<io.vertx.core.dns.AddressResolverOptions: long getQueryTimeout()>();
v22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v21);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("queryTimeout", v22);
v23 = virtualinvoke v0.<io.vertx.core.dns.AddressResolverOptions: boolean getRdFlag()>();
v24 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v23);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("rdFlag", v24);
v25 = virtualinvoke v0.<io.vertx.core.dns.AddressResolverOptions: boolean isRotateServers()>();
v26 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v25);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("rotateServers", v26);
v27 = virtualinvoke v0.<io.vertx.core.dns.AddressResolverOptions: boolean isRoundRobinInetAddress()>();
v28 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v27);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("roundRobinInetAddress", v28);
v29 = virtualinvoke v0.<io.vertx.core.dns.AddressResolverOptions: java.util.List getSearchDomains()>();
if v29 == null goto label3;
v30 = new io.vertx.core.json.JsonArray;
specialinvoke v30.<io.vertx.core.json.JsonArray: void <init>()>();
v31 = virtualinvoke v0.<io.vertx.core.dns.AddressResolverOptions: java.util.List getSearchDomains()>();
v32 = staticinvoke <io.vertx.core.dns.AddressResolverOptionsConverter$lambda_toJson_2__925: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)>(v30);
interfaceinvoke v31.<java.util.List: void forEach(java.util.function.Consumer)>(v32);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("searchDomains", v30);
label3:
v33 = virtualinvoke v0.<io.vertx.core.dns.AddressResolverOptions: java.util.List getServers()>();
if v33 == null goto label4;
v34 = new io.vertx.core.json.JsonArray;
specialinvoke v34.<io.vertx.core.json.JsonArray: void <init>()>();
v35 = virtualinvoke v0.<io.vertx.core.dns.AddressResolverOptions: java.util.List getServers()>();
v36 = staticinvoke <io.vertx.core.dns.AddressResolverOptionsConverter$lambda_toJson_3__924: java.util.function.Consumer bootstrap$(io.vertx.core.json.JsonArray)>(v34);
interfaceinvoke v35.<java.util.List: void forEach(java.util.function.Consumer)>(v36);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("servers", v34);
label4:
return;
}
static void <clinit>()
{
java.util.Base64$Encoder v1;
java.util.Base64$Decoder v0;
v0 = <io.vertx.core.json.impl.JsonUtil: java.util.Base64$Decoder BASE64_DECODER>;
<io.vertx.core.dns.AddressResolverOptionsConverter: java.util.Base64$Decoder BASE64_DECODER> = v0;
v1 = <io.vertx.core.json.impl.JsonUtil: java.util.Base64$Encoder BASE64_ENCODER>;
<io.vertx.core.dns.AddressResolverOptionsConverter: java.util.Base64$Encoder BASE64_ENCODER> = v1;
return;
}
}