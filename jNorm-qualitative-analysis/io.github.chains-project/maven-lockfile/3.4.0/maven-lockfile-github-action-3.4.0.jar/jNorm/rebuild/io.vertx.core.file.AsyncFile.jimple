public interface  io.vertx.core.file.AsyncFile extends java.lang.Object implements io.vertx.core.streams.ReadStream, io.vertx.core.streams.WriteStream
{
public abstract io.vertx.core.file.AsyncFile handler(io.vertx.core.Handler);
public abstract io.vertx.core.file.AsyncFile pause();
public abstract io.vertx.core.file.AsyncFile resume();
public abstract io.vertx.core.file.AsyncFile endHandler(io.vertx.core.Handler);
public abstract io.vertx.core.file.AsyncFile setWriteQueueMaxSize(int);
public abstract io.vertx.core.file.AsyncFile drainHandler(io.vertx.core.Handler);
public abstract io.vertx.core.file.AsyncFile exceptionHandler(io.vertx.core.Handler);
public abstract io.vertx.core.file.AsyncFile fetch(long);
public abstract io.vertx.core.Future close();
public abstract void close(io.vertx.core.Handler);
public abstract void write(io.vertx.core.buffer.Buffer, long, io.vertx.core.Handler);
public abstract io.vertx.core.Future write(io.vertx.core.buffer.Buffer, long);
public abstract io.vertx.core.file.AsyncFile read(io.vertx.core.buffer.Buffer, int, long, int, io.vertx.core.Handler);
public abstract io.vertx.core.Future read(io.vertx.core.buffer.Buffer, int, long, int);
public abstract io.vertx.core.Future flush();
public abstract io.vertx.core.file.AsyncFile flush(io.vertx.core.Handler);
public abstract io.vertx.core.file.AsyncFile setReadPos(long);
public abstract io.vertx.core.file.AsyncFile setReadLength(long);
public abstract long getReadLength();
public abstract io.vertx.core.file.AsyncFile setWritePos(long);
public abstract long getWritePos();
public abstract io.vertx.core.file.AsyncFile setReadBufferSize(int);
public abstract long sizeBlocking();
public void size(io.vertx.core.Handler)
{
io.vertx.core.file.AsyncFile v0;
io.vertx.core.Handler v1;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.file.AsyncFile;
v1 := @parameter0: io.vertx.core.Handler;
v2 = interfaceinvoke v0.<io.vertx.core.file.AsyncFile: io.vertx.core.Future size()>();
if v1 == null goto label1;
interfaceinvoke v2.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v1);
label1:
return;
}
public abstract io.vertx.core.Future size();
public abstract io.vertx.core.file.AsyncFileLock tryLock();
public abstract io.vertx.core.file.AsyncFileLock tryLock(long, long, boolean);
public abstract io.vertx.core.Future lock();
public abstract void lock(io.vertx.core.Handler);
public abstract io.vertx.core.Future lock(long, long, boolean);
public abstract void lock(long, long, boolean, io.vertx.core.Handler);
}