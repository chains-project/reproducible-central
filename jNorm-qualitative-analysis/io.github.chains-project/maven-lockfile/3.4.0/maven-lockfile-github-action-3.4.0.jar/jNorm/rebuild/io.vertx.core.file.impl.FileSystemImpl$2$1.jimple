class io.vertx.core.file.impl.FileSystemImpl$2$1 extends java.nio.file.SimpleFileVisitor
{
final java.nio.file.Path val$target;
final java.nio.file.Path val$source;
final io.vertx.core.file.impl.FileSystemImpl$2 this$1;
void <init>(io.vertx.core.file.impl.FileSystemImpl$2, java.nio.file.Path, java.nio.file.Path)
{
io.vertx.core.file.impl.FileSystemImpl$2 v1;
io.vertx.core.file.impl.FileSystemImpl$2$1 v0;
java.nio.file.Path v2, v3;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl$2$1;
v1 := @parameter0: io.vertx.core.file.impl.FileSystemImpl$2;
v2 := @parameter1: java.nio.file.Path;
v3 := @parameter2: java.nio.file.Path;
v0.<io.vertx.core.file.impl.FileSystemImpl$2$1: io.vertx.core.file.impl.FileSystemImpl$2 this$1> = v1;
v0.<io.vertx.core.file.impl.FileSystemImpl$2$1: java.nio.file.Path val$target> = v2;
v0.<io.vertx.core.file.impl.FileSystemImpl$2$1: java.nio.file.Path val$source> = v3;
specialinvoke v0.<java.nio.file.SimpleFileVisitor: void <init>()>();
return;
}
public java.nio.file.FileVisitResult preVisitDirectory(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException
{
java.nio.file.CopyOption[] v7;
java.nio.file.LinkOption[] v9;
java.nio.file.FileAlreadyExistsException v8;
java.nio.file.attribute.BasicFileAttributes v2;
java.nio.file.FileVisitResult v11;
io.vertx.core.file.impl.FileSystemImpl$2$1 v0;
java.nio.file.Path v1, v3, v4, v5, v6;
boolean v10;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl$2$1;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;
v3 = v0.<io.vertx.core.file.impl.FileSystemImpl$2$1: java.nio.file.Path val$target>;
v4 = v0.<io.vertx.core.file.impl.FileSystemImpl$2$1: java.nio.file.Path val$source>;
v5 = interfaceinvoke v4.<java.nio.file.Path: java.nio.file.Path relativize(java.nio.file.Path)>(v1);
v6 = interfaceinvoke v3.<java.nio.file.Path: java.nio.file.Path resolve(java.nio.file.Path)>(v5);
label1:
v7 = newarray (java.nio.file.CopyOption)[0];
staticinvoke <java.nio.file.Files: java.nio.file.Path copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>(v1, v6, v7);
label2:
goto label4;
label3:
v8 := @caughtexception;
v9 = newarray (java.nio.file.LinkOption)[0];
v10 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>(v6, v9);
if v10 != 0 goto label4;
throw v8;
label4:
v11 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;
return v11;
catch java.nio.file.FileAlreadyExistsException from label1 to label2 with label3;
}
public java.nio.file.FileVisitResult visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException
{
java.nio.file.CopyOption[] v7;
java.nio.file.attribute.BasicFileAttributes v2;
java.nio.file.FileVisitResult v8;
io.vertx.core.file.impl.FileSystemImpl$2$1 v0;
java.nio.file.Path v1, v3, v4, v5, v6;
v0 := @this: io.vertx.core.file.impl.FileSystemImpl$2$1;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;
v3 = v0.<io.vertx.core.file.impl.FileSystemImpl$2$1: java.nio.file.Path val$target>;
v4 = v0.<io.vertx.core.file.impl.FileSystemImpl$2$1: java.nio.file.Path val$source>;
v5 = interfaceinvoke v4.<java.nio.file.Path: java.nio.file.Path relativize(java.nio.file.Path)>(v1);
v6 = interfaceinvoke v3.<java.nio.file.Path: java.nio.file.Path resolve(java.nio.file.Path)>(v5);
v7 = newarray (java.nio.file.CopyOption)[0];
staticinvoke <java.nio.file.Files: java.nio.file.Path copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>(v1, v6, v7);
v8 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;
return v8;
}
}