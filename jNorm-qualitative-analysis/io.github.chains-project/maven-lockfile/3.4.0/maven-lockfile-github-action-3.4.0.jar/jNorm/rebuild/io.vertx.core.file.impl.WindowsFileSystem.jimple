public class io.vertx.core.file.impl.WindowsFileSystem extends io.vertx.core.file.impl.FileSystemImpl
{
private static final io.vertx.core.impl.logging.Logger log;
public void <init>(io.vertx.core.impl.VertxInternal)
{
io.vertx.core.impl.VertxInternal v1;
io.vertx.core.file.impl.WindowsFileSystem v0;
v0 := @this: io.vertx.core.file.impl.WindowsFileSystem;
v1 := @parameter0: io.vertx.core.impl.VertxInternal;
specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: void <init>(io.vertx.core.impl.VertxInternal)>(v1);
return;
}
private static void logInternal(java.lang.String)
{
io.vertx.core.impl.logging.Logger v1, v3;
java.lang.String v0;
boolean v2;
v0 := @parameter0: java.lang.String;
if v0 == null goto label1;
v1 = <io.vertx.core.file.impl.WindowsFileSystem: io.vertx.core.impl.logging.Logger log>;
v2 = interfaceinvoke v1.<io.vertx.core.impl.logging.Logger: boolean isDebugEnabled()>();
if v2 == 0 goto label1;
v3 = <io.vertx.core.file.impl.WindowsFileSystem: io.vertx.core.impl.logging.Logger log>;
interfaceinvoke v3.<io.vertx.core.impl.logging.Logger: void debug(java.lang.Object)>("You are running on Windows and POSIX style file permissions are not supported");
label1:
return;
}
protected io.vertx.core.file.impl.FileSystemImpl$BlockingAction chmodInternal(java.lang.String, java.lang.String, java.lang.String)
{
io.vertx.core.impl.logging.Logger v4, v6;
io.vertx.core.file.impl.WindowsFileSystem v0;
java.lang.String v1, v2, v3;
io.vertx.core.file.impl.WindowsFileSystem$1 v7;
boolean v5;
v0 := @this: io.vertx.core.file.impl.WindowsFileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
staticinvoke <io.vertx.core.file.impl.WindowsFileSystem: void logInternal(java.lang.String)>(v2);
staticinvoke <io.vertx.core.file.impl.WindowsFileSystem: void logInternal(java.lang.String)>(v3);
v4 = <io.vertx.core.file.impl.WindowsFileSystem: io.vertx.core.impl.logging.Logger log>;
v5 = interfaceinvoke v4.<io.vertx.core.impl.logging.Logger: boolean isDebugEnabled()>();
if v5 == 0 goto label1;
v6 = <io.vertx.core.file.impl.WindowsFileSystem: io.vertx.core.impl.logging.Logger log>;
interfaceinvoke v6.<io.vertx.core.impl.logging.Logger: void debug(java.lang.Object)>("You are running on Windows and POSIX style file permissions are not supported!");
label1:
v7 = new io.vertx.core.file.impl.WindowsFileSystem$1;
specialinvoke v7.<io.vertx.core.file.impl.WindowsFileSystem$1: void <init>(io.vertx.core.file.impl.WindowsFileSystem)>(v0);
return v7;
}
protected io.vertx.core.file.impl.FileSystemImpl$BlockingAction mkdirInternal(java.lang.String, java.lang.String, boolean)
{
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v4;
io.vertx.core.file.impl.WindowsFileSystem v0;
java.lang.String v1, v2;
boolean v3;
v0 := @this: io.vertx.core.file.impl.WindowsFileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: boolean;
staticinvoke <io.vertx.core.file.impl.WindowsFileSystem: void logInternal(java.lang.String)>(v2);
v4 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction mkdirInternal(java.lang.String,java.lang.String,boolean)>(v1, null, v3);
return v4;
}
protected io.vertx.core.file.AsyncFile doOpen(java.lang.String, io.vertx.core.file.OpenOptions, io.vertx.core.impl.ContextInternal)
{
io.vertx.core.file.impl.AsyncFileImpl v5;
io.vertx.core.impl.VertxInternal v6;
io.vertx.core.file.OpenOptions v2;
io.vertx.core.file.impl.WindowsFileSystem v0;
io.vertx.core.impl.ContextInternal v3;
java.lang.String v1, v4;
v0 := @this: io.vertx.core.file.impl.WindowsFileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.file.OpenOptions;
v3 := @parameter2: io.vertx.core.impl.ContextInternal;
v4 = virtualinvoke v2.<io.vertx.core.file.OpenOptions: java.lang.String getPerms()>();
staticinvoke <io.vertx.core.file.impl.WindowsFileSystem: void logInternal(java.lang.String)>(v4);
v5 = new io.vertx.core.file.impl.AsyncFileImpl;
v6 = v0.<io.vertx.core.file.impl.WindowsFileSystem: io.vertx.core.impl.VertxInternal vertx>;
specialinvoke v5.<io.vertx.core.file.impl.AsyncFileImpl: void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.impl.ContextInternal)>(v6, v1, v2, v3);
return v5;
}
protected io.vertx.core.file.impl.FileSystemImpl$BlockingAction createFileInternal(java.lang.String, java.lang.String)
{
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v3;
io.vertx.core.file.impl.WindowsFileSystem v0;
java.lang.String v1, v2;
v0 := @this: io.vertx.core.file.impl.WindowsFileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
staticinvoke <io.vertx.core.file.impl.WindowsFileSystem: void logInternal(java.lang.String)>(v2);
v3 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction createFileInternal(java.lang.String,java.lang.String)>(v1, null);
return v3;
}
protected io.vertx.core.file.impl.FileSystemImpl$BlockingAction chownInternal(java.lang.String, java.lang.String, java.lang.String)
{
io.vertx.core.impl.logging.Logger v4, v6;
io.vertx.core.file.impl.FileSystemImpl$BlockingAction v7;
io.vertx.core.file.impl.WindowsFileSystem v0;
java.lang.String v1, v2, v3;
boolean v5;
v0 := @this: io.vertx.core.file.impl.WindowsFileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
if v3 == null goto label1;
v4 = <io.vertx.core.file.impl.WindowsFileSystem: io.vertx.core.impl.logging.Logger log>;
v5 = interfaceinvoke v4.<io.vertx.core.impl.logging.Logger: boolean isDebugEnabled()>();
if v5 == 0 goto label1;
v6 = <io.vertx.core.file.impl.WindowsFileSystem: io.vertx.core.impl.logging.Logger log>;
interfaceinvoke v6.<io.vertx.core.impl.logging.Logger: void debug(java.lang.Object)>("You are running on Windows and POSIX style file ownership is not supported");
label1:
v7 = specialinvoke v0.<io.vertx.core.file.impl.FileSystemImpl: io.vertx.core.file.impl.FileSystemImpl$BlockingAction chownInternal(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3);
return v7;
}
static void <clinit>()
{
io.vertx.core.impl.logging.Logger v0;
v0 = staticinvoke <io.vertx.core.impl.logging.LoggerFactory: io.vertx.core.impl.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/file/impl/WindowsFileSystem;");
<io.vertx.core.file.impl.WindowsFileSystem: io.vertx.core.impl.logging.Logger log> = v0;
return;
}
}