public class io.vertx.core.http.Http2SettingsConverter extends java.lang.Object
{
private static final java.util.Base64$Decoder BASE64_DECODER;
private static final java.util.Base64$Encoder BASE64_ENCODER;
public void <init>()
{
io.vertx.core.http.Http2SettingsConverter v0;
v0 := @this: io.vertx.core.http.Http2SettingsConverter;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void fromJson(java.lang.Iterable, io.vertx.core.http.Http2Settings)
{
io.vertx.core.http.Http2Settings v1;
byte v6;
boolean v10, v11, v12, v13, v15, v19, v23, v27, v3, v31, v35, v37, v8, v9;
long v17, v25, v33;
java.lang.Iterable v0;
int v21, v29, v7;
java.util.Iterator v2;
java.lang.Object v14, v16, v18, v20, v22, v24, v26, v28, v30, v32, v34, v36, v4, v5;
v0 := @parameter0: java.lang.Iterable;
v1 := @parameter1: io.vertx.core.http.Http2Settings;
v2 = interfaceinvoke v0.<java.lang.Iterable: java.util.Iterator iterator()>();
label01:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label15;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getKey()>();
v6 = -1;
v7 = virtualinvoke v5.<java.lang.String: int hashCode()>();
lookupswitch(v7)
{
case -2037922590: goto label02;
case -1692458297: goto label07;
case -1439324555: goto label03;
case -878196214: goto label05;
case 1588339184: goto label06;
case 1776703032: goto label04;
default: goto label08;
};
label02:
v8 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("headerTableSize");
if v8 == 0 goto label08;
v6 = 0;
goto label08;
label03:
v9 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("initialWindowSize");
if v9 == 0 goto label08;
v6 = 1;
goto label08;
label04:
v10 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("maxConcurrentStreams");
if v10 == 0 goto label08;
v6 = 2;
goto label08;
label05:
v11 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("maxFrameSize");
if v11 == 0 goto label08;
v6 = 3;
goto label08;
label06:
v12 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("maxHeaderListSize");
if v12 == 0 goto label08;
v6 = 4;
goto label08;
label07:
v13 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("pushEnabled");
if v13 == 0 goto label08;
v6 = 5;
label08:
tableswitch(v6)
{
case 0: goto label09;
case 1: goto label10;
case 2: goto label11;
case 3: goto label12;
case 4: goto label13;
case 5: goto label14;
default: goto label01;
};
label09:
v14 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v15 = v14 instanceof java.lang.Number;
if v15 == 0 goto label01;
v16 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v17 = virtualinvoke v16.<java.lang.Number: long longValue()>();
virtualinvoke v1.<io.vertx.core.http.Http2Settings: io.vertx.core.http.Http2Settings setHeaderTableSize(long)>(v17);
goto label01;
label10:
v18 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v19 = v18 instanceof java.lang.Number;
if v19 == 0 goto label01;
v20 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v21 = virtualinvoke v20.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.http.Http2Settings: io.vertx.core.http.Http2Settings setInitialWindowSize(int)>(v21);
goto label01;
label11:
v22 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v23 = v22 instanceof java.lang.Number;
if v23 == 0 goto label01;
v24 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v25 = virtualinvoke v24.<java.lang.Number: long longValue()>();
virtualinvoke v1.<io.vertx.core.http.Http2Settings: io.vertx.core.http.Http2Settings setMaxConcurrentStreams(long)>(v25);
goto label01;
label12:
v26 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v27 = v26 instanceof java.lang.Number;
if v27 == 0 goto label01;
v28 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v29 = virtualinvoke v28.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.http.Http2Settings: io.vertx.core.http.Http2Settings setMaxFrameSize(int)>(v29);
goto label01;
label13:
v30 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v31 = v30 instanceof java.lang.Number;
if v31 == 0 goto label01;
v32 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v33 = virtualinvoke v32.<java.lang.Number: long longValue()>();
virtualinvoke v1.<io.vertx.core.http.Http2Settings: io.vertx.core.http.Http2Settings setMaxHeaderListSize(long)>(v33);
goto label01;
label14:
v34 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v35 = v34 instanceof java.lang.Boolean;
if v35 == 0 goto label01;
v36 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v37 = virtualinvoke v36.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.http.Http2Settings: io.vertx.core.http.Http2Settings setPushEnabled(boolean)>(v37);
goto label01;
label15:
return;
}
static void toJson(io.vertx.core.http.Http2Settings, io.vertx.core.json.JsonObject)
{
io.vertx.core.json.JsonObject v1;
io.vertx.core.http.Http2Settings v0;
java.util.Map v2;
v0 := @parameter0: io.vertx.core.http.Http2Settings;
v1 := @parameter1: io.vertx.core.json.JsonObject;
v2 = virtualinvoke v1.<io.vertx.core.json.JsonObject: java.util.Map getMap()>();
staticinvoke <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,java.util.Map)>(v0, v2);
return;
}
static void toJson(io.vertx.core.http.Http2Settings, java.util.Map)
{
long v10, v2, v6;
io.vertx.core.http.Http2Settings v0;
java.lang.Integer v5, v9;
java.lang.Long v11, v3, v7;
java.util.Map v1;
int v4, v8;
java.lang.Boolean v13;
boolean v12;
v0 := @parameter0: io.vertx.core.http.Http2Settings;
v1 := @parameter1: java.util.Map;
v2 = virtualinvoke v0.<io.vertx.core.http.Http2Settings: long getHeaderTableSize()>();
v3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v2);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("headerTableSize", v3);
v4 = virtualinvoke v0.<io.vertx.core.http.Http2Settings: int getInitialWindowSize()>();
v5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v4);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("initialWindowSize", v5);
v6 = virtualinvoke v0.<io.vertx.core.http.Http2Settings: long getMaxConcurrentStreams()>();
v7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v6);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxConcurrentStreams", v7);
v8 = virtualinvoke v0.<io.vertx.core.http.Http2Settings: int getMaxFrameSize()>();
v9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v8);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxFrameSize", v9);
v10 = virtualinvoke v0.<io.vertx.core.http.Http2Settings: long getMaxHeaderListSize()>();
v11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v10);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("maxHeaderListSize", v11);
v12 = virtualinvoke v0.<io.vertx.core.http.Http2Settings: boolean isPushEnabled()>();
v13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v12);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pushEnabled", v13);
return;
}
static void <clinit>()
{
java.util.Base64$Encoder v1;
java.util.Base64$Decoder v0;
v0 = <io.vertx.core.json.impl.JsonUtil: java.util.Base64$Decoder BASE64_DECODER>;
<io.vertx.core.http.Http2SettingsConverter: java.util.Base64$Decoder BASE64_DECODER> = v0;
v1 = <io.vertx.core.json.impl.JsonUtil: java.util.Base64$Encoder BASE64_ENCODER>;
<io.vertx.core.http.Http2SettingsConverter: java.util.Base64$Encoder BASE64_ENCODER> = v1;
return;
}
}