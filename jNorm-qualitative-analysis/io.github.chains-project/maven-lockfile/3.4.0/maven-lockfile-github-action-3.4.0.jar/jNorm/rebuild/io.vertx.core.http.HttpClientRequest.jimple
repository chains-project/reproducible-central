public interface  io.vertx.core.http.HttpClientRequest extends java.lang.Object implements io.vertx.core.streams.WriteStream
{
public abstract io.vertx.core.http.HttpClientRequest exceptionHandler(io.vertx.core.Handler);
public abstract io.vertx.core.http.HttpClientRequest setWriteQueueMaxSize(int);
public abstract io.vertx.core.http.HttpClientRequest drainHandler(io.vertx.core.Handler);
public abstract io.vertx.core.http.HttpClientRequest setHost(java.lang.String);
public abstract java.lang.String getHost();
public abstract io.vertx.core.http.HttpClientRequest setPort(int);
public abstract int getPort();
public abstract io.vertx.core.http.HttpClientRequest setFollowRedirects(boolean);
public abstract io.vertx.core.http.HttpClientRequest setMaxRedirects(int);
public abstract io.vertx.core.http.HttpClientRequest setChunked(boolean);
public abstract boolean isChunked();
public abstract io.vertx.core.http.HttpMethod getMethod();
public abstract io.vertx.core.http.HttpClientRequest setMethod(io.vertx.core.http.HttpMethod);
public abstract java.lang.String absoluteURI();
public abstract java.lang.String getURI();
public abstract io.vertx.core.http.HttpClientRequest setURI(java.lang.String);
public abstract java.lang.String path();
public abstract java.lang.String query();
public abstract io.vertx.core.MultiMap headers();
public abstract io.vertx.core.http.HttpClientRequest putHeader(java.lang.String, java.lang.String);
public abstract io.vertx.core.http.HttpClientRequest putHeader(java.lang.CharSequence, java.lang.CharSequence);
public abstract io.vertx.core.http.HttpClientRequest putHeader(java.lang.String, java.lang.Iterable);
public abstract io.vertx.core.http.HttpClientRequest putHeader(java.lang.CharSequence, java.lang.Iterable);
public abstract io.vertx.core.http.HttpVersion version();
public abstract io.vertx.core.Future write(java.lang.String);
public abstract void write(java.lang.String, io.vertx.core.Handler);
public abstract io.vertx.core.Future write(java.lang.String, java.lang.String);
public abstract void write(java.lang.String, java.lang.String, io.vertx.core.Handler);
public abstract io.vertx.core.http.HttpClientRequest continueHandler(io.vertx.core.Handler);
public abstract io.vertx.core.http.HttpClientRequest earlyHintsHandler(io.vertx.core.Handler);
public abstract io.vertx.core.Future sendHead();
public abstract io.vertx.core.http.HttpClientRequest sendHead(io.vertx.core.Handler);
public abstract void connect(io.vertx.core.Handler);
public abstract io.vertx.core.Future connect();
public abstract io.vertx.core.http.HttpClientRequest response(io.vertx.core.Handler);
public abstract io.vertx.core.Future response();
public void send(io.vertx.core.Handler)
{
io.vertx.core.http.HttpClientRequest v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.HttpClientRequest;
v1 := @parameter0: io.vertx.core.Handler;
interfaceinvoke v0.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest response(io.vertx.core.Handler)>(v1);
interfaceinvoke v0.<io.vertx.core.http.HttpClientRequest: io.vertx.core.Future end()>();
return;
}
public io.vertx.core.Future send()
{
io.vertx.core.http.HttpClientRequest v0;
io.vertx.core.Future v1;
v0 := @this: io.vertx.core.http.HttpClientRequest;
interfaceinvoke v0.<io.vertx.core.http.HttpClientRequest: io.vertx.core.Future end()>();
v1 = interfaceinvoke v0.<io.vertx.core.http.HttpClientRequest: io.vertx.core.Future response()>();
return v1;
}
public void send(java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.http.HttpClientRequest v0;
java.lang.String v1;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.http.HttpClientRequest;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
interfaceinvoke v0.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest response(io.vertx.core.Handler)>(v2);
interfaceinvoke v0.<io.vertx.core.http.HttpClientRequest: io.vertx.core.Future end(java.lang.String)>(v1);
return;
}
public io.vertx.core.Future send(java.lang.String)
{
io.vertx.core.http.HttpClientRequest v0;
java.lang.String v1;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.http.HttpClientRequest;
v1 := @parameter0: java.lang.String;
interfaceinvoke v0.<io.vertx.core.http.HttpClientRequest: io.vertx.core.Future end(java.lang.String)>(v1);
v2 = interfaceinvoke v0.<io.vertx.core.http.HttpClientRequest: io.vertx.core.Future response()>();
return v2;
}
public void send(io.vertx.core.buffer.Buffer, io.vertx.core.Handler)
{
io.vertx.core.http.HttpClientRequest v0;
io.vertx.core.Handler v2;
io.vertx.core.buffer.Buffer v1;
v0 := @this: io.vertx.core.http.HttpClientRequest;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 := @parameter1: io.vertx.core.Handler;
interfaceinvoke v0.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest response(io.vertx.core.Handler)>(v2);
interfaceinvoke v0.<io.vertx.core.http.HttpClientRequest: io.vertx.core.Future end(io.vertx.core.buffer.Buffer)>(v1);
return;
}
public io.vertx.core.Future send(io.vertx.core.buffer.Buffer)
{
io.vertx.core.http.HttpClientRequest v0;
io.vertx.core.buffer.Buffer v1;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.http.HttpClientRequest;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
interfaceinvoke v0.<io.vertx.core.http.HttpClientRequest: io.vertx.core.Future end(io.vertx.core.buffer.Buffer)>(v1);
v2 = interfaceinvoke v0.<io.vertx.core.http.HttpClientRequest: io.vertx.core.Future response()>();
return v2;
}
public void send(io.vertx.core.streams.ReadStream, io.vertx.core.Handler)
{
io.vertx.core.http.HttpClientRequest v0;
java.lang.CharSequence v4;
io.vertx.core.MultiMap v3;
io.vertx.core.streams.ReadStream v1;
io.vertx.core.Handler v2;
boolean v5;
v0 := @this: io.vertx.core.http.HttpClientRequest;
v1 := @parameter0: io.vertx.core.streams.ReadStream;
v2 := @parameter1: io.vertx.core.Handler;
v3 = interfaceinvoke v0.<io.vertx.core.http.HttpClientRequest: io.vertx.core.MultiMap headers()>();
if v3 == null goto label1;
v4 = <io.vertx.core.http.HttpHeaders: java.lang.CharSequence CONTENT_LENGTH>;
v5 = interfaceinvoke v3.<io.vertx.core.MultiMap: boolean contains(java.lang.CharSequence)>(v4);
if v5 != 0 goto label2;
label1:
interfaceinvoke v0.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest setChunked(boolean)>(1);
label2:
interfaceinvoke v0.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest response(io.vertx.core.Handler)>(v2);
interfaceinvoke v1.<io.vertx.core.streams.ReadStream: io.vertx.core.Future pipeTo(io.vertx.core.streams.WriteStream)>(v0);
return;
}
public io.vertx.core.Future send(io.vertx.core.streams.ReadStream)
{
io.vertx.core.http.HttpClientRequest v0;
java.lang.CharSequence v3;
io.vertx.core.MultiMap v2;
io.vertx.core.streams.ReadStream v1;
io.vertx.core.Future v5;
boolean v4;
v0 := @this: io.vertx.core.http.HttpClientRequest;
v1 := @parameter0: io.vertx.core.streams.ReadStream;
v2 = interfaceinvoke v0.<io.vertx.core.http.HttpClientRequest: io.vertx.core.MultiMap headers()>();
if v2 == null goto label1;
v3 = <io.vertx.core.http.HttpHeaders: java.lang.CharSequence CONTENT_LENGTH>;
v4 = interfaceinvoke v2.<io.vertx.core.MultiMap: boolean contains(java.lang.CharSequence)>(v3);
if v4 != 0 goto label2;
label1:
interfaceinvoke v0.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest setChunked(boolean)>(1);
label2:
interfaceinvoke v1.<io.vertx.core.streams.ReadStream: io.vertx.core.Future pipeTo(io.vertx.core.streams.WriteStream)>(v0);
v5 = interfaceinvoke v0.<io.vertx.core.http.HttpClientRequest: io.vertx.core.Future response()>();
return v5;
}
public abstract io.vertx.core.Future end(java.lang.String);
public abstract void end(java.lang.String, io.vertx.core.Handler);
public abstract io.vertx.core.Future end(java.lang.String, java.lang.String);
public abstract void end(java.lang.String, java.lang.String, io.vertx.core.Handler);
public abstract io.vertx.core.Future end(io.vertx.core.buffer.Buffer);
public abstract void end(io.vertx.core.buffer.Buffer, io.vertx.core.Handler);
public abstract io.vertx.core.Future end();
public abstract void end(io.vertx.core.Handler);
public abstract io.vertx.core.http.HttpClientRequest setTimeout(long);
public abstract io.vertx.core.http.HttpClientRequest pushHandler(io.vertx.core.Handler);
public boolean reset()
{
io.vertx.core.http.HttpClientRequest v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpClientRequest;
v1 = interfaceinvoke v0.<io.vertx.core.http.HttpClientRequest: boolean reset(long)>(0L);
return v1;
}
public abstract boolean reset(long);
public abstract boolean reset(long, java.lang.Throwable);
public abstract io.vertx.core.http.HttpConnection connection();
public abstract io.vertx.core.http.HttpClientRequest writeCustomFrame(int, int, io.vertx.core.buffer.Buffer);
public int streamId()
{
int v1;
io.vertx.core.http.HttpClientRequest v0;
v0 := @this: io.vertx.core.http.HttpClientRequest;
v1 = (int) -1;
return v1;
}
public io.vertx.core.http.HttpClientRequest writeCustomFrame(io.vertx.core.http.HttpFrame)
{
io.vertx.core.http.HttpClientRequest v0, v5;
io.vertx.core.buffer.Buffer v4;
io.vertx.core.http.HttpFrame v1;
int v2, v3;
v0 := @this: io.vertx.core.http.HttpClientRequest;
v1 := @parameter0: io.vertx.core.http.HttpFrame;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpFrame: int type()>();
v3 = interfaceinvoke v1.<io.vertx.core.http.HttpFrame: int flags()>();
v4 = interfaceinvoke v1.<io.vertx.core.http.HttpFrame: io.vertx.core.buffer.Buffer payload()>();
v5 = interfaceinvoke v0.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest writeCustomFrame(int,int,io.vertx.core.buffer.Buffer)>(v2, v3, v4);
return v5;
}
public io.vertx.core.http.HttpClientRequest setStreamPriority(io.vertx.core.http.StreamPriority)
{
io.vertx.core.http.HttpClientRequest v0;
io.vertx.core.http.StreamPriority v1;
v0 := @this: io.vertx.core.http.HttpClientRequest;
v1 := @parameter0: io.vertx.core.http.StreamPriority;
return v0;
}
public abstract io.vertx.core.http.StreamPriority getStreamPriority();
}