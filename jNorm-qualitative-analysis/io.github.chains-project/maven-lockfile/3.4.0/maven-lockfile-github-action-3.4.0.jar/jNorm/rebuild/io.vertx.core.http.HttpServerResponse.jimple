public interface  io.vertx.core.http.HttpServerResponse extends java.lang.Object implements io.vertx.core.streams.WriteStream
{
public abstract io.vertx.core.http.HttpServerResponse exceptionHandler(io.vertx.core.Handler);
public abstract io.vertx.core.http.HttpServerResponse setWriteQueueMaxSize(int);
public abstract io.vertx.core.http.HttpServerResponse drainHandler(io.vertx.core.Handler);
public abstract int getStatusCode();
public abstract io.vertx.core.http.HttpServerResponse setStatusCode(int);
public abstract java.lang.String getStatusMessage();
public abstract io.vertx.core.http.HttpServerResponse setStatusMessage(java.lang.String);
public abstract io.vertx.core.http.HttpServerResponse setChunked(boolean);
public abstract boolean isChunked();
public abstract io.vertx.core.MultiMap headers();
public abstract io.vertx.core.http.HttpServerResponse putHeader(java.lang.String, java.lang.String);
public abstract io.vertx.core.http.HttpServerResponse putHeader(java.lang.CharSequence, java.lang.CharSequence);
public abstract io.vertx.core.http.HttpServerResponse putHeader(java.lang.String, java.lang.Iterable);
public abstract io.vertx.core.http.HttpServerResponse putHeader(java.lang.CharSequence, java.lang.Iterable);
public abstract io.vertx.core.MultiMap trailers();
public abstract io.vertx.core.http.HttpServerResponse putTrailer(java.lang.String, java.lang.String);
public abstract io.vertx.core.http.HttpServerResponse putTrailer(java.lang.CharSequence, java.lang.CharSequence);
public abstract io.vertx.core.http.HttpServerResponse putTrailer(java.lang.String, java.lang.Iterable);
public abstract io.vertx.core.http.HttpServerResponse putTrailer(java.lang.CharSequence, java.lang.Iterable);
public abstract io.vertx.core.http.HttpServerResponse closeHandler(io.vertx.core.Handler);
public abstract io.vertx.core.http.HttpServerResponse endHandler(io.vertx.core.Handler);
public abstract io.vertx.core.Future write(java.lang.String, java.lang.String);
public abstract void write(java.lang.String, java.lang.String, io.vertx.core.Handler);
public abstract io.vertx.core.Future write(java.lang.String);
public abstract void write(java.lang.String, io.vertx.core.Handler);
public abstract io.vertx.core.http.HttpServerResponse writeContinue();
public abstract io.vertx.core.Future writeEarlyHints(io.vertx.core.MultiMap);
public abstract void writeEarlyHints(io.vertx.core.MultiMap, io.vertx.core.Handler);
public abstract io.vertx.core.Future end(java.lang.String);
public abstract void end(java.lang.String, io.vertx.core.Handler);
public abstract io.vertx.core.Future end(java.lang.String, java.lang.String);
public abstract void end(java.lang.String, java.lang.String, io.vertx.core.Handler);
public abstract io.vertx.core.Future end(io.vertx.core.buffer.Buffer);
public abstract void end(io.vertx.core.buffer.Buffer, io.vertx.core.Handler);
public abstract io.vertx.core.Future end();
public void send(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.core.Handler;
interfaceinvoke v0.<io.vertx.core.http.HttpServerResponse: void end(io.vertx.core.Handler)>(v1);
return;
}
public io.vertx.core.Future send()
{
io.vertx.core.Future v1;
io.vertx.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.core.http.HttpServerResponse;
v1 = interfaceinvoke v0.<io.vertx.core.http.HttpServerResponse: io.vertx.core.Future end()>();
return v1;
}
public void send(java.lang.String, io.vertx.core.Handler)
{
java.lang.String v1;
io.vertx.core.Handler v2;
io.vertx.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
interfaceinvoke v0.<io.vertx.core.http.HttpServerResponse: void end(java.lang.String,io.vertx.core.Handler)>(v1, v2);
return;
}
public io.vertx.core.Future send(java.lang.String)
{
java.lang.String v1;
io.vertx.core.Future v2;
io.vertx.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 = interfaceinvoke v0.<io.vertx.core.http.HttpServerResponse: io.vertx.core.Future end(java.lang.String)>(v1);
return v2;
}
public void send(io.vertx.core.buffer.Buffer, io.vertx.core.Handler)
{
io.vertx.core.Handler v2;
io.vertx.core.buffer.Buffer v1;
io.vertx.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 := @parameter1: io.vertx.core.Handler;
interfaceinvoke v0.<io.vertx.core.http.HttpServerResponse: void end(io.vertx.core.buffer.Buffer,io.vertx.core.Handler)>(v1, v2);
return;
}
public io.vertx.core.Future send(io.vertx.core.buffer.Buffer)
{
io.vertx.core.buffer.Buffer v1;
io.vertx.core.Future v2;
io.vertx.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 = interfaceinvoke v0.<io.vertx.core.http.HttpServerResponse: io.vertx.core.Future end(io.vertx.core.buffer.Buffer)>(v1);
return v2;
}
public void send(io.vertx.core.streams.ReadStream, io.vertx.core.Handler)
{
java.lang.CharSequence v4;
io.vertx.core.http.HttpServerResponse v0;
io.vertx.core.MultiMap v3;
io.vertx.core.streams.ReadStream v1;
io.vertx.core.Handler v2;
boolean v5;
v0 := @this: io.vertx.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.core.streams.ReadStream;
v2 := @parameter1: io.vertx.core.Handler;
v3 = interfaceinvoke v0.<io.vertx.core.http.HttpServerResponse: io.vertx.core.MultiMap headers()>();
if v3 == null goto label1;
v4 = <io.vertx.core.http.HttpHeaders: java.lang.CharSequence CONTENT_LENGTH>;
v5 = interfaceinvoke v3.<io.vertx.core.MultiMap: boolean contains(java.lang.CharSequence)>(v4);
if v5 != 0 goto label2;
label1:
interfaceinvoke v0.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse setChunked(boolean)>(1);
label2:
interfaceinvoke v1.<io.vertx.core.streams.ReadStream: void pipeTo(io.vertx.core.streams.WriteStream,io.vertx.core.Handler)>(v0, v2);
return;
}
public io.vertx.core.Future send(io.vertx.core.streams.ReadStream)
{
java.lang.CharSequence v3;
io.vertx.core.http.HttpServerResponse v0;
io.vertx.core.MultiMap v2;
io.vertx.core.streams.ReadStream v1;
io.vertx.core.Future v5;
boolean v4;
v0 := @this: io.vertx.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.core.streams.ReadStream;
v2 = interfaceinvoke v0.<io.vertx.core.http.HttpServerResponse: io.vertx.core.MultiMap headers()>();
if v2 == null goto label1;
v3 = <io.vertx.core.http.HttpHeaders: java.lang.CharSequence CONTENT_LENGTH>;
v4 = interfaceinvoke v2.<io.vertx.core.MultiMap: boolean contains(java.lang.CharSequence)>(v3);
if v4 != 0 goto label2;
label1:
interfaceinvoke v0.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse setChunked(boolean)>(1);
label2:
v5 = interfaceinvoke v1.<io.vertx.core.streams.ReadStream: io.vertx.core.Future pipeTo(io.vertx.core.streams.WriteStream)>(v0);
return v5;
}
public io.vertx.core.Future sendFile(java.lang.String)
{
java.lang.String v1;
io.vertx.core.Future v2;
io.vertx.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 = interfaceinvoke v0.<io.vertx.core.http.HttpServerResponse: io.vertx.core.Future sendFile(java.lang.String,long)>(v1, 0L);
return v2;
}
public io.vertx.core.Future sendFile(java.lang.String, long)
{
io.vertx.core.http.HttpServerResponse v0;
long v2;
java.lang.String v1;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
v3 = interfaceinvoke v0.<io.vertx.core.http.HttpServerResponse: io.vertx.core.Future sendFile(java.lang.String,long,long)>(v1, v2, 9223372036854775807L);
return v3;
}
public abstract io.vertx.core.Future sendFile(java.lang.String, long, long);
public io.vertx.core.http.HttpServerResponse sendFile(java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.http.HttpServerResponse v0, v3;
java.lang.String v1;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
v3 = interfaceinvoke v0.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse sendFile(java.lang.String,long,io.vertx.core.Handler)>(v1, 0L, v2);
return v3;
}
public io.vertx.core.http.HttpServerResponse sendFile(java.lang.String, long, io.vertx.core.Handler)
{
io.vertx.core.http.HttpServerResponse v0, v4;
long v2;
java.lang.String v1;
io.vertx.core.Handler v3;
v0 := @this: io.vertx.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
v3 := @parameter2: io.vertx.core.Handler;
v4 = interfaceinvoke v0.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse sendFile(java.lang.String,long,long,io.vertx.core.Handler)>(v1, v2, 9223372036854775807L, v3);
return v4;
}
public abstract io.vertx.core.http.HttpServerResponse sendFile(java.lang.String, long, long, io.vertx.core.Handler);
public abstract void close();
public abstract boolean ended();
public abstract boolean closed();
public abstract boolean headWritten();
public abstract io.vertx.core.http.HttpServerResponse headersEndHandler(io.vertx.core.Handler);
public abstract io.vertx.core.http.HttpServerResponse bodyEndHandler(io.vertx.core.Handler);
public abstract long bytesWritten();
public abstract int streamId();
public io.vertx.core.http.HttpServerResponse push(io.vertx.core.http.HttpMethod, java.lang.String, java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.http.HttpMethod v1;
io.vertx.core.http.HttpServerResponse v0, v5;
java.lang.String v2, v3;
io.vertx.core.Handler v4;
v0 := @this: io.vertx.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: io.vertx.core.Handler;
v5 = interfaceinvoke v0.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse push(io.vertx.core.http.HttpMethod,java.lang.String,java.lang.String,io.vertx.core.MultiMap,io.vertx.core.Handler)>(v1, v2, v3, null, v4);
return v5;
}
public io.vertx.core.Future push(io.vertx.core.http.HttpMethod, java.lang.String, java.lang.String)
{
io.vertx.core.http.HttpMethod v1;
io.vertx.core.http.HttpServerResponse v0;
io.vertx.core.MultiMap v4;
java.lang.String v2, v3;
io.vertx.core.Future v5;
v0 := @this: io.vertx.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = null;
v5 = interfaceinvoke v0.<io.vertx.core.http.HttpServerResponse: io.vertx.core.Future push(io.vertx.core.http.HttpMethod,java.lang.String,java.lang.String,io.vertx.core.MultiMap)>(v1, v2, v3, v4);
return v5;
}
public io.vertx.core.http.HttpServerResponse push(io.vertx.core.http.HttpMethod, java.lang.String, io.vertx.core.MultiMap, io.vertx.core.Handler)
{
io.vertx.core.http.HttpMethod v1;
io.vertx.core.http.HttpServerResponse v0, v5;
io.vertx.core.MultiMap v3;
java.lang.String v2;
io.vertx.core.Handler v4;
v0 := @this: io.vertx.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.MultiMap;
v4 := @parameter3: io.vertx.core.Handler;
v5 = interfaceinvoke v0.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse push(io.vertx.core.http.HttpMethod,java.lang.String,java.lang.String,io.vertx.core.MultiMap,io.vertx.core.Handler)>(v1, null, v2, v3, v4);
return v5;
}
public io.vertx.core.Future push(io.vertx.core.http.HttpMethod, java.lang.String, io.vertx.core.MultiMap)
{
io.vertx.core.http.HttpMethod v1;
io.vertx.core.http.HttpServerResponse v0;
io.vertx.core.MultiMap v3;
java.lang.String v2;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.MultiMap;
v4 = interfaceinvoke v0.<io.vertx.core.http.HttpServerResponse: io.vertx.core.Future push(io.vertx.core.http.HttpMethod,java.lang.String,java.lang.String,io.vertx.core.MultiMap)>(v1, null, v2, v3);
return v4;
}
public io.vertx.core.http.HttpServerResponse push(io.vertx.core.http.HttpMethod, java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.http.HttpMethod v1;
io.vertx.core.http.HttpServerResponse v0, v4;
java.lang.String v2;
io.vertx.core.Handler v3;
v0 := @this: io.vertx.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.Handler;
v4 = interfaceinvoke v0.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse push(io.vertx.core.http.HttpMethod,java.lang.String,java.lang.String,io.vertx.core.MultiMap,io.vertx.core.Handler)>(v1, null, v2, null, v3);
return v4;
}
public io.vertx.core.Future push(io.vertx.core.http.HttpMethod, java.lang.String)
{
io.vertx.core.http.HttpMethod v1;
io.vertx.core.http.HttpServerResponse v0;
java.lang.String v2;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: java.lang.String;
v3 = interfaceinvoke v0.<io.vertx.core.http.HttpServerResponse: io.vertx.core.Future push(io.vertx.core.http.HttpMethod,java.lang.String,java.lang.String)>(v1, null, v2);
return v3;
}
public io.vertx.core.http.HttpServerResponse push(io.vertx.core.http.HttpMethod, java.lang.String, java.lang.String, io.vertx.core.MultiMap, io.vertx.core.Handler)
{
io.vertx.core.http.HttpMethod v1;
io.vertx.core.http.HttpServerResponse v0;
io.vertx.core.MultiMap v4;
java.lang.String v2, v3;
io.vertx.core.Handler v5;
io.vertx.core.Future v6;
v0 := @this: io.vertx.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: io.vertx.core.MultiMap;
v5 := @parameter4: io.vertx.core.Handler;
v6 = interfaceinvoke v0.<io.vertx.core.http.HttpServerResponse: io.vertx.core.Future push(io.vertx.core.http.HttpMethod,java.lang.String,java.lang.String,io.vertx.core.MultiMap)>(v1, v2, v3, v4);
if v5 == null goto label1;
interfaceinvoke v6.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v5);
label1:
return v0;
}
public abstract io.vertx.core.Future push(io.vertx.core.http.HttpMethod, java.lang.String, java.lang.String, io.vertx.core.MultiMap);
public boolean reset()
{
io.vertx.core.http.HttpServerResponse v0;
boolean v1;
v0 := @this: io.vertx.core.http.HttpServerResponse;
v1 = interfaceinvoke v0.<io.vertx.core.http.HttpServerResponse: boolean reset(long)>(0L);
return v1;
}
public abstract boolean reset(long);
public abstract io.vertx.core.http.HttpServerResponse writeCustomFrame(int, int, io.vertx.core.buffer.Buffer);
public io.vertx.core.http.HttpServerResponse writeCustomFrame(io.vertx.core.http.HttpFrame)
{
io.vertx.core.buffer.Buffer v4;
io.vertx.core.http.HttpFrame v1;
io.vertx.core.http.HttpServerResponse v0, v5;
int v2, v3;
v0 := @this: io.vertx.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.core.http.HttpFrame;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpFrame: int type()>();
v3 = interfaceinvoke v1.<io.vertx.core.http.HttpFrame: int flags()>();
v4 = interfaceinvoke v1.<io.vertx.core.http.HttpFrame: io.vertx.core.buffer.Buffer payload()>();
v5 = interfaceinvoke v0.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.HttpServerResponse writeCustomFrame(int,int,io.vertx.core.buffer.Buffer)>(v2, v3, v4);
return v5;
}
public io.vertx.core.http.HttpServerResponse setStreamPriority(io.vertx.core.http.StreamPriority)
{
io.vertx.core.http.HttpServerResponse v0;
io.vertx.core.http.StreamPriority v1;
v0 := @this: io.vertx.core.http.HttpServerResponse;
v1 := @parameter0: io.vertx.core.http.StreamPriority;
return v0;
}
public abstract io.vertx.core.http.HttpServerResponse addCookie(io.vertx.core.http.Cookie);
public io.vertx.core.http.Cookie removeCookie(java.lang.String)
{
java.lang.String v1;
io.vertx.core.http.Cookie v2;
io.vertx.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 = interfaceinvoke v0.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.Cookie removeCookie(java.lang.String,boolean)>(v1, 1);
return v2;
}
public abstract io.vertx.core.http.Cookie removeCookie(java.lang.String, boolean);
public java.util.Set removeCookies(java.lang.String)
{
java.util.Set v2;
java.lang.String v1;
io.vertx.core.http.HttpServerResponse v0;
v0 := @this: io.vertx.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 = interfaceinvoke v0.<io.vertx.core.http.HttpServerResponse: java.util.Set removeCookies(java.lang.String,boolean)>(v1, 1);
return v2;
}
public abstract java.util.Set removeCookies(java.lang.String, boolean);
public io.vertx.core.http.Cookie removeCookie(java.lang.String, java.lang.String, java.lang.String)
{
io.vertx.core.http.HttpServerResponse v0;
java.lang.String v1, v2, v3;
io.vertx.core.http.Cookie v4;
v0 := @this: io.vertx.core.http.HttpServerResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = interfaceinvoke v0.<io.vertx.core.http.HttpServerResponse: io.vertx.core.http.Cookie removeCookie(java.lang.String,java.lang.String,java.lang.String,boolean)>(v1, v2, v3, 1);
return v4;
}
public abstract io.vertx.core.http.Cookie removeCookie(java.lang.String, java.lang.String, java.lang.String, boolean);
}