class io.vertx.core.http.impl.Http1xClientConnection$StreamImpl extends io.vertx.core.http.impl.Http1xClientConnection$Stream implements io.vertx.core.http.impl.HttpClientStream
{
private final io.vertx.core.http.impl.Http1xClientConnection conn;
private final io.vertx.core.streams.impl.InboundBuffer queue;
private boolean reset;
private boolean closed;
private io.vertx.core.http.impl.HttpRequestHead request;
private io.vertx.core.Handler headHandler;
private io.vertx.core.Handler chunkHandler;
private io.vertx.core.Handler endHandler;
private io.vertx.core.Handler drainHandler;
private io.vertx.core.Handler continueHandler;
private io.vertx.core.Handler earlyHintsHandler;
private io.vertx.core.Handler exceptionHandler;
private io.vertx.core.Handler closeHandler;
void <init>(io.vertx.core.impl.ContextInternal, io.vertx.core.http.impl.Http1xClientConnection, int)
{
io.vertx.core.streams.impl.InboundBuffer v4, v6, v8;
io.vertx.core.impl.ContextInternal v1;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
int v3;
io.vertx.core.Handler v5, v7;
io.vertx.core.http.impl.Http1xClientConnection v2;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.impl.ContextInternal;
v2 := @parameter1: io.vertx.core.http.impl.Http1xClientConnection;
v3 := @parameter2: int;
specialinvoke v0.<io.vertx.core.http.impl.Http1xClientConnection$Stream: void <init>(io.vertx.core.impl.ContextInternal,int)>(v1, v3);
v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.http.impl.Http1xClientConnection conn> = v2;
v4 = new io.vertx.core.streams.impl.InboundBuffer;
specialinvoke v4.<io.vertx.core.streams.impl.InboundBuffer: void <init>(io.vertx.core.Context,long)>(v1, 5L);
v5 = staticinvoke <io.vertx.core.http.impl.Http1xClientConnection$StreamImpl$lambda_new_0__981: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.Http1xClientConnection$StreamImpl,io.vertx.core.http.impl.Http1xClientConnection)>(v0, v2);
v6 = virtualinvoke v4.<io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer handler(io.vertx.core.Handler)>(v5);
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v7 = staticinvoke <io.vertx.core.http.impl.Http1xClientConnection$StreamImpl$reportException__982: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.ContextInternal)>(v1);
v8 = virtualinvoke v6.<io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer exceptionHandler(io.vertx.core.Handler)>(v7);
v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.streams.impl.InboundBuffer queue> = v8;
return;
}
public void continueHandler(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.Handler continueHandler> = v1;
return;
}
public void earlyHintsHandler(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.Handler earlyHintsHandler> = v1;
return;
}
public io.vertx.core.http.impl.Http1xClientConnection$StreamImpl drainHandler(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.Handler drainHandler> = v1;
return v0;
}
public io.vertx.core.http.impl.Http1xClientConnection$StreamImpl exceptionHandler(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.Handler exceptionHandler> = v1;
return v0;
}
public io.vertx.core.streams.WriteStream setWriteQueueMaxSize(int)
{
int v1;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 := @parameter0: int;
return null;
}
public boolean writeQueueFull()
{
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
return 0;
}
public void headHandler(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.Handler headHandler> = v1;
return;
}
public void closeHandler(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.Handler closeHandler> = v1;
return;
}
public void priorityHandler(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.Handler;
return;
}
public void pushHandler(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.Handler;
return;
}
public void unknownFrameHandler(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.Handler;
return;
}
public int id()
{
int v1;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: int id>;
return v1;
}
public java.lang.Object metric()
{
java.lang.Object v1;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 = specialinvoke v0.<io.vertx.core.http.impl.Http1xClientConnection$Stream: java.lang.Object metric()>();
return v1;
}
public java.lang.Object trace()
{
java.lang.Object v1;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 = specialinvoke v0.<io.vertx.core.http.impl.Http1xClientConnection$Stream: java.lang.Object trace()>();
return v1;
}
public io.vertx.core.http.HttpVersion version()
{
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
io.vertx.core.http.HttpVersion v2;
io.vertx.core.http.impl.Http1xClientConnection v1;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.http.impl.Http1xClientConnection conn>;
v2 = v1.<io.vertx.core.http.impl.Http1xClientConnection: io.vertx.core.http.HttpVersion version>;
return v2;
}
public io.vertx.core.http.impl.HttpClientConnection connection()
{
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
io.vertx.core.http.impl.Http1xClientConnection v1;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.http.impl.Http1xClientConnection conn>;
return v1;
}
public io.vertx.core.impl.ContextInternal getContext()
{
io.vertx.core.impl.ContextInternal v1;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.impl.ContextInternal context>;
return v1;
}
public void writeHead(io.vertx.core.http.impl.HttpRequestHead, boolean, io.netty.buffer.ByteBuf, boolean, io.vertx.core.http.StreamPriority, boolean, io.vertx.core.Handler)
{
io.vertx.core.impl.future.PromiseInternal v8;
io.vertx.core.http.StreamPriority v5;
io.vertx.core.impl.ContextInternal v9;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
io.vertx.core.http.impl.HttpRequestHead v1;
io.netty.buffer.ByteBuf v3;
io.vertx.core.Handler v7;
boolean v2, v4, v6;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.http.impl.HttpRequestHead;
v2 := @parameter1: boolean;
v3 := @parameter2: io.netty.buffer.ByteBuf;
v4 := @parameter3: boolean;
v5 := @parameter4: io.vertx.core.http.StreamPriority;
v6 := @parameter5: boolean;
v7 := @parameter6: io.vertx.core.Handler;
if v7 != null goto label1;
v8 = null;
goto label2;
label1:
v9 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.impl.ContextInternal context>;
v8 = interfaceinvoke v9.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise(io.vertx.core.Handler)>(v7);
label2:
specialinvoke v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: void writeHead(io.vertx.core.http.impl.HttpRequestHead,boolean,io.netty.buffer.ByteBuf,boolean,boolean,io.vertx.core.Handler)>(v1, v2, v3, v4, v6, v8);
return;
}
private void writeHead(io.vertx.core.http.impl.HttpRequestHead, boolean, io.netty.buffer.ByteBuf, boolean, boolean, io.vertx.core.Handler)
{
io.vertx.core.impl.ContextInternal v8;
io.netty.channel.EventLoop v9;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
java.lang.Runnable v12;
io.vertx.core.http.impl.HttpRequestHead v1;
io.netty.buffer.ByteBuf v3;
io.vertx.core.Handler v6;
io.vertx.core.http.impl.Http1xClientConnection v11, v7;
boolean v10, v2, v4, v5;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.http.impl.HttpRequestHead;
v2 := @parameter1: boolean;
v3 := @parameter2: io.netty.buffer.ByteBuf;
v4 := @parameter3: boolean;
v5 := @parameter4: boolean;
v6 := @parameter5: io.vertx.core.Handler;
v7 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.http.impl.Http1xClientConnection conn>;
v8 = v7.<io.vertx.core.http.impl.Http1xClientConnection: io.vertx.core.impl.ContextInternal context>;
v9 = interfaceinvoke v8.<io.vertx.core.impl.ContextInternal: io.netty.channel.EventLoop nettyEventLoop()>();
v10 = interfaceinvoke v9.<io.netty.channel.EventLoop: boolean inEventLoop()>();
if v10 == 0 goto label1;
v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.http.impl.HttpRequestHead request> = v1;
v11 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.http.impl.Http1xClientConnection conn>;
specialinvoke v11.<io.vertx.core.http.impl.Http1xClientConnection: void beginRequest(io.vertx.core.http.impl.Http1xClientConnection$Stream,io.vertx.core.http.impl.HttpRequestHead,boolean,io.netty.buffer.ByteBuf,boolean,boolean,io.vertx.core.Handler)>(v0, v1, v2, v3, v4, v5, v6);
goto label2;
label1:
v12 = staticinvoke <io.vertx.core.http.impl.Http1xClientConnection$StreamImpl$lambda_writeHead_1__983: java.lang.Runnable bootstrap$(io.vertx.core.http.impl.Http1xClientConnection$StreamImpl,io.vertx.core.http.impl.HttpRequestHead,boolean,io.netty.buffer.ByteBuf,boolean,boolean,io.vertx.core.Handler)>(v0, v1, v2, v3, v4, v5, v6);
interfaceinvoke v9.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>(v12);
label2:
return;
}
public void writeBuffer(io.netty.buffer.ByteBuf, boolean, io.vertx.core.Handler)
{
io.vertx.core.impl.future.PromiseInternal v4;
io.netty.buffer.ByteBuf v1;
io.vertx.core.impl.ContextInternal v5;
io.vertx.core.Handler v3;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
boolean v2;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 := @parameter1: boolean;
v3 := @parameter2: io.vertx.core.Handler;
if v1 != null goto label1;
if v2 == 0 goto label4;
label1:
if v3 != null goto label2;
v4 = null;
goto label3;
label2:
v5 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.impl.ContextInternal context>;
v4 = interfaceinvoke v5.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise(io.vertx.core.Handler)>(v3);
label3:
specialinvoke v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: void writeBuffer(io.netty.buffer.ByteBuf,boolean,io.netty.util.concurrent.FutureListener)>(v1, v2, v4);
label4:
return;
}
private void writeBuffer(io.netty.buffer.ByteBuf, boolean, io.netty.util.concurrent.FutureListener)
{
java.lang.Throwable v16;
io.vertx.core.impl.ContextInternal v18;
long v11, v13, v8, v9;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
java.lang.Runnable v22;
byte v14;
io.netty.buffer.ByteBuf v1;
int v4;
boolean v2, v20;
io.netty.util.concurrent.FutureListener v3, v5;
io.netty.channel.EventLoop v19;
io.vertx.core.http.impl.Http1xClientConnection v10, v12, v15, v17, v21, v6, v7;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 := @parameter1: boolean;
v3 := @parameter2: io.netty.util.concurrent.FutureListener;
if v1 == null goto label5;
v4 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
v5 = staticinvoke <io.vertx.core.http.impl.Http1xClientConnection$StreamImpl$lambda_writeBuffer_2__985: io.netty.util.concurrent.FutureListener bootstrap$(io.vertx.core.http.impl.Http1xClientConnection$StreamImpl,int,io.netty.util.concurrent.FutureListener)>(v0, v4, v3);
v6 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.http.impl.Http1xClientConnection conn>;
entermonitor v6;
label1:
v7 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.http.impl.Http1xClientConnection conn>;
v8 = v7.<io.vertx.core.http.impl.Http1xClientConnection: long writeWindow>;
v9 = v8 + v4;
v7.<io.vertx.core.http.impl.Http1xClientConnection: long writeWindow> = v9;
v10 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.http.impl.Http1xClientConnection conn>;
v11 = v10.<io.vertx.core.http.impl.Http1xClientConnection: long writeWindow>;
v12 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.http.impl.Http1xClientConnection conn>;
v13 = v12.<io.vertx.core.http.impl.Http1xClientConnection: long highWaterMark>;
v14 = v11 cmp v13;
if v14 <= 0 goto label2;
v15 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.http.impl.Http1xClientConnection conn>;
v15.<io.vertx.core.http.impl.Http1xClientConnection: boolean writeOverflow> = 1;
label2:
exitmonitor v6;
label3:
goto label6;
label4:
v16 := @caughtexception;
exitmonitor v6;
throw v16;
label5:
v5 = v3;
label6:
v17 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.http.impl.Http1xClientConnection conn>;
v18 = v17.<io.vertx.core.http.impl.Http1xClientConnection: io.vertx.core.impl.ContextInternal context>;
v19 = interfaceinvoke v18.<io.vertx.core.impl.ContextInternal: io.netty.channel.EventLoop nettyEventLoop()>();
v20 = interfaceinvoke v19.<io.netty.channel.EventLoop: boolean inEventLoop()>();
if v20 == 0 goto label7;
v21 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.http.impl.Http1xClientConnection conn>;
specialinvoke v21.<io.vertx.core.http.impl.Http1xClientConnection: void writeBuffer(io.vertx.core.http.impl.Http1xClientConnection$Stream,io.netty.buffer.ByteBuf,boolean,io.netty.util.concurrent.FutureListener)>(v0, v1, v2, v5);
goto label8;
label7:
v22 = staticinvoke <io.vertx.core.http.impl.Http1xClientConnection$StreamImpl$lambda_writeBuffer_3__984: java.lang.Runnable bootstrap$(io.vertx.core.http.impl.Http1xClientConnection$StreamImpl,io.netty.buffer.ByteBuf,boolean,io.netty.util.concurrent.FutureListener)>(v0, v1, v2, v5);
interfaceinvoke v19.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>(v22);
label8:
return;
catch java.lang.Throwable from label1 to label3 with label4;
}
public void writeFrame(int, int, io.netty.buffer.ByteBuf)
{
java.lang.IllegalStateException v4;
io.netty.buffer.ByteBuf v3;
int v1, v2;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: io.netty.buffer.ByteBuf;
v4 = new java.lang.IllegalStateException;
specialinvoke v4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot write an HTTP/2 frame over an HTTP/1.x connection");
throw v4;
}
public void doSetWriteQueueMaxSize(int)
{
int v1;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
io.vertx.core.http.impl.Http1xClientConnection v2;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 := @parameter0: int;
v2 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.http.impl.Http1xClientConnection conn>;
virtualinvoke v2.<io.vertx.core.http.impl.Http1xClientConnection: void doSetWriteQueueMaxSize(int)>(v1);
return;
}
public boolean isNotWritable()
{
java.lang.Throwable v8;
long v3, v5;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
byte v6;
io.vertx.core.http.impl.Http1xClientConnection v1, v2, v4;
boolean v7;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.http.impl.Http1xClientConnection conn>;
entermonitor v1;
label1:
v2 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.http.impl.Http1xClientConnection conn>;
v3 = v2.<io.vertx.core.http.impl.Http1xClientConnection: long writeWindow>;
v4 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.http.impl.Http1xClientConnection conn>;
v5 = v4.<io.vertx.core.http.impl.Http1xClientConnection: long highWaterMark>;
v6 = v3 cmp v5;
if v6 <= 0 goto label2;
v7 = 1;
goto label3;
label2:
v7 = 0;
label3:
exitmonitor v1;
label4:
return v7;
label5:
v8 := @caughtexception;
exitmonitor v1;
throw v8;
catch java.lang.Throwable from label1 to label4 with label5;
}
public void doPause()
{
io.vertx.core.streams.impl.InboundBuffer v1;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.streams.impl.InboundBuffer queue>;
virtualinvoke v1.<io.vertx.core.streams.impl.InboundBuffer: io.vertx.core.streams.impl.InboundBuffer pause()>();
return;
}
public void doFetch(long)
{
long v1;
io.vertx.core.streams.impl.InboundBuffer v2;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 := @parameter0: long;
v2 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.streams.impl.InboundBuffer queue>;
virtualinvoke v2.<io.vertx.core.streams.impl.InboundBuffer: boolean fetch(long)>(v1);
return;
}
public void reset(java.lang.Throwable)
{
java.lang.Throwable v1, v4;
io.vertx.core.impl.ContextInternal v6;
io.netty.channel.EventLoop v7;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
java.lang.Runnable v9;
io.vertx.core.http.impl.Http1xClientConnection v2, v5;
boolean v3, v8;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.http.impl.Http1xClientConnection conn>;
entermonitor v2;
label1:
v3 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: boolean reset>;
if v3 == 0 goto label3;
exitmonitor v2;
label2:
return;
label3:
v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: boolean reset> = 1;
exitmonitor v2;
label4:
goto label6;
label5:
v4 := @caughtexception;
exitmonitor v2;
throw v4;
label6:
v5 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.http.impl.Http1xClientConnection conn>;
v6 = v5.<io.vertx.core.http.impl.Http1xClientConnection: io.vertx.core.impl.ContextInternal context>;
v7 = interfaceinvoke v6.<io.vertx.core.impl.ContextInternal: io.netty.channel.EventLoop nettyEventLoop()>();
v8 = interfaceinvoke v7.<io.netty.channel.EventLoop: boolean inEventLoop()>();
if v8 == 0 goto label7;
specialinvoke v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: void _reset(java.lang.Throwable)>(v1);
goto label8;
label7:
v9 = staticinvoke <io.vertx.core.http.impl.Http1xClientConnection$StreamImpl$lambda_reset_4__986: java.lang.Runnable bootstrap$(io.vertx.core.http.impl.Http1xClientConnection$StreamImpl,java.lang.Throwable)>(v0, v1);
interfaceinvoke v7.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>(v9);
label8:
return;
catch java.lang.Throwable from label1 to label2 with label5;
catch java.lang.Throwable from label3 to label4 with label5;
}
private void _reset(java.lang.Throwable)
{
java.lang.Throwable v1;
io.vertx.core.impl.ContextInternal v4, v6;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
java.lang.Runnable v7;
io.vertx.core.Handler v5;
io.vertx.core.http.impl.Http1xClientConnection v2;
boolean v3;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.http.impl.Http1xClientConnection conn>;
v3 = specialinvoke v2.<io.vertx.core.http.impl.Http1xClientConnection: boolean reset(io.vertx.core.http.impl.Http1xClientConnection$Stream)>(v0);
v4 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.impl.ContextInternal context>;
v5 = staticinvoke <io.vertx.core.http.impl.Http1xClientConnection$StreamImpl$handleException__987: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.Http1xClientConnection$StreamImpl)>(v0);
interfaceinvoke v4.<io.vertx.core.impl.ContextInternal: void execute(java.lang.Object,io.vertx.core.Handler)>(v1, v5);
if v3 == 0 goto label1;
v6 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.impl.ContextInternal context>;
v7 = staticinvoke <io.vertx.core.http.impl.Http1xClientConnection$StreamImpl$handleClosed__988: java.lang.Runnable bootstrap$(io.vertx.core.http.impl.Http1xClientConnection$StreamImpl)>(v0);
interfaceinvoke v6.<io.vertx.core.impl.ContextInternal: void execute(java.lang.Runnable)>(v7);
label1:
return;
}
public io.vertx.core.http.StreamPriority priority()
{
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
return null;
}
public void updatePriority(io.vertx.core.http.StreamPriority)
{
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
io.vertx.core.http.StreamPriority v1;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.http.StreamPriority;
return;
}
void handleWritabilityChanged(boolean)
{
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
boolean v1;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 := @parameter0: boolean;
return;
}
void handleContinue()
{
io.vertx.core.Handler v1, v2;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.Handler continueHandler>;
if v1 == null goto label1;
v2 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.Handler continueHandler>;
interfaceinvoke v2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null);
label1:
return;
}
void handleEarlyHints(io.vertx.core.MultiMap)
{
io.vertx.core.MultiMap v1;
io.vertx.core.Handler v2, v3;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.MultiMap;
v2 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.Handler earlyHintsHandler>;
if v2 == null goto label1;
v3 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.Handler earlyHintsHandler>;
interfaceinvoke v3.<io.vertx.core.Handler: void handle(java.lang.Object)>(v1);
label1:
return;
}
void handleHead(io.vertx.core.http.impl.HttpResponseHead)
{
io.vertx.core.impl.ContextInternal v3;
io.vertx.core.Handler v2;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
io.vertx.core.http.impl.HttpResponseHead v1;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.http.impl.HttpResponseHead;
v2 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.Handler headHandler>;
if v2 == null goto label1;
v3 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.impl.ContextInternal context>;
interfaceinvoke v3.<io.vertx.core.impl.ContextInternal: void emit(java.lang.Object,io.vertx.core.Handler)>(v1, v2);
label1:
return;
}
public void chunkHandler(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.Handler chunkHandler> = v1;
return;
}
public void endHandler(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.Handler endHandler> = v1;
return;
}
void handleChunk(io.vertx.core.buffer.Buffer)
{
io.vertx.core.streams.impl.InboundBuffer v2;
io.vertx.core.buffer.Buffer v1;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.streams.impl.InboundBuffer queue>;
virtualinvoke v2.<io.vertx.core.streams.impl.InboundBuffer: boolean write(java.lang.Object)>(v1);
return;
}
void handleEnd(io.netty.handler.codec.http.LastHttpContent)
{
io.vertx.core.http.impl.headers.HeadersAdaptor v3;
io.netty.handler.codec.http.HttpHeaders v4;
io.vertx.core.streams.impl.InboundBuffer v2;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
io.netty.handler.codec.http.LastHttpContent v1;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 := @parameter0: io.netty.handler.codec.http.LastHttpContent;
v2 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.streams.impl.InboundBuffer queue>;
v3 = new io.vertx.core.http.impl.headers.HeadersAdaptor;
v4 = interfaceinvoke v1.<io.netty.handler.codec.http.LastHttpContent: io.netty.handler.codec.http.HttpHeaders trailingHeaders()>();
specialinvoke v3.<io.vertx.core.http.impl.headers.HeadersAdaptor: void <init>(io.netty.handler.codec.http.HttpHeaders)>(v4);
virtualinvoke v2.<io.vertx.core.streams.impl.InboundBuffer: boolean write(java.lang.Object)>(v3);
specialinvoke v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: void tryClose()>();
return;
}
void handleException(java.lang.Throwable)
{
java.lang.Throwable v1;
io.vertx.core.Handler v2, v3;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.Handler exceptionHandler>;
if v2 == null goto label1;
v3 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.Handler exceptionHandler>;
interfaceinvoke v3.<io.vertx.core.Handler: void handle(java.lang.Object)>(v1);
label1:
return;
}
void handleClosed()
{
io.vertx.core.http.HttpClosedException v1;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 = <io.vertx.core.http.impl.HttpUtils: io.vertx.core.http.HttpClosedException CONNECTION_CLOSED_EXCEPTION>;
virtualinvoke v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: void handleException(java.lang.Throwable)>(v1);
specialinvoke v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: void tryClose()>();
return;
}
private void tryClose()
{
io.vertx.core.Handler v2, v3;
io.vertx.core.http.impl.Http1xClientConnection$StreamImpl v0;
boolean v1;
v0 := @this: io.vertx.core.http.impl.Http1xClientConnection$StreamImpl;
v1 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: boolean closed>;
if v1 != 0 goto label1;
v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: boolean closed> = 1;
v2 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.Handler closeHandler>;
if v2 == null goto label1;
v3 = v0.<io.vertx.core.http.impl.Http1xClientConnection$StreamImpl: io.vertx.core.Handler closeHandler>;
interfaceinvoke v3.<io.vertx.core.Handler: void handle(java.lang.Object)>(null);
label1:
return;
}
}