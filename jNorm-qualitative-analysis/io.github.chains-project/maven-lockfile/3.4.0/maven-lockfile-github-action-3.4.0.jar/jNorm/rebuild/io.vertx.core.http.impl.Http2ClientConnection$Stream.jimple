abstract class io.vertx.core.http.impl.Http2ClientConnection$Stream extends io.vertx.core.http.impl.VertxHttp2Stream
{
private final boolean push;
private io.vertx.core.http.impl.HttpResponseHead response;
protected java.lang.Object metric;
protected java.lang.Object trace;
private boolean requestEnded;
private boolean responseEnded;
protected io.vertx.core.Handler headHandler;
protected io.vertx.core.Handler chunkHandler;
protected io.vertx.core.Handler endHandler;
protected io.vertx.core.Handler priorityHandler;
protected io.vertx.core.Handler drainHandler;
protected io.vertx.core.Handler continueHandler;
protected io.vertx.core.Handler earlyHintsHandler;
protected io.vertx.core.Handler unknownFrameHandler;
protected io.vertx.core.Handler exceptionHandler;
protected io.vertx.core.Handler pushHandler;
protected io.vertx.core.Handler closeHandler;
protected long writeWindow;
protected final long windowSize;
void <init>(io.vertx.core.http.impl.Http2ClientConnection, io.vertx.core.impl.ContextInternal, boolean)
{
io.vertx.core.http.impl.Http2ClientConnection$Stream v0;
io.vertx.core.http.impl.Http2ClientConnection v1;
int v4;
io.vertx.core.impl.ContextInternal v2;
boolean v3;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$Stream;
v1 := @parameter0: io.vertx.core.http.impl.Http2ClientConnection;
v2 := @parameter1: io.vertx.core.impl.ContextInternal;
v3 := @parameter2: boolean;
specialinvoke v0.<io.vertx.core.http.impl.VertxHttp2Stream: void <init>(io.vertx.core.http.impl.Http2ConnectionBase,io.vertx.core.impl.ContextInternal)>(v1, v2);
v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: boolean push> = v3;
v4 = virtualinvoke v1.<io.vertx.core.http.impl.Http2ClientConnection: int getWindowSize()>();
v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: long windowSize> = v4;
return;
}
void onContinue()
{
io.vertx.core.http.impl.Http2ClientConnection$Stream v0;
io.vertx.core.impl.ContextInternal v1;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$Stream;
v1 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: io.vertx.core.impl.ContextInternal context>;
v2 = staticinvoke <io.vertx.core.http.impl.Http2ClientConnection$Stream$lambda_onContinue_0__1116: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.Http2ClientConnection$Stream)>(v0);
interfaceinvoke v1.<io.vertx.core.impl.ContextInternal: void emit(java.lang.Object,io.vertx.core.Handler)>(null, v2);
return;
}
void onEarlyHints(io.vertx.core.MultiMap)
{
io.vertx.core.http.impl.Http2ClientConnection$Stream v0;
io.vertx.core.MultiMap v1;
io.vertx.core.impl.ContextInternal v2;
io.vertx.core.Handler v3;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$Stream;
v1 := @parameter0: io.vertx.core.MultiMap;
v2 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: io.vertx.core.impl.ContextInternal context>;
v3 = staticinvoke <io.vertx.core.http.impl.Http2ClientConnection$Stream$lambda_onEarlyHints_1__1117: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.Http2ClientConnection$Stream,io.vertx.core.MultiMap)>(v0, v1);
interfaceinvoke v2.<io.vertx.core.impl.ContextInternal: void emit(java.lang.Object,io.vertx.core.Handler)>(null, v3);
return;
}
abstract void handleContinue();
abstract void handleEarlyHints(io.vertx.core.MultiMap);
public java.lang.Object metric()
{
io.vertx.core.http.impl.Http2ClientConnection$Stream v0;
java.lang.Object v1;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$Stream;
v1 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: java.lang.Object metric>;
return v1;
}
public java.lang.Object trace()
{
io.vertx.core.http.impl.Http2ClientConnection$Stream v0;
java.lang.Object v1;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$Stream;
v1 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: java.lang.Object trace>;
return v1;
}
void doWriteData(io.netty.buffer.ByteBuf, boolean, io.vertx.core.Handler)
{
io.vertx.core.http.impl.Http2ClientConnection$Stream v0;
io.netty.buffer.ByteBuf v1;
io.vertx.core.Handler v3;
boolean v2;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$Stream;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 := @parameter1: boolean;
v3 := @parameter2: io.vertx.core.Handler;
specialinvoke v0.<io.vertx.core.http.impl.VertxHttp2Stream: void doWriteData(io.netty.buffer.ByteBuf,boolean,io.vertx.core.Handler)>(v1, v2, v3);
return;
}
void doWriteHeaders(io.netty.handler.codec.http2.Http2Headers, boolean, io.vertx.core.Handler)
{
io.vertx.core.http.impl.Http2ClientConnection$Stream v0;
java.lang.CharSequence v5;
io.netty.handler.codec.http2.Http2Headers v1;
java.lang.String v4;
io.vertx.core.Handler v3;
boolean v2, v6;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$Stream;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Headers;
v2 := @parameter1: boolean;
v3 := @parameter2: io.vertx.core.Handler;
v4 = "CONNECT";
v5 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Headers: java.lang.CharSequence method()>();
v6 = virtualinvoke v4.<java.lang.String: boolean contentEquals(java.lang.CharSequence)>(v5);
v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: boolean isConnect> = v6;
specialinvoke v0.<io.vertx.core.http.impl.VertxHttp2Stream: void doWriteHeaders(io.netty.handler.codec.http2.Http2Headers,boolean,io.vertx.core.Handler)>(v1, v2, v3);
return;
}
protected void doWriteReset(long)
{
io.vertx.core.http.impl.Http2ClientConnection$Stream v0;
long v1;
boolean v2, v3;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$Stream;
v1 := @parameter0: long;
v2 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: boolean requestEnded>;
if v2 == 0 goto label1;
v3 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: boolean responseEnded>;
if v3 != 0 goto label2;
label1:
specialinvoke v0.<io.vertx.core.http.impl.VertxHttp2Stream: void doWriteReset(long)>(v1);
label2:
return;
}
protected void endWritten()
{
io.vertx.core.http.impl.Http2ClientConnection$Stream v0;
io.vertx.core.spi.metrics.ClientMetrics v2, v4;
java.lang.Object v5;
long v6;
io.vertx.core.http.impl.Http2ConnectionBase v1, v3;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$Stream;
v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: boolean requestEnded> = 1;
v1 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v2 = v1.<io.vertx.core.http.impl.Http2ClientConnection: io.vertx.core.spi.metrics.ClientMetrics metrics>;
if v2 == null goto label1;
v3 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v4 = v3.<io.vertx.core.http.impl.Http2ClientConnection: io.vertx.core.spi.metrics.ClientMetrics metrics>;
v5 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: java.lang.Object metric>;
v6 = virtualinvoke v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: long bytesWritten()>();
interfaceinvoke v4.<io.vertx.core.spi.metrics.ClientMetrics: void requestEnd(java.lang.Object,long)>(v5, v6);
label1:
return;
}
void onEnd(io.vertx.core.MultiMap)
{
io.vertx.core.MultiMap v1;
io.vertx.core.http.impl.Http2ClientConnection$Stream v0;
io.vertx.core.http.impl.Http2ConnectionBase v2;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$Stream;
v1 := @parameter0: io.vertx.core.MultiMap;
v2 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
specialinvoke v2.<io.vertx.core.http.impl.Http2ClientConnection: void metricsEnd(io.vertx.core.http.impl.Http2ClientConnection$Stream)>(v0);
v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: boolean responseEnded> = 1;
specialinvoke v0.<io.vertx.core.http.impl.VertxHttp2Stream: void onEnd(io.vertx.core.MultiMap)>(v1);
return;
}
void onReset(long)
{
io.vertx.core.http.impl.Http2ClientConnection$Stream v0;
io.vertx.core.spi.metrics.ClientMetrics v3, v5;
java.lang.Object v6;
long v1;
io.vertx.core.http.impl.Http2ConnectionBase v2, v4;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$Stream;
v1 := @parameter0: long;
v2 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v3 = v2.<io.vertx.core.http.impl.Http2ClientConnection: io.vertx.core.spi.metrics.ClientMetrics metrics>;
if v3 == null goto label1;
v4 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v5 = v4.<io.vertx.core.http.impl.Http2ClientConnection: io.vertx.core.spi.metrics.ClientMetrics metrics>;
v6 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: java.lang.Object metric>;
interfaceinvoke v5.<io.vertx.core.spi.metrics.ClientMetrics: void requestReset(java.lang.Object)>(v6);
label1:
specialinvoke v0.<io.vertx.core.http.impl.VertxHttp2Stream: void onReset(long)>(v1);
return;
}
void onHeaders(io.netty.handler.codec.http2.Http2Headers, io.vertx.core.http.StreamPriority)
{
io.vertx.core.http.impl.Http2ClientConnection$Stream v0;
io.vertx.core.impl.ContextInternal v26;
io.vertx.core.http.impl.headers.HeadersMultiMap v10;
io.vertx.core.http.impl.headers.Http2HeadersAdaptor v18;
io.vertx.core.http.HttpVersion v17;
int v6;
java.lang.String v5, v8;
boolean v12;
io.vertx.core.http.impl.Http2ConnectionBase v19, v21;
java.lang.CharSequence v4;
java.util.Iterator v11;
io.vertx.core.http.StreamPriority v2;
io.netty.handler.codec.http.HttpResponseStatus v7;
java.lang.Exception v9;
io.vertx.core.http.impl.HttpResponseHead v16, v24, v27, v3;
io.netty.handler.codec.http2.Http2Headers v1;
io.vertx.core.spi.metrics.ClientMetrics v20, v22;
java.lang.Object v13, v14, v15, v23;
io.vertx.core.Handler v25, v28;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$Stream;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Headers;
v2 := @parameter1: io.vertx.core.http.StreamPriority;
if v2 == null goto label01;
virtualinvoke v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: void priority(io.vertx.core.http.StreamPriority)>(v2);
label01:
v3 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: io.vertx.core.http.impl.HttpResponseHead response>;
if v3 != null goto label11;
label02:
v4 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Headers: java.lang.CharSequence status()>();
v5 = virtualinvoke v4.<java.lang.Object: java.lang.String toString()>();
v6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v5);
v7 = staticinvoke <io.netty.handler.codec.http.HttpResponseStatus: io.netty.handler.codec.http.HttpResponseStatus valueOf(int)>(v6);
v8 = virtualinvoke v7.<io.netty.handler.codec.http.HttpResponseStatus: java.lang.String reasonPhrase()>();
label03:
goto label05;
label04:
v9 := @caughtexception;
virtualinvoke v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: void handleException(java.lang.Throwable)>(v9);
virtualinvoke v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: void writeReset(long)>(1L);
return;
label05:
if v6 != 100 goto label06;
virtualinvoke v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: void onContinue()>();
return;
label06:
if v6 != 103 goto label09;
v10 = staticinvoke <io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap httpHeaders()>();
specialinvoke v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: void removeStatusHeaders(io.netty.handler.codec.http2.Http2Headers)>(v1);
v11 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Headers: java.util.Iterator iterator()>();
label07:
v12 = interfaceinvoke v11.<java.util.Iterator: boolean hasNext()>();
if v12 == 0 goto label08;
v13 = interfaceinvoke v11.<java.util.Iterator: java.lang.Object next()>();
v14 = interfaceinvoke v13.<java.util.Map$Entry: java.lang.Object getKey()>();
v15 = interfaceinvoke v13.<java.util.Map$Entry: java.lang.Object getValue()>();
interfaceinvoke v10.<io.vertx.core.MultiMap: io.vertx.core.MultiMap add(java.lang.CharSequence,java.lang.CharSequence)>(v14, v15);
goto label07;
label08:
virtualinvoke v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: void onEarlyHints(io.vertx.core.MultiMap)>(v10);
return;
label09:
v16 = new io.vertx.core.http.impl.HttpResponseHead;
v17 = <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion HTTP_2>;
v18 = new io.vertx.core.http.impl.headers.Http2HeadersAdaptor;
specialinvoke v18.<io.vertx.core.http.impl.headers.Http2HeadersAdaptor: void <init>(io.netty.handler.codec.http2.Http2Headers)>(v1);
specialinvoke v16.<io.vertx.core.http.impl.HttpResponseHead: void <init>(io.vertx.core.http.HttpVersion,int,java.lang.String,io.vertx.core.MultiMap)>(v17, v6, v8, v18);
v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: io.vertx.core.http.impl.HttpResponseHead response> = v16;
specialinvoke v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: void removeStatusHeaders(io.netty.handler.codec.http2.Http2Headers)>(v1);
v19 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v20 = v19.<io.vertx.core.http.impl.Http2ClientConnection: io.vertx.core.spi.metrics.ClientMetrics metrics>;
if v20 == null goto label10;
v21 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v22 = v21.<io.vertx.core.http.impl.Http2ClientConnection: io.vertx.core.spi.metrics.ClientMetrics metrics>;
v23 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: java.lang.Object metric>;
v24 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: io.vertx.core.http.impl.HttpResponseHead response>;
interfaceinvoke v22.<io.vertx.core.spi.metrics.ClientMetrics: void responseBegin(java.lang.Object,java.lang.Object)>(v23, v24);
label10:
v25 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: io.vertx.core.Handler headHandler>;
if v25 == null goto label11;
v26 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: io.vertx.core.impl.ContextInternal context>;
v27 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: io.vertx.core.http.impl.HttpResponseHead response>;
v28 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: io.vertx.core.Handler headHandler>;
interfaceinvoke v26.<io.vertx.core.impl.ContextInternal: void emit(java.lang.Object,io.vertx.core.Handler)>(v27, v28);
label11:
return;
catch java.lang.Exception from label02 to label03 with label04;
}
private void removeStatusHeaders(io.netty.handler.codec.http2.Http2Headers)
{
io.vertx.core.http.impl.Http2ClientConnection$Stream v0;
io.netty.handler.codec.http2.Http2Headers v1;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$Stream;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Headers;
interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Headers: boolean remove(java.lang.Object)>(":status");
return;
}
void onClose()
{
io.vertx.core.http.impl.Http2ClientConnection$Stream v0;
io.vertx.core.impl.ContextInternal v14, v8;
boolean v11, v12, v18, v20, v3, v4;
io.vertx.core.http.impl.Http2ConnectionBase v1, v21, v5;
io.vertx.core.spi.tracing.TagExtractor v17;
io.vertx.core.spi.tracing.VertxTracer v9;
io.vertx.core.http.HttpClosedException v13, v19;
io.vertx.core.http.impl.HttpResponseHead v15;
io.vertx.core.spi.metrics.ClientMetrics v2, v6;
java.lang.Object v10, v16, v7;
io.vertx.core.Handler v22, v23;
v0 := @this: io.vertx.core.http.impl.Http2ClientConnection$Stream;
v1 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v2 = v1.<io.vertx.core.http.impl.Http2ClientConnection: io.vertx.core.spi.metrics.ClientMetrics metrics>;
if v2 == null goto label2;
v3 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: boolean requestEnded>;
if v3 == 0 goto label1;
v4 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: boolean responseEnded>;
if v4 != 0 goto label2;
label1:
v5 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
v6 = v5.<io.vertx.core.http.impl.Http2ClientConnection: io.vertx.core.spi.metrics.ClientMetrics metrics>;
v7 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: java.lang.Object metric>;
interfaceinvoke v6.<io.vertx.core.spi.metrics.ClientMetrics: void requestReset(java.lang.Object)>(v7);
label2:
v8 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: io.vertx.core.impl.ContextInternal context>;
v9 = interfaceinvoke v8.<io.vertx.core.impl.ContextInternal: io.vertx.core.spi.tracing.VertxTracer tracer()>();
if v9 == null goto label5;
v10 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: java.lang.Object trace>;
if v10 == null goto label5;
v11 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: boolean responseEnded>;
if v11 == 0 goto label3;
v12 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: boolean requestEnded>;
if v12 == 0 goto label3;
v13 = null;
goto label4;
label3:
v13 = <io.vertx.core.http.impl.HttpUtils: io.vertx.core.http.HttpClosedException STREAM_CLOSED_EXCEPTION>;
label4:
v14 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: io.vertx.core.impl.ContextInternal context>;
v15 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: io.vertx.core.http.impl.HttpResponseHead response>;
v16 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: java.lang.Object trace>;
v17 = <io.vertx.core.http.impl.HttpUtils: io.vertx.core.spi.tracing.TagExtractor CLIENT_RESPONSE_TAG_EXTRACTOR>;
interfaceinvoke v9.<io.vertx.core.spi.tracing.VertxTracer: void receiveResponse(io.vertx.core.Context,java.lang.Object,java.lang.Object,java.lang.Throwable,io.vertx.core.spi.tracing.TagExtractor)>(v14, v15, v16, v13, v17);
label5:
v18 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: boolean responseEnded>;
if v18 != 0 goto label6;
v19 = <io.vertx.core.http.impl.HttpUtils: io.vertx.core.http.HttpClosedException STREAM_CLOSED_EXCEPTION>;
virtualinvoke v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: void onException(java.lang.Throwable)>(v19);
label6:
specialinvoke v0.<io.vertx.core.http.impl.VertxHttp2Stream: void onClose()>();
v20 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: boolean push>;
if v20 != 0 goto label7;
v21 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
specialinvoke v21.<io.vertx.core.http.impl.Http2ClientConnection: void recycle()>();
label7:
v22 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: io.vertx.core.Handler closeHandler>;
if v22 == null goto label8;
v23 = v0.<io.vertx.core.http.impl.Http2ClientConnection$Stream: io.vertx.core.Handler closeHandler>;
interfaceinvoke v23.<io.vertx.core.Handler: void handle(java.lang.Object)>(null);
label8:
return;
}
}