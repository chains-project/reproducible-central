public class io.vertx.core.http.impl.HttpClientRequestImpl extends io.vertx.core.http.impl.HttpClientRequestBase implements io.vertx.core.http.HttpClientRequest
{
static final io.vertx.core.impl.logging.Logger log;
private final io.vertx.core.Promise endPromise;
private final io.vertx.core.Future endFuture;
private boolean chunked;
private io.vertx.core.Handler continueHandler;
private io.vertx.core.Handler earlyHintsHandler;
private io.vertx.core.Handler drainHandler;
private io.vertx.core.Handler exceptionHandler;
private boolean ended;
private java.lang.Throwable reset;
private int followRedirects;
private io.vertx.core.http.impl.headers.HeadersMultiMap headers;
private io.vertx.core.http.StreamPriority priority;
private boolean headWritten;
private boolean isConnect;
private java.lang.String traceOperation;
void <init>(io.vertx.core.http.impl.HttpClientImpl, io.vertx.core.http.impl.HttpClientStream, io.vertx.core.impl.future.PromiseInternal, boolean, io.vertx.core.http.HttpMethod, io.vertx.core.net.SocketAddress, java.lang.String, int, java.lang.String, java.lang.String)
{
io.vertx.core.http.impl.HttpClientImpl v1;
io.vertx.core.impl.ContextInternal v11;
int v8;
java.lang.String v10, v7, v9;
boolean v4;
io.vertx.core.net.SocketAddress v6;
io.vertx.core.impl.future.PromiseInternal v12, v3;
io.vertx.core.http.StreamPriority v15;
io.vertx.core.Promise v13;
io.vertx.core.http.impl.HttpClientStream v2;
io.vertx.core.Future v14;
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.http.HttpMethod v5;
io.vertx.core.Handler v16, v17, v18, v19;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: io.vertx.core.http.impl.HttpClientImpl;
v2 := @parameter1: io.vertx.core.http.impl.HttpClientStream;
v3 := @parameter2: io.vertx.core.impl.future.PromiseInternal;
v4 := @parameter3: boolean;
v5 := @parameter4: io.vertx.core.http.HttpMethod;
v6 := @parameter5: io.vertx.core.net.SocketAddress;
v7 := @parameter6: java.lang.String;
v8 := @parameter7: int;
v9 := @parameter8: java.lang.String;
v10 := @parameter9: java.lang.String;
specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestBase: void <init>(io.vertx.core.http.impl.HttpClientImpl,io.vertx.core.http.impl.HttpClientStream,io.vertx.core.impl.future.PromiseInternal,boolean,io.vertx.core.http.HttpMethod,io.vertx.core.net.SocketAddress,java.lang.String,int,java.lang.String)>(v1, v2, v3, v4, v5, v6, v7, v8, v9);
v0.<io.vertx.core.http.impl.HttpClientRequestImpl: boolean chunked> = 0;
v11 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.impl.ContextInternal context>;
v12 = interfaceinvoke v11.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.Promise endPromise> = v12;
v13 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.Promise endPromise>;
v14 = interfaceinvoke v13.<io.vertx.core.Promise: io.vertx.core.Future future()>();
v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.Future endFuture> = v14;
v15 = <io.vertx.core.http.impl.HttpUtils: io.vertx.core.http.StreamPriority DEFAULT_STREAM_PRIORITY>;
v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.http.StreamPriority priority> = v15;
v0.<io.vertx.core.http.impl.HttpClientRequestImpl: java.lang.String traceOperation> = v10;
v16 = staticinvoke <io.vertx.core.http.impl.HttpClientRequestImpl$handleContinue__1118: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.HttpClientRequestImpl)>(v0);
interfaceinvoke v2.<io.vertx.core.http.impl.HttpClientStream: void continueHandler(io.vertx.core.Handler)>(v16);
v17 = staticinvoke <io.vertx.core.http.impl.HttpClientRequestImpl$handleEarlyHints__1119: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.HttpClientRequestImpl)>(v0);
interfaceinvoke v2.<io.vertx.core.http.impl.HttpClientStream: void earlyHintsHandler(io.vertx.core.Handler)>(v17);
v18 = staticinvoke <io.vertx.core.http.impl.HttpClientRequestImpl$handleDrained__1120: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.HttpClientRequestImpl)>(v0);
interfaceinvoke v2.<io.vertx.core.http.impl.HttpClientStream: io.vertx.core.streams.WriteStream drainHandler(io.vertx.core.Handler)>(v18);
v19 = staticinvoke <io.vertx.core.http.impl.HttpClientRequestImpl$handleException__1121: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.HttpClientRequestImpl)>(v0);
interfaceinvoke v2.<io.vertx.core.http.impl.HttpClientStream: io.vertx.core.streams.WriteStream exceptionHandler(io.vertx.core.Handler)>(v19);
return;
}
void handleException(java.lang.Throwable)
{
io.vertx.core.impl.logging.Logger v10, v6, v8;
java.lang.Throwable v1;
io.vertx.core.Promise v2;
io.vertx.core.impl.ContextInternal v5;
io.vertx.core.http.impl.HttpClientRequestImpl v0;
java.lang.String v11, v9;
io.vertx.core.Handler v4;
boolean v3, v7;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: java.lang.Throwable;
specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestBase: void handleException(java.lang.Throwable)>(v1);
v2 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.Promise endPromise>;
v3 = interfaceinvoke v2.<io.vertx.core.Promise: boolean tryFail(java.lang.Throwable)>(v1);
if v3 == 0 goto label3;
v4 = specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.Handler exceptionHandler()>();
if v4 == null goto label1;
v5 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.impl.ContextInternal context>;
interfaceinvoke v5.<io.vertx.core.impl.ContextInternal: void emit(java.lang.Object,io.vertx.core.Handler)>(v1, v4);
goto label3;
label1:
v6 = <io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.impl.logging.Logger log>;
v7 = interfaceinvoke v6.<io.vertx.core.impl.logging.Logger: boolean isDebugEnabled()>();
if v7 == 0 goto label2;
v8 = <io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.impl.logging.Logger log>;
v9 = virtualinvoke v1.<java.lang.Throwable: java.lang.String getMessage()>();
interfaceinvoke v8.<io.vertx.core.impl.logging.Logger: void error(java.lang.Object,java.lang.Throwable)>(v9, v1);
goto label3;
label2:
v10 = <io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.impl.logging.Logger log>;
v11 = virtualinvoke v1.<java.lang.Throwable: java.lang.String getMessage()>();
interfaceinvoke v10.<io.vertx.core.impl.logging.Logger: void error(java.lang.Object)>(v11);
label3:
return;
}
public synchronized io.vertx.core.http.HttpClientRequest setFollowRedirects(boolean)
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.http.impl.HttpClientImpl v2;
int v4, v5;
io.vertx.core.http.HttpClientOptions v3;
boolean v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: boolean;
specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: void checkEnded()>();
if v1 == 0 goto label1;
v2 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.http.impl.HttpClientImpl client>;
v3 = virtualinvoke v2.<io.vertx.core.http.impl.HttpClientImpl: io.vertx.core.http.HttpClientOptions options()>();
v4 = virtualinvoke v3.<io.vertx.core.http.HttpClientOptions: int getMaxRedirects()>();
v5 = v4 - 1;
v0.<io.vertx.core.http.impl.HttpClientRequestImpl: int followRedirects> = v5;
goto label2;
label1:
v0.<io.vertx.core.http.impl.HttpClientRequestImpl: int followRedirects> = 0;
label2:
return v0;
}
public synchronized io.vertx.core.http.HttpClientRequest setMaxRedirects(int)
{
int v1;
io.vertx.core.http.impl.HttpClientRequestImpl v0;
boolean v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: int;
if v1 < 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>(v2, "Max redirects must be >= 0");
specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: void checkEnded()>();
v0.<io.vertx.core.http.impl.HttpClientRequestImpl: int followRedirects> = v1;
return v0;
}
public synchronized io.vertx.core.http.impl.HttpClientRequestImpl setChunked(boolean)
{
java.lang.IllegalStateException v3;
io.vertx.core.http.impl.HttpClientImpl v4;
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.http.HttpVersion v6, v7;
io.vertx.core.http.HttpClientOptions v5;
boolean v1, v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: boolean;
specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: void checkEnded()>();
v2 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: boolean headWritten>;
if v2 == 0 goto label1;
v3 = new java.lang.IllegalStateException;
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot set chunked after data has been written on request");
throw v3;
label1:
v4 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.http.impl.HttpClientImpl client>;
v5 = virtualinvoke v4.<io.vertx.core.http.impl.HttpClientImpl: io.vertx.core.http.HttpClientOptions options()>();
v6 = virtualinvoke v5.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpVersion getProtocolVersion()>();
v7 = <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion HTTP_1_0>;
if v6 == v7 goto label2;
v0.<io.vertx.core.http.impl.HttpClientRequestImpl: boolean chunked> = v1;
label2:
return v0;
}
public synchronized boolean isChunked()
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
boolean v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: boolean chunked>;
return v1;
}
public synchronized io.vertx.core.MultiMap headers()
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.http.impl.headers.HeadersMultiMap v1, v2, v3;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.http.impl.headers.HeadersMultiMap headers>;
if v1 != null goto label1;
v2 = staticinvoke <io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap httpHeaders()>();
v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.http.impl.headers.HeadersMultiMap headers> = v2;
label1:
v3 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.http.impl.headers.HeadersMultiMap headers>;
return v3;
}
public synchronized io.vertx.core.http.HttpClientRequest putHeader(java.lang.String, java.lang.String)
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.MultiMap v3;
java.lang.String v1, v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: void checkEnded()>();
v3 = virtualinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.MultiMap headers()>();
interfaceinvoke v3.<io.vertx.core.MultiMap: io.vertx.core.MultiMap set(java.lang.String,java.lang.String)>(v1, v2);
return v0;
}
public synchronized io.vertx.core.http.HttpClientRequest putHeader(java.lang.String, java.lang.Iterable)
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.MultiMap v3;
java.lang.String v1;
java.lang.Iterable v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Iterable;
specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: void checkEnded()>();
v3 = virtualinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.MultiMap headers()>();
interfaceinvoke v3.<io.vertx.core.MultiMap: io.vertx.core.MultiMap set(java.lang.String,java.lang.Iterable)>(v1, v2);
return v0;
}
public synchronized io.vertx.core.http.HttpClientRequest setWriteQueueMaxSize(int)
{
int v1;
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.http.impl.HttpClientStream v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: void checkEnded()>();
v2 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.http.impl.HttpClientStream stream>;
interfaceinvoke v2.<io.vertx.core.http.impl.HttpClientStream: void doSetWriteQueueMaxSize(int)>(v1);
return v0;
}
public boolean writeQueueFull()
{
java.lang.Throwable v1;
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.http.impl.HttpClientStream v2;
boolean v3;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
entermonitor v0;
label1:
specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: void checkEnded()>();
exitmonitor v0;
label2:
goto label4;
label3:
v1 := @caughtexception;
exitmonitor v0;
throw v1;
label4:
v2 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.http.impl.HttpClientStream stream>;
v3 = interfaceinvoke v2.<io.vertx.core.http.impl.HttpClientStream: boolean isNotWritable()>();
return v3;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.vertx.core.http.HttpVersion version()
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.http.impl.HttpClientStream v1;
io.vertx.core.http.HttpVersion v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.http.impl.HttpClientStream stream>;
v2 = interfaceinvoke v1.<io.vertx.core.http.impl.HttpClientStream: io.vertx.core.http.HttpVersion version()>();
return v2;
}
private synchronized io.vertx.core.Handler exceptionHandler()
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.Handler exceptionHandler>;
return v1;
}
public synchronized io.vertx.core.http.HttpClientRequest exceptionHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: io.vertx.core.Handler;
if v1 == null goto label1;
specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: void checkEnded()>();
v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.Handler exceptionHandler> = v1;
goto label2;
label1:
v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.Handler exceptionHandler> = null;
label2:
return v0;
}
public synchronized io.vertx.core.http.HttpClientRequest drainHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: io.vertx.core.Handler;
if v1 == null goto label1;
specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: void checkEnded()>();
label1:
v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.Handler drainHandler> = v1;
return v0;
}
public synchronized io.vertx.core.http.HttpClientRequest continueHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: io.vertx.core.Handler;
if v1 == null goto label1;
specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: void checkEnded()>();
label1:
v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.Handler continueHandler> = v1;
return v0;
}
public io.vertx.core.http.HttpClientRequest earlyHintsHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: io.vertx.core.Handler;
if v1 == null goto label1;
specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: void checkEnded()>();
label1:
v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.Handler earlyHintsHandler> = v1;
return v0;
}
public io.vertx.core.Future sendHead()
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.impl.future.PromiseInternal v2;
io.vertx.core.impl.ContextInternal v1;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.impl.ContextInternal context>;
v2 = interfaceinvoke v1.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
virtualinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.http.HttpClientRequest sendHead(io.vertx.core.Handler)>(v2);
v3 = interfaceinvoke v2.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v3;
}
public io.vertx.core.http.HttpClientRequest sendHead(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: io.vertx.core.Handler;
specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: void checkEnded()>();
specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: void doWrite(io.netty.buffer.ByteBuf,boolean,boolean,io.vertx.core.Handler)>(null, 0, 0, v1);
return v0;
}
public io.vertx.core.Future connect()
{
io.vertx.core.http.impl.HttpClientImpl v1;
io.vertx.core.impl.ContextInternal v4;
io.vertx.core.Future v5, v7;
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.http.HttpClientOptions v2;
io.vertx.core.Handler v6;
boolean v3;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.http.impl.HttpClientImpl client>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpClientImpl: io.vertx.core.http.HttpClientOptions options()>();
v3 = virtualinvoke v2.<io.vertx.core.http.HttpClientOptions: boolean isPipelining()>();
if v3 == 0 goto label1;
v4 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.impl.ContextInternal context>;
v5 = interfaceinvoke v4.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future failedFuture(java.lang.String)>("Cannot upgrade a pipe-lined request");
return v5;
label1:
v6 = staticinvoke <io.vertx.core.http.impl.HttpClientRequestImpl$lambda_connect_0__1122: io.vertx.core.Handler bootstrap$()>();
specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: void doWrite(io.netty.buffer.ByteBuf,boolean,boolean,io.vertx.core.Handler)>(null, 0, 1, v6);
v7 = virtualinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.Future response()>();
return v7;
}
public void connect(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.Handler v1;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: io.vertx.core.Handler;
v2 = virtualinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.Future connect()>();
if v1 == null goto label1;
interfaceinvoke v2.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v1);
label1:
return;
}
public synchronized io.vertx.core.http.HttpClientRequest putHeader(java.lang.CharSequence, java.lang.CharSequence)
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
java.lang.CharSequence v1, v2;
io.vertx.core.MultiMap v3;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence;
specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: void checkEnded()>();
v3 = virtualinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.MultiMap headers()>();
interfaceinvoke v3.<io.vertx.core.MultiMap: io.vertx.core.MultiMap set(java.lang.CharSequence,java.lang.CharSequence)>(v1, v2);
return v0;
}
public synchronized io.vertx.core.http.HttpClientRequest putHeader(java.lang.CharSequence, java.lang.Iterable)
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
java.lang.CharSequence v1;
io.vertx.core.MultiMap v3;
java.lang.Iterable v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Iterable;
specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: void checkEnded()>();
v3 = virtualinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.MultiMap headers()>();
interfaceinvoke v3.<io.vertx.core.MultiMap: io.vertx.core.MultiMap set(java.lang.CharSequence,java.lang.Iterable)>(v1, v2);
return v0;
}
boolean reset(java.lang.Throwable)
{
java.lang.Throwable v1, v2, v3;
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.http.impl.HttpClientStream v4;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: java.lang.Throwable;
entermonitor v0;
label1:
v2 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: java.lang.Throwable reset>;
if v2 == null goto label3;
exitmonitor v0;
label2:
return 0;
label3:
v0.<io.vertx.core.http.impl.HttpClientRequestImpl: java.lang.Throwable reset> = v1;
exitmonitor v0;
label4:
goto label6;
label5:
v3 := @caughtexception;
exitmonitor v0;
throw v3;
label6:
v4 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.http.impl.HttpClientStream stream>;
interfaceinvoke v4.<io.vertx.core.http.impl.HttpClientStream: void reset(java.lang.Throwable)>(v1);
return 1;
catch java.lang.Throwable from label1 to label2 with label5;
catch java.lang.Throwable from label3 to label4 with label5;
}
private void tryComplete()
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.Promise v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.Promise endPromise>;
interfaceinvoke v1.<io.vertx.core.Promise: boolean tryComplete()>();
return;
}
public synchronized io.vertx.core.http.HttpConnection connection()
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.http.impl.HttpClientStream v1;
io.vertx.core.http.impl.HttpClientConnection v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.http.impl.HttpClientStream stream>;
v2 = interfaceinvoke v1.<io.vertx.core.http.impl.HttpClientStream: io.vertx.core.http.impl.HttpClientConnection connection()>();
return v2;
}
public io.vertx.core.http.HttpClientRequest writeCustomFrame(int, int, io.vertx.core.buffer.Buffer)
{
java.lang.Throwable v4;
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.netty.buffer.ByteBuf v6;
io.vertx.core.buffer.Buffer v3;
int v1, v2;
io.vertx.core.http.impl.HttpClientStream v5;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: io.vertx.core.buffer.Buffer;
entermonitor v0;
label1:
specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: void checkEnded()>();
exitmonitor v0;
label2:
goto label4;
label3:
v4 := @caughtexception;
exitmonitor v0;
throw v4;
label4:
v5 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.http.impl.HttpClientStream stream>;
v6 = interfaceinvoke v3.<io.vertx.core.buffer.Buffer: io.netty.buffer.ByteBuf getByteBuf()>();
interfaceinvoke v5.<io.vertx.core.http.impl.HttpClientStream: void writeFrame(int,int,io.netty.buffer.ByteBuf)>(v1, v2, v6);
return v0;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void handleDrained(java.lang.Void)
{
java.lang.Throwable v5;
java.lang.Void v1;
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.impl.ContextInternal v6;
io.vertx.core.Handler v2;
io.vertx.core.Future v3;
boolean v4;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: java.lang.Void;
entermonitor v0;
label1:
v2 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.Handler drainHandler>;
if v2 == null goto label2;
v3 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.Future endFuture>;
v4 = interfaceinvoke v3.<io.vertx.core.Future: boolean isComplete()>();
if v4 == 0 goto label4;
label2:
exitmonitor v0;
label3:
return;
label4:
exitmonitor v0;
label5:
goto label7;
label6:
v5 := @caughtexception;
exitmonitor v0;
throw v5;
label7:
v6 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.impl.ContextInternal context>;
interfaceinvoke v6.<io.vertx.core.impl.ContextInternal: void dispatch(io.vertx.core.Handler)>(v2);
return;
catch java.lang.Throwable from label1 to label3 with label6;
catch java.lang.Throwable from label4 to label5 with label6;
}
private void handleNextRequest(io.vertx.core.http.HttpClientRequest, io.vertx.core.Handler, long)
{
long v3;
io.vertx.core.Future v8;
io.vertx.core.http.HttpClientRequest v1;
io.vertx.core.http.impl.HttpClientRequestImpl v0;
int v6, v7;
io.vertx.core.Handler v2, v4, v5, v9;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: io.vertx.core.http.HttpClientRequest;
v2 := @parameter1: io.vertx.core.Handler;
v3 := @parameter2: long;
interfaceinvoke v1.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest response(io.vertx.core.Handler)>(v2);
v4 = specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.Handler exceptionHandler()>();
interfaceinvoke v1.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest exceptionHandler(io.vertx.core.Handler)>(v4);
virtualinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.http.HttpClientRequest exceptionHandler(io.vertx.core.Handler)>(null);
v5 = virtualinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.Handler pushHandler()>();
interfaceinvoke v1.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest pushHandler(io.vertx.core.Handler)>(v5);
v6 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: int followRedirects>;
v7 = v6 - 1;
interfaceinvoke v1.<io.vertx.core.http.HttpClientRequest: io.vertx.core.http.HttpClientRequest setMaxRedirects(int)>(v7);
v8 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.Future endFuture>;
v9 = staticinvoke <io.vertx.core.http.impl.HttpClientRequestImpl$lambda_handleNextRequest_1__1123: io.vertx.core.Handler bootstrap$(long,io.vertx.core.http.HttpClientRequest)>(v3, v1);
interfaceinvoke v8.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v9);
return;
}
public void handleContinue(java.lang.Void)
{
java.lang.Throwable v3;
java.lang.Void v1;
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: java.lang.Void;
entermonitor v0;
label1:
v2 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.Handler continueHandler>;
exitmonitor v0;
label2:
goto label4;
label3:
v3 := @caughtexception;
exitmonitor v0;
throw v3;
label4:
if v2 == null goto label5;
interfaceinvoke v2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null);
label5:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void handleEarlyHints(io.vertx.core.MultiMap)
{
java.lang.Throwable v3;
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.MultiMap v1;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: io.vertx.core.MultiMap;
entermonitor v0;
label1:
v2 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.Handler earlyHintsHandler>;
exitmonitor v0;
label2:
goto label4;
label3:
v3 := @caughtexception;
exitmonitor v0;
throw v3;
label4:
if v2 == null goto label5;
interfaceinvoke v2.<io.vertx.core.Handler: void handle(java.lang.Object)>(v1);
label5:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
void handleResponse(io.vertx.core.Promise, io.vertx.core.http.HttpClientResponse, long)
{
java.lang.Throwable v4;
io.vertx.core.http.impl.HttpClientImpl v7;
io.vertx.core.Promise v1;
long v3;
io.vertx.core.Future v10, v13;
java.util.function.Function v11, v12, v8;
io.vertx.core.http.HttpClientResponse v2;
io.vertx.core.http.impl.HttpClientRequestImpl v0;
int v5, v6;
java.lang.Object v9;
io.vertx.core.Handler v14;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: io.vertx.core.Promise;
v2 := @parameter1: io.vertx.core.http.HttpClientResponse;
v3 := @parameter2: long;
v4 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: java.lang.Throwable reset>;
if v4 == null goto label1;
return;
label1:
v5 = interfaceinvoke v2.<io.vertx.core.http.HttpClientResponse: int statusCode()>();
v6 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: int followRedirects>;
if v6 <= 0 goto label2;
if v5 < 300 goto label2;
if v5 >= 400 goto label2;
v7 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.http.impl.HttpClientImpl client>;
v8 = virtualinvoke v7.<io.vertx.core.http.impl.HttpClientImpl: java.util.function.Function redirectHandler()>();
v9 = interfaceinvoke v8.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v2);
if v9 == null goto label2;
v10 = interfaceinvoke v2.<io.vertx.core.http.HttpClientResponse: io.vertx.core.Future end()>();
v11 = staticinvoke <io.vertx.core.http.impl.HttpClientRequestImpl$lambda_handleResponse_2__1124: java.util.function.Function bootstrap$(io.vertx.core.Future)>(v9);
v12 = staticinvoke <io.vertx.core.http.impl.HttpClientRequestImpl$lambda_handleResponse_3__1125: java.util.function.Function bootstrap$(io.vertx.core.Future)>(v9);
v13 = interfaceinvoke v10.<io.vertx.core.Future: io.vertx.core.Future compose(java.util.function.Function,java.util.function.Function)>(v11, v12);
v14 = staticinvoke <io.vertx.core.http.impl.HttpClientRequestImpl$lambda_handleResponse_5__1126: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.HttpClientRequestImpl,io.vertx.core.Promise,long)>(v0, v1, v3);
interfaceinvoke v13.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v14);
return;
label2:
interfaceinvoke v1.<io.vertx.core.Promise: void complete(java.lang.Object)>(v2);
return;
}
public io.vertx.core.Future end(java.lang.String)
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.impl.future.PromiseInternal v3;
io.vertx.core.impl.ContextInternal v2;
java.lang.String v1;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.impl.ContextInternal context>;
v3 = interfaceinvoke v2.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
virtualinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: void end(java.lang.String,io.vertx.core.Handler)>(v1, v3);
v4 = interfaceinvoke v3.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v4;
}
public void end(java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.buffer.Buffer v3;
java.lang.String v1;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
v3 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(java.lang.String)>(v1);
virtualinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: void end(io.vertx.core.buffer.Buffer,io.vertx.core.Handler)>(v3, v2);
return;
}
public io.vertx.core.Future end(java.lang.String, java.lang.String)
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.impl.future.PromiseInternal v4;
io.vertx.core.impl.ContextInternal v3;
java.lang.String v1, v2;
io.vertx.core.Future v5;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.impl.ContextInternal context>;
v4 = interfaceinvoke v3.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
virtualinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: void end(java.lang.String,java.lang.String,io.vertx.core.Handler)>(v1, v2, v4);
v5 = interfaceinvoke v4.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v5;
}
public void end(java.lang.String, java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.buffer.Buffer v4;
java.lang.String v1, v2;
io.vertx.core.Handler v3;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.Handler;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v2, "no null encoding accepted");
v4 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(java.lang.String,java.lang.String)>(v1, v2);
virtualinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: void end(io.vertx.core.buffer.Buffer,io.vertx.core.Handler)>(v4, v3);
return;
}
public io.vertx.core.Future end(io.vertx.core.buffer.Buffer)
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.impl.future.PromiseInternal v3;
io.netty.buffer.ByteBuf v4;
io.vertx.core.buffer.Buffer v1;
io.vertx.core.impl.ContextInternal v2;
io.vertx.core.Future v5;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.impl.ContextInternal context>;
v3 = interfaceinvoke v2.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
v4 = interfaceinvoke v1.<io.vertx.core.buffer.Buffer: io.netty.buffer.ByteBuf getByteBuf()>();
specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: void write(io.netty.buffer.ByteBuf,boolean,io.vertx.core.Handler)>(v4, 1, v3);
v5 = interfaceinvoke v3.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v5;
}
public void end(io.vertx.core.buffer.Buffer, io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.netty.buffer.ByteBuf v3;
io.vertx.core.buffer.Buffer v1;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 := @parameter1: io.vertx.core.Handler;
v3 = interfaceinvoke v1.<io.vertx.core.buffer.Buffer: io.netty.buffer.ByteBuf getByteBuf()>();
specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: void write(io.netty.buffer.ByteBuf,boolean,io.vertx.core.Handler)>(v3, 1, v2);
return;
}
public io.vertx.core.Future end()
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.impl.future.PromiseInternal v2;
io.vertx.core.impl.ContextInternal v1;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.impl.ContextInternal context>;
v2 = interfaceinvoke v1.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
virtualinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: void end(io.vertx.core.Handler)>(v2);
v3 = interfaceinvoke v2.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v3;
}
public void end(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: io.vertx.core.Handler;
specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: void write(io.netty.buffer.ByteBuf,boolean,io.vertx.core.Handler)>(null, 1, v1);
return;
}
public io.vertx.core.Future write(io.vertx.core.buffer.Buffer)
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.impl.future.PromiseInternal v3;
io.vertx.core.buffer.Buffer v1;
io.vertx.core.impl.ContextInternal v2;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.impl.ContextInternal context>;
v3 = interfaceinvoke v2.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
virtualinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: void write(io.vertx.core.buffer.Buffer,io.vertx.core.Handler)>(v1, v3);
v4 = interfaceinvoke v3.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v4;
}
public void write(io.vertx.core.buffer.Buffer, io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.netty.buffer.ByteBuf v3;
io.vertx.core.buffer.Buffer v1;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 := @parameter1: io.vertx.core.Handler;
v3 = interfaceinvoke v1.<io.vertx.core.buffer.Buffer: io.netty.buffer.ByteBuf getByteBuf()>();
specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: void write(io.netty.buffer.ByteBuf,boolean,io.vertx.core.Handler)>(v3, 0, v2);
return;
}
public io.vertx.core.Future write(java.lang.String)
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.impl.future.PromiseInternal v3;
io.vertx.core.impl.ContextInternal v2;
java.lang.String v1;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.impl.ContextInternal context>;
v3 = interfaceinvoke v2.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
virtualinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: void write(java.lang.String,io.vertx.core.Handler)>(v1, v3);
v4 = interfaceinvoke v3.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v4;
}
public void write(java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.netty.buffer.ByteBuf v4;
io.vertx.core.buffer.Buffer v3;
java.lang.String v1;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
v3 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(java.lang.String)>(v1);
v4 = interfaceinvoke v3.<io.vertx.core.buffer.Buffer: io.netty.buffer.ByteBuf getByteBuf()>();
specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: void write(io.netty.buffer.ByteBuf,boolean,io.vertx.core.Handler)>(v4, 0, v2);
return;
}
public io.vertx.core.Future write(java.lang.String, java.lang.String)
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.impl.future.PromiseInternal v4;
io.vertx.core.impl.ContextInternal v3;
java.lang.String v1, v2;
io.vertx.core.Future v5;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.impl.ContextInternal context>;
v4 = interfaceinvoke v3.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
virtualinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: void write(java.lang.String,java.lang.String,io.vertx.core.Handler)>(v1, v2, v4);
v5 = interfaceinvoke v4.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v5;
}
public void write(java.lang.String, java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.netty.buffer.ByteBuf v5;
io.vertx.core.buffer.Buffer v4;
java.lang.String v1, v2;
io.vertx.core.Handler v3;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.Handler;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v2, "no null encoding accepted");
v4 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(java.lang.String,java.lang.String)>(v1, v2);
v5 = interfaceinvoke v4.<io.vertx.core.buffer.Buffer: io.netty.buffer.ByteBuf getByteBuf()>();
specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: void write(io.netty.buffer.ByteBuf,boolean,io.vertx.core.Handler)>(v5, 0, v3);
return;
}
private boolean requiresContentLength()
{
java.lang.CharSequence v4;
io.vertx.core.http.impl.headers.HeadersMultiMap v2, v3;
io.vertx.core.http.impl.HttpClientRequestImpl v0;
boolean v1, v5, v6, v7;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: boolean chunked>;
if v1 != 0 goto label2;
v2 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.http.impl.headers.HeadersMultiMap headers>;
if v2 == null goto label1;
v3 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.http.impl.headers.HeadersMultiMap headers>;
v4 = <io.vertx.core.http.HttpHeaders: java.lang.CharSequence CONTENT_LENGTH>;
v5 = virtualinvoke v3.<io.vertx.core.http.impl.headers.HeadersMultiMap: boolean contains(java.lang.CharSequence)>(v4);
if v5 != 0 goto label2;
label1:
v6 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: boolean isConnect>;
if v6 != 0 goto label2;
v7 = 1;
goto label3;
label2:
v7 = 0;
label3:
return v7;
}
private void write(io.netty.buffer.ByteBuf, boolean, io.vertx.core.Handler)
{
java.lang.IllegalStateException v10;
java.lang.CharSequence v6;
io.vertx.core.MultiMap v5;
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.netty.buffer.ByteBuf v1;
int v7;
java.lang.String v8;
io.vertx.core.Handler v3;
boolean v2, v4, v9;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 := @parameter1: boolean;
v3 := @parameter2: io.vertx.core.Handler;
if v2 == 0 goto label1;
if v1 == null goto label2;
v4 = specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: boolean requiresContentLength()>();
if v4 == 0 goto label2;
v5 = virtualinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.MultiMap headers()>();
v6 = <io.vertx.core.http.HttpHeaders: java.lang.CharSequence CONTENT_LENGTH>;
v7 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
v8 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(v7);
interfaceinvoke v5.<io.vertx.core.MultiMap: io.vertx.core.MultiMap set(java.lang.CharSequence,java.lang.CharSequence)>(v6, v8);
goto label2;
label1:
v9 = specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: boolean requiresContentLength()>();
if v9 == 0 goto label2;
v10 = new java.lang.IllegalStateException;
specialinvoke v10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("You must set the Content-Length header to be the total size of the message body BEFORE sending any data if you are not using HTTP chunked encoding.");
throw v10;
label2:
specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: void doWrite(io.netty.buffer.ByteBuf,boolean,boolean,io.vertx.core.Handler)>(v1, v2, 0, v3);
return;
}
private void doWrite(io.netty.buffer.ByteBuf, boolean, boolean, io.vertx.core.Handler)
{
java.lang.Throwable v13;
java.lang.IllegalStateException v6;
io.vertx.core.http.impl.headers.HeadersMultiMap v18;
io.netty.buffer.ByteBuf v1;
java.lang.String v15, v19, v20, v21;
boolean v10, v11, v12, v16, v2, v23, v3, v5, v8, v9;
io.vertx.core.http.StreamPriority v24;
io.vertx.core.http.impl.HttpClientStream v22, v26;
java.lang.IllegalArgumentException v25;
io.vertx.core.Future v7;
io.vertx.core.http.impl.HttpRequestHead v17;
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.http.HttpMethod v14;
io.vertx.core.Handler v4;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 := @parameter1: boolean;
v3 := @parameter2: boolean;
v4 := @parameter3: io.vertx.core.Handler;
entermonitor v0;
label01:
v5 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: boolean ended>;
if v5 == 0 goto label03;
v6 = new java.lang.IllegalStateException;
specialinvoke v6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Request already complete");
v7 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.Throwable)>(v6);
interfaceinvoke v4.<io.vertx.core.Handler: void handle(java.lang.Object)>(v7);
exitmonitor v0;
label02:
return;
label03:
specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: void checkResponseHandler()>();
v8 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: boolean headWritten>;
if v8 != 0 goto label04;
v0.<io.vertx.core.http.impl.HttpClientRequestImpl: boolean headWritten> = 1;
v0.<io.vertx.core.http.impl.HttpClientRequestImpl: boolean isConnect> = v3;
v9 = 1;
goto label05;
label04:
v9 = 0;
label05:
v10 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: boolean isConnect>;
if v10 != 0 goto label06;
if v2 == 0 goto label06;
v11 = 1;
goto label07;
label06:
v11 = 0;
label07:
v12 = v11;
v0.<io.vertx.core.http.impl.HttpClientRequestImpl: boolean ended> = v2;
exitmonitor v0;
label08:
goto label10;
label09:
v13 := @caughtexception;
exitmonitor v0;
throw v13;
label10:
if v9 == 0 goto label12;
v14 = virtualinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.http.HttpMethod getMethod()>();
v15 = virtualinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: java.lang.String getURI()>();
v16 = virtualinvoke v15.<java.lang.String: boolean isEmpty()>();
if v16 == 0 goto label11;
v15 = "/";
label11:
v17 = new io.vertx.core.http.impl.HttpRequestHead;
v18 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.http.impl.headers.HeadersMultiMap headers>;
v19 = virtualinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: java.lang.String authority()>();
v20 = virtualinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: java.lang.String absoluteURI()>();
v21 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: java.lang.String traceOperation>;
specialinvoke v17.<io.vertx.core.http.impl.HttpRequestHead: void <init>(io.vertx.core.http.HttpMethod,java.lang.String,io.vertx.core.MultiMap,java.lang.String,java.lang.String,java.lang.String)>(v14, v15, v18, v19, v20, v21);
v22 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.http.impl.HttpClientStream stream>;
v23 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: boolean chunked>;
v24 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.http.StreamPriority priority>;
interfaceinvoke v22.<io.vertx.core.http.impl.HttpClientStream: void writeHead(io.vertx.core.http.impl.HttpRequestHead,boolean,io.netty.buffer.ByteBuf,boolean,io.vertx.core.http.StreamPriority,boolean,io.vertx.core.Handler)>(v17, v23, v1, v12, v24, v3, v4);
goto label14;
label12:
if v1 != null goto label13;
if v2 != 0 goto label13;
v25 = new java.lang.IllegalArgumentException;
specialinvoke v25.<java.lang.IllegalArgumentException: void <init>()>();
throw v25;
label13:
v26 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.http.impl.HttpClientStream stream>;
interfaceinvoke v26.<io.vertx.core.http.impl.HttpClientStream: void writeBuffer(io.netty.buffer.ByteBuf,boolean,io.vertx.core.Handler)>(v1, v12, v4);
label14:
if v2 == 0 goto label15;
specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestImpl: void tryComplete()>();
label15:
return;
catch java.lang.Throwable from label01 to label02 with label09;
catch java.lang.Throwable from label03 to label08 with label09;
}
private void checkEnded()
{
java.lang.IllegalStateException v2;
io.vertx.core.http.impl.HttpClientRequestImpl v0;
boolean v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: boolean ended>;
if v1 == 0 goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Request already complete");
throw v2;
label1:
return;
}
private void checkResponseHandler()
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
return;
}
public synchronized io.vertx.core.http.HttpClientRequest setStreamPriority(io.vertx.core.http.StreamPriority)
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.http.StreamPriority v1;
io.vertx.core.http.impl.HttpClientStream v3;
boolean v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 := @parameter0: io.vertx.core.http.StreamPriority;
v2 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: boolean headWritten>;
if v2 == 0 goto label1;
v3 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.http.impl.HttpClientStream stream>;
interfaceinvoke v3.<io.vertx.core.http.impl.HttpClientStream: void updatePriority(io.vertx.core.http.StreamPriority)>(v1);
goto label2;
label1:
v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.http.StreamPriority priority> = v1;
label2:
return v0;
}
public synchronized io.vertx.core.http.StreamPriority getStreamPriority()
{
io.vertx.core.http.impl.HttpClientRequestImpl v0;
io.vertx.core.http.impl.HttpClientStream v1;
io.vertx.core.http.StreamPriority v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestImpl;
v1 = v0.<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.http.impl.HttpClientStream stream>;
v2 = interfaceinvoke v1.<io.vertx.core.http.impl.HttpClientStream: io.vertx.core.http.StreamPriority priority()>();
return v2;
}
static void <clinit>()
{
io.vertx.core.impl.logging.Logger v0;
v0 = staticinvoke <io.vertx.core.impl.logging.LoggerFactory: io.vertx.core.impl.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/http/impl/HttpClientRequestImpl;");
<io.vertx.core.http.impl.HttpClientRequestImpl: io.vertx.core.impl.logging.Logger log> = v0;
return;
}
}