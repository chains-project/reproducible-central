public class io.vertx.core.http.impl.HttpClientResponseImpl extends java.lang.Object implements io.vertx.core.http.HttpClientResponse
{
private static final io.vertx.core.impl.logging.Logger log;
private final io.vertx.core.http.HttpVersion version;
private final int statusCode;
private final java.lang.String statusMessage;
private final io.vertx.core.http.impl.HttpClientRequestBase request;
private final io.vertx.core.http.HttpConnection conn;
private final io.vertx.core.http.impl.HttpClientStream stream;
private io.vertx.core.http.impl.HttpEventHandler eventHandler;
private io.vertx.core.Handler customFrameHandler;
private io.vertx.core.Handler priorityHandler;
private io.vertx.core.MultiMap headers;
private io.vertx.core.MultiMap trailers;
private java.util.List cookies;
private io.vertx.core.net.NetSocket netSocket;
void <init>(io.vertx.core.http.impl.HttpClientRequestBase, io.vertx.core.http.HttpVersion, io.vertx.core.http.impl.HttpClientStream, int, java.lang.String, io.vertx.core.MultiMap)
{
io.vertx.core.http.impl.HttpClientRequestBase v1;
io.vertx.core.MultiMap v6;
io.vertx.core.http.impl.HttpClientResponseImpl v0;
io.vertx.core.http.impl.HttpClientStream v3;
io.vertx.core.http.impl.HttpClientConnection v7;
io.vertx.core.http.HttpVersion v2;
int v4;
java.lang.String v5;
v0 := @this: io.vertx.core.http.impl.HttpClientResponseImpl;
v1 := @parameter0: io.vertx.core.http.impl.HttpClientRequestBase;
v2 := @parameter1: io.vertx.core.http.HttpVersion;
v3 := @parameter2: io.vertx.core.http.impl.HttpClientStream;
v4 := @parameter3: int;
v5 := @parameter4: java.lang.String;
v6 := @parameter5: io.vertx.core.MultiMap;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.HttpVersion version> = v2;
v0.<io.vertx.core.http.impl.HttpClientResponseImpl: int statusCode> = v4;
v0.<io.vertx.core.http.impl.HttpClientResponseImpl: java.lang.String statusMessage> = v5;
v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.impl.HttpClientRequestBase request> = v1;
v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.impl.HttpClientStream stream> = v3;
v7 = interfaceinvoke v3.<io.vertx.core.http.impl.HttpClientStream: io.vertx.core.http.impl.HttpClientConnection connection()>();
v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.HttpConnection conn> = v7;
v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.MultiMap headers> = v6;
return;
}
private io.vertx.core.http.impl.HttpEventHandler eventHandler(boolean)
{
io.vertx.core.http.impl.HttpClientRequestBase v4;
io.vertx.core.http.impl.HttpEventHandler v2, v3, v6;
io.vertx.core.impl.ContextInternal v5;
io.vertx.core.http.impl.HttpClientResponseImpl v0;
boolean v1;
v0 := @this: io.vertx.core.http.impl.HttpClientResponseImpl;
v1 := @parameter0: boolean;
v2 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.impl.HttpEventHandler eventHandler>;
if v2 != null goto label1;
if v1 == 0 goto label1;
v3 = new io.vertx.core.http.impl.HttpEventHandler;
v4 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.impl.HttpClientRequestBase request>;
v5 = v4.<io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.impl.ContextInternal context>;
specialinvoke v3.<io.vertx.core.http.impl.HttpEventHandler: void <init>(io.vertx.core.impl.ContextInternal)>(v5);
v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.impl.HttpEventHandler eventHandler> = v3;
label1:
v6 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.impl.HttpEventHandler eventHandler>;
return v6;
}
public io.vertx.core.http.impl.HttpClientRequestBase request()
{
io.vertx.core.http.impl.HttpClientRequestBase v1;
io.vertx.core.http.impl.HttpClientResponseImpl v0;
v0 := @this: io.vertx.core.http.impl.HttpClientResponseImpl;
v1 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.impl.HttpClientRequestBase request>;
return v1;
}
public io.vertx.core.net.NetSocket netSocket()
{
io.vertx.core.http.impl.HttpClientRequestBase v3;
io.vertx.core.impl.ContextInternal v4;
io.vertx.core.http.impl.HttpClientResponseImpl v0;
io.vertx.core.http.impl.HttpClientStream v5;
io.vertx.core.http.impl.HttpNetSocket v6;
io.vertx.core.http.HttpConnection v2;
io.vertx.core.net.NetSocket v1, v7;
v0 := @this: io.vertx.core.http.impl.HttpClientResponseImpl;
v1 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.net.NetSocket netSocket>;
if v1 != null goto label1;
v2 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.HttpConnection conn>;
v3 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.impl.HttpClientRequestBase request>;
v4 = v3.<io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.impl.ContextInternal context>;
v5 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.impl.HttpClientStream stream>;
v6 = staticinvoke <io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.http.impl.HttpNetSocket netSocket(io.vertx.core.net.impl.ConnectionBase,io.vertx.core.impl.ContextInternal,io.vertx.core.streams.ReadStream,io.vertx.core.streams.WriteStream)>(v2, v4, v0, v5);
v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.net.NetSocket netSocket> = v6;
label1:
v7 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.net.NetSocket netSocket>;
return v7;
}
public io.vertx.core.http.HttpVersion version()
{
io.vertx.core.http.impl.HttpClientResponseImpl v0;
io.vertx.core.http.HttpVersion v1;
v0 := @this: io.vertx.core.http.impl.HttpClientResponseImpl;
v1 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.HttpVersion version>;
return v1;
}
public int statusCode()
{
int v1;
io.vertx.core.http.impl.HttpClientResponseImpl v0;
v0 := @this: io.vertx.core.http.impl.HttpClientResponseImpl;
v1 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: int statusCode>;
return v1;
}
public java.lang.String statusMessage()
{
io.vertx.core.http.impl.HttpClientResponseImpl v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.impl.HttpClientResponseImpl;
v1 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: java.lang.String statusMessage>;
return v1;
}
public io.vertx.core.MultiMap headers()
{
io.vertx.core.MultiMap v1;
io.vertx.core.http.impl.HttpClientResponseImpl v0;
v0 := @this: io.vertx.core.http.impl.HttpClientResponseImpl;
v1 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.MultiMap headers>;
return v1;
}
public java.lang.String getHeader(java.lang.String)
{
io.vertx.core.MultiMap v2;
io.vertx.core.http.impl.HttpClientResponseImpl v0;
java.lang.String v1, v3;
v0 := @this: io.vertx.core.http.impl.HttpClientResponseImpl;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.MultiMap headers>;
v3 = interfaceinvoke v2.<io.vertx.core.MultiMap: java.lang.String get(java.lang.String)>(v1);
return v3;
}
public java.lang.String getHeader(java.lang.CharSequence)
{
java.lang.CharSequence v1;
io.vertx.core.MultiMap v2;
io.vertx.core.http.impl.HttpClientResponseImpl v0;
java.lang.String v3;
v0 := @this: io.vertx.core.http.impl.HttpClientResponseImpl;
v1 := @parameter0: java.lang.CharSequence;
v2 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.MultiMap headers>;
v3 = interfaceinvoke v2.<io.vertx.core.MultiMap: java.lang.String get(java.lang.CharSequence)>(v1);
return v3;
}
public io.vertx.core.MultiMap trailers()
{
java.lang.Throwable v6;
io.vertx.core.http.impl.headers.HeadersAdaptor v3;
io.netty.handler.codec.http.DefaultHttpHeaders v4;
io.vertx.core.MultiMap v2, v5;
io.vertx.core.http.impl.HttpClientResponseImpl v0;
io.vertx.core.http.HttpConnection v1;
v0 := @this: io.vertx.core.http.impl.HttpClientResponseImpl;
v1 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.HttpConnection conn>;
entermonitor v1;
label1:
v2 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.MultiMap trailers>;
if v2 != null goto label2;
v3 = new io.vertx.core.http.impl.headers.HeadersAdaptor;
v4 = new io.netty.handler.codec.http.DefaultHttpHeaders;
specialinvoke v4.<io.netty.handler.codec.http.DefaultHttpHeaders: void <init>()>();
specialinvoke v3.<io.vertx.core.http.impl.headers.HeadersAdaptor: void <init>(io.netty.handler.codec.http.HttpHeaders)>(v4);
v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.MultiMap trailers> = v3;
label2:
v5 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.MultiMap trailers>;
exitmonitor v1;
label3:
return v5;
label4:
v6 := @caughtexception;
exitmonitor v1;
throw v6;
catch java.lang.Throwable from label1 to label3 with label4;
}
public java.lang.String getTrailer(java.lang.String)
{
io.vertx.core.MultiMap v2, v3;
io.vertx.core.http.impl.HttpClientResponseImpl v0;
java.lang.String v1, v4;
v0 := @this: io.vertx.core.http.impl.HttpClientResponseImpl;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.MultiMap trailers>;
if v2 == null goto label1;
v3 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.MultiMap trailers>;
v4 = interfaceinvoke v3.<io.vertx.core.MultiMap: java.lang.String get(java.lang.String)>(v1);
goto label2;
label1:
v4 = null;
label2:
return v4;
}
public java.util.List cookies()
{
java.lang.Throwable v14;
java.lang.CharSequence v11, v6;
io.vertx.core.MultiMap v10, v5, v8;
io.vertx.core.http.impl.HttpClientResponseImpl v0;
java.util.ArrayList v3;
java.util.List v12, v13, v2, v4, v7, v9;
io.vertx.core.http.HttpConnection v1;
v0 := @this: io.vertx.core.http.impl.HttpClientResponseImpl;
v1 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.HttpConnection conn>;
entermonitor v1;
label1:
v2 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: java.util.List cookies>;
if v2 != null goto label2;
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
v0.<io.vertx.core.http.impl.HttpClientResponseImpl: java.util.List cookies> = v3;
v4 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: java.util.List cookies>;
v5 = virtualinvoke v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.MultiMap headers()>();
v6 = <io.vertx.core.http.HttpHeaders: java.lang.CharSequence SET_COOKIE>;
v7 = interfaceinvoke v5.<io.vertx.core.MultiMap: java.util.List getAll(java.lang.CharSequence)>(v6);
interfaceinvoke v4.<java.util.List: boolean addAll(java.util.Collection)>(v7);
v8 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.MultiMap trailers>;
if v8 == null goto label2;
v9 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: java.util.List cookies>;
v10 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.MultiMap trailers>;
v11 = <io.vertx.core.http.HttpHeaders: java.lang.CharSequence SET_COOKIE>;
v12 = interfaceinvoke v10.<io.vertx.core.MultiMap: java.util.List getAll(java.lang.CharSequence)>(v11);
interfaceinvoke v9.<java.util.List: boolean addAll(java.util.Collection)>(v12);
label2:
v13 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: java.util.List cookies>;
exitmonitor v1;
label3:
return v13;
label4:
v14 := @caughtexception;
exitmonitor v1;
throw v14;
catch java.lang.Throwable from label1 to label3 with label4;
}
private void checkEnded()
{
io.vertx.core.MultiMap v1;
java.lang.IllegalStateException v2;
io.vertx.core.http.impl.HttpClientResponseImpl v0;
v0 := @this: io.vertx.core.http.impl.HttpClientResponseImpl;
v1 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.MultiMap trailers>;
if v1 == null goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>()>();
throw v2;
label1:
return;
}
public io.vertx.core.http.HttpClientResponse handler(io.vertx.core.Handler)
{
java.lang.Throwable v5;
io.vertx.core.http.impl.HttpEventHandler v4;
io.vertx.core.http.impl.HttpClientResponseImpl v0;
io.vertx.core.http.HttpConnection v2;
io.vertx.core.Handler v1;
boolean v3;
v0 := @this: io.vertx.core.http.impl.HttpClientResponseImpl;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.HttpConnection conn>;
entermonitor v2;
label1:
if v1 == null goto label2;
specialinvoke v0.<io.vertx.core.http.impl.HttpClientResponseImpl: void checkEnded()>();
if v1 == null goto label2;
v3 = 1;
goto label3;
label2:
v3 = 0;
label3:
v4 = specialinvoke v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.impl.HttpEventHandler eventHandler(boolean)>(v3);
if v4 == null goto label4;
virtualinvoke v4.<io.vertx.core.http.impl.HttpEventHandler: void chunkHandler(io.vertx.core.Handler)>(v1);
label4:
exitmonitor v2;
label5:
return v0;
label6:
v5 := @caughtexception;
exitmonitor v2;
throw v5;
catch java.lang.Throwable from label1 to label5 with label6;
}
public io.vertx.core.http.HttpClientResponse endHandler(io.vertx.core.Handler)
{
java.lang.Throwable v5;
io.vertx.core.http.impl.HttpEventHandler v4;
io.vertx.core.http.impl.HttpClientResponseImpl v0;
io.vertx.core.http.HttpConnection v2;
io.vertx.core.Handler v1;
boolean v3;
v0 := @this: io.vertx.core.http.impl.HttpClientResponseImpl;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.HttpConnection conn>;
entermonitor v2;
label1:
if v1 == null goto label2;
specialinvoke v0.<io.vertx.core.http.impl.HttpClientResponseImpl: void checkEnded()>();
if v1 == null goto label2;
v3 = 1;
goto label3;
label2:
v3 = 0;
label3:
v4 = specialinvoke v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.impl.HttpEventHandler eventHandler(boolean)>(v3);
if v4 == null goto label4;
virtualinvoke v4.<io.vertx.core.http.impl.HttpEventHandler: void endHandler(io.vertx.core.Handler)>(v1);
label4:
exitmonitor v2;
label5:
return v0;
label6:
v5 := @caughtexception;
exitmonitor v2;
throw v5;
catch java.lang.Throwable from label1 to label5 with label6;
}
public io.vertx.core.http.HttpClientResponse exceptionHandler(io.vertx.core.Handler)
{
java.lang.Throwable v5;
io.vertx.core.http.impl.HttpEventHandler v4;
io.vertx.core.http.impl.HttpClientResponseImpl v0;
io.vertx.core.http.HttpConnection v2;
io.vertx.core.Handler v1;
boolean v3;
v0 := @this: io.vertx.core.http.impl.HttpClientResponseImpl;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.HttpConnection conn>;
entermonitor v2;
label1:
if v1 == null goto label2;
specialinvoke v0.<io.vertx.core.http.impl.HttpClientResponseImpl: void checkEnded()>();
if v1 == null goto label2;
v3 = 1;
goto label3;
label2:
v3 = 0;
label3:
v4 = specialinvoke v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.impl.HttpEventHandler eventHandler(boolean)>(v3);
if v4 == null goto label4;
virtualinvoke v4.<io.vertx.core.http.impl.HttpEventHandler: void exceptionHandler(io.vertx.core.Handler)>(v1);
label4:
exitmonitor v2;
label5:
return v0;
label6:
v5 := @caughtexception;
exitmonitor v2;
throw v5;
catch java.lang.Throwable from label1 to label5 with label6;
}
public io.vertx.core.http.HttpClientResponse pause()
{
io.vertx.core.http.impl.HttpClientResponseImpl v0;
io.vertx.core.http.impl.HttpClientStream v1;
v0 := @this: io.vertx.core.http.impl.HttpClientResponseImpl;
v1 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.impl.HttpClientStream stream>;
interfaceinvoke v1.<io.vertx.core.http.impl.HttpClientStream: void doPause()>();
return v0;
}
public io.vertx.core.http.HttpClientResponse resume()
{
io.vertx.core.http.HttpClientResponse v1;
io.vertx.core.http.impl.HttpClientResponseImpl v0;
v0 := @this: io.vertx.core.http.impl.HttpClientResponseImpl;
v1 = virtualinvoke v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.HttpClientResponse fetch(long)>(9223372036854775807L);
return v1;
}
public io.vertx.core.http.HttpClientResponse fetch(long)
{
io.vertx.core.http.impl.HttpClientResponseImpl v0;
long v1;
io.vertx.core.http.impl.HttpClientStream v2;
v0 := @this: io.vertx.core.http.impl.HttpClientResponseImpl;
v1 := @parameter0: long;
v2 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.impl.HttpClientStream stream>;
interfaceinvoke v2.<io.vertx.core.http.impl.HttpClientStream: void doFetch(long)>(v1);
return v0;
}
public io.vertx.core.http.HttpClientResponse customFrameHandler(io.vertx.core.Handler)
{
java.lang.Throwable v3;
io.vertx.core.http.impl.HttpClientResponseImpl v0;
io.vertx.core.http.HttpConnection v2;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpClientResponseImpl;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.HttpConnection conn>;
entermonitor v2;
label1:
if v1 == null goto label2;
specialinvoke v0.<io.vertx.core.http.impl.HttpClientResponseImpl: void checkEnded()>();
label2:
v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.Handler customFrameHandler> = v1;
exitmonitor v2;
label3:
return v0;
label4:
v3 := @caughtexception;
exitmonitor v2;
throw v3;
catch java.lang.Throwable from label1 to label3 with label4;
}
void handleUnknownFrame(io.vertx.core.http.HttpFrame)
{
java.lang.Throwable v5;
io.vertx.core.http.HttpFrame v1;
io.vertx.core.http.impl.HttpClientResponseImpl v0;
io.vertx.core.http.HttpConnection v2;
io.vertx.core.Handler v3, v4;
v0 := @this: io.vertx.core.http.impl.HttpClientResponseImpl;
v1 := @parameter0: io.vertx.core.http.HttpFrame;
v2 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.HttpConnection conn>;
entermonitor v2;
label1:
v3 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.Handler customFrameHandler>;
if v3 == null goto label2;
v4 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.Handler customFrameHandler>;
interfaceinvoke v4.<io.vertx.core.Handler: void handle(java.lang.Object)>(v1);
label2:
exitmonitor v2;
label3:
goto label5;
label4:
v5 := @caughtexception;
exitmonitor v2;
throw v5;
label5:
return;
catch java.lang.Throwable from label1 to label3 with label4;
}
void handleChunk(io.vertx.core.buffer.Buffer)
{
java.lang.Throwable v5;
io.vertx.core.http.impl.HttpClientRequestBase v2;
io.vertx.core.buffer.Buffer v1;
io.vertx.core.http.impl.HttpEventHandler v4;
io.vertx.core.http.impl.HttpClientResponseImpl v0;
io.vertx.core.http.HttpConnection v3;
v0 := @this: io.vertx.core.http.impl.HttpClientResponseImpl;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.impl.HttpClientRequestBase request>;
virtualinvoke v2.<io.vertx.core.http.impl.HttpClientRequestBase: void dataReceived()>();
v3 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.HttpConnection conn>;
entermonitor v3;
label1:
v4 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.impl.HttpEventHandler eventHandler>;
exitmonitor v3;
label2:
goto label4;
label3:
v5 := @caughtexception;
exitmonitor v3;
throw v5;
label4:
if v4 == null goto label5;
virtualinvoke v4.<io.vertx.core.http.impl.HttpEventHandler: void handleChunk(io.vertx.core.buffer.Buffer)>(v1);
label5:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
void handleEnd(io.vertx.core.MultiMap)
{
java.lang.Throwable v4;
io.vertx.core.MultiMap v1;
io.vertx.core.http.impl.HttpEventHandler v3;
io.vertx.core.http.impl.HttpClientResponseImpl v0;
io.vertx.core.http.HttpConnection v2;
v0 := @this: io.vertx.core.http.impl.HttpClientResponseImpl;
v1 := @parameter0: io.vertx.core.MultiMap;
v2 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.HttpConnection conn>;
entermonitor v2;
label1:
v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.MultiMap trailers> = v1;
v3 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.impl.HttpEventHandler eventHandler>;
exitmonitor v2;
label2:
goto label4;
label3:
v4 := @caughtexception;
exitmonitor v2;
throw v4;
label4:
if v3 == null goto label5;
virtualinvoke v3.<io.vertx.core.http.impl.HttpEventHandler: void handleEnd()>();
label5:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
void handleException(java.lang.Throwable)
{
io.vertx.core.impl.logging.Logger v6;
java.lang.Throwable v1, v5;
io.vertx.core.MultiMap v3;
io.vertx.core.http.impl.HttpEventHandler v4;
io.vertx.core.http.impl.HttpClientResponseImpl v0;
io.vertx.core.http.HttpConnection v2;
java.lang.String v7;
v0 := @this: io.vertx.core.http.impl.HttpClientResponseImpl;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.HttpConnection conn>;
entermonitor v2;
label1:
v3 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.MultiMap trailers>;
if v3 == null goto label3;
exitmonitor v2;
label2:
return;
label3:
v4 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.impl.HttpEventHandler eventHandler>;
exitmonitor v2;
label4:
goto label6;
label5:
v5 := @caughtexception;
exitmonitor v2;
throw v5;
label6:
if v4 == null goto label7;
virtualinvoke v4.<io.vertx.core.http.impl.HttpEventHandler: void handleException(java.lang.Throwable)>(v1);
goto label8;
label7:
v6 = <io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.impl.logging.Logger log>;
v7 = virtualinvoke v1.<java.lang.Throwable: java.lang.String getMessage()>();
interfaceinvoke v6.<io.vertx.core.impl.logging.Logger: void error(java.lang.Object,java.lang.Throwable)>(v7, v1);
label8:
return;
catch java.lang.Throwable from label1 to label2 with label5;
catch java.lang.Throwable from label3 to label4 with label5;
}
public io.vertx.core.Future body()
{
io.vertx.core.http.impl.HttpEventHandler v1;
io.vertx.core.http.impl.HttpClientResponseImpl v0;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.http.impl.HttpClientResponseImpl;
v1 = specialinvoke v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.impl.HttpEventHandler eventHandler(boolean)>(1);
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpEventHandler: io.vertx.core.Future body()>();
return v2;
}
public synchronized io.vertx.core.Future end()
{
io.vertx.core.http.impl.HttpEventHandler v1;
io.vertx.core.http.impl.HttpClientResponseImpl v0;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.http.impl.HttpClientResponseImpl;
specialinvoke v0.<io.vertx.core.http.impl.HttpClientResponseImpl: void checkEnded()>();
v1 = specialinvoke v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.impl.HttpEventHandler eventHandler(boolean)>(1);
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpEventHandler: io.vertx.core.Future end()>();
return v2;
}
public io.vertx.core.http.HttpClientResponse streamPriorityHandler(io.vertx.core.Handler)
{
java.lang.Throwable v3;
io.vertx.core.http.impl.HttpClientResponseImpl v0;
io.vertx.core.http.HttpConnection v2;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpClientResponseImpl;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.HttpConnection conn>;
entermonitor v2;
label1:
if v1 == null goto label2;
specialinvoke v0.<io.vertx.core.http.impl.HttpClientResponseImpl: void checkEnded()>();
label2:
v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.Handler priorityHandler> = v1;
exitmonitor v2;
label3:
goto label5;
label4:
v3 := @caughtexception;
exitmonitor v2;
throw v3;
label5:
return v0;
catch java.lang.Throwable from label1 to label3 with label4;
}
void handlePriorityChange(io.vertx.core.http.StreamPriority)
{
java.lang.Throwable v4;
io.vertx.core.http.StreamPriority v1;
io.vertx.core.http.impl.HttpClientResponseImpl v0;
io.vertx.core.http.HttpConnection v2;
io.vertx.core.Handler v3;
v0 := @this: io.vertx.core.http.impl.HttpClientResponseImpl;
v1 := @parameter0: io.vertx.core.http.StreamPriority;
v2 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.http.HttpConnection conn>;
entermonitor v2;
label1:
v3 = v0.<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.Handler priorityHandler>;
exitmonitor v2;
label2:
goto label4;
label3:
v4 := @caughtexception;
exitmonitor v2;
throw v4;
label4:
if v3 == null goto label5;
interfaceinvoke v3.<io.vertx.core.Handler: void handle(java.lang.Object)>(v1);
label5:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
static void <clinit>()
{
io.vertx.core.impl.logging.Logger v0;
v0 = staticinvoke <io.vertx.core.impl.logging.LoggerFactory: io.vertx.core.impl.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/http/impl/HttpClientResponseImpl;");
<io.vertx.core.http.impl.HttpClientResponseImpl: io.vertx.core.impl.logging.Logger log> = v0;
return;
}
}