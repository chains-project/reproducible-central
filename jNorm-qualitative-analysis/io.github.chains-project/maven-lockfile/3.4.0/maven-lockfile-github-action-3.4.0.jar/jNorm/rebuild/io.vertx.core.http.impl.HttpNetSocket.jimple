class io.vertx.core.http.impl.HttpNetSocket extends java.lang.Object implements io.vertx.core.net.NetSocket
{
private final io.vertx.core.net.impl.ConnectionBase conn;
private final io.vertx.core.impl.ContextInternal context;
private final io.vertx.core.streams.ReadStream readStream;
private final io.vertx.core.streams.WriteStream writeStream;
private io.vertx.core.Handler exceptionHandler;
private io.vertx.core.Handler closeHandler;
private io.vertx.core.Handler endHandler;
private io.vertx.core.Handler dataHandler;
static io.vertx.core.http.impl.HttpNetSocket netSocket(io.vertx.core.net.impl.ConnectionBase, io.vertx.core.impl.ContextInternal, io.vertx.core.streams.ReadStream, io.vertx.core.streams.WriteStream)
{
io.vertx.core.impl.ContextInternal v1;
io.vertx.core.net.impl.ConnectionBase v0;
io.vertx.core.streams.WriteStream v3;
io.vertx.core.streams.ReadStream v2;
io.vertx.core.http.impl.HttpNetSocket v4;
io.vertx.core.Handler v5, v6, v7;
v0 := @parameter0: io.vertx.core.net.impl.ConnectionBase;
v1 := @parameter1: io.vertx.core.impl.ContextInternal;
v2 := @parameter2: io.vertx.core.streams.ReadStream;
v3 := @parameter3: io.vertx.core.streams.WriteStream;
v4 = new io.vertx.core.http.impl.HttpNetSocket;
specialinvoke v4.<io.vertx.core.http.impl.HttpNetSocket: void <init>(io.vertx.core.net.impl.ConnectionBase,io.vertx.core.impl.ContextInternal,io.vertx.core.streams.ReadStream,io.vertx.core.streams.WriteStream)>(v0, v1, v2, v3);
virtualinvoke v4.<java.lang.Object: java.lang.Class getClass()>();
v5 = staticinvoke <io.vertx.core.http.impl.HttpNetSocket$handleData__1107: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.HttpNetSocket)>(v4);
interfaceinvoke v2.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream handler(io.vertx.core.Handler)>(v5);
virtualinvoke v4.<java.lang.Object: java.lang.Class getClass()>();
v6 = staticinvoke <io.vertx.core.http.impl.HttpNetSocket$handleEnd__1108: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.HttpNetSocket)>(v4);
interfaceinvoke v2.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream endHandler(io.vertx.core.Handler)>(v6);
virtualinvoke v4.<java.lang.Object: java.lang.Class getClass()>();
v7 = staticinvoke <io.vertx.core.http.impl.HttpNetSocket$handleException__1109: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.HttpNetSocket)>(v4);
interfaceinvoke v2.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream exceptionHandler(io.vertx.core.Handler)>(v7);
return v4;
}
private void <init>(io.vertx.core.net.impl.ConnectionBase, io.vertx.core.impl.ContextInternal, io.vertx.core.streams.ReadStream, io.vertx.core.streams.WriteStream)
{
io.vertx.core.streams.WriteStream v4;
io.vertx.core.streams.ReadStream v3;
io.vertx.core.http.impl.HttpNetSocket v0;
io.vertx.core.impl.ContextInternal v2;
io.vertx.core.net.impl.ConnectionBase v1;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 := @parameter0: io.vertx.core.net.impl.ConnectionBase;
v2 := @parameter1: io.vertx.core.impl.ContextInternal;
v3 := @parameter2: io.vertx.core.streams.ReadStream;
v4 := @parameter3: io.vertx.core.streams.WriteStream;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.net.impl.ConnectionBase conn> = v1;
v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.impl.ContextInternal context> = v2;
v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.streams.ReadStream readStream> = v3;
v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.streams.WriteStream writeStream> = v4;
return;
}
public void handleEnd(java.lang.Void)
{
java.lang.Void v1;
io.vertx.core.http.impl.HttpNetSocket v0;
io.vertx.core.Handler v2, v3;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 := @parameter0: java.lang.Void;
v2 = virtualinvoke v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.Handler endHandler()>();
if v2 == null goto label1;
interfaceinvoke v2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null);
label1:
v3 = virtualinvoke v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.Handler closeHandler()>();
if v3 == null goto label2;
interfaceinvoke v3.<io.vertx.core.Handler: void handle(java.lang.Object)>(null);
label2:
return;
}
public void handleData(io.vertx.core.buffer.Buffer)
{
io.vertx.core.http.impl.HttpNetSocket v0;
io.vertx.core.Handler v2;
io.vertx.core.buffer.Buffer v1;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.Handler handler()>();
if v2 == null goto label1;
interfaceinvoke v2.<io.vertx.core.Handler: void handle(java.lang.Object)>(v1);
label1:
return;
}
public void handleException(java.lang.Throwable)
{
java.lang.Throwable v1;
io.vertx.core.http.impl.HttpNetSocket v0;
io.vertx.core.Handler v2, v4, v7;
boolean v3, v5, v6;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 := @parameter0: java.lang.Throwable;
v2 = virtualinvoke v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.Handler exceptionHandler()>();
if v2 == null goto label1;
interfaceinvoke v2.<io.vertx.core.Handler: void handle(java.lang.Object)>(v1);
label1:
v3 = v1 instanceof io.vertx.core.http.HttpClosedException;
if v3 == 0 goto label2;
v4 = virtualinvoke v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.Handler endHandler()>();
if v4 == null goto label2;
interfaceinvoke v4.<io.vertx.core.Handler: void handle(java.lang.Object)>(null);
label2:
v5 = v1 instanceof io.vertx.core.http.StreamResetException;
if v5 != 0 goto label3;
v6 = v1 instanceof io.vertx.core.http.HttpClosedException;
if v6 == 0 goto label4;
label3:
v7 = virtualinvoke v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.Handler closeHandler()>();
if v7 == null goto label4;
interfaceinvoke v7.<io.vertx.core.Handler: void handle(java.lang.Object)>(null);
label4:
return;
}
public synchronized io.vertx.core.net.NetSocket exceptionHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpNetSocket v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.Handler exceptionHandler> = v1;
return v0;
}
synchronized io.vertx.core.Handler exceptionHandler()
{
io.vertx.core.http.impl.HttpNetSocket v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 = v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.Handler exceptionHandler>;
return v1;
}
public synchronized io.vertx.core.net.NetSocket handler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpNetSocket v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.Handler dataHandler> = v1;
return v0;
}
synchronized io.vertx.core.Handler handler()
{
io.vertx.core.http.impl.HttpNetSocket v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 = v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.Handler dataHandler>;
return v1;
}
public io.vertx.core.net.NetSocket fetch(long)
{
io.vertx.core.streams.ReadStream v2;
io.vertx.core.http.impl.HttpNetSocket v0;
long v1;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 := @parameter0: long;
v2 = v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.streams.ReadStream readStream>;
interfaceinvoke v2.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream fetch(long)>(v1);
return v0;
}
public io.vertx.core.net.NetSocket pause()
{
io.vertx.core.streams.ReadStream v1;
io.vertx.core.http.impl.HttpNetSocket v0;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 = v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.streams.ReadStream readStream>;
interfaceinvoke v1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>();
return v0;
}
public io.vertx.core.net.NetSocket resume()
{
io.vertx.core.streams.ReadStream v1;
io.vertx.core.http.impl.HttpNetSocket v0;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 = v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.streams.ReadStream readStream>;
interfaceinvoke v1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>();
return v0;
}
public synchronized io.vertx.core.net.NetSocket endHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpNetSocket v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.Handler endHandler> = v1;
return v0;
}
synchronized io.vertx.core.Handler endHandler()
{
io.vertx.core.http.impl.HttpNetSocket v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 = v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.Handler endHandler>;
return v1;
}
public io.vertx.core.net.NetSocket setWriteQueueMaxSize(int)
{
int v1;
io.vertx.core.http.impl.HttpNetSocket v0;
io.vertx.core.streams.WriteStream v2;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 := @parameter0: int;
v2 = v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.streams.WriteStream writeStream>;
interfaceinvoke v2.<io.vertx.core.streams.WriteStream: io.vertx.core.streams.WriteStream setWriteQueueMaxSize(int)>(v1);
return v0;
}
public io.vertx.core.net.NetSocket drainHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpNetSocket v0;
io.vertx.core.Handler v1;
io.vertx.core.streams.WriteStream v2;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.streams.WriteStream writeStream>;
interfaceinvoke v2.<io.vertx.core.streams.WriteStream: io.vertx.core.streams.WriteStream drainHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public boolean writeQueueFull()
{
io.vertx.core.http.impl.HttpNetSocket v0;
io.vertx.core.streams.WriteStream v1;
boolean v2;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 = v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.streams.WriteStream writeStream>;
v2 = interfaceinvoke v1.<io.vertx.core.streams.WriteStream: boolean writeQueueFull()>();
return v2;
}
public java.lang.String writeHandlerID()
{
io.vertx.core.http.impl.HttpNetSocket v0;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
return null;
}
public io.vertx.core.Future write(io.vertx.core.buffer.Buffer)
{
io.vertx.core.buffer.Buffer v1;
io.vertx.core.streams.WriteStream v2;
io.vertx.core.http.impl.HttpNetSocket v0;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 = v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.streams.WriteStream writeStream>;
v3 = interfaceinvoke v2.<io.vertx.core.streams.WriteStream: io.vertx.core.Future write(java.lang.Object)>(v1);
return v3;
}
public void write(io.vertx.core.buffer.Buffer, io.vertx.core.Handler)
{
io.vertx.core.buffer.Buffer v1;
io.vertx.core.streams.WriteStream v3;
io.vertx.core.http.impl.HttpNetSocket v0;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 := @parameter1: io.vertx.core.Handler;
v3 = v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.streams.WriteStream writeStream>;
interfaceinvoke v3.<io.vertx.core.streams.WriteStream: void write(java.lang.Object,io.vertx.core.Handler)>(v1, v2);
return;
}
public io.vertx.core.Future write(java.lang.String, java.lang.String)
{
io.vertx.core.buffer.Buffer v3;
io.vertx.core.http.impl.HttpNetSocket v0;
java.lang.String v1, v2;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(java.lang.String,java.lang.String)>(v1, v2);
v4 = virtualinvoke v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.Future write(io.vertx.core.buffer.Buffer)>(v3);
return v4;
}
public void write(java.lang.String, java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.buffer.Buffer v5;
io.vertx.core.streams.WriteStream v4;
io.vertx.core.http.impl.HttpNetSocket v0;
java.lang.String v1, v2;
io.vertx.core.Handler v3;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.Handler;
v4 = v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.streams.WriteStream writeStream>;
v5 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(java.lang.String,java.lang.String)>(v1, v2);
interfaceinvoke v4.<io.vertx.core.streams.WriteStream: void write(java.lang.Object,io.vertx.core.Handler)>(v5, v3);
return;
}
public io.vertx.core.Future write(java.lang.String)
{
io.vertx.core.buffer.Buffer v3;
io.vertx.core.streams.WriteStream v2;
io.vertx.core.http.impl.HttpNetSocket v0;
java.lang.String v1;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.streams.WriteStream writeStream>;
v3 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(java.lang.String)>(v1);
v4 = interfaceinvoke v2.<io.vertx.core.streams.WriteStream: io.vertx.core.Future write(java.lang.Object)>(v3);
return v4;
}
public void write(java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.buffer.Buffer v4;
io.vertx.core.streams.WriteStream v3;
io.vertx.core.http.impl.HttpNetSocket v0;
java.lang.String v1;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
v3 = v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.streams.WriteStream writeStream>;
v4 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(java.lang.String)>(v1);
interfaceinvoke v3.<io.vertx.core.streams.WriteStream: void write(java.lang.Object,io.vertx.core.Handler)>(v4, v2);
return;
}
public io.vertx.core.Future end(io.vertx.core.buffer.Buffer)
{
io.vertx.core.buffer.Buffer v1;
io.vertx.core.streams.WriteStream v2;
io.vertx.core.http.impl.HttpNetSocket v0;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 = v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.streams.WriteStream writeStream>;
v3 = interfaceinvoke v2.<io.vertx.core.streams.WriteStream: io.vertx.core.Future end(java.lang.Object)>(v1);
return v3;
}
public void end(io.vertx.core.buffer.Buffer, io.vertx.core.Handler)
{
io.vertx.core.buffer.Buffer v1;
io.vertx.core.streams.WriteStream v3;
io.vertx.core.http.impl.HttpNetSocket v0;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 := @parameter1: io.vertx.core.Handler;
v3 = v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.streams.WriteStream writeStream>;
interfaceinvoke v3.<io.vertx.core.streams.WriteStream: void end(java.lang.Object,io.vertx.core.Handler)>(v1, v2);
return;
}
public io.vertx.core.Future end()
{
io.vertx.core.http.impl.HttpNetSocket v0;
io.vertx.core.Future v2;
io.vertx.core.streams.WriteStream v1;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 = v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.streams.WriteStream writeStream>;
v2 = interfaceinvoke v1.<io.vertx.core.streams.WriteStream: io.vertx.core.Future end()>();
return v2;
}
public void end(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpNetSocket v0;
io.vertx.core.Handler v1;
io.vertx.core.streams.WriteStream v2;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.streams.WriteStream writeStream>;
interfaceinvoke v2.<io.vertx.core.streams.WriteStream: void end(io.vertx.core.Handler)>(v1);
return;
}
public io.vertx.core.Future sendFile(java.lang.String, long, long)
{
io.vertx.core.impl.future.PromiseInternal v5;
io.vertx.core.http.impl.HttpNetSocket v0;
io.vertx.core.impl.ContextInternal v4;
long v2, v3;
java.lang.String v1;
io.vertx.core.Future v6;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 = v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.impl.ContextInternal context>;
v5 = interfaceinvoke v4.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
virtualinvoke v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.net.NetSocket sendFile(java.lang.String,long,long,io.vertx.core.Handler)>(v1, v2, v3, v5);
v6 = interfaceinvoke v5.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v6;
}
public io.vertx.core.net.NetSocket sendFile(java.lang.String, long, long, io.vertx.core.Handler)
{
io.vertx.core.impl.VertxInternal v7;
io.vertx.core.impl.ContextInternal v6, v8;
long v2, v3;
io.vertx.core.net.impl.ConnectionBase v5;
io.vertx.core.http.impl.HttpNetSocket v0;
java.lang.String v1;
io.vertx.core.Handler v10, v4, v9;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 := @parameter3: io.vertx.core.Handler;
v5 = v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.net.impl.ConnectionBase conn>;
v6 = virtualinvoke v5.<io.vertx.core.net.impl.ConnectionBase: io.vertx.core.impl.ContextInternal getContext()>();
v7 = interfaceinvoke v6.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.VertxInternal owner()>();
if v4 == null goto label1;
v8 = interfaceinvoke v7.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v9 = staticinvoke <io.vertx.core.http.impl.HttpNetSocket$lambda_sendFile_1__1112: io.vertx.core.Handler bootstrap$(io.vertx.core.Context,io.vertx.core.Handler)>(v8, v4);
goto label2;
label1:
v9 = staticinvoke <io.vertx.core.http.impl.HttpNetSocket$lambda_sendFile_2__1110: io.vertx.core.Handler bootstrap$()>();
label2:
v10 = staticinvoke <io.vertx.core.http.impl.HttpNetSocket$lambda_sendFile_5__1111: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.HttpNetSocket,io.vertx.core.Handler)>(v0, v9);
staticinvoke <io.vertx.core.http.impl.HttpUtils: void resolveFile(io.vertx.core.impl.VertxInternal,java.lang.String,long,long,io.vertx.core.Handler)>(v7, v1, v2, v3, v10);
return v0;
}
public io.vertx.core.net.SocketAddress remoteAddress()
{
io.vertx.core.http.impl.HttpNetSocket v0;
io.vertx.core.net.impl.ConnectionBase v1;
io.vertx.core.net.SocketAddress v2;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 = v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.net.impl.ConnectionBase conn>;
v2 = virtualinvoke v1.<io.vertx.core.net.impl.ConnectionBase: io.vertx.core.net.SocketAddress remoteAddress()>();
return v2;
}
public io.vertx.core.net.SocketAddress remoteAddress(boolean)
{
io.vertx.core.http.impl.HttpNetSocket v0;
io.vertx.core.net.impl.ConnectionBase v2;
boolean v1;
io.vertx.core.net.SocketAddress v3;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 := @parameter0: boolean;
v2 = v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.net.impl.ConnectionBase conn>;
v3 = virtualinvoke v2.<io.vertx.core.net.impl.ConnectionBase: io.vertx.core.net.SocketAddress remoteAddress(boolean)>(v1);
return v3;
}
public io.vertx.core.net.SocketAddress localAddress()
{
io.vertx.core.http.impl.HttpNetSocket v0;
io.vertx.core.net.impl.ConnectionBase v1;
io.vertx.core.net.SocketAddress v2;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 = v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.net.impl.ConnectionBase conn>;
v2 = virtualinvoke v1.<io.vertx.core.net.impl.ConnectionBase: io.vertx.core.net.SocketAddress localAddress()>();
return v2;
}
public io.vertx.core.net.SocketAddress localAddress(boolean)
{
io.vertx.core.http.impl.HttpNetSocket v0;
io.vertx.core.net.impl.ConnectionBase v2;
boolean v1;
io.vertx.core.net.SocketAddress v3;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 := @parameter0: boolean;
v2 = v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.net.impl.ConnectionBase conn>;
v3 = virtualinvoke v2.<io.vertx.core.net.impl.ConnectionBase: io.vertx.core.net.SocketAddress localAddress(boolean)>(v1);
return v3;
}
public io.vertx.core.Future close()
{
io.vertx.core.http.impl.HttpNetSocket v0;
io.vertx.core.Future v1;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 = virtualinvoke v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.Future end()>();
return v1;
}
public void close(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpNetSocket v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 := @parameter0: io.vertx.core.Handler;
virtualinvoke v0.<io.vertx.core.http.impl.HttpNetSocket: void end(io.vertx.core.Handler)>(v1);
return;
}
public io.vertx.core.net.NetSocket closeHandler(io.vertx.core.Handler)
{
java.lang.Throwable v3;
io.vertx.core.http.impl.HttpNetSocket v0;
io.vertx.core.Handler v1;
io.vertx.core.net.impl.ConnectionBase v2;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.net.impl.ConnectionBase conn>;
entermonitor v2;
label1:
v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.Handler closeHandler> = v1;
exitmonitor v2;
label2:
goto label4;
label3:
v3 := @caughtexception;
exitmonitor v2;
throw v3;
label4:
return v0;
catch java.lang.Throwable from label1 to label2 with label3;
}
io.vertx.core.Handler closeHandler()
{
java.lang.Throwable v3;
io.vertx.core.http.impl.HttpNetSocket v0;
io.vertx.core.Handler v2;
io.vertx.core.net.impl.ConnectionBase v1;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 = v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.net.impl.ConnectionBase conn>;
entermonitor v1;
label1:
v2 = v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.Handler closeHandler>;
exitmonitor v1;
label2:
return v2;
label3:
v3 := @caughtexception;
exitmonitor v1;
throw v3;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.vertx.core.net.NetSocket upgradeToSsl(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpNetSocket v0;
io.vertx.core.Handler v1;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 := @parameter0: io.vertx.core.Handler;
v2 = virtualinvoke v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.Future upgradeToSsl()>();
interfaceinvoke v1.<io.vertx.core.Handler: void handle(java.lang.Object)>(v2);
return v0;
}
public io.vertx.core.net.NetSocket upgradeToSsl(java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpNetSocket v0;
java.lang.String v1;
io.vertx.core.Handler v2;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
v3 = virtualinvoke v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.Future upgradeToSsl(java.lang.String)>(v1);
interfaceinvoke v2.<io.vertx.core.Handler: void handle(java.lang.Object)>(v3);
return v0;
}
public io.vertx.core.Future upgradeToSsl()
{
io.vertx.core.http.impl.HttpNetSocket v0;
io.vertx.core.Future v1;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.String)>("Cannot upgrade stream to SSL");
return v1;
}
public io.vertx.core.Future upgradeToSsl(java.lang.String)
{
io.vertx.core.http.impl.HttpNetSocket v0;
java.lang.String v1;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.String)>("Cannot upgrade stream to SSL");
return v2;
}
public boolean isSsl()
{
io.vertx.core.http.impl.HttpNetSocket v0;
io.vertx.core.net.impl.ConnectionBase v1;
boolean v2;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 = v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.net.impl.ConnectionBase conn>;
v2 = virtualinvoke v1.<io.vertx.core.net.impl.ConnectionBase: boolean isSsl()>();
return v2;
}
public javax.net.ssl.SSLSession sslSession()
{
io.vertx.core.http.impl.HttpNetSocket v0;
javax.net.ssl.SSLSession v2;
io.vertx.core.net.impl.ConnectionBase v1;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 = v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.net.impl.ConnectionBase conn>;
v2 = virtualinvoke v1.<io.vertx.core.net.impl.ConnectionBase: javax.net.ssl.SSLSession sslSession()>();
return v2;
}
public javax.security.cert.X509Certificate[] peerCertificateChain() throws javax.net.ssl.SSLPeerUnverifiedException
{
io.vertx.core.http.impl.HttpNetSocket v0;
javax.security.cert.X509Certificate[] v2;
io.vertx.core.net.impl.ConnectionBase v1;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 = v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.net.impl.ConnectionBase conn>;
v2 = virtualinvoke v1.<io.vertx.core.net.impl.ConnectionBase: javax.security.cert.X509Certificate[] peerCertificateChain()>();
return v2;
}
public java.util.List peerCertificates() throws javax.net.ssl.SSLPeerUnverifiedException
{
io.vertx.core.http.impl.HttpNetSocket v0;
java.util.List v2;
io.vertx.core.net.impl.ConnectionBase v1;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 = v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.net.impl.ConnectionBase conn>;
v2 = virtualinvoke v1.<io.vertx.core.net.impl.ConnectionBase: java.util.List peerCertificates()>();
return v2;
}
public java.lang.String indicatedServerName()
{
io.vertx.core.http.impl.HttpNetSocket v0;
java.lang.String v2;
io.vertx.core.net.impl.ConnectionBase v1;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
v1 = v0.<io.vertx.core.http.impl.HttpNetSocket: io.vertx.core.net.impl.ConnectionBase conn>;
v2 = virtualinvoke v1.<io.vertx.core.net.impl.ConnectionBase: java.lang.String indicatedServerName()>();
return v2;
}
public java.lang.String applicationLayerProtocol()
{
io.vertx.core.http.impl.HttpNetSocket v0;
v0 := @this: io.vertx.core.http.impl.HttpNetSocket;
return null;
}
}