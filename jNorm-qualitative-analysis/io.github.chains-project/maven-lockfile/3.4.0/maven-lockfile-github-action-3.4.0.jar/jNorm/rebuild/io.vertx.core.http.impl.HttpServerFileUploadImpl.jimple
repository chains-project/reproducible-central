class io.vertx.core.http.impl.HttpServerFileUploadImpl extends java.lang.Object implements io.vertx.core.http.HttpServerFileUpload
{
private final io.vertx.core.streams.ReadStream stream;
private final io.vertx.core.impl.ContextInternal context;
private final java.lang.String name;
private final java.lang.String filename;
private final java.lang.String contentType;
private final java.lang.String contentTransferEncoding;
private final java.nio.charset.Charset charset;
private io.vertx.core.Handler dataHandler;
private io.vertx.core.Handler endHandler;
private io.vertx.core.Handler exceptionHandler;
private long size;
private boolean lazyCalculateSize;
private io.vertx.core.file.AsyncFile file;
private io.vertx.core.streams.Pipe pipe;
private boolean cancelled;
void <init>(io.vertx.core.impl.ContextInternal, io.vertx.core.streams.ReadStream, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.nio.charset.Charset, long)
{
io.vertx.core.http.impl.HttpServerFileUploadImpl v0;
io.vertx.core.impl.ContextInternal v1;
long v8;
byte v9;
java.nio.charset.Charset v7;
io.vertx.core.streams.ReadStream v2;
java.lang.String v3, v4, v5, v6;
io.vertx.core.Handler v11, v12, v13;
boolean v10;
v0 := @this: io.vertx.core.http.impl.HttpServerFileUploadImpl;
v1 := @parameter0: io.vertx.core.impl.ContextInternal;
v2 := @parameter1: io.vertx.core.streams.ReadStream;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.String;
v5 := @parameter4: java.lang.String;
v6 := @parameter5: java.lang.String;
v7 := @parameter6: java.nio.charset.Charset;
v8 := @parameter7: long;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.impl.ContextInternal context> = v1;
v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.streams.ReadStream stream> = v2;
v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: java.lang.String name> = v3;
v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: java.lang.String filename> = v4;
v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: java.lang.String contentType> = v5;
v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: java.lang.String contentTransferEncoding> = v6;
v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: java.nio.charset.Charset charset> = v7;
v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: long size> = v8;
v9 = v8 cmp 0L;
if v9 != 0 goto label1;
v10 = 1;
goto label2;
label1:
v10 = 0;
label2:
v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: boolean lazyCalculateSize> = v10;
v11 = staticinvoke <io.vertx.core.http.impl.HttpServerFileUploadImpl$handleData__996: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.HttpServerFileUploadImpl)>(v0);
interfaceinvoke v2.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream handler(io.vertx.core.Handler)>(v11);
v12 = staticinvoke <io.vertx.core.http.impl.HttpServerFileUploadImpl$handleException__997: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.HttpServerFileUploadImpl)>(v0);
interfaceinvoke v2.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream exceptionHandler(io.vertx.core.Handler)>(v12);
v13 = staticinvoke <io.vertx.core.http.impl.HttpServerFileUploadImpl$lambda_new_0__998: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.HttpServerFileUploadImpl)>(v0);
interfaceinvoke v2.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream endHandler(io.vertx.core.Handler)>(v13);
return;
}
public void handleData(io.vertx.core.buffer.Buffer)
{
java.lang.Throwable v7;
io.vertx.core.http.impl.HttpServerFileUploadImpl v0;
io.vertx.core.impl.ContextInternal v8;
long v4, v6;
io.vertx.core.buffer.Buffer v1;
int v5;
io.vertx.core.Handler v2;
boolean v3;
v0 := @this: io.vertx.core.http.impl.HttpServerFileUploadImpl;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
entermonitor v0;
label1:
v2 = v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.Handler dataHandler>;
v3 = v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: boolean lazyCalculateSize>;
if v3 == 0 goto label2;
v4 = v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: long size>;
v5 = interfaceinvoke v1.<io.vertx.core.buffer.Buffer: int length()>();
v6 = v4 + v5;
v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: long size> = v6;
label2:
exitmonitor v0;
label3:
goto label5;
label4:
v7 := @caughtexception;
exitmonitor v0;
throw v7;
label5:
if v2 == null goto label6;
v8 = v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.impl.ContextInternal context>;
interfaceinvoke v8.<io.vertx.core.impl.ContextInternal: void dispatch(java.lang.Object,io.vertx.core.Handler)>(v1, v2);
label6:
return;
catch java.lang.Throwable from label1 to label3 with label4;
}
public void handleException(java.lang.Throwable)
{
java.lang.Throwable v1, v3;
io.vertx.core.http.impl.HttpServerFileUploadImpl v0;
io.vertx.core.impl.ContextInternal v4;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.http.impl.HttpServerFileUploadImpl;
v1 := @parameter0: java.lang.Throwable;
entermonitor v0;
label1:
v2 = v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.Handler exceptionHandler>;
exitmonitor v0;
label2:
goto label4;
label3:
v3 := @caughtexception;
exitmonitor v0;
throw v3;
label4:
if v2 == null goto label5;
v4 = v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.impl.ContextInternal context>;
interfaceinvoke v4.<io.vertx.core.impl.ContextInternal: void dispatch(java.lang.Object,io.vertx.core.Handler)>(v1, v2);
label5:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
private void handleEnd()
{
java.lang.Throwable v2;
io.vertx.core.http.impl.HttpServerFileUploadImpl v0;
io.vertx.core.impl.ContextInternal v3;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpServerFileUploadImpl;
entermonitor v0;
label1:
v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: boolean lazyCalculateSize> = 0;
v1 = v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.Handler endHandler>;
exitmonitor v0;
label2:
goto label4;
label3:
v2 := @caughtexception;
exitmonitor v0;
throw v2;
label4:
if v1 == null goto label5;
v3 = v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.impl.ContextInternal context>;
interfaceinvoke v3.<io.vertx.core.impl.ContextInternal: void dispatch(io.vertx.core.Handler)>(v1);
label5:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public java.lang.String filename()
{
io.vertx.core.http.impl.HttpServerFileUploadImpl v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.impl.HttpServerFileUploadImpl;
v1 = v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: java.lang.String filename>;
return v1;
}
public java.lang.String name()
{
io.vertx.core.http.impl.HttpServerFileUploadImpl v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.impl.HttpServerFileUploadImpl;
v1 = v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: java.lang.String name>;
return v1;
}
public java.lang.String contentType()
{
io.vertx.core.http.impl.HttpServerFileUploadImpl v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.impl.HttpServerFileUploadImpl;
v1 = v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: java.lang.String contentType>;
return v1;
}
public java.lang.String contentTransferEncoding()
{
io.vertx.core.http.impl.HttpServerFileUploadImpl v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.impl.HttpServerFileUploadImpl;
v1 = v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: java.lang.String contentTransferEncoding>;
return v1;
}
public java.lang.String charset()
{
io.vertx.core.http.impl.HttpServerFileUploadImpl v0;
java.lang.String v2;
java.nio.charset.Charset v1;
v0 := @this: io.vertx.core.http.impl.HttpServerFileUploadImpl;
v1 = v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: java.nio.charset.Charset charset>;
v2 = virtualinvoke v1.<java.nio.charset.Charset: java.lang.String toString()>();
return v2;
}
public synchronized long size()
{
long v1;
io.vertx.core.http.impl.HttpServerFileUploadImpl v0;
v0 := @this: io.vertx.core.http.impl.HttpServerFileUploadImpl;
v1 = v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: long size>;
return v1;
}
public synchronized io.vertx.core.http.HttpServerFileUpload handler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpServerFileUploadImpl v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpServerFileUploadImpl;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.Handler dataHandler> = v1;
return v0;
}
public io.vertx.core.http.HttpServerFileUpload pause()
{
io.vertx.core.streams.ReadStream v1;
io.vertx.core.http.impl.HttpServerFileUploadImpl v0;
v0 := @this: io.vertx.core.http.impl.HttpServerFileUploadImpl;
v1 = v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.streams.ReadStream stream>;
interfaceinvoke v1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>();
return v0;
}
public io.vertx.core.http.HttpServerFileUpload fetch(long)
{
io.vertx.core.streams.ReadStream v2;
long v1;
io.vertx.core.http.impl.HttpServerFileUploadImpl v0;
v0 := @this: io.vertx.core.http.impl.HttpServerFileUploadImpl;
v1 := @parameter0: long;
v2 = v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.streams.ReadStream stream>;
interfaceinvoke v2.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream fetch(long)>(v1);
return v0;
}
public io.vertx.core.http.HttpServerFileUpload resume()
{
io.vertx.core.streams.ReadStream v1;
io.vertx.core.http.impl.HttpServerFileUploadImpl v0;
v0 := @this: io.vertx.core.http.impl.HttpServerFileUploadImpl;
v1 = v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.streams.ReadStream stream>;
interfaceinvoke v1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>();
return v0;
}
public synchronized io.vertx.core.http.HttpServerFileUpload exceptionHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpServerFileUploadImpl v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpServerFileUploadImpl;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.Handler exceptionHandler> = v1;
return v0;
}
public synchronized io.vertx.core.http.HttpServerFileUpload endHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpServerFileUploadImpl v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpServerFileUploadImpl;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.Handler endHandler> = v1;
return v0;
}
public void streamToFileSystem(java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpServerFileUploadImpl v0;
java.lang.String v1;
io.vertx.core.Handler v2;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.http.impl.HttpServerFileUploadImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
v3 = virtualinvoke v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.Future streamToFileSystem(java.lang.String)>(v1);
if v2 == null goto label1;
interfaceinvoke v3.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
label1:
return;
}
public io.vertx.core.Future streamToFileSystem(java.lang.String)
{
java.lang.Throwable v7;
io.vertx.core.impl.ContextInternal v3, v8;
java.util.function.Function v14;
io.vertx.core.streams.Pipe v2, v5, v6;
java.lang.String v1;
io.vertx.core.http.impl.HttpServerFileUploadImpl v0;
io.vertx.core.impl.VertxInternal v9;
io.vertx.core.file.OpenOptions v11;
io.vertx.core.Future v12, v15, v4;
io.vertx.core.file.FileSystem v10;
io.vertx.core.Handler v13;
v0 := @this: io.vertx.core.http.impl.HttpServerFileUploadImpl;
v1 := @parameter0: java.lang.String;
entermonitor v0;
label1:
v2 = v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.streams.Pipe pipe>;
if v2 == null goto label3;
v3 = v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.impl.ContextInternal context>;
v4 = interfaceinvoke v3.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future failedFuture(java.lang.String)>("Already streaming");
exitmonitor v0;
label2:
return v4;
label3:
v5 = virtualinvoke v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.streams.Pipe pipe()>();
v6 = interfaceinvoke v5.<io.vertx.core.streams.Pipe: io.vertx.core.streams.Pipe endOnComplete(boolean)>(1);
v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.streams.Pipe pipe> = v6;
exitmonitor v0;
label4:
goto label6;
label5:
v7 := @caughtexception;
exitmonitor v0;
throw v7;
label6:
v8 = v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.impl.ContextInternal context>;
v9 = interfaceinvoke v8.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.VertxInternal owner()>();
v10 = interfaceinvoke v9.<io.vertx.core.impl.VertxInternal: io.vertx.core.file.FileSystem fileSystem()>();
v11 = new io.vertx.core.file.OpenOptions;
specialinvoke v11.<io.vertx.core.file.OpenOptions: void <init>()>();
v12 = interfaceinvoke v10.<io.vertx.core.file.FileSystem: io.vertx.core.Future open(java.lang.String,io.vertx.core.file.OpenOptions)>(v1, v11);
v13 = staticinvoke <io.vertx.core.http.impl.HttpServerFileUploadImpl$lambda_streamToFileSystem_1__999: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.HttpServerFileUploadImpl)>(v0);
interfaceinvoke v12.<io.vertx.core.Future: io.vertx.core.Future onFailure(io.vertx.core.Handler)>(v13);
v14 = staticinvoke <io.vertx.core.http.impl.HttpServerFileUploadImpl$lambda_streamToFileSystem_4__1000: java.util.function.Function bootstrap$(io.vertx.core.http.impl.HttpServerFileUploadImpl,io.vertx.core.file.FileSystem,java.lang.String)>(v0, v10, v1);
v15 = interfaceinvoke v12.<io.vertx.core.Future: io.vertx.core.Future compose(java.util.function.Function)>(v14);
return v15;
catch java.lang.Throwable from label1 to label2 with label5;
catch java.lang.Throwable from label3 to label4 with label5;
}
public boolean cancelStreamToFileSystem()
{
java.lang.Throwable v4;
io.vertx.core.file.AsyncFile v3;
java.lang.IllegalStateException v2;
io.vertx.core.http.impl.HttpServerFileUploadImpl v0;
io.vertx.core.streams.Pipe v1, v5;
v0 := @this: io.vertx.core.http.impl.HttpServerFileUploadImpl;
entermonitor v0;
label1:
v1 = v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.streams.Pipe pipe>;
if v1 != null goto label2;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not a streaming upload");
throw v2;
label2:
v3 = v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.file.AsyncFile file>;
if v3 == null goto label4;
exitmonitor v0;
label3:
return 0;
label4:
v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: boolean cancelled> = 1;
exitmonitor v0;
label5:
goto label7;
label6:
v4 := @caughtexception;
exitmonitor v0;
throw v4;
label7:
v5 = v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.streams.Pipe pipe>;
interfaceinvoke v5.<io.vertx.core.streams.Pipe: void close()>();
return 1;
catch java.lang.Throwable from label1 to label3 with label6;
catch java.lang.Throwable from label4 to label5 with label6;
}
public synchronized boolean isSizeAvailable()
{
io.vertx.core.http.impl.HttpServerFileUploadImpl v0;
boolean v1, v2;
v0 := @this: io.vertx.core.http.impl.HttpServerFileUploadImpl;
v1 = v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: boolean lazyCalculateSize>;
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public synchronized io.vertx.core.file.AsyncFile file()
{
io.vertx.core.file.AsyncFile v1;
io.vertx.core.http.impl.HttpServerFileUploadImpl v0;
v0 := @this: io.vertx.core.http.impl.HttpServerFileUploadImpl;
v1 = v0.<io.vertx.core.http.impl.HttpServerFileUploadImpl: io.vertx.core.file.AsyncFile file>;
return v1;
}
}