public class io.vertx.core.http.impl.cgbystrom.FlashPolicyHandler extends io.netty.channel.ChannelInboundHandlerAdapter
{
private static final java.lang.String XML;
private io.vertx.core.http.impl.cgbystrom.FlashPolicyHandler$ParseState state;
public void <init>()
{
io.vertx.core.http.impl.cgbystrom.FlashPolicyHandler$ParseState v1;
io.vertx.core.http.impl.cgbystrom.FlashPolicyHandler v0;
v0 := @this: io.vertx.core.http.impl.cgbystrom.FlashPolicyHandler;
specialinvoke v0.<io.netty.channel.ChannelInboundHandlerAdapter: void <init>()>();
v1 = <io.vertx.core.http.impl.cgbystrom.FlashPolicyHandler$ParseState: io.vertx.core.http.impl.cgbystrom.FlashPolicyHandler$ParseState MAGIC1>;
v0.<io.vertx.core.http.impl.cgbystrom.FlashPolicyHandler: io.vertx.core.http.impl.cgbystrom.FlashPolicyHandler$ParseState state> = v1;
return;
}
public void channelRead(io.netty.channel.ChannelHandlerContext, java.lang.Object) throws java.lang.Exception
{
io.vertx.core.http.impl.cgbystrom.FlashPolicyHandler v0;
io.netty.channel.ChannelHandlerContext v1;
short v10, v14;
io.netty.buffer.ByteBuf v17;
java.nio.charset.Charset v16;
int[] v4;
io.netty.channel.ChannelFutureListener v19;
int v3, v6, v7, v9;
boolean v13, v8;
io.netty.channel.ChannelPipeline v12, v15;
io.vertx.core.http.impl.cgbystrom.FlashPolicyHandler$ParseState v11, v5;
io.netty.channel.ChannelFuture v18;
java.lang.Object v2;
v0 := @this: io.vertx.core.http.impl.cgbystrom.FlashPolicyHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readerIndex()>();
v4 = <io.vertx.core.http.impl.cgbystrom.FlashPolicyHandler$1: int[] $SwitchMap$io$vertx$core$http$impl$cgbystrom$FlashPolicyHandler$ParseState>;
v5 = v0.<io.vertx.core.http.impl.cgbystrom.FlashPolicyHandler: io.vertx.core.http.impl.cgbystrom.FlashPolicyHandler$ParseState state>;
v6 = virtualinvoke v5.<io.vertx.core.http.impl.cgbystrom.FlashPolicyHandler$ParseState: int ordinal()>();
v7 = v4[v6];
lookupswitch(v7)
{
case 1: goto label1;
case 2: goto label3;
default: goto label6;
};
label1:
v8 = virtualinvoke v2.<io.netty.buffer.ByteBuf: boolean isReadable()>();
if v8 != 0 goto label2;
return;
label2:
v9 = v3;
v3 = v3 + 1;
v10 = virtualinvoke v2.<io.netty.buffer.ByteBuf: short getUnsignedByte(int)>(v9);
v11 = <io.vertx.core.http.impl.cgbystrom.FlashPolicyHandler$ParseState: io.vertx.core.http.impl.cgbystrom.FlashPolicyHandler$ParseState MAGIC2>;
v0.<io.vertx.core.http.impl.cgbystrom.FlashPolicyHandler: io.vertx.core.http.impl.cgbystrom.FlashPolicyHandler$ParseState state> = v11;
if v10 == 60 goto label3;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)>(v2);
v12 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPipeline pipeline()>();
interfaceinvoke v12.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline remove(io.netty.channel.ChannelHandler)>(v0);
return;
label3:
v13 = virtualinvoke v2.<io.netty.buffer.ByteBuf: boolean isReadable()>();
if v13 != 0 goto label4;
return;
label4:
v14 = virtualinvoke v2.<io.netty.buffer.ByteBuf: short getUnsignedByte(int)>(v3);
if v14 == 112 goto label5;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)>(v2);
v15 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPipeline pipeline()>();
interfaceinvoke v15.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline remove(io.netty.channel.ChannelHandler)>(v0);
goto label6;
label5:
v16 = <io.netty.util.CharsetUtil: java.nio.charset.Charset UTF_8>;
v17 = staticinvoke <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf copiedBuffer(java.lang.CharSequence,java.nio.charset.Charset)>("<cross-domain-policy><allow-access-from domain=\"*\" to-ports=\"*\" /></cross-domain-policy>", v16);
v18 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object)>(v17);
v19 = <io.netty.channel.ChannelFutureListener: io.netty.channel.ChannelFutureListener CLOSE>;
interfaceinvoke v18.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v19);
label6:
return;
}
}