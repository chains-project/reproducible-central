public final class io.vertx.core.http.impl.headers.HeadersMultiMap extends io.netty.handler.codec.http.HttpHeaders implements io.vertx.core.MultiMap
{
static final java.util.function.BiConsumer HTTP_VALIDATOR;
private final java.util.function.BiConsumer validator;
private final io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry[] entries;
private final io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry head;
private static final int COLON_AND_SPACE_SHORT;
static final int CRLF_SHORT;
private static java.lang.CharSequence toValidCharSequence(java.lang.Object)
{
java.lang.Object v0;
java.lang.String v2;
boolean v1;
v0 := @parameter0: java.lang.Object;
v1 = v0 instanceof java.lang.CharSequence;
if v1 == 0 goto label1;
return v0;
label1:
v2 = virtualinvoke v0.<java.lang.Object: java.lang.String toString()>();
return v2;
}
public static io.vertx.core.http.impl.headers.HeadersMultiMap httpHeaders()
{
java.util.function.BiConsumer v1;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 = new io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 = <io.vertx.core.http.impl.headers.HeadersMultiMap: java.util.function.BiConsumer HTTP_VALIDATOR>;
specialinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: void <init>(java.util.function.BiConsumer)>(v1);
return v0;
}
public static io.vertx.core.http.impl.headers.HeadersMultiMap headers()
{
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 = new io.vertx.core.http.impl.headers.HeadersMultiMap;
specialinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: void <init>()>();
return v0;
}
public io.vertx.core.MultiMap setAll(io.vertx.core.MultiMap)
{
io.vertx.core.MultiMap v1, v2;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: io.vertx.core.MultiMap;
v2 = specialinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.MultiMap set0(java.lang.Iterable)>(v1);
return v2;
}
public io.vertx.core.MultiMap setAll(java.util.Map)
{
java.util.Map v1;
io.vertx.core.MultiMap v3;
java.util.Set v2;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.util.Map;
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v3 = specialinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.MultiMap set0(java.lang.Iterable)>(v2);
return v3;
}
public int size()
{
int v2;
java.util.Set v1;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 = virtualinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: java.util.Set names()>();
v2 = interfaceinvoke v1.<java.util.Set: int size()>();
return v2;
}
public void <init>()
{
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
specialinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: void <init>(java.util.function.BiConsumer)>(null);
return;
}
public void <init>(java.util.function.BiConsumer)
{
java.util.function.BiConsumer v1;
io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry[] v2;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry v3, v4, v5, v6;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.util.function.BiConsumer;
specialinvoke v0.<io.netty.handler.codec.http.HttpHeaders: void <init>()>();
v2 = newarray (io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry)[16];
v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry[] entries> = v2;
v3 = new io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry;
specialinvoke v3.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: void <init>(io.vertx.core.http.impl.headers.HeadersMultiMap)>(v0);
v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry head> = v3;
v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: java.util.function.BiConsumer validator> = v1;
v4 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry head>;
v5 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry head>;
v6 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry head>;
v5.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry after> = v6;
v4.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry before> = v6;
return;
}
public io.vertx.core.http.impl.headers.HeadersMultiMap add(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v1, v2;
int v3, v4;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence;
virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v3 = staticinvoke <io.netty.util.AsciiString: int hashCode(java.lang.CharSequence)>(v1);
v4 = v3 & 15;
specialinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: void add0(int,int,java.lang.CharSequence,java.lang.CharSequence)>(v3, v4, v1, v2);
return v0;
}
public io.vertx.core.http.impl.headers.HeadersMultiMap add(java.lang.CharSequence, java.lang.Object)
{
java.lang.CharSequence v1, v3;
java.lang.Object v2;
io.vertx.core.http.impl.headers.HeadersMultiMap v0, v4;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Object;
v3 = staticinvoke <io.vertx.core.http.impl.headers.HeadersMultiMap: java.lang.CharSequence toValidCharSequence(java.lang.Object)>(v2);
v4 = virtualinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap add(java.lang.CharSequence,java.lang.CharSequence)>(v1, v3);
return v4;
}
public io.netty.handler.codec.http.HttpHeaders add(java.lang.String, java.lang.Object)
{
java.lang.CharSequence v3;
java.lang.Object v2;
java.lang.String v1;
io.vertx.core.http.impl.headers.HeadersMultiMap v0, v4;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object;
v3 = staticinvoke <io.vertx.core.http.impl.headers.HeadersMultiMap: java.lang.CharSequence toValidCharSequence(java.lang.Object)>(v2);
v4 = virtualinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap add(java.lang.CharSequence,java.lang.CharSequence)>(v1, v3);
return v4;
}
public io.vertx.core.http.impl.headers.HeadersMultiMap add(java.lang.String, java.lang.String)
{
java.lang.String v1, v2;
io.vertx.core.http.impl.headers.HeadersMultiMap v0, v3;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap add(java.lang.CharSequence,java.lang.CharSequence)>(v1, v2);
return v3;
}
public io.vertx.core.http.impl.headers.HeadersMultiMap add(java.lang.CharSequence, java.lang.Iterable)
{
java.lang.CharSequence v1, v8;
java.util.Iterator v5;
java.lang.Iterable v2;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
int v3, v4;
java.lang.Object v7;
boolean v6;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Iterable;
v3 = staticinvoke <io.netty.util.AsciiString: int hashCode(java.lang.CharSequence)>(v1);
v4 = v3 & 15;
v5 = interfaceinvoke v2.<java.lang.Iterable: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label2;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = staticinvoke <io.vertx.core.http.impl.headers.HeadersMultiMap: java.lang.CharSequence toValidCharSequence(java.lang.Object)>(v7);
specialinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: void add0(int,int,java.lang.CharSequence,java.lang.CharSequence)>(v3, v4, v1, v8);
goto label1;
label2:
return v0;
}
public io.vertx.core.http.impl.headers.HeadersMultiMap add(java.lang.String, java.lang.Iterable)
{
java.lang.String v1;
java.lang.Iterable v2;
io.vertx.core.http.impl.headers.HeadersMultiMap v0, v3;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Iterable;
v3 = virtualinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap add(java.lang.CharSequence,java.lang.Iterable)>(v1, v2);
return v3;
}
public io.vertx.core.MultiMap addAll(io.vertx.core.MultiMap)
{
java.util.List v2;
io.vertx.core.MultiMap v1, v3;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: io.vertx.core.MultiMap;
v2 = interfaceinvoke v1.<io.vertx.core.MultiMap: java.util.List entries()>();
v3 = specialinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.MultiMap addAll(java.lang.Iterable)>(v2);
return v3;
}
public io.vertx.core.MultiMap addAll(java.util.Map)
{
java.util.Map v1;
io.vertx.core.MultiMap v3;
java.util.Set v2;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.util.Map;
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v3 = specialinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.MultiMap addAll(java.lang.Iterable)>(v2);
return v3;
}
private io.vertx.core.MultiMap addAll(java.lang.Iterable)
{
java.util.Iterator v2;
java.lang.Object v4, v5, v6;
java.lang.Iterable v1;
boolean v3;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.Iterable;
v2 = interfaceinvoke v1.<java.lang.Iterable: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getKey()>();
v6 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
virtualinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap add(java.lang.String,java.lang.String)>(v5, v6);
goto label1;
label2:
return v0;
}
public io.vertx.core.http.impl.headers.HeadersMultiMap remove(java.lang.CharSequence)
{
java.lang.CharSequence v1;
int v2, v3;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.CharSequence;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "name");
v2 = staticinvoke <io.netty.util.AsciiString: int hashCode(java.lang.CharSequence)>(v1);
v3 = v2 & 15;
specialinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: void remove0(int,int,java.lang.CharSequence)>(v2, v3, v1);
return v0;
}
public io.vertx.core.http.impl.headers.HeadersMultiMap remove(java.lang.String)
{
java.lang.String v1;
io.vertx.core.http.impl.headers.HeadersMultiMap v0, v2;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap remove(java.lang.CharSequence)>(v1);
return v2;
}
public io.vertx.core.http.impl.headers.HeadersMultiMap set(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v1, v2;
io.vertx.core.http.impl.headers.HeadersMultiMap v0, v3;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence;
v3 = specialinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap set0(java.lang.CharSequence,java.lang.CharSequence)>(v1, v2);
return v3;
}
public io.vertx.core.http.impl.headers.HeadersMultiMap set(java.lang.String, java.lang.String)
{
java.lang.String v1, v2;
io.vertx.core.http.impl.headers.HeadersMultiMap v0, v3;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap set(java.lang.CharSequence,java.lang.CharSequence)>(v1, v2);
return v3;
}
public io.vertx.core.http.impl.headers.HeadersMultiMap set(java.lang.String, java.lang.Object)
{
java.lang.CharSequence v3;
java.lang.Object v2;
java.lang.String v1;
io.vertx.core.http.impl.headers.HeadersMultiMap v0, v4;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object;
v3 = staticinvoke <io.vertx.core.http.impl.headers.HeadersMultiMap: java.lang.CharSequence toValidCharSequence(java.lang.Object)>(v2);
v4 = virtualinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap set(java.lang.CharSequence,java.lang.CharSequence)>(v1, v3);
return v4;
}
public io.vertx.core.http.impl.headers.HeadersMultiMap set(java.lang.CharSequence, java.lang.Object)
{
java.lang.CharSequence v1, v3;
java.lang.Object v2;
io.vertx.core.http.impl.headers.HeadersMultiMap v0, v4;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Object;
v3 = staticinvoke <io.vertx.core.http.impl.headers.HeadersMultiMap: java.lang.CharSequence toValidCharSequence(java.lang.Object)>(v2);
v4 = virtualinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap set(java.lang.CharSequence,java.lang.CharSequence)>(v1, v3);
return v4;
}
public io.vertx.core.http.impl.headers.HeadersMultiMap set(java.lang.CharSequence, java.lang.Iterable)
{
java.lang.CharSequence v1, v8;
java.util.Iterator v5;
java.lang.Iterable v2;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
int v3, v4;
java.lang.Object v7;
boolean v6;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Iterable;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v2, "values");
v3 = staticinvoke <io.netty.util.AsciiString: int hashCode(java.lang.CharSequence)>(v1);
v4 = v3 & 15;
specialinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: void remove0(int,int,java.lang.CharSequence)>(v3, v4, v1);
v5 = interfaceinvoke v2.<java.lang.Iterable: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label2;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
if v7 == null goto label2;
v8 = staticinvoke <io.vertx.core.http.impl.headers.HeadersMultiMap: java.lang.CharSequence toValidCharSequence(java.lang.Object)>(v7);
specialinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: void add0(int,int,java.lang.CharSequence,java.lang.CharSequence)>(v3, v4, v1, v8);
goto label1;
label2:
return v0;
}
public io.vertx.core.http.impl.headers.HeadersMultiMap set(java.lang.String, java.lang.Iterable)
{
java.lang.String v1;
java.lang.Iterable v2;
io.vertx.core.http.impl.headers.HeadersMultiMap v0, v3;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Iterable;
v3 = virtualinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap set(java.lang.CharSequence,java.lang.Iterable)>(v1, v2);
return v3;
}
public boolean containsValue(java.lang.CharSequence, java.lang.CharSequence, boolean)
{
java.lang.CharSequence v1, v2;
boolean v3, v4;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence;
v3 := @parameter2: boolean;
v4 = specialinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: boolean containsInternal(java.lang.CharSequence,java.lang.CharSequence,boolean,boolean)>(v1, v2, 0, v3);
return v4;
}
public boolean contains(java.lang.CharSequence, java.lang.CharSequence, boolean)
{
java.lang.CharSequence v1, v2;
boolean v3, v4;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence;
v3 := @parameter2: boolean;
v4 = specialinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: boolean containsInternal(java.lang.CharSequence,java.lang.CharSequence,boolean,boolean)>(v1, v2, 1, v3);
return v4;
}
private boolean containsInternal(java.lang.CharSequence, java.lang.CharSequence, boolean, boolean)
{
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
int v10, v15, v16, v17, v18, v19, v21, v23, v25, v5, v6;
boolean v11, v13, v14, v24, v3, v4;
java.lang.CharSequence v1, v12, v2, v9;
char v20, v22;
io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry[] v7;
io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry v8;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence;
v3 := @parameter2: boolean;
v4 := @parameter3: boolean;
v5 = staticinvoke <io.netty.util.AsciiString: int hashCode(java.lang.CharSequence)>(v1);
v6 = v5 & 15;
v7 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry[] entries>;
v8 = v7[v6];
label01:
if v8 == null goto label14;
v9 = v8.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: java.lang.CharSequence key>;
v10 = v8.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: int hash>;
if v10 != v5 goto label13;
if v1 == v9 goto label02;
v11 = staticinvoke <io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(v1, v9);
if v11 == 0 goto label13;
label02:
v12 = virtualinvoke v8.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: java.lang.CharSequence getValue()>();
if v3 == 0 goto label05;
if v4 == 0 goto label03;
v13 = staticinvoke <io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(v2, v12);
if v13 != 0 goto label04;
label03:
if v4 != 0 goto label13;
v14 = staticinvoke <io.netty.util.AsciiString: boolean contentEquals(java.lang.CharSequence,java.lang.CharSequence)>(v2, v12);
if v14 == 0 goto label13;
label04:
return 1;
label05:
v15 = 0;
label06:
v16 = staticinvoke <io.netty.util.AsciiString: int indexOf(java.lang.CharSequence,char,int)>(v12, 44, v15);
v17 = (int) -1;
if v16 != v17 goto label07;
v18 = interfaceinvoke v12.<java.lang.CharSequence: int length()>();
goto label08;
label07:
v18 = v16;
label08:
if v18 <= v15 goto label09;
v19 = v18 - 1;
v20 = interfaceinvoke v12.<java.lang.CharSequence: char charAt(int)>(v19);
if v20 != 32 goto label09;
v18 = v18 - 1;
goto label08;
label09:
v21 = v15;
label10:
if v21 >= v18 goto label11;
v22 = interfaceinvoke v12.<java.lang.CharSequence: char charAt(int)>(v21);
if v22 != 32 goto label11;
v21 = v21 + 1;
goto label10;
label11:
v23 = v18 - v21;
if v23 <= 0 goto label12;
v24 = staticinvoke <io.netty.util.AsciiString: boolean regionMatches(java.lang.CharSequence,boolean,int,java.lang.CharSequence,int,int)>(v12, v4, v21, v2, 0, v23);
if v24 == 0 goto label12;
return 1;
label12:
v25 = (int) -1;
if v16 == v25 goto label13;
v15 = v16 + 1;
goto label06;
label13:
v8 = v8.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry next>;
goto label01;
label14:
return 0;
}
public boolean contains(java.lang.String, java.lang.String, boolean)
{
java.lang.String v1, v2;
boolean v3, v4;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: boolean;
v4 = virtualinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)>(v1, v2, v3);
return v4;
}
public boolean contains(java.lang.CharSequence)
{
java.lang.CharSequence v1, v2;
boolean v3;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.CharSequence;
v2 = specialinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: java.lang.CharSequence get0(java.lang.CharSequence)>(v1);
if v2 == null goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean contains(java.lang.String)
{
java.lang.String v1;
boolean v2;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: boolean contains(java.lang.CharSequence)>(v1);
return v2;
}
public java.lang.String get(java.lang.CharSequence)
{
java.lang.CharSequence v1, v2;
java.lang.String v3;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.CharSequence;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "name");
v2 = specialinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: java.lang.CharSequence get0(java.lang.CharSequence)>(v1);
if v2 == null goto label1;
v3 = virtualinvoke v2.<java.lang.Object: java.lang.String toString()>();
goto label2;
label1:
v3 = null;
label2:
return v3;
}
public java.lang.String get(java.lang.String)
{
java.lang.String v1, v2;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: java.lang.String get(java.lang.CharSequence)>(v1);
return v2;
}
public java.util.List getAll(java.lang.CharSequence)
{
java.lang.CharSequence v1, v11, v7;
io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry[] v5;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
java.util.List v13;
int v3, v4, v8;
java.lang.String v12;
java.util.LinkedList v10, v2;
boolean v9;
io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry v6;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.CharSequence;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "name");
v2 = null;
v3 = staticinvoke <io.netty.util.AsciiString: int hashCode(java.lang.CharSequence)>(v1);
v4 = v3 & 15;
v5 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry[] entries>;
v6 = v5[v4];
label1:
if v6 == null goto label5;
v7 = v6.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: java.lang.CharSequence key>;
v8 = v6.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: int hash>;
if v8 != v3 goto label4;
if v1 == v7 goto label2;
v9 = staticinvoke <io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(v1, v7);
if v9 == 0 goto label4;
label2:
if v2 != null goto label3;
v10 = new java.util.LinkedList;
specialinvoke v10.<java.util.LinkedList: void <init>()>();
v2 = v10;
label3:
v11 = virtualinvoke v6.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: java.lang.CharSequence getValue()>();
v12 = virtualinvoke v11.<java.lang.Object: java.lang.String toString()>();
virtualinvoke v2.<java.util.LinkedList: void addFirst(java.lang.Object)>(v12);
label4:
v6 = v6.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry next>;
goto label1;
label5:
if v2 != null goto label6;
v13 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
goto label7;
label6:
v13 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(v2);
label7:
return v13;
}
public java.util.List getAll(java.lang.String)
{
java.util.List v2;
java.lang.String v1;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: java.util.List getAll(java.lang.CharSequence)>(v1);
return v2;
}
public void forEach(java.util.function.Consumer)
{
java.util.function.Consumer v1;
java.util.Map$Entry v5;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry v2, v3, v4;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.util.function.Consumer;
v2 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry head>;
v3 = v2.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry after>;
label1:
v4 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry head>;
if v3 == v4 goto label2;
v5 = specialinvoke v3.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: java.util.Map$Entry stringEntry()>();
interfaceinvoke v1.<java.util.function.Consumer: void accept(java.lang.Object)>(v5);
v3 = v3.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry after>;
goto label1;
label2:
return;
}
public void forEach(java.util.function.BiConsumer)
{
java.lang.CharSequence v5, v7;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
java.util.function.BiConsumer v1;
java.lang.String v6, v8;
io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry v2, v3, v4;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.util.function.BiConsumer;
v2 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry head>;
v3 = v2.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry after>;
label1:
v4 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry head>;
if v3 == v4 goto label2;
v5 = virtualinvoke v3.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: java.lang.CharSequence getKey()>();
v6 = virtualinvoke v5.<java.lang.Object: java.lang.String toString()>();
v7 = virtualinvoke v3.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: java.lang.CharSequence getValue()>();
v8 = virtualinvoke v7.<java.lang.Object: java.lang.String toString()>();
interfaceinvoke v1.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>(v6, v8);
v3 = v3.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry after>;
goto label1;
label2:
return;
}
public java.util.List entries()
{
java.util.List v1;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 = specialinvoke v0.<io.vertx.core.MultiMap: java.util.List entries()>();
return v1;
}
public java.util.Iterator iterator()
{
io.vertx.core.http.impl.headers.HeadersMultiMap$1 v1;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 = new io.vertx.core.http.impl.headers.HeadersMultiMap$1;
specialinvoke v1.<io.vertx.core.http.impl.headers.HeadersMultiMap$1: void <init>(io.vertx.core.http.impl.headers.HeadersMultiMap)>(v0);
return v1;
}
public boolean isEmpty()
{
boolean v4;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry v1, v2, v3;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry head>;
v2 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry head>;
v3 = v2.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry after>;
if v1 != v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public java.util.Set names()
{
java.lang.CharSequence v6;
java.util.TreeSet v1;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
java.lang.String v7;
java.util.Comparator v2;
io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry v3, v4, v5;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 = new java.util.TreeSet;
v2 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;
specialinvoke v1.<java.util.TreeSet: void <init>(java.util.Comparator)>(v2);
v3 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry head>;
v4 = v3.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry after>;
label1:
v5 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry head>;
if v4 == v5 goto label2;
v6 = virtualinvoke v4.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: java.lang.CharSequence getKey()>();
v7 = virtualinvoke v6.<java.lang.Object: java.lang.String toString()>();
interfaceinvoke v1.<java.util.Set: boolean add(java.lang.Object)>(v7);
v4 = v4.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry after>;
goto label1;
label2:
return v1;
}
public io.vertx.core.http.impl.headers.HeadersMultiMap clear()
{
io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry[] v1;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry v2, v3, v4;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry[] entries>;
staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>(v1, null);
v2 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry head>;
v3 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry head>;
v4 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry head>;
v3.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry after> = v4;
v2.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry before> = v4;
return v0;
}
public java.lang.String toString()
{
java.util.Iterator v2;
java.lang.Object v4;
java.lang.StringBuilder v1, v5;
java.lang.String v6;
boolean v3;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 = new java.lang.StringBuilder;
specialinvoke v1.<java.lang.StringBuilder: void <init>()>();
v2 = virtualinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v4);
virtualinvoke v5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);
goto label1;
label2:
v6 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.String toString()>();
return v6;
}
public java.lang.Integer getInt(java.lang.CharSequence)
{
java.lang.UnsupportedOperationException v2;
java.lang.CharSequence v1;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.CharSequence;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public int getInt(java.lang.CharSequence, int)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
int v2;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>()>();
throw v3;
}
public java.lang.Short getShort(java.lang.CharSequence)
{
java.lang.UnsupportedOperationException v2;
java.lang.CharSequence v1;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.CharSequence;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public short getShort(java.lang.CharSequence, short)
{
java.lang.UnsupportedOperationException v3;
short v2;
java.lang.CharSequence v1;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: short;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>()>();
throw v3;
}
public java.lang.Long getTimeMillis(java.lang.CharSequence)
{
java.lang.UnsupportedOperationException v2;
java.lang.CharSequence v1;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.CharSequence;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public long getTimeMillis(java.lang.CharSequence, long)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
long v2;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: long;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>()>();
throw v3;
}
public java.util.Iterator iteratorCharSequence()
{
io.vertx.core.http.impl.headers.HeadersMultiMap$2 v1;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 = new io.vertx.core.http.impl.headers.HeadersMultiMap$2;
specialinvoke v1.<io.vertx.core.http.impl.headers.HeadersMultiMap$2: void <init>(io.vertx.core.http.impl.headers.HeadersMultiMap)>(v0);
return v1;
}
public io.netty.handler.codec.http.HttpHeaders addInt(java.lang.CharSequence, int)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
int v2;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>()>();
throw v3;
}
public io.netty.handler.codec.http.HttpHeaders addShort(java.lang.CharSequence, short)
{
java.lang.UnsupportedOperationException v3;
short v2;
java.lang.CharSequence v1;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: short;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>()>();
throw v3;
}
public io.netty.handler.codec.http.HttpHeaders setInt(java.lang.CharSequence, int)
{
java.lang.CharSequence v1;
int v2;
java.lang.String v3;
io.vertx.core.http.impl.headers.HeadersMultiMap v0, v4;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(v2);
v4 = virtualinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap set(java.lang.CharSequence,java.lang.CharSequence)>(v1, v3);
return v4;
}
public io.netty.handler.codec.http.HttpHeaders setShort(java.lang.CharSequence, short)
{
java.lang.UnsupportedOperationException v3;
short v2;
java.lang.CharSequence v1;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: short;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>()>();
throw v3;
}
public void encode(io.netty.buffer.ByteBuf)
{
io.netty.buffer.ByteBuf v1;
java.lang.CharSequence v5, v6;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry v2, v3, v4;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry head>;
v3 = v2.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry after>;
label1:
v4 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry head>;
if v3 == v4 goto label2;
v5 = v3.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: java.lang.CharSequence key>;
v6 = v3.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: java.lang.CharSequence value>;
staticinvoke <io.vertx.core.http.impl.headers.HeadersMultiMap: void encoderHeader(java.lang.CharSequence,java.lang.CharSequence,io.netty.buffer.ByteBuf)>(v5, v6, v1);
v3 = v3.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry after>;
goto label1;
label2:
return;
}
static void encoderHeader(java.lang.CharSequence, java.lang.CharSequence, io.netty.buffer.ByteBuf)
{
java.lang.CharSequence v0, v1;
io.netty.buffer.ByteBuf v2;
int v10, v11, v3, v4, v5, v6, v7, v8, v9;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
v2 := @parameter2: io.netty.buffer.ByteBuf;
v3 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v4 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
v5 = v3 + v4;
v6 = v5 + 4;
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf ensureWritable(int)>(v6);
v7 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int writerIndex()>();
staticinvoke <io.vertx.core.http.impl.headers.HeadersMultiMap: void writeAscii(io.netty.buffer.ByteBuf,int,java.lang.CharSequence)>(v2, v7, v0);
v8 = v7 + v3;
staticinvoke <io.netty.buffer.ByteBufUtil: io.netty.buffer.ByteBuf setShortBE(io.netty.buffer.ByteBuf,int,int)>(v2, v8, 14880);
v9 = v8 + 2;
staticinvoke <io.vertx.core.http.impl.headers.HeadersMultiMap: void writeAscii(io.netty.buffer.ByteBuf,int,java.lang.CharSequence)>(v2, v9, v1);
v10 = v9 + v4;
staticinvoke <io.netty.buffer.ByteBufUtil: io.netty.buffer.ByteBuf setShortBE(io.netty.buffer.ByteBuf,int,int)>(v2, v10, 3338);
v11 = v10 + 2;
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writerIndex(int)>(v11);
return;
}
private static void writeAscii(io.netty.buffer.ByteBuf, int, java.lang.CharSequence)
{
io.netty.buffer.ByteBuf v0;
java.lang.CharSequence v2;
java.nio.charset.Charset v5;
int v1, v4;
boolean v3;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: int;
v2 := @parameter2: java.lang.CharSequence;
v3 = v2 instanceof io.netty.util.AsciiString;
if v3 == 0 goto label1;
v4 = interfaceinvoke v2.<java.lang.CharSequence: int length()>();
staticinvoke <io.netty.buffer.ByteBufUtil: void copy(io.netty.util.AsciiString,int,io.netty.buffer.ByteBuf,int,int)>(v2, 0, v0, v1, v4);
goto label2;
label1:
v5 = <io.netty.util.CharsetUtil: java.nio.charset.Charset US_ASCII>;
virtualinvoke v0.<io.netty.buffer.ByteBuf: int setCharSequence(int,java.lang.CharSequence,java.nio.charset.Charset)>(v1, v2, v5);
label2:
return;
}
private void remove0(int, int, java.lang.CharSequence)
{
java.lang.CharSequence v3, v8;
io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry[] v11, v4;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
int v1, v2, v9;
boolean v10;
io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry v5, v6, v7;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: java.lang.CharSequence;
v4 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry[] entries>;
v5 = v4[v2];
v6 = null;
label1:
if v5 == null goto label7;
v7 = v5.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry next>;
v8 = v5.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: java.lang.CharSequence key>;
v9 = v5.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: int hash>;
if v9 != v1 goto label5;
if v3 == v8 goto label2;
v10 = staticinvoke <io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(v3, v8);
if v10 == 0 goto label5;
label2:
if v6 != null goto label3;
v11 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry[] entries>;
v11[v2] = v7;
goto label4;
label3:
v6.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry next> = v7;
label4:
virtualinvoke v5.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: void remove()>();
goto label6;
label5:
v6 = v5;
label6:
v5 = v7;
goto label1;
label7:
return;
}
private void add0(int, int, java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v3, v4;
io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry[] v7, v9;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
int v1, v2;
java.util.function.BiConsumer v5, v6;
io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry v10, v11, v8;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: java.lang.CharSequence;
v4 := @parameter3: java.lang.CharSequence;
v5 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: java.util.function.BiConsumer validator>;
if v5 == null goto label1;
v6 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: java.util.function.BiConsumer validator>;
interfaceinvoke v6.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>(v3, v4);
label1:
v7 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry[] entries>;
v8 = v7[v2];
v9 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry[] entries>;
v10 = new io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry;
specialinvoke v10.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: void <init>(io.vertx.core.http.impl.headers.HeadersMultiMap,int,java.lang.CharSequence,java.lang.CharSequence)>(v0, v1, v3, v4);
v9[v2] = v10;
v10.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry next> = v8;
v11 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry head>;
virtualinvoke v10.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: void addBefore(io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry)>(v11);
return;
}
private io.vertx.core.http.impl.headers.HeadersMultiMap set0(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v1, v2;
int v3, v4;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence;
v3 = staticinvoke <io.netty.util.AsciiString: int hashCode(java.lang.CharSequence)>(v1);
v4 = v3 & 15;
specialinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: void remove0(int,int,java.lang.CharSequence)>(v3, v4, v1);
if v2 == null goto label1;
specialinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: void add0(int,int,java.lang.CharSequence,java.lang.CharSequence)>(v3, v4, v1, v2);
label1:
return v0;
}
private java.lang.CharSequence get0(java.lang.CharSequence)
{
java.lang.CharSequence v1, v6, v7;
io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry[] v4;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
int v2, v3, v8;
boolean v9;
io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry v5;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.CharSequence;
v2 = staticinvoke <io.netty.util.AsciiString: int hashCode(java.lang.CharSequence)>(v1);
v3 = v2 & 15;
v4 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry[] entries>;
v5 = v4[v3];
v6 = null;
label1:
if v5 == null goto label4;
v7 = v5.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: java.lang.CharSequence key>;
v8 = v5.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: int hash>;
if v8 != v2 goto label3;
if v1 == v7 goto label2;
v9 = staticinvoke <io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(v1, v7);
if v9 == 0 goto label3;
label2:
v6 = virtualinvoke v5.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: java.lang.CharSequence getValue()>();
label3:
v5 = v5.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry next>;
goto label1;
label4:
return v6;
}
private io.vertx.core.MultiMap set0(java.lang.Iterable)
{
java.util.Iterator v2;
java.lang.Object v4, v5, v6;
java.lang.Iterable v1;
boolean v3;
io.vertx.core.http.impl.headers.HeadersMultiMap v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap;
v1 := @parameter0: java.lang.Iterable;
virtualinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap clear()>();
v2 = interfaceinvoke v1.<java.lang.Iterable: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getKey()>();
v6 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
virtualinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap: io.vertx.core.http.impl.headers.HeadersMultiMap add(java.lang.String,java.lang.String)>(v5, v6);
goto label1;
label2:
return v0;
}
static void <clinit>()
{
java.util.function.BiConsumer v1;
boolean v0;
v0 = <io.vertx.core.http.HttpHeaders: boolean DISABLE_HTTP_HEADERS_VALIDATION>;
if v0 != 0 goto label1;
v1 = staticinvoke <io.vertx.core.http.impl.headers.HeadersMultiMap$validateHeader__1165: java.util.function.BiConsumer bootstrap$()>();
<io.vertx.core.http.impl.headers.HeadersMultiMap: java.util.function.BiConsumer HTTP_VALIDATOR> = v1;
goto label2;
label1:
<io.vertx.core.http.impl.headers.HeadersMultiMap: java.util.function.BiConsumer HTTP_VALIDATOR> = null;
label2:
return;
}
}