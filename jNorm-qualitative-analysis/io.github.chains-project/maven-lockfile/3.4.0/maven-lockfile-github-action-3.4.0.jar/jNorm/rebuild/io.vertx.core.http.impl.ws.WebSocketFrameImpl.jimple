public class io.vertx.core.http.impl.ws.WebSocketFrameImpl extends java.lang.Object implements io.vertx.core.http.impl.ws.WebSocketFrameInternal, io.netty.util.ReferenceCounted
{
private final io.vertx.core.http.WebSocketFrameType type;
private final boolean isFinalFrame;
private io.netty.buffer.ByteBuf binaryData;
private boolean closeParsed;
private short closeStatusCode;
private java.lang.String closeReason;
public static io.vertx.core.http.WebSocketFrame binaryFrame(io.vertx.core.buffer.Buffer, boolean)
{
io.netty.buffer.ByteBuf v4;
io.vertx.core.buffer.Buffer v0;
io.vertx.core.http.WebSocketFrameType v3;
io.vertx.core.http.impl.ws.WebSocketFrameImpl v2;
boolean v1;
v0 := @parameter0: io.vertx.core.buffer.Buffer;
v1 := @parameter1: boolean;
v2 = new io.vertx.core.http.impl.ws.WebSocketFrameImpl;
v3 = <io.vertx.core.http.WebSocketFrameType: io.vertx.core.http.WebSocketFrameType BINARY>;
v4 = interfaceinvoke v0.<io.vertx.core.buffer.Buffer: io.netty.buffer.ByteBuf getByteBuf()>();
specialinvoke v2.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: void <init>(io.vertx.core.http.WebSocketFrameType,io.netty.buffer.ByteBuf,boolean)>(v3, v4, v1);
return v2;
}
public static io.vertx.core.http.WebSocketFrame textFrame(java.lang.String, boolean)
{
io.vertx.core.http.impl.ws.WebSocketFrameImpl v2;
java.lang.String v0;
boolean v1;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: boolean;
v2 = new io.vertx.core.http.impl.ws.WebSocketFrameImpl;
specialinvoke v2.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: void <init>(java.lang.String,boolean)>(v0, v1);
return v2;
}
public static io.vertx.core.http.WebSocketFrame continuationFrame(io.vertx.core.buffer.Buffer, boolean)
{
io.netty.buffer.ByteBuf v4;
io.vertx.core.buffer.Buffer v0;
io.vertx.core.http.WebSocketFrameType v3;
io.vertx.core.http.impl.ws.WebSocketFrameImpl v2;
boolean v1;
v0 := @parameter0: io.vertx.core.buffer.Buffer;
v1 := @parameter1: boolean;
v2 = new io.vertx.core.http.impl.ws.WebSocketFrameImpl;
v3 = <io.vertx.core.http.WebSocketFrameType: io.vertx.core.http.WebSocketFrameType CONTINUATION>;
v4 = interfaceinvoke v0.<io.vertx.core.buffer.Buffer: io.netty.buffer.ByteBuf getByteBuf()>();
specialinvoke v2.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: void <init>(io.vertx.core.http.WebSocketFrameType,io.netty.buffer.ByteBuf,boolean)>(v3, v4, v1);
return v2;
}
public static io.vertx.core.http.WebSocketFrame pingFrame(io.vertx.core.buffer.Buffer)
{
io.netty.buffer.ByteBuf v3;
io.vertx.core.buffer.Buffer v0;
io.vertx.core.http.WebSocketFrameType v2;
io.vertx.core.http.impl.ws.WebSocketFrameImpl v1;
v0 := @parameter0: io.vertx.core.buffer.Buffer;
v1 = new io.vertx.core.http.impl.ws.WebSocketFrameImpl;
v2 = <io.vertx.core.http.WebSocketFrameType: io.vertx.core.http.WebSocketFrameType PING>;
v3 = interfaceinvoke v0.<io.vertx.core.buffer.Buffer: io.netty.buffer.ByteBuf getByteBuf()>();
specialinvoke v1.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: void <init>(io.vertx.core.http.WebSocketFrameType,io.netty.buffer.ByteBuf,boolean)>(v2, v3, 1);
return v1;
}
public static io.vertx.core.http.WebSocketFrame pongFrame(io.vertx.core.buffer.Buffer)
{
io.netty.buffer.ByteBuf v3;
io.vertx.core.buffer.Buffer v0;
io.vertx.core.http.WebSocketFrameType v2;
io.vertx.core.http.impl.ws.WebSocketFrameImpl v1;
v0 := @parameter0: io.vertx.core.buffer.Buffer;
v1 = new io.vertx.core.http.impl.ws.WebSocketFrameImpl;
v2 = <io.vertx.core.http.WebSocketFrameType: io.vertx.core.http.WebSocketFrameType PONG>;
v3 = interfaceinvoke v0.<io.vertx.core.buffer.Buffer: io.netty.buffer.ByteBuf getByteBuf()>();
specialinvoke v1.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: void <init>(io.vertx.core.http.WebSocketFrameType,io.netty.buffer.ByteBuf,boolean)>(v2, v3, 1);
return v1;
}
public void <init>()
{
io.vertx.core.http.impl.ws.WebSocketFrameImpl v0;
io.netty.buffer.ByteBuf v1;
v0 := @this: io.vertx.core.http.impl.ws.WebSocketFrameImpl;
v1 = <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf EMPTY_BUFFER>;
specialinvoke v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: void <init>(io.vertx.core.http.WebSocketFrameType,io.netty.buffer.ByteBuf,boolean)>(null, v1, 1);
return;
}
public void <init>(io.vertx.core.http.WebSocketFrameType)
{
io.vertx.core.http.impl.ws.WebSocketFrameImpl v0;
io.netty.buffer.ByteBuf v2;
io.vertx.core.http.WebSocketFrameType v1;
v0 := @this: io.vertx.core.http.impl.ws.WebSocketFrameImpl;
v1 := @parameter0: io.vertx.core.http.WebSocketFrameType;
v2 = <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf EMPTY_BUFFER>;
specialinvoke v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: void <init>(io.vertx.core.http.WebSocketFrameType,io.netty.buffer.ByteBuf,boolean)>(v1, v2, 1);
return;
}
public void <init>(java.lang.String)
{
io.vertx.core.http.impl.ws.WebSocketFrameImpl v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.impl.ws.WebSocketFrameImpl;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: void <init>(java.lang.String,boolean)>(v1, 1);
return;
}
public void <init>(java.lang.String, boolean)
{
io.netty.buffer.ByteBuf v5;
java.nio.charset.Charset v4;
io.vertx.core.http.WebSocketFrameType v3;
io.vertx.core.http.impl.ws.WebSocketFrameImpl v0;
java.lang.String v1;
boolean v2;
v0 := @this: io.vertx.core.http.impl.ws.WebSocketFrameImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: boolean closeParsed> = 0;
v3 = <io.vertx.core.http.WebSocketFrameType: io.vertx.core.http.WebSocketFrameType TEXT>;
v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.vertx.core.http.WebSocketFrameType type> = v3;
v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: boolean isFinalFrame> = v2;
v4 = <io.netty.util.CharsetUtil: java.nio.charset.Charset UTF_8>;
v5 = staticinvoke <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf copiedBuffer(java.lang.CharSequence,java.nio.charset.Charset)>(v1, v4);
v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.netty.buffer.ByteBuf binaryData> = v5;
return;
}
public void <init>(io.vertx.core.http.WebSocketFrameType, io.netty.buffer.ByteBuf)
{
io.vertx.core.http.impl.ws.WebSocketFrameImpl v0;
io.netty.buffer.ByteBuf v2;
io.vertx.core.http.WebSocketFrameType v1;
v0 := @this: io.vertx.core.http.impl.ws.WebSocketFrameImpl;
v1 := @parameter0: io.vertx.core.http.WebSocketFrameType;
v2 := @parameter1: io.netty.buffer.ByteBuf;
specialinvoke v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: void <init>(io.vertx.core.http.WebSocketFrameType,io.netty.buffer.ByteBuf,boolean)>(v1, v2, 1);
return;
}
public void <init>(io.vertx.core.http.WebSocketFrameType, io.netty.buffer.ByteBuf, boolean)
{
io.netty.buffer.ByteBuf v2, v4;
io.vertx.core.http.WebSocketFrameType v1;
io.vertx.core.http.impl.ws.WebSocketFrameImpl v0;
boolean v3;
v0 := @this: io.vertx.core.http.impl.ws.WebSocketFrameImpl;
v1 := @parameter0: io.vertx.core.http.WebSocketFrameType;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 := @parameter2: boolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: boolean closeParsed> = 0;
v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.vertx.core.http.WebSocketFrameType type> = v1;
v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: boolean isFinalFrame> = v3;
v4 = staticinvoke <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf unreleasableBuffer(io.netty.buffer.ByteBuf)>(v2);
v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.netty.buffer.ByteBuf binaryData> = v4;
return;
}
public boolean isText()
{
io.vertx.core.http.WebSocketFrameType v1, v2;
io.vertx.core.http.impl.ws.WebSocketFrameImpl v0;
boolean v3;
v0 := @this: io.vertx.core.http.impl.ws.WebSocketFrameImpl;
v1 = v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.vertx.core.http.WebSocketFrameType type>;
v2 = <io.vertx.core.http.WebSocketFrameType: io.vertx.core.http.WebSocketFrameType TEXT>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isBinary()
{
io.vertx.core.http.WebSocketFrameType v1, v2;
io.vertx.core.http.impl.ws.WebSocketFrameImpl v0;
boolean v3;
v0 := @this: io.vertx.core.http.impl.ws.WebSocketFrameImpl;
v1 = v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.vertx.core.http.WebSocketFrameType type>;
v2 = <io.vertx.core.http.WebSocketFrameType: io.vertx.core.http.WebSocketFrameType BINARY>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isContinuation()
{
io.vertx.core.http.WebSocketFrameType v1, v2;
io.vertx.core.http.impl.ws.WebSocketFrameImpl v0;
boolean v3;
v0 := @this: io.vertx.core.http.impl.ws.WebSocketFrameImpl;
v1 = v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.vertx.core.http.WebSocketFrameType type>;
v2 = <io.vertx.core.http.WebSocketFrameType: io.vertx.core.http.WebSocketFrameType CONTINUATION>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isClose()
{
io.vertx.core.http.WebSocketFrameType v1, v2;
io.vertx.core.http.impl.ws.WebSocketFrameImpl v0;
boolean v3;
v0 := @this: io.vertx.core.http.impl.ws.WebSocketFrameImpl;
v1 = v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.vertx.core.http.WebSocketFrameType type>;
v2 = <io.vertx.core.http.WebSocketFrameType: io.vertx.core.http.WebSocketFrameType CLOSE>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isPing()
{
io.vertx.core.http.WebSocketFrameType v1, v2;
io.vertx.core.http.impl.ws.WebSocketFrameImpl v0;
boolean v3;
v0 := @this: io.vertx.core.http.impl.ws.WebSocketFrameImpl;
v1 = v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.vertx.core.http.WebSocketFrameType type>;
v2 = <io.vertx.core.http.WebSocketFrameType: io.vertx.core.http.WebSocketFrameType PING>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public io.netty.buffer.ByteBuf getBinaryData()
{
io.vertx.core.http.impl.ws.WebSocketFrameImpl v0;
io.netty.buffer.ByteBuf v1;
v0 := @this: io.vertx.core.http.impl.ws.WebSocketFrameImpl;
v1 = v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.netty.buffer.ByteBuf binaryData>;
return v1;
}
public java.lang.String textData()
{
io.netty.buffer.ByteBuf v1;
java.nio.charset.Charset v2;
io.vertx.core.http.impl.ws.WebSocketFrameImpl v0;
java.lang.String v3;
v0 := @this: io.vertx.core.http.impl.ws.WebSocketFrameImpl;
v1 = virtualinvoke v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.netty.buffer.ByteBuf getBinaryData()>();
v2 = <io.netty.util.CharsetUtil: java.nio.charset.Charset UTF_8>;
v3 = virtualinvoke v1.<io.netty.buffer.ByteBuf: java.lang.String toString(java.nio.charset.Charset)>(v2);
return v3;
}
public io.vertx.core.buffer.Buffer binaryData()
{
io.vertx.core.http.impl.ws.WebSocketFrameImpl v0;
io.netty.buffer.ByteBuf v1;
io.vertx.core.buffer.Buffer v2;
v0 := @this: io.vertx.core.http.impl.ws.WebSocketFrameImpl;
v1 = v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.netty.buffer.ByteBuf binaryData>;
v2 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(io.netty.buffer.ByteBuf)>(v1);
return v2;
}
public void setBinaryData(io.netty.buffer.ByteBuf)
{
io.netty.buffer.ByteBuf v1, v2, v3;
io.vertx.core.http.impl.ws.WebSocketFrameImpl v0;
v0 := @this: io.vertx.core.http.impl.ws.WebSocketFrameImpl;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 = v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.netty.buffer.ByteBuf binaryData>;
if v2 == null goto label1;
v3 = v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.netty.buffer.ByteBuf binaryData>;
virtualinvoke v3.<io.netty.buffer.ByteBuf: boolean release()>();
label1:
v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.netty.buffer.ByteBuf binaryData> = v1;
return;
}
public void setTextData(java.lang.String)
{
io.netty.buffer.ByteBuf v2, v3, v5;
java.nio.charset.Charset v4;
io.vertx.core.http.impl.ws.WebSocketFrameImpl v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.impl.ws.WebSocketFrameImpl;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.netty.buffer.ByteBuf binaryData>;
if v2 == null goto label1;
v3 = v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.netty.buffer.ByteBuf binaryData>;
virtualinvoke v3.<io.netty.buffer.ByteBuf: boolean release()>();
label1:
v4 = <io.netty.util.CharsetUtil: java.nio.charset.Charset UTF_8>;
v5 = staticinvoke <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf copiedBuffer(java.lang.CharSequence,java.nio.charset.Charset)>(v1, v4);
v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.netty.buffer.ByteBuf binaryData> = v5;
return;
}
public int length()
{
int v2;
io.vertx.core.http.impl.ws.WebSocketFrameImpl v0;
io.netty.buffer.ByteBuf v1;
v0 := @this: io.vertx.core.http.impl.ws.WebSocketFrameImpl;
v1 = v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.netty.buffer.ByteBuf binaryData>;
v2 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
return v2;
}
public java.lang.String toString()
{
io.netty.buffer.ByteBuf v4;
io.vertx.core.http.WebSocketFrameType v3;
java.lang.Class v1;
io.vertx.core.http.impl.ws.WebSocketFrameImpl v0;
java.lang.String v2, v5;
v0 := @this: io.vertx.core.http.impl.ws.WebSocketFrameImpl;
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v2 = virtualinvoke v1.<java.lang.Class: java.lang.String getSimpleName()>();
v3 = v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.vertx.core.http.WebSocketFrameType type>;
v4 = virtualinvoke v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.netty.buffer.ByteBuf getBinaryData()>();
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,io.vertx.core.http.WebSocketFrameType,io.netty.buffer.ByteBuf)>(v2, v3, v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001(type: \u0001, data: \u0001)");
return v5;
}
public int refCnt()
{
int v2;
io.vertx.core.http.impl.ws.WebSocketFrameImpl v0;
io.netty.buffer.ByteBuf v1;
v0 := @this: io.vertx.core.http.impl.ws.WebSocketFrameImpl;
v1 = v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.netty.buffer.ByteBuf binaryData>;
v2 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int refCnt()>();
return v2;
}
public io.netty.util.ReferenceCounted retain()
{
io.vertx.core.http.impl.ws.WebSocketFrameImpl v0;
io.netty.buffer.ByteBuf v1, v2;
v0 := @this: io.vertx.core.http.impl.ws.WebSocketFrameImpl;
v1 = v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.netty.buffer.ByteBuf binaryData>;
v2 = virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf retain()>();
return v2;
}
public io.netty.util.ReferenceCounted retain(int)
{
io.netty.buffer.ByteBuf v2, v3;
int v1;
io.vertx.core.http.impl.ws.WebSocketFrameImpl v0;
v0 := @this: io.vertx.core.http.impl.ws.WebSocketFrameImpl;
v1 := @parameter0: int;
v2 = v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.netty.buffer.ByteBuf binaryData>;
v3 = virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf retain(int)>(v1);
return v3;
}
public boolean release()
{
io.vertx.core.http.impl.ws.WebSocketFrameImpl v0;
io.netty.buffer.ByteBuf v1;
boolean v2;
v0 := @this: io.vertx.core.http.impl.ws.WebSocketFrameImpl;
v1 = v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.netty.buffer.ByteBuf binaryData>;
v2 = virtualinvoke v1.<io.netty.buffer.ByteBuf: boolean release()>();
return v2;
}
public boolean release(int)
{
io.netty.buffer.ByteBuf v2;
int v1;
io.vertx.core.http.impl.ws.WebSocketFrameImpl v0;
boolean v3;
v0 := @this: io.vertx.core.http.impl.ws.WebSocketFrameImpl;
v1 := @parameter0: int;
v2 = v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.netty.buffer.ByteBuf binaryData>;
v3 = virtualinvoke v2.<io.netty.buffer.ByteBuf: boolean release(int)>(v1);
return v3;
}
public io.netty.util.ReferenceCounted touch()
{
io.vertx.core.http.impl.ws.WebSocketFrameImpl v0;
io.netty.buffer.ByteBuf v1;
v0 := @this: io.vertx.core.http.impl.ws.WebSocketFrameImpl;
v1 = v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.netty.buffer.ByteBuf binaryData>;
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf touch()>();
return v0;
}
public io.netty.util.ReferenceCounted touch(java.lang.Object)
{
java.lang.Object v1;
io.vertx.core.http.impl.ws.WebSocketFrameImpl v0;
io.netty.buffer.ByteBuf v2;
v0 := @this: io.vertx.core.http.impl.ws.WebSocketFrameImpl;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.netty.buffer.ByteBuf binaryData>;
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf touch(java.lang.Object)>(v1);
return v0;
}
public boolean isFinal()
{
io.vertx.core.http.impl.ws.WebSocketFrameImpl v0;
boolean v1;
v0 := @this: io.vertx.core.http.impl.ws.WebSocketFrameImpl;
v1 = v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: boolean isFinalFrame>;
return v1;
}
private void parseCloseFrame()
{
short v5;
io.netty.buffer.ByteBuf v2, v4, v6;
java.nio.charset.Charset v9;
int v1, v3, v7, v8;
io.vertx.core.http.impl.ws.WebSocketFrameImpl v0;
java.lang.String v10;
v0 := @this: io.vertx.core.http.impl.ws.WebSocketFrameImpl;
v1 = virtualinvoke v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: int length()>();
if v1 >= 2 goto label1;
v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: short closeStatusCode> = 1000;
v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: java.lang.String closeReason> = null;
goto label3;
label1:
v2 = v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.netty.buffer.ByteBuf binaryData>;
v3 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readerIndex()>();
v4 = v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.netty.buffer.ByteBuf binaryData>;
v5 = virtualinvoke v4.<io.netty.buffer.ByteBuf: short getShort(int)>(v3);
v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: short closeStatusCode> = v5;
if v1 != 2 goto label2;
v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: java.lang.String closeReason> = null;
goto label3;
label2:
v6 = v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.netty.buffer.ByteBuf binaryData>;
v7 = v3 + 2;
v8 = v1 - 2;
v9 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;
v10 = virtualinvoke v6.<io.netty.buffer.ByteBuf: java.lang.String toString(int,int,java.nio.charset.Charset)>(v7, v8, v9);
v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: java.lang.String closeReason> = v10;
label3:
return;
}
private void checkClose()
{
java.lang.IllegalStateException v2;
io.vertx.core.http.impl.ws.WebSocketFrameImpl v0;
boolean v1;
v0 := @this: io.vertx.core.http.impl.ws.WebSocketFrameImpl;
v1 = virtualinvoke v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: boolean isClose()>();
if v1 != 0 goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This should be a close frame");
throw v2;
label1:
return;
}
public short closeStatusCode()
{
short v2;
io.vertx.core.http.impl.ws.WebSocketFrameImpl v0;
boolean v1;
v0 := @this: io.vertx.core.http.impl.ws.WebSocketFrameImpl;
specialinvoke v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: void checkClose()>();
v1 = v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: boolean closeParsed>;
if v1 != 0 goto label1;
specialinvoke v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: void parseCloseFrame()>();
label1:
v2 = v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: short closeStatusCode>;
return v2;
}
public java.lang.String closeReason()
{
io.vertx.core.http.impl.ws.WebSocketFrameImpl v0;
java.lang.String v2;
boolean v1;
v0 := @this: io.vertx.core.http.impl.ws.WebSocketFrameImpl;
specialinvoke v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: void checkClose()>();
v1 = v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: boolean closeParsed>;
if v1 != 0 goto label1;
specialinvoke v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: void parseCloseFrame()>();
label1:
v2 = v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: java.lang.String closeReason>;
return v2;
}
public io.vertx.core.http.WebSocketFrameType type()
{
io.vertx.core.http.impl.ws.WebSocketFrameImpl v0;
io.vertx.core.http.WebSocketFrameType v1;
v0 := @this: io.vertx.core.http.impl.ws.WebSocketFrameImpl;
v1 = v0.<io.vertx.core.http.impl.ws.WebSocketFrameImpl: io.vertx.core.http.WebSocketFrameType type>;
return v1;
}
}