public class io.vertx.core.impl.ConcurrentHashSet extends java.lang.Object implements java.util.Set
{
private final java.util.Map map;
private static final java.lang.Object OBJ;
public void <init>(int)
{
int v1;
java.util.concurrent.ConcurrentHashMap v2;
io.vertx.core.impl.ConcurrentHashSet v0;
v0 := @this: io.vertx.core.impl.ConcurrentHashSet;
v1 := @parameter0: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v2.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(v1);
v0.<io.vertx.core.impl.ConcurrentHashSet: java.util.Map map> = v2;
return;
}
public void <init>()
{
java.util.concurrent.ConcurrentHashMap v1;
io.vertx.core.impl.ConcurrentHashSet v0;
v0 := @this: io.vertx.core.impl.ConcurrentHashSet;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v0.<io.vertx.core.impl.ConcurrentHashSet: java.util.Map map> = v1;
return;
}
public int size()
{
int v2;
io.vertx.core.impl.ConcurrentHashSet v0;
java.util.Map v1;
v0 := @this: io.vertx.core.impl.ConcurrentHashSet;
v1 = v0.<io.vertx.core.impl.ConcurrentHashSet: java.util.Map map>;
v2 = interfaceinvoke v1.<java.util.Map: int size()>();
return v2;
}
public boolean isEmpty()
{
io.vertx.core.impl.ConcurrentHashSet v0;
boolean v2;
java.util.Map v1;
v0 := @this: io.vertx.core.impl.ConcurrentHashSet;
v1 = v0.<io.vertx.core.impl.ConcurrentHashSet: java.util.Map map>;
v2 = interfaceinvoke v1.<java.util.Map: boolean isEmpty()>();
return v2;
}
public boolean contains(java.lang.Object)
{
io.vertx.core.impl.ConcurrentHashSet v0;
java.util.Map v2;
java.lang.Object v1;
boolean v3;
v0 := @this: io.vertx.core.impl.ConcurrentHashSet;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.vertx.core.impl.ConcurrentHashSet: java.util.Map map>;
v3 = interfaceinvoke v2.<java.util.Map: boolean containsKey(java.lang.Object)>(v1);
return v3;
}
public java.util.Iterator iterator()
{
java.util.Iterator v3;
io.vertx.core.impl.ConcurrentHashSet v0;
java.util.Map v1;
java.util.Set v2;
v0 := @this: io.vertx.core.impl.ConcurrentHashSet;
v1 = v0.<io.vertx.core.impl.ConcurrentHashSet: java.util.Map map>;
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set keySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
return v3;
}
public java.lang.Object[] toArray()
{
java.lang.Object[] v3;
io.vertx.core.impl.ConcurrentHashSet v0;
java.util.Map v1;
java.util.Set v2;
v0 := @this: io.vertx.core.impl.ConcurrentHashSet;
v1 = v0.<io.vertx.core.impl.ConcurrentHashSet: java.util.Map map>;
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set keySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.lang.Object[] toArray()>();
return v3;
}
public java.lang.Object[] toArray(java.lang.Object[])
{
java.lang.Object[] v1, v4;
io.vertx.core.impl.ConcurrentHashSet v0;
java.util.Map v2;
java.util.Set v3;
v0 := @this: io.vertx.core.impl.ConcurrentHashSet;
v1 := @parameter0: java.lang.Object[];
v2 = v0.<io.vertx.core.impl.ConcurrentHashSet: java.util.Map map>;
v3 = interfaceinvoke v2.<java.util.Map: java.util.Set keySet()>();
v4 = interfaceinvoke v3.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(v1);
return v4;
}
public boolean add(java.lang.Object)
{
io.vertx.core.impl.ConcurrentHashSet v0;
java.util.Map v2;
java.lang.Object v1, v3, v4;
boolean v5;
v0 := @this: io.vertx.core.impl.ConcurrentHashSet;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.vertx.core.impl.ConcurrentHashSet: java.util.Map map>;
v3 = <io.vertx.core.impl.ConcurrentHashSet: java.lang.Object OBJ>;
v4 = interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v3);
if v4 != null goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
public boolean remove(java.lang.Object)
{
io.vertx.core.impl.ConcurrentHashSet v0;
java.util.Map v2;
java.lang.Object v1, v3;
boolean v4;
v0 := @this: io.vertx.core.impl.ConcurrentHashSet;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.vertx.core.impl.ConcurrentHashSet: java.util.Map map>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v1);
if v3 == null goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public boolean containsAll(java.util.Collection)
{
io.vertx.core.impl.ConcurrentHashSet v0;
java.util.Collection v1;
java.util.Map v2;
java.util.Set v3;
boolean v4;
v0 := @this: io.vertx.core.impl.ConcurrentHashSet;
v1 := @parameter0: java.util.Collection;
v2 = v0.<io.vertx.core.impl.ConcurrentHashSet: java.util.Map map>;
v3 = interfaceinvoke v2.<java.util.Map: java.util.Set keySet()>();
v4 = interfaceinvoke v3.<java.util.Set: boolean containsAll(java.util.Collection)>(v1);
return v4;
}
public boolean addAll(java.util.Collection)
{
java.util.Iterator v3;
io.vertx.core.impl.ConcurrentHashSet v0;
java.util.Collection v1;
java.util.Map v6;
java.lang.Object v5, v7, v8;
boolean v2, v4;
v0 := @this: io.vertx.core.impl.ConcurrentHashSet;
v1 := @parameter0: java.util.Collection;
v2 = 0;
v3 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = v0.<io.vertx.core.impl.ConcurrentHashSet: java.util.Map map>;
v7 = <io.vertx.core.impl.ConcurrentHashSet: java.lang.Object OBJ>;
v8 = interfaceinvoke v6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v5, v7);
if v8 != null goto label1;
v2 = 1;
goto label1;
label2:
return v2;
}
public boolean retainAll(java.util.Collection)
{
java.lang.UnsupportedOperationException v2;
io.vertx.core.impl.ConcurrentHashSet v0;
java.util.Collection v1;
v0 := @this: io.vertx.core.impl.ConcurrentHashSet;
v1 := @parameter0: java.util.Collection;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public boolean removeAll(java.util.Collection)
{
java.lang.UnsupportedOperationException v2;
io.vertx.core.impl.ConcurrentHashSet v0;
java.util.Collection v1;
v0 := @this: io.vertx.core.impl.ConcurrentHashSet;
v1 := @parameter0: java.util.Collection;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public void clear()
{
io.vertx.core.impl.ConcurrentHashSet v0;
java.util.Map v1;
v0 := @this: io.vertx.core.impl.ConcurrentHashSet;
v1 = v0.<io.vertx.core.impl.ConcurrentHashSet: java.util.Map map>;
interfaceinvoke v1.<java.util.Map: void clear()>();
return;
}
static void <clinit>()
{
java.lang.Object v0;
v0 = new java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
<io.vertx.core.impl.ConcurrentHashSet: java.lang.Object OBJ> = v0;
return;
}
}