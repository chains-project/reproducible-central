class io.vertx.core.impl.DuplicatedContext extends java.lang.Object implements io.vertx.core.impl.ContextInternal
{
protected final io.vertx.core.impl.ContextBase delegate;
private java.util.concurrent.ConcurrentMap localData;
void <init>(io.vertx.core.impl.ContextBase)
{
io.vertx.core.impl.ContextBase v1;
io.vertx.core.impl.DuplicatedContext v0;
v0 := @this: io.vertx.core.impl.DuplicatedContext;
v1 := @parameter0: io.vertx.core.impl.ContextBase;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.impl.DuplicatedContext: io.vertx.core.impl.ContextBase delegate> = v1;
return;
}
public boolean inThread()
{
io.vertx.core.impl.ContextBase v1;
io.vertx.core.impl.DuplicatedContext v0;
boolean v2;
v0 := @this: io.vertx.core.impl.DuplicatedContext;
v1 = v0.<io.vertx.core.impl.DuplicatedContext: io.vertx.core.impl.ContextBase delegate>;
v2 = virtualinvoke v1.<io.vertx.core.impl.ContextBase: boolean inThread()>();
return v2;
}
public final io.vertx.core.impl.CloseFuture closeFuture()
{
io.vertx.core.impl.ContextBase v1;
io.vertx.core.impl.DuplicatedContext v0;
io.vertx.core.impl.CloseFuture v2;
v0 := @this: io.vertx.core.impl.DuplicatedContext;
v1 = v0.<io.vertx.core.impl.DuplicatedContext: io.vertx.core.impl.ContextBase delegate>;
v2 = virtualinvoke v1.<io.vertx.core.impl.ContextBase: io.vertx.core.impl.CloseFuture closeFuture()>();
return v2;
}
public final io.vertx.core.spi.tracing.VertxTracer tracer()
{
io.vertx.core.spi.tracing.VertxTracer v2;
io.vertx.core.impl.ContextBase v1;
io.vertx.core.impl.DuplicatedContext v0;
v0 := @this: io.vertx.core.impl.DuplicatedContext;
v1 = v0.<io.vertx.core.impl.DuplicatedContext: io.vertx.core.impl.ContextBase delegate>;
v2 = virtualinvoke v1.<io.vertx.core.impl.ContextBase: io.vertx.core.spi.tracing.VertxTracer tracer()>();
return v2;
}
public final io.vertx.core.json.JsonObject config()
{
io.vertx.core.json.JsonObject v2;
io.vertx.core.impl.ContextBase v1;
io.vertx.core.impl.DuplicatedContext v0;
v0 := @this: io.vertx.core.impl.DuplicatedContext;
v1 = v0.<io.vertx.core.impl.DuplicatedContext: io.vertx.core.impl.ContextBase delegate>;
v2 = virtualinvoke v1.<io.vertx.core.impl.ContextBase: io.vertx.core.json.JsonObject config()>();
return v2;
}
public final io.vertx.core.Context exceptionHandler(io.vertx.core.Handler)
{
io.vertx.core.impl.ContextBase v2;
io.vertx.core.Handler v1;
io.vertx.core.impl.DuplicatedContext v0;
v0 := @this: io.vertx.core.impl.DuplicatedContext;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.impl.DuplicatedContext: io.vertx.core.impl.ContextBase delegate>;
virtualinvoke v2.<io.vertx.core.impl.ContextBase: io.vertx.core.Context exceptionHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public java.util.concurrent.Executor executor()
{
io.vertx.core.impl.ContextBase v1;
io.vertx.core.impl.DuplicatedContext v0;
java.util.concurrent.Executor v2;
v0 := @this: io.vertx.core.impl.DuplicatedContext;
v1 = v0.<io.vertx.core.impl.DuplicatedContext: io.vertx.core.impl.ContextBase delegate>;
v2 = virtualinvoke v1.<io.vertx.core.impl.ContextBase: java.util.concurrent.Executor executor()>();
return v2;
}
public final io.vertx.core.Handler exceptionHandler()
{
io.vertx.core.impl.ContextBase v1;
io.vertx.core.Handler v2;
io.vertx.core.impl.DuplicatedContext v0;
v0 := @this: io.vertx.core.impl.DuplicatedContext;
v1 = v0.<io.vertx.core.impl.DuplicatedContext: io.vertx.core.impl.ContextBase delegate>;
v2 = virtualinvoke v1.<io.vertx.core.impl.ContextBase: io.vertx.core.Handler exceptionHandler()>();
return v2;
}
public final io.netty.channel.EventLoop nettyEventLoop()
{
io.vertx.core.impl.ContextBase v1;
io.netty.channel.EventLoop v2;
io.vertx.core.impl.DuplicatedContext v0;
v0 := @this: io.vertx.core.impl.DuplicatedContext;
v1 = v0.<io.vertx.core.impl.DuplicatedContext: io.vertx.core.impl.ContextBase delegate>;
v2 = virtualinvoke v1.<io.vertx.core.impl.ContextBase: io.netty.channel.EventLoop nettyEventLoop()>();
return v2;
}
public final io.vertx.core.impl.Deployment getDeployment()
{
io.vertx.core.impl.ContextBase v1;
io.vertx.core.impl.Deployment v2;
io.vertx.core.impl.DuplicatedContext v0;
v0 := @this: io.vertx.core.impl.DuplicatedContext;
v1 = v0.<io.vertx.core.impl.DuplicatedContext: io.vertx.core.impl.ContextBase delegate>;
v2 = virtualinvoke v1.<io.vertx.core.impl.ContextBase: io.vertx.core.impl.Deployment getDeployment()>();
return v2;
}
public final io.vertx.core.impl.VertxInternal owner()
{
io.vertx.core.impl.ContextBase v1;
io.vertx.core.impl.VertxInternal v2;
io.vertx.core.impl.DuplicatedContext v0;
v0 := @this: io.vertx.core.impl.DuplicatedContext;
v1 = v0.<io.vertx.core.impl.DuplicatedContext: io.vertx.core.impl.ContextBase delegate>;
v2 = virtualinvoke v1.<io.vertx.core.impl.ContextBase: io.vertx.core.impl.VertxInternal owner()>();
return v2;
}
public final java.lang.ClassLoader classLoader()
{
io.vertx.core.impl.ContextBase v1;
java.lang.ClassLoader v2;
io.vertx.core.impl.DuplicatedContext v0;
v0 := @this: io.vertx.core.impl.DuplicatedContext;
v1 = v0.<io.vertx.core.impl.DuplicatedContext: io.vertx.core.impl.ContextBase delegate>;
v2 = virtualinvoke v1.<io.vertx.core.impl.ContextBase: java.lang.ClassLoader classLoader()>();
return v2;
}
public io.vertx.core.impl.WorkerPool workerPool()
{
io.vertx.core.impl.ContextBase v1;
io.vertx.core.impl.WorkerPool v2;
io.vertx.core.impl.DuplicatedContext v0;
v0 := @this: io.vertx.core.impl.DuplicatedContext;
v1 = v0.<io.vertx.core.impl.DuplicatedContext: io.vertx.core.impl.ContextBase delegate>;
v2 = virtualinvoke v1.<io.vertx.core.impl.ContextBase: io.vertx.core.impl.WorkerPool workerPool()>();
return v2;
}
public final void reportException(java.lang.Throwable)
{
java.lang.Throwable v1;
io.vertx.core.impl.ContextBase v2;
io.vertx.core.impl.DuplicatedContext v0;
v0 := @this: io.vertx.core.impl.DuplicatedContext;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.vertx.core.impl.DuplicatedContext: io.vertx.core.impl.ContextBase delegate>;
virtualinvoke v2.<io.vertx.core.impl.ContextBase: void reportException(java.lang.Throwable)>(v1);
return;
}
public final java.util.concurrent.ConcurrentMap contextData()
{
io.vertx.core.impl.ContextBase v1;
io.vertx.core.impl.DuplicatedContext v0;
java.util.concurrent.ConcurrentMap v2;
v0 := @this: io.vertx.core.impl.DuplicatedContext;
v1 = v0.<io.vertx.core.impl.DuplicatedContext: io.vertx.core.impl.ContextBase delegate>;
v2 = virtualinvoke v1.<io.vertx.core.impl.ContextBase: java.util.concurrent.ConcurrentMap contextData()>();
return v2;
}
public final java.util.concurrent.ConcurrentMap localContextData()
{
java.lang.Throwable v4;
io.vertx.core.impl.DuplicatedContext v0;
java.util.concurrent.ConcurrentHashMap v2;
java.util.concurrent.ConcurrentMap v1, v3;
v0 := @this: io.vertx.core.impl.DuplicatedContext;
entermonitor v0;
label1:
v1 = v0.<io.vertx.core.impl.DuplicatedContext: java.util.concurrent.ConcurrentMap localData>;
if v1 != null goto label2;
v2 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v0.<io.vertx.core.impl.DuplicatedContext: java.util.concurrent.ConcurrentMap localData> = v2;
label2:
v3 = v0.<io.vertx.core.impl.DuplicatedContext: java.util.concurrent.ConcurrentMap localData>;
exitmonitor v0;
label3:
return v3;
label4:
v4 := @caughtexception;
exitmonitor v0;
throw v4;
catch java.lang.Throwable from label1 to label3 with label4;
}
public final io.vertx.core.Future executeBlockingInternal(io.vertx.core.Handler)
{
io.vertx.core.impl.ContextBase v2, v4;
io.vertx.core.impl.DuplicatedContext v0;
io.vertx.core.impl.TaskQueue v5;
io.vertx.core.impl.WorkerPool v3;
io.vertx.core.Handler v1;
io.vertx.core.Future v6;
v0 := @this: io.vertx.core.impl.DuplicatedContext;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.impl.DuplicatedContext: io.vertx.core.impl.ContextBase delegate>;
v3 = v2.<io.vertx.core.impl.ContextBase: io.vertx.core.impl.WorkerPool internalWorkerPool>;
v4 = v0.<io.vertx.core.impl.DuplicatedContext: io.vertx.core.impl.ContextBase delegate>;
v5 = v4.<io.vertx.core.impl.ContextBase: io.vertx.core.impl.TaskQueue internalOrderedTasks>;
v6 = staticinvoke <io.vertx.core.impl.ContextBase: io.vertx.core.Future executeBlocking(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.TaskQueue)>(v0, v1, v3, v5);
return v6;
}
public final io.vertx.core.Future executeBlockingInternal(io.vertx.core.Handler, boolean)
{
io.vertx.core.impl.WorkerPool v4;
io.vertx.core.Future v7;
io.vertx.core.impl.ContextBase v3, v5;
io.vertx.core.impl.DuplicatedContext v0;
io.vertx.core.impl.TaskQueue v6;
io.vertx.core.Handler v1;
boolean v2;
v0 := @this: io.vertx.core.impl.DuplicatedContext;
v1 := @parameter0: io.vertx.core.Handler;
v2 := @parameter1: boolean;
v3 = v0.<io.vertx.core.impl.DuplicatedContext: io.vertx.core.impl.ContextBase delegate>;
v4 = v3.<io.vertx.core.impl.ContextBase: io.vertx.core.impl.WorkerPool internalWorkerPool>;
if v2 == 0 goto label1;
v5 = v0.<io.vertx.core.impl.DuplicatedContext: io.vertx.core.impl.ContextBase delegate>;
v6 = v5.<io.vertx.core.impl.ContextBase: io.vertx.core.impl.TaskQueue internalOrderedTasks>;
goto label2;
label1:
v6 = null;
label2:
v7 = staticinvoke <io.vertx.core.impl.ContextBase: io.vertx.core.Future executeBlocking(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.TaskQueue)>(v0, v1, v4, v6);
return v7;
}
public final io.vertx.core.Future executeBlocking(io.vertx.core.Handler, boolean)
{
io.vertx.core.impl.WorkerPool v4;
io.vertx.core.Future v7;
io.vertx.core.impl.ContextBase v3, v5;
io.vertx.core.impl.DuplicatedContext v0;
io.vertx.core.impl.TaskQueue v6;
io.vertx.core.Handler v1;
boolean v2;
v0 := @this: io.vertx.core.impl.DuplicatedContext;
v1 := @parameter0: io.vertx.core.Handler;
v2 := @parameter1: boolean;
v3 = v0.<io.vertx.core.impl.DuplicatedContext: io.vertx.core.impl.ContextBase delegate>;
v4 = v3.<io.vertx.core.impl.ContextBase: io.vertx.core.impl.WorkerPool workerPool>;
if v2 == 0 goto label1;
v5 = v0.<io.vertx.core.impl.DuplicatedContext: io.vertx.core.impl.ContextBase delegate>;
v6 = v5.<io.vertx.core.impl.ContextBase: io.vertx.core.impl.TaskQueue orderedTasks>;
goto label2;
label1:
v6 = null;
label2:
v7 = staticinvoke <io.vertx.core.impl.ContextBase: io.vertx.core.Future executeBlocking(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.TaskQueue)>(v0, v1, v4, v6);
return v7;
}
public final io.vertx.core.Future executeBlocking(io.vertx.core.Handler, io.vertx.core.impl.TaskQueue)
{
io.vertx.core.impl.ContextBase v3;
io.vertx.core.impl.DuplicatedContext v0;
io.vertx.core.impl.TaskQueue v2;
io.vertx.core.impl.WorkerPool v4;
io.vertx.core.Handler v1;
io.vertx.core.Future v5;
v0 := @this: io.vertx.core.impl.DuplicatedContext;
v1 := @parameter0: io.vertx.core.Handler;
v2 := @parameter1: io.vertx.core.impl.TaskQueue;
v3 = v0.<io.vertx.core.impl.DuplicatedContext: io.vertx.core.impl.ContextBase delegate>;
v4 = v3.<io.vertx.core.impl.ContextBase: io.vertx.core.impl.WorkerPool workerPool>;
v5 = staticinvoke <io.vertx.core.impl.ContextBase: io.vertx.core.Future executeBlocking(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.TaskQueue)>(v0, v1, v4, v2);
return v5;
}
public final void runOnContext(io.vertx.core.Handler)
{
io.vertx.core.impl.ContextBase v2;
io.vertx.core.Handler v1;
io.vertx.core.impl.DuplicatedContext v0;
v0 := @this: io.vertx.core.impl.DuplicatedContext;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.impl.DuplicatedContext: io.vertx.core.impl.ContextBase delegate>;
virtualinvoke v2.<io.vertx.core.impl.ContextBase: void runOnContext(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)>(v0, v1);
return;
}
public final void execute(java.lang.Object, io.vertx.core.Handler)
{
io.vertx.core.impl.ContextBase v3;
io.vertx.core.impl.DuplicatedContext v0;
java.lang.Object v1;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.impl.DuplicatedContext;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: io.vertx.core.Handler;
v3 = v0.<io.vertx.core.impl.DuplicatedContext: io.vertx.core.impl.ContextBase delegate>;
virtualinvoke v3.<io.vertx.core.impl.ContextBase: void execute(io.vertx.core.impl.ContextInternal,java.lang.Object,io.vertx.core.Handler)>(v0, v1, v2);
return;
}
public void emit(java.lang.Object, io.vertx.core.Handler)
{
io.vertx.core.impl.ContextBase v3;
io.vertx.core.impl.DuplicatedContext v0;
java.lang.Object v1;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.impl.DuplicatedContext;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: io.vertx.core.Handler;
v3 = v0.<io.vertx.core.impl.DuplicatedContext: io.vertx.core.impl.ContextBase delegate>;
virtualinvoke v3.<io.vertx.core.impl.ContextBase: void emit(io.vertx.core.impl.ContextInternal,java.lang.Object,io.vertx.core.Handler)>(v0, v1, v2);
return;
}
public void execute(java.lang.Runnable)
{
io.vertx.core.impl.ContextBase v2;
io.vertx.core.impl.DuplicatedContext v0;
java.lang.Runnable v1;
v0 := @this: io.vertx.core.impl.DuplicatedContext;
v1 := @parameter0: java.lang.Runnable;
v2 = v0.<io.vertx.core.impl.DuplicatedContext: io.vertx.core.impl.ContextBase delegate>;
virtualinvoke v2.<io.vertx.core.impl.ContextBase: void execute(io.vertx.core.impl.ContextInternal,java.lang.Runnable)>(v0, v1);
return;
}
public boolean isEventLoopContext()
{
io.vertx.core.impl.ContextBase v1;
io.vertx.core.impl.DuplicatedContext v0;
boolean v2;
v0 := @this: io.vertx.core.impl.DuplicatedContext;
v1 = v0.<io.vertx.core.impl.DuplicatedContext: io.vertx.core.impl.ContextBase delegate>;
v2 = virtualinvoke v1.<io.vertx.core.impl.ContextBase: boolean isEventLoopContext()>();
return v2;
}
public boolean isWorkerContext()
{
io.vertx.core.impl.ContextBase v1;
io.vertx.core.impl.DuplicatedContext v0;
boolean v2;
v0 := @this: io.vertx.core.impl.DuplicatedContext;
v1 = v0.<io.vertx.core.impl.DuplicatedContext: io.vertx.core.impl.ContextBase delegate>;
v2 = virtualinvoke v1.<io.vertx.core.impl.ContextBase: boolean isWorkerContext()>();
return v2;
}
public io.vertx.core.impl.ContextInternal duplicate()
{
io.vertx.core.impl.ContextBase v2;
io.vertx.core.impl.DuplicatedContext v0, v1;
v0 := @this: io.vertx.core.impl.DuplicatedContext;
v1 = new io.vertx.core.impl.DuplicatedContext;
v2 = v0.<io.vertx.core.impl.DuplicatedContext: io.vertx.core.impl.ContextBase delegate>;
specialinvoke v1.<io.vertx.core.impl.DuplicatedContext: void <init>(io.vertx.core.impl.ContextBase)>(v2);
return v1;
}
public io.vertx.core.impl.ContextInternal unwrap()
{
io.vertx.core.impl.ContextBase v1;
io.vertx.core.impl.DuplicatedContext v0;
v0 := @this: io.vertx.core.impl.DuplicatedContext;
v1 = v0.<io.vertx.core.impl.DuplicatedContext: io.vertx.core.impl.ContextBase delegate>;
return v1;
}
public boolean isDuplicate()
{
io.vertx.core.impl.DuplicatedContext v0;
v0 := @this: io.vertx.core.impl.DuplicatedContext;
return 1;
}
}