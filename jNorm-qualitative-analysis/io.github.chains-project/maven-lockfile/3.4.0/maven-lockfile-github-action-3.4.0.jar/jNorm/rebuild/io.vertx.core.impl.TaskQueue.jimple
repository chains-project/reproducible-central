public class io.vertx.core.impl.TaskQueue extends java.lang.Object
{
static final io.vertx.core.impl.logging.Logger log;
private final java.util.LinkedList tasks;
private java.util.concurrent.Executor current;
private final java.lang.Runnable runner;
public void <init>()
{
io.vertx.core.impl.TaskQueue v0;
java.util.LinkedList v1;
java.lang.Runnable v2;
v0 := @this: io.vertx.core.impl.TaskQueue;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.LinkedList;
specialinvoke v1.<java.util.LinkedList: void <init>()>();
v0.<io.vertx.core.impl.TaskQueue: java.util.LinkedList tasks> = v1;
v2 = staticinvoke <io.vertx.core.impl.TaskQueue$run__1450: java.lang.Runnable bootstrap$(io.vertx.core.impl.TaskQueue)>(v0);
v0.<io.vertx.core.impl.TaskQueue: java.lang.Runnable runner> = v2;
return;
}
public void run()
{
io.vertx.core.impl.logging.Logger v13;
java.lang.Throwable v10, v12;
java.util.concurrent.Executor v4, v5, v7, v9;
java.lang.Runnable v11, v8;
io.vertx.core.impl.TaskQueue v0;
java.lang.Object v3;
java.util.LinkedList v1, v2, v6;
v0 := @this: io.vertx.core.impl.TaskQueue;
label01:
v1 = v0.<io.vertx.core.impl.TaskQueue: java.util.LinkedList tasks>;
entermonitor v1;
label02:
v2 = v0.<io.vertx.core.impl.TaskQueue: java.util.LinkedList tasks>;
v3 = virtualinvoke v2.<java.util.LinkedList: java.lang.Object poll()>();
if v3 != null goto label04;
v0.<io.vertx.core.impl.TaskQueue: java.util.concurrent.Executor current> = null;
exitmonitor v1;
label03:
return;
label04:
v4 = v3.<io.vertx.core.impl.TaskQueue$Task: java.util.concurrent.Executor exec>;
v5 = v0.<io.vertx.core.impl.TaskQueue: java.util.concurrent.Executor current>;
if v4 == v5 goto label06;
v6 = v0.<io.vertx.core.impl.TaskQueue: java.util.LinkedList tasks>;
virtualinvoke v6.<java.util.LinkedList: void addFirst(java.lang.Object)>(v3);
v7 = v3.<io.vertx.core.impl.TaskQueue$Task: java.util.concurrent.Executor exec>;
v8 = v0.<io.vertx.core.impl.TaskQueue: java.lang.Runnable runner>;
interfaceinvoke v7.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(v8);
v9 = v3.<io.vertx.core.impl.TaskQueue$Task: java.util.concurrent.Executor exec>;
v0.<io.vertx.core.impl.TaskQueue: java.util.concurrent.Executor current> = v9;
exitmonitor v1;
label05:
return;
label06:
exitmonitor v1;
label07:
goto label09;
label08:
v10 := @caughtexception;
exitmonitor v1;
throw v10;
label09:
v11 = v3.<io.vertx.core.impl.TaskQueue$Task: java.lang.Runnable runnable>;
interfaceinvoke v11.<java.lang.Runnable: void run()>();
label10:
goto label01;
label11:
v12 := @caughtexception;
v13 = <io.vertx.core.impl.TaskQueue: io.vertx.core.impl.logging.Logger log>;
interfaceinvoke v13.<io.vertx.core.impl.logging.Logger: void error(java.lang.Object,java.lang.Throwable)>("Caught unexpected Throwable", v12);
goto label01;
catch java.lang.Throwable from label02 to label03 with label08;
catch java.lang.Throwable from label04 to label05 with label08;
catch java.lang.Throwable from label06 to label07 with label08;
catch java.lang.Throwable from label09 to label10 with label11;
}
public void execute(java.lang.Runnable, java.util.concurrent.Executor)
{
java.lang.Throwable v8;
java.util.concurrent.Executor v2, v6;
java.lang.Runnable v1, v7;
io.vertx.core.impl.TaskQueue v0;
io.vertx.core.impl.TaskQueue$Task v5;
java.util.LinkedList v3, v4;
v0 := @this: io.vertx.core.impl.TaskQueue;
v1 := @parameter0: java.lang.Runnable;
v2 := @parameter1: java.util.concurrent.Executor;
v3 = v0.<io.vertx.core.impl.TaskQueue: java.util.LinkedList tasks>;
entermonitor v3;
label1:
v4 = v0.<io.vertx.core.impl.TaskQueue: java.util.LinkedList tasks>;
v5 = new io.vertx.core.impl.TaskQueue$Task;
specialinvoke v5.<io.vertx.core.impl.TaskQueue$Task: void <init>(java.lang.Runnable,java.util.concurrent.Executor)>(v1, v2);
virtualinvoke v4.<java.util.LinkedList: boolean add(java.lang.Object)>(v5);
v6 = v0.<io.vertx.core.impl.TaskQueue: java.util.concurrent.Executor current>;
if v6 != null goto label2;
v0.<io.vertx.core.impl.TaskQueue: java.util.concurrent.Executor current> = v2;
v7 = v0.<io.vertx.core.impl.TaskQueue: java.lang.Runnable runner>;
interfaceinvoke v2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(v7);
label2:
exitmonitor v3;
label3:
goto label5;
label4:
v8 := @caughtexception;
exitmonitor v3;
throw v8;
label5:
return;
catch java.lang.Throwable from label1 to label3 with label4;
}
static void <clinit>()
{
io.vertx.core.impl.logging.Logger v0;
v0 = staticinvoke <io.vertx.core.impl.logging.LoggerFactory: io.vertx.core.impl.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/impl/TaskQueue;");
<io.vertx.core.impl.TaskQueue: io.vertx.core.impl.logging.Logger log> = v0;
return;
}
}