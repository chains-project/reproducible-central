public class io.vertx.core.impl.VerticleManager extends java.lang.Object
{
private final io.vertx.core.impl.VertxInternal vertx;
private final io.vertx.core.impl.DeploymentManager deploymentManager;
private final io.vertx.core.impl.LoaderManager loaderManager;
private final java.util.Map verticleFactories;
private final java.util.List defaultFactories;
public void <init>(io.vertx.core.impl.VertxInternal, io.vertx.core.impl.DeploymentManager)
{
io.vertx.core.impl.VerticleManager v0;
io.vertx.core.impl.VertxInternal v1;
io.vertx.core.impl.DeploymentManager v2;
io.vertx.core.impl.LoaderManager v3;
java.util.concurrent.ConcurrentHashMap v4;
java.util.ArrayList v5;
v0 := @this: io.vertx.core.impl.VerticleManager;
v1 := @parameter0: io.vertx.core.impl.VertxInternal;
v2 := @parameter1: io.vertx.core.impl.DeploymentManager;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new io.vertx.core.impl.LoaderManager;
specialinvoke v3.<io.vertx.core.impl.LoaderManager: void <init>()>();
v0.<io.vertx.core.impl.VerticleManager: io.vertx.core.impl.LoaderManager loaderManager> = v3;
v4 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v4.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v0.<io.vertx.core.impl.VerticleManager: java.util.Map verticleFactories> = v4;
v5 = new java.util.ArrayList;
specialinvoke v5.<java.util.ArrayList: void <init>()>();
v0.<io.vertx.core.impl.VerticleManager: java.util.List defaultFactories> = v5;
v0.<io.vertx.core.impl.VerticleManager: io.vertx.core.impl.VertxInternal vertx> = v1;
v0.<io.vertx.core.impl.VerticleManager: io.vertx.core.impl.DeploymentManager deploymentManager> = v2;
specialinvoke v0.<io.vertx.core.impl.VerticleManager: void loadVerticleFactories()>();
return;
}
private void loadVerticleFactories()
{
java.util.function.Consumer v2;
io.vertx.core.impl.JavaVerticleFactory v3;
io.vertx.core.impl.VerticleManager v0;
java.util.List v5;
io.vertx.core.impl.VertxInternal v4;
java.util.Collection v1;
v0 := @this: io.vertx.core.impl.VerticleManager;
v1 = staticinvoke <io.vertx.core.ServiceHelper: java.util.Collection loadFactories(java.lang.Class)>(class "Lio/vertx/core/spi/VerticleFactory;");
v2 = staticinvoke <io.vertx.core.impl.VerticleManager$registerVerticleFactory__1451: java.util.function.Consumer bootstrap$(io.vertx.core.impl.VerticleManager)>(v0);
interfaceinvoke v1.<java.util.Collection: void forEach(java.util.function.Consumer)>(v2);
v3 = new io.vertx.core.impl.JavaVerticleFactory;
specialinvoke v3.<io.vertx.core.impl.JavaVerticleFactory: void <init>()>();
v4 = v0.<io.vertx.core.impl.VerticleManager: io.vertx.core.impl.VertxInternal vertx>;
interfaceinvoke v3.<io.vertx.core.spi.VerticleFactory: void init(io.vertx.core.Vertx)>(v4);
v5 = v0.<io.vertx.core.impl.VerticleManager: java.util.List defaultFactories>;
interfaceinvoke v5.<java.util.List: boolean add(java.lang.Object)>(v3);
return;
}
public void registerVerticleFactory(io.vertx.core.spi.VerticleFactory)
{
io.vertx.core.spi.VerticleFactory v1;
io.vertx.core.impl.VertxInternal v11;
java.lang.IllegalArgumentException v3, v9;
java.util.ArrayList v6;
io.vertx.core.impl.VerticleManager v0;
java.util.Map v4, v7;
java.lang.Object v5;
java.lang.String v2;
java.util.Comparator v10;
boolean v8;
v0 := @this: io.vertx.core.impl.VerticleManager;
v1 := @parameter0: io.vertx.core.spi.VerticleFactory;
v2 = interfaceinvoke v1.<io.vertx.core.spi.VerticleFactory: java.lang.String prefix()>();
if v2 != null goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("factory.prefix() cannot be null");
throw v3;
label1:
v4 = v0.<io.vertx.core.impl.VerticleManager: java.util.Map verticleFactories>;
v5 = interfaceinvoke v4.<java.util.Map: java.lang.Object get(java.lang.Object)>(v2);
if v5 != null goto label2;
v6 = new java.util.ArrayList;
specialinvoke v6.<java.util.ArrayList: void <init>()>();
v5 = v6;
v7 = v0.<io.vertx.core.impl.VerticleManager: java.util.Map verticleFactories>;
interfaceinvoke v7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v2, v6);
label2:
v8 = interfaceinvoke v5.<java.util.List: boolean contains(java.lang.Object)>(v1);
if v8 == 0 goto label3;
v9 = new java.lang.IllegalArgumentException;
specialinvoke v9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Factory already registered");
throw v9;
label3:
interfaceinvoke v5.<java.util.List: boolean add(java.lang.Object)>(v1);
v10 = staticinvoke <io.vertx.core.impl.VerticleManager$lambda_registerVerticleFactory_0__1452: java.util.Comparator bootstrap$()>();
interfaceinvoke v5.<java.util.List: void sort(java.util.Comparator)>(v10);
v11 = v0.<io.vertx.core.impl.VerticleManager: io.vertx.core.impl.VertxInternal vertx>;
interfaceinvoke v1.<io.vertx.core.spi.VerticleFactory: void init(io.vertx.core.Vertx)>(v11);
return;
}
public void unregisterVerticleFactory(io.vertx.core.spi.VerticleFactory)
{
io.vertx.core.spi.VerticleFactory v1;
java.lang.IllegalArgumentException v10, v3;
io.vertx.core.impl.VerticleManager v0;
java.util.Map v4, v9;
java.lang.Object v5;
java.lang.String v2;
boolean v6, v7, v8;
v0 := @this: io.vertx.core.impl.VerticleManager;
v1 := @parameter0: io.vertx.core.spi.VerticleFactory;
v2 = interfaceinvoke v1.<io.vertx.core.spi.VerticleFactory: java.lang.String prefix()>();
if v2 != null goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("factory.prefix() cannot be null");
throw v3;
label1:
v4 = v0.<io.vertx.core.impl.VerticleManager: java.util.Map verticleFactories>;
v5 = interfaceinvoke v4.<java.util.Map: java.lang.Object get(java.lang.Object)>(v2);
v6 = 0;
if v5 == null goto label3;
v7 = interfaceinvoke v5.<java.util.List: boolean remove(java.lang.Object)>(v1);
if v7 == 0 goto label2;
v6 = 1;
label2:
v8 = interfaceinvoke v5.<java.util.List: boolean isEmpty()>();
if v8 == 0 goto label3;
v9 = v0.<io.vertx.core.impl.VerticleManager: java.util.Map verticleFactories>;
interfaceinvoke v9.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v2);
label3:
if v6 != 0 goto label4;
v10 = new java.lang.IllegalArgumentException;
specialinvoke v10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("factory isn\'t registered");
throw v10;
label4:
return;
}
public java.util.Set verticleFactories()
{
java.util.HashSet v1;
io.vertx.core.impl.VerticleManager v0;
java.util.Iterator v4;
java.util.Collection v3;
java.util.Map v2;
java.lang.Object v6;
boolean v5;
v0 := @this: io.vertx.core.impl.VerticleManager;
v1 = new java.util.HashSet;
specialinvoke v1.<java.util.HashSet: void <init>()>();
v2 = v0.<io.vertx.core.impl.VerticleManager: java.util.Map verticleFactories>;
v3 = interfaceinvoke v2.<java.util.Map: java.util.Collection values()>();
v4 = interfaceinvoke v3.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v1.<java.util.Set: boolean addAll(java.util.Collection)>(v6);
goto label1;
label2:
return v1;
}
private java.util.List resolveFactories(java.lang.String)
{
io.vertx.core.impl.VerticleManager v0;
java.util.List v2;
java.util.Map v8;
int v3, v5, v6, v7;
java.lang.Object v9;
java.lang.String v1, v4;
v0 := @this: io.vertx.core.impl.VerticleManager;
v1 := @parameter0: java.lang.String;
v2 = null;
v3 = virtualinvoke v1.<java.lang.String: int indexOf(int)>(58);
v4 = null;
v5 = (int) -1;
if v3 == v5 goto label1;
v4 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int,int)>(0, v3);
goto label3;
label1:
v6 = virtualinvoke v1.<java.lang.String: int lastIndexOf(int)>(46);
v7 = (int) -1;
if v6 == v7 goto label2;
v4 = staticinvoke <io.vertx.core.impl.VerticleManager: java.lang.String getSuffix(int,java.lang.String)>(v6, v1);
goto label3;
label2:
v2 = v0.<io.vertx.core.impl.VerticleManager: java.util.List defaultFactories>;
label3:
if v2 != null goto label4;
v8 = v0.<io.vertx.core.impl.VerticleManager: java.util.Map verticleFactories>;
v9 = interfaceinvoke v8.<java.util.Map: java.lang.Object get(java.lang.Object)>(v4);
if v9 != null goto label4;
v9 = v0.<io.vertx.core.impl.VerticleManager: java.util.List defaultFactories>;
label4:
return v9;
}
private static java.lang.String getSuffix(int, java.lang.String)
{
java.lang.IllegalArgumentException v4;
int v0, v2, v3, v6;
java.lang.String v1, v5, v7;
v0 := @parameter0: int;
v1 := @parameter1: java.lang.String;
v2 = v0 + 1;
v3 = virtualinvoke v1.<java.lang.String: int length()>();
if v2 < v3 goto label1;
v4 = new java.lang.IllegalArgumentException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid name: \u0001");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v4;
label1:
v6 = v0 + 1;
v7 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int)>(v6);
return v7;
}
public io.vertx.core.Future deployVerticle(java.lang.String, io.vertx.core.DeploymentOptions)
{
io.vertx.core.impl.VertxInternal v3;
io.vertx.core.impl.ContextInternal v4;
io.vertx.core.Future v9;
io.vertx.core.impl.VerticleManager v0;
io.vertx.core.impl.ClassLoaderHolder v7;
io.vertx.core.DeploymentOptions v2;
io.vertx.core.impl.LoaderManager v6;
java.lang.ClassLoader v5, v8;
java.lang.String v1;
io.vertx.core.Handler v10;
v0 := @this: io.vertx.core.impl.VerticleManager;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.DeploymentOptions;
v3 = v0.<io.vertx.core.impl.VerticleManager: io.vertx.core.impl.VertxInternal vertx>;
v4 = interfaceinvoke v3.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v5 = virtualinvoke v2.<io.vertx.core.DeploymentOptions: java.lang.ClassLoader getClassLoader()>();
if v5 != null goto label3;
v6 = v0.<io.vertx.core.impl.VerticleManager: io.vertx.core.impl.LoaderManager loaderManager>;
v7 = virtualinvoke v6.<io.vertx.core.impl.LoaderManager: io.vertx.core.impl.ClassLoaderHolder getClassLoader(io.vertx.core.DeploymentOptions)>(v2);
if v7 == null goto label1;
v8 = v7.<io.vertx.core.impl.ClassLoaderHolder: java.lang.ClassLoader loader>;
goto label2;
label1:
v8 = staticinvoke <io.vertx.core.impl.VerticleManager: java.lang.ClassLoader getCurrentClassLoader()>();
label2:
v5 = v8;
goto label4;
label3:
v7 = null;
label4:
v9 = specialinvoke v0.<io.vertx.core.impl.VerticleManager: io.vertx.core.Future doDeployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader)>(v1, v2, v4, v4, v5);
if v7 == null goto label5;
v10 = staticinvoke <io.vertx.core.impl.VerticleManager$lambda_deployVerticle_2__1453: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.VerticleManager,io.vertx.core.impl.ClassLoaderHolder)>(v0, v7);
interfaceinvoke v9.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v10);
label5:
return v9;
}
private io.vertx.core.Future doDeployVerticle(java.lang.String, io.vertx.core.DeploymentOptions, io.vertx.core.impl.ContextInternal, io.vertx.core.impl.ContextInternal, java.lang.ClassLoader)
{
java.util.Iterator v7;
io.vertx.core.impl.ContextInternal v3, v4;
io.vertx.core.Future v8;
io.vertx.core.impl.VerticleManager v0;
java.util.List v6;
io.vertx.core.DeploymentOptions v2;
java.lang.ClassLoader v5;
java.lang.String v1;
v0 := @this: io.vertx.core.impl.VerticleManager;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.DeploymentOptions;
v3 := @parameter2: io.vertx.core.impl.ContextInternal;
v4 := @parameter3: io.vertx.core.impl.ContextInternal;
v5 := @parameter4: java.lang.ClassLoader;
v6 = specialinvoke v0.<io.vertx.core.impl.VerticleManager: java.util.List resolveFactories(java.lang.String)>(v1);
v7 = interfaceinvoke v6.<java.util.List: java.util.Iterator iterator()>();
v8 = specialinvoke v0.<io.vertx.core.impl.VerticleManager: io.vertx.core.Future doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader)>(v7, null, v1, v2, v3, v4, v5);
return v8;
}
private io.vertx.core.Future doDeployVerticle(java.util.Iterator, java.lang.Throwable, java.lang.String, io.vertx.core.DeploymentOptions, io.vertx.core.impl.ContextInternal, io.vertx.core.impl.ContextInternal, java.lang.ClassLoader)
{
java.lang.Throwable v2;
java.lang.UnsupportedOperationException v14;
java.util.Iterator v1;
io.vertx.core.impl.ContextInternal v5, v6;
io.vertx.core.Future v10, v12, v13;
java.util.function.Function v11;
io.vertx.core.impl.VerticleManager v0;
io.vertx.core.DeploymentOptions v4;
java.lang.Object v9;
java.lang.ClassLoader v7;
java.lang.String v3;
boolean v8;
v0 := @this: io.vertx.core.impl.VerticleManager;
v1 := @parameter0: java.util.Iterator;
v2 := @parameter1: java.lang.Throwable;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: io.vertx.core.DeploymentOptions;
v5 := @parameter4: io.vertx.core.impl.ContextInternal;
v6 := @parameter5: io.vertx.core.impl.ContextInternal;
v7 := @parameter6: java.lang.ClassLoader;
v8 = interfaceinvoke v1.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label1;
v9 = interfaceinvoke v1.<java.util.Iterator: java.lang.Object next()>();
v10 = specialinvoke v0.<io.vertx.core.impl.VerticleManager: io.vertx.core.Future doDeployVerticle(io.vertx.core.spi.VerticleFactory,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader)>(v9, v3, v4, v5, v6, v7);
v11 = staticinvoke <io.vertx.core.impl.VerticleManager$lambda_doDeployVerticle_3__1454: java.util.function.Function bootstrap$(io.vertx.core.impl.VerticleManager,java.util.Iterator,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader)>(v0, v1, v3, v4, v5, v6, v7);
v12 = interfaceinvoke v10.<io.vertx.core.Future: io.vertx.core.Future recover(java.util.function.Function)>(v11);
return v12;
label1:
if v2 == null goto label2;
v13 = interfaceinvoke v6.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future failedFuture(java.lang.Throwable)>(v2);
return v13;
label2:
v14 = new java.lang.UnsupportedOperationException;
specialinvoke v14.<java.lang.UnsupportedOperationException: void <init>()>();
throw v14;
}
private io.vertx.core.Future doDeployVerticle(io.vertx.core.spi.VerticleFactory, java.lang.String, io.vertx.core.DeploymentOptions, io.vertx.core.impl.ContextInternal, io.vertx.core.impl.ContextInternal, java.lang.ClassLoader)
{
io.vertx.core.spi.VerticleFactory v1;
io.vertx.core.impl.future.PromiseInternal v7;
io.vertx.core.impl.ContextInternal v4, v5;
io.vertx.core.Future v10, v12, v9;
java.util.function.Function v11;
java.lang.Exception v8;
io.vertx.core.impl.VerticleManager v0;
io.vertx.core.DeploymentOptions v3;
java.lang.ClassLoader v6;
java.lang.String v2;
v0 := @this: io.vertx.core.impl.VerticleManager;
v1 := @parameter0: io.vertx.core.spi.VerticleFactory;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.DeploymentOptions;
v4 := @parameter3: io.vertx.core.impl.ContextInternal;
v5 := @parameter4: io.vertx.core.impl.ContextInternal;
v6 := @parameter5: java.lang.ClassLoader;
v7 = interfaceinvoke v5.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
label1:
interfaceinvoke v1.<io.vertx.core.spi.VerticleFactory: void createVerticle(java.lang.String,java.lang.ClassLoader,io.vertx.core.Promise)>(v2, v6, v7);
label2:
goto label4;
label3:
v8 := @caughtexception;
v9 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.Throwable)>(v8);
return v9;
label4:
v10 = interfaceinvoke v7.<io.vertx.core.Promise: io.vertx.core.Future future()>();
v11 = staticinvoke <io.vertx.core.impl.VerticleManager$lambda_doDeployVerticle_5__1455: java.util.function.Function bootstrap$(io.vertx.core.impl.VerticleManager,io.vertx.core.DeploymentOptions,java.lang.String,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader)>(v0, v3, v2, v4, v5, v6);
v12 = interfaceinvoke v10.<io.vertx.core.Future: io.vertx.core.Future compose(java.util.function.Function)>(v11);
return v12;
catch java.lang.Exception from label1 to label2 with label3;
}
static java.lang.ClassLoader getCurrentClassLoader()
{
java.lang.Class v2;
java.lang.ClassLoader v1;
java.lang.Thread v0;
v0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v1 = virtualinvoke v0.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
if v1 != null goto label1;
v2 = class "Lio/vertx/core/impl/VerticleManager;";
v1 = virtualinvoke v2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
label1:
return v1;
}
}