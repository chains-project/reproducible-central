public interface  io.vertx.core.impl.VertxInternal extends java.lang.Object implements io.vertx.core.Vertx
{
public abstract io.vertx.core.impl.future.PromiseInternal promise();
public abstract io.vertx.core.impl.future.PromiseInternal promise(io.vertx.core.Handler);
public abstract long maxEventLoopExecTime();
public abstract java.util.concurrent.TimeUnit maxEventLoopExecTimeUnit();
public abstract io.vertx.core.impl.ContextInternal getOrCreateContext();
public abstract io.netty.channel.EventLoopGroup getEventLoopGroup();
public abstract io.netty.channel.EventLoopGroup getAcceptorEventLoopGroup();
public abstract io.vertx.core.impl.WorkerPool getWorkerPool();
public abstract io.vertx.core.impl.WorkerPool getInternalWorkerPool();
public abstract java.util.Map sharedHttpServers();
public abstract java.util.Map sharedNetServers();
public abstract java.util.Map sharedTCPServers(java.lang.Class);
public abstract io.vertx.core.spi.metrics.VertxMetrics metricsSPI();
public abstract io.vertx.core.spi.transport.Transport transport();
public abstract io.vertx.core.http.HttpClient createHttpClient(io.vertx.core.http.HttpClientOptions, io.vertx.core.impl.CloseFuture);
public java.lang.Object createSharedClient(java.lang.String, java.lang.String, io.vertx.core.impl.CloseFuture, java.util.function.Function)
{
io.vertx.core.impl.VertxInternal v0;
io.vertx.core.impl.CloseFuture v3;
java.lang.Object v5;
java.lang.String v1, v2;
java.util.function.Function v4;
v0 := @this: io.vertx.core.impl.VertxInternal;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.impl.CloseFuture;
v4 := @parameter3: java.util.function.Function;
v5 = staticinvoke <io.vertx.core.impl.SharedClientHolder: java.lang.Object createSharedClient(io.vertx.core.Vertx,java.lang.String,java.lang.String,io.vertx.core.impl.CloseFuture,java.util.function.Function)>(v0, v1, v2, v3, v4);
return v5;
}
public abstract io.vertx.core.impl.ContextInternal getContext();
public abstract io.vertx.core.impl.EventLoopContext createEventLoopContext(io.vertx.core.impl.Deployment, io.vertx.core.impl.CloseFuture, io.vertx.core.impl.WorkerPool, java.lang.ClassLoader);
public abstract io.vertx.core.impl.EventLoopContext createEventLoopContext(io.netty.channel.EventLoop, io.vertx.core.impl.WorkerPool, java.lang.ClassLoader);
public abstract io.vertx.core.impl.EventLoopContext createEventLoopContext();
public abstract io.vertx.core.impl.WorkerContext createWorkerContext(io.vertx.core.impl.Deployment, io.vertx.core.impl.CloseFuture, io.vertx.core.impl.WorkerPool, java.lang.ClassLoader);
public abstract io.vertx.core.impl.WorkerContext createWorkerContext();
public abstract io.vertx.core.impl.WorkerExecutorInternal createSharedWorkerExecutor(java.lang.String);
public abstract io.vertx.core.impl.WorkerExecutorInternal createSharedWorkerExecutor(java.lang.String, int);
public abstract io.vertx.core.impl.WorkerExecutorInternal createSharedWorkerExecutor(java.lang.String, int, long);
public abstract io.vertx.core.impl.WorkerExecutorInternal createSharedWorkerExecutor(java.lang.String, int, long, java.util.concurrent.TimeUnit);
public abstract io.vertx.core.impl.WorkerPool createSharedWorkerPool(java.lang.String, int, long, java.util.concurrent.TimeUnit);
public abstract void simulateKill();
public abstract io.vertx.core.impl.Deployment getDeployment(java.lang.String);
public abstract void failoverCompleteHandler(io.vertx.core.impl.FailoverCompleteHandler);
public abstract boolean isKilled();
public abstract void failDuringFailover(boolean);
public abstract java.io.File resolveFile(java.lang.String);
public void executeBlockingInternal(io.vertx.core.Handler, io.vertx.core.Handler)
{
io.vertx.core.impl.VertxInternal v0;
io.vertx.core.impl.ContextInternal v3;
io.vertx.core.Handler v1, v2;
v0 := @this: io.vertx.core.impl.VertxInternal;
v1 := @parameter0: io.vertx.core.Handler;
v2 := @parameter1: io.vertx.core.Handler;
v3 = interfaceinvoke v0.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
interfaceinvoke v3.<io.vertx.core.impl.ContextInternal: void executeBlockingInternal(io.vertx.core.Handler,io.vertx.core.Handler)>(v1, v2);
return;
}
public void executeBlockingInternal(io.vertx.core.Handler, boolean, io.vertx.core.Handler)
{
io.vertx.core.impl.VertxInternal v0;
io.vertx.core.impl.ContextInternal v4;
io.vertx.core.Handler v1, v3;
boolean v2;
v0 := @this: io.vertx.core.impl.VertxInternal;
v1 := @parameter0: io.vertx.core.Handler;
v2 := @parameter1: boolean;
v3 := @parameter2: io.vertx.core.Handler;
v4 = interfaceinvoke v0.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
interfaceinvoke v4.<io.vertx.core.impl.ContextInternal: void executeBlockingInternal(io.vertx.core.Handler,boolean,io.vertx.core.Handler)>(v1, v2, v3);
return;
}
public abstract io.vertx.core.spi.cluster.ClusterManager getClusterManager();
public abstract io.vertx.core.impl.HAManager haManager();
public abstract void resolveAddress(java.lang.String, io.vertx.core.Handler);
public abstract io.vertx.core.impl.AddressResolver addressResolver();
public abstract io.vertx.core.spi.file.FileResolver fileResolver();
public abstract io.netty.resolver.AddressResolverGroup nettyAddressResolverGroup();
public abstract io.vertx.core.impl.btc.BlockedThreadChecker blockedThreadChecker();
public abstract io.vertx.core.impl.CloseFuture closeFuture();
public abstract io.vertx.core.spi.tracing.VertxTracer tracer();
public abstract void addCloseHook(io.vertx.core.Closeable);
public abstract void removeCloseHook(io.vertx.core.Closeable);
}