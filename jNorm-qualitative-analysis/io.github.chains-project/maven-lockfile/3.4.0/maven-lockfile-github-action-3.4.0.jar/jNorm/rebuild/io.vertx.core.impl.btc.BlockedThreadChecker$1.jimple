class io.vertx.core.impl.btc.BlockedThreadChecker$1 extends java.util.TimerTask
{
final long val$warningExceptionTime;
final java.util.concurrent.TimeUnit val$warningExceptionTimeUnit;
final io.vertx.core.impl.btc.BlockedThreadChecker this$0;
void <init>(io.vertx.core.impl.btc.BlockedThreadChecker, long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v3;
io.vertx.core.impl.btc.BlockedThreadChecker v1;
io.vertx.core.impl.btc.BlockedThreadChecker$1 v0;
long v2;
v0 := @this: io.vertx.core.impl.btc.BlockedThreadChecker$1;
v1 := @parameter0: io.vertx.core.impl.btc.BlockedThreadChecker;
v2 := @parameter1: long;
v3 := @parameter2: java.util.concurrent.TimeUnit;
v0.<io.vertx.core.impl.btc.BlockedThreadChecker$1: io.vertx.core.impl.btc.BlockedThreadChecker this$0> = v1;
v0.<io.vertx.core.impl.btc.BlockedThreadChecker$1: long val$warningExceptionTime> = v2;
v0.<io.vertx.core.impl.btc.BlockedThreadChecker$1: java.util.concurrent.TimeUnit val$warningExceptionTimeUnit> = v3;
specialinvoke v0.<java.util.TimerTask: void <init>()>();
return;
}
public void run()
{
java.lang.Throwable v27;
io.vertx.core.impl.btc.BlockedThreadEvent v25;
long v13, v14, v15, v18, v20, v22, v5;
java.util.ArrayList v1;
byte v23, v24;
java.util.Map v7;
boolean v10;
java.util.Iterator v9;
io.vertx.core.impl.btc.BlockedThreadChecker$1 v0;
java.util.Set v8;
java.util.concurrent.TimeUnit v16, v17, v19, v21;
java.util.function.Consumer v28;
io.vertx.core.impl.btc.BlockedThreadChecker v2, v3, v6;
java.lang.Object v11, v12, v26;
io.vertx.core.Handler v4;
v0 := @this: io.vertx.core.impl.btc.BlockedThreadChecker$1;
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v2 = v0.<io.vertx.core.impl.btc.BlockedThreadChecker$1: io.vertx.core.impl.btc.BlockedThreadChecker this$0>;
entermonitor v2;
label1:
v3 = v0.<io.vertx.core.impl.btc.BlockedThreadChecker$1: io.vertx.core.impl.btc.BlockedThreadChecker this$0>;
v4 = v3.<io.vertx.core.impl.btc.BlockedThreadChecker: io.vertx.core.Handler blockedThreadHandler>;
v5 = staticinvoke <java.lang.System: long nanoTime()>();
v6 = v0.<io.vertx.core.impl.btc.BlockedThreadChecker$1: io.vertx.core.impl.btc.BlockedThreadChecker this$0>;
v7 = v6.<io.vertx.core.impl.btc.BlockedThreadChecker: java.util.Map threads>;
v8 = interfaceinvoke v7.<java.util.Map: java.util.Set entrySet()>();
v9 = interfaceinvoke v8.<java.util.Set: java.util.Iterator iterator()>();
label2:
v10 = interfaceinvoke v9.<java.util.Iterator: boolean hasNext()>();
if v10 == 0 goto label3;
v11 = interfaceinvoke v9.<java.util.Iterator: java.lang.Object next()>();
v12 = interfaceinvoke v11.<java.util.Map$Entry: java.lang.Object getValue()>();
v13 = v12.<io.vertx.core.impl.btc.ThreadInfo: long startTime>;
v14 = v5 - v13;
v15 = v12.<io.vertx.core.impl.btc.ThreadInfo: long maxExecTime>;
v16 = v12.<io.vertx.core.impl.btc.ThreadInfo: java.util.concurrent.TimeUnit maxExecTimeUnit>;
v17 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
v18 = virtualinvoke v17.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>(v15, v16);
v19 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
v20 = v0.<io.vertx.core.impl.btc.BlockedThreadChecker$1: long val$warningExceptionTime>;
v21 = v0.<io.vertx.core.impl.btc.BlockedThreadChecker$1: java.util.concurrent.TimeUnit val$warningExceptionTimeUnit>;
v22 = virtualinvoke v19.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>(v20, v21);
v23 = v13 cmp 0L;
if v23 == 0 goto label2;
v24 = v14 cmp v18;
if v24 < 0 goto label2;
v25 = new io.vertx.core.impl.btc.BlockedThreadEvent;
v26 = interfaceinvoke v11.<java.util.Map$Entry: java.lang.Object getKey()>();
specialinvoke v25.<io.vertx.core.impl.btc.BlockedThreadEvent: void <init>(java.lang.Thread,long,long,long)>(v26, v14, v18, v22);
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v25);
goto label2;
label3:
exitmonitor v2;
label4:
goto label6;
label5:
v27 := @caughtexception;
exitmonitor v2;
throw v27;
label6:
virtualinvoke v4.<java.lang.Object: java.lang.Class getClass()>();
v28 = staticinvoke <io.vertx.core.impl.btc.BlockedThreadChecker$1$handle__1596: java.util.function.Consumer bootstrap$(io.vertx.core.Handler)>(v4);
interfaceinvoke v1.<java.util.List: void forEach(java.util.function.Consumer)>(v28);
return;
catch java.lang.Throwable from label1 to label4 with label5;
}
}