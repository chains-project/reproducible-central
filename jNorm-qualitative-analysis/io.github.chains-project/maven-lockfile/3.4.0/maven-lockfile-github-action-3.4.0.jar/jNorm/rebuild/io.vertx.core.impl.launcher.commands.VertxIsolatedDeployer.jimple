public class io.vertx.core.impl.launcher.commands.VertxIsolatedDeployer extends java.lang.Object
{
private static final io.vertx.core.impl.logging.Logger log;
private java.lang.String deploymentId;
private io.vertx.core.Vertx vertx;
public void <init>()
{
io.vertx.core.impl.launcher.commands.VertxIsolatedDeployer v0;
v0 := @this: io.vertx.core.impl.launcher.commands.VertxIsolatedDeployer;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void deploy(java.lang.String, io.vertx.core.Vertx, io.vertx.core.DeploymentOptions, io.vertx.core.Handler)
{
io.vertx.core.Vertx v2;
io.vertx.core.impl.launcher.commands.VertxIsolatedDeployer v0;
io.vertx.core.DeploymentOptions v3;
java.lang.String v1, v6;
io.vertx.core.Handler v4, v7;
boolean v5;
v0 := @this: io.vertx.core.impl.launcher.commands.VertxIsolatedDeployer;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Vertx;
v3 := @parameter2: io.vertx.core.DeploymentOptions;
v4 := @parameter3: io.vertx.core.Handler;
v0.<io.vertx.core.impl.launcher.commands.VertxIsolatedDeployer: io.vertx.core.Vertx vertx> = v2;
v5 = virtualinvoke v3.<io.vertx.core.DeploymentOptions: boolean isWorker()>();
if v5 == 0 goto label1;
v6 = "deploying worker verticle";
goto label2;
label1:
v6 = "deploying verticle";
label2:
v7 = specialinvoke v0.<io.vertx.core.impl.launcher.commands.VertxIsolatedDeployer: io.vertx.core.Handler createHandler(java.lang.String,io.vertx.core.Handler)>(v6, v4);
interfaceinvoke v2.<io.vertx.core.Vertx: void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)>(v1, v3, v7);
return;
}
public void undeploy(io.vertx.core.Handler)
{
io.vertx.core.Vertx v2;
io.vertx.core.impl.launcher.commands.VertxIsolatedDeployer v0;
java.lang.String v3;
io.vertx.core.Handler v1, v4;
v0 := @this: io.vertx.core.impl.launcher.commands.VertxIsolatedDeployer;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.impl.launcher.commands.VertxIsolatedDeployer: io.vertx.core.Vertx vertx>;
v3 = v0.<io.vertx.core.impl.launcher.commands.VertxIsolatedDeployer: java.lang.String deploymentId>;
v4 = staticinvoke <io.vertx.core.impl.launcher.commands.VertxIsolatedDeployer$lambda_undeploy_0__1565: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.launcher.commands.VertxIsolatedDeployer,io.vertx.core.Handler)>(v0, v1);
interfaceinvoke v2.<io.vertx.core.Vertx: void undeploy(java.lang.String,io.vertx.core.Handler)>(v3, v4);
return;
}
private io.vertx.core.Handler createHandler(java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.impl.launcher.commands.VertxIsolatedDeployer v0;
java.lang.String v1;
io.vertx.core.Handler v2, v3;
v0 := @this: io.vertx.core.impl.launcher.commands.VertxIsolatedDeployer;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
v3 = staticinvoke <io.vertx.core.impl.launcher.commands.VertxIsolatedDeployer$lambda_createHandler_1__1566: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.launcher.commands.VertxIsolatedDeployer,java.lang.String,io.vertx.core.Handler)>(v0, v1, v2);
return v3;
}
static void <clinit>()
{
io.vertx.core.impl.logging.Logger v0;
v0 = staticinvoke <io.vertx.core.impl.logging.LoggerFactory: io.vertx.core.impl.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/impl/launcher/commands/VertxIsolatedDeployer;");
<io.vertx.core.impl.launcher.commands.VertxIsolatedDeployer: io.vertx.core.impl.logging.Logger log> = v0;
return;
}
}