public class io.vertx.core.impl.transports.EpollTransport extends java.lang.Object implements io.vertx.core.spi.transport.Transport
{
private static volatile int pendingFastOpenRequestsThreshold;
public static int getPendingFastOpenRequestsThreshold()
{
int v0;
v0 = <io.vertx.core.impl.transports.EpollTransport: int pendingFastOpenRequestsThreshold>;
return v0;
}
public static void setPendingFastOpenRequestsThreshold(int)
{
int v0;
java.lang.String v2;
java.lang.IllegalArgumentException v1;
v0 := @parameter0: int;
if v0 >= 0 goto label1;
v1 = new java.lang.IllegalArgumentException;
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid \u0001");
specialinvoke v1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v2);
throw v1;
label1:
<io.vertx.core.impl.transports.EpollTransport: int pendingFastOpenRequestsThreshold> = v0;
return;
}
public void <init>()
{
io.vertx.core.impl.transports.EpollTransport v0;
v0 := @this: io.vertx.core.impl.transports.EpollTransport;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public boolean supportsDomainSockets()
{
io.vertx.core.impl.transports.EpollTransport v0;
v0 := @this: io.vertx.core.impl.transports.EpollTransport;
return 1;
}
public java.net.SocketAddress convert(io.vertx.core.net.SocketAddress)
{
io.vertx.core.impl.transports.EpollTransport v0;
java.net.SocketAddress v5;
io.netty.channel.unix.DomainSocketAddress v3;
java.lang.String v4;
boolean v2;
io.vertx.core.net.SocketAddress v1;
v0 := @this: io.vertx.core.impl.transports.EpollTransport;
v1 := @parameter0: io.vertx.core.net.SocketAddress;
v2 = interfaceinvoke v1.<io.vertx.core.net.SocketAddress: boolean isDomainSocket()>();
if v2 == 0 goto label1;
v3 = new io.netty.channel.unix.DomainSocketAddress;
v4 = interfaceinvoke v1.<io.vertx.core.net.SocketAddress: java.lang.String path()>();
specialinvoke v3.<io.netty.channel.unix.DomainSocketAddress: void <init>(java.lang.String)>(v4);
return v3;
label1:
v5 = specialinvoke v0.<io.vertx.core.spi.transport.Transport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress)>(v1);
return v5;
}
public io.vertx.core.net.SocketAddress convert(java.net.SocketAddress)
{
io.vertx.core.impl.transports.EpollTransport v0;
java.net.SocketAddress v1;
java.lang.String v4;
io.vertx.core.net.impl.SocketAddressImpl v3;
boolean v2;
io.vertx.core.net.SocketAddress v5;
v0 := @this: io.vertx.core.impl.transports.EpollTransport;
v1 := @parameter0: java.net.SocketAddress;
v2 = v1 instanceof io.netty.channel.unix.DomainSocketAddress;
if v2 == 0 goto label1;
v3 = new io.vertx.core.net.impl.SocketAddressImpl;
v4 = virtualinvoke v1.<io.netty.channel.unix.DomainSocketAddress: java.lang.String path()>();
specialinvoke v3.<io.vertx.core.net.impl.SocketAddressImpl: void <init>(java.lang.String)>(v4);
return v3;
label1:
v5 = specialinvoke v0.<io.vertx.core.spi.transport.Transport: io.vertx.core.net.SocketAddress convert(java.net.SocketAddress)>(v1);
return v5;
}
public boolean isAvailable()
{
io.vertx.core.impl.transports.EpollTransport v0;
boolean v1;
v0 := @this: io.vertx.core.impl.transports.EpollTransport;
v1 = staticinvoke <io.netty.channel.epoll.Epoll: boolean isAvailable()>();
return v1;
}
public java.lang.Throwable unavailabilityCause()
{
java.lang.Throwable v1;
io.vertx.core.impl.transports.EpollTransport v0;
v0 := @this: io.vertx.core.impl.transports.EpollTransport;
v1 = staticinvoke <io.netty.channel.epoll.Epoll: java.lang.Throwable unavailabilityCause()>();
return v1;
}
public io.netty.channel.EventLoopGroup eventLoopGroup(int, int, java.util.concurrent.ThreadFactory, int)
{
io.vertx.core.impl.transports.EpollTransport v0;
int v1, v2, v4;
io.netty.channel.epoll.EpollEventLoopGroup v5;
java.util.concurrent.ThreadFactory v3;
v0 := @this: io.vertx.core.impl.transports.EpollTransport;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: java.util.concurrent.ThreadFactory;
v4 := @parameter3: int;
v5 = new io.netty.channel.epoll.EpollEventLoopGroup;
specialinvoke v5.<io.netty.channel.epoll.EpollEventLoopGroup: void <init>(int,java.util.concurrent.ThreadFactory)>(v2, v3);
virtualinvoke v5.<io.netty.channel.epoll.EpollEventLoopGroup: void setIoRatio(int)>(v4);
return v5;
}
public io.netty.channel.socket.DatagramChannel datagramChannel()
{
io.vertx.core.impl.transports.EpollTransport v0;
io.netty.channel.epoll.EpollDatagramChannel v1;
v0 := @this: io.vertx.core.impl.transports.EpollTransport;
v1 = new io.netty.channel.epoll.EpollDatagramChannel;
specialinvoke v1.<io.netty.channel.epoll.EpollDatagramChannel: void <init>()>();
return v1;
}
public io.netty.channel.socket.DatagramChannel datagramChannel(io.netty.channel.socket.InternetProtocolFamily)
{
io.netty.channel.socket.InternetProtocolFamily v1;
io.vertx.core.impl.transports.EpollTransport v0;
io.netty.channel.epoll.EpollDatagramChannel v2;
v0 := @this: io.vertx.core.impl.transports.EpollTransport;
v1 := @parameter0: io.netty.channel.socket.InternetProtocolFamily;
v2 = new io.netty.channel.epoll.EpollDatagramChannel;
specialinvoke v2.<io.netty.channel.epoll.EpollDatagramChannel: void <init>()>();
return v2;
}
public io.netty.channel.ChannelFactory channelFactory(boolean)
{
io.vertx.core.impl.transports.EpollTransport v0;
io.netty.channel.ChannelFactory v2, v3;
boolean v1;
v0 := @this: io.vertx.core.impl.transports.EpollTransport;
v1 := @parameter0: boolean;
if v1 == 0 goto label1;
v2 = staticinvoke <io.vertx.core.impl.transports.EpollTransport$init__1558: io.netty.channel.ChannelFactory bootstrap$()>();
return v2;
label1:
v3 = staticinvoke <io.vertx.core.impl.transports.EpollTransport$init__1557: io.netty.channel.ChannelFactory bootstrap$()>();
return v3;
}
public io.netty.channel.ChannelFactory serverChannelFactory(boolean)
{
io.vertx.core.impl.transports.EpollTransport v0;
io.netty.channel.ChannelFactory v2, v3;
boolean v1;
v0 := @this: io.vertx.core.impl.transports.EpollTransport;
v1 := @parameter0: boolean;
if v1 == 0 goto label1;
v2 = staticinvoke <io.vertx.core.impl.transports.EpollTransport$init__1560: io.netty.channel.ChannelFactory bootstrap$()>();
return v2;
label1:
v3 = staticinvoke <io.vertx.core.impl.transports.EpollTransport$init__1559: io.netty.channel.ChannelFactory bootstrap$()>();
return v3;
}
public void configure(io.netty.channel.socket.DatagramChannel, io.vertx.core.datagram.DatagramSocketOptions)
{
io.vertx.core.impl.transports.EpollTransport v0;
io.netty.channel.socket.DatagramChannel v1;
io.netty.channel.ChannelOption v4;
io.netty.channel.socket.DatagramChannelConfig v3;
java.lang.Boolean v6;
io.vertx.core.datagram.DatagramSocketOptions v2;
boolean v5;
v0 := @this: io.vertx.core.impl.transports.EpollTransport;
v1 := @parameter0: io.netty.channel.socket.DatagramChannel;
v2 := @parameter1: io.vertx.core.datagram.DatagramSocketOptions;
v3 = interfaceinvoke v1.<io.netty.channel.socket.DatagramChannel: io.netty.channel.socket.DatagramChannelConfig config()>();
v4 = <io.netty.channel.epoll.EpollChannelOption: io.netty.channel.ChannelOption SO_REUSEPORT>;
v5 = virtualinvoke v2.<io.vertx.core.datagram.DatagramSocketOptions: boolean isReusePort()>();
v6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v5);
interfaceinvoke v3.<io.netty.channel.socket.DatagramChannelConfig: boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)>(v4, v6);
specialinvoke v0.<io.vertx.core.spi.transport.Transport: void configure(io.netty.channel.socket.DatagramChannel,io.vertx.core.datagram.DatagramSocketOptions)>(v1, v2);
return;
}
public void configure(io.vertx.core.net.NetServerOptions, boolean, io.netty.bootstrap.ServerBootstrap)
{
io.netty.channel.ChannelOption v12, v15, v4, v8;
java.lang.Integer v11;
io.vertx.core.impl.transports.EpollTransport v0;
int v10;
java.lang.Boolean v14, v17, v6;
boolean v13, v16, v2, v5, v7, v9;
io.vertx.core.net.NetServerOptions v1;
io.netty.bootstrap.ServerBootstrap v3;
v0 := @this: io.vertx.core.impl.transports.EpollTransport;
v1 := @parameter0: io.vertx.core.net.NetServerOptions;
v2 := @parameter1: boolean;
v3 := @parameter2: io.netty.bootstrap.ServerBootstrap;
if v2 != 0 goto label4;
v4 = <io.netty.channel.epoll.EpollChannelOption: io.netty.channel.ChannelOption SO_REUSEPORT>;
v5 = virtualinvoke v1.<io.vertx.core.net.NetServerOptions: boolean isReusePort()>();
v6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v5);
virtualinvoke v3.<io.netty.bootstrap.ServerBootstrap: io.netty.bootstrap.AbstractBootstrap option(io.netty.channel.ChannelOption,java.lang.Object)>(v4, v6);
v7 = virtualinvoke v1.<io.vertx.core.net.NetServerOptions: boolean isTcpFastOpen()>();
if v7 == 0 goto label3;
v8 = <io.netty.channel.epoll.EpollChannelOption: io.netty.channel.ChannelOption TCP_FASTOPEN>;
v9 = virtualinvoke v1.<io.vertx.core.net.NetServerOptions: boolean isTcpFastOpen()>();
if v9 == 0 goto label1;
v10 = <io.vertx.core.impl.transports.EpollTransport: int pendingFastOpenRequestsThreshold>;
goto label2;
label1:
v10 = 0;
label2:
v11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v10);
virtualinvoke v3.<io.netty.bootstrap.ServerBootstrap: io.netty.bootstrap.AbstractBootstrap option(io.netty.channel.ChannelOption,java.lang.Object)>(v8, v11);
label3:
v12 = <io.netty.channel.epoll.EpollChannelOption: io.netty.channel.ChannelOption TCP_QUICKACK>;
v13 = virtualinvoke v1.<io.vertx.core.net.NetServerOptions: boolean isTcpQuickAck()>();
v14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v13);
virtualinvoke v3.<io.netty.bootstrap.ServerBootstrap: io.netty.bootstrap.ServerBootstrap childOption(io.netty.channel.ChannelOption,java.lang.Object)>(v12, v14);
v15 = <io.netty.channel.epoll.EpollChannelOption: io.netty.channel.ChannelOption TCP_CORK>;
v16 = virtualinvoke v1.<io.vertx.core.net.NetServerOptions: boolean isTcpCork()>();
v17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v16);
virtualinvoke v3.<io.netty.bootstrap.ServerBootstrap: io.netty.bootstrap.ServerBootstrap childOption(io.netty.channel.ChannelOption,java.lang.Object)>(v15, v17);
label4:
specialinvoke v0.<io.vertx.core.spi.transport.Transport: void configure(io.vertx.core.net.NetServerOptions,boolean,io.netty.bootstrap.ServerBootstrap)>(v1, v2, v3);
return;
}
public void configure(io.vertx.core.net.ClientOptionsBase, boolean, io.netty.bootstrap.Bootstrap)
{
io.netty.channel.ChannelOption v11, v14, v5, v8;
java.lang.Integer v10;
io.vertx.core.impl.transports.EpollTransport v0;
int v9;
java.lang.Boolean v13, v16, v7;
boolean v12, v15, v2, v4, v6;
io.netty.bootstrap.Bootstrap v3;
io.vertx.core.net.ClientOptionsBase v1;
v0 := @this: io.vertx.core.impl.transports.EpollTransport;
v1 := @parameter0: io.vertx.core.net.ClientOptionsBase;
v2 := @parameter1: boolean;
v3 := @parameter2: io.netty.bootstrap.Bootstrap;
if v2 != 0 goto label2;
v4 = virtualinvoke v1.<io.vertx.core.net.ClientOptionsBase: boolean isTcpFastOpen()>();
if v4 == 0 goto label1;
v5 = <io.netty.channel.epoll.EpollChannelOption: io.netty.channel.ChannelOption TCP_FASTOPEN_CONNECT>;
v6 = virtualinvoke v1.<io.vertx.core.net.ClientOptionsBase: boolean isTcpFastOpen()>();
v7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v6);
virtualinvoke v3.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.AbstractBootstrap option(io.netty.channel.ChannelOption,java.lang.Object)>(v5, v7);
label1:
v8 = <io.netty.channel.epoll.EpollChannelOption: io.netty.channel.ChannelOption TCP_USER_TIMEOUT>;
v9 = virtualinvoke v1.<io.vertx.core.net.ClientOptionsBase: int getTcpUserTimeout()>();
v10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v9);
virtualinvoke v3.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.AbstractBootstrap option(io.netty.channel.ChannelOption,java.lang.Object)>(v8, v10);
v11 = <io.netty.channel.epoll.EpollChannelOption: io.netty.channel.ChannelOption TCP_QUICKACK>;
v12 = virtualinvoke v1.<io.vertx.core.net.ClientOptionsBase: boolean isTcpQuickAck()>();
v13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v12);
virtualinvoke v3.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.AbstractBootstrap option(io.netty.channel.ChannelOption,java.lang.Object)>(v11, v13);
v14 = <io.netty.channel.epoll.EpollChannelOption: io.netty.channel.ChannelOption TCP_CORK>;
v15 = virtualinvoke v1.<io.vertx.core.net.ClientOptionsBase: boolean isTcpCork()>();
v16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v15);
virtualinvoke v3.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.AbstractBootstrap option(io.netty.channel.ChannelOption,java.lang.Object)>(v14, v16);
label2:
specialinvoke v0.<io.vertx.core.spi.transport.Transport: void configure(io.vertx.core.net.ClientOptionsBase,boolean,io.netty.bootstrap.Bootstrap)>(v1, v2, v3);
return;
}
static void <clinit>()
{
<io.vertx.core.impl.transports.EpollTransport: int pendingFastOpenRequestsThreshold> = 256;
return;
}
}