public class io.vertx.core.json.jackson.JacksonCodec extends java.lang.Object implements io.vertx.core.spi.json.JsonCodec
{
private static final com.fasterxml.jackson.core.JsonFactory factory;
public void <init>()
{
io.vertx.core.json.jackson.JacksonCodec v0;
v0 := @this: io.vertx.core.json.jackson.JacksonCodec;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public java.lang.Object fromString(java.lang.String, java.lang.Class) throws io.vertx.core.json.DecodeException
{
com.fasterxml.jackson.core.JsonParser v3;
io.vertx.core.json.jackson.JacksonCodec v0;
java.lang.Class v2;
java.lang.Object v4;
java.lang.String v1;
v0 := @this: io.vertx.core.json.jackson.JacksonCodec;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Class;
v3 = staticinvoke <io.vertx.core.json.jackson.JacksonCodec: com.fasterxml.jackson.core.JsonParser createParser(java.lang.String)>(v1);
v4 = staticinvoke <io.vertx.core.json.jackson.JacksonCodec: java.lang.Object fromParser(com.fasterxml.jackson.core.JsonParser,java.lang.Class)>(v3, v2);
return v4;
}
public java.lang.Object fromString(java.lang.String, com.fasterxml.jackson.core.type.TypeReference) throws io.vertx.core.json.DecodeException
{
io.vertx.core.json.jackson.JacksonCodec v0;
java.lang.Class v3;
java.lang.Object v4;
java.lang.String v1;
com.fasterxml.jackson.core.type.TypeReference v2;
v0 := @this: io.vertx.core.json.jackson.JacksonCodec;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: com.fasterxml.jackson.core.type.TypeReference;
v3 = staticinvoke <io.vertx.core.json.jackson.JacksonCodec: java.lang.Class classTypeOf(com.fasterxml.jackson.core.type.TypeReference)>(v2);
v4 = virtualinvoke v0.<io.vertx.core.json.jackson.JacksonCodec: java.lang.Object fromString(java.lang.String,java.lang.Class)>(v1, v3);
return v4;
}
public java.lang.Object fromBuffer(io.vertx.core.buffer.Buffer, java.lang.Class) throws io.vertx.core.json.DecodeException
{
com.fasterxml.jackson.core.JsonParser v3;
io.vertx.core.buffer.Buffer v1;
io.vertx.core.json.jackson.JacksonCodec v0;
java.lang.Class v2;
java.lang.Object v4;
v0 := @this: io.vertx.core.json.jackson.JacksonCodec;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 := @parameter1: java.lang.Class;
v3 = staticinvoke <io.vertx.core.json.jackson.JacksonCodec: com.fasterxml.jackson.core.JsonParser createParser(io.vertx.core.buffer.Buffer)>(v1);
v4 = staticinvoke <io.vertx.core.json.jackson.JacksonCodec: java.lang.Object fromParser(com.fasterxml.jackson.core.JsonParser,java.lang.Class)>(v3, v2);
return v4;
}
public java.lang.Object fromBuffer(io.vertx.core.buffer.Buffer, com.fasterxml.jackson.core.type.TypeReference) throws io.vertx.core.json.DecodeException
{
io.vertx.core.buffer.Buffer v1;
io.vertx.core.json.jackson.JacksonCodec v0;
java.lang.Class v3;
java.lang.Object v4;
com.fasterxml.jackson.core.type.TypeReference v2;
v0 := @this: io.vertx.core.json.jackson.JacksonCodec;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 := @parameter1: com.fasterxml.jackson.core.type.TypeReference;
v3 = staticinvoke <io.vertx.core.json.jackson.JacksonCodec: java.lang.Class classTypeOf(com.fasterxml.jackson.core.type.TypeReference)>(v2);
v4 = virtualinvoke v0.<io.vertx.core.json.jackson.JacksonCodec: java.lang.Object fromBuffer(io.vertx.core.buffer.Buffer,java.lang.Class)>(v1, v3);
return v4;
}
public java.lang.Object fromValue(java.lang.Object, java.lang.Class)
{
io.vertx.core.json.DecodeException v3;
io.vertx.core.json.jackson.JacksonCodec v0;
java.lang.Class v2;
java.lang.Object v1;
java.lang.String v4, v5;
v0 := @this: io.vertx.core.json.jackson.JacksonCodec;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Class;
v3 = new io.vertx.core.json.DecodeException;
v4 = virtualinvoke v2.<java.lang.Class: java.lang.String getName()>();
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Mapping \u0001  is not available without Jackson Databind on the classpath");
specialinvoke v3.<io.vertx.core.json.DecodeException: void <init>(java.lang.String)>(v5);
throw v3;
}
public java.lang.Object fromValue(java.lang.Object, com.fasterxml.jackson.core.type.TypeReference)
{
io.vertx.core.json.DecodeException v3;
java.lang.reflect.Type v4;
io.vertx.core.json.jackson.JacksonCodec v0;
java.lang.Object v1;
java.lang.String v5, v6;
com.fasterxml.jackson.core.type.TypeReference v2;
v0 := @this: io.vertx.core.json.jackson.JacksonCodec;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: com.fasterxml.jackson.core.type.TypeReference;
v3 = new io.vertx.core.json.DecodeException;
v4 = virtualinvoke v2.<com.fasterxml.jackson.core.type.TypeReference: java.lang.reflect.Type getType()>();
v5 = interfaceinvoke v4.<java.lang.reflect.Type: java.lang.String getTypeName()>();
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Mapping \u0001 is not available without Jackson Databind on the classpath");
specialinvoke v3.<io.vertx.core.json.DecodeException: void <init>(java.lang.String)>(v6);
throw v3;
}
public java.lang.String toString(java.lang.Object, boolean) throws io.vertx.core.json.EncodeException
{
java.lang.Throwable v9;
com.fasterxml.jackson.core.JsonGenerator v4;
io.vertx.core.json.jackson.JacksonCodec v0;
java.io.StringWriter v3;
java.io.IOException v6;
io.vertx.core.json.EncodeException v7;
java.lang.Object v1;
java.lang.String v5, v8;
boolean v2;
v0 := @this: io.vertx.core.json.jackson.JacksonCodec;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: boolean;
v3 = new java.io.StringWriter;
specialinvoke v3.<java.io.StringWriter: void <init>()>();
v4 = staticinvoke <io.vertx.core.json.jackson.JacksonCodec: com.fasterxml.jackson.core.JsonGenerator createGenerator(java.io.Writer,boolean)>(v3, v2);
label1:
staticinvoke <io.vertx.core.json.jackson.JacksonCodec: void encodeJson(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)>(v1, v4);
virtualinvoke v4.<com.fasterxml.jackson.core.JsonGenerator: void flush()>();
v5 = virtualinvoke v3.<java.io.StringWriter: java.lang.String toString()>();
label2:
staticinvoke <io.vertx.core.json.jackson.JacksonCodec: void close(java.io.Closeable)>(v4);
return v5;
label3:
v6 := @caughtexception;
v7 = new io.vertx.core.json.EncodeException;
v8 = virtualinvoke v6.<java.io.IOException: java.lang.String getMessage()>();
specialinvoke v7.<io.vertx.core.json.EncodeException: void <init>(java.lang.String,java.lang.Throwable)>(v8, v6);
throw v7;
label4:
v9 := @caughtexception;
staticinvoke <io.vertx.core.json.jackson.JacksonCodec: void close(java.io.Closeable)>(v4);
throw v9;
catch java.io.IOException from label1 to label2 with label3;
catch java.lang.Throwable from label1 to label2 with label4;
}
public io.vertx.core.buffer.Buffer toBuffer(java.lang.Object, boolean) throws io.vertx.core.json.EncodeException
{
java.lang.Throwable v10;
com.fasterxml.jackson.core.JsonGenerator v5;
io.vertx.core.json.jackson.JacksonCodec v0;
java.io.IOException v7;
io.netty.buffer.ByteBufOutputStream v4;
io.netty.buffer.ByteBuf v3;
io.vertx.core.buffer.Buffer v6;
io.vertx.core.json.EncodeException v8;
java.lang.Object v1;
java.lang.String v9;
boolean v2;
v0 := @this: io.vertx.core.json.jackson.JacksonCodec;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: boolean;
v3 = staticinvoke <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf buffer()>();
v4 = new io.netty.buffer.ByteBufOutputStream;
specialinvoke v4.<io.netty.buffer.ByteBufOutputStream: void <init>(io.netty.buffer.ByteBuf)>(v3);
v5 = staticinvoke <io.vertx.core.json.jackson.JacksonCodec: com.fasterxml.jackson.core.JsonGenerator createGenerator(java.io.OutputStream,boolean)>(v4, v2);
label1:
staticinvoke <io.vertx.core.json.jackson.JacksonCodec: void encodeJson(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)>(v1, v5);
virtualinvoke v5.<com.fasterxml.jackson.core.JsonGenerator: void flush()>();
v6 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(io.netty.buffer.ByteBuf)>(v3);
label2:
staticinvoke <io.vertx.core.json.jackson.JacksonCodec: void close(java.io.Closeable)>(v5);
return v6;
label3:
v7 := @caughtexception;
v8 = new io.vertx.core.json.EncodeException;
v9 = virtualinvoke v7.<java.io.IOException: java.lang.String getMessage()>();
specialinvoke v8.<io.vertx.core.json.EncodeException: void <init>(java.lang.String,java.lang.Throwable)>(v9, v7);
throw v8;
label4:
v10 := @caughtexception;
staticinvoke <io.vertx.core.json.jackson.JacksonCodec: void close(java.io.Closeable)>(v5);
throw v10;
catch java.io.IOException from label1 to label2 with label3;
catch java.lang.Throwable from label1 to label2 with label4;
}
public static com.fasterxml.jackson.core.JsonParser createParser(java.lang.String)
{
com.fasterxml.jackson.core.JsonFactory v1;
com.fasterxml.jackson.core.JsonParser v2;
io.vertx.core.json.DecodeException v4;
java.io.IOException v3;
java.lang.String v0, v5, v6;
v0 := @parameter0: java.lang.String;
label1:
v1 = <io.vertx.core.json.jackson.JacksonCodec: com.fasterxml.jackson.core.JsonFactory factory>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonFactory: com.fasterxml.jackson.core.JsonParser createParser(java.lang.String)>(v0);
label2:
return v2;
label3:
v3 := @caughtexception;
v4 = new io.vertx.core.json.DecodeException;
v5 = virtualinvoke v3.<java.io.IOException: java.lang.String getMessage()>();
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to decode:\u0001");
specialinvoke v4.<io.vertx.core.json.DecodeException: void <init>(java.lang.String,java.lang.Throwable)>(v6, v3);
throw v4;
catch java.io.IOException from label1 to label2 with label3;
}
public static com.fasterxml.jackson.core.JsonParser createParser(io.vertx.core.buffer.Buffer)
{
com.fasterxml.jackson.core.JsonParser v4;
io.vertx.core.json.DecodeException v6;
java.io.IOException v5;
com.fasterxml.jackson.core.JsonFactory v1;
io.netty.buffer.ByteBuf v3;
io.vertx.core.buffer.Buffer v0;
java.lang.String v7, v8;
io.netty.buffer.ByteBufInputStream v2;
v0 := @parameter0: io.vertx.core.buffer.Buffer;
label1:
v1 = <io.vertx.core.json.jackson.JacksonCodec: com.fasterxml.jackson.core.JsonFactory factory>;
v2 = new io.netty.buffer.ByteBufInputStream;
v3 = interfaceinvoke v0.<io.vertx.core.buffer.Buffer: io.netty.buffer.ByteBuf getByteBuf()>();
specialinvoke v2.<io.netty.buffer.ByteBufInputStream: void <init>(io.netty.buffer.ByteBuf)>(v3);
v4 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonFactory: com.fasterxml.jackson.core.JsonParser createParser(java.io.InputStream)>(v2);
label2:
return v4;
label3:
v5 := @caughtexception;
v6 = new io.vertx.core.json.DecodeException;
v7 = virtualinvoke v5.<java.io.IOException: java.lang.String getMessage()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to decode:\u0001");
specialinvoke v6.<io.vertx.core.json.DecodeException: void <init>(java.lang.String,java.lang.Throwable)>(v8, v5);
throw v6;
catch java.io.IOException from label1 to label2 with label3;
}
private static com.fasterxml.jackson.core.JsonGenerator createGenerator(java.io.Writer, boolean)
{
io.vertx.core.json.DecodeException v5;
com.fasterxml.jackson.core.JsonGenerator v3;
java.io.IOException v4;
com.fasterxml.jackson.core.JsonFactory v2;
java.io.Writer v0;
java.lang.String v6, v7;
boolean v1;
v0 := @parameter0: java.io.Writer;
v1 := @parameter1: boolean;
label1:
v2 = <io.vertx.core.json.jackson.JacksonCodec: com.fasterxml.jackson.core.JsonFactory factory>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonFactory: com.fasterxml.jackson.core.JsonGenerator createGenerator(java.io.Writer)>(v0);
if v1 == 0 goto label2;
virtualinvoke v3.<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonGenerator useDefaultPrettyPrinter()>();
label2:
return v3;
label3:
v4 := @caughtexception;
v5 = new io.vertx.core.json.DecodeException;
v6 = virtualinvoke v4.<java.io.IOException: java.lang.String getMessage()>();
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to decode:\u0001");
specialinvoke v5.<io.vertx.core.json.DecodeException: void <init>(java.lang.String,java.lang.Throwable)>(v7, v4);
throw v5;
catch java.io.IOException from label1 to label2 with label3;
}
private static com.fasterxml.jackson.core.JsonGenerator createGenerator(java.io.OutputStream, boolean)
{
java.io.OutputStream v0;
io.vertx.core.json.DecodeException v5;
com.fasterxml.jackson.core.JsonGenerator v3;
java.io.IOException v4;
com.fasterxml.jackson.core.JsonFactory v2;
java.lang.String v6, v7;
boolean v1;
v0 := @parameter0: java.io.OutputStream;
v1 := @parameter1: boolean;
label1:
v2 = <io.vertx.core.json.jackson.JacksonCodec: com.fasterxml.jackson.core.JsonFactory factory>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonFactory: com.fasterxml.jackson.core.JsonGenerator createGenerator(java.io.OutputStream)>(v0);
if v1 == 0 goto label2;
virtualinvoke v3.<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonGenerator useDefaultPrettyPrinter()>();
label2:
return v3;
label3:
v4 := @caughtexception;
v5 = new io.vertx.core.json.DecodeException;
v6 = virtualinvoke v4.<java.io.IOException: java.lang.String getMessage()>();
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to decode:\u0001");
specialinvoke v5.<io.vertx.core.json.DecodeException: void <init>(java.lang.String,java.lang.Throwable)>(v7, v4);
throw v5;
catch java.io.IOException from label1 to label2 with label3;
}
public java.lang.Object fromString(java.lang.String) throws io.vertx.core.json.DecodeException
{
com.fasterxml.jackson.core.JsonParser v2;
io.vertx.core.json.jackson.JacksonCodec v0;
java.lang.Object v3;
java.lang.String v1;
v0 := @this: io.vertx.core.json.jackson.JacksonCodec;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.core.json.jackson.JacksonCodec: com.fasterxml.jackson.core.JsonParser createParser(java.lang.String)>(v1);
v3 = staticinvoke <io.vertx.core.json.jackson.JacksonCodec: java.lang.Object fromParser(com.fasterxml.jackson.core.JsonParser,java.lang.Class)>(v2, class "Ljava/lang/Object;");
return v3;
}
public java.lang.Object fromBuffer(io.vertx.core.buffer.Buffer) throws io.vertx.core.json.DecodeException
{
com.fasterxml.jackson.core.JsonParser v2;
io.vertx.core.buffer.Buffer v1;
io.vertx.core.json.jackson.JacksonCodec v0;
java.lang.Object v3;
v0 := @this: io.vertx.core.json.jackson.JacksonCodec;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 = staticinvoke <io.vertx.core.json.jackson.JacksonCodec: com.fasterxml.jackson.core.JsonParser createParser(io.vertx.core.buffer.Buffer)>(v1);
v3 = staticinvoke <io.vertx.core.json.jackson.JacksonCodec: java.lang.Object fromParser(com.fasterxml.jackson.core.JsonParser,java.lang.Class)>(v2, class "Ljava/lang/Object;");
return v3;
}
public static java.lang.Object fromParser(com.fasterxml.jackson.core.JsonParser, java.lang.Class) throws io.vertx.core.json.DecodeException
{
java.lang.Throwable v7;
com.fasterxml.jackson.core.JsonParser v0;
io.vertx.core.json.DecodeException v5, v8;
java.io.IOException v4;
java.lang.Class v1;
java.lang.Object v2, v9;
com.fasterxml.jackson.core.JsonToken v3;
java.lang.String v6;
v0 := @parameter0: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter1: java.lang.Class;
label1:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>();
v2 = staticinvoke <io.vertx.core.json.jackson.JacksonCodec: java.lang.Object parseAny(com.fasterxml.jackson.core.JsonParser)>(v0);
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>();
label2:
staticinvoke <io.vertx.core.json.jackson.JacksonCodec: void close(java.io.Closeable)>(v0);
goto label5;
label3:
v4 := @caughtexception;
v5 = new io.vertx.core.json.DecodeException;
v6 = virtualinvoke v4.<java.io.IOException: java.lang.String getMessage()>();
specialinvoke v5.<io.vertx.core.json.DecodeException: void <init>(java.lang.String,java.lang.Throwable)>(v6, v4);
throw v5;
label4:
v7 := @caughtexception;
staticinvoke <io.vertx.core.json.jackson.JacksonCodec: void close(java.io.Closeable)>(v0);
throw v7;
label5:
if v3 == null goto label6;
v8 = new io.vertx.core.json.DecodeException;
specialinvoke v8.<io.vertx.core.json.DecodeException: void <init>(java.lang.String)>("Unexpected trailing token");
throw v8;
label6:
v9 = staticinvoke <io.vertx.core.json.jackson.JacksonCodec: java.lang.Object cast(java.lang.Object,java.lang.Class)>(v2, v1);
return v9;
catch java.io.IOException from label1 to label2 with label3;
catch java.lang.Throwable from label1 to label2 with label4;
}
private static java.lang.Object parseAny(com.fasterxml.jackson.core.JsonParser) throws java.io.IOException, io.vertx.core.json.DecodeException
{
com.fasterxml.jackson.core.JsonParser v0;
io.vertx.core.json.DecodeException v8;
java.util.List v3;
java.util.Map v2;
int v1;
java.lang.Boolean v6, v7;
java.lang.String v4;
java.lang.Number v5;
v0 := @parameter0: com.fasterxml.jackson.core.JsonParser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: int getCurrentTokenId()>();
tableswitch(v1)
{
case 1: goto label1;
case 2: goto label8;
case 3: goto label2;
case 4: goto label8;
case 5: goto label8;
case 6: goto label3;
case 7: goto label4;
case 8: goto label4;
case 9: goto label5;
case 10: goto label6;
case 11: goto label7;
default: goto label8;
};
label1:
v2 = staticinvoke <io.vertx.core.json.jackson.JacksonCodec: java.util.Map parseObject(com.fasterxml.jackson.core.JsonParser)>(v0);
return v2;
label2:
v3 = staticinvoke <io.vertx.core.json.jackson.JacksonCodec: java.util.List parseArray(com.fasterxml.jackson.core.JsonParser)>(v0);
return v3;
label3:
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: java.lang.String getText()>();
return v4;
label4:
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: java.lang.Number getNumberValue()>();
return v5;
label5:
v6 = <java.lang.Boolean: java.lang.Boolean TRUE>;
return v6;
label6:
v7 = <java.lang.Boolean: java.lang.Boolean FALSE>;
return v7;
label7:
return null;
label8:
v8 = new io.vertx.core.json.DecodeException;
specialinvoke v8.<io.vertx.core.json.DecodeException: void <init>(java.lang.String)>("Unexpected token");
throw v8;
}
private static java.util.Map parseObject(com.fasterxml.jackson.core.JsonParser) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser v0;
java.util.LinkedHashMap v2, v5, v8, v9;
java.lang.Object v10, v3, v6;
java.lang.String v1, v4, v7;
v0 := @parameter0: com.fasterxml.jackson.core.JsonParser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: java.lang.String nextFieldName()>();
if v1 != null goto label1;
v2 = new java.util.LinkedHashMap;
specialinvoke v2.<java.util.LinkedHashMap: void <init>(int)>(2);
return v2;
label1:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>();
v3 = staticinvoke <io.vertx.core.json.jackson.JacksonCodec: java.lang.Object parseAny(com.fasterxml.jackson.core.JsonParser)>(v0);
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: java.lang.String nextFieldName()>();
if v4 != null goto label2;
v5 = new java.util.LinkedHashMap;
specialinvoke v5.<java.util.LinkedHashMap: void <init>(int)>(2);
virtualinvoke v5.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v3);
return v5;
label2:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>();
v6 = staticinvoke <io.vertx.core.json.jackson.JacksonCodec: java.lang.Object parseAny(com.fasterxml.jackson.core.JsonParser)>(v0);
v7 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: java.lang.String nextFieldName()>();
if v7 != null goto label3;
v8 = new java.util.LinkedHashMap;
specialinvoke v8.<java.util.LinkedHashMap: void <init>(int)>(2);
virtualinvoke v8.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v3);
virtualinvoke v8.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v4, v6);
return v8;
label3:
v9 = new java.util.LinkedHashMap;
specialinvoke v9.<java.util.LinkedHashMap: void <init>()>();
virtualinvoke v9.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v3);
virtualinvoke v9.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v4, v6);
label4:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>();
v10 = staticinvoke <io.vertx.core.json.jackson.JacksonCodec: java.lang.Object parseAny(com.fasterxml.jackson.core.JsonParser)>(v0);
virtualinvoke v9.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v7, v10);
v7 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: java.lang.String nextFieldName()>();
if v7 != null goto label4;
return v9;
}
private static java.util.List parseArray(com.fasterxml.jackson.core.JsonParser) throws java.io.IOException
{
java.lang.UnsupportedOperationException v3;
com.fasterxml.jackson.core.JsonParser v0;
int v2;
java.lang.Object v4;
java.util.ArrayList v1;
v0 := @parameter0: com.fasterxml.jackson.core.JsonParser;
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
label1:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>();
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: int getCurrentTokenId()>();
if v2 != 5 goto label2;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>()>();
throw v3;
label2:
if v2 != 4 goto label3;
return v1;
label3:
v4 = staticinvoke <io.vertx.core.json.jackson.JacksonCodec: java.lang.Object parseAny(com.fasterxml.jackson.core.JsonParser)>(v0);
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v4);
goto label1;
}
static void close(java.io.Closeable)
{
java.io.Closeable v0;
v0 := @parameter0: java.io.Closeable;
return;
}
private static void encodeJson(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator) throws io.vertx.core.json.EncodeException
{
byte[] v42;
byte v28;
boolean v11, v13, v15, v16, v17, v19, v2, v21, v23, v25, v27, v29, v3, v30, v32, v33, v34, v37, v4, v40, v44, v7;
java.util.Set v5;
float v24;
com.fasterxml.jackson.core.JsonGenerator v1;
long v22;
short v18;
int v20;
java.lang.String v36, v39, v43, v45, v48, v49, v52;
double v26, v31;
java.util.Iterator v12, v6;
java.io.IOException v50;
java.util.Base64$Encoder v38, v41;
io.vertx.core.json.EncodeException v46, v51;
java.time.format.DateTimeFormatter v35;
java.lang.Class v47;
java.lang.Object v0, v10, v14, v8, v9;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;
label01:
v2 = v0 instanceof io.vertx.core.json.JsonObject;
if v2 == 0 goto label02;
v0 = virtualinvoke v0.<io.vertx.core.json.JsonObject: java.util.Map getMap()>();
goto label03;
label02:
v3 = v0 instanceof io.vertx.core.json.JsonArray;
if v3 == 0 goto label03;
v0 = virtualinvoke v0.<io.vertx.core.json.JsonArray: java.util.List getList()>();
label03:
v4 = v0 instanceof java.util.Map;
if v4 == 0 goto label06;
virtualinvoke v1.<com.fasterxml.jackson.core.JsonGenerator: void writeStartObject()>();
v5 = interfaceinvoke v0.<java.util.Map: java.util.Set entrySet()>();
v6 = interfaceinvoke v5.<java.util.Set: java.util.Iterator iterator()>();
label04:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label05;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = interfaceinvoke v8.<java.util.Map$Entry: java.lang.Object getKey()>();
virtualinvoke v1.<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(v9);
v10 = interfaceinvoke v8.<java.util.Map$Entry: java.lang.Object getValue()>();
staticinvoke <io.vertx.core.json.jackson.JacksonCodec: void encodeJson(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)>(v10, v1);
goto label04;
label05:
virtualinvoke v1.<com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>();
goto label27;
label06:
v11 = v0 instanceof java.util.List;
if v11 == 0 goto label09;
virtualinvoke v1.<com.fasterxml.jackson.core.JsonGenerator: void writeStartArray()>();
v12 = interfaceinvoke v0.<java.util.List: java.util.Iterator iterator()>();
label07:
v13 = interfaceinvoke v12.<java.util.Iterator: boolean hasNext()>();
if v13 == 0 goto label08;
v14 = interfaceinvoke v12.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <io.vertx.core.json.jackson.JacksonCodec: void encodeJson(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)>(v14, v1);
goto label07;
label08:
virtualinvoke v1.<com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>();
goto label27;
label09:
v15 = v0 instanceof java.lang.String;
if v15 == 0 goto label10;
virtualinvoke v1.<com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>(v0);
goto label27;
label10:
v16 = v0 instanceof java.lang.Number;
if v16 == 0 goto label19;
v17 = v0 instanceof java.lang.Short;
if v17 == 0 goto label11;
v18 = virtualinvoke v0.<java.lang.Short: short shortValue()>();
virtualinvoke v1.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(short)>(v18);
goto label27;
label11:
v19 = v0 instanceof java.lang.Integer;
if v19 == 0 goto label12;
v20 = virtualinvoke v0.<java.lang.Integer: int intValue()>();
virtualinvoke v1.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(int)>(v20);
goto label27;
label12:
v21 = v0 instanceof java.lang.Long;
if v21 == 0 goto label13;
v22 = virtualinvoke v0.<java.lang.Long: long longValue()>();
virtualinvoke v1.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(long)>(v22);
goto label27;
label13:
v23 = v0 instanceof java.lang.Float;
if v23 == 0 goto label14;
v24 = virtualinvoke v0.<java.lang.Float: float floatValue()>();
virtualinvoke v1.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(float)>(v24);
goto label27;
label14:
v25 = v0 instanceof java.lang.Double;
if v25 == 0 goto label15;
v26 = virtualinvoke v0.<java.lang.Double: double doubleValue()>();
virtualinvoke v1.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(double)>(v26);
goto label27;
label15:
v27 = v0 instanceof java.lang.Byte;
if v27 == 0 goto label16;
v28 = virtualinvoke v0.<java.lang.Byte: byte byteValue()>();
virtualinvoke v1.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(short)>(v28);
goto label27;
label16:
v29 = v0 instanceof java.math.BigInteger;
if v29 == 0 goto label17;
virtualinvoke v1.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(java.math.BigInteger)>(v0);
goto label27;
label17:
v30 = v0 instanceof java.math.BigDecimal;
if v30 == 0 goto label18;
virtualinvoke v1.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(java.math.BigDecimal)>(v0);
goto label27;
label18:
v31 = virtualinvoke v0.<java.lang.Number: double doubleValue()>();
virtualinvoke v1.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(double)>(v31);
goto label27;
label19:
v32 = v0 instanceof java.lang.Boolean;
if v32 == 0 goto label20;
v33 = virtualinvoke v0.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<com.fasterxml.jackson.core.JsonGenerator: void writeBoolean(boolean)>(v33);
goto label27;
label20:
v34 = v0 instanceof java.time.Instant;
if v34 == 0 goto label21;
v35 = <java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ISO_INSTANT>;
v36 = virtualinvoke v35.<java.time.format.DateTimeFormatter: java.lang.String format(java.time.temporal.TemporalAccessor)>(v0);
virtualinvoke v1.<com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>(v36);
goto label27;
label21:
v37 = v0 instanceof byte[];
if v37 == 0 goto label22;
v38 = <io.vertx.core.json.impl.JsonUtil: java.util.Base64$Encoder BASE64_ENCODER>;
v39 = virtualinvoke v38.<java.util.Base64$Encoder: java.lang.String encodeToString(byte[])>(v0);
virtualinvoke v1.<com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>(v39);
goto label27;
label22:
v40 = v0 instanceof io.vertx.core.buffer.Buffer;
if v40 == 0 goto label23;
v41 = <io.vertx.core.json.impl.JsonUtil: java.util.Base64$Encoder BASE64_ENCODER>;
v42 = interfaceinvoke v0.<io.vertx.core.buffer.Buffer: byte[] getBytes()>();
v43 = virtualinvoke v41.<java.util.Base64$Encoder: java.lang.String encodeToString(byte[])>(v42);
virtualinvoke v1.<com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>(v43);
goto label27;
label23:
v44 = v0 instanceof java.lang.Enum;
if v44 == 0 goto label24;
v45 = virtualinvoke v0.<java.lang.Enum: java.lang.String name()>();
virtualinvoke v1.<com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>(v45);
goto label27;
label24:
if v0 != null goto label25;
virtualinvoke v1.<com.fasterxml.jackson.core.JsonGenerator: void writeNull()>();
goto label27;
label25:
v46 = new io.vertx.core.json.EncodeException;
v47 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v48 = virtualinvoke v47.<java.lang.Class: java.lang.String getName()>();
v49 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v48) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Mapping \u0001  is not available without Jackson Databind on the classpath");
specialinvoke v46.<io.vertx.core.json.EncodeException: void <init>(java.lang.String)>(v49);
throw v46;
label26:
v50 := @caughtexception;
v51 = new io.vertx.core.json.EncodeException;
v52 = virtualinvoke v50.<java.io.IOException: java.lang.String getMessage()>();
specialinvoke v51.<io.vertx.core.json.EncodeException: void <init>(java.lang.String,java.lang.Throwable)>(v52, v50);
throw v51;
label27:
return;
catch java.io.IOException from label01 to label26 with label26;
}
private static java.lang.Class classTypeOf(com.fasterxml.jackson.core.type.TypeReference)
{
io.vertx.core.json.DecodeException v5;
java.lang.reflect.Type v1, v4;
com.fasterxml.jackson.core.type.TypeReference v0;
boolean v2, v3;
v0 := @parameter0: com.fasterxml.jackson.core.type.TypeReference;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.type.TypeReference: java.lang.reflect.Type getType()>();
v2 = v1 instanceof java.lang.Class;
if v2 == 0 goto label1;
return v1;
label1:
v3 = v1 instanceof java.lang.reflect.ParameterizedType;
if v3 == 0 goto label2;
v4 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
return v4;
label2:
v5 = new io.vertx.core.json.DecodeException;
specialinvoke v5.<io.vertx.core.json.DecodeException: void <init>()>();
throw v5;
}
private static java.lang.Object cast(java.lang.Object, java.lang.Class)
{
byte[] v16;
io.vertx.core.json.DecodeException v20, v24, v33, v4, v9;
byte v30;
io.vertx.core.json.JsonObject v5;
boolean v12, v13, v19, v2, v22, v23, v3, v32, v7, v8;
float v28;
java.util.Base64$Decoder v14, v15;
long v27;
java.time.temporal.TemporalAccessor v18;
short v31;
int v26;
double v29;
io.vertx.core.json.JsonArray v10;
java.time.format.DateTimeFormatter v17;
java.lang.Class v1;
java.lang.Object v0, v11, v21, v25, v34, v6;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Class;
v2 = v0 instanceof java.util.Map;
if v2 == 0 goto label03;
v3 = virtualinvoke v1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/util/Map;");
if v3 != 0 goto label01;
v4 = new io.vertx.core.json.DecodeException;
specialinvoke v4.<io.vertx.core.json.DecodeException: void <init>(java.lang.String)>("Failed to decode");
throw v4;
label01:
if v1 != class "Ljava/lang/Object;" goto label02;
v5 = new io.vertx.core.json.JsonObject;
specialinvoke v5.<io.vertx.core.json.JsonObject: void <init>(java.util.Map)>(v0);
v0 = v5;
label02:
v6 = virtualinvoke v1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(v0);
return v6;
label03:
v7 = v0 instanceof java.util.List;
if v7 == 0 goto label06;
v8 = virtualinvoke v1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/util/List;");
if v8 != 0 goto label04;
v9 = new io.vertx.core.json.DecodeException;
specialinvoke v9.<io.vertx.core.json.DecodeException: void <init>(java.lang.String)>("Failed to decode");
throw v9;
label04:
if v1 != class "Ljava/lang/Object;" goto label05;
v10 = new io.vertx.core.json.JsonArray;
specialinvoke v10.<io.vertx.core.json.JsonArray: void <init>(java.util.List)>(v0);
v0 = v10;
label05:
v11 = virtualinvoke v1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(v0);
return v11;
label06:
v12 = v0 instanceof java.lang.String;
if v12 == 0 goto label12;
v13 = virtualinvoke v1.<java.lang.Class: boolean isEnum()>();
if v13 == 0 goto label07;
v0 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(v1, v0);
goto label11;
label07:
if v1 != class "[B" goto label08;
v14 = <io.vertx.core.json.impl.JsonUtil: java.util.Base64$Decoder BASE64_DECODER>;
v0 = virtualinvoke v14.<java.util.Base64$Decoder: byte[] decode(java.lang.String)>(v0);
goto label11;
label08:
if v1 != class "Lio/vertx/core/buffer/Buffer;" goto label09;
v15 = <io.vertx.core.json.impl.JsonUtil: java.util.Base64$Decoder BASE64_DECODER>;
v16 = virtualinvoke v15.<java.util.Base64$Decoder: byte[] decode(java.lang.String)>(v0);
v0 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(byte[])>(v16);
goto label11;
label09:
if v1 != class "Ljava/time/Instant;" goto label10;
v17 = <java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ISO_INSTANT>;
v18 = virtualinvoke v17.<java.time.format.DateTimeFormatter: java.time.temporal.TemporalAccessor parse(java.lang.CharSequence)>(v0);
v0 = staticinvoke <java.time.Instant: java.time.Instant 'from'(java.time.temporal.TemporalAccessor)>(v18);
goto label11;
label10:
v19 = virtualinvoke v1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/lang/String;");
if v19 != 0 goto label11;
v20 = new io.vertx.core.json.DecodeException;
specialinvoke v20.<io.vertx.core.json.DecodeException: void <init>(java.lang.String)>("Failed to decode");
throw v20;
label11:
v21 = virtualinvoke v1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(v0);
return v21;
label12:
v22 = v0 instanceof java.lang.Boolean;
if v22 == 0 goto label14;
v23 = virtualinvoke v1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/lang/Boolean;");
if v23 != 0 goto label13;
v24 = new io.vertx.core.json.DecodeException;
specialinvoke v24.<io.vertx.core.json.DecodeException: void <init>(java.lang.String)>("Failed to decode");
throw v24;
label13:
v25 = virtualinvoke v1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(v0);
return v25;
label14:
if v0 != null goto label15;
return null;
label15:
if v1 != class "Ljava/lang/Integer;" goto label16;
v26 = virtualinvoke v0.<java.lang.Number: int intValue()>();
v0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v26);
goto label22;
label16:
if v1 != class "Ljava/lang/Long;" goto label17;
v27 = virtualinvoke v0.<java.lang.Number: long longValue()>();
v0 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v27);
goto label22;
label17:
if v1 != class "Ljava/lang/Float;" goto label18;
v28 = virtualinvoke v0.<java.lang.Number: float floatValue()>();
v0 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(v28);
goto label22;
label18:
if v1 != class "Ljava/lang/Double;" goto label19;
v29 = virtualinvoke v0.<java.lang.Number: double doubleValue()>();
v0 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(v29);
goto label22;
label19:
if v1 != class "Ljava/lang/Byte;" goto label20;
v30 = virtualinvoke v0.<java.lang.Number: byte byteValue()>();
v0 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(v30);
goto label22;
label20:
if v1 != class "Ljava/lang/Short;" goto label21;
v31 = virtualinvoke v0.<java.lang.Number: short shortValue()>();
v0 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(v31);
goto label22;
label21:
if v1 == class "Ljava/lang/Object;" goto label22;
v32 = virtualinvoke v1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljava/lang/Number;");
if v32 != 0 goto label22;
v33 = new io.vertx.core.json.DecodeException;
specialinvoke v33.<io.vertx.core.json.DecodeException: void <init>(java.lang.String)>("Failed to decode");
throw v33;
label22:
v34 = virtualinvoke v1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(v0);
return v34;
}
public static java.lang.Object decodeValue(java.lang.String, com.fasterxml.jackson.core.type.TypeReference) throws io.vertx.core.json.DecodeException
{
io.vertx.core.json.jackson.JacksonCodec v2;
java.lang.Object v3;
java.lang.String v0;
com.fasterxml.jackson.core.type.TypeReference v1;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: com.fasterxml.jackson.core.type.TypeReference;
v2 = <io.vertx.core.json.jackson.JacksonFactory: io.vertx.core.json.jackson.JacksonCodec CODEC>;
v3 = virtualinvoke v2.<io.vertx.core.json.jackson.JacksonCodec: java.lang.Object fromString(java.lang.String,com.fasterxml.jackson.core.type.TypeReference)>(v0, v1);
return v3;
}
public static java.lang.Object decodeValue(io.vertx.core.buffer.Buffer, com.fasterxml.jackson.core.type.TypeReference) throws io.vertx.core.json.DecodeException
{
io.vertx.core.buffer.Buffer v0;
io.vertx.core.json.jackson.JacksonCodec v2;
java.lang.Object v3;
com.fasterxml.jackson.core.type.TypeReference v1;
v0 := @parameter0: io.vertx.core.buffer.Buffer;
v1 := @parameter1: com.fasterxml.jackson.core.type.TypeReference;
v2 = <io.vertx.core.json.jackson.JacksonFactory: io.vertx.core.json.jackson.JacksonCodec CODEC>;
v3 = virtualinvoke v2.<io.vertx.core.json.jackson.JacksonCodec: java.lang.Object fromBuffer(io.vertx.core.buffer.Buffer,com.fasterxml.jackson.core.type.TypeReference)>(v0, v1);
return v3;
}
static void <clinit>()
{
com.fasterxml.jackson.core.JsonParser$Feature v2;
com.fasterxml.jackson.core.JsonFactory v0, v1;
v0 = new com.fasterxml.jackson.core.JsonFactory;
specialinvoke v0.<com.fasterxml.jackson.core.JsonFactory: void <init>()>();
<io.vertx.core.json.jackson.JacksonCodec: com.fasterxml.jackson.core.JsonFactory factory> = v0;
v1 = <io.vertx.core.json.jackson.JacksonCodec: com.fasterxml.jackson.core.JsonFactory factory>;
v2 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_COMMENTS>;
virtualinvoke v1.<com.fasterxml.jackson.core.JsonFactory: com.fasterxml.jackson.core.JsonFactory configure(com.fasterxml.jackson.core.JsonParser$Feature,boolean)>(v2, 1);
return;
}
}