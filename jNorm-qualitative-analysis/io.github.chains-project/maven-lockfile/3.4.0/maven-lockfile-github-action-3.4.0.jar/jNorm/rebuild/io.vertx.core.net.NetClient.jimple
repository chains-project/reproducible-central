public interface  io.vertx.core.net.NetClient extends java.lang.Object implements io.vertx.core.metrics.Measured
{
public abstract io.vertx.core.net.NetClient connect(int, java.lang.String, io.vertx.core.Handler);
public abstract io.vertx.core.Future connect(int, java.lang.String);
public abstract io.vertx.core.net.NetClient connect(int, java.lang.String, java.lang.String, io.vertx.core.Handler);
public abstract io.vertx.core.Future connect(int, java.lang.String, java.lang.String);
public abstract io.vertx.core.net.NetClient connect(io.vertx.core.net.SocketAddress, io.vertx.core.Handler);
public abstract io.vertx.core.Future connect(io.vertx.core.net.SocketAddress);
public abstract io.vertx.core.net.NetClient connect(io.vertx.core.net.SocketAddress, java.lang.String, io.vertx.core.Handler);
public abstract io.vertx.core.Future connect(io.vertx.core.net.SocketAddress, java.lang.String);
public abstract void close(io.vertx.core.Handler);
public abstract io.vertx.core.Future close();
public abstract io.vertx.core.Future updateSSLOptions(io.vertx.core.net.SSLOptions);
public void updateSSLOptions(io.vertx.core.net.SSLOptions, io.vertx.core.Handler)
{
io.vertx.core.net.SSLOptions v1;
io.vertx.core.Handler v2;
io.vertx.core.net.NetClient v0;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.net.NetClient;
v1 := @parameter0: io.vertx.core.net.SSLOptions;
v2 := @parameter1: io.vertx.core.Handler;
v3 = interfaceinvoke v0.<io.vertx.core.net.NetClient: io.vertx.core.Future updateSSLOptions(io.vertx.core.net.SSLOptions)>(v1);
if v2 == null goto label1;
interfaceinvoke v3.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
label1:
return;
}
}