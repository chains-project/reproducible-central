public class io.vertx.core.net.NetClientOptions extends io.vertx.core.net.ClientOptionsBase
{
public static final int DEFAULT_RECONNECT_ATTEMPTS;
public static final long DEFAULT_RECONNECT_INTERVAL;
public static final java.lang.String DEFAULT_HOSTNAME_VERIFICATION_ALGORITHM;
public static final boolean DEFAULT_REGISTER_WRITE_HANDLER;
private int reconnectAttempts;
private long reconnectInterval;
private java.lang.String hostnameVerificationAlgorithm;
private java.util.List applicationLayerProtocols;
private boolean registerWriteHandler;
public void <init>()
{
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: void <init>()>();
specialinvoke v0.<io.vertx.core.net.NetClientOptions: void init()>();
return;
}
public void <init>(io.vertx.core.net.NetClientOptions)
{
long v3;
io.vertx.core.net.NetClientOptions v0, v1;
java.util.ArrayList v6;
java.util.List v5, v7;
int v2;
java.lang.String v4;
boolean v8;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: io.vertx.core.net.NetClientOptions;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: void <init>(io.vertx.core.net.ClientOptionsBase)>(v1);
v2 = virtualinvoke v1.<io.vertx.core.net.NetClientOptions: int getReconnectAttempts()>();
v0.<io.vertx.core.net.NetClientOptions: int reconnectAttempts> = v2;
v3 = virtualinvoke v1.<io.vertx.core.net.NetClientOptions: long getReconnectInterval()>();
v0.<io.vertx.core.net.NetClientOptions: long reconnectInterval> = v3;
v4 = virtualinvoke v1.<io.vertx.core.net.NetClientOptions: java.lang.String getHostnameVerificationAlgorithm()>();
v0.<io.vertx.core.net.NetClientOptions: java.lang.String hostnameVerificationAlgorithm> = v4;
v5 = v1.<io.vertx.core.net.NetClientOptions: java.util.List applicationLayerProtocols>;
if v5 == null goto label1;
v6 = new java.util.ArrayList;
v7 = v1.<io.vertx.core.net.NetClientOptions: java.util.List applicationLayerProtocols>;
specialinvoke v6.<java.util.ArrayList: void <init>(java.util.Collection)>(v7);
goto label2;
label1:
v6 = null;
label2:
v0.<io.vertx.core.net.NetClientOptions: java.util.List applicationLayerProtocols> = v6;
v8 = v1.<io.vertx.core.net.NetClientOptions: boolean registerWriteHandler>;
v0.<io.vertx.core.net.NetClientOptions: boolean registerWriteHandler> = v8;
return;
}
public void <init>(io.vertx.core.net.ClientOptionsBase)
{
io.vertx.core.net.ClientOptionsBase v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: io.vertx.core.net.ClientOptionsBase;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: void <init>(io.vertx.core.net.ClientOptionsBase)>(v1);
return;
}
public void <init>(io.vertx.core.json.JsonObject)
{
io.vertx.core.json.JsonObject v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: io.vertx.core.json.JsonObject;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: void <init>(io.vertx.core.json.JsonObject)>(v1);
specialinvoke v0.<io.vertx.core.net.NetClientOptions: void init()>();
staticinvoke <io.vertx.core.net.NetClientOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetClientOptions)>(v1, v0);
return;
}
private void init()
{
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v0.<io.vertx.core.net.NetClientOptions: int reconnectAttempts> = 0;
v0.<io.vertx.core.net.NetClientOptions: long reconnectInterval> = 1000L;
v0.<io.vertx.core.net.NetClientOptions: java.lang.String hostnameVerificationAlgorithm> = "";
v0.<io.vertx.core.net.NetClientOptions: boolean registerWriteHandler> = 0;
return;
}
public io.vertx.core.net.NetClientOptions setSendBufferSize(int)
{
int v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setSendBufferSize(int)>(v1);
return v0;
}
public io.vertx.core.net.NetClientOptions setReceiveBufferSize(int)
{
int v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setReceiveBufferSize(int)>(v1);
return v0;
}
public io.vertx.core.net.NetClientOptions setReuseAddress(boolean)
{
boolean v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: boolean;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setReuseAddress(boolean)>(v1);
return v0;
}
public io.vertx.core.net.NetClientOptions setReusePort(boolean)
{
boolean v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: boolean;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setReusePort(boolean)>(v1);
return v0;
}
public io.vertx.core.net.NetClientOptions setTrafficClass(int)
{
int v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTrafficClass(int)>(v1);
return v0;
}
public io.vertx.core.net.NetClientOptions setTcpNoDelay(boolean)
{
boolean v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: boolean;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpNoDelay(boolean)>(v1);
return v0;
}
public io.vertx.core.net.NetClientOptions setTcpKeepAlive(boolean)
{
boolean v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: boolean;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpKeepAlive(boolean)>(v1);
return v0;
}
public io.vertx.core.net.NetClientOptions setSoLinger(int)
{
int v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setSoLinger(int)>(v1);
return v0;
}
public io.vertx.core.net.NetClientOptions setIdleTimeout(int)
{
int v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setIdleTimeout(int)>(v1);
return v0;
}
public io.vertx.core.net.NetClientOptions setReadIdleTimeout(int)
{
int v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setReadIdleTimeout(int)>(v1);
return v0;
}
public io.vertx.core.net.NetClientOptions setWriteIdleTimeout(int)
{
int v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setWriteIdleTimeout(int)>(v1);
return v0;
}
public io.vertx.core.net.NetClientOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: java.util.concurrent.TimeUnit;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>(v1);
return v0;
}
public io.vertx.core.net.NetClientOptions setSsl(boolean)
{
boolean v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: boolean;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setSsl(boolean)>(v1);
return v0;
}
public io.vertx.core.net.NetClientOptions setKeyCertOptions(io.vertx.core.net.KeyCertOptions)
{
io.vertx.core.net.KeyCertOptions v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: io.vertx.core.net.KeyCertOptions;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setKeyCertOptions(io.vertx.core.net.KeyCertOptions)>(v1);
return v0;
}
public io.vertx.core.net.NetClientOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)
{
io.vertx.core.net.JksOptions v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: io.vertx.core.net.JksOptions;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setKeyStoreOptions(io.vertx.core.net.JksOptions)>(v1);
return v0;
}
public io.vertx.core.net.NetClientOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)
{
io.vertx.core.net.ClientOptionsBase v2;
io.vertx.core.net.NetClientOptions v0;
io.vertx.core.net.PfxOptions v1;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: io.vertx.core.net.PfxOptions;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>(v1);
return v2;
}
public io.vertx.core.net.NetClientOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)
{
io.vertx.core.net.ClientOptionsBase v2;
io.vertx.core.net.PemKeyCertOptions v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: io.vertx.core.net.PemKeyCertOptions;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>(v1);
return v2;
}
public io.vertx.core.net.NetClientOptions setTrustOptions(io.vertx.core.net.TrustOptions)
{
io.vertx.core.net.TrustOptions v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: io.vertx.core.net.TrustOptions;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTrustOptions(io.vertx.core.net.TrustOptions)>(v1);
return v0;
}
public io.vertx.core.net.NetClientOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)
{
io.vertx.core.net.JksOptions v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: io.vertx.core.net.JksOptions;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTrustStoreOptions(io.vertx.core.net.JksOptions)>(v1);
return v0;
}
public io.vertx.core.net.NetClientOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)
{
io.vertx.core.net.ClientOptionsBase v2;
io.vertx.core.net.PemTrustOptions v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: io.vertx.core.net.PemTrustOptions;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>(v1);
return v2;
}
public io.vertx.core.net.NetClientOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)
{
io.vertx.core.net.ClientOptionsBase v2;
io.vertx.core.net.NetClientOptions v0;
io.vertx.core.net.PfxOptions v1;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: io.vertx.core.net.PfxOptions;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setPfxTrustOptions(io.vertx.core.net.PfxOptions)>(v1);
return v2;
}
public io.vertx.core.net.NetClientOptions addEnabledCipherSuite(java.lang.String)
{
java.lang.String v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase addEnabledCipherSuite(java.lang.String)>(v1);
return v0;
}
public io.vertx.core.net.NetClientOptions removeEnabledCipherSuite(java.lang.String)
{
java.lang.String v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase removeEnabledCipherSuite(java.lang.String)>(v1);
return v0;
}
public io.vertx.core.net.NetClientOptions addEnabledSecureTransportProtocol(java.lang.String)
{
java.lang.String v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase addEnabledSecureTransportProtocol(java.lang.String)>(v1);
return v0;
}
public io.vertx.core.net.NetClientOptions removeEnabledSecureTransportProtocol(java.lang.String)
{
java.lang.String v1;
io.vertx.core.net.ClientOptionsBase v2;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase removeEnabledSecureTransportProtocol(java.lang.String)>(v1);
return v2;
}
public io.vertx.core.net.NetClientOptions setUseAlpn(boolean)
{
io.vertx.core.net.ClientOptionsBase v2;
boolean v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setUseAlpn(boolean)>(v1);
return v2;
}
public io.vertx.core.net.NetClientOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)
{
io.vertx.core.net.SSLEngineOptions v1;
io.vertx.core.net.ClientOptionsBase v2;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: io.vertx.core.net.SSLEngineOptions;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(v1);
return v2;
}
public io.vertx.core.net.NetClientOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)
{
io.vertx.core.net.ClientOptionsBase v2;
io.vertx.core.net.JdkSSLEngineOptions v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: io.vertx.core.net.JdkSSLEngineOptions;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>(v1);
return v2;
}
public io.vertx.core.net.NetClientOptions setTcpFastOpen(boolean)
{
io.vertx.core.net.ClientOptionsBase v2;
boolean v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpFastOpen(boolean)>(v1);
return v2;
}
public io.vertx.core.net.NetClientOptions setTcpCork(boolean)
{
io.vertx.core.net.ClientOptionsBase v2;
boolean v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpCork(boolean)>(v1);
return v2;
}
public io.vertx.core.net.NetClientOptions setTcpQuickAck(boolean)
{
io.vertx.core.net.ClientOptionsBase v2;
boolean v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTcpQuickAck(boolean)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)
{
io.vertx.core.net.OpenSSLEngineOptions v1;
io.vertx.core.net.ClientOptionsBase v2;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: io.vertx.core.net.OpenSSLEngineOptions;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>(v1);
return v2;
}
public io.vertx.core.net.NetClientOptions addCrlPath(java.lang.String) throws java.lang.NullPointerException
{
java.lang.String v1;
io.vertx.core.net.ClientOptionsBase v2;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase addCrlPath(java.lang.String)>(v1);
return v2;
}
public io.vertx.core.net.NetClientOptions addCrlValue(io.vertx.core.buffer.Buffer) throws java.lang.NullPointerException
{
io.vertx.core.buffer.Buffer v1;
io.vertx.core.net.ClientOptionsBase v2;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase addCrlValue(io.vertx.core.buffer.Buffer)>(v1);
return v2;
}
public io.vertx.core.net.NetClientOptions setTrustAll(boolean)
{
boolean v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: boolean;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setTrustAll(boolean)>(v1);
return v0;
}
public io.vertx.core.net.NetClientOptions setConnectTimeout(int)
{
int v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setConnectTimeout(int)>(v1);
return v0;
}
public io.vertx.core.net.NetClientOptions setMetricsName(java.lang.String)
{
java.lang.String v1;
io.vertx.core.net.ClientOptionsBase v2;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setMetricsName(java.lang.String)>(v1);
return v2;
}
public io.vertx.core.net.NetClientOptions setReconnectAttempts(int)
{
int v1, v2;
java.lang.IllegalArgumentException v3;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: int;
v2 = (int) -1;
if v1 >= v2 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("reconnect attempts must be >= -1");
throw v3;
label1:
v0.<io.vertx.core.net.NetClientOptions: int reconnectAttempts> = v1;
return v0;
}
public int getReconnectAttempts()
{
int v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 = v0.<io.vertx.core.net.NetClientOptions: int reconnectAttempts>;
return v1;
}
public io.vertx.core.net.NetClientOptions setReconnectInterval(long)
{
byte v2;
long v1;
java.lang.IllegalArgumentException v3;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: long;
v2 = v1 cmp 1L;
if v2 >= 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("reconnect interval must be >= 1");
throw v3;
label1:
v0.<io.vertx.core.net.NetClientOptions: long reconnectInterval> = v1;
return v0;
}
public java.lang.String getHostnameVerificationAlgorithm()
{
java.lang.String v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 = v0.<io.vertx.core.net.NetClientOptions: java.lang.String hostnameVerificationAlgorithm>;
return v1;
}
public io.vertx.core.net.NetClientOptions setHostnameVerificationAlgorithm(java.lang.String)
{
java.lang.String v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: java.lang.String;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "hostnameVerificationAlgorithm can not be null!");
v0.<io.vertx.core.net.NetClientOptions: java.lang.String hostnameVerificationAlgorithm> = v1;
return v0;
}
public java.util.List getApplicationLayerProtocols()
{
java.util.List v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 = v0.<io.vertx.core.net.NetClientOptions: java.util.List applicationLayerProtocols>;
return v1;
}
public io.vertx.core.net.NetClientOptions setApplicationLayerProtocols(java.util.List)
{
java.util.List v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: java.util.List;
v0.<io.vertx.core.net.NetClientOptions: java.util.List applicationLayerProtocols> = v1;
return v0;
}
public long getReconnectInterval()
{
long v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 = v0.<io.vertx.core.net.NetClientOptions: long reconnectInterval>;
return v1;
}
public io.vertx.core.net.NetClientOptions setLogActivity(boolean)
{
io.vertx.core.net.ClientOptionsBase v2;
boolean v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setLogActivity(boolean)>(v1);
return v2;
}
public io.vertx.core.net.NetClientOptions setActivityLogDataFormat(io.netty.handler.logging.ByteBufFormat)
{
io.vertx.core.net.ClientOptionsBase v2;
io.netty.handler.logging.ByteBufFormat v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: io.netty.handler.logging.ByteBufFormat;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setActivityLogDataFormat(io.netty.handler.logging.ByteBufFormat)>(v1);
return v2;
}
public io.vertx.core.net.NetClientOptions setProxyOptions(io.vertx.core.net.ProxyOptions)
{
io.vertx.core.net.ProxyOptions v1;
io.vertx.core.net.ClientOptionsBase v2;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: io.vertx.core.net.ProxyOptions;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setProxyOptions(io.vertx.core.net.ProxyOptions)>(v1);
return v2;
}
public io.vertx.core.net.NetClientOptions setNonProxyHosts(java.util.List)
{
java.util.List v1;
io.vertx.core.net.ClientOptionsBase v2;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: java.util.List;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setNonProxyHosts(java.util.List)>(v1);
return v2;
}
public io.vertx.core.net.NetClientOptions addNonProxyHost(java.lang.String)
{
java.lang.String v1;
io.vertx.core.net.ClientOptionsBase v2;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase addNonProxyHost(java.lang.String)>(v1);
return v2;
}
public io.vertx.core.net.NetClientOptions setLocalAddress(java.lang.String)
{
java.lang.String v1;
io.vertx.core.net.ClientOptionsBase v2;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ClientOptionsBase setLocalAddress(java.lang.String)>(v1);
return v2;
}
public io.vertx.core.net.NetClientOptions setEnabledSecureTransportProtocols(java.util.Set)
{
java.util.Set v1;
io.vertx.core.net.NetClientOptions v0;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: java.util.Set;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.TCPSSLOptions setEnabledSecureTransportProtocols(java.util.Set)>(v1);
return v2;
}
public io.vertx.core.net.NetClientOptions setSslHandshakeTimeout(long)
{
long v1;
io.vertx.core.net.NetClientOptions v0;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: long;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.TCPSSLOptions setSslHandshakeTimeout(long)>(v1);
return v2;
}
public io.vertx.core.net.NetClientOptions setSslHandshakeTimeoutUnit(java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v1;
io.vertx.core.net.NetClientOptions v0;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: java.util.concurrent.TimeUnit;
v2 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.TCPSSLOptions setSslHandshakeTimeoutUnit(java.util.concurrent.TimeUnit)>(v1);
return v2;
}
public io.vertx.core.json.JsonObject toJson()
{
io.vertx.core.json.JsonObject v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 = specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.json.JsonObject toJson()>();
staticinvoke <io.vertx.core.net.NetClientOptionsConverter: void toJson(io.vertx.core.net.NetClientOptions,io.vertx.core.json.JsonObject)>(v0, v1);
return v1;
}
public boolean isRegisterWriteHandler()
{
boolean v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 = v0.<io.vertx.core.net.NetClientOptions: boolean registerWriteHandler>;
return v1;
}
public io.vertx.core.net.NetClientOptions setRegisterWriteHandler(boolean)
{
boolean v1;
io.vertx.core.net.NetClientOptions v0;
v0 := @this: io.vertx.core.net.NetClientOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.net.NetClientOptions: boolean registerWriteHandler> = v1;
return v0;
}
}