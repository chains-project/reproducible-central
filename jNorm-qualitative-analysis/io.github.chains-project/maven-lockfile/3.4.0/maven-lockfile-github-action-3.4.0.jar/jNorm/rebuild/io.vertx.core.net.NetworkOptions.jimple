public abstract class io.vertx.core.net.NetworkOptions extends java.lang.Object
{
public static final int DEFAULT_SEND_BUFFER_SIZE;
public static final int DEFAULT_RECEIVE_BUFFER_SIZE;
public static final int DEFAULT_TRAFFIC_CLASS;
public static final boolean DEFAULT_REUSE_ADDRESS;
public static final boolean DEFAULT_REUSE_PORT;
public static final boolean DEFAULT_LOG_ENABLED;
public static final io.netty.handler.logging.ByteBufFormat DEFAULT_LOG_ACTIVITY_FORMAT;
private int sendBufferSize;
private int receiveBufferSize;
private int trafficClass;
private boolean reuseAddress;
private boolean logActivity;
private io.netty.handler.logging.ByteBufFormat activityLogDataFormat;
private boolean reusePort;
public void <init>()
{
io.vertx.core.net.NetworkOptions v0;
io.netty.handler.logging.ByteBufFormat v4;
int v1, v2, v3;
v0 := @this: io.vertx.core.net.NetworkOptions;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = (int) -1;
v0.<io.vertx.core.net.NetworkOptions: int sendBufferSize> = v1;
v2 = (int) -1;
v0.<io.vertx.core.net.NetworkOptions: int receiveBufferSize> = v2;
v0.<io.vertx.core.net.NetworkOptions: boolean reuseAddress> = 1;
v3 = (int) -1;
v0.<io.vertx.core.net.NetworkOptions: int trafficClass> = v3;
v0.<io.vertx.core.net.NetworkOptions: boolean logActivity> = 0;
v4 = <io.vertx.core.net.NetworkOptions: io.netty.handler.logging.ByteBufFormat DEFAULT_LOG_ACTIVITY_FORMAT>;
v0.<io.vertx.core.net.NetworkOptions: io.netty.handler.logging.ByteBufFormat activityLogDataFormat> = v4;
v0.<io.vertx.core.net.NetworkOptions: boolean reusePort> = 0;
return;
}
public void <init>(io.vertx.core.net.NetworkOptions)
{
io.vertx.core.net.NetworkOptions v0, v1;
io.netty.handler.logging.ByteBufFormat v8;
int v2, v3, v6;
boolean v4, v5, v7;
v0 := @this: io.vertx.core.net.NetworkOptions;
v1 := @parameter0: io.vertx.core.net.NetworkOptions;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = virtualinvoke v1.<io.vertx.core.net.NetworkOptions: int getSendBufferSize()>();
v0.<io.vertx.core.net.NetworkOptions: int sendBufferSize> = v2;
v3 = virtualinvoke v1.<io.vertx.core.net.NetworkOptions: int getReceiveBufferSize()>();
v0.<io.vertx.core.net.NetworkOptions: int receiveBufferSize> = v3;
v4 = virtualinvoke v1.<io.vertx.core.net.NetworkOptions: boolean isReuseAddress()>();
v0.<io.vertx.core.net.NetworkOptions: boolean reuseAddress> = v4;
v5 = virtualinvoke v1.<io.vertx.core.net.NetworkOptions: boolean isReusePort()>();
v0.<io.vertx.core.net.NetworkOptions: boolean reusePort> = v5;
v6 = virtualinvoke v1.<io.vertx.core.net.NetworkOptions: int getTrafficClass()>();
v0.<io.vertx.core.net.NetworkOptions: int trafficClass> = v6;
v7 = v1.<io.vertx.core.net.NetworkOptions: boolean logActivity>;
v0.<io.vertx.core.net.NetworkOptions: boolean logActivity> = v7;
v8 = v1.<io.vertx.core.net.NetworkOptions: io.netty.handler.logging.ByteBufFormat activityLogDataFormat>;
v0.<io.vertx.core.net.NetworkOptions: io.netty.handler.logging.ByteBufFormat activityLogDataFormat> = v8;
return;
}
public void <init>(io.vertx.core.json.JsonObject)
{
io.vertx.core.json.JsonObject v1;
io.vertx.core.net.NetworkOptions v0;
v0 := @this: io.vertx.core.net.NetworkOptions;
v1 := @parameter0: io.vertx.core.json.JsonObject;
specialinvoke v0.<io.vertx.core.net.NetworkOptions: void <init>()>();
staticinvoke <io.vertx.core.net.NetworkOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.NetworkOptions)>(v1, v0);
return;
}
public io.vertx.core.json.JsonObject toJson()
{
io.vertx.core.json.JsonObject v1;
io.vertx.core.net.NetworkOptions v0;
v0 := @this: io.vertx.core.net.NetworkOptions;
v1 = new io.vertx.core.json.JsonObject;
specialinvoke v1.<io.vertx.core.json.JsonObject: void <init>()>();
staticinvoke <io.vertx.core.net.NetworkOptionsConverter: void toJson(io.vertx.core.net.NetworkOptions,io.vertx.core.json.JsonObject)>(v0, v1);
return v1;
}
public int getSendBufferSize()
{
int v1;
io.vertx.core.net.NetworkOptions v0;
v0 := @this: io.vertx.core.net.NetworkOptions;
v1 = v0.<io.vertx.core.net.NetworkOptions: int sendBufferSize>;
return v1;
}
public io.vertx.core.net.NetworkOptions setSendBufferSize(int)
{
io.vertx.core.net.NetworkOptions v0;
int v1, v2;
boolean v3;
v0 := @this: io.vertx.core.net.NetworkOptions;
v1 := @parameter0: int;
if v1 > 0 goto label1;
v2 = (int) -1;
if v1 != v2 goto label2;
label1:
v3 = 1;
goto label3;
label2:
v3 = 0;
label3:
staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>(v3, "sendBufferSize must be > 0");
v0.<io.vertx.core.net.NetworkOptions: int sendBufferSize> = v1;
return v0;
}
public int getReceiveBufferSize()
{
int v1;
io.vertx.core.net.NetworkOptions v0;
v0 := @this: io.vertx.core.net.NetworkOptions;
v1 = v0.<io.vertx.core.net.NetworkOptions: int receiveBufferSize>;
return v1;
}
public io.vertx.core.net.NetworkOptions setReceiveBufferSize(int)
{
io.vertx.core.net.NetworkOptions v0;
int v1, v2;
boolean v3;
v0 := @this: io.vertx.core.net.NetworkOptions;
v1 := @parameter0: int;
if v1 > 0 goto label1;
v2 = (int) -1;
if v1 != v2 goto label2;
label1:
v3 = 1;
goto label3;
label2:
v3 = 0;
label3:
staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>(v3, "receiveBufferSize must be > 0");
v0.<io.vertx.core.net.NetworkOptions: int receiveBufferSize> = v1;
return v0;
}
public boolean isReuseAddress()
{
io.vertx.core.net.NetworkOptions v0;
boolean v1;
v0 := @this: io.vertx.core.net.NetworkOptions;
v1 = v0.<io.vertx.core.net.NetworkOptions: boolean reuseAddress>;
return v1;
}
public io.vertx.core.net.NetworkOptions setReuseAddress(boolean)
{
io.vertx.core.net.NetworkOptions v0;
boolean v1;
v0 := @this: io.vertx.core.net.NetworkOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.net.NetworkOptions: boolean reuseAddress> = v1;
return v0;
}
public int getTrafficClass()
{
int v1;
io.vertx.core.net.NetworkOptions v0;
v0 := @this: io.vertx.core.net.NetworkOptions;
v1 = v0.<io.vertx.core.net.NetworkOptions: int trafficClass>;
return v1;
}
public io.vertx.core.net.NetworkOptions setTrafficClass(int)
{
int v1, v2;
io.vertx.core.net.NetworkOptions v0;
v0 := @this: io.vertx.core.net.NetworkOptions;
v1 := @parameter0: int;
v2 = (int) -1;
staticinvoke <io.vertx.core.impl.Arguments: void requireInRange(int,int,int,java.lang.String)>(v1, v2, 255, "trafficClass tc must be 0 <= tc <= 255");
v0.<io.vertx.core.net.NetworkOptions: int trafficClass> = v1;
return v0;
}
public boolean getLogActivity()
{
io.vertx.core.net.NetworkOptions v0;
boolean v1;
v0 := @this: io.vertx.core.net.NetworkOptions;
v1 = v0.<io.vertx.core.net.NetworkOptions: boolean logActivity>;
return v1;
}
public io.netty.handler.logging.ByteBufFormat getActivityLogDataFormat()
{
io.vertx.core.net.NetworkOptions v0;
io.netty.handler.logging.ByteBufFormat v1;
v0 := @this: io.vertx.core.net.NetworkOptions;
v1 = v0.<io.vertx.core.net.NetworkOptions: io.netty.handler.logging.ByteBufFormat activityLogDataFormat>;
return v1;
}
public io.vertx.core.net.NetworkOptions setLogActivity(boolean)
{
io.vertx.core.net.NetworkOptions v0;
boolean v1;
v0 := @this: io.vertx.core.net.NetworkOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.net.NetworkOptions: boolean logActivity> = v1;
return v0;
}
public io.vertx.core.net.NetworkOptions setActivityLogDataFormat(io.netty.handler.logging.ByteBufFormat)
{
io.vertx.core.net.NetworkOptions v0;
io.netty.handler.logging.ByteBufFormat v1;
v0 := @this: io.vertx.core.net.NetworkOptions;
v1 := @parameter0: io.netty.handler.logging.ByteBufFormat;
v0.<io.vertx.core.net.NetworkOptions: io.netty.handler.logging.ByteBufFormat activityLogDataFormat> = v1;
return v0;
}
public boolean isReusePort()
{
io.vertx.core.net.NetworkOptions v0;
boolean v1;
v0 := @this: io.vertx.core.net.NetworkOptions;
v1 = v0.<io.vertx.core.net.NetworkOptions: boolean reusePort>;
return v1;
}
public io.vertx.core.net.NetworkOptions setReusePort(boolean)
{
io.vertx.core.net.NetworkOptions v0;
boolean v1;
v0 := @this: io.vertx.core.net.NetworkOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.net.NetworkOptions: boolean reusePort> = v1;
return v0;
}
static void <clinit>()
{
io.netty.handler.logging.ByteBufFormat v0;
v0 = <io.netty.handler.logging.ByteBufFormat: io.netty.handler.logging.ByteBufFormat HEX_DUMP>;
<io.vertx.core.net.NetworkOptions: io.netty.handler.logging.ByteBufFormat DEFAULT_LOG_ACTIVITY_FORMAT> = v0;
return;
}
}