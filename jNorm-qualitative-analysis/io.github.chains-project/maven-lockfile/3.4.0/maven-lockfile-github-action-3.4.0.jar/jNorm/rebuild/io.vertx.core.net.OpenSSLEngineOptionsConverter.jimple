public class io.vertx.core.net.OpenSSLEngineOptionsConverter extends java.lang.Object
{
private static final java.util.Base64$Decoder BASE64_DECODER;
private static final java.util.Base64$Encoder BASE64_ENCODER;
public void <init>()
{
io.vertx.core.net.OpenSSLEngineOptionsConverter v0;
v0 := @this: io.vertx.core.net.OpenSSLEngineOptionsConverter;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void fromJson(java.lang.Iterable, io.vertx.core.net.OpenSSLEngineOptions)
{
java.lang.Iterable v0;
io.vertx.core.net.OpenSSLEngineOptions v1;
byte v6;
int v7;
boolean v11, v13, v15, v17, v3, v8, v9;
java.util.Iterator v2;
java.lang.Object v10, v12, v14, v16, v4, v5;
v0 := @parameter0: java.lang.Iterable;
v1 := @parameter1: io.vertx.core.net.OpenSSLEngineOptions;
v2 = interfaceinvoke v0.<java.lang.Iterable: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label7;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getKey()>();
v6 = -1;
v7 = virtualinvoke v5.<java.lang.String: int hashCode()>();
lookupswitch(v7)
{
case -1357562289: goto label3;
case -371457259: goto label2;
default: goto label4;
};
label2:
v8 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("sessionCacheEnabled");
if v8 == 0 goto label4;
v6 = 0;
goto label4;
label3:
v9 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("useWorkerThread");
if v9 == 0 goto label4;
v6 = 1;
label4:
lookupswitch(v6)
{
case 0: goto label5;
case 1: goto label6;
default: goto label1;
};
label5:
v10 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v11 = v10 instanceof java.lang.Boolean;
if v11 == 0 goto label1;
v12 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v13 = virtualinvoke v12.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.net.OpenSSLEngineOptions: io.vertx.core.net.OpenSSLEngineOptions setSessionCacheEnabled(boolean)>(v13);
goto label1;
label6:
v14 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v15 = v14 instanceof java.lang.Boolean;
if v15 == 0 goto label1;
v16 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v17 = virtualinvoke v16.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.net.OpenSSLEngineOptions: io.vertx.core.net.OpenSSLEngineOptions setUseWorkerThread(boolean)>(v17);
goto label1;
label7:
return;
}
static void toJson(io.vertx.core.net.OpenSSLEngineOptions, io.vertx.core.json.JsonObject)
{
io.vertx.core.json.JsonObject v1;
io.vertx.core.net.OpenSSLEngineOptions v0;
java.util.Map v2;
v0 := @parameter0: io.vertx.core.net.OpenSSLEngineOptions;
v1 := @parameter1: io.vertx.core.json.JsonObject;
v2 = virtualinvoke v1.<io.vertx.core.json.JsonObject: java.util.Map getMap()>();
staticinvoke <io.vertx.core.net.OpenSSLEngineOptionsConverter: void toJson(io.vertx.core.net.OpenSSLEngineOptions,java.util.Map)>(v0, v2);
return;
}
static void toJson(io.vertx.core.net.OpenSSLEngineOptions, java.util.Map)
{
io.vertx.core.net.OpenSSLEngineOptions v0;
java.util.Map v1;
java.lang.Boolean v3, v5;
boolean v2, v4;
v0 := @parameter0: io.vertx.core.net.OpenSSLEngineOptions;
v1 := @parameter1: java.util.Map;
v2 = virtualinvoke v0.<io.vertx.core.net.OpenSSLEngineOptions: boolean isSessionCacheEnabled()>();
v3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v2);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sessionCacheEnabled", v3);
v4 = virtualinvoke v0.<io.vertx.core.net.OpenSSLEngineOptions: boolean getUseWorkerThread()>();
v5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v4);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("useWorkerThread", v5);
return;
}
static void <clinit>()
{
java.util.Base64$Encoder v1;
java.util.Base64$Decoder v0;
v0 = <io.vertx.core.json.impl.JsonUtil: java.util.Base64$Decoder BASE64_DECODER>;
<io.vertx.core.net.OpenSSLEngineOptionsConverter: java.util.Base64$Decoder BASE64_DECODER> = v0;
v1 = <io.vertx.core.json.impl.JsonUtil: java.util.Base64$Encoder BASE64_ENCODER>;
<io.vertx.core.net.OpenSSLEngineOptionsConverter: java.util.Base64$Encoder BASE64_ENCODER> = v1;
return;
}
}