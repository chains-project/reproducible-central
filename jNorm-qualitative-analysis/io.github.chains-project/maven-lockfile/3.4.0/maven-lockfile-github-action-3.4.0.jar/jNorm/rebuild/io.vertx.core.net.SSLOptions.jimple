public class io.vertx.core.net.SSLOptions extends java.lang.Object
{
public static final boolean DEFAULT_USE_ALPN;
public static final long DEFAULT_SSL_HANDSHAKE_TIMEOUT;
public static final java.util.concurrent.TimeUnit DEFAULT_SSL_HANDSHAKE_TIMEOUT_TIME_UNIT;
public static final java.util.List DEFAULT_ENABLED_SECURE_TRANSPORT_PROTOCOLS;
private long sslHandshakeTimeout;
private java.util.concurrent.TimeUnit sslHandshakeTimeoutUnit;
private io.vertx.core.net.KeyCertOptions keyCertOptions;
private io.vertx.core.net.TrustOptions trustOptions;
private java.util.Set enabledCipherSuites;
private java.util.ArrayList crlPaths;
private java.util.ArrayList crlValues;
private boolean useAlpn;
private java.util.Set enabledSecureTransportProtocols;
public void <init>(io.vertx.core.json.JsonObject)
{
io.vertx.core.json.JsonObject v1;
io.vertx.core.net.SSLOptions v0;
v0 := @this: io.vertx.core.net.SSLOptions;
v1 := @parameter0: io.vertx.core.json.JsonObject;
specialinvoke v0.<io.vertx.core.net.SSLOptions: void <init>()>();
staticinvoke <io.vertx.core.net.SSLOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.SSLOptions)>(v1, v0);
return;
}
public void <init>()
{
io.vertx.core.net.SSLOptions v0;
v0 := @this: io.vertx.core.net.SSLOptions;
specialinvoke v0.<java.lang.Object: void <init>()>();
specialinvoke v0.<io.vertx.core.net.SSLOptions: void init()>();
return;
}
public void <init>(io.vertx.core.net.SSLOptions)
{
long v2;
java.util.ArrayList v14, v16;
io.vertx.core.net.SSLOptions v0, v1;
io.vertx.core.net.KeyCertOptions v5, v6, v7;
java.util.LinkedHashSet v12, v20;
boolean v18;
java.util.Set v11, v13, v19, v21;
java.util.concurrent.TimeUnit v3, v4;
io.vertx.core.net.TrustOptions v10, v8, v9;
java.util.List v15, v17;
v0 := @this: io.vertx.core.net.SSLOptions;
v1 := @parameter0: io.vertx.core.net.SSLOptions;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = v1.<io.vertx.core.net.SSLOptions: long sslHandshakeTimeout>;
v0.<io.vertx.core.net.SSLOptions: long sslHandshakeTimeout> = v2;
v3 = virtualinvoke v1.<io.vertx.core.net.SSLOptions: java.util.concurrent.TimeUnit getSslHandshakeTimeoutUnit()>();
if v3 == null goto label01;
v4 = virtualinvoke v1.<io.vertx.core.net.SSLOptions: java.util.concurrent.TimeUnit getSslHandshakeTimeoutUnit()>();
goto label02;
label01:
v4 = <io.vertx.core.net.SSLOptions: java.util.concurrent.TimeUnit DEFAULT_SSL_HANDSHAKE_TIMEOUT_TIME_UNIT>;
label02:
v0.<io.vertx.core.net.SSLOptions: java.util.concurrent.TimeUnit sslHandshakeTimeoutUnit> = v4;
v5 = virtualinvoke v1.<io.vertx.core.net.SSLOptions: io.vertx.core.net.KeyCertOptions getKeyCertOptions()>();
if v5 == null goto label03;
v6 = virtualinvoke v1.<io.vertx.core.net.SSLOptions: io.vertx.core.net.KeyCertOptions getKeyCertOptions()>();
v7 = interfaceinvoke v6.<io.vertx.core.net.KeyCertOptions: io.vertx.core.net.KeyCertOptions copy()>();
goto label04;
label03:
v7 = null;
label04:
v0.<io.vertx.core.net.SSLOptions: io.vertx.core.net.KeyCertOptions keyCertOptions> = v7;
v8 = virtualinvoke v1.<io.vertx.core.net.SSLOptions: io.vertx.core.net.TrustOptions getTrustOptions()>();
if v8 == null goto label05;
v9 = virtualinvoke v1.<io.vertx.core.net.SSLOptions: io.vertx.core.net.TrustOptions getTrustOptions()>();
v10 = interfaceinvoke v9.<io.vertx.core.net.TrustOptions: io.vertx.core.net.TrustOptions copy()>();
goto label06;
label05:
v10 = null;
label06:
v0.<io.vertx.core.net.SSLOptions: io.vertx.core.net.TrustOptions trustOptions> = v10;
v11 = virtualinvoke v1.<io.vertx.core.net.SSLOptions: java.util.Set getEnabledCipherSuites()>();
if v11 != null goto label07;
v12 = new java.util.LinkedHashSet;
specialinvoke v12.<java.util.LinkedHashSet: void <init>()>();
goto label08;
label07:
v12 = new java.util.LinkedHashSet;
v13 = virtualinvoke v1.<io.vertx.core.net.SSLOptions: java.util.Set getEnabledCipherSuites()>();
specialinvoke v12.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(v13);
label08:
v0.<io.vertx.core.net.SSLOptions: java.util.Set enabledCipherSuites> = v12;
v14 = new java.util.ArrayList;
v15 = virtualinvoke v1.<io.vertx.core.net.SSLOptions: java.util.List getCrlPaths()>();
specialinvoke v14.<java.util.ArrayList: void <init>(java.util.Collection)>(v15);
v0.<io.vertx.core.net.SSLOptions: java.util.ArrayList crlPaths> = v14;
v16 = new java.util.ArrayList;
v17 = virtualinvoke v1.<io.vertx.core.net.SSLOptions: java.util.List getCrlValues()>();
specialinvoke v16.<java.util.ArrayList: void <init>(java.util.Collection)>(v17);
v0.<io.vertx.core.net.SSLOptions: java.util.ArrayList crlValues> = v16;
v18 = v1.<io.vertx.core.net.SSLOptions: boolean useAlpn>;
v0.<io.vertx.core.net.SSLOptions: boolean useAlpn> = v18;
v19 = virtualinvoke v1.<io.vertx.core.net.SSLOptions: java.util.Set getEnabledSecureTransportProtocols()>();
if v19 != null goto label09;
v20 = new java.util.LinkedHashSet;
specialinvoke v20.<java.util.LinkedHashSet: void <init>()>();
goto label10;
label09:
v20 = new java.util.LinkedHashSet;
v21 = virtualinvoke v1.<io.vertx.core.net.SSLOptions: java.util.Set getEnabledSecureTransportProtocols()>();
specialinvoke v20.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(v21);
label10:
v0.<io.vertx.core.net.SSLOptions: java.util.Set enabledSecureTransportProtocols> = v20;
return;
}
private void init()
{
java.util.concurrent.TimeUnit v1;
java.util.List v6;
io.vertx.core.net.SSLOptions v0;
java.util.LinkedHashSet v2, v5;
java.util.ArrayList v3, v4;
v0 := @this: io.vertx.core.net.SSLOptions;
v0.<io.vertx.core.net.SSLOptions: long sslHandshakeTimeout> = 10L;
v1 = <io.vertx.core.net.SSLOptions: java.util.concurrent.TimeUnit DEFAULT_SSL_HANDSHAKE_TIMEOUT_TIME_UNIT>;
v0.<io.vertx.core.net.SSLOptions: java.util.concurrent.TimeUnit sslHandshakeTimeoutUnit> = v1;
v2 = new java.util.LinkedHashSet;
specialinvoke v2.<java.util.LinkedHashSet: void <init>()>();
v0.<io.vertx.core.net.SSLOptions: java.util.Set enabledCipherSuites> = v2;
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
v0.<io.vertx.core.net.SSLOptions: java.util.ArrayList crlPaths> = v3;
v4 = new java.util.ArrayList;
specialinvoke v4.<java.util.ArrayList: void <init>()>();
v0.<io.vertx.core.net.SSLOptions: java.util.ArrayList crlValues> = v4;
v0.<io.vertx.core.net.SSLOptions: boolean useAlpn> = 0;
v5 = new java.util.LinkedHashSet;
v6 = <io.vertx.core.net.SSLOptions: java.util.List DEFAULT_ENABLED_SECURE_TRANSPORT_PROTOCOLS>;
specialinvoke v5.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(v6);
v0.<io.vertx.core.net.SSLOptions: java.util.Set enabledSecureTransportProtocols> = v5;
return;
}
public io.vertx.core.net.KeyCertOptions getKeyCertOptions()
{
io.vertx.core.net.SSLOptions v0;
io.vertx.core.net.KeyCertOptions v1;
v0 := @this: io.vertx.core.net.SSLOptions;
v1 = v0.<io.vertx.core.net.SSLOptions: io.vertx.core.net.KeyCertOptions keyCertOptions>;
return v1;
}
public io.vertx.core.net.SSLOptions setKeyCertOptions(io.vertx.core.net.KeyCertOptions)
{
io.vertx.core.net.SSLOptions v0;
io.vertx.core.net.KeyCertOptions v1;
v0 := @this: io.vertx.core.net.SSLOptions;
v1 := @parameter0: io.vertx.core.net.KeyCertOptions;
v0.<io.vertx.core.net.SSLOptions: io.vertx.core.net.KeyCertOptions keyCertOptions> = v1;
return v0;
}
public io.vertx.core.net.TrustOptions getTrustOptions()
{
io.vertx.core.net.TrustOptions v1;
io.vertx.core.net.SSLOptions v0;
v0 := @this: io.vertx.core.net.SSLOptions;
v1 = v0.<io.vertx.core.net.SSLOptions: io.vertx.core.net.TrustOptions trustOptions>;
return v1;
}
public io.vertx.core.net.SSLOptions setTrustOptions(io.vertx.core.net.TrustOptions)
{
io.vertx.core.net.TrustOptions v1;
io.vertx.core.net.SSLOptions v0;
v0 := @this: io.vertx.core.net.SSLOptions;
v1 := @parameter0: io.vertx.core.net.TrustOptions;
v0.<io.vertx.core.net.SSLOptions: io.vertx.core.net.TrustOptions trustOptions> = v1;
return v0;
}
public io.vertx.core.net.SSLOptions addEnabledCipherSuite(java.lang.String)
{
java.util.Set v2;
java.lang.String v1;
io.vertx.core.net.SSLOptions v0;
v0 := @this: io.vertx.core.net.SSLOptions;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.net.SSLOptions: java.util.Set enabledCipherSuites>;
interfaceinvoke v2.<java.util.Set: boolean add(java.lang.Object)>(v1);
return v0;
}
public io.vertx.core.net.SSLOptions removeEnabledCipherSuite(java.lang.String)
{
java.util.Set v2;
java.lang.String v1;
io.vertx.core.net.SSLOptions v0;
v0 := @this: io.vertx.core.net.SSLOptions;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.net.SSLOptions: java.util.Set enabledCipherSuites>;
interfaceinvoke v2.<java.util.Set: boolean remove(java.lang.Object)>(v1);
return v0;
}
public java.util.Set getEnabledCipherSuites()
{
java.util.Set v1;
io.vertx.core.net.SSLOptions v0;
v0 := @this: io.vertx.core.net.SSLOptions;
v1 = v0.<io.vertx.core.net.SSLOptions: java.util.Set enabledCipherSuites>;
return v1;
}
public java.util.List getCrlPaths()
{
io.vertx.core.net.SSLOptions v0;
java.util.ArrayList v1;
v0 := @this: io.vertx.core.net.SSLOptions;
v1 = v0.<io.vertx.core.net.SSLOptions: java.util.ArrayList crlPaths>;
return v1;
}
public io.vertx.core.net.SSLOptions addCrlPath(java.lang.String) throws java.lang.NullPointerException
{
java.lang.String v1;
io.vertx.core.net.SSLOptions v0;
java.util.ArrayList v2;
v0 := @this: io.vertx.core.net.SSLOptions;
v1 := @parameter0: java.lang.String;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "No null crl accepted");
v2 = v0.<io.vertx.core.net.SSLOptions: java.util.ArrayList crlPaths>;
virtualinvoke v2.<java.util.ArrayList: boolean add(java.lang.Object)>(v1);
return v0;
}
public java.util.List getCrlValues()
{
io.vertx.core.net.SSLOptions v0;
java.util.ArrayList v1;
v0 := @this: io.vertx.core.net.SSLOptions;
v1 = v0.<io.vertx.core.net.SSLOptions: java.util.ArrayList crlValues>;
return v1;
}
public io.vertx.core.net.SSLOptions addCrlValue(io.vertx.core.buffer.Buffer) throws java.lang.NullPointerException
{
io.vertx.core.buffer.Buffer v1;
io.vertx.core.net.SSLOptions v0;
java.util.ArrayList v2;
v0 := @this: io.vertx.core.net.SSLOptions;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "No null crl accepted");
v2 = v0.<io.vertx.core.net.SSLOptions: java.util.ArrayList crlValues>;
virtualinvoke v2.<java.util.ArrayList: boolean add(java.lang.Object)>(v1);
return v0;
}
public boolean isUseAlpn()
{
io.vertx.core.net.SSLOptions v0;
boolean v1;
v0 := @this: io.vertx.core.net.SSLOptions;
v1 = v0.<io.vertx.core.net.SSLOptions: boolean useAlpn>;
return v1;
}
public io.vertx.core.net.SSLOptions setUseAlpn(boolean)
{
io.vertx.core.net.SSLOptions v0;
boolean v1;
v0 := @this: io.vertx.core.net.SSLOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.net.SSLOptions: boolean useAlpn> = v1;
return v0;
}
public java.util.Set getEnabledSecureTransportProtocols()
{
java.util.Set v2;
io.vertx.core.net.SSLOptions v0;
java.util.LinkedHashSet v1;
v0 := @this: io.vertx.core.net.SSLOptions;
v1 = new java.util.LinkedHashSet;
v2 = v0.<io.vertx.core.net.SSLOptions: java.util.Set enabledSecureTransportProtocols>;
specialinvoke v1.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(v2);
return v1;
}
public long getSslHandshakeTimeout()
{
long v1;
io.vertx.core.net.SSLOptions v0;
v0 := @this: io.vertx.core.net.SSLOptions;
v1 = v0.<io.vertx.core.net.SSLOptions: long sslHandshakeTimeout>;
return v1;
}
public io.vertx.core.net.SSLOptions setSslHandshakeTimeout(long)
{
byte v2;
io.vertx.core.net.SSLOptions v0;
long v1;
java.lang.IllegalArgumentException v3;
v0 := @this: io.vertx.core.net.SSLOptions;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 >= 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sslHandshakeTimeout must be >= 0");
throw v3;
label1:
v0.<io.vertx.core.net.SSLOptions: long sslHandshakeTimeout> = v1;
return v0;
}
public io.vertx.core.net.SSLOptions setSslHandshakeTimeoutUnit(java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v1;
io.vertx.core.net.SSLOptions v0;
v0 := @this: io.vertx.core.net.SSLOptions;
v1 := @parameter0: java.util.concurrent.TimeUnit;
v0.<io.vertx.core.net.SSLOptions: java.util.concurrent.TimeUnit sslHandshakeTimeoutUnit> = v1;
return v0;
}
public java.util.concurrent.TimeUnit getSslHandshakeTimeoutUnit()
{
java.util.concurrent.TimeUnit v1;
io.vertx.core.net.SSLOptions v0;
v0 := @this: io.vertx.core.net.SSLOptions;
v1 = v0.<io.vertx.core.net.SSLOptions: java.util.concurrent.TimeUnit sslHandshakeTimeoutUnit>;
return v1;
}
public io.vertx.core.net.SSLOptions setEnabledSecureTransportProtocols(java.util.Set)
{
java.util.Set v1;
io.vertx.core.net.SSLOptions v0;
v0 := @this: io.vertx.core.net.SSLOptions;
v1 := @parameter0: java.util.Set;
v0.<io.vertx.core.net.SSLOptions: java.util.Set enabledSecureTransportProtocols> = v1;
return v0;
}
public io.vertx.core.net.SSLOptions addEnabledSecureTransportProtocol(java.lang.String)
{
java.util.Set v2;
java.lang.String v1;
io.vertx.core.net.SSLOptions v0;
v0 := @this: io.vertx.core.net.SSLOptions;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.net.SSLOptions: java.util.Set enabledSecureTransportProtocols>;
interfaceinvoke v2.<java.util.Set: boolean add(java.lang.Object)>(v1);
return v0;
}
public io.vertx.core.net.SSLOptions removeEnabledSecureTransportProtocol(java.lang.String)
{
java.util.Set v2;
java.lang.String v1;
io.vertx.core.net.SSLOptions v0;
v0 := @this: io.vertx.core.net.SSLOptions;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.net.SSLOptions: java.util.Set enabledSecureTransportProtocols>;
interfaceinvoke v2.<java.util.Set: boolean remove(java.lang.Object)>(v1);
return v0;
}
public io.vertx.core.json.JsonObject toJson()
{
io.vertx.core.json.JsonObject v1;
io.vertx.core.net.SSLOptions v0;
v0 := @this: io.vertx.core.net.SSLOptions;
v1 = new io.vertx.core.json.JsonObject;
specialinvoke v1.<io.vertx.core.json.JsonObject: void <init>()>();
staticinvoke <io.vertx.core.net.SSLOptionsConverter: void toJson(io.vertx.core.net.SSLOptions,io.vertx.core.json.JsonObject)>(v0, v1);
return v1;
}
static void <clinit>()
{
java.util.concurrent.TimeUnit v0;
java.util.List v2, v3;
java.lang.String[] v1;
v0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
<io.vertx.core.net.SSLOptions: java.util.concurrent.TimeUnit DEFAULT_SSL_HANDSHAKE_TIMEOUT_TIME_UNIT> = v0;
v1 = newarray (java.lang.String)[2];
v1[0] = "TLSv1.2";
v1[1] = "TLSv1.3";
v2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
v3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(v2);
<io.vertx.core.net.SSLOptions: java.util.List DEFAULT_ENABLED_SECURE_TRANSPORT_PROTOCOLS> = v3;
return;
}
}