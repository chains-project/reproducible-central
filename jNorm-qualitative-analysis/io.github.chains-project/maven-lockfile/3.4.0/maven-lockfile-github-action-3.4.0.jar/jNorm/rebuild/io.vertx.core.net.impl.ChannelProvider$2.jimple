class io.vertx.core.net.impl.ChannelProvider$2 extends io.netty.channel.ChannelInitializer
{
final io.vertx.core.Handler val$handler;
final io.vertx.core.net.SocketAddress val$peerAddress;
final java.lang.String val$serverName;
final boolean val$ssl;
final boolean val$useAlpn;
final io.netty.util.concurrent.Promise val$channelHandler;
final io.vertx.core.net.impl.ChannelProvider this$0;
void <init>(io.vertx.core.net.impl.ChannelProvider, io.vertx.core.Handler, io.vertx.core.net.SocketAddress, java.lang.String, boolean, boolean, io.netty.util.concurrent.Promise)
{
io.netty.util.concurrent.Promise v7;
io.vertx.core.net.impl.ChannelProvider$2 v0;
io.vertx.core.net.impl.ChannelProvider v1;
java.lang.String v4;
io.vertx.core.Handler v2;
boolean v5, v6;
io.vertx.core.net.SocketAddress v3;
v0 := @this: io.vertx.core.net.impl.ChannelProvider$2;
v1 := @parameter0: io.vertx.core.net.impl.ChannelProvider;
v2 := @parameter1: io.vertx.core.Handler;
v3 := @parameter2: io.vertx.core.net.SocketAddress;
v4 := @parameter3: java.lang.String;
v5 := @parameter4: boolean;
v6 := @parameter5: boolean;
v7 := @parameter6: io.netty.util.concurrent.Promise;
v0.<io.vertx.core.net.impl.ChannelProvider$2: io.vertx.core.net.impl.ChannelProvider this$0> = v1;
v0.<io.vertx.core.net.impl.ChannelProvider$2: io.vertx.core.Handler val$handler> = v2;
v0.<io.vertx.core.net.impl.ChannelProvider$2: io.vertx.core.net.SocketAddress val$peerAddress> = v3;
v0.<io.vertx.core.net.impl.ChannelProvider$2: java.lang.String val$serverName> = v4;
v0.<io.vertx.core.net.impl.ChannelProvider$2: boolean val$ssl> = v5;
v0.<io.vertx.core.net.impl.ChannelProvider$2: boolean val$useAlpn> = v6;
v0.<io.vertx.core.net.impl.ChannelProvider$2: io.netty.util.concurrent.Promise val$channelHandler> = v7;
specialinvoke v0.<io.netty.channel.ChannelInitializer: void <init>()>();
return;
}
protected void initChannel(io.netty.channel.Channel)
{
io.netty.util.concurrent.Promise v8;
io.vertx.core.net.impl.ChannelProvider$2 v0;
io.netty.channel.Channel v1;
io.vertx.core.net.impl.ChannelProvider v2;
java.lang.String v5;
io.vertx.core.Handler v3;
boolean v6, v7;
io.vertx.core.net.SocketAddress v4;
v0 := @this: io.vertx.core.net.impl.ChannelProvider$2;
v1 := @parameter0: io.netty.channel.Channel;
v2 = v0.<io.vertx.core.net.impl.ChannelProvider$2: io.vertx.core.net.impl.ChannelProvider this$0>;
v3 = v0.<io.vertx.core.net.impl.ChannelProvider$2: io.vertx.core.Handler val$handler>;
v4 = v0.<io.vertx.core.net.impl.ChannelProvider$2: io.vertx.core.net.SocketAddress val$peerAddress>;
v5 = v0.<io.vertx.core.net.impl.ChannelProvider$2: java.lang.String val$serverName>;
v6 = v0.<io.vertx.core.net.impl.ChannelProvider$2: boolean val$ssl>;
v7 = v0.<io.vertx.core.net.impl.ChannelProvider$2: boolean val$useAlpn>;
v8 = v0.<io.vertx.core.net.impl.ChannelProvider$2: io.netty.util.concurrent.Promise val$channelHandler>;
specialinvoke v2.<io.vertx.core.net.impl.ChannelProvider: void initSSL(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,java.lang.String,boolean,boolean,io.netty.channel.Channel,io.netty.util.concurrent.Promise)>(v3, v4, v5, v6, v7, v1, v8);
return;
}
}