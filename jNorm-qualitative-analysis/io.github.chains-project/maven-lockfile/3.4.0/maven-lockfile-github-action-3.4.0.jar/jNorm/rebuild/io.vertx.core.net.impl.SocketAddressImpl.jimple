public class io.vertx.core.net.impl.SocketAddressImpl extends java.lang.Object implements io.vertx.core.net.SocketAddress
{
private final java.lang.String host;
private final java.lang.String hostName;
private final java.net.InetAddress ipAddress;
private final int port;
private final java.lang.String path;
public void <init>(java.net.InetSocketAddress)
{
java.net.InetSocketAddress v1;
java.net.InetAddress v11;
int v2, v3, v4;
java.lang.String v5, v7, v8;
io.vertx.core.net.impl.SocketAddressImpl v0;
boolean v10, v6, v9;
v0 := @this: io.vertx.core.net.impl.SocketAddressImpl;
v1 := @parameter0: java.net.InetSocketAddress;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = virtualinvoke v1.<java.net.InetSocketAddress: int getPort()>();
v3 = (int) 65535;
staticinvoke <io.vertx.core.impl.Arguments: void requireInRange(int,int,int,java.lang.String)>(v2, 0, v3, "port p must be in range 0 <= p <= 65535");
v0.<io.vertx.core.net.impl.SocketAddressImpl: java.lang.String path> = null;
v4 = virtualinvoke v1.<java.net.InetSocketAddress: int getPort()>();
v0.<io.vertx.core.net.impl.SocketAddressImpl: int port> = v4;
v5 = virtualinvoke v1.<java.net.InetSocketAddress: java.lang.String getHostString()>();
v0.<io.vertx.core.net.impl.SocketAddressImpl: java.lang.String host> = v5;
v6 = virtualinvoke v1.<java.net.InetSocketAddress: boolean isUnresolved()>();
if v6 == 0 goto label1;
v7 = virtualinvoke v1.<java.net.InetSocketAddress: java.lang.String getHostName()>();
v0.<io.vertx.core.net.impl.SocketAddressImpl: java.lang.String hostName> = v7;
v0.<io.vertx.core.net.impl.SocketAddressImpl: java.net.InetAddress ipAddress> = null;
goto label4;
label1:
v8 = virtualinvoke v1.<java.net.InetSocketAddress: java.lang.String getHostString()>();
v9 = staticinvoke <io.netty.util.NetUtil: boolean isValidIpV4Address(java.lang.String)>(v8);
if v9 != 0 goto label2;
v10 = staticinvoke <io.netty.util.NetUtil: boolean isValidIpV6Address(java.lang.String)>(v8);
if v10 == 0 goto label3;
label2:
v8 = null;
label3:
v0.<io.vertx.core.net.impl.SocketAddressImpl: java.lang.String hostName> = v8;
v11 = virtualinvoke v1.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
v0.<io.vertx.core.net.impl.SocketAddressImpl: java.net.InetAddress ipAddress> = v11;
label4:
return;
}
public void <init>(int, java.lang.String)
{
io.vertx.core.VertxException v9;
byte[] v6;
java.lang.IllegalArgumentException v4;
java.net.UnknownHostException v8;
java.net.InetAddress v7;
java.net.Inet6Address v11;
int v1, v3;
java.lang.String v2;
io.vertx.core.net.impl.SocketAddressImpl v0;
boolean v10, v12, v13, v5;
v0 := @this: io.vertx.core.net.impl.SocketAddressImpl;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.String;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = (int) 65535;
if v1 <= v3 goto label01;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("port p must be < 65535");
throw v4;
label01:
v0.<io.vertx.core.net.impl.SocketAddressImpl: java.lang.String path> = null;
v0.<io.vertx.core.net.impl.SocketAddressImpl: int port> = v1;
v5 = staticinvoke <io.netty.util.NetUtil: boolean isValidIpV4Address(java.lang.String)>(v2);
if v5 == 0 goto label06;
label02:
v6 = staticinvoke <io.netty.util.NetUtil: byte[] createByteArrayFromIpAddressString(java.lang.String)>(v2);
v7 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>(v6);
label03:
goto label05;
label04:
v8 := @caughtexception;
v9 = new io.vertx.core.VertxException;
specialinvoke v9.<io.vertx.core.VertxException: void <init>(java.lang.Throwable)>(v8);
throw v9;
label05:
v0.<io.vertx.core.net.impl.SocketAddressImpl: java.lang.String host> = v2;
v0.<io.vertx.core.net.impl.SocketAddressImpl: java.lang.String hostName> = null;
v0.<io.vertx.core.net.impl.SocketAddressImpl: java.net.InetAddress ipAddress> = v7;
goto label10;
label06:
v10 = staticinvoke <io.netty.util.NetUtil: boolean isValidIpV6Address(java.lang.String)>(v2);
if v10 == 0 goto label07;
v11 = staticinvoke <io.netty.util.NetUtil: java.net.Inet6Address getByName(java.lang.CharSequence)>(v2);
v0.<io.vertx.core.net.impl.SocketAddressImpl: java.lang.String host> = v2;
v0.<io.vertx.core.net.impl.SocketAddressImpl: java.lang.String hostName> = null;
v0.<io.vertx.core.net.impl.SocketAddressImpl: java.net.InetAddress ipAddress> = v11;
goto label10;
label07:
v12 = virtualinvoke v2.<java.lang.String: boolean isEmpty()>();
if v12 != 0 goto label08;
v13 = 1;
goto label09;
label08:
v13 = 0;
label09:
staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>(v13, "host name must not be empty");
v0.<io.vertx.core.net.impl.SocketAddressImpl: java.lang.String host> = v2;
v0.<io.vertx.core.net.impl.SocketAddressImpl: java.lang.String hostName> = v2;
v0.<io.vertx.core.net.impl.SocketAddressImpl: java.net.InetAddress ipAddress> = null;
label10:
return;
catch java.net.UnknownHostException from label02 to label03 with label04;
}
public void <init>(java.lang.String)
{
int v4;
java.lang.String v1;
io.vertx.core.net.impl.SocketAddressImpl v0;
boolean v2, v3;
v0 := @this: io.vertx.core.net.impl.SocketAddressImpl;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<java.lang.Object: void <init>()>();
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "domain socket path must be non null");
v2 = virtualinvoke v1.<java.lang.String: boolean isEmpty()>();
if v2 != 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>(v3, "domain socket must not be empty");
v4 = (int) -1;
v0.<io.vertx.core.net.impl.SocketAddressImpl: int port> = v4;
v0.<io.vertx.core.net.impl.SocketAddressImpl: java.lang.String host> = null;
v0.<io.vertx.core.net.impl.SocketAddressImpl: java.net.InetAddress ipAddress> = null;
v0.<io.vertx.core.net.impl.SocketAddressImpl: java.lang.String hostName> = null;
v0.<io.vertx.core.net.impl.SocketAddressImpl: java.lang.String path> = v1;
return;
}
public java.lang.String path()
{
java.lang.String v1;
io.vertx.core.net.impl.SocketAddressImpl v0;
v0 := @this: io.vertx.core.net.impl.SocketAddressImpl;
v1 = v0.<io.vertx.core.net.impl.SocketAddressImpl: java.lang.String path>;
return v1;
}
public java.lang.String host()
{
java.lang.String v1;
io.vertx.core.net.impl.SocketAddressImpl v0;
v0 := @this: io.vertx.core.net.impl.SocketAddressImpl;
v1 = v0.<io.vertx.core.net.impl.SocketAddressImpl: java.lang.String host>;
return v1;
}
public java.lang.String hostName()
{
java.lang.String v1;
io.vertx.core.net.impl.SocketAddressImpl v0;
v0 := @this: io.vertx.core.net.impl.SocketAddressImpl;
v1 = v0.<io.vertx.core.net.impl.SocketAddressImpl: java.lang.String hostName>;
return v1;
}
public java.lang.String hostAddress()
{
java.net.InetAddress v1, v3;
java.lang.String v2;
io.vertx.core.net.impl.SocketAddressImpl v0;
v0 := @this: io.vertx.core.net.impl.SocketAddressImpl;
v1 = v0.<io.vertx.core.net.impl.SocketAddressImpl: java.net.InetAddress ipAddress>;
if v1 != null goto label1;
v2 = null;
goto label2;
label1:
v3 = v0.<io.vertx.core.net.impl.SocketAddressImpl: java.net.InetAddress ipAddress>;
v2 = virtualinvoke v3.<java.net.InetAddress: java.lang.String getHostAddress()>();
label2:
return v2;
}
public int port()
{
int v1;
io.vertx.core.net.impl.SocketAddressImpl v0;
v0 := @this: io.vertx.core.net.impl.SocketAddressImpl;
v1 = v0.<io.vertx.core.net.impl.SocketAddressImpl: int port>;
return v1;
}
public boolean isInetSocket()
{
java.lang.String v1;
io.vertx.core.net.impl.SocketAddressImpl v0;
boolean v2;
v0 := @this: io.vertx.core.net.impl.SocketAddressImpl;
v1 = v0.<io.vertx.core.net.impl.SocketAddressImpl: java.lang.String path>;
if v1 != null goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public boolean isDomainSocket()
{
java.lang.String v1;
io.vertx.core.net.impl.SocketAddressImpl v0;
boolean v2;
v0 := @this: io.vertx.core.net.impl.SocketAddressImpl;
v1 = v0.<io.vertx.core.net.impl.SocketAddressImpl: java.lang.String path>;
if v1 == null goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public java.lang.String toString()
{
int v3;
java.lang.String v1, v2, v4, v5;
io.vertx.core.net.impl.SocketAddressImpl v0;
v0 := @this: io.vertx.core.net.impl.SocketAddressImpl;
v1 = v0.<io.vertx.core.net.impl.SocketAddressImpl: java.lang.String path>;
if v1 != null goto label1;
v2 = v0.<io.vertx.core.net.impl.SocketAddressImpl: java.lang.String host>;
v3 = v0.<io.vertx.core.net.impl.SocketAddressImpl: int port>;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int)>(v2, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001:\u0001");
return v4;
label1:
v5 = v0.<io.vertx.core.net.impl.SocketAddressImpl: java.lang.String path>;
return v5;
}
public java.net.InetAddress ipAddress()
{
java.net.InetAddress v1;
io.vertx.core.net.impl.SocketAddressImpl v0;
v0 := @this: io.vertx.core.net.impl.SocketAddressImpl;
v1 = v0.<io.vertx.core.net.impl.SocketAddressImpl: java.net.InetAddress ipAddress>;
return v1;
}
public boolean equals(java.lang.Object)
{
int v4, v5;
java.lang.Class v2, v3;
java.lang.Object v1;
java.lang.String v10, v6, v7, v9;
io.vertx.core.net.impl.SocketAddressImpl v0;
boolean v11, v12, v8;
v0 := @this: io.vertx.core.net.impl.SocketAddressImpl;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v1 == null goto label2;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v2 == v3 goto label3;
label2:
return 0;
label3:
v4 = v0.<io.vertx.core.net.impl.SocketAddressImpl: int port>;
v5 = v1.<io.vertx.core.net.impl.SocketAddressImpl: int port>;
if v4 != v5 goto label4;
v6 = v0.<io.vertx.core.net.impl.SocketAddressImpl: java.lang.String host>;
v7 = v1.<io.vertx.core.net.impl.SocketAddressImpl: java.lang.String host>;
v8 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(v6, v7);
if v8 == 0 goto label4;
v9 = v0.<io.vertx.core.net.impl.SocketAddressImpl: java.lang.String path>;
v10 = v1.<io.vertx.core.net.impl.SocketAddressImpl: java.lang.String path>;
v11 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(v9, v10);
if v11 == 0 goto label4;
v12 = 1;
goto label5;
label4:
v12 = 0;
label5:
return v12;
}
public int hashCode()
{
int v2, v3, v5, v6, v7, v8, v9;
java.lang.String v1, v4;
io.vertx.core.net.impl.SocketAddressImpl v0;
v0 := @this: io.vertx.core.net.impl.SocketAddressImpl;
v1 = v0.<io.vertx.core.net.impl.SocketAddressImpl: java.lang.String host>;
v2 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>(v1);
v3 = 31 * v2;
v4 = v0.<io.vertx.core.net.impl.SocketAddressImpl: java.lang.String path>;
v5 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>(v4);
v6 = v3 + v5;
v7 = 31 * v6;
v8 = v0.<io.vertx.core.net.impl.SocketAddressImpl: int port>;
v9 = v7 + v8;
return v9;
}
}