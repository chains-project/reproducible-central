public class io.vertx.core.net.impl.SslHandshakeCompletionHandler extends io.netty.channel.ChannelInboundHandlerAdapter
{
static io.netty.util.AttributeKey SERVER_NAME_ATTR;
private final io.netty.util.concurrent.Promise promise;
public void <init>(io.netty.util.concurrent.Promise)
{
io.vertx.core.net.impl.SslHandshakeCompletionHandler v0;
io.netty.util.concurrent.Promise v1;
v0 := @this: io.vertx.core.net.impl.SslHandshakeCompletionHandler;
v1 := @parameter0: io.netty.util.concurrent.Promise;
specialinvoke v0.<io.netty.channel.ChannelInboundHandlerAdapter: void <init>()>();
v0.<io.vertx.core.net.impl.SslHandshakeCompletionHandler: io.netty.util.concurrent.Promise promise> = v1;
return;
}
public void userEventTriggered(io.netty.channel.ChannelHandlerContext, java.lang.Object)
{
io.netty.util.AttributeKey v6;
java.lang.Throwable v10, v16;
io.vertx.core.net.impl.SslHandshakeCompletionHandler v0;
io.netty.channel.ChannelHandlerContext v1;
java.lang.String v8;
boolean v11, v12, v3, v4;
io.netty.util.Attribute v7;
io.netty.util.concurrent.Promise v14, v15, v9;
io.netty.channel.ChannelPipeline v13;
io.netty.channel.Channel v5;
java.lang.Object v2;
v0 := @this: io.vertx.core.net.impl.SslHandshakeCompletionHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 = v2 instanceof io.netty.handler.ssl.SniCompletionEvent;
if v3 == 0 goto label2;
v4 = virtualinvoke v2.<io.netty.handler.ssl.SniCompletionEvent: boolean isSuccess()>();
if v4 == 0 goto label1;
v5 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v6 = <io.vertx.core.net.impl.SslHandshakeCompletionHandler: io.netty.util.AttributeKey SERVER_NAME_ATTR>;
v7 = interfaceinvoke v5.<io.netty.channel.Channel: io.netty.util.Attribute attr(io.netty.util.AttributeKey)>(v6);
v8 = virtualinvoke v2.<io.netty.handler.ssl.SniCompletionEvent: java.lang.String hostname()>();
interfaceinvoke v7.<io.netty.util.Attribute: void set(java.lang.Object)>(v8);
goto label5;
label1:
v9 = v0.<io.vertx.core.net.impl.SslHandshakeCompletionHandler: io.netty.util.concurrent.Promise promise>;
v10 = virtualinvoke v2.<io.netty.handler.ssl.SniCompletionEvent: java.lang.Throwable cause()>();
interfaceinvoke v9.<io.netty.util.concurrent.Promise: boolean tryFailure(java.lang.Throwable)>(v10);
goto label5;
label2:
v11 = v2 instanceof io.netty.handler.ssl.SslHandshakeCompletionEvent;
if v11 == 0 goto label4;
v12 = virtualinvoke v2.<io.netty.handler.ssl.SslHandshakeCompletionEvent: boolean isSuccess()>();
if v12 == 0 goto label3;
v13 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPipeline pipeline()>();
interfaceinvoke v13.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline remove(io.netty.channel.ChannelHandler)>(v0);
v14 = v0.<io.vertx.core.net.impl.SslHandshakeCompletionHandler: io.netty.util.concurrent.Promise promise>;
interfaceinvoke v14.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setSuccess(java.lang.Object)>(null);
goto label5;
label3:
v15 = v0.<io.vertx.core.net.impl.SslHandshakeCompletionHandler: io.netty.util.concurrent.Promise promise>;
v16 = virtualinvoke v2.<io.netty.handler.ssl.SslHandshakeCompletionEvent: java.lang.Throwable cause()>();
interfaceinvoke v15.<io.netty.util.concurrent.Promise: boolean tryFailure(java.lang.Throwable)>(v16);
goto label5;
label4:
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireUserEventTriggered(java.lang.Object)>(v2);
label5:
return;
}
public void exceptionCaught(io.netty.channel.ChannelHandlerContext, java.lang.Throwable)
{
java.lang.Throwable v2;
io.netty.channel.ChannelHandlerContext v1;
io.vertx.core.net.impl.SslHandshakeCompletionHandler v0;
v0 := @this: io.vertx.core.net.impl.SslHandshakeCompletionHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Throwable;
return;
}
static void <clinit>()
{
io.netty.util.AttributeKey v0;
v0 = staticinvoke <io.netty.util.AttributeKey: io.netty.util.AttributeKey valueOf(java.lang.String)>("sniServerName");
<io.vertx.core.net.impl.SslHandshakeCompletionHandler: io.netty.util.AttributeKey SERVER_NAME_ATTR> = v0;
return;
}
}