public final class io.vertx.core.net.impl.VertxHandler extends io.netty.channel.ChannelDuplexHandler
{
private final java.util.function.Function connectionFactory;
private io.vertx.core.net.impl.ConnectionBase conn;
private io.vertx.core.Handler addHandler;
private io.vertx.core.Handler removeHandler;
public static io.vertx.core.net.impl.VertxHandler create(java.util.function.Function)
{
io.vertx.core.net.impl.VertxHandler v1;
java.util.function.Function v0;
v0 := @parameter0: java.util.function.Function;
v1 = new io.vertx.core.net.impl.VertxHandler;
specialinvoke v1.<io.vertx.core.net.impl.VertxHandler: void <init>(java.util.function.Function)>(v0);
return v1;
}
private void <init>(java.util.function.Function)
{
io.vertx.core.net.impl.VertxHandler v0;
java.util.function.Function v1;
v0 := @this: io.vertx.core.net.impl.VertxHandler;
v1 := @parameter0: java.util.function.Function;
specialinvoke v0.<io.netty.channel.ChannelDuplexHandler: void <init>()>();
v0.<io.vertx.core.net.impl.VertxHandler: java.util.function.Function connectionFactory> = v1;
return;
}
public static io.netty.buffer.ByteBuf safeBuffer(io.netty.buffer.ByteBuf)
{
java.lang.Throwable v12;
io.netty.buffer.ByteBufAllocator v2;
io.vertx.core.buffer.impl.VertxByteBufAllocator v6;
io.netty.buffer.ByteBuf v0, v1, v11, v8;
int v10, v7, v9;
boolean v3, v4, v5;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 = <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf EMPTY_BUFFER>;
if v0 == v1 goto label6;
v2 = virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBufAllocator alloc()>();
v3 = v2 instanceof io.netty.buffer.PooledByteBufAllocator;
if v3 != 0 goto label1;
v4 = v0 instanceof io.netty.buffer.CompositeByteBuf;
if v4 == 0 goto label6;
label1:
v5 = virtualinvoke v0.<io.netty.buffer.ByteBuf: boolean isReadable()>();
if v5 == 0 goto label3;
v6 = <io.vertx.core.buffer.impl.VertxByteBufAllocator: io.vertx.core.buffer.impl.VertxByteBufAllocator DEFAULT>;
v7 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int readableBytes()>();
v8 = virtualinvoke v6.<io.vertx.core.buffer.impl.VertxByteBufAllocator: io.netty.buffer.ByteBuf heapBuffer(int)>(v7);
v9 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int readerIndex()>();
v10 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int readableBytes()>();
virtualinvoke v8.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf,int,int)>(v0, v9, v10);
label2:
virtualinvoke v0.<io.netty.buffer.ByteBuf: boolean release()>();
return v8;
label3:
v11 = <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf EMPTY_BUFFER>;
label4:
virtualinvoke v0.<io.netty.buffer.ByteBuf: boolean release()>();
return v11;
label5:
v12 := @caughtexception;
virtualinvoke v0.<io.netty.buffer.ByteBuf: boolean release()>();
throw v12;
label6:
return v0;
catch java.lang.Throwable from label1 to label2 with label5;
catch java.lang.Throwable from label3 to label4 with label5;
}
private void setConnection(io.vertx.core.net.impl.ConnectionBase)
{
io.vertx.core.net.impl.VertxHandler v0;
io.vertx.core.Handler v2, v3;
io.vertx.core.net.impl.ConnectionBase v1;
v0 := @this: io.vertx.core.net.impl.VertxHandler;
v1 := @parameter0: io.vertx.core.net.impl.ConnectionBase;
v0.<io.vertx.core.net.impl.VertxHandler: io.vertx.core.net.impl.ConnectionBase conn> = v1;
v2 = v0.<io.vertx.core.net.impl.VertxHandler: io.vertx.core.Handler addHandler>;
if v2 == null goto label1;
v3 = v0.<io.vertx.core.net.impl.VertxHandler: io.vertx.core.Handler addHandler>;
interfaceinvoke v3.<io.vertx.core.Handler: void handle(java.lang.Object)>(v1);
label1:
return;
}
public void handlerAdded(io.netty.channel.ChannelHandlerContext)
{
io.vertx.core.net.impl.VertxHandler v0;
io.netty.channel.ChannelHandlerContext v1;
java.lang.Object v3;
java.util.function.Function v2;
v0 := @this: io.vertx.core.net.impl.VertxHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = v0.<io.vertx.core.net.impl.VertxHandler: java.util.function.Function connectionFactory>;
v3 = interfaceinvoke v2.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v1);
specialinvoke v0.<io.vertx.core.net.impl.VertxHandler: void setConnection(io.vertx.core.net.impl.ConnectionBase)>(v3);
return;
}
public void handlerRemoved(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.vertx.core.net.impl.VertxHandler v0;
io.netty.channel.ChannelHandlerContext v1;
io.vertx.core.Handler v2, v3;
io.vertx.core.net.impl.ConnectionBase v4;
v0 := @this: io.vertx.core.net.impl.VertxHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = v0.<io.vertx.core.net.impl.VertxHandler: io.vertx.core.Handler removeHandler>;
if v2 == null goto label1;
v3 = v0.<io.vertx.core.net.impl.VertxHandler: io.vertx.core.Handler removeHandler>;
v0.<io.vertx.core.net.impl.VertxHandler: io.vertx.core.Handler removeHandler> = null;
v4 = v0.<io.vertx.core.net.impl.VertxHandler: io.vertx.core.net.impl.ConnectionBase conn>;
interfaceinvoke v3.<io.vertx.core.Handler: void handle(java.lang.Object)>(v4);
label1:
return;
}
public io.vertx.core.net.impl.VertxHandler addHandler(io.vertx.core.Handler)
{
io.vertx.core.net.impl.VertxHandler v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.net.impl.VertxHandler;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.net.impl.VertxHandler: io.vertx.core.Handler addHandler> = v1;
return v0;
}
public io.vertx.core.net.impl.VertxHandler removeHandler(io.vertx.core.Handler)
{
io.vertx.core.net.impl.VertxHandler v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.net.impl.VertxHandler;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.net.impl.VertxHandler: io.vertx.core.Handler removeHandler> = v1;
return v0;
}
public io.vertx.core.net.impl.ConnectionBase getConnection()
{
io.vertx.core.net.impl.VertxHandler v0;
io.vertx.core.net.impl.ConnectionBase v1;
v0 := @this: io.vertx.core.net.impl.VertxHandler;
v1 = v0.<io.vertx.core.net.impl.VertxHandler: io.vertx.core.net.impl.ConnectionBase conn>;
return v1;
}
public void channelWritabilityChanged(io.netty.channel.ChannelHandlerContext)
{
io.vertx.core.net.impl.VertxHandler v0;
io.netty.channel.ChannelHandlerContext v1;
io.vertx.core.net.impl.ConnectionBase v2;
v0 := @this: io.vertx.core.net.impl.VertxHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = virtualinvoke v0.<io.vertx.core.net.impl.VertxHandler: io.vertx.core.net.impl.ConnectionBase getConnection()>();
virtualinvoke v2.<io.vertx.core.net.impl.ConnectionBase: void handleInterestedOpsChanged()>();
return;
}
public void exceptionCaught(io.netty.channel.ChannelHandlerContext, java.lang.Throwable)
{
io.vertx.core.net.impl.VertxHandler v0;
java.lang.Throwable v2;
io.netty.channel.ChannelHandlerContext v1;
io.vertx.core.net.impl.ConnectionBase v3;
v0 := @this: io.vertx.core.net.impl.VertxHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Throwable;
v3 = virtualinvoke v0.<io.vertx.core.net.impl.VertxHandler: io.vertx.core.net.impl.ConnectionBase getConnection()>();
if v3 == null goto label1;
virtualinvoke v3.<io.vertx.core.net.impl.ConnectionBase: void handleException(java.lang.Throwable)>(v2);
label1:
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture close()>();
return;
}
public void channelInactive(io.netty.channel.ChannelHandlerContext)
{
io.vertx.core.net.impl.VertxHandler v0;
io.netty.channel.ChannelHandlerContext v1;
io.vertx.core.net.impl.ConnectionBase v2;
v0 := @this: io.vertx.core.net.impl.VertxHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = v0.<io.vertx.core.net.impl.VertxHandler: io.vertx.core.net.impl.ConnectionBase conn>;
virtualinvoke v2.<io.vertx.core.net.impl.ConnectionBase: void handleClosed()>();
return;
}
public void channelReadComplete(io.netty.channel.ChannelHandlerContext)
{
io.vertx.core.net.impl.VertxHandler v0;
io.netty.channel.ChannelHandlerContext v1;
io.vertx.core.net.impl.ConnectionBase v2;
v0 := @this: io.vertx.core.net.impl.VertxHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = v0.<io.vertx.core.net.impl.VertxHandler: io.vertx.core.net.impl.ConnectionBase conn>;
virtualinvoke v2.<io.vertx.core.net.impl.ConnectionBase: void endReadAndFlush()>();
return;
}
public void channelRead(io.netty.channel.ChannelHandlerContext, java.lang.Object)
{
io.vertx.core.net.impl.VertxHandler v0;
io.netty.channel.ChannelHandlerContext v1;
java.lang.Object v2;
io.vertx.core.net.impl.ConnectionBase v3;
v0 := @this: io.vertx.core.net.impl.VertxHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 = v0.<io.vertx.core.net.impl.VertxHandler: io.vertx.core.net.impl.ConnectionBase conn>;
virtualinvoke v3.<io.vertx.core.net.impl.ConnectionBase: void read(java.lang.Object)>(v2);
return;
}
public void close(io.netty.channel.ChannelHandlerContext, io.netty.channel.ChannelPromise) throws java.lang.Exception
{
io.vertx.core.net.impl.VertxHandler v0;
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelPromise v2;
io.vertx.core.net.impl.ConnectionBase v3;
v0 := @this: io.vertx.core.net.impl.VertxHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = v0.<io.vertx.core.net.impl.VertxHandler: io.vertx.core.net.impl.ConnectionBase conn>;
virtualinvoke v3.<io.vertx.core.net.impl.ConnectionBase: void close(io.netty.channel.ChannelPromise)>(v2);
return;
}
public void userEventTriggered(io.netty.channel.ChannelHandlerContext, java.lang.Object) throws java.lang.Exception
{
io.vertx.core.net.impl.VertxHandler v0;
io.netty.channel.ChannelHandlerContext v1;
java.lang.Object v2;
io.vertx.core.net.impl.ConnectionBase v4, v5;
boolean v3;
v0 := @this: io.vertx.core.net.impl.VertxHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 = v2 instanceof io.netty.handler.timeout.IdleStateEvent;
if v3 == 0 goto label1;
v4 = v0.<io.vertx.core.net.impl.VertxHandler: io.vertx.core.net.impl.ConnectionBase conn>;
virtualinvoke v4.<io.vertx.core.net.impl.ConnectionBase: void handleIdle(io.netty.handler.timeout.IdleStateEvent)>(v2);
label1:
v5 = v0.<io.vertx.core.net.impl.VertxHandler: io.vertx.core.net.impl.ConnectionBase conn>;
virtualinvoke v5.<io.vertx.core.net.impl.ConnectionBase: void handleEvent(java.lang.Object)>(v2);
return;
}
}