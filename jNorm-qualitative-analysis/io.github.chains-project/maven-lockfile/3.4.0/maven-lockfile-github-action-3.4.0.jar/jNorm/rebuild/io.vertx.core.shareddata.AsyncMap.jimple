public interface  io.vertx.core.shareddata.AsyncMap extends java.lang.Object
{
public void get(java.lang.Object, io.vertx.core.Handler)
{
io.vertx.core.shareddata.AsyncMap v0;
java.lang.Object v1;
io.vertx.core.Handler v2;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: io.vertx.core.Handler;
v3 = interfaceinvoke v0.<io.vertx.core.shareddata.AsyncMap: io.vertx.core.Future get(java.lang.Object)>(v1);
interfaceinvoke v3.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
return;
}
public abstract io.vertx.core.Future get(java.lang.Object);
public void put(java.lang.Object, java.lang.Object, io.vertx.core.Handler)
{
io.vertx.core.shareddata.AsyncMap v0;
java.lang.Object v1, v2;
io.vertx.core.Handler v3;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: io.vertx.core.Handler;
v4 = interfaceinvoke v0.<io.vertx.core.shareddata.AsyncMap: io.vertx.core.Future put(java.lang.Object,java.lang.Object)>(v1, v2);
interfaceinvoke v4.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v3);
return;
}
public abstract io.vertx.core.Future put(java.lang.Object, java.lang.Object);
public void put(java.lang.Object, java.lang.Object, long, io.vertx.core.Handler)
{
io.vertx.core.shareddata.AsyncMap v0;
java.lang.Object v1, v2;
long v3;
io.vertx.core.Handler v4;
io.vertx.core.Future v5;
v0 := @this: io.vertx.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: long;
v4 := @parameter3: io.vertx.core.Handler;
v5 = interfaceinvoke v0.<io.vertx.core.shareddata.AsyncMap: io.vertx.core.Future put(java.lang.Object,java.lang.Object,long)>(v1, v2, v3);
interfaceinvoke v5.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v4);
return;
}
public abstract io.vertx.core.Future put(java.lang.Object, java.lang.Object, long);
public void putIfAbsent(java.lang.Object, java.lang.Object, io.vertx.core.Handler)
{
io.vertx.core.shareddata.AsyncMap v0;
java.lang.Object v1, v2;
io.vertx.core.Handler v3;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: io.vertx.core.Handler;
v4 = interfaceinvoke v0.<io.vertx.core.shareddata.AsyncMap: io.vertx.core.Future putIfAbsent(java.lang.Object,java.lang.Object)>(v1, v2);
interfaceinvoke v4.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v3);
return;
}
public abstract io.vertx.core.Future putIfAbsent(java.lang.Object, java.lang.Object);
public void putIfAbsent(java.lang.Object, java.lang.Object, long, io.vertx.core.Handler)
{
io.vertx.core.shareddata.AsyncMap v0;
java.lang.Object v1, v2;
long v3;
io.vertx.core.Handler v4;
io.vertx.core.Future v5;
v0 := @this: io.vertx.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: long;
v4 := @parameter3: io.vertx.core.Handler;
v5 = interfaceinvoke v0.<io.vertx.core.shareddata.AsyncMap: io.vertx.core.Future putIfAbsent(java.lang.Object,java.lang.Object,long)>(v1, v2, v3);
interfaceinvoke v5.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v4);
return;
}
public abstract io.vertx.core.Future putIfAbsent(java.lang.Object, java.lang.Object, long);
public void remove(java.lang.Object, io.vertx.core.Handler)
{
io.vertx.core.shareddata.AsyncMap v0;
java.lang.Object v1;
io.vertx.core.Handler v2;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: io.vertx.core.Handler;
v3 = interfaceinvoke v0.<io.vertx.core.shareddata.AsyncMap: io.vertx.core.Future remove(java.lang.Object)>(v1);
interfaceinvoke v3.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
return;
}
public abstract io.vertx.core.Future remove(java.lang.Object);
public void removeIfPresent(java.lang.Object, java.lang.Object, io.vertx.core.Handler)
{
io.vertx.core.shareddata.AsyncMap v0;
java.lang.Object v1, v2;
io.vertx.core.Handler v3;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: io.vertx.core.Handler;
v4 = interfaceinvoke v0.<io.vertx.core.shareddata.AsyncMap: io.vertx.core.Future removeIfPresent(java.lang.Object,java.lang.Object)>(v1, v2);
interfaceinvoke v4.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v3);
return;
}
public abstract io.vertx.core.Future removeIfPresent(java.lang.Object, java.lang.Object);
public void replace(java.lang.Object, java.lang.Object, io.vertx.core.Handler)
{
io.vertx.core.shareddata.AsyncMap v0;
java.lang.Object v1, v2;
io.vertx.core.Handler v3;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: io.vertx.core.Handler;
v4 = interfaceinvoke v0.<io.vertx.core.shareddata.AsyncMap: io.vertx.core.Future replace(java.lang.Object,java.lang.Object)>(v1, v2);
interfaceinvoke v4.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v3);
return;
}
public abstract io.vertx.core.Future replace(java.lang.Object, java.lang.Object);
public void replace(java.lang.Object, java.lang.Object, long, io.vertx.core.Handler)
{
io.vertx.core.shareddata.AsyncMap v0;
java.lang.Object v1, v2;
long v3;
io.vertx.core.Handler v4;
io.vertx.core.Future v5;
v0 := @this: io.vertx.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: long;
v4 := @parameter3: io.vertx.core.Handler;
v5 = interfaceinvoke v0.<io.vertx.core.shareddata.AsyncMap: io.vertx.core.Future replace(java.lang.Object,java.lang.Object,long)>(v1, v2, v3);
interfaceinvoke v5.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v4);
return;
}
public io.vertx.core.Future replace(java.lang.Object, java.lang.Object, long)
{
java.lang.UnsupportedOperationException v4;
io.vertx.core.shareddata.AsyncMap v0;
java.lang.Object v1, v2;
long v3;
io.vertx.core.Future v5;
v0 := @this: io.vertx.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: long;
v4 = new java.lang.UnsupportedOperationException;
specialinvoke v4.<java.lang.UnsupportedOperationException: void <init>()>();
v5 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.Throwable)>(v4);
return v5;
}
public void replaceIfPresent(java.lang.Object, java.lang.Object, java.lang.Object, io.vertx.core.Handler)
{
io.vertx.core.shareddata.AsyncMap v0;
java.lang.Object v1, v2, v3;
io.vertx.core.Handler v4;
io.vertx.core.Future v5;
v0 := @this: io.vertx.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.lang.Object;
v4 := @parameter3: io.vertx.core.Handler;
v5 = interfaceinvoke v0.<io.vertx.core.shareddata.AsyncMap: io.vertx.core.Future replaceIfPresent(java.lang.Object,java.lang.Object,java.lang.Object)>(v1, v2, v3);
interfaceinvoke v5.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v4);
return;
}
public abstract io.vertx.core.Future replaceIfPresent(java.lang.Object, java.lang.Object, java.lang.Object);
public void replaceIfPresent(java.lang.Object, java.lang.Object, java.lang.Object, long, io.vertx.core.Handler)
{
io.vertx.core.shareddata.AsyncMap v0;
java.lang.Object v1, v2, v3;
long v4;
io.vertx.core.Handler v5;
io.vertx.core.Future v6;
v0 := @this: io.vertx.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.lang.Object;
v4 := @parameter3: long;
v5 := @parameter4: io.vertx.core.Handler;
v6 = interfaceinvoke v0.<io.vertx.core.shareddata.AsyncMap: io.vertx.core.Future replaceIfPresent(java.lang.Object,java.lang.Object,java.lang.Object,long)>(v1, v2, v3, v4);
interfaceinvoke v6.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v5);
return;
}
public io.vertx.core.Future replaceIfPresent(java.lang.Object, java.lang.Object, java.lang.Object, long)
{
java.lang.UnsupportedOperationException v5;
io.vertx.core.shareddata.AsyncMap v0;
java.lang.Object v1, v2, v3;
long v4;
io.vertx.core.Future v6;
v0 := @this: io.vertx.core.shareddata.AsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.lang.Object;
v4 := @parameter3: long;
v5 = new java.lang.UnsupportedOperationException;
specialinvoke v5.<java.lang.UnsupportedOperationException: void <init>()>();
v6 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.Throwable)>(v5);
return v6;
}
public void clear(io.vertx.core.Handler)
{
io.vertx.core.shareddata.AsyncMap v0;
io.vertx.core.Handler v1;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.shareddata.AsyncMap;
v1 := @parameter0: io.vertx.core.Handler;
v2 = interfaceinvoke v0.<io.vertx.core.shareddata.AsyncMap: io.vertx.core.Future clear()>();
interfaceinvoke v2.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v1);
return;
}
public abstract io.vertx.core.Future clear();
public void size(io.vertx.core.Handler)
{
io.vertx.core.shareddata.AsyncMap v0;
io.vertx.core.Handler v1;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.shareddata.AsyncMap;
v1 := @parameter0: io.vertx.core.Handler;
v2 = interfaceinvoke v0.<io.vertx.core.shareddata.AsyncMap: io.vertx.core.Future size()>();
interfaceinvoke v2.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v1);
return;
}
public abstract io.vertx.core.Future size();
public void keys(io.vertx.core.Handler)
{
io.vertx.core.shareddata.AsyncMap v0;
io.vertx.core.Handler v1;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.shareddata.AsyncMap;
v1 := @parameter0: io.vertx.core.Handler;
v2 = interfaceinvoke v0.<io.vertx.core.shareddata.AsyncMap: io.vertx.core.Future keys()>();
interfaceinvoke v2.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v1);
return;
}
public abstract io.vertx.core.Future keys();
public void values(io.vertx.core.Handler)
{
io.vertx.core.shareddata.AsyncMap v0;
io.vertx.core.Handler v1;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.shareddata.AsyncMap;
v1 := @parameter0: io.vertx.core.Handler;
v2 = interfaceinvoke v0.<io.vertx.core.shareddata.AsyncMap: io.vertx.core.Future values()>();
interfaceinvoke v2.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v1);
return;
}
public abstract io.vertx.core.Future values();
public void entries(io.vertx.core.Handler)
{
io.vertx.core.shareddata.AsyncMap v0;
io.vertx.core.Handler v1;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.shareddata.AsyncMap;
v1 := @parameter0: io.vertx.core.Handler;
v2 = interfaceinvoke v0.<io.vertx.core.shareddata.AsyncMap: io.vertx.core.Future entries()>();
interfaceinvoke v2.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v1);
return;
}
public abstract io.vertx.core.Future entries();
}