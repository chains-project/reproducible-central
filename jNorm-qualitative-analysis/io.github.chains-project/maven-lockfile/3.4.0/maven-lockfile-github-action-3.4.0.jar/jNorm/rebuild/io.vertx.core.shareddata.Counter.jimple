public interface  io.vertx.core.shareddata.Counter extends java.lang.Object
{
public void get(io.vertx.core.Handler)
{
io.vertx.core.shareddata.Counter v0;
io.vertx.core.Handler v1;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.shareddata.Counter;
v1 := @parameter0: io.vertx.core.Handler;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "resultHandler");
v2 = interfaceinvoke v0.<io.vertx.core.shareddata.Counter: io.vertx.core.Future get()>();
interfaceinvoke v2.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v1);
return;
}
public abstract io.vertx.core.Future get();
public void incrementAndGet(io.vertx.core.Handler)
{
io.vertx.core.shareddata.Counter v0;
io.vertx.core.Handler v1;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.shareddata.Counter;
v1 := @parameter0: io.vertx.core.Handler;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "resultHandler");
v2 = interfaceinvoke v0.<io.vertx.core.shareddata.Counter: io.vertx.core.Future incrementAndGet()>();
interfaceinvoke v2.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v1);
return;
}
public abstract io.vertx.core.Future incrementAndGet();
public void getAndIncrement(io.vertx.core.Handler)
{
io.vertx.core.shareddata.Counter v0;
io.vertx.core.Handler v1;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.shareddata.Counter;
v1 := @parameter0: io.vertx.core.Handler;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "resultHandler");
v2 = interfaceinvoke v0.<io.vertx.core.shareddata.Counter: io.vertx.core.Future getAndIncrement()>();
interfaceinvoke v2.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v1);
return;
}
public abstract io.vertx.core.Future getAndIncrement();
public void decrementAndGet(io.vertx.core.Handler)
{
io.vertx.core.shareddata.Counter v0;
io.vertx.core.Handler v1;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.shareddata.Counter;
v1 := @parameter0: io.vertx.core.Handler;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "resultHandler");
v2 = interfaceinvoke v0.<io.vertx.core.shareddata.Counter: io.vertx.core.Future decrementAndGet()>();
interfaceinvoke v2.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v1);
return;
}
public abstract io.vertx.core.Future decrementAndGet();
public void addAndGet(long, io.vertx.core.Handler)
{
io.vertx.core.shareddata.Counter v0;
long v1;
io.vertx.core.Handler v2;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.shareddata.Counter;
v1 := @parameter0: long;
v2 := @parameter1: io.vertx.core.Handler;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v2, "resultHandler");
v3 = interfaceinvoke v0.<io.vertx.core.shareddata.Counter: io.vertx.core.Future addAndGet(long)>(v1);
interfaceinvoke v3.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
return;
}
public abstract io.vertx.core.Future addAndGet(long);
public void getAndAdd(long, io.vertx.core.Handler)
{
io.vertx.core.shareddata.Counter v0;
long v1;
io.vertx.core.Handler v2;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.shareddata.Counter;
v1 := @parameter0: long;
v2 := @parameter1: io.vertx.core.Handler;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v2, "resultHandler");
v3 = interfaceinvoke v0.<io.vertx.core.shareddata.Counter: io.vertx.core.Future getAndAdd(long)>(v1);
interfaceinvoke v3.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
return;
}
public abstract io.vertx.core.Future getAndAdd(long);
public void compareAndSet(long, long, io.vertx.core.Handler)
{
io.vertx.core.shareddata.Counter v0;
long v1, v2;
io.vertx.core.Handler v3;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.shareddata.Counter;
v1 := @parameter0: long;
v2 := @parameter1: long;
v3 := @parameter2: io.vertx.core.Handler;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v3, "resultHandler");
v4 = interfaceinvoke v0.<io.vertx.core.shareddata.Counter: io.vertx.core.Future compareAndSet(long,long)>(v1, v2);
interfaceinvoke v4.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v3);
return;
}
public abstract io.vertx.core.Future compareAndSet(long, long);
}