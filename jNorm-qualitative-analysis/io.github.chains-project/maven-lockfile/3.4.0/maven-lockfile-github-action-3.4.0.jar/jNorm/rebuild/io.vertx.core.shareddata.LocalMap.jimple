public interface  io.vertx.core.shareddata.LocalMap extends java.lang.Object implements java.util.Map
{
public abstract java.lang.Object get(java.lang.Object);
public abstract java.lang.Object put(java.lang.Object, java.lang.Object);
public abstract java.lang.Object remove(java.lang.Object);
public abstract void clear();
public abstract int size();
public abstract boolean isEmpty();
public abstract java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object);
public abstract boolean removeIfPresent(java.lang.Object, java.lang.Object);
public abstract boolean replaceIfPresent(java.lang.Object, java.lang.Object, java.lang.Object);
public abstract java.lang.Object replace(java.lang.Object, java.lang.Object);
public abstract void close();
public abstract java.util.Set keySet();
public abstract java.util.Collection values();
public abstract java.lang.Object compute(java.lang.Object, java.util.function.BiFunction);
public abstract java.lang.Object computeIfAbsent(java.lang.Object, java.util.function.Function);
public abstract java.lang.Object computeIfPresent(java.lang.Object, java.util.function.BiFunction);
public abstract boolean containsKey(java.lang.Object);
public abstract boolean containsValue(java.lang.Object);
public abstract java.util.Set entrySet();
public abstract void forEach(java.util.function.BiConsumer);
public abstract java.lang.Object getOrDefault(java.lang.Object, java.lang.Object);
public abstract java.lang.Object merge(java.lang.Object, java.lang.Object, java.util.function.BiFunction);
public abstract void putAll(java.util.Map);
public abstract boolean remove(java.lang.Object, java.lang.Object);
public abstract boolean replace(java.lang.Object, java.lang.Object, java.lang.Object);
public abstract void replaceAll(java.util.function.BiFunction);
}