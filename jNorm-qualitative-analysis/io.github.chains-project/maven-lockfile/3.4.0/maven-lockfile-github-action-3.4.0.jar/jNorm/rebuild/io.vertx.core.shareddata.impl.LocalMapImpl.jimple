class io.vertx.core.shareddata.impl.LocalMapImpl extends java.lang.Object implements io.vertx.core.shareddata.LocalMap
{
private final java.util.concurrent.ConcurrentMap maps;
private final java.lang.String name;
private final java.util.concurrent.ConcurrentMap map;
void <init>(java.lang.String, java.util.concurrent.ConcurrentMap)
{
io.vertx.core.shareddata.impl.LocalMapImpl v0;
java.util.concurrent.ConcurrentHashMap v3;
java.lang.String v1;
java.util.concurrent.ConcurrentMap v2;
v0 := @this: io.vertx.core.shareddata.impl.LocalMapImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.util.concurrent.ConcurrentMap;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v3.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.concurrent.ConcurrentMap map> = v3;
v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.String name> = v1;
v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.concurrent.ConcurrentMap maps> = v2;
return;
}
public java.lang.Object get(java.lang.Object)
{
io.vertx.core.shareddata.impl.LocalMapImpl v0;
java.lang.Object v1, v3, v4;
java.util.concurrent.ConcurrentMap v2;
v0 := @this: io.vertx.core.shareddata.impl.LocalMapImpl;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.concurrent.ConcurrentMap map>;
v3 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v1);
v4 = staticinvoke <io.vertx.core.shareddata.impl.Checker: java.lang.Object copyIfRequired(java.lang.Object)>(v3);
return v4;
}
public java.lang.Object put(java.lang.Object, java.lang.Object)
{
io.vertx.core.shareddata.impl.LocalMapImpl v0;
java.lang.Object v1, v2, v4;
java.util.concurrent.ConcurrentMap v3;
v0 := @this: io.vertx.core.shareddata.impl.LocalMapImpl;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
staticinvoke <io.vertx.core.shareddata.impl.Checker: void checkType(java.lang.Object)>(v1);
staticinvoke <io.vertx.core.shareddata.impl.Checker: void checkType(java.lang.Object)>(v2);
v3 = v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.concurrent.ConcurrentMap map>;
v4 = interfaceinvoke v3.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v2);
return v4;
}
public java.lang.Object remove(java.lang.Object)
{
io.vertx.core.shareddata.impl.LocalMapImpl v0;
java.lang.Object v1, v3, v4;
java.util.concurrent.ConcurrentMap v2;
v0 := @this: io.vertx.core.shareddata.impl.LocalMapImpl;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.concurrent.ConcurrentMap map>;
v3 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(v1);
v4 = staticinvoke <io.vertx.core.shareddata.impl.Checker: java.lang.Object copyIfRequired(java.lang.Object)>(v3);
return v4;
}
public void clear()
{
io.vertx.core.shareddata.impl.LocalMapImpl v0;
java.util.concurrent.ConcurrentMap v1;
v0 := @this: io.vertx.core.shareddata.impl.LocalMapImpl;
v1 = v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.concurrent.ConcurrentMap map>;
interfaceinvoke v1.<java.util.concurrent.ConcurrentMap: void clear()>();
return;
}
public int size()
{
int v2;
io.vertx.core.shareddata.impl.LocalMapImpl v0;
java.util.concurrent.ConcurrentMap v1;
v0 := @this: io.vertx.core.shareddata.impl.LocalMapImpl;
v1 = v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.concurrent.ConcurrentMap map>;
v2 = interfaceinvoke v1.<java.util.concurrent.ConcurrentMap: int size()>();
return v2;
}
public boolean isEmpty()
{
io.vertx.core.shareddata.impl.LocalMapImpl v0;
boolean v2;
java.util.concurrent.ConcurrentMap v1;
v0 := @this: io.vertx.core.shareddata.impl.LocalMapImpl;
v1 = v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.concurrent.ConcurrentMap map>;
v2 = interfaceinvoke v1.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>();
return v2;
}
public java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object)
{
io.vertx.core.shareddata.impl.LocalMapImpl v0;
java.lang.Object v1, v2, v4, v5;
java.util.concurrent.ConcurrentMap v3;
v0 := @this: io.vertx.core.shareddata.impl.LocalMapImpl;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
staticinvoke <io.vertx.core.shareddata.impl.Checker: void checkType(java.lang.Object)>(v1);
staticinvoke <io.vertx.core.shareddata.impl.Checker: void checkType(java.lang.Object)>(v2);
v3 = v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.concurrent.ConcurrentMap map>;
v4 = interfaceinvoke v3.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(v1, v2);
v5 = staticinvoke <io.vertx.core.shareddata.impl.Checker: java.lang.Object copyIfRequired(java.lang.Object)>(v4);
return v5;
}
public boolean remove(java.lang.Object, java.lang.Object)
{
io.vertx.core.shareddata.impl.LocalMapImpl v0;
java.lang.Object v1, v2;
boolean v4;
java.util.concurrent.ConcurrentMap v3;
v0 := @this: io.vertx.core.shareddata.impl.LocalMapImpl;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.concurrent.ConcurrentMap map>;
v4 = interfaceinvoke v3.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>(v1, v2);
return v4;
}
public boolean replace(java.lang.Object, java.lang.Object, java.lang.Object)
{
io.vertx.core.shareddata.impl.LocalMapImpl v0;
java.lang.Object v1, v2, v3;
boolean v5;
java.util.concurrent.ConcurrentMap v4;
v0 := @this: io.vertx.core.shareddata.impl.LocalMapImpl;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.lang.Object;
v4 = v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.concurrent.ConcurrentMap map>;
v5 = interfaceinvoke v4.<java.util.concurrent.ConcurrentMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>(v1, v2, v3);
return v5;
}
public boolean removeIfPresent(java.lang.Object, java.lang.Object)
{
io.vertx.core.shareddata.impl.LocalMapImpl v0;
java.lang.Object v1, v2;
boolean v4;
java.util.concurrent.ConcurrentMap v3;
v0 := @this: io.vertx.core.shareddata.impl.LocalMapImpl;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.concurrent.ConcurrentMap map>;
v4 = interfaceinvoke v3.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>(v1, v2);
return v4;
}
public boolean replaceIfPresent(java.lang.Object, java.lang.Object, java.lang.Object)
{
io.vertx.core.shareddata.impl.LocalMapImpl v0;
java.lang.Object v1, v2, v3;
boolean v5;
java.util.concurrent.ConcurrentMap v4;
v0 := @this: io.vertx.core.shareddata.impl.LocalMapImpl;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.lang.Object;
staticinvoke <io.vertx.core.shareddata.impl.Checker: void checkType(java.lang.Object)>(v1);
staticinvoke <io.vertx.core.shareddata.impl.Checker: void checkType(java.lang.Object)>(v2);
staticinvoke <io.vertx.core.shareddata.impl.Checker: void checkType(java.lang.Object)>(v3);
v4 = v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.concurrent.ConcurrentMap map>;
v5 = interfaceinvoke v4.<java.util.concurrent.ConcurrentMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>(v1, v2, v3);
return v5;
}
public java.lang.Object replace(java.lang.Object, java.lang.Object)
{
io.vertx.core.shareddata.impl.LocalMapImpl v0;
java.lang.Object v1, v2, v4, v5;
java.util.concurrent.ConcurrentMap v3;
v0 := @this: io.vertx.core.shareddata.impl.LocalMapImpl;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
staticinvoke <io.vertx.core.shareddata.impl.Checker: void checkType(java.lang.Object)>(v1);
staticinvoke <io.vertx.core.shareddata.impl.Checker: void checkType(java.lang.Object)>(v2);
v3 = v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.concurrent.ConcurrentMap map>;
v4 = interfaceinvoke v3.<java.util.concurrent.ConcurrentMap: java.lang.Object replace(java.lang.Object,java.lang.Object)>(v1, v2);
v5 = staticinvoke <io.vertx.core.shareddata.impl.Checker: java.lang.Object copyIfRequired(java.lang.Object)>(v4);
return v5;
}
public void replaceAll(java.util.function.BiFunction)
{
java.util.function.BiFunction v1, v3;
io.vertx.core.shareddata.impl.LocalMapImpl v0;
java.util.concurrent.ConcurrentMap v2;
v0 := @this: io.vertx.core.shareddata.impl.LocalMapImpl;
v1 := @parameter0: java.util.function.BiFunction;
v2 = v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.concurrent.ConcurrentMap map>;
v3 = staticinvoke <io.vertx.core.shareddata.impl.LocalMapImpl$lambda_replaceAll_0__1186: java.util.function.BiFunction bootstrap$(java.util.function.BiFunction)>(v1);
interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: void replaceAll(java.util.function.BiFunction)>(v3);
return;
}
public void close()
{
io.vertx.core.shareddata.impl.LocalMapImpl v0;
java.lang.String v2;
java.util.concurrent.ConcurrentMap v1;
v0 := @this: io.vertx.core.shareddata.impl.LocalMapImpl;
v1 = v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.concurrent.ConcurrentMap maps>;
v2 = v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.String name>;
interfaceinvoke v1.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(v2);
return;
}
public java.util.Set keySet()
{
java.util.Iterator v6;
java.util.Set v5;
java.util.concurrent.ConcurrentMap v2, v4;
java.util.HashSet v1;
int v3;
io.vertx.core.shareddata.impl.LocalMapImpl v0;
java.lang.Object v8, v9;
boolean v7;
v0 := @this: io.vertx.core.shareddata.impl.LocalMapImpl;
v1 = new java.util.HashSet;
v2 = v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.concurrent.ConcurrentMap map>;
v3 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: int size()>();
specialinvoke v1.<java.util.HashSet: void <init>(int)>(v3);
v4 = v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.concurrent.ConcurrentMap map>;
v5 = interfaceinvoke v4.<java.util.concurrent.ConcurrentMap: java.util.Set keySet()>();
v6 = interfaceinvoke v5.<java.util.Set: java.util.Iterator iterator()>();
label1:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label2;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = staticinvoke <io.vertx.core.shareddata.impl.Checker: java.lang.Object copyIfRequired(java.lang.Object)>(v8);
interfaceinvoke v1.<java.util.Set: boolean add(java.lang.Object)>(v9);
goto label1;
label2:
return v1;
}
public java.util.Collection values()
{
java.util.Iterator v6;
java.util.Collection v5;
java.util.ArrayList v1;
java.util.concurrent.ConcurrentMap v2, v4;
int v3;
io.vertx.core.shareddata.impl.LocalMapImpl v0;
java.lang.Object v8, v9;
boolean v7;
v0 := @this: io.vertx.core.shareddata.impl.LocalMapImpl;
v1 = new java.util.ArrayList;
v2 = v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.concurrent.ConcurrentMap map>;
v3 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: int size()>();
specialinvoke v1.<java.util.ArrayList: void <init>(int)>(v3);
v4 = v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.concurrent.ConcurrentMap map>;
v5 = interfaceinvoke v4.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();
v6 = interfaceinvoke v5.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label2;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = staticinvoke <io.vertx.core.shareddata.impl.Checker: java.lang.Object copyIfRequired(java.lang.Object)>(v8);
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v9);
goto label1;
label2:
return v1;
}
private java.util.function.BiFunction typeChecked(java.util.function.BiFunction)
{
io.vertx.core.shareddata.impl.LocalMapImpl v0;
java.util.function.BiFunction v1, v2;
v0 := @this: io.vertx.core.shareddata.impl.LocalMapImpl;
v1 := @parameter0: java.util.function.BiFunction;
v2 = staticinvoke <io.vertx.core.shareddata.impl.LocalMapImpl$lambda_typeChecked_1__1187: java.util.function.BiFunction bootstrap$(java.util.function.BiFunction)>(v1);
return v2;
}
private java.util.function.Function typeChecked(java.util.function.Function)
{
io.vertx.core.shareddata.impl.LocalMapImpl v0;
java.util.function.Function v1, v2;
v0 := @this: io.vertx.core.shareddata.impl.LocalMapImpl;
v1 := @parameter0: java.util.function.Function;
v2 = staticinvoke <io.vertx.core.shareddata.impl.LocalMapImpl$lambda_typeChecked_2__1188: java.util.function.Function bootstrap$(java.util.function.Function)>(v1);
return v2;
}
public java.lang.Object compute(java.lang.Object, java.util.function.BiFunction)
{
java.util.function.BiFunction v2, v4;
io.vertx.core.shareddata.impl.LocalMapImpl v0;
java.lang.Object v1, v5;
java.util.concurrent.ConcurrentMap v3;
v0 := @this: io.vertx.core.shareddata.impl.LocalMapImpl;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.util.function.BiFunction;
v3 = v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.concurrent.ConcurrentMap map>;
v4 = specialinvoke v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.function.BiFunction typeChecked(java.util.function.BiFunction)>(v2);
v5 = interfaceinvoke v3.<java.util.concurrent.ConcurrentMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>(v1, v4);
return v5;
}
public java.lang.Object computeIfAbsent(java.lang.Object, java.util.function.Function)
{
io.vertx.core.shareddata.impl.LocalMapImpl v0;
java.lang.Object v1, v5;
java.util.function.Function v2, v4;
java.util.concurrent.ConcurrentMap v3;
v0 := @this: io.vertx.core.shareddata.impl.LocalMapImpl;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.util.function.Function;
v3 = v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.concurrent.ConcurrentMap map>;
v4 = specialinvoke v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.function.Function typeChecked(java.util.function.Function)>(v2);
v5 = interfaceinvoke v3.<java.util.concurrent.ConcurrentMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(v1, v4);
return v5;
}
public java.lang.Object computeIfPresent(java.lang.Object, java.util.function.BiFunction)
{
java.util.function.BiFunction v2, v4;
io.vertx.core.shareddata.impl.LocalMapImpl v0;
java.lang.Object v1, v5;
java.util.concurrent.ConcurrentMap v3;
v0 := @this: io.vertx.core.shareddata.impl.LocalMapImpl;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.util.function.BiFunction;
v3 = v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.concurrent.ConcurrentMap map>;
v4 = specialinvoke v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.function.BiFunction typeChecked(java.util.function.BiFunction)>(v2);
v5 = interfaceinvoke v3.<java.util.concurrent.ConcurrentMap: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>(v1, v4);
return v5;
}
public boolean containsKey(java.lang.Object)
{
io.vertx.core.shareddata.impl.LocalMapImpl v0;
java.lang.Object v1;
boolean v3;
java.util.concurrent.ConcurrentMap v2;
v0 := @this: io.vertx.core.shareddata.impl.LocalMapImpl;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.concurrent.ConcurrentMap map>;
v3 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(v1);
return v3;
}
public boolean containsValue(java.lang.Object)
{
io.vertx.core.shareddata.impl.LocalMapImpl v0;
java.lang.Object v1;
boolean v3;
java.util.concurrent.ConcurrentMap v2;
v0 := @this: io.vertx.core.shareddata.impl.LocalMapImpl;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.concurrent.ConcurrentMap map>;
v3 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: boolean containsValue(java.lang.Object)>(v1);
return v3;
}
public java.util.Set entrySet()
{
java.util.Iterator v6;
java.util.Set v5;
java.util.concurrent.ConcurrentMap v2, v4;
java.util.HashSet v1;
io.vertx.core.shareddata.impl.LocalMapImpl$1 v9;
int v3;
io.vertx.core.shareddata.impl.LocalMapImpl v0;
java.lang.Object v8;
boolean v7;
v0 := @this: io.vertx.core.shareddata.impl.LocalMapImpl;
v1 = new java.util.HashSet;
v2 = v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.concurrent.ConcurrentMap map>;
v3 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: int size()>();
specialinvoke v1.<java.util.HashSet: void <init>(int)>(v3);
v4 = v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.concurrent.ConcurrentMap map>;
v5 = interfaceinvoke v4.<java.util.concurrent.ConcurrentMap: java.util.Set entrySet()>();
v6 = interfaceinvoke v5.<java.util.Set: java.util.Iterator iterator()>();
label1:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label2;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = new io.vertx.core.shareddata.impl.LocalMapImpl$1;
specialinvoke v9.<io.vertx.core.shareddata.impl.LocalMapImpl$1: void <init>(io.vertx.core.shareddata.impl.LocalMapImpl,java.util.Map$Entry)>(v0, v8);
interfaceinvoke v1.<java.util.Set: boolean add(java.lang.Object)>(v9);
goto label1;
label2:
return v1;
}
public void forEach(java.util.function.BiConsumer)
{
java.util.Iterator v3;
java.util.Set v2;
io.vertx.core.shareddata.impl.LocalMapImpl v0;
java.util.function.BiConsumer v1;
java.lang.Object v5, v6, v7;
boolean v4;
v0 := @this: io.vertx.core.shareddata.impl.LocalMapImpl;
v1 := @parameter0: java.util.function.BiConsumer;
v2 = virtualinvoke v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
v7 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getValue()>();
interfaceinvoke v1.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>(v6, v7);
goto label1;
label2:
return;
}
public java.lang.Object getOrDefault(java.lang.Object, java.lang.Object)
{
io.vertx.core.shareddata.impl.LocalMapImpl v0;
java.lang.Object v1, v2, v4, v5;
java.util.concurrent.ConcurrentMap v3;
v0 := @this: io.vertx.core.shareddata.impl.LocalMapImpl;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.concurrent.ConcurrentMap map>;
v4 = interfaceinvoke v3.<java.util.concurrent.ConcurrentMap: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>(v1, v2);
v5 = staticinvoke <io.vertx.core.shareddata.impl.Checker: java.lang.Object copyIfRequired(java.lang.Object)>(v4);
return v5;
}
public java.lang.Object merge(java.lang.Object, java.lang.Object, java.util.function.BiFunction)
{
java.util.function.BiFunction v3, v5;
io.vertx.core.shareddata.impl.LocalMapImpl v0;
java.lang.Object v1, v2, v6;
java.util.concurrent.ConcurrentMap v4;
v0 := @this: io.vertx.core.shareddata.impl.LocalMapImpl;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.util.function.BiFunction;
staticinvoke <io.vertx.core.shareddata.impl.Checker: void checkType(java.lang.Object)>(v1);
staticinvoke <io.vertx.core.shareddata.impl.Checker: void checkType(java.lang.Object)>(v2);
v4 = v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.concurrent.ConcurrentMap map>;
v5 = staticinvoke <io.vertx.core.shareddata.impl.LocalMapImpl$lambda_merge_3__1189: java.util.function.BiFunction bootstrap$(java.util.function.BiFunction)>(v3);
v6 = interfaceinvoke v4.<java.util.concurrent.ConcurrentMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>(v1, v2, v5);
return v6;
}
public void putAll(java.util.Map)
{
java.util.Iterator v3;
java.util.Set v2;
java.util.Map v1;
io.vertx.core.shareddata.impl.LocalMapImpl v0;
java.lang.Object v5, v6, v7;
boolean v4;
v0 := @this: io.vertx.core.shareddata.impl.LocalMapImpl;
v1 := @parameter0: java.util.Map;
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
v7 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getValue()>();
virtualinvoke v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.lang.Object put(java.lang.Object,java.lang.Object)>(v6, v7);
goto label1;
label2:
return;
}
public java.lang.String toString()
{
io.vertx.core.shareddata.impl.LocalMapImpl v0;
java.lang.String v2;
java.util.concurrent.ConcurrentMap v1;
v0 := @this: io.vertx.core.shareddata.impl.LocalMapImpl;
v1 = v0.<io.vertx.core.shareddata.impl.LocalMapImpl: java.util.concurrent.ConcurrentMap map>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
return v2;
}
}