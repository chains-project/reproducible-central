public class io.vertx.core.shareddata.impl.SharedDataImpl extends java.lang.Object implements io.vertx.core.shareddata.SharedData
{
private static final long DEFAULT_LOCK_TIMEOUT;
private final io.vertx.core.impl.VertxInternal vertx;
private final io.vertx.core.spi.cluster.ClusterManager clusterManager;
private final io.vertx.core.shareddata.impl.LocalAsyncLocks localAsyncLocks;
private final java.util.concurrent.ConcurrentMap localAsyncMaps;
private final java.util.concurrent.ConcurrentMap localCounters;
private final java.util.concurrent.ConcurrentMap localMaps;
public void <init>(io.vertx.core.impl.VertxInternal, io.vertx.core.spi.cluster.ClusterManager)
{
io.vertx.core.impl.VertxInternal v1;
io.vertx.core.shareddata.impl.LocalAsyncLocks v6;
io.vertx.core.shareddata.impl.SharedDataImpl v0;
io.vertx.core.spi.cluster.ClusterManager v2;
java.util.concurrent.ConcurrentHashMap v3, v4, v5;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl;
v1 := @parameter0: io.vertx.core.impl.VertxInternal;
v2 := @parameter1: io.vertx.core.spi.cluster.ClusterManager;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v3.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v0.<io.vertx.core.shareddata.impl.SharedDataImpl: java.util.concurrent.ConcurrentMap localAsyncMaps> = v3;
v4 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v4.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v0.<io.vertx.core.shareddata.impl.SharedDataImpl: java.util.concurrent.ConcurrentMap localCounters> = v4;
v5 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v5.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v0.<io.vertx.core.shareddata.impl.SharedDataImpl: java.util.concurrent.ConcurrentMap localMaps> = v5;
v0.<io.vertx.core.shareddata.impl.SharedDataImpl: io.vertx.core.impl.VertxInternal vertx> = v1;
v0.<io.vertx.core.shareddata.impl.SharedDataImpl: io.vertx.core.spi.cluster.ClusterManager clusterManager> = v2;
v6 = new io.vertx.core.shareddata.impl.LocalAsyncLocks;
specialinvoke v6.<io.vertx.core.shareddata.impl.LocalAsyncLocks: void <init>()>();
v0.<io.vertx.core.shareddata.impl.SharedDataImpl: io.vertx.core.shareddata.impl.LocalAsyncLocks localAsyncLocks> = v6;
return;
}
public void getClusterWideMap(java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.shareddata.impl.SharedDataImpl v0;
java.lang.String v1;
io.vertx.core.Handler v2;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v2, "resultHandler");
v3 = virtualinvoke v0.<io.vertx.core.shareddata.impl.SharedDataImpl: io.vertx.core.Future getClusterWideMap(java.lang.String)>(v1);
interfaceinvoke v3.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
return;
}
public io.vertx.core.Future getClusterWideMap(java.lang.String)
{
java.lang.IllegalStateException v3;
io.vertx.core.impl.VertxInternal v4;
io.vertx.core.impl.future.PromiseInternal v5;
io.vertx.core.spi.cluster.ClusterManager v2, v6;
io.vertx.core.Future v7, v9;
java.util.function.Function v8;
io.vertx.core.shareddata.impl.SharedDataImpl v0;
java.lang.String v1;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl;
v1 := @parameter0: java.lang.String;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "name");
v2 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl: io.vertx.core.spi.cluster.ClusterManager clusterManager>;
if v2 != null goto label1;
v3 = new java.lang.IllegalStateException;
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can\'t get cluster wide map if not clustered");
throw v3;
label1:
v4 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl: io.vertx.core.impl.VertxInternal vertx>;
v5 = interfaceinvoke v4.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
v6 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl: io.vertx.core.spi.cluster.ClusterManager clusterManager>;
interfaceinvoke v6.<io.vertx.core.spi.cluster.ClusterManager: void getAsyncMap(java.lang.String,io.vertx.core.Promise)>(v1, v5);
v7 = interfaceinvoke v5.<io.vertx.core.Promise: io.vertx.core.Future future()>();
v8 = staticinvoke <io.vertx.core.shareddata.impl.SharedDataImpl$init__1195: java.util.function.Function bootstrap$()>();
v9 = interfaceinvoke v7.<io.vertx.core.Future: io.vertx.core.Future map(java.util.function.Function)>(v8);
return v9;
}
public void getAsyncMap(java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.shareddata.impl.SharedDataImpl v0;
java.lang.String v1;
io.vertx.core.Handler v2;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v2, "resultHandler");
v3 = virtualinvoke v0.<io.vertx.core.shareddata.impl.SharedDataImpl: io.vertx.core.Future getAsyncMap(java.lang.String)>(v1);
interfaceinvoke v3.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
return;
}
public io.vertx.core.Future getAsyncMap(java.lang.String)
{
io.vertx.core.impl.VertxInternal v4;
io.vertx.core.impl.future.PromiseInternal v5;
io.vertx.core.spi.cluster.ClusterManager v2, v6;
io.vertx.core.Future v3, v7, v9;
java.util.function.Function v8;
io.vertx.core.shareddata.impl.SharedDataImpl v0;
java.lang.String v1;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl;
v1 := @parameter0: java.lang.String;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "name");
v2 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl: io.vertx.core.spi.cluster.ClusterManager clusterManager>;
if v2 != null goto label1;
v3 = virtualinvoke v0.<io.vertx.core.shareddata.impl.SharedDataImpl: io.vertx.core.Future getLocalAsyncMap(java.lang.String)>(v1);
return v3;
label1:
v4 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl: io.vertx.core.impl.VertxInternal vertx>;
v5 = interfaceinvoke v4.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
v6 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl: io.vertx.core.spi.cluster.ClusterManager clusterManager>;
interfaceinvoke v6.<io.vertx.core.spi.cluster.ClusterManager: void getAsyncMap(java.lang.String,io.vertx.core.Promise)>(v1, v5);
v7 = interfaceinvoke v5.<io.vertx.core.Promise: io.vertx.core.Future future()>();
v8 = staticinvoke <io.vertx.core.shareddata.impl.SharedDataImpl$init__1196: java.util.function.Function bootstrap$()>();
v9 = interfaceinvoke v7.<io.vertx.core.Future: io.vertx.core.Future map(java.util.function.Function)>(v8);
return v9;
}
public void getLock(java.lang.String, io.vertx.core.Handler)
{
java.lang.String v1;
io.vertx.core.Handler v2;
io.vertx.core.shareddata.impl.SharedDataImpl v0;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
virtualinvoke v0.<io.vertx.core.shareddata.impl.SharedDataImpl: void getLockWithTimeout(java.lang.String,long,io.vertx.core.Handler)>(v1, 10000L, v2);
return;
}
public io.vertx.core.Future getLock(java.lang.String)
{
java.lang.String v1;
io.vertx.core.Future v2;
io.vertx.core.shareddata.impl.SharedDataImpl v0;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.core.shareddata.impl.SharedDataImpl: io.vertx.core.Future getLockWithTimeout(java.lang.String,long)>(v1, 10000L);
return v2;
}
public void getLockWithTimeout(java.lang.String, long, io.vertx.core.Handler)
{
io.vertx.core.shareddata.impl.SharedDataImpl v0;
long v2;
java.lang.String v1;
io.vertx.core.Handler v3;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
v3 := @parameter2: io.vertx.core.Handler;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v3, "resultHandler");
v4 = virtualinvoke v0.<io.vertx.core.shareddata.impl.SharedDataImpl: io.vertx.core.Future getLockWithTimeout(java.lang.String,long)>(v1, v2);
interfaceinvoke v4.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v3);
return;
}
public io.vertx.core.Future getLockWithTimeout(java.lang.String, long)
{
io.vertx.core.impl.VertxInternal v7;
io.vertx.core.impl.future.PromiseInternal v8;
io.vertx.core.spi.cluster.ClusterManager v5, v9;
long v2;
io.vertx.core.Future v10, v6;
byte v3;
io.vertx.core.shareddata.impl.SharedDataImpl v0;
java.lang.String v1;
boolean v4;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "name");
v3 = v2 cmp 0L;
if v3 < 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>(v4, "timeout must be >= 0");
v5 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl: io.vertx.core.spi.cluster.ClusterManager clusterManager>;
if v5 != null goto label3;
v6 = virtualinvoke v0.<io.vertx.core.shareddata.impl.SharedDataImpl: io.vertx.core.Future getLocalLockWithTimeout(java.lang.String,long)>(v1, v2);
return v6;
label3:
v7 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl: io.vertx.core.impl.VertxInternal vertx>;
v8 = interfaceinvoke v7.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
v9 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl: io.vertx.core.spi.cluster.ClusterManager clusterManager>;
interfaceinvoke v9.<io.vertx.core.spi.cluster.ClusterManager: void getLockWithTimeout(java.lang.String,long,io.vertx.core.Promise)>(v1, v2, v8);
v10 = interfaceinvoke v8.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v10;
}
public void getLocalLock(java.lang.String, io.vertx.core.Handler)
{
java.lang.String v1;
io.vertx.core.Handler v2;
io.vertx.core.shareddata.impl.SharedDataImpl v0;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
virtualinvoke v0.<io.vertx.core.shareddata.impl.SharedDataImpl: void getLocalLockWithTimeout(java.lang.String,long,io.vertx.core.Handler)>(v1, 10000L, v2);
return;
}
public io.vertx.core.Future getLocalLock(java.lang.String)
{
java.lang.String v1;
io.vertx.core.Future v2;
io.vertx.core.shareddata.impl.SharedDataImpl v0;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.core.shareddata.impl.SharedDataImpl: io.vertx.core.Future getLocalLockWithTimeout(java.lang.String,long)>(v1, 10000L);
return v2;
}
public void getLocalLockWithTimeout(java.lang.String, long, io.vertx.core.Handler)
{
io.vertx.core.shareddata.impl.SharedDataImpl v0;
long v2;
java.lang.String v1;
io.vertx.core.Handler v3;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
v3 := @parameter2: io.vertx.core.Handler;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v3, "resultHandler");
v4 = virtualinvoke v0.<io.vertx.core.shareddata.impl.SharedDataImpl: io.vertx.core.Future getLocalLockWithTimeout(java.lang.String,long)>(v1, v2);
interfaceinvoke v4.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v3);
return;
}
public io.vertx.core.Future getLocalLockWithTimeout(java.lang.String, long)
{
io.vertx.core.impl.VertxInternal v6;
io.vertx.core.shareddata.impl.LocalAsyncLocks v5;
io.vertx.core.impl.ContextInternal v7;
long v2;
io.vertx.core.Future v8;
byte v3;
io.vertx.core.shareddata.impl.SharedDataImpl v0;
java.lang.String v1;
boolean v4;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "name");
v3 = v2 cmp 0L;
if v3 < 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>(v4, "timeout must be >= 0");
v5 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl: io.vertx.core.shareddata.impl.LocalAsyncLocks localAsyncLocks>;
v6 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl: io.vertx.core.impl.VertxInternal vertx>;
v7 = interfaceinvoke v6.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v8 = virtualinvoke v5.<io.vertx.core.shareddata.impl.LocalAsyncLocks: io.vertx.core.Future acquire(io.vertx.core.impl.ContextInternal,java.lang.String,long)>(v7, v1, v2);
return v8;
}
public io.vertx.core.Future getCounter(java.lang.String)
{
io.vertx.core.impl.VertxInternal v4;
io.vertx.core.impl.future.PromiseInternal v5;
io.vertx.core.spi.cluster.ClusterManager v2, v6;
io.vertx.core.Future v3, v7;
io.vertx.core.shareddata.impl.SharedDataImpl v0;
java.lang.String v1;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl;
v1 := @parameter0: java.lang.String;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "name");
v2 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl: io.vertx.core.spi.cluster.ClusterManager clusterManager>;
if v2 != null goto label1;
v3 = virtualinvoke v0.<io.vertx.core.shareddata.impl.SharedDataImpl: io.vertx.core.Future getLocalCounter(java.lang.String)>(v1);
return v3;
label1:
v4 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl: io.vertx.core.impl.VertxInternal vertx>;
v5 = interfaceinvoke v4.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
v6 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl: io.vertx.core.spi.cluster.ClusterManager clusterManager>;
interfaceinvoke v6.<io.vertx.core.spi.cluster.ClusterManager: void getCounter(java.lang.String,io.vertx.core.Promise)>(v1, v5);
v7 = interfaceinvoke v5.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v7;
}
public void getCounter(java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.shareddata.impl.SharedDataImpl v0;
java.lang.String v1;
io.vertx.core.Handler v2;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v2, "resultHandler");
v3 = virtualinvoke v0.<io.vertx.core.shareddata.impl.SharedDataImpl: io.vertx.core.Future getCounter(java.lang.String)>(v1);
interfaceinvoke v3.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
return;
}
public io.vertx.core.shareddata.LocalMap getLocalMap(java.lang.String)
{
io.vertx.core.shareddata.impl.SharedDataImpl v0;
java.lang.Object v4;
java.lang.String v1;
java.util.function.Function v3;
java.util.concurrent.ConcurrentMap v2;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl: java.util.concurrent.ConcurrentMap localMaps>;
v3 = staticinvoke <io.vertx.core.shareddata.impl.SharedDataImpl$lambda_getLocalMap_0__1197: java.util.function.Function bootstrap$(io.vertx.core.shareddata.impl.SharedDataImpl)>(v0);
v4 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(v1, v3);
return v4;
}
public void getLocalAsyncMap(java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.shareddata.impl.SharedDataImpl v0;
java.lang.String v1;
io.vertx.core.Handler v2;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v2, "resultHandler");
v3 = virtualinvoke v0.<io.vertx.core.shareddata.impl.SharedDataImpl: io.vertx.core.Future getLocalAsyncMap(java.lang.String)>(v1);
interfaceinvoke v3.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
return;
}
public io.vertx.core.Future getLocalAsyncMap(java.lang.String)
{
io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap v7;
io.vertx.core.impl.VertxInternal v5;
io.vertx.core.impl.ContextInternal v6;
io.vertx.core.Future v8;
java.util.function.Function v3;
java.util.concurrent.ConcurrentMap v2;
io.vertx.core.shareddata.impl.SharedDataImpl v0;
java.lang.Object v4;
java.lang.String v1;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl: java.util.concurrent.ConcurrentMap localAsyncMaps>;
v3 = staticinvoke <io.vertx.core.shareddata.impl.SharedDataImpl$lambda_getLocalAsyncMap_1__1198: java.util.function.Function bootstrap$(io.vertx.core.shareddata.impl.SharedDataImpl)>(v0);
v4 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(v1, v3);
v5 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl: io.vertx.core.impl.VertxInternal vertx>;
v6 = interfaceinvoke v5.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v7 = new io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap;
specialinvoke v7.<io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap: void <init>(io.vertx.core.shareddata.AsyncMap)>(v4);
v8 = interfaceinvoke v6.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future succeededFuture(java.lang.Object)>(v7);
return v8;
}
public void getLocalCounter(java.lang.String, io.vertx.core.Handler)
{
io.vertx.core.shareddata.impl.SharedDataImpl v0;
java.lang.String v1;
io.vertx.core.Handler v2;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v2, "resultHandler");
v3 = virtualinvoke v0.<io.vertx.core.shareddata.impl.SharedDataImpl: io.vertx.core.Future getLocalCounter(java.lang.String)>(v1);
interfaceinvoke v3.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
return;
}
public io.vertx.core.Future getLocalCounter(java.lang.String)
{
io.vertx.core.impl.VertxInternal v5;
io.vertx.core.impl.ContextInternal v6;
io.vertx.core.Future v7;
java.util.function.Function v3;
java.util.concurrent.ConcurrentMap v2;
io.vertx.core.shareddata.impl.SharedDataImpl v0;
java.lang.Object v4;
java.lang.String v1;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl: java.util.concurrent.ConcurrentMap localCounters>;
v3 = staticinvoke <io.vertx.core.shareddata.impl.SharedDataImpl$lambda_getLocalCounter_2__1199: java.util.function.Function bootstrap$(io.vertx.core.shareddata.impl.SharedDataImpl)>(v0);
v4 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(v1, v3);
v5 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl: io.vertx.core.impl.VertxInternal vertx>;
v6 = interfaceinvoke v5.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v7 = interfaceinvoke v6.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future succeededFuture(java.lang.Object)>(v4);
return v7;
}
private static void checkType(java.lang.Object)
{
java.lang.IllegalArgumentException v1, v4;
java.lang.Class v5;
java.lang.Object v0;
java.lang.String v6, v7;
boolean v2, v3;
v0 := @parameter0: java.lang.Object;
if v0 != null goto label1;
v1 = new java.lang.IllegalArgumentException;
specialinvoke v1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot put null in key or value of async map");
throw v1;
label1:
v2 = v0 instanceof java.io.Serializable;
if v2 != 0 goto label2;
v3 = v0 instanceof io.vertx.core.shareddata.impl.ClusterSerializable;
if v3 != 0 goto label2;
v4 = new java.lang.IllegalArgumentException;
v5 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v6 = virtualinvoke v5.<java.lang.Class: java.lang.String getName()>();
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid type: \u0001 to put in async map");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v7);
throw v4;
label2:
return;
}
}