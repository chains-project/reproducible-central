public class io.vertx.core.spi.cluster.impl.selector.Selectors extends java.lang.Object
{
private final java.util.concurrent.ConcurrentMap map;
private final io.vertx.core.spi.cluster.ClusterManager clusterManager;
public void <init>(io.vertx.core.spi.cluster.ClusterManager)
{
io.vertx.core.spi.cluster.impl.selector.Selectors v0;
java.util.concurrent.ConcurrentHashMap v2;
io.vertx.core.spi.cluster.ClusterManager v1;
v0 := @this: io.vertx.core.spi.cluster.impl.selector.Selectors;
v1 := @parameter0: io.vertx.core.spi.cluster.ClusterManager;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v2.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(0);
v0.<io.vertx.core.spi.cluster.impl.selector.Selectors: java.util.concurrent.ConcurrentMap map> = v2;
v0.<io.vertx.core.spi.cluster.impl.selector.Selectors: io.vertx.core.spi.cluster.ClusterManager clusterManager> = v1;
return;
}
public void withSelector(io.vertx.core.eventbus.Message, io.vertx.core.Promise, java.util.function.BiConsumer)
{
io.vertx.core.spi.cluster.impl.selector.Selectors v0;
io.vertx.core.Promise v10, v2;
java.util.function.BiFunction v6;
io.vertx.core.eventbus.Message v1;
io.vertx.core.Future v11;
java.util.concurrent.ConcurrentMap v5;
io.vertx.core.spi.cluster.impl.selector.RoundRobinSelector v13;
java.util.function.BiConsumer v3;
java.lang.Object v7;
java.lang.String v4;
io.vertx.core.Handler v12;
boolean v8, v9;
v0 := @this: io.vertx.core.spi.cluster.impl.selector.Selectors;
v1 := @parameter0: io.vertx.core.eventbus.Message;
v2 := @parameter1: io.vertx.core.Promise;
v3 := @parameter2: java.util.function.BiConsumer;
v4 = interfaceinvoke v1.<io.vertx.core.eventbus.Message: java.lang.String address()>();
v5 = v0.<io.vertx.core.spi.cluster.impl.selector.Selectors: java.util.concurrent.ConcurrentMap map>;
v6 = staticinvoke <io.vertx.core.spi.cluster.impl.selector.Selectors$lambda_withSelector_0__1182: java.util.function.BiFunction bootstrap$()>();
v7 = interfaceinvoke v5.<java.util.concurrent.ConcurrentMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>(v4, v6);
v8 = virtualinvoke v7.<io.vertx.core.spi.cluster.impl.selector.SelectorEntry: boolean isNotReady()>();
if v8 == 0 goto label2;
v9 = virtualinvoke v7.<io.vertx.core.spi.cluster.impl.selector.SelectorEntry: boolean shouldInitialize()>();
if v9 == 0 goto label1;
specialinvoke v0.<io.vertx.core.spi.cluster.impl.selector.Selectors: void initialize(java.lang.String)>(v4);
label1:
v10 = v7.<io.vertx.core.spi.cluster.impl.selector.SelectorEntry: io.vertx.core.Promise selectorPromise>;
v11 = interfaceinvoke v10.<io.vertx.core.Promise: io.vertx.core.Future future()>();
v12 = staticinvoke <io.vertx.core.spi.cluster.impl.selector.Selectors$lambda_withSelector_1__1183: io.vertx.core.Handler bootstrap$(java.util.function.BiConsumer,io.vertx.core.Promise)>(v3, v2);
interfaceinvoke v11.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v12);
goto label3;
label2:
v13 = v7.<io.vertx.core.spi.cluster.impl.selector.SelectorEntry: io.vertx.core.spi.cluster.impl.selector.RoundRobinSelector selector>;
interfaceinvoke v3.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>(v2, v13);
label3:
return;
}
private void initialize(java.lang.String)
{
io.vertx.core.spi.cluster.impl.selector.Selectors v0;
io.vertx.core.spi.cluster.ClusterManager v3;
io.vertx.core.Promise v2;
java.lang.String v1;
io.vertx.core.Handler v5;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.spi.cluster.impl.selector.Selectors;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.core.Promise: io.vertx.core.Promise promise()>();
v3 = v0.<io.vertx.core.spi.cluster.impl.selector.Selectors: io.vertx.core.spi.cluster.ClusterManager clusterManager>;
interfaceinvoke v3.<io.vertx.core.spi.cluster.ClusterManager: void getRegistrations(java.lang.String,io.vertx.core.Promise)>(v1, v2);
v4 = interfaceinvoke v2.<io.vertx.core.Promise: io.vertx.core.Future future()>();
v5 = staticinvoke <io.vertx.core.spi.cluster.impl.selector.Selectors$lambda_initialize_2__1184: io.vertx.core.Handler bootstrap$(io.vertx.core.spi.cluster.impl.selector.Selectors,java.lang.String)>(v0, v1);
interfaceinvoke v4.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v5);
return;
}
public void dataReceived(java.lang.String, java.util.List, boolean)
{
java.util.concurrent.ConcurrentMap v14, v5, v9;
io.vertx.core.spi.cluster.impl.selector.RoundRobinSelector v18;
io.vertx.core.spi.cluster.impl.selector.NullRoundRobinSelector v13;
java.lang.String v1;
boolean v10, v11, v15, v16, v3, v7;
io.vertx.core.spi.cluster.impl.selector.Selectors v0;
io.vertx.core.Promise v12, v17;
java.util.List v2, v4;
java.lang.Object v6;
io.vertx.core.spi.cluster.impl.selector.SelectorEntry v8;
v0 := @this: io.vertx.core.spi.cluster.impl.selector.Selectors;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.util.List;
v3 := @parameter2: boolean;
v4 = specialinvoke v0.<io.vertx.core.spi.cluster.impl.selector.Selectors: java.util.List computeAccessible(java.util.List)>(v2);
label1:
v5 = v0.<io.vertx.core.spi.cluster.impl.selector.Selectors: java.util.concurrent.ConcurrentMap map>;
v6 = interfaceinvoke v5.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v1);
if v6 == null goto label4;
if v3 == 0 goto label2;
v7 = virtualinvoke v6.<io.vertx.core.spi.cluster.impl.selector.SelectorEntry: boolean isNotReady()>();
if v7 != 0 goto label4;
label2:
v8 = virtualinvoke v6.<io.vertx.core.spi.cluster.impl.selector.SelectorEntry: io.vertx.core.spi.cluster.impl.selector.SelectorEntry data(java.util.List)>(v4);
if v8 != null goto label3;
v9 = v0.<io.vertx.core.spi.cluster.impl.selector.Selectors: java.util.concurrent.ConcurrentMap map>;
v10 = interfaceinvoke v9.<java.util.concurrent.ConcurrentMap: boolean remove(java.lang.Object,java.lang.Object)>(v1, v6);
if v10 == 0 goto label1;
v11 = virtualinvoke v6.<io.vertx.core.spi.cluster.impl.selector.SelectorEntry: boolean isNotReady()>();
if v11 == 0 goto label4;
v12 = v6.<io.vertx.core.spi.cluster.impl.selector.SelectorEntry: io.vertx.core.Promise selectorPromise>;
v13 = <io.vertx.core.spi.cluster.impl.selector.NullRoundRobinSelector: io.vertx.core.spi.cluster.impl.selector.NullRoundRobinSelector INSTANCE>;
interfaceinvoke v12.<io.vertx.core.Promise: void complete(java.lang.Object)>(v13);
goto label4;
label3:
v14 = v0.<io.vertx.core.spi.cluster.impl.selector.Selectors: java.util.concurrent.ConcurrentMap map>;
v15 = interfaceinvoke v14.<java.util.concurrent.ConcurrentMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>(v1, v6, v8);
if v15 == 0 goto label1;
v16 = virtualinvoke v6.<io.vertx.core.spi.cluster.impl.selector.SelectorEntry: boolean isNotReady()>();
if v16 == 0 goto label4;
v17 = v6.<io.vertx.core.spi.cluster.impl.selector.SelectorEntry: io.vertx.core.Promise selectorPromise>;
v18 = v8.<io.vertx.core.spi.cluster.impl.selector.SelectorEntry: io.vertx.core.spi.cluster.impl.selector.RoundRobinSelector selector>;
interfaceinvoke v17.<io.vertx.core.Promise: void complete(java.lang.Object)>(v18);
label4:
return;
}
private java.util.List computeAccessible(java.util.List)
{
io.vertx.core.spi.cluster.impl.selector.Selectors v0;
java.util.Iterator v6;
java.util.ArrayList v4;
java.util.List v1, v3;
int v5;
java.lang.Object v8;
java.lang.String v10;
boolean v2, v7, v9;
v0 := @this: io.vertx.core.spi.cluster.impl.selector.Selectors;
v1 := @parameter0: java.util.List;
if v1 == null goto label1;
v2 = interfaceinvoke v1.<java.util.List: boolean isEmpty()>();
if v2 == 0 goto label2;
label1:
v3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v3;
label2:
v4 = new java.util.ArrayList;
v5 = interfaceinvoke v1.<java.util.List: int size()>();
specialinvoke v4.<java.util.ArrayList: void <init>(int)>(v5);
v6 = interfaceinvoke v1.<java.util.List: java.util.Iterator iterator()>();
label3:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label4;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = specialinvoke v0.<io.vertx.core.spi.cluster.impl.selector.Selectors: boolean isAccessible(io.vertx.core.spi.cluster.RegistrationInfo)>(v8);
if v9 == 0 goto label3;
v10 = virtualinvoke v8.<io.vertx.core.spi.cluster.RegistrationInfo: java.lang.String nodeId()>();
virtualinvoke v4.<java.util.ArrayList: boolean add(java.lang.Object)>(v10);
goto label3;
label4:
virtualinvoke v4.<java.util.ArrayList: void trimToSize()>();
return v4;
}
private boolean isAccessible(io.vertx.core.spi.cluster.RegistrationInfo)
{
io.vertx.core.spi.cluster.impl.selector.Selectors v0;
io.vertx.core.spi.cluster.ClusterManager v3;
io.vertx.core.spi.cluster.RegistrationInfo v1;
java.lang.String v4, v5;
boolean v2, v6, v7;
v0 := @this: io.vertx.core.spi.cluster.impl.selector.Selectors;
v1 := @parameter0: io.vertx.core.spi.cluster.RegistrationInfo;
v2 = virtualinvoke v1.<io.vertx.core.spi.cluster.RegistrationInfo: boolean localOnly()>();
if v2 == 0 goto label1;
v3 = v0.<io.vertx.core.spi.cluster.impl.selector.Selectors: io.vertx.core.spi.cluster.ClusterManager clusterManager>;
v4 = interfaceinvoke v3.<io.vertx.core.spi.cluster.ClusterManager: java.lang.String getNodeId()>();
v5 = virtualinvoke v1.<io.vertx.core.spi.cluster.RegistrationInfo: java.lang.String nodeId()>();
v6 = virtualinvoke v4.<java.lang.String: boolean equals(java.lang.Object)>(v5);
if v6 == 0 goto label2;
label1:
v7 = 1;
goto label3;
label2:
v7 = 0;
label3:
return v7;
}
public void dataLost()
{
io.vertx.core.spi.cluster.impl.selector.Selectors v0;
java.util.Iterator v3;
io.vertx.core.Promise v9;
java.util.Set v2;
java.util.concurrent.ConcurrentMap v1, v6;
java.lang.Object v5, v7;
io.vertx.core.spi.cluster.impl.selector.NullRoundRobinSelector v10;
boolean v4, v8;
v0 := @this: io.vertx.core.spi.cluster.impl.selector.Selectors;
v1 = v0.<io.vertx.core.spi.cluster.impl.selector.Selectors: java.util.concurrent.ConcurrentMap map>;
v2 = interfaceinvoke v1.<java.util.concurrent.ConcurrentMap: java.util.Set keySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = v0.<io.vertx.core.spi.cluster.impl.selector.Selectors: java.util.concurrent.ConcurrentMap map>;
v7 = interfaceinvoke v6.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(v5);
v8 = virtualinvoke v7.<io.vertx.core.spi.cluster.impl.selector.SelectorEntry: boolean isNotReady()>();
if v8 == 0 goto label1;
v9 = v7.<io.vertx.core.spi.cluster.impl.selector.SelectorEntry: io.vertx.core.Promise selectorPromise>;
v10 = <io.vertx.core.spi.cluster.impl.selector.NullRoundRobinSelector: io.vertx.core.spi.cluster.impl.selector.NullRoundRobinSelector INSTANCE>;
interfaceinvoke v9.<io.vertx.core.Promise: void complete(java.lang.Object)>(v10);
goto label1;
label2:
return;
}
public boolean hasEntryFor(java.lang.String)
{
io.vertx.core.spi.cluster.impl.selector.Selectors v0;
java.lang.String v1;
boolean v3;
java.util.concurrent.ConcurrentMap v2;
v0 := @this: io.vertx.core.spi.cluster.impl.selector.Selectors;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.spi.cluster.impl.selector.Selectors: java.util.concurrent.ConcurrentMap map>;
v3 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(v1);
return v3;
}
}