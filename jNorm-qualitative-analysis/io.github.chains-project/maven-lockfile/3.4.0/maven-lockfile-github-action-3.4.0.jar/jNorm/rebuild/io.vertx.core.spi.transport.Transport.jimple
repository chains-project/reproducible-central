public interface  io.vertx.core.spi.transport.Transport extends java.lang.Object
{
public static final int ACCEPTOR_EVENT_LOOP_GROUP;
public static final int IO_EVENT_LOOP_GROUP;
public boolean supportsDomainSockets()
{
io.vertx.core.spi.transport.Transport v0;
v0 := @this: io.vertx.core.spi.transport.Transport;
return 0;
}
public boolean supportFileRegion()
{
io.vertx.core.spi.transport.Transport v0;
v0 := @this: io.vertx.core.spi.transport.Transport;
return 1;
}
public boolean isAvailable()
{
io.vertx.core.spi.transport.Transport v0;
v0 := @this: io.vertx.core.spi.transport.Transport;
return 1;
}
public java.lang.Throwable unavailabilityCause()
{
io.vertx.core.spi.transport.Transport v0;
v0 := @this: io.vertx.core.spi.transport.Transport;
return null;
}
public java.net.SocketAddress convert(io.vertx.core.net.SocketAddress)
{
java.lang.IllegalArgumentException v3;
java.net.InetSocketAddress v5, v9;
io.vertx.core.spi.transport.Transport v0;
java.net.InetAddress v4;
int v6, v8;
java.lang.String v7;
boolean v2;
io.vertx.core.net.SocketAddress v1;
v0 := @this: io.vertx.core.spi.transport.Transport;
v1 := @parameter0: io.vertx.core.net.SocketAddress;
v2 = interfaceinvoke v1.<io.vertx.core.net.SocketAddress: boolean isDomainSocket()>();
if v2 == 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Domain socket are not supported by JDK transport, you need to use native transport to use them");
throw v3;
label1:
v4 = virtualinvoke v1.<io.vertx.core.net.impl.SocketAddressImpl: java.net.InetAddress ipAddress()>();
if v4 == null goto label2;
v5 = new java.net.InetSocketAddress;
v6 = interfaceinvoke v1.<io.vertx.core.net.SocketAddress: int port()>();
specialinvoke v5.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(v4, v6);
return v5;
label2:
v7 = interfaceinvoke v1.<io.vertx.core.net.SocketAddress: java.lang.String host()>();
v8 = interfaceinvoke v1.<io.vertx.core.net.SocketAddress: int port()>();
v9 = staticinvoke <java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>(v7, v8);
return v9;
}
public io.vertx.core.net.SocketAddress convert(java.net.SocketAddress)
{
java.net.SocketAddress v1;
io.vertx.core.spi.transport.Transport v0;
boolean v2;
io.vertx.core.net.SocketAddress v3;
v0 := @this: io.vertx.core.spi.transport.Transport;
v1 := @parameter0: java.net.SocketAddress;
v2 = v1 instanceof java.net.InetSocketAddress;
if v2 == 0 goto label1;
v3 = staticinvoke <io.vertx.core.net.SocketAddress: io.vertx.core.net.SocketAddress inetSocketAddress(java.net.InetSocketAddress)>(v1);
return v3;
label1:
return null;
}
public abstract io.netty.channel.EventLoopGroup eventLoopGroup(int, int, java.util.concurrent.ThreadFactory, int);
public abstract io.netty.channel.socket.DatagramChannel datagramChannel();
public abstract io.netty.channel.socket.DatagramChannel datagramChannel(io.netty.channel.socket.InternetProtocolFamily);
public abstract io.netty.channel.ChannelFactory channelFactory(boolean);
public abstract io.netty.channel.ChannelFactory serverChannelFactory(boolean);
public void configure(io.netty.channel.socket.DatagramChannel, io.vertx.core.datagram.DatagramSocketOptions)
{
io.netty.channel.socket.DatagramChannel v1;
io.vertx.core.datagram.DatagramSocketOptions v2;
boolean v18, v25, v26, v28;
java.net.NetworkInterface v36;
io.vertx.core.buffer.impl.PartialPooledByteBufAllocator v4;
io.netty.channel.ChannelOption v17;
io.vertx.core.spi.transport.Transport v0;
java.net.SocketException v37;
io.netty.channel.FixedRecvByteBufAllocator v14;
io.netty.channel.socket.DatagramChannelConfig v11, v13, v16, v22, v24, v27, v3, v31, v34, v7;
int v10, v12, v15, v20, v21, v23, v29, v30, v32, v5, v6, v8, v9;
java.lang.Boolean v19;
java.lang.String v33, v35, v39, v40;
java.lang.IllegalArgumentException v38;
v0 := @this: io.vertx.core.spi.transport.Transport;
v1 := @parameter0: io.netty.channel.socket.DatagramChannel;
v2 := @parameter1: io.vertx.core.datagram.DatagramSocketOptions;
v3 = interfaceinvoke v1.<io.netty.channel.socket.DatagramChannel: io.netty.channel.socket.DatagramChannelConfig config()>();
v4 = <io.vertx.core.buffer.impl.PartialPooledByteBufAllocator: io.vertx.core.buffer.impl.PartialPooledByteBufAllocator INSTANCE>;
interfaceinvoke v3.<io.netty.channel.socket.DatagramChannelConfig: io.netty.channel.socket.DatagramChannelConfig setAllocator(io.netty.buffer.ByteBufAllocator)>(v4);
v5 = virtualinvoke v2.<io.vertx.core.datagram.DatagramSocketOptions: int getSendBufferSize()>();
v6 = (int) -1;
if v5 == v6 goto label1;
v7 = interfaceinvoke v1.<io.netty.channel.socket.DatagramChannel: io.netty.channel.socket.DatagramChannelConfig config()>();
v8 = virtualinvoke v2.<io.vertx.core.datagram.DatagramSocketOptions: int getSendBufferSize()>();
interfaceinvoke v7.<io.netty.channel.socket.DatagramChannelConfig: io.netty.channel.socket.DatagramChannelConfig setSendBufferSize(int)>(v8);
label1:
v9 = virtualinvoke v2.<io.vertx.core.datagram.DatagramSocketOptions: int getReceiveBufferSize()>();
v10 = (int) -1;
if v9 == v10 goto label2;
v11 = interfaceinvoke v1.<io.netty.channel.socket.DatagramChannel: io.netty.channel.socket.DatagramChannelConfig config()>();
v12 = virtualinvoke v2.<io.vertx.core.datagram.DatagramSocketOptions: int getReceiveBufferSize()>();
interfaceinvoke v11.<io.netty.channel.socket.DatagramChannelConfig: io.netty.channel.socket.DatagramChannelConfig setReceiveBufferSize(int)>(v12);
v13 = interfaceinvoke v1.<io.netty.channel.socket.DatagramChannel: io.netty.channel.socket.DatagramChannelConfig config()>();
v14 = new io.netty.channel.FixedRecvByteBufAllocator;
v15 = virtualinvoke v2.<io.vertx.core.datagram.DatagramSocketOptions: int getReceiveBufferSize()>();
specialinvoke v14.<io.netty.channel.FixedRecvByteBufAllocator: void <init>(int)>(v15);
interfaceinvoke v13.<io.netty.channel.socket.DatagramChannelConfig: io.netty.channel.socket.DatagramChannelConfig setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator)>(v14);
label2:
v16 = interfaceinvoke v1.<io.netty.channel.socket.DatagramChannel: io.netty.channel.socket.DatagramChannelConfig config()>();
v17 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_REUSEADDR>;
v18 = virtualinvoke v2.<io.vertx.core.datagram.DatagramSocketOptions: boolean isReuseAddress()>();
v19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v18);
interfaceinvoke v16.<io.netty.channel.socket.DatagramChannelConfig: boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)>(v17, v19);
v20 = virtualinvoke v2.<io.vertx.core.datagram.DatagramSocketOptions: int getTrafficClass()>();
v21 = (int) -1;
if v20 == v21 goto label3;
v22 = interfaceinvoke v1.<io.netty.channel.socket.DatagramChannel: io.netty.channel.socket.DatagramChannelConfig config()>();
v23 = virtualinvoke v2.<io.vertx.core.datagram.DatagramSocketOptions: int getTrafficClass()>();
interfaceinvoke v22.<io.netty.channel.socket.DatagramChannelConfig: io.netty.channel.socket.DatagramChannelConfig setTrafficClass(int)>(v23);
label3:
v24 = interfaceinvoke v1.<io.netty.channel.socket.DatagramChannel: io.netty.channel.socket.DatagramChannelConfig config()>();
v25 = virtualinvoke v2.<io.vertx.core.datagram.DatagramSocketOptions: boolean isBroadcast()>();
interfaceinvoke v24.<io.netty.channel.socket.DatagramChannelConfig: io.netty.channel.socket.DatagramChannelConfig setBroadcast(boolean)>(v25);
v26 = v0 instanceof io.vertx.core.impl.transports.JDKTransport;
if v26 == 0 goto label8;
v27 = interfaceinvoke v1.<io.netty.channel.socket.DatagramChannel: io.netty.channel.socket.DatagramChannelConfig config()>();
v28 = virtualinvoke v2.<io.vertx.core.datagram.DatagramSocketOptions: boolean isLoopbackModeDisabled()>();
interfaceinvoke v27.<io.netty.channel.socket.DatagramChannelConfig: io.netty.channel.socket.DatagramChannelConfig setLoopbackModeDisabled(boolean)>(v28);
v29 = virtualinvoke v2.<io.vertx.core.datagram.DatagramSocketOptions: int getMulticastTimeToLive()>();
v30 = (int) -1;
if v29 == v30 goto label4;
v31 = interfaceinvoke v1.<io.netty.channel.socket.DatagramChannel: io.netty.channel.socket.DatagramChannelConfig config()>();
v32 = virtualinvoke v2.<io.vertx.core.datagram.DatagramSocketOptions: int getMulticastTimeToLive()>();
interfaceinvoke v31.<io.netty.channel.socket.DatagramChannelConfig: io.netty.channel.socket.DatagramChannelConfig setTimeToLive(int)>(v32);
label4:
v33 = virtualinvoke v2.<io.vertx.core.datagram.DatagramSocketOptions: java.lang.String getMulticastNetworkInterface()>();
if v33 == null goto label8;
label5:
v34 = interfaceinvoke v1.<io.netty.channel.socket.DatagramChannel: io.netty.channel.socket.DatagramChannelConfig config()>();
v35 = virtualinvoke v2.<io.vertx.core.datagram.DatagramSocketOptions: java.lang.String getMulticastNetworkInterface()>();
v36 = staticinvoke <java.net.NetworkInterface: java.net.NetworkInterface getByName(java.lang.String)>(v35);
interfaceinvoke v34.<io.netty.channel.socket.DatagramChannelConfig: io.netty.channel.socket.DatagramChannelConfig setNetworkInterface(java.net.NetworkInterface)>(v36);
label6:
goto label8;
label7:
v37 := @caughtexception;
v38 = new java.lang.IllegalArgumentException;
v39 = virtualinvoke v2.<io.vertx.core.datagram.DatagramSocketOptions: java.lang.String getMulticastNetworkInterface()>();
v40 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v39) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Could not find network interface with name \u0001");
specialinvoke v38.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v40);
throw v38;
label8:
return;
catch java.net.SocketException from label5 to label6 with label7;
}
public void configure(io.vertx.core.net.ClientOptionsBase, boolean, io.netty.bootstrap.Bootstrap)
{
java.lang.Integer v19, v24, v32, v37, v40;
boolean v11, v2, v5, v8;
io.netty.channel.ChannelOption v10, v17, v22, v25, v30, v35, v38, v4, v7;
io.vertx.core.spi.transport.Transport v0;
io.netty.channel.FixedRecvByteBufAllocator v26;
int v15, v16, v18, v20, v21, v23, v27, v28, v29, v31, v33, v34, v36, v39;
java.lang.Boolean v12, v6, v9;
java.lang.String v13, v14;
io.netty.bootstrap.Bootstrap v3;
io.vertx.core.net.ClientOptionsBase v1;
v0 := @this: io.vertx.core.spi.transport.Transport;
v1 := @parameter0: io.vertx.core.net.ClientOptionsBase;
v2 := @parameter1: boolean;
v3 := @parameter2: io.netty.bootstrap.Bootstrap;
if v2 != 0 goto label1;
v4 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_REUSEADDR>;
v5 = virtualinvoke v1.<io.vertx.core.net.ClientOptionsBase: boolean isReuseAddress()>();
v6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v5);
virtualinvoke v3.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.AbstractBootstrap option(io.netty.channel.ChannelOption,java.lang.Object)>(v4, v6);
v7 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption TCP_NODELAY>;
v8 = virtualinvoke v1.<io.vertx.core.net.ClientOptionsBase: boolean isTcpNoDelay()>();
v9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v8);
virtualinvoke v3.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.AbstractBootstrap option(io.netty.channel.ChannelOption,java.lang.Object)>(v7, v9);
v10 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_KEEPALIVE>;
v11 = virtualinvoke v1.<io.vertx.core.net.ClientOptionsBase: boolean isTcpKeepAlive()>();
v12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v11);
virtualinvoke v3.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.AbstractBootstrap option(io.netty.channel.ChannelOption,java.lang.Object)>(v10, v12);
label1:
v13 = virtualinvoke v1.<io.vertx.core.net.ClientOptionsBase: java.lang.String getLocalAddress()>();
if v13 == null goto label2;
v14 = virtualinvoke v1.<io.vertx.core.net.ClientOptionsBase: java.lang.String getLocalAddress()>();
virtualinvoke v3.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.AbstractBootstrap localAddress(java.lang.String,int)>(v14, 0);
label2:
v15 = virtualinvoke v1.<io.vertx.core.net.ClientOptionsBase: int getSendBufferSize()>();
v16 = (int) -1;
if v15 == v16 goto label3;
v17 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_SNDBUF>;
v18 = virtualinvoke v1.<io.vertx.core.net.ClientOptionsBase: int getSendBufferSize()>();
v19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v18);
virtualinvoke v3.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.AbstractBootstrap option(io.netty.channel.ChannelOption,java.lang.Object)>(v17, v19);
label3:
v20 = virtualinvoke v1.<io.vertx.core.net.ClientOptionsBase: int getReceiveBufferSize()>();
v21 = (int) -1;
if v20 == v21 goto label4;
v22 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_RCVBUF>;
v23 = virtualinvoke v1.<io.vertx.core.net.ClientOptionsBase: int getReceiveBufferSize()>();
v24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v23);
virtualinvoke v3.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.AbstractBootstrap option(io.netty.channel.ChannelOption,java.lang.Object)>(v22, v24);
v25 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption RCVBUF_ALLOCATOR>;
v26 = new io.netty.channel.FixedRecvByteBufAllocator;
v27 = virtualinvoke v1.<io.vertx.core.net.ClientOptionsBase: int getReceiveBufferSize()>();
specialinvoke v26.<io.netty.channel.FixedRecvByteBufAllocator: void <init>(int)>(v27);
virtualinvoke v3.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.AbstractBootstrap option(io.netty.channel.ChannelOption,java.lang.Object)>(v25, v26);
label4:
v28 = virtualinvoke v1.<io.vertx.core.net.ClientOptionsBase: int getSoLinger()>();
v29 = (int) -1;
if v28 == v29 goto label5;
v30 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_LINGER>;
v31 = virtualinvoke v1.<io.vertx.core.net.ClientOptionsBase: int getSoLinger()>();
v32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v31);
virtualinvoke v3.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.AbstractBootstrap option(io.netty.channel.ChannelOption,java.lang.Object)>(v30, v32);
label5:
v33 = virtualinvoke v1.<io.vertx.core.net.ClientOptionsBase: int getTrafficClass()>();
v34 = (int) -1;
if v33 == v34 goto label6;
v35 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption IP_TOS>;
v36 = virtualinvoke v1.<io.vertx.core.net.ClientOptionsBase: int getTrafficClass()>();
v37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v36);
virtualinvoke v3.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.AbstractBootstrap option(io.netty.channel.ChannelOption,java.lang.Object)>(v35, v37);
label6:
v38 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption CONNECT_TIMEOUT_MILLIS>;
v39 = virtualinvoke v1.<io.vertx.core.net.ClientOptionsBase: int getConnectTimeout()>();
v40 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v39);
virtualinvoke v3.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.AbstractBootstrap option(io.netty.channel.ChannelOption,java.lang.Object)>(v38, v40);
return;
}
public void configure(io.vertx.core.net.NetServerOptions, boolean, io.netty.bootstrap.ServerBootstrap)
{
java.lang.Integer v17, v22, v30, v35, v40;
boolean v11, v2, v5, v8;
io.vertx.core.net.NetServerOptions v1;
io.netty.channel.ChannelOption v10, v15, v20, v23, v28, v33, v38, v4, v7;
io.vertx.core.spi.transport.Transport v0;
io.netty.channel.FixedRecvByteBufAllocator v24;
int v13, v14, v16, v18, v19, v21, v25, v26, v27, v29, v31, v32, v34, v36, v37, v39;
java.lang.Boolean v12, v6, v9;
io.netty.bootstrap.ServerBootstrap v3;
v0 := @this: io.vertx.core.spi.transport.Transport;
v1 := @parameter0: io.vertx.core.net.NetServerOptions;
v2 := @parameter1: boolean;
v3 := @parameter2: io.netty.bootstrap.ServerBootstrap;
v4 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_REUSEADDR>;
v5 = virtualinvoke v1.<io.vertx.core.net.NetServerOptions: boolean isReuseAddress()>();
v6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v5);
virtualinvoke v3.<io.netty.bootstrap.ServerBootstrap: io.netty.bootstrap.AbstractBootstrap option(io.netty.channel.ChannelOption,java.lang.Object)>(v4, v6);
if v2 != 0 goto label1;
v7 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_KEEPALIVE>;
v8 = virtualinvoke v1.<io.vertx.core.net.NetServerOptions: boolean isTcpKeepAlive()>();
v9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v8);
virtualinvoke v3.<io.netty.bootstrap.ServerBootstrap: io.netty.bootstrap.ServerBootstrap childOption(io.netty.channel.ChannelOption,java.lang.Object)>(v7, v9);
v10 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption TCP_NODELAY>;
v11 = virtualinvoke v1.<io.vertx.core.net.NetServerOptions: boolean isTcpNoDelay()>();
v12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v11);
virtualinvoke v3.<io.netty.bootstrap.ServerBootstrap: io.netty.bootstrap.ServerBootstrap childOption(io.netty.channel.ChannelOption,java.lang.Object)>(v10, v12);
label1:
v13 = virtualinvoke v1.<io.vertx.core.net.NetServerOptions: int getSendBufferSize()>();
v14 = (int) -1;
if v13 == v14 goto label2;
v15 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_SNDBUF>;
v16 = virtualinvoke v1.<io.vertx.core.net.NetServerOptions: int getSendBufferSize()>();
v17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v16);
virtualinvoke v3.<io.netty.bootstrap.ServerBootstrap: io.netty.bootstrap.ServerBootstrap childOption(io.netty.channel.ChannelOption,java.lang.Object)>(v15, v17);
label2:
v18 = virtualinvoke v1.<io.vertx.core.net.NetServerOptions: int getReceiveBufferSize()>();
v19 = (int) -1;
if v18 == v19 goto label3;
v20 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_RCVBUF>;
v21 = virtualinvoke v1.<io.vertx.core.net.NetServerOptions: int getReceiveBufferSize()>();
v22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v21);
virtualinvoke v3.<io.netty.bootstrap.ServerBootstrap: io.netty.bootstrap.ServerBootstrap childOption(io.netty.channel.ChannelOption,java.lang.Object)>(v20, v22);
v23 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption RCVBUF_ALLOCATOR>;
v24 = new io.netty.channel.FixedRecvByteBufAllocator;
v25 = virtualinvoke v1.<io.vertx.core.net.NetServerOptions: int getReceiveBufferSize()>();
specialinvoke v24.<io.netty.channel.FixedRecvByteBufAllocator: void <init>(int)>(v25);
virtualinvoke v3.<io.netty.bootstrap.ServerBootstrap: io.netty.bootstrap.ServerBootstrap childOption(io.netty.channel.ChannelOption,java.lang.Object)>(v23, v24);
label3:
v26 = virtualinvoke v1.<io.vertx.core.net.NetServerOptions: int getSoLinger()>();
v27 = (int) -1;
if v26 == v27 goto label4;
v28 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_LINGER>;
v29 = virtualinvoke v1.<io.vertx.core.net.NetServerOptions: int getSoLinger()>();
v30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v29);
virtualinvoke v3.<io.netty.bootstrap.ServerBootstrap: io.netty.bootstrap.ServerBootstrap childOption(io.netty.channel.ChannelOption,java.lang.Object)>(v28, v30);
label4:
v31 = virtualinvoke v1.<io.vertx.core.net.NetServerOptions: int getTrafficClass()>();
v32 = (int) -1;
if v31 == v32 goto label5;
v33 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption IP_TOS>;
v34 = virtualinvoke v1.<io.vertx.core.net.NetServerOptions: int getTrafficClass()>();
v35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v34);
virtualinvoke v3.<io.netty.bootstrap.ServerBootstrap: io.netty.bootstrap.ServerBootstrap childOption(io.netty.channel.ChannelOption,java.lang.Object)>(v33, v35);
label5:
v36 = virtualinvoke v1.<io.vertx.core.net.NetServerOptions: int getAcceptBacklog()>();
v37 = (int) -1;
if v36 == v37 goto label6;
v38 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_BACKLOG>;
v39 = virtualinvoke v1.<io.vertx.core.net.NetServerOptions: int getAcceptBacklog()>();
v40 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v39);
virtualinvoke v3.<io.netty.bootstrap.ServerBootstrap: io.netty.bootstrap.AbstractBootstrap option(io.netty.channel.ChannelOption,java.lang.Object)>(v38, v40);
label6:
return;
}
}