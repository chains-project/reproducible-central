public interface  io.vertx.core.streams.ReadStream extends java.lang.Object implements io.vertx.core.streams.StreamBase
{
public abstract io.vertx.core.streams.ReadStream exceptionHandler(io.vertx.core.Handler);
public abstract io.vertx.core.streams.ReadStream handler(io.vertx.core.Handler);
public abstract io.vertx.core.streams.ReadStream pause();
public abstract io.vertx.core.streams.ReadStream resume();
public abstract io.vertx.core.streams.ReadStream fetch(long);
public abstract io.vertx.core.streams.ReadStream endHandler(io.vertx.core.Handler);
public io.vertx.core.streams.Pipe pipe()
{
io.vertx.core.streams.ReadStream v0;
io.vertx.core.streams.impl.PipeImpl v1;
v0 := @this: io.vertx.core.streams.ReadStream;
interfaceinvoke v0.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>();
v1 = new io.vertx.core.streams.impl.PipeImpl;
specialinvoke v1.<io.vertx.core.streams.impl.PipeImpl: void <init>(io.vertx.core.streams.ReadStream)>(v0);
return v1;
}
public io.vertx.core.Future pipeTo(io.vertx.core.streams.WriteStream)
{
io.vertx.core.streams.impl.PipeImpl v3;
io.vertx.core.streams.WriteStream v1;
io.vertx.core.Promise v2;
io.vertx.core.streams.ReadStream v0;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.streams.ReadStream;
v1 := @parameter0: io.vertx.core.streams.WriteStream;
v2 = staticinvoke <io.vertx.core.Promise: io.vertx.core.Promise promise()>();
v3 = new io.vertx.core.streams.impl.PipeImpl;
specialinvoke v3.<io.vertx.core.streams.impl.PipeImpl: void <init>(io.vertx.core.streams.ReadStream)>(v0);
virtualinvoke v3.<io.vertx.core.streams.impl.PipeImpl: void 'to'(io.vertx.core.streams.WriteStream,io.vertx.core.Handler)>(v1, v2);
v4 = interfaceinvoke v2.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v4;
}
public void pipeTo(io.vertx.core.streams.WriteStream, io.vertx.core.Handler)
{
io.vertx.core.streams.impl.PipeImpl v3;
io.vertx.core.streams.WriteStream v1;
io.vertx.core.streams.ReadStream v0;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.streams.ReadStream;
v1 := @parameter0: io.vertx.core.streams.WriteStream;
v2 := @parameter1: io.vertx.core.Handler;
v3 = new io.vertx.core.streams.impl.PipeImpl;
specialinvoke v3.<io.vertx.core.streams.impl.PipeImpl: void <init>(io.vertx.core.streams.ReadStream)>(v0);
virtualinvoke v3.<io.vertx.core.streams.impl.PipeImpl: void 'to'(io.vertx.core.streams.WriteStream,io.vertx.core.Handler)>(v1, v2);
return;
}
}