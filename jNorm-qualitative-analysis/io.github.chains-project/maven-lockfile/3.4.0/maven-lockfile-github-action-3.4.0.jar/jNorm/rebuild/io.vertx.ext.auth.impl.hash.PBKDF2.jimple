public class io.vertx.ext.auth.impl.hash.PBKDF2 extends java.lang.Object implements io.vertx.ext.auth.HashingAlgorithm
{
private static final int DEFAULT_ITERATIONS;
private static final java.util.Set DEFAULT_CONFIG;
private final javax.crypto.SecretKeyFactory skf;
public void <init>()
{
javax.crypto.SecretKeyFactory v1;
java.security.NoSuchAlgorithmException v2;
java.lang.RuntimeException v3;
io.vertx.ext.auth.impl.hash.PBKDF2 v0;
v0 := @this: io.vertx.ext.auth.impl.hash.PBKDF2;
specialinvoke v0.<java.lang.Object: void <init>()>();
label1:
v1 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>("PBKDF2WithHmacSHA512");
v0.<io.vertx.ext.auth.impl.hash.PBKDF2: javax.crypto.SecretKeyFactory skf> = v1;
label2:
goto label4;
label3:
v2 := @caughtexception;
v3 = new java.lang.RuntimeException;
specialinvoke v3.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("PBKDF2 is not available", v2);
throw v3;
label4:
return;
catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
}
public java.lang.String id()
{
io.vertx.ext.auth.impl.hash.PBKDF2 v0;
v0 := @this: io.vertx.ext.auth.impl.hash.PBKDF2;
return "pbkdf2";
}
public java.util.Set params()
{
java.util.Set v1;
io.vertx.ext.auth.impl.hash.PBKDF2 v0;
v0 := @this: io.vertx.ext.auth.impl.hash.PBKDF2;
v1 = <io.vertx.ext.auth.impl.hash.PBKDF2: java.util.Set DEFAULT_CONFIG>;
return v1;
}
public java.lang.String hash(io.vertx.ext.auth.HashString, java.lang.String)
{
byte[] v11, v16;
java.security.spec.InvalidKeySpecException v18;
javax.crypto.SecretKeyFactory v14;
javax.crypto.spec.PBEKeySpec v12;
java.util.Map v3, v4;
int v6;
java.lang.String v10, v17, v2, v8;
java.lang.RuntimeException v19, v7, v9;
io.vertx.ext.auth.HashString v1;
char[] v13;
java.lang.Object v5;
javax.crypto.SecretKey v15;
io.vertx.ext.auth.impl.hash.PBKDF2 v0;
v0 := @this: io.vertx.ext.auth.impl.hash.PBKDF2;
v1 := @parameter0: io.vertx.ext.auth.HashString;
v2 := @parameter1: java.lang.String;
label1:
v3 = virtualinvoke v1.<io.vertx.ext.auth.HashString: java.util.Map params()>();
if v3 == null goto label2;
v4 = virtualinvoke v1.<io.vertx.ext.auth.HashString: java.util.Map params()>();
v5 = interfaceinvoke v4.<java.util.Map: java.lang.Object get(java.lang.Object)>("it");
v6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v5);
goto label5;
label2:
v6 = 10000;
label3:
goto label5;
label4:
v7 := @caughtexception;
v6 = 10000;
label5:
v8 = virtualinvoke v1.<io.vertx.ext.auth.HashString: java.lang.String salt()>();
if v8 != null goto label6;
v9 = new java.lang.RuntimeException;
specialinvoke v9.<java.lang.RuntimeException: void <init>(java.lang.String)>("hashString salt is null");
throw v9;
label6:
v10 = virtualinvoke v1.<io.vertx.ext.auth.HashString: java.lang.String salt()>();
v11 = staticinvoke <io.vertx.ext.auth.impl.Codec: byte[] base64Decode(java.lang.String)>(v10);
v12 = new javax.crypto.spec.PBEKeySpec;
v13 = virtualinvoke v2.<java.lang.String: char[] toCharArray()>();
specialinvoke v12.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>(v13, v11, v6, 512);
label7:
v14 = v0.<io.vertx.ext.auth.impl.hash.PBKDF2: javax.crypto.SecretKeyFactory skf>;
v15 = virtualinvoke v14.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(v12);
v16 = interfaceinvoke v15.<javax.crypto.SecretKey: byte[] getEncoded()>();
v17 = staticinvoke <io.vertx.ext.auth.impl.Codec: java.lang.String base64EncodeWithoutPadding(byte[])>(v16);
label8:
return v17;
label9:
v18 := @caughtexception;
v19 = new java.lang.RuntimeException;
specialinvoke v19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(v18);
throw v19;
catch java.lang.RuntimeException from label1 to label3 with label4;
catch java.security.spec.InvalidKeySpecException from label7 to label8 with label9;
}
static void <clinit>()
{
java.util.Set v0;
v0 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>("it");
<io.vertx.ext.auth.impl.hash.PBKDF2: java.util.Set DEFAULT_CONFIG> = v0;
return;
}
}