public class io.vertx.ext.web.client.impl.cache.Vary extends java.lang.Object
{
private final io.vertx.core.MultiMap requestHeaders;
private final io.vertx.core.MultiMap responseHeaders;
private final java.util.Set variations;
public void <init>(io.vertx.core.MultiMap, io.vertx.core.MultiMap)
{
io.vertx.ext.web.client.impl.cache.Vary v0;
io.vertx.core.MultiMap v1, v2;
java.util.Set v3;
v0 := @this: io.vertx.ext.web.client.impl.cache.Vary;
v1 := @parameter0: io.vertx.core.MultiMap;
v2 := @parameter1: io.vertx.core.MultiMap;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.ext.web.client.impl.cache.Vary: io.vertx.core.MultiMap requestHeaders> = v1;
v0.<io.vertx.ext.web.client.impl.cache.Vary: io.vertx.core.MultiMap responseHeaders> = v2;
v3 = specialinvoke v0.<io.vertx.ext.web.client.impl.cache.Vary: java.util.Set parseHeaders(io.vertx.core.MultiMap)>(v2);
v0.<io.vertx.ext.web.client.impl.cache.Vary: java.util.Set variations> = v3;
return;
}
public boolean matchesRequest(io.vertx.core.http.RequestOptions)
{
io.vertx.ext.web.client.impl.cache.Vary v0;
java.util.stream.Stream v3;
java.util.function.Predicate v4;
java.util.Set v2;
io.vertx.core.http.RequestOptions v1;
boolean v5;
v0 := @this: io.vertx.ext.web.client.impl.cache.Vary;
v1 := @parameter0: io.vertx.core.http.RequestOptions;
v2 = v0.<io.vertx.ext.web.client.impl.cache.Vary: java.util.Set variations>;
v3 = interfaceinvoke v2.<java.util.Set: java.util.stream.Stream stream()>();
v4 = staticinvoke <io.vertx.ext.web.client.impl.cache.Vary$lambda_matchesRequest_0__848: java.util.function.Predicate bootstrap$(io.vertx.ext.web.client.impl.cache.Vary,io.vertx.core.http.RequestOptions)>(v0, v1);
v5 = interfaceinvoke v3.<java.util.stream.Stream: boolean allMatch(java.util.function.Predicate)>(v4);
return v5;
}
public java.lang.String toString()
{
java.util.Iterator v5;
io.vertx.core.MultiMap v8;
java.util.Set v10, v2, v4;
java.util.ArrayList v1;
java.util.List v9;
io.vertx.ext.web.client.impl.cache.Vary v0;
java.util.stream.Stream v11, v12;
int v3;
java.lang.Object v14, v7;
java.util.stream.Collector v13;
boolean v6;
v0 := @this: io.vertx.ext.web.client.impl.cache.Vary;
v1 = new java.util.ArrayList;
v2 = v0.<io.vertx.ext.web.client.impl.cache.Vary: java.util.Set variations>;
v3 = interfaceinvoke v2.<java.util.Set: int size()>();
specialinvoke v1.<java.util.ArrayList: void <init>(int)>(v3);
v4 = v0.<io.vertx.ext.web.client.impl.cache.Vary: java.util.Set variations>;
v5 = interfaceinvoke v4.<java.util.Set: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label2;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = v0.<io.vertx.ext.web.client.impl.cache.Vary: io.vertx.core.MultiMap requestHeaders>;
v9 = interfaceinvoke v8.<io.vertx.core.MultiMap: java.util.List getAll(java.lang.CharSequence)>(v7);
v10 = specialinvoke v0.<io.vertx.ext.web.client.impl.cache.Vary: java.util.Set normalizeValues(java.util.List)>(v9);
interfaceinvoke v1.<java.util.List: boolean addAll(java.util.Collection)>(v10);
goto label1;
label2:
v11 = interfaceinvoke v1.<java.util.List: java.util.stream.Stream stream()>();
v12 = interfaceinvoke v11.<java.util.stream.Stream: java.util.stream.Stream sorted()>();
v13 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>(",");
v14 = interfaceinvoke v12.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v13);
return v14;
}
private boolean variationMatches(java.lang.CharSequence, io.vertx.core.http.RequestOptions)
{
java.lang.CharSequence v1, v3, v6;
io.vertx.core.http.RequestOptions v2;
io.vertx.ext.web.client.impl.cache.Vary v0;
boolean v4, v5, v7, v8;
v0 := @this: io.vertx.ext.web.client.impl.cache.Vary;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: io.vertx.core.http.RequestOptions;
v3 = <io.vertx.core.http.HttpHeaders: java.lang.CharSequence USER_AGENT>;
v4 = virtualinvoke v3.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v4 == 0 goto label1;
v5 = specialinvoke v0.<io.vertx.ext.web.client.impl.cache.Vary: boolean isUserAgentMatch(io.vertx.core.http.RequestOptions)>(v2);
return v5;
label1:
v6 = <io.vertx.core.http.HttpHeaders: java.lang.CharSequence ACCEPT_ENCODING>;
v7 = virtualinvoke v6.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v7 == 0 goto label2;
return 1;
label2:
v8 = specialinvoke v0.<io.vertx.ext.web.client.impl.cache.Vary: boolean isExactMatch(java.lang.CharSequence,io.vertx.core.http.RequestOptions)>(v1, v2);
return v8;
}
private boolean isUserAgentMatch(io.vertx.core.http.RequestOptions)
{
io.vertx.ext.web.client.impl.cache.UserAgent v3, v5;
io.vertx.ext.web.client.impl.cache.Vary v0;
io.vertx.core.MultiMap v2, v4;
io.vertx.core.http.RequestOptions v1;
boolean v6;
v0 := @this: io.vertx.ext.web.client.impl.cache.Vary;
v1 := @parameter0: io.vertx.core.http.RequestOptions;
v2 = v0.<io.vertx.ext.web.client.impl.cache.Vary: io.vertx.core.MultiMap requestHeaders>;
v3 = staticinvoke <io.vertx.ext.web.client.impl.cache.UserAgent: io.vertx.ext.web.client.impl.cache.UserAgent parse(io.vertx.core.MultiMap)>(v2);
v4 = virtualinvoke v1.<io.vertx.core.http.RequestOptions: io.vertx.core.MultiMap getHeaders()>();
v5 = staticinvoke <io.vertx.ext.web.client.impl.cache.UserAgent: io.vertx.ext.web.client.impl.cache.UserAgent parse(io.vertx.core.MultiMap)>(v4);
v6 = virtualinvoke v3.<io.vertx.ext.web.client.impl.cache.UserAgent: boolean equals(java.lang.Object)>(v5);
return v6;
}
private boolean isExactMatch(java.lang.CharSequence, io.vertx.core.http.RequestOptions)
{
java.lang.CharSequence v1;
io.vertx.core.MultiMap v3, v6;
java.util.Set v5, v8;
io.vertx.core.http.RequestOptions v2;
java.util.List v4, v7;
io.vertx.ext.web.client.impl.cache.Vary v0;
boolean v9;
v0 := @this: io.vertx.ext.web.client.impl.cache.Vary;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: io.vertx.core.http.RequestOptions;
v3 = virtualinvoke v2.<io.vertx.core.http.RequestOptions: io.vertx.core.MultiMap getHeaders()>();
v4 = interfaceinvoke v3.<io.vertx.core.MultiMap: java.util.List getAll(java.lang.CharSequence)>(v1);
v5 = specialinvoke v0.<io.vertx.ext.web.client.impl.cache.Vary: java.util.Set normalizeValues(java.util.List)>(v4);
v6 = v0.<io.vertx.ext.web.client.impl.cache.Vary: io.vertx.core.MultiMap requestHeaders>;
v7 = interfaceinvoke v6.<io.vertx.core.MultiMap: java.util.List getAll(java.lang.CharSequence)>(v1);
v8 = specialinvoke v0.<io.vertx.ext.web.client.impl.cache.Vary: java.util.Set normalizeValues(java.util.List)>(v7);
v9 = interfaceinvoke v5.<java.util.Set: boolean equals(java.lang.Object)>(v8);
return v9;
}
private java.util.Set normalizeValues(java.util.List)
{
java.util.function.Function v3, v5;
java.util.List v1;
io.vertx.ext.web.client.impl.cache.Vary v0;
java.util.stream.Stream v2, v4, v6;
java.lang.Object v8;
java.util.stream.Collector v7;
v0 := @this: io.vertx.ext.web.client.impl.cache.Vary;
v1 := @parameter0: java.util.List;
v2 = interfaceinvoke v1.<java.util.List: java.util.stream.Stream stream()>();
v3 = staticinvoke <io.vertx.ext.web.client.impl.cache.Vary$lambda_normalizeValues_1__849: java.util.function.Function bootstrap$()>();
v4 = interfaceinvoke v2.<java.util.stream.Stream: java.util.stream.Stream flatMap(java.util.function.Function)>(v3);
v5 = staticinvoke <io.vertx.ext.web.client.impl.cache.Vary$lambda_normalizeValues_2__850: java.util.function.Function bootstrap$()>();
v6 = interfaceinvoke v4.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v5);
v7 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toSet()>();
v8 = interfaceinvoke v6.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v7);
return v8;
}
private java.util.Set parseHeaders(io.vertx.core.MultiMap)
{
java.util.HashSet v4;
java.util.function.Consumer v6;
java.util.List v3;
io.vertx.ext.web.client.impl.cache.Vary v0;
java.lang.CharSequence v2;
int v5;
io.vertx.core.MultiMap v1;
v0 := @this: io.vertx.ext.web.client.impl.cache.Vary;
v1 := @parameter0: io.vertx.core.MultiMap;
v2 = <io.vertx.core.http.HttpHeaders: java.lang.CharSequence VARY>;
v3 = interfaceinvoke v1.<io.vertx.core.MultiMap: java.util.List getAll(java.lang.CharSequence)>(v2);
v4 = new java.util.HashSet;
v5 = interfaceinvoke v3.<java.util.List: int size()>();
specialinvoke v4.<java.util.HashSet: void <init>(int)>(v5);
v6 = staticinvoke <io.vertx.ext.web.client.impl.cache.Vary$lambda_parseHeaders_3__851: java.util.function.Consumer bootstrap$(java.util.Set)>(v4);
interfaceinvoke v3.<java.util.List: void forEach(java.util.function.Consumer)>(v6);
return v4;
}
}