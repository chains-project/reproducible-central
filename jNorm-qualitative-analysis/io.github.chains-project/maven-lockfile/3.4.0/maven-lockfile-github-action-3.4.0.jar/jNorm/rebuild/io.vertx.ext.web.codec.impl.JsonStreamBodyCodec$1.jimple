class io.vertx.ext.web.codec.impl.JsonStreamBodyCodec$1 extends java.lang.Object implements io.vertx.core.streams.WriteStream
{
final io.vertx.core.parsetools.JsonParser val$parser;
final io.vertx.ext.web.codec.impl.JsonStreamBodyCodec this$0;
void <init>(io.vertx.ext.web.codec.impl.JsonStreamBodyCodec, io.vertx.core.parsetools.JsonParser)
{
io.vertx.core.parsetools.JsonParser v2;
io.vertx.ext.web.codec.impl.JsonStreamBodyCodec$1 v0;
io.vertx.ext.web.codec.impl.JsonStreamBodyCodec v1;
v0 := @this: io.vertx.ext.web.codec.impl.JsonStreamBodyCodec$1;
v1 := @parameter0: io.vertx.ext.web.codec.impl.JsonStreamBodyCodec;
v2 := @parameter1: io.vertx.core.parsetools.JsonParser;
v0.<io.vertx.ext.web.codec.impl.JsonStreamBodyCodec$1: io.vertx.ext.web.codec.impl.JsonStreamBodyCodec this$0> = v1;
v0.<io.vertx.ext.web.codec.impl.JsonStreamBodyCodec$1: io.vertx.core.parsetools.JsonParser val$parser> = v2;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public io.vertx.core.streams.WriteStream exceptionHandler(io.vertx.core.Handler)
{
io.vertx.core.parsetools.JsonParser v2;
io.vertx.ext.web.codec.impl.JsonStreamBodyCodec$1 v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.ext.web.codec.impl.JsonStreamBodyCodec$1;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.ext.web.codec.impl.JsonStreamBodyCodec$1: io.vertx.core.parsetools.JsonParser val$parser>;
interfaceinvoke v2.<io.vertx.core.parsetools.JsonParser: io.vertx.core.parsetools.JsonParser exceptionHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.core.Future write(io.vertx.core.buffer.Buffer)
{
io.vertx.core.buffer.Buffer v1;
io.vertx.core.parsetools.JsonParser v2;
io.vertx.ext.web.codec.impl.JsonStreamBodyCodec$1 v0;
io.vertx.core.Future v3;
v0 := @this: io.vertx.ext.web.codec.impl.JsonStreamBodyCodec$1;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 = v0.<io.vertx.ext.web.codec.impl.JsonStreamBodyCodec$1: io.vertx.core.parsetools.JsonParser val$parser>;
interfaceinvoke v2.<io.vertx.core.parsetools.JsonParser: void handle(java.lang.Object)>(v1);
v3 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>();
return v3;
}
public void write(io.vertx.core.buffer.Buffer, io.vertx.core.Handler)
{
io.vertx.core.buffer.Buffer v1;
io.vertx.core.parsetools.JsonParser v3;
io.vertx.ext.web.codec.impl.JsonStreamBodyCodec$1 v0;
io.vertx.core.Handler v2;
io.vertx.core.Future v4;
v0 := @this: io.vertx.ext.web.codec.impl.JsonStreamBodyCodec$1;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 := @parameter1: io.vertx.core.Handler;
v3 = v0.<io.vertx.ext.web.codec.impl.JsonStreamBodyCodec$1: io.vertx.core.parsetools.JsonParser val$parser>;
interfaceinvoke v3.<io.vertx.core.parsetools.JsonParser: void handle(java.lang.Object)>(v1);
if v2 == null goto label1;
v4 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>();
interfaceinvoke v2.<io.vertx.core.Handler: void handle(java.lang.Object)>(v4);
label1:
return;
}
public void end(io.vertx.core.Handler)
{
io.vertx.core.parsetools.JsonParser v2;
io.vertx.ext.web.codec.impl.JsonStreamBodyCodec$1 v0;
io.vertx.core.Handler v1;
io.vertx.core.Future v3;
v0 := @this: io.vertx.ext.web.codec.impl.JsonStreamBodyCodec$1;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.ext.web.codec.impl.JsonStreamBodyCodec$1: io.vertx.core.parsetools.JsonParser val$parser>;
interfaceinvoke v2.<io.vertx.core.parsetools.JsonParser: void end()>();
if v1 == null goto label1;
v3 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture()>();
interfaceinvoke v1.<io.vertx.core.Handler: void handle(java.lang.Object)>(v3);
label1:
return;
}
public io.vertx.core.streams.WriteStream setWriteQueueMaxSize(int)
{
int v1;
io.vertx.ext.web.codec.impl.JsonStreamBodyCodec$1 v0;
v0 := @this: io.vertx.ext.web.codec.impl.JsonStreamBodyCodec$1;
v1 := @parameter0: int;
return v0;
}
public boolean writeQueueFull()
{
io.vertx.ext.web.codec.impl.JsonStreamBodyCodec$1 v0;
v0 := @this: io.vertx.ext.web.codec.impl.JsonStreamBodyCodec$1;
return 0;
}
public io.vertx.core.streams.WriteStream drainHandler(io.vertx.core.Handler)
{
io.vertx.ext.web.codec.impl.JsonStreamBodyCodec$1 v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.ext.web.codec.impl.JsonStreamBodyCodec$1;
v1 := @parameter0: io.vertx.core.Handler;
return v0;
}
}