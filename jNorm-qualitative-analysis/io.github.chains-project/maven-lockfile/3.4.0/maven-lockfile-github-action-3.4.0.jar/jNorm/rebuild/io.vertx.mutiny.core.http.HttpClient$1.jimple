class io.vertx.mutiny.core.http.HttpClient$1 extends java.lang.Object implements java.util.function.Function
{
final java.util.function.Function val$handler;
final io.vertx.mutiny.core.http.HttpClient this$0;
void <init>(io.vertx.mutiny.core.http.HttpClient, java.util.function.Function)
{
io.vertx.mutiny.core.http.HttpClient$1 v0;
java.util.function.Function v2;
io.vertx.mutiny.core.http.HttpClient v1;
v0 := @this: io.vertx.mutiny.core.http.HttpClient$1;
v1 := @parameter0: io.vertx.mutiny.core.http.HttpClient;
v2 := @parameter1: java.util.function.Function;
v0.<io.vertx.mutiny.core.http.HttpClient$1: io.vertx.mutiny.core.http.HttpClient this$0> = v1;
v0.<io.vertx.mutiny.core.http.HttpClient$1: java.util.function.Function val$handler> = v2;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public io.vertx.core.Future apply(io.vertx.core.http.HttpClientResponse)
{
io.vertx.core.http.HttpClientResponse v1;
io.vertx.mutiny.core.http.HttpClient$1 v0;
io.vertx.mutiny.core.http.HttpClientResponse v3;
java.lang.Object v4;
io.vertx.core.Future v5;
java.util.function.Function v2;
v0 := @this: io.vertx.mutiny.core.http.HttpClient$1;
v1 := @parameter0: io.vertx.core.http.HttpClientResponse;
v2 = v0.<io.vertx.mutiny.core.http.HttpClient$1: java.util.function.Function val$handler>;
v3 = staticinvoke <io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.mutiny.core.http.HttpClientResponse newInstance(io.vertx.core.http.HttpClientResponse)>(v1);
v4 = interfaceinvoke v2.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v3);
v5 = staticinvoke <io.smallrye.mutiny.vertx.UniHelper: io.vertx.core.Future toFuture(io.smallrye.mutiny.Uni)>(v4);
return v5;
}
}