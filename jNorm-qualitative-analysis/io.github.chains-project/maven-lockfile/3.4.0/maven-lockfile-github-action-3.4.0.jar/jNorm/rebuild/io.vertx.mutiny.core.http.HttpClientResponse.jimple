public class io.vertx.mutiny.core.http.HttpClientResponse extends java.lang.Object implements io.vertx.mutiny.core.streams.ReadStream
{
public static final io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG;
private final io.vertx.core.http.HttpClientResponse delegate;
static final io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_0;
private io.vertx.mutiny.core.net.NetSocket cached_0;
private io.vertx.mutiny.core.MultiMap cached_1;
private io.vertx.mutiny.core.MultiMap cached_2;
private java.util.List cached_3;
private io.vertx.mutiny.core.http.HttpClientRequest cached_4;
private io.smallrye.mutiny.Multi multi;
public void <init>(io.vertx.core.http.HttpClientResponse)
{
io.vertx.core.http.HttpClientResponse v1;
io.vertx.mutiny.core.http.HttpClientResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 := @parameter0: io.vertx.core.http.HttpClientResponse;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse delegate> = v1;
return;
}
public void <init>(java.lang.Object)
{
io.vertx.mutiny.core.http.HttpClientResponse v0;
java.lang.Object v1;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 := @parameter0: java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse delegate> = v1;
return;
}
void <init>()
{
io.vertx.mutiny.core.http.HttpClientResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse delegate> = null;
return;
}
public io.vertx.core.http.HttpClientResponse getDelegate()
{
io.vertx.core.http.HttpClientResponse v1;
io.vertx.mutiny.core.http.HttpClientResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse delegate>;
return v1;
}
public java.lang.String toString()
{
io.vertx.core.http.HttpClientResponse v1;
io.vertx.mutiny.core.http.HttpClientResponse v0;
java.lang.String v2;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse delegate>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
return v2;
}
public boolean equals(java.lang.Object)
{
io.vertx.core.http.HttpClientResponse v4, v5;
io.vertx.mutiny.core.http.HttpClientResponse v0;
java.lang.Class v2, v3;
java.lang.Object v1;
boolean v6;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v1 == null goto label2;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v2 == v3 goto label3;
label2:
return 0;
label3:
v4 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse delegate>;
v5 = v1.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse delegate>;
v6 = virtualinvoke v4.<java.lang.Object: boolean equals(java.lang.Object)>(v5);
return v6;
}
public int hashCode()
{
int v2;
io.vertx.core.http.HttpClientResponse v1;
io.vertx.mutiny.core.http.HttpClientResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse delegate>;
v2 = virtualinvoke v1.<java.lang.Object: int hashCode()>();
return v2;
}
public io.vertx.mutiny.core.streams.Pipe pipe()
{
io.vertx.mutiny.core.streams.Pipe v4;
io.vertx.core.http.HttpClientResponse v1;
io.vertx.core.streams.Pipe v2;
io.smallrye.mutiny.vertx.TypeArg v3;
io.vertx.mutiny.core.http.HttpClientResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpClientResponse: io.vertx.core.streams.Pipe pipe()>();
v3 = <io.vertx.mutiny.core.http.HttpClientResponse: io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_0>;
v4 = staticinvoke <io.vertx.mutiny.core.streams.Pipe: io.vertx.mutiny.core.streams.Pipe newInstance(io.vertx.core.streams.Pipe,io.smallrye.mutiny.vertx.TypeArg)>(v2, v3);
return v4;
}
public io.smallrye.mutiny.Uni pipeTo(io.vertx.mutiny.core.streams.WriteStream)
{
io.vertx.mutiny.core.streams.WriteStream v1;
java.util.function.Consumer v2;
io.vertx.mutiny.core.http.HttpClientResponse v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 := @parameter0: io.vertx.mutiny.core.streams.WriteStream;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpClientResponse$lambda_pipeTo_3__1762: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpClientResponse,io.vertx.mutiny.core.streams.WriteStream)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void pipeToAndAwait(io.vertx.mutiny.core.streams.WriteStream)
{
io.vertx.mutiny.core.streams.WriteStream v1;
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.http.HttpClientResponse v0;
java.lang.Object v4;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 := @parameter0: io.vertx.mutiny.core.streams.WriteStream;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.smallrye.mutiny.Uni pipeTo(io.vertx.mutiny.core.streams.WriteStream)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void pipeToAndForget(io.vertx.mutiny.core.streams.WriteStream)
{
io.vertx.mutiny.core.streams.WriteStream v1;
java.util.function.Consumer v4;
io.vertx.mutiny.core.http.HttpClientResponse v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 := @parameter0: io.vertx.mutiny.core.streams.WriteStream;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.smallrye.mutiny.Uni pipeTo(io.vertx.mutiny.core.streams.WriteStream)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public io.vertx.mutiny.core.http.HttpClientResponse fetch(long)
{
io.vertx.core.http.HttpClientResponse v2;
io.vertx.mutiny.core.http.HttpClientResponse v0;
long v1;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 := @parameter0: long;
v2 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse fetch(long)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.HttpClientResponse resume()
{
io.vertx.core.http.HttpClientResponse v1;
io.vertx.mutiny.core.http.HttpClientResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse delegate>;
interfaceinvoke v1.<io.vertx.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse resume()>();
return v0;
}
private io.vertx.mutiny.core.http.HttpClientResponse __exceptionHandler(io.vertx.core.Handler)
{
io.vertx.core.http.HttpClientResponse v2;
io.vertx.mutiny.core.http.HttpClientResponse v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse exceptionHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.HttpClientResponse exceptionHandler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.http.HttpClientResponse v0, v3;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.mutiny.core.http.HttpClientResponse __exceptionHandler(io.vertx.core.Handler)>(v2);
return v3;
}
private io.vertx.mutiny.core.http.HttpClientResponse __handler(io.vertx.core.Handler)
{
io.vertx.core.http.HttpClientResponse v2;
io.smallrye.mutiny.vertx.DelegatingHandler v3;
io.vertx.mutiny.core.http.HttpClientResponse v0;
io.vertx.core.Handler v1;
java.util.function.Function v4;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse delegate>;
v3 = new io.smallrye.mutiny.vertx.DelegatingHandler;
v4 = staticinvoke <io.vertx.mutiny.core.http.HttpClientResponse$lambda___handler_4__1763: java.util.function.Function bootstrap$()>();
specialinvoke v3.<io.smallrye.mutiny.vertx.DelegatingHandler: void <init>(io.vertx.core.Handler,java.util.function.Function)>(v1, v4);
interfaceinvoke v2.<io.vertx.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse handler(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.mutiny.core.http.HttpClientResponse handler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.http.HttpClientResponse v0, v3;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.mutiny.core.http.HttpClientResponse __handler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.vertx.mutiny.core.http.HttpClientResponse pause()
{
io.vertx.core.http.HttpClientResponse v1;
io.vertx.mutiny.core.http.HttpClientResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse delegate>;
interfaceinvoke v1.<io.vertx.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse pause()>();
return v0;
}
private io.vertx.mutiny.core.http.HttpClientResponse __endHandler(io.vertx.core.Handler)
{
io.vertx.core.http.HttpClientResponse v2;
io.vertx.mutiny.core.http.HttpClientResponse v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse endHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.HttpClientResponse endHandler(java.lang.Runnable)
{
io.vertx.mutiny.core.http.HttpClientResponse v0, v3;
io.vertx.core.Handler v2;
java.lang.Runnable v1;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 := @parameter0: java.lang.Runnable;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpClientResponse$lambda_endHandler_5__1764: io.vertx.core.Handler bootstrap$(java.lang.Runnable)>(v1);
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.mutiny.core.http.HttpClientResponse __endHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.vertx.mutiny.core.net.NetSocket netSocket()
{
io.vertx.core.http.HttpClientResponse v3;
io.vertx.mutiny.core.http.HttpClientResponse v0;
io.vertx.mutiny.core.net.NetSocket v1, v2, v5;
io.vertx.core.net.NetSocket v4;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.mutiny.core.net.NetSocket cached_0>;
if v1 == null goto label1;
v2 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.mutiny.core.net.NetSocket cached_0>;
return v2;
label1:
v3 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.http.HttpClientResponse: io.vertx.core.net.NetSocket netSocket()>();
v5 = staticinvoke <io.vertx.mutiny.core.net.NetSocket: io.vertx.mutiny.core.net.NetSocket newInstance(io.vertx.core.net.NetSocket)>(v4);
v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.mutiny.core.net.NetSocket cached_0> = v5;
return v5;
}
public io.vertx.core.http.HttpVersion version()
{
io.vertx.core.http.HttpClientResponse v1;
io.vertx.mutiny.core.http.HttpClientResponse v0;
io.vertx.core.http.HttpVersion v2;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpClientResponse: io.vertx.core.http.HttpVersion version()>();
return v2;
}
public int statusCode()
{
int v2;
io.vertx.core.http.HttpClientResponse v1;
io.vertx.mutiny.core.http.HttpClientResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpClientResponse: int statusCode()>();
return v2;
}
public java.lang.String statusMessage()
{
io.vertx.core.http.HttpClientResponse v1;
io.vertx.mutiny.core.http.HttpClientResponse v0;
java.lang.String v2;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpClientResponse: java.lang.String statusMessage()>();
return v2;
}
public io.vertx.mutiny.core.MultiMap headers()
{
io.vertx.core.http.HttpClientResponse v3;
io.vertx.core.MultiMap v4;
io.vertx.mutiny.core.http.HttpClientResponse v0;
io.vertx.mutiny.core.MultiMap v1, v2, v5;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.mutiny.core.MultiMap cached_1>;
if v1 == null goto label1;
v2 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.mutiny.core.MultiMap cached_1>;
return v2;
label1:
v3 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.http.HttpClientResponse: io.vertx.core.MultiMap headers()>();
v5 = staticinvoke <io.vertx.mutiny.core.MultiMap: io.vertx.mutiny.core.MultiMap newInstance(io.vertx.core.MultiMap)>(v4);
v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.mutiny.core.MultiMap cached_1> = v5;
return v5;
}
public java.lang.String getHeader(java.lang.String)
{
io.vertx.core.http.HttpClientResponse v2;
io.vertx.mutiny.core.http.HttpClientResponse v0;
java.lang.String v1, v3;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse delegate>;
v3 = interfaceinvoke v2.<io.vertx.core.http.HttpClientResponse: java.lang.String getHeader(java.lang.String)>(v1);
return v3;
}
public java.lang.String getTrailer(java.lang.String)
{
io.vertx.core.http.HttpClientResponse v2;
io.vertx.mutiny.core.http.HttpClientResponse v0;
java.lang.String v1, v3;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse delegate>;
v3 = interfaceinvoke v2.<io.vertx.core.http.HttpClientResponse: java.lang.String getTrailer(java.lang.String)>(v1);
return v3;
}
public io.vertx.mutiny.core.MultiMap trailers()
{
io.vertx.core.http.HttpClientResponse v3;
io.vertx.core.MultiMap v4;
io.vertx.mutiny.core.http.HttpClientResponse v0;
io.vertx.mutiny.core.MultiMap v1, v2, v5;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.mutiny.core.MultiMap cached_2>;
if v1 == null goto label1;
v2 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.mutiny.core.MultiMap cached_2>;
return v2;
label1:
v3 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.http.HttpClientResponse: io.vertx.core.MultiMap trailers()>();
v5 = staticinvoke <io.vertx.mutiny.core.MultiMap: io.vertx.mutiny.core.MultiMap newInstance(io.vertx.core.MultiMap)>(v4);
v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.mutiny.core.MultiMap cached_2> = v5;
return v5;
}
public java.util.List cookies()
{
io.vertx.core.http.HttpClientResponse v3;
java.util.List v1, v2, v4;
io.vertx.mutiny.core.http.HttpClientResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: java.util.List cached_3>;
if v1 == null goto label1;
v2 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: java.util.List cached_3>;
return v2;
label1:
v3 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.http.HttpClientResponse: java.util.List cookies()>();
v0.<io.vertx.mutiny.core.http.HttpClientResponse: java.util.List cached_3> = v4;
return v4;
}
private io.vertx.mutiny.core.http.HttpClientResponse __bodyHandler(io.vertx.core.Handler)
{
io.vertx.core.http.HttpClientResponse v2;
io.smallrye.mutiny.vertx.DelegatingHandler v3;
io.vertx.mutiny.core.http.HttpClientResponse v0;
io.vertx.core.Handler v1;
java.util.function.Function v4;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse delegate>;
v3 = new io.smallrye.mutiny.vertx.DelegatingHandler;
v4 = staticinvoke <io.vertx.mutiny.core.http.HttpClientResponse$lambda___bodyHandler_6__1765: java.util.function.Function bootstrap$()>();
specialinvoke v3.<io.smallrye.mutiny.vertx.DelegatingHandler: void <init>(io.vertx.core.Handler,java.util.function.Function)>(v1, v4);
interfaceinvoke v2.<io.vertx.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse bodyHandler(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.mutiny.core.http.HttpClientResponse bodyHandler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.http.HttpClientResponse v0, v3;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.mutiny.core.http.HttpClientResponse __bodyHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.smallrye.mutiny.Uni body()
{
java.util.function.Consumer v1;
io.vertx.mutiny.core.http.HttpClientResponse v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 = staticinvoke <io.vertx.mutiny.core.http.HttpClientResponse$lambda_body_9__1766: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpClientResponse)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public io.vertx.mutiny.core.buffer.Buffer bodyAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
io.vertx.mutiny.core.http.HttpClientResponse v0;
java.lang.Object v3;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.smallrye.mutiny.Uni body()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public io.vertx.mutiny.core.http.HttpClientResponse bodyAndForget()
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.http.HttpClientResponse v0;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.smallrye.mutiny.Uni body()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return v0;
}
public io.smallrye.mutiny.Uni end()
{
java.util.function.Consumer v1;
io.vertx.mutiny.core.http.HttpClientResponse v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 = staticinvoke <io.vertx.mutiny.core.http.HttpClientResponse$lambda_end_10__1767: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpClientResponse)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public java.lang.Void endAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
io.vertx.mutiny.core.http.HttpClientResponse v0;
java.lang.Object v3;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.smallrye.mutiny.Uni end()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public void endAndForget()
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.http.HttpClientResponse v0;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.smallrye.mutiny.Uni end()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return;
}
private io.vertx.mutiny.core.http.HttpClientResponse __customFrameHandler(io.vertx.core.Handler)
{
io.vertx.core.http.HttpClientResponse v2;
io.smallrye.mutiny.vertx.DelegatingHandler v3;
io.vertx.mutiny.core.http.HttpClientResponse v0;
io.vertx.core.Handler v1;
java.util.function.Function v4;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse delegate>;
v3 = new io.smallrye.mutiny.vertx.DelegatingHandler;
v4 = staticinvoke <io.vertx.mutiny.core.http.HttpClientResponse$lambda___customFrameHandler_11__1768: java.util.function.Function bootstrap$()>();
specialinvoke v3.<io.smallrye.mutiny.vertx.DelegatingHandler: void <init>(io.vertx.core.Handler,java.util.function.Function)>(v1, v4);
interfaceinvoke v2.<io.vertx.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse customFrameHandler(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.mutiny.core.http.HttpClientResponse customFrameHandler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.http.HttpClientResponse v0, v3;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.mutiny.core.http.HttpClientResponse __customFrameHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.vertx.mutiny.core.http.HttpClientRequest request()
{
io.vertx.core.http.HttpClientRequest v4;
io.vertx.core.http.HttpClientResponse v3;
io.vertx.mutiny.core.http.HttpClientRequest v1, v2, v5;
io.vertx.mutiny.core.http.HttpClientResponse v0;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.mutiny.core.http.HttpClientRequest cached_4>;
if v1 == null goto label1;
v2 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.mutiny.core.http.HttpClientRequest cached_4>;
return v2;
label1:
v3 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.http.HttpClientResponse: io.vertx.core.http.HttpClientRequest request()>();
v5 = staticinvoke <io.vertx.mutiny.core.http.HttpClientRequest: io.vertx.mutiny.core.http.HttpClientRequest newInstance(io.vertx.core.http.HttpClientRequest)>(v4);
v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.mutiny.core.http.HttpClientRequest cached_4> = v5;
return v5;
}
private io.vertx.mutiny.core.http.HttpClientResponse __streamPriorityHandler(io.vertx.core.Handler)
{
io.vertx.core.http.HttpClientResponse v2;
io.vertx.mutiny.core.http.HttpClientResponse v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse streamPriorityHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.HttpClientResponse streamPriorityHandler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.http.HttpClientResponse v0, v3;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.mutiny.core.http.HttpClientResponse __streamPriorityHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public java.lang.String getHeader(java.lang.CharSequence)
{
io.vertx.core.http.HttpClientResponse v2;
java.lang.CharSequence v1;
io.vertx.mutiny.core.http.HttpClientResponse v0;
java.lang.String v3;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 := @parameter0: java.lang.CharSequence;
v2 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse delegate>;
v3 = interfaceinvoke v2.<io.vertx.core.http.HttpClientResponse: java.lang.String getHeader(java.lang.CharSequence)>(v1);
return v3;
}
public synchronized io.smallrye.mutiny.Multi toMulti()
{
io.vertx.core.http.HttpClientResponse v3;
io.vertx.mutiny.core.http.HttpClientResponse v0;
java.util.function.Function v2;
io.smallrye.mutiny.Multi v1, v4, v5;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.smallrye.mutiny.Multi multi>;
if v1 != null goto label1;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpClientResponse$newInstance__1769: java.util.function.Function bootstrap$()>();
v3 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.vertx.core.http.HttpClientResponse delegate>;
v4 = staticinvoke <io.smallrye.mutiny.vertx.MultiHelper: io.smallrye.mutiny.Multi toMulti(io.vertx.core.streams.ReadStream,java.util.function.Function)>(v3, v2);
v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.smallrye.mutiny.Multi multi> = v4;
label1:
v5 = v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.smallrye.mutiny.Multi multi>;
return v5;
}
public java.lang.Iterable toBlockingIterable()
{
io.smallrye.mutiny.groups.MultiSubscribe v2;
io.smallrye.mutiny.helpers.BlockingIterable v3;
io.vertx.mutiny.core.http.HttpClientResponse v0;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.smallrye.mutiny.Multi toMulti()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiSubscribe subscribe()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.MultiSubscribe: io.smallrye.mutiny.helpers.BlockingIterable asIterable()>();
return v3;
}
public java.util.stream.Stream toBlockingStream()
{
io.smallrye.mutiny.groups.MultiSubscribe v2;
java.util.stream.Stream v3;
io.vertx.mutiny.core.http.HttpClientResponse v0;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.vertx.mutiny.core.http.HttpClientResponse;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpClientResponse: io.smallrye.mutiny.Multi toMulti()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiSubscribe subscribe()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.MultiSubscribe: java.util.stream.Stream asStream()>();
return v3;
}
public static io.vertx.mutiny.core.http.HttpClientResponse newInstance(io.vertx.core.http.HttpClientResponse)
{
io.vertx.core.http.HttpClientResponse v0;
io.vertx.mutiny.core.http.HttpClientResponse v1;
v0 := @parameter0: io.vertx.core.http.HttpClientResponse;
if v0 == null goto label1;
v1 = new io.vertx.mutiny.core.http.HttpClientResponse;
specialinvoke v1.<io.vertx.mutiny.core.http.HttpClientResponse: void <init>(io.vertx.core.http.HttpClientResponse)>(v0);
goto label2;
label1:
v1 = null;
label2:
return v1;
}
static void <clinit>()
{
io.smallrye.mutiny.vertx.TypeArg v0, v3;
java.util.function.Function v1, v2, v4, v5;
v0 = new io.smallrye.mutiny.vertx.TypeArg;
v1 = staticinvoke <io.vertx.mutiny.core.http.HttpClientResponse$lambda_static_0__1772: java.util.function.Function bootstrap$()>();
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpClientResponse$getDelegate__1773: java.util.function.Function bootstrap$()>();
specialinvoke v0.<io.smallrye.mutiny.vertx.TypeArg: void <init>(java.util.function.Function,java.util.function.Function)>(v1, v2);
<io.vertx.mutiny.core.http.HttpClientResponse: io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG> = v0;
v3 = new io.smallrye.mutiny.vertx.TypeArg;
v4 = staticinvoke <io.vertx.mutiny.core.http.HttpClientResponse$lambda_static_1__1774: java.util.function.Function bootstrap$()>();
v5 = staticinvoke <io.vertx.mutiny.core.http.HttpClientResponse$lambda_static_2__1775: java.util.function.Function bootstrap$()>();
specialinvoke v3.<io.smallrye.mutiny.vertx.TypeArg: void <init>(java.util.function.Function,java.util.function.Function)>(v4, v5);
<io.vertx.mutiny.core.http.HttpClientResponse: io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_0> = v3;
return;
}
}