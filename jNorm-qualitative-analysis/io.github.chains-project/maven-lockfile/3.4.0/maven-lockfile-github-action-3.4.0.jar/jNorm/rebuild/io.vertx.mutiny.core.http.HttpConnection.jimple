public class io.vertx.mutiny.core.http.HttpConnection extends java.lang.Object
{
public static final io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG;
private final io.vertx.core.http.HttpConnection delegate;
private io.vertx.mutiny.core.net.SocketAddress cached_0;
private io.vertx.mutiny.core.net.SocketAddress cached_1;
public void <init>(io.vertx.core.http.HttpConnection)
{
io.vertx.core.http.HttpConnection v1;
io.vertx.mutiny.core.http.HttpConnection v0;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 := @parameter0: io.vertx.core.http.HttpConnection;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.core.http.HttpConnection delegate> = v1;
return;
}
public void <init>(java.lang.Object)
{
java.lang.Object v1;
io.vertx.mutiny.core.http.HttpConnection v0;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 := @parameter0: java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.core.http.HttpConnection delegate> = v1;
return;
}
void <init>()
{
io.vertx.mutiny.core.http.HttpConnection v0;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.core.http.HttpConnection delegate> = null;
return;
}
public io.vertx.core.http.HttpConnection getDelegate()
{
io.vertx.core.http.HttpConnection v1;
io.vertx.mutiny.core.http.HttpConnection v0;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 = v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.core.http.HttpConnection delegate>;
return v1;
}
public java.lang.String toString()
{
io.vertx.core.http.HttpConnection v1;
java.lang.String v2;
io.vertx.mutiny.core.http.HttpConnection v0;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 = v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.core.http.HttpConnection delegate>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
return v2;
}
public boolean equals(java.lang.Object)
{
io.vertx.mutiny.core.http.HttpConnection v0;
java.lang.Class v2, v3;
java.lang.Object v1;
io.vertx.core.http.HttpConnection v4, v5;
boolean v6;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v1 == null goto label2;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v2 == v3 goto label3;
label2:
return 0;
label3:
v4 = v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.core.http.HttpConnection delegate>;
v5 = v1.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.core.http.HttpConnection delegate>;
v6 = virtualinvoke v4.<java.lang.Object: boolean equals(java.lang.Object)>(v5);
return v6;
}
public int hashCode()
{
int v2;
io.vertx.core.http.HttpConnection v1;
io.vertx.mutiny.core.http.HttpConnection v0;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 = v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.core.http.HttpConnection delegate>;
v2 = virtualinvoke v1.<java.lang.Object: int hashCode()>();
return v2;
}
public int getWindowSize()
{
int v2;
io.vertx.core.http.HttpConnection v1;
io.vertx.mutiny.core.http.HttpConnection v0;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 = v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.core.http.HttpConnection delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpConnection: int getWindowSize()>();
return v2;
}
public io.vertx.mutiny.core.http.HttpConnection setWindowSize(int)
{
int v1;
io.vertx.core.http.HttpConnection v2;
io.vertx.mutiny.core.http.HttpConnection v0;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 := @parameter0: int;
v2 = v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.core.http.HttpConnection delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpConnection: io.vertx.core.http.HttpConnection setWindowSize(int)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.HttpConnection goAway(long)
{
long v1;
io.vertx.core.http.HttpConnection v2;
io.vertx.mutiny.core.http.HttpConnection v0;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 := @parameter0: long;
v2 = v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.core.http.HttpConnection delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpConnection: io.vertx.core.http.HttpConnection goAway(long)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.HttpConnection goAway(long, int)
{
io.vertx.mutiny.core.http.HttpConnection v0;
int v2;
long v1;
io.vertx.core.http.HttpConnection v3;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 := @parameter0: long;
v2 := @parameter1: int;
v3 = v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.core.http.HttpConnection delegate>;
interfaceinvoke v3.<io.vertx.core.http.HttpConnection: io.vertx.core.http.HttpConnection goAway(long,int)>(v1, v2);
return v0;
}
public io.vertx.mutiny.core.http.HttpConnection goAway(long, int, io.vertx.mutiny.core.buffer.Buffer)
{
io.vertx.core.buffer.Buffer v5;
io.vertx.mutiny.core.buffer.Buffer v3;
io.vertx.mutiny.core.http.HttpConnection v0;
int v2;
long v1;
io.vertx.core.http.HttpConnection v4;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 := @parameter0: long;
v2 := @parameter1: int;
v3 := @parameter2: io.vertx.mutiny.core.buffer.Buffer;
v4 = v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.core.http.HttpConnection delegate>;
v5 = virtualinvoke v3.<io.vertx.mutiny.core.buffer.Buffer: io.vertx.core.buffer.Buffer getDelegate()>();
interfaceinvoke v4.<io.vertx.core.http.HttpConnection: io.vertx.core.http.HttpConnection goAway(long,int,io.vertx.core.buffer.Buffer)>(v1, v2, v5);
return v0;
}
private io.vertx.mutiny.core.http.HttpConnection __goAwayHandler(io.vertx.core.Handler)
{
io.vertx.core.http.HttpConnection v2;
io.vertx.core.Handler v1;
io.vertx.mutiny.core.http.HttpConnection v0;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.core.http.HttpConnection delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpConnection: io.vertx.core.http.HttpConnection goAwayHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.HttpConnection goAwayHandler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.http.HttpConnection v0, v3;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.mutiny.core.http.HttpConnection __goAwayHandler(io.vertx.core.Handler)>(v2);
return v3;
}
private io.vertx.mutiny.core.http.HttpConnection __shutdownHandler(io.vertx.core.Handler)
{
io.vertx.core.http.HttpConnection v2;
io.vertx.core.Handler v1;
io.vertx.mutiny.core.http.HttpConnection v0;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.core.http.HttpConnection delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpConnection: io.vertx.core.http.HttpConnection shutdownHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.HttpConnection shutdownHandler(java.lang.Runnable)
{
io.vertx.mutiny.core.http.HttpConnection v0, v3;
io.vertx.core.Handler v2;
java.lang.Runnable v1;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 := @parameter0: java.lang.Runnable;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpConnection$lambda_shutdownHandler_1__1830: io.vertx.core.Handler bootstrap$(java.lang.Runnable)>(v1);
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.mutiny.core.http.HttpConnection __shutdownHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.smallrye.mutiny.Uni shutdown()
{
java.util.function.Consumer v1;
io.vertx.mutiny.core.http.HttpConnection v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 = staticinvoke <io.vertx.mutiny.core.http.HttpConnection$lambda_shutdown_2__1831: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpConnection)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public java.lang.Void shutdownAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
io.vertx.mutiny.core.http.HttpConnection v0;
java.lang.Object v3;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpConnection: io.smallrye.mutiny.Uni shutdown()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public void shutdownAndForget()
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.http.HttpConnection v0;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpConnection: io.smallrye.mutiny.Uni shutdown()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return;
}
public io.smallrye.mutiny.Uni shutdown(long)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.http.HttpConnection v0;
long v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 := @parameter0: long;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpConnection$lambda_shutdown_3__1832: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpConnection,long)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void shutdownAndAwait(long)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.http.HttpConnection v0;
java.lang.Object v4;
long v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 := @parameter0: long;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpConnection: io.smallrye.mutiny.Uni shutdown(long)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void shutdownAndForget(long)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.http.HttpConnection v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
long v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 := @parameter0: long;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpConnection: io.smallrye.mutiny.Uni shutdown(long)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
private io.vertx.mutiny.core.http.HttpConnection __closeHandler(io.vertx.core.Handler)
{
io.vertx.core.http.HttpConnection v2;
io.vertx.core.Handler v1;
io.vertx.mutiny.core.http.HttpConnection v0;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.core.http.HttpConnection delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpConnection: io.vertx.core.http.HttpConnection closeHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.HttpConnection closeHandler(java.lang.Runnable)
{
io.vertx.mutiny.core.http.HttpConnection v0, v3;
io.vertx.core.Handler v2;
java.lang.Runnable v1;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 := @parameter0: java.lang.Runnable;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpConnection$lambda_closeHandler_4__1833: io.vertx.core.Handler bootstrap$(java.lang.Runnable)>(v1);
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.mutiny.core.http.HttpConnection __closeHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.smallrye.mutiny.Uni close()
{
java.util.function.Consumer v1;
io.vertx.mutiny.core.http.HttpConnection v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 = staticinvoke <io.vertx.mutiny.core.http.HttpConnection$lambda_close_5__1834: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpConnection)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public java.lang.Void closeAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
io.vertx.mutiny.core.http.HttpConnection v0;
java.lang.Object v3;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpConnection: io.smallrye.mutiny.Uni close()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public void closeAndForget()
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.http.HttpConnection v0;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpConnection: io.smallrye.mutiny.Uni close()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return;
}
public io.vertx.core.http.Http2Settings settings()
{
io.vertx.core.http.Http2Settings v2;
io.vertx.core.http.HttpConnection v1;
io.vertx.mutiny.core.http.HttpConnection v0;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 = v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.core.http.HttpConnection delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpConnection: io.vertx.core.http.Http2Settings settings()>();
return v2;
}
public io.smallrye.mutiny.Uni updateSettings(io.vertx.core.http.Http2Settings)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.http.HttpConnection v0;
io.vertx.core.http.Http2Settings v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 := @parameter0: io.vertx.core.http.Http2Settings;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpConnection$lambda_updateSettings_6__1835: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpConnection,io.vertx.core.http.Http2Settings)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void updateSettingsAndAwait(io.vertx.core.http.Http2Settings)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.http.HttpConnection v0;
java.lang.Object v4;
io.vertx.core.http.Http2Settings v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 := @parameter0: io.vertx.core.http.Http2Settings;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpConnection: io.smallrye.mutiny.Uni updateSettings(io.vertx.core.http.Http2Settings)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.http.HttpConnection updateSettingsAndForget(io.vertx.core.http.Http2Settings)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.http.HttpConnection v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.vertx.core.http.Http2Settings v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 := @parameter0: io.vertx.core.http.Http2Settings;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpConnection: io.smallrye.mutiny.Uni updateSettings(io.vertx.core.http.Http2Settings)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.vertx.core.http.Http2Settings remoteSettings()
{
io.vertx.core.http.Http2Settings v2;
io.vertx.core.http.HttpConnection v1;
io.vertx.mutiny.core.http.HttpConnection v0;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 = v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.core.http.HttpConnection delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpConnection: io.vertx.core.http.Http2Settings remoteSettings()>();
return v2;
}
private io.vertx.mutiny.core.http.HttpConnection __remoteSettingsHandler(io.vertx.core.Handler)
{
io.vertx.core.http.HttpConnection v2;
io.vertx.core.Handler v1;
io.vertx.mutiny.core.http.HttpConnection v0;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.core.http.HttpConnection delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpConnection: io.vertx.core.http.HttpConnection remoteSettingsHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.HttpConnection remoteSettingsHandler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.http.HttpConnection v0, v3;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.mutiny.core.http.HttpConnection __remoteSettingsHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.smallrye.mutiny.Uni ping(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.http.HttpConnection v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpConnection$lambda_ping_9__1836: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpConnection,io.vertx.mutiny.core.buffer.Buffer)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public io.vertx.mutiny.core.buffer.Buffer pingAndAwait(io.vertx.mutiny.core.buffer.Buffer)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.http.HttpConnection v0;
java.lang.Object v4;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpConnection: io.smallrye.mutiny.Uni ping(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.http.HttpConnection pingAndForget(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.http.HttpConnection v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpConnection: io.smallrye.mutiny.Uni ping(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
private io.vertx.mutiny.core.http.HttpConnection __pingHandler(io.vertx.core.Handler)
{
io.vertx.mutiny.core.http.HttpConnection v0;
io.smallrye.mutiny.vertx.DelegatingHandler v3;
io.vertx.core.http.HttpConnection v2;
io.vertx.core.Handler v1;
java.util.function.Function v4;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.core.http.HttpConnection delegate>;
v3 = new io.smallrye.mutiny.vertx.DelegatingHandler;
v4 = staticinvoke <io.vertx.mutiny.core.http.HttpConnection$lambda___pingHandler_10__1837: java.util.function.Function bootstrap$()>();
specialinvoke v3.<io.smallrye.mutiny.vertx.DelegatingHandler: void <init>(io.vertx.core.Handler,java.util.function.Function)>(v1, v4);
interfaceinvoke v2.<io.vertx.core.http.HttpConnection: io.vertx.core.http.HttpConnection pingHandler(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.mutiny.core.http.HttpConnection pingHandler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.http.HttpConnection v0, v3;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.mutiny.core.http.HttpConnection __pingHandler(io.vertx.core.Handler)>(v2);
return v3;
}
private io.vertx.mutiny.core.http.HttpConnection __exceptionHandler(io.vertx.core.Handler)
{
io.vertx.core.http.HttpConnection v2;
io.vertx.core.Handler v1;
io.vertx.mutiny.core.http.HttpConnection v0;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.core.http.HttpConnection delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpConnection: io.vertx.core.http.HttpConnection exceptionHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.HttpConnection exceptionHandler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.http.HttpConnection v0, v3;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.mutiny.core.http.HttpConnection __exceptionHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.vertx.mutiny.core.net.SocketAddress remoteAddress()
{
io.vertx.mutiny.core.http.HttpConnection v0;
io.vertx.mutiny.core.net.SocketAddress v1, v2, v5;
io.vertx.core.http.HttpConnection v3;
io.vertx.core.net.SocketAddress v4;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 = v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.mutiny.core.net.SocketAddress cached_0>;
if v1 == null goto label1;
v2 = v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.mutiny.core.net.SocketAddress cached_0>;
return v2;
label1:
v3 = v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.core.http.HttpConnection delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.http.HttpConnection: io.vertx.core.net.SocketAddress remoteAddress()>();
v5 = staticinvoke <io.vertx.mutiny.core.net.SocketAddress: io.vertx.mutiny.core.net.SocketAddress newInstance(io.vertx.core.net.SocketAddress)>(v4);
v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.mutiny.core.net.SocketAddress cached_0> = v5;
return v5;
}
public io.vertx.mutiny.core.net.SocketAddress remoteAddress(boolean)
{
io.vertx.mutiny.core.http.HttpConnection v0;
io.vertx.mutiny.core.net.SocketAddress v4;
io.vertx.core.http.HttpConnection v2;
boolean v1;
io.vertx.core.net.SocketAddress v3;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 := @parameter0: boolean;
v2 = v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.core.http.HttpConnection delegate>;
v3 = interfaceinvoke v2.<io.vertx.core.http.HttpConnection: io.vertx.core.net.SocketAddress remoteAddress(boolean)>(v1);
v4 = staticinvoke <io.vertx.mutiny.core.net.SocketAddress: io.vertx.mutiny.core.net.SocketAddress newInstance(io.vertx.core.net.SocketAddress)>(v3);
return v4;
}
public io.vertx.mutiny.core.net.SocketAddress localAddress()
{
io.vertx.mutiny.core.http.HttpConnection v0;
io.vertx.mutiny.core.net.SocketAddress v1, v2, v5;
io.vertx.core.http.HttpConnection v3;
io.vertx.core.net.SocketAddress v4;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 = v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.mutiny.core.net.SocketAddress cached_1>;
if v1 == null goto label1;
v2 = v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.mutiny.core.net.SocketAddress cached_1>;
return v2;
label1:
v3 = v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.core.http.HttpConnection delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.http.HttpConnection: io.vertx.core.net.SocketAddress localAddress()>();
v5 = staticinvoke <io.vertx.mutiny.core.net.SocketAddress: io.vertx.mutiny.core.net.SocketAddress newInstance(io.vertx.core.net.SocketAddress)>(v4);
v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.mutiny.core.net.SocketAddress cached_1> = v5;
return v5;
}
public io.vertx.mutiny.core.net.SocketAddress localAddress(boolean)
{
io.vertx.mutiny.core.http.HttpConnection v0;
io.vertx.mutiny.core.net.SocketAddress v4;
io.vertx.core.http.HttpConnection v2;
boolean v1;
io.vertx.core.net.SocketAddress v3;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 := @parameter0: boolean;
v2 = v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.core.http.HttpConnection delegate>;
v3 = interfaceinvoke v2.<io.vertx.core.http.HttpConnection: io.vertx.core.net.SocketAddress localAddress(boolean)>(v1);
v4 = staticinvoke <io.vertx.mutiny.core.net.SocketAddress: io.vertx.mutiny.core.net.SocketAddress newInstance(io.vertx.core.net.SocketAddress)>(v3);
return v4;
}
public boolean isSsl()
{
io.vertx.core.http.HttpConnection v1;
io.vertx.mutiny.core.http.HttpConnection v0;
boolean v2;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 = v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.core.http.HttpConnection delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpConnection: boolean isSsl()>();
return v2;
}
public java.lang.String indicatedServerName()
{
io.vertx.core.http.HttpConnection v1;
java.lang.String v2;
io.vertx.mutiny.core.http.HttpConnection v0;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 = v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.core.http.HttpConnection delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpConnection: java.lang.String indicatedServerName()>();
return v2;
}
public javax.net.ssl.SSLSession sslSession()
{
io.vertx.core.http.HttpConnection v1;
javax.net.ssl.SSLSession v2;
io.vertx.mutiny.core.http.HttpConnection v0;
v0 := @this: io.vertx.mutiny.core.http.HttpConnection;
v1 = v0.<io.vertx.mutiny.core.http.HttpConnection: io.vertx.core.http.HttpConnection delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpConnection: javax.net.ssl.SSLSession sslSession()>();
return v2;
}
public static io.vertx.mutiny.core.http.HttpConnection newInstance(io.vertx.core.http.HttpConnection)
{
io.vertx.core.http.HttpConnection v0;
io.vertx.mutiny.core.http.HttpConnection v1;
v0 := @parameter0: io.vertx.core.http.HttpConnection;
if v0 == null goto label1;
v1 = new io.vertx.mutiny.core.http.HttpConnection;
specialinvoke v1.<io.vertx.mutiny.core.http.HttpConnection: void <init>(io.vertx.core.http.HttpConnection)>(v0);
goto label2;
label1:
v1 = null;
label2:
return v1;
}
static void <clinit>()
{
java.util.function.Function v1, v2;
io.smallrye.mutiny.vertx.TypeArg v0;
v0 = new io.smallrye.mutiny.vertx.TypeArg;
v1 = staticinvoke <io.vertx.mutiny.core.http.HttpConnection$lambda_static_0__1840: java.util.function.Function bootstrap$()>();
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpConnection$getDelegate__1841: java.util.function.Function bootstrap$()>();
specialinvoke v0.<io.smallrye.mutiny.vertx.TypeArg: void <init>(java.util.function.Function,java.util.function.Function)>(v1, v2);
<io.vertx.mutiny.core.http.HttpConnection: io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG> = v0;
return;
}
}