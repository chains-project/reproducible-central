public class io.vertx.mutiny.core.http.HttpServerFileUpload extends java.lang.Object implements io.vertx.mutiny.core.streams.ReadStream
{
public static final io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG;
private final io.vertx.core.http.HttpServerFileUpload delegate;
static final io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_0;
private io.smallrye.mutiny.Multi multi;
public void <init>(io.vertx.core.http.HttpServerFileUpload)
{
io.vertx.core.http.HttpServerFileUpload v1;
io.vertx.mutiny.core.http.HttpServerFileUpload v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
v1 := @parameter0: io.vertx.core.http.HttpServerFileUpload;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.vertx.core.http.HttpServerFileUpload delegate> = v1;
return;
}
public void <init>(java.lang.Object)
{
java.lang.Object v1;
io.vertx.mutiny.core.http.HttpServerFileUpload v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
v1 := @parameter0: java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.vertx.core.http.HttpServerFileUpload delegate> = v1;
return;
}
void <init>()
{
io.vertx.mutiny.core.http.HttpServerFileUpload v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.vertx.core.http.HttpServerFileUpload delegate> = null;
return;
}
public io.vertx.core.http.HttpServerFileUpload getDelegate()
{
io.vertx.core.http.HttpServerFileUpload v1;
io.vertx.mutiny.core.http.HttpServerFileUpload v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.vertx.core.http.HttpServerFileUpload delegate>;
return v1;
}
public java.lang.String toString()
{
io.vertx.core.http.HttpServerFileUpload v1;
java.lang.String v2;
io.vertx.mutiny.core.http.HttpServerFileUpload v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.vertx.core.http.HttpServerFileUpload delegate>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
return v2;
}
public boolean equals(java.lang.Object)
{
io.vertx.core.http.HttpServerFileUpload v4, v5;
java.lang.Class v2, v3;
java.lang.Object v1;
io.vertx.mutiny.core.http.HttpServerFileUpload v0;
boolean v6;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v1 == null goto label2;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v2 == v3 goto label3;
label2:
return 0;
label3:
v4 = v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.vertx.core.http.HttpServerFileUpload delegate>;
v5 = v1.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.vertx.core.http.HttpServerFileUpload delegate>;
v6 = virtualinvoke v4.<java.lang.Object: boolean equals(java.lang.Object)>(v5);
return v6;
}
public int hashCode()
{
int v2;
io.vertx.core.http.HttpServerFileUpload v1;
io.vertx.mutiny.core.http.HttpServerFileUpload v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.vertx.core.http.HttpServerFileUpload delegate>;
v2 = virtualinvoke v1.<java.lang.Object: int hashCode()>();
return v2;
}
public io.vertx.mutiny.core.streams.Pipe pipe()
{
io.vertx.mutiny.core.streams.Pipe v4;
io.vertx.core.http.HttpServerFileUpload v1;
io.vertx.core.streams.Pipe v2;
io.smallrye.mutiny.vertx.TypeArg v3;
io.vertx.mutiny.core.http.HttpServerFileUpload v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.vertx.core.http.HttpServerFileUpload delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerFileUpload: io.vertx.core.streams.Pipe pipe()>();
v3 = <io.vertx.mutiny.core.http.HttpServerFileUpload: io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_0>;
v4 = staticinvoke <io.vertx.mutiny.core.streams.Pipe: io.vertx.mutiny.core.streams.Pipe newInstance(io.vertx.core.streams.Pipe,io.smallrye.mutiny.vertx.TypeArg)>(v2, v3);
return v4;
}
public io.smallrye.mutiny.Uni pipeTo(io.vertx.mutiny.core.streams.WriteStream)
{
io.vertx.mutiny.core.streams.WriteStream v1;
java.util.function.Consumer v2;
io.vertx.mutiny.core.http.HttpServerFileUpload v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
v1 := @parameter0: io.vertx.mutiny.core.streams.WriteStream;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpServerFileUpload$lambda_pipeTo_3__1784: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpServerFileUpload,io.vertx.mutiny.core.streams.WriteStream)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void pipeToAndAwait(io.vertx.mutiny.core.streams.WriteStream)
{
io.vertx.mutiny.core.streams.WriteStream v1;
io.smallrye.mutiny.groups.UniAwait v3;
java.lang.Object v4;
io.vertx.mutiny.core.http.HttpServerFileUpload v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
v1 := @parameter0: io.vertx.mutiny.core.streams.WriteStream;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.smallrye.mutiny.Uni pipeTo(io.vertx.mutiny.core.streams.WriteStream)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void pipeToAndForget(io.vertx.mutiny.core.streams.WriteStream)
{
io.vertx.mutiny.core.streams.WriteStream v1;
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.vertx.mutiny.core.http.HttpServerFileUpload v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
v1 := @parameter0: io.vertx.mutiny.core.streams.WriteStream;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.smallrye.mutiny.Uni pipeTo(io.vertx.mutiny.core.streams.WriteStream)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
private io.vertx.mutiny.core.http.HttpServerFileUpload __exceptionHandler(io.vertx.core.Handler)
{
io.vertx.core.http.HttpServerFileUpload v2;
io.vertx.core.Handler v1;
io.vertx.mutiny.core.http.HttpServerFileUpload v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.vertx.core.http.HttpServerFileUpload delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpServerFileUpload: io.vertx.core.http.HttpServerFileUpload exceptionHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.HttpServerFileUpload exceptionHandler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.http.HttpServerFileUpload v0, v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.vertx.mutiny.core.http.HttpServerFileUpload __exceptionHandler(io.vertx.core.Handler)>(v2);
return v3;
}
private io.vertx.mutiny.core.http.HttpServerFileUpload __handler(io.vertx.core.Handler)
{
io.vertx.core.http.HttpServerFileUpload v2;
io.smallrye.mutiny.vertx.DelegatingHandler v3;
io.vertx.core.Handler v1;
io.vertx.mutiny.core.http.HttpServerFileUpload v0;
java.util.function.Function v4;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.vertx.core.http.HttpServerFileUpload delegate>;
v3 = new io.smallrye.mutiny.vertx.DelegatingHandler;
v4 = staticinvoke <io.vertx.mutiny.core.http.HttpServerFileUpload$lambda___handler_4__1785: java.util.function.Function bootstrap$()>();
specialinvoke v3.<io.smallrye.mutiny.vertx.DelegatingHandler: void <init>(io.vertx.core.Handler,java.util.function.Function)>(v1, v4);
interfaceinvoke v2.<io.vertx.core.http.HttpServerFileUpload: io.vertx.core.http.HttpServerFileUpload handler(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.mutiny.core.http.HttpServerFileUpload handler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.http.HttpServerFileUpload v0, v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.vertx.mutiny.core.http.HttpServerFileUpload __handler(io.vertx.core.Handler)>(v2);
return v3;
}
private io.vertx.mutiny.core.http.HttpServerFileUpload __endHandler(io.vertx.core.Handler)
{
io.vertx.core.http.HttpServerFileUpload v2;
io.vertx.core.Handler v1;
io.vertx.mutiny.core.http.HttpServerFileUpload v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.vertx.core.http.HttpServerFileUpload delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpServerFileUpload: io.vertx.core.http.HttpServerFileUpload endHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.HttpServerFileUpload endHandler(java.lang.Runnable)
{
io.vertx.core.Handler v2;
io.vertx.mutiny.core.http.HttpServerFileUpload v0, v3;
java.lang.Runnable v1;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
v1 := @parameter0: java.lang.Runnable;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpServerFileUpload$lambda_endHandler_5__1786: io.vertx.core.Handler bootstrap$(java.lang.Runnable)>(v1);
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.vertx.mutiny.core.http.HttpServerFileUpload __endHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.vertx.mutiny.core.http.HttpServerFileUpload pause()
{
io.vertx.core.http.HttpServerFileUpload v1;
io.vertx.mutiny.core.http.HttpServerFileUpload v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.vertx.core.http.HttpServerFileUpload delegate>;
interfaceinvoke v1.<io.vertx.core.http.HttpServerFileUpload: io.vertx.core.http.HttpServerFileUpload pause()>();
return v0;
}
public io.vertx.mutiny.core.http.HttpServerFileUpload resume()
{
io.vertx.core.http.HttpServerFileUpload v1;
io.vertx.mutiny.core.http.HttpServerFileUpload v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.vertx.core.http.HttpServerFileUpload delegate>;
interfaceinvoke v1.<io.vertx.core.http.HttpServerFileUpload: io.vertx.core.http.HttpServerFileUpload resume()>();
return v0;
}
public io.vertx.mutiny.core.http.HttpServerFileUpload fetch(long)
{
long v1;
io.vertx.core.http.HttpServerFileUpload v2;
io.vertx.mutiny.core.http.HttpServerFileUpload v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
v1 := @parameter0: long;
v2 = v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.vertx.core.http.HttpServerFileUpload delegate>;
interfaceinvoke v2.<io.vertx.core.http.HttpServerFileUpload: io.vertx.core.http.HttpServerFileUpload fetch(long)>(v1);
return v0;
}
public io.smallrye.mutiny.Uni streamToFileSystem(java.lang.String)
{
java.util.function.Consumer v2;
java.lang.String v1;
io.vertx.mutiny.core.http.HttpServerFileUpload v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpServerFileUpload$lambda_streamToFileSystem_6__1787: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.HttpServerFileUpload,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void streamToFileSystemAndAwait(java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v3;
java.lang.Object v4;
java.lang.String v1;
io.vertx.mutiny.core.http.HttpServerFileUpload v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.smallrye.mutiny.Uni streamToFileSystem(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void streamToFileSystemAndForget(java.lang.String)
{
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.vertx.mutiny.core.http.HttpServerFileUpload v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.smallrye.mutiny.Uni streamToFileSystem(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public boolean cancelStreamToFileSystem()
{
io.vertx.core.http.HttpServerFileUpload v1;
io.vertx.mutiny.core.http.HttpServerFileUpload v0;
boolean v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.vertx.core.http.HttpServerFileUpload delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerFileUpload: boolean cancelStreamToFileSystem()>();
return v2;
}
public java.lang.String filename()
{
io.vertx.core.http.HttpServerFileUpload v1;
java.lang.String v2;
io.vertx.mutiny.core.http.HttpServerFileUpload v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.vertx.core.http.HttpServerFileUpload delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerFileUpload: java.lang.String filename()>();
return v2;
}
public java.lang.String name()
{
io.vertx.core.http.HttpServerFileUpload v1;
java.lang.String v2;
io.vertx.mutiny.core.http.HttpServerFileUpload v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.vertx.core.http.HttpServerFileUpload delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerFileUpload: java.lang.String name()>();
return v2;
}
public java.lang.String contentType()
{
io.vertx.core.http.HttpServerFileUpload v1;
java.lang.String v2;
io.vertx.mutiny.core.http.HttpServerFileUpload v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.vertx.core.http.HttpServerFileUpload delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerFileUpload: java.lang.String contentType()>();
return v2;
}
public java.lang.String contentTransferEncoding()
{
io.vertx.core.http.HttpServerFileUpload v1;
java.lang.String v2;
io.vertx.mutiny.core.http.HttpServerFileUpload v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.vertx.core.http.HttpServerFileUpload delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerFileUpload: java.lang.String contentTransferEncoding()>();
return v2;
}
public java.lang.String charset()
{
io.vertx.core.http.HttpServerFileUpload v1;
java.lang.String v2;
io.vertx.mutiny.core.http.HttpServerFileUpload v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.vertx.core.http.HttpServerFileUpload delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerFileUpload: java.lang.String charset()>();
return v2;
}
public long size()
{
long v2;
io.vertx.core.http.HttpServerFileUpload v1;
io.vertx.mutiny.core.http.HttpServerFileUpload v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.vertx.core.http.HttpServerFileUpload delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerFileUpload: long size()>();
return v2;
}
public boolean isSizeAvailable()
{
io.vertx.core.http.HttpServerFileUpload v1;
io.vertx.mutiny.core.http.HttpServerFileUpload v0;
boolean v2;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.vertx.core.http.HttpServerFileUpload delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerFileUpload: boolean isSizeAvailable()>();
return v2;
}
public io.vertx.mutiny.core.file.AsyncFile file()
{
io.vertx.core.file.AsyncFile v2;
io.vertx.core.http.HttpServerFileUpload v1;
io.vertx.mutiny.core.file.AsyncFile v3;
io.vertx.mutiny.core.http.HttpServerFileUpload v0;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.vertx.core.http.HttpServerFileUpload delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.HttpServerFileUpload: io.vertx.core.file.AsyncFile file()>();
v3 = staticinvoke <io.vertx.mutiny.core.file.AsyncFile: io.vertx.mutiny.core.file.AsyncFile newInstance(io.vertx.core.file.AsyncFile)>(v2);
return v3;
}
public synchronized io.smallrye.mutiny.Multi toMulti()
{
io.vertx.core.http.HttpServerFileUpload v3;
io.vertx.mutiny.core.http.HttpServerFileUpload v0;
java.util.function.Function v2;
io.smallrye.mutiny.Multi v1, v4, v5;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
v1 = v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.smallrye.mutiny.Multi multi>;
if v1 != null goto label1;
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpServerFileUpload$newInstance__1788: java.util.function.Function bootstrap$()>();
v3 = v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.vertx.core.http.HttpServerFileUpload delegate>;
v4 = staticinvoke <io.smallrye.mutiny.vertx.MultiHelper: io.smallrye.mutiny.Multi toMulti(io.vertx.core.streams.ReadStream,java.util.function.Function)>(v3, v2);
v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.smallrye.mutiny.Multi multi> = v4;
label1:
v5 = v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.smallrye.mutiny.Multi multi>;
return v5;
}
public java.lang.Iterable toBlockingIterable()
{
io.smallrye.mutiny.groups.MultiSubscribe v2;
io.smallrye.mutiny.helpers.BlockingIterable v3;
io.vertx.mutiny.core.http.HttpServerFileUpload v0;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.smallrye.mutiny.Multi toMulti()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiSubscribe subscribe()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.MultiSubscribe: io.smallrye.mutiny.helpers.BlockingIterable asIterable()>();
return v3;
}
public java.util.stream.Stream toBlockingStream()
{
io.smallrye.mutiny.groups.MultiSubscribe v2;
java.util.stream.Stream v3;
io.vertx.mutiny.core.http.HttpServerFileUpload v0;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.vertx.mutiny.core.http.HttpServerFileUpload;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.HttpServerFileUpload: io.smallrye.mutiny.Multi toMulti()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiSubscribe subscribe()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.MultiSubscribe: java.util.stream.Stream asStream()>();
return v3;
}
public static io.vertx.mutiny.core.http.HttpServerFileUpload newInstance(io.vertx.core.http.HttpServerFileUpload)
{
io.vertx.core.http.HttpServerFileUpload v0;
io.vertx.mutiny.core.http.HttpServerFileUpload v1;
v0 := @parameter0: io.vertx.core.http.HttpServerFileUpload;
if v0 == null goto label1;
v1 = new io.vertx.mutiny.core.http.HttpServerFileUpload;
specialinvoke v1.<io.vertx.mutiny.core.http.HttpServerFileUpload: void <init>(io.vertx.core.http.HttpServerFileUpload)>(v0);
goto label2;
label1:
v1 = null;
label2:
return v1;
}
static void <clinit>()
{
io.smallrye.mutiny.vertx.TypeArg v0, v3;
java.util.function.Function v1, v2, v4, v5;
v0 = new io.smallrye.mutiny.vertx.TypeArg;
v1 = staticinvoke <io.vertx.mutiny.core.http.HttpServerFileUpload$lambda_static_0__1789: java.util.function.Function bootstrap$()>();
v2 = staticinvoke <io.vertx.mutiny.core.http.HttpServerFileUpload$getDelegate__1790: java.util.function.Function bootstrap$()>();
specialinvoke v0.<io.smallrye.mutiny.vertx.TypeArg: void <init>(java.util.function.Function,java.util.function.Function)>(v1, v2);
<io.vertx.mutiny.core.http.HttpServerFileUpload: io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG> = v0;
v3 = new io.smallrye.mutiny.vertx.TypeArg;
v4 = staticinvoke <io.vertx.mutiny.core.http.HttpServerFileUpload$lambda_static_1__1791: java.util.function.Function bootstrap$()>();
v5 = staticinvoke <io.vertx.mutiny.core.http.HttpServerFileUpload$lambda_static_2__1792: java.util.function.Function bootstrap$()>();
specialinvoke v3.<io.smallrye.mutiny.vertx.TypeArg: void <init>(java.util.function.Function,java.util.function.Function)>(v4, v5);
<io.vertx.mutiny.core.http.HttpServerFileUpload: io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_0> = v3;
return;
}
}