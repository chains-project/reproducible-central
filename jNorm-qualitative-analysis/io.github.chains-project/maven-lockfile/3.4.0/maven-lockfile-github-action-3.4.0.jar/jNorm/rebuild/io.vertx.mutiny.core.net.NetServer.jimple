public class io.vertx.mutiny.core.net.NetServer extends java.lang.Object implements io.vertx.mutiny.core.metrics.Measured
{
public static final io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG;
private final io.vertx.core.net.NetServer delegate;
static final io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_0;
public void <init>(io.vertx.core.net.NetServer)
{
io.vertx.mutiny.core.net.NetServer v0;
io.vertx.core.net.NetServer v1;
v0 := @this: io.vertx.mutiny.core.net.NetServer;
v1 := @parameter0: io.vertx.core.net.NetServer;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.net.NetServer: io.vertx.core.net.NetServer delegate> = v1;
return;
}
public void <init>(java.lang.Object)
{
java.lang.Object v1;
io.vertx.mutiny.core.net.NetServer v0;
v0 := @this: io.vertx.mutiny.core.net.NetServer;
v1 := @parameter0: java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.net.NetServer: io.vertx.core.net.NetServer delegate> = v1;
return;
}
void <init>()
{
io.vertx.mutiny.core.net.NetServer v0;
v0 := @this: io.vertx.mutiny.core.net.NetServer;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.net.NetServer: io.vertx.core.net.NetServer delegate> = null;
return;
}
public io.vertx.core.net.NetServer getDelegate()
{
io.vertx.mutiny.core.net.NetServer v0;
io.vertx.core.net.NetServer v1;
v0 := @this: io.vertx.mutiny.core.net.NetServer;
v1 = v0.<io.vertx.mutiny.core.net.NetServer: io.vertx.core.net.NetServer delegate>;
return v1;
}
public java.lang.String toString()
{
java.lang.String v2;
io.vertx.mutiny.core.net.NetServer v0;
io.vertx.core.net.NetServer v1;
v0 := @this: io.vertx.mutiny.core.net.NetServer;
v1 = v0.<io.vertx.mutiny.core.net.NetServer: io.vertx.core.net.NetServer delegate>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
return v2;
}
public boolean equals(java.lang.Object)
{
io.vertx.mutiny.core.net.NetServer v0;
io.vertx.core.net.NetServer v4, v5;
java.lang.Class v2, v3;
java.lang.Object v1;
boolean v6;
v0 := @this: io.vertx.mutiny.core.net.NetServer;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v1 == null goto label2;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v2 == v3 goto label3;
label2:
return 0;
label3:
v4 = v0.<io.vertx.mutiny.core.net.NetServer: io.vertx.core.net.NetServer delegate>;
v5 = v1.<io.vertx.mutiny.core.net.NetServer: io.vertx.core.net.NetServer delegate>;
v6 = virtualinvoke v4.<java.lang.Object: boolean equals(java.lang.Object)>(v5);
return v6;
}
public int hashCode()
{
int v2;
io.vertx.mutiny.core.net.NetServer v0;
io.vertx.core.net.NetServer v1;
v0 := @this: io.vertx.mutiny.core.net.NetServer;
v1 = v0.<io.vertx.mutiny.core.net.NetServer: io.vertx.core.net.NetServer delegate>;
v2 = virtualinvoke v1.<java.lang.Object: int hashCode()>();
return v2;
}
public boolean isMetricsEnabled()
{
io.vertx.mutiny.core.net.NetServer v0;
io.vertx.core.net.NetServer v1;
boolean v2;
v0 := @this: io.vertx.mutiny.core.net.NetServer;
v1 = v0.<io.vertx.mutiny.core.net.NetServer: io.vertx.core.net.NetServer delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.net.NetServer: boolean isMetricsEnabled()>();
return v2;
}
public io.vertx.mutiny.core.streams.ReadStream connectStream()
{
io.vertx.mutiny.core.net.NetServer v0;
io.vertx.core.net.NetServer v1;
io.vertx.mutiny.core.streams.ReadStream v4;
io.smallrye.mutiny.vertx.TypeArg v3;
io.vertx.core.streams.ReadStream v2;
v0 := @this: io.vertx.mutiny.core.net.NetServer;
v1 = v0.<io.vertx.mutiny.core.net.NetServer: io.vertx.core.net.NetServer delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.net.NetServer: io.vertx.core.streams.ReadStream connectStream()>();
v3 = <io.vertx.mutiny.core.net.NetServer: io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_0>;
v4 = staticinvoke <io.vertx.mutiny.core.streams.ReadStream: io.vertx.mutiny.core.streams.ReadStream newInstance(io.vertx.core.streams.ReadStream,io.smallrye.mutiny.vertx.TypeArg)>(v2, v3);
return v4;
}
private io.vertx.mutiny.core.net.NetServer __connectHandler(io.vertx.core.Handler)
{
io.vertx.mutiny.core.net.NetServer v0, v6;
io.vertx.core.net.NetServer v2, v5;
io.smallrye.mutiny.vertx.DelegatingHandler v3;
io.vertx.core.Handler v1;
java.util.function.Function v4;
v0 := @this: io.vertx.mutiny.core.net.NetServer;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.net.NetServer: io.vertx.core.net.NetServer delegate>;
v3 = new io.smallrye.mutiny.vertx.DelegatingHandler;
v4 = staticinvoke <io.vertx.mutiny.core.net.NetServer$lambda___connectHandler_3__2054: java.util.function.Function bootstrap$()>();
specialinvoke v3.<io.smallrye.mutiny.vertx.DelegatingHandler: void <init>(io.vertx.core.Handler,java.util.function.Function)>(v1, v4);
v5 = interfaceinvoke v2.<io.vertx.core.net.NetServer: io.vertx.core.net.NetServer connectHandler(io.vertx.core.Handler)>(v3);
v6 = staticinvoke <io.vertx.mutiny.core.net.NetServer: io.vertx.mutiny.core.net.NetServer newInstance(io.vertx.core.net.NetServer)>(v5);
return v6;
}
public io.vertx.mutiny.core.net.NetServer connectHandler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.net.NetServer v0, v3;
v0 := @this: io.vertx.mutiny.core.net.NetServer;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.net.NetServer: io.vertx.mutiny.core.net.NetServer __connectHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.smallrye.mutiny.Uni listen()
{
java.util.function.Consumer v1;
io.vertx.mutiny.core.net.NetServer v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.net.NetServer;
v1 = staticinvoke <io.vertx.mutiny.core.net.NetServer$lambda_listen_6__2055: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.net.NetServer)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public io.vertx.mutiny.core.net.NetServer listenAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
io.vertx.mutiny.core.net.NetServer v0;
java.lang.Object v3;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.net.NetServer;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetServer: io.smallrye.mutiny.Uni listen()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public io.vertx.mutiny.core.net.NetServer listenAndForget()
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.net.NetServer v0;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.net.NetServer;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetServer: io.smallrye.mutiny.Uni listen()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return v0;
}
public io.smallrye.mutiny.Uni listen(int, java.lang.String)
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.net.NetServer v0;
int v1;
java.lang.String v2;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.net.NetServer;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <io.vertx.mutiny.core.net.NetServer$lambda_listen_9__2056: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.net.NetServer,int,java.lang.String)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public io.vertx.mutiny.core.net.NetServer listenAndAwait(int, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v4;
io.vertx.mutiny.core.net.NetServer v0;
int v1;
java.lang.Object v5;
java.lang.String v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.net.NetServer;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetServer: io.smallrye.mutiny.Uni listen(int,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public io.vertx.mutiny.core.net.NetServer listenAndForget(int, java.lang.String)
{
java.util.function.Consumer v5;
io.vertx.mutiny.core.net.NetServer v0;
int v1;
io.smallrye.mutiny.groups.UniSubscribe v4;
java.lang.String v2;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.net.NetServer;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetServer: io.smallrye.mutiny.Uni listen(int,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return v0;
}
public io.smallrye.mutiny.Uni listen(int)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.net.NetServer v0;
int v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.net.NetServer;
v1 := @parameter0: int;
v2 = staticinvoke <io.vertx.mutiny.core.net.NetServer$lambda_listen_12__2057: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.net.NetServer,int)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public io.vertx.mutiny.core.net.NetServer listenAndAwait(int)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.net.NetServer v0;
int v1;
java.lang.Object v4;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.net.NetServer;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetServer: io.smallrye.mutiny.Uni listen(int)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.net.NetServer listenAndForget(int)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.net.NetServer v0;
int v1;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.net.NetServer;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetServer: io.smallrye.mutiny.Uni listen(int)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.smallrye.mutiny.Uni listen(io.vertx.mutiny.core.net.SocketAddress)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.net.NetServer v0;
io.vertx.mutiny.core.net.SocketAddress v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.net.NetServer;
v1 := @parameter0: io.vertx.mutiny.core.net.SocketAddress;
v2 = staticinvoke <io.vertx.mutiny.core.net.NetServer$lambda_listen_15__2058: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.net.NetServer,io.vertx.mutiny.core.net.SocketAddress)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public io.vertx.mutiny.core.net.NetServer listenAndAwait(io.vertx.mutiny.core.net.SocketAddress)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.net.NetServer v0;
io.vertx.mutiny.core.net.SocketAddress v1;
java.lang.Object v4;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.net.NetServer;
v1 := @parameter0: io.vertx.mutiny.core.net.SocketAddress;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetServer: io.smallrye.mutiny.Uni listen(io.vertx.mutiny.core.net.SocketAddress)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.net.NetServer listenAndForget(io.vertx.mutiny.core.net.SocketAddress)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.net.NetServer v0;
io.vertx.mutiny.core.net.SocketAddress v1;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.net.NetServer;
v1 := @parameter0: io.vertx.mutiny.core.net.SocketAddress;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetServer: io.smallrye.mutiny.Uni listen(io.vertx.mutiny.core.net.SocketAddress)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.smallrye.mutiny.Uni close()
{
java.util.function.Consumer v1;
io.vertx.mutiny.core.net.NetServer v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.net.NetServer;
v1 = staticinvoke <io.vertx.mutiny.core.net.NetServer$lambda_close_16__2059: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.net.NetServer)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public java.lang.Void closeAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
io.vertx.mutiny.core.net.NetServer v0;
java.lang.Object v3;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.net.NetServer;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetServer: io.smallrye.mutiny.Uni close()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public void closeAndForget()
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.net.NetServer v0;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.net.NetServer;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetServer: io.smallrye.mutiny.Uni close()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return;
}
public int actualPort()
{
int v2;
io.vertx.mutiny.core.net.NetServer v0;
io.vertx.core.net.NetServer v1;
v0 := @this: io.vertx.mutiny.core.net.NetServer;
v1 = v0.<io.vertx.mutiny.core.net.NetServer: io.vertx.core.net.NetServer delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.net.NetServer: int actualPort()>();
return v2;
}
public io.smallrye.mutiny.Uni updateSSLOptions(io.vertx.core.net.SSLOptions)
{
java.util.function.Consumer v2;
io.vertx.core.net.SSLOptions v1;
io.vertx.mutiny.core.net.NetServer v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.net.NetServer;
v1 := @parameter0: io.vertx.core.net.SSLOptions;
v2 = staticinvoke <io.vertx.mutiny.core.net.NetServer$lambda_updateSSLOptions_17__2060: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.net.NetServer,io.vertx.core.net.SSLOptions)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void updateSSLOptionsAndAwait(io.vertx.core.net.SSLOptions)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.core.net.SSLOptions v1;
io.vertx.mutiny.core.net.NetServer v0;
java.lang.Object v4;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.net.NetServer;
v1 := @parameter0: io.vertx.core.net.SSLOptions;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetServer: io.smallrye.mutiny.Uni updateSSLOptions(io.vertx.core.net.SSLOptions)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void updateSSLOptionsAndForget(io.vertx.core.net.SSLOptions)
{
java.util.function.Consumer v4;
io.vertx.core.net.SSLOptions v1;
io.vertx.mutiny.core.net.NetServer v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.net.NetServer;
v1 := @parameter0: io.vertx.core.net.SSLOptions;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetServer: io.smallrye.mutiny.Uni updateSSLOptions(io.vertx.core.net.SSLOptions)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public static io.vertx.mutiny.core.net.NetServer newInstance(io.vertx.core.net.NetServer)
{
io.vertx.mutiny.core.net.NetServer v1;
io.vertx.core.net.NetServer v0;
v0 := @parameter0: io.vertx.core.net.NetServer;
if v0 == null goto label1;
v1 = new io.vertx.mutiny.core.net.NetServer;
specialinvoke v1.<io.vertx.mutiny.core.net.NetServer: void <init>(io.vertx.core.net.NetServer)>(v0);
goto label2;
label1:
v1 = null;
label2:
return v1;
}
static void <clinit>()
{
io.smallrye.mutiny.vertx.TypeArg v0, v3;
java.util.function.Function v1, v2, v4, v5;
v0 = new io.smallrye.mutiny.vertx.TypeArg;
v1 = staticinvoke <io.vertx.mutiny.core.net.NetServer$lambda_static_0__2069: java.util.function.Function bootstrap$()>();
v2 = staticinvoke <io.vertx.mutiny.core.net.NetServer$getDelegate__2070: java.util.function.Function bootstrap$()>();
specialinvoke v0.<io.smallrye.mutiny.vertx.TypeArg: void <init>(java.util.function.Function,java.util.function.Function)>(v1, v2);
<io.vertx.mutiny.core.net.NetServer: io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG> = v0;
v3 = new io.smallrye.mutiny.vertx.TypeArg;
v4 = staticinvoke <io.vertx.mutiny.core.net.NetServer$lambda_static_1__2071: java.util.function.Function bootstrap$()>();
v5 = staticinvoke <io.vertx.mutiny.core.net.NetServer$lambda_static_2__2072: java.util.function.Function bootstrap$()>();
specialinvoke v3.<io.smallrye.mutiny.vertx.TypeArg: void <init>(java.util.function.Function,java.util.function.Function)>(v4, v5);
<io.vertx.mutiny.core.net.NetServer: io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_0> = v3;
return;
}
}