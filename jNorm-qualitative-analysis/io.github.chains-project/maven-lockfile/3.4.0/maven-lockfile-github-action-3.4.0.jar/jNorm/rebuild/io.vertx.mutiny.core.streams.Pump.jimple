public class io.vertx.mutiny.core.streams.Pump extends java.lang.Object
{
public static final io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG;
private final io.vertx.core.streams.Pump delegate;
public void <init>(io.vertx.core.streams.Pump)
{
io.vertx.core.streams.Pump v1;
io.vertx.mutiny.core.streams.Pump v0;
v0 := @this: io.vertx.mutiny.core.streams.Pump;
v1 := @parameter0: io.vertx.core.streams.Pump;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.streams.Pump: io.vertx.core.streams.Pump delegate> = v1;
return;
}
public void <init>(java.lang.Object)
{
io.vertx.mutiny.core.streams.Pump v0;
java.lang.Object v1;
v0 := @this: io.vertx.mutiny.core.streams.Pump;
v1 := @parameter0: java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.streams.Pump: io.vertx.core.streams.Pump delegate> = v1;
return;
}
void <init>()
{
io.vertx.mutiny.core.streams.Pump v0;
v0 := @this: io.vertx.mutiny.core.streams.Pump;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.streams.Pump: io.vertx.core.streams.Pump delegate> = null;
return;
}
public io.vertx.core.streams.Pump getDelegate()
{
io.vertx.core.streams.Pump v1;
io.vertx.mutiny.core.streams.Pump v0;
v0 := @this: io.vertx.mutiny.core.streams.Pump;
v1 = v0.<io.vertx.mutiny.core.streams.Pump: io.vertx.core.streams.Pump delegate>;
return v1;
}
public java.lang.String toString()
{
io.vertx.core.streams.Pump v1;
io.vertx.mutiny.core.streams.Pump v0;
java.lang.String v2;
v0 := @this: io.vertx.mutiny.core.streams.Pump;
v1 = v0.<io.vertx.mutiny.core.streams.Pump: io.vertx.core.streams.Pump delegate>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
return v2;
}
public boolean equals(java.lang.Object)
{
io.vertx.core.streams.Pump v4, v5;
io.vertx.mutiny.core.streams.Pump v0;
java.lang.Class v2, v3;
java.lang.Object v1;
boolean v6;
v0 := @this: io.vertx.mutiny.core.streams.Pump;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v1 == null goto label2;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v2 == v3 goto label3;
label2:
return 0;
label3:
v4 = v0.<io.vertx.mutiny.core.streams.Pump: io.vertx.core.streams.Pump delegate>;
v5 = v1.<io.vertx.mutiny.core.streams.Pump: io.vertx.core.streams.Pump delegate>;
v6 = virtualinvoke v4.<java.lang.Object: boolean equals(java.lang.Object)>(v5);
return v6;
}
public int hashCode()
{
int v2;
io.vertx.core.streams.Pump v1;
io.vertx.mutiny.core.streams.Pump v0;
v0 := @this: io.vertx.mutiny.core.streams.Pump;
v1 = v0.<io.vertx.mutiny.core.streams.Pump: io.vertx.core.streams.Pump delegate>;
v2 = virtualinvoke v1.<java.lang.Object: int hashCode()>();
return v2;
}
public static io.vertx.mutiny.core.streams.Pump pump(io.vertx.mutiny.core.streams.ReadStream, io.vertx.mutiny.core.streams.WriteStream)
{
io.vertx.mutiny.core.streams.WriteStream v1;
io.vertx.mutiny.core.streams.ReadStream v0;
io.vertx.core.streams.WriteStream v3;
io.vertx.core.streams.ReadStream v2;
io.vertx.core.streams.Pump v4;
io.vertx.mutiny.core.streams.Pump v5;
v0 := @parameter0: io.vertx.mutiny.core.streams.ReadStream;
v1 := @parameter1: io.vertx.mutiny.core.streams.WriteStream;
v2 = interfaceinvoke v0.<io.vertx.mutiny.core.streams.ReadStream: io.vertx.core.streams.ReadStream getDelegate()>();
v3 = interfaceinvoke v1.<io.vertx.mutiny.core.streams.WriteStream: io.vertx.core.streams.WriteStream getDelegate()>();
v4 = staticinvoke <io.vertx.core.streams.Pump: io.vertx.core.streams.Pump pump(io.vertx.core.streams.ReadStream,io.vertx.core.streams.WriteStream)>(v2, v3);
v5 = staticinvoke <io.vertx.mutiny.core.streams.Pump: io.vertx.mutiny.core.streams.Pump newInstance(io.vertx.core.streams.Pump)>(v4);
return v5;
}
public static io.vertx.mutiny.core.streams.Pump pump(java.util.concurrent.Flow$Publisher, io.vertx.mutiny.core.streams.WriteStream)
{
java.util.function.Function v2;
io.vertx.mutiny.core.streams.WriteStream v1;
java.util.concurrent.Flow$Publisher v0;
io.vertx.core.streams.WriteStream v5;
io.vertx.core.streams.ReadStream v3, v4;
io.vertx.core.streams.Pump v6;
io.vertx.mutiny.core.streams.Pump v7;
v0 := @parameter0: java.util.concurrent.Flow$Publisher;
v1 := @parameter1: io.vertx.mutiny.core.streams.WriteStream;
v2 = staticinvoke <java.util.function.Function: java.util.function.Function identity()>();
v3 = staticinvoke <io.smallrye.mutiny.vertx.ReadStreamSubscriber: io.vertx.core.streams.ReadStream asReadStream(java.util.concurrent.Flow$Publisher,java.util.function.Function)>(v0, v2);
v4 = interfaceinvoke v3.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>();
v5 = interfaceinvoke v1.<io.vertx.mutiny.core.streams.WriteStream: io.vertx.core.streams.WriteStream getDelegate()>();
v6 = staticinvoke <io.vertx.core.streams.Pump: io.vertx.core.streams.Pump pump(io.vertx.core.streams.ReadStream,io.vertx.core.streams.WriteStream)>(v4, v5);
v7 = staticinvoke <io.vertx.mutiny.core.streams.Pump: io.vertx.mutiny.core.streams.Pump newInstance(io.vertx.core.streams.Pump)>(v6);
return v7;
}
public static io.vertx.mutiny.core.streams.Pump pump(io.vertx.mutiny.core.streams.ReadStream, io.vertx.mutiny.core.streams.WriteStream, int)
{
io.vertx.mutiny.core.streams.WriteStream v1;
io.vertx.mutiny.core.streams.ReadStream v0;
io.vertx.core.streams.WriteStream v4;
int v2;
io.vertx.core.streams.ReadStream v3;
io.vertx.core.streams.Pump v5;
io.vertx.mutiny.core.streams.Pump v6;
v0 := @parameter0: io.vertx.mutiny.core.streams.ReadStream;
v1 := @parameter1: io.vertx.mutiny.core.streams.WriteStream;
v2 := @parameter2: int;
v3 = interfaceinvoke v0.<io.vertx.mutiny.core.streams.ReadStream: io.vertx.core.streams.ReadStream getDelegate()>();
v4 = interfaceinvoke v1.<io.vertx.mutiny.core.streams.WriteStream: io.vertx.core.streams.WriteStream getDelegate()>();
v5 = staticinvoke <io.vertx.core.streams.Pump: io.vertx.core.streams.Pump pump(io.vertx.core.streams.ReadStream,io.vertx.core.streams.WriteStream,int)>(v3, v4, v2);
v6 = staticinvoke <io.vertx.mutiny.core.streams.Pump: io.vertx.mutiny.core.streams.Pump newInstance(io.vertx.core.streams.Pump)>(v5);
return v6;
}
public static io.vertx.mutiny.core.streams.Pump pump(java.util.concurrent.Flow$Publisher, io.vertx.mutiny.core.streams.WriteStream, int)
{
java.util.function.Function v3;
io.vertx.mutiny.core.streams.WriteStream v1;
java.util.concurrent.Flow$Publisher v0;
io.vertx.core.streams.WriteStream v6;
int v2;
io.vertx.core.streams.ReadStream v4, v5;
io.vertx.core.streams.Pump v7;
io.vertx.mutiny.core.streams.Pump v8;
v0 := @parameter0: java.util.concurrent.Flow$Publisher;
v1 := @parameter1: io.vertx.mutiny.core.streams.WriteStream;
v2 := @parameter2: int;
v3 = staticinvoke <java.util.function.Function: java.util.function.Function identity()>();
v4 = staticinvoke <io.smallrye.mutiny.vertx.ReadStreamSubscriber: io.vertx.core.streams.ReadStream asReadStream(java.util.concurrent.Flow$Publisher,java.util.function.Function)>(v0, v3);
v5 = interfaceinvoke v4.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>();
v6 = interfaceinvoke v1.<io.vertx.mutiny.core.streams.WriteStream: io.vertx.core.streams.WriteStream getDelegate()>();
v7 = staticinvoke <io.vertx.core.streams.Pump: io.vertx.core.streams.Pump pump(io.vertx.core.streams.ReadStream,io.vertx.core.streams.WriteStream,int)>(v5, v6, v2);
v8 = staticinvoke <io.vertx.mutiny.core.streams.Pump: io.vertx.mutiny.core.streams.Pump newInstance(io.vertx.core.streams.Pump)>(v7);
return v8;
}
public io.vertx.mutiny.core.streams.Pump setWriteQueueMaxSize(int)
{
int v1;
io.vertx.core.streams.Pump v2;
io.vertx.mutiny.core.streams.Pump v0;
v0 := @this: io.vertx.mutiny.core.streams.Pump;
v1 := @parameter0: int;
v2 = v0.<io.vertx.mutiny.core.streams.Pump: io.vertx.core.streams.Pump delegate>;
interfaceinvoke v2.<io.vertx.core.streams.Pump: io.vertx.core.streams.Pump setWriteQueueMaxSize(int)>(v1);
return v0;
}
public io.vertx.mutiny.core.streams.Pump start()
{
io.vertx.core.streams.Pump v1;
io.vertx.mutiny.core.streams.Pump v0;
v0 := @this: io.vertx.mutiny.core.streams.Pump;
v1 = v0.<io.vertx.mutiny.core.streams.Pump: io.vertx.core.streams.Pump delegate>;
interfaceinvoke v1.<io.vertx.core.streams.Pump: io.vertx.core.streams.Pump start()>();
return v0;
}
public io.vertx.mutiny.core.streams.Pump stop()
{
io.vertx.core.streams.Pump v1;
io.vertx.mutiny.core.streams.Pump v0;
v0 := @this: io.vertx.mutiny.core.streams.Pump;
v1 = v0.<io.vertx.mutiny.core.streams.Pump: io.vertx.core.streams.Pump delegate>;
interfaceinvoke v1.<io.vertx.core.streams.Pump: io.vertx.core.streams.Pump stop()>();
return v0;
}
public int numberPumped()
{
int v2;
io.vertx.core.streams.Pump v1;
io.vertx.mutiny.core.streams.Pump v0;
v0 := @this: io.vertx.mutiny.core.streams.Pump;
v1 = v0.<io.vertx.mutiny.core.streams.Pump: io.vertx.core.streams.Pump delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.streams.Pump: int numberPumped()>();
return v2;
}
public static io.vertx.mutiny.core.streams.Pump newInstance(io.vertx.core.streams.Pump)
{
io.vertx.core.streams.Pump v0;
io.vertx.mutiny.core.streams.Pump v1;
v0 := @parameter0: io.vertx.core.streams.Pump;
if v0 == null goto label1;
v1 = new io.vertx.mutiny.core.streams.Pump;
specialinvoke v1.<io.vertx.mutiny.core.streams.Pump: void <init>(io.vertx.core.streams.Pump)>(v0);
goto label2;
label1:
v1 = null;
label2:
return v1;
}
static void <clinit>()
{
java.util.function.Function v1, v2;
io.smallrye.mutiny.vertx.TypeArg v0;
v0 = new io.smallrye.mutiny.vertx.TypeArg;
v1 = staticinvoke <io.vertx.mutiny.core.streams.Pump$lambda_static_0__2304: java.util.function.Function bootstrap$()>();
v2 = staticinvoke <io.vertx.mutiny.core.streams.Pump$getDelegate__2305: java.util.function.Function bootstrap$()>();
specialinvoke v0.<io.smallrye.mutiny.vertx.TypeArg: void <init>(java.util.function.Function,java.util.function.Function)>(v1, v2);
<io.vertx.mutiny.core.streams.Pump: io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG> = v0;
return;
}
}