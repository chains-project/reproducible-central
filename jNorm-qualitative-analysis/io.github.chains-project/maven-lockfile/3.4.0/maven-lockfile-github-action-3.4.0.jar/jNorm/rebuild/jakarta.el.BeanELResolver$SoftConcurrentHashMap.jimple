class jakarta.el.BeanELResolver$SoftConcurrentHashMap extends java.util.concurrent.ConcurrentHashMap
{
private static final long serialVersionUID;
private static final int CACHE_INIT_SIZE;
private java.util.concurrent.ConcurrentHashMap map;
private java.lang.ref.ReferenceQueue refQ;
private void <init>()
{
java.util.concurrent.ConcurrentHashMap v1;
jakarta.el.BeanELResolver$SoftConcurrentHashMap v0;
java.lang.ref.ReferenceQueue v2;
v0 := @this: jakarta.el.BeanELResolver$SoftConcurrentHashMap;
specialinvoke v0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v1 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v1.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(1024);
v0.<jakarta.el.BeanELResolver$SoftConcurrentHashMap: java.util.concurrent.ConcurrentHashMap map> = v1;
v2 = new java.lang.ref.ReferenceQueue;
specialinvoke v2.<java.lang.ref.ReferenceQueue: void <init>()>();
v0.<jakarta.el.BeanELResolver$SoftConcurrentHashMap: java.lang.ref.ReferenceQueue refQ> = v2;
return;
}
private void cleanup()
{
java.lang.ref.Reference v2;
jakarta.el.BeanELResolver$SoftConcurrentHashMap v0;
java.util.concurrent.ConcurrentHashMap v3;
java.lang.Class v4;
java.lang.ref.ReferenceQueue v1;
v0 := @this: jakarta.el.BeanELResolver$SoftConcurrentHashMap;
label1:
v1 = v0.<jakarta.el.BeanELResolver$SoftConcurrentHashMap: java.lang.ref.ReferenceQueue refQ>;
v2 = virtualinvoke v1.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();
if v2 == null goto label2;
v3 = v0.<jakarta.el.BeanELResolver$SoftConcurrentHashMap: java.util.concurrent.ConcurrentHashMap map>;
v4 = v2.<jakarta.el.BeanELResolver$BPSoftReference: java.lang.Class key>;
virtualinvoke v3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(v4);
goto label1;
label2:
return;
}
public jakarta.el.BeanELResolver$BeanProperties put(java.lang.Class, jakarta.el.BeanELResolver$BeanProperties)
{
jakarta.el.BeanELResolver$BPSoftReference v4;
java.util.concurrent.ConcurrentHashMap v3;
java.lang.ref.ReferenceQueue v5;
jakarta.el.BeanELResolver$SoftConcurrentHashMap v0;
jakarta.el.BeanELResolver$BeanProperties v2;
java.lang.Class v1;
java.lang.Object v6, v7;
v0 := @this: jakarta.el.BeanELResolver$SoftConcurrentHashMap;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: jakarta.el.BeanELResolver$BeanProperties;
specialinvoke v0.<jakarta.el.BeanELResolver$SoftConcurrentHashMap: void cleanup()>();
v3 = v0.<jakarta.el.BeanELResolver$SoftConcurrentHashMap: java.util.concurrent.ConcurrentHashMap map>;
v4 = new jakarta.el.BeanELResolver$BPSoftReference;
v5 = v0.<jakarta.el.BeanELResolver$SoftConcurrentHashMap: java.lang.ref.ReferenceQueue refQ>;
specialinvoke v4.<jakarta.el.BeanELResolver$BPSoftReference: void <init>(java.lang.Class,jakarta.el.BeanELResolver$BeanProperties,java.lang.ref.ReferenceQueue)>(v1, v2, v5);
v6 = virtualinvoke v3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v4);
if v6 == null goto label1;
v7 = virtualinvoke v6.<jakarta.el.BeanELResolver$BPSoftReference: java.lang.Object get()>();
label1:
return v7;
}
public jakarta.el.BeanELResolver$BeanProperties putIfAbsent(java.lang.Class, jakarta.el.BeanELResolver$BeanProperties)
{
jakarta.el.BeanELResolver$BPSoftReference v4;
java.util.concurrent.ConcurrentHashMap v3;
java.lang.ref.ReferenceQueue v5;
jakarta.el.BeanELResolver$SoftConcurrentHashMap v0;
jakarta.el.BeanELResolver$BeanProperties v2;
java.lang.Class v1;
java.lang.Object v6, v7;
v0 := @this: jakarta.el.BeanELResolver$SoftConcurrentHashMap;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: jakarta.el.BeanELResolver$BeanProperties;
specialinvoke v0.<jakarta.el.BeanELResolver$SoftConcurrentHashMap: void cleanup()>();
v3 = v0.<jakarta.el.BeanELResolver$SoftConcurrentHashMap: java.util.concurrent.ConcurrentHashMap map>;
v4 = new jakarta.el.BeanELResolver$BPSoftReference;
v5 = v0.<jakarta.el.BeanELResolver$SoftConcurrentHashMap: java.lang.ref.ReferenceQueue refQ>;
specialinvoke v4.<jakarta.el.BeanELResolver$BPSoftReference: void <init>(java.lang.Class,jakarta.el.BeanELResolver$BeanProperties,java.lang.ref.ReferenceQueue)>(v1, v2, v5);
v6 = virtualinvoke v3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(v1, v4);
if v6 == null goto label1;
v7 = virtualinvoke v6.<jakarta.el.BeanELResolver$BPSoftReference: java.lang.Object get()>();
label1:
return v7;
}
public jakarta.el.BeanELResolver$BeanProperties get(java.lang.Object)
{
jakarta.el.BeanELResolver$SoftConcurrentHashMap v0;
java.util.concurrent.ConcurrentHashMap v2, v5;
java.lang.Object v1, v3, v4, v6;
v0 := @this: jakarta.el.BeanELResolver$SoftConcurrentHashMap;
v1 := @parameter0: java.lang.Object;
specialinvoke v0.<jakarta.el.BeanELResolver$SoftConcurrentHashMap: void cleanup()>();
v2 = v0.<jakarta.el.BeanELResolver$SoftConcurrentHashMap: java.util.concurrent.ConcurrentHashMap map>;
v3 = virtualinvoke v2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(v1);
if v3 != null goto label1;
return null;
label1:
v4 = virtualinvoke v3.<jakarta.el.BeanELResolver$BPSoftReference: java.lang.Object get()>();
if v4 != null goto label2;
v5 = v0.<jakarta.el.BeanELResolver$SoftConcurrentHashMap: java.util.concurrent.ConcurrentHashMap map>;
virtualinvoke v5.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(v1);
return null;
label2:
v6 = virtualinvoke v3.<jakarta.el.BeanELResolver$BPSoftReference: java.lang.Object get()>();
return v6;
}
}