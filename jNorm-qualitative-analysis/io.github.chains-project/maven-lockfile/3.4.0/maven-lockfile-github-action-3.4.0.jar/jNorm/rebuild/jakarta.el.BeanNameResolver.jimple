public abstract class jakarta.el.BeanNameResolver extends java.lang.Object
{
public void <init>()
{
jakarta.el.BeanNameResolver v0;
v0 := @this: jakarta.el.BeanNameResolver;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public boolean isNameResolved(java.lang.String)
{
jakarta.el.BeanNameResolver v0;
java.lang.String v1;
v0 := @this: jakarta.el.BeanNameResolver;
v1 := @parameter0: java.lang.String;
return 0;
}
public java.lang.Object getBean(java.lang.String)
{
jakarta.el.BeanNameResolver v0;
java.lang.String v1;
v0 := @this: jakarta.el.BeanNameResolver;
v1 := @parameter0: java.lang.String;
return null;
}
public void setBeanValue(java.lang.String, java.lang.Object) throws jakarta.el.PropertyNotWritableException
{
jakarta.el.BeanNameResolver v0;
java.lang.Object v2;
java.lang.String v1;
jakarta.el.PropertyNotWritableException v3;
v0 := @this: jakarta.el.BeanNameResolver;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object;
v3 = new jakarta.el.PropertyNotWritableException;
specialinvoke v3.<jakarta.el.PropertyNotWritableException: void <init>()>();
throw v3;
}
public boolean isReadOnly(java.lang.String)
{
jakarta.el.BeanNameResolver v0;
java.lang.String v1;
v0 := @this: jakarta.el.BeanNameResolver;
v1 := @parameter0: java.lang.String;
return 1;
}
public boolean canCreateBean(java.lang.String)
{
jakarta.el.BeanNameResolver v0;
java.lang.String v1;
v0 := @this: jakarta.el.BeanNameResolver;
v1 := @parameter0: java.lang.String;
return 0;
}
}