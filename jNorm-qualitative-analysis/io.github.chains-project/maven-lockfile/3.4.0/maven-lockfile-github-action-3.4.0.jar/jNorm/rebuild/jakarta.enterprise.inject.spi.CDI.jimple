public abstract class jakarta.enterprise.inject.spi.CDI extends java.lang.Object implements jakarta.enterprise.inject.Instance
{
private static final java.lang.Object lock;
private static volatile boolean providerSetManually;
protected static volatile java.util.Set discoveredProviders;
protected static volatile jakarta.enterprise.inject.spi.CDIProvider configuredProvider;
public void <init>()
{
jakarta.enterprise.inject.spi.CDI v0;
v0 := @this: jakarta.enterprise.inject.spi.CDI;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static jakarta.enterprise.inject.spi.CDI current()
{
jakarta.enterprise.inject.spi.CDI v1;
jakarta.enterprise.inject.spi.CDIProvider v0;
v0 = staticinvoke <jakarta.enterprise.inject.spi.CDI: jakarta.enterprise.inject.spi.CDIProvider getCDIProvider()>();
v1 = interfaceinvoke v0.<jakarta.enterprise.inject.spi.CDIProvider: jakarta.enterprise.inject.spi.CDI getCDI()>();
return v1;
}
private static jakarta.enterprise.inject.spi.CDIProvider getCDIProvider()
{
java.lang.Throwable v9;
java.lang.IllegalStateException v4;
jakarta.enterprise.inject.spi.CDI v2;
java.util.function.Supplier v15;
boolean v5;
jakarta.enterprise.inject.spi.CDIProvider v0, v1, v17, v3;
java.util.function.Predicate v12;
java.util.Set v10, v6, v8;
java.util.stream.Stream v11, v13;
java.util.Optional v14;
java.lang.Object v16, v7;
label1:
v0 = <jakarta.enterprise.inject.spi.CDI: jakarta.enterprise.inject.spi.CDIProvider configuredProvider>;
if v0 == null goto label4;
v1 = <jakarta.enterprise.inject.spi.CDI: jakarta.enterprise.inject.spi.CDIProvider configuredProvider>;
v2 = interfaceinvoke v1.<jakarta.enterprise.inject.spi.CDIProvider: jakarta.enterprise.inject.spi.CDI getCDI()>();
if v2 == null goto label4;
v3 = <jakarta.enterprise.inject.spi.CDI: jakarta.enterprise.inject.spi.CDIProvider configuredProvider>;
label2:
return v3;
label3:
v4 := @caughtexception;
v5 = <jakarta.enterprise.inject.spi.CDI: boolean providerSetManually>;
if v5 == 0 goto label4;
throw v4;
label4:
<jakarta.enterprise.inject.spi.CDI: jakarta.enterprise.inject.spi.CDIProvider configuredProvider> = null;
v6 = <jakarta.enterprise.inject.spi.CDI: java.util.Set discoveredProviders>;
if v6 != null goto label9;
v7 = <jakarta.enterprise.inject.spi.CDI: java.lang.Object lock>;
entermonitor v7;
label5:
v8 = <jakarta.enterprise.inject.spi.CDI: java.util.Set discoveredProviders>;
if v8 != null goto label6;
staticinvoke <jakarta.enterprise.inject.spi.CDI: void findAllProviders()>();
label6:
exitmonitor v7;
label7:
goto label9;
label8:
v9 := @caughtexception;
exitmonitor v7;
throw v9;
label9:
v10 = <jakarta.enterprise.inject.spi.CDI: java.util.Set discoveredProviders>;
v11 = interfaceinvoke v10.<java.util.Set: java.util.stream.Stream stream()>();
v12 = staticinvoke <jakarta.enterprise.inject.spi.CDI$checkProvider__2610: java.util.function.Predicate bootstrap$()>();
v13 = interfaceinvoke v11.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(v12);
v14 = interfaceinvoke v13.<java.util.stream.Stream: java.util.Optional findFirst()>();
v15 = staticinvoke <jakarta.enterprise.inject.spi.CDI$lambda_getCDIProvider_0__2611: java.util.function.Supplier bootstrap$()>();
v16 = virtualinvoke v14.<java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>(v15);
<jakarta.enterprise.inject.spi.CDI: jakarta.enterprise.inject.spi.CDIProvider configuredProvider> = v16;
v17 = <jakarta.enterprise.inject.spi.CDI: jakarta.enterprise.inject.spi.CDIProvider configuredProvider>;
return v17;
catch java.lang.IllegalStateException from label1 to label2 with label3;
catch java.lang.Throwable from label5 to label7 with label8;
}
public static boolean checkProvider(jakarta.enterprise.inject.spi.CDIProvider)
{
java.lang.IllegalStateException v3;
jakarta.enterprise.inject.spi.CDI v1;
jakarta.enterprise.inject.spi.CDIProvider v0;
boolean v2;
v0 := @parameter0: jakarta.enterprise.inject.spi.CDIProvider;
label1:
v1 = interfaceinvoke v0.<jakarta.enterprise.inject.spi.CDIProvider: jakarta.enterprise.inject.spi.CDI getCDI()>();
if v1 == null goto label2;
v2 = 1;
goto label3;
label2:
v2 = 0;
label3:
return v2;
label4:
v3 := @caughtexception;
return 0;
catch java.lang.IllegalStateException from label1 to label3 with label4;
}
public static void setCDIProvider(jakarta.enterprise.inject.spi.CDIProvider)
{
java.lang.IllegalStateException v1;
jakarta.enterprise.inject.spi.CDIProvider v0;
v0 := @parameter0: jakarta.enterprise.inject.spi.CDIProvider;
if v0 == null goto label1;
<jakarta.enterprise.inject.spi.CDI: boolean providerSetManually> = 1;
<jakarta.enterprise.inject.spi.CDI: jakarta.enterprise.inject.spi.CDIProvider configuredProvider> = v0;
goto label2;
label1:
v1 = new java.lang.IllegalStateException;
specialinvoke v1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("CDIProvider must not be null");
throw v1;
label2:
return;
}
private static void findAllProviders()
{
java.lang.IllegalStateException v12, v9;
java.util.Iterator v7;
java.util.function.ToIntFunction v1;
java.util.Set v13;
java.util.ServiceLoader v6;
java.util.TreeSet v0;
java.util.function.Consumer v10;
java.util.ServiceConfigurationError v11;
java.lang.Class v4;
java.lang.ClassLoader v5;
java.util.Comparator v2, v3;
boolean v8;
v0 = new java.util.TreeSet;
v1 = staticinvoke <jakarta.enterprise.inject.spi.CDI$getPriority__2612: java.util.function.ToIntFunction bootstrap$()>();
v2 = staticinvoke <java.util.Comparator: java.util.Comparator comparingInt(java.util.function.ToIntFunction)>(v1);
v3 = interfaceinvoke v2.<java.util.Comparator: java.util.Comparator reversed()>();
specialinvoke v0.<java.util.TreeSet: void <init>(java.util.Comparator)>(v3);
v4 = class "Ljakarta/enterprise/inject/spi/CDI;";
v5 = virtualinvoke v4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
v6 = staticinvoke <jakarta.enterprise.inject.spi.SecurityActions: java.util.ServiceLoader loadService(java.lang.Class,java.lang.ClassLoader)>(class "Ljakarta/enterprise/inject/spi/CDIProvider;", v5);
v7 = virtualinvoke v6.<java.util.ServiceLoader: java.util.Iterator iterator()>();
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 != 0 goto label1;
v9 = new java.lang.IllegalStateException;
specialinvoke v9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unable to locate CDIProvider");
throw v9;
label1:
virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v10 = staticinvoke <jakarta.enterprise.inject.spi.CDI$add__2613: java.util.function.Consumer bootstrap$(java.util.Set)>(v0);
virtualinvoke v6.<java.util.ServiceLoader: void forEach(java.util.function.Consumer)>(v10);
label2:
goto label4;
label3:
v11 := @caughtexception;
v12 = new java.lang.IllegalStateException;
specialinvoke v12.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(v11);
throw v12;
label4:
v13 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(v0);
<jakarta.enterprise.inject.spi.CDI: java.util.Set discoveredProviders> = v13;
return;
catch java.util.ServiceConfigurationError from label1 to label2 with label3;
}
public abstract jakarta.enterprise.inject.spi.BeanManager getBeanManager();
public jakarta.enterprise.inject.spi.BeanContainer getBeanContainer()
{
jakarta.enterprise.inject.spi.CDI v0;
jakarta.enterprise.inject.spi.BeanManager v1;
v0 := @this: jakarta.enterprise.inject.spi.CDI;
v1 = virtualinvoke v0.<jakarta.enterprise.inject.spi.CDI: jakarta.enterprise.inject.spi.BeanManager getBeanManager()>();
return v1;
}
static void <clinit>()
{
java.lang.Object v0;
v0 = new java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
<jakarta.enterprise.inject.spi.CDI: java.lang.Object lock> = v0;
<jakarta.enterprise.inject.spi.CDI: boolean providerSetManually> = 0;
<jakarta.enterprise.inject.spi.CDI: java.util.Set discoveredProviders> = null;
<jakarta.enterprise.inject.spi.CDI: jakarta.enterprise.inject.spi.CDIProvider configuredProvider> = null;
return;
}
}