public interface  jakarta.enterprise.inject.spi.configurator.ObserverMethodConfigurator extends java.lang.Object
{
public abstract jakarta.enterprise.inject.spi.configurator.ObserverMethodConfigurator read(java.lang.reflect.Method);
public abstract jakarta.enterprise.inject.spi.configurator.ObserverMethodConfigurator read(jakarta.enterprise.inject.spi.AnnotatedMethod);
public abstract jakarta.enterprise.inject.spi.configurator.ObserverMethodConfigurator read(jakarta.enterprise.inject.spi.ObserverMethod);
public abstract jakarta.enterprise.inject.spi.configurator.ObserverMethodConfigurator beanClass(java.lang.Class);
public abstract jakarta.enterprise.inject.spi.configurator.ObserverMethodConfigurator observedType(java.lang.reflect.Type);
public abstract jakarta.enterprise.inject.spi.configurator.ObserverMethodConfigurator addQualifier(java.lang.'annotation'.Annotation);
public abstract transient jakarta.enterprise.inject.spi.configurator.ObserverMethodConfigurator addQualifiers(java.lang.'annotation'.Annotation[]);
public abstract jakarta.enterprise.inject.spi.configurator.ObserverMethodConfigurator addQualifiers(java.util.Set);
public abstract transient jakarta.enterprise.inject.spi.configurator.ObserverMethodConfigurator qualifiers(java.lang.'annotation'.Annotation[]);
public abstract jakarta.enterprise.inject.spi.configurator.ObserverMethodConfigurator qualifiers(java.util.Set);
public abstract jakarta.enterprise.inject.spi.configurator.ObserverMethodConfigurator reception(jakarta.enterprise.event.Reception);
public abstract jakarta.enterprise.inject.spi.configurator.ObserverMethodConfigurator transactionPhase(jakarta.enterprise.event.TransactionPhase);
public abstract jakarta.enterprise.inject.spi.configurator.ObserverMethodConfigurator priority(int);
public abstract jakarta.enterprise.inject.spi.configurator.ObserverMethodConfigurator notifyWith(jakarta.enterprise.inject.spi.configurator.ObserverMethodConfigurator$EventConsumer);
public abstract jakarta.enterprise.inject.spi.configurator.ObserverMethodConfigurator async(boolean);
}