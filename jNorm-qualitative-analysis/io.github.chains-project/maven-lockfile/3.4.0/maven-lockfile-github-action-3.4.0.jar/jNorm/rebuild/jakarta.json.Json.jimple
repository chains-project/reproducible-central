public final class jakarta.json.Json extends java.lang.Object
{
private void <init>()
{
jakarta.json.Json v0;
v0 := @this: jakarta.json.Json;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static jakarta.json.stream.JsonParser createParser(java.io.Reader)
{
jakarta.json.spi.JsonProvider v1;
jakarta.json.stream.JsonParser v2;
java.io.Reader v0;
v0 := @parameter0: java.io.Reader;
v1 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider provider()>();
v2 = virtualinvoke v1.<jakarta.json.spi.JsonProvider: jakarta.json.stream.JsonParser createParser(java.io.Reader)>(v0);
return v2;
}
public static jakarta.json.stream.JsonParser createParser(java.io.InputStream)
{
jakarta.json.spi.JsonProvider v1;
jakarta.json.stream.JsonParser v2;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider provider()>();
v2 = virtualinvoke v1.<jakarta.json.spi.JsonProvider: jakarta.json.stream.JsonParser createParser(java.io.InputStream)>(v0);
return v2;
}
public static jakarta.json.stream.JsonGenerator createGenerator(java.io.Writer)
{
java.io.Writer v0;
jakarta.json.spi.JsonProvider v1;
jakarta.json.stream.JsonGenerator v2;
v0 := @parameter0: java.io.Writer;
v1 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider provider()>();
v2 = virtualinvoke v1.<jakarta.json.spi.JsonProvider: jakarta.json.stream.JsonGenerator createGenerator(java.io.Writer)>(v0);
return v2;
}
public static jakarta.json.stream.JsonGenerator createGenerator(java.io.OutputStream)
{
java.io.OutputStream v0;
jakarta.json.spi.JsonProvider v1;
jakarta.json.stream.JsonGenerator v2;
v0 := @parameter0: java.io.OutputStream;
v1 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider provider()>();
v2 = virtualinvoke v1.<jakarta.json.spi.JsonProvider: jakarta.json.stream.JsonGenerator createGenerator(java.io.OutputStream)>(v0);
return v2;
}
public static jakarta.json.stream.JsonParserFactory createParserFactory(java.util.Map)
{
jakarta.json.spi.JsonProvider v1;
jakarta.json.stream.JsonParserFactory v2;
java.util.Map v0;
v0 := @parameter0: java.util.Map;
v1 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider provider()>();
v2 = virtualinvoke v1.<jakarta.json.spi.JsonProvider: jakarta.json.stream.JsonParserFactory createParserFactory(java.util.Map)>(v0);
return v2;
}
public static jakarta.json.stream.JsonGeneratorFactory createGeneratorFactory(java.util.Map)
{
jakarta.json.stream.JsonGeneratorFactory v2;
jakarta.json.spi.JsonProvider v1;
java.util.Map v0;
v0 := @parameter0: java.util.Map;
v1 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider provider()>();
v2 = virtualinvoke v1.<jakarta.json.spi.JsonProvider: jakarta.json.stream.JsonGeneratorFactory createGeneratorFactory(java.util.Map)>(v0);
return v2;
}
public static jakarta.json.JsonWriter createWriter(java.io.Writer)
{
java.io.Writer v0;
jakarta.json.spi.JsonProvider v1;
jakarta.json.JsonWriter v2;
v0 := @parameter0: java.io.Writer;
v1 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider provider()>();
v2 = virtualinvoke v1.<jakarta.json.spi.JsonProvider: jakarta.json.JsonWriter createWriter(java.io.Writer)>(v0);
return v2;
}
public static jakarta.json.JsonWriter createWriter(java.io.OutputStream)
{
java.io.OutputStream v0;
jakarta.json.spi.JsonProvider v1;
jakarta.json.JsonWriter v2;
v0 := @parameter0: java.io.OutputStream;
v1 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider provider()>();
v2 = virtualinvoke v1.<jakarta.json.spi.JsonProvider: jakarta.json.JsonWriter createWriter(java.io.OutputStream)>(v0);
return v2;
}
public static jakarta.json.JsonReader createReader(java.io.Reader)
{
jakarta.json.spi.JsonProvider v1;
jakarta.json.JsonReader v2;
java.io.Reader v0;
v0 := @parameter0: java.io.Reader;
v1 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider provider()>();
v2 = virtualinvoke v1.<jakarta.json.spi.JsonProvider: jakarta.json.JsonReader createReader(java.io.Reader)>(v0);
return v2;
}
public static jakarta.json.JsonReader createReader(java.io.InputStream)
{
jakarta.json.spi.JsonProvider v1;
jakarta.json.JsonReader v2;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider provider()>();
v2 = virtualinvoke v1.<jakarta.json.spi.JsonProvider: jakarta.json.JsonReader createReader(java.io.InputStream)>(v0);
return v2;
}
public static jakarta.json.JsonReaderFactory createReaderFactory(java.util.Map)
{
jakarta.json.spi.JsonProvider v1;
jakarta.json.JsonReaderFactory v2;
java.util.Map v0;
v0 := @parameter0: java.util.Map;
v1 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider provider()>();
v2 = virtualinvoke v1.<jakarta.json.spi.JsonProvider: jakarta.json.JsonReaderFactory createReaderFactory(java.util.Map)>(v0);
return v2;
}
public static jakarta.json.JsonWriterFactory createWriterFactory(java.util.Map)
{
jakarta.json.JsonWriterFactory v2;
jakarta.json.spi.JsonProvider v1;
java.util.Map v0;
v0 := @parameter0: java.util.Map;
v1 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider provider()>();
v2 = virtualinvoke v1.<jakarta.json.spi.JsonProvider: jakarta.json.JsonWriterFactory createWriterFactory(java.util.Map)>(v0);
return v2;
}
public static jakarta.json.JsonArrayBuilder createArrayBuilder()
{
jakarta.json.JsonArrayBuilder v1;
jakarta.json.spi.JsonProvider v0;
v0 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider provider()>();
v1 = virtualinvoke v0.<jakarta.json.spi.JsonProvider: jakarta.json.JsonArrayBuilder createArrayBuilder()>();
return v1;
}
public static jakarta.json.JsonArrayBuilder createArrayBuilder(jakarta.json.JsonArray)
{
jakarta.json.JsonArrayBuilder v2;
jakarta.json.spi.JsonProvider v1;
jakarta.json.JsonArray v0;
v0 := @parameter0: jakarta.json.JsonArray;
v1 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider provider()>();
v2 = virtualinvoke v1.<jakarta.json.spi.JsonProvider: jakarta.json.JsonArrayBuilder createArrayBuilder(jakarta.json.JsonArray)>(v0);
return v2;
}
public static jakarta.json.JsonArrayBuilder createArrayBuilder(java.util.Collection)
{
jakarta.json.JsonArrayBuilder v2;
jakarta.json.spi.JsonProvider v1;
java.util.Collection v0;
v0 := @parameter0: java.util.Collection;
v1 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider provider()>();
v2 = virtualinvoke v1.<jakarta.json.spi.JsonProvider: jakarta.json.JsonArrayBuilder createArrayBuilder(java.util.Collection)>(v0);
return v2;
}
public static jakarta.json.JsonObjectBuilder createObjectBuilder()
{
jakarta.json.JsonObjectBuilder v1;
jakarta.json.spi.JsonProvider v0;
v0 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider provider()>();
v1 = virtualinvoke v0.<jakarta.json.spi.JsonProvider: jakarta.json.JsonObjectBuilder createObjectBuilder()>();
return v1;
}
public static jakarta.json.JsonObjectBuilder createObjectBuilder(jakarta.json.JsonObject)
{
jakarta.json.JsonObject v0;
jakarta.json.JsonObjectBuilder v2;
jakarta.json.spi.JsonProvider v1;
v0 := @parameter0: jakarta.json.JsonObject;
v1 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider provider()>();
v2 = virtualinvoke v1.<jakarta.json.spi.JsonProvider: jakarta.json.JsonObjectBuilder createObjectBuilder(jakarta.json.JsonObject)>(v0);
return v2;
}
public static jakarta.json.JsonObjectBuilder createObjectBuilder(java.util.Map)
{
jakarta.json.JsonObjectBuilder v2;
jakarta.json.spi.JsonProvider v1;
java.util.Map v0;
v0 := @parameter0: java.util.Map;
v1 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider provider()>();
v2 = virtualinvoke v1.<jakarta.json.spi.JsonProvider: jakarta.json.JsonObjectBuilder createObjectBuilder(java.util.Map)>(v0);
return v2;
}
public static jakarta.json.JsonPointer createPointer(java.lang.String)
{
jakarta.json.spi.JsonProvider v1;
java.lang.String v0;
jakarta.json.JsonPointer v2;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider provider()>();
v2 = virtualinvoke v1.<jakarta.json.spi.JsonProvider: jakarta.json.JsonPointer createPointer(java.lang.String)>(v0);
return v2;
}
public static jakarta.json.JsonPatchBuilder createPatchBuilder()
{
jakarta.json.JsonPatchBuilder v1;
jakarta.json.spi.JsonProvider v0;
v0 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider provider()>();
v1 = virtualinvoke v0.<jakarta.json.spi.JsonProvider: jakarta.json.JsonPatchBuilder createPatchBuilder()>();
return v1;
}
public static jakarta.json.JsonPatchBuilder createPatchBuilder(jakarta.json.JsonArray)
{
jakarta.json.JsonPatchBuilder v2;
jakarta.json.spi.JsonProvider v1;
jakarta.json.JsonArray v0;
v0 := @parameter0: jakarta.json.JsonArray;
v1 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider provider()>();
v2 = virtualinvoke v1.<jakarta.json.spi.JsonProvider: jakarta.json.JsonPatchBuilder createPatchBuilder(jakarta.json.JsonArray)>(v0);
return v2;
}
public static jakarta.json.JsonPatch createPatch(jakarta.json.JsonArray)
{
jakarta.json.spi.JsonProvider v1;
jakarta.json.JsonPatch v2;
jakarta.json.JsonArray v0;
v0 := @parameter0: jakarta.json.JsonArray;
v1 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider provider()>();
v2 = virtualinvoke v1.<jakarta.json.spi.JsonProvider: jakarta.json.JsonPatch createPatch(jakarta.json.JsonArray)>(v0);
return v2;
}
public static jakarta.json.JsonPatch createDiff(jakarta.json.JsonStructure, jakarta.json.JsonStructure)
{
jakarta.json.JsonStructure v0, v1;
jakarta.json.spi.JsonProvider v2;
jakarta.json.JsonPatch v3;
v0 := @parameter0: jakarta.json.JsonStructure;
v1 := @parameter1: jakarta.json.JsonStructure;
v2 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider provider()>();
v3 = virtualinvoke v2.<jakarta.json.spi.JsonProvider: jakarta.json.JsonPatch createDiff(jakarta.json.JsonStructure,jakarta.json.JsonStructure)>(v0, v1);
return v3;
}
public static jakarta.json.JsonMergePatch createMergePatch(jakarta.json.JsonValue)
{
jakarta.json.JsonMergePatch v2;
jakarta.json.spi.JsonProvider v1;
jakarta.json.JsonValue v0;
v0 := @parameter0: jakarta.json.JsonValue;
v1 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider provider()>();
v2 = virtualinvoke v1.<jakarta.json.spi.JsonProvider: jakarta.json.JsonMergePatch createMergePatch(jakarta.json.JsonValue)>(v0);
return v2;
}
public static jakarta.json.JsonMergePatch createMergeDiff(jakarta.json.JsonValue, jakarta.json.JsonValue)
{
jakarta.json.JsonMergePatch v3;
jakarta.json.spi.JsonProvider v2;
jakarta.json.JsonValue v0, v1;
v0 := @parameter0: jakarta.json.JsonValue;
v1 := @parameter1: jakarta.json.JsonValue;
v2 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider provider()>();
v3 = virtualinvoke v2.<jakarta.json.spi.JsonProvider: jakarta.json.JsonMergePatch createMergeDiff(jakarta.json.JsonValue,jakarta.json.JsonValue)>(v0, v1);
return v3;
}
public static jakarta.json.JsonBuilderFactory createBuilderFactory(java.util.Map)
{
jakarta.json.JsonBuilderFactory v2;
jakarta.json.spi.JsonProvider v1;
java.util.Map v0;
v0 := @parameter0: java.util.Map;
v1 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider provider()>();
v2 = virtualinvoke v1.<jakarta.json.spi.JsonProvider: jakarta.json.JsonBuilderFactory createBuilderFactory(java.util.Map)>(v0);
return v2;
}
public static jakarta.json.JsonString createValue(java.lang.String)
{
jakarta.json.spi.JsonProvider v1;
java.lang.String v0;
jakarta.json.JsonString v2;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider provider()>();
v2 = virtualinvoke v1.<jakarta.json.spi.JsonProvider: jakarta.json.JsonString createValue(java.lang.String)>(v0);
return v2;
}
public static jakarta.json.JsonNumber createValue(int)
{
int v0;
jakarta.json.JsonNumber v2;
jakarta.json.spi.JsonProvider v1;
v0 := @parameter0: int;
v1 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider provider()>();
v2 = virtualinvoke v1.<jakarta.json.spi.JsonProvider: jakarta.json.JsonNumber createValue(int)>(v0);
return v2;
}
public static jakarta.json.JsonNumber createValue(long)
{
jakarta.json.JsonNumber v2;
jakarta.json.spi.JsonProvider v1;
long v0;
v0 := @parameter0: long;
v1 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider provider()>();
v2 = virtualinvoke v1.<jakarta.json.spi.JsonProvider: jakarta.json.JsonNumber createValue(long)>(v0);
return v2;
}
public static jakarta.json.JsonNumber createValue(double)
{
jakarta.json.JsonNumber v2;
jakarta.json.spi.JsonProvider v1;
double v0;
v0 := @parameter0: double;
v1 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider provider()>();
v2 = virtualinvoke v1.<jakarta.json.spi.JsonProvider: jakarta.json.JsonNumber createValue(double)>(v0);
return v2;
}
public static jakarta.json.JsonNumber createValue(java.math.BigDecimal)
{
java.math.BigDecimal v0;
jakarta.json.JsonNumber v2;
jakarta.json.spi.JsonProvider v1;
v0 := @parameter0: java.math.BigDecimal;
v1 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider provider()>();
v2 = virtualinvoke v1.<jakarta.json.spi.JsonProvider: jakarta.json.JsonNumber createValue(java.math.BigDecimal)>(v0);
return v2;
}
public static jakarta.json.JsonNumber createValue(java.math.BigInteger)
{
jakarta.json.JsonNumber v2;
jakarta.json.spi.JsonProvider v1;
java.math.BigInteger v0;
v0 := @parameter0: java.math.BigInteger;
v1 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider provider()>();
v2 = virtualinvoke v1.<jakarta.json.spi.JsonProvider: jakarta.json.JsonNumber createValue(java.math.BigInteger)>(v0);
return v2;
}
public static java.lang.String encodePointer(java.lang.String)
{
java.lang.String v0, v1, v2;
v0 := @parameter0: java.lang.String;
v1 = virtualinvoke v0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("~", "~0");
v2 = virtualinvoke v1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("/", "~1");
return v2;
}
public static java.lang.String decodePointer(java.lang.String)
{
java.lang.String v0, v1, v2;
v0 := @parameter0: java.lang.String;
v1 = virtualinvoke v0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("~1", "/");
v2 = virtualinvoke v1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("~0", "~");
return v2;
}
public static jakarta.json.JsonNumber createValue(java.lang.Number)
{
jakarta.json.JsonNumber v2;
jakarta.json.spi.JsonProvider v1;
java.lang.Number v0;
v0 := @parameter0: java.lang.Number;
v1 = staticinvoke <jakarta.json.spi.JsonProvider: jakarta.json.spi.JsonProvider provider()>();
v2 = virtualinvoke v1.<jakarta.json.spi.JsonProvider: jakarta.json.JsonNumber createValue(java.lang.Number)>(v0);
return v2;
}
}