public final enum class org.apache.commons.io.FileSystem extends java.lang.Enum
{
public static final enum org.apache.commons.io.FileSystem GENERIC;
public static final enum org.apache.commons.io.FileSystem LINUX;
public static final enum org.apache.commons.io.FileSystem MAC_OSX;
public static final enum org.apache.commons.io.FileSystem WINDOWS;
private static final boolean IS_OS_LINUX;
private static final boolean IS_OS_MAC;
private static final java.lang.String OS_NAME_WINDOWS_PREFIX;
private static final boolean IS_OS_WINDOWS;
private final boolean casePreserving;
private final boolean caseSensitive;
private final char[] illegalFileNameChars;
private final int maxFileNameLength;
private final int maxPathLength;
private final java.lang.String[] reservedFileNames;
private final boolean supportsDriveLetter;
private static final org.apache.commons.io.FileSystem[] $VALUES;
public static org.apache.commons.io.FileSystem[] values()
{
java.lang.Object v1;
org.apache.commons.io.FileSystem[] v0;
v0 = <org.apache.commons.io.FileSystem: org.apache.commons.io.FileSystem[] $VALUES>;
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
return v1;
}
public static org.apache.commons.io.FileSystem valueOf(java.lang.String)
{
java.lang.String v0;
java.lang.Enum v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/apache/commons/io/FileSystem;", v0);
return v1;
}
public static org.apache.commons.io.FileSystem getCurrent()
{
org.apache.commons.io.FileSystem v1, v3, v5, v6;
boolean v0, v2, v4;
v0 = <org.apache.commons.io.FileSystem: boolean IS_OS_LINUX>;
if v0 == 0 goto label1;
v1 = <org.apache.commons.io.FileSystem: org.apache.commons.io.FileSystem LINUX>;
return v1;
label1:
v2 = <org.apache.commons.io.FileSystem: boolean IS_OS_MAC>;
if v2 == 0 goto label2;
v3 = <org.apache.commons.io.FileSystem: org.apache.commons.io.FileSystem MAC_OSX>;
return v3;
label2:
v4 = <org.apache.commons.io.FileSystem: boolean IS_OS_WINDOWS>;
if v4 == 0 goto label3;
v5 = <org.apache.commons.io.FileSystem: org.apache.commons.io.FileSystem WINDOWS>;
return v5;
label3:
v6 = <org.apache.commons.io.FileSystem: org.apache.commons.io.FileSystem GENERIC>;
return v6;
}
private static boolean getOsMatchesName(java.lang.String)
{
java.lang.String v0, v1;
boolean v2;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.io.FileSystem: java.lang.String getSystemProperty(java.lang.String)>("os.name");
v2 = staticinvoke <org.apache.commons.io.FileSystem: boolean isOsNameMatch(java.lang.String,java.lang.String)>(v1, v0);
return v2;
}
private static java.lang.String getSystemProperty(java.lang.String)
{
java.io.PrintStream v3;
java.lang.SecurityException v2;
java.lang.String v0, v1, v4;
v0 := @parameter0: java.lang.String;
label1:
v1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(v0);
label2:
return v1;
label3:
v2 := @caughtexception;
v3 = <java.lang.System: java.io.PrintStream err>;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Caught a SecurityException reading the system property \'\u0001\'; the SystemUtils property value will default to null.");
virtualinvoke v3.<java.io.PrintStream: void println(java.lang.String)>(v4);
return null;
catch java.lang.SecurityException from label1 to label2 with label3;
}
private static boolean isOsNameMatch(java.lang.String, java.lang.String)
{
java.util.Locale v2, v4;
java.lang.String v0, v1, v3, v5;
boolean v6;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
if v0 != null goto label1;
return 0;
label1:
v2 = <java.util.Locale: java.util.Locale ROOT>;
v3 = virtualinvoke v0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>(v2);
v4 = <java.util.Locale: java.util.Locale ROOT>;
v5 = virtualinvoke v1.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>(v4);
v6 = virtualinvoke v3.<java.lang.String: boolean startsWith(java.lang.String)>(v5);
return v6;
}
private void <init>(java.lang.String, int, boolean, boolean, int, int, char[], java.lang.String[], boolean)
{
java.lang.String[] v8;
int v2, v5, v6;
char[] v7;
java.lang.Object v10, v11;
java.lang.String v1;
org.apache.commons.io.FileSystem v0;
boolean v3, v4, v9;
v0 := @this: org.apache.commons.io.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: boolean;
v4 := @parameter3: boolean;
v5 := @parameter4: int;
v6 := @parameter5: int;
v7 := @parameter6: char[];
v8 := @parameter7: java.lang.String[];
v9 := @parameter8: boolean;
specialinvoke v0.<java.lang.Enum: void <init>(java.lang.String,int)>(v1, v2);
v0.<org.apache.commons.io.FileSystem: int maxFileNameLength> = v5;
v0.<org.apache.commons.io.FileSystem: int maxPathLength> = v6;
v10 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v7, "illegalFileNameChars");
v0.<org.apache.commons.io.FileSystem: char[] illegalFileNameChars> = v10;
v11 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v8, "reservedFileNames");
v0.<org.apache.commons.io.FileSystem: java.lang.String[] reservedFileNames> = v11;
v0.<org.apache.commons.io.FileSystem: boolean caseSensitive> = v3;
v0.<org.apache.commons.io.FileSystem: boolean casePreserving> = v4;
v0.<org.apache.commons.io.FileSystem: boolean supportsDriveLetter> = v9;
return;
}
public char[] getIllegalFileNameChars()
{
char[] v1;
java.lang.Object v2;
org.apache.commons.io.FileSystem v0;
v0 := @this: org.apache.commons.io.FileSystem;
v1 = v0.<org.apache.commons.io.FileSystem: char[] illegalFileNameChars>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.Object clone()>();
return v2;
}
public int getMaxFileNameLength()
{
int v1;
org.apache.commons.io.FileSystem v0;
v0 := @this: org.apache.commons.io.FileSystem;
v1 = v0.<org.apache.commons.io.FileSystem: int maxFileNameLength>;
return v1;
}
public int getMaxPathLength()
{
int v1;
org.apache.commons.io.FileSystem v0;
v0 := @this: org.apache.commons.io.FileSystem;
v1 = v0.<org.apache.commons.io.FileSystem: int maxPathLength>;
return v1;
}
public java.lang.String[] getReservedFileNames()
{
java.lang.Object v2;
java.lang.String[] v1;
org.apache.commons.io.FileSystem v0;
v0 := @this: org.apache.commons.io.FileSystem;
v1 = v0.<org.apache.commons.io.FileSystem: java.lang.String[] reservedFileNames>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.Object clone()>();
return v2;
}
public boolean isCasePreserving()
{
org.apache.commons.io.FileSystem v0;
boolean v1;
v0 := @this: org.apache.commons.io.FileSystem;
v1 = v0.<org.apache.commons.io.FileSystem: boolean casePreserving>;
return v1;
}
public boolean isCaseSensitive()
{
org.apache.commons.io.FileSystem v0;
boolean v1;
v0 := @this: org.apache.commons.io.FileSystem;
v1 = v0.<org.apache.commons.io.FileSystem: boolean caseSensitive>;
return v1;
}
private boolean isIllegalFileNameChar(char)
{
int v3;
char[] v2;
char v1;
org.apache.commons.io.FileSystem v0;
boolean v4;
v0 := @this: org.apache.commons.io.FileSystem;
v1 := @parameter0: char;
v2 = v0.<org.apache.commons.io.FileSystem: char[] illegalFileNameChars>;
v3 = staticinvoke <java.util.Arrays: int binarySearch(char[],char)>(v2, v1);
if v3 < 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public boolean isLegalFileName(java.lang.CharSequence)
{
java.lang.CharSequence v1;
char v8;
int v2, v3, v4, v6, v7;
org.apache.commons.io.FileSystem v0;
boolean v5, v9;
v0 := @this: org.apache.commons.io.FileSystem;
v1 := @parameter0: java.lang.CharSequence;
if v1 == null goto label1;
v2 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
if v2 == 0 goto label1;
v3 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
v4 = v0.<org.apache.commons.io.FileSystem: int maxFileNameLength>;
if v3 <= v4 goto label2;
label1:
return 0;
label2:
v5 = virtualinvoke v0.<org.apache.commons.io.FileSystem: boolean isReservedFileName(java.lang.CharSequence)>(v1);
if v5 == 0 goto label3;
return 0;
label3:
v6 = 0;
label4:
v7 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
if v6 >= v7 goto label6;
v8 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v6);
v9 = specialinvoke v0.<org.apache.commons.io.FileSystem: boolean isIllegalFileNameChar(char)>(v8);
if v9 == 0 goto label5;
return 0;
label5:
v6 = v6 + 1;
goto label4;
label6:
return 1;
}
public boolean isReservedFileName(java.lang.CharSequence)
{
java.lang.CharSequence v1;
int v3;
java.lang.String[] v2;
org.apache.commons.io.FileSystem v0;
boolean v4;
v0 := @this: org.apache.commons.io.FileSystem;
v1 := @parameter0: java.lang.CharSequence;
v2 = v0.<org.apache.commons.io.FileSystem: java.lang.String[] reservedFileNames>;
v3 = staticinvoke <java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object)>(v2, v1);
if v3 < 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public boolean supportsDriveLetter()
{
org.apache.commons.io.FileSystem v0;
boolean v1;
v0 := @this: org.apache.commons.io.FileSystem;
v1 = v0.<org.apache.commons.io.FileSystem: boolean supportsDriveLetter>;
return v1;
}
public java.lang.String toLegalFileName(java.lang.String, char)
{
java.lang.Object[] v5;
int v11, v12, v13, v18, v19;
java.lang.String v1, v10, v14, v15, v22, v7, v9;
boolean v16, v21, v3;
char v2, v20;
java.lang.IllegalArgumentException v4;
java.io.Serializable v6;
char[] v17, v8;
org.apache.commons.io.FileSystem v0;
v0 := @this: org.apache.commons.io.FileSystem;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: char;
v3 = specialinvoke v0.<org.apache.commons.io.FileSystem: boolean isIllegalFileNameChar(char)>(v2);
if v3 == 0 goto label03;
v4 = new java.lang.IllegalArgumentException;
v5 = newarray (java.lang.Object)[3];
if v2 != 0 goto label01;
v6 = "\\0";
goto label02;
label01:
v6 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(v2);
label02:
v5[0] = v6;
v7 = virtualinvoke v0.<org.apache.commons.io.FileSystem: java.lang.String name()>();
v5[1] = v7;
v8 = v0.<org.apache.commons.io.FileSystem: char[] illegalFileNameChars>;
v9 = staticinvoke <java.util.Arrays: java.lang.String toString(char[])>(v8);
v5[2] = v9;
v10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The replacement character \'%s\' cannot be one of the %s illegal characters: %s", v5);
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v10);
throw v4;
label03:
v11 = virtualinvoke v1.<java.lang.String: int length()>();
v12 = v0.<org.apache.commons.io.FileSystem: int maxFileNameLength>;
if v11 <= v12 goto label04;
v13 = v0.<org.apache.commons.io.FileSystem: int maxFileNameLength>;
v14 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int,int)>(0, v13);
goto label05;
label04:
v14 = v1;
label05:
v15 = v14;
v16 = 0;
v17 = virtualinvoke v14.<java.lang.String: char[] toCharArray()>();
v18 = 0;
label06:
v19 = lengthof v17;
if v18 >= v19 goto label08;
v20 = v17[v18];
v21 = specialinvoke v0.<org.apache.commons.io.FileSystem: boolean isIllegalFileNameChar(char)>(v20);
if v21 == 0 goto label07;
v17[v18] = v2;
v16 = 1;
label07:
v18 = v18 + 1;
goto label06;
label08:
if v16 == 0 goto label09;
v22 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>(v17);
goto label10;
label09:
v22 = v15;
label10:
return v22;
}
private static org.apache.commons.io.FileSystem[] $values()
{
org.apache.commons.io.FileSystem v1, v2, v3, v4;
org.apache.commons.io.FileSystem[] v0;
v0 = newarray (org.apache.commons.io.FileSystem)[4];
v1 = <org.apache.commons.io.FileSystem: org.apache.commons.io.FileSystem GENERIC>;
v0[0] = v1;
v2 = <org.apache.commons.io.FileSystem: org.apache.commons.io.FileSystem LINUX>;
v0[1] = v2;
v3 = <org.apache.commons.io.FileSystem: org.apache.commons.io.FileSystem MAC_OSX>;
v0[2] = v3;
v4 = <org.apache.commons.io.FileSystem: org.apache.commons.io.FileSystem WINDOWS>;
v0[3] = v4;
return v0;
}
static void <clinit>()
{
java.lang.String[] v11, v2, v5, v8;
org.apache.commons.io.FileSystem[] v12;
boolean v13, v14, v15;
char[] v1, v10, v4, v7;
org.apache.commons.io.FileSystem v0, v3, v6, v9;
v0 = new org.apache.commons.io.FileSystem;
v1 = newarray (char)[1];
v1[0] = 0;
v2 = newarray (java.lang.String)[0];
specialinvoke v0.<org.apache.commons.io.FileSystem: void <init>(java.lang.String,int,boolean,boolean,int,int,char[],java.lang.String[],boolean)>("GENERIC", 0, 0, 0, 2147483647, 2147483647, v1, v2, 0);
<org.apache.commons.io.FileSystem: org.apache.commons.io.FileSystem GENERIC> = v0;
v3 = new org.apache.commons.io.FileSystem;
v4 = newarray (char)[2];
v4[0] = 0;
v4[1] = 47;
v5 = newarray (java.lang.String)[0];
specialinvoke v3.<org.apache.commons.io.FileSystem: void <init>(java.lang.String,int,boolean,boolean,int,int,char[],java.lang.String[],boolean)>("LINUX", 1, 1, 1, 255, 4096, v4, v5, 0);
<org.apache.commons.io.FileSystem: org.apache.commons.io.FileSystem LINUX> = v3;
v6 = new org.apache.commons.io.FileSystem;
v7 = newarray (char)[3];
v7[0] = 0;
v7[1] = 47;
v7[2] = 58;
v8 = newarray (java.lang.String)[0];
specialinvoke v6.<org.apache.commons.io.FileSystem: void <init>(java.lang.String,int,boolean,boolean,int,int,char[],java.lang.String[],boolean)>("MAC_OSX", 2, 1, 1, 255, 1024, v7, v8, 0);
<org.apache.commons.io.FileSystem: org.apache.commons.io.FileSystem MAC_OSX> = v6;
v9 = new org.apache.commons.io.FileSystem;
v10 = newarray (char)[41];
v10[0] = 0;
v10[1] = 1;
v10[2] = 2;
v10[3] = 3;
v10[4] = 4;
v10[5] = 5;
v10[6] = 6;
v10[7] = 7;
v10[8] = 8;
v10[9] = 9;
v10[10] = 10;
v10[11] = 11;
v10[12] = 12;
v10[13] = 13;
v10[14] = 14;
v10[15] = 15;
v10[16] = 16;
v10[17] = 17;
v10[18] = 18;
v10[19] = 19;
v10[20] = 20;
v10[21] = 21;
v10[22] = 22;
v10[23] = 23;
v10[24] = 24;
v10[25] = 25;
v10[26] = 26;
v10[27] = 27;
v10[28] = 28;
v10[29] = 29;
v10[30] = 30;
v10[31] = 31;
v10[32] = 34;
v10[33] = 42;
v10[34] = 47;
v10[35] = 58;
v10[36] = 60;
v10[37] = 62;
v10[38] = 63;
v10[39] = 92;
v10[40] = 124;
v11 = newarray (java.lang.String)[22];
v11[0] = "AUX";
v11[1] = "COM1";
v11[2] = "COM2";
v11[3] = "COM3";
v11[4] = "COM4";
v11[5] = "COM5";
v11[6] = "COM6";
v11[7] = "COM7";
v11[8] = "COM8";
v11[9] = "COM9";
v11[10] = "CON";
v11[11] = "LPT1";
v11[12] = "LPT2";
v11[13] = "LPT3";
v11[14] = "LPT4";
v11[15] = "LPT5";
v11[16] = "LPT6";
v11[17] = "LPT7";
v11[18] = "LPT8";
v11[19] = "LPT9";
v11[20] = "NUL";
v11[21] = "PRN";
specialinvoke v9.<org.apache.commons.io.FileSystem: void <init>(java.lang.String,int,boolean,boolean,int,int,char[],java.lang.String[],boolean)>("WINDOWS", 3, 0, 1, 255, 32000, v10, v11, 1);
<org.apache.commons.io.FileSystem: org.apache.commons.io.FileSystem WINDOWS> = v9;
v12 = staticinvoke <org.apache.commons.io.FileSystem: org.apache.commons.io.FileSystem[] $values()>();
<org.apache.commons.io.FileSystem: org.apache.commons.io.FileSystem[] $VALUES> = v12;
v13 = staticinvoke <org.apache.commons.io.FileSystem: boolean getOsMatchesName(java.lang.String)>("Linux");
<org.apache.commons.io.FileSystem: boolean IS_OS_LINUX> = v13;
v14 = staticinvoke <org.apache.commons.io.FileSystem: boolean getOsMatchesName(java.lang.String)>("Mac");
<org.apache.commons.io.FileSystem: boolean IS_OS_MAC> = v14;
v15 = staticinvoke <org.apache.commons.io.FileSystem: boolean getOsMatchesName(java.lang.String)>("Windows");
<org.apache.commons.io.FileSystem: boolean IS_OS_WINDOWS> = v15;
return;
}
}