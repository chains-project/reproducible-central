public class org.apache.commons.io.HexDump extends java.lang.Object
{
public static final java.lang.String EOL;
private static final char[] _hexcodes;
private static final int[] _shifts;
public void <init>()
{
org.apache.commons.io.HexDump v0;
v0 := @this: org.apache.commons.io.HexDump;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static void dump(byte[], long, java.io.OutputStream, int) throws java.io.IOException, java.lang.ArrayIndexOutOfBoundsException, java.lang.IllegalArgumentException
{
byte[] v0, v29;
long v1, v9;
byte v18, v21, v23, v25;
java.nio.charset.Charset v28;
int v11, v12, v13, v14, v16, v17, v19, v20, v22, v24, v3, v4, v6;
java.lang.String v26, v27, v7;
java.io.OutputStream v2;
java.lang.ArrayIndexOutOfBoundsException v5;
java.lang.IllegalArgumentException v8;
java.lang.StringBuilder v10, v15;
v0 := @parameter0: byte[];
v1 := @parameter1: long;
v2 := @parameter2: java.io.OutputStream;
v3 := @parameter3: int;
if v3 < 0 goto label01;
v4 = lengthof v0;
if v3 < v4 goto label02;
label01:
v5 = new java.lang.ArrayIndexOutOfBoundsException;
v6 = lengthof v0;
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v3, v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("illegal index: \u0001 into array of length \u0001");
specialinvoke v5.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>(v7);
throw v5;
label02:
if v2 != null goto label03;
v8 = new java.lang.IllegalArgumentException;
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cannot write to nullstream");
throw v8;
label03:
v9 = v1 + v3;
v10 = new java.lang.StringBuilder;
specialinvoke v10.<java.lang.StringBuilder: void <init>(int)>(74);
v11 = v3;
label04:
v12 = lengthof v0;
if v11 >= v12 goto label14;
v13 = lengthof v0;
v14 = v13 - v11;
if v14 <= 16 goto label05;
v14 = 16;
label05:
v15 = staticinvoke <org.apache.commons.io.HexDump: java.lang.StringBuilder dump(java.lang.StringBuilder,long)>(v10, v9);
virtualinvoke v15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);
v16 = 0;
label06:
if v16 >= 16 goto label09;
if v16 >= v14 goto label07;
v17 = v16 + v11;
v18 = v0[v17];
staticinvoke <org.apache.commons.io.HexDump: java.lang.StringBuilder dump(java.lang.StringBuilder,byte)>(v10, v18);
goto label08;
label07:
virtualinvoke v10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");
label08:
virtualinvoke v10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);
v16 = v16 + 1;
goto label06;
label09:
v19 = 0;
label10:
if v19 >= v14 goto label13;
v20 = v19 + v11;
v21 = v0[v20];
if v21 < 32 goto label11;
v22 = v19 + v11;
v23 = v0[v22];
if v23 >= 127 goto label11;
v24 = v19 + v11;
v25 = v0[v24];
virtualinvoke v10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v25);
goto label12;
label11:
virtualinvoke v10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);
label12:
v19 = v19 + 1;
goto label10;
label13:
v26 = <org.apache.commons.io.HexDump: java.lang.String EOL>;
virtualinvoke v10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v26);
v27 = virtualinvoke v10.<java.lang.StringBuilder: java.lang.String toString()>();
v28 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();
v29 = virtualinvoke v27.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(v28);
virtualinvoke v2.<java.io.OutputStream: void write(byte[])>(v29);
virtualinvoke v2.<java.io.OutputStream: void flush()>();
virtualinvoke v10.<java.lang.StringBuilder: void setLength(int)>(0);
v9 = v9 + v14;
v11 = v11 + 16;
goto label04;
label14:
return;
}
private static java.lang.StringBuilder dump(java.lang.StringBuilder, long)
{
char v8;
long v1, v6;
int[] v4;
int v2, v5, v7;
char[] v3;
java.lang.StringBuilder v0;
v0 := @parameter0: java.lang.StringBuilder;
v1 := @parameter1: long;
v2 = 0;
label1:
if v2 >= 8 goto label2;
v3 = <org.apache.commons.io.HexDump: char[] _hexcodes>;
v4 = <org.apache.commons.io.HexDump: int[] _shifts>;
v5 = v4[v2];
v6 = v1 >> v5;
v7 = v6 & 15;
v8 = v3[v7];
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v8);
v2 = v2 + 1;
goto label1;
label2:
return v0;
}
private static java.lang.StringBuilder dump(java.lang.StringBuilder, byte)
{
char v9;
byte v1;
int[] v4;
int v2, v5, v6, v7, v8;
char[] v3;
java.lang.StringBuilder v0;
v0 := @parameter0: java.lang.StringBuilder;
v1 := @parameter1: byte;
v2 = 0;
label1:
if v2 >= 2 goto label2;
v3 = <org.apache.commons.io.HexDump: char[] _hexcodes>;
v4 = <org.apache.commons.io.HexDump: int[] _shifts>;
v5 = v2 + 6;
v6 = v4[v5];
v7 = v1 >> v6;
v8 = v7 & 15;
v9 = v3[v8];
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v9);
v2 = v2 + 1;
goto label1;
label2:
return v0;
}
static void <clinit>()
{
char[] v1;
java.lang.String v0;
int[] v2;
v0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");
<org.apache.commons.io.HexDump: java.lang.String EOL> = v0;
v1 = newarray (char)[16];
v1[0] = 48;
v1[1] = 49;
v1[2] = 50;
v1[3] = 51;
v1[4] = 52;
v1[5] = 53;
v1[6] = 54;
v1[7] = 55;
v1[8] = 56;
v1[9] = 57;
v1[10] = 65;
v1[11] = 66;
v1[12] = 67;
v1[13] = 68;
v1[14] = 69;
v1[15] = 70;
<org.apache.commons.io.HexDump: char[] _hexcodes> = v1;
v2 = newarray (int)[8];
v2[0] = 28;
v2[1] = 24;
v2[2] = 20;
v2[3] = 16;
v2[4] = 12;
v2[5] = 8;
v2[6] = 4;
v2[7] = 0;
<org.apache.commons.io.HexDump: int[] _shifts> = v2;
return;
}
}