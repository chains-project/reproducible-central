public class org.apache.commons.io.LineIterator extends java.lang.Object implements java.util.Iterator, java.io.Closeable
{
private final java.io.BufferedReader bufferedReader;
private java.lang.String cachedLine;
private boolean finished;
public void <init>(java.io.Reader) throws java.lang.IllegalArgumentException
{
org.apache.commons.io.LineIterator v0;
java.io.BufferedReader v4;
java.io.Reader v1;
java.lang.IllegalArgumentException v2;
boolean v3;
v0 := @this: org.apache.commons.io.LineIterator;
v1 := @parameter0: java.io.Reader;
specialinvoke v0.<java.lang.Object: void <init>()>();
if v1 != null goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Reader must not be null");
throw v2;
label1:
v3 = v1 instanceof java.io.BufferedReader;
if v3 == 0 goto label2;
v0.<org.apache.commons.io.LineIterator: java.io.BufferedReader bufferedReader> = v1;
goto label3;
label2:
v4 = new java.io.BufferedReader;
specialinvoke v4.<java.io.BufferedReader: void <init>(java.io.Reader)>(v1);
v0.<org.apache.commons.io.LineIterator: java.io.BufferedReader bufferedReader> = v4;
label3:
return;
}
public boolean hasNext()
{
org.apache.commons.io.LineIterator v0;
java.lang.IllegalStateException v8;
java.io.IOException v6;
java.util.function.Consumer v7;
java.io.BufferedReader v3;
java.lang.String v1, v4;
boolean v2, v5;
v0 := @this: org.apache.commons.io.LineIterator;
v1 = v0.<org.apache.commons.io.LineIterator: java.lang.String cachedLine>;
if v1 == null goto label1;
return 1;
label1:
v2 = v0.<org.apache.commons.io.LineIterator: boolean finished>;
if v2 == 0 goto label2;
return 0;
label2:
v3 = v0.<org.apache.commons.io.LineIterator: java.io.BufferedReader bufferedReader>;
v4 = virtualinvoke v3.<java.io.BufferedReader: java.lang.String readLine()>();
if v4 != null goto label4;
v0.<org.apache.commons.io.LineIterator: boolean finished> = 1;
label3:
return 0;
label4:
v5 = virtualinvoke v0.<org.apache.commons.io.LineIterator: boolean isValidLine(java.lang.String)>(v4);
if v5 == 0 goto label2;
v0.<org.apache.commons.io.LineIterator: java.lang.String cachedLine> = v4;
label5:
return 1;
label6:
v6 := @caughtexception;
virtualinvoke v6.<java.lang.Object: java.lang.Class getClass()>();
v7 = staticinvoke <org.apache.commons.io.LineIterator$addSuppressed__253: java.util.function.Consumer bootstrap$(java.io.IOException)>(v6);
staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Closeable,java.util.function.Consumer)>(v0, v7);
v8 = new java.lang.IllegalStateException;
specialinvoke v8.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(v6);
throw v8;
catch java.io.IOException from label2 to label3 with label6;
catch java.io.IOException from label4 to label5 with label6;
}
protected boolean isValidLine(java.lang.String)
{
org.apache.commons.io.LineIterator v0;
java.lang.String v1;
v0 := @this: org.apache.commons.io.LineIterator;
v1 := @parameter0: java.lang.String;
return 1;
}
public java.lang.String next()
{
org.apache.commons.io.LineIterator v0;
java.lang.String v1;
v0 := @this: org.apache.commons.io.LineIterator;
v1 = virtualinvoke v0.<org.apache.commons.io.LineIterator: java.lang.String nextLine()>();
return v1;
}
public java.lang.String nextLine()
{
org.apache.commons.io.LineIterator v0;
java.lang.String v3;
java.util.NoSuchElementException v2;
boolean v1;
v0 := @this: org.apache.commons.io.LineIterator;
v1 = virtualinvoke v0.<org.apache.commons.io.LineIterator: boolean hasNext()>();
if v1 != 0 goto label1;
v2 = new java.util.NoSuchElementException;
specialinvoke v2.<java.util.NoSuchElementException: void <init>(java.lang.String)>("No more lines");
throw v2;
label1:
v3 = v0.<org.apache.commons.io.LineIterator: java.lang.String cachedLine>;
v0.<org.apache.commons.io.LineIterator: java.lang.String cachedLine> = null;
return v3;
}
public void close() throws java.io.IOException
{
org.apache.commons.io.LineIterator v0;
java.io.BufferedReader v1;
v0 := @this: org.apache.commons.io.LineIterator;
v0.<org.apache.commons.io.LineIterator: boolean finished> = 1;
v0.<org.apache.commons.io.LineIterator: java.lang.String cachedLine> = null;
v1 = v0.<org.apache.commons.io.LineIterator: java.io.BufferedReader bufferedReader>;
staticinvoke <org.apache.commons.io.IOUtils: void close(java.io.Closeable)>(v1);
return;
}
public void remove()
{
org.apache.commons.io.LineIterator v0;
java.lang.UnsupportedOperationException v1;
v0 := @this: org.apache.commons.io.LineIterator;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("remove not supported");
throw v1;
}
public static void closeQuietly(org.apache.commons.io.LineIterator)
{
org.apache.commons.io.LineIterator v0;
v0 := @parameter0: org.apache.commons.io.LineIterator;
staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Closeable)>(v0);
return;
}
}