public class org.apache.commons.io.comparator.SizeFileComparator extends org.apache.commons.io.comparator.AbstractFileComparator implements java.io.Serializable
{
private static final long serialVersionUID;
public static final java.util.Comparator SIZE_COMPARATOR;
public static final java.util.Comparator SIZE_REVERSE;
public static final java.util.Comparator SIZE_SUMDIR_COMPARATOR;
public static final java.util.Comparator SIZE_SUMDIR_REVERSE;
private final boolean sumDirectoryContents;
public void <init>()
{
org.apache.commons.io.comparator.SizeFileComparator v0;
v0 := @this: org.apache.commons.io.comparator.SizeFileComparator;
specialinvoke v0.<org.apache.commons.io.comparator.AbstractFileComparator: void <init>()>();
v0.<org.apache.commons.io.comparator.SizeFileComparator: boolean sumDirectoryContents> = 0;
return;
}
public void <init>(boolean)
{
org.apache.commons.io.comparator.SizeFileComparator v0;
boolean v1;
v0 := @this: org.apache.commons.io.comparator.SizeFileComparator;
v1 := @parameter0: boolean;
specialinvoke v0.<org.apache.commons.io.comparator.AbstractFileComparator: void <init>()>();
v0.<org.apache.commons.io.comparator.SizeFileComparator: boolean sumDirectoryContents> = v1;
return;
}
public int compare(java.io.File, java.io.File)
{
long v11, v12, v13, v6, v7;
byte v14, v16;
int v15;
boolean v10, v3, v4, v5, v8, v9;
java.io.File v1, v2;
org.apache.commons.io.comparator.SizeFileComparator v0;
v0 := @this: org.apache.commons.io.comparator.SizeFileComparator;
v1 := @parameter0: java.io.File;
v2 := @parameter1: java.io.File;
v3 = virtualinvoke v1.<java.io.File: boolean isDirectory()>();
if v3 == 0 goto label03;
v4 = v0.<org.apache.commons.io.comparator.SizeFileComparator: boolean sumDirectoryContents>;
if v4 == 0 goto label01;
v5 = virtualinvoke v1.<java.io.File: boolean exists()>();
if v5 == 0 goto label01;
v6 = staticinvoke <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)>(v1);
goto label02;
label01:
v6 = 0L;
label02:
v7 = v6;
goto label04;
label03:
v7 = virtualinvoke v1.<java.io.File: long length()>();
label04:
v8 = virtualinvoke v2.<java.io.File: boolean isDirectory()>();
if v8 == 0 goto label07;
v9 = v0.<org.apache.commons.io.comparator.SizeFileComparator: boolean sumDirectoryContents>;
if v9 == 0 goto label05;
v10 = virtualinvoke v2.<java.io.File: boolean exists()>();
if v10 == 0 goto label05;
v11 = staticinvoke <org.apache.commons.io.FileUtils: long sizeOfDirectory(java.io.File)>(v2);
goto label06;
label05:
v11 = 0L;
label06:
v12 = v11;
goto label08;
label07:
v12 = virtualinvoke v2.<java.io.File: long length()>();
label08:
v13 = v7 - v12;
v14 = v13 cmp 0L;
if v14 >= 0 goto label09;
v15 = (int) -1;
return v15;
label09:
v16 = v13 cmp 0L;
if v16 <= 0 goto label10;
return 1;
label10:
return 0;
}
public java.lang.String toString()
{
org.apache.commons.io.comparator.SizeFileComparator v0;
java.lang.String v1, v3;
boolean v2;
v0 := @this: org.apache.commons.io.comparator.SizeFileComparator;
v1 = specialinvoke v0.<org.apache.commons.io.comparator.AbstractFileComparator: java.lang.String toString()>();
v2 = v0.<org.apache.commons.io.comparator.SizeFileComparator: boolean sumDirectoryContents>;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,boolean)>(v1, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001[sumDirectoryContents=\u0001]");
return v3;
}
static void <clinit>()
{
org.apache.commons.io.comparator.SizeFileComparator v0, v3;
org.apache.commons.io.comparator.ReverseFileComparator v1, v4;
java.util.Comparator v2, v5;
v0 = new org.apache.commons.io.comparator.SizeFileComparator;
specialinvoke v0.<org.apache.commons.io.comparator.SizeFileComparator: void <init>()>();
<org.apache.commons.io.comparator.SizeFileComparator: java.util.Comparator SIZE_COMPARATOR> = v0;
v1 = new org.apache.commons.io.comparator.ReverseFileComparator;
v2 = <org.apache.commons.io.comparator.SizeFileComparator: java.util.Comparator SIZE_COMPARATOR>;
specialinvoke v1.<org.apache.commons.io.comparator.ReverseFileComparator: void <init>(java.util.Comparator)>(v2);
<org.apache.commons.io.comparator.SizeFileComparator: java.util.Comparator SIZE_REVERSE> = v1;
v3 = new org.apache.commons.io.comparator.SizeFileComparator;
specialinvoke v3.<org.apache.commons.io.comparator.SizeFileComparator: void <init>(boolean)>(1);
<org.apache.commons.io.comparator.SizeFileComparator: java.util.Comparator SIZE_SUMDIR_COMPARATOR> = v3;
v4 = new org.apache.commons.io.comparator.ReverseFileComparator;
v5 = <org.apache.commons.io.comparator.SizeFileComparator: java.util.Comparator SIZE_SUMDIR_COMPARATOR>;
specialinvoke v4.<org.apache.commons.io.comparator.ReverseFileComparator: void <init>(java.util.Comparator)>(v5);
<org.apache.commons.io.comparator.SizeFileComparator: java.util.Comparator SIZE_SUMDIR_REVERSE> = v4;
return;
}
}