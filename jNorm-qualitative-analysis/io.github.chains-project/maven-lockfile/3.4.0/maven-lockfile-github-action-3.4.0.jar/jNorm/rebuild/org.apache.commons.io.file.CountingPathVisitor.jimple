public class org.apache.commons.io.file.CountingPathVisitor extends org.apache.commons.io.file.SimplePathVisitor
{
static final java.lang.String[] EMPTY_STRING_ARRAY;
private final org.apache.commons.io.file.Counters$PathCounters pathCounters;
private final org.apache.commons.io.file.PathFilter fileFilter;
private final org.apache.commons.io.file.PathFilter dirFilter;
public static org.apache.commons.io.file.CountingPathVisitor withBigIntegerCounters()
{
org.apache.commons.io.file.CountingPathVisitor v0;
org.apache.commons.io.file.Counters$PathCounters v1;
v0 = new org.apache.commons.io.file.CountingPathVisitor;
v1 = staticinvoke <org.apache.commons.io.file.Counters: org.apache.commons.io.file.Counters$PathCounters bigIntegerPathCounters()>();
specialinvoke v0.<org.apache.commons.io.file.CountingPathVisitor: void <init>(org.apache.commons.io.file.Counters$PathCounters)>(v1);
return v0;
}
public static org.apache.commons.io.file.CountingPathVisitor withLongCounters()
{
org.apache.commons.io.file.CountingPathVisitor v0;
org.apache.commons.io.file.Counters$PathCounters v1;
v0 = new org.apache.commons.io.file.CountingPathVisitor;
v1 = staticinvoke <org.apache.commons.io.file.Counters: org.apache.commons.io.file.Counters$PathCounters longPathCounters()>();
specialinvoke v0.<org.apache.commons.io.file.CountingPathVisitor: void <init>(org.apache.commons.io.file.Counters$PathCounters)>(v1);
return v0;
}
public void <init>(org.apache.commons.io.file.Counters$PathCounters)
{
org.apache.commons.io.filefilter.IOFileFilter v2, v3;
org.apache.commons.io.file.CountingPathVisitor v0;
org.apache.commons.io.file.Counters$PathCounters v1;
v0 := @this: org.apache.commons.io.file.CountingPathVisitor;
v1 := @parameter0: org.apache.commons.io.file.Counters$PathCounters;
v2 = <org.apache.commons.io.filefilter.TrueFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;
v3 = <org.apache.commons.io.filefilter.TrueFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;
specialinvoke v0.<org.apache.commons.io.file.CountingPathVisitor: void <init>(org.apache.commons.io.file.Counters$PathCounters,org.apache.commons.io.file.PathFilter,org.apache.commons.io.file.PathFilter)>(v1, v2, v3);
return;
}
public void <init>(org.apache.commons.io.file.Counters$PathCounters, org.apache.commons.io.file.PathFilter, org.apache.commons.io.file.PathFilter)
{
org.apache.commons.io.file.CountingPathVisitor v0;
org.apache.commons.io.file.Counters$PathCounters v1;
java.lang.Object v4, v5, v6;
org.apache.commons.io.file.PathFilter v2, v3;
v0 := @this: org.apache.commons.io.file.CountingPathVisitor;
v1 := @parameter0: org.apache.commons.io.file.Counters$PathCounters;
v2 := @parameter1: org.apache.commons.io.file.PathFilter;
v3 := @parameter2: org.apache.commons.io.file.PathFilter;
specialinvoke v0.<org.apache.commons.io.file.SimplePathVisitor: void <init>()>();
v4 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "pathCounter");
v0.<org.apache.commons.io.file.CountingPathVisitor: org.apache.commons.io.file.Counters$PathCounters pathCounters> = v4;
v5 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v2, "fileFilter");
v0.<org.apache.commons.io.file.CountingPathVisitor: org.apache.commons.io.file.PathFilter fileFilter> = v5;
v6 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v3, "dirFilter");
v0.<org.apache.commons.io.file.CountingPathVisitor: org.apache.commons.io.file.PathFilter dirFilter> = v6;
return;
}
public boolean equals(java.lang.Object)
{
org.apache.commons.io.file.CountingPathVisitor v0;
org.apache.commons.io.file.Counters$PathCounters v3, v4;
java.lang.Object v1;
boolean v2, v5;
v0 := @this: org.apache.commons.io.file.CountingPathVisitor;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
v2 = v1 instanceof org.apache.commons.io.file.CountingPathVisitor;
if v2 != 0 goto label2;
return 0;
label2:
v3 = v0.<org.apache.commons.io.file.CountingPathVisitor: org.apache.commons.io.file.Counters$PathCounters pathCounters>;
v4 = v1.<org.apache.commons.io.file.CountingPathVisitor: org.apache.commons.io.file.Counters$PathCounters pathCounters>;
v5 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(v3, v4);
return v5;
}
public org.apache.commons.io.file.Counters$PathCounters getPathCounters()
{
org.apache.commons.io.file.CountingPathVisitor v0;
org.apache.commons.io.file.Counters$PathCounters v1;
v0 := @this: org.apache.commons.io.file.CountingPathVisitor;
v1 = v0.<org.apache.commons.io.file.CountingPathVisitor: org.apache.commons.io.file.Counters$PathCounters pathCounters>;
return v1;
}
public int hashCode()
{
org.apache.commons.io.file.CountingPathVisitor v0;
java.lang.Object[] v1;
org.apache.commons.io.file.Counters$PathCounters v2;
int v3;
v0 := @this: org.apache.commons.io.file.CountingPathVisitor;
v1 = newarray (java.lang.Object)[1];
v2 = v0.<org.apache.commons.io.file.CountingPathVisitor: org.apache.commons.io.file.Counters$PathCounters pathCounters>;
v1[0] = v2;
v3 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>(v1);
return v3;
}
public java.nio.file.FileVisitResult postVisitDirectory(java.nio.file.Path, java.io.IOException) throws java.io.IOException
{
java.nio.file.FileVisitResult v3;
org.apache.commons.io.file.CountingPathVisitor v0;
java.io.IOException v2;
java.nio.file.Path v1;
v0 := @this: org.apache.commons.io.file.CountingPathVisitor;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.io.IOException;
virtualinvoke v0.<org.apache.commons.io.file.CountingPathVisitor: void updateDirCounter(java.nio.file.Path,java.io.IOException)>(v1, v2);
v3 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;
return v3;
}
public java.nio.file.FileVisitResult preVisitDirectory(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException
{
java.nio.file.FileVisitResult v4, v5, v6;
org.apache.commons.io.file.CountingPathVisitor v0;
java.nio.file.attribute.BasicFileAttributes v2;
java.nio.file.Path v1;
org.apache.commons.io.file.PathFilter v3;
v0 := @this: org.apache.commons.io.file.CountingPathVisitor;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;
v3 = v0.<org.apache.commons.io.file.CountingPathVisitor: org.apache.commons.io.file.PathFilter dirFilter>;
v4 = interfaceinvoke v3.<org.apache.commons.io.file.PathFilter: java.nio.file.FileVisitResult accept(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)>(v1, v2);
v5 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;
if v4 == v5 goto label1;
v6 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult SKIP_SUBTREE>;
goto label2;
label1:
v6 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;
label2:
return v6;
}
public java.lang.String toString()
{
org.apache.commons.io.file.CountingPathVisitor v0;
java.lang.String v2;
org.apache.commons.io.file.Counters$PathCounters v1;
v0 := @this: org.apache.commons.io.file.CountingPathVisitor;
v1 = v0.<org.apache.commons.io.file.CountingPathVisitor: org.apache.commons.io.file.Counters$PathCounters pathCounters>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
return v2;
}
protected void updateDirCounter(java.nio.file.Path, java.io.IOException)
{
org.apache.commons.io.file.Counters$Counter v4;
org.apache.commons.io.file.CountingPathVisitor v0;
org.apache.commons.io.file.Counters$PathCounters v3;
java.io.IOException v2;
java.nio.file.Path v1;
v0 := @this: org.apache.commons.io.file.CountingPathVisitor;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.io.IOException;
v3 = v0.<org.apache.commons.io.file.CountingPathVisitor: org.apache.commons.io.file.Counters$PathCounters pathCounters>;
v4 = interfaceinvoke v3.<org.apache.commons.io.file.Counters$PathCounters: org.apache.commons.io.file.Counters$Counter getDirectoryCounter()>();
interfaceinvoke v4.<org.apache.commons.io.file.Counters$Counter: void increment()>();
return;
}
protected void updateFileCounters(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)
{
long v7;
java.nio.file.attribute.BasicFileAttributes v2;
org.apache.commons.io.file.Counters$Counter v4, v6;
org.apache.commons.io.file.CountingPathVisitor v0;
org.apache.commons.io.file.Counters$PathCounters v3, v5;
java.nio.file.Path v1;
v0 := @this: org.apache.commons.io.file.CountingPathVisitor;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;
v3 = v0.<org.apache.commons.io.file.CountingPathVisitor: org.apache.commons.io.file.Counters$PathCounters pathCounters>;
v4 = interfaceinvoke v3.<org.apache.commons.io.file.Counters$PathCounters: org.apache.commons.io.file.Counters$Counter getFileCounter()>();
interfaceinvoke v4.<org.apache.commons.io.file.Counters$Counter: void increment()>();
v5 = v0.<org.apache.commons.io.file.CountingPathVisitor: org.apache.commons.io.file.Counters$PathCounters pathCounters>;
v6 = interfaceinvoke v5.<org.apache.commons.io.file.Counters$PathCounters: org.apache.commons.io.file.Counters$Counter getByteCounter()>();
v7 = interfaceinvoke v2.<java.nio.file.attribute.BasicFileAttributes: long size()>();
interfaceinvoke v6.<org.apache.commons.io.file.Counters$Counter: void add(long)>(v7);
return;
}
public java.nio.file.FileVisitResult visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException
{
java.nio.file.LinkOption[] v3;
java.nio.file.attribute.BasicFileAttributes v2;
java.nio.file.FileVisitResult v6, v7, v8;
org.apache.commons.io.file.CountingPathVisitor v0;
java.nio.file.Path v1;
org.apache.commons.io.file.PathFilter v5;
boolean v4;
v0 := @this: org.apache.commons.io.file.CountingPathVisitor;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;
v3 = newarray (java.nio.file.LinkOption)[0];
v4 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>(v1, v3);
if v4 == 0 goto label1;
v5 = v0.<org.apache.commons.io.file.CountingPathVisitor: org.apache.commons.io.file.PathFilter fileFilter>;
v6 = interfaceinvoke v5.<org.apache.commons.io.file.PathFilter: java.nio.file.FileVisitResult accept(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)>(v1, v2);
v7 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;
if v6 != v7 goto label1;
virtualinvoke v0.<org.apache.commons.io.file.CountingPathVisitor: void updateFileCounters(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)>(v1, v2);
label1:
v8 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;
return v8;
}
static void <clinit>()
{
java.lang.String[] v0;
v0 = newarray (java.lang.String)[0];
<org.apache.commons.io.file.CountingPathVisitor: java.lang.String[] EMPTY_STRING_ARRAY> = v0;
return;
}
}