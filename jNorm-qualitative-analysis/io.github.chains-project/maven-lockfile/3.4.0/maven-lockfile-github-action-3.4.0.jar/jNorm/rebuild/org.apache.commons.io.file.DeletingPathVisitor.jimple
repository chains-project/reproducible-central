public class org.apache.commons.io.file.DeletingPathVisitor extends org.apache.commons.io.file.CountingPathVisitor
{
private final java.lang.String[] skip;
private final boolean overrideReadOnly;
private final java.nio.file.LinkOption[] linkOptions;
public static org.apache.commons.io.file.DeletingPathVisitor withBigIntegerCounters()
{
java.lang.String[] v2;
org.apache.commons.io.file.DeletingPathVisitor v0;
org.apache.commons.io.file.Counters$PathCounters v1;
v0 = new org.apache.commons.io.file.DeletingPathVisitor;
v1 = staticinvoke <org.apache.commons.io.file.Counters: org.apache.commons.io.file.Counters$PathCounters bigIntegerPathCounters()>();
v2 = newarray (java.lang.String)[0];
specialinvoke v0.<org.apache.commons.io.file.DeletingPathVisitor: void <init>(org.apache.commons.io.file.Counters$PathCounters,java.lang.String[])>(v1, v2);
return v0;
}
public static org.apache.commons.io.file.DeletingPathVisitor withLongCounters()
{
java.lang.String[] v2;
org.apache.commons.io.file.DeletingPathVisitor v0;
org.apache.commons.io.file.Counters$PathCounters v1;
v0 = new org.apache.commons.io.file.DeletingPathVisitor;
v1 = staticinvoke <org.apache.commons.io.file.Counters: org.apache.commons.io.file.Counters$PathCounters longPathCounters()>();
v2 = newarray (java.lang.String)[0];
specialinvoke v0.<org.apache.commons.io.file.DeletingPathVisitor: void <init>(org.apache.commons.io.file.Counters$PathCounters,java.lang.String[])>(v1, v2);
return v0;
}
public transient void <init>(org.apache.commons.io.file.Counters$PathCounters, org.apache.commons.io.file.DeleteOption[], java.lang.String[])
{
java.nio.file.LinkOption[] v4;
org.apache.commons.io.file.Counters$PathCounters v1;
java.lang.String[] v3;
org.apache.commons.io.file.DeletingPathVisitor v0;
org.apache.commons.io.file.DeleteOption[] v2;
v0 := @this: org.apache.commons.io.file.DeletingPathVisitor;
v1 := @parameter0: org.apache.commons.io.file.Counters$PathCounters;
v2 := @parameter1: org.apache.commons.io.file.DeleteOption[];
v3 := @parameter2: java.lang.String[];
v4 = <org.apache.commons.io.file.PathUtils: java.nio.file.LinkOption[] NOFOLLOW_LINK_OPTION_ARRAY>;
specialinvoke v0.<org.apache.commons.io.file.DeletingPathVisitor: void <init>(org.apache.commons.io.file.Counters$PathCounters,java.nio.file.LinkOption[],org.apache.commons.io.file.DeleteOption[],java.lang.String[])>(v1, v4, v2, v3);
return;
}
public transient void <init>(org.apache.commons.io.file.Counters$PathCounters, java.nio.file.LinkOption[], org.apache.commons.io.file.DeleteOption[], java.lang.String[])
{
java.nio.file.LinkOption[] v2, v7;
java.lang.String[] v4;
org.apache.commons.io.file.DeleteOption[] v3;
org.apache.commons.io.file.Counters$PathCounters v1;
java.lang.Object v5, v8;
org.apache.commons.io.file.DeletingPathVisitor v0;
boolean v6;
v0 := @this: org.apache.commons.io.file.DeletingPathVisitor;
v1 := @parameter0: org.apache.commons.io.file.Counters$PathCounters;
v2 := @parameter1: java.nio.file.LinkOption[];
v3 := @parameter2: org.apache.commons.io.file.DeleteOption[];
v4 := @parameter3: java.lang.String[];
specialinvoke v0.<org.apache.commons.io.file.CountingPathVisitor: void <init>(org.apache.commons.io.file.Counters$PathCounters)>(v1);
if v4 == null goto label1;
v5 = virtualinvoke v4.<java.lang.Object: java.lang.Object clone()>();
goto label2;
label1:
v5 = <org.apache.commons.io.file.DeletingPathVisitor: java.lang.String[] EMPTY_STRING_ARRAY>;
label2:
staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>(v5);
v0.<org.apache.commons.io.file.DeletingPathVisitor: java.lang.String[] skip> = v5;
v6 = staticinvoke <org.apache.commons.io.file.StandardDeleteOption: boolean overrideReadOnly(org.apache.commons.io.file.DeleteOption[])>(v3);
v0.<org.apache.commons.io.file.DeletingPathVisitor: boolean overrideReadOnly> = v6;
if v2 != null goto label3;
v7 = <org.apache.commons.io.file.PathUtils: java.nio.file.LinkOption[] NOFOLLOW_LINK_OPTION_ARRAY>;
goto label4;
label3:
v8 = virtualinvoke v2.<java.lang.Object: java.lang.Object clone()>();
label4:
v0.<org.apache.commons.io.file.DeletingPathVisitor: java.nio.file.LinkOption[] linkOptions> = v8;
return;
}
public transient void <init>(org.apache.commons.io.file.Counters$PathCounters, java.lang.String[])
{
org.apache.commons.io.file.Counters$PathCounters v1;
java.lang.String[] v2;
org.apache.commons.io.file.DeletingPathVisitor v0;
org.apache.commons.io.file.DeleteOption[] v3;
v0 := @this: org.apache.commons.io.file.DeletingPathVisitor;
v1 := @parameter0: org.apache.commons.io.file.Counters$PathCounters;
v2 := @parameter1: java.lang.String[];
v3 = <org.apache.commons.io.file.PathUtils: org.apache.commons.io.file.DeleteOption[] EMPTY_DELETE_OPTION_ARRAY>;
specialinvoke v0.<org.apache.commons.io.file.DeletingPathVisitor: void <init>(org.apache.commons.io.file.Counters$PathCounters,org.apache.commons.io.file.DeleteOption[],java.lang.String[])>(v1, v3, v2);
return;
}
private boolean accept(java.nio.file.Path)
{
int v5;
java.lang.String[] v2;
java.lang.String v4;
org.apache.commons.io.file.DeletingPathVisitor v0;
java.nio.file.Path v1, v3;
boolean v6;
v0 := @this: org.apache.commons.io.file.DeletingPathVisitor;
v1 := @parameter0: java.nio.file.Path;
v2 = v0.<org.apache.commons.io.file.DeletingPathVisitor: java.lang.String[] skip>;
v3 = interfaceinvoke v1.<java.nio.file.Path: java.nio.file.Path getFileName()>();
v4 = staticinvoke <java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>(v3, null);
v5 = staticinvoke <java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object)>(v2, v4);
if v5 >= 0 goto label1;
v6 = 1;
goto label2;
label1:
v6 = 0;
label2:
return v6;
}
public boolean equals(java.lang.Object)
{
java.lang.String[] v7, v8;
java.lang.Class v3, v4;
java.lang.Object v1;
org.apache.commons.io.file.DeletingPathVisitor v0;
boolean v10, v2, v5, v6, v9;
v0 := @this: org.apache.commons.io.file.DeletingPathVisitor;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
v2 = specialinvoke v0.<org.apache.commons.io.file.CountingPathVisitor: boolean equals(java.lang.Object)>(v1);
if v2 != 0 goto label2;
return 0;
label2:
v3 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v4 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v3 == v4 goto label3;
return 0;
label3:
v5 = v0.<org.apache.commons.io.file.DeletingPathVisitor: boolean overrideReadOnly>;
v6 = v1.<org.apache.commons.io.file.DeletingPathVisitor: boolean overrideReadOnly>;
if v5 != v6 goto label4;
v7 = v0.<org.apache.commons.io.file.DeletingPathVisitor: java.lang.String[] skip>;
v8 = v1.<org.apache.commons.io.file.DeletingPathVisitor: java.lang.String[] skip>;
v9 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>(v7, v8);
if v9 == 0 goto label4;
v10 = 1;
goto label5;
label4:
v10 = 0;
label5:
return v10;
}
public int hashCode()
{
java.lang.Object[] v7;
java.lang.String[] v3;
int v1, v10, v11, v2, v4, v5, v6;
java.lang.Boolean v9;
org.apache.commons.io.file.DeletingPathVisitor v0;
boolean v8;
v0 := @this: org.apache.commons.io.file.DeletingPathVisitor;
v1 = specialinvoke v0.<org.apache.commons.io.file.CountingPathVisitor: int hashCode()>();
v2 = 31 * v1;
v3 = v0.<org.apache.commons.io.file.DeletingPathVisitor: java.lang.String[] skip>;
v4 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>(v3);
v5 = v2 + v4;
v6 = 31 * v5;
v7 = newarray (java.lang.Object)[1];
v8 = v0.<org.apache.commons.io.file.DeletingPathVisitor: boolean overrideReadOnly>;
v9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v8);
v7[0] = v9;
v10 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>(v7);
v11 = v6 + v10;
return v11;
}
public java.nio.file.FileVisitResult postVisitDirectory(java.nio.file.Path, java.io.IOException) throws java.io.IOException
{
java.nio.file.FileVisitResult v4;
java.io.IOException v2;
org.apache.commons.io.file.DeletingPathVisitor v0;
java.nio.file.Path v1;
boolean v3;
v0 := @this: org.apache.commons.io.file.DeletingPathVisitor;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.io.IOException;
v3 = staticinvoke <org.apache.commons.io.file.PathUtils: boolean isEmptyDirectory(java.nio.file.Path)>(v1);
if v3 == 0 goto label1;
staticinvoke <java.nio.file.Files: boolean deleteIfExists(java.nio.file.Path)>(v1);
label1:
v4 = specialinvoke v0.<org.apache.commons.io.file.CountingPathVisitor: java.nio.file.FileVisitResult postVisitDirectory(java.nio.file.Path,java.io.IOException)>(v1, v2);
return v4;
}
public java.nio.file.FileVisitResult preVisitDirectory(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException
{
java.nio.file.FileVisitResult v4;
org.apache.commons.io.file.DeletingPathVisitor v0;
java.nio.file.attribute.BasicFileAttributes v2;
java.nio.file.Path v1;
boolean v3;
v0 := @this: org.apache.commons.io.file.DeletingPathVisitor;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;
specialinvoke v0.<org.apache.commons.io.file.CountingPathVisitor: java.nio.file.FileVisitResult preVisitDirectory(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)>(v1, v2);
v3 = specialinvoke v0.<org.apache.commons.io.file.DeletingPathVisitor: boolean accept(java.nio.file.Path)>(v1);
if v3 == 0 goto label1;
v4 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;
goto label2;
label1:
v4 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult SKIP_SUBTREE>;
label2:
return v4;
}
public java.nio.file.FileVisitResult visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException
{
java.nio.file.NoSuchFileException v9;
java.nio.file.LinkOption[] v4, v7;
java.nio.file.attribute.BasicFileAttributes v2;
java.nio.file.FileVisitResult v10;
org.apache.commons.io.file.DeletingPathVisitor v0;
java.nio.file.Path v1;
boolean v3, v5, v6, v8;
v0 := @this: org.apache.commons.io.file.DeletingPathVisitor;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;
v3 = specialinvoke v0.<org.apache.commons.io.file.DeletingPathVisitor: boolean accept(java.nio.file.Path)>(v1);
if v3 == 0 goto label6;
v4 = v0.<org.apache.commons.io.file.DeletingPathVisitor: java.nio.file.LinkOption[] linkOptions>;
v5 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>(v1, v4);
if v5 == 0 goto label2;
v6 = v0.<org.apache.commons.io.file.DeletingPathVisitor: boolean overrideReadOnly>;
if v6 == 0 goto label1;
v7 = v0.<org.apache.commons.io.file.DeletingPathVisitor: java.nio.file.LinkOption[] linkOptions>;
staticinvoke <org.apache.commons.io.file.PathUtils: java.nio.file.Path setReadOnly(java.nio.file.Path,boolean,java.nio.file.LinkOption[])>(v1, 0, v7);
label1:
staticinvoke <java.nio.file.Files: boolean deleteIfExists(java.nio.file.Path)>(v1);
label2:
v8 = staticinvoke <java.nio.file.Files: boolean isSymbolicLink(java.nio.file.Path)>(v1);
if v8 == 0 goto label6;
label3:
staticinvoke <java.nio.file.Files: void delete(java.nio.file.Path)>(v1);
label4:
goto label6;
label5:
v9 := @caughtexception;
label6:
virtualinvoke v0.<org.apache.commons.io.file.DeletingPathVisitor: void updateFileCounters(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)>(v1, v2);
v10 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;
return v10;
catch java.nio.file.NoSuchFileException from label3 to label4 with label5;
}
}