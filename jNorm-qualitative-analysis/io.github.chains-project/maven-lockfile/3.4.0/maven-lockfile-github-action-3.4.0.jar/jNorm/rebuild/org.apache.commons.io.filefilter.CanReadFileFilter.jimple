public class org.apache.commons.io.filefilter.CanReadFileFilter extends org.apache.commons.io.filefilter.AbstractFileFilter implements java.io.Serializable
{
public static final org.apache.commons.io.filefilter.IOFileFilter CAN_READ;
public static final org.apache.commons.io.filefilter.IOFileFilter CANNOT_READ;
public static final org.apache.commons.io.filefilter.IOFileFilter READ_ONLY;
private static final long serialVersionUID;
protected void <init>()
{
org.apache.commons.io.filefilter.CanReadFileFilter v0;
v0 := @this: org.apache.commons.io.filefilter.CanReadFileFilter;
specialinvoke v0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>();
return;
}
public boolean accept(java.io.File)
{
org.apache.commons.io.filefilter.CanReadFileFilter v0;
java.io.File v1;
boolean v2;
v0 := @this: org.apache.commons.io.filefilter.CanReadFileFilter;
v1 := @parameter0: java.io.File;
v2 = virtualinvoke v1.<java.io.File: boolean canRead()>();
return v2;
}
public java.nio.file.FileVisitResult accept(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)
{
java.nio.file.FileVisitResult v4;
java.nio.file.attribute.BasicFileAttributes v2;
java.nio.file.Path v1;
org.apache.commons.io.filefilter.CanReadFileFilter v0;
boolean v3;
v0 := @this: org.apache.commons.io.filefilter.CanReadFileFilter;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;
v3 = staticinvoke <java.nio.file.Files: boolean isReadable(java.nio.file.Path)>(v1);
v4 = staticinvoke <org.apache.commons.io.filefilter.CanReadFileFilter: java.nio.file.FileVisitResult toFileVisitResult(boolean,java.nio.file.Path)>(v3, v1);
return v4;
}
static void <clinit>()
{
org.apache.commons.io.filefilter.IOFileFilter v1, v2, v3, v4, v5;
org.apache.commons.io.filefilter.CanReadFileFilter v0;
v0 = new org.apache.commons.io.filefilter.CanReadFileFilter;
specialinvoke v0.<org.apache.commons.io.filefilter.CanReadFileFilter: void <init>()>();
<org.apache.commons.io.filefilter.CanReadFileFilter: org.apache.commons.io.filefilter.IOFileFilter CAN_READ> = v0;
v1 = <org.apache.commons.io.filefilter.CanReadFileFilter: org.apache.commons.io.filefilter.IOFileFilter CAN_READ>;
v2 = interfaceinvoke v1.<org.apache.commons.io.filefilter.IOFileFilter: org.apache.commons.io.filefilter.IOFileFilter negate()>();
<org.apache.commons.io.filefilter.CanReadFileFilter: org.apache.commons.io.filefilter.IOFileFilter CANNOT_READ> = v2;
v3 = <org.apache.commons.io.filefilter.CanReadFileFilter: org.apache.commons.io.filefilter.IOFileFilter CAN_READ>;
v4 = <org.apache.commons.io.filefilter.CanWriteFileFilter: org.apache.commons.io.filefilter.IOFileFilter CANNOT_WRITE>;
v5 = interfaceinvoke v3.<org.apache.commons.io.filefilter.IOFileFilter: org.apache.commons.io.filefilter.IOFileFilter and(org.apache.commons.io.filefilter.IOFileFilter)>(v4);
<org.apache.commons.io.filefilter.CanReadFileFilter: org.apache.commons.io.filefilter.IOFileFilter READ_ONLY> = v5;
return;
}
}