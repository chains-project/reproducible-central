public class org.apache.commons.io.filefilter.MagicNumberFileFilter extends org.apache.commons.io.filefilter.AbstractFileFilter implements java.io.Serializable
{
private static final long serialVersionUID;
private final byte[] magicNumbers;
private final long byteOffset;
public void <init>(byte[])
{
byte[] v1;
org.apache.commons.io.filefilter.MagicNumberFileFilter v0;
v0 := @this: org.apache.commons.io.filefilter.MagicNumberFileFilter;
v1 := @parameter0: byte[];
specialinvoke v0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(byte[],long)>(v1, 0L);
return;
}
public void <init>(byte[], long)
{
byte[] v1, v10, v9;
org.apache.commons.io.filefilter.MagicNumberFileFilter v0;
long v2;
java.lang.IllegalArgumentException v3, v5, v7;
byte v6;
int v11, v4, v8;
v0 := @this: org.apache.commons.io.filefilter.MagicNumberFileFilter;
v1 := @parameter0: byte[];
v2 := @parameter1: long;
specialinvoke v0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>();
if v1 != null goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The magic number cannot be null");
throw v3;
label1:
v4 = lengthof v1;
if v4 != 0 goto label2;
v5 = new java.lang.IllegalArgumentException;
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The magic number must contain at least one byte");
throw v5;
label2:
v6 = v2 cmp 0L;
if v6 >= 0 goto label3;
v7 = new java.lang.IllegalArgumentException;
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The offset cannot be negative");
throw v7;
label3:
v8 = lengthof v1;
v9 = staticinvoke <org.apache.commons.io.IOUtils: byte[] byteArray(int)>(v8);
v0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: byte[] magicNumbers> = v9;
v10 = v0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: byte[] magicNumbers>;
v11 = lengthof v1;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, 0, v10, 0, v11);
v0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: long byteOffset> = v2;
return;
}
public void <init>(java.lang.String)
{
java.lang.String v1;
org.apache.commons.io.filefilter.MagicNumberFileFilter v0;
v0 := @this: org.apache.commons.io.filefilter.MagicNumberFileFilter;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(java.lang.String,long)>(v1, 0L);
return;
}
public void <init>(java.lang.String, long)
{
byte[] v9;
org.apache.commons.io.filefilter.MagicNumberFileFilter v0;
long v2;
java.lang.IllegalArgumentException v3, v5, v7;
byte v6;
java.nio.charset.Charset v8;
java.lang.String v1;
boolean v4;
v0 := @this: org.apache.commons.io.filefilter.MagicNumberFileFilter;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
specialinvoke v0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>();
if v1 != null goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The magic number cannot be null");
throw v3;
label1:
v4 = virtualinvoke v1.<java.lang.String: boolean isEmpty()>();
if v4 == 0 goto label2;
v5 = new java.lang.IllegalArgumentException;
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The magic number must contain at least one byte");
throw v5;
label2:
v6 = v2 cmp 0L;
if v6 >= 0 goto label3;
v7 = new java.lang.IllegalArgumentException;
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The offset cannot be negative");
throw v7;
label3:
v8 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();
v9 = virtualinvoke v1.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(v8);
v0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: byte[] magicNumbers> = v9;
v0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: long byteOffset> = v2;
return;
}
public boolean accept(java.io.File)
{
java.lang.Throwable v14;
byte[] v10, v12, v5, v7;
java.io.RandomAccessFile v4;
org.apache.commons.io.filefilter.MagicNumberFileFilter v0;
long v8;
int v11, v6, v9;
boolean v13, v2, v3;
java.io.IOException v15;
java.io.File v1;
v0 := @this: org.apache.commons.io.filefilter.MagicNumberFileFilter;
v1 := @parameter0: java.io.File;
if v1 == null goto label10;
v2 = virtualinvoke v1.<java.io.File: boolean isFile()>();
if v2 == 0 goto label10;
v3 = virtualinvoke v1.<java.io.File: boolean canRead()>();
if v3 == 0 goto label10;
label01:
v4 = new java.io.RandomAccessFile;
specialinvoke v4.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>(v1, "r");
label02:
v5 = v0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: byte[] magicNumbers>;
v6 = lengthof v5;
v7 = staticinvoke <org.apache.commons.io.IOUtils: byte[] byteArray(int)>(v6);
v8 = v0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: long byteOffset>;
virtualinvoke v4.<java.io.RandomAccessFile: void seek(long)>(v8);
v9 = virtualinvoke v4.<java.io.RandomAccessFile: int read(byte[])>(v7);
v10 = v0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: byte[] magicNumbers>;
v11 = lengthof v10;
if v9 == v11 goto label05;
label03:
virtualinvoke v4.<java.io.RandomAccessFile: void close()>();
label04:
return 0;
label05:
v12 = v0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: byte[] magicNumbers>;
v13 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(v12, v7);
label06:
virtualinvoke v4.<java.io.RandomAccessFile: void close()>();
label07:
return v13;
label08:
v14 := @caughtexception;
throw v14;
label09:
v15 := @caughtexception;
label10:
return 0;
catch java.lang.Throwable from label02 to label03 with label08;
catch java.lang.Throwable from label05 to label06 with label08;
catch java.io.IOException from label01 to label04 with label09;
catch java.io.IOException from label05 to label07 with label09;
}
public java.nio.file.FileVisitResult accept(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)
{
java.lang.Throwable v19;
byte[] v12, v15, v16, v8;
org.apache.commons.io.filefilter.MagicNumberFileFilter v0;
java.nio.ByteBuffer v10;
java.nio.file.OpenOption[] v6;
int v11, v13, v9;
java.nio.file.Path v1;
boolean v17, v4, v5;
java.nio.file.LinkOption[] v3;
java.io.IOException v20;
java.nio.file.attribute.BasicFileAttributes v2;
java.nio.file.FileVisitResult v14, v18, v21;
java.nio.channels.FileChannel v7;
v0 := @this: org.apache.commons.io.filefilter.MagicNumberFileFilter;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;
if v1 == null goto label10;
v3 = newarray (java.nio.file.LinkOption)[0];
v4 = staticinvoke <java.nio.file.Files: boolean isRegularFile(java.nio.file.Path,java.nio.file.LinkOption[])>(v1, v3);
if v4 == 0 goto label10;
v5 = staticinvoke <java.nio.file.Files: boolean isReadable(java.nio.file.Path)>(v1);
if v5 == 0 goto label10;
label01:
v6 = newarray (java.nio.file.OpenOption)[0];
v7 = staticinvoke <java.nio.channels.FileChannel: java.nio.channels.FileChannel open(java.nio.file.Path,java.nio.file.OpenOption[])>(v1, v6);
label02:
v8 = v0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: byte[] magicNumbers>;
v9 = lengthof v8;
v10 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(v9);
v11 = virtualinvoke v7.<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer)>(v10);
v12 = v0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: byte[] magicNumbers>;
v13 = lengthof v12;
if v11 == v13 goto label05;
v14 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult TERMINATE>;
label03:
virtualinvoke v7.<java.nio.channels.FileChannel: void close()>();
label04:
return v14;
label05:
v15 = v0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: byte[] magicNumbers>;
v16 = virtualinvoke v10.<java.nio.ByteBuffer: byte[] array()>();
v17 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(v15, v16);
v18 = staticinvoke <org.apache.commons.io.filefilter.MagicNumberFileFilter: java.nio.file.FileVisitResult toFileVisitResult(boolean,java.nio.file.Path)>(v17, v1);
label06:
virtualinvoke v7.<java.nio.channels.FileChannel: void close()>();
label07:
return v18;
label08:
v19 := @caughtexception;
throw v19;
label09:
v20 := @caughtexception;
label10:
v21 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult TERMINATE>;
return v21;
catch java.lang.Throwable from label02 to label03 with label08;
catch java.lang.Throwable from label05 to label06 with label08;
catch java.io.IOException from label01 to label04 with label09;
catch java.io.IOException from label05 to label07 with label09;
}
public java.lang.String toString()
{
byte[] v4;
org.apache.commons.io.filefilter.MagicNumberFileFilter v0;
long v6;
java.nio.charset.Charset v5;
java.lang.StringBuilder v1;
java.lang.String v2, v3, v7;
v0 := @this: org.apache.commons.io.filefilter.MagicNumberFileFilter;
v1 = new java.lang.StringBuilder;
v2 = specialinvoke v0.<org.apache.commons.io.filefilter.AbstractFileFilter: java.lang.String toString()>();
specialinvoke v1.<java.lang.StringBuilder: void <init>(java.lang.String)>(v2);
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");
v3 = new java.lang.String;
v4 = v0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: byte[] magicNumbers>;
v5 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();
specialinvoke v3.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(v4, v5);
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v3);
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");
v6 = v0.<org.apache.commons.io.filefilter.MagicNumberFileFilter: long byteOffset>;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(v6);
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
v7 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.String toString()>();
return v7;
}
}