public class org.apache.commons.io.filefilter.OrFileFilter extends org.apache.commons.io.filefilter.AbstractFileFilter implements org.apache.commons.io.filefilter.ConditionalFileFilter, java.io.Serializable
{
private static final long serialVersionUID;
private final java.util.List fileFilters;
public void <init>()
{
org.apache.commons.io.filefilter.OrFileFilter v0;
v0 := @this: org.apache.commons.io.filefilter.OrFileFilter;
specialinvoke v0.<org.apache.commons.io.filefilter.OrFileFilter: void <init>(int)>(0);
return;
}
private void <init>(java.util.ArrayList)
{
java.lang.Object v2;
org.apache.commons.io.filefilter.OrFileFilter v0;
java.util.ArrayList v1;
v0 := @this: org.apache.commons.io.filefilter.OrFileFilter;
v1 := @parameter0: java.util.ArrayList;
specialinvoke v0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>();
v2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "initialList");
v0.<org.apache.commons.io.filefilter.OrFileFilter: java.util.List fileFilters> = v2;
return;
}
private void <init>(int)
{
int v1;
org.apache.commons.io.filefilter.OrFileFilter v0;
java.util.ArrayList v2;
v0 := @this: org.apache.commons.io.filefilter.OrFileFilter;
v1 := @parameter0: int;
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>(int)>(v1);
specialinvoke v0.<org.apache.commons.io.filefilter.OrFileFilter: void <init>(java.util.ArrayList)>(v2);
return;
}
public transient void <init>(org.apache.commons.io.filefilter.IOFileFilter[])
{
org.apache.commons.io.filefilter.OrFileFilter v0;
int v3;
java.lang.Object v2;
org.apache.commons.io.filefilter.IOFileFilter[] v1;
v0 := @this: org.apache.commons.io.filefilter.OrFileFilter;
v1 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter[];
v2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "fileFilters");
v3 = lengthof v2;
specialinvoke v0.<org.apache.commons.io.filefilter.OrFileFilter: void <init>(int)>(v3);
virtualinvoke v0.<org.apache.commons.io.filefilter.OrFileFilter: void addFileFilter(org.apache.commons.io.filefilter.IOFileFilter[])>(v1);
return;
}
public void <init>(org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.filefilter.IOFileFilter)
{
org.apache.commons.io.filefilter.IOFileFilter v1, v2;
org.apache.commons.io.filefilter.OrFileFilter v0;
v0 := @this: org.apache.commons.io.filefilter.OrFileFilter;
v1 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;
v2 := @parameter1: org.apache.commons.io.filefilter.IOFileFilter;
specialinvoke v0.<org.apache.commons.io.filefilter.OrFileFilter: void <init>(int)>(2);
virtualinvoke v0.<org.apache.commons.io.filefilter.OrFileFilter: void addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>(v1);
virtualinvoke v0.<org.apache.commons.io.filefilter.OrFileFilter: void addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>(v2);
return;
}
public void <init>(java.util.List)
{
java.util.List v1;
org.apache.commons.io.filefilter.OrFileFilter v0;
java.lang.Object v3;
java.util.ArrayList v2;
v0 := @this: org.apache.commons.io.filefilter.OrFileFilter;
v1 := @parameter0: java.util.List;
v2 = new java.util.ArrayList;
v3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "fileFilters");
specialinvoke v2.<java.util.ArrayList: void <init>(java.util.Collection)>(v3);
specialinvoke v0.<org.apache.commons.io.filefilter.OrFileFilter: void <init>(java.util.ArrayList)>(v2);
return;
}
public boolean accept(java.io.File)
{
java.util.List v2;
org.apache.commons.io.filefilter.OrFileFilter v0;
java.util.Iterator v3;
java.lang.Object v5;
java.io.File v1;
boolean v4, v6;
v0 := @this: org.apache.commons.io.filefilter.OrFileFilter;
v1 := @parameter0: java.io.File;
v2 = v0.<org.apache.commons.io.filefilter.OrFileFilter: java.util.List fileFilters>;
v3 = interfaceinvoke v2.<java.util.List: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = interfaceinvoke v5.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(v1);
if v6 == 0 goto label1;
return 1;
label2:
return 0;
}
public boolean accept(java.io.File, java.lang.String)
{
java.util.Iterator v4;
java.io.File v1;
java.util.List v3;
org.apache.commons.io.filefilter.OrFileFilter v0;
java.lang.Object v6;
java.lang.String v2;
boolean v5, v7;
v0 := @this: org.apache.commons.io.filefilter.OrFileFilter;
v1 := @parameter0: java.io.File;
v2 := @parameter1: java.lang.String;
v3 = v0.<org.apache.commons.io.filefilter.OrFileFilter: java.util.List fileFilters>;
v4 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = interfaceinvoke v6.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(v1, v2);
if v7 == 0 goto label1;
return 1;
label2:
return 0;
}
public java.nio.file.FileVisitResult accept(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)
{
java.util.Iterator v4;
java.nio.file.attribute.BasicFileAttributes v2;
java.nio.file.FileVisitResult v10, v7, v8, v9;
java.util.List v3;
org.apache.commons.io.filefilter.OrFileFilter v0;
java.lang.Object v6;
java.nio.file.Path v1;
boolean v5;
v0 := @this: org.apache.commons.io.filefilter.OrFileFilter;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;
v3 = v0.<org.apache.commons.io.filefilter.OrFileFilter: java.util.List fileFilters>;
v4 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = interfaceinvoke v6.<org.apache.commons.io.filefilter.IOFileFilter: java.nio.file.FileVisitResult accept(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)>(v1, v2);
v8 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;
if v7 != v8 goto label1;
v9 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;
return v9;
label2:
v10 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult TERMINATE>;
return v10;
}
public void addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)
{
org.apache.commons.io.filefilter.IOFileFilter v1;
java.util.List v2;
org.apache.commons.io.filefilter.OrFileFilter v0;
java.lang.Object v3;
v0 := @this: org.apache.commons.io.filefilter.OrFileFilter;
v1 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;
v2 = v0.<org.apache.commons.io.filefilter.OrFileFilter: java.util.List fileFilters>;
v3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "fileFilter");
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v3);
return;
}
public transient void addFileFilter(org.apache.commons.io.filefilter.IOFileFilter[])
{
org.apache.commons.io.filefilter.IOFileFilter v5;
org.apache.commons.io.filefilter.OrFileFilter v0;
int v3, v4;
java.lang.Object v2;
org.apache.commons.io.filefilter.IOFileFilter[] v1;
v0 := @this: org.apache.commons.io.filefilter.OrFileFilter;
v1 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter[];
v2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "fileFilters");
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v2[v4];
virtualinvoke v0.<org.apache.commons.io.filefilter.OrFileFilter: void addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>(v5);
v4 = v4 + 1;
goto label1;
label2:
return;
}
public java.util.List getFileFilters()
{
java.util.List v1, v2;
org.apache.commons.io.filefilter.OrFileFilter v0;
v0 := @this: org.apache.commons.io.filefilter.OrFileFilter;
v1 = v0.<org.apache.commons.io.filefilter.OrFileFilter: java.util.List fileFilters>;
v2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(v1);
return v2;
}
public boolean removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)
{
org.apache.commons.io.filefilter.IOFileFilter v1;
java.util.List v2;
org.apache.commons.io.filefilter.OrFileFilter v0;
boolean v3;
v0 := @this: org.apache.commons.io.filefilter.OrFileFilter;
v1 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;
v2 = v0.<org.apache.commons.io.filefilter.OrFileFilter: java.util.List fileFilters>;
v3 = interfaceinvoke v2.<java.util.List: boolean remove(java.lang.Object)>(v1);
return v3;
}
public void setFileFilters(java.util.List)
{
java.util.List v1, v2, v3;
org.apache.commons.io.filefilter.OrFileFilter v0;
java.lang.Object v4;
v0 := @this: org.apache.commons.io.filefilter.OrFileFilter;
v1 := @parameter0: java.util.List;
v2 = v0.<org.apache.commons.io.filefilter.OrFileFilter: java.util.List fileFilters>;
interfaceinvoke v2.<java.util.List: void clear()>();
v3 = v0.<org.apache.commons.io.filefilter.OrFileFilter: java.util.List fileFilters>;
v4 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "fileFilters");
interfaceinvoke v3.<java.util.List: boolean addAll(java.util.Collection)>(v4);
return;
}
public java.lang.String toString()
{
java.util.List v3, v5, v7;
org.apache.commons.io.filefilter.OrFileFilter v0;
int v4, v6;
java.lang.Object v8;
java.lang.StringBuilder v1;
java.lang.String v2, v9;
v0 := @this: org.apache.commons.io.filefilter.OrFileFilter;
v1 = new java.lang.StringBuilder;
specialinvoke v1.<java.lang.StringBuilder: void <init>()>();
v2 = specialinvoke v0.<org.apache.commons.io.filefilter.AbstractFileFilter: java.lang.String toString()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v2);
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");
v3 = v0.<org.apache.commons.io.filefilter.OrFileFilter: java.util.List fileFilters>;
if v3 == null goto label3;
v4 = 0;
label1:
v5 = v0.<org.apache.commons.io.filefilter.OrFileFilter: java.util.List fileFilters>;
v6 = interfaceinvoke v5.<java.util.List: int size()>();
if v4 >= v6 goto label3;
if v4 <= 0 goto label2;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");
label2:
v7 = v0.<org.apache.commons.io.filefilter.OrFileFilter: java.util.List fileFilters>;
v8 = interfaceinvoke v7.<java.util.List: java.lang.Object get(int)>(v4);
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v8);
v4 = v4 + 1;
goto label1;
label3:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");
v9 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.String toString()>();
return v9;
}
}