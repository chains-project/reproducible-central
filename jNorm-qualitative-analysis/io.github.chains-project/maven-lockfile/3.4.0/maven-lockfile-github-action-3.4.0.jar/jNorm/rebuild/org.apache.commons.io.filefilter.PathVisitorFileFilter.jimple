public class org.apache.commons.io.filefilter.PathVisitorFileFilter extends org.apache.commons.io.filefilter.AbstractFileFilter
{
private final org.apache.commons.io.file.PathVisitor pathVisitor;
public void <init>(org.apache.commons.io.file.PathVisitor)
{
org.apache.commons.io.filefilter.PathVisitorFileFilter v0;
org.apache.commons.io.file.PathVisitor v1, v2;
v0 := @this: org.apache.commons.io.filefilter.PathVisitorFileFilter;
v1 := @parameter0: org.apache.commons.io.file.PathVisitor;
specialinvoke v0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>();
if v1 != null goto label1;
v2 = <org.apache.commons.io.file.NoopPathVisitor: org.apache.commons.io.file.NoopPathVisitor INSTANCE>;
goto label2;
label1:
v2 = v1;
label2:
v0.<org.apache.commons.io.filefilter.PathVisitorFileFilter: org.apache.commons.io.file.PathVisitor pathVisitor> = v2;
return;
}
public boolean accept(java.io.File)
{
java.io.IOException v8;
java.nio.file.attribute.BasicFileAttributes v4;
java.io.File v1;
java.nio.file.FileVisitResult v10, v5, v6, v9;
org.apache.commons.io.filefilter.PathVisitorFileFilter v0;
java.nio.file.Path v2;
boolean v11, v3, v7;
v0 := @this: org.apache.commons.io.filefilter.PathVisitorFileFilter;
v1 := @parameter0: java.io.File;
label1:
v2 = virtualinvoke v1.<java.io.File: java.nio.file.Path toPath()>();
v3 = virtualinvoke v1.<java.io.File: boolean exists()>();
if v3 == 0 goto label2;
v4 = staticinvoke <org.apache.commons.io.file.PathUtils: java.nio.file.attribute.BasicFileAttributes readBasicFileAttributes(java.nio.file.Path)>(v2);
goto label3;
label2:
v4 = null;
label3:
v5 = virtualinvoke v0.<org.apache.commons.io.filefilter.PathVisitorFileFilter: java.nio.file.FileVisitResult visitFile(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)>(v2, v4);
v6 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;
if v5 != v6 goto label4;
v7 = 1;
goto label5;
label4:
v7 = 0;
label5:
return v7;
label6:
v8 := @caughtexception;
v9 = virtualinvoke v0.<org.apache.commons.io.filefilter.PathVisitorFileFilter: java.nio.file.FileVisitResult handle(java.lang.Throwable)>(v8);
v10 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;
if v9 != v10 goto label7;
v11 = 1;
goto label8;
label7:
v11 = 0;
label8:
return v11;
catch java.io.IOException from label1 to label5 with label6;
}
public boolean accept(java.io.File, java.lang.String)
{
java.io.IOException v9;
java.nio.file.attribute.BasicFileAttributes v5;
java.io.File v1;
java.nio.file.FileVisitResult v10, v11, v6, v7;
org.apache.commons.io.filefilter.PathVisitorFileFilter v0;
java.lang.String v2;
java.nio.file.Path v3, v4;
boolean v12, v8;
v0 := @this: org.apache.commons.io.filefilter.PathVisitorFileFilter;
v1 := @parameter0: java.io.File;
v2 := @parameter1: java.lang.String;
label1:
v3 = virtualinvoke v1.<java.io.File: java.nio.file.Path toPath()>();
v4 = interfaceinvoke v3.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>(v2);
v5 = staticinvoke <org.apache.commons.io.file.PathUtils: java.nio.file.attribute.BasicFileAttributes readBasicFileAttributes(java.nio.file.Path)>(v4);
v6 = virtualinvoke v0.<org.apache.commons.io.filefilter.PathVisitorFileFilter: java.nio.file.FileVisitResult accept(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)>(v4, v5);
v7 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;
if v6 != v7 goto label2;
v8 = 1;
goto label3;
label2:
v8 = 0;
label3:
return v8;
label4:
v9 := @caughtexception;
v10 = virtualinvoke v0.<org.apache.commons.io.filefilter.PathVisitorFileFilter: java.nio.file.FileVisitResult handle(java.lang.Throwable)>(v9);
v11 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;
if v10 != v11 goto label5;
v12 = 1;
goto label6;
label5:
v12 = 0;
label6:
return v12;
catch java.io.IOException from label1 to label3 with label4;
}
public java.nio.file.FileVisitResult accept(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)
{
java.nio.file.LinkOption[] v3;
java.io.IOException v7;
java.nio.file.attribute.BasicFileAttributes v2;
java.nio.file.FileVisitResult v6, v8;
org.apache.commons.io.filefilter.PathVisitorFileFilter v0;
java.nio.file.Path v1;
boolean v4;
org.apache.commons.io.file.PathVisitor v5;
v0 := @this: org.apache.commons.io.filefilter.PathVisitorFileFilter;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;
label1:
v3 = newarray (java.nio.file.LinkOption)[0];
v4 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>(v1, v3);
if v4 == 0 goto label2;
v5 = v0.<org.apache.commons.io.filefilter.PathVisitorFileFilter: org.apache.commons.io.file.PathVisitor pathVisitor>;
v6 = interfaceinvoke v5.<org.apache.commons.io.file.PathVisitor: java.nio.file.FileVisitResult postVisitDirectory(java.lang.Object,java.io.IOException)>(v1, null);
goto label3;
label2:
v6 = virtualinvoke v0.<org.apache.commons.io.filefilter.PathVisitorFileFilter: java.nio.file.FileVisitResult visitFile(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)>(v1, v2);
label3:
return v6;
label4:
v7 := @caughtexception;
v8 = virtualinvoke v0.<org.apache.commons.io.filefilter.PathVisitorFileFilter: java.nio.file.FileVisitResult handle(java.lang.Throwable)>(v7);
return v8;
catch java.io.IOException from label1 to label3 with label4;
}
public java.nio.file.FileVisitResult visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException
{
java.nio.file.FileVisitResult v4;
org.apache.commons.io.filefilter.PathVisitorFileFilter v0;
java.nio.file.attribute.BasicFileAttributes v2;
java.nio.file.Path v1;
org.apache.commons.io.file.PathVisitor v3;
v0 := @this: org.apache.commons.io.filefilter.PathVisitorFileFilter;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;
v3 = v0.<org.apache.commons.io.filefilter.PathVisitorFileFilter: org.apache.commons.io.file.PathVisitor pathVisitor>;
v4 = interfaceinvoke v3.<org.apache.commons.io.file.PathVisitor: java.nio.file.FileVisitResult visitFile(java.lang.Object,java.nio.file.attribute.BasicFileAttributes)>(v1, v2);
return v4;
}
}