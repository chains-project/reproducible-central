public class org.apache.commons.io.filefilter.RegexFileFilter extends org.apache.commons.io.filefilter.AbstractFileFilter implements java.io.Serializable
{
private static final long serialVersionUID;
private final java.util.regex.Pattern pattern;
private final java.util.function.Function pathToString;
private static java.util.regex.Pattern compile(java.lang.String, int)
{
int v1;
java.lang.String v0;
java.util.regex.Pattern v3;
java.lang.IllegalArgumentException v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
if v0 != null goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Pattern is missing");
throw v2;
label1:
v3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>(v0, v1);
return v3;
}
private static int toFlags(org.apache.commons.io.IOCase)
{
org.apache.commons.io.IOCase v0;
byte v2;
boolean v1;
v0 := @parameter0: org.apache.commons.io.IOCase;
v1 = staticinvoke <org.apache.commons.io.IOCase: boolean isCaseSensitive(org.apache.commons.io.IOCase)>(v0);
if v1 == 0 goto label1;
v2 = 2;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public void <init>(java.util.regex.Pattern)
{
java.util.regex.Pattern v1;
java.util.function.Function v2;
org.apache.commons.io.filefilter.RegexFileFilter v0;
v0 := @this: org.apache.commons.io.filefilter.RegexFileFilter;
v1 := @parameter0: java.util.regex.Pattern;
v2 = staticinvoke <org.apache.commons.io.filefilter.RegexFileFilter$lambda_new_0__286: java.util.function.Function bootstrap$()>();
specialinvoke v0.<org.apache.commons.io.filefilter.RegexFileFilter: void <init>(java.util.regex.Pattern,java.util.function.Function)>(v1, v2);
return;
}
public void <init>(java.util.regex.Pattern, java.util.function.Function)
{
java.util.regex.Pattern v1;
java.lang.IllegalArgumentException v3;
java.util.function.Function v2;
org.apache.commons.io.filefilter.RegexFileFilter v0;
v0 := @this: org.apache.commons.io.filefilter.RegexFileFilter;
v1 := @parameter0: java.util.regex.Pattern;
v2 := @parameter1: java.util.function.Function;
specialinvoke v0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>();
if v1 != null goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Pattern is missing");
throw v3;
label1:
v0.<org.apache.commons.io.filefilter.RegexFileFilter: java.util.regex.Pattern pattern> = v1;
v0.<org.apache.commons.io.filefilter.RegexFileFilter: java.util.function.Function pathToString> = v2;
return;
}
public void <init>(java.lang.String)
{
java.lang.String v1;
org.apache.commons.io.filefilter.RegexFileFilter v0;
v0 := @this: org.apache.commons.io.filefilter.RegexFileFilter;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<org.apache.commons.io.filefilter.RegexFileFilter: void <init>(java.lang.String,int)>(v1, 0);
return;
}
public void <init>(java.lang.String, int)
{
int v2;
java.lang.String v1;
java.util.regex.Pattern v3;
org.apache.commons.io.filefilter.RegexFileFilter v0;
v0 := @this: org.apache.commons.io.filefilter.RegexFileFilter;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 = staticinvoke <org.apache.commons.io.filefilter.RegexFileFilter: java.util.regex.Pattern compile(java.lang.String,int)>(v1, v2);
specialinvoke v0.<org.apache.commons.io.filefilter.RegexFileFilter: void <init>(java.util.regex.Pattern)>(v3);
return;
}
public void <init>(java.lang.String, org.apache.commons.io.IOCase)
{
org.apache.commons.io.IOCase v2;
int v3;
java.lang.String v1;
java.util.regex.Pattern v4;
org.apache.commons.io.filefilter.RegexFileFilter v0;
v0 := @this: org.apache.commons.io.filefilter.RegexFileFilter;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: org.apache.commons.io.IOCase;
v3 = staticinvoke <org.apache.commons.io.filefilter.RegexFileFilter: int toFlags(org.apache.commons.io.IOCase)>(v2);
v4 = staticinvoke <org.apache.commons.io.filefilter.RegexFileFilter: java.util.regex.Pattern compile(java.lang.String,int)>(v1, v3);
specialinvoke v0.<org.apache.commons.io.filefilter.RegexFileFilter: void <init>(java.util.regex.Pattern)>(v4);
return;
}
public boolean accept(java.io.File, java.lang.String)
{
java.util.regex.Matcher v4;
java.lang.String v2;
java.util.regex.Pattern v3;
java.io.File v1;
boolean v5;
org.apache.commons.io.filefilter.RegexFileFilter v0;
v0 := @this: org.apache.commons.io.filefilter.RegexFileFilter;
v1 := @parameter0: java.io.File;
v2 := @parameter1: java.lang.String;
v3 = v0.<org.apache.commons.io.filefilter.RegexFileFilter: java.util.regex.Pattern pattern>;
v4 = virtualinvoke v3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v2);
v5 = virtualinvoke v4.<java.util.regex.Matcher: boolean matches()>();
return v5;
}
public java.nio.file.FileVisitResult accept(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)
{
java.nio.file.attribute.BasicFileAttributes v2;
java.util.function.Function v4;
java.nio.file.FileVisitResult v8;
java.util.regex.Matcher v6;
java.lang.Object v5;
java.util.regex.Pattern v3;
java.nio.file.Path v1;
boolean v7;
org.apache.commons.io.filefilter.RegexFileFilter v0;
v0 := @this: org.apache.commons.io.filefilter.RegexFileFilter;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;
v3 = v0.<org.apache.commons.io.filefilter.RegexFileFilter: java.util.regex.Pattern pattern>;
v4 = v0.<org.apache.commons.io.filefilter.RegexFileFilter: java.util.function.Function pathToString>;
v5 = interfaceinvoke v4.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v1);
v6 = virtualinvoke v3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v5);
v7 = virtualinvoke v6.<java.util.regex.Matcher: boolean matches()>();
v8 = staticinvoke <org.apache.commons.io.filefilter.RegexFileFilter: java.nio.file.FileVisitResult toFileVisitResult(boolean,java.nio.file.Path)>(v7, v1);
return v8;
}
public java.lang.String toString()
{
java.lang.String v2;
java.util.regex.Pattern v1;
org.apache.commons.io.filefilter.RegexFileFilter v0;
v0 := @this: org.apache.commons.io.filefilter.RegexFileFilter;
v1 = v0.<org.apache.commons.io.filefilter.RegexFileFilter: java.util.regex.Pattern pattern>;
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.util.regex.Pattern)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("RegexFileFilter [pattern=\u0001]");
return v2;
}
}