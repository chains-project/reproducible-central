public class org.apache.commons.io.input.CharSequenceInputStream extends java.io.InputStream
{
private static final int BUFFER_SIZE;
private static final int NO_MARK;
private final java.nio.charset.CharsetEncoder encoder;
private final java.nio.CharBuffer cbuf;
private final java.nio.ByteBuffer bbuf;
private int mark_cbuf;
private int mark_bbuf;
public void <init>(java.lang.CharSequence, java.nio.charset.Charset, int)
{
java.nio.ByteBuffer v14, v15;
byte v11;
java.nio.charset.Charset v2;
java.nio.charset.CodingErrorAction v5, v7;
int v17, v18, v3;
java.lang.String v13;
java.lang.CharSequence v1;
java.nio.CharBuffer v16;
java.lang.IllegalArgumentException v12;
org.apache.commons.io.input.CharSequenceInputStream v0;
java.nio.charset.CharsetEncoder v4, v6, v8, v9;
float v10;
v0 := @this: org.apache.commons.io.input.CharSequenceInputStream;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.nio.charset.Charset;
v3 := @parameter2: int;
specialinvoke v0.<java.io.InputStream: void <init>()>();
v4 = virtualinvoke v2.<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>();
v5 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;
v6 = virtualinvoke v4.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>(v5);
v7 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;
v8 = virtualinvoke v6.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>(v7);
v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.charset.CharsetEncoder encoder> = v8;
v9 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.charset.CharsetEncoder encoder>;
v10 = virtualinvoke v9.<java.nio.charset.CharsetEncoder: float maxBytesPerChar()>();
v11 = v3 cmpg v10;
if v11 >= 0 goto label1;
v12 = new java.lang.IllegalArgumentException;
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,float)>(v3, v10) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Buffer size \u0001 is less than maxBytesPerChar \u0001");
specialinvoke v12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v13);
throw v12;
label1:
v14 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(v3);
v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf> = v14;
v15 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;
virtualinvoke v15.<java.nio.ByteBuffer: java.nio.ByteBuffer flip()>();
v16 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>(v1);
v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.CharBuffer cbuf> = v16;
v17 = (int) -1;
v0.<org.apache.commons.io.input.CharSequenceInputStream: int mark_cbuf> = v17;
v18 = (int) -1;
v0.<org.apache.commons.io.input.CharSequenceInputStream: int mark_bbuf> = v18;
return;
}
public void <init>(java.lang.CharSequence, java.lang.String, int)
{
java.lang.CharSequence v1;
java.nio.charset.Charset v4;
int v3;
java.lang.String v2;
org.apache.commons.io.input.CharSequenceInputStream v0;
v0 := @this: org.apache.commons.io.input.CharSequenceInputStream;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: int;
v4 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(v2);
specialinvoke v0.<org.apache.commons.io.input.CharSequenceInputStream: void <init>(java.lang.CharSequence,java.nio.charset.Charset,int)>(v1, v4, v3);
return;
}
public void <init>(java.lang.CharSequence, java.nio.charset.Charset)
{
java.lang.CharSequence v1;
java.nio.charset.Charset v2;
org.apache.commons.io.input.CharSequenceInputStream v0;
v0 := @this: org.apache.commons.io.input.CharSequenceInputStream;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.nio.charset.Charset;
specialinvoke v0.<org.apache.commons.io.input.CharSequenceInputStream: void <init>(java.lang.CharSequence,java.nio.charset.Charset,int)>(v1, v2, 2048);
return;
}
public void <init>(java.lang.CharSequence, java.lang.String)
{
java.lang.String v2;
java.lang.CharSequence v1;
org.apache.commons.io.input.CharSequenceInputStream v0;
v0 := @this: org.apache.commons.io.input.CharSequenceInputStream;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.String;
specialinvoke v0.<org.apache.commons.io.input.CharSequenceInputStream: void <init>(java.lang.CharSequence,java.lang.String,int)>(v1, v2, 2048);
return;
}
private void fillBuffer() throws java.nio.charset.CharacterCodingException
{
java.nio.CharBuffer v3;
org.apache.commons.io.input.CharSequenceInputStream v0;
java.nio.ByteBuffer v1, v4, v7;
java.nio.charset.CoderResult v5;
java.nio.charset.CharsetEncoder v2;
boolean v6;
v0 := @this: org.apache.commons.io.input.CharSequenceInputStream;
v1 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;
virtualinvoke v1.<java.nio.ByteBuffer: java.nio.ByteBuffer compact()>();
v2 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.charset.CharsetEncoder encoder>;
v3 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.CharBuffer cbuf>;
v4 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;
v5 = virtualinvoke v2.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>(v3, v4, 1);
v6 = virtualinvoke v5.<java.nio.charset.CoderResult: boolean isError()>();
if v6 == 0 goto label1;
virtualinvoke v5.<java.nio.charset.CoderResult: void throwException()>();
label1:
v7 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;
virtualinvoke v7.<java.nio.ByteBuffer: java.nio.ByteBuffer flip()>();
return;
}
public int read(byte[], int, int) throws java.io.IOException
{
byte[] v1;
java.lang.IndexOutOfBoundsException v6;
java.nio.ByteBuffer v15, v17, v20, v21, v9;
int v13, v14, v18, v19, v2, v27, v28, v3, v4, v5, v7;
java.lang.String v8;
boolean v10, v12, v16, v22, v24, v26;
java.nio.CharBuffer v11, v23, v25;
org.apache.commons.io.input.CharSequenceInputStream v0;
v0 := @this: org.apache.commons.io.input.CharSequenceInputStream;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "array");
if v3 < 0 goto label1;
v4 = v2 + v3;
v5 = lengthof v1;
if v4 <= v5 goto label2;
label1:
v6 = new java.lang.IndexOutOfBoundsException;
v7 = lengthof v1;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int,int)>(v7, v2, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Array Size=\u0001, offset=\u0001, length=\u0001");
specialinvoke v6.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v8);
throw v6;
label2:
if v3 != 0 goto label3;
return 0;
label3:
v9 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;
v10 = virtualinvoke v9.<java.nio.ByteBuffer: boolean hasRemaining()>();
if v10 != 0 goto label4;
v11 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.CharBuffer cbuf>;
v12 = virtualinvoke v11.<java.nio.CharBuffer: boolean hasRemaining()>();
if v12 != 0 goto label4;
v13 = (int) -1;
return v13;
label4:
v14 = 0;
label5:
if v3 <= 0 goto label7;
v15 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;
v16 = virtualinvoke v15.<java.nio.ByteBuffer: boolean hasRemaining()>();
if v16 == 0 goto label6;
v17 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;
v18 = virtualinvoke v17.<java.nio.ByteBuffer: int remaining()>();
v19 = staticinvoke <java.lang.Math: int min(int,int)>(v18, v3);
v20 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;
virtualinvoke v20.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(v1, v2, v19);
v2 = v2 + v19;
v3 = v3 - v19;
v14 = v14 + v19;
goto label5;
label6:
specialinvoke v0.<org.apache.commons.io.input.CharSequenceInputStream: void fillBuffer()>();
v21 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;
v22 = virtualinvoke v21.<java.nio.ByteBuffer: boolean hasRemaining()>();
if v22 != 0 goto label5;
v23 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.CharBuffer cbuf>;
v24 = virtualinvoke v23.<java.nio.CharBuffer: boolean hasRemaining()>();
if v24 != 0 goto label5;
label7:
if v14 != 0 goto label8;
v25 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.CharBuffer cbuf>;
v26 = virtualinvoke v25.<java.nio.CharBuffer: boolean hasRemaining()>();
if v26 != 0 goto label8;
v27 = (int) -1;
v28 = v27;
goto label9;
label8:
v28 = v14;
label9:
return v28;
}
public int read() throws java.io.IOException
{
java.nio.CharBuffer v8;
org.apache.commons.io.input.CharSequenceInputStream v0;
java.nio.ByteBuffer v1, v3, v6;
short v5;
byte v4;
int v10;
boolean v2, v7, v9;
v0 := @this: org.apache.commons.io.input.CharSequenceInputStream;
label1:
v1 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;
v2 = virtualinvoke v1.<java.nio.ByteBuffer: boolean hasRemaining()>();
if v2 == 0 goto label2;
v3 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;
v4 = virtualinvoke v3.<java.nio.ByteBuffer: byte get()>();
v5 = v4 & 255;
return v5;
label2:
specialinvoke v0.<org.apache.commons.io.input.CharSequenceInputStream: void fillBuffer()>();
v6 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;
v7 = virtualinvoke v6.<java.nio.ByteBuffer: boolean hasRemaining()>();
if v7 != 0 goto label1;
v8 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.CharBuffer cbuf>;
v9 = virtualinvoke v8.<java.nio.CharBuffer: boolean hasRemaining()>();
if v9 != 0 goto label1;
v10 = (int) -1;
return v10;
}
public int read(byte[]) throws java.io.IOException
{
byte[] v1;
int v2, v3;
org.apache.commons.io.input.CharSequenceInputStream v0;
v0 := @this: org.apache.commons.io.input.CharSequenceInputStream;
v1 := @parameter0: byte[];
v2 = lengthof v1;
v3 = virtualinvoke v0.<org.apache.commons.io.input.CharSequenceInputStream: int read(byte[],int,int)>(v1, 0, v2);
return v3;
}
public long skip(long) throws java.io.IOException
{
byte v3;
int v4;
long v1, v2;
org.apache.commons.io.input.CharSequenceInputStream v0;
v0 := @this: org.apache.commons.io.input.CharSequenceInputStream;
v1 := @parameter0: long;
v2 = 0L;
label1:
v3 = v1 cmp 0L;
if v3 <= 0 goto label2;
v4 = virtualinvoke v0.<org.apache.commons.io.input.CharSequenceInputStream: int available()>();
if v4 <= 0 goto label2;
virtualinvoke v0.<org.apache.commons.io.input.CharSequenceInputStream: int read()>();
v1 = v1 - 1L;
v2 = v2 + 1L;
goto label1;
label2:
return v2;
}
public int available() throws java.io.IOException
{
java.nio.CharBuffer v3;
int v2, v4, v5;
org.apache.commons.io.input.CharSequenceInputStream v0;
java.nio.ByteBuffer v1;
v0 := @this: org.apache.commons.io.input.CharSequenceInputStream;
v1 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;
v2 = virtualinvoke v1.<java.nio.ByteBuffer: int remaining()>();
v3 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.CharBuffer cbuf>;
v4 = virtualinvoke v3.<java.nio.CharBuffer: int remaining()>();
v5 = v2 + v4;
return v5;
}
public void close() throws java.io.IOException
{
org.apache.commons.io.input.CharSequenceInputStream v0;
v0 := @this: org.apache.commons.io.input.CharSequenceInputStream;
return;
}
public synchronized void mark(int)
{
java.nio.CharBuffer v2, v6;
org.apache.commons.io.input.CharSequenceInputStream v0;
java.nio.ByteBuffer v4, v7;
int v1, v3, v5;
v0 := @this: org.apache.commons.io.input.CharSequenceInputStream;
v1 := @parameter0: int;
v2 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.CharBuffer cbuf>;
v3 = virtualinvoke v2.<java.nio.CharBuffer: int position()>();
v0.<org.apache.commons.io.input.CharSequenceInputStream: int mark_cbuf> = v3;
v4 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;
v5 = virtualinvoke v4.<java.nio.ByteBuffer: int position()>();
v0.<org.apache.commons.io.input.CharSequenceInputStream: int mark_bbuf> = v5;
v6 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.CharBuffer cbuf>;
virtualinvoke v6.<java.nio.CharBuffer: java.nio.CharBuffer mark()>();
v7 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;
virtualinvoke v7.<java.nio.ByteBuffer: java.nio.ByteBuffer mark()>();
return;
}
public synchronized void reset() throws java.io.IOException
{
java.lang.IllegalStateException v17;
java.nio.ByteBuffer v12, v13, v22, v7, v8;
int v1, v10, v11, v15, v16, v19, v2, v20, v23, v24, v25, v4;
java.lang.String v21;
java.nio.CharBuffer v14, v18, v3, v6, v9;
org.apache.commons.io.input.CharSequenceInputStream v0;
java.nio.charset.CharsetEncoder v5;
v0 := @this: org.apache.commons.io.input.CharSequenceInputStream;
v1 = v0.<org.apache.commons.io.input.CharSequenceInputStream: int mark_cbuf>;
v2 = (int) -1;
if v1 == v2 goto label4;
v3 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.CharBuffer cbuf>;
v4 = virtualinvoke v3.<java.nio.CharBuffer: int position()>();
if v4 == 0 goto label2;
v5 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.charset.CharsetEncoder encoder>;
virtualinvoke v5.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder reset()>();
v6 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.CharBuffer cbuf>;
virtualinvoke v6.<java.nio.CharBuffer: java.nio.CharBuffer rewind()>();
v7 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;
virtualinvoke v7.<java.nio.ByteBuffer: java.nio.ByteBuffer rewind()>();
v8 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;
virtualinvoke v8.<java.nio.ByteBuffer: java.nio.ByteBuffer limit(int)>(0);
label1:
v9 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.CharBuffer cbuf>;
v10 = virtualinvoke v9.<java.nio.CharBuffer: int position()>();
v11 = v0.<org.apache.commons.io.input.CharSequenceInputStream: int mark_cbuf>;
if v10 >= v11 goto label2;
v12 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;
virtualinvoke v12.<java.nio.ByteBuffer: java.nio.ByteBuffer rewind()>();
v13 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;
virtualinvoke v13.<java.nio.ByteBuffer: java.nio.ByteBuffer limit(int)>(0);
specialinvoke v0.<org.apache.commons.io.input.CharSequenceInputStream: void fillBuffer()>();
goto label1;
label2:
v14 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.CharBuffer cbuf>;
v15 = virtualinvoke v14.<java.nio.CharBuffer: int position()>();
v16 = v0.<org.apache.commons.io.input.CharSequenceInputStream: int mark_cbuf>;
if v15 == v16 goto label3;
v17 = new java.lang.IllegalStateException;
v18 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.CharBuffer cbuf>;
v19 = virtualinvoke v18.<java.nio.CharBuffer: int position()>();
v20 = v0.<org.apache.commons.io.input.CharSequenceInputStream: int mark_cbuf>;
v21 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v19, v20) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unexpected CharBuffer position: actual=\u0001 expected=\u0001");
specialinvoke v17.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v21);
throw v17;
label3:
v22 = v0.<org.apache.commons.io.input.CharSequenceInputStream: java.nio.ByteBuffer bbuf>;
v23 = v0.<org.apache.commons.io.input.CharSequenceInputStream: int mark_bbuf>;
virtualinvoke v22.<java.nio.ByteBuffer: java.nio.ByteBuffer position(int)>(v23);
v24 = (int) -1;
v0.<org.apache.commons.io.input.CharSequenceInputStream: int mark_cbuf> = v24;
v25 = (int) -1;
v0.<org.apache.commons.io.input.CharSequenceInputStream: int mark_bbuf> = v25;
label4:
return;
}
public boolean markSupported()
{
org.apache.commons.io.input.CharSequenceInputStream v0;
v0 := @this: org.apache.commons.io.input.CharSequenceInputStream;
return 1;
}
}