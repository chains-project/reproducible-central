public class org.apache.commons.io.input.CountingInputStream extends org.apache.commons.io.input.ProxyInputStream
{
private long count;
public void <init>(java.io.InputStream)
{
org.apache.commons.io.input.CountingInputStream v0;
java.io.InputStream v1;
v0 := @this: org.apache.commons.io.input.CountingInputStream;
v1 := @parameter0: java.io.InputStream;
specialinvoke v0.<org.apache.commons.io.input.ProxyInputStream: void <init>(java.io.InputStream)>(v1);
return;
}
public synchronized long skip(long) throws java.io.IOException
{
org.apache.commons.io.input.CountingInputStream v0;
long v1, v2, v3, v4;
v0 := @this: org.apache.commons.io.input.CountingInputStream;
v1 := @parameter0: long;
v2 = specialinvoke v0.<org.apache.commons.io.input.ProxyInputStream: long skip(long)>(v1);
v3 = v0.<org.apache.commons.io.input.CountingInputStream: long count>;
v4 = v3 + v2;
v0.<org.apache.commons.io.input.CountingInputStream: long count> = v4;
return v2;
}
protected synchronized void afterRead(int)
{
org.apache.commons.io.input.CountingInputStream v0;
int v1, v2;
long v3, v4;
v0 := @this: org.apache.commons.io.input.CountingInputStream;
v1 := @parameter0: int;
v2 = (int) -1;
if v1 == v2 goto label1;
v3 = v0.<org.apache.commons.io.input.CountingInputStream: long count>;
v4 = v3 + v1;
v0.<org.apache.commons.io.input.CountingInputStream: long count> = v4;
label1:
return;
}
public int getCount()
{
byte v2;
org.apache.commons.io.input.CountingInputStream v0;
java.lang.ArithmeticException v3;
long v1;
java.lang.String v4;
v0 := @this: org.apache.commons.io.input.CountingInputStream;
v1 = virtualinvoke v0.<org.apache.commons.io.input.CountingInputStream: long getByteCount()>();
v2 = v1 cmp 2147483647L;
if v2 <= 0 goto label1;
v3 = new java.lang.ArithmeticException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("The byte count \u0001 is too large to be converted to an int");
specialinvoke v3.<java.lang.ArithmeticException: void <init>(java.lang.String)>(v4);
throw v3;
label1:
return v1;
}
public int resetCount()
{
byte v2;
org.apache.commons.io.input.CountingInputStream v0;
java.lang.ArithmeticException v3;
long v1;
java.lang.String v4;
v0 := @this: org.apache.commons.io.input.CountingInputStream;
v1 = virtualinvoke v0.<org.apache.commons.io.input.CountingInputStream: long resetByteCount()>();
v2 = v1 cmp 2147483647L;
if v2 <= 0 goto label1;
v3 = new java.lang.ArithmeticException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("The byte count \u0001 is too large to be converted to an int");
specialinvoke v3.<java.lang.ArithmeticException: void <init>(java.lang.String)>(v4);
throw v3;
label1:
return v1;
}
public synchronized long getByteCount()
{
long v1;
org.apache.commons.io.input.CountingInputStream v0;
v0 := @this: org.apache.commons.io.input.CountingInputStream;
v1 = v0.<org.apache.commons.io.input.CountingInputStream: long count>;
return v1;
}
public synchronized long resetByteCount()
{
long v1;
org.apache.commons.io.input.CountingInputStream v0;
v0 := @this: org.apache.commons.io.input.CountingInputStream;
v1 = v0.<org.apache.commons.io.input.CountingInputStream: long count>;
v0.<org.apache.commons.io.input.CountingInputStream: long count> = 0L;
return v1;
}
}