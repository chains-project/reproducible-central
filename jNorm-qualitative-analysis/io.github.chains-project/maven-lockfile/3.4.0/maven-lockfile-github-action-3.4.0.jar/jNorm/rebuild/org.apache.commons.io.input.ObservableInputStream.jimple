public class org.apache.commons.io.input.ObservableInputStream extends org.apache.commons.io.input.ProxyInputStream
{
private final java.util.List observers;
public void <init>(java.io.InputStream)
{
org.apache.commons.io.input.ObservableInputStream v0;
java.io.InputStream v1;
java.util.ArrayList v2;
v0 := @this: org.apache.commons.io.input.ObservableInputStream;
v1 := @parameter0: java.io.InputStream;
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
specialinvoke v0.<org.apache.commons.io.input.ObservableInputStream: void <init>(java.io.InputStream,java.util.List)>(v1, v2);
return;
}
private void <init>(java.io.InputStream, java.util.List)
{
java.util.List v2;
org.apache.commons.io.input.ObservableInputStream v0;
java.io.InputStream v1;
v0 := @this: org.apache.commons.io.input.ObservableInputStream;
v1 := @parameter0: java.io.InputStream;
v2 := @parameter1: java.util.List;
specialinvoke v0.<org.apache.commons.io.input.ProxyInputStream: void <init>(java.io.InputStream)>(v1);
v0.<org.apache.commons.io.input.ObservableInputStream: java.util.List observers> = v2;
return;
}
public transient void <init>(java.io.InputStream, org.apache.commons.io.input.ObservableInputStream$Observer[])
{
java.util.List v3;
org.apache.commons.io.input.ObservableInputStream v0;
org.apache.commons.io.input.ObservableInputStream$Observer[] v2;
java.io.InputStream v1;
v0 := @this: org.apache.commons.io.input.ObservableInputStream;
v1 := @parameter0: java.io.InputStream;
v2 := @parameter1: org.apache.commons.io.input.ObservableInputStream$Observer[];
v3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v2);
specialinvoke v0.<org.apache.commons.io.input.ObservableInputStream: void <init>(java.io.InputStream,java.util.List)>(v1, v3);
return;
}
public void add(org.apache.commons.io.input.ObservableInputStream$Observer)
{
java.util.List v2;
org.apache.commons.io.input.ObservableInputStream v0;
org.apache.commons.io.input.ObservableInputStream$Observer v1;
v0 := @this: org.apache.commons.io.input.ObservableInputStream;
v1 := @parameter0: org.apache.commons.io.input.ObservableInputStream$Observer;
v2 = v0.<org.apache.commons.io.input.ObservableInputStream: java.util.List observers>;
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v1);
return;
}
public void close() throws java.io.IOException
{
org.apache.commons.io.input.ObservableInputStream v0;
v0 := @this: org.apache.commons.io.input.ObservableInputStream;
virtualinvoke v0.<org.apache.commons.io.input.ObservableInputStream: void noteClosed()>();
return;
}
public void consume() throws java.io.IOException
{
byte[] v1;
org.apache.commons.io.input.ObservableInputStream v0;
int v2, v3;
v0 := @this: org.apache.commons.io.input.ObservableInputStream;
v1 = staticinvoke <org.apache.commons.io.IOUtils: byte[] byteArray()>();
label1:
v2 = virtualinvoke v0.<org.apache.commons.io.input.ObservableInputStream: int read(byte[])>(v1);
v3 = (int) -1;
if v2 != v3 goto label1;
return;
}
public java.util.List getObservers()
{
java.util.List v1;
org.apache.commons.io.input.ObservableInputStream v0;
v0 := @this: org.apache.commons.io.input.ObservableInputStream;
v1 = v0.<org.apache.commons.io.input.ObservableInputStream: java.util.List observers>;
return v1;
}
protected void noteClosed() throws java.io.IOException
{
java.util.List v1;
org.apache.commons.io.input.ObservableInputStream v0;
java.util.Iterator v2;
java.lang.Object v4;
boolean v3;
v0 := @this: org.apache.commons.io.input.ObservableInputStream;
v1 = virtualinvoke v0.<org.apache.commons.io.input.ObservableInputStream: java.util.List getObservers()>();
v2 = interfaceinvoke v1.<java.util.List: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v4.<org.apache.commons.io.input.ObservableInputStream$Observer: void closed()>();
goto label1;
label2:
return;
}
protected void noteDataByte(int) throws java.io.IOException
{
java.util.List v2;
org.apache.commons.io.input.ObservableInputStream v0;
java.util.Iterator v3;
int v1;
java.lang.Object v5;
boolean v4;
v0 := @this: org.apache.commons.io.input.ObservableInputStream;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<org.apache.commons.io.input.ObservableInputStream: java.util.List getObservers()>();
v3 = interfaceinvoke v2.<java.util.List: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v5.<org.apache.commons.io.input.ObservableInputStream$Observer: void data(int)>(v1);
goto label1;
label2:
return;
}
protected void noteDataBytes(byte[], int, int) throws java.io.IOException
{
byte[] v1;
org.apache.commons.io.input.ObservableInputStream v0;
java.util.Iterator v5;
java.util.List v4;
int v2, v3;
java.lang.Object v7;
boolean v6;
v0 := @this: org.apache.commons.io.input.ObservableInputStream;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = virtualinvoke v0.<org.apache.commons.io.input.ObservableInputStream: java.util.List getObservers()>();
v5 = interfaceinvoke v4.<java.util.List: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label2;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v7.<org.apache.commons.io.input.ObservableInputStream$Observer: void data(byte[],int,int)>(v1, v2, v3);
goto label1;
label2:
return;
}
protected void noteError(java.io.IOException) throws java.io.IOException
{
java.util.List v2;
org.apache.commons.io.input.ObservableInputStream v0;
java.util.Iterator v3;
java.io.IOException v1;
java.lang.Object v5;
boolean v4;
v0 := @this: org.apache.commons.io.input.ObservableInputStream;
v1 := @parameter0: java.io.IOException;
v2 = virtualinvoke v0.<org.apache.commons.io.input.ObservableInputStream: java.util.List getObservers()>();
v3 = interfaceinvoke v2.<java.util.List: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v5.<org.apache.commons.io.input.ObservableInputStream$Observer: void error(java.io.IOException)>(v1);
goto label1;
label2:
return;
}
protected void noteFinished() throws java.io.IOException
{
java.util.List v1;
org.apache.commons.io.input.ObservableInputStream v0;
java.util.Iterator v2;
java.lang.Object v4;
boolean v3;
v0 := @this: org.apache.commons.io.input.ObservableInputStream;
v1 = virtualinvoke v0.<org.apache.commons.io.input.ObservableInputStream: java.util.List getObservers()>();
v2 = interfaceinvoke v1.<java.util.List: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v4.<org.apache.commons.io.input.ObservableInputStream$Observer: void finished()>();
goto label1;
label2:
return;
}
private void notify(byte[], int, int, java.io.IOException) throws java.io.IOException
{
byte[] v1;
org.apache.commons.io.input.ObservableInputStream v0;
int v2, v3, v5;
java.io.IOException v4;
v0 := @this: org.apache.commons.io.input.ObservableInputStream;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: java.io.IOException;
if v4 == null goto label1;
virtualinvoke v0.<org.apache.commons.io.input.ObservableInputStream: void noteError(java.io.IOException)>(v4);
throw v4;
label1:
v5 = (int) -1;
if v3 != v5 goto label2;
virtualinvoke v0.<org.apache.commons.io.input.ObservableInputStream: void noteFinished()>();
goto label3;
label2:
if v3 <= 0 goto label3;
virtualinvoke v0.<org.apache.commons.io.input.ObservableInputStream: void noteDataBytes(byte[],int,int)>(v1, v2, v3);
label3:
return;
}
public int read() throws java.io.IOException
{
org.apache.commons.io.input.ObservableInputStream v0;
int v1, v4;
java.io.IOException v2, v3;
v0 := @this: org.apache.commons.io.input.ObservableInputStream;
v1 = 0;
v2 = null;
label1:
v1 = specialinvoke v0.<org.apache.commons.io.input.ProxyInputStream: int read()>();
label2:
goto label4;
label3:
v3 := @caughtexception;
v2 = v3;
label4:
if v2 == null goto label5;
virtualinvoke v0.<org.apache.commons.io.input.ObservableInputStream: void noteError(java.io.IOException)>(v2);
throw v2;
label5:
v4 = (int) -1;
if v1 != v4 goto label6;
virtualinvoke v0.<org.apache.commons.io.input.ObservableInputStream: void noteFinished()>();
goto label7;
label6:
virtualinvoke v0.<org.apache.commons.io.input.ObservableInputStream: void noteDataByte(int)>(v1);
label7:
return v1;
catch java.io.IOException from label1 to label2 with label3;
}
public int read(byte[]) throws java.io.IOException
{
byte[] v1;
org.apache.commons.io.input.ObservableInputStream v0;
int v2;
java.io.IOException v3, v4;
v0 := @this: org.apache.commons.io.input.ObservableInputStream;
v1 := @parameter0: byte[];
v2 = 0;
v3 = null;
label1:
v2 = specialinvoke v0.<org.apache.commons.io.input.ProxyInputStream: int read(byte[])>(v1);
label2:
goto label4;
label3:
v4 := @caughtexception;
v3 = v4;
label4:
specialinvoke v0.<org.apache.commons.io.input.ObservableInputStream: void notify(byte[],int,int,java.io.IOException)>(v1, 0, v2, v3);
return v2;
catch java.io.IOException from label1 to label2 with label3;
}
public int read(byte[], int, int) throws java.io.IOException
{
byte[] v1;
org.apache.commons.io.input.ObservableInputStream v0;
int v2, v3, v4;
java.io.IOException v5, v6;
v0 := @this: org.apache.commons.io.input.ObservableInputStream;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = 0;
v5 = null;
label1:
v4 = specialinvoke v0.<org.apache.commons.io.input.ProxyInputStream: int read(byte[],int,int)>(v1, v2, v3);
label2:
goto label4;
label3:
v6 := @caughtexception;
v5 = v6;
label4:
specialinvoke v0.<org.apache.commons.io.input.ObservableInputStream: void notify(byte[],int,int,java.io.IOException)>(v1, v2, v4, v5);
return v4;
catch java.io.IOException from label1 to label2 with label3;
}
public void remove(org.apache.commons.io.input.ObservableInputStream$Observer)
{
java.util.List v2;
org.apache.commons.io.input.ObservableInputStream v0;
org.apache.commons.io.input.ObservableInputStream$Observer v1;
v0 := @this: org.apache.commons.io.input.ObservableInputStream;
v1 := @parameter0: org.apache.commons.io.input.ObservableInputStream$Observer;
v2 = v0.<org.apache.commons.io.input.ObservableInputStream: java.util.List observers>;
interfaceinvoke v2.<java.util.List: boolean remove(java.lang.Object)>(v1);
return;
}
public void removeAllObservers()
{
java.util.List v1;
org.apache.commons.io.input.ObservableInputStream v0;
v0 := @this: org.apache.commons.io.input.ObservableInputStream;
v1 = v0.<org.apache.commons.io.input.ObservableInputStream: java.util.List observers>;
interfaceinvoke v1.<java.util.List: void clear()>();
return;
}
}