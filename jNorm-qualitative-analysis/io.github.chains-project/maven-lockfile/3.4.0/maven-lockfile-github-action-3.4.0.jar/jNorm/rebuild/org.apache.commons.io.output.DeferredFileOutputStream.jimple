public class org.apache.commons.io.output.DeferredFileOutputStream extends org.apache.commons.io.output.ThresholdingOutputStream
{
private org.apache.commons.io.output.ByteArrayOutputStream memoryOutputStream;
private java.io.OutputStream currentOutputStream;
private java.io.File outputFile;
private final java.lang.String prefix;
private final java.lang.String suffix;
private final java.io.File directory;
private boolean closed;
public void <init>(int, java.io.File)
{
int v1;
java.io.File v2;
org.apache.commons.io.output.DeferredFileOutputStream v0;
v0 := @this: org.apache.commons.io.output.DeferredFileOutputStream;
v1 := @parameter0: int;
v2 := @parameter1: java.io.File;
specialinvoke v0.<org.apache.commons.io.output.DeferredFileOutputStream: void <init>(int,java.io.File,java.lang.String,java.lang.String,java.io.File,int)>(v1, v2, null, null, null, 1024);
return;
}
private void <init>(int, java.io.File, java.lang.String, java.lang.String, java.io.File, int)
{
org.apache.commons.io.output.DeferredFileOutputStream v0;
org.apache.commons.io.output.ByteArrayOutputStream v7, v8;
java.io.File v2, v5;
int v1, v6;
java.lang.String v3, v4;
v0 := @this: org.apache.commons.io.output.DeferredFileOutputStream;
v1 := @parameter0: int;
v2 := @parameter1: java.io.File;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.String;
v5 := @parameter4: java.io.File;
v6 := @parameter5: int;
specialinvoke v0.<org.apache.commons.io.output.ThresholdingOutputStream: void <init>(int)>(v1);
v0.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.File outputFile> = v2;
v0.<org.apache.commons.io.output.DeferredFileOutputStream: java.lang.String prefix> = v3;
v0.<org.apache.commons.io.output.DeferredFileOutputStream: java.lang.String suffix> = v4;
v0.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.File directory> = v5;
v7 = new org.apache.commons.io.output.ByteArrayOutputStream;
specialinvoke v7.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>(int)>(v6);
v0.<org.apache.commons.io.output.DeferredFileOutputStream: org.apache.commons.io.output.ByteArrayOutputStream memoryOutputStream> = v7;
v8 = v0.<org.apache.commons.io.output.DeferredFileOutputStream: org.apache.commons.io.output.ByteArrayOutputStream memoryOutputStream>;
v0.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.OutputStream currentOutputStream> = v8;
return;
}
public void <init>(int, int, java.io.File)
{
org.apache.commons.io.output.DeferredFileOutputStream v0;
int v1, v2;
java.lang.IllegalArgumentException v4;
java.io.File v3;
v0 := @this: org.apache.commons.io.output.DeferredFileOutputStream;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: java.io.File;
specialinvoke v0.<org.apache.commons.io.output.DeferredFileOutputStream: void <init>(int,java.io.File,java.lang.String,java.lang.String,java.io.File,int)>(v1, v3, null, null, null, v2);
if v2 >= 0 goto label1;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Initial buffer size must be atleast 0.");
throw v4;
label1:
return;
}
public void <init>(int, int, java.lang.String, java.lang.String, java.io.File)
{
org.apache.commons.io.output.DeferredFileOutputStream v0;
java.lang.IllegalArgumentException v6, v7;
java.io.File v5;
int v1, v2;
java.lang.String v3, v4;
v0 := @this: org.apache.commons.io.output.DeferredFileOutputStream;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.lang.String;
v5 := @parameter4: java.io.File;
specialinvoke v0.<org.apache.commons.io.output.DeferredFileOutputStream: void <init>(int,java.io.File,java.lang.String,java.lang.String,java.io.File,int)>(v1, null, v3, v4, v5, v2);
if v3 != null goto label1;
v6 = new java.lang.IllegalArgumentException;
specialinvoke v6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Temporary file prefix is missing");
throw v6;
label1:
if v2 >= 0 goto label2;
v7 = new java.lang.IllegalArgumentException;
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Initial buffer size must be atleast 0.");
throw v7;
label2:
return;
}
public void <init>(int, java.lang.String, java.lang.String, java.io.File)
{
org.apache.commons.io.output.DeferredFileOutputStream v0;
int v1;
java.lang.String v2, v3;
java.lang.IllegalArgumentException v5;
java.io.File v4;
v0 := @this: org.apache.commons.io.output.DeferredFileOutputStream;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.io.File;
specialinvoke v0.<org.apache.commons.io.output.DeferredFileOutputStream: void <init>(int,java.io.File,java.lang.String,java.lang.String,java.io.File,int)>(v1, null, v2, v3, v4, 1024);
if v2 != null goto label1;
v5 = new java.lang.IllegalArgumentException;
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Temporary file prefix is missing");
throw v5;
label1:
return;
}
public void close() throws java.io.IOException
{
org.apache.commons.io.output.DeferredFileOutputStream v0;
v0 := @this: org.apache.commons.io.output.DeferredFileOutputStream;
specialinvoke v0.<org.apache.commons.io.output.ThresholdingOutputStream: void close()>();
v0.<org.apache.commons.io.output.DeferredFileOutputStream: boolean closed> = 1;
return;
}
public byte[] getData()
{
byte[] v3;
org.apache.commons.io.output.DeferredFileOutputStream v0;
org.apache.commons.io.output.ByteArrayOutputStream v1, v2;
v0 := @this: org.apache.commons.io.output.DeferredFileOutputStream;
v1 = v0.<org.apache.commons.io.output.DeferredFileOutputStream: org.apache.commons.io.output.ByteArrayOutputStream memoryOutputStream>;
if v1 == null goto label1;
v2 = v0.<org.apache.commons.io.output.DeferredFileOutputStream: org.apache.commons.io.output.ByteArrayOutputStream memoryOutputStream>;
v3 = virtualinvoke v2.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArray()>();
goto label2;
label1:
v3 = null;
label2:
return v3;
}
public java.io.File getFile()
{
java.io.File v1;
org.apache.commons.io.output.DeferredFileOutputStream v0;
v0 := @this: org.apache.commons.io.output.DeferredFileOutputStream;
v1 = v0.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.File outputFile>;
return v1;
}
protected java.io.OutputStream getStream() throws java.io.IOException
{
java.io.OutputStream v1;
org.apache.commons.io.output.DeferredFileOutputStream v0;
v0 := @this: org.apache.commons.io.output.DeferredFileOutputStream;
v1 = v0.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.OutputStream currentOutputStream>;
return v1;
}
public boolean isInMemory()
{
boolean v1, v2;
org.apache.commons.io.output.DeferredFileOutputStream v0;
v0 := @this: org.apache.commons.io.output.DeferredFileOutputStream;
v1 = virtualinvoke v0.<org.apache.commons.io.output.DeferredFileOutputStream: boolean isThresholdExceeded()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
protected void thresholdReached() throws java.io.IOException
{
java.io.OutputStream v10;
org.apache.commons.io.output.DeferredFileOutputStream v0;
org.apache.commons.io.output.ByteArrayOutputStream v11;
java.io.IOException v12;
java.io.File v4, v5, v6, v7;
java.nio.file.OpenOption[] v9;
java.lang.String v1, v2, v3;
java.nio.file.Path v8;
v0 := @this: org.apache.commons.io.output.DeferredFileOutputStream;
v1 = v0.<org.apache.commons.io.output.DeferredFileOutputStream: java.lang.String prefix>;
if v1 == null goto label1;
v2 = v0.<org.apache.commons.io.output.DeferredFileOutputStream: java.lang.String prefix>;
v3 = v0.<org.apache.commons.io.output.DeferredFileOutputStream: java.lang.String suffix>;
v4 = v0.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.File directory>;
v5 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>(v2, v3, v4);
v0.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.File outputFile> = v5;
label1:
v6 = v0.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.File outputFile>;
staticinvoke <org.apache.commons.io.FileUtils: void forceMkdirParent(java.io.File)>(v6);
v7 = v0.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.File outputFile>;
v8 = virtualinvoke v7.<java.io.File: java.nio.file.Path toPath()>();
v9 = newarray (java.nio.file.OpenOption)[0];
v10 = staticinvoke <java.nio.file.Files: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])>(v8, v9);
label2:
v11 = v0.<org.apache.commons.io.output.DeferredFileOutputStream: org.apache.commons.io.output.ByteArrayOutputStream memoryOutputStream>;
virtualinvoke v11.<org.apache.commons.io.output.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>(v10);
label3:
goto label5;
label4:
v12 := @caughtexception;
virtualinvoke v10.<java.io.OutputStream: void close()>();
throw v12;
label5:
v0.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.OutputStream currentOutputStream> = v10;
v0.<org.apache.commons.io.output.DeferredFileOutputStream: org.apache.commons.io.output.ByteArrayOutputStream memoryOutputStream> = null;
return;
catch java.io.IOException from label2 to label3 with label4;
}
public java.io.InputStream toInputStream() throws java.io.IOException
{
org.apache.commons.io.output.DeferredFileOutputStream v0;
org.apache.commons.io.output.ByteArrayOutputStream v4;
java.io.IOException v2;
java.io.File v6;
java.nio.file.OpenOption[] v8;
java.nio.file.Path v7;
boolean v1, v3;
java.io.InputStream v5, v9;
v0 := @this: org.apache.commons.io.output.DeferredFileOutputStream;
v1 = v0.<org.apache.commons.io.output.DeferredFileOutputStream: boolean closed>;
if v1 != 0 goto label1;
v2 = new java.io.IOException;
specialinvoke v2.<java.io.IOException: void <init>(java.lang.String)>("Stream not closed");
throw v2;
label1:
v3 = virtualinvoke v0.<org.apache.commons.io.output.DeferredFileOutputStream: boolean isInMemory()>();
if v3 == 0 goto label2;
v4 = v0.<org.apache.commons.io.output.DeferredFileOutputStream: org.apache.commons.io.output.ByteArrayOutputStream memoryOutputStream>;
v5 = virtualinvoke v4.<org.apache.commons.io.output.ByteArrayOutputStream: java.io.InputStream toInputStream()>();
return v5;
label2:
v6 = v0.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.File outputFile>;
v7 = virtualinvoke v6.<java.io.File: java.nio.file.Path toPath()>();
v8 = newarray (java.nio.file.OpenOption)[0];
v9 = staticinvoke <java.nio.file.Files: java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])>(v7, v8);
return v9;
}
public void writeTo(java.io.OutputStream) throws java.io.IOException
{
java.io.OutputStream v1;
java.lang.Throwable v10;
org.apache.commons.io.output.DeferredFileOutputStream v0;
org.apache.commons.io.output.ByteArrayOutputStream v5;
java.io.IOException v3;
java.io.File v6;
java.nio.file.OpenOption[] v8;
java.nio.file.Path v7;
boolean v2, v4;
java.io.InputStream v9;
v0 := @this: org.apache.commons.io.output.DeferredFileOutputStream;
v1 := @parameter0: java.io.OutputStream;
v2 = v0.<org.apache.commons.io.output.DeferredFileOutputStream: boolean closed>;
if v2 != 0 goto label1;
v3 = new java.io.IOException;
specialinvoke v3.<java.io.IOException: void <init>(java.lang.String)>("Stream not closed");
throw v3;
label1:
v4 = virtualinvoke v0.<org.apache.commons.io.output.DeferredFileOutputStream: boolean isInMemory()>();
if v4 == 0 goto label2;
v5 = v0.<org.apache.commons.io.output.DeferredFileOutputStream: org.apache.commons.io.output.ByteArrayOutputStream memoryOutputStream>;
virtualinvoke v5.<org.apache.commons.io.output.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>(v1);
goto label6;
label2:
v6 = v0.<org.apache.commons.io.output.DeferredFileOutputStream: java.io.File outputFile>;
v7 = virtualinvoke v6.<java.io.File: java.nio.file.Path toPath()>();
v8 = newarray (java.nio.file.OpenOption)[0];
v9 = staticinvoke <java.nio.file.Files: java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])>(v7, v8);
label3:
staticinvoke <org.apache.commons.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>(v9, v1);
label4:
if v9 == null goto label6;
virtualinvoke v9.<java.io.InputStream: void close()>();
goto label6;
label5:
v10 := @caughtexception;
throw v10;
label6:
return;
catch java.lang.Throwable from label3 to label4 with label5;
}
}