public class org.apache.commons.io.output.FilterCollectionWriter extends java.io.Writer
{
protected final java.util.Collection EMPTY_WRITERS;
protected final java.util.Collection writers;
protected void <init>(java.util.Collection)
{
java.util.List v2;
java.util.Collection v1, v3;
org.apache.commons.io.output.FilterCollectionWriter v0;
v0 := @this: org.apache.commons.io.output.FilterCollectionWriter;
v1 := @parameter0: java.util.Collection;
specialinvoke v0.<java.io.Writer: void <init>()>();
v2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
v0.<org.apache.commons.io.output.FilterCollectionWriter: java.util.Collection EMPTY_WRITERS> = v2;
if v1 != null goto label1;
v3 = v0.<org.apache.commons.io.output.FilterCollectionWriter: java.util.Collection EMPTY_WRITERS>;
goto label2;
label1:
v3 = v1;
label2:
v0.<org.apache.commons.io.output.FilterCollectionWriter: java.util.Collection writers> = v3;
return;
}
protected transient void <init>(java.io.Writer[])
{
java.util.List v2;
java.io.Writer[] v1;
java.util.Collection v3;
org.apache.commons.io.output.FilterCollectionWriter v0;
v0 := @this: org.apache.commons.io.output.FilterCollectionWriter;
v1 := @parameter0: java.io.Writer[];
specialinvoke v0.<java.io.Writer: void <init>()>();
v2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
v0.<org.apache.commons.io.output.FilterCollectionWriter: java.util.Collection EMPTY_WRITERS> = v2;
if v1 != null goto label1;
v3 = v0.<org.apache.commons.io.output.FilterCollectionWriter: java.util.Collection EMPTY_WRITERS>;
goto label2;
label1:
v3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
label2:
v0.<org.apache.commons.io.output.FilterCollectionWriter: java.util.Collection writers> = v3;
return;
}
private java.util.List add(java.util.List, int, java.io.IOException)
{
java.util.List v1;
org.apache.commons.io.IOIndexedException v5;
int v2;
java.io.IOException v3;
org.apache.commons.io.output.FilterCollectionWriter v0;
java.util.ArrayList v4;
v0 := @this: org.apache.commons.io.output.FilterCollectionWriter;
v1 := @parameter0: java.util.List;
v2 := @parameter1: int;
v3 := @parameter2: java.io.IOException;
if v1 != null goto label1;
v4 = new java.util.ArrayList;
specialinvoke v4.<java.util.ArrayList: void <init>()>();
v1 = v4;
label1:
v5 = new org.apache.commons.io.IOIndexedException;
specialinvoke v5.<org.apache.commons.io.IOIndexedException: void <init>(int,java.lang.Throwable)>(v2, v3);
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v5);
return v1;
}
public java.io.Writer append(char) throws java.io.IOException
{
java.util.Iterator v5;
java.util.Collection v4;
char v1;
java.io.IOException v8;
org.apache.commons.io.output.FilterCollectionWriter v0;
java.util.List v2;
org.apache.commons.io.IOExceptionList v10;
int v3;
java.lang.Object v7;
boolean v6, v9;
v0 := @this: org.apache.commons.io.output.FilterCollectionWriter;
v1 := @parameter0: char;
v2 = null;
v3 = 0;
v4 = v0.<org.apache.commons.io.output.FilterCollectionWriter: java.util.Collection writers>;
v5 = interfaceinvoke v4.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label6;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
if v7 == null goto label5;
label2:
virtualinvoke v7.<java.io.Writer: java.io.Writer append(char)>(v1);
label3:
goto label5;
label4:
v8 := @caughtexception;
v2 = specialinvoke v0.<org.apache.commons.io.output.FilterCollectionWriter: java.util.List add(java.util.List,int,java.io.IOException)>(v2, v3, v8);
label5:
v3 = v3 + 1;
goto label1;
label6:
v9 = specialinvoke v0.<org.apache.commons.io.output.FilterCollectionWriter: boolean notEmpty(java.util.List)>(v2);
if v9 == 0 goto label7;
v10 = new org.apache.commons.io.IOExceptionList;
specialinvoke v10.<org.apache.commons.io.IOExceptionList: void <init>(java.lang.String,java.util.List)>("append", v2);
throw v10;
label7:
return v0;
catch java.io.IOException from label2 to label3 with label4;
}
public java.io.Writer append(java.lang.CharSequence) throws java.io.IOException
{
java.lang.CharSequence v1;
java.util.Iterator v5;
java.util.Collection v4;
java.io.IOException v8;
org.apache.commons.io.output.FilterCollectionWriter v0;
java.util.List v2;
org.apache.commons.io.IOExceptionList v10;
int v3;
java.lang.Object v7;
boolean v6, v9;
v0 := @this: org.apache.commons.io.output.FilterCollectionWriter;
v1 := @parameter0: java.lang.CharSequence;
v2 = null;
v3 = 0;
v4 = v0.<org.apache.commons.io.output.FilterCollectionWriter: java.util.Collection writers>;
v5 = interfaceinvoke v4.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label6;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
if v7 == null goto label5;
label2:
virtualinvoke v7.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(v1);
label3:
goto label5;
label4:
v8 := @caughtexception;
v2 = specialinvoke v0.<org.apache.commons.io.output.FilterCollectionWriter: java.util.List add(java.util.List,int,java.io.IOException)>(v2, v3, v8);
label5:
v3 = v3 + 1;
goto label1;
label6:
v9 = specialinvoke v0.<org.apache.commons.io.output.FilterCollectionWriter: boolean notEmpty(java.util.List)>(v2);
if v9 == 0 goto label7;
v10 = new org.apache.commons.io.IOExceptionList;
specialinvoke v10.<org.apache.commons.io.IOExceptionList: void <init>(java.lang.String,java.util.List)>("append", v2);
throw v10;
label7:
return v0;
catch java.io.IOException from label2 to label3 with label4;
}
public java.io.Writer append(java.lang.CharSequence, int, int) throws java.io.IOException
{
java.lang.CharSequence v1;
java.util.Iterator v7;
java.util.Collection v6;
java.io.IOException v10;
org.apache.commons.io.output.FilterCollectionWriter v0;
java.util.List v4;
org.apache.commons.io.IOExceptionList v12;
int v2, v3, v5;
java.lang.Object v9;
boolean v11, v8;
v0 := @this: org.apache.commons.io.output.FilterCollectionWriter;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = null;
v5 = 0;
v6 = v0.<org.apache.commons.io.output.FilterCollectionWriter: java.util.Collection writers>;
v7 = interfaceinvoke v6.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label6;
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
if v9 == null goto label5;
label2:
virtualinvoke v9.<java.io.Writer: java.io.Writer append(java.lang.CharSequence,int,int)>(v1, v2, v3);
label3:
goto label5;
label4:
v10 := @caughtexception;
v4 = specialinvoke v0.<org.apache.commons.io.output.FilterCollectionWriter: java.util.List add(java.util.List,int,java.io.IOException)>(v4, v5, v10);
label5:
v5 = v5 + 1;
goto label1;
label6:
v11 = specialinvoke v0.<org.apache.commons.io.output.FilterCollectionWriter: boolean notEmpty(java.util.List)>(v4);
if v11 == 0 goto label7;
v12 = new org.apache.commons.io.IOExceptionList;
specialinvoke v12.<org.apache.commons.io.IOExceptionList: void <init>(java.lang.String,java.util.List)>("append", v4);
throw v12;
label7:
return v0;
catch java.io.IOException from label2 to label3 with label4;
}
public void close() throws java.io.IOException
{
java.util.Iterator v2;
org.apache.commons.io.IOExceptionList v5;
java.util.Collection v1;
java.lang.Object v6;
org.apache.commons.io.output.FilterCollectionWriter v0;
boolean v3, v4;
v0 := @this: org.apache.commons.io.output.FilterCollectionWriter;
v1 = v0.<org.apache.commons.io.output.FilterCollectionWriter: java.util.Collection writers>;
v2 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
goto label1;
label2:
v4 = specialinvoke v0.<org.apache.commons.io.output.FilterCollectionWriter: boolean notEmpty(java.util.List)>(null);
if v4 == 0 goto label3;
v5 = new org.apache.commons.io.IOExceptionList;
specialinvoke v5.<org.apache.commons.io.IOExceptionList: void <init>(java.lang.String,java.util.List)>("close", null);
throw v5;
label3:
return;
}
public void flush() throws java.io.IOException
{
java.util.Iterator v4;
java.util.Collection v3;
java.io.IOException v7;
org.apache.commons.io.output.FilterCollectionWriter v0;
java.util.List v1;
org.apache.commons.io.IOExceptionList v9;
int v2;
java.lang.Object v6;
boolean v5, v8;
v0 := @this: org.apache.commons.io.output.FilterCollectionWriter;
v1 = null;
v2 = 0;
v3 = v0.<org.apache.commons.io.output.FilterCollectionWriter: java.util.Collection writers>;
v4 = interfaceinvoke v3.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label6;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
if v6 == null goto label5;
label2:
virtualinvoke v6.<java.io.Writer: void flush()>();
label3:
goto label5;
label4:
v7 := @caughtexception;
v1 = specialinvoke v0.<org.apache.commons.io.output.FilterCollectionWriter: java.util.List add(java.util.List,int,java.io.IOException)>(v1, v2, v7);
label5:
v2 = v2 + 1;
goto label1;
label6:
v8 = specialinvoke v0.<org.apache.commons.io.output.FilterCollectionWriter: boolean notEmpty(java.util.List)>(v1);
if v8 == 0 goto label7;
v9 = new org.apache.commons.io.IOExceptionList;
specialinvoke v9.<org.apache.commons.io.IOExceptionList: void <init>(java.lang.String,java.util.List)>("flush", v1);
throw v9;
label7:
return;
catch java.io.IOException from label2 to label3 with label4;
}
private boolean notEmpty(java.util.List)
{
java.util.List v1;
org.apache.commons.io.output.FilterCollectionWriter v0;
boolean v2, v3;
v0 := @this: org.apache.commons.io.output.FilterCollectionWriter;
v1 := @parameter0: java.util.List;
if v1 == null goto label1;
v2 = interfaceinvoke v1.<java.util.List: boolean isEmpty()>();
if v2 != 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public void write(char[]) throws java.io.IOException
{
java.util.Iterator v5;
java.util.Collection v4;
java.io.IOException v8;
org.apache.commons.io.output.FilterCollectionWriter v0;
java.util.List v2;
org.apache.commons.io.IOExceptionList v10;
int v3;
char[] v1;
java.lang.Object v7;
boolean v6, v9;
v0 := @this: org.apache.commons.io.output.FilterCollectionWriter;
v1 := @parameter0: char[];
v2 = null;
v3 = 0;
v4 = v0.<org.apache.commons.io.output.FilterCollectionWriter: java.util.Collection writers>;
v5 = interfaceinvoke v4.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label6;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
if v7 == null goto label5;
label2:
virtualinvoke v7.<java.io.Writer: void write(char[])>(v1);
label3:
goto label5;
label4:
v8 := @caughtexception;
v2 = specialinvoke v0.<org.apache.commons.io.output.FilterCollectionWriter: java.util.List add(java.util.List,int,java.io.IOException)>(v2, v3, v8);
label5:
v3 = v3 + 1;
goto label1;
label6:
v9 = specialinvoke v0.<org.apache.commons.io.output.FilterCollectionWriter: boolean notEmpty(java.util.List)>(v2);
if v9 == 0 goto label7;
v10 = new org.apache.commons.io.IOExceptionList;
specialinvoke v10.<org.apache.commons.io.IOExceptionList: void <init>(java.lang.String,java.util.List)>("write", v2);
throw v10;
label7:
return;
catch java.io.IOException from label2 to label3 with label4;
}
public void write(char[], int, int) throws java.io.IOException
{
java.util.Iterator v7;
java.util.Collection v6;
java.io.IOException v10;
org.apache.commons.io.output.FilterCollectionWriter v0;
java.util.List v4;
org.apache.commons.io.IOExceptionList v12;
int v2, v3, v5;
char[] v1;
java.lang.Object v9;
boolean v11, v8;
v0 := @this: org.apache.commons.io.output.FilterCollectionWriter;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = null;
v5 = 0;
v6 = v0.<org.apache.commons.io.output.FilterCollectionWriter: java.util.Collection writers>;
v7 = interfaceinvoke v6.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label6;
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
if v9 == null goto label5;
label2:
virtualinvoke v9.<java.io.Writer: void write(char[],int,int)>(v1, v2, v3);
label3:
goto label5;
label4:
v10 := @caughtexception;
v4 = specialinvoke v0.<org.apache.commons.io.output.FilterCollectionWriter: java.util.List add(java.util.List,int,java.io.IOException)>(v4, v5, v10);
label5:
v5 = v5 + 1;
goto label1;
label6:
v11 = specialinvoke v0.<org.apache.commons.io.output.FilterCollectionWriter: boolean notEmpty(java.util.List)>(v4);
if v11 == 0 goto label7;
v12 = new org.apache.commons.io.IOExceptionList;
specialinvoke v12.<org.apache.commons.io.IOExceptionList: void <init>(java.lang.String,java.util.List)>("write", v4);
throw v12;
label7:
return;
catch java.io.IOException from label2 to label3 with label4;
}
public void write(int) throws java.io.IOException
{
java.util.Iterator v5;
java.util.Collection v4;
java.io.IOException v8;
org.apache.commons.io.output.FilterCollectionWriter v0;
java.util.List v2;
org.apache.commons.io.IOExceptionList v10;
int v1, v3;
java.lang.Object v7;
boolean v6, v9;
v0 := @this: org.apache.commons.io.output.FilterCollectionWriter;
v1 := @parameter0: int;
v2 = null;
v3 = 0;
v4 = v0.<org.apache.commons.io.output.FilterCollectionWriter: java.util.Collection writers>;
v5 = interfaceinvoke v4.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label6;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
if v7 == null goto label5;
label2:
virtualinvoke v7.<java.io.Writer: void write(int)>(v1);
label3:
goto label5;
label4:
v8 := @caughtexception;
v2 = specialinvoke v0.<org.apache.commons.io.output.FilterCollectionWriter: java.util.List add(java.util.List,int,java.io.IOException)>(v2, v3, v8);
label5:
v3 = v3 + 1;
goto label1;
label6:
v9 = specialinvoke v0.<org.apache.commons.io.output.FilterCollectionWriter: boolean notEmpty(java.util.List)>(v2);
if v9 == 0 goto label7;
v10 = new org.apache.commons.io.IOExceptionList;
specialinvoke v10.<org.apache.commons.io.IOExceptionList: void <init>(java.lang.String,java.util.List)>("write", v2);
throw v10;
label7:
return;
catch java.io.IOException from label2 to label3 with label4;
}
public void write(java.lang.String) throws java.io.IOException
{
java.util.Iterator v5;
java.util.Collection v4;
java.io.IOException v8;
org.apache.commons.io.output.FilterCollectionWriter v0;
java.util.List v2;
org.apache.commons.io.IOExceptionList v10;
int v3;
java.lang.Object v7;
java.lang.String v1;
boolean v6, v9;
v0 := @this: org.apache.commons.io.output.FilterCollectionWriter;
v1 := @parameter0: java.lang.String;
v2 = null;
v3 = 0;
v4 = v0.<org.apache.commons.io.output.FilterCollectionWriter: java.util.Collection writers>;
v5 = interfaceinvoke v4.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label6;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
if v7 == null goto label5;
label2:
virtualinvoke v7.<java.io.Writer: void write(java.lang.String)>(v1);
label3:
goto label5;
label4:
v8 := @caughtexception;
v2 = specialinvoke v0.<org.apache.commons.io.output.FilterCollectionWriter: java.util.List add(java.util.List,int,java.io.IOException)>(v2, v3, v8);
label5:
v3 = v3 + 1;
goto label1;
label6:
v9 = specialinvoke v0.<org.apache.commons.io.output.FilterCollectionWriter: boolean notEmpty(java.util.List)>(v2);
if v9 == 0 goto label7;
v10 = new org.apache.commons.io.IOExceptionList;
specialinvoke v10.<org.apache.commons.io.IOExceptionList: void <init>(java.lang.String,java.util.List)>("write", v2);
throw v10;
label7:
return;
catch java.io.IOException from label2 to label3 with label4;
}
public void write(java.lang.String, int, int) throws java.io.IOException
{
java.util.Iterator v7;
java.util.Collection v6;
java.io.IOException v10;
org.apache.commons.io.output.FilterCollectionWriter v0;
java.util.List v4;
org.apache.commons.io.IOExceptionList v12;
int v2, v3, v5;
java.lang.Object v9;
java.lang.String v1;
boolean v11, v8;
v0 := @this: org.apache.commons.io.output.FilterCollectionWriter;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = null;
v5 = 0;
v6 = v0.<org.apache.commons.io.output.FilterCollectionWriter: java.util.Collection writers>;
v7 = interfaceinvoke v6.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label6;
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
if v9 == null goto label5;
label2:
virtualinvoke v9.<java.io.Writer: void write(java.lang.String,int,int)>(v1, v2, v3);
label3:
goto label5;
label4:
v10 := @caughtexception;
v4 = specialinvoke v0.<org.apache.commons.io.output.FilterCollectionWriter: java.util.List add(java.util.List,int,java.io.IOException)>(v4, v5, v10);
label5:
v5 = v5 + 1;
goto label1;
label6:
v11 = specialinvoke v0.<org.apache.commons.io.output.FilterCollectionWriter: boolean notEmpty(java.util.List)>(v4);
if v11 == 0 goto label7;
v12 = new org.apache.commons.io.IOExceptionList;
specialinvoke v12.<org.apache.commons.io.IOExceptionList: void <init>(java.lang.String,java.util.List)>("write", v4);
throw v12;
label7:
return;
catch java.io.IOException from label2 to label3 with label4;
}
}