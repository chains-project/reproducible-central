public class org.apache.commons.io.output.QueueOutputStream extends java.io.OutputStream
{
private final java.util.concurrent.BlockingQueue blockingQueue;
public void <init>()
{
org.apache.commons.io.output.QueueOutputStream v0;
java.util.concurrent.LinkedBlockingQueue v1;
v0 := @this: org.apache.commons.io.output.QueueOutputStream;
v1 = new java.util.concurrent.LinkedBlockingQueue;
specialinvoke v1.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();
specialinvoke v0.<org.apache.commons.io.output.QueueOutputStream: void <init>(java.util.concurrent.BlockingQueue)>(v1);
return;
}
public void <init>(java.util.concurrent.BlockingQueue)
{
java.lang.Object v2;
java.util.concurrent.BlockingQueue v1;
org.apache.commons.io.output.QueueOutputStream v0;
v0 := @this: org.apache.commons.io.output.QueueOutputStream;
v1 := @parameter0: java.util.concurrent.BlockingQueue;
specialinvoke v0.<java.io.OutputStream: void <init>()>();
v2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "blockingQueue");
v0.<org.apache.commons.io.output.QueueOutputStream: java.util.concurrent.BlockingQueue blockingQueue> = v2;
return;
}
public org.apache.commons.io.input.QueueInputStream newQueueInputStream()
{
org.apache.commons.io.input.QueueInputStream v1;
java.util.concurrent.BlockingQueue v2;
org.apache.commons.io.output.QueueOutputStream v0;
v0 := @this: org.apache.commons.io.output.QueueOutputStream;
v1 = new org.apache.commons.io.input.QueueInputStream;
v2 = v0.<org.apache.commons.io.output.QueueOutputStream: java.util.concurrent.BlockingQueue blockingQueue>;
specialinvoke v1.<org.apache.commons.io.input.QueueInputStream: void <init>(java.util.concurrent.BlockingQueue)>(v2);
return v1;
}
public void write(int) throws java.io.InterruptedIOException
{
java.util.concurrent.BlockingQueue v2;
org.apache.commons.io.output.QueueOutputStream v0;
java.io.InterruptedIOException v7;
java.lang.Integer v4;
java.lang.InterruptedException v5;
java.lang.Thread v6;
int v1, v3;
v0 := @this: org.apache.commons.io.output.QueueOutputStream;
v1 := @parameter0: int;
label1:
v2 = v0.<org.apache.commons.io.output.QueueOutputStream: java.util.concurrent.BlockingQueue blockingQueue>;
v3 = 255 & v1;
v4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v3);
interfaceinvoke v2.<java.util.concurrent.BlockingQueue: void put(java.lang.Object)>(v4);
label2:
goto label4;
label3:
v5 := @caughtexception;
v6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
virtualinvoke v6.<java.lang.Thread: void interrupt()>();
v7 = new java.io.InterruptedIOException;
specialinvoke v7.<java.io.InterruptedIOException: void <init>()>();
virtualinvoke v7.<java.io.InterruptedIOException: java.lang.Throwable initCause(java.lang.Throwable)>(v5);
throw v7;
label4:
return;
catch java.lang.InterruptedException from label1 to label2 with label3;
}
}