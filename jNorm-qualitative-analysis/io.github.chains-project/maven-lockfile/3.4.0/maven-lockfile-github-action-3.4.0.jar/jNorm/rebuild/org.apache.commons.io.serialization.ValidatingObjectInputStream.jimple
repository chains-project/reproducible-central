public class org.apache.commons.io.serialization.ValidatingObjectInputStream extends java.io.ObjectInputStream
{
private final java.util.List acceptMatchers;
private final java.util.List rejectMatchers;
public void <init>(java.io.InputStream) throws java.io.IOException
{
org.apache.commons.io.serialization.ValidatingObjectInputStream v0;
java.io.InputStream v1;
java.util.ArrayList v2, v3;
v0 := @this: org.apache.commons.io.serialization.ValidatingObjectInputStream;
v1 := @parameter0: java.io.InputStream;
specialinvoke v0.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>(v1);
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
v0.<org.apache.commons.io.serialization.ValidatingObjectInputStream: java.util.List acceptMatchers> = v2;
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
v0.<org.apache.commons.io.serialization.ValidatingObjectInputStream: java.util.List rejectMatchers> = v3;
return;
}
private void validateClassName(java.lang.String) throws java.io.InvalidClassException
{
org.apache.commons.io.serialization.ValidatingObjectInputStream v0;
java.util.Iterator v3, v9;
java.util.List v2, v8;
java.lang.Object v11, v5;
java.lang.String v1;
boolean v10, v12, v4, v6, v7;
v0 := @this: org.apache.commons.io.serialization.ValidatingObjectInputStream;
v1 := @parameter0: java.lang.String;
v2 = v0.<org.apache.commons.io.serialization.ValidatingObjectInputStream: java.util.List rejectMatchers>;
v3 = interfaceinvoke v2.<java.util.List: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = interfaceinvoke v5.<org.apache.commons.io.serialization.ClassNameMatcher: boolean matches(java.lang.String)>(v1);
if v6 == 0 goto label1;
virtualinvoke v0.<org.apache.commons.io.serialization.ValidatingObjectInputStream: void invalidClassNameFound(java.lang.String)>(v1);
goto label1;
label2:
v7 = 0;
v8 = v0.<org.apache.commons.io.serialization.ValidatingObjectInputStream: java.util.List acceptMatchers>;
v9 = interfaceinvoke v8.<java.util.List: java.util.Iterator iterator()>();
label3:
v10 = interfaceinvoke v9.<java.util.Iterator: boolean hasNext()>();
if v10 == 0 goto label4;
v11 = interfaceinvoke v9.<java.util.Iterator: java.lang.Object next()>();
v12 = interfaceinvoke v11.<org.apache.commons.io.serialization.ClassNameMatcher: boolean matches(java.lang.String)>(v1);
if v12 == 0 goto label3;
v7 = 1;
label4:
if v7 != 0 goto label5;
virtualinvoke v0.<org.apache.commons.io.serialization.ValidatingObjectInputStream: void invalidClassNameFound(java.lang.String)>(v1);
label5:
return;
}
protected void invalidClassNameFound(java.lang.String) throws java.io.InvalidClassException
{
java.io.InvalidClassException v2;
org.apache.commons.io.serialization.ValidatingObjectInputStream v0;
java.lang.String v1, v3;
v0 := @this: org.apache.commons.io.serialization.ValidatingObjectInputStream;
v1 := @parameter0: java.lang.String;
v2 = new java.io.InvalidClassException;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Class name not accepted: \u0001");
specialinvoke v2.<java.io.InvalidClassException: void <init>(java.lang.String)>(v3);
throw v2;
}
protected java.lang.Class resolveClass(java.io.ObjectStreamClass) throws java.io.IOException, java.lang.ClassNotFoundException
{
org.apache.commons.io.serialization.ValidatingObjectInputStream v0;
java.io.ObjectStreamClass v1;
java.lang.Class v3;
java.lang.String v2;
v0 := @this: org.apache.commons.io.serialization.ValidatingObjectInputStream;
v1 := @parameter0: java.io.ObjectStreamClass;
v2 = virtualinvoke v1.<java.io.ObjectStreamClass: java.lang.String getName()>();
specialinvoke v0.<org.apache.commons.io.serialization.ValidatingObjectInputStream: void validateClassName(java.lang.String)>(v2);
v3 = specialinvoke v0.<java.io.ObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>(v1);
return v3;
}
public transient org.apache.commons.io.serialization.ValidatingObjectInputStream accept(java.lang.Class[])
{
org.apache.commons.io.serialization.ValidatingObjectInputStream v0;
java.lang.Class[] v1;
java.lang.String[] v7;
java.util.List v5;
int v2, v3;
org.apache.commons.io.serialization.FullClassNameMatcher v6;
java.lang.Class v4;
java.lang.String v8;
v0 := @this: org.apache.commons.io.serialization.ValidatingObjectInputStream;
v1 := @parameter0: java.lang.Class[];
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label2;
v4 = v1[v3];
v5 = v0.<org.apache.commons.io.serialization.ValidatingObjectInputStream: java.util.List acceptMatchers>;
v6 = new org.apache.commons.io.serialization.FullClassNameMatcher;
v7 = newarray (java.lang.String)[1];
v8 = virtualinvoke v4.<java.lang.Class: java.lang.String getName()>();
v7[0] = v8;
specialinvoke v6.<org.apache.commons.io.serialization.FullClassNameMatcher: void <init>(java.lang.String[])>(v7);
interfaceinvoke v5.<java.util.List: boolean add(java.lang.Object)>(v6);
v3 = v3 + 1;
goto label1;
label2:
return v0;
}
public transient org.apache.commons.io.serialization.ValidatingObjectInputStream reject(java.lang.Class[])
{
org.apache.commons.io.serialization.ValidatingObjectInputStream v0;
java.lang.Class[] v1;
java.lang.String[] v7;
java.util.List v5;
int v2, v3;
org.apache.commons.io.serialization.FullClassNameMatcher v6;
java.lang.Class v4;
java.lang.String v8;
v0 := @this: org.apache.commons.io.serialization.ValidatingObjectInputStream;
v1 := @parameter0: java.lang.Class[];
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label2;
v4 = v1[v3];
v5 = v0.<org.apache.commons.io.serialization.ValidatingObjectInputStream: java.util.List rejectMatchers>;
v6 = new org.apache.commons.io.serialization.FullClassNameMatcher;
v7 = newarray (java.lang.String)[1];
v8 = virtualinvoke v4.<java.lang.Class: java.lang.String getName()>();
v7[0] = v8;
specialinvoke v6.<org.apache.commons.io.serialization.FullClassNameMatcher: void <init>(java.lang.String[])>(v7);
interfaceinvoke v5.<java.util.List: boolean add(java.lang.Object)>(v6);
v3 = v3 + 1;
goto label1;
label2:
return v0;
}
public transient org.apache.commons.io.serialization.ValidatingObjectInputStream accept(java.lang.String[])
{
java.util.List v5;
org.apache.commons.io.serialization.ValidatingObjectInputStream v0;
int v2, v3;
java.lang.String[] v1;
java.lang.String v4;
org.apache.commons.io.serialization.WildcardClassNameMatcher v6;
v0 := @this: org.apache.commons.io.serialization.ValidatingObjectInputStream;
v1 := @parameter0: java.lang.String[];
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label2;
v4 = v1[v3];
v5 = v0.<org.apache.commons.io.serialization.ValidatingObjectInputStream: java.util.List acceptMatchers>;
v6 = new org.apache.commons.io.serialization.WildcardClassNameMatcher;
specialinvoke v6.<org.apache.commons.io.serialization.WildcardClassNameMatcher: void <init>(java.lang.String)>(v4);
interfaceinvoke v5.<java.util.List: boolean add(java.lang.Object)>(v6);
v3 = v3 + 1;
goto label1;
label2:
return v0;
}
public transient org.apache.commons.io.serialization.ValidatingObjectInputStream reject(java.lang.String[])
{
java.util.List v5;
org.apache.commons.io.serialization.ValidatingObjectInputStream v0;
int v2, v3;
java.lang.String[] v1;
java.lang.String v4;
org.apache.commons.io.serialization.WildcardClassNameMatcher v6;
v0 := @this: org.apache.commons.io.serialization.ValidatingObjectInputStream;
v1 := @parameter0: java.lang.String[];
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label2;
v4 = v1[v3];
v5 = v0.<org.apache.commons.io.serialization.ValidatingObjectInputStream: java.util.List rejectMatchers>;
v6 = new org.apache.commons.io.serialization.WildcardClassNameMatcher;
specialinvoke v6.<org.apache.commons.io.serialization.WildcardClassNameMatcher: void <init>(java.lang.String)>(v4);
interfaceinvoke v5.<java.util.List: boolean add(java.lang.Object)>(v6);
v3 = v3 + 1;
goto label1;
label2:
return v0;
}
public org.apache.commons.io.serialization.ValidatingObjectInputStream accept(java.util.regex.Pattern)
{
org.apache.commons.io.serialization.RegexpClassNameMatcher v3;
java.util.List v2;
org.apache.commons.io.serialization.ValidatingObjectInputStream v0;
java.util.regex.Pattern v1;
v0 := @this: org.apache.commons.io.serialization.ValidatingObjectInputStream;
v1 := @parameter0: java.util.regex.Pattern;
v2 = v0.<org.apache.commons.io.serialization.ValidatingObjectInputStream: java.util.List acceptMatchers>;
v3 = new org.apache.commons.io.serialization.RegexpClassNameMatcher;
specialinvoke v3.<org.apache.commons.io.serialization.RegexpClassNameMatcher: void <init>(java.util.regex.Pattern)>(v1);
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v3);
return v0;
}
public org.apache.commons.io.serialization.ValidatingObjectInputStream reject(java.util.regex.Pattern)
{
org.apache.commons.io.serialization.RegexpClassNameMatcher v3;
java.util.List v2;
org.apache.commons.io.serialization.ValidatingObjectInputStream v0;
java.util.regex.Pattern v1;
v0 := @this: org.apache.commons.io.serialization.ValidatingObjectInputStream;
v1 := @parameter0: java.util.regex.Pattern;
v2 = v0.<org.apache.commons.io.serialization.ValidatingObjectInputStream: java.util.List rejectMatchers>;
v3 = new org.apache.commons.io.serialization.RegexpClassNameMatcher;
specialinvoke v3.<org.apache.commons.io.serialization.RegexpClassNameMatcher: void <init>(java.util.regex.Pattern)>(v1);
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v3);
return v0;
}
public org.apache.commons.io.serialization.ValidatingObjectInputStream accept(org.apache.commons.io.serialization.ClassNameMatcher)
{
java.util.List v2;
org.apache.commons.io.serialization.ValidatingObjectInputStream v0;
org.apache.commons.io.serialization.ClassNameMatcher v1;
v0 := @this: org.apache.commons.io.serialization.ValidatingObjectInputStream;
v1 := @parameter0: org.apache.commons.io.serialization.ClassNameMatcher;
v2 = v0.<org.apache.commons.io.serialization.ValidatingObjectInputStream: java.util.List acceptMatchers>;
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v1);
return v0;
}
public org.apache.commons.io.serialization.ValidatingObjectInputStream reject(org.apache.commons.io.serialization.ClassNameMatcher)
{
java.util.List v2;
org.apache.commons.io.serialization.ValidatingObjectInputStream v0;
org.apache.commons.io.serialization.ClassNameMatcher v1;
v0 := @this: org.apache.commons.io.serialization.ValidatingObjectInputStream;
v1 := @parameter0: org.apache.commons.io.serialization.ClassNameMatcher;
v2 = v0.<org.apache.commons.io.serialization.ValidatingObjectInputStream: java.util.List rejectMatchers>;
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v1);
return v0;
}
}