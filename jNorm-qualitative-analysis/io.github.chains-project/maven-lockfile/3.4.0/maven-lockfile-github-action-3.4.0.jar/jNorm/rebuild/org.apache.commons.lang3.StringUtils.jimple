public class org.apache.commons.lang3.StringUtils extends java.lang.Object
{
private static final int STRING_BUILDER_SIZE;
public static final java.lang.String SPACE;
public static final java.lang.String EMPTY;
public static final java.lang.String LF;
public static final java.lang.String CR;
public static final int INDEX_NOT_FOUND;
private static final int PAD_LIMIT;
private static final java.util.regex.Pattern STRIP_ACCENTS_PATTERN;
public static java.lang.String abbreviate(java.lang.String, int)
{
int v1;
java.lang.String v0, v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviate(java.lang.String,java.lang.String,int,int)>(v0, "...", 0, v1);
return v2;
}
public static java.lang.String abbreviate(java.lang.String, int, int)
{
int v1, v2;
java.lang.String v0, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviate(java.lang.String,java.lang.String,int,int)>(v0, "...", v1, v2);
return v3;
}
public static java.lang.String abbreviate(java.lang.String, java.lang.String, int)
{
int v2;
java.lang.String v0, v1, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviate(java.lang.String,java.lang.String,int,int)>(v0, v1, 0, v2);
return v3;
}
public static java.lang.String abbreviate(java.lang.String, java.lang.String, int, int)
{
java.lang.Integer v16, v28;
java.lang.CharSequence[] v8;
boolean v4, v6, v9;
java.lang.Object[] v15, v27;
int v10, v11, v12, v13, v18, v19, v2, v20, v21, v22, v23, v3, v30, v31, v33, v36, v37;
java.lang.String v0, v1, v17, v24, v25, v29, v32, v34, v35, v38, v39, v5, v7;
java.lang.IllegalArgumentException v14, v26;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNotEmpty(java.lang.CharSequence)>(v0);
if v4 == 0 goto label1;
v5 = "";
v6 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>(v1);
if v6 == 0 goto label1;
if v3 <= 0 goto label1;
v7 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String substring(java.lang.String,int,int)>(v0, 0, v3);
return v7;
label1:
v8 = newarray (java.lang.CharSequence)[2];
v8[0] = v0;
v8[1] = v1;
v9 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAnyEmpty(java.lang.CharSequence[])>(v8);
if v9 == 0 goto label2;
return v0;
label2:
v10 = virtualinvoke v1.<java.lang.String: int length()>();
v11 = v10 + 1;
v12 = v10 + v10;
v13 = v12 + 1;
if v3 >= v11 goto label3;
v14 = new java.lang.IllegalArgumentException;
v15 = newarray (java.lang.Object)[1];
v16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v11);
v15[0] = v16;
v17 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Minimum abbreviation width is %d", v15);
specialinvoke v14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v17);
throw v14;
label3:
v18 = virtualinvoke v0.<java.lang.String: int length()>();
if v18 > v3 goto label4;
return v0;
label4:
if v2 <= v18 goto label5;
v2 = v18;
label5:
v19 = v18 - v2;
v20 = v3 - v10;
if v19 >= v20 goto label6;
v21 = v3 - v10;
v2 = v18 - v21;
label6:
v22 = v10 + 1;
if v2 > v22 goto label7;
v23 = v3 - v10;
v24 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(0, v23);
v25 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v24, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001");
return v25;
label7:
if v3 >= v13 goto label8;
v26 = new java.lang.IllegalArgumentException;
v27 = newarray (java.lang.Object)[1];
v28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v13);
v27[0] = v28;
v29 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Minimum abbreviation width with offset is %d", v27);
specialinvoke v26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v29);
throw v26;
label8:
v30 = v2 + v3;
v31 = v30 - v10;
if v31 >= v18 goto label9;
v32 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(v2);
v33 = v3 - v10;
v34 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String abbreviate(java.lang.String,java.lang.String,int)>(v32, v1, v33);
v35 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v1, v34) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001");
return v35;
label9:
v36 = v3 - v10;
v37 = v18 - v36;
v38 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(v37);
v39 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v1, v38) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001");
return v39;
}
public static java.lang.String abbreviateMiddle(java.lang.String, java.lang.String, int)
{
java.lang.CharSequence[] v3;
int v10, v11, v12, v13, v14, v15, v2, v5, v6, v7, v8, v9;
java.lang.String v0, v1, v16, v17, v18;
boolean v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: int;
v3 = newarray (java.lang.CharSequence)[2];
v3[0] = v0;
v3[1] = v1;
v4 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAnyEmpty(java.lang.CharSequence[])>(v3);
if v4 != 0 goto label1;
v5 = virtualinvoke v0.<java.lang.String: int length()>();
if v2 >= v5 goto label1;
v6 = virtualinvoke v1.<java.lang.String: int length()>();
v7 = v6 + 2;
if v2 >= v7 goto label2;
label1:
return v0;
label2:
v8 = virtualinvoke v1.<java.lang.String: int length()>();
v9 = v2 - v8;
v10 = v9 / 2;
v11 = v9 % 2;
v12 = v10 + v11;
v13 = virtualinvoke v0.<java.lang.String: int length()>();
v14 = v9 / 2;
v15 = v13 - v14;
v16 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(0, v12);
v17 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(v15);
v18 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.String)>(v16, v1, v17) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001\u0001");
return v18;
}
private static transient java.lang.String appendIfMissing(java.lang.String, java.lang.CharSequence, boolean, java.lang.CharSequence[])
{
java.lang.CharSequence v1, v9;
java.lang.CharSequence[] v3;
int v7, v8;
java.lang.String v0, v11, v12;
boolean v10, v2, v4, v5, v6;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.CharSequence;
v2 := @parameter2: boolean;
v3 := @parameter3: java.lang.CharSequence[];
if v0 == null goto label1;
v4 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v1);
if v4 != 0 goto label1;
v5 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)>(v0, v1, v2);
if v5 == 0 goto label2;
label1:
return v0;
label2:
v6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(java.lang.Object[])>(v3);
if v6 == 0 goto label5;
v7 = lengthof v3;
v8 = 0;
label3:
if v8 >= v7 goto label5;
v9 = v3[v8];
v10 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)>(v0, v9, v2);
if v10 == 0 goto label4;
return v0;
label4:
v8 = v8 + 1;
goto label3;
label5:
v11 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v0, v11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001");
return v12;
}
public static transient java.lang.String appendIfMissing(java.lang.String, java.lang.CharSequence, java.lang.CharSequence[])
{
java.lang.CharSequence[] v2;
java.lang.CharSequence v1;
java.lang.String v0, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.CharSequence;
v2 := @parameter2: java.lang.CharSequence[];
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String appendIfMissing(java.lang.String,java.lang.CharSequence,boolean,java.lang.CharSequence[])>(v0, v1, 0, v2);
return v3;
}
public static transient java.lang.String appendIfMissingIgnoreCase(java.lang.String, java.lang.CharSequence, java.lang.CharSequence[])
{
java.lang.CharSequence[] v2;
java.lang.CharSequence v1;
java.lang.String v0, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.CharSequence;
v2 := @parameter2: java.lang.CharSequence[];
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String appendIfMissing(java.lang.String,java.lang.CharSequence,boolean,java.lang.CharSequence[])>(v0, v1, 1, v2);
return v3;
}
public static java.lang.String capitalize(java.lang.String)
{
int[] v4;
int v1, v2, v3, v5, v6, v7, v8, v9;
java.lang.String v0, v10;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.lang3.StringUtils: int length(java.lang.CharSequence)>(v0);
if v1 != 0 goto label1;
return v0;
label1:
v2 = virtualinvoke v0.<java.lang.String: int codePointAt(int)>(0);
v3 = staticinvoke <java.lang.Character: int toTitleCase(int)>(v2);
if v2 != v3 goto label2;
return v0;
label2:
v4 = newarray (int)[v1];
v5 = 1;
v4[0] = v3;
v6 = staticinvoke <java.lang.Character: int charCount(int)>(v2);
label3:
if v6 >= v1 goto label4;
v7 = virtualinvoke v0.<java.lang.String: int codePointAt(int)>(v6);
v8 = v5;
v5 = v5 + 1;
v4[v8] = v7;
v9 = staticinvoke <java.lang.Character: int charCount(int)>(v7);
v6 = v6 + v9;
goto label3;
label4:
v10 = new java.lang.String;
specialinvoke v10.<java.lang.String: void <init>(int[],int,int)>(v4, 0, v5);
return v10;
}
public static java.lang.String center(java.lang.String, int)
{
int v1;
java.lang.String v0, v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String center(java.lang.String,int,char)>(v0, v1, 32);
return v2;
}
public static java.lang.String center(java.lang.String, int, char)
{
char v2;
int v1, v3, v4, v5, v6;
java.lang.String v0, v7, v8;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 := @parameter2: char;
if v0 == null goto label1;
if v1 > 0 goto label2;
label1:
return v0;
label2:
v3 = virtualinvoke v0.<java.lang.String: int length()>();
v4 = v1 - v3;
if v4 > 0 goto label3;
return v0;
label3:
v5 = v4 / 2;
v6 = v3 + v5;
v7 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String leftPad(java.lang.String,int,char)>(v0, v6, v2);
v8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int,char)>(v7, v1, v2);
return v8;
}
public static java.lang.String center(java.lang.String, int, java.lang.String)
{
int v1, v4, v5, v6, v7;
java.lang.String v0, v2, v8, v9;
boolean v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 := @parameter2: java.lang.String;
if v0 == null goto label1;
if v1 > 0 goto label2;
label1:
return v0;
label2:
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v2);
if v3 == 0 goto label3;
v2 = " ";
label3:
v4 = virtualinvoke v0.<java.lang.String: int length()>();
v5 = v1 - v4;
if v5 > 0 goto label4;
return v0;
label4:
v6 = v5 / 2;
v7 = v4 + v6;
v8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String leftPad(java.lang.String,int,java.lang.String)>(v0, v7, v2);
v9 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int,java.lang.String)>(v8, v1, v2);
return v9;
}
public static java.lang.String chomp(java.lang.String)
{
char v3, v6, v8;
int v2, v4, v5, v7;
java.lang.String v0, v9;
boolean v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v1 == 0 goto label1;
return v0;
label1:
v2 = virtualinvoke v0.<java.lang.String: int length()>();
if v2 != 1 goto label4;
v3 = virtualinvoke v0.<java.lang.String: char charAt(int)>(0);
if v3 == 13 goto label2;
if v3 != 10 goto label3;
label2:
return "";
label3:
return v0;
label4:
v4 = virtualinvoke v0.<java.lang.String: int length()>();
v5 = v4 - 1;
v6 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v5);
if v6 != 10 goto label5;
v7 = v5 - 1;
v8 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v7);
if v8 != 13 goto label6;
v5 = v5 - 1;
goto label6;
label5:
if v6 == 13 goto label6;
v5 = v5 + 1;
label6:
v9 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(0, v5);
return v9;
}
public static java.lang.String chomp(java.lang.String, java.lang.String)
{
java.lang.String v0, v1, v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>(v0, v1);
return v2;
}
public static java.lang.String chop(java.lang.String)
{
char v4, v6;
int v1, v2, v5, v7;
java.lang.String v0, v3, v8;
v0 := @parameter0: java.lang.String;
if v0 != null goto label1;
return null;
label1:
v1 = virtualinvoke v0.<java.lang.String: int length()>();
if v1 >= 2 goto label2;
return "";
label2:
v2 = v1 - 1;
v3 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(0, v2);
v4 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v2);
if v4 != 10 goto label3;
v5 = v2 - 1;
v6 = virtualinvoke v3.<java.lang.String: char charAt(int)>(v5);
if v6 != 13 goto label3;
v7 = v2 - 1;
v8 = virtualinvoke v3.<java.lang.String: java.lang.String substring(int,int)>(0, v7);
return v8;
label3:
return v3;
}
public static int compare(java.lang.String, java.lang.String)
{
int v2;
java.lang.String v0, v1;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: int compare(java.lang.String,java.lang.String,boolean)>(v0, v1, 1);
return v2;
}
public static int compare(java.lang.String, java.lang.String, boolean)
{
byte v3, v4;
int v5;
java.lang.String v0, v1;
boolean v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: boolean;
if v0 != v1 goto label1;
return 0;
label1:
if v0 != null goto label4;
if v2 == 0 goto label2;
v3 = -1;
goto label3;
label2:
v3 = 1;
label3:
return v3;
label4:
if v1 != null goto label7;
if v2 == 0 goto label5;
v4 = 1;
goto label6;
label5:
v4 = -1;
label6:
return v4;
label7:
v5 = virtualinvoke v0.<java.lang.String: int compareTo(java.lang.String)>(v1);
return v5;
}
public static int compareIgnoreCase(java.lang.String, java.lang.String)
{
int v2;
java.lang.String v0, v1;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: int compareIgnoreCase(java.lang.String,java.lang.String,boolean)>(v0, v1, 1);
return v2;
}
public static int compareIgnoreCase(java.lang.String, java.lang.String, boolean)
{
byte v3, v4;
int v5;
java.lang.String v0, v1;
boolean v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: boolean;
if v0 != v1 goto label1;
return 0;
label1:
if v0 != null goto label4;
if v2 == 0 goto label2;
v3 = -1;
goto label3;
label2:
v3 = 1;
label3:
return v3;
label4:
if v1 != null goto label7;
if v2 == 0 goto label5;
v4 = 1;
goto label6;
label5:
v4 = -1;
label6:
return v4;
label7:
v5 = virtualinvoke v0.<java.lang.String: int compareToIgnoreCase(java.lang.String)>(v1);
return v5;
}
public static boolean contains(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v0, v1;
int v2;
boolean v3;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
if v0 == null goto label1;
if v1 != null goto label2;
label1:
return 0;
label2:
v2 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int)>(v0, v1, 0);
if v2 < 0 goto label3;
v3 = 1;
goto label4;
label3:
v3 = 0;
label4:
return v3;
}
public static boolean contains(java.lang.CharSequence, int)
{
java.lang.CharSequence v0;
int v1, v3;
boolean v2, v4;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 == 0 goto label1;
return 0;
label1:
v3 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: int indexOf(java.lang.CharSequence,int,int)>(v0, v1, 0);
if v3 < 0 goto label2;
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
return v4;
}
public static transient boolean containsAny(java.lang.CharSequence, char[])
{
int v10, v13, v15, v4, v5, v6, v7, v8;
boolean v12, v2, v3;
java.lang.CharSequence v0;
char v11, v14, v16, v9;
char[] v1;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: char[];
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 != 0 goto label1;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(char[])>(v1);
if v3 == 0 goto label2;
label1:
return 0;
label2:
v4 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v5 = lengthof v1;
v6 = v4 - 1;
v7 = v5 - 1;
v8 = 0;
label3:
if v8 >= v4 goto label9;
v9 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v8);
v10 = 0;
label4:
if v10 >= v5 goto label8;
v11 = v1[v10];
if v11 != v9 goto label7;
v12 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(v9);
if v12 == 0 goto label6;
if v10 != v7 goto label5;
return 1;
label5:
if v8 >= v6 goto label7;
v13 = v10 + 1;
v14 = v1[v13];
v15 = v8 + 1;
v16 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v15);
if v14 != v16 goto label7;
return 1;
label6:
return 1;
label7:
v10 = v10 + 1;
goto label4;
label8:
v8 = v8 + 1;
goto label3;
label9:
return 0;
}
public static boolean containsAny(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v0, v1;
char[] v2;
boolean v3;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
if v1 != null goto label1;
return 0;
label1:
v2 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: char[] toCharArray(java.lang.CharSequence)>(v1);
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean containsAny(java.lang.CharSequence,char[])>(v0, v2);
return v3;
}
public static transient boolean containsAny(java.lang.CharSequence, java.lang.CharSequence[])
{
java.lang.CharSequence[] v1;
java.lang.CharSequence v0;
org.apache.commons.lang3.function.ToBooleanBiFunction v2;
boolean v3;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence[];
v2 = staticinvoke <org.apache.commons.lang3.StringUtils$contains__101: org.apache.commons.lang3.function.ToBooleanBiFunction bootstrap$()>();
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean containsAny(org.apache.commons.lang3.function.ToBooleanBiFunction,java.lang.CharSequence,java.lang.CharSequence[])>(v2, v0, v1);
return v3;
}
private static transient boolean containsAny(org.apache.commons.lang3.function.ToBooleanBiFunction, java.lang.CharSequence, java.lang.CharSequence[])
{
java.lang.CharSequence v1, v7;
java.lang.CharSequence[] v2;
int v5, v6;
org.apache.commons.lang3.function.ToBooleanBiFunction v0;
boolean v3, v4, v8;
v0 := @parameter0: org.apache.commons.lang3.function.ToBooleanBiFunction;
v1 := @parameter1: java.lang.CharSequence;
v2 := @parameter2: java.lang.CharSequence[];
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v1);
if v3 != 0 goto label1;
v4 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(v2);
if v4 == 0 goto label2;
label1:
return 0;
label2:
v5 = lengthof v2;
v6 = 0;
label3:
if v6 >= v5 goto label5;
v7 = v2[v6];
v8 = interfaceinvoke v0.<org.apache.commons.lang3.function.ToBooleanBiFunction: boolean applyAsBoolean(java.lang.Object,java.lang.Object)>(v1, v7);
if v8 == 0 goto label4;
return 1;
label4:
v6 = v6 + 1;
goto label3;
label5:
return 0;
}
public static transient boolean containsAnyIgnoreCase(java.lang.CharSequence, java.lang.CharSequence[])
{
java.lang.CharSequence[] v1;
java.lang.CharSequence v0;
org.apache.commons.lang3.function.ToBooleanBiFunction v2;
boolean v3;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence[];
v2 = staticinvoke <org.apache.commons.lang3.StringUtils$containsIgnoreCase__102: org.apache.commons.lang3.function.ToBooleanBiFunction bootstrap$()>();
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean containsAny(org.apache.commons.lang3.function.ToBooleanBiFunction,java.lang.CharSequence,java.lang.CharSequence[])>(v2, v0, v1);
return v3;
}
public static boolean containsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v0, v1;
int v2, v3, v4, v5;
boolean v6;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
if v0 == null goto label1;
if v1 != null goto label2;
label1:
return 0;
label2:
v2 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
v3 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v4 = v3 - v2;
v5 = 0;
label3:
if v5 > v4 goto label5;
v6 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: boolean regionMatches(java.lang.CharSequence,boolean,int,java.lang.CharSequence,int,int)>(v0, 1, v5, v1, 0, v2);
if v6 == 0 goto label4;
return 1;
label4:
v5 = v5 + 1;
goto label3;
label5:
return 0;
}
public static transient boolean containsNone(java.lang.CharSequence, char[])
{
java.lang.CharSequence v0;
char v12, v14, v7, v9;
int v11, v13, v2, v3, v4, v5, v6, v8;
char[] v1;
boolean v10;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: char[];
if v0 == null goto label1;
if v1 != null goto label2;
label1:
return 1;
label2:
v2 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v3 = v2 - 1;
v4 = lengthof v1;
v5 = v4 - 1;
v6 = 0;
label3:
if v6 >= v2 goto label9;
v7 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v6);
v8 = 0;
label4:
if v8 >= v4 goto label8;
v9 = v1[v8];
if v9 != v7 goto label7;
v10 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(v7);
if v10 == 0 goto label6;
if v8 != v5 goto label5;
return 0;
label5:
if v6 >= v3 goto label7;
v11 = v8 + 1;
v12 = v1[v11];
v13 = v6 + 1;
v14 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v13);
if v12 != v14 goto label7;
return 0;
label6:
return 0;
label7:
v8 = v8 + 1;
goto label4;
label8:
v6 = v6 + 1;
goto label3;
label9:
return 1;
}
public static boolean containsNone(java.lang.CharSequence, java.lang.String)
{
java.lang.CharSequence v0;
char[] v2;
java.lang.String v1;
boolean v3;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.String;
if v1 != null goto label1;
return 1;
label1:
v2 = virtualinvoke v1.<java.lang.String: char[] toCharArray()>();
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean containsNone(java.lang.CharSequence,char[])>(v0, v2);
return v3;
}
public static transient boolean containsOnly(java.lang.CharSequence, char[])
{
java.lang.CharSequence v0;
int v2, v3, v4, v5;
char[] v1;
boolean v6;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: char[];
if v1 == null goto label1;
if v0 != null goto label2;
label1:
return 0;
label2:
v2 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
if v2 != 0 goto label3;
return 1;
label3:
v3 = lengthof v1;
if v3 != 0 goto label4;
return 0;
label4:
v4 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfAnyBut(java.lang.CharSequence,char[])>(v0, v1);
v5 = (int) -1;
if v4 != v5 goto label5;
v6 = 1;
goto label6;
label5:
v6 = 0;
label6:
return v6;
}
public static boolean containsOnly(java.lang.CharSequence, java.lang.String)
{
java.lang.CharSequence v0;
char[] v2;
java.lang.String v1;
boolean v3;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.String;
if v0 == null goto label1;
if v1 != null goto label2;
label1:
return 0;
label2:
v2 = virtualinvoke v1.<java.lang.String: char[] toCharArray()>();
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean containsOnly(java.lang.CharSequence,char[])>(v0, v2);
return v3;
}
public static boolean containsWhitespace(java.lang.CharSequence)
{
java.lang.CharSequence v0;
int v2, v3;
char v4;
boolean v1, v5;
v0 := @parameter0: java.lang.CharSequence;
v1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v1 == 0 goto label1;
return 0;
label1:
v2 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v3 = 0;
label2:
if v3 >= v2 goto label4;
v4 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v3);
v5 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(v4);
if v5 == 0 goto label3;
return 1;
label3:
v3 = v3 + 1;
goto label2;
label4:
return 0;
}
private static void convertRemainingAccentCharacters(java.lang.StringBuilder)
{
int v1, v2;
char v3, v4;
java.lang.StringBuilder v0;
v0 := @parameter0: java.lang.StringBuilder;
v1 = 0;
label1:
v2 = virtualinvoke v0.<java.lang.StringBuilder: int length()>();
if v1 >= v2 goto label4;
v3 = virtualinvoke v0.<java.lang.StringBuilder: char charAt(int)>(v1);
if v3 != 321 goto label2;
virtualinvoke v0.<java.lang.StringBuilder: void setCharAt(int,char)>(v1, 76);
goto label3;
label2:
v4 = virtualinvoke v0.<java.lang.StringBuilder: char charAt(int)>(v1);
if v4 != 322 goto label3;
virtualinvoke v0.<java.lang.StringBuilder: void setCharAt(int,char)>(v1, 108);
label3:
v1 = v1 + 1;
goto label1;
label4:
return;
}
public static int countMatches(java.lang.CharSequence, char)
{
java.lang.CharSequence v0;
int v3, v4, v5;
char v1, v6;
boolean v2;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: char;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 == 0 goto label1;
return 0;
label1:
v3 = 0;
v4 = 0;
label2:
v5 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
if v4 >= v5 goto label4;
v6 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v4);
if v1 != v6 goto label3;
v3 = v3 + 1;
label3:
v4 = v4 + 1;
goto label2;
label4:
return v3;
}
public static int countMatches(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v0, v1;
int v4, v5, v6, v7, v8;
boolean v2, v3;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 != 0 goto label1;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v1);
if v3 == 0 goto label2;
label1:
return 0;
label2:
v4 = 0;
v5 = 0;
label3:
v6 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int)>(v0, v1, v5);
v7 = (int) -1;
if v6 == v7 goto label4;
v4 = v4 + 1;
v8 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
v5 = v6 + v8;
goto label3;
label4:
return v4;
}
public static java.lang.CharSequence defaultIfBlank(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v0, v1, v3;
boolean v2;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>(v0);
if v2 == 0 goto label1;
v3 = v1;
goto label2;
label1:
v3 = v0;
label2:
return v3;
}
public static java.lang.CharSequence defaultIfEmpty(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v0, v1, v3;
boolean v2;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 == 0 goto label1;
v3 = v1;
goto label2;
label1:
v3 = v0;
label2:
return v3;
}
public static java.lang.String defaultString(java.lang.String)
{
java.lang.String v0, v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String defaultString(java.lang.String,java.lang.String)>(v0, "");
return v1;
}
public static java.lang.String defaultString(java.lang.String, java.lang.String)
{
java.lang.String v0, v1, v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
if v0 != null goto label1;
v2 = v1;
goto label2;
label1:
v2 = v0;
label2:
return v2;
}
public static java.lang.String deleteWhitespace(java.lang.String)
{
char v6, v9;
int v2, v4, v5, v8;
char[] v3;
java.lang.String v0, v10;
boolean v1, v7;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v1 == 0 goto label1;
return v0;
label1:
v2 = virtualinvoke v0.<java.lang.String: int length()>();
v3 = newarray (char)[v2];
v4 = 0;
v5 = 0;
label2:
if v5 >= v2 goto label4;
v6 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v5);
v7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(v6);
if v7 != 0 goto label3;
v8 = v4;
v4 = v4 + 1;
v9 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v5);
v3[v8] = v9;
label3:
v5 = v5 + 1;
goto label2;
label4:
if v4 != v2 goto label5;
return v0;
label5:
if v4 != 0 goto label6;
return "";
label6:
v10 = new java.lang.String;
specialinvoke v10.<java.lang.String: void <init>(char[],int,int)>(v3, 0, v4);
return v10;
}
public static java.lang.String difference(java.lang.String, java.lang.String)
{
int v2, v3;
java.lang.String v0, v1, v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
if v0 != null goto label1;
return v1;
label1:
if v1 != null goto label2;
return v0;
label2:
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfDifference(java.lang.CharSequence,java.lang.CharSequence)>(v0, v1);
v3 = (int) -1;
if v2 != v3 goto label3;
return "";
label3:
v4 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int)>(v2);
return v4;
}
public static boolean endsWith(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v0, v1;
boolean v2;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)>(v0, v1, 0);
return v2;
}
private static boolean endsWith(java.lang.CharSequence, java.lang.CharSequence, boolean)
{
java.lang.CharSequence v0, v1;
int v4, v5, v6, v7, v8, v9;
boolean v10, v2, v3;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
v2 := @parameter2: boolean;
if v0 == null goto label1;
if v1 != null goto label4;
label1:
if v0 != v1 goto label2;
v3 = 1;
goto label3;
label2:
v3 = 0;
label3:
return v3;
label4:
v4 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
v5 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
if v4 <= v5 goto label5;
return 0;
label5:
v6 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v7 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
v8 = v6 - v7;
v9 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
v10 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: boolean regionMatches(java.lang.CharSequence,boolean,int,java.lang.CharSequence,int,int)>(v0, v2, v8, v1, 0, v9);
return v10;
}
public static transient boolean endsWithAny(java.lang.CharSequence, java.lang.CharSequence[])
{
java.lang.CharSequence v0, v6;
java.lang.CharSequence[] v1;
int v4, v5;
boolean v2, v3, v7;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence[];
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 != 0 goto label1;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(v1);
if v3 == 0 goto label2;
label1:
return 0;
label2:
v4 = lengthof v1;
v5 = 0;
label3:
if v5 >= v4 goto label5;
v6 = v1[v5];
v7 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWith(java.lang.CharSequence,java.lang.CharSequence)>(v0, v6);
if v7 == 0 goto label4;
return 1;
label4:
v5 = v5 + 1;
goto label3;
label5:
return 0;
}
public static boolean endsWithIgnoreCase(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v0, v1;
boolean v2;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)>(v0, v1, 1);
return v2;
}
public static boolean equals(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v0, v1;
char v10, v9;
int v2, v3, v7, v8;
boolean v4, v5, v6;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
if v0 != v1 goto label1;
return 1;
label1:
if v0 == null goto label2;
if v1 != null goto label3;
label2:
return 0;
label3:
v2 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v3 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
if v2 == v3 goto label4;
return 0;
label4:
v4 = v0 instanceof java.lang.String;
if v4 == 0 goto label5;
v5 = v1 instanceof java.lang.String;
if v5 == 0 goto label5;
v6 = virtualinvoke v0.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
return v6;
label5:
v7 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v8 = 0;
label6:
if v8 >= v7 goto label8;
v9 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v8);
v10 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v8);
if v9 == v10 goto label7;
return 0;
label7:
v8 = v8 + 1;
goto label6;
label8:
return 1;
}
public static transient boolean equalsAny(java.lang.CharSequence, java.lang.CharSequence[])
{
java.lang.CharSequence[] v1;
java.lang.CharSequence v0, v5;
int v3, v4;
boolean v2, v6;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence[];
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(java.lang.Object[])>(v1);
if v2 == 0 goto label3;
v3 = lengthof v1;
v4 = 0;
label1:
if v4 >= v3 goto label3;
v5 = v1[v4];
v6 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>(v0, v5);
if v6 == 0 goto label2;
return 1;
label2:
v4 = v4 + 1;
goto label1;
label3:
return 0;
}
public static transient boolean equalsAnyIgnoreCase(java.lang.CharSequence, java.lang.CharSequence[])
{
java.lang.CharSequence[] v1;
java.lang.CharSequence v0, v5;
int v3, v4;
boolean v2, v6;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence[];
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(java.lang.Object[])>(v1);
if v2 == 0 goto label3;
v3 = lengthof v1;
v4 = 0;
label1:
if v4 >= v3 goto label3;
v5 = v1[v4];
v6 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(v0, v5);
if v6 == 0 goto label2;
return 1;
label2:
v4 = v4 + 1;
goto label1;
label3:
return 0;
}
public static boolean equalsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v0, v1;
int v2, v3, v4;
boolean v5;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
if v0 != v1 goto label1;
return 1;
label1:
if v0 == null goto label2;
if v1 != null goto label3;
label2:
return 0;
label3:
v2 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v3 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
if v2 == v3 goto label4;
return 0;
label4:
v4 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v5 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: boolean regionMatches(java.lang.CharSequence,boolean,int,java.lang.CharSequence,int,int)>(v0, 1, 0, v1, 0, v4);
return v5;
}
public static transient java.lang.CharSequence firstNonBlank(java.lang.CharSequence[])
{
java.lang.CharSequence[] v0;
java.lang.CharSequence v3;
int v1, v2;
boolean v4;
v0 := @parameter0: java.lang.CharSequence[];
if v0 == null goto label3;
v1 = lengthof v0;
v2 = 0;
label1:
if v2 >= v1 goto label3;
v3 = v0[v2];
v4 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>(v3);
if v4 == 0 goto label2;
return v3;
label2:
v2 = v2 + 1;
goto label1;
label3:
return null;
}
public static transient java.lang.CharSequence firstNonEmpty(java.lang.CharSequence[])
{
java.lang.CharSequence[] v0;
java.lang.CharSequence v3;
int v1, v2;
boolean v4;
v0 := @parameter0: java.lang.CharSequence[];
if v0 == null goto label3;
v1 = lengthof v0;
v2 = 0;
label1:
if v2 >= v1 goto label3;
v3 = v0[v2];
v4 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNotEmpty(java.lang.CharSequence)>(v3);
if v4 == 0 goto label2;
return v3;
label2:
v2 = v2 + 1;
goto label1;
label3:
return null;
}
public static byte[] getBytes(java.lang.String, java.nio.charset.Charset)
{
byte[] v2;
java.nio.charset.Charset v1, v3;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.nio.charset.Charset;
if v0 != null goto label1;
v2 = <org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;
goto label2;
label1:
v3 = staticinvoke <org.apache.commons.lang3.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(v1);
v2 = virtualinvoke v0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(v3);
label2:
return v2;
}
public static byte[] getBytes(java.lang.String, java.lang.String) throws java.io.UnsupportedEncodingException
{
byte[] v2;
java.lang.String v0, v1, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
if v0 != null goto label1;
v2 = <org.apache.commons.lang3.ArrayUtils: byte[] EMPTY_BYTE_ARRAY>;
goto label2;
label1:
v3 = staticinvoke <org.apache.commons.lang3.Charsets: java.lang.String toCharsetName(java.lang.String)>(v1);
v2 = virtualinvoke v0.<java.lang.String: byte[] getBytes(java.lang.String)>(v3);
label2:
return v2;
}
public static transient java.lang.String getCommonPrefix(java.lang.String[])
{
java.lang.String[] v0;
int v2, v3;
java.lang.String v4, v5, v6, v7;
boolean v1;
v0 := @parameter0: java.lang.String[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(v0);
if v1 == 0 goto label1;
return "";
label1:
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfDifference(java.lang.CharSequence[])>(v0);
v3 = (int) -1;
if v2 != v3 goto label3;
v4 = v0[0];
if v4 != null goto label2;
return "";
label2:
v5 = v0[0];
return v5;
label3:
if v2 != 0 goto label4;
return "";
label4:
v6 = v0[0];
v7 = virtualinvoke v6.<java.lang.String: java.lang.String substring(int,int)>(0, v2);
return v7;
}
public static java.lang.String getDigits(java.lang.String)
{
char v5;
int v2, v4;
java.lang.StringBuilder v3;
java.lang.String v0, v7;
boolean v1, v6;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v1 == 0 goto label1;
return v0;
label1:
v2 = virtualinvoke v0.<java.lang.String: int length()>();
v3 = new java.lang.StringBuilder;
specialinvoke v3.<java.lang.StringBuilder: void <init>(int)>(v2);
v4 = 0;
label2:
if v4 >= v2 goto label4;
v5 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v4);
v6 = staticinvoke <java.lang.Character: boolean isDigit(char)>(v5);
if v6 == 0 goto label3;
virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v5);
label3:
v4 = v4 + 1;
goto label2;
label4:
v7 = virtualinvoke v3.<java.lang.StringBuilder: java.lang.String toString()>();
return v7;
}
public static int getFuzzyDistance(java.lang.CharSequence, java.lang.CharSequence, java.util.Locale)
{
java.util.Locale v2;
int v10, v11, v12, v13, v16, v18, v9;
java.lang.String v5, v6, v7, v8;
boolean v15;
java.lang.CharSequence v0, v1;
char v14, v17;
java.lang.IllegalArgumentException v3, v4;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
v2 := @parameter2: java.util.Locale;
if v0 == null goto label1;
if v1 != null goto label2;
label1:
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Strings must not be null");
throw v3;
label2:
if v2 != null goto label3;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Locale must not be null");
throw v4;
label3:
v5 = virtualinvoke v0.<java.lang.Object: java.lang.String toString()>();
v6 = virtualinvoke v5.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>(v2);
v7 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
v8 = virtualinvoke v7.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>(v2);
v9 = 0;
v10 = 0;
v11 = -2147483648;
v12 = 0;
label4:
v13 = virtualinvoke v8.<java.lang.String: int length()>();
if v12 >= v13 goto label9;
v14 = virtualinvoke v8.<java.lang.String: char charAt(int)>(v12);
v15 = 0;
label5:
v16 = virtualinvoke v6.<java.lang.String: int length()>();
if v10 >= v16 goto label8;
if v15 != 0 goto label8;
v17 = virtualinvoke v6.<java.lang.String: char charAt(int)>(v10);
if v14 != v17 goto label7;
v9 = v9 + 1;
v18 = v11 + 1;
if v18 != v10 goto label6;
v9 = v9 + 2;
label6:
v11 = v10;
v15 = 1;
label7:
v10 = v10 + 1;
goto label5;
label8:
v12 = v12 + 1;
goto label4;
label9:
return v9;
}
public static java.lang.CharSequence getIfBlank(java.lang.CharSequence, java.util.function.Supplier)
{
java.lang.CharSequence v0;
java.lang.Object v3;
java.util.function.Supplier v1;
boolean v2;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.util.function.Supplier;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>(v0);
if v2 == 0 goto label1;
if v1 == null goto label2;
v3 = interfaceinvoke v1.<java.util.function.Supplier: java.lang.Object get()>();
goto label2;
label1:
v3 = v0;
label2:
return v3;
}
public static java.lang.CharSequence getIfEmpty(java.lang.CharSequence, java.util.function.Supplier)
{
java.lang.CharSequence v0;
java.lang.Object v3;
java.util.function.Supplier v1;
boolean v2;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.util.function.Supplier;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 == 0 goto label1;
if v1 == null goto label2;
v3 = interfaceinvoke v1.<java.util.function.Supplier: java.lang.Object get()>();
goto label2;
label1:
v3 = v0;
label2:
return v3;
}
public static double getJaroWinklerDistance(java.lang.CharSequence, java.lang.CharSequence)
{
long v26;
byte v16, v5;
int[] v3;
int v11, v18, v21, v4, v6, v8;
double v10, v12, v13, v14, v15, v17, v19, v20, v22, v23, v24, v25, v27, v7, v9;
java.lang.CharSequence v0, v1;
java.lang.IllegalArgumentException v2;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
if v0 == null goto label1;
if v1 != null goto label2;
label1:
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Strings must not be null");
throw v2;
label2:
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: int[] matches(java.lang.CharSequence,java.lang.CharSequence)>(v0, v1);
v4 = v3[0];
v5 = v4 cmpl 0.0;
if v5 != 0 goto label3;
return 0.0;
label3:
v6 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v7 = v4 / v6;
v8 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
v9 = v4 / v8;
v10 = v7 + v9;
v11 = v3[1];
v12 = v4 - v11;
v13 = v12 / v4;
v14 = v10 + v13;
v15 = v14 / 3.0;
v16 = v15 cmpg 0.7;
if v16 >= 0 goto label4;
v17 = v15;
goto label5;
label4:
v18 = v3[3];
v19 = 1.0 / v18;
v20 = staticinvoke <java.lang.Math: double min(double,double)>(0.1, v19);
v21 = v3[2];
v22 = v20 * v21;
v23 = 1.0 - v15;
v24 = v22 * v23;
v17 = v15 + v24;
label5:
v25 = v17 * 100.0;
v26 = staticinvoke <java.lang.Math: long round(double)>(v25);
v27 = v26 / 100.0;
return v27;
}
public static int getLevenshteinDistance(java.lang.CharSequence, java.lang.CharSequence)
{
int[] v7;
int v10, v11, v13, v14, v15, v18, v19, v20, v21, v22, v23, v24, v25, v26, v3, v4, v6, v8, v9;
boolean v17;
java.lang.CharSequence v0, v1, v5;
char v12, v16;
java.lang.IllegalArgumentException v2;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
if v0 == null goto label01;
if v1 != null goto label02;
label01:
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Strings must not be null");
throw v2;
label02:
v3 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v4 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
if v3 != 0 goto label03;
return v4;
label03:
if v4 != 0 goto label04;
return v3;
label04:
if v3 <= v4 goto label05;
v5 = v0;
v0 = v1;
v1 = v5;
v3 = v4;
v4 = interfaceinvoke v5.<java.lang.CharSequence: int length()>();
label05:
v6 = v3 + 1;
v7 = newarray (int)[v6];
v8 = 0;
label06:
if v8 > v3 goto label07;
v7[v8] = v8;
v8 = v8 + 1;
goto label06;
label07:
v9 = 1;
label08:
if v9 > v4 goto label13;
v10 = v7[0];
v11 = v9 - 1;
v12 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v11);
v7[0] = v9;
v13 = 1;
label09:
if v13 > v3 goto label12;
v14 = v7[v13];
v15 = v13 - 1;
v16 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v15);
if v16 != v12 goto label10;
v17 = 0;
goto label11;
label10:
v17 = 1;
label11:
v18 = v13 - 1;
v19 = v7[v18];
v20 = v19 + 1;
v21 = v7[v13];
v22 = v21 + 1;
v23 = staticinvoke <java.lang.Math: int min(int,int)>(v20, v22);
v24 = v10 + v17;
v25 = staticinvoke <java.lang.Math: int min(int,int)>(v23, v24);
v7[v13] = v25;
v10 = v14;
v13 = v13 + 1;
goto label09;
label12:
v9 = v9 + 1;
goto label08;
label13:
v26 = v7[v3];
return v26;
}
public static int getLevenshteinDistance(java.lang.CharSequence, java.lang.CharSequence, int)
{
int[] v16, v18, v47;
java.lang.CharSequence v0, v1, v14;
int v10, v11, v12, v13, v15, v17, v19, v2, v20, v21, v22, v23, v24, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v48, v49, v5, v50, v6, v7, v8, v9;
char v25, v36;
java.lang.IllegalArgumentException v3, v4;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
v2 := @parameter2: int;
if v0 == null goto label01;
if v1 != null goto label02;
label01:
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Strings must not be null");
throw v3;
label02:
if v2 >= 0 goto label03;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Threshold must not be negative");
throw v4;
label03:
v5 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v6 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
if v5 != 0 goto label06;
if v6 > v2 goto label04;
v7 = v6;
goto label05;
label04:
v8 = (int) -1;
v7 = v8;
label05:
return v7;
label06:
if v6 != 0 goto label09;
if v5 > v2 goto label07;
v9 = v5;
goto label08;
label07:
v10 = (int) -1;
v9 = v10;
label08:
return v9;
label09:
v11 = v5 - v6;
v12 = staticinvoke <java.lang.Math: int abs(int)>(v11);
if v12 <= v2 goto label10;
v13 = (int) -1;
return v13;
label10:
if v5 <= v6 goto label11;
v14 = v0;
v0 = v1;
v1 = v14;
v5 = v6;
v6 = interfaceinvoke v14.<java.lang.CharSequence: int length()>();
label11:
v15 = v5 + 1;
v16 = newarray (int)[v15];
v17 = v5 + 1;
v18 = newarray (int)[v17];
v19 = staticinvoke <java.lang.Math: int min(int,int)>(v5, v2);
v20 = v19 + 1;
v21 = 0;
label12:
if v21 >= v20 goto label13;
v16[v21] = v21;
v21 = v21 + 1;
goto label12;
label13:
v22 = lengthof v16;
staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>(v16, v20, v22, 2147483647);
staticinvoke <java.util.Arrays: void fill(int[],int)>(v18, 2147483647);
v23 = 1;
label14:
if v23 > v6 goto label23;
v24 = v23 - 1;
v25 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v24);
v18[0] = v23;
v26 = v23 - v2;
v27 = staticinvoke <java.lang.Math: int max(int,int)>(1, v26);
v28 = 2147483647 - v2;
if v23 <= v28 goto label15;
v29 = v5;
goto label16;
label15:
v30 = v23 + v2;
v29 = staticinvoke <java.lang.Math: int min(int,int)>(v5, v30);
label16:
v31 = v29;
if v27 <= v29 goto label17;
v32 = (int) -1;
return v32;
label17:
if v27 <= 1 goto label18;
v33 = v27 - 1;
v18[v33] = 2147483647;
label18:
v34 = v27;
label19:
if v34 > v31 goto label22;
v35 = v34 - 1;
v36 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v35);
if v36 != v25 goto label20;
v37 = v34 - 1;
v38 = v16[v37];
v18[v34] = v38;
goto label21;
label20:
v39 = v34 - 1;
v40 = v18[v39];
v41 = v16[v34];
v42 = staticinvoke <java.lang.Math: int min(int,int)>(v40, v41);
v43 = v34 - 1;
v44 = v16[v43];
v45 = staticinvoke <java.lang.Math: int min(int,int)>(v42, v44);
v46 = 1 + v45;
v18[v34] = v46;
label21:
v34 = v34 + 1;
goto label19;
label22:
v47 = v16;
v16 = v18;
v18 = v47;
v23 = v23 + 1;
goto label14;
label23:
v48 = v16[v5];
if v48 > v2 goto label24;
v49 = v16[v5];
return v49;
label24:
v50 = (int) -1;
return v50;
}
public static int indexOf(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v0, v1;
int v2, v3;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
if v0 == null goto label1;
if v1 != null goto label2;
label1:
v2 = (int) -1;
return v2;
label2:
v3 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int)>(v0, v1, 0);
return v3;
}
public static int indexOf(java.lang.CharSequence, java.lang.CharSequence, int)
{
java.lang.CharSequence v0, v1;
int v2, v3, v4;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
v2 := @parameter2: int;
if v0 == null goto label1;
if v1 != null goto label2;
label1:
v3 = (int) -1;
return v3;
label2:
v4 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int)>(v0, v1, v2);
return v4;
}
public static int indexOf(java.lang.CharSequence, int)
{
java.lang.CharSequence v0;
int v1, v3, v4;
boolean v2;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 == 0 goto label1;
v3 = (int) -1;
return v3;
label1:
v4 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: int indexOf(java.lang.CharSequence,int,int)>(v0, v1, 0);
return v4;
}
public static int indexOf(java.lang.CharSequence, int, int)
{
java.lang.CharSequence v0;
int v1, v2, v4, v5;
boolean v3;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v3 == 0 goto label1;
v4 = (int) -1;
return v4;
label1:
v5 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: int indexOf(java.lang.CharSequence,int,int)>(v0, v1, v2);
return v5;
}
public static transient int indexOfAny(java.lang.CharSequence, char[])
{
int v11, v14, v16, v18, v4, v5, v6, v7, v8, v9;
boolean v13, v2, v3;
java.lang.CharSequence v0;
char v10, v12, v15, v17;
char[] v1;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: char[];
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 != 0 goto label1;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(char[])>(v1);
if v3 == 0 goto label2;
label1:
v4 = (int) -1;
return v4;
label2:
v5 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v6 = v5 - 1;
v7 = lengthof v1;
v8 = v7 - 1;
v9 = 0;
label3:
if v9 >= v5 goto label8;
v10 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v9);
v11 = 0;
label4:
if v11 >= v7 goto label7;
v12 = v1[v11];
if v12 != v10 goto label6;
if v9 >= v6 goto label5;
if v11 >= v8 goto label5;
v13 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(v10);
if v13 == 0 goto label5;
v14 = v11 + 1;
v15 = v1[v14];
v16 = v9 + 1;
v17 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v16);
if v15 != v17 goto label6;
return v9;
label5:
return v9;
label6:
v11 = v11 + 1;
goto label4;
label7:
v9 = v9 + 1;
goto label3;
label8:
v18 = (int) -1;
return v18;
}
public static transient int indexOfAny(java.lang.CharSequence, java.lang.CharSequence[])
{
java.lang.CharSequence v0, v6;
java.lang.CharSequence[] v1;
int v10, v2, v3, v4, v5, v7, v8, v9;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence[];
if v0 == null goto label1;
if v1 != null goto label2;
label1:
v2 = (int) -1;
return v2;
label2:
v3 = 2147483647;
v4 = lengthof v1;
v5 = 0;
label3:
if v5 >= v4 goto label5;
v6 = v1[v5];
if v6 == null goto label4;
v7 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int)>(v0, v6, 0);
v8 = (int) -1;
if v7 == v8 goto label4;
if v7 >= v3 goto label4;
v3 = v7;
label4:
v5 = v5 + 1;
goto label3;
label5:
if v3 != 2147483647 goto label6;
v9 = (int) -1;
v10 = v9;
goto label7;
label6:
v10 = v3;
label7:
return v10;
}
public static int indexOfAny(java.lang.CharSequence, java.lang.String)
{
java.lang.CharSequence v0;
int v4, v6;
char[] v5;
java.lang.String v1;
boolean v2, v3;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 != 0 goto label1;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v1);
if v3 == 0 goto label2;
label1:
v4 = (int) -1;
return v4;
label2:
v5 = virtualinvoke v1.<java.lang.String: char[] toCharArray()>();
v6 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfAny(java.lang.CharSequence,char[])>(v0, v5);
return v6;
}
public static transient int indexOfAnyBut(java.lang.CharSequence, char[])
{
int v11, v14, v16, v18, v4, v5, v6, v7, v8, v9;
boolean v13, v2, v3;
java.lang.CharSequence v0;
char v10, v12, v15, v17;
char[] v1;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: char[];
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 != 0 goto label1;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(char[])>(v1);
if v3 == 0 goto label2;
label1:
v4 = (int) -1;
return v4;
label2:
v5 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v6 = v5 - 1;
v7 = lengthof v1;
v8 = v7 - 1;
v9 = 0;
label3:
if v9 >= v5 goto label8;
v10 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v9);
v11 = 0;
label4:
if v11 >= v7 goto label6;
v12 = v1[v11];
if v12 != v10 goto label5;
if v9 >= v6 goto label7;
if v11 >= v8 goto label7;
v13 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(v10);
if v13 == 0 goto label7;
v14 = v11 + 1;
v15 = v1[v14];
v16 = v9 + 1;
v17 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v16);
if v15 == v17 goto label7;
label5:
v11 = v11 + 1;
goto label4;
label6:
return v9;
label7:
v9 = v9 + 1;
goto label3;
label8:
v18 = (int) -1;
return v18;
}
public static int indexOfAnyBut(java.lang.CharSequence, java.lang.CharSequence)
{
int v11, v13, v15, v16, v4, v5, v6, v8;
boolean v10, v12, v2, v3, v9;
java.lang.CharSequence v0, v1;
char v14, v7;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 != 0 goto label1;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v1);
if v3 == 0 goto label2;
label1:
v4 = (int) -1;
return v4;
label2:
v5 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v6 = 0;
label3:
if v6 >= v5 goto label8;
v7 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v6);
v8 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: int indexOf(java.lang.CharSequence,int,int)>(v1, v7, 0);
if v8 < 0 goto label4;
v9 = 1;
goto label5;
label4:
v9 = 0;
label5:
v10 = v9;
v11 = v6 + 1;
if v11 >= v5 goto label6;
v12 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>(v7);
if v12 == 0 goto label6;
v13 = v6 + 1;
v14 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v13);
if v9 == 0 goto label7;
v15 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: int indexOf(java.lang.CharSequence,int,int)>(v1, v14, 0);
if v15 >= 0 goto label7;
return v6;
label6:
if v10 != 0 goto label7;
return v6;
label7:
v6 = v6 + 1;
goto label3;
label8:
v16 = (int) -1;
return v16;
}
public static transient int indexOfDifference(java.lang.CharSequence[])
{
java.lang.CharSequence[] v0;
int v1, v11, v12, v13, v14, v15, v16, v19, v2, v22, v23, v5, v6, v7, v8, v9;
boolean v3, v4;
java.lang.CharSequence v10, v17, v20;
char v18, v21;
v0 := @parameter0: java.lang.CharSequence[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v0);
if v1 > 1 goto label01;
v2 = (int) -1;
return v2;
label01:
v3 = 0;
v4 = 1;
v5 = lengthof v0;
v6 = 2147483647;
v7 = 0;
v8 = lengthof v0;
v9 = 0;
label02:
if v9 >= v8 goto label05;
v10 = v0[v9];
if v10 != null goto label03;
v3 = 1;
v6 = 0;
goto label04;
label03:
v4 = 0;
v11 = interfaceinvoke v10.<java.lang.CharSequence: int length()>();
v6 = staticinvoke <java.lang.Math: int min(int,int)>(v11, v6);
v12 = interfaceinvoke v10.<java.lang.CharSequence: int length()>();
v7 = staticinvoke <java.lang.Math: int max(int,int)>(v12, v7);
label04:
v9 = v9 + 1;
goto label02;
label05:
if v4 != 0 goto label06;
if v7 != 0 goto label07;
if v3 != 0 goto label07;
label06:
v13 = (int) -1;
return v13;
label07:
if v6 != 0 goto label08;
return 0;
label08:
v14 = (int) -1;
v15 = v14;
v16 = 0;
label09:
if v16 >= v6 goto label13;
v17 = v0[0];
v18 = interfaceinvoke v17.<java.lang.CharSequence: char charAt(int)>(v16);
v19 = 1;
label10:
if v19 >= v5 goto label12;
v20 = v0[v19];
v21 = interfaceinvoke v20.<java.lang.CharSequence: char charAt(int)>(v16);
if v21 == v18 goto label11;
v15 = v16;
goto label12;
label11:
v19 = v19 + 1;
goto label10;
label12:
v22 = (int) -1;
if v15 != v22 goto label13;
v16 = v16 + 1;
goto label09;
label13:
v23 = (int) -1;
if v15 != v23 goto label14;
if v6 == v7 goto label14;
return v6;
label14:
return v15;
}
public static int indexOfDifference(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v0, v1;
char v6, v7;
int v10, v2, v3, v4, v5, v8, v9;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
if v0 != v1 goto label1;
v2 = (int) -1;
return v2;
label1:
if v0 == null goto label2;
if v1 != null goto label3;
label2:
return 0;
label3:
v3 = 0;
label4:
v4 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
if v3 >= v4 goto label5;
v5 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
if v3 >= v5 goto label5;
v6 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v3);
v7 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v3);
if v6 != v7 goto label5;
v3 = v3 + 1;
goto label4;
label5:
v8 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
if v3 < v8 goto label6;
v9 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
if v3 >= v9 goto label7;
label6:
return v3;
label7:
v10 = (int) -1;
return v10;
}
public static int indexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence)
{
int v2;
java.lang.CharSequence v0, v1;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)>(v0, v1, 0);
return v2;
}
public static int indexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence, int)
{
java.lang.CharSequence v0, v1;
int v10, v11, v13, v2, v3, v4, v5, v6, v7, v8, v9;
boolean v12;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
v2 := @parameter2: int;
if v0 == null goto label1;
if v1 != null goto label2;
label1:
v3 = (int) -1;
return v3;
label2:
if v2 >= 0 goto label3;
v2 = 0;
label3:
v4 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v5 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
v6 = v4 - v5;
v7 = v6 + 1;
if v2 <= v7 goto label4;
v8 = (int) -1;
return v8;
label4:
v9 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
if v9 != 0 goto label5;
return v2;
label5:
v10 = v2;
label6:
if v10 >= v7 goto label8;
v11 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
v12 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: boolean regionMatches(java.lang.CharSequence,boolean,int,java.lang.CharSequence,int,int)>(v0, 1, v10, v1, 0, v11);
if v12 == 0 goto label7;
return v10;
label7:
v10 = v10 + 1;
goto label6;
label8:
v13 = (int) -1;
return v13;
}
public static transient boolean isAllBlank(java.lang.CharSequence[])
{
java.lang.CharSequence[] v0;
java.lang.CharSequence v4;
int v2, v3;
boolean v1, v5;
v0 := @parameter0: java.lang.CharSequence[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(v0);
if v1 == 0 goto label1;
return 1;
label1:
v2 = lengthof v0;
v3 = 0;
label2:
if v3 >= v2 goto label4;
v4 = v0[v3];
v5 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>(v4);
if v5 == 0 goto label3;
return 0;
label3:
v3 = v3 + 1;
goto label2;
label4:
return 1;
}
public static transient boolean isAllEmpty(java.lang.CharSequence[])
{
java.lang.CharSequence[] v0;
java.lang.CharSequence v4;
int v2, v3;
boolean v1, v5;
v0 := @parameter0: java.lang.CharSequence[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(v0);
if v1 == 0 goto label1;
return 1;
label1:
v2 = lengthof v0;
v3 = 0;
label2:
if v3 >= v2 goto label4;
v4 = v0[v3];
v5 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNotEmpty(java.lang.CharSequence)>(v4);
if v5 == 0 goto label3;
return 0;
label3:
v3 = v3 + 1;
goto label2;
label4:
return 1;
}
public static boolean isAllLowerCase(java.lang.CharSequence)
{
java.lang.CharSequence v0;
int v2, v3;
char v4;
boolean v1, v5;
v0 := @parameter0: java.lang.CharSequence;
v1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v1 == 0 goto label1;
return 0;
label1:
v2 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v3 = 0;
label2:
if v3 >= v2 goto label4;
v4 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v3);
v5 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>(v4);
if v5 != 0 goto label3;
return 0;
label3:
v3 = v3 + 1;
goto label2;
label4:
return 1;
}
public static boolean isAllUpperCase(java.lang.CharSequence)
{
java.lang.CharSequence v0;
int v2, v3;
char v4;
boolean v1, v5;
v0 := @parameter0: java.lang.CharSequence;
v1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v1 == 0 goto label1;
return 0;
label1:
v2 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v3 = 0;
label2:
if v3 >= v2 goto label4;
v4 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v3);
v5 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>(v4);
if v5 != 0 goto label3;
return 0;
label3:
v3 = v3 + 1;
goto label2;
label4:
return 1;
}
public static boolean isAlpha(java.lang.CharSequence)
{
java.lang.CharSequence v0;
int v2, v3;
char v4;
boolean v1, v5;
v0 := @parameter0: java.lang.CharSequence;
v1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v1 == 0 goto label1;
return 0;
label1:
v2 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v3 = 0;
label2:
if v3 >= v2 goto label4;
v4 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v3);
v5 = staticinvoke <java.lang.Character: boolean isLetter(char)>(v4);
if v5 != 0 goto label3;
return 0;
label3:
v3 = v3 + 1;
goto label2;
label4:
return 1;
}
public static boolean isAlphanumeric(java.lang.CharSequence)
{
java.lang.CharSequence v0;
int v2, v3;
char v4;
boolean v1, v5;
v0 := @parameter0: java.lang.CharSequence;
v1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v1 == 0 goto label1;
return 0;
label1:
v2 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v3 = 0;
label2:
if v3 >= v2 goto label4;
v4 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v3);
v5 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>(v4);
if v5 != 0 goto label3;
return 0;
label3:
v3 = v3 + 1;
goto label2;
label4:
return 1;
}
public static boolean isAlphanumericSpace(java.lang.CharSequence)
{
java.lang.CharSequence v0;
int v1, v2;
char v3;
boolean v4;
v0 := @parameter0: java.lang.CharSequence;
if v0 != null goto label1;
return 0;
label1:
v1 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v2 = 0;
label2:
if v2 >= v1 goto label4;
v3 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v2);
if v3 == 32 goto label3;
v4 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>(v3);
if v4 != 0 goto label3;
return 0;
label3:
v2 = v2 + 1;
goto label2;
label4:
return 1;
}
public static boolean isAlphaSpace(java.lang.CharSequence)
{
java.lang.CharSequence v0;
int v1, v2;
char v3;
boolean v4;
v0 := @parameter0: java.lang.CharSequence;
if v0 != null goto label1;
return 0;
label1:
v1 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v2 = 0;
label2:
if v2 >= v1 goto label4;
v3 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v2);
if v3 == 32 goto label3;
v4 = staticinvoke <java.lang.Character: boolean isLetter(char)>(v3);
if v4 != 0 goto label3;
return 0;
label3:
v2 = v2 + 1;
goto label2;
label4:
return 1;
}
public static transient boolean isAnyBlank(java.lang.CharSequence[])
{
java.lang.CharSequence[] v0;
java.lang.CharSequence v4;
int v2, v3;
boolean v1, v5;
v0 := @parameter0: java.lang.CharSequence[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(v0);
if v1 == 0 goto label1;
return 0;
label1:
v2 = lengthof v0;
v3 = 0;
label2:
if v3 >= v2 goto label4;
v4 = v0[v3];
v5 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>(v4);
if v5 == 0 goto label3;
return 1;
label3:
v3 = v3 + 1;
goto label2;
label4:
return 0;
}
public static transient boolean isAnyEmpty(java.lang.CharSequence[])
{
java.lang.CharSequence[] v0;
java.lang.CharSequence v4;
int v2, v3;
boolean v1, v5;
v0 := @parameter0: java.lang.CharSequence[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(v0);
if v1 == 0 goto label1;
return 0;
label1:
v2 = lengthof v0;
v3 = 0;
label2:
if v3 >= v2 goto label4;
v4 = v0[v3];
v5 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v4);
if v5 == 0 goto label3;
return 1;
label3:
v3 = v3 + 1;
goto label2;
label4:
return 0;
}
public static boolean isAsciiPrintable(java.lang.CharSequence)
{
java.lang.CharSequence v0;
int v1, v2;
char v3;
boolean v4;
v0 := @parameter0: java.lang.CharSequence;
if v0 != null goto label1;
return 0;
label1:
v1 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v2 = 0;
label2:
if v2 >= v1 goto label4;
v3 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v2);
v4 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiPrintable(char)>(v3);
if v4 != 0 goto label3;
return 0;
label3:
v2 = v2 + 1;
goto label2;
label4:
return 1;
}
public static boolean isBlank(java.lang.CharSequence)
{
java.lang.CharSequence v0;
int v1, v2;
char v3;
boolean v4;
v0 := @parameter0: java.lang.CharSequence;
v1 = staticinvoke <org.apache.commons.lang3.StringUtils: int length(java.lang.CharSequence)>(v0);
if v1 != 0 goto label1;
return 1;
label1:
v2 = 0;
label2:
if v2 >= v1 goto label4;
v3 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v2);
v4 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(v3);
if v4 != 0 goto label3;
return 0;
label3:
v2 = v2 + 1;
goto label2;
label4:
return 1;
}
public static boolean isEmpty(java.lang.CharSequence)
{
int v1;
java.lang.CharSequence v0;
boolean v2;
v0 := @parameter0: java.lang.CharSequence;
if v0 == null goto label1;
v1 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
if v1 != 0 goto label2;
label1:
v2 = 1;
goto label3;
label2:
v2 = 0;
label3:
return v2;
}
public static boolean isMixedCase(java.lang.CharSequence)
{
java.lang.CharSequence v0;
char v7, v9;
int v2, v5, v6;
boolean v1, v10, v11, v3, v4, v8;
v0 := @parameter0: java.lang.CharSequence;
v1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v1 != 0 goto label1;
v2 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
if v2 != 1 goto label2;
label1:
return 0;
label2:
v3 = 0;
v4 = 0;
v5 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v6 = 0;
label3:
if v6 >= v5 goto label7;
if v3 == 0 goto label4;
if v4 == 0 goto label4;
return 1;
label4:
v7 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v6);
v8 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>(v7);
if v8 == 0 goto label5;
v3 = 1;
goto label6;
label5:
v9 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v6);
v10 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>(v9);
if v10 == 0 goto label6;
v4 = 1;
label6:
v6 = v6 + 1;
goto label3;
label7:
if v3 == 0 goto label8;
if v4 == 0 goto label8;
v11 = 1;
goto label9;
label8:
v11 = 0;
label9:
return v11;
}
public static transient boolean isNoneBlank(java.lang.CharSequence[])
{
java.lang.CharSequence[] v0;
boolean v1, v2;
v0 := @parameter0: java.lang.CharSequence[];
v1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAnyBlank(java.lang.CharSequence[])>(v0);
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public static transient boolean isNoneEmpty(java.lang.CharSequence[])
{
java.lang.CharSequence[] v0;
boolean v1, v2;
v0 := @parameter0: java.lang.CharSequence[];
v1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isAnyEmpty(java.lang.CharSequence[])>(v0);
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public static boolean isNotBlank(java.lang.CharSequence)
{
java.lang.CharSequence v0;
boolean v1, v2;
v0 := @parameter0: java.lang.CharSequence;
v1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>(v0);
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public static boolean isNotEmpty(java.lang.CharSequence)
{
java.lang.CharSequence v0;
boolean v1, v2;
v0 := @parameter0: java.lang.CharSequence;
v1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public static boolean isNumeric(java.lang.CharSequence)
{
java.lang.CharSequence v0;
int v2, v3;
char v4;
boolean v1, v5;
v0 := @parameter0: java.lang.CharSequence;
v1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v1 == 0 goto label1;
return 0;
label1:
v2 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v3 = 0;
label2:
if v3 >= v2 goto label4;
v4 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v3);
v5 = staticinvoke <java.lang.Character: boolean isDigit(char)>(v4);
if v5 != 0 goto label3;
return 0;
label3:
v3 = v3 + 1;
goto label2;
label4:
return 1;
}
public static boolean isNumericSpace(java.lang.CharSequence)
{
java.lang.CharSequence v0;
int v1, v2;
char v3;
boolean v4;
v0 := @parameter0: java.lang.CharSequence;
if v0 != null goto label1;
return 0;
label1:
v1 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v2 = 0;
label2:
if v2 >= v1 goto label4;
v3 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v2);
if v3 == 32 goto label3;
v4 = staticinvoke <java.lang.Character: boolean isDigit(char)>(v3);
if v4 != 0 goto label3;
return 0;
label3:
v2 = v2 + 1;
goto label2;
label4:
return 1;
}
public static boolean isWhitespace(java.lang.CharSequence)
{
java.lang.CharSequence v0;
int v1, v2;
char v3;
boolean v4;
v0 := @parameter0: java.lang.CharSequence;
if v0 != null goto label1;
return 0;
label1:
v1 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v2 = 0;
label2:
if v2 >= v1 goto label4;
v3 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v2);
v4 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(v3);
if v4 != 0 goto label3;
return 0;
label3:
v2 = v2 + 1;
goto label2;
label4:
return 1;
}
public static java.lang.String join(boolean[], char)
{
boolean[] v0;
int v2;
char v1;
java.lang.String v3;
v0 := @parameter0: boolean[];
v1 := @parameter1: char;
if v0 != null goto label1;
return null;
label1:
v2 = lengthof v0;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(boolean[],char,int,int)>(v0, v1, 0, v2);
return v3;
}
public static java.lang.String join(boolean[], char, int, int)
{
boolean[] v0;
char v1;
java.util.StringJoiner v5;
int v2, v3, v4, v6;
java.lang.String v8, v9;
boolean v7;
v0 := @parameter0: boolean[];
v1 := @parameter1: char;
v2 := @parameter2: int;
v3 := @parameter3: int;
if v0 != null goto label1;
return null;
label1:
v4 = v3 - v2;
if v4 > 0 goto label2;
return "";
label2:
v5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.util.StringJoiner newStringJoiner(char)>(v1);
v6 = v2;
label3:
if v6 >= v3 goto label4;
v7 = v0[v6];
v8 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(v7);
virtualinvoke v5.<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>(v8);
v6 = v6 + 1;
goto label3;
label4:
v9 = virtualinvoke v5.<java.util.StringJoiner: java.lang.String toString()>();
return v9;
}
public static java.lang.String join(byte[], char)
{
byte[] v0;
int v2;
char v1;
java.lang.String v3;
v0 := @parameter0: byte[];
v1 := @parameter1: char;
if v0 != null goto label1;
return null;
label1:
v2 = lengthof v0;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(byte[],char,int,int)>(v0, v1, 0, v2);
return v3;
}
public static java.lang.String join(byte[], char, int, int)
{
byte[] v0;
char v1;
byte v7;
java.util.StringJoiner v5;
int v2, v3, v4, v6;
java.lang.String v8, v9;
v0 := @parameter0: byte[];
v1 := @parameter1: char;
v2 := @parameter2: int;
v3 := @parameter3: int;
if v0 != null goto label1;
return null;
label1:
v4 = v3 - v2;
if v4 > 0 goto label2;
return "";
label2:
v5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.util.StringJoiner newStringJoiner(char)>(v1);
v6 = v2;
label3:
if v6 >= v3 goto label4;
v7 = v0[v6];
v8 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(v7);
virtualinvoke v5.<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>(v8);
v6 = v6 + 1;
goto label3;
label4:
v9 = virtualinvoke v5.<java.util.StringJoiner: java.lang.String toString()>();
return v9;
}
public static java.lang.String join(char[], char)
{
int v2;
char[] v0;
char v1;
java.lang.String v3;
v0 := @parameter0: char[];
v1 := @parameter1: char;
if v0 != null goto label1;
return null;
label1:
v2 = lengthof v0;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(char[],char,int,int)>(v0, v1, 0, v2);
return v3;
}
public static java.lang.String join(char[], char, int, int)
{
char v1, v7;
java.util.StringJoiner v5;
int v2, v3, v4, v6;
char[] v0;
java.lang.String v8, v9;
v0 := @parameter0: char[];
v1 := @parameter1: char;
v2 := @parameter2: int;
v3 := @parameter3: int;
if v0 != null goto label1;
return null;
label1:
v4 = v3 - v2;
if v4 > 0 goto label2;
return "";
label2:
v5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.util.StringJoiner newStringJoiner(char)>(v1);
v6 = v2;
label3:
if v6 >= v3 goto label4;
v7 = v0[v6];
v8 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(v7);
virtualinvoke v5.<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>(v8);
v6 = v6 + 1;
goto label3;
label4:
v9 = virtualinvoke v5.<java.util.StringJoiner: java.lang.String toString()>();
return v9;
}
public static java.lang.String join(double[], char)
{
double[] v0;
int v2;
char v1;
java.lang.String v3;
v0 := @parameter0: double[];
v1 := @parameter1: char;
if v0 != null goto label1;
return null;
label1:
v2 = lengthof v0;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(double[],char,int,int)>(v0, v1, 0, v2);
return v3;
}
public static java.lang.String join(double[], char, int, int)
{
double[] v0;
char v1;
java.util.StringJoiner v5;
int v2, v3, v4, v6;
java.lang.String v8, v9;
double v7;
v0 := @parameter0: double[];
v1 := @parameter1: char;
v2 := @parameter2: int;
v3 := @parameter3: int;
if v0 != null goto label1;
return null;
label1:
v4 = v3 - v2;
if v4 > 0 goto label2;
return "";
label2:
v5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.util.StringJoiner newStringJoiner(char)>(v1);
v6 = v2;
label3:
if v6 >= v3 goto label4;
v7 = v0[v6];
v8 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>(v7);
virtualinvoke v5.<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>(v8);
v6 = v6 + 1;
goto label3;
label4:
v9 = virtualinvoke v5.<java.util.StringJoiner: java.lang.String toString()>();
return v9;
}
public static java.lang.String join(float[], char)
{
int v2;
char v1;
float[] v0;
java.lang.String v3;
v0 := @parameter0: float[];
v1 := @parameter1: char;
if v0 != null goto label1;
return null;
label1:
v2 = lengthof v0;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(float[],char,int,int)>(v0, v1, 0, v2);
return v3;
}
public static java.lang.String join(float[], char, int, int)
{
char v1;
float[] v0;
java.util.StringJoiner v5;
int v2, v3, v4, v6;
float v7;
java.lang.String v8, v9;
v0 := @parameter0: float[];
v1 := @parameter1: char;
v2 := @parameter2: int;
v3 := @parameter3: int;
if v0 != null goto label1;
return null;
label1:
v4 = v3 - v2;
if v4 > 0 goto label2;
return "";
label2:
v5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.util.StringJoiner newStringJoiner(char)>(v1);
v6 = v2;
label3:
if v6 >= v3 goto label4;
v7 = v0[v6];
v8 = staticinvoke <java.lang.String: java.lang.String valueOf(float)>(v7);
virtualinvoke v5.<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>(v8);
v6 = v6 + 1;
goto label3;
label4:
v9 = virtualinvoke v5.<java.util.StringJoiner: java.lang.String toString()>();
return v9;
}
public static java.lang.String join(int[], char)
{
int[] v0;
int v2;
char v1;
java.lang.String v3;
v0 := @parameter0: int[];
v1 := @parameter1: char;
if v0 != null goto label1;
return null;
label1:
v2 = lengthof v0;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(int[],char,int,int)>(v0, v1, 0, v2);
return v3;
}
public static java.lang.String join(int[], char, int, int)
{
char v1;
int[] v0;
java.util.StringJoiner v5;
int v2, v3, v4, v6, v7;
java.lang.String v8, v9;
v0 := @parameter0: int[];
v1 := @parameter1: char;
v2 := @parameter2: int;
v3 := @parameter3: int;
if v0 != null goto label1;
return null;
label1:
v4 = v3 - v2;
if v4 > 0 goto label2;
return "";
label2:
v5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.util.StringJoiner newStringJoiner(char)>(v1);
v6 = v2;
label3:
if v6 >= v3 goto label4;
v7 = v0[v6];
v8 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(v7);
virtualinvoke v5.<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>(v8);
v6 = v6 + 1;
goto label3;
label4:
v9 = virtualinvoke v5.<java.util.StringJoiner: java.lang.String toString()>();
return v9;
}
public static java.lang.String join(java.lang.Iterable, char)
{
java.util.Iterator v2;
char v1;
java.lang.String v3;
java.lang.Iterable v0;
v0 := @parameter0: java.lang.Iterable;
v1 := @parameter1: char;
if v0 != null goto label1;
return null;
label1:
v2 = interfaceinvoke v0.<java.lang.Iterable: java.util.Iterator iterator()>();
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.util.Iterator,char)>(v2, v1);
return v3;
}
public static java.lang.String join(java.lang.Iterable, java.lang.String)
{
java.util.Iterator v2;
java.lang.String v1, v3;
java.lang.Iterable v0;
v0 := @parameter0: java.lang.Iterable;
v1 := @parameter1: java.lang.String;
if v0 != null goto label1;
return null;
label1:
v2 = interfaceinvoke v0.<java.lang.Iterable: java.util.Iterator iterator()>();
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.util.Iterator,java.lang.String)>(v2, v1);
return v3;
}
public static java.lang.String join(java.util.Iterator, char)
{
java.util.Iterator v0;
char v1;
java.lang.Object v3, v8;
java.lang.StringBuilder v6;
java.lang.String v5, v9;
boolean v2, v4, v7;
v0 := @parameter0: java.util.Iterator;
v1 := @parameter1: char;
if v0 != null goto label1;
return null;
label1:
v2 = interfaceinvoke v0.<java.util.Iterator: boolean hasNext()>();
if v2 != 0 goto label2;
return "";
label2:
v3 = interfaceinvoke v0.<java.util.Iterator: java.lang.Object next()>();
v4 = interfaceinvoke v0.<java.util.Iterator: boolean hasNext()>();
if v4 != 0 goto label3;
v5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String toStringOrEmpty(java.lang.Object)>(v3);
return v5;
label3:
v6 = new java.lang.StringBuilder;
specialinvoke v6.<java.lang.StringBuilder: void <init>(int)>(256);
if v3 == null goto label4;
virtualinvoke v6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v3);
label4:
v7 = interfaceinvoke v0.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label5;
virtualinvoke v6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v1);
v8 = interfaceinvoke v0.<java.util.Iterator: java.lang.Object next()>();
if v8 == null goto label4;
virtualinvoke v6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v8);
goto label4;
label5:
v9 = virtualinvoke v6.<java.lang.StringBuilder: java.lang.String toString()>();
return v9;
}
public static java.lang.String join(java.util.Iterator, java.lang.String)
{
java.util.Iterator v0;
java.lang.Object v3, v8;
java.lang.StringBuilder v6;
java.lang.String v1, v5, v9;
boolean v2, v4, v7;
v0 := @parameter0: java.util.Iterator;
v1 := @parameter1: java.lang.String;
if v0 != null goto label1;
return null;
label1:
v2 = interfaceinvoke v0.<java.util.Iterator: boolean hasNext()>();
if v2 != 0 goto label2;
return "";
label2:
v3 = interfaceinvoke v0.<java.util.Iterator: java.lang.Object next()>();
v4 = interfaceinvoke v0.<java.util.Iterator: boolean hasNext()>();
if v4 != 0 goto label3;
v5 = staticinvoke <java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>(v3, "");
return v5;
label3:
v6 = new java.lang.StringBuilder;
specialinvoke v6.<java.lang.StringBuilder: void <init>(int)>(256);
if v3 == null goto label4;
virtualinvoke v6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v3);
label4:
v7 = interfaceinvoke v0.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label6;
if v1 == null goto label5;
virtualinvoke v6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v1);
label5:
v8 = interfaceinvoke v0.<java.util.Iterator: java.lang.Object next()>();
if v8 == null goto label4;
virtualinvoke v6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v8);
goto label4;
label6:
v9 = virtualinvoke v6.<java.lang.StringBuilder: java.lang.String toString()>();
return v9;
}
public static java.lang.String join(java.util.List, char, int, int)
{
java.util.Iterator v6;
char v1;
java.util.List v0, v5;
int v2, v3, v4;
java.lang.String v7;
v0 := @parameter0: java.util.List;
v1 := @parameter1: char;
v2 := @parameter2: int;
v3 := @parameter3: int;
if v0 != null goto label1;
return null;
label1:
v4 = v3 - v2;
if v4 > 0 goto label2;
return "";
label2:
v5 = interfaceinvoke v0.<java.util.List: java.util.List subList(int,int)>(v2, v3);
v6 = interfaceinvoke v5.<java.util.List: java.util.Iterator iterator()>();
v7 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.util.Iterator,char)>(v6, v1);
return v7;
}
public static java.lang.String join(java.util.List, java.lang.String, int, int)
{
java.util.Iterator v6;
java.util.List v0, v5;
int v2, v3, v4;
java.lang.String v1, v7;
v0 := @parameter0: java.util.List;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: int;
v3 := @parameter3: int;
if v0 != null goto label1;
return null;
label1:
v4 = v3 - v2;
if v4 > 0 goto label2;
return "";
label2:
v5 = interfaceinvoke v0.<java.util.List: java.util.List subList(int,int)>(v2, v3);
v6 = interfaceinvoke v5.<java.util.List: java.util.Iterator iterator()>();
v7 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.util.Iterator,java.lang.String)>(v6, v1);
return v7;
}
public static java.lang.String join(long[], char)
{
long[] v0;
int v2;
char v1;
java.lang.String v3;
v0 := @parameter0: long[];
v1 := @parameter1: char;
if v0 != null goto label1;
return null;
label1:
v2 = lengthof v0;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(long[],char,int,int)>(v0, v1, 0, v2);
return v3;
}
public static java.lang.String join(long[], char, int, int)
{
char v1;
long v7;
long[] v0;
java.util.StringJoiner v5;
int v2, v3, v4, v6;
java.lang.String v8, v9;
v0 := @parameter0: long[];
v1 := @parameter1: char;
v2 := @parameter2: int;
v3 := @parameter3: int;
if v0 != null goto label1;
return null;
label1:
v4 = v3 - v2;
if v4 > 0 goto label2;
return "";
label2:
v5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.util.StringJoiner newStringJoiner(char)>(v1);
v6 = v2;
label3:
if v6 >= v3 goto label4;
v7 = v0[v6];
v8 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(v7);
virtualinvoke v5.<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>(v8);
v6 = v6 + 1;
goto label3;
label4:
v9 = virtualinvoke v5.<java.util.StringJoiner: java.lang.String toString()>();
return v9;
}
public static java.lang.String join(java.lang.Object[], char)
{
java.lang.Object[] v0;
int v2;
char v1;
java.lang.String v3;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: char;
if v0 != null goto label1;
return null;
label1:
v2 = lengthof v0;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],char,int,int)>(v0, v1, 0, v2);
return v3;
}
public static java.lang.String join(java.lang.Object[], char, int, int)
{
java.lang.Object[] v0;
char v1;
java.util.StringJoiner v5;
int v2, v3, v4, v6;
java.lang.Object v7;
java.lang.String v8, v9;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: char;
v2 := @parameter2: int;
v3 := @parameter3: int;
if v0 != null goto label1;
return null;
label1:
v4 = v3 - v2;
if v4 > 0 goto label2;
return "";
label2:
v5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.util.StringJoiner newStringJoiner(char)>(v1);
v6 = v2;
label3:
if v6 >= v3 goto label4;
v7 = v0[v6];
v8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String toStringOrEmpty(java.lang.Object)>(v7);
virtualinvoke v5.<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>(v8);
v6 = v6 + 1;
goto label3;
label4:
v9 = virtualinvoke v5.<java.util.StringJoiner: java.lang.String toString()>();
return v9;
}
public static java.lang.String join(java.lang.Object[], java.lang.String)
{
java.lang.Object[] v0;
int v2;
java.lang.String v1, v3;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: java.lang.String;
if v0 != null goto label1;
return null;
label1:
v2 = lengthof v0;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],java.lang.String,int,int)>(v0, v1, 0, v2);
return v3;
}
public static java.lang.String join(java.lang.Object[], java.lang.String, int, int)
{
java.lang.Object[] v0;
java.util.StringJoiner v5;
int v2, v3, v4, v7;
java.lang.Object v8;
java.lang.String v1, v10, v6, v9;
v0 := @parameter0: java.lang.Object[];
v1 := @parameter1: java.lang.String;
v2 := @parameter2: int;
v3 := @parameter3: int;
if v0 != null goto label1;
return null;
label1:
v4 = v3 - v2;
if v4 > 0 goto label2;
return "";
label2:
v5 = new java.util.StringJoiner;
v6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String toStringOrEmpty(java.lang.Object)>(v1);
specialinvoke v5.<java.util.StringJoiner: void <init>(java.lang.CharSequence)>(v6);
v7 = v2;
label3:
if v7 >= v3 goto label4;
v8 = v0[v7];
v9 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String toStringOrEmpty(java.lang.Object)>(v8);
virtualinvoke v5.<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>(v9);
v7 = v7 + 1;
goto label3;
label4:
v10 = virtualinvoke v5.<java.util.StringJoiner: java.lang.String toString()>();
return v10;
}
public static java.lang.String join(short[], char)
{
int v2;
char v1;
java.lang.String v3;
short[] v0;
v0 := @parameter0: short[];
v1 := @parameter1: char;
if v0 != null goto label1;
return null;
label1:
v2 = lengthof v0;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(short[],char,int,int)>(v0, v1, 0, v2);
return v3;
}
public static java.lang.String join(short[], char, int, int)
{
char v1;
short v7;
java.util.StringJoiner v5;
int v2, v3, v4, v6;
java.lang.String v8, v9;
short[] v0;
v0 := @parameter0: short[];
v1 := @parameter1: char;
v2 := @parameter2: int;
v3 := @parameter3: int;
if v0 != null goto label1;
return null;
label1:
v4 = v3 - v2;
if v4 > 0 goto label2;
return "";
label2:
v5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.util.StringJoiner newStringJoiner(char)>(v1);
v6 = v2;
label3:
if v6 >= v3 goto label4;
v7 = v0[v6];
v8 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(v7);
virtualinvoke v5.<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>(v8);
v6 = v6 + 1;
goto label3;
label4:
v9 = virtualinvoke v5.<java.util.StringJoiner: java.lang.String toString()>();
return v9;
}
public static transient java.lang.String join(java.lang.Object[])
{
java.lang.Object[] v0;
java.lang.String v1;
v0 := @parameter0: java.lang.Object[];
v1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],java.lang.String)>(v0, null);
return v1;
}
public static transient java.lang.String joinWith(java.lang.String, java.lang.Object[])
{
java.lang.Object[] v1;
java.lang.String v0, v3;
java.lang.IllegalArgumentException v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.Object[];
if v1 != null goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Object varargs must not be null");
throw v2;
label1:
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],java.lang.String)>(v1, v0);
return v3;
}
public static int lastIndexOf(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v0, v1;
int v2, v3, v4;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
if v0 != null goto label1;
v2 = (int) -1;
return v2;
label1:
v3 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v4 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: int lastIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)>(v0, v1, v3);
return v4;
}
public static int lastIndexOf(java.lang.CharSequence, java.lang.CharSequence, int)
{
java.lang.CharSequence v0, v1;
int v2, v3;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: int lastIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)>(v0, v1, v2);
return v3;
}
public static int lastIndexOf(java.lang.CharSequence, int)
{
java.lang.CharSequence v0;
int v1, v3, v4, v5;
boolean v2;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 == 0 goto label1;
v3 = (int) -1;
return v3;
label1:
v4 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v5 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: int lastIndexOf(java.lang.CharSequence,int,int)>(v0, v1, v4);
return v5;
}
public static int lastIndexOf(java.lang.CharSequence, int, int)
{
java.lang.CharSequence v0;
int v1, v2, v4, v5;
boolean v3;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v3 == 0 goto label1;
v4 = (int) -1;
return v4;
label1:
v5 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: int lastIndexOf(java.lang.CharSequence,int,int)>(v0, v1, v2);
return v5;
}
public static transient int lastIndexOfAny(java.lang.CharSequence, java.lang.CharSequence[])
{
java.lang.CharSequence v0, v7;
java.lang.CharSequence[] v1;
int v2, v3, v4, v5, v6, v8, v9;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence[];
if v0 == null goto label1;
if v1 != null goto label2;
label1:
v2 = (int) -1;
return v2;
label2:
v3 = (int) -1;
v4 = v3;
v5 = lengthof v1;
v6 = 0;
label3:
if v6 >= v5 goto label5;
v7 = v1[v6];
if v7 == null goto label4;
v8 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v9 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: int lastIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)>(v0, v7, v8);
if v9 <= v4 goto label4;
v4 = v9;
label4:
v6 = v6 + 1;
goto label3;
label5:
return v4;
}
public static int lastIndexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v0, v1;
int v2, v3, v4;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
if v0 == null goto label1;
if v1 != null goto label2;
label1:
v2 = (int) -1;
return v2;
label2:
v3 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v4 = staticinvoke <org.apache.commons.lang3.StringUtils: int lastIndexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)>(v0, v1, v3);
return v4;
}
public static int lastIndexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence, int)
{
java.lang.CharSequence v0, v1;
int v10, v2, v3, v4, v5, v6, v7, v8;
boolean v9;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
v2 := @parameter2: int;
if v0 == null goto label1;
if v1 != null goto label2;
label1:
v3 = (int) -1;
return v3;
label2:
v4 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
v5 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v6 = v5 - v4;
if v2 <= v6 goto label3;
v2 = v5 - v4;
label3:
if v2 >= 0 goto label4;
v7 = (int) -1;
return v7;
label4:
if v4 != 0 goto label5;
return v2;
label5:
v8 = v2;
label6:
if v8 < 0 goto label8;
v9 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: boolean regionMatches(java.lang.CharSequence,boolean,int,java.lang.CharSequence,int,int)>(v0, 1, v8, v1, 0, v4);
if v9 == 0 goto label7;
return v8;
label7:
v8 = v8 - 1;
goto label6;
label8:
v10 = (int) -1;
return v10;
}
public static int lastOrdinalIndexOf(java.lang.CharSequence, java.lang.CharSequence, int)
{
java.lang.CharSequence v0, v1;
int v2, v3;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: int ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int,boolean)>(v0, v1, v2, 1);
return v3;
}
public static java.lang.String left(java.lang.String, int)
{
int v1, v2;
java.lang.String v0, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
if v0 != null goto label1;
return null;
label1:
if v1 >= 0 goto label2;
return "";
label2:
v2 = virtualinvoke v0.<java.lang.String: int length()>();
if v2 > v1 goto label3;
return v0;
label3:
v3 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(0, v1);
return v3;
}
public static java.lang.String leftPad(java.lang.String, int)
{
int v1;
java.lang.String v0, v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String leftPad(java.lang.String,int,char)>(v0, v1, 32);
return v2;
}
public static java.lang.String leftPad(java.lang.String, int, char)
{
char v2;
int v1, v3, v4;
java.lang.String v0, v5, v6, v7, v8;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 := @parameter2: char;
if v0 != null goto label1;
return null;
label1:
v3 = virtualinvoke v0.<java.lang.String: int length()>();
v4 = v1 - v3;
if v4 > 0 goto label2;
return v0;
label2:
if v4 <= 8192 goto label3;
v5 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(v2);
v6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String leftPad(java.lang.String,int,java.lang.String)>(v0, v1, v5);
return v6;
label3:
v7 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String repeat(char,int)>(v2, v4);
v8 = virtualinvoke v7.<java.lang.String: java.lang.String concat(java.lang.String)>(v0);
return v8;
}
public static java.lang.String leftPad(java.lang.String, int, java.lang.String)
{
int v1, v14, v15, v4, v5, v6;
java.lang.String v0, v10, v11, v17, v18, v2, v8, v9;
boolean v3;
char v16, v7;
char[] v12, v13;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 := @parameter2: java.lang.String;
if v0 != null goto label1;
return null;
label1:
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v2);
if v3 == 0 goto label2;
v2 = " ";
label2:
v4 = virtualinvoke v2.<java.lang.String: int length()>();
v5 = virtualinvoke v0.<java.lang.String: int length()>();
v6 = v1 - v5;
if v6 > 0 goto label3;
return v0;
label3:
if v4 != 1 goto label4;
if v6 > 8192 goto label4;
v7 = virtualinvoke v2.<java.lang.String: char charAt(int)>(0);
v8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String leftPad(java.lang.String,int,char)>(v0, v1, v7);
return v8;
label4:
if v6 != v4 goto label5;
v9 = virtualinvoke v2.<java.lang.String: java.lang.String concat(java.lang.String)>(v0);
return v9;
label5:
if v6 >= v4 goto label6;
v10 = virtualinvoke v2.<java.lang.String: java.lang.String substring(int,int)>(0, v6);
v11 = virtualinvoke v10.<java.lang.String: java.lang.String concat(java.lang.String)>(v0);
return v11;
label6:
v12 = newarray (char)[v6];
v13 = virtualinvoke v2.<java.lang.String: char[] toCharArray()>();
v14 = 0;
label7:
if v14 >= v6 goto label8;
v15 = v14 % v4;
v16 = v13[v15];
v12[v14] = v16;
v14 = v14 + 1;
goto label7;
label8:
v17 = new java.lang.String;
specialinvoke v17.<java.lang.String: void <init>(char[])>(v12);
v18 = virtualinvoke v17.<java.lang.String: java.lang.String concat(java.lang.String)>(v0);
return v18;
}
public static int length(java.lang.CharSequence)
{
int v1;
java.lang.CharSequence v0;
v0 := @parameter0: java.lang.CharSequence;
if v0 != null goto label1;
v1 = 0;
goto label2;
label1:
v1 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
label2:
return v1;
}
public static java.lang.String lowerCase(java.lang.String)
{
java.lang.String v0, v1;
v0 := @parameter0: java.lang.String;
if v0 != null goto label1;
return null;
label1:
v1 = virtualinvoke v0.<java.lang.String: java.lang.String toLowerCase()>();
return v1;
}
public static java.lang.String lowerCase(java.lang.String, java.util.Locale)
{
java.util.Locale v1, v2;
java.lang.String v0, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.util.Locale;
if v0 != null goto label1;
return null;
label1:
v2 = staticinvoke <org.apache.commons.lang3.LocaleUtils: java.util.Locale toLocale(java.util.Locale)>(v1);
v3 = virtualinvoke v0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>(v2);
return v3;
}
private static int[] matches(java.lang.CharSequence, java.lang.CharSequence)
{
int[] v11, v50;
boolean v25, v38;
java.lang.CharSequence v0, v1, v4, v5;
int v10, v12, v13, v15, v16, v17, v19, v2, v20, v21, v22, v23, v24, v29, v3, v30, v31, v32, v33, v35, v36, v37, v40, v41, v42, v45, v46, v47, v51, v52, v6, v7, v8, v9;
boolean[] v14;
char v18, v26, v34, v39, v43, v44, v48, v49;
char[] v27, v28;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
v2 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v3 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
if v2 <= v3 goto label01;
v4 = v0;
v5 = v1;
goto label02;
label01:
v4 = v1;
v5 = v0;
label02:
v6 = interfaceinvoke v4.<java.lang.CharSequence: int length()>();
v7 = v6 / 2;
v8 = v7 - 1;
v9 = staticinvoke <java.lang.Math: int max(int,int)>(v8, 0);
v10 = interfaceinvoke v5.<java.lang.CharSequence: int length()>();
v11 = newarray (int)[v10];
v12 = (int) -1;
staticinvoke <java.util.Arrays: void fill(int[],int)>(v11, v12);
v13 = interfaceinvoke v4.<java.lang.CharSequence: int length()>();
v14 = newarray (boolean)[v13];
v15 = 0;
v16 = 0;
label03:
v17 = interfaceinvoke v5.<java.lang.CharSequence: int length()>();
if v16 >= v17 goto label07;
v18 = interfaceinvoke v5.<java.lang.CharSequence: char charAt(int)>(v16);
v19 = v16 - v9;
v20 = staticinvoke <java.lang.Math: int max(int,int)>(v19, 0);
v21 = v16 + v9;
v22 = v21 + 1;
v23 = interfaceinvoke v4.<java.lang.CharSequence: int length()>();
v24 = staticinvoke <java.lang.Math: int min(int,int)>(v22, v23);
label04:
if v20 >= v24 goto label06;
v25 = v14[v20];
if v25 != 0 goto label05;
v26 = interfaceinvoke v4.<java.lang.CharSequence: char charAt(int)>(v20);
if v18 != v26 goto label05;
v11[v16] = v20;
v14[v20] = 1;
v15 = v15 + 1;
goto label06;
label05:
v20 = v20 + 1;
goto label04;
label06:
v16 = v16 + 1;
goto label03;
label07:
v27 = newarray (char)[v15];
v28 = newarray (char)[v15];
v29 = 0;
v30 = 0;
label08:
v31 = interfaceinvoke v5.<java.lang.CharSequence: int length()>();
if v29 >= v31 goto label10;
v32 = v11[v29];
v33 = (int) -1;
if v32 == v33 goto label09;
v34 = interfaceinvoke v5.<java.lang.CharSequence: char charAt(int)>(v29);
v27[v30] = v34;
v30 = v30 + 1;
label09:
v29 = v29 + 1;
goto label08;
label10:
v35 = 0;
v36 = 0;
label11:
v37 = interfaceinvoke v4.<java.lang.CharSequence: int length()>();
if v35 >= v37 goto label13;
v38 = v14[v35];
if v38 == 0 goto label12;
v39 = interfaceinvoke v4.<java.lang.CharSequence: char charAt(int)>(v35);
v28[v36] = v39;
v36 = v36 + 1;
label12:
v35 = v35 + 1;
goto label11;
label13:
v40 = 0;
v41 = 0;
label14:
v42 = lengthof v27;
if v41 >= v42 goto label16;
v43 = v27[v41];
v44 = v28[v41];
if v43 == v44 goto label15;
v40 = v40 + 1;
label15:
v41 = v41 + 1;
goto label14;
label16:
v45 = 0;
v46 = 0;
label17:
v47 = interfaceinvoke v5.<java.lang.CharSequence: int length()>();
if v46 >= v47 goto label18;
v48 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v46);
v49 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v46);
if v48 != v49 goto label18;
v45 = v45 + 1;
v46 = v46 + 1;
goto label17;
label18:
v50 = newarray (int)[4];
v50[0] = v15;
v51 = v40 / 2;
v50[1] = v51;
v50[2] = v45;
v52 = interfaceinvoke v4.<java.lang.CharSequence: int length()>();
v50[3] = v52;
return v50;
}
public static java.lang.String mid(java.lang.String, int, int)
{
int v1, v2, v3, v4, v5, v7;
java.lang.String v0, v6, v8;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 := @parameter2: int;
if v0 != null goto label1;
return null;
label1:
if v2 < 0 goto label2;
v3 = virtualinvoke v0.<java.lang.String: int length()>();
if v1 <= v3 goto label3;
label2:
return "";
label3:
if v1 >= 0 goto label4;
v1 = 0;
label4:
v4 = virtualinvoke v0.<java.lang.String: int length()>();
v5 = v1 + v2;
if v4 > v5 goto label5;
v6 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(v1);
return v6;
label5:
v7 = v1 + v2;
v8 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(v1, v7);
return v8;
}
private static java.util.StringJoiner newStringJoiner(char)
{
char v0;
java.lang.String v2;
java.util.StringJoiner v1;
v0 := @parameter0: char;
v1 = new java.util.StringJoiner;
v2 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(v0);
specialinvoke v1.<java.util.StringJoiner: void <init>(java.lang.CharSequence)>(v2);
return v1;
}
public static java.lang.String normalizeSpace(java.lang.String)
{
int v10, v13, v16, v18, v2, v4, v5, v7;
java.lang.String v0, v11, v15, v19;
boolean v1, v17, v6, v9;
char v12, v14, v8;
char[] v3;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v1 == 0 goto label01;
return v0;
label01:
v2 = virtualinvoke v0.<java.lang.String: int length()>();
v3 = newarray (char)[v2];
v4 = 0;
v5 = 0;
v6 = 1;
v7 = 0;
label02:
if v7 >= v2 goto label08;
v8 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v7);
v9 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(v8);
if v9 == 0 goto label04;
if v5 != 0 goto label03;
if v6 != 0 goto label03;
v10 = v4;
v4 = v4 + 1;
v11 = " ";
v12 = virtualinvoke v11.<java.lang.String: char charAt(int)>(0);
v3[v10] = v12;
label03:
v5 = v5 + 1;
goto label07;
label04:
v6 = 0;
v13 = v4;
v4 = v4 + 1;
if v8 != 160 goto label05;
v14 = 32;
goto label06;
label05:
v14 = v8;
label06:
v3[v13] = v14;
v5 = 0;
label07:
v7 = v7 + 1;
goto label02;
label08:
if v6 == 0 goto label09;
return "";
label09:
v15 = new java.lang.String;
v16 = v4;
if v5 <= 0 goto label10;
v17 = 1;
goto label11;
label10:
v17 = 0;
label11:
v18 = v16 - v17;
specialinvoke v15.<java.lang.String: void <init>(char[],int,int)>(v3, 0, v18);
v19 = virtualinvoke v15.<java.lang.String: java.lang.String trim()>();
return v19;
}
public static int ordinalIndexOf(java.lang.CharSequence, java.lang.CharSequence, int)
{
java.lang.CharSequence v0, v1;
int v2, v3;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: int ordinalIndexOf(java.lang.CharSequence,java.lang.CharSequence,int,boolean)>(v0, v1, v2, 0);
return v3;
}
private static int ordinalIndexOf(java.lang.CharSequence, java.lang.CharSequence, int, boolean)
{
java.lang.CharSequence v0, v1;
int v10, v11, v12, v2, v4, v5, v6, v7, v8, v9;
boolean v3;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
v2 := @parameter2: int;
v3 := @parameter3: boolean;
if v0 == null goto label01;
if v1 == null goto label01;
if v2 > 0 goto label02;
label01:
v4 = (int) -1;
return v4;
label02:
v5 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
if v5 != 0 goto label05;
if v3 == 0 goto label03;
v6 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
goto label04;
label03:
v6 = 0;
label04:
return v6;
label05:
v7 = 0;
if v3 == 0 goto label06;
v8 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
goto label07;
label06:
v9 = (int) -1;
v8 = v9;
label07:
v10 = v8;
label08:
if v3 == 0 goto label09;
v11 = v10 - 1;
v10 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: int lastIndexOf(java.lang.CharSequence,java.lang.CharSequence,int)>(v0, v1, v11);
goto label10;
label09:
v12 = v10 + 1;
v10 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int)>(v0, v1, v12);
label10:
if v10 >= 0 goto label11;
return v10;
label11:
v7 = v7 + 1;
if v7 < v2 goto label08;
return v10;
}
public static java.lang.String overlay(java.lang.String, java.lang.String, int, int)
{
int v2, v3, v4, v5;
java.lang.String v0, v1, v6, v7, v8;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: int;
v3 := @parameter3: int;
if v0 != null goto label1;
return null;
label1:
if v1 != null goto label2;
v1 = "";
label2:
v4 = virtualinvoke v0.<java.lang.String: int length()>();
if v2 >= 0 goto label3;
v2 = 0;
label3:
if v2 <= v4 goto label4;
v2 = v4;
label4:
if v3 >= 0 goto label5;
v3 = 0;
label5:
if v3 <= v4 goto label6;
v3 = v4;
label6:
if v2 <= v3 goto label7;
v5 = v2;
v2 = v3;
v3 = v5;
label7:
v6 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(0, v2);
v7 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(v3);
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.String)>(v6, v1, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001\u0001");
return v8;
}
private static transient java.lang.String prependIfMissing(java.lang.String, java.lang.CharSequence, boolean, java.lang.CharSequence[])
{
java.lang.CharSequence v1, v9;
java.lang.CharSequence[] v3;
int v7, v8;
java.lang.String v0, v11, v12;
boolean v10, v2, v4, v5, v6;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.CharSequence;
v2 := @parameter2: boolean;
v3 := @parameter3: java.lang.CharSequence[];
if v0 == null goto label1;
v4 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v1);
if v4 != 0 goto label1;
v5 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)>(v0, v1, v2);
if v5 == 0 goto label2;
label1:
return v0;
label2:
v6 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(java.lang.Object[])>(v3);
if v6 == 0 goto label5;
v7 = lengthof v3;
v8 = 0;
label3:
if v8 >= v7 goto label5;
v9 = v3[v8];
v10 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)>(v0, v9, v2);
if v10 == 0 goto label4;
return v0;
label4:
v8 = v8 + 1;
goto label3;
label5:
v11 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v11, v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001");
return v12;
}
public static transient java.lang.String prependIfMissing(java.lang.String, java.lang.CharSequence, java.lang.CharSequence[])
{
java.lang.CharSequence[] v2;
java.lang.CharSequence v1;
java.lang.String v0, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.CharSequence;
v2 := @parameter2: java.lang.CharSequence[];
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String prependIfMissing(java.lang.String,java.lang.CharSequence,boolean,java.lang.CharSequence[])>(v0, v1, 0, v2);
return v3;
}
public static transient java.lang.String prependIfMissingIgnoreCase(java.lang.String, java.lang.CharSequence, java.lang.CharSequence[])
{
java.lang.CharSequence[] v2;
java.lang.CharSequence v1;
java.lang.String v0, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.CharSequence;
v2 := @parameter2: java.lang.CharSequence[];
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String prependIfMissing(java.lang.String,java.lang.CharSequence,boolean,java.lang.CharSequence[])>(v0, v1, 1, v2);
return v3;
}
public static java.lang.String remove(java.lang.String, char)
{
char v1, v11, v9;
int v10, v3, v4, v6, v7, v8;
char[] v5;
java.lang.String v0, v12;
boolean v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: char;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 != 0 goto label1;
v3 = virtualinvoke v0.<java.lang.String: int indexOf(int)>(v1);
v4 = (int) -1;
if v3 != v4 goto label2;
label1:
return v0;
label2:
v5 = virtualinvoke v0.<java.lang.String: char[] toCharArray()>();
v6 = 0;
v7 = 0;
label3:
v8 = lengthof v5;
if v7 >= v8 goto label5;
v9 = v5[v7];
if v9 == v1 goto label4;
v10 = v6;
v6 = v6 + 1;
v11 = v5[v7];
v5[v10] = v11;
label4:
v7 = v7 + 1;
goto label3;
label5:
v12 = new java.lang.String;
specialinvoke v12.<java.lang.String: void <init>(char[],int,int)>(v5, 0, v6);
return v12;
}
public static java.lang.String remove(java.lang.String, java.lang.String)
{
int v4;
java.lang.String v0, v1, v5;
boolean v2, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 != 0 goto label1;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v1);
if v3 == 0 goto label2;
label1:
return v0;
label2:
v4 = (int) -1;
v5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,int)>(v0, v1, "", v4);
return v5;
}
public static java.lang.String removeAll(java.lang.String, java.lang.String)
{
java.lang.String v0, v1, v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.lang3.RegExUtils: java.lang.String removeAll(java.lang.String,java.lang.String)>(v0, v1);
return v2;
}
public static java.lang.String removeEnd(java.lang.String, java.lang.String)
{
int v5, v6, v7;
java.lang.String v0, v1, v8;
boolean v2, v3, v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 != 0 goto label1;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v1);
if v3 == 0 goto label2;
label1:
return v0;
label2:
v4 = virtualinvoke v0.<java.lang.String: boolean endsWith(java.lang.String)>(v1);
if v4 == 0 goto label3;
v5 = virtualinvoke v0.<java.lang.String: int length()>();
v6 = virtualinvoke v1.<java.lang.String: int length()>();
v7 = v5 - v6;
v8 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(0, v7);
return v8;
label3:
return v0;
}
public static java.lang.String removeEndIgnoreCase(java.lang.String, java.lang.String)
{
int v5, v6, v7;
java.lang.String v0, v1, v8;
boolean v2, v3, v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 != 0 goto label1;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v1);
if v3 == 0 goto label2;
label1:
return v0;
label2:
v4 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(v0, v1);
if v4 == 0 goto label3;
v5 = virtualinvoke v0.<java.lang.String: int length()>();
v6 = virtualinvoke v1.<java.lang.String: int length()>();
v7 = v5 - v6;
v8 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(0, v7);
return v8;
label3:
return v0;
}
public static java.lang.String removeFirst(java.lang.String, java.lang.String)
{
java.lang.String v0, v1, v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceFirst(java.lang.String,java.lang.String,java.lang.String)>(v0, v1, "");
return v2;
}
public static java.lang.String removeIgnoreCase(java.lang.String, java.lang.String)
{
int v2;
java.lang.String v0, v1, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = (int) -1;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceIgnoreCase(java.lang.String,java.lang.String,java.lang.String,int)>(v0, v1, "", v2);
return v3;
}
public static java.lang.String removePattern(java.lang.String, java.lang.String)
{
java.lang.String v0, v1, v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.lang3.RegExUtils: java.lang.String removePattern(java.lang.String,java.lang.String)>(v0, v1);
return v2;
}
public static java.lang.String removeStart(java.lang.String, java.lang.String)
{
int v5;
java.lang.String v0, v1, v6;
boolean v2, v3, v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 != 0 goto label1;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v1);
if v3 == 0 goto label2;
label1:
return v0;
label2:
v4 = virtualinvoke v0.<java.lang.String: boolean startsWith(java.lang.String)>(v1);
if v4 == 0 goto label3;
v5 = virtualinvoke v1.<java.lang.String: int length()>();
v6 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(v5);
return v6;
label3:
return v0;
}
public static java.lang.String removeStartIgnoreCase(java.lang.String, java.lang.String)
{
int v3;
java.lang.String v0, v1, v4;
boolean v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
if v0 == null goto label1;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWithIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(v0, v1);
if v2 == 0 goto label1;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: int length(java.lang.CharSequence)>(v1);
v4 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(v3);
return v4;
label1:
return v0;
}
public static java.lang.String repeat(char, int)
{
int v1;
char[] v2;
char v0;
java.lang.String v3;
v0 := @parameter0: char;
v1 := @parameter1: int;
if v1 > 0 goto label1;
return "";
label1:
v2 = newarray (char)[v1];
staticinvoke <java.util.Arrays: void fill(char[],char)>(v2, v0);
v3 = new java.lang.String;
specialinvoke v3.<java.lang.String: void <init>(char[])>(v2);
return v3;
}
public static java.lang.String repeat(java.lang.String, int)
{
int v1, v11, v12, v13, v14, v17, v2, v5;
java.lang.String v0, v15, v18, v4, v7;
char v3, v6, v8, v9;
char[] v10;
java.lang.StringBuilder v16;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
if v0 != null goto label01;
return null;
label01:
if v1 > 0 goto label02;
return "";
label02:
v2 = virtualinvoke v0.<java.lang.String: int length()>();
if v1 == 1 goto label03;
if v2 != 0 goto label04;
label03:
return v0;
label04:
if v2 != 1 goto label05;
if v1 > 8192 goto label05;
v3 = virtualinvoke v0.<java.lang.String: char charAt(int)>(0);
v4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String repeat(char,int)>(v3, v1);
return v4;
label05:
v5 = v2 * v1;
lookupswitch(v2)
{
case 1: goto label06;
case 2: goto label07;
default: goto label10;
};
label06:
v6 = virtualinvoke v0.<java.lang.String: char charAt(int)>(0);
v7 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String repeat(char,int)>(v6, v1);
return v7;
label07:
v8 = virtualinvoke v0.<java.lang.String: char charAt(int)>(0);
v9 = virtualinvoke v0.<java.lang.String: char charAt(int)>(1);
v10 = newarray (char)[v5];
v11 = v1 * 2;
v12 = v11 - 2;
label08:
if v12 < 0 goto label09;
v10[v12] = v8;
v13 = v12 + 1;
v10[v13] = v9;
v14 = v12 - 1;
v12 = v14 - 1;
goto label08;
label09:
v15 = new java.lang.String;
specialinvoke v15.<java.lang.String: void <init>(char[])>(v10);
return v15;
label10:
v16 = new java.lang.StringBuilder;
specialinvoke v16.<java.lang.StringBuilder: void <init>(int)>(v5);
v17 = 0;
label11:
if v17 >= v1 goto label12;
virtualinvoke v16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v0);
v17 = v17 + 1;
goto label11;
label12:
v18 = virtualinvoke v16.<java.lang.StringBuilder: java.lang.String toString()>();
return v18;
}
public static java.lang.String repeat(java.lang.String, java.lang.String, int)
{
int v2;
java.lang.String v0, v1, v3, v4, v5, v6;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: int;
if v0 == null goto label1;
if v1 != null goto label2;
label1:
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String repeat(java.lang.String,int)>(v0, v2);
return v3;
label2:
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v0, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001");
v5 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String repeat(java.lang.String,int)>(v4, v2);
v6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String removeEnd(java.lang.String,java.lang.String)>(v5, v1);
return v6;
}
public static java.lang.String replace(java.lang.String, java.lang.String, java.lang.String)
{
int v3;
java.lang.String v0, v1, v2, v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.String;
v3 = (int) -1;
v4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,int)>(v0, v1, v2, v3);
return v4;
}
public static java.lang.String replace(java.lang.String, java.lang.String, java.lang.String, int)
{
int v3;
java.lang.String v0, v1, v2, v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.String;
v3 := @parameter3: int;
v4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,int,boolean)>(v0, v1, v2, v3, 0);
return v4;
}
private static java.lang.String replace(java.lang.String, java.lang.String, java.lang.String, int, boolean)
{
int v10, v11, v12, v13, v14, v15, v16, v18, v19, v20, v22, v23, v3, v7, v8, v9;
java.lang.String v0, v1, v2, v24;
boolean v4, v5, v6;
java.lang.StringBuilder v17, v21;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.String;
v3 := @parameter3: int;
v4 := @parameter4: boolean;
v5 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v5 != 0 goto label01;
v6 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v1);
if v6 != 0 goto label01;
if v2 == null goto label01;
if v3 != 0 goto label02;
label01:
return v0;
label02:
if v4 == 0 goto label03;
v1 = virtualinvoke v1.<java.lang.String: java.lang.String toLowerCase()>();
label03:
v7 = 0;
if v4 == 0 goto label04;
v8 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)>(v0, v1, 0);
goto label05;
label04:
v8 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int)>(v0, v1, 0);
label05:
v9 = v8;
v10 = (int) -1;
if v8 != v10 goto label06;
return v0;
label06:
v11 = virtualinvoke v1.<java.lang.String: int length()>();
v12 = virtualinvoke v2.<java.lang.String: int length()>();
v13 = v12 - v11;
v14 = staticinvoke <java.lang.Math: int max(int,int)>(v13, 0);
if v3 >= 0 goto label07;
v15 = 16;
goto label08;
label07:
v15 = staticinvoke <java.lang.Math: int min(int,int)>(v3, 64);
label08:
v16 = v14 * v15;
v17 = new java.lang.StringBuilder;
v18 = virtualinvoke v0.<java.lang.String: int length()>();
v19 = v18 + v16;
specialinvoke v17.<java.lang.StringBuilder: void <init>(int)>(v19);
label09:
v20 = (int) -1;
if v9 == v20 goto label12;
v21 = virtualinvoke v17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(v0, v7, v9);
virtualinvoke v21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v2);
v7 = v9 + v11;
v3 = v3 - 1;
if v3 == 0 goto label12;
if v4 == 0 goto label10;
v22 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOfIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,int)>(v0, v1, v7);
goto label11;
label10:
v22 = staticinvoke <org.apache.commons.lang3.StringUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int)>(v0, v1, v7);
label11:
v9 = v22;
goto label09;
label12:
v23 = virtualinvoke v0.<java.lang.String: int length()>();
virtualinvoke v17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(v0, v7, v23);
v24 = virtualinvoke v17.<java.lang.StringBuilder: java.lang.String toString()>();
return v24;
}
public static java.lang.String replaceAll(java.lang.String, java.lang.String, java.lang.String)
{
java.lang.String v0, v1, v2, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.String;
v3 = staticinvoke <org.apache.commons.lang3.RegExUtils: java.lang.String replaceAll(java.lang.String,java.lang.String,java.lang.String)>(v0, v1, v2);
return v3;
}
public static java.lang.String replaceChars(java.lang.String, char, char)
{
char v1, v2;
java.lang.String v0, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: char;
v2 := @parameter2: char;
if v0 != null goto label1;
return null;
label1:
v3 = virtualinvoke v0.<java.lang.String: java.lang.String replace(char,char)>(v1, v2);
return v3;
}
public static java.lang.String replaceChars(java.lang.String, java.lang.String, java.lang.String)
{
char v10, v12;
int v11, v6, v7, v9;
java.lang.StringBuilder v8;
java.lang.String v0, v1, v13, v2;
boolean v3, v4, v5;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.String;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v3 != 0 goto label1;
v4 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v1);
if v4 == 0 goto label2;
label1:
return v0;
label2:
if v2 != null goto label3;
v2 = "";
label3:
v5 = 0;
v6 = virtualinvoke v2.<java.lang.String: int length()>();
v7 = virtualinvoke v0.<java.lang.String: int length()>();
v8 = new java.lang.StringBuilder;
specialinvoke v8.<java.lang.StringBuilder: void <init>(int)>(v7);
v9 = 0;
label4:
if v9 >= v7 goto label7;
v10 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v9);
v11 = virtualinvoke v1.<java.lang.String: int indexOf(int)>(v10);
if v11 < 0 goto label5;
v5 = 1;
if v11 >= v6 goto label6;
v12 = virtualinvoke v2.<java.lang.String: char charAt(int)>(v11);
virtualinvoke v8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v12);
goto label6;
label5:
virtualinvoke v8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v10);
label6:
v9 = v9 + 1;
goto label4;
label7:
if v5 == 0 goto label8;
v13 = virtualinvoke v8.<java.lang.StringBuilder: java.lang.String toString()>();
return v13;
label8:
return v0;
}
public static java.lang.String replaceEach(java.lang.String, java.lang.String[], java.lang.String[])
{
java.lang.String[] v1, v2;
java.lang.String v0, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String[];
v2 := @parameter2: java.lang.String[];
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceEach(java.lang.String,java.lang.String[],java.lang.String[],boolean,int)>(v0, v1, v2, 0, 0);
return v3;
}
private static java.lang.String replaceEach(java.lang.String, java.lang.String[], java.lang.String[], boolean, int)
{
java.lang.StringBuilder v50;
java.lang.String v0, v19, v27, v29, v30, v39, v40, v41, v43, v56, v57, v63, v64, v66, v67, v74, v76;
boolean[] v20;
java.lang.IllegalStateException v10;
boolean v11, v12, v13, v14, v26, v28, v3, v62, v65, v9;
java.util.List v6, v8;
java.lang.String[] v1, v2;
java.util.HashSet v5, v7;
int v15, v16, v17, v21, v22, v23, v24, v25, v31, v32, v33, v34, v35, v36, v37, v38, v4, v42, v44, v45, v46, v47, v48, v49, v51, v52, v53, v54, v58, v59, v60, v61, v68, v69, v70, v71, v72, v75;
char v55, v73;
java.lang.IllegalArgumentException v18;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String[];
v2 := @parameter2: java.lang.String[];
v3 := @parameter3: boolean;
v4 := @parameter4: int;
if v4 >= 0 goto label01;
v5 = new java.util.HashSet;
v6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
specialinvoke v5.<java.util.HashSet: void <init>(java.util.Collection)>(v6);
v7 = new java.util.HashSet;
v8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v2);
specialinvoke v7.<java.util.HashSet: void <init>(java.util.Collection)>(v8);
interfaceinvoke v5.<java.util.Set: boolean retainAll(java.util.Collection)>(v7);
v9 = interfaceinvoke v5.<java.util.Set: boolean isEmpty()>();
if v9 != 0 goto label01;
v10 = new java.lang.IllegalStateException;
specialinvoke v10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Aborting to protect against StackOverflowError - output of one loop is the input of another");
throw v10;
label01:
v11 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v11 != 0 goto label02;
v12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(v1);
if v12 != 0 goto label02;
v13 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(v2);
if v13 != 0 goto label02;
v14 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(java.lang.Object[])>(v1);
if v14 == 0 goto label03;
v15 = (int) -1;
if v4 != v15 goto label03;
label02:
return v0;
label03:
v16 = lengthof v1;
v17 = lengthof v2;
if v16 == v17 goto label04;
v18 = new java.lang.IllegalArgumentException;
v19 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v16, v17) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Search and Replace array lengths don\'t match: \u0001 vs \u0001");
specialinvoke v18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v19);
throw v18;
label04:
v20 = newarray (boolean)[v16];
v21 = (int) -1;
v22 = v21;
v23 = (int) -1;
v24 = v23;
v25 = 0;
label05:
if v25 >= v16 goto label09;
v26 = v20[v25];
if v26 != 0 goto label08;
v27 = v1[v25];
v28 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v27);
if v28 != 0 goto label08;
v29 = v2[v25];
if v29 == null goto label08;
v30 = v1[v25];
v31 = virtualinvoke v0.<java.lang.String: int indexOf(java.lang.String)>(v30);
v32 = (int) -1;
if v31 != v32 goto label06;
v20[v25] = 1;
goto label08;
label06:
v33 = (int) -1;
if v22 == v33 goto label07;
if v31 >= v22 goto label08;
label07:
v22 = v31;
v24 = v25;
label08:
v25 = v25 + 1;
goto label05;
label09:
v34 = (int) -1;
if v22 != v34 goto label10;
return v0;
label10:
v35 = 0;
v36 = 0;
v37 = 0;
label11:
v38 = lengthof v1;
if v37 >= v38 goto label13;
v39 = v1[v37];
if v39 == null goto label12;
v40 = v2[v37];
if v40 == null goto label12;
v41 = v2[v37];
v42 = virtualinvoke v41.<java.lang.String: int length()>();
v43 = v1[v37];
v44 = virtualinvoke v43.<java.lang.String: int length()>();
v45 = v42 - v44;
if v45 <= 0 goto label12;
v46 = 3 * v45;
v36 = v36 + v46;
label12:
v37 = v37 + 1;
goto label11;
label13:
v47 = virtualinvoke v0.<java.lang.String: int length()>();
v48 = v47 / 5;
v49 = staticinvoke <java.lang.Math: int min(int,int)>(v36, v48);
v50 = new java.lang.StringBuilder;
v51 = virtualinvoke v0.<java.lang.String: int length()>();
v52 = v51 + v49;
specialinvoke v50.<java.lang.StringBuilder: void <init>(int)>(v52);
label14:
v53 = (int) -1;
if v22 == v53 goto label21;
v54 = v35;
label15:
if v54 >= v22 goto label16;
v55 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v54);
virtualinvoke v50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v55);
v54 = v54 + 1;
goto label15;
label16:
v56 = v2[v24];
virtualinvoke v50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v56);
v57 = v1[v24];
v58 = virtualinvoke v57.<java.lang.String: int length()>();
v35 = v22 + v58;
v59 = (int) -1;
v22 = v59;
v60 = (int) -1;
v24 = v60;
v61 = 0;
label17:
if v61 >= v16 goto label14;
v62 = v20[v61];
if v62 != 0 goto label20;
v63 = v1[v61];
if v63 == null goto label20;
v64 = v1[v61];
v65 = virtualinvoke v64.<java.lang.String: boolean isEmpty()>();
if v65 != 0 goto label20;
v66 = v2[v61];
if v66 == null goto label20;
v67 = v1[v61];
v68 = virtualinvoke v0.<java.lang.String: int indexOf(java.lang.String,int)>(v67, v35);
v69 = (int) -1;
if v68 != v69 goto label18;
v20[v61] = 1;
goto label20;
label18:
v70 = (int) -1;
if v22 == v70 goto label19;
if v68 >= v22 goto label20;
label19:
v22 = v68;
v24 = v61;
label20:
v61 = v61 + 1;
goto label17;
label21:
v71 = virtualinvoke v0.<java.lang.String: int length()>();
v72 = v35;
label22:
if v72 >= v71 goto label23;
v73 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v72);
virtualinvoke v50.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v73);
v72 = v72 + 1;
goto label22;
label23:
v74 = virtualinvoke v50.<java.lang.StringBuilder: java.lang.String toString()>();
if v3 != 0 goto label24;
return v74;
label24:
v75 = v4 - 1;
v76 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceEach(java.lang.String,java.lang.String[],java.lang.String[],boolean,int)>(v74, v1, v2, v3, v75);
return v76;
}
public static java.lang.String replaceEachRepeatedly(java.lang.String, java.lang.String[], java.lang.String[])
{
int v3;
java.lang.String[] v1, v2;
java.lang.String v0, v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String[];
v2 := @parameter2: java.lang.String[];
if v1 != null goto label1;
v3 = 0;
goto label2;
label1:
v3 = lengthof v1;
label2:
v4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceEach(java.lang.String,java.lang.String[],java.lang.String[],boolean,int)>(v0, v1, v2, 1, v3);
return v4;
}
public static java.lang.String replaceFirst(java.lang.String, java.lang.String, java.lang.String)
{
java.lang.String v0, v1, v2, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.String;
v3 = staticinvoke <org.apache.commons.lang3.RegExUtils: java.lang.String replaceFirst(java.lang.String,java.lang.String,java.lang.String)>(v0, v1, v2);
return v3;
}
public static java.lang.String replaceIgnoreCase(java.lang.String, java.lang.String, java.lang.String)
{
int v3;
java.lang.String v0, v1, v2, v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.String;
v3 = (int) -1;
v4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceIgnoreCase(java.lang.String,java.lang.String,java.lang.String,int)>(v0, v1, v2, v3);
return v4;
}
public static java.lang.String replaceIgnoreCase(java.lang.String, java.lang.String, java.lang.String, int)
{
int v3;
java.lang.String v0, v1, v2, v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.String;
v3 := @parameter3: int;
v4 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,int,boolean)>(v0, v1, v2, v3, 1);
return v4;
}
public static java.lang.String replaceOnce(java.lang.String, java.lang.String, java.lang.String)
{
java.lang.String v0, v1, v2, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.String;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,int)>(v0, v1, v2, 1);
return v3;
}
public static java.lang.String replaceOnceIgnoreCase(java.lang.String, java.lang.String, java.lang.String)
{
java.lang.String v0, v1, v2, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.String;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replaceIgnoreCase(java.lang.String,java.lang.String,java.lang.String,int)>(v0, v1, v2, 1);
return v3;
}
public static java.lang.String replacePattern(java.lang.String, java.lang.String, java.lang.String)
{
java.lang.String v0, v1, v2, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.String;
v3 = staticinvoke <org.apache.commons.lang3.RegExUtils: java.lang.String replacePattern(java.lang.String,java.lang.String,java.lang.String)>(v0, v1, v2);
return v3;
}
public static java.lang.String reverse(java.lang.String)
{
java.lang.StringBuilder v1, v2;
java.lang.String v0, v3;
v0 := @parameter0: java.lang.String;
if v0 != null goto label1;
return null;
label1:
v1 = new java.lang.StringBuilder;
specialinvoke v1.<java.lang.StringBuilder: void <init>(java.lang.String)>(v0);
v2 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder reverse()>();
v3 = virtualinvoke v2.<java.lang.StringBuilder: java.lang.String toString()>();
return v3;
}
public static java.lang.String reverseDelimited(java.lang.String, char)
{
char v1;
java.lang.String[] v2;
java.lang.String v0, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: char;
if v0 != null goto label1;
return null;
label1:
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] split(java.lang.String,char)>(v0, v1);
staticinvoke <org.apache.commons.lang3.ArrayUtils: void reverse(java.lang.Object[])>(v2);
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String join(java.lang.Object[],char)>(v2, v1);
return v3;
}
public static java.lang.String right(java.lang.String, int)
{
int v1, v2, v3, v4;
java.lang.String v0, v5;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
if v0 != null goto label1;
return null;
label1:
if v1 >= 0 goto label2;
return "";
label2:
v2 = virtualinvoke v0.<java.lang.String: int length()>();
if v2 > v1 goto label3;
return v0;
label3:
v3 = virtualinvoke v0.<java.lang.String: int length()>();
v4 = v3 - v1;
v5 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(v4);
return v5;
}
public static java.lang.String rightPad(java.lang.String, int)
{
int v1;
java.lang.String v0, v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int,char)>(v0, v1, 32);
return v2;
}
public static java.lang.String rightPad(java.lang.String, int, char)
{
char v2;
int v1, v3, v4;
java.lang.String v0, v5, v6, v7, v8;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 := @parameter2: char;
if v0 != null goto label1;
return null;
label1:
v3 = virtualinvoke v0.<java.lang.String: int length()>();
v4 = v1 - v3;
if v4 > 0 goto label2;
return v0;
label2:
if v4 <= 8192 goto label3;
v5 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(v2);
v6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int,java.lang.String)>(v0, v1, v5);
return v6;
label3:
v7 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String repeat(char,int)>(v2, v4);
v8 = virtualinvoke v0.<java.lang.String: java.lang.String concat(java.lang.String)>(v7);
return v8;
}
public static java.lang.String rightPad(java.lang.String, int, java.lang.String)
{
int v1, v14, v15, v4, v5, v6;
java.lang.String v0, v10, v11, v17, v18, v2, v8, v9;
boolean v3;
char v16, v7;
char[] v12, v13;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 := @parameter2: java.lang.String;
if v0 != null goto label1;
return null;
label1:
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v2);
if v3 == 0 goto label2;
v2 = " ";
label2:
v4 = virtualinvoke v2.<java.lang.String: int length()>();
v5 = virtualinvoke v0.<java.lang.String: int length()>();
v6 = v1 - v5;
if v6 > 0 goto label3;
return v0;
label3:
if v4 != 1 goto label4;
if v6 > 8192 goto label4;
v7 = virtualinvoke v2.<java.lang.String: char charAt(int)>(0);
v8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String rightPad(java.lang.String,int,char)>(v0, v1, v7);
return v8;
label4:
if v6 != v4 goto label5;
v9 = virtualinvoke v0.<java.lang.String: java.lang.String concat(java.lang.String)>(v2);
return v9;
label5:
if v6 >= v4 goto label6;
v10 = virtualinvoke v2.<java.lang.String: java.lang.String substring(int,int)>(0, v6);
v11 = virtualinvoke v0.<java.lang.String: java.lang.String concat(java.lang.String)>(v10);
return v11;
label6:
v12 = newarray (char)[v6];
v13 = virtualinvoke v2.<java.lang.String: char[] toCharArray()>();
v14 = 0;
label7:
if v14 >= v6 goto label8;
v15 = v14 % v4;
v16 = v13[v15];
v12[v14] = v16;
v14 = v14 + 1;
goto label7;
label8:
v17 = new java.lang.String;
specialinvoke v17.<java.lang.String: void <init>(char[])>(v12);
v18 = virtualinvoke v0.<java.lang.String: java.lang.String concat(java.lang.String)>(v17);
return v18;
}
public static java.lang.String rotate(java.lang.String, int)
{
int v1, v2, v3, v5, v6;
java.lang.StringBuilder v4;
java.lang.String v0, v7, v8, v9;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
if v0 != null goto label1;
return null;
label1:
v2 = virtualinvoke v0.<java.lang.String: int length()>();
if v1 == 0 goto label2;
if v2 == 0 goto label2;
v3 = v1 % v2;
if v3 != 0 goto label3;
label2:
return v0;
label3:
v4 = new java.lang.StringBuilder;
specialinvoke v4.<java.lang.StringBuilder: void <init>(int)>(v2);
v5 = v1 % v2;
v6 = neg v5;
v7 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String substring(java.lang.String,int)>(v0, v6);
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v7);
v8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String substring(java.lang.String,int,int)>(v0, 0, v6);
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v8);
v9 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.String toString()>();
return v9;
}
public static java.lang.String[] split(java.lang.String)
{
int v1;
java.lang.String[] v2;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = (int) -1;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String,int)>(v0, null, v1);
return v2;
}
public static java.lang.String[] split(java.lang.String, char)
{
char v1;
java.lang.String[] v2;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: char;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitWorker(java.lang.String,char,boolean)>(v0, v1, 0);
return v2;
}
public static java.lang.String[] split(java.lang.String, java.lang.String)
{
int v2;
java.lang.String[] v3;
java.lang.String v0, v1;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = (int) -1;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitWorker(java.lang.String,java.lang.String,int,boolean)>(v0, v1, v2, 0);
return v3;
}
public static java.lang.String[] split(java.lang.String, java.lang.String, int)
{
int v2;
java.lang.String[] v3;
java.lang.String v0, v1;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitWorker(java.lang.String,java.lang.String,int,boolean)>(v0, v1, v2, 0);
return v3;
}
public static java.lang.String[] splitByCharacterType(java.lang.String)
{
java.lang.String[] v1;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByCharacterType(java.lang.String,boolean)>(v0, 0);
return v1;
}
private static java.lang.String[] splitByCharacterType(java.lang.String, boolean)
{
java.lang.Object[] v22;
java.lang.String[] v21, v3;
java.util.ArrayList v5;
int v10, v12, v13, v15, v17, v19, v20, v6, v8, v9;
java.lang.String v0, v14, v16, v18;
boolean v1, v2;
char v11, v7;
char[] v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: boolean;
if v0 != null goto label1;
return null;
label1:
v2 = virtualinvoke v0.<java.lang.String: boolean isEmpty()>();
if v2 == 0 goto label2;
v3 = <org.apache.commons.lang3.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;
return v3;
label2:
v4 = virtualinvoke v0.<java.lang.String: char[] toCharArray()>();
v5 = new java.util.ArrayList;
specialinvoke v5.<java.util.ArrayList: void <init>()>();
v6 = 0;
v7 = v4[0];
v8 = staticinvoke <java.lang.Character: int getType(char)>(v7);
v9 = 1;
label3:
v10 = lengthof v4;
if v9 >= v10 goto label7;
v11 = v4[v9];
v12 = staticinvoke <java.lang.Character: int getType(char)>(v11);
if v12 == v8 goto label6;
if v1 == 0 goto label4;
if v12 != 2 goto label4;
if v8 != 1 goto label4;
v13 = v9 - 1;
if v13 == v6 goto label5;
v14 = new java.lang.String;
v15 = v13 - v6;
specialinvoke v14.<java.lang.String: void <init>(char[],int,int)>(v4, v6, v15);
interfaceinvoke v5.<java.util.List: boolean add(java.lang.Object)>(v14);
v6 = v13;
goto label5;
label4:
v16 = new java.lang.String;
v17 = v9 - v6;
specialinvoke v16.<java.lang.String: void <init>(char[],int,int)>(v4, v6, v17);
interfaceinvoke v5.<java.util.List: boolean add(java.lang.Object)>(v16);
v6 = v9;
label5:
v8 = v12;
label6:
v9 = v9 + 1;
goto label3;
label7:
v18 = new java.lang.String;
v19 = lengthof v4;
v20 = v19 - v6;
specialinvoke v18.<java.lang.String: void <init>(char[],int,int)>(v4, v6, v20);
interfaceinvoke v5.<java.util.List: boolean add(java.lang.Object)>(v18);
v21 = <org.apache.commons.lang3.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;
v22 = interfaceinvoke v5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v21);
return v22;
}
public static java.lang.String[] splitByCharacterTypeCamelCase(java.lang.String)
{
java.lang.String[] v1;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByCharacterType(java.lang.String,boolean)>(v0, 1);
return v1;
}
public static java.lang.String[] splitByWholeSeparator(java.lang.String, java.lang.String)
{
int v2;
java.lang.String[] v3;
java.lang.String v0, v1;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = (int) -1;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByWholeSeparatorWorker(java.lang.String,java.lang.String,int,boolean)>(v0, v1, v2, 0);
return v3;
}
public static java.lang.String[] splitByWholeSeparator(java.lang.String, java.lang.String, int)
{
int v2;
java.lang.String[] v3;
java.lang.String v0, v1;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByWholeSeparatorWorker(java.lang.String,java.lang.String,int,boolean)>(v0, v1, v2, 0);
return v3;
}
public static java.lang.String[] splitByWholeSeparatorPreserveAllTokens(java.lang.String, java.lang.String)
{
int v2;
java.lang.String[] v3;
java.lang.String v0, v1;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = (int) -1;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByWholeSeparatorWorker(java.lang.String,java.lang.String,int,boolean)>(v0, v1, v2, 1);
return v3;
}
public static java.lang.String[] splitByWholeSeparatorPreserveAllTokens(java.lang.String, java.lang.String, int)
{
int v2;
java.lang.String[] v3;
java.lang.String v0, v1;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitByWholeSeparatorWorker(java.lang.String,java.lang.String,int,boolean)>(v0, v1, v2, 1);
return v3;
}
private static java.lang.String[] splitByWholeSeparatorWorker(java.lang.String, java.lang.String, int, boolean)
{
java.lang.Object[] v20;
java.lang.String[] v19, v5, v8;
java.util.ArrayList v10;
int v11, v12, v13, v14, v2, v4, v9;
java.lang.String v0, v1, v15, v16, v17, v18, v6;
boolean v3, v7;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: int;
v3 := @parameter3: boolean;
if v0 != null goto label01;
return null;
label01:
v4 = virtualinvoke v0.<java.lang.String: int length()>();
if v4 != 0 goto label02;
v5 = <org.apache.commons.lang3.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;
return v5;
label02:
if v1 == null goto label03;
v6 = "";
v7 = virtualinvoke v6.<java.lang.String: boolean equals(java.lang.Object)>(v1);
if v7 == 0 goto label04;
label03:
v8 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitWorker(java.lang.String,java.lang.String,int,boolean)>(v0, null, v2, v3);
return v8;
label04:
v9 = virtualinvoke v1.<java.lang.String: int length()>();
v10 = new java.util.ArrayList;
specialinvoke v10.<java.util.ArrayList: void <init>()>();
v11 = 0;
v12 = 0;
v13 = 0;
label05:
if v13 >= v4 goto label11;
v13 = virtualinvoke v0.<java.lang.String: int indexOf(java.lang.String,int)>(v1, v12);
v14 = (int) -1;
if v13 <= v14 goto label10;
if v13 <= v12 goto label07;
v11 = v11 + 1;
if v11 != v2 goto label06;
v13 = v4;
v15 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(v12);
virtualinvoke v10.<java.util.ArrayList: boolean add(java.lang.Object)>(v15);
goto label05;
label06:
v16 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(v12, v13);
virtualinvoke v10.<java.util.ArrayList: boolean add(java.lang.Object)>(v16);
v12 = v13 + v9;
goto label05;
label07:
if v3 == 0 goto label09;
v11 = v11 + 1;
if v11 != v2 goto label08;
v13 = v4;
v17 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(v12);
virtualinvoke v10.<java.util.ArrayList: boolean add(java.lang.Object)>(v17);
goto label09;
label08:
virtualinvoke v10.<java.util.ArrayList: boolean add(java.lang.Object)>("");
label09:
v12 = v13 + v9;
goto label05;
label10:
v18 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(v12);
virtualinvoke v10.<java.util.ArrayList: boolean add(java.lang.Object)>(v18);
v13 = v4;
goto label05;
label11:
v19 = <org.apache.commons.lang3.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;
v20 = virtualinvoke v10.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(v19);
return v20;
}
public static java.lang.String[] splitPreserveAllTokens(java.lang.String)
{
int v1;
java.lang.String[] v2;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = (int) -1;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitWorker(java.lang.String,java.lang.String,int,boolean)>(v0, null, v1, 1);
return v2;
}
public static java.lang.String[] splitPreserveAllTokens(java.lang.String, char)
{
char v1;
java.lang.String[] v2;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: char;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitWorker(java.lang.String,char,boolean)>(v0, v1, 1);
return v2;
}
public static java.lang.String[] splitPreserveAllTokens(java.lang.String, java.lang.String)
{
int v2;
java.lang.String[] v3;
java.lang.String v0, v1;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = (int) -1;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitWorker(java.lang.String,java.lang.String,int,boolean)>(v0, v1, v2, 1);
return v3;
}
public static java.lang.String[] splitPreserveAllTokens(java.lang.String, java.lang.String, int)
{
int v2;
java.lang.String[] v3;
java.lang.String v0, v1;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: int;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] splitWorker(java.lang.String,java.lang.String,int,boolean)>(v0, v1, v2, 1);
return v3;
}
private static java.lang.String[] splitWorker(java.lang.String, char, boolean)
{
java.lang.Object[] v14;
char v1, v10;
java.lang.String[] v13, v4;
java.util.ArrayList v5;
int v3, v6, v7;
java.lang.String v0, v11, v12;
boolean v2, v8, v9;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: char;
v2 := @parameter2: boolean;
if v0 != null goto label1;
return null;
label1:
v3 = virtualinvoke v0.<java.lang.String: int length()>();
if v3 != 0 goto label2;
v4 = <org.apache.commons.lang3.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;
return v4;
label2:
v5 = new java.util.ArrayList;
specialinvoke v5.<java.util.ArrayList: void <init>()>();
v6 = 0;
v7 = 0;
v8 = 0;
v9 = 0;
label3:
if v6 >= v3 goto label7;
v10 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v6);
if v10 != v1 goto label6;
if v8 != 0 goto label4;
if v2 == 0 goto label5;
label4:
v11 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(v7, v6);
interfaceinvoke v5.<java.util.List: boolean add(java.lang.Object)>(v11);
v8 = 0;
v9 = 1;
label5:
v6 = v6 + 1;
v7 = v6;
goto label3;
label6:
v9 = 0;
v8 = 1;
v6 = v6 + 1;
goto label3;
label7:
if v8 != 0 goto label8;
if v2 == 0 goto label9;
if v9 == 0 goto label9;
label8:
v12 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(v7, v6);
interfaceinvoke v5.<java.util.List: boolean add(java.lang.Object)>(v12);
label9:
v13 = <org.apache.commons.lang3.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;
v14 = interfaceinvoke v5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v13);
return v14;
}
private static java.lang.String[] splitWorker(java.lang.String, java.lang.String, int, boolean)
{
java.lang.Object[] v27;
java.lang.String[] v26, v5;
java.util.ArrayList v6;
int v14, v16, v19, v2, v22, v23, v4, v7, v8, v9;
java.lang.String v0, v1, v15, v20, v24, v25;
boolean v10, v11, v13, v3;
char v12, v17, v18, v21;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: int;
v3 := @parameter3: boolean;
if v0 != null goto label01;
return null;
label01:
v4 = virtualinvoke v0.<java.lang.String: int length()>();
if v4 != 0 goto label02;
v5 = <org.apache.commons.lang3.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;
return v5;
label02:
v6 = new java.util.ArrayList;
specialinvoke v6.<java.util.ArrayList: void <init>()>();
v7 = 1;
v8 = 0;
v9 = 0;
v10 = 0;
v11 = 0;
if v1 != null goto label08;
label03:
if v8 >= v4 goto label19;
v12 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v8);
v13 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(v12);
if v13 == 0 goto label07;
if v10 != 0 goto label04;
if v3 == 0 goto label06;
label04:
v11 = 1;
v14 = v7;
v7 = v7 + 1;
if v14 != v2 goto label05;
v8 = v4;
v11 = 0;
label05:
v15 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(v9, v8);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v15);
v10 = 0;
label06:
v8 = v8 + 1;
v9 = v8;
goto label03;
label07:
v11 = 0;
v10 = 1;
v8 = v8 + 1;
goto label03;
label08:
v16 = virtualinvoke v1.<java.lang.String: int length()>();
if v16 != 1 goto label14;
v17 = virtualinvoke v1.<java.lang.String: char charAt(int)>(0);
label09:
if v8 >= v4 goto label19;
v18 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v8);
if v18 != v17 goto label13;
if v10 != 0 goto label10;
if v3 == 0 goto label12;
label10:
v11 = 1;
v19 = v7;
v7 = v7 + 1;
if v19 != v2 goto label11;
v8 = v4;
v11 = 0;
label11:
v20 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(v9, v8);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v20);
v10 = 0;
label12:
v8 = v8 + 1;
v9 = v8;
goto label09;
label13:
v11 = 0;
v10 = 1;
v8 = v8 + 1;
goto label09;
label14:
if v8 >= v4 goto label19;
v21 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v8);
v22 = virtualinvoke v1.<java.lang.String: int indexOf(int)>(v21);
if v22 < 0 goto label18;
if v10 != 0 goto label15;
if v3 == 0 goto label17;
label15:
v11 = 1;
v23 = v7;
v7 = v7 + 1;
if v23 != v2 goto label16;
v8 = v4;
v11 = 0;
label16:
v24 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(v9, v8);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v24);
v10 = 0;
label17:
v8 = v8 + 1;
v9 = v8;
goto label14;
label18:
v11 = 0;
v10 = 1;
v8 = v8 + 1;
goto label14;
label19:
if v10 != 0 goto label20;
if v3 == 0 goto label21;
if v11 == 0 goto label21;
label20:
v25 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(v9, v8);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v25);
label21:
v26 = <org.apache.commons.lang3.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;
v27 = interfaceinvoke v6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v26);
return v27;
}
public static boolean startsWith(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v0, v1;
boolean v2;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)>(v0, v1, 0);
return v2;
}
private static boolean startsWith(java.lang.CharSequence, java.lang.CharSequence, boolean)
{
java.lang.CharSequence v0, v1;
int v4, v5;
boolean v2, v3, v6;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
v2 := @parameter2: boolean;
if v0 == null goto label1;
if v1 != null goto label4;
label1:
if v0 != v1 goto label2;
v3 = 1;
goto label3;
label2:
v3 = 0;
label3:
return v3;
label4:
v4 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
v5 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
if v4 <= v5 goto label5;
return 0;
label5:
v6 = staticinvoke <org.apache.commons.lang3.CharSequenceUtils: boolean regionMatches(java.lang.CharSequence,boolean,int,java.lang.CharSequence,int,int)>(v0, v2, 0, v1, 0, v4);
return v6;
}
public static transient boolean startsWithAny(java.lang.CharSequence, java.lang.CharSequence[])
{
java.lang.CharSequence v0, v6;
java.lang.CharSequence[] v1;
int v4, v5;
boolean v2, v3, v7;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence[];
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 != 0 goto label1;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(v1);
if v3 == 0 goto label2;
label1:
return 0;
label2:
v4 = lengthof v1;
v5 = 0;
label3:
if v5 >= v4 goto label5;
v6 = v1[v5];
v7 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence)>(v0, v6);
if v7 == 0 goto label4;
return 1;
label4:
v5 = v5 + 1;
goto label3;
label5:
return 0;
}
public static boolean startsWithIgnoreCase(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v0, v1;
boolean v2;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)>(v0, v1, 1);
return v2;
}
public static java.lang.String strip(java.lang.String)
{
java.lang.String v0, v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String strip(java.lang.String,java.lang.String)>(v0, null);
return v1;
}
public static java.lang.String strip(java.lang.String, java.lang.String)
{
java.lang.String v0, v1, v2, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String stripStart(java.lang.String,java.lang.String)>(v0, v1);
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String stripEnd(java.lang.String,java.lang.String)>(v2, v1);
return v3;
}
public static java.lang.String stripAccents(java.lang.String)
{
java.util.regex.Matcher v5;
java.text.Normalizer$Form v2;
java.lang.StringBuilder v1;
java.lang.String v0, v3, v6;
java.util.regex.Pattern v4;
v0 := @parameter0: java.lang.String;
if v0 != null goto label1;
return null;
label1:
v1 = new java.lang.StringBuilder;
v2 = <java.text.Normalizer$Form: java.text.Normalizer$Form NFD>;
v3 = staticinvoke <java.text.Normalizer: java.lang.String normalize(java.lang.CharSequence,java.text.Normalizer$Form)>(v0, v2);
specialinvoke v1.<java.lang.StringBuilder: void <init>(java.lang.String)>(v3);
staticinvoke <org.apache.commons.lang3.StringUtils: void convertRemainingAccentCharacters(java.lang.StringBuilder)>(v1);
v4 = <org.apache.commons.lang3.StringUtils: java.util.regex.Pattern STRIP_ACCENTS_PATTERN>;
v5 = virtualinvoke v4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v1);
v6 = virtualinvoke v5.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>("");
return v6;
}
public static transient java.lang.String[] stripAll(java.lang.String[])
{
java.lang.String[] v0, v1;
v0 := @parameter0: java.lang.String[];
v1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String[] stripAll(java.lang.String[],java.lang.String)>(v0, null);
return v1;
}
public static java.lang.String[] stripAll(java.lang.String[], java.lang.String)
{
int v2, v4;
java.lang.String[] v0, v3;
java.lang.String v1, v5, v6;
v0 := @parameter0: java.lang.String[];
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int getLength(java.lang.Object)>(v0);
if v2 != 0 goto label1;
return v0;
label1:
v3 = newarray (java.lang.String)[v2];
v4 = 0;
label2:
if v4 >= v2 goto label3;
v5 = v0[v4];
v6 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String strip(java.lang.String,java.lang.String)>(v5, v1);
v3[v4] = v6;
v4 = v4 + 1;
goto label2;
label3:
return v3;
}
public static java.lang.String stripEnd(java.lang.String, java.lang.String)
{
char v4, v8;
int v10, v2, v3, v7, v9;
java.lang.String v0, v1, v11;
boolean v5, v6;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: int length(java.lang.CharSequence)>(v0);
if v2 != 0 goto label1;
return v0;
label1:
if v1 != null goto label3;
label2:
if v2 == 0 goto label5;
v3 = v2 - 1;
v4 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v3);
v5 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(v4);
if v5 == 0 goto label5;
v2 = v2 - 1;
goto label2;
label3:
v6 = virtualinvoke v1.<java.lang.String: boolean isEmpty()>();
if v6 == 0 goto label4;
return v0;
label4:
if v2 == 0 goto label5;
v7 = v2 - 1;
v8 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v7);
v9 = virtualinvoke v1.<java.lang.String: int indexOf(int)>(v8);
v10 = (int) -1;
if v9 == v10 goto label5;
v2 = v2 - 1;
goto label4;
label5:
v11 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(0, v2);
return v11;
}
public static java.lang.String stripStart(java.lang.String, java.lang.String)
{
char v4, v7;
int v2, v3, v8, v9;
java.lang.String v0, v1, v10;
boolean v5, v6;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: int length(java.lang.CharSequence)>(v0);
if v2 != 0 goto label1;
return v0;
label1:
v3 = 0;
if v1 != null goto label3;
label2:
if v3 == v2 goto label5;
v4 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v3);
v5 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(v4);
if v5 == 0 goto label5;
v3 = v3 + 1;
goto label2;
label3:
v6 = virtualinvoke v1.<java.lang.String: boolean isEmpty()>();
if v6 == 0 goto label4;
return v0;
label4:
if v3 == v2 goto label5;
v7 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v3);
v8 = virtualinvoke v1.<java.lang.String: int indexOf(int)>(v7);
v9 = (int) -1;
if v8 == v9 goto label5;
v3 = v3 + 1;
goto label4;
label5:
v10 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(v3);
return v10;
}
public static java.lang.String stripToEmpty(java.lang.String)
{
java.lang.String v0, v1;
v0 := @parameter0: java.lang.String;
if v0 != null goto label1;
v1 = "";
goto label2;
label1:
v1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String strip(java.lang.String,java.lang.String)>(v0, null);
label2:
return v1;
}
public static java.lang.String stripToNull(java.lang.String)
{
java.lang.String v0, v1, v3;
boolean v2;
v0 := @parameter0: java.lang.String;
if v0 != null goto label1;
return null;
label1:
v1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String strip(java.lang.String,java.lang.String)>(v0, null);
v2 = virtualinvoke v1.<java.lang.String: boolean isEmpty()>();
if v2 == 0 goto label2;
v3 = null;
goto label3;
label2:
v3 = v1;
label3:
return v3;
}
public static java.lang.String substring(java.lang.String, int)
{
int v1, v2, v3;
java.lang.String v0, v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
if v0 != null goto label1;
return null;
label1:
if v1 >= 0 goto label2;
v2 = virtualinvoke v0.<java.lang.String: int length()>();
v1 = v2 + v1;
if v1 >= 0 goto label2;
v1 = 0;
label2:
v3 = virtualinvoke v0.<java.lang.String: int length()>();
if v1 <= v3 goto label3;
return "";
label3:
v4 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(v1);
return v4;
}
public static java.lang.String substring(java.lang.String, int, int)
{
int v1, v2, v3, v4, v5;
java.lang.String v0, v6;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 := @parameter2: int;
if v0 != null goto label1;
return null;
label1:
if v2 >= 0 goto label2;
v3 = virtualinvoke v0.<java.lang.String: int length()>();
v2 = v3 + v2;
label2:
if v1 >= 0 goto label3;
v4 = virtualinvoke v0.<java.lang.String: int length()>();
v1 = v4 + v1;
label3:
v5 = virtualinvoke v0.<java.lang.String: int length()>();
if v2 <= v5 goto label4;
v2 = virtualinvoke v0.<java.lang.String: int length()>();
label4:
if v1 <= v2 goto label5;
return "";
label5:
if v1 >= 0 goto label6;
v1 = 0;
label6:
if v2 >= 0 goto label7;
v2 = 0;
label7:
v6 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(v1, v2);
return v6;
}
public static java.lang.String substringAfter(java.lang.String, int)
{
int v1, v3, v4, v5;
java.lang.String v0, v6;
boolean v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 == 0 goto label1;
return v0;
label1:
v3 = virtualinvoke v0.<java.lang.String: int indexOf(int)>(v1);
v4 = (int) -1;
if v3 != v4 goto label2;
return "";
label2:
v5 = v3 + 1;
v6 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(v5);
return v6;
}
public static java.lang.String substringAfter(java.lang.String, java.lang.String)
{
int v3, v4, v5, v6;
java.lang.String v0, v1, v7;
boolean v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 == 0 goto label1;
return v0;
label1:
if v1 != null goto label2;
return "";
label2:
v3 = virtualinvoke v0.<java.lang.String: int indexOf(java.lang.String)>(v1);
v4 = (int) -1;
if v3 != v4 goto label3;
return "";
label3:
v5 = virtualinvoke v1.<java.lang.String: int length()>();
v6 = v3 + v5;
v7 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(v6);
return v7;
}
public static java.lang.String substringAfterLast(java.lang.String, int)
{
int v1, v3, v4, v5, v6, v7;
java.lang.String v0, v8;
boolean v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 == 0 goto label1;
return v0;
label1:
v3 = virtualinvoke v0.<java.lang.String: int lastIndexOf(int)>(v1);
v4 = (int) -1;
if v3 == v4 goto label2;
v5 = virtualinvoke v0.<java.lang.String: int length()>();
v6 = v5 - 1;
if v3 != v6 goto label3;
label2:
return "";
label3:
v7 = v3 + 1;
v8 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(v7);
return v8;
}
public static java.lang.String substringAfterLast(java.lang.String, java.lang.String)
{
int v10, v4, v5, v6, v7, v8, v9;
java.lang.String v0, v1, v11;
boolean v2, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 == 0 goto label1;
return v0;
label1:
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v1);
if v3 == 0 goto label2;
return "";
label2:
v4 = virtualinvoke v0.<java.lang.String: int lastIndexOf(java.lang.String)>(v1);
v5 = (int) -1;
if v4 == v5 goto label3;
v6 = virtualinvoke v0.<java.lang.String: int length()>();
v7 = virtualinvoke v1.<java.lang.String: int length()>();
v8 = v6 - v7;
if v4 != v8 goto label4;
label3:
return "";
label4:
v9 = virtualinvoke v1.<java.lang.String: int length()>();
v10 = v4 + v9;
v11 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(v10);
return v11;
}
public static java.lang.String substringBefore(java.lang.String, int)
{
int v1, v3, v4;
java.lang.String v0, v5;
boolean v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 == 0 goto label1;
return v0;
label1:
v3 = virtualinvoke v0.<java.lang.String: int indexOf(int)>(v1);
v4 = (int) -1;
if v3 != v4 goto label2;
return v0;
label2:
v5 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(0, v3);
return v5;
}
public static java.lang.String substringBefore(java.lang.String, java.lang.String)
{
int v4, v5;
java.lang.String v0, v1, v6;
boolean v2, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 != 0 goto label1;
if v1 != null goto label2;
label1:
return v0;
label2:
v3 = virtualinvoke v1.<java.lang.String: boolean isEmpty()>();
if v3 == 0 goto label3;
return "";
label3:
v4 = virtualinvoke v0.<java.lang.String: int indexOf(java.lang.String)>(v1);
v5 = (int) -1;
if v4 != v5 goto label4;
return v0;
label4:
v6 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(0, v4);
return v6;
}
public static java.lang.String substringBeforeLast(java.lang.String, java.lang.String)
{
int v4, v5;
java.lang.String v0, v1, v6;
boolean v2, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 != 0 goto label1;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v1);
if v3 == 0 goto label2;
label1:
return v0;
label2:
v4 = virtualinvoke v0.<java.lang.String: int lastIndexOf(java.lang.String)>(v1);
v5 = (int) -1;
if v4 != v5 goto label3;
return v0;
label3:
v6 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(0, v4);
return v6;
}
public static java.lang.String substringBetween(java.lang.String, java.lang.String)
{
java.lang.String v0, v1, v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String substringBetween(java.lang.String,java.lang.String,java.lang.String)>(v0, v1, v1);
return v2;
}
public static java.lang.String substringBetween(java.lang.String, java.lang.String, java.lang.String)
{
java.lang.Object[] v3;
int v10, v11, v12, v5, v6, v7, v8, v9;
java.lang.String v0, v1, v13, v2;
boolean v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.String;
v3 = newarray (java.lang.Object)[3];
v3[0] = v0;
v3[1] = v1;
v3[2] = v2;
v4 = staticinvoke <org.apache.commons.lang3.ObjectUtils: boolean allNotNull(java.lang.Object[])>(v3);
if v4 != 0 goto label1;
return null;
label1:
v5 = virtualinvoke v0.<java.lang.String: int indexOf(java.lang.String)>(v1);
v6 = (int) -1;
if v5 == v6 goto label2;
v7 = virtualinvoke v1.<java.lang.String: int length()>();
v8 = v5 + v7;
v9 = virtualinvoke v0.<java.lang.String: int indexOf(java.lang.String,int)>(v2, v8);
v10 = (int) -1;
if v9 == v10 goto label2;
v11 = virtualinvoke v1.<java.lang.String: int length()>();
v12 = v5 + v11;
v13 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(v12, v9);
return v13;
label2:
return null;
}
public static java.lang.String[] substringsBetween(java.lang.String, java.lang.String, java.lang.String)
{
java.lang.Object[] v18;
java.lang.String[] v17, v6;
java.util.ArrayList v9;
int v10, v11, v12, v13, v14, v5, v7, v8;
java.lang.String v0, v1, v15, v2;
boolean v16, v3, v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.String;
if v0 == null goto label1;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v1);
if v3 != 0 goto label1;
v4 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v2);
if v4 == 0 goto label2;
label1:
return null;
label2:
v5 = virtualinvoke v0.<java.lang.String: int length()>();
if v5 != 0 goto label3;
v6 = <org.apache.commons.lang3.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;
return v6;
label3:
v7 = virtualinvoke v2.<java.lang.String: int length()>();
v8 = virtualinvoke v1.<java.lang.String: int length()>();
v9 = new java.util.ArrayList;
specialinvoke v9.<java.util.ArrayList: void <init>()>();
v10 = 0;
label4:
v11 = v5 - v7;
if v10 >= v11 goto label5;
v12 = virtualinvoke v0.<java.lang.String: int indexOf(java.lang.String,int)>(v1, v10);
if v12 < 0 goto label5;
v13 = v12 + v8;
v14 = virtualinvoke v0.<java.lang.String: int indexOf(java.lang.String,int)>(v2, v13);
if v14 < 0 goto label5;
v15 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(v13, v14);
interfaceinvoke v9.<java.util.List: boolean add(java.lang.Object)>(v15);
v10 = v14 + v7;
goto label4;
label5:
v16 = interfaceinvoke v9.<java.util.List: boolean isEmpty()>();
if v16 == 0 goto label6;
return null;
label6:
v17 = <org.apache.commons.lang3.ArrayUtils: java.lang.String[] EMPTY_STRING_ARRAY>;
v18 = interfaceinvoke v9.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v17);
return v18;
}
public static java.lang.String swapCase(java.lang.String)
{
int[] v3;
int v11, v12, v2, v4, v5, v6, v9;
java.lang.String v0, v13;
boolean v1, v10, v7, v8;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v1 == 0 goto label1;
return v0;
label1:
v2 = virtualinvoke v0.<java.lang.String: int length()>();
v3 = newarray (int)[v2];
v4 = 0;
v5 = 0;
label2:
if v5 >= v2 goto label7;
v6 = virtualinvoke v0.<java.lang.String: int codePointAt(int)>(v5);
v7 = staticinvoke <java.lang.Character: boolean isUpperCase(int)>(v6);
if v7 != 0 goto label3;
v8 = staticinvoke <java.lang.Character: boolean isTitleCase(int)>(v6);
if v8 == 0 goto label4;
label3:
v9 = staticinvoke <java.lang.Character: int toLowerCase(int)>(v6);
goto label6;
label4:
v10 = staticinvoke <java.lang.Character: boolean isLowerCase(int)>(v6);
if v10 == 0 goto label5;
v9 = staticinvoke <java.lang.Character: int toUpperCase(int)>(v6);
goto label6;
label5:
v9 = v6;
label6:
v11 = v4;
v4 = v4 + 1;
v3[v11] = v9;
v12 = staticinvoke <java.lang.Character: int charCount(int)>(v9);
v5 = v5 + v12;
goto label2;
label7:
v13 = new java.lang.String;
specialinvoke v13.<java.lang.String: void <init>(int[],int,int)>(v3, 0, v4);
return v13;
}
public static int[] toCodePoints(java.lang.CharSequence)
{
java.lang.CharSequence v0;
int[] v2, v6;
int v1, v10, v11, v12, v4, v5, v7, v8, v9;
java.lang.String v3;
v0 := @parameter0: java.lang.CharSequence;
if v0 != null goto label1;
return null;
label1:
v1 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
if v1 != 0 goto label2;
v2 = <org.apache.commons.lang3.ArrayUtils: int[] EMPTY_INT_ARRAY>;
return v2;
label2:
v3 = virtualinvoke v0.<java.lang.Object: java.lang.String toString()>();
v4 = virtualinvoke v3.<java.lang.String: int length()>();
v5 = virtualinvoke v3.<java.lang.String: int codePointCount(int,int)>(0, v4);
v6 = newarray (int)[v5];
v7 = 0;
v8 = 0;
label3:
v9 = lengthof v6;
if v8 >= v9 goto label4;
v10 = virtualinvoke v3.<java.lang.String: int codePointAt(int)>(v7);
v6[v8] = v10;
v11 = v6[v8];
v12 = staticinvoke <java.lang.Character: int charCount(int)>(v11);
v7 = v7 + v12;
v8 = v8 + 1;
goto label3;
label4:
return v6;
}
public static java.lang.String toEncodedString(byte[], java.nio.charset.Charset)
{
byte[] v0;
java.nio.charset.Charset v1, v3;
java.lang.String v2;
v0 := @parameter0: byte[];
v1 := @parameter1: java.nio.charset.Charset;
v2 = new java.lang.String;
v3 = staticinvoke <org.apache.commons.lang3.Charsets: java.nio.charset.Charset toCharset(java.nio.charset.Charset)>(v1);
specialinvoke v2.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(v0, v3);
return v2;
}
public static java.lang.String toRootLowerCase(java.lang.String)
{
java.lang.String v0, v1;
java.util.Locale v2;
v0 := @parameter0: java.lang.String;
if v0 != null goto label1;
v1 = null;
goto label2;
label1:
v2 = <java.util.Locale: java.util.Locale ROOT>;
v1 = virtualinvoke v0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>(v2);
label2:
return v1;
}
public static java.lang.String toRootUpperCase(java.lang.String)
{
java.lang.String v0, v1;
java.util.Locale v2;
v0 := @parameter0: java.lang.String;
if v0 != null goto label1;
v1 = null;
goto label2;
label1:
v2 = <java.util.Locale: java.util.Locale ROOT>;
v1 = virtualinvoke v0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>(v2);
label2:
return v1;
}
public static java.lang.String toString(byte[], java.lang.String) throws java.io.UnsupportedEncodingException
{
byte[] v0;
java.nio.charset.Charset v3;
java.lang.String v1, v2;
v0 := @parameter0: byte[];
v1 := @parameter1: java.lang.String;
v2 = new java.lang.String;
v3 = staticinvoke <org.apache.commons.lang3.Charsets: java.nio.charset.Charset toCharset(java.lang.String)>(v1);
specialinvoke v2.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(v0, v3);
return v2;
}
private static java.lang.String toStringOrEmpty(java.lang.Object)
{
java.lang.Object v0;
java.lang.String v1;
v0 := @parameter0: java.lang.Object;
v1 = staticinvoke <java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>(v0, "");
return v1;
}
public static java.lang.String trim(java.lang.String)
{
java.lang.String v0, v1;
v0 := @parameter0: java.lang.String;
if v0 != null goto label1;
v1 = null;
goto label2;
label1:
v1 = virtualinvoke v0.<java.lang.String: java.lang.String trim()>();
label2:
return v1;
}
public static java.lang.String trimToEmpty(java.lang.String)
{
java.lang.String v0, v1;
v0 := @parameter0: java.lang.String;
if v0 != null goto label1;
v1 = "";
goto label2;
label1:
v1 = virtualinvoke v0.<java.lang.String: java.lang.String trim()>();
label2:
return v1;
}
public static java.lang.String trimToNull(java.lang.String)
{
java.lang.String v0, v1, v3;
boolean v2;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String trim(java.lang.String)>(v0);
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v1);
if v2 == 0 goto label1;
v3 = null;
goto label2;
label1:
v3 = v1;
label2:
return v3;
}
public static java.lang.String truncate(java.lang.String, int)
{
int v1;
java.lang.String v0, v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String truncate(java.lang.String,int,int)>(v0, 0, v1);
return v2;
}
public static java.lang.String truncate(java.lang.String, int, int)
{
java.lang.IllegalArgumentException v3, v4;
int v1, v2, v5, v6, v7, v8, v9;
java.lang.String v0, v10, v11;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 := @parameter2: int;
if v1 >= 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("offset cannot be negative");
throw v3;
label1:
if v2 >= 0 goto label2;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("maxWith cannot be negative");
throw v4;
label2:
if v0 != null goto label3;
return null;
label3:
v5 = virtualinvoke v0.<java.lang.String: int length()>();
if v1 <= v5 goto label4;
return "";
label4:
v6 = virtualinvoke v0.<java.lang.String: int length()>();
if v6 <= v2 goto label5;
v7 = v1 + v2;
v8 = virtualinvoke v0.<java.lang.String: int length()>();
v9 = staticinvoke <java.lang.Math: int min(int,int)>(v7, v8);
v10 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(v1, v9);
return v10;
label5:
v11 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(v1);
return v11;
}
public static java.lang.String uncapitalize(java.lang.String)
{
int[] v4;
int v1, v2, v3, v5, v6, v7, v8, v9;
java.lang.String v0, v10;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.lang3.StringUtils: int length(java.lang.CharSequence)>(v0);
if v1 != 0 goto label1;
return v0;
label1:
v2 = virtualinvoke v0.<java.lang.String: int codePointAt(int)>(0);
v3 = staticinvoke <java.lang.Character: int toLowerCase(int)>(v2);
if v2 != v3 goto label2;
return v0;
label2:
v4 = newarray (int)[v1];
v5 = 1;
v4[0] = v3;
v6 = staticinvoke <java.lang.Character: int charCount(int)>(v2);
label3:
if v6 >= v1 goto label4;
v7 = virtualinvoke v0.<java.lang.String: int codePointAt(int)>(v6);
v8 = v5;
v5 = v5 + 1;
v4[v8] = v7;
v9 = staticinvoke <java.lang.Character: int charCount(int)>(v7);
v6 = v6 + v9;
goto label3;
label4:
v10 = new java.lang.String;
specialinvoke v10.<java.lang.String: void <init>(int[],int,int)>(v4, 0, v5);
return v10;
}
public static java.lang.String unwrap(java.lang.String, char)
{
char v1, v4, v7;
int v3, v5, v6, v8, v9;
java.lang.String v0, v10;
boolean v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: char;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 != 0 goto label1;
if v1 == 0 goto label1;
v3 = virtualinvoke v0.<java.lang.String: int length()>();
if v3 != 1 goto label2;
label1:
return v0;
label2:
v4 = virtualinvoke v0.<java.lang.String: char charAt(int)>(0);
if v4 != v1 goto label3;
v5 = virtualinvoke v0.<java.lang.String: int length()>();
v6 = v5 - 1;
v7 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v6);
if v7 != v1 goto label3;
v8 = virtualinvoke v0.<java.lang.String: int length()>();
v9 = v8 - 1;
v10 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(1, v9);
return v10;
label3:
return v0;
}
public static java.lang.String unwrap(java.lang.String, java.lang.String)
{
int v10, v11, v12, v13, v14, v4, v5, v6, v9;
java.lang.String v0, v1, v15;
boolean v2, v3, v7, v8;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 != 0 goto label1;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v1);
if v3 != 0 goto label1;
v4 = virtualinvoke v0.<java.lang.String: int length()>();
v5 = virtualinvoke v1.<java.lang.String: int length()>();
v6 = 2 * v5;
if v4 >= v6 goto label2;
label1:
return v0;
label2:
v7 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence)>(v0, v1);
if v7 == 0 goto label3;
v8 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean endsWith(java.lang.CharSequence,java.lang.CharSequence)>(v0, v1);
if v8 == 0 goto label3;
v9 = virtualinvoke v0.<java.lang.String: int indexOf(java.lang.String)>(v1);
v10 = virtualinvoke v0.<java.lang.String: int lastIndexOf(java.lang.String)>(v1);
v11 = virtualinvoke v1.<java.lang.String: int length()>();
v12 = (int) -1;
if v9 == v12 goto label3;
v13 = (int) -1;
if v10 == v13 goto label3;
v14 = v9 + v11;
v15 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(v14, v10);
return v15;
label3:
return v0;
}
public static java.lang.String upperCase(java.lang.String)
{
java.lang.String v0, v1;
v0 := @parameter0: java.lang.String;
if v0 != null goto label1;
return null;
label1:
v1 = virtualinvoke v0.<java.lang.String: java.lang.String toUpperCase()>();
return v1;
}
public static java.lang.String upperCase(java.lang.String, java.util.Locale)
{
java.util.Locale v1, v2;
java.lang.String v0, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.util.Locale;
if v0 != null goto label1;
return null;
label1:
v2 = staticinvoke <org.apache.commons.lang3.LocaleUtils: java.util.Locale toLocale(java.util.Locale)>(v1);
v3 = virtualinvoke v0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>(v2);
return v3;
}
public static java.lang.String valueOf(char[])
{
char[] v0;
java.lang.String v1;
v0 := @parameter0: char[];
if v0 != null goto label1;
v1 = null;
goto label2;
label1:
v1 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>(v0);
label2:
return v1;
}
public static java.lang.String wrap(java.lang.String, char)
{
char v1;
java.lang.String v0, v3;
boolean v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: char;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 != 0 goto label1;
if v1 != 0 goto label2;
label1:
return v0;
label2:
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (char,java.lang.String,char)>(v1, v0, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001\u0001");
return v3;
}
public static java.lang.String wrap(java.lang.String, java.lang.String)
{
java.lang.String v0, v1, v4, v5;
boolean v2, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 != 0 goto label1;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v1);
if v3 == 0 goto label2;
label1:
return v0;
label2:
v4 = virtualinvoke v1.<java.lang.String: java.lang.String concat(java.lang.String)>(v0);
v5 = virtualinvoke v4.<java.lang.String: java.lang.String concat(java.lang.String)>(v1);
return v5;
}
public static java.lang.String wrapIfMissing(java.lang.String, char)
{
char v1, v3, v8;
int v12, v13, v6, v7;
java.lang.StringBuilder v11;
java.lang.String v0, v14;
boolean v10, v2, v4, v5, v9;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: char;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 != 0 goto label1;
if v1 != 0 goto label2;
label1:
return v0;
label2:
v3 = virtualinvoke v0.<java.lang.String: char charAt(int)>(0);
if v3 == v1 goto label3;
v4 = 1;
goto label4;
label3:
v4 = 0;
label4:
v5 = v4;
v6 = virtualinvoke v0.<java.lang.String: int length()>();
v7 = v6 - 1;
v8 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v7);
if v8 == v1 goto label5;
v9 = 1;
goto label6;
label5:
v9 = 0;
label6:
v10 = v9;
if v5 != 0 goto label7;
if v9 != 0 goto label7;
return v0;
label7:
v11 = new java.lang.StringBuilder;
v12 = virtualinvoke v0.<java.lang.String: int length()>();
v13 = v12 + 2;
specialinvoke v11.<java.lang.StringBuilder: void <init>(int)>(v13);
if v5 == 0 goto label8;
virtualinvoke v11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v1);
label8:
virtualinvoke v11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v0);
if v10 == 0 goto label9;
virtualinvoke v11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v1);
label9:
v14 = virtualinvoke v11.<java.lang.StringBuilder: java.lang.String toString()>();
return v14;
}
public static java.lang.String wrapIfMissing(java.lang.String, java.lang.String)
{
int v11, v12, v13, v14, v15;
java.lang.String v0, v1, v16;
boolean v2, v3, v4, v5, v6, v7, v8, v9;
java.lang.StringBuilder v10;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 != 0 goto label1;
v3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v1);
if v3 == 0 goto label2;
label1:
return v0;
label2:
v4 = virtualinvoke v0.<java.lang.String: boolean startsWith(java.lang.String)>(v1);
if v4 != 0 goto label3;
v5 = 1;
goto label4;
label3:
v5 = 0;
label4:
v6 = v5;
v7 = virtualinvoke v0.<java.lang.String: boolean endsWith(java.lang.String)>(v1);
if v7 != 0 goto label5;
v8 = 1;
goto label6;
label5:
v8 = 0;
label6:
v9 = v8;
if v6 != 0 goto label7;
if v8 != 0 goto label7;
return v0;
label7:
v10 = new java.lang.StringBuilder;
v11 = virtualinvoke v0.<java.lang.String: int length()>();
v12 = virtualinvoke v1.<java.lang.String: int length()>();
v13 = v11 + v12;
v14 = virtualinvoke v1.<java.lang.String: int length()>();
v15 = v13 + v14;
specialinvoke v10.<java.lang.StringBuilder: void <init>(int)>(v15);
if v6 == 0 goto label8;
virtualinvoke v10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v1);
label8:
virtualinvoke v10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v0);
if v9 == 0 goto label9;
virtualinvoke v10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v1);
label9:
v16 = virtualinvoke v10.<java.lang.StringBuilder: java.lang.String toString()>();
return v16;
}
public void <init>()
{
org.apache.commons.lang3.StringUtils v0;
v0 := @this: org.apache.commons.lang3.StringUtils;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void <clinit>()
{
java.util.regex.Pattern v0;
v0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\p{InCombiningDiacriticalMarks}+");
<org.apache.commons.lang3.StringUtils: java.util.regex.Pattern STRIP_ACCENTS_PATTERN> = v0;
return;
}
}