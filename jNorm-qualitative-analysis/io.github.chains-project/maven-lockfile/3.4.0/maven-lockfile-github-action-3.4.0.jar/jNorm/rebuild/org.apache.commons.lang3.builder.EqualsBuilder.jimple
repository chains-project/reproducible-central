public class org.apache.commons.lang3.builder.EqualsBuilder extends java.lang.Object implements org.apache.commons.lang3.builder.Builder
{
private static final java.lang.ThreadLocal REGISTRY;
private boolean isEquals;
private boolean testTransients;
private boolean testRecursive;
private java.util.List bypassReflectionClasses;
private java.lang.Class reflectUpToClass;
private java.lang.String[] excludeFields;
static java.util.Set getRegistry()
{
java.lang.Object v1;
java.lang.ThreadLocal v0;
v0 = <org.apache.commons.lang3.builder.EqualsBuilder: java.lang.ThreadLocal REGISTRY>;
v1 = virtualinvoke v0.<java.lang.ThreadLocal: java.lang.Object get()>();
return v1;
}
static org.apache.commons.lang3.tuple.Pair getRegisterPair(java.lang.Object, java.lang.Object)
{
org.apache.commons.lang3.tuple.Pair v4;
org.apache.commons.lang3.builder.IDKey v2, v3;
java.lang.Object v0, v1;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 = new org.apache.commons.lang3.builder.IDKey;
specialinvoke v2.<org.apache.commons.lang3.builder.IDKey: void <init>(java.lang.Object)>(v0);
v3 = new org.apache.commons.lang3.builder.IDKey;
specialinvoke v3.<org.apache.commons.lang3.builder.IDKey: void <init>(java.lang.Object)>(v1);
v4 = staticinvoke <org.apache.commons.lang3.tuple.Pair: org.apache.commons.lang3.tuple.Pair of(java.lang.Object,java.lang.Object)>(v2, v3);
return v4;
}
static boolean isRegistered(java.lang.Object, java.lang.Object)
{
java.util.Set v2;
org.apache.commons.lang3.tuple.Pair v3, v6;
java.lang.Object v0, v1, v4, v5;
boolean v7, v8, v9;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <org.apache.commons.lang3.builder.EqualsBuilder: java.util.Set getRegistry()>();
v3 = staticinvoke <org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.tuple.Pair getRegisterPair(java.lang.Object,java.lang.Object)>(v0, v1);
v4 = virtualinvoke v3.<org.apache.commons.lang3.tuple.Pair: java.lang.Object getRight()>();
v5 = virtualinvoke v3.<org.apache.commons.lang3.tuple.Pair: java.lang.Object getLeft()>();
v6 = staticinvoke <org.apache.commons.lang3.tuple.Pair: org.apache.commons.lang3.tuple.Pair of(java.lang.Object,java.lang.Object)>(v4, v5);
if v2 == null goto label2;
v7 = interfaceinvoke v2.<java.util.Set: boolean contains(java.lang.Object)>(v3);
if v7 != 0 goto label1;
v8 = interfaceinvoke v2.<java.util.Set: boolean contains(java.lang.Object)>(v6);
if v8 == 0 goto label2;
label1:
v9 = 1;
goto label3;
label2:
v9 = 0;
label3:
return v9;
}
private static void register(java.lang.Object, java.lang.Object)
{
java.util.HashSet v3;
java.lang.ThreadLocal v4;
org.apache.commons.lang3.tuple.Pair v5;
java.util.Set v2;
java.lang.Object v0, v1;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <org.apache.commons.lang3.builder.EqualsBuilder: java.util.Set getRegistry()>();
if v2 != null goto label1;
v3 = new java.util.HashSet;
specialinvoke v3.<java.util.HashSet: void <init>()>();
v2 = v3;
v4 = <org.apache.commons.lang3.builder.EqualsBuilder: java.lang.ThreadLocal REGISTRY>;
virtualinvoke v4.<java.lang.ThreadLocal: void set(java.lang.Object)>(v3);
label1:
v5 = staticinvoke <org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.tuple.Pair getRegisterPair(java.lang.Object,java.lang.Object)>(v0, v1);
interfaceinvoke v2.<java.util.Set: boolean add(java.lang.Object)>(v5);
return;
}
private static void unregister(java.lang.Object, java.lang.Object)
{
java.lang.ThreadLocal v5;
org.apache.commons.lang3.tuple.Pair v3;
java.util.Set v2;
java.lang.Object v0, v1;
boolean v4;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <org.apache.commons.lang3.builder.EqualsBuilder: java.util.Set getRegistry()>();
if v2 == null goto label1;
v3 = staticinvoke <org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.tuple.Pair getRegisterPair(java.lang.Object,java.lang.Object)>(v0, v1);
interfaceinvoke v2.<java.util.Set: boolean remove(java.lang.Object)>(v3);
v4 = interfaceinvoke v2.<java.util.Set: boolean isEmpty()>();
if v4 == 0 goto label1;
v5 = <org.apache.commons.lang3.builder.EqualsBuilder: java.lang.ThreadLocal REGISTRY>;
virtualinvoke v5.<java.lang.ThreadLocal: void remove()>();
label1:
return;
}
public void <init>()
{
java.util.List v2;
java.util.ArrayList v1;
org.apache.commons.lang3.builder.EqualsBuilder v0;
v0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals> = 1;
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v0.<org.apache.commons.lang3.builder.EqualsBuilder: java.util.List bypassReflectionClasses> = v1;
v2 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: java.util.List bypassReflectionClasses>;
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(class "Ljava/lang/String;");
return;
}
public org.apache.commons.lang3.builder.EqualsBuilder setTestTransients(boolean)
{
boolean v1;
org.apache.commons.lang3.builder.EqualsBuilder v0;
v0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;
v1 := @parameter0: boolean;
v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean testTransients> = v1;
return v0;
}
public org.apache.commons.lang3.builder.EqualsBuilder setTestRecursive(boolean)
{
boolean v1;
org.apache.commons.lang3.builder.EqualsBuilder v0;
v0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;
v1 := @parameter0: boolean;
v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean testRecursive> = v1;
return v0;
}
public org.apache.commons.lang3.builder.EqualsBuilder setBypassReflectionClasses(java.util.List)
{
java.util.List v1;
org.apache.commons.lang3.builder.EqualsBuilder v0;
v0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;
v1 := @parameter0: java.util.List;
v0.<org.apache.commons.lang3.builder.EqualsBuilder: java.util.List bypassReflectionClasses> = v1;
return v0;
}
public org.apache.commons.lang3.builder.EqualsBuilder setReflectUpToClass(java.lang.Class)
{
java.lang.Class v1;
org.apache.commons.lang3.builder.EqualsBuilder v0;
v0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;
v1 := @parameter0: java.lang.Class;
v0.<org.apache.commons.lang3.builder.EqualsBuilder: java.lang.Class reflectUpToClass> = v1;
return v0;
}
public transient org.apache.commons.lang3.builder.EqualsBuilder setExcludeFields(java.lang.String[])
{
java.lang.String[] v1;
org.apache.commons.lang3.builder.EqualsBuilder v0;
v0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;
v1 := @parameter0: java.lang.String[];
v0.<org.apache.commons.lang3.builder.EqualsBuilder: java.lang.String[] excludeFields> = v1;
return v0;
}
public static boolean reflectionEquals(java.lang.Object, java.lang.Object, java.util.Collection)
{
java.util.Collection v2;
java.lang.Object v0, v1;
java.lang.String[] v3;
boolean v4;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: java.util.Collection;
v3 = staticinvoke <org.apache.commons.lang3.builder.ReflectionToStringBuilder: java.lang.String[] toNoNullStringArray(java.util.Collection)>(v2);
v4 = staticinvoke <org.apache.commons.lang3.builder.EqualsBuilder: boolean reflectionEquals(java.lang.Object,java.lang.Object,java.lang.String[])>(v0, v1, v3);
return v4;
}
public static transient boolean reflectionEquals(java.lang.Object, java.lang.Object, java.lang.String[])
{
java.lang.Object v0, v1;
java.lang.String[] v2;
boolean v3;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: java.lang.String[];
v3 = staticinvoke <org.apache.commons.lang3.builder.EqualsBuilder: boolean reflectionEquals(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])>(v0, v1, 0, null, v2);
return v3;
}
public static boolean reflectionEquals(java.lang.Object, java.lang.Object, boolean)
{
java.lang.Object v0, v1;
java.lang.String[] v3;
boolean v2, v4;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: boolean;
v3 = newarray (java.lang.String)[0];
v4 = staticinvoke <org.apache.commons.lang3.builder.EqualsBuilder: boolean reflectionEquals(java.lang.Object,java.lang.Object,boolean,java.lang.Class,java.lang.String[])>(v0, v1, v2, null, v3);
return v4;
}
public static transient boolean reflectionEquals(java.lang.Object, java.lang.Object, boolean, java.lang.Class, java.lang.String[])
{
java.lang.Class v3;
java.lang.Object v0, v1;
java.lang.String[] v4;
boolean v2, v5;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: boolean;
v3 := @parameter3: java.lang.Class;
v4 := @parameter4: java.lang.String[];
v5 = staticinvoke <org.apache.commons.lang3.builder.EqualsBuilder: boolean reflectionEquals(java.lang.Object,java.lang.Object,boolean,java.lang.Class,boolean,java.lang.String[])>(v0, v1, v2, v3, 0, v4);
return v5;
}
public static transient boolean reflectionEquals(java.lang.Object, java.lang.Object, boolean, java.lang.Class, boolean, java.lang.String[])
{
java.lang.String[] v5;
java.lang.Class v3;
java.lang.Object v0, v1;
boolean v12, v2, v4;
org.apache.commons.lang3.builder.EqualsBuilder v10, v11, v6, v7, v8, v9;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: boolean;
v3 := @parameter3: java.lang.Class;
v4 := @parameter4: boolean;
v5 := @parameter5: java.lang.String[];
if v0 != v1 goto label1;
return 1;
label1:
if v0 == null goto label2;
if v1 != null goto label3;
label2:
return 0;
label3:
v6 = new org.apache.commons.lang3.builder.EqualsBuilder;
specialinvoke v6.<org.apache.commons.lang3.builder.EqualsBuilder: void <init>()>();
v7 = virtualinvoke v6.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder setExcludeFields(java.lang.String[])>(v5);
v8 = virtualinvoke v7.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder setReflectUpToClass(java.lang.Class)>(v3);
v9 = virtualinvoke v8.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder setTestTransients(boolean)>(v2);
v10 = virtualinvoke v9.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder setTestRecursive(boolean)>(v4);
v11 = virtualinvoke v10.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder reflectionAppend(java.lang.Object,java.lang.Object)>(v0, v1);
v12 = virtualinvoke v11.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals()>();
return v12;
}
public org.apache.commons.lang3.builder.EqualsBuilder reflectionAppend(java.lang.Object, java.lang.Object)
{
boolean v10, v11, v14, v16, v17, v3, v6, v8, v9;
org.apache.commons.lang3.builder.EqualsBuilder v0;
java.lang.IllegalArgumentException v20;
java.util.List v12, v13, v15;
java.lang.Class v18, v19, v4, v5, v7;
java.lang.Object v1, v2;
v0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;
if v3 != 0 goto label01;
return v0;
label01:
if v1 != v2 goto label02;
return v0;
label02:
if v1 == null goto label03;
if v2 != null goto label04;
label03:
v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals> = 0;
return v0;
label04:
v4 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v5 = virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v6 = virtualinvoke v4.<java.lang.Class: boolean isInstance(java.lang.Object)>(v2);
if v6 == 0 goto label05;
v7 = v4;
v8 = virtualinvoke v5.<java.lang.Class: boolean isInstance(java.lang.Object)>(v1);
if v8 != 0 goto label07;
v7 = v5;
goto label07;
label05:
v9 = virtualinvoke v5.<java.lang.Class: boolean isInstance(java.lang.Object)>(v1);
if v9 == 0 goto label06;
v7 = v5;
v10 = virtualinvoke v4.<java.lang.Class: boolean isInstance(java.lang.Object)>(v2);
if v10 != 0 goto label07;
v7 = v4;
goto label07;
label06:
v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals> = 0;
return v0;
label07:
v11 = virtualinvoke v7.<java.lang.Class: boolean isArray()>();
if v11 == 0 goto label08;
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)>(v1, v2);
goto label13;
label08:
v12 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: java.util.List bypassReflectionClasses>;
if v12 == null goto label10;
v13 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: java.util.List bypassReflectionClasses>;
v14 = interfaceinvoke v13.<java.util.List: boolean contains(java.lang.Object)>(v4);
if v14 != 0 goto label09;
v15 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: java.util.List bypassReflectionClasses>;
v16 = interfaceinvoke v15.<java.util.List: boolean contains(java.lang.Object)>(v5);
if v16 == 0 goto label10;
label09:
v17 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(v2);
v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals> = v17;
goto label13;
label10:
specialinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: void reflectionAppend(java.lang.Object,java.lang.Object,java.lang.Class)>(v1, v2, v7);
label11:
v18 = virtualinvoke v7.<java.lang.Class: java.lang.Class getSuperclass()>();
if v18 == null goto label13;
v19 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: java.lang.Class reflectUpToClass>;
if v7 == v19 goto label13;
v7 = virtualinvoke v7.<java.lang.Class: java.lang.Class getSuperclass()>();
specialinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: void reflectionAppend(java.lang.Object,java.lang.Object,java.lang.Class)>(v1, v2, v7);
goto label11;
label12:
v20 := @caughtexception;
v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals> = 0;
label13:
return v0;
catch java.lang.IllegalArgumentException from label07 to label12 with label12;
}
private void reflectionAppend(java.lang.Object, java.lang.Object, java.lang.Class)
{
java.lang.Throwable v25;
java.lang.String[] v10;
int v16, v18, v6, v7;
java.lang.InternalError v24;
java.lang.String v11, v13;
boolean v12, v14, v15, v17, v19, v20, v4, v8;
org.apache.commons.lang3.builder.EqualsBuilder v0;
java.lang.IllegalAccessException v23;
java.lang.reflect.Field v9;
java.lang.reflect.Field[] v5;
java.lang.Class v3;
java.lang.Object v1, v2, v21, v22;
v0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.lang.Class;
v4 = staticinvoke <org.apache.commons.lang3.builder.EqualsBuilder: boolean isRegistered(java.lang.Object,java.lang.Object)>(v1, v2);
if v4 == 0 goto label01;
return;
label01:
staticinvoke <org.apache.commons.lang3.builder.EqualsBuilder: void register(java.lang.Object,java.lang.Object)>(v1, v2);
v5 = virtualinvoke v3.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();
staticinvoke <java.lang.reflect.AccessibleObject: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)>(v5, 1);
v6 = 0;
label02:
v7 = lengthof v5;
if v6 >= v7 goto label08;
v8 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;
if v8 == 0 goto label08;
v9 = v5[v6];
v10 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: java.lang.String[] excludeFields>;
v11 = virtualinvoke v9.<java.lang.reflect.Field: java.lang.String getName()>();
v12 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>(v10, v11);
if v12 != 0 goto label07;
v13 = virtualinvoke v9.<java.lang.reflect.Field: java.lang.String getName()>();
v14 = virtualinvoke v13.<java.lang.String: boolean contains(java.lang.CharSequence)>("$");
if v14 != 0 goto label07;
v15 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean testTransients>;
if v15 != 0 goto label03;
v16 = virtualinvoke v9.<java.lang.reflect.Field: int getModifiers()>();
v17 = staticinvoke <java.lang.reflect.Modifier: boolean isTransient(int)>(v16);
if v17 != 0 goto label07;
label03:
v18 = virtualinvoke v9.<java.lang.reflect.Field: int getModifiers()>();
v19 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(v18);
if v19 != 0 goto label07;
v20 = virtualinvoke v9.<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/apache/commons/lang3/builder/EqualsExclude;");
if v20 != 0 goto label07;
label04:
v21 = virtualinvoke v9.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(v1);
v22 = virtualinvoke v9.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(v2);
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)>(v21, v22);
label05:
goto label07;
label06:
v23 := @caughtexception;
v24 = new java.lang.InternalError;
specialinvoke v24.<java.lang.InternalError: void <init>(java.lang.String)>("Unexpected IllegalAccessException");
throw v24;
label07:
v6 = v6 + 1;
goto label02;
label08:
staticinvoke <org.apache.commons.lang3.builder.EqualsBuilder: void unregister(java.lang.Object,java.lang.Object)>(v1, v2);
goto label10;
label09:
v25 := @caughtexception;
staticinvoke <org.apache.commons.lang3.builder.EqualsBuilder: void unregister(java.lang.Object,java.lang.Object)>(v1, v2);
throw v25;
label10:
return;
catch java.lang.IllegalAccessException from label04 to label05 with label06;
catch java.lang.Throwable from label01 to label08 with label09;
}
public org.apache.commons.lang3.builder.EqualsBuilder appendSuper(boolean)
{
boolean v1, v2;
org.apache.commons.lang3.builder.EqualsBuilder v0;
v0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;
v1 := @parameter0: boolean;
v2 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;
if v2 != 0 goto label1;
return v0;
label1:
v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals> = v1;
return v0;
}
public org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object, java.lang.Object)
{
java.lang.Class v4;
java.lang.Object v1, v2;
boolean v3, v5, v6, v7, v8;
org.apache.commons.lang3.builder.EqualsBuilder v0;
v0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;
if v3 != 0 goto label1;
return v0;
label1:
if v1 != v2 goto label2;
return v0;
label2:
if v1 == null goto label3;
if v2 != null goto label4;
label3:
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);
return v0;
label4:
v4 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v5 = virtualinvoke v4.<java.lang.Class: boolean isArray()>();
if v5 == 0 goto label5;
specialinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: void appendArray(java.lang.Object,java.lang.Object)>(v1, v2);
goto label7;
label5:
v6 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean testRecursive>;
if v6 == 0 goto label6;
v7 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isPrimitiveOrWrapper(java.lang.Class)>(v4);
if v7 != 0 goto label6;
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder reflectionAppend(java.lang.Object,java.lang.Object)>(v1, v2);
goto label7;
label6:
v8 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(v2);
v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals> = v8;
label7:
return v0;
}
private void appendArray(java.lang.Object, java.lang.Object)
{
java.lang.Class v3, v4;
java.lang.Object v1, v2;
boolean v10, v11, v12, v5, v6, v7, v8, v9;
org.apache.commons.lang3.builder.EqualsBuilder v0;
v0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v4 = virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
if v3 == v4 goto label01;
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);
goto label10;
label01:
v5 = v1 instanceof long[];
if v5 == 0 goto label02;
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(long[],long[])>(v1, v2);
goto label10;
label02:
v6 = v1 instanceof int[];
if v6 == 0 goto label03;
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(int[],int[])>(v1, v2);
goto label10;
label03:
v7 = v1 instanceof short[];
if v7 == 0 goto label04;
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(short[],short[])>(v1, v2);
goto label10;
label04:
v8 = v1 instanceof char[];
if v8 == 0 goto label05;
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(char[],char[])>(v1, v2);
goto label10;
label05:
v9 = v1 instanceof byte[];
if v9 == 0 goto label06;
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(byte[],byte[])>(v1, v2);
goto label10;
label06:
v10 = v1 instanceof double[];
if v10 == 0 goto label07;
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(double[],double[])>(v1, v2);
goto label10;
label07:
v11 = v1 instanceof float[];
if v11 == 0 goto label08;
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(float[],float[])>(v1, v2);
goto label10;
label08:
v12 = v1 instanceof boolean[];
if v12 == 0 goto label09;
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(boolean[],boolean[])>(v1, v2);
goto label10;
label09:
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object[],java.lang.Object[])>(v1, v2);
label10:
return;
}
public org.apache.commons.lang3.builder.EqualsBuilder append(long, long)
{
byte v4;
long v1, v2;
boolean v3, v5;
org.apache.commons.lang3.builder.EqualsBuilder v0;
v0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;
v1 := @parameter0: long;
v2 := @parameter1: long;
v3 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;
if v3 != 0 goto label1;
return v0;
label1:
v4 = v1 cmp v2;
if v4 != 0 goto label2;
v5 = 1;
goto label3;
label2:
v5 = 0;
label3:
v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals> = v5;
return v0;
}
public org.apache.commons.lang3.builder.EqualsBuilder append(int, int)
{
int v1, v2;
boolean v3, v4;
org.apache.commons.lang3.builder.EqualsBuilder v0;
v0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;
if v3 != 0 goto label1;
return v0;
label1:
if v1 != v2 goto label2;
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals> = v4;
return v0;
}
public org.apache.commons.lang3.builder.EqualsBuilder append(short, short)
{
short v1, v2;
boolean v3, v4;
org.apache.commons.lang3.builder.EqualsBuilder v0;
v0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;
v1 := @parameter0: short;
v2 := @parameter1: short;
v3 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;
if v3 != 0 goto label1;
return v0;
label1:
if v1 != v2 goto label2;
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals> = v4;
return v0;
}
public org.apache.commons.lang3.builder.EqualsBuilder append(char, char)
{
char v1, v2;
boolean v3, v4;
org.apache.commons.lang3.builder.EqualsBuilder v0;
v0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;
v1 := @parameter0: char;
v2 := @parameter1: char;
v3 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;
if v3 != 0 goto label1;
return v0;
label1:
if v1 != v2 goto label2;
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals> = v4;
return v0;
}
public org.apache.commons.lang3.builder.EqualsBuilder append(byte, byte)
{
byte v1, v2;
boolean v3, v4;
org.apache.commons.lang3.builder.EqualsBuilder v0;
v0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;
v1 := @parameter0: byte;
v2 := @parameter1: byte;
v3 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;
if v3 != 0 goto label1;
return v0;
label1:
if v1 != v2 goto label2;
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals> = v4;
return v0;
}
public org.apache.commons.lang3.builder.EqualsBuilder append(double, double)
{
long v4, v5;
boolean v3;
double v1, v2;
org.apache.commons.lang3.builder.EqualsBuilder v0, v6;
v0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;
v1 := @parameter0: double;
v2 := @parameter1: double;
v3 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;
if v3 != 0 goto label1;
return v0;
label1:
v4 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(v1);
v5 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(v2);
v6 = virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(long,long)>(v4, v5);
return v6;
}
public org.apache.commons.lang3.builder.EqualsBuilder append(float, float)
{
int v4, v5;
float v1, v2;
boolean v3;
org.apache.commons.lang3.builder.EqualsBuilder v0, v6;
v0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;
v1 := @parameter0: float;
v2 := @parameter1: float;
v3 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;
if v3 != 0 goto label1;
return v0;
label1:
v4 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(v1);
v5 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(v2);
v6 = virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(int,int)>(v4, v5);
return v6;
}
public org.apache.commons.lang3.builder.EqualsBuilder append(boolean, boolean)
{
boolean v1, v2, v3, v4;
org.apache.commons.lang3.builder.EqualsBuilder v0;
v0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;
v1 := @parameter0: boolean;
v2 := @parameter1: boolean;
v3 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;
if v3 != 0 goto label1;
return v0;
label1:
if v1 != v2 goto label2;
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals> = v4;
return v0;
}
public org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object[], java.lang.Object[])
{
java.lang.Object[] v1, v2;
int v4, v5, v6, v7;
java.lang.Object v10, v9;
boolean v3, v8;
org.apache.commons.lang3.builder.EqualsBuilder v0;
v0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;
v1 := @parameter0: java.lang.Object[];
v2 := @parameter1: java.lang.Object[];
v3 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;
if v3 != 0 goto label1;
return v0;
label1:
if v1 != v2 goto label2;
return v0;
label2:
if v1 == null goto label3;
if v2 != null goto label4;
label3:
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);
return v0;
label4:
v4 = lengthof v1;
v5 = lengthof v2;
if v4 == v5 goto label5;
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);
return v0;
label5:
v6 = 0;
label6:
v7 = lengthof v1;
if v6 >= v7 goto label7;
v8 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;
if v8 == 0 goto label7;
v9 = v1[v6];
v10 = v2[v6];
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(java.lang.Object,java.lang.Object)>(v9, v10);
v6 = v6 + 1;
goto label6;
label7:
return v0;
}
public org.apache.commons.lang3.builder.EqualsBuilder append(long[], long[])
{
long v10, v9;
long[] v1, v2;
int v4, v5, v6, v7;
boolean v3, v8;
org.apache.commons.lang3.builder.EqualsBuilder v0;
v0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;
v1 := @parameter0: long[];
v2 := @parameter1: long[];
v3 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;
if v3 != 0 goto label1;
return v0;
label1:
if v1 != v2 goto label2;
return v0;
label2:
if v1 == null goto label3;
if v2 != null goto label4;
label3:
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);
return v0;
label4:
v4 = lengthof v1;
v5 = lengthof v2;
if v4 == v5 goto label5;
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);
return v0;
label5:
v6 = 0;
label6:
v7 = lengthof v1;
if v6 >= v7 goto label7;
v8 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;
if v8 == 0 goto label7;
v9 = v1[v6];
v10 = v2[v6];
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(long,long)>(v9, v10);
v6 = v6 + 1;
goto label6;
label7:
return v0;
}
public org.apache.commons.lang3.builder.EqualsBuilder append(int[], int[])
{
int[] v1, v2;
int v10, v4, v5, v6, v7, v9;
boolean v3, v8;
org.apache.commons.lang3.builder.EqualsBuilder v0;
v0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;
v1 := @parameter0: int[];
v2 := @parameter1: int[];
v3 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;
if v3 != 0 goto label1;
return v0;
label1:
if v1 != v2 goto label2;
return v0;
label2:
if v1 == null goto label3;
if v2 != null goto label4;
label3:
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);
return v0;
label4:
v4 = lengthof v1;
v5 = lengthof v2;
if v4 == v5 goto label5;
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);
return v0;
label5:
v6 = 0;
label6:
v7 = lengthof v1;
if v6 >= v7 goto label7;
v8 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;
if v8 == 0 goto label7;
v9 = v1[v6];
v10 = v2[v6];
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(int,int)>(v9, v10);
v6 = v6 + 1;
goto label6;
label7:
return v0;
}
public org.apache.commons.lang3.builder.EqualsBuilder append(short[], short[])
{
short v10, v9;
int v4, v5, v6, v7;
short[] v1, v2;
boolean v3, v8;
org.apache.commons.lang3.builder.EqualsBuilder v0;
v0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;
v1 := @parameter0: short[];
v2 := @parameter1: short[];
v3 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;
if v3 != 0 goto label1;
return v0;
label1:
if v1 != v2 goto label2;
return v0;
label2:
if v1 == null goto label3;
if v2 != null goto label4;
label3:
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);
return v0;
label4:
v4 = lengthof v1;
v5 = lengthof v2;
if v4 == v5 goto label5;
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);
return v0;
label5:
v6 = 0;
label6:
v7 = lengthof v1;
if v6 >= v7 goto label7;
v8 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;
if v8 == 0 goto label7;
v9 = v1[v6];
v10 = v2[v6];
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(short,short)>(v9, v10);
v6 = v6 + 1;
goto label6;
label7:
return v0;
}
public org.apache.commons.lang3.builder.EqualsBuilder append(char[], char[])
{
char v10, v9;
int v4, v5, v6, v7;
char[] v1, v2;
boolean v3, v8;
org.apache.commons.lang3.builder.EqualsBuilder v0;
v0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;
v1 := @parameter0: char[];
v2 := @parameter1: char[];
v3 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;
if v3 != 0 goto label1;
return v0;
label1:
if v1 != v2 goto label2;
return v0;
label2:
if v1 == null goto label3;
if v2 != null goto label4;
label3:
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);
return v0;
label4:
v4 = lengthof v1;
v5 = lengthof v2;
if v4 == v5 goto label5;
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);
return v0;
label5:
v6 = 0;
label6:
v7 = lengthof v1;
if v6 >= v7 goto label7;
v8 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;
if v8 == 0 goto label7;
v9 = v1[v6];
v10 = v2[v6];
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(char,char)>(v9, v10);
v6 = v6 + 1;
goto label6;
label7:
return v0;
}
public org.apache.commons.lang3.builder.EqualsBuilder append(byte[], byte[])
{
byte[] v1, v2;
byte v10, v9;
int v4, v5, v6, v7;
boolean v3, v8;
org.apache.commons.lang3.builder.EqualsBuilder v0;
v0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;
v1 := @parameter0: byte[];
v2 := @parameter1: byte[];
v3 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;
if v3 != 0 goto label1;
return v0;
label1:
if v1 != v2 goto label2;
return v0;
label2:
if v1 == null goto label3;
if v2 != null goto label4;
label3:
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);
return v0;
label4:
v4 = lengthof v1;
v5 = lengthof v2;
if v4 == v5 goto label5;
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);
return v0;
label5:
v6 = 0;
label6:
v7 = lengthof v1;
if v6 >= v7 goto label7;
v8 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;
if v8 == 0 goto label7;
v9 = v1[v6];
v10 = v2[v6];
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(byte,byte)>(v9, v10);
v6 = v6 + 1;
goto label6;
label7:
return v0;
}
public org.apache.commons.lang3.builder.EqualsBuilder append(double[], double[])
{
double[] v1, v2;
int v4, v5, v6, v7;
boolean v3, v8;
double v10, v9;
org.apache.commons.lang3.builder.EqualsBuilder v0;
v0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;
v1 := @parameter0: double[];
v2 := @parameter1: double[];
v3 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;
if v3 != 0 goto label1;
return v0;
label1:
if v1 != v2 goto label2;
return v0;
label2:
if v1 == null goto label3;
if v2 != null goto label4;
label3:
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);
return v0;
label4:
v4 = lengthof v1;
v5 = lengthof v2;
if v4 == v5 goto label5;
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);
return v0;
label5:
v6 = 0;
label6:
v7 = lengthof v1;
if v6 >= v7 goto label7;
v8 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;
if v8 == 0 goto label7;
v9 = v1[v6];
v10 = v2[v6];
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(double,double)>(v9, v10);
v6 = v6 + 1;
goto label6;
label7:
return v0;
}
public org.apache.commons.lang3.builder.EqualsBuilder append(float[], float[])
{
float[] v1, v2;
int v4, v5, v6, v7;
float v10, v9;
boolean v3, v8;
org.apache.commons.lang3.builder.EqualsBuilder v0;
v0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;
v1 := @parameter0: float[];
v2 := @parameter1: float[];
v3 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;
if v3 != 0 goto label1;
return v0;
label1:
if v1 != v2 goto label2;
return v0;
label2:
if v1 == null goto label3;
if v2 != null goto label4;
label3:
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);
return v0;
label4:
v4 = lengthof v1;
v5 = lengthof v2;
if v4 == v5 goto label5;
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);
return v0;
label5:
v6 = 0;
label6:
v7 = lengthof v1;
if v6 >= v7 goto label7;
v8 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;
if v8 == 0 goto label7;
v9 = v1[v6];
v10 = v2[v6];
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(float,float)>(v9, v10);
v6 = v6 + 1;
goto label6;
label7:
return v0;
}
public org.apache.commons.lang3.builder.EqualsBuilder append(boolean[], boolean[])
{
boolean[] v1, v2;
int v4, v5, v6, v7;
boolean v10, v3, v8, v9;
org.apache.commons.lang3.builder.EqualsBuilder v0;
v0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;
v1 := @parameter0: boolean[];
v2 := @parameter1: boolean[];
v3 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;
if v3 != 0 goto label1;
return v0;
label1:
if v1 != v2 goto label2;
return v0;
label2:
if v1 == null goto label3;
if v2 != null goto label4;
label3:
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);
return v0;
label4:
v4 = lengthof v1;
v5 = lengthof v2;
if v4 == v5 goto label5;
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: void setEquals(boolean)>(0);
return v0;
label5:
v6 = 0;
label6:
v7 = lengthof v1;
if v6 >= v7 goto label7;
v8 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;
if v8 == 0 goto label7;
v9 = v1[v6];
v10 = v2[v6];
virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: org.apache.commons.lang3.builder.EqualsBuilder append(boolean,boolean)>(v9, v10);
v6 = v6 + 1;
goto label6;
label7:
return v0;
}
public boolean isEquals()
{
boolean v1;
org.apache.commons.lang3.builder.EqualsBuilder v0;
v0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;
v1 = v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals>;
return v1;
}
public java.lang.Boolean build()
{
java.lang.Boolean v2;
boolean v1;
org.apache.commons.lang3.builder.EqualsBuilder v0;
v0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;
v1 = virtualinvoke v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals()>();
v2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v1);
return v2;
}
protected void setEquals(boolean)
{
boolean v1;
org.apache.commons.lang3.builder.EqualsBuilder v0;
v0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;
v1 := @parameter0: boolean;
v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals> = v1;
return;
}
public void reset()
{
org.apache.commons.lang3.builder.EqualsBuilder v0;
v0 := @this: org.apache.commons.lang3.builder.EqualsBuilder;
v0.<org.apache.commons.lang3.builder.EqualsBuilder: boolean isEquals> = 1;
return;
}
static void <clinit>()
{
java.lang.ThreadLocal v0;
v0 = new java.lang.ThreadLocal;
specialinvoke v0.<java.lang.ThreadLocal: void <init>()>();
<org.apache.commons.lang3.builder.EqualsBuilder: java.lang.ThreadLocal REGISTRY> = v0;
return;
}
}