public abstract class org.apache.commons.lang3.concurrent.BackgroundInitializer extends java.lang.Object implements org.apache.commons.lang3.concurrent.ConcurrentInitializer
{
private java.util.concurrent.ExecutorService externalExecutor;
private java.util.concurrent.ExecutorService executor;
private java.util.concurrent.Future future;
protected void <init>()
{
org.apache.commons.lang3.concurrent.BackgroundInitializer v0;
v0 := @this: org.apache.commons.lang3.concurrent.BackgroundInitializer;
specialinvoke v0.<org.apache.commons.lang3.concurrent.BackgroundInitializer: void <init>(java.util.concurrent.ExecutorService)>(null);
return;
}
protected void <init>(java.util.concurrent.ExecutorService)
{
org.apache.commons.lang3.concurrent.BackgroundInitializer v0;
java.util.concurrent.ExecutorService v1;
v0 := @this: org.apache.commons.lang3.concurrent.BackgroundInitializer;
v1 := @parameter0: java.util.concurrent.ExecutorService;
specialinvoke v0.<java.lang.Object: void <init>()>();
virtualinvoke v0.<org.apache.commons.lang3.concurrent.BackgroundInitializer: void setExternalExecutor(java.util.concurrent.ExecutorService)>(v1);
return;
}
public final synchronized java.util.concurrent.ExecutorService getExternalExecutor()
{
org.apache.commons.lang3.concurrent.BackgroundInitializer v0;
java.util.concurrent.ExecutorService v1;
v0 := @this: org.apache.commons.lang3.concurrent.BackgroundInitializer;
v1 = v0.<org.apache.commons.lang3.concurrent.BackgroundInitializer: java.util.concurrent.ExecutorService externalExecutor>;
return v1;
}
public synchronized boolean isStarted()
{
java.util.concurrent.Future v1;
org.apache.commons.lang3.concurrent.BackgroundInitializer v0;
boolean v2;
v0 := @this: org.apache.commons.lang3.concurrent.BackgroundInitializer;
v1 = v0.<org.apache.commons.lang3.concurrent.BackgroundInitializer: java.util.concurrent.Future future>;
if v1 == null goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public final synchronized void setExternalExecutor(java.util.concurrent.ExecutorService)
{
java.lang.IllegalStateException v3;
org.apache.commons.lang3.concurrent.BackgroundInitializer v0;
java.util.concurrent.ExecutorService v1;
boolean v2;
v0 := @this: org.apache.commons.lang3.concurrent.BackgroundInitializer;
v1 := @parameter0: java.util.concurrent.ExecutorService;
v2 = virtualinvoke v0.<org.apache.commons.lang3.concurrent.BackgroundInitializer: boolean isStarted()>();
if v2 == 0 goto label1;
v3 = new java.lang.IllegalStateException;
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot set ExecutorService after start()!");
throw v3;
label1:
v0.<org.apache.commons.lang3.concurrent.BackgroundInitializer: java.util.concurrent.ExecutorService externalExecutor> = v1;
return;
}
public synchronized boolean start()
{
java.util.concurrent.Callable v7;
java.util.concurrent.Future v8;
org.apache.commons.lang3.concurrent.BackgroundInitializer v0;
java.util.concurrent.ExecutorService v2, v3, v4, v5, v6;
boolean v1;
v0 := @this: org.apache.commons.lang3.concurrent.BackgroundInitializer;
v1 = virtualinvoke v0.<org.apache.commons.lang3.concurrent.BackgroundInitializer: boolean isStarted()>();
if v1 != 0 goto label3;
v2 = virtualinvoke v0.<org.apache.commons.lang3.concurrent.BackgroundInitializer: java.util.concurrent.ExecutorService getExternalExecutor()>();
v0.<org.apache.commons.lang3.concurrent.BackgroundInitializer: java.util.concurrent.ExecutorService executor> = v2;
v3 = v0.<org.apache.commons.lang3.concurrent.BackgroundInitializer: java.util.concurrent.ExecutorService executor>;
if v3 != null goto label1;
v4 = specialinvoke v0.<org.apache.commons.lang3.concurrent.BackgroundInitializer: java.util.concurrent.ExecutorService createExecutor()>();
v5 = v4;
v0.<org.apache.commons.lang3.concurrent.BackgroundInitializer: java.util.concurrent.ExecutorService executor> = v4;
goto label2;
label1:
v5 = null;
label2:
v6 = v0.<org.apache.commons.lang3.concurrent.BackgroundInitializer: java.util.concurrent.ExecutorService executor>;
v7 = specialinvoke v0.<org.apache.commons.lang3.concurrent.BackgroundInitializer: java.util.concurrent.Callable createTask(java.util.concurrent.ExecutorService)>(v5);
v8 = interfaceinvoke v6.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>(v7);
v0.<org.apache.commons.lang3.concurrent.BackgroundInitializer: java.util.concurrent.Future future> = v8;
return 1;
label3:
return 0;
}
public java.lang.Object get() throws org.apache.commons.lang3.concurrent.ConcurrentException
{
java.util.concurrent.ExecutionException v3;
java.util.concurrent.Future v1;
org.apache.commons.lang3.concurrent.BackgroundInitializer v0;
java.lang.InterruptedException v4;
org.apache.commons.lang3.concurrent.ConcurrentException v6;
java.lang.Thread v5;
java.lang.Object v2;
v0 := @this: org.apache.commons.lang3.concurrent.BackgroundInitializer;
label1:
v1 = virtualinvoke v0.<org.apache.commons.lang3.concurrent.BackgroundInitializer: java.util.concurrent.Future getFuture()>();
v2 = interfaceinvoke v1.<java.util.concurrent.Future: java.lang.Object get()>();
label2:
return v2;
label3:
v3 := @caughtexception;
staticinvoke <org.apache.commons.lang3.concurrent.ConcurrentUtils: void handleCause(java.util.concurrent.ExecutionException)>(v3);
return null;
label4:
v4 := @caughtexception;
v5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
virtualinvoke v5.<java.lang.Thread: void interrupt()>();
v6 = new org.apache.commons.lang3.concurrent.ConcurrentException;
specialinvoke v6.<org.apache.commons.lang3.concurrent.ConcurrentException: void <init>(java.lang.Throwable)>(v4);
throw v6;
catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
catch java.lang.InterruptedException from label1 to label2 with label4;
}
public synchronized java.util.concurrent.Future getFuture()
{
java.lang.IllegalStateException v2;
java.util.concurrent.Future v1, v3;
org.apache.commons.lang3.concurrent.BackgroundInitializer v0;
v0 := @this: org.apache.commons.lang3.concurrent.BackgroundInitializer;
v1 = v0.<org.apache.commons.lang3.concurrent.BackgroundInitializer: java.util.concurrent.Future future>;
if v1 != null goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("start() must be called first!");
throw v2;
label1:
v3 = v0.<org.apache.commons.lang3.concurrent.BackgroundInitializer: java.util.concurrent.Future future>;
return v3;
}
protected final synchronized java.util.concurrent.ExecutorService getActiveExecutor()
{
org.apache.commons.lang3.concurrent.BackgroundInitializer v0;
java.util.concurrent.ExecutorService v1;
v0 := @this: org.apache.commons.lang3.concurrent.BackgroundInitializer;
v1 = v0.<org.apache.commons.lang3.concurrent.BackgroundInitializer: java.util.concurrent.ExecutorService executor>;
return v1;
}
protected int getTaskCount()
{
org.apache.commons.lang3.concurrent.BackgroundInitializer v0;
v0 := @this: org.apache.commons.lang3.concurrent.BackgroundInitializer;
return 1;
}
protected abstract java.lang.Object initialize() throws java.lang.Exception;
private java.util.concurrent.Callable createTask(java.util.concurrent.ExecutorService)
{
org.apache.commons.lang3.concurrent.BackgroundInitializer v0;
org.apache.commons.lang3.concurrent.BackgroundInitializer$InitializationTask v2;
java.util.concurrent.ExecutorService v1;
v0 := @this: org.apache.commons.lang3.concurrent.BackgroundInitializer;
v1 := @parameter0: java.util.concurrent.ExecutorService;
v2 = new org.apache.commons.lang3.concurrent.BackgroundInitializer$InitializationTask;
specialinvoke v2.<org.apache.commons.lang3.concurrent.BackgroundInitializer$InitializationTask: void <init>(org.apache.commons.lang3.concurrent.BackgroundInitializer,java.util.concurrent.ExecutorService)>(v0, v1);
return v2;
}
private java.util.concurrent.ExecutorService createExecutor()
{
int v1;
org.apache.commons.lang3.concurrent.BackgroundInitializer v0;
java.util.concurrent.ExecutorService v2;
v0 := @this: org.apache.commons.lang3.concurrent.BackgroundInitializer;
v1 = virtualinvoke v0.<org.apache.commons.lang3.concurrent.BackgroundInitializer: int getTaskCount()>();
v2 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>(v1);
return v2;
}
}