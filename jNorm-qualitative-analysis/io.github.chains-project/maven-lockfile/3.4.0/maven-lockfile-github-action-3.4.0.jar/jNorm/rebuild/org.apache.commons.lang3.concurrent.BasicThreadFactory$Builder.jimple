public class org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder extends java.lang.Object implements org.apache.commons.lang3.builder.Builder
{
private java.util.concurrent.ThreadFactory wrappedFactory;
private java.lang.Thread$UncaughtExceptionHandler exceptionHandler;
private java.lang.String namingPattern;
private java.lang.Integer priority;
private java.lang.Boolean daemon;
public void <init>()
{
org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder v0;
v0 := @this: org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder wrappedFactory(java.util.concurrent.ThreadFactory)
{
java.lang.Object[] v2;
java.util.concurrent.ThreadFactory v1;
org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder v0;
v0 := @this: org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder;
v1 := @parameter0: java.util.concurrent.ThreadFactory;
v2 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v1, "factory", v2);
v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder: java.util.concurrent.ThreadFactory wrappedFactory> = v1;
return v0;
}
public org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder namingPattern(java.lang.String)
{
java.lang.Object[] v2;
java.lang.String v1;
org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder v0;
v0 := @this: org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder;
v1 := @parameter0: java.lang.String;
v2 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v1, "pattern", v2);
v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder: java.lang.String namingPattern> = v1;
return v0;
}
public org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder daemon(boolean)
{
java.lang.Boolean v2;
org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder v0;
boolean v1;
v0 := @this: org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder;
v1 := @parameter0: boolean;
v2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v1);
v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder: java.lang.Boolean daemon> = v2;
return v0;
}
public org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder priority(int)
{
int v1;
org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder v0;
java.lang.Integer v2;
v0 := @this: org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder;
v1 := @parameter0: int;
v2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder: java.lang.Integer priority> = v2;
return v0;
}
public org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder uncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)
{
java.lang.Object[] v2;
java.lang.Thread$UncaughtExceptionHandler v1;
org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder v0;
v0 := @this: org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder;
v1 := @parameter0: java.lang.Thread$UncaughtExceptionHandler;
v2 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v1, "handler", v2);
v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder: java.lang.Thread$UncaughtExceptionHandler exceptionHandler> = v1;
return v0;
}
public void reset()
{
org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder v0;
v0 := @this: org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder;
v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder: java.util.concurrent.ThreadFactory wrappedFactory> = null;
v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder: java.lang.Thread$UncaughtExceptionHandler exceptionHandler> = null;
v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder: java.lang.String namingPattern> = null;
v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder: java.lang.Integer priority> = null;
v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder: java.lang.Boolean daemon> = null;
return;
}
public org.apache.commons.lang3.concurrent.BasicThreadFactory build()
{
org.apache.commons.lang3.concurrent.BasicThreadFactory v1;
org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder v0;
v0 := @this: org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder;
v1 = new org.apache.commons.lang3.concurrent.BasicThreadFactory;
specialinvoke v1.<org.apache.commons.lang3.concurrent.BasicThreadFactory: void <init>(org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder)>(v0);
virtualinvoke v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder: void reset()>();
return v1;
}
}