public class org.apache.commons.lang3.function.Failable extends java.lang.Object
{
public static void accept(org.apache.commons.lang3.function.FailableBiConsumer, java.lang.Object, java.lang.Object)
{
org.apache.commons.lang3.function.FailableRunnable v3;
java.lang.Object v1, v2;
org.apache.commons.lang3.function.FailableBiConsumer v0;
v0 := @parameter0: org.apache.commons.lang3.function.FailableBiConsumer;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: java.lang.Object;
v3 = staticinvoke <org.apache.commons.lang3.function.Failable$lambda_accept_0__217: org.apache.commons.lang3.function.FailableRunnable bootstrap$(org.apache.commons.lang3.function.FailableBiConsumer,java.lang.Object,java.lang.Object)>(v0, v1, v2);
staticinvoke <org.apache.commons.lang3.function.Failable: void run(org.apache.commons.lang3.function.FailableRunnable)>(v3);
return;
}
public static void accept(org.apache.commons.lang3.function.FailableConsumer, java.lang.Object)
{
org.apache.commons.lang3.function.FailableConsumer v0;
java.lang.Object v1;
org.apache.commons.lang3.function.FailableRunnable v2;
v0 := @parameter0: org.apache.commons.lang3.function.FailableConsumer;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <org.apache.commons.lang3.function.Failable$lambda_accept_1__218: org.apache.commons.lang3.function.FailableRunnable bootstrap$(org.apache.commons.lang3.function.FailableConsumer,java.lang.Object)>(v0, v1);
staticinvoke <org.apache.commons.lang3.function.Failable: void run(org.apache.commons.lang3.function.FailableRunnable)>(v2);
return;
}
public static void accept(org.apache.commons.lang3.function.FailableDoubleConsumer, double)
{
org.apache.commons.lang3.function.FailableRunnable v2;
org.apache.commons.lang3.function.FailableDoubleConsumer v0;
double v1;
v0 := @parameter0: org.apache.commons.lang3.function.FailableDoubleConsumer;
v1 := @parameter1: double;
v2 = staticinvoke <org.apache.commons.lang3.function.Failable$lambda_accept_2__219: org.apache.commons.lang3.function.FailableRunnable bootstrap$(org.apache.commons.lang3.function.FailableDoubleConsumer,double)>(v0, v1);
staticinvoke <org.apache.commons.lang3.function.Failable: void run(org.apache.commons.lang3.function.FailableRunnable)>(v2);
return;
}
public static void accept(org.apache.commons.lang3.function.FailableIntConsumer, int)
{
int v1;
org.apache.commons.lang3.function.FailableRunnable v2;
org.apache.commons.lang3.function.FailableIntConsumer v0;
v0 := @parameter0: org.apache.commons.lang3.function.FailableIntConsumer;
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.function.Failable$lambda_accept_3__220: org.apache.commons.lang3.function.FailableRunnable bootstrap$(org.apache.commons.lang3.function.FailableIntConsumer,int)>(v0, v1);
staticinvoke <org.apache.commons.lang3.function.Failable: void run(org.apache.commons.lang3.function.FailableRunnable)>(v2);
return;
}
public static void accept(org.apache.commons.lang3.function.FailableLongConsumer, long)
{
long v1;
org.apache.commons.lang3.function.FailableRunnable v2;
org.apache.commons.lang3.function.FailableLongConsumer v0;
v0 := @parameter0: org.apache.commons.lang3.function.FailableLongConsumer;
v1 := @parameter1: long;
v2 = staticinvoke <org.apache.commons.lang3.function.Failable$lambda_accept_4__221: org.apache.commons.lang3.function.FailableRunnable bootstrap$(org.apache.commons.lang3.function.FailableLongConsumer,long)>(v0, v1);
staticinvoke <org.apache.commons.lang3.function.Failable: void run(org.apache.commons.lang3.function.FailableRunnable)>(v2);
return;
}
public static java.lang.Object apply(org.apache.commons.lang3.function.FailableBiFunction, java.lang.Object, java.lang.Object)
{
org.apache.commons.lang3.function.FailableSupplier v3;
java.lang.Object v1, v2, v4;
org.apache.commons.lang3.function.FailableBiFunction v0;
v0 := @parameter0: org.apache.commons.lang3.function.FailableBiFunction;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: java.lang.Object;
v3 = staticinvoke <org.apache.commons.lang3.function.Failable$lambda_apply_5__222: org.apache.commons.lang3.function.FailableSupplier bootstrap$(org.apache.commons.lang3.function.FailableBiFunction,java.lang.Object,java.lang.Object)>(v0, v1, v2);
v4 = staticinvoke <org.apache.commons.lang3.function.Failable: java.lang.Object get(org.apache.commons.lang3.function.FailableSupplier)>(v3);
return v4;
}
public static java.lang.Object apply(org.apache.commons.lang3.function.FailableFunction, java.lang.Object)
{
org.apache.commons.lang3.function.FailableFunction v0;
org.apache.commons.lang3.function.FailableSupplier v2;
java.lang.Object v1, v3;
v0 := @parameter0: org.apache.commons.lang3.function.FailableFunction;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <org.apache.commons.lang3.function.Failable$lambda_apply_6__223: org.apache.commons.lang3.function.FailableSupplier bootstrap$(org.apache.commons.lang3.function.FailableFunction,java.lang.Object)>(v0, v1);
v3 = staticinvoke <org.apache.commons.lang3.function.Failable: java.lang.Object get(org.apache.commons.lang3.function.FailableSupplier)>(v2);
return v3;
}
public static double applyAsDouble(org.apache.commons.lang3.function.FailableDoubleBinaryOperator, double, double)
{
org.apache.commons.lang3.function.FailableDoubleSupplier v3;
org.apache.commons.lang3.function.FailableDoubleBinaryOperator v0;
double v1, v2, v4;
v0 := @parameter0: org.apache.commons.lang3.function.FailableDoubleBinaryOperator;
v1 := @parameter1: double;
v2 := @parameter2: double;
v3 = staticinvoke <org.apache.commons.lang3.function.Failable$lambda_applyAsDouble_7__224: org.apache.commons.lang3.function.FailableDoubleSupplier bootstrap$(org.apache.commons.lang3.function.FailableDoubleBinaryOperator,double,double)>(v0, v1, v2);
v4 = staticinvoke <org.apache.commons.lang3.function.Failable: double getAsDouble(org.apache.commons.lang3.function.FailableDoubleSupplier)>(v3);
return v4;
}
public static java.util.function.BiConsumer asBiConsumer(org.apache.commons.lang3.function.FailableBiConsumer)
{
java.util.function.BiConsumer v1;
org.apache.commons.lang3.function.FailableBiConsumer v0;
v0 := @parameter0: org.apache.commons.lang3.function.FailableBiConsumer;
v1 = staticinvoke <org.apache.commons.lang3.function.Failable$lambda_asBiConsumer_8__225: java.util.function.BiConsumer bootstrap$(org.apache.commons.lang3.function.FailableBiConsumer)>(v0);
return v1;
}
public static java.util.function.BiFunction asBiFunction(org.apache.commons.lang3.function.FailableBiFunction)
{
org.apache.commons.lang3.function.FailableBiFunction v0;
java.util.function.BiFunction v1;
v0 := @parameter0: org.apache.commons.lang3.function.FailableBiFunction;
v1 = staticinvoke <org.apache.commons.lang3.function.Failable$lambda_asBiFunction_9__226: java.util.function.BiFunction bootstrap$(org.apache.commons.lang3.function.FailableBiFunction)>(v0);
return v1;
}
public static java.util.function.BiPredicate asBiPredicate(org.apache.commons.lang3.function.FailableBiPredicate)
{
java.util.function.BiPredicate v1;
org.apache.commons.lang3.function.FailableBiPredicate v0;
v0 := @parameter0: org.apache.commons.lang3.function.FailableBiPredicate;
v1 = staticinvoke <org.apache.commons.lang3.function.Failable$lambda_asBiPredicate_10__227: java.util.function.BiPredicate bootstrap$(org.apache.commons.lang3.function.FailableBiPredicate)>(v0);
return v1;
}
public static java.util.concurrent.Callable asCallable(org.apache.commons.lang3.function.FailableCallable)
{
org.apache.commons.lang3.function.FailableCallable v0;
java.util.concurrent.Callable v1;
v0 := @parameter0: org.apache.commons.lang3.function.FailableCallable;
v1 = staticinvoke <org.apache.commons.lang3.function.Failable$lambda_asCallable_11__228: java.util.concurrent.Callable bootstrap$(org.apache.commons.lang3.function.FailableCallable)>(v0);
return v1;
}
public static java.util.function.Consumer asConsumer(org.apache.commons.lang3.function.FailableConsumer)
{
java.util.function.Consumer v1;
org.apache.commons.lang3.function.FailableConsumer v0;
v0 := @parameter0: org.apache.commons.lang3.function.FailableConsumer;
v1 = staticinvoke <org.apache.commons.lang3.function.Failable$lambda_asConsumer_12__229: java.util.function.Consumer bootstrap$(org.apache.commons.lang3.function.FailableConsumer)>(v0);
return v1;
}
public static java.util.function.Function asFunction(org.apache.commons.lang3.function.FailableFunction)
{
org.apache.commons.lang3.function.FailableFunction v0;
java.util.function.Function v1;
v0 := @parameter0: org.apache.commons.lang3.function.FailableFunction;
v1 = staticinvoke <org.apache.commons.lang3.function.Failable$lambda_asFunction_13__230: java.util.function.Function bootstrap$(org.apache.commons.lang3.function.FailableFunction)>(v0);
return v1;
}
public static java.util.function.Predicate asPredicate(org.apache.commons.lang3.function.FailablePredicate)
{
org.apache.commons.lang3.function.FailablePredicate v0;
java.util.function.Predicate v1;
v0 := @parameter0: org.apache.commons.lang3.function.FailablePredicate;
v1 = staticinvoke <org.apache.commons.lang3.function.Failable$lambda_asPredicate_14__231: java.util.function.Predicate bootstrap$(org.apache.commons.lang3.function.FailablePredicate)>(v0);
return v1;
}
public static java.lang.Runnable asRunnable(org.apache.commons.lang3.function.FailableRunnable)
{
org.apache.commons.lang3.function.FailableRunnable v0;
java.lang.Runnable v1;
v0 := @parameter0: org.apache.commons.lang3.function.FailableRunnable;
v1 = staticinvoke <org.apache.commons.lang3.function.Failable$lambda_asRunnable_15__232: java.lang.Runnable bootstrap$(org.apache.commons.lang3.function.FailableRunnable)>(v0);
return v1;
}
public static java.util.function.Supplier asSupplier(org.apache.commons.lang3.function.FailableSupplier)
{
org.apache.commons.lang3.function.FailableSupplier v0;
java.util.function.Supplier v1;
v0 := @parameter0: org.apache.commons.lang3.function.FailableSupplier;
v1 = staticinvoke <org.apache.commons.lang3.function.Failable$lambda_asSupplier_16__233: java.util.function.Supplier bootstrap$(org.apache.commons.lang3.function.FailableSupplier)>(v0);
return v1;
}
public static java.lang.Object call(org.apache.commons.lang3.function.FailableCallable)
{
org.apache.commons.lang3.function.FailableCallable v0;
java.lang.Object v2;
org.apache.commons.lang3.function.FailableSupplier v1;
v0 := @parameter0: org.apache.commons.lang3.function.FailableCallable;
virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v1 = staticinvoke <org.apache.commons.lang3.function.Failable$call__234: org.apache.commons.lang3.function.FailableSupplier bootstrap$(org.apache.commons.lang3.function.FailableCallable)>(v0);
v2 = staticinvoke <org.apache.commons.lang3.function.Failable: java.lang.Object get(org.apache.commons.lang3.function.FailableSupplier)>(v1);
return v2;
}
public static java.lang.Object get(org.apache.commons.lang3.function.FailableSupplier)
{
java.lang.Throwable v2;
org.apache.commons.lang3.function.FailableSupplier v0;
java.lang.Object v1;
java.lang.RuntimeException v3;
v0 := @parameter0: org.apache.commons.lang3.function.FailableSupplier;
label1:
v1 = interfaceinvoke v0.<org.apache.commons.lang3.function.FailableSupplier: java.lang.Object get()>();
label2:
return v1;
label3:
v2 := @caughtexception;
v3 = staticinvoke <org.apache.commons.lang3.function.Failable: java.lang.RuntimeException rethrow(java.lang.Throwable)>(v2);
throw v3;
catch java.lang.Throwable from label1 to label2 with label3;
}
public static boolean getAsBoolean(org.apache.commons.lang3.function.FailableBooleanSupplier)
{
java.lang.Throwable v2;
java.lang.RuntimeException v3;
boolean v1;
org.apache.commons.lang3.function.FailableBooleanSupplier v0;
v0 := @parameter0: org.apache.commons.lang3.function.FailableBooleanSupplier;
label1:
v1 = interfaceinvoke v0.<org.apache.commons.lang3.function.FailableBooleanSupplier: boolean getAsBoolean()>();
label2:
return v1;
label3:
v2 := @caughtexception;
v3 = staticinvoke <org.apache.commons.lang3.function.Failable: java.lang.RuntimeException rethrow(java.lang.Throwable)>(v2);
throw v3;
catch java.lang.Throwable from label1 to label2 with label3;
}
public static double getAsDouble(org.apache.commons.lang3.function.FailableDoubleSupplier)
{
java.lang.Throwable v2;
org.apache.commons.lang3.function.FailableDoubleSupplier v0;
java.lang.RuntimeException v3;
double v1;
v0 := @parameter0: org.apache.commons.lang3.function.FailableDoubleSupplier;
label1:
v1 = interfaceinvoke v0.<org.apache.commons.lang3.function.FailableDoubleSupplier: double getAsDouble()>();
label2:
return v1;
label3:
v2 := @caughtexception;
v3 = staticinvoke <org.apache.commons.lang3.function.Failable: java.lang.RuntimeException rethrow(java.lang.Throwable)>(v2);
throw v3;
catch java.lang.Throwable from label1 to label2 with label3;
}
public static int getAsInt(org.apache.commons.lang3.function.FailableIntSupplier)
{
java.lang.Throwable v2;
org.apache.commons.lang3.function.FailableIntSupplier v0;
int v1;
java.lang.RuntimeException v3;
v0 := @parameter0: org.apache.commons.lang3.function.FailableIntSupplier;
label1:
v1 = interfaceinvoke v0.<org.apache.commons.lang3.function.FailableIntSupplier: int getAsInt()>();
label2:
return v1;
label3:
v2 := @caughtexception;
v3 = staticinvoke <org.apache.commons.lang3.function.Failable: java.lang.RuntimeException rethrow(java.lang.Throwable)>(v2);
throw v3;
catch java.lang.Throwable from label1 to label2 with label3;
}
public static long getAsLong(org.apache.commons.lang3.function.FailableLongSupplier)
{
java.lang.Throwable v2;
org.apache.commons.lang3.function.FailableLongSupplier v0;
long v1;
java.lang.RuntimeException v3;
v0 := @parameter0: org.apache.commons.lang3.function.FailableLongSupplier;
label1:
v1 = interfaceinvoke v0.<org.apache.commons.lang3.function.FailableLongSupplier: long getAsLong()>();
label2:
return v1;
label3:
v2 := @caughtexception;
v3 = staticinvoke <org.apache.commons.lang3.function.Failable: java.lang.RuntimeException rethrow(java.lang.Throwable)>(v2);
throw v3;
catch java.lang.Throwable from label1 to label2 with label3;
}
public static short getAsShort(org.apache.commons.lang3.function.FailableShortSupplier)
{
java.lang.Throwable v2;
short v1;
java.lang.RuntimeException v3;
org.apache.commons.lang3.function.FailableShortSupplier v0;
v0 := @parameter0: org.apache.commons.lang3.function.FailableShortSupplier;
label1:
v1 = interfaceinvoke v0.<org.apache.commons.lang3.function.FailableShortSupplier: short getAsShort()>();
label2:
return v1;
label3:
v2 := @caughtexception;
v3 = staticinvoke <org.apache.commons.lang3.function.Failable: java.lang.RuntimeException rethrow(java.lang.Throwable)>(v2);
throw v3;
catch java.lang.Throwable from label1 to label2 with label3;
}
public static java.lang.RuntimeException rethrow(java.lang.Throwable)
{
java.io.UncheckedIOException v4;
java.lang.Throwable v0;
java.lang.reflect.UndeclaredThrowableException v5;
boolean v1, v2, v3;
v0 := @parameter0: java.lang.Throwable;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v0, "throwable");
v1 = v0 instanceof java.lang.RuntimeException;
if v1 == 0 goto label1;
throw v0;
label1:
v2 = v0 instanceof java.lang.Error;
if v2 == 0 goto label2;
throw v0;
label2:
v3 = v0 instanceof java.io.IOException;
if v3 == 0 goto label3;
v4 = new java.io.UncheckedIOException;
specialinvoke v4.<java.io.UncheckedIOException: void <init>(java.io.IOException)>(v0);
throw v4;
label3:
v5 = new java.lang.reflect.UndeclaredThrowableException;
specialinvoke v5.<java.lang.reflect.UndeclaredThrowableException: void <init>(java.lang.Throwable)>(v0);
throw v5;
}
public static void run(org.apache.commons.lang3.function.FailableRunnable)
{
java.lang.Throwable v1;
java.lang.RuntimeException v2;
org.apache.commons.lang3.function.FailableRunnable v0;
v0 := @parameter0: org.apache.commons.lang3.function.FailableRunnable;
label1:
interfaceinvoke v0.<org.apache.commons.lang3.function.FailableRunnable: void run()>();
label2:
goto label4;
label3:
v1 := @caughtexception;
v2 = staticinvoke <org.apache.commons.lang3.function.Failable: java.lang.RuntimeException rethrow(java.lang.Throwable)>(v1);
throw v2;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public static org.apache.commons.lang3.stream.Streams$FailableStream stream(java.util.Collection)
{
java.util.stream.Stream v2;
org.apache.commons.lang3.stream.Streams$FailableStream v1;
java.util.Collection v0;
v0 := @parameter0: java.util.Collection;
v1 = new org.apache.commons.lang3.stream.Streams$FailableStream;
v2 = interfaceinvoke v0.<java.util.Collection: java.util.stream.Stream stream()>();
specialinvoke v1.<org.apache.commons.lang3.stream.Streams$FailableStream: void <init>(java.util.stream.Stream)>(v2);
return v1;
}
public static org.apache.commons.lang3.stream.Streams$FailableStream stream(java.util.stream.Stream)
{
java.util.stream.Stream v0;
org.apache.commons.lang3.stream.Streams$FailableStream v1;
v0 := @parameter0: java.util.stream.Stream;
v1 = new org.apache.commons.lang3.stream.Streams$FailableStream;
specialinvoke v1.<org.apache.commons.lang3.stream.Streams$FailableStream: void <init>(java.util.stream.Stream)>(v0);
return v1;
}
public static boolean test(org.apache.commons.lang3.function.FailableBiPredicate, java.lang.Object, java.lang.Object)
{
org.apache.commons.lang3.function.FailableBiPredicate v0;
java.lang.Object v1, v2;
boolean v4;
org.apache.commons.lang3.function.FailableBooleanSupplier v3;
v0 := @parameter0: org.apache.commons.lang3.function.FailableBiPredicate;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: java.lang.Object;
v3 = staticinvoke <org.apache.commons.lang3.function.Failable$lambda_test_17__235: org.apache.commons.lang3.function.FailableBooleanSupplier bootstrap$(org.apache.commons.lang3.function.FailableBiPredicate,java.lang.Object,java.lang.Object)>(v0, v1, v2);
v4 = staticinvoke <org.apache.commons.lang3.function.Failable: boolean getAsBoolean(org.apache.commons.lang3.function.FailableBooleanSupplier)>(v3);
return v4;
}
public static boolean test(org.apache.commons.lang3.function.FailablePredicate, java.lang.Object)
{
org.apache.commons.lang3.function.FailablePredicate v0;
java.lang.Object v1;
boolean v3;
org.apache.commons.lang3.function.FailableBooleanSupplier v2;
v0 := @parameter0: org.apache.commons.lang3.function.FailablePredicate;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <org.apache.commons.lang3.function.Failable$lambda_test_18__236: org.apache.commons.lang3.function.FailableBooleanSupplier bootstrap$(org.apache.commons.lang3.function.FailablePredicate,java.lang.Object)>(v0, v1);
v3 = staticinvoke <org.apache.commons.lang3.function.Failable: boolean getAsBoolean(org.apache.commons.lang3.function.FailableBooleanSupplier)>(v2);
return v3;
}
public static transient void tryWithResources(org.apache.commons.lang3.function.FailableRunnable, org.apache.commons.lang3.function.FailableConsumer, org.apache.commons.lang3.function.FailableRunnable[])
{
java.lang.Throwable v12, v13, v7, v8;
org.apache.commons.lang3.function.FailableRunnable[] v2;
java.lang.RuntimeException v14;
org.apache.commons.lang3.function.FailableConsumer v1, v3;
org.apache.commons.lang3.function.FailableRunnable v0, v11, v6;
int v10, v4, v5, v9;
v0 := @parameter0: org.apache.commons.lang3.function.FailableRunnable;
v1 := @parameter1: org.apache.commons.lang3.function.FailableConsumer;
v2 := @parameter2: org.apache.commons.lang3.function.FailableRunnable[];
if v1 != null goto label01;
v3 = staticinvoke <org.apache.commons.lang3.function.Failable$rethrow__237: org.apache.commons.lang3.function.FailableConsumer bootstrap$()>();
goto label02;
label01:
v3 = v1;
label02:
if v2 == null goto label04;
v4 = lengthof v2;
v5 = 0;
label03:
if v5 >= v4 goto label04;
v6 = v2[v5];
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v6, "runnable");
v5 = v5 + 1;
goto label03;
label04:
v7 = null;
label05:
interfaceinvoke v0.<org.apache.commons.lang3.function.FailableRunnable: void run()>();
label06:
goto label08;
label07:
v8 := @caughtexception;
v7 = v8;
label08:
if v2 == null goto label14;
v9 = lengthof v2;
v10 = 0;
label09:
if v10 >= v9 goto label14;
v11 = v2[v10];
label10:
interfaceinvoke v11.<org.apache.commons.lang3.function.FailableRunnable: void run()>();
label11:
goto label13;
label12:
v12 := @caughtexception;
if v7 != null goto label13;
v7 = v12;
label13:
v10 = v10 + 1;
goto label09;
label14:
if v7 == null goto label18;
label15:
interfaceinvoke v3.<org.apache.commons.lang3.function.FailableConsumer: void accept(java.lang.Object)>(v7);
label16:
goto label18;
label17:
v13 := @caughtexception;
v14 = staticinvoke <org.apache.commons.lang3.function.Failable: java.lang.RuntimeException rethrow(java.lang.Throwable)>(v13);
throw v14;
label18:
return;
catch java.lang.Throwable from label05 to label06 with label07;
catch java.lang.Throwable from label10 to label11 with label12;
catch java.lang.Throwable from label15 to label16 with label17;
}
public static transient void tryWithResources(org.apache.commons.lang3.function.FailableRunnable, org.apache.commons.lang3.function.FailableRunnable[])
{
org.apache.commons.lang3.function.FailableRunnable v0;
org.apache.commons.lang3.function.FailableRunnable[] v1;
v0 := @parameter0: org.apache.commons.lang3.function.FailableRunnable;
v1 := @parameter1: org.apache.commons.lang3.function.FailableRunnable[];
staticinvoke <org.apache.commons.lang3.function.Failable: void tryWithResources(org.apache.commons.lang3.function.FailableRunnable,org.apache.commons.lang3.function.FailableConsumer,org.apache.commons.lang3.function.FailableRunnable[])>(v0, null, v1);
return;
}
private void <init>()
{
org.apache.commons.lang3.function.Failable v0;
v0 := @this: org.apache.commons.lang3.function.Failable;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
}