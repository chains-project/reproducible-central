public interface  org.apache.commons.lang3.function.FailableBiConsumer extends java.lang.Object
{
public static final org.apache.commons.lang3.function.FailableBiConsumer NOP;
public static org.apache.commons.lang3.function.FailableBiConsumer 'nop'()
{
org.apache.commons.lang3.function.FailableBiConsumer v0;
v0 = <org.apache.commons.lang3.function.FailableBiConsumer: org.apache.commons.lang3.function.FailableBiConsumer NOP>;
return v0;
}
public abstract void accept(java.lang.Object, java.lang.Object) throws java.lang.Throwable;
public org.apache.commons.lang3.function.FailableBiConsumer andThen(org.apache.commons.lang3.function.FailableBiConsumer)
{
org.apache.commons.lang3.function.FailableBiConsumer v0, v1, v2;
v0 := @this: org.apache.commons.lang3.function.FailableBiConsumer;
v1 := @parameter0: org.apache.commons.lang3.function.FailableBiConsumer;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = staticinvoke <org.apache.commons.lang3.function.FailableBiConsumer$lambda_andThen_1__215: org.apache.commons.lang3.function.FailableBiConsumer bootstrap$(org.apache.commons.lang3.function.FailableBiConsumer,org.apache.commons.lang3.function.FailableBiConsumer)>(v0, v1);
return v2;
}
static void <clinit>()
{
org.apache.commons.lang3.function.FailableBiConsumer v0;
v0 = staticinvoke <org.apache.commons.lang3.function.FailableBiConsumer$lambda_static_0__216: org.apache.commons.lang3.function.FailableBiConsumer bootstrap$()>();
<org.apache.commons.lang3.function.FailableBiConsumer: org.apache.commons.lang3.function.FailableBiConsumer NOP> = v0;
return;
}
}