public interface  org.apache.commons.lang3.function.FailableConsumer extends java.lang.Object
{
public static final org.apache.commons.lang3.function.FailableConsumer NOP;
public static org.apache.commons.lang3.function.FailableConsumer 'nop'()
{
org.apache.commons.lang3.function.FailableConsumer v0;
v0 = <org.apache.commons.lang3.function.FailableConsumer: org.apache.commons.lang3.function.FailableConsumer NOP>;
return v0;
}
public abstract void accept(java.lang.Object) throws java.lang.Throwable;
public org.apache.commons.lang3.function.FailableConsumer andThen(org.apache.commons.lang3.function.FailableConsumer)
{
org.apache.commons.lang3.function.FailableConsumer v0, v1, v2;
v0 := @this: org.apache.commons.lang3.function.FailableConsumer;
v1 := @parameter0: org.apache.commons.lang3.function.FailableConsumer;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = staticinvoke <org.apache.commons.lang3.function.FailableConsumer$lambda_andThen_1__206: org.apache.commons.lang3.function.FailableConsumer bootstrap$(org.apache.commons.lang3.function.FailableConsumer,org.apache.commons.lang3.function.FailableConsumer)>(v0, v1);
return v2;
}
static void <clinit>()
{
org.apache.commons.lang3.function.FailableConsumer v0;
v0 = staticinvoke <org.apache.commons.lang3.function.FailableConsumer$lambda_static_0__207: org.apache.commons.lang3.function.FailableConsumer bootstrap$()>();
<org.apache.commons.lang3.function.FailableConsumer: org.apache.commons.lang3.function.FailableConsumer NOP> = v0;
return;
}
}