public interface  org.apache.commons.lang3.function.FailableIntPredicate extends java.lang.Object
{
public static final org.apache.commons.lang3.function.FailableIntPredicate FALSE;
public static final org.apache.commons.lang3.function.FailableIntPredicate TRUE;
public static org.apache.commons.lang3.function.FailableIntPredicate falsePredicate()
{
org.apache.commons.lang3.function.FailableIntPredicate v0;
v0 = <org.apache.commons.lang3.function.FailableIntPredicate: org.apache.commons.lang3.function.FailableIntPredicate FALSE>;
return v0;
}
public static org.apache.commons.lang3.function.FailableIntPredicate truePredicate()
{
org.apache.commons.lang3.function.FailableIntPredicate v0;
v0 = <org.apache.commons.lang3.function.FailableIntPredicate: org.apache.commons.lang3.function.FailableIntPredicate TRUE>;
return v0;
}
public org.apache.commons.lang3.function.FailableIntPredicate and(org.apache.commons.lang3.function.FailableIntPredicate)
{
org.apache.commons.lang3.function.FailableIntPredicate v0, v1, v2;
v0 := @this: org.apache.commons.lang3.function.FailableIntPredicate;
v1 := @parameter0: org.apache.commons.lang3.function.FailableIntPredicate;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = staticinvoke <org.apache.commons.lang3.function.FailableIntPredicate$lambda_and_2__180: org.apache.commons.lang3.function.FailableIntPredicate bootstrap$(org.apache.commons.lang3.function.FailableIntPredicate,org.apache.commons.lang3.function.FailableIntPredicate)>(v0, v1);
return v2;
}
public org.apache.commons.lang3.function.FailableIntPredicate negate()
{
org.apache.commons.lang3.function.FailableIntPredicate v0, v1;
v0 := @this: org.apache.commons.lang3.function.FailableIntPredicate;
v1 = staticinvoke <org.apache.commons.lang3.function.FailableIntPredicate$lambda_negate_3__181: org.apache.commons.lang3.function.FailableIntPredicate bootstrap$(org.apache.commons.lang3.function.FailableIntPredicate)>(v0);
return v1;
}
public org.apache.commons.lang3.function.FailableIntPredicate or(org.apache.commons.lang3.function.FailableIntPredicate)
{
org.apache.commons.lang3.function.FailableIntPredicate v0, v1, v2;
v0 := @this: org.apache.commons.lang3.function.FailableIntPredicate;
v1 := @parameter0: org.apache.commons.lang3.function.FailableIntPredicate;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = staticinvoke <org.apache.commons.lang3.function.FailableIntPredicate$lambda_or_4__182: org.apache.commons.lang3.function.FailableIntPredicate bootstrap$(org.apache.commons.lang3.function.FailableIntPredicate,org.apache.commons.lang3.function.FailableIntPredicate)>(v0, v1);
return v2;
}
public abstract boolean test(int) throws java.lang.Throwable;
static void <clinit>()
{
org.apache.commons.lang3.function.FailableIntPredicate v0, v1;
v0 = staticinvoke <org.apache.commons.lang3.function.FailableIntPredicate$lambda_static_0__183: org.apache.commons.lang3.function.FailableIntPredicate bootstrap$()>();
<org.apache.commons.lang3.function.FailableIntPredicate: org.apache.commons.lang3.function.FailableIntPredicate FALSE> = v0;
v1 = staticinvoke <org.apache.commons.lang3.function.FailableIntPredicate$lambda_static_1__184: org.apache.commons.lang3.function.FailableIntPredicate bootstrap$()>();
<org.apache.commons.lang3.function.FailableIntPredicate: org.apache.commons.lang3.function.FailableIntPredicate TRUE> = v1;
return;
}
}