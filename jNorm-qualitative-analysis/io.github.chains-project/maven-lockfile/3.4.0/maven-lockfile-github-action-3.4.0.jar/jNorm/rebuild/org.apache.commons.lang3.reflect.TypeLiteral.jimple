public abstract class org.apache.commons.lang3.reflect.TypeLiteral extends java.lang.Object implements org.apache.commons.lang3.reflect.Typed
{
private static final java.lang.reflect.TypeVariable T;
public final java.lang.reflect.Type value;
private final java.lang.String toString;
protected void <init>()
{
java.lang.Object[] v10, v5;
org.apache.commons.lang3.reflect.TypeLiteral v0;
java.util.Map v2;
java.lang.String v12, v14, v15, v8;
java.lang.reflect.TypeVariable v3, v7;
java.lang.reflect.Type v13;
java.lang.Class v1, v11, v6;
java.lang.Object v4, v9;
v0 := @this: org.apache.commons.lang3.reflect.TypeLiteral;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v2 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.util.Map getTypeArguments(java.lang.reflect.Type,java.lang.Class)>(v1, class "Lorg/apache/commons/lang3/reflect/TypeLiteral;");
v3 = <org.apache.commons.lang3.reflect.TypeLiteral: java.lang.reflect.TypeVariable T>;
v4 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v3);
v5 = newarray (java.lang.Object)[2];
v6 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v5[0] = v6;
v7 = <org.apache.commons.lang3.reflect.TypeLiteral: java.lang.reflect.TypeVariable T>;
v8 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.String toLongString(java.lang.reflect.TypeVariable)>(v7);
v5[1] = v8;
v9 = staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v4, "%s does not assign type parameter %s", v5);
v0.<org.apache.commons.lang3.reflect.TypeLiteral: java.lang.reflect.Type value> = v9;
v10 = newarray (java.lang.Object)[2];
v11 = class "Lorg/apache/commons/lang3/reflect/TypeLiteral;";
v12 = virtualinvoke v11.<java.lang.Class: java.lang.String getSimpleName()>();
v10[0] = v12;
v13 = v0.<org.apache.commons.lang3.reflect.TypeLiteral: java.lang.reflect.Type value>;
v14 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.String toString(java.lang.reflect.Type)>(v13);
v10[1] = v14;
v15 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s<%s>", v10);
v0.<org.apache.commons.lang3.reflect.TypeLiteral: java.lang.String toString> = v15;
return;
}
public final boolean equals(java.lang.Object)
{
java.lang.reflect.Type v3, v4;
org.apache.commons.lang3.reflect.TypeLiteral v0;
java.lang.Object v1;
boolean v2, v5;
v0 := @this: org.apache.commons.lang3.reflect.TypeLiteral;
v1 := @parameter0: java.lang.Object;
if v1 != v0 goto label1;
return 1;
label1:
v2 = v1 instanceof org.apache.commons.lang3.reflect.TypeLiteral;
if v2 != 0 goto label2;
return 0;
label2:
v3 = v0.<org.apache.commons.lang3.reflect.TypeLiteral: java.lang.reflect.Type value>;
v4 = v1.<org.apache.commons.lang3.reflect.TypeLiteral: java.lang.reflect.Type value>;
v5 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean equals(java.lang.reflect.Type,java.lang.reflect.Type)>(v3, v4);
return v5;
}
public int hashCode()
{
java.lang.reflect.Type v1;
org.apache.commons.lang3.reflect.TypeLiteral v0;
int v2, v3;
v0 := @this: org.apache.commons.lang3.reflect.TypeLiteral;
v1 = v0.<org.apache.commons.lang3.reflect.TypeLiteral: java.lang.reflect.Type value>;
v2 = virtualinvoke v1.<java.lang.Object: int hashCode()>();
v3 = 592 | v2;
return v3;
}
public java.lang.String toString()
{
java.lang.String v1;
org.apache.commons.lang3.reflect.TypeLiteral v0;
v0 := @this: org.apache.commons.lang3.reflect.TypeLiteral;
v1 = v0.<org.apache.commons.lang3.reflect.TypeLiteral: java.lang.String toString>;
return v1;
}
public java.lang.reflect.Type getType()
{
java.lang.reflect.Type v1;
org.apache.commons.lang3.reflect.TypeLiteral v0;
v0 := @this: org.apache.commons.lang3.reflect.TypeLiteral;
v1 = v0.<org.apache.commons.lang3.reflect.TypeLiteral: java.lang.reflect.Type value>;
return v1;
}
static void <clinit>()
{
java.lang.Class v0;
java.lang.reflect.TypeVariable[] v1;
java.lang.reflect.TypeVariable v2;
v0 = class "Lorg/apache/commons/lang3/reflect/TypeLiteral;";
v1 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();
v2 = v1[0];
<org.apache.commons.lang3.reflect.TypeLiteral: java.lang.reflect.TypeVariable T> = v2;
return;
}
}