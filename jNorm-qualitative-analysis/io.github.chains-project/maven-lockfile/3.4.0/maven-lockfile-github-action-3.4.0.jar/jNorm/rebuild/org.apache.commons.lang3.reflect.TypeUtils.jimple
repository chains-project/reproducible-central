public class org.apache.commons.lang3.reflect.TypeUtils extends java.lang.Object
{
public static final java.lang.reflect.WildcardType WILDCARD_ALL;
private static transient java.lang.StringBuilder appendAllTo(java.lang.StringBuilder, java.lang.String, java.lang.Object[])
{
java.lang.Object[] v2, v3;
int v4, v7, v8;
java.lang.Object v10, v5;
java.lang.StringBuilder v0, v9;
java.lang.String v1, v11, v6;
v0 := @parameter0: java.lang.StringBuilder;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.Object[];
v3 = staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object[] noNullElements(java.lang.Object[])>(v2);
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object[] notEmpty(java.lang.Object[])>(v3);
v4 = lengthof v2;
if v4 <= 0 goto label2;
v5 = v2[0];
v6 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.String toString(java.lang.Object)>(v5);
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v6);
v7 = 1;
label1:
v8 = lengthof v2;
if v7 >= v8 goto label2;
v9 = virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v1);
v10 = v2[v7];
v11 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.String toString(java.lang.Object)>(v10);
virtualinvoke v9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v11);
v7 = v7 + 1;
goto label1;
label2:
return v0;
}
private static void appendRecursiveTypes(java.lang.StringBuilder, int[], java.lang.reflect.Type[])
{
java.lang.Object[] v10;
java.lang.String[] v6;
int[] v1;
java.lang.reflect.Type v7;
int v11, v3, v4;
java.lang.reflect.Type[] v2;
java.lang.StringBuilder v0, v12, v13, v5, v9;
java.lang.String v8;
v0 := @parameter0: java.lang.StringBuilder;
v1 := @parameter1: int[];
v2 := @parameter2: java.lang.reflect.Type[];
v3 = 0;
label1:
v4 = lengthof v1;
if v3 >= v4 goto label2;
v5 = virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(60);
v6 = newarray (java.lang.String)[1];
v7 = v2[v3];
v8 = virtualinvoke v7.<java.lang.Object: java.lang.String toString()>();
v6[0] = v8;
v9 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.StringBuilder appendAllTo(java.lang.StringBuilder,java.lang.String,java.lang.Object[])>(v5, ", ", v6);
virtualinvoke v9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62);
v3 = v3 + 1;
goto label1;
label2:
v10 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] removeAll(java.lang.Object[],int[])>(v2, v1);
v11 = lengthof v10;
if v11 <= 0 goto label3;
v12 = virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(60);
v13 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.StringBuilder appendAllTo(java.lang.StringBuilder,java.lang.String,java.lang.Object[])>(v12, ", ", v10);
virtualinvoke v13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62);
label3:
return;
}
private static java.lang.String classToString(java.lang.Class)
{
int v14;
java.lang.String v11, v12, v16, v3, v4, v8;
boolean v1;
java.lang.reflect.TypeVariable[] v13, v15;
java.lang.Class v0, v2, v6, v7;
java.lang.StringBuilder v10, v5, v9;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: boolean isArray()>();
if v1 == 0 goto label1;
v2 = virtualinvoke v0.<java.lang.Class: java.lang.Class getComponentType()>();
v3 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.String toString(java.lang.reflect.Type)>(v2);
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001[]");
return v4;
label1:
v5 = new java.lang.StringBuilder;
specialinvoke v5.<java.lang.StringBuilder: void <init>()>();
v6 = virtualinvoke v0.<java.lang.Class: java.lang.Class getEnclosingClass()>();
if v6 == null goto label2;
v7 = virtualinvoke v0.<java.lang.Class: java.lang.Class getEnclosingClass()>();
v8 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.String classToString(java.lang.Class)>(v7);
v9 = virtualinvoke v5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v8);
v10 = virtualinvoke v9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);
v11 = virtualinvoke v0.<java.lang.Class: java.lang.String getSimpleName()>();
virtualinvoke v10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v11);
goto label3;
label2:
v12 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
virtualinvoke v5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v12);
label3:
v13 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();
v14 = lengthof v13;
if v14 <= 0 goto label4;
virtualinvoke v5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(60);
v15 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();
staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.StringBuilder appendAllTo(java.lang.StringBuilder,java.lang.String,java.lang.Object[])>(v5, ", ", v15);
virtualinvoke v5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62);
label4:
v16 = virtualinvoke v5.<java.lang.StringBuilder: java.lang.String toString()>();
return v16;
}
public static boolean containsTypeVariables(java.lang.reflect.Type)
{
int v4, v8, v9;
boolean v1, v11, v12, v15, v18, v19, v2, v20, v22, v5, v6;
java.lang.reflect.Type v0, v10, v14, v17, v21;
java.lang.reflect.TypeVariable[] v3;
java.lang.reflect.Type[] v13, v16, v7;
v0 := @parameter0: java.lang.reflect.Type;
v1 = v0 instanceof java.lang.reflect.TypeVariable;
if v1 == 0 goto label01;
return 1;
label01:
v2 = v0 instanceof java.lang.Class;
if v2 == 0 goto label04;
v3 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();
v4 = lengthof v3;
if v4 <= 0 goto label02;
v5 = 1;
goto label03;
label02:
v5 = 0;
label03:
return v5;
label04:
v6 = v0 instanceof java.lang.reflect.ParameterizedType;
if v6 == 0 goto label08;
v7 = interfaceinvoke v0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v8 = lengthof v7;
v9 = 0;
label05:
if v9 >= v8 goto label07;
v10 = v7[v9];
v11 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean containsTypeVariables(java.lang.reflect.Type)>(v10);
if v11 == 0 goto label06;
return 1;
label06:
v9 = v9 + 1;
goto label05;
label07:
return 0;
label08:
v12 = v0 instanceof java.lang.reflect.WildcardType;
if v12 == 0 goto label12;
v13 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type[] getImplicitLowerBounds(java.lang.reflect.WildcardType)>(v0);
v14 = v13[0];
v15 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean containsTypeVariables(java.lang.reflect.Type)>(v14);
if v15 != 0 goto label09;
v16 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type[] getImplicitUpperBounds(java.lang.reflect.WildcardType)>(v0);
v17 = v16[0];
v18 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean containsTypeVariables(java.lang.reflect.Type)>(v17);
if v18 == 0 goto label10;
label09:
v19 = 1;
goto label11;
label10:
v19 = 0;
label11:
return v19;
label12:
v20 = v0 instanceof java.lang.reflect.GenericArrayType;
if v20 == 0 goto label13;
v21 = interfaceinvoke v0.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();
v22 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean containsTypeVariables(java.lang.reflect.Type)>(v21);
return v22;
label13:
return 0;
}
private static boolean containsVariableTypeSameParametrizedTypeBound(java.lang.reflect.TypeVariable, java.lang.reflect.ParameterizedType)
{
java.lang.reflect.ParameterizedType v1;
java.lang.reflect.TypeVariable v0;
java.lang.reflect.Type[] v2;
boolean v3;
v0 := @parameter0: java.lang.reflect.TypeVariable;
v1 := @parameter1: java.lang.reflect.ParameterizedType;
v2 = interfaceinvoke v0.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>(v2, v1);
return v3;
}
public static java.util.Map determineTypeArguments(java.lang.Class, java.lang.reflect.ParameterizedType)
{
java.lang.Object[] v2, v3;
java.lang.reflect.ParameterizedType v1;
java.lang.reflect.Type v8;
java.util.Map v10, v12, v7;
java.lang.Class v0, v11, v4;
boolean v5, v6, v9;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.reflect.ParameterizedType;
v2 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v0, "cls", v2);
v3 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v1, "superParameterizedType", v3);
v4 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class getRawType(java.lang.reflect.ParameterizedType)>(v1);
v5 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.Class)>(v0, v4);
if v5 != 0 goto label1;
return null;
label1:
v6 = virtualinvoke v0.<java.lang.Object: boolean equals(java.lang.Object)>(v4);
if v6 == 0 goto label2;
v7 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.util.Map getTypeArguments(java.lang.reflect.ParameterizedType,java.lang.Class,java.util.Map)>(v1, v4, null);
return v7;
label2:
v8 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type getClosestParentType(java.lang.Class,java.lang.Class)>(v0, v4);
v9 = v8 instanceof java.lang.Class;
if v9 == 0 goto label3;
v10 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.util.Map determineTypeArguments(java.lang.Class,java.lang.reflect.ParameterizedType)>(v8, v1);
return v10;
label3:
v11 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class getRawType(java.lang.reflect.ParameterizedType)>(v8);
v12 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.util.Map determineTypeArguments(java.lang.Class,java.lang.reflect.ParameterizedType)>(v11, v1);
staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: void mapTypeVariablesToArguments(java.lang.Class,java.lang.reflect.ParameterizedType,java.util.Map)>(v0, v8, v12);
return v12;
}
private static boolean equals(java.lang.reflect.GenericArrayType, java.lang.reflect.Type)
{
java.lang.reflect.GenericArrayType v0;
java.lang.reflect.Type v1, v3, v4;
boolean v2, v5, v6;
v0 := @parameter0: java.lang.reflect.GenericArrayType;
v1 := @parameter1: java.lang.reflect.Type;
v2 = v1 instanceof java.lang.reflect.GenericArrayType;
if v2 == 0 goto label1;
v3 = interfaceinvoke v0.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();
v4 = interfaceinvoke v1.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();
v5 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean equals(java.lang.reflect.Type,java.lang.reflect.Type)>(v3, v4);
if v5 == 0 goto label1;
v6 = 1;
goto label2;
label1:
v6 = 0;
label2:
return v6;
}
private static boolean equals(java.lang.reflect.ParameterizedType, java.lang.reflect.Type)
{
java.lang.reflect.ParameterizedType v0;
java.lang.reflect.Type v1, v3, v4, v6, v7;
java.lang.reflect.Type[] v10, v9;
boolean v11, v2, v5, v8;
v0 := @parameter0: java.lang.reflect.ParameterizedType;
v1 := @parameter1: java.lang.reflect.Type;
v2 = v1 instanceof java.lang.reflect.ParameterizedType;
if v2 == 0 goto label1;
v3 = interfaceinvoke v0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
v4 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
v5 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean equals(java.lang.reflect.Type,java.lang.reflect.Type)>(v3, v4);
if v5 == 0 goto label1;
v6 = interfaceinvoke v0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();
v7 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();
v8 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean equals(java.lang.reflect.Type,java.lang.reflect.Type)>(v6, v7);
if v8 == 0 goto label1;
v9 = interfaceinvoke v0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v10 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v11 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean equals(java.lang.reflect.Type[],java.lang.reflect.Type[])>(v9, v10);
return v11;
label1:
return 0;
}
public static boolean equals(java.lang.reflect.Type, java.lang.reflect.Type)
{
java.lang.reflect.Type v0, v1;
boolean v2, v3, v4, v5, v6, v7, v8;
v0 := @parameter0: java.lang.reflect.Type;
v1 := @parameter1: java.lang.reflect.Type;
v2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(v0, v1);
if v2 == 0 goto label1;
return 1;
label1:
v3 = v0 instanceof java.lang.reflect.ParameterizedType;
if v3 == 0 goto label2;
v4 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean equals(java.lang.reflect.ParameterizedType,java.lang.reflect.Type)>(v0, v1);
return v4;
label2:
v5 = v0 instanceof java.lang.reflect.GenericArrayType;
if v5 == 0 goto label3;
v6 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean equals(java.lang.reflect.GenericArrayType,java.lang.reflect.Type)>(v0, v1);
return v6;
label3:
v7 = v0 instanceof java.lang.reflect.WildcardType;
if v7 == 0 goto label4;
v8 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean equals(java.lang.reflect.WildcardType,java.lang.reflect.Type)>(v0, v1);
return v8;
label4:
return 0;
}
private static boolean equals(java.lang.reflect.Type[], java.lang.reflect.Type[])
{
java.lang.reflect.Type v6, v7;
int v2, v3, v4, v5;
java.lang.reflect.Type[] v0, v1;
boolean v8;
v0 := @parameter0: java.lang.reflect.Type[];
v1 := @parameter1: java.lang.reflect.Type[];
v2 = lengthof v0;
v3 = lengthof v1;
if v2 != v3 goto label4;
v4 = 0;
label1:
v5 = lengthof v0;
if v4 >= v5 goto label3;
v6 = v0[v4];
v7 = v1[v4];
v8 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean equals(java.lang.reflect.Type,java.lang.reflect.Type)>(v6, v7);
if v8 != 0 goto label2;
return 0;
label2:
v4 = v4 + 1;
goto label1;
label3:
return 1;
label4:
return 0;
}
private static boolean equals(java.lang.reflect.WildcardType, java.lang.reflect.Type)
{
java.lang.reflect.WildcardType v0;
java.lang.reflect.Type v1;
java.lang.reflect.Type[] v3, v4, v6, v7;
boolean v2, v5, v8, v9;
v0 := @parameter0: java.lang.reflect.WildcardType;
v1 := @parameter1: java.lang.reflect.Type;
v2 = v1 instanceof java.lang.reflect.WildcardType;
if v2 == 0 goto label3;
v3 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type[] getImplicitLowerBounds(java.lang.reflect.WildcardType)>(v0);
v4 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type[] getImplicitLowerBounds(java.lang.reflect.WildcardType)>(v1);
v5 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean equals(java.lang.reflect.Type[],java.lang.reflect.Type[])>(v3, v4);
if v5 == 0 goto label1;
v6 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type[] getImplicitUpperBounds(java.lang.reflect.WildcardType)>(v0);
v7 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type[] getImplicitUpperBounds(java.lang.reflect.WildcardType)>(v1);
v8 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean equals(java.lang.reflect.Type[],java.lang.reflect.Type[])>(v6, v7);
if v8 == 0 goto label1;
v9 = 1;
goto label2;
label1:
v9 = 0;
label2:
return v9;
label3:
return 0;
}
private static java.lang.reflect.Type[] extractTypeArgumentsFrom(java.util.Map, java.lang.reflect.TypeVariable[])
{
java.lang.Object[] v9;
java.lang.reflect.TypeVariable v7;
java.lang.reflect.TypeVariable[] v1;
java.util.Map v0;
int v11, v2, v4, v5, v6;
java.lang.reflect.Type[] v3;
java.lang.Object v12;
java.lang.String v10;
boolean v8;
v0 := @parameter0: java.util.Map;
v1 := @parameter1: java.lang.reflect.TypeVariable[];
v2 = lengthof v1;
v3 = newarray (java.lang.reflect.Type)[v2];
v4 = 0;
v5 = lengthof v1;
v6 = 0;
label1:
if v6 >= v5 goto label2;
v7 = v1[v6];
v8 = interfaceinvoke v0.<java.util.Map: boolean containsKey(java.lang.Object)>(v7);
v9 = newarray (java.lang.Object)[1];
v10 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.String toString(java.lang.reflect.Type)>(v7);
v9[0] = v10;
staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>(v8, "missing argument mapping for %s", v9);
v11 = v4;
v4 = v4 + 1;
v12 = interfaceinvoke v0.<java.util.Map: java.lang.Object get(java.lang.Object)>(v7);
v3[v11] = v12;
v6 = v6 + 1;
goto label1;
label2:
return v3;
}
private static int[] findRecursiveTypes(java.lang.reflect.ParameterizedType)
{
java.lang.Object[] v4;
java.lang.reflect.ParameterizedType v0;
int[] v5;
java.lang.reflect.Type v10, v8;
int v3, v6, v7;
java.lang.reflect.Type[] v1, v2;
boolean v11, v9;
v0 := @parameter0: java.lang.reflect.ParameterizedType;
v1 = interfaceinvoke v0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v2 = interfaceinvoke v0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v3 = lengthof v2;
v4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(v1, v3);
v5 = newarray (int)[0];
v6 = 0;
label1:
v7 = lengthof v4;
if v6 >= v7 goto label3;
v8 = v4[v6];
v9 = v8 instanceof java.lang.reflect.TypeVariable;
if v9 == 0 goto label2;
v10 = v4[v6];
v11 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean containsVariableTypeSameParametrizedTypeBound(java.lang.reflect.TypeVariable,java.lang.reflect.ParameterizedType)>(v10, v0);
if v11 == 0 goto label2;
v5 = staticinvoke <org.apache.commons.lang3.ArrayUtils: int[] add(int[],int)>(v5, v6);
label2:
v6 = v6 + 1;
goto label1;
label3:
return v5;
}
public static java.lang.reflect.GenericArrayType genericArrayType(java.lang.reflect.Type)
{
org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl v1;
java.lang.Object[] v2;
java.lang.reflect.Type v0;
java.lang.Object v3;
v0 := @parameter0: java.lang.reflect.Type;
v1 = new org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl;
v2 = newarray (java.lang.Object)[0];
v3 = staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v0, "componentType", v2);
specialinvoke v1.<org.apache.commons.lang3.reflect.TypeUtils$GenericArrayTypeImpl: void <init>(java.lang.reflect.Type)>(v3);
return v1;
}
private static java.lang.String genericArrayTypeToString(java.lang.reflect.GenericArrayType)
{
java.lang.reflect.GenericArrayType v0;
java.lang.Object[] v1;
java.lang.reflect.Type v2;
java.lang.String v3, v4;
v0 := @parameter0: java.lang.reflect.GenericArrayType;
v1 = newarray (java.lang.Object)[1];
v2 = interfaceinvoke v0.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();
v3 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.String toString(java.lang.reflect.Type)>(v2);
v1[0] = v3;
v4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s[]", v1);
return v4;
}
public static java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)
{
java.lang.reflect.Type v0, v5;
java.lang.Class v3;
boolean v1, v2, v4;
v0 := @parameter0: java.lang.reflect.Type;
v1 = v0 instanceof java.lang.Class;
if v1 == 0 goto label3;
v2 = virtualinvoke v0.<java.lang.Class: boolean isArray()>();
if v2 == 0 goto label1;
v3 = virtualinvoke v0.<java.lang.Class: java.lang.Class getComponentType()>();
goto label2;
label1:
v3 = null;
label2:
return v3;
label3:
v4 = v0 instanceof java.lang.reflect.GenericArrayType;
if v4 == 0 goto label4;
v5 = interfaceinvoke v0.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();
return v5;
label4:
return null;
}
private static java.lang.reflect.Type getClosestParentType(java.lang.Class, java.lang.Class)
{
java.lang.IllegalStateException v10;
java.lang.reflect.Type v14, v4, v7;
int v5, v6;
java.lang.reflect.Type[] v3;
java.lang.Class v0, v1;
java.lang.String v11;
boolean v12, v13, v2, v8, v9;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Class;
v2 = virtualinvoke v1.<java.lang.Class: boolean isInterface()>();
if v2 == 0 goto label6;
v3 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>();
v4 = null;
v5 = lengthof v3;
v6 = 0;
label1:
if v6 >= v5 goto label5;
v7 = v3[v6];
v8 = v7 instanceof java.lang.reflect.ParameterizedType;
if v8 == 0 goto label2;
staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class getRawType(java.lang.reflect.ParameterizedType)>(v7);
goto label3;
label2:
v9 = v7 instanceof java.lang.Class;
if v9 != 0 goto label3;
v10 = new java.lang.IllegalStateException;
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.reflect.Type)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unexpected generic interface type found: \u0001");
specialinvoke v10.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v11);
throw v10;
label3:
v12 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.Class)>(v7, v1);
if v12 == 0 goto label4;
v13 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>(v4, v7);
if v13 == 0 goto label4;
v4 = v7;
label4:
v6 = v6 + 1;
goto label1;
label5:
if v4 == null goto label6;
return v4;
label6:
v14 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();
return v14;
}
public static java.lang.reflect.Type[] getImplicitBounds(java.lang.reflect.TypeVariable)
{
java.lang.Object[] v1;
java.lang.reflect.TypeVariable v0;
int v3;
java.lang.reflect.Type[] v2, v4;
v0 := @parameter0: java.lang.reflect.TypeVariable;
v1 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v0, "typeVariable", v1);
v2 = interfaceinvoke v0.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
v3 = lengthof v2;
if v3 != 0 goto label1;
v4 = newarray (java.lang.reflect.Type)[1];
v4[0] = class "Ljava/lang/Object;";
goto label2;
label1:
v4 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type[] normalizeUpperBounds(java.lang.reflect.Type[])>(v2);
label2:
return v4;
}
public static java.lang.reflect.Type[] getImplicitLowerBounds(java.lang.reflect.WildcardType)
{
java.lang.Object[] v1;
java.lang.reflect.WildcardType v0;
int v3;
java.lang.reflect.Type[] v2, v4;
v0 := @parameter0: java.lang.reflect.WildcardType;
v1 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v0, "wildcardType", v1);
v2 = interfaceinvoke v0.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();
v3 = lengthof v2;
if v3 != 0 goto label1;
v4 = newarray (java.lang.reflect.Type)[1];
v4[0] = null;
goto label2;
label1:
v4 = v2;
label2:
return v4;
}
public static java.lang.reflect.Type[] getImplicitUpperBounds(java.lang.reflect.WildcardType)
{
java.lang.Object[] v1;
java.lang.reflect.WildcardType v0;
int v3;
java.lang.reflect.Type[] v2, v4;
v0 := @parameter0: java.lang.reflect.WildcardType;
v1 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v0, "wildcardType", v1);
v2 = interfaceinvoke v0.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();
v3 = lengthof v2;
if v3 != 0 goto label1;
v4 = newarray (java.lang.reflect.Type)[1];
v4[0] = class "Ljava/lang/Object;";
goto label2;
label1:
v4 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type[] normalizeUpperBounds(java.lang.reflect.Type[])>(v2);
label2:
return v4;
}
private static java.lang.Class getRawType(java.lang.reflect.ParameterizedType)
{
java.lang.IllegalStateException v3;
java.lang.reflect.ParameterizedType v0;
java.lang.reflect.Type v1;
java.lang.String v4;
boolean v2;
v0 := @parameter0: java.lang.reflect.ParameterizedType;
v1 = interfaceinvoke v0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
v2 = v1 instanceof java.lang.Class;
if v2 != 0 goto label1;
v3 = new java.lang.IllegalStateException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.reflect.Type)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Wait... What!? Type of rawType: \u0001");
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v4);
throw v3;
label1:
return v1;
}
public static java.lang.Class getRawType(java.lang.reflect.Type, java.lang.reflect.Type)
{
java.util.Map v8;
java.lang.String v18;
boolean v11, v16, v2, v3, v5, v7;
java.lang.reflect.GenericDeclaration v6;
java.lang.IllegalArgumentException v17;
java.lang.reflect.Type v0, v1, v12;
java.lang.Class v10, v13, v15, v4;
java.lang.Object v14, v9;
v0 := @parameter0: java.lang.reflect.Type;
v1 := @parameter1: java.lang.reflect.Type;
v2 = v0 instanceof java.lang.Class;
if v2 == 0 goto label1;
return v0;
label1:
v3 = v0 instanceof java.lang.reflect.ParameterizedType;
if v3 == 0 goto label2;
v4 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class getRawType(java.lang.reflect.ParameterizedType)>(v0);
return v4;
label2:
v5 = v0 instanceof java.lang.reflect.TypeVariable;
if v5 == 0 goto label7;
if v1 != null goto label3;
return null;
label3:
v6 = interfaceinvoke v0.<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>();
v7 = v6 instanceof java.lang.Class;
if v7 != 0 goto label4;
return null;
label4:
v8 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.util.Map getTypeArguments(java.lang.reflect.Type,java.lang.Class)>(v1, v6);
if v8 != null goto label5;
return null;
label5:
v9 = interfaceinvoke v8.<java.util.Map: java.lang.Object get(java.lang.Object)>(v0);
if v9 != null goto label6;
return null;
label6:
v10 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class getRawType(java.lang.reflect.Type,java.lang.reflect.Type)>(v9, v1);
return v10;
label7:
v11 = v0 instanceof java.lang.reflect.GenericArrayType;
if v11 == 0 goto label8;
v12 = interfaceinvoke v0.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();
v13 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class getRawType(java.lang.reflect.Type,java.lang.reflect.Type)>(v12, v1);
v14 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(v13, 0);
v15 = virtualinvoke v14.<java.lang.Object: java.lang.Class getClass()>();
return v15;
label8:
v16 = v0 instanceof java.lang.reflect.WildcardType;
if v16 == 0 goto label9;
return null;
label9:
v17 = new java.lang.IllegalArgumentException;
v18 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.reflect.Type)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unknown type: \u0001");
specialinvoke v17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v18);
throw v17;
}
private static java.util.Map getTypeArguments(java.lang.Class, java.lang.Class, java.util.Map)
{
java.util.HashMap v6, v7;
java.lang.reflect.Type v9;
java.util.Map v10, v2;
java.lang.Class v0, v1;
boolean v3, v4, v5, v8;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Class;
v2 := @parameter2: java.util.Map;
v3 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.Class)>(v0, v1);
if v3 != 0 goto label1;
return null;
label1:
v4 = virtualinvoke v0.<java.lang.Class: boolean isPrimitive()>();
if v4 == 0 goto label3;
v5 = virtualinvoke v1.<java.lang.Class: boolean isPrimitive()>();
if v5 == 0 goto label2;
v6 = new java.util.HashMap;
specialinvoke v6.<java.util.HashMap: void <init>()>();
return v6;
label2:
v0 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.lang.Class primitiveToWrapper(java.lang.Class)>(v0);
label3:
if v2 != null goto label4;
v7 = new java.util.HashMap;
specialinvoke v7.<java.util.HashMap: void <init>()>();
goto label5;
label4:
v7 = new java.util.HashMap;
specialinvoke v7.<java.util.HashMap: void <init>(java.util.Map)>(v2);
label5:
v8 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(v0);
if v8 == 0 goto label6;
return v7;
label6:
v9 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type getClosestParentType(java.lang.Class,java.lang.Class)>(v0, v1);
v10 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.util.Map getTypeArguments(java.lang.reflect.Type,java.lang.Class,java.util.Map)>(v9, v1, v7);
return v10;
}
public static java.util.Map getTypeArguments(java.lang.reflect.ParameterizedType)
{
java.lang.Class v1;
java.lang.reflect.ParameterizedType v0;
java.util.Map v2;
v0 := @parameter0: java.lang.reflect.ParameterizedType;
v1 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class getRawType(java.lang.reflect.ParameterizedType)>(v0);
v2 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.util.Map getTypeArguments(java.lang.reflect.ParameterizedType,java.lang.Class,java.util.Map)>(v0, v1, null);
return v2;
}
private static java.util.Map getTypeArguments(java.lang.reflect.ParameterizedType, java.lang.Class, java.util.Map)
{
java.util.HashMap v9;
java.util.Map v19, v2, v8;
int v12, v13;
boolean v17, v4, v6;
java.lang.reflect.TypeVariable v15;
java.lang.reflect.ParameterizedType v0;
java.lang.reflect.Type v14, v18, v5;
java.lang.reflect.TypeVariable[] v11;
java.lang.reflect.Type[] v10;
java.lang.Class v1, v3, v7;
java.lang.Object v16;
v0 := @parameter0: java.lang.reflect.ParameterizedType;
v1 := @parameter1: java.lang.Class;
v2 := @parameter2: java.util.Map;
v3 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class getRawType(java.lang.reflect.ParameterizedType)>(v0);
v4 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.Class)>(v3, v1);
if v4 != 0 goto label1;
return null;
label1:
v5 = interfaceinvoke v0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();
v6 = v5 instanceof java.lang.reflect.ParameterizedType;
if v6 == 0 goto label2;
v7 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class getRawType(java.lang.reflect.ParameterizedType)>(v5);
v8 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.util.Map getTypeArguments(java.lang.reflect.ParameterizedType,java.lang.Class,java.util.Map)>(v5, v7, v2);
goto label5;
label2:
if v2 != null goto label3;
v9 = new java.util.HashMap;
specialinvoke v9.<java.util.HashMap: void <init>()>();
goto label4;
label3:
v9 = new java.util.HashMap;
specialinvoke v9.<java.util.HashMap: void <init>(java.util.Map)>(v2);
label4:
v8 = v9;
label5:
v10 = interfaceinvoke v0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v11 = virtualinvoke v3.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();
v12 = 0;
label6:
v13 = lengthof v11;
if v12 >= v13 goto label7;
v14 = v10[v12];
v15 = v11[v12];
v16 = interfaceinvoke v8.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>(v14, v14);
interfaceinvoke v8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v15, v16);
v12 = v12 + 1;
goto label6;
label7:
v17 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(v3);
if v17 == 0 goto label8;
return v8;
label8:
v18 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type getClosestParentType(java.lang.Class,java.lang.Class)>(v3, v1);
v19 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.util.Map getTypeArguments(java.lang.reflect.Type,java.lang.Class,java.util.Map)>(v18, v1, v8);
return v19;
}
public static java.util.Map getTypeArguments(java.lang.reflect.Type, java.lang.Class)
{
java.lang.Class v1;
java.lang.reflect.Type v0;
java.util.Map v2;
v0 := @parameter0: java.lang.reflect.Type;
v1 := @parameter1: java.lang.Class;
v2 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.util.Map getTypeArguments(java.lang.reflect.Type,java.lang.Class,java.util.Map)>(v0, v1, null);
return v2;
}
private static java.util.Map getTypeArguments(java.lang.reflect.Type, java.lang.Class, java.util.Map)
{
java.lang.IllegalStateException v26;
java.util.Map v11, v18, v2, v25, v4, v6;
int v14, v15, v21, v22;
java.lang.String v27;
boolean v12, v17, v19, v24, v3, v5, v7, v9;
java.lang.reflect.Type v0, v16, v23, v8;
java.lang.reflect.Type[] v13, v20;
java.lang.Class v1, v10;
v0 := @parameter0: java.lang.reflect.Type;
v1 := @parameter1: java.lang.Class;
v2 := @parameter2: java.util.Map;
v3 = v0 instanceof java.lang.Class;
if v3 == 0 goto label01;
v4 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.util.Map getTypeArguments(java.lang.Class,java.lang.Class,java.util.Map)>(v0, v1, v2);
return v4;
label01:
v5 = v0 instanceof java.lang.reflect.ParameterizedType;
if v5 == 0 goto label02;
v6 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.util.Map getTypeArguments(java.lang.reflect.ParameterizedType,java.lang.Class,java.util.Map)>(v0, v1, v2);
return v6;
label02:
v7 = v0 instanceof java.lang.reflect.GenericArrayType;
if v7 == 0 goto label05;
v8 = interfaceinvoke v0.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();
v9 = virtualinvoke v1.<java.lang.Class: boolean isArray()>();
if v9 == 0 goto label03;
v10 = virtualinvoke v1.<java.lang.Class: java.lang.Class getComponentType()>();
goto label04;
label03:
v10 = v1;
label04:
v11 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.util.Map getTypeArguments(java.lang.reflect.Type,java.lang.Class,java.util.Map)>(v8, v10, v2);
return v11;
label05:
v12 = v0 instanceof java.lang.reflect.WildcardType;
if v12 == 0 goto label09;
v13 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type[] getImplicitUpperBounds(java.lang.reflect.WildcardType)>(v0);
v14 = lengthof v13;
v15 = 0;
label06:
if v15 >= v14 goto label08;
v16 = v13[v15];
v17 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.Class)>(v16, v1);
if v17 == 0 goto label07;
v18 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.util.Map getTypeArguments(java.lang.reflect.Type,java.lang.Class,java.util.Map)>(v16, v1, v2);
return v18;
label07:
v15 = v15 + 1;
goto label06;
label08:
return null;
label09:
v19 = v0 instanceof java.lang.reflect.TypeVariable;
if v19 == 0 goto label13;
v20 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type[] getImplicitBounds(java.lang.reflect.TypeVariable)>(v0);
v21 = lengthof v20;
v22 = 0;
label10:
if v22 >= v21 goto label12;
v23 = v20[v22];
v24 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.Class)>(v23, v1);
if v24 == 0 goto label11;
v25 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.util.Map getTypeArguments(java.lang.reflect.Type,java.lang.Class,java.util.Map)>(v23, v1, v2);
return v25;
label11:
v22 = v22 + 1;
goto label10;
label12:
return null;
label13:
v26 = new java.lang.IllegalStateException;
v27 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.reflect.Type)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("found an unhandled type: \u0001");
specialinvoke v26.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v27);
throw v26;
}
public static boolean isArrayType(java.lang.reflect.Type)
{
java.lang.reflect.Type v0;
boolean v1, v2, v3, v4;
v0 := @parameter0: java.lang.reflect.Type;
v1 = v0 instanceof java.lang.reflect.GenericArrayType;
if v1 != 0 goto label1;
v2 = v0 instanceof java.lang.Class;
if v2 == 0 goto label2;
v3 = virtualinvoke v0.<java.lang.Class: boolean isArray()>();
if v3 == 0 goto label2;
label1:
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
return v4;
}
private static boolean isAssignable(java.lang.reflect.Type, java.lang.Class)
{
java.lang.IllegalStateException v24;
int v12, v13;
java.lang.String v25;
boolean v10, v15, v16, v17, v18, v2, v21, v22, v23, v3, v4, v5, v6, v7, v9;
java.lang.reflect.Type v0, v14, v19;
java.lang.reflect.Type[] v11;
java.lang.Class v1, v20, v8;
v0 := @parameter0: java.lang.reflect.Type;
v1 := @parameter1: java.lang.Class;
if v0 != null goto label04;
if v1 == null goto label01;
v2 = virtualinvoke v1.<java.lang.Class: boolean isPrimitive()>();
if v2 != 0 goto label02;
label01:
v3 = 1;
goto label03;
label02:
v3 = 0;
label03:
return v3;
label04:
if v1 != null goto label05;
return 0;
label05:
v4 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(v0);
if v4 == 0 goto label06;
return 1;
label06:
v5 = v0 instanceof java.lang.Class;
if v5 == 0 goto label07;
v6 = staticinvoke <org.apache.commons.lang3.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(v0, v1);
return v6;
label07:
v7 = v0 instanceof java.lang.reflect.ParameterizedType;
if v7 == 0 goto label08;
v8 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class getRawType(java.lang.reflect.ParameterizedType)>(v0);
v9 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.Class)>(v8, v1);
return v9;
label08:
v10 = v0 instanceof java.lang.reflect.TypeVariable;
if v10 == 0 goto label12;
v11 = interfaceinvoke v0.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
v12 = lengthof v11;
v13 = 0;
label09:
if v13 >= v12 goto label11;
v14 = v11[v13];
v15 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.Class)>(v14, v1);
if v15 == 0 goto label10;
return 1;
label10:
v13 = v13 + 1;
goto label09;
label11:
return 0;
label12:
v16 = v0 instanceof java.lang.reflect.GenericArrayType;
if v16 == 0 goto label16;
v17 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Object;");
if v17 != 0 goto label13;
v18 = virtualinvoke v1.<java.lang.Class: boolean isArray()>();
if v18 == 0 goto label14;
v19 = interfaceinvoke v0.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();
v20 = virtualinvoke v1.<java.lang.Class: java.lang.Class getComponentType()>();
v21 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.Class)>(v19, v20);
if v21 == 0 goto label14;
label13:
v22 = 1;
goto label15;
label14:
v22 = 0;
label15:
return v22;
label16:
v23 = v0 instanceof java.lang.reflect.WildcardType;
if v23 == 0 goto label17;
return 0;
label17:
v24 = new java.lang.IllegalStateException;
v25 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.reflect.Type)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("found an unhandled type: \u0001");
specialinvoke v24.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v25);
throw v24;
}
private static boolean isAssignable(java.lang.reflect.Type, java.lang.reflect.GenericArrayType, java.util.Map)
{
java.lang.reflect.GenericArrayType v1;
java.lang.IllegalStateException v26;
java.util.Map v2;
int v15, v16, v21, v22;
java.lang.String v27;
boolean v10, v12, v13, v18, v19, v24, v25, v3, v5, v6, v8, v9;
java.lang.reflect.Type v0, v11, v17, v23, v4;
java.lang.reflect.Type[] v14, v20;
java.lang.Class v7;
v0 := @parameter0: java.lang.reflect.Type;
v1 := @parameter1: java.lang.reflect.GenericArrayType;
v2 := @parameter2: java.util.Map;
if v0 != null goto label01;
return 1;
label01:
if v1 != null goto label02;
return 0;
label02:
v3 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(v0);
if v3 == 0 goto label03;
return 1;
label03:
v4 = interfaceinvoke v1.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();
v5 = v0 instanceof java.lang.Class;
if v5 == 0 goto label06;
v6 = virtualinvoke v0.<java.lang.Class: boolean isArray()>();
if v6 == 0 goto label04;
v7 = virtualinvoke v0.<java.lang.Class: java.lang.Class getComponentType()>();
v8 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type,java.util.Map)>(v7, v4, v2);
if v8 == 0 goto label04;
v9 = 1;
goto label05;
label04:
v9 = 0;
label05:
return v9;
label06:
v10 = v0 instanceof java.lang.reflect.GenericArrayType;
if v10 == 0 goto label07;
v11 = interfaceinvoke v0.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();
v12 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type,java.util.Map)>(v11, v4, v2);
return v12;
label07:
v13 = v0 instanceof java.lang.reflect.WildcardType;
if v13 == 0 goto label11;
v14 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type[] getImplicitUpperBounds(java.lang.reflect.WildcardType)>(v0);
v15 = lengthof v14;
v16 = 0;
label08:
if v16 >= v15 goto label10;
v17 = v14[v16];
v18 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>(v17, v1);
if v18 == 0 goto label09;
return 1;
label09:
v16 = v16 + 1;
goto label08;
label10:
return 0;
label11:
v19 = v0 instanceof java.lang.reflect.TypeVariable;
if v19 == 0 goto label15;
v20 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type[] getImplicitBounds(java.lang.reflect.TypeVariable)>(v0);
v21 = lengthof v20;
v22 = 0;
label12:
if v22 >= v21 goto label14;
v23 = v20[v22];
v24 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type)>(v23, v1);
if v24 == 0 goto label13;
return 1;
label13:
v22 = v22 + 1;
goto label12;
label14:
return 0;
label15:
v25 = v0 instanceof java.lang.reflect.ParameterizedType;
if v25 == 0 goto label16;
return 0;
label16:
v26 = new java.lang.IllegalStateException;
v27 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.reflect.Type)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("found an unhandled type: \u0001");
specialinvoke v26.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v27);
throw v26;
}
private static boolean isAssignable(java.lang.reflect.Type, java.lang.reflect.ParameterizedType, java.util.Map)
{
java.util.Map v2, v6, v8;
boolean v11, v15, v16, v17, v18, v3, v4, v7;
java.util.Iterator v10;
java.util.Set v9;
java.lang.reflect.ParameterizedType v1;
java.lang.reflect.Type v0, v13, v14;
java.lang.Class v5;
java.lang.Object v12;
v0 := @parameter0: java.lang.reflect.Type;
v1 := @parameter1: java.lang.reflect.ParameterizedType;
v2 := @parameter2: java.util.Map;
if v0 != null goto label01;
return 1;
label01:
if v1 != null goto label02;
return 0;
label02:
v3 = v0 instanceof java.lang.reflect.GenericArrayType;
if v3 == 0 goto label03;
return 0;
label03:
v4 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(v0);
if v4 == 0 goto label04;
return 1;
label04:
v5 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class getRawType(java.lang.reflect.ParameterizedType)>(v1);
v6 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.util.Map getTypeArguments(java.lang.reflect.Type,java.lang.Class,java.util.Map)>(v0, v5, null);
if v6 != null goto label05;
return 0;
label05:
v7 = interfaceinvoke v6.<java.util.Map: boolean isEmpty()>();
if v7 == 0 goto label06;
return 1;
label06:
v8 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.util.Map getTypeArguments(java.lang.reflect.ParameterizedType,java.lang.Class,java.util.Map)>(v1, v5, v2);
v9 = interfaceinvoke v8.<java.util.Map: java.util.Set keySet()>();
v10 = interfaceinvoke v9.<java.util.Set: java.util.Iterator iterator()>();
label07:
v11 = interfaceinvoke v10.<java.util.Iterator: boolean hasNext()>();
if v11 == 0 goto label10;
v12 = interfaceinvoke v10.<java.util.Iterator: java.lang.Object next()>();
v13 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type unrollVariableAssignments(java.lang.reflect.TypeVariable,java.util.Map)>(v12, v8);
v14 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type unrollVariableAssignments(java.lang.reflect.TypeVariable,java.util.Map)>(v12, v6);
if v13 != null goto label08;
v15 = v14 instanceof java.lang.Class;
if v15 != 0 goto label07;
label08:
if v14 == null goto label07;
if v13 == null goto label07;
v16 = virtualinvoke v13.<java.lang.Object: boolean equals(java.lang.Object)>(v14);
if v16 != 0 goto label07;
v17 = v13 instanceof java.lang.reflect.WildcardType;
if v17 == 0 goto label09;
v18 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type,java.util.Map)>(v14, v13, v2);
if v18 != 0 goto label07;
label09:
return 0;
label10:
return 1;
}
public static boolean isAssignable(java.lang.reflect.Type, java.lang.reflect.Type)
{
java.lang.reflect.Type v0, v1;
boolean v2;
v0 := @parameter0: java.lang.reflect.Type;
v1 := @parameter1: java.lang.reflect.Type;
v2 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type,java.util.Map)>(v0, v1, null);
return v2;
}
private static boolean isAssignable(java.lang.reflect.Type, java.lang.reflect.Type, java.util.Map)
{
java.lang.IllegalStateException v13;
java.lang.reflect.Type v0, v1;
java.util.Map v2;
java.lang.String v14;
boolean v10, v11, v12, v3, v4, v5, v6, v7, v8, v9;
v0 := @parameter0: java.lang.reflect.Type;
v1 := @parameter1: java.lang.reflect.Type;
v2 := @parameter2: java.util.Map;
if v1 == null goto label1;
v3 = v1 instanceof java.lang.Class;
if v3 == 0 goto label2;
label1:
v4 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.Class)>(v0, v1);
return v4;
label2:
v5 = v1 instanceof java.lang.reflect.ParameterizedType;
if v5 == 0 goto label3;
v6 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.ParameterizedType,java.util.Map)>(v0, v1, v2);
return v6;
label3:
v7 = v1 instanceof java.lang.reflect.GenericArrayType;
if v7 == 0 goto label4;
v8 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.GenericArrayType,java.util.Map)>(v0, v1, v2);
return v8;
label4:
v9 = v1 instanceof java.lang.reflect.WildcardType;
if v9 == 0 goto label5;
v10 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.WildcardType,java.util.Map)>(v0, v1, v2);
return v10;
label5:
v11 = v1 instanceof java.lang.reflect.TypeVariable;
if v11 == 0 goto label6;
v12 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.util.Map)>(v0, v1, v2);
return v12;
label6:
v13 = new java.lang.IllegalStateException;
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.reflect.Type)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("found an unhandled type: \u0001");
specialinvoke v13.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v14);
throw v13;
}
private static boolean isAssignable(java.lang.reflect.Type, java.lang.reflect.TypeVariable, java.util.Map)
{
java.lang.IllegalStateException v14;
java.util.Map v2;
int v6, v7;
java.lang.String v15;
boolean v10, v11, v12, v13, v3, v4, v9;
java.lang.reflect.TypeVariable v1;
java.lang.reflect.Type v0, v8;
java.lang.reflect.Type[] v5;
v0 := @parameter0: java.lang.reflect.Type;
v1 := @parameter1: java.lang.reflect.TypeVariable;
v2 := @parameter2: java.util.Map;
if v0 != null goto label1;
return 1;
label1:
if v1 != null goto label2;
return 0;
label2:
v3 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(v0);
if v3 == 0 goto label3;
return 1;
label3:
v4 = v0 instanceof java.lang.reflect.TypeVariable;
if v4 == 0 goto label6;
v5 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type[] getImplicitBounds(java.lang.reflect.TypeVariable)>(v0);
v6 = lengthof v5;
v7 = 0;
label4:
if v7 >= v6 goto label6;
v8 = v5[v7];
v9 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.TypeVariable,java.util.Map)>(v8, v1, v2);
if v9 == 0 goto label5;
return 1;
label5:
v7 = v7 + 1;
goto label4;
label6:
v10 = v0 instanceof java.lang.Class;
if v10 != 0 goto label7;
v11 = v0 instanceof java.lang.reflect.ParameterizedType;
if v11 != 0 goto label7;
v12 = v0 instanceof java.lang.reflect.GenericArrayType;
if v12 != 0 goto label7;
v13 = v0 instanceof java.lang.reflect.WildcardType;
if v13 == 0 goto label8;
label7:
return 0;
label8:
v14 = new java.lang.IllegalStateException;
v15 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.reflect.Type)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("found an unhandled type: \u0001");
specialinvoke v14.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v15);
throw v14;
}
private static boolean isAssignable(java.lang.reflect.Type, java.lang.reflect.WildcardType, java.util.Map)
{
java.util.Map v2;
boolean v16, v24, v29, v3, v34, v6;
java.lang.reflect.Type v0, v11, v12, v15, v19, v20, v23, v27, v28, v32, v33;
java.lang.reflect.Type[] v4, v5, v7, v8;
java.lang.reflect.WildcardType v1;
int v10, v13, v14, v17, v18, v21, v22, v25, v26, v30, v31, v9;
v0 := @parameter0: java.lang.reflect.Type;
v1 := @parameter1: java.lang.reflect.WildcardType;
v2 := @parameter2: java.util.Map;
if v0 != null goto label01;
return 1;
label01:
if v1 != null goto label02;
return 0;
label02:
v3 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(v0);
if v3 == 0 goto label03;
return 1;
label03:
v4 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type[] getImplicitUpperBounds(java.lang.reflect.WildcardType)>(v1);
v5 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type[] getImplicitLowerBounds(java.lang.reflect.WildcardType)>(v1);
v6 = v0 instanceof java.lang.reflect.WildcardType;
if v6 == 0 goto label14;
v7 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type[] getImplicitUpperBounds(java.lang.reflect.WildcardType)>(v0);
v8 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type[] getImplicitLowerBounds(java.lang.reflect.WildcardType)>(v0);
v9 = lengthof v4;
v10 = 0;
label04:
if v10 >= v9 goto label08;
v11 = v4[v10];
v12 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type substituteTypeVariables(java.lang.reflect.Type,java.util.Map)>(v11, v2);
v13 = lengthof v7;
v14 = 0;
label05:
if v14 >= v13 goto label07;
v15 = v7[v14];
v16 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type,java.util.Map)>(v15, v12, v2);
if v16 != 0 goto label06;
return 0;
label06:
v14 = v14 + 1;
goto label05;
label07:
v10 = v10 + 1;
goto label04;
label08:
v17 = lengthof v5;
v18 = 0;
label09:
if v18 >= v17 goto label13;
v19 = v5[v18];
v20 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type substituteTypeVariables(java.lang.reflect.Type,java.util.Map)>(v19, v2);
v21 = lengthof v8;
v22 = 0;
label10:
if v22 >= v21 goto label12;
v23 = v8[v22];
v24 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type,java.util.Map)>(v20, v23, v2);
if v24 != 0 goto label11;
return 0;
label11:
v22 = v22 + 1;
goto label10;
label12:
v18 = v18 + 1;
goto label09;
label13:
return 1;
label14:
v25 = lengthof v4;
v26 = 0;
label15:
if v26 >= v25 goto label17;
v27 = v4[v26];
v28 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type substituteTypeVariables(java.lang.reflect.Type,java.util.Map)>(v27, v2);
v29 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type,java.util.Map)>(v0, v28, v2);
if v29 != 0 goto label16;
return 0;
label16:
v26 = v26 + 1;
goto label15;
label17:
v30 = lengthof v5;
v31 = 0;
label18:
if v31 >= v30 goto label20;
v32 = v5[v31];
v33 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type substituteTypeVariables(java.lang.reflect.Type,java.util.Map)>(v32, v2);
v34 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type,java.util.Map)>(v33, v0, v2);
if v34 != 0 goto label19;
return 0;
label19:
v31 = v31 + 1;
goto label18;
label20:
return 1;
}
public static boolean isInstance(java.lang.Object, java.lang.reflect.Type)
{
java.lang.reflect.Type v1;
java.lang.Class v5;
java.lang.Object v0;
boolean v2, v3, v4;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.reflect.Type;
if v1 != null goto label1;
return 0;
label1:
if v0 != null goto label4;
v2 = v1 instanceof java.lang.Class;
if v2 == 0 goto label2;
v3 = virtualinvoke v1.<java.lang.Class: boolean isPrimitive()>();
if v3 != 0 goto label3;
label2:
v4 = 1;
goto label5;
label3:
v4 = 0;
goto label5;
label4:
v5 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v4 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type,java.util.Map)>(v5, v1, null);
label5:
return v4;
}
private static void mapTypeVariablesToArguments(java.lang.Class, java.lang.reflect.ParameterizedType, java.util.Map)
{
java.util.Map v2;
int v10, v11;
boolean v14, v15, v4;
java.lang.reflect.TypeVariable v12;
java.util.List v9;
java.lang.reflect.ParameterizedType v1;
java.lang.reflect.Type v13, v3;
java.lang.reflect.TypeVariable[] v7, v8;
java.lang.reflect.Type[] v5;
java.lang.Class v0, v6;
java.lang.Object v16;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.reflect.ParameterizedType;
v2 := @parameter2: java.util.Map;
v3 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();
v4 = v3 instanceof java.lang.reflect.ParameterizedType;
if v4 == 0 goto label1;
staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: void mapTypeVariablesToArguments(java.lang.Class,java.lang.reflect.ParameterizedType,java.util.Map)>(v0, v3, v2);
label1:
v5 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v6 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.Class getRawType(java.lang.reflect.ParameterizedType)>(v1);
v7 = virtualinvoke v6.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();
v8 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();
v9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v8);
v10 = 0;
label2:
v11 = lengthof v5;
if v10 >= v11 goto label4;
v12 = v7[v10];
v13 = v5[v10];
v14 = interfaceinvoke v9.<java.util.List: boolean contains(java.lang.Object)>(v13);
if v14 == 0 goto label3;
v15 = interfaceinvoke v2.<java.util.Map: boolean containsKey(java.lang.Object)>(v12);
if v15 == 0 goto label3;
v16 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v12);
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v13, v16);
label3:
v10 = v10 + 1;
goto label2;
label4:
return;
}
public static java.lang.reflect.Type[] normalizeUpperBounds(java.lang.reflect.Type[])
{
java.lang.Object[] v1, v14;
java.util.HashSet v3;
java.lang.reflect.Type v11, v7;
int v10, v2, v4, v5, v6, v9;
java.lang.reflect.Type[] v0, v13;
boolean v12, v8;
v0 := @parameter0: java.lang.reflect.Type[];
v1 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v0, "bounds", v1);
v2 = lengthof v0;
if v2 >= 2 goto label1;
return v0;
label1:
v3 = new java.util.HashSet;
v4 = lengthof v0;
specialinvoke v3.<java.util.HashSet: void <init>(int)>(v4);
v5 = lengthof v0;
v6 = 0;
label2:
if v6 >= v5 goto label7;
v7 = v0[v6];
v8 = 0;
v9 = lengthof v0;
v10 = 0;
label3:
if v10 >= v9 goto label5;
v11 = v0[v10];
if v7 == v11 goto label4;
v12 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type,java.util.Map)>(v11, v7, null);
if v12 == 0 goto label4;
v8 = 1;
goto label5;
label4:
v10 = v10 + 1;
goto label3;
label5:
if v8 != 0 goto label6;
interfaceinvoke v3.<java.util.Set: boolean add(java.lang.Object)>(v7);
label6:
v6 = v6 + 1;
goto label2;
label7:
v13 = <org.apache.commons.lang3.ArrayUtils: java.lang.reflect.Type[] EMPTY_TYPE_ARRAY>;
v14 = interfaceinvoke v3.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(v13);
return v14;
}
public static final java.lang.reflect.ParameterizedType parameterize(java.lang.Class, java.util.Map)
{
java.lang.Object[] v2, v3;
java.lang.reflect.ParameterizedType v6;
java.lang.reflect.TypeVariable[] v4;
java.util.Map v1;
java.lang.reflect.Type[] v5;
java.lang.Class v0;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.util.Map;
v2 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v0, "rawClass", v2);
v3 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v1, "typeVariableMap", v3);
v4 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();
v5 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type[] extractTypeArgumentsFrom(java.util.Map,java.lang.reflect.TypeVariable[])>(v1, v4);
v6 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.ParameterizedType parameterizeWithOwner(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type[])>(null, v0, v5);
return v6;
}
public static final transient java.lang.reflect.ParameterizedType parameterize(java.lang.Class, java.lang.reflect.Type[])
{
java.lang.reflect.Type[] v1;
java.lang.Class v0;
java.lang.reflect.ParameterizedType v2;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.reflect.Type[];
v2 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.ParameterizedType parameterizeWithOwner(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type[])>(null, v0, v1);
return v2;
}
private static java.lang.String parameterizedTypeToString(java.lang.reflect.ParameterizedType)
{
int[] v10;
int v11;
java.lang.String v16, v4, v6, v7, v9;
boolean v5;
java.lang.reflect.ParameterizedType v0;
java.lang.reflect.Type v2, v3;
java.lang.reflect.Type[] v12, v14;
java.lang.StringBuilder v1, v13, v15, v8;
v0 := @parameter0: java.lang.reflect.ParameterizedType;
v1 = new java.lang.StringBuilder;
specialinvoke v1.<java.lang.StringBuilder: void <init>()>();
v2 = interfaceinvoke v0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();
v3 = interfaceinvoke v0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
if v2 != null goto label1;
v4 = virtualinvoke v3.<java.lang.Class: java.lang.String getName()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v4);
goto label4;
label1:
v5 = v2 instanceof java.lang.Class;
if v5 == 0 goto label2;
v6 = virtualinvoke v2.<java.lang.Class: java.lang.String getName()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v6);
goto label3;
label2:
v7 = virtualinvoke v2.<java.lang.Object: java.lang.String toString()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v7);
label3:
v8 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);
v9 = virtualinvoke v3.<java.lang.Class: java.lang.String getSimpleName()>();
virtualinvoke v8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v9);
label4:
v10 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: int[] findRecursiveTypes(java.lang.reflect.ParameterizedType)>(v0);
v11 = lengthof v10;
if v11 <= 0 goto label5;
v12 = interfaceinvoke v0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: void appendRecursiveTypes(java.lang.StringBuilder,int[],java.lang.reflect.Type[])>(v1, v10, v12);
goto label6;
label5:
v13 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(60);
v14 = interfaceinvoke v0.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v15 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.StringBuilder appendAllTo(java.lang.StringBuilder,java.lang.String,java.lang.Object[])>(v13, ", ", v14);
virtualinvoke v15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62);
label6:
v16 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.String toString()>();
return v16;
}
public static final java.lang.reflect.ParameterizedType parameterizeWithOwner(java.lang.reflect.Type, java.lang.Class, java.util.Map)
{
java.lang.Object[] v3, v4;
java.lang.reflect.ParameterizedType v7;
java.lang.reflect.Type v0;
java.lang.reflect.TypeVariable[] v5;
java.util.Map v2;
java.lang.reflect.Type[] v6;
java.lang.Class v1;
v0 := @parameter0: java.lang.reflect.Type;
v1 := @parameter1: java.lang.Class;
v2 := @parameter2: java.util.Map;
v3 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v1, "rawClass", v3);
v4 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v2, "typeVariableMap", v4);
v5 = virtualinvoke v1.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();
v6 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type[] extractTypeArgumentsFrom(java.util.Map,java.lang.reflect.TypeVariable[])>(v2, v5);
v7 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.ParameterizedType parameterizeWithOwner(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type[])>(v0, v1, v6);
return v7;
}
public static final transient java.lang.reflect.ParameterizedType parameterizeWithOwner(java.lang.reflect.Type, java.lang.Class, java.lang.reflect.Type[])
{
java.lang.Object[] v10, v11, v16, v3, v6;
java.lang.Integer v19, v21;
int v13, v14, v18, v20;
boolean v15, v5, v9;
java.lang.reflect.Type v0, v7;
java.lang.reflect.TypeVariable[] v12, v17;
java.lang.reflect.Type[] v2;
org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl v22;
java.lang.Class v1, v4, v8;
v0 := @parameter0: java.lang.reflect.Type;
v1 := @parameter1: java.lang.Class;
v2 := @parameter2: java.lang.reflect.Type[];
v3 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v1, "rawClass", v3);
v4 = virtualinvoke v1.<java.lang.Class: java.lang.Class getEnclosingClass()>();
if v4 != null goto label3;
if v0 != null goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
v6 = newarray (java.lang.Object)[1];
v6[0] = v1;
staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>(v5, "no owner allowed for top-level %s", v6);
v7 = null;
goto label5;
label3:
if v0 != null goto label4;
v7 = virtualinvoke v1.<java.lang.Class: java.lang.Class getEnclosingClass()>();
goto label5;
label4:
v8 = virtualinvoke v1.<java.lang.Class: java.lang.Class getEnclosingClass()>();
v9 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.Class)>(v0, v8);
v10 = newarray (java.lang.Object)[2];
v10[0] = v0;
v10[1] = v1;
staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>(v9, "%s is invalid owner type for parameterized %s", v10);
v7 = v0;
label5:
v11 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object[] noNullElements(java.lang.Object[],java.lang.String,java.lang.Object[])>(v2, "null type argument at index %s", v11);
v12 = virtualinvoke v1.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();
v13 = lengthof v12;
v14 = lengthof v2;
if v13 != v14 goto label6;
v15 = 1;
goto label7;
label6:
v15 = 0;
label7:
v16 = newarray (java.lang.Object)[2];
v17 = virtualinvoke v1.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();
v18 = lengthof v17;
v19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v18);
v16[0] = v19;
v20 = lengthof v2;
v21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v20);
v16[1] = v21;
staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>(v15, "invalid number of type parameters specified: expected %d, got %d", v16);
v22 = new org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl;
specialinvoke v22.<org.apache.commons.lang3.reflect.TypeUtils$ParameterizedTypeImpl: void <init>(java.lang.Class,java.lang.reflect.Type,java.lang.reflect.Type[])>(v1, v7, v2);
return v22;
}
private static java.lang.reflect.Type substituteTypeVariables(java.lang.reflect.Type, java.util.Map)
{
java.lang.reflect.Type v0;
java.util.Map v1;
java.lang.Object v3;
java.lang.String v5;
java.lang.IllegalArgumentException v4;
boolean v2;
v0 := @parameter0: java.lang.reflect.Type;
v1 := @parameter1: java.util.Map;
v2 = v0 instanceof java.lang.reflect.TypeVariable;
if v2 == 0 goto label2;
if v1 == null goto label2;
v3 = interfaceinvoke v1.<java.util.Map: java.lang.Object get(java.lang.Object)>(v0);
if v3 != null goto label1;
v4 = new java.lang.IllegalArgumentException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.reflect.Type)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("missing assignment type for type variable \u0001");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v4;
label1:
return v3;
label2:
return v0;
}
public static java.lang.String toLongString(java.lang.reflect.TypeVariable)
{
java.lang.reflect.GenericDeclaration v3;
java.lang.Object[] v1;
java.lang.reflect.TypeVariable v0;
java.lang.Class v5;
java.lang.StringBuilder v11, v13, v2, v8;
java.lang.String v10, v12, v14, v6, v7;
boolean v4, v9;
v0 := @parameter0: java.lang.reflect.TypeVariable;
v1 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v0, "typeVariable", v1);
v2 = new java.lang.StringBuilder;
specialinvoke v2.<java.lang.StringBuilder: void <init>()>();
v3 = interfaceinvoke v0.<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>();
v4 = v3 instanceof java.lang.Class;
if v4 == 0 goto label3;
label1:
v5 = virtualinvoke v3.<java.lang.Class: java.lang.Class getEnclosingClass()>();
if v5 != null goto label2;
v6 = virtualinvoke v3.<java.lang.Class: java.lang.String getName()>();
virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, v6);
goto label5;
label2:
v7 = virtualinvoke v3.<java.lang.Class: java.lang.String getSimpleName()>();
v8 = virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, v7);
virtualinvoke v8.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(0, 46);
v3 = virtualinvoke v3.<java.lang.Class: java.lang.Class getEnclosingClass()>();
goto label1;
label3:
v9 = v3 instanceof java.lang.reflect.Type;
if v9 == 0 goto label4;
v10 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.String toString(java.lang.reflect.Type)>(v3);
virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v10);
goto label5;
label4:
virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v3);
label5:
v11 = virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);
v12 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.String typeVariableToString(java.lang.reflect.TypeVariable)>(v0);
v13 = virtualinvoke v11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v12);
v14 = virtualinvoke v13.<java.lang.StringBuilder: java.lang.String toString()>();
return v14;
}
private static java.lang.String toString(java.lang.Object)
{
java.lang.Object v0;
java.lang.String v2;
boolean v1;
v0 := @parameter0: java.lang.Object;
v1 = v0 instanceof java.lang.reflect.Type;
if v1 == 0 goto label1;
v2 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.String toString(java.lang.reflect.Type)>(v0);
goto label2;
label1:
v2 = virtualinvoke v0.<java.lang.Object: java.lang.String toString()>();
label2:
return v2;
}
public static java.lang.String toString(java.lang.reflect.Type)
{
java.lang.IllegalArgumentException v11;
java.lang.reflect.Type v0;
java.lang.String v10, v12, v2, v4, v6, v8;
boolean v1, v3, v5, v7, v9;
v0 := @parameter0: java.lang.reflect.Type;
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object)>(v0);
v1 = v0 instanceof java.lang.Class;
if v1 == 0 goto label1;
v2 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.String classToString(java.lang.Class)>(v0);
return v2;
label1:
v3 = v0 instanceof java.lang.reflect.ParameterizedType;
if v3 == 0 goto label2;
v4 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.String parameterizedTypeToString(java.lang.reflect.ParameterizedType)>(v0);
return v4;
label2:
v5 = v0 instanceof java.lang.reflect.WildcardType;
if v5 == 0 goto label3;
v6 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.String wildcardTypeToString(java.lang.reflect.WildcardType)>(v0);
return v6;
label3:
v7 = v0 instanceof java.lang.reflect.TypeVariable;
if v7 == 0 goto label4;
v8 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.String typeVariableToString(java.lang.reflect.TypeVariable)>(v0);
return v8;
label4:
v9 = v0 instanceof java.lang.reflect.GenericArrayType;
if v9 == 0 goto label5;
v10 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.String genericArrayTypeToString(java.lang.reflect.GenericArrayType)>(v0);
return v10;
label5:
v11 = new java.lang.IllegalArgumentException;
v12 = staticinvoke <org.apache.commons.lang3.ObjectUtils: java.lang.String identityToString(java.lang.Object)>(v0);
specialinvoke v11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v12);
throw v11;
}
public static boolean typesSatisfyVariables(java.util.Map)
{
java.lang.Object[] v1;
java.util.Iterator v3;
java.util.Set v2;
java.lang.reflect.Type v11, v12;
java.util.Map v0;
int v10, v9;
java.lang.reflect.Type[] v8;
java.lang.Object v5, v6, v7;
boolean v13, v4;
v0 := @parameter0: java.util.Map;
v1 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v0, "typeVariableMap", v1);
v2 = interfaceinvoke v0.<java.util.Map: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label4;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
v7 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getValue()>();
v8 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type[] getImplicitBounds(java.lang.reflect.TypeVariable)>(v6);
v9 = lengthof v8;
v10 = 0;
label2:
if v10 >= v9 goto label1;
v11 = v8[v10];
v12 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type substituteTypeVariables(java.lang.reflect.Type,java.util.Map)>(v11, v0);
v13 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean isAssignable(java.lang.reflect.Type,java.lang.reflect.Type,java.util.Map)>(v7, v12, v0);
if v13 != 0 goto label3;
return 0;
label3:
v10 = v10 + 1;
goto label2;
label4:
return 1;
}
private static java.lang.String typeVariableToString(java.lang.reflect.TypeVariable)
{
java.lang.reflect.TypeVariable v0;
java.lang.reflect.Type v7;
int v4, v5;
java.lang.reflect.Type[] v3, v9;
java.lang.Class v6;
java.lang.StringBuilder v1;
java.lang.String v10, v2;
boolean v8;
v0 := @parameter0: java.lang.reflect.TypeVariable;
v1 = new java.lang.StringBuilder;
v2 = interfaceinvoke v0.<java.lang.reflect.TypeVariable: java.lang.String getName()>();
specialinvoke v1.<java.lang.StringBuilder: void <init>(java.lang.String)>(v2);
v3 = interfaceinvoke v0.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
v4 = lengthof v3;
if v4 <= 0 goto label2;
v5 = lengthof v3;
if v5 != 1 goto label1;
v6 = class "Ljava/lang/Object;";
v7 = v3[0];
v8 = virtualinvoke v6.<java.lang.Object: boolean equals(java.lang.Object)>(v7);
if v8 != 0 goto label2;
label1:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" extends ");
v9 = interfaceinvoke v0.<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>();
staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.StringBuilder appendAllTo(java.lang.StringBuilder,java.lang.String,java.lang.Object[])>(v1, " & ", v9);
label2:
v10 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.String toString()>();
return v10;
}
private static java.lang.reflect.Type[] unrollBounds(java.util.Map, java.lang.reflect.Type[])
{
java.lang.Object[] v7;
java.lang.reflect.Type v4, v5;
java.util.Map v0;
int v2, v3, v6;
java.lang.reflect.Type[] v1;
v0 := @parameter0: java.util.Map;
v1 := @parameter1: java.lang.reflect.Type[];
v2 = 0;
label1:
v3 = lengthof v1;
if v2 >= v3 goto label4;
v4 = v1[v2];
v5 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type unrollVariables(java.util.Map,java.lang.reflect.Type)>(v0, v4);
if v5 != null goto label2;
v6 = v2;
v2 = v2 - 1;
v7 = staticinvoke <org.apache.commons.lang3.ArrayUtils: java.lang.Object[] remove(java.lang.Object[],int)>(v1, v6);
goto label3;
label2:
v7[v2] = v5;
label3:
v2 = v2 + 1;
goto label1;
label4:
return v7;
}
private static java.lang.reflect.Type unrollVariableAssignments(java.lang.reflect.TypeVariable, java.util.Map)
{
java.lang.reflect.TypeVariable v0;
java.util.Map v1;
java.lang.Object v2;
boolean v3, v4;
v0 := @parameter0: java.lang.reflect.TypeVariable;
v1 := @parameter1: java.util.Map;
label1:
v2 = interfaceinvoke v1.<java.util.Map: java.lang.Object get(java.lang.Object)>(v0);
v3 = v2 instanceof java.lang.reflect.TypeVariable;
if v3 == 0 goto label2;
v4 = virtualinvoke v2.<java.lang.Object: boolean equals(java.lang.Object)>(v0);
if v4 == 0 goto label1;
label2:
return v2;
}
public static java.lang.reflect.Type unrollVariables(java.util.Map, java.lang.reflect.Type)
{
java.lang.reflect.WildcardType v27;
java.util.HashMap v9;
java.util.Map v0, v10, v8;
int v12, v13;
boolean v19, v2, v3, v6;
java.lang.reflect.ParameterizedType v18;
java.lang.reflect.Type v1, v14, v15, v16, v17, v5, v7;
java.lang.reflect.Type[] v11, v21, v22, v24, v25;
java.lang.Object v4;
org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeBuilder v20, v23, v26;
v0 := @parameter0: java.util.Map;
v1 := @parameter1: java.lang.reflect.Type;
if v0 != null goto label1;
v0 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
label1:
v2 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: boolean containsTypeVariables(java.lang.reflect.Type)>(v1);
if v2 == 0 goto label9;
v3 = v1 instanceof java.lang.reflect.TypeVariable;
if v3 == 0 goto label2;
v4 = interfaceinvoke v0.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
v5 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type unrollVariables(java.util.Map,java.lang.reflect.Type)>(v0, v4);
return v5;
label2:
v6 = v1 instanceof java.lang.reflect.ParameterizedType;
if v6 == 0 goto label8;
v7 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();
if v7 != null goto label3;
v8 = v0;
goto label4;
label3:
v9 = new java.util.HashMap;
specialinvoke v9.<java.util.HashMap: void <init>(java.util.Map)>(v0);
v8 = v9;
v10 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.util.Map getTypeArguments(java.lang.reflect.ParameterizedType)>(v1);
interfaceinvoke v9.<java.util.Map: void putAll(java.util.Map)>(v10);
label4:
v11 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v12 = 0;
label5:
v13 = lengthof v11;
if v12 >= v13 goto label7;
v14 = v11[v12];
v15 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type unrollVariables(java.util.Map,java.lang.reflect.Type)>(v8, v14);
if v15 == null goto label6;
v11[v12] = v15;
label6:
v12 = v12 + 1;
goto label5;
label7:
v16 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();
v17 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
v18 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.ParameterizedType parameterizeWithOwner(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type[])>(v16, v17, v11);
return v18;
label8:
v19 = v1 instanceof java.lang.reflect.WildcardType;
if v19 == 0 goto label9;
v20 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeBuilder wildcardType()>();
v21 = interfaceinvoke v1.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();
v22 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type[] unrollBounds(java.util.Map,java.lang.reflect.Type[])>(v0, v21);
v23 = virtualinvoke v20.<org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeBuilder: org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeBuilder withUpperBounds(java.lang.reflect.Type[])>(v22);
v24 = interfaceinvoke v1.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();
v25 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.Type[] unrollBounds(java.util.Map,java.lang.reflect.Type[])>(v0, v24);
v26 = virtualinvoke v23.<org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeBuilder: org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeBuilder withLowerBounds(java.lang.reflect.Type[])>(v25);
v27 = virtualinvoke v26.<org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeBuilder: java.lang.reflect.WildcardType build()>();
return v27;
label9:
return v1;
}
public static org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeBuilder wildcardType()
{
org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeBuilder v0;
v0 = new org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeBuilder;
specialinvoke v0.<org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeBuilder: void <init>()>();
return v0;
}
private static java.lang.String wildcardTypeToString(java.lang.reflect.WildcardType)
{
java.lang.reflect.WildcardType v0;
java.lang.reflect.Type v5, v9;
int v3, v4, v6, v7;
java.lang.reflect.Type[] v1, v2;
java.lang.Class v8;
java.lang.StringBuilder v12, v13;
java.lang.String v11;
boolean v10;
v0 := @parameter0: java.lang.reflect.WildcardType;
v1 = interfaceinvoke v0.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getLowerBounds()>();
v2 = interfaceinvoke v0.<java.lang.reflect.WildcardType: java.lang.reflect.Type[] getUpperBounds()>();
v3 = lengthof v1;
if v3 > 1 goto label1;
v4 = lengthof v1;
if v4 != 1 goto label2;
v5 = v1[0];
if v5 == null goto label2;
label1:
staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.StringBuilder appendAllTo(java.lang.StringBuilder,java.lang.String,java.lang.Object[])>(v12, " & ", v1);
goto label4;
label2:
v6 = lengthof v2;
if v6 > 1 goto label3;
v7 = lengthof v2;
if v7 != 1 goto label4;
v8 = class "Ljava/lang/Object;";
v9 = v2[0];
v10 = virtualinvoke v8.<java.lang.Object: boolean equals(java.lang.Object)>(v9);
if v10 != 0 goto label4;
label3:
staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: java.lang.StringBuilder appendAllTo(java.lang.StringBuilder,java.lang.String,java.lang.Object[])>(v13, " & ", v2);
label4:
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String ()>() <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("? super  extends ");
return v11;
}
public static org.apache.commons.lang3.reflect.Typed wrap(java.lang.Class)
{
java.lang.Class v0;
org.apache.commons.lang3.reflect.Typed v1;
v0 := @parameter0: java.lang.Class;
v1 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: org.apache.commons.lang3.reflect.Typed wrap(java.lang.reflect.Type)>(v0);
return v1;
}
public static org.apache.commons.lang3.reflect.Typed wrap(java.lang.reflect.Type)
{
java.lang.reflect.Type v0;
org.apache.commons.lang3.reflect.Typed v1;
v0 := @parameter0: java.lang.reflect.Type;
v1 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils$lambda_wrap_0__133: org.apache.commons.lang3.reflect.Typed bootstrap$(java.lang.reflect.Type)>(v0);
return v1;
}
public void <init>()
{
org.apache.commons.lang3.reflect.TypeUtils v0;
v0 := @this: org.apache.commons.lang3.reflect.TypeUtils;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void <clinit>()
{
java.lang.reflect.WildcardType v3;
java.lang.reflect.Type[] v1;
org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeBuilder v0, v2;
v0 = staticinvoke <org.apache.commons.lang3.reflect.TypeUtils: org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeBuilder wildcardType()>();
v1 = newarray (java.lang.reflect.Type)[1];
v1[0] = class "Ljava/lang/Object;";
v2 = virtualinvoke v0.<org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeBuilder: org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeBuilder withUpperBounds(java.lang.reflect.Type[])>(v1);
v3 = virtualinvoke v2.<org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeBuilder: java.lang.reflect.WildcardType build()>();
<org.apache.commons.lang3.reflect.TypeUtils: java.lang.reflect.WildcardType WILDCARD_ALL> = v3;
return;
}
}