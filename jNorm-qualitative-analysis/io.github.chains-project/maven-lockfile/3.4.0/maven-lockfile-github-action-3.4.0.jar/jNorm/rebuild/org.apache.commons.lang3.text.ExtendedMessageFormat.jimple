public class org.apache.commons.lang3.text.ExtendedMessageFormat extends java.text.MessageFormat
{
private static final long serialVersionUID;
private static final int HASH_SEED;
private static final java.lang.String DUMMY_PATTERN;
private static final char START_FMT;
private static final char END_FE;
private static final char START_FE;
private static final char QUOTE;
private java.lang.String toPattern;
private final java.util.Map registry;
static final boolean $assertionsDisabled;
public void <init>(java.lang.String)
{
java.lang.String v1;
java.util.Locale v2;
org.apache.commons.lang3.text.ExtendedMessageFormat v0;
v0 := @this: org.apache.commons.lang3.text.ExtendedMessageFormat;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();
specialinvoke v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: void <init>(java.lang.String,java.util.Locale)>(v1, v2);
return;
}
public void <init>(java.lang.String, java.util.Locale)
{
java.lang.String v1;
java.util.Locale v2;
org.apache.commons.lang3.text.ExtendedMessageFormat v0;
v0 := @this: org.apache.commons.lang3.text.ExtendedMessageFormat;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.util.Locale;
specialinvoke v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: void <init>(java.lang.String,java.util.Locale,java.util.Map)>(v1, v2, null);
return;
}
public void <init>(java.lang.String, java.util.Map)
{
java.util.Locale v3;
org.apache.commons.lang3.text.ExtendedMessageFormat v0;
java.util.Map v2;
java.lang.String v1;
v0 := @this: org.apache.commons.lang3.text.ExtendedMessageFormat;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.util.Map;
v3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();
specialinvoke v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: void <init>(java.lang.String,java.util.Locale,java.util.Map)>(v1, v3, v2);
return;
}
public void <init>(java.lang.String, java.util.Locale, java.util.Map)
{
java.util.Locale v2, v4;
org.apache.commons.lang3.text.ExtendedMessageFormat v0;
java.util.Map v3;
java.lang.String v1;
v0 := @this: org.apache.commons.lang3.text.ExtendedMessageFormat;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.util.Locale;
v3 := @parameter2: java.util.Map;
specialinvoke v0.<java.text.MessageFormat: void <init>(java.lang.String)>("");
v4 = staticinvoke <org.apache.commons.lang3.LocaleUtils: java.util.Locale toLocale(java.util.Locale)>(v2);
virtualinvoke v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: void setLocale(java.util.Locale)>(v4);
v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: java.util.Map registry> = v3;
virtualinvoke v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: void applyPattern(java.lang.String)>(v1);
return;
}
public java.lang.String toPattern()
{
java.lang.String v1;
org.apache.commons.lang3.text.ExtendedMessageFormat v0;
v0 := @this: org.apache.commons.lang3.text.ExtendedMessageFormat;
v1 = v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: java.lang.String toPattern>;
return v1;
}
public final void applyPattern(java.lang.String)
{
java.text.Format v19;
java.util.Map v2;
boolean v27, v29, v39, v43;
org.apache.commons.lang3.text.ExtendedMessageFormat v0;
java.text.Format[] v40;
java.lang.StringBuilder v18, v24, v6;
java.text.ParsePosition v16, v23, v8;
java.util.ArrayList v4, v5;
int v10, v11, v12, v13, v15, v17, v21, v26, v28, v30, v34, v41, v7;
java.lang.String v1, v20, v25, v3, v33, v36, v37, v38;
java.util.Iterator v42;
char v14, v22, v31, v35;
java.lang.IllegalArgumentException v32;
char[] v9;
java.lang.Object v44;
v0 := @this: org.apache.commons.lang3.text.ExtendedMessageFormat;
v1 := @parameter0: java.lang.String;
v2 = v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: java.util.Map registry>;
if v2 != null goto label01;
specialinvoke v0.<java.text.MessageFormat: void applyPattern(java.lang.String)>(v1);
v3 = specialinvoke v0.<java.text.MessageFormat: java.lang.String toPattern()>();
v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: java.lang.String toPattern> = v3;
return;
label01:
v4 = new java.util.ArrayList;
specialinvoke v4.<java.util.ArrayList: void <init>()>();
v5 = new java.util.ArrayList;
specialinvoke v5.<java.util.ArrayList: void <init>()>();
v6 = new java.lang.StringBuilder;
v7 = virtualinvoke v1.<java.lang.String: int length()>();
specialinvoke v6.<java.lang.StringBuilder: void <init>(int)>(v7);
v8 = new java.text.ParsePosition;
specialinvoke v8.<java.text.ParsePosition: void <init>(int)>(0);
v9 = virtualinvoke v1.<java.lang.String: char[] toCharArray()>();
v10 = 0;
label02:
v11 = virtualinvoke v8.<java.text.ParsePosition: int getIndex()>();
v12 = virtualinvoke v1.<java.lang.String: int length()>();
if v11 >= v12 goto label13;
v13 = virtualinvoke v8.<java.text.ParsePosition: int getIndex()>();
v14 = v9[v13];
lookupswitch(v14)
{
case 39: goto label03;
case 123: goto label04;
default: goto label12;
};
label03:
specialinvoke v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: java.lang.StringBuilder appendQuotedString(java.lang.String,java.text.ParsePosition,java.lang.StringBuilder)>(v1, v8, v6);
goto label02;
label04:
v10 = v10 + 1;
specialinvoke v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: void seekNonWs(java.lang.String,java.text.ParsePosition)>(v1, v8);
v15 = virtualinvoke v8.<java.text.ParsePosition: int getIndex()>();
v16 = specialinvoke v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: java.text.ParsePosition next(java.text.ParsePosition)>(v8);
v17 = specialinvoke v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: int readArgumentIndex(java.lang.String,java.text.ParsePosition)>(v1, v16);
v18 = virtualinvoke v6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);
virtualinvoke v18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v17);
specialinvoke v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: void seekNonWs(java.lang.String,java.text.ParsePosition)>(v1, v8);
v19 = null;
v20 = null;
v21 = virtualinvoke v8.<java.text.ParsePosition: int getIndex()>();
v22 = v9[v21];
if v22 != 44 goto label05;
v23 = specialinvoke v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: java.text.ParsePosition next(java.text.ParsePosition)>(v8);
v20 = specialinvoke v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: java.lang.String parseFormatDescription(java.lang.String,java.text.ParsePosition)>(v1, v23);
v19 = specialinvoke v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: java.text.Format getFormat(java.lang.String)>(v20);
if v19 != null goto label05;
v24 = virtualinvoke v6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);
virtualinvoke v24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v20);
label05:
virtualinvoke v4.<java.util.ArrayList: boolean add(java.lang.Object)>(v19);
if v19 != null goto label06;
v25 = null;
goto label07;
label06:
v25 = v20;
label07:
virtualinvoke v5.<java.util.ArrayList: boolean add(java.lang.Object)>(v25);
v26 = virtualinvoke v4.<java.util.ArrayList: int size()>();
if v26 != v10 goto label08;
v27 = 1;
goto label09;
label08:
v27 = 0;
label09:
staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean)>(v27);
v28 = virtualinvoke v5.<java.util.ArrayList: int size()>();
if v28 != v10 goto label10;
v29 = 1;
goto label11;
label10:
v29 = 0;
label11:
staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean)>(v29);
v30 = virtualinvoke v8.<java.text.ParsePosition: int getIndex()>();
v31 = v9[v30];
if v31 == 125 goto label12;
v32 = new java.lang.IllegalArgumentException;
v33 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v15) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unreadable format element at position \u0001");
specialinvoke v32.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v33);
throw v32;
label12:
v34 = virtualinvoke v8.<java.text.ParsePosition: int getIndex()>();
v35 = v9[v34];
virtualinvoke v6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v35);
specialinvoke v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: java.text.ParsePosition next(java.text.ParsePosition)>(v8);
goto label02;
label13:
v36 = virtualinvoke v6.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke v0.<java.text.MessageFormat: void applyPattern(java.lang.String)>(v36);
v37 = specialinvoke v0.<java.text.MessageFormat: java.lang.String toPattern()>();
v38 = specialinvoke v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: java.lang.String insertFormats(java.lang.String,java.util.ArrayList)>(v37, v5);
v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: java.lang.String toPattern> = v38;
v39 = specialinvoke v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: boolean containsElements(java.util.Collection)>(v4);
if v39 == 0 goto label17;
v40 = virtualinvoke v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: java.text.Format[] getFormats()>();
v41 = 0;
v42 = virtualinvoke v4.<java.util.ArrayList: java.util.Iterator iterator()>();
label14:
v43 = interfaceinvoke v42.<java.util.Iterator: boolean hasNext()>();
if v43 == 0 goto label16;
v44 = interfaceinvoke v42.<java.util.Iterator: java.lang.Object next()>();
if v44 == null goto label15;
v40[v41] = v44;
label15:
v41 = v41 + 1;
goto label14;
label16:
specialinvoke v0.<java.text.MessageFormat: void setFormats(java.text.Format[])>(v40);
label17:
return;
}
public void setFormat(int, java.text.Format)
{
java.lang.UnsupportedOperationException v3;
java.text.Format v2;
org.apache.commons.lang3.text.ExtendedMessageFormat v0;
int v1;
v0 := @this: org.apache.commons.lang3.text.ExtendedMessageFormat;
v1 := @parameter0: int;
v2 := @parameter1: java.text.Format;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>()>();
throw v3;
}
public void setFormatByArgumentIndex(int, java.text.Format)
{
java.lang.UnsupportedOperationException v3;
java.text.Format v2;
org.apache.commons.lang3.text.ExtendedMessageFormat v0;
int v1;
v0 := @this: org.apache.commons.lang3.text.ExtendedMessageFormat;
v1 := @parameter0: int;
v2 := @parameter1: java.text.Format;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>()>();
throw v3;
}
public void setFormats(java.text.Format[])
{
java.text.Format[] v1;
java.lang.UnsupportedOperationException v2;
org.apache.commons.lang3.text.ExtendedMessageFormat v0;
v0 := @this: org.apache.commons.lang3.text.ExtendedMessageFormat;
v1 := @parameter0: java.text.Format[];
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public void setFormatsByArgumentIndex(java.text.Format[])
{
java.text.Format[] v1;
java.lang.UnsupportedOperationException v2;
org.apache.commons.lang3.text.ExtendedMessageFormat v0;
v0 := @this: org.apache.commons.lang3.text.ExtendedMessageFormat;
v1 := @parameter0: java.text.Format[];
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public boolean equals(java.lang.Object)
{
org.apache.commons.lang3.text.ExtendedMessageFormat v0;
java.util.Map v10, v9;
java.lang.Class v3, v4;
java.lang.Object v1;
java.lang.String v6, v7;
boolean v11, v12, v2, v5, v8;
v0 := @this: org.apache.commons.lang3.text.ExtendedMessageFormat;
v1 := @parameter0: java.lang.Object;
if v1 != v0 goto label1;
return 1;
label1:
if v1 != null goto label2;
return 0;
label2:
v2 = specialinvoke v0.<java.text.MessageFormat: boolean equals(java.lang.Object)>(v1);
if v2 != 0 goto label3;
return 0;
label3:
v3 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v4 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v5 = staticinvoke <org.apache.commons.lang3.ObjectUtils: boolean notEqual(java.lang.Object,java.lang.Object)>(v3, v4);
if v5 == 0 goto label4;
return 0;
label4:
v6 = v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: java.lang.String toPattern>;
v7 = v1.<org.apache.commons.lang3.text.ExtendedMessageFormat: java.lang.String toPattern>;
v8 = staticinvoke <org.apache.commons.lang3.ObjectUtils: boolean notEqual(java.lang.Object,java.lang.Object)>(v6, v7);
if v8 == 0 goto label5;
return 0;
label5:
v9 = v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: java.util.Map registry>;
v10 = v1.<org.apache.commons.lang3.text.ExtendedMessageFormat: java.util.Map registry>;
v11 = staticinvoke <org.apache.commons.lang3.ObjectUtils: boolean notEqual(java.lang.Object,java.lang.Object)>(v9, v10);
if v11 != 0 goto label6;
v12 = 1;
goto label7;
label6:
v12 = 0;
label7:
return v12;
}
public int hashCode()
{
org.apache.commons.lang3.text.ExtendedMessageFormat v0;
java.util.Map v3;
int v1, v2, v4, v5, v6, v8, v9;
java.lang.String v7;
v0 := @this: org.apache.commons.lang3.text.ExtendedMessageFormat;
v1 = specialinvoke v0.<java.text.MessageFormat: int hashCode()>();
v2 = 31 * v1;
v3 = v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: java.util.Map registry>;
v4 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>(v3);
v5 = v2 + v4;
v6 = 31 * v5;
v7 = v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: java.lang.String toPattern>;
v8 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>(v7);
v9 = v6 + v8;
return v9;
}
private java.text.Format getFormat(java.lang.String)
{
java.text.Format v12;
org.apache.commons.lang3.text.ExtendedMessageFormat v0;
java.util.Locale v11;
java.util.Map v2, v9;
int v5, v7;
java.lang.Object v10;
java.lang.String v1, v3, v4, v6, v8;
v0 := @this: org.apache.commons.lang3.text.ExtendedMessageFormat;
v1 := @parameter0: java.lang.String;
v2 = v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: java.util.Map registry>;
if v2 == null goto label2;
v3 = v1;
v4 = null;
v5 = virtualinvoke v1.<java.lang.String: int indexOf(int)>(44);
if v5 <= 0 goto label1;
v6 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int,int)>(0, v5);
v3 = virtualinvoke v6.<java.lang.String: java.lang.String trim()>();
v7 = v5 + 1;
v8 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int)>(v7);
v4 = virtualinvoke v8.<java.lang.String: java.lang.String trim()>();
label1:
v9 = v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: java.util.Map registry>;
v10 = interfaceinvoke v9.<java.util.Map: java.lang.Object get(java.lang.Object)>(v3);
if v10 == null goto label2;
v11 = virtualinvoke v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: java.util.Locale getLocale()>();
v12 = interfaceinvoke v10.<org.apache.commons.lang3.text.FormatFactory: java.text.Format getFormat(java.lang.String,java.lang.String,java.util.Locale)>(v3, v4, v11);
return v12;
label2:
return null;
}
private int readArgumentIndex(java.lang.String, java.text.ParsePosition)
{
java.text.ParsePosition v2;
int v11, v12, v14, v19, v3, v6, v7, v8;
java.lang.String v1, v13, v20, v21, v23;
boolean v10, v16, v17, v5;
org.apache.commons.lang3.text.ExtendedMessageFormat v0;
char v9;
java.lang.NumberFormatException v15;
java.lang.IllegalArgumentException v18, v22;
java.lang.StringBuilder v4;
v0 := @this: org.apache.commons.lang3.text.ExtendedMessageFormat;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.text.ParsePosition;
v3 = virtualinvoke v2.<java.text.ParsePosition: int getIndex()>();
specialinvoke v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: void seekNonWs(java.lang.String,java.text.ParsePosition)>(v1, v2);
v4 = new java.lang.StringBuilder;
specialinvoke v4.<java.lang.StringBuilder: void <init>()>();
v5 = 0;
label01:
if v5 != 0 goto label11;
v6 = virtualinvoke v2.<java.text.ParsePosition: int getIndex()>();
v7 = virtualinvoke v1.<java.lang.String: int length()>();
if v6 >= v7 goto label11;
v8 = virtualinvoke v2.<java.text.ParsePosition: int getIndex()>();
v9 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v8);
v10 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(v9);
if v10 == 0 goto label02;
specialinvoke v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: void seekNonWs(java.lang.String,java.text.ParsePosition)>(v1, v2);
v11 = virtualinvoke v2.<java.text.ParsePosition: int getIndex()>();
v9 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v11);
if v9 == 44 goto label03;
if v9 == 125 goto label02;
v5 = 1;
goto label10;
label02:
if v9 == 44 goto label03;
if v9 != 125 goto label07;
label03:
v12 = virtualinvoke v4.<java.lang.StringBuilder: int length()>();
if v12 <= 0 goto label07;
label04:
v13 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.String toString()>();
v14 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v13);
label05:
return v14;
label06:
v15 := @caughtexception;
label07:
v16 = staticinvoke <java.lang.Character: boolean isDigit(char)>(v9);
if v16 != 0 goto label08;
v17 = 1;
goto label09;
label08:
v17 = 0;
label09:
v5 = v17;
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v9);
label10:
specialinvoke v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: java.text.ParsePosition next(java.text.ParsePosition)>(v2);
goto label01;
label11:
if v5 == 0 goto label12;
v18 = new java.lang.IllegalArgumentException;
v19 = virtualinvoke v2.<java.text.ParsePosition: int getIndex()>();
v20 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int,int)>(v3, v19);
v21 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,java.lang.String)>(v3, v20) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid format argument index at position \u0001: \u0001");
specialinvoke v18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v21);
throw v18;
label12:
v22 = new java.lang.IllegalArgumentException;
v23 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unterminated format element at position \u0001");
specialinvoke v22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v23);
throw v22;
catch java.lang.NumberFormatException from label04 to label05 with label06;
}
private java.lang.String parseFormatDescription(java.lang.String, java.text.ParsePosition)
{
org.apache.commons.lang3.text.ExtendedMessageFormat v0;
java.text.ParsePosition v2;
char v9;
java.lang.IllegalArgumentException v12;
int v10, v3, v4, v5, v6, v7, v8;
java.lang.String v1, v11, v13;
v0 := @this: org.apache.commons.lang3.text.ExtendedMessageFormat;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.text.ParsePosition;
v3 = virtualinvoke v2.<java.text.ParsePosition: int getIndex()>();
specialinvoke v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: void seekNonWs(java.lang.String,java.text.ParsePosition)>(v1, v2);
v4 = virtualinvoke v2.<java.text.ParsePosition: int getIndex()>();
v5 = 1;
label1:
v6 = virtualinvoke v2.<java.text.ParsePosition: int getIndex()>();
v7 = virtualinvoke v1.<java.lang.String: int length()>();
if v6 >= v7 goto label6;
v8 = virtualinvoke v2.<java.text.ParsePosition: int getIndex()>();
v9 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v8);
lookupswitch(v9)
{
case 39: goto label4;
case 123: goto label2;
case 125: goto label3;
default: goto label5;
};
label2:
v5 = v5 + 1;
goto label5;
label3:
v5 = v5 - 1;
if v5 != 0 goto label5;
v10 = virtualinvoke v2.<java.text.ParsePosition: int getIndex()>();
v11 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int,int)>(v4, v10);
return v11;
label4:
specialinvoke v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: void getQuotedString(java.lang.String,java.text.ParsePosition)>(v1, v2);
label5:
specialinvoke v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: java.text.ParsePosition next(java.text.ParsePosition)>(v2);
goto label1;
label6:
v12 = new java.lang.IllegalArgumentException;
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unterminated format element at position \u0001");
specialinvoke v12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v13);
throw v12;
}
private java.lang.String insertFormats(java.lang.String, java.util.ArrayList)
{
java.text.ParsePosition v16, v7;
java.util.ArrayList v2;
int v10, v11, v12, v13, v17, v5, v6, v8, v9;
java.lang.String v1, v20;
boolean v3;
org.apache.commons.lang3.text.ExtendedMessageFormat v0;
char v14;
java.lang.Object v18;
java.lang.StringBuilder v15, v19, v4;
v0 := @this: org.apache.commons.lang3.text.ExtendedMessageFormat;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.util.ArrayList;
v3 = specialinvoke v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: boolean containsElements(java.util.Collection)>(v2);
if v3 != 0 goto label1;
return v1;
label1:
v4 = new java.lang.StringBuilder;
v5 = virtualinvoke v1.<java.lang.String: int length()>();
v6 = v5 * 2;
specialinvoke v4.<java.lang.StringBuilder: void <init>(int)>(v6);
v7 = new java.text.ParsePosition;
specialinvoke v7.<java.text.ParsePosition: void <init>(int)>(0);
v8 = (int) -1;
v9 = v8;
v10 = 0;
label2:
v11 = virtualinvoke v7.<java.text.ParsePosition: int getIndex()>();
v12 = virtualinvoke v1.<java.lang.String: int length()>();
if v11 >= v12 goto label7;
v13 = virtualinvoke v7.<java.text.ParsePosition: int getIndex()>();
v14 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v13);
lookupswitch(v14)
{
case 39: goto label3;
case 123: goto label4;
case 125: goto label5;
default: goto label6;
};
label3:
specialinvoke v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: java.lang.StringBuilder appendQuotedString(java.lang.String,java.text.ParsePosition,java.lang.StringBuilder)>(v1, v7, v4);
goto label2;
label4:
v10 = v10 + 1;
v15 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);
v16 = specialinvoke v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: java.text.ParsePosition next(java.text.ParsePosition)>(v7);
v17 = specialinvoke v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: int readArgumentIndex(java.lang.String,java.text.ParsePosition)>(v1, v16);
virtualinvoke v15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v17);
if v10 != 1 goto label2;
v9 = v9 + 1;
v18 = virtualinvoke v2.<java.util.ArrayList: java.lang.Object get(int)>(v9);
if v18 == null goto label2;
v19 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);
virtualinvoke v19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v18);
goto label2;
label5:
v10 = v10 - 1;
label6:
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v14);
specialinvoke v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: java.text.ParsePosition next(java.text.ParsePosition)>(v7);
goto label2;
label7:
v20 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.String toString()>();
return v20;
}
private void seekNonWs(java.lang.String, java.text.ParsePosition)
{
org.apache.commons.lang3.text.ExtendedMessageFormat v0;
java.text.ParsePosition v2;
org.apache.commons.lang3.text.StrMatcher v4;
int v10, v5, v6, v7, v8, v9;
char[] v3;
java.lang.String v1;
v0 := @this: org.apache.commons.lang3.text.ExtendedMessageFormat;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.text.ParsePosition;
v3 = virtualinvoke v1.<java.lang.String: char[] toCharArray()>();
label1:
v4 = staticinvoke <org.apache.commons.lang3.text.StrMatcher: org.apache.commons.lang3.text.StrMatcher splitMatcher()>();
v5 = virtualinvoke v2.<java.text.ParsePosition: int getIndex()>();
v6 = virtualinvoke v4.<org.apache.commons.lang3.text.StrMatcher: int isMatch(char[],int)>(v3, v5);
v7 = virtualinvoke v2.<java.text.ParsePosition: int getIndex()>();
v8 = v7 + v6;
virtualinvoke v2.<java.text.ParsePosition: void setIndex(int)>(v8);
if v6 <= 0 goto label2;
v9 = virtualinvoke v2.<java.text.ParsePosition: int getIndex()>();
v10 = virtualinvoke v1.<java.lang.String: int length()>();
if v9 < v10 goto label1;
label2:
return;
}
private java.text.ParsePosition next(java.text.ParsePosition)
{
org.apache.commons.lang3.text.ExtendedMessageFormat v0;
int v2, v3;
java.text.ParsePosition v1;
v0 := @this: org.apache.commons.lang3.text.ExtendedMessageFormat;
v1 := @parameter0: java.text.ParsePosition;
v2 = virtualinvoke v1.<java.text.ParsePosition: int getIndex()>();
v3 = v2 + 1;
virtualinvoke v1.<java.text.ParsePosition: void setIndex(int)>(v3);
return v1;
}
private java.lang.StringBuilder appendQuotedString(java.lang.String, java.text.ParsePosition, java.lang.StringBuilder)
{
java.text.ParsePosition v2;
java.lang.AssertionError v8;
int v11, v12, v13, v16, v17, v6, v9;
java.lang.String v1, v19;
boolean v4;
org.apache.commons.lang3.text.ExtendedMessageFormat v0;
char v14, v7;
java.lang.IllegalArgumentException v18;
char[] v10, v5;
java.lang.StringBuilder v15, v3;
v0 := @this: org.apache.commons.lang3.text.ExtendedMessageFormat;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.text.ParsePosition;
v3 := @parameter2: java.lang.StringBuilder;
v4 = <org.apache.commons.lang3.text.ExtendedMessageFormat: boolean $assertionsDisabled>;
if v4 != 0 goto label1;
v5 = virtualinvoke v1.<java.lang.String: char[] toCharArray()>();
v6 = virtualinvoke v2.<java.text.ParsePosition: int getIndex()>();
v7 = v5[v6];
if v7 == 39 goto label1;
v8 = new java.lang.AssertionError;
specialinvoke v8.<java.lang.AssertionError: void <init>(java.lang.Object)>("Quoted string must start with quote character");
throw v8;
label1:
if v3 == null goto label2;
virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);
label2:
specialinvoke v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: java.text.ParsePosition next(java.text.ParsePosition)>(v2);
v9 = virtualinvoke v2.<java.text.ParsePosition: int getIndex()>();
v10 = virtualinvoke v1.<java.lang.String: char[] toCharArray()>();
v11 = virtualinvoke v2.<java.text.ParsePosition: int getIndex()>();
label3:
v12 = virtualinvoke v1.<java.lang.String: int length()>();
if v11 >= v12 goto label7;
v13 = virtualinvoke v2.<java.text.ParsePosition: int getIndex()>();
v14 = v10[v13];
if v14 != 39 goto label6;
specialinvoke v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: java.text.ParsePosition next(java.text.ParsePosition)>(v2);
if v3 != null goto label4;
v15 = null;
goto label5;
label4:
v16 = virtualinvoke v2.<java.text.ParsePosition: int getIndex()>();
v17 = v16 - v9;
v15 = virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(v10, v9, v17);
label5:
return v15;
label6:
specialinvoke v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: java.text.ParsePosition next(java.text.ParsePosition)>(v2);
v11 = v11 + 1;
goto label3;
label7:
v18 = new java.lang.IllegalArgumentException;
v19 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unterminated quoted string at position \u0001");
specialinvoke v18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v19);
throw v18;
}
private void getQuotedString(java.lang.String, java.text.ParsePosition)
{
java.text.ParsePosition v2;
java.lang.String v1;
org.apache.commons.lang3.text.ExtendedMessageFormat v0;
v0 := @this: org.apache.commons.lang3.text.ExtendedMessageFormat;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.text.ParsePosition;
specialinvoke v0.<org.apache.commons.lang3.text.ExtendedMessageFormat: java.lang.StringBuilder appendQuotedString(java.lang.String,java.text.ParsePosition,java.lang.StringBuilder)>(v1, v2, null);
return;
}
private boolean containsElements(java.util.Collection)
{
java.util.Iterator v3;
org.apache.commons.lang3.text.ExtendedMessageFormat v0;
java.util.Collection v1;
java.lang.Object v5;
boolean v2, v4;
v0 := @this: org.apache.commons.lang3.text.ExtendedMessageFormat;
v1 := @parameter0: java.util.Collection;
if v1 == null goto label1;
v2 = interfaceinvoke v1.<java.util.Collection: boolean isEmpty()>();
if v2 == 0 goto label2;
label1:
return 0;
label2:
v3 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
label3:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label4;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
if v5 == null goto label3;
return 1;
label4:
return 0;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lorg/apache/commons/lang3/text/ExtendedMessageFormat;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<org.apache.commons.lang3.text.ExtendedMessageFormat: boolean $assertionsDisabled> = v2;
return;
}
}