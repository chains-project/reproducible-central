abstract class org.apache.commons.lang3.time.FastDateParser$PatternStrategy extends org.apache.commons.lang3.time.FastDateParser$Strategy
{
java.util.regex.Pattern pattern;
private void <init>()
{
org.apache.commons.lang3.time.FastDateParser$PatternStrategy v0;
v0 := @this: org.apache.commons.lang3.time.FastDateParser$PatternStrategy;
specialinvoke v0.<org.apache.commons.lang3.time.FastDateParser$Strategy: void <init>()>();
return;
}
void createPattern(java.lang.StringBuilder)
{
java.lang.StringBuilder v1;
java.lang.String v2;
org.apache.commons.lang3.time.FastDateParser$PatternStrategy v0;
v0 := @this: org.apache.commons.lang3.time.FastDateParser$PatternStrategy;
v1 := @parameter0: java.lang.StringBuilder;
v2 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke v0.<org.apache.commons.lang3.time.FastDateParser$PatternStrategy: void createPattern(java.lang.String)>(v2);
return;
}
void createPattern(java.lang.String)
{
java.lang.String v1;
java.util.regex.Pattern v2;
org.apache.commons.lang3.time.FastDateParser$PatternStrategy v0;
v0 := @this: org.apache.commons.lang3.time.FastDateParser$PatternStrategy;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(v1);
v0.<org.apache.commons.lang3.time.FastDateParser$PatternStrategy: java.util.regex.Pattern pattern> = v2;
return;
}
boolean isNumber()
{
org.apache.commons.lang3.time.FastDateParser$PatternStrategy v0;
v0 := @this: org.apache.commons.lang3.time.FastDateParser$PatternStrategy;
return 0;
}
boolean parse(org.apache.commons.lang3.time.FastDateParser, java.util.Calendar, java.lang.String, java.text.ParsePosition, int)
{
java.text.ParsePosition v4;
java.util.Calendar v2;
java.util.regex.Matcher v9;
org.apache.commons.lang3.time.FastDateParser$PatternStrategy v0;
int v11, v12, v13, v14, v5, v7;
java.lang.String v15, v3, v8;
boolean v10;
java.util.regex.Pattern v6;
org.apache.commons.lang3.time.FastDateParser v1;
v0 := @this: org.apache.commons.lang3.time.FastDateParser$PatternStrategy;
v1 := @parameter0: org.apache.commons.lang3.time.FastDateParser;
v2 := @parameter1: java.util.Calendar;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: java.text.ParsePosition;
v5 := @parameter4: int;
v6 = v0.<org.apache.commons.lang3.time.FastDateParser$PatternStrategy: java.util.regex.Pattern pattern>;
v7 = virtualinvoke v4.<java.text.ParsePosition: int getIndex()>();
v8 = virtualinvoke v3.<java.lang.String: java.lang.String substring(int)>(v7);
v9 = virtualinvoke v6.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v8);
v10 = virtualinvoke v9.<java.util.regex.Matcher: boolean lookingAt()>();
if v10 != 0 goto label1;
v11 = virtualinvoke v4.<java.text.ParsePosition: int getIndex()>();
virtualinvoke v4.<java.text.ParsePosition: void setErrorIndex(int)>(v11);
return 0;
label1:
v12 = virtualinvoke v4.<java.text.ParsePosition: int getIndex()>();
v13 = virtualinvoke v9.<java.util.regex.Matcher: int end(int)>(1);
v14 = v12 + v13;
virtualinvoke v4.<java.text.ParsePosition: void setIndex(int)>(v14);
v15 = virtualinvoke v9.<java.util.regex.Matcher: java.lang.String group(int)>(1);
virtualinvoke v0.<org.apache.commons.lang3.time.FastDateParser$PatternStrategy: void setCalendar(org.apache.commons.lang3.time.FastDateParser,java.util.Calendar,java.lang.String)>(v1, v2, v15);
return 1;
}
abstract void setCalendar(org.apache.commons.lang3.time.FastDateParser, java.util.Calendar, java.lang.String);
public java.lang.String toString()
{
org.apache.commons.lang3.time.FastDateParser$PatternStrategy v0;
java.lang.Class v1;
java.lang.String v2, v4;
java.util.regex.Pattern v3;
v0 := @this: org.apache.commons.lang3.time.FastDateParser$PatternStrategy;
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v2 = virtualinvoke v1.<java.lang.Class: java.lang.String getSimpleName()>();
v3 = v0.<org.apache.commons.lang3.time.FastDateParser$PatternStrategy: java.util.regex.Pattern pattern>;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.util.regex.Pattern)>(v2, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 [pattern=\u0001]");
return v4;
}
}