public interface  org.eclipse.microprofile.config.spi.ConfigSource extends java.lang.Object
{
public static final java.lang.String CONFIG_ORDINAL;
public static final int DEFAULT_ORDINAL;
public java.util.Map getProperties()
{
java.util.function.Consumer v3;
org.eclipse.microprofile.config.spi.ConfigSource v0;
java.util.Set v2;
java.util.HashMap v1;
v0 := @this: org.eclipse.microprofile.config.spi.ConfigSource;
v1 = new java.util.HashMap;
specialinvoke v1.<java.util.HashMap: void <init>()>();
v2 = interfaceinvoke v0.<org.eclipse.microprofile.config.spi.ConfigSource: java.util.Set getPropertyNames()>();
v3 = staticinvoke <org.eclipse.microprofile.config.spi.ConfigSource$lambda_getProperties_0__3156: java.util.function.Consumer bootstrap$(org.eclipse.microprofile.config.spi.ConfigSource,java.util.Map)>(v0, v1);
interfaceinvoke v2.<java.util.Set: void forEach(java.util.function.Consumer)>(v3);
return v1;
}
public abstract java.util.Set getPropertyNames();
public int getOrdinal()
{
org.eclipse.microprofile.config.spi.ConfigSource v0;
int v2;
java.lang.NumberFormatException v3;
java.lang.String v1;
v0 := @this: org.eclipse.microprofile.config.spi.ConfigSource;
v1 = interfaceinvoke v0.<org.eclipse.microprofile.config.spi.ConfigSource: java.lang.String getValue(java.lang.String)>("config_ordinal");
if v1 == null goto label4;
label1:
v2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v1);
label2:
return v2;
label3:
v3 := @caughtexception;
label4:
return 100;
catch java.lang.NumberFormatException from label1 to label2 with label3;
}
public abstract java.lang.String getValue(java.lang.String);
public abstract java.lang.String getName();
}