public class org.eclipse.microprofile.context.spi.ContextManagerProviderRegistration extends java.lang.Object
{
private final org.eclipse.microprofile.context.spi.ContextManagerProvider provider;
void <init>(org.eclipse.microprofile.context.spi.ContextManagerProvider)
{
org.eclipse.microprofile.context.spi.ContextManagerProviderRegistration v0;
org.eclipse.microprofile.context.spi.ContextManagerProvider v1;
v0 := @this: org.eclipse.microprofile.context.spi.ContextManagerProviderRegistration;
v1 := @parameter0: org.eclipse.microprofile.context.spi.ContextManagerProvider;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.eclipse.microprofile.context.spi.ContextManagerProviderRegistration: org.eclipse.microprofile.context.spi.ContextManagerProvider provider> = v1;
return;
}
public void unregister()
{
org.eclipse.microprofile.context.spi.ContextManagerProviderRegistration v0;
java.util.concurrent.atomic.AtomicReference v1;
org.eclipse.microprofile.context.spi.ContextManagerProvider v2;
v0 := @this: org.eclipse.microprofile.context.spi.ContextManagerProviderRegistration;
v1 = <org.eclipse.microprofile.context.spi.ContextManagerProvider: java.util.concurrent.atomic.AtomicReference INSTANCE>;
v2 = v0.<org.eclipse.microprofile.context.spi.ContextManagerProviderRegistration: org.eclipse.microprofile.context.spi.ContextManagerProvider provider>;
virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(v2, null);
return;
}
}