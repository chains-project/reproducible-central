class org.eclipse.parsson.JsonParserImpl$2 extends java.util.Spliterators$AbstractSpliterator
{
final org.eclipse.parsson.JsonParserImpl this$0;
void <init>(org.eclipse.parsson.JsonParserImpl, long, int)
{
int v3;
org.eclipse.parsson.JsonParserImpl v1;
long v2;
org.eclipse.parsson.JsonParserImpl$2 v0;
v0 := @this: org.eclipse.parsson.JsonParserImpl$2;
v1 := @parameter0: org.eclipse.parsson.JsonParserImpl;
v2 := @parameter1: long;
v3 := @parameter2: int;
v0.<org.eclipse.parsson.JsonParserImpl$2: org.eclipse.parsson.JsonParserImpl this$0> = v1;
specialinvoke v0.<java.util.Spliterators$AbstractSpliterator: void <init>(long,int)>(v2, v3);
return;
}
public java.util.Spliterator trySplit()
{
org.eclipse.parsson.JsonParserImpl$2 v0;
v0 := @this: org.eclipse.parsson.JsonParserImpl$2;
return null;
}
public boolean tryAdvance(java.util.function.Consumer)
{
jakarta.json.JsonValue v19;
java.lang.NullPointerException v2;
jakarta.json.JsonException v15, v9;
java.lang.String v10, v12, v16;
org.eclipse.parsson.JsonParserImpl$2 v0;
boolean v14, v4;
org.eclipse.parsson.JsonParserImpl v11, v13, v17, v18, v3, v5;
java.util.AbstractMap$SimpleImmutableEntry v20;
java.util.function.Consumer v1;
jakarta.json.stream.JsonParser$Event v6, v7, v8;
v0 := @this: org.eclipse.parsson.JsonParserImpl$2;
v1 := @parameter0: java.util.function.Consumer;
if v1 != null goto label1;
v2 = new java.lang.NullPointerException;
specialinvoke v2.<java.lang.NullPointerException: void <init>()>();
throw v2;
label1:
v3 = v0.<org.eclipse.parsson.JsonParserImpl$2: org.eclipse.parsson.JsonParserImpl this$0>;
v4 = virtualinvoke v3.<org.eclipse.parsson.JsonParserImpl: boolean hasNext()>();
if v4 != 0 goto label2;
return 0;
label2:
v5 = v0.<org.eclipse.parsson.JsonParserImpl$2: org.eclipse.parsson.JsonParserImpl this$0>;
v6 = virtualinvoke v5.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event next()>();
v7 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event END_OBJECT>;
if v6 != v7 goto label3;
return 0;
label3:
v8 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event KEY_NAME>;
if v6 == v8 goto label4;
v9 = new jakarta.json.JsonException;
v10 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String INTERNAL_ERROR()>();
specialinvoke v9.<jakarta.json.JsonException: void <init>(java.lang.String)>(v10);
throw v9;
label4:
v11 = v0.<org.eclipse.parsson.JsonParserImpl$2: org.eclipse.parsson.JsonParserImpl this$0>;
v12 = virtualinvoke v11.<org.eclipse.parsson.JsonParserImpl: java.lang.String getString()>();
v13 = v0.<org.eclipse.parsson.JsonParserImpl$2: org.eclipse.parsson.JsonParserImpl this$0>;
v14 = virtualinvoke v13.<org.eclipse.parsson.JsonParserImpl: boolean hasNext()>();
if v14 != 0 goto label5;
v15 = new jakarta.json.JsonException;
v16 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String INTERNAL_ERROR()>();
specialinvoke v15.<jakarta.json.JsonException: void <init>(java.lang.String)>(v16);
throw v15;
label5:
v17 = v0.<org.eclipse.parsson.JsonParserImpl$2: org.eclipse.parsson.JsonParserImpl this$0>;
virtualinvoke v17.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event next()>();
v18 = v0.<org.eclipse.parsson.JsonParserImpl$2: org.eclipse.parsson.JsonParserImpl this$0>;
v19 = virtualinvoke v18.<org.eclipse.parsson.JsonParserImpl: jakarta.json.JsonValue getValue()>();
v20 = new java.util.AbstractMap$SimpleImmutableEntry;
specialinvoke v20.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>(v12, v19);
interfaceinvoke v1.<java.util.function.Consumer: void accept(java.lang.Object)>(v20);
return 1;
}
}