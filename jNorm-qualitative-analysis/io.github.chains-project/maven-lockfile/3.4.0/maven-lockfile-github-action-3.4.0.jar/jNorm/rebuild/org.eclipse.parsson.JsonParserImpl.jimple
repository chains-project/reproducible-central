public class org.eclipse.parsson.JsonParserImpl extends java.lang.Object implements jakarta.json.stream.JsonParser
{
private final org.eclipse.parsson.api.BufferPool bufferPool;
private final boolean rejectDuplicateKeys;
private final java.util.Map config;
private org.eclipse.parsson.JsonParserImpl$Context currentContext;
private jakarta.json.stream.JsonParser$Event currentEvent;
private final org.eclipse.parsson.JsonParserImpl$Stack stack;
private final org.eclipse.parsson.JsonTokenizer tokenizer;
private boolean closed;
public void <init>(java.io.Reader, org.eclipse.parsson.api.BufferPool)
{
java.util.Map v3;
org.eclipse.parsson.JsonParserImpl v0;
java.io.Reader v1;
org.eclipse.parsson.api.BufferPool v2;
v0 := @this: org.eclipse.parsson.JsonParserImpl;
v1 := @parameter0: java.io.Reader;
v2 := @parameter1: org.eclipse.parsson.api.BufferPool;
v3 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
specialinvoke v0.<org.eclipse.parsson.JsonParserImpl: void <init>(java.io.Reader,org.eclipse.parsson.api.BufferPool,boolean,java.util.Map)>(v1, v2, 0, v3);
return;
}
public void <init>(java.io.Reader, org.eclipse.parsson.api.BufferPool, boolean, java.util.Map)
{
org.eclipse.parsson.JsonParserImpl$NoneContext v5;
org.eclipse.parsson.JsonParserImpl$Stack v6;
org.eclipse.parsson.JsonParserImpl v0;
java.io.Reader v1;
org.eclipse.parsson.JsonTokenizer v7;
java.util.Map v4;
org.eclipse.parsson.api.BufferPool v2;
boolean v3;
v0 := @this: org.eclipse.parsson.JsonParserImpl;
v1 := @parameter0: java.io.Reader;
v2 := @parameter1: org.eclipse.parsson.api.BufferPool;
v3 := @parameter2: boolean;
v4 := @parameter3: java.util.Map;
specialinvoke v0.<java.lang.Object: void <init>()>();
v5 = new org.eclipse.parsson.JsonParserImpl$NoneContext;
specialinvoke v5.<org.eclipse.parsson.JsonParserImpl$NoneContext: void <init>(org.eclipse.parsson.JsonParserImpl)>(v0);
v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonParserImpl$Context currentContext> = v5;
v6 = new org.eclipse.parsson.JsonParserImpl$Stack;
specialinvoke v6.<org.eclipse.parsson.JsonParserImpl$Stack: void <init>()>();
v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonParserImpl$Stack stack> = v6;
v0.<org.eclipse.parsson.JsonParserImpl: boolean closed> = 0;
v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.api.BufferPool bufferPool> = v2;
v0.<org.eclipse.parsson.JsonParserImpl: boolean rejectDuplicateKeys> = v3;
v0.<org.eclipse.parsson.JsonParserImpl: java.util.Map config> = v4;
v7 = new org.eclipse.parsson.JsonTokenizer;
specialinvoke v7.<org.eclipse.parsson.JsonTokenizer: void <init>(java.io.Reader,org.eclipse.parsson.api.BufferPool)>(v1, v2);
v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonTokenizer tokenizer> = v7;
return;
}
public void <init>(java.io.InputStream, org.eclipse.parsson.api.BufferPool)
{
java.util.Map v3;
org.eclipse.parsson.JsonParserImpl v0;
org.eclipse.parsson.api.BufferPool v2;
java.io.InputStream v1;
v0 := @this: org.eclipse.parsson.JsonParserImpl;
v1 := @parameter0: java.io.InputStream;
v2 := @parameter1: org.eclipse.parsson.api.BufferPool;
v3 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
specialinvoke v0.<org.eclipse.parsson.JsonParserImpl: void <init>(java.io.InputStream,org.eclipse.parsson.api.BufferPool,boolean,java.util.Map)>(v1, v2, 0, v3);
return;
}
public void <init>(java.io.InputStream, org.eclipse.parsson.api.BufferPool, boolean, java.util.Map)
{
org.eclipse.parsson.JsonParserImpl$NoneContext v5;
org.eclipse.parsson.JsonParserImpl$Stack v6;
org.eclipse.parsson.JsonParserImpl v0;
org.eclipse.parsson.JsonTokenizer v8;
java.io.InputStreamReader v9;
java.nio.charset.Charset v10;
java.util.Map v4;
org.eclipse.parsson.api.BufferPool v2;
org.eclipse.parsson.UnicodeDetectingInputStream v7;
boolean v3;
java.io.InputStream v1;
v0 := @this: org.eclipse.parsson.JsonParserImpl;
v1 := @parameter0: java.io.InputStream;
v2 := @parameter1: org.eclipse.parsson.api.BufferPool;
v3 := @parameter2: boolean;
v4 := @parameter3: java.util.Map;
specialinvoke v0.<java.lang.Object: void <init>()>();
v5 = new org.eclipse.parsson.JsonParserImpl$NoneContext;
specialinvoke v5.<org.eclipse.parsson.JsonParserImpl$NoneContext: void <init>(org.eclipse.parsson.JsonParserImpl)>(v0);
v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonParserImpl$Context currentContext> = v5;
v6 = new org.eclipse.parsson.JsonParserImpl$Stack;
specialinvoke v6.<org.eclipse.parsson.JsonParserImpl$Stack: void <init>()>();
v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonParserImpl$Stack stack> = v6;
v0.<org.eclipse.parsson.JsonParserImpl: boolean closed> = 0;
v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.api.BufferPool bufferPool> = v2;
v0.<org.eclipse.parsson.JsonParserImpl: boolean rejectDuplicateKeys> = v3;
v0.<org.eclipse.parsson.JsonParserImpl: java.util.Map config> = v4;
v7 = new org.eclipse.parsson.UnicodeDetectingInputStream;
specialinvoke v7.<org.eclipse.parsson.UnicodeDetectingInputStream: void <init>(java.io.InputStream)>(v1);
v8 = new org.eclipse.parsson.JsonTokenizer;
v9 = new java.io.InputStreamReader;
v10 = virtualinvoke v7.<org.eclipse.parsson.UnicodeDetectingInputStream: java.nio.charset.Charset getCharset()>();
specialinvoke v9.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>(v7, v10);
specialinvoke v8.<org.eclipse.parsson.JsonTokenizer: void <init>(java.io.Reader,org.eclipse.parsson.api.BufferPool)>(v9, v2);
v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonTokenizer tokenizer> = v8;
return;
}
public void <init>(java.io.InputStream, java.nio.charset.Charset, org.eclipse.parsson.api.BufferPool)
{
java.nio.charset.Charset v2;
java.util.Map v4;
org.eclipse.parsson.JsonParserImpl v0;
org.eclipse.parsson.api.BufferPool v3;
java.io.InputStream v1;
v0 := @this: org.eclipse.parsson.JsonParserImpl;
v1 := @parameter0: java.io.InputStream;
v2 := @parameter1: java.nio.charset.Charset;
v3 := @parameter2: org.eclipse.parsson.api.BufferPool;
v4 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
specialinvoke v0.<org.eclipse.parsson.JsonParserImpl: void <init>(java.io.InputStream,java.nio.charset.Charset,org.eclipse.parsson.api.BufferPool,boolean,java.util.Map)>(v1, v2, v3, 0, v4);
return;
}
public void <init>(java.io.InputStream, java.nio.charset.Charset, org.eclipse.parsson.api.BufferPool, boolean, java.util.Map)
{
org.eclipse.parsson.JsonParserImpl$NoneContext v6;
org.eclipse.parsson.JsonParserImpl$Stack v7;
org.eclipse.parsson.JsonParserImpl v0;
org.eclipse.parsson.JsonTokenizer v8;
java.io.InputStreamReader v9;
java.nio.charset.Charset v2;
java.util.Map v5;
org.eclipse.parsson.api.BufferPool v3;
boolean v4;
java.io.InputStream v1;
v0 := @this: org.eclipse.parsson.JsonParserImpl;
v1 := @parameter0: java.io.InputStream;
v2 := @parameter1: java.nio.charset.Charset;
v3 := @parameter2: org.eclipse.parsson.api.BufferPool;
v4 := @parameter3: boolean;
v5 := @parameter4: java.util.Map;
specialinvoke v0.<java.lang.Object: void <init>()>();
v6 = new org.eclipse.parsson.JsonParserImpl$NoneContext;
specialinvoke v6.<org.eclipse.parsson.JsonParserImpl$NoneContext: void <init>(org.eclipse.parsson.JsonParserImpl)>(v0);
v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonParserImpl$Context currentContext> = v6;
v7 = new org.eclipse.parsson.JsonParserImpl$Stack;
specialinvoke v7.<org.eclipse.parsson.JsonParserImpl$Stack: void <init>()>();
v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonParserImpl$Stack stack> = v7;
v0.<org.eclipse.parsson.JsonParserImpl: boolean closed> = 0;
v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.api.BufferPool bufferPool> = v3;
v0.<org.eclipse.parsson.JsonParserImpl: boolean rejectDuplicateKeys> = v4;
v0.<org.eclipse.parsson.JsonParserImpl: java.util.Map config> = v5;
v8 = new org.eclipse.parsson.JsonTokenizer;
v9 = new java.io.InputStreamReader;
specialinvoke v9.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>(v1, v2);
specialinvoke v8.<org.eclipse.parsson.JsonTokenizer: void <init>(java.io.Reader,org.eclipse.parsson.api.BufferPool)>(v9, v3);
v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonTokenizer tokenizer> = v8;
return;
}
public java.lang.String getString()
{
java.lang.IllegalStateException v9;
org.eclipse.parsson.JsonParserImpl v0;
org.eclipse.parsson.JsonTokenizer v7;
jakarta.json.stream.JsonParser$Event v1, v10, v2, v3, v4, v5, v6;
java.lang.String v11, v8;
v0 := @this: org.eclipse.parsson.JsonParserImpl;
v1 = v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent>;
v2 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event KEY_NAME>;
if v1 == v2 goto label1;
v3 = v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent>;
v4 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event VALUE_STRING>;
if v3 == v4 goto label1;
v5 = v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent>;
v6 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event VALUE_NUMBER>;
if v5 != v6 goto label2;
label1:
v7 = v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonTokenizer tokenizer>;
v8 = virtualinvoke v7.<org.eclipse.parsson.JsonTokenizer: java.lang.String getValue()>();
return v8;
label2:
v9 = new java.lang.IllegalStateException;
v10 = v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent>;
v11 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String PARSER_GETSTRING_ERR(jakarta.json.stream.JsonParser$Event)>(v10);
specialinvoke v9.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v11);
throw v9;
}
public boolean isIntegralNumber()
{
java.lang.IllegalStateException v3;
org.eclipse.parsson.JsonParserImpl v0;
org.eclipse.parsson.JsonTokenizer v6;
jakarta.json.stream.JsonParser$Event v1, v2, v4;
java.lang.String v5;
boolean v7;
v0 := @this: org.eclipse.parsson.JsonParserImpl;
v1 = v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent>;
v2 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event VALUE_NUMBER>;
if v1 == v2 goto label1;
v3 = new java.lang.IllegalStateException;
v4 = v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent>;
v5 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String PARSER_ISINTEGRALNUMBER_ERR(jakarta.json.stream.JsonParser$Event)>(v4);
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v5);
throw v3;
label1:
v6 = v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonTokenizer tokenizer>;
v7 = virtualinvoke v6.<org.eclipse.parsson.JsonTokenizer: boolean isIntegral()>();
return v7;
}
public int getInt()
{
java.lang.IllegalStateException v3;
org.eclipse.parsson.JsonParserImpl v0;
org.eclipse.parsson.JsonTokenizer v6;
jakarta.json.stream.JsonParser$Event v1, v2, v4;
int v7;
java.lang.String v5;
v0 := @this: org.eclipse.parsson.JsonParserImpl;
v1 = v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent>;
v2 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event VALUE_NUMBER>;
if v1 == v2 goto label1;
v3 = new java.lang.IllegalStateException;
v4 = v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent>;
v5 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String PARSER_GETINT_ERR(jakarta.json.stream.JsonParser$Event)>(v4);
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v5);
throw v3;
label1:
v6 = v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonTokenizer tokenizer>;
v7 = virtualinvoke v6.<org.eclipse.parsson.JsonTokenizer: int getInt()>();
return v7;
}
boolean isDefinitelyInt()
{
org.eclipse.parsson.JsonParserImpl v0;
org.eclipse.parsson.JsonTokenizer v1;
boolean v2;
v0 := @this: org.eclipse.parsson.JsonParserImpl;
v1 = v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonTokenizer tokenizer>;
v2 = virtualinvoke v1.<org.eclipse.parsson.JsonTokenizer: boolean isDefinitelyInt()>();
return v2;
}
boolean isDefinitelyLong()
{
org.eclipse.parsson.JsonParserImpl v0;
org.eclipse.parsson.JsonTokenizer v1;
boolean v2;
v0 := @this: org.eclipse.parsson.JsonParserImpl;
v1 = v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonTokenizer tokenizer>;
v2 = virtualinvoke v1.<org.eclipse.parsson.JsonTokenizer: boolean isDefinitelyLong()>();
return v2;
}
public long getLong()
{
java.lang.IllegalStateException v3;
org.eclipse.parsson.JsonParserImpl v0;
long v7;
org.eclipse.parsson.JsonTokenizer v6;
jakarta.json.stream.JsonParser$Event v1, v2, v4;
java.lang.String v5;
v0 := @this: org.eclipse.parsson.JsonParserImpl;
v1 = v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent>;
v2 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event VALUE_NUMBER>;
if v1 == v2 goto label1;
v3 = new java.lang.IllegalStateException;
v4 = v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent>;
v5 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String PARSER_GETLONG_ERR(jakarta.json.stream.JsonParser$Event)>(v4);
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v5);
throw v3;
label1:
v6 = v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonTokenizer tokenizer>;
v7 = virtualinvoke v6.<org.eclipse.parsson.JsonTokenizer: long getLong()>();
return v7;
}
public java.math.BigDecimal getBigDecimal()
{
java.lang.IllegalStateException v3;
org.eclipse.parsson.JsonParserImpl v0;
org.eclipse.parsson.JsonTokenizer v6;
java.math.BigDecimal v7;
jakarta.json.stream.JsonParser$Event v1, v2, v4;
java.lang.String v5;
v0 := @this: org.eclipse.parsson.JsonParserImpl;
v1 = v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent>;
v2 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event VALUE_NUMBER>;
if v1 == v2 goto label1;
v3 = new java.lang.IllegalStateException;
v4 = v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent>;
v5 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String PARSER_GETBIGDECIMAL_ERR(jakarta.json.stream.JsonParser$Event)>(v4);
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v5);
throw v3;
label1:
v6 = v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonTokenizer tokenizer>;
v7 = virtualinvoke v6.<org.eclipse.parsson.JsonTokenizer: java.math.BigDecimal getBigDecimal()>();
return v7;
}
public jakarta.json.JsonArray getArray()
{
java.lang.IllegalStateException v3;
org.eclipse.parsson.JsonArrayBuilderImpl v6;
org.eclipse.parsson.JsonParserImpl v0;
jakarta.json.stream.JsonParser$Event v1, v2, v4;
java.lang.String v5;
org.eclipse.parsson.api.BufferPool v7;
jakarta.json.JsonArray v8;
v0 := @this: org.eclipse.parsson.JsonParserImpl;
v1 = v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent>;
v2 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event START_ARRAY>;
if v1 == v2 goto label1;
v3 = new java.lang.IllegalStateException;
v4 = v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent>;
v5 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String PARSER_GETARRAY_ERR(jakarta.json.stream.JsonParser$Event)>(v4);
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v5);
throw v3;
label1:
v6 = new org.eclipse.parsson.JsonArrayBuilderImpl;
v7 = v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.api.BufferPool bufferPool>;
specialinvoke v6.<org.eclipse.parsson.JsonArrayBuilderImpl: void <init>(org.eclipse.parsson.api.BufferPool)>(v7);
v8 = specialinvoke v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.JsonArray getArray(jakarta.json.JsonArrayBuilder)>(v6);
return v8;
}
public jakarta.json.JsonObject getObject()
{
java.lang.IllegalStateException v3;
org.eclipse.parsson.JsonObjectBuilderImpl v6;
org.eclipse.parsson.JsonParserImpl v0;
jakarta.json.stream.JsonParser$Event v1, v2, v4;
java.util.Map v9;
jakarta.json.JsonObject v10;
java.lang.String v5;
org.eclipse.parsson.api.BufferPool v7;
boolean v8;
v0 := @this: org.eclipse.parsson.JsonParserImpl;
v1 = v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent>;
v2 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event START_OBJECT>;
if v1 == v2 goto label1;
v3 = new java.lang.IllegalStateException;
v4 = v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent>;
v5 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String PARSER_GETOBJECT_ERR(jakarta.json.stream.JsonParser$Event)>(v4);
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v5);
throw v3;
label1:
v6 = new org.eclipse.parsson.JsonObjectBuilderImpl;
v7 = v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.api.BufferPool bufferPool>;
v8 = v0.<org.eclipse.parsson.JsonParserImpl: boolean rejectDuplicateKeys>;
v9 = v0.<org.eclipse.parsson.JsonParserImpl: java.util.Map config>;
specialinvoke v6.<org.eclipse.parsson.JsonObjectBuilderImpl: void <init>(org.eclipse.parsson.api.BufferPool,boolean,java.util.Map)>(v7, v8, v9);
v10 = specialinvoke v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.JsonObject getObject(jakarta.json.JsonObjectBuilder)>(v6);
return v10;
}
public jakarta.json.JsonValue getValue()
{
java.lang.IllegalStateException v26;
org.eclipse.parsson.JsonObjectBuilderImpl v8;
jakarta.json.JsonValue v23, v24, v25;
long v19;
java.math.BigDecimal v21;
int[] v1;
java.util.Map v11;
int v16, v3, v4;
jakarta.json.JsonObject v12;
org.eclipse.parsson.JsonStringImpl v13;
java.lang.String v28;
boolean v10, v15, v18;
java.lang.CharSequence v14;
org.eclipse.parsson.JsonArrayBuilderImpl v5;
org.eclipse.parsson.JsonParserImpl v0;
jakarta.json.stream.JsonParser$Event v2, v27;
jakarta.json.JsonNumber v17, v20, v22;
org.eclipse.parsson.api.BufferPool v6, v9;
jakarta.json.JsonArray v7;
v0 := @this: org.eclipse.parsson.JsonParserImpl;
v1 = <org.eclipse.parsson.JsonParserImpl$4: int[] $SwitchMap$jakarta$json$stream$JsonParser$Event>;
v2 = v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent>;
v3 = virtualinvoke v2.<jakarta.json.stream.JsonParser$Event: int ordinal()>();
v4 = v1[v3];
tableswitch(v4)
{
case 1: goto label01;
case 2: goto label02;
case 3: goto label03;
case 4: goto label03;
case 5: goto label04;
case 6: goto label07;
case 7: goto label08;
case 8: goto label09;
case 9: goto label10;
case 10: goto label10;
default: goto label10;
};
label01:
v5 = new org.eclipse.parsson.JsonArrayBuilderImpl;
v6 = v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.api.BufferPool bufferPool>;
specialinvoke v5.<org.eclipse.parsson.JsonArrayBuilderImpl: void <init>(org.eclipse.parsson.api.BufferPool)>(v6);
v7 = specialinvoke v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.JsonArray getArray(jakarta.json.JsonArrayBuilder)>(v5);
return v7;
label02:
v8 = new org.eclipse.parsson.JsonObjectBuilderImpl;
v9 = v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.api.BufferPool bufferPool>;
v10 = v0.<org.eclipse.parsson.JsonParserImpl: boolean rejectDuplicateKeys>;
v11 = v0.<org.eclipse.parsson.JsonParserImpl: java.util.Map config>;
specialinvoke v8.<org.eclipse.parsson.JsonObjectBuilderImpl: void <init>(org.eclipse.parsson.api.BufferPool,boolean,java.util.Map)>(v9, v10, v11);
v12 = specialinvoke v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.JsonObject getObject(jakarta.json.JsonObjectBuilder)>(v8);
return v12;
label03:
v13 = new org.eclipse.parsson.JsonStringImpl;
v14 = specialinvoke v0.<org.eclipse.parsson.JsonParserImpl: java.lang.CharSequence getCharSequence()>();
specialinvoke v13.<org.eclipse.parsson.JsonStringImpl: void <init>(java.lang.CharSequence)>(v14);
return v13;
label04:
v15 = virtualinvoke v0.<org.eclipse.parsson.JsonParserImpl: boolean isDefinitelyInt()>();
if v15 == 0 goto label05;
v16 = virtualinvoke v0.<org.eclipse.parsson.JsonParserImpl: int getInt()>();
v17 = staticinvoke <org.eclipse.parsson.JsonNumberImpl: jakarta.json.JsonNumber getJsonNumber(int)>(v16);
return v17;
label05:
v18 = virtualinvoke v0.<org.eclipse.parsson.JsonParserImpl: boolean isDefinitelyLong()>();
if v18 == 0 goto label06;
v19 = virtualinvoke v0.<org.eclipse.parsson.JsonParserImpl: long getLong()>();
v20 = staticinvoke <org.eclipse.parsson.JsonNumberImpl: jakarta.json.JsonNumber getJsonNumber(long)>(v19);
return v20;
label06:
v21 = virtualinvoke v0.<org.eclipse.parsson.JsonParserImpl: java.math.BigDecimal getBigDecimal()>();
v22 = staticinvoke <org.eclipse.parsson.JsonNumberImpl: jakarta.json.JsonNumber getJsonNumber(java.math.BigDecimal)>(v21);
return v22;
label07:
v23 = <jakarta.json.JsonValue: jakarta.json.JsonValue TRUE>;
return v23;
label08:
v24 = <jakarta.json.JsonValue: jakarta.json.JsonValue FALSE>;
return v24;
label09:
v25 = <jakarta.json.JsonValue: jakarta.json.JsonValue NULL>;
return v25;
label10:
v26 = new java.lang.IllegalStateException;
v27 = v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent>;
v28 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String PARSER_GETVALUE_ERR(jakarta.json.stream.JsonParser$Event)>(v27);
specialinvoke v26.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v28);
throw v26;
}
public java.util.stream.Stream getArrayStream()
{
java.lang.IllegalStateException v3;
org.eclipse.parsson.JsonParserImpl v0;
java.util.stream.Stream v7;
jakarta.json.stream.JsonParser$Event v1, v2, v4;
java.lang.String v5;
org.eclipse.parsson.JsonParserImpl$1 v6;
v0 := @this: org.eclipse.parsson.JsonParserImpl;
v1 = v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent>;
v2 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event START_ARRAY>;
if v1 == v2 goto label1;
v3 = new java.lang.IllegalStateException;
v4 = v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent>;
v5 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String PARSER_GETARRAY_ERR(jakarta.json.stream.JsonParser$Event)>(v4);
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v5);
throw v3;
label1:
v6 = new org.eclipse.parsson.JsonParserImpl$1;
specialinvoke v6.<org.eclipse.parsson.JsonParserImpl$1: void <init>(org.eclipse.parsson.JsonParserImpl,long,int)>(v0, 9223372036854775807L, 16);
v7 = staticinvoke <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>(v6, 0);
return v7;
}
public java.util.stream.Stream getObjectStream()
{
java.lang.IllegalStateException v3;
org.eclipse.parsson.JsonParserImpl v0;
java.util.stream.Stream v7;
jakarta.json.stream.JsonParser$Event v1, v2, v4;
java.lang.String v5;
org.eclipse.parsson.JsonParserImpl$2 v6;
v0 := @this: org.eclipse.parsson.JsonParserImpl;
v1 = v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent>;
v2 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event START_OBJECT>;
if v1 == v2 goto label1;
v3 = new java.lang.IllegalStateException;
v4 = v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent>;
v5 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String PARSER_GETOBJECT_ERR(jakarta.json.stream.JsonParser$Event)>(v4);
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v5);
throw v3;
label1:
v6 = new org.eclipse.parsson.JsonParserImpl$2;
specialinvoke v6.<org.eclipse.parsson.JsonParserImpl$2: void <init>(org.eclipse.parsson.JsonParserImpl,long,int)>(v0, 9223372036854775807L, 16);
v7 = staticinvoke <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>(v6, 0);
return v7;
}
public java.util.stream.Stream getValueStream()
{
java.lang.IllegalStateException v3;
java.util.stream.Stream v6;
org.eclipse.parsson.JsonParserImpl$Context v1;
org.eclipse.parsson.JsonParserImpl v0;
java.lang.String v4;
org.eclipse.parsson.JsonParserImpl$3 v5;
boolean v2;
v0 := @this: org.eclipse.parsson.JsonParserImpl;
v1 = v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonParserImpl$Context currentContext>;
v2 = v1 instanceof org.eclipse.parsson.JsonParserImpl$NoneContext;
if v2 != 0 goto label1;
v3 = new java.lang.IllegalStateException;
v4 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String PARSER_GETVALUESTREAM_ERR()>();
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v4);
throw v3;
label1:
v5 = new org.eclipse.parsson.JsonParserImpl$3;
specialinvoke v5.<org.eclipse.parsson.JsonParserImpl$3: void <init>(org.eclipse.parsson.JsonParserImpl,long,int)>(v0, 9223372036854775807L, 16);
v6 = staticinvoke <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>(v5, 0);
return v6;
}
public void skipArray()
{
org.eclipse.parsson.JsonParserImpl$Stack v4;
org.eclipse.parsson.JsonParserImpl$Context v3, v5;
jakarta.json.stream.JsonParser$Event v1, v2, v6;
org.eclipse.parsson.JsonParserImpl v0;
v0 := @this: org.eclipse.parsson.JsonParserImpl;
v1 = v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent>;
v2 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event START_ARRAY>;
if v1 != v2 goto label1;
v3 = v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonParserImpl$Context currentContext>;
virtualinvoke v3.<org.eclipse.parsson.JsonParserImpl$Context: void skip()>();
v4 = v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonParserImpl$Stack stack>;
v5 = specialinvoke v4.<org.eclipse.parsson.JsonParserImpl$Stack: org.eclipse.parsson.JsonParserImpl$Context pop()>();
v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonParserImpl$Context currentContext> = v5;
v6 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event END_ARRAY>;
v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent> = v6;
label1:
return;
}
public void skipObject()
{
org.eclipse.parsson.JsonParserImpl$Stack v4;
org.eclipse.parsson.JsonParserImpl$Context v3, v5;
jakarta.json.stream.JsonParser$Event v1, v2, v6;
org.eclipse.parsson.JsonParserImpl v0;
v0 := @this: org.eclipse.parsson.JsonParserImpl;
v1 = v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent>;
v2 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event START_OBJECT>;
if v1 != v2 goto label1;
v3 = v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonParserImpl$Context currentContext>;
virtualinvoke v3.<org.eclipse.parsson.JsonParserImpl$Context: void skip()>();
v4 = v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonParserImpl$Stack stack>;
v5 = specialinvoke v4.<org.eclipse.parsson.JsonParserImpl$Stack: org.eclipse.parsson.JsonParserImpl$Context pop()>();
v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonParserImpl$Context currentContext> = v5;
v6 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event END_OBJECT>;
v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent> = v6;
label1:
return;
}
private jakarta.json.JsonArray getArray(jakarta.json.JsonArrayBuilder)
{
jakarta.json.stream.JsonParsingException v8;
jakarta.json.JsonValue v6;
org.eclipse.parsson.JsonTokenizer$JsonToken v7;
jakarta.json.JsonArrayBuilder v1;
org.eclipse.parsson.JsonParserImpl v0;
jakarta.json.stream.JsonParser$Event v3, v4;
jakarta.json.JsonArray v5;
boolean v2;
v0 := @this: org.eclipse.parsson.JsonParserImpl;
v1 := @parameter0: jakarta.json.JsonArrayBuilder;
label1:
v2 = virtualinvoke v0.<org.eclipse.parsson.JsonParserImpl: boolean hasNext()>();
if v2 == 0 goto label3;
v3 = virtualinvoke v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event next()>();
v4 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event END_ARRAY>;
if v3 != v4 goto label2;
v5 = interfaceinvoke v1.<jakarta.json.JsonArrayBuilder: jakarta.json.JsonArray build()>();
return v5;
label2:
v6 = virtualinvoke v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.JsonValue getValue()>();
interfaceinvoke v1.<jakarta.json.JsonArrayBuilder: jakarta.json.JsonArrayBuilder add(jakarta.json.JsonValue)>(v6);
goto label1;
label3:
v7 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken EOF>;
v8 = specialinvoke v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParsingException parsingException(org.eclipse.parsson.JsonTokenizer$JsonToken,java.lang.String)>(v7, "[CURLYOPEN, SQUAREOPEN, STRING, NUMBER, TRUE, FALSE, NULL, SQUARECLOSE]");
throw v8;
}
private java.lang.CharSequence getCharSequence()
{
java.lang.IllegalStateException v9;
java.lang.CharSequence v8;
org.eclipse.parsson.JsonParserImpl v0;
org.eclipse.parsson.JsonTokenizer v7;
jakarta.json.stream.JsonParser$Event v1, v10, v2, v3, v4, v5, v6;
java.lang.String v11;
v0 := @this: org.eclipse.parsson.JsonParserImpl;
v1 = v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent>;
v2 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event KEY_NAME>;
if v1 == v2 goto label1;
v3 = v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent>;
v4 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event VALUE_STRING>;
if v3 == v4 goto label1;
v5 = v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent>;
v6 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event VALUE_NUMBER>;
if v5 != v6 goto label2;
label1:
v7 = v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonTokenizer tokenizer>;
v8 = virtualinvoke v7.<org.eclipse.parsson.JsonTokenizer: java.lang.CharSequence getCharSequence()>();
return v8;
label2:
v9 = new java.lang.IllegalStateException;
v10 = v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent>;
v11 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String PARSER_GETSTRING_ERR(jakarta.json.stream.JsonParser$Event)>(v10);
specialinvoke v9.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v11);
throw v9;
}
private jakarta.json.JsonObject getObject(jakarta.json.JsonObjectBuilder)
{
jakarta.json.stream.JsonParsingException v9;
jakarta.json.JsonValue v7;
org.eclipse.parsson.JsonTokenizer$JsonToken v8;
org.eclipse.parsson.JsonParserImpl v0;
jakarta.json.JsonObjectBuilder v1;
jakarta.json.stream.JsonParser$Event v3, v4;
jakarta.json.JsonObject v5;
java.lang.String v6;
boolean v2;
v0 := @this: org.eclipse.parsson.JsonParserImpl;
v1 := @parameter0: jakarta.json.JsonObjectBuilder;
label1:
v2 = virtualinvoke v0.<org.eclipse.parsson.JsonParserImpl: boolean hasNext()>();
if v2 == 0 goto label3;
v3 = virtualinvoke v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event next()>();
v4 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event END_OBJECT>;
if v3 != v4 goto label2;
v5 = interfaceinvoke v1.<jakarta.json.JsonObjectBuilder: jakarta.json.JsonObject build()>();
return v5;
label2:
v6 = virtualinvoke v0.<org.eclipse.parsson.JsonParserImpl: java.lang.String getString()>();
virtualinvoke v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event next()>();
v7 = virtualinvoke v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.JsonValue getValue()>();
interfaceinvoke v1.<jakarta.json.JsonObjectBuilder: jakarta.json.JsonObjectBuilder add(java.lang.String,jakarta.json.JsonValue)>(v6, v7);
goto label1;
label3:
v8 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken EOF>;
v9 = specialinvoke v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParsingException parsingException(org.eclipse.parsson.JsonTokenizer$JsonToken,java.lang.String)>(v8, "[STRING, CURLYCLOSE]");
throw v9;
}
public jakarta.json.stream.JsonLocation getLocation()
{
org.eclipse.parsson.JsonParserImpl v0;
jakarta.json.stream.JsonLocation v2;
org.eclipse.parsson.JsonTokenizer v1;
v0 := @this: org.eclipse.parsson.JsonParserImpl;
v1 = v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonTokenizer tokenizer>;
v2 = virtualinvoke v1.<org.eclipse.parsson.JsonTokenizer: jakarta.json.stream.JsonLocation getLocation()>();
return v2;
}
public jakarta.json.stream.JsonLocation getLastCharLocation()
{
org.eclipse.parsson.JsonParserImpl v0;
jakarta.json.stream.JsonLocation v2;
org.eclipse.parsson.JsonTokenizer v1;
v0 := @this: org.eclipse.parsson.JsonParserImpl;
v1 = v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonTokenizer tokenizer>;
v2 = virtualinvoke v1.<org.eclipse.parsson.JsonTokenizer: jakarta.json.stream.JsonLocation getLastCharLocation()>();
return v2;
}
public boolean hasNext()
{
org.eclipse.parsson.JsonParserImpl$Stack v1, v13;
org.eclipse.parsson.JsonParserImpl$Context v17;
org.eclipse.parsson.JsonTokenizer$JsonToken v8, v9;
org.eclipse.parsson.JsonTokenizer v15, v7;
int v6;
java.lang.String v11;
boolean v14, v16, v2;
jakarta.json.stream.JsonLocation v12;
jakarta.json.stream.JsonParsingException v10;
org.eclipse.parsson.JsonParserImpl v0;
jakarta.json.stream.JsonParser$Event v18, v3, v4, v5;
v0 := @this: org.eclipse.parsson.JsonParserImpl;
v1 = v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonParserImpl$Stack stack>;
v2 = specialinvoke v1.<org.eclipse.parsson.JsonParserImpl$Stack: boolean isEmpty()>();
if v2 == 0 goto label2;
v3 = v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent>;
if v3 == null goto label2;
v4 = v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent>;
v5 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event KEY_NAME>;
v6 = virtualinvoke v4.<jakarta.json.stream.JsonParser$Event: int compareTo(java.lang.Enum)>(v5);
if v6 <= 0 goto label2;
v7 = v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonTokenizer tokenizer>;
v8 = virtualinvoke v7.<org.eclipse.parsson.JsonTokenizer: org.eclipse.parsson.JsonTokenizer$JsonToken nextToken()>();
v9 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken EOF>;
if v8 == v9 goto label1;
v10 = new jakarta.json.stream.JsonParsingException;
v11 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String PARSER_EXPECTED_EOF(org.eclipse.parsson.JsonTokenizer$JsonToken)>(v8);
v12 = virtualinvoke v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonLocation getLastCharLocation()>();
specialinvoke v10.<jakarta.json.stream.JsonParsingException: void <init>(java.lang.String,jakarta.json.stream.JsonLocation)>(v11, v12);
throw v10;
label1:
return 0;
label2:
v13 = v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonParserImpl$Stack stack>;
v14 = specialinvoke v13.<org.eclipse.parsson.JsonParserImpl$Stack: boolean isEmpty()>();
if v14 != 0 goto label3;
v15 = v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonTokenizer tokenizer>;
v16 = virtualinvoke v15.<org.eclipse.parsson.JsonTokenizer: boolean hasNextToken()>();
if v16 != 0 goto label3;
v17 = v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonParserImpl$Context currentContext>;
v18 = virtualinvoke v17.<org.eclipse.parsson.JsonParserImpl$Context: jakarta.json.stream.JsonParser$Event getNextEvent()>();
v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent> = v18;
return 0;
label3:
return 1;
}
public jakarta.json.stream.JsonParser$Event next()
{
org.eclipse.parsson.JsonParserImpl$Context v3;
jakarta.json.stream.JsonParser$Event v4;
org.eclipse.parsson.JsonParserImpl v0;
java.util.NoSuchElementException v2;
boolean v1;
v0 := @this: org.eclipse.parsson.JsonParserImpl;
v1 = virtualinvoke v0.<org.eclipse.parsson.JsonParserImpl: boolean hasNext()>();
if v1 != 0 goto label1;
v2 = new java.util.NoSuchElementException;
specialinvoke v2.<java.util.NoSuchElementException: void <init>()>();
throw v2;
label1:
v3 = v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonParserImpl$Context currentContext>;
v4 = virtualinvoke v3.<org.eclipse.parsson.JsonParserImpl$Context: jakarta.json.stream.JsonParser$Event getNextEvent()>();
v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent> = v4;
return v4;
}
public jakarta.json.stream.JsonParser$Event currentEvent()
{
org.eclipse.parsson.JsonParserImpl v0;
jakarta.json.stream.JsonParser$Event v1;
v0 := @this: org.eclipse.parsson.JsonParserImpl;
v1 = v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonParser$Event currentEvent>;
return v1;
}
public void close()
{
org.eclipse.parsson.JsonParserImpl v0;
java.io.IOException v3;
jakarta.json.JsonException v4;
java.lang.String v5;
org.eclipse.parsson.JsonTokenizer v2;
boolean v1;
v0 := @this: org.eclipse.parsson.JsonParserImpl;
v1 = v0.<org.eclipse.parsson.JsonParserImpl: boolean closed>;
if v1 != 0 goto label4;
label1:
v2 = v0.<org.eclipse.parsson.JsonParserImpl: org.eclipse.parsson.JsonTokenizer tokenizer>;
virtualinvoke v2.<org.eclipse.parsson.JsonTokenizer: void close()>();
v0.<org.eclipse.parsson.JsonParserImpl: boolean closed> = 1;
label2:
goto label4;
label3:
v3 := @caughtexception;
v4 = new jakarta.json.JsonException;
v5 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String PARSER_TOKENIZER_CLOSE_IO()>();
specialinvoke v4.<jakarta.json.JsonException: void <init>(java.lang.String,java.lang.Throwable)>(v5, v3);
throw v4;
label4:
return;
catch java.io.IOException from label1 to label2 with label3;
}
private jakarta.json.stream.JsonParsingException parsingException(org.eclipse.parsson.JsonTokenizer$JsonToken, java.lang.String)
{
jakarta.json.stream.JsonLocation v3;
jakarta.json.stream.JsonParsingException v4;
org.eclipse.parsson.JsonTokenizer$JsonToken v1;
org.eclipse.parsson.JsonParserImpl v0;
java.lang.String v2, v5;
v0 := @this: org.eclipse.parsson.JsonParserImpl;
v1 := @parameter0: org.eclipse.parsson.JsonTokenizer$JsonToken;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<org.eclipse.parsson.JsonParserImpl: jakarta.json.stream.JsonLocation getLastCharLocation()>();
v4 = new jakarta.json.stream.JsonParsingException;
v5 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String PARSER_INVALID_TOKEN(org.eclipse.parsson.JsonTokenizer$JsonToken,jakarta.json.stream.JsonLocation,java.lang.String)>(v1, v3, v2);
specialinvoke v4.<jakarta.json.stream.JsonParsingException: void <init>(java.lang.String,jakarta.json.stream.JsonLocation)>(v5, v3);
return v4;
}
}