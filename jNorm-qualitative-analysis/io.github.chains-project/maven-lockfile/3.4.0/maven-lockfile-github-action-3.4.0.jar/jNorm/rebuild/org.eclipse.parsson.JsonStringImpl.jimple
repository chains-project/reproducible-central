final class org.eclipse.parsson.JsonStringImpl extends java.lang.Object implements jakarta.json.JsonString
{
private final java.lang.CharSequence value;
void <init>(java.lang.CharSequence)
{
org.eclipse.parsson.JsonStringImpl v0;
java.lang.CharSequence v1;
v0 := @this: org.eclipse.parsson.JsonStringImpl;
v1 := @parameter0: java.lang.CharSequence;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.eclipse.parsson.JsonStringImpl: java.lang.CharSequence value> = v1;
return;
}
public java.lang.String getString()
{
org.eclipse.parsson.JsonStringImpl v0;
java.lang.String v2;
java.lang.CharSequence v1;
v0 := @this: org.eclipse.parsson.JsonStringImpl;
v1 = v0.<org.eclipse.parsson.JsonStringImpl: java.lang.CharSequence value>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
return v2;
}
public java.lang.CharSequence getChars()
{
org.eclipse.parsson.JsonStringImpl v0;
java.lang.CharSequence v1;
v0 := @this: org.eclipse.parsson.JsonStringImpl;
v1 = v0.<org.eclipse.parsson.JsonStringImpl: java.lang.CharSequence value>;
return v1;
}
public jakarta.json.JsonValue$ValueType getValueType()
{
jakarta.json.JsonValue$ValueType v1;
org.eclipse.parsson.JsonStringImpl v0;
v0 := @this: org.eclipse.parsson.JsonStringImpl;
v1 = <jakarta.json.JsonValue$ValueType: jakarta.json.JsonValue$ValueType STRING>;
return v1;
}
public int hashCode()
{
int v2;
org.eclipse.parsson.JsonStringImpl v0;
java.lang.String v1;
v0 := @this: org.eclipse.parsson.JsonStringImpl;
v1 = virtualinvoke v0.<org.eclipse.parsson.JsonStringImpl: java.lang.String getString()>();
v2 = virtualinvoke v1.<java.lang.String: int hashCode()>();
return v2;
}
public boolean equals(java.lang.Object)
{
org.eclipse.parsson.JsonStringImpl v0;
java.lang.Object v1;
java.lang.String v3, v4;
boolean v2, v5;
v0 := @this: org.eclipse.parsson.JsonStringImpl;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
v2 = v1 instanceof jakarta.json.JsonString;
if v2 != 0 goto label2;
return 0;
label2:
v3 = virtualinvoke v0.<org.eclipse.parsson.JsonStringImpl: java.lang.String getString()>();
v4 = interfaceinvoke v1.<jakarta.json.JsonString: java.lang.String getString()>();
v5 = virtualinvoke v3.<java.lang.String: boolean equals(java.lang.Object)>(v4);
return v5;
}
public java.lang.String toString()
{
java.lang.CharSequence v3, v5;
char v6;
int v10, v11, v2, v4;
org.eclipse.parsson.JsonStringImpl v0;
java.lang.StringBuilder v1, v9;
java.lang.String v12, v13, v7, v8;
v0 := @this: org.eclipse.parsson.JsonStringImpl;
v1 = new java.lang.StringBuilder;
specialinvoke v1.<java.lang.StringBuilder: void <init>()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);
v2 = 0;
label01:
v3 = v0.<org.eclipse.parsson.JsonStringImpl: java.lang.CharSequence value>;
v4 = interfaceinvoke v3.<java.lang.CharSequence: int length()>();
if v2 >= v4 goto label11;
v5 = v0.<org.eclipse.parsson.JsonStringImpl: java.lang.CharSequence value>;
v6 = interfaceinvoke v5.<java.lang.CharSequence: char charAt(int)>(v2);
if v6 < 32 goto label02;
if v6 > 1114111 goto label02;
if v6 == 34 goto label02;
if v6 == 92 goto label02;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v6);
goto label10;
label02:
lookupswitch(v6)
{
case 8: goto label04;
case 9: goto label08;
case 10: goto label06;
case 12: goto label05;
case 13: goto label07;
case 34: goto label03;
case 92: goto label03;
default: goto label09;
};
label03:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92);
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v6);
goto label10;
label04:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92);
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(98);
goto label10;
label05:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92);
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(102);
goto label10;
label06:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92);
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(110);
goto label10;
label07:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92);
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(114);
goto label10;
label08:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92);
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(116);
goto label10;
label09:
v7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v6);
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("000\u0001");
v9 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\u");
v10 = virtualinvoke v8.<java.lang.String: int length()>();
v11 = v10 - 4;
v12 = virtualinvoke v8.<java.lang.String: java.lang.String substring(int)>(v11);
virtualinvoke v9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v12);
label10:
v2 = v2 + 1;
goto label01;
label11:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);
v13 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.String toString()>();
return v13;
}
}