final enum class org.eclipse.parsson.JsonTokenizer$JsonToken extends java.lang.Enum
{
public static final enum org.eclipse.parsson.JsonTokenizer$JsonToken CURLYOPEN;
public static final enum org.eclipse.parsson.JsonTokenizer$JsonToken SQUAREOPEN;
public static final enum org.eclipse.parsson.JsonTokenizer$JsonToken COLON;
public static final enum org.eclipse.parsson.JsonTokenizer$JsonToken COMMA;
public static final enum org.eclipse.parsson.JsonTokenizer$JsonToken STRING;
public static final enum org.eclipse.parsson.JsonTokenizer$JsonToken NUMBER;
public static final enum org.eclipse.parsson.JsonTokenizer$JsonToken TRUE;
public static final enum org.eclipse.parsson.JsonTokenizer$JsonToken FALSE;
public static final enum org.eclipse.parsson.JsonTokenizer$JsonToken NULL;
public static final enum org.eclipse.parsson.JsonTokenizer$JsonToken CURLYCLOSE;
public static final enum org.eclipse.parsson.JsonTokenizer$JsonToken SQUARECLOSE;
public static final enum org.eclipse.parsson.JsonTokenizer$JsonToken EOF;
private final jakarta.json.stream.JsonParser$Event event;
private final boolean value;
private static final org.eclipse.parsson.JsonTokenizer$JsonToken[] $VALUES;
public static org.eclipse.parsson.JsonTokenizer$JsonToken[] values()
{
java.lang.Object v1;
org.eclipse.parsson.JsonTokenizer$JsonToken[] v0;
v0 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken[] $VALUES>;
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
return v1;
}
public static org.eclipse.parsson.JsonTokenizer$JsonToken valueOf(java.lang.String)
{
java.lang.String v0;
java.lang.Enum v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/eclipse/parsson/JsonTokenizer$JsonToken;", v0);
return v1;
}
private void <init>(java.lang.String, int, jakarta.json.stream.JsonParser$Event, boolean)
{
jakarta.json.stream.JsonParser$Event v3;
org.eclipse.parsson.JsonTokenizer$JsonToken v0;
int v2;
java.lang.String v1;
boolean v4;
v0 := @this: org.eclipse.parsson.JsonTokenizer$JsonToken;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: jakarta.json.stream.JsonParser$Event;
v4 := @parameter3: boolean;
specialinvoke v0.<java.lang.Enum: void <init>(java.lang.String,int)>(v1, v2);
v0.<org.eclipse.parsson.JsonTokenizer$JsonToken: jakarta.json.stream.JsonParser$Event event> = v3;
v0.<org.eclipse.parsson.JsonTokenizer$JsonToken: boolean value> = v4;
return;
}
jakarta.json.stream.JsonParser$Event getEvent()
{
jakarta.json.stream.JsonParser$Event v1;
org.eclipse.parsson.JsonTokenizer$JsonToken v0;
v0 := @this: org.eclipse.parsson.JsonTokenizer$JsonToken;
v1 = v0.<org.eclipse.parsson.JsonTokenizer$JsonToken: jakarta.json.stream.JsonParser$Event event>;
return v1;
}
boolean isValue()
{
boolean v1;
org.eclipse.parsson.JsonTokenizer$JsonToken v0;
v0 := @this: org.eclipse.parsson.JsonTokenizer$JsonToken;
v1 = v0.<org.eclipse.parsson.JsonTokenizer$JsonToken: boolean value>;
return v1;
}
private static org.eclipse.parsson.JsonTokenizer$JsonToken[] $values()
{
org.eclipse.parsson.JsonTokenizer$JsonToken v1, v10, v11, v12, v2, v3, v4, v5, v6, v7, v8, v9;
org.eclipse.parsson.JsonTokenizer$JsonToken[] v0;
v0 = newarray (org.eclipse.parsson.JsonTokenizer$JsonToken)[12];
v1 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken CURLYOPEN>;
v0[0] = v1;
v2 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken SQUAREOPEN>;
v0[1] = v2;
v3 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken COLON>;
v0[2] = v3;
v4 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken COMMA>;
v0[3] = v4;
v5 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken STRING>;
v0[4] = v5;
v6 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken NUMBER>;
v0[5] = v6;
v7 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken TRUE>;
v0[6] = v7;
v8 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken FALSE>;
v0[7] = v8;
v9 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken NULL>;
v0[8] = v9;
v10 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken CURLYCLOSE>;
v0[9] = v10;
v11 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken SQUARECLOSE>;
v0[10] = v11;
v12 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken EOF>;
v0[11] = v12;
return v0;
}
static void <clinit>()
{
org.eclipse.parsson.JsonTokenizer$JsonToken v0, v10, v12, v14, v16, v18, v2, v20, v4, v5, v6, v8;
org.eclipse.parsson.JsonTokenizer$JsonToken[] v21;
jakarta.json.stream.JsonParser$Event v1, v11, v13, v15, v17, v19, v3, v7, v9;
v0 = new org.eclipse.parsson.JsonTokenizer$JsonToken;
v1 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event START_OBJECT>;
specialinvoke v0.<org.eclipse.parsson.JsonTokenizer$JsonToken: void <init>(java.lang.String,int,jakarta.json.stream.JsonParser$Event,boolean)>("CURLYOPEN", 0, v1, 0);
<org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken CURLYOPEN> = v0;
v2 = new org.eclipse.parsson.JsonTokenizer$JsonToken;
v3 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event START_ARRAY>;
specialinvoke v2.<org.eclipse.parsson.JsonTokenizer$JsonToken: void <init>(java.lang.String,int,jakarta.json.stream.JsonParser$Event,boolean)>("SQUAREOPEN", 1, v3, 0);
<org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken SQUAREOPEN> = v2;
v4 = new org.eclipse.parsson.JsonTokenizer$JsonToken;
specialinvoke v4.<org.eclipse.parsson.JsonTokenizer$JsonToken: void <init>(java.lang.String,int,jakarta.json.stream.JsonParser$Event,boolean)>("COLON", 2, null, 0);
<org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken COLON> = v4;
v5 = new org.eclipse.parsson.JsonTokenizer$JsonToken;
specialinvoke v5.<org.eclipse.parsson.JsonTokenizer$JsonToken: void <init>(java.lang.String,int,jakarta.json.stream.JsonParser$Event,boolean)>("COMMA", 3, null, 0);
<org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken COMMA> = v5;
v6 = new org.eclipse.parsson.JsonTokenizer$JsonToken;
v7 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event VALUE_STRING>;
specialinvoke v6.<org.eclipse.parsson.JsonTokenizer$JsonToken: void <init>(java.lang.String,int,jakarta.json.stream.JsonParser$Event,boolean)>("STRING", 4, v7, 1);
<org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken STRING> = v6;
v8 = new org.eclipse.parsson.JsonTokenizer$JsonToken;
v9 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event VALUE_NUMBER>;
specialinvoke v8.<org.eclipse.parsson.JsonTokenizer$JsonToken: void <init>(java.lang.String,int,jakarta.json.stream.JsonParser$Event,boolean)>("NUMBER", 5, v9, 1);
<org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken NUMBER> = v8;
v10 = new org.eclipse.parsson.JsonTokenizer$JsonToken;
v11 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event VALUE_TRUE>;
specialinvoke v10.<org.eclipse.parsson.JsonTokenizer$JsonToken: void <init>(java.lang.String,int,jakarta.json.stream.JsonParser$Event,boolean)>("TRUE", 6, v11, 1);
<org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken TRUE> = v10;
v12 = new org.eclipse.parsson.JsonTokenizer$JsonToken;
v13 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event VALUE_FALSE>;
specialinvoke v12.<org.eclipse.parsson.JsonTokenizer$JsonToken: void <init>(java.lang.String,int,jakarta.json.stream.JsonParser$Event,boolean)>("FALSE", 7, v13, 1);
<org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken FALSE> = v12;
v14 = new org.eclipse.parsson.JsonTokenizer$JsonToken;
v15 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event VALUE_NULL>;
specialinvoke v14.<org.eclipse.parsson.JsonTokenizer$JsonToken: void <init>(java.lang.String,int,jakarta.json.stream.JsonParser$Event,boolean)>("NULL", 8, v15, 1);
<org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken NULL> = v14;
v16 = new org.eclipse.parsson.JsonTokenizer$JsonToken;
v17 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event END_OBJECT>;
specialinvoke v16.<org.eclipse.parsson.JsonTokenizer$JsonToken: void <init>(java.lang.String,int,jakarta.json.stream.JsonParser$Event,boolean)>("CURLYCLOSE", 9, v17, 0);
<org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken CURLYCLOSE> = v16;
v18 = new org.eclipse.parsson.JsonTokenizer$JsonToken;
v19 = <jakarta.json.stream.JsonParser$Event: jakarta.json.stream.JsonParser$Event END_ARRAY>;
specialinvoke v18.<org.eclipse.parsson.JsonTokenizer$JsonToken: void <init>(java.lang.String,int,jakarta.json.stream.JsonParser$Event,boolean)>("SQUARECLOSE", 10, v19, 0);
<org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken SQUARECLOSE> = v18;
v20 = new org.eclipse.parsson.JsonTokenizer$JsonToken;
specialinvoke v20.<org.eclipse.parsson.JsonTokenizer$JsonToken: void <init>(java.lang.String,int,jakarta.json.stream.JsonParser$Event,boolean)>("EOF", 11, null, 0);
<org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken EOF> = v20;
v21 = staticinvoke <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken[] $values()>();
<org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken[] $VALUES> = v21;
return;
}
}