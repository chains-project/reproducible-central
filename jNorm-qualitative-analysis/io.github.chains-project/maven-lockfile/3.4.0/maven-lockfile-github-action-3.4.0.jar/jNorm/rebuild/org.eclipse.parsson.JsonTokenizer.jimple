final class org.eclipse.parsson.JsonTokenizer extends java.lang.Object implements java.io.Closeable
{
private static final int[] HEX;
private static final int HEX_LENGTH;
private final org.eclipse.parsson.api.BufferPool bufferPool;
private final java.io.Reader reader;
private char[] buf;
private int readBegin;
private int readEnd;
private int storeBegin;
private int storeEnd;
private long lineNo;
private long lastLineOffset;
private long bufferOffset;
private boolean minus;
private boolean fracOrExp;
private java.math.BigDecimal bd;
static final boolean $assertionsDisabled;
void <init>(java.io.Reader, org.eclipse.parsson.api.BufferPool)
{
char[] v3;
java.io.Reader v1;
org.eclipse.parsson.JsonTokenizer v0;
org.eclipse.parsson.api.BufferPool v2;
v0 := @this: org.eclipse.parsson.JsonTokenizer;
v1 := @parameter0: java.io.Reader;
v2 := @parameter1: org.eclipse.parsson.api.BufferPool;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.eclipse.parsson.JsonTokenizer: long lineNo> = 1L;
v0.<org.eclipse.parsson.JsonTokenizer: long lastLineOffset> = 0L;
v0.<org.eclipse.parsson.JsonTokenizer: long bufferOffset> = 0L;
v0.<org.eclipse.parsson.JsonTokenizer: java.io.Reader reader> = v1;
v0.<org.eclipse.parsson.JsonTokenizer: org.eclipse.parsson.api.BufferPool bufferPool> = v2;
v3 = interfaceinvoke v2.<org.eclipse.parsson.api.BufferPool: char[] take()>();
v0.<org.eclipse.parsson.JsonTokenizer: char[] buf> = v3;
return;
}
private void readString()
{
org.eclipse.parsson.JsonTokenizer v0;
int v10, v11, v12, v13, v15, v16, v17, v2, v3, v4, v6, v8, v9;
boolean v1;
jakarta.json.stream.JsonParsingException v18;
char v7;
char[] v14, v5;
v0 := @this: org.eclipse.parsson.JsonTokenizer;
v1 = 1;
v2 = v0.<org.eclipse.parsson.JsonTokenizer: int readBegin>;
v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd> = v2;
v0.<org.eclipse.parsson.JsonTokenizer: int storeBegin> = v2;
label01:
if v1 == 0 goto label05;
label02:
v3 = v0.<org.eclipse.parsson.JsonTokenizer: int readBegin>;
v4 = v0.<org.eclipse.parsson.JsonTokenizer: int readEnd>;
if v3 >= v4 goto label04;
v5 = v0.<org.eclipse.parsson.JsonTokenizer: char[] buf>;
v6 = v0.<org.eclipse.parsson.JsonTokenizer: int readBegin>;
v7 = v5[v6];
if v7 < 32 goto label04;
if v7 == 92 goto label04;
if v7 != 34 goto label03;
v8 = v0.<org.eclipse.parsson.JsonTokenizer: int readBegin>;
v9 = v8 + 1;
v0.<org.eclipse.parsson.JsonTokenizer: int readBegin> = v9;
v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd> = v8;
return;
label03:
v10 = v0.<org.eclipse.parsson.JsonTokenizer: int readBegin>;
v11 = v10 + 1;
v0.<org.eclipse.parsson.JsonTokenizer: int readBegin> = v11;
goto label02;
label04:
v12 = v0.<org.eclipse.parsson.JsonTokenizer: int readBegin>;
v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd> = v12;
label05:
v13 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: int read()>();
if v13 < 32 goto label07;
if v13 == 34 goto label07;
if v13 == 92 goto label07;
if v1 != 0 goto label06;
v14 = v0.<org.eclipse.parsson.JsonTokenizer: char[] buf>;
v15 = v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd>;
v14[v15] = v13;
label06:
v16 = v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd>;
v17 = v16 + 1;
v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd> = v17;
goto label01;
label07:
lookupswitch(v13)
{
case 34: goto label09;
case 92: goto label08;
default: goto label10;
};
label08:
v1 = 0;
specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: void unescape()>();
goto label01;
label09:
return;
label10:
v18 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: jakarta.json.stream.JsonParsingException unexpectedChar(int)>(v13);
throw v18;
}
private void unescape()
{
org.eclipse.parsson.JsonTokenizer v0;
int[] v24;
jakarta.json.stream.JsonParsingException v27, v32;
int v1, v10, v12, v13, v15, v16, v18, v19, v20, v21, v22, v23, v25, v26, v28, v3, v30, v31, v4, v6, v7, v9;
char[] v11, v14, v17, v2, v29, v5, v8;
v0 := @this: org.eclipse.parsson.JsonTokenizer;
v1 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: int read()>();
lookupswitch(v1)
{
case 34: goto label06;
case 47: goto label06;
case 92: goto label06;
case 98: goto label01;
case 102: goto label04;
case 110: goto label03;
case 114: goto label05;
case 116: goto label02;
case 117: goto label07;
default: goto label13;
};
label01:
v2 = v0.<org.eclipse.parsson.JsonTokenizer: char[] buf>;
v3 = v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd>;
v4 = v3 + 1;
v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd> = v4;
v2[v3] = 8;
goto label14;
label02:
v5 = v0.<org.eclipse.parsson.JsonTokenizer: char[] buf>;
v6 = v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd>;
v7 = v6 + 1;
v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd> = v7;
v5[v6] = 9;
goto label14;
label03:
v8 = v0.<org.eclipse.parsson.JsonTokenizer: char[] buf>;
v9 = v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd>;
v10 = v9 + 1;
v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd> = v10;
v8[v9] = 10;
goto label14;
label04:
v11 = v0.<org.eclipse.parsson.JsonTokenizer: char[] buf>;
v12 = v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd>;
v13 = v12 + 1;
v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd> = v13;
v11[v12] = 12;
goto label14;
label05:
v14 = v0.<org.eclipse.parsson.JsonTokenizer: char[] buf>;
v15 = v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd>;
v16 = v15 + 1;
v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd> = v16;
v14[v15] = 13;
goto label14;
label06:
v17 = v0.<org.eclipse.parsson.JsonTokenizer: char[] buf>;
v18 = v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd>;
v19 = v18 + 1;
v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd> = v19;
v17[v18] = v1;
goto label14;
label07:
v20 = 0;
v21 = 0;
label08:
if v21 >= 4 goto label12;
v22 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: int read()>();
if v22 < 0 goto label09;
v23 = <org.eclipse.parsson.JsonTokenizer: int HEX_LENGTH>;
if v22 >= v23 goto label09;
v24 = <org.eclipse.parsson.JsonTokenizer: int[] HEX>;
v25 = v24[v22];
goto label10;
label09:
v26 = (int) -1;
v25 = v26;
label10:
if v25 >= 0 goto label11;
v27 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: jakarta.json.stream.JsonParsingException unexpectedChar(int)>(v22);
throw v27;
label11:
v28 = v20 << 4;
v20 = v28 | v25;
v21 = v21 + 1;
goto label08;
label12:
v29 = v0.<org.eclipse.parsson.JsonTokenizer: char[] buf>;
v30 = v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd>;
v31 = v30 + 1;
v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd> = v31;
v29[v30] = v20;
goto label14;
label13:
v32 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: jakarta.json.stream.JsonParsingException unexpectedChar(int)>(v1);
throw v32;
label14:
return;
}
private int readNumberChar()
{
char v6;
org.eclipse.parsson.JsonTokenizer v0;
int v1, v2, v4, v5, v7, v8;
char[] v3;
v0 := @this: org.eclipse.parsson.JsonTokenizer;
v1 = v0.<org.eclipse.parsson.JsonTokenizer: int readBegin>;
v2 = v0.<org.eclipse.parsson.JsonTokenizer: int readEnd>;
if v1 >= v2 goto label1;
v3 = v0.<org.eclipse.parsson.JsonTokenizer: char[] buf>;
v4 = v0.<org.eclipse.parsson.JsonTokenizer: int readBegin>;
v5 = v4 + 1;
v0.<org.eclipse.parsson.JsonTokenizer: int readBegin> = v5;
v6 = v3[v4];
return v6;
label1:
v7 = v0.<org.eclipse.parsson.JsonTokenizer: int readBegin>;
v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd> = v7;
v8 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: int read()>();
return v8;
}
private void readNumber(int)
{
jakarta.json.stream.JsonParsingException v4, v7, v9;
org.eclipse.parsson.JsonTokenizer v0;
int v1, v10, v11, v12, v13, v2, v3, v5, v6, v8;
v0 := @this: org.eclipse.parsson.JsonTokenizer;
v1 := @parameter0: int;
v2 = v0.<org.eclipse.parsson.JsonTokenizer: int readBegin>;
v3 = v2 - 1;
v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd> = v3;
v0.<org.eclipse.parsson.JsonTokenizer: int storeBegin> = v3;
if v1 != 45 goto label02;
v0.<org.eclipse.parsson.JsonTokenizer: boolean minus> = 1;
v1 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: int readNumberChar()>();
if v1 < 48 goto label01;
if v1 <= 57 goto label02;
label01:
v4 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: jakarta.json.stream.JsonParsingException unexpectedChar(int)>(v1);
throw v4;
label02:
if v1 != 48 goto label03;
v5 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: int readNumberChar()>();
goto label04;
label03:
v5 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: int readNumberChar()>();
if v5 < 48 goto label04;
if v5 <= 57 goto label03;
label04:
if v5 != 46 goto label07;
v0.<org.eclipse.parsson.JsonTokenizer: boolean fracOrExp> = 1;
v6 = 0;
label05:
v5 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: int readNumberChar()>();
v6 = v6 + 1;
if v5 < 48 goto label06;
if v5 <= 57 goto label05;
label06:
if v6 != 1 goto label07;
v7 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: jakarta.json.stream.JsonParsingException unexpectedChar(int)>(v5);
throw v7;
label07:
if v5 == 101 goto label08;
if v5 != 69 goto label13;
label08:
v0.<org.eclipse.parsson.JsonTokenizer: boolean fracOrExp> = 1;
v5 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: int readNumberChar()>();
if v5 == 43 goto label09;
if v5 != 45 goto label10;
label09:
v5 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: int readNumberChar()>();
label10:
v8 = 0;
label11:
if v5 < 48 goto label12;
if v5 > 57 goto label12;
v5 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: int readNumberChar()>();
v8 = v8 + 1;
goto label11;
label12:
if v8 != 0 goto label13;
v9 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: jakarta.json.stream.JsonParsingException unexpectedChar(int)>(v5);
throw v9;
label13:
v10 = (int) -1;
if v5 == v10 goto label14;
v11 = v0.<org.eclipse.parsson.JsonTokenizer: int readBegin>;
v12 = v11 - 1;
v0.<org.eclipse.parsson.JsonTokenizer: int readBegin> = v12;
v13 = v0.<org.eclipse.parsson.JsonTokenizer: int readBegin>;
v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd> = v13;
label14:
return;
}
private void readTrue()
{
jakarta.json.stream.JsonParsingException v2, v4, v6;
int v1, v3, v5;
org.eclipse.parsson.JsonTokenizer v0;
v0 := @this: org.eclipse.parsson.JsonTokenizer;
v1 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: int read()>();
if v1 == 114 goto label1;
v2 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: jakarta.json.stream.JsonParsingException expectedChar(int,char)>(v1, 114);
throw v2;
label1:
v3 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: int read()>();
if v3 == 117 goto label2;
v4 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: jakarta.json.stream.JsonParsingException expectedChar(int,char)>(v3, 117);
throw v4;
label2:
v5 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: int read()>();
if v5 == 101 goto label3;
v6 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: jakarta.json.stream.JsonParsingException expectedChar(int,char)>(v5, 101);
throw v6;
label3:
return;
}
private void readFalse()
{
jakarta.json.stream.JsonParsingException v2, v4, v6, v8;
org.eclipse.parsson.JsonTokenizer v0;
int v1, v3, v5, v7;
v0 := @this: org.eclipse.parsson.JsonTokenizer;
v1 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: int read()>();
if v1 == 97 goto label1;
v2 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: jakarta.json.stream.JsonParsingException expectedChar(int,char)>(v1, 97);
throw v2;
label1:
v3 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: int read()>();
if v3 == 108 goto label2;
v4 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: jakarta.json.stream.JsonParsingException expectedChar(int,char)>(v3, 108);
throw v4;
label2:
v5 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: int read()>();
if v5 == 115 goto label3;
v6 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: jakarta.json.stream.JsonParsingException expectedChar(int,char)>(v5, 115);
throw v6;
label3:
v7 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: int read()>();
if v7 == 101 goto label4;
v8 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: jakarta.json.stream.JsonParsingException expectedChar(int,char)>(v7, 101);
throw v8;
label4:
return;
}
private void readNull()
{
jakarta.json.stream.JsonParsingException v2, v4, v6;
int v1, v3, v5;
org.eclipse.parsson.JsonTokenizer v0;
v0 := @this: org.eclipse.parsson.JsonTokenizer;
v1 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: int read()>();
if v1 == 117 goto label1;
v2 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: jakarta.json.stream.JsonParsingException expectedChar(int,char)>(v1, 117);
throw v2;
label1:
v3 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: int read()>();
if v3 == 108 goto label2;
v4 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: jakarta.json.stream.JsonParsingException expectedChar(int,char)>(v3, 108);
throw v4;
label2:
v5 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: int read()>();
if v5 == 108 goto label3;
v6 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: jakarta.json.stream.JsonParsingException expectedChar(int,char)>(v5, 108);
throw v6;
label3:
return;
}
org.eclipse.parsson.JsonTokenizer$JsonToken nextToken()
{
org.eclipse.parsson.JsonTokenizer$JsonToken v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27;
long v10, v11, v12, v13, v15, v2, v3, v4, v6, v7, v9;
org.eclipse.parsson.JsonTokenizer v0;
int v1, v14, v5, v8;
jakarta.json.stream.JsonParsingException v28;
v0 := @this: org.eclipse.parsson.JsonTokenizer;
specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: void reset()>();
v1 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: int read()>();
label01:
if v1 == 32 goto label02;
if v1 == 9 goto label02;
if v1 == 10 goto label02;
if v1 != 13 goto label06;
label02:
if v1 != 13 goto label04;
v2 = v0.<org.eclipse.parsson.JsonTokenizer: long lineNo>;
v3 = v2 + 1L;
v0.<org.eclipse.parsson.JsonTokenizer: long lineNo> = v3;
v1 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: int read()>();
if v1 != 10 goto label03;
v4 = v0.<org.eclipse.parsson.JsonTokenizer: long bufferOffset>;
v5 = v0.<org.eclipse.parsson.JsonTokenizer: int readBegin>;
v6 = v4 + v5;
v0.<org.eclipse.parsson.JsonTokenizer: long lastLineOffset> = v6;
goto label05;
label03:
v7 = v0.<org.eclipse.parsson.JsonTokenizer: long bufferOffset>;
v8 = v0.<org.eclipse.parsson.JsonTokenizer: int readBegin>;
v9 = v7 + v8;
v10 = v9 - 1L;
v0.<org.eclipse.parsson.JsonTokenizer: long lastLineOffset> = v10;
goto label01;
label04:
if v1 != 10 goto label05;
v11 = v0.<org.eclipse.parsson.JsonTokenizer: long lineNo>;
v12 = v11 + 1L;
v0.<org.eclipse.parsson.JsonTokenizer: long lineNo> = v12;
v13 = v0.<org.eclipse.parsson.JsonTokenizer: long bufferOffset>;
v14 = v0.<org.eclipse.parsson.JsonTokenizer: int readBegin>;
v15 = v13 + v14;
v0.<org.eclipse.parsson.JsonTokenizer: long lastLineOffset> = v15;
label05:
v1 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: int read()>();
goto label01;
label06:
lookupswitch(v1)
{
case -1: goto label18;
case 34: goto label07;
case 44: goto label11;
case 45: goto label17;
case 48: goto label17;
case 49: goto label17;
case 50: goto label17;
case 51: goto label17;
case 52: goto label17;
case 53: goto label17;
case 54: goto label17;
case 55: goto label17;
case 56: goto label17;
case 57: goto label17;
case 58: goto label10;
case 91: goto label09;
case 93: goto label15;
case 102: goto label13;
case 110: goto label14;
case 116: goto label12;
case 123: goto label08;
case 125: goto label16;
default: goto label19;
};
label07:
specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: void readString()>();
v16 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken STRING>;
return v16;
label08:
v17 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken CURLYOPEN>;
return v17;
label09:
v18 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken SQUAREOPEN>;
return v18;
label10:
v19 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken COLON>;
return v19;
label11:
v20 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken COMMA>;
return v20;
label12:
specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: void readTrue()>();
v21 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken TRUE>;
return v21;
label13:
specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: void readFalse()>();
v22 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken FALSE>;
return v22;
label14:
specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: void readNull()>();
v23 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken NULL>;
return v23;
label15:
v24 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken SQUARECLOSE>;
return v24;
label16:
v25 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken CURLYCLOSE>;
return v25;
label17:
specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: void readNumber(int)>(v1);
v26 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken NUMBER>;
return v26;
label18:
v27 = <org.eclipse.parsson.JsonTokenizer$JsonToken: org.eclipse.parsson.JsonTokenizer$JsonToken EOF>;
return v27;
label19:
v28 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: jakarta.json.stream.JsonParsingException unexpectedChar(int)>(v1);
throw v28;
}
boolean hasNextToken()
{
long v10, v12, v13, v14, v15, v17, v18, v2, v3, v6, v8, v9;
org.eclipse.parsson.JsonTokenizer v0;
int v1, v11, v16, v19, v20, v21, v4, v5, v7;
boolean v22;
v0 := @this: org.eclipse.parsson.JsonTokenizer;
specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: void reset()>();
v1 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: int peek()>();
label1:
if v1 == 32 goto label2;
if v1 == 9 goto label2;
if v1 == 10 goto label2;
if v1 != 13 goto label6;
label2:
if v1 != 13 goto label4;
v2 = v0.<org.eclipse.parsson.JsonTokenizer: long lineNo>;
v3 = v2 + 1L;
v0.<org.eclipse.parsson.JsonTokenizer: long lineNo> = v3;
v4 = v0.<org.eclipse.parsson.JsonTokenizer: int readBegin>;
v5 = v4 + 1;
v0.<org.eclipse.parsson.JsonTokenizer: int readBegin> = v5;
v1 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: int peek()>();
if v1 != 10 goto label3;
v6 = v0.<org.eclipse.parsson.JsonTokenizer: long bufferOffset>;
v7 = v0.<org.eclipse.parsson.JsonTokenizer: int readBegin>;
v8 = v6 + v7;
v9 = v8 + 1L;
v0.<org.eclipse.parsson.JsonTokenizer: long lastLineOffset> = v9;
goto label5;
label3:
v10 = v0.<org.eclipse.parsson.JsonTokenizer: long bufferOffset>;
v11 = v0.<org.eclipse.parsson.JsonTokenizer: int readBegin>;
v12 = v10 + v11;
v0.<org.eclipse.parsson.JsonTokenizer: long lastLineOffset> = v12;
goto label1;
label4:
if v1 != 10 goto label5;
v13 = v0.<org.eclipse.parsson.JsonTokenizer: long lineNo>;
v14 = v13 + 1L;
v0.<org.eclipse.parsson.JsonTokenizer: long lineNo> = v14;
v15 = v0.<org.eclipse.parsson.JsonTokenizer: long bufferOffset>;
v16 = v0.<org.eclipse.parsson.JsonTokenizer: int readBegin>;
v17 = v15 + v16;
v18 = v17 + 1L;
v0.<org.eclipse.parsson.JsonTokenizer: long lastLineOffset> = v18;
label5:
v19 = v0.<org.eclipse.parsson.JsonTokenizer: int readBegin>;
v20 = v19 + 1;
v0.<org.eclipse.parsson.JsonTokenizer: int readBegin> = v20;
v1 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: int peek()>();
goto label1;
label6:
v21 = (int) -1;
if v1 == v21 goto label7;
v22 = 1;
goto label8;
label7:
v22 = 0;
label8:
return v22;
}
private int peek()
{
java.lang.AssertionError v7;
org.eclipse.parsson.JsonTokenizer v0;
int v1, v10, v12, v2, v3, v4, v5, v8, v9;
jakarta.json.JsonException v15;
java.lang.String v16;
boolean v6;
char v13;
java.io.IOException v14;
char[] v11;
v0 := @this: org.eclipse.parsson.JsonTokenizer;
label1:
v1 = v0.<org.eclipse.parsson.JsonTokenizer: int readBegin>;
v2 = v0.<org.eclipse.parsson.JsonTokenizer: int readEnd>;
if v1 != v2 goto label5;
v3 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: int fillBuf()>();
v4 = (int) -1;
if v3 != v4 goto label3;
label2:
v5 = (int) -1;
return v5;
label3:
v6 = <org.eclipse.parsson.JsonTokenizer: boolean $assertionsDisabled>;
if v6 != 0 goto label4;
if v3 != 0 goto label4;
v7 = new java.lang.AssertionError;
specialinvoke v7.<java.lang.AssertionError: void <init>()>();
throw v7;
label4:
v8 = v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd>;
v0.<org.eclipse.parsson.JsonTokenizer: int readBegin> = v8;
v9 = v0.<org.eclipse.parsson.JsonTokenizer: int readBegin>;
v10 = v9 + v3;
v0.<org.eclipse.parsson.JsonTokenizer: int readEnd> = v10;
label5:
v11 = v0.<org.eclipse.parsson.JsonTokenizer: char[] buf>;
v12 = v0.<org.eclipse.parsson.JsonTokenizer: int readBegin>;
v13 = v11[v12];
label6:
return v13;
label7:
v14 := @caughtexception;
v15 = new jakarta.json.JsonException;
v16 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String TOKENIZER_IO_ERR()>();
specialinvoke v15.<jakarta.json.JsonException: void <init>(java.lang.String,java.lang.Throwable)>(v16, v14);
throw v15;
catch java.io.IOException from label1 to label2 with label7;
catch java.io.IOException from label3 to label6 with label7;
}
jakarta.json.stream.JsonLocation getLastCharLocation()
{
org.eclipse.parsson.JsonLocationImpl v1;
long v10, v11, v2, v3, v5, v6, v7, v8;
org.eclipse.parsson.JsonTokenizer v0;
int v4, v9;
v0 := @this: org.eclipse.parsson.JsonTokenizer;
v1 = new org.eclipse.parsson.JsonLocationImpl;
v2 = v0.<org.eclipse.parsson.JsonTokenizer: long lineNo>;
v3 = v0.<org.eclipse.parsson.JsonTokenizer: long bufferOffset>;
v4 = v0.<org.eclipse.parsson.JsonTokenizer: int readBegin>;
v5 = v3 + v4;
v6 = v0.<org.eclipse.parsson.JsonTokenizer: long lastLineOffset>;
v7 = v5 - v6;
v8 = v0.<org.eclipse.parsson.JsonTokenizer: long bufferOffset>;
v9 = v0.<org.eclipse.parsson.JsonTokenizer: int readBegin>;
v10 = v8 + v9;
v11 = v10 - 1L;
specialinvoke v1.<org.eclipse.parsson.JsonLocationImpl: void <init>(long,long,long)>(v2, v7, v11);
return v1;
}
jakarta.json.stream.JsonLocation getLocation()
{
org.eclipse.parsson.JsonLocationImpl v1;
long v11, v2, v3, v5, v6, v7, v8, v9;
org.eclipse.parsson.JsonTokenizer v0;
int v10, v4;
v0 := @this: org.eclipse.parsson.JsonTokenizer;
v1 = new org.eclipse.parsson.JsonLocationImpl;
v2 = v0.<org.eclipse.parsson.JsonTokenizer: long lineNo>;
v3 = v0.<org.eclipse.parsson.JsonTokenizer: long bufferOffset>;
v4 = v0.<org.eclipse.parsson.JsonTokenizer: int readBegin>;
v5 = v3 + v4;
v6 = v0.<org.eclipse.parsson.JsonTokenizer: long lastLineOffset>;
v7 = v5 - v6;
v8 = v7 + 1L;
v9 = v0.<org.eclipse.parsson.JsonTokenizer: long bufferOffset>;
v10 = v0.<org.eclipse.parsson.JsonTokenizer: int readBegin>;
v11 = v9 + v10;
specialinvoke v1.<org.eclipse.parsson.JsonLocationImpl: void <init>(long,long,long)>(v2, v8, v11);
return v1;
}
private int read()
{
java.lang.AssertionError v7;
org.eclipse.parsson.JsonTokenizer v0;
int v1, v10, v12, v13, v2, v3, v4, v5, v8, v9;
jakarta.json.JsonException v16;
java.lang.String v17;
boolean v6;
char v14;
java.io.IOException v15;
char[] v11;
v0 := @this: org.eclipse.parsson.JsonTokenizer;
label1:
v1 = v0.<org.eclipse.parsson.JsonTokenizer: int readBegin>;
v2 = v0.<org.eclipse.parsson.JsonTokenizer: int readEnd>;
if v1 != v2 goto label5;
v3 = specialinvoke v0.<org.eclipse.parsson.JsonTokenizer: int fillBuf()>();
v4 = (int) -1;
if v3 != v4 goto label3;
label2:
v5 = (int) -1;
return v5;
label3:
v6 = <org.eclipse.parsson.JsonTokenizer: boolean $assertionsDisabled>;
if v6 != 0 goto label4;
if v3 != 0 goto label4;
v7 = new java.lang.AssertionError;
specialinvoke v7.<java.lang.AssertionError: void <init>()>();
throw v7;
label4:
v8 = v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd>;
v0.<org.eclipse.parsson.JsonTokenizer: int readBegin> = v8;
v9 = v0.<org.eclipse.parsson.JsonTokenizer: int readBegin>;
v10 = v9 + v3;
v0.<org.eclipse.parsson.JsonTokenizer: int readEnd> = v10;
label5:
v11 = v0.<org.eclipse.parsson.JsonTokenizer: char[] buf>;
v12 = v0.<org.eclipse.parsson.JsonTokenizer: int readBegin>;
v13 = v12 + 1;
v0.<org.eclipse.parsson.JsonTokenizer: int readBegin> = v13;
v14 = v11[v12];
label6:
return v14;
label7:
v15 := @caughtexception;
v16 = new jakarta.json.JsonException;
v17 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String TOKENIZER_IO_ERR()>();
specialinvoke v16.<jakarta.json.JsonException: void <init>(java.lang.String,java.lang.Throwable)>(v17, v15);
throw v16;
catch java.io.IOException from label1 to label2 with label7;
catch java.io.IOException from label3 to label6 with label7;
}
private int fillBuf() throws java.io.IOException
{
org.eclipse.parsson.JsonTokenizer v0;
java.io.Reader v28;
long v17, v21, v22, v24, v25, v27;
int v1, v10, v15, v18, v19, v2, v20, v23, v26, v3, v30, v32, v33, v34, v35, v4, v6, v9;
char[] v11, v13, v14, v16, v29, v31, v5, v7, v8;
org.eclipse.parsson.api.BufferPool v12;
v0 := @this: org.eclipse.parsson.JsonTokenizer;
v1 = v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd>;
if v1 == 0 goto label3;
v2 = v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd>;
v3 = v0.<org.eclipse.parsson.JsonTokenizer: int storeBegin>;
v4 = v2 - v3;
if v4 <= 0 goto label2;
v5 = v0.<org.eclipse.parsson.JsonTokenizer: char[] buf>;
v6 = lengthof v5;
if v4 != v6 goto label1;
v7 = v0.<org.eclipse.parsson.JsonTokenizer: char[] buf>;
v8 = v0.<org.eclipse.parsson.JsonTokenizer: char[] buf>;
v9 = lengthof v8;
v10 = 2 * v9;
v11 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>(v7, v10);
v12 = v0.<org.eclipse.parsson.JsonTokenizer: org.eclipse.parsson.api.BufferPool bufferPool>;
v13 = v0.<org.eclipse.parsson.JsonTokenizer: char[] buf>;
interfaceinvoke v12.<org.eclipse.parsson.api.BufferPool: void recycle(char[])>(v13);
v0.<org.eclipse.parsson.JsonTokenizer: char[] buf> = v11;
goto label4;
label1:
v14 = v0.<org.eclipse.parsson.JsonTokenizer: char[] buf>;
v15 = v0.<org.eclipse.parsson.JsonTokenizer: int storeBegin>;
v16 = v0.<org.eclipse.parsson.JsonTokenizer: char[] buf>;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v14, v15, v16, 0, v4);
v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd> = v4;
v0.<org.eclipse.parsson.JsonTokenizer: int storeBegin> = 0;
v17 = v0.<org.eclipse.parsson.JsonTokenizer: long bufferOffset>;
v18 = v0.<org.eclipse.parsson.JsonTokenizer: int readBegin>;
v19 = v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd>;
v20 = v18 - v19;
v21 = v17 + v20;
v0.<org.eclipse.parsson.JsonTokenizer: long bufferOffset> = v21;
goto label4;
label2:
v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd> = 0;
v0.<org.eclipse.parsson.JsonTokenizer: int storeBegin> = 0;
v22 = v0.<org.eclipse.parsson.JsonTokenizer: long bufferOffset>;
v23 = v0.<org.eclipse.parsson.JsonTokenizer: int readBegin>;
v24 = v22 + v23;
v0.<org.eclipse.parsson.JsonTokenizer: long bufferOffset> = v24;
goto label4;
label3:
v25 = v0.<org.eclipse.parsson.JsonTokenizer: long bufferOffset>;
v26 = v0.<org.eclipse.parsson.JsonTokenizer: int readBegin>;
v27 = v25 + v26;
v0.<org.eclipse.parsson.JsonTokenizer: long bufferOffset> = v27;
label4:
v28 = v0.<org.eclipse.parsson.JsonTokenizer: java.io.Reader reader>;
v29 = v0.<org.eclipse.parsson.JsonTokenizer: char[] buf>;
v30 = v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd>;
v31 = v0.<org.eclipse.parsson.JsonTokenizer: char[] buf>;
v32 = lengthof v31;
v33 = v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd>;
v34 = v32 - v33;
v35 = virtualinvoke v28.<java.io.Reader: int read(char[],int,int)>(v29, v30, v34);
return v35;
}
private void reset()
{
int v1;
org.eclipse.parsson.JsonTokenizer v0;
v0 := @this: org.eclipse.parsson.JsonTokenizer;
v1 = v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd>;
if v1 == 0 goto label1;
v0.<org.eclipse.parsson.JsonTokenizer: int storeBegin> = 0;
v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd> = 0;
v0.<org.eclipse.parsson.JsonTokenizer: java.math.BigDecimal bd> = null;
v0.<org.eclipse.parsson.JsonTokenizer: boolean minus> = 0;
v0.<org.eclipse.parsson.JsonTokenizer: boolean fracOrExp> = 0;
label1:
return;
}
java.lang.String getValue()
{
int v3, v4, v5, v6;
char[] v2;
java.lang.String v1;
org.eclipse.parsson.JsonTokenizer v0;
v0 := @this: org.eclipse.parsson.JsonTokenizer;
v1 = new java.lang.String;
v2 = v0.<org.eclipse.parsson.JsonTokenizer: char[] buf>;
v3 = v0.<org.eclipse.parsson.JsonTokenizer: int storeBegin>;
v4 = v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd>;
v5 = v0.<org.eclipse.parsson.JsonTokenizer: int storeBegin>;
v6 = v4 - v5;
specialinvoke v1.<java.lang.String: void <init>(char[],int,int)>(v2, v3, v6);
return v1;
}
java.lang.CharSequence getCharSequence()
{
org.eclipse.parsson.JsonTokenizer v0;
int v1, v2, v3, v6;
char[] v5;
java.lang.StringBuilder v4, v7;
v0 := @this: org.eclipse.parsson.JsonTokenizer;
v1 = v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd>;
v2 = v0.<org.eclipse.parsson.JsonTokenizer: int storeBegin>;
v3 = v1 - v2;
v4 = new java.lang.StringBuilder;
specialinvoke v4.<java.lang.StringBuilder: void <init>(int)>(v3);
v5 = v0.<org.eclipse.parsson.JsonTokenizer: char[] buf>;
v6 = v0.<org.eclipse.parsson.JsonTokenizer: int storeBegin>;
v7 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(v5, v6, v3);
return v7;
}
java.math.BigDecimal getBigDecimal()
{
org.eclipse.parsson.JsonTokenizer v0;
java.math.BigDecimal v1, v2, v8;
int v4, v5, v6, v7;
char[] v3;
v0 := @this: org.eclipse.parsson.JsonTokenizer;
v1 = v0.<org.eclipse.parsson.JsonTokenizer: java.math.BigDecimal bd>;
if v1 != null goto label1;
v2 = new java.math.BigDecimal;
v3 = v0.<org.eclipse.parsson.JsonTokenizer: char[] buf>;
v4 = v0.<org.eclipse.parsson.JsonTokenizer: int storeBegin>;
v5 = v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd>;
v6 = v0.<org.eclipse.parsson.JsonTokenizer: int storeBegin>;
v7 = v5 - v6;
specialinvoke v2.<java.math.BigDecimal: void <init>(char[],int,int)>(v3, v4, v7);
v0.<org.eclipse.parsson.JsonTokenizer: java.math.BigDecimal bd> = v2;
label1:
v8 = v0.<org.eclipse.parsson.JsonTokenizer: java.math.BigDecimal bd>;
return v8;
}
int getInt()
{
org.eclipse.parsson.JsonTokenizer v0;
java.math.BigDecimal v18;
byte v8;
int v1, v10, v12, v13, v15, v17, v19, v2, v3, v6, v9;
boolean v16, v4, v5, v7;
char v14;
char[] v11;
v0 := @this: org.eclipse.parsson.JsonTokenizer;
v1 = v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd>;
v2 = v0.<org.eclipse.parsson.JsonTokenizer: int storeBegin>;
v3 = v1 - v2;
v4 = v0.<org.eclipse.parsson.JsonTokenizer: boolean fracOrExp>;
if v4 != 0 goto label8;
if v3 <= 9 goto label1;
v5 = v0.<org.eclipse.parsson.JsonTokenizer: boolean minus>;
if v5 == 0 goto label8;
if v3 > 10 goto label8;
label1:
v6 = 0;
v7 = v0.<org.eclipse.parsson.JsonTokenizer: boolean minus>;
if v7 == 0 goto label2;
v8 = 1;
goto label3;
label2:
v8 = 0;
label3:
v9 = v8;
label4:
if v9 >= v3 goto label5;
v10 = v6 * 10;
v11 = v0.<org.eclipse.parsson.JsonTokenizer: char[] buf>;
v12 = v0.<org.eclipse.parsson.JsonTokenizer: int storeBegin>;
v13 = v12 + v9;
v14 = v11[v13];
v15 = v14 - 48;
v6 = v10 + v15;
v9 = v9 + 1;
goto label4;
label5:
v16 = v0.<org.eclipse.parsson.JsonTokenizer: boolean minus>;
if v16 == 0 goto label6;
v17 = neg v6;
goto label7;
label6:
v17 = v6;
label7:
return v17;
label8:
v18 = virtualinvoke v0.<org.eclipse.parsson.JsonTokenizer: java.math.BigDecimal getBigDecimal()>();
v19 = virtualinvoke v18.<java.math.BigDecimal: int intValue()>();
return v19;
}
long getLong()
{
long v10, v17, v19, v6;
org.eclipse.parsson.JsonTokenizer v0;
java.math.BigDecimal v18;
byte v8;
int v1, v12, v13, v15, v2, v3, v9;
boolean v16, v4, v5, v7;
char v14;
char[] v11;
v0 := @this: org.eclipse.parsson.JsonTokenizer;
v1 = v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd>;
v2 = v0.<org.eclipse.parsson.JsonTokenizer: int storeBegin>;
v3 = v1 - v2;
v4 = v0.<org.eclipse.parsson.JsonTokenizer: boolean fracOrExp>;
if v4 != 0 goto label8;
if v3 <= 18 goto label1;
v5 = v0.<org.eclipse.parsson.JsonTokenizer: boolean minus>;
if v5 == 0 goto label8;
if v3 > 19 goto label8;
label1:
v6 = 0L;
v7 = v0.<org.eclipse.parsson.JsonTokenizer: boolean minus>;
if v7 == 0 goto label2;
v8 = 1;
goto label3;
label2:
v8 = 0;
label3:
v9 = v8;
label4:
if v9 >= v3 goto label5;
v10 = v6 * 10L;
v11 = v0.<org.eclipse.parsson.JsonTokenizer: char[] buf>;
v12 = v0.<org.eclipse.parsson.JsonTokenizer: int storeBegin>;
v13 = v12 + v9;
v14 = v11[v13];
v15 = v14 - 48;
v6 = v10 + v15;
v9 = v9 + 1;
goto label4;
label5:
v16 = v0.<org.eclipse.parsson.JsonTokenizer: boolean minus>;
if v16 == 0 goto label6;
v17 = neg v6;
goto label7;
label6:
v17 = v6;
label7:
return v17;
label8:
v18 = virtualinvoke v0.<org.eclipse.parsson.JsonTokenizer: java.math.BigDecimal getBigDecimal()>();
v19 = virtualinvoke v18.<java.math.BigDecimal: long longValue()>();
return v19;
}
boolean isDefinitelyInt()
{
int v1, v2, v3;
org.eclipse.parsson.JsonTokenizer v0;
boolean v4, v5, v6;
v0 := @this: org.eclipse.parsson.JsonTokenizer;
v1 = v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd>;
v2 = v0.<org.eclipse.parsson.JsonTokenizer: int storeBegin>;
v3 = v1 - v2;
v4 = v0.<org.eclipse.parsson.JsonTokenizer: boolean fracOrExp>;
if v4 != 0 goto label2;
if v3 <= 9 goto label1;
v5 = v0.<org.eclipse.parsson.JsonTokenizer: boolean minus>;
if v5 == 0 goto label2;
if v3 > 10 goto label2;
label1:
v6 = 1;
goto label3;
label2:
v6 = 0;
label3:
return v6;
}
boolean isDefinitelyLong()
{
int v1, v2, v3;
org.eclipse.parsson.JsonTokenizer v0;
boolean v4, v5, v6;
v0 := @this: org.eclipse.parsson.JsonTokenizer;
v1 = v0.<org.eclipse.parsson.JsonTokenizer: int storeEnd>;
v2 = v0.<org.eclipse.parsson.JsonTokenizer: int storeBegin>;
v3 = v1 - v2;
v4 = v0.<org.eclipse.parsson.JsonTokenizer: boolean fracOrExp>;
if v4 != 0 goto label2;
if v3 <= 18 goto label1;
v5 = v0.<org.eclipse.parsson.JsonTokenizer: boolean minus>;
if v5 == 0 goto label2;
if v3 > 19 goto label2;
label1:
v6 = 1;
goto label3;
label2:
v6 = 0;
label3:
return v6;
}
boolean isIntegral()
{
java.math.BigDecimal v2;
int v3;
org.eclipse.parsson.JsonTokenizer v0;
boolean v1, v4;
v0 := @this: org.eclipse.parsson.JsonTokenizer;
v1 = v0.<org.eclipse.parsson.JsonTokenizer: boolean fracOrExp>;
if v1 == 0 goto label1;
v2 = virtualinvoke v0.<org.eclipse.parsson.JsonTokenizer: java.math.BigDecimal getBigDecimal()>();
v3 = virtualinvoke v2.<java.math.BigDecimal: int scale()>();
if v3 != 0 goto label2;
label1:
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
return v4;
}
public void close() throws java.io.IOException
{
char[] v3;
java.io.Reader v1;
org.eclipse.parsson.JsonTokenizer v0;
org.eclipse.parsson.api.BufferPool v2;
v0 := @this: org.eclipse.parsson.JsonTokenizer;
v1 = v0.<org.eclipse.parsson.JsonTokenizer: java.io.Reader reader>;
virtualinvoke v1.<java.io.Reader: void close()>();
v2 = v0.<org.eclipse.parsson.JsonTokenizer: org.eclipse.parsson.api.BufferPool bufferPool>;
v3 = v0.<org.eclipse.parsson.JsonTokenizer: char[] buf>;
interfaceinvoke v2.<org.eclipse.parsson.api.BufferPool: void recycle(char[])>(v3);
return;
}
private jakarta.json.stream.JsonParsingException unexpectedChar(int)
{
jakarta.json.stream.JsonLocation v2;
jakarta.json.stream.JsonParsingException v3;
int v1;
java.lang.String v4;
org.eclipse.parsson.JsonTokenizer v0;
v0 := @this: org.eclipse.parsson.JsonTokenizer;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<org.eclipse.parsson.JsonTokenizer: jakarta.json.stream.JsonLocation getLastCharLocation()>();
v3 = new jakarta.json.stream.JsonParsingException;
v4 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String TOKENIZER_UNEXPECTED_CHAR(int,jakarta.json.stream.JsonLocation)>(v1, v2);
specialinvoke v3.<jakarta.json.stream.JsonParsingException: void <init>(java.lang.String,jakarta.json.stream.JsonLocation)>(v4, v2);
return v3;
}
private jakarta.json.stream.JsonParsingException expectedChar(int, char)
{
jakarta.json.stream.JsonLocation v3;
jakarta.json.stream.JsonParsingException v4;
int v1;
char v2;
java.lang.String v5;
org.eclipse.parsson.JsonTokenizer v0;
v0 := @this: org.eclipse.parsson.JsonTokenizer;
v1 := @parameter0: int;
v2 := @parameter1: char;
v3 = virtualinvoke v0.<org.eclipse.parsson.JsonTokenizer: jakarta.json.stream.JsonLocation getLastCharLocation()>();
v4 = new jakarta.json.stream.JsonParsingException;
v5 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String TOKENIZER_EXPECTED_CHAR(int,jakarta.json.stream.JsonLocation,char)>(v1, v3, v2);
specialinvoke v4.<jakarta.json.stream.JsonParsingException: void <init>(java.lang.String,jakarta.json.stream.JsonLocation)>(v5, v3);
return v4;
}
static void <clinit>()
{
int[] v10, v14, v17, v3, v4, v7;
int v11, v12, v13, v15, v16, v18, v5, v6, v8, v9;
boolean v1, v2;
java.lang.Class v0;
v0 = class "Lorg/eclipse/parsson/JsonTokenizer;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<org.eclipse.parsson.JsonTokenizer: boolean $assertionsDisabled> = v2;
v3 = newarray (int)[128];
<org.eclipse.parsson.JsonTokenizer: int[] HEX> = v3;
v4 = <org.eclipse.parsson.JsonTokenizer: int[] HEX>;
v5 = (int) -1;
staticinvoke <java.util.Arrays: void fill(int[],int)>(v4, v5);
v6 = 48;
label3:
if v6 > 57 goto label4;
v7 = <org.eclipse.parsson.JsonTokenizer: int[] HEX>;
v8 = v6 - 48;
v7[v6] = v8;
v6 = v6 + 1;
goto label3;
label4:
v9 = 65;
label5:
if v9 > 70 goto label6;
v10 = <org.eclipse.parsson.JsonTokenizer: int[] HEX>;
v11 = 10 + v9;
v12 = v11 - 65;
v10[v9] = v12;
v9 = v9 + 1;
goto label5;
label6:
v13 = 97;
label7:
if v13 > 102 goto label8;
v14 = <org.eclipse.parsson.JsonTokenizer: int[] HEX>;
v15 = 10 + v13;
v16 = v15 - 97;
v14[v13] = v16;
v13 = v13 + 1;
goto label7;
label8:
v17 = <org.eclipse.parsson.JsonTokenizer: int[] HEX>;
v18 = lengthof v17;
<org.eclipse.parsson.JsonTokenizer: int HEX_LENGTH> = v18;
return;
}
}