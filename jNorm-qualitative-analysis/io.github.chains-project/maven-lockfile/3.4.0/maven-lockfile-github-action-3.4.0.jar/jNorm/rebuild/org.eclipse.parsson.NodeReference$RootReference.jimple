class org.eclipse.parsson.NodeReference$RootReference extends org.eclipse.parsson.NodeReference
{
private jakarta.json.JsonStructure root;
void <init>(jakarta.json.JsonStructure)
{
jakarta.json.JsonStructure v1;
org.eclipse.parsson.NodeReference$RootReference v0;
v0 := @this: org.eclipse.parsson.NodeReference$RootReference;
v1 := @parameter0: jakarta.json.JsonStructure;
specialinvoke v0.<org.eclipse.parsson.NodeReference: void <init>()>();
v0.<org.eclipse.parsson.NodeReference$RootReference: jakarta.json.JsonStructure root> = v1;
return;
}
public boolean contains()
{
jakarta.json.JsonStructure v1;
org.eclipse.parsson.NodeReference$RootReference v0;
boolean v2;
v0 := @this: org.eclipse.parsson.NodeReference$RootReference;
v1 = v0.<org.eclipse.parsson.NodeReference$RootReference: jakarta.json.JsonStructure root>;
if v1 == null goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public jakarta.json.JsonValue get()
{
jakarta.json.JsonStructure v1;
org.eclipse.parsson.NodeReference$RootReference v0;
v0 := @this: org.eclipse.parsson.NodeReference$RootReference;
v1 = v0.<org.eclipse.parsson.NodeReference$RootReference: jakarta.json.JsonStructure root>;
return v1;
}
public jakarta.json.JsonStructure add(jakarta.json.JsonValue)
{
jakarta.json.JsonValue v1;
org.eclipse.parsson.NodeReference$RootReference v0;
jakarta.json.JsonStructure v8;
int[] v2;
int v4, v5;
jakarta.json.JsonValue$ValueType v3;
jakarta.json.JsonException v6;
java.lang.String v7;
v0 := @this: org.eclipse.parsson.NodeReference$RootReference;
v1 := @parameter0: jakarta.json.JsonValue;
v2 = <org.eclipse.parsson.NodeReference$1: int[] $SwitchMap$jakarta$json$JsonValue$ValueType>;
v3 = interfaceinvoke v1.<jakarta.json.JsonValue: jakarta.json.JsonValue$ValueType getValueType()>();
v4 = virtualinvoke v3.<jakarta.json.JsonValue$ValueType: int ordinal()>();
v5 = v2[v4];
lookupswitch(v5)
{
case 1: goto label1;
case 2: goto label1;
default: goto label2;
};
label1:
v0.<org.eclipse.parsson.NodeReference$RootReference: jakarta.json.JsonStructure root> = v1;
goto label3;
label2:
v6 = new jakarta.json.JsonException;
v7 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String NODEREF_VALUE_ADD_ERR()>();
specialinvoke v6.<jakarta.json.JsonException: void <init>(java.lang.String)>(v7);
throw v6;
label3:
v8 = v0.<org.eclipse.parsson.NodeReference$RootReference: jakarta.json.JsonStructure root>;
return v8;
}
public jakarta.json.JsonStructure remove()
{
jakarta.json.JsonException v1;
java.lang.String v2;
org.eclipse.parsson.NodeReference$RootReference v0;
v0 := @this: org.eclipse.parsson.NodeReference$RootReference;
v1 = new jakarta.json.JsonException;
v2 = staticinvoke <org.eclipse.parsson.JsonMessages: java.lang.String NODEREF_VALUE_CANNOT_REMOVE()>();
specialinvoke v1.<jakarta.json.JsonException: void <init>(java.lang.String)>(v2);
throw v1;
}
public jakarta.json.JsonStructure replace(jakarta.json.JsonValue)
{
jakarta.json.JsonStructure v2;
jakarta.json.JsonValue v1;
org.eclipse.parsson.NodeReference$RootReference v0;
v0 := @this: org.eclipse.parsson.NodeReference$RootReference;
v1 := @parameter0: jakarta.json.JsonValue;
v2 = virtualinvoke v0.<org.eclipse.parsson.NodeReference$RootReference: jakarta.json.JsonStructure add(jakarta.json.JsonValue)>(v1);
return v2;
}
}