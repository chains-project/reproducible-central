class org.graalvm.polyglot.Engine$1 extends java.lang.Object implements java.security.PrivilegedAction
{
void <init>()
{
org.graalvm.polyglot.Engine$1 v0;
v0 := @this: org.graalvm.polyglot.Engine$1;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public org.graalvm.polyglot.impl.AbstractPolyglotImpl run()
{
org.graalvm.polyglot.Engine$1 v0;
java.util.Iterator v2, v4, v5;
org.graalvm.polyglot.impl.AbstractPolyglotImpl v3;
boolean v1;
v0 := @this: org.graalvm.polyglot.Engine$1;
v1 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("graalvm.ForcePolyglotInvalid");
if v1 == 0 goto label1;
v2 = staticinvoke <org.graalvm.polyglot.Engine: java.util.Iterator createInvalidPolyglotImpl()>();
v3 = specialinvoke v0.<org.graalvm.polyglot.Engine$1: org.graalvm.polyglot.impl.AbstractPolyglotImpl loadAndValidateProviders(java.util.Iterator)>(v2);
goto label2;
label1:
v4 = specialinvoke v0.<org.graalvm.polyglot.Engine$1: java.util.Iterator searchServiceLoader()>();
v3 = specialinvoke v0.<org.graalvm.polyglot.Engine$1: org.graalvm.polyglot.impl.AbstractPolyglotImpl loadAndValidateProviders(java.util.Iterator)>(v4);
label2:
if v3 != null goto label3;
v5 = staticinvoke <org.graalvm.polyglot.Engine: java.util.Iterator createInvalidPolyglotImpl()>();
v3 = specialinvoke v0.<org.graalvm.polyglot.Engine$1: org.graalvm.polyglot.impl.AbstractPolyglotImpl loadAndValidateProviders(java.util.Iterator)>(v5);
label3:
return v3;
}
private java.util.Iterator searchServiceLoader() throws java.lang.InternalError
{
java.util.Iterator v6;
java.lang.ModuleLayer v3;
java.util.ServiceLoader v4, v8;
org.graalvm.polyglot.Engine$1 v0;
java.lang.Module v2;
java.lang.Class v1;
java.lang.ClassLoader v5;
boolean v7;
v0 := @this: org.graalvm.polyglot.Engine$1;
v1 = class "Lorg/graalvm/polyglot/impl/AbstractPolyglotImpl;";
v2 = virtualinvoke v1.<java.lang.Class: java.lang.Module getModule()>();
v3 = virtualinvoke v2.<java.lang.Module: java.lang.ModuleLayer getLayer()>();
if v3 == null goto label1;
v4 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.ModuleLayer,java.lang.Class)>(v3, class "Lorg/graalvm/polyglot/impl/AbstractPolyglotImpl;");
goto label2;
label1:
v5 = virtualinvoke v1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
v4 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>(class "Lorg/graalvm/polyglot/impl/AbstractPolyglotImpl;", v5);
label2:
v6 = interfaceinvoke v4.<java.lang.Iterable: java.util.Iterator iterator()>();
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 != 0 goto label3;
v8 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class)>(class "Lorg/graalvm/polyglot/impl/AbstractPolyglotImpl;");
v6 = interfaceinvoke v8.<java.lang.Iterable: java.util.Iterator iterator()>();
label3:
return v6;
}
private org.graalvm.polyglot.impl.AbstractPolyglotImpl loadAndValidateProviders(java.util.Iterator) throws java.lang.AssertionError
{
java.lang.AssertionError v13;
java.util.function.Function v14;
java.util.ArrayList v2;
org.graalvm.polyglot.Engine$1 v0;
java.lang.String v11, v9;
org.graalvm.polyglot.Engine$APIAccessImpl v20;
boolean v12, v18, v3, v6;
java.util.Iterator v1, v17, v5;
org.graalvm.polyglot.impl.AbstractPolyglotImpl v16;
java.lang.Class v10, v8;
java.lang.Object v19, v4, v7;
java.util.Comparator v15;
v0 := @this: org.graalvm.polyglot.Engine$1;
v1 := @parameter0: java.util.Iterator;
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
label1:
v3 = interfaceinvoke v1.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label4;
v4 = interfaceinvoke v1.<java.util.Iterator: java.lang.Object next()>();
v5 = interfaceinvoke v2.<java.util.List: java.util.Iterator iterator()>();
label2:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label3;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = virtualinvoke v7.<java.lang.Object: java.lang.Class getClass()>();
v9 = virtualinvoke v8.<java.lang.Class: java.lang.String getName()>();
v10 = virtualinvoke v4.<java.lang.Object: java.lang.Class getClass()>();
v11 = virtualinvoke v10.<java.lang.Class: java.lang.String getName()>();
v12 = virtualinvoke v9.<java.lang.String: boolean equals(java.lang.Object)>(v11);
if v12 == 0 goto label2;
v13 = new java.lang.AssertionError;
specialinvoke v13.<java.lang.AssertionError: void <init>(java.lang.Object)>("Same polyglot impl found twice on the classpath.");
throw v13;
label3:
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v4);
goto label1;
label4:
v14 = staticinvoke <org.graalvm.polyglot.Engine$1$getPriority__3223: java.util.function.Function bootstrap$()>();
v15 = staticinvoke <java.util.Comparator: java.util.Comparator comparing(java.util.function.Function)>(v14);
staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(v2, v15);
v16 = null;
v17 = interfaceinvoke v2.<java.util.List: java.util.Iterator iterator()>();
label5:
v18 = interfaceinvoke v17.<java.util.Iterator: boolean hasNext()>();
if v18 == 0 goto label6;
v19 = interfaceinvoke v17.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v19.<org.graalvm.polyglot.impl.AbstractPolyglotImpl: void setNext(org.graalvm.polyglot.impl.AbstractPolyglotImpl)>(v16);
v20 = <org.graalvm.polyglot.Engine$APIAccessImpl: org.graalvm.polyglot.Engine$APIAccessImpl INSTANCE>;
virtualinvoke v19.<org.graalvm.polyglot.impl.AbstractPolyglotImpl: void setConstructors(org.graalvm.polyglot.impl.AbstractPolyglotImpl$APIAccess)>(v20);
v16 = v19;
goto label5;
label6:
return v16;
}
}