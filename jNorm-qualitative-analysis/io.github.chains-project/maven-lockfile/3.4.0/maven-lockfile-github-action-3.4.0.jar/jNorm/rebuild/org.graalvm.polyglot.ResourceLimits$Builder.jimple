public final class org.graalvm.polyglot.ResourceLimits$Builder extends java.lang.Object
{
long statementLimit;
java.util.function.Predicate statementLimitSourceFilter;
java.util.function.Consumer onLimit;
final org.graalvm.polyglot.ResourceLimits this$0;
void <init>(org.graalvm.polyglot.ResourceLimits)
{
org.graalvm.polyglot.ResourceLimits v1;
org.graalvm.polyglot.ResourceLimits$Builder v0;
v0 := @this: org.graalvm.polyglot.ResourceLimits$Builder;
v1 := @parameter0: org.graalvm.polyglot.ResourceLimits;
v0.<org.graalvm.polyglot.ResourceLimits$Builder: org.graalvm.polyglot.ResourceLimits this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public org.graalvm.polyglot.ResourceLimits$Builder statementLimit(long, java.util.function.Predicate)
{
byte v3;
java.util.function.Predicate v2;
long v1;
java.lang.IllegalArgumentException v4;
org.graalvm.polyglot.ResourceLimits$Builder v0;
v0 := @this: org.graalvm.polyglot.ResourceLimits$Builder;
v1 := @parameter0: long;
v2 := @parameter1: java.util.function.Predicate;
v3 = v1 cmp 0L;
if v3 >= 0 goto label1;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The statement limit must not be negative.");
throw v4;
label1:
v0.<org.graalvm.polyglot.ResourceLimits$Builder: long statementLimit> = v1;
v0.<org.graalvm.polyglot.ResourceLimits$Builder: java.util.function.Predicate statementLimitSourceFilter> = v2;
return v0;
}
public org.graalvm.polyglot.ResourceLimits$Builder onLimit(java.util.function.Consumer)
{
java.util.function.Consumer v1;
org.graalvm.polyglot.ResourceLimits$Builder v0;
v0 := @this: org.graalvm.polyglot.ResourceLimits$Builder;
v1 := @parameter0: java.util.function.Consumer;
v0.<org.graalvm.polyglot.ResourceLimits$Builder: java.util.function.Consumer onLimit> = v1;
return v0;
}
public org.graalvm.polyglot.ResourceLimits build()
{
java.util.function.Consumer v5;
java.util.function.Predicate v4;
org.graalvm.polyglot.impl.AbstractPolyglotImpl v2;
java.lang.Object v6;
long v3;
org.graalvm.polyglot.ResourceLimits v1;
org.graalvm.polyglot.ResourceLimits$Builder v0;
v0 := @this: org.graalvm.polyglot.ResourceLimits$Builder;
v1 = new org.graalvm.polyglot.ResourceLimits;
v2 = staticinvoke <org.graalvm.polyglot.Engine: org.graalvm.polyglot.impl.AbstractPolyglotImpl getImpl()>();
v3 = v0.<org.graalvm.polyglot.ResourceLimits$Builder: long statementLimit>;
v4 = v0.<org.graalvm.polyglot.ResourceLimits$Builder: java.util.function.Predicate statementLimitSourceFilter>;
v5 = v0.<org.graalvm.polyglot.ResourceLimits$Builder: java.util.function.Consumer onLimit>;
v6 = virtualinvoke v2.<org.graalvm.polyglot.impl.AbstractPolyglotImpl: java.lang.Object buildLimits(long,java.util.function.Predicate,java.util.function.Consumer)>(v3, v4, v5);
specialinvoke v1.<org.graalvm.polyglot.ResourceLimits: void <init>(java.lang.Object)>(v6);
return v1;
}
}