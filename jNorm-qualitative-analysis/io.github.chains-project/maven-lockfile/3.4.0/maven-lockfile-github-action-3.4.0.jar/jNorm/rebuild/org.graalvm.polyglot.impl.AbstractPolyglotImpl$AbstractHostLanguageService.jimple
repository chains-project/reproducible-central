public abstract class org.graalvm.polyglot.impl.AbstractPolyglotImpl$AbstractHostLanguageService extends org.graalvm.polyglot.impl.AbstractPolyglotImpl$AbstractDispatchClass
{
protected void <init>(org.graalvm.polyglot.impl.AbstractPolyglotImpl)
{
org.graalvm.polyglot.impl.AbstractPolyglotImpl$AbstractHostLanguageService v0;
org.graalvm.polyglot.impl.AbstractPolyglotImpl v1;
v0 := @this: org.graalvm.polyglot.impl.AbstractPolyglotImpl$AbstractHostLanguageService;
v1 := @parameter0: org.graalvm.polyglot.impl.AbstractPolyglotImpl;
specialinvoke v0.<org.graalvm.polyglot.impl.AbstractPolyglotImpl$AbstractDispatchClass: void <init>()>();
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
return;
}
public abstract void release();
public abstract void initializeHostContext(java.lang.Object, java.lang.Object, org.graalvm.polyglot.HostAccess, java.lang.ClassLoader, java.util.function.Predicate, boolean, boolean);
public abstract void throwHostLanguageException(java.lang.String);
public abstract void addToHostClassPath(java.lang.Object, java.lang.Object);
public abstract java.lang.Object toGuestValue(java.lang.Object, java.lang.Object, boolean);
public abstract java.lang.Object asHostDynamicClass(java.lang.Object, java.lang.Class);
public abstract java.lang.Object asHostStaticClass(java.lang.Object, java.lang.Class);
public abstract java.lang.Object findDynamicClass(java.lang.Object, java.lang.String);
public abstract java.lang.Object findStaticClass(java.lang.Object, java.lang.String);
public abstract java.lang.Object createToHostTypeNode();
public abstract java.lang.Object toHostType(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Class, java.lang.reflect.Type);
public abstract boolean isHostValue(java.lang.Object);
public abstract java.lang.Object unboxHostObject(java.lang.Object);
public abstract java.lang.Object unboxProxyObject(java.lang.Object);
public abstract java.lang.Throwable unboxHostException(java.lang.Throwable);
public abstract java.lang.Object toHostObject(java.lang.Object, java.lang.Object);
public abstract java.lang.RuntimeException toHostException(java.lang.Object, java.lang.Throwable);
public abstract boolean isHostException(java.lang.Object);
public abstract boolean isHostFunction(java.lang.Object);
public abstract boolean isHostObject(java.lang.Object);
public abstract boolean isHostSymbol(java.lang.Object);
public abstract java.lang.Object createHostAdapter(java.lang.Object, java.lang.Object[], java.lang.Object);
public abstract boolean isHostProxy(java.lang.Object);
public abstract java.lang.Error toHostResourceError(java.lang.Throwable);
public abstract int findNextGuestToHostStackTraceElement(java.lang.StackTraceElement, java.lang.StackTraceElement[], int);
public abstract java.lang.Object migrateValue(java.lang.Object, java.lang.Object, java.lang.Object);
public abstract void pin(java.lang.Object);
public abstract void hostExit(int);
}