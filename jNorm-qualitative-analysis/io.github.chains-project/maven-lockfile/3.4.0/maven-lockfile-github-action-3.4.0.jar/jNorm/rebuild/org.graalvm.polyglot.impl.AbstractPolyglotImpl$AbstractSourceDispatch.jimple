public abstract class org.graalvm.polyglot.impl.AbstractPolyglotImpl$AbstractSourceDispatch extends org.graalvm.polyglot.impl.AbstractPolyglotImpl$AbstractDispatchClass
{
protected void <init>(org.graalvm.polyglot.impl.AbstractPolyglotImpl)
{
org.graalvm.polyglot.impl.AbstractPolyglotImpl$AbstractSourceDispatch v0;
org.graalvm.polyglot.impl.AbstractPolyglotImpl v1;
v0 := @this: org.graalvm.polyglot.impl.AbstractPolyglotImpl$AbstractSourceDispatch;
v1 := @parameter0: org.graalvm.polyglot.impl.AbstractPolyglotImpl;
specialinvoke v0.<org.graalvm.polyglot.impl.AbstractPolyglotImpl$AbstractDispatchClass: void <init>()>();
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
return;
}
public abstract java.lang.String getName(java.lang.Object);
public abstract java.lang.String getPath(java.lang.Object);
public abstract boolean isCached(java.lang.Object);
public abstract boolean isInteractive(java.lang.Object);
public abstract java.net.URL getURL(java.lang.Object);
public abstract java.net.URI getURI(java.lang.Object);
public abstract java.io.Reader getReader(java.lang.Object);
public abstract java.io.InputStream getInputStream(java.lang.Object);
public abstract int getLength(java.lang.Object);
public abstract java.lang.CharSequence getCharacters(java.lang.Object);
public abstract java.lang.CharSequence getCharacters(java.lang.Object, int);
public abstract int getLineCount(java.lang.Object);
public abstract int getLineNumber(java.lang.Object, int);
public abstract int getColumnNumber(java.lang.Object, int);
public abstract int getLineStartOffset(java.lang.Object, int);
public abstract int getLineLength(java.lang.Object, int);
public abstract java.lang.String toString(java.lang.Object);
public abstract int hashCode(java.lang.Object);
public abstract boolean equals(java.lang.Object, java.lang.Object);
public abstract boolean isInternal(java.lang.Object);
public abstract org.graalvm.polyglot.io.ByteSequence getBytes(java.lang.Object);
public abstract boolean hasCharacters(java.lang.Object);
public abstract boolean hasBytes(java.lang.Object);
public abstract java.lang.String getMimeType(java.lang.Object);
public abstract java.lang.String getLanguage(java.lang.Object);
}