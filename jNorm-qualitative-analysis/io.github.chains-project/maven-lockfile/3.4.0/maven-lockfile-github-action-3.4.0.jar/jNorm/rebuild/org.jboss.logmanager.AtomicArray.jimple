final class org.jboss.logmanager.AtomicArray extends java.lang.Object
{
private final java.util.concurrent.atomic.AtomicReferenceFieldUpdater updater;
private final java.lang.Class componentType;
private final java.lang.Object[] emptyArray;
public void <init>(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Class)
{
java.lang.Object[] v3;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v1;
java.lang.Class v2;
org.jboss.logmanager.AtomicArray v0;
v0 := @this: org.jboss.logmanager.AtomicArray;
v1 := @parameter0: java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
v2 := @parameter1: java.lang.Class;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.jboss.logmanager.AtomicArray: java.util.concurrent.atomic.AtomicReferenceFieldUpdater updater> = v1;
v0.<org.jboss.logmanager.AtomicArray: java.lang.Class componentType> = v2;
v3 = staticinvoke <org.jboss.logmanager.AtomicArray: java.lang.Object[] newInstance(java.lang.Class,int)>(v2, 0);
v0.<org.jboss.logmanager.AtomicArray: java.lang.Object[] emptyArray> = v3;
return;
}
public static org.jboss.logmanager.AtomicArray create(java.util.concurrent.atomic.AtomicReferenceFieldUpdater, java.lang.Class)
{
java.lang.Class v1;
org.jboss.logmanager.AtomicArray v2;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v0;
v0 := @parameter0: java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
v1 := @parameter1: java.lang.Class;
v2 = new org.jboss.logmanager.AtomicArray;
specialinvoke v2.<org.jboss.logmanager.AtomicArray: void <init>(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Class)>(v0, v1);
return v2;
}
public void clear(java.lang.Object)
{
java.lang.Object[] v3;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v2;
java.lang.Object v1;
org.jboss.logmanager.AtomicArray v0;
v0 := @this: org.jboss.logmanager.AtomicArray;
v1 := @parameter0: java.lang.Object;
v2 = v0.<org.jboss.logmanager.AtomicArray: java.util.concurrent.atomic.AtomicReferenceFieldUpdater updater>;
v3 = v0.<org.jboss.logmanager.AtomicArray: java.lang.Object[] emptyArray>;
virtualinvoke v2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void set(java.lang.Object,java.lang.Object)>(v1, v3);
return;
}
public void set(java.lang.Object, java.lang.Object[])
{
java.lang.Object[] v2;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v3;
java.lang.Object v1;
org.jboss.logmanager.AtomicArray v0;
v0 := @this: org.jboss.logmanager.AtomicArray;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object[];
v3 = v0.<org.jboss.logmanager.AtomicArray: java.util.concurrent.atomic.AtomicReferenceFieldUpdater updater>;
virtualinvoke v3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void set(java.lang.Object,java.lang.Object)>(v1, v2);
return;
}
public java.lang.Object[] getAndSet(java.lang.Object, java.lang.Object[])
{
java.lang.Object[] v2;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v3;
java.lang.Object v1, v4;
org.jboss.logmanager.AtomicArray v0;
v0 := @this: org.jboss.logmanager.AtomicArray;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object[];
v3 = v0.<org.jboss.logmanager.AtomicArray: java.util.concurrent.atomic.AtomicReferenceFieldUpdater updater>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object getAndSet(java.lang.Object,java.lang.Object)>(v1, v2);
return v4;
}
private static java.lang.Object[] copyOf(java.lang.Class, java.lang.Object[], int)
{
java.lang.Object[] v1, v3;
int v2, v4, v5;
java.lang.Class v0;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Object[];
v2 := @parameter2: int;
v3 = staticinvoke <org.jboss.logmanager.AtomicArray: java.lang.Object[] newInstance(java.lang.Class,int)>(v0, v2);
v4 = lengthof v1;
v5 = staticinvoke <java.lang.Math: int min(int,int)>(v4, v2);
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, 0, v3, 0, v5);
return v3;
}
public void add(java.lang.Object, java.lang.Object)
{
java.lang.Object[] v8;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v3;
int v5, v7;
java.lang.Class v6;
java.lang.Object v1, v2, v4;
org.jboss.logmanager.AtomicArray v0;
boolean v9;
v0 := @this: org.jboss.logmanager.AtomicArray;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = v0.<org.jboss.logmanager.AtomicArray: java.util.concurrent.atomic.AtomicReferenceFieldUpdater updater>;
label1:
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(v1);
v5 = lengthof v4;
v6 = v0.<org.jboss.logmanager.AtomicArray: java.lang.Class componentType>;
v7 = v5 + 1;
v8 = staticinvoke <org.jboss.logmanager.AtomicArray: java.lang.Object[] copyOf(java.lang.Class,java.lang.Object[],int)>(v6, v4, v7);
v8[v5] = v2;
v9 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(v1, v4, v8);
if v9 == 0 goto label1;
return;
}
public boolean addIfAbsent(java.lang.Object, java.lang.Object, boolean)
{
java.lang.Object[] v14;
int v13, v6, v7, v9;
org.jboss.logmanager.AtomicArray v0;
boolean v11, v15, v3;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v4;
java.lang.Class v12;
java.lang.Object v1, v10, v2, v5, v8;
v0 := @this: org.jboss.logmanager.AtomicArray;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: boolean;
v4 = v0.<org.jboss.logmanager.AtomicArray: java.util.concurrent.atomic.AtomicReferenceFieldUpdater updater>;
label1:
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(v1);
v6 = lengthof v5;
if v3 != 0 goto label2;
if v2 != null goto label5;
label2:
v7 = 0;
label3:
if v7 >= v6 goto label8;
v8 = v5[v7];
if v8 != v2 goto label4;
return 0;
label4:
v7 = v7 + 1;
goto label3;
label5:
v9 = 0;
label6:
if v9 >= v6 goto label8;
v10 = v5[v9];
v11 = virtualinvoke v2.<java.lang.Object: boolean equals(java.lang.Object)>(v10);
if v11 == 0 goto label7;
return 0;
label7:
v9 = v9 + 1;
goto label6;
label8:
v12 = v0.<org.jboss.logmanager.AtomicArray: java.lang.Class componentType>;
v13 = v6 + 1;
v14 = staticinvoke <org.jboss.logmanager.AtomicArray: java.lang.Object[] copyOf(java.lang.Class,java.lang.Object[],int)>(v12, v5, v13);
v14[v6] = v2;
v15 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(v1, v5, v14);
if v15 == 0 goto label1;
return 1;
}
public boolean remove(java.lang.Object, java.lang.Object, boolean)
{
java.lang.Object[] v17;
int v11, v14, v16, v18, v19, v20, v6, v7, v8, v9;
org.jboss.logmanager.AtomicArray v0;
boolean v13, v21, v3;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v4;
java.lang.Class v15;
java.lang.Object v1, v10, v12, v2, v5;
v0 := @this: org.jboss.logmanager.AtomicArray;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: boolean;
v4 = v0.<org.jboss.logmanager.AtomicArray: java.util.concurrent.atomic.AtomicReferenceFieldUpdater updater>;
label01:
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(v1);
v6 = lengthof v5;
if v6 != 0 goto label02;
return 0;
label02:
v7 = (int) -1;
v8 = v7;
if v3 != 0 goto label03;
if v2 != null goto label06;
label03:
v9 = 0;
label04:
if v9 >= v6 goto label09;
v10 = v5[v9];
if v10 != v2 goto label05;
v8 = v9;
goto label09;
label05:
v9 = v9 + 1;
goto label04;
label06:
v11 = 0;
label07:
if v11 >= v6 goto label09;
v12 = v5[v11];
v13 = virtualinvoke v2.<java.lang.Object: boolean equals(java.lang.Object)>(v12);
if v13 == 0 goto label08;
v8 = v11;
goto label09;
label08:
v11 = v11 + 1;
goto label07;
label09:
v14 = (int) -1;
if v8 != v14 goto label10;
return 0;
label10:
v15 = v0.<org.jboss.logmanager.AtomicArray: java.lang.Class componentType>;
v16 = v6 - 1;
v17 = staticinvoke <org.jboss.logmanager.AtomicArray: java.lang.Object[] newInstance(java.lang.Class,int)>(v15, v16);
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v5, 0, v17, 0, v8);
v18 = v8 + 1;
v19 = v6 - v8;
v20 = v19 - 1;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v5, v18, v17, v8, v20);
v21 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(v1, v5, v17);
if v21 == 0 goto label01;
return 1;
}
public int removeAll(java.lang.Object, java.lang.Object, boolean)
{
java.lang.Object[] v15;
int v11, v14, v17, v18, v20, v6, v8, v9;
org.jboss.logmanager.AtomicArray v0;
boolean v13, v19, v22, v3;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v4;
boolean[] v7;
java.lang.Class v16;
java.lang.Object v1, v10, v12, v2, v21, v5;
v0 := @this: org.jboss.logmanager.AtomicArray;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: boolean;
v4 = v0.<org.jboss.logmanager.AtomicArray: java.util.concurrent.atomic.AtomicReferenceFieldUpdater updater>;
label01:
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(v1);
v6 = lengthof v5;
if v6 != 0 goto label02;
return 0;
label02:
v7 = newarray (boolean)[v6];
v8 = 0;
if v3 != 0 goto label03;
if v2 != null goto label06;
label03:
v9 = 0;
label04:
if v9 >= v6 goto label09;
v10 = v5[v9];
if v10 != v2 goto label05;
v7[v9] = 1;
v8 = v8 + 1;
label05:
v9 = v9 + 1;
goto label04;
label06:
v11 = 0;
label07:
if v11 >= v6 goto label09;
v12 = v5[v11];
v13 = virtualinvoke v2.<java.lang.Object: boolean equals(java.lang.Object)>(v12);
if v13 == 0 goto label08;
v7[v11] = 1;
v8 = v8 + 1;
label08:
v11 = v11 + 1;
goto label07;
label09:
if v8 != 0 goto label10;
return 0;
label10:
v14 = v6 - v8;
if v14 != 0 goto label11;
v15 = v0.<org.jboss.logmanager.AtomicArray: java.lang.Object[] emptyArray>;
goto label14;
label11:
v16 = v0.<org.jboss.logmanager.AtomicArray: java.lang.Class componentType>;
v15 = staticinvoke <org.jboss.logmanager.AtomicArray: java.lang.Object[] newInstance(java.lang.Class,int)>(v16, v14);
v17 = 0;
v18 = 0;
label12:
if v17 >= v6 goto label14;
v19 = v7[v17];
if v19 != 0 goto label13;
v20 = v18;
v18 = v18 + 1;
v21 = v5[v17];
v15[v20] = v21;
label13:
v17 = v17 + 1;
goto label12;
label14:
v22 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(v1, v5, v15);
if v22 == 0 goto label01;
return v8;
}
public void add(java.lang.Object, java.lang.Object, java.util.Comparator)
{
java.lang.Object[] v11;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v4;
int v10, v12, v13, v6, v7, v8;
java.lang.Class v9;
java.lang.Object v1, v2, v5;
org.jboss.logmanager.AtomicArray v0;
java.util.Comparator v3;
boolean v14;
v0 := @this: org.jboss.logmanager.AtomicArray;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.util.Comparator;
v4 = v0.<org.jboss.logmanager.AtomicArray: java.util.concurrent.atomic.AtomicReferenceFieldUpdater updater>;
label1:
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(v1);
v6 = lengthof v5;
v7 = staticinvoke <java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object,java.util.Comparator)>(v5, v2, v3);
v8 = staticinvoke <org.jboss.logmanager.AtomicArray: int insertionPoint(int)>(v7);
v9 = v0.<org.jboss.logmanager.AtomicArray: java.lang.Class componentType>;
v10 = v6 + 1;
v11 = staticinvoke <org.jboss.logmanager.AtomicArray: java.lang.Object[] newInstance(java.lang.Class,int)>(v9, v10);
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v5, 0, v11, 0, v8);
v11[v8] = v2;
v12 = v8 + 1;
v13 = v6 - v8;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v5, v8, v11, v12, v13);
v14 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(v1, v5, v11);
if v14 == 0 goto label1;
return;
}
public boolean addIfAbsent(java.lang.Object, java.lang.Object, java.util.Comparator)
{
java.lang.Object[] v10;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v4;
int v11, v12, v6, v7, v9;
java.lang.Class v8;
java.lang.Object v1, v2, v5;
org.jboss.logmanager.AtomicArray v0;
java.util.Comparator v3;
boolean v13;
v0 := @this: org.jboss.logmanager.AtomicArray;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.util.Comparator;
v4 = v0.<org.jboss.logmanager.AtomicArray: java.util.concurrent.atomic.AtomicReferenceFieldUpdater updater>;
label1:
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(v1);
v6 = lengthof v5;
v7 = staticinvoke <java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object,java.util.Comparator)>(v5, v2, v3);
if v7 >= 0 goto label2;
return 0;
label2:
v8 = v0.<org.jboss.logmanager.AtomicArray: java.lang.Class componentType>;
v9 = v6 + 1;
v10 = staticinvoke <org.jboss.logmanager.AtomicArray: java.lang.Object[] newInstance(java.lang.Class,int)>(v8, v9);
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v5, 0, v10, 0, v7);
v10[v7] = v2;
v11 = v7 + 1;
v12 = v6 - v7;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v5, v7, v10, v11, v12);
v13 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(v1, v5, v10);
if v13 == 0 goto label1;
return 1;
}
public boolean remove(java.lang.Object, java.lang.Object, java.util.Comparator)
{
java.lang.Object[] v10;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v4;
int v11, v12, v13, v6, v7, v9;
java.lang.Class v8;
java.lang.Object v1, v2, v5;
org.jboss.logmanager.AtomicArray v0;
java.util.Comparator v3;
boolean v14;
v0 := @this: org.jboss.logmanager.AtomicArray;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.util.Comparator;
v4 = v0.<org.jboss.logmanager.AtomicArray: java.util.concurrent.atomic.AtomicReferenceFieldUpdater updater>;
label1:
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(v1);
v6 = lengthof v5;
if v6 != 0 goto label2;
return 0;
label2:
v7 = staticinvoke <java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object,java.util.Comparator)>(v5, v2, v3);
if v7 >= 0 goto label3;
return 0;
label3:
v8 = v0.<org.jboss.logmanager.AtomicArray: java.lang.Class componentType>;
v9 = v6 - 1;
v10 = staticinvoke <org.jboss.logmanager.AtomicArray: java.lang.Object[] newInstance(java.lang.Class,int)>(v8, v9);
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v5, 0, v10, 0, v7);
v11 = v7 + 1;
v12 = v6 - v7;
v13 = v12 - 1;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v5, v11, v10, v7, v13);
v14 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(v1, v5, v10);
if v14 == 0 goto label1;
return 1;
}
public void sort(java.lang.Object, java.util.Comparator)
{
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v3;
int v5;
java.lang.Object v1, v4, v6;
org.jboss.logmanager.AtomicArray v0;
java.util.Comparator v2;
boolean v7;
v0 := @this: org.jboss.logmanager.AtomicArray;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.util.Comparator;
v3 = v0.<org.jboss.logmanager.AtomicArray: java.util.concurrent.atomic.AtomicReferenceFieldUpdater updater>;
label1:
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(v1);
v5 = lengthof v4;
if v5 != 0 goto label2;
return;
label2:
v6 = virtualinvoke v4.<java.lang.Object: java.lang.Object clone()>();
staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(v6, v2);
v7 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(v1, v4, v6);
if v7 == 0 goto label1;
return;
}
private static int insertionPoint(int)
{
int v0, v1, v2;
v0 := @parameter0: int;
if v0 <= 0 goto label1;
v1 = v0;
goto label2;
label1:
v2 = v0 + 1;
v1 = neg v2;
label2:
return v1;
}
private static java.lang.Object[] newInstance(java.lang.Class, int)
{
java.lang.Object[] v3;
int v1;
java.util.logging.Handler[] v2;
java.lang.Class v0;
java.lang.Object v4;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: int;
if v0 != class "Ljava/util/logging/Handler;" goto label1;
v2 = newarray (java.util.logging.Handler)[v1];
return v2;
label1:
if v0 != class "Ljava/lang/Object;" goto label2;
v3 = newarray (java.lang.Object)[v1];
return v3;
label2:
v4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(v0, v1);
return v4;
}
public boolean compareAndSet(java.lang.Object, java.lang.Object[], java.lang.Object[])
{
java.lang.Object[] v2, v3;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v4;
java.lang.Object v1;
org.jboss.logmanager.AtomicArray v0;
boolean v5;
v0 := @this: org.jboss.logmanager.AtomicArray;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object[];
v3 := @parameter2: java.lang.Object[];
v4 = v0.<org.jboss.logmanager.AtomicArray: java.util.concurrent.atomic.AtomicReferenceFieldUpdater updater>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(v1, v2, v3);
return v5;
}
}