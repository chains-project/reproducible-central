final class org.jboss.logmanager.CopyOnWriteMap extends java.util.AbstractMap implements java.util.concurrent.ConcurrentMap, java.lang.Cloneable
{
private static final org.jboss.logmanager.FastCopyHashMap EMPTY;
private volatile org.jboss.logmanager.FastCopyHashMap map;
private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater mapUpdater;
void <init>()
{
org.jboss.logmanager.FastCopyHashMap v1;
org.jboss.logmanager.CopyOnWriteMap v0;
v0 := @this: org.jboss.logmanager.CopyOnWriteMap;
specialinvoke v0.<java.util.AbstractMap: void <init>()>();
v1 = <org.jboss.logmanager.CopyOnWriteMap: org.jboss.logmanager.FastCopyHashMap EMPTY>;
v0.<org.jboss.logmanager.CopyOnWriteMap: org.jboss.logmanager.FastCopyHashMap map> = v1;
return;
}
public java.lang.Object get(java.lang.Object)
{
org.jboss.logmanager.FastCopyHashMap v2;
java.lang.Object v1, v3;
org.jboss.logmanager.CopyOnWriteMap v0;
v0 := @this: org.jboss.logmanager.CopyOnWriteMap;
v1 := @parameter0: java.lang.Object;
v2 = v0.<org.jboss.logmanager.CopyOnWriteMap: org.jboss.logmanager.FastCopyHashMap map>;
v3 = virtualinvoke v2.<org.jboss.logmanager.FastCopyHashMap: java.lang.Object get(java.lang.Object)>(v1);
return v3;
}
public boolean containsKey(java.lang.Object)
{
org.jboss.logmanager.FastCopyHashMap v2;
java.lang.Object v1;
org.jboss.logmanager.CopyOnWriteMap v0;
boolean v3;
v0 := @this: org.jboss.logmanager.CopyOnWriteMap;
v1 := @parameter0: java.lang.Object;
v2 = v0.<org.jboss.logmanager.CopyOnWriteMap: org.jboss.logmanager.FastCopyHashMap map>;
v3 = virtualinvoke v2.<org.jboss.logmanager.FastCopyHashMap: boolean containsKey(java.lang.Object)>(v1);
return v3;
}
public int size()
{
int v2;
org.jboss.logmanager.FastCopyHashMap v1;
org.jboss.logmanager.CopyOnWriteMap v0;
v0 := @this: org.jboss.logmanager.CopyOnWriteMap;
v1 = v0.<org.jboss.logmanager.CopyOnWriteMap: org.jboss.logmanager.FastCopyHashMap map>;
v2 = virtualinvoke v1.<org.jboss.logmanager.FastCopyHashMap: int size()>();
return v2;
}
public boolean containsValue(java.lang.Object)
{
org.jboss.logmanager.FastCopyHashMap v2;
java.lang.Object v1;
org.jboss.logmanager.CopyOnWriteMap v0;
boolean v3;
v0 := @this: org.jboss.logmanager.CopyOnWriteMap;
v1 := @parameter0: java.lang.Object;
v2 = v0.<org.jboss.logmanager.CopyOnWriteMap: org.jboss.logmanager.FastCopyHashMap map>;
v3 = virtualinvoke v2.<org.jboss.logmanager.FastCopyHashMap: boolean containsValue(java.lang.Object)>(v1);
return v3;
}
public void clear()
{
org.jboss.logmanager.FastCopyHashMap v1;
org.jboss.logmanager.CopyOnWriteMap v0;
v0 := @this: org.jboss.logmanager.CopyOnWriteMap;
v1 = <org.jboss.logmanager.CopyOnWriteMap: org.jboss.logmanager.FastCopyHashMap EMPTY>;
v0.<org.jboss.logmanager.CopyOnWriteMap: org.jboss.logmanager.FastCopyHashMap map> = v1;
return;
}
public java.lang.Object put(java.lang.Object, java.lang.Object)
{
org.jboss.logmanager.FastCopyHashMap v3, v4;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v6;
org.jboss.logmanager.CopyOnWriteMap v0;
java.lang.Object v1, v2, v5;
boolean v7;
v0 := @this: org.jboss.logmanager.CopyOnWriteMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
label1:
v3 = v0.<org.jboss.logmanager.CopyOnWriteMap: org.jboss.logmanager.FastCopyHashMap map>;
v4 = virtualinvoke v3.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap clone()>();
v5 = virtualinvoke v4.<org.jboss.logmanager.FastCopyHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v2);
v6 = <org.jboss.logmanager.CopyOnWriteMap: java.util.concurrent.atomic.AtomicReferenceFieldUpdater mapUpdater>;
v7 = virtualinvoke v6.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(v0, v3, v4);
if v7 == 0 goto label1;
return v5;
}
public java.lang.Object remove(java.lang.Object)
{
org.jboss.logmanager.FastCopyHashMap v2, v4;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v6;
org.jboss.logmanager.CopyOnWriteMap v0;
java.lang.Object v1, v5;
boolean v3, v7;
v0 := @this: org.jboss.logmanager.CopyOnWriteMap;
v1 := @parameter0: java.lang.Object;
label1:
v2 = v0.<org.jboss.logmanager.CopyOnWriteMap: org.jboss.logmanager.FastCopyHashMap map>;
v3 = virtualinvoke v2.<org.jboss.logmanager.FastCopyHashMap: boolean containsKey(java.lang.Object)>(v1);
if v3 != 0 goto label2;
return null;
label2:
v4 = virtualinvoke v2.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap clone()>();
v5 = virtualinvoke v4.<org.jboss.logmanager.FastCopyHashMap: java.lang.Object remove(java.lang.Object)>(v1);
v6 = <org.jboss.logmanager.CopyOnWriteMap: java.util.concurrent.atomic.AtomicReferenceFieldUpdater mapUpdater>;
v7 = virtualinvoke v6.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(v0, v2, v4);
if v7 == 0 goto label1;
return v5;
}
public org.jboss.logmanager.CopyOnWriteMap clone()
{
java.lang.IllegalStateException v3;
java.lang.Object v1;
org.jboss.logmanager.CopyOnWriteMap v0;
java.lang.CloneNotSupportedException v2;
v0 := @this: org.jboss.logmanager.CopyOnWriteMap;
label1:
v1 = specialinvoke v0.<java.util.AbstractMap: java.lang.Object clone()>();
label2:
return v1;
label3:
v2 := @caughtexception;
v3 = new java.lang.IllegalStateException;
specialinvoke v3.<java.lang.IllegalStateException: void <init>()>();
throw v3;
catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
}
public java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object)
{
org.jboss.logmanager.FastCopyHashMap v3, v6;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v7;
org.jboss.logmanager.CopyOnWriteMap v0;
java.lang.Object v1, v2, v5;
boolean v4, v8;
v0 := @this: org.jboss.logmanager.CopyOnWriteMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
label1:
v3 = v0.<org.jboss.logmanager.CopyOnWriteMap: org.jboss.logmanager.FastCopyHashMap map>;
v4 = virtualinvoke v3.<org.jboss.logmanager.FastCopyHashMap: boolean containsKey(java.lang.Object)>(v1);
if v4 == 0 goto label2;
v5 = virtualinvoke v3.<org.jboss.logmanager.FastCopyHashMap: java.lang.Object get(java.lang.Object)>(v1);
return v5;
label2:
v6 = virtualinvoke v3.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap clone()>();
virtualinvoke v6.<org.jboss.logmanager.FastCopyHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v2);
v7 = <org.jboss.logmanager.CopyOnWriteMap: java.util.concurrent.atomic.AtomicReferenceFieldUpdater mapUpdater>;
v8 = virtualinvoke v7.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(v0, v3, v6);
if v8 == 0 goto label1;
return null;
}
public boolean remove(java.lang.Object, java.lang.Object)
{
org.jboss.logmanager.FastCopyHashMap v3, v7;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v8;
org.jboss.logmanager.CopyOnWriteMap v0;
int v6;
java.lang.Object v1, v2, v4;
boolean v5, v9;
v0 := @this: org.jboss.logmanager.CopyOnWriteMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
label1:
v3 = v0.<org.jboss.logmanager.CopyOnWriteMap: org.jboss.logmanager.FastCopyHashMap map>;
v4 = virtualinvoke v3.<org.jboss.logmanager.FastCopyHashMap: java.lang.Object get(java.lang.Object)>(v1);
if v2 != v4 goto label4;
if v2 != null goto label2;
v5 = virtualinvoke v3.<org.jboss.logmanager.FastCopyHashMap: boolean containsKey(java.lang.Object)>(v1);
if v5 == 0 goto label4;
label2:
v6 = virtualinvoke v3.<org.jboss.logmanager.FastCopyHashMap: int size()>();
if v6 != 1 goto label3;
v7 = <org.jboss.logmanager.CopyOnWriteMap: org.jboss.logmanager.FastCopyHashMap EMPTY>;
goto label5;
label3:
v7 = virtualinvoke v3.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap clone()>();
virtualinvoke v7.<org.jboss.logmanager.FastCopyHashMap: java.lang.Object remove(java.lang.Object)>(v1);
goto label5;
label4:
return 0;
label5:
v8 = <org.jboss.logmanager.CopyOnWriteMap: java.util.concurrent.atomic.AtomicReferenceFieldUpdater mapUpdater>;
v9 = virtualinvoke v8.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(v0, v3, v7);
if v9 == 0 goto label1;
return 1;
}
public boolean replace(java.lang.Object, java.lang.Object, java.lang.Object)
{
org.jboss.logmanager.FastCopyHashMap v4, v7;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v8;
org.jboss.logmanager.CopyOnWriteMap v0;
java.lang.Object v1, v2, v3, v5;
boolean v6, v9;
v0 := @this: org.jboss.logmanager.CopyOnWriteMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.lang.Object;
label1:
v4 = v0.<org.jboss.logmanager.CopyOnWriteMap: org.jboss.logmanager.FastCopyHashMap map>;
v5 = virtualinvoke v4.<org.jboss.logmanager.FastCopyHashMap: java.lang.Object get(java.lang.Object)>(v1);
if v2 != v5 goto label3;
if v2 != null goto label2;
v6 = virtualinvoke v4.<org.jboss.logmanager.FastCopyHashMap: boolean containsKey(java.lang.Object)>(v1);
if v6 == 0 goto label3;
label2:
v7 = virtualinvoke v4.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap clone()>();
virtualinvoke v7.<org.jboss.logmanager.FastCopyHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v3);
goto label4;
label3:
return 0;
label4:
v8 = <org.jboss.logmanager.CopyOnWriteMap: java.util.concurrent.atomic.AtomicReferenceFieldUpdater mapUpdater>;
v9 = virtualinvoke v8.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(v0, v4, v7);
if v9 == 0 goto label1;
return 1;
}
public java.lang.Object replace(java.lang.Object, java.lang.Object)
{
org.jboss.logmanager.FastCopyHashMap v3, v6;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v8;
org.jboss.logmanager.CopyOnWriteMap v0;
java.lang.Object v1, v2, v4, v7;
boolean v5, v9;
v0 := @this: org.jboss.logmanager.CopyOnWriteMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
label1:
v3 = v0.<org.jboss.logmanager.CopyOnWriteMap: org.jboss.logmanager.FastCopyHashMap map>;
v4 = virtualinvoke v3.<org.jboss.logmanager.FastCopyHashMap: java.lang.Object get(java.lang.Object)>(v1);
if v2 != v4 goto label3;
if v2 != null goto label2;
v5 = virtualinvoke v3.<org.jboss.logmanager.FastCopyHashMap: boolean containsKey(java.lang.Object)>(v1);
if v5 == 0 goto label3;
label2:
v6 = virtualinvoke v3.<org.jboss.logmanager.FastCopyHashMap: org.jboss.logmanager.FastCopyHashMap clone()>();
v7 = virtualinvoke v6.<org.jboss.logmanager.FastCopyHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v2);
goto label4;
label3:
return null;
label4:
v8 = <org.jboss.logmanager.CopyOnWriteMap: java.util.concurrent.atomic.AtomicReferenceFieldUpdater mapUpdater>;
v9 = virtualinvoke v8.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(v0, v3, v6);
if v9 == 0 goto label1;
return v7;
}
public java.util.Set keySet()
{
org.jboss.logmanager.FastCopyHashMap v1;
java.util.Set v2, v3;
org.jboss.logmanager.CopyOnWriteMap v0;
v0 := @this: org.jboss.logmanager.CopyOnWriteMap;
v1 = v0.<org.jboss.logmanager.CopyOnWriteMap: org.jboss.logmanager.FastCopyHashMap map>;
v2 = virtualinvoke v1.<org.jboss.logmanager.FastCopyHashMap: java.util.Set keySet()>();
v3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(v2);
return v3;
}
public java.util.Collection values()
{
org.jboss.logmanager.FastCopyHashMap v1;
java.util.Collection v2, v3;
org.jboss.logmanager.CopyOnWriteMap v0;
v0 := @this: org.jboss.logmanager.CopyOnWriteMap;
v1 = v0.<org.jboss.logmanager.CopyOnWriteMap: org.jboss.logmanager.FastCopyHashMap map>;
v2 = virtualinvoke v1.<org.jboss.logmanager.FastCopyHashMap: java.util.Collection values()>();
v3 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>(v2);
return v3;
}
public java.util.Set entrySet()
{
org.jboss.logmanager.FastCopyHashMap v1;
java.util.Set v2, v3;
org.jboss.logmanager.CopyOnWriteMap v0;
v0 := @this: org.jboss.logmanager.CopyOnWriteMap;
v1 = v0.<org.jboss.logmanager.CopyOnWriteMap: org.jboss.logmanager.FastCopyHashMap map>;
v2 = virtualinvoke v1.<org.jboss.logmanager.FastCopyHashMap: java.util.Set entrySet()>();
v3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(v2);
return v3;
}
static void <clinit>()
{
org.jboss.logmanager.FastCopyHashMap v0;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v1;
v0 = new org.jboss.logmanager.FastCopyHashMap;
specialinvoke v0.<org.jboss.logmanager.FastCopyHashMap: void <init>(int,float)>(32, 0.25F);
<org.jboss.logmanager.CopyOnWriteMap: org.jboss.logmanager.FastCopyHashMap EMPTY> = v0;
v1 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lorg/jboss/logmanager/CopyOnWriteMap;", class "Lorg/jboss/logmanager/FastCopyHashMap;", "map");
<org.jboss.logmanager.CopyOnWriteMap: java.util.concurrent.atomic.AtomicReferenceFieldUpdater mapUpdater> = v1;
return;
}
}