public final class org.jboss.logmanager.LogContext extends java.lang.Object
{
static final org.jboss.logmanager.EmbeddedConfigurator CONFIGURATOR;
private static final org.jboss.logmanager.LogContext INSTANCE;
private final org.jboss.logmanager.LoggerNode rootLogger;
private static final java.util.HashMap LEVEL_MAP;
private final java.util.Set closeHandlers;
final java.lang.Object treeLock;
private static void add(java.util.Map, java.util.logging.Level)
{
java.util.Locale v3;
java.util.Map v0;
java.lang.String v2, v4;
java.util.logging.Level v1;
v0 := @parameter0: java.util.Map;
v1 := @parameter1: java.util.logging.Level;
v2 = virtualinvoke v1.<java.util.logging.Level: java.lang.String getName()>();
v3 = <java.util.Locale: java.util.Locale US>;
v4 = virtualinvoke v2.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>(v3);
interfaceinvoke v0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v4, v1);
return;
}
void <init>()
{
org.jboss.logmanager.LogContext v0;
org.jboss.logmanager.LoggerNode v2;
java.lang.Object v1;
java.util.LinkedHashSet v3;
v0 := @this: org.jboss.logmanager.LogContext;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.lang.Object;
specialinvoke v1.<java.lang.Object: void <init>()>();
v0.<org.jboss.logmanager.LogContext: java.lang.Object treeLock> = v1;
v2 = new org.jboss.logmanager.LoggerNode;
specialinvoke v2.<org.jboss.logmanager.LoggerNode: void <init>(org.jboss.logmanager.LogContext)>(v0);
v0.<org.jboss.logmanager.LogContext: org.jboss.logmanager.LoggerNode rootLogger> = v2;
v3 = new java.util.LinkedHashSet;
specialinvoke v3.<java.util.LinkedHashSet: void <init>()>();
v0.<org.jboss.logmanager.LogContext: java.util.Set closeHandlers> = v3;
return;
}
private static org.jboss.logmanager.LogContext create()
{
org.jboss.logmanager.LogContext v0;
v0 = new org.jboss.logmanager.LogContext;
specialinvoke v0.<org.jboss.logmanager.LogContext: void <init>()>();
return v0;
}
public java.lang.Object getAttachment(org.jboss.logmanager.Logger$AttachmentKey)
{
org.jboss.logmanager.LogContext v0;
org.jboss.logmanager.LoggerNode v2;
org.jboss.logmanager.Logger$AttachmentKey v1;
java.lang.Object v3;
v0 := @this: org.jboss.logmanager.LogContext;
v1 := @parameter0: org.jboss.logmanager.Logger$AttachmentKey;
v2 = v0.<org.jboss.logmanager.LogContext: org.jboss.logmanager.LoggerNode rootLogger>;
v3 = virtualinvoke v2.<org.jboss.logmanager.LoggerNode: java.lang.Object getAttachment(org.jboss.logmanager.Logger$AttachmentKey)>(v1);
return v3;
}
public java.lang.Object attach(org.jboss.logmanager.Logger$AttachmentKey, java.lang.Object) throws java.lang.SecurityException
{
org.jboss.logmanager.LogContext v0;
org.jboss.logmanager.LoggerNode v3;
org.jboss.logmanager.Logger$AttachmentKey v1;
java.lang.Object v2, v4;
v0 := @this: org.jboss.logmanager.LogContext;
v1 := @parameter0: org.jboss.logmanager.Logger$AttachmentKey;
v2 := @parameter1: java.lang.Object;
v3 = v0.<org.jboss.logmanager.LogContext: org.jboss.logmanager.LoggerNode rootLogger>;
v4 = virtualinvoke v3.<org.jboss.logmanager.LoggerNode: java.lang.Object attach(org.jboss.logmanager.Logger$AttachmentKey,java.lang.Object)>(v1, v2);
return v4;
}
public java.lang.Object attachIfAbsent(org.jboss.logmanager.Logger$AttachmentKey, java.lang.Object) throws java.lang.SecurityException
{
org.jboss.logmanager.LogContext v0;
org.jboss.logmanager.LoggerNode v3;
org.jboss.logmanager.Logger$AttachmentKey v1;
java.lang.Object v2, v4;
v0 := @this: org.jboss.logmanager.LogContext;
v1 := @parameter0: org.jboss.logmanager.Logger$AttachmentKey;
v2 := @parameter1: java.lang.Object;
v3 = v0.<org.jboss.logmanager.LogContext: org.jboss.logmanager.LoggerNode rootLogger>;
v4 = virtualinvoke v3.<org.jboss.logmanager.LoggerNode: java.lang.Object attachIfAbsent(org.jboss.logmanager.Logger$AttachmentKey,java.lang.Object)>(v1, v2);
return v4;
}
public java.lang.Object detach(org.jboss.logmanager.Logger$AttachmentKey) throws java.lang.SecurityException
{
org.jboss.logmanager.LogContext v0;
org.jboss.logmanager.LoggerNode v2;
org.jboss.logmanager.Logger$AttachmentKey v1;
java.lang.Object v3;
v0 := @this: org.jboss.logmanager.LogContext;
v1 := @parameter0: org.jboss.logmanager.Logger$AttachmentKey;
v2 = v0.<org.jboss.logmanager.LogContext: org.jboss.logmanager.LoggerNode rootLogger>;
v3 = virtualinvoke v2.<org.jboss.logmanager.LoggerNode: java.lang.Object detach(org.jboss.logmanager.Logger$AttachmentKey)>(v1);
return v3;
}
public static org.jboss.logmanager.LogContext getLogContext()
{
org.jboss.logmanager.LogContext v0;
v0 = staticinvoke <org.jboss.logmanager.LogContext: org.jboss.logmanager.LogContext getInstance()>();
return v0;
}
public org.jboss.logmanager.Logger getLogger(java.lang.String)
{
org.jboss.logmanager.Logger v4;
org.jboss.logmanager.LogContext v0;
org.jboss.logmanager.LoggerNode v2, v3;
java.lang.String v1;
v0 := @this: org.jboss.logmanager.LogContext;
v1 := @parameter0: java.lang.String;
v2 = v0.<org.jboss.logmanager.LogContext: org.jboss.logmanager.LoggerNode rootLogger>;
v3 = virtualinvoke v2.<org.jboss.logmanager.LoggerNode: org.jboss.logmanager.LoggerNode getOrCreate(java.lang.String)>(v1);
v4 = virtualinvoke v3.<org.jboss.logmanager.LoggerNode: org.jboss.logmanager.Logger createLogger()>();
return v4;
}
public org.jboss.logmanager.Logger getLoggerIfExists(java.lang.String)
{
org.jboss.logmanager.Logger v4;
org.jboss.logmanager.LogContext v0;
org.jboss.logmanager.LoggerNode v2, v3;
java.lang.String v1;
v0 := @this: org.jboss.logmanager.LogContext;
v1 := @parameter0: java.lang.String;
v2 = v0.<org.jboss.logmanager.LogContext: org.jboss.logmanager.LoggerNode rootLogger>;
v3 = virtualinvoke v2.<org.jboss.logmanager.LoggerNode: org.jboss.logmanager.LoggerNode getIfExists(java.lang.String)>(v1);
if v3 != null goto label1;
v4 = null;
goto label2;
label1:
v4 = virtualinvoke v3.<org.jboss.logmanager.LoggerNode: org.jboss.logmanager.Logger createLogger()>();
label2:
return v4;
}
public java.lang.Object getAttachment(java.lang.String, org.jboss.logmanager.Logger$AttachmentKey)
{
org.jboss.logmanager.LogContext v0;
org.jboss.logmanager.LoggerNode v3, v4;
org.jboss.logmanager.Logger$AttachmentKey v2;
java.lang.Object v5;
java.lang.String v1;
v0 := @this: org.jboss.logmanager.LogContext;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: org.jboss.logmanager.Logger$AttachmentKey;
v3 = v0.<org.jboss.logmanager.LogContext: org.jboss.logmanager.LoggerNode rootLogger>;
v4 = virtualinvoke v3.<org.jboss.logmanager.LoggerNode: org.jboss.logmanager.LoggerNode getIfExists(java.lang.String)>(v1);
if v4 != null goto label1;
return null;
label1:
v5 = virtualinvoke v4.<org.jboss.logmanager.LoggerNode: java.lang.Object getAttachment(org.jboss.logmanager.Logger$AttachmentKey)>(v2);
return v5;
}
public java.util.logging.Level getLevelForName(java.lang.String) throws java.lang.IllegalArgumentException
{
org.jboss.logmanager.LogContext v0;
java.lang.Object v3;
java.util.HashMap v2;
java.lang.String v1, v5;
java.lang.IllegalArgumentException v4;
v0 := @this: org.jboss.logmanager.LogContext;
v1 := @parameter0: java.lang.String;
if v1 == null goto label1;
v2 = <org.jboss.logmanager.LogContext: java.util.HashMap LEVEL_MAP>;
v3 = virtualinvoke v2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(v1);
if v3 == null goto label1;
return v3;
label1:
v4 = new java.lang.IllegalArgumentException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unknown level \"\u0001\"");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v4;
}
public static org.jboss.logmanager.LogContext getInstance()
{
org.jboss.logmanager.LogContext v0;
v0 = <org.jboss.logmanager.LogContext: org.jboss.logmanager.LogContext INSTANCE>;
return v0;
}
static org.jboss.logmanager.EmbeddedConfigurator getConfigurator()
{
java.io.PrintStream v8, v9;
java.lang.Throwable v7;
java.util.Iterator v3;
java.util.ServiceLoader v2;
java.lang.Class v0;
java.lang.Object v6;
java.lang.ClassLoader v1;
org.jboss.logmanager.EmbeddedConfigurator v5;
boolean v4;
v0 = class "Lorg/jboss/logmanager/LogContext;";
v1 = virtualinvoke v0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
v2 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>(class "Lorg/jboss/logmanager/EmbeddedConfigurator;", v1);
v3 = virtualinvoke v2.<java.util.ServiceLoader: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 != 0 goto label3;
v5 = <org.jboss.logmanager.EmbeddedConfigurator: org.jboss.logmanager.EmbeddedConfigurator EMPTY>;
label2:
return v5;
label3:
v6 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
label4:
return v6;
label5:
v7 := @caughtexception;
v8 = <java.lang.System: java.io.PrintStream err>;
virtualinvoke v8.<java.io.PrintStream: void print(java.lang.String)>("Warning: failed to load configurator: ");
v9 = <java.lang.System: java.io.PrintStream err>;
virtualinvoke v7.<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>(v9);
goto label1;
catch java.util.ServiceConfigurationError from label1 to label2 with label5;
catch java.lang.RuntimeException from label1 to label2 with label5;
catch java.util.ServiceConfigurationError from label3 to label4 with label5;
catch java.lang.RuntimeException from label3 to label4 with label5;
}
public java.util.Enumeration getLoggerNames()
{
org.jboss.logmanager.LogContext v0;
org.jboss.logmanager.LogContext$1 v5;
org.jboss.logmanager.LoggerNode v2;
java.util.Iterator v4;
java.util.Set v3;
java.util.ArrayDeque v1;
v0 := @this: org.jboss.logmanager.LogContext;
v1 = new java.util.ArrayDeque;
specialinvoke v1.<java.util.ArrayDeque: void <init>()>();
v2 = v0.<org.jboss.logmanager.LogContext: org.jboss.logmanager.LoggerNode rootLogger>;
v3 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(v2);
v4 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
virtualinvoke v1.<java.util.ArrayDeque: boolean add(java.lang.Object)>(v4);
v5 = new org.jboss.logmanager.LogContext$1;
specialinvoke v5.<org.jboss.logmanager.LogContext$1: void <init>(org.jboss.logmanager.LogContext,java.util.ArrayDeque)>(v0, v1);
return v5;
}
static void <clinit>()
{
org.jboss.logmanager.LogContext v1;
java.util.HashMap v2;
java.util.logging.Level v10, v11, v3, v4, v5, v6, v7, v8, v9;
org.jboss.logmanager.EmbeddedConfigurator v0;
org.jboss.logmanager.Level v12, v13, v14, v15, v16, v17;
v0 = staticinvoke <org.jboss.logmanager.LogContext: org.jboss.logmanager.EmbeddedConfigurator getConfigurator()>();
<org.jboss.logmanager.LogContext: org.jboss.logmanager.EmbeddedConfigurator CONFIGURATOR> = v0;
v1 = new org.jboss.logmanager.LogContext;
specialinvoke v1.<org.jboss.logmanager.LogContext: void <init>()>();
<org.jboss.logmanager.LogContext: org.jboss.logmanager.LogContext INSTANCE> = v1;
v2 = new java.util.HashMap;
specialinvoke v2.<java.util.HashMap: void <init>()>();
v3 = <java.util.logging.Level: java.util.logging.Level OFF>;
staticinvoke <org.jboss.logmanager.LogContext: void add(java.util.Map,java.util.logging.Level)>(v2, v3);
v4 = <java.util.logging.Level: java.util.logging.Level ALL>;
staticinvoke <org.jboss.logmanager.LogContext: void add(java.util.Map,java.util.logging.Level)>(v2, v4);
v5 = <java.util.logging.Level: java.util.logging.Level SEVERE>;
staticinvoke <org.jboss.logmanager.LogContext: void add(java.util.Map,java.util.logging.Level)>(v2, v5);
v6 = <java.util.logging.Level: java.util.logging.Level WARNING>;
staticinvoke <org.jboss.logmanager.LogContext: void add(java.util.Map,java.util.logging.Level)>(v2, v6);
v7 = <java.util.logging.Level: java.util.logging.Level CONFIG>;
staticinvoke <org.jboss.logmanager.LogContext: void add(java.util.Map,java.util.logging.Level)>(v2, v7);
v8 = <java.util.logging.Level: java.util.logging.Level INFO>;
staticinvoke <org.jboss.logmanager.LogContext: void add(java.util.Map,java.util.logging.Level)>(v2, v8);
v9 = <java.util.logging.Level: java.util.logging.Level FINE>;
staticinvoke <org.jboss.logmanager.LogContext: void add(java.util.Map,java.util.logging.Level)>(v2, v9);
v10 = <java.util.logging.Level: java.util.logging.Level FINER>;
staticinvoke <org.jboss.logmanager.LogContext: void add(java.util.Map,java.util.logging.Level)>(v2, v10);
v11 = <java.util.logging.Level: java.util.logging.Level FINEST>;
staticinvoke <org.jboss.logmanager.LogContext: void add(java.util.Map,java.util.logging.Level)>(v2, v11);
v12 = <org.jboss.logmanager.Level: org.jboss.logmanager.Level FATAL>;
staticinvoke <org.jboss.logmanager.LogContext: void add(java.util.Map,java.util.logging.Level)>(v2, v12);
v13 = <org.jboss.logmanager.Level: org.jboss.logmanager.Level ERROR>;
staticinvoke <org.jboss.logmanager.LogContext: void add(java.util.Map,java.util.logging.Level)>(v2, v13);
v14 = <org.jboss.logmanager.Level: org.jboss.logmanager.Level WARN>;
staticinvoke <org.jboss.logmanager.LogContext: void add(java.util.Map,java.util.logging.Level)>(v2, v14);
v15 = <org.jboss.logmanager.Level: org.jboss.logmanager.Level INFO>;
staticinvoke <org.jboss.logmanager.LogContext: void add(java.util.Map,java.util.logging.Level)>(v2, v15);
v16 = <org.jboss.logmanager.Level: org.jboss.logmanager.Level DEBUG>;
staticinvoke <org.jboss.logmanager.LogContext: void add(java.util.Map,java.util.logging.Level)>(v2, v16);
v17 = <org.jboss.logmanager.Level: org.jboss.logmanager.Level TRACE>;
staticinvoke <org.jboss.logmanager.LogContext: void add(java.util.Map,java.util.logging.Level)>(v2, v17);
<org.jboss.logmanager.LogContext: java.util.HashMap LEVEL_MAP> = v2;
return;
}
}