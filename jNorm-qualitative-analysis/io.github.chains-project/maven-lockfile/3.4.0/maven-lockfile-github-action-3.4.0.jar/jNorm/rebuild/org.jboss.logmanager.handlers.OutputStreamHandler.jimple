public class org.jboss.logmanager.handlers.OutputStreamHandler extends org.jboss.logmanager.handlers.WriterHandler
{
private java.io.OutputStream outputStream;
private java.nio.charset.Charset charset;
public void <init>()
{
org.jboss.logmanager.handlers.OutputStreamHandler v0;
java.util.logging.Formatter v1;
v0 := @this: org.jboss.logmanager.handlers.OutputStreamHandler;
specialinvoke v0.<org.jboss.logmanager.handlers.WriterHandler: void <init>()>();
v1 = staticinvoke <org.jboss.logmanager.formatters.Formatters: java.util.logging.Formatter nullFormatter()>();
virtualinvoke v0.<org.jboss.logmanager.handlers.OutputStreamHandler: void setFormatter(java.util.logging.Formatter)>(v1);
return;
}
public void <init>(java.util.logging.Formatter)
{
org.jboss.logmanager.handlers.OutputStreamHandler v0;
java.util.logging.Formatter v1;
v0 := @this: org.jboss.logmanager.handlers.OutputStreamHandler;
v1 := @parameter0: java.util.logging.Formatter;
specialinvoke v0.<org.jboss.logmanager.handlers.WriterHandler: void <init>()>();
virtualinvoke v0.<org.jboss.logmanager.handlers.OutputStreamHandler: void setFormatter(java.util.logging.Formatter)>(v1);
return;
}
public void <init>(java.io.OutputStream, java.util.logging.Formatter)
{
java.io.OutputStream v1;
org.jboss.logmanager.handlers.OutputStreamHandler v0;
java.util.logging.Formatter v2;
v0 := @this: org.jboss.logmanager.handlers.OutputStreamHandler;
v1 := @parameter0: java.io.OutputStream;
v2 := @parameter1: java.util.logging.Formatter;
specialinvoke v0.<org.jboss.logmanager.handlers.WriterHandler: void <init>()>();
virtualinvoke v0.<org.jboss.logmanager.handlers.OutputStreamHandler: void setFormatter(java.util.logging.Formatter)>(v2);
virtualinvoke v0.<org.jboss.logmanager.handlers.OutputStreamHandler: void setOutputStream(java.io.OutputStream)>(v1);
return;
}
public java.lang.String getEncoding()
{
java.lang.Throwable v3;
java.lang.Object v1;
java.lang.String v2;
org.jboss.logmanager.handlers.OutputStreamHandler v0;
v0 := @this: org.jboss.logmanager.handlers.OutputStreamHandler;
v1 = v0.<org.jboss.logmanager.handlers.OutputStreamHandler: java.lang.Object outputLock>;
entermonitor v1;
label1:
v2 = specialinvoke v0.<org.jboss.logmanager.handlers.WriterHandler: java.lang.String getEncoding()>();
exitmonitor v1;
label2:
return v2;
label3:
v3 := @caughtexception;
exitmonitor v1;
throw v3;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void setEncoding(java.lang.String) throws java.lang.SecurityException, java.io.UnsupportedEncodingException
{
java.io.OutputStream v4;
java.lang.Throwable v6;
java.nio.charset.Charset v3;
java.io.Writer v5;
java.lang.Object v2;
java.lang.String v1;
org.jboss.logmanager.handlers.OutputStreamHandler v0;
v0 := @this: org.jboss.logmanager.handlers.OutputStreamHandler;
v1 := @parameter0: java.lang.String;
v2 = v0.<org.jboss.logmanager.handlers.OutputStreamHandler: java.lang.Object outputLock>;
entermonitor v2;
label1:
if v1 != null goto label2;
v3 = null;
goto label3;
label2:
v3 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(v1);
label3:
v0.<org.jboss.logmanager.handlers.OutputStreamHandler: java.nio.charset.Charset charset> = v3;
specialinvoke v0.<org.jboss.logmanager.handlers.WriterHandler: void setEncoding(java.lang.String)>(v1);
v4 = v0.<org.jboss.logmanager.handlers.OutputStreamHandler: java.io.OutputStream outputStream>;
if v4 == null goto label4;
v5 = specialinvoke v0.<org.jboss.logmanager.handlers.OutputStreamHandler: java.io.Writer getNewWriter(java.io.OutputStream)>(v4);
specialinvoke v0.<org.jboss.logmanager.handlers.WriterHandler: void setWriter(java.io.Writer)>(v5);
label4:
exitmonitor v2;
label5:
goto label7;
label6:
v6 := @caughtexception;
exitmonitor v2;
throw v6;
label7:
return;
catch java.lang.Throwable from label1 to label5 with label6;
}
public void setWriter(java.io.Writer)
{
java.io.OutputStream v3;
java.lang.Throwable v4;
java.io.Writer v1;
java.lang.Object v2;
org.jboss.logmanager.handlers.OutputStreamHandler v0;
v0 := @this: org.jboss.logmanager.handlers.OutputStreamHandler;
v1 := @parameter0: java.io.Writer;
v2 = v0.<org.jboss.logmanager.handlers.OutputStreamHandler: java.lang.Object outputLock>;
entermonitor v2;
label1:
specialinvoke v0.<org.jboss.logmanager.handlers.WriterHandler: void setWriter(java.io.Writer)>(v1);
v3 = v0.<org.jboss.logmanager.handlers.OutputStreamHandler: java.io.OutputStream outputStream>;
v0.<org.jboss.logmanager.handlers.OutputStreamHandler: java.io.OutputStream outputStream> = null;
virtualinvoke v0.<org.jboss.logmanager.handlers.OutputStreamHandler: void safeFlush(java.io.Flushable)>(v3);
virtualinvoke v0.<org.jboss.logmanager.handlers.OutputStreamHandler: void safeClose(java.io.Closeable)>(v3);
exitmonitor v2;
label2:
goto label4;
label3:
v4 := @caughtexception;
exitmonitor v2;
throw v4;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void setOutputStream(java.io.OutputStream)
{
java.io.OutputStream v1, v3;
java.lang.Throwable v5, v6;
java.lang.Exception v7;
java.io.Writer v4;
java.lang.Object v2;
org.jboss.logmanager.handlers.OutputStreamHandler v0;
v0 := @this: org.jboss.logmanager.handlers.OutputStreamHandler;
v1 := @parameter0: java.io.OutputStream;
if v1 != null goto label01;
virtualinvoke v0.<org.jboss.logmanager.handlers.OutputStreamHandler: void setWriter(java.io.Writer)>(null);
return;
label01:
v2 = v0.<org.jboss.logmanager.handlers.OutputStreamHandler: java.lang.Object outputLock>;
entermonitor v2;
label02:
v3 = v0.<org.jboss.logmanager.handlers.OutputStreamHandler: java.io.OutputStream outputStream>;
v4 = specialinvoke v0.<org.jboss.logmanager.handlers.OutputStreamHandler: java.io.Writer getNewWriter(java.io.OutputStream)>(v1);
label03:
v0.<org.jboss.logmanager.handlers.OutputStreamHandler: java.io.OutputStream outputStream> = v1;
specialinvoke v0.<org.jboss.logmanager.handlers.WriterHandler: void setWriter(java.io.Writer)>(v4);
label04:
virtualinvoke v0.<org.jboss.logmanager.handlers.OutputStreamHandler: void safeFlush(java.io.Flushable)>(v3);
virtualinvoke v0.<org.jboss.logmanager.handlers.OutputStreamHandler: void safeClose(java.io.Closeable)>(v3);
goto label06;
label05:
v5 := @caughtexception;
virtualinvoke v0.<org.jboss.logmanager.handlers.OutputStreamHandler: void safeFlush(java.io.Flushable)>(v3);
virtualinvoke v0.<org.jboss.logmanager.handlers.OutputStreamHandler: void safeClose(java.io.Closeable)>(v3);
throw v5;
label06:
exitmonitor v2;
label07:
goto label10;
label08:
v6 := @caughtexception;
exitmonitor v2;
throw v6;
label09:
v7 := @caughtexception;
virtualinvoke v0.<org.jboss.logmanager.handlers.OutputStreamHandler: void reportError(java.lang.String,java.lang.Exception,int)>("Error opening output stream", v7, 4);
return;
label10:
return;
catch java.lang.Throwable from label03 to label04 with label05;
catch java.lang.Throwable from label02 to label07 with label08;
catch java.lang.Exception from label01 to label09 with label09;
}
private java.io.Writer getNewWriter(java.io.OutputStream)
{
java.io.OutputStream v1;
org.jboss.logmanager.handlers.UncloseableOutputStream v3;
java.nio.charset.Charset v4;
java.io.OutputStreamWriter v5;
org.jboss.logmanager.handlers.OutputStreamHandler v0;
org.jboss.logmanager.handlers.UninterruptibleOutputStream v2;
v0 := @this: org.jboss.logmanager.handlers.OutputStreamHandler;
v1 := @parameter0: java.io.OutputStream;
if v1 != null goto label1;
return null;
label1:
v2 = new org.jboss.logmanager.handlers.UninterruptibleOutputStream;
v3 = new org.jboss.logmanager.handlers.UncloseableOutputStream;
specialinvoke v3.<org.jboss.logmanager.handlers.UncloseableOutputStream: void <init>(java.io.OutputStream)>(v1);
specialinvoke v2.<org.jboss.logmanager.handlers.UninterruptibleOutputStream: void <init>(java.io.OutputStream)>(v3);
v4 = v0.<org.jboss.logmanager.handlers.OutputStreamHandler: java.nio.charset.Charset charset>;
if v4 != null goto label2;
v5 = new java.io.OutputStreamWriter;
specialinvoke v5.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(v2);
goto label3;
label2:
v5 = new java.io.OutputStreamWriter;
specialinvoke v5.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>(v2, v4);
label3:
return v5;
}
}