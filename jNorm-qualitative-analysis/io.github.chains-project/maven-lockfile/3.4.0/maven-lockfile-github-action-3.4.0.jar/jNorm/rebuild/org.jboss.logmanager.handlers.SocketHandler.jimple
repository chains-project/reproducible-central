public class org.jboss.logmanager.handlers.SocketHandler extends org.jboss.logmanager.ExtHandler
{
public static final int DEFAULT_PORT;
private final java.lang.Object outputLock;
private org.jboss.logmanager.handlers.ClientSocketFactory clientSocketFactory;
private javax.net.SocketFactory socketFactory;
private java.net.InetAddress address;
private int port;
private org.jboss.logmanager.handlers.SocketHandler$Protocol protocol;
private boolean blockOnReconnect;
private java.io.Writer writer;
private boolean initialize;
public void <init>() throws java.net.UnknownHostException
{
java.net.InetAddress v1;
org.jboss.logmanager.handlers.SocketHandler v0;
v0 := @this: org.jboss.logmanager.handlers.SocketHandler;
v1 = staticinvoke <java.net.InetAddress: java.net.InetAddress getLocalHost()>();
specialinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: void <init>(java.net.InetAddress,int)>(v1, 4560);
return;
}
public void <init>(java.lang.String, int) throws java.net.UnknownHostException
{
java.net.InetAddress v3;
int v2;
org.jboss.logmanager.handlers.SocketHandler v0;
java.lang.String v1;
v0 := @this: org.jboss.logmanager.handlers.SocketHandler;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(v1);
specialinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: void <init>(java.net.InetAddress,int)>(v3, v2);
return;
}
public void <init>(java.net.InetAddress, int)
{
java.net.InetAddress v1;
int v2;
org.jboss.logmanager.handlers.SocketHandler v0;
org.jboss.logmanager.handlers.SocketHandler$Protocol v3;
v0 := @this: org.jboss.logmanager.handlers.SocketHandler;
v1 := @parameter0: java.net.InetAddress;
v2 := @parameter1: int;
v3 = <org.jboss.logmanager.handlers.SocketHandler$Protocol: org.jboss.logmanager.handlers.SocketHandler$Protocol TCP>;
specialinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: void <init>(org.jboss.logmanager.handlers.SocketHandler$Protocol,java.net.InetAddress,int)>(v3, v1, v2);
return;
}
public void <init>(org.jboss.logmanager.handlers.SocketHandler$Protocol, java.lang.String, int) throws java.net.UnknownHostException
{
java.net.InetAddress v4;
int v3;
org.jboss.logmanager.handlers.SocketHandler v0;
org.jboss.logmanager.handlers.SocketHandler$Protocol v1;
java.lang.String v2;
v0 := @this: org.jboss.logmanager.handlers.SocketHandler;
v1 := @parameter0: org.jboss.logmanager.handlers.SocketHandler$Protocol;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: int;
v4 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(v2);
specialinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: void <init>(org.jboss.logmanager.handlers.SocketHandler$Protocol,java.net.InetAddress,int)>(v1, v4, v3);
return;
}
public void <init>(org.jboss.logmanager.handlers.SocketHandler$Protocol, java.net.InetAddress, int)
{
java.net.InetAddress v2;
int v3;
org.jboss.logmanager.handlers.SocketHandler v0;
org.jboss.logmanager.handlers.SocketHandler$Protocol v1;
v0 := @this: org.jboss.logmanager.handlers.SocketHandler;
v1 := @parameter0: org.jboss.logmanager.handlers.SocketHandler$Protocol;
v2 := @parameter1: java.net.InetAddress;
v3 := @parameter2: int;
specialinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: void <init>(javax.net.SocketFactory,org.jboss.logmanager.handlers.SocketHandler$Protocol,java.net.InetAddress,int)>(null, v1, v2, v3);
return;
}
public void <init>(javax.net.SocketFactory, org.jboss.logmanager.handlers.SocketHandler$Protocol, java.lang.String, int) throws java.net.UnknownHostException
{
java.net.InetAddress v5;
javax.net.SocketFactory v1;
int v4;
org.jboss.logmanager.handlers.SocketHandler v0;
org.jboss.logmanager.handlers.SocketHandler$Protocol v2;
java.lang.String v3;
v0 := @this: org.jboss.logmanager.handlers.SocketHandler;
v1 := @parameter0: javax.net.SocketFactory;
v2 := @parameter1: org.jboss.logmanager.handlers.SocketHandler$Protocol;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: int;
v5 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(v3);
specialinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: void <init>(javax.net.SocketFactory,org.jboss.logmanager.handlers.SocketHandler$Protocol,java.net.InetAddress,int)>(v1, v2, v5, v4);
return;
}
public void <init>(javax.net.SocketFactory, org.jboss.logmanager.handlers.SocketHandler$Protocol, java.net.InetAddress, int)
{
java.net.InetAddress v3;
javax.net.SocketFactory v1;
int v4;
org.jboss.logmanager.handlers.SocketHandler v0;
org.jboss.logmanager.handlers.SocketHandler$Protocol v2, v6;
java.lang.Object v5;
v0 := @this: org.jboss.logmanager.handlers.SocketHandler;
v1 := @parameter0: javax.net.SocketFactory;
v2 := @parameter1: org.jboss.logmanager.handlers.SocketHandler$Protocol;
v3 := @parameter2: java.net.InetAddress;
v4 := @parameter3: int;
specialinvoke v0.<org.jboss.logmanager.ExtHandler: void <init>()>();
v5 = new java.lang.Object;
specialinvoke v5.<java.lang.Object: void <init>()>();
v0.<org.jboss.logmanager.handlers.SocketHandler: java.lang.Object outputLock> = v5;
v0.<org.jboss.logmanager.handlers.SocketHandler: javax.net.SocketFactory socketFactory> = v1;
v0.<org.jboss.logmanager.handlers.SocketHandler: org.jboss.logmanager.handlers.ClientSocketFactory clientSocketFactory> = null;
v0.<org.jboss.logmanager.handlers.SocketHandler: java.net.InetAddress address> = v3;
v0.<org.jboss.logmanager.handlers.SocketHandler: int port> = v4;
if v2 != null goto label1;
v6 = <org.jboss.logmanager.handlers.SocketHandler$Protocol: org.jboss.logmanager.handlers.SocketHandler$Protocol TCP>;
goto label2;
label1:
v6 = v2;
label2:
v0.<org.jboss.logmanager.handlers.SocketHandler: org.jboss.logmanager.handlers.SocketHandler$Protocol protocol> = v6;
v0.<org.jboss.logmanager.handlers.SocketHandler: boolean initialize> = 1;
v0.<org.jboss.logmanager.handlers.SocketHandler: java.io.Writer writer> = null;
v0.<org.jboss.logmanager.handlers.SocketHandler: boolean blockOnReconnect> = 0;
return;
}
public void <init>(org.jboss.logmanager.handlers.ClientSocketFactory, org.jboss.logmanager.handlers.SocketHandler$Protocol)
{
java.net.InetAddress v4;
org.jboss.logmanager.handlers.ClientSocketFactory v1;
int v5;
org.jboss.logmanager.handlers.SocketHandler v0;
org.jboss.logmanager.handlers.SocketHandler$Protocol v2, v6;
java.lang.Object v3;
v0 := @this: org.jboss.logmanager.handlers.SocketHandler;
v1 := @parameter0: org.jboss.logmanager.handlers.ClientSocketFactory;
v2 := @parameter1: org.jboss.logmanager.handlers.SocketHandler$Protocol;
specialinvoke v0.<org.jboss.logmanager.ExtHandler: void <init>()>();
v3 = new java.lang.Object;
specialinvoke v3.<java.lang.Object: void <init>()>();
v0.<org.jboss.logmanager.handlers.SocketHandler: java.lang.Object outputLock> = v3;
v0.<org.jboss.logmanager.handlers.SocketHandler: org.jboss.logmanager.handlers.ClientSocketFactory clientSocketFactory> = v1;
if v1 == null goto label1;
v4 = interfaceinvoke v1.<org.jboss.logmanager.handlers.ClientSocketFactory: java.net.InetAddress getAddress()>();
v0.<org.jboss.logmanager.handlers.SocketHandler: java.net.InetAddress address> = v4;
v5 = interfaceinvoke v1.<org.jboss.logmanager.handlers.ClientSocketFactory: int getPort()>();
v0.<org.jboss.logmanager.handlers.SocketHandler: int port> = v5;
label1:
if v2 != null goto label2;
v6 = <org.jboss.logmanager.handlers.SocketHandler$Protocol: org.jboss.logmanager.handlers.SocketHandler$Protocol TCP>;
goto label3;
label2:
v6 = v2;
label3:
v0.<org.jboss.logmanager.handlers.SocketHandler: org.jboss.logmanager.handlers.SocketHandler$Protocol protocol> = v6;
v0.<org.jboss.logmanager.handlers.SocketHandler: boolean initialize> = 1;
v0.<org.jboss.logmanager.handlers.SocketHandler: java.io.Writer writer> = null;
v0.<org.jboss.logmanager.handlers.SocketHandler: boolean blockOnReconnect> = 0;
return;
}
protected void doPublish(org.jboss.logmanager.ExtLogRecord)
{
java.lang.Throwable v10;
org.jboss.logmanager.ExtLogRecord v1;
java.util.logging.Formatter v2;
java.lang.Exception v11, v4;
java.io.Writer v8, v9;
org.jboss.logmanager.handlers.SocketHandler v0;
java.lang.Object v6;
java.lang.String v3;
boolean v5, v7;
v0 := @this: org.jboss.logmanager.handlers.SocketHandler;
v1 := @parameter0: org.jboss.logmanager.ExtLogRecord;
v2 = virtualinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: java.util.logging.Formatter getFormatter()>();
label01:
v3 = virtualinvoke v2.<java.util.logging.Formatter: java.lang.String format(java.util.logging.LogRecord)>(v1);
label02:
goto label04;
label03:
v4 := @caughtexception;
virtualinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: void reportError(java.lang.String,java.lang.Exception,int)>("Could not format message", v4, 5);
return;
label04:
v5 = virtualinvoke v3.<java.lang.String: boolean isEmpty()>();
if v5 == 0 goto label05;
return;
label05:
v6 = v0.<org.jboss.logmanager.handlers.SocketHandler: java.lang.Object outputLock>;
entermonitor v6;
label06:
v7 = v0.<org.jboss.logmanager.handlers.SocketHandler: boolean initialize>;
if v7 == 0 goto label07;
specialinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: void initialize()>();
v0.<org.jboss.logmanager.handlers.SocketHandler: boolean initialize> = 0;
label07:
v8 = v0.<org.jboss.logmanager.handlers.SocketHandler: java.io.Writer writer>;
if v8 != null goto label09;
exitmonitor v6;
label08:
return;
label09:
v9 = v0.<org.jboss.logmanager.handlers.SocketHandler: java.io.Writer writer>;
virtualinvoke v9.<java.io.Writer: void write(java.lang.String)>(v3);
specialinvoke v0.<org.jboss.logmanager.ExtHandler: void doPublish(org.jboss.logmanager.ExtLogRecord)>(v1);
exitmonitor v6;
label10:
goto label13;
label11:
v10 := @caughtexception;
exitmonitor v6;
throw v10;
label12:
v11 := @caughtexception;
virtualinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: void reportError(java.lang.String,java.lang.Exception,int)>("Error writing log message", v11, 1);
label13:
return;
catch java.lang.Exception from label01 to label02 with label03;
catch java.lang.Throwable from label06 to label08 with label11;
catch java.lang.Throwable from label09 to label10 with label11;
catch java.lang.Exception from label05 to label08 with label12;
catch java.lang.Exception from label09 to label12 with label12;
}
public void flush()
{
java.lang.Throwable v3;
java.io.Writer v2;
org.jboss.logmanager.handlers.SocketHandler v0;
java.lang.Object v1;
v0 := @this: org.jboss.logmanager.handlers.SocketHandler;
v1 = v0.<org.jboss.logmanager.handlers.SocketHandler: java.lang.Object outputLock>;
entermonitor v1;
label1:
v2 = v0.<org.jboss.logmanager.handlers.SocketHandler: java.io.Writer writer>;
specialinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: void safeFlush(java.io.Flushable)>(v2);
exitmonitor v1;
label2:
goto label4;
label3:
v3 := @caughtexception;
exitmonitor v1;
throw v3;
label4:
specialinvoke v0.<org.jboss.logmanager.ExtHandler: void flush()>();
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void close() throws java.lang.SecurityException
{
java.lang.Throwable v3;
java.io.Writer v2;
org.jboss.logmanager.handlers.SocketHandler v0;
java.lang.Object v1;
v0 := @this: org.jboss.logmanager.handlers.SocketHandler;
v1 = v0.<org.jboss.logmanager.handlers.SocketHandler: java.lang.Object outputLock>;
entermonitor v1;
label1:
v2 = v0.<org.jboss.logmanager.handlers.SocketHandler: java.io.Writer writer>;
specialinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: void safeClose(java.io.Closeable)>(v2);
v0.<org.jboss.logmanager.handlers.SocketHandler: java.io.Writer writer> = null;
v0.<org.jboss.logmanager.handlers.SocketHandler: boolean initialize> = 1;
exitmonitor v1;
label2:
goto label4;
label3:
v3 := @caughtexception;
exitmonitor v1;
throw v3;
label4:
specialinvoke v0.<org.jboss.logmanager.ExtHandler: void close()>();
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public java.net.InetAddress getAddress()
{
java.net.InetAddress v1;
org.jboss.logmanager.handlers.SocketHandler v0;
v0 := @this: org.jboss.logmanager.handlers.SocketHandler;
v1 = v0.<org.jboss.logmanager.handlers.SocketHandler: java.net.InetAddress address>;
return v1;
}
public void setAddress(java.net.InetAddress)
{
java.lang.Throwable v5;
java.net.InetAddress v1, v3;
org.jboss.logmanager.handlers.SocketHandler v0;
java.lang.Object v2;
boolean v4;
v0 := @this: org.jboss.logmanager.handlers.SocketHandler;
v1 := @parameter0: java.net.InetAddress;
v2 = v0.<org.jboss.logmanager.handlers.SocketHandler: java.lang.Object outputLock>;
entermonitor v2;
label1:
v3 = v0.<org.jboss.logmanager.handlers.SocketHandler: java.net.InetAddress address>;
v4 = virtualinvoke v3.<java.net.InetAddress: boolean equals(java.lang.Object)>(v1);
if v4 != 0 goto label2;
v0.<org.jboss.logmanager.handlers.SocketHandler: boolean initialize> = 1;
v0.<org.jboss.logmanager.handlers.SocketHandler: org.jboss.logmanager.handlers.ClientSocketFactory clientSocketFactory> = null;
label2:
v0.<org.jboss.logmanager.handlers.SocketHandler: java.net.InetAddress address> = v1;
exitmonitor v2;
label3:
goto label5;
label4:
v5 := @caughtexception;
exitmonitor v2;
throw v5;
label5:
return;
catch java.lang.Throwable from label1 to label3 with label4;
}
public void setHostname(java.lang.String) throws java.net.UnknownHostException
{
java.net.InetAddress v2;
org.jboss.logmanager.handlers.SocketHandler v0;
java.lang.String v1;
v0 := @this: org.jboss.logmanager.handlers.SocketHandler;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(v1);
virtualinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: void setAddress(java.net.InetAddress)>(v2);
return;
}
public boolean isBlockOnReconnect()
{
java.lang.Throwable v3;
org.jboss.logmanager.handlers.SocketHandler v0;
java.lang.Object v1;
boolean v2;
v0 := @this: org.jboss.logmanager.handlers.SocketHandler;
v1 = v0.<org.jboss.logmanager.handlers.SocketHandler: java.lang.Object outputLock>;
entermonitor v1;
label1:
v2 = v0.<org.jboss.logmanager.handlers.SocketHandler: boolean blockOnReconnect>;
exitmonitor v1;
label2:
return v2;
label3:
v3 := @caughtexception;
exitmonitor v1;
throw v3;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void setBlockOnReconnect(boolean)
{
java.lang.Throwable v3;
org.jboss.logmanager.handlers.SocketHandler v0;
java.lang.Object v2;
boolean v1;
v0 := @this: org.jboss.logmanager.handlers.SocketHandler;
v1 := @parameter0: boolean;
v2 = v0.<org.jboss.logmanager.handlers.SocketHandler: java.lang.Object outputLock>;
entermonitor v2;
label1:
v0.<org.jboss.logmanager.handlers.SocketHandler: boolean blockOnReconnect> = v1;
v0.<org.jboss.logmanager.handlers.SocketHandler: boolean initialize> = 1;
exitmonitor v2;
label2:
goto label4;
label3:
v3 := @caughtexception;
exitmonitor v2;
throw v3;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public org.jboss.logmanager.handlers.SocketHandler$Protocol getProtocol()
{
org.jboss.logmanager.handlers.SocketHandler v0;
org.jboss.logmanager.handlers.SocketHandler$Protocol v1;
v0 := @this: org.jboss.logmanager.handlers.SocketHandler;
v1 = v0.<org.jboss.logmanager.handlers.SocketHandler: org.jboss.logmanager.handlers.SocketHandler$Protocol protocol>;
return v1;
}
public void setProtocol(org.jboss.logmanager.handlers.SocketHandler$Protocol)
{
java.lang.Throwable v5;
org.jboss.logmanager.handlers.SocketHandler v0;
org.jboss.logmanager.handlers.SocketHandler$Protocol v1, v3, v4;
java.lang.Object v2;
v0 := @this: org.jboss.logmanager.handlers.SocketHandler;
v1 := @parameter0: org.jboss.logmanager.handlers.SocketHandler$Protocol;
v2 = v0.<org.jboss.logmanager.handlers.SocketHandler: java.lang.Object outputLock>;
entermonitor v2;
label1:
if v1 != null goto label2;
v3 = <org.jboss.logmanager.handlers.SocketHandler$Protocol: org.jboss.logmanager.handlers.SocketHandler$Protocol TCP>;
v0.<org.jboss.logmanager.handlers.SocketHandler: org.jboss.logmanager.handlers.SocketHandler$Protocol protocol> = v3;
label2:
v4 = v0.<org.jboss.logmanager.handlers.SocketHandler: org.jboss.logmanager.handlers.SocketHandler$Protocol protocol>;
if v4 == v1 goto label3;
v0.<org.jboss.logmanager.handlers.SocketHandler: javax.net.SocketFactory socketFactory> = null;
v0.<org.jboss.logmanager.handlers.SocketHandler: boolean initialize> = 1;
label3:
v0.<org.jboss.logmanager.handlers.SocketHandler: org.jboss.logmanager.handlers.SocketHandler$Protocol protocol> = v1;
exitmonitor v2;
label4:
goto label6;
label5:
v5 := @caughtexception;
exitmonitor v2;
throw v5;
label6:
return;
catch java.lang.Throwable from label1 to label4 with label5;
}
public int getPort()
{
int v1;
org.jboss.logmanager.handlers.SocketHandler v0;
v0 := @this: org.jboss.logmanager.handlers.SocketHandler;
v1 = v0.<org.jboss.logmanager.handlers.SocketHandler: int port>;
return v1;
}
public void setPort(int)
{
java.lang.Throwable v4;
int v1, v3;
org.jboss.logmanager.handlers.SocketHandler v0;
java.lang.Object v2;
v0 := @this: org.jboss.logmanager.handlers.SocketHandler;
v1 := @parameter0: int;
v2 = v0.<org.jboss.logmanager.handlers.SocketHandler: java.lang.Object outputLock>;
entermonitor v2;
label1:
v3 = v0.<org.jboss.logmanager.handlers.SocketHandler: int port>;
if v3 == v1 goto label2;
v0.<org.jboss.logmanager.handlers.SocketHandler: boolean initialize> = 1;
v0.<org.jboss.logmanager.handlers.SocketHandler: org.jboss.logmanager.handlers.ClientSocketFactory clientSocketFactory> = null;
label2:
v0.<org.jboss.logmanager.handlers.SocketHandler: int port> = v1;
exitmonitor v2;
label3:
goto label5;
label4:
v4 := @caughtexception;
exitmonitor v2;
throw v4;
label5:
return;
catch java.lang.Throwable from label1 to label3 with label4;
}
public void setSocketFactory(javax.net.SocketFactory)
{
java.lang.Throwable v3;
javax.net.SocketFactory v1;
org.jboss.logmanager.handlers.SocketHandler v0;
java.lang.Object v2;
v0 := @this: org.jboss.logmanager.handlers.SocketHandler;
v1 := @parameter0: javax.net.SocketFactory;
v2 = v0.<org.jboss.logmanager.handlers.SocketHandler: java.lang.Object outputLock>;
entermonitor v2;
label1:
v0.<org.jboss.logmanager.handlers.SocketHandler: javax.net.SocketFactory socketFactory> = v1;
v0.<org.jboss.logmanager.handlers.SocketHandler: org.jboss.logmanager.handlers.ClientSocketFactory clientSocketFactory> = null;
v0.<org.jboss.logmanager.handlers.SocketHandler: boolean initialize> = 1;
exitmonitor v2;
label2:
goto label4;
label3:
v3 := @caughtexception;
exitmonitor v2;
throw v3;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void setClientSocketFactory(org.jboss.logmanager.handlers.ClientSocketFactory)
{
java.lang.Throwable v3;
org.jboss.logmanager.handlers.ClientSocketFactory v1;
org.jboss.logmanager.handlers.SocketHandler v0;
java.lang.Object v2;
v0 := @this: org.jboss.logmanager.handlers.SocketHandler;
v1 := @parameter0: org.jboss.logmanager.handlers.ClientSocketFactory;
v2 = v0.<org.jboss.logmanager.handlers.SocketHandler: java.lang.Object outputLock>;
entermonitor v2;
label1:
v0.<org.jboss.logmanager.handlers.SocketHandler: org.jboss.logmanager.handlers.ClientSocketFactory clientSocketFactory> = v1;
v0.<org.jboss.logmanager.handlers.SocketHandler: boolean initialize> = 1;
exitmonitor v2;
label2:
goto label4;
label3:
v3 := @caughtexception;
exitmonitor v2;
throw v3;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
private void initialize()
{
java.io.OutputStream v2;
java.lang.Throwable v11;
java.io.Writer v1, v10, v12, v3, v8;
org.jboss.logmanager.handlers.SocketHandler v0;
java.io.OutputStreamWriter v6, v7;
java.lang.String v4;
java.io.UnsupportedEncodingException v9;
org.jboss.logmanager.handlers.UninterruptibleOutputStream v5;
v0 := @this: org.jboss.logmanager.handlers.SocketHandler;
v1 = v0.<org.jboss.logmanager.handlers.SocketHandler: java.io.Writer writer>;
label01:
if v1 == null goto label02;
specialinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: void writeTail(java.io.Writer)>(v1);
specialinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: void safeFlush(java.io.Flushable)>(v1);
label02:
specialinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: void safeClose(java.io.Closeable)>(v1);
v2 = specialinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: java.io.OutputStream createOutputStream()>();
if v2 != null goto label04;
label03:
specialinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: void safeClose(java.io.Closeable)>(v1);
v3 = v0.<org.jboss.logmanager.handlers.SocketHandler: java.io.Writer writer>;
specialinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: void safeClose(java.io.Closeable)>(v3);
return;
label04:
v4 = virtualinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: java.lang.String getEncoding()>();
v5 = new org.jboss.logmanager.handlers.UninterruptibleOutputStream;
specialinvoke v5.<org.jboss.logmanager.handlers.UninterruptibleOutputStream: void <init>(java.io.OutputStream)>(v2);
if v4 != null goto label05;
v6 = new java.io.OutputStreamWriter;
specialinvoke v6.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(v5);
v0.<org.jboss.logmanager.handlers.SocketHandler: java.io.Writer writer> = v6;
goto label06;
label05:
v7 = new java.io.OutputStreamWriter;
specialinvoke v7.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(v5, v4);
v0.<org.jboss.logmanager.handlers.SocketHandler: java.io.Writer writer> = v7;
label06:
v8 = v0.<org.jboss.logmanager.handlers.SocketHandler: java.io.Writer writer>;
specialinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: void writeHead(java.io.Writer)>(v8);
label07:
specialinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: void safeClose(java.io.Closeable)>(v1);
goto label11;
label08:
v9 := @caughtexception;
virtualinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: void reportError(java.lang.String,java.lang.Exception,int)>("Error opening", v9, 4);
label09:
specialinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: void safeClose(java.io.Closeable)>(v1);
v10 = v0.<org.jboss.logmanager.handlers.SocketHandler: java.io.Writer writer>;
specialinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: void safeClose(java.io.Closeable)>(v10);
goto label11;
label10:
v11 := @caughtexception;
specialinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: void safeClose(java.io.Closeable)>(v1);
v12 = v0.<org.jboss.logmanager.handlers.SocketHandler: java.io.Writer writer>;
specialinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: void safeClose(java.io.Closeable)>(v12);
throw v11;
label11:
return;
catch java.io.UnsupportedEncodingException from label01 to label03 with label08;
catch java.io.UnsupportedEncodingException from label04 to label07 with label08;
catch java.lang.Throwable from label01 to label03 with label10;
catch java.lang.Throwable from label04 to label07 with label10;
catch java.lang.Throwable from label08 to label09 with label10;
}
private java.io.OutputStream createOutputStream()
{
org.jboss.logmanager.handlers.UdpOutputStream v6;
org.jboss.logmanager.handlers.SocketHandler$Protocol v4, v5;
java.io.IOException v9;
org.jboss.logmanager.handlers.TcpOutputStream v7;
java.net.InetAddress v1;
org.jboss.logmanager.handlers.ClientSocketFactory v3;
int v2;
org.jboss.logmanager.handlers.SocketHandler v0;
boolean v8;
v0 := @this: org.jboss.logmanager.handlers.SocketHandler;
v1 = v0.<org.jboss.logmanager.handlers.SocketHandler: java.net.InetAddress address>;
if v1 != null goto label1;
v2 = v0.<org.jboss.logmanager.handlers.SocketHandler: int port>;
if v2 < 0 goto label6;
label1:
v3 = specialinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: org.jboss.logmanager.handlers.ClientSocketFactory getClientSocketFactory()>();
v4 = v0.<org.jboss.logmanager.handlers.SocketHandler: org.jboss.logmanager.handlers.SocketHandler$Protocol protocol>;
v5 = <org.jboss.logmanager.handlers.SocketHandler$Protocol: org.jboss.logmanager.handlers.SocketHandler$Protocol UDP>;
if v4 != v5 goto label3;
v6 = new org.jboss.logmanager.handlers.UdpOutputStream;
specialinvoke v6.<org.jboss.logmanager.handlers.UdpOutputStream: void <init>(org.jboss.logmanager.handlers.ClientSocketFactory)>(v3);
label2:
return v6;
label3:
v7 = new org.jboss.logmanager.handlers.TcpOutputStream;
v8 = v0.<org.jboss.logmanager.handlers.SocketHandler: boolean blockOnReconnect>;
specialinvoke v7.<org.jboss.logmanager.handlers.TcpOutputStream: void <init>(org.jboss.logmanager.handlers.ClientSocketFactory,boolean)>(v3, v8);
label4:
return v7;
label5:
v9 := @caughtexception;
virtualinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: void reportError(java.lang.String,java.lang.Exception,int)>("Failed to create socket output stream", v9, 4);
label6:
return null;
catch java.io.IOException from label1 to label2 with label5;
catch java.io.IOException from label3 to label4 with label5;
}
private org.jboss.logmanager.handlers.ClientSocketFactory getClientSocketFactory()
{
java.lang.Throwable v19;
java.lang.IllegalStateException v6;
java.net.InetAddress v11, v14, v17, v4;
int v12, v15, v18, v5;
org.jboss.logmanager.handlers.SocketHandler$Protocol v8, v9;
javax.net.SocketFactory v10, v16, v7;
org.jboss.logmanager.handlers.ClientSocketFactory v13, v2, v3;
org.jboss.logmanager.handlers.SocketHandler v0;
java.lang.Object v1;
v0 := @this: org.jboss.logmanager.handlers.SocketHandler;
v1 = v0.<org.jboss.logmanager.handlers.SocketHandler: java.lang.Object outputLock>;
entermonitor v1;
label01:
v2 = v0.<org.jboss.logmanager.handlers.SocketHandler: org.jboss.logmanager.handlers.ClientSocketFactory clientSocketFactory>;
if v2 == null goto label03;
v3 = v0.<org.jboss.logmanager.handlers.SocketHandler: org.jboss.logmanager.handlers.ClientSocketFactory clientSocketFactory>;
exitmonitor v1;
label02:
return v3;
label03:
v4 = v0.<org.jboss.logmanager.handlers.SocketHandler: java.net.InetAddress address>;
if v4 == null goto label04;
v5 = v0.<org.jboss.logmanager.handlers.SocketHandler: int port>;
if v5 > 0 goto label05;
label04:
v6 = new java.lang.IllegalStateException;
specialinvoke v6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("An address and port greater than 0 is required.");
throw v6;
label05:
v7 = v0.<org.jboss.logmanager.handlers.SocketHandler: javax.net.SocketFactory socketFactory>;
if v7 != null goto label07;
v8 = v0.<org.jboss.logmanager.handlers.SocketHandler: org.jboss.logmanager.handlers.SocketHandler$Protocol protocol>;
v9 = <org.jboss.logmanager.handlers.SocketHandler$Protocol: org.jboss.logmanager.handlers.SocketHandler$Protocol SSL_TCP>;
if v8 != v9 goto label06;
v10 = staticinvoke <javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>();
v11 = v0.<org.jboss.logmanager.handlers.SocketHandler: java.net.InetAddress address>;
v12 = v0.<org.jboss.logmanager.handlers.SocketHandler: int port>;
v13 = staticinvoke <org.jboss.logmanager.handlers.ClientSocketFactory: org.jboss.logmanager.handlers.ClientSocketFactory of(javax.net.SocketFactory,java.net.InetAddress,int)>(v10, v11, v12);
goto label08;
label06:
v14 = v0.<org.jboss.logmanager.handlers.SocketHandler: java.net.InetAddress address>;
v15 = v0.<org.jboss.logmanager.handlers.SocketHandler: int port>;
v13 = staticinvoke <org.jboss.logmanager.handlers.ClientSocketFactory: org.jboss.logmanager.handlers.ClientSocketFactory of(java.net.InetAddress,int)>(v14, v15);
goto label08;
label07:
v16 = v0.<org.jboss.logmanager.handlers.SocketHandler: javax.net.SocketFactory socketFactory>;
v17 = v0.<org.jboss.logmanager.handlers.SocketHandler: java.net.InetAddress address>;
v18 = v0.<org.jboss.logmanager.handlers.SocketHandler: int port>;
v13 = staticinvoke <org.jboss.logmanager.handlers.ClientSocketFactory: org.jboss.logmanager.handlers.ClientSocketFactory of(javax.net.SocketFactory,java.net.InetAddress,int)>(v16, v17, v18);
label08:
exitmonitor v1;
label09:
return v13;
label10:
v19 := @caughtexception;
exitmonitor v1;
throw v19;
catch java.lang.Throwable from label01 to label02 with label10;
catch java.lang.Throwable from label03 to label09 with label10;
}
private void writeHead(java.io.Writer)
{
java.io.Writer v1;
org.jboss.logmanager.handlers.SocketHandler v0;
java.lang.String v3;
java.util.logging.Formatter v2;
java.lang.Exception v4;
v0 := @this: org.jboss.logmanager.handlers.SocketHandler;
v1 := @parameter0: java.io.Writer;
label1:
v2 = virtualinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: java.util.logging.Formatter getFormatter()>();
if v2 == null goto label4;
v3 = virtualinvoke v2.<java.util.logging.Formatter: java.lang.String getHead(java.util.logging.Handler)>(v0);
virtualinvoke v1.<java.io.Writer: void write(java.lang.String)>(v3);
label2:
goto label4;
label3:
v4 := @caughtexception;
virtualinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: void reportError(java.lang.String,java.lang.Exception,int)>("Error writing section header", v4, 1);
label4:
return;
catch java.lang.Exception from label1 to label2 with label3;
}
private void writeTail(java.io.Writer)
{
java.io.Writer v1;
org.jboss.logmanager.handlers.SocketHandler v0;
java.lang.String v3;
java.util.logging.Formatter v2;
java.lang.Exception v4;
v0 := @this: org.jboss.logmanager.handlers.SocketHandler;
v1 := @parameter0: java.io.Writer;
label1:
v2 = virtualinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: java.util.logging.Formatter getFormatter()>();
if v2 == null goto label4;
v3 = virtualinvoke v2.<java.util.logging.Formatter: java.lang.String getTail(java.util.logging.Handler)>(v0);
virtualinvoke v1.<java.io.Writer: void write(java.lang.String)>(v3);
label2:
goto label4;
label3:
v4 := @caughtexception;
virtualinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: void reportError(java.lang.String,java.lang.Exception,int)>("Error writing section tail", v4, 1);
label4:
return;
catch java.lang.Exception from label1 to label2 with label3;
}
private void safeClose(java.io.Closeable)
{
java.lang.Throwable v3;
java.io.Closeable v1;
org.jboss.logmanager.handlers.SocketHandler v0;
java.lang.Exception v2;
v0 := @this: org.jboss.logmanager.handlers.SocketHandler;
v1 := @parameter0: java.io.Closeable;
label1:
if v1 == null goto label5;
interfaceinvoke v1.<java.io.Closeable: void close()>();
label2:
goto label5;
label3:
v2 := @caughtexception;
virtualinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: void reportError(java.lang.String,java.lang.Exception,int)>("Error closing resource", v2, 3);
goto label5;
label4:
v3 := @caughtexception;
label5:
return;
catch java.lang.Exception from label1 to label2 with label3;
catch java.lang.Throwable from label1 to label2 with label4;
}
private void safeFlush(java.io.Flushable)
{
java.lang.Throwable v3;
org.jboss.logmanager.handlers.SocketHandler v0;
java.lang.Exception v2;
java.io.Flushable v1;
v0 := @this: org.jboss.logmanager.handlers.SocketHandler;
v1 := @parameter0: java.io.Flushable;
label1:
if v1 == null goto label5;
interfaceinvoke v1.<java.io.Flushable: void flush()>();
label2:
goto label5;
label3:
v2 := @caughtexception;
virtualinvoke v0.<org.jboss.logmanager.handlers.SocketHandler: void reportError(java.lang.String,java.lang.Exception,int)>("Error on flush", v2, 2);
goto label5;
label4:
v3 := @caughtexception;
label5:
return;
catch java.lang.Exception from label1 to label2 with label3;
catch java.lang.Throwable from label1 to label2 with label4;
}
}