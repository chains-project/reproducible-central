public class org.jboss.threads.Messages_$logger extends org.jboss.logging.DelegatingBasicLogger implements org.jboss.threads.Messages, org.jboss.logging.BasicLogger, java.io.Serializable
{
private static final long serialVersionUID;
private static final java.lang.String FQCN;
private static final java.util.Locale LOCALE;
public void <init>(org.jboss.logging.Logger)
{
org.jboss.threads.Messages_$logger v0;
org.jboss.logging.Logger v1;
v0 := @this: org.jboss.threads.Messages_$logger;
v1 := @parameter0: org.jboss.logging.Logger;
specialinvoke v0.<org.jboss.logging.DelegatingBasicLogger: void <init>(org.jboss.logging.Logger)>(v1);
return;
}
protected java.util.Locale getLoggingLocale()
{
org.jboss.threads.Messages_$logger v0;
java.util.Locale v1;
v0 := @this: org.jboss.threads.Messages_$logger;
v1 = <org.jboss.threads.Messages_$logger: java.util.Locale LOCALE>;
return v1;
}
public final void version(java.lang.String)
{
org.jboss.threads.Messages_$logger v0;
org.jboss.logging.Logger$Level v4;
org.jboss.logging.Logger v2;
java.lang.String v1, v3, v5;
v0 := @this: org.jboss.threads.Messages_$logger;
v1 := @parameter0: java.lang.String;
v2 = v0.<org.jboss.logging.DelegatingBasicLogger: org.jboss.logging.Logger log>;
v3 = <org.jboss.threads.Messages_$logger: java.lang.String FQCN>;
v4 = <org.jboss.logging.Logger$Level: org.jboss.logging.Logger$Level INFO>;
v5 = virtualinvoke v0.<org.jboss.threads.Messages_$logger: java.lang.String version$str()>();
virtualinvoke v2.<org.jboss.logging.Logger: void logf(java.lang.String,org.jboss.logging.Logger$Level,java.lang.Throwable,java.lang.String,java.lang.Object)>(v3, v4, null, v5, v1);
return;
}
protected java.lang.String version$str()
{
org.jboss.threads.Messages_$logger v0;
v0 := @this: org.jboss.threads.Messages_$logger;
return "JBoss Threads version %s";
}
protected java.lang.String shutDownInitiated$str()
{
org.jboss.threads.Messages_$logger v0;
v0 := @this: org.jboss.threads.Messages_$logger;
return "JBTHR00009: Executor has been shut down";
}
public final org.jboss.threads.StoppedExecutorException shutDownInitiated()
{
org.jboss.threads.Messages_$logger v0;
java.lang.Object[] v4;
java.util.Locale v2;
java.lang.String v3, v5;
org.jboss.threads.StoppedExecutorException v1;
v0 := @this: org.jboss.threads.Messages_$logger;
v1 = new org.jboss.threads.StoppedExecutorException;
v2 = virtualinvoke v0.<org.jboss.threads.Messages_$logger: java.util.Locale getLoggingLocale()>();
v3 = virtualinvoke v0.<org.jboss.threads.Messages_$logger: java.lang.String shutDownInitiated$str()>();
v4 = newarray (java.lang.Object)[0];
v5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(v2, v3, v4);
specialinvoke v1.<org.jboss.threads.StoppedExecutorException: void <init>(java.lang.String)>(v5);
staticinvoke <org.jboss.threads.Messages_$logger: void _copyStackTraceMinusOne(java.lang.Throwable)>(v1);
return v1;
}
private static void _copyStackTraceMinusOne(java.lang.Throwable)
{
java.lang.Throwable v0;
java.lang.Object[] v3;
java.lang.StackTraceElement[] v1;
int v2;
v0 := @parameter0: java.lang.Throwable;
v1 = virtualinvoke v0.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();
v2 = lengthof v1;
v3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>(v1, 1, v2);
virtualinvoke v0.<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>(v3);
return;
}
protected java.lang.String cannotAwaitWithin$str()
{
org.jboss.threads.Messages_$logger v0;
v0 := @this: org.jboss.threads.Messages_$logger;
return "JBTHR00012: Cannot await termination of a thread pool from one of its own threads";
}
public final java.lang.IllegalStateException cannotAwaitWithin()
{
java.lang.IllegalStateException v1;
org.jboss.threads.Messages_$logger v0;
java.lang.Object[] v4;
java.util.Locale v2;
java.lang.String v3, v5;
v0 := @this: org.jboss.threads.Messages_$logger;
v1 = new java.lang.IllegalStateException;
v2 = virtualinvoke v0.<org.jboss.threads.Messages_$logger: java.util.Locale getLoggingLocale()>();
v3 = virtualinvoke v0.<org.jboss.threads.Messages_$logger: java.lang.String cannotAwaitWithin$str()>();
v4 = newarray (java.lang.Object)[0];
v5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(v2, v3, v4);
specialinvoke v1.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v5);
staticinvoke <org.jboss.threads.Messages_$logger: void _copyStackTraceMinusOne(java.lang.Throwable)>(v1);
return v1;
}
protected java.lang.String noInterruptHandlers$str()
{
org.jboss.threads.Messages_$logger v0;
v0 := @this: org.jboss.threads.Messages_$logger;
return "JBTHR00103: The current thread does not support interrupt handlers";
}
public final java.lang.IllegalStateException noInterruptHandlers()
{
java.lang.IllegalStateException v1;
org.jboss.threads.Messages_$logger v0;
java.lang.Object[] v4;
java.util.Locale v2;
java.lang.String v3, v5;
v0 := @this: org.jboss.threads.Messages_$logger;
v1 = new java.lang.IllegalStateException;
v2 = virtualinvoke v0.<org.jboss.threads.Messages_$logger: java.util.Locale getLoggingLocale()>();
v3 = virtualinvoke v0.<org.jboss.threads.Messages_$logger: java.lang.String noInterruptHandlers$str()>();
v4 = newarray (java.lang.Object)[0];
v5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(v2, v3, v4);
specialinvoke v1.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v5);
staticinvoke <org.jboss.threads.Messages_$logger: void _copyStackTraceMinusOne(java.lang.Throwable)>(v1);
return v1;
}
protected java.lang.String notShutDown$str()
{
org.jboss.threads.Messages_$logger v0;
v0 := @this: org.jboss.threads.Messages_$logger;
return "JBTHR00104: Executor is not shut down";
}
public final java.lang.IllegalStateException notShutDown()
{
java.lang.IllegalStateException v1;
org.jboss.threads.Messages_$logger v0;
java.lang.Object[] v4;
java.util.Locale v2;
java.lang.String v3, v5;
v0 := @this: org.jboss.threads.Messages_$logger;
v1 = new java.lang.IllegalStateException;
v2 = virtualinvoke v0.<org.jboss.threads.Messages_$logger: java.util.Locale getLoggingLocale()>();
v3 = virtualinvoke v0.<org.jboss.threads.Messages_$logger: java.lang.String notShutDown$str()>();
v4 = newarray (java.lang.Object)[0];
v5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(v2, v3, v4);
specialinvoke v1.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v5);
staticinvoke <org.jboss.threads.Messages_$logger: void _copyStackTraceMinusOne(java.lang.Throwable)>(v1);
return v1;
}
public final void interruptHandlerThrew(java.lang.Throwable, org.jboss.threads.InterruptHandler)
{
java.lang.Throwable v1;
org.jboss.threads.Messages_$logger v0;
org.jboss.logging.Logger$Level v5;
org.jboss.logging.Logger v3;
java.lang.String v4, v6;
org.jboss.threads.InterruptHandler v2;
v0 := @this: org.jboss.threads.Messages_$logger;
v1 := @parameter0: java.lang.Throwable;
v2 := @parameter1: org.jboss.threads.InterruptHandler;
v3 = v0.<org.jboss.logging.DelegatingBasicLogger: org.jboss.logging.Logger log>;
v4 = <org.jboss.threads.Messages_$logger: java.lang.String FQCN>;
v5 = <org.jboss.logging.Logger$Level: org.jboss.logging.Logger$Level ERROR>;
v6 = virtualinvoke v0.<org.jboss.threads.Messages_$logger: java.lang.String interruptHandlerThrew$str()>();
virtualinvoke v3.<org.jboss.logging.Logger: void logf(java.lang.String,org.jboss.logging.Logger$Level,java.lang.Throwable,java.lang.String,java.lang.Object)>(v4, v5, v1, v6, v2);
return;
}
protected java.lang.String interruptHandlerThrew$str()
{
org.jboss.threads.Messages_$logger v0;
v0 := @this: org.jboss.threads.Messages_$logger;
return "JBTHR00108: Interrupt handler %s threw an exception";
}
protected java.lang.String notAllowedContainerManaged$str()
{
org.jboss.threads.Messages_$logger v0;
v0 := @this: org.jboss.threads.Messages_$logger;
return "JBTHR00200: %s() not allowed on container-managed executor";
}
public final java.lang.SecurityException notAllowedContainerManaged(java.lang.String)
{
org.jboss.threads.Messages_$logger v0;
java.lang.Object[] v5;
java.util.Locale v3;
java.lang.SecurityException v2;
java.lang.String v1, v4, v6;
v0 := @this: org.jboss.threads.Messages_$logger;
v1 := @parameter0: java.lang.String;
v2 = new java.lang.SecurityException;
v3 = virtualinvoke v0.<org.jboss.threads.Messages_$logger: java.util.Locale getLoggingLocale()>();
v4 = virtualinvoke v0.<org.jboss.threads.Messages_$logger: java.lang.String notAllowedContainerManaged$str()>();
v5 = newarray (java.lang.Object)[1];
v5[0] = v1;
v6 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>(v3, v4, v5);
specialinvoke v2.<java.lang.SecurityException: void <init>(java.lang.String)>(v6);
staticinvoke <org.jboss.threads.Messages_$logger: void _copyStackTraceMinusOne(java.lang.Throwable)>(v2);
return v2;
}
static void <clinit>()
{
java.lang.Class v0;
java.lang.String v1;
java.util.Locale v2;
v0 = class "Lorg/jboss/threads/Messages_$logger;";
v1 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
<org.jboss.threads.Messages_$logger: java.lang.String FQCN> = v1;
v2 = <java.util.Locale: java.util.Locale ROOT>;
<org.jboss.threads.Messages_$logger: java.util.Locale LOCALE> = v2;
return;
}
}