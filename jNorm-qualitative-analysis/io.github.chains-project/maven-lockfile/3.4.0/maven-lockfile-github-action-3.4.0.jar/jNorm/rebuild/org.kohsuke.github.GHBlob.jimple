public class org.kohsuke.github.GHBlob extends java.lang.Object
{
private java.lang.String content;
private java.lang.String encoding;
private java.lang.String url;
private java.lang.String sha;
private long size;
public void <init>()
{
org.kohsuke.github.GHBlob v0;
v0 := @this: org.kohsuke.github.GHBlob;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public java.net.URL getUrl()
{
org.kohsuke.github.GHBlob v0;
java.lang.String v1;
java.net.URL v2;
v0 := @this: org.kohsuke.github.GHBlob;
v1 = v0.<org.kohsuke.github.GHBlob: java.lang.String url>;
v2 = staticinvoke <org.kohsuke.github.GitHubClient: java.net.URL parseURL(java.lang.String)>(v1);
return v2;
}
public java.lang.String getSha()
{
org.kohsuke.github.GHBlob v0;
java.lang.String v1;
v0 := @this: org.kohsuke.github.GHBlob;
v1 = v0.<org.kohsuke.github.GHBlob: java.lang.String sha>;
return v1;
}
public long getSize()
{
org.kohsuke.github.GHBlob v0;
long v1;
v0 := @this: org.kohsuke.github.GHBlob;
v1 = v0.<org.kohsuke.github.GHBlob: long size>;
return v1;
}
public java.lang.String getEncoding()
{
org.kohsuke.github.GHBlob v0;
java.lang.String v1;
v0 := @this: org.kohsuke.github.GHBlob;
v1 = v0.<org.kohsuke.github.GHBlob: java.lang.String encoding>;
return v1;
}
public java.lang.String getContent()
{
org.kohsuke.github.GHBlob v0;
java.lang.String v1;
v0 := @this: org.kohsuke.github.GHBlob;
v1 = v0.<org.kohsuke.github.GHBlob: java.lang.String content>;
return v1;
}
public java.io.InputStream read()
{
byte[] v6;
java.lang.UnsupportedOperationException v9;
java.util.Base64$Decoder v3;
java.lang.AssertionError v8;
java.lang.IllegalArgumentException v7;
org.kohsuke.github.GHBlob v0;
java.io.ByteArrayInputStream v4;
java.lang.String v1, v10, v11, v5;
boolean v2;
v0 := @this: org.kohsuke.github.GHBlob;
v1 = v0.<org.kohsuke.github.GHBlob: java.lang.String encoding>;
v2 = virtualinvoke v1.<java.lang.String: boolean equals(java.lang.Object)>("base64");
if v2 == 0 goto label4;
label1:
v3 = staticinvoke <java.util.Base64: java.util.Base64$Decoder getMimeDecoder()>();
v4 = new java.io.ByteArrayInputStream;
v5 = v0.<org.kohsuke.github.GHBlob: java.lang.String content>;
v6 = virtualinvoke v3.<java.util.Base64$Decoder: byte[] decode(java.lang.String)>(v5);
specialinvoke v4.<java.io.ByteArrayInputStream: void <init>(byte[])>(v6);
label2:
return v4;
label3:
v7 := @caughtexception;
v8 = new java.lang.AssertionError;
specialinvoke v8.<java.lang.AssertionError: void <init>(java.lang.Object)>(v7);
throw v8;
label4:
v9 = new java.lang.UnsupportedOperationException;
v10 = v0.<org.kohsuke.github.GHBlob: java.lang.String encoding>;
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v10) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unrecognized encoding: \u0001");
specialinvoke v9.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(v11);
throw v9;
catch java.lang.IllegalArgumentException from label1 to label2 with label3;
}
}