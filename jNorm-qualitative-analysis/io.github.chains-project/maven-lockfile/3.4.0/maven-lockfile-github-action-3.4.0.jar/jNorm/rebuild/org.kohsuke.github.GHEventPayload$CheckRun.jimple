public class org.kohsuke.github.GHEventPayload$CheckRun extends org.kohsuke.github.GHEventPayload
{
private int number;
private org.kohsuke.github.GHCheckRun checkRun;
private org.kohsuke.github.GHRequestedAction requestedAction;
public void <init>()
{
org.kohsuke.github.GHEventPayload$CheckRun v0;
v0 := @this: org.kohsuke.github.GHEventPayload$CheckRun;
specialinvoke v0.<org.kohsuke.github.GHEventPayload: void <init>()>();
return;
}
public int getNumber()
{
int v1;
org.kohsuke.github.GHEventPayload$CheckRun v0;
v0 := @this: org.kohsuke.github.GHEventPayload$CheckRun;
v1 = v0.<org.kohsuke.github.GHEventPayload$CheckRun: int number>;
return v1;
}
public void setCheckRun(org.kohsuke.github.GHCheckRun)
{
org.kohsuke.github.GHCheckRun v1;
java.lang.RuntimeException v2;
org.kohsuke.github.GHEventPayload$CheckRun v0;
v0 := @this: org.kohsuke.github.GHEventPayload$CheckRun;
v1 := @parameter0: org.kohsuke.github.GHCheckRun;
v2 = new java.lang.RuntimeException;
specialinvoke v2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Do not use this method.");
throw v2;
}
public org.kohsuke.github.GHCheckRun getCheckRun()
{
org.kohsuke.github.GHCheckRun v1;
org.kohsuke.github.GHEventPayload$CheckRun v0;
v0 := @this: org.kohsuke.github.GHEventPayload$CheckRun;
v1 = v0.<org.kohsuke.github.GHEventPayload$CheckRun: org.kohsuke.github.GHCheckRun checkRun>;
return v1;
}
public void setRequestedAction(org.kohsuke.github.GHRequestedAction)
{
java.lang.RuntimeException v2;
org.kohsuke.github.GHRequestedAction v1;
org.kohsuke.github.GHEventPayload$CheckRun v0;
v0 := @this: org.kohsuke.github.GHEventPayload$CheckRun;
v1 := @parameter0: org.kohsuke.github.GHRequestedAction;
v2 = new java.lang.RuntimeException;
specialinvoke v2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Do not use this method.");
throw v2;
}
public org.kohsuke.github.GHRequestedAction getRequestedAction()
{
org.kohsuke.github.GHRequestedAction v1;
org.kohsuke.github.GHEventPayload$CheckRun v0;
v0 := @this: org.kohsuke.github.GHEventPayload$CheckRun;
v1 = v0.<org.kohsuke.github.GHEventPayload$CheckRun: org.kohsuke.github.GHRequestedAction requestedAction>;
return v1;
}
void lateBind()
{
java.lang.IllegalStateException v2;
org.kohsuke.github.GHCheckRun v1, v4, v5;
org.kohsuke.github.GHRepository v3;
org.kohsuke.github.GHEventPayload$CheckRun v0;
org.kohsuke.github.GitHub v6;
v0 := @this: org.kohsuke.github.GHEventPayload$CheckRun;
v1 = v0.<org.kohsuke.github.GHEventPayload$CheckRun: org.kohsuke.github.GHCheckRun checkRun>;
if v1 != null goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Expected check_run payload, but got something else. Maybe we\'ve got another type of event?");
throw v2;
label1:
specialinvoke v0.<org.kohsuke.github.GHEventPayload: void lateBind()>();
v3 = virtualinvoke v0.<org.kohsuke.github.GHEventPayload$CheckRun: org.kohsuke.github.GHRepository getRepository()>();
if v3 == null goto label2;
v4 = v0.<org.kohsuke.github.GHEventPayload$CheckRun: org.kohsuke.github.GHCheckRun checkRun>;
virtualinvoke v4.<org.kohsuke.github.GHCheckRun: org.kohsuke.github.GHCheckRun wrap(org.kohsuke.github.GHRepository)>(v3);
goto label3;
label2:
v5 = v0.<org.kohsuke.github.GHEventPayload$CheckRun: org.kohsuke.github.GHCheckRun checkRun>;
v6 = virtualinvoke v0.<org.kohsuke.github.GHEventPayload$CheckRun: org.kohsuke.github.GitHub root()>();
virtualinvoke v5.<org.kohsuke.github.GHCheckRun: org.kohsuke.github.GHCheckRun wrap(org.kohsuke.github.GitHub)>(v6);
label3:
return;
}
}