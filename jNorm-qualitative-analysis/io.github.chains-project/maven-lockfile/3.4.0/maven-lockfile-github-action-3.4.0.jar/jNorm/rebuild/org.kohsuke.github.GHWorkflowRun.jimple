public class org.kohsuke.github.GHWorkflowRun extends org.kohsuke.github.GHObject
{
private org.kohsuke.github.GHRepository owner;
private java.lang.String name;
private long runNumber;
private long workflowId;
private long runAttempt;
private java.lang.String runStartedAt;
private java.lang.String htmlUrl;
private java.lang.String jobsUrl;
private java.lang.String logsUrl;
private java.lang.String checkSuiteUrl;
private java.lang.String artifactsUrl;
private java.lang.String cancelUrl;
private java.lang.String rerunUrl;
private java.lang.String workflowUrl;
private java.lang.String headBranch;
private java.lang.String headSha;
private org.kohsuke.github.GHRepository headRepository;
private org.kohsuke.github.GHWorkflowRun$HeadCommit headCommit;
private java.lang.String event;
private java.lang.String status;
private java.lang.String conclusion;
private org.kohsuke.github.GHPullRequest[] pullRequests;
public void <init>()
{
org.kohsuke.github.GHWorkflowRun v0;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
specialinvoke v0.<org.kohsuke.github.GHObject: void <init>()>();
return;
}
public java.lang.String getName()
{
org.kohsuke.github.GHWorkflowRun v0;
java.lang.String v1;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
v1 = v0.<org.kohsuke.github.GHWorkflowRun: java.lang.String name>;
return v1;
}
public long getRunNumber()
{
org.kohsuke.github.GHWorkflowRun v0;
long v1;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
v1 = v0.<org.kohsuke.github.GHWorkflowRun: long runNumber>;
return v1;
}
public long getWorkflowId()
{
org.kohsuke.github.GHWorkflowRun v0;
long v1;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
v1 = v0.<org.kohsuke.github.GHWorkflowRun: long workflowId>;
return v1;
}
public long getRunAttempt()
{
org.kohsuke.github.GHWorkflowRun v0;
long v1;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
v1 = v0.<org.kohsuke.github.GHWorkflowRun: long runAttempt>;
return v1;
}
public java.util.Date getRunStartedAt() throws java.io.IOException
{
org.kohsuke.github.GHWorkflowRun v0;
java.lang.String v1;
java.util.Date v2;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
v1 = v0.<org.kohsuke.github.GHWorkflowRun: java.lang.String runStartedAt>;
v2 = staticinvoke <org.kohsuke.github.GitHubClient: java.util.Date parseDate(java.lang.String)>(v1);
return v2;
}
public java.net.URL getHtmlUrl() throws java.io.IOException
{
org.kohsuke.github.GHWorkflowRun v0;
java.lang.String v1;
java.net.URL v2;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
v1 = v0.<org.kohsuke.github.GHWorkflowRun: java.lang.String htmlUrl>;
v2 = staticinvoke <org.kohsuke.github.GitHubClient: java.net.URL parseURL(java.lang.String)>(v1);
return v2;
}
public java.net.URL getJobsUrl()
{
org.kohsuke.github.GHWorkflowRun v0;
java.lang.String v1;
java.net.URL v2;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
v1 = v0.<org.kohsuke.github.GHWorkflowRun: java.lang.String jobsUrl>;
v2 = staticinvoke <org.kohsuke.github.GitHubClient: java.net.URL parseURL(java.lang.String)>(v1);
return v2;
}
public java.net.URL getLogsUrl()
{
org.kohsuke.github.GHWorkflowRun v0;
java.lang.String v1;
java.net.URL v2;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
v1 = v0.<org.kohsuke.github.GHWorkflowRun: java.lang.String logsUrl>;
v2 = staticinvoke <org.kohsuke.github.GitHubClient: java.net.URL parseURL(java.lang.String)>(v1);
return v2;
}
public java.net.URL getCheckSuiteUrl()
{
org.kohsuke.github.GHWorkflowRun v0;
java.lang.String v1;
java.net.URL v2;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
v1 = v0.<org.kohsuke.github.GHWorkflowRun: java.lang.String checkSuiteUrl>;
v2 = staticinvoke <org.kohsuke.github.GitHubClient: java.net.URL parseURL(java.lang.String)>(v1);
return v2;
}
public java.net.URL getArtifactsUrl()
{
org.kohsuke.github.GHWorkflowRun v0;
java.lang.String v1;
java.net.URL v2;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
v1 = v0.<org.kohsuke.github.GHWorkflowRun: java.lang.String artifactsUrl>;
v2 = staticinvoke <org.kohsuke.github.GitHubClient: java.net.URL parseURL(java.lang.String)>(v1);
return v2;
}
public java.net.URL getCancelUrl()
{
org.kohsuke.github.GHWorkflowRun v0;
java.lang.String v1;
java.net.URL v2;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
v1 = v0.<org.kohsuke.github.GHWorkflowRun: java.lang.String cancelUrl>;
v2 = staticinvoke <org.kohsuke.github.GitHubClient: java.net.URL parseURL(java.lang.String)>(v1);
return v2;
}
public java.net.URL getRerunUrl()
{
org.kohsuke.github.GHWorkflowRun v0;
java.lang.String v1;
java.net.URL v2;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
v1 = v0.<org.kohsuke.github.GHWorkflowRun: java.lang.String rerunUrl>;
v2 = staticinvoke <org.kohsuke.github.GitHubClient: java.net.URL parseURL(java.lang.String)>(v1);
return v2;
}
public java.net.URL getWorkflowUrl()
{
org.kohsuke.github.GHWorkflowRun v0;
java.lang.String v1;
java.net.URL v2;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
v1 = v0.<org.kohsuke.github.GHWorkflowRun: java.lang.String workflowUrl>;
v2 = staticinvoke <org.kohsuke.github.GitHubClient: java.net.URL parseURL(java.lang.String)>(v1);
return v2;
}
public java.lang.String getHeadBranch()
{
org.kohsuke.github.GHWorkflowRun v0;
java.lang.String v1;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
v1 = v0.<org.kohsuke.github.GHWorkflowRun: java.lang.String headBranch>;
return v1;
}
public java.lang.String getHeadSha()
{
org.kohsuke.github.GHWorkflowRun v0;
java.lang.String v1;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
v1 = v0.<org.kohsuke.github.GHWorkflowRun: java.lang.String headSha>;
return v1;
}
public org.kohsuke.github.GHWorkflowRun$HeadCommit getHeadCommit()
{
org.kohsuke.github.GHWorkflowRun v0;
org.kohsuke.github.GHWorkflowRun$HeadCommit v1;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
v1 = v0.<org.kohsuke.github.GHWorkflowRun: org.kohsuke.github.GHWorkflowRun$HeadCommit headCommit>;
return v1;
}
public org.kohsuke.github.GHRepository getHeadRepository()
{
org.kohsuke.github.GHWorkflowRun v0;
org.kohsuke.github.GHRepository v1;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
v1 = v0.<org.kohsuke.github.GHWorkflowRun: org.kohsuke.github.GHRepository headRepository>;
return v1;
}
public org.kohsuke.github.GHEvent getEvent()
{
org.kohsuke.github.GHWorkflowRun v0;
java.lang.Enum v3;
org.kohsuke.github.GHEvent v2;
java.lang.String v1;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
v1 = v0.<org.kohsuke.github.GHWorkflowRun: java.lang.String event>;
v2 = <org.kohsuke.github.GHEvent: org.kohsuke.github.GHEvent UNKNOWN>;
v3 = staticinvoke <org.kohsuke.github.internal.EnumUtils: java.lang.Enum getNullableEnumOrDefault(java.lang.Class,java.lang.String,java.lang.Enum)>(class "Lorg/kohsuke/github/GHEvent;", v1, v2);
return v3;
}
public org.kohsuke.github.GHWorkflowRun$Status getStatus()
{
org.kohsuke.github.GHWorkflowRun v0;
org.kohsuke.github.GHWorkflowRun$Status v2;
java.lang.String v1;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
v1 = v0.<org.kohsuke.github.GHWorkflowRun: java.lang.String status>;
v2 = staticinvoke <org.kohsuke.github.GHWorkflowRun$Status: org.kohsuke.github.GHWorkflowRun$Status 'from'(java.lang.String)>(v1);
return v2;
}
public org.kohsuke.github.GHWorkflowRun$Conclusion getConclusion()
{
org.kohsuke.github.GHWorkflowRun v0;
java.lang.String v1;
org.kohsuke.github.GHWorkflowRun$Conclusion v2;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
v1 = v0.<org.kohsuke.github.GHWorkflowRun: java.lang.String conclusion>;
v2 = staticinvoke <org.kohsuke.github.GHWorkflowRun$Conclusion: org.kohsuke.github.GHWorkflowRun$Conclusion 'from'(java.lang.String)>(v1);
return v2;
}
public org.kohsuke.github.GHRepository getRepository()
{
org.kohsuke.github.GHWorkflowRun v0;
org.kohsuke.github.GHRepository v1;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
v1 = v0.<org.kohsuke.github.GHWorkflowRun: org.kohsuke.github.GHRepository owner>;
return v1;
}
public java.util.List getPullRequests() throws java.io.IOException
{
org.kohsuke.github.GHPullRequest v7;
org.kohsuke.github.GHWorkflowRun v0;
java.util.List v10, v11, v12;
org.kohsuke.github.GHPullRequest[] v1, v2, v4, v9;
int v3, v5, v6;
java.lang.String v8;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
v1 = v0.<org.kohsuke.github.GHWorkflowRun: org.kohsuke.github.GHPullRequest[] pullRequests>;
if v1 == null goto label3;
v2 = v0.<org.kohsuke.github.GHWorkflowRun: org.kohsuke.github.GHPullRequest[] pullRequests>;
v3 = lengthof v2;
if v3 == 0 goto label3;
v4 = v0.<org.kohsuke.github.GHWorkflowRun: org.kohsuke.github.GHPullRequest[] pullRequests>;
v5 = lengthof v4;
v6 = 0;
label1:
if v6 >= v5 goto label2;
v7 = v4[v6];
v8 = virtualinvoke v7.<org.kohsuke.github.GHPullRequest: java.lang.String getTitle()>();
virtualinvoke v7.<org.kohsuke.github.GHPullRequest: void refresh(java.lang.Object)>(v8);
v6 = v6 + 1;
goto label1;
label2:
v9 = v0.<org.kohsuke.github.GHWorkflowRun: org.kohsuke.github.GHPullRequest[] pullRequests>;
v10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v9);
v11 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(v10);
return v11;
label3:
v12 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v12;
}
public void cancel() throws java.io.IOException
{
org.kohsuke.github.GHWorkflowRun v0;
java.lang.String[] v5;
java.lang.String v4;
org.kohsuke.github.GitHubRequest$Builder v3, v6;
org.kohsuke.github.Requester v2;
org.kohsuke.github.GitHub v1;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
v1 = virtualinvoke v0.<org.kohsuke.github.GHWorkflowRun: org.kohsuke.github.GitHub root()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v3 = virtualinvoke v2.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>("POST");
v4 = specialinvoke v0.<org.kohsuke.github.GHWorkflowRun: java.lang.String getApiRoute()>();
v5 = newarray (java.lang.String)[1];
v5[0] = "cancel";
v6 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v4, v5);
virtualinvoke v6.<org.kohsuke.github.Requester: void send()>();
return;
}
public void delete() throws java.io.IOException
{
org.kohsuke.github.GHWorkflowRun v0;
java.lang.String[] v5;
java.lang.String v4;
org.kohsuke.github.GitHubRequest$Builder v3, v6;
org.kohsuke.github.Requester v2;
org.kohsuke.github.GitHub v1;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
v1 = virtualinvoke v0.<org.kohsuke.github.GHWorkflowRun: org.kohsuke.github.GitHub root()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v3 = virtualinvoke v2.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>("DELETE");
v4 = specialinvoke v0.<org.kohsuke.github.GHWorkflowRun: java.lang.String getApiRoute()>();
v5 = newarray (java.lang.String)[0];
v6 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v4, v5);
virtualinvoke v6.<org.kohsuke.github.Requester: void send()>();
return;
}
public void rerun() throws java.io.IOException
{
org.kohsuke.github.GHWorkflowRun v0;
java.lang.String[] v5;
java.lang.String v4;
org.kohsuke.github.GitHubRequest$Builder v3, v6;
org.kohsuke.github.Requester v2;
org.kohsuke.github.GitHub v1;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
v1 = virtualinvoke v0.<org.kohsuke.github.GHWorkflowRun: org.kohsuke.github.GitHub root()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v3 = virtualinvoke v2.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>("POST");
v4 = specialinvoke v0.<org.kohsuke.github.GHWorkflowRun: java.lang.String getApiRoute()>();
v5 = newarray (java.lang.String)[1];
v5[0] = "rerun";
v6 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v4, v5);
virtualinvoke v6.<org.kohsuke.github.Requester: void send()>();
return;
}
public void approve() throws java.io.IOException
{
org.kohsuke.github.GHWorkflowRun v0;
java.lang.String[] v5;
java.lang.String v4;
org.kohsuke.github.GitHubRequest$Builder v3, v6;
org.kohsuke.github.Requester v2;
org.kohsuke.github.GitHub v1;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
v1 = virtualinvoke v0.<org.kohsuke.github.GHWorkflowRun: org.kohsuke.github.GitHub root()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v3 = virtualinvoke v2.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>("POST");
v4 = specialinvoke v0.<org.kohsuke.github.GHWorkflowRun: java.lang.String getApiRoute()>();
v5 = newarray (java.lang.String)[1];
v5[0] = "approve";
v6 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v4, v5);
virtualinvoke v6.<org.kohsuke.github.Requester: void send()>();
return;
}
public org.kohsuke.github.PagedIterable listArtifacts()
{
org.kohsuke.github.GHRepository v2;
java.lang.String[] v6;
org.kohsuke.github.GHArtifactsIterable v1;
org.kohsuke.github.GitHubRequest$Builder v7;
org.kohsuke.github.GHWorkflowRun v0;
java.lang.String v5;
org.kohsuke.github.Requester v4;
org.kohsuke.github.GitHub v3;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
v1 = new org.kohsuke.github.GHArtifactsIterable;
v2 = v0.<org.kohsuke.github.GHWorkflowRun: org.kohsuke.github.GHRepository owner>;
v3 = virtualinvoke v0.<org.kohsuke.github.GHWorkflowRun: org.kohsuke.github.GitHub root()>();
v4 = virtualinvoke v3.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v5 = specialinvoke v0.<org.kohsuke.github.GHWorkflowRun: java.lang.String getApiRoute()>();
v6 = newarray (java.lang.String)[1];
v6[0] = "artifacts";
v7 = virtualinvoke v4.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v5, v6);
specialinvoke v1.<org.kohsuke.github.GHArtifactsIterable: void <init>(org.kohsuke.github.GHRepository,org.kohsuke.github.GitHubRequest$Builder)>(v2, v7);
return v1;
}
public java.lang.Object downloadLogs(org.kohsuke.github.function.InputStreamFunction) throws java.io.IOException
{
org.kohsuke.github.function.InputStreamFunction v1;
java.lang.String[] v6;
org.kohsuke.github.GitHubRequest$Builder v4, v7;
org.kohsuke.github.GHWorkflowRun v0;
java.lang.Object v8;
java.lang.String v5;
org.kohsuke.github.Requester v3;
org.kohsuke.github.GitHub v2;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
v1 := @parameter0: org.kohsuke.github.function.InputStreamFunction;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "Stream function must not be null");
v2 = virtualinvoke v0.<org.kohsuke.github.GHWorkflowRun: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v4 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>("GET");
v5 = specialinvoke v0.<org.kohsuke.github.GHWorkflowRun: java.lang.String getApiRoute()>();
v6 = newarray (java.lang.String)[1];
v6[0] = "logs";
v7 = virtualinvoke v4.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v5, v6);
v8 = virtualinvoke v7.<org.kohsuke.github.Requester: java.lang.Object fetchStream(org.kohsuke.github.function.InputStreamFunction)>(v1);
return v8;
}
public void deleteLogs() throws java.io.IOException
{
org.kohsuke.github.GHWorkflowRun v0;
java.lang.String[] v5;
java.lang.String v4;
org.kohsuke.github.GitHubRequest$Builder v3, v6;
org.kohsuke.github.Requester v2;
org.kohsuke.github.GitHub v1;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
v1 = virtualinvoke v0.<org.kohsuke.github.GHWorkflowRun: org.kohsuke.github.GitHub root()>();
v2 = virtualinvoke v1.<org.kohsuke.github.GitHub: org.kohsuke.github.Requester createRequest()>();
v3 = virtualinvoke v2.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)>("DELETE");
v4 = specialinvoke v0.<org.kohsuke.github.GHWorkflowRun: java.lang.String getApiRoute()>();
v5 = newarray (java.lang.String)[1];
v5[0] = "logs";
v6 = virtualinvoke v3.<org.kohsuke.github.Requester: org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String,java.lang.String[])>(v4, v5);
virtualinvoke v6.<org.kohsuke.github.Requester: void send()>();
return;
}
public org.kohsuke.github.PagedIterable listJobs()
{
org.kohsuke.github.GHWorkflowRun v0;
org.kohsuke.github.GHWorkflowJobQueryBuilder v1, v2;
org.kohsuke.github.PagedIterable v3;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
v1 = new org.kohsuke.github.GHWorkflowJobQueryBuilder;
specialinvoke v1.<org.kohsuke.github.GHWorkflowJobQueryBuilder: void <init>(org.kohsuke.github.GHWorkflowRun)>(v0);
v2 = virtualinvoke v1.<org.kohsuke.github.GHWorkflowJobQueryBuilder: org.kohsuke.github.GHWorkflowJobQueryBuilder latest()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GHWorkflowJobQueryBuilder: org.kohsuke.github.PagedIterable list()>();
return v3;
}
public org.kohsuke.github.PagedIterable listAllJobs()
{
org.kohsuke.github.GHWorkflowRun v0;
org.kohsuke.github.GHWorkflowJobQueryBuilder v1, v2;
org.kohsuke.github.PagedIterable v3;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
v1 = new org.kohsuke.github.GHWorkflowJobQueryBuilder;
specialinvoke v1.<org.kohsuke.github.GHWorkflowJobQueryBuilder: void <init>(org.kohsuke.github.GHWorkflowRun)>(v0);
v2 = virtualinvoke v1.<org.kohsuke.github.GHWorkflowJobQueryBuilder: org.kohsuke.github.GHWorkflowJobQueryBuilder all()>();
v3 = virtualinvoke v2.<org.kohsuke.github.GHWorkflowJobQueryBuilder: org.kohsuke.github.PagedIterable list()>();
return v3;
}
private java.lang.String getApiRoute()
{
org.kohsuke.github.GHRepository v1, v10, v12;
java.net.URL v2;
long v14;
org.kohsuke.github.GHWorkflowRun v0;
java.lang.CharSequence[] v8;
java.lang.String v11, v13, v15, v4, v6, v7, v9;
org.kohsuke.github.GitHub v5;
java.lang.Object v3;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
v1 = v0.<org.kohsuke.github.GHWorkflowRun: org.kohsuke.github.GHRepository owner>;
if v1 != null goto label1;
v2 = virtualinvoke v0.<org.kohsuke.github.GHWorkflowRun: java.net.URL getUrl()>();
v3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v2, "Missing instance URL!");
v4 = virtualinvoke v3.<java.net.URL: java.lang.String toString()>();
v5 = virtualinvoke v0.<org.kohsuke.github.GHWorkflowRun: org.kohsuke.github.GitHub root()>();
v6 = virtualinvoke v5.<org.kohsuke.github.GitHub: java.lang.String getApiUrl()>();
v7 = virtualinvoke v4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(v6, "");
v8 = newarray (java.lang.CharSequence)[0];
v9 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String prependIfMissing(java.lang.String,java.lang.CharSequence,java.lang.CharSequence[])>(v7, "/", v8);
return v9;
label1:
v10 = v0.<org.kohsuke.github.GHWorkflowRun: org.kohsuke.github.GHRepository owner>;
v11 = virtualinvoke v10.<org.kohsuke.github.GHRepository: java.lang.String getOwnerName()>();
v12 = v0.<org.kohsuke.github.GHWorkflowRun: org.kohsuke.github.GHRepository owner>;
v13 = virtualinvoke v12.<org.kohsuke.github.GHRepository: java.lang.String getName()>();
v14 = virtualinvoke v0.<org.kohsuke.github.GHWorkflowRun: long getId()>();
v15 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,long)>(v11, v13, v14) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("/repos/\u0001/\u0001/actions/runs/\u0001");
return v15;
}
org.kohsuke.github.GHWorkflowRun wrapUp(org.kohsuke.github.GHRepository)
{
org.kohsuke.github.GHWorkflowRun v0, v3;
org.kohsuke.github.GHRepository v1;
org.kohsuke.github.GitHub v2;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
v1 := @parameter0: org.kohsuke.github.GHRepository;
v0.<org.kohsuke.github.GHWorkflowRun: org.kohsuke.github.GHRepository owner> = v1;
v2 = virtualinvoke v1.<org.kohsuke.github.GHRepository: org.kohsuke.github.GitHub root()>();
v3 = virtualinvoke v0.<org.kohsuke.github.GHWorkflowRun: org.kohsuke.github.GHWorkflowRun wrapUp(org.kohsuke.github.GitHub)>(v2);
return v3;
}
org.kohsuke.github.GHWorkflowRun wrapUp(org.kohsuke.github.GitHub)
{
org.kohsuke.github.GHPullRequest v7;
org.kohsuke.github.GHRepository v2, v8;
org.kohsuke.github.GHWorkflowRun v0;
org.kohsuke.github.GHPullRequest[] v3, v4;
int v5, v6;
org.kohsuke.github.GitHub v1;
v0 := @this: org.kohsuke.github.GHWorkflowRun;
v1 := @parameter0: org.kohsuke.github.GitHub;
v2 = v0.<org.kohsuke.github.GHWorkflowRun: org.kohsuke.github.GHRepository owner>;
if v2 == null goto label2;
v3 = v0.<org.kohsuke.github.GHWorkflowRun: org.kohsuke.github.GHPullRequest[] pullRequests>;
if v3 == null goto label2;
v4 = v0.<org.kohsuke.github.GHWorkflowRun: org.kohsuke.github.GHPullRequest[] pullRequests>;
v5 = lengthof v4;
v6 = 0;
label1:
if v6 >= v5 goto label2;
v7 = v4[v6];
v8 = v0.<org.kohsuke.github.GHWorkflowRun: org.kohsuke.github.GHRepository owner>;
virtualinvoke v7.<org.kohsuke.github.GHPullRequest: org.kohsuke.github.GHIssue wrap(org.kohsuke.github.GHRepository)>(v8);
v6 = v6 + 1;
goto label1;
label2:
return v0;
}
}