class org.kohsuke.github.GitHubRequest$Builder extends java.lang.Object
{
private final java.util.List args;
private final java.util.Map headers;
private final java.util.Map injectedMappingValues;
private java.lang.String apiUrl;
private java.lang.String urlPath;
private java.lang.String method;
private org.kohsuke.github.RateLimitTarget rateLimitTarget;
private byte[] body;
private boolean forceBody;
protected void <init>()
{
java.util.LinkedHashMap v4;
java.util.TreeMap v2;
org.kohsuke.github.GitHubRequest$Builder v0;
java.util.Comparator v3;
org.kohsuke.github.RateLimitTarget v5;
java.util.ArrayList v1;
v0 := @this: org.kohsuke.github.GitHubRequest$Builder;
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v2 = new java.util.TreeMap;
v3 = <org.kohsuke.github.GitHubRequest: java.util.Comparator nullableCaseInsensitiveComparator>;
specialinvoke v2.<java.util.TreeMap: void <init>(java.util.Comparator)>(v3);
v4 = new java.util.LinkedHashMap;
specialinvoke v4.<java.util.LinkedHashMap: void <init>()>();
v5 = <org.kohsuke.github.RateLimitTarget: org.kohsuke.github.RateLimitTarget CORE>;
specialinvoke v0.<org.kohsuke.github.GitHubRequest$Builder: void <init>(java.util.List,java.util.Map,java.util.Map,java.lang.String,java.lang.String,java.lang.String,org.kohsuke.github.RateLimitTarget,byte[],boolean)>(v1, v2, v4, "https://api.github.com", "/", "GET", v5, null, 0);
return;
}
private void <init>(java.util.List, java.util.Map, java.util.Map, java.lang.String, java.lang.String, java.lang.String, org.kohsuke.github.RateLimitTarget, byte[], boolean)
{
byte[] v8;
org.kohsuke.github.GitHubRequest$Builder v0;
java.util.ArrayList v10, v18;
java.util.LinkedHashMap v20;
java.util.Map v2, v3;
java.lang.String v4, v5, v6;
boolean v15, v9;
java.util.Iterator v14;
java.util.Set v13;
java.util.List v1;
java.util.TreeMap v11;
java.lang.Object v16, v17, v19;
java.util.Comparator v12;
org.kohsuke.github.RateLimitTarget v7;
v0 := @this: org.kohsuke.github.GitHubRequest$Builder;
v1 := @parameter0: java.util.List;
v2 := @parameter1: java.util.Map;
v3 := @parameter2: java.util.Map;
v4 := @parameter3: java.lang.String;
v5 := @parameter4: java.lang.String;
v6 := @parameter5: java.lang.String;
v7 := @parameter6: org.kohsuke.github.RateLimitTarget;
v8 := @parameter7: byte[];
v9 := @parameter8: boolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
v10 = new java.util.ArrayList;
specialinvoke v10.<java.util.ArrayList: void <init>(java.util.Collection)>(v1);
v0.<org.kohsuke.github.GitHubRequest$Builder: java.util.List args> = v10;
v11 = new java.util.TreeMap;
v12 = <org.kohsuke.github.GitHubRequest: java.util.Comparator nullableCaseInsensitiveComparator>;
specialinvoke v11.<java.util.TreeMap: void <init>(java.util.Comparator)>(v12);
v13 = interfaceinvoke v2.<java.util.Map: java.util.Set entrySet()>();
v14 = interfaceinvoke v13.<java.util.Set: java.util.Iterator iterator()>();
label1:
v15 = interfaceinvoke v14.<java.util.Iterator: boolean hasNext()>();
if v15 == 0 goto label2;
v16 = interfaceinvoke v14.<java.util.Iterator: java.lang.Object next()>();
v17 = interfaceinvoke v16.<java.util.Map$Entry: java.lang.Object getKey()>();
v18 = new java.util.ArrayList;
v19 = interfaceinvoke v16.<java.util.Map$Entry: java.lang.Object getValue()>();
specialinvoke v18.<java.util.ArrayList: void <init>(java.util.Collection)>(v19);
virtualinvoke v11.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v17, v18);
goto label1;
label2:
v0.<org.kohsuke.github.GitHubRequest$Builder: java.util.Map headers> = v11;
v20 = new java.util.LinkedHashMap;
specialinvoke v20.<java.util.LinkedHashMap: void <init>(java.util.Map)>(v3);
v0.<org.kohsuke.github.GitHubRequest$Builder: java.util.Map injectedMappingValues> = v20;
v0.<org.kohsuke.github.GitHubRequest$Builder: java.lang.String apiUrl> = v4;
v0.<org.kohsuke.github.GitHubRequest$Builder: java.lang.String urlPath> = v5;
v0.<org.kohsuke.github.GitHubRequest$Builder: java.lang.String method> = v6;
v0.<org.kohsuke.github.GitHubRequest$Builder: org.kohsuke.github.RateLimitTarget rateLimitTarget> = v7;
v0.<org.kohsuke.github.GitHubRequest$Builder: byte[] body> = v8;
v0.<org.kohsuke.github.GitHubRequest$Builder: boolean forceBody> = v9;
return;
}
public org.kohsuke.github.GitHubRequest build()
{
byte[] v9;
org.kohsuke.github.GitHubRequest$Builder v0;
org.kohsuke.github.GitHubRequest v1;
java.util.List v2;
java.util.Map v3, v4;
java.lang.String v5, v6, v7;
org.kohsuke.github.RateLimitTarget v8;
boolean v10;
v0 := @this: org.kohsuke.github.GitHubRequest$Builder;
v1 = new org.kohsuke.github.GitHubRequest;
v2 = v0.<org.kohsuke.github.GitHubRequest$Builder: java.util.List args>;
v3 = v0.<org.kohsuke.github.GitHubRequest$Builder: java.util.Map headers>;
v4 = v0.<org.kohsuke.github.GitHubRequest$Builder: java.util.Map injectedMappingValues>;
v5 = v0.<org.kohsuke.github.GitHubRequest$Builder: java.lang.String apiUrl>;
v6 = v0.<org.kohsuke.github.GitHubRequest$Builder: java.lang.String urlPath>;
v7 = v0.<org.kohsuke.github.GitHubRequest$Builder: java.lang.String method>;
v8 = v0.<org.kohsuke.github.GitHubRequest$Builder: org.kohsuke.github.RateLimitTarget rateLimitTarget>;
v9 = v0.<org.kohsuke.github.GitHubRequest$Builder: byte[] body>;
v10 = v0.<org.kohsuke.github.GitHubRequest$Builder: boolean forceBody>;
specialinvoke v1.<org.kohsuke.github.GitHubRequest: void <init>(java.util.List,java.util.Map,java.util.Map,java.lang.String,java.lang.String,java.lang.String,org.kohsuke.github.RateLimitTarget,byte[],boolean)>(v2, v3, v4, v5, v6, v7, v8, v9, v10);
return v1;
}
public org.kohsuke.github.GitHubRequest$Builder withApiUrl(java.lang.String)
{
java.lang.String v1;
org.kohsuke.github.GitHubRequest$Builder v0;
v0 := @this: org.kohsuke.github.GitHubRequest$Builder;
v1 := @parameter0: java.lang.String;
v0.<org.kohsuke.github.GitHubRequest$Builder: java.lang.String apiUrl> = v1;
return v0;
}
public org.kohsuke.github.GitHubRequest$Builder setHeader(java.lang.String, java.lang.String)
{
java.util.Map v4;
java.lang.String v1, v2;
org.kohsuke.github.GitHubRequest$Builder v0;
java.util.ArrayList v3;
v0 := @this: org.kohsuke.github.GitHubRequest$Builder;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v2);
v4 = v0.<org.kohsuke.github.GitHubRequest$Builder: java.util.Map headers>;
interfaceinvoke v4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v3);
return v0;
}
public org.kohsuke.github.GitHubRequest$Builder withHeader(java.lang.String, java.lang.String)
{
java.util.Map v3;
java.lang.Object v4;
java.lang.String v1, v2;
org.kohsuke.github.GitHubRequest$Builder v0;
v0 := @this: org.kohsuke.github.GitHubRequest$Builder;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = v0.<org.kohsuke.github.GitHubRequest$Builder: java.util.Map headers>;
v4 = interfaceinvoke v3.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v4 != null goto label1;
virtualinvoke v0.<org.kohsuke.github.GitHubRequest$Builder: org.kohsuke.github.GitHubRequest$Builder setHeader(java.lang.String,java.lang.String)>(v1, v2);
goto label2;
label1:
interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(v2);
label2:
return v0;
}
public org.kohsuke.github.GitHubRequest$Builder injectMappingValue(java.lang.Object)
{
java.lang.Class v2;
java.lang.Object v1;
java.lang.String v3;
org.kohsuke.github.GitHubRequest$Builder v0, v4;
v0 := @this: org.kohsuke.github.GitHubRequest$Builder;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v2.<java.lang.Class: java.lang.String getName()>();
v4 = virtualinvoke v0.<org.kohsuke.github.GitHubRequest$Builder: org.kohsuke.github.GitHubRequest$Builder injectMappingValue(java.lang.String,java.lang.Object)>(v3, v1);
return v4;
}
public org.kohsuke.github.GitHubRequest$Builder injectMappingValue(java.lang.String, java.lang.Object)
{
java.util.Map v3;
java.lang.Object v2;
java.lang.String v1;
org.kohsuke.github.GitHubRequest$Builder v0;
v0 := @this: org.kohsuke.github.GitHubRequest$Builder;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object;
v3 = v0.<org.kohsuke.github.GitHubRequest$Builder: java.util.Map injectedMappingValues>;
interfaceinvoke v3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v2);
return v0;
}
public org.kohsuke.github.GitHubRequest$Builder withPreview(java.lang.String)
{
java.lang.String v1;
org.kohsuke.github.GitHubRequest$Builder v0, v2;
v0 := @this: org.kohsuke.github.GitHubRequest$Builder;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<org.kohsuke.github.GitHubRequest$Builder: org.kohsuke.github.GitHubRequest$Builder withHeader(java.lang.String,java.lang.String)>("Accept", v1);
return v2;
}
public org.kohsuke.github.GitHubRequest$Builder withPreview(org.kohsuke.github.internal.Previews)
{
org.kohsuke.github.internal.Previews v1;
java.lang.String v2;
org.kohsuke.github.GitHubRequest$Builder v0, v3;
v0 := @this: org.kohsuke.github.GitHubRequest$Builder;
v1 := @parameter0: org.kohsuke.github.internal.Previews;
v2 = virtualinvoke v1.<org.kohsuke.github.internal.Previews: java.lang.String mediaType()>();
v3 = virtualinvoke v0.<org.kohsuke.github.GitHubRequest$Builder: org.kohsuke.github.GitHubRequest$Builder withPreview(java.lang.String)>(v2);
return v3;
}
public org.kohsuke.github.GitHubRequest$Builder 'with'(java.util.Map)
{
java.util.Iterator v3;
java.util.Set v2;
org.kohsuke.github.GitHubRequest$Builder v0;
java.util.Map v1;
java.lang.Object v5, v6, v7;
boolean v4;
v0 := @this: org.kohsuke.github.GitHubRequest$Builder;
v1 := @parameter0: java.util.Map;
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
v7 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getValue()>();
virtualinvoke v0.<org.kohsuke.github.GitHubRequest$Builder: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.Object)>(v6, v7);
goto label1;
label2:
return v0;
}
public org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String, int)
{
int v2;
java.lang.String v1;
org.kohsuke.github.GitHubRequest$Builder v0, v4;
java.lang.Integer v3;
v0 := @this: org.kohsuke.github.GitHubRequest$Builder;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v2);
v4 = virtualinvoke v0.<org.kohsuke.github.GitHubRequest$Builder: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.Object)>(v1, v3);
return v4;
}
public org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String, long)
{
java.lang.Long v3;
long v2;
java.lang.String v1;
org.kohsuke.github.GitHubRequest$Builder v0, v4;
v0 := @this: org.kohsuke.github.GitHubRequest$Builder;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
v3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v2);
v4 = virtualinvoke v0.<org.kohsuke.github.GitHubRequest$Builder: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.Object)>(v1, v3);
return v4;
}
public org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String, boolean)
{
java.lang.Boolean v3;
java.lang.String v1;
org.kohsuke.github.GitHubRequest$Builder v0, v4;
boolean v2;
v0 := @this: org.kohsuke.github.GitHubRequest$Builder;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
v3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v2);
v4 = virtualinvoke v0.<org.kohsuke.github.GitHubRequest$Builder: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.Object)>(v1, v3);
return v4;
}
public org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String, java.lang.Enum)
{
java.lang.Enum v2;
java.lang.String v1, v4;
org.kohsuke.github.GitHubRequest$Builder v0, v3, v5;
v0 := @this: org.kohsuke.github.GitHubRequest$Builder;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Enum;
if v2 != null goto label1;
v3 = virtualinvoke v0.<org.kohsuke.github.GitHubRequest$Builder: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.Object)>(v1, null);
return v3;
label1:
v4 = staticinvoke <org.kohsuke.github.GitHubRequest: java.lang.String transformEnum(java.lang.Enum)>(v2);
v5 = virtualinvoke v0.<org.kohsuke.github.GitHubRequest$Builder: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.String)>(v1, v4);
return v5;
}
public org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String, java.lang.String)
{
java.lang.String v1, v2;
org.kohsuke.github.GitHubRequest$Builder v0, v3;
v0 := @this: org.kohsuke.github.GitHubRequest$Builder;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<org.kohsuke.github.GitHubRequest$Builder: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.Object)>(v1, v2);
return v3;
}
public org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String, java.util.Collection)
{
java.util.Collection v2;
java.lang.String v1;
org.kohsuke.github.GitHubRequest$Builder v0, v3;
v0 := @this: org.kohsuke.github.GitHubRequest$Builder;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.util.Collection;
v3 = virtualinvoke v0.<org.kohsuke.github.GitHubRequest$Builder: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.Object)>(v1, v2);
return v3;
}
public org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String, java.util.Map)
{
java.util.Map v2;
java.lang.String v1;
org.kohsuke.github.GitHubRequest$Builder v0, v3;
v0 := @this: org.kohsuke.github.GitHubRequest$Builder;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.util.Map;
v3 = virtualinvoke v0.<org.kohsuke.github.GitHubRequest$Builder: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.Object)>(v1, v2);
return v3;
}
public org.kohsuke.github.GitHubRequest$Builder 'with'(java.io.InputStream) throws java.io.IOException
{
byte[] v2;
org.kohsuke.github.GitHubRequest$Builder v0;
java.io.InputStream v1;
v0 := @this: org.kohsuke.github.GitHubRequest$Builder;
v1 := @parameter0: java.io.InputStream;
v2 = staticinvoke <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream)>(v1);
v0.<org.kohsuke.github.GitHubRequest$Builder: byte[] body> = v2;
staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(v1);
return v0;
}
public org.kohsuke.github.GitHubRequest$Builder withNullable(java.lang.String, java.lang.Object)
{
java.util.List v3;
org.kohsuke.github.GitHubRequest$Entry v4;
java.lang.Object v2;
java.lang.String v1;
org.kohsuke.github.GitHubRequest$Builder v0;
v0 := @this: org.kohsuke.github.GitHubRequest$Builder;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object;
v3 = v0.<org.kohsuke.github.GitHubRequest$Builder: java.util.List args>;
v4 = new org.kohsuke.github.GitHubRequest$Entry;
specialinvoke v4.<org.kohsuke.github.GitHubRequest$Entry: void <init>(java.lang.String,java.lang.Object)>(v1, v2);
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v4);
return v0;
}
public org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String, java.lang.Object)
{
java.util.List v3;
org.kohsuke.github.GitHubRequest$Entry v4;
java.lang.Object v2;
java.lang.String v1;
org.kohsuke.github.GitHubRequest$Builder v0;
v0 := @this: org.kohsuke.github.GitHubRequest$Builder;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object;
if v2 == null goto label1;
v3 = v0.<org.kohsuke.github.GitHubRequest$Builder: java.util.List args>;
v4 = new org.kohsuke.github.GitHubRequest$Entry;
specialinvoke v4.<org.kohsuke.github.GitHubRequest$Entry: void <init>(java.lang.String,java.lang.Object)>(v1, v2);
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v4);
label1:
return v0;
}
public org.kohsuke.github.GitHubRequest$Builder set(java.lang.String, java.lang.Object)
{
java.lang.Object v2;
java.lang.String v1;
org.kohsuke.github.GitHubRequest$Builder v0, v3;
v0 := @this: org.kohsuke.github.GitHubRequest$Builder;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object;
virtualinvoke v0.<org.kohsuke.github.GitHubRequest$Builder: org.kohsuke.github.GitHubRequest$Builder remove(java.lang.String)>(v1);
v3 = virtualinvoke v0.<org.kohsuke.github.GitHubRequest$Builder: org.kohsuke.github.GitHubRequest$Builder 'with'(java.lang.String,java.lang.Object)>(v1, v2);
return v3;
}
public org.kohsuke.github.GitHubRequest$Builder remove(java.lang.String)
{
org.kohsuke.github.GitHubRequest$Builder v0;
java.util.List v3, v5, v9;
int v2, v4;
java.lang.Object v6;
java.lang.String v1, v7;
boolean v8;
v0 := @this: org.kohsuke.github.GitHubRequest$Builder;
v1 := @parameter0: java.lang.String;
v2 = 0;
label1:
v3 = v0.<org.kohsuke.github.GitHubRequest$Builder: java.util.List args>;
v4 = interfaceinvoke v3.<java.util.List: int size()>();
if v2 >= v4 goto label3;
v5 = v0.<org.kohsuke.github.GitHubRequest$Builder: java.util.List args>;
v6 = interfaceinvoke v5.<java.util.List: java.lang.Object get(int)>(v2);
v7 = v6.<org.kohsuke.github.GitHubRequest$Entry: java.lang.String key>;
v8 = virtualinvoke v7.<java.lang.String: boolean equals(java.lang.Object)>(v1);
if v8 == 0 goto label2;
v9 = v0.<org.kohsuke.github.GitHubRequest$Builder: java.util.List args>;
interfaceinvoke v9.<java.util.List: java.lang.Object remove(int)>(v2);
goto label1;
label2:
v2 = v2 + 1;
goto label1;
label3:
return v0;
}
public org.kohsuke.github.GitHubRequest$Builder method(java.lang.String)
{
java.lang.String v1;
org.kohsuke.github.GitHubRequest$Builder v0;
v0 := @this: org.kohsuke.github.GitHubRequest$Builder;
v1 := @parameter0: java.lang.String;
v0.<org.kohsuke.github.GitHubRequest$Builder: java.lang.String method> = v1;
return v0;
}
public org.kohsuke.github.GitHubRequest$Builder rateLimit(org.kohsuke.github.RateLimitTarget)
{
org.kohsuke.github.GitHubRequest$Builder v0;
org.kohsuke.github.RateLimitTarget v1;
v0 := @this: org.kohsuke.github.GitHubRequest$Builder;
v1 := @parameter0: org.kohsuke.github.RateLimitTarget;
v0.<org.kohsuke.github.GitHubRequest$Builder: org.kohsuke.github.RateLimitTarget rateLimitTarget> = v1;
return v0;
}
public org.kohsuke.github.GitHubRequest$Builder contentType(java.lang.String)
{
java.lang.String v1;
org.kohsuke.github.GitHubRequest$Builder v0;
v0 := @this: org.kohsuke.github.GitHubRequest$Builder;
v1 := @parameter0: java.lang.String;
virtualinvoke v0.<org.kohsuke.github.GitHubRequest$Builder: org.kohsuke.github.GitHubRequest$Builder setHeader(java.lang.String,java.lang.String)>("Content-type", v1);
return v0;
}
org.kohsuke.github.GitHubRequest$Builder setRawUrlPath(java.lang.String)
{
java.lang.String v1;
org.kohsuke.github.GitHubRequest$Builder v0;
boolean v2;
org.kohsuke.github.GHException v3;
v0 := @this: org.kohsuke.github.GitHubRequest$Builder;
v1 := @parameter0: java.lang.String;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = virtualinvoke v1.<java.lang.String: boolean startsWith(java.lang.String)>("http");
if v2 != 0 goto label1;
v3 = new org.kohsuke.github.GHException;
specialinvoke v3.<org.kohsuke.github.GHException: void <init>(java.lang.String)>("Raw URL must start with \'http\'");
throw v3;
label1:
v0.<org.kohsuke.github.GitHubRequest$Builder: java.lang.String urlPath> = v1;
return v0;
}
public transient org.kohsuke.github.GitHubRequest$Builder withUrlPath(java.lang.String, java.lang.String[])
{
java.lang.String[] v2;
org.kohsuke.github.GitHubRequest$Builder v0, v5;
org.kohsuke.github.GHException v8;
java.lang.CharSequence[] v12;
int v10, v3;
java.lang.String v1, v11, v13, v14, v6, v9;
boolean v4, v7;
v0 := @this: org.kohsuke.github.GitHubRequest$Builder;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String[];
v3 = lengthof v2;
if v3 != 0 goto label1;
v4 = virtualinvoke v1.<java.lang.String: boolean startsWith(java.lang.String)>("/");
if v4 != 0 goto label1;
v5 = virtualinvoke v0.<org.kohsuke.github.GitHubRequest$Builder: org.kohsuke.github.GitHubRequest$Builder setRawUrlPath(java.lang.String)>(v1);
return v5;
label1:
v6 = v0.<org.kohsuke.github.GitHubRequest$Builder: java.lang.String urlPath>;
v7 = virtualinvoke v6.<java.lang.String: boolean startsWith(java.lang.String)>("/");
if v7 != 0 goto label2;
v8 = new org.kohsuke.github.GHException;
specialinvoke v8.<org.kohsuke.github.GHException: void <init>(java.lang.String)>("Cannot append to url path after setting a full url");
throw v8;
label2:
v9 = v1;
v10 = lengthof v2;
if v10 == 0 goto label3;
v11 = staticinvoke <java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.CharSequence[])>("/", v2);
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v1, v11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001/\u0001");
label3:
v12 = newarray (java.lang.CharSequence)[0];
v13 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String prependIfMissing(java.lang.String,java.lang.CharSequence,java.lang.CharSequence[])>(v9, "/", v12);
v14 = staticinvoke <org.kohsuke.github.GitHubRequest: java.lang.String urlPathEncode(java.lang.String)>(v13);
v0.<org.kohsuke.github.GitHubRequest$Builder: java.lang.String urlPath> = v14;
return v0;
}
public org.kohsuke.github.GitHubRequest$Builder inBody()
{
org.kohsuke.github.GitHubRequest$Builder v0;
v0 := @this: org.kohsuke.github.GitHubRequest$Builder;
v0.<org.kohsuke.github.GitHubRequest$Builder: boolean forceBody> = 1;
return v0;
}
}