class org.kohsuke.github.GitHubResponse extends java.lang.Object
{
private static final java.util.logging.Logger LOGGER;
private final int statusCode;
private final java.util.Map headers;
private final java.lang.Object body;
void <init>(org.kohsuke.github.GitHubResponse, java.lang.Object)
{
java.util.Map v4;
int v3;
org.kohsuke.github.GitHubResponse v0, v1;
java.lang.Object v2;
v0 := @this: org.kohsuke.github.GitHubResponse;
v1 := @parameter0: org.kohsuke.github.GitHubResponse;
v2 := @parameter1: java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = virtualinvoke v1.<org.kohsuke.github.GitHubResponse: int statusCode()>();
v0.<org.kohsuke.github.GitHubResponse: int statusCode> = v3;
v4 = v1.<org.kohsuke.github.GitHubResponse: java.util.Map headers>;
v0.<org.kohsuke.github.GitHubResponse: java.util.Map headers> = v4;
v0.<org.kohsuke.github.GitHubResponse: java.lang.Object body> = v2;
return;
}
void <init>(org.kohsuke.github.connector.GitHubConnectorResponse, java.lang.Object)
{
java.util.Map v4;
int v3;
org.kohsuke.github.GitHubResponse v0;
java.lang.Object v2;
org.kohsuke.github.connector.GitHubConnectorResponse v1;
v0 := @this: org.kohsuke.github.GitHubResponse;
v1 := @parameter0: org.kohsuke.github.connector.GitHubConnectorResponse;
v2 := @parameter1: java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = virtualinvoke v1.<org.kohsuke.github.connector.GitHubConnectorResponse: int statusCode()>();
v0.<org.kohsuke.github.GitHubResponse: int statusCode> = v3;
v4 = virtualinvoke v1.<org.kohsuke.github.connector.GitHubConnectorResponse: java.util.Map allHeaders()>();
v0.<org.kohsuke.github.GitHubResponse: java.util.Map headers> = v4;
v0.<org.kohsuke.github.GitHubResponse: java.lang.Object body> = v2;
return;
}
static java.lang.Object parseBody(org.kohsuke.github.connector.GitHubConnectorResponse, java.lang.Class) throws java.io.IOException
{
com.fasterxml.jackson.databind.InjectableValues$Std v8;
java.util.logging.Level v15;
com.fasterxml.jackson.databind.ObjectReader v10, v9;
int v2;
java.lang.String v13, v7;
org.kohsuke.github.connector.GitHubConnectorResponse v0;
boolean v3;
com.fasterxml.jackson.core.JsonProcessingException v12;
java.util.logging.Logger v14;
java.lang.Class v1, v4;
java.lang.Object v11, v5, v6;
v0 := @parameter0: org.kohsuke.github.connector.GitHubConnectorResponse;
v1 := @parameter1: java.lang.Class;
v2 = virtualinvoke v0.<org.kohsuke.github.connector.GitHubConnectorResponse: int statusCode()>();
if v2 != 204 goto label2;
if v1 == null goto label1;
v3 = virtualinvoke v1.<java.lang.Class: boolean isArray()>();
if v3 == 0 goto label1;
v4 = virtualinvoke v1.<java.lang.Class: java.lang.Class getComponentType()>();
v5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(v4, 0);
v6 = virtualinvoke v1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(v5);
return v6;
label1:
return null;
label2:
v7 = staticinvoke <org.kohsuke.github.GitHubResponse: java.lang.String getBodyAsString(org.kohsuke.github.connector.GitHubConnectorResponse)>(v0);
label3:
v8 = new com.fasterxml.jackson.databind.InjectableValues$Std;
specialinvoke v8.<com.fasterxml.jackson.databind.InjectableValues$Std: void <init>()>();
virtualinvoke v8.<com.fasterxml.jackson.databind.InjectableValues$Std: com.fasterxml.jackson.databind.InjectableValues$Std addValue(java.lang.Class,java.lang.Object)>(class "Lorg/kohsuke/github/connector/GitHubConnectorResponse;", v0);
v9 = staticinvoke <org.kohsuke.github.GitHubClient: com.fasterxml.jackson.databind.ObjectReader getMappingObjectReader(org.kohsuke.github.connector.GitHubConnectorResponse)>(v0);
v10 = virtualinvoke v9.<com.fasterxml.jackson.databind.ObjectReader: com.fasterxml.jackson.databind.ObjectReader forType(java.lang.Class)>(v1);
v11 = virtualinvoke v10.<com.fasterxml.jackson.databind.ObjectReader: java.lang.Object readValue(java.lang.String)>(v7);
label4:
return v11;
label5:
v12 := @caughtexception;
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to deserialize: \u0001");
v14 = <org.kohsuke.github.GitHubResponse: java.util.logging.Logger LOGGER>;
v15 = <java.util.logging.Level: java.util.logging.Level FINE>;
virtualinvoke v14.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>(v15, v13);
throw v12;
catch com.fasterxml.jackson.databind.JsonMappingException from label3 to label4 with label5;
catch com.fasterxml.jackson.core.JsonParseException from label3 to label4 with label5;
}
static java.lang.Object parseBody(org.kohsuke.github.connector.GitHubConnectorResponse, java.lang.Object) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonProcessingException v6;
java.util.logging.Logger v8;
java.util.logging.Level v9;
com.fasterxml.jackson.databind.ObjectReader v3, v4;
java.lang.Object v1, v5;
java.lang.String v2, v7;
org.kohsuke.github.connector.GitHubConnectorResponse v0;
v0 := @parameter0: org.kohsuke.github.connector.GitHubConnectorResponse;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <org.kohsuke.github.GitHubResponse: java.lang.String getBodyAsString(org.kohsuke.github.connector.GitHubConnectorResponse)>(v0);
label1:
v3 = staticinvoke <org.kohsuke.github.GitHubClient: com.fasterxml.jackson.databind.ObjectReader getMappingObjectReader(org.kohsuke.github.connector.GitHubConnectorResponse)>(v0);
v4 = virtualinvoke v3.<com.fasterxml.jackson.databind.ObjectReader: com.fasterxml.jackson.databind.ObjectReader withValueToUpdate(java.lang.Object)>(v1);
v5 = virtualinvoke v4.<com.fasterxml.jackson.databind.ObjectReader: java.lang.Object readValue(java.lang.String)>(v2);
label2:
return v5;
label3:
v6 := @caughtexception;
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to deserialize: \u0001");
v8 = <org.kohsuke.github.GitHubResponse: java.util.logging.Logger LOGGER>;
v9 = <java.util.logging.Level: java.util.logging.Level FINE>;
virtualinvoke v8.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>(v9, v7);
throw v6;
catch com.fasterxml.jackson.databind.JsonMappingException from label1 to label2 with label3;
catch com.fasterxml.jackson.core.JsonParseException from label1 to label2 with label3;
}
static java.lang.String getBodyAsString(org.kohsuke.github.connector.GitHubConnectorResponse) throws java.io.IOException
{
java.lang.Throwable v5;
java.nio.charset.Charset v3;
java.lang.String v4;
org.kohsuke.github.connector.GitHubConnectorResponse v0;
java.io.InputStreamReader v2;
java.io.InputStream v1;
v0 := @parameter0: org.kohsuke.github.connector.GitHubConnectorResponse;
v1 = virtualinvoke v0.<org.kohsuke.github.connector.GitHubConnectorResponse: java.io.InputStream bodyStream()>();
v2 = new java.io.InputStreamReader;
v3 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;
specialinvoke v2.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>(v1, v3);
label1:
v4 = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.Reader)>(v2);
label2:
virtualinvoke v2.<java.io.InputStreamReader: void close()>();
return v4;
label3:
v5 := @caughtexception;
throw v5;
catch java.lang.Throwable from label1 to label2 with label3;
}
static java.lang.String getBodyAsStringOrNull(org.kohsuke.github.connector.GitHubConnectorResponse)
{
java.io.IOException v2;
java.lang.String v1;
org.kohsuke.github.connector.GitHubConnectorResponse v0;
v0 := @parameter0: org.kohsuke.github.connector.GitHubConnectorResponse;
label1:
v1 = staticinvoke <org.kohsuke.github.GitHubResponse: java.lang.String getBodyAsString(org.kohsuke.github.connector.GitHubConnectorResponse)>(v0);
label2:
return v1;
label3:
v2 := @caughtexception;
return null;
catch java.io.IOException from label1 to label2 with label3;
}
public int statusCode()
{
int v1;
org.kohsuke.github.GitHubResponse v0;
v0 := @this: org.kohsuke.github.GitHubResponse;
v1 = v0.<org.kohsuke.github.GitHubResponse: int statusCode>;
return v1;
}
public java.util.List headers(java.lang.String)
{
java.util.Map v2;
org.kohsuke.github.GitHubResponse v0;
java.lang.Object v3;
java.lang.String v1;
v0 := @this: org.kohsuke.github.GitHubResponse;
v1 := @parameter0: java.lang.String;
v2 = v0.<org.kohsuke.github.GitHubResponse: java.util.Map headers>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
return v3;
}
public java.lang.String header(java.lang.String)
{
java.util.Map v2;
org.kohsuke.github.GitHubResponse v0;
java.lang.Object v3, v4;
java.lang.String v1;
v0 := @this: org.kohsuke.github.GitHubResponse;
v1 := @parameter0: java.lang.String;
v2 = v0.<org.kohsuke.github.GitHubResponse: java.util.Map headers>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v3 == null goto label1;
v4 = interfaceinvoke v3.<java.util.List: java.lang.Object get(int)>(0);
label1:
return v4;
}
public java.lang.Object body()
{
org.kohsuke.github.GitHubResponse v0;
java.lang.Object v1;
v0 := @this: org.kohsuke.github.GitHubResponse;
v1 = v0.<org.kohsuke.github.GitHubResponse: java.lang.Object body>;
return v1;
}
static void <clinit>()
{
java.lang.Class v0;
java.lang.String v1;
java.util.logging.Logger v2;
v0 = class "Lorg/kohsuke/github/GitHubResponse;";
v1 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>(v1);
<org.kohsuke.github.GitHubResponse: java.util.logging.Logger LOGGER> = v2;
return;
}
}