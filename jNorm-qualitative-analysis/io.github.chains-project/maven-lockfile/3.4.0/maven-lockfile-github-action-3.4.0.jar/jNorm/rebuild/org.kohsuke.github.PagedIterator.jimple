public class org.kohsuke.github.PagedIterator extends java.lang.Object implements java.util.Iterator
{
protected final java.util.Iterator base;
private final java.util.function.Consumer itemInitializer;
private java.lang.Object[] currentPage;
private int nextItemIndex;
void <init>(java.util.Iterator, java.util.function.Consumer)
{
java.util.function.Consumer v2;
org.kohsuke.github.PagedIterator v0;
java.util.Iterator v1;
v0 := @this: org.kohsuke.github.PagedIterator;
v1 := @parameter0: java.util.Iterator;
v2 := @parameter1: java.util.function.Consumer;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.kohsuke.github.PagedIterator: java.util.Iterator base> = v1;
v0.<org.kohsuke.github.PagedIterator: java.util.function.Consumer itemInitializer> = v2;
return;
}
protected void wrapUp(java.lang.Object[])
{
java.util.function.Consumer v2, v6;
java.lang.Object[] v1;
int v3, v4;
java.lang.Object v5;
org.kohsuke.github.PagedIterator v0;
v0 := @this: org.kohsuke.github.PagedIterator;
v1 := @parameter0: java.lang.Object[];
v2 = v0.<org.kohsuke.github.PagedIterator: java.util.function.Consumer itemInitializer>;
if v2 == null goto label2;
v3 = lengthof v1;
v4 = 0;
label1:
if v4 >= v3 goto label2;
v5 = v1[v4];
v6 = v0.<org.kohsuke.github.PagedIterator: java.util.function.Consumer itemInitializer>;
interfaceinvoke v6.<java.util.function.Consumer: void accept(java.lang.Object)>(v5);
v4 = v4 + 1;
goto label1;
label2:
return;
}
public boolean hasNext()
{
java.lang.Object[] v1, v2;
int v3, v4;
org.kohsuke.github.PagedIterator v0;
boolean v5;
v0 := @this: org.kohsuke.github.PagedIterator;
specialinvoke v0.<org.kohsuke.github.PagedIterator: void fetch()>();
v1 = v0.<org.kohsuke.github.PagedIterator: java.lang.Object[] currentPage>;
if v1 == null goto label1;
v2 = v0.<org.kohsuke.github.PagedIterator: java.lang.Object[] currentPage>;
v3 = lengthof v2;
v4 = v0.<org.kohsuke.github.PagedIterator: int nextItemIndex>;
if v3 <= v4 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
public java.lang.Object next()
{
java.lang.Object[] v3;
int v4, v5;
java.lang.Object v6;
org.kohsuke.github.PagedIterator v0;
java.util.NoSuchElementException v2;
boolean v1;
v0 := @this: org.kohsuke.github.PagedIterator;
v1 = virtualinvoke v0.<org.kohsuke.github.PagedIterator: boolean hasNext()>();
if v1 != 0 goto label1;
v2 = new java.util.NoSuchElementException;
specialinvoke v2.<java.util.NoSuchElementException: void <init>()>();
throw v2;
label1:
v3 = v0.<org.kohsuke.github.PagedIterator: java.lang.Object[] currentPage>;
v4 = v0.<org.kohsuke.github.PagedIterator: int nextItemIndex>;
v5 = v4 + 1;
v0.<org.kohsuke.github.PagedIterator: int nextItemIndex> = v5;
v6 = v3[v4];
return v6;
}
private void fetch()
{
java.lang.Object[] v1, v2;
java.util.Iterator v5, v7;
int v3, v4;
java.lang.Object v8, v9;
org.kohsuke.github.PagedIterator v0;
boolean v6;
v0 := @this: org.kohsuke.github.PagedIterator;
v1 = v0.<org.kohsuke.github.PagedIterator: java.lang.Object[] currentPage>;
if v1 == null goto label1;
v2 = v0.<org.kohsuke.github.PagedIterator: java.lang.Object[] currentPage>;
v3 = lengthof v2;
v4 = v0.<org.kohsuke.github.PagedIterator: int nextItemIndex>;
if v3 > v4 goto label2;
label1:
v5 = v0.<org.kohsuke.github.PagedIterator: java.util.Iterator base>;
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label2;
v7 = v0.<org.kohsuke.github.PagedIterator: java.util.Iterator base>;
v8 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
v9 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(v8);
virtualinvoke v0.<org.kohsuke.github.PagedIterator: void wrapUp(java.lang.Object[])>(v9);
v0.<org.kohsuke.github.PagedIterator: java.lang.Object[] currentPage> = v9;
v0.<org.kohsuke.github.PagedIterator: int nextItemIndex> = 0;
label2:
return;
}
public java.util.List nextPage()
{
java.util.List v2;
org.kohsuke.github.PagedIterator v0;
java.lang.Object[] v1;
v0 := @this: org.kohsuke.github.PagedIterator;
v1 = virtualinvoke v0.<org.kohsuke.github.PagedIterator: java.lang.Object[] nextPageArray()>();
v2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
return v2;
}
java.lang.Object[] nextPageArray()
{
java.lang.Object[] v1, v4, v5, v9;
int v10, v6, v7, v8;
org.kohsuke.github.PagedIterator v0;
java.util.NoSuchElementException v3;
boolean v2;
v0 := @this: org.kohsuke.github.PagedIterator;
v1 = v0.<org.kohsuke.github.PagedIterator: java.lang.Object[] currentPage>;
if v1 != null goto label1;
specialinvoke v0.<org.kohsuke.github.PagedIterator: void fetch()>();
goto label2;
label1:
v2 = virtualinvoke v0.<org.kohsuke.github.PagedIterator: boolean hasNext()>();
if v2 != 0 goto label2;
v3 = new java.util.NoSuchElementException;
specialinvoke v3.<java.util.NoSuchElementException: void <init>()>();
throw v3;
label2:
v4 = v0.<org.kohsuke.github.PagedIterator: java.lang.Object[] currentPage>;
virtualinvoke v4.<java.lang.Object: java.lang.Class getClass()>();
v5 = v0.<org.kohsuke.github.PagedIterator: java.lang.Object[] currentPage>;
v6 = v0.<org.kohsuke.github.PagedIterator: int nextItemIndex>;
if v6 == 0 goto label3;
v7 = v0.<org.kohsuke.github.PagedIterator: int nextItemIndex>;
v8 = lengthof v5;
v5 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>(v5, v7, v8);
label3:
v9 = v0.<org.kohsuke.github.PagedIterator: java.lang.Object[] currentPage>;
v10 = lengthof v9;
v0.<org.kohsuke.github.PagedIterator: int nextItemIndex> = v10;
return v5;
}
}