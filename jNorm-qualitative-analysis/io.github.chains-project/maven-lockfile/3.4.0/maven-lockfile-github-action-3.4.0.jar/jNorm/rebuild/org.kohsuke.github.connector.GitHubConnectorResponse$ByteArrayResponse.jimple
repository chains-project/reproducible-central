public abstract class org.kohsuke.github.connector.GitHubConnectorResponse$ByteArrayResponse extends org.kohsuke.github.connector.GitHubConnectorResponse
{
private boolean inputStreamRead;
private byte[] inputBytes;
private boolean isClosed;
protected void <init>(org.kohsuke.github.connector.GitHubConnectorRequest, int, java.util.Map)
{
org.kohsuke.github.connector.GitHubConnectorRequest v1;
java.util.Map v3;
org.kohsuke.github.connector.GitHubConnectorResponse$ByteArrayResponse v0;
int v2;
v0 := @this: org.kohsuke.github.connector.GitHubConnectorResponse$ByteArrayResponse;
v1 := @parameter0: org.kohsuke.github.connector.GitHubConnectorRequest;
v2 := @parameter1: int;
v3 := @parameter2: java.util.Map;
specialinvoke v0.<org.kohsuke.github.connector.GitHubConnectorResponse: void <init>(org.kohsuke.github.connector.GitHubConnectorRequest,int,java.util.Map)>(v1, v2, v3);
v0.<org.kohsuke.github.connector.GitHubConnectorResponse$ByteArrayResponse: boolean inputStreamRead> = 0;
v0.<org.kohsuke.github.connector.GitHubConnectorResponse$ByteArrayResponse: byte[] inputBytes> = null;
v0.<org.kohsuke.github.connector.GitHubConnectorResponse$ByteArrayResponse: boolean isClosed> = 0;
return;
}
public java.io.InputStream bodyStream() throws java.io.IOException
{
java.lang.Throwable v7, v8;
byte[] v12, v6, v9;
java.io.IOException v10, v2;
java.io.ByteArrayInputStream v11;
org.kohsuke.github.connector.GitHubConnectorResponse$ByteArrayResponse v0;
boolean v1, v3;
java.io.InputStream v4, v5;
v0 := @this: org.kohsuke.github.connector.GitHubConnectorResponse$ByteArrayResponse;
v1 = v0.<org.kohsuke.github.connector.GitHubConnectorResponse$ByteArrayResponse: boolean isClosed>;
if v1 == 0 goto label01;
v2 = new java.io.IOException;
specialinvoke v2.<java.io.IOException: void <init>(java.lang.String)>("Response is closed");
throw v2;
label01:
entermonitor v0;
label02:
v3 = v0.<org.kohsuke.github.connector.GitHubConnectorResponse$ByteArrayResponse: boolean inputStreamRead>;
if v3 != 0 goto label07;
v4 = virtualinvoke v0.<org.kohsuke.github.connector.GitHubConnectorResponse$ByteArrayResponse: java.io.InputStream rawBodyStream()>();
v5 = virtualinvoke v0.<org.kohsuke.github.connector.GitHubConnectorResponse$ByteArrayResponse: java.io.InputStream wrapStream(java.io.InputStream)>(v4);
label03:
if v5 == null goto label06;
v6 = staticinvoke <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream)>(v5);
v0.<org.kohsuke.github.connector.GitHubConnectorResponse$ByteArrayResponse: byte[] inputBytes> = v6;
label04:
if v5 == null goto label06;
virtualinvoke v5.<java.io.InputStream: void close()>();
goto label06;
label05:
v7 := @caughtexception;
throw v7;
label06:
v0.<org.kohsuke.github.connector.GitHubConnectorResponse$ByteArrayResponse: boolean inputStreamRead> = 1;
label07:
exitmonitor v0;
label08:
goto label10;
label09:
v8 := @caughtexception;
exitmonitor v0;
throw v8;
label10:
v9 = v0.<org.kohsuke.github.connector.GitHubConnectorResponse$ByteArrayResponse: byte[] inputBytes>;
if v9 != null goto label11;
v10 = new java.io.IOException;
specialinvoke v10.<java.io.IOException: void <init>(java.lang.String)>("Response body missing, stream null");
throw v10;
label11:
v11 = new java.io.ByteArrayInputStream;
v12 = v0.<org.kohsuke.github.connector.GitHubConnectorResponse$ByteArrayResponse: byte[] inputBytes>;
specialinvoke v11.<java.io.ByteArrayInputStream: void <init>(byte[])>(v12);
return v11;
catch java.lang.Throwable from label03 to label04 with label05;
catch java.lang.Throwable from label02 to label08 with label09;
}
protected abstract java.io.InputStream rawBodyStream() throws java.io.IOException;
public void close() throws java.io.IOException
{
org.kohsuke.github.connector.GitHubConnectorResponse$ByteArrayResponse v0;
v0 := @this: org.kohsuke.github.connector.GitHubConnectorResponse$ByteArrayResponse;
v0.<org.kohsuke.github.connector.GitHubConnectorResponse$ByteArrayResponse: boolean isClosed> = 1;
v0.<org.kohsuke.github.connector.GitHubConnectorResponse$ByteArrayResponse: byte[] inputBytes> = null;
return;
}
}