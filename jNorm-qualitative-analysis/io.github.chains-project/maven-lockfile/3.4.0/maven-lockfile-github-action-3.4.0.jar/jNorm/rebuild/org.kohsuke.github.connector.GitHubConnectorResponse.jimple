public abstract class org.kohsuke.github.connector.GitHubConnectorResponse extends java.lang.Object implements java.io.Closeable
{
private static final java.util.Comparator nullableCaseInsensitiveComparator;
private final int statusCode;
private final org.kohsuke.github.connector.GitHubConnectorRequest request;
private final java.util.Map headers;
protected void <init>(org.kohsuke.github.connector.GitHubConnectorRequest, int, java.util.Map)
{
java.util.Iterator v7;
org.kohsuke.github.connector.GitHubConnectorRequest v1;
java.util.Set v6;
java.util.ArrayList v11;
java.util.List v13;
java.util.TreeMap v4;
java.util.Map v14, v3;
int v2;
java.lang.Object v10, v12, v9;
java.util.Comparator v5;
org.kohsuke.github.connector.GitHubConnectorResponse v0;
boolean v8;
v0 := @this: org.kohsuke.github.connector.GitHubConnectorResponse;
v1 := @parameter0: org.kohsuke.github.connector.GitHubConnectorRequest;
v2 := @parameter1: int;
v3 := @parameter2: java.util.Map;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.kohsuke.github.connector.GitHubConnectorResponse: org.kohsuke.github.connector.GitHubConnectorRequest request> = v1;
v0.<org.kohsuke.github.connector.GitHubConnectorResponse: int statusCode> = v2;
v4 = new java.util.TreeMap;
v5 = <org.kohsuke.github.connector.GitHubConnectorResponse: java.util.Comparator nullableCaseInsensitiveComparator>;
specialinvoke v4.<java.util.TreeMap: void <init>(java.util.Comparator)>(v5);
v6 = interfaceinvoke v3.<java.util.Map: java.util.Set entrySet()>();
v7 = interfaceinvoke v6.<java.util.Set: java.util.Iterator iterator()>();
label1:
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label2;
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
v10 = interfaceinvoke v9.<java.util.Map$Entry: java.lang.Object getKey()>();
v11 = new java.util.ArrayList;
v12 = interfaceinvoke v9.<java.util.Map$Entry: java.lang.Object getValue()>();
specialinvoke v11.<java.util.ArrayList: void <init>(java.util.Collection)>(v12);
v13 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(v11);
virtualinvoke v4.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v10, v13);
goto label1;
label2:
v14 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(v4);
v0.<org.kohsuke.github.connector.GitHubConnectorResponse: java.util.Map headers> = v14;
return;
}
public java.net.HttpURLConnection toHttpURLConnection()
{
org.kohsuke.github.connector.GitHubConnectorResponse v0;
org.kohsuke.github.connector.GitHubConnectorResponseHttpUrlConnectionAdapter v1;
v0 := @this: org.kohsuke.github.connector.GitHubConnectorResponse;
v1 = new org.kohsuke.github.connector.GitHubConnectorResponseHttpUrlConnectionAdapter;
specialinvoke v1.<org.kohsuke.github.connector.GitHubConnectorResponseHttpUrlConnectionAdapter: void <init>(org.kohsuke.github.connector.GitHubConnectorResponse)>(v0);
return v1;
}
public java.lang.String header(java.lang.String)
{
java.util.Map v2, v4;
java.lang.Object v5, v6;
java.lang.String v1;
org.kohsuke.github.connector.GitHubConnectorResponse v0;
boolean v3;
v0 := @this: org.kohsuke.github.connector.GitHubConnectorResponse;
v1 := @parameter0: java.lang.String;
v2 = v0.<org.kohsuke.github.connector.GitHubConnectorResponse: java.util.Map headers>;
v3 = interfaceinvoke v2.<java.util.Map: boolean containsKey(java.lang.Object)>(v1);
if v3 == 0 goto label1;
v4 = v0.<org.kohsuke.github.connector.GitHubConnectorResponse: java.util.Map headers>;
v5 = interfaceinvoke v4.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
v6 = interfaceinvoke v5.<java.util.List: java.lang.Object get(int)>(0);
label1:
return v6;
}
public abstract java.io.InputStream bodyStream() throws java.io.IOException;
public org.kohsuke.github.connector.GitHubConnectorRequest request()
{
org.kohsuke.github.connector.GitHubConnectorRequest v1;
org.kohsuke.github.connector.GitHubConnectorResponse v0;
v0 := @this: org.kohsuke.github.connector.GitHubConnectorResponse;
v1 = v0.<org.kohsuke.github.connector.GitHubConnectorResponse: org.kohsuke.github.connector.GitHubConnectorRequest request>;
return v1;
}
public int statusCode()
{
int v1;
org.kohsuke.github.connector.GitHubConnectorResponse v0;
v0 := @this: org.kohsuke.github.connector.GitHubConnectorResponse;
v1 = v0.<org.kohsuke.github.connector.GitHubConnectorResponse: int statusCode>;
return v1;
}
public java.util.Map allHeaders()
{
org.kohsuke.github.connector.GitHubConnectorResponse v0;
java.util.Map v1;
v0 := @this: org.kohsuke.github.connector.GitHubConnectorResponse;
v1 = v0.<org.kohsuke.github.connector.GitHubConnectorResponse: java.util.Map headers>;
return v1;
}
protected java.io.InputStream wrapStream(java.io.InputStream) throws java.io.IOException
{
java.lang.UnsupportedOperationException v5;
java.util.zip.GZIPInputStream v4;
java.lang.String v2, v6;
org.kohsuke.github.connector.GitHubConnectorResponse v0;
boolean v3;
java.io.InputStream v1;
v0 := @this: org.kohsuke.github.connector.GitHubConnectorResponse;
v1 := @parameter0: java.io.InputStream;
v2 = virtualinvoke v0.<org.kohsuke.github.connector.GitHubConnectorResponse: java.lang.String header(java.lang.String)>("Content-Encoding");
if v2 == null goto label1;
if v1 != null goto label2;
label1:
return v1;
label2:
v3 = virtualinvoke v2.<java.lang.String: boolean equals(java.lang.Object)>("gzip");
if v3 == 0 goto label3;
v4 = new java.util.zip.GZIPInputStream;
specialinvoke v4.<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>(v1);
return v4;
label3:
v5 = new java.lang.UnsupportedOperationException;
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unexpected Content-Encoding: \u0001");
specialinvoke v5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(v6);
throw v5;
}
public final int parseInt(java.lang.String) throws java.lang.NumberFormatException
{
java.lang.NumberFormatException v4, v5;
int v3;
java.lang.String v1, v2, v6, v7;
org.kohsuke.github.connector.GitHubConnectorResponse v0;
v0 := @this: org.kohsuke.github.connector.GitHubConnectorResponse;
v1 := @parameter0: java.lang.String;
label1:
v2 = virtualinvoke v0.<org.kohsuke.github.connector.GitHubConnectorResponse: java.lang.String header(java.lang.String)>(v1);
v3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v2);
label2:
return v3;
label3:
v4 := @caughtexception;
v5 = new java.lang.NumberFormatException;
v6 = virtualinvoke v4.<java.lang.NumberFormatException: java.lang.String getMessage()>();
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v1, v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001: \u0001");
specialinvoke v5.<java.lang.NumberFormatException: void <init>(java.lang.String)>(v7);
throw v5;
catch java.lang.NumberFormatException from label1 to label2 with label3;
}
static void <clinit>()
{
java.util.Comparator v0, v1;
v0 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;
v1 = staticinvoke <java.util.Comparator: java.util.Comparator nullsFirst(java.util.Comparator)>(v0);
<org.kohsuke.github.connector.GitHubConnectorResponse: java.util.Comparator nullableCaseInsensitiveComparator> = v1;
return;
}
}