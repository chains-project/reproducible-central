public interface  org.slf4j.Logger extends java.lang.Object
{
public static final java.lang.String ROOT_LOGGER_NAME;
public abstract java.lang.String getName();
public org.slf4j.spi.LoggingEventBuilder makeLoggingEventBuilder(org.slf4j.event.Level)
{
org.slf4j.Logger v0;
org.slf4j.event.Level v1;
org.slf4j.spi.DefaultLoggingEventBuilder v2;
v0 := @this: org.slf4j.Logger;
v1 := @parameter0: org.slf4j.event.Level;
v2 = new org.slf4j.spi.DefaultLoggingEventBuilder;
specialinvoke v2.<org.slf4j.spi.DefaultLoggingEventBuilder: void <init>(org.slf4j.Logger,org.slf4j.event.Level)>(v0, v1);
return v2;
}
public org.slf4j.spi.LoggingEventBuilder atLevel(org.slf4j.event.Level)
{
org.slf4j.Logger v0;
org.slf4j.event.Level v1;
org.slf4j.spi.LoggingEventBuilder v3, v4;
boolean v2;
v0 := @this: org.slf4j.Logger;
v1 := @parameter0: org.slf4j.event.Level;
v2 = interfaceinvoke v0.<org.slf4j.Logger: boolean isEnabledForLevel(org.slf4j.event.Level)>(v1);
if v2 == 0 goto label1;
v3 = interfaceinvoke v0.<org.slf4j.Logger: org.slf4j.spi.LoggingEventBuilder makeLoggingEventBuilder(org.slf4j.event.Level)>(v1);
return v3;
label1:
v4 = staticinvoke <org.slf4j.spi.NOPLoggingEventBuilder: org.slf4j.spi.LoggingEventBuilder singleton()>();
return v4;
}
public boolean isEnabledForLevel(org.slf4j.event.Level)
{
org.slf4j.Logger v0;
java.lang.IllegalArgumentException v8;
org.slf4j.event.Level v1;
int v2;
java.lang.String v9;
boolean v3, v4, v5, v6, v7;
v0 := @this: org.slf4j.Logger;
v1 := @parameter0: org.slf4j.event.Level;
v2 = virtualinvoke v1.<org.slf4j.event.Level: int toInt()>();
lookupswitch(v2)
{
case 0: goto label1;
case 10: goto label2;
case 20: goto label3;
case 30: goto label4;
case 40: goto label5;
default: goto label6;
};
label1:
v3 = interfaceinvoke v0.<org.slf4j.Logger: boolean isTraceEnabled()>();
return v3;
label2:
v4 = interfaceinvoke v0.<org.slf4j.Logger: boolean isDebugEnabled()>();
return v4;
label3:
v5 = interfaceinvoke v0.<org.slf4j.Logger: boolean isInfoEnabled()>();
return v5;
label4:
v6 = interfaceinvoke v0.<org.slf4j.Logger: boolean isWarnEnabled()>();
return v6;
label5:
v7 = interfaceinvoke v0.<org.slf4j.Logger: boolean isErrorEnabled()>();
return v7;
label6:
v8 = new java.lang.IllegalArgumentException;
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.slf4j.event.Level)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Level [\u0001] not recognized.");
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v9);
throw v8;
}
public abstract boolean isTraceEnabled();
public abstract void trace(java.lang.String);
public abstract void trace(java.lang.String, java.lang.Object);
public abstract void trace(java.lang.String, java.lang.Object, java.lang.Object);
public abstract transient void trace(java.lang.String, java.lang.Object[]);
public abstract void trace(java.lang.String, java.lang.Throwable);
public abstract boolean isTraceEnabled(org.slf4j.Marker);
public org.slf4j.spi.LoggingEventBuilder atTrace()
{
org.slf4j.Logger v0;
org.slf4j.event.Level v2;
org.slf4j.spi.LoggingEventBuilder v3, v4;
boolean v1;
v0 := @this: org.slf4j.Logger;
v1 = interfaceinvoke v0.<org.slf4j.Logger: boolean isTraceEnabled()>();
if v1 == 0 goto label1;
v2 = <org.slf4j.event.Level: org.slf4j.event.Level TRACE>;
v3 = interfaceinvoke v0.<org.slf4j.Logger: org.slf4j.spi.LoggingEventBuilder makeLoggingEventBuilder(org.slf4j.event.Level)>(v2);
return v3;
label1:
v4 = staticinvoke <org.slf4j.spi.NOPLoggingEventBuilder: org.slf4j.spi.LoggingEventBuilder singleton()>();
return v4;
}
public abstract void trace(org.slf4j.Marker, java.lang.String);
public abstract void trace(org.slf4j.Marker, java.lang.String, java.lang.Object);
public abstract void trace(org.slf4j.Marker, java.lang.String, java.lang.Object, java.lang.Object);
public abstract transient void trace(org.slf4j.Marker, java.lang.String, java.lang.Object[]);
public abstract void trace(org.slf4j.Marker, java.lang.String, java.lang.Throwable);
public abstract boolean isDebugEnabled();
public abstract void debug(java.lang.String);
public abstract void debug(java.lang.String, java.lang.Object);
public abstract void debug(java.lang.String, java.lang.Object, java.lang.Object);
public abstract transient void debug(java.lang.String, java.lang.Object[]);
public abstract void debug(java.lang.String, java.lang.Throwable);
public abstract boolean isDebugEnabled(org.slf4j.Marker);
public abstract void debug(org.slf4j.Marker, java.lang.String);
public abstract void debug(org.slf4j.Marker, java.lang.String, java.lang.Object);
public abstract void debug(org.slf4j.Marker, java.lang.String, java.lang.Object, java.lang.Object);
public abstract transient void debug(org.slf4j.Marker, java.lang.String, java.lang.Object[]);
public abstract void debug(org.slf4j.Marker, java.lang.String, java.lang.Throwable);
public org.slf4j.spi.LoggingEventBuilder atDebug()
{
org.slf4j.Logger v0;
org.slf4j.event.Level v2;
org.slf4j.spi.LoggingEventBuilder v3, v4;
boolean v1;
v0 := @this: org.slf4j.Logger;
v1 = interfaceinvoke v0.<org.slf4j.Logger: boolean isDebugEnabled()>();
if v1 == 0 goto label1;
v2 = <org.slf4j.event.Level: org.slf4j.event.Level DEBUG>;
v3 = interfaceinvoke v0.<org.slf4j.Logger: org.slf4j.spi.LoggingEventBuilder makeLoggingEventBuilder(org.slf4j.event.Level)>(v2);
return v3;
label1:
v4 = staticinvoke <org.slf4j.spi.NOPLoggingEventBuilder: org.slf4j.spi.LoggingEventBuilder singleton()>();
return v4;
}
public abstract boolean isInfoEnabled();
public abstract void info(java.lang.String);
public abstract void info(java.lang.String, java.lang.Object);
public abstract void info(java.lang.String, java.lang.Object, java.lang.Object);
public abstract transient void info(java.lang.String, java.lang.Object[]);
public abstract void info(java.lang.String, java.lang.Throwable);
public abstract boolean isInfoEnabled(org.slf4j.Marker);
public abstract void info(org.slf4j.Marker, java.lang.String);
public abstract void info(org.slf4j.Marker, java.lang.String, java.lang.Object);
public abstract void info(org.slf4j.Marker, java.lang.String, java.lang.Object, java.lang.Object);
public abstract transient void info(org.slf4j.Marker, java.lang.String, java.lang.Object[]);
public abstract void info(org.slf4j.Marker, java.lang.String, java.lang.Throwable);
public org.slf4j.spi.LoggingEventBuilder atInfo()
{
org.slf4j.Logger v0;
org.slf4j.event.Level v2;
org.slf4j.spi.LoggingEventBuilder v3, v4;
boolean v1;
v0 := @this: org.slf4j.Logger;
v1 = interfaceinvoke v0.<org.slf4j.Logger: boolean isInfoEnabled()>();
if v1 == 0 goto label1;
v2 = <org.slf4j.event.Level: org.slf4j.event.Level INFO>;
v3 = interfaceinvoke v0.<org.slf4j.Logger: org.slf4j.spi.LoggingEventBuilder makeLoggingEventBuilder(org.slf4j.event.Level)>(v2);
return v3;
label1:
v4 = staticinvoke <org.slf4j.spi.NOPLoggingEventBuilder: org.slf4j.spi.LoggingEventBuilder singleton()>();
return v4;
}
public abstract boolean isWarnEnabled();
public abstract void warn(java.lang.String);
public abstract void warn(java.lang.String, java.lang.Object);
public abstract transient void warn(java.lang.String, java.lang.Object[]);
public abstract void warn(java.lang.String, java.lang.Object, java.lang.Object);
public abstract void warn(java.lang.String, java.lang.Throwable);
public abstract boolean isWarnEnabled(org.slf4j.Marker);
public abstract void warn(org.slf4j.Marker, java.lang.String);
public abstract void warn(org.slf4j.Marker, java.lang.String, java.lang.Object);
public abstract void warn(org.slf4j.Marker, java.lang.String, java.lang.Object, java.lang.Object);
public abstract transient void warn(org.slf4j.Marker, java.lang.String, java.lang.Object[]);
public abstract void warn(org.slf4j.Marker, java.lang.String, java.lang.Throwable);
public org.slf4j.spi.LoggingEventBuilder atWarn()
{
org.slf4j.Logger v0;
org.slf4j.event.Level v2;
org.slf4j.spi.LoggingEventBuilder v3, v4;
boolean v1;
v0 := @this: org.slf4j.Logger;
v1 = interfaceinvoke v0.<org.slf4j.Logger: boolean isWarnEnabled()>();
if v1 == 0 goto label1;
v2 = <org.slf4j.event.Level: org.slf4j.event.Level WARN>;
v3 = interfaceinvoke v0.<org.slf4j.Logger: org.slf4j.spi.LoggingEventBuilder makeLoggingEventBuilder(org.slf4j.event.Level)>(v2);
return v3;
label1:
v4 = staticinvoke <org.slf4j.spi.NOPLoggingEventBuilder: org.slf4j.spi.LoggingEventBuilder singleton()>();
return v4;
}
public abstract boolean isErrorEnabled();
public abstract void error(java.lang.String);
public abstract void error(java.lang.String, java.lang.Object);
public abstract void error(java.lang.String, java.lang.Object, java.lang.Object);
public abstract transient void error(java.lang.String, java.lang.Object[]);
public abstract void error(java.lang.String, java.lang.Throwable);
public abstract boolean isErrorEnabled(org.slf4j.Marker);
public abstract void error(org.slf4j.Marker, java.lang.String);
public abstract void error(org.slf4j.Marker, java.lang.String, java.lang.Object);
public abstract void error(org.slf4j.Marker, java.lang.String, java.lang.Object, java.lang.Object);
public abstract transient void error(org.slf4j.Marker, java.lang.String, java.lang.Object[]);
public abstract void error(org.slf4j.Marker, java.lang.String, java.lang.Throwable);
public org.slf4j.spi.LoggingEventBuilder atError()
{
org.slf4j.Logger v0;
org.slf4j.event.Level v2;
org.slf4j.spi.LoggingEventBuilder v3, v4;
boolean v1;
v0 := @this: org.slf4j.Logger;
v1 = interfaceinvoke v0.<org.slf4j.Logger: boolean isErrorEnabled()>();
if v1 == 0 goto label1;
v2 = <org.slf4j.event.Level: org.slf4j.event.Level ERROR>;
v3 = interfaceinvoke v0.<org.slf4j.Logger: org.slf4j.spi.LoggingEventBuilder makeLoggingEventBuilder(org.slf4j.event.Level)>(v2);
return v3;
label1:
v4 = staticinvoke <org.slf4j.spi.NOPLoggingEventBuilder: org.slf4j.spi.LoggingEventBuilder singleton()>();
return v4;
}
}