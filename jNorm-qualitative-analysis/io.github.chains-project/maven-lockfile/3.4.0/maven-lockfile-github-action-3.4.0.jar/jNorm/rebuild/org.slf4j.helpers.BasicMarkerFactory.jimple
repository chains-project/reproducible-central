public class org.slf4j.helpers.BasicMarkerFactory extends java.lang.Object implements org.slf4j.IMarkerFactory
{
private final java.util.concurrent.ConcurrentMap markerMap;
public void <init>()
{
java.util.concurrent.ConcurrentHashMap v1;
org.slf4j.helpers.BasicMarkerFactory v0;
v0 := @this: org.slf4j.helpers.BasicMarkerFactory;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v0.<org.slf4j.helpers.BasicMarkerFactory: java.util.concurrent.ConcurrentMap markerMap> = v1;
return;
}
public org.slf4j.Marker getMarker(java.lang.String)
{
java.lang.IllegalArgumentException v2;
java.util.concurrent.ConcurrentMap v3, v6;
org.slf4j.helpers.BasicMarkerFactory v0;
java.lang.Object v4, v7;
org.slf4j.helpers.BasicMarker v5;
java.lang.String v1;
v0 := @this: org.slf4j.helpers.BasicMarkerFactory;
v1 := @parameter0: java.lang.String;
if v1 != null goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Marker name cannot be null");
throw v2;
label1:
v3 = v0.<org.slf4j.helpers.BasicMarkerFactory: java.util.concurrent.ConcurrentMap markerMap>;
v4 = interfaceinvoke v3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v1);
if v4 != null goto label2;
v5 = new org.slf4j.helpers.BasicMarker;
specialinvoke v5.<org.slf4j.helpers.BasicMarker: void <init>(java.lang.String)>(v1);
v4 = v5;
v6 = v0.<org.slf4j.helpers.BasicMarkerFactory: java.util.concurrent.ConcurrentMap markerMap>;
v7 = interfaceinvoke v6.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(v1, v5);
if v7 == null goto label2;
v4 = v7;
label2:
return v4;
}
public boolean exists(java.lang.String)
{
org.slf4j.helpers.BasicMarkerFactory v0;
java.lang.String v1;
boolean v3;
java.util.concurrent.ConcurrentMap v2;
v0 := @this: org.slf4j.helpers.BasicMarkerFactory;
v1 := @parameter0: java.lang.String;
if v1 != null goto label1;
return 0;
label1:
v2 = v0.<org.slf4j.helpers.BasicMarkerFactory: java.util.concurrent.ConcurrentMap markerMap>;
v3 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(v1);
return v3;
}
public boolean detachMarker(java.lang.String)
{
org.slf4j.helpers.BasicMarkerFactory v0;
java.lang.Object v3;
java.lang.String v1;
boolean v4;
java.util.concurrent.ConcurrentMap v2;
v0 := @this: org.slf4j.helpers.BasicMarkerFactory;
v1 := @parameter0: java.lang.String;
if v1 != null goto label1;
return 0;
label1:
v2 = v0.<org.slf4j.helpers.BasicMarkerFactory: java.util.concurrent.ConcurrentMap markerMap>;
v3 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(v1);
if v3 == null goto label2;
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
return v4;
}
public org.slf4j.Marker getDetachedMarker(java.lang.String)
{
org.slf4j.helpers.BasicMarker v2;
java.lang.String v1;
org.slf4j.helpers.BasicMarkerFactory v0;
v0 := @this: org.slf4j.helpers.BasicMarkerFactory;
v1 := @parameter0: java.lang.String;
v2 = new org.slf4j.helpers.BasicMarker;
specialinvoke v2.<org.slf4j.helpers.BasicMarker: void <init>(java.lang.String)>(v1);
return v2;
}
}