public final class org.slf4j.helpers.MessageFormatter extends java.lang.Object
{
static final char DELIM_START;
static final char DELIM_STOP;
static final java.lang.String DELIM_STR;
private static final char ESCAPE_CHAR;
public void <init>()
{
org.slf4j.helpers.MessageFormatter v0;
v0 := @this: org.slf4j.helpers.MessageFormatter;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static final org.slf4j.helpers.FormattingTuple format(java.lang.String, java.lang.Object)
{
java.lang.Object[] v2;
java.lang.Object v1;
java.lang.String v0;
org.slf4j.helpers.FormattingTuple v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.Object;
v2 = newarray (java.lang.Object)[1];
v2[0] = v1;
v3 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>(v0, v2);
return v3;
}
public static final org.slf4j.helpers.FormattingTuple format(java.lang.String, java.lang.Object, java.lang.Object)
{
java.lang.Object[] v3;
java.lang.Object v1, v2;
java.lang.String v0;
org.slf4j.helpers.FormattingTuple v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: java.lang.Object;
v3 = newarray (java.lang.Object)[2];
v3[0] = v1;
v3[1] = v2;
v4 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])>(v0, v3);
return v4;
}
public static final org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String, java.lang.Object[])
{
java.lang.Throwable v2;
java.lang.Object[] v1, v3;
java.lang.String v0;
org.slf4j.helpers.FormattingTuple v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.Object[];
v2 = staticinvoke <org.slf4j.helpers.MessageFormatter: java.lang.Throwable getThrowableCandidate(java.lang.Object[])>(v1);
v3 = v1;
if v2 == null goto label1;
v3 = staticinvoke <org.slf4j.helpers.MessageFormatter: java.lang.Object[] trimmedCopy(java.lang.Object[])>(v1);
label1:
v4 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[],java.lang.Throwable)>(v0, v3, v2);
return v4;
}
public static final java.lang.String basicArrayFormat(java.lang.String, java.lang.Object[])
{
java.lang.Object[] v1;
java.lang.String v0, v3;
org.slf4j.helpers.FormattingTuple v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.Object[];
v2 = staticinvoke <org.slf4j.helpers.MessageFormatter: org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[],java.lang.Throwable)>(v0, v1, null);
v3 = virtualinvoke v2.<org.slf4j.helpers.FormattingTuple: java.lang.String getMessage()>();
return v3;
}
public static java.lang.String basicArrayFormat(org.slf4j.helpers.NormalizedParameters)
{
org.slf4j.helpers.NormalizedParameters v0;
java.lang.Object[] v2;
java.lang.String v1, v3;
v0 := @parameter0: org.slf4j.helpers.NormalizedParameters;
v1 = virtualinvoke v0.<org.slf4j.helpers.NormalizedParameters: java.lang.String getMessage()>();
v2 = virtualinvoke v0.<org.slf4j.helpers.NormalizedParameters: java.lang.Object[] getArguments()>();
v3 = staticinvoke <org.slf4j.helpers.MessageFormatter: java.lang.String basicArrayFormat(java.lang.String,java.lang.Object[])>(v1, v2);
return v3;
}
public static final org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String, java.lang.Object[], java.lang.Throwable)
{
java.lang.Throwable v2;
java.lang.Object[] v1;
java.util.HashMap v22, v24;
int v10, v11, v12, v14, v19, v20, v25, v5, v7, v8, v9;
java.lang.String v0, v16, v27;
boolean v17, v18;
org.slf4j.helpers.FormattingTuple v13, v15, v26, v3, v4;
java.lang.Object v21, v23;
java.lang.StringBuilder v6;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.Object[];
v2 := @parameter2: java.lang.Throwable;
if v0 != null goto label1;
v3 = new org.slf4j.helpers.FormattingTuple;
specialinvoke v3.<org.slf4j.helpers.FormattingTuple: void <init>(java.lang.String,java.lang.Object[],java.lang.Throwable)>(null, v1, v2);
return v3;
label1:
if v1 != null goto label2;
v4 = new org.slf4j.helpers.FormattingTuple;
specialinvoke v4.<org.slf4j.helpers.FormattingTuple: void <init>(java.lang.String)>(v0);
return v4;
label2:
v5 = 0;
v6 = new java.lang.StringBuilder;
v7 = virtualinvoke v0.<java.lang.String: int length()>();
v8 = v7 + 50;
specialinvoke v6.<java.lang.StringBuilder: void <init>(int)>(v8);
v9 = 0;
label3:
v10 = lengthof v1;
if v9 >= v10 goto label9;
v11 = virtualinvoke v0.<java.lang.String: int indexOf(java.lang.String,int)>("{}", v5);
v12 = (int) -1;
if v11 != v12 goto label5;
if v5 != 0 goto label4;
v13 = new org.slf4j.helpers.FormattingTuple;
specialinvoke v13.<org.slf4j.helpers.FormattingTuple: void <init>(java.lang.String,java.lang.Object[],java.lang.Throwable)>(v0, v1, v2);
return v13;
label4:
v14 = virtualinvoke v0.<java.lang.String: int length()>();
virtualinvoke v6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(v0, v5, v14);
v15 = new org.slf4j.helpers.FormattingTuple;
v16 = virtualinvoke v6.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke v15.<org.slf4j.helpers.FormattingTuple: void <init>(java.lang.String,java.lang.Object[],java.lang.Throwable)>(v16, v1, v2);
return v15;
label5:
v17 = staticinvoke <org.slf4j.helpers.MessageFormatter: boolean isEscapedDelimeter(java.lang.String,int)>(v0, v11);
if v17 == 0 goto label7;
v18 = staticinvoke <org.slf4j.helpers.MessageFormatter: boolean isDoubleEscaped(java.lang.String,int)>(v0, v11);
if v18 != 0 goto label6;
v9 = v9 - 1;
v19 = v11 - 1;
virtualinvoke v6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(v0, v5, v19);
virtualinvoke v6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);
v5 = v11 + 1;
goto label8;
label6:
v20 = v11 - 1;
virtualinvoke v6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(v0, v5, v20);
v21 = v1[v9];
v22 = new java.util.HashMap;
specialinvoke v22.<java.util.HashMap: void <init>()>();
staticinvoke <org.slf4j.helpers.MessageFormatter: void deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map)>(v6, v21, v22);
v5 = v11 + 2;
goto label8;
label7:
virtualinvoke v6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(v0, v5, v11);
v23 = v1[v9];
v24 = new java.util.HashMap;
specialinvoke v24.<java.util.HashMap: void <init>()>();
staticinvoke <org.slf4j.helpers.MessageFormatter: void deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map)>(v6, v23, v24);
v5 = v11 + 2;
label8:
v9 = v9 + 1;
goto label3;
label9:
v25 = virtualinvoke v0.<java.lang.String: int length()>();
virtualinvoke v6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(v0, v5, v25);
v26 = new org.slf4j.helpers.FormattingTuple;
v27 = virtualinvoke v6.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke v26.<org.slf4j.helpers.FormattingTuple: void <init>(java.lang.String,java.lang.Object[],java.lang.Throwable)>(v27, v1, v2);
return v26;
}
static final boolean isEscapedDelimeter(java.lang.String, int)
{
int v1, v2;
char v3;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
if v1 != 0 goto label1;
return 0;
label1:
v2 = v1 - 1;
v3 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v2);
if v3 != 92 goto label2;
return 1;
label2:
return 0;
}
static final boolean isDoubleEscaped(java.lang.String, int)
{
int v1, v2;
char v3;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
if v1 < 2 goto label1;
v2 = v1 - 2;
v3 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v2);
if v3 != 92 goto label1;
return 1;
label1:
return 0;
}
private static void deeplyAppendParameter(java.lang.StringBuilder, java.lang.Object, java.util.Map)
{
java.util.Map v2;
java.lang.Class v3;
java.lang.Object v1;
java.lang.StringBuilder v0;
boolean v10, v11, v12, v4, v5, v6, v7, v8, v9;
v0 := @parameter0: java.lang.StringBuilder;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: java.util.Map;
if v1 != null goto label01;
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null");
return;
label01:
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v4 = virtualinvoke v3.<java.lang.Class: boolean isArray()>();
if v4 != 0 goto label02;
staticinvoke <org.slf4j.helpers.MessageFormatter: void safeObjectAppend(java.lang.StringBuilder,java.lang.Object)>(v0, v1);
goto label11;
label02:
v5 = v1 instanceof boolean[];
if v5 == 0 goto label03;
staticinvoke <org.slf4j.helpers.MessageFormatter: void booleanArrayAppend(java.lang.StringBuilder,boolean[])>(v0, v1);
goto label11;
label03:
v6 = v1 instanceof byte[];
if v6 == 0 goto label04;
staticinvoke <org.slf4j.helpers.MessageFormatter: void byteArrayAppend(java.lang.StringBuilder,byte[])>(v0, v1);
goto label11;
label04:
v7 = v1 instanceof char[];
if v7 == 0 goto label05;
staticinvoke <org.slf4j.helpers.MessageFormatter: void charArrayAppend(java.lang.StringBuilder,char[])>(v0, v1);
goto label11;
label05:
v8 = v1 instanceof short[];
if v8 == 0 goto label06;
staticinvoke <org.slf4j.helpers.MessageFormatter: void shortArrayAppend(java.lang.StringBuilder,short[])>(v0, v1);
goto label11;
label06:
v9 = v1 instanceof int[];
if v9 == 0 goto label07;
staticinvoke <org.slf4j.helpers.MessageFormatter: void intArrayAppend(java.lang.StringBuilder,int[])>(v0, v1);
goto label11;
label07:
v10 = v1 instanceof long[];
if v10 == 0 goto label08;
staticinvoke <org.slf4j.helpers.MessageFormatter: void longArrayAppend(java.lang.StringBuilder,long[])>(v0, v1);
goto label11;
label08:
v11 = v1 instanceof float[];
if v11 == 0 goto label09;
staticinvoke <org.slf4j.helpers.MessageFormatter: void floatArrayAppend(java.lang.StringBuilder,float[])>(v0, v1);
goto label11;
label09:
v12 = v1 instanceof double[];
if v12 == 0 goto label10;
staticinvoke <org.slf4j.helpers.MessageFormatter: void doubleArrayAppend(java.lang.StringBuilder,double[])>(v0, v1);
goto label11;
label10:
staticinvoke <org.slf4j.helpers.MessageFormatter: void objectArrayAppend(java.lang.StringBuilder,java.lang.Object[],java.util.Map)>(v0, v1, v2);
label11:
return;
}
private static void safeObjectAppend(java.lang.StringBuilder, java.lang.Object)
{
java.lang.Throwable v3;
java.lang.Class v4;
java.lang.Object v1;
java.lang.StringBuilder v0;
java.lang.String v2, v5, v6;
v0 := @parameter0: java.lang.StringBuilder;
v1 := @parameter1: java.lang.Object;
label1:
v2 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v2);
label2:
goto label4;
label3:
v3 := @caughtexception;
v4 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v5 = virtualinvoke v4.<java.lang.Class: java.lang.String getName()>();
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("SLF4J: Failed toString() invocation on an object of type [\u0001]");
staticinvoke <org.slf4j.helpers.Util: void report(java.lang.String,java.lang.Throwable)>(v6, v3);
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[FAILED toString()]");
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
private static void objectArrayAppend(java.lang.StringBuilder, java.lang.Object[], java.util.Map)
{
java.lang.Object[] v1;
java.util.Map v2;
int v4, v5, v7;
java.lang.Object v6;
java.lang.StringBuilder v0;
boolean v3;
v0 := @parameter0: java.lang.StringBuilder;
v1 := @parameter1: java.lang.Object[];
v2 := @parameter2: java.util.Map;
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);
v3 = interfaceinvoke v2.<java.util.Map: boolean containsKey(java.lang.Object)>(v1);
if v3 != 0 goto label4;
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, null);
v4 = lengthof v1;
v5 = 0;
label1:
if v5 >= v4 goto label3;
v6 = v1[v5];
staticinvoke <org.slf4j.helpers.MessageFormatter: void deeplyAppendParameter(java.lang.StringBuilder,java.lang.Object,java.util.Map)>(v0, v6, v2);
v7 = v4 - 1;
if v5 == v7 goto label2;
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
label2:
v5 = v5 + 1;
goto label1;
label3:
interfaceinvoke v2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v1);
goto label5;
label4:
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...");
label5:
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);
return;
}
private static void booleanArrayAppend(java.lang.StringBuilder, boolean[])
{
boolean[] v1;
int v2, v3, v5;
java.lang.StringBuilder v0;
boolean v4;
v0 := @parameter0: java.lang.StringBuilder;
v1 := @parameter1: boolean[];
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label3;
v4 = v1[v3];
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(v4);
v5 = v2 - 1;
if v3 == v5 goto label2;
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
label2:
v3 = v3 + 1;
goto label1;
label3:
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);
return;
}
private static void byteArrayAppend(java.lang.StringBuilder, byte[])
{
byte[] v1;
byte v4;
int v2, v3, v5;
java.lang.StringBuilder v0;
v0 := @parameter0: java.lang.StringBuilder;
v1 := @parameter1: byte[];
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label3;
v4 = v1[v3];
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v4);
v5 = v2 - 1;
if v3 == v5 goto label2;
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
label2:
v3 = v3 + 1;
goto label1;
label3:
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);
return;
}
private static void charArrayAppend(java.lang.StringBuilder, char[])
{
int v2, v3, v5;
char[] v1;
char v4;
java.lang.StringBuilder v0;
v0 := @parameter0: java.lang.StringBuilder;
v1 := @parameter1: char[];
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label3;
v4 = v1[v3];
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v4);
v5 = v2 - 1;
if v3 == v5 goto label2;
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
label2:
v3 = v3 + 1;
goto label1;
label3:
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);
return;
}
private static void shortArrayAppend(java.lang.StringBuilder, short[])
{
short v4;
int v2, v3, v5;
java.lang.StringBuilder v0;
short[] v1;
v0 := @parameter0: java.lang.StringBuilder;
v1 := @parameter1: short[];
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label3;
v4 = v1[v3];
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v4);
v5 = v2 - 1;
if v3 == v5 goto label2;
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
label2:
v3 = v3 + 1;
goto label1;
label3:
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);
return;
}
private static void intArrayAppend(java.lang.StringBuilder, int[])
{
int[] v1;
int v2, v3, v4, v5;
java.lang.StringBuilder v0;
v0 := @parameter0: java.lang.StringBuilder;
v1 := @parameter1: int[];
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label3;
v4 = v1[v3];
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v4);
v5 = v2 - 1;
if v3 == v5 goto label2;
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
label2:
v3 = v3 + 1;
goto label1;
label3:
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);
return;
}
private static void longArrayAppend(java.lang.StringBuilder, long[])
{
long[] v1;
int v2, v3, v5;
java.lang.StringBuilder v0;
long v4;
v0 := @parameter0: java.lang.StringBuilder;
v1 := @parameter1: long[];
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label3;
v4 = v1[v3];
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(v4);
v5 = v2 - 1;
if v3 == v5 goto label2;
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
label2:
v3 = v3 + 1;
goto label1;
label3:
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);
return;
}
private static void floatArrayAppend(java.lang.StringBuilder, float[])
{
int v2, v3, v5;
float v4;
float[] v1;
java.lang.StringBuilder v0;
v0 := @parameter0: java.lang.StringBuilder;
v1 := @parameter1: float[];
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label3;
v4 = v1[v3];
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(v4);
v5 = v2 - 1;
if v3 == v5 goto label2;
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
label2:
v3 = v3 + 1;
goto label1;
label3:
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);
return;
}
private static void doubleArrayAppend(java.lang.StringBuilder, double[])
{
double[] v1;
int v2, v3, v5;
java.lang.StringBuilder v0;
double v4;
v0 := @parameter0: java.lang.StringBuilder;
v1 := @parameter1: double[];
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label3;
v4 = v1[v3];
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(v4);
v5 = v2 - 1;
if v3 == v5 goto label2;
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
label2:
v3 = v3 + 1;
goto label1;
label3:
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);
return;
}
public static java.lang.Throwable getThrowableCandidate(java.lang.Object[])
{
java.lang.Throwable v1;
java.lang.Object[] v0;
v0 := @parameter0: java.lang.Object[];
v1 = staticinvoke <org.slf4j.helpers.NormalizedParameters: java.lang.Throwable getThrowableCandidate(java.lang.Object[])>(v0);
return v1;
}
public static java.lang.Object[] trimmedCopy(java.lang.Object[])
{
java.lang.Object[] v0, v1;
v0 := @parameter0: java.lang.Object[];
v1 = staticinvoke <org.slf4j.helpers.NormalizedParameters: java.lang.Object[] trimmedCopy(java.lang.Object[])>(v0);
return v1;
}
}