abstract class org.wildfly.common.archive.Index extends java.lang.Object
{
final int tableSize;
void <init>(int)
{
java.lang.IllegalStateException v2;
org.wildfly.common.archive.Index v0;
int v1, v3, v4;
v0 := @this: org.wildfly.common.archive.Index;
v1 := @parameter0: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
if v1 < 1073741824 goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Index is too large");
throw v2;
label1:
v3 = v1 << 2;
v4 = staticinvoke <java.lang.Integer: int highestOneBit(int)>(v3);
v0.<org.wildfly.common.archive.Index: int tableSize> = v4;
return;
}
final int size()
{
int v1;
org.wildfly.common.archive.Index v0;
v0 := @this: org.wildfly.common.archive.Index;
v1 = v0.<org.wildfly.common.archive.Index: int tableSize>;
return v1;
}
abstract long get(int);
abstract void put(int, long);
int getMask()
{
int v1, v2;
org.wildfly.common.archive.Index v0;
v0 := @this: org.wildfly.common.archive.Index;
v1 = v0.<org.wildfly.common.archive.Index: int tableSize>;
v2 = v1 - 1;
return v2;
}
}