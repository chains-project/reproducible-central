class org.wildfly.common.codec.Base32Alphabet$2 extends org.wildfly.common.codec.Base32Alphabet
{
static final boolean $assertionsDisabled;
void <init>(boolean)
{
org.wildfly.common.codec.Base32Alphabet$2 v0;
boolean v1;
v0 := @this: org.wildfly.common.codec.Base32Alphabet$2;
v1 := @parameter0: boolean;
specialinvoke v0.<org.wildfly.common.codec.Base32Alphabet: void <init>(boolean)>(v1);
return;
}
public int encode(int)
{
org.wildfly.common.codec.Base32Alphabet$2 v0;
int v1, v2, v5, v6;
java.lang.AssertionError v4;
boolean v3;
v0 := @this: org.wildfly.common.codec.Base32Alphabet$2;
v1 := @parameter0: int;
if v1 > 25 goto label1;
v2 = 97 + v1;
return v2;
label1:
v3 = <org.wildfly.common.codec.Base32Alphabet$2: boolean $assertionsDisabled>;
if v3 != 0 goto label2;
if v1 < 32 goto label2;
v4 = new java.lang.AssertionError;
specialinvoke v4.<java.lang.AssertionError: void <init>()>();
throw v4;
label2:
v5 = 50 + v1;
v6 = v5 - 26;
return v6;
}
public int decode(int)
{
org.wildfly.common.codec.Base32Alphabet$2 v0;
int v1, v2, v3, v4, v5;
v0 := @this: org.wildfly.common.codec.Base32Alphabet$2;
v1 := @parameter0: int;
if 97 > v1 goto label1;
if v1 > 122 goto label1;
v2 = v1 - 97;
return v2;
label1:
if 50 > v1 goto label2;
if v1 > 55 goto label2;
v3 = v1 - 50;
v4 = v3 + 26;
return v4;
label2:
v5 = (int) -1;
return v5;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lorg/wildfly/common/codec/Base32Alphabet;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<org.wildfly.common.codec.Base32Alphabet$2: boolean $assertionsDisabled> = v2;
return;
}
}