public final class org.wildfly.common.ref.References extends java.lang.Object
{
private static final org.wildfly.common.ref.Reference NULL;
private void <init>()
{
org.wildfly.common.ref.References v0;
v0 := @this: org.wildfly.common.ref.References;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static org.wildfly.common.ref.Reference create(org.wildfly.common.ref.Reference$Type, java.lang.Object, java.lang.Object, org.wildfly.common.ref.Reaper)
{
java.lang.IllegalStateException v13;
org.wildfly.common.ref.Reaper v3;
org.wildfly.common.ref.PhantomReference v10;
org.wildfly.common.ref.Reference v12, v4;
org.wildfly.common.ref.WeakReference v9;
org.wildfly.common.ref.Reference$Type v0;
int[] v5;
org.wildfly.common.ref.SoftReference v11;
int v6, v7;
java.lang.Object v1, v2;
org.wildfly.common.ref.StrongReference v8;
v0 := @parameter0: org.wildfly.common.ref.Reference$Type;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: java.lang.Object;
v3 := @parameter3: org.wildfly.common.ref.Reaper;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("type", v0);
if v1 != null goto label1;
v4 = staticinvoke <org.wildfly.common.ref.References: org.wildfly.common.ref.Reference getNullReference()>();
return v4;
label1:
v5 = <org.wildfly.common.ref.References$2: int[] $SwitchMap$org$wildfly$common$ref$Reference$Type>;
v6 = virtualinvoke v0.<org.wildfly.common.ref.Reference$Type: int ordinal()>();
v7 = v5[v6];
tableswitch(v7)
{
case 1: goto label2;
case 2: goto label3;
case 3: goto label4;
case 4: goto label5;
case 5: goto label6;
default: goto label7;
};
label2:
v8 = new org.wildfly.common.ref.StrongReference;
specialinvoke v8.<org.wildfly.common.ref.StrongReference: void <init>(java.lang.Object,java.lang.Object)>(v1, v2);
return v8;
label3:
v9 = new org.wildfly.common.ref.WeakReference;
specialinvoke v9.<org.wildfly.common.ref.WeakReference: void <init>(java.lang.Object,java.lang.Object,org.wildfly.common.ref.Reaper)>(v1, v2, v3);
return v9;
label4:
v10 = new org.wildfly.common.ref.PhantomReference;
specialinvoke v10.<org.wildfly.common.ref.PhantomReference: void <init>(java.lang.Object,java.lang.Object,org.wildfly.common.ref.Reaper)>(v1, v2, v3);
return v10;
label5:
v11 = new org.wildfly.common.ref.SoftReference;
specialinvoke v11.<org.wildfly.common.ref.SoftReference: void <init>(java.lang.Object,java.lang.Object,org.wildfly.common.ref.Reaper)>(v1, v2, v3);
return v11;
label6:
v12 = staticinvoke <org.wildfly.common.ref.References: org.wildfly.common.ref.Reference getNullReference()>();
return v12;
label7:
v13 = staticinvoke <org.wildfly.common.Assert: java.lang.IllegalStateException impossibleSwitchCase(java.lang.Object)>(v0);
throw v13;
}
public static org.wildfly.common.ref.Reference create(org.wildfly.common.ref.Reference$Type, java.lang.Object, java.lang.Object, java.lang.ref.ReferenceQueue)
{
java.lang.IllegalStateException v14;
java.lang.ref.ReferenceQueue v3;
org.wildfly.common.ref.PhantomReference v11;
org.wildfly.common.ref.Reference v13, v4, v5;
org.wildfly.common.ref.WeakReference v10;
org.wildfly.common.ref.Reference$Type v0;
int[] v6;
org.wildfly.common.ref.SoftReference v12;
int v7, v8;
java.lang.Object v1, v2;
org.wildfly.common.ref.StrongReference v9;
v0 := @parameter0: org.wildfly.common.ref.Reference$Type;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: java.lang.Object;
v3 := @parameter3: java.lang.ref.ReferenceQueue;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("type", v0);
if v3 != null goto label1;
v4 = staticinvoke <org.wildfly.common.ref.References: org.wildfly.common.ref.Reference create(org.wildfly.common.ref.Reference$Type,java.lang.Object,java.lang.Object)>(v0, v1, v2);
return v4;
label1:
if v1 != null goto label2;
v5 = staticinvoke <org.wildfly.common.ref.References: org.wildfly.common.ref.Reference getNullReference()>();
return v5;
label2:
v6 = <org.wildfly.common.ref.References$2: int[] $SwitchMap$org$wildfly$common$ref$Reference$Type>;
v7 = virtualinvoke v0.<org.wildfly.common.ref.Reference$Type: int ordinal()>();
v8 = v6[v7];
tableswitch(v8)
{
case 1: goto label3;
case 2: goto label4;
case 3: goto label5;
case 4: goto label6;
case 5: goto label7;
default: goto label8;
};
label3:
v9 = new org.wildfly.common.ref.StrongReference;
specialinvoke v9.<org.wildfly.common.ref.StrongReference: void <init>(java.lang.Object,java.lang.Object)>(v1, v2);
return v9;
label4:
v10 = new org.wildfly.common.ref.WeakReference;
specialinvoke v10.<org.wildfly.common.ref.WeakReference: void <init>(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue)>(v1, v2, v3);
return v10;
label5:
v11 = new org.wildfly.common.ref.PhantomReference;
specialinvoke v11.<org.wildfly.common.ref.PhantomReference: void <init>(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue)>(v1, v2, v3);
return v11;
label6:
v12 = new org.wildfly.common.ref.SoftReference;
specialinvoke v12.<org.wildfly.common.ref.SoftReference: void <init>(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue)>(v1, v2, v3);
return v12;
label7:
v13 = staticinvoke <org.wildfly.common.ref.References: org.wildfly.common.ref.Reference getNullReference()>();
return v13;
label8:
v14 = staticinvoke <org.wildfly.common.Assert: java.lang.IllegalStateException impossibleSwitchCase(java.lang.Object)>(v0);
throw v14;
}
public static org.wildfly.common.ref.Reference create(org.wildfly.common.ref.Reference$Type, java.lang.Object, java.lang.Object)
{
java.lang.IllegalStateException v12;
org.wildfly.common.ref.Reference v11, v3, v9;
org.wildfly.common.ref.WeakReference v8;
org.wildfly.common.ref.Reference$Type v0;
int[] v4;
org.wildfly.common.ref.SoftReference v10;
int v5, v6;
java.lang.Object v1, v2;
org.wildfly.common.ref.StrongReference v7;
v0 := @parameter0: org.wildfly.common.ref.Reference$Type;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: java.lang.Object;
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("type", v0);
if v1 != null goto label1;
v3 = staticinvoke <org.wildfly.common.ref.References: org.wildfly.common.ref.Reference getNullReference()>();
return v3;
label1:
v4 = <org.wildfly.common.ref.References$2: int[] $SwitchMap$org$wildfly$common$ref$Reference$Type>;
v5 = virtualinvoke v0.<org.wildfly.common.ref.Reference$Type: int ordinal()>();
v6 = v4[v5];
tableswitch(v6)
{
case 1: goto label2;
case 2: goto label3;
case 3: goto label4;
case 4: goto label5;
case 5: goto label6;
default: goto label7;
};
label2:
v7 = new org.wildfly.common.ref.StrongReference;
specialinvoke v7.<org.wildfly.common.ref.StrongReference: void <init>(java.lang.Object,java.lang.Object)>(v1, v2);
return v7;
label3:
v8 = new org.wildfly.common.ref.WeakReference;
specialinvoke v8.<org.wildfly.common.ref.WeakReference: void <init>(java.lang.Object,java.lang.Object)>(v1, v2);
return v8;
label4:
v9 = staticinvoke <org.wildfly.common.ref.References: org.wildfly.common.ref.Reference getNullReference()>();
return v9;
label5:
v10 = new org.wildfly.common.ref.SoftReference;
specialinvoke v10.<org.wildfly.common.ref.SoftReference: void <init>(java.lang.Object,java.lang.Object)>(v1, v2);
return v10;
label6:
v11 = staticinvoke <org.wildfly.common.ref.References: org.wildfly.common.ref.Reference getNullReference()>();
return v11;
label7:
v12 = staticinvoke <org.wildfly.common.Assert: java.lang.IllegalStateException impossibleSwitchCase(java.lang.Object)>(v0);
throw v12;
}
public static org.wildfly.common.ref.Reference getNullReference()
{
org.wildfly.common.ref.Reference v0;
v0 = <org.wildfly.common.ref.References: org.wildfly.common.ref.Reference NULL>;
return v0;
}
static void <clinit>()
{
org.wildfly.common.ref.References$1 v0;
v0 = new org.wildfly.common.ref.References$1;
specialinvoke v0.<org.wildfly.common.ref.References$1: void <init>()>();
<org.wildfly.common.ref.References: org.wildfly.common.ref.Reference NULL> = v0;
return;
}
}