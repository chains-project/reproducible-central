class org.wildfly.common.selector.Selector$2 extends java.lang.ClassValue
{
void <init>()
{
org.wildfly.common.selector.Selector$2 v0;
v0 := @this: org.wildfly.common.selector.Selector$2;
specialinvoke v0.<java.lang.ClassValue: void <init>()>();
return;
}
protected org.wildfly.common.selector.Selector$Holder computeValue(java.lang.Class)
{
java.lang.Class v1;
org.wildfly.common.selector.Selector$2 v0;
org.wildfly.common.selector.Selector$Holder v2;
v0 := @this: org.wildfly.common.selector.Selector$2;
v1 := @parameter0: java.lang.Class;
v2 = specialinvoke v0.<org.wildfly.common.selector.Selector$2: org.wildfly.common.selector.Selector$Holder doCompute(java.lang.Class)>(v1);
return v2;
}
private org.wildfly.common.selector.Selector$Holder doCompute(java.lang.Class)
{
java.lang.Object[] v6;
java.lang.Class[] v4;
java.lang.ReflectiveOperationException v8;
java.lang.reflect.Constructor v5;
org.wildfly.common.selector.Selector$2 v0;
org.wildfly.common.selector.Selector$Holder v9;
java.lang.'annotation'.Annotation v2;
java.lang.Class v1, v3;
java.lang.Object v7;
v0 := @this: org.wildfly.common.selector.Selector$2;
v1 := @parameter0: java.lang.Class;
label1:
v2 = virtualinvoke v1.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/wildfly/common/selector/DefaultSelector;");
if v2 == null goto label4;
v3 = interfaceinvoke v2.<org.wildfly.common.selector.DefaultSelector: java.lang.Class value()>();
v4 = newarray (java.lang.Class)[0];
v5 = virtualinvoke v3.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(v4);
v6 = newarray (java.lang.Object)[0];
v7 = virtualinvoke v5.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(v6);
label2:
goto label4;
label3:
v8 := @caughtexception;
label4:
v9 = new org.wildfly.common.selector.Selector$Holder;
specialinvoke v9.<org.wildfly.common.selector.Selector$Holder: void <init>(java.lang.Class)>(v1);
virtualinvoke v9.<org.wildfly.common.selector.Selector$Holder: void set(java.lang.Object)>(v7);
return v9;
catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
catch java.lang.NoSuchMethodException from label1 to label2 with label3;
catch java.lang.InstantiationException from label1 to label2 with label3;
catch java.lang.IllegalAccessException from label1 to label2 with label3;
}
}