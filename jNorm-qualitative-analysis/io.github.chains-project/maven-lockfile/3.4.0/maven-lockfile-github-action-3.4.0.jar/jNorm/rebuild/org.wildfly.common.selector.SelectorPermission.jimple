public final class org.wildfly.common.selector.SelectorPermission extends java.security.BasicPermission
{
private static final long serialVersionUID;
private static final int ACTION_GET;
private static final int ACTION_SET;
private static final int ACTION_CHANGE;
private final int actions;
public void <init>(java.lang.String, java.lang.String)
{
org.wildfly.common.selector.SelectorPermission v0;
java.lang.String[] v3;
byte v4;
int v5, v6;
java.lang.String v1, v2, v7;
boolean v10, v11, v8, v9;
v0 := @this: org.wildfly.common.selector.SelectorPermission;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
specialinvoke v0.<java.security.BasicPermission: void <init>(java.lang.String)>(v1);
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("name", v1);
staticinvoke <org.wildfly.common.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("actions", v2);
v3 = virtualinvoke v2.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s*,\\s*");
v4 = 0;
v5 = lengthof v3;
v6 = 0;
label1:
if v6 >= v5 goto label6;
v7 = v3[v6];
v8 = virtualinvoke v7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("get");
if v8 == 0 goto label2;
v4 = v4 | 1;
goto label5;
label2:
v9 = virtualinvoke v7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("set");
if v9 == 0 goto label3;
v4 = v4 | 2;
goto label5;
label3:
v10 = virtualinvoke v7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("change");
if v10 == 0 goto label4;
v4 = v4 | 4;
goto label5;
label4:
v11 = virtualinvoke v7.<java.lang.String: boolean equals(java.lang.Object)>("*");
if v11 == 0 goto label5;
v4 = v4 | 7;
goto label6;
label5:
v6 = v6 + 1;
goto label1;
label6:
v0.<org.wildfly.common.selector.SelectorPermission: int actions> = v4;
return;
}
public java.lang.String getActions()
{
java.lang.IllegalStateException v3;
org.wildfly.common.selector.SelectorPermission v0;
int v1, v2;
v0 := @this: org.wildfly.common.selector.SelectorPermission;
v1 = v0.<org.wildfly.common.selector.SelectorPermission: int actions>;
v2 = v1 & 7;
tableswitch(v2)
{
case 0: goto label1;
case 1: goto label2;
case 2: goto label3;
case 3: goto label4;
case 4: goto label5;
case 5: goto label6;
case 6: goto label7;
case 7: goto label8;
default: goto label9;
};
label1:
return "";
label2:
return "get";
label3:
return "set";
label4:
return "get,set";
label5:
return "change";
label6:
return "get,change";
label7:
return "set,change";
label8:
return "get,set,change";
label9:
v3 = staticinvoke <org.wildfly.common.Assert: java.lang.IllegalStateException impossibleSwitchCase(int)>(v2);
throw v3;
}
public boolean implies(java.security.Permission)
{
org.wildfly.common.selector.SelectorPermission v0;
java.security.Permission v1;
boolean v2, v3, v4;
v0 := @this: org.wildfly.common.selector.SelectorPermission;
v1 := @parameter0: java.security.Permission;
v2 = v1 instanceof org.wildfly.common.selector.SelectorPermission;
if v2 == 0 goto label1;
v3 = virtualinvoke v0.<org.wildfly.common.selector.SelectorPermission: boolean implies(org.wildfly.common.selector.SelectorPermission)>(v1);
if v3 == 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public boolean implies(org.wildfly.common.selector.SelectorPermission)
{
org.wildfly.common.selector.SelectorPermission v0, v1;
int v2, v3, v4, v5;
boolean v6, v7;
v0 := @this: org.wildfly.common.selector.SelectorPermission;
v1 := @parameter0: org.wildfly.common.selector.SelectorPermission;
if v1 == null goto label1;
v2 = v1.<org.wildfly.common.selector.SelectorPermission: int actions>;
v3 = v0.<org.wildfly.common.selector.SelectorPermission: int actions>;
v4 = v2 & v3;
v5 = v1.<org.wildfly.common.selector.SelectorPermission: int actions>;
if v4 != v5 goto label1;
v6 = specialinvoke v0.<java.security.BasicPermission: boolean implies(java.security.Permission)>(v1);
if v6 == 0 goto label1;
v7 = 1;
goto label2;
label1:
v7 = 0;
label2:
return v7;
}
public boolean equals(java.lang.Object)
{
org.wildfly.common.selector.SelectorPermission v0;
java.lang.Object v1;
boolean v2, v3, v4;
v0 := @this: org.wildfly.common.selector.SelectorPermission;
v1 := @parameter0: java.lang.Object;
v2 = v1 instanceof org.wildfly.common.selector.SelectorPermission;
if v2 == 0 goto label1;
v3 = virtualinvoke v0.<org.wildfly.common.selector.SelectorPermission: boolean equals(org.wildfly.common.selector.SelectorPermission)>(v1);
if v3 == 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public boolean equals(org.wildfly.common.selector.SelectorPermission)
{
org.wildfly.common.selector.SelectorPermission v0, v1;
int v2, v3;
boolean v4, v5;
v0 := @this: org.wildfly.common.selector.SelectorPermission;
v1 := @parameter0: org.wildfly.common.selector.SelectorPermission;
if v1 == null goto label1;
v2 = v1.<org.wildfly.common.selector.SelectorPermission: int actions>;
v3 = v0.<org.wildfly.common.selector.SelectorPermission: int actions>;
if v2 != v3 goto label1;
v4 = specialinvoke v0.<java.security.BasicPermission: boolean equals(java.lang.Object)>(v1);
if v4 == 0 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
{
org.wildfly.common.selector.SelectorPermission v0;
int v2, v3;
java.io.ObjectInputStream v1;
java.io.InvalidObjectException v4;
v0 := @this: org.wildfly.common.selector.SelectorPermission;
v1 := @parameter0: java.io.ObjectInputStream;
virtualinvoke v1.<java.io.ObjectInputStream: void defaultReadObject()>();
v2 = v0.<org.wildfly.common.selector.SelectorPermission: int actions>;
v3 = v2 & 7;
if v3 == v2 goto label1;
v4 = new java.io.InvalidObjectException;
specialinvoke v4.<java.io.InvalidObjectException: void <init>(java.lang.String)>("Invalid permission actions");
throw v4;
label1:
return;
}
}