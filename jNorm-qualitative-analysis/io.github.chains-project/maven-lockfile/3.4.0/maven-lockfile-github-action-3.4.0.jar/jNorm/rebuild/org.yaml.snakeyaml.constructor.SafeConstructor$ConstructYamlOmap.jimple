public class org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlOmap extends org.yaml.snakeyaml.constructor.AbstractConstruct
{
final org.yaml.snakeyaml.constructor.SafeConstructor this$0;
public void <init>(org.yaml.snakeyaml.constructor.SafeConstructor)
{
org.yaml.snakeyaml.constructor.SafeConstructor v1;
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlOmap v0;
v0 := @this: org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlOmap;
v1 := @parameter0: org.yaml.snakeyaml.constructor.SafeConstructor;
v0.<org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlOmap: org.yaml.snakeyaml.constructor.SafeConstructor this$0> = v1;
specialinvoke v0.<org.yaml.snakeyaml.constructor.AbstractConstruct: void <init>()>();
return;
}
public java.lang.Object construct(org.yaml.snakeyaml.nodes.Node)
{
org.yaml.snakeyaml.nodes.Node v1, v29, v32, v37;
org.yaml.snakeyaml.constructor.SafeConstructor v33, v35;
org.yaml.snakeyaml.nodes.NodeId v16, v6;
boolean v11, v13, v3;
org.yaml.snakeyaml.constructor.ConstructorException v14, v21, v4;
java.util.List v19, v23, v27, v30, v9;
org.yaml.snakeyaml.error.Mark v15, v18, v22, v26, v5, v8;
org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlOmap v0;
java.util.LinkedHashMap v2;
int v20, v24;
java.lang.String v17, v25, v7;
java.util.Iterator v10;
java.lang.Object v12, v28, v31, v34, v36;
v0 := @this: org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlOmap;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Node;
v2 = new java.util.LinkedHashMap;
specialinvoke v2.<java.util.LinkedHashMap: void <init>()>();
v3 = v1 instanceof org.yaml.snakeyaml.nodes.SequenceNode;
if v3 != 0 goto label1;
v4 = new org.yaml.snakeyaml.constructor.ConstructorException;
v5 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.error.Mark getStartMark()>();
v6 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.NodeId getNodeId()>();
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.yaml.snakeyaml.nodes.NodeId)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("expected a sequence, but found \u0001");
v8 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.error.Mark getStartMark()>();
specialinvoke v4.<org.yaml.snakeyaml.constructor.ConstructorException: void <init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)>("while constructing an ordered map", v5, v7, v8);
throw v4;
label1:
v9 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.SequenceNode: java.util.List getValue()>();
v10 = interfaceinvoke v9.<java.util.List: java.util.Iterator iterator()>();
label2:
v11 = interfaceinvoke v10.<java.util.Iterator: boolean hasNext()>();
if v11 == 0 goto label5;
v12 = interfaceinvoke v10.<java.util.Iterator: java.lang.Object next()>();
v13 = v12 instanceof org.yaml.snakeyaml.nodes.MappingNode;
if v13 != 0 goto label3;
v14 = new org.yaml.snakeyaml.constructor.ConstructorException;
v15 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.error.Mark getStartMark()>();
v16 = virtualinvoke v12.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.NodeId getNodeId()>();
v17 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.yaml.snakeyaml.nodes.NodeId)>(v16) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("expected a mapping of length 1, but found \u0001");
v18 = virtualinvoke v12.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.error.Mark getStartMark()>();
specialinvoke v14.<org.yaml.snakeyaml.constructor.ConstructorException: void <init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)>("while constructing an ordered map", v15, v17, v18);
throw v14;
label3:
v19 = virtualinvoke v37.<org.yaml.snakeyaml.nodes.MappingNode: java.util.List getValue()>();
v20 = interfaceinvoke v19.<java.util.List: int size()>();
if v20 == 1 goto label4;
v21 = new org.yaml.snakeyaml.constructor.ConstructorException;
v22 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.error.Mark getStartMark()>();
v23 = virtualinvoke v37.<org.yaml.snakeyaml.nodes.MappingNode: java.util.List getValue()>();
v24 = interfaceinvoke v23.<java.util.List: int size()>();
v25 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v24) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("expected a single mapping item, but found \u0001 items");
v26 = virtualinvoke v37.<org.yaml.snakeyaml.nodes.MappingNode: org.yaml.snakeyaml.error.Mark getStartMark()>();
specialinvoke v21.<org.yaml.snakeyaml.constructor.ConstructorException: void <init>(java.lang.String,org.yaml.snakeyaml.error.Mark,java.lang.String,org.yaml.snakeyaml.error.Mark)>("while constructing an ordered map", v22, v25, v26);
throw v21;
label4:
v27 = virtualinvoke v37.<org.yaml.snakeyaml.nodes.MappingNode: java.util.List getValue()>();
v28 = interfaceinvoke v27.<java.util.List: java.lang.Object get(int)>(0);
v29 = virtualinvoke v28.<org.yaml.snakeyaml.nodes.NodeTuple: org.yaml.snakeyaml.nodes.Node getKeyNode()>();
v30 = virtualinvoke v37.<org.yaml.snakeyaml.nodes.MappingNode: java.util.List getValue()>();
v31 = interfaceinvoke v30.<java.util.List: java.lang.Object get(int)>(0);
v32 = virtualinvoke v31.<org.yaml.snakeyaml.nodes.NodeTuple: org.yaml.snakeyaml.nodes.Node getValueNode()>();
v33 = v0.<org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlOmap: org.yaml.snakeyaml.constructor.SafeConstructor this$0>;
v34 = virtualinvoke v33.<org.yaml.snakeyaml.constructor.SafeConstructor: java.lang.Object constructObject(org.yaml.snakeyaml.nodes.Node)>(v29);
v35 = v0.<org.yaml.snakeyaml.constructor.SafeConstructor$ConstructYamlOmap: org.yaml.snakeyaml.constructor.SafeConstructor this$0>;
v36 = virtualinvoke v35.<org.yaml.snakeyaml.constructor.SafeConstructor: java.lang.Object constructObject(org.yaml.snakeyaml.nodes.Node)>(v32);
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v34, v36);
goto label2;
label5:
return v2;
}
}