public class org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor$ConstructCompactObject extends org.yaml.snakeyaml.constructor.Constructor$ConstructMapping
{
final org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor this$0;
public void <init>(org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor)
{
org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor$ConstructCompactObject v0;
org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor v1;
v0 := @this: org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor$ConstructCompactObject;
v1 := @parameter0: org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor;
v0.<org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor$ConstructCompactObject: org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor this$0> = v1;
specialinvoke v0.<org.yaml.snakeyaml.constructor.Constructor$ConstructMapping: void <init>(org.yaml.snakeyaml.constructor.Constructor)>(v1);
return;
}
public void construct2ndStep(org.yaml.snakeyaml.nodes.Node, java.lang.Object)
{
org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor$ConstructCompactObject v0;
java.util.Iterator v4;
org.yaml.snakeyaml.nodes.Node v1, v6;
org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor v10, v9;
java.util.List v11, v3;
java.lang.Class v8;
java.lang.Object v2, v5;
boolean v7;
v0 := @this: org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor$ConstructCompactObject;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Node;
v2 := @parameter1: java.lang.Object;
v3 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.MappingNode: java.util.List getValue()>();
v4 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
v5 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v6 = virtualinvoke v5.<org.yaml.snakeyaml.nodes.NodeTuple: org.yaml.snakeyaml.nodes.Node getValueNode()>();
v7 = v6 instanceof org.yaml.snakeyaml.nodes.MappingNode;
if v7 == 0 goto label1;
v8 = virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
virtualinvoke v6.<org.yaml.snakeyaml.nodes.Node: void setType(java.lang.Class)>(v8);
virtualinvoke v0.<org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor$ConstructCompactObject: java.lang.Object constructJavaBean2ndStep(org.yaml.snakeyaml.nodes.MappingNode,java.lang.Object)>(v6, v2);
goto label2;
label1:
v9 = v0.<org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor$ConstructCompactObject: org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor this$0>;
v10 = v0.<org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor$ConstructCompactObject: org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor this$0>;
v11 = virtualinvoke v10.<org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor: java.util.List constructSequence(org.yaml.snakeyaml.nodes.SequenceNode)>(v6);
virtualinvoke v9.<org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor: void applySequence(java.lang.Object,java.util.List)>(v2, v11);
label2:
return;
}
public java.lang.Object construct(org.yaml.snakeyaml.nodes.Node)
{
org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor$ConstructCompactObject v0;
java.util.Iterator v4;
org.yaml.snakeyaml.extensions.compactnotation.CompactData v9;
org.yaml.snakeyaml.nodes.Node v1, v6;
org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor v10, v12, v7;
java.util.List v3;
java.lang.Object v13, v5;
java.lang.String v11, v8;
boolean v2;
v0 := @this: org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor$ConstructCompactObject;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Node;
v2 = v1 instanceof org.yaml.snakeyaml.nodes.MappingNode;
if v2 == 0 goto label1;
v3 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.MappingNode: java.util.List getValue()>();
v4 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
v5 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: void setTwoStepsConstruction(boolean)>(1);
v6 = virtualinvoke v5.<org.yaml.snakeyaml.nodes.NodeTuple: org.yaml.snakeyaml.nodes.Node getKeyNode()>();
label1:
v7 = v0.<org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor$ConstructCompactObject: org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor this$0>;
v8 = virtualinvoke v6.<org.yaml.snakeyaml.nodes.ScalarNode: java.lang.String getValue()>();
v9 = virtualinvoke v7.<org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor: org.yaml.snakeyaml.extensions.compactnotation.CompactData getCompactData(java.lang.String)>(v8);
if v9 != null goto label2;
v10 = v0.<org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor$ConstructCompactObject: org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor this$0>;
v11 = virtualinvoke v10.<org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor: java.lang.String constructScalar(org.yaml.snakeyaml.nodes.ScalarNode)>(v6);
return v11;
label2:
v12 = v0.<org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor$ConstructCompactObject: org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor this$0>;
v13 = virtualinvoke v12.<org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor: java.lang.Object constructCompactFormat(org.yaml.snakeyaml.nodes.ScalarNode,org.yaml.snakeyaml.extensions.compactnotation.CompactData)>(v6, v9);
return v13;
}
}