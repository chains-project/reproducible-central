public class org.yaml.snakeyaml.extensions.compactnotation.PackageCompactConstructor extends org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor
{
private final java.lang.String packageName;
public void <init>(java.lang.String)
{
org.yaml.snakeyaml.LoaderOptions v2;
java.lang.String v1;
org.yaml.snakeyaml.extensions.compactnotation.PackageCompactConstructor v0;
v0 := @this: org.yaml.snakeyaml.extensions.compactnotation.PackageCompactConstructor;
v1 := @parameter0: java.lang.String;
v2 = new org.yaml.snakeyaml.LoaderOptions;
specialinvoke v2.<org.yaml.snakeyaml.LoaderOptions: void <init>()>();
specialinvoke v0.<org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor: void <init>(org.yaml.snakeyaml.LoaderOptions)>(v2);
v0.<org.yaml.snakeyaml.extensions.compactnotation.PackageCompactConstructor: java.lang.String packageName> = v1;
return;
}
protected java.lang.Class getClassForName(java.lang.String) throws java.lang.ClassNotFoundException
{
org.yaml.snakeyaml.extensions.compactnotation.PackageCompactConstructor v0;
int v2;
java.lang.Class v5, v7;
java.lang.ClassNotFoundException v6;
java.lang.String v1, v3, v4;
v0 := @this: org.yaml.snakeyaml.extensions.compactnotation.PackageCompactConstructor;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v1.<java.lang.String: int indexOf(int)>(46);
if v2 >= 0 goto label4;
label1:
v3 = v0.<org.yaml.snakeyaml.extensions.compactnotation.PackageCompactConstructor: java.lang.String packageName>;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v3, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.\u0001");
v5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(v4);
label2:
return v5;
label3:
v6 := @caughtexception;
label4:
v7 = specialinvoke v0.<org.yaml.snakeyaml.extensions.compactnotation.CompactConstructor: java.lang.Class getClassForName(java.lang.String)>(v1);
return v7;
catch java.lang.ClassNotFoundException from label1 to label2 with label3;
}
}