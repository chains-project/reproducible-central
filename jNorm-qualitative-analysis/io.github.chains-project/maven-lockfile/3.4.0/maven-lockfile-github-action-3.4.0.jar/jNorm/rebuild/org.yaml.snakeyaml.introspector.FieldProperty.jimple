public class org.yaml.snakeyaml.introspector.FieldProperty extends org.yaml.snakeyaml.introspector.GenericProperty
{
private final java.lang.reflect.Field field;
public void <init>(java.lang.reflect.Field)
{
java.lang.reflect.Type v4;
java.lang.Class v3;
java.lang.String v2;
java.lang.reflect.Field v1;
org.yaml.snakeyaml.introspector.FieldProperty v0;
v0 := @this: org.yaml.snakeyaml.introspector.FieldProperty;
v1 := @parameter0: java.lang.reflect.Field;
v2 = virtualinvoke v1.<java.lang.reflect.Field: java.lang.String getName()>();
v3 = virtualinvoke v1.<java.lang.reflect.Field: java.lang.Class getType()>();
v4 = virtualinvoke v1.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();
specialinvoke v0.<org.yaml.snakeyaml.introspector.GenericProperty: void <init>(java.lang.String,java.lang.Class,java.lang.reflect.Type)>(v2, v3, v4);
v0.<org.yaml.snakeyaml.introspector.FieldProperty: java.lang.reflect.Field field> = v1;
virtualinvoke v1.<java.lang.reflect.Field: void setAccessible(boolean)>(1);
return;
}
public void set(java.lang.Object, java.lang.Object) throws java.lang.Exception
{
java.lang.Object v1, v2;
java.lang.reflect.Field v3;
org.yaml.snakeyaml.introspector.FieldProperty v0;
v0 := @this: org.yaml.snakeyaml.introspector.FieldProperty;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = v0.<org.yaml.snakeyaml.introspector.FieldProperty: java.lang.reflect.Field field>;
virtualinvoke v3.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(v1, v2);
return;
}
public java.lang.Object get(java.lang.Object)
{
java.lang.reflect.Field v2, v6;
org.yaml.snakeyaml.introspector.FieldProperty v0;
java.lang.Exception v4;
java.lang.Object v1, v3;
java.lang.String v7, v8;
org.yaml.snakeyaml.error.YAMLException v5;
v0 := @this: org.yaml.snakeyaml.introspector.FieldProperty;
v1 := @parameter0: java.lang.Object;
label1:
v2 = v0.<org.yaml.snakeyaml.introspector.FieldProperty: java.lang.reflect.Field field>;
v3 = virtualinvoke v2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(v1);
label2:
return v3;
label3:
v4 := @caughtexception;
v5 = new org.yaml.snakeyaml.error.YAMLException;
v6 = v0.<org.yaml.snakeyaml.introspector.FieldProperty: java.lang.reflect.Field field>;
v7 = virtualinvoke v6.<java.lang.reflect.Field: java.lang.String getName()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.Object,java.lang.Exception)>(v7, v1, v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unable to access field \u0001 on object \u0001 : \u0001");
specialinvoke v5.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>(v8);
throw v5;
catch java.lang.Exception from label1 to label2 with label3;
}
public java.util.List getAnnotations()
{
java.util.List v3;
java.lang.'annotation'.Annotation[] v2;
java.lang.reflect.Field v1;
org.yaml.snakeyaml.introspector.FieldProperty v0;
v0 := @this: org.yaml.snakeyaml.introspector.FieldProperty;
v1 = v0.<org.yaml.snakeyaml.introspector.FieldProperty: java.lang.reflect.Field field>;
v2 = virtualinvoke v1.<java.lang.reflect.Field: java.lang.'annotation'.Annotation[] getAnnotations()>();
v3 = staticinvoke <org.yaml.snakeyaml.util.ArrayUtils: java.util.List toUnmodifiableList(java.lang.Object[])>(v2);
return v3;
}
public java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)
{
java.lang.'annotation'.Annotation v3;
java.lang.Class v1;
java.lang.reflect.Field v2;
org.yaml.snakeyaml.introspector.FieldProperty v0;
v0 := @this: org.yaml.snakeyaml.introspector.FieldProperty;
v1 := @parameter0: java.lang.Class;
v2 = v0.<org.yaml.snakeyaml.introspector.FieldProperty: java.lang.reflect.Field field>;
v3 = virtualinvoke v2.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(v1);
return v3;
}
}