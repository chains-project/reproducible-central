public class org.yaml.snakeyaml.introspector.MethodProperty extends org.yaml.snakeyaml.introspector.GenericProperty
{
private final java.beans.PropertyDescriptor property;
private final boolean readable;
private final boolean writable;
private static java.lang.reflect.Type discoverGenericType(java.beans.PropertyDescriptor)
{
java.lang.reflect.Type v2, v6;
java.beans.PropertyDescriptor v0;
int v5;
java.lang.reflect.Type[] v4;
java.lang.reflect.Method v1, v3;
v0 := @parameter0: java.beans.PropertyDescriptor;
v1 = virtualinvoke v0.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();
if v1 == null goto label1;
v2 = virtualinvoke v1.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>();
return v2;
label1:
v3 = virtualinvoke v0.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();
if v3 == null goto label2;
v4 = virtualinvoke v3.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>();
v5 = lengthof v4;
if v5 <= 0 goto label2;
v6 = v4[0];
return v6;
label2:
return null;
}
public void <init>(java.beans.PropertyDescriptor)
{
org.yaml.snakeyaml.introspector.MethodProperty v0;
java.lang.reflect.Type v4;
java.beans.PropertyDescriptor v1;
java.lang.Class v3;
java.lang.String v2;
java.lang.reflect.Method v5, v7;
boolean v6, v8;
v0 := @this: org.yaml.snakeyaml.introspector.MethodProperty;
v1 := @parameter0: java.beans.PropertyDescriptor;
v2 = virtualinvoke v1.<java.beans.PropertyDescriptor: java.lang.String getName()>();
v3 = virtualinvoke v1.<java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>();
v4 = staticinvoke <org.yaml.snakeyaml.introspector.MethodProperty: java.lang.reflect.Type discoverGenericType(java.beans.PropertyDescriptor)>(v1);
specialinvoke v0.<org.yaml.snakeyaml.introspector.GenericProperty: void <init>(java.lang.String,java.lang.Class,java.lang.reflect.Type)>(v2, v3, v4);
v0.<org.yaml.snakeyaml.introspector.MethodProperty: java.beans.PropertyDescriptor property> = v1;
v5 = virtualinvoke v1.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();
if v5 == null goto label1;
v6 = 1;
goto label2;
label1:
v6 = 0;
label2:
v0.<org.yaml.snakeyaml.introspector.MethodProperty: boolean readable> = v6;
v7 = virtualinvoke v1.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();
if v7 == null goto label3;
v8 = 1;
goto label4;
label3:
v8 = 0;
label4:
v0.<org.yaml.snakeyaml.introspector.MethodProperty: boolean writable> = v8;
return;
}
public void set(java.lang.Object, java.lang.Object) throws java.lang.Exception
{
org.yaml.snakeyaml.introspector.MethodProperty v0;
java.lang.Object[] v11;
java.beans.PropertyDescriptor v9;
java.lang.Class v6;
java.lang.Object v1, v2;
java.lang.String v5, v7, v8;
java.lang.reflect.Method v10;
boolean v3;
org.yaml.snakeyaml.error.YAMLException v4;
v0 := @this: org.yaml.snakeyaml.introspector.MethodProperty;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 = v0.<org.yaml.snakeyaml.introspector.MethodProperty: boolean writable>;
if v3 != 0 goto label1;
v4 = new org.yaml.snakeyaml.error.YAMLException;
v5 = virtualinvoke v0.<org.yaml.snakeyaml.introspector.MethodProperty: java.lang.String getName()>();
v6 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v7 = virtualinvoke v6.<java.lang.Class: java.lang.String getName()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v5, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("No writable property \'\u0001\' on class: \u0001");
specialinvoke v4.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>(v8);
throw v4;
label1:
v9 = v0.<org.yaml.snakeyaml.introspector.MethodProperty: java.beans.PropertyDescriptor property>;
v10 = virtualinvoke v9.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();
v11 = newarray (java.lang.Object)[1];
v11[0] = v2;
virtualinvoke v10.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v1, v11);
return;
}
public java.lang.Object get(java.lang.Object)
{
org.yaml.snakeyaml.introspector.MethodProperty v0;
java.lang.Object[] v6;
java.lang.Exception v8;
java.beans.PropertyDescriptor v10, v2, v4;
java.lang.Object v1, v7;
java.lang.String v11, v12;
java.lang.reflect.Method v3, v5;
org.yaml.snakeyaml.error.YAMLException v9;
v0 := @this: org.yaml.snakeyaml.introspector.MethodProperty;
v1 := @parameter0: java.lang.Object;
label1:
v2 = v0.<org.yaml.snakeyaml.introspector.MethodProperty: java.beans.PropertyDescriptor property>;
v3 = virtualinvoke v2.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();
virtualinvoke v3.<java.lang.reflect.Method: void setAccessible(boolean)>(1);
v4 = v0.<org.yaml.snakeyaml.introspector.MethodProperty: java.beans.PropertyDescriptor property>;
v5 = virtualinvoke v4.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();
v6 = newarray (java.lang.Object)[0];
v7 = virtualinvoke v5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v1, v6);
label2:
return v7;
label3:
v8 := @caughtexception;
v9 = new org.yaml.snakeyaml.error.YAMLException;
v10 = v0.<org.yaml.snakeyaml.introspector.MethodProperty: java.beans.PropertyDescriptor property>;
v11 = virtualinvoke v10.<java.beans.PropertyDescriptor: java.lang.String getName()>();
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.Object,java.lang.Exception)>(v11, v1, v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unable to find getter for property \'\u0001\' on object \u0001:\u0001");
specialinvoke v9.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>(v12);
throw v9;
catch java.lang.Exception from label1 to label2 with label3;
}
public java.util.List getAnnotations()
{
org.yaml.snakeyaml.introspector.MethodProperty v0;
java.lang.'annotation'.Annotation[] v13, v16, v5, v8;
java.lang.reflect.Method v12, v15, v4, v7;
boolean v1, v10, v2;
java.util.List v9;
java.beans.PropertyDescriptor v11, v14, v3, v6;
v0 := @this: org.yaml.snakeyaml.introspector.MethodProperty;
v1 = virtualinvoke v0.<org.yaml.snakeyaml.introspector.MethodProperty: boolean isReadable()>();
if v1 == 0 goto label1;
v2 = virtualinvoke v0.<org.yaml.snakeyaml.introspector.MethodProperty: boolean isWritable()>();
if v2 == 0 goto label1;
v3 = v0.<org.yaml.snakeyaml.introspector.MethodProperty: java.beans.PropertyDescriptor property>;
v4 = virtualinvoke v3.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();
v5 = virtualinvoke v4.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[] getAnnotations()>();
v6 = v0.<org.yaml.snakeyaml.introspector.MethodProperty: java.beans.PropertyDescriptor property>;
v7 = virtualinvoke v6.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();
v8 = virtualinvoke v7.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[] getAnnotations()>();
v9 = staticinvoke <org.yaml.snakeyaml.util.ArrayUtils: java.util.List toUnmodifiableCompositeList(java.lang.Object[],java.lang.Object[])>(v5, v8);
goto label3;
label1:
v10 = virtualinvoke v0.<org.yaml.snakeyaml.introspector.MethodProperty: boolean isReadable()>();
if v10 == 0 goto label2;
v11 = v0.<org.yaml.snakeyaml.introspector.MethodProperty: java.beans.PropertyDescriptor property>;
v12 = virtualinvoke v11.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();
v13 = virtualinvoke v12.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[] getAnnotations()>();
v9 = staticinvoke <org.yaml.snakeyaml.util.ArrayUtils: java.util.List toUnmodifiableList(java.lang.Object[])>(v13);
goto label3;
label2:
v14 = v0.<org.yaml.snakeyaml.introspector.MethodProperty: java.beans.PropertyDescriptor property>;
v15 = virtualinvoke v14.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();
v16 = virtualinvoke v15.<java.lang.reflect.Method: java.lang.'annotation'.Annotation[] getAnnotations()>();
v9 = staticinvoke <org.yaml.snakeyaml.util.ArrayUtils: java.util.List toUnmodifiableList(java.lang.Object[])>(v16);
label3:
return v9;
}
public java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)
{
org.yaml.snakeyaml.introspector.MethodProperty v0;
java.beans.PropertyDescriptor v4, v7;
java.lang.'annotation'.Annotation v2;
java.lang.Class v1;
java.lang.reflect.Method v5, v8;
boolean v3, v6;
v0 := @this: org.yaml.snakeyaml.introspector.MethodProperty;
v1 := @parameter0: java.lang.Class;
v2 = null;
v3 = virtualinvoke v0.<org.yaml.snakeyaml.introspector.MethodProperty: boolean isReadable()>();
if v3 == 0 goto label1;
v4 = v0.<org.yaml.snakeyaml.introspector.MethodProperty: java.beans.PropertyDescriptor property>;
v5 = virtualinvoke v4.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();
v2 = virtualinvoke v5.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(v1);
label1:
if v2 != null goto label2;
v6 = virtualinvoke v0.<org.yaml.snakeyaml.introspector.MethodProperty: boolean isWritable()>();
if v6 == 0 goto label2;
v7 = v0.<org.yaml.snakeyaml.introspector.MethodProperty: java.beans.PropertyDescriptor property>;
v8 = virtualinvoke v7.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();
v2 = virtualinvoke v8.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(v1);
label2:
return v2;
}
public boolean isWritable()
{
org.yaml.snakeyaml.introspector.MethodProperty v0;
boolean v1;
v0 := @this: org.yaml.snakeyaml.introspector.MethodProperty;
v1 = v0.<org.yaml.snakeyaml.introspector.MethodProperty: boolean writable>;
return v1;
}
public boolean isReadable()
{
org.yaml.snakeyaml.introspector.MethodProperty v0;
boolean v1;
v0 := @this: org.yaml.snakeyaml.introspector.MethodProperty;
v1 = v0.<org.yaml.snakeyaml.introspector.MethodProperty: boolean readable>;
return v1;
}
}