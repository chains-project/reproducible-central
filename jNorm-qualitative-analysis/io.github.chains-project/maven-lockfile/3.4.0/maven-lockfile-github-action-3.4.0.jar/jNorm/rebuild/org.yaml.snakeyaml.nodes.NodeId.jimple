public final enum class org.yaml.snakeyaml.nodes.NodeId extends java.lang.Enum
{
public static final enum org.yaml.snakeyaml.nodes.NodeId scalar;
public static final enum org.yaml.snakeyaml.nodes.NodeId sequence;
public static final enum org.yaml.snakeyaml.nodes.NodeId mapping;
public static final enum org.yaml.snakeyaml.nodes.NodeId anchor;
private static final org.yaml.snakeyaml.nodes.NodeId[] $VALUES;
public static org.yaml.snakeyaml.nodes.NodeId[] values()
{
org.yaml.snakeyaml.nodes.NodeId[] v0;
java.lang.Object v1;
v0 = <org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId[] $VALUES>;
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
return v1;
}
public static org.yaml.snakeyaml.nodes.NodeId valueOf(java.lang.String)
{
java.lang.String v0;
java.lang.Enum v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/yaml/snakeyaml/nodes/NodeId;", v0);
return v1;
}
private void <init>(java.lang.String, int)
{
int v2;
java.lang.String v1;
org.yaml.snakeyaml.nodes.NodeId v0;
v0 := @this: org.yaml.snakeyaml.nodes.NodeId;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
specialinvoke v0.<java.lang.Enum: void <init>(java.lang.String,int)>(v1, v2);
return;
}
private static org.yaml.snakeyaml.nodes.NodeId[] $values()
{
org.yaml.snakeyaml.nodes.NodeId v1, v2, v3, v4;
org.yaml.snakeyaml.nodes.NodeId[] v0;
v0 = newarray (org.yaml.snakeyaml.nodes.NodeId)[4];
v1 = <org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId scalar>;
v0[0] = v1;
v2 = <org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId sequence>;
v0[1] = v2;
v3 = <org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId mapping>;
v0[2] = v3;
v4 = <org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId anchor>;
v0[3] = v4;
return v0;
}
static void <clinit>()
{
org.yaml.snakeyaml.nodes.NodeId v0, v1, v2, v3;
org.yaml.snakeyaml.nodes.NodeId[] v4;
v0 = new org.yaml.snakeyaml.nodes.NodeId;
specialinvoke v0.<org.yaml.snakeyaml.nodes.NodeId: void <init>(java.lang.String,int)>("scalar", 0);
<org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId scalar> = v0;
v1 = new org.yaml.snakeyaml.nodes.NodeId;
specialinvoke v1.<org.yaml.snakeyaml.nodes.NodeId: void <init>(java.lang.String,int)>("sequence", 1);
<org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId sequence> = v1;
v2 = new org.yaml.snakeyaml.nodes.NodeId;
specialinvoke v2.<org.yaml.snakeyaml.nodes.NodeId: void <init>(java.lang.String,int)>("mapping", 2);
<org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId mapping> = v2;
v3 = new org.yaml.snakeyaml.nodes.NodeId;
specialinvoke v3.<org.yaml.snakeyaml.nodes.NodeId: void <init>(java.lang.String,int)>("anchor", 3);
<org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId anchor> = v3;
v4 = staticinvoke <org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId[] $values()>();
<org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId[] $VALUES> = v4;
return;
}
}