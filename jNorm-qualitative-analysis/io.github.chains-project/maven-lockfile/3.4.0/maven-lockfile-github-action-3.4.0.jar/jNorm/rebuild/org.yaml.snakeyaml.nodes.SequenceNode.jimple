public class org.yaml.snakeyaml.nodes.SequenceNode extends org.yaml.snakeyaml.nodes.CollectionNode
{
private final java.util.List value;
public void <init>(org.yaml.snakeyaml.nodes.Tag, boolean, java.util.List, org.yaml.snakeyaml.error.Mark, org.yaml.snakeyaml.error.Mark, org.yaml.snakeyaml.DumperOptions$FlowStyle)
{
org.yaml.snakeyaml.nodes.SequenceNode v0;
org.yaml.snakeyaml.DumperOptions$FlowStyle v6;
org.yaml.snakeyaml.nodes.Tag v1;
java.lang.NullPointerException v7;
java.util.List v3;
org.yaml.snakeyaml.error.Mark v4, v5;
boolean v2;
v0 := @this: org.yaml.snakeyaml.nodes.SequenceNode;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Tag;
v2 := @parameter1: boolean;
v3 := @parameter2: java.util.List;
v4 := @parameter3: org.yaml.snakeyaml.error.Mark;
v5 := @parameter4: org.yaml.snakeyaml.error.Mark;
v6 := @parameter5: org.yaml.snakeyaml.DumperOptions$FlowStyle;
specialinvoke v0.<org.yaml.snakeyaml.nodes.CollectionNode: void <init>(org.yaml.snakeyaml.nodes.Tag,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions$FlowStyle)>(v1, v4, v5, v6);
if v3 != null goto label1;
v7 = new java.lang.NullPointerException;
specialinvoke v7.<java.lang.NullPointerException: void <init>(java.lang.String)>("value in a Node is required.");
throw v7;
label1:
v0.<org.yaml.snakeyaml.nodes.SequenceNode: java.util.List value> = v3;
v0.<org.yaml.snakeyaml.nodes.SequenceNode: boolean resolved> = v2;
return;
}
public void <init>(org.yaml.snakeyaml.nodes.Tag, java.util.List, org.yaml.snakeyaml.DumperOptions$FlowStyle)
{
java.util.List v2;
org.yaml.snakeyaml.nodes.SequenceNode v0;
org.yaml.snakeyaml.DumperOptions$FlowStyle v3;
org.yaml.snakeyaml.nodes.Tag v1;
v0 := @this: org.yaml.snakeyaml.nodes.SequenceNode;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Tag;
v2 := @parameter1: java.util.List;
v3 := @parameter2: org.yaml.snakeyaml.DumperOptions$FlowStyle;
specialinvoke v0.<org.yaml.snakeyaml.nodes.SequenceNode: void <init>(org.yaml.snakeyaml.nodes.Tag,boolean,java.util.List,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions$FlowStyle)>(v1, 1, v2, null, null, v3);
return;
}
public org.yaml.snakeyaml.nodes.NodeId getNodeId()
{
org.yaml.snakeyaml.nodes.SequenceNode v0;
org.yaml.snakeyaml.nodes.NodeId v1;
v0 := @this: org.yaml.snakeyaml.nodes.SequenceNode;
v1 = <org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId sequence>;
return v1;
}
public java.util.List getValue()
{
java.util.List v1;
org.yaml.snakeyaml.nodes.SequenceNode v0;
v0 := @this: org.yaml.snakeyaml.nodes.SequenceNode;
v1 = v0.<org.yaml.snakeyaml.nodes.SequenceNode: java.util.List value>;
return v1;
}
public void setListType(java.lang.Class)
{
java.util.List v2;
org.yaml.snakeyaml.nodes.SequenceNode v0;
java.util.Iterator v3;
java.lang.Class v1;
java.lang.Object v5;
boolean v4;
v0 := @this: org.yaml.snakeyaml.nodes.SequenceNode;
v1 := @parameter0: java.lang.Class;
v2 = v0.<org.yaml.snakeyaml.nodes.SequenceNode: java.util.List value>;
v3 = interfaceinvoke v2.<java.util.List: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v5.<org.yaml.snakeyaml.nodes.Node: void setType(java.lang.Class)>(v1);
goto label1;
label2:
return;
}
public java.lang.String toString()
{
java.util.List v4;
org.yaml.snakeyaml.nodes.SequenceNode v0;
java.lang.Class v1;
java.lang.String v2, v5;
org.yaml.snakeyaml.nodes.Tag v3;
v0 := @this: org.yaml.snakeyaml.nodes.SequenceNode;
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v2 = virtualinvoke v1.<java.lang.Class: java.lang.String getName()>();
v3 = virtualinvoke v0.<org.yaml.snakeyaml.nodes.SequenceNode: org.yaml.snakeyaml.nodes.Tag getTag()>();
v4 = virtualinvoke v0.<org.yaml.snakeyaml.nodes.SequenceNode: java.util.List getValue()>();
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,org.yaml.snakeyaml.nodes.Tag,java.util.List)>(v2, v3, v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("<\u0001 (tag=\u0001, value=\u0001)>");
return v5;
}
}