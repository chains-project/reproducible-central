public final class org.yaml.snakeyaml.nodes.Tag extends java.lang.Object
{
public static final java.lang.String PREFIX;
public static final org.yaml.snakeyaml.nodes.Tag YAML;
public static final org.yaml.snakeyaml.nodes.Tag MERGE;
public static final org.yaml.snakeyaml.nodes.Tag SET;
public static final org.yaml.snakeyaml.nodes.Tag PAIRS;
public static final org.yaml.snakeyaml.nodes.Tag OMAP;
public static final org.yaml.snakeyaml.nodes.Tag BINARY;
public static final org.yaml.snakeyaml.nodes.Tag INT;
public static final org.yaml.snakeyaml.nodes.Tag FLOAT;
public static final org.yaml.snakeyaml.nodes.Tag TIMESTAMP;
public static final org.yaml.snakeyaml.nodes.Tag BOOL;
public static final org.yaml.snakeyaml.nodes.Tag NULL;
public static final org.yaml.snakeyaml.nodes.Tag STR;
public static final org.yaml.snakeyaml.nodes.Tag SEQ;
public static final org.yaml.snakeyaml.nodes.Tag MAP;
public static final java.util.Set standardTags;
public static final org.yaml.snakeyaml.nodes.Tag COMMENT;
private static final java.util.Map COMPATIBILITY_MAP;
private final java.lang.String value;
private boolean secondary;
public void <init>(java.lang.String)
{
java.lang.IllegalArgumentException v4, v8;
org.yaml.snakeyaml.nodes.Tag v0;
java.lang.NullPointerException v2;
int v3, v6, v7;
java.lang.String v1, v5, v9;
boolean v10, v11;
v0 := @this: org.yaml.snakeyaml.nodes.Tag;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.yaml.snakeyaml.nodes.Tag: boolean secondary> = 0;
if v1 != null goto label1;
v2 = new java.lang.NullPointerException;
specialinvoke v2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Tag must be provided.");
throw v2;
label1:
v3 = virtualinvoke v1.<java.lang.String: int length()>();
if v3 != 0 goto label2;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Tag must not be empty.");
throw v4;
label2:
v5 = virtualinvoke v1.<java.lang.String: java.lang.String trim()>();
v6 = virtualinvoke v5.<java.lang.String: int length()>();
v7 = virtualinvoke v1.<java.lang.String: int length()>();
if v6 == v7 goto label3;
v8 = new java.lang.IllegalArgumentException;
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Tag must not contain leading or trailing spaces.");
throw v8;
label3:
v9 = staticinvoke <org.yaml.snakeyaml.util.UriEncoder: java.lang.String encode(java.lang.String)>(v1);
v0.<org.yaml.snakeyaml.nodes.Tag: java.lang.String value> = v9;
v10 = virtualinvoke v1.<java.lang.String: boolean startsWith(java.lang.String)>("tag:yaml.org,2002:");
if v10 != 0 goto label4;
v11 = 1;
goto label5;
label4:
v11 = 0;
label5:
v0.<org.yaml.snakeyaml.nodes.Tag: boolean secondary> = v11;
return;
}
public void <init>(java.lang.Class)
{
java.lang.Class v1;
java.lang.String v3, v4, v5;
org.yaml.snakeyaml.nodes.Tag v0;
java.lang.NullPointerException v2;
v0 := @this: org.yaml.snakeyaml.nodes.Tag;
v1 := @parameter0: java.lang.Class;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.yaml.snakeyaml.nodes.Tag: boolean secondary> = 0;
if v1 != null goto label1;
v2 = new java.lang.NullPointerException;
specialinvoke v2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Class for tag must be provided.");
throw v2;
label1:
v3 = virtualinvoke v1.<java.lang.Class: java.lang.String getName()>();
v4 = staticinvoke <org.yaml.snakeyaml.util.UriEncoder: java.lang.String encode(java.lang.String)>(v3);
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("tag:yaml.org,2002:\u0001");
v0.<org.yaml.snakeyaml.nodes.Tag: java.lang.String value> = v5;
return;
}
public boolean isSecondary()
{
org.yaml.snakeyaml.nodes.Tag v0;
boolean v1;
v0 := @this: org.yaml.snakeyaml.nodes.Tag;
v1 = v0.<org.yaml.snakeyaml.nodes.Tag: boolean secondary>;
return v1;
}
public java.lang.String getValue()
{
java.lang.String v1;
org.yaml.snakeyaml.nodes.Tag v0;
v0 := @this: org.yaml.snakeyaml.nodes.Tag;
v1 = v0.<org.yaml.snakeyaml.nodes.Tag: java.lang.String value>;
return v1;
}
public boolean startsWith(java.lang.String)
{
java.lang.String v1, v2;
org.yaml.snakeyaml.nodes.Tag v0;
boolean v3;
v0 := @this: org.yaml.snakeyaml.nodes.Tag;
v1 := @parameter0: java.lang.String;
v2 = v0.<org.yaml.snakeyaml.nodes.Tag: java.lang.String value>;
v3 = virtualinvoke v2.<java.lang.String: boolean startsWith(java.lang.String)>(v1);
return v3;
}
public java.lang.String getClassName()
{
org.yaml.snakeyaml.nodes.Tag v0;
int v7;
java.lang.String v3, v4, v5, v6, v8, v9;
boolean v1;
org.yaml.snakeyaml.error.YAMLException v2;
v0 := @this: org.yaml.snakeyaml.nodes.Tag;
v1 = v0.<org.yaml.snakeyaml.nodes.Tag: boolean secondary>;
if v1 == 0 goto label1;
v2 = new org.yaml.snakeyaml.error.YAMLException;
v3 = v0.<org.yaml.snakeyaml.nodes.Tag: java.lang.String value>;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid tag: \u0001");
specialinvoke v2.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>(v4);
throw v2;
label1:
v5 = v0.<org.yaml.snakeyaml.nodes.Tag: java.lang.String value>;
v6 = "tag:yaml.org,2002:";
v7 = virtualinvoke v6.<java.lang.String: int length()>();
v8 = virtualinvoke v5.<java.lang.String: java.lang.String substring(int)>(v7);
v9 = staticinvoke <org.yaml.snakeyaml.util.UriEncoder: java.lang.String decode(java.lang.String)>(v8);
return v9;
}
public java.lang.String toString()
{
java.lang.String v1;
org.yaml.snakeyaml.nodes.Tag v0;
v0 := @this: org.yaml.snakeyaml.nodes.Tag;
v1 = v0.<org.yaml.snakeyaml.nodes.Tag: java.lang.String value>;
return v1;
}
public boolean equals(java.lang.Object)
{
java.lang.Object v1;
java.lang.String v3, v4;
org.yaml.snakeyaml.nodes.Tag v0;
boolean v2, v5;
v0 := @this: org.yaml.snakeyaml.nodes.Tag;
v1 := @parameter0: java.lang.Object;
v2 = v1 instanceof org.yaml.snakeyaml.nodes.Tag;
if v2 == 0 goto label1;
v3 = v0.<org.yaml.snakeyaml.nodes.Tag: java.lang.String value>;
v4 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Tag: java.lang.String getValue()>();
v5 = virtualinvoke v3.<java.lang.String: boolean equals(java.lang.Object)>(v4);
return v5;
label1:
return 0;
}
public int hashCode()
{
int v2;
java.lang.String v1;
org.yaml.snakeyaml.nodes.Tag v0;
v0 := @this: org.yaml.snakeyaml.nodes.Tag;
v1 = v0.<org.yaml.snakeyaml.nodes.Tag: java.lang.String value>;
v2 = virtualinvoke v1.<java.lang.String: int hashCode()>();
return v2;
}
public boolean isCompatible(java.lang.Class)
{
java.util.Map v2;
java.lang.Class v1;
java.lang.Object v3;
org.yaml.snakeyaml.nodes.Tag v0;
boolean v4;
v0 := @this: org.yaml.snakeyaml.nodes.Tag;
v1 := @parameter0: java.lang.Class;
v2 = <org.yaml.snakeyaml.nodes.Tag: java.util.Map COMPATIBILITY_MAP>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v0);
if v3 == null goto label1;
v4 = interfaceinvoke v3.<java.util.Set: boolean contains(java.lang.Object)>(v1);
return v4;
label1:
return 0;
}
public boolean matches(java.lang.Class)
{
java.lang.Class v1;
java.lang.String v2, v3, v4;
org.yaml.snakeyaml.nodes.Tag v0;
boolean v5;
v0 := @this: org.yaml.snakeyaml.nodes.Tag;
v1 := @parameter0: java.lang.Class;
v2 = v0.<org.yaml.snakeyaml.nodes.Tag: java.lang.String value>;
v3 = virtualinvoke v1.<java.lang.Class: java.lang.String getName()>();
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("tag:yaml.org,2002:\u0001");
v5 = virtualinvoke v2.<java.lang.String: boolean equals(java.lang.Object)>(v4);
return v5;
}
public boolean isCustomGlobal()
{
java.util.Set v2;
org.yaml.snakeyaml.nodes.Tag v0;
boolean v1, v3, v4;
v0 := @this: org.yaml.snakeyaml.nodes.Tag;
v1 = v0.<org.yaml.snakeyaml.nodes.Tag: boolean secondary>;
if v1 != 0 goto label1;
v2 = <org.yaml.snakeyaml.nodes.Tag: java.util.Set standardTags>;
v3 = interfaceinvoke v2.<java.util.Set: boolean contains(java.lang.Object)>(v0);
if v3 != 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
static void <clinit>()
{
java.util.Map v46, v49, v55;
java.util.Set v15, v17, v19, v21, v23, v25, v27, v29, v31, v33, v35, v37, v39, v41;
java.util.HashMap v44;
java.util.HashSet v14, v45, v48, v51;
org.yaml.snakeyaml.nodes.Tag v0, v1, v10, v11, v12, v13, v16, v18, v2, v20, v22, v24, v26, v28, v3, v30, v32, v34, v36, v38, v4, v40, v42, v43, v47, v5, v50, v56, v6, v7, v8, v9;
java.lang.Class v52, v53;
java.lang.ClassNotFoundException v54;
v0 = new org.yaml.snakeyaml.nodes.Tag;
specialinvoke v0.<org.yaml.snakeyaml.nodes.Tag: void <init>(java.lang.String)>("tag:yaml.org,2002:yaml");
<org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag YAML> = v0;
v1 = new org.yaml.snakeyaml.nodes.Tag;
specialinvoke v1.<org.yaml.snakeyaml.nodes.Tag: void <init>(java.lang.String)>("tag:yaml.org,2002:merge");
<org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag MERGE> = v1;
v2 = new org.yaml.snakeyaml.nodes.Tag;
specialinvoke v2.<org.yaml.snakeyaml.nodes.Tag: void <init>(java.lang.String)>("tag:yaml.org,2002:set");
<org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag SET> = v2;
v3 = new org.yaml.snakeyaml.nodes.Tag;
specialinvoke v3.<org.yaml.snakeyaml.nodes.Tag: void <init>(java.lang.String)>("tag:yaml.org,2002:pairs");
<org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag PAIRS> = v3;
v4 = new org.yaml.snakeyaml.nodes.Tag;
specialinvoke v4.<org.yaml.snakeyaml.nodes.Tag: void <init>(java.lang.String)>("tag:yaml.org,2002:omap");
<org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag OMAP> = v4;
v5 = new org.yaml.snakeyaml.nodes.Tag;
specialinvoke v5.<org.yaml.snakeyaml.nodes.Tag: void <init>(java.lang.String)>("tag:yaml.org,2002:binary");
<org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag BINARY> = v5;
v6 = new org.yaml.snakeyaml.nodes.Tag;
specialinvoke v6.<org.yaml.snakeyaml.nodes.Tag: void <init>(java.lang.String)>("tag:yaml.org,2002:int");
<org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag INT> = v6;
v7 = new org.yaml.snakeyaml.nodes.Tag;
specialinvoke v7.<org.yaml.snakeyaml.nodes.Tag: void <init>(java.lang.String)>("tag:yaml.org,2002:float");
<org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag FLOAT> = v7;
v8 = new org.yaml.snakeyaml.nodes.Tag;
specialinvoke v8.<org.yaml.snakeyaml.nodes.Tag: void <init>(java.lang.String)>("tag:yaml.org,2002:timestamp");
<org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag TIMESTAMP> = v8;
v9 = new org.yaml.snakeyaml.nodes.Tag;
specialinvoke v9.<org.yaml.snakeyaml.nodes.Tag: void <init>(java.lang.String)>("tag:yaml.org,2002:bool");
<org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag BOOL> = v9;
v10 = new org.yaml.snakeyaml.nodes.Tag;
specialinvoke v10.<org.yaml.snakeyaml.nodes.Tag: void <init>(java.lang.String)>("tag:yaml.org,2002:null");
<org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag NULL> = v10;
v11 = new org.yaml.snakeyaml.nodes.Tag;
specialinvoke v11.<org.yaml.snakeyaml.nodes.Tag: void <init>(java.lang.String)>("tag:yaml.org,2002:str");
<org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag STR> = v11;
v12 = new org.yaml.snakeyaml.nodes.Tag;
specialinvoke v12.<org.yaml.snakeyaml.nodes.Tag: void <init>(java.lang.String)>("tag:yaml.org,2002:seq");
<org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag SEQ> = v12;
v13 = new org.yaml.snakeyaml.nodes.Tag;
specialinvoke v13.<org.yaml.snakeyaml.nodes.Tag: void <init>(java.lang.String)>("tag:yaml.org,2002:map");
<org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag MAP> = v13;
v14 = new java.util.HashSet;
specialinvoke v14.<java.util.HashSet: void <init>(int)>(15);
<org.yaml.snakeyaml.nodes.Tag: java.util.Set standardTags> = v14;
v15 = <org.yaml.snakeyaml.nodes.Tag: java.util.Set standardTags>;
v16 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag YAML>;
interfaceinvoke v15.<java.util.Set: boolean add(java.lang.Object)>(v16);
v17 = <org.yaml.snakeyaml.nodes.Tag: java.util.Set standardTags>;
v18 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag MERGE>;
interfaceinvoke v17.<java.util.Set: boolean add(java.lang.Object)>(v18);
v19 = <org.yaml.snakeyaml.nodes.Tag: java.util.Set standardTags>;
v20 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag SET>;
interfaceinvoke v19.<java.util.Set: boolean add(java.lang.Object)>(v20);
v21 = <org.yaml.snakeyaml.nodes.Tag: java.util.Set standardTags>;
v22 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag PAIRS>;
interfaceinvoke v21.<java.util.Set: boolean add(java.lang.Object)>(v22);
v23 = <org.yaml.snakeyaml.nodes.Tag: java.util.Set standardTags>;
v24 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag OMAP>;
interfaceinvoke v23.<java.util.Set: boolean add(java.lang.Object)>(v24);
v25 = <org.yaml.snakeyaml.nodes.Tag: java.util.Set standardTags>;
v26 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag BINARY>;
interfaceinvoke v25.<java.util.Set: boolean add(java.lang.Object)>(v26);
v27 = <org.yaml.snakeyaml.nodes.Tag: java.util.Set standardTags>;
v28 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag INT>;
interfaceinvoke v27.<java.util.Set: boolean add(java.lang.Object)>(v28);
v29 = <org.yaml.snakeyaml.nodes.Tag: java.util.Set standardTags>;
v30 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag FLOAT>;
interfaceinvoke v29.<java.util.Set: boolean add(java.lang.Object)>(v30);
v31 = <org.yaml.snakeyaml.nodes.Tag: java.util.Set standardTags>;
v32 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag TIMESTAMP>;
interfaceinvoke v31.<java.util.Set: boolean add(java.lang.Object)>(v32);
v33 = <org.yaml.snakeyaml.nodes.Tag: java.util.Set standardTags>;
v34 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag BOOL>;
interfaceinvoke v33.<java.util.Set: boolean add(java.lang.Object)>(v34);
v35 = <org.yaml.snakeyaml.nodes.Tag: java.util.Set standardTags>;
v36 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag NULL>;
interfaceinvoke v35.<java.util.Set: boolean add(java.lang.Object)>(v36);
v37 = <org.yaml.snakeyaml.nodes.Tag: java.util.Set standardTags>;
v38 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag STR>;
interfaceinvoke v37.<java.util.Set: boolean add(java.lang.Object)>(v38);
v39 = <org.yaml.snakeyaml.nodes.Tag: java.util.Set standardTags>;
v40 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag SEQ>;
interfaceinvoke v39.<java.util.Set: boolean add(java.lang.Object)>(v40);
v41 = <org.yaml.snakeyaml.nodes.Tag: java.util.Set standardTags>;
v42 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag MAP>;
interfaceinvoke v41.<java.util.Set: boolean add(java.lang.Object)>(v42);
v43 = new org.yaml.snakeyaml.nodes.Tag;
specialinvoke v43.<org.yaml.snakeyaml.nodes.Tag: void <init>(java.lang.String)>("tag:yaml.org,2002:comment");
<org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag COMMENT> = v43;
v44 = new java.util.HashMap;
specialinvoke v44.<java.util.HashMap: void <init>()>();
<org.yaml.snakeyaml.nodes.Tag: java.util.Map COMPATIBILITY_MAP> = v44;
v45 = new java.util.HashSet;
specialinvoke v45.<java.util.HashSet: void <init>()>();
interfaceinvoke v45.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/lang/Double;");
interfaceinvoke v45.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/lang/Float;");
interfaceinvoke v45.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/math/BigDecimal;");
v46 = <org.yaml.snakeyaml.nodes.Tag: java.util.Map COMPATIBILITY_MAP>;
v47 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag FLOAT>;
interfaceinvoke v46.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v47, v45);
v48 = new java.util.HashSet;
specialinvoke v48.<java.util.HashSet: void <init>()>();
interfaceinvoke v48.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/lang/Integer;");
interfaceinvoke v48.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/lang/Long;");
interfaceinvoke v48.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/math/BigInteger;");
v49 = <org.yaml.snakeyaml.nodes.Tag: java.util.Map COMPATIBILITY_MAP>;
v50 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag INT>;
interfaceinvoke v49.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v50, v48);
v51 = new java.util.HashSet;
specialinvoke v51.<java.util.HashSet: void <init>()>();
interfaceinvoke v51.<java.util.Set: boolean add(java.lang.Object)>(class "Ljava/util/Date;");
label1:
v52 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.sql.Date");
interfaceinvoke v51.<java.util.Set: boolean add(java.lang.Object)>(v52);
v53 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.sql.Timestamp");
interfaceinvoke v51.<java.util.Set: boolean add(java.lang.Object)>(v53);
label2:
goto label4;
label3:
v54 := @caughtexception;
label4:
v55 = <org.yaml.snakeyaml.nodes.Tag: java.util.Map COMPATIBILITY_MAP>;
v56 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag TIMESTAMP>;
interfaceinvoke v55.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v56, v51);
return;
catch java.lang.ClassNotFoundException from label1 to label2 with label3;
}
}