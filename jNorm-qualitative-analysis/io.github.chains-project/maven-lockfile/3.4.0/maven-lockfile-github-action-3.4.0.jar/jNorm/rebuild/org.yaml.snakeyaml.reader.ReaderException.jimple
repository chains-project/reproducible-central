public class org.yaml.snakeyaml.reader.ReaderException extends org.yaml.snakeyaml.error.YAMLException
{
private static final long serialVersionUID;
private final java.lang.String name;
private final int codePoint;
private final int position;
public void <init>(java.lang.String, int, int, java.lang.String)
{
int v2, v3;
java.lang.String v1, v4;
org.yaml.snakeyaml.reader.ReaderException v0;
v0 := @this: org.yaml.snakeyaml.reader.ReaderException;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: java.lang.String;
specialinvoke v0.<org.yaml.snakeyaml.error.YAMLException: void <init>(java.lang.String)>(v4);
v0.<org.yaml.snakeyaml.reader.ReaderException: java.lang.String name> = v1;
v0.<org.yaml.snakeyaml.reader.ReaderException: int codePoint> = v3;
v0.<org.yaml.snakeyaml.reader.ReaderException: int position> = v2;
return;
}
public java.lang.String getName()
{
java.lang.String v1;
org.yaml.snakeyaml.reader.ReaderException v0;
v0 := @this: org.yaml.snakeyaml.reader.ReaderException;
v1 = v0.<org.yaml.snakeyaml.reader.ReaderException: java.lang.String name>;
return v1;
}
public int getCodePoint()
{
int v1;
org.yaml.snakeyaml.reader.ReaderException v0;
v0 := @this: org.yaml.snakeyaml.reader.ReaderException;
v1 = v0.<org.yaml.snakeyaml.reader.ReaderException: int codePoint>;
return v1;
}
public int getPosition()
{
int v1;
org.yaml.snakeyaml.reader.ReaderException v0;
v0 := @this: org.yaml.snakeyaml.reader.ReaderException;
v1 = v0.<org.yaml.snakeyaml.reader.ReaderException: int position>;
return v1;
}
public java.lang.String toString()
{
int v2, v4, v9;
char[] v3;
java.lang.String v1, v10, v5, v6, v7, v8;
org.yaml.snakeyaml.reader.ReaderException v0;
v0 := @this: org.yaml.snakeyaml.reader.ReaderException;
v1 = new java.lang.String;
v2 = v0.<org.yaml.snakeyaml.reader.ReaderException: int codePoint>;
v3 = staticinvoke <java.lang.Character: char[] toChars(int)>(v2);
specialinvoke v1.<java.lang.String: void <init>(char[])>(v3);
v4 = v0.<org.yaml.snakeyaml.reader.ReaderException: int codePoint>;
v5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v4);
v6 = virtualinvoke v5.<java.lang.String: java.lang.String toUpperCase()>();
v7 = virtualinvoke v0.<org.yaml.snakeyaml.reader.ReaderException: java.lang.String getMessage()>();
v8 = v0.<org.yaml.snakeyaml.reader.ReaderException: java.lang.String name>;
v9 = v0.<org.yaml.snakeyaml.reader.ReaderException: int position>;
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)>(v1, v6, v7, v8, v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unacceptable code point \'\u0001\' (0x\u0001) \u0001\nin \"\u0001\", position \u0001");
return v10;
}
}