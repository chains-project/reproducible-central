public abstract class org.yaml.snakeyaml.representer.BaseRepresenter extends java.lang.Object
{
protected final java.util.Map representers;
protected org.yaml.snakeyaml.representer.Represent nullRepresenter;
protected final java.util.Map multiRepresenters;
protected org.yaml.snakeyaml.DumperOptions$ScalarStyle defaultScalarStyle;
protected org.yaml.snakeyaml.DumperOptions$FlowStyle defaultFlowStyle;
protected final java.util.Map representedObjects;
protected java.lang.Object objectToRepresent;
private org.yaml.snakeyaml.introspector.PropertyUtils propertyUtils;
private boolean explicitPropertyUtils;
public void <init>()
{
java.util.LinkedHashMap v2;
org.yaml.snakeyaml.representer.BaseRepresenter v0;
org.yaml.snakeyaml.DumperOptions$FlowStyle v3;
java.util.HashMap v1;
org.yaml.snakeyaml.representer.BaseRepresenter$1 v4;
v0 := @this: org.yaml.snakeyaml.representer.BaseRepresenter;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.HashMap;
specialinvoke v1.<java.util.HashMap: void <init>()>();
v0.<org.yaml.snakeyaml.representer.BaseRepresenter: java.util.Map representers> = v1;
v2 = new java.util.LinkedHashMap;
specialinvoke v2.<java.util.LinkedHashMap: void <init>()>();
v0.<org.yaml.snakeyaml.representer.BaseRepresenter: java.util.Map multiRepresenters> = v2;
v0.<org.yaml.snakeyaml.representer.BaseRepresenter: org.yaml.snakeyaml.DumperOptions$ScalarStyle defaultScalarStyle> = null;
v3 = <org.yaml.snakeyaml.DumperOptions$FlowStyle: org.yaml.snakeyaml.DumperOptions$FlowStyle AUTO>;
v0.<org.yaml.snakeyaml.representer.BaseRepresenter: org.yaml.snakeyaml.DumperOptions$FlowStyle defaultFlowStyle> = v3;
v4 = new org.yaml.snakeyaml.representer.BaseRepresenter$1;
specialinvoke v4.<org.yaml.snakeyaml.representer.BaseRepresenter$1: void <init>(org.yaml.snakeyaml.representer.BaseRepresenter)>(v0);
v0.<org.yaml.snakeyaml.representer.BaseRepresenter: java.util.Map representedObjects> = v4;
v0.<org.yaml.snakeyaml.representer.BaseRepresenter: boolean explicitPropertyUtils> = 0;
return;
}
public org.yaml.snakeyaml.nodes.Node represent(java.lang.Object)
{
org.yaml.snakeyaml.nodes.Node v2;
org.yaml.snakeyaml.representer.BaseRepresenter v0;
java.util.Map v3;
java.lang.Object v1;
v0 := @this: org.yaml.snakeyaml.representer.BaseRepresenter;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<org.yaml.snakeyaml.representer.BaseRepresenter: org.yaml.snakeyaml.nodes.Node representData(java.lang.Object)>(v1);
v3 = v0.<org.yaml.snakeyaml.representer.BaseRepresenter: java.util.Map representedObjects>;
interfaceinvoke v3.<java.util.Map: void clear()>();
v0.<org.yaml.snakeyaml.representer.BaseRepresenter: java.lang.Object objectToRepresent> = null;
return v2;
}
protected final org.yaml.snakeyaml.nodes.Node representData(java.lang.Object)
{
org.yaml.snakeyaml.nodes.Node v15, v24, v9;
org.yaml.snakeyaml.representer.BaseRepresenter v0;
java.util.Map v11, v13, v16, v2, v22, v25, v27, v29, v5;
org.yaml.snakeyaml.representer.Represent v8;
boolean v12, v19, v21, v26, v4;
java.util.Iterator v18;
java.util.Set v17;
java.lang.Class v10;
java.lang.Object v1, v14, v20, v23, v28, v3, v30, v6, v7;
v0 := @this: org.yaml.snakeyaml.representer.BaseRepresenter;
v1 := @parameter0: java.lang.Object;
v0.<org.yaml.snakeyaml.representer.BaseRepresenter: java.lang.Object objectToRepresent> = v1;
v2 = v0.<org.yaml.snakeyaml.representer.BaseRepresenter: java.util.Map representedObjects>;
v3 = v0.<org.yaml.snakeyaml.representer.BaseRepresenter: java.lang.Object objectToRepresent>;
v4 = interfaceinvoke v2.<java.util.Map: boolean containsKey(java.lang.Object)>(v3);
if v4 == 0 goto label1;
v5 = v0.<org.yaml.snakeyaml.representer.BaseRepresenter: java.util.Map representedObjects>;
v6 = v0.<org.yaml.snakeyaml.representer.BaseRepresenter: java.lang.Object objectToRepresent>;
v7 = interfaceinvoke v5.<java.util.Map: java.lang.Object get(java.lang.Object)>(v6);
return v7;
label1:
if v1 != null goto label2;
v8 = v0.<org.yaml.snakeyaml.representer.BaseRepresenter: org.yaml.snakeyaml.representer.Represent nullRepresenter>;
v9 = interfaceinvoke v8.<org.yaml.snakeyaml.representer.Represent: org.yaml.snakeyaml.nodes.Node representData(java.lang.Object)>(null);
return v9;
label2:
v10 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v11 = v0.<org.yaml.snakeyaml.representer.BaseRepresenter: java.util.Map representers>;
v12 = interfaceinvoke v11.<java.util.Map: boolean containsKey(java.lang.Object)>(v10);
if v12 == 0 goto label3;
v13 = v0.<org.yaml.snakeyaml.representer.BaseRepresenter: java.util.Map representers>;
v14 = interfaceinvoke v13.<java.util.Map: java.lang.Object get(java.lang.Object)>(v10);
v15 = interfaceinvoke v14.<org.yaml.snakeyaml.representer.Represent: org.yaml.snakeyaml.nodes.Node representData(java.lang.Object)>(v1);
goto label7;
label3:
v16 = v0.<org.yaml.snakeyaml.representer.BaseRepresenter: java.util.Map multiRepresenters>;
v17 = interfaceinvoke v16.<java.util.Map: java.util.Set keySet()>();
v18 = interfaceinvoke v17.<java.util.Set: java.util.Iterator iterator()>();
label4:
v19 = interfaceinvoke v18.<java.util.Iterator: boolean hasNext()>();
if v19 == 0 goto label5;
v20 = interfaceinvoke v18.<java.util.Iterator: java.lang.Object next()>();
if v20 == null goto label4;
v21 = virtualinvoke v20.<java.lang.Class: boolean isInstance(java.lang.Object)>(v1);
if v21 == 0 goto label4;
v22 = v0.<org.yaml.snakeyaml.representer.BaseRepresenter: java.util.Map multiRepresenters>;
v23 = interfaceinvoke v22.<java.util.Map: java.lang.Object get(java.lang.Object)>(v20);
v24 = interfaceinvoke v23.<org.yaml.snakeyaml.representer.Represent: org.yaml.snakeyaml.nodes.Node representData(java.lang.Object)>(v1);
return v24;
label5:
v25 = v0.<org.yaml.snakeyaml.representer.BaseRepresenter: java.util.Map multiRepresenters>;
v26 = interfaceinvoke v25.<java.util.Map: boolean containsKey(java.lang.Object)>(null);
if v26 == 0 goto label6;
v27 = v0.<org.yaml.snakeyaml.representer.BaseRepresenter: java.util.Map multiRepresenters>;
v28 = interfaceinvoke v27.<java.util.Map: java.lang.Object get(java.lang.Object)>(null);
v15 = interfaceinvoke v28.<org.yaml.snakeyaml.representer.Represent: org.yaml.snakeyaml.nodes.Node representData(java.lang.Object)>(v1);
goto label7;
label6:
v29 = v0.<org.yaml.snakeyaml.representer.BaseRepresenter: java.util.Map representers>;
v30 = interfaceinvoke v29.<java.util.Map: java.lang.Object get(java.lang.Object)>(null);
v15 = interfaceinvoke v30.<org.yaml.snakeyaml.representer.Represent: org.yaml.snakeyaml.nodes.Node representData(java.lang.Object)>(v1);
label7:
return v15;
}
protected org.yaml.snakeyaml.nodes.Node representScalar(org.yaml.snakeyaml.nodes.Tag, java.lang.String, org.yaml.snakeyaml.DumperOptions$ScalarStyle)
{
org.yaml.snakeyaml.representer.BaseRepresenter v0;
org.yaml.snakeyaml.DumperOptions$ScalarStyle v3;
org.yaml.snakeyaml.nodes.ScalarNode v4;
java.lang.String v2;
org.yaml.snakeyaml.nodes.Tag v1;
v0 := @this: org.yaml.snakeyaml.representer.BaseRepresenter;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Tag;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: org.yaml.snakeyaml.DumperOptions$ScalarStyle;
if v3 != null goto label1;
v3 = v0.<org.yaml.snakeyaml.representer.BaseRepresenter: org.yaml.snakeyaml.DumperOptions$ScalarStyle defaultScalarStyle>;
label1:
v4 = new org.yaml.snakeyaml.nodes.ScalarNode;
specialinvoke v4.<org.yaml.snakeyaml.nodes.ScalarNode: void <init>(org.yaml.snakeyaml.nodes.Tag,java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions$ScalarStyle)>(v1, v2, null, null, v3);
return v4;
}
protected org.yaml.snakeyaml.nodes.Node representScalar(org.yaml.snakeyaml.nodes.Tag, java.lang.String)
{
org.yaml.snakeyaml.nodes.Node v3;
org.yaml.snakeyaml.representer.BaseRepresenter v0;
java.lang.String v2;
org.yaml.snakeyaml.nodes.Tag v1;
v0 := @this: org.yaml.snakeyaml.representer.BaseRepresenter;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Tag;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<org.yaml.snakeyaml.representer.BaseRepresenter: org.yaml.snakeyaml.nodes.Node representScalar(org.yaml.snakeyaml.nodes.Tag,java.lang.String,org.yaml.snakeyaml.DumperOptions$ScalarStyle)>(v1, v2, null);
return v3;
}
protected org.yaml.snakeyaml.nodes.Node representSequence(org.yaml.snakeyaml.nodes.Tag, java.lang.Iterable, org.yaml.snakeyaml.DumperOptions$FlowStyle)
{
org.yaml.snakeyaml.nodes.SequenceNode v7;
org.yaml.snakeyaml.DumperOptions$FlowStyle v10, v17, v18, v19, v20, v3;
java.lang.Iterable v2;
java.util.ArrayList v6;
org.yaml.snakeyaml.nodes.Node v14;
org.yaml.snakeyaml.representer.BaseRepresenter v0;
java.util.Map v8;
int v4;
boolean v12, v15, v16, v5;
java.util.Iterator v11;
org.yaml.snakeyaml.nodes.Tag v1;
java.lang.Object v13, v9;
v0 := @this: org.yaml.snakeyaml.representer.BaseRepresenter;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Tag;
v2 := @parameter1: java.lang.Iterable;
v3 := @parameter2: org.yaml.snakeyaml.DumperOptions$FlowStyle;
v4 = 10;
v5 = v2 instanceof java.util.List;
if v5 == 0 goto label1;
v4 = interfaceinvoke v2.<java.util.List: int size()>();
label1:
v6 = new java.util.ArrayList;
specialinvoke v6.<java.util.ArrayList: void <init>(int)>(v4);
v7 = new org.yaml.snakeyaml.nodes.SequenceNode;
specialinvoke v7.<org.yaml.snakeyaml.nodes.SequenceNode: void <init>(org.yaml.snakeyaml.nodes.Tag,java.util.List,org.yaml.snakeyaml.DumperOptions$FlowStyle)>(v1, v6, v3);
v8 = v0.<org.yaml.snakeyaml.representer.BaseRepresenter: java.util.Map representedObjects>;
v9 = v0.<org.yaml.snakeyaml.representer.BaseRepresenter: java.lang.Object objectToRepresent>;
interfaceinvoke v8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v9, v7);
v10 = <org.yaml.snakeyaml.DumperOptions$FlowStyle: org.yaml.snakeyaml.DumperOptions$FlowStyle FLOW>;
v11 = interfaceinvoke v2.<java.lang.Iterable: java.util.Iterator iterator()>();
label2:
v12 = interfaceinvoke v11.<java.util.Iterator: boolean hasNext()>();
if v12 == 0 goto label5;
v13 = interfaceinvoke v11.<java.util.Iterator: java.lang.Object next()>();
v14 = virtualinvoke v0.<org.yaml.snakeyaml.representer.BaseRepresenter: org.yaml.snakeyaml.nodes.Node representData(java.lang.Object)>(v13);
v15 = v14 instanceof org.yaml.snakeyaml.nodes.ScalarNode;
if v15 == 0 goto label3;
v16 = virtualinvoke v14.<org.yaml.snakeyaml.nodes.ScalarNode: boolean isPlain()>();
if v16 != 0 goto label4;
label3:
v10 = <org.yaml.snakeyaml.DumperOptions$FlowStyle: org.yaml.snakeyaml.DumperOptions$FlowStyle BLOCK>;
label4:
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v14);
goto label2;
label5:
v17 = <org.yaml.snakeyaml.DumperOptions$FlowStyle: org.yaml.snakeyaml.DumperOptions$FlowStyle AUTO>;
if v3 != v17 goto label7;
v18 = v0.<org.yaml.snakeyaml.representer.BaseRepresenter: org.yaml.snakeyaml.DumperOptions$FlowStyle defaultFlowStyle>;
v19 = <org.yaml.snakeyaml.DumperOptions$FlowStyle: org.yaml.snakeyaml.DumperOptions$FlowStyle AUTO>;
if v18 == v19 goto label6;
v20 = v0.<org.yaml.snakeyaml.representer.BaseRepresenter: org.yaml.snakeyaml.DumperOptions$FlowStyle defaultFlowStyle>;
virtualinvoke v7.<org.yaml.snakeyaml.nodes.SequenceNode: void setFlowStyle(org.yaml.snakeyaml.DumperOptions$FlowStyle)>(v20);
goto label7;
label6:
virtualinvoke v7.<org.yaml.snakeyaml.nodes.SequenceNode: void setFlowStyle(org.yaml.snakeyaml.DumperOptions$FlowStyle)>(v10);
label7:
return v7;
}
protected org.yaml.snakeyaml.nodes.Node representMapping(org.yaml.snakeyaml.nodes.Tag, java.util.Map, org.yaml.snakeyaml.DumperOptions$FlowStyle)
{
org.yaml.snakeyaml.DumperOptions$FlowStyle v23, v24, v25, v26, v3, v9;
org.yaml.snakeyaml.nodes.MappingNode v6;
java.util.ArrayList v4;
org.yaml.snakeyaml.nodes.Node v15, v17;
org.yaml.snakeyaml.representer.BaseRepresenter v0;
java.util.Map v2, v7;
int v5;
boolean v12, v18, v19, v20, v21;
java.util.Iterator v11;
java.util.Set v10;
org.yaml.snakeyaml.nodes.Tag v1;
org.yaml.snakeyaml.nodes.NodeTuple v22;
java.lang.Object v13, v14, v16, v8;
v0 := @this: org.yaml.snakeyaml.representer.BaseRepresenter;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Tag;
v2 := @parameter1: java.util.Map;
v3 := @parameter2: org.yaml.snakeyaml.DumperOptions$FlowStyle;
v4 = new java.util.ArrayList;
v5 = interfaceinvoke v2.<java.util.Map: int size()>();
specialinvoke v4.<java.util.ArrayList: void <init>(int)>(v5);
v6 = new org.yaml.snakeyaml.nodes.MappingNode;
specialinvoke v6.<org.yaml.snakeyaml.nodes.MappingNode: void <init>(org.yaml.snakeyaml.nodes.Tag,java.util.List,org.yaml.snakeyaml.DumperOptions$FlowStyle)>(v1, v4, v3);
v7 = v0.<org.yaml.snakeyaml.representer.BaseRepresenter: java.util.Map representedObjects>;
v8 = v0.<org.yaml.snakeyaml.representer.BaseRepresenter: java.lang.Object objectToRepresent>;
interfaceinvoke v7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v8, v6);
v9 = <org.yaml.snakeyaml.DumperOptions$FlowStyle: org.yaml.snakeyaml.DumperOptions$FlowStyle FLOW>;
v10 = interfaceinvoke v2.<java.util.Map: java.util.Set entrySet()>();
v11 = interfaceinvoke v10.<java.util.Set: java.util.Iterator iterator()>();
label1:
v12 = interfaceinvoke v11.<java.util.Iterator: boolean hasNext()>();
if v12 == 0 goto label6;
v13 = interfaceinvoke v11.<java.util.Iterator: java.lang.Object next()>();
v14 = interfaceinvoke v13.<java.util.Map$Entry: java.lang.Object getKey()>();
v15 = virtualinvoke v0.<org.yaml.snakeyaml.representer.BaseRepresenter: org.yaml.snakeyaml.nodes.Node representData(java.lang.Object)>(v14);
v16 = interfaceinvoke v13.<java.util.Map$Entry: java.lang.Object getValue()>();
v17 = virtualinvoke v0.<org.yaml.snakeyaml.representer.BaseRepresenter: org.yaml.snakeyaml.nodes.Node representData(java.lang.Object)>(v16);
v18 = v15 instanceof org.yaml.snakeyaml.nodes.ScalarNode;
if v18 == 0 goto label2;
v19 = virtualinvoke v15.<org.yaml.snakeyaml.nodes.ScalarNode: boolean isPlain()>();
if v19 != 0 goto label3;
label2:
v9 = <org.yaml.snakeyaml.DumperOptions$FlowStyle: org.yaml.snakeyaml.DumperOptions$FlowStyle BLOCK>;
label3:
v20 = v17 instanceof org.yaml.snakeyaml.nodes.ScalarNode;
if v20 == 0 goto label4;
v21 = virtualinvoke v17.<org.yaml.snakeyaml.nodes.ScalarNode: boolean isPlain()>();
if v21 != 0 goto label5;
label4:
v9 = <org.yaml.snakeyaml.DumperOptions$FlowStyle: org.yaml.snakeyaml.DumperOptions$FlowStyle BLOCK>;
label5:
v22 = new org.yaml.snakeyaml.nodes.NodeTuple;
specialinvoke v22.<org.yaml.snakeyaml.nodes.NodeTuple: void <init>(org.yaml.snakeyaml.nodes.Node,org.yaml.snakeyaml.nodes.Node)>(v15, v17);
interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(v22);
goto label1;
label6:
v23 = <org.yaml.snakeyaml.DumperOptions$FlowStyle: org.yaml.snakeyaml.DumperOptions$FlowStyle AUTO>;
if v3 != v23 goto label8;
v24 = v0.<org.yaml.snakeyaml.representer.BaseRepresenter: org.yaml.snakeyaml.DumperOptions$FlowStyle defaultFlowStyle>;
v25 = <org.yaml.snakeyaml.DumperOptions$FlowStyle: org.yaml.snakeyaml.DumperOptions$FlowStyle AUTO>;
if v24 == v25 goto label7;
v26 = v0.<org.yaml.snakeyaml.representer.BaseRepresenter: org.yaml.snakeyaml.DumperOptions$FlowStyle defaultFlowStyle>;
virtualinvoke v6.<org.yaml.snakeyaml.nodes.MappingNode: void setFlowStyle(org.yaml.snakeyaml.DumperOptions$FlowStyle)>(v26);
goto label8;
label7:
virtualinvoke v6.<org.yaml.snakeyaml.nodes.MappingNode: void setFlowStyle(org.yaml.snakeyaml.DumperOptions$FlowStyle)>(v9);
label8:
return v6;
}
public void setDefaultScalarStyle(org.yaml.snakeyaml.DumperOptions$ScalarStyle)
{
org.yaml.snakeyaml.representer.BaseRepresenter v0;
org.yaml.snakeyaml.DumperOptions$ScalarStyle v1;
v0 := @this: org.yaml.snakeyaml.representer.BaseRepresenter;
v1 := @parameter0: org.yaml.snakeyaml.DumperOptions$ScalarStyle;
v0.<org.yaml.snakeyaml.representer.BaseRepresenter: org.yaml.snakeyaml.DumperOptions$ScalarStyle defaultScalarStyle> = v1;
return;
}
public org.yaml.snakeyaml.DumperOptions$ScalarStyle getDefaultScalarStyle()
{
org.yaml.snakeyaml.representer.BaseRepresenter v0;
org.yaml.snakeyaml.DumperOptions$ScalarStyle v1, v2, v3;
v0 := @this: org.yaml.snakeyaml.representer.BaseRepresenter;
v1 = v0.<org.yaml.snakeyaml.representer.BaseRepresenter: org.yaml.snakeyaml.DumperOptions$ScalarStyle defaultScalarStyle>;
if v1 != null goto label1;
v2 = <org.yaml.snakeyaml.DumperOptions$ScalarStyle: org.yaml.snakeyaml.DumperOptions$ScalarStyle PLAIN>;
return v2;
label1:
v3 = v0.<org.yaml.snakeyaml.representer.BaseRepresenter: org.yaml.snakeyaml.DumperOptions$ScalarStyle defaultScalarStyle>;
return v3;
}
public void setDefaultFlowStyle(org.yaml.snakeyaml.DumperOptions$FlowStyle)
{
org.yaml.snakeyaml.representer.BaseRepresenter v0;
org.yaml.snakeyaml.DumperOptions$FlowStyle v1;
v0 := @this: org.yaml.snakeyaml.representer.BaseRepresenter;
v1 := @parameter0: org.yaml.snakeyaml.DumperOptions$FlowStyle;
v0.<org.yaml.snakeyaml.representer.BaseRepresenter: org.yaml.snakeyaml.DumperOptions$FlowStyle defaultFlowStyle> = v1;
return;
}
public org.yaml.snakeyaml.DumperOptions$FlowStyle getDefaultFlowStyle()
{
org.yaml.snakeyaml.representer.BaseRepresenter v0;
org.yaml.snakeyaml.DumperOptions$FlowStyle v1;
v0 := @this: org.yaml.snakeyaml.representer.BaseRepresenter;
v1 = v0.<org.yaml.snakeyaml.representer.BaseRepresenter: org.yaml.snakeyaml.DumperOptions$FlowStyle defaultFlowStyle>;
return v1;
}
public void setPropertyUtils(org.yaml.snakeyaml.introspector.PropertyUtils)
{
org.yaml.snakeyaml.representer.BaseRepresenter v0;
org.yaml.snakeyaml.introspector.PropertyUtils v1;
v0 := @this: org.yaml.snakeyaml.representer.BaseRepresenter;
v1 := @parameter0: org.yaml.snakeyaml.introspector.PropertyUtils;
v0.<org.yaml.snakeyaml.representer.BaseRepresenter: org.yaml.snakeyaml.introspector.PropertyUtils propertyUtils> = v1;
v0.<org.yaml.snakeyaml.representer.BaseRepresenter: boolean explicitPropertyUtils> = 1;
return;
}
public final org.yaml.snakeyaml.introspector.PropertyUtils getPropertyUtils()
{
org.yaml.snakeyaml.representer.BaseRepresenter v0;
org.yaml.snakeyaml.introspector.PropertyUtils v1, v2, v3;
v0 := @this: org.yaml.snakeyaml.representer.BaseRepresenter;
v1 = v0.<org.yaml.snakeyaml.representer.BaseRepresenter: org.yaml.snakeyaml.introspector.PropertyUtils propertyUtils>;
if v1 != null goto label1;
v2 = new org.yaml.snakeyaml.introspector.PropertyUtils;
specialinvoke v2.<org.yaml.snakeyaml.introspector.PropertyUtils: void <init>()>();
v0.<org.yaml.snakeyaml.representer.BaseRepresenter: org.yaml.snakeyaml.introspector.PropertyUtils propertyUtils> = v2;
label1:
v3 = v0.<org.yaml.snakeyaml.representer.BaseRepresenter: org.yaml.snakeyaml.introspector.PropertyUtils propertyUtils>;
return v3;
}
public final boolean isExplicitPropertyUtils()
{
org.yaml.snakeyaml.representer.BaseRepresenter v0;
boolean v1;
v0 := @this: org.yaml.snakeyaml.representer.BaseRepresenter;
v1 = v0.<org.yaml.snakeyaml.representer.BaseRepresenter: boolean explicitPropertyUtils>;
return v1;
}
}