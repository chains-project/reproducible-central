public class org.yaml.snakeyaml.representer.Representer extends org.yaml.snakeyaml.representer.SafeRepresenter
{
protected java.util.Map typeDefinitions;
public void <init>(org.yaml.snakeyaml.DumperOptions)
{
org.yaml.snakeyaml.DumperOptions v1;
org.yaml.snakeyaml.representer.Representer$RepresentJavaBean v4;
java.util.Map v2, v3;
org.yaml.snakeyaml.representer.Representer v0;
v0 := @this: org.yaml.snakeyaml.representer.Representer;
v1 := @parameter0: org.yaml.snakeyaml.DumperOptions;
specialinvoke v0.<org.yaml.snakeyaml.representer.SafeRepresenter: void <init>(org.yaml.snakeyaml.DumperOptions)>(v1);
v2 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
v0.<org.yaml.snakeyaml.representer.Representer: java.util.Map typeDefinitions> = v2;
v3 = v0.<org.yaml.snakeyaml.representer.Representer: java.util.Map representers>;
v4 = new org.yaml.snakeyaml.representer.Representer$RepresentJavaBean;
specialinvoke v4.<org.yaml.snakeyaml.representer.Representer$RepresentJavaBean: void <init>(org.yaml.snakeyaml.representer.Representer)>(v0);
interfaceinvoke v3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, v4);
return;
}
public org.yaml.snakeyaml.TypeDescription addTypeDescription(org.yaml.snakeyaml.TypeDescription)
{
java.util.HashMap v4;
org.yaml.snakeyaml.nodes.Tag v5, v7;
java.util.Map v2, v3, v9;
org.yaml.snakeyaml.representer.Representer v0;
java.lang.Class v10, v6;
java.lang.Object v11;
org.yaml.snakeyaml.TypeDescription v1;
org.yaml.snakeyaml.introspector.PropertyUtils v8;
v0 := @this: org.yaml.snakeyaml.representer.Representer;
v1 := @parameter0: org.yaml.snakeyaml.TypeDescription;
v2 = <java.util.Collections: java.util.Map EMPTY_MAP>;
v3 = v0.<org.yaml.snakeyaml.representer.Representer: java.util.Map typeDefinitions>;
if v2 != v3 goto label1;
v4 = new java.util.HashMap;
specialinvoke v4.<java.util.HashMap: void <init>()>();
v0.<org.yaml.snakeyaml.representer.Representer: java.util.Map typeDefinitions> = v4;
label1:
v5 = virtualinvoke v1.<org.yaml.snakeyaml.TypeDescription: org.yaml.snakeyaml.nodes.Tag getTag()>();
if v5 == null goto label2;
v6 = virtualinvoke v1.<org.yaml.snakeyaml.TypeDescription: java.lang.Class getType()>();
v7 = virtualinvoke v1.<org.yaml.snakeyaml.TypeDescription: org.yaml.snakeyaml.nodes.Tag getTag()>();
virtualinvoke v0.<org.yaml.snakeyaml.representer.Representer: org.yaml.snakeyaml.nodes.Tag addClassTag(java.lang.Class,org.yaml.snakeyaml.nodes.Tag)>(v6, v7);
label2:
v8 = virtualinvoke v0.<org.yaml.snakeyaml.representer.Representer: org.yaml.snakeyaml.introspector.PropertyUtils getPropertyUtils()>();
virtualinvoke v1.<org.yaml.snakeyaml.TypeDescription: void setPropertyUtils(org.yaml.snakeyaml.introspector.PropertyUtils)>(v8);
v9 = v0.<org.yaml.snakeyaml.representer.Representer: java.util.Map typeDefinitions>;
v10 = virtualinvoke v1.<org.yaml.snakeyaml.TypeDescription: java.lang.Class getType()>();
v11 = interfaceinvoke v9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v10, v1);
return v11;
}
public void setPropertyUtils(org.yaml.snakeyaml.introspector.PropertyUtils)
{
java.util.Iterator v4;
java.util.Collection v3;
java.util.Map v2;
org.yaml.snakeyaml.representer.Representer v0;
java.lang.Object v6;
org.yaml.snakeyaml.introspector.PropertyUtils v1;
boolean v5;
v0 := @this: org.yaml.snakeyaml.representer.Representer;
v1 := @parameter0: org.yaml.snakeyaml.introspector.PropertyUtils;
specialinvoke v0.<org.yaml.snakeyaml.representer.SafeRepresenter: void setPropertyUtils(org.yaml.snakeyaml.introspector.PropertyUtils)>(v1);
v2 = v0.<org.yaml.snakeyaml.representer.Representer: java.util.Map typeDefinitions>;
v3 = interfaceinvoke v2.<java.util.Map: java.util.Collection values()>();
v4 = interfaceinvoke v3.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v6.<org.yaml.snakeyaml.TypeDescription: void setPropertyUtils(org.yaml.snakeyaml.introspector.PropertyUtils)>(v1);
goto label1;
label2:
return;
}
protected org.yaml.snakeyaml.nodes.MappingNode representJavaBean(java.util.Set, java.lang.Object)
{
org.yaml.snakeyaml.DumperOptions$FlowStyle v11, v13, v27, v28, v29;
org.yaml.snakeyaml.nodes.MappingNode v10;
java.util.ArrayList v3;
org.yaml.snakeyaml.nodes.Node v22, v24;
java.util.Map v12, v18, v5;
int v4;
boolean v15, v23, v25, v26;
java.util.Iterator v14;
java.util.Set v1;
org.yaml.snakeyaml.nodes.Tag v8;
org.yaml.snakeyaml.nodes.NodeTuple v21;
org.yaml.snakeyaml.representer.Representer v0;
java.lang.Class v19, v6, v9;
java.lang.Object v16, v17, v2, v20, v7;
v0 := @this: org.yaml.snakeyaml.representer.Representer;
v1 := @parameter0: java.util.Set;
v2 := @parameter1: java.lang.Object;
v3 = new java.util.ArrayList;
v4 = interfaceinvoke v1.<java.util.Set: int size()>();
specialinvoke v3.<java.util.ArrayList: void <init>(int)>(v4);
v5 = v0.<org.yaml.snakeyaml.representer.Representer: java.util.Map classTags>;
v6 = virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v7 = interfaceinvoke v5.<java.util.Map: java.lang.Object get(java.lang.Object)>(v6);
if v7 == null goto label01;
v8 = v7;
goto label02;
label01:
v8 = new org.yaml.snakeyaml.nodes.Tag;
v9 = virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
specialinvoke v8.<org.yaml.snakeyaml.nodes.Tag: void <init>(java.lang.Class)>(v9);
label02:
v10 = new org.yaml.snakeyaml.nodes.MappingNode;
v11 = <org.yaml.snakeyaml.DumperOptions$FlowStyle: org.yaml.snakeyaml.DumperOptions$FlowStyle AUTO>;
specialinvoke v10.<org.yaml.snakeyaml.nodes.MappingNode: void <init>(org.yaml.snakeyaml.nodes.Tag,java.util.List,org.yaml.snakeyaml.DumperOptions$FlowStyle)>(v8, v3, v11);
v12 = v0.<org.yaml.snakeyaml.representer.Representer: java.util.Map representedObjects>;
interfaceinvoke v12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v2, v10);
v13 = <org.yaml.snakeyaml.DumperOptions$FlowStyle: org.yaml.snakeyaml.DumperOptions$FlowStyle FLOW>;
v14 = interfaceinvoke v1.<java.util.Set: java.util.Iterator iterator()>();
label03:
v15 = interfaceinvoke v14.<java.util.Iterator: boolean hasNext()>();
if v15 == 0 goto label08;
v16 = interfaceinvoke v14.<java.util.Iterator: java.lang.Object next()>();
v17 = virtualinvoke v16.<org.yaml.snakeyaml.introspector.Property: java.lang.Object get(java.lang.Object)>(v2);
if v17 == null goto label04;
v18 = v0.<org.yaml.snakeyaml.representer.Representer: java.util.Map classTags>;
v19 = virtualinvoke v17.<java.lang.Object: java.lang.Class getClass()>();
v20 = interfaceinvoke v18.<java.util.Map: java.lang.Object get(java.lang.Object)>(v19);
label04:
v21 = virtualinvoke v0.<org.yaml.snakeyaml.representer.Representer: org.yaml.snakeyaml.nodes.NodeTuple representJavaBeanProperty(java.lang.Object,org.yaml.snakeyaml.introspector.Property,java.lang.Object,org.yaml.snakeyaml.nodes.Tag)>(v2, v16, v17, v20);
if v21 == null goto label03;
v22 = virtualinvoke v21.<org.yaml.snakeyaml.nodes.NodeTuple: org.yaml.snakeyaml.nodes.Node getKeyNode()>();
v23 = virtualinvoke v22.<org.yaml.snakeyaml.nodes.ScalarNode: boolean isPlain()>();
if v23 != 0 goto label05;
v13 = <org.yaml.snakeyaml.DumperOptions$FlowStyle: org.yaml.snakeyaml.DumperOptions$FlowStyle BLOCK>;
label05:
v24 = virtualinvoke v21.<org.yaml.snakeyaml.nodes.NodeTuple: org.yaml.snakeyaml.nodes.Node getValueNode()>();
v25 = v24 instanceof org.yaml.snakeyaml.nodes.ScalarNode;
if v25 == 0 goto label06;
v26 = virtualinvoke v24.<org.yaml.snakeyaml.nodes.ScalarNode: boolean isPlain()>();
if v26 != 0 goto label07;
label06:
v13 = <org.yaml.snakeyaml.DumperOptions$FlowStyle: org.yaml.snakeyaml.DumperOptions$FlowStyle BLOCK>;
label07:
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v21);
goto label03;
label08:
v27 = v0.<org.yaml.snakeyaml.representer.Representer: org.yaml.snakeyaml.DumperOptions$FlowStyle defaultFlowStyle>;
v28 = <org.yaml.snakeyaml.DumperOptions$FlowStyle: org.yaml.snakeyaml.DumperOptions$FlowStyle AUTO>;
if v27 == v28 goto label09;
v29 = v0.<org.yaml.snakeyaml.representer.Representer: org.yaml.snakeyaml.DumperOptions$FlowStyle defaultFlowStyle>;
virtualinvoke v10.<org.yaml.snakeyaml.nodes.MappingNode: void setFlowStyle(org.yaml.snakeyaml.DumperOptions$FlowStyle)>(v29);
goto label10;
label09:
virtualinvoke v10.<org.yaml.snakeyaml.nodes.MappingNode: void setFlowStyle(org.yaml.snakeyaml.DumperOptions$FlowStyle)>(v13);
label10:
return v10;
}
protected org.yaml.snakeyaml.nodes.NodeTuple representJavaBeanProperty(java.lang.Object, org.yaml.snakeyaml.introspector.Property, java.lang.Object, org.yaml.snakeyaml.nodes.Tag)
{
org.yaml.snakeyaml.nodes.Node v6, v9;
org.yaml.snakeyaml.nodes.NodeId v10, v11, v15;
java.util.Map v7;
java.lang.String v5;
boolean v13, v18, v21, v8;
org.yaml.snakeyaml.introspector.Property v2;
org.yaml.snakeyaml.nodes.Tag v14, v19, v20, v22, v4;
org.yaml.snakeyaml.nodes.NodeTuple v23;
org.yaml.snakeyaml.representer.Representer v0;
java.lang.Class v12, v16, v17;
java.lang.Object v1, v3;
v0 := @this: org.yaml.snakeyaml.representer.Representer;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: org.yaml.snakeyaml.introspector.Property;
v3 := @parameter2: java.lang.Object;
v4 := @parameter3: org.yaml.snakeyaml.nodes.Tag;
v5 = virtualinvoke v2.<org.yaml.snakeyaml.introspector.Property: java.lang.String getName()>();
v6 = virtualinvoke v0.<org.yaml.snakeyaml.representer.Representer: org.yaml.snakeyaml.nodes.Node representData(java.lang.Object)>(v5);
v7 = v0.<org.yaml.snakeyaml.representer.Representer: java.util.Map representedObjects>;
v8 = interfaceinvoke v7.<java.util.Map: boolean containsKey(java.lang.Object)>(v3);
v9 = virtualinvoke v0.<org.yaml.snakeyaml.representer.Representer: org.yaml.snakeyaml.nodes.Node representData(java.lang.Object)>(v3);
if v3 == null goto label3;
if v8 != 0 goto label3;
v10 = virtualinvoke v9.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.NodeId getNodeId()>();
if v4 != null goto label3;
v11 = <org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId scalar>;
if v10 != v11 goto label1;
v12 = virtualinvoke v2.<org.yaml.snakeyaml.introspector.Property: java.lang.Class getType()>();
if v12 == class "Ljava/lang/Enum;" goto label3;
v13 = v3 instanceof java.lang.Enum;
if v13 == 0 goto label3;
v14 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag STR>;
virtualinvoke v9.<org.yaml.snakeyaml.nodes.Node: void setTag(org.yaml.snakeyaml.nodes.Tag)>(v14);
goto label3;
label1:
v15 = <org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId mapping>;
if v10 != v15 goto label2;
v16 = virtualinvoke v2.<org.yaml.snakeyaml.introspector.Property: java.lang.Class getType()>();
v17 = virtualinvoke v3.<java.lang.Object: java.lang.Class getClass()>();
if v16 != v17 goto label2;
v18 = v3 instanceof java.util.Map;
if v18 != 0 goto label2;
v19 = virtualinvoke v9.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.Tag getTag()>();
v20 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag SET>;
v21 = virtualinvoke v19.<org.yaml.snakeyaml.nodes.Tag: boolean equals(java.lang.Object)>(v20);
if v21 != 0 goto label2;
v22 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag MAP>;
virtualinvoke v9.<org.yaml.snakeyaml.nodes.Node: void setTag(org.yaml.snakeyaml.nodes.Tag)>(v22);
label2:
virtualinvoke v0.<org.yaml.snakeyaml.representer.Representer: void checkGlobalTag(org.yaml.snakeyaml.introspector.Property,org.yaml.snakeyaml.nodes.Node,java.lang.Object)>(v2, v9, v3);
label3:
v23 = new org.yaml.snakeyaml.nodes.NodeTuple;
specialinvoke v23.<org.yaml.snakeyaml.nodes.NodeTuple: void <init>(org.yaml.snakeyaml.nodes.Node,org.yaml.snakeyaml.nodes.Node)>(v6, v9);
return v23;
}
protected void checkGlobalTag(org.yaml.snakeyaml.introspector.Property, org.yaml.snakeyaml.nodes.Node, java.lang.Object)
{
org.yaml.snakeyaml.nodes.Node v2, v36, v49, v50;
org.yaml.snakeyaml.nodes.NodeId v10, v11, v25, v26, v39, v40;
boolean v15, v17, v20, v24, v28, v33, v38, v42, v47, v5, v51, v8;
org.yaml.snakeyaml.introspector.Property v1;
java.util.List v18, v30, v45;
java.lang.Iterable v13;
java.util.Iterator v16, v19, v31, v32, v46;
java.lang.Class[] v9;
org.yaml.snakeyaml.nodes.Tag v27, v41;
org.yaml.snakeyaml.representer.Representer v0;
java.lang.Class v12, v14, v23, v29, v37, v4, v43, v44, v6, v7;
java.lang.Object v21, v22, v3, v34, v35, v48;
v0 := @this: org.yaml.snakeyaml.representer.Representer;
v1 := @parameter0: org.yaml.snakeyaml.introspector.Property;
v2 := @parameter1: org.yaml.snakeyaml.nodes.Node;
v3 := @parameter2: java.lang.Object;
v4 = virtualinvoke v3.<java.lang.Object: java.lang.Class getClass()>();
v5 = virtualinvoke v4.<java.lang.Class: boolean isArray()>();
if v5 == 0 goto label1;
v6 = virtualinvoke v3.<java.lang.Object: java.lang.Class getClass()>();
v7 = virtualinvoke v6.<java.lang.Class: java.lang.Class getComponentType()>();
v8 = virtualinvoke v7.<java.lang.Class: boolean isPrimitive()>();
if v8 == 0 goto label1;
return;
label1:
v9 = virtualinvoke v1.<org.yaml.snakeyaml.introspector.Property: java.lang.Class[] getActualTypeArguments()>();
if v9 == null goto label8;
v10 = virtualinvoke v2.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.NodeId getNodeId()>();
v11 = <org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId sequence>;
if v10 != v11 goto label4;
v12 = v9[0];
v13 = <java.util.Collections: java.util.List EMPTY_LIST>;
v14 = virtualinvoke v3.<java.lang.Object: java.lang.Class getClass()>();
v15 = virtualinvoke v14.<java.lang.Class: boolean isArray()>();
if v15 == 0 goto label2;
staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v3);
goto label2;
label2:
v16 = interfaceinvoke v3.<java.lang.Iterable: java.util.Iterator iterator()>();
v17 = interfaceinvoke v16.<java.util.Iterator: boolean hasNext()>();
if v17 == 0 goto label8;
v18 = virtualinvoke v2.<org.yaml.snakeyaml.nodes.SequenceNode: java.util.List getValue()>();
v19 = interfaceinvoke v18.<java.util.List: java.util.Iterator iterator()>();
label3:
v20 = interfaceinvoke v19.<java.util.Iterator: boolean hasNext()>();
if v20 == 0 goto label8;
v21 = interfaceinvoke v19.<java.util.Iterator: java.lang.Object next()>();
v22 = interfaceinvoke v16.<java.util.Iterator: java.lang.Object next()>();
if v22 == null goto label3;
v23 = virtualinvoke v22.<java.lang.Object: java.lang.Class getClass()>();
v24 = virtualinvoke v12.<java.lang.Object: boolean equals(java.lang.Object)>(v23);
if v24 == 0 goto label3;
v25 = virtualinvoke v21.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.NodeId getNodeId()>();
v26 = <org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId mapping>;
if v25 != v26 goto label3;
v27 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag MAP>;
virtualinvoke v21.<org.yaml.snakeyaml.nodes.Node: void setTag(org.yaml.snakeyaml.nodes.Tag)>(v27);
goto label3;
label4:
v28 = v3 instanceof java.util.Set;
if v28 == 0 goto label6;
v29 = v9[0];
v30 = virtualinvoke v2.<org.yaml.snakeyaml.nodes.MappingNode: java.util.List getValue()>();
v31 = interfaceinvoke v30.<java.util.List: java.util.Iterator iterator()>();
v32 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
label5:
v33 = interfaceinvoke v32.<java.util.Iterator: boolean hasNext()>();
if v33 == 0 goto label8;
v34 = interfaceinvoke v32.<java.util.Iterator: java.lang.Object next()>();
v35 = interfaceinvoke v31.<java.util.Iterator: java.lang.Object next()>();
v36 = virtualinvoke v35.<org.yaml.snakeyaml.nodes.NodeTuple: org.yaml.snakeyaml.nodes.Node getKeyNode()>();
v37 = virtualinvoke v34.<java.lang.Object: java.lang.Class getClass()>();
v38 = virtualinvoke v29.<java.lang.Object: boolean equals(java.lang.Object)>(v37);
if v38 == 0 goto label5;
v39 = virtualinvoke v36.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.NodeId getNodeId()>();
v40 = <org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId mapping>;
if v39 != v40 goto label5;
v41 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag MAP>;
virtualinvoke v36.<org.yaml.snakeyaml.nodes.Node: void setTag(org.yaml.snakeyaml.nodes.Tag)>(v41);
goto label5;
label6:
v42 = v3 instanceof java.util.Map;
if v42 == 0 goto label8;
v43 = v9[0];
v44 = v9[1];
v45 = virtualinvoke v2.<org.yaml.snakeyaml.nodes.MappingNode: java.util.List getValue()>();
v46 = interfaceinvoke v45.<java.util.List: java.util.Iterator iterator()>();
label7:
v47 = interfaceinvoke v46.<java.util.Iterator: boolean hasNext()>();
if v47 == 0 goto label8;
v48 = interfaceinvoke v46.<java.util.Iterator: java.lang.Object next()>();
v49 = virtualinvoke v48.<org.yaml.snakeyaml.nodes.NodeTuple: org.yaml.snakeyaml.nodes.Node getKeyNode()>();
specialinvoke v0.<org.yaml.snakeyaml.representer.Representer: void resetTag(java.lang.Class,org.yaml.snakeyaml.nodes.Node)>(v43, v49);
v50 = virtualinvoke v48.<org.yaml.snakeyaml.nodes.NodeTuple: org.yaml.snakeyaml.nodes.Node getValueNode()>();
specialinvoke v0.<org.yaml.snakeyaml.representer.Representer: void resetTag(java.lang.Class,org.yaml.snakeyaml.nodes.Node)>(v44, v50);
goto label7;
label8:
return;
}
private void resetTag(java.lang.Class, org.yaml.snakeyaml.nodes.Node)
{
org.yaml.snakeyaml.nodes.Tag v3, v7, v8;
org.yaml.snakeyaml.nodes.Node v2;
org.yaml.snakeyaml.representer.Representer v0;
java.lang.Class v1, v5;
boolean v4, v6;
v0 := @this: org.yaml.snakeyaml.representer.Representer;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: org.yaml.snakeyaml.nodes.Node;
v3 = virtualinvoke v2.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.Tag getTag()>();
v4 = virtualinvoke v3.<org.yaml.snakeyaml.nodes.Tag: boolean matches(java.lang.Class)>(v1);
if v4 == 0 goto label2;
v5 = class "Ljava/lang/Enum;";
v6 = virtualinvoke v5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v1);
if v6 == 0 goto label1;
v7 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag STR>;
virtualinvoke v2.<org.yaml.snakeyaml.nodes.Node: void setTag(org.yaml.snakeyaml.nodes.Tag)>(v7);
goto label2;
label1:
v8 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag MAP>;
virtualinvoke v2.<org.yaml.snakeyaml.nodes.Node: void setTag(org.yaml.snakeyaml.nodes.Tag)>(v8);
label2:
return;
}
protected java.util.Set getProperties(java.lang.Class)
{
java.util.Set v6, v8;
java.util.Map v2, v4;
org.yaml.snakeyaml.representer.Representer v0;
java.lang.Class v1;
java.lang.Object v5;
org.yaml.snakeyaml.introspector.PropertyUtils v7;
boolean v3;
v0 := @this: org.yaml.snakeyaml.representer.Representer;
v1 := @parameter0: java.lang.Class;
v2 = v0.<org.yaml.snakeyaml.representer.Representer: java.util.Map typeDefinitions>;
v3 = interfaceinvoke v2.<java.util.Map: boolean containsKey(java.lang.Object)>(v1);
if v3 == 0 goto label1;
v4 = v0.<org.yaml.snakeyaml.representer.Representer: java.util.Map typeDefinitions>;
v5 = interfaceinvoke v4.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
v6 = virtualinvoke v5.<org.yaml.snakeyaml.TypeDescription: java.util.Set getProperties()>();
return v6;
label1:
v7 = virtualinvoke v0.<org.yaml.snakeyaml.representer.Representer: org.yaml.snakeyaml.introspector.PropertyUtils getPropertyUtils()>();
v8 = virtualinvoke v7.<org.yaml.snakeyaml.introspector.PropertyUtils: java.util.Set getProperties(java.lang.Class)>(v1);
return v8;
}
}