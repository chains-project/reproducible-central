public class org.yaml.snakeyaml.resolver.Resolver extends java.lang.Object
{
public static final java.util.regex.Pattern BOOL;
public static final java.util.regex.Pattern FLOAT;
public static final java.util.regex.Pattern INT;
public static final java.util.regex.Pattern MERGE;
public static final java.util.regex.Pattern NULL;
public static final java.util.regex.Pattern EMPTY;
public static final java.util.regex.Pattern TIMESTAMP;
public static final java.util.regex.Pattern VALUE;
public static final java.util.regex.Pattern YAML;
protected java.util.Map yamlImplicitResolvers;
protected void addImplicitResolvers()
{
org.yaml.snakeyaml.resolver.Resolver v0;
org.yaml.snakeyaml.nodes.Tag v1, v11, v13, v15, v3, v5, v7, v9;
java.util.regex.Pattern v10, v12, v14, v16, v2, v4, v6, v8;
v0 := @this: org.yaml.snakeyaml.resolver.Resolver;
v1 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag BOOL>;
v2 = <org.yaml.snakeyaml.resolver.Resolver: java.util.regex.Pattern BOOL>;
virtualinvoke v0.<org.yaml.snakeyaml.resolver.Resolver: void addImplicitResolver(org.yaml.snakeyaml.nodes.Tag,java.util.regex.Pattern,java.lang.String,int)>(v1, v2, "yYnNtTfFoO", 10);
v3 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag INT>;
v4 = <org.yaml.snakeyaml.resolver.Resolver: java.util.regex.Pattern INT>;
virtualinvoke v0.<org.yaml.snakeyaml.resolver.Resolver: void addImplicitResolver(org.yaml.snakeyaml.nodes.Tag,java.util.regex.Pattern,java.lang.String)>(v3, v4, "-+0123456789");
v5 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag FLOAT>;
v6 = <org.yaml.snakeyaml.resolver.Resolver: java.util.regex.Pattern FLOAT>;
virtualinvoke v0.<org.yaml.snakeyaml.resolver.Resolver: void addImplicitResolver(org.yaml.snakeyaml.nodes.Tag,java.util.regex.Pattern,java.lang.String)>(v5, v6, "-+0123456789.");
v7 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag MERGE>;
v8 = <org.yaml.snakeyaml.resolver.Resolver: java.util.regex.Pattern MERGE>;
virtualinvoke v0.<org.yaml.snakeyaml.resolver.Resolver: void addImplicitResolver(org.yaml.snakeyaml.nodes.Tag,java.util.regex.Pattern,java.lang.String,int)>(v7, v8, "<", 10);
v9 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag NULL>;
v10 = <org.yaml.snakeyaml.resolver.Resolver: java.util.regex.Pattern NULL>;
virtualinvoke v0.<org.yaml.snakeyaml.resolver.Resolver: void addImplicitResolver(org.yaml.snakeyaml.nodes.Tag,java.util.regex.Pattern,java.lang.String,int)>(v9, v10, "~nN\u0000", 10);
v11 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag NULL>;
v12 = <org.yaml.snakeyaml.resolver.Resolver: java.util.regex.Pattern EMPTY>;
virtualinvoke v0.<org.yaml.snakeyaml.resolver.Resolver: void addImplicitResolver(org.yaml.snakeyaml.nodes.Tag,java.util.regex.Pattern,java.lang.String,int)>(v11, v12, null, 10);
v13 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag TIMESTAMP>;
v14 = <org.yaml.snakeyaml.resolver.Resolver: java.util.regex.Pattern TIMESTAMP>;
virtualinvoke v0.<org.yaml.snakeyaml.resolver.Resolver: void addImplicitResolver(org.yaml.snakeyaml.nodes.Tag,java.util.regex.Pattern,java.lang.String,int)>(v13, v14, "0123456789", 50);
v15 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag YAML>;
v16 = <org.yaml.snakeyaml.resolver.Resolver: java.util.regex.Pattern YAML>;
virtualinvoke v0.<org.yaml.snakeyaml.resolver.Resolver: void addImplicitResolver(org.yaml.snakeyaml.nodes.Tag,java.util.regex.Pattern,java.lang.String,int)>(v15, v16, "!&*", 10);
return;
}
public void <init>()
{
org.yaml.snakeyaml.resolver.Resolver v0;
java.util.HashMap v1;
v0 := @this: org.yaml.snakeyaml.resolver.Resolver;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.HashMap;
specialinvoke v1.<java.util.HashMap: void <init>()>();
v0.<org.yaml.snakeyaml.resolver.Resolver: java.util.Map yamlImplicitResolvers> = v1;
virtualinvoke v0.<org.yaml.snakeyaml.resolver.Resolver: void addImplicitResolvers()>();
return;
}
public void addImplicitResolver(org.yaml.snakeyaml.nodes.Tag, java.util.regex.Pattern, java.lang.String)
{
org.yaml.snakeyaml.resolver.Resolver v0;
java.lang.String v3;
java.util.regex.Pattern v2;
org.yaml.snakeyaml.nodes.Tag v1;
v0 := @this: org.yaml.snakeyaml.resolver.Resolver;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Tag;
v2 := @parameter1: java.util.regex.Pattern;
v3 := @parameter2: java.lang.String;
virtualinvoke v0.<org.yaml.snakeyaml.resolver.Resolver: void addImplicitResolver(org.yaml.snakeyaml.nodes.Tag,java.util.regex.Pattern,java.lang.String,int)>(v1, v2, v3, 1024);
return;
}
public void addImplicitResolver(org.yaml.snakeyaml.nodes.Tag, java.util.regex.Pattern, java.lang.String, int)
{
java.util.ArrayList v18, v7;
java.lang.Character v14;
java.util.Map v16, v19, v5, v8;
int v11, v12, v4;
org.yaml.snakeyaml.resolver.Resolver v0;
java.lang.String v3;
char v13, v15;
org.yaml.snakeyaml.resolver.ResolverTuple v20, v9;
org.yaml.snakeyaml.nodes.Tag v1;
char[] v10;
java.lang.Object v17, v6;
java.util.regex.Pattern v2;
v0 := @this: org.yaml.snakeyaml.resolver.Resolver;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Tag;
v2 := @parameter1: java.util.regex.Pattern;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: int;
if v3 != null goto label2;
v5 = v0.<org.yaml.snakeyaml.resolver.Resolver: java.util.Map yamlImplicitResolvers>;
v6 = interfaceinvoke v5.<java.util.Map: java.lang.Object get(java.lang.Object)>(null);
if v6 != null goto label1;
v7 = new java.util.ArrayList;
specialinvoke v7.<java.util.ArrayList: void <init>()>();
v6 = v7;
v8 = v0.<org.yaml.snakeyaml.resolver.Resolver: java.util.Map yamlImplicitResolvers>;
interfaceinvoke v8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, v7);
label1:
v9 = new org.yaml.snakeyaml.resolver.ResolverTuple;
specialinvoke v9.<org.yaml.snakeyaml.resolver.ResolverTuple: void <init>(org.yaml.snakeyaml.nodes.Tag,java.util.regex.Pattern,int)>(v1, v2, v4);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v9);
goto label6;
label2:
v10 = virtualinvoke v3.<java.lang.String: char[] toCharArray()>();
v11 = 0;
v12 = lengthof v10;
label3:
if v11 >= v12 goto label6;
v13 = v10[v11];
v14 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(v13);
v15 = virtualinvoke v14.<java.lang.Character: char charValue()>();
if v15 != 0 goto label4;
v14 = null;
label4:
v16 = v0.<org.yaml.snakeyaml.resolver.Resolver: java.util.Map yamlImplicitResolvers>;
v17 = interfaceinvoke v16.<java.util.Map: java.lang.Object get(java.lang.Object)>(v14);
if v17 != null goto label5;
v18 = new java.util.ArrayList;
specialinvoke v18.<java.util.ArrayList: void <init>()>();
v17 = v18;
v19 = v0.<org.yaml.snakeyaml.resolver.Resolver: java.util.Map yamlImplicitResolvers>;
interfaceinvoke v19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v14, v18);
label5:
v20 = new org.yaml.snakeyaml.resolver.ResolverTuple;
specialinvoke v20.<org.yaml.snakeyaml.resolver.ResolverTuple: void <init>(org.yaml.snakeyaml.nodes.Tag,java.util.regex.Pattern,int)>(v1, v2, v4);
interfaceinvoke v17.<java.util.List: boolean add(java.lang.Object)>(v20);
v11 = v11 + 1;
goto label3;
label6:
return;
}
public org.yaml.snakeyaml.nodes.Tag resolve(org.yaml.snakeyaml.nodes.NodeId, java.lang.String, boolean)
{
java.util.regex.Matcher v19, v32;
java.lang.Character v11, v7;
int[] v34;
org.yaml.snakeyaml.nodes.NodeId v1, v4;
java.util.Map v21, v23, v6, v9;
boolean v13, v20, v22, v26, v3, v33;
java.util.regex.Pattern v16, v29;
int v17, v18, v30, v31, v35, v36, v5;
org.yaml.snakeyaml.resolver.Resolver v0;
java.lang.String v2;
java.util.Iterator v12, v25;
char v10;
org.yaml.snakeyaml.nodes.Tag v15, v28, v37, v38, v39;
java.lang.Object v14, v24, v27, v8;
v0 := @this: org.yaml.snakeyaml.resolver.Resolver;
v1 := @parameter0: org.yaml.snakeyaml.nodes.NodeId;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: boolean;
v4 = <org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId scalar>;
if v1 != v4 goto label6;
if v3 == 0 goto label6;
v5 = virtualinvoke v2.<java.lang.String: int length()>();
if v5 != 0 goto label1;
v6 = v0.<org.yaml.snakeyaml.resolver.Resolver: java.util.Map yamlImplicitResolvers>;
v7 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(0);
v8 = interfaceinvoke v6.<java.util.Map: java.lang.Object get(java.lang.Object)>(v7);
goto label2;
label1:
v9 = v0.<org.yaml.snakeyaml.resolver.Resolver: java.util.Map yamlImplicitResolvers>;
v10 = virtualinvoke v2.<java.lang.String: char charAt(int)>(0);
v11 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(v10);
interfaceinvoke v9.<java.util.Map: java.lang.Object get(java.lang.Object)>(v11);
label2:
if v8 == null goto label4;
v12 = interfaceinvoke v8.<java.util.List: java.util.Iterator iterator()>();
label3:
v13 = interfaceinvoke v12.<java.util.Iterator: boolean hasNext()>();
if v13 == 0 goto label4;
v14 = interfaceinvoke v12.<java.util.Iterator: java.lang.Object next()>();
v15 = virtualinvoke v14.<org.yaml.snakeyaml.resolver.ResolverTuple: org.yaml.snakeyaml.nodes.Tag getTag()>();
v16 = virtualinvoke v14.<org.yaml.snakeyaml.resolver.ResolverTuple: java.util.regex.Pattern getRegexp()>();
v17 = virtualinvoke v2.<java.lang.String: int length()>();
v18 = virtualinvoke v14.<org.yaml.snakeyaml.resolver.ResolverTuple: int getLimit()>();
if v17 > v18 goto label3;
v19 = virtualinvoke v16.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v2);
v20 = virtualinvoke v19.<java.util.regex.Matcher: boolean matches()>();
if v20 == 0 goto label3;
return v15;
label4:
v21 = v0.<org.yaml.snakeyaml.resolver.Resolver: java.util.Map yamlImplicitResolvers>;
v22 = interfaceinvoke v21.<java.util.Map: boolean containsKey(java.lang.Object)>(null);
if v22 == 0 goto label6;
v23 = v0.<org.yaml.snakeyaml.resolver.Resolver: java.util.Map yamlImplicitResolvers>;
v24 = interfaceinvoke v23.<java.util.Map: java.lang.Object get(java.lang.Object)>(null);
v25 = interfaceinvoke v24.<java.util.List: java.util.Iterator iterator()>();
label5:
v26 = interfaceinvoke v25.<java.util.Iterator: boolean hasNext()>();
if v26 == 0 goto label6;
v27 = interfaceinvoke v25.<java.util.Iterator: java.lang.Object next()>();
v28 = virtualinvoke v27.<org.yaml.snakeyaml.resolver.ResolverTuple: org.yaml.snakeyaml.nodes.Tag getTag()>();
v29 = virtualinvoke v27.<org.yaml.snakeyaml.resolver.ResolverTuple: java.util.regex.Pattern getRegexp()>();
v30 = virtualinvoke v2.<java.lang.String: int length()>();
v31 = virtualinvoke v27.<org.yaml.snakeyaml.resolver.ResolverTuple: int getLimit()>();
if v30 > v31 goto label5;
v32 = virtualinvoke v29.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v2);
v33 = virtualinvoke v32.<java.util.regex.Matcher: boolean matches()>();
if v33 == 0 goto label5;
return v28;
label6:
v34 = <org.yaml.snakeyaml.resolver.Resolver$1: int[] $SwitchMap$org$yaml$snakeyaml$nodes$NodeId>;
v35 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.NodeId: int ordinal()>();
v36 = v34[v35];
lookupswitch(v36)
{
case 1: goto label7;
case 2: goto label8;
default: goto label9;
};
label7:
v37 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag STR>;
return v37;
label8:
v38 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag SEQ>;
return v38;
label9:
v39 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag MAP>;
return v39;
}
static void <clinit>()
{
java.util.regex.Pattern v0, v1, v2, v3, v4, v5, v6, v7, v8;
v0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^(?:yes|Yes|YES|no|No|NO|true|True|TRUE|false|False|FALSE|on|On|ON|off|Off|OFF)$");
<org.yaml.snakeyaml.resolver.Resolver: java.util.regex.Pattern BOOL> = v0;
v1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^([-+]?(?:[0-9][0-9_]*)\\.[0-9_]*(?:[eE][-+]?[0-9]+)?|[-+]?(?:[0-9][0-9_]*)(?:[eE][-+]?[0-9]+)|[-+]?\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$");
<org.yaml.snakeyaml.resolver.Resolver: java.util.regex.Pattern FLOAT> = v1;
v2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^(?:[-+]?0b_*[0-1][0-1_]*|[-+]?0_*[0-7][0-7_]*|[-+]?(?:0|[1-9][0-9_]*)|[-+]?0x_*[0-9a-fA-F][0-9a-fA-F_]*|[-+]?[1-9][0-9_]*(?::[0-5]?[0-9])+)$");
<org.yaml.snakeyaml.resolver.Resolver: java.util.regex.Pattern INT> = v2;
v3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^(?:<<)$");
<org.yaml.snakeyaml.resolver.Resolver: java.util.regex.Pattern MERGE> = v3;
v4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^(?:~|null|Null|NULL| )$");
<org.yaml.snakeyaml.resolver.Resolver: java.util.regex.Pattern NULL> = v4;
v5 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^$");
<org.yaml.snakeyaml.resolver.Resolver: java.util.regex.Pattern EMPTY> = v5;
v6 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^(?:[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]|[0-9][0-9][0-9][0-9]-[0-9][0-9]?-[0-9][0-9]?(?:[Tt]|[ \t]+)[0-9][0-9]?:[0-9][0-9]:[0-9][0-9](?:\\.[0-9]*)?(?:[ \t]*(?:Z|[-+][0-9][0-9]?(?::[0-9][0-9])?))?)$");
<org.yaml.snakeyaml.resolver.Resolver: java.util.regex.Pattern TIMESTAMP> = v6;
v7 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^(?:=)$");
<org.yaml.snakeyaml.resolver.Resolver: java.util.regex.Pattern VALUE> = v7;
v8 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^(?:!|&|\\*)$");
<org.yaml.snakeyaml.resolver.Resolver: java.util.regex.Pattern YAML> = v8;
return;
}
}