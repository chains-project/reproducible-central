public final class org.yaml.snakeyaml.serializer.Serializer extends java.lang.Object
{
private final org.yaml.snakeyaml.emitter.Emitable emitter;
private final org.yaml.snakeyaml.resolver.Resolver resolver;
private final boolean explicitStart;
private final boolean explicitEnd;
private org.yaml.snakeyaml.DumperOptions$Version useVersion;
private final java.util.Map useTags;
private final java.util.Set serializedNodes;
private final java.util.Map anchors;
private final org.yaml.snakeyaml.serializer.AnchorGenerator anchorGenerator;
private java.lang.Boolean closed;
private final org.yaml.snakeyaml.nodes.Tag explicitRoot;
public void <init>(org.yaml.snakeyaml.emitter.Emitable, org.yaml.snakeyaml.resolver.Resolver, org.yaml.snakeyaml.DumperOptions, org.yaml.snakeyaml.nodes.Tag)
{
org.yaml.snakeyaml.serializer.AnchorGenerator v15;
java.util.HashMap v14;
java.lang.NullPointerException v5, v6, v7;
java.util.HashSet v13;
org.yaml.snakeyaml.DumperOptions v3;
org.yaml.snakeyaml.emitter.Emitable v1;
java.util.Map v12;
org.yaml.snakeyaml.resolver.Resolver v2;
boolean v8, v9;
org.yaml.snakeyaml.DumperOptions$Version v10, v11;
org.yaml.snakeyaml.nodes.Tag v4;
org.yaml.snakeyaml.serializer.Serializer v0;
v0 := @this: org.yaml.snakeyaml.serializer.Serializer;
v1 := @parameter0: org.yaml.snakeyaml.emitter.Emitable;
v2 := @parameter1: org.yaml.snakeyaml.resolver.Resolver;
v3 := @parameter2: org.yaml.snakeyaml.DumperOptions;
v4 := @parameter3: org.yaml.snakeyaml.nodes.Tag;
specialinvoke v0.<java.lang.Object: void <init>()>();
if v1 != null goto label1;
v5 = new java.lang.NullPointerException;
specialinvoke v5.<java.lang.NullPointerException: void <init>(java.lang.String)>("Emitter must  be provided");
throw v5;
label1:
if v2 != null goto label2;
v6 = new java.lang.NullPointerException;
specialinvoke v6.<java.lang.NullPointerException: void <init>(java.lang.String)>("Resolver must  be provided");
throw v6;
label2:
if v3 != null goto label3;
v7 = new java.lang.NullPointerException;
specialinvoke v7.<java.lang.NullPointerException: void <init>(java.lang.String)>("DumperOptions must  be provided");
throw v7;
label3:
v0.<org.yaml.snakeyaml.serializer.Serializer: org.yaml.snakeyaml.emitter.Emitable emitter> = v1;
v0.<org.yaml.snakeyaml.serializer.Serializer: org.yaml.snakeyaml.resolver.Resolver resolver> = v2;
v8 = virtualinvoke v3.<org.yaml.snakeyaml.DumperOptions: boolean isExplicitStart()>();
v0.<org.yaml.snakeyaml.serializer.Serializer: boolean explicitStart> = v8;
v9 = virtualinvoke v3.<org.yaml.snakeyaml.DumperOptions: boolean isExplicitEnd()>();
v0.<org.yaml.snakeyaml.serializer.Serializer: boolean explicitEnd> = v9;
v10 = virtualinvoke v3.<org.yaml.snakeyaml.DumperOptions: org.yaml.snakeyaml.DumperOptions$Version getVersion()>();
if v10 == null goto label4;
v11 = virtualinvoke v3.<org.yaml.snakeyaml.DumperOptions: org.yaml.snakeyaml.DumperOptions$Version getVersion()>();
v0.<org.yaml.snakeyaml.serializer.Serializer: org.yaml.snakeyaml.DumperOptions$Version useVersion> = v11;
label4:
v12 = virtualinvoke v3.<org.yaml.snakeyaml.DumperOptions: java.util.Map getTags()>();
v0.<org.yaml.snakeyaml.serializer.Serializer: java.util.Map useTags> = v12;
v13 = new java.util.HashSet;
specialinvoke v13.<java.util.HashSet: void <init>()>();
v0.<org.yaml.snakeyaml.serializer.Serializer: java.util.Set serializedNodes> = v13;
v14 = new java.util.HashMap;
specialinvoke v14.<java.util.HashMap: void <init>()>();
v0.<org.yaml.snakeyaml.serializer.Serializer: java.util.Map anchors> = v14;
v15 = virtualinvoke v3.<org.yaml.snakeyaml.DumperOptions: org.yaml.snakeyaml.serializer.AnchorGenerator getAnchorGenerator()>();
v0.<org.yaml.snakeyaml.serializer.Serializer: org.yaml.snakeyaml.serializer.AnchorGenerator anchorGenerator> = v15;
v0.<org.yaml.snakeyaml.serializer.Serializer: java.lang.Boolean closed> = null;
v0.<org.yaml.snakeyaml.serializer.Serializer: org.yaml.snakeyaml.nodes.Tag explicitRoot> = v4;
return;
}
public void open() throws java.io.IOException
{
org.yaml.snakeyaml.serializer.SerializerException v8, v9;
org.yaml.snakeyaml.emitter.Emitable v2;
org.yaml.snakeyaml.serializer.Serializer v0;
java.lang.Boolean v1, v4, v5, v6;
org.yaml.snakeyaml.events.StreamStartEvent v3;
boolean v7;
v0 := @this: org.yaml.snakeyaml.serializer.Serializer;
v1 = v0.<org.yaml.snakeyaml.serializer.Serializer: java.lang.Boolean closed>;
if v1 != null goto label1;
v2 = v0.<org.yaml.snakeyaml.serializer.Serializer: org.yaml.snakeyaml.emitter.Emitable emitter>;
v3 = new org.yaml.snakeyaml.events.StreamStartEvent;
specialinvoke v3.<org.yaml.snakeyaml.events.StreamStartEvent: void <init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)>(null, null);
interfaceinvoke v2.<org.yaml.snakeyaml.emitter.Emitable: void emit(org.yaml.snakeyaml.events.Event)>(v3);
v4 = <java.lang.Boolean: java.lang.Boolean FALSE>;
v0.<org.yaml.snakeyaml.serializer.Serializer: java.lang.Boolean closed> = v4;
goto label3;
label1:
v5 = <java.lang.Boolean: java.lang.Boolean TRUE>;
v6 = v0.<org.yaml.snakeyaml.serializer.Serializer: java.lang.Boolean closed>;
v7 = virtualinvoke v5.<java.lang.Boolean: boolean equals(java.lang.Object)>(v6);
if v7 == 0 goto label2;
v8 = new org.yaml.snakeyaml.serializer.SerializerException;
specialinvoke v8.<org.yaml.snakeyaml.serializer.SerializerException: void <init>(java.lang.String)>("serializer is closed");
throw v8;
label2:
v9 = new org.yaml.snakeyaml.serializer.SerializerException;
specialinvoke v9.<org.yaml.snakeyaml.serializer.SerializerException: void <init>(java.lang.String)>("serializer is already opened");
throw v9;
label3:
return;
}
public void close() throws java.io.IOException
{
org.yaml.snakeyaml.serializer.SerializerException v2;
java.util.Set v9;
org.yaml.snakeyaml.emitter.Emitable v6;
org.yaml.snakeyaml.serializer.Serializer v0;
java.util.Map v10;
java.lang.Boolean v1, v3, v4, v8;
org.yaml.snakeyaml.events.StreamEndEvent v7;
boolean v5;
v0 := @this: org.yaml.snakeyaml.serializer.Serializer;
v1 = v0.<org.yaml.snakeyaml.serializer.Serializer: java.lang.Boolean closed>;
if v1 != null goto label1;
v2 = new org.yaml.snakeyaml.serializer.SerializerException;
specialinvoke v2.<org.yaml.snakeyaml.serializer.SerializerException: void <init>(java.lang.String)>("serializer is not opened");
throw v2;
label1:
v3 = <java.lang.Boolean: java.lang.Boolean TRUE>;
v4 = v0.<org.yaml.snakeyaml.serializer.Serializer: java.lang.Boolean closed>;
v5 = virtualinvoke v3.<java.lang.Boolean: boolean equals(java.lang.Object)>(v4);
if v5 != 0 goto label2;
v6 = v0.<org.yaml.snakeyaml.serializer.Serializer: org.yaml.snakeyaml.emitter.Emitable emitter>;
v7 = new org.yaml.snakeyaml.events.StreamEndEvent;
specialinvoke v7.<org.yaml.snakeyaml.events.StreamEndEvent: void <init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)>(null, null);
interfaceinvoke v6.<org.yaml.snakeyaml.emitter.Emitable: void emit(org.yaml.snakeyaml.events.Event)>(v7);
v8 = <java.lang.Boolean: java.lang.Boolean TRUE>;
v0.<org.yaml.snakeyaml.serializer.Serializer: java.lang.Boolean closed> = v8;
v9 = v0.<org.yaml.snakeyaml.serializer.Serializer: java.util.Set serializedNodes>;
interfaceinvoke v9.<java.util.Set: void clear()>();
v10 = v0.<org.yaml.snakeyaml.serializer.Serializer: java.util.Map anchors>;
interfaceinvoke v10.<java.util.Map: void clear()>();
label2:
return;
}
public void serialize(org.yaml.snakeyaml.nodes.Node) throws java.io.IOException
{
org.yaml.snakeyaml.serializer.SerializerException v3, v6;
org.yaml.snakeyaml.events.DocumentStartEvent v8;
org.yaml.snakeyaml.nodes.Node v1;
org.yaml.snakeyaml.emitter.Emitable v14, v7;
java.util.Map v11, v18;
java.lang.Boolean v2, v4;
boolean v16, v5, v9;
java.util.Set v17;
org.yaml.snakeyaml.DumperOptions$Version v10;
org.yaml.snakeyaml.nodes.Tag v12, v13;
org.yaml.snakeyaml.serializer.Serializer v0;
org.yaml.snakeyaml.events.DocumentEndEvent v15;
v0 := @this: org.yaml.snakeyaml.serializer.Serializer;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Node;
v2 = v0.<org.yaml.snakeyaml.serializer.Serializer: java.lang.Boolean closed>;
if v2 != null goto label1;
v3 = new org.yaml.snakeyaml.serializer.SerializerException;
specialinvoke v3.<org.yaml.snakeyaml.serializer.SerializerException: void <init>(java.lang.String)>("serializer is not opened");
throw v3;
label1:
v4 = v0.<org.yaml.snakeyaml.serializer.Serializer: java.lang.Boolean closed>;
v5 = virtualinvoke v4.<java.lang.Boolean: boolean booleanValue()>();
if v5 == 0 goto label2;
v6 = new org.yaml.snakeyaml.serializer.SerializerException;
specialinvoke v6.<org.yaml.snakeyaml.serializer.SerializerException: void <init>(java.lang.String)>("serializer is closed");
throw v6;
label2:
v7 = v0.<org.yaml.snakeyaml.serializer.Serializer: org.yaml.snakeyaml.emitter.Emitable emitter>;
v8 = new org.yaml.snakeyaml.events.DocumentStartEvent;
v9 = v0.<org.yaml.snakeyaml.serializer.Serializer: boolean explicitStart>;
v10 = v0.<org.yaml.snakeyaml.serializer.Serializer: org.yaml.snakeyaml.DumperOptions$Version useVersion>;
v11 = v0.<org.yaml.snakeyaml.serializer.Serializer: java.util.Map useTags>;
specialinvoke v8.<org.yaml.snakeyaml.events.DocumentStartEvent: void <init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,boolean,org.yaml.snakeyaml.DumperOptions$Version,java.util.Map)>(null, null, v9, v10, v11);
interfaceinvoke v7.<org.yaml.snakeyaml.emitter.Emitable: void emit(org.yaml.snakeyaml.events.Event)>(v8);
specialinvoke v0.<org.yaml.snakeyaml.serializer.Serializer: void anchorNode(org.yaml.snakeyaml.nodes.Node)>(v1);
v12 = v0.<org.yaml.snakeyaml.serializer.Serializer: org.yaml.snakeyaml.nodes.Tag explicitRoot>;
if v12 == null goto label3;
v13 = v0.<org.yaml.snakeyaml.serializer.Serializer: org.yaml.snakeyaml.nodes.Tag explicitRoot>;
virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: void setTag(org.yaml.snakeyaml.nodes.Tag)>(v13);
label3:
specialinvoke v0.<org.yaml.snakeyaml.serializer.Serializer: void serializeNode(org.yaml.snakeyaml.nodes.Node,org.yaml.snakeyaml.nodes.Node)>(v1, null);
v14 = v0.<org.yaml.snakeyaml.serializer.Serializer: org.yaml.snakeyaml.emitter.Emitable emitter>;
v15 = new org.yaml.snakeyaml.events.DocumentEndEvent;
v16 = v0.<org.yaml.snakeyaml.serializer.Serializer: boolean explicitEnd>;
specialinvoke v15.<org.yaml.snakeyaml.events.DocumentEndEvent: void <init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,boolean)>(null, null, v16);
interfaceinvoke v14.<org.yaml.snakeyaml.emitter.Emitable: void emit(org.yaml.snakeyaml.events.Event)>(v15);
v17 = v0.<org.yaml.snakeyaml.serializer.Serializer: java.util.Set serializedNodes>;
interfaceinvoke v17.<java.util.Set: void clear()>();
v18 = v0.<org.yaml.snakeyaml.serializer.Serializer: java.util.Map anchors>;
interfaceinvoke v18.<java.util.Map: void clear()>();
return;
}
private void anchorNode(org.yaml.snakeyaml.nodes.Node)
{
org.yaml.snakeyaml.serializer.AnchorGenerator v14, v8;
org.yaml.snakeyaml.nodes.Node v1, v12, v28, v29;
int[] v16;
org.yaml.snakeyaml.nodes.NodeId v17, v2, v3;
java.util.Map v10, v11, v4, v6;
int v18, v19;
java.lang.String v13, v15, v9;
boolean v22, v26, v5;
java.util.Iterator v21, v25;
org.yaml.snakeyaml.serializer.Serializer v0;
java.util.List v20, v24;
java.lang.Object v23, v27, v7;
v0 := @this: org.yaml.snakeyaml.serializer.Serializer;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Node;
v2 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.NodeId getNodeId()>();
v3 = <org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId anchor>;
if v2 != v3 goto label1;
v1 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.AnchorNode: org.yaml.snakeyaml.nodes.Node getRealNode()>();
label1:
v4 = v0.<org.yaml.snakeyaml.serializer.Serializer: java.util.Map anchors>;
v5 = interfaceinvoke v4.<java.util.Map: boolean containsKey(java.lang.Object)>(v1);
if v5 == 0 goto label2;
v6 = v0.<org.yaml.snakeyaml.serializer.Serializer: java.util.Map anchors>;
v7 = interfaceinvoke v6.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if null != v7 goto label9;
v8 = v0.<org.yaml.snakeyaml.serializer.Serializer: org.yaml.snakeyaml.serializer.AnchorGenerator anchorGenerator>;
v9 = interfaceinvoke v8.<org.yaml.snakeyaml.serializer.AnchorGenerator: java.lang.String nextAnchor(org.yaml.snakeyaml.nodes.Node)>(v1);
v10 = v0.<org.yaml.snakeyaml.serializer.Serializer: java.util.Map anchors>;
interfaceinvoke v10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v9);
goto label9;
label2:
v11 = v0.<org.yaml.snakeyaml.serializer.Serializer: java.util.Map anchors>;
v12 = v1;
v13 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: java.lang.String getAnchor()>();
if v13 == null goto label3;
v14 = v0.<org.yaml.snakeyaml.serializer.Serializer: org.yaml.snakeyaml.serializer.AnchorGenerator anchorGenerator>;
v15 = interfaceinvoke v14.<org.yaml.snakeyaml.serializer.AnchorGenerator: java.lang.String nextAnchor(org.yaml.snakeyaml.nodes.Node)>(v1);
goto label4;
label3:
v15 = null;
label4:
interfaceinvoke v11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v12, v15);
v16 = <org.yaml.snakeyaml.serializer.Serializer$1: int[] $SwitchMap$org$yaml$snakeyaml$nodes$NodeId>;
v17 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.NodeId getNodeId()>();
v18 = virtualinvoke v17.<org.yaml.snakeyaml.nodes.NodeId: int ordinal()>();
v19 = v16[v18];
lookupswitch(v19)
{
case 1: goto label5;
case 2: goto label7;
default: goto label9;
};
label5:
v20 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.SequenceNode: java.util.List getValue()>();
v21 = interfaceinvoke v20.<java.util.List: java.util.Iterator iterator()>();
label6:
v22 = interfaceinvoke v21.<java.util.Iterator: boolean hasNext()>();
if v22 == 0 goto label9;
v23 = interfaceinvoke v21.<java.util.Iterator: java.lang.Object next()>();
specialinvoke v0.<org.yaml.snakeyaml.serializer.Serializer: void anchorNode(org.yaml.snakeyaml.nodes.Node)>(v23);
goto label6;
label7:
v24 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.MappingNode: java.util.List getValue()>();
v25 = interfaceinvoke v24.<java.util.List: java.util.Iterator iterator()>();
label8:
v26 = interfaceinvoke v25.<java.util.Iterator: boolean hasNext()>();
if v26 == 0 goto label9;
v27 = interfaceinvoke v25.<java.util.Iterator: java.lang.Object next()>();
v28 = virtualinvoke v27.<org.yaml.snakeyaml.nodes.NodeTuple: org.yaml.snakeyaml.nodes.Node getKeyNode()>();
v29 = virtualinvoke v27.<org.yaml.snakeyaml.nodes.NodeTuple: org.yaml.snakeyaml.nodes.Node getValueNode()>();
specialinvoke v0.<org.yaml.snakeyaml.serializer.Serializer: void anchorNode(org.yaml.snakeyaml.nodes.Node)>(v28);
specialinvoke v0.<org.yaml.snakeyaml.serializer.Serializer: void anchorNode(org.yaml.snakeyaml.nodes.Node)>(v29);
goto label8;
label9:
return;
}
private void serializeNode(org.yaml.snakeyaml.nodes.Node, org.yaml.snakeyaml.nodes.Node) throws java.io.IOException
{
org.yaml.snakeyaml.nodes.Node v1, v2, v74, v75;
org.yaml.snakeyaml.emitter.Emitable v35, v44, v53, v66, v76, v9;
org.yaml.snakeyaml.events.SequenceEndEvent v54;
org.yaml.snakeyaml.nodes.NodeId v13, v18, v22, v3, v4, v41, v59;
java.util.Map v5;
org.yaml.snakeyaml.events.MappingStartEvent v67;
java.util.Set v11, v7;
org.yaml.snakeyaml.resolver.Resolver v17, v21, v40, v58;
java.lang.String v19, v23, v32, v33, v47, v69;
org.yaml.snakeyaml.events.SequenceStartEvent v45;
org.yaml.snakeyaml.events.AliasEvent v10;
org.yaml.snakeyaml.events.MappingEndEvent v77;
org.yaml.snakeyaml.DumperOptions$FlowStyle v48, v70;
int[] v12;
boolean v27, v29, v43, v51, v62, v72, v8;
org.yaml.snakeyaml.serializer.Serializer v0;
java.util.List v16, v36, v37, v38, v49, v55, v56, v57, v63, v78, v79;
org.yaml.snakeyaml.DumperOptions$ScalarStyle v34;
int v14, v15;
java.util.Iterator v50, v71;
org.yaml.snakeyaml.nodes.Tag v20, v24, v26, v28, v31, v39, v42, v46, v60, v61, v64, v65, v68;
org.yaml.snakeyaml.events.ImplicitTuple v25;
java.lang.Object v52, v6, v73;
org.yaml.snakeyaml.events.ScalarEvent v30;
v0 := @this: org.yaml.snakeyaml.serializer.Serializer;
v1 := @parameter0: org.yaml.snakeyaml.nodes.Node;
v2 := @parameter1: org.yaml.snakeyaml.nodes.Node;
v3 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.NodeId getNodeId()>();
v4 = <org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId anchor>;
if v3 != v4 goto label01;
v1 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.AnchorNode: org.yaml.snakeyaml.nodes.Node getRealNode()>();
label01:
v5 = v0.<org.yaml.snakeyaml.serializer.Serializer: java.util.Map anchors>;
v6 = interfaceinvoke v5.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
v7 = v0.<org.yaml.snakeyaml.serializer.Serializer: java.util.Set serializedNodes>;
v8 = interfaceinvoke v7.<java.util.Set: boolean contains(java.lang.Object)>(v1);
if v8 == 0 goto label02;
v9 = v0.<org.yaml.snakeyaml.serializer.Serializer: org.yaml.snakeyaml.emitter.Emitable emitter>;
v10 = new org.yaml.snakeyaml.events.AliasEvent;
specialinvoke v10.<org.yaml.snakeyaml.events.AliasEvent: void <init>(java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)>(v6, null, null);
interfaceinvoke v9.<org.yaml.snakeyaml.emitter.Emitable: void emit(org.yaml.snakeyaml.events.Event)>(v10);
goto label10;
label02:
v11 = v0.<org.yaml.snakeyaml.serializer.Serializer: java.util.Set serializedNodes>;
interfaceinvoke v11.<java.util.Set: boolean add(java.lang.Object)>(v1);
v12 = <org.yaml.snakeyaml.serializer.Serializer$1: int[] $SwitchMap$org$yaml$snakeyaml$nodes$NodeId>;
v13 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.NodeId getNodeId()>();
v14 = virtualinvoke v13.<org.yaml.snakeyaml.nodes.NodeId: int ordinal()>();
v15 = v12[v14];
lookupswitch(v15)
{
case 1: goto label04;
case 3: goto label03;
default: goto label07;
};
label03:
v16 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: java.util.List getBlockComments()>();
specialinvoke v0.<org.yaml.snakeyaml.serializer.Serializer: void serializeComments(java.util.List)>(v16);
v17 = v0.<org.yaml.snakeyaml.serializer.Serializer: org.yaml.snakeyaml.resolver.Resolver resolver>;
v18 = <org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId scalar>;
v19 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.ScalarNode: java.lang.String getValue()>();
v20 = virtualinvoke v17.<org.yaml.snakeyaml.resolver.Resolver: org.yaml.snakeyaml.nodes.Tag resolve(org.yaml.snakeyaml.nodes.NodeId,java.lang.String,boolean)>(v18, v19, 1);
v21 = v0.<org.yaml.snakeyaml.serializer.Serializer: org.yaml.snakeyaml.resolver.Resolver resolver>;
v22 = <org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId scalar>;
v23 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.ScalarNode: java.lang.String getValue()>();
v24 = virtualinvoke v21.<org.yaml.snakeyaml.resolver.Resolver: org.yaml.snakeyaml.nodes.Tag resolve(org.yaml.snakeyaml.nodes.NodeId,java.lang.String,boolean)>(v22, v23, 0);
v25 = new org.yaml.snakeyaml.events.ImplicitTuple;
v26 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.Tag getTag()>();
v27 = virtualinvoke v26.<org.yaml.snakeyaml.nodes.Tag: boolean equals(java.lang.Object)>(v20);
v28 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.Tag getTag()>();
v29 = virtualinvoke v28.<org.yaml.snakeyaml.nodes.Tag: boolean equals(java.lang.Object)>(v24);
specialinvoke v25.<org.yaml.snakeyaml.events.ImplicitTuple: void <init>(boolean,boolean)>(v27, v29);
v30 = new org.yaml.snakeyaml.events.ScalarEvent;
v31 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.Tag getTag()>();
v32 = virtualinvoke v31.<org.yaml.snakeyaml.nodes.Tag: java.lang.String getValue()>();
v33 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.ScalarNode: java.lang.String getValue()>();
v34 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.ScalarNode: org.yaml.snakeyaml.DumperOptions$ScalarStyle getScalarStyle()>();
specialinvoke v30.<org.yaml.snakeyaml.events.ScalarEvent: void <init>(java.lang.String,java.lang.String,org.yaml.snakeyaml.events.ImplicitTuple,java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions$ScalarStyle)>(v6, v32, v25, v33, null, null, v34);
v35 = v0.<org.yaml.snakeyaml.serializer.Serializer: org.yaml.snakeyaml.emitter.Emitable emitter>;
interfaceinvoke v35.<org.yaml.snakeyaml.emitter.Emitable: void emit(org.yaml.snakeyaml.events.Event)>(v30);
v36 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: java.util.List getInLineComments()>();
specialinvoke v0.<org.yaml.snakeyaml.serializer.Serializer: void serializeComments(java.util.List)>(v36);
v37 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: java.util.List getEndComments()>();
specialinvoke v0.<org.yaml.snakeyaml.serializer.Serializer: void serializeComments(java.util.List)>(v37);
goto label10;
label04:
v38 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: java.util.List getBlockComments()>();
specialinvoke v0.<org.yaml.snakeyaml.serializer.Serializer: void serializeComments(java.util.List)>(v38);
v39 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.Tag getTag()>();
v40 = v0.<org.yaml.snakeyaml.serializer.Serializer: org.yaml.snakeyaml.resolver.Resolver resolver>;
v41 = <org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId sequence>;
v42 = virtualinvoke v40.<org.yaml.snakeyaml.resolver.Resolver: org.yaml.snakeyaml.nodes.Tag resolve(org.yaml.snakeyaml.nodes.NodeId,java.lang.String,boolean)>(v41, null, 1);
v43 = virtualinvoke v39.<org.yaml.snakeyaml.nodes.Tag: boolean equals(java.lang.Object)>(v42);
v44 = v0.<org.yaml.snakeyaml.serializer.Serializer: org.yaml.snakeyaml.emitter.Emitable emitter>;
v45 = new org.yaml.snakeyaml.events.SequenceStartEvent;
v46 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.Tag getTag()>();
v47 = virtualinvoke v46.<org.yaml.snakeyaml.nodes.Tag: java.lang.String getValue()>();
v48 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.SequenceNode: org.yaml.snakeyaml.DumperOptions$FlowStyle getFlowStyle()>();
specialinvoke v45.<org.yaml.snakeyaml.events.SequenceStartEvent: void <init>(java.lang.String,java.lang.String,boolean,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions$FlowStyle)>(v6, v47, v43, null, null, v48);
interfaceinvoke v44.<org.yaml.snakeyaml.emitter.Emitable: void emit(org.yaml.snakeyaml.events.Event)>(v45);
v49 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.SequenceNode: java.util.List getValue()>();
v50 = interfaceinvoke v49.<java.util.List: java.util.Iterator iterator()>();
label05:
v51 = interfaceinvoke v50.<java.util.Iterator: boolean hasNext()>();
if v51 == 0 goto label06;
v52 = interfaceinvoke v50.<java.util.Iterator: java.lang.Object next()>();
specialinvoke v0.<org.yaml.snakeyaml.serializer.Serializer: void serializeNode(org.yaml.snakeyaml.nodes.Node,org.yaml.snakeyaml.nodes.Node)>(v52, v1);
goto label05;
label06:
v53 = v0.<org.yaml.snakeyaml.serializer.Serializer: org.yaml.snakeyaml.emitter.Emitable emitter>;
v54 = new org.yaml.snakeyaml.events.SequenceEndEvent;
specialinvoke v54.<org.yaml.snakeyaml.events.SequenceEndEvent: void <init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)>(null, null);
interfaceinvoke v53.<org.yaml.snakeyaml.emitter.Emitable: void emit(org.yaml.snakeyaml.events.Event)>(v54);
v55 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: java.util.List getInLineComments()>();
specialinvoke v0.<org.yaml.snakeyaml.serializer.Serializer: void serializeComments(java.util.List)>(v55);
v56 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: java.util.List getEndComments()>();
specialinvoke v0.<org.yaml.snakeyaml.serializer.Serializer: void serializeComments(java.util.List)>(v56);
goto label10;
label07:
v57 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: java.util.List getBlockComments()>();
specialinvoke v0.<org.yaml.snakeyaml.serializer.Serializer: void serializeComments(java.util.List)>(v57);
v58 = v0.<org.yaml.snakeyaml.serializer.Serializer: org.yaml.snakeyaml.resolver.Resolver resolver>;
v59 = <org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId mapping>;
v60 = virtualinvoke v58.<org.yaml.snakeyaml.resolver.Resolver: org.yaml.snakeyaml.nodes.Tag resolve(org.yaml.snakeyaml.nodes.NodeId,java.lang.String,boolean)>(v59, null, 1);
v61 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: org.yaml.snakeyaml.nodes.Tag getTag()>();
v62 = virtualinvoke v61.<org.yaml.snakeyaml.nodes.Tag: boolean equals(java.lang.Object)>(v60);
v63 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.MappingNode: java.util.List getValue()>();
v64 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.MappingNode: org.yaml.snakeyaml.nodes.Tag getTag()>();
v65 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag COMMENT>;
if v64 == v65 goto label10;
v66 = v0.<org.yaml.snakeyaml.serializer.Serializer: org.yaml.snakeyaml.emitter.Emitable emitter>;
v67 = new org.yaml.snakeyaml.events.MappingStartEvent;
v68 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.MappingNode: org.yaml.snakeyaml.nodes.Tag getTag()>();
v69 = virtualinvoke v68.<org.yaml.snakeyaml.nodes.Tag: java.lang.String getValue()>();
v70 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.MappingNode: org.yaml.snakeyaml.DumperOptions$FlowStyle getFlowStyle()>();
specialinvoke v67.<org.yaml.snakeyaml.events.MappingStartEvent: void <init>(java.lang.String,java.lang.String,boolean,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.DumperOptions$FlowStyle)>(v6, v69, v62, null, null, v70);
interfaceinvoke v66.<org.yaml.snakeyaml.emitter.Emitable: void emit(org.yaml.snakeyaml.events.Event)>(v67);
v71 = interfaceinvoke v63.<java.util.List: java.util.Iterator iterator()>();
label08:
v72 = interfaceinvoke v71.<java.util.Iterator: boolean hasNext()>();
if v72 == 0 goto label09;
v73 = interfaceinvoke v71.<java.util.Iterator: java.lang.Object next()>();
v74 = virtualinvoke v73.<org.yaml.snakeyaml.nodes.NodeTuple: org.yaml.snakeyaml.nodes.Node getKeyNode()>();
v75 = virtualinvoke v73.<org.yaml.snakeyaml.nodes.NodeTuple: org.yaml.snakeyaml.nodes.Node getValueNode()>();
specialinvoke v0.<org.yaml.snakeyaml.serializer.Serializer: void serializeNode(org.yaml.snakeyaml.nodes.Node,org.yaml.snakeyaml.nodes.Node)>(v74, v1);
specialinvoke v0.<org.yaml.snakeyaml.serializer.Serializer: void serializeNode(org.yaml.snakeyaml.nodes.Node,org.yaml.snakeyaml.nodes.Node)>(v75, v1);
goto label08;
label09:
v76 = v0.<org.yaml.snakeyaml.serializer.Serializer: org.yaml.snakeyaml.emitter.Emitable emitter>;
v77 = new org.yaml.snakeyaml.events.MappingEndEvent;
specialinvoke v77.<org.yaml.snakeyaml.events.MappingEndEvent: void <init>(org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)>(null, null);
interfaceinvoke v76.<org.yaml.snakeyaml.emitter.Emitable: void emit(org.yaml.snakeyaml.events.Event)>(v77);
v78 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: java.util.List getInLineComments()>();
specialinvoke v0.<org.yaml.snakeyaml.serializer.Serializer: void serializeComments(java.util.List)>(v78);
v79 = virtualinvoke v1.<org.yaml.snakeyaml.nodes.Node: java.util.List getEndComments()>();
specialinvoke v0.<org.yaml.snakeyaml.serializer.Serializer: void serializeComments(java.util.List)>(v79);
label10:
return;
}
private void serializeComments(java.util.List) throws java.io.IOException
{
java.util.Iterator v2;
org.yaml.snakeyaml.events.CommentEvent v5;
org.yaml.snakeyaml.emitter.Emitable v10;
org.yaml.snakeyaml.serializer.Serializer v0;
java.util.List v1;
org.yaml.snakeyaml.error.Mark v8, v9;
org.yaml.snakeyaml.comments.CommentType v6;
java.lang.Object v4;
java.lang.String v7;
boolean v3;
v0 := @this: org.yaml.snakeyaml.serializer.Serializer;
v1 := @parameter0: java.util.List;
if v1 != null goto label1;
return;
label1:
v2 = interfaceinvoke v1.<java.util.List: java.util.Iterator iterator()>();
label2:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label3;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = new org.yaml.snakeyaml.events.CommentEvent;
v6 = virtualinvoke v4.<org.yaml.snakeyaml.comments.CommentLine: org.yaml.snakeyaml.comments.CommentType getCommentType()>();
v7 = virtualinvoke v4.<org.yaml.snakeyaml.comments.CommentLine: java.lang.String getValue()>();
v8 = virtualinvoke v4.<org.yaml.snakeyaml.comments.CommentLine: org.yaml.snakeyaml.error.Mark getStartMark()>();
v9 = virtualinvoke v4.<org.yaml.snakeyaml.comments.CommentLine: org.yaml.snakeyaml.error.Mark getEndMark()>();
specialinvoke v5.<org.yaml.snakeyaml.events.CommentEvent: void <init>(org.yaml.snakeyaml.comments.CommentType,java.lang.String,org.yaml.snakeyaml.error.Mark,org.yaml.snakeyaml.error.Mark)>(v6, v7, v8, v9);
v10 = v0.<org.yaml.snakeyaml.serializer.Serializer: org.yaml.snakeyaml.emitter.Emitable emitter>;
interfaceinvoke v10.<org.yaml.snakeyaml.emitter.Emitable: void emit(org.yaml.snakeyaml.events.Event)>(v5);
goto label2;
label3:
return;
}
}