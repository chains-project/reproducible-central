// 
// Decompiled by Procyon v0.6.0
// 

package io.quarkus.arc.setup;

import io.quarkus.arc.log.LoggerName_ArcAnnotationLiteral;
import java.util.OptionalLong;
import java.util.OptionalDouble;
import java.util.OptionalInt;
import jakarta.enterprise.inject.Default$Literal;
import io.quarkus.arc.impl.TypeVariableImpl;
import org.eclipse.microprofile.config.inject.ConfigProperty_ArcAnnotationLiteral;
import io.quarkus.arc.impl.ParameterizedTypeImpl;
import java.lang.reflect.Type;
import java.io.Serializable;
import io.quarkus.arc.impl.RemovedBeanImpl;
import io.quarkus.arc.InjectableBean$Kind;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executor;
import io.quarkus.vertx.runtime.VertxProducer_Observer_undeployVerticles_cd61570c529f4f70bf1e54f20403d3c90e4bbc75;
import io.github.chains_project.maven_lockfile.GithubAction_Multiplexer_Observer_run_10e4fab489c5baa897ea9b4d6b0a2302f36c3340_2becc8ab276cce758a8c2c4203956187bda3c641;
import io.netty.channel.EventLoopGroup_6b76fd1b9374ca425834afc8e18924f04ca49d32_Synthetic_Bean;
import io.netty.channel.EventLoopGroup_92f1c3a38cd361eb7ad27a9fe6324edba5748ae1_Synthetic_Bean;
import io.smallrye.context.SmallRyeManagedExecutor_37cd00d79f6817c9ac6f4041646d6c5b8c1d4c69_Synthetic_Bean;
import io.quarkus.arc.generator.Object_73b2414a4b90d42d8cda9cf468132840fb4e4396_Synthetic_Bean;
import io.quarkus.smallrye.context.runtime.SmallRyeContextPropagationProvider_ProducerMethod_getAllThreadContext_0976a7142503aa8fe2c89bb7ef3f2613a1f1e921_Bean;
import io.quarkus.vertx.runtime.VertxProducer_ProducerMethod_mutinyEventBus_65fcf7e1f3e3ede9a22f691ca70366b9564c7aad_Bean;
import io.quarkus.vertx.runtime.VertxProducer_ProducerMethod_eventbus_92174a3813c41f170602a2a19998deea8f7eeb18_Bean;
import io.quarkiverse.githubaction.runtime.UtilsProducer_ProducerMethod_yamlObjectMapper_53de47d02dbef7457e6bf5612f9b001baa13052c_Bean;
import io.quarkus.jackson.customizer.RegisterSerializersAndDeserializersCustomizer_Bean;
import io.quarkus.arc.impl.DefaultAsyncObserverExceptionHandler_Bean;
import io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader_Bean;
import io.quarkiverse.githubaction.runtime.ActionMain_Bean;
import io.github.chains_project.maven_lockfile.GithubAction_Multiplexer_Bean;
import io.quarkus.smallrye.graphql.client.runtime.GraphQLClientConfigurationMergerBean_Bean;
import io.quarkiverse.githubaction.runtime.InputsInitializerImpl_Bean;
import io.quarkus.vertx.runtime.VertxProducer_ProducerMethod_mutiny_d5befbd244a8a884fd08fff108d174c7e738c2d3_Bean;
import io.quarkus.jackson.runtime.ObjectMapperProducer_ProducerMethod_objectMapper_d2925203309586fa5cde23a83b2025591c2d3832_Bean;
import io.smallrye.config.inject.ConfigProducer_ProducerMethod_produceStringConfigProperty_4a56f5f833b805b4318038e33b0d81b8dbf5dbe2_Bean;
import io.quarkus.vertx.runtime.VertxProducer_Bean;
import io.quarkus.jackson.runtime.JacksonBuildTimeConfig_53f5cad458c5a3db7e7554df6f161d89ff446d45_Synthetic_Bean;
import io.quarkiverse.githubaction.runtime.PayloadTypeResolverImpl_Bean;
import io.quarkiverse.githubaction.runtime.ContextInitializerImpl_Bean;
import io.smallrye.config.inject.ConfigProducer_Bean;
import io.quarkus.smallrye.graphql.client.runtime.GraphQLClientsConfig_1d3a9a20dc3e0726e08bbd4acd1d71aa0bd47777_Synthetic_Bean;
import io.quarkus.smallrye.context.runtime.SmallRyeContextPropagationProvider_Bean;
import io.quarkiverse.githubaction.runtime.GitHubEventHandlerImpl_Bean;
import io.quarkus.jackson.runtime.ObjectMapperProducer_Bean;
import io.quarkus.jackson.runtime.JacksonSupport_7d1a8ed34eefa156e547f068424005a5a18f1ed2_Synthetic_Bean;
import io.quarkus.smallrye.graphql.client.runtime.GraphQLClientSupport_5a4eabe8a985fc7e5080c5e6925e884e83be6ba4_Synthetic_Bean;
import io.quarkiverse.githubaction.runtime.CommandsInitializerImpl_Bean;
import io.quarkiverse.githubaction.runtime.UtilsProducer_Bean;
import io.vertx.core.Vertx_2d6aec61168fd09bfddb12d2d84a7c6aacdd2759_Synthetic_Bean;
import java.util.function.Supplier;
import java.util.Collection;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import io.quarkus.arc.Components;
import io.quarkus.arc.ComponentsProvider;

public synthetic class Default_ComponentsProvider implements ComponentsProvider
{
    public Components getComponents() {
        final HashMap hashMap = new HashMap();
        this.addBeans1(hashMap);
        this.addBeans2(hashMap);
        final ArrayList list = new ArrayList();
        this.addObservers1(hashMap, list);
        final ArrayList list2 = new ArrayList();
        final HashSet set = new HashSet();
        set.add("jakarta.enterprise.context.control.ActivateRequestContext");
        set.add("io.quarkus.arc.Lock");
        set.add("io.smallrye.context.api.CurrentThreadContext");
        final HashMap hashMap2 = new HashMap();
        final Collection values = hashMap.values();
        final Default_ComponentsProvider$$function$$1 default_ComponentsProvider$$function$$1 = new Default_ComponentsProvider$$function$$1();
        final HashSet set2 = new HashSet();
        set2.add("io.quarkiverse.githubapp.event.Issue$Reopened");
        set2.add("io.quarkiverse.githubapp.event.IssueComment$Edited");
        set2.add("io.quarkiverse.githubapp.event.PullRequest$ReviewRequested");
        set2.add("io.quarkiverse.githubapp.event.WorkflowRun");
        set2.add("jakarta.enterprise.inject.Default");
        set2.add("io.quarkiverse.githubapp.event.Issue$Unlocked");
        set2.add("io.quarkiverse.githubapp.event.Release$Created");
        set2.add("io.quarkiverse.githubapp.event.CheckRun$Rerequested");
        set2.add("io.quarkiverse.githubapp.event.Discussion$CategoryChanged");
        set2.add("io.quarkiverse.githubapp.event.DeploymentStatus");
        set2.add("io.quarkiverse.githubapp.event.InstallationRepositories");
        set2.add("io.quarkiverse.githubapp.event.Label$Edited");
        set2.add("io.quarkiverse.githubapp.event.PullRequestReview$Dismissed");
        set2.add("jakarta.enterprise.inject.Intercepted");
        set2.add("io.quarkiverse.githubapp.event.Release$Published");
        set2.add("jakarta.enterprise.context.Initialized");
        set2.add("io.quarkiverse.githubapp.event.InstallationRepositories$Added");
        set2.add("io.quarkiverse.githubapp.event.Discussion$Unlabeled");
        set2.add("io.quarkiverse.githubapp.event.Release$Prereleased");
        set2.add("io.quarkiverse.githubapp.event.Issue$Pinned");
        set2.add("jakarta.enterprise.context.BeforeDestroyed");
        set2.add("io.quarkiverse.githubapp.event.Discussion$Locked");
        set2.add("io.quarkiverse.githubapp.event.Status");
        set2.add("io.quarkiverse.githubapp.event.Repository");
        set2.add("io.quarkiverse.githubapp.event.CheckSuite$Completed");
        set2.add("io.quarkiverse.githubapp.event.Issue$Unlabeled");
        set2.add("io.quarkiverse.githubapp.event.Release$Unpublished");
        set2.add("io.quarkiverse.githubapp.event.PullRequest$Edited");
        set2.add("io.quarkiverse.githubapp.event.Star$Deleted");
        set2.add("jakarta.enterprise.context.Destroyed");
        set2.add("io.quarkiverse.githubapp.event.PullRequestReview$Submitted");
        set2.add("io.quarkiverse.githubapp.event.Push");
        set2.add("jakarta.enterprise.inject.Any");
        set2.add("io.quarkiverse.githubapp.event.Repository$Edited");
        set2.add("io.quarkiverse.githubapp.event.Repository$Renamed");
        set2.add("io.quarkiverse.githubapp.event.Repository$Transferred");
        set2.add("io.quarkiverse.githubapp.event.Installation$NewPermissionsAccepted");
        set2.add("io.quarkiverse.githubapp.event.Label$Created");
        set2.add("io.quarkiverse.githubapp.event.IssueComment$Deleted");
        set2.add("io.quarkiverse.githubaction.runtime.UtilsProducer$Yaml");
        set2.add("io.quarkiverse.githubapp.event.PullRequestReview");
        set2.add("io.quarkiverse.githubapp.event.Issue$Demilestoned");
        set2.add("io.quarkiverse.githubapp.event.IssueComment");
        set2.add("io.quarkiverse.githubapp.event.Release$Released");
        set2.add("io.quarkiverse.githubapp.event.Label$Deleted");
        set2.add("io.quarkiverse.githubapp.event.PullRequest$Assigned");
        set2.add("io.quarkiverse.githubapp.event.Issue$Deleted");
        set2.add("io.quarkus.arc.All");
        set2.add("io.quarkiverse.githubapp.event.Issue$Unpinned");
        set2.add("io.quarkiverse.githubapp.event.ProjectsV2Item$Restored");
        set2.add("io.quarkiverse.githubapp.event.CheckRun");
        set2.add("io.quarkiverse.githubapp.event.Repository$Publicized");
        set2.add("io.quarkiverse.githubapp.event.PullRequest");
        set2.add("io.quarkiverse.githubapp.event.WorkflowJob");
        set2.add("io.quarkiverse.githubapp.event.Installation$Unsuspend");
        set2.add("io.quarkiverse.githubapp.event.IssueComment$Created");
        set2.add("org.eclipse.microprofile.config.inject.ConfigProperties");
        set2.add("io.quarkiverse.githubapp.event.PullRequestReviewComment$Created");
        set2.add("io.quarkiverse.githubapp.event.ProjectsV2Item$Archived");
        set2.add("io.quarkiverse.githubapp.event.Star");
        set2.add("io.quarkiverse.githubapp.event.InstallationRepositories$Removed");
        set2.add("io.quarkiverse.githubapp.event.Issue$Milestoned");
        set2.add("io.quarkiverse.githubapp.event.PullRequest$Closed");
        set2.add("io.quarkiverse.githubapp.event.Discussion$Created");
        set2.add("io.quarkiverse.githubapp.event.CheckSuite$Rerequested");
        set2.add("io.quarkiverse.githubapp.event.Discussion");
        set2.add("io.quarkiverse.githubapp.event.Installation$Created");
        set2.add("io.quarkus.netty.MainEventLoopGroup");
        set2.add("io.quarkus.arc.log.LoggerName");
        set2.add("io.quarkiverse.githubapp.event.Repository$Created");
        set2.add("io.quarkiverse.githubapp.event.Issue$Opened");
        set2.add("io.quarkiverse.githubapp.event.ProjectsV2Item$Converted");
        set2.add("io.quarkus.runtime.annotations.CommandLineArguments");
        set2.add("io.quarkiverse.githubapp.event.WorkflowJob$Completed");
        set2.add("io.quarkiverse.githubapp.event.Discussion$Pinned");
        set2.add("io.quarkiverse.githubapp.event.PullRequest$Unassigned");
        set2.add("io.quarkiverse.githubapp.event.Deployment");
        set2.add("org.eclipse.microprofile.config.inject.ConfigProperty");
        set2.add("io.quarkiverse.githubapp.event.CommitComment");
        set2.add("io.quarkiverse.githubapp.event.Release$Deleted");
        set2.add("io.quarkiverse.githubapp.event.Repository$Unarchived");
        set2.add("io.quarkiverse.githubapp.event.Delete");
        set2.add("io.quarkiverse.githubapp.event.Issue$Assigned");
        set2.add("io.quarkiverse.githubapp.event.Release");
        set2.add("io.quarkiverse.githubapp.event.Discussion$Unanswered");
        set2.add("io.quarkiverse.githubapp.event.Discussion$Unlocked");
        set2.add("io.quarkiverse.githubapp.event.Issue$Transferred");
        set2.add("io.quarkiverse.githubapp.event.Issue$Labeled");
        set2.add("io.quarkiverse.githubapp.event.CheckRun$Created");
        set2.add("io.quarkiverse.githubapp.event.Discussion$Answered");
        set2.add("io.quarkiverse.githubapp.event.Ping");
        set2.add("io.quarkiverse.githubapp.event.WorkflowJob$Requested");
        set2.add("io.quarkiverse.githubapp.event.CheckRun$RequestedAction");
        set2.add("io.quarkiverse.githubapp.event.PullRequest$Locked");
        set2.add("io.quarkiverse.githubapp.event.DeploymentStatus$Created");
        set2.add("io.quarkiverse.githubapp.event.Issue$Edited");
        set2.add("io.quarkiverse.githubapp.event.Label");
        set2.add("io.quarkiverse.githubapp.event.PullRequest$Labeled");
        set2.add("io.quarkiverse.githubapp.event.Installation$Deleted");
        set2.add("io.quarkiverse.githubapp.event.CheckSuite");
        set2.add("io.quarkiverse.githubapp.event.Public");
        set2.add("io.quarkiverse.githubapp.event.PullRequest$Synchronize");
        set2.add("io.smallrye.context.api.NamedInstance");
        set2.add("io.quarkiverse.githubapp.event.CheckRun$Completed");
        set2.add("io.quarkiverse.githubapp.event.PullRequest$Unlabeled");
        set2.add("io.quarkiverse.githubapp.event.CommitComment$Created");
        set2.add("io.quarkus.netty.BossEventLoopGroup");
        set2.add("io.quarkiverse.githubapp.event.PullRequestReviewComment$Edited");
        set2.add("io.quarkiverse.githubapp.event.WorkflowDispatch");
        set2.add("io.quarkus.arc.impl.Identified");
        set2.add("io.quarkiverse.githubapp.event.Installation$Suspend");
        set2.add("io.quarkiverse.githubapp.event.Repository$Deleted");
        set2.add("io.quarkiverse.githubapp.event.Create");
        set2.add("io.quarkiverse.githubapp.event.Discussion$Unpinned");
        set2.add("io.quarkiverse.githubapp.event.WorkflowRun$Completed");
        set2.add("io.quarkiverse.githubapp.event.Repository$Privatized");
        set2.add("io.quarkiverse.githubapp.event.ProjectsV2Item$Created");
        set2.add("io.quarkiverse.githubapp.event.PullRequestReviewComment");
        set2.add("io.quarkiverse.githubapp.event.Discussion$Transferred");
        set2.add("io.quarkiverse.githubapp.event.Installation");
        set2.add("io.quarkiverse.githubaction.runtime.Multiplexer");
        set2.add("io.quarkiverse.githubapp.event.Discussion$Edited");
        set2.add("io.quarkiverse.githubapp.event.Discussion$Deleted");
        set2.add("io.quarkiverse.githubapp.event.WorkflowJob$Queued");
        set2.add("io.quarkiverse.githubapp.event.PullRequest$Opened");
        set2.add("jakarta.inject.Named");
        set2.add("io.quarkiverse.githubapp.event.PullRequest$ReviewRequestRemoved");
        set2.add("io.quarkiverse.githubapp.event.Issue$Closed");
        set2.add("io.quarkiverse.githubapp.event.Release$Edited");
        set2.add("io.quarkiverse.githubapp.event.ProjectsV2Item");
        set2.add("io.quarkiverse.githubapp.event.CheckSuite$Requested");
        set2.add("io.quarkiverse.githubapp.event.WorkflowRun$Requested");
        set2.add("io.quarkiverse.githubapp.event.Fork");
        set2.add("io.quarkiverse.githubapp.event.Issue$Unassigned");
        set2.add("io.quarkiverse.githubapp.event.PullRequestReview$Edited");
        set2.add("io.quarkiverse.githubapp.event.PullRequest$Unlocked");
        set2.add("io.quarkiverse.githubapp.event.Deployment$Created");
        set2.add("io.quarkiverse.githubapp.event.Issue$Locked");
        set2.add("io.quarkiverse.githubapp.event.Repository$Archived");
        set2.add("io.quarkiverse.githubapp.event.Star$Created");
        set2.add("io.quarkiverse.githubapp.event.PullRequestReviewComment$Deleted");
        set2.add("io.quarkiverse.githubapp.event.PullRequest$Reopened");
        set2.add("io.quarkiverse.githubaction.Action");
        set2.add("io.quarkiverse.githubapp.event.Issue");
        set2.add("io.quarkiverse.githubapp.event.PullRequest$ReadyForReview");
        set2.add("io.quarkiverse.githubapp.event.Discussion$Labeled");
        set2.add("io.quarkiverse.githubapp.event.ProjectsV2Item$Reordered");
        set2.add("io.quarkiverse.githubapp.event.ProjectsV2Item$Deleted");
        set2.add("io.smallrye.common.annotation.Identifier");
        set2.add("io.quarkiverse.githubapp.event.ProjectsV2Item$Edited");
        return new Components((Collection)values, (Collection)list, (Collection)list2, (Set)set, (Map)hashMap2, (Supplier)default_ComponentsProvider$$function$$1, (Map)new HashMap(), (Set)set2);
    }
    
    private void addBeans1(final Map map) {
        map.put("2d6aec61168fd09bfddb12d2d84a7c6aacdd2759", new Vertx_2d6aec61168fd09bfddb12d2d84a7c6aacdd2759_Synthetic_Bean());
        map.put("d689ffeab2e646c82d5c51af48eed97fa1d6c9f4", new UtilsProducer_Bean());
        map.put("3cc277ee33de9ef18dc34921466609bbe1a68dca", new CommandsInitializerImpl_Bean());
        map.put("5a4eabe8a985fc7e5080c5e6925e884e83be6ba4", new GraphQLClientSupport_5a4eabe8a985fc7e5080c5e6925e884e83be6ba4_Synthetic_Bean());
        map.put("7d1a8ed34eefa156e547f068424005a5a18f1ed2", new JacksonSupport_7d1a8ed34eefa156e547f068424005a5a18f1ed2_Synthetic_Bean());
        map.put("7773acce6b5871f24482efc4a9bb22cad8198392", new ObjectMapperProducer_Bean());
        map.put("319f6786720ce8ba2aefc94673e8f70f090acd47", new GitHubEventHandlerImpl_Bean());
        map.put("1418637606c064580f76ee86000a56a9cd740ad5", new SmallRyeContextPropagationProvider_Bean());
        map.put("1d3a9a20dc3e0726e08bbd4acd1d71aa0bd47777", new GraphQLClientsConfig_1d3a9a20dc3e0726e08bbd4acd1d71aa0bd47777_Synthetic_Bean());
        map.put("41d660d5c5ecdf874f4621bc533ee5c940ee765a", new ConfigProducer_Bean());
        map.put("40e29e9c711d44e82fe5fa91b595b56dbc8a04d5", new ContextInitializerImpl_Bean());
        map.put("be7135eb29802a4f22a9b452733e8b234873330a", new PayloadTypeResolverImpl_Bean());
        map.put("53f5cad458c5a3db7e7554df6f161d89ff446d45", new JacksonBuildTimeConfig_53f5cad458c5a3db7e7554df6f161d89ff446d45_Synthetic_Bean());
        map.put("be9dbbe5967118a9b69a61bdedd364bf4d3b60c2", new VertxProducer_Bean());
        map.put("0fe08552a178a543bf6b34647226cf6de5aa5826", new ConfigProducer_ProducerMethod_produceStringConfigProperty_4a56f5f833b805b4318038e33b0d81b8dbf5dbe2_Bean((Supplier)map.get("41d660d5c5ecdf874f4621bc533ee5c940ee765a")));
        map.put("f520ee895f2ff3b2766548ba82826eb8a35a9f59", new ObjectMapperProducer_ProducerMethod_objectMapper_d2925203309586fa5cde23a83b2025591c2d3832_Bean((Supplier)map.get("7773acce6b5871f24482efc4a9bb22cad8198392"), (Supplier)map.get("53f5cad458c5a3db7e7554df6f161d89ff446d45"), (Supplier)map.get("7d1a8ed34eefa156e547f068424005a5a18f1ed2")));
        map.put("1bc718403d18eda0dff05491134f98e4d7416dd8", new VertxProducer_ProducerMethod_mutiny_d5befbd244a8a884fd08fff108d174c7e738c2d3_Bean((Supplier)map.get("be9dbbe5967118a9b69a61bdedd364bf4d3b60c2"), (Supplier)map.get("2d6aec61168fd09bfddb12d2d84a7c6aacdd2759")));
        map.put("fe7d2ad814bc445ad6337ef8bff956810e6a8fcb", new InputsInitializerImpl_Bean((Supplier)map.get("f520ee895f2ff3b2766548ba82826eb8a35a9f59")));
        map.put("44fb4f269fadde186eefeca4374013de84070ec5", new GraphQLClientConfigurationMergerBean_Bean((Supplier)map.get("1d3a9a20dc3e0726e08bbd4acd1d71aa0bd47777"), (Supplier)map.get("5a4eabe8a985fc7e5080c5e6925e884e83be6ba4")));
        map.put("fdb7af6b2ee872755a3a6027fbbc739ae9aab9db", new GithubAction_Multiplexer_Bean((Supplier)map.get("0fe08552a178a543bf6b34647226cf6de5aa5826")));
        map.put("915372d5939ddf65c87a35c4d56489a3c9c350b9", new ActionMain_Bean((Supplier)map.get("3cc277ee33de9ef18dc34921466609bbe1a68dca"), (Supplier)map.get("40e29e9c711d44e82fe5fa91b595b56dbc8a04d5"), (Supplier)map.get("319f6786720ce8ba2aefc94673e8f70f090acd47"), (Supplier)map.get("fe7d2ad814bc445ad6337ef8bff956810e6a8fcb"), (Supplier)map.get("f520ee895f2ff3b2766548ba82826eb8a35a9f59"), (Supplier)map.get("be7135eb29802a4f22a9b452733e8b234873330a")));
        map.put("b9c4ce67f6f3da1d906f67e799cec91cfe8b3603", new RoundRobinLoadBalancerProviderLoader_Bean());
        map.put("be6955ad27defd149de26205bd8af788eaea5f95", new DefaultAsyncObserverExceptionHandler_Bean());
        map.put("8bee2b62fd4fca1e99a5cb4d4d87e32086fe3328", new RegisterSerializersAndDeserializersCustomizer_Bean());
        map.put("5ca2e6a890d52d320cd1a0d0bd132e624e61ab36", new UtilsProducer_ProducerMethod_yamlObjectMapper_53de47d02dbef7457e6bf5612f9b001baa13052c_Bean((Supplier)map.get("d689ffeab2e646c82d5c51af48eed97fa1d6c9f4")));
        map.put("2906c741825f2ca74f751a675b2ee26219a201a9", new VertxProducer_ProducerMethod_eventbus_92174a3813c41f170602a2a19998deea8f7eeb18_Bean((Supplier)map.get("be9dbbe5967118a9b69a61bdedd364bf4d3b60c2"), (Supplier)map.get("2d6aec61168fd09bfddb12d2d84a7c6aacdd2759")));
        map.put("7953502a278fa6c39557a67efcc2aed1bc44ead6", new VertxProducer_ProducerMethod_mutinyEventBus_65fcf7e1f3e3ede9a22f691ca70366b9564c7aad_Bean((Supplier)map.get("be9dbbe5967118a9b69a61bdedd364bf4d3b60c2"), (Supplier)map.get("1bc718403d18eda0dff05491134f98e4d7416dd8")));
        map.put("f61743cf79a79aa30bcf0a67a180469dad3260ab", new SmallRyeContextPropagationProvider_ProducerMethod_getAllThreadContext_0976a7142503aa8fe2c89bb7ef3f2613a1f1e921_Bean((Supplier)map.get("1418637606c064580f76ee86000a56a9cd740ad5")));
        map.put("73b2414a4b90d42d8cda9cf468132840fb4e4396", new Object_73b2414a4b90d42d8cda9cf468132840fb4e4396_Synthetic_Bean());
        map.put("37cd00d79f6817c9ac6f4041646d6c5b8c1d4c69", new SmallRyeManagedExecutor_37cd00d79f6817c9ac6f4041646d6c5b8c1d4c69_Synthetic_Bean());
    }
    
    private void addBeans2(final Map map) {
        map.put("92f1c3a38cd361eb7ad27a9fe6324edba5748ae1", new EventLoopGroup_92f1c3a38cd361eb7ad27a9fe6324edba5748ae1_Synthetic_Bean());
        map.put("6b76fd1b9374ca425834afc8e18924f04ca49d32", new EventLoopGroup_6b76fd1b9374ca425834afc8e18924f04ca49d32_Synthetic_Bean());
    }
    
    private void addObservers1(final Map map, final List list) {
        list.add(new GithubAction_Multiplexer_Observer_run_10e4fab489c5baa897ea9b4d6b0a2302f36c3340_2becc8ab276cce758a8c2c4203956187bda3c641((Supplier)map.get("fdb7af6b2ee872755a3a6027fbbc739ae9aab9db")));
        list.add(new VertxProducer_Observer_undeployVerticles_cd61570c529f4f70bf1e54f20403d3c90e4bbc75((Supplier)map.get("be9dbbe5967118a9b69a61bdedd364bf4d3b60c2")));
    }
    
    static void addRemovedBeans1(final List list, final Map map) {
        final ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
        final HashSet set = new HashSet();
        try {
            final Object value = map.get("java.util.concurrent.Executor");
            Object o;
            if (value != null) {
                o = value;
            }
            else {
                map.put("java.util.concurrent.Executor", Executor.class);
                o = Executor.class;
            }
            set.add(o);
        }
        catch (final Throwable t) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.util.concurrent.Executor", t);
        }
        try {
            final Object value2 = map.get("java.util.concurrent.ExecutorService");
            Object o2;
            if (value2 != null) {
                o2 = value2;
            }
            else {
                map.put("java.util.concurrent.ExecutorService", ExecutorService.class);
                o2 = ExecutorService.class;
            }
            set.add(o2);
        }
        catch (final Throwable t2) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.util.concurrent.ExecutorService", t2);
        }
        try {
            final Object value3 = map.get("java.util.concurrent.ScheduledExecutorService");
            Object o3;
            if (value3 != null) {
                o3 = value3;
            }
            else {
                map.put("java.util.concurrent.ScheduledExecutorService", ScheduledExecutorService.class);
                o3 = ScheduledExecutorService.class;
            }
            set.add(o3);
        }
        catch (final Throwable t3) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.util.concurrent.ScheduledExecutorService", t3);
        }
        list.add(new RemovedBeanImpl(InjectableBean$Kind.SYNTHETIC, (String)null, (Set)set, (Set)null));
        final HashSet<Object> set2 = new HashSet<Object>();
        try {
            final Object value4 = map.get("jakarta.enterprise.context.control.RequestContextController");
            Object o4;
            if (value4 != null) {
                o4 = value4;
            }
            else {
                final Class<?> forName = Class.forName("jakarta.enterprise.context.control.RequestContextController", false, contextClassLoader);
                map.put("jakarta.enterprise.context.control.RequestContextController", forName);
                o4 = forName;
            }
            set2.add(o4);
        }
        catch (final Throwable t4) {
            ComponentsProvider.unableToLoadRemovedBeanType("jakarta.enterprise.context.control.RequestContextController", t4);
        }
        try {
            final Object value5 = map.get("io.quarkus.arc.impl.InjectableRequestContextController");
            Object o5;
            if (value5 != null) {
                o5 = value5;
            }
            else {
                final Class<?> forName2 = Class.forName("io.quarkus.arc.impl.InjectableRequestContextController", false, contextClassLoader);
                map.put("io.quarkus.arc.impl.InjectableRequestContextController", forName2);
                o5 = forName2;
            }
            set2.add(o5);
        }
        catch (final Throwable t5) {
            ComponentsProvider.unableToLoadRemovedBeanType("io.quarkus.arc.impl.InjectableRequestContextController", t5);
        }
        list.add(new RemovedBeanImpl((InjectableBean$Kind)null, (String)null, (Set)set2, (Set)null));
        final HashSet<Object> set3 = new HashSet<Object>();
        try {
            final Object value6 = map.get("io.quarkus.runtime.LocalesBuildTimeConfig");
            Object o6;
            if (value6 != null) {
                o6 = value6;
            }
            else {
                final Class<?> forName3 = Class.forName("io.quarkus.runtime.LocalesBuildTimeConfig", false, contextClassLoader);
                map.put("io.quarkus.runtime.LocalesBuildTimeConfig", forName3);
                o6 = forName3;
            }
            set3.add(o6);
        }
        catch (final Throwable t6) {
            ComponentsProvider.unableToLoadRemovedBeanType("io.quarkus.runtime.LocalesBuildTimeConfig", t6);
        }
        list.add(new RemovedBeanImpl(InjectableBean$Kind.SYNTHETIC, (String)null, (Set)set3, (Set)null));
        final HashSet<Object> set4 = new HashSet<Object>();
        try {
            final Object value7 = map.get("java.lang.Number");
            Object o7;
            if (value7 != null) {
                o7 = value7;
            }
            else {
                map.put("java.lang.Number", Number.class);
                o7 = Number.class;
            }
            set4.add(o7);
        }
        catch (final Throwable t7) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.lang.Number", t7);
        }
        try {
            final Object value8 = map.get("java.io.Serializable");
            Object o8;
            if (value8 != null) {
                o8 = value8;
            }
            else {
                map.put("java.io.Serializable", Serializable.class);
                o8 = Serializable.class;
            }
            set4.add(o8);
        }
        catch (final Throwable t8) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.io.Serializable", t8);
        }
        try {
            final Object value9 = map.get("java.lang.Comparable<java.lang.Float>");
            Object o9;
            if (value9 != null) {
                o9 = value9;
            }
            else {
                final Type[] array = { null };
                final Type value10 = map.get("java.lang.Float");
                Type type;
                if (value10 != null) {
                    type = value10;
                }
                else {
                    map.put("java.lang.Float", Float.class);
                    type = Float.class;
                }
                array[0] = type;
                final ParameterizedTypeImpl parameterizedTypeImpl = new ParameterizedTypeImpl((Type)map.get("java.lang.Comparable"), array);
                map.put("java.lang.Comparable<java.lang.Float>", parameterizedTypeImpl);
                o9 = parameterizedTypeImpl;
            }
            set4.add(o9);
        }
        catch (final Throwable t9) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.lang.Comparable<java.lang.Float>", t9);
        }
        try {
            final Object value11 = map.get("java.lang.Float");
            Object o10;
            if (value11 != null) {
                o10 = value11;
            }
            else {
                map.put("java.lang.Float", Float.class);
                o10 = Float.class;
            }
            set4.add(o10);
        }
        catch (final Throwable t10) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.lang.Float", t10);
        }
        final HashSet set5 = new HashSet();
        final ConfigProperty_ArcAnnotationLiteral configProperty_ArcAnnotationLiteral = new ConfigProperty_ArcAnnotationLiteral("", "org.eclipse.microprofile.config.configproperty.unconfigureddvalue");
        set5.add(configProperty_ArcAnnotationLiteral);
        list.add(new RemovedBeanImpl(InjectableBean$Kind.PRODUCER_METHOD, "io.smallrye.config.inject.ConfigProducer#produceFloatConfigProperty()", (Set)set4, (Set)set5));
        final HashSet set6 = new HashSet();
        try {
            final Object value12 = map.get("java.lang.Iterable<T>");
            Object o11;
            if (value12 != null) {
                o11 = value12;
            }
            else {
                final Type[] array2 = { null };
                final Type value13 = map.get("T");
                Object o12;
                if (value13 != null) {
                    o12 = value13;
                }
                else {
                    final Type[] array3 = { null };
                    final Type value14 = map.get("java.lang.Object");
                    Type type2;
                    if (value14 != null) {
                        type2 = value14;
                    }
                    else {
                        map.put("java.lang.Object", Object.class);
                        type2 = Object.class;
                    }
                    array3[0] = type2;
                    final TypeVariableImpl typeVariableImpl = new TypeVariableImpl("T", array3);
                    map.put("T", typeVariableImpl);
                    o12 = typeVariableImpl;
                }
                array2[0] = (Type)o12;
                final ParameterizedTypeImpl parameterizedTypeImpl2 = new ParameterizedTypeImpl((Type)map.get("java.lang.Iterable"), array2);
                map.put("java.lang.Iterable<T>", parameterizedTypeImpl2);
                o11 = parameterizedTypeImpl2;
            }
            set6.add(o11);
        }
        catch (final Throwable t11) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.lang.Iterable<T>", t11);
        }
        try {
            final Object value15 = map.get("java.util.Collection<T>");
            Object o13;
            if (value15 != null) {
                o13 = value15;
            }
            else {
                final Type[] array4 = { null };
                final Type value16 = map.get("T");
                Object o14;
                if (value16 != null) {
                    o14 = value16;
                }
                else {
                    final Type[] array5 = { null };
                    final Type value17 = map.get("java.lang.Object");
                    Type type3;
                    if (value17 != null) {
                        type3 = value17;
                    }
                    else {
                        map.put("java.lang.Object", Object.class);
                        type3 = Object.class;
                    }
                    array5[0] = type3;
                    final TypeVariableImpl typeVariableImpl2 = new TypeVariableImpl("T", array5);
                    map.put("T", typeVariableImpl2);
                    o14 = typeVariableImpl2;
                }
                array4[0] = (Type)o14;
                final ParameterizedTypeImpl parameterizedTypeImpl3 = new ParameterizedTypeImpl((Type)map.get("java.util.Collection"), array4);
                map.put("java.util.Collection<T>", parameterizedTypeImpl3);
                o13 = parameterizedTypeImpl3;
            }
            set6.add(o13);
        }
        catch (final Throwable t12) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.util.Collection<T>", t12);
        }
        try {
            final Object value18 = map.get("java.util.List<T>");
            Object o15;
            if (value18 != null) {
                o15 = value18;
            }
            else {
                final Type[] array6 = { null };
                final Type value19 = map.get("T");
                Object o16;
                if (value19 != null) {
                    o16 = value19;
                }
                else {
                    final Type[] array7 = { null };
                    final Type value20 = map.get("java.lang.Object");
                    Type type4;
                    if (value20 != null) {
                        type4 = value20;
                    }
                    else {
                        map.put("java.lang.Object", Object.class);
                        type4 = Object.class;
                    }
                    array7[0] = type4;
                    final TypeVariableImpl typeVariableImpl3 = new TypeVariableImpl("T", array7);
                    map.put("T", typeVariableImpl3);
                    o16 = typeVariableImpl3;
                }
                array6[0] = (Type)o16;
                final ParameterizedTypeImpl parameterizedTypeImpl4 = new ParameterizedTypeImpl((Type)map.get("java.util.List"), array6);
                map.put("java.util.List<T>", parameterizedTypeImpl4);
                o15 = parameterizedTypeImpl4;
            }
            set6.add(o15);
        }
        catch (final Throwable t13) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.util.List<T>", t13);
        }
        final HashSet<ConfigProperty_ArcAnnotationLiteral> set7 = new HashSet<ConfigProperty_ArcAnnotationLiteral>();
        set7.add(configProperty_ArcAnnotationLiteral);
        list.add(new RemovedBeanImpl(InjectableBean$Kind.PRODUCER_METHOD, "io.smallrye.config.inject.ConfigProducer#producesListConfigProperty()", (Set)set6, (Set)set7));
    }
    
    static void addRemovedBeans2(final List list, final Map map) {
        final ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
        final HashSet set = new HashSet();
        try {
            final Object value = map.get("java.io.Serializable");
            Object o;
            if (value != null) {
                o = value;
            }
            else {
                map.put("java.io.Serializable", Serializable.class);
                o = Serializable.class;
            }
            set.add(o);
        }
        catch (final Throwable t) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.io.Serializable", t);
        }
        try {
            final Object value2 = map.get("org.eclipse.microprofile.config.Config");
            Object o2;
            if (value2 != null) {
                o2 = value2;
            }
            else {
                final Class<?> forName = Class.forName("org.eclipse.microprofile.config.Config", false, contextClassLoader);
                map.put("org.eclipse.microprofile.config.Config", forName);
                o2 = forName;
            }
            set.add(o2);
        }
        catch (final Throwable t2) {
            ComponentsProvider.unableToLoadRemovedBeanType("org.eclipse.microprofile.config.Config", t2);
        }
        try {
            final Object value3 = map.get("io.smallrye.config.SmallRyeConfig");
            Object o3;
            if (value3 != null) {
                o3 = value3;
            }
            else {
                final Class<?> forName2 = Class.forName("io.smallrye.config.SmallRyeConfig", false, contextClassLoader);
                map.put("io.smallrye.config.SmallRyeConfig", forName2);
                o3 = forName2;
            }
            set.add(o3);
        }
        catch (final Throwable t3) {
            ComponentsProvider.unableToLoadRemovedBeanType("io.smallrye.config.SmallRyeConfig", t3);
        }
        list.add(new RemovedBeanImpl(InjectableBean$Kind.PRODUCER_METHOD, "io.smallrye.config.inject.ConfigProducer#getConfig()", (Set)set, (Set)null));
        final HashSet<Object> set2 = new HashSet<Object>();
        try {
            final Object value4 = map.get("java.lang.Number");
            Object o4;
            if (value4 != null) {
                o4 = value4;
            }
            else {
                map.put("java.lang.Number", Number.class);
                o4 = Number.class;
            }
            set2.add(o4);
        }
        catch (final Throwable t4) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.lang.Number", t4);
        }
        try {
            final Object value5 = map.get("java.io.Serializable");
            Object o5;
            if (value5 != null) {
                o5 = value5;
            }
            else {
                map.put("java.io.Serializable", Serializable.class);
                o5 = Serializable.class;
            }
            set2.add(o5);
        }
        catch (final Throwable t5) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.io.Serializable", t5);
        }
        try {
            final Object value6 = map.get("java.lang.Comparable<java.lang.Long>");
            Object o6;
            if (value6 != null) {
                o6 = value6;
            }
            else {
                final Type[] array = { null };
                final Type value7 = map.get("java.lang.Long");
                Type type;
                if (value7 != null) {
                    type = value7;
                }
                else {
                    map.put("java.lang.Long", Long.class);
                    type = Long.class;
                }
                array[0] = type;
                final ParameterizedTypeImpl parameterizedTypeImpl = new ParameterizedTypeImpl((Type)map.get("java.lang.Comparable"), array);
                map.put("java.lang.Comparable<java.lang.Long>", parameterizedTypeImpl);
                o6 = parameterizedTypeImpl;
            }
            set2.add(o6);
        }
        catch (final Throwable t6) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.lang.Comparable<java.lang.Long>", t6);
        }
        try {
            final Object value8 = map.get("java.lang.Long");
            Object o7;
            if (value8 != null) {
                o7 = value8;
            }
            else {
                map.put("java.lang.Long", Long.class);
                o7 = Long.class;
            }
            set2.add(o7);
        }
        catch (final Throwable t7) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.lang.Long", t7);
        }
        final HashSet set3 = new HashSet();
        set3.add(new ConfigProperty_ArcAnnotationLiteral("", "org.eclipse.microprofile.config.configproperty.unconfigureddvalue"));
        list.add(new RemovedBeanImpl(InjectableBean$Kind.PRODUCER_METHOD, "io.smallrye.config.inject.ConfigProducer#getLongValue()", (Set)set2, (Set)set3));
        final HashSet<Object> set4 = new HashSet<Object>();
        try {
            final Object value9 = map.get("java.lang.AutoCloseable");
            Object o8;
            if (value9 != null) {
                o8 = value9;
            }
            else {
                map.put("java.lang.AutoCloseable", AutoCloseable.class);
                o8 = AutoCloseable.class;
            }
            set4.add(o8);
        }
        catch (final Throwable t8) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.lang.AutoCloseable", t8);
        }
        try {
            final Object value10 = map.get("jakarta.json.bind.Jsonb");
            Object o9;
            if (value10 != null) {
                o9 = value10;
            }
            else {
                final Class<?> forName3 = Class.forName("jakarta.json.bind.Jsonb", false, contextClassLoader);
                map.put("jakarta.json.bind.Jsonb", forName3);
                o9 = forName3;
            }
            set4.add(o9);
        }
        catch (final Throwable t9) {
            ComponentsProvider.unableToLoadRemovedBeanType("jakarta.json.bind.Jsonb", t9);
        }
        list.add(new RemovedBeanImpl(InjectableBean$Kind.PRODUCER_METHOD, "io.quarkus.jsonb.JsonbProducer#jsonb()", (Set)set4, (Set)null));
        final HashSet<Object> set5 = new HashSet<Object>();
        try {
            final Object value11 = map.get("io.quarkus.runtime.CommandLineRuntimeConfig");
            Object o10;
            if (value11 != null) {
                o10 = value11;
            }
            else {
                final Class<?> forName4 = Class.forName("io.quarkus.runtime.CommandLineRuntimeConfig", false, contextClassLoader);
                map.put("io.quarkus.runtime.CommandLineRuntimeConfig", forName4);
                o10 = forName4;
            }
            set5.add(o10);
        }
        catch (final Throwable t10) {
            ComponentsProvider.unableToLoadRemovedBeanType("io.quarkus.runtime.CommandLineRuntimeConfig", t10);
        }
        list.add(new RemovedBeanImpl(InjectableBean$Kind.SYNTHETIC, (String)null, (Set)set5, (Set)null));
        final HashSet<Object> set6 = new HashSet<Object>();
        try {
            final Object value12 = map.get("io.quarkus.runtime.TlsConfig");
            Object o11;
            if (value12 != null) {
                o11 = value12;
            }
            else {
                final Class<?> forName5 = Class.forName("io.quarkus.runtime.TlsConfig", false, contextClassLoader);
                map.put("io.quarkus.runtime.TlsConfig", forName5);
                o11 = forName5;
            }
            set6.add(o11);
        }
        catch (final Throwable t11) {
            ComponentsProvider.unableToLoadRemovedBeanType("io.quarkus.runtime.TlsConfig", t11);
        }
        list.add(new RemovedBeanImpl(InjectableBean$Kind.SYNTHETIC, (String)null, (Set)set6, (Set)null));
    }
    
    static void addRemovedBeans3(final List list, final Map map) {
        final ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
        final HashSet set = new HashSet();
        try {
            final Object value = map.get("io.quarkus.arc.runtime.LoggerProducer");
            Object o;
            if (value != null) {
                o = value;
            }
            else {
                final Class<?> forName = Class.forName("io.quarkus.arc.runtime.LoggerProducer", false, contextClassLoader);
                map.put("io.quarkus.arc.runtime.LoggerProducer", forName);
                o = forName;
            }
            set.add(o);
        }
        catch (final Throwable t) {
            ComponentsProvider.unableToLoadRemovedBeanType("io.quarkus.arc.runtime.LoggerProducer", t);
        }
        list.add(new RemovedBeanImpl((InjectableBean$Kind)null, (String)null, (Set)set, (Set)null));
        final HashSet<Object> set2 = new HashSet<Object>();
        try {
            final Object value2 = map.get("java.lang.AutoCloseable");
            Object o2;
            if (value2 != null) {
                o2 = value2;
            }
            else {
                map.put("java.lang.AutoCloseable", AutoCloseable.class);
                o2 = AutoCloseable.class;
            }
            set2.add(o2);
        }
        catch (final Throwable t2) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.lang.AutoCloseable", t2);
        }
        try {
            final Object value3 = map.get("io.smallrye.graphql.client.dynamic.api.DynamicGraphQLClient");
            Object o3;
            if (value3 != null) {
                o3 = value3;
            }
            else {
                final Class<?> forName2 = Class.forName("io.smallrye.graphql.client.dynamic.api.DynamicGraphQLClient", false, contextClassLoader);
                map.put("io.smallrye.graphql.client.dynamic.api.DynamicGraphQLClient", forName2);
                o3 = forName2;
            }
            set2.add(o3);
        }
        catch (final Throwable t3) {
            ComponentsProvider.unableToLoadRemovedBeanType("io.smallrye.graphql.client.dynamic.api.DynamicGraphQLClient", t3);
        }
        final HashSet set3 = new HashSet();
        set3.add(Default$Literal.INSTANCE);
        list.add(new RemovedBeanImpl(InjectableBean$Kind.PRODUCER_METHOD, "io.smallrye.graphql.client.impl.dynamic.cdi.NamedDynamicClients#getClient()", (Set)set2, (Set)set3));
        final HashSet<Object> set4 = new HashSet<Object>();
        try {
            final Object value4 = map.get("java.util.OptionalInt");
            Object o4;
            if (value4 != null) {
                o4 = value4;
            }
            else {
                map.put("java.util.OptionalInt", OptionalInt.class);
                o4 = OptionalInt.class;
            }
            set4.add(o4);
        }
        catch (final Throwable t4) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.util.OptionalInt", t4);
        }
        final HashSet set5 = new HashSet();
        set5.add(new ConfigProperty_ArcAnnotationLiteral("", "org.eclipse.microprofile.config.configproperty.unconfigureddvalue"));
        list.add(new RemovedBeanImpl(InjectableBean$Kind.PRODUCER_METHOD, "io.smallrye.config.inject.ConfigProducer#produceOptionalIntConfigProperty()", (Set)set4, (Set)set5));
        final HashSet<Object> set6 = new HashSet<Object>();
        try {
            final Object value5 = map.get("io.smallrye.graphql.client.impl.dynamic.cdi.NamedDynamicClients");
            Object o5;
            if (value5 != null) {
                o5 = value5;
            }
            else {
                final Class<?> forName3 = Class.forName("io.smallrye.graphql.client.impl.dynamic.cdi.NamedDynamicClients", false, contextClassLoader);
                map.put("io.smallrye.graphql.client.impl.dynamic.cdi.NamedDynamicClients", forName3);
                o5 = forName3;
            }
            set6.add(o5);
        }
        catch (final Throwable t5) {
            ComponentsProvider.unableToLoadRemovedBeanType("io.smallrye.graphql.client.impl.dynamic.cdi.NamedDynamicClients", t5);
        }
        list.add(new RemovedBeanImpl((InjectableBean$Kind)null, (String)null, (Set)set6, (Set)null));
        final HashSet<Object> set7 = new HashSet<Object>();
        try {
            final Object value6 = map.get("io.quarkus.runtime.logging.LogConfig");
            Object o6;
            if (value6 != null) {
                o6 = value6;
            }
            else {
                final Class<?> forName4 = Class.forName("io.quarkus.runtime.logging.LogConfig", false, contextClassLoader);
                map.put("io.quarkus.runtime.logging.LogConfig", forName4);
                o6 = forName4;
            }
            set7.add(o6);
        }
        catch (final Throwable t6) {
            ComponentsProvider.unableToLoadRemovedBeanType("io.quarkus.runtime.logging.LogConfig", t6);
        }
        list.add(new RemovedBeanImpl(InjectableBean$Kind.SYNTHETIC, (String)null, (Set)set7, (Set)null));
    }
    
    static void addRemovedBeans4(final List list, final Map map) {
        final ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
        final HashSet set = new HashSet();
        try {
            final Object value = map.get("java.lang.Integer");
            Object o;
            if (value != null) {
                o = value;
            }
            else {
                map.put("java.lang.Integer", Integer.class);
                o = Integer.class;
            }
            set.add(o);
        }
        catch (final Throwable t) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.lang.Integer", t);
        }
        try {
            final Object value2 = map.get("java.lang.Number");
            Object o2;
            if (value2 != null) {
                o2 = value2;
            }
            else {
                map.put("java.lang.Number", Number.class);
                o2 = Number.class;
            }
            set.add(o2);
        }
        catch (final Throwable t2) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.lang.Number", t2);
        }
        try {
            final Object value3 = map.get("java.io.Serializable");
            Object o3;
            if (value3 != null) {
                o3 = value3;
            }
            else {
                map.put("java.io.Serializable", Serializable.class);
                o3 = Serializable.class;
            }
            set.add(o3);
        }
        catch (final Throwable t3) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.io.Serializable", t3);
        }
        try {
            final Object value4 = map.get("java.lang.Comparable<java.lang.Integer>");
            Object o4;
            if (value4 != null) {
                o4 = value4;
            }
            else {
                final Type[] array = { null };
                final Type value5 = map.get("java.lang.Integer");
                Type type;
                if (value5 != null) {
                    type = value5;
                }
                else {
                    map.put("java.lang.Integer", Integer.class);
                    type = Integer.class;
                }
                array[0] = type;
                final ParameterizedTypeImpl parameterizedTypeImpl = new ParameterizedTypeImpl((Type)map.get("java.lang.Comparable"), array);
                map.put("java.lang.Comparable<java.lang.Integer>", parameterizedTypeImpl);
                o4 = parameterizedTypeImpl;
            }
            set.add(o4);
        }
        catch (final Throwable t4) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.lang.Comparable<java.lang.Integer>", t4);
        }
        final HashSet<ConfigProperty_ArcAnnotationLiteral> set2 = new HashSet<ConfigProperty_ArcAnnotationLiteral>();
        final ConfigProperty_ArcAnnotationLiteral configProperty_ArcAnnotationLiteral = new ConfigProperty_ArcAnnotationLiteral("", "org.eclipse.microprofile.config.configproperty.unconfigureddvalue");
        set2.add(configProperty_ArcAnnotationLiteral);
        list.add(new RemovedBeanImpl(InjectableBean$Kind.PRODUCER_METHOD, "io.smallrye.config.inject.ConfigProducer#getIntegerValue()", (Set)set, (Set)set2));
        final HashSet set3 = new HashSet();
        try {
            final Object value6 = map.get("java.lang.Iterable<T>");
            Object o5;
            if (value6 != null) {
                o5 = value6;
            }
            else {
                final Type[] array2 = { null };
                final Type value7 = map.get("T");
                Object o6;
                if (value7 != null) {
                    o6 = value7;
                }
                else {
                    final Type[] array3 = { null };
                    final Type value8 = map.get("java.lang.Object");
                    Type type2;
                    if (value8 != null) {
                        type2 = value8;
                    }
                    else {
                        map.put("java.lang.Object", Object.class);
                        type2 = Object.class;
                    }
                    array3[0] = type2;
                    final TypeVariableImpl typeVariableImpl = new TypeVariableImpl("T", array3);
                    map.put("T", typeVariableImpl);
                    o6 = typeVariableImpl;
                }
                array2[0] = (Type)o6;
                final ParameterizedTypeImpl parameterizedTypeImpl2 = new ParameterizedTypeImpl((Type)map.get("java.lang.Iterable"), array2);
                map.put("java.lang.Iterable<T>", parameterizedTypeImpl2);
                o5 = parameterizedTypeImpl2;
            }
            set3.add(o5);
        }
        catch (final Throwable t5) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.lang.Iterable<T>", t5);
        }
        try {
            final Object value9 = map.get("java.util.Collection<T>");
            Object o7;
            if (value9 != null) {
                o7 = value9;
            }
            else {
                final Type[] array4 = { null };
                final Type value10 = map.get("T");
                Object o8;
                if (value10 != null) {
                    o8 = value10;
                }
                else {
                    final Type[] array5 = { null };
                    final Type value11 = map.get("java.lang.Object");
                    Type type3;
                    if (value11 != null) {
                        type3 = value11;
                    }
                    else {
                        map.put("java.lang.Object", Object.class);
                        type3 = Object.class;
                    }
                    array5[0] = type3;
                    final TypeVariableImpl typeVariableImpl2 = new TypeVariableImpl("T", array5);
                    map.put("T", typeVariableImpl2);
                    o8 = typeVariableImpl2;
                }
                array4[0] = (Type)o8;
                final ParameterizedTypeImpl parameterizedTypeImpl3 = new ParameterizedTypeImpl((Type)map.get("java.util.Collection"), array4);
                map.put("java.util.Collection<T>", parameterizedTypeImpl3);
                o7 = parameterizedTypeImpl3;
            }
            set3.add(o7);
        }
        catch (final Throwable t6) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.util.Collection<T>", t6);
        }
        try {
            final Object value12 = map.get("java.util.Set<T>");
            Object o9;
            if (value12 != null) {
                o9 = value12;
            }
            else {
                final Type[] array6 = { null };
                final Type value13 = map.get("T");
                Object o10;
                if (value13 != null) {
                    o10 = value13;
                }
                else {
                    final Type[] array7 = { null };
                    final Type value14 = map.get("java.lang.Object");
                    Type type4;
                    if (value14 != null) {
                        type4 = value14;
                    }
                    else {
                        map.put("java.lang.Object", Object.class);
                        type4 = Object.class;
                    }
                    array7[0] = type4;
                    final TypeVariableImpl typeVariableImpl3 = new TypeVariableImpl("T", array7);
                    map.put("T", typeVariableImpl3);
                    o10 = typeVariableImpl3;
                }
                array6[0] = (Type)o10;
                final ParameterizedTypeImpl parameterizedTypeImpl4 = new ParameterizedTypeImpl((Type)map.get("java.util.Set"), array6);
                map.put("java.util.Set<T>", parameterizedTypeImpl4);
                o9 = parameterizedTypeImpl4;
            }
            set3.add(o9);
        }
        catch (final Throwable t7) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.util.Set<T>", t7);
        }
        final HashSet<ConfigProperty_ArcAnnotationLiteral> set4 = new HashSet<ConfigProperty_ArcAnnotationLiteral>();
        set4.add(configProperty_ArcAnnotationLiteral);
        list.add(new RemovedBeanImpl(InjectableBean$Kind.PRODUCER_METHOD, "io.smallrye.config.inject.ConfigProducer#producesSetConfigProperty()", (Set)set3, (Set)set4));
        final HashSet<Object> set5 = new HashSet<Object>();
        try {
            final Object value15 = map.get("io.quarkus.runtime.shutdown.ShutdownConfig");
            Object o11;
            if (value15 != null) {
                o11 = value15;
            }
            else {
                final Class<?> forName = Class.forName("io.quarkus.runtime.shutdown.ShutdownConfig", false, contextClassLoader);
                map.put("io.quarkus.runtime.shutdown.ShutdownConfig", forName);
                o11 = forName;
            }
            set5.add(o11);
        }
        catch (final Throwable t8) {
            ComponentsProvider.unableToLoadRemovedBeanType("io.quarkus.runtime.shutdown.ShutdownConfig", t8);
        }
        list.add(new RemovedBeanImpl(InjectableBean$Kind.SYNTHETIC, (String)null, (Set)set5, (Set)null));
        final HashSet set6 = new HashSet();
        try {
            final Object value16 = map.get("org.eclipse.microprofile.config.ConfigValue");
            Object o12;
            if (value16 != null) {
                o12 = value16;
            }
            else {
                final Class<?> forName2 = Class.forName("org.eclipse.microprofile.config.ConfigValue", false, contextClassLoader);
                map.put("org.eclipse.microprofile.config.ConfigValue", forName2);
                o12 = forName2;
            }
            set6.add(o12);
        }
        catch (final Throwable t9) {
            ComponentsProvider.unableToLoadRemovedBeanType("org.eclipse.microprofile.config.ConfigValue", t9);
        }
        try {
            final Object value17 = map.get("io.smallrye.config.ConfigValue");
            Object o13;
            if (value17 != null) {
                o13 = value17;
            }
            else {
                final Class<?> forName3 = Class.forName("io.smallrye.config.ConfigValue", false, contextClassLoader);
                map.put("io.smallrye.config.ConfigValue", forName3);
                o13 = forName3;
            }
            set6.add(o13);
        }
        catch (final Throwable t10) {
            ComponentsProvider.unableToLoadRemovedBeanType("io.smallrye.config.ConfigValue", t10);
        }
        final HashSet<ConfigProperty_ArcAnnotationLiteral> set7 = new HashSet<ConfigProperty_ArcAnnotationLiteral>();
        set7.add(configProperty_ArcAnnotationLiteral);
        list.add(new RemovedBeanImpl(InjectableBean$Kind.PRODUCER_METHOD, "io.smallrye.config.inject.ConfigProducer#produceConfigValue()", (Set)set6, (Set)set7));
        final HashSet<Object> set8 = new HashSet<Object>();
        try {
            final Object value18 = map.get("io.quarkus.runtime.BannerRuntimeConfig");
            Object o14;
            if (value18 != null) {
                o14 = value18;
            }
            else {
                final Class<?> forName4 = Class.forName("io.quarkus.runtime.BannerRuntimeConfig", false, contextClassLoader);
                map.put("io.quarkus.runtime.BannerRuntimeConfig", forName4);
                o14 = forName4;
            }
            set8.add(o14);
        }
        catch (final Throwable t11) {
            ComponentsProvider.unableToLoadRemovedBeanType("io.quarkus.runtime.BannerRuntimeConfig", t11);
        }
        list.add(new RemovedBeanImpl(InjectableBean$Kind.SYNTHETIC, (String)null, (Set)set8, (Set)null));
    }
    
    static void addRemovedBeans5(final List list, final Map map) {
        final ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
        final HashSet set = new HashSet();
        try {
            final Object value = map.get("io.quarkus.runtime.console.ConsoleRuntimeConfig");
            Object o;
            if (value != null) {
                o = value;
            }
            else {
                final Class<?> forName = Class.forName("io.quarkus.runtime.console.ConsoleRuntimeConfig", false, contextClassLoader);
                map.put("io.quarkus.runtime.console.ConsoleRuntimeConfig", forName);
                o = forName;
            }
            set.add(o);
        }
        catch (final Throwable t) {
            ComponentsProvider.unableToLoadRemovedBeanType("io.quarkus.runtime.console.ConsoleRuntimeConfig", t);
        }
        list.add(new RemovedBeanImpl(InjectableBean$Kind.SYNTHETIC, (String)null, (Set)set, (Set)null));
        final HashSet<Object> set2 = new HashSet<Object>();
        try {
            final Object value2 = map.get("io.quarkus.runtime.ConfigConfig");
            Object o2;
            if (value2 != null) {
                o2 = value2;
            }
            else {
                final Class<?> forName2 = Class.forName("io.quarkus.runtime.ConfigConfig", false, contextClassLoader);
                map.put("io.quarkus.runtime.ConfigConfig", forName2);
                o2 = forName2;
            }
            set2.add(o2);
        }
        catch (final Throwable t2) {
            ComponentsProvider.unableToLoadRemovedBeanType("io.quarkus.runtime.ConfigConfig", t2);
        }
        list.add(new RemovedBeanImpl(InjectableBean$Kind.SYNTHETIC, (String)null, (Set)set2, (Set)null));
        final HashSet<Object> set3 = new HashSet<Object>();
        try {
            final Object value3 = map.get("io.quarkus.runtime.init.InitRuntimeConfig");
            Object o3;
            if (value3 != null) {
                o3 = value3;
            }
            else {
                final Class<?> forName3 = Class.forName("io.quarkus.runtime.init.InitRuntimeConfig", false, contextClassLoader);
                map.put("io.quarkus.runtime.init.InitRuntimeConfig", forName3);
                o3 = forName3;
            }
            set3.add(o3);
        }
        catch (final Throwable t3) {
            ComponentsProvider.unableToLoadRemovedBeanType("io.quarkus.runtime.init.InitRuntimeConfig", t3);
        }
        list.add(new RemovedBeanImpl(InjectableBean$Kind.SYNTHETIC, (String)null, (Set)set3, (Set)null));
        final HashSet<Object> set4 = new HashSet<Object>();
        try {
            final Object value4 = map.get("io.quarkus.runtime.DebugRuntimeConfig");
            Object o4;
            if (value4 != null) {
                o4 = value4;
            }
            else {
                final Class<?> forName4 = Class.forName("io.quarkus.runtime.DebugRuntimeConfig", false, contextClassLoader);
                map.put("io.quarkus.runtime.DebugRuntimeConfig", forName4);
                o4 = forName4;
            }
            set4.add(o4);
        }
        catch (final Throwable t4) {
            ComponentsProvider.unableToLoadRemovedBeanType("io.quarkus.runtime.DebugRuntimeConfig", t4);
        }
        list.add(new RemovedBeanImpl(InjectableBean$Kind.SYNTHETIC, (String)null, (Set)set4, (Set)null));
        final HashSet<Object> set5 = new HashSet<Object>();
        try {
            final Object value5 = map.get("io.quarkus.runtime.ApplicationConfig");
            Object o5;
            if (value5 != null) {
                o5 = value5;
            }
            else {
                final Class<?> forName5 = Class.forName("io.quarkus.runtime.ApplicationConfig", false, contextClassLoader);
                map.put("io.quarkus.runtime.ApplicationConfig", forName5);
                o5 = forName5;
            }
            set5.add(o5);
        }
        catch (final Throwable t5) {
            ComponentsProvider.unableToLoadRemovedBeanType("io.quarkus.runtime.ApplicationConfig", t5);
        }
        list.add(new RemovedBeanImpl(InjectableBean$Kind.SYNTHETIC, (String)null, (Set)set5, (Set)null));
    }
    
    static void addRemovedBeans6(final List list, final Map map) {
        final ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
        final HashSet set = new HashSet();
        try {
            final Object value = map.get("io.quarkus.stork.StorkConfiguration");
            Object o;
            if (value != null) {
                o = value;
            }
            else {
                final Class<?> forName = Class.forName("io.quarkus.stork.StorkConfiguration", false, contextClassLoader);
                map.put("io.quarkus.stork.StorkConfiguration", forName);
                o = forName;
            }
            set.add(o);
        }
        catch (final Throwable t) {
            ComponentsProvider.unableToLoadRemovedBeanType("io.quarkus.stork.StorkConfiguration", t);
        }
        list.add(new RemovedBeanImpl(InjectableBean$Kind.SYNTHETIC, (String)null, (Set)set, (Set)null));
        final HashSet<Object> set2 = new HashSet<Object>();
        try {
            final Object value2 = map.get("java.lang.Number");
            Object o2;
            if (value2 != null) {
                o2 = value2;
            }
            else {
                map.put("java.lang.Number", Number.class);
                o2 = Number.class;
            }
            set2.add(o2);
        }
        catch (final Throwable t2) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.lang.Number", t2);
        }
        try {
            final Object value3 = map.get("java.io.Serializable");
            Object o3;
            if (value3 != null) {
                o3 = value3;
            }
            else {
                map.put("java.io.Serializable", Serializable.class);
                o3 = Serializable.class;
            }
            set2.add(o3);
        }
        catch (final Throwable t3) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.io.Serializable", t3);
        }
        try {
            final Object value4 = map.get("java.lang.Double");
            Object o4;
            if (value4 != null) {
                o4 = value4;
            }
            else {
                map.put("java.lang.Double", Double.class);
                o4 = Double.class;
            }
            set2.add(o4);
        }
        catch (final Throwable t4) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.lang.Double", t4);
        }
        try {
            final Object value5 = map.get("java.lang.Comparable<java.lang.Double>");
            Object o5;
            if (value5 != null) {
                o5 = value5;
            }
            else {
                final Type[] array = { null };
                final Type value6 = map.get("java.lang.Double");
                Type type;
                if (value6 != null) {
                    type = value6;
                }
                else {
                    map.put("java.lang.Double", Double.class);
                    type = Double.class;
                }
                array[0] = type;
                final ParameterizedTypeImpl parameterizedTypeImpl = new ParameterizedTypeImpl((Type)map.get("java.lang.Comparable"), array);
                map.put("java.lang.Comparable<java.lang.Double>", parameterizedTypeImpl);
                o5 = parameterizedTypeImpl;
            }
            set2.add(o5);
        }
        catch (final Throwable t5) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.lang.Comparable<java.lang.Double>", t5);
        }
        final HashSet set3 = new HashSet();
        final ConfigProperty_ArcAnnotationLiteral configProperty_ArcAnnotationLiteral = new ConfigProperty_ArcAnnotationLiteral("", "org.eclipse.microprofile.config.configproperty.unconfigureddvalue");
        set3.add(configProperty_ArcAnnotationLiteral);
        list.add(new RemovedBeanImpl(InjectableBean$Kind.PRODUCER_METHOD, "io.smallrye.config.inject.ConfigProducer#produceDoubleConfigProperty()", (Set)set2, (Set)set3));
        final HashSet set4 = new HashSet();
        try {
            final Object value7 = map.get("java.util.OptionalDouble");
            Object o6;
            if (value7 != null) {
                o6 = value7;
            }
            else {
                map.put("java.util.OptionalDouble", OptionalDouble.class);
                o6 = OptionalDouble.class;
            }
            set4.add(o6);
        }
        catch (final Throwable t6) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.util.OptionalDouble", t6);
        }
        final HashSet<ConfigProperty_ArcAnnotationLiteral> set5 = new HashSet<ConfigProperty_ArcAnnotationLiteral>();
        set5.add(configProperty_ArcAnnotationLiteral);
        list.add(new RemovedBeanImpl(InjectableBean$Kind.PRODUCER_METHOD, "io.smallrye.config.inject.ConfigProducer#produceOptionalDoubleConfigProperty()", (Set)set4, (Set)set5));
        final HashSet<Object> set6 = new HashSet<Object>();
        try {
            final Object value8 = map.get("io.quarkiverse.githubaction.runtime.ConfigFileReader");
            Object o7;
            if (value8 != null) {
                o7 = value8;
            }
            else {
                final Class<?> forName2 = Class.forName("io.quarkiverse.githubaction.runtime.ConfigFileReader", false, contextClassLoader);
                map.put("io.quarkiverse.githubaction.runtime.ConfigFileReader", forName2);
                o7 = forName2;
            }
            set6.add(o7);
        }
        catch (final Throwable t7) {
            ComponentsProvider.unableToLoadRemovedBeanType("io.quarkiverse.githubaction.runtime.ConfigFileReader", t7);
        }
        list.add(new RemovedBeanImpl((InjectableBean$Kind)null, (String)null, (Set)set6, (Set)null));
        final HashSet set7 = new HashSet();
        try {
            final Object value9 = map.get("java.util.Map<K, V>");
            Object o8;
            if (value9 != null) {
                o8 = value9;
            }
            else {
                final Type[] array2 = new Type[2];
                final Type value10 = map.get("K");
                Object o9;
                if (value10 != null) {
                    o9 = value10;
                }
                else {
                    final Type[] array3 = { null };
                    final Type value11 = map.get("java.lang.Object");
                    Type type2;
                    if (value11 != null) {
                        type2 = value11;
                    }
                    else {
                        map.put("java.lang.Object", Object.class);
                        type2 = Object.class;
                    }
                    array3[0] = type2;
                    final TypeVariableImpl typeVariableImpl = new TypeVariableImpl("K", array3);
                    map.put("K", typeVariableImpl);
                    o9 = typeVariableImpl;
                }
                array2[0] = (Type)o9;
                final Type value12 = map.get("V");
                Object o10;
                if (value12 != null) {
                    o10 = value12;
                }
                else {
                    final Type[] array4 = { null };
                    final Type value13 = map.get("java.lang.Object");
                    Type type3;
                    if (value13 != null) {
                        type3 = value13;
                    }
                    else {
                        map.put("java.lang.Object", Object.class);
                        type3 = Object.class;
                    }
                    array4[0] = type3;
                    final TypeVariableImpl typeVariableImpl2 = new TypeVariableImpl("V", array4);
                    map.put("V", typeVariableImpl2);
                    o10 = typeVariableImpl2;
                }
                array2[1] = (Type)o10;
                final ParameterizedTypeImpl parameterizedTypeImpl2 = new ParameterizedTypeImpl((Type)map.get("java.util.Map"), array2);
                map.put("java.util.Map<K, V>", parameterizedTypeImpl2);
                o8 = parameterizedTypeImpl2;
            }
            set7.add(o8);
        }
        catch (final Throwable t8) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.util.Map<K, V>", t8);
        }
        final HashSet<ConfigProperty_ArcAnnotationLiteral> set8 = new HashSet<ConfigProperty_ArcAnnotationLiteral>();
        set8.add(configProperty_ArcAnnotationLiteral);
        list.add(new RemovedBeanImpl(InjectableBean$Kind.PRODUCER_METHOD, "io.smallrye.config.inject.ConfigProducer#producesMapConfigProperty()", (Set)set7, (Set)set8));
    }
    
    static void addRemovedBeans7(final List list, final Map map) {
        final ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
        final HashSet set = new HashSet();
        try {
            final Object value = map.get("io.quarkus.runtime.LiveReloadConfig");
            Object o;
            if (value != null) {
                o = value;
            }
            else {
                final Class<?> forName = Class.forName("io.quarkus.runtime.LiveReloadConfig", false, contextClassLoader);
                map.put("io.quarkus.runtime.LiveReloadConfig", forName);
                o = forName;
            }
            set.add(o);
        }
        catch (final Throwable t) {
            ComponentsProvider.unableToLoadRemovedBeanType("io.quarkus.runtime.LiveReloadConfig", t);
        }
        list.add(new RemovedBeanImpl(InjectableBean$Kind.SYNTHETIC, (String)null, (Set)set, (Set)null));
        final HashSet<Object> set2 = new HashSet<Object>();
        try {
            final Object value2 = map.get("io.quarkus.runtime.logging.LogBuildTimeConfig");
            Object o2;
            if (value2 != null) {
                o2 = value2;
            }
            else {
                final Class<?> forName2 = Class.forName("io.quarkus.runtime.logging.LogBuildTimeConfig", false, contextClassLoader);
                map.put("io.quarkus.runtime.logging.LogBuildTimeConfig", forName2);
                o2 = forName2;
            }
            set2.add(o2);
        }
        catch (final Throwable t2) {
            ComponentsProvider.unableToLoadRemovedBeanType("io.quarkus.runtime.logging.LogBuildTimeConfig", t2);
        }
        list.add(new RemovedBeanImpl(InjectableBean$Kind.SYNTHETIC, (String)null, (Set)set2, (Set)null));
        final HashSet<Object> set3 = new HashSet<Object>();
        try {
            final Object value3 = map.get("java.util.OptionalLong");
            Object o3;
            if (value3 != null) {
                o3 = value3;
            }
            else {
                map.put("java.util.OptionalLong", OptionalLong.class);
                o3 = OptionalLong.class;
            }
            set3.add(o3);
        }
        catch (final Throwable t3) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.util.OptionalLong", t3);
        }
        final HashSet set4 = new HashSet();
        final ConfigProperty_ArcAnnotationLiteral configProperty_ArcAnnotationLiteral = new ConfigProperty_ArcAnnotationLiteral("", "org.eclipse.microprofile.config.configproperty.unconfigureddvalue");
        set4.add(configProperty_ArcAnnotationLiteral);
        list.add(new RemovedBeanImpl(InjectableBean$Kind.PRODUCER_METHOD, "io.smallrye.config.inject.ConfigProducer#produceOptionalLongConfigProperty()", (Set)set3, (Set)set4));
        final HashSet set5 = new HashSet();
        try {
            final Object value4 = map.get("java.io.Serializable");
            Object o4;
            if (value4 != null) {
                o4 = value4;
            }
            else {
                map.put("java.io.Serializable", Serializable.class);
                o4 = Serializable.class;
            }
            set5.add(o4);
        }
        catch (final Throwable t4) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.io.Serializable", t4);
        }
        try {
            final Object value5 = map.get("java.lang.Comparable<java.lang.Character>");
            Object o5;
            if (value5 != null) {
                o5 = value5;
            }
            else {
                final Type[] array = { null };
                final Type value6 = map.get("java.lang.Character");
                Type type;
                if (value6 != null) {
                    type = value6;
                }
                else {
                    map.put("java.lang.Character", Character.class);
                    type = Character.class;
                }
                array[0] = type;
                final ParameterizedTypeImpl parameterizedTypeImpl = new ParameterizedTypeImpl((Type)map.get("java.lang.Comparable"), array);
                map.put("java.lang.Comparable<java.lang.Character>", parameterizedTypeImpl);
                o5 = parameterizedTypeImpl;
            }
            set5.add(o5);
        }
        catch (final Throwable t5) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.lang.Comparable<java.lang.Character>", t5);
        }
        try {
            final Object value7 = map.get("java.lang.Character");
            Object o6;
            if (value7 != null) {
                o6 = value7;
            }
            else {
                map.put("java.lang.Character", Character.class);
                o6 = Character.class;
            }
            set5.add(o6);
        }
        catch (final Throwable t6) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.lang.Character", t6);
        }
        final HashSet<ConfigProperty_ArcAnnotationLiteral> set6 = new HashSet<ConfigProperty_ArcAnnotationLiteral>();
        set6.add(configProperty_ArcAnnotationLiteral);
        list.add(new RemovedBeanImpl(InjectableBean$Kind.PRODUCER_METHOD, "io.smallrye.config.inject.ConfigProducer#produceCharacterConfigProperty()", (Set)set5, (Set)set6));
        final HashSet set7 = new HashSet();
        try {
            final Object value8 = map.get("java.io.Serializable");
            Object o7;
            if (value8 != null) {
                o7 = value8;
            }
            else {
                map.put("java.io.Serializable", Serializable.class);
                o7 = Serializable.class;
            }
            set7.add(o7);
        }
        catch (final Throwable t7) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.io.Serializable", t7);
        }
        try {
            final Object value9 = map.get("java.lang.Boolean");
            Object o8;
            if (value9 != null) {
                o8 = value9;
            }
            else {
                map.put("java.lang.Boolean", Boolean.class);
                o8 = Boolean.class;
            }
            set7.add(o8);
        }
        catch (final Throwable t8) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.lang.Boolean", t8);
        }
        try {
            final Object value10 = map.get("java.lang.Comparable<java.lang.Boolean>");
            Object o9;
            if (value10 != null) {
                o9 = value10;
            }
            else {
                final Type[] array2 = { null };
                final Type value11 = map.get("java.lang.Boolean");
                Type type2;
                if (value11 != null) {
                    type2 = value11;
                }
                else {
                    map.put("java.lang.Boolean", Boolean.class);
                    type2 = Boolean.class;
                }
                array2[0] = type2;
                final ParameterizedTypeImpl parameterizedTypeImpl2 = new ParameterizedTypeImpl((Type)map.get("java.lang.Comparable"), array2);
                map.put("java.lang.Comparable<java.lang.Boolean>", parameterizedTypeImpl2);
                o9 = parameterizedTypeImpl2;
            }
            set7.add(o9);
        }
        catch (final Throwable t9) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.lang.Comparable<java.lang.Boolean>", t9);
        }
        final HashSet<ConfigProperty_ArcAnnotationLiteral> set8 = new HashSet<ConfigProperty_ArcAnnotationLiteral>();
        set8.add(configProperty_ArcAnnotationLiteral);
        list.add(new RemovedBeanImpl(InjectableBean$Kind.PRODUCER_METHOD, "io.smallrye.config.inject.ConfigProducer#produceBooleanConfigProperty()", (Set)set7, (Set)set8));
    }
    
    static void addRemovedBeans8(final List list, final Map map) {
        final ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
        final HashSet set = new HashSet();
        try {
            final Object value = map.get("java.io.Serializable");
            Object o;
            if (value != null) {
                o = value;
            }
            else {
                map.put("java.io.Serializable", Serializable.class);
                o = Serializable.class;
            }
            set.add(o);
        }
        catch (final Throwable t) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.io.Serializable", t);
        }
        try {
            final Object value2 = map.get("org.jboss.logging.BasicLogger");
            Object o2;
            if (value2 != null) {
                o2 = value2;
            }
            else {
                final Class<?> forName = Class.forName("org.jboss.logging.BasicLogger", false, contextClassLoader);
                map.put("org.jboss.logging.BasicLogger", forName);
                o2 = forName;
            }
            set.add(o2);
        }
        catch (final Throwable t2) {
            ComponentsProvider.unableToLoadRemovedBeanType("org.jboss.logging.BasicLogger", t2);
        }
        try {
            final Object value3 = map.get("org.jboss.logging.Logger");
            Object o3;
            if (value3 != null) {
                o3 = value3;
            }
            else {
                final Class<?> forName2 = Class.forName("org.jboss.logging.Logger", false, contextClassLoader);
                map.put("org.jboss.logging.Logger", forName2);
                o3 = forName2;
            }
            set.add(o3);
        }
        catch (final Throwable t3) {
            ComponentsProvider.unableToLoadRemovedBeanType("org.jboss.logging.Logger", t3);
        }
        list.add(new RemovedBeanImpl(InjectableBean$Kind.PRODUCER_METHOD, "io.quarkus.arc.runtime.LoggerProducer#getSimpleLogger()", (Set)set, (Set)null));
        final HashSet<Object> set2 = new HashSet<Object>();
        try {
            final Object value4 = map.get("java.lang.Number");
            Object o4;
            if (value4 != null) {
                o4 = value4;
            }
            else {
                map.put("java.lang.Number", Number.class);
                o4 = Number.class;
            }
            set2.add(o4);
        }
        catch (final Throwable t4) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.lang.Number", t4);
        }
        try {
            final Object value5 = map.get("java.io.Serializable");
            Object o5;
            if (value5 != null) {
                o5 = value5;
            }
            else {
                map.put("java.io.Serializable", Serializable.class);
                o5 = Serializable.class;
            }
            set2.add(o5);
        }
        catch (final Throwable t5) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.io.Serializable", t5);
        }
        try {
            final Object value6 = map.get("java.lang.Short");
            Object o6;
            if (value6 != null) {
                o6 = value6;
            }
            else {
                map.put("java.lang.Short", Short.class);
                o6 = Short.class;
            }
            set2.add(o6);
        }
        catch (final Throwable t6) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.lang.Short", t6);
        }
        try {
            final Object value7 = map.get("java.lang.Comparable<java.lang.Short>");
            Object o7;
            if (value7 != null) {
                o7 = value7;
            }
            else {
                final Type[] array = { null };
                final Type value8 = map.get("java.lang.Short");
                Type type;
                if (value8 != null) {
                    type = value8;
                }
                else {
                    map.put("java.lang.Short", Short.class);
                    type = Short.class;
                }
                array[0] = type;
                final ParameterizedTypeImpl parameterizedTypeImpl = new ParameterizedTypeImpl((Type)map.get("java.lang.Comparable"), array);
                map.put("java.lang.Comparable<java.lang.Short>", parameterizedTypeImpl);
                o7 = parameterizedTypeImpl;
            }
            set2.add(o7);
        }
        catch (final Throwable t7) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.lang.Comparable<java.lang.Short>", t7);
        }
        final HashSet set3 = new HashSet();
        final ConfigProperty_ArcAnnotationLiteral configProperty_ArcAnnotationLiteral = new ConfigProperty_ArcAnnotationLiteral("", "org.eclipse.microprofile.config.configproperty.unconfigureddvalue");
        set3.add(configProperty_ArcAnnotationLiteral);
        list.add(new RemovedBeanImpl(InjectableBean$Kind.PRODUCER_METHOD, "io.smallrye.config.inject.ConfigProducer#produceShortConfigProperty()", (Set)set2, (Set)set3));
        final HashSet<Object> set4 = new HashSet<Object>();
        try {
            final Object value9 = map.get("io.quarkus.vertx.core.runtime.config.VertxConfiguration");
            Object o8;
            if (value9 != null) {
                o8 = value9;
            }
            else {
                final Class<?> forName3 = Class.forName("io.quarkus.vertx.core.runtime.config.VertxConfiguration", false, contextClassLoader);
                map.put("io.quarkus.vertx.core.runtime.config.VertxConfiguration", forName3);
                o8 = forName3;
            }
            set4.add(o8);
        }
        catch (final Throwable t8) {
            ComponentsProvider.unableToLoadRemovedBeanType("io.quarkus.vertx.core.runtime.config.VertxConfiguration", t8);
        }
        list.add(new RemovedBeanImpl(InjectableBean$Kind.SYNTHETIC, (String)null, (Set)set4, (Set)null));
        final HashSet<Object> set5 = new HashSet<Object>();
        try {
            final Object value10 = map.get("io.quarkus.runtime.ThreadPoolConfig");
            Object o9;
            if (value10 != null) {
                o9 = value10;
            }
            else {
                final Class<?> forName4 = Class.forName("io.quarkus.runtime.ThreadPoolConfig", false, contextClassLoader);
                map.put("io.quarkus.runtime.ThreadPoolConfig", forName4);
                o9 = forName4;
            }
            set5.add(o9);
        }
        catch (final Throwable t9) {
            ComponentsProvider.unableToLoadRemovedBeanType("io.quarkus.runtime.ThreadPoolConfig", t9);
        }
        list.add(new RemovedBeanImpl(InjectableBean$Kind.SYNTHETIC, (String)null, (Set)set5, (Set)null));
        final HashSet set6 = new HashSet();
        try {
            final Object value11 = map.get("java.util.function.Supplier<T>");
            Object o10;
            if (value11 != null) {
                o10 = value11;
            }
            else {
                final Type[] array2 = { null };
                final Type value12 = map.get("T");
                Object o11;
                if (value12 != null) {
                    o11 = value12;
                }
                else {
                    final Type[] array3 = { null };
                    final Type value13 = map.get("java.lang.Object");
                    Type type2;
                    if (value13 != null) {
                        type2 = value13;
                    }
                    else {
                        map.put("java.lang.Object", Object.class);
                        type2 = Object.class;
                    }
                    array3[0] = type2;
                    final TypeVariableImpl typeVariableImpl = new TypeVariableImpl("T", array3);
                    map.put("T", typeVariableImpl);
                    o11 = typeVariableImpl;
                }
                array2[0] = (Type)o11;
                final ParameterizedTypeImpl parameterizedTypeImpl2 = new ParameterizedTypeImpl((Type)map.get("java.util.function.Supplier"), array2);
                map.put("java.util.function.Supplier<T>", parameterizedTypeImpl2);
                o10 = parameterizedTypeImpl2;
            }
            set6.add(o10);
        }
        catch (final Throwable t10) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.util.function.Supplier<T>", t10);
        }
        final HashSet<ConfigProperty_ArcAnnotationLiteral> set7 = new HashSet<ConfigProperty_ArcAnnotationLiteral>();
        set7.add(configProperty_ArcAnnotationLiteral);
        list.add(new RemovedBeanImpl(InjectableBean$Kind.PRODUCER_METHOD, "io.smallrye.config.inject.ConfigProducer#produceSupplierConfigProperty()", (Set)set6, (Set)set7));
    }
    
    static void addRemovedBeans9(final List list, final Map map) {
        final ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
        final HashSet set = new HashSet();
        try {
            final Object value = map.get("java.util.Optional<T>");
            Object o;
            if (value != null) {
                o = value;
            }
            else {
                final Type[] array = { null };
                final Type value2 = map.get("T");
                Object o2;
                if (value2 != null) {
                    o2 = value2;
                }
                else {
                    final Type[] array2 = { null };
                    final Type value3 = map.get("java.lang.Object");
                    Type type;
                    if (value3 != null) {
                        type = value3;
                    }
                    else {
                        map.put("java.lang.Object", Object.class);
                        type = Object.class;
                    }
                    array2[0] = type;
                    final TypeVariableImpl typeVariableImpl = new TypeVariableImpl("T", array2);
                    map.put("T", typeVariableImpl);
                    o2 = typeVariableImpl;
                }
                array[0] = (Type)o2;
                final ParameterizedTypeImpl parameterizedTypeImpl = new ParameterizedTypeImpl((Type)map.get("java.util.Optional"), array);
                map.put("java.util.Optional<T>", parameterizedTypeImpl);
                o = parameterizedTypeImpl;
            }
            set.add(o);
        }
        catch (final Throwable t) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.util.Optional<T>", t);
        }
        final HashSet<ConfigProperty_ArcAnnotationLiteral> set2 = new HashSet<ConfigProperty_ArcAnnotationLiteral>();
        final ConfigProperty_ArcAnnotationLiteral configProperty_ArcAnnotationLiteral = new ConfigProperty_ArcAnnotationLiteral("", "org.eclipse.microprofile.config.configproperty.unconfigureddvalue");
        set2.add(configProperty_ArcAnnotationLiteral);
        list.add(new RemovedBeanImpl(InjectableBean$Kind.PRODUCER_METHOD, "io.smallrye.config.inject.ConfigProducer#produceOptionalConfigProperty()", (Set)set, (Set)set2));
        final HashSet set3 = new HashSet();
        try {
            final Object value4 = map.get("java.lang.Comparable<java.lang.Byte>");
            Object o3;
            if (value4 != null) {
                o3 = value4;
            }
            else {
                final Type[] array3 = { null };
                final Type value5 = map.get("java.lang.Byte");
                Type type2;
                if (value5 != null) {
                    type2 = value5;
                }
                else {
                    map.put("java.lang.Byte", Byte.class);
                    type2 = Byte.class;
                }
                array3[0] = type2;
                final ParameterizedTypeImpl parameterizedTypeImpl2 = new ParameterizedTypeImpl((Type)map.get("java.lang.Comparable"), array3);
                map.put("java.lang.Comparable<java.lang.Byte>", parameterizedTypeImpl2);
                o3 = parameterizedTypeImpl2;
            }
            set3.add(o3);
        }
        catch (final Throwable t2) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.lang.Comparable<java.lang.Byte>", t2);
        }
        try {
            final Object value6 = map.get("java.lang.Number");
            Object o4;
            if (value6 != null) {
                o4 = value6;
            }
            else {
                map.put("java.lang.Number", Number.class);
                o4 = Number.class;
            }
            set3.add(o4);
        }
        catch (final Throwable t3) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.lang.Number", t3);
        }
        try {
            final Object value7 = map.get("java.io.Serializable");
            Object o5;
            if (value7 != null) {
                o5 = value7;
            }
            else {
                map.put("java.io.Serializable", Serializable.class);
                o5 = Serializable.class;
            }
            set3.add(o5);
        }
        catch (final Throwable t4) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.io.Serializable", t4);
        }
        try {
            final Object value8 = map.get("java.lang.Byte");
            Object o6;
            if (value8 != null) {
                o6 = value8;
            }
            else {
                map.put("java.lang.Byte", Byte.class);
                o6 = Byte.class;
            }
            set3.add(o6);
        }
        catch (final Throwable t5) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.lang.Byte", t5);
        }
        final HashSet<ConfigProperty_ArcAnnotationLiteral> set4 = new HashSet<ConfigProperty_ArcAnnotationLiteral>();
        set4.add(configProperty_ArcAnnotationLiteral);
        list.add(new RemovedBeanImpl(InjectableBean$Kind.PRODUCER_METHOD, "io.smallrye.config.inject.ConfigProducer#produceByteConfigProperty()", (Set)set3, (Set)set4));
        final HashSet<Object> set5 = new HashSet<Object>();
        try {
            final Object value9 = map.get("java.io.Serializable");
            Object o7;
            if (value9 != null) {
                o7 = value9;
            }
            else {
                map.put("java.io.Serializable", Serializable.class);
                o7 = Serializable.class;
            }
            set5.add(o7);
        }
        catch (final Throwable t6) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.io.Serializable", t6);
        }
        try {
            final Object value10 = map.get("org.jboss.logging.BasicLogger");
            Object o8;
            if (value10 != null) {
                o8 = value10;
            }
            else {
                final Class<?> forName = Class.forName("org.jboss.logging.BasicLogger", false, contextClassLoader);
                map.put("org.jboss.logging.BasicLogger", forName);
                o8 = forName;
            }
            set5.add(o8);
        }
        catch (final Throwable t7) {
            ComponentsProvider.unableToLoadRemovedBeanType("org.jboss.logging.BasicLogger", t7);
        }
        try {
            final Object value11 = map.get("org.jboss.logging.Logger");
            Object o9;
            if (value11 != null) {
                o9 = value11;
            }
            else {
                final Class<?> forName2 = Class.forName("org.jboss.logging.Logger", false, contextClassLoader);
                map.put("org.jboss.logging.Logger", forName2);
                o9 = forName2;
            }
            set5.add(o9);
        }
        catch (final Throwable t8) {
            ComponentsProvider.unableToLoadRemovedBeanType("org.jboss.logging.Logger", t8);
        }
        final HashSet set6 = new HashSet();
        set6.add(new LoggerName_ArcAnnotationLiteral(""));
        list.add(new RemovedBeanImpl(InjectableBean$Kind.PRODUCER_METHOD, "io.quarkus.arc.runtime.LoggerProducer#getLoggerWithCustomName()", (Set)set5, (Set)set6));
        final HashSet<Object> set7 = new HashSet<Object>();
        try {
            final Object value12 = map.get("io.quarkus.runtime.configuration.ConfigurationRuntimeConfig");
            Object o10;
            if (value12 != null) {
                o10 = value12;
            }
            else {
                final Class<?> forName3 = Class.forName("io.quarkus.runtime.configuration.ConfigurationRuntimeConfig", false, contextClassLoader);
                map.put("io.quarkus.runtime.configuration.ConfigurationRuntimeConfig", forName3);
                o10 = forName3;
            }
            set7.add(o10);
        }
        catch (final Throwable t9) {
            ComponentsProvider.unableToLoadRemovedBeanType("io.quarkus.runtime.configuration.ConfigurationRuntimeConfig", t9);
        }
        list.add(new RemovedBeanImpl(InjectableBean$Kind.SYNTHETIC, (String)null, (Set)set7, (Set)null));
        final HashSet<Object> set8 = new HashSet<Object>();
        try {
            final Object value13 = map.get("io.quarkiverse.githubaction.GitHubFileDownloader");
            Object o11;
            if (value13 != null) {
                o11 = value13;
            }
            else {
                final Class<?> forName4 = Class.forName("io.quarkiverse.githubaction.GitHubFileDownloader", false, contextClassLoader);
                map.put("io.quarkiverse.githubaction.GitHubFileDownloader", forName4);
                o11 = forName4;
            }
            set8.add(o11);
        }
        catch (final Throwable t10) {
            ComponentsProvider.unableToLoadRemovedBeanType("io.quarkiverse.githubaction.GitHubFileDownloader", t10);
        }
        try {
            final Object value14 = map.get("io.quarkiverse.githubaction.runtime.github.GitHubFileDownloaderImpl");
            Object o12;
            if (value14 != null) {
                o12 = value14;
            }
            else {
                final Class<?> forName5 = Class.forName("io.quarkiverse.githubaction.runtime.github.GitHubFileDownloaderImpl", false, contextClassLoader);
                map.put("io.quarkiverse.githubaction.runtime.github.GitHubFileDownloaderImpl", forName5);
                o12 = forName5;
            }
            set8.add(o12);
        }
        catch (final Throwable t11) {
            ComponentsProvider.unableToLoadRemovedBeanType("io.quarkiverse.githubaction.runtime.github.GitHubFileDownloaderImpl", t11);
        }
        list.add(new RemovedBeanImpl((InjectableBean$Kind)null, (String)null, (Set)set8, (Set)null));
    }
    
    static void addRemovedBeans10(final List list, final Map map) {
        final ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
        final HashSet set = new HashSet();
        try {
            final Object value = map.get("jakarta.json.bind.JsonbConfig");
            Object o;
            if (value != null) {
                o = value;
            }
            else {
                final Class<?> forName = Class.forName("jakarta.json.bind.JsonbConfig", false, contextClassLoader);
                map.put("jakarta.json.bind.JsonbConfig", forName);
                o = forName;
            }
            set.add(o);
        }
        catch (final Throwable t) {
            ComponentsProvider.unableToLoadRemovedBeanType("jakarta.json.bind.JsonbConfig", t);
        }
        list.add(new RemovedBeanImpl(InjectableBean$Kind.PRODUCER_METHOD, "io.quarkus.jsonb.JsonbProducer#jsonbConfig()", (Set)set, (Set)null));
        final HashSet<Object> set2 = new HashSet<Object>();
        try {
            final Object value2 = map.get("io.quarkus.jsonb.JsonbProducer");
            Object o2;
            if (value2 != null) {
                o2 = value2;
            }
            else {
                final Class<?> forName2 = Class.forName("io.quarkus.jsonb.JsonbProducer", false, contextClassLoader);
                map.put("io.quarkus.jsonb.JsonbProducer", forName2);
                o2 = forName2;
            }
            set2.add(o2);
        }
        catch (final Throwable t2) {
            ComponentsProvider.unableToLoadRemovedBeanType("io.quarkus.jsonb.JsonbProducer", t2);
        }
        list.add(new RemovedBeanImpl((InjectableBean$Kind)null, (String)null, (Set)set2, (Set)null));
        final HashSet<Object> set3 = new HashSet<Object>();
        try {
            final Object value3 = map.get("io.quarkus.arc.runtime.LaunchModeProducer");
            Object o3;
            if (value3 != null) {
                o3 = value3;
            }
            else {
                final Class<?> forName3 = Class.forName("io.quarkus.arc.runtime.LaunchModeProducer", false, contextClassLoader);
                map.put("io.quarkus.arc.runtime.LaunchModeProducer", forName3);
                o3 = forName3;
            }
            set3.add(o3);
        }
        catch (final Throwable t3) {
            ComponentsProvider.unableToLoadRemovedBeanType("io.quarkus.arc.runtime.LaunchModeProducer", t3);
        }
        list.add(new RemovedBeanImpl((InjectableBean$Kind)null, (String)null, (Set)set3, (Set)null));
        final HashSet<Object> set4 = new HashSet<Object>();
        try {
            final Object value4 = map.get("io.quarkus.runtime.LaunchMode");
            Object o4;
            if (value4 != null) {
                o4 = value4;
            }
            else {
                final Class<?> forName4 = Class.forName("io.quarkus.runtime.LaunchMode", false, contextClassLoader);
                map.put("io.quarkus.runtime.LaunchMode", forName4);
                o4 = forName4;
            }
            set4.add(o4);
        }
        catch (final Throwable t4) {
            ComponentsProvider.unableToLoadRemovedBeanType("io.quarkus.runtime.LaunchMode", t4);
        }
        try {
            final Object value5 = map.get("java.io.Serializable");
            Object o5;
            if (value5 != null) {
                o5 = value5;
            }
            else {
                map.put("java.io.Serializable", Serializable.class);
                o5 = Serializable.class;
            }
            set4.add(o5);
        }
        catch (final Throwable t5) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.io.Serializable", t5);
        }
        try {
            final Object value6 = map.get("java.lang.Enum<io.quarkus.runtime.LaunchMode>");
            Object o6;
            if (value6 != null) {
                o6 = value6;
            }
            else {
                final Type[] array = { null };
                final Type value7 = map.get("io.quarkus.runtime.LaunchMode");
                Type type;
                if (value7 != null) {
                    type = value7;
                }
                else {
                    final Class<?> forName5 = Class.forName("io.quarkus.runtime.LaunchMode", false, contextClassLoader);
                    map.put("io.quarkus.runtime.LaunchMode", forName5);
                    type = forName5;
                }
                array[0] = type;
                final ParameterizedTypeImpl parameterizedTypeImpl = new ParameterizedTypeImpl((Type)map.get("java.lang.Enum"), array);
                map.put("java.lang.Enum<io.quarkus.runtime.LaunchMode>", parameterizedTypeImpl);
                o6 = parameterizedTypeImpl;
            }
            set4.add(o6);
        }
        catch (final Throwable t6) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.lang.Enum<io.quarkus.runtime.LaunchMode>", t6);
        }
        try {
            final Object value8 = map.get("java.lang.Comparable<io.quarkus.runtime.LaunchMode>");
            Object o7;
            if (value8 != null) {
                o7 = value8;
            }
            else {
                final Type[] array2 = { null };
                final Type value9 = map.get("io.quarkus.runtime.LaunchMode");
                Type type2;
                if (value9 != null) {
                    type2 = value9;
                }
                else {
                    final Class<?> forName6 = Class.forName("io.quarkus.runtime.LaunchMode", false, contextClassLoader);
                    map.put("io.quarkus.runtime.LaunchMode", forName6);
                    type2 = forName6;
                }
                array2[0] = type2;
                final ParameterizedTypeImpl parameterizedTypeImpl2 = new ParameterizedTypeImpl((Type)map.get("java.lang.Comparable"), array2);
                map.put("java.lang.Comparable<io.quarkus.runtime.LaunchMode>", parameterizedTypeImpl2);
                o7 = parameterizedTypeImpl2;
            }
            set4.add(o7);
        }
        catch (final Throwable t7) {
            ComponentsProvider.unableToLoadRemovedBeanType("java.lang.Comparable<io.quarkus.runtime.LaunchMode>", t7);
        }
        list.add(new RemovedBeanImpl(InjectableBean$Kind.PRODUCER_METHOD, "io.quarkus.arc.runtime.LaunchModeProducer#mode()", (Set)set4, (Set)null));
    }
}
