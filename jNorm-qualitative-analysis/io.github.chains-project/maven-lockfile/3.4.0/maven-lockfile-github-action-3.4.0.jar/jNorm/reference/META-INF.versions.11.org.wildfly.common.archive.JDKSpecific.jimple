final class META-INF.versions.11.org.wildfly.common.archive.JDKSpecific extends java.lang.Object
{
private void <init>()
{
META-INF.versions.11.org.wildfly.common.archive.JDKSpecific v0;
v0 := @this: META-INF.versions.11.org.wildfly.common.archive.JDKSpecific;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static java.nio.ByteBuffer inflate(java.util.zip.Inflater, java.nio.ByteBuffer[], long, int, int) throws java.util.zip.DataFormatException, java.io.IOException
{
byte[] v6;
java.util.zip.Inflater v0;
long v13, v2, v9;
java.nio.ByteBuffer v11, v12, v25;
int v10, v14, v15, v16, v17, v18, v19, v20, v21, v3, v4, v5, v7, v8;
boolean v22, v23;
java.nio.ByteBuffer[] v1;
java.io.IOException v24;
v0 := @parameter0: java.util.zip.Inflater;
v1 := @parameter1: java.nio.ByteBuffer[];
v2 := @parameter2: long;
v3 := @parameter3: int;
v4 := @parameter4: int;
v5 = 0;
v6 = newarray (byte)[v4];
v7 = 0;
label1:
if v5 >= v3 goto label3;
v8 = v3 - v5;
v9 = v2 + v5;
v10 = staticinvoke <org.wildfly.common.archive.Archive: int bufIdx(long)>(v9);
v11 = v1[v10];
v12 = virtualinvoke v11.<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>();
v13 = v2 + v5;
v14 = staticinvoke <org.wildfly.common.archive.Archive: int bufOffs(long)>(v13);
virtualinvoke v12.<java.nio.ByteBuffer: java.nio.ByteBuffer position(int)>(v14);
v15 = virtualinvoke v12.<java.nio.ByteBuffer: int capacity()>();
v16 = virtualinvoke v12.<java.nio.ByteBuffer: int position()>();
v17 = v16 + v8;
v18 = staticinvoke <java.lang.Math: int min(int,int)>(v15, v17);
virtualinvoke v12.<java.nio.ByteBuffer: java.nio.ByteBuffer limit(int)>(v18);
v19 = virtualinvoke v12.<java.nio.ByteBuffer: int remaining()>();
v5 = v5 + v19;
virtualinvoke v0.<java.util.zip.Inflater: void setInput(java.nio.ByteBuffer)>(v12);
label2:
v20 = v4 - v7;
v21 = virtualinvoke v0.<java.util.zip.Inflater: int inflate(byte[],int,int)>(v6, v7, v20);
v7 = v7 + v21;
v22 = virtualinvoke v0.<java.util.zip.Inflater: boolean needsInput()>();
if v22 == 0 goto label2;
goto label1;
label3:
v23 = virtualinvoke v0.<java.util.zip.Inflater: boolean finished()>();
if v23 != 0 goto label4;
v24 = new java.io.IOException;
specialinvoke v24.<java.io.IOException: void <init>(java.lang.String)>("Corrupted compression stream");
throw v24;
label4:
v25 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(v6);
return v25;
}
}