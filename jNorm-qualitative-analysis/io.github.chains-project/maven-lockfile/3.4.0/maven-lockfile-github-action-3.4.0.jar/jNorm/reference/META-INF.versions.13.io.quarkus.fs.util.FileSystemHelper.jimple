public class META-INF.versions.13.io.quarkus.fs.util.FileSystemHelper extends java.lang.Object
{
public void <init>()
{
META-INF.versions.13.io.quarkus.fs.util.FileSystemHelper v0;
v0 := @this: META-INF.versions.13.io.quarkus.fs.util.FileSystemHelper;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.nio.file.FileSystem openFS(java.nio.file.Path, java.util.Map, java.lang.ClassLoader) throws java.io.IOException
{
java.util.Map v1;
java.lang.ClassLoader v2;
java.nio.file.FileSystem v3;
java.nio.file.Path v0;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: java.util.Map;
v2 := @parameter2: java.lang.ClassLoader;
v3 = staticinvoke <java.nio.file.FileSystems: java.nio.file.FileSystem newFileSystem(java.nio.file.Path,java.util.Map,java.lang.ClassLoader)>(v0, v1, v2);
return v3;
}
public static java.nio.file.FileSystem openFS(java.net.URI, java.util.Map, java.lang.ClassLoader) throws java.io.IOException
{
java.util.Map v1;
java.lang.ClassLoader v2;
java.net.URI v0;
java.nio.file.FileSystem v3;
v0 := @parameter0: java.net.URI;
v1 := @parameter1: java.util.Map;
v2 := @parameter2: java.lang.ClassLoader;
v3 = staticinvoke <java.nio.file.FileSystems: java.nio.file.FileSystem newFileSystem(java.net.URI,java.util.Map,java.lang.ClassLoader)>(v0, v1, v2);
return v3;
}
public static java.nio.file.Path ignoreFileWriteability(java.nio.file.Path)
{
io.quarkus.fs.util.sysfs.ConfigurableFileSystemProviderWrapper v1;
java.util.Set v5;
java.nio.file.FileSystem v2, v7;
java.nio.file.spi.FileSystemProvider v3;
java.nio.file.AccessMode v4;
io.quarkus.fs.util.sysfs.FileSystemWrapper v6;
io.quarkus.fs.util.sysfs.PathWrapper v8;
java.nio.file.Path v0;
v0 := @parameter0: java.nio.file.Path;
v1 = new io.quarkus.fs.util.sysfs.ConfigurableFileSystemProviderWrapper;
v2 = interfaceinvoke v0.<java.nio.file.Path: java.nio.file.FileSystem getFileSystem()>();
v3 = virtualinvoke v2.<java.nio.file.FileSystem: java.nio.file.spi.FileSystemProvider provider()>();
v4 = <java.nio.file.AccessMode: java.nio.file.AccessMode WRITE>;
v5 = staticinvoke <java.util.Set: java.util.Set of(java.lang.Object)>(v4);
specialinvoke v1.<io.quarkus.fs.util.sysfs.ConfigurableFileSystemProviderWrapper: void <init>(java.nio.file.spi.FileSystemProvider,java.util.Set)>(v3, v5);
v6 = new io.quarkus.fs.util.sysfs.FileSystemWrapper;
v7 = interfaceinvoke v0.<java.nio.file.Path: java.nio.file.FileSystem getFileSystem()>();
specialinvoke v6.<io.quarkus.fs.util.sysfs.FileSystemWrapper: void <init>(java.nio.file.FileSystem,java.nio.file.spi.FileSystemProvider)>(v7, v1);
v8 = new io.quarkus.fs.util.sysfs.PathWrapper;
specialinvoke v8.<io.quarkus.fs.util.sysfs.PathWrapper: void <init>(java.nio.file.Path,java.nio.file.FileSystem)>(v0, v6);
return v8;
}
}