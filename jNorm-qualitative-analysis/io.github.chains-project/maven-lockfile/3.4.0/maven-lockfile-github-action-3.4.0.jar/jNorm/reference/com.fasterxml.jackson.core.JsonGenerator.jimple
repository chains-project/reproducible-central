public abstract class com.fasterxml.jackson.core.JsonGenerator extends java.lang.Object implements java.io.Closeable, java.io.Flushable, com.fasterxml.jackson.core.Versioned
{
protected static final com.fasterxml.jackson.core.util.JacksonFeatureSet DEFAULT_WRITE_CAPABILITIES;
protected static final com.fasterxml.jackson.core.util.JacksonFeatureSet DEFAULT_TEXTUAL_WRITE_CAPABILITIES;
protected static final com.fasterxml.jackson.core.util.JacksonFeatureSet DEFAULT_BINARY_WRITE_CAPABILITIES;
protected com.fasterxml.jackson.core.PrettyPrinter _cfgPrettyPrinter;
protected void <init>()
{
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public abstract com.fasterxml.jackson.core.JsonGenerator setCodec(com.fasterxml.jackson.core.ObjectCodec);
public abstract com.fasterxml.jackson.core.ObjectCodec getCodec();
public abstract com.fasterxml.jackson.core.Version version();
public abstract com.fasterxml.jackson.core.JsonStreamContext getOutputContext();
public java.lang.Object getOutputTarget()
{
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
return null;
}
public java.lang.Object currentValue()
{
java.lang.Object v1;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: java.lang.Object getCurrentValue()>();
return v1;
}
public void assignCurrentValue(java.lang.Object)
{
java.lang.Object v1;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: java.lang.Object;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void setCurrentValue(java.lang.Object)>(v1);
return;
}
public java.lang.Object getCurrentValue()
{
com.fasterxml.jackson.core.JsonStreamContext v1;
java.lang.Object v2;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonStreamContext getOutputContext()>();
if v1 != null goto label1;
v2 = null;
goto label2;
label1:
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonStreamContext: java.lang.Object getCurrentValue()>();
label2:
return v2;
}
public void setCurrentValue(java.lang.Object)
{
com.fasterxml.jackson.core.JsonStreamContext v2;
java.lang.Object v1;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonStreamContext getOutputContext()>();
if v2 == null goto label1;
virtualinvoke v2.<com.fasterxml.jackson.core.JsonStreamContext: void setCurrentValue(java.lang.Object)>(v1);
label1:
return;
}
public abstract com.fasterxml.jackson.core.JsonGenerator enable(com.fasterxml.jackson.core.JsonGenerator$Feature);
public abstract com.fasterxml.jackson.core.JsonGenerator disable(com.fasterxml.jackson.core.JsonGenerator$Feature);
public final com.fasterxml.jackson.core.JsonGenerator configure(com.fasterxml.jackson.core.JsonGenerator$Feature, boolean)
{
com.fasterxml.jackson.core.JsonGenerator$Feature v1;
com.fasterxml.jackson.core.JsonGenerator v0;
boolean v2;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: com.fasterxml.jackson.core.JsonGenerator$Feature;
v2 := @parameter1: boolean;
if v2 == 0 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonGenerator enable(com.fasterxml.jackson.core.JsonGenerator$Feature)>(v1);
goto label2;
label1:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonGenerator disable(com.fasterxml.jackson.core.JsonGenerator$Feature)>(v1);
label2:
return v0;
}
public abstract boolean isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature);
public boolean isEnabled(com.fasterxml.jackson.core.StreamWriteFeature)
{
com.fasterxml.jackson.core.JsonGenerator$Feature v2;
com.fasterxml.jackson.core.JsonGenerator v0;
com.fasterxml.jackson.core.StreamWriteFeature v1;
boolean v3;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: com.fasterxml.jackson.core.StreamWriteFeature;
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.StreamWriteFeature: com.fasterxml.jackson.core.JsonGenerator$Feature mappedFeature()>();
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: boolean isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature)>(v2);
return v3;
}
public abstract int getFeatureMask();
public abstract com.fasterxml.jackson.core.JsonGenerator setFeatureMask(int);
public com.fasterxml.jackson.core.JsonGenerator overrideStdFeatures(int, int)
{
com.fasterxml.jackson.core.JsonGenerator v0, v9;
int v1, v2, v3, v4, v5, v6, v7, v8;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: int getFeatureMask()>();
v4 = (int) -1;
v5 = v2 ^ v4;
v6 = v3 & v5;
v7 = v1 & v2;
v8 = v6 | v7;
v9 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonGenerator setFeatureMask(int)>(v8);
return v9;
}
public int getFormatFeatures()
{
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
return 0;
}
public com.fasterxml.jackson.core.JsonGenerator overrideFormatFeatures(int, int)
{
int v1, v2;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: int;
v2 := @parameter1: int;
return v0;
}
public void setSchema(com.fasterxml.jackson.core.FormatSchema)
{
java.lang.UnsupportedOperationException v2;
java.lang.Object[] v3;
com.fasterxml.jackson.core.JsonGenerator v0;
com.fasterxml.jackson.core.FormatSchema v1;
java.lang.Class v4;
java.lang.String v5, v6, v7;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: com.fasterxml.jackson.core.FormatSchema;
v2 = new java.lang.UnsupportedOperationException;
v3 = newarray (java.lang.Object)[2];
v4 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v5 = virtualinvoke v4.<java.lang.Class: java.lang.String getName()>();
v3[0] = v5;
v6 = interfaceinvoke v1.<com.fasterxml.jackson.core.FormatSchema: java.lang.String getSchemaType()>();
v3[1] = v6;
v7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Generator of type %s does not support schema of type \'%s\'", v3);
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(v7);
throw v2;
}
public com.fasterxml.jackson.core.FormatSchema getSchema()
{
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
return null;
}
public com.fasterxml.jackson.core.JsonGenerator setPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)
{
com.fasterxml.jackson.core.PrettyPrinter v1;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: com.fasterxml.jackson.core.PrettyPrinter;
v0.<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.PrettyPrinter _cfgPrettyPrinter> = v1;
return v0;
}
public com.fasterxml.jackson.core.PrettyPrinter getPrettyPrinter()
{
com.fasterxml.jackson.core.PrettyPrinter v1;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 = v0.<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.PrettyPrinter _cfgPrettyPrinter>;
return v1;
}
public abstract com.fasterxml.jackson.core.JsonGenerator useDefaultPrettyPrinter();
public com.fasterxml.jackson.core.JsonGenerator setHighestNonEscapedChar(int)
{
int v1;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: int;
return v0;
}
public int getHighestEscapedChar()
{
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
return 0;
}
public com.fasterxml.jackson.core.io.CharacterEscapes getCharacterEscapes()
{
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
return null;
}
public com.fasterxml.jackson.core.JsonGenerator setCharacterEscapes(com.fasterxml.jackson.core.io.CharacterEscapes)
{
com.fasterxml.jackson.core.JsonGenerator v0;
com.fasterxml.jackson.core.io.CharacterEscapes v1;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: com.fasterxml.jackson.core.io.CharacterEscapes;
return v0;
}
public com.fasterxml.jackson.core.JsonGenerator setRootValueSeparator(com.fasterxml.jackson.core.SerializableString)
{
java.lang.UnsupportedOperationException v2;
com.fasterxml.jackson.core.JsonGenerator v0;
com.fasterxml.jackson.core.SerializableString v1;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: com.fasterxml.jackson.core.SerializableString;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public int getOutputBuffered()
{
int v1;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 = (int) -1;
return v1;
}
public boolean canUseSchema(com.fasterxml.jackson.core.FormatSchema)
{
com.fasterxml.jackson.core.FormatSchema v1;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: com.fasterxml.jackson.core.FormatSchema;
return 0;
}
public boolean canWriteObjectId()
{
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
return 0;
}
public boolean canWriteTypeId()
{
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
return 0;
}
public boolean canWriteBinaryNatively()
{
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
return 0;
}
public boolean canOmitFields()
{
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
return 1;
}
public boolean canWriteFormattedNumbers()
{
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
return 0;
}
public com.fasterxml.jackson.core.util.JacksonFeatureSet getWriteCapabilities()
{
com.fasterxml.jackson.core.util.JacksonFeatureSet v1;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 = <com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.util.JacksonFeatureSet DEFAULT_WRITE_CAPABILITIES>;
return v1;
}
public abstract void writeStartArray() throws java.io.IOException;
public void writeStartArray(int) throws java.io.IOException
{
int v1;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: int;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartArray()>();
return;
}
public void writeStartArray(java.lang.Object) throws java.io.IOException
{
java.lang.Object v1;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: java.lang.Object;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartArray()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void setCurrentValue(java.lang.Object)>(v1);
return;
}
public void writeStartArray(java.lang.Object, int) throws java.io.IOException
{
int v2;
java.lang.Object v1;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: int;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartArray(int)>(v2);
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void setCurrentValue(java.lang.Object)>(v1);
return;
}
public abstract void writeEndArray() throws java.io.IOException;
public abstract void writeStartObject() throws java.io.IOException;
public void writeStartObject(java.lang.Object) throws java.io.IOException
{
java.lang.Object v1;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: java.lang.Object;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartObject()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void setCurrentValue(java.lang.Object)>(v1);
return;
}
public void writeStartObject(java.lang.Object, int) throws java.io.IOException
{
int v2;
java.lang.Object v1;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: int;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartObject(java.lang.Object)>(v1);
return;
}
public abstract void writeEndObject() throws java.io.IOException;
public abstract void writeFieldName(java.lang.String) throws java.io.IOException;
public abstract void writeFieldName(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException;
public void writeFieldId(long) throws java.io.IOException
{
long v1;
java.lang.String v2;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: long;
v2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(v1);
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(v2);
return;
}
public void writeArray(int[], int, int) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonGenerator v0;
java.lang.IllegalArgumentException v4;
int[] v1;
int v2, v3, v5, v6, v7, v8;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: int[];
v2 := @parameter1: int;
v3 := @parameter2: int;
if v1 != null goto label1;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null array");
throw v4;
label1:
v5 = lengthof v1;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void _verifyOffsets(int,int,int)>(v5, v2, v3);
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartArray(java.lang.Object,int)>(v1, v3);
v6 = v2;
v7 = v2 + v3;
label2:
if v6 >= v7 goto label3;
v8 = v1[v6];
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(int)>(v8);
v6 = v6 + 1;
goto label2;
label3:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>();
return;
}
public void writeArray(long[], int, int) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonGenerator v0;
long v8;
java.lang.IllegalArgumentException v4;
long[] v1;
int v2, v3, v5, v6, v7;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: long[];
v2 := @parameter1: int;
v3 := @parameter2: int;
if v1 != null goto label1;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null array");
throw v4;
label1:
v5 = lengthof v1;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void _verifyOffsets(int,int,int)>(v5, v2, v3);
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartArray(java.lang.Object,int)>(v1, v3);
v6 = v2;
v7 = v2 + v3;
label2:
if v6 >= v7 goto label3;
v8 = v1[v6];
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(long)>(v8);
v6 = v6 + 1;
goto label2;
label3:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>();
return;
}
public void writeArray(double[], int, int) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonGenerator v0;
double[] v1;
java.lang.IllegalArgumentException v4;
int v2, v3, v5, v6, v7;
double v8;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: double[];
v2 := @parameter1: int;
v3 := @parameter2: int;
if v1 != null goto label1;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null array");
throw v4;
label1:
v5 = lengthof v1;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void _verifyOffsets(int,int,int)>(v5, v2, v3);
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartArray(java.lang.Object,int)>(v1, v3);
v6 = v2;
v7 = v2 + v3;
label2:
if v6 >= v7 goto label3;
v8 = v1[v6];
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(double)>(v8);
v6 = v6 + 1;
goto label2;
label3:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>();
return;
}
public void writeArray(java.lang.String[], int, int) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonGenerator v0;
java.lang.String[] v1;
java.lang.IllegalArgumentException v4;
int v2, v3, v5, v6, v7;
java.lang.String v8;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: java.lang.String[];
v2 := @parameter1: int;
v3 := @parameter2: int;
if v1 != null goto label1;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null array");
throw v4;
label1:
v5 = lengthof v1;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void _verifyOffsets(int,int,int)>(v5, v2, v3);
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartArray(java.lang.Object,int)>(v1, v3);
v6 = v2;
v7 = v2 + v3;
label2:
if v6 >= v7 goto label3;
v8 = v1[v6];
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>(v8);
v6 = v6 + 1;
goto label2;
label3:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>();
return;
}
public abstract void writeString(java.lang.String) throws java.io.IOException;
public void writeString(java.io.Reader, int) throws java.io.IOException
{
int v2;
java.io.Reader v1;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: java.io.Reader;
v2 := @parameter1: int;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void _reportUnsupportedOperation()>();
return;
}
public abstract void writeString(char[], int, int) throws java.io.IOException;
public abstract void writeString(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException;
public abstract void writeRawUTF8String(byte[], int, int) throws java.io.IOException;
public abstract void writeUTF8String(byte[], int, int) throws java.io.IOException;
public abstract void writeRaw(java.lang.String) throws java.io.IOException;
public abstract void writeRaw(java.lang.String, int, int) throws java.io.IOException;
public abstract void writeRaw(char[], int, int) throws java.io.IOException;
public abstract void writeRaw(char) throws java.io.IOException;
public void writeRaw(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException
{
java.lang.String v2;
com.fasterxml.jackson.core.JsonGenerator v0;
com.fasterxml.jackson.core.SerializableString v1;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: com.fasterxml.jackson.core.SerializableString;
v2 = interfaceinvoke v1.<com.fasterxml.jackson.core.SerializableString: java.lang.String getValue()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeRaw(java.lang.String)>(v2);
return;
}
public abstract void writeRawValue(java.lang.String) throws java.io.IOException;
public abstract void writeRawValue(java.lang.String, int, int) throws java.io.IOException;
public abstract void writeRawValue(char[], int, int) throws java.io.IOException;
public void writeRawValue(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException
{
java.lang.String v2;
com.fasterxml.jackson.core.JsonGenerator v0;
com.fasterxml.jackson.core.SerializableString v1;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: com.fasterxml.jackson.core.SerializableString;
v2 = interfaceinvoke v1.<com.fasterxml.jackson.core.SerializableString: java.lang.String getValue()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeRawValue(java.lang.String)>(v2);
return;
}
public abstract void writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int) throws java.io.IOException;
public void writeBinary(byte[], int, int) throws java.io.IOException
{
com.fasterxml.jackson.core.Base64Variant v4;
byte[] v1;
com.fasterxml.jackson.core.JsonGenerator v0;
int v2, v3;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = staticinvoke <com.fasterxml.jackson.core.Base64Variants: com.fasterxml.jackson.core.Base64Variant getDefaultVariant()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)>(v4, v1, v2, v3);
return;
}
public void writeBinary(byte[]) throws java.io.IOException
{
com.fasterxml.jackson.core.Base64Variant v2;
byte[] v1;
com.fasterxml.jackson.core.JsonGenerator v0;
int v3;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: byte[];
v2 = staticinvoke <com.fasterxml.jackson.core.Base64Variants: com.fasterxml.jackson.core.Base64Variant getDefaultVariant()>();
v3 = lengthof v1;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)>(v2, v1, 0, v3);
return;
}
public int writeBinary(java.io.InputStream, int) throws java.io.IOException
{
com.fasterxml.jackson.core.Base64Variant v3;
com.fasterxml.jackson.core.JsonGenerator v0;
int v2, v4;
java.io.InputStream v1;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: java.io.InputStream;
v2 := @parameter1: int;
v3 = staticinvoke <com.fasterxml.jackson.core.Base64Variants: com.fasterxml.jackson.core.Base64Variant getDefaultVariant()>();
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: int writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)>(v3, v1, v2);
return v4;
}
public abstract int writeBinary(com.fasterxml.jackson.core.Base64Variant, java.io.InputStream, int) throws java.io.IOException;
public void writeNumber(short) throws java.io.IOException
{
short v1;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: short;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(int)>(v1);
return;
}
public abstract void writeNumber(int) throws java.io.IOException;
public abstract void writeNumber(long) throws java.io.IOException;
public abstract void writeNumber(java.math.BigInteger) throws java.io.IOException;
public abstract void writeNumber(double) throws java.io.IOException;
public abstract void writeNumber(float) throws java.io.IOException;
public abstract void writeNumber(java.math.BigDecimal) throws java.io.IOException;
public abstract void writeNumber(java.lang.String) throws java.io.IOException;
public void writeNumber(char[], int, int) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonGenerator v0;
int v2, v3;
char[] v1;
java.lang.String v4;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = new java.lang.String;
specialinvoke v4.<java.lang.String: void <init>(char[],int,int)>(v1, v2, v3);
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(java.lang.String)>(v4);
return;
}
public abstract void writeBoolean(boolean) throws java.io.IOException;
public abstract void writeNull() throws java.io.IOException;
public void writeEmbeddedObject(java.lang.Object) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonGenerator v0;
com.fasterxml.jackson.core.JsonGenerationException v3;
java.lang.Class v4;
java.lang.Object v1;
java.lang.String v5, v6;
boolean v2;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: java.lang.Object;
if v1 != null goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNull()>();
return;
label1:
v2 = v1 instanceof byte[];
if v2 == 0 goto label2;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeBinary(byte[])>(v1);
return;
label2:
v3 = new com.fasterxml.jackson.core.JsonGenerationException;
v4 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v5 = virtualinvoke v4.<java.lang.Class: java.lang.String getName()>();
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("No native support for writing embedded objects of type \u0001");
specialinvoke v3.<com.fasterxml.jackson.core.JsonGenerationException: void <init>(java.lang.String,com.fasterxml.jackson.core.JsonGenerator)>(v6, v0);
throw v3;
}
public void writeObjectId(java.lang.Object) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonGenerationException v2;
java.lang.Object v1;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: java.lang.Object;
v2 = new com.fasterxml.jackson.core.JsonGenerationException;
specialinvoke v2.<com.fasterxml.jackson.core.JsonGenerationException: void <init>(java.lang.String,com.fasterxml.jackson.core.JsonGenerator)>("No native support for writing Object Ids", v0);
throw v2;
}
public void writeObjectRef(java.lang.Object) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonGenerationException v2;
java.lang.Object v1;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: java.lang.Object;
v2 = new com.fasterxml.jackson.core.JsonGenerationException;
specialinvoke v2.<com.fasterxml.jackson.core.JsonGenerationException: void <init>(java.lang.String,com.fasterxml.jackson.core.JsonGenerator)>("No native support for writing Object Ids", v0);
throw v2;
}
public void writeTypeId(java.lang.Object) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonGenerationException v2;
java.lang.Object v1;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: java.lang.Object;
v2 = new com.fasterxml.jackson.core.JsonGenerationException;
specialinvoke v2.<com.fasterxml.jackson.core.JsonGenerationException: void <init>(java.lang.String,com.fasterxml.jackson.core.JsonGenerator)>("No native support for writing Type Ids", v0);
throw v2;
}
public com.fasterxml.jackson.core.type.WritableTypeId writeTypePrefix(com.fasterxml.jackson.core.type.WritableTypeId) throws java.io.IOException
{
com.fasterxml.jackson.core.type.WritableTypeId$Inclusion v10, v7;
com.fasterxml.jackson.core.JsonGenerator v0;
int[] v11;
int v12, v13;
com.fasterxml.jackson.core.JsonToken v16, v18, v3, v8;
java.lang.String v15, v6;
boolean v4, v5, v9;
com.fasterxml.jackson.core.type.WritableTypeId v1;
java.lang.Object v14, v17, v2;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: com.fasterxml.jackson.core.type.WritableTypeId;
v2 = v1.<com.fasterxml.jackson.core.type.WritableTypeId: java.lang.Object id>;
v3 = v1.<com.fasterxml.jackson.core.type.WritableTypeId: com.fasterxml.jackson.core.JsonToken valueShape>;
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: boolean canWriteTypeId()>();
if v4 == 0 goto label1;
v1.<com.fasterxml.jackson.core.type.WritableTypeId: boolean wrapperWritten> = 0;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeTypeId(java.lang.Object)>(v2);
goto label7;
label1:
v5 = v2 instanceof java.lang.String;
if v5 != 0 goto label2;
v2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(v2);
label2:
v6 = v2;
v1.<com.fasterxml.jackson.core.type.WritableTypeId: boolean wrapperWritten> = 1;
v7 = v1.<com.fasterxml.jackson.core.type.WritableTypeId: com.fasterxml.jackson.core.type.WritableTypeId$Inclusion include>;
v8 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
if v3 == v8 goto label3;
v9 = virtualinvoke v7.<com.fasterxml.jackson.core.type.WritableTypeId$Inclusion: boolean requiresObjectContext()>();
if v9 == 0 goto label3;
v10 = <com.fasterxml.jackson.core.type.WritableTypeId$Inclusion: com.fasterxml.jackson.core.type.WritableTypeId$Inclusion WRAPPER_ARRAY>;
v7 = v10;
v1.<com.fasterxml.jackson.core.type.WritableTypeId: com.fasterxml.jackson.core.type.WritableTypeId$Inclusion include> = v10;
label3:
v11 = <com.fasterxml.jackson.core.JsonGenerator$1: int[] $SwitchMap$com$fasterxml$jackson$core$type$WritableTypeId$Inclusion>;
v12 = virtualinvoke v7.<com.fasterxml.jackson.core.type.WritableTypeId$Inclusion: int ordinal()>();
v13 = v11[v12];
tableswitch(v13)
{
case 1: goto label7;
case 2: goto label7;
case 3: goto label4;
case 4: goto label5;
case 5: goto label6;
default: goto label6;
};
label4:
v14 = v1.<com.fasterxml.jackson.core.type.WritableTypeId: java.lang.Object forValue>;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartObject(java.lang.Object)>(v14);
v15 = v1.<com.fasterxml.jackson.core.type.WritableTypeId: java.lang.String asProperty>;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeStringField(java.lang.String,java.lang.String)>(v15, v6);
return v1;
label5:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartObject()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(v6);
goto label7;
label6:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartArray()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>(v6);
label7:
v16 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
if v3 != v16 goto label8;
v17 = v1.<com.fasterxml.jackson.core.type.WritableTypeId: java.lang.Object forValue>;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartObject(java.lang.Object)>(v17);
goto label9;
label8:
v18 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
if v3 != v18 goto label9;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartArray()>();
label9:
return v1;
}
public com.fasterxml.jackson.core.type.WritableTypeId writeTypeSuffix(com.fasterxml.jackson.core.type.WritableTypeId) throws java.io.IOException
{
com.fasterxml.jackson.core.type.WritableTypeId$Inclusion v7;
com.fasterxml.jackson.core.JsonGenerator v0;
com.fasterxml.jackson.core.type.WritableTypeId v1;
int[] v6;
int v8, v9;
java.lang.Object v10;
com.fasterxml.jackson.core.JsonToken v2, v3, v4;
java.lang.String v12;
boolean v11, v5;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: com.fasterxml.jackson.core.type.WritableTypeId;
v2 = v1.<com.fasterxml.jackson.core.type.WritableTypeId: com.fasterxml.jackson.core.JsonToken valueShape>;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
if v2 != v3 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>();
goto label2;
label1:
v4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
if v2 != v4 goto label2;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>();
label2:
v5 = v1.<com.fasterxml.jackson.core.type.WritableTypeId: boolean wrapperWritten>;
if v5 == 0 goto label7;
v6 = <com.fasterxml.jackson.core.JsonGenerator$1: int[] $SwitchMap$com$fasterxml$jackson$core$type$WritableTypeId$Inclusion>;
v7 = v1.<com.fasterxml.jackson.core.type.WritableTypeId: com.fasterxml.jackson.core.type.WritableTypeId$Inclusion include>;
v8 = virtualinvoke v7.<com.fasterxml.jackson.core.type.WritableTypeId$Inclusion: int ordinal()>();
v9 = v6[v8];
tableswitch(v9)
{
case 1: goto label4;
case 2: goto label7;
case 3: goto label7;
case 4: goto label6;
case 5: goto label3;
default: goto label6;
};
label3:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>();
goto label7;
label4:
v10 = v1.<com.fasterxml.jackson.core.type.WritableTypeId: java.lang.Object id>;
v11 = v10 instanceof java.lang.String;
if v11 != 0 goto label5;
v10 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(v10);
label5:
v12 = v1.<com.fasterxml.jackson.core.type.WritableTypeId: java.lang.String asProperty>;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeStringField(java.lang.String,java.lang.String)>(v12, v10);
goto label7;
label6:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>();
label7:
return v1;
}
public void writePOJO(java.lang.Object) throws java.io.IOException
{
java.lang.Object v1;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: java.lang.Object;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeObject(java.lang.Object)>(v1);
return;
}
public abstract void writeObject(java.lang.Object) throws java.io.IOException;
public abstract void writeTree(com.fasterxml.jackson.core.TreeNode) throws java.io.IOException;
public void writeBinaryField(java.lang.String, byte[]) throws java.io.IOException
{
byte[] v2;
java.lang.String v1;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: byte[];
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(v1);
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeBinary(byte[])>(v2);
return;
}
public void writeBooleanField(java.lang.String, boolean) throws java.io.IOException
{
java.lang.String v1;
com.fasterxml.jackson.core.JsonGenerator v0;
boolean v2;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(v1);
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeBoolean(boolean)>(v2);
return;
}
public void writeNullField(java.lang.String) throws java.io.IOException
{
java.lang.String v1;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: java.lang.String;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(v1);
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNull()>();
return;
}
public void writeStringField(java.lang.String, java.lang.String) throws java.io.IOException
{
java.lang.String v1, v2;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(v1);
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>(v2);
return;
}
public void writeNumberField(java.lang.String, short) throws java.io.IOException
{
short v2;
java.lang.String v1;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: short;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(v1);
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(short)>(v2);
return;
}
public void writeNumberField(java.lang.String, int) throws java.io.IOException
{
int v2;
java.lang.String v1;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(v1);
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(int)>(v2);
return;
}
public void writeNumberField(java.lang.String, long) throws java.io.IOException
{
long v2;
java.lang.String v1;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(v1);
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(long)>(v2);
return;
}
public void writeNumberField(java.lang.String, java.math.BigInteger) throws java.io.IOException
{
java.math.BigInteger v2;
java.lang.String v1;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.math.BigInteger;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(v1);
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(java.math.BigInteger)>(v2);
return;
}
public void writeNumberField(java.lang.String, float) throws java.io.IOException
{
float v2;
java.lang.String v1;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: float;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(v1);
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(float)>(v2);
return;
}
public void writeNumberField(java.lang.String, double) throws java.io.IOException
{
java.lang.String v1;
com.fasterxml.jackson.core.JsonGenerator v0;
double v2;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: double;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(v1);
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(double)>(v2);
return;
}
public void writeNumberField(java.lang.String, java.math.BigDecimal) throws java.io.IOException
{
java.math.BigDecimal v2;
java.lang.String v1;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.math.BigDecimal;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(v1);
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(java.math.BigDecimal)>(v2);
return;
}
public void writeArrayFieldStart(java.lang.String) throws java.io.IOException
{
java.lang.String v1;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: java.lang.String;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(v1);
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartArray()>();
return;
}
public void writeObjectFieldStart(java.lang.String) throws java.io.IOException
{
java.lang.String v1;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: java.lang.String;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(v1);
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartObject()>();
return;
}
public void writePOJOField(java.lang.String, java.lang.Object) throws java.io.IOException
{
java.lang.Object v2;
java.lang.String v1;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeObjectField(java.lang.String,java.lang.Object)>(v1, v2);
return;
}
public void writeObjectField(java.lang.String, java.lang.Object) throws java.io.IOException
{
java.lang.Object v2;
java.lang.String v1;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(v1);
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeObject(java.lang.Object)>(v2);
return;
}
public void writeOmittedField(java.lang.String) throws java.io.IOException
{
java.lang.String v1;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: java.lang.String;
return;
}
public void copyCurrentEvent(com.fasterxml.jackson.core.JsonParser) throws java.io.IOException
{
java.lang.IllegalStateException v7;
com.fasterxml.jackson.core.JsonParser v1;
com.fasterxml.jackson.core.JsonGenerator v0;
int v3, v4;
java.lang.Object v6;
com.fasterxml.jackson.core.JsonToken v2;
java.lang.String v5, v8;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: com.fasterxml.jackson.core.JsonParser;
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken currentToken()>();
if v2 != null goto label01;
v3 = (int) -1;
v4 = v3;
goto label02;
label01:
v4 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonToken: int id()>();
label02:
tableswitch(v4)
{
case -1: goto label03;
case 0: goto label16;
case 1: goto label04;
case 2: goto label05;
case 3: goto label06;
case 4: goto label07;
case 5: goto label08;
case 6: goto label09;
case 7: goto label10;
case 8: goto label11;
case 9: goto label12;
case 10: goto label13;
case 11: goto label14;
case 12: goto label15;
default: goto label16;
};
label03:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void _reportError(java.lang.String)>("No current event to copy");
goto label17;
label04:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartObject()>();
goto label17;
label05:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>();
goto label17;
label06:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartArray()>();
goto label17;
label07:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>();
goto label17;
label08:
v5 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonParser: java.lang.String getCurrentName()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(v5);
goto label17;
label09:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void _copyCurrentStringValue(com.fasterxml.jackson.core.JsonParser)>(v1);
goto label17;
label10:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void _copyCurrentIntValue(com.fasterxml.jackson.core.JsonParser)>(v1);
goto label17;
label11:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void _copyCurrentFloatValue(com.fasterxml.jackson.core.JsonParser)>(v1);
goto label17;
label12:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeBoolean(boolean)>(1);
goto label17;
label13:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeBoolean(boolean)>(0);
goto label17;
label14:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNull()>();
goto label17;
label15:
v6 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonParser: java.lang.Object getEmbeddedObject()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeObject(java.lang.Object)>(v6);
goto label17;
label16:
v7 = new java.lang.IllegalStateException;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (com.fasterxml.jackson.core.JsonToken)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Internal error: unknown current token, \u0001");
specialinvoke v7.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v8);
throw v7;
label17:
return;
}
public void copyCurrentEventExact(com.fasterxml.jackson.core.JsonParser) throws java.io.IOException
{
java.lang.IllegalStateException v7;
com.fasterxml.jackson.core.JsonParser v1;
com.fasterxml.jackson.core.JsonGenerator v0;
int v3, v4;
java.lang.Object v6;
com.fasterxml.jackson.core.JsonToken v2;
java.lang.String v5, v8;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: com.fasterxml.jackson.core.JsonParser;
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken currentToken()>();
if v2 != null goto label01;
v3 = (int) -1;
v4 = v3;
goto label02;
label01:
v4 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonToken: int id()>();
label02:
tableswitch(v4)
{
case -1: goto label03;
case 0: goto label16;
case 1: goto label04;
case 2: goto label05;
case 3: goto label06;
case 4: goto label07;
case 5: goto label08;
case 6: goto label09;
case 7: goto label10;
case 8: goto label11;
case 9: goto label12;
case 10: goto label13;
case 11: goto label14;
case 12: goto label15;
default: goto label16;
};
label03:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void _reportError(java.lang.String)>("No current event to copy");
goto label17;
label04:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartObject()>();
goto label17;
label05:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>();
goto label17;
label06:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartArray()>();
goto label17;
label07:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>();
goto label17;
label08:
v5 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonParser: java.lang.String getCurrentName()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(v5);
goto label17;
label09:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void _copyCurrentStringValue(com.fasterxml.jackson.core.JsonParser)>(v1);
goto label17;
label10:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void _copyCurrentIntValue(com.fasterxml.jackson.core.JsonParser)>(v1);
goto label17;
label11:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void _copyCurrentFloatValueExact(com.fasterxml.jackson.core.JsonParser)>(v1);
goto label17;
label12:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeBoolean(boolean)>(1);
goto label17;
label13:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeBoolean(boolean)>(0);
goto label17;
label14:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNull()>();
goto label17;
label15:
v6 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonParser: java.lang.Object getEmbeddedObject()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeObject(java.lang.Object)>(v6);
goto label17;
label16:
v7 = new java.lang.IllegalStateException;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (com.fasterxml.jackson.core.JsonToken)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Internal error: unknown current token, \u0001");
specialinvoke v7.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v8);
throw v7;
label17:
return;
}
public void copyCurrentStructure(com.fasterxml.jackson.core.JsonParser) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser v1;
com.fasterxml.jackson.core.JsonGenerator v0;
int v3, v4, v5, v8, v9;
com.fasterxml.jackson.core.JsonToken v2, v7;
java.lang.String v6;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: com.fasterxml.jackson.core.JsonParser;
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken currentToken()>();
if v2 != null goto label1;
v3 = (int) -1;
v4 = v3;
goto label2;
label1:
v4 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonToken: int id()>();
label2:
v5 = v4;
if v4 != 5 goto label5;
v6 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonParser: java.lang.String getCurrentName()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(v6);
v7 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>();
if v7 != null goto label3;
v8 = (int) -1;
v9 = v8;
goto label4;
label3:
v9 = virtualinvoke v7.<com.fasterxml.jackson.core.JsonToken: int id()>();
label4:
v5 = v9;
label5:
lookupswitch(v5)
{
case 1: goto label6;
case 3: goto label7;
default: goto label8;
};
label6:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartObject()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void _copyCurrentContents(com.fasterxml.jackson.core.JsonParser)>(v1);
return;
label7:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartArray()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void _copyCurrentContents(com.fasterxml.jackson.core.JsonParser)>(v1);
return;
label8:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void copyCurrentEvent(com.fasterxml.jackson.core.JsonParser)>(v1);
return;
}
protected void _copyCurrentContents(com.fasterxml.jackson.core.JsonParser) throws java.io.IOException
{
java.lang.IllegalStateException v7;
com.fasterxml.jackson.core.JsonParser v1;
com.fasterxml.jackson.core.JsonGenerator v0;
int v2, v4;
java.lang.Object v6;
com.fasterxml.jackson.core.JsonToken v3;
java.lang.String v5, v8;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: com.fasterxml.jackson.core.JsonParser;
v2 = 1;
label01:
v3 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>();
if v3 == null goto label15;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.JsonToken: int id()>();
tableswitch(v4)
{
case 1: goto label04;
case 2: goto label06;
case 3: goto label03;
case 4: goto label05;
case 5: goto label02;
case 6: goto label07;
case 7: goto label08;
case 8: goto label09;
case 9: goto label10;
case 10: goto label11;
case 11: goto label12;
case 12: goto label13;
default: goto label14;
};
label02:
v5 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonParser: java.lang.String getCurrentName()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeFieldName(java.lang.String)>(v5);
goto label01;
label03:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartArray()>();
v2 = v2 + 1;
goto label01;
label04:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeStartObject()>();
v2 = v2 + 1;
goto label01;
label05:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>();
v2 = v2 - 1;
if v2 != 0 goto label01;
return;
label06:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeEndObject()>();
v2 = v2 - 1;
if v2 != 0 goto label01;
return;
label07:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void _copyCurrentStringValue(com.fasterxml.jackson.core.JsonParser)>(v1);
goto label01;
label08:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void _copyCurrentIntValue(com.fasterxml.jackson.core.JsonParser)>(v1);
goto label01;
label09:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void _copyCurrentFloatValue(com.fasterxml.jackson.core.JsonParser)>(v1);
goto label01;
label10:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeBoolean(boolean)>(1);
goto label01;
label11:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeBoolean(boolean)>(0);
goto label01;
label12:
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNull()>();
goto label01;
label13:
v6 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonParser: java.lang.Object getEmbeddedObject()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeObject(java.lang.Object)>(v6);
goto label01;
label14:
v7 = new java.lang.IllegalStateException;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (com.fasterxml.jackson.core.JsonToken)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Internal error: unknown current token, \u0001");
specialinvoke v7.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v8);
throw v7;
label15:
return;
}
protected void _copyCurrentFloatValue(com.fasterxml.jackson.core.JsonParser) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser$NumberType v2, v3, v5;
com.fasterxml.jackson.core.JsonParser v1;
com.fasterxml.jackson.core.JsonGenerator v0;
java.math.BigDecimal v4;
float v6;
double v7;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: com.fasterxml.jackson.core.JsonParser;
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonParser$NumberType getNumberType()>();
v3 = <com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType BIG_DECIMAL>;
if v2 != v3 goto label1;
v4 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonParser: java.math.BigDecimal getDecimalValue()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(java.math.BigDecimal)>(v4);
goto label3;
label1:
v5 = <com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType FLOAT>;
if v2 != v5 goto label2;
v6 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonParser: float getFloatValue()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(float)>(v6);
goto label3;
label2:
v7 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonParser: double getDoubleValue()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(double)>(v7);
label3:
return;
}
protected void _copyCurrentFloatValueExact(com.fasterxml.jackson.core.JsonParser) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser v1;
com.fasterxml.jackson.core.JsonGenerator v0;
float v6;
java.lang.Number v2;
boolean v3, v4;
double v5;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: com.fasterxml.jackson.core.JsonParser;
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonParser: java.lang.Number getNumberValueExact()>();
v3 = v2 instanceof java.math.BigDecimal;
if v3 == 0 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(java.math.BigDecimal)>(v2);
goto label3;
label1:
v4 = v2 instanceof java.lang.Double;
if v4 == 0 goto label2;
v5 = virtualinvoke v2.<java.lang.Number: double doubleValue()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(double)>(v5);
goto label3;
label2:
v6 = virtualinvoke v2.<java.lang.Number: float floatValue()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(float)>(v6);
label3:
return;
}
protected void _copyCurrentIntValue(com.fasterxml.jackson.core.JsonParser) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser$NumberType v2, v3, v5;
com.fasterxml.jackson.core.JsonParser v1;
com.fasterxml.jackson.core.JsonGenerator v0;
long v6;
int v4;
java.math.BigInteger v7;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: com.fasterxml.jackson.core.JsonParser;
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonParser$NumberType getNumberType()>();
v3 = <com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType INT>;
if v2 != v3 goto label1;
v4 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonParser: int getIntValue()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(int)>(v4);
goto label3;
label1:
v5 = <com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType LONG>;
if v2 != v5 goto label2;
v6 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonParser: long getLongValue()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(long)>(v6);
goto label3;
label2:
v7 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonParser: java.math.BigInteger getBigIntegerValue()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(java.math.BigInteger)>(v7);
label3:
return;
}
protected void _copyCurrentStringValue(com.fasterxml.jackson.core.JsonParser) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser v1;
com.fasterxml.jackson.core.JsonGenerator v0;
int v4, v5;
char[] v3;
java.lang.String v6;
boolean v2;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: com.fasterxml.jackson.core.JsonParser;
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonParser: boolean hasTextCharacters()>();
if v2 == 0 goto label1;
v3 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonParser: char[] getTextCharacters()>();
v4 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonParser: int getTextOffset()>();
v5 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonParser: int getTextLength()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeString(char[],int,int)>(v3, v4, v5);
goto label2;
label1:
v6 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonParser: java.lang.String getText()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>(v6);
label2:
return;
}
public abstract void flush() throws java.io.IOException;
public abstract boolean isClosed();
public abstract void close() throws java.io.IOException;
protected void _reportError(java.lang.String) throws com.fasterxml.jackson.core.JsonGenerationException
{
com.fasterxml.jackson.core.JsonGenerationException v2;
java.lang.String v1;
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: java.lang.String;
v2 = new com.fasterxml.jackson.core.JsonGenerationException;
specialinvoke v2.<com.fasterxml.jackson.core.JsonGenerationException: void <init>(java.lang.String,com.fasterxml.jackson.core.JsonGenerator)>(v1, v0);
throw v2;
}
protected final void _throwInternal()
{
com.fasterxml.jackson.core.JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
staticinvoke <com.fasterxml.jackson.core.util.VersionUtil: void throwInternal()>();
return;
}
protected void _reportUnsupportedOperation()
{
java.lang.UnsupportedOperationException v1;
com.fasterxml.jackson.core.JsonGenerator v0;
java.lang.Class v2;
java.lang.String v3, v4;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 = new java.lang.UnsupportedOperationException;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v2.<java.lang.Class: java.lang.String getName()>();
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Operation not supported by generator of type \u0001");
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(v4);
throw v1;
}
protected final void _verifyOffsets(int, int, int)
{
java.lang.Object[] v6;
com.fasterxml.jackson.core.JsonGenerator v0;
java.lang.IllegalArgumentException v5;
java.lang.Integer v7, v8, v9;
int v1, v2, v3, v4;
java.lang.String v10;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
if v2 < 0 goto label1;
v4 = v2 + v3;
if v4 <= v1 goto label2;
label1:
v5 = new java.lang.IllegalArgumentException;
v6 = newarray (java.lang.Object)[3];
v7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v2);
v6[0] = v7;
v8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v3);
v6[1] = v8;
v9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v6[2] = v9;
v10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("invalid argument(s) (offset=%d, length=%d) for input array of %d element", v6);
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v10);
throw v5;
label2:
return;
}
protected void _writeSimpleObject(java.lang.Object) throws java.io.IOException
{
java.lang.IllegalStateException v27;
byte v15;
boolean v10, v12, v14, v16, v17, v18, v2, v20, v22, v23, v24, v25, v26, v3, v4, v6, v8;
float v11;
com.fasterxml.jackson.core.JsonGenerator v0;
long v21, v7;
short v13;
int v19, v5;
java.lang.String v29, v30;
java.lang.Number v31;
double v9;
java.lang.Class v28;
java.lang.Object v1;
v0 := @this: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter0: java.lang.Object;
if v1 != null goto label01;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNull()>();
return;
label01:
v2 = v1 instanceof java.lang.String;
if v2 == 0 goto label02;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>(v1);
return;
label02:
v3 = v1 instanceof java.lang.Number;
if v3 == 0 goto label12;
v4 = v1 instanceof java.lang.Integer;
if v4 == 0 goto label03;
v5 = virtualinvoke v1.<java.lang.Number: int intValue()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(int)>(v5);
return;
label03:
v6 = v1 instanceof java.lang.Long;
if v6 == 0 goto label04;
v7 = virtualinvoke v1.<java.lang.Number: long longValue()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(long)>(v7);
return;
label04:
v8 = v1 instanceof java.lang.Double;
if v8 == 0 goto label05;
v9 = virtualinvoke v1.<java.lang.Number: double doubleValue()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(double)>(v9);
return;
label05:
v10 = v1 instanceof java.lang.Float;
if v10 == 0 goto label06;
v11 = virtualinvoke v1.<java.lang.Number: float floatValue()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(float)>(v11);
return;
label06:
v12 = v1 instanceof java.lang.Short;
if v12 == 0 goto label07;
v13 = virtualinvoke v1.<java.lang.Number: short shortValue()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(short)>(v13);
return;
label07:
v14 = v1 instanceof java.lang.Byte;
if v14 == 0 goto label08;
v15 = virtualinvoke v1.<java.lang.Number: byte byteValue()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(short)>(v15);
return;
label08:
v16 = v1 instanceof java.math.BigInteger;
if v16 == 0 goto label09;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(java.math.BigInteger)>(v31);
return;
label09:
v17 = v1 instanceof java.math.BigDecimal;
if v17 == 0 goto label10;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(java.math.BigDecimal)>(v31);
return;
label10:
v18 = v1 instanceof java.util.concurrent.atomic.AtomicInteger;
if v18 == 0 goto label11;
v19 = virtualinvoke v31.<java.util.concurrent.atomic.AtomicInteger: int get()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(int)>(v19);
return;
label11:
v20 = v1 instanceof java.util.concurrent.atomic.AtomicLong;
if v20 == 0 goto label15;
v21 = virtualinvoke v31.<java.util.concurrent.atomic.AtomicLong: long get()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(long)>(v21);
return;
label12:
v22 = v1 instanceof byte[];
if v22 == 0 goto label13;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeBinary(byte[])>(v1);
return;
label13:
v23 = v1 instanceof java.lang.Boolean;
if v23 == 0 goto label14;
v24 = virtualinvoke v1.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeBoolean(boolean)>(v24);
return;
label14:
v25 = v1 instanceof java.util.concurrent.atomic.AtomicBoolean;
if v25 == 0 goto label15;
v26 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: void writeBoolean(boolean)>(v26);
return;
label15:
v27 = new java.lang.IllegalStateException;
v28 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v29 = virtualinvoke v28.<java.lang.Class: java.lang.String getName()>();
v30 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v29) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed \u0001)");
specialinvoke v27.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v30);
throw v27;
}
static void <clinit>()
{
com.fasterxml.jackson.core.StreamWriteCapability[] v0;
com.fasterxml.jackson.core.StreamWriteCapability v3, v6;
com.fasterxml.jackson.core.util.JacksonFeatureSet v1, v2, v4, v5, v7;
v0 = staticinvoke <com.fasterxml.jackson.core.StreamWriteCapability: com.fasterxml.jackson.core.StreamWriteCapability[] values()>();
v1 = staticinvoke <com.fasterxml.jackson.core.util.JacksonFeatureSet: com.fasterxml.jackson.core.util.JacksonFeatureSet fromDefaults(com.fasterxml.jackson.core.util.JacksonFeature[])>(v0);
<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.util.JacksonFeatureSet DEFAULT_WRITE_CAPABILITIES> = v1;
v2 = <com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.util.JacksonFeatureSet DEFAULT_WRITE_CAPABILITIES>;
v3 = <com.fasterxml.jackson.core.StreamWriteCapability: com.fasterxml.jackson.core.StreamWriteCapability CAN_WRITE_FORMATTED_NUMBERS>;
v4 = virtualinvoke v2.<com.fasterxml.jackson.core.util.JacksonFeatureSet: com.fasterxml.jackson.core.util.JacksonFeatureSet 'with'(com.fasterxml.jackson.core.util.JacksonFeature)>(v3);
<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.util.JacksonFeatureSet DEFAULT_TEXTUAL_WRITE_CAPABILITIES> = v4;
v5 = <com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.util.JacksonFeatureSet DEFAULT_WRITE_CAPABILITIES>;
v6 = <com.fasterxml.jackson.core.StreamWriteCapability: com.fasterxml.jackson.core.StreamWriteCapability CAN_WRITE_BINARY_NATIVELY>;
v7 = virtualinvoke v5.<com.fasterxml.jackson.core.util.JacksonFeatureSet: com.fasterxml.jackson.core.util.JacksonFeatureSet 'with'(com.fasterxml.jackson.core.util.JacksonFeature)>(v6);
<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.util.JacksonFeatureSet DEFAULT_BINARY_WRITE_CAPABILITIES> = v7;
return;
}
}