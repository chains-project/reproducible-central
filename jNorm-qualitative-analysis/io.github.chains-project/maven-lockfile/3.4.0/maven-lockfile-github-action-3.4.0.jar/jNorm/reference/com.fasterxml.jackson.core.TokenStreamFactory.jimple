public abstract class com.fasterxml.jackson.core.TokenStreamFactory extends java.lang.Object implements com.fasterxml.jackson.core.Versioned, java.io.Serializable
{
private static final long serialVersionUID;
public void <init>()
{
com.fasterxml.jackson.core.TokenStreamFactory v0;
v0 := @this: com.fasterxml.jackson.core.TokenStreamFactory;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public abstract boolean requiresPropertyOrdering();
public abstract boolean canHandleBinaryNatively();
public abstract boolean canParseAsync();
public abstract java.lang.Class getFormatReadFeatureType();
public abstract java.lang.Class getFormatWriteFeatureType();
public abstract boolean canUseSchema(com.fasterxml.jackson.core.FormatSchema);
public abstract java.lang.String getFormatName();
public abstract boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature);
public abstract boolean isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature);
public abstract int getParserFeatures();
public abstract int getGeneratorFeatures();
public abstract int getFormatParserFeatures();
public abstract int getFormatGeneratorFeatures();
public abstract com.fasterxml.jackson.core.StreamReadConstraints streamReadConstraints();
public abstract com.fasterxml.jackson.core.JsonParser createParser(byte[]) throws java.io.IOException;
public abstract com.fasterxml.jackson.core.JsonParser createParser(byte[], int, int) throws java.io.IOException;
public abstract com.fasterxml.jackson.core.JsonParser createParser(char[]) throws java.io.IOException;
public abstract com.fasterxml.jackson.core.JsonParser createParser(char[], int, int) throws java.io.IOException;
public abstract com.fasterxml.jackson.core.JsonParser createParser(java.io.DataInput) throws java.io.IOException;
public abstract com.fasterxml.jackson.core.JsonParser createParser(java.io.File) throws java.io.IOException;
public abstract com.fasterxml.jackson.core.JsonParser createParser(java.io.InputStream) throws java.io.IOException;
public abstract com.fasterxml.jackson.core.JsonParser createParser(java.io.Reader) throws java.io.IOException;
public abstract com.fasterxml.jackson.core.JsonParser createParser(java.lang.String) throws java.io.IOException;
public abstract com.fasterxml.jackson.core.JsonParser createParser(java.net.URL) throws java.io.IOException;
public abstract com.fasterxml.jackson.core.JsonParser createNonBlockingByteArrayParser() throws java.io.IOException;
public abstract com.fasterxml.jackson.core.JsonParser createNonBlockingByteBufferParser() throws java.io.IOException;
public abstract com.fasterxml.jackson.core.JsonGenerator createGenerator(java.io.DataOutput, com.fasterxml.jackson.core.JsonEncoding) throws java.io.IOException;
public abstract com.fasterxml.jackson.core.JsonGenerator createGenerator(java.io.DataOutput) throws java.io.IOException;
public abstract com.fasterxml.jackson.core.JsonGenerator createGenerator(java.io.File, com.fasterxml.jackson.core.JsonEncoding) throws java.io.IOException;
public abstract com.fasterxml.jackson.core.JsonGenerator createGenerator(java.io.OutputStream) throws java.io.IOException;
public abstract com.fasterxml.jackson.core.JsonGenerator createGenerator(java.io.OutputStream, com.fasterxml.jackson.core.JsonEncoding) throws java.io.IOException;
public abstract com.fasterxml.jackson.core.JsonGenerator createGenerator(java.io.Writer) throws java.io.IOException;
protected java.io.OutputStream _createDataOutputWrapper(java.io.DataOutput)
{
java.io.DataOutput v1;
com.fasterxml.jackson.core.io.DataOutputAsStream v2;
com.fasterxml.jackson.core.TokenStreamFactory v0;
v0 := @this: com.fasterxml.jackson.core.TokenStreamFactory;
v1 := @parameter0: java.io.DataOutput;
v2 = new com.fasterxml.jackson.core.io.DataOutputAsStream;
specialinvoke v2.<com.fasterxml.jackson.core.io.DataOutputAsStream: void <init>(java.io.DataOutput)>(v1);
return v2;
}
protected java.io.InputStream _optimizedStreamFromURL(java.net.URL) throws java.io.IOException
{
java.net.URL v1;
java.io.FileInputStream v9;
int v6, v8;
java.lang.String v10, v2, v3, v5, v7;
com.fasterxml.jackson.core.TokenStreamFactory v0;
boolean v4;
java.io.InputStream v11;
v0 := @this: com.fasterxml.jackson.core.TokenStreamFactory;
v1 := @parameter0: java.net.URL;
v2 = "file";
v3 = virtualinvoke v1.<java.net.URL: java.lang.String getProtocol()>();
v4 = virtualinvoke v2.<java.lang.String: boolean equals(java.lang.Object)>(v3);
if v4 == 0 goto label2;
v5 = virtualinvoke v1.<java.net.URL: java.lang.String getHost()>();
if v5 == null goto label1;
v6 = virtualinvoke v5.<java.lang.String: int length()>();
if v6 != 0 goto label2;
label1:
v7 = virtualinvoke v1.<java.net.URL: java.lang.String getPath()>();
v8 = virtualinvoke v7.<java.lang.String: int indexOf(int)>(37);
if v8 >= 0 goto label2;
v9 = new java.io.FileInputStream;
v10 = virtualinvoke v1.<java.net.URL: java.lang.String getPath()>();
specialinvoke v9.<java.io.FileInputStream: void <init>(java.lang.String)>(v10);
return v9;
label2:
v11 = virtualinvoke v1.<java.net.URL: java.io.InputStream openStream()>();
return v11;
}
protected java.io.InputStream _fileInputStream(java.io.File) throws java.io.IOException
{
java.io.FileInputStream v2;
com.fasterxml.jackson.core.TokenStreamFactory v0;
java.io.File v1;
v0 := @this: com.fasterxml.jackson.core.TokenStreamFactory;
v1 := @parameter0: java.io.File;
v2 = new java.io.FileInputStream;
specialinvoke v2.<java.io.FileInputStream: void <init>(java.io.File)>(v1);
return v2;
}
protected java.io.OutputStream _fileOutputStream(java.io.File) throws java.io.IOException
{
java.io.FileOutputStream v2;
com.fasterxml.jackson.core.TokenStreamFactory v0;
java.io.File v1;
v0 := @this: com.fasterxml.jackson.core.TokenStreamFactory;
v1 := @parameter0: java.io.File;
v2 = new java.io.FileOutputStream;
specialinvoke v2.<java.io.FileOutputStream: void <init>(java.io.File)>(v1);
return v2;
}
protected void _checkRangeBoundsForByteArray(byte[], int, int) throws java.lang.IllegalArgumentException
{
byte[] v1;
java.lang.Object[] v10;
java.lang.Integer v11, v12, v13;
int v2, v3, v4, v5, v6, v7, v8, v9;
java.lang.String v14;
com.fasterxml.jackson.core.TokenStreamFactory v0;
v0 := @this: com.fasterxml.jackson.core.TokenStreamFactory;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
if v1 != null goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.TokenStreamFactory: java.lang.Object _reportRangeError(java.lang.String)>("Invalid `byte[]` argument: `null`");
label1:
v4 = lengthof v1;
v5 = v2 + v3;
v6 = v2 | v3;
v7 = v6 | v5;
v8 = v4 - v5;
v9 = v7 | v8;
if v9 >= 0 goto label2;
v10 = newarray (java.lang.Object)[3];
v11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v2);
v10[0] = v11;
v12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v3);
v10[1] = v12;
v13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v4);
v10[2] = v13;
v14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Invalid \'offset\' (%d) and/or \'len\' (%d) arguments for `byte[]` of length %d", v10);
virtualinvoke v0.<com.fasterxml.jackson.core.TokenStreamFactory: java.lang.Object _reportRangeError(java.lang.String)>(v14);
label2:
return;
}
protected void _checkRangeBoundsForCharArray(char[], int, int) throws java.io.IOException
{
java.lang.Object[] v10;
java.lang.Integer v11, v12, v13;
int v2, v3, v4, v5, v6, v7, v8, v9;
char[] v1;
java.lang.String v14;
com.fasterxml.jackson.core.TokenStreamFactory v0;
v0 := @this: com.fasterxml.jackson.core.TokenStreamFactory;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
if v1 != null goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.TokenStreamFactory: java.lang.Object _reportRangeError(java.lang.String)>("Invalid `char[]` argument: `null`");
label1:
v4 = lengthof v1;
v5 = v2 + v3;
v6 = v2 | v3;
v7 = v6 | v5;
v8 = v4 - v5;
v9 = v7 | v8;
if v9 >= 0 goto label2;
v10 = newarray (java.lang.Object)[3];
v11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v2);
v10[0] = v11;
v12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v3);
v10[1] = v12;
v13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v4);
v10[2] = v13;
v14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Invalid \'offset\' (%d) and/or \'len\' (%d) arguments for `char[]` of length %d", v10);
virtualinvoke v0.<com.fasterxml.jackson.core.TokenStreamFactory: java.lang.Object _reportRangeError(java.lang.String)>(v14);
label2:
return;
}
protected java.lang.Object _reportRangeError(java.lang.String) throws java.lang.IllegalArgumentException
{
java.lang.String v1;
java.lang.IllegalArgumentException v2;
com.fasterxml.jackson.core.TokenStreamFactory v0;
v0 := @this: com.fasterxml.jackson.core.TokenStreamFactory;
v1 := @parameter0: java.lang.String;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v1);
throw v2;
}
}