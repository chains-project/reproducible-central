public class com.fasterxml.jackson.core.io.UTF32Reader extends java.io.Reader
{
protected static final int LAST_VALID_UNICODE_CHAR;
protected static final char NC;
protected final com.fasterxml.jackson.core.io.IOContext _context;
protected java.io.InputStream _in;
protected byte[] _buffer;
protected int _ptr;
protected int _length;
protected final boolean _bigEndian;
protected char _surrogate;
protected int _charCount;
protected int _byteCount;
protected final boolean _managedBuffers;
protected char[] _tmpBuf;
public void <init>(com.fasterxml.jackson.core.io.IOContext, java.io.InputStream, byte[], int, int, boolean)
{
byte[] v3;
com.fasterxml.jackson.core.io.UTF32Reader v0;
com.fasterxml.jackson.core.io.IOContext v1;
int v4, v5;
boolean v6, v7;
java.io.InputStream v2;
v0 := @this: com.fasterxml.jackson.core.io.UTF32Reader;
v1 := @parameter0: com.fasterxml.jackson.core.io.IOContext;
v2 := @parameter1: java.io.InputStream;
v3 := @parameter2: byte[];
v4 := @parameter3: int;
v5 := @parameter4: int;
v6 := @parameter5: boolean;
specialinvoke v0.<java.io.Reader: void <init>()>();
v0.<com.fasterxml.jackson.core.io.UTF32Reader: char _surrogate> = 0;
v0.<com.fasterxml.jackson.core.io.UTF32Reader: com.fasterxml.jackson.core.io.IOContext _context> = v1;
v0.<com.fasterxml.jackson.core.io.UTF32Reader: java.io.InputStream _in> = v2;
v0.<com.fasterxml.jackson.core.io.UTF32Reader: byte[] _buffer> = v3;
v0.<com.fasterxml.jackson.core.io.UTF32Reader: int _ptr> = v4;
v0.<com.fasterxml.jackson.core.io.UTF32Reader: int _length> = v5;
v0.<com.fasterxml.jackson.core.io.UTF32Reader: boolean _bigEndian> = v6;
if v2 == null goto label1;
v7 = 1;
goto label2;
label1:
v7 = 0;
label2:
v0.<com.fasterxml.jackson.core.io.UTF32Reader: boolean _managedBuffers> = v7;
return;
}
public void close() throws java.io.IOException
{
com.fasterxml.jackson.core.io.UTF32Reader v0;
java.io.InputStream v1;
v0 := @this: com.fasterxml.jackson.core.io.UTF32Reader;
v1 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: java.io.InputStream _in>;
if v1 == null goto label1;
v0.<com.fasterxml.jackson.core.io.UTF32Reader: java.io.InputStream _in> = null;
specialinvoke v0.<com.fasterxml.jackson.core.io.UTF32Reader: void freeBuffers()>();
virtualinvoke v1.<java.io.InputStream: void close()>();
label1:
return;
}
public int read() throws java.io.IOException
{
char v7;
com.fasterxml.jackson.core.io.UTF32Reader v0;
int v4, v5;
char[] v1, v2, v3, v6;
v0 := @this: com.fasterxml.jackson.core.io.UTF32Reader;
v1 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: char[] _tmpBuf>;
if v1 != null goto label1;
v2 = newarray (char)[1];
v0.<com.fasterxml.jackson.core.io.UTF32Reader: char[] _tmpBuf> = v2;
label1:
v3 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: char[] _tmpBuf>;
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.io.UTF32Reader: int read(char[],int,int)>(v3, 0, 1);
if v4 >= 1 goto label2;
v5 = (int) -1;
return v5;
label2:
v6 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: char[] _tmpBuf>;
v7 = v6[0];
return v7;
}
public int read(char[], int, int) throws java.io.IOException
{
byte[] v25, v28, v33, v38, v4, v43, v46, v51, v55;
java.lang.Integer v68;
byte v26, v30, v35, v40, v44, v48, v53, v57;
java.lang.Object[] v67;
short v31, v36, v41, v45, v49, v54;
java.lang.String v69;
char[] v1;
boolean v15, v24;
int v12, v13, v14, v16, v17, v18, v19, v2, v20, v21, v22, v23, v27, v29, v3, v32, v34, v37, v39, v42, v47, v5, v50, v52, v56, v58, v59, v6, v60, v61, v62, v63, v64, v65, v66, v7, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v8, v9;
char v10, v11;
com.fasterxml.jackson.core.io.UTF32Reader v0;
v0 := @this: com.fasterxml.jackson.core.io.UTF32Reader;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: byte[] _buffer>;
if v4 != null goto label01;
v5 = (int) -1;
return v5;
label01:
if v3 >= 1 goto label02;
return v3;
label02:
if v2 < 0 goto label03;
v6 = v2 + v3;
v7 = lengthof v1;
if v6 <= v7 goto label04;
label03:
specialinvoke v0.<com.fasterxml.jackson.core.io.UTF32Reader: void reportBounds(char[],int,int)>(v1, v2, v3);
label04:
v8 = v2;
v9 = v3 + v2;
v10 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: char _surrogate>;
if v10 == 0 goto label05;
v8 = v2 + 1;
v11 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: char _surrogate>;
v1[v2] = v11;
v0.<com.fasterxml.jackson.core.io.UTF32Reader: char _surrogate> = 0;
goto label07;
label05:
v12 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: int _length>;
v13 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: int _ptr>;
v14 = v12 - v13;
if v14 >= 4 goto label07;
v15 = specialinvoke v0.<com.fasterxml.jackson.core.io.UTF32Reader: boolean loadMore(int)>(v14);
if v15 != 0 goto label07;
if v14 != 0 goto label06;
v16 = (int) -1;
return v16;
label06:
v17 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: int _length>;
v18 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: int _ptr>;
v19 = v17 - v18;
specialinvoke v0.<com.fasterxml.jackson.core.io.UTF32Reader: void reportUnexpectedEOF(int,int)>(v19, 4);
label07:
v20 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: int _length>;
v21 = v20 - 4;
label08:
if v8 >= v9 goto label13;
v22 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: int _ptr>;
if v22 > v21 goto label13;
v23 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: int _ptr>;
v24 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: boolean _bigEndian>;
if v24 == 0 goto label09;
v25 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: byte[] _buffer>;
v26 = v25[v23];
v27 = v26 << 8;
v28 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: byte[] _buffer>;
v29 = v23 + 1;
v30 = v28[v29];
v31 = v30 & 255;
v32 = v27 | v31;
v33 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: byte[] _buffer>;
v34 = v23 + 2;
v35 = v33[v34];
v36 = v35 & 255;
v37 = v36 << 8;
v38 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: byte[] _buffer>;
v39 = v23 + 3;
v40 = v38[v39];
v41 = v40 & 255;
v42 = v37 | v41;
goto label10;
label09:
v43 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: byte[] _buffer>;
v44 = v43[v23];
v45 = v44 & 255;
v46 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: byte[] _buffer>;
v47 = v23 + 1;
v48 = v46[v47];
v49 = v48 & 255;
v50 = v49 << 8;
v42 = v45 | v50;
v51 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: byte[] _buffer>;
v52 = v23 + 2;
v53 = v51[v52];
v54 = v53 & 255;
v55 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: byte[] _buffer>;
v56 = v23 + 3;
v57 = v55[v56];
v58 = v57 << 8;
v32 = v54 | v58;
label10:
v59 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: int _ptr>;
v60 = v59 + 4;
v0.<com.fasterxml.jackson.core.io.UTF32Reader: int _ptr> = v60;
if v32 == 0 goto label12;
v61 = (int) 65535;
v62 = v32 & v61;
v63 = v62 - 1;
v64 = v63 << 16;
v65 = v64 | v42;
if v62 <= 16 goto label11;
v66 = v8 - v2;
v67 = newarray (java.lang.Object)[1];
v68 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1114111);
v67[0] = v68;
v69 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(" (above 0x%08x)", v67);
specialinvoke v0.<com.fasterxml.jackson.core.io.UTF32Reader: void reportInvalid(int,int,java.lang.String)>(v65, v66, v69);
label11:
v70 = v8;
v8 = v8 + 1;
v71 = v65 >> 10;
v72 = (int) 55296;
v73 = v72 + v71;
v1[v70] = v73;
v74 = v65 & 1023;
v75 = (int) 56320;
v42 = v75 | v74;
if v8 < v9 goto label12;
v0.<com.fasterxml.jackson.core.io.UTF32Reader: char _surrogate> = v65;
goto label13;
label12:
v76 = v8;
v8 = v8 + 1;
v1[v76] = v42;
goto label08;
label13:
v77 = v8 - v2;
v78 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: int _charCount>;
v79 = v78 + v77;
v0.<com.fasterxml.jackson.core.io.UTF32Reader: int _charCount> = v79;
return v77;
}
private void reportUnexpectedEOF(int, int) throws java.io.IOException
{
com.fasterxml.jackson.core.io.UTF32Reader v0;
java.io.CharConversionException v6;
int v1, v2, v3, v4, v5;
java.lang.String v7;
v0 := @this: com.fasterxml.jackson.core.io.UTF32Reader;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: int _byteCount>;
v4 = v3 + v1;
v5 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: int _charCount>;
v6 = new java.io.CharConversionException;
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int,int,int)>(v1, v2, v5, v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unexpected EOF in the middle of a 4-byte UTF-32 char: got \u0001, needed \u0001, at char #\u0001, byte #\u0001)");
specialinvoke v6.<java.io.CharConversionException: void <init>(java.lang.String)>(v7);
throw v6;
}
private void reportInvalid(int, int, java.lang.String) throws java.io.IOException
{
com.fasterxml.jackson.core.io.UTF32Reader v0;
java.io.CharConversionException v10;
int v1, v2, v4, v5, v6, v7, v8, v9;
java.lang.String v11, v12, v3;
v0 := @this: com.fasterxml.jackson.core.io.UTF32Reader;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: java.lang.String;
v4 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: int _byteCount>;
v5 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: int _ptr>;
v6 = v4 + v5;
v7 = v6 - 1;
v8 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: int _charCount>;
v9 = v8 + v2;
v10 = new java.io.CharConversionException;
v11 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v1);
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,int,int)>(v11, v3, v9, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid UTF-32 character 0x\u0001\u0001 at char #\u0001, byte #\u0001)");
specialinvoke v10.<java.io.CharConversionException: void <init>(java.lang.String)>(v12);
throw v10;
}
private boolean loadMore(int) throws java.io.IOException
{
byte[] v11, v13, v18, v20, v3, v9;
int v1, v10, v14, v16, v19, v21, v22, v23, v24, v26, v27, v28, v4, v5, v6, v7, v8;
boolean v15, v25;
com.fasterxml.jackson.core.io.UTF32Reader v0;
java.io.InputStream v12, v17, v2;
v0 := @this: com.fasterxml.jackson.core.io.UTF32Reader;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: java.io.InputStream _in>;
if v2 == null goto label01;
v3 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: byte[] _buffer>;
if v3 != null goto label02;
label01:
return 0;
label02:
v4 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: int _byteCount>;
v5 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: int _length>;
v6 = v5 - v1;
v7 = v4 + v6;
v0.<com.fasterxml.jackson.core.io.UTF32Reader: int _byteCount> = v7;
if v1 <= 0 goto label04;
v8 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: int _ptr>;
if v8 <= 0 goto label03;
v9 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: byte[] _buffer>;
v10 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: int _ptr>;
v11 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: byte[] _buffer>;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v9, v10, v11, 0, v1);
v0.<com.fasterxml.jackson.core.io.UTF32Reader: int _ptr> = 0;
label03:
v0.<com.fasterxml.jackson.core.io.UTF32Reader: int _length> = v1;
goto label08;
label04:
v0.<com.fasterxml.jackson.core.io.UTF32Reader: int _ptr> = 0;
v12 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: java.io.InputStream _in>;
v13 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: byte[] _buffer>;
v14 = virtualinvoke v12.<java.io.InputStream: int read(byte[])>(v13);
if v14 >= 1 goto label07;
v0.<com.fasterxml.jackson.core.io.UTF32Reader: int _length> = 0;
if v14 >= 0 goto label06;
v15 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: boolean _managedBuffers>;
if v15 == 0 goto label05;
specialinvoke v0.<com.fasterxml.jackson.core.io.UTF32Reader: void freeBuffers()>();
label05:
return 0;
label06:
specialinvoke v0.<com.fasterxml.jackson.core.io.UTF32Reader: void reportStrangeStream()>();
label07:
v0.<com.fasterxml.jackson.core.io.UTF32Reader: int _length> = v14;
label08:
v16 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: int _length>;
if v16 >= 4 goto label12;
v17 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: java.io.InputStream _in>;
v18 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: byte[] _buffer>;
v19 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: int _length>;
v20 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: byte[] _buffer>;
v21 = lengthof v20;
v22 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: int _length>;
v23 = v21 - v22;
v24 = virtualinvoke v17.<java.io.InputStream: int read(byte[],int,int)>(v18, v19, v23);
if v24 >= 1 goto label11;
if v24 >= 0 goto label10;
v25 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: boolean _managedBuffers>;
if v25 == 0 goto label09;
specialinvoke v0.<com.fasterxml.jackson.core.io.UTF32Reader: void freeBuffers()>();
label09:
v26 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: int _length>;
specialinvoke v0.<com.fasterxml.jackson.core.io.UTF32Reader: void reportUnexpectedEOF(int,int)>(v26, 4);
label10:
specialinvoke v0.<com.fasterxml.jackson.core.io.UTF32Reader: void reportStrangeStream()>();
label11:
v27 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: int _length>;
v28 = v27 + v24;
v0.<com.fasterxml.jackson.core.io.UTF32Reader: int _length> = v28;
goto label08;
label12:
return 1;
}
private void freeBuffers()
{
byte[] v1;
com.fasterxml.jackson.core.io.IOContext v2, v3;
com.fasterxml.jackson.core.io.UTF32Reader v0;
v0 := @this: com.fasterxml.jackson.core.io.UTF32Reader;
v1 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: byte[] _buffer>;
if v1 == null goto label1;
v0.<com.fasterxml.jackson.core.io.UTF32Reader: byte[] _buffer> = null;
v2 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: com.fasterxml.jackson.core.io.IOContext _context>;
if v2 == null goto label1;
v3 = v0.<com.fasterxml.jackson.core.io.UTF32Reader: com.fasterxml.jackson.core.io.IOContext _context>;
virtualinvoke v3.<com.fasterxml.jackson.core.io.IOContext: void releaseReadIOBuffer(byte[])>(v1);
label1:
return;
}
private void reportBounds(char[], int, int) throws java.io.IOException
{
java.lang.Object[] v5;
java.lang.ArrayIndexOutOfBoundsException v4;
java.lang.Integer v6, v7, v9;
com.fasterxml.jackson.core.io.UTF32Reader v0;
int v2, v3, v8;
char[] v1;
java.lang.String v10;
v0 := @this: com.fasterxml.jackson.core.io.UTF32Reader;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = new java.lang.ArrayIndexOutOfBoundsException;
v5 = newarray (java.lang.Object)[3];
v6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v2);
v5[0] = v6;
v7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v3);
v5[1] = v7;
v8 = lengthof v1;
v9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v8);
v5[2] = v9;
v10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("read(buf,%d,%d), cbuf[%d]", v5);
specialinvoke v4.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>(v10);
throw v4;
}
private void reportStrangeStream() throws java.io.IOException
{
java.io.IOException v1;
com.fasterxml.jackson.core.io.UTF32Reader v0;
v0 := @this: com.fasterxml.jackson.core.io.UTF32Reader;
v1 = new java.io.IOException;
specialinvoke v1.<java.io.IOException: void <init>(java.lang.String)>("Strange I/O stream, returned 0 bytes on read");
throw v1;
}
}