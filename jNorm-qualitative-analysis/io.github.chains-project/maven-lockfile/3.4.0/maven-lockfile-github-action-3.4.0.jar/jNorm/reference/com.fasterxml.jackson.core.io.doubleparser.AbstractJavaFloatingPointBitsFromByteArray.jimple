abstract class com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromByteArray extends com.fasterxml.jackson.core.io.doubleparser.AbstractFloatValueParser
{
void <init>()
{
com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromByteArray v0;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromByteArray;
specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.AbstractFloatValueParser: void <init>()>();
return;
}
private static int skipWhitespace(byte[], int, int)
{
byte[] v0;
short v4;
byte v3;
int v1, v2;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: int;
label1:
if v1 >= v2 goto label2;
v3 = v0[v1];
v4 = v3 & 255;
if v4 > 32 goto label2;
v1 = v1 + 1;
goto label1;
label2:
return v1;
}
abstract long nan();
abstract long negativeInfinity();
private long parseDecFloatLiteral(byte[], int, int, int, boolean, boolean)
{
byte[] v1;
byte v12, v28, v48;
boolean v11, v13, v16, v17, v29, v30, v31, v32, v33, v36, v37, v38, v39, v40, v41, v42, v43, v5, v52, v53, v6;
long v14, v15, v21, v50, v51, v57, v7;
int v10, v18, v19, v2, v20, v22, v23, v24, v25, v26, v27, v3, v34, v35, v4, v44, v46, v47, v49, v54, v55, v56, v8, v9;
java.lang.NumberFormatException v45;
com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromByteArray v0;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromByteArray;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 := @parameter4: boolean;
v6 := @parameter5: boolean;
v7 = 0L;
v8 = v2;
v9 = (int) -1;
v10 = v9;
v11 = 0;
v12 = 0;
label01:
if v2 >= v4 goto label07;
v12 = v1[v2];
v13 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: boolean isDigit(byte)>(v12);
if v13 == 0 goto label02;
v14 = 10L * v7;
v15 = v14 + v12;
v7 = v15 - 48L;
goto label06;
label02:
if v12 != 46 goto label07;
v16 = v11;
if v10 < 0 goto label03;
v17 = 1;
goto label04;
label03:
v17 = 0;
label04:
v11 = v16 | v17;
v10 = v2;
label05:
v18 = v4 - 4;
if v2 >= v18 goto label06;
v19 = v2 + 1;
v20 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: int tryToParseFourDigits(byte[],int)>(v1, v19);
if v20 < 0 goto label06;
v21 = 10000L * v7;
v7 = v21 + v20;
v2 = v2 + 4;
goto label05;
label06:
v2 = v2 + 1;
goto label01;
label07:
v22 = v2;
if v10 >= 0 goto label08;
v23 = v2 - v8;
v10 = v2;
v24 = 0;
goto label09;
label08:
v25 = v2 - v8;
v23 = v25 - 1;
v26 = v10 - v2;
v24 = v26 + 1;
label09:
v27 = 0;
v28 = v12 | 32;
if v28 != 101 goto label19;
v2 = v2 + 1;
v12 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromByteArray: byte charAt(byte[],int,int)>(v1, v2, v4);
if v12 != 45 goto label10;
v29 = 1;
goto label11;
label10:
v29 = 0;
label11:
v30 = v29;
if v29 != 0 goto label12;
if v12 != 43 goto label13;
label12:
v2 = v2 + 1;
v12 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromByteArray: byte charAt(byte[],int,int)>(v1, v2, v4);
label13:
v31 = v11;
v32 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: boolean isDigit(byte)>(v12);
if v32 != 0 goto label14;
v33 = 1;
goto label15;
label14:
v33 = 0;
label15:
v11 = v31 | v33;
label16:
if v27 >= 1024 goto label17;
v34 = 10 * v27;
v35 = v34 + v12;
v27 = v35 - 48;
label17:
v2 = v2 + 1;
v12 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromByteArray: byte charAt(byte[],int,int)>(v1, v2, v4);
v36 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: boolean isDigit(byte)>(v12);
if v36 != 0 goto label16;
if v30 == 0 goto label18;
v27 = neg v27;
label18:
v24 = v24 + v27;
label19:
if v12 != 100 goto label20;
v37 = 1;
goto label21;
label20:
v37 = 0;
label21:
if v12 != 68 goto label22;
v38 = 1;
goto label23;
label22:
v38 = 0;
label23:
v39 = v37 | v38;
if v12 != 102 goto label24;
v40 = 1;
goto label25;
label24:
v40 = 0;
label25:
v41 = v39 | v40;
if v12 != 70 goto label26;
v42 = 1;
goto label27;
label26:
v42 = 0;
label27:
v43 = v41 | v42;
if v43 == 0 goto label28;
v2 = v2 + 1;
label28:
v44 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromByteArray: int skipWhitespace(byte[],int,int)>(v1, v2, v4);
if v11 != 0 goto label29;
if v44 < v4 goto label29;
if v6 != 0 goto label30;
if v23 != 0 goto label30;
label29:
v45 = new java.lang.NumberFormatException;
specialinvoke v45.<java.lang.NumberFormatException: void <init>(java.lang.String)>("illegal syntax");
throw v45;
label30:
v46 = 0;
if v23 <= 19 goto label37;
v7 = 0L;
v47 = v8;
label31:
if v47 >= v22 goto label35;
v48 = v1[v47];
if v48 != 46 goto label32;
v46 = v46 + 1;
goto label33;
label32:
v49 = staticinvoke <java.lang.Long: int compareUnsigned(long,long)>(v7, 1000000000000000000L);
if v49 >= 0 goto label34;
v50 = 10L * v7;
v51 = v50 + v48;
v7 = v51 - 48L;
label33:
v47 = v47 + 1;
goto label31;
label34:
if v47 >= v22 goto label35;
v52 = 1;
goto label36;
label35:
v52 = 0;
label36:
v53 = v52;
v54 = v10 - v47;
v55 = v54 + v46;
v56 = v55 + v27;
goto label38;
label37:
v53 = 0;
v56 = 0;
label38:
v57 = virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromByteArray: long valueOfFloatLiteral(byte[],int,int,boolean,long,int,boolean,int)>(v1, v3, v4, v5, v7, v24, v53, v56);
return v57;
}
public long parseFloatingPointLiteral(byte[], int, int)
{
byte[] v1;
long v13, v18, v19;
byte v16, v9;
int v17, v2, v3, v4, v5, v7;
boolean v10, v11, v14, v15;
java.lang.NumberFormatException v12, v8;
java.lang.IllegalArgumentException v6;
com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromByteArray v0;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromByteArray;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v2 + v3;
if v2 < 0 goto label01;
if v4 < v2 goto label01;
v5 = lengthof v1;
if v4 > v5 goto label01;
if v3 <= 2147483643 goto label02;
label01:
v6 = new java.lang.IllegalArgumentException;
specialinvoke v6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("offset < 0 or length > str.length");
throw v6;
label02:
v7 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromByteArray: int skipWhitespace(byte[],int,int)>(v1, v2, v4);
if v7 != v4 goto label03;
v8 = new java.lang.NumberFormatException;
specialinvoke v8.<java.lang.NumberFormatException: void <init>(java.lang.String)>("illegal syntax");
throw v8;
label03:
v9 = v1[v7];
if v9 != 45 goto label04;
v10 = 1;
goto label05;
label04:
v10 = 0;
label05:
v11 = v10;
if v10 != 0 goto label06;
if v9 != 43 goto label07;
label06:
v7 = v7 + 1;
v9 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromByteArray: byte charAt(byte[],int,int)>(v1, v7, v4);
if v9 != 0 goto label07;
v12 = new java.lang.NumberFormatException;
specialinvoke v12.<java.lang.NumberFormatException: void <init>(java.lang.String)>("illegal syntax");
throw v12;
label07:
if v9 < 73 goto label08;
v13 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromByteArray: long parseNaNOrInfinity(byte[],int,int,boolean)>(v1, v7, v4, v11);
return v13;
label08:
if v9 != 48 goto label09;
v14 = 1;
goto label10;
label09:
v14 = 0;
label10:
v15 = v14;
if v14 == 0 goto label12;
v7 = v7 + 1;
v16 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromByteArray: byte charAt(byte[],int,int)>(v1, v7, v4);
if v16 == 120 goto label11;
if v16 != 88 goto label12;
label11:
v17 = v7 + 1;
v18 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromByteArray: long parseHexFloatingPointLiteral(byte[],int,int,int,boolean)>(v1, v17, v2, v4, v11);
return v18;
label12:
v19 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromByteArray: long parseDecFloatLiteral(byte[],int,int,int,boolean,boolean)>(v1, v7, v2, v4, v11, v15);
return v19;
}
private long parseHexFloatingPointLiteral(byte[], int, int, int, boolean)
{
byte[] v1;
byte v12, v25, v46;
boolean v11, v16, v17, v26, v27, v28, v29, v30, v31, v32, v35, v36, v37, v38, v39, v40, v41, v42, v5, v50, v51;
long v14, v49, v56, v6;
int v10, v13, v15, v18, v19, v2, v20, v21, v22, v23, v24, v3, v33, v34, v4, v43, v45, v47, v48, v52, v53, v54, v55, v7, v8, v9;
java.lang.NumberFormatException v44;
com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromByteArray v0;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromByteArray;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 := @parameter4: boolean;
v6 = 0L;
v7 = 0;
v8 = v2;
v9 = (int) -1;
v10 = v9;
v11 = 0;
v12 = 0;
label01:
if v2 >= v4 goto label06;
v12 = v1[v2];
v13 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromByteArray: int lookupHex(byte)>(v12);
if v13 < 0 goto label02;
v14 = v6 << 4;
v6 = v14 | v13;
goto label05;
label02:
v15 = (int) -4;
if v13 != v15 goto label06;
v16 = v11;
if v10 < 0 goto label03;
v17 = 1;
goto label04;
label03:
v17 = 0;
label04:
v11 = v16 | v17;
v10 = v2;
label05:
v2 = v2 + 1;
goto label01;
label06:
v18 = v2;
if v10 >= 0 goto label07;
v19 = v2 - v8;
v10 = v2;
goto label08;
label07:
v20 = v2 - v8;
v19 = v20 - 1;
v21 = v10 - v2;
v22 = v21 + 1;
v23 = staticinvoke <java.lang.Math: int min(int,int)>(v22, 1024);
v7 = v23 * 4;
label08:
v24 = 0;
v25 = v12 | 32;
if v25 != 112 goto label09;
v26 = 1;
goto label10;
label09:
v26 = 0;
label10:
v27 = v26;
if v26 == 0 goto label20;
v2 = v2 + 1;
v12 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromByteArray: byte charAt(byte[],int,int)>(v1, v2, v4);
if v12 != 45 goto label11;
v28 = 1;
goto label12;
label11:
v28 = 0;
label12:
v29 = v28;
if v28 != 0 goto label13;
if v12 != 43 goto label14;
label13:
v2 = v2 + 1;
v12 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromByteArray: byte charAt(byte[],int,int)>(v1, v2, v4);
label14:
v30 = v11;
v31 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: boolean isDigit(byte)>(v12);
if v31 != 0 goto label15;
v32 = 1;
goto label16;
label15:
v32 = 0;
label16:
v11 = v30 | v32;
label17:
if v24 >= 1024 goto label18;
v33 = 10 * v24;
v34 = v33 + v12;
v24 = v34 - 48;
label18:
v2 = v2 + 1;
v12 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromByteArray: byte charAt(byte[],int,int)>(v1, v2, v4);
v35 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: boolean isDigit(byte)>(v12);
if v35 != 0 goto label17;
if v29 == 0 goto label19;
v24 = neg v24;
label19:
v7 = v7 + v24;
label20:
if v12 != 100 goto label21;
v36 = 1;
goto label22;
label21:
v36 = 0;
label22:
if v12 != 68 goto label23;
v37 = 1;
goto label24;
label23:
v37 = 0;
label24:
v38 = v36 | v37;
if v12 != 102 goto label25;
v39 = 1;
goto label26;
label25:
v39 = 0;
label26:
v40 = v38 | v39;
if v12 != 70 goto label27;
v41 = 1;
goto label28;
label27:
v41 = 0;
label28:
v42 = v40 | v41;
if v42 == 0 goto label29;
v2 = v2 + 1;
label29:
v43 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromByteArray: int skipWhitespace(byte[],int,int)>(v1, v2, v4);
if v11 != 0 goto label30;
if v43 < v4 goto label30;
if v19 == 0 goto label30;
if v27 != 0 goto label31;
label30:
v44 = new java.lang.NumberFormatException;
specialinvoke v44.<java.lang.NumberFormatException: void <init>(java.lang.String)>("illegal syntax");
throw v44;
label31:
v45 = 0;
if v19 <= 16 goto label38;
v6 = 0L;
v43 = v8;
label32:
if v43 >= v18 goto label36;
v46 = v1[v43];
v47 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromByteArray: int lookupHex(byte)>(v46);
if v47 < 0 goto label33;
v48 = staticinvoke <java.lang.Long: int compareUnsigned(long,long)>(v6, 1000000000000000000L);
if v48 >= 0 goto label35;
v49 = v6 << 4;
v6 = v49 | v47;
goto label34;
label33:
v45 = v45 + 1;
label34:
v43 = v43 + 1;
goto label32;
label35:
if v43 >= v18 goto label36;
v50 = 1;
goto label37;
label36:
v50 = 0;
label37:
v51 = v50;
goto label39;
label38:
v51 = 0;
label39:
v52 = v10 - v43;
v53 = v52 + v45;
v54 = v53 * 4;
v55 = v54 + v24;
v56 = virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromByteArray: long valueOfHexLiteral(byte[],int,int,boolean,long,int,boolean,int)>(v1, v3, v4, v5, v6, v7, v51, v55);
return v56;
}
private long parseNaNOrInfinity(byte[], int, int, boolean)
{
byte[] v1;
long v13, v15, v19;
byte v10, v16, v5, v8;
int v11, v12, v14, v17, v18, v2, v3, v6, v7, v9;
boolean v4;
java.lang.NumberFormatException v20;
com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromByteArray v0;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromByteArray;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 = v1[v2];
if v5 != 78 goto label1;
v6 = v2 + 2;
if v6 >= v3 goto label4;
v7 = v2 + 1;
v8 = v1[v7];
if v8 != 97 goto label4;
v9 = v2 + 2;
v10 = v1[v9];
if v10 != 78 goto label4;
v11 = v2 + 3;
v12 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromByteArray: int skipWhitespace(byte[],int,int)>(v1, v11, v3);
if v12 != v3 goto label4;
v13 = virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromByteArray: long nan()>();
return v13;
label1:
v14 = v2 + 7;
if v14 >= v3 goto label4;
v15 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: long readLongLE(byte[],int)>(v1, v2);
v16 = v15 cmp 8751735898823355977L;
if v16 != 0 goto label4;
v17 = v2 + 8;
v18 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromByteArray: int skipWhitespace(byte[],int,int)>(v1, v17, v3);
if v18 != v3 goto label4;
if v4 == 0 goto label2;
v19 = virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromByteArray: long negativeInfinity()>();
goto label3;
label2:
v19 = virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromByteArray: long positiveInfinity()>();
label3:
return v19;
label4:
v20 = new java.lang.NumberFormatException;
specialinvoke v20.<java.lang.NumberFormatException: void <init>(java.lang.String)>("illegal syntax");
throw v20;
}
abstract long positiveInfinity();
abstract long valueOfFloatLiteral(byte[], int, int, boolean, long, int, boolean, int);
abstract long valueOfHexLiteral(byte[], int, int, boolean, long, int, boolean, int);
}