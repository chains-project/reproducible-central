abstract class com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence extends com.fasterxml.jackson.core.io.doubleparser.AbstractFloatValueParser
{
void <init>()
{
com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence v0;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence;
specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.AbstractFloatValueParser: void <init>()>();
return;
}
private static int skipWhitespace(java.lang.CharSequence, int, int)
{
java.lang.CharSequence v0;
int v1, v2;
char v3;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: int;
v2 := @parameter2: int;
label1:
if v1 >= v2 goto label2;
v3 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v1);
if v3 > 32 goto label2;
v1 = v1 + 1;
goto label1;
label2:
return v1;
}
abstract long nan();
abstract long negativeInfinity();
private long parseDecFloatLiteral(java.lang.CharSequence, int, int, int, boolean, boolean)
{
boolean v11, v13, v16, v17, v25, v26, v27, v28, v29, v32, v33, v34, v35, v36, v37, v38, v39, v48, v49, v5, v6;
java.lang.CharSequence v1;
long v14, v15, v46, v47, v53, v7;
int v10, v18, v19, v2, v20, v21, v22, v23, v24, v3, v30, v31, v4, v40, v42, v43, v45, v50, v51, v52, v8, v9;
char v12, v44;
java.lang.NumberFormatException v41;
com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence v0;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 := @parameter4: boolean;
v6 := @parameter5: boolean;
v7 = 0L;
v8 = v2;
v9 = (int) -1;
v10 = v9;
v11 = 0;
v12 = 0;
label01:
if v2 >= v4 goto label06;
v12 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v2);
v13 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: boolean isDigit(char)>(v12);
if v13 == 0 goto label02;
v14 = 10L * v7;
v15 = v14 + v12;
v7 = v15 - 48L;
goto label05;
label02:
if v12 != 46 goto label06;
v16 = v11;
if v10 < 0 goto label03;
v17 = 1;
goto label04;
label03:
v17 = 0;
label04:
v11 = v16 | v17;
v10 = v2;
label05:
v2 = v2 + 1;
goto label01;
label06:
v18 = v2;
if v10 >= 0 goto label07;
v19 = v2 - v8;
v10 = v2;
v20 = 0;
goto label08;
label07:
v21 = v2 - v8;
v19 = v21 - 1;
v22 = v10 - v2;
v20 = v22 + 1;
label08:
v23 = 0;
v24 = v12 | 32;
if v24 != 101 goto label18;
v2 = v2 + 1;
v12 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence: char charAt(java.lang.CharSequence,int,int)>(v1, v2, v4);
if v12 != 45 goto label09;
v25 = 1;
goto label10;
label09:
v25 = 0;
label10:
v26 = v25;
if v25 != 0 goto label11;
if v12 != 43 goto label12;
label11:
v2 = v2 + 1;
v12 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence: char charAt(java.lang.CharSequence,int,int)>(v1, v2, v4);
label12:
v27 = v11;
v28 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: boolean isDigit(char)>(v12);
if v28 != 0 goto label13;
v29 = 1;
goto label14;
label13:
v29 = 0;
label14:
v11 = v27 | v29;
label15:
if v23 >= 1024 goto label16;
v30 = 10 * v23;
v31 = v30 + v12;
v23 = v31 - 48;
label16:
v2 = v2 + 1;
v12 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence: char charAt(java.lang.CharSequence,int,int)>(v1, v2, v4);
v32 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: boolean isDigit(char)>(v12);
if v32 != 0 goto label15;
if v26 == 0 goto label17;
v23 = neg v23;
label17:
v20 = v20 + v23;
label18:
if v12 != 100 goto label19;
v33 = 1;
goto label20;
label19:
v33 = 0;
label20:
if v12 != 68 goto label21;
v34 = 1;
goto label22;
label21:
v34 = 0;
label22:
v35 = v33 | v34;
if v12 != 102 goto label23;
v36 = 1;
goto label24;
label23:
v36 = 0;
label24:
v37 = v35 | v36;
if v12 != 70 goto label25;
v38 = 1;
goto label26;
label25:
v38 = 0;
label26:
v39 = v37 | v38;
if v39 == 0 goto label27;
v2 = v2 + 1;
label27:
v40 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence: int skipWhitespace(java.lang.CharSequence,int,int)>(v1, v2, v4);
if v11 != 0 goto label28;
if v40 < v4 goto label28;
if v6 != 0 goto label29;
if v19 != 0 goto label29;
label28:
v41 = new java.lang.NumberFormatException;
specialinvoke v41.<java.lang.NumberFormatException: void <init>(java.lang.String)>("illegal syntax");
throw v41;
label29:
v42 = 0;
if v19 <= 19 goto label36;
v7 = 0L;
v43 = v8;
label30:
if v43 >= v18 goto label34;
v44 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v43);
if v44 != 46 goto label31;
v42 = v42 + 1;
goto label32;
label31:
v45 = staticinvoke <java.lang.Long: int compareUnsigned(long,long)>(v7, 1000000000000000000L);
if v45 >= 0 goto label33;
v46 = 10L * v7;
v47 = v46 + v44;
v7 = v47 - 48L;
label32:
v43 = v43 + 1;
goto label30;
label33:
if v43 >= v18 goto label34;
v48 = 1;
goto label35;
label34:
v48 = 0;
label35:
v49 = v48;
v50 = v10 - v43;
v51 = v50 + v42;
v52 = v51 + v23;
goto label37;
label36:
v49 = 0;
v52 = 0;
label37:
v53 = virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence: long valueOfFloatLiteral(java.lang.CharSequence,int,int,boolean,long,int,boolean,int)>(v1, v3, v4, v5, v7, v20, v49, v52);
return v53;
}
public final long parseFloatingPointLiteral(java.lang.CharSequence, int, int)
{
long v13, v18, v19;
int v17, v2, v3, v4, v5, v7;
boolean v10, v11, v14, v15;
java.lang.CharSequence v1;
char v16, v9;
java.lang.NumberFormatException v12, v8;
java.lang.IllegalArgumentException v6;
com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence v0;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v2 + v3;
if v2 < 0 goto label01;
if v4 < v2 goto label01;
v5 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
if v4 > v5 goto label01;
if v3 <= 2147483643 goto label02;
label01:
v6 = new java.lang.IllegalArgumentException;
specialinvoke v6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("offset < 0 or length > str.length");
throw v6;
label02:
v7 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence: int skipWhitespace(java.lang.CharSequence,int,int)>(v1, v2, v4);
if v7 != v4 goto label03;
v8 = new java.lang.NumberFormatException;
specialinvoke v8.<java.lang.NumberFormatException: void <init>(java.lang.String)>("illegal syntax");
throw v8;
label03:
v9 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v7);
if v9 != 45 goto label04;
v10 = 1;
goto label05;
label04:
v10 = 0;
label05:
v11 = v10;
if v10 != 0 goto label06;
if v9 != 43 goto label07;
label06:
v7 = v7 + 1;
v9 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence: char charAt(java.lang.CharSequence,int,int)>(v1, v7, v4);
if v9 != 0 goto label07;
v12 = new java.lang.NumberFormatException;
specialinvoke v12.<java.lang.NumberFormatException: void <init>(java.lang.String)>("illegal syntax");
throw v12;
label07:
if v9 < 73 goto label08;
v13 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence: long parseNaNOrInfinity(java.lang.CharSequence,int,int,boolean)>(v1, v7, v4, v11);
return v13;
label08:
if v9 != 48 goto label09;
v14 = 1;
goto label10;
label09:
v14 = 0;
label10:
v15 = v14;
if v14 == 0 goto label12;
v7 = v7 + 1;
v16 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence: char charAt(java.lang.CharSequence,int,int)>(v1, v7, v4);
if v16 == 120 goto label11;
if v16 != 88 goto label12;
label11:
v17 = v7 + 1;
v18 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence: long parseHexFloatLiteral(java.lang.CharSequence,int,int,int,boolean)>(v1, v17, v2, v4, v11);
return v18;
label12:
v19 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence: long parseDecFloatLiteral(java.lang.CharSequence,int,int,int,boolean,boolean)>(v1, v7, v2, v4, v11, v15);
return v19;
}
private long parseHexFloatLiteral(java.lang.CharSequence, int, int, int, boolean)
{
byte v21;
boolean v11, v16, v17, v31, v32, v33, v34, v35, v36, v37, v40, v41, v42, v43, v44, v45, v46, v47, v5, v55, v56;
java.lang.CharSequence v1;
long v14, v20, v22, v54, v6, v61;
int v10, v13, v15, v18, v19, v2, v23, v24, v25, v26, v27, v28, v29, v3, v30, v38, v39, v4, v48, v50, v52, v53, v57, v58, v59, v60, v7, v8, v9;
char v12, v51;
java.lang.NumberFormatException v49;
com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence v0;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 := @parameter4: boolean;
v6 = 0L;
v7 = 0;
v8 = v2;
v9 = (int) -1;
v10 = v9;
v11 = 0;
v12 = 0;
label01:
if v2 >= v4 goto label07;
v12 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v2);
v13 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence: int lookupHex(char)>(v12);
if v13 < 0 goto label02;
v14 = v6 << 4;
v6 = v14 | v13;
goto label06;
label02:
v15 = (int) -4;
if v13 != v15 goto label07;
v16 = v11;
if v10 < 0 goto label03;
v17 = 1;
goto label04;
label03:
v17 = 0;
label04:
v11 = v16 | v17;
v10 = v2;
label05:
v18 = v4 - 8;
if v2 >= v18 goto label06;
v19 = v2 + 1;
v20 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: long tryToParseEightHexDigits(java.lang.CharSequence,int)>(v1, v19);
v21 = v20 cmp 0L;
if v21 < 0 goto label06;
v22 = v6 << 32;
v6 = v22 + v20;
v2 = v2 + 8;
goto label05;
label06:
v2 = v2 + 1;
goto label01;
label07:
v23 = v2;
if v10 >= 0 goto label08;
v24 = v2 - v8;
v10 = v2;
goto label09;
label08:
v25 = v2 - v8;
v24 = v25 - 1;
v26 = v10 - v2;
v27 = v26 + 1;
v28 = staticinvoke <java.lang.Math: int min(int,int)>(v27, 1024);
v7 = v28 * 4;
label09:
v29 = 0;
v30 = v12 | 32;
if v30 != 112 goto label10;
v31 = 1;
goto label11;
label10:
v31 = 0;
label11:
v32 = v31;
if v31 == 0 goto label21;
v2 = v2 + 1;
v12 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence: char charAt(java.lang.CharSequence,int,int)>(v1, v2, v4);
if v12 != 45 goto label12;
v33 = 1;
goto label13;
label12:
v33 = 0;
label13:
v34 = v33;
if v33 != 0 goto label14;
if v12 != 43 goto label15;
label14:
v2 = v2 + 1;
v12 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence: char charAt(java.lang.CharSequence,int,int)>(v1, v2, v4);
label15:
v35 = v11;
v36 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: boolean isDigit(char)>(v12);
if v36 != 0 goto label16;
v37 = 1;
goto label17;
label16:
v37 = 0;
label17:
v11 = v35 | v37;
label18:
if v29 >= 1024 goto label19;
v38 = 10 * v29;
v39 = v38 + v12;
v29 = v39 - 48;
label19:
v2 = v2 + 1;
v12 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence: char charAt(java.lang.CharSequence,int,int)>(v1, v2, v4);
v40 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: boolean isDigit(char)>(v12);
if v40 != 0 goto label18;
if v34 == 0 goto label20;
v29 = neg v29;
label20:
v7 = v7 + v29;
label21:
if v12 != 100 goto label22;
v41 = 1;
goto label23;
label22:
v41 = 0;
label23:
if v12 != 68 goto label24;
v42 = 1;
goto label25;
label24:
v42 = 0;
label25:
v43 = v41 | v42;
if v12 != 102 goto label26;
v44 = 1;
goto label27;
label26:
v44 = 0;
label27:
v45 = v43 | v44;
if v12 != 70 goto label28;
v46 = 1;
goto label29;
label28:
v46 = 0;
label29:
v47 = v45 | v46;
if v47 == 0 goto label30;
v2 = v2 + 1;
label30:
v48 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence: int skipWhitespace(java.lang.CharSequence,int,int)>(v1, v2, v4);
if v11 != 0 goto label31;
if v48 < v4 goto label31;
if v24 == 0 goto label31;
if v32 != 0 goto label32;
label31:
v49 = new java.lang.NumberFormatException;
specialinvoke v49.<java.lang.NumberFormatException: void <init>(java.lang.String)>("illegal syntax");
throw v49;
label32:
v50 = 0;
if v24 <= 16 goto label39;
v6 = 0L;
v48 = v8;
label33:
if v48 >= v23 goto label37;
v51 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v48);
v52 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence: int lookupHex(char)>(v51);
if v52 < 0 goto label34;
v53 = staticinvoke <java.lang.Long: int compareUnsigned(long,long)>(v6, 1000000000000000000L);
if v53 >= 0 goto label36;
v54 = v6 << 4;
v6 = v54 | v52;
goto label35;
label34:
v50 = v50 + 1;
label35:
v48 = v48 + 1;
goto label33;
label36:
if v48 >= v23 goto label37;
v55 = 1;
goto label38;
label37:
v55 = 0;
label38:
v56 = v55;
goto label40;
label39:
v56 = 0;
label40:
v57 = v10 - v48;
v58 = v57 + v50;
v59 = v58 * 4;
v60 = v59 + v29;
v61 = virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence: long valueOfHexLiteral(java.lang.CharSequence,int,int,boolean,long,int,boolean,int)>(v1, v3, v4, v5, v6, v7, v56, v60);
return v61;
}
private long parseNaNOrInfinity(java.lang.CharSequence, int, int, boolean)
{
boolean v4;
java.lang.CharSequence v1;
long v13, v32;
int v11, v12, v14, v16, v18, v2, v20, v22, v24, v26, v28, v3, v30, v31, v6, v7, v9;
char v10, v15, v17, v19, v21, v23, v25, v27, v29, v5, v8;
java.lang.NumberFormatException v33;
com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence v0;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v2);
if v5 != 78 goto label1;
v6 = v2 + 2;
if v6 >= v3 goto label4;
v7 = v2 + 1;
v8 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v7);
if v8 != 97 goto label4;
v9 = v2 + 2;
v10 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v9);
if v10 != 78 goto label4;
v11 = v2 + 3;
v12 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence: int skipWhitespace(java.lang.CharSequence,int,int)>(v1, v11, v3);
if v12 != v3 goto label4;
v13 = virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence: long nan()>();
return v13;
label1:
v14 = v2 + 7;
if v14 >= v3 goto label4;
v15 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v2);
if v15 != 73 goto label4;
v16 = v2 + 1;
v17 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v16);
if v17 != 110 goto label4;
v18 = v2 + 2;
v19 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v18);
if v19 != 102 goto label4;
v20 = v2 + 3;
v21 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v20);
if v21 != 105 goto label4;
v22 = v2 + 4;
v23 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v22);
if v23 != 110 goto label4;
v24 = v2 + 5;
v25 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v24);
if v25 != 105 goto label4;
v26 = v2 + 6;
v27 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v26);
if v27 != 116 goto label4;
v28 = v2 + 7;
v29 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v28);
if v29 != 121 goto label4;
v30 = v2 + 8;
v31 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence: int skipWhitespace(java.lang.CharSequence,int,int)>(v1, v30, v3);
if v31 != v3 goto label4;
if v4 == 0 goto label2;
v32 = virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence: long negativeInfinity()>();
goto label3;
label2:
v32 = virtualinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence: long positiveInfinity()>();
label3:
return v32;
label4:
v33 = new java.lang.NumberFormatException;
specialinvoke v33.<java.lang.NumberFormatException: void <init>(java.lang.String)>("illegal syntax");
throw v33;
}
abstract long positiveInfinity();
abstract long valueOfFloatLiteral(java.lang.CharSequence, int, int, boolean, long, int, boolean, int);
abstract long valueOfHexLiteral(java.lang.CharSequence, int, int, boolean, long, int, boolean, int);
}