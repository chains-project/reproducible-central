class com.fasterxml.jackson.core.io.doubleparser.BigSignificand extends java.lang.Object
{
private static final long LONG_MASK;
private final int numInts;
private final int[] x;
private int firstNonZeroInt;
public void <init>(long)
{
long v1, v6, v7;
java.lang.IllegalArgumentException v4;
byte v2, v3;
com.fasterxml.jackson.core.io.doubleparser.BigSignificand v0;
int[] v11;
int v10, v12, v8, v9;
java.lang.String v5;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.BigSignificand;
v1 := @parameter0: long;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = v1 cmp 0L;
if v2 <= 0 goto label1;
v3 = v1 cmp 2147483647L;
if v3 < 0 goto label2;
label1:
v4 = new java.lang.IllegalArgumentException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("numBits=\u0001");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v4;
label2:
v6 = v1 + 63L;
v7 = v6 >>> 6;
v8 = v7 + 1;
v9 = v8 << 1;
v0.<com.fasterxml.jackson.core.io.doubleparser.BigSignificand: int numInts> = v9;
v10 = v0.<com.fasterxml.jackson.core.io.doubleparser.BigSignificand: int numInts>;
v11 = newarray (int)[v10];
v0.<com.fasterxml.jackson.core.io.doubleparser.BigSignificand: int[] x> = v11;
v12 = v0.<com.fasterxml.jackson.core.io.doubleparser.BigSignificand: int numInts>;
v0.<com.fasterxml.jackson.core.io.doubleparser.BigSignificand: int firstNonZeroInt> = v12;
return;
}
public void add(int)
{
long v2, v7, v8;
byte v5;
com.fasterxml.jackson.core.io.doubleparser.BigSignificand v0;
int v1, v10, v11, v3, v4, v6, v9;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.BigSignificand;
v1 := @parameter0: int;
if v1 != 0 goto label1;
return;
label1:
v2 = v1 & 4294967295L;
v3 = v0.<com.fasterxml.jackson.core.io.doubleparser.BigSignificand: int numInts>;
v4 = v3 - 1;
label2:
v5 = v2 cmp 0L;
if v5 == 0 goto label3;
v6 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.BigSignificand: int x(int)>(v4);
v7 = v6 & 4294967295L;
v8 = v7 + v2;
specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.BigSignificand: void x(int,int)>(v4, v8);
v2 = v8 >>> 32;
v4 = v4 - 1;
goto label2;
label3:
v9 = v0.<com.fasterxml.jackson.core.io.doubleparser.BigSignificand: int firstNonZeroInt>;
v10 = v4 + 1;
v11 = staticinvoke <java.lang.Math: int min(int,int)>(v9, v10);
v0.<com.fasterxml.jackson.core.io.doubleparser.BigSignificand: int firstNonZeroInt> = v11;
return;
}
public void fma(int, int)
{
long v10, v12, v3, v8, v9;
byte v11;
com.fasterxml.jackson.core.io.doubleparser.BigSignificand v0;
int v1, v2, v4, v5, v6, v7;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.BigSignificand;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v1 & 4294967295L;
v4 = v0.<com.fasterxml.jackson.core.io.doubleparser.BigSignificand: int numInts>;
v5 = v4 - 1;
label1:
v6 = v0.<com.fasterxml.jackson.core.io.doubleparser.BigSignificand: int firstNonZeroInt>;
if v5 < v6 goto label2;
v7 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.BigSignificand: int x(int)>(v5);
v8 = v7 & 4294967295L;
v9 = v3 * v8;
v10 = v9 + v2;
specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.BigSignificand: void x(int,int)>(v5, v10);
v2 = v10 >>> 32;
v5 = v5 - 1;
goto label1;
label2:
v11 = v2 cmp 0L;
if v11 == 0 goto label3;
specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.BigSignificand: void x(int,int)>(v5, v12);
v0.<com.fasterxml.jackson.core.io.doubleparser.BigSignificand: int firstNonZeroInt> = v5;
label3:
return;
}
public java.math.BigInteger toBigInteger()
{
byte[] v4;
java.nio.ByteBuffer v5, v6;
com.fasterxml.jackson.core.io.doubleparser.BigSignificand v0;
int[] v1, v10, v8;
int v11, v2, v3, v7, v9;
java.math.BigInteger v12;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.BigSignificand;
v1 = v0.<com.fasterxml.jackson.core.io.doubleparser.BigSignificand: int[] x>;
v2 = lengthof v1;
v3 = v2 << 2;
v4 = newarray (byte)[v3];
v5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(v4);
v6 = virtualinvoke v5.<java.nio.ByteBuffer: java.nio.ByteBuffer asIntBuffer()>();
v7 = 0;
label1:
v8 = v0.<com.fasterxml.jackson.core.io.doubleparser.BigSignificand: int[] x>;
v9 = lengthof v8;
if v7 >= v9 goto label2;
v10 = v0.<com.fasterxml.jackson.core.io.doubleparser.BigSignificand: int[] x>;
v11 = v10[v7];
virtualinvoke v6.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,int)>(v7, v11);
v7 = v7 + 1;
goto label1;
label2:
v12 = new java.math.BigInteger;
specialinvoke v12.<java.math.BigInteger: void <init>(byte[])>(v4);
return v12;
}
private void x(int, int)
{
com.fasterxml.jackson.core.io.doubleparser.BigSignificand v0;
int[] v3;
int v1, v2;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.BigSignificand;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v0.<com.fasterxml.jackson.core.io.doubleparser.BigSignificand: int[] x>;
v3[v1] = v2;
return;
}
private int x(int)
{
com.fasterxml.jackson.core.io.doubleparser.BigSignificand v0;
int[] v2;
int v1, v3;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.BigSignificand;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.io.doubleparser.BigSignificand: int[] x>;
v3 = v2[v1];
return v3;
}
}