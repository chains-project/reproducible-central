final class com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector extends java.lang.Object
{
private static final int COMPLEX_SIZE_SHIFT;
private static final int IMAG;
private static final int REAL;
private final double[] a;
private final int length;
private final int offset;
void <init>(int)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v0;
double[] v3;
int v1, v2;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v1 := @parameter0: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = v1 << 1;
v3 = newarray (double)[v2];
v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a> = v3;
v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int length> = v1;
v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int offset> = 0;
return;
}
void <init>(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector, int, int)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v0, v1;
double[] v5;
int v2, v3, v4, v6;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v1 := @parameter0: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v2 := @parameter1: int;
v3 := @parameter2: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v4 = v3 - v2;
v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int length> = v4;
v5 = v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a> = v5;
v6 = v2 << 1;
v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int offset> = v6;
return;
}
void add(int, com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v0;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v2;
double[] v3, v8;
int v1, v4, v9;
double v10, v11, v12, v5, v6, v7;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v1 := @parameter0: int;
v2 := @parameter1: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v3 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v4 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int realIdx(int)>(v1);
v5 = v3[v4];
v6 = v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v7 = v5 + v6;
v3[v4] = v7;
v8 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v9 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int imagIdx(int)>(v1);
v10 = v8[v9];
v11 = v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v12 = v10 + v11;
v8[v9] = v12;
return;
}
void addInto(int, com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector, int, com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v0, v2;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v4;
double[] v10, v5;
int v1, v11, v3, v6;
double v12, v13, v14, v7, v8, v9;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v1 := @parameter0: int;
v2 := @parameter1: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v3 := @parameter2: int;
v4 := @parameter3: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v5 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v6 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int realIdx(int)>(v1);
v7 = v5[v6];
v8 = virtualinvoke v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double real(int)>(v3);
v9 = v7 + v8;
v4.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real> = v9;
v10 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v11 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int imagIdx(int)>(v1);
v12 = v10[v11];
v13 = virtualinvoke v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double imag(int)>(v3);
v14 = v12 + v13;
v4.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag> = v14;
return;
}
void addTimesIInto(int, com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector, int, com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v0, v2;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v4;
double[] v10, v5;
int v1, v11, v3, v6;
double v12, v13, v14, v7, v8, v9;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v1 := @parameter0: int;
v2 := @parameter1: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v3 := @parameter2: int;
v4 := @parameter3: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v5 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v6 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int realIdx(int)>(v1);
v7 = v5[v6];
v8 = virtualinvoke v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double imag(int)>(v3);
v9 = v7 - v8;
v4.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real> = v9;
v10 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v11 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int imagIdx(int)>(v1);
v12 = v10[v11];
v13 = virtualinvoke v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double real(int)>(v3);
v14 = v12 + v13;
v4.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag> = v14;
return;
}
void applyInverseWeights(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v0, v1;
double[] v10, v13, v20, v4, v7;
int v11, v14, v16, v2, v21, v23, v25, v3, v5, v6, v8;
double v12, v15, v17, v18, v19, v22, v24, v26, v27, v28, v9;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v1 := @parameter0: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v2 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int offset>;
v3 = v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int offset>;
v4 = v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v5 = 0;
label1:
v6 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int length>;
if v5 >= v6 goto label2;
v7 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v8 = v2 + 0;
v9 = v7[v8];
v10 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v11 = v2 + 1;
v12 = v10[v11];
v13 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v14 = v3 + 0;
v15 = v4[v14];
v16 = v3 + 1;
v17 = v4[v16];
v18 = v12 * v17;
v19 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: double fma(double,double,double)>(v9, v15, v18);
v13[v2] = v19;
v20 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v21 = v2 + 1;
v22 = neg v9;
v23 = v3 + 1;
v24 = v4[v23];
v25 = v3 + 0;
v26 = v4[v25];
v27 = v12 * v26;
v28 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: double fma(double,double,double)>(v22, v24, v27);
v20[v21] = v28;
v2 = v2 + 2;
v3 = v3 + 2;
v5 = v5 + 1;
goto label1;
label2:
return;
}
void applyWeights(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v0, v1;
double[] v12, v17, v3, v9;
int v10, v13, v14, v18, v19, v2, v4, v5, v6, v7, v8;
double v11, v15, v16, v20, v21;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v1 := @parameter0: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v2 = v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int offset>;
v3 = v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v4 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int offset>;
v5 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int length>;
v6 = v4 + v5;
v7 = v6 << 1;
v8 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int offset>;
label1:
if v8 >= v7 goto label2;
v9 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v10 = v8 + 0;
v11 = v9[v10];
v12 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v13 = v8 + 0;
v14 = v2 + 0;
v15 = v3[v14];
v16 = v11 * v15;
v12[v13] = v16;
v17 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v18 = v8 + 1;
v19 = v2 + 1;
v20 = v3[v19];
v21 = v11 * v20;
v17[v18] = v21;
v2 = v2 + 2;
v8 = v8 + 2;
goto label1;
label2:
return;
}
void copyInto(int, com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v0;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v2;
double[] v3, v6;
int v1, v4, v7;
double v5, v8;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v1 := @parameter0: int;
v2 := @parameter1: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v3 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v4 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int realIdx(int)>(v1);
v5 = v3[v4];
v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real> = v5;
v6 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v7 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int imagIdx(int)>(v1);
v8 = v6[v7];
v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag> = v8;
return;
}
double imag(int)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v0;
double[] v2;
int v1, v3, v4, v5, v6;
double v7;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v3 = v1 << 1;
v4 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int offset>;
v5 = v3 + v4;
v6 = v5 + 1;
v7 = v2[v6];
return v7;
}
void imag(int, double)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v0;
double[] v3;
int v1, v4, v5, v6, v7;
double v2;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v1 := @parameter0: int;
v2 := @parameter1: double;
v3 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v4 = v1 << 1;
v5 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int offset>;
v6 = v4 + v5;
v7 = v6 + 1;
v3[v7] = v2;
return;
}
private int imagIdx(int)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v0;
int v1, v2, v3, v4, v5;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v1 := @parameter0: int;
v2 = v1 << 1;
v3 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int offset>;
v4 = v2 + v3;
v5 = v4 + 1;
return v5;
}
void multiply(int, com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v0;
double[] v15, v5, v7, v9;
int v1, v3, v4;
double v10, v11, v12, v13, v14, v16, v17, v18, v19, v6, v8;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v2;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v1 := @parameter0: int;
v2 := @parameter1: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v3 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int realIdx(int)>(v1);
v4 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int imagIdx(int)>(v1);
v5 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v6 = v5[v3];
v7 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v8 = v7[v4];
v9 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v10 = v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v11 = neg v8;
v12 = v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v13 = v11 * v12;
v14 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: double fma(double,double,double)>(v6, v10, v13);
v9[v3] = v14;
v15 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v16 = v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v17 = v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v18 = v8 * v17;
v19 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: double fma(double,double,double)>(v6, v16, v18);
v15[v4] = v19;
return;
}
void multiplyByIAnd(int, com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v0;
double[] v16, v5, v7, v9;
int v1, v3, v4;
double v10, v11, v12, v13, v14, v15, v17, v18, v19, v20, v21, v6, v8;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v2;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v1 := @parameter0: int;
v2 := @parameter1: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v3 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int realIdx(int)>(v1);
v4 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int imagIdx(int)>(v1);
v5 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v6 = v5[v3];
v7 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v8 = v7[v4];
v9 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v10 = neg v6;
v11 = v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v12 = neg v8;
v13 = v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v14 = v12 * v13;
v15 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: double fma(double,double,double)>(v10, v11, v14);
v9[v3] = v15;
v16 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v17 = v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v18 = neg v8;
v19 = v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v20 = v18 * v19;
v21 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: double fma(double,double,double)>(v6, v17, v20);
v16[v4] = v21;
return;
}
void multiplyConjugate(int, com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v0;
double[] v14, v5, v7, v9;
int v1, v3, v4;
double v10, v11, v12, v13, v15, v16, v17, v18, v19, v6, v8;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v2;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v1 := @parameter0: int;
v2 := @parameter1: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v3 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int realIdx(int)>(v1);
v4 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int imagIdx(int)>(v1);
v5 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v6 = v5[v3];
v7 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v8 = v7[v4];
v9 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v10 = v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v11 = v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v12 = v8 * v11;
v13 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: double fma(double,double,double)>(v6, v10, v12);
v9[v3] = v13;
v14 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v15 = neg v6;
v16 = v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v17 = v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v18 = v8 * v17;
v19 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: double fma(double,double,double)>(v15, v16, v18);
v14[v4] = v19;
return;
}
void multiplyConjugateInto(int, com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex, com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v0;
double[] v4, v7;
int v1, v5, v8;
double v10, v11, v12, v13, v14, v15, v16, v17, v18, v6, v9;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v2, v3;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v1 := @parameter0: int;
v2 := @parameter1: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v3 := @parameter2: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v4 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v5 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int realIdx(int)>(v1);
v6 = v4[v5];
v7 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v8 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int imagIdx(int)>(v1);
v9 = v7[v8];
v10 = v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v11 = v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v12 = v9 * v11;
v13 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: double fma(double,double,double)>(v6, v10, v12);
v3.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real> = v13;
v14 = neg v6;
v15 = v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v16 = v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v17 = v9 * v16;
v18 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: double fma(double,double,double)>(v14, v15, v17);
v3.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag> = v18;
return;
}
void multiplyConjugateTimesI(int, com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v0;
double[] v15, v5, v7, v9;
int v1, v3, v4;
double v10, v11, v12, v13, v14, v16, v17, v18, v19, v20, v21, v6, v8;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v2;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v1 := @parameter0: int;
v2 := @parameter1: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v3 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int realIdx(int)>(v1);
v4 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int imagIdx(int)>(v1);
v5 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v6 = v5[v3];
v7 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v8 = v7[v4];
v9 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v10 = neg v6;
v11 = v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v12 = v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v13 = v8 * v12;
v14 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: double fma(double,double,double)>(v10, v11, v13);
v9[v3] = v14;
v15 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v16 = neg v6;
v17 = v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v18 = neg v8;
v19 = v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v20 = v18 * v19;
v21 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: double fma(double,double,double)>(v16, v17, v20);
v15[v4] = v21;
return;
}
void multiplyInto(int, com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex, com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v0;
double[] v4, v7;
int v1, v5, v8;
double v10, v11, v12, v13, v14, v15, v16, v17, v18, v6, v9;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v2, v3;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v1 := @parameter0: int;
v2 := @parameter1: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v3 := @parameter2: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v4 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v5 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int realIdx(int)>(v1);
v6 = v4[v5];
v7 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v8 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int imagIdx(int)>(v1);
v9 = v7[v8];
v10 = v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v11 = neg v9;
v12 = v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v13 = v11 * v12;
v14 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: double fma(double,double,double)>(v6, v10, v13);
v3.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real> = v14;
v15 = v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v16 = v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v17 = v9 * v16;
v18 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: double fma(double,double,double)>(v6, v15, v17);
v3.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag> = v18;
return;
}
void multiplyPointwise(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v0, v1;
double[] v12, v19, v24, v3, v9;
int v10, v13, v15, v17, v2, v20, v25, v4, v5, v6, v7, v8;
double v11, v14, v16, v18, v21, v22, v23, v26, v27;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v1 := @parameter0: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v2 = v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int offset>;
v3 = v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v4 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int offset>;
v5 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int length>;
v6 = v4 + v5;
v7 = v6 << 1;
v8 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int offset>;
label1:
if v8 >= v7 goto label2;
v9 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v10 = v8 + 0;
v11 = v9[v10];
v12 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v13 = v8 + 1;
v14 = v12[v13];
v15 = v2 + 0;
v16 = v3[v15];
v17 = v2 + 1;
v18 = v3[v17];
v19 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v20 = v8 + 0;
v21 = neg v14;
v22 = v21 * v18;
v23 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: double fma(double,double,double)>(v11, v16, v22);
v19[v20] = v23;
v24 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v25 = v8 + 1;
v26 = v14 * v16;
v27 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: double fma(double,double,double)>(v11, v18, v26);
v24[v25] = v27;
v2 = v2 + 2;
v8 = v8 + 2;
goto label1;
label2:
return;
}
double part(int, int)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v0;
double[] v3;
int v1, v2, v4, v5;
double v6;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v4 = v1 << 1;
v5 = v4 + v2;
v6 = v3[v5];
return v6;
}
double real(int)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v0;
double[] v2;
int v1, v3, v4, v5;
double v6;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v3 = v1 << 1;
v4 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int offset>;
v5 = v3 + v4;
v6 = v2[v5];
return v6;
}
void real(int, double)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v0;
double[] v3;
int v1, v4, v5, v6;
double v2;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v1 := @parameter0: int;
v2 := @parameter1: double;
v3 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v4 = v1 << 1;
v5 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int offset>;
v6 = v4 + v5;
v3[v6] = v2;
return;
}
private int realIdx(int)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v0;
int v1, v2, v3, v4;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v1 := @parameter0: int;
v2 = v1 << 1;
v3 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int offset>;
v4 = v2 + v3;
return v4;
}
void set(int, double, double)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v0;
double[] v5, v6;
int v1, v4, v7;
double v2, v3;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v1 := @parameter0: int;
v2 := @parameter1: double;
v3 := @parameter2: double;
v4 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int realIdx(int)>(v1);
v5 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v5[v4] = v2;
v6 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v7 = v4 + 1;
v6[v7] = v3;
return;
}
void squarePointwise()
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v0;
double[] v12, v17, v6, v9;
int v1, v10, v13, v18, v2, v3, v4, v5, v7;
double v11, v14, v15, v16, v19, v20, v8;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v1 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int offset>;
v2 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int length>;
v3 = v1 + v2;
v4 = v3 << 1;
v5 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int offset>;
label1:
if v5 >= v4 goto label2;
v6 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v7 = v5 + 0;
v8 = v6[v7];
v9 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v10 = v5 + 1;
v11 = v9[v10];
v12 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v13 = v5 + 0;
v14 = neg v11;
v15 = v14 * v11;
v16 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: double fma(double,double,double)>(v8, v8, v15);
v12[v13] = v16;
v17 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v18 = v5 + 1;
v19 = 2.0 * v8;
v20 = v19 * v11;
v17[v18] = v20;
v5 = v5 + 2;
goto label1;
label2:
return;
}
void subtractInto(int, com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector, int, com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v0, v2;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v4;
double[] v10, v5;
int v1, v11, v3, v6;
double v12, v13, v14, v7, v8, v9;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v1 := @parameter0: int;
v2 := @parameter1: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v3 := @parameter2: int;
v4 := @parameter3: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v5 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v6 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int realIdx(int)>(v1);
v7 = v5[v6];
v8 = virtualinvoke v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double real(int)>(v3);
v9 = v7 - v8;
v4.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real> = v9;
v10 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v11 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int imagIdx(int)>(v1);
v12 = v10[v11];
v13 = virtualinvoke v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double imag(int)>(v3);
v14 = v12 - v13;
v4.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag> = v14;
return;
}
void subtractTimesIInto(int, com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector, int, com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v0, v2;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v4;
double[] v10, v5;
int v1, v11, v3, v6;
double v12, v13, v14, v7, v8, v9;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v1 := @parameter0: int;
v2 := @parameter1: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v3 := @parameter2: int;
v4 := @parameter3: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v5 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v6 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int realIdx(int)>(v1);
v7 = v5[v6];
v8 = virtualinvoke v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double imag(int)>(v3);
v9 = v7 + v8;
v4.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real> = v9;
v10 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v11 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int imagIdx(int)>(v1);
v12 = v10[v11];
v13 = virtualinvoke v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double real(int)>(v3);
v14 = v12 - v13;
v4.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag> = v14;
return;
}
void timesTwoToThe(int, int)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v0;
double[] v11, v5, v7, v9;
int v1, v2, v3, v4;
double v10, v12, v6, v8;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int realIdx(int)>(v1);
v4 = specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: int imagIdx(int)>(v1);
v5 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v6 = v5[v3];
v7 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v8 = v7[v4];
v9 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v10 = staticinvoke <java.lang.Math: double scalb(double,int)>(v6, v2);
v9[v3] = v10;
v11 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double[] a>;
v12 = staticinvoke <java.lang.Math: double scalb(double,int)>(v8, v2);
v11[v4] = v12;
return;
}
}