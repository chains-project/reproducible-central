final class com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex extends java.lang.Object
{
double real;
double imag;
void <init>()
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v0;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
void add(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v0, v1;
double v2, v3, v4, v5, v6, v7;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v1 := @parameter0: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v2 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v3 = v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v4 = v2 + v3;
v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real> = v4;
v5 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v6 = v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v7 = v5 + v6;
v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag> = v7;
return;
}
void add(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector, int)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v1;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v0;
int v2;
double v3, v4, v5, v6, v7, v8;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v1 := @parameter0: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v2 := @parameter1: int;
v3 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v4 = virtualinvoke v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double real(int)>(v2);
v5 = v3 + v4;
v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real> = v5;
v6 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v7 = virtualinvoke v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double imag(int)>(v2);
v8 = v6 + v7;
v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag> = v8;
return;
}
void addInto(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex, com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v0, v1, v2;
double v3, v4, v5, v6, v7, v8;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v1 := @parameter0: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v2 := @parameter1: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v3 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v4 = v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v5 = v3 + v4;
v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real> = v5;
v6 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v7 = v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v8 = v6 + v7;
v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag> = v8;
return;
}
void addTimesI(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v0, v1;
double v2, v3, v4, v5, v6, v7;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v1 := @parameter0: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v2 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v3 = v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v4 = v2 - v3;
v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real> = v4;
v5 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v6 = v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v7 = v5 + v6;
v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag> = v7;
return;
}
void addTimesI(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector, int)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v1;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v0;
int v2;
double v3, v4, v5, v6, v7, v8;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v1 := @parameter0: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v2 := @parameter1: int;
v3 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v4 = virtualinvoke v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double imag(int)>(v2);
v5 = v3 - v4;
v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real> = v5;
v6 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v7 = virtualinvoke v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double real(int)>(v2);
v8 = v6 + v7;
v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag> = v8;
return;
}
void addTimesIInto(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex, com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v0, v1, v2;
double v3, v4, v5, v6, v7, v8;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v1 := @parameter0: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v2 := @parameter1: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v3 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v4 = v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v5 = v3 - v4;
v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real> = v5;
v6 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v7 = v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v8 = v6 + v7;
v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag> = v8;
return;
}
void copyInto(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector, int)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v1;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v0;
int v2;
double v3, v4;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v1 := @parameter0: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v2 := @parameter1: int;
v3 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
virtualinvoke v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void real(int,double)>(v2, v3);
v4 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
virtualinvoke v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void imag(int,double)>(v2, v4);
return;
}
void multiply(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v0, v1;
double v10, v11, v12, v13, v2, v3, v4, v5, v6, v7, v8, v9;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v1 := @parameter0: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v2 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v3 = v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v4 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v5 = neg v4;
v6 = v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v7 = v5 * v6;
v8 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: double fma(double,double,double)>(v2, v3, v7);
v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real> = v8;
v9 = v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v10 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v11 = v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v12 = v10 * v11;
v13 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: double fma(double,double,double)>(v2, v9, v12);
v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag> = v13;
return;
}
void multiplyConjugate(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v0, v1;
double v10, v11, v12, v13, v2, v3, v4, v5, v6, v7, v8, v9;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v1 := @parameter0: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v2 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v3 = v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v4 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v5 = v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v6 = v4 * v5;
v7 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: double fma(double,double,double)>(v2, v3, v6);
v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real> = v7;
v8 = neg v2;
v9 = v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v10 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v11 = v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v12 = v10 * v11;
v13 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: double fma(double,double,double)>(v8, v9, v12);
v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag> = v13;
return;
}
void set(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector, int)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v1;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v0;
int v2;
double v3, v4;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v1 := @parameter0: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v2 := @parameter1: int;
v3 = virtualinvoke v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double real(int)>(v2);
v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real> = v3;
v4 = virtualinvoke v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double imag(int)>(v2);
v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag> = v4;
return;
}
void squareInto(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v0, v1;
double v10, v11, v12, v2, v3, v4, v5, v6, v7, v8, v9;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v1 := @parameter0: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v2 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v3 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v4 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v5 = neg v4;
v6 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v7 = v5 * v6;
v8 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleSwar: double fma(double,double,double)>(v2, v3, v7);
v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real> = v8;
v9 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v10 = 2.0 * v9;
v11 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v12 = v10 * v11;
v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag> = v12;
return;
}
void subtract(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v0, v1;
double v2, v3, v4, v5, v6, v7;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v1 := @parameter0: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v2 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v3 = v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v4 = v2 - v3;
v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real> = v4;
v5 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v6 = v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v7 = v5 - v6;
v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag> = v7;
return;
}
void subtract(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector, int)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v1;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v0;
int v2;
double v3, v4, v5, v6, v7, v8;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v1 := @parameter0: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v2 := @parameter1: int;
v3 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v4 = virtualinvoke v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double real(int)>(v2);
v5 = v3 - v4;
v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real> = v5;
v6 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v7 = virtualinvoke v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double imag(int)>(v2);
v8 = v6 - v7;
v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag> = v8;
return;
}
void subtractInto(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex, com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v0, v1, v2;
double v3, v4, v5, v6, v7, v8;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v1 := @parameter0: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v2 := @parameter1: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v3 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v4 = v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v5 = v3 - v4;
v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real> = v5;
v6 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v7 = v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v8 = v6 - v7;
v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag> = v8;
return;
}
void subtractInto(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex, com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector, int)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v2;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v0, v1;
int v3;
double v4, v5, v6, v7, v8, v9;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v1 := @parameter0: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v2 := @parameter1: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v3 := @parameter2: int;
v4 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v5 = v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v6 = v4 - v5;
virtualinvoke v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void real(int,double)>(v3, v6);
v7 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v8 = v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v9 = v7 - v8;
virtualinvoke v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: void imag(int,double)>(v3, v9);
return;
}
void subtractTimesI(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v0, v1;
double v2, v3, v4, v5, v6, v7;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v1 := @parameter0: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v2 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v3 = v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v4 = v2 + v3;
v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real> = v4;
v5 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v6 = v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v7 = v5 - v6;
v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag> = v7;
return;
}
void subtractTimesI(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector, int)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector v1;
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v0;
int v2;
double v3, v4, v5, v6, v7, v8;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v1 := @parameter0: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector;
v2 := @parameter1: int;
v3 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v4 = virtualinvoke v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double imag(int)>(v2);
v5 = v3 + v4;
v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real> = v5;
v6 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v7 = virtualinvoke v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$ComplexVector: double real(int)>(v2);
v8 = v6 - v7;
v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag> = v8;
return;
}
void subtractTimesIInto(com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex, com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex)
{
com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex v0, v1, v2;
double v3, v4, v5, v6, v7, v8;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v1 := @parameter0: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v2 := @parameter1: com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex;
v3 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v4 = v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v5 = v3 + v4;
v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real> = v5;
v6 = v0.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag>;
v7 = v1.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double real>;
v8 = v6 - v7;
v2.<com.fasterxml.jackson.core.io.doubleparser.FftMultiplier$MutableComplex: double imag> = v8;
return;
}
}