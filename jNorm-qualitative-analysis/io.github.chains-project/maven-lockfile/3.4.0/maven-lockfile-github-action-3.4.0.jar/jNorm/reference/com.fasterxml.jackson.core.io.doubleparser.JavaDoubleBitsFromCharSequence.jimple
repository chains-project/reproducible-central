final class com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromCharSequence extends com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence
{
public void <init>()
{
com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromCharSequence v0;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromCharSequence;
specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.AbstractJavaFloatingPointBitsFromCharSequence: void <init>()>();
return;
}
long nan()
{
long v1;
com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromCharSequence v0;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromCharSequence;
v1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(#NaN);
return v1;
}
long negativeInfinity()
{
long v1;
com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromCharSequence v0;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromCharSequence;
v1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(#-Infinity);
return v1;
}
long positiveInfinity()
{
long v1;
com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromCharSequence v0;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromCharSequence;
v1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(#Infinity);
return v1;
}
long valueOfFloatLiteral(java.lang.CharSequence, int, int, boolean, long, int, boolean, int)
{
java.lang.CharSequence v1, v11;
long v14, v5;
com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromCharSequence v0;
int v2, v3, v6, v8;
java.lang.String v12;
boolean v10, v4, v7;
double v13, v9;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromCharSequence;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 := @parameter4: long;
v6 := @parameter5: int;
v7 := @parameter6: boolean;
v8 := @parameter7: int;
v9 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleMath: double tryDecFloatToDoubleTruncated(boolean,long,int,boolean,int)>(v4, v5, v6, v7, v8);
v10 = staticinvoke <java.lang.Double: boolean isNaN(double)>(v9);
if v10 == 0 goto label1;
v11 = interfaceinvoke v1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(v2, v3);
v12 = virtualinvoke v11.<java.lang.Object: java.lang.String toString()>();
v13 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(v12);
goto label2;
label1:
v13 = v9;
label2:
v14 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(v13);
return v14;
}
long valueOfHexLiteral(java.lang.CharSequence, int, int, boolean, long, int, boolean, int)
{
java.lang.CharSequence v1, v11;
long v14, v5;
com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromCharSequence v0;
int v2, v3, v6, v8;
java.lang.String v12;
boolean v10, v4, v7;
double v13, v9;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromCharSequence;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 := @parameter4: long;
v6 := @parameter5: int;
v7 := @parameter6: boolean;
v8 := @parameter7: int;
v9 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.FastDoubleMath: double tryHexFloatToDoubleTruncated(boolean,long,long,boolean,long)>(v4, v5, v6, v7, v8);
v10 = staticinvoke <java.lang.Double: boolean isNaN(double)>(v9);
if v10 == 0 goto label1;
v11 = interfaceinvoke v1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(v2, v3);
v12 = virtualinvoke v11.<java.lang.Object: java.lang.String toString()>();
v13 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(v12);
goto label2;
label1:
v13 = v9;
label2:
v14 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(v13);
return v14;
}
}