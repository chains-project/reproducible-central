public class com.fasterxml.jackson.core.io.doubleparser.JavaDoubleParser extends java.lang.Object
{
private static final com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromByteArray BYTE_ARRAY_PARSER;
private static final com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromCharArray CHAR_ARRAY_PARSER;
private static final com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromCharSequence CHAR_SEQUENCE_PARSER;
private void <init>()
{
com.fasterxml.jackson.core.io.doubleparser.JavaDoubleParser v0;
v0 := @this: com.fasterxml.jackson.core.io.doubleparser.JavaDoubleParser;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static double parseDouble(java.lang.CharSequence) throws java.lang.NumberFormatException
{
int v1;
java.lang.CharSequence v0;
double v2;
v0 := @parameter0: java.lang.CharSequence;
v1 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v2 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.JavaDoubleParser: double parseDouble(java.lang.CharSequence,int,int)>(v0, 0, v1);
return v2;
}
public static double parseDouble(java.lang.CharSequence, int, int) throws java.lang.NumberFormatException
{
java.lang.CharSequence v0;
int v1, v2;
long v4;
com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromCharSequence v3;
double v5;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = <com.fasterxml.jackson.core.io.doubleparser.JavaDoubleParser: com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromCharSequence CHAR_SEQUENCE_PARSER>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromCharSequence: long parseFloatingPointLiteral(java.lang.CharSequence,int,int)>(v0, v1, v2);
v5 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(v4);
return v5;
}
public static double parseDouble(byte[]) throws java.lang.NumberFormatException
{
int v1;
byte[] v0;
double v2;
v0 := @parameter0: byte[];
v1 = lengthof v0;
v2 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.JavaDoubleParser: double parseDouble(byte[],int,int)>(v0, 0, v1);
return v2;
}
public static double parseDouble(byte[], int, int) throws java.lang.NumberFormatException
{
byte[] v0;
com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromByteArray v3;
int v1, v2;
long v4;
double v5;
v0 := @parameter0: byte[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = <com.fasterxml.jackson.core.io.doubleparser.JavaDoubleParser: com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromByteArray BYTE_ARRAY_PARSER>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromByteArray: long parseFloatingPointLiteral(byte[],int,int)>(v0, v1, v2);
v5 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(v4);
return v5;
}
public static double parseDouble(char[]) throws java.lang.NumberFormatException
{
int v1;
char[] v0;
double v2;
v0 := @parameter0: char[];
v1 = lengthof v0;
v2 = staticinvoke <com.fasterxml.jackson.core.io.doubleparser.JavaDoubleParser: double parseDouble(char[],int,int)>(v0, 0, v1);
return v2;
}
public static double parseDouble(char[], int, int) throws java.lang.NumberFormatException
{
int v1, v2;
char[] v0;
long v4;
com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromCharArray v3;
double v5;
v0 := @parameter0: char[];
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = <com.fasterxml.jackson.core.io.doubleparser.JavaDoubleParser: com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromCharArray CHAR_ARRAY_PARSER>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromCharArray: long parseFloatingPointLiteral(char[],int,int)>(v0, v1, v2);
v5 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(v4);
return v5;
}
static void <clinit>()
{
com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromCharArray v1;
com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromCharSequence v2;
com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromByteArray v0;
v0 = new com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromByteArray;
specialinvoke v0.<com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromByteArray: void <init>()>();
<com.fasterxml.jackson.core.io.doubleparser.JavaDoubleParser: com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromByteArray BYTE_ARRAY_PARSER> = v0;
v1 = new com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromCharArray;
specialinvoke v1.<com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromCharArray: void <init>()>();
<com.fasterxml.jackson.core.io.doubleparser.JavaDoubleParser: com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromCharArray CHAR_ARRAY_PARSER> = v1;
v2 = new com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromCharSequence;
specialinvoke v2.<com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromCharSequence: void <init>()>();
<com.fasterxml.jackson.core.io.doubleparser.JavaDoubleParser: com.fasterxml.jackson.core.io.doubleparser.JavaDoubleBitsFromCharSequence CHAR_SEQUENCE_PARSER> = v2;
return;
}
}