public class com.fasterxml.jackson.core.json.ReaderBasedJsonParser extends com.fasterxml.jackson.core.base.ParserBase
{
private static final int FEAT_MASK_TRAILING_COMMA;
private static final int FEAT_MASK_LEADING_ZEROS;
private static final int FEAT_MASK_NON_NUM_NUMBERS;
private static final int FEAT_MASK_ALLOW_MISSING;
private static final int FEAT_MASK_ALLOW_SINGLE_QUOTES;
private static final int FEAT_MASK_ALLOW_UNQUOTED_NAMES;
private static final int FEAT_MASK_ALLOW_JAVA_COMMENTS;
private static final int FEAT_MASK_ALLOW_YAML_COMMENTS;
protected static final int[] _icLatin1;
protected java.io.Reader _reader;
protected char[] _inputBuffer;
protected boolean _bufferRecyclable;
protected com.fasterxml.jackson.core.ObjectCodec _objectCodec;
protected final com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer _symbols;
protected final int _hashSeed;
protected boolean _tokenIncomplete;
protected long _nameStartOffset;
protected int _nameStartRow;
protected int _nameStartCol;
public void <init>(com.fasterxml.jackson.core.io.IOContext, int, java.io.Reader, com.fasterxml.jackson.core.ObjectCodec, com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer, char[], int, int, boolean)
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer v5;
com.fasterxml.jackson.core.ObjectCodec v4;
java.io.Reader v3;
com.fasterxml.jackson.core.io.IOContext v1;
int v10, v11, v2, v7, v8;
char[] v6;
boolean v9;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.io.IOContext;
v2 := @parameter1: int;
v3 := @parameter2: java.io.Reader;
v4 := @parameter3: com.fasterxml.jackson.core.ObjectCodec;
v5 := @parameter4: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
v6 := @parameter5: char[];
v7 := @parameter6: int;
v8 := @parameter7: int;
v9 := @parameter8: boolean;
specialinvoke v0.<com.fasterxml.jackson.core.base.ParserBase: void <init>(com.fasterxml.jackson.core.io.IOContext,int)>(v1, v2);
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.io.Reader _reader> = v3;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.ObjectCodec _objectCodec> = v4;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer> = v6;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v7;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd> = v8;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRowStart> = v7;
v10 = neg v7;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: long _currInputProcessed> = v10;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer _symbols> = v5;
v11 = virtualinvoke v5.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int hashSeed()>();
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _hashSeed> = v11;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _bufferRecyclable> = v9;
return;
}
public void <init>(com.fasterxml.jackson.core.io.IOContext, int, java.io.Reader, com.fasterxml.jackson.core.ObjectCodec, com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer)
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer v5;
com.fasterxml.jackson.core.ObjectCodec v4;
java.io.Reader v3;
com.fasterxml.jackson.core.io.IOContext v1;
int v2, v7;
char[] v6;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.io.IOContext;
v2 := @parameter1: int;
v3 := @parameter2: java.io.Reader;
v4 := @parameter3: com.fasterxml.jackson.core.ObjectCodec;
v5 := @parameter4: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
specialinvoke v0.<com.fasterxml.jackson.core.base.ParserBase: void <init>(com.fasterxml.jackson.core.io.IOContext,int)>(v1, v2);
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.io.Reader _reader> = v3;
v6 = virtualinvoke v1.<com.fasterxml.jackson.core.io.IOContext: char[] allocTokenBuffer()>();
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer> = v6;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = 0;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd> = 0;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.ObjectCodec _objectCodec> = v4;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer _symbols> = v5;
v7 = virtualinvoke v5.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: int hashSeed()>();
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _hashSeed> = v7;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _bufferRecyclable> = 1;
return;
}
public com.fasterxml.jackson.core.ObjectCodec getCodec()
{
com.fasterxml.jackson.core.ObjectCodec v1;
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.ObjectCodec _objectCodec>;
return v1;
}
public void setCodec(com.fasterxml.jackson.core.ObjectCodec)
{
com.fasterxml.jackson.core.ObjectCodec v1;
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.ObjectCodec;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.ObjectCodec _objectCodec> = v1;
return;
}
public com.fasterxml.jackson.core.util.JacksonFeatureSet getReadCapabilities()
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
com.fasterxml.jackson.core.util.JacksonFeatureSet v1;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = <com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.JacksonFeatureSet JSON_READ_CAPABILITIES>;
return v1;
}
public int releaseBuffered(java.io.Writer) throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
int v2, v3, v4, v5, v6, v7;
java.io.Writer v1;
char[] v8;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: java.io.Writer;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
v3 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v4 = v2 - v3;
if v4 >= 1 goto label1;
return 0;
label1:
v5 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v6 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v7 = v6 + v4;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v7;
v8 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
virtualinvoke v1.<java.io.Writer: void write(char[],int,int)>(v8, v5, v4);
return v4;
}
public java.lang.Object getInputSource()
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
java.io.Reader v1;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.io.Reader _reader>;
return v1;
}
protected char getNextChar(java.lang.String) throws java.io.IOException
{
char v2;
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
java.lang.String v1;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char getNextChar(java.lang.String,com.fasterxml.jackson.core.JsonToken)>(v1, null);
return v2;
}
protected char getNextChar(java.lang.String, com.fasterxml.jackson.core.JsonToken) throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
char v9;
int v3, v4, v7, v8;
char[] v6;
com.fasterxml.jackson.core.JsonToken v2;
java.lang.String v1;
boolean v5;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: com.fasterxml.jackson.core.JsonToken;
v3 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v3 < v4 goto label1;
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _loadMore()>();
if v5 != 0 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)>(v1, v2);
label1:
v6 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v7 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v8 = v7 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v8;
v9 = v6[v7];
return v9;
}
protected void _closeInput() throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser$Feature v4;
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
com.fasterxml.jackson.core.io.IOContext v2;
java.io.Reader v1, v6;
boolean v3, v5;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.io.Reader _reader>;
if v1 == null goto label3;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.io.IOContext _ioContext>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.io.IOContext: boolean isResourceManaged()>();
if v3 != 0 goto label1;
v4 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature AUTO_CLOSE_SOURCE>;
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v4);
if v5 == 0 goto label2;
label1:
v6 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.io.Reader _reader>;
virtualinvoke v6.<java.io.Reader: void close()>();
label2:
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.io.Reader _reader> = null;
label3:
return;
}
protected void _releaseBuffers() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer v1;
com.fasterxml.jackson.core.io.IOContext v4;
char[] v3;
boolean v2;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
specialinvoke v0.<com.fasterxml.jackson.core.base.ParserBase: void _releaseBuffers()>();
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer _symbols>;
virtualinvoke v1.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: void release()>();
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _bufferRecyclable>;
if v2 == 0 goto label1;
v3 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
if v3 == null goto label1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer> = null;
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.io.IOContext _ioContext>;
virtualinvoke v4.<com.fasterxml.jackson.core.io.IOContext: void releaseTokenBuffer(char[])>(v3);
label1:
return;
}
protected void _loadMoreGuaranteed() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
boolean v1;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _loadMore()>();
if v1 != 0 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportInvalidEOF()>();
label1:
return;
}
protected boolean _loadMore() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
long v12, v13, v8, v9;
int v10, v11, v15, v5, v6, v7;
java.lang.String v16;
java.io.IOException v14;
java.io.Reader v1, v2;
char[] v3, v4;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.io.Reader _reader>;
if v1 == null goto label2;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.io.Reader _reader>;
v3 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v5 = lengthof v4;
v6 = virtualinvoke v2.<java.io.Reader: int read(char[],int,int)>(v3, 0, v5);
if v6 <= 0 goto label1;
v7 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
v8 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: long _currInputProcessed>;
v9 = v8 + v7;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: long _currInputProcessed> = v9;
v10 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRowStart>;
v11 = v10 - v7;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRowStart> = v11;
v12 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: long _nameStartOffset>;
v13 = v12 - v7;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: long _nameStartOffset> = v13;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = 0;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd> = v6;
return 1;
label1:
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _closeInput()>();
if v6 != 0 goto label2;
v14 = new java.io.IOException;
v15 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
v16 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v15) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Reader returned 0 characters when trying to read \u0001");
specialinvoke v14.<java.io.IOException: void <init>(java.lang.String)>(v16);
throw v14;
label2:
return 0;
}
public final java.lang.String getText() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
com.fasterxml.jackson.core.util.TextBuffer v4;
com.fasterxml.jackson.core.JsonToken v1, v2, v6;
java.lang.String v5, v7;
boolean v3;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v1 != v2 goto label2;
v3 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _tokenIncomplete>;
if v3 == 0 goto label1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _tokenIncomplete> = 0;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _finishString()>();
label1:
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();
return v5;
label2:
v6 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v7 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.lang.String _getText2(com.fasterxml.jackson.core.JsonToken)>(v6);
return v7;
}
public int getText(java.io.Writer) throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
com.fasterxml.jackson.core.json.JsonReadContext v8;
int v10, v13, v15, v6;
com.fasterxml.jackson.core.JsonToken v2, v3, v7;
java.lang.String v9;
boolean v11, v4;
com.fasterxml.jackson.core.util.TextBuffer v12, v5;
java.io.Writer v1;
char[] v14;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: java.io.Writer;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v2 != v3 goto label2;
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _tokenIncomplete>;
if v4 == 0 goto label1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _tokenIncomplete> = 0;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _finishString()>();
label1:
v5 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v6 = virtualinvoke v5.<com.fasterxml.jackson.core.util.TextBuffer: int contentsToWriter(java.io.Writer)>(v1);
return v6;
label2:
v7 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v2 != v7 goto label3;
v8 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v9 = virtualinvoke v8.<com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String getCurrentName()>();
virtualinvoke v1.<java.io.Writer: void write(java.lang.String)>(v9);
v10 = virtualinvoke v9.<java.lang.String: int length()>();
return v10;
label3:
if v2 == null goto label5;
v11 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonToken: boolean isNumeric()>();
if v11 == 0 goto label4;
v12 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v13 = virtualinvoke v12.<com.fasterxml.jackson.core.util.TextBuffer: int contentsToWriter(java.io.Writer)>(v1);
return v13;
label4:
v14 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonToken: char[] asCharArray()>();
virtualinvoke v1.<java.io.Writer: void write(char[])>(v14);
v15 = lengthof v14;
return v15;
label5:
return 0;
}
public final java.lang.String getValueAsString() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
com.fasterxml.jackson.core.util.TextBuffer v4;
com.fasterxml.jackson.core.JsonToken v1, v2, v6, v7;
java.lang.String v5, v8, v9;
boolean v3;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v1 != v2 goto label2;
v3 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _tokenIncomplete>;
if v3 == 0 goto label1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _tokenIncomplete> = 0;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _finishString()>();
label1:
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();
return v5;
label2:
v6 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v7 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v6 != v7 goto label3;
v8 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.lang.String getCurrentName()>();
return v8;
label3:
v9 = specialinvoke v0.<com.fasterxml.jackson.core.base.ParserBase: java.lang.String getValueAsString(java.lang.String)>(null);
return v9;
}
public final java.lang.String getValueAsString(java.lang.String) throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
com.fasterxml.jackson.core.util.TextBuffer v5;
com.fasterxml.jackson.core.JsonToken v2, v3, v7, v8;
java.lang.String v1, v10, v6, v9;
boolean v4;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: java.lang.String;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v2 != v3 goto label2;
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _tokenIncomplete>;
if v4 == 0 goto label1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _tokenIncomplete> = 0;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _finishString()>();
label1:
v5 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v6 = virtualinvoke v5.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();
return v6;
label2:
v7 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v8 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v7 != v8 goto label3;
v9 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.lang.String getCurrentName()>();
return v9;
label3:
v10 = specialinvoke v0.<com.fasterxml.jackson.core.base.ParserBase: java.lang.String getValueAsString(java.lang.String)>(v1);
return v10;
}
protected final java.lang.String _getText2(com.fasterxml.jackson.core.JsonToken) throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
com.fasterxml.jackson.core.json.JsonReadContext v3;
com.fasterxml.jackson.core.util.TextBuffer v5;
int v2;
com.fasterxml.jackson.core.JsonToken v1;
java.lang.String v4, v6, v7;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.JsonToken;
if v1 != null goto label1;
return null;
label1:
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonToken: int id()>();
tableswitch(v2)
{
case 5: goto label2;
case 6: goto label3;
case 7: goto label3;
case 8: goto label3;
default: goto label4;
};
label2:
v3 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String getCurrentName()>();
return v4;
label3:
v5 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v6 = virtualinvoke v5.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();
return v6;
label4:
v7 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonToken: java.lang.String asString()>();
return v7;
}
public final char[] getTextCharacters() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
com.fasterxml.jackson.core.json.JsonReadContext v5;
int v12, v3, v7;
com.fasterxml.jackson.core.JsonToken v1, v19, v2;
java.lang.String v6;
boolean v16, v4;
com.fasterxml.jackson.core.util.TextBuffer v17;
com.fasterxml.jackson.core.io.IOContext v9;
char[] v10, v11, v13, v14, v15, v18, v20, v8;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
if v1 == null goto label8;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonToken: int id()>();
tableswitch(v3)
{
case 5: goto label1;
case 6: goto label5;
case 7: goto label6;
case 8: goto label6;
default: goto label7;
};
label1:
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _nameCopied>;
if v4 != 0 goto label4;
v5 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v6 = virtualinvoke v5.<com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String getCurrentName()>();
v7 = virtualinvoke v6.<java.lang.String: int length()>();
v8 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _nameCopyBuffer>;
if v8 != null goto label2;
v9 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.io.IOContext _ioContext>;
v10 = virtualinvoke v9.<com.fasterxml.jackson.core.io.IOContext: char[] allocNameCopyBuffer(int)>(v7);
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _nameCopyBuffer> = v10;
goto label3;
label2:
v11 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _nameCopyBuffer>;
v12 = lengthof v11;
if v12 >= v7 goto label3;
v13 = newarray (char)[v7];
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _nameCopyBuffer> = v13;
label3:
v14 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _nameCopyBuffer>;
virtualinvoke v6.<java.lang.String: void getChars(int,int,char[],int)>(0, v7, v14, 0);
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _nameCopied> = 1;
label4:
v15 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _nameCopyBuffer>;
return v15;
label5:
v16 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _tokenIncomplete>;
if v16 == 0 goto label6;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _tokenIncomplete> = 0;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _finishString()>();
label6:
v17 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v18 = virtualinvoke v17.<com.fasterxml.jackson.core.util.TextBuffer: char[] getTextBuffer()>();
return v18;
label7:
v19 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v20 = virtualinvoke v19.<com.fasterxml.jackson.core.JsonToken: char[] asCharArray()>();
return v20;
label8:
return null;
}
public final int getTextLength() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
com.fasterxml.jackson.core.json.JsonReadContext v4;
com.fasterxml.jackson.core.util.TextBuffer v8;
int v12, v3, v6, v9;
char[] v11;
com.fasterxml.jackson.core.JsonToken v1, v10, v2;
java.lang.String v5;
boolean v7;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
if v1 == null goto label5;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonToken: int id()>();
tableswitch(v3)
{
case 5: goto label1;
case 6: goto label2;
case 7: goto label3;
case 8: goto label3;
default: goto label4;
};
label1:
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String getCurrentName()>();
v6 = virtualinvoke v5.<java.lang.String: int length()>();
return v6;
label2:
v7 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _tokenIncomplete>;
if v7 == 0 goto label3;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _tokenIncomplete> = 0;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _finishString()>();
label3:
v8 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v9 = virtualinvoke v8.<com.fasterxml.jackson.core.util.TextBuffer: int size()>();
return v9;
label4:
v10 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v11 = virtualinvoke v10.<com.fasterxml.jackson.core.JsonToken: char[] asCharArray()>();
v12 = lengthof v11;
return v12;
label5:
return 0;
}
public final int getTextOffset() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
int v3, v6;
com.fasterxml.jackson.core.JsonToken v1, v2;
com.fasterxml.jackson.core.util.TextBuffer v5;
boolean v4;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
if v1 == null goto label4;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonToken: int id()>();
tableswitch(v3)
{
case 5: goto label1;
case 6: goto label2;
case 7: goto label3;
case 8: goto label3;
default: goto label4;
};
label1:
return 0;
label2:
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _tokenIncomplete>;
if v4 == 0 goto label3;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _tokenIncomplete> = 0;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _finishString()>();
label3:
v5 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v6 = virtualinvoke v5.<com.fasterxml.jackson.core.util.TextBuffer: int getTextOffset()>();
return v6;
label4:
return 0;
}
public byte[] getBinaryValue(com.fasterxml.jackson.core.Base64Variant) throws java.io.IOException
{
byte[] v11, v16, v19, v20, v4, v5;
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
com.fasterxml.jackson.core.JsonToken v2, v3, v6, v7, v8;
java.lang.String v13, v14, v18, v9;
com.fasterxml.jackson.core.JsonParseException v15;
boolean v10;
java.lang.IllegalArgumentException v12;
com.fasterxml.jackson.core.Base64Variant v1;
com.fasterxml.jackson.core.util.ByteArrayBuilder v17;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.Base64Variant;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_EMBEDDED_OBJECT>;
if v2 != v3 goto label1;
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: byte[] _binaryValue>;
if v4 == null goto label1;
v5 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: byte[] _binaryValue>;
return v5;
label1:
v6 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v7 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v6 == v7 goto label2;
v8 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (com.fasterxml.jackson.core.JsonToken)>(v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Current token (\u0001) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportError(java.lang.String)>(v9);
label2:
v10 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _tokenIncomplete>;
if v10 == 0 goto label7;
label3:
v11 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: byte[] _decodeBase64(com.fasterxml.jackson.core.Base64Variant)>(v1);
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: byte[] _binaryValue> = v11;
label4:
goto label6;
label5:
v12 := @caughtexception;
v13 = virtualinvoke v12.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (com.fasterxml.jackson.core.Base64Variant,java.lang.String)>(v1, v13) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to decode VALUE_STRING as base64 (\u0001): \u0001");
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonParseException _constructError(java.lang.String)>(v14);
throw v15;
label6:
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _tokenIncomplete> = 0;
goto label8;
label7:
v16 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: byte[] _binaryValue>;
if v16 != null goto label8;
v17 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.ByteArrayBuilder _getByteArrayBuilder()>();
v18 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.lang.String getText()>();
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _decodeBase64(java.lang.String,com.fasterxml.jackson.core.util.ByteArrayBuilder,com.fasterxml.jackson.core.Base64Variant)>(v18, v17, v1);
v19 = virtualinvoke v17.<com.fasterxml.jackson.core.util.ByteArrayBuilder: byte[] toByteArray()>();
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: byte[] _binaryValue> = v19;
label8:
v20 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: byte[] _binaryValue>;
return v20;
catch java.lang.IllegalArgumentException from label3 to label4 with label5;
}
public int readBinaryValue(com.fasterxml.jackson.core.Base64Variant, java.io.OutputStream) throws java.io.IOException
{
java.io.OutputStream v2;
java.lang.Throwable v12;
byte[] v6, v9;
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
com.fasterxml.jackson.core.Base64Variant v1;
com.fasterxml.jackson.core.io.IOContext v11, v13, v8;
int v10, v7;
com.fasterxml.jackson.core.JsonToken v4, v5;
boolean v3;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.Base64Variant;
v2 := @parameter1: java.io.OutputStream;
v3 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _tokenIncomplete>;
if v3 == 0 goto label1;
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v5 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v4 == v5 goto label2;
label1:
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: byte[] getBinaryValue(com.fasterxml.jackson.core.Base64Variant)>(v1);
virtualinvoke v2.<java.io.OutputStream: void write(byte[])>(v6);
v7 = lengthof v6;
return v7;
label2:
v8 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.io.IOContext _ioContext>;
v9 = virtualinvoke v8.<com.fasterxml.jackson.core.io.IOContext: byte[] allocBase64Buffer()>();
label3:
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _readBinary(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream,byte[])>(v1, v2, v9);
label4:
v11 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.io.IOContext _ioContext>;
virtualinvoke v11.<com.fasterxml.jackson.core.io.IOContext: void releaseBase64Buffer(byte[])>(v9);
return v10;
label5:
v12 := @caughtexception;
v13 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.io.IOContext _ioContext>;
virtualinvoke v13.<com.fasterxml.jackson.core.io.IOContext: void releaseBase64Buffer(byte[])>(v9);
throw v12;
catch java.lang.Throwable from label3 to label4 with label5;
}
protected int _readBinary(com.fasterxml.jackson.core.Base64Variant, java.io.OutputStream, byte[]) throws java.io.IOException
{
byte[] v3;
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
java.lang.String v49;
char[] v10, v18, v27, v41, v57;
boolean v35, v45, v66;
com.fasterxml.jackson.core.Base64Variant v1;
int v11, v12, v14, v15, v16, v17, v19, v20, v22, v23, v24, v25, v26, v28, v29, v31, v32, v33, v34, v36, v37, v38, v39, v4, v40, v42, v43, v46, v47, v5, v51, v52, v53, v54, v55, v56, v58, v59, v6, v61, v62, v63, v64, v65, v67, v68, v69, v7, v70, v71, v72, v73, v74, v75, v76, v77, v78, v8, v9;
java.io.OutputStream v2;
char v13, v21, v30, v44, v48, v60;
java.lang.IllegalArgumentException v50;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.Base64Variant;
v2 := @parameter1: java.io.OutputStream;
v3 := @parameter2: byte[];
v4 = 0;
v5 = lengthof v3;
v6 = v5 - 3;
v7 = 0;
label01:
v8 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v9 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v8 < v9 goto label02;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _loadMoreGuaranteed()>();
label02:
v10 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v11 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v12 = v11 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v12;
v13 = v10[v11];
if v13 <= 32 goto label01;
v14 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(char)>(v13);
if v14 >= 0 goto label03;
if v13 == 34 goto label17;
v14 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,char,int)>(v1, v13, 0);
if v14 < 0 goto label01;
label03:
if v4 <= v6 goto label04;
v7 = v7 + v4;
virtualinvoke v2.<java.io.OutputStream: void write(byte[],int,int)>(v3, 0, v4);
v4 = 0;
label04:
v15 = v14;
v16 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v17 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v16 < v17 goto label05;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _loadMoreGuaranteed()>();
label05:
v18 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v19 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v20 = v19 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v20;
v21 = v18[v19];
v22 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(char)>(v21);
if v22 >= 0 goto label06;
v22 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,char,int)>(v1, v21, 1);
label06:
v23 = v15 << 6;
v24 = v23 | v22;
v25 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v26 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v25 < v26 goto label07;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _loadMoreGuaranteed()>();
label07:
v27 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v28 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v29 = v28 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v29;
v30 = v27[v28];
v31 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(char)>(v30);
if v31 >= 0 goto label12;
v32 = (int) -2;
if v31 == v32 goto label09;
if v30 != 34 goto label08;
v33 = v24 >> 4;
v34 = v4;
v4 = v4 + 1;
v3[v34] = v33;
v35 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: boolean requiresPaddingOnRead()>();
if v35 == 0 goto label17;
v36 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v37 = v36 - 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v37;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _handleBase64MissingPadding(com.fasterxml.jackson.core.Base64Variant)>(v1);
goto label17;
label08:
v31 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,char,int)>(v1, v30, 2);
label09:
v38 = (int) -2;
if v31 != v38 goto label12;
v39 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v40 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v39 < v40 goto label10;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _loadMoreGuaranteed()>();
label10:
v41 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v42 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v43 = v42 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v43;
v44 = v41[v42];
v45 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: boolean usesPaddingChar(char)>(v44);
if v45 != 0 goto label11;
v46 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,char,int)>(v1, v44, 3);
v47 = (int) -2;
if v46 == v47 goto label11;
v48 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: char getPaddingChar()>();
v49 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (char)>(v48) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("expected padding character \'\u0001\'");
v50 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.lang.IllegalArgumentException reportInvalidBase64Char(com.fasterxml.jackson.core.Base64Variant,int,int,java.lang.String)>(v1, v44, 3, v49);
throw v50;
label11:
v51 = v24 >> 4;
v52 = v4;
v4 = v4 + 1;
v3[v52] = v51;
goto label01;
label12:
v53 = v24 << 6;
v54 = v53 | v31;
v55 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v56 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v55 < v56 goto label13;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _loadMoreGuaranteed()>();
label13:
v57 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v58 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v59 = v58 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v59;
v60 = v57[v58];
v61 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(char)>(v60);
if v61 >= 0 goto label16;
v62 = (int) -2;
if v61 == v62 goto label15;
if v60 != 34 goto label14;
v63 = v54 >> 2;
v64 = v4 + 1;
v65 = v63 >> 8;
v3[v4] = v65;
v4 = v64 + 1;
v3[v64] = v63;
v66 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: boolean requiresPaddingOnRead()>();
if v66 == 0 goto label17;
v67 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v68 = v67 - 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v68;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _handleBase64MissingPadding(com.fasterxml.jackson.core.Base64Variant)>(v1);
goto label17;
label14:
v61 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,char,int)>(v1, v60, 3);
label15:
v69 = (int) -2;
if v61 != v69 goto label16;
v70 = v54 >> 2;
v71 = v4 + 1;
v72 = v70 >> 8;
v3[v4] = v72;
v4 = v71 + 1;
v3[v71] = v70;
goto label01;
label16:
v73 = v54 << 6;
v74 = v73 | v61;
v75 = v4 + 1;
v76 = v74 >> 16;
v3[v4] = v76;
v77 = v75 + 1;
v78 = v74 >> 8;
v3[v75] = v78;
v4 = v77 + 1;
v3[v77] = v74;
goto label01;
label17:
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _tokenIncomplete> = 0;
if v4 <= 0 goto label18;
v7 = v7 + v4;
virtualinvoke v2.<java.io.OutputStream: void write(byte[],int,int)>(v3, 0, v4);
label18:
return v7;
}
public final com.fasterxml.jackson.core.JsonToken nextToken() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
com.fasterxml.jackson.core.json.JsonReadContext v13, v16, v7;
com.fasterxml.jackson.core.JsonParser$Feature v24;
com.fasterxml.jackson.core.json.JsonReadFeature v23;
int v10, v11, v19, v20, v21, v22, v5, v9;
com.fasterxml.jackson.core.JsonToken v1, v12, v17, v18, v2, v26, v3, v6;
java.lang.String v15;
boolean v14, v25, v4, v8;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v1 != v2 goto label01;
v3 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _nextAfterName()>();
return v3;
label01:
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _numTypesValid> = 0;
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _tokenIncomplete>;
if v4 == 0 goto label02;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _skipString()>();
label02:
v5 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _skipWSOrEnd()>();
if v5 >= 0 goto label03;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void close()>();
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = null;
return null;
label03:
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: byte[] _binaryValue> = null;
if v5 == 93 goto label04;
if v5 != 125 goto label05;
label04:
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _closeScope(int)>(v5);
v6 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
return v6;
label05:
v7 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v8 = virtualinvoke v7.<com.fasterxml.jackson.core.json.JsonReadContext: boolean expectComma()>();
if v8 == 0 goto label07;
v5 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _skipComma(int)>(v5);
v9 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _features>;
v10 = <com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int FEAT_MASK_TRAILING_COMMA>;
v11 = v9 & v10;
if v11 == 0 goto label07;
if v5 == 93 goto label06;
if v5 != 125 goto label07;
label06:
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _closeScope(int)>(v5);
v12 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
return v12;
label07:
v13 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v14 = virtualinvoke v13.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inObject()>();
if v14 == 0 goto label10;
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _updateNameLocation()>();
if v5 != 34 goto label08;
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.lang.String _parseName()>();
goto label09;
label08:
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.lang.String _handleOddName(int)>(v5);
label09:
v16 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
virtualinvoke v16.<com.fasterxml.jackson.core.json.JsonReadContext: void setCurrentName(java.lang.String)>(v15);
v17 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v17;
v5 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _skipColon()>();
label10:
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _updateLocation()>();
lookupswitch(v5)
{
case 34: goto label11;
case 43: goto label21;
case 45: goto label20;
case 46: goto label23;
case 48: goto label24;
case 49: goto label24;
case 50: goto label24;
case 51: goto label24;
case 52: goto label24;
case 53: goto label24;
case 54: goto label24;
case 55: goto label24;
case 56: goto label24;
case 57: goto label24;
case 91: goto label12;
case 102: goto label18;
case 110: goto label19;
case 116: goto label17;
case 123: goto label14;
case 125: goto label16;
default: goto label25;
};
label11:
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _tokenIncomplete> = 1;
v18 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
goto label26;
label12:
if v14 != 0 goto label13;
v19 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _tokenInputRow>;
v20 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void createChildArrayContext(int,int)>(v19, v20);
label13:
v18 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
goto label26;
label14:
if v14 != 0 goto label15;
v21 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _tokenInputRow>;
v22 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void createChildObjectContext(int,int)>(v21, v22);
label15:
v18 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
goto label26;
label16:
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(v5, "expected a value");
label17:
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _matchTrue()>();
v18 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;
goto label26;
label18:
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _matchFalse()>();
v18 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;
goto label26;
label19:
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _matchNull()>();
v18 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;
goto label26;
label20:
v18 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parseSignedNumber(boolean)>(1);
goto label26;
label21:
v23 = <com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS>;
v24 = virtualinvoke v23.<com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();
v25 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v24);
if v25 == 0 goto label22;
v18 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parseSignedNumber(boolean)>(0);
goto label26;
label22:
v18 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _handleOddValue(int)>(v5);
goto label26;
label23:
v18 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parseFloatThatStartsWithPeriod(boolean)>(0);
goto label26;
label24:
v18 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parseUnsignedNumber(int)>(v5);
goto label26;
label25:
v18 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _handleOddValue(int)>(v5);
label26:
if v14 == 0 goto label27;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v18;
v26 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
return v26;
label27:
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v18;
return v18;
}
private final com.fasterxml.jackson.core.JsonToken _nextAfterName() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
int v3, v4, v6, v7;
com.fasterxml.jackson.core.JsonToken v1, v2, v5;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _nameCopied> = 0;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = null;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
if v1 != v2 goto label1;
v3 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _tokenInputRow>;
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void createChildArrayContext(int,int)>(v3, v4);
goto label2;
label1:
v5 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
if v1 != v5 goto label2;
v6 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _tokenInputRow>;
v7 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void createChildObjectContext(int,int)>(v6, v7);
label2:
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v1;
return v1;
}
public void finishToken() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
boolean v1;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _tokenIncomplete>;
if v1 == 0 goto label1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _tokenIncomplete> = 0;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _finishString()>();
label1:
return;
}
public boolean nextFieldName(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException
{
com.fasterxml.jackson.core.SerializableString v1;
boolean v12, v33, v4, v7;
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
com.fasterxml.jackson.core.json.JsonReadContext v11, v25, v6;
int v10, v14, v15, v16, v17, v18, v19, v20, v23, v24, v27, v28, v5, v8, v9;
com.fasterxml.jackson.core.JsonToken v2, v3;
java.lang.String v26, v32;
char v22, v29, v31;
char[] v13, v21, v30;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.SerializableString;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _numTypesValid> = 0;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v2 != v3 goto label01;
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _nextAfterName()>();
return 0;
label01:
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _tokenIncomplete>;
if v4 == 0 goto label02;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _skipString()>();
label02:
v5 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _skipWSOrEnd()>();
if v5 >= 0 goto label03;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void close()>();
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = null;
return 0;
label03:
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: byte[] _binaryValue> = null;
if v5 == 93 goto label04;
if v5 != 125 goto label05;
label04:
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _closeScope(int)>(v5);
return 0;
label05:
v6 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v7 = virtualinvoke v6.<com.fasterxml.jackson.core.json.JsonReadContext: boolean expectComma()>();
if v7 == 0 goto label07;
v5 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _skipComma(int)>(v5);
v8 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _features>;
v9 = <com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int FEAT_MASK_TRAILING_COMMA>;
v10 = v8 & v9;
if v10 == 0 goto label07;
if v5 == 93 goto label06;
if v5 != 125 goto label07;
label06:
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _closeScope(int)>(v5);
return 0;
label07:
v11 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v12 = virtualinvoke v11.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inObject()>();
if v12 != 0 goto label08;
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _updateLocation()>();
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _nextTokenNotInObject(int)>(v5);
return 0;
label08:
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _updateNameLocation()>();
if v5 != 34 goto label11;
v13 = interfaceinvoke v1.<com.fasterxml.jackson.core.SerializableString: char[] asQuotedChars()>();
v14 = lengthof v13;
v15 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v16 = v15 + v14;
v17 = v16 + 4;
v18 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v17 >= v18 goto label11;
v19 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v20 = v19 + v14;
v21 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v22 = v21[v20];
if v22 != 34 goto label11;
v23 = 0;
v24 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
label09:
if v24 != v20 goto label10;
v25 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v26 = interfaceinvoke v1.<com.fasterxml.jackson.core.SerializableString: java.lang.String getValue()>();
virtualinvoke v25.<com.fasterxml.jackson.core.json.JsonReadContext: void setCurrentName(java.lang.String)>(v26);
v27 = v24 + 1;
v28 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _skipColonFast(int)>(v27);
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _isNextTokenNameYes(int)>(v28);
return 1;
label10:
v29 = v13[v23];
v30 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v31 = v30[v24];
if v29 != v31 goto label11;
v23 = v23 + 1;
v24 = v24 + 1;
goto label09;
label11:
v32 = interfaceinvoke v1.<com.fasterxml.jackson.core.SerializableString: java.lang.String getValue()>();
v33 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _isNextTokenNameMaybe(int,java.lang.String)>(v5, v32);
return v33;
}
public java.lang.String nextFieldName() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
com.fasterxml.jackson.core.json.JsonReadContext v10, v14, v5;
com.fasterxml.jackson.core.JsonParser$Feature v20;
com.fasterxml.jackson.core.json.JsonReadFeature v19;
int v16, v4, v7, v8, v9;
com.fasterxml.jackson.core.JsonToken v1, v15, v17, v18, v2;
java.lang.String v12, v13;
boolean v11, v21, v3, v6;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _numTypesValid> = 0;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v1 != v2 goto label01;
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _nextAfterName()>();
return null;
label01:
v3 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _tokenIncomplete>;
if v3 == 0 goto label02;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _skipString()>();
label02:
v4 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _skipWSOrEnd()>();
if v4 >= 0 goto label03;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void close()>();
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = null;
return null;
label03:
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: byte[] _binaryValue> = null;
if v4 == 93 goto label04;
if v4 != 125 goto label05;
label04:
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _closeScope(int)>(v4);
return null;
label05:
v5 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v6 = virtualinvoke v5.<com.fasterxml.jackson.core.json.JsonReadContext: boolean expectComma()>();
if v6 == 0 goto label07;
v4 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _skipComma(int)>(v4);
v7 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _features>;
v8 = <com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int FEAT_MASK_TRAILING_COMMA>;
v9 = v7 & v8;
if v9 == 0 goto label07;
if v4 == 93 goto label06;
if v4 != 125 goto label07;
label06:
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _closeScope(int)>(v4);
return null;
label07:
v10 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v11 = virtualinvoke v10.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inObject()>();
if v11 != 0 goto label08;
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _updateLocation()>();
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _nextTokenNotInObject(int)>(v4);
return null;
label08:
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _updateNameLocation()>();
if v4 != 34 goto label09;
v12 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.lang.String _parseName()>();
goto label10;
label09:
v12 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.lang.String _handleOddName(int)>(v4);
label10:
v13 = v12;
v14 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
virtualinvoke v14.<com.fasterxml.jackson.core.json.JsonReadContext: void setCurrentName(java.lang.String)>(v12);
v15 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v15;
v16 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _skipColon()>();
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _updateLocation()>();
if v16 != 34 goto label11;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _tokenIncomplete> = 1;
v17 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v17;
return v12;
label11:
lookupswitch(v16)
{
case 43: goto label13;
case 45: goto label12;
case 46: goto label15;
case 48: goto label16;
case 49: goto label16;
case 50: goto label16;
case 51: goto label16;
case 52: goto label16;
case 53: goto label16;
case 54: goto label16;
case 55: goto label16;
case 56: goto label16;
case 57: goto label16;
case 91: goto label20;
case 102: goto label17;
case 110: goto label18;
case 116: goto label19;
case 123: goto label21;
default: goto label22;
};
label12:
v18 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parseSignedNumber(boolean)>(1);
goto label23;
label13:
v19 = <com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS>;
v20 = virtualinvoke v19.<com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();
v21 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v20);
if v21 == 0 goto label14;
v18 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parseSignedNumber(boolean)>(0);
goto label23;
label14:
v18 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _handleOddValue(int)>(v16);
goto label23;
label15:
v18 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parseFloatThatStartsWithPeriod(boolean)>(0);
goto label23;
label16:
v18 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parseUnsignedNumber(int)>(v16);
goto label23;
label17:
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _matchFalse()>();
v18 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;
goto label23;
label18:
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _matchNull()>();
v18 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;
goto label23;
label19:
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _matchTrue()>();
v18 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;
goto label23;
label20:
v18 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
goto label23;
label21:
v18 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
goto label23;
label22:
v18 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _handleOddValue(int)>(v16);
label23:
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v18;
return v13;
}
private final void _isNextTokenNameYes(int) throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
com.fasterxml.jackson.core.JsonParser$Feature v11;
com.fasterxml.jackson.core.json.JsonReadFeature v10;
int v1;
com.fasterxml.jackson.core.JsonToken v13, v14, v15, v16, v17, v2, v3, v4, v5, v6, v7, v8, v9;
boolean v12;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: int;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v2;
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _updateLocation()>();
lookupswitch(v1)
{
case 34: goto label01;
case 43: goto label08;
case 45: goto label07;
case 46: goto label11;
case 48: goto label12;
case 49: goto label12;
case 50: goto label12;
case 51: goto label12;
case 52: goto label12;
case 53: goto label12;
case 54: goto label12;
case 55: goto label12;
case 56: goto label12;
case 57: goto label12;
case 91: goto label02;
case 102: goto label05;
case 110: goto label06;
case 116: goto label04;
case 123: goto label03;
default: goto label13;
};
label01:
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _tokenIncomplete> = 1;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v3;
return;
label02:
v4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v4;
return;
label03:
v5 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v5;
return;
label04:
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _matchToken(java.lang.String,int)>("true", 1);
v6 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v6;
return;
label05:
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _matchToken(java.lang.String,int)>("false", 1);
v7 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v7;
return;
label06:
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _matchToken(java.lang.String,int)>("null", 1);
v8 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v8;
return;
label07:
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parseSignedNumber(boolean)>(1);
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v9;
return;
label08:
v10 = <com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS>;
v11 = virtualinvoke v10.<com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();
v12 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v11);
if v12 == 0 goto label09;
v13 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parseSignedNumber(boolean)>(0);
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v13;
goto label10;
label09:
v14 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _handleOddValue(int)>(v1);
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v14;
label10:
return;
label11:
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parseFloatThatStartsWithPeriod(boolean)>(0);
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v15;
return;
label12:
v16 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parseUnsignedNumber(int)>(v1);
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v16;
return;
label13:
v17 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _handleOddValue(int)>(v1);
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v17;
return;
}
protected boolean _isNextTokenNameMaybe(int, java.lang.String) throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
com.fasterxml.jackson.core.json.JsonReadContext v5;
com.fasterxml.jackson.core.JsonParser$Feature v12;
com.fasterxml.jackson.core.json.JsonReadFeature v11;
int v1, v7;
com.fasterxml.jackson.core.JsonToken v10, v6, v8;
java.lang.String v2, v3, v4;
boolean v13, v14, v9;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.String;
if v1 != 34 goto label01;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.lang.String _parseName()>();
goto label02;
label01:
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.lang.String _handleOddName(int)>(v1);
label02:
v4 = v3;
v5 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
virtualinvoke v5.<com.fasterxml.jackson.core.json.JsonReadContext: void setCurrentName(java.lang.String)>(v3);
v6 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v6;
v7 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _skipColon()>();
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _updateLocation()>();
if v7 != 34 goto label03;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _tokenIncomplete> = 1;
v8 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v8;
v9 = virtualinvoke v2.<java.lang.String: boolean equals(java.lang.Object)>(v3);
return v9;
label03:
lookupswitch(v7)
{
case 43: goto label05;
case 45: goto label04;
case 46: goto label07;
case 48: goto label08;
case 49: goto label08;
case 50: goto label08;
case 51: goto label08;
case 52: goto label08;
case 53: goto label08;
case 54: goto label08;
case 55: goto label08;
case 56: goto label08;
case 57: goto label08;
case 91: goto label12;
case 102: goto label09;
case 110: goto label10;
case 116: goto label11;
case 123: goto label13;
default: goto label14;
};
label04:
v10 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parseSignedNumber(boolean)>(1);
goto label15;
label05:
v11 = <com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS>;
v12 = virtualinvoke v11.<com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();
v13 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v12);
if v13 == 0 goto label06;
v10 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parseSignedNumber(boolean)>(0);
goto label15;
label06:
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _handleOddValue(int)>(v7);
goto label15;
label07:
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parseFloatThatStartsWithPeriod(boolean)>(0);
goto label15;
label08:
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parseUnsignedNumber(int)>(v7);
goto label15;
label09:
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _matchFalse()>();
v10 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;
goto label15;
label10:
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _matchNull()>();
v10 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;
goto label15;
label11:
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _matchTrue()>();
v10 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;
goto label15;
label12:
v10 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
goto label15;
label13:
v10 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
goto label15;
label14:
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _handleOddValue(int)>(v7);
label15:
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = v10;
v14 = virtualinvoke v2.<java.lang.String: boolean equals(java.lang.Object)>(v4);
return v14;
}
private final com.fasterxml.jackson.core.JsonToken _nextTokenNotInObject(int) throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
com.fasterxml.jackson.core.json.JsonReadContext v15;
int v1, v17, v18, v19, v20, v21, v3, v4, v6, v7;
com.fasterxml.jackson.core.JsonToken v10, v11, v12, v13, v14, v2, v22, v23, v5, v8, v9;
boolean v16;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: int;
if v1 != 34 goto label01;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _tokenIncomplete> = 1;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v2;
return v2;
label01:
tableswitch(v1)
{
case 44: goto label10;
case 45: goto label07;
case 46: goto label08;
case 47: goto label11;
case 48: goto label09;
case 49: goto label09;
case 50: goto label09;
case 51: goto label09;
case 52: goto label09;
case 53: goto label09;
case 54: goto label09;
case 55: goto label09;
case 56: goto label09;
case 57: goto label09;
case 58: goto label11;
case 59: goto label11;
case 60: goto label11;
case 61: goto label11;
case 62: goto label11;
case 63: goto label11;
case 64: goto label11;
case 65: goto label11;
case 66: goto label11;
case 67: goto label11;
case 68: goto label11;
case 69: goto label11;
case 70: goto label11;
case 71: goto label11;
case 72: goto label11;
case 73: goto label11;
case 74: goto label11;
case 75: goto label11;
case 76: goto label11;
case 77: goto label11;
case 78: goto label11;
case 79: goto label11;
case 80: goto label11;
case 81: goto label11;
case 82: goto label11;
case 83: goto label11;
case 84: goto label11;
case 85: goto label11;
case 86: goto label11;
case 87: goto label11;
case 88: goto label11;
case 89: goto label11;
case 90: goto label11;
case 91: goto label02;
case 92: goto label11;
case 93: goto label11;
case 94: goto label11;
case 95: goto label11;
case 96: goto label11;
case 97: goto label11;
case 98: goto label11;
case 99: goto label11;
case 100: goto label11;
case 101: goto label11;
case 102: goto label05;
case 103: goto label11;
case 104: goto label11;
case 105: goto label11;
case 106: goto label11;
case 107: goto label11;
case 108: goto label11;
case 109: goto label11;
case 110: goto label06;
case 111: goto label11;
case 112: goto label11;
case 113: goto label11;
case 114: goto label11;
case 115: goto label11;
case 116: goto label04;
case 117: goto label11;
case 118: goto label11;
case 119: goto label11;
case 120: goto label11;
case 121: goto label11;
case 122: goto label11;
case 123: goto label03;
default: goto label11;
};
label02:
v3 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _tokenInputRow>;
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void createChildArrayContext(int,int)>(v3, v4);
v5 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v5;
return v5;
label03:
v6 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _tokenInputRow>;
v7 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void createChildObjectContext(int,int)>(v6, v7);
v8 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v8;
return v8;
label04:
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _matchToken(java.lang.String,int)>("true", 1);
v9 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v9;
return v9;
label05:
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _matchToken(java.lang.String,int)>("false", 1);
v10 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v10;
return v10;
label06:
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _matchToken(java.lang.String,int)>("null", 1);
v11 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v11;
return v11;
label07:
v12 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parseSignedNumber(boolean)>(1);
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v12;
return v12;
label08:
v13 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parseFloatThatStartsWithPeriod(boolean)>(0);
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v13;
return v13;
label09:
v14 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parseUnsignedNumber(int)>(v1);
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v14;
return v14;
label10:
v15 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v16 = virtualinvoke v15.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inRoot()>();
if v16 != 0 goto label11;
v17 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _features>;
v18 = <com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int FEAT_MASK_ALLOW_MISSING>;
v19 = v17 & v18;
if v19 == 0 goto label11;
v20 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v21 = v20 - 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v21;
v22 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v22;
return v22;
label11:
v23 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _handleOddValue(int)>(v1);
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v23;
return v23;
}
public final java.lang.String nextTextValue() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
int v10, v12, v13, v9;
com.fasterxml.jackson.core.JsonToken v1, v11, v14, v15, v2, v3, v4, v8;
java.lang.String v16, v7;
boolean v5;
com.fasterxml.jackson.core.util.TextBuffer v6;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v1 != v2 goto label5;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _nameCopied> = 0;
v3 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = null;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v3;
v4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v3 != v4 goto label2;
v5 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _tokenIncomplete>;
if v5 == 0 goto label1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _tokenIncomplete> = 0;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _finishString()>();
label1:
v6 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v7 = virtualinvoke v6.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();
return v7;
label2:
v8 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
if v3 != v8 goto label3;
v9 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _tokenInputRow>;
v10 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void createChildArrayContext(int,int)>(v9, v10);
goto label4;
label3:
v11 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
if v3 != v11 goto label4;
v12 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _tokenInputRow>;
v13 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void createChildObjectContext(int,int)>(v12, v13);
label4:
return null;
label5:
v14 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>();
v15 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v14 != v15 goto label6;
v16 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.lang.String getText()>();
goto label7;
label6:
v16 = null;
label7:
return v16;
}
public final int nextIntValue(int) throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
int v1, v11, v12, v15, v6, v8, v9;
com.fasterxml.jackson.core.JsonToken v10, v13, v14, v2, v3, v4, v5, v7;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v2 != v3 goto label4;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _nameCopied> = 0;
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = null;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v4;
v5 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
if v4 != v5 goto label1;
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int getIntValue()>();
return v6;
label1:
v7 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
if v4 != v7 goto label2;
v8 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _tokenInputRow>;
v9 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void createChildArrayContext(int,int)>(v8, v9);
goto label3;
label2:
v10 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
if v4 != v10 goto label3;
v11 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _tokenInputRow>;
v12 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void createChildObjectContext(int,int)>(v11, v12);
label3:
return v1;
label4:
v13 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>();
v14 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
if v13 != v14 goto label5;
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int getIntValue()>();
goto label6;
label5:
v15 = v1;
label6:
return v15;
}
public final long nextLongValue(long) throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
long v1, v15, v6;
int v11, v12, v8, v9;
com.fasterxml.jackson.core.JsonToken v10, v13, v14, v2, v3, v4, v5, v7;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: long;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v2 != v3 goto label4;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _nameCopied> = 0;
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = null;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v4;
v5 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
if v4 != v5 goto label1;
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: long getLongValue()>();
return v6;
label1:
v7 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
if v4 != v7 goto label2;
v8 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _tokenInputRow>;
v9 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void createChildArrayContext(int,int)>(v8, v9);
goto label3;
label2:
v10 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
if v4 != v10 goto label3;
v11 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _tokenInputRow>;
v12 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void createChildObjectContext(int,int)>(v11, v12);
label3:
return v1;
label4:
v13 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>();
v14 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
if v13 != v14 goto label5;
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: long getLongValue()>();
goto label6;
label5:
v15 = v1;
label6:
return v15;
}
public final java.lang.Boolean nextBooleanValue() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
int v10, v12, v13, v15, v9;
java.lang.Boolean v16, v17, v5, v7;
com.fasterxml.jackson.core.JsonToken v1, v11, v14, v2, v3, v4, v6, v8;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v1 != v2 goto label5;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _nameCopied> = 0;
v3 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _nextToken> = null;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v3;
v4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;
if v3 != v4 goto label1;
v5 = <java.lang.Boolean: java.lang.Boolean TRUE>;
return v5;
label1:
v6 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;
if v3 != v6 goto label2;
v7 = <java.lang.Boolean: java.lang.Boolean FALSE>;
return v7;
label2:
v8 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
if v3 != v8 goto label3;
v9 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _tokenInputRow>;
v10 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void createChildArrayContext(int,int)>(v9, v10);
goto label4;
label3:
v11 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
if v3 != v11 goto label4;
v12 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _tokenInputRow>;
v13 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _tokenInputCol>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void createChildObjectContext(int,int)>(v12, v13);
label4:
return null;
label5:
v14 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>();
if v14 == null goto label7;
v15 = virtualinvoke v14.<com.fasterxml.jackson.core.JsonToken: int id()>();
if v15 != 9 goto label6;
v16 = <java.lang.Boolean: java.lang.Boolean TRUE>;
return v16;
label6:
if v15 != 10 goto label7;
v17 = <java.lang.Boolean: java.lang.Boolean FALSE>;
return v17;
label7:
return null;
}
protected final com.fasterxml.jackson.core.JsonToken _parseFloatThatStartsWithPeriod() throws java.io.IOException
{
com.fasterxml.jackson.core.JsonToken v1;
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parseFloatThatStartsWithPeriod(boolean)>(0);
return v1;
}
protected final com.fasterxml.jackson.core.JsonToken _parseFloatThatStartsWithPeriod(boolean) throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
com.fasterxml.jackson.core.JsonParser$Feature v3;
com.fasterxml.jackson.core.json.JsonReadFeature v2;
int v6, v7, v8;
com.fasterxml.jackson.core.JsonToken v5, v9;
boolean v1, v4;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: boolean;
v2 = <com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v3);
if v4 != 0 goto label1;
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _handleOddValue(int)>(46);
return v5;
label1:
v6 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v7 = v6 - 1;
if v1 == 0 goto label2;
v7 = v7 - 1;
label2:
v8 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parseFloat(int,int,int,boolean,int)>(46, v7, v8, v1, 0);
return v9;
}
protected final com.fasterxml.jackson.core.JsonToken _parseUnsignedNumber(int) throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
com.fasterxml.jackson.core.json.JsonReadContext v13;
int v1, v12, v15, v2, v3, v4, v6, v9;
com.fasterxml.jackson.core.JsonToken v11, v18, v5, v7;
boolean v14;
char v10;
com.fasterxml.jackson.core.util.TextBuffer v16;
char[] v17, v8;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v3 = v2 - 1;
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v1 != 48 goto label1;
v5 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parseNumber2(boolean,int)>(0, v3);
return v5;
label1:
v6 = 1;
label2:
if v2 < v4 goto label3;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v3;
v7 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parseNumber2(boolean,int)>(0, v3);
return v7;
label3:
v8 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v9 = v2;
v2 = v2 + 1;
v10 = v8[v9];
if v10 < 48 goto label4;
if v10 > 57 goto label4;
v6 = v6 + 1;
goto label2;
label4:
if v10 == 46 goto label5;
if v10 == 101 goto label5;
if v10 != 69 goto label6;
label5:
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v2;
v11 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parseFloat(int,int,int,boolean,int)>(v10, v3, v2, 0, v6);
return v11;
label6:
v12 = v2 - 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v12;
v13 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v14 = virtualinvoke v13.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inRoot()>();
if v14 == 0 goto label7;
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _verifyRootSpace(int)>(v10);
label7:
v15 = v12 - v3;
v16 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v17 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
virtualinvoke v16.<com.fasterxml.jackson.core.util.TextBuffer: void resetWithShared(char[],int,int)>(v17, v3, v15);
v18 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken resetInt(boolean,int)>(0, v6);
return v18;
}
private final com.fasterxml.jackson.core.JsonToken _parseFloat(int, int, int, boolean, int) throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
com.fasterxml.jackson.core.json.JsonReadContext v25;
com.fasterxml.jackson.core.JsonParser$Feature v12;
com.fasterxml.jackson.core.json.JsonReadFeature v11;
int v1, v10, v14, v17, v2, v20, v23, v24, v27, v3, v5, v6, v7;
com.fasterxml.jackson.core.JsonToken v15, v18, v21, v30, v8;
boolean v13, v26, v4;
com.fasterxml.jackson.core.util.TextBuffer v28;
char[] v16, v19, v22, v29, v9;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 := @parameter4: int;
v6 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
v7 = 0;
if v1 != 46 goto label04;
label01:
if v3 < v6 goto label02;
v8 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parseNumber2(boolean,int)>(v4, v2);
return v8;
label02:
v9 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v10 = v3;
v3 = v3 + 1;
v1 = v9[v10];
if v1 < 48 goto label03;
if v1 > 57 goto label03;
v7 = v7 + 1;
goto label01;
label03:
if v7 != 0 goto label04;
v11 = <com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS>;
v12 = virtualinvoke v11.<com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();
v13 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v12);
if v13 != 0 goto label04;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(v1, "Decimal point not followed by a digit");
label04:
v14 = 0;
if v1 == 101 goto label05;
if v1 != 69 goto label12;
label05:
if v3 < v6 goto label06;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v2;
v15 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parseNumber2(boolean,int)>(v4, v2);
return v15;
label06:
v16 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v17 = v3;
v3 = v3 + 1;
v1 = v16[v17];
if v1 == 45 goto label07;
if v1 != 43 goto label09;
label07:
if v3 < v6 goto label08;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v2;
v18 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parseNumber2(boolean,int)>(v4, v2);
return v18;
label08:
v19 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v20 = v3;
v3 = v3 + 1;
v1 = v19[v20];
label09:
if v1 > 57 goto label11;
if v1 < 48 goto label11;
v14 = v14 + 1;
if v3 < v6 goto label10;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v2;
v21 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parseNumber2(boolean,int)>(v4, v2);
return v21;
label10:
v22 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v23 = v3;
v3 = v3 + 1;
v1 = v22[v23];
goto label09;
label11:
if v14 != 0 goto label12;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(v1, "Exponent indicator not followed by a digit");
label12:
v24 = v3 - 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v24;
v25 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v26 = virtualinvoke v25.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inRoot()>();
if v26 == 0 goto label13;
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _verifyRootSpace(int)>(v1);
label13:
v27 = v24 - v2;
v28 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v29 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
virtualinvoke v28.<com.fasterxml.jackson.core.util.TextBuffer: void resetWithShared(char[],int,int)>(v29, v2, v27);
v30 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken resetFloat(boolean,int,int,int)>(v4, v5, v7, v14);
return v30;
}
private final com.fasterxml.jackson.core.JsonToken _parseSignedNumber(boolean) throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
com.fasterxml.jackson.core.json.JsonReadContext v20;
int v13, v16, v19, v2, v22, v3, v4, v5, v8;
com.fasterxml.jackson.core.JsonToken v10, v11, v12, v14, v18, v25, v6;
boolean v1, v21;
char v17, v9;
com.fasterxml.jackson.core.util.TextBuffer v23;
char[] v15, v24, v7;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: boolean;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
if v1 == 0 goto label01;
v3 = v2 - 1;
goto label02;
label01:
v3 = v2;
label02:
v4 = v3;
v5 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v2 < v5 goto label03;
v6 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parseNumber2(boolean,int)>(v1, v3);
return v6;
label03:
v7 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v8 = v2 + 1;
v9 = v7[v2];
if v9 > 57 goto label04;
if v9 >= 48 goto label06;
label04:
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v8;
if v9 != 46 goto label05;
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parseFloatThatStartsWithPeriod(boolean)>(v1);
return v10;
label05:
v11 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _handleInvalidNumberStart(int,boolean,boolean)>(v9, v1, 1);
return v11;
label06:
if v9 != 48 goto label07;
v12 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parseNumber2(boolean,int)>(v1, v3);
return v12;
label07:
v13 = 1;
label08:
if v8 < v5 goto label09;
v14 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parseNumber2(boolean,int)>(v1, v4);
return v14;
label09:
v15 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v16 = v8;
v8 = v8 + 1;
v17 = v15[v16];
if v17 < 48 goto label10;
if v17 > 57 goto label10;
v13 = v13 + 1;
goto label08;
label10:
if v17 == 46 goto label11;
if v17 == 101 goto label11;
if v17 != 69 goto label12;
label11:
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v8;
v18 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _parseFloat(int,int,int,boolean,int)>(v17, v4, v8, v1, v13);
return v18;
label12:
v19 = v8 - 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v19;
v20 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v21 = virtualinvoke v20.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inRoot()>();
if v21 == 0 goto label13;
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _verifyRootSpace(int)>(v17);
label13:
v22 = v19 - v4;
v23 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v24 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
virtualinvoke v23.<com.fasterxml.jackson.core.util.TextBuffer: void resetWithShared(char[],int,int)>(v24, v4, v22);
v25 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken resetInt(boolean,int)>(v1, v13);
return v25;
}
private final com.fasterxml.jackson.core.JsonToken _parseNumber2(boolean, int) throws java.io.IOException
{
com.fasterxml.jackson.core.json.JsonReadFeature v26, v44;
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
com.fasterxml.jackson.core.json.JsonReadContext v80;
com.fasterxml.jackson.core.util.TextBuffer v18, v33, v4, v42, v50, v60, v70, v82;
char[] v10, v23, v38, v5, v54, v64, v75;
boolean v1, v16, v22, v28, v37, v46, v74, v81;
com.fasterxml.jackson.core.JsonParser$Feature v27, v45;
int v11, v12, v17, v19, v2, v20, v21, v24, v25, v3, v30, v31, v32, v34, v35, v36, v39, v40, v41, v43, v47, v48, v49, v51, v52, v53, v55, v56, v59, v6, v61, v62, v63, v65, v66, v69, v7, v71, v72, v73, v76, v77, v78, v79, v8, v9;
com.fasterxml.jackson.core.JsonToken v14, v29, v58, v68, v83, v84;
char v13, v15, v57, v67;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: boolean;
v2 := @parameter1: int;
if v1 == 0 goto label01;
v3 = v2 + 1;
goto label02;
label01:
v3 = v2;
label02:
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v3;
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();
v6 = 0;
if v1 == 0 goto label03;
v6 = 1;
v5[0] = 45;
label03:
v7 = 0;
v8 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v9 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v8 >= v9 goto label04;
v10 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v11 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v12 = v11 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v12;
v13 = v10[v11];
goto label05;
label04:
v14 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
v13 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char getNextChar(java.lang.String,com.fasterxml.jackson.core.JsonToken)>("No digit following minus sign", v14);
label05:
v15 = v13;
if v13 != 48 goto label06;
v15 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char _verifyNoLeadingZeroes()>();
label06:
v16 = 0;
label07:
if v15 < 48 goto label10;
if v15 > 57 goto label10;
v7 = v7 + 1;
v17 = lengthof v5;
if v6 < v17 goto label08;
v18 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v5 = virtualinvoke v18.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v6 = 0;
label08:
v19 = v6;
v6 = v6 + 1;
v5[v19] = v15;
v20 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v21 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v20 < v21 goto label09;
v22 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _loadMore()>();
if v22 != 0 goto label09;
v15 = 0;
v16 = 1;
goto label10;
label09:
v23 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v24 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v25 = v24 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v25;
v15 = v23[v24];
goto label07;
label10:
if v7 != 0 goto label11;
v26 = <com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_LEADING_DECIMAL_POINT_FOR_NUMBERS>;
v27 = virtualinvoke v26.<com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();
v28 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v27);
if v28 != 0 goto label11;
v29 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _handleInvalidNumberStart(int,boolean)>(v15, v1);
return v29;
label11:
v30 = (int) -1;
v31 = v30;
if v15 != 46 goto label17;
v31 = 0;
v32 = lengthof v5;
if v6 < v32 goto label12;
v33 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v5 = virtualinvoke v33.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v6 = 0;
label12:
v34 = v6;
v6 = v6 + 1;
v5[v34] = v15;
label13:
v35 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v36 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v35 < v36 goto label14;
v37 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _loadMore()>();
if v37 != 0 goto label14;
v16 = 1;
goto label16;
label14:
v38 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v39 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v40 = v39 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v40;
v15 = v38[v39];
if v15 < 48 goto label16;
if v15 > 57 goto label16;
v31 = v31 + 1;
v41 = lengthof v5;
if v6 < v41 goto label15;
v42 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v5 = virtualinvoke v42.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v6 = 0;
label15:
v43 = v6;
v6 = v6 + 1;
v5[v43] = v15;
goto label13;
label16:
if v31 != 0 goto label17;
v44 = <com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_TRAILING_DECIMAL_POINT_FOR_NUMBERS>;
v45 = virtualinvoke v44.<com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();
v46 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v45);
if v46 != 0 goto label17;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(v15, "Decimal point not followed by a digit");
label17:
v47 = (int) -1;
v48 = v47;
if v15 == 101 goto label18;
if v15 != 69 goto label30;
label18:
v48 = 0;
v49 = lengthof v5;
if v6 < v49 goto label19;
v50 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v5 = virtualinvoke v50.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v6 = 0;
label19:
v51 = v6;
v6 = v6 + 1;
v5[v51] = v15;
v52 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v53 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v52 >= v53 goto label20;
v54 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v55 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v56 = v55 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v56;
v57 = v54[v55];
goto label21;
label20:
v58 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;
v57 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char getNextChar(java.lang.String,com.fasterxml.jackson.core.JsonToken)>("expected a digit for number exponent", v58);
label21:
v15 = v57;
if v57 == 45 goto label22;
if v57 != 43 goto label26;
label22:
v59 = lengthof v5;
if v6 < v59 goto label23;
v60 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v5 = virtualinvoke v60.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v6 = 0;
label23:
v61 = v6;
v6 = v6 + 1;
v5[v61] = v15;
v62 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v63 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v62 >= v63 goto label24;
v64 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v65 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v66 = v65 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v66;
v67 = v64[v65];
goto label25;
label24:
v68 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;
v67 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char getNextChar(java.lang.String,com.fasterxml.jackson.core.JsonToken)>("expected a digit for number exponent", v68);
label25:
v15 = v67;
label26:
if v15 > 57 goto label29;
if v15 < 48 goto label29;
v48 = v48 + 1;
v69 = lengthof v5;
if v6 < v69 goto label27;
v70 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v5 = virtualinvoke v70.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v6 = 0;
label27:
v71 = v6;
v6 = v6 + 1;
v5[v71] = v15;
v72 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v73 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v72 < v73 goto label28;
v74 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _loadMore()>();
if v74 != 0 goto label28;
v16 = 1;
goto label29;
label28:
v75 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v76 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v77 = v76 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v77;
v15 = v75[v76];
goto label26;
label29:
if v48 != 0 goto label30;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(v15, "Exponent indicator not followed by a digit");
label30:
if v16 != 0 goto label31;
v78 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v79 = v78 - 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v79;
v80 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v81 = virtualinvoke v80.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inRoot()>();
if v81 == 0 goto label31;
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _verifyRootSpace(int)>(v15);
label31:
v82 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v82.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v6);
if v31 >= 0 goto label32;
if v48 >= 0 goto label32;
v83 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken resetInt(boolean,int)>(v1, v7);
return v83;
label32:
v84 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken resetFloat(boolean,int,int,int)>(v1, v7, v31, v48);
return v84;
}
private final char _verifyNoLeadingZeroes() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
int v1, v2, v4;
char[] v3;
char v5, v6;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v1 >= v2 goto label2;
v3 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v5 = v3[v4];
if v5 < 48 goto label1;
if v5 <= 57 goto label2;
label1:
return 48;
label2:
v6 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char _verifyNLZ2()>();
return v6;
}
private char _verifyNLZ2() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
int v1, v10, v11, v12, v13, v16, v17, v18, v2, v5, v7, v8, v9;
boolean v14, v3;
char v6;
char[] v15, v4;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v1 < v2 goto label1;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _loadMore()>();
if v3 != 0 goto label1;
return 48;
label1:
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v5 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v6 = v4[v5];
if v6 < 48 goto label2;
if v6 <= 57 goto label3;
label2:
return 48;
label3:
v7 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _features>;
v8 = <com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int FEAT_MASK_LEADING_ZEROS>;
v9 = v7 & v8;
if v9 != 0 goto label4;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void reportInvalidNumber(java.lang.String)>("Leading zeroes not allowed");
label4:
v10 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v11 = v10 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v11;
if v6 != 48 goto label9;
label5:
v12 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v13 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v12 < v13 goto label6;
v14 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _loadMore()>();
if v14 == 0 goto label9;
label6:
v15 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v16 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v6 = v15[v16];
if v6 < 48 goto label7;
if v6 <= 57 goto label8;
label7:
return 48;
label8:
v17 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v18 = v17 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v18;
if v6 == 48 goto label5;
label9:
return v6;
}
protected com.fasterxml.jackson.core.JsonToken _handleInvalidNumberStart(int, boolean) throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
int v1;
com.fasterxml.jackson.core.JsonToken v3;
boolean v2;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: int;
v2 := @parameter1: boolean;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _handleInvalidNumberStart(int,boolean,boolean)>(v1, v2, 0);
return v3;
}
protected com.fasterxml.jackson.core.JsonToken _handleInvalidNumberStart(int, boolean, boolean) throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
com.fasterxml.jackson.core.JsonParser$Feature v28;
com.fasterxml.jackson.core.json.JsonReadFeature v27;
int v1, v10, v13, v14, v15, v21, v22, v23, v4, v5, v9;
com.fasterxml.jackson.core.JsonToken v17, v25, v7;
java.lang.String v11, v12, v18, v19, v20, v26, v30;
boolean v2, v29, v3, v6;
double v16, v24;
char[] v8;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: int;
v2 := @parameter1: boolean;
v3 := @parameter2: boolean;
if v1 != 73 goto label13;
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v5 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v4 < v5 goto label01;
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _loadMore()>();
if v6 != 0 goto label01;
v7 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportInvalidEOFInValue(com.fasterxml.jackson.core.JsonToken)>(v7);
label01:
v8 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v9 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v10 = v9 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v10;
v1 = v8[v9];
if v1 != 78 goto label07;
if v2 == 0 goto label02;
v11 = "-INF";
goto label03;
label02:
v11 = "+INF";
label03:
v12 = v11;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _matchToken(java.lang.String,int)>(v11, 3);
v13 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _features>;
v14 = <com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int FEAT_MASK_NON_NUM_NUMBERS>;
v15 = v13 & v14;
if v15 == 0 goto label06;
if v2 == 0 goto label04;
v16 = #-Infinity;
goto label05;
label04:
v16 = #Infinity;
label05:
v17 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken resetAsNaN(java.lang.String,double)>(v12, v16);
return v17;
label06:
v18 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Non-standard token \'\u0001\': enable `JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS` to allow");
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportError(java.lang.String)>(v18);
goto label13;
label07:
if v1 != 110 goto label13;
if v2 == 0 goto label08;
v19 = "-Infinity";
goto label09;
label08:
v19 = "+Infinity";
label09:
v20 = v19;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _matchToken(java.lang.String,int)>(v19, 3);
v21 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _features>;
v22 = <com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int FEAT_MASK_NON_NUM_NUMBERS>;
v23 = v21 & v22;
if v23 == 0 goto label12;
if v2 == 0 goto label10;
v24 = #-Infinity;
goto label11;
label10:
v24 = #Infinity;
label11:
v25 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken resetAsNaN(java.lang.String,double)>(v20, v24);
return v25;
label12:
v26 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v19) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Non-standard token \'\u0001\': enable `JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS` to allow");
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportError(java.lang.String)>(v26);
label13:
v27 = <com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.json.JsonReadFeature ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS>;
v28 = virtualinvoke v27.<com.fasterxml.jackson.core.json.JsonReadFeature: com.fasterxml.jackson.core.JsonParser$Feature mappedFeature()>();
v29 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v28);
if v29 != 0 goto label14;
if v3 == 0 goto label14;
if v2 != 0 goto label14;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(43, "JSON spec does not allow numbers to have plus signs: enable `JsonReadFeature.ALLOW_LEADING_PLUS_SIGN_FOR_NUMBERS` to allow");
label14:
if v2 == 0 goto label15;
v30 = "expected digit (0-9) to follow minus sign, for valid numeric value";
goto label16;
label15:
v30 = "expected digit (0-9) for valid numeric value";
label16:
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.lang.Object _reportUnexpectedNumberChar(int,java.lang.String)>(v1, v30);
return null;
}
private final void _verifyRootSpace(int) throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
int v1, v2, v3, v4, v5, v6, v7, v8;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v3 = v2 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v3;
lookupswitch(v1)
{
case 9: goto label1;
case 10: goto label3;
case 13: goto label2;
case 32: goto label1;
default: goto label4;
};
label1:
return;
label2:
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v5 = v4 - 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v5;
return;
label3:
v6 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRow>;
v7 = v6 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRow> = v7;
v8 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRowStart> = v8;
return;
label4:
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportMissingRootWS(int)>(v1);
return;
}
protected final java.lang.String _parseName() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer v11;
int[] v3;
int v1, v10, v13, v15, v16, v2, v4, v7, v8, v9;
java.lang.String v14, v17;
char v6;
char[] v12, v5;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _hashSeed>;
v3 = <com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int[] _icLatin1>;
label1:
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v1 >= v4 goto label3;
v5 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v6 = v5[v1];
v7 = lengthof v3;
if v6 >= v7 goto label2;
v8 = v3[v6];
if v8 == 0 goto label2;
if v6 != 34 goto label3;
v9 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v10 = v1 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v10;
v11 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer _symbols>;
v12 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v13 = v1 - v9;
v14 = virtualinvoke v11.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String findSymbol(char[],int,int,int)>(v12, v9, v13, v2);
return v14;
label2:
v15 = v2 * 33;
v2 = v15 + v6;
v1 = v1 + 1;
goto label1;
label3:
v16 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v1;
v17 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.lang.String _parseName2(int,int,int)>(v16, v2, 34);
return v17;
}
private java.lang.String _parseName2(int, int, int) throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer v29;
int v1, v11, v12, v13, v17, v18, v2, v20, v21, v22, v27, v28, v3, v6, v7;
com.fasterxml.jackson.core.JsonToken v15;
java.lang.String v30;
boolean v14;
char v19;
com.fasterxml.jackson.core.util.TextBuffer v10, v23, v24, v25, v4, v8;
char[] v16, v26, v5, v9;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v5 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v6 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v7 = v6 - v1;
virtualinvoke v4.<com.fasterxml.jackson.core.util.TextBuffer: void resetWithShared(char[],int,int)>(v5, v1, v7);
v8 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v9 = virtualinvoke v8.<com.fasterxml.jackson.core.util.TextBuffer: char[] getCurrentSegment()>();
v10 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v11 = virtualinvoke v10.<com.fasterxml.jackson.core.util.TextBuffer: int getCurrentSegmentSize()>();
label1:
v12 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v13 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v12 < v13 goto label2;
v14 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _loadMore()>();
if v14 != 0 goto label2;
v15 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)>(" in field name", v15);
label2:
v16 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v17 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v18 = v17 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v18;
v19 = v16[v17];
if v19 > 92 goto label4;
if v19 != 92 goto label3;
v19 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char _decodeEscaped()>();
goto label4;
label3:
if v19 > v3 goto label4;
if v19 == v3 goto label5;
if v19 >= 32 goto label4;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _throwUnquotedSpace(int,java.lang.String)>(v19, "name");
label4:
v20 = v2 * 33;
v2 = v20 + v19;
v21 = v11;
v11 = v11 + 1;
v9[v21] = v19;
v22 = lengthof v9;
if v11 < v22 goto label1;
v23 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v9 = virtualinvoke v23.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v11 = 0;
goto label1;
label5:
v24 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v24.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v11);
v25 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v26 = virtualinvoke v25.<com.fasterxml.jackson.core.util.TextBuffer: char[] getTextBuffer()>();
v27 = virtualinvoke v25.<com.fasterxml.jackson.core.util.TextBuffer: int getTextOffset()>();
v28 = virtualinvoke v25.<com.fasterxml.jackson.core.util.TextBuffer: int size()>();
v29 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer _symbols>;
v30 = virtualinvoke v29.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String findSymbol(char[],int,int,int)>(v26, v27, v28, v2);
return v30;
}
protected java.lang.String _handleOddName(int) throws java.io.IOException
{
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer v22, v29;
int[] v9;
boolean v12, v13, v26;
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
int v1, v10, v11, v14, v15, v16, v19, v2, v20, v21, v24, v27, v28, v3, v31, v33, v34, v35, v4, v6, v7, v8;
java.lang.String v25, v32, v36, v5;
char v18;
char[] v17, v23, v30;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: int;
if v1 != 39 goto label01;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _features>;
v3 = <com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int FEAT_MASK_ALLOW_SINGLE_QUOTES>;
v4 = v2 & v3;
if v4 == 0 goto label01;
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.lang.String _parseAposName()>();
return v5;
label01:
v6 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _features>;
v7 = <com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int FEAT_MASK_ALLOW_UNQUOTED_NAMES>;
v8 = v6 & v7;
if v8 != 0 goto label02;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(v1, "was expecting double-quote to start field name");
label02:
v9 = staticinvoke <com.fasterxml.jackson.core.io.CharTypes: int[] getInputCodeLatin1JsNames()>();
v10 = lengthof v9;
if v1 >= v10 goto label05;
v11 = v9[v1];
if v11 != 0 goto label03;
v12 = 1;
goto label04;
label03:
v12 = 0;
label04:
v13 = v12;
goto label06;
label05:
v13 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>(v1);
label06:
if v13 != 0 goto label07;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(v1, "was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name");
label07:
v14 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v15 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _hashSeed>;
v16 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v14 >= v16 goto label11;
label08:
v17 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v18 = v17[v14];
if v18 >= v10 goto label09;
v19 = v9[v18];
if v19 == 0 goto label10;
v20 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v21 = v20 - 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v14;
v22 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer _symbols>;
v23 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v24 = v14 - v21;
v25 = virtualinvoke v22.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String findSymbol(char[],int,int,int)>(v23, v21, v24, v15);
return v25;
label09:
v26 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>(v18);
if v26 != 0 goto label10;
v27 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v28 = v27 - 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v14;
v29 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer _symbols>;
v30 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v31 = v14 - v28;
v32 = virtualinvoke v29.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String findSymbol(char[],int,int,int)>(v30, v28, v31, v15);
return v32;
label10:
v33 = v15 * 33;
v15 = v33 + v18;
v14 = v14 + 1;
if v14 < v16 goto label08;
label11:
v34 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v35 = v34 - 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v14;
v36 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.lang.String _handleOddName2(int,int,int[])>(v35, v15, v9);
return v36;
}
protected java.lang.String _parseAposName() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer v10;
int[] v4;
int v1, v12, v14, v15, v16, v2, v3, v5, v8, v9;
java.lang.String v13, v17;
char v7;
char[] v11, v6;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _hashSeed>;
v3 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v1 >= v3 goto label4;
v4 = <com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int[] _icLatin1>;
v5 = lengthof v4;
label1:
v6 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v7 = v6[v1];
if v7 != 39 goto label2;
v8 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v9 = v1 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v9;
v10 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer _symbols>;
v11 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v12 = v1 - v8;
v13 = virtualinvoke v10.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String findSymbol(char[],int,int,int)>(v11, v8, v12, v2);
return v13;
label2:
if v7 >= v5 goto label3;
v14 = v4[v7];
if v14 != 0 goto label4;
label3:
v15 = v2 * 33;
v2 = v15 + v7;
v1 = v1 + 1;
if v1 < v3 goto label1;
label4:
v16 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v1;
v17 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.lang.String _parseName2(int,int,int)>(v16, v2, 39);
return v17;
}
protected com.fasterxml.jackson.core.JsonToken _handleOddValue(int) throws java.io.IOException
{
boolean v26, v33, v7, v9;
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
com.fasterxml.jackson.core.json.JsonReadContext v6, v8;
int v1, v10, v11, v12, v13, v14, v16, v17, v18, v2, v20, v21, v22, v24, v25, v29, v3, v30, v4;
com.fasterxml.jackson.core.JsonToken v15, v19, v23, v27, v32, v5;
java.lang.String v34, v35, v36, v37;
char v31;
char[] v28;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: int;
lookupswitch(v1)
{
case 39: goto label01;
case 43: goto label08;
case 44: goto label03;
case 73: goto label06;
case 78: goto label04;
case 93: goto label02;
default: goto label10;
};
label01:
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _features>;
v3 = <com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int FEAT_MASK_ALLOW_SINGLE_QUOTES>;
v4 = v2 & v3;
if v4 == 0 goto label10;
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _handleApos()>();
return v5;
label02:
v6 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v7 = virtualinvoke v6.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inArray()>();
if v7 == 0 goto label10;
label03:
v8 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v9 = virtualinvoke v8.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inRoot()>();
if v9 != 0 goto label10;
v10 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _features>;
v11 = <com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int FEAT_MASK_ALLOW_MISSING>;
v12 = v10 & v11;
if v12 == 0 goto label10;
v13 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v14 = v13 - 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v14;
v15 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;
return v15;
label04:
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _matchToken(java.lang.String,int)>("NaN", 1);
v16 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _features>;
v17 = <com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int FEAT_MASK_NON_NUM_NUMBERS>;
v18 = v16 & v17;
if v18 == 0 goto label05;
v19 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken resetAsNaN(java.lang.String,double)>("NaN", #NaN);
return v19;
label05:
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportError(java.lang.String)>("Non-standard token \'NaN\': enable `JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS` to allow");
goto label10;
label06:
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _matchToken(java.lang.String,int)>("Infinity", 1);
v20 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _features>;
v21 = <com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int FEAT_MASK_NON_NUM_NUMBERS>;
v22 = v20 & v21;
if v22 == 0 goto label07;
v23 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken resetAsNaN(java.lang.String,double)>("Infinity", #Infinity);
return v23;
label07:
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportError(java.lang.String)>("Non-standard token \'Infinity\': enable `JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS` to allow");
goto label10;
label08:
v24 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v25 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v24 < v25 goto label09;
v26 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _loadMore()>();
if v26 != 0 goto label09;
v27 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportInvalidEOFInValue(com.fasterxml.jackson.core.JsonToken)>(v27);
label09:
v28 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v29 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v30 = v29 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v30;
v31 = v28[v29];
v32 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _handleInvalidNumberStart(int,boolean,boolean)>(v31, 0, 1);
return v32;
label10:
v33 = staticinvoke <java.lang.Character: boolean isJavaIdentifierStart(int)>(v1);
if v33 == 0 goto label11;
v34 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001");
v35 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.lang.String _validJsonTokenList()>();
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportInvalidToken(java.lang.String,java.lang.String)>(v34, v35);
label11:
v36 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.lang.String _validJsonValueList()>();
v37 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v36) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("expected a valid value \u0001");
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(v1, v37);
return null;
}
protected com.fasterxml.jackson.core.JsonToken _handleApos() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
int v10, v11, v13, v15, v4, v5, v6;
com.fasterxml.jackson.core.JsonToken v17, v8;
boolean v7;
char v12;
com.fasterxml.jackson.core.util.TextBuffer v1, v14, v16, v3;
char[] v2, v9;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();
v3 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.util.TextBuffer: int getCurrentSegmentSize()>();
label1:
v5 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v6 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v5 < v6 goto label2;
v7 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _loadMore()>();
if v7 != 0 goto label2;
v8 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)>(": was expecting closing quote for a string value", v8);
label2:
v9 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v10 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v11 = v10 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v11;
v12 = v9[v10];
if v12 > 92 goto label4;
if v12 != 92 goto label3;
v12 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char _decodeEscaped()>();
goto label4;
label3:
if v12 > 39 goto label4;
if v12 == 39 goto label6;
if v12 >= 32 goto label4;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _throwUnquotedSpace(int,java.lang.String)>(v12, "string value");
label4:
v13 = lengthof v2;
if v4 < v13 goto label5;
v14 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v2 = virtualinvoke v14.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v4 = 0;
label5:
v15 = v4;
v4 = v4 + 1;
v2[v15] = v12;
goto label1;
label6:
v16 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v16.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v4);
v17 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
return v17;
}
private java.lang.String _handleOddName2(int, int, int[]) throws java.io.IOException
{
com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer v32;
int[] v3;
boolean v15, v20;
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
int v1, v11, v12, v13, v14, v17, v19, v2, v21, v22, v23, v24, v25, v30, v31, v6, v7;
java.lang.String v33;
char v18;
com.fasterxml.jackson.core.util.TextBuffer v10, v26, v27, v28, v4, v8;
char[] v16, v29, v5, v9;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int[];
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v5 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v6 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v7 = v6 - v1;
virtualinvoke v4.<com.fasterxml.jackson.core.util.TextBuffer: void resetWithShared(char[],int,int)>(v5, v1, v7);
v8 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v9 = virtualinvoke v8.<com.fasterxml.jackson.core.util.TextBuffer: char[] getCurrentSegment()>();
v10 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v11 = virtualinvoke v10.<com.fasterxml.jackson.core.util.TextBuffer: int getCurrentSegmentSize()>();
v12 = lengthof v3;
label1:
v13 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v14 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v13 < v14 goto label2;
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _loadMore()>();
if v15 == 0 goto label5;
label2:
v16 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v17 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v18 = v16[v17];
if v18 >= v12 goto label3;
v19 = v3[v18];
if v19 == 0 goto label4;
goto label5;
label3:
v20 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>(v18);
if v20 == 0 goto label5;
label4:
v21 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v22 = v21 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v22;
v23 = v2 * 33;
v2 = v23 + v18;
v24 = v11;
v11 = v11 + 1;
v9[v24] = v18;
v25 = lengthof v9;
if v11 < v25 goto label1;
v26 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v9 = virtualinvoke v26.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v11 = 0;
goto label1;
label5:
v27 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v27.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v11);
v28 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v29 = virtualinvoke v28.<com.fasterxml.jackson.core.util.TextBuffer: char[] getTextBuffer()>();
v30 = virtualinvoke v28.<com.fasterxml.jackson.core.util.TextBuffer: int getTextOffset()>();
v31 = virtualinvoke v28.<com.fasterxml.jackson.core.util.TextBuffer: int size()>();
v32 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer _symbols>;
v33 = virtualinvoke v32.<com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer: java.lang.String findSymbol(char[],int,int,int)>(v29, v30, v31, v2);
return v33;
}
protected final void _finishString() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
int[] v3;
int v1, v10, v11, v12, v13, v16, v17, v18, v2, v4, v7;
char v6;
com.fasterxml.jackson.core.util.TextBuffer v14, v8;
char[] v15, v5, v9;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v1 >= v2 goto label3;
v3 = <com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int[] _icLatin1>;
v4 = lengthof v3;
label1:
v5 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v6 = v5[v1];
if v6 >= v4 goto label2;
v7 = v3[v6];
if v7 == 0 goto label2;
if v6 != 34 goto label3;
v8 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v9 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v10 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v11 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v12 = v1 - v11;
virtualinvoke v8.<com.fasterxml.jackson.core.util.TextBuffer: void resetWithShared(char[],int,int)>(v9, v10, v12);
v13 = v1 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v13;
return;
label2:
v1 = v1 + 1;
if v1 < v2 goto label1;
label3:
v14 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v15 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v16 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v17 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v18 = v1 - v17;
virtualinvoke v14.<com.fasterxml.jackson.core.util.TextBuffer: void resetWithCopy(char[],int,int)>(v15, v16, v18);
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _finishString2()>();
return;
}
protected void _finishString2() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
int[] v5;
int v12, v13, v15, v16, v18, v4, v6, v7, v8;
com.fasterxml.jackson.core.JsonToken v10;
boolean v9;
char v14;
com.fasterxml.jackson.core.util.TextBuffer v1, v17, v19, v3;
char[] v11, v2;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.util.TextBuffer: char[] getCurrentSegment()>();
v3 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.util.TextBuffer: int getCurrentSegmentSize()>();
v5 = <com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int[] _icLatin1>;
v6 = lengthof v5;
label1:
v7 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v8 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v7 < v8 goto label2;
v9 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _loadMore()>();
if v9 != 0 goto label2;
v10 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)>(": was expecting closing quote for a string value", v10);
label2:
v11 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v12 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v13 = v12 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v13;
v14 = v11[v12];
if v14 >= v6 goto label4;
v15 = v5[v14];
if v15 == 0 goto label4;
if v14 == 34 goto label6;
if v14 != 92 goto label3;
v14 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char _decodeEscaped()>();
goto label4;
label3:
if v14 >= 32 goto label4;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _throwUnquotedSpace(int,java.lang.String)>(v14, "string value");
label4:
v16 = lengthof v2;
if v4 < v16 goto label5;
v17 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
v2 = virtualinvoke v17.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();
v4 = 0;
label5:
v18 = v4;
v4 = v4 + 1;
v2[v18] = v14;
goto label1;
label6:
v19 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;
virtualinvoke v19.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>(v4);
return;
}
protected final void _skipString() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
char v7;
int v1, v2, v6;
char[] v3;
com.fasterxml.jackson.core.JsonToken v5;
boolean v4;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _tokenIncomplete> = 0;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
v3 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
label1:
if v1 < v2 goto label3;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v1;
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _loadMore()>();
if v4 != 0 goto label2;
v5 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)>(": was expecting closing quote for a string value", v5);
label2:
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
label3:
v6 = v1;
v1 = v1 + 1;
v7 = v3[v6];
if v7 > 92 goto label1;
if v7 != 92 goto label4;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char _decodeEscaped()>();
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
goto label1;
label4:
if v7 > 34 goto label1;
if v7 != 34 goto label5;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v1;
goto label6;
label5:
if v7 >= 32 goto label1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _throwUnquotedSpace(int,java.lang.String)>(v7, "string value");
goto label1;
label6:
return;
}
protected final void _skipCR() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
char v6;
int v1, v10, v11, v2, v5, v7, v8, v9;
char[] v4;
boolean v3;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v1 < v2 goto label1;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _loadMore()>();
if v3 == 0 goto label2;
label1:
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v5 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v6 = v4[v5];
if v6 != 10 goto label2;
v7 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v8 = v7 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v8;
label2:
v9 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRow>;
v10 = v9 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRow> = v10;
v11 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRowStart> = v11;
return;
}
private final int _skipColon() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
int v1, v10, v12, v13, v14, v16, v17, v19, v2, v20, v21, v22, v24, v25, v27, v28, v3, v30, v31, v32, v34, v35, v37, v38, v39, v4, v40, v41, v6, v9;
char v11, v18, v29, v36, v7;
char[] v15, v23, v26, v33, v5, v8;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v2 = v1 + 4;
v3 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v2 < v3 goto label01;
v4 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _skipColon2(boolean)>(0);
return v4;
label01:
v5 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v6 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v7 = v5[v6];
if v7 != 58 goto label09;
v8 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v9 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v10 = v9 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v10;
v11 = v8[v10];
if v11 <= 32 goto label04;
if v11 == 47 goto label02;
if v11 != 35 goto label03;
label02:
v12 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _skipColon2(boolean)>(1);
return v12;
label03:
v13 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v14 = v13 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v14;
return v11;
label04:
if v11 == 32 goto label05;
if v11 != 9 goto label08;
label05:
v15 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v16 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v17 = v16 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v17;
v18 = v15[v17];
if v18 <= 32 goto label08;
if v18 == 47 goto label06;
if v18 != 35 goto label07;
label06:
v19 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _skipColon2(boolean)>(1);
return v19;
label07:
v20 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v21 = v20 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v21;
return v18;
label08:
v22 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _skipColon2(boolean)>(1);
return v22;
label09:
if v7 == 32 goto label10;
if v7 != 9 goto label11;
label10:
v23 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v24 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v25 = v24 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v25;
v7 = v23[v25];
label11:
if v7 != 58 goto label19;
v26 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v27 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v28 = v27 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v28;
v29 = v26[v28];
if v29 <= 32 goto label14;
if v29 == 47 goto label12;
if v29 != 35 goto label13;
label12:
v30 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _skipColon2(boolean)>(1);
return v30;
label13:
v31 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v32 = v31 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v32;
return v29;
label14:
if v29 == 32 goto label15;
if v29 != 9 goto label18;
label15:
v33 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v34 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v35 = v34 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v35;
v36 = v33[v35];
if v36 <= 32 goto label18;
if v36 == 47 goto label16;
if v36 != 35 goto label17;
label16:
v37 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _skipColon2(boolean)>(1);
return v37;
label17:
v38 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v39 = v38 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v39;
return v36;
label18:
v40 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _skipColon2(boolean)>(1);
return v40;
label19:
v41 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _skipColon2(boolean)>(0);
return v41;
}
private final int _skipColon2(boolean) throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
com.fasterxml.jackson.core.json.JsonReadContext v13;
int v10, v11, v12, v16, v2, v3, v6, v7;
java.lang.String v14, v15;
boolean v1, v4, v9;
char v8;
char[] v5;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: boolean;
label01:
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v3 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v2 < v3 goto label02;
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _loadMore()>();
if v4 == 0 goto label10;
label02:
v5 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v6 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v7 = v6 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v7;
v8 = v5[v6];
if v8 <= 32 goto label07;
if v8 != 47 goto label03;
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _skipComment()>();
goto label01;
label03:
if v8 != 35 goto label04;
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _skipYAMLComment()>();
if v9 != 0 goto label01;
label04:
if v1 == 0 goto label05;
return v8;
label05:
if v8 == 58 goto label06;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(v8, "was expecting a colon to separate field name and value");
label06:
v1 = 1;
goto label01;
label07:
if v8 >= 32 goto label01;
if v8 != 10 goto label08;
v10 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRow>;
v11 = v10 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRow> = v11;
v12 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRowStart> = v12;
goto label01;
label08:
if v8 != 13 goto label09;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _skipCR()>();
goto label01;
label09:
if v8 == 9 goto label01;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _throwInvalidSpace(int)>(v8);
goto label01;
label10:
v13 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v14 = virtualinvoke v13.<com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String typeDesc()>();
v15 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v14) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>(" within/between \u0001 entries");
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)>(v15, null);
v16 = (int) -1;
return v16;
}
private final int _skipColonFast(int) throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
int v1, v11, v12, v14, v18, v21, v23, v24, v3, v6, v9;
boolean v15, v16;
char v10, v19, v22, v4, v7;
char[] v13, v17, v2, v20, v5, v8;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v3 = v1 + 1;
v4 = v2[v1];
if v4 != 58 goto label04;
v5 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v6 = v3 + 1;
v7 = v5[v3];
if v7 <= 32 goto label01;
if v7 == 47 goto label03;
if v7 == 35 goto label03;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v6;
return v7;
label01:
if v7 == 32 goto label02;
if v7 != 9 goto label03;
label02:
v8 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v9 = v6;
v6 = v6 + 1;
v10 = v8[v9];
if v10 <= 32 goto label03;
if v10 == 47 goto label03;
if v10 == 35 goto label03;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v6;
return v10;
label03:
v11 = v6 - 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v11;
v12 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _skipColon2(boolean)>(1);
return v12;
label04:
if v4 == 32 goto label05;
if v4 != 9 goto label06;
label05:
v13 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v14 = v3;
v3 = v3 + 1;
v4 = v13[v14];
label06:
if v4 != 58 goto label07;
v15 = 1;
goto label08;
label07:
v15 = 0;
label08:
v16 = v15;
if v15 == 0 goto label11;
v17 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v18 = v3;
v3 = v3 + 1;
v19 = v17[v18];
if v19 <= 32 goto label09;
if v19 == 47 goto label11;
if v19 == 35 goto label11;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v3;
return v19;
label09:
if v19 == 32 goto label10;
if v19 != 9 goto label11;
label10:
v20 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v21 = v3;
v3 = v3 + 1;
v22 = v20[v21];
if v22 <= 32 goto label11;
if v22 == 47 goto label11;
if v22 == 35 goto label11;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v3;
return v22;
label11:
v23 = v3 - 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v23;
v24 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _skipColon2(boolean)>(v16);
return v24;
}
private final int _skipComma(int) throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
com.fasterxml.jackson.core.json.JsonReadContext v2;
int v1, v11, v12, v13, v14, v15, v16, v17, v5, v6, v8, v9;
java.lang.String v3, v4;
char v10;
char[] v7;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: int;
if v1 == 44 goto label1;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String typeDesc()>();
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("was expecting comma to separate \u0001 entries");
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(v1, v4);
label1:
v5 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v6 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v5 >= v6 goto label7;
v7 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v8 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v9 = v8 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v9;
v10 = v7[v8];
if v10 <= 32 goto label4;
if v10 == 47 goto label2;
if v10 != 35 goto label3;
label2:
v11 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v12 = v11 - 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v12;
v13 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _skipAfterComma2()>();
return v13;
label3:
return v10;
label4:
if v10 >= 32 goto label1;
if v10 != 10 goto label5;
v14 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRow>;
v15 = v14 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRow> = v15;
v16 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRowStart> = v16;
goto label1;
label5:
if v10 != 13 goto label6;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _skipCR()>();
goto label1;
label6:
if v10 == 9 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _throwInvalidSpace(int)>(v10);
goto label1;
label7:
v17 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _skipAfterComma2()>();
return v17;
}
private final int _skipAfterComma2() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
com.fasterxml.jackson.core.json.JsonReadContext v12;
int v1, v10, v11, v2, v5, v6, v9;
java.lang.String v13, v14;
com.fasterxml.jackson.core.JsonParseException v15;
boolean v3, v8;
char v7;
char[] v4;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
label1:
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v1 < v2 goto label2;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _loadMore()>();
if v3 == 0 goto label8;
label2:
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v5 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v6 = v5 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v6;
v7 = v4[v5];
if v7 <= 32 goto label5;
if v7 != 47 goto label3;
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _skipComment()>();
goto label1;
label3:
if v7 != 35 goto label4;
v8 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _skipYAMLComment()>();
if v8 != 0 goto label1;
label4:
return v7;
label5:
if v7 >= 32 goto label1;
if v7 != 10 goto label6;
v9 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRow>;
v10 = v9 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRow> = v10;
v11 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRowStart> = v11;
goto label1;
label6:
if v7 != 13 goto label7;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _skipCR()>();
goto label1;
label7:
if v7 == 9 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _throwInvalidSpace(int)>(v7);
goto label1;
label8:
v12 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v13 = virtualinvoke v12.<com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String typeDesc()>();
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v13) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unexpected end-of-input within/between \u0001 entries");
v15 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonParseException _constructError(java.lang.String)>(v14);
throw v15;
}
private final int _skipWSOrEnd() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
int v1, v10, v11, v12, v13, v14, v15, v16, v18, v19, v2, v21, v22, v23, v24, v25, v26, v27, v4, v6, v7, v9;
boolean v3;
char v20, v8;
char[] v17, v5;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v1 < v2 goto label01;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _loadMore()>();
if v3 != 0 goto label01;
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _eofAsNextChar()>();
return v4;
label01:
v5 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v6 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v7 = v6 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v7;
v8 = v5[v6];
if v8 <= 32 goto label04;
if v8 == 47 goto label02;
if v8 != 35 goto label03;
label02:
v9 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v10 = v9 - 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v10;
v11 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _skipWSOrEnd2()>();
return v11;
label03:
return v8;
label04:
if v8 == 32 goto label07;
if v8 != 10 goto label05;
v12 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRow>;
v13 = v12 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRow> = v13;
v14 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRowStart> = v14;
goto label07;
label05:
if v8 != 13 goto label06;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _skipCR()>();
goto label07;
label06:
if v8 == 9 goto label07;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _throwInvalidSpace(int)>(v8);
label07:
v15 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v16 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v15 >= v16 goto label13;
v17 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v18 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v19 = v18 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v19;
v20 = v17[v18];
if v20 <= 32 goto label10;
if v20 == 47 goto label08;
if v20 != 35 goto label09;
label08:
v21 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v22 = v21 - 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v22;
v23 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _skipWSOrEnd2()>();
return v23;
label09:
return v20;
label10:
if v20 == 32 goto label07;
if v20 != 10 goto label11;
v24 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRow>;
v25 = v24 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRow> = v25;
v26 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRowStart> = v26;
goto label07;
label11:
if v20 != 13 goto label12;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _skipCR()>();
goto label07;
label12:
if v20 == 9 goto label07;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _throwInvalidSpace(int)>(v20);
goto label07;
label13:
v27 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _skipWSOrEnd2()>();
return v27;
}
private int _skipWSOrEnd2() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
char v8;
int v1, v10, v11, v12, v2, v4, v6, v7;
char[] v5;
boolean v3, v9;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
label1:
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v1 < v2 goto label2;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _loadMore()>();
if v3 != 0 goto label2;
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _eofAsNextChar()>();
return v4;
label2:
v5 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v6 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v7 = v6 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v7;
v8 = v5[v6];
if v8 <= 32 goto label5;
if v8 != 47 goto label3;
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _skipComment()>();
goto label1;
label3:
if v8 != 35 goto label4;
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _skipYAMLComment()>();
if v9 != 0 goto label1;
label4:
return v8;
label5:
if v8 == 32 goto label1;
if v8 != 10 goto label6;
v10 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRow>;
v11 = v10 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRow> = v11;
v12 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRowStart> = v12;
goto label1;
label6:
if v8 != 13 goto label7;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _skipCR()>();
goto label1;
label7:
if v8 == 9 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _throwInvalidSpace(int)>(v8);
goto label1;
}
private void _skipComment() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
char v10;
int v1, v2, v3, v4, v5, v8, v9;
char[] v7;
boolean v6;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _features>;
v2 = <com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int FEAT_MASK_ALLOW_JAVA_COMMENTS>;
v3 = v1 & v2;
if v3 != 0 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(47, "maybe a (non-standard) comment? (not recognized as one since Feature \'ALLOW_COMMENTS\' not enabled for parser)");
label1:
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v5 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v4 < v5 goto label2;
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _loadMore()>();
if v6 != 0 goto label2;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)>(" in a comment", null);
label2:
v7 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v8 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v9 = v8 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v9;
v10 = v7[v8];
if v10 != 47 goto label3;
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _skipLine()>();
goto label5;
label3:
if v10 != 42 goto label4;
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _skipCComment()>();
goto label5;
label4:
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(v10, "was expecting either \'*\' or \'/\' for a comment");
label5:
return;
}
private void _skipCComment() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
int v1, v12, v14, v15, v16, v17, v18, v2, v5, v6, v8, v9;
boolean v10, v3;
char v13, v7;
char[] v11, v4;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
label1:
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v1 < v2 goto label2;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _loadMore()>();
if v3 == 0 goto label7;
label2:
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v5 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v6 = v5 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v6;
v7 = v4[v5];
if v7 > 42 goto label1;
if v7 != 42 goto label4;
v8 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v9 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v8 < v9 goto label3;
v10 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _loadMore()>();
if v10 == 0 goto label7;
label3:
v11 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v12 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v13 = v11[v12];
if v13 != 47 goto label1;
v14 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v15 = v14 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v15;
return;
label4:
if v7 >= 32 goto label1;
if v7 != 10 goto label5;
v16 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRow>;
v17 = v16 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRow> = v17;
v18 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRowStart> = v18;
goto label1;
label5:
if v7 != 13 goto label6;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _skipCR()>();
goto label1;
label6:
if v7 == 9 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _throwInvalidSpace(int)>(v7);
goto label1;
label7:
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)>(" in a comment", null);
return;
}
private boolean _skipYAMLComment() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
int v1, v2, v3;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _features>;
v2 = <com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int FEAT_MASK_ALLOW_YAML_COMMENTS>;
v3 = v1 & v2;
if v3 != 0 goto label1;
return 0;
label1:
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _skipLine()>();
return 1;
}
private void _skipLine() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
char v7;
int v1, v10, v2, v5, v6, v8, v9;
char[] v4;
boolean v3;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
label1:
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v1 < v2 goto label2;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _loadMore()>();
if v3 == 0 goto label5;
label2:
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v5 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v6 = v5 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v6;
v7 = v4[v5];
if v7 >= 32 goto label1;
if v7 != 10 goto label3;
v8 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRow>;
v9 = v8 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRow> = v9;
v10 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRowStart> = v10;
goto label5;
label3:
if v7 != 13 goto label4;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _skipCR()>();
goto label5;
label4:
if v7 == 9 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _throwInvalidSpace(int)>(v7);
goto label1;
label5:
return;
}
protected char _decodeEscaped() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
int v1, v10, v11, v12, v13, v17, v18, v2, v20, v21, v6, v7;
com.fasterxml.jackson.core.JsonToken v15, v4;
boolean v14, v3;
char v19, v8, v9;
char[] v16, v5;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v1 < v2 goto label01;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _loadMore()>();
if v3 != 0 goto label01;
v4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)>(" in character escape sequence", v4);
label01:
v5 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v6 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v7 = v6 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v7;
v8 = v5[v6];
lookupswitch(v8)
{
case 34: goto label07;
case 47: goto label07;
case 92: goto label07;
case 98: goto label02;
case 102: goto label05;
case 110: goto label04;
case 114: goto label06;
case 116: goto label03;
case 117: goto label09;
default: goto label08;
};
label02:
return 8;
label03:
return 9;
label04:
return 10;
label05:
return 12;
label06:
return 13;
label07:
return v8;
label08:
v9 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char _handleUnrecognizedCharacterEscape(char)>(v8);
return v9;
label09:
v10 = 0;
v11 = 0;
label10:
if v11 >= 4 goto label13;
v12 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v13 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v12 < v13 goto label11;
v14 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _loadMore()>();
if v14 != 0 goto label11;
v15 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)>(" in character escape sequence", v15);
label11:
v16 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v17 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v18 = v17 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v18;
v19 = v16[v17];
v20 = staticinvoke <com.fasterxml.jackson.core.io.CharTypes: int charToHex(int)>(v19);
if v20 >= 0 goto label12;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportUnexpectedChar(int,java.lang.String)>(v19, "expected a hex-digit for character escape sequence");
label12:
v21 = v10 << 4;
v10 = v21 | v20;
v11 = v11 + 1;
goto label10;
label13:
return v10;
}
private final void _matchTrue() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
char v11, v5, v7, v9;
int v1, v10, v2, v3, v6, v8;
char[] v4;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v2 = v1 + 3;
v3 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v2 >= v3 goto label2;
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v5 = v4[v1];
if v5 != 114 goto label2;
v6 = v1 + 1;
v7 = v4[v6];
if v7 != 117 goto label2;
v8 = v6 + 1;
v9 = v4[v8];
if v9 != 101 goto label2;
v10 = v8 + 1;
v11 = v4[v10];
if v11 < 48 goto label1;
if v11 == 93 goto label1;
if v11 != 125 goto label2;
label1:
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v10;
return;
label2:
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _matchToken(java.lang.String,int)>("true", 1);
return;
}
private final void _matchFalse() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
char v11, v13, v5, v7, v9;
int v1, v10, v12, v2, v3, v6, v8;
char[] v4;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v2 = v1 + 4;
v3 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v2 >= v3 goto label2;
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v5 = v4[v1];
if v5 != 97 goto label2;
v6 = v1 + 1;
v7 = v4[v6];
if v7 != 108 goto label2;
v8 = v6 + 1;
v9 = v4[v8];
if v9 != 115 goto label2;
v10 = v8 + 1;
v11 = v4[v10];
if v11 != 101 goto label2;
v12 = v10 + 1;
v13 = v4[v12];
if v13 < 48 goto label1;
if v13 == 93 goto label1;
if v13 != 125 goto label2;
label1:
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v12;
return;
label2:
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _matchToken(java.lang.String,int)>("false", 1);
return;
}
private final void _matchNull() throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
char v11, v5, v7, v9;
int v1, v10, v2, v3, v6, v8;
char[] v4;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v2 = v1 + 3;
v3 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v2 >= v3 goto label2;
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v5 = v4[v1];
if v5 != 117 goto label2;
v6 = v1 + 1;
v7 = v4[v6];
if v7 != 108 goto label2;
v8 = v6 + 1;
v9 = v4[v8];
if v9 != 108 goto label2;
v10 = v8 + 1;
v11 = v4[v10];
if v11 < 48 goto label1;
if v11 == 93 goto label1;
if v11 != 125 goto label2;
label1:
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v10;
return;
label2:
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _matchToken(java.lang.String,int)>("null", 1);
return;
}
protected final void _matchToken(java.lang.String, int) throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
int v12, v13, v15, v2, v3, v4, v5, v6, v8;
java.lang.String v1, v11;
char v10, v16, v9;
char[] v14, v7;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 = virtualinvoke v1.<java.lang.String: int length()>();
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v5 = v4 + v3;
v6 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v5 < v6 goto label1;
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _matchToken2(java.lang.String,int)>(v1, v2);
return;
label1:
v7 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v8 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v9 = v7[v8];
v10 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v2);
if v9 == v10 goto label2;
v11 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int,int)>(0, v2);
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportInvalidToken(java.lang.String)>(v11);
label2:
v12 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v13 = v12 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v13;
v2 = v2 + 1;
if v2 < v3 goto label1;
v14 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v15 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v16 = v14[v15];
if v16 < 48 goto label3;
if v16 == 93 goto label3;
if v16 == 125 goto label3;
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _checkMatchEnd(java.lang.String,int,int)>(v1, v2, v16);
label3:
return;
}
private final void _matchToken2(java.lang.String, int) throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
int v12, v13, v14, v15, v18, v2, v3, v4, v5, v8;
java.lang.String v1, v11;
boolean v16, v6;
char v10, v19, v9;
char[] v17, v7;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 = virtualinvoke v1.<java.lang.String: int length()>();
label1:
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v5 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v4 < v5 goto label2;
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _loadMore()>();
if v6 == 0 goto label3;
label2:
v7 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v8 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v9 = v7[v8];
v10 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v2);
if v9 == v10 goto label4;
label3:
v11 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int,int)>(0, v2);
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportInvalidToken(java.lang.String)>(v11);
label4:
v12 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v13 = v12 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v13;
v2 = v2 + 1;
if v2 < v3 goto label1;
v14 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v15 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v14 < v15 goto label5;
v16 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _loadMore()>();
if v16 != 0 goto label5;
return;
label5:
v17 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v18 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v19 = v17[v18];
if v19 < 48 goto label6;
if v19 == 93 goto label6;
if v19 == 125 goto label6;
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _checkMatchEnd(java.lang.String,int,int)>(v1, v2, v19);
label6:
return;
}
private final void _checkMatchEnd(java.lang.String, int, int) throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
int v2, v3;
java.lang.String v1, v5;
boolean v4;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>(v3);
if v4 == 0 goto label1;
v5 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int,int)>(0, v2);
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportInvalidToken(java.lang.String)>(v5);
label1:
return;
}
protected byte[] _decodeBase64(com.fasterxml.jackson.core.Base64Variant) throws java.io.IOException
{
byte[] v10, v33, v62;
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
java.lang.String v45;
com.fasterxml.jackson.core.util.ByteArrayBuilder v2;
char[] v14, v23, v37, v5, v52;
boolean v30, v41, v59;
com.fasterxml.jackson.core.Base64Variant v1;
int v11, v12, v13, v15, v16, v18, v19, v20, v21, v22, v24, v25, v27, v28, v29, v3, v31, v32, v34, v35, v36, v38, v39, v4, v42, v43, v47, v48, v49, v50, v51, v53, v54, v56, v57, v58, v6, v60, v61, v63, v64, v65, v66, v7, v9;
char v17, v26, v40, v44, v55, v8;
java.lang.IllegalArgumentException v46;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: com.fasterxml.jackson.core.Base64Variant;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.util.ByteArrayBuilder _getByteArrayBuilder()>();
label01:
v3 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v3 < v4 goto label02;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _loadMoreGuaranteed()>();
label02:
v5 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v6 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v7 = v6 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v7;
v8 = v5[v6];
if v8 <= 32 goto label01;
v9 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(char)>(v8);
if v9 >= 0 goto label04;
if v8 != 34 goto label03;
v10 = virtualinvoke v2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: byte[] toByteArray()>();
return v10;
label03:
v9 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,char,int)>(v1, v8, 0);
if v9 < 0 goto label01;
label04:
v11 = v9;
v12 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v13 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v12 < v13 goto label05;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _loadMoreGuaranteed()>();
label05:
v14 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v15 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v16 = v15 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v16;
v17 = v14[v15];
v18 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(char)>(v17);
if v18 >= 0 goto label06;
v18 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,char,int)>(v1, v17, 1);
label06:
v19 = v11 << 6;
v20 = v19 | v18;
v21 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v22 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v21 < v22 goto label07;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _loadMoreGuaranteed()>();
label07:
v23 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v24 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v25 = v24 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v25;
v26 = v23[v24];
v27 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(char)>(v26);
if v27 >= 0 goto label13;
v28 = (int) -2;
if v27 == v28 goto label10;
if v26 != 34 goto label09;
v29 = v20 >> 4;
virtualinvoke v2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: void append(int)>(v29);
v30 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: boolean requiresPaddingOnRead()>();
if v30 == 0 goto label08;
v31 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v32 = v31 - 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v32;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _handleBase64MissingPadding(com.fasterxml.jackson.core.Base64Variant)>(v1);
label08:
v33 = virtualinvoke v2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: byte[] toByteArray()>();
return v33;
label09:
v27 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,char,int)>(v1, v26, 2);
label10:
v34 = (int) -2;
if v27 != v34 goto label13;
v35 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v36 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v35 < v36 goto label11;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _loadMoreGuaranteed()>();
label11:
v37 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v38 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v39 = v38 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v39;
v40 = v37[v38];
v41 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: boolean usesPaddingChar(char)>(v40);
if v41 != 0 goto label12;
v42 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,char,int)>(v1, v40, 3);
v43 = (int) -2;
if v42 == v43 goto label12;
v44 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: char getPaddingChar()>();
v45 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (char)>(v44) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("expected padding character \'\u0001\'");
v46 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.lang.IllegalArgumentException reportInvalidBase64Char(com.fasterxml.jackson.core.Base64Variant,int,int,java.lang.String)>(v1, v40, 3, v45);
throw v46;
label12:
v47 = v20 >> 4;
virtualinvoke v2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: void append(int)>(v47);
goto label01;
label13:
v48 = v20 << 6;
v49 = v48 | v27;
v50 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v51 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v50 < v51 goto label14;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _loadMoreGuaranteed()>();
label14:
v52 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v53 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v54 = v53 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v54;
v55 = v52[v53];
v56 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(char)>(v55);
if v56 >= 0 goto label18;
v57 = (int) -2;
if v56 == v57 goto label17;
if v55 != 34 goto label16;
v58 = v49 >> 2;
virtualinvoke v2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: void appendTwoBytes(int)>(v58);
v59 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: boolean requiresPaddingOnRead()>();
if v59 == 0 goto label15;
v60 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v61 = v60 - 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v61;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _handleBase64MissingPadding(com.fasterxml.jackson.core.Base64Variant)>(v1);
label15:
v62 = virtualinvoke v2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: byte[] toByteArray()>();
return v62;
label16:
v56 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,char,int)>(v1, v55, 3);
label17:
v63 = (int) -2;
if v56 != v63 goto label18;
v64 = v49 >> 2;
virtualinvoke v2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: void appendTwoBytes(int)>(v64);
goto label01;
label18:
v65 = v49 << 6;
v66 = v65 | v56;
virtualinvoke v2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: void appendThreeBytes(int)>(v66);
goto label01;
}
public com.fasterxml.jackson.core.JsonLocation getTokenLocation()
{
com.fasterxml.jackson.core.JsonLocation v11, v7;
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
long v13, v14, v3, v4, v5, v6;
int v10, v15, v16, v9;
com.fasterxml.jackson.core.JsonToken v1, v2;
com.fasterxml.jackson.core.io.ContentReference v12, v8;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v1 != v2 goto label1;
v3 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: long _currInputProcessed>;
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: long _nameStartOffset>;
v5 = v4 - 1L;
v6 = v3 + v5;
v7 = new com.fasterxml.jackson.core.JsonLocation;
v8 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.io.ContentReference _contentReference()>();
v9 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _nameStartRow>;
v10 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _nameStartCol>;
specialinvoke v7.<com.fasterxml.jackson.core.JsonLocation: void <init>(com.fasterxml.jackson.core.io.ContentReference,long,long,int,int)>(v8, -1L, v6, v9, v10);
return v7;
label1:
v11 = new com.fasterxml.jackson.core.JsonLocation;
v12 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.io.ContentReference _contentReference()>();
v13 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: long _tokenInputTotal>;
v14 = v13 - 1L;
v15 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _tokenInputRow>;
v16 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _tokenInputCol>;
specialinvoke v11.<com.fasterxml.jackson.core.JsonLocation: void <init>(com.fasterxml.jackson.core.io.ContentReference,long,long,int,int)>(v12, -1L, v14, v15, v16);
return v11;
}
public com.fasterxml.jackson.core.JsonLocation getCurrentLocation()
{
com.fasterxml.jackson.core.JsonLocation v5;
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
long v7, v9;
int v1, v10, v2, v3, v4, v8;
com.fasterxml.jackson.core.io.ContentReference v6;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRowStart>;
v3 = v1 - v2;
v4 = v3 + 1;
v5 = new com.fasterxml.jackson.core.JsonLocation;
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.io.ContentReference _contentReference()>();
v7 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: long _currInputProcessed>;
v8 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v9 = v7 + v8;
v10 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRow>;
specialinvoke v5.<com.fasterxml.jackson.core.JsonLocation: void <init>(com.fasterxml.jackson.core.io.ContentReference,long,long,int,int)>(v6, -1L, v9, v10, v4);
return v5;
}
private final void _updateLocation()
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
int v1, v4, v5, v6;
long v2, v3;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: long _currInputProcessed>;
v3 = v2 + v1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: long _tokenInputTotal> = v3;
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRow>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _tokenInputRow> = v4;
v5 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRowStart>;
v6 = v1 - v5;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _tokenInputCol> = v6;
return;
}
private final void _updateNameLocation()
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
int v1, v2, v3, v4;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: long _nameStartOffset> = v1;
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRow>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _nameStartRow> = v2;
v3 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _currInputRowStart>;
v4 = v1 - v3;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _nameStartCol> = v4;
return;
}
protected void _reportInvalidToken(java.lang.String) throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
java.lang.String v1, v2;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: java.lang.String _validJsonTokenList()>();
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportInvalidToken(java.lang.String,java.lang.String)>(v1, v2);
return;
}
protected void _reportInvalidToken(java.lang.String, java.lang.String) throws java.io.IOException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
char v9;
int v11, v12, v13, v4, v5, v8;
char[] v7;
java.lang.StringBuilder v3;
java.lang.String v1, v2;
boolean v10, v6;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = new java.lang.StringBuilder;
specialinvoke v3.<java.lang.StringBuilder: void <init>(java.lang.String)>(v1);
label1:
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v5 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputEnd>;
if v4 < v5 goto label2;
v6 = virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: boolean _loadMore()>();
if v6 == 0 goto label3;
label2:
v7 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: char[] _inputBuffer>;
v8 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v9 = v7[v8];
v10 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>(v9);
if v10 == 0 goto label3;
v11 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr>;
v12 = v11 + 1;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int _inputPtr> = v12;
virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v9);
v13 = virtualinvoke v3.<java.lang.StringBuilder: int length()>();
if v13 < 256 goto label1;
virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...");
label3:
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportError(java.lang.String,java.lang.Object,java.lang.Object)>("Unrecognized token \'%s\': was expecting %s", v3, v2);
return;
}
private void _closeScope(int) throws com.fasterxml.jackson.core.JsonParseException
{
com.fasterxml.jackson.core.json.ReaderBasedJsonParser v0;
com.fasterxml.jackson.core.json.JsonReadContext v10, v2, v4, v5, v7, v9;
int v1;
com.fasterxml.jackson.core.JsonToken v11, v6;
boolean v3, v8;
v0 := @this: com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
v1 := @parameter0: int;
if v1 != 93 goto label2;
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _updateLocation()>();
v2 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inArray()>();
if v3 != 0 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportMismatchedEndMarker(int,char)>(v1, 125);
label1:
v4 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.json.JsonReadContext: com.fasterxml.jackson.core.json.JsonReadContext clearAndGetParent()>();
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = v5;
v6 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken END_ARRAY>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v6;
label2:
if v1 != 125 goto label4;
specialinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _updateLocation()>();
v7 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v8 = virtualinvoke v7.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inObject()>();
if v8 != 0 goto label3;
virtualinvoke v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: void _reportMismatchedEndMarker(int,char)>(v1, 93);
label3:
v9 = v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v10 = virtualinvoke v9.<com.fasterxml.jackson.core.json.JsonReadContext: com.fasterxml.jackson.core.json.JsonReadContext clearAndGetParent()>();
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = v10;
v11 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken END_OBJECT>;
v0.<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: com.fasterxml.jackson.core.JsonToken _currToken> = v11;
label4:
return;
}
static void <clinit>()
{
com.fasterxml.jackson.core.JsonParser$Feature v0, v10, v12, v14, v2, v4, v6, v8;
int[] v16;
int v1, v11, v13, v15, v3, v5, v7, v9;
v0 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_TRAILING_COMMA>;
v1 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int FEAT_MASK_TRAILING_COMMA> = v1;
v2 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_NUMERIC_LEADING_ZEROS>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int FEAT_MASK_LEADING_ZEROS> = v3;
v4 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_NON_NUMERIC_NUMBERS>;
v5 = virtualinvoke v4.<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int FEAT_MASK_NON_NUM_NUMBERS> = v5;
v6 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_MISSING_VALUES>;
v7 = virtualinvoke v6.<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int FEAT_MASK_ALLOW_MISSING> = v7;
v8 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_SINGLE_QUOTES>;
v9 = virtualinvoke v8.<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int FEAT_MASK_ALLOW_SINGLE_QUOTES> = v9;
v10 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_UNQUOTED_FIELD_NAMES>;
v11 = virtualinvoke v10.<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int FEAT_MASK_ALLOW_UNQUOTED_NAMES> = v11;
v12 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_COMMENTS>;
v13 = virtualinvoke v12.<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int FEAT_MASK_ALLOW_JAVA_COMMENTS> = v13;
v14 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_YAML_COMMENTS>;
v15 = virtualinvoke v14.<com.fasterxml.jackson.core.JsonParser$Feature: int getMask()>();
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int FEAT_MASK_ALLOW_YAML_COMMENTS> = v15;
v16 = staticinvoke <com.fasterxml.jackson.core.io.CharTypes: int[] getInputCodeLatin1()>();
<com.fasterxml.jackson.core.json.ReaderBasedJsonParser: int[] _icLatin1> = v16;
return;
}
}