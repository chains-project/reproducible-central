public class com.fasterxml.jackson.core.json.UTF8JsonGenerator extends com.fasterxml.jackson.core.json.JsonGeneratorImpl
{
private static final byte BYTE_u;
private static final byte BYTE_0;
private static final byte BYTE_LBRACKET;
private static final byte BYTE_RBRACKET;
private static final byte BYTE_LCURLY;
private static final byte BYTE_RCURLY;
private static final byte BYTE_BACKSLASH;
private static final byte BYTE_COMMA;
private static final byte BYTE_COLON;
private static final int MAX_BYTES_TO_BUFFER;
private static final byte[] HEX_BYTES_UPPER;
private static final byte[] HEX_BYTES_LOWER;
private static final byte[] NULL_BYTES;
private static final byte[] TRUE_BYTES;
private static final byte[] FALSE_BYTES;
protected final java.io.OutputStream _outputStream;
protected byte _quoteChar;
protected byte[] _outputBuffer;
protected int _outputTail;
protected final int _outputEnd;
protected final int _outputMaxContiguous;
protected char[] _charBuffer;
protected final int _charBufferLength;
protected byte[] _entityBuffer;
protected boolean _bufferRecyclable;
public void <init>(com.fasterxml.jackson.core.io.IOContext, int, com.fasterxml.jackson.core.ObjectCodec, java.io.OutputStream, char)
{
byte[] v7, v8;
com.fasterxml.jackson.core.ObjectCodec v3;
int[] v6;
int v10, v11, v14, v2, v9;
boolean v16;
java.io.OutputStream v4;
com.fasterxml.jackson.core.JsonGenerator$Feature v15;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
char v5;
com.fasterxml.jackson.core.io.IOContext v1;
char[] v12, v13;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: com.fasterxml.jackson.core.io.IOContext;
v2 := @parameter1: int;
v3 := @parameter2: com.fasterxml.jackson.core.ObjectCodec;
v4 := @parameter3: java.io.OutputStream;
v5 := @parameter4: char;
specialinvoke v0.<com.fasterxml.jackson.core.json.JsonGeneratorImpl: void <init>(com.fasterxml.jackson.core.io.IOContext,int,com.fasterxml.jackson.core.ObjectCodec)>(v1, v2, v3);
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: java.io.OutputStream _outputStream> = v4;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar> = v5;
if v5 == 34 goto label1;
v6 = staticinvoke <com.fasterxml.jackson.core.io.CharTypes: int[] get7BitOutputEscapes(int)>(v5);
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int[] _outputEscapes> = v6;
label1:
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: boolean _bufferRecyclable> = 1;
v7 = virtualinvoke v1.<com.fasterxml.jackson.core.io.IOContext: byte[] allocWriteEncodingBuffer()>();
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer> = v7;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v9 = lengthof v8;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd> = v9;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
v11 = v10 >> 3;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputMaxContiguous> = v11;
v12 = virtualinvoke v1.<com.fasterxml.jackson.core.io.IOContext: char[] allocConcatBuffer()>();
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: char[] _charBuffer> = v12;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: char[] _charBuffer>;
v14 = lengthof v13;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _charBufferLength> = v14;
v15 = <com.fasterxml.jackson.core.JsonGenerator$Feature: com.fasterxml.jackson.core.JsonGenerator$Feature ESCAPE_NON_ASCII>;
v16 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: boolean isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature)>(v15);
if v16 == 0 goto label2;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.JsonGenerator setHighestNonEscapedChar(int)>(127);
label2:
return;
}
public void <init>(com.fasterxml.jackson.core.io.IOContext, int, com.fasterxml.jackson.core.ObjectCodec, java.io.OutputStream, char, byte[], int, boolean)
{
byte[] v10, v6;
com.fasterxml.jackson.core.ObjectCodec v3;
int[] v9;
int v11, v12, v13, v16, v2, v7;
boolean v8;
java.io.OutputStream v4;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
char v5;
com.fasterxml.jackson.core.io.IOContext v1;
char[] v14, v15;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: com.fasterxml.jackson.core.io.IOContext;
v2 := @parameter1: int;
v3 := @parameter2: com.fasterxml.jackson.core.ObjectCodec;
v4 := @parameter3: java.io.OutputStream;
v5 := @parameter4: char;
v6 := @parameter5: byte[];
v7 := @parameter6: int;
v8 := @parameter7: boolean;
specialinvoke v0.<com.fasterxml.jackson.core.json.JsonGeneratorImpl: void <init>(com.fasterxml.jackson.core.io.IOContext,int,com.fasterxml.jackson.core.ObjectCodec)>(v1, v2, v3);
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: java.io.OutputStream _outputStream> = v4;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar> = v5;
if v5 == 34 goto label1;
v9 = staticinvoke <com.fasterxml.jackson.core.io.CharTypes: int[] get7BitOutputEscapes(int)>(v5);
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int[] _outputEscapes> = v9;
label1:
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: boolean _bufferRecyclable> = v8;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v7;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer> = v6;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v11 = lengthof v10;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd> = v11;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
v13 = v12 >> 3;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputMaxContiguous> = v13;
v14 = virtualinvoke v1.<com.fasterxml.jackson.core.io.IOContext: char[] allocConcatBuffer()>();
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: char[] _charBuffer> = v14;
v15 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: char[] _charBuffer>;
v16 = lengthof v15;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _charBufferLength> = v16;
return;
}
public void <init>(com.fasterxml.jackson.core.io.IOContext, int, com.fasterxml.jackson.core.ObjectCodec, java.io.OutputStream)
{
java.io.OutputStream v4;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
com.fasterxml.jackson.core.io.IOContext v1;
int v2;
com.fasterxml.jackson.core.ObjectCodec v3;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: com.fasterxml.jackson.core.io.IOContext;
v2 := @parameter1: int;
v3 := @parameter2: com.fasterxml.jackson.core.ObjectCodec;
v4 := @parameter3: java.io.OutputStream;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void <init>(com.fasterxml.jackson.core.io.IOContext,int,com.fasterxml.jackson.core.ObjectCodec,java.io.OutputStream,char)>(v1, v2, v3, v4, 34);
return;
}
public void <init>(com.fasterxml.jackson.core.io.IOContext, int, com.fasterxml.jackson.core.ObjectCodec, java.io.OutputStream, byte[], int, boolean)
{
java.io.OutputStream v4;
byte[] v5;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
com.fasterxml.jackson.core.ObjectCodec v3;
com.fasterxml.jackson.core.io.IOContext v1;
int v2, v6;
boolean v7;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: com.fasterxml.jackson.core.io.IOContext;
v2 := @parameter1: int;
v3 := @parameter2: com.fasterxml.jackson.core.ObjectCodec;
v4 := @parameter3: java.io.OutputStream;
v5 := @parameter4: byte[];
v6 := @parameter5: int;
v7 := @parameter6: boolean;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void <init>(com.fasterxml.jackson.core.io.IOContext,int,com.fasterxml.jackson.core.ObjectCodec,java.io.OutputStream,char,byte[],int,boolean)>(v1, v2, v3, v4, 34, v5, v6, v7);
return;
}
public java.lang.Object getOutputTarget()
{
java.io.OutputStream v1;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: java.io.OutputStream _outputStream>;
return v1;
}
public int getOutputBuffered()
{
int v1;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
return v1;
}
public void writeFieldName(java.lang.String) throws java.io.IOException
{
byte[] v15, v25, v7;
byte v18, v28;
int v11, v12, v13, v14, v16, v17, v19, v20, v21, v22, v23, v24, v26, v27, v4, v5, v6, v8, v9;
java.lang.String v1;
boolean v10;
com.fasterxml.jackson.core.json.JsonWriteContext v3;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
com.fasterxml.jackson.core.PrettyPrinter v2;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: java.lang.String;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.PrettyPrinter _cfgPrettyPrinter>;
if v2 == null goto label01;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writePPFieldName(java.lang.String)>(v1);
return;
label01:
v3 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.json.JsonWriteContext _writeContext>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.json.JsonWriteContext: int writeFieldName(java.lang.String)>(v1);
if v4 != 4 goto label02;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _reportError(java.lang.String)>("Can not write a field name, expecting a value");
label02:
if v4 != 1 goto label04;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v5 < v6 goto label03;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label03:
v7 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v9 = v8 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v9;
v7[v8] = 44;
label04:
v10 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: boolean _cfgUnqNames>;
if v10 == 0 goto label05;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeStringSegments(java.lang.String,boolean)>(v1, 0);
return;
label05:
v11 = virtualinvoke v1.<java.lang.String: int length()>();
v12 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _charBufferLength>;
if v11 <= v12 goto label06;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeStringSegments(java.lang.String,boolean)>(v1, 1);
return;
label06:
v13 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v14 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v13 < v14 goto label07;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label07:
v15 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v16 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v17 = v16 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v17;
v18 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v15[v16] = v18;
v19 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputMaxContiguous>;
if v11 > v19 goto label09;
v20 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v21 = v20 + v11;
v22 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v21 <= v22 goto label08;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label08:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeStringSegment(java.lang.String,int,int)>(v1, 0, v11);
goto label10;
label09:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeStringSegments(java.lang.String,int,int)>(v1, 0, v11);
label10:
v23 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v24 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v23 < v24 goto label11;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label11:
v25 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v26 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v27 = v26 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v27;
v28 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v25[v26] = v28;
return;
}
public void writeFieldName(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException
{
byte[] v14, v18, v21, v26, v8;
com.fasterxml.jackson.core.SerializableString v1;
byte v17, v29;
int v10, v12, v13, v15, v16, v19, v20, v22, v23, v24, v25, v27, v28, v5, v6, v7, v9;
java.lang.String v4;
boolean v11;
com.fasterxml.jackson.core.json.JsonWriteContext v3;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
com.fasterxml.jackson.core.PrettyPrinter v2;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: com.fasterxml.jackson.core.SerializableString;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.PrettyPrinter _cfgPrettyPrinter>;
if v2 == null goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writePPFieldName(com.fasterxml.jackson.core.SerializableString)>(v1);
return;
label1:
v3 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.json.JsonWriteContext _writeContext>;
v4 = interfaceinvoke v1.<com.fasterxml.jackson.core.SerializableString: java.lang.String getValue()>();
v5 = virtualinvoke v3.<com.fasterxml.jackson.core.json.JsonWriteContext: int writeFieldName(java.lang.String)>(v4);
if v5 != 4 goto label2;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _reportError(java.lang.String)>("Can not write a field name, expecting a value");
label2:
if v5 != 1 goto label4;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v6 < v7 goto label3;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label3:
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v10 = v9 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v10;
v8[v9] = 44;
label4:
v11 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: boolean _cfgUnqNames>;
if v11 == 0 goto label5;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeUnq(com.fasterxml.jackson.core.SerializableString)>(v1);
return;
label5:
v12 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v12 < v13 goto label6;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label6:
v14 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v15 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v16 = v15 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v16;
v17 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v14[v15] = v17;
v18 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v19 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v20 = interfaceinvoke v1.<com.fasterxml.jackson.core.SerializableString: int appendQuotedUTF8(byte[],int)>(v18, v19);
if v20 >= 0 goto label7;
v21 = interfaceinvoke v1.<com.fasterxml.jackson.core.SerializableString: byte[] asQuotedUTF8()>();
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeBytes(byte[])>(v21);
goto label8;
label7:
v22 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v23 = v22 + v20;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v23;
label8:
v24 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v25 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v24 < v25 goto label9;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label9:
v26 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v27 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v28 = v27 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v28;
v29 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v26[v27] = v29;
return;
}
private final void _writeUnq(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException
{
byte[] v2, v5;
com.fasterxml.jackson.core.SerializableString v1;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
int v3, v4, v6, v7;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: com.fasterxml.jackson.core.SerializableString;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v4 = interfaceinvoke v1.<com.fasterxml.jackson.core.SerializableString: int appendQuotedUTF8(byte[],int)>(v2, v3);
if v4 >= 0 goto label1;
v5 = interfaceinvoke v1.<com.fasterxml.jackson.core.SerializableString: byte[] asQuotedUTF8()>();
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeBytes(byte[])>(v5);
goto label2;
label1:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v7 = v6 + v4;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v7;
label2:
return;
}
public final void writeStartArray() throws java.io.IOException
{
com.fasterxml.jackson.core.json.JsonWriteContext v1, v2;
byte[] v7;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
int v5, v6, v8, v9;
com.fasterxml.jackson.core.PrettyPrinter v3, v4;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _verifyValueWrite(java.lang.String)>("start an array");
v1 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.json.JsonWriteContext _writeContext>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.json.JsonWriteContext: com.fasterxml.jackson.core.json.JsonWriteContext createChildArrayContext()>();
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.json.JsonWriteContext _writeContext> = v2;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.PrettyPrinter _cfgPrettyPrinter>;
if v3 == null goto label1;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.PrettyPrinter _cfgPrettyPrinter>;
interfaceinvoke v4.<com.fasterxml.jackson.core.PrettyPrinter: void writeStartArray(com.fasterxml.jackson.core.JsonGenerator)>(v0);
goto label3;
label1:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v5 < v6 goto label2;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label2:
v7 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v9 = v8 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v9;
v7[v8] = 91;
label3:
return;
}
public final void writeStartArray(java.lang.Object) throws java.io.IOException
{
com.fasterxml.jackson.core.json.JsonWriteContext v2, v3;
byte[] v8;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
int v10, v6, v7, v9;
java.lang.Object v1;
com.fasterxml.jackson.core.PrettyPrinter v4, v5;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: java.lang.Object;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _verifyValueWrite(java.lang.String)>("start an array");
v2 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.json.JsonWriteContext _writeContext>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.json.JsonWriteContext: com.fasterxml.jackson.core.json.JsonWriteContext createChildArrayContext(java.lang.Object)>(v1);
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.json.JsonWriteContext _writeContext> = v3;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.PrettyPrinter _cfgPrettyPrinter>;
if v4 == null goto label1;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.PrettyPrinter _cfgPrettyPrinter>;
interfaceinvoke v5.<com.fasterxml.jackson.core.PrettyPrinter: void writeStartArray(com.fasterxml.jackson.core.JsonGenerator)>(v0);
goto label3;
label1:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v6 < v7 goto label2;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label2:
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v10 = v9 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v10;
v8[v9] = 91;
label3:
return;
}
public void writeStartArray(java.lang.Object, int) throws java.io.IOException
{
com.fasterxml.jackson.core.json.JsonWriteContext v3, v4;
byte[] v9;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
int v10, v11, v2, v7, v8;
java.lang.Object v1;
com.fasterxml.jackson.core.PrettyPrinter v5, v6;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: int;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _verifyValueWrite(java.lang.String)>("start an array");
v3 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.json.JsonWriteContext _writeContext>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.json.JsonWriteContext: com.fasterxml.jackson.core.json.JsonWriteContext createChildArrayContext(java.lang.Object)>(v1);
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.json.JsonWriteContext _writeContext> = v4;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.PrettyPrinter _cfgPrettyPrinter>;
if v5 == null goto label1;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.PrettyPrinter _cfgPrettyPrinter>;
interfaceinvoke v6.<com.fasterxml.jackson.core.PrettyPrinter: void writeStartArray(com.fasterxml.jackson.core.JsonGenerator)>(v0);
goto label3;
label1:
v7 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v7 < v8 goto label2;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label2:
v9 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v11 = v10 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v11;
v9[v10] = 91;
label3:
return;
}
public final void writeEndArray() throws java.io.IOException
{
byte[] v12;
int v10, v11, v13, v14, v9;
java.lang.String v4, v5;
boolean v2;
com.fasterxml.jackson.core.json.JsonWriteContext v1, v15, v16, v3, v8;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
com.fasterxml.jackson.core.PrettyPrinter v6, v7;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.json.JsonWriteContext _writeContext>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.json.JsonWriteContext: boolean inArray()>();
if v2 != 0 goto label1;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.json.JsonWriteContext _writeContext>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.json.JsonWriteContext: java.lang.String typeDesc()>();
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Current context not Array but \u0001");
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _reportError(java.lang.String)>(v5);
label1:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.PrettyPrinter _cfgPrettyPrinter>;
if v6 == null goto label2;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.PrettyPrinter _cfgPrettyPrinter>;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.json.JsonWriteContext _writeContext>;
v9 = virtualinvoke v8.<com.fasterxml.jackson.core.json.JsonWriteContext: int getEntryCount()>();
interfaceinvoke v7.<com.fasterxml.jackson.core.PrettyPrinter: void writeEndArray(com.fasterxml.jackson.core.JsonGenerator,int)>(v0, v9);
goto label4;
label2:
v10 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v10 < v11 goto label3;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label3:
v12 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v14 = v13 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v14;
v12[v13] = 93;
label4:
v15 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.json.JsonWriteContext _writeContext>;
v16 = virtualinvoke v15.<com.fasterxml.jackson.core.json.JsonWriteContext: com.fasterxml.jackson.core.json.JsonWriteContext clearAndGetParent()>();
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.json.JsonWriteContext _writeContext> = v16;
return;
}
public final void writeStartObject() throws java.io.IOException
{
com.fasterxml.jackson.core.json.JsonWriteContext v1, v2;
byte[] v7;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
int v5, v6, v8, v9;
com.fasterxml.jackson.core.PrettyPrinter v3, v4;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _verifyValueWrite(java.lang.String)>("start an object");
v1 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.json.JsonWriteContext _writeContext>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.json.JsonWriteContext: com.fasterxml.jackson.core.json.JsonWriteContext createChildObjectContext()>();
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.json.JsonWriteContext _writeContext> = v2;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.PrettyPrinter _cfgPrettyPrinter>;
if v3 == null goto label1;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.PrettyPrinter _cfgPrettyPrinter>;
interfaceinvoke v4.<com.fasterxml.jackson.core.PrettyPrinter: void writeStartObject(com.fasterxml.jackson.core.JsonGenerator)>(v0);
goto label3;
label1:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v5 < v6 goto label2;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label2:
v7 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v9 = v8 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v9;
v7[v8] = 123;
label3:
return;
}
public void writeStartObject(java.lang.Object) throws java.io.IOException
{
com.fasterxml.jackson.core.json.JsonWriteContext v2, v3;
byte[] v8;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
int v10, v6, v7, v9;
java.lang.Object v1;
com.fasterxml.jackson.core.PrettyPrinter v4, v5;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: java.lang.Object;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _verifyValueWrite(java.lang.String)>("start an object");
v2 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.json.JsonWriteContext _writeContext>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.json.JsonWriteContext: com.fasterxml.jackson.core.json.JsonWriteContext createChildObjectContext(java.lang.Object)>(v1);
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.json.JsonWriteContext _writeContext> = v3;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.PrettyPrinter _cfgPrettyPrinter>;
if v4 == null goto label1;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.PrettyPrinter _cfgPrettyPrinter>;
interfaceinvoke v5.<com.fasterxml.jackson.core.PrettyPrinter: void writeStartObject(com.fasterxml.jackson.core.JsonGenerator)>(v0);
goto label3;
label1:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v6 < v7 goto label2;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label2:
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v10 = v9 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v10;
v8[v9] = 123;
label3:
return;
}
public void writeStartObject(java.lang.Object, int) throws java.io.IOException
{
int v2;
java.lang.Object v1;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: int;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void writeStartObject(java.lang.Object)>(v1);
return;
}
public final void writeEndObject() throws java.io.IOException
{
byte[] v12;
int v10, v11, v13, v14, v9;
java.lang.String v4, v5;
boolean v2;
com.fasterxml.jackson.core.json.JsonWriteContext v1, v15, v16, v3, v8;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
com.fasterxml.jackson.core.PrettyPrinter v6, v7;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.json.JsonWriteContext _writeContext>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.json.JsonWriteContext: boolean inObject()>();
if v2 != 0 goto label1;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.json.JsonWriteContext _writeContext>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.json.JsonWriteContext: java.lang.String typeDesc()>();
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Current context not Object but \u0001");
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _reportError(java.lang.String)>(v5);
label1:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.PrettyPrinter _cfgPrettyPrinter>;
if v6 == null goto label2;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.PrettyPrinter _cfgPrettyPrinter>;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.json.JsonWriteContext _writeContext>;
v9 = virtualinvoke v8.<com.fasterxml.jackson.core.json.JsonWriteContext: int getEntryCount()>();
interfaceinvoke v7.<com.fasterxml.jackson.core.PrettyPrinter: void writeEndObject(com.fasterxml.jackson.core.JsonGenerator,int)>(v0, v9);
goto label4;
label2:
v10 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v10 < v11 goto label3;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label3:
v12 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v14 = v13 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v14;
v12[v13] = 125;
label4:
v15 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.json.JsonWriteContext _writeContext>;
v16 = virtualinvoke v15.<com.fasterxml.jackson.core.json.JsonWriteContext: com.fasterxml.jackson.core.json.JsonWriteContext clearAndGetParent()>();
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.json.JsonWriteContext _writeContext> = v16;
return;
}
protected final void _writePPFieldName(java.lang.String) throws java.io.IOException
{
byte[] v11, v24;
byte v14, v27;
int v10, v12, v13, v16, v17, v18, v19, v22, v23, v25, v26, v3, v7, v8, v9;
java.lang.String v1;
boolean v6;
com.fasterxml.jackson.core.json.JsonWriteContext v2;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
char[] v15, v20, v21;
com.fasterxml.jackson.core.PrettyPrinter v4, v5;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: java.lang.String;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.json.JsonWriteContext _writeContext>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.json.JsonWriteContext: int writeFieldName(java.lang.String)>(v1);
if v3 != 4 goto label01;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _reportError(java.lang.String)>("Can not write a field name, expecting a value");
label01:
if v3 != 1 goto label02;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.PrettyPrinter _cfgPrettyPrinter>;
interfaceinvoke v4.<com.fasterxml.jackson.core.PrettyPrinter: void writeObjectEntrySeparator(com.fasterxml.jackson.core.JsonGenerator)>(v0);
goto label03;
label02:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.PrettyPrinter _cfgPrettyPrinter>;
interfaceinvoke v5.<com.fasterxml.jackson.core.PrettyPrinter: void beforeObjectEntries(com.fasterxml.jackson.core.JsonGenerator)>(v0);
label03:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: boolean _cfgUnqNames>;
if v6 == 0 goto label04;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeStringSegments(java.lang.String,boolean)>(v1, 0);
return;
label04:
v7 = virtualinvoke v1.<java.lang.String: int length()>();
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _charBufferLength>;
if v7 <= v8 goto label05;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeStringSegments(java.lang.String,boolean)>(v1, 1);
return;
label05:
v9 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v9 < v10 goto label06;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label06:
v11 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v13 = v12 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v13;
v14 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v11[v12] = v14;
v15 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: char[] _charBuffer>;
virtualinvoke v1.<java.lang.String: void getChars(int,int,char[],int)>(0, v7, v15, 0);
v16 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputMaxContiguous>;
if v7 > v16 goto label08;
v17 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v18 = v17 + v7;
v19 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v18 <= v19 goto label07;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label07:
v20 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: char[] _charBuffer>;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeStringSegment(char[],int,int)>(v20, 0, v7);
goto label09;
label08:
v21 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: char[] _charBuffer>;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeStringSegments(char[],int,int)>(v21, 0, v7);
label09:
v22 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v23 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v22 < v23 goto label10;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label10:
v24 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v25 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v26 = v25 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v26;
v27 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v24[v25] = v27;
return;
}
protected final void _writePPFieldName(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException
{
byte[] v12, v16, v19, v24;
com.fasterxml.jackson.core.SerializableString v1;
byte v15, v27;
int v10, v11, v13, v14, v17, v18, v20, v21, v22, v23, v25, v26, v4;
java.lang.String v3;
boolean v7, v8, v9;
com.fasterxml.jackson.core.json.JsonWriteContext v2;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
com.fasterxml.jackson.core.PrettyPrinter v5, v6;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: com.fasterxml.jackson.core.SerializableString;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.json.JsonWriteContext _writeContext>;
v3 = interfaceinvoke v1.<com.fasterxml.jackson.core.SerializableString: java.lang.String getValue()>();
v4 = virtualinvoke v2.<com.fasterxml.jackson.core.json.JsonWriteContext: int writeFieldName(java.lang.String)>(v3);
if v4 != 4 goto label01;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _reportError(java.lang.String)>("Can not write a field name, expecting a value");
label01:
if v4 != 1 goto label02;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.PrettyPrinter _cfgPrettyPrinter>;
interfaceinvoke v5.<com.fasterxml.jackson.core.PrettyPrinter: void writeObjectEntrySeparator(com.fasterxml.jackson.core.JsonGenerator)>(v0);
goto label03;
label02:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.PrettyPrinter _cfgPrettyPrinter>;
interfaceinvoke v6.<com.fasterxml.jackson.core.PrettyPrinter: void beforeObjectEntries(com.fasterxml.jackson.core.JsonGenerator)>(v0);
label03:
v7 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: boolean _cfgUnqNames>;
if v7 != 0 goto label04;
v8 = 1;
goto label05;
label04:
v8 = 0;
label05:
v9 = v8;
if v8 == 0 goto label07;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v10 < v11 goto label06;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label06:
v12 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v14 = v13 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v14;
v15 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v12[v13] = v15;
label07:
v16 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v17 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v18 = interfaceinvoke v1.<com.fasterxml.jackson.core.SerializableString: int appendQuotedUTF8(byte[],int)>(v16, v17);
if v18 >= 0 goto label08;
v19 = interfaceinvoke v1.<com.fasterxml.jackson.core.SerializableString: byte[] asQuotedUTF8()>();
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeBytes(byte[])>(v19);
goto label09;
label08:
v20 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v21 = v20 + v18;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v21;
label09:
if v9 == 0 goto label11;
v22 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v23 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v22 < v23 goto label10;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label10:
v24 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v25 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v26 = v25 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v26;
v27 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v24[v25] = v27;
label11:
return;
}
public void writeString(java.lang.String) throws java.io.IOException
{
byte[] v13, v7;
byte v10, v16;
int v11, v12, v14, v15, v2, v3, v4, v5, v6, v8, v9;
java.lang.String v1;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: java.lang.String;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _verifyValueWrite(java.lang.String)>("write a string");
if v1 != null goto label1;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeNull()>();
return;
label1:
v2 = virtualinvoke v1.<java.lang.String: int length()>();
v3 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputMaxContiguous>;
if v2 <= v3 goto label2;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeStringSegments(java.lang.String,boolean)>(v1, 1);
return;
label2:
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v5 = v4 + v2;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v5 < v6 goto label3;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label3:
v7 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v9 = v8 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v9;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v7[v8] = v10;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeStringSegment(java.lang.String,int,int)>(v1, 0, v2);
v11 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v11 < v12 goto label4;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label4:
v13 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v14 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v15 = v14 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v15;
v16 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v13[v14] = v16;
return;
}
public void writeString(java.io.Reader, int) throws java.io.IOException
{
byte[] v20, v8;
byte v11, v23;
int v10, v12, v13, v14, v15, v16, v17, v18, v19, v2, v21, v22, v3, v4, v6, v7, v9;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
java.io.Reader v1;
char[] v5;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: java.io.Reader;
v2 := @parameter1: int;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _verifyValueWrite(java.lang.String)>("write a string");
if v1 != null goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _reportError(java.lang.String)>("null reader");
return;
label1:
if v2 < 0 goto label2;
v3 = v2;
goto label3;
label2:
v3 = 2147483647;
label3:
v4 = v3;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: char[] _charBuffer>;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v6 < v7 goto label4;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label4:
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v10 = v9 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v10;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v8[v9] = v11;
label5:
if v4 <= 0 goto label7;
v12 = lengthof v5;
v13 = staticinvoke <java.lang.Math: int min(int,int)>(v4, v12);
v14 = virtualinvoke v1.<java.io.Reader: int read(char[],int,int)>(v5, 0, v13);
if v14 <= 0 goto label7;
v15 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v16 = v15 + v2;
v17 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v16 < v17 goto label6;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label6:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeStringSegments(char[],int,int)>(v5, 0, v14);
v4 = v4 - v14;
goto label5;
label7:
v18 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v19 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v18 < v19 goto label8;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label8:
v20 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v21 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v22 = v21 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v22;
v23 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v20[v21] = v23;
if v4 <= 0 goto label9;
if v2 < 0 goto label9;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _reportError(java.lang.String)>("Didn\'t read enough from reader");
label9:
return;
}
public void writeString(char[], int, int) throws java.io.IOException
{
byte[] v16, v6;
byte v19, v9;
int v10, v11, v12, v13, v14, v15, v17, v18, v2, v3, v4, v5, v7, v8;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
char[] v1;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _verifyValueWrite(java.lang.String)>("write a string");
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v4 < v5 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label1:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v8 = v7 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v8;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v6[v7] = v9;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputMaxContiguous>;
if v3 > v10 goto label3;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v12 = v11 + v3;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v12 <= v13 goto label2;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label2:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeStringSegment(char[],int,int)>(v1, v2, v3);
goto label4;
label3:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeStringSegments(char[],int,int)>(v1, v2, v3);
label4:
v14 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v15 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v14 < v15 goto label5;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label5:
v16 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v17 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v18 = v17 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v18;
v19 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v16[v17] = v19;
return;
}
public final void writeString(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException
{
byte[] v11, v16, v4, v8;
com.fasterxml.jackson.core.SerializableString v1;
byte v19, v7;
int v10, v12, v13, v14, v15, v17, v18, v2, v3, v5, v6, v9;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: com.fasterxml.jackson.core.SerializableString;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _verifyValueWrite(java.lang.String)>("write a string");
v2 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v2 < v3 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label1:
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v6 = v5 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v6;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v4[v5] = v7;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v10 = interfaceinvoke v1.<com.fasterxml.jackson.core.SerializableString: int appendQuotedUTF8(byte[],int)>(v8, v9);
if v10 >= 0 goto label2;
v11 = interfaceinvoke v1.<com.fasterxml.jackson.core.SerializableString: byte[] asQuotedUTF8()>();
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeBytes(byte[])>(v11);
goto label3;
label2:
v12 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v13 = v12 + v10;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v13;
label3:
v14 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v15 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v14 < v15 goto label4;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label4:
v16 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v17 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v18 = v17 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v18;
v19 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v16[v17] = v19;
return;
}
public void writeRawUTF8String(byte[], int, int) throws java.io.IOException
{
byte[] v1, v12, v6;
byte v15, v9;
int v10, v11, v13, v14, v2, v3, v4, v5, v7, v8;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _checkRangeBoundsForByteArray(byte[],int,int)>(v1, v2, v3);
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _verifyValueWrite(java.lang.String)>("write a string");
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v4 < v5 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label1:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v8 = v7 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v8;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v6[v7] = v9;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeBytes(byte[],int,int)>(v1, v2, v3);
v10 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v10 < v11 goto label2;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label2:
v12 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v14 = v13 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v14;
v15 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v12[v13] = v15;
return;
}
public void writeUTF8String(byte[], int, int) throws java.io.IOException
{
byte[] v1, v13, v6;
byte v16, v9;
int v10, v11, v12, v14, v15, v2, v3, v4, v5, v7, v8;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _checkRangeBoundsForByteArray(byte[],int,int)>(v1, v2, v3);
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _verifyValueWrite(java.lang.String)>("write a string");
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v4 < v5 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label1:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v8 = v7 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v8;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v6[v7] = v9;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputMaxContiguous>;
if v3 > v10 goto label2;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeUTF8Segment(byte[],int,int)>(v1, v2, v3);
goto label3;
label2:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeUTF8Segments(byte[],int,int)>(v1, v2, v3);
label3:
v11 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v11 < v12 goto label4;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label4:
v13 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v14 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v15 = v14 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v15;
v16 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v13[v14] = v16;
return;
}
public void writeRaw(java.lang.String) throws java.io.IOException
{
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
int v2, v4;
char[] v3;
java.lang.String v1;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v1.<java.lang.String: int length()>();
v3 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: char[] _charBuffer>;
v4 = lengthof v3;
if v2 > v4 goto label1;
virtualinvoke v1.<java.lang.String: void getChars(int,int,char[],int)>(0, v2, v3, 0);
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void writeRaw(char[],int,int)>(v3, 0, v2);
goto label2;
label1:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void writeRaw(java.lang.String,int,int)>(v1, 0, v2);
label2:
return;
}
public void writeRaw(java.lang.String, int, int) throws java.io.IOException
{
int v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v2, v21, v22, v3, v5, v6, v7, v8, v9;
java.lang.String v1;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
char v20;
char[] v4;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: int;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _checkRangeBoundsForString(java.lang.String,int,int)>(v1, v2, v3);
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: char[] _charBuffer>;
v5 = lengthof v4;
if v3 > v5 goto label1;
v6 = v2 + v3;
virtualinvoke v1.<java.lang.String: void getChars(int,int,char[],int)>(v2, v6, v4, 0);
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void writeRaw(char[],int,int)>(v4, 0, v3);
return;
label1:
v7 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
v8 = v7 >> 2;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
v10 = v9 >> 4;
v11 = v8 + v10;
v12 = staticinvoke <java.lang.Math: int min(int,int)>(v5, v11);
v13 = v12 * 3;
label2:
if v3 <= 0 goto label5;
v14 = staticinvoke <java.lang.Math: int min(int,int)>(v12, v3);
v15 = v2 + v14;
virtualinvoke v1.<java.lang.String: void getChars(int,int,char[],int)>(v2, v15, v4, 0);
v16 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v17 = v16 + v13;
v18 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v17 <= v18 goto label3;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label3:
if v14 <= 1 goto label4;
v19 = v14 - 1;
v20 = v4[v19];
v21 = (int) 55296;
if v20 < v21 goto label4;
v22 = (int) 56319;
if v20 > v22 goto label4;
v14 = v14 - 1;
label4:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeRawSegment(char[],int,int)>(v4, 0, v14);
v2 = v2 + v14;
v3 = v3 - v14;
goto label2;
label5:
return;
}
public void writeRaw(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException
{
byte[] v2, v5;
com.fasterxml.jackson.core.SerializableString v1;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
int v3, v4, v6, v7;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: com.fasterxml.jackson.core.SerializableString;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v4 = interfaceinvoke v1.<com.fasterxml.jackson.core.SerializableString: int appendUnquotedUTF8(byte[],int)>(v2, v3);
if v4 >= 0 goto label1;
v5 = interfaceinvoke v1.<com.fasterxml.jackson.core.SerializableString: byte[] asUnquotedUTF8()>();
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeBytes(byte[])>(v5);
goto label2;
label1:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v7 = v6 + v4;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v7;
label2:
return;
}
public void writeRawValue(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException
{
byte[] v2, v5;
com.fasterxml.jackson.core.SerializableString v1;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
int v3, v4, v6, v7;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: com.fasterxml.jackson.core.SerializableString;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _verifyValueWrite(java.lang.String)>("write a raw (unencoded) value");
v2 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v4 = interfaceinvoke v1.<com.fasterxml.jackson.core.SerializableString: int appendUnquotedUTF8(byte[],int)>(v2, v3);
if v4 >= 0 goto label1;
v5 = interfaceinvoke v1.<com.fasterxml.jackson.core.SerializableString: byte[] asUnquotedUTF8()>();
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeBytes(byte[])>(v5);
goto label2;
label1:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v7 = v6 + v4;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v7;
label2:
return;
}
public final void writeRaw(char[], int, int) throws java.io.IOException
{
byte[] v12, v17, v22;
short v26;
int v10, v13, v14, v15, v18, v19, v2, v20, v21, v23, v24, v3, v4, v5, v6, v7, v8, v9;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
char v11, v16, v25;
char[] v1;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _checkRangeBoundsForCharArray(char[],int,int)>(v1, v2, v3);
v4 = v3 + v3;
v5 = v4 + v3;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v7 = v6 + v5;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v7 <= v8 goto label2;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v9 >= v5 goto label1;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeSegmentedRaw(char[],int,int)>(v1, v2, v3);
return;
label1:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label2:
v10 = v3 + v2;
label3:
if v2 >= v10 goto label7;
label4:
v11 = v1[v2];
if v11 > 127 goto label5;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v14 = v13 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v14;
v12[v13] = v11;
v2 = v2 + 1;
if v2 >= v10 goto label7;
goto label4;
label5:
v15 = v2;
v2 = v2 + 1;
v16 = v1[v15];
if v16 >= 2048 goto label6;
v17 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v18 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v19 = v18 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v19;
v20 = v16 >> 6;
v21 = 192 | v20;
v17[v18] = v21;
v22 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v23 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v24 = v23 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v24;
v25 = v16 & 63;
v26 = 128 | v25;
v22[v23] = v26;
goto label3;
label6:
v2 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputRawMultiByteChar(int,char[],int,int)>(v16, v1, v2, v10);
goto label3;
label7:
return;
}
public void writeRaw(char) throws java.io.IOException
{
byte[] v5;
short v15;
int v10, v11, v12, v13, v2, v3, v4, v6, v7, v8, v9;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
char v1, v14;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: char;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v3 = v2 + 3;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v3 < v4 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label1:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
if v1 > 127 goto label2;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v7 = v6 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v7;
v5[v6] = v1;
goto label4;
label2:
if v1 >= 2048 goto label3;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v9 = v8 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v9;
v10 = v1 >> 6;
v11 = 192 | v10;
v5[v8] = v11;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v13 = v12 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v13;
v14 = v1 & 63;
v15 = 128 | v14;
v5[v12] = v15;
goto label4;
label3:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputRawMultiByteChar(int,char[],int,int)>(v1, null, 0, 0);
label4:
return;
}
private final void _writeSegmentedRaw(char[], int, int) throws java.io.IOException
{
byte[] v5;
short v23;
int v10, v11, v12, v13, v14, v16, v17, v18, v19, v2, v20, v21, v3, v4, v6, v8, v9;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
char v15, v22, v7;
char[] v1;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v6 = v2 + v3;
label1:
if v2 >= v6 goto label7;
label2:
v7 = v1[v2];
if v7 >= 128 goto label4;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
if v8 < v4 goto label3;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label3:
v9 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v10 = v9 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v10;
v5[v9] = v7;
v2 = v2 + 1;
if v2 >= v6 goto label7;
goto label2;
label4:
v11 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v12 = v11 + 3;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v12 < v13 goto label5;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label5:
v14 = v2;
v2 = v2 + 1;
v15 = v1[v14];
if v15 >= 2048 goto label6;
v16 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v17 = v16 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v17;
v18 = v15 >> 6;
v19 = 192 | v18;
v5[v16] = v19;
v20 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v21 = v20 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v21;
v22 = v15 & 63;
v23 = 128 | v22;
v5[v20] = v23;
goto label1;
label6:
v2 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputRawMultiByteChar(int,char[],int,int)>(v15, v1, v2, v6);
goto label1;
label7:
return;
}
private void _writeRawSegment(char[], int, int) throws java.io.IOException
{
byte[] v10, v15, v5;
short v19;
int v11, v12, v13, v14, v16, v17, v2, v3, v6, v7, v8;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
char v18, v4, v9;
char[] v1;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
label1:
if v2 >= v3 goto label5;
label2:
v4 = v1[v2];
if v4 > 127 goto label3;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v7 = v6 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v7;
v5[v6] = v4;
v2 = v2 + 1;
if v2 >= v3 goto label5;
goto label2;
label3:
v8 = v2;
v2 = v2 + 1;
v9 = v1[v8];
if v9 >= 2048 goto label4;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v12 = v11 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v12;
v13 = v9 >> 6;
v14 = 192 | v13;
v10[v11] = v14;
v15 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v16 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v17 = v16 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v17;
v18 = v9 & 63;
v19 = 128 | v18;
v15[v16] = v19;
goto label1;
label4:
v2 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputRawMultiByteChar(int,char[],int,int)>(v9, v1, v2, v3);
goto label1;
label5:
return;
}
public void writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int) throws java.io.IOException, com.fasterxml.jackson.core.JsonGenerationException
{
byte[] v14, v2, v7;
byte v10, v17;
int v11, v12, v13, v15, v16, v3, v4, v5, v6, v8, v9;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
com.fasterxml.jackson.core.Base64Variant v1;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: com.fasterxml.jackson.core.Base64Variant;
v2 := @parameter1: byte[];
v3 := @parameter2: int;
v4 := @parameter3: int;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _checkRangeBoundsForByteArray(byte[],int,int)>(v2, v3, v4);
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _verifyValueWrite(java.lang.String)>("write a binary value");
v5 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v5 < v6 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label1:
v7 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v9 = v8 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v9;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v7[v8] = v10;
v11 = v3 + v4;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)>(v1, v2, v3, v11);
v12 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v12 < v13 goto label2;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label2:
v14 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v15 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v16 = v15 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v16;
v17 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v14[v15] = v17;
return;
}
public int writeBinary(com.fasterxml.jackson.core.Base64Variant, java.io.InputStream, int) throws java.io.IOException, com.fasterxml.jackson.core.JsonGenerationException
{
java.lang.Throwable v16;
byte[] v11, v20, v6;
byte v23, v9;
int v12, v13, v18, v19, v21, v22, v3, v4, v5, v7, v8;
java.lang.String v14;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
com.fasterxml.jackson.core.Base64Variant v1;
com.fasterxml.jackson.core.io.IOContext v10, v15, v17;
java.io.InputStream v2;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: com.fasterxml.jackson.core.Base64Variant;
v2 := @parameter1: java.io.InputStream;
v3 := @parameter2: int;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _verifyValueWrite(java.lang.String)>("write a binary value");
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v4 < v5 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label1:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v8 = v7 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v8;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v6[v7] = v9;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.io.IOContext _ioContext>;
v11 = virtualinvoke v10.<com.fasterxml.jackson.core.io.IOContext: byte[] allocBase64Buffer()>();
label2:
if v3 >= 0 goto label3;
v12 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,byte[])>(v1, v2, v11);
goto label5;
label3:
v13 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,byte[],int)>(v1, v2, v11, v3);
if v13 <= 0 goto label4;
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v13, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Too few bytes available: missing \u0001 bytes (out of \u0001)");
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _reportError(java.lang.String)>(v14);
label4:
v12 = v3;
label5:
v15 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.io.IOContext _ioContext>;
virtualinvoke v15.<com.fasterxml.jackson.core.io.IOContext: void releaseBase64Buffer(byte[])>(v11);
goto label7;
label6:
v16 := @caughtexception;
v17 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.io.IOContext _ioContext>;
virtualinvoke v17.<com.fasterxml.jackson.core.io.IOContext: void releaseBase64Buffer(byte[])>(v11);
throw v16;
label7:
v18 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v19 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v18 < v19 goto label8;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label8:
v20 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v21 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v22 = v21 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v22;
v23 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v20[v21] = v23;
return v12;
catch java.lang.Throwable from label2 to label5 with label6;
}
public void writeNumber(short) throws java.io.IOException
{
byte[] v6;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
short v1;
int v2, v3, v4, v7, v8;
boolean v5;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: short;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _verifyValueWrite(java.lang.String)>("write a number");
v2 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v3 = v2 + 6;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v3 < v4 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label1:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: boolean _cfgNumbersAsStrings>;
if v5 == 0 goto label2;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeQuotedShort(short)>(v1);
return;
label2:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v8 = staticinvoke <com.fasterxml.jackson.core.io.NumberOutput: int outputInt(int,byte[],int)>(v1, v6, v7);
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v8;
return;
}
private final void _writeQuotedShort(short) throws java.io.IOException
{
byte[] v12, v5, v9;
short v1;
byte v15, v8;
int v10, v11, v13, v14, v2, v3, v4, v6, v7;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: short;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v3 = v2 + 8;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v3 < v4 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label1:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v7 = v6 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v7;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v5[v6] = v8;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v11 = staticinvoke <com.fasterxml.jackson.core.io.NumberOutput: int outputInt(int,byte[],int)>(v1, v9, v10);
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v11;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v14 = v13 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v14;
v15 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v12[v13] = v15;
return;
}
public void writeNumber(int) throws java.io.IOException
{
byte[] v6;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
int v1, v2, v3, v4, v7, v8;
boolean v5;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: int;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _verifyValueWrite(java.lang.String)>("write a number");
v2 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v3 = v2 + 11;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v3 < v4 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label1:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: boolean _cfgNumbersAsStrings>;
if v5 == 0 goto label2;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeQuotedInt(int)>(v1);
return;
label2:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v8 = staticinvoke <com.fasterxml.jackson.core.io.NumberOutput: int outputInt(int,byte[],int)>(v1, v6, v7);
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v8;
return;
}
private final void _writeQuotedInt(int) throws java.io.IOException
{
byte[] v12, v5, v9;
byte v15, v8;
int v1, v10, v11, v13, v14, v2, v3, v4, v6, v7;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v3 = v2 + 13;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v3 < v4 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label1:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v7 = v6 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v7;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v5[v6] = v8;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v11 = staticinvoke <com.fasterxml.jackson.core.io.NumberOutput: int outputInt(int,byte[],int)>(v1, v9, v10);
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v11;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v14 = v13 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v14;
v15 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v12[v13] = v15;
return;
}
public void writeNumber(long) throws java.io.IOException
{
byte[] v6;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
long v1;
int v3, v4, v5, v7, v8;
boolean v2;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: long;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _verifyValueWrite(java.lang.String)>("write a number");
v2 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: boolean _cfgNumbersAsStrings>;
if v2 == 0 goto label1;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeQuotedLong(long)>(v1);
return;
label1:
v3 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v4 = v3 + 21;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v4 < v5 goto label2;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label2:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v8 = staticinvoke <com.fasterxml.jackson.core.io.NumberOutput: int outputLong(long,byte[],int)>(v1, v6, v7);
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v8;
return;
}
private final void _writeQuotedLong(long) throws java.io.IOException
{
byte[] v12, v5, v9;
long v1;
byte v15, v8;
int v10, v11, v13, v14, v2, v3, v4, v6, v7;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: long;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v3 = v2 + 23;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v3 < v4 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label1:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v7 = v6 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v7;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v5[v6] = v8;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v11 = staticinvoke <com.fasterxml.jackson.core.io.NumberOutput: int outputLong(long,byte[],int)>(v1, v9, v10);
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v11;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v14 = v13 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v14;
v15 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v12[v13] = v15;
return;
}
public void writeNumber(java.math.BigInteger) throws java.io.IOException
{
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
java.math.BigInteger v1;
java.lang.String v3, v4;
boolean v2;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: java.math.BigInteger;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _verifyValueWrite(java.lang.String)>("write a number");
if v1 != null goto label1;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeNull()>();
goto label3;
label1:
v2 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: boolean _cfgNumbersAsStrings>;
if v2 == 0 goto label2;
v3 = virtualinvoke v1.<java.math.BigInteger: java.lang.String toString()>();
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeQuotedRaw(java.lang.String)>(v3);
goto label3;
label2:
v4 = virtualinvoke v1.<java.math.BigInteger: java.lang.String toString()>();
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void writeRaw(java.lang.String)>(v4);
label3:
return;
}
public void writeNumber(double) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonGenerator$Feature v10, v4, v7;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
int v5;
java.lang.String v12, v9;
boolean v11, v2, v3, v6, v8;
double v1;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: double;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: boolean _cfgNumbersAsStrings>;
if v2 != 0 goto label1;
v3 = staticinvoke <com.fasterxml.jackson.core.io.NumberOutput: boolean notFinite(double)>(v1);
if v3 == 0 goto label2;
v4 = <com.fasterxml.jackson.core.JsonGenerator$Feature: com.fasterxml.jackson.core.JsonGenerator$Feature QUOTE_NON_NUMERIC_NUMBERS>;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _features>;
v6 = virtualinvoke v4.<com.fasterxml.jackson.core.JsonGenerator$Feature: boolean enabledIn(int)>(v5);
if v6 == 0 goto label2;
label1:
v7 = <com.fasterxml.jackson.core.JsonGenerator$Feature: com.fasterxml.jackson.core.JsonGenerator$Feature USE_FAST_DOUBLE_WRITER>;
v8 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: boolean isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature)>(v7);
v9 = staticinvoke <com.fasterxml.jackson.core.io.NumberOutput: java.lang.String toString(double,boolean)>(v1, v8);
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void writeString(java.lang.String)>(v9);
return;
label2:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _verifyValueWrite(java.lang.String)>("write a number");
v10 = <com.fasterxml.jackson.core.JsonGenerator$Feature: com.fasterxml.jackson.core.JsonGenerator$Feature USE_FAST_DOUBLE_WRITER>;
v11 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: boolean isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature)>(v10);
v12 = staticinvoke <com.fasterxml.jackson.core.io.NumberOutput: java.lang.String toString(double,boolean)>(v1, v11);
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void writeRaw(java.lang.String)>(v12);
return;
}
public void writeNumber(float) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonGenerator$Feature v10, v4, v7;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
int v5;
float v1;
java.lang.String v12, v9;
boolean v11, v2, v3, v6, v8;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: float;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: boolean _cfgNumbersAsStrings>;
if v2 != 0 goto label1;
v3 = staticinvoke <com.fasterxml.jackson.core.io.NumberOutput: boolean notFinite(float)>(v1);
if v3 == 0 goto label2;
v4 = <com.fasterxml.jackson.core.JsonGenerator$Feature: com.fasterxml.jackson.core.JsonGenerator$Feature QUOTE_NON_NUMERIC_NUMBERS>;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _features>;
v6 = virtualinvoke v4.<com.fasterxml.jackson.core.JsonGenerator$Feature: boolean enabledIn(int)>(v5);
if v6 == 0 goto label2;
label1:
v7 = <com.fasterxml.jackson.core.JsonGenerator$Feature: com.fasterxml.jackson.core.JsonGenerator$Feature USE_FAST_DOUBLE_WRITER>;
v8 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: boolean isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature)>(v7);
v9 = staticinvoke <com.fasterxml.jackson.core.io.NumberOutput: java.lang.String toString(float,boolean)>(v1, v8);
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void writeString(java.lang.String)>(v9);
return;
label2:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _verifyValueWrite(java.lang.String)>("write a number");
v10 = <com.fasterxml.jackson.core.JsonGenerator$Feature: com.fasterxml.jackson.core.JsonGenerator$Feature USE_FAST_DOUBLE_WRITER>;
v11 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: boolean isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature)>(v10);
v12 = staticinvoke <com.fasterxml.jackson.core.io.NumberOutput: java.lang.String toString(float,boolean)>(v1, v11);
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void writeRaw(java.lang.String)>(v12);
return;
}
public void writeNumber(java.math.BigDecimal) throws java.io.IOException
{
java.math.BigDecimal v1;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
java.lang.String v3, v4;
boolean v2;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: java.math.BigDecimal;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _verifyValueWrite(java.lang.String)>("write a number");
if v1 != null goto label1;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeNull()>();
goto label3;
label1:
v2 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: boolean _cfgNumbersAsStrings>;
if v2 == 0 goto label2;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: java.lang.String _asString(java.math.BigDecimal)>(v1);
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeQuotedRaw(java.lang.String)>(v3);
goto label3;
label2:
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: java.lang.String _asString(java.math.BigDecimal)>(v1);
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void writeRaw(java.lang.String)>(v4);
label3:
return;
}
public void writeNumber(java.lang.String) throws java.io.IOException
{
java.lang.String v1;
boolean v2;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: java.lang.String;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _verifyValueWrite(java.lang.String)>("write a number");
if v1 != null goto label1;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeNull()>();
goto label3;
label1:
v2 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: boolean _cfgNumbersAsStrings>;
if v2 == 0 goto label2;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeQuotedRaw(java.lang.String)>(v1);
goto label3;
label2:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void writeRaw(java.lang.String)>(v1);
label3:
return;
}
public void writeNumber(char[], int, int) throws java.io.IOException
{
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
int v2, v3;
char[] v1;
boolean v4;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _verifyValueWrite(java.lang.String)>("write a number");
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: boolean _cfgNumbersAsStrings>;
if v4 == 0 goto label1;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeQuotedRaw(char[],int,int)>(v1, v2, v3);
goto label2;
label1:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void writeRaw(char[],int,int)>(v1, v2, v3);
label2:
return;
}
private final void _writeQuotedRaw(java.lang.String) throws java.io.IOException
{
byte[] v10, v4;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
byte v13, v7;
int v11, v12, v2, v3, v5, v6, v8, v9;
java.lang.String v1;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: java.lang.String;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v2 < v3 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label1:
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v6 = v5 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v6;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v4[v5] = v7;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void writeRaw(java.lang.String)>(v1);
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v8 < v9 goto label2;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label2:
v10 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v12 = v11 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v12;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v10[v11] = v13;
return;
}
private void _writeQuotedRaw(char[], int, int) throws java.io.IOException
{
byte[] v12, v6;
byte v15, v9;
int v10, v11, v13, v14, v2, v3, v4, v5, v7, v8;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
char[] v1;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v4 < v5 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label1:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v8 = v7 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v8;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v6[v7] = v9;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void writeRaw(char[],int,int)>(v1, v2, v3);
v10 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v10 < v11 goto label2;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label2:
v12 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v14 = v13 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v14;
v15 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v12[v13] = v15;
return;
}
public void writeBoolean(boolean) throws java.io.IOException
{
byte[] v5, v7;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
int v10, v2, v3, v4, v6, v8, v9;
boolean v1;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: boolean;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _verifyValueWrite(java.lang.String)>("write a boolean value");
v2 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v3 = v2 + 5;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v3 < v4 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label1:
if v1 == 0 goto label2;
v5 = <com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] TRUE_BYTES>;
goto label3;
label2:
v5 = <com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] FALSE_BYTES>;
label3:
v6 = lengthof v5;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v5, 0, v7, v8, v6);
v9 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v10 = v9 + v6;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v10;
return;
}
public void writeNull() throws java.io.IOException
{
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _verifyValueWrite(java.lang.String)>("write a null");
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeNull()>();
return;
}
protected final void _verifyValueWrite(java.lang.String) throws java.io.IOException
{
com.fasterxml.jackson.core.json.JsonWriteContext v2;
byte[] v12, v8;
com.fasterxml.jackson.core.SerializableString v6, v7;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
byte v5;
int v10, v11, v13, v14, v3, v9;
com.fasterxml.jackson.core.PrettyPrinter v4;
java.lang.String v1;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: java.lang.String;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.json.JsonWriteContext _writeContext>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.json.JsonWriteContext: int writeValue()>();
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.PrettyPrinter _cfgPrettyPrinter>;
if v4 == null goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _verifyPrettyValueWrite(java.lang.String,int)>(v1, v3);
return;
label1:
tableswitch(v3)
{
case 0: goto label2;
case 1: goto label3;
case 2: goto label4;
case 3: goto label5;
case 4: goto label2;
case 5: goto label7;
default: goto label2;
};
label2:
return;
label3:
v5 = 44;
goto label8;
label4:
v5 = 58;
goto label8;
label5:
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.SerializableString _rootValueSeparator>;
if v6 == null goto label6;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.SerializableString _rootValueSeparator>;
v8 = interfaceinvoke v7.<com.fasterxml.jackson.core.SerializableString: byte[] asUnquotedUTF8()>();
v9 = lengthof v8;
if v9 <= 0 goto label6;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeBytes(byte[])>(v8);
label6:
return;
label7:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _reportCantWriteValueExpectName(java.lang.String)>(v1);
return;
label8:
v10 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v10 < v11 goto label9;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label9:
v12 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v14 = v13 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v14;
v12[v13] = v5;
return;
}
public void flush() throws java.io.IOException
{
java.io.OutputStream v1, v4;
com.fasterxml.jackson.core.JsonGenerator$Feature v2;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
boolean v3;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
v1 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: java.io.OutputStream _outputStream>;
if v1 == null goto label1;
v2 = <com.fasterxml.jackson.core.JsonGenerator$Feature: com.fasterxml.jackson.core.JsonGenerator$Feature FLUSH_PASSED_TO_STREAM>;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: boolean isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature)>(v2);
if v3 == 0 goto label1;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: java.io.OutputStream _outputStream>;
virtualinvoke v4.<java.io.OutputStream: void flush()>();
label1:
return;
}
public void close() throws java.io.IOException
{
byte[] v2;
boolean v11, v13, v16, v4, v6, v7;
java.io.OutputStream v14, v17, v9;
com.fasterxml.jackson.core.JsonGenerator$Feature v12, v15, v3;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
com.fasterxml.jackson.core.JsonStreamContext v5;
java.io.IOException v1, v8;
java.lang.Exception v18;
com.fasterxml.jackson.core.io.IOContext v10;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
specialinvoke v0.<com.fasterxml.jackson.core.json.JsonGeneratorImpl: void close()>();
v1 = null;
label01:
v2 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
if v2 == null goto label04;
v3 = <com.fasterxml.jackson.core.JsonGenerator$Feature: com.fasterxml.jackson.core.JsonGenerator$Feature AUTO_CLOSE_JSON_CONTENT>;
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: boolean isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature)>(v3);
if v4 == 0 goto label04;
label02:
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.JsonStreamContext getOutputContext()>();
v6 = virtualinvoke v5.<com.fasterxml.jackson.core.JsonStreamContext: boolean inArray()>();
if v6 == 0 goto label03;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void writeEndArray()>();
goto label02;
label03:
v7 = virtualinvoke v5.<com.fasterxml.jackson.core.JsonStreamContext: boolean inObject()>();
if v7 == 0 goto label04;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void writeEndObject()>();
goto label02;
label04:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label05:
goto label07;
label06:
v8 := @caughtexception;
v1 = v8;
label07:
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = 0;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: java.io.OutputStream _outputStream>;
if v9 == null goto label14;
label08:
v10 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.io.IOContext _ioContext>;
v11 = virtualinvoke v10.<com.fasterxml.jackson.core.io.IOContext: boolean isResourceManaged()>();
if v11 != 0 goto label09;
v12 = <com.fasterxml.jackson.core.JsonGenerator$Feature: com.fasterxml.jackson.core.JsonGenerator$Feature AUTO_CLOSE_TARGET>;
v13 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: boolean isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature)>(v12);
if v13 == 0 goto label10;
label09:
v14 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: java.io.OutputStream _outputStream>;
virtualinvoke v14.<java.io.OutputStream: void close()>();
goto label14;
label10:
v15 = <com.fasterxml.jackson.core.JsonGenerator$Feature: com.fasterxml.jackson.core.JsonGenerator$Feature FLUSH_PASSED_TO_STREAM>;
v16 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: boolean isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature)>(v15);
if v16 == 0 goto label14;
v17 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: java.io.OutputStream _outputStream>;
virtualinvoke v17.<java.io.OutputStream: void flush()>();
label11:
goto label14;
label12:
v18 := @caughtexception;
if v1 == null goto label13;
virtualinvoke v18.<java.lang.Exception: void addSuppressed(java.lang.Throwable)>(v1);
label13:
throw v18;
label14:
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _releaseBuffers()>();
if v1 == null goto label15;
throw v1;
label15:
return;
catch java.io.IOException from label01 to label05 with label06;
catch java.io.IOException from label08 to label11 with label12;
catch java.lang.RuntimeException from label08 to label11 with label12;
}
protected void _releaseBuffers()
{
byte[] v1;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
com.fasterxml.jackson.core.io.IOContext v3, v5;
char[] v4;
boolean v2;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
if v1 == null goto label1;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: boolean _bufferRecyclable>;
if v2 == 0 goto label1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer> = null;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.io.IOContext _ioContext>;
virtualinvoke v3.<com.fasterxml.jackson.core.io.IOContext: void releaseWriteEncodingBuffer(byte[])>(v1);
label1:
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: char[] _charBuffer>;
if v4 == null goto label2;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: char[] _charBuffer> = null;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.io.IOContext _ioContext>;
virtualinvoke v5.<com.fasterxml.jackson.core.io.IOContext: void releaseConcatBuffer(char[])>(v4);
label2:
return;
}
private final void _writeBytes(byte[]) throws java.io.IOException
{
java.io.OutputStream v6;
byte[] v1, v7;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
int v10, v2, v3, v4, v5, v8, v9;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: byte[];
v2 = lengthof v1;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v4 = v3 + v2;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v4 <= v5 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
if v2 <= 512 goto label1;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: java.io.OutputStream _outputStream>;
virtualinvoke v6.<java.io.OutputStream: void write(byte[],int,int)>(v1, 0, v2);
return;
label1:
v7 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, 0, v7, v8, v2);
v9 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v10 = v9 + v2;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v10;
return;
}
private final void _writeBytes(byte[], int, int) throws java.io.IOException
{
java.io.OutputStream v7;
byte[] v1, v8;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
int v10, v11, v2, v3, v4, v5, v6, v9;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v5 = v4 + v3;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v5 <= v6 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
if v3 <= 512 goto label1;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: java.io.OutputStream _outputStream>;
virtualinvoke v7.<java.io.OutputStream: void write(byte[],int,int)>(v1, v2, v3);
return;
label1:
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, v2, v8, v9, v3);
v10 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v11 = v10 + v3;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v11;
return;
}
private final void _writeStringSegments(java.lang.String, boolean) throws java.io.IOException
{
byte[] v18, v5;
byte v21, v8;
int v10, v11, v12, v13, v14, v15, v16, v17, v19, v20, v3, v4, v6, v7, v9;
java.lang.String v1;
boolean v2;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
if v2 == 0 goto label2;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v3 < v4 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label1:
v5 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v7 = v6 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v7;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v5[v6] = v8;
label2:
v9 = virtualinvoke v1.<java.lang.String: int length()>();
v10 = 0;
label3:
if v9 <= 0 goto label5;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputMaxContiguous>;
v12 = staticinvoke <java.lang.Math: int min(int,int)>(v11, v9);
v13 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v14 = v13 + v12;
v15 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v14 <= v15 goto label4;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label4:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeStringSegment(java.lang.String,int,int)>(v1, v10, v12);
v10 = v10 + v12;
v9 = v9 - v12;
goto label3;
label5:
if v2 == 0 goto label7;
v16 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v17 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v16 < v17 goto label6;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label6:
v18 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v19 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v20 = v19 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v20;
v21 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte _quoteChar>;
v18[v19] = v21;
label7:
return;
}
private final void _writeStringSegments(char[], int, int) throws java.io.IOException
{
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
int v2, v3, v4, v5, v6, v7, v8;
char[] v1;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
label1:
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputMaxContiguous>;
v5 = staticinvoke <java.lang.Math: int min(int,int)>(v4, v3);
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v7 = v6 + v5;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v7 <= v8 goto label2;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label2:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeStringSegment(char[],int,int)>(v1, v2, v5);
v2 = v2 + v5;
v3 = v3 - v5;
if v3 > 0 goto label1;
return;
}
private final void _writeStringSegments(java.lang.String, int, int) throws java.io.IOException
{
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
int v2, v3, v4, v5, v6, v7, v8;
java.lang.String v1;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: int;
label1:
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputMaxContiguous>;
v5 = staticinvoke <java.lang.Math: int min(int,int)>(v4, v3);
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v7 = v6 + v5;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v7 <= v8 goto label2;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label2:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeStringSegment(java.lang.String,int,int)>(v1, v2, v5);
v2 = v2 + v5;
v3 = v3 - v5;
if v3 > 0 goto label1;
return;
}
private final void _writeStringSegment(char[], int, int) throws java.io.IOException
{
byte[] v6;
com.fasterxml.jackson.core.io.CharacterEscapes v11;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
char v8;
int[] v7;
int v10, v12, v2, v3, v4, v5, v9;
char[] v1;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v3 + v2;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int[] _outputEscapes>;
label1:
if v2 >= v4 goto label2;
v8 = v1[v2];
if v8 > 127 goto label2;
v9 = v7[v8];
if v9 != 0 goto label2;
v10 = v5;
v5 = v5 + 1;
v6[v10] = v8;
v2 = v2 + 1;
goto label1;
label2:
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v5;
if v2 >= v4 goto label5;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.io.CharacterEscapes _characterEscapes>;
if v11 == null goto label3;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeCustomStringSegment2(char[],int,int)>(v1, v2, v4);
goto label5;
label3:
v12 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _maximumNonEscapedChar>;
if v12 != 0 goto label4;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeStringSegment2(char[],int,int)>(v1, v2, v4);
goto label5;
label4:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeStringSegmentASCII2(char[],int,int)>(v1, v2, v4);
label5:
return;
}
private final void _writeStringSegment(java.lang.String, int, int) throws java.io.IOException
{
byte[] v6;
com.fasterxml.jackson.core.io.CharacterEscapes v11;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
char v8;
int[] v7;
int v10, v12, v2, v3, v4, v5, v9;
java.lang.String v1;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v3 + v2;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int[] _outputEscapes>;
label1:
if v2 >= v4 goto label2;
v8 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v2);
if v8 > 127 goto label2;
v9 = v7[v8];
if v9 != 0 goto label2;
v10 = v5;
v5 = v5 + 1;
v6[v10] = v8;
v2 = v2 + 1;
goto label1;
label2:
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v5;
if v2 >= v4 goto label5;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.io.CharacterEscapes _characterEscapes>;
if v11 == null goto label3;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeCustomStringSegment2(java.lang.String,int,int)>(v1, v2, v4);
goto label5;
label3:
v12 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _maximumNonEscapedChar>;
if v12 != 0 goto label4;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeStringSegment2(java.lang.String,int,int)>(v1, v2, v4);
goto label5;
label4:
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeStringSegmentASCII2(java.lang.String,int,int)>(v1, v2, v4);
label5:
return;
}
private final void _writeStringSegment2(char[], int, int) throws java.io.IOException
{
byte[] v10;
short v22;
int[] v11;
int v12, v14, v15, v16, v17, v18, v19, v2, v20, v3, v4, v5, v6, v7, v8, v9;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
char v13, v21;
char[] v1;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v5 = v3 - v2;
v6 = 6 * v5;
v7 = v4 + v6;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v7 <= v8 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label1:
v9 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int[] _outputEscapes>;
label2:
if v2 >= v3 goto label7;
v12 = v2;
v2 = v2 + 1;
v13 = v1[v12];
if v13 > 127 goto label5;
v14 = v11[v13];
if v14 != 0 goto label3;
v15 = v9;
v9 = v9 + 1;
v10[v15] = v13;
goto label2;
label3:
v16 = v11[v13];
if v16 <= 0 goto label4;
v17 = v9 + 1;
v10[v9] = 92;
v9 = v17 + 1;
v10[v17] = v16;
goto label2;
label4:
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _writeGenericEscape(int,int)>(v13, v9);
goto label2;
label5:
if v13 > 2047 goto label6;
v18 = v9 + 1;
v19 = v13 >> 6;
v20 = 192 | v19;
v10[v9] = v20;
v9 = v18 + 1;
v21 = v13 & 63;
v22 = 128 | v21;
v10[v18] = v22;
goto label2;
label6:
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputMultiByteChar(int,int)>(v13, v9);
goto label2;
label7:
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v9;
return;
}
private final void _writeStringSegment2(java.lang.String, int, int) throws java.io.IOException
{
byte[] v10;
short v22;
int[] v11;
int v12, v14, v15, v16, v17, v18, v19, v2, v20, v3, v4, v5, v6, v7, v8, v9;
java.lang.String v1;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
char v13, v21;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v5 = v3 - v2;
v6 = 6 * v5;
v7 = v4 + v6;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v7 <= v8 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label1:
v9 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int[] _outputEscapes>;
label2:
if v2 >= v3 goto label7;
v12 = v2;
v2 = v2 + 1;
v13 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v12);
if v13 > 127 goto label5;
v14 = v11[v13];
if v14 != 0 goto label3;
v15 = v9;
v9 = v9 + 1;
v10[v15] = v13;
goto label2;
label3:
v16 = v11[v13];
if v16 <= 0 goto label4;
v17 = v9 + 1;
v10[v9] = 92;
v9 = v17 + 1;
v10[v17] = v16;
goto label2;
label4:
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _writeGenericEscape(int,int)>(v13, v9);
goto label2;
label5:
if v13 > 2047 goto label6;
v18 = v9 + 1;
v19 = v13 >> 6;
v20 = 192 | v19;
v10[v9] = v20;
v9 = v18 + 1;
v21 = v13 & 63;
v22 = 128 | v21;
v10[v18] = v22;
goto label2;
label6:
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputMultiByteChar(int,int)>(v13, v9);
goto label2;
label7:
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v9;
return;
}
private final void _writeStringSegmentASCII2(char[], int, int) throws java.io.IOException
{
byte[] v10;
short v23;
int[] v11;
int v12, v13, v15, v16, v17, v18, v19, v2, v20, v21, v3, v4, v5, v6, v7, v8, v9;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
char v14, v22;
char[] v1;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v5 = v3 - v2;
v6 = 6 * v5;
v7 = v4 + v6;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v7 <= v8 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label1:
v9 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int[] _outputEscapes>;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _maximumNonEscapedChar>;
label2:
if v2 >= v3 goto label8;
v13 = v2;
v2 = v2 + 1;
v14 = v1[v13];
if v14 > 127 goto label5;
v15 = v11[v14];
if v15 != 0 goto label3;
v16 = v9;
v9 = v9 + 1;
v10[v16] = v14;
goto label2;
label3:
v17 = v11[v14];
if v17 <= 0 goto label4;
v18 = v9 + 1;
v10[v9] = 92;
v9 = v18 + 1;
v10[v18] = v17;
goto label2;
label4:
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _writeGenericEscape(int,int)>(v14, v9);
goto label2;
label5:
if v14 <= v12 goto label6;
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _writeGenericEscape(int,int)>(v14, v9);
goto label2;
label6:
if v14 > 2047 goto label7;
v19 = v9 + 1;
v20 = v14 >> 6;
v21 = 192 | v20;
v10[v9] = v21;
v9 = v19 + 1;
v22 = v14 & 63;
v23 = 128 | v22;
v10[v19] = v23;
goto label2;
label7:
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputMultiByteChar(int,int)>(v14, v9);
goto label2;
label8:
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v9;
return;
}
private final void _writeStringSegmentASCII2(java.lang.String, int, int) throws java.io.IOException
{
byte[] v10;
short v23;
int[] v11;
int v12, v13, v15, v16, v17, v18, v19, v2, v20, v21, v3, v4, v5, v6, v7, v8, v9;
java.lang.String v1;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
char v14, v22;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v5 = v3 - v2;
v6 = 6 * v5;
v7 = v4 + v6;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v7 <= v8 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label1:
v9 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int[] _outputEscapes>;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _maximumNonEscapedChar>;
label2:
if v2 >= v3 goto label8;
v13 = v2;
v2 = v2 + 1;
v14 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v13);
if v14 > 127 goto label5;
v15 = v11[v14];
if v15 != 0 goto label3;
v16 = v9;
v9 = v9 + 1;
v10[v16] = v14;
goto label2;
label3:
v17 = v11[v14];
if v17 <= 0 goto label4;
v18 = v9 + 1;
v10[v9] = 92;
v9 = v18 + 1;
v10[v18] = v17;
goto label2;
label4:
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _writeGenericEscape(int,int)>(v14, v9);
goto label2;
label5:
if v14 <= v12 goto label6;
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _writeGenericEscape(int,int)>(v14, v9);
goto label2;
label6:
if v14 > 2047 goto label7;
v19 = v9 + 1;
v20 = v14 >> 6;
v21 = 192 | v20;
v10[v9] = v21;
v9 = v19 + 1;
v22 = v14 & 63;
v23 = 128 | v22;
v10[v19] = v23;
goto label2;
label7:
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputMultiByteChar(int,int)>(v14, v9);
goto label2;
label8:
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v9;
return;
}
private final void _writeCustomStringSegment2(char[], int, int) throws java.io.IOException
{
byte[] v10;
com.fasterxml.jackson.core.SerializableString v24, v28;
int[] v11;
com.fasterxml.jackson.core.io.CharacterEscapes v16;
short v34;
int v12, v13, v14, v15, v17, v19, v2, v20, v21, v22, v23, v27, v29, v3, v30, v31, v32, v4, v5, v6, v7, v8, v9;
java.lang.String v25, v26;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
char v18, v33;
char[] v1;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v5 = v3 - v2;
v6 = 6 * v5;
v7 = v4 + v6;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v7 <= v8 goto label01;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label01:
v9 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int[] _outputEscapes>;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _maximumNonEscapedChar>;
if v12 > 0 goto label02;
v13 = (int) 65535;
v14 = v13;
goto label03;
label02:
v14 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _maximumNonEscapedChar>;
label03:
v15 = v14;
v16 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.io.CharacterEscapes _characterEscapes>;
label04:
if v2 >= v3 goto label13;
v17 = v2;
v2 = v2 + 1;
v18 = v1[v17];
if v18 > 127 goto label09;
v19 = v11[v18];
if v19 != 0 goto label05;
v20 = v9;
v9 = v9 + 1;
v10[v20] = v18;
goto label04;
label05:
v21 = v11[v18];
if v21 <= 0 goto label06;
v22 = v9 + 1;
v10[v9] = 92;
v9 = v22 + 1;
v10[v22] = v21;
goto label04;
label06:
v23 = (int) -2;
if v21 != v23 goto label08;
v24 = virtualinvoke v16.<com.fasterxml.jackson.core.io.CharacterEscapes: com.fasterxml.jackson.core.SerializableString getEscapeSequence(int)>(v18);
if v24 != null goto label07;
v25 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v18);
v26 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v25) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid custom escape definitions; custom escape not found for character code 0x\u0001, although was supposed to have one");
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _reportError(java.lang.String)>(v26);
label07:
v27 = v3 - v2;
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _writeCustomEscape(byte[],int,com.fasterxml.jackson.core.SerializableString,int)>(v10, v9, v24, v27);
goto label04;
label08:
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _writeGenericEscape(int,int)>(v18, v9);
goto label04;
label09:
if v18 <= v15 goto label10;
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _writeGenericEscape(int,int)>(v18, v9);
goto label04;
label10:
v28 = virtualinvoke v16.<com.fasterxml.jackson.core.io.CharacterEscapes: com.fasterxml.jackson.core.SerializableString getEscapeSequence(int)>(v18);
if v28 == null goto label11;
v29 = v3 - v2;
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _writeCustomEscape(byte[],int,com.fasterxml.jackson.core.SerializableString,int)>(v10, v9, v28, v29);
goto label04;
label11:
if v18 > 2047 goto label12;
v30 = v9 + 1;
v31 = v18 >> 6;
v32 = 192 | v31;
v10[v9] = v32;
v9 = v30 + 1;
v33 = v18 & 63;
v34 = 128 | v33;
v10[v30] = v34;
goto label04;
label12:
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputMultiByteChar(int,int)>(v18, v9);
goto label04;
label13:
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v9;
return;
}
private final void _writeCustomStringSegment2(java.lang.String, int, int) throws java.io.IOException
{
byte[] v10;
com.fasterxml.jackson.core.SerializableString v24, v28;
int[] v11;
com.fasterxml.jackson.core.io.CharacterEscapes v16;
short v34;
int v12, v13, v14, v15, v17, v19, v2, v20, v21, v22, v23, v27, v29, v3, v30, v31, v32, v4, v5, v6, v7, v8, v9;
java.lang.String v1, v25, v26;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
char v18, v33;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v5 = v3 - v2;
v6 = 6 * v5;
v7 = v4 + v6;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v7 <= v8 goto label01;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label01:
v9 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v11 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int[] _outputEscapes>;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _maximumNonEscapedChar>;
if v12 > 0 goto label02;
v13 = (int) 65535;
v14 = v13;
goto label03;
label02:
v14 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _maximumNonEscapedChar>;
label03:
v15 = v14;
v16 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: com.fasterxml.jackson.core.io.CharacterEscapes _characterEscapes>;
label04:
if v2 >= v3 goto label13;
v17 = v2;
v2 = v2 + 1;
v18 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v17);
if v18 > 127 goto label09;
v19 = v11[v18];
if v19 != 0 goto label05;
v20 = v9;
v9 = v9 + 1;
v10[v20] = v18;
goto label04;
label05:
v21 = v11[v18];
if v21 <= 0 goto label06;
v22 = v9 + 1;
v10[v9] = 92;
v9 = v22 + 1;
v10[v22] = v21;
goto label04;
label06:
v23 = (int) -2;
if v21 != v23 goto label08;
v24 = virtualinvoke v16.<com.fasterxml.jackson.core.io.CharacterEscapes: com.fasterxml.jackson.core.SerializableString getEscapeSequence(int)>(v18);
if v24 != null goto label07;
v25 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v18);
v26 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v25) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid custom escape definitions; custom escape not found for character code 0x\u0001, although was supposed to have one");
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _reportError(java.lang.String)>(v26);
label07:
v27 = v3 - v2;
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _writeCustomEscape(byte[],int,com.fasterxml.jackson.core.SerializableString,int)>(v10, v9, v24, v27);
goto label04;
label08:
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _writeGenericEscape(int,int)>(v18, v9);
goto label04;
label09:
if v18 <= v15 goto label10;
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _writeGenericEscape(int,int)>(v18, v9);
goto label04;
label10:
v28 = virtualinvoke v16.<com.fasterxml.jackson.core.io.CharacterEscapes: com.fasterxml.jackson.core.SerializableString getEscapeSequence(int)>(v18);
if v28 == null goto label11;
v29 = v3 - v2;
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _writeCustomEscape(byte[],int,com.fasterxml.jackson.core.SerializableString,int)>(v10, v9, v28, v29);
goto label04;
label11:
if v18 > 2047 goto label12;
v30 = v9 + 1;
v31 = v18 >> 6;
v32 = 192 | v31;
v10[v9] = v32;
v9 = v30 + 1;
v33 = v18 & 63;
v34 = 128 | v33;
v10[v30] = v34;
goto label04;
label12:
v9 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputMultiByteChar(int,int)>(v18, v9);
goto label04;
label13:
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v9;
return;
}
private final int _writeCustomEscape(byte[], int, com.fasterxml.jackson.core.SerializableString, int) throws java.io.IOException, com.fasterxml.jackson.core.JsonGenerationException
{
byte[] v1, v5;
com.fasterxml.jackson.core.SerializableString v3;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
int v2, v4, v6, v7, v8, v9;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: com.fasterxml.jackson.core.SerializableString;
v4 := @parameter3: int;
v5 = interfaceinvoke v3.<com.fasterxml.jackson.core.SerializableString: byte[] asUnquotedUTF8()>();
v6 = lengthof v5;
if v6 <= 6 goto label1;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
v8 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _handleLongCustomEscape(byte[],int,int,byte[],int)>(v1, v2, v7, v5, v4);
return v8;
label1:
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v5, 0, v1, v2, v6);
v9 = v2 + v6;
return v9;
}
private final int _handleLongCustomEscape(byte[], int, int, byte[], int) throws java.io.IOException, com.fasterxml.jackson.core.JsonGenerationException
{
java.io.OutputStream v9;
byte[] v1, v4;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
int v10, v11, v12, v13, v2, v3, v5, v6, v7, v8;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: byte[];
v5 := @parameter4: int;
v6 = lengthof v4;
v7 = v2 + v6;
if v7 <= v3 goto label1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v2;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
v2 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v8 = lengthof v1;
if v6 <= v8 goto label1;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: java.io.OutputStream _outputStream>;
virtualinvoke v9.<java.io.OutputStream: void write(byte[],int,int)>(v4, 0, v6);
return v2;
label1:
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v4, 0, v1, v2, v6);
v10 = v2 + v6;
v11 = 6 * v5;
v12 = v10 + v11;
if v12 <= v3 goto label2;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v10;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
v13 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
return v13;
label2:
return v10;
}
private final void _writeUTF8Segments(byte[], int, int) throws java.io.IOException, com.fasterxml.jackson.core.JsonGenerationException
{
byte[] v1;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
int v2, v3, v4, v5;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
label1:
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputMaxContiguous>;
v5 = staticinvoke <java.lang.Math: int min(int,int)>(v4, v3);
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeUTF8Segment(byte[],int,int)>(v1, v2, v5);
v2 = v2 + v5;
v3 = v3 - v5;
if v3 > 0 goto label1;
return;
}
private final void _writeUTF8Segment(byte[], int, int) throws java.io.IOException, com.fasterxml.jackson.core.JsonGenerationException
{
byte[] v1, v13;
byte v8;
int[] v4;
int v10, v11, v12, v14, v15, v16, v2, v3, v5, v6, v7, v9;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int[] _outputEscapes>;
v5 = v2;
v6 = v2 + v3;
label1:
if v5 >= v6 goto label2;
v7 = v5;
v5 = v5 + 1;
v8 = v1[v7];
if v8 < 0 goto label1;
v9 = v4[v8];
if v9 == 0 goto label1;
specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _writeUTF8Segment2(byte[],int,int)>(v1, v2, v3);
return;
label2:
v10 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v11 = v10 + v3;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v11 <= v12 goto label3;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label3:
v13 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v14 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, v2, v13, v14, v3);
v15 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v16 = v15 + v3;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v16;
return;
}
private final void _writeUTF8Segment2(byte[], int, int) throws java.io.IOException, com.fasterxml.jackson.core.JsonGenerationException
{
byte[] v1, v8;
byte v12;
int[] v9;
int v10, v11, v13, v14, v15, v16, v2, v3, v4, v5, v6, v7;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v5 = v3 * 6;
v6 = v4 + v5;
v7 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v6 <= v7 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
label1:
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int[] _outputEscapes>;
v10 = v3 + v2;
label2:
if v2 >= v10 goto label6;
v11 = v2;
v2 = v2 + 1;
v12 = v1[v11];
if v12 < 0 goto label3;
v13 = v9[v12];
if v13 != 0 goto label4;
label3:
v14 = v4;
v4 = v4 + 1;
v8[v14] = v12;
goto label2;
label4:
v15 = v9[v12];
if v15 <= 0 goto label5;
v16 = v4 + 1;
v8[v4] = 92;
v4 = v16 + 1;
v8[v16] = v15;
goto label2;
label5:
v4 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _writeGenericEscape(int,int)>(v12, v4);
goto label2;
label6:
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v4;
return;
}
protected final void _writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int) throws java.io.IOException, com.fasterxml.jackson.core.JsonGenerationException
{
byte[] v2, v22, v25, v28, v40;
byte v12, v15, v19, v35, v37;
com.fasterxml.jackson.core.Base64Variant v1;
short v16, v20, v38;
int v10, v11, v13, v14, v17, v18, v21, v23, v24, v26, v27, v29, v3, v30, v31, v32, v33, v34, v36, v39, v4, v41, v42, v5, v6, v7, v8, v9;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: com.fasterxml.jackson.core.Base64Variant;
v2 := @parameter1: byte[];
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 = v4 - 3;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
v7 = v6 - 6;
v8 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int getMaxLineLength()>();
v9 = v8 >> 2;
label1:
if v3 > v5 goto label3;
v10 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
if v10 <= v7 goto label2;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label2:
v11 = v3 + 1;
v12 = v2[v3];
v13 = v12 << 8;
v14 = v11 + 1;
v15 = v2[v11];
v16 = v15 & 255;
v17 = v13 | v16;
v18 = v17 << 8;
v3 = v14 + 1;
v19 = v2[v14];
v20 = v19 & 255;
v21 = v18 | v20;
v22 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v23 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v24 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int encodeBase64Chunk(int,byte[],int)>(v21, v22, v23);
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v24;
v9 = v9 - 1;
if v9 > 0 goto label1;
v25 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v26 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v27 = v26 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v27;
v25[v26] = 92;
v28 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v29 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v30 = v29 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v30;
v28[v29] = 110;
v31 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int getMaxLineLength()>();
v9 = v31 >> 2;
goto label1;
label3:
v32 = v4 - v3;
if v32 <= 0 goto label6;
v33 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
if v33 <= v7 goto label4;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label4:
v34 = v3 + 1;
v35 = v2[v3];
v36 = v35 << 16;
if v32 != 2 goto label5;
v37 = v2[v34];
v38 = v37 & 255;
v39 = v38 << 8;
v36 = v36 | v39;
label5:
v40 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v41 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v42 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int encodeBase64Partial(int,int,byte[],int)>(v36, v32, v40, v41);
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v42;
label6:
return;
}
protected final int _writeBinary(com.fasterxml.jackson.core.Base64Variant, java.io.InputStream, byte[], int) throws java.io.IOException, com.fasterxml.jackson.core.JsonGenerationException
{
byte[] v25, v28, v3, v31, v43;
byte v15, v18, v22, v37, v39, v42;
com.fasterxml.jackson.core.Base64Variant v1;
short v19, v23, v40;
int v10, v11, v12, v13, v14, v16, v17, v20, v21, v24, v26, v27, v29, v30, v32, v33, v34, v35, v36, v38, v4, v41, v44, v45, v5, v6, v7, v8, v9;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
java.io.InputStream v2;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: com.fasterxml.jackson.core.Base64Variant;
v2 := @parameter1: java.io.InputStream;
v3 := @parameter2: byte[];
v4 := @parameter3: int;
v5 = 0;
v6 = 0;
v7 = (int) -3;
v8 = v7;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
v10 = v9 - 6;
v11 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int getMaxLineLength()>();
v12 = v11 >> 2;
label1:
if v4 <= 2 goto label4;
if v5 <= v8 goto label2;
v6 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _readMore(java.io.InputStream,byte[],int,int,int)>(v2, v3, v5, v6, v4);
v5 = 0;
if v6 < 3 goto label4;
v8 = v6 - 3;
label2:
v13 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
if v13 <= v10 goto label3;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label3:
v14 = v5 + 1;
v15 = v3[v5];
v16 = v15 << 8;
v17 = v14 + 1;
v18 = v3[v14];
v19 = v18 & 255;
v20 = v16 | v19;
v21 = v20 << 8;
v5 = v17 + 1;
v22 = v3[v17];
v23 = v22 & 255;
v24 = v21 | v23;
v4 = v4 - 3;
v25 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v26 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v27 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int encodeBase64Chunk(int,byte[],int)>(v24, v25, v26);
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v27;
v12 = v12 - 1;
if v12 > 0 goto label1;
v28 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v29 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v30 = v29 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v30;
v28[v29] = 92;
v31 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v32 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v33 = v32 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v33;
v31[v32] = 110;
v34 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int getMaxLineLength()>();
v12 = v34 >> 2;
goto label1;
label4:
if v4 <= 0 goto label8;
v35 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _readMore(java.io.InputStream,byte[],int,int,int)>(v2, v3, v5, v6, v4);
if v35 <= 0 goto label8;
v36 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
if v36 <= v10 goto label5;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label5:
v37 = v3[0];
v38 = v37 << 16;
if 1 >= v35 goto label6;
v39 = v3[1];
v40 = v39 & 255;
v41 = v40 << 8;
v38 = v38 | v41;
v42 = 2;
goto label7;
label6:
v42 = 1;
label7:
v43 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v44 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v45 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int encodeBase64Partial(int,int,byte[],int)>(v38, v42, v43, v44);
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v45;
v4 = v4 - v42;
label8:
return v4;
}
protected final int _writeBinary(com.fasterxml.jackson.core.Base64Variant, java.io.InputStream, byte[]) throws java.io.IOException, com.fasterxml.jackson.core.JsonGenerationException
{
byte[] v26, v29, v3, v32, v43;
byte v16, v19, v23, v37, v39, v40;
com.fasterxml.jackson.core.Base64Variant v1;
short v20, v24, v41;
int v10, v11, v12, v13, v14, v15, v17, v18, v21, v22, v25, v27, v28, v30, v31, v33, v34, v35, v36, v38, v4, v42, v44, v45, v5, v6, v7, v8, v9;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
java.io.InputStream v2;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: com.fasterxml.jackson.core.Base64Variant;
v2 := @parameter1: java.io.InputStream;
v3 := @parameter2: byte[];
v4 = 0;
v5 = 0;
v6 = (int) -3;
v7 = v6;
v8 = 0;
v9 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
v10 = v9 - 6;
v11 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int getMaxLineLength()>();
v12 = v11 >> 2;
label1:
if v4 <= v7 goto label2;
v13 = lengthof v3;
v5 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _readMore(java.io.InputStream,byte[],int,int,int)>(v2, v3, v4, v5, v13);
v4 = 0;
if v5 < 3 goto label4;
v7 = v5 - 3;
label2:
v14 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
if v14 <= v10 goto label3;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label3:
v15 = v4 + 1;
v16 = v3[v4];
v17 = v16 << 8;
v18 = v15 + 1;
v19 = v3[v15];
v20 = v19 & 255;
v21 = v17 | v20;
v22 = v21 << 8;
v4 = v18 + 1;
v23 = v3[v18];
v24 = v23 & 255;
v25 = v22 | v24;
v8 = v8 + 3;
v26 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v27 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v28 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int encodeBase64Chunk(int,byte[],int)>(v25, v26, v27);
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v28;
v12 = v12 - 1;
if v12 > 0 goto label1;
v29 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v30 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v31 = v30 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v31;
v29[v30] = 92;
v32 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v33 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v34 = v33 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v34;
v32[v33] = 110;
v35 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int getMaxLineLength()>();
v12 = v35 >> 2;
goto label1;
label4:
if 0 >= v5 goto label7;
v36 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
if v36 <= v10 goto label5;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label5:
v37 = v3[0];
v38 = v37 << 16;
v39 = 1;
if 1 >= v5 goto label6;
v40 = v3[1];
v41 = v40 & 255;
v42 = v41 << 8;
v38 = v38 | v42;
v39 = 2;
label6:
v8 = v8 + v39;
v43 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v44 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v45 = virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: int encodeBase64Partial(int,int,byte[],int)>(v38, v39, v43, v44);
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v45;
label7:
return v8;
}
private final int _readMore(java.io.InputStream, byte[], int, int, int) throws java.io.IOException
{
byte[] v2;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
byte v9;
int v10, v11, v12, v13, v14, v3, v4, v5, v6, v7, v8;
java.io.InputStream v1;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: java.io.InputStream;
v2 := @parameter1: byte[];
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 := @parameter4: int;
v6 = 0;
label1:
if v3 >= v4 goto label2;
v7 = v6;
v6 = v6 + 1;
v8 = v3;
v3 = v3 + 1;
v9 = v2[v8];
v2[v7] = v9;
goto label1;
label2:
v10 = v6;
v11 = lengthof v2;
v12 = staticinvoke <java.lang.Math: int min(int,int)>(v5, v11);
label3:
v13 = v12 - v10;
if v13 == 0 goto label5;
v14 = virtualinvoke v1.<java.io.InputStream: int read(byte[],int,int)>(v2, v10, v13);
if v14 >= 0 goto label4;
return v10;
label4:
v10 = v10 + v14;
if v10 < 3 goto label3;
label5:
return v10;
}
private final int _outputRawMultiByteChar(int, char[], int, int) throws java.io.IOException
{
byte[] v12;
java.lang.Object[] v7;
java.lang.Integer v8;
int v1, v11, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v3, v4, v5, v6;
java.lang.String v9;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
char v10;
char[] v2;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: int;
v2 := @parameter1: char[];
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 = (int) 55296;
if v1 < v5 goto label4;
v6 = (int) 57343;
if v1 > v6 goto label4;
if v3 >= v4 goto label1;
if v2 != null goto label2;
label1:
v7 = newarray (java.lang.Object)[1];
v8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v7[0] = v8;
v9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Split surrogate on writeRaw() input (last character): first character 0x%4x", v7);
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _reportError(java.lang.String)>(v9);
goto label3;
label2:
v10 = v2[v3];
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _outputSurrogates(int,int)>(v1, v10);
label3:
v11 = v3 + 1;
return v11;
label4:
v12 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v13 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v14 = v13 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v14;
v15 = v1 >> 12;
v16 = 224 | v15;
v12[v13] = v16;
v17 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v18 = v17 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v18;
v19 = v1 >> 6;
v20 = v19 & 63;
v21 = 128 | v20;
v12[v17] = v21;
v22 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v23 = v22 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v23;
v24 = v1 & 63;
v25 = 128 | v24;
v12[v22] = v25;
return v3;
}
protected final void _outputSurrogates(int, int) throws java.io.IOException
{
byte[] v7;
int v1, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v2, v20, v21, v22, v23, v24, v25, v3, v4, v5, v6, v8, v9;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _decodeSurrogate(int,int)>(v1, v2);
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v5 = v4 + 4;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v5 <= v6 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label1:
v7 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v8 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v9 = v8 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v9;
v10 = v3 >> 18;
v11 = 240 | v10;
v7[v8] = v11;
v12 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v13 = v12 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v13;
v14 = v3 >> 12;
v15 = v14 & 63;
v16 = 128 | v15;
v7[v12] = v16;
v17 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v18 = v17 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v18;
v19 = v3 >> 6;
v20 = v19 & 63;
v21 = 128 | v20;
v7[v17] = v21;
v22 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v23 = v22 + 1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v23;
v24 = v3 & 63;
v25 = 128 | v24;
v7[v22] = v25;
return;
}
private final int _outputMultiByteChar(int, int) throws java.io.IOException
{
byte[] v3, v4;
byte v12, v16, v20, v23;
int v1, v10, v11, v13, v14, v15, v17, v18, v19, v2, v21, v22, v24, v25, v26, v27, v28, v29, v30, v31, v32, v5, v6, v7, v8, v9;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] getHexBytes()>();
v4 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v5 = (int) 55296;
if v1 < v5 goto label1;
v6 = (int) 57343;
if v1 > v6 goto label1;
v7 = v2 + 1;
v4[v2] = 92;
v8 = v7 + 1;
v4[v7] = 117;
v9 = v8 + 1;
v10 = v1 >> 12;
v11 = v10 & 15;
v12 = v3[v11];
v4[v8] = v12;
v13 = v9 + 1;
v14 = v1 >> 8;
v15 = v14 & 15;
v16 = v3[v15];
v4[v9] = v16;
v17 = v13 + 1;
v18 = v1 >> 4;
v19 = v18 & 15;
v20 = v3[v19];
v4[v13] = v20;
v21 = v17 + 1;
v22 = v1 & 15;
v23 = v3[v22];
v4[v17] = v23;
goto label2;
label1:
v24 = v2 + 1;
v25 = v1 >> 12;
v26 = 224 | v25;
v4[v2] = v26;
v27 = v24 + 1;
v28 = v1 >> 6;
v29 = v28 & 63;
v30 = 128 | v29;
v4[v24] = v30;
v21 = v27 + 1;
v31 = v1 & 63;
v32 = 128 | v31;
v4[v27] = v32;
label2:
return v21;
}
private final void _writeNull() throws java.io.IOException
{
byte[] v4, v5;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
int v1, v2, v3, v6, v7, v8;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v2 = v1 + 4;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputEnd>;
if v2 < v3 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: void _flushBuffer()>();
label1:
v4 = <com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] NULL_BYTES>;
v5 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v6 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v4, 0, v5, v6, 4);
v7 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
v8 = v7 + 4;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = v8;
return;
}
private int _writeGenericEscape(int, int) throws java.io.IOException
{
byte[] v3, v4;
byte v11, v14, v18, v21;
int v1, v10, v12, v13, v15, v16, v17, v19, v2, v20, v5, v6, v7, v8, v9;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
v4 = specialinvoke v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] getHexBytes()>();
v5 = v2 + 1;
v3[v2] = 92;
v6 = v5 + 1;
v3[v5] = 117;
if v1 <= 255 goto label1;
v7 = v1 >> 8;
v8 = v7 & 255;
v9 = v6 + 1;
v10 = v8 >> 4;
v11 = v4[v10];
v3[v6] = v11;
v12 = v9 + 1;
v13 = v8 & 15;
v14 = v4[v13];
v3[v9] = v14;
v1 = v1 & 255;
goto label2;
label1:
v15 = v6 + 1;
v3[v6] = 48;
v12 = v15 + 1;
v3[v15] = 48;
label2:
v16 = v12 + 1;
v17 = v1 >> 4;
v18 = v4[v17];
v3[v12] = v18;
v19 = v16 + 1;
v20 = v1 & 15;
v21 = v4[v20];
v3[v16] = v21;
return v19;
}
protected final void _flushBuffer() throws java.io.IOException
{
java.io.OutputStream v2;
byte[] v3;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
int v1;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail>;
if v1 <= 0 goto label1;
v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: int _outputTail> = 0;
v2 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: java.io.OutputStream _outputStream>;
v3 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] _outputBuffer>;
virtualinvoke v2.<java.io.OutputStream: void write(byte[],int,int)>(v3, 0, v1);
label1:
return;
}
private byte[] getHexBytes()
{
byte[] v2;
boolean v1;
com.fasterxml.jackson.core.json.UTF8JsonGenerator v0;
v0 := @this: com.fasterxml.jackson.core.json.UTF8JsonGenerator;
v1 = v0.<com.fasterxml.jackson.core.json.UTF8JsonGenerator: boolean _cfgWriteHexUppercase>;
if v1 == 0 goto label1;
v2 = <com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] HEX_BYTES_UPPER>;
goto label2;
label1:
v2 = <com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] HEX_BYTES_LOWER>;
label2:
return v2;
}
static void <clinit>()
{
byte[] v0, v1, v2, v3, v4;
v0 = staticinvoke <com.fasterxml.jackson.core.io.CharTypes: byte[] copyHexBytes(boolean)>(1);
<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] HEX_BYTES_UPPER> = v0;
v1 = staticinvoke <com.fasterxml.jackson.core.io.CharTypes: byte[] copyHexBytes(boolean)>(0);
<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] HEX_BYTES_LOWER> = v1;
v2 = newarray (byte)[4];
v2[0] = 110;
v2[1] = 117;
v2[2] = 108;
v2[3] = 108;
<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] NULL_BYTES> = v2;
v3 = newarray (byte)[4];
v3[0] = 116;
v3[1] = 114;
v3[2] = 117;
v3[3] = 101;
<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] TRUE_BYTES> = v3;
v4 = newarray (byte)[5];
v4[0] = 102;
v4[1] = 97;
v4[2] = 108;
v4[3] = 115;
v4[4] = 101;
<com.fasterxml.jackson.core.json.UTF8JsonGenerator: byte[] FALSE_BYTES> = v4;
return;
}
}