public class com.fasterxml.jackson.core.util.BufferRecycler extends java.lang.Object
{
public static final int BYTE_READ_IO_BUFFER;
public static final int BYTE_WRITE_ENCODING_BUFFER;
public static final int BYTE_WRITE_CONCAT_BUFFER;
public static final int BYTE_BASE64_CODEC_BUFFER;
public static final int CHAR_TOKEN_BUFFER;
public static final int CHAR_CONCAT_BUFFER;
public static final int CHAR_TEXT_BUFFER;
public static final int CHAR_NAME_COPY_BUFFER;
private static final int[] BYTE_BUFFER_LENGTHS;
private static final int[] CHAR_BUFFER_LENGTHS;
protected final java.util.concurrent.atomic.AtomicReferenceArray _byteBuffers;
protected final java.util.concurrent.atomic.AtomicReferenceArray _charBuffers;
public void <init>()
{
com.fasterxml.jackson.core.util.BufferRecycler v0;
v0 := @this: com.fasterxml.jackson.core.util.BufferRecycler;
specialinvoke v0.<com.fasterxml.jackson.core.util.BufferRecycler: void <init>(int,int)>(4, 4);
return;
}
protected void <init>(int, int)
{
int v1, v2;
com.fasterxml.jackson.core.util.BufferRecycler v0;
java.util.concurrent.atomic.AtomicReferenceArray v3, v4;
v0 := @this: com.fasterxml.jackson.core.util.BufferRecycler;
v1 := @parameter0: int;
v2 := @parameter1: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new java.util.concurrent.atomic.AtomicReferenceArray;
specialinvoke v3.<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>(v1);
v0.<com.fasterxml.jackson.core.util.BufferRecycler: java.util.concurrent.atomic.AtomicReferenceArray _byteBuffers> = v3;
v4 = new java.util.concurrent.atomic.AtomicReferenceArray;
specialinvoke v4.<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>(v2);
v0.<com.fasterxml.jackson.core.util.BufferRecycler: java.util.concurrent.atomic.AtomicReferenceArray _charBuffers> = v4;
return;
}
public final byte[] allocByteBuffer(int)
{
int v1;
byte[] v2;
com.fasterxml.jackson.core.util.BufferRecycler v0;
v0 := @this: com.fasterxml.jackson.core.util.BufferRecycler;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.util.BufferRecycler: byte[] allocByteBuffer(int,int)>(v1, 0);
return v2;
}
public byte[] allocByteBuffer(int, int)
{
int v1, v2, v3, v6;
java.lang.Object v5;
com.fasterxml.jackson.core.util.BufferRecycler v0;
java.util.concurrent.atomic.AtomicReferenceArray v4;
v0 := @this: com.fasterxml.jackson.core.util.BufferRecycler;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.util.BufferRecycler: int byteBufferLength(int)>(v1);
if v2 >= v3 goto label1;
v2 = v3;
label1:
v4 = v0.<com.fasterxml.jackson.core.util.BufferRecycler: java.util.concurrent.atomic.AtomicReferenceArray _byteBuffers>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getAndSet(int,java.lang.Object)>(v1, null);
if v5 == null goto label2;
v6 = lengthof v5;
if v6 >= v2 goto label3;
label2:
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.util.BufferRecycler: byte[] balloc(int)>(v2);
label3:
return v5;
}
public void releaseByteBuffer(int, byte[])
{
byte[] v2;
int v1;
com.fasterxml.jackson.core.util.BufferRecycler v0;
java.util.concurrent.atomic.AtomicReferenceArray v3;
v0 := @this: com.fasterxml.jackson.core.util.BufferRecycler;
v1 := @parameter0: int;
v2 := @parameter1: byte[];
v3 = v0.<com.fasterxml.jackson.core.util.BufferRecycler: java.util.concurrent.atomic.AtomicReferenceArray _byteBuffers>;
virtualinvoke v3.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>(v1, v2);
return;
}
public final char[] allocCharBuffer(int)
{
int v1;
char[] v2;
com.fasterxml.jackson.core.util.BufferRecycler v0;
v0 := @this: com.fasterxml.jackson.core.util.BufferRecycler;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.util.BufferRecycler: char[] allocCharBuffer(int,int)>(v1, 0);
return v2;
}
public char[] allocCharBuffer(int, int)
{
int v1, v2, v3, v6;
java.lang.Object v5;
com.fasterxml.jackson.core.util.BufferRecycler v0;
java.util.concurrent.atomic.AtomicReferenceArray v4;
v0 := @this: com.fasterxml.jackson.core.util.BufferRecycler;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = virtualinvoke v0.<com.fasterxml.jackson.core.util.BufferRecycler: int charBufferLength(int)>(v1);
if v2 >= v3 goto label1;
v2 = v3;
label1:
v4 = v0.<com.fasterxml.jackson.core.util.BufferRecycler: java.util.concurrent.atomic.AtomicReferenceArray _charBuffers>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getAndSet(int,java.lang.Object)>(v1, null);
if v5 == null goto label2;
v6 = lengthof v5;
if v6 >= v2 goto label3;
label2:
v5 = virtualinvoke v0.<com.fasterxml.jackson.core.util.BufferRecycler: char[] calloc(int)>(v2);
label3:
return v5;
}
public void releaseCharBuffer(int, char[])
{
int v1;
char[] v2;
com.fasterxml.jackson.core.util.BufferRecycler v0;
java.util.concurrent.atomic.AtomicReferenceArray v3;
v0 := @this: com.fasterxml.jackson.core.util.BufferRecycler;
v1 := @parameter0: int;
v2 := @parameter1: char[];
v3 = v0.<com.fasterxml.jackson.core.util.BufferRecycler: java.util.concurrent.atomic.AtomicReferenceArray _charBuffers>;
virtualinvoke v3.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>(v1, v2);
return;
}
protected int byteBufferLength(int)
{
int[] v2;
int v1, v3;
com.fasterxml.jackson.core.util.BufferRecycler v0;
v0 := @this: com.fasterxml.jackson.core.util.BufferRecycler;
v1 := @parameter0: int;
v2 = <com.fasterxml.jackson.core.util.BufferRecycler: int[] BYTE_BUFFER_LENGTHS>;
v3 = v2[v1];
return v3;
}
protected int charBufferLength(int)
{
int[] v2;
int v1, v3;
com.fasterxml.jackson.core.util.BufferRecycler v0;
v0 := @this: com.fasterxml.jackson.core.util.BufferRecycler;
v1 := @parameter0: int;
v2 = <com.fasterxml.jackson.core.util.BufferRecycler: int[] CHAR_BUFFER_LENGTHS>;
v3 = v2[v1];
return v3;
}
protected byte[] balloc(int)
{
int v1;
byte[] v2;
com.fasterxml.jackson.core.util.BufferRecycler v0;
v0 := @this: com.fasterxml.jackson.core.util.BufferRecycler;
v1 := @parameter0: int;
v2 = newarray (byte)[v1];
return v2;
}
protected char[] calloc(int)
{
int v1;
char[] v2;
com.fasterxml.jackson.core.util.BufferRecycler v0;
v0 := @this: com.fasterxml.jackson.core.util.BufferRecycler;
v1 := @parameter0: int;
v2 = newarray (char)[v1];
return v2;
}
static void <clinit>()
{
int[] v0, v1;
v0 = newarray (int)[4];
v0[0] = 8000;
v0[1] = 8000;
v0[2] = 2000;
v0[3] = 2000;
<com.fasterxml.jackson.core.util.BufferRecycler: int[] BYTE_BUFFER_LENGTHS> = v0;
v1 = newarray (int)[4];
v1[0] = 4000;
v1[1] = 4000;
v1[2] = 200;
v1[3] = 200;
<com.fasterxml.jackson.core.util.BufferRecycler: int[] CHAR_BUFFER_LENGTHS> = v1;
return;
}
}