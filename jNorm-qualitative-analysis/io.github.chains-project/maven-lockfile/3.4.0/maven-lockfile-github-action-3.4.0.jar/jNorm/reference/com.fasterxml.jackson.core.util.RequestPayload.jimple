public class com.fasterxml.jackson.core.util.RequestPayload extends java.lang.Object implements java.io.Serializable
{
private static final long serialVersionUID;
protected byte[] _payloadAsBytes;
protected java.lang.CharSequence _payloadAsText;
protected java.lang.String _charset;
public void <init>(byte[], java.lang.String)
{
byte[] v1;
com.fasterxml.jackson.core.util.RequestPayload v0;
java.lang.String v2, v5;
java.lang.IllegalArgumentException v3;
boolean v4;
v0 := @this: com.fasterxml.jackson.core.util.RequestPayload;
v1 := @parameter0: byte[];
v2 := @parameter1: java.lang.String;
specialinvoke v0.<java.lang.Object: void <init>()>();
if v1 != null goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>()>();
throw v3;
label1:
v0.<com.fasterxml.jackson.core.util.RequestPayload: byte[] _payloadAsBytes> = v1;
if v2 == null goto label2;
v4 = virtualinvoke v2.<java.lang.String: boolean isEmpty()>();
if v4 == 0 goto label3;
label2:
v5 = "UTF-8";
goto label4;
label3:
v5 = v2;
label4:
v0.<com.fasterxml.jackson.core.util.RequestPayload: java.lang.String _charset> = v5;
return;
}
public void <init>(java.lang.CharSequence)
{
java.lang.CharSequence v1;
java.lang.IllegalArgumentException v2;
com.fasterxml.jackson.core.util.RequestPayload v0;
v0 := @this: com.fasterxml.jackson.core.util.RequestPayload;
v1 := @parameter0: java.lang.CharSequence;
specialinvoke v0.<java.lang.Object: void <init>()>();
if v1 != null goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>()>();
throw v2;
label1:
v0.<com.fasterxml.jackson.core.util.RequestPayload: java.lang.CharSequence _payloadAsText> = v1;
return;
}
public java.lang.Object getRawPayload()
{
byte[] v1, v2;
java.lang.CharSequence v3;
com.fasterxml.jackson.core.util.RequestPayload v0;
v0 := @this: com.fasterxml.jackson.core.util.RequestPayload;
v1 = v0.<com.fasterxml.jackson.core.util.RequestPayload: byte[] _payloadAsBytes>;
if v1 == null goto label1;
v2 = v0.<com.fasterxml.jackson.core.util.RequestPayload: byte[] _payloadAsBytes>;
return v2;
label1:
v3 = v0.<com.fasterxml.jackson.core.util.RequestPayload: java.lang.CharSequence _payloadAsText>;
return v3;
}
public java.lang.String toString()
{
byte[] v1, v3;
java.lang.CharSequence v7;
java.io.IOException v5;
java.lang.RuntimeException v6;
com.fasterxml.jackson.core.util.RequestPayload v0;
java.lang.String v2, v4, v8;
v0 := @this: com.fasterxml.jackson.core.util.RequestPayload;
v1 = v0.<com.fasterxml.jackson.core.util.RequestPayload: byte[] _payloadAsBytes>;
if v1 == null goto label4;
label1:
v2 = new java.lang.String;
v3 = v0.<com.fasterxml.jackson.core.util.RequestPayload: byte[] _payloadAsBytes>;
v4 = v0.<com.fasterxml.jackson.core.util.RequestPayload: java.lang.String _charset>;
specialinvoke v2.<java.lang.String: void <init>(byte[],java.lang.String)>(v3, v4);
label2:
return v2;
label3:
v5 := @caughtexception;
v6 = new java.lang.RuntimeException;
specialinvoke v6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(v5);
throw v6;
label4:
v7 = v0.<com.fasterxml.jackson.core.util.RequestPayload: java.lang.CharSequence _payloadAsText>;
v8 = virtualinvoke v7.<java.lang.Object: java.lang.String toString()>();
return v8;
catch java.io.IOException from label1 to label2 with label3;
}
}