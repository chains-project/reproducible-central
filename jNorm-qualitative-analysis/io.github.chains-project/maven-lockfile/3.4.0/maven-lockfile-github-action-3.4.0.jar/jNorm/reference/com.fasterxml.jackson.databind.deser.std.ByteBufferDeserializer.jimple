public class com.fasterxml.jackson.databind.deser.std.ByteBufferDeserializer extends com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer
{
private static final long serialVersionUID;
protected void <init>()
{
com.fasterxml.jackson.databind.deser.std.ByteBufferDeserializer v0;
v0 := @this: com.fasterxml.jackson.databind.deser.std.ByteBufferDeserializer;
specialinvoke v0.<com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer: void <init>(java.lang.Class)>(class "Ljava/nio/ByteBuffer;");
return;
}
public com.fasterxml.jackson.databind.type.LogicalType logicalType()
{
com.fasterxml.jackson.databind.type.LogicalType v1;
com.fasterxml.jackson.databind.deser.std.ByteBufferDeserializer v0;
v0 := @this: com.fasterxml.jackson.databind.deser.std.ByteBufferDeserializer;
v1 = <com.fasterxml.jackson.databind.type.LogicalType: com.fasterxml.jackson.databind.type.LogicalType Binary>;
return v1;
}
public java.nio.ByteBuffer deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext) throws java.io.IOException
{
byte[] v3;
com.fasterxml.jackson.databind.DeserializationContext v2;
com.fasterxml.jackson.databind.deser.std.ByteBufferDeserializer v0;
com.fasterxml.jackson.core.JsonParser v1;
java.nio.ByteBuffer v4;
v0 := @this: com.fasterxml.jackson.databind.deser.std.ByteBufferDeserializer;
v1 := @parameter0: com.fasterxml.jackson.core.JsonParser;
v2 := @parameter1: com.fasterxml.jackson.databind.DeserializationContext;
v3 = virtualinvoke v1.<com.fasterxml.jackson.core.JsonParser: byte[] getBinaryValue()>();
v4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(v3);
return v4;
}
public java.nio.ByteBuffer deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.nio.ByteBuffer) throws java.io.IOException
{
com.fasterxml.jackson.core.Base64Variant v5;
com.fasterxml.jackson.databind.DeserializationContext v2;
com.fasterxml.jackson.databind.deser.std.ByteBufferDeserializer v0;
com.fasterxml.jackson.core.JsonParser v1;
com.fasterxml.jackson.databind.util.ByteBufferBackedOutputStream v4;
java.nio.ByteBuffer v3;
v0 := @this: com.fasterxml.jackson.databind.deser.std.ByteBufferDeserializer;
v1 := @parameter0: com.fasterxml.jackson.core.JsonParser;
v2 := @parameter1: com.fasterxml.jackson.databind.DeserializationContext;
v3 := @parameter2: java.nio.ByteBuffer;
v4 = new com.fasterxml.jackson.databind.util.ByteBufferBackedOutputStream;
specialinvoke v4.<com.fasterxml.jackson.databind.util.ByteBufferBackedOutputStream: void <init>(java.nio.ByteBuffer)>(v3);
v5 = virtualinvoke v2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.core.Base64Variant getBase64Variant()>();
virtualinvoke v1.<com.fasterxml.jackson.core.JsonParser: int readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)>(v5, v4);
virtualinvoke v4.<java.io.OutputStream: void close()>();
return v3;
}
}