public class com.fasterxml.jackson.databind.ext.DOMSerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer
{
protected final javax.xml.transform.TransformerFactory transformerFactory;
public void <init>()
{
java.lang.IllegalStateException v6;
java.lang.Exception v5;
com.fasterxml.jackson.databind.ext.DOMSerializer v0;
java.lang.String v7, v8;
javax.xml.transform.TransformerFactory v1, v2, v3, v4;
v0 := @this: com.fasterxml.jackson.databind.ext.DOMSerializer;
specialinvoke v0.<com.fasterxml.jackson.databind.ser.std.StdSerializer: void <init>(java.lang.Class)>(class "Lorg/w3c/dom/Node;");
label1:
v1 = staticinvoke <javax.xml.transform.TransformerFactory: javax.xml.transform.TransformerFactory newInstance()>();
v0.<com.fasterxml.jackson.databind.ext.DOMSerializer: javax.xml.transform.TransformerFactory transformerFactory> = v1;
v2 = v0.<com.fasterxml.jackson.databind.ext.DOMSerializer: javax.xml.transform.TransformerFactory transformerFactory>;
virtualinvoke v2.<javax.xml.transform.TransformerFactory: void setFeature(java.lang.String,boolean)>("http://javax.xml.XMLConstants/feature/secure-processing", 1);
v3 = v0.<com.fasterxml.jackson.databind.ext.DOMSerializer: javax.xml.transform.TransformerFactory transformerFactory>;
staticinvoke <com.fasterxml.jackson.databind.ext.DOMSerializer: void setTransformerFactoryAttribute(javax.xml.transform.TransformerFactory,java.lang.String,java.lang.Object)>(v3, "http://javax.xml.XMLConstants/property/accessExternalDTD", "");
v4 = v0.<com.fasterxml.jackson.databind.ext.DOMSerializer: javax.xml.transform.TransformerFactory transformerFactory>;
staticinvoke <com.fasterxml.jackson.databind.ext.DOMSerializer: void setTransformerFactoryAttribute(javax.xml.transform.TransformerFactory,java.lang.String,java.lang.Object)>(v4, "http://javax.xml.XMLConstants/property/accessExternalStylesheet", "");
label2:
goto label4;
label3:
v5 := @caughtexception;
v6 = new java.lang.IllegalStateException;
v7 = virtualinvoke v5.<java.lang.Exception: java.lang.String getMessage()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Could not instantiate `TransformerFactory`: \u0001");
specialinvoke v6.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>(v8, v5);
throw v6;
label4:
return;
catch java.lang.Exception from label1 to label2 with label3;
}
public void serialize(org.w3c.dom.Node, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider) throws java.io.IOException
{
java.lang.IllegalStateException v12;
javax.xml.transform.Transformer v5;
javax.xml.transform.dom.DOMSource v8;
java.lang.Object[] v16;
javax.xml.transform.TransformerException v15;
com.fasterxml.jackson.core.JsonGenerator v2;
javax.xml.transform.stream.StreamResult v6;
org.w3c.dom.Node v1;
com.fasterxml.jackson.databind.ext.DOMSerializer v0;
com.fasterxml.jackson.databind.SerializerProvider v3;
java.lang.String v10, v13, v14, v17;
javax.xml.transform.TransformerConfigurationException v11;
java.io.StringWriter v7;
java.io.Writer v9;
javax.xml.transform.TransformerFactory v4;
v0 := @this: com.fasterxml.jackson.databind.ext.DOMSerializer;
v1 := @parameter0: org.w3c.dom.Node;
v2 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;
v3 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;
label1:
v4 = v0.<com.fasterxml.jackson.databind.ext.DOMSerializer: javax.xml.transform.TransformerFactory transformerFactory>;
v5 = virtualinvoke v4.<javax.xml.transform.TransformerFactory: javax.xml.transform.Transformer newTransformer()>();
virtualinvoke v5.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("omit-xml-declaration", "yes");
virtualinvoke v5.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("indent", "no");
v6 = new javax.xml.transform.stream.StreamResult;
v7 = new java.io.StringWriter;
specialinvoke v7.<java.io.StringWriter: void <init>()>();
specialinvoke v6.<javax.xml.transform.stream.StreamResult: void <init>(java.io.Writer)>(v7);
v8 = new javax.xml.transform.dom.DOMSource;
specialinvoke v8.<javax.xml.transform.dom.DOMSource: void <init>(org.w3c.dom.Node)>(v1);
virtualinvoke v5.<javax.xml.transform.Transformer: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>(v8, v6);
v9 = virtualinvoke v6.<javax.xml.transform.stream.StreamResult: java.io.Writer getWriter()>();
v10 = virtualinvoke v9.<java.lang.Object: java.lang.String toString()>();
virtualinvoke v2.<com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>(v10);
label2:
goto label5;
label3:
v11 := @caughtexception;
v12 = new java.lang.IllegalStateException;
v13 = virtualinvoke v11.<javax.xml.transform.TransformerConfigurationException: java.lang.String getMessage()>();
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v13) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Could not create XML Transformer for writing DOM `Node` value: \u0001");
specialinvoke v12.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>(v14, v11);
throw v12;
label4:
v15 := @caughtexception;
v16 = newarray (java.lang.Object)[1];
v17 = virtualinvoke v15.<javax.xml.transform.TransformerException: java.lang.String getMessage()>();
v16[0] = v17;
virtualinvoke v3.<com.fasterxml.jackson.databind.SerializerProvider: void reportMappingProblem(java.lang.Throwable,java.lang.String,java.lang.Object[])>(v15, "DOM `Node` value serialization failed: %s", v16);
label5:
return;
catch javax.xml.transform.TransformerConfigurationException from label1 to label2 with label3;
catch javax.xml.transform.TransformerException from label1 to label2 with label4;
}
public com.fasterxml.jackson.databind.JsonNode getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)
{
java.lang.reflect.Type v2;
com.fasterxml.jackson.databind.ext.DOMSerializer v0;
com.fasterxml.jackson.databind.SerializerProvider v1;
com.fasterxml.jackson.databind.node.ObjectNode v3;
v0 := @this: com.fasterxml.jackson.databind.ext.DOMSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.SerializerProvider;
v2 := @parameter1: java.lang.reflect.Type;
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.ext.DOMSerializer: com.fasterxml.jackson.databind.node.ObjectNode createSchemaNode(java.lang.String,boolean)>("string", 1);
return v3;
}
public void acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType) throws com.fasterxml.jackson.databind.JsonMappingException
{
com.fasterxml.jackson.databind.ext.DOMSerializer v0;
com.fasterxml.jackson.databind.JavaType v2;
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper v1;
v0 := @this: com.fasterxml.jackson.databind.ext.DOMSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
v2 := @parameter1: com.fasterxml.jackson.databind.JavaType;
if v1 == null goto label1;
interfaceinvoke v1.<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonAnyFormatVisitor expectAnyFormat(com.fasterxml.jackson.databind.JavaType)>(v2);
label1:
return;
}
private static void setTransformerFactoryAttribute(javax.xml.transform.TransformerFactory, java.lang.String, java.lang.Object)
{
java.io.PrintStream v4;
java.lang.Object v2;
java.lang.String v1, v5;
javax.xml.transform.TransformerFactory v0;
java.lang.Exception v3;
v0 := @parameter0: javax.xml.transform.TransformerFactory;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.Object;
label1:
virtualinvoke v0.<javax.xml.transform.TransformerFactory: void setAttribute(java.lang.String,java.lang.Object)>(v1, v2);
label2:
goto label4;
label3:
v3 := @caughtexception;
v4 = <java.lang.System: java.io.PrintStream err>;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("[DOMSerializer] Failed to set TransformerFactory attribute: \u0001");
virtualinvoke v4.<java.io.PrintStream: void println(java.lang.String)>(v5);
label4:
return;
catch java.lang.Exception from label1 to label2 with label3;
}
}