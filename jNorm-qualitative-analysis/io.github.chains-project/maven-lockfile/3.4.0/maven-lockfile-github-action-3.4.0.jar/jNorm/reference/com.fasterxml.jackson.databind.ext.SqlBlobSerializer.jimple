public class com.fasterxml.jackson.databind.ext.SqlBlobSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer
{
public void <init>()
{
com.fasterxml.jackson.databind.ext.SqlBlobSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ext.SqlBlobSerializer;
specialinvoke v0.<com.fasterxml.jackson.databind.ser.std.StdScalarSerializer: void <init>(java.lang.Class)>(class "Ljava/sql/Blob;");
return;
}
public boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider, java.sql.Blob)
{
com.fasterxml.jackson.databind.ext.SqlBlobSerializer v0;
com.fasterxml.jackson.databind.SerializerProvider v1;
java.sql.Blob v2;
boolean v3;
v0 := @this: com.fasterxml.jackson.databind.ext.SqlBlobSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.SerializerProvider;
v2 := @parameter1: java.sql.Blob;
if v2 != null goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public void serialize(java.sql.Blob, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider) throws java.io.IOException
{
com.fasterxml.jackson.databind.ext.SqlBlobSerializer v0;
com.fasterxml.jackson.core.JsonGenerator v2;
com.fasterxml.jackson.databind.SerializerProvider v3;
java.sql.Blob v1;
v0 := @this: com.fasterxml.jackson.databind.ext.SqlBlobSerializer;
v1 := @parameter0: java.sql.Blob;
v2 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;
v3 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;
virtualinvoke v0.<com.fasterxml.jackson.databind.ext.SqlBlobSerializer: void _writeValue(java.sql.Blob,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>(v1, v2, v3);
return;
}
public void serializeWithType(java.sql.Blob, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonGenerator v2;
com.fasterxml.jackson.databind.jsontype.TypeSerializer v4;
com.fasterxml.jackson.core.type.WritableTypeId v6, v7;
com.fasterxml.jackson.databind.ext.SqlBlobSerializer v0;
com.fasterxml.jackson.core.JsonToken v5;
com.fasterxml.jackson.databind.SerializerProvider v3;
java.sql.Blob v1;
v0 := @this: com.fasterxml.jackson.databind.ext.SqlBlobSerializer;
v1 := @parameter0: java.sql.Blob;
v2 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;
v3 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;
v4 := @parameter3: com.fasterxml.jackson.databind.jsontype.TypeSerializer;
v5 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_EMBEDDED_OBJECT>;
v6 = virtualinvoke v4.<com.fasterxml.jackson.databind.jsontype.TypeSerializer: com.fasterxml.jackson.core.type.WritableTypeId typeId(java.lang.Object,com.fasterxml.jackson.core.JsonToken)>(v1, v5);
v7 = virtualinvoke v4.<com.fasterxml.jackson.databind.jsontype.TypeSerializer: com.fasterxml.jackson.core.type.WritableTypeId writeTypePrefix(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.core.type.WritableTypeId)>(v2, v6);
virtualinvoke v0.<com.fasterxml.jackson.databind.ext.SqlBlobSerializer: void _writeValue(java.sql.Blob,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>(v1, v2, v3);
virtualinvoke v4.<com.fasterxml.jackson.databind.jsontype.TypeSerializer: com.fasterxml.jackson.core.type.WritableTypeId writeTypeSuffix(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.core.type.WritableTypeId)>(v2, v7);
return;
}
protected void _writeValue(java.sql.Blob, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider) throws java.io.IOException
{
java.lang.Object[] v6;
com.fasterxml.jackson.core.JsonGenerator v2;
com.fasterxml.jackson.databind.SerializationConfig v7;
com.fasterxml.jackson.core.Base64Variant v8;
java.sql.SQLException v5;
com.fasterxml.jackson.databind.ext.SqlBlobSerializer v0;
int v9;
com.fasterxml.jackson.databind.SerializerProvider v3;
java.sql.Blob v1;
java.io.InputStream v4;
v0 := @this: com.fasterxml.jackson.databind.ext.SqlBlobSerializer;
v1 := @parameter0: java.sql.Blob;
v2 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;
v3 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;
v4 = null;
label1:
v4 = interfaceinvoke v1.<java.sql.Blob: java.io.InputStream getBinaryStream()>();
label2:
goto label4;
label3:
v5 := @caughtexception;
v6 = newarray (java.lang.Object)[0];
virtualinvoke v3.<com.fasterxml.jackson.databind.SerializerProvider: void reportMappingProblem(java.lang.Throwable,java.lang.String,java.lang.Object[])>(v5, "Failed to access `java.sql.Blob` value to write as binary value", v6);
label4:
v7 = virtualinvoke v3.<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.SerializationConfig getConfig()>();
v8 = virtualinvoke v7.<com.fasterxml.jackson.databind.SerializationConfig: com.fasterxml.jackson.core.Base64Variant getBase64Variant()>();
v9 = (int) -1;
virtualinvoke v2.<com.fasterxml.jackson.core.JsonGenerator: int writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)>(v8, v4, v9);
return;
catch java.sql.SQLException from label1 to label2 with label3;
}
public void acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType) throws com.fasterxml.jackson.databind.JsonMappingException
{
com.fasterxml.jackson.databind.ext.SqlBlobSerializer v0;
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor v3;
com.fasterxml.jackson.databind.JavaType v2;
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes v4;
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper v1;
v0 := @this: com.fasterxml.jackson.databind.ext.SqlBlobSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
v2 := @parameter1: com.fasterxml.jackson.databind.JavaType;
v3 = interfaceinvoke v1.<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor expectArrayFormat(com.fasterxml.jackson.databind.JavaType)>(v2);
if v3 == null goto label1;
v4 = <com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes INTEGER>;
interfaceinvoke v3.<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor: void itemsFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes)>(v4);
label1:
return;
}
}