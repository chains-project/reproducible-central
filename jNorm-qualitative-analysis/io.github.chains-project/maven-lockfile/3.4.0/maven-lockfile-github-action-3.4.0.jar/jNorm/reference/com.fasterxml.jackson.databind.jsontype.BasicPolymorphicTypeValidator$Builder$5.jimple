class com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder$5 extends com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$NameMatcher
{
final java.util.regex.Pattern val$patternForSubType;
final com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder this$0;
void <init>(com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder, java.util.regex.Pattern)
{
java.util.regex.Pattern v2;
com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder v1;
com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder$5 v0;
v0 := @this: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder$5;
v1 := @parameter0: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder;
v2 := @parameter1: java.util.regex.Pattern;
v0.<com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder$5: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder this$0> = v1;
v0.<com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder$5: java.util.regex.Pattern val$patternForSubType> = v2;
specialinvoke v0.<com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$NameMatcher: void <init>()>();
return;
}
public boolean match(com.fasterxml.jackson.databind.cfg.MapperConfig, java.lang.String)
{
java.util.regex.Matcher v4;
com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder$5 v0;
com.fasterxml.jackson.databind.cfg.MapperConfig v1;
java.lang.String v2;
java.util.regex.Pattern v3;
boolean v5;
v0 := @this: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder$5;
v1 := @parameter0: com.fasterxml.jackson.databind.cfg.MapperConfig;
v2 := @parameter1: java.lang.String;
v3 = v0.<com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator$Builder$5: java.util.regex.Pattern val$patternForSubType>;
v4 = virtualinvoke v3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v2);
v5 = virtualinvoke v4.<java.util.regex.Matcher: boolean matches()>();
return v5;
}
}