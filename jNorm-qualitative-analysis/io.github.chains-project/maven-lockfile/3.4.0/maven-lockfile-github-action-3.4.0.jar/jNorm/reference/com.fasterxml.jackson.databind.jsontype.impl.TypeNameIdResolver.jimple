public class com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver extends com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase
{
protected final com.fasterxml.jackson.databind.cfg.MapperConfig _config;
protected final java.util.concurrent.ConcurrentHashMap _typeToId;
protected final java.util.Map _idToType;
protected final boolean _caseInsensitive;
protected void <init>(com.fasterxml.jackson.databind.cfg.MapperConfig, com.fasterxml.jackson.databind.JavaType, java.util.concurrent.ConcurrentHashMap, java.util.HashMap)
{
java.util.concurrent.ConcurrentHashMap v3;
java.util.HashMap v4;
com.fasterxml.jackson.databind.MapperFeature v6;
com.fasterxml.jackson.databind.type.TypeFactory v5;
com.fasterxml.jackson.databind.cfg.MapperConfig v1;
com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver v0;
com.fasterxml.jackson.databind.JavaType v2;
boolean v7;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
v1 := @parameter0: com.fasterxml.jackson.databind.cfg.MapperConfig;
v2 := @parameter1: com.fasterxml.jackson.databind.JavaType;
v3 := @parameter2: java.util.concurrent.ConcurrentHashMap;
v4 := @parameter3: java.util.HashMap;
v5 = virtualinvoke v1.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.type.TypeFactory getTypeFactory()>();
specialinvoke v0.<com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase: void <init>(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.type.TypeFactory)>(v2, v5);
v0.<com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver: com.fasterxml.jackson.databind.cfg.MapperConfig _config> = v1;
v0.<com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver: java.util.concurrent.ConcurrentHashMap _typeToId> = v3;
v0.<com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver: java.util.Map _idToType> = v4;
v6 = <com.fasterxml.jackson.databind.MapperFeature: com.fasterxml.jackson.databind.MapperFeature ACCEPT_CASE_INSENSITIVE_VALUES>;
v7 = virtualinvoke v1.<com.fasterxml.jackson.databind.cfg.MapperConfig: boolean isEnabled(com.fasterxml.jackson.databind.MapperFeature)>(v6);
v0.<com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver: boolean _caseInsensitive> = v7;
return;
}
public static com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver construct(com.fasterxml.jackson.databind.cfg.MapperConfig, com.fasterxml.jackson.databind.JavaType, java.util.Collection, boolean, boolean)
{
java.util.HashMap v8, v9;
com.fasterxml.jackson.databind.MapperFeature v11;
com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver v25;
com.fasterxml.jackson.databind.JavaType v1, v24;
java.lang.String v18, v19, v20;
boolean v12, v14, v17, v23, v3, v4;
java.util.Iterator v13;
java.util.Collection v2;
java.util.concurrent.ConcurrentHashMap v10, v6, v7;
java.lang.IllegalArgumentException v5;
com.fasterxml.jackson.databind.cfg.MapperConfig v0;
java.lang.Class v16, v22;
java.lang.Object v15, v21;
v0 := @parameter0: com.fasterxml.jackson.databind.cfg.MapperConfig;
v1 := @parameter1: com.fasterxml.jackson.databind.JavaType;
v2 := @parameter2: java.util.Collection;
v3 := @parameter3: boolean;
v4 := @parameter4: boolean;
if v3 != v4 goto label01;
v5 = new java.lang.IllegalArgumentException;
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>()>();
throw v5;
label01:
if v3 == 0 goto label02;
v6 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v6.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v7 = v6;
v8 = null;
goto label03;
label02:
v9 = new java.util.HashMap;
specialinvoke v9.<java.util.HashMap: void <init>()>();
v8 = v9;
v10 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v10.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(4);
v7 = v10;
label03:
v11 = <com.fasterxml.jackson.databind.MapperFeature: com.fasterxml.jackson.databind.MapperFeature ACCEPT_CASE_INSENSITIVE_VALUES>;
v12 = virtualinvoke v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: boolean isEnabled(com.fasterxml.jackson.databind.MapperFeature)>(v11);
if v2 == null goto label10;
v13 = interfaceinvoke v2.<java.util.Collection: java.util.Iterator iterator()>();
label04:
v14 = interfaceinvoke v13.<java.util.Iterator: boolean hasNext()>();
if v14 == 0 goto label10;
v15 = interfaceinvoke v13.<java.util.Iterator: java.lang.Object next()>();
v16 = virtualinvoke v15.<com.fasterxml.jackson.databind.jsontype.NamedType: java.lang.Class getType()>();
v17 = virtualinvoke v15.<com.fasterxml.jackson.databind.jsontype.NamedType: boolean hasName()>();
if v17 == 0 goto label05;
v18 = virtualinvoke v15.<com.fasterxml.jackson.databind.jsontype.NamedType: java.lang.String getName()>();
goto label06;
label05:
v18 = staticinvoke <com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver: java.lang.String _defaultTypeId(java.lang.Class)>(v16);
label06:
v19 = v18;
if v3 == 0 goto label07;
v20 = virtualinvoke v16.<java.lang.Class: java.lang.String getName()>();
virtualinvoke v7.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v20, v18);
label07:
if v4 == 0 goto label04;
if v12 == 0 goto label08;
v19 = virtualinvoke v19.<java.lang.String: java.lang.String toLowerCase()>();
label08:
v21 = virtualinvoke v8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(v19);
if v21 == null goto label09;
v22 = virtualinvoke v21.<com.fasterxml.jackson.databind.JavaType: java.lang.Class getRawClass()>();
v23 = virtualinvoke v16.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v22);
if v23 != 0 goto label04;
label09:
v24 = virtualinvoke v0.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.JavaType constructType(java.lang.Class)>(v16);
virtualinvoke v8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v19, v24);
goto label04;
label10:
v25 = new com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
specialinvoke v25.<com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver: void <init>(com.fasterxml.jackson.databind.cfg.MapperConfig,com.fasterxml.jackson.databind.JavaType,java.util.concurrent.ConcurrentHashMap,java.util.HashMap)>(v0, v1, v7, v8);
return v25;
}
public com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id getMechanism()
{
com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id v1;
com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver v0;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
v1 = <com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id: com.fasterxml.jackson.'annotation'.JsonTypeInfo$Id NAME>;
return v1;
}
public java.lang.String idFromValue(java.lang.Object)
{
com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver v0;
java.lang.Class v2;
java.lang.Object v1;
java.lang.String v3;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver: java.lang.String idFromClass(java.lang.Class)>(v2);
return v3;
}
protected java.lang.String idFromClass(java.lang.Class)
{
com.fasterxml.jackson.databind.AnnotationIntrospector v13;
com.fasterxml.jackson.databind.type.TypeFactory v5;
com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver v0;
com.fasterxml.jackson.databind.BeanDescription v11;
com.fasterxml.jackson.databind.JavaType v6;
java.lang.String v2;
boolean v9;
java.util.concurrent.ConcurrentHashMap v15, v3;
com.fasterxml.jackson.databind.introspect.AnnotatedClass v14;
com.fasterxml.jackson.databind.cfg.MapperConfig v10, v12, v8;
java.lang.Class v1, v7;
java.lang.Object v4;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
v1 := @parameter0: java.lang.Class;
if v1 != null goto label1;
return null;
label1:
v2 = virtualinvoke v1.<java.lang.Class: java.lang.String getName()>();
v3 = v0.<com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver: java.util.concurrent.ConcurrentHashMap _typeToId>;
v4 = virtualinvoke v3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(v2);
if v4 != null goto label4;
v5 = v0.<com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver: com.fasterxml.jackson.databind.type.TypeFactory _typeFactory>;
v6 = virtualinvoke v5.<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType constructType(java.lang.reflect.Type)>(v1);
v7 = virtualinvoke v6.<com.fasterxml.jackson.databind.JavaType: java.lang.Class getRawClass()>();
v8 = v0.<com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver: com.fasterxml.jackson.databind.cfg.MapperConfig _config>;
v9 = virtualinvoke v8.<com.fasterxml.jackson.databind.cfg.MapperConfig: boolean isAnnotationProcessingEnabled()>();
if v9 == 0 goto label2;
v10 = v0.<com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver: com.fasterxml.jackson.databind.cfg.MapperConfig _config>;
v11 = virtualinvoke v10.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.BeanDescription introspectClassAnnotations(java.lang.Class)>(v7);
v12 = v0.<com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver: com.fasterxml.jackson.databind.cfg.MapperConfig _config>;
v13 = virtualinvoke v12.<com.fasterxml.jackson.databind.cfg.MapperConfig: com.fasterxml.jackson.databind.AnnotationIntrospector getAnnotationIntrospector()>();
v14 = virtualinvoke v11.<com.fasterxml.jackson.databind.BeanDescription: com.fasterxml.jackson.databind.introspect.AnnotatedClass getClassInfo()>();
v4 = virtualinvoke v13.<com.fasterxml.jackson.databind.AnnotationIntrospector: java.lang.String findTypeName(com.fasterxml.jackson.databind.introspect.AnnotatedClass)>(v14);
label2:
if v4 != null goto label3;
v4 = staticinvoke <com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver: java.lang.String _defaultTypeId(java.lang.Class)>(v7);
label3:
v15 = v0.<com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver: java.util.concurrent.ConcurrentHashMap _typeToId>;
virtualinvoke v15.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v2, v4);
label4:
return v4;
}
public java.lang.String idFromValueAndType(java.lang.Object, java.lang.Class)
{
com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver v0;
java.lang.Class v2;
java.lang.Object v1;
java.lang.String v3, v4;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Class;
if v1 != null goto label1;
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver: java.lang.String idFromClass(java.lang.Class)>(v2);
return v3;
label1:
v4 = virtualinvoke v0.<com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver: java.lang.String idFromValue(java.lang.Object)>(v1);
return v4;
}
public com.fasterxml.jackson.databind.JavaType typeFromId(com.fasterxml.jackson.databind.DatabindContext, java.lang.String)
{
com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver v0;
com.fasterxml.jackson.databind.JavaType v3;
java.lang.String v2;
com.fasterxml.jackson.databind.DatabindContext v1;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
v1 := @parameter0: com.fasterxml.jackson.databind.DatabindContext;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver: com.fasterxml.jackson.databind.JavaType _typeFromId(java.lang.String)>(v2);
return v3;
}
protected com.fasterxml.jackson.databind.JavaType _typeFromId(java.lang.String)
{
java.util.Map v3;
com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver v0;
java.lang.Object v4;
java.lang.String v1;
boolean v2;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
v1 := @parameter0: java.lang.String;
v2 = v0.<com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver: boolean _caseInsensitive>;
if v2 == 0 goto label1;
v1 = virtualinvoke v1.<java.lang.String: java.lang.String toLowerCase()>();
label1:
v3 = v0.<com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver: java.util.Map _idToType>;
v4 = interfaceinvoke v3.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
return v4;
}
public java.lang.String getDescForKnownTypeIds()
{
java.util.Iterator v4;
java.util.Set v3;
java.util.TreeSet v1;
java.util.Map v2;
com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver v0;
java.lang.Object v6, v7, v9;
java.lang.String v10;
boolean v5, v8;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
v1 = new java.util.TreeSet;
specialinvoke v1.<java.util.TreeSet: void <init>()>();
v2 = v0.<com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver: java.util.Map _idToType>;
v3 = interfaceinvoke v2.<java.util.Map: java.util.Set entrySet()>();
v4 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = interfaceinvoke v6.<java.util.Map$Entry: java.lang.Object getValue()>();
v8 = virtualinvoke v7.<com.fasterxml.jackson.databind.JavaType: boolean isConcrete()>();
if v8 == 0 goto label1;
v9 = interfaceinvoke v6.<java.util.Map$Entry: java.lang.Object getKey()>();
virtualinvoke v1.<java.util.TreeSet: boolean add(java.lang.Object)>(v9);
goto label1;
label2:
v10 = virtualinvoke v1.<java.util.TreeSet: java.lang.String toString()>();
return v10;
}
public java.lang.String toString()
{
java.lang.Object[] v1;
java.util.Map v4;
com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver v0;
java.lang.Class v2;
java.lang.String v3, v5;
v0 := @this: com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
v1 = newarray (java.lang.Object)[2];
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v2.<java.lang.Class: java.lang.String getName()>();
v1[0] = v3;
v4 = v0.<com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver: java.util.Map _idToType>;
v1[1] = v4;
v5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("[%s; id-to-type=%s]", v1);
return v5;
}
protected static java.lang.String _defaultTypeId(java.lang.Class)
{
int v2, v4;
java.lang.Class v0;
java.lang.String v1, v3;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v2 = virtualinvoke v1.<java.lang.String: int lastIndexOf(int)>(46);
if v2 >= 0 goto label1;
v3 = v1;
goto label2;
label1:
v4 = v2 + 1;
v3 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int)>(v4);
label2:
return v3;
}
}