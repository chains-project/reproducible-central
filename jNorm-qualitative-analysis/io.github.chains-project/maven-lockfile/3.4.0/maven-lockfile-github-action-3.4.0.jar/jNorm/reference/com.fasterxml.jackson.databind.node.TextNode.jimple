public class com.fasterxml.jackson.databind.node.TextNode extends com.fasterxml.jackson.databind.node.ValueNode
{
private static final long serialVersionUID;
static final com.fasterxml.jackson.databind.node.TextNode EMPTY_STRING_NODE;
protected final java.lang.String _value;
public void <init>(java.lang.String)
{
java.lang.String v1;
com.fasterxml.jackson.databind.node.TextNode v0;
v0 := @this: com.fasterxml.jackson.databind.node.TextNode;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<com.fasterxml.jackson.databind.node.ValueNode: void <init>()>();
v0.<com.fasterxml.jackson.databind.node.TextNode: java.lang.String _value> = v1;
return;
}
public static com.fasterxml.jackson.databind.node.TextNode valueOf(java.lang.String)
{
java.lang.String v0;
com.fasterxml.jackson.databind.node.TextNode v2, v3;
boolean v1;
v0 := @parameter0: java.lang.String;
if v0 != null goto label1;
return null;
label1:
v1 = virtualinvoke v0.<java.lang.String: boolean isEmpty()>();
if v1 == 0 goto label2;
v2 = <com.fasterxml.jackson.databind.node.TextNode: com.fasterxml.jackson.databind.node.TextNode EMPTY_STRING_NODE>;
return v2;
label2:
v3 = new com.fasterxml.jackson.databind.node.TextNode;
specialinvoke v3.<com.fasterxml.jackson.databind.node.TextNode: void <init>(java.lang.String)>(v0);
return v3;
}
public com.fasterxml.jackson.databind.node.JsonNodeType getNodeType()
{
com.fasterxml.jackson.databind.node.TextNode v0;
com.fasterxml.jackson.databind.node.JsonNodeType v1;
v0 := @this: com.fasterxml.jackson.databind.node.TextNode;
v1 = <com.fasterxml.jackson.databind.node.JsonNodeType: com.fasterxml.jackson.databind.node.JsonNodeType STRING>;
return v1;
}
public com.fasterxml.jackson.core.JsonToken asToken()
{
com.fasterxml.jackson.core.JsonToken v1;
com.fasterxml.jackson.databind.node.TextNode v0;
v0 := @this: com.fasterxml.jackson.databind.node.TextNode;
v1 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
return v1;
}
public java.lang.String textValue()
{
java.lang.String v1;
com.fasterxml.jackson.databind.node.TextNode v0;
v0 := @this: com.fasterxml.jackson.databind.node.TextNode;
v1 = v0.<com.fasterxml.jackson.databind.node.TextNode: java.lang.String _value>;
return v1;
}
public byte[] getBinaryValue(com.fasterxml.jackson.core.Base64Variant) throws java.io.IOException
{
byte[] v16;
com.fasterxml.jackson.databind.exc.InvalidFormatException v15;
java.lang.Object[] v12;
int v10, v4, v5, v6, v7, v9;
java.lang.String v13, v14, v2, v3;
java.lang.IllegalArgumentException v11;
com.fasterxml.jackson.databind.node.TextNode v0;
com.fasterxml.jackson.core.Base64Variant v1;
com.fasterxml.jackson.core.util.ByteArrayBuilder v8;
v0 := @this: com.fasterxml.jackson.databind.node.TextNode;
v1 := @parameter0: com.fasterxml.jackson.core.Base64Variant;
v2 = v0.<com.fasterxml.jackson.databind.node.TextNode: java.lang.String _value>;
v3 = virtualinvoke v2.<java.lang.String: java.lang.String trim()>();
v4 = virtualinvoke v3.<java.lang.String: int length()>();
v5 = v4 >> 2;
v6 = v5 * 3;
v7 = 4 + v6;
v8 = new com.fasterxml.jackson.core.util.ByteArrayBuilder;
v9 = staticinvoke <java.lang.Math: int min(int,int)>(65536, v7);
v10 = staticinvoke <java.lang.Math: int max(int,int)>(16, v9);
specialinvoke v8.<com.fasterxml.jackson.core.util.ByteArrayBuilder: void <init>(int)>(v10);
label1:
virtualinvoke v1.<com.fasterxml.jackson.core.Base64Variant: void decode(java.lang.String,com.fasterxml.jackson.core.util.ByteArrayBuilder)>(v3, v8);
label2:
goto label4;
label3:
v11 := @caughtexception;
v12 = newarray (java.lang.Object)[1];
v13 = virtualinvoke v11.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();
v12[0] = v13;
v14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Cannot access contents of TextNode as binary due to broken Base64 encoding: %s", v12);
v15 = staticinvoke <com.fasterxml.jackson.databind.exc.InvalidFormatException: com.fasterxml.jackson.databind.exc.InvalidFormatException 'from'(com.fasterxml.jackson.core.JsonParser,java.lang.String,java.lang.Object,java.lang.Class)>(null, v14, v3, class "[B");
throw v15;
label4:
v16 = virtualinvoke v8.<com.fasterxml.jackson.core.util.ByteArrayBuilder: byte[] toByteArray()>();
return v16;
catch java.lang.IllegalArgumentException from label1 to label2 with label3;
}
public byte[] binaryValue() throws java.io.IOException
{
com.fasterxml.jackson.core.Base64Variant v1;
byte[] v2;
com.fasterxml.jackson.databind.node.TextNode v0;
v0 := @this: com.fasterxml.jackson.databind.node.TextNode;
v1 = staticinvoke <com.fasterxml.jackson.core.Base64Variants: com.fasterxml.jackson.core.Base64Variant getDefaultVariant()>();
v2 = virtualinvoke v0.<com.fasterxml.jackson.databind.node.TextNode: byte[] getBinaryValue(com.fasterxml.jackson.core.Base64Variant)>(v1);
return v2;
}
public java.lang.String asText()
{
java.lang.String v1;
com.fasterxml.jackson.databind.node.TextNode v0;
v0 := @this: com.fasterxml.jackson.databind.node.TextNode;
v1 = v0.<com.fasterxml.jackson.databind.node.TextNode: java.lang.String _value>;
return v1;
}
public java.lang.String asText(java.lang.String)
{
java.lang.String v1, v2, v3;
com.fasterxml.jackson.databind.node.TextNode v0;
v0 := @this: com.fasterxml.jackson.databind.node.TextNode;
v1 := @parameter0: java.lang.String;
v2 = v0.<com.fasterxml.jackson.databind.node.TextNode: java.lang.String _value>;
if v2 != null goto label1;
v3 = v1;
goto label2;
label1:
v3 = v0.<com.fasterxml.jackson.databind.node.TextNode: java.lang.String _value>;
label2:
return v3;
}
public boolean asBoolean(boolean)
{
com.fasterxml.jackson.databind.node.TextNode v0;
java.lang.String v2, v3, v4, v5, v7;
boolean v1, v6, v8;
v0 := @this: com.fasterxml.jackson.databind.node.TextNode;
v1 := @parameter0: boolean;
v2 = v0.<com.fasterxml.jackson.databind.node.TextNode: java.lang.String _value>;
if v2 == null goto label2;
v3 = v0.<com.fasterxml.jackson.databind.node.TextNode: java.lang.String _value>;
v4 = virtualinvoke v3.<java.lang.String: java.lang.String trim()>();
v5 = "true";
v6 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>(v4);
if v6 == 0 goto label1;
return 1;
label1:
v7 = "false";
v8 = virtualinvoke v7.<java.lang.String: boolean equals(java.lang.Object)>(v4);
if v8 == 0 goto label2;
return 0;
label2:
return v1;
}
public int asInt(int)
{
int v1, v3;
java.lang.String v2;
com.fasterxml.jackson.databind.node.TextNode v0;
v0 := @this: com.fasterxml.jackson.databind.node.TextNode;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.databind.node.TextNode: java.lang.String _value>;
v3 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: int parseAsInt(java.lang.String,int)>(v2, v1);
return v3;
}
public long asLong(long)
{
long v1, v3;
java.lang.String v2;
com.fasterxml.jackson.databind.node.TextNode v0;
v0 := @this: com.fasterxml.jackson.databind.node.TextNode;
v1 := @parameter0: long;
v2 = v0.<com.fasterxml.jackson.databind.node.TextNode: java.lang.String _value>;
v3 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: long parseAsLong(java.lang.String,long)>(v2, v1);
return v3;
}
public double asDouble(double)
{
java.lang.String v2;
com.fasterxml.jackson.databind.node.TextNode v0;
double v1, v3;
v0 := @this: com.fasterxml.jackson.databind.node.TextNode;
v1 := @parameter0: double;
v2 = v0.<com.fasterxml.jackson.databind.node.TextNode: java.lang.String _value>;
v3 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: double parseAsDouble(java.lang.String,double)>(v2, v1);
return v3;
}
public final void serialize(com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonGenerator v1;
com.fasterxml.jackson.databind.SerializerProvider v2;
java.lang.String v3, v4;
com.fasterxml.jackson.databind.node.TextNode v0;
v0 := @this: com.fasterxml.jackson.databind.node.TextNode;
v1 := @parameter0: com.fasterxml.jackson.core.JsonGenerator;
v2 := @parameter1: com.fasterxml.jackson.databind.SerializerProvider;
v3 = v0.<com.fasterxml.jackson.databind.node.TextNode: java.lang.String _value>;
if v3 != null goto label1;
virtualinvoke v1.<com.fasterxml.jackson.core.JsonGenerator: void writeNull()>();
goto label2;
label1:
v4 = v0.<com.fasterxml.jackson.databind.node.TextNode: java.lang.String _value>;
virtualinvoke v1.<com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>(v4);
label2:
return;
}
public boolean equals(java.lang.Object)
{
java.lang.Object v1;
java.lang.String v3, v4;
com.fasterxml.jackson.databind.node.TextNode v0;
boolean v2, v5;
v0 := @this: com.fasterxml.jackson.databind.node.TextNode;
v1 := @parameter0: java.lang.Object;
if v1 != v0 goto label1;
return 1;
label1:
if v1 != null goto label2;
return 0;
label2:
v2 = v1 instanceof com.fasterxml.jackson.databind.node.TextNode;
if v2 == 0 goto label3;
v3 = v1.<com.fasterxml.jackson.databind.node.TextNode: java.lang.String _value>;
v4 = v0.<com.fasterxml.jackson.databind.node.TextNode: java.lang.String _value>;
v5 = virtualinvoke v3.<java.lang.String: boolean equals(java.lang.Object)>(v4);
return v5;
label3:
return 0;
}
public int hashCode()
{
int v2;
java.lang.String v1;
com.fasterxml.jackson.databind.node.TextNode v0;
v0 := @this: com.fasterxml.jackson.databind.node.TextNode;
v1 = v0.<com.fasterxml.jackson.databind.node.TextNode: java.lang.String _value>;
v2 = virtualinvoke v1.<java.lang.String: int hashCode()>();
return v2;
}
protected static void appendQuoted(java.lang.StringBuilder, java.lang.String)
{
java.lang.StringBuilder v0;
java.lang.String v1;
v0 := @parameter0: java.lang.StringBuilder;
v1 := @parameter1: java.lang.String;
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);
staticinvoke <com.fasterxml.jackson.core.io.CharTypes: void appendQuoted(java.lang.StringBuilder,java.lang.String)>(v0, v1);
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);
return;
}
static void <clinit>()
{
com.fasterxml.jackson.databind.node.TextNode v0;
v0 = new com.fasterxml.jackson.databind.node.TextNode;
specialinvoke v0.<com.fasterxml.jackson.databind.node.TextNode: void <init>(java.lang.String)>("");
<com.fasterxml.jackson.databind.node.TextNode: com.fasterxml.jackson.databind.node.TextNode EMPTY_STRING_NODE> = v0;
return;
}
}