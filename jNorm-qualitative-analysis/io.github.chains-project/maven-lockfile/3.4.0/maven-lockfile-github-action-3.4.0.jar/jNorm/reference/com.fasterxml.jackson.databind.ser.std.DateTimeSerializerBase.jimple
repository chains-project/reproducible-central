public abstract class com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer implements com.fasterxml.jackson.databind.ser.ContextualSerializer
{
protected final java.lang.Boolean _useTimestamp;
protected final java.text.DateFormat _customFormat;
protected final java.util.concurrent.atomic.AtomicReference _reusedCustomFormat;
protected void <init>(java.lang.Class, java.lang.Boolean, java.text.DateFormat)
{
com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase v0;
java.lang.Boolean v2;
java.lang.Class v1;
java.util.concurrent.atomic.AtomicReference v4;
java.text.DateFormat v3;
v0 := @this: com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.Boolean;
v3 := @parameter2: java.text.DateFormat;
specialinvoke v0.<com.fasterxml.jackson.databind.ser.std.StdScalarSerializer: void <init>(java.lang.Class)>(v1);
v0.<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: java.lang.Boolean _useTimestamp> = v2;
v0.<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: java.text.DateFormat _customFormat> = v3;
if v3 != null goto label1;
v4 = null;
goto label2;
label1:
v4 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v4.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
label2:
v0.<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: java.util.concurrent.atomic.AtomicReference _reusedCustomFormat> = v4;
return;
}
public abstract com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase withFormat(java.lang.Boolean, java.text.DateFormat);
public com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty) throws com.fasterxml.jackson.databind.JsonMappingException
{
com.fasterxml.jackson.databind.SerializationConfig v22;
com.fasterxml.jackson.'annotation'.JsonFormat$Value v4;
java.util.Locale v11, v26, v39;
java.text.DateFormat v23;
boolean v10, v14, v18, v19, v21, v24, v25, v27, v31, v43, v44, v6, v9;
java.util.TimeZone v15, v28, v41, v42;
com.fasterxml.jackson.databind.BeanProperty v2;
com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase v0, v17, v30, v46, v8;
java.lang.Object[] v33;
java.text.SimpleDateFormat v12, v37;
com.fasterxml.jackson.'annotation'.JsonFormat$Shape v20, v5;
java.lang.Boolean v16, v29, v45, v7;
com.fasterxml.jackson.databind.SerializerProvider v1;
java.lang.String v13, v35, v36, v38;
java.lang.Class v3, v32, v34;
java.lang.Object v40;
v0 := @this: com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase;
v1 := @parameter0: com.fasterxml.jackson.databind.SerializerProvider;
v2 := @parameter1: com.fasterxml.jackson.databind.BeanProperty;
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: java.lang.Class handledType()>();
v4 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: com.fasterxml.jackson.'annotation'.JsonFormat$Value findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class)>(v1, v2, v3);
if v4 != null goto label01;
return v0;
label01:
v5 = virtualinvoke v4.<com.fasterxml.jackson.'annotation'.JsonFormat$Value: com.fasterxml.jackson.'annotation'.JsonFormat$Shape getShape()>();
v6 = virtualinvoke v5.<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: boolean isNumeric()>();
if v6 == 0 goto label02;
v7 = <java.lang.Boolean: java.lang.Boolean TRUE>;
v8 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase withFormat(java.lang.Boolean,java.text.DateFormat)>(v7, null);
return v8;
label02:
v9 = virtualinvoke v4.<com.fasterxml.jackson.'annotation'.JsonFormat$Value: boolean hasPattern()>();
if v9 == 0 goto label07;
v10 = virtualinvoke v4.<com.fasterxml.jackson.'annotation'.JsonFormat$Value: boolean hasLocale()>();
if v10 == 0 goto label03;
v11 = virtualinvoke v4.<com.fasterxml.jackson.'annotation'.JsonFormat$Value: java.util.Locale getLocale()>();
goto label04;
label03:
v11 = virtualinvoke v1.<com.fasterxml.jackson.databind.SerializerProvider: java.util.Locale getLocale()>();
label04:
v12 = new java.text.SimpleDateFormat;
v13 = virtualinvoke v4.<com.fasterxml.jackson.'annotation'.JsonFormat$Value: java.lang.String getPattern()>();
specialinvoke v12.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>(v13, v11);
v14 = virtualinvoke v4.<com.fasterxml.jackson.'annotation'.JsonFormat$Value: boolean hasTimeZone()>();
if v14 == 0 goto label05;
v15 = virtualinvoke v4.<com.fasterxml.jackson.'annotation'.JsonFormat$Value: java.util.TimeZone getTimeZone()>();
goto label06;
label05:
v15 = virtualinvoke v1.<com.fasterxml.jackson.databind.SerializerProvider: java.util.TimeZone getTimeZone()>();
label06:
virtualinvoke v12.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>(v15);
v16 = <java.lang.Boolean: java.lang.Boolean FALSE>;
v17 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase withFormat(java.lang.Boolean,java.text.DateFormat)>(v16, v12);
return v17;
label07:
v18 = virtualinvoke v4.<com.fasterxml.jackson.'annotation'.JsonFormat$Value: boolean hasLocale()>();
v19 = virtualinvoke v4.<com.fasterxml.jackson.'annotation'.JsonFormat$Value: boolean hasTimeZone()>();
v20 = <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.'annotation'.JsonFormat$Shape STRING>;
if v5 != v20 goto label08;
v21 = 1;
goto label09;
label08:
v21 = 0;
label09:
if v18 != 0 goto label10;
if v19 != 0 goto label10;
if v21 != 0 goto label10;
return v0;
label10:
v22 = virtualinvoke v1.<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.SerializationConfig getConfig()>();
v23 = virtualinvoke v22.<com.fasterxml.jackson.databind.SerializationConfig: java.text.DateFormat getDateFormat()>();
v24 = v23 instanceof com.fasterxml.jackson.databind.util.StdDateFormat;
if v24 == 0 goto label13;
v25 = virtualinvoke v4.<com.fasterxml.jackson.'annotation'.JsonFormat$Value: boolean hasLocale()>();
if v25 == 0 goto label11;
v26 = virtualinvoke v4.<com.fasterxml.jackson.'annotation'.JsonFormat$Value: java.util.Locale getLocale()>();
v23 = virtualinvoke v23.<com.fasterxml.jackson.databind.util.StdDateFormat: com.fasterxml.jackson.databind.util.StdDateFormat withLocale(java.util.Locale)>(v26);
label11:
v27 = virtualinvoke v4.<com.fasterxml.jackson.'annotation'.JsonFormat$Value: boolean hasTimeZone()>();
if v27 == 0 goto label12;
v28 = virtualinvoke v4.<com.fasterxml.jackson.'annotation'.JsonFormat$Value: java.util.TimeZone getTimeZone()>();
v23 = virtualinvoke v23.<com.fasterxml.jackson.databind.util.StdDateFormat: com.fasterxml.jackson.databind.util.StdDateFormat withTimeZone(java.util.TimeZone)>(v28);
label12:
v29 = <java.lang.Boolean: java.lang.Boolean FALSE>;
v30 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase withFormat(java.lang.Boolean,java.text.DateFormat)>(v29, v23);
return v30;
label13:
v31 = v23 instanceof java.text.SimpleDateFormat;
if v31 != 0 goto label14;
v32 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: java.lang.Class handledType()>();
v33 = newarray (java.lang.Object)[1];
v34 = virtualinvoke v23.<java.lang.Object: java.lang.Class getClass()>();
v35 = virtualinvoke v34.<java.lang.Class: java.lang.String getName()>();
v33[0] = v35;
v36 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`", v33);
virtualinvoke v1.<com.fasterxml.jackson.databind.SerializerProvider: java.lang.Object reportBadDefinition(java.lang.Class,java.lang.String)>(v32, v36);
label14:
if v18 == 0 goto label15;
v37 = new java.text.SimpleDateFormat;
v38 = virtualinvoke v23.<java.text.SimpleDateFormat: java.lang.String toPattern()>();
v39 = virtualinvoke v4.<com.fasterxml.jackson.'annotation'.JsonFormat$Value: java.util.Locale getLocale()>();
specialinvoke v37.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>(v38, v39);
goto label16;
label15:
v40 = virtualinvoke v23.<java.text.SimpleDateFormat: java.lang.Object clone()>();
label16:
v41 = virtualinvoke v4.<com.fasterxml.jackson.'annotation'.JsonFormat$Value: java.util.TimeZone getTimeZone()>();
if v41 == null goto label17;
v42 = virtualinvoke v40.<java.text.SimpleDateFormat: java.util.TimeZone getTimeZone()>();
v43 = virtualinvoke v41.<java.lang.Object: boolean equals(java.lang.Object)>(v42);
if v43 != 0 goto label17;
v44 = 1;
goto label18;
label17:
v44 = 0;
label18:
if v44 == 0 goto label19;
virtualinvoke v40.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>(v41);
label19:
v45 = <java.lang.Boolean: java.lang.Boolean FALSE>;
v46 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase withFormat(java.lang.Boolean,java.text.DateFormat)>(v45, v40);
return v46;
}
public boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Object)
{
java.lang.Object v2;
com.fasterxml.jackson.databind.SerializerProvider v1;
com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase;
v1 := @parameter0: com.fasterxml.jackson.databind.SerializerProvider;
v2 := @parameter1: java.lang.Object;
return 0;
}
protected abstract long _timestamp(java.lang.Object);
public com.fasterxml.jackson.databind.JsonNode getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)
{
com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase v0;
java.lang.reflect.Type v2;
com.fasterxml.jackson.databind.SerializerProvider v1;
java.lang.String v4;
com.fasterxml.jackson.databind.node.ObjectNode v5;
boolean v3;
v0 := @this: com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase;
v1 := @parameter0: com.fasterxml.jackson.databind.SerializerProvider;
v2 := @parameter1: java.lang.reflect.Type;
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: boolean _asTimestamp(com.fasterxml.jackson.databind.SerializerProvider)>(v1);
if v3 == 0 goto label1;
v4 = "number";
goto label2;
label1:
v4 = "string";
label2:
v5 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: com.fasterxml.jackson.databind.node.ObjectNode createSchemaNode(java.lang.String,boolean)>(v4, 1);
return v5;
}
public void acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType) throws com.fasterxml.jackson.databind.JsonMappingException
{
com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase v0;
com.fasterxml.jackson.databind.JavaType v2;
com.fasterxml.jackson.databind.SerializerProvider v3;
boolean v4;
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper v1;
v0 := @this: com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase;
v1 := @parameter0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
v2 := @parameter1: com.fasterxml.jackson.databind.JavaType;
v3 = interfaceinvoke v1.<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper: com.fasterxml.jackson.databind.SerializerProvider getProvider()>();
v4 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: boolean _asTimestamp(com.fasterxml.jackson.databind.SerializerProvider)>(v3);
virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: void _acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,boolean)>(v1, v2, v4);
return;
}
public abstract void serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider) throws java.io.IOException;
protected boolean _asTimestamp(com.fasterxml.jackson.databind.SerializerProvider)
{
java.lang.IllegalArgumentException v8;
com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase v0;
java.lang.Boolean v2, v3;
com.fasterxml.jackson.databind.SerializationFeature v6;
java.lang.Class v9;
com.fasterxml.jackson.databind.SerializerProvider v1;
java.lang.String v10, v11;
java.text.DateFormat v5;
boolean v4, v7;
v0 := @this: com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase;
v1 := @parameter0: com.fasterxml.jackson.databind.SerializerProvider;
v2 = v0.<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: java.lang.Boolean _useTimestamp>;
if v2 == null goto label1;
v3 = v0.<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: java.lang.Boolean _useTimestamp>;
v4 = virtualinvoke v3.<java.lang.Boolean: boolean booleanValue()>();
return v4;
label1:
v5 = v0.<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: java.text.DateFormat _customFormat>;
if v5 != null goto label3;
if v1 == null goto label2;
v6 = <com.fasterxml.jackson.databind.SerializationFeature: com.fasterxml.jackson.databind.SerializationFeature WRITE_DATES_AS_TIMESTAMPS>;
v7 = virtualinvoke v1.<com.fasterxml.jackson.databind.SerializerProvider: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>(v6);
return v7;
label2:
v8 = new java.lang.IllegalArgumentException;
v9 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: java.lang.Class handledType()>();
v10 = virtualinvoke v9.<java.lang.Class: java.lang.String getName()>();
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v10) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Null SerializerProvider passed for \u0001");
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v11);
throw v8;
label3:
return 0;
}
protected void _acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType, boolean) throws com.fasterxml.jackson.databind.JsonMappingException
{
com.fasterxml.jackson.core.JsonParser$NumberType v4;
com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase v0;
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat v5, v6;
com.fasterxml.jackson.databind.JavaType v2;
boolean v3;
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper v1;
v0 := @this: com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase;
v1 := @parameter0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
v2 := @parameter1: com.fasterxml.jackson.databind.JavaType;
v3 := @parameter2: boolean;
if v3 == 0 goto label1;
v4 = <com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType LONG>;
v5 = <com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat UTC_MILLISEC>;
virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: void visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser$NumberType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)>(v1, v2, v4, v5);
goto label2;
label1:
v6 = <com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat DATE_TIME>;
virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: void visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)>(v1, v2, v6);
label2:
return;
}
protected void _serializeAsString(java.util.Date, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonGenerator v2;
java.util.Date v1;
java.util.concurrent.atomic.AtomicReference v5, v9;
com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase v0;
java.lang.Object v6;
com.fasterxml.jackson.databind.SerializerProvider v3;
java.lang.String v8;
java.text.DateFormat v4, v7;
v0 := @this: com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase;
v1 := @parameter0: java.util.Date;
v2 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;
v3 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;
v4 = v0.<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: java.text.DateFormat _customFormat>;
if v4 != null goto label1;
virtualinvoke v3.<com.fasterxml.jackson.databind.SerializerProvider: void defaultSerializeDateValue(java.util.Date,com.fasterxml.jackson.core.JsonGenerator)>(v1, v2);
return;
label1:
v5 = v0.<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: java.util.concurrent.atomic.AtomicReference _reusedCustomFormat>;
v6 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(null);
if v6 != null goto label2;
v7 = v0.<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: java.text.DateFormat _customFormat>;
virtualinvoke v7.<java.text.DateFormat: java.lang.Object clone()>();
label2:
v8 = virtualinvoke v6.<java.text.DateFormat: java.lang.String format(java.util.Date)>(v1);
virtualinvoke v2.<com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>(v8);
v9 = v0.<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: java.util.concurrent.atomic.AtomicReference _reusedCustomFormat>;
virtualinvoke v9.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, v6);
return;
}
}