final class com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer extends com.fasterxml.jackson.databind.ser.std.ToStringSerializerBase
{
static final com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer BD_INSTANCE;
public void <init>()
{
com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer;
specialinvoke v0.<com.fasterxml.jackson.databind.ser.std.ToStringSerializerBase: void <init>(java.lang.Class)>(class "Ljava/math/BigDecimal;");
return;
}
public boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Object)
{
com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer v0;
java.lang.Object v2;
com.fasterxml.jackson.databind.SerializerProvider v1;
v0 := @this: com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.SerializerProvider;
v2 := @parameter1: java.lang.Object;
return 0;
}
public void serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider) throws java.io.IOException
{
java.lang.Object[] v13, v7;
com.fasterxml.jackson.core.JsonGenerator$Feature v4;
com.fasterxml.jackson.core.JsonGenerator v2;
com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer v0;
java.lang.Integer v10, v11, v9;
int v8;
java.lang.Object v1;
com.fasterxml.jackson.databind.SerializerProvider v3;
java.lang.String v12, v14;
boolean v5, v6;
v0 := @this: com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;
v3 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;
v4 = <com.fasterxml.jackson.core.JsonGenerator$Feature: com.fasterxml.jackson.core.JsonGenerator$Feature WRITE_BIGDECIMAL_AS_PLAIN>;
v5 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonGenerator: boolean isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature)>(v4);
if v5 == 0 goto label2;
v6 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: boolean _verifyBigDecimalRange(com.fasterxml.jackson.core.JsonGenerator,java.math.BigDecimal)>(v2, v1);
if v6 != 0 goto label1;
v7 = newarray (java.lang.Object)[3];
v8 = virtualinvoke v1.<java.math.BigDecimal: int scale()>();
v9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v8);
v7[0] = v9;
v10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9999);
v7[1] = v10;
v11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9999);
v7[2] = v11;
v12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Attempt to write plain `java.math.BigDecimal` (see JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN) with illegal scale (%d): needs to be between [-%d, %d]", v7);
v13 = newarray (java.lang.Object)[0];
virtualinvoke v3.<com.fasterxml.jackson.databind.SerializerProvider: void reportMappingProblem(java.lang.String,java.lang.Object[])>(v12, v13);
label1:
v14 = virtualinvoke v1.<java.math.BigDecimal: java.lang.String toPlainString()>();
goto label3;
label2:
v14 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
label3:
virtualinvoke v2.<com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>(v14);
return;
}
public java.lang.String valueToString(java.lang.Object)
{
java.lang.IllegalStateException v2;
com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer v0;
java.lang.Object v1;
v0 := @this: com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer;
v1 := @parameter0: java.lang.Object;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>()>();
throw v2;
}
protected boolean _verifyBigDecimalRange(com.fasterxml.jackson.core.JsonGenerator, java.math.BigDecimal) throws java.io.IOException
{
java.math.BigDecimal v2;
com.fasterxml.jackson.core.JsonGenerator v1;
int v3, v4;
com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer v0;
boolean v5;
v0 := @this: com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer;
v1 := @parameter0: com.fasterxml.jackson.core.JsonGenerator;
v2 := @parameter1: java.math.BigDecimal;
v3 = virtualinvoke v2.<java.math.BigDecimal: int scale()>();
v4 = (int) -9999;
if v3 < v4 goto label1;
if v3 > 9999 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
static void <clinit>()
{
com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer v0;
v0 = new com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer;
specialinvoke v0.<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: void <init>()>();
<com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer: com.fasterxml.jackson.databind.ser.std.NumberSerializer$BigDecimalAsStringSerializer BD_INSTANCE> = v0;
return;
}
}