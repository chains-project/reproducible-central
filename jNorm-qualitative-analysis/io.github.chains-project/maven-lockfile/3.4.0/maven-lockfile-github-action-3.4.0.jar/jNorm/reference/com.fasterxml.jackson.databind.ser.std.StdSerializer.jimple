public abstract class com.fasterxml.jackson.databind.ser.std.StdSerializer extends com.fasterxml.jackson.databind.JsonSerializer implements com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable, com.fasterxml.jackson.databind.jsonschema.SchemaAware, java.io.Serializable
{
private static final long serialVersionUID;
private static final java.lang.Object KEY_CONTENT_CONVERTER_LOCK;
protected final java.lang.Class _handledType;
protected void <init>(java.lang.Class)
{
java.lang.Class v1;
com.fasterxml.jackson.databind.ser.std.StdSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdSerializer;
v1 := @parameter0: java.lang.Class;
specialinvoke v0.<com.fasterxml.jackson.databind.JsonSerializer: void <init>()>();
v0.<com.fasterxml.jackson.databind.ser.std.StdSerializer: java.lang.Class _handledType> = v1;
return;
}
protected void <init>(com.fasterxml.jackson.databind.JavaType)
{
java.lang.Class v2;
com.fasterxml.jackson.databind.JavaType v1;
com.fasterxml.jackson.databind.ser.std.StdSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.JavaType;
specialinvoke v0.<com.fasterxml.jackson.databind.JsonSerializer: void <init>()>();
v2 = virtualinvoke v1.<com.fasterxml.jackson.databind.JavaType: java.lang.Class getRawClass()>();
v0.<com.fasterxml.jackson.databind.ser.std.StdSerializer: java.lang.Class _handledType> = v2;
return;
}
protected void <init>(java.lang.Class, boolean)
{
java.lang.Class v1;
boolean v2;
com.fasterxml.jackson.databind.ser.std.StdSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdSerializer;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: boolean;
specialinvoke v0.<com.fasterxml.jackson.databind.JsonSerializer: void <init>()>();
v0.<com.fasterxml.jackson.databind.ser.std.StdSerializer: java.lang.Class _handledType> = v1;
return;
}
protected void <init>(com.fasterxml.jackson.databind.ser.std.StdSerializer)
{
java.lang.Class v2;
com.fasterxml.jackson.databind.ser.std.StdSerializer v0, v1;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.ser.std.StdSerializer;
specialinvoke v0.<com.fasterxml.jackson.databind.JsonSerializer: void <init>()>();
v2 = v1.<com.fasterxml.jackson.databind.ser.std.StdSerializer: java.lang.Class _handledType>;
v0.<com.fasterxml.jackson.databind.ser.std.StdSerializer: java.lang.Class _handledType> = v2;
return;
}
public java.lang.Class handledType()
{
java.lang.Class v1;
com.fasterxml.jackson.databind.ser.std.StdSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdSerializer;
v1 = v0.<com.fasterxml.jackson.databind.ser.std.StdSerializer: java.lang.Class _handledType>;
return v1;
}
public abstract void serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider) throws java.io.IOException;
public void acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType) throws com.fasterxml.jackson.databind.JsonMappingException
{
com.fasterxml.jackson.databind.JavaType v2;
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper v1;
com.fasterxml.jackson.databind.ser.std.StdSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
v2 := @parameter1: com.fasterxml.jackson.databind.JavaType;
interfaceinvoke v1.<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonAnyFormatVisitor expectAnyFormat(com.fasterxml.jackson.databind.JavaType)>(v2);
return;
}
public com.fasterxml.jackson.databind.JsonNode getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type) throws com.fasterxml.jackson.databind.JsonMappingException
{
java.lang.reflect.Type v2;
com.fasterxml.jackson.databind.SerializerProvider v1;
com.fasterxml.jackson.databind.node.ObjectNode v3;
com.fasterxml.jackson.databind.ser.std.StdSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.SerializerProvider;
v2 := @parameter1: java.lang.reflect.Type;
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.StdSerializer: com.fasterxml.jackson.databind.node.ObjectNode createSchemaNode(java.lang.String)>("string");
return v3;
}
public com.fasterxml.jackson.databind.JsonNode getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type, boolean) throws com.fasterxml.jackson.databind.JsonMappingException
{
java.lang.reflect.Type v2;
com.fasterxml.jackson.databind.JsonNode v4;
com.fasterxml.jackson.databind.SerializerProvider v1;
boolean v3, v5;
com.fasterxml.jackson.databind.ser.std.StdSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.SerializerProvider;
v2 := @parameter1: java.lang.reflect.Type;
v3 := @parameter2: boolean;
v4 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.StdSerializer: com.fasterxml.jackson.databind.JsonNode getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)>(v1, v2);
if v3 != 0 goto label3;
if v3 != 0 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
virtualinvoke v4.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.node.ObjectNode put(java.lang.String,boolean)>("required", v5);
label3:
return v4;
}
protected com.fasterxml.jackson.databind.node.ObjectNode createSchemaNode(java.lang.String)
{
com.fasterxml.jackson.databind.node.JsonNodeFactory v2;
java.lang.String v1;
com.fasterxml.jackson.databind.node.ObjectNode v3;
com.fasterxml.jackson.databind.ser.std.StdSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdSerializer;
v1 := @parameter0: java.lang.String;
v2 = <com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.JsonNodeFactory instance>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>();
virtualinvoke v3.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.node.ObjectNode put(java.lang.String,java.lang.String)>("type", v1);
return v3;
}
protected com.fasterxml.jackson.databind.node.ObjectNode createSchemaNode(java.lang.String, boolean)
{
java.lang.String v1;
com.fasterxml.jackson.databind.node.ObjectNode v3;
boolean v2, v4;
com.fasterxml.jackson.databind.ser.std.StdSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdSerializer;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.StdSerializer: com.fasterxml.jackson.databind.node.ObjectNode createSchemaNode(java.lang.String)>(v1);
if v2 != 0 goto label3;
if v2 != 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
virtualinvoke v3.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.node.ObjectNode put(java.lang.String,boolean)>("required", v4);
label3:
return v3;
}
protected void visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType) throws com.fasterxml.jackson.databind.JsonMappingException
{
com.fasterxml.jackson.databind.JavaType v2;
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper v1;
com.fasterxml.jackson.databind.ser.std.StdSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
v2 := @parameter1: com.fasterxml.jackson.databind.JavaType;
interfaceinvoke v1.<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor expectStringFormat(com.fasterxml.jackson.databind.JavaType)>(v2);
return;
}
protected void visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat) throws com.fasterxml.jackson.databind.JsonMappingException
{
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor v4;
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat v3;
com.fasterxml.jackson.databind.JavaType v2;
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper v1;
com.fasterxml.jackson.databind.ser.std.StdSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
v2 := @parameter1: com.fasterxml.jackson.databind.JavaType;
v3 := @parameter2: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;
v4 = interfaceinvoke v1.<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor expectStringFormat(com.fasterxml.jackson.databind.JavaType)>(v2);
if v4 == null goto label1;
interfaceinvoke v4.<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor: void format(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)>(v3);
label1:
return;
}
protected void visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.core.JsonParser$NumberType) throws com.fasterxml.jackson.databind.JsonMappingException
{
com.fasterxml.jackson.core.JsonParser$NumberType v3;
com.fasterxml.jackson.databind.JavaType v2;
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor v4;
boolean v5;
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper v1;
com.fasterxml.jackson.databind.ser.std.StdSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
v2 := @parameter1: com.fasterxml.jackson.databind.JavaType;
v3 := @parameter2: com.fasterxml.jackson.core.JsonParser$NumberType;
v4 = interfaceinvoke v1.<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor expectIntegerFormat(com.fasterxml.jackson.databind.JavaType)>(v2);
v5 = staticinvoke <com.fasterxml.jackson.databind.ser.std.StdSerializer: boolean _neitherNull(java.lang.Object,java.lang.Object)>(v4, v3);
if v5 == 0 goto label1;
interfaceinvoke v4.<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor: void numberType(com.fasterxml.jackson.core.JsonParser$NumberType)>(v3);
label1:
return;
}
protected void visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.core.JsonParser$NumberType, com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat) throws com.fasterxml.jackson.databind.JsonMappingException
{
com.fasterxml.jackson.core.JsonParser$NumberType v3;
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat v4;
com.fasterxml.jackson.databind.JavaType v2;
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor v5;
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper v1;
com.fasterxml.jackson.databind.ser.std.StdSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
v2 := @parameter1: com.fasterxml.jackson.databind.JavaType;
v3 := @parameter2: com.fasterxml.jackson.core.JsonParser$NumberType;
v4 := @parameter3: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;
v5 = interfaceinvoke v1.<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor expectIntegerFormat(com.fasterxml.jackson.databind.JavaType)>(v2);
if v5 == null goto label2;
if v3 == null goto label1;
interfaceinvoke v5.<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor: void numberType(com.fasterxml.jackson.core.JsonParser$NumberType)>(v3);
label1:
if v4 == null goto label2;
interfaceinvoke v5.<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor: void format(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)>(v4);
label2:
return;
}
protected void visitFloatFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.core.JsonParser$NumberType) throws com.fasterxml.jackson.databind.JsonMappingException
{
com.fasterxml.jackson.core.JsonParser$NumberType v3;
com.fasterxml.jackson.databind.JavaType v2;
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNumberFormatVisitor v4;
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper v1;
com.fasterxml.jackson.databind.ser.std.StdSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
v2 := @parameter1: com.fasterxml.jackson.databind.JavaType;
v3 := @parameter2: com.fasterxml.jackson.core.JsonParser$NumberType;
v4 = interfaceinvoke v1.<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNumberFormatVisitor expectNumberFormat(com.fasterxml.jackson.databind.JavaType)>(v2);
if v4 == null goto label1;
interfaceinvoke v4.<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNumberFormatVisitor: void numberType(com.fasterxml.jackson.core.JsonParser$NumberType)>(v3);
label1:
return;
}
protected void visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer, com.fasterxml.jackson.databind.JavaType) throws com.fasterxml.jackson.databind.JsonMappingException
{
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor v5;
com.fasterxml.jackson.databind.JsonSerializer v3;
com.fasterxml.jackson.databind.JavaType v2, v4;
boolean v6;
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper v1;
com.fasterxml.jackson.databind.ser.std.StdSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
v2 := @parameter1: com.fasterxml.jackson.databind.JavaType;
v3 := @parameter2: com.fasterxml.jackson.databind.JsonSerializer;
v4 := @parameter3: com.fasterxml.jackson.databind.JavaType;
v5 = interfaceinvoke v1.<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor expectArrayFormat(com.fasterxml.jackson.databind.JavaType)>(v2);
v6 = staticinvoke <com.fasterxml.jackson.databind.ser.std.StdSerializer: boolean _neitherNull(java.lang.Object,java.lang.Object)>(v5, v3);
if v6 == 0 goto label1;
interfaceinvoke v5.<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor: void itemsFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable,com.fasterxml.jackson.databind.JavaType)>(v3, v4);
label1:
return;
}
protected void visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes) throws com.fasterxml.jackson.databind.JsonMappingException
{
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor v4;
com.fasterxml.jackson.databind.JavaType v2;
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes v3;
com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper v1;
com.fasterxml.jackson.databind.ser.std.StdSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
v2 := @parameter1: com.fasterxml.jackson.databind.JavaType;
v3 := @parameter2: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;
v4 = interfaceinvoke v1.<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor expectArrayFormat(com.fasterxml.jackson.databind.JavaType)>(v2);
if v4 == null goto label1;
interfaceinvoke v4.<com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor: void itemsFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes)>(v3);
label1:
return;
}
public void wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Throwable, java.lang.Object, java.lang.String) throws java.io.IOException
{
java.lang.Throwable v2, v6;
com.fasterxml.jackson.databind.SerializationFeature v7;
java.lang.Object v3;
com.fasterxml.jackson.databind.JsonMappingException v12;
com.fasterxml.jackson.databind.SerializerProvider v1;
java.lang.String v4;
boolean v10, v11, v5, v8, v9;
com.fasterxml.jackson.databind.ser.std.StdSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.SerializerProvider;
v2 := @parameter1: java.lang.Throwable;
v3 := @parameter2: java.lang.Object;
v4 := @parameter3: java.lang.String;
label1:
v5 = v2 instanceof java.lang.reflect.InvocationTargetException;
if v5 == 0 goto label2;
v6 = virtualinvoke v2.<java.lang.Throwable: java.lang.Throwable getCause()>();
if v6 == null goto label2;
v2 = virtualinvoke v2.<java.lang.Throwable: java.lang.Throwable getCause()>();
goto label1;
label2:
staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable throwIfError(java.lang.Throwable)>(v2);
if v1 == null goto label3;
v7 = <com.fasterxml.jackson.databind.SerializationFeature: com.fasterxml.jackson.databind.SerializationFeature WRAP_EXCEPTIONS>;
v8 = virtualinvoke v1.<com.fasterxml.jackson.databind.SerializerProvider: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>(v7);
if v8 == 0 goto label4;
label3:
v9 = 1;
goto label5;
label4:
v9 = 0;
label5:
v10 = v2 instanceof java.io.IOException;
if v10 == 0 goto label7;
if v9 == 0 goto label6;
v11 = v2 instanceof com.fasterxml.jackson.core.JacksonException;
if v11 != 0 goto label8;
label6:
throw v2;
label7:
if v9 != 0 goto label8;
staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable throwIfRTE(java.lang.Throwable)>(v2);
label8:
v12 = staticinvoke <com.fasterxml.jackson.databind.JsonMappingException: com.fasterxml.jackson.databind.JsonMappingException wrapWithPath(java.lang.Throwable,java.lang.Object,java.lang.String)>(v2, v3, v4);
throw v12;
}
public void wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Throwable, java.lang.Object, int) throws java.io.IOException
{
java.lang.Throwable v2, v6;
int v4;
com.fasterxml.jackson.databind.SerializationFeature v7;
java.lang.Object v3;
com.fasterxml.jackson.databind.JsonMappingException v12;
com.fasterxml.jackson.databind.SerializerProvider v1;
boolean v10, v11, v5, v8, v9;
com.fasterxml.jackson.databind.ser.std.StdSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.SerializerProvider;
v2 := @parameter1: java.lang.Throwable;
v3 := @parameter2: java.lang.Object;
v4 := @parameter3: int;
label1:
v5 = v2 instanceof java.lang.reflect.InvocationTargetException;
if v5 == 0 goto label2;
v6 = virtualinvoke v2.<java.lang.Throwable: java.lang.Throwable getCause()>();
if v6 == null goto label2;
v2 = virtualinvoke v2.<java.lang.Throwable: java.lang.Throwable getCause()>();
goto label1;
label2:
staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable throwIfError(java.lang.Throwable)>(v2);
if v1 == null goto label3;
v7 = <com.fasterxml.jackson.databind.SerializationFeature: com.fasterxml.jackson.databind.SerializationFeature WRAP_EXCEPTIONS>;
v8 = virtualinvoke v1.<com.fasterxml.jackson.databind.SerializerProvider: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>(v7);
if v8 == 0 goto label4;
label3:
v9 = 1;
goto label5;
label4:
v9 = 0;
label5:
v10 = v2 instanceof java.io.IOException;
if v10 == 0 goto label7;
if v9 == 0 goto label6;
v11 = v2 instanceof com.fasterxml.jackson.core.JacksonException;
if v11 != 0 goto label8;
label6:
throw v2;
label7:
if v9 != 0 goto label8;
staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable throwIfRTE(java.lang.Throwable)>(v2);
label8:
v12 = staticinvoke <com.fasterxml.jackson.databind.JsonMappingException: com.fasterxml.jackson.databind.JsonMappingException wrapWithPath(java.lang.Throwable,java.lang.Object,int)>(v2, v3, v4);
throw v12;
}
protected com.fasterxml.jackson.databind.JsonSerializer findContextualConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty, com.fasterxml.jackson.databind.JsonSerializer) throws com.fasterxml.jackson.databind.JsonMappingException
{
java.lang.Throwable v12;
java.util.IdentityHashMap v7;
com.fasterxml.jackson.databind.BeanProperty v2;
com.fasterxml.jackson.databind.JsonSerializer v10, v11, v3;
java.lang.Boolean v9;
java.lang.Object v4, v5, v6, v8;
com.fasterxml.jackson.databind.SerializerProvider v1;
com.fasterxml.jackson.databind.ser.std.StdSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.SerializerProvider;
v2 := @parameter1: com.fasterxml.jackson.databind.BeanProperty;
v3 := @parameter2: com.fasterxml.jackson.databind.JsonSerializer;
v4 = <com.fasterxml.jackson.databind.ser.std.StdSerializer: java.lang.Object KEY_CONTENT_CONVERTER_LOCK>;
v5 = virtualinvoke v1.<com.fasterxml.jackson.databind.SerializerProvider: java.lang.Object getAttribute(java.lang.Object)>(v4);
if v5 == null goto label1;
v6 = interfaceinvoke v5.<java.util.Map: java.lang.Object get(java.lang.Object)>(v2);
if v6 == null goto label2;
return v3;
label1:
v7 = new java.util.IdentityHashMap;
specialinvoke v7.<java.util.IdentityHashMap: void <init>()>();
v5 = v7;
v8 = <com.fasterxml.jackson.databind.ser.std.StdSerializer: java.lang.Object KEY_CONTENT_CONVERTER_LOCK>;
virtualinvoke v1.<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.SerializerProvider setAttribute(java.lang.Object,java.lang.Object)>(v8, v7);
label2:
v9 = <java.lang.Boolean: java.lang.Boolean TRUE>;
interfaceinvoke v5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v2, v9);
label3:
v10 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.StdSerializer: com.fasterxml.jackson.databind.JsonSerializer findConvertingContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer)>(v1, v2, v3);
if v10 == null goto label5;
v11 = virtualinvoke v1.<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer handleSecondaryContextualization(com.fasterxml.jackson.databind.JsonSerializer,com.fasterxml.jackson.databind.BeanProperty)>(v10, v2);
label4:
interfaceinvoke v5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v2);
return v11;
label5:
interfaceinvoke v5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v2);
goto label7;
label6:
v12 := @caughtexception;
interfaceinvoke v5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v2);
throw v12;
label7:
return v3;
catch java.lang.Throwable from label3 to label4 with label6;
}
protected com.fasterxml.jackson.databind.JsonSerializer findConvertingContentSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty, com.fasterxml.jackson.databind.JsonSerializer) throws com.fasterxml.jackson.databind.JsonMappingException
{
com.fasterxml.jackson.databind.util.Converter v9;
com.fasterxml.jackson.databind.AnnotationIntrospector v4;
com.fasterxml.jackson.databind.BeanProperty v2;
com.fasterxml.jackson.databind.type.TypeFactory v10;
com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer v13;
com.fasterxml.jackson.databind.introspect.AnnotatedMember v6, v8;
com.fasterxml.jackson.databind.JsonSerializer v3;
java.lang.Object v7;
com.fasterxml.jackson.databind.JavaType v11;
com.fasterxml.jackson.databind.SerializerProvider v1;
boolean v12, v5;
com.fasterxml.jackson.databind.ser.std.StdSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.SerializerProvider;
v2 := @parameter1: com.fasterxml.jackson.databind.BeanProperty;
v3 := @parameter2: com.fasterxml.jackson.databind.JsonSerializer;
v4 = virtualinvoke v1.<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.AnnotationIntrospector getAnnotationIntrospector()>();
v5 = staticinvoke <com.fasterxml.jackson.databind.ser.std.StdSerializer: boolean _neitherNull(java.lang.Object,java.lang.Object)>(v4, v2);
if v5 == 0 goto label2;
v6 = interfaceinvoke v2.<com.fasterxml.jackson.databind.BeanProperty: com.fasterxml.jackson.databind.introspect.AnnotatedMember getMember()>();
if v6 == null goto label2;
v7 = virtualinvoke v4.<com.fasterxml.jackson.databind.AnnotationIntrospector: java.lang.Object findSerializationContentConverter(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>(v6);
if v7 == null goto label2;
v8 = interfaceinvoke v2.<com.fasterxml.jackson.databind.BeanProperty: com.fasterxml.jackson.databind.introspect.AnnotatedMember getMember()>();
v9 = virtualinvoke v1.<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.util.Converter converterInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)>(v8, v7);
v10 = virtualinvoke v1.<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.type.TypeFactory getTypeFactory()>();
v11 = interfaceinvoke v9.<com.fasterxml.jackson.databind.util.Converter: com.fasterxml.jackson.databind.JavaType getOutputType(com.fasterxml.jackson.databind.type.TypeFactory)>(v10);
if v3 != null goto label1;
v12 = virtualinvoke v11.<com.fasterxml.jackson.databind.JavaType: boolean isJavaLangObject()>();
if v12 != 0 goto label1;
v3 = virtualinvoke v1.<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer findValueSerializer(com.fasterxml.jackson.databind.JavaType)>(v11);
label1:
v13 = new com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer;
specialinvoke v13.<com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer: void <init>(com.fasterxml.jackson.databind.util.Converter,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer)>(v9, v11, v3);
return v13;
label2:
return v3;
}
protected com.fasterxml.jackson.databind.ser.PropertyFilter findPropertyFilter(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Object, java.lang.Object) throws com.fasterxml.jackson.databind.JsonMappingException
{
com.fasterxml.jackson.databind.ser.FilterProvider v4;
com.fasterxml.jackson.databind.ser.PropertyFilter v8;
java.lang.Class v5;
java.lang.Object v2, v3, v7;
com.fasterxml.jackson.databind.SerializerProvider v1;
java.lang.String v6;
com.fasterxml.jackson.databind.ser.std.StdSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.SerializerProvider;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.lang.Object;
v4 = virtualinvoke v1.<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.ser.FilterProvider getFilterProvider()>();
if v4 != null goto label1;
v5 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.StdSerializer: java.lang.Class handledType()>();
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot resolve PropertyFilter with id \'\u0001\'; no FilterProvider configured");
v7 = virtualinvoke v1.<com.fasterxml.jackson.databind.SerializerProvider: java.lang.Object reportBadDefinition(java.lang.Class,java.lang.String)>(v5, v6);
return v7;
label1:
v8 = virtualinvoke v4.<com.fasterxml.jackson.databind.ser.FilterProvider: com.fasterxml.jackson.databind.ser.PropertyFilter findPropertyFilter(java.lang.Object,java.lang.Object)>(v2, v3);
return v8;
}
protected com.fasterxml.jackson.'annotation'.JsonFormat$Value findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty, java.lang.Class)
{
com.fasterxml.jackson.databind.BeanProperty v2;
com.fasterxml.jackson.databind.SerializationConfig v4;
java.lang.Class v3;
com.fasterxml.jackson.databind.SerializerProvider v1;
com.fasterxml.jackson.'annotation'.JsonFormat$Value v5, v6;
com.fasterxml.jackson.databind.ser.std.StdSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.SerializerProvider;
v2 := @parameter1: com.fasterxml.jackson.databind.BeanProperty;
v3 := @parameter2: java.lang.Class;
if v2 == null goto label1;
v4 = virtualinvoke v1.<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.SerializationConfig getConfig()>();
v5 = interfaceinvoke v2.<com.fasterxml.jackson.databind.BeanProperty: com.fasterxml.jackson.'annotation'.JsonFormat$Value findPropertyFormat(com.fasterxml.jackson.databind.cfg.MapperConfig,java.lang.Class)>(v4, v3);
return v5;
label1:
v6 = virtualinvoke v1.<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.'annotation'.JsonFormat$Value getDefaultPropertyFormat(java.lang.Class)>(v3);
return v6;
}
protected java.lang.Boolean findFormatFeature(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty, java.lang.Class, com.fasterxml.jackson.'annotation'.JsonFormat$Feature)
{
com.fasterxml.jackson.'annotation'.JsonFormat$Feature v4;
com.fasterxml.jackson.databind.BeanProperty v2;
java.lang.Boolean v6;
java.lang.Class v3;
com.fasterxml.jackson.databind.SerializerProvider v1;
com.fasterxml.jackson.'annotation'.JsonFormat$Value v5;
com.fasterxml.jackson.databind.ser.std.StdSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.SerializerProvider;
v2 := @parameter1: com.fasterxml.jackson.databind.BeanProperty;
v3 := @parameter2: java.lang.Class;
v4 := @parameter3: com.fasterxml.jackson.'annotation'.JsonFormat$Feature;
v5 = virtualinvoke v0.<com.fasterxml.jackson.databind.ser.std.StdSerializer: com.fasterxml.jackson.'annotation'.JsonFormat$Value findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class)>(v1, v2, v3);
if v5 == null goto label1;
v6 = virtualinvoke v5.<com.fasterxml.jackson.'annotation'.JsonFormat$Value: java.lang.Boolean getFeature(com.fasterxml.jackson.'annotation'.JsonFormat$Feature)>(v4);
return v6;
label1:
return null;
}
protected com.fasterxml.jackson.'annotation'.JsonInclude$Value findIncludeOverrides(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty, java.lang.Class)
{
com.fasterxml.jackson.'annotation'.JsonInclude$Value v5, v6;
com.fasterxml.jackson.databind.BeanProperty v2;
com.fasterxml.jackson.databind.SerializationConfig v4;
java.lang.Class v3;
com.fasterxml.jackson.databind.SerializerProvider v1;
com.fasterxml.jackson.databind.ser.std.StdSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.SerializerProvider;
v2 := @parameter1: com.fasterxml.jackson.databind.BeanProperty;
v3 := @parameter2: java.lang.Class;
if v2 == null goto label1;
v4 = virtualinvoke v1.<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.SerializationConfig getConfig()>();
v5 = interfaceinvoke v2.<com.fasterxml.jackson.databind.BeanProperty: com.fasterxml.jackson.'annotation'.JsonInclude$Value findPropertyInclusion(com.fasterxml.jackson.databind.cfg.MapperConfig,java.lang.Class)>(v4, v3);
return v5;
label1:
v6 = virtualinvoke v1.<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.'annotation'.JsonInclude$Value getDefaultPropertyInclusion(java.lang.Class)>(v3);
return v6;
}
protected com.fasterxml.jackson.databind.JsonSerializer findAnnotatedContentSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty) throws com.fasterxml.jackson.databind.JsonMappingException
{
com.fasterxml.jackson.databind.AnnotationIntrospector v4;
com.fasterxml.jackson.databind.BeanProperty v2;
com.fasterxml.jackson.databind.introspect.AnnotatedMember v3;
com.fasterxml.jackson.databind.JsonSerializer v6;
java.lang.Object v5;
com.fasterxml.jackson.databind.SerializerProvider v1;
com.fasterxml.jackson.databind.ser.std.StdSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.SerializerProvider;
v2 := @parameter1: com.fasterxml.jackson.databind.BeanProperty;
if v2 == null goto label1;
v3 = interfaceinvoke v2.<com.fasterxml.jackson.databind.BeanProperty: com.fasterxml.jackson.databind.introspect.AnnotatedMember getMember()>();
v4 = virtualinvoke v1.<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.AnnotationIntrospector getAnnotationIntrospector()>();
if v3 == null goto label1;
v5 = virtualinvoke v4.<com.fasterxml.jackson.databind.AnnotationIntrospector: java.lang.Object findContentSerializer(com.fasterxml.jackson.databind.introspect.Annotated)>(v3);
if v5 == null goto label1;
v6 = virtualinvoke v1.<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer serializerInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)>(v3, v5);
return v6;
label1:
return null;
}
protected boolean isDefaultSerializer(com.fasterxml.jackson.databind.JsonSerializer)
{
com.fasterxml.jackson.databind.JsonSerializer v1;
boolean v2;
com.fasterxml.jackson.databind.ser.std.StdSerializer v0;
v0 := @this: com.fasterxml.jackson.databind.ser.std.StdSerializer;
v1 := @parameter0: com.fasterxml.jackson.databind.JsonSerializer;
v2 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: boolean isJacksonStdImpl(java.lang.Object)>(v1);
return v2;
}
protected static final boolean _neitherNull(java.lang.Object, java.lang.Object)
{
java.lang.Object v0, v1;
boolean v2;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
if v0 == null goto label1;
if v1 == null goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
protected static final boolean _nonEmpty(java.util.Collection)
{
boolean v1, v2;
java.util.Collection v0;
v0 := @parameter0: java.util.Collection;
if v0 == null goto label1;
v1 = interfaceinvoke v0.<java.util.Collection: boolean isEmpty()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
static void <clinit>()
{
java.lang.Object v0;
v0 = new java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
<com.fasterxml.jackson.databind.ser.std.StdSerializer: java.lang.Object KEY_CONTENT_CONVERTER_LOCK> = v0;
return;
}
}