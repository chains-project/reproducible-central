public final class com.fasterxml.jackson.databind.util.ClassUtil extends java.lang.Object
{
private static final java.lang.Class CLS_OBJECT;
private static final java.lang.'annotation'.Annotation[] NO_ANNOTATIONS;
private static final com.fasterxml.jackson.databind.util.ClassUtil$Ctor[] NO_CTORS;
private static final java.util.Iterator EMPTY_ITERATOR;
public void <init>()
{
com.fasterxml.jackson.databind.util.ClassUtil v0;
v0 := @this: com.fasterxml.jackson.databind.util.ClassUtil;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.util.Iterator emptyIterator()
{
java.util.Iterator v0;
v0 = <com.fasterxml.jackson.databind.util.ClassUtil: java.util.Iterator EMPTY_ITERATOR>;
return v0;
}
public static java.util.List findSuperTypes(com.fasterxml.jackson.databind.JavaType, java.lang.Class, boolean)
{
java.util.List v5;
java.lang.Class v1;
com.fasterxml.jackson.databind.JavaType v0;
boolean v2, v3, v4;
java.util.ArrayList v6;
v0 := @parameter0: com.fasterxml.jackson.databind.JavaType;
v1 := @parameter1: java.lang.Class;
v2 := @parameter2: boolean;
if v0 == null goto label1;
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.JavaType: boolean hasRawClass(java.lang.Class)>(v1);
if v3 != 0 goto label1;
v4 = virtualinvoke v0.<com.fasterxml.jackson.databind.JavaType: boolean hasRawClass(java.lang.Class)>(class "Ljava/lang/Object;");
if v4 == 0 goto label2;
label1:
v5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v5;
label2:
v6 = new java.util.ArrayList;
specialinvoke v6.<java.util.ArrayList: void <init>(int)>(8);
staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: void _addSuperTypes(com.fasterxml.jackson.databind.JavaType,java.lang.Class,java.util.Collection,boolean)>(v0, v1, v6, v2);
return v6;
}
public static java.util.List findRawSuperTypes(java.lang.Class, java.lang.Class, boolean)
{
java.util.List v3;
java.lang.Class v0, v1;
boolean v2;
java.util.ArrayList v4;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Class;
v2 := @parameter2: boolean;
if v0 == null goto label1;
if v0 == v1 goto label1;
if v0 != class "Ljava/lang/Object;" goto label2;
label1:
v3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v3;
label2:
v4 = new java.util.ArrayList;
specialinvoke v4.<java.util.ArrayList: void <init>(int)>(8);
staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: void _addRawSuperTypes(java.lang.Class,java.lang.Class,java.util.Collection,boolean)>(v0, v1, v4, v2);
return v4;
}
public static java.util.List findSuperClasses(java.lang.Class, java.lang.Class, boolean)
{
java.lang.Class v0, v1, v4;
boolean v2;
java.util.ArrayList v3;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Class;
v2 := @parameter2: boolean;
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>(int)>(8);
if v0 == null goto label2;
if v0 == v1 goto label2;
if v2 == 0 goto label1;
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v0);
label1:
v4 = virtualinvoke v0.<java.lang.Class: java.lang.Class getSuperclass()>();
v0 = v4;
if v4 == null goto label2;
if v4 == v1 goto label2;
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v4);
goto label1;
label2:
return v3;
}
public static java.util.List findSuperTypes(java.lang.Class, java.lang.Class)
{
java.util.List v3;
java.lang.Class v0, v1;
java.util.ArrayList v2;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Class;
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>(int)>(8);
v3 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.util.List findSuperTypes(java.lang.Class,java.lang.Class,java.util.List)>(v0, v1, v2);
return v3;
}
public static java.util.List findSuperTypes(java.lang.Class, java.lang.Class, java.util.List)
{
java.lang.Class v0, v1;
java.util.List v2;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Class;
v2 := @parameter2: java.util.List;
staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: void _addRawSuperTypes(java.lang.Class,java.lang.Class,java.util.Collection,boolean)>(v0, v1, v2, 0);
return v2;
}
private static void _addSuperTypes(com.fasterxml.jackson.databind.JavaType, java.lang.Class, java.util.Collection, boolean)
{
java.util.Iterator v7;
java.util.Collection v2;
java.util.List v6;
java.lang.Class v1, v4;
java.lang.Object v9;
com.fasterxml.jackson.databind.JavaType v0, v10;
boolean v3, v5, v8;
v0 := @parameter0: com.fasterxml.jackson.databind.JavaType;
v1 := @parameter1: java.lang.Class;
v2 := @parameter2: java.util.Collection;
v3 := @parameter3: boolean;
if v0 != null goto label1;
return;
label1:
v4 = virtualinvoke v0.<com.fasterxml.jackson.databind.JavaType: java.lang.Class getRawClass()>();
if v4 == v1 goto label2;
if v4 != class "Ljava/lang/Object;" goto label3;
label2:
return;
label3:
if v3 == 0 goto label5;
v5 = interfaceinvoke v2.<java.util.Collection: boolean contains(java.lang.Object)>(v0);
if v5 == 0 goto label4;
return;
label4:
interfaceinvoke v2.<java.util.Collection: boolean add(java.lang.Object)>(v0);
label5:
v6 = virtualinvoke v0.<com.fasterxml.jackson.databind.JavaType: java.util.List getInterfaces()>();
v7 = interfaceinvoke v6.<java.util.List: java.util.Iterator iterator()>();
label6:
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label7;
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: void _addSuperTypes(com.fasterxml.jackson.databind.JavaType,java.lang.Class,java.util.Collection,boolean)>(v9, v1, v2, 1);
goto label6;
label7:
v10 = virtualinvoke v0.<com.fasterxml.jackson.databind.JavaType: com.fasterxml.jackson.databind.JavaType getSuperClass()>();
staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: void _addSuperTypes(com.fasterxml.jackson.databind.JavaType,java.lang.Class,java.util.Collection,boolean)>(v10, v1, v2, 1);
return;
}
private static void _addRawSuperTypes(java.lang.Class, java.lang.Class, java.util.Collection, boolean)
{
java.util.Collection v2;
java.lang.Class[] v5;
int v6, v7;
java.lang.Class v0, v1, v8, v9;
boolean v3, v4;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Class;
v2 := @parameter2: java.util.Collection;
v3 := @parameter3: boolean;
if v0 == v1 goto label1;
if v0 == null goto label1;
if v0 != class "Ljava/lang/Object;" goto label2;
label1:
return;
label2:
if v3 == 0 goto label4;
v4 = interfaceinvoke v2.<java.util.Collection: boolean contains(java.lang.Object)>(v0);
if v4 == 0 goto label3;
return;
label3:
interfaceinvoke v2.<java.util.Collection: boolean add(java.lang.Object)>(v0);
label4:
v5 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Class[] _interfaces(java.lang.Class)>(v0);
v6 = lengthof v5;
v7 = 0;
label5:
if v7 >= v6 goto label6;
v8 = v5[v7];
staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: void _addRawSuperTypes(java.lang.Class,java.lang.Class,java.util.Collection,boolean)>(v8, v1, v2, 1);
v7 = v7 + 1;
goto label5;
label6:
v9 = virtualinvoke v0.<java.lang.Class: java.lang.Class getSuperclass()>();
staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: void _addRawSuperTypes(java.lang.Class,java.lang.Class,java.util.Collection,boolean)>(v9, v1, v2, 1);
return;
}
public static java.lang.String canBeABeanType(java.lang.Class)
{
java.lang.Class v0, v3;
boolean v1, v2, v4, v5;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: boolean isAnnotation()>();
if v1 == 0 goto label1;
return "annotation";
label1:
v2 = virtualinvoke v0.<java.lang.Class: boolean isArray()>();
if v2 == 0 goto label2;
return "array";
label2:
v3 = class "Ljava/lang/Enum;";
v4 = virtualinvoke v3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v0);
if v4 == 0 goto label3;
return "enum";
label3:
v5 = virtualinvoke v0.<java.lang.Class: boolean isPrimitive()>();
if v5 == 0 goto label4;
return "primitive";
label4:
return null;
}
public static java.lang.String isLocalType(java.lang.Class, boolean)
{
java.lang.NullPointerException v7;
int v2;
java.lang.Class v0, v5;
java.lang.SecurityException v6;
boolean v1, v3, v4;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: boolean;
label1:
v2 = virtualinvoke v0.<java.lang.Class: int getModifiers()>();
v3 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(v2);
if v3 != 0 goto label3;
v4 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: boolean hasEnclosingMethod(java.lang.Class)>(v0);
if v4 == 0 goto label3;
label2:
return "local/anonymous";
label3:
if v1 != 0 goto label7;
if v3 != 0 goto label7;
v5 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Class getEnclosingClass(java.lang.Class)>(v0);
if v5 == null goto label7;
label4:
return "non-static member class";
label5:
v6 := @caughtexception;
goto label7;
label6:
v7 := @caughtexception;
label7:
return null;
catch java.lang.SecurityException from label1 to label2 with label5;
catch java.lang.SecurityException from label3 to label4 with label5;
catch java.lang.NullPointerException from label1 to label2 with label6;
catch java.lang.NullPointerException from label3 to label4 with label6;
}
public static java.lang.Class getOuterClass(java.lang.Class)
{
int v1;
java.lang.Class v0, v4;
java.lang.SecurityException v5;
boolean v2, v3;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: int getModifiers()>();
v2 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(v1);
if v2 != 0 goto label6;
label1:
v3 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: boolean hasEnclosingMethod(java.lang.Class)>(v0);
if v3 == 0 goto label3;
label2:
return null;
label3:
v4 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Class getEnclosingClass(java.lang.Class)>(v0);
label4:
return v4;
label5:
v5 := @caughtexception;
label6:
return null;
catch java.lang.SecurityException from label1 to label2 with label5;
catch java.lang.SecurityException from label3 to label4 with label5;
}
public static boolean isProxyType(java.lang.Class)
{
java.lang.Class v0;
java.lang.String v1;
boolean v2, v3;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v2 = virtualinvoke v1.<java.lang.String: boolean startsWith(java.lang.String)>("net.sf.cglib.proxy.");
if v2 != 0 goto label1;
v3 = virtualinvoke v1.<java.lang.String: boolean startsWith(java.lang.String)>("org.hibernate.proxy.");
if v3 == 0 goto label2;
label1:
return 1;
label2:
return 0;
}
public static boolean isConcrete(java.lang.Class)
{
int v1, v2;
java.lang.Class v0;
boolean v3;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: int getModifiers()>();
v2 = v1 & 1536;
if v2 != 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public static boolean isConcrete(java.lang.reflect.Member)
{
java.lang.reflect.Member v0;
int v1, v2;
boolean v3;
v0 := @parameter0: java.lang.reflect.Member;
v1 = interfaceinvoke v0.<java.lang.reflect.Member: int getModifiers()>();
v2 = v1 & 1536;
if v2 != 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public static boolean isCollectionMapOrArray(java.lang.Class)
{
java.lang.Class v0, v2, v4;
boolean v1, v3, v5;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: boolean isArray()>();
if v1 == 0 goto label1;
return 1;
label1:
v2 = class "Ljava/util/Collection;";
v3 = virtualinvoke v2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v0);
if v3 == 0 goto label2;
return 1;
label2:
v4 = class "Ljava/util/Map;";
v5 = virtualinvoke v4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v0);
if v5 == 0 goto label3;
return 1;
label3:
return 0;
}
public static boolean isBogusClass(java.lang.Class)
{
java.lang.Class v0, v1;
boolean v2;
v0 := @parameter0: java.lang.Class;
if v0 == class "Ljava/lang/Void;" goto label1;
v1 = <java.lang.Void: java.lang.Class TYPE>;
if v0 == v1 goto label1;
if v0 != class "Lcom/fasterxml/jackson/databind/annotation/NoClass;" goto label2;
label1:
v2 = 1;
goto label3;
label2:
v2 = 0;
label3:
return v2;
}
public static boolean isRecordType(java.lang.Class)
{
java.lang.Class v0, v1;
java.lang.String v2, v3;
boolean v4, v5;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: java.lang.Class getSuperclass()>();
if v1 == null goto label1;
v2 = "java.lang.Record";
v3 = virtualinvoke v1.<java.lang.Class: java.lang.String getName()>();
v4 = virtualinvoke v2.<java.lang.String: boolean equals(java.lang.Object)>(v3);
if v4 == 0 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
public static boolean isObjectOrPrimitive(java.lang.Class)
{
java.lang.Class v0, v1;
boolean v2, v3;
v0 := @parameter0: java.lang.Class;
v1 = <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Class CLS_OBJECT>;
if v0 == v1 goto label1;
v2 = virtualinvoke v0.<java.lang.Class: boolean isPrimitive()>();
if v2 == 0 goto label2;
label1:
v3 = 1;
goto label3;
label2:
v3 = 0;
label3:
return v3;
}
public static boolean hasClass(java.lang.Object, java.lang.Class)
{
java.lang.Class v1, v2;
java.lang.Object v0;
boolean v3;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Class;
if v0 == null goto label1;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
if v2 != v1 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public static void verifyMustOverride(java.lang.Class, java.lang.Object, java.lang.String)
{
java.lang.IllegalStateException v4;
java.lang.Object[] v5;
java.lang.Class v0, v3, v6;
java.lang.Object v1;
java.lang.String v2, v7, v8, v9;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: java.lang.String;
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v3 == v0 goto label1;
v4 = new java.lang.IllegalStateException;
v5 = newarray (java.lang.Object)[3];
v6 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v7 = virtualinvoke v6.<java.lang.Class: java.lang.String getName()>();
v5[0] = v7;
v8 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v5[1] = v8;
v5[2] = v2;
v9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Sub-class %s (of class %s) must override method \'%s\'", v5);
specialinvoke v4.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v9);
throw v4;
label1:
return;
}
public static boolean hasGetterSignature(java.lang.reflect.Method)
{
int v1, v4;
java.lang.Class[] v3;
java.lang.Class v5, v6;
java.lang.reflect.Method v0;
boolean v2;
v0 := @parameter0: java.lang.reflect.Method;
v1 = virtualinvoke v0.<java.lang.reflect.Method: int getModifiers()>();
v2 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(v1);
if v2 == 0 goto label1;
return 0;
label1:
v3 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();
if v3 == null goto label2;
v4 = lengthof v3;
if v4 == 0 goto label2;
return 0;
label2:
v5 = <java.lang.Void: java.lang.Class TYPE>;
v6 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.Class getReturnType()>();
if v5 != v6 goto label3;
return 0;
label3:
return 1;
}
public static java.lang.Throwable throwIfError(java.lang.Throwable)
{
java.lang.Throwable v0;
boolean v1;
v0 := @parameter0: java.lang.Throwable;
v1 = v0 instanceof java.lang.Error;
if v1 == 0 goto label1;
throw v0;
label1:
return v0;
}
public static java.lang.Throwable throwIfRTE(java.lang.Throwable)
{
java.lang.Throwable v0;
boolean v1;
v0 := @parameter0: java.lang.Throwable;
v1 = v0 instanceof java.lang.RuntimeException;
if v1 == 0 goto label1;
throw v0;
label1:
return v0;
}
public static java.lang.Throwable throwIfIOE(java.lang.Throwable) throws java.io.IOException
{
java.lang.Throwable v0;
boolean v1;
v0 := @parameter0: java.lang.Throwable;
v1 = v0 instanceof java.io.IOException;
if v1 == 0 goto label1;
throw v0;
label1:
return v0;
}
public static java.lang.Throwable getRootCause(java.lang.Throwable)
{
java.lang.Throwable v0, v1;
v0 := @parameter0: java.lang.Throwable;
label1:
v1 = virtualinvoke v0.<java.lang.Throwable: java.lang.Throwable getCause()>();
if v1 == null goto label2;
v0 = virtualinvoke v0.<java.lang.Throwable: java.lang.Throwable getCause()>();
goto label1;
label2:
return v0;
}
public static java.lang.Throwable throwRootCauseIfIOE(java.lang.Throwable) throws java.io.IOException
{
java.lang.Throwable v0, v1, v2;
v0 := @parameter0: java.lang.Throwable;
v1 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable getRootCause(java.lang.Throwable)>(v0);
v2 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable throwIfIOE(java.lang.Throwable)>(v1);
return v2;
}
public static void throwAsIAE(java.lang.Throwable)
{
java.lang.Throwable v0;
java.lang.String v1;
v0 := @parameter0: java.lang.Throwable;
v1 = virtualinvoke v0.<java.lang.Throwable: java.lang.String getMessage()>();
staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: void throwAsIAE(java.lang.Throwable,java.lang.String)>(v0, v1);
return;
}
public static void throwAsIAE(java.lang.Throwable, java.lang.String)
{
java.lang.Throwable v0;
java.lang.String v1;
java.lang.IllegalArgumentException v2;
v0 := @parameter0: java.lang.Throwable;
v1 := @parameter1: java.lang.String;
staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable throwIfRTE(java.lang.Throwable)>(v0);
staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable throwIfError(java.lang.Throwable)>(v0);
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>(v1, v0);
throw v2;
}
public static java.lang.Object throwAsMappingException(com.fasterxml.jackson.databind.DeserializationContext, java.io.IOException) throws com.fasterxml.jackson.databind.JsonMappingException
{
com.fasterxml.jackson.databind.DeserializationContext v0;
java.io.IOException v1;
com.fasterxml.jackson.databind.JsonMappingException v4, v5;
java.lang.String v3;
boolean v2;
v0 := @parameter0: com.fasterxml.jackson.databind.DeserializationContext;
v1 := @parameter1: java.io.IOException;
v2 = v1 instanceof com.fasterxml.jackson.databind.JsonMappingException;
if v2 == 0 goto label1;
throw v1;
label1:
v3 = virtualinvoke v1.<java.io.IOException: java.lang.String getMessage()>();
v4 = staticinvoke <com.fasterxml.jackson.databind.JsonMappingException: com.fasterxml.jackson.databind.JsonMappingException 'from'(com.fasterxml.jackson.databind.DeserializationContext,java.lang.String)>(v0, v3);
v5 = virtualinvoke v4.<com.fasterxml.jackson.databind.JsonMappingException: com.fasterxml.jackson.databind.JsonMappingException withCause(java.lang.Throwable)>(v1);
throw v5;
}
public static void unwrapAndThrowAsIAE(java.lang.Throwable)
{
java.lang.Throwable v0, v1;
v0 := @parameter0: java.lang.Throwable;
v1 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable getRootCause(java.lang.Throwable)>(v0);
staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: void throwAsIAE(java.lang.Throwable)>(v1);
return;
}
public static void unwrapAndThrowAsIAE(java.lang.Throwable, java.lang.String)
{
java.lang.Throwable v0, v2;
java.lang.String v1;
v0 := @parameter0: java.lang.Throwable;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable getRootCause(java.lang.Throwable)>(v0);
staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: void throwAsIAE(java.lang.Throwable,java.lang.String)>(v2, v1);
return;
}
public static void closeOnFailAndThrowAsIOE(com.fasterxml.jackson.core.JsonGenerator, java.lang.Exception) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonGenerator$Feature v2;
com.fasterxml.jackson.core.JsonGenerator v0;
java.lang.RuntimeException v3;
java.lang.Exception v1;
v0 := @parameter0: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter1: java.lang.Exception;
v2 = <com.fasterxml.jackson.core.JsonGenerator$Feature: com.fasterxml.jackson.core.JsonGenerator$Feature AUTO_CLOSE_JSON_CONTENT>;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonGenerator disable(com.fasterxml.jackson.core.JsonGenerator$Feature)>(v2);
staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable throwIfIOE(java.lang.Throwable)>(v1);
staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable throwIfRTE(java.lang.Throwable)>(v1);
v3 = new java.lang.RuntimeException;
specialinvoke v3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(v1);
throw v3;
}
public static void closeOnFailAndThrowAsIOE(com.fasterxml.jackson.core.JsonGenerator, java.io.Closeable, java.lang.Exception) throws java.io.IOException
{
com.fasterxml.jackson.core.JsonGenerator$Feature v3;
com.fasterxml.jackson.core.JsonGenerator v0;
java.io.Closeable v1;
java.lang.RuntimeException v4;
java.lang.Exception v2;
v0 := @parameter0: com.fasterxml.jackson.core.JsonGenerator;
v1 := @parameter1: java.io.Closeable;
v2 := @parameter2: java.lang.Exception;
if v0 == null goto label1;
v3 = <com.fasterxml.jackson.core.JsonGenerator$Feature: com.fasterxml.jackson.core.JsonGenerator$Feature AUTO_CLOSE_JSON_CONTENT>;
virtualinvoke v0.<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonGenerator disable(com.fasterxml.jackson.core.JsonGenerator$Feature)>(v3);
label1:
staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable throwIfIOE(java.lang.Throwable)>(v2);
staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Throwable throwIfRTE(java.lang.Throwable)>(v2);
v4 = new java.lang.RuntimeException;
specialinvoke v4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(v2);
throw v4;
}
public static java.lang.Object createInstance(java.lang.Class, boolean) throws java.lang.IllegalArgumentException
{
java.lang.Object[] v6;
java.lang.IllegalArgumentException v3;
java.lang.reflect.Constructor v2;
java.lang.Exception v8;
java.lang.Class v0;
java.lang.Object v7;
java.lang.String v10, v11, v4, v5, v9;
boolean v1;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: boolean;
v2 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.reflect.Constructor findConstructor(java.lang.Class,boolean)>(v0, v1);
if v2 != null goto label1;
v3 = new java.lang.IllegalArgumentException;
v4 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Class \u0001 has no default (no arg) constructor");
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v3;
label1:
v6 = newarray (java.lang.Object)[0];
v7 = virtualinvoke v2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(v6);
label2:
return v7;
label3:
v8 := @caughtexception;
v9 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v10 = virtualinvoke v8.<java.lang.Exception: java.lang.String getMessage()>();
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v9, v10) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to instantiate class \u0001, problem: \u0001");
staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: void unwrapAndThrowAsIAE(java.lang.Throwable,java.lang.String)>(v8, v11);
return null;
catch java.lang.Exception from label1 to label2 with label3;
}
public static java.lang.reflect.Constructor findConstructor(java.lang.Class, boolean) throws java.lang.IllegalArgumentException
{
java.lang.NoSuchMethodException v9;
java.lang.Class[] v2;
java.lang.IllegalArgumentException v6;
java.lang.reflect.Constructor v3;
java.lang.Exception v10;
int v4;
java.lang.Class v0;
java.lang.String v11, v12, v13, v7, v8;
boolean v1, v5;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: boolean;
label1:
v2 = newarray (java.lang.Class)[0];
v3 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(v2);
if v1 == 0 goto label2;
staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: void checkAndFixAccess(java.lang.reflect.Member,boolean)>(v3, v1);
goto label3;
label2:
v4 = virtualinvoke v3.<java.lang.reflect.Constructor: int getModifiers()>();
v5 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>(v4);
if v5 != 0 goto label3;
v6 = new java.lang.IllegalArgumentException;
v7 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Default constructor for \u0001 is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type");
specialinvoke v6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v8);
throw v6;
label3:
return v3;
label4:
v9 := @caughtexception;
goto label6;
label5:
v10 := @caughtexception;
v11 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v12 = virtualinvoke v10.<java.lang.Exception: java.lang.String getMessage()>();
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v11, v12) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to find default constructor of class \u0001, problem: \u0001");
staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: void unwrapAndThrowAsIAE(java.lang.Throwable,java.lang.String)>(v10, v13);
label6:
return null;
catch java.lang.NoSuchMethodException from label1 to label3 with label4;
catch java.lang.Exception from label1 to label3 with label5;
}
public static java.lang.Class classOf(java.lang.Object)
{
java.lang.Class v1;
java.lang.Object v0;
v0 := @parameter0: java.lang.Object;
if v0 != null goto label1;
return null;
label1:
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
return v1;
}
public static java.lang.Class rawClass(com.fasterxml.jackson.databind.JavaType)
{
java.lang.Class v1;
com.fasterxml.jackson.databind.JavaType v0;
v0 := @parameter0: com.fasterxml.jackson.databind.JavaType;
if v0 != null goto label1;
return null;
label1:
v1 = virtualinvoke v0.<com.fasterxml.jackson.databind.JavaType: java.lang.Class getRawClass()>();
return v1;
}
public static java.lang.Object nonNull(java.lang.Object, java.lang.Object)
{
java.lang.Object v0, v1, v2;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
if v0 != null goto label1;
v2 = v1;
goto label2;
label1:
v2 = v0;
label2:
return v2;
}
public static java.lang.String nullOrToString(java.lang.Object)
{
java.lang.Object v0;
java.lang.String v1;
v0 := @parameter0: java.lang.Object;
if v0 != null goto label1;
return null;
label1:
v1 = virtualinvoke v0.<java.lang.Object: java.lang.String toString()>();
return v1;
}
public static java.lang.String nonNullString(java.lang.String)
{
java.lang.String v0;
v0 := @parameter0: java.lang.String;
if v0 != null goto label1;
return "";
label1:
return v0;
}
public static java.lang.String quotedOr(java.lang.Object, java.lang.String)
{
java.lang.Object[] v2;
java.lang.Object v0;
java.lang.String v1, v3;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.String;
if v0 != null goto label1;
return v1;
label1:
v2 = newarray (java.lang.Object)[1];
v2[0] = v0;
v3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\"%s\"", v2);
return v3;
}
public static java.lang.String getClassDescription(java.lang.Object)
{
java.lang.Object v0;
java.lang.String v2;
boolean v1;
v0 := @parameter0: java.lang.Object;
if v0 != null goto label1;
return "unknown";
label1:
v1 = v0 instanceof java.lang.Class;
if v1 != 0 goto label2;
v0 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
label2:
v2 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nameOf(java.lang.Class)>(v0);
return v2;
}
public static java.lang.String getTypeDescription(com.fasterxml.jackson.databind.JavaType)
{
java.lang.StringBuilder v3, v4;
com.fasterxml.jackson.databind.JavaType v0;
java.lang.String v1, v2;
v0 := @parameter0: com.fasterxml.jackson.databind.JavaType;
if v0 != null goto label1;
return "[null]";
label1:
specialinvoke v3.<java.lang.StringBuilder: void <init>(int)>(80);
v1 = virtualinvoke v0.<com.fasterxml.jackson.databind.JavaType: java.lang.String toCanonical()>();
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v1);
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String ()>() <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("``");
return v2;
}
public static java.lang.String classNameOf(java.lang.Object)
{
java.lang.Object v0;
java.lang.String v2;
boolean v1;
v0 := @parameter0: java.lang.Object;
if v0 != null goto label1;
return "[null]";
label1:
v1 = v0 instanceof java.lang.Class;
if v1 != 0 goto label2;
v0 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
label2:
v2 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nameOf(java.lang.Class)>(v0);
return v2;
}
public static java.lang.String nameOf(java.lang.Class)
{
int v1;
java.lang.Class v0;
java.lang.StringBuilder v6;
java.lang.String v4, v5, v7;
boolean v2, v3;
v0 := @parameter0: java.lang.Class;
if v0 != null goto label1;
return "[null]";
label1:
v1 = 0;
label2:
v2 = virtualinvoke v0.<java.lang.Class: boolean isArray()>();
if v2 == 0 goto label3;
v1 = v1 + 1;
v0 = virtualinvoke v0.<java.lang.Class: java.lang.Class getComponentType()>();
goto label2;
label3:
v3 = virtualinvoke v0.<java.lang.Class: boolean isPrimitive()>();
if v3 == 0 goto label4;
v4 = virtualinvoke v0.<java.lang.Class: java.lang.String getSimpleName()>();
goto label5;
label4:
v4 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
label5:
v5 = v4;
if v1 <= 0 goto label7;
v6 = new java.lang.StringBuilder;
specialinvoke v6.<java.lang.StringBuilder: void <init>(java.lang.String)>(v4);
label6:
virtualinvoke v6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");
v1 = v1 - 1;
if v1 > 0 goto label6;
v5 = virtualinvoke v6.<java.lang.StringBuilder: java.lang.String toString()>();
label7:
v7 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String backticked(java.lang.String)>(v5);
return v7;
}
public static java.lang.String nameOf(com.fasterxml.jackson.databind.util.Named)
{
com.fasterxml.jackson.databind.util.Named v0;
java.lang.String v1, v2;
v0 := @parameter0: com.fasterxml.jackson.databind.util.Named;
if v0 != null goto label1;
return "[null]";
label1:
v1 = interfaceinvoke v0.<com.fasterxml.jackson.databind.util.Named: java.lang.String getName()>();
v2 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String apostrophed(java.lang.String)>(v1);
return v2;
}
public static java.lang.String name(java.lang.String)
{
java.lang.String v0, v1;
v0 := @parameter0: java.lang.String;
if v0 != null goto label1;
return "[null]";
label1:
v1 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String apostrophed(java.lang.String)>(v0);
return v1;
}
public static java.lang.String name(com.fasterxml.jackson.databind.PropertyName)
{
java.lang.String v1, v2;
com.fasterxml.jackson.databind.PropertyName v0;
v0 := @parameter0: com.fasterxml.jackson.databind.PropertyName;
if v0 != null goto label1;
return "[null]";
label1:
v1 = virtualinvoke v0.<com.fasterxml.jackson.databind.PropertyName: java.lang.String getSimpleName()>();
v2 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String apostrophed(java.lang.String)>(v1);
return v2;
}
public static java.lang.String backticked(java.lang.String)
{
int v1, v2;
java.lang.StringBuilder v4;
java.lang.String v0, v3;
v0 := @parameter0: java.lang.String;
if v0 != null goto label1;
return "[null]";
label1:
v1 = virtualinvoke v0.<java.lang.String: int length()>();
v2 = v1 + 2;
specialinvoke v4.<java.lang.StringBuilder: void <init>(int)>(v2);
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("`\u0001`");
return v3;
}
public static java.lang.String apostrophed(java.lang.String)
{
int v1, v2;
java.lang.StringBuilder v4;
java.lang.String v0, v3;
v0 := @parameter0: java.lang.String;
if v0 != null goto label1;
return "[null]";
label1:
v1 = virtualinvoke v0.<java.lang.String: int length()>();
v2 = v1 + 2;
specialinvoke v4.<java.lang.StringBuilder: void <init>(int)>(v2);
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\'\u0001\'");
return v3;
}
public static java.lang.String exceptionMessage(java.lang.Throwable)
{
java.lang.Throwable v0, v4, v5;
java.lang.String v2, v6, v7;
boolean v1, v3;
v0 := @parameter0: java.lang.Throwable;
v1 = v0 instanceof com.fasterxml.jackson.core.JacksonException;
if v1 == 0 goto label1;
v2 = virtualinvoke v0.<com.fasterxml.jackson.core.JacksonException: java.lang.String getOriginalMessage()>();
return v2;
label1:
v3 = v0 instanceof java.lang.reflect.InvocationTargetException;
if v3 == 0 goto label2;
v4 = virtualinvoke v0.<java.lang.Throwable: java.lang.Throwable getCause()>();
if v4 == null goto label2;
v5 = virtualinvoke v0.<java.lang.Throwable: java.lang.Throwable getCause()>();
v6 = virtualinvoke v5.<java.lang.Throwable: java.lang.String getMessage()>();
return v6;
label2:
v7 = virtualinvoke v0.<java.lang.Throwable: java.lang.String getMessage()>();
return v7;
}
public static java.lang.Object defaultValue(java.lang.Class)
{
java.lang.Float v10;
java.lang.Double v8;
java.lang.Integer v2;
java.lang.Character v16;
java.lang.Long v4;
java.lang.Short v14;
java.lang.Boolean v6;
java.lang.String v18, v19;
java.lang.Byte v12;
java.lang.IllegalArgumentException v17;
java.lang.Class v0, v1, v11, v13, v15, v3, v5, v7, v9;
v0 := @parameter0: java.lang.Class;
v1 = <java.lang.Integer: java.lang.Class TYPE>;
if v0 != v1 goto label1;
v2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
return v2;
label1:
v3 = <java.lang.Long: java.lang.Class TYPE>;
if v0 != v3 goto label2;
v4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);
return v4;
label2:
v5 = <java.lang.Boolean: java.lang.Class TYPE>;
if v0 != v5 goto label3;
v6 = <java.lang.Boolean: java.lang.Boolean FALSE>;
return v6;
label3:
v7 = <java.lang.Double: java.lang.Class TYPE>;
if v0 != v7 goto label4;
v8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);
return v8;
label4:
v9 = <java.lang.Float: java.lang.Class TYPE>;
if v0 != v9 goto label5;
v10 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);
return v10;
label5:
v11 = <java.lang.Byte: java.lang.Class TYPE>;
if v0 != v11 goto label6;
v12 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(0);
return v12;
label6:
v13 = <java.lang.Short: java.lang.Class TYPE>;
if v0 != v13 goto label7;
v14 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(0);
return v14;
label7:
v15 = <java.lang.Character: java.lang.Class TYPE>;
if v0 != v15 goto label8;
v16 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(0);
return v16;
label8:
v17 = new java.lang.IllegalArgumentException;
v18 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v19 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v18) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Class \u0001 is not a primitive type");
specialinvoke v17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v19);
throw v17;
}
public static java.lang.Class wrapperType(java.lang.Class)
{
java.lang.IllegalArgumentException v9;
java.lang.Class v0, v1, v2, v3, v4, v5, v6, v7, v8;
java.lang.String v10, v11;
v0 := @parameter0: java.lang.Class;
v1 = <java.lang.Integer: java.lang.Class TYPE>;
if v0 != v1 goto label1;
return class "Ljava/lang/Integer;";
label1:
v2 = <java.lang.Long: java.lang.Class TYPE>;
if v0 != v2 goto label2;
return class "Ljava/lang/Long;";
label2:
v3 = <java.lang.Boolean: java.lang.Class TYPE>;
if v0 != v3 goto label3;
return class "Ljava/lang/Boolean;";
label3:
v4 = <java.lang.Double: java.lang.Class TYPE>;
if v0 != v4 goto label4;
return class "Ljava/lang/Double;";
label4:
v5 = <java.lang.Float: java.lang.Class TYPE>;
if v0 != v5 goto label5;
return class "Ljava/lang/Float;";
label5:
v6 = <java.lang.Byte: java.lang.Class TYPE>;
if v0 != v6 goto label6;
return class "Ljava/lang/Byte;";
label6:
v7 = <java.lang.Short: java.lang.Class TYPE>;
if v0 != v7 goto label7;
return class "Ljava/lang/Short;";
label7:
v8 = <java.lang.Character: java.lang.Class TYPE>;
if v0 != v8 goto label8;
return class "Ljava/lang/Character;";
label8:
v9 = new java.lang.IllegalArgumentException;
v10 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v10) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Class \u0001 is not a primitive type");
specialinvoke v9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v11);
throw v9;
}
public static java.lang.Class primitiveType(java.lang.Class)
{
java.lang.Class v0, v2, v3, v4, v5, v6, v7, v8, v9;
boolean v1;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: boolean isPrimitive()>();
if v1 == 0 goto label1;
return v0;
label1:
if v0 != class "Ljava/lang/Integer;" goto label2;
v2 = <java.lang.Integer: java.lang.Class TYPE>;
return v2;
label2:
if v0 != class "Ljava/lang/Long;" goto label3;
v3 = <java.lang.Long: java.lang.Class TYPE>;
return v3;
label3:
if v0 != class "Ljava/lang/Boolean;" goto label4;
v4 = <java.lang.Boolean: java.lang.Class TYPE>;
return v4;
label4:
if v0 != class "Ljava/lang/Double;" goto label5;
v5 = <java.lang.Double: java.lang.Class TYPE>;
return v5;
label5:
if v0 != class "Ljava/lang/Float;" goto label6;
v6 = <java.lang.Float: java.lang.Class TYPE>;
return v6;
label6:
if v0 != class "Ljava/lang/Byte;" goto label7;
v7 = <java.lang.Byte: java.lang.Class TYPE>;
return v7;
label7:
if v0 != class "Ljava/lang/Short;" goto label8;
v8 = <java.lang.Short: java.lang.Class TYPE>;
return v8;
label8:
if v0 != class "Ljava/lang/Character;" goto label9;
v9 = <java.lang.Character: java.lang.Class TYPE>;
return v9;
label9:
return null;
}
public static void checkAndFixAccess(java.lang.reflect.Member)
{
java.lang.reflect.Member v0;
v0 := @parameter0: java.lang.reflect.Member;
staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: void checkAndFixAccess(java.lang.reflect.Member,boolean)>(v0, 0);
return;
}
public static void checkAndFixAccess(java.lang.reflect.Member, boolean)
{
java.lang.SecurityException v9;
boolean v1, v10, v20, v4, v6, v7, v8;
java.lang.reflect.Member v0;
java.lang.Object[] v22;
int v3, v5;
java.lang.String v13, v14, v15, v17, v19, v24, v25, v27, v29, v30, v31;
java.lang.RuntimeException v16;
java.lang.IllegalArgumentException v12, v21;
java.lang.Class v11, v18, v2, v23, v26, v28;
v0 := @parameter0: java.lang.reflect.Member;
v1 := @parameter1: boolean;
label1:
v2 = interfaceinvoke v0.<java.lang.reflect.Member: java.lang.Class getDeclaringClass()>();
v3 = interfaceinvoke v0.<java.lang.reflect.Member: int getModifiers()>();
v4 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>(v3);
if v4 == 0 goto label2;
v5 = virtualinvoke v2.<java.lang.Class: int getModifiers()>();
v6 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>(v5);
if v6 == 0 goto label2;
v7 = 1;
goto label3;
label2:
v7 = 0;
label3:
if v7 == 0 goto label4;
if v1 == 0 goto label9;
v8 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: boolean isJDKClass(java.lang.Class)>(v2);
if v8 != 0 goto label9;
label4:
virtualinvoke v0.<java.lang.reflect.AccessibleObject: void setAccessible(boolean)>(1);
label5:
goto label9;
label6:
v9 := @caughtexception;
v10 = virtualinvoke v0.<java.lang.reflect.AccessibleObject: boolean isAccessible()>();
if v10 != 0 goto label9;
v11 = interfaceinvoke v0.<java.lang.reflect.Member: java.lang.Class getDeclaringClass()>();
v12 = new java.lang.IllegalArgumentException;
v13 = virtualinvoke v11.<java.lang.Class: java.lang.String getName()>();
v14 = virtualinvoke v9.<java.lang.SecurityException: java.lang.String getMessage()>();
v15 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.reflect.Member,java.lang.String,java.lang.String)>(v0, v13, v14) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot access \u0001 (from class \u0001; failed to set access: \u0001");
specialinvoke v12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v15);
throw v12;
label7:
v16 := @caughtexception;
v17 = "InaccessibleObjectException";
v18 = virtualinvoke v16.<java.lang.Object: java.lang.Class getClass()>();
v19 = virtualinvoke v18.<java.lang.Class: java.lang.String getSimpleName()>();
v20 = virtualinvoke v17.<java.lang.String: boolean equals(java.lang.Object)>(v19);
if v20 == 0 goto label8;
v21 = new java.lang.IllegalArgumentException;
v22 = newarray (java.lang.Object)[5];
v23 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v24 = virtualinvoke v23.<java.lang.Class: java.lang.String getSimpleName()>();
v22[0] = v24;
v25 = interfaceinvoke v0.<java.lang.reflect.Member: java.lang.String getName()>();
v22[1] = v25;
v26 = interfaceinvoke v0.<java.lang.reflect.Member: java.lang.Class getDeclaringClass()>();
v27 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.String nameOf(java.lang.Class)>(v26);
v22[2] = v27;
v28 = virtualinvoke v16.<java.lang.Object: java.lang.Class getClass()>();
v29 = virtualinvoke v28.<java.lang.Class: java.lang.String getName()>();
v22[3] = v29;
v30 = virtualinvoke v16.<java.lang.RuntimeException: java.lang.String getMessage()>();
v22[4] = v30;
v31 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Failed to call `setAccess()` on %s \'%s\' (of class %s) due to `%s`, problem: %s", v22);
specialinvoke v21.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>(v31, v16);
throw v21;
label8:
throw v16;
label9:
return;
catch java.lang.SecurityException from label1 to label5 with label6;
catch java.lang.RuntimeException from label1 to label5 with label7;
}
public static boolean isEnumType(java.lang.Class)
{
java.lang.Class v0, v1;
boolean v2;
v0 := @parameter0: java.lang.Class;
v1 = class "Ljava/lang/Enum;";
v2 = virtualinvoke v1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v0);
return v2;
}
public static java.lang.Class findEnumType(java.util.EnumSet)
{
com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator v5;
java.util.Iterator v2;
java.lang.Class v4, v6;
java.lang.Object v3;
java.util.EnumSet v0;
boolean v1;
v0 := @parameter0: java.util.EnumSet;
v1 = virtualinvoke v0.<java.util.EnumSet: boolean isEmpty()>();
if v1 != 0 goto label1;
v2 = virtualinvoke v0.<java.util.EnumSet: java.util.Iterator iterator()>();
v3 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v4 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Class findEnumType(java.lang.Enum)>(v3);
return v4;
label1:
v5 = <com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator: com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator instance>;
v6 = virtualinvoke v5.<com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator: java.lang.Class enumTypeFor(java.util.EnumSet)>(v0);
return v6;
}
public static java.lang.Class findEnumType(java.util.EnumMap)
{
com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator v6;
java.util.Iterator v3;
java.util.EnumMap v0;
java.util.Set v2;
java.lang.Class v5, v7;
java.lang.Object v4;
boolean v1;
v0 := @parameter0: java.util.EnumMap;
v1 = virtualinvoke v0.<java.util.EnumMap: boolean isEmpty()>();
if v1 != 0 goto label1;
v2 = virtualinvoke v0.<java.util.EnumMap: java.util.Set keySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
v4 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v5 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Class findEnumType(java.lang.Enum)>(v4);
return v5;
label1:
v6 = <com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator: com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator instance>;
v7 = virtualinvoke v6.<com.fasterxml.jackson.databind.util.ClassUtil$EnumTypeLocator: java.lang.Class enumTypeFor(java.util.EnumMap)>(v0);
return v7;
}
public static java.lang.Class findEnumType(java.lang.Enum)
{
java.lang.Class v1;
java.lang.Enum v0;
v0 := @parameter0: java.lang.Enum;
v1 = virtualinvoke v0.<java.lang.Enum: java.lang.Class getDeclaringClass()>();
return v1;
}
public static java.lang.Class findEnumType(java.lang.Class)
{
java.lang.Class v0, v1;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: java.lang.Class getSuperclass()>();
if v1 == class "Ljava/lang/Enum;" goto label1;
v0 = virtualinvoke v0.<java.lang.Class: java.lang.Class getSuperclass()>();
label1:
return v0;
}
public static java.lang.Enum findFirstAnnotatedEnumValue(java.lang.Class, java.lang.Class)
{
java.lang.Object[] v9;
java.lang.reflect.Field v5;
java.lang.reflect.Field[] v2;
java.lang.Enum v12;
int v10, v11, v3, v4;
java.lang.'annotation'.Annotation v7;
java.lang.Class v0, v1;
java.lang.String v13, v8;
boolean v14, v6;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Class;
v2 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();
v3 = lengthof v2;
v4 = 0;
label1:
if v4 >= v3 goto label5;
v5 = v2[v4];
v6 = virtualinvoke v5.<java.lang.reflect.Field: boolean isEnumConstant()>();
if v6 == 0 goto label4;
v7 = virtualinvoke v5.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(v1);
if v7 == null goto label4;
v8 = virtualinvoke v5.<java.lang.reflect.Field: java.lang.String getName()>();
v9 = virtualinvoke v0.<java.lang.Class: java.lang.Object[] getEnumConstants()>();
v10 = lengthof v9;
v11 = 0;
label2:
if v11 >= v10 goto label4;
v12 = v9[v11];
v13 = virtualinvoke v12.<java.lang.Enum: java.lang.String name()>();
v14 = virtualinvoke v8.<java.lang.String: boolean equals(java.lang.Object)>(v13);
if v14 == 0 goto label3;
return v12;
label3:
v11 = v11 + 1;
goto label2;
label4:
v4 = v4 + 1;
goto label1;
label5:
return null;
}
public static boolean isJacksonStdImpl(java.lang.Object)
{
java.lang.Class v1;
java.lang.Object v0;
boolean v2, v3;
v0 := @parameter0: java.lang.Object;
if v0 == null goto label1;
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v2 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: boolean isJacksonStdImpl(java.lang.Class)>(v1);
if v2 == 0 goto label2;
label1:
v3 = 1;
goto label3;
label2:
v3 = 0;
label3:
return v3;
}
public static boolean isJacksonStdImpl(java.lang.Class)
{
java.lang.'annotation'.Annotation v1;
java.lang.Class v0;
boolean v2;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lcom/fasterxml/jackson/databind/annotation/JacksonStdImpl;");
if v1 == null goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public static boolean isJDKClass(java.lang.Class)
{
java.lang.Class v0;
java.lang.String v1;
boolean v2, v3, v4;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v2 = virtualinvoke v1.<java.lang.String: boolean startsWith(java.lang.String)>("java.");
if v2 != 0 goto label1;
v3 = virtualinvoke v1.<java.lang.String: boolean startsWith(java.lang.String)>("javax.");
if v3 == 0 goto label2;
label1:
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
return v4;
}
public static boolean isJDK17OrAbove()
{
java.io.PrintStream v3;
java.lang.Throwable v2;
int v0;
java.lang.String v4;
boolean v1;
label1:
v0 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: int getJDKMajorVersion()>();
if v0 < 17 goto label2;
v1 = 1;
goto label3;
label2:
v1 = 0;
label3:
return v1;
label4:
v2 := @caughtexception;
staticinvoke <com.fasterxml.jackson.databind.util.ExceptionUtil: void rethrowIfFatal(java.lang.Throwable)>(v2);
v3 = <java.lang.System: java.io.PrintStream err>;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Throwable)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to determine JDK major version, assuming pre-JDK-17; problem: \u0001");
virtualinvoke v3.<java.io.PrintStream: void println(java.lang.String)>(v4);
return 0;
catch java.lang.Throwable from label1 to label3 with label4;
}
public static int getJDKMajorVersion()
{
java.lang.IllegalStateException v2, v8;
java.lang.NumberFormatException v7;
int v4, v6;
java.lang.SecurityException v1;
java.lang.String v0, v5, v9;
boolean v3;
label1:
v0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.version");
label2:
goto label4;
label3:
v1 := @caughtexception;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Could not access \'java.version\': cannot determine JDK major version");
throw v2;
label4:
v3 = virtualinvoke v0.<java.lang.String: boolean startsWith(java.lang.String)>("1.");
if v3 == 0 goto label5;
return 8;
label5:
v4 = virtualinvoke v0.<java.lang.String: int indexOf(java.lang.String)>(".");
if v4 >= 0 goto label6;
v5 = v0;
goto label7;
label6:
v5 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(0, v4);
label7:
v6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v5);
label8:
return v6;
label9:
v7 := @caughtexception;
v8 = new java.lang.IllegalStateException;
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid JDK version String \'\u0001\' cannot determine JDK major version");
specialinvoke v8.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v9);
throw v8;
catch java.lang.SecurityException from label1 to label2 with label3;
catch java.lang.NumberFormatException from label7 to label8 with label9;
}
public static boolean isNonStaticInnerClass(java.lang.Class)
{
int v1;
java.lang.Class v0, v3;
boolean v2, v4;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: int getModifiers()>();
v2 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(v1);
if v2 != 0 goto label1;
v3 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Class getEnclosingClass(java.lang.Class)>(v0);
if v3 == null goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public static java.lang.String getPackageName(java.lang.Class)
{
java.lang.Class v0;
java.lang.String v2;
java.lang.Package v1;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: java.lang.Package getPackage()>();
if v1 != null goto label1;
v2 = null;
goto label2;
label1:
v2 = virtualinvoke v1.<java.lang.Package: java.lang.String getName()>();
label2:
return v2;
}
public static boolean hasEnclosingMethod(java.lang.Class)
{
java.lang.Class v0;
java.lang.reflect.Method v2;
boolean v1, v3;
v0 := @parameter0: java.lang.Class;
v1 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: boolean isObjectOrPrimitive(java.lang.Class)>(v0);
if v1 != 0 goto label1;
v2 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Method getEnclosingMethod()>();
if v2 == null goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public static java.lang.reflect.Field[] getDeclaredFields(java.lang.Class)
{
java.lang.reflect.Field[] v1;
java.lang.Class v0;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();
return v1;
}
public static java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)
{
java.lang.Class v0;
java.lang.reflect.Method[] v1;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();
return v1;
}
public static java.lang.'annotation'.Annotation[] findClassAnnotations(java.lang.Class)
{
java.lang.Class v0;
java.lang.'annotation'.Annotation[] v2, v3;
boolean v1;
v0 := @parameter0: java.lang.Class;
v1 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: boolean isObjectOrPrimitive(java.lang.Class)>(v0);
if v1 == 0 goto label1;
v2 = <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.'annotation'.Annotation[] NO_ANNOTATIONS>;
return v2;
label1:
v3 = virtualinvoke v0.<java.lang.Class: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>();
return v3;
}
public static java.lang.reflect.Method[] getClassMethods(java.lang.Class)
{
java.lang.Exception v11, v13;
java.lang.reflect.Method[] v1, v10, v12, v14, v5, v9;
java.lang.Thread v3;
java.lang.Class v0, v7;
java.lang.ClassNotFoundException v8;
java.lang.ClassLoader v4;
java.lang.String v6;
java.lang.NoClassDefFoundError v2;
v0 := @parameter0: java.lang.Class;
label01:
v1 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();
label02:
return v1;
label03:
v2 := @caughtexception;
v3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v4 = virtualinvoke v3.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
if v4 != null goto label04;
v5 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.reflect.Method[] _failGetClassMethods(java.lang.Class,java.lang.Throwable)>(v0, v2);
return v5;
label04:
v6 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v7 = virtualinvoke v4.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(v6);
label05:
goto label07;
label06:
v8 := @caughtexception;
virtualinvoke v2.<java.lang.NoClassDefFoundError: void addSuppressed(java.lang.Throwable)>(v8);
v9 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.reflect.Method[] _failGetClassMethods(java.lang.Class,java.lang.Throwable)>(v0, v2);
return v9;
label07:
v10 = virtualinvoke v7.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();
label08:
return v10;
label09:
v11 := @caughtexception;
v12 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.reflect.Method[] _failGetClassMethods(java.lang.Class,java.lang.Throwable)>(v0, v11);
return v12;
label10:
v13 := @caughtexception;
v14 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.reflect.Method[] _failGetClassMethods(java.lang.Class,java.lang.Throwable)>(v0, v13);
return v14;
catch java.lang.NoClassDefFoundError from label01 to label02 with label03;
catch java.lang.ClassNotFoundException from label04 to label05 with label06;
catch java.lang.Exception from label07 to label08 with label09;
catch java.lang.Exception from label01 to label02 with label10;
}
private static java.lang.reflect.Method[] _failGetClassMethods(java.lang.Class, java.lang.Throwable) throws java.lang.IllegalArgumentException
{
java.lang.Throwable v1;
java.lang.Object[] v3;
java.lang.IllegalArgumentException v2;
java.lang.Class v0, v5;
java.lang.String v4, v6, v7, v8;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Throwable;
v2 = new java.lang.IllegalArgumentException;
v3 = newarray (java.lang.Object)[3];
v4 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v3[0] = v4;
v5 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v6 = virtualinvoke v5.<java.lang.Class: java.lang.String getName()>();
v3[1] = v6;
v7 = virtualinvoke v1.<java.lang.Throwable: java.lang.String getMessage()>();
v3[2] = v7;
v8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Failed on call to `getDeclaredMethods()` on class `%s`, problem: (%s) %s", v3);
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>(v8, v1);
throw v2;
}
public static com.fasterxml.jackson.databind.util.ClassUtil$Ctor[] getConstructors(java.lang.Class)
{
com.fasterxml.jackson.databind.util.ClassUtil$Ctor[] v3, v6;
java.lang.reflect.Constructor v9;
java.lang.reflect.Constructor[] v4;
com.fasterxml.jackson.databind.util.ClassUtil$Ctor v8;
int v5, v7;
java.lang.Class v0;
boolean v1, v2;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: boolean isInterface()>();
if v1 != 0 goto label1;
v2 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: boolean isObjectOrPrimitive(java.lang.Class)>(v0);
if v2 == 0 goto label2;
label1:
v3 = <com.fasterxml.jackson.databind.util.ClassUtil: com.fasterxml.jackson.databind.util.ClassUtil$Ctor[] NO_CTORS>;
return v3;
label2:
v4 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>();
v5 = lengthof v4;
v6 = newarray (com.fasterxml.jackson.databind.util.ClassUtil$Ctor)[v5];
v7 = 0;
label3:
if v7 >= v5 goto label4;
v8 = new com.fasterxml.jackson.databind.util.ClassUtil$Ctor;
v9 = v4[v7];
specialinvoke v8.<com.fasterxml.jackson.databind.util.ClassUtil$Ctor: void <init>(java.lang.reflect.Constructor)>(v9);
v6[v7] = v8;
v7 = v7 + 1;
goto label3;
label4:
return v6;
}
public static java.lang.Class getDeclaringClass(java.lang.Class)
{
java.lang.Class v0, v2;
boolean v1;
v0 := @parameter0: java.lang.Class;
v1 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: boolean isObjectOrPrimitive(java.lang.Class)>(v0);
if v1 == 0 goto label1;
v2 = null;
goto label2;
label1:
v2 = virtualinvoke v0.<java.lang.Class: java.lang.Class getDeclaringClass()>();
label2:
return v2;
}
public static java.lang.reflect.Type getGenericSuperclass(java.lang.Class)
{
java.lang.Class v0;
java.lang.reflect.Type v1;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();
return v1;
}
public static java.lang.reflect.Type[] getGenericInterfaces(java.lang.Class)
{
java.lang.reflect.Type[] v1;
java.lang.Class v0;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>();
return v1;
}
public static java.lang.Class getEnclosingClass(java.lang.Class)
{
java.lang.Class v0, v2;
boolean v1;
v0 := @parameter0: java.lang.Class;
v1 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: boolean isObjectOrPrimitive(java.lang.Class)>(v0);
if v1 == 0 goto label1;
v2 = null;
goto label2;
label1:
v2 = virtualinvoke v0.<java.lang.Class: java.lang.Class getEnclosingClass()>();
label2:
return v2;
}
private static java.lang.Class[] _interfaces(java.lang.Class)
{
java.lang.Class[] v1;
java.lang.Class v0;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: java.lang.Class[] getInterfaces()>();
return v1;
}
static void <clinit>()
{
java.lang.'annotation'.Annotation[] v0;
java.util.Iterator v2;
com.fasterxml.jackson.databind.util.ClassUtil$Ctor[] v1;
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Class CLS_OBJECT> = class "Ljava/lang/Object;";
v0 = newarray (java.lang.'annotation'.Annotation)[0];
<com.fasterxml.jackson.databind.util.ClassUtil: java.lang.'annotation'.Annotation[] NO_ANNOTATIONS> = v0;
v1 = newarray (com.fasterxml.jackson.databind.util.ClassUtil$Ctor)[0];
<com.fasterxml.jackson.databind.util.ClassUtil: com.fasterxml.jackson.databind.util.ClassUtil$Ctor[] NO_CTORS> = v1;
v2 = staticinvoke <java.util.Collections: java.util.Iterator emptyIterator()>();
<com.fasterxml.jackson.databind.util.ClassUtil: java.util.Iterator EMPTY_ITERATOR> = v2;
return;
}
}