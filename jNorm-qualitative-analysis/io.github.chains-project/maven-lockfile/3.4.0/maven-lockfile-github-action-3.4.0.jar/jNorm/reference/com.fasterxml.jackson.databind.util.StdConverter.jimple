public abstract class com.fasterxml.jackson.databind.util.StdConverter extends java.lang.Object implements com.fasterxml.jackson.databind.util.Converter
{
public void <init>()
{
com.fasterxml.jackson.databind.util.StdConverter v0;
v0 := @this: com.fasterxml.jackson.databind.util.StdConverter;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public abstract java.lang.Object convert(java.lang.Object);
public com.fasterxml.jackson.databind.JavaType getInputType(com.fasterxml.jackson.databind.type.TypeFactory)
{
com.fasterxml.jackson.databind.util.StdConverter v0;
com.fasterxml.jackson.databind.type.TypeFactory v1;
com.fasterxml.jackson.databind.JavaType v2, v3;
v0 := @this: com.fasterxml.jackson.databind.util.StdConverter;
v1 := @parameter0: com.fasterxml.jackson.databind.type.TypeFactory;
v2 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.StdConverter: com.fasterxml.jackson.databind.JavaType _findConverterType(com.fasterxml.jackson.databind.type.TypeFactory)>(v1);
v3 = virtualinvoke v2.<com.fasterxml.jackson.databind.JavaType: com.fasterxml.jackson.databind.JavaType containedType(int)>(0);
return v3;
}
public com.fasterxml.jackson.databind.JavaType getOutputType(com.fasterxml.jackson.databind.type.TypeFactory)
{
com.fasterxml.jackson.databind.util.StdConverter v0;
com.fasterxml.jackson.databind.type.TypeFactory v1;
com.fasterxml.jackson.databind.JavaType v2, v3;
v0 := @this: com.fasterxml.jackson.databind.util.StdConverter;
v1 := @parameter0: com.fasterxml.jackson.databind.type.TypeFactory;
v2 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.StdConverter: com.fasterxml.jackson.databind.JavaType _findConverterType(com.fasterxml.jackson.databind.type.TypeFactory)>(v1);
v3 = virtualinvoke v2.<com.fasterxml.jackson.databind.JavaType: com.fasterxml.jackson.databind.JavaType containedType(int)>(1);
return v3;
}
protected com.fasterxml.jackson.databind.JavaType _findConverterType(com.fasterxml.jackson.databind.type.TypeFactory)
{
java.lang.IllegalStateException v6;
com.fasterxml.jackson.databind.util.StdConverter v0;
com.fasterxml.jackson.databind.type.TypeFactory v1;
int v5;
java.lang.Class v2, v7;
com.fasterxml.jackson.databind.JavaType v3, v4;
java.lang.String v8, v9;
v0 := @this: com.fasterxml.jackson.databind.util.StdConverter;
v1 := @parameter0: com.fasterxml.jackson.databind.type.TypeFactory;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v1.<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType constructType(java.lang.reflect.Type)>(v2);
v4 = virtualinvoke v3.<com.fasterxml.jackson.databind.JavaType: com.fasterxml.jackson.databind.JavaType findSuperType(java.lang.Class)>(class "Lcom/fasterxml/jackson/databind/util/Converter;");
if v4 == null goto label1;
v5 = virtualinvoke v4.<com.fasterxml.jackson.databind.JavaType: int containedTypeCount()>();
if v5 >= 2 goto label2;
label1:
v6 = new java.lang.IllegalStateException;
v7 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v8 = virtualinvoke v7.<java.lang.Class: java.lang.String getName()>();
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot find OUT type parameter for Converter of type \u0001");
specialinvoke v6.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v9);
throw v6;
label2:
return v4;
}
}