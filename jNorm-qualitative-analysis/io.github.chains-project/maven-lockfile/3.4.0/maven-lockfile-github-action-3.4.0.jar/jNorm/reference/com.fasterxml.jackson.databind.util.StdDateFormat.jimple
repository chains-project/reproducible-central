public class com.fasterxml.jackson.databind.util.StdDateFormat extends java.text.DateFormat
{
protected static final java.lang.String PATTERN_PLAIN_STR;
protected static final java.util.regex.Pattern PATTERN_PLAIN;
protected static final java.util.regex.Pattern PATTERN_ISO8601;
public static final java.lang.String DATE_FORMAT_STR_ISO8601;
protected static final java.lang.String DATE_FORMAT_STR_PLAIN;
protected static final java.lang.String DATE_FORMAT_STR_RFC1123;
protected static final java.lang.String[] ALL_FORMATS;
protected static final java.util.TimeZone DEFAULT_TIMEZONE;
protected static final java.util.Locale DEFAULT_LOCALE;
protected static final java.text.DateFormat DATE_FORMAT_RFC1123;
public static final com.fasterxml.jackson.databind.util.StdDateFormat instance;
protected static final java.util.Calendar CALENDAR;
protected transient java.util.TimeZone _timezone;
protected final java.util.Locale _locale;
protected java.lang.Boolean _lenient;
private transient java.util.Calendar _calendar;
private transient java.text.DateFormat _formatRFC1123;
private boolean _tzSerializedWithColon;
public void <init>()
{
com.fasterxml.jackson.databind.util.StdDateFormat v0;
java.util.Locale v1;
v0 := @this: com.fasterxml.jackson.databind.util.StdDateFormat;
specialinvoke v0.<java.text.DateFormat: void <init>()>();
v0.<com.fasterxml.jackson.databind.util.StdDateFormat: boolean _tzSerializedWithColon> = 1;
v1 = <com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Locale DEFAULT_LOCALE>;
v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Locale _locale> = v1;
return;
}
public void <init>(java.util.TimeZone, java.util.Locale)
{
com.fasterxml.jackson.databind.util.StdDateFormat v0;
java.util.Locale v2;
java.util.TimeZone v1;
v0 := @this: com.fasterxml.jackson.databind.util.StdDateFormat;
v1 := @parameter0: java.util.TimeZone;
v2 := @parameter1: java.util.Locale;
specialinvoke v0.<java.text.DateFormat: void <init>()>();
v0.<com.fasterxml.jackson.databind.util.StdDateFormat: boolean _tzSerializedWithColon> = 1;
v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone _timezone> = v1;
v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Locale _locale> = v2;
return;
}
protected void <init>(java.util.TimeZone, java.util.Locale, java.lang.Boolean)
{
java.util.Locale v2;
java.util.TimeZone v1;
java.lang.Boolean v3;
com.fasterxml.jackson.databind.util.StdDateFormat v0;
v0 := @this: com.fasterxml.jackson.databind.util.StdDateFormat;
v1 := @parameter0: java.util.TimeZone;
v2 := @parameter1: java.util.Locale;
v3 := @parameter2: java.lang.Boolean;
specialinvoke v0.<com.fasterxml.jackson.databind.util.StdDateFormat: void <init>(java.util.TimeZone,java.util.Locale,java.lang.Boolean,boolean)>(v1, v2, v3, 0);
return;
}
protected void <init>(java.util.TimeZone, java.util.Locale, java.lang.Boolean, boolean)
{
java.util.Locale v2;
java.util.TimeZone v1;
java.lang.Boolean v3;
com.fasterxml.jackson.databind.util.StdDateFormat v0;
boolean v4;
v0 := @this: com.fasterxml.jackson.databind.util.StdDateFormat;
v1 := @parameter0: java.util.TimeZone;
v2 := @parameter1: java.util.Locale;
v3 := @parameter2: java.lang.Boolean;
v4 := @parameter3: boolean;
specialinvoke v0.<java.text.DateFormat: void <init>()>();
v0.<com.fasterxml.jackson.databind.util.StdDateFormat: boolean _tzSerializedWithColon> = 1;
v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone _timezone> = v1;
v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Locale _locale> = v2;
v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.Boolean _lenient> = v3;
v0.<com.fasterxml.jackson.databind.util.StdDateFormat: boolean _tzSerializedWithColon> = v4;
return;
}
public static java.util.TimeZone getDefaultTimeZone()
{
java.util.TimeZone v0;
v0 = <com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone DEFAULT_TIMEZONE>;
return v0;
}
public com.fasterxml.jackson.databind.util.StdDateFormat withTimeZone(java.util.TimeZone)
{
java.util.TimeZone v1, v2, v3;
java.util.Locale v6;
java.lang.Boolean v7;
com.fasterxml.jackson.databind.util.StdDateFormat v0, v5;
boolean v4, v8;
v0 := @this: com.fasterxml.jackson.databind.util.StdDateFormat;
v1 := @parameter0: java.util.TimeZone;
if v1 != null goto label1;
v1 = <com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone DEFAULT_TIMEZONE>;
label1:
v2 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone _timezone>;
if v1 == v2 goto label2;
v3 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone _timezone>;
v4 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(v3);
if v4 == 0 goto label3;
label2:
return v0;
label3:
v5 = new com.fasterxml.jackson.databind.util.StdDateFormat;
v6 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Locale _locale>;
v7 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.Boolean _lenient>;
v8 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: boolean _tzSerializedWithColon>;
specialinvoke v5.<com.fasterxml.jackson.databind.util.StdDateFormat: void <init>(java.util.TimeZone,java.util.Locale,java.lang.Boolean,boolean)>(v1, v6, v7, v8);
return v5;
}
public com.fasterxml.jackson.databind.util.StdDateFormat withLocale(java.util.Locale)
{
java.util.TimeZone v5;
java.util.Locale v1, v2;
java.lang.Boolean v6;
com.fasterxml.jackson.databind.util.StdDateFormat v0, v4;
boolean v3, v7;
v0 := @this: com.fasterxml.jackson.databind.util.StdDateFormat;
v1 := @parameter0: java.util.Locale;
v2 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Locale _locale>;
v3 = virtualinvoke v1.<java.util.Locale: boolean equals(java.lang.Object)>(v2);
if v3 == 0 goto label1;
return v0;
label1:
v4 = new com.fasterxml.jackson.databind.util.StdDateFormat;
v5 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone _timezone>;
v6 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.Boolean _lenient>;
v7 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: boolean _tzSerializedWithColon>;
specialinvoke v4.<com.fasterxml.jackson.databind.util.StdDateFormat: void <init>(java.util.TimeZone,java.util.Locale,java.lang.Boolean,boolean)>(v5, v1, v6, v7);
return v4;
}
public com.fasterxml.jackson.databind.util.StdDateFormat withLenient(java.lang.Boolean)
{
java.util.TimeZone v5;
java.util.Locale v6;
java.lang.Boolean v1, v2;
com.fasterxml.jackson.databind.util.StdDateFormat v0, v4;
boolean v3, v7;
v0 := @this: com.fasterxml.jackson.databind.util.StdDateFormat;
v1 := @parameter0: java.lang.Boolean;
v2 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.Boolean _lenient>;
v3 = staticinvoke <com.fasterxml.jackson.databind.util.StdDateFormat: boolean _equals(java.lang.Object,java.lang.Object)>(v1, v2);
if v3 == 0 goto label1;
return v0;
label1:
v4 = new com.fasterxml.jackson.databind.util.StdDateFormat;
v5 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone _timezone>;
v6 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Locale _locale>;
v7 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: boolean _tzSerializedWithColon>;
specialinvoke v4.<com.fasterxml.jackson.databind.util.StdDateFormat: void <init>(java.util.TimeZone,java.util.Locale,java.lang.Boolean,boolean)>(v5, v6, v1, v7);
return v4;
}
public com.fasterxml.jackson.databind.util.StdDateFormat withColonInTimeZone(boolean)
{
java.util.Locale v5;
java.util.TimeZone v4;
java.lang.Boolean v6;
com.fasterxml.jackson.databind.util.StdDateFormat v0, v3;
boolean v1, v2;
v0 := @this: com.fasterxml.jackson.databind.util.StdDateFormat;
v1 := @parameter0: boolean;
v2 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: boolean _tzSerializedWithColon>;
if v2 != v1 goto label1;
return v0;
label1:
v3 = new com.fasterxml.jackson.databind.util.StdDateFormat;
v4 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone _timezone>;
v5 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Locale _locale>;
v6 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.Boolean _lenient>;
specialinvoke v3.<com.fasterxml.jackson.databind.util.StdDateFormat: void <init>(java.util.TimeZone,java.util.Locale,java.lang.Boolean,boolean)>(v4, v5, v6, v1);
return v3;
}
public com.fasterxml.jackson.databind.util.StdDateFormat clone()
{
java.util.Locale v3;
java.util.TimeZone v2;
java.lang.Boolean v4;
com.fasterxml.jackson.databind.util.StdDateFormat v0, v1;
boolean v5;
v0 := @this: com.fasterxml.jackson.databind.util.StdDateFormat;
v1 = new com.fasterxml.jackson.databind.util.StdDateFormat;
v2 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone _timezone>;
v3 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Locale _locale>;
v4 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.Boolean _lenient>;
v5 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: boolean _tzSerializedWithColon>;
specialinvoke v1.<com.fasterxml.jackson.databind.util.StdDateFormat: void <init>(java.util.TimeZone,java.util.Locale,java.lang.Boolean,boolean)>(v2, v3, v4, v5);
return v1;
}
public static java.text.DateFormat getISO8601Format(java.util.TimeZone, java.util.Locale)
{
java.util.Locale v1;
java.util.TimeZone v0, v3;
java.text.SimpleDateFormat v2;
v0 := @parameter0: java.util.TimeZone;
v1 := @parameter1: java.util.Locale;
v2 = new java.text.SimpleDateFormat;
specialinvoke v2.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("yyyy-MM-dd\'T\'HH:mm:ss.SSSX", v1);
v3 = <com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone DEFAULT_TIMEZONE>;
virtualinvoke v2.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>(v3);
return v2;
}
public static java.text.DateFormat getRFC1123Format(java.util.TimeZone, java.util.Locale)
{
java.util.Locale v1;
java.util.TimeZone v0;
java.text.DateFormat v2, v3;
v0 := @parameter0: java.util.TimeZone;
v1 := @parameter1: java.util.Locale;
v2 = <com.fasterxml.jackson.databind.util.StdDateFormat: java.text.DateFormat DATE_FORMAT_RFC1123>;
v3 = staticinvoke <com.fasterxml.jackson.databind.util.StdDateFormat: java.text.DateFormat _cloneFormat(java.text.DateFormat,java.lang.String,java.util.TimeZone,java.util.Locale,java.lang.Boolean)>(v2, "EEE, dd MMM yyyy HH:mm:ss zzz", v0, v1, null);
return v3;
}
public java.util.TimeZone getTimeZone()
{
com.fasterxml.jackson.databind.util.StdDateFormat v0;
java.util.TimeZone v1;
v0 := @this: com.fasterxml.jackson.databind.util.StdDateFormat;
v1 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone _timezone>;
return v1;
}
public void setTimeZone(java.util.TimeZone)
{
java.util.TimeZone v1, v2;
com.fasterxml.jackson.databind.util.StdDateFormat v0;
boolean v3;
v0 := @this: com.fasterxml.jackson.databind.util.StdDateFormat;
v1 := @parameter0: java.util.TimeZone;
v2 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone _timezone>;
v3 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(v2);
if v3 != 0 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.databind.util.StdDateFormat: void _clearFormats()>();
v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone _timezone> = v1;
label1:
return;
}
public void setLenient(boolean)
{
java.lang.Boolean v2, v3;
com.fasterxml.jackson.databind.util.StdDateFormat v0;
boolean v1, v4;
v0 := @this: com.fasterxml.jackson.databind.util.StdDateFormat;
v1 := @parameter0: boolean;
v2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v1);
v3 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.Boolean _lenient>;
v4 = staticinvoke <com.fasterxml.jackson.databind.util.StdDateFormat: boolean _equals(java.lang.Object,java.lang.Object)>(v2, v3);
if v4 != 0 goto label1;
v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.Boolean _lenient> = v2;
virtualinvoke v0.<com.fasterxml.jackson.databind.util.StdDateFormat: void _clearFormats()>();
label1:
return;
}
public boolean isLenient()
{
java.lang.Boolean v1, v2;
com.fasterxml.jackson.databind.util.StdDateFormat v0;
boolean v3, v4;
v0 := @this: com.fasterxml.jackson.databind.util.StdDateFormat;
v1 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.Boolean _lenient>;
if v1 == null goto label1;
v2 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.Boolean _lenient>;
v3 = virtualinvoke v2.<java.lang.Boolean: boolean booleanValue()>();
if v3 == 0 goto label2;
label1:
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
return v4;
}
public boolean isColonIncludedInTimeZone()
{
com.fasterxml.jackson.databind.util.StdDateFormat v0;
boolean v1;
v0 := @this: com.fasterxml.jackson.databind.util.StdDateFormat;
v1 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: boolean _tzSerializedWithColon>;
return v1;
}
public java.util.Date parse(java.lang.String) throws java.text.ParseException
{
java.lang.Object[] v12;
java.util.Date v4;
java.text.ParsePosition v3;
java.lang.String[] v6;
int v10, v15, v7, v8;
java.lang.String v1, v13, v14, v2, v9;
java.text.ParseException v11;
java.lang.StringBuilder v5;
com.fasterxml.jackson.databind.util.StdDateFormat v0;
v0 := @this: com.fasterxml.jackson.databind.util.StdDateFormat;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v1.<java.lang.String: java.lang.String trim()>();
v3 = new java.text.ParsePosition;
specialinvoke v3.<java.text.ParsePosition: void <init>(int)>(0);
v4 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Date _parseDate(java.lang.String,java.text.ParsePosition)>(v2, v3);
if v4 == null goto label1;
return v4;
label1:
v5 = new java.lang.StringBuilder;
specialinvoke v5.<java.lang.StringBuilder: void <init>()>();
v6 = <com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.String[] ALL_FORMATS>;
v7 = lengthof v6;
v8 = 0;
label2:
if v8 >= v7 goto label5;
v9 = v6[v8];
v10 = virtualinvoke v5.<java.lang.StringBuilder: int length()>();
if v10 <= 0 goto label3;
virtualinvoke v5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\", \"");
goto label4;
label3:
virtualinvoke v5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);
label4:
virtualinvoke v5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v9);
v8 = v8 + 1;
goto label2;
label5:
virtualinvoke v5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);
v11 = new java.text.ParseException;
v12 = newarray (java.lang.Object)[2];
v12[0] = v2;
v13 = virtualinvoke v5.<java.lang.StringBuilder: java.lang.String toString()>();
v12[1] = v13;
v14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Cannot parse date \"%s\": not compatible with any of standard forms (%s)", v12);
v15 = virtualinvoke v3.<java.text.ParsePosition: int getErrorIndex()>();
specialinvoke v11.<java.text.ParseException: void <init>(java.lang.String,int)>(v14, v15);
throw v11;
}
public java.util.Date parse(java.lang.String, java.text.ParsePosition)
{
java.util.Date v3;
java.text.ParsePosition v2;
com.fasterxml.jackson.databind.util.StdDateFormat v0;
java.lang.String v1;
java.text.ParseException v4;
v0 := @this: com.fasterxml.jackson.databind.util.StdDateFormat;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.text.ParsePosition;
label1:
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Date _parseDate(java.lang.String,java.text.ParsePosition)>(v1, v2);
label2:
return v3;
label3:
v4 := @caughtexception;
return null;
catch java.text.ParseException from label1 to label2 with label3;
}
protected java.util.Date _parseDate(java.lang.String, java.text.ParsePosition) throws java.text.ParseException
{
java.util.Date v10, v4, v9;
java.text.ParsePosition v2;
char v6, v7;
int v5;
com.fasterxml.jackson.databind.util.StdDateFormat v0;
java.lang.String v1;
boolean v3, v8;
v0 := @this: com.fasterxml.jackson.databind.util.StdDateFormat;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.text.ParsePosition;
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.StdDateFormat: boolean looksLikeISO8601(java.lang.String)>(v1);
if v3 == 0 goto label1;
v4 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Date parseAsISO8601(java.lang.String,java.text.ParsePosition)>(v1, v2);
return v4;
label1:
v5 = virtualinvoke v1.<java.lang.String: int length()>();
label2:
v5 = v5 - 1;
if v5 < 0 goto label4;
v6 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v5);
if v6 < 48 goto label3;
if v6 <= 57 goto label2;
label3:
if v5 > 0 goto label4;
if v6 == 45 goto label2;
label4:
if v5 >= 0 goto label6;
v7 = virtualinvoke v1.<java.lang.String: char charAt(int)>(0);
if v7 == 45 goto label5;
v8 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: boolean inLongRange(java.lang.String,boolean)>(v1, 0);
if v8 == 0 goto label6;
label5:
v9 = specialinvoke v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Date _parseDateFromLong(java.lang.String,java.text.ParsePosition)>(v1, v2);
return v9;
label6:
v10 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Date parseAsRFC1123(java.lang.String,java.text.ParsePosition)>(v1, v2);
return v10;
}
public java.lang.StringBuffer format(java.util.Date, java.lang.StringBuffer, java.text.FieldPosition)
{
java.text.FieldPosition v3;
java.lang.StringBuffer v2;
java.util.Date v1;
java.util.Locale v5;
java.util.TimeZone v4;
com.fasterxml.jackson.databind.util.StdDateFormat v0;
v0 := @this: com.fasterxml.jackson.databind.util.StdDateFormat;
v1 := @parameter0: java.util.Date;
v2 := @parameter1: java.lang.StringBuffer;
v3 := @parameter2: java.text.FieldPosition;
v4 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone _timezone>;
if v4 != null goto label1;
v4 = <com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone DEFAULT_TIMEZONE>;
label1:
v5 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Locale _locale>;
virtualinvoke v0.<com.fasterxml.jackson.databind.util.StdDateFormat: void _format(java.util.TimeZone,java.util.Locale,java.util.Date,java.lang.StringBuffer)>(v4, v5, v1, v2);
return v2;
}
protected void _format(java.util.TimeZone, java.util.Locale, java.util.Date, java.lang.StringBuffer)
{
java.util.Date v3;
long v15;
java.util.Calendar v5;
java.lang.StringBuffer v4;
java.util.Locale v2;
int v10, v11, v12, v13, v14, v16, v17, v18, v19, v20, v21, v22, v23, v24, v6, v7, v8, v9;
boolean v26, v27;
java.util.TimeZone v1;
char v25;
com.fasterxml.jackson.databind.util.StdDateFormat v0;
v0 := @this: com.fasterxml.jackson.databind.util.StdDateFormat;
v1 := @parameter0: java.util.TimeZone;
v2 := @parameter1: java.util.Locale;
v3 := @parameter2: java.util.Date;
v4 := @parameter3: java.lang.StringBuffer;
v5 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Calendar _getCalendar(java.util.TimeZone)>(v1);
virtualinvoke v5.<java.util.Calendar: void setTime(java.util.Date)>(v3);
v6 = virtualinvoke v5.<java.util.Calendar: int get(int)>(1);
v7 = virtualinvoke v5.<java.util.Calendar: int get(int)>(0);
if v7 != 0 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.databind.util.StdDateFormat: void _formatBCEYear(java.lang.StringBuffer,int)>(v4, v6);
goto label3;
label1:
if v6 <= 9999 goto label2;
virtualinvoke v4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(43);
label2:
staticinvoke <com.fasterxml.jackson.databind.util.StdDateFormat: void pad4(java.lang.StringBuffer,int)>(v4, v6);
label3:
virtualinvoke v4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);
v8 = virtualinvoke v5.<java.util.Calendar: int get(int)>(2);
v9 = v8 + 1;
staticinvoke <com.fasterxml.jackson.databind.util.StdDateFormat: void pad2(java.lang.StringBuffer,int)>(v4, v9);
virtualinvoke v4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);
v10 = virtualinvoke v5.<java.util.Calendar: int get(int)>(5);
staticinvoke <com.fasterxml.jackson.databind.util.StdDateFormat: void pad2(java.lang.StringBuffer,int)>(v4, v10);
virtualinvoke v4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(84);
v11 = virtualinvoke v5.<java.util.Calendar: int get(int)>(11);
staticinvoke <com.fasterxml.jackson.databind.util.StdDateFormat: void pad2(java.lang.StringBuffer,int)>(v4, v11);
virtualinvoke v4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);
v12 = virtualinvoke v5.<java.util.Calendar: int get(int)>(12);
staticinvoke <com.fasterxml.jackson.databind.util.StdDateFormat: void pad2(java.lang.StringBuffer,int)>(v4, v12);
virtualinvoke v4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);
v13 = virtualinvoke v5.<java.util.Calendar: int get(int)>(13);
staticinvoke <com.fasterxml.jackson.databind.util.StdDateFormat: void pad2(java.lang.StringBuffer,int)>(v4, v13);
virtualinvoke v4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);
v14 = virtualinvoke v5.<java.util.Calendar: int get(int)>(14);
staticinvoke <com.fasterxml.jackson.databind.util.StdDateFormat: void pad3(java.lang.StringBuffer,int)>(v4, v14);
v15 = virtualinvoke v5.<java.util.Calendar: long getTimeInMillis()>();
v16 = virtualinvoke v1.<java.util.TimeZone: int getOffset(long)>(v15);
if v16 == 0 goto label7;
v17 = (int) 60000;
v18 = v16 / v17;
v19 = v18 / 60;
v20 = staticinvoke <java.lang.Math: int abs(int)>(v19);
v21 = (int) 60000;
v22 = v16 / v21;
v23 = v22 % 60;
v24 = staticinvoke <java.lang.Math: int abs(int)>(v23);
if v16 >= 0 goto label4;
v25 = 45;
goto label5;
label4:
v25 = 43;
label5:
virtualinvoke v4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(v25);
staticinvoke <com.fasterxml.jackson.databind.util.StdDateFormat: void pad2(java.lang.StringBuffer,int)>(v4, v20);
v26 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: boolean _tzSerializedWithColon>;
if v26 == 0 goto label6;
virtualinvoke v4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);
label6:
staticinvoke <com.fasterxml.jackson.databind.util.StdDateFormat: void pad2(java.lang.StringBuffer,int)>(v4, v24);
goto label9;
label7:
v27 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: boolean _tzSerializedWithColon>;
if v27 == 0 goto label8;
virtualinvoke v4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("+00:00");
goto label9;
label8:
virtualinvoke v4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("+0000");
label9:
return;
}
protected void _formatBCEYear(java.lang.StringBuffer, int)
{
java.lang.StringBuffer v1;
int v2, v3;
com.fasterxml.jackson.databind.util.StdDateFormat v0;
v0 := @this: com.fasterxml.jackson.databind.util.StdDateFormat;
v1 := @parameter0: java.lang.StringBuffer;
v2 := @parameter1: int;
if v2 != 1 goto label1;
virtualinvoke v1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("+0000");
return;
label1:
v3 = v2 - 1;
virtualinvoke v1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45);
staticinvoke <com.fasterxml.jackson.databind.util.StdDateFormat: void pad4(java.lang.StringBuffer,int)>(v1, v3);
return;
}
private static void pad2(java.lang.StringBuffer, int)
{
java.lang.StringBuffer v0;
int v1, v2, v3, v4, v5;
v0 := @parameter0: java.lang.StringBuffer;
v1 := @parameter1: int;
v2 = v1 / 10;
if v2 != 0 goto label1;
virtualinvoke v0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);
goto label2;
label1:
v3 = 48 + v2;
virtualinvoke v0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(v3);
v4 = 10 * v2;
v1 = v1 - v4;
label2:
v5 = 48 + v1;
virtualinvoke v0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(v5);
return;
}
private static void pad3(java.lang.StringBuffer, int)
{
java.lang.StringBuffer v0;
int v1, v2, v3, v4;
v0 := @parameter0: java.lang.StringBuffer;
v1 := @parameter1: int;
v2 = v1 / 100;
if v2 != 0 goto label1;
virtualinvoke v0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);
goto label2;
label1:
v3 = 48 + v2;
virtualinvoke v0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(v3);
v4 = v2 * 100;
v1 = v1 - v4;
label2:
staticinvoke <com.fasterxml.jackson.databind.util.StdDateFormat: void pad2(java.lang.StringBuffer,int)>(v0, v1);
return;
}
private static void pad4(java.lang.StringBuffer, int)
{
java.lang.StringBuffer v0, v3;
int v1, v2, v4;
v0 := @parameter0: java.lang.StringBuffer;
v1 := @parameter1: int;
v2 = v1 / 100;
if v2 != 0 goto label1;
v3 = virtualinvoke v0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);
virtualinvoke v3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);
goto label4;
label1:
if v2 <= 99 goto label2;
virtualinvoke v0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(v2);
goto label3;
label2:
staticinvoke <com.fasterxml.jackson.databind.util.StdDateFormat: void pad2(java.lang.StringBuffer,int)>(v0, v2);
label3:
v4 = 100 * v2;
v1 = v1 - v4;
label4:
staticinvoke <com.fasterxml.jackson.databind.util.StdDateFormat: void pad2(java.lang.StringBuffer,int)>(v0, v1);
return;
}
public java.lang.String toString()
{
java.lang.Object[] v1;
java.util.TimeZone v4;
java.util.Locale v5;
java.lang.Boolean v6;
java.lang.Class v2;
com.fasterxml.jackson.databind.util.StdDateFormat v0;
java.lang.String v3, v7;
v0 := @this: com.fasterxml.jackson.databind.util.StdDateFormat;
v1 = newarray (java.lang.Object)[4];
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v2.<java.lang.Class: java.lang.String getName()>();
v1[0] = v3;
v4 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone _timezone>;
v1[1] = v4;
v5 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Locale _locale>;
v1[2] = v5;
v6 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.Boolean _lenient>;
v1[3] = v6;
v7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("DateFormat %s: (timezone: %s, locale: %s, lenient: %s)", v1);
return v7;
}
public java.lang.String toPattern()
{
java.lang.Boolean v6, v7;
java.lang.StringBuilder v1, v10, v2, v3, v4, v5;
com.fasterxml.jackson.databind.util.StdDateFormat v0;
java.lang.String v11, v9;
boolean v8;
v0 := @this: com.fasterxml.jackson.databind.util.StdDateFormat;
v1 = new java.lang.StringBuilder;
specialinvoke v1.<java.lang.StringBuilder: void <init>(int)>(100);
v2 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[one of: \'");
v3 = virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ss.SSSX");
v4 = virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', \'");
v5 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("EEE, dd MMM yyyy HH:mm:ss zzz");
virtualinvoke v5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (");
v6 = <java.lang.Boolean: java.lang.Boolean FALSE>;
v7 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.Boolean _lenient>;
v8 = virtualinvoke v6.<java.lang.Boolean: boolean equals(java.lang.Object)>(v7);
if v8 == 0 goto label1;
v9 = "strict";
goto label2;
label1:
v9 = "lenient";
label2:
v10 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v9);
virtualinvoke v10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")]");
v11 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.String toString()>();
return v11;
}
public boolean equals(java.lang.Object)
{
java.lang.Object v1;
com.fasterxml.jackson.databind.util.StdDateFormat v0;
boolean v2;
v0 := @this: com.fasterxml.jackson.databind.util.StdDateFormat;
v1 := @parameter0: java.lang.Object;
if v1 != v0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public int hashCode()
{
int v1;
com.fasterxml.jackson.databind.util.StdDateFormat v0;
v0 := @this: com.fasterxml.jackson.databind.util.StdDateFormat;
v1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(v0);
return v1;
}
protected boolean looksLikeISO8601(java.lang.String)
{
char v3, v5, v7, v8;
int v2;
com.fasterxml.jackson.databind.util.StdDateFormat v0;
java.lang.String v1;
boolean v4, v6, v9;
v0 := @this: com.fasterxml.jackson.databind.util.StdDateFormat;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v1.<java.lang.String: int length()>();
if v2 < 7 goto label1;
v3 = virtualinvoke v1.<java.lang.String: char charAt(int)>(0);
v4 = staticinvoke <java.lang.Character: boolean isDigit(char)>(v3);
if v4 == 0 goto label1;
v5 = virtualinvoke v1.<java.lang.String: char charAt(int)>(3);
v6 = staticinvoke <java.lang.Character: boolean isDigit(char)>(v5);
if v6 == 0 goto label1;
v7 = virtualinvoke v1.<java.lang.String: char charAt(int)>(4);
if v7 != 45 goto label1;
v8 = virtualinvoke v1.<java.lang.String: char charAt(int)>(5);
v9 = staticinvoke <java.lang.Character: boolean isDigit(char)>(v8);
if v9 == 0 goto label1;
return 1;
label1:
return 0;
}
private java.util.Date _parseDateFromLong(java.lang.String, java.text.ParsePosition) throws java.text.ParseException
{
java.lang.Object[] v6;
java.util.Date v9;
java.text.ParsePosition v2;
java.lang.NumberFormatException v4;
long v3;
int v8;
com.fasterxml.jackson.databind.util.StdDateFormat v0;
java.lang.String v1, v7;
java.text.ParseException v5;
v0 := @this: com.fasterxml.jackson.databind.util.StdDateFormat;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.text.ParsePosition;
label1:
v3 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: long parseLong(java.lang.String)>(v1);
label2:
goto label4;
label3:
v4 := @caughtexception;
v5 = new java.text.ParseException;
v6 = newarray (java.lang.Object)[1];
v6[0] = v1;
v7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Timestamp value %s out of 64-bit value range", v6);
v8 = virtualinvoke v2.<java.text.ParsePosition: int getErrorIndex()>();
specialinvoke v5.<java.text.ParseException: void <init>(java.lang.String,int)>(v7, v8);
throw v5;
label4:
v9 = new java.util.Date;
specialinvoke v9.<java.util.Date: void <init>(long)>(v3);
return v9;
catch java.lang.NumberFormatException from label1 to label2 with label3;
}
protected java.util.Date parseAsISO8601(java.lang.String, java.text.ParsePosition) throws java.text.ParseException
{
java.lang.Object[] v6;
java.util.Date v3;
java.text.ParsePosition v2;
java.lang.IllegalArgumentException v4;
int v9;
com.fasterxml.jackson.databind.util.StdDateFormat v0;
java.lang.String v1, v7, v8;
java.text.ParseException v5;
v0 := @this: com.fasterxml.jackson.databind.util.StdDateFormat;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.text.ParsePosition;
label1:
v3 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Date _parseAsISO8601(java.lang.String,java.text.ParsePosition)>(v1, v2);
label2:
return v3;
label3:
v4 := @caughtexception;
v5 = new java.text.ParseException;
v6 = newarray (java.lang.Object)[2];
v6[0] = v1;
v7 = virtualinvoke v4.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();
v6[1] = v7;
v8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Cannot parse date \"%s\", problem: %s", v6);
v9 = virtualinvoke v2.<java.text.ParsePosition: int getErrorIndex()>();
specialinvoke v5.<java.text.ParseException: void <init>(java.lang.String,int)>(v8, v9);
throw v5;
catch java.lang.IllegalArgumentException from label1 to label2 with label3;
}
protected java.util.Date _parseAsISO8601(java.lang.String, java.text.ParsePosition) throws java.lang.IllegalArgumentException, java.text.ParseException
{
java.util.regex.Matcher v10, v19;
java.lang.Object[] v47, v63;
java.util.Calendar v8;
java.lang.String v1, v17, v48, v49, v50, v65;
com.fasterxml.jackson.databind.util.StdDateFormat v0;
java.util.Date v16, v61;
java.text.ParseException v46, v62;
boolean v11, v20;
java.util.TimeZone v4, v5;
java.util.regex.Pattern v18, v9;
java.text.ParsePosition v2;
int v12, v13, v14, v15, v21, v22, v23, v24, v25, v26, v27, v28, v29, v3, v31, v32, v33, v34, v35, v36, v37, v38, v40, v41, v42, v43, v44, v45, v51, v53, v54, v56, v57, v59, v6, v60;
java.lang.Boolean v64;
char v30, v39, v52, v55, v58, v7;
v0 := @this: com.fasterxml.jackson.databind.util.StdDateFormat;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.text.ParsePosition;
v3 = virtualinvoke v1.<java.lang.String: int length()>();
v4 = <com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone DEFAULT_TIMEZONE>;
v5 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone _timezone>;
if v5 == null goto label01;
v6 = v3 - 1;
v7 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v6);
if 90 == v7 goto label01;
v4 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone _timezone>;
label01:
v8 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Calendar _getCalendar(java.util.TimeZone)>(v4);
virtualinvoke v8.<java.util.Calendar: void clear()>();
if v3 > 10 goto label03;
v9 = <com.fasterxml.jackson.databind.util.StdDateFormat: java.util.regex.Pattern PATTERN_PLAIN>;
v10 = virtualinvoke v9.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v1);
v11 = virtualinvoke v10.<java.util.regex.Matcher: boolean matches()>();
if v11 == 0 goto label02;
v12 = staticinvoke <com.fasterxml.jackson.databind.util.StdDateFormat: int _parse4D(java.lang.String,int)>(v1, 0);
v13 = staticinvoke <com.fasterxml.jackson.databind.util.StdDateFormat: int _parse2D(java.lang.String,int)>(v1, 5);
v14 = v13 - 1;
v15 = staticinvoke <com.fasterxml.jackson.databind.util.StdDateFormat: int _parse2D(java.lang.String,int)>(v1, 8);
virtualinvoke v8.<java.util.Calendar: void set(int,int,int,int,int,int)>(v12, v14, v15, 0, 0, 0);
virtualinvoke v8.<java.util.Calendar: void set(int,int)>(14, 0);
v16 = virtualinvoke v8.<java.util.Calendar: java.util.Date getTime()>();
return v16;
label02:
v17 = "yyyy-MM-dd";
goto label18;
label03:
v18 = <com.fasterxml.jackson.databind.util.StdDateFormat: java.util.regex.Pattern PATTERN_ISO8601>;
v19 = virtualinvoke v18.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v1);
v20 = virtualinvoke v19.<java.util.regex.Matcher: boolean matches()>();
if v20 == 0 goto label17;
v21 = virtualinvoke v19.<java.util.regex.Matcher: int start(int)>(2);
v22 = virtualinvoke v19.<java.util.regex.Matcher: int end(int)>(2);
v23 = v22 - v21;
if v23 <= 1 goto label07;
v24 = v21 + 1;
v25 = staticinvoke <com.fasterxml.jackson.databind.util.StdDateFormat: int _parse2D(java.lang.String,int)>(v1, v24);
v26 = v25 * 3600;
if v23 < 5 goto label04;
v27 = v22 - 2;
v28 = staticinvoke <com.fasterxml.jackson.databind.util.StdDateFormat: int _parse2D(java.lang.String,int)>(v1, v27);
v29 = v28 * 60;
v26 = v26 + v29;
label04:
v30 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v21);
if v30 != 45 goto label05;
v31 = (int) -1000;
v32 = v26 * v31;
goto label06;
label05:
v32 = v26 * 1000;
label06:
virtualinvoke v8.<java.util.Calendar: void set(int,int)>(15, v32);
virtualinvoke v8.<java.util.Calendar: void set(int,int)>(16, 0);
label07:
v33 = staticinvoke <com.fasterxml.jackson.databind.util.StdDateFormat: int _parse4D(java.lang.String,int)>(v1, 0);
v34 = staticinvoke <com.fasterxml.jackson.databind.util.StdDateFormat: int _parse2D(java.lang.String,int)>(v1, 5);
v35 = v34 - 1;
v36 = staticinvoke <com.fasterxml.jackson.databind.util.StdDateFormat: int _parse2D(java.lang.String,int)>(v1, 8);
v37 = staticinvoke <com.fasterxml.jackson.databind.util.StdDateFormat: int _parse2D(java.lang.String,int)>(v1, 11);
v38 = staticinvoke <com.fasterxml.jackson.databind.util.StdDateFormat: int _parse2D(java.lang.String,int)>(v1, 14);
if v3 <= 16 goto label08;
v39 = virtualinvoke v1.<java.lang.String: char charAt(int)>(16);
if v39 != 58 goto label08;
v40 = staticinvoke <com.fasterxml.jackson.databind.util.StdDateFormat: int _parse2D(java.lang.String,int)>(v1, 17);
goto label09;
label08:
v40 = 0;
label09:
virtualinvoke v8.<java.util.Calendar: void set(int,int,int,int,int,int)>(v33, v35, v36, v37, v38, v40);
v41 = virtualinvoke v19.<java.util.regex.Matcher: int start(int)>(1);
v42 = v41 + 1;
v43 = virtualinvoke v19.<java.util.regex.Matcher: int end(int)>(1);
if v42 < v43 goto label10;
virtualinvoke v8.<java.util.Calendar: void set(int,int)>(14, 0);
goto label16;
label10:
v44 = 0;
v45 = v43 - v42;
tableswitch(v45)
{
case 0: goto label15;
case 1: goto label14;
case 2: goto label13;
case 3: goto label12;
default: goto label11;
};
label11:
if v45 <= 9 goto label12;
v46 = new java.text.ParseException;
v47 = newarray (java.lang.Object)[2];
v47[0] = v1;
v48 = virtualinvoke v19.<java.util.regex.Matcher: java.lang.String group(int)>(1);
v49 = virtualinvoke v48.<java.lang.String: java.lang.String substring(int)>(1);
v47[1] = v49;
v50 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Cannot parse date \"%s\": invalid fractional seconds \'%s\'; can use at most 9 digits", v47);
specialinvoke v46.<java.text.ParseException: void <init>(java.lang.String,int)>(v50, v42);
throw v46;
label12:
v51 = v42 + 2;
v52 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v51);
v53 = v52 - 48;
v44 = 0 + v53;
label13:
v54 = v42 + 1;
v55 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v54);
v56 = v55 - 48;
v57 = 10 * v56;
v44 = v44 + v57;
label14:
v58 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v42);
v59 = v58 - 48;
v60 = 100 * v59;
v44 = v44 + v60;
label15:
virtualinvoke v8.<java.util.Calendar: void set(int,int)>(14, v44);
label16:
v61 = virtualinvoke v8.<java.util.Calendar: java.util.Date getTime()>();
return v61;
label17:
v17 = "yyyy-MM-dd\'T\'HH:mm:ss.SSSX";
label18:
v62 = new java.text.ParseException;
v63 = newarray (java.lang.Object)[3];
v63[0] = v1;
v63[1] = v17;
v64 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.Boolean _lenient>;
v63[2] = v64;
v65 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Cannot parse date \"%s\": while it seems to fit format \'%s\', parsing fails (leniency? %s)", v63);
specialinvoke v62.<java.text.ParseException: void <init>(java.lang.String,int)>(v65, 0);
throw v62;
}
private static int _parse4D(java.lang.String, int)
{
int v1, v10, v12, v13, v14, v15, v17, v18, v3, v4, v5, v7, v8, v9;
java.lang.String v0;
char v11, v16, v2, v6;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v1);
v3 = v2 - 48;
v4 = 1000 * v3;
v5 = v1 + 1;
v6 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v5);
v7 = v6 - 48;
v8 = 100 * v7;
v9 = v4 + v8;
v10 = v1 + 2;
v11 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v10);
v12 = v11 - 48;
v13 = 10 * v12;
v14 = v9 + v13;
v15 = v1 + 3;
v16 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v15);
v17 = v16 - 48;
v18 = v14 + v17;
return v18;
}
private static int _parse2D(java.lang.String, int)
{
char v2, v6;
int v1, v3, v4, v5, v7, v8;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v1);
v3 = v2 - 48;
v4 = 10 * v3;
v5 = v1 + 1;
v6 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v5);
v7 = v6 - 48;
v8 = v4 + v7;
return v8;
}
protected java.util.Date parseAsRFC1123(java.lang.String, java.text.ParsePosition)
{
java.util.Date v10;
java.util.TimeZone v5;
java.text.ParsePosition v2;
java.util.Locale v6;
java.lang.Boolean v7;
com.fasterxml.jackson.databind.util.StdDateFormat v0;
java.lang.String v1;
java.text.DateFormat v3, v4, v8, v9;
v0 := @this: com.fasterxml.jackson.databind.util.StdDateFormat;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.text.ParsePosition;
v3 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.text.DateFormat _formatRFC1123>;
if v3 != null goto label1;
v4 = <com.fasterxml.jackson.databind.util.StdDateFormat: java.text.DateFormat DATE_FORMAT_RFC1123>;
v5 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone _timezone>;
v6 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Locale _locale>;
v7 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.Boolean _lenient>;
v8 = staticinvoke <com.fasterxml.jackson.databind.util.StdDateFormat: java.text.DateFormat _cloneFormat(java.text.DateFormat,java.lang.String,java.util.TimeZone,java.util.Locale,java.lang.Boolean)>(v4, "EEE, dd MMM yyyy HH:mm:ss zzz", v5, v6, v7);
v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.text.DateFormat _formatRFC1123> = v8;
label1:
v9 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.text.DateFormat _formatRFC1123>;
v10 = virtualinvoke v9.<java.text.DateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)>(v1, v2);
return v10;
}
private static final java.text.DateFormat _cloneFormat(java.text.DateFormat, java.lang.String, java.util.TimeZone, java.util.Locale, java.lang.Boolean)
{
java.util.TimeZone v2, v8;
java.text.SimpleDateFormat v7;
java.util.Locale v3, v5;
java.lang.Boolean v4;
java.lang.Object v9;
java.lang.String v1;
java.text.DateFormat v0;
boolean v10, v6;
v0 := @parameter0: java.text.DateFormat;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.util.TimeZone;
v3 := @parameter3: java.util.Locale;
v4 := @parameter4: java.lang.Boolean;
v5 = <com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Locale DEFAULT_LOCALE>;
v6 = virtualinvoke v3.<java.util.Locale: boolean equals(java.lang.Object)>(v5);
if v6 != 0 goto label3;
v7 = new java.text.SimpleDateFormat;
specialinvoke v7.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>(v1, v3);
if v2 != null goto label1;
v8 = <com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone DEFAULT_TIMEZONE>;
goto label2;
label1:
v8 = v2;
label2:
virtualinvoke v7.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>(v8);
goto label4;
label3:
v9 = virtualinvoke v0.<java.text.DateFormat: java.lang.Object clone()>();
if v2 == null goto label4;
virtualinvoke v9.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>(v2);
label4:
if v4 == null goto label5;
v10 = virtualinvoke v4.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v9.<java.text.DateFormat: void setLenient(boolean)>(v10);
label5:
return v9;
}
protected void _clearFormats()
{
com.fasterxml.jackson.databind.util.StdDateFormat v0;
v0 := @this: com.fasterxml.jackson.databind.util.StdDateFormat;
v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.text.DateFormat _formatRFC1123> = null;
return;
}
protected java.util.Calendar _getCalendar(java.util.TimeZone)
{
java.util.TimeZone v1, v5;
java.util.Calendar v2, v3;
java.lang.Object v4;
com.fasterxml.jackson.databind.util.StdDateFormat v0;
boolean v6, v7;
v0 := @this: com.fasterxml.jackson.databind.util.StdDateFormat;
v1 := @parameter0: java.util.TimeZone;
v2 = v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Calendar _calendar>;
if v2 != null goto label1;
v3 = <com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Calendar CALENDAR>;
v4 = virtualinvoke v3.<java.util.Calendar: java.lang.Object clone()>();
v2 = v4;
v0.<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Calendar _calendar> = v4;
label1:
v5 = virtualinvoke v2.<java.util.Calendar: java.util.TimeZone getTimeZone()>();
v6 = virtualinvoke v5.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v6 != 0 goto label2;
virtualinvoke v2.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>(v1);
label2:
v7 = virtualinvoke v0.<com.fasterxml.jackson.databind.util.StdDateFormat: boolean isLenient()>();
virtualinvoke v2.<java.util.Calendar: void setLenient(boolean)>(v7);
return v2;
}
protected static boolean _equals(java.lang.Object, java.lang.Object)
{
java.lang.Object v0, v1;
boolean v2, v3;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v0 == null goto label2;
v2 = virtualinvoke v0.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
if v2 == 0 goto label2;
v3 = 1;
goto label3;
label2:
v3 = 0;
label3:
return v3;
}
static void <clinit>()
{
java.util.GregorianCalendar v12;
java.util.TimeZone v10, v13, v5;
java.text.SimpleDateFormat v7;
java.lang.String[] v4;
java.lang.RuntimeException v3;
java.lang.Exception v2;
java.util.Locale v14, v6, v8;
com.fasterxml.jackson.databind.util.StdDateFormat v11;
java.util.regex.Pattern v0, v1;
java.text.DateFormat v9;
v0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\d\\d\\d\\d[-]\\d\\d[-]\\d\\d");
<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.regex.Pattern PATTERN_PLAIN> = v0;
label1:
v1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\d\\d\\d\\d[-]\\d\\d[-]\\d\\d[T]\\d\\d[:]\\d\\d(?:[:]\\d\\d)?(\\.\\d+)?(Z|[+-]\\d\\d(?:[:]?\\d\\d)?)?");
label2:
goto label4;
label3:
v2 := @caughtexception;
v3 = new java.lang.RuntimeException;
specialinvoke v3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(v2);
throw v3;
label4:
<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.regex.Pattern PATTERN_ISO8601> = v1;
v4 = newarray (java.lang.String)[4];
v4[0] = "yyyy-MM-dd\'T\'HH:mm:ss.SSSX";
v4[1] = "yyyy-MM-dd\'T\'HH:mm:ss.SSS";
v4[2] = "EEE, dd MMM yyyy HH:mm:ss zzz";
v4[3] = "yyyy-MM-dd";
<com.fasterxml.jackson.databind.util.StdDateFormat: java.lang.String[] ALL_FORMATS> = v4;
v5 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("UTC");
<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone DEFAULT_TIMEZONE> = v5;
v6 = <java.util.Locale: java.util.Locale US>;
<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Locale DEFAULT_LOCALE> = v6;
v7 = new java.text.SimpleDateFormat;
v8 = <com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Locale DEFAULT_LOCALE>;
specialinvoke v7.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("EEE, dd MMM yyyy HH:mm:ss zzz", v8);
<com.fasterxml.jackson.databind.util.StdDateFormat: java.text.DateFormat DATE_FORMAT_RFC1123> = v7;
v9 = <com.fasterxml.jackson.databind.util.StdDateFormat: java.text.DateFormat DATE_FORMAT_RFC1123>;
v10 = <com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone DEFAULT_TIMEZONE>;
virtualinvoke v9.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>(v10);
v11 = new com.fasterxml.jackson.databind.util.StdDateFormat;
specialinvoke v11.<com.fasterxml.jackson.databind.util.StdDateFormat: void <init>()>();
<com.fasterxml.jackson.databind.util.StdDateFormat: com.fasterxml.jackson.databind.util.StdDateFormat instance> = v11;
v12 = new java.util.GregorianCalendar;
v13 = <com.fasterxml.jackson.databind.util.StdDateFormat: java.util.TimeZone DEFAULT_TIMEZONE>;
v14 = <com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Locale DEFAULT_LOCALE>;
specialinvoke v12.<java.util.GregorianCalendar: void <init>(java.util.TimeZone,java.util.Locale)>(v13, v14);
<com.fasterxml.jackson.databind.util.StdDateFormat: java.util.Calendar CALENDAR> = v12;
return;
catch java.lang.Exception from label1 to label2 with label3;
}
}