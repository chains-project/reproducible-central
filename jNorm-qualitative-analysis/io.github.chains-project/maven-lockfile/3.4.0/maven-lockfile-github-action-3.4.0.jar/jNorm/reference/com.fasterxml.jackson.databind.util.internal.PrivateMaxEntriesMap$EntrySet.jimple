final class com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$EntrySet extends java.util.AbstractSet
{
final com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap map;
final com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap this$0;
void <init>(com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap)
{
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap v1, v2;
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$EntrySet v0;
v0 := @this: com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$EntrySet;
v1 := @parameter0: com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap;
v0.<com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$EntrySet: com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap this$0> = v1;
specialinvoke v0.<java.util.AbstractSet: void <init>()>();
v2 = v0.<com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$EntrySet: com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap this$0>;
v0.<com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$EntrySet: com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap map> = v2;
return;
}
public int size()
{
int v2;
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap v1;
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$EntrySet v0;
v0 := @this: com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$EntrySet;
v1 = v0.<com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$EntrySet: com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap map>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap: int size()>();
return v2;
}
public void clear()
{
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap v1;
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$EntrySet v0;
v0 := @this: com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$EntrySet;
v1 = v0.<com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$EntrySet: com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap map>;
virtualinvoke v1.<com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap: void clear()>();
return;
}
public java.util.Iterator iterator()
{
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap v2;
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$EntrySet v0;
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$EntryIterator v1;
v0 := @this: com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$EntrySet;
v1 = new com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$EntryIterator;
v2 = v0.<com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$EntrySet: com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap this$0>;
specialinvoke v1.<com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$EntryIterator: void <init>(com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap)>(v2);
return v1;
}
public boolean contains(java.lang.Object)
{
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$EntrySet v0;
java.util.concurrent.ConcurrentMap v4;
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap v3;
java.lang.Object v1, v5, v6, v7, v8;
boolean v10, v2, v9;
v0 := @this: com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$EntrySet;
v1 := @parameter0: java.lang.Object;
v2 = v1 instanceof java.util.Map$Entry;
if v2 != 0 goto label1;
return 0;
label1:
v3 = v0.<com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$EntrySet: com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap map>;
v4 = v3.<com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap: java.util.concurrent.ConcurrentMap data>;
v5 = interfaceinvoke v1.<java.util.Map$Entry: java.lang.Object getKey()>();
v6 = interfaceinvoke v4.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v5);
if v6 == null goto label2;
v7 = virtualinvoke v6.<com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$Node: java.lang.Object getValue()>();
v8 = interfaceinvoke v1.<java.util.Map$Entry: java.lang.Object getValue()>();
v9 = virtualinvoke v7.<java.lang.Object: boolean equals(java.lang.Object)>(v8);
if v9 == 0 goto label2;
v10 = 1;
goto label3;
label2:
v10 = 0;
label3:
return v10;
}
public boolean add(java.util.Map$Entry)
{
java.lang.UnsupportedOperationException v2;
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$EntrySet v0;
java.util.Map$Entry v1;
v0 := @this: com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$EntrySet;
v1 := @parameter0: java.util.Map$Entry;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("ConcurrentLinkedHashMap does not allow add to be called on entrySet()");
throw v2;
}
public boolean remove(java.lang.Object)
{
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap v3;
com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$EntrySet v0;
java.lang.Object v1, v4, v5;
boolean v2, v6;
v0 := @this: com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$EntrySet;
v1 := @parameter0: java.lang.Object;
v2 = v1 instanceof java.util.Map$Entry;
if v2 != 0 goto label1;
return 0;
label1:
v3 = v0.<com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap$EntrySet: com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap map>;
v4 = interfaceinvoke v1.<java.util.Map$Entry: java.lang.Object getKey()>();
v5 = interfaceinvoke v1.<java.util.Map$Entry: java.lang.Object getValue()>();
v6 = virtualinvoke v3.<com.fasterxml.jackson.databind.util.internal.PrivateMaxEntriesMap: boolean remove(java.lang.Object,java.lang.Object)>(v4, v5);
return v6;
}
}