public class com.fasterxml.jackson.dataformat.yaml.YAMLParser extends com.fasterxml.jackson.core.base.ParserBase
{
protected com.fasterxml.jackson.core.ObjectCodec _objectCodec;
protected int _formatFeatures;
protected boolean _cfgEmptyStringsToNull;
protected final java.io.Reader _reader;
protected final org.yaml.snakeyaml.parser.ParserImpl _yamlParser;
protected final org.yaml.snakeyaml.resolver.Resolver _yamlResolver;
protected org.yaml.snakeyaml.events.Event _lastEvent;
protected org.yaml.snakeyaml.events.Event _lastTagEvent;
protected java.lang.String _textValue;
protected java.lang.String _cleanedTextValue;
protected java.lang.String _currentFieldName;
protected boolean _currentIsAlias;
protected java.lang.String _currentAnchor;
public void <init>(com.fasterxml.jackson.core.io.IOContext, com.fasterxml.jackson.core.util.BufferRecycler, int, int, com.fasterxml.jackson.core.ObjectCodec, java.io.Reader)
{
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
com.fasterxml.jackson.core.io.IOContext v1;
int v3, v4;
com.fasterxml.jackson.core.ObjectCodec v5;
java.io.Reader v6;
com.fasterxml.jackson.core.util.BufferRecycler v2;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 := @parameter0: com.fasterxml.jackson.core.io.IOContext;
v2 := @parameter1: com.fasterxml.jackson.core.util.BufferRecycler;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 := @parameter4: com.fasterxml.jackson.core.ObjectCodec;
v6 := @parameter5: java.io.Reader;
specialinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: void <init>(com.fasterxml.jackson.core.io.IOContext,int,int,org.yaml.snakeyaml.LoaderOptions,com.fasterxml.jackson.core.ObjectCodec,java.io.Reader)>(v1, v3, v4, null, v5, v6);
return;
}
public void <init>(com.fasterxml.jackson.core.io.IOContext, int, int, org.yaml.snakeyaml.LoaderOptions, com.fasterxml.jackson.core.ObjectCodec, java.io.Reader)
{
org.yaml.snakeyaml.parser.ParserImpl v9;
com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature v11;
org.yaml.snakeyaml.LoaderOptions v4, v8;
com.fasterxml.jackson.core.ObjectCodec v5;
java.io.Reader v6;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
com.fasterxml.jackson.core.io.IOContext v1;
int v2, v3;
org.yaml.snakeyaml.reader.StreamReader v10;
org.yaml.snakeyaml.resolver.Resolver v7;
boolean v12;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 := @parameter0: com.fasterxml.jackson.core.io.IOContext;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: org.yaml.snakeyaml.LoaderOptions;
v5 := @parameter4: com.fasterxml.jackson.core.ObjectCodec;
v6 := @parameter5: java.io.Reader;
specialinvoke v0.<com.fasterxml.jackson.core.base.ParserBase: void <init>(com.fasterxml.jackson.core.io.IOContext,int)>(v1, v2);
v7 = new org.yaml.snakeyaml.resolver.Resolver;
specialinvoke v7.<org.yaml.snakeyaml.resolver.Resolver: void <init>()>();
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: org.yaml.snakeyaml.resolver.Resolver _yamlResolver> = v7;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.ObjectCodec _objectCodec> = v5;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _formatFeatures> = v3;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.io.Reader _reader> = v6;
if v4 != null goto label1;
v8 = new org.yaml.snakeyaml.LoaderOptions;
specialinvoke v8.<org.yaml.snakeyaml.LoaderOptions: void <init>()>();
v4 = v8;
label1:
v9 = new org.yaml.snakeyaml.parser.ParserImpl;
v10 = new org.yaml.snakeyaml.reader.StreamReader;
specialinvoke v10.<org.yaml.snakeyaml.reader.StreamReader: void <init>(java.io.Reader)>(v6);
specialinvoke v9.<org.yaml.snakeyaml.parser.ParserImpl: void <init>(org.yaml.snakeyaml.reader.StreamReader,org.yaml.snakeyaml.LoaderOptions)>(v10, v4);
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: org.yaml.snakeyaml.parser.ParserImpl _yamlParser> = v9;
v11 = <com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature: com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature EMPTY_STRING_AS_NULL>;
v12 = virtualinvoke v11.<com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature: boolean enabledIn(int)>(v3);
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: boolean _cfgEmptyStringsToNull> = v12;
return;
}
public com.fasterxml.jackson.core.ObjectCodec getCodec()
{
com.fasterxml.jackson.core.ObjectCodec v1;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.ObjectCodec _objectCodec>;
return v1;
}
public void setCodec(com.fasterxml.jackson.core.ObjectCodec)
{
com.fasterxml.jackson.core.ObjectCodec v1;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 := @parameter0: com.fasterxml.jackson.core.ObjectCodec;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.ObjectCodec _objectCodec> = v1;
return;
}
public boolean isCurrentAlias()
{
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
boolean v1;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: boolean _currentIsAlias>;
return v1;
}
public java.lang.String getCurrentAnchor()
{
java.lang.String v1;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _currentAnchor>;
return v1;
}
public com.fasterxml.jackson.core.Version version()
{
com.fasterxml.jackson.core.Version v1;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 = <com.fasterxml.jackson.dataformat.yaml.PackageVersion: com.fasterxml.jackson.core.Version VERSION>;
return v1;
}
public boolean requiresCustomCodec()
{
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
return 0;
}
public boolean canReadObjectId()
{
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
return 1;
}
public boolean canReadTypeId()
{
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
return 1;
}
public com.fasterxml.jackson.core.util.JacksonFeatureSet getReadCapabilities()
{
com.fasterxml.jackson.core.util.JacksonFeatureSet v1;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 = <com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.util.JacksonFeatureSet DEFAULT_READ_CAPABILITIES>;
return v1;
}
protected void _closeInput() throws java.io.IOException
{
com.fasterxml.jackson.core.JsonParser$Feature v3;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
com.fasterxml.jackson.core.io.IOContext v1;
java.io.Reader v5;
boolean v2, v4;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.io.IOContext _ioContext>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.core.io.IOContext: boolean isResourceManaged()>();
if v2 != 0 goto label1;
v3 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature AUTO_CLOSE_SOURCE>;
v4 = virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>(v3);
if v4 == 0 goto label2;
label1:
v5 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.io.Reader _reader>;
virtualinvoke v5.<java.io.Reader: void close()>();
label2:
return;
}
public int getFormatFeatures()
{
int v1;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _formatFeatures>;
return v1;
}
public com.fasterxml.jackson.core.JsonParser overrideFormatFeatures(int, int)
{
com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature v9;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
int v1, v10, v2, v3, v4, v5, v6, v7, v8;
boolean v11;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _formatFeatures>;
v4 = (int) -1;
v5 = v2 ^ v4;
v6 = v3 & v5;
v7 = v1 & v2;
v8 = v6 | v7;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _formatFeatures> = v8;
v9 = <com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature: com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature EMPTY_STRING_AS_NULL>;
v10 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _formatFeatures>;
v11 = virtualinvoke v9.<com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature: boolean enabledIn(int)>(v10);
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: boolean _cfgEmptyStringsToNull> = v11;
return v0;
}
public com.fasterxml.jackson.core.JsonParser enable(com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature)
{
com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature v1, v5;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
int v2, v3, v4, v6;
boolean v7;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 := @parameter0: com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature;
v2 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _formatFeatures>;
v3 = virtualinvoke v1.<com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature: int getMask()>();
v4 = v2 | v3;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _formatFeatures> = v4;
v5 = <com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature: com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature EMPTY_STRING_AS_NULL>;
v6 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _formatFeatures>;
v7 = virtualinvoke v5.<com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature: boolean enabledIn(int)>(v6);
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: boolean _cfgEmptyStringsToNull> = v7;
return v0;
}
public com.fasterxml.jackson.core.JsonParser disable(com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature)
{
com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature v1, v7;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
int v2, v3, v4, v5, v6, v8;
boolean v9;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 := @parameter0: com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature;
v2 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _formatFeatures>;
v3 = virtualinvoke v1.<com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature: int getMask()>();
v4 = (int) -1;
v5 = v3 ^ v4;
v6 = v2 & v5;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _formatFeatures> = v6;
v7 = <com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature: com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature EMPTY_STRING_AS_NULL>;
v8 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _formatFeatures>;
v9 = virtualinvoke v7.<com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature: boolean enabledIn(int)>(v8);
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: boolean _cfgEmptyStringsToNull> = v9;
return v0;
}
public com.fasterxml.jackson.core.JsonParser configure(com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature, boolean)
{
com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature v1;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
boolean v2;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 := @parameter0: com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature;
v2 := @parameter1: boolean;
if v2 == 0 goto label1;
virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonParser enable(com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature)>(v1);
goto label2;
label1:
virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonParser disable(com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature)>(v1);
label2:
return v0;
}
public boolean isEnabled(com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature)
{
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature v1;
int v2, v3, v4;
boolean v5;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 := @parameter0: com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature;
v2 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _formatFeatures>;
v3 = virtualinvoke v1.<com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature: int getMask()>();
v4 = v2 & v3;
if v4 == 0 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
public com.fasterxml.jackson.core.JsonLocation getTokenLocation()
{
org.yaml.snakeyaml.error.Mark v4;
com.fasterxml.jackson.core.JsonLocation v2, v5;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
org.yaml.snakeyaml.events.Event v1, v3;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: org.yaml.snakeyaml.events.Event _lastEvent>;
if v1 != null goto label1;
v2 = <com.fasterxml.jackson.core.JsonLocation: com.fasterxml.jackson.core.JsonLocation NA>;
return v2;
label1:
v3 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: org.yaml.snakeyaml.events.Event _lastEvent>;
v4 = virtualinvoke v3.<org.yaml.snakeyaml.events.Event: org.yaml.snakeyaml.error.Mark getStartMark()>();
v5 = virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonLocation _locationFor(org.yaml.snakeyaml.error.Mark)>(v4);
return v5;
}
public com.fasterxml.jackson.core.JsonLocation getCurrentLocation()
{
org.yaml.snakeyaml.error.Mark v4;
com.fasterxml.jackson.core.JsonLocation v2, v5;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
org.yaml.snakeyaml.events.Event v1, v3;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: org.yaml.snakeyaml.events.Event _lastEvent>;
if v1 != null goto label1;
v2 = <com.fasterxml.jackson.core.JsonLocation: com.fasterxml.jackson.core.JsonLocation NA>;
return v2;
label1:
v3 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: org.yaml.snakeyaml.events.Event _lastEvent>;
v4 = virtualinvoke v3.<org.yaml.snakeyaml.events.Event: org.yaml.snakeyaml.error.Mark getEndMark()>();
v5 = virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonLocation _locationFor(org.yaml.snakeyaml.error.Mark)>(v4);
return v5;
}
protected com.fasterxml.jackson.core.JsonLocation _locationFor(org.yaml.snakeyaml.error.Mark)
{
com.fasterxml.jackson.core.JsonLocation v2, v7;
org.yaml.snakeyaml.error.Mark v1;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
com.fasterxml.jackson.core.io.IOContext v3, v8;
int v10, v11, v12, v13, v14, v5, v6;
com.fasterxml.jackson.core.io.ContentReference v4, v9;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 := @parameter0: org.yaml.snakeyaml.error.Mark;
if v1 != null goto label1;
v2 = new com.fasterxml.jackson.core.JsonLocation;
v3 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.io.IOContext _ioContext>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.core.io.IOContext: com.fasterxml.jackson.core.io.ContentReference contentReference()>();
v5 = (int) -1;
v6 = (int) -1;
specialinvoke v2.<com.fasterxml.jackson.core.JsonLocation: void <init>(com.fasterxml.jackson.core.io.ContentReference,long,int,int)>(v4, -1L, v5, v6);
return v2;
label1:
v7 = new com.fasterxml.jackson.core.JsonLocation;
v8 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.io.IOContext _ioContext>;
v9 = virtualinvoke v8.<com.fasterxml.jackson.core.io.IOContext: com.fasterxml.jackson.core.io.ContentReference contentReference()>();
v10 = virtualinvoke v1.<org.yaml.snakeyaml.error.Mark: int getIndex()>();
v11 = virtualinvoke v1.<org.yaml.snakeyaml.error.Mark: int getLine()>();
v12 = v11 + 1;
v13 = virtualinvoke v1.<org.yaml.snakeyaml.error.Mark: int getColumn()>();
v14 = v13 + 1;
specialinvoke v7.<com.fasterxml.jackson.core.JsonLocation: void <init>(com.fasterxml.jackson.core.io.ContentReference,long,int,int)>(v9, v10, v12, v14);
return v7;
}
public com.fasterxml.jackson.core.JsonToken nextToken() throws java.io.IOException
{
org.yaml.snakeyaml.parser.ParserImpl v2;
com.fasterxml.jackson.dataformat.yaml.snakeyaml.error.MarkedYAMLException v6;
org.yaml.snakeyaml.events.Event v3;
org.yaml.snakeyaml.error.Mark v40, v51;
org.yaml.snakeyaml.error.YAMLException v4;
com.fasterxml.jackson.core.json.JsonReadContext v17, v19, v20, v30, v32, v34, v42, v45, v53, v56, v60, v62, v63, v9;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
java.lang.String v22, v23, v28, v29, v41, v52, v71, v8;
boolean v1, v10, v14, v16, v18, v26, v27, v33, v36, v39, v48, v5, v50, v59, v61, v66, v68, v70, v74;
org.yaml.snakeyaml.events.Event$ID v13, v15, v35, v38, v47, v49, v58, v65, v67, v69, v73;
com.fasterxml.jackson.dataformat.yaml.JacksonYAMLParseException v7;
int v43, v44, v54, v55;
com.fasterxml.jackson.core.JsonToken v11, v12, v21, v24, v25, v31, v37, v46, v57, v64, v72;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: boolean _currentIsAlias> = 0;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: byte[] _binaryValue> = null;
v1 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: boolean _closed>;
if v1 == 0 goto label01;
return null;
label01:
v2 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: org.yaml.snakeyaml.parser.ParserImpl _yamlParser>;
v3 = virtualinvoke v2.<org.yaml.snakeyaml.parser.ParserImpl: org.yaml.snakeyaml.events.Event getEvent()>();
label02:
goto label05;
label03:
v4 := @caughtexception;
v5 = v4 instanceof org.yaml.snakeyaml.error.MarkedYAMLException;
if v5 == 0 goto label04;
v6 = staticinvoke <com.fasterxml.jackson.dataformat.yaml.snakeyaml.error.MarkedYAMLException: com.fasterxml.jackson.dataformat.yaml.snakeyaml.error.MarkedYAMLException 'from'(com.fasterxml.jackson.core.JsonParser,org.yaml.snakeyaml.error.MarkedYAMLException)>(v0, v4);
throw v6;
label04:
v7 = new com.fasterxml.jackson.dataformat.yaml.JacksonYAMLParseException;
v8 = virtualinvoke v4.<org.yaml.snakeyaml.error.YAMLException: java.lang.String getMessage()>();
specialinvoke v7.<com.fasterxml.jackson.dataformat.yaml.JacksonYAMLParseException: void <init>(com.fasterxml.jackson.core.JsonParser,java.lang.String,java.lang.Exception)>(v0, v8, v4);
throw v7;
label05:
if v3 != null goto label06;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _currentAnchor> = null;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: org.yaml.snakeyaml.events.Event _lastTagEvent> = null;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _currToken> = null;
return null;
label06:
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: org.yaml.snakeyaml.events.Event _lastEvent> = v3;
v9 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v10 = virtualinvoke v9.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inObject()>();
if v10 == 0 goto label15;
v11 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v12 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v11 == v12 goto label16;
v13 = <org.yaml.snakeyaml.events.Event$ID: org.yaml.snakeyaml.events.Event$ID Scalar>;
v14 = virtualinvoke v3.<org.yaml.snakeyaml.events.Event: boolean is(org.yaml.snakeyaml.events.Event$ID)>(v13);
if v14 != 0 goto label09;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _currentAnchor> = null;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: org.yaml.snakeyaml.events.Event _lastTagEvent> = null;
v15 = <org.yaml.snakeyaml.events.Event$ID: org.yaml.snakeyaml.events.Event$ID MappingEnd>;
v16 = virtualinvoke v3.<org.yaml.snakeyaml.events.Event: boolean is(org.yaml.snakeyaml.events.Event$ID)>(v15);
if v16 == 0 goto label08;
v17 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v18 = virtualinvoke v17.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inObject()>();
if v18 != 0 goto label07;
virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: void _reportMismatchedEndMarker(int,char)>(125, 93);
label07:
v19 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v20 = virtualinvoke v19.<com.fasterxml.jackson.core.json.JsonReadContext: com.fasterxml.jackson.core.json.JsonReadContext getParent()>();
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = v20;
v21 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken END_OBJECT>;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _currToken> = v21;
return v21;
label08:
v22 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (org.yaml.snakeyaml.events.Event)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Expected a field name (Scalar value in YAML), got this instead: \u0001");
virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: void _reportError(java.lang.String)>(v22);
label09:
v23 = virtualinvoke v3.<org.yaml.snakeyaml.events.ScalarEvent: java.lang.String getAnchor()>();
v24 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v25 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
if v24 != v25 goto label10;
v26 = 1;
goto label11;
label10:
v26 = 0;
label11:
v27 = v26;
if v23 != null goto label12;
if v26 != 0 goto label13;
label12:
v28 = virtualinvoke v3.<org.yaml.snakeyaml.events.ScalarEvent: java.lang.String getAnchor()>();
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _currentAnchor> = v28;
label13:
if v27 != 0 goto label14;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: org.yaml.snakeyaml.events.Event _lastTagEvent> = v3;
label14:
v29 = virtualinvoke v3.<org.yaml.snakeyaml.events.ScalarEvent: java.lang.String getValue()>();
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _currentFieldName> = v29;
v30 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
virtualinvoke v30.<com.fasterxml.jackson.core.json.JsonReadContext: void setCurrentName(java.lang.String)>(v29);
v31 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _currToken> = v31;
return v31;
label15:
v32 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v33 = virtualinvoke v32.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inArray()>();
if v33 == 0 goto label16;
v34 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
virtualinvoke v34.<com.fasterxml.jackson.core.json.JsonReadContext: boolean expectComma()>();
label16:
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _currentAnchor> = null;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: org.yaml.snakeyaml.events.Event _lastTagEvent> = v3;
v35 = <org.yaml.snakeyaml.events.Event$ID: org.yaml.snakeyaml.events.Event$ID Scalar>;
v36 = virtualinvoke v3.<org.yaml.snakeyaml.events.Event: boolean is(org.yaml.snakeyaml.events.Event$ID)>(v35);
if v36 == 0 goto label17;
v37 = virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _decodeScalar(org.yaml.snakeyaml.events.ScalarEvent)>(v3);
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _currToken> = v37;
return v37;
label17:
v38 = <org.yaml.snakeyaml.events.Event$ID: org.yaml.snakeyaml.events.Event$ID MappingStart>;
v39 = virtualinvoke v3.<org.yaml.snakeyaml.events.Event: boolean is(org.yaml.snakeyaml.events.Event$ID)>(v38);
if v39 == 0 goto label18;
v40 = virtualinvoke v3.<org.yaml.snakeyaml.events.Event: org.yaml.snakeyaml.error.Mark getStartMark()>();
v41 = virtualinvoke v3.<org.yaml.snakeyaml.events.MappingStartEvent: java.lang.String getAnchor()>();
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _currentAnchor> = v41;
v42 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v43 = virtualinvoke v40.<org.yaml.snakeyaml.error.Mark: int getLine()>();
v44 = virtualinvoke v40.<org.yaml.snakeyaml.error.Mark: int getColumn()>();
v45 = virtualinvoke v42.<com.fasterxml.jackson.core.json.JsonReadContext: com.fasterxml.jackson.core.json.JsonReadContext createChildObjectContext(int,int)>(v43, v44);
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = v45;
v46 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _currToken> = v46;
return v46;
label18:
v47 = <org.yaml.snakeyaml.events.Event$ID: org.yaml.snakeyaml.events.Event$ID MappingEnd>;
v48 = virtualinvoke v3.<org.yaml.snakeyaml.events.Event: boolean is(org.yaml.snakeyaml.events.Event$ID)>(v47);
if v48 == 0 goto label19;
virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: void _reportError(java.lang.String)>("Not expecting END_OBJECT but a value");
label19:
v49 = <org.yaml.snakeyaml.events.Event$ID: org.yaml.snakeyaml.events.Event$ID SequenceStart>;
v50 = virtualinvoke v3.<org.yaml.snakeyaml.events.Event: boolean is(org.yaml.snakeyaml.events.Event$ID)>(v49);
if v50 == 0 goto label20;
v51 = virtualinvoke v3.<org.yaml.snakeyaml.events.Event: org.yaml.snakeyaml.error.Mark getStartMark()>();
v52 = virtualinvoke v3.<org.yaml.snakeyaml.events.NodeEvent: java.lang.String getAnchor()>();
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _currentAnchor> = v52;
v53 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v54 = virtualinvoke v51.<org.yaml.snakeyaml.error.Mark: int getLine()>();
v55 = virtualinvoke v51.<org.yaml.snakeyaml.error.Mark: int getColumn()>();
v56 = virtualinvoke v53.<com.fasterxml.jackson.core.json.JsonReadContext: com.fasterxml.jackson.core.json.JsonReadContext createChildArrayContext(int,int)>(v54, v55);
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = v56;
v57 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _currToken> = v57;
return v57;
label20:
v58 = <org.yaml.snakeyaml.events.Event$ID: org.yaml.snakeyaml.events.Event$ID SequenceEnd>;
v59 = virtualinvoke v3.<org.yaml.snakeyaml.events.Event: boolean is(org.yaml.snakeyaml.events.Event$ID)>(v58);
if v59 == 0 goto label22;
v60 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v61 = virtualinvoke v60.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inArray()>();
if v61 != 0 goto label21;
virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: void _reportMismatchedEndMarker(int,char)>(93, 125);
label21:
v62 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;
v63 = virtualinvoke v62.<com.fasterxml.jackson.core.json.JsonReadContext: com.fasterxml.jackson.core.json.JsonReadContext getParent()>();
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = v63;
v64 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken END_ARRAY>;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _currToken> = v64;
return v64;
label22:
v65 = <org.yaml.snakeyaml.events.Event$ID: org.yaml.snakeyaml.events.Event$ID DocumentEnd>;
v66 = virtualinvoke v3.<org.yaml.snakeyaml.events.Event: boolean is(org.yaml.snakeyaml.events.Event$ID)>(v65);
if v66 != 0 goto label01;
v67 = <org.yaml.snakeyaml.events.Event$ID: org.yaml.snakeyaml.events.Event$ID DocumentStart>;
v68 = virtualinvoke v3.<org.yaml.snakeyaml.events.Event: boolean is(org.yaml.snakeyaml.events.Event$ID)>(v67);
if v68 != 0 goto label01;
v69 = <org.yaml.snakeyaml.events.Event$ID: org.yaml.snakeyaml.events.Event$ID Alias>;
v70 = virtualinvoke v3.<org.yaml.snakeyaml.events.Event: boolean is(org.yaml.snakeyaml.events.Event$ID)>(v69);
if v70 == 0 goto label23;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: boolean _currentIsAlias> = 1;
v71 = virtualinvoke v3.<org.yaml.snakeyaml.events.AliasEvent: java.lang.String getAnchor()>();
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _textValue> = v71;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _cleanedTextValue> = null;
v72 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _currToken> = v72;
return v72;
label23:
v73 = <org.yaml.snakeyaml.events.Event$ID: org.yaml.snakeyaml.events.Event$ID StreamEnd>;
v74 = virtualinvoke v3.<org.yaml.snakeyaml.events.Event: boolean is(org.yaml.snakeyaml.events.Event$ID)>(v73);
if v74 == 0 goto label01;
virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: void close()>();
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _currToken> = null;
return null;
catch org.yaml.snakeyaml.error.YAMLException from label01 to label02 with label03;
}
protected com.fasterxml.jackson.core.JsonToken _decodeScalar(org.yaml.snakeyaml.events.ScalarEvent) throws java.io.IOException
{
byte[] v38;
org.yaml.snakeyaml.nodes.NodeId v10;
boolean v12, v22, v27, v3, v30, v35, v4, v43, v45, v48, v51, v54, v8;
com.fasterxml.jackson.core.Base64Variant v37;
java.lang.String[] v31;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
int v29, v32, v7;
java.lang.Boolean v21, v44;
org.yaml.snakeyaml.resolver.Resolver v9;
com.fasterxml.jackson.core.JsonToken v15, v17, v19, v23, v25, v26, v41, v46, v49, v5, v52, v55, v56;
java.lang.String v2, v28, v33, v34, v36, v40, v42, v47, v50, v53, v6;
java.lang.IllegalArgumentException v39;
org.yaml.snakeyaml.nodes.Tag v13, v14, v16, v18, v20, v24;
org.yaml.snakeyaml.events.ImplicitTuple v11;
org.yaml.snakeyaml.events.ScalarEvent v1;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 := @parameter0: org.yaml.snakeyaml.events.ScalarEvent;
v2 = virtualinvoke v1.<org.yaml.snakeyaml.events.ScalarEvent: java.lang.String getValue()>();
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _textValue> = v2;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _cleanedTextValue> = null;
v3 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: boolean _cfgEmptyStringsToNull>;
if v3 != 0 goto label01;
v4 = virtualinvoke v2.<java.lang.String: boolean isEmpty()>();
if v4 == 0 goto label01;
v5 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
return v5;
label01:
v6 = virtualinvoke v1.<org.yaml.snakeyaml.events.ScalarEvent: java.lang.String getTag()>();
v7 = virtualinvoke v2.<java.lang.String: int length()>();
if v6 == null goto label02;
v8 = virtualinvoke v6.<java.lang.String: boolean equals(java.lang.Object)>("!");
if v8 == 0 goto label10;
label02:
v9 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: org.yaml.snakeyaml.resolver.Resolver _yamlResolver>;
v10 = <org.yaml.snakeyaml.nodes.NodeId: org.yaml.snakeyaml.nodes.NodeId scalar>;
v11 = virtualinvoke v1.<org.yaml.snakeyaml.events.ScalarEvent: org.yaml.snakeyaml.events.ImplicitTuple getImplicit()>();
v12 = virtualinvoke v11.<org.yaml.snakeyaml.events.ImplicitTuple: boolean canOmitTagInPlainScalar()>();
v13 = virtualinvoke v9.<org.yaml.snakeyaml.resolver.Resolver: org.yaml.snakeyaml.nodes.Tag resolve(org.yaml.snakeyaml.nodes.NodeId,java.lang.String,boolean)>(v10, v2, v12);
v14 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag STR>;
if v13 != v14 goto label03;
v15 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
return v15;
label03:
v16 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag INT>;
if v13 != v16 goto label04;
v17 = virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _decodeNumberScalar(java.lang.String,int)>(v2, v7);
return v17;
label04:
v18 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag FLOAT>;
if v13 != v18 goto label05;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numTypesValid> = 0;
v19 = specialinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _cleanYamlFloat(java.lang.String)>(v2);
return v19;
label05:
v20 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag BOOL>;
if v13 != v20 goto label08;
v21 = virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.Boolean _matchYAMLBoolean(java.lang.String,int)>(v2, v7);
if v21 == null goto label24;
v22 = virtualinvoke v21.<java.lang.Boolean: boolean booleanValue()>();
if v22 == 0 goto label06;
v23 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;
goto label07;
label06:
v23 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;
label07:
return v23;
label08:
v24 = <org.yaml.snakeyaml.nodes.Tag: org.yaml.snakeyaml.nodes.Tag NULL>;
if v13 != v24 goto label09;
v25 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;
return v25;
label09:
v26 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
return v26;
label10:
v27 = virtualinvoke v6.<java.lang.String: boolean startsWith(java.lang.String)>("tag:yaml.org,2002:");
if v27 == 0 goto label13;
v28 = "tag:yaml.org,2002:";
v29 = virtualinvoke v28.<java.lang.String: int length()>();
v6 = virtualinvoke v6.<java.lang.String: java.lang.String substring(int)>(v29);
v30 = virtualinvoke v6.<java.lang.String: boolean contains(java.lang.CharSequence)>(",");
if v30 == 0 goto label13;
v31 = virtualinvoke v6.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");
v32 = lengthof v31;
if v32 != 0 goto label11;
v33 = "";
goto label12;
label11:
v33 = v31[0];
label12:
v6 = v33;
label13:
v34 = "binary";
v35 = virtualinvoke v34.<java.lang.String: boolean equals(java.lang.Object)>(v6);
if v35 == 0 goto label18;
v36 = virtualinvoke v2.<java.lang.String: java.lang.String trim()>();
label14:
v37 = <com.fasterxml.jackson.core.Base64Variants: com.fasterxml.jackson.core.Base64Variant MIME>;
v38 = virtualinvoke v37.<com.fasterxml.jackson.core.Base64Variant: byte[] decode(java.lang.String)>(v36);
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: byte[] _binaryValue> = v38;
label15:
goto label17;
label16:
v39 := @caughtexception;
v40 = virtualinvoke v39.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();
virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: void _reportError(java.lang.String)>(v40);
label17:
v41 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_EMBEDDED_OBJECT>;
return v41;
label18:
v42 = "bool";
v43 = virtualinvoke v42.<java.lang.String: boolean equals(java.lang.Object)>(v6);
if v43 == 0 goto label21;
v44 = virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.Boolean _matchYAMLBoolean(java.lang.String,int)>(v2, v7);
if v44 == null goto label24;
v45 = virtualinvoke v44.<java.lang.Boolean: boolean booleanValue()>();
if v45 == 0 goto label19;
v46 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;
goto label20;
label19:
v46 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;
label20:
return v46;
label21:
if v7 <= 0 goto label24;
v47 = "int";
v48 = virtualinvoke v47.<java.lang.String: boolean equals(java.lang.Object)>(v6);
if v48 == 0 goto label22;
v49 = virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _decodeNumberScalar(java.lang.String,int)>(v2, v7);
return v49;
label22:
v50 = "float";
v51 = virtualinvoke v50.<java.lang.String: boolean equals(java.lang.Object)>(v6);
if v51 == 0 goto label23;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numTypesValid> = 0;
v52 = specialinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _cleanYamlFloat(java.lang.String)>(v2);
return v52;
label23:
v53 = "null";
v54 = virtualinvoke v53.<java.lang.String: boolean equals(java.lang.Object)>(v6);
if v54 == 0 goto label24;
v55 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;
return v55;
label24:
v56 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
return v56;
catch java.lang.IllegalArgumentException from label14 to label15 with label16;
}
protected java.lang.Boolean _matchYAMLBoolean(java.lang.String, int)
{
boolean v15, v18, v21, v24, v27, v30, v4, v6, v9;
com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature v3;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
int v2;
java.lang.Boolean v10, v12, v13, v16, v19, v22, v25, v28, v31, v7;
java.lang.String v1, v14, v17, v20, v23, v26, v29, v5, v8;
char v11;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 = <com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature: com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature PARSE_BOOLEAN_LIKE_WORDS_AS_STRINGS>;
v4 = virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: boolean isEnabled(com.fasterxml.jackson.dataformat.yaml.YAMLParser$Feature)>(v3);
if v4 == 0 goto label02;
v5 = "true";
v6 = virtualinvoke v5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v1);
if v6 == 0 goto label01;
v7 = <java.lang.Boolean: java.lang.Boolean TRUE>;
return v7;
label01:
v8 = "false";
v9 = virtualinvoke v8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v1);
if v9 == 0 goto label12;
v10 = <java.lang.Boolean: java.lang.Boolean FALSE>;
return v10;
label02:
tableswitch(v2)
{
case 1: goto label03;
case 2: goto label06;
case 3: goto label08;
case 4: goto label10;
case 5: goto label11;
default: goto label12;
};
label03:
v11 = virtualinvoke v1.<java.lang.String: char charAt(int)>(0);
lookupswitch(v11)
{
case 78: goto label05;
case 89: goto label04;
case 110: goto label05;
case 121: goto label04;
default: goto label12;
};
label04:
v12 = <java.lang.Boolean: java.lang.Boolean TRUE>;
return v12;
label05:
v13 = <java.lang.Boolean: java.lang.Boolean FALSE>;
return v13;
label06:
v14 = "no";
v15 = virtualinvoke v14.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v1);
if v15 == 0 goto label07;
v16 = <java.lang.Boolean: java.lang.Boolean FALSE>;
return v16;
label07:
v17 = "on";
v18 = virtualinvoke v17.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v1);
if v18 == 0 goto label12;
v19 = <java.lang.Boolean: java.lang.Boolean TRUE>;
return v19;
label08:
v20 = "yes";
v21 = virtualinvoke v20.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v1);
if v21 == 0 goto label09;
v22 = <java.lang.Boolean: java.lang.Boolean TRUE>;
return v22;
label09:
v23 = "off";
v24 = virtualinvoke v23.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v1);
if v24 == 0 goto label12;
v25 = <java.lang.Boolean: java.lang.Boolean FALSE>;
return v25;
label10:
v26 = "true";
v27 = virtualinvoke v26.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v1);
if v27 == 0 goto label12;
v28 = <java.lang.Boolean: java.lang.Boolean TRUE>;
return v28;
label11:
v29 = "false";
v30 = virtualinvoke v29.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v1);
if v30 == 0 goto label12;
v31 = <java.lang.Boolean: java.lang.Boolean FALSE>;
return v31;
label12:
return null;
}
protected com.fasterxml.jackson.core.JsonToken _decodeNumberScalar(java.lang.String, int) throws java.io.IOException
{
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
int v12, v2, v4, v6, v9;
com.fasterxml.jackson.core.JsonToken v11, v14, v16, v17, v20, v22, v23, v7;
java.lang.String v1, v21;
boolean v10, v13, v15, v18;
char v19, v3, v5, v8;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 = virtualinvoke v1.<java.lang.String: char charAt(int)>(0);
if v3 != 45 goto label01;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: boolean _numberNegative> = 1;
v4 = 1;
goto label04;
label01:
if v3 != 43 goto label03;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: boolean _numberNegative> = 0;
if v2 != 1 goto label02;
return null;
label02:
v4 = 1;
goto label04;
label03:
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: boolean _numberNegative> = 0;
v4 = 0;
label04:
if v2 != v4 goto label05;
return null;
label05:
v5 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v4);
if v5 != 48 goto label11;
v6 = v4 + 1;
if v6 != v2 goto label06;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numberInt> = 0;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numTypesValid> = 1;
v7 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
return v7;
label06:
v8 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v6);
lookupswitch(v8)
{
case 48: goto label09;
case 49: goto label09;
case 50: goto label09;
case 51: goto label09;
case 52: goto label09;
case 53: goto label09;
case 54: goto label09;
case 55: goto label09;
case 56: goto label09;
case 57: goto label09;
case 66: goto label07;
case 88: goto label08;
case 95: goto label09;
case 98: goto label07;
case 120: goto label08;
default: goto label10;
};
label07:
v9 = v6 + 1;
v10 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: boolean _numberNegative>;
v11 = virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _decodeNumberIntBinary(java.lang.String,int,int,boolean)>(v1, v9, v2, v10);
return v11;
label08:
v12 = v6 + 1;
v13 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: boolean _numberNegative>;
v14 = virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _decodeNumberIntHex(java.lang.String,int,int,boolean)>(v1, v12, v2, v13);
return v14;
label09:
v15 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: boolean _numberNegative>;
v16 = virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _decodeNumberIntOctal(java.lang.String,int,int,boolean)>(v1, v6, v2, v15);
return v16;
label10:
v17 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
return v17;
label11:
v18 = 0;
label12:
v19 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v4);
if v19 > 57 goto label13;
if v19 >= 48 goto label14;
label13:
if v19 != 95 goto label16;
v18 = 1;
label14:
v4 = v4 + 1;
if v4 != v2 goto label12;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numTypesValid> = 0;
if v18 == 0 goto label15;
v20 = specialinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _cleanYamlInt(java.lang.String)>(v1);
return v20;
label15:
v21 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _textValue>;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _cleanedTextValue> = v21;
v22 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
return v22;
label16:
v23 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
return v23;
}
protected com.fasterxml.jackson.core.JsonToken _decodeNumberIntBinary(java.lang.String, int, int, boolean) throws java.io.IOException
{
long v9;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
int v2, v3, v6, v7;
java.math.BigInteger v12;
com.fasterxml.jackson.core.JsonToken v11, v13, v8;
java.lang.String v1, v5;
boolean v10, v4;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 = specialinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _cleanUnderscores(java.lang.String,int,int)>(v1, v2, v3);
v6 = virtualinvoke v5.<java.lang.String: int length()>();
if v6 > 31 goto label2;
v7 = specialinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _decodeInt(java.lang.String,int)>(v5, 2);
if v4 == 0 goto label1;
v7 = neg v7;
label1:
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numberInt> = v7;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numTypesValid> = 1;
v8 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
return v8;
label2:
if v6 > 63 goto label5;
v9 = specialinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: long _decodeLong(java.lang.String,int)>(v5, 2);
if v6 != 32 goto label3;
v10 = 1;
goto label4;
label3:
v10 = 0;
label4:
v11 = specialinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _decodeFromLong(long,boolean,boolean)>(v9, v4, v10);
return v11;
label5:
v12 = specialinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.math.BigInteger _decodeBigInt(java.lang.String,int)>(v5, 2);
v13 = specialinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _decodeFromBigInteger(java.math.BigInteger,boolean)>(v12, v4);
return v13;
}
protected com.fasterxml.jackson.core.JsonToken _decodeNumberIntOctal(java.lang.String, int, int, boolean) throws java.io.IOException
{
long v9;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
int v2, v3, v6, v7;
java.math.BigInteger v11;
com.fasterxml.jackson.core.JsonToken v10, v12, v8;
java.lang.String v1, v5;
boolean v4;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 = specialinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _cleanUnderscores(java.lang.String,int,int)>(v1, v2, v3);
v6 = virtualinvoke v5.<java.lang.String: int length()>();
if v6 > 10 goto label2;
v7 = specialinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _decodeInt(java.lang.String,int)>(v5, 8);
if v4 == 0 goto label1;
v7 = neg v7;
label1:
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numberInt> = v7;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numTypesValid> = 1;
v8 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
return v8;
label2:
if v6 > 21 goto label3;
v9 = specialinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: long _decodeLong(java.lang.String,int)>(v5, 8);
v10 = specialinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _decodeFromLong(long,boolean,boolean)>(v9, v4, 0);
return v10;
label3:
v11 = specialinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.math.BigInteger _decodeBigInt(java.lang.String,int)>(v5, 8);
v12 = specialinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _decodeFromBigInteger(java.math.BigInteger,boolean)>(v11, v4);
return v12;
}
protected com.fasterxml.jackson.core.JsonToken _decodeNumberIntHex(java.lang.String, int, int, boolean) throws java.io.IOException
{
long v9;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
int v2, v3, v6, v7;
java.math.BigInteger v12;
com.fasterxml.jackson.core.JsonToken v11, v13, v8;
java.lang.String v1, v5;
boolean v10, v4;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 = specialinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _cleanUnderscores(java.lang.String,int,int)>(v1, v2, v3);
v6 = virtualinvoke v5.<java.lang.String: int length()>();
if v6 > 7 goto label2;
v7 = specialinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _decodeInt(java.lang.String,int)>(v5, 16);
if v4 == 0 goto label1;
v7 = neg v7;
label1:
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numberInt> = v7;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numTypesValid> = 1;
v8 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
return v8;
label2:
if v6 > 15 goto label5;
v9 = specialinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: long _decodeLong(java.lang.String,int)>(v5, 16);
if v6 != 8 goto label3;
v10 = 1;
goto label4;
label3:
v10 = 0;
label4:
v11 = specialinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _decodeFromLong(long,boolean,boolean)>(v9, v4, v10);
return v11;
label5:
v12 = specialinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.math.BigInteger _decodeBigInt(java.lang.String,int)>(v5, 16);
v13 = specialinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _decodeFromBigInteger(java.math.BigInteger,boolean)>(v12, v4);
return v13;
}
private com.fasterxml.jackson.core.JsonToken _decodeFromLong(long, boolean, boolean)
{
long v1, v4;
byte v5, v7;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
com.fasterxml.jackson.core.JsonToken v6, v8, v9;
boolean v2, v3;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 := @parameter0: long;
v2 := @parameter1: boolean;
v3 := @parameter2: boolean;
if v2 == 0 goto label1;
v4 = neg v1;
if v3 == 0 goto label3;
v5 = v4 cmp -2147483648L;
if v5 < 0 goto label3;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numberInt> = v4;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numTypesValid> = 1;
v6 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
return v6;
label1:
if v3 == 0 goto label2;
v7 = v1 cmp 2147483647L;
if v7 >= 0 goto label2;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numberInt> = v1;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numTypesValid> = 1;
v8 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
return v8;
label2:
v4 = v1;
label3:
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: long _numberLong> = v4;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numTypesValid> = 2;
v9 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
return v9;
}
private com.fasterxml.jackson.core.JsonToken _decodeFromBigInteger(java.math.BigInteger, boolean)
{
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
java.math.BigInteger v1, v3;
com.fasterxml.jackson.core.JsonToken v4;
boolean v2;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 := @parameter0: java.math.BigInteger;
v2 := @parameter1: boolean;
if v2 == 0 goto label1;
v3 = virtualinvoke v1.<java.math.BigInteger: java.math.BigInteger negate()>();
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.math.BigInteger _numberBigInt> = v3;
goto label2;
label1:
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.math.BigInteger _numberBigInt> = v1;
label2:
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numTypesValid> = 4;
v4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
return v4;
}
private int _decodeInt(java.lang.String, int) throws java.io.IOException
{
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
int v2, v3, v6;
java.lang.NumberFormatException v4;
java.lang.Object v5;
java.lang.String v1;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
label1:
v3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(v1, v2);
label2:
return v3;
label3:
v4 := @caughtexception;
v5 = specialinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.Object _reportInvalidNumber(java.lang.String,int,java.lang.Exception)>(v1, v2, v4);
v6 = virtualinvoke v5.<java.lang.Integer: int intValue()>();
return v6;
catch java.lang.NumberFormatException from label1 to label2 with label3;
}
private long _decodeLong(java.lang.String, int) throws java.io.IOException
{
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
int v2;
java.lang.NumberFormatException v4;
java.lang.Object v5;
long v3, v6;
java.lang.String v1;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
label1:
v3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>(v1, v2);
label2:
return v3;
label3:
v4 := @caughtexception;
v5 = specialinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.Object _reportInvalidNumber(java.lang.String,int,java.lang.Exception)>(v1, v2, v4);
v6 = virtualinvoke v5.<java.lang.Long: long longValue()>();
return v6;
catch java.lang.NumberFormatException from label1 to label2 with label3;
}
private java.math.BigInteger _decodeBigInt(java.lang.String, int) throws java.io.IOException
{
java.lang.NumberFormatException v10;
com.fasterxml.jackson.core.StreamReadConstraints v3;
com.fasterxml.jackson.core.StreamReadFeature v5, v8;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
int v2, v4;
java.lang.Object v11;
java.math.BigInteger v7;
java.lang.String v1;
boolean v6, v9;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 = virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.StreamReadConstraints streamReadConstraints()>();
v4 = virtualinvoke v1.<java.lang.String: int length()>();
virtualinvoke v3.<com.fasterxml.jackson.core.StreamReadConstraints: void validateIntegerLength(int)>(v4);
label1:
if v2 != 10 goto label2;
v5 = <com.fasterxml.jackson.core.StreamReadFeature: com.fasterxml.jackson.core.StreamReadFeature USE_FAST_BIG_NUMBER_PARSER>;
v6 = virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: boolean isEnabled(com.fasterxml.jackson.core.StreamReadFeature)>(v5);
v7 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: java.math.BigInteger parseBigInteger(java.lang.String,boolean)>(v1, v6);
goto label3;
label2:
v8 = <com.fasterxml.jackson.core.StreamReadFeature: com.fasterxml.jackson.core.StreamReadFeature USE_FAST_BIG_NUMBER_PARSER>;
v9 = virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: boolean isEnabled(com.fasterxml.jackson.core.StreamReadFeature)>(v8);
v7 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: java.math.BigInteger parseBigIntegerWithRadix(java.lang.String,int,boolean)>(v1, v2, v9);
label3:
return v7;
label4:
v10 := @caughtexception;
v11 = specialinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.Object _reportInvalidNumber(java.lang.String,int,java.lang.Exception)>(v1, v2, v10);
return v11;
catch java.lang.NumberFormatException from label1 to label3 with label4;
}
private java.lang.Object _reportInvalidNumber(java.lang.String, int, java.lang.Exception) throws java.io.IOException
{
java.lang.Object[] v4;
java.lang.Integer v5;
java.lang.Exception v3;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
int v2;
java.lang.String v1, v6, v7;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: java.lang.Exception;
v4 = newarray (java.lang.Object)[3];
v5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v2);
v4[0] = v5;
v4[1] = v1;
v6 = virtualinvoke v3.<java.lang.Exception: java.lang.String getMessage()>();
v4[2] = v6;
v7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Invalid base-%d number (\'%s\'), problem: %s", v4);
virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: void _reportError(java.lang.String)>(v7);
return null;
}
public boolean hasTextCharacters()
{
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
return 0;
}
public java.lang.String getText() throws java.io.IOException
{
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
com.fasterxml.jackson.core.JsonToken v1, v11, v2, v4, v5, v7, v8;
java.lang.String v10, v12, v3, v6;
boolean v9;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;
if v1 != v2 goto label1;
v3 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _textValue>;
return v3;
label1:
v4 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v5 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v4 != v5 goto label2;
v6 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _currentFieldName>;
return v6;
label2:
v7 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _currToken>;
if v7 == null goto label4;
v8 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v9 = virtualinvoke v8.<com.fasterxml.jackson.core.JsonToken: boolean isScalarValue()>();
if v9 == 0 goto label3;
v10 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _textValue>;
return v10;
label3:
v11 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v12 = virtualinvoke v11.<com.fasterxml.jackson.core.JsonToken: java.lang.String asString()>();
return v12;
label4:
return null;
}
public java.lang.String getCurrentName() throws java.io.IOException
{
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
com.fasterxml.jackson.core.JsonToken v1, v2;
java.lang.String v3, v4;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;
if v1 != v2 goto label1;
v3 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _currentFieldName>;
return v3;
label1:
v4 = specialinvoke v0.<com.fasterxml.jackson.core.base.ParserBase: java.lang.String getCurrentName()>();
return v4;
}
public char[] getTextCharacters() throws java.io.IOException
{
char[] v2;
java.lang.String v1;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String getText()>();
if v1 != null goto label1;
v2 = null;
goto label2;
label1:
v2 = virtualinvoke v1.<java.lang.String: char[] toCharArray()>();
label2:
return v2;
}
public int getTextLength() throws java.io.IOException
{
int v2;
java.lang.String v1;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 = virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String getText()>();
if v1 != null goto label1;
v2 = 0;
goto label2;
label1:
v2 = virtualinvoke v1.<java.lang.String: int length()>();
label2:
return v2;
}
public int getTextOffset() throws java.io.IOException
{
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
return 0;
}
public int getText(java.io.Writer) throws java.io.IOException
{
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
int v3;
java.io.Writer v1;
java.lang.String v2;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 := @parameter0: java.io.Writer;
v2 = virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String getText()>();
if v2 != null goto label1;
return 0;
label1:
virtualinvoke v1.<java.io.Writer: void write(java.lang.String)>(v2);
v3 = virtualinvoke v2.<java.lang.String: int length()>();
return v3;
}
public java.lang.Object getEmbeddedObject() throws java.io.IOException
{
byte[] v3;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
com.fasterxml.jackson.core.JsonToken v1, v2;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_EMBEDDED_OBJECT>;
if v1 != v2 goto label1;
v3 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: byte[] _binaryValue>;
return v3;
label1:
return null;
}
public int readBinaryValue(com.fasterxml.jackson.core.Base64Variant, java.io.OutputStream) throws java.io.IOException
{
com.fasterxml.jackson.core.Base64Variant v1;
java.io.OutputStream v2;
byte[] v3;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
int v4;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 := @parameter0: com.fasterxml.jackson.core.Base64Variant;
v2 := @parameter1: java.io.OutputStream;
v3 = virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: byte[] getBinaryValue(com.fasterxml.jackson.core.Base64Variant)>(v1);
virtualinvoke v2.<java.io.OutputStream: void write(byte[])>(v3);
v4 = lengthof v3;
return v4;
}
public java.lang.Object getNumberValueDeferred() throws java.io.IOException
{
java.lang.Float v21;
java.lang.Double v17;
java.math.BigDecimal v13;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
int v11, v12, v14, v15, v18, v19, v4;
com.fasterxml.jackson.core.JsonToken v1, v2, v7, v8, v9;
java.lang.String v10, v22, v3, v6;
java.lang.Number v5;
double v16;
float v20;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
if v1 != v2 goto label2;
v3 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _cleanedTextValue>;
v4 = virtualinvoke v3.<java.lang.String: int length()>();
if v4 > 18 goto label1;
v5 = virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.Number getNumberValue()>();
return v5;
label1:
v6 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _cleanedTextValue>;
return v6;
label2:
v7 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v8 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;
if v7 == v8 goto label3;
v9 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (com.fasterxml.jackson.core.JsonToken)>(v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Current token (\u0001) not numeric, can not use numeric value accessors");
virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: void _reportError(java.lang.String)>(v10);
label3:
v11 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numTypesValid>;
v12 = v11 & 16;
if v12 == 0 goto label4;
v13 = virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.math.BigDecimal _getBigDecimal()>();
return v13;
label4:
v14 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numTypesValid>;
v15 = v14 & 8;
if v15 == 0 goto label5;
v16 = virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: double _getNumberDouble()>();
v17 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(v16);
return v17;
label5:
v18 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numTypesValid>;
v19 = v18 & 32;
if v19 == 0 goto label6;
v20 = virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: float _getNumberFloat()>();
v21 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(v20);
return v21;
label6:
v22 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _cleanedTextValue>;
return v22;
}
protected void _parseNumericValue(int) throws java.io.IOException
{
com.fasterxml.jackson.core.StreamReadConstraints v15, v28, v33;
java.math.BigDecimal v32;
byte v12, v13;
java.math.BigInteger v19;
boolean v11, v18, v31, v36, v6;
com.fasterxml.jackson.core.StreamReadFeature v17, v30, v35;
long v10, v21;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
int v1, v16, v20, v29, v34, v5, v8;
com.fasterxml.jackson.core.JsonToken v2, v25, v26, v3, v41;
java.lang.String v14, v23, v24, v27, v39, v4, v40, v42, v7, v9;
double v37;
java.lang.NumberFormatException v22, v38;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 := @parameter0: int;
v2 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
if v2 != v3 goto label11;
v4 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _cleanedTextValue>;
v5 = virtualinvoke v4.<java.lang.String: int length()>();
v6 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: boolean _numberNegative>;
if v6 == 0 goto label01;
v5 = v5 - 1;
label01:
if v5 > 9 goto label02;
v7 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _cleanedTextValue>;
v8 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v7);
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numberInt> = v8;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numTypesValid> = 1;
return;
label02:
if v5 > 18 goto label05;
v9 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _cleanedTextValue>;
v10 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(v9);
if v5 != 10 goto label04;
v11 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: boolean _numberNegative>;
if v11 == 0 goto label03;
v12 = v10 cmp -2147483648L;
if v12 < 0 goto label04;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numberInt> = v10;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numTypesValid> = 1;
return;
label03:
v13 = v10 cmp 2147483647L;
if v13 > 0 goto label04;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numberInt> = v10;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numTypesValid> = 1;
return;
label04:
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: long _numberLong> = v10;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numTypesValid> = 2;
return;
label05:
v14 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _cleanedTextValue>;
label06:
v15 = virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.StreamReadConstraints streamReadConstraints()>();
v16 = virtualinvoke v14.<java.lang.String: int length()>();
virtualinvoke v15.<com.fasterxml.jackson.core.StreamReadConstraints: void validateIntegerLength(int)>(v16);
v17 = <com.fasterxml.jackson.core.StreamReadFeature: com.fasterxml.jackson.core.StreamReadFeature USE_FAST_BIG_NUMBER_PARSER>;
v18 = virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: boolean isEnabled(com.fasterxml.jackson.core.StreamReadFeature)>(v17);
v19 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: java.math.BigInteger parseBigInteger(java.lang.String,boolean)>(v14, v18);
if v5 != 19 goto label08;
v20 = virtualinvoke v19.<java.math.BigInteger: int bitLength()>();
if v20 > 63 goto label08;
v21 = virtualinvoke v19.<java.math.BigInteger: long longValue()>();
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: long _numberLong> = v21;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numTypesValid> = 2;
label07:
return;
label08:
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.math.BigInteger _numberBigInt> = v19;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numTypesValid> = 4;
label09:
return;
label10:
v22 := @caughtexception;
v23 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _textValue>;
v24 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v23) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Malformed numeric value \'\u0001\'");
virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: void _wrapError(java.lang.String,java.lang.Throwable)>(v24, v22);
label11:
v25 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v26 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;
if v25 != v26 goto label17;
v27 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _cleanedTextValue>;
label12:
if v1 != 16 goto label13;
v28 = virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.StreamReadConstraints streamReadConstraints()>();
v29 = virtualinvoke v27.<java.lang.String: int length()>();
virtualinvoke v28.<com.fasterxml.jackson.core.StreamReadConstraints: void validateFPLength(int)>(v29);
v30 = <com.fasterxml.jackson.core.StreamReadFeature: com.fasterxml.jackson.core.StreamReadFeature USE_FAST_BIG_NUMBER_PARSER>;
v31 = virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: boolean isEnabled(com.fasterxml.jackson.core.StreamReadFeature)>(v30);
v32 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: java.math.BigDecimal parseBigDecimal(java.lang.String,boolean)>(v27, v31);
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.math.BigDecimal _numberBigDecimal> = v32;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numTypesValid> = 16;
goto label16;
label13:
v33 = virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.StreamReadConstraints streamReadConstraints()>();
v34 = virtualinvoke v27.<java.lang.String: int length()>();
virtualinvoke v33.<com.fasterxml.jackson.core.StreamReadConstraints: void validateFPLength(int)>(v34);
v35 = <com.fasterxml.jackson.core.StreamReadFeature: com.fasterxml.jackson.core.StreamReadFeature USE_FAST_DOUBLE_PARSER>;
v36 = virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: boolean isEnabled(com.fasterxml.jackson.core.StreamReadFeature)>(v35);
v37 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: double parseDouble(java.lang.String,boolean)>(v27, v36);
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: double _numberDouble> = v37;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numTypesValid> = 8;
label14:
goto label16;
label15:
v38 := @caughtexception;
v39 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _textValue>;
v40 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v39) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Malformed numeric value \'\u0001\'");
virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: void _wrapError(java.lang.String,java.lang.Throwable)>(v40, v38);
label16:
return;
label17:
v41 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v42 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (com.fasterxml.jackson.core.JsonToken)>(v41) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Current token (\u0001) not numeric, can not use numeric value accessors");
virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: void _reportError(java.lang.String)>(v42);
return;
catch java.lang.NumberFormatException from label06 to label07 with label10;
catch java.lang.NumberFormatException from label08 to label09 with label10;
catch java.lang.NumberFormatException from label12 to label14 with label15;
}
protected int _parseIntValue() throws java.io.IOException
{
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
int v10, v4, v7, v8, v9;
com.fasterxml.jackson.core.JsonToken v1, v2;
java.lang.String v3, v6;
boolean v5;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: com.fasterxml.jackson.core.JsonToken _currToken>;
v2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
if v1 != v2 goto label2;
v3 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _cleanedTextValue>;
v4 = virtualinvoke v3.<java.lang.String: int length()>();
v5 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: boolean _numberNegative>;
if v5 == 0 goto label1;
v4 = v4 - 1;
label1:
if v4 > 9 goto label2;
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numTypesValid> = 1;
v6 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _cleanedTextValue>;
v7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v6);
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numberInt> = v7;
return v7;
label2:
virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: void _parseNumericValue(int)>(1);
v8 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numTypesValid>;
v9 = v8 & 1;
if v9 != 0 goto label3;
virtualinvoke v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: void convertNumberToInt()>();
label3:
v10 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: int _numberInt>;
return v10;
}
public java.lang.String getObjectId() throws java.io.IOException
{
java.lang.String v1;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _currentAnchor>;
return v1;
}
public java.lang.String getTypeId() throws java.io.IOException
{
org.yaml.snakeyaml.events.Event v1, v3, v5, v7;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
java.lang.String v4;
boolean v2, v6, v8;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: org.yaml.snakeyaml.events.Event _lastTagEvent>;
v2 = v1 instanceof org.yaml.snakeyaml.events.CollectionStartEvent;
if v2 == 0 goto label1;
v3 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: org.yaml.snakeyaml.events.Event _lastTagEvent>;
v4 = virtualinvoke v3.<org.yaml.snakeyaml.events.CollectionStartEvent: java.lang.String getTag()>();
goto label3;
label1:
v5 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: org.yaml.snakeyaml.events.Event _lastTagEvent>;
v6 = v5 instanceof org.yaml.snakeyaml.events.ScalarEvent;
if v6 == 0 goto label2;
v7 = v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: org.yaml.snakeyaml.events.Event _lastTagEvent>;
v4 = virtualinvoke v7.<org.yaml.snakeyaml.events.ScalarEvent: java.lang.String getTag()>();
goto label3;
label2:
return null;
label3:
if v4 == null goto label6;
label4:
v8 = virtualinvoke v4.<java.lang.String: boolean startsWith(java.lang.String)>("!");
if v8 == 0 goto label5;
v4 = virtualinvoke v4.<java.lang.String: java.lang.String substring(int)>(1);
goto label4;
label5:
return v4;
label6:
return null;
}
private com.fasterxml.jackson.core.JsonToken _cleanYamlInt(java.lang.String)
{
char v4, v7;
byte v5;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
int v2, v6;
java.lang.StringBuilder v3;
com.fasterxml.jackson.core.JsonToken v9;
java.lang.String v1, v8;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v1.<java.lang.String: int length()>();
v3 = new java.lang.StringBuilder;
specialinvoke v3.<java.lang.StringBuilder: void <init>(int)>(v2);
v4 = virtualinvoke v1.<java.lang.String: char charAt(int)>(0);
if v4 != 43 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
v6 = v5;
label3:
if v6 >= v2 goto label5;
v7 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v6);
if v7 == 95 goto label4;
virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v7);
label4:
v6 = v6 + 1;
goto label3;
label5:
v8 = virtualinvoke v3.<java.lang.StringBuilder: java.lang.String toString()>();
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _cleanedTextValue> = v8;
v9 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;
return v9;
}
private java.lang.String _cleanUnderscores(java.lang.String, int, int)
{
char v5;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
int v2, v3, v6;
java.lang.StringBuilder v4;
java.lang.String v1, v7;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = new java.lang.StringBuilder;
specialinvoke v4.<java.lang.StringBuilder: void <init>(int)>(v3);
label1:
if v2 >= v3 goto label3;
v5 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v2);
if v5 == 95 goto label2;
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v5);
label2:
v2 = v2 + 1;
goto label1;
label3:
v6 = virtualinvoke v4.<java.lang.StringBuilder: int length()>();
if v6 != v3 goto label4;
return v1;
label4:
v7 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.String toString()>();
return v7;
}
private com.fasterxml.jackson.core.JsonToken _cleanYamlFloat(java.lang.String)
{
char v6, v9;
byte v7;
com.fasterxml.jackson.dataformat.yaml.YAMLParser v0;
int v2, v3, v8;
java.lang.StringBuilder v5;
com.fasterxml.jackson.core.JsonToken v11, v4;
java.lang.String v1, v10;
v0 := @this: com.fasterxml.jackson.dataformat.yaml.YAMLParser;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v1.<java.lang.String: int length()>();
v3 = virtualinvoke v1.<java.lang.String: int indexOf(int)>(95);
if v3 < 0 goto label1;
if v2 != 0 goto label2;
label1:
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _cleanedTextValue> = v1;
v4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;
return v4;
label2:
v5 = new java.lang.StringBuilder;
specialinvoke v5.<java.lang.StringBuilder: void <init>(int)>(v2);
v6 = virtualinvoke v1.<java.lang.String: char charAt(int)>(0);
if v6 != 43 goto label3;
v7 = 1;
goto label4;
label3:
v7 = 0;
label4:
v8 = v7;
label5:
if v8 >= v2 goto label7;
v9 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v8);
if v9 == 95 goto label6;
virtualinvoke v5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v9);
label6:
v8 = v8 + 1;
goto label5;
label7:
v10 = virtualinvoke v5.<java.lang.StringBuilder: java.lang.String toString()>();
v0.<com.fasterxml.jackson.dataformat.yaml.YAMLParser: java.lang.String _cleanedTextValue> = v10;
v11 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;
return v11;
}
}