public final class com.fasterxml.jackson.datatype.jsr310.DecimalUtils extends java.lang.Object
{
private static final java.math.BigDecimal ONE_BILLION;
private void <init>()
{
com.fasterxml.jackson.datatype.jsr310.DecimalUtils v0;
v0 := @this: com.fasterxml.jackson.datatype.jsr310.DecimalUtils;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.lang.String toDecimal(long, int)
{
long v0;
byte v2, v3;
int v1, v5, v6;
java.lang.StringBuilder v4, v8, v9;
java.lang.String v7;
v0 := @parameter0: long;
v1 := @parameter1: int;
specialinvoke v9.<java.lang.StringBuilder: void <init>(int)>(20);
v2 = v1 cmp 0L;
if v2 != 0 goto label2;
v3 = v0 cmp 0L;
if v3 != 0 goto label1;
return "0.0";
label1:
virtualinvoke v8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("000000000");
goto label5;
label2:
v4 = new java.lang.StringBuilder;
specialinvoke v4.<java.lang.StringBuilder: void <init>(int)>(9);
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(v1);
v5 = virtualinvoke v4.<java.lang.StringBuilder: int length()>();
v6 = 9 - v5;
label3:
if v6 <= 0 goto label4;
v6 = v6 - 1;
virtualinvoke v8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);
goto label3;
label4:
virtualinvoke v8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(v4);
label5:
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.");
return v7;
}
public static java.math.BigDecimal toBigDecimal(long, int)
{
long v0;
java.math.BigDecimal v4, v5, v6, v7, v9;
byte v2, v3;
int v1;
java.lang.String v8;
v0 := @parameter0: long;
v1 := @parameter1: int;
v2 = v1 cmp 0L;
if v2 != 0 goto label2;
v3 = v0 cmp 0L;
if v3 != 0 goto label1;
v4 = <java.math.BigDecimal: java.math.BigDecimal ZERO>;
v5 = virtualinvoke v4.<java.math.BigDecimal: java.math.BigDecimal setScale(int)>(1);
return v5;
label1:
v6 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(v0);
v7 = virtualinvoke v6.<java.math.BigDecimal: java.math.BigDecimal setScale(int)>(9);
return v7;
label2:
v8 = staticinvoke <com.fasterxml.jackson.datatype.jsr310.DecimalUtils: java.lang.String toDecimal(long,int)>(v0, v1);
v9 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: java.math.BigDecimal parseBigDecimal(java.lang.String)>(v8);
return v9;
}
public static int extractNanosecondDecimal(java.math.BigDecimal, long)
{
java.math.BigDecimal v0, v2, v3, v4, v5;
int v6;
long v1;
v0 := @parameter0: java.math.BigDecimal;
v1 := @parameter1: long;
v2 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(v1);
v3 = virtualinvoke v0.<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal)>(v2);
v4 = <com.fasterxml.jackson.datatype.jsr310.DecimalUtils: java.math.BigDecimal ONE_BILLION>;
v5 = virtualinvoke v3.<java.math.BigDecimal: java.math.BigDecimal multiply(java.math.BigDecimal)>(v4);
v6 = virtualinvoke v5.<java.math.BigDecimal: int intValue()>();
return v6;
}
public static java.lang.Object extractSecondsAndNanos(java.math.BigDecimal, java.util.function.BiFunction)
{
java.util.function.BiFunction v1;
long v15, v7;
java.lang.Integer v18;
java.math.BigDecimal v0, v10, v11, v12, v2;
byte v13, v16;
java.lang.Long v17;
int v3, v4, v5, v6, v8, v9;
java.time.Instant v14;
java.lang.Object v19;
v0 := @parameter0: java.math.BigDecimal;
v1 := @parameter1: java.util.function.BiFunction;
v2 = virtualinvoke v0.<java.math.BigDecimal: java.math.BigDecimal scaleByPowerOfTen(int)>(9);
v3 = virtualinvoke v2.<java.math.BigDecimal: int precision()>();
v4 = virtualinvoke v2.<java.math.BigDecimal: int scale()>();
v5 = v3 - v4;
if v5 > 0 goto label1;
v6 = 0;
v7 = (long) 0;
goto label3;
label1:
v8 = virtualinvoke v0.<java.math.BigDecimal: int scale()>();
v9 = (int) -63;
if v8 >= v9 goto label2;
v6 = 0;
v7 = (long) 0;
goto label3;
label2:
v7 = virtualinvoke v0.<java.math.BigDecimal: long longValue()>();
v10 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>(v7);
v11 = virtualinvoke v10.<java.math.BigDecimal: java.math.BigDecimal scaleByPowerOfTen(int)>(9);
v12 = virtualinvoke v2.<java.math.BigDecimal: java.math.BigDecimal subtract(java.math.BigDecimal)>(v11);
v6 = virtualinvoke v12.<java.math.BigDecimal: int intValue()>();
v13 = v7 cmp 0L;
if v13 >= 0 goto label3;
v14 = <java.time.Instant: java.time.Instant MIN>;
v15 = virtualinvoke v14.<java.time.Instant: long getEpochSecond()>();
v16 = v7 cmp v15;
if v16 <= 0 goto label3;
v6 = staticinvoke <java.lang.Math: int abs(int)>(v6);
label3:
v17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v7);
v18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v6);
v19 = interfaceinvoke v1.<java.util.function.BiFunction: java.lang.Object apply(java.lang.Object,java.lang.Object)>(v17, v18);
return v19;
}
static void <clinit>()
{
java.math.BigDecimal v0;
v0 = new java.math.BigDecimal;
specialinvoke v0.<java.math.BigDecimal: void <init>(long)>(1000000000L);
<com.fasterxml.jackson.datatype.jsr310.DecimalUtils: java.math.BigDecimal ONE_BILLION> = v0;
return;
}
}