class io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor extends io.netty.channel.ChannelInboundHandlerAdapter
{
private final io.netty.channel.EventLoopGroup childGroup;
private final io.netty.channel.ChannelHandler childHandler;
private final java.util.Map$Entry[] childOptions;
private final java.util.Map$Entry[] childAttrs;
private final java.lang.Runnable enableAutoReadTask;
void <init>(io.netty.channel.Channel, io.netty.channel.EventLoopGroup, io.netty.channel.ChannelHandler, java.util.Map$Entry[], java.util.Map$Entry[])
{
io.netty.channel.Channel v1;
io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor$1 v6;
io.netty.channel.EventLoopGroup v2;
io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor v0;
io.netty.channel.ChannelHandler v3;
java.util.Map$Entry[] v4, v5;
v0 := @this: io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: io.netty.channel.EventLoopGroup;
v3 := @parameter2: io.netty.channel.ChannelHandler;
v4 := @parameter3: java.util.Map$Entry[];
v5 := @parameter4: java.util.Map$Entry[];
specialinvoke v0.<io.netty.channel.ChannelInboundHandlerAdapter: void <init>()>();
v0.<io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor: io.netty.channel.EventLoopGroup childGroup> = v2;
v0.<io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor: io.netty.channel.ChannelHandler childHandler> = v3;
v0.<io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor: java.util.Map$Entry[] childOptions> = v4;
v0.<io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor: java.util.Map$Entry[] childAttrs> = v5;
v6 = new io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor$1;
specialinvoke v6.<io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor$1: void <init>(io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor,io.netty.channel.Channel)>(v0, v1);
v0.<io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor: java.lang.Runnable enableAutoReadTask> = v6;
return;
}
public void channelRead(io.netty.channel.ChannelHandlerContext, java.lang.Object)
{
java.lang.Throwable v12;
io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor$2 v11;
io.netty.channel.EventLoopGroup v9;
io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor v0;
io.netty.channel.ChannelPipeline v3;
io.netty.channel.ChannelHandler[] v4;
io.netty.channel.ChannelFuture v10;
io.netty.channel.ChannelHandlerContext v1;
io.netty.util.internal.logging.InternalLogger v7;
io.netty.channel.ChannelHandler v5;
java.lang.Object v2;
java.util.Map$Entry[] v6, v8;
v0 := @this: io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 = interfaceinvoke v2.<io.netty.channel.Channel: io.netty.channel.ChannelPipeline pipeline()>();
v4 = newarray (io.netty.channel.ChannelHandler)[1];
v5 = v0.<io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor: io.netty.channel.ChannelHandler childHandler>;
v4[0] = v5;
interfaceinvoke v3.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline addLast(io.netty.channel.ChannelHandler[])>(v4);
v6 = v0.<io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor: java.util.Map$Entry[] childOptions>;
v7 = <io.netty.bootstrap.ServerBootstrap: io.netty.util.internal.logging.InternalLogger logger>;
staticinvoke <io.netty.bootstrap.AbstractBootstrap: void setChannelOptions(io.netty.channel.Channel,java.util.Map$Entry[],io.netty.util.internal.logging.InternalLogger)>(v2, v6, v7);
v8 = v0.<io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor: java.util.Map$Entry[] childAttrs>;
staticinvoke <io.netty.bootstrap.AbstractBootstrap: void setAttributes(io.netty.channel.Channel,java.util.Map$Entry[])>(v2, v8);
label1:
v9 = v0.<io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor: io.netty.channel.EventLoopGroup childGroup>;
v10 = interfaceinvoke v9.<io.netty.channel.EventLoopGroup: io.netty.channel.ChannelFuture register(io.netty.channel.Channel)>(v2);
v11 = new io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor$2;
specialinvoke v11.<io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor$2: void <init>(io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor,io.netty.channel.Channel)>(v0, v2);
interfaceinvoke v10.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v11);
label2:
goto label4;
label3:
v12 := @caughtexception;
staticinvoke <io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor: void forceClose(io.netty.channel.Channel,java.lang.Throwable)>(v2, v12);
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
private static void forceClose(io.netty.channel.Channel, java.lang.Throwable)
{
io.netty.channel.Channel v0;
java.lang.Throwable v1;
io.netty.util.internal.logging.InternalLogger v3;
io.netty.channel.Channel$Unsafe v2;
v0 := @parameter0: io.netty.channel.Channel;
v1 := @parameter1: java.lang.Throwable;
v2 = interfaceinvoke v0.<io.netty.channel.Channel: io.netty.channel.Channel$Unsafe unsafe()>();
interfaceinvoke v2.<io.netty.channel.Channel$Unsafe: void closeForcibly()>();
v3 = <io.netty.bootstrap.ServerBootstrap: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v3.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Failed to register an accepted channel: {}", v0, v1);
return;
}
public void exceptionCaught(io.netty.channel.ChannelHandlerContext, java.lang.Throwable) throws java.lang.Exception
{
java.lang.Throwable v2;
io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor v0;
io.netty.channel.EventLoop v7;
java.lang.Runnable v8;
io.netty.channel.Channel v3, v6;
java.util.concurrent.TimeUnit v9;
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelConfig v4;
boolean v5;
v0 := @this: io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Throwable;
v3 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v4 = interfaceinvoke v3.<io.netty.channel.Channel: io.netty.channel.ChannelConfig config()>();
v5 = interfaceinvoke v4.<io.netty.channel.ChannelConfig: boolean isAutoRead()>();
if v5 == 0 goto label1;
interfaceinvoke v4.<io.netty.channel.ChannelConfig: io.netty.channel.ChannelConfig setAutoRead(boolean)>(0);
v6 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v7 = interfaceinvoke v6.<io.netty.channel.Channel: io.netty.channel.EventLoop eventLoop()>();
v8 = v0.<io.netty.bootstrap.ServerBootstrap$ServerBootstrapAcceptor: java.lang.Runnable enableAutoReadTask>;
v9 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
interfaceinvoke v7.<io.netty.channel.EventLoop: io.netty.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(v8, 1L, v9);
label1:
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireExceptionCaught(java.lang.Throwable)>(v2);
return;
}
}