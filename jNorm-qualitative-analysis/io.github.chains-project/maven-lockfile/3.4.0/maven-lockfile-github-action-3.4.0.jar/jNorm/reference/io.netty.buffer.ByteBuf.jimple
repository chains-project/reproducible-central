public abstract class io.netty.buffer.ByteBuf extends java.lang.Object implements io.netty.util.ReferenceCounted, java.lang.Comparable, io.netty.buffer.ByteBufConvertible
{
public void <init>()
{
io.netty.buffer.ByteBuf v0;
v0 := @this: io.netty.buffer.ByteBuf;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public abstract int capacity();
public abstract io.netty.buffer.ByteBuf capacity(int);
public abstract int maxCapacity();
public abstract io.netty.buffer.ByteBufAllocator alloc();
public abstract java.nio.ByteOrder order();
public abstract io.netty.buffer.ByteBuf order(java.nio.ByteOrder);
public abstract io.netty.buffer.ByteBuf unwrap();
public abstract boolean isDirect();
public abstract boolean isReadOnly();
public abstract io.netty.buffer.ByteBuf asReadOnly();
public abstract int readerIndex();
public abstract io.netty.buffer.ByteBuf readerIndex(int);
public abstract int writerIndex();
public abstract io.netty.buffer.ByteBuf writerIndex(int);
public abstract io.netty.buffer.ByteBuf setIndex(int, int);
public abstract int readableBytes();
public abstract int writableBytes();
public abstract int maxWritableBytes();
public int maxFastWritableBytes()
{
int v1;
io.netty.buffer.ByteBuf v0;
v0 := @this: io.netty.buffer.ByteBuf;
v1 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int writableBytes()>();
return v1;
}
public abstract boolean isReadable();
public abstract boolean isReadable(int);
public abstract boolean isWritable();
public abstract boolean isWritable(int);
public abstract io.netty.buffer.ByteBuf clear();
public abstract io.netty.buffer.ByteBuf markReaderIndex();
public abstract io.netty.buffer.ByteBuf resetReaderIndex();
public abstract io.netty.buffer.ByteBuf markWriterIndex();
public abstract io.netty.buffer.ByteBuf resetWriterIndex();
public abstract io.netty.buffer.ByteBuf discardReadBytes();
public abstract io.netty.buffer.ByteBuf discardSomeReadBytes();
public abstract io.netty.buffer.ByteBuf ensureWritable(int);
public abstract int ensureWritable(int, boolean);
public abstract boolean getBoolean(int);
public abstract byte getByte(int);
public abstract short getUnsignedByte(int);
public abstract short getShort(int);
public abstract short getShortLE(int);
public abstract int getUnsignedShort(int);
public abstract int getUnsignedShortLE(int);
public abstract int getMedium(int);
public abstract int getMediumLE(int);
public abstract int getUnsignedMedium(int);
public abstract int getUnsignedMediumLE(int);
public abstract int getInt(int);
public abstract int getIntLE(int);
public abstract long getUnsignedInt(int);
public abstract long getUnsignedIntLE(int);
public abstract long getLong(int);
public abstract long getLongLE(int);
public abstract char getChar(int);
public abstract float getFloat(int);
public float getFloatLE(int)
{
io.netty.buffer.ByteBuf v0;
int v1, v2;
float v3;
v0 := @this: io.netty.buffer.ByteBuf;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int getIntLE(int)>(v1);
v3 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>(v2);
return v3;
}
public abstract double getDouble(int);
public double getDoubleLE(int)
{
io.netty.buffer.ByteBuf v0;
int v1;
long v2;
double v3;
v0 := @this: io.netty.buffer.ByteBuf;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<io.netty.buffer.ByteBuf: long getLongLE(int)>(v1);
v3 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(v2);
return v3;
}
public abstract io.netty.buffer.ByteBuf getBytes(int, io.netty.buffer.ByteBuf);
public abstract io.netty.buffer.ByteBuf getBytes(int, io.netty.buffer.ByteBuf, int);
public abstract io.netty.buffer.ByteBuf getBytes(int, io.netty.buffer.ByteBuf, int, int);
public abstract io.netty.buffer.ByteBuf getBytes(int, byte[]);
public abstract io.netty.buffer.ByteBuf getBytes(int, byte[], int, int);
public abstract io.netty.buffer.ByteBuf getBytes(int, java.nio.ByteBuffer);
public abstract io.netty.buffer.ByteBuf getBytes(int, java.io.OutputStream, int) throws java.io.IOException;
public abstract int getBytes(int, java.nio.channels.GatheringByteChannel, int) throws java.io.IOException;
public abstract int getBytes(int, java.nio.channels.FileChannel, long, int) throws java.io.IOException;
public abstract java.lang.CharSequence getCharSequence(int, int, java.nio.charset.Charset);
public abstract io.netty.buffer.ByteBuf setBoolean(int, boolean);
public abstract io.netty.buffer.ByteBuf setByte(int, int);
public abstract io.netty.buffer.ByteBuf setShort(int, int);
public abstract io.netty.buffer.ByteBuf setShortLE(int, int);
public abstract io.netty.buffer.ByteBuf setMedium(int, int);
public abstract io.netty.buffer.ByteBuf setMediumLE(int, int);
public abstract io.netty.buffer.ByteBuf setInt(int, int);
public abstract io.netty.buffer.ByteBuf setIntLE(int, int);
public abstract io.netty.buffer.ByteBuf setLong(int, long);
public abstract io.netty.buffer.ByteBuf setLongLE(int, long);
public abstract io.netty.buffer.ByteBuf setChar(int, int);
public abstract io.netty.buffer.ByteBuf setFloat(int, float);
public io.netty.buffer.ByteBuf setFloatLE(int, float)
{
io.netty.buffer.ByteBuf v0, v4;
int v1, v3;
float v2;
v0 := @this: io.netty.buffer.ByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: float;
v3 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(v2);
v4 = virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf setIntLE(int,int)>(v1, v3);
return v4;
}
public abstract io.netty.buffer.ByteBuf setDouble(int, double);
public io.netty.buffer.ByteBuf setDoubleLE(int, double)
{
io.netty.buffer.ByteBuf v0, v4;
int v1;
long v3;
double v2;
v0 := @this: io.netty.buffer.ByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: double;
v3 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(v2);
v4 = virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf setLongLE(int,long)>(v1, v3);
return v4;
}
public abstract io.netty.buffer.ByteBuf setBytes(int, io.netty.buffer.ByteBuf);
public abstract io.netty.buffer.ByteBuf setBytes(int, io.netty.buffer.ByteBuf, int);
public abstract io.netty.buffer.ByteBuf setBytes(int, io.netty.buffer.ByteBuf, int, int);
public abstract io.netty.buffer.ByteBuf setBytes(int, byte[]);
public abstract io.netty.buffer.ByteBuf setBytes(int, byte[], int, int);
public abstract io.netty.buffer.ByteBuf setBytes(int, java.nio.ByteBuffer);
public abstract int setBytes(int, java.io.InputStream, int) throws java.io.IOException;
public abstract int setBytes(int, java.nio.channels.ScatteringByteChannel, int) throws java.io.IOException;
public abstract int setBytes(int, java.nio.channels.FileChannel, long, int) throws java.io.IOException;
public abstract io.netty.buffer.ByteBuf setZero(int, int);
public abstract int setCharSequence(int, java.lang.CharSequence, java.nio.charset.Charset);
public abstract boolean readBoolean();
public abstract byte readByte();
public abstract short readUnsignedByte();
public abstract short readShort();
public abstract short readShortLE();
public abstract int readUnsignedShort();
public abstract int readUnsignedShortLE();
public abstract int readMedium();
public abstract int readMediumLE();
public abstract int readUnsignedMedium();
public abstract int readUnsignedMediumLE();
public abstract int readInt();
public abstract int readIntLE();
public abstract long readUnsignedInt();
public abstract long readUnsignedIntLE();
public abstract long readLong();
public abstract long readLongLE();
public abstract char readChar();
public abstract float readFloat();
public float readFloatLE()
{
int v1;
float v2;
io.netty.buffer.ByteBuf v0;
v0 := @this: io.netty.buffer.ByteBuf;
v1 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int readIntLE()>();
v2 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>(v1);
return v2;
}
public abstract double readDouble();
public double readDoubleLE()
{
long v1;
io.netty.buffer.ByteBuf v0;
double v2;
v0 := @this: io.netty.buffer.ByteBuf;
v1 = virtualinvoke v0.<io.netty.buffer.ByteBuf: long readLongLE()>();
v2 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(v1);
return v2;
}
public abstract io.netty.buffer.ByteBuf readBytes(int);
public abstract io.netty.buffer.ByteBuf readSlice(int);
public abstract io.netty.buffer.ByteBuf readRetainedSlice(int);
public abstract io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf);
public abstract io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf, int);
public abstract io.netty.buffer.ByteBuf readBytes(io.netty.buffer.ByteBuf, int, int);
public abstract io.netty.buffer.ByteBuf readBytes(byte[]);
public abstract io.netty.buffer.ByteBuf readBytes(byte[], int, int);
public abstract io.netty.buffer.ByteBuf readBytes(java.nio.ByteBuffer);
public abstract io.netty.buffer.ByteBuf readBytes(java.io.OutputStream, int) throws java.io.IOException;
public abstract int readBytes(java.nio.channels.GatheringByteChannel, int) throws java.io.IOException;
public abstract java.lang.CharSequence readCharSequence(int, java.nio.charset.Charset);
public abstract int readBytes(java.nio.channels.FileChannel, long, int) throws java.io.IOException;
public abstract io.netty.buffer.ByteBuf skipBytes(int);
public abstract io.netty.buffer.ByteBuf writeBoolean(boolean);
public abstract io.netty.buffer.ByteBuf writeByte(int);
public abstract io.netty.buffer.ByteBuf writeShort(int);
public abstract io.netty.buffer.ByteBuf writeShortLE(int);
public abstract io.netty.buffer.ByteBuf writeMedium(int);
public abstract io.netty.buffer.ByteBuf writeMediumLE(int);
public abstract io.netty.buffer.ByteBuf writeInt(int);
public abstract io.netty.buffer.ByteBuf writeIntLE(int);
public abstract io.netty.buffer.ByteBuf writeLong(long);
public abstract io.netty.buffer.ByteBuf writeLongLE(long);
public abstract io.netty.buffer.ByteBuf writeChar(int);
public abstract io.netty.buffer.ByteBuf writeFloat(float);
public io.netty.buffer.ByteBuf writeFloatLE(float)
{
io.netty.buffer.ByteBuf v0, v3;
int v2;
float v1;
v0 := @this: io.netty.buffer.ByteBuf;
v1 := @parameter0: float;
v2 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(v1);
v3 = virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeIntLE(int)>(v2);
return v3;
}
public abstract io.netty.buffer.ByteBuf writeDouble(double);
public io.netty.buffer.ByteBuf writeDoubleLE(double)
{
io.netty.buffer.ByteBuf v0, v3;
long v2;
double v1;
v0 := @this: io.netty.buffer.ByteBuf;
v1 := @parameter0: double;
v2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(v1);
v3 = virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeLongLE(long)>(v2);
return v3;
}
public abstract io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf);
public abstract io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf, int);
public abstract io.netty.buffer.ByteBuf writeBytes(io.netty.buffer.ByteBuf, int, int);
public abstract io.netty.buffer.ByteBuf writeBytes(byte[]);
public abstract io.netty.buffer.ByteBuf writeBytes(byte[], int, int);
public abstract io.netty.buffer.ByteBuf writeBytes(java.nio.ByteBuffer);
public abstract int writeBytes(java.io.InputStream, int) throws java.io.IOException;
public abstract int writeBytes(java.nio.channels.ScatteringByteChannel, int) throws java.io.IOException;
public abstract int writeBytes(java.nio.channels.FileChannel, long, int) throws java.io.IOException;
public abstract io.netty.buffer.ByteBuf writeZero(int);
public abstract int writeCharSequence(java.lang.CharSequence, java.nio.charset.Charset);
public abstract int indexOf(int, int, byte);
public abstract int bytesBefore(byte);
public abstract int bytesBefore(int, byte);
public abstract int bytesBefore(int, int, byte);
public abstract int forEachByte(io.netty.util.ByteProcessor);
public abstract int forEachByte(int, int, io.netty.util.ByteProcessor);
public abstract int forEachByteDesc(io.netty.util.ByteProcessor);
public abstract int forEachByteDesc(int, int, io.netty.util.ByteProcessor);
public abstract io.netty.buffer.ByteBuf copy();
public abstract io.netty.buffer.ByteBuf copy(int, int);
public abstract io.netty.buffer.ByteBuf slice();
public abstract io.netty.buffer.ByteBuf retainedSlice();
public abstract io.netty.buffer.ByteBuf slice(int, int);
public abstract io.netty.buffer.ByteBuf retainedSlice(int, int);
public abstract io.netty.buffer.ByteBuf duplicate();
public abstract io.netty.buffer.ByteBuf retainedDuplicate();
public abstract int nioBufferCount();
public abstract java.nio.ByteBuffer nioBuffer();
public abstract java.nio.ByteBuffer nioBuffer(int, int);
public abstract java.nio.ByteBuffer internalNioBuffer(int, int);
public abstract java.nio.ByteBuffer[] nioBuffers();
public abstract java.nio.ByteBuffer[] nioBuffers(int, int);
public abstract boolean hasArray();
public abstract byte[] array();
public abstract int arrayOffset();
public abstract boolean hasMemoryAddress();
public abstract long memoryAddress();
public boolean isContiguous()
{
io.netty.buffer.ByteBuf v0;
v0 := @this: io.netty.buffer.ByteBuf;
return 0;
}
public io.netty.buffer.ByteBuf asByteBuf()
{
io.netty.buffer.ByteBuf v0;
v0 := @this: io.netty.buffer.ByteBuf;
return v0;
}
public abstract java.lang.String toString(java.nio.charset.Charset);
public abstract java.lang.String toString(int, int, java.nio.charset.Charset);
public abstract int hashCode();
public abstract boolean equals(java.lang.Object);
public abstract int compareTo(io.netty.buffer.ByteBuf);
public abstract java.lang.String toString();
public abstract io.netty.buffer.ByteBuf retain(int);
public abstract io.netty.buffer.ByteBuf retain();
public abstract io.netty.buffer.ByteBuf touch();
public abstract io.netty.buffer.ByteBuf touch(java.lang.Object);
boolean isAccessible()
{
int v1;
io.netty.buffer.ByteBuf v0;
boolean v2;
v0 := @this: io.netty.buffer.ByteBuf;
v1 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int refCnt()>();
if v1 == 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
}