public interface  io.netty.buffer.ByteBufAllocator extends java.lang.Object
{
public static final io.netty.buffer.ByteBufAllocator DEFAULT;
public abstract io.netty.buffer.ByteBuf buffer();
public abstract io.netty.buffer.ByteBuf buffer(int);
public abstract io.netty.buffer.ByteBuf buffer(int, int);
public abstract io.netty.buffer.ByteBuf ioBuffer();
public abstract io.netty.buffer.ByteBuf ioBuffer(int);
public abstract io.netty.buffer.ByteBuf ioBuffer(int, int);
public abstract io.netty.buffer.ByteBuf heapBuffer();
public abstract io.netty.buffer.ByteBuf heapBuffer(int);
public abstract io.netty.buffer.ByteBuf heapBuffer(int, int);
public abstract io.netty.buffer.ByteBuf directBuffer();
public abstract io.netty.buffer.ByteBuf directBuffer(int);
public abstract io.netty.buffer.ByteBuf directBuffer(int, int);
public abstract io.netty.buffer.CompositeByteBuf compositeBuffer();
public abstract io.netty.buffer.CompositeByteBuf compositeBuffer(int);
public abstract io.netty.buffer.CompositeByteBuf compositeHeapBuffer();
public abstract io.netty.buffer.CompositeByteBuf compositeHeapBuffer(int);
public abstract io.netty.buffer.CompositeByteBuf compositeDirectBuffer();
public abstract io.netty.buffer.CompositeByteBuf compositeDirectBuffer(int);
public abstract boolean isDirectBufferPooled();
public abstract int calculateNewCapacity(int, int);
static void <clinit>()
{
io.netty.buffer.ByteBufAllocator v0;
v0 = <io.netty.buffer.ByteBufUtil: io.netty.buffer.ByteBufAllocator DEFAULT_ALLOCATOR>;
<io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBufAllocator DEFAULT> = v0;
return;
}
}