final class io.netty.buffer.PoolChunk extends java.lang.Object implements io.netty.buffer.PoolChunkMetric
{
private static final int SIZE_BIT_LENGTH;
private static final int INUSED_BIT_LENGTH;
private static final int SUBPAGE_BIT_LENGTH;
private static final int BITMAP_IDX_BIT_LENGTH;
static final int IS_SUBPAGE_SHIFT;
static final int IS_USED_SHIFT;
static final int SIZE_SHIFT;
static final int RUN_OFFSET_SHIFT;
final io.netty.buffer.PoolArena arena;
final java.lang.Object base;
final java.lang.Object memory;
final boolean unpooled;
private final io.netty.buffer.LongLongHashMap runsAvailMap;
private final io.netty.buffer.LongPriorityQueue[] runsAvail;
private final java.util.concurrent.locks.ReentrantLock runsAvailLock;
private final io.netty.buffer.PoolSubpage[] subpages;
private final io.netty.util.internal.LongCounter pinnedBytes;
private final int pageSize;
private final int pageShifts;
private final int chunkSize;
private final java.util.Deque cachedNioBuffers;
int freeBytes;
io.netty.buffer.PoolChunkList parent;
io.netty.buffer.PoolChunk prev;
io.netty.buffer.PoolChunk next;
static final boolean $assertionsDisabled;
void <init>(io.netty.buffer.PoolArena, java.lang.Object, java.lang.Object, int, int, int, int)
{
io.netty.util.internal.LongCounter v8;
long v15;
int v12, v14, v4, v5, v6, v7;
io.netty.buffer.PoolSubpage[] v13;
io.netty.buffer.LongPriorityQueue[] v9;
java.util.concurrent.locks.ReentrantLock v10;
io.netty.buffer.PoolArena v1;
io.netty.buffer.PoolChunk v0;
java.lang.Object v2, v3;
java.util.ArrayDeque v16;
io.netty.buffer.LongLongHashMap v11;
v0 := @this: io.netty.buffer.PoolChunk;
v1 := @parameter0: io.netty.buffer.PoolArena;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.lang.Object;
v4 := @parameter3: int;
v5 := @parameter4: int;
v6 := @parameter5: int;
v7 := @parameter6: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v8 = staticinvoke <io.netty.util.internal.PlatformDependent: io.netty.util.internal.LongCounter newLongCounter()>();
v0.<io.netty.buffer.PoolChunk: io.netty.util.internal.LongCounter pinnedBytes> = v8;
v0.<io.netty.buffer.PoolChunk: boolean unpooled> = 0;
v0.<io.netty.buffer.PoolChunk: io.netty.buffer.PoolArena arena> = v1;
v0.<io.netty.buffer.PoolChunk: java.lang.Object base> = v2;
v0.<io.netty.buffer.PoolChunk: java.lang.Object memory> = v3;
v0.<io.netty.buffer.PoolChunk: int pageSize> = v4;
v0.<io.netty.buffer.PoolChunk: int pageShifts> = v5;
v0.<io.netty.buffer.PoolChunk: int chunkSize> = v6;
v0.<io.netty.buffer.PoolChunk: int freeBytes> = v6;
v9 = staticinvoke <io.netty.buffer.PoolChunk: io.netty.buffer.LongPriorityQueue[] newRunsAvailqueueArray(int)>(v7);
v0.<io.netty.buffer.PoolChunk: io.netty.buffer.LongPriorityQueue[] runsAvail> = v9;
v10 = new java.util.concurrent.locks.ReentrantLock;
specialinvoke v10.<java.util.concurrent.locks.ReentrantLock: void <init>()>();
v0.<io.netty.buffer.PoolChunk: java.util.concurrent.locks.ReentrantLock runsAvailLock> = v10;
v11 = new io.netty.buffer.LongLongHashMap;
specialinvoke v11.<io.netty.buffer.LongLongHashMap: void <init>(long)>(-1L);
v0.<io.netty.buffer.PoolChunk: io.netty.buffer.LongLongHashMap runsAvailMap> = v11;
v12 = v6 >> v5;
v13 = newarray (io.netty.buffer.PoolSubpage)[v12];
v0.<io.netty.buffer.PoolChunk: io.netty.buffer.PoolSubpage[] subpages> = v13;
v14 = v6 >> v5;
v15 = v14 << 34;
specialinvoke v0.<io.netty.buffer.PoolChunk: void insertAvailRun(int,int,long)>(0, v14, v15);
v16 = new java.util.ArrayDeque;
specialinvoke v16.<java.util.ArrayDeque: void <init>(int)>(8);
v0.<io.netty.buffer.PoolChunk: java.util.Deque cachedNioBuffers> = v16;
return;
}
void <init>(io.netty.buffer.PoolArena, java.lang.Object, java.lang.Object, int)
{
io.netty.buffer.PoolArena v1;
int v4;
io.netty.buffer.PoolChunk v0;
io.netty.util.internal.LongCounter v5;
java.lang.Object v2, v3;
v0 := @this: io.netty.buffer.PoolChunk;
v1 := @parameter0: io.netty.buffer.PoolArena;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.lang.Object;
v4 := @parameter3: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v5 = staticinvoke <io.netty.util.internal.PlatformDependent: io.netty.util.internal.LongCounter newLongCounter()>();
v0.<io.netty.buffer.PoolChunk: io.netty.util.internal.LongCounter pinnedBytes> = v5;
v0.<io.netty.buffer.PoolChunk: boolean unpooled> = 1;
v0.<io.netty.buffer.PoolChunk: io.netty.buffer.PoolArena arena> = v1;
v0.<io.netty.buffer.PoolChunk: java.lang.Object base> = v2;
v0.<io.netty.buffer.PoolChunk: java.lang.Object memory> = v3;
v0.<io.netty.buffer.PoolChunk: int pageSize> = 0;
v0.<io.netty.buffer.PoolChunk: int pageShifts> = 0;
v0.<io.netty.buffer.PoolChunk: io.netty.buffer.LongLongHashMap runsAvailMap> = null;
v0.<io.netty.buffer.PoolChunk: io.netty.buffer.LongPriorityQueue[] runsAvail> = null;
v0.<io.netty.buffer.PoolChunk: java.util.concurrent.locks.ReentrantLock runsAvailLock> = null;
v0.<io.netty.buffer.PoolChunk: io.netty.buffer.PoolSubpage[] subpages> = null;
v0.<io.netty.buffer.PoolChunk: int chunkSize> = v4;
v0.<io.netty.buffer.PoolChunk: java.util.Deque cachedNioBuffers> = null;
return;
}
private static io.netty.buffer.LongPriorityQueue[] newRunsAvailqueueArray(int)
{
io.netty.buffer.LongPriorityQueue[] v1;
int v0, v2, v3;
io.netty.buffer.LongPriorityQueue v4;
v0 := @parameter0: int;
v1 = newarray (io.netty.buffer.LongPriorityQueue)[v0];
v2 = 0;
label1:
v3 = lengthof v1;
if v2 >= v3 goto label2;
v4 = new io.netty.buffer.LongPriorityQueue;
specialinvoke v4.<io.netty.buffer.LongPriorityQueue: void <init>()>();
v1[v2] = v4;
v2 = v2 + 1;
goto label1;
label2:
return v1;
}
private void insertAvailRun(int, int, long)
{
io.netty.buffer.LongPriorityQueue[] v6;
io.netty.buffer.PoolArena v4;
long v3;
int v1, v2, v5, v8;
io.netty.buffer.PoolChunk v0;
io.netty.buffer.LongPriorityQueue v7;
v0 := @this: io.netty.buffer.PoolChunk;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: long;
v4 = v0.<io.netty.buffer.PoolChunk: io.netty.buffer.PoolArena arena>;
v5 = virtualinvoke v4.<io.netty.buffer.PoolArena: int pages2pageIdxFloor(int)>(v2);
v6 = v0.<io.netty.buffer.PoolChunk: io.netty.buffer.LongPriorityQueue[] runsAvail>;
v7 = v6[v5];
virtualinvoke v7.<io.netty.buffer.LongPriorityQueue: void offer(long)>(v3);
specialinvoke v0.<io.netty.buffer.PoolChunk: void insertAvailRun0(int,long)>(v1, v3);
if v2 <= 1 goto label1;
v8 = staticinvoke <io.netty.buffer.PoolChunk: int lastPage(int,int)>(v1, v2);
specialinvoke v0.<io.netty.buffer.PoolChunk: void insertAvailRun0(int,long)>(v8, v3);
label1:
return;
}
private void insertAvailRun0(int, long)
{
long v2, v4;
java.lang.AssertionError v7;
byte v6;
int v1;
io.netty.buffer.PoolChunk v0;
io.netty.buffer.LongLongHashMap v3;
boolean v5;
v0 := @this: io.netty.buffer.PoolChunk;
v1 := @parameter0: int;
v2 := @parameter1: long;
v3 = v0.<io.netty.buffer.PoolChunk: io.netty.buffer.LongLongHashMap runsAvailMap>;
v4 = virtualinvoke v3.<io.netty.buffer.LongLongHashMap: long put(long,long)>(v1, v2);
v5 = <io.netty.buffer.PoolChunk: boolean $assertionsDisabled>;
if v5 != 0 goto label1;
v6 = v4 cmp -1L;
if v6 == 0 goto label1;
v7 = new java.lang.AssertionError;
specialinvoke v7.<java.lang.AssertionError: void <init>()>();
throw v7;
label1:
return;
}
private void removeAvailRun(long)
{
io.netty.buffer.LongPriorityQueue[] v5;
io.netty.buffer.PoolArena v2;
int v3, v4;
io.netty.buffer.PoolChunk v0;
long v1;
io.netty.buffer.LongPriorityQueue v6;
v0 := @this: io.netty.buffer.PoolChunk;
v1 := @parameter0: long;
v2 = v0.<io.netty.buffer.PoolChunk: io.netty.buffer.PoolArena arena>;
v3 = staticinvoke <io.netty.buffer.PoolChunk: int runPages(long)>(v1);
v4 = virtualinvoke v2.<io.netty.buffer.PoolArena: int pages2pageIdxFloor(int)>(v3);
v5 = v0.<io.netty.buffer.PoolChunk: io.netty.buffer.LongPriorityQueue[] runsAvail>;
v6 = v5[v4];
virtualinvoke v6.<io.netty.buffer.LongPriorityQueue: void remove(long)>(v1);
specialinvoke v0.<io.netty.buffer.PoolChunk: void removeAvailRun0(long)>(v1);
return;
}
private void removeAvailRun0(long)
{
int v2, v3, v6;
io.netty.buffer.PoolChunk v0;
long v1;
io.netty.buffer.LongLongHashMap v4, v5;
v0 := @this: io.netty.buffer.PoolChunk;
v1 := @parameter0: long;
v2 = staticinvoke <io.netty.buffer.PoolChunk: int runOffset(long)>(v1);
v3 = staticinvoke <io.netty.buffer.PoolChunk: int runPages(long)>(v1);
v4 = v0.<io.netty.buffer.PoolChunk: io.netty.buffer.LongLongHashMap runsAvailMap>;
virtualinvoke v4.<io.netty.buffer.LongLongHashMap: void remove(long)>(v2);
if v3 <= 1 goto label1;
v5 = v0.<io.netty.buffer.PoolChunk: io.netty.buffer.LongLongHashMap runsAvailMap>;
v6 = staticinvoke <io.netty.buffer.PoolChunk: int lastPage(int,int)>(v2, v3);
virtualinvoke v5.<io.netty.buffer.LongLongHashMap: void remove(long)>(v6);
label1:
return;
}
private static int lastPage(int, int)
{
int v0, v1, v2, v3;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 = v0 + v1;
v3 = v2 - 1;
return v3;
}
private long getAvailRunByOffset(int)
{
int v1;
io.netty.buffer.PoolChunk v0;
long v3;
io.netty.buffer.LongLongHashMap v2;
v0 := @this: io.netty.buffer.PoolChunk;
v1 := @parameter0: int;
v2 = v0.<io.netty.buffer.PoolChunk: io.netty.buffer.LongLongHashMap runsAvailMap>;
v3 = virtualinvoke v2.<io.netty.buffer.LongLongHashMap: long get(long)>(v1);
return v3;
}
public int usage()
{
java.lang.Throwable v5;
java.util.concurrent.locks.ReentrantLock v3, v4, v6;
int v2, v7;
io.netty.buffer.PoolChunk v0;
boolean v1;
v0 := @this: io.netty.buffer.PoolChunk;
v1 = v0.<io.netty.buffer.PoolChunk: boolean unpooled>;
if v1 == 0 goto label1;
v2 = v0.<io.netty.buffer.PoolChunk: int freeBytes>;
goto label5;
label1:
v3 = v0.<io.netty.buffer.PoolChunk: java.util.concurrent.locks.ReentrantLock runsAvailLock>;
virtualinvoke v3.<java.util.concurrent.locks.ReentrantLock: void lock()>();
label2:
v2 = v0.<io.netty.buffer.PoolChunk: int freeBytes>;
label3:
v4 = v0.<io.netty.buffer.PoolChunk: java.util.concurrent.locks.ReentrantLock runsAvailLock>;
virtualinvoke v4.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
goto label5;
label4:
v5 := @caughtexception;
v6 = v0.<io.netty.buffer.PoolChunk: java.util.concurrent.locks.ReentrantLock runsAvailLock>;
virtualinvoke v6.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
throw v5;
label5:
v7 = specialinvoke v0.<io.netty.buffer.PoolChunk: int usage(int)>(v2);
return v7;
catch java.lang.Throwable from label2 to label3 with label4;
}
private int usage(int)
{
int v1, v3, v5;
io.netty.buffer.PoolChunk v0;
long v2, v4;
v0 := @this: io.netty.buffer.PoolChunk;
v1 := @parameter0: int;
if v1 != 0 goto label1;
return 100;
label1:
v2 = v1 * 100L;
v3 = v0.<io.netty.buffer.PoolChunk: int chunkSize>;
v4 = v2 / v3;
if v4 != 0 goto label2;
return 99;
label2:
v5 = 100 - v4;
return v5;
}
boolean allocate(io.netty.buffer.PooledByteBuf, int, int, io.netty.buffer.PoolThreadCache)
{
long v7;
java.lang.AssertionError v11, v17;
java.util.Deque v18, v19;
byte v14, v8;
int v13, v2, v3, v6;
boolean v10, v15, v16, v9;
io.netty.buffer.PoolArena v12, v5;
io.netty.buffer.PooledByteBuf v1;
io.netty.buffer.PoolThreadCache v4;
io.netty.buffer.PoolChunk v0;
java.lang.Object v20;
v0 := @this: io.netty.buffer.PoolChunk;
v1 := @parameter0: io.netty.buffer.PooledByteBuf;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: io.netty.buffer.PoolThreadCache;
v5 = v0.<io.netty.buffer.PoolChunk: io.netty.buffer.PoolArena arena>;
v6 = v5.<io.netty.buffer.PoolArena: int smallMaxSizeIdx>;
if v3 > v6 goto label2;
v7 = specialinvoke v0.<io.netty.buffer.PoolChunk: long allocateSubpage(int)>(v3);
v8 = v7 cmp 0L;
if v8 >= 0 goto label1;
return 0;
label1:
v9 = <io.netty.buffer.PoolChunk: boolean $assertionsDisabled>;
if v9 != 0 goto label4;
v10 = staticinvoke <io.netty.buffer.PoolChunk: boolean isSubpage(long)>(v7);
if v10 != 0 goto label4;
v11 = new java.lang.AssertionError;
specialinvoke v11.<java.lang.AssertionError: void <init>()>();
throw v11;
label2:
v12 = v0.<io.netty.buffer.PoolChunk: io.netty.buffer.PoolArena arena>;
v13 = virtualinvoke v12.<io.netty.buffer.PoolArena: int sizeIdx2size(int)>(v3);
v7 = specialinvoke v0.<io.netty.buffer.PoolChunk: long allocateRun(int)>(v13);
v14 = v7 cmp 0L;
if v14 >= 0 goto label3;
return 0;
label3:
v15 = <io.netty.buffer.PoolChunk: boolean $assertionsDisabled>;
if v15 != 0 goto label4;
v16 = staticinvoke <io.netty.buffer.PoolChunk: boolean isSubpage(long)>(v7);
if v16 == 0 goto label4;
v17 = new java.lang.AssertionError;
specialinvoke v17.<java.lang.AssertionError: void <init>()>();
throw v17;
label4:
v18 = v0.<io.netty.buffer.PoolChunk: java.util.Deque cachedNioBuffers>;
if v18 == null goto label5;
v19 = v0.<io.netty.buffer.PoolChunk: java.util.Deque cachedNioBuffers>;
v20 = interfaceinvoke v19.<java.util.Deque: java.lang.Object pollLast()>();
goto label6;
label5:
v20 = null;
label6:
virtualinvoke v0.<io.netty.buffer.PoolChunk: void initBuf(io.netty.buffer.PooledByteBuf,java.nio.ByteBuffer,long,int,io.netty.buffer.PoolThreadCache)>(v1, v20, v7, v2, v4);
return 1;
}
private long allocateRun(int)
{
java.lang.Throwable v24;
long v12;
java.lang.AssertionError v16;
byte v14, v18;
int v1, v19, v2, v20, v21, v22, v3, v5, v7, v8;
java.lang.String v17;
io.netty.buffer.LongPriorityQueue v11;
boolean v13, v15;
io.netty.buffer.LongPriorityQueue[] v10;
java.util.concurrent.locks.ReentrantLock v23, v25, v6, v9;
io.netty.buffer.PoolArena v4;
io.netty.buffer.PoolChunk v0;
v0 := @this: io.netty.buffer.PoolChunk;
v1 := @parameter0: int;
v2 = v0.<io.netty.buffer.PoolChunk: int pageShifts>;
v3 = v1 >> v2;
v4 = v0.<io.netty.buffer.PoolChunk: io.netty.buffer.PoolArena arena>;
v5 = virtualinvoke v4.<io.netty.buffer.PoolArena: int pages2pageIdx(int)>(v3);
v6 = v0.<io.netty.buffer.PoolChunk: java.util.concurrent.locks.ReentrantLock runsAvailLock>;
virtualinvoke v6.<java.util.concurrent.locks.ReentrantLock: void lock()>();
label1:
v7 = specialinvoke v0.<io.netty.buffer.PoolChunk: int runFirstBestFit(int)>(v5);
v8 = (int) -1;
if v7 != v8 goto label3;
label2:
v9 = v0.<io.netty.buffer.PoolChunk: java.util.concurrent.locks.ReentrantLock runsAvailLock>;
virtualinvoke v9.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
return -1L;
label3:
v10 = v0.<io.netty.buffer.PoolChunk: io.netty.buffer.LongPriorityQueue[] runsAvail>;
v11 = v10[v7];
v12 = virtualinvoke v11.<io.netty.buffer.LongPriorityQueue: long poll()>();
v13 = <io.netty.buffer.PoolChunk: boolean $assertionsDisabled>;
if v13 != 0 goto label5;
v14 = v12 cmp -1L;
if v14 == 0 goto label4;
v15 = staticinvoke <io.netty.buffer.PoolChunk: boolean isUsed(long)>(v12);
if v15 == 0 goto label5;
label4:
v16 = new java.lang.AssertionError;
v17 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long)>(v12) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("invalid handle: \u0001");
specialinvoke v16.<java.lang.AssertionError: void <init>(java.lang.Object)>(v17);
throw v16;
label5:
specialinvoke v0.<io.netty.buffer.PoolChunk: void removeAvailRun0(long)>(v12);
v18 = v12 cmp -1L;
if v18 == 0 goto label6;
v12 = specialinvoke v0.<io.netty.buffer.PoolChunk: long splitLargeRun(long,int)>(v12, v3);
label6:
v19 = v0.<io.netty.buffer.PoolChunk: int pageShifts>;
v20 = staticinvoke <io.netty.buffer.PoolChunk: int runSize(int,long)>(v19, v12);
v21 = v0.<io.netty.buffer.PoolChunk: int freeBytes>;
v22 = v21 - v20;
v0.<io.netty.buffer.PoolChunk: int freeBytes> = v22;
label7:
v23 = v0.<io.netty.buffer.PoolChunk: java.util.concurrent.locks.ReentrantLock runsAvailLock>;
virtualinvoke v23.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
return v12;
label8:
v24 := @caughtexception;
v25 = v0.<io.netty.buffer.PoolChunk: java.util.concurrent.locks.ReentrantLock runsAvailLock>;
virtualinvoke v25.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
throw v24;
catch java.lang.Throwable from label1 to label2 with label8;
catch java.lang.Throwable from label3 to label7 with label8;
}
private int calculateRunSize(int)
{
java.lang.AssertionError v13, v16, v18;
int v1, v10, v11, v15, v2, v3, v4, v5, v7, v8, v9;
boolean v12, v14, v17;
io.netty.buffer.PoolArena v6;
io.netty.buffer.PoolChunk v0;
v0 := @this: io.netty.buffer.PoolChunk;
v1 := @parameter0: int;
v2 = v0.<io.netty.buffer.PoolChunk: int pageShifts>;
v3 = v2 - 4;
v4 = 1 << v3;
v5 = 0;
v6 = v0.<io.netty.buffer.PoolChunk: io.netty.buffer.PoolArena arena>;
v7 = virtualinvoke v6.<io.netty.buffer.PoolArena: int sizeIdx2size(int)>(v1);
label1:
v8 = v0.<io.netty.buffer.PoolChunk: int pageSize>;
v5 = v5 + v8;
v9 = v5 / v7;
if v9 >= v4 goto label2;
v10 = v9 * v7;
if v5 != v10 goto label1;
label2:
if v9 <= v4 goto label3;
v11 = v0.<io.netty.buffer.PoolChunk: int pageSize>;
v5 = v5 - v11;
v9 = v5 / v7;
goto label2;
label3:
v12 = <io.netty.buffer.PoolChunk: boolean $assertionsDisabled>;
if v12 != 0 goto label4;
if v9 > 0 goto label4;
v13 = new java.lang.AssertionError;
specialinvoke v13.<java.lang.AssertionError: void <init>()>();
throw v13;
label4:
v14 = <io.netty.buffer.PoolChunk: boolean $assertionsDisabled>;
if v14 != 0 goto label5;
v15 = v0.<io.netty.buffer.PoolChunk: int chunkSize>;
if v5 <= v15 goto label5;
v16 = new java.lang.AssertionError;
specialinvoke v16.<java.lang.AssertionError: void <init>()>();
throw v16;
label5:
v17 = <io.netty.buffer.PoolChunk: boolean $assertionsDisabled>;
if v17 != 0 goto label6;
if v5 >= v7 goto label6;
v18 = new java.lang.AssertionError;
specialinvoke v18.<java.lang.AssertionError: void <init>()>();
throw v18;
label6:
return v5;
}
private int runFirstBestFit(int)
{
io.netty.buffer.LongPriorityQueue[] v10;
io.netty.buffer.PoolArena v4, v8;
int v1, v13, v2, v3, v5, v6, v7, v9;
io.netty.buffer.PoolChunk v0;
io.netty.buffer.LongPriorityQueue v11;
boolean v12;
v0 := @this: io.netty.buffer.PoolChunk;
v1 := @parameter0: int;
v2 = v0.<io.netty.buffer.PoolChunk: int freeBytes>;
v3 = v0.<io.netty.buffer.PoolChunk: int chunkSize>;
if v2 != v3 goto label1;
v4 = v0.<io.netty.buffer.PoolChunk: io.netty.buffer.PoolArena arena>;
v5 = v4.<io.netty.buffer.PoolArena: int nPSizes>;
v6 = v5 - 1;
return v6;
label1:
v7 = v1;
label2:
v8 = v0.<io.netty.buffer.PoolChunk: io.netty.buffer.PoolArena arena>;
v9 = v8.<io.netty.buffer.PoolArena: int nPSizes>;
if v7 >= v9 goto label4;
v10 = v0.<io.netty.buffer.PoolChunk: io.netty.buffer.LongPriorityQueue[] runsAvail>;
v11 = v10[v7];
if v11 == null goto label3;
v12 = virtualinvoke v11.<io.netty.buffer.LongPriorityQueue: boolean isEmpty()>();
if v12 != 0 goto label3;
return v7;
label3:
v7 = v7 + 1;
goto label2;
label4:
v13 = (int) -1;
return v13;
}
private long splitLargeRun(long, int)
{
long v1, v11, v12, v13;
java.lang.AssertionError v4, v7;
int v10, v2, v5, v8, v9;
io.netty.buffer.PoolChunk v0;
boolean v3, v6;
v0 := @this: io.netty.buffer.PoolChunk;
v1 := @parameter0: long;
v2 := @parameter1: int;
v3 = <io.netty.buffer.PoolChunk: boolean $assertionsDisabled>;
if v3 != 0 goto label1;
if v2 > 0 goto label1;
v4 = new java.lang.AssertionError;
specialinvoke v4.<java.lang.AssertionError: void <init>()>();
throw v4;
label1:
v5 = staticinvoke <io.netty.buffer.PoolChunk: int runPages(long)>(v1);
v6 = <io.netty.buffer.PoolChunk: boolean $assertionsDisabled>;
if v6 != 0 goto label2;
if v2 <= v5 goto label2;
v7 = new java.lang.AssertionError;
specialinvoke v7.<java.lang.AssertionError: void <init>()>();
throw v7;
label2:
v8 = v5 - v2;
if v8 <= 0 goto label3;
v9 = staticinvoke <io.netty.buffer.PoolChunk: int runOffset(long)>(v1);
v10 = v9 + v2;
v11 = staticinvoke <io.netty.buffer.PoolChunk: long toRunHandle(int,int,int)>(v10, v8, 0);
specialinvoke v0.<io.netty.buffer.PoolChunk: void insertAvailRun(int,int,long)>(v10, v8, v11);
v12 = staticinvoke <io.netty.buffer.PoolChunk: long toRunHandle(int,int,int)>(v9, v2, 1);
return v12;
label3:
v13 = v1 | 8589934592L;
return v13;
}
private long allocateSubpage(int)
{
java.lang.Throwable v20;
long v19, v5;
java.lang.AssertionError v11;
io.netty.buffer.PoolSubpage v10, v14, v3;
byte v6;
int v1, v13, v15, v16, v17, v4, v7;
io.netty.buffer.PoolSubpage[] v18, v9;
boolean v8;
io.netty.buffer.PoolArena v12, v2;
io.netty.buffer.PoolChunk v0;
v0 := @this: io.netty.buffer.PoolChunk;
v1 := @parameter0: int;
v2 = v0.<io.netty.buffer.PoolChunk: io.netty.buffer.PoolArena arena>;
v3 = virtualinvoke v2.<io.netty.buffer.PoolArena: io.netty.buffer.PoolSubpage findSubpagePoolHead(int)>(v1);
virtualinvoke v3.<io.netty.buffer.PoolSubpage: void lock()>();
label1:
v4 = specialinvoke v0.<io.netty.buffer.PoolChunk: int calculateRunSize(int)>(v1);
v5 = specialinvoke v0.<io.netty.buffer.PoolChunk: long allocateRun(int)>(v4);
v6 = v5 cmp 0L;
if v6 >= 0 goto label3;
label2:
virtualinvoke v3.<io.netty.buffer.PoolSubpage: void unlock()>();
return -1L;
label3:
v7 = staticinvoke <io.netty.buffer.PoolChunk: int runOffset(long)>(v5);
v8 = <io.netty.buffer.PoolChunk: boolean $assertionsDisabled>;
if v8 != 0 goto label4;
v9 = v0.<io.netty.buffer.PoolChunk: io.netty.buffer.PoolSubpage[] subpages>;
v10 = v9[v7];
if v10 == null goto label4;
v11 = new java.lang.AssertionError;
specialinvoke v11.<java.lang.AssertionError: void <init>()>();
throw v11;
label4:
v12 = v0.<io.netty.buffer.PoolChunk: io.netty.buffer.PoolArena arena>;
v13 = virtualinvoke v12.<io.netty.buffer.PoolArena: int sizeIdx2size(int)>(v1);
v14 = new io.netty.buffer.PoolSubpage;
v15 = v0.<io.netty.buffer.PoolChunk: int pageShifts>;
v16 = v0.<io.netty.buffer.PoolChunk: int pageShifts>;
v17 = staticinvoke <io.netty.buffer.PoolChunk: int runSize(int,long)>(v16, v5);
specialinvoke v14.<io.netty.buffer.PoolSubpage: void <init>(io.netty.buffer.PoolSubpage,io.netty.buffer.PoolChunk,int,int,int,int)>(v3, v0, v15, v7, v17, v13);
v18 = v0.<io.netty.buffer.PoolChunk: io.netty.buffer.PoolSubpage[] subpages>;
v18[v7] = v14;
v19 = virtualinvoke v14.<io.netty.buffer.PoolSubpage: long allocate()>();
label5:
virtualinvoke v3.<io.netty.buffer.PoolSubpage: void unlock()>();
return v19;
label6:
v20 := @caughtexception;
virtualinvoke v3.<io.netty.buffer.PoolSubpage: void unlock()>();
throw v20;
catch java.lang.Throwable from label1 to label2 with label6;
catch java.lang.Throwable from label3 to label5 with label6;
}
void free(long, int, java.nio.ByteBuffer)
{
io.netty.buffer.PoolSubpage v10, v13;
java.nio.ByteBuffer v3;
io.netty.buffer.PoolSubpage[] v12, v22;
boolean v14, v15, v18, v19, v20, v6;
io.netty.buffer.PoolArena v7, v9;
io.netty.buffer.PoolChunk v0;
java.lang.Throwable v23, v33;
long v1, v25, v26, v27;
java.lang.AssertionError v16, v21;
java.util.Deque v35, v36, v39;
int v11, v17, v2, v28, v29, v30, v31, v37, v38, v4, v5, v8;
java.util.concurrent.locks.ReentrantLock v24, v32, v34;
v0 := @this: io.netty.buffer.PoolChunk;
v1 := @parameter0: long;
v2 := @parameter1: int;
v3 := @parameter2: java.nio.ByteBuffer;
v4 = v0.<io.netty.buffer.PoolChunk: int pageShifts>;
v5 = staticinvoke <io.netty.buffer.PoolChunk: int runSize(int,long)>(v4, v1);
v6 = staticinvoke <io.netty.buffer.PoolChunk: boolean isSubpage(long)>(v1);
if v6 == 0 goto label09;
v7 = v0.<io.netty.buffer.PoolChunk: io.netty.buffer.PoolArena arena>;
v8 = virtualinvoke v7.<io.netty.buffer.PoolArena: int size2SizeIdx(int)>(v2);
v9 = v0.<io.netty.buffer.PoolChunk: io.netty.buffer.PoolArena arena>;
v10 = virtualinvoke v9.<io.netty.buffer.PoolArena: io.netty.buffer.PoolSubpage findSubpagePoolHead(int)>(v8);
v11 = staticinvoke <io.netty.buffer.PoolChunk: int runOffset(long)>(v1);
v12 = v0.<io.netty.buffer.PoolChunk: io.netty.buffer.PoolSubpage[] subpages>;
v13 = v12[v11];
virtualinvoke v10.<io.netty.buffer.PoolSubpage: void lock()>();
label01:
v14 = <io.netty.buffer.PoolChunk: boolean $assertionsDisabled>;
if v14 != 0 goto label03;
if v13 == null goto label02;
v15 = v13.<io.netty.buffer.PoolSubpage: boolean doNotDestroy>;
if v15 != 0 goto label03;
label02:
v16 = new java.lang.AssertionError;
specialinvoke v16.<java.lang.AssertionError: void <init>()>();
throw v16;
label03:
v17 = staticinvoke <io.netty.buffer.PoolChunk: int bitmapIdx(long)>(v1);
v18 = virtualinvoke v13.<io.netty.buffer.PoolSubpage: boolean free(io.netty.buffer.PoolSubpage,int)>(v10, v17);
if v18 == 0 goto label05;
label04:
virtualinvoke v10.<io.netty.buffer.PoolSubpage: void unlock()>();
return;
label05:
v19 = <io.netty.buffer.PoolChunk: boolean $assertionsDisabled>;
if v19 != 0 goto label06;
v20 = v13.<io.netty.buffer.PoolSubpage: boolean doNotDestroy>;
if v20 == 0 goto label06;
v21 = new java.lang.AssertionError;
specialinvoke v21.<java.lang.AssertionError: void <init>()>();
throw v21;
label06:
v22 = v0.<io.netty.buffer.PoolChunk: io.netty.buffer.PoolSubpage[] subpages>;
v22[v11] = null;
label07:
virtualinvoke v10.<io.netty.buffer.PoolSubpage: void unlock()>();
goto label09;
label08:
v23 := @caughtexception;
virtualinvoke v10.<io.netty.buffer.PoolSubpage: void unlock()>();
throw v23;
label09:
v24 = v0.<io.netty.buffer.PoolChunk: java.util.concurrent.locks.ReentrantLock runsAvailLock>;
virtualinvoke v24.<java.util.concurrent.locks.ReentrantLock: void lock()>();
label10:
v25 = specialinvoke v0.<io.netty.buffer.PoolChunk: long collapseRuns(long)>(v1);
v26 = v25 & -8589934593L;
v27 = v26 & -4294967297L;
v28 = staticinvoke <io.netty.buffer.PoolChunk: int runOffset(long)>(v27);
v29 = staticinvoke <io.netty.buffer.PoolChunk: int runPages(long)>(v27);
specialinvoke v0.<io.netty.buffer.PoolChunk: void insertAvailRun(int,int,long)>(v28, v29, v27);
v30 = v0.<io.netty.buffer.PoolChunk: int freeBytes>;
v31 = v30 + v5;
v0.<io.netty.buffer.PoolChunk: int freeBytes> = v31;
label11:
v32 = v0.<io.netty.buffer.PoolChunk: java.util.concurrent.locks.ReentrantLock runsAvailLock>;
virtualinvoke v32.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
goto label13;
label12:
v33 := @caughtexception;
v34 = v0.<io.netty.buffer.PoolChunk: java.util.concurrent.locks.ReentrantLock runsAvailLock>;
virtualinvoke v34.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
throw v33;
label13:
if v3 == null goto label14;
v35 = v0.<io.netty.buffer.PoolChunk: java.util.Deque cachedNioBuffers>;
if v35 == null goto label14;
v36 = v0.<io.netty.buffer.PoolChunk: java.util.Deque cachedNioBuffers>;
v37 = interfaceinvoke v36.<java.util.Deque: int size()>();
v38 = <io.netty.buffer.PooledByteBufAllocator: int DEFAULT_MAX_CACHED_BYTEBUFFERS_PER_CHUNK>;
if v37 >= v38 goto label14;
v39 = v0.<io.netty.buffer.PoolChunk: java.util.Deque cachedNioBuffers>;
interfaceinvoke v39.<java.util.Deque: boolean offer(java.lang.Object)>(v3);
label14:
return;
catch java.lang.Throwable from label01 to label04 with label08;
catch java.lang.Throwable from label05 to label07 with label08;
catch java.lang.Throwable from label10 to label11 with label12;
}
private long collapseRuns(long)
{
io.netty.buffer.PoolChunk v0;
long v1, v2, v3;
v0 := @this: io.netty.buffer.PoolChunk;
v1 := @parameter0: long;
v2 = specialinvoke v0.<io.netty.buffer.PoolChunk: long collapsePast(long)>(v1);
v3 = specialinvoke v0.<io.netty.buffer.PoolChunk: long collapseNext(long)>(v2);
return v3;
}
private long collapsePast(long)
{
long v1, v5;
byte v6, v9;
int v10, v11, v2, v3, v4, v7, v8;
io.netty.buffer.PoolChunk v0;
v0 := @this: io.netty.buffer.PoolChunk;
v1 := @parameter0: long;
label1:
v2 = staticinvoke <io.netty.buffer.PoolChunk: int runOffset(long)>(v1);
v3 = staticinvoke <io.netty.buffer.PoolChunk: int runPages(long)>(v1);
v4 = v2 - 1;
v5 = specialinvoke v0.<io.netty.buffer.PoolChunk: long getAvailRunByOffset(int)>(v4);
v6 = v5 cmp -1L;
if v6 != 0 goto label2;
return v1;
label2:
v7 = staticinvoke <io.netty.buffer.PoolChunk: int runOffset(long)>(v5);
v8 = staticinvoke <io.netty.buffer.PoolChunk: int runPages(long)>(v5);
v9 = v5 cmp v1;
if v9 == 0 goto label3;
v10 = v7 + v8;
if v10 != v2 goto label3;
specialinvoke v0.<io.netty.buffer.PoolChunk: void removeAvailRun(long)>(v5);
v11 = v8 + v3;
v1 = staticinvoke <io.netty.buffer.PoolChunk: long toRunHandle(int,int,int)>(v7, v11, 0);
goto label1;
label3:
return v1;
}
private long collapseNext(long)
{
long v1, v5;
byte v6, v9;
int v10, v11, v2, v3, v4, v7, v8;
io.netty.buffer.PoolChunk v0;
v0 := @this: io.netty.buffer.PoolChunk;
v1 := @parameter0: long;
label1:
v2 = staticinvoke <io.netty.buffer.PoolChunk: int runOffset(long)>(v1);
v3 = staticinvoke <io.netty.buffer.PoolChunk: int runPages(long)>(v1);
v4 = v2 + v3;
v5 = specialinvoke v0.<io.netty.buffer.PoolChunk: long getAvailRunByOffset(int)>(v4);
v6 = v5 cmp -1L;
if v6 != 0 goto label2;
return v1;
label2:
v7 = staticinvoke <io.netty.buffer.PoolChunk: int runOffset(long)>(v5);
v8 = staticinvoke <io.netty.buffer.PoolChunk: int runPages(long)>(v5);
v9 = v5 cmp v1;
if v9 == 0 goto label3;
v10 = v2 + v3;
if v10 != v7 goto label3;
specialinvoke v0.<io.netty.buffer.PoolChunk: void removeAvailRun(long)>(v5);
v11 = v3 + v8;
v1 = staticinvoke <io.netty.buffer.PoolChunk: long toRunHandle(int,int,int)>(v2, v11, 0);
goto label1;
label3:
return v1;
}
private static long toRunHandle(int, int, int)
{
long v3, v4, v5, v6, v7;
int v0, v1, v2;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = v0 << 49;
v4 = v1 << 34;
v5 = v3 | v4;
v6 = v2 << 33;
v7 = v5 | v6;
return v7;
}
void initBuf(io.netty.buffer.PooledByteBuf, java.nio.ByteBuffer, long, int, io.netty.buffer.PoolThreadCache)
{
io.netty.buffer.PoolArena v12;
io.netty.buffer.PooledByteBuf v1;
long v3;
io.netty.buffer.PooledByteBufAllocator v13;
java.nio.ByteBuffer v2;
io.netty.buffer.PoolThreadCache v14, v5;
int v10, v11, v4, v7, v8, v9;
io.netty.buffer.PoolChunk v0;
boolean v6;
v0 := @this: io.netty.buffer.PoolChunk;
v1 := @parameter0: io.netty.buffer.PooledByteBuf;
v2 := @parameter1: java.nio.ByteBuffer;
v3 := @parameter2: long;
v4 := @parameter3: int;
v5 := @parameter4: io.netty.buffer.PoolThreadCache;
v6 = staticinvoke <io.netty.buffer.PoolChunk: boolean isSubpage(long)>(v3);
if v6 == 0 goto label1;
virtualinvoke v0.<io.netty.buffer.PoolChunk: void initBufWithSubpage(io.netty.buffer.PooledByteBuf,java.nio.ByteBuffer,long,int,io.netty.buffer.PoolThreadCache)>(v1, v2, v3, v4, v5);
goto label2;
label1:
v7 = v0.<io.netty.buffer.PoolChunk: int pageShifts>;
v8 = staticinvoke <io.netty.buffer.PoolChunk: int runSize(int,long)>(v7, v3);
v9 = staticinvoke <io.netty.buffer.PoolChunk: int runOffset(long)>(v3);
v10 = v0.<io.netty.buffer.PoolChunk: int pageShifts>;
v11 = v9 << v10;
v12 = v0.<io.netty.buffer.PoolChunk: io.netty.buffer.PoolArena arena>;
v13 = v12.<io.netty.buffer.PoolArena: io.netty.buffer.PooledByteBufAllocator parent>;
v14 = virtualinvoke v13.<io.netty.buffer.PooledByteBufAllocator: io.netty.buffer.PoolThreadCache threadCache()>();
virtualinvoke v1.<io.netty.buffer.PooledByteBuf: void init(io.netty.buffer.PoolChunk,java.nio.ByteBuffer,long,int,int,int,io.netty.buffer.PoolThreadCache)>(v0, v2, v3, v11, v4, v8, v14);
label2:
return;
}
void initBufWithSubpage(io.netty.buffer.PooledByteBuf, java.nio.ByteBuffer, long, int, io.netty.buffer.PoolThreadCache)
{
long v3;
java.lang.AssertionError v12, v15;
io.netty.buffer.PoolSubpage v9;
java.nio.ByteBuffer v2;
int v14, v16, v18, v19, v20, v21, v22, v23, v4, v6, v7;
io.netty.buffer.PoolSubpage[] v8;
java.lang.String v17;
boolean v10, v11, v13;
io.netty.buffer.PooledByteBuf v1;
io.netty.buffer.PoolThreadCache v5;
io.netty.buffer.PoolChunk v0;
v0 := @this: io.netty.buffer.PoolChunk;
v1 := @parameter0: io.netty.buffer.PooledByteBuf;
v2 := @parameter1: java.nio.ByteBuffer;
v3 := @parameter2: long;
v4 := @parameter3: int;
v5 := @parameter4: io.netty.buffer.PoolThreadCache;
v6 = staticinvoke <io.netty.buffer.PoolChunk: int runOffset(long)>(v3);
v7 = staticinvoke <io.netty.buffer.PoolChunk: int bitmapIdx(long)>(v3);
v8 = v0.<io.netty.buffer.PoolChunk: io.netty.buffer.PoolSubpage[] subpages>;
v9 = v8[v6];
v10 = <io.netty.buffer.PoolChunk: boolean $assertionsDisabled>;
if v10 != 0 goto label1;
v11 = v9.<io.netty.buffer.PoolSubpage: boolean doNotDestroy>;
if v11 != 0 goto label1;
v12 = new java.lang.AssertionError;
specialinvoke v12.<java.lang.AssertionError: void <init>()>();
throw v12;
label1:
v13 = <io.netty.buffer.PoolChunk: boolean $assertionsDisabled>;
if v13 != 0 goto label2;
v14 = v9.<io.netty.buffer.PoolSubpage: int elemSize>;
if v4 <= v14 goto label2;
v15 = new java.lang.AssertionError;
v16 = v9.<io.netty.buffer.PoolSubpage: int elemSize>;
v17 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v4, v16) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001<=\u0001");
specialinvoke v15.<java.lang.AssertionError: void <init>(java.lang.Object)>(v17);
throw v15;
label2:
v18 = v0.<io.netty.buffer.PoolChunk: int pageShifts>;
v19 = v6 << v18;
v20 = v9.<io.netty.buffer.PoolSubpage: int elemSize>;
v21 = v7 * v20;
v22 = v19 + v21;
v23 = v9.<io.netty.buffer.PoolSubpage: int elemSize>;
virtualinvoke v1.<io.netty.buffer.PooledByteBuf: void init(io.netty.buffer.PoolChunk,java.nio.ByteBuffer,long,int,int,int,io.netty.buffer.PoolThreadCache)>(v0, v2, v3, v22, v4, v23, v5);
return;
}
void incrementPinnedMemory(int)
{
int v1;
io.netty.buffer.PoolChunk v0;
io.netty.util.internal.LongCounter v4;
java.lang.AssertionError v3;
boolean v2;
v0 := @this: io.netty.buffer.PoolChunk;
v1 := @parameter0: int;
v2 = <io.netty.buffer.PoolChunk: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
if v1 > 0 goto label1;
v3 = new java.lang.AssertionError;
specialinvoke v3.<java.lang.AssertionError: void <init>()>();
throw v3;
label1:
v4 = v0.<io.netty.buffer.PoolChunk: io.netty.util.internal.LongCounter pinnedBytes>;
interfaceinvoke v4.<io.netty.util.internal.LongCounter: void add(long)>(v1);
return;
}
void decrementPinnedMemory(int)
{
int v1, v5;
io.netty.buffer.PoolChunk v0;
io.netty.util.internal.LongCounter v4;
java.lang.AssertionError v3;
boolean v2;
v0 := @this: io.netty.buffer.PoolChunk;
v1 := @parameter0: int;
v2 = <io.netty.buffer.PoolChunk: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
if v1 > 0 goto label1;
v3 = new java.lang.AssertionError;
specialinvoke v3.<java.lang.AssertionError: void <init>()>();
throw v3;
label1:
v4 = v0.<io.netty.buffer.PoolChunk: io.netty.util.internal.LongCounter pinnedBytes>;
v5 = neg v1;
interfaceinvoke v4.<io.netty.util.internal.LongCounter: void add(long)>(v5);
return;
}
public int chunkSize()
{
int v1;
io.netty.buffer.PoolChunk v0;
v0 := @this: io.netty.buffer.PoolChunk;
v1 = v0.<io.netty.buffer.PoolChunk: int chunkSize>;
return v1;
}
public int freeBytes()
{
java.lang.Throwable v6;
java.util.concurrent.locks.ReentrantLock v3, v5, v7;
int v2, v4;
io.netty.buffer.PoolChunk v0;
boolean v1;
v0 := @this: io.netty.buffer.PoolChunk;
v1 = v0.<io.netty.buffer.PoolChunk: boolean unpooled>;
if v1 == 0 goto label1;
v2 = v0.<io.netty.buffer.PoolChunk: int freeBytes>;
return v2;
label1:
v3 = v0.<io.netty.buffer.PoolChunk: java.util.concurrent.locks.ReentrantLock runsAvailLock>;
virtualinvoke v3.<java.util.concurrent.locks.ReentrantLock: void lock()>();
label2:
v4 = v0.<io.netty.buffer.PoolChunk: int freeBytes>;
label3:
v5 = v0.<io.netty.buffer.PoolChunk: java.util.concurrent.locks.ReentrantLock runsAvailLock>;
virtualinvoke v5.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
return v4;
label4:
v6 := @caughtexception;
v7 = v0.<io.netty.buffer.PoolChunk: java.util.concurrent.locks.ReentrantLock runsAvailLock>;
virtualinvoke v7.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
throw v6;
catch java.lang.Throwable from label2 to label3 with label4;
}
public int pinnedBytes()
{
io.netty.buffer.PoolChunk v0;
io.netty.util.internal.LongCounter v1;
long v2;
v0 := @this: io.netty.buffer.PoolChunk;
v1 = v0.<io.netty.buffer.PoolChunk: io.netty.util.internal.LongCounter pinnedBytes>;
v2 = interfaceinvoke v1.<io.netty.util.internal.LongCounter: long value()>();
return v2;
}
public java.lang.String toString()
{
java.lang.Throwable v5;
java.util.concurrent.locks.ReentrantLock v3, v4, v6;
int v10, v11, v12, v2, v7, v9;
io.netty.buffer.PoolChunk v0;
java.lang.String v13, v8;
boolean v1;
v0 := @this: io.netty.buffer.PoolChunk;
v1 = v0.<io.netty.buffer.PoolChunk: boolean unpooled>;
if v1 == 0 goto label1;
v2 = v0.<io.netty.buffer.PoolChunk: int freeBytes>;
goto label5;
label1:
v3 = v0.<io.netty.buffer.PoolChunk: java.util.concurrent.locks.ReentrantLock runsAvailLock>;
virtualinvoke v3.<java.util.concurrent.locks.ReentrantLock: void lock()>();
label2:
v2 = v0.<io.netty.buffer.PoolChunk: int freeBytes>;
label3:
v4 = v0.<io.netty.buffer.PoolChunk: java.util.concurrent.locks.ReentrantLock runsAvailLock>;
virtualinvoke v4.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
goto label5;
label4:
v5 := @caughtexception;
v6 = v0.<io.netty.buffer.PoolChunk: java.util.concurrent.locks.ReentrantLock runsAvailLock>;
virtualinvoke v6.<java.util.concurrent.locks.ReentrantLock: void unlock()>();
throw v5;
label5:
v7 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(v0);
v8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v7);
v9 = specialinvoke v0.<io.netty.buffer.PoolChunk: int usage(int)>(v2);
v10 = v0.<io.netty.buffer.PoolChunk: int chunkSize>;
v11 = v10 - v2;
v12 = v0.<io.netty.buffer.PoolChunk: int chunkSize>;
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int,int,int)>(v8, v9, v11, v12) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Chunk(\u0001: \u0001%, \u0001/\u0001)");
return v13;
catch java.lang.Throwable from label2 to label3 with label4;
}
void destroy()
{
io.netty.buffer.PoolChunk v0;
io.netty.buffer.PoolArena v1;
v0 := @this: io.netty.buffer.PoolChunk;
v1 = v0.<io.netty.buffer.PoolChunk: io.netty.buffer.PoolArena arena>;
virtualinvoke v1.<io.netty.buffer.PoolArena: void destroyChunk(io.netty.buffer.PoolChunk)>(v0);
return;
}
static int runOffset(long)
{
long v0, v1;
v0 := @parameter0: long;
v1 = v0 >> 49;
return v1;
}
static int runSize(int, long)
{
int v0, v2, v3;
long v1;
v0 := @parameter0: int;
v1 := @parameter1: long;
v2 = staticinvoke <io.netty.buffer.PoolChunk: int runPages(long)>(v1);
v3 = v2 << v0;
return v3;
}
static int runPages(long)
{
long v0, v1, v2;
v0 := @parameter0: long;
v1 = v0 >> 34;
v2 = v1 & 32767L;
return v2;
}
static boolean isUsed(long)
{
byte v3;
long v0, v1, v2;
boolean v4;
v0 := @parameter0: long;
v1 = v0 >> 33;
v2 = v1 & 1L;
v3 = v2 cmp 1L;
if v3 != 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
static boolean isRun(long)
{
long v0;
boolean v1, v2;
v0 := @parameter0: long;
v1 = staticinvoke <io.netty.buffer.PoolChunk: boolean isSubpage(long)>(v0);
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
static boolean isSubpage(long)
{
byte v3;
long v0, v1, v2;
boolean v4;
v0 := @parameter0: long;
v1 = v0 >> 32;
v2 = v1 & 1L;
v3 = v2 cmp 1L;
if v3 != 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
static int bitmapIdx(long)
{
long v0;
v0 := @parameter0: long;
return v0;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/buffer/PoolChunk;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.buffer.PoolChunk: boolean $assertionsDisabled> = v2;
return;
}
}