abstract class io.netty.buffer.PoolThreadCache$MemoryRegionCache extends java.lang.Object
{
private final int size;
private final java.util.Queue queue;
private final io.netty.buffer.PoolArena$SizeClass sizeClass;
private int allocations;
private static final io.netty.util.internal.ObjectPool RECYCLER;
void <init>(int, io.netty.buffer.PoolArena$SizeClass)
{
int v1, v3, v4;
io.netty.buffer.PoolThreadCache$MemoryRegionCache v0;
java.util.Queue v5;
io.netty.buffer.PoolArena$SizeClass v2;
v0 := @this: io.netty.buffer.PoolThreadCache$MemoryRegionCache;
v1 := @parameter0: int;
v2 := @parameter1: io.netty.buffer.PoolArena$SizeClass;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = staticinvoke <io.netty.util.internal.MathUtil: int safeFindNextPositivePowerOfTwo(int)>(v1);
v0.<io.netty.buffer.PoolThreadCache$MemoryRegionCache: int size> = v3;
v4 = v0.<io.netty.buffer.PoolThreadCache$MemoryRegionCache: int size>;
v5 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.Queue newFixedMpscQueue(int)>(v4);
v0.<io.netty.buffer.PoolThreadCache$MemoryRegionCache: java.util.Queue queue> = v5;
v0.<io.netty.buffer.PoolThreadCache$MemoryRegionCache: io.netty.buffer.PoolArena$SizeClass sizeClass> = v2;
return;
}
protected abstract void initBuf(io.netty.buffer.PoolChunk, java.nio.ByteBuffer, long, io.netty.buffer.PooledByteBuf, int, io.netty.buffer.PoolThreadCache);
public final boolean add(io.netty.buffer.PoolChunk, java.nio.ByteBuffer, long, int)
{
io.netty.buffer.PoolThreadCache$MemoryRegionCache v0;
long v3;
java.nio.ByteBuffer v2;
int v4;
io.netty.buffer.PoolChunk v1;
io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry v5;
java.util.Queue v6;
boolean v7;
v0 := @this: io.netty.buffer.PoolThreadCache$MemoryRegionCache;
v1 := @parameter0: io.netty.buffer.PoolChunk;
v2 := @parameter1: java.nio.ByteBuffer;
v3 := @parameter2: long;
v4 := @parameter3: int;
v5 = staticinvoke <io.netty.buffer.PoolThreadCache$MemoryRegionCache: io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry newEntry(io.netty.buffer.PoolChunk,java.nio.ByteBuffer,long,int)>(v1, v2, v3, v4);
v6 = v0.<io.netty.buffer.PoolThreadCache$MemoryRegionCache: java.util.Queue queue>;
v7 = interfaceinvoke v6.<java.util.Queue: boolean offer(java.lang.Object)>(v5);
if v7 != 0 goto label1;
virtualinvoke v5.<io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry: void unguardedRecycle()>();
label1:
return v7;
}
public final boolean allocate(io.netty.buffer.PooledByteBuf, int, io.netty.buffer.PoolThreadCache)
{
io.netty.buffer.PoolThreadCache$MemoryRegionCache v0;
io.netty.buffer.PooledByteBuf v1;
long v8;
java.nio.ByteBuffer v7;
io.netty.buffer.PoolThreadCache v3;
int v10, v2, v9;
io.netty.buffer.PoolChunk v6;
java.lang.Object v5;
java.util.Queue v4;
v0 := @this: io.netty.buffer.PoolThreadCache$MemoryRegionCache;
v1 := @parameter0: io.netty.buffer.PooledByteBuf;
v2 := @parameter1: int;
v3 := @parameter2: io.netty.buffer.PoolThreadCache;
v4 = v0.<io.netty.buffer.PoolThreadCache$MemoryRegionCache: java.util.Queue queue>;
v5 = interfaceinvoke v4.<java.util.Queue: java.lang.Object poll()>();
if v5 != null goto label1;
return 0;
label1:
v6 = v5.<io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry: io.netty.buffer.PoolChunk chunk>;
v7 = v5.<io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry: java.nio.ByteBuffer nioBuffer>;
v8 = v5.<io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry: long handle>;
virtualinvoke v0.<io.netty.buffer.PoolThreadCache$MemoryRegionCache: void initBuf(io.netty.buffer.PoolChunk,java.nio.ByteBuffer,long,io.netty.buffer.PooledByteBuf,int,io.netty.buffer.PoolThreadCache)>(v6, v7, v8, v1, v2, v3);
virtualinvoke v5.<io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry: void unguardedRecycle()>();
v9 = v0.<io.netty.buffer.PoolThreadCache$MemoryRegionCache: int allocations>;
v10 = v9 + 1;
v0.<io.netty.buffer.PoolThreadCache$MemoryRegionCache: int allocations> = v10;
return 1;
}
public final int free(boolean)
{
int v2;
io.netty.buffer.PoolThreadCache$MemoryRegionCache v0;
boolean v1;
v0 := @this: io.netty.buffer.PoolThreadCache$MemoryRegionCache;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.netty.buffer.PoolThreadCache$MemoryRegionCache: int free(int,boolean)>(2147483647, v1);
return v2;
}
private int free(int, boolean)
{
int v1, v3;
io.netty.buffer.PoolThreadCache$MemoryRegionCache v0;
java.lang.Object v5;
java.util.Queue v4;
boolean v2;
v0 := @this: io.netty.buffer.PoolThreadCache$MemoryRegionCache;
v1 := @parameter0: int;
v2 := @parameter1: boolean;
v3 = 0;
label1:
if v3 >= v1 goto label4;
v4 = v0.<io.netty.buffer.PoolThreadCache$MemoryRegionCache: java.util.Queue queue>;
v5 = interfaceinvoke v4.<java.util.Queue: java.lang.Object poll()>();
if v5 == null goto label2;
specialinvoke v0.<io.netty.buffer.PoolThreadCache$MemoryRegionCache: void freeEntry(io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry,boolean)>(v5, v2);
goto label3;
label2:
return v3;
label3:
v3 = v3 + 1;
goto label1;
label4:
return v3;
}
public final void trim()
{
int v1, v2, v3;
io.netty.buffer.PoolThreadCache$MemoryRegionCache v0;
v0 := @this: io.netty.buffer.PoolThreadCache$MemoryRegionCache;
v1 = v0.<io.netty.buffer.PoolThreadCache$MemoryRegionCache: int size>;
v2 = v0.<io.netty.buffer.PoolThreadCache$MemoryRegionCache: int allocations>;
v3 = v1 - v2;
v0.<io.netty.buffer.PoolThreadCache$MemoryRegionCache: int allocations> = 0;
if v3 <= 0 goto label1;
specialinvoke v0.<io.netty.buffer.PoolThreadCache$MemoryRegionCache: int free(int,boolean)>(v3, 0);
label1:
return;
}
private void freeEntry(io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry, boolean)
{
io.netty.buffer.PoolArena v7;
io.netty.buffer.PoolThreadCache$MemoryRegionCache v0;
long v4;
java.nio.ByteBuffer v5;
int v6;
io.netty.buffer.PoolChunk v3;
io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry v1;
io.netty.buffer.PoolArena$SizeClass v8;
boolean v2;
v0 := @this: io.netty.buffer.PoolThreadCache$MemoryRegionCache;
v1 := @parameter0: io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry;
v2 := @parameter1: boolean;
v3 = v1.<io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry: io.netty.buffer.PoolChunk chunk>;
v4 = v1.<io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry: long handle>;
v5 = v1.<io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry: java.nio.ByteBuffer nioBuffer>;
v6 = v1.<io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry: int normCapacity>;
if v2 != 0 goto label1;
virtualinvoke v1.<io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry: void recycle()>();
label1:
v7 = v3.<io.netty.buffer.PoolChunk: io.netty.buffer.PoolArena arena>;
v8 = v0.<io.netty.buffer.PoolThreadCache$MemoryRegionCache: io.netty.buffer.PoolArena$SizeClass sizeClass>;
virtualinvoke v7.<io.netty.buffer.PoolArena: void freeChunk(io.netty.buffer.PoolChunk,long,int,io.netty.buffer.PoolArena$SizeClass,java.nio.ByteBuffer,boolean)>(v3, v4, v6, v8, v5, v2);
return;
}
private static io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry newEntry(io.netty.buffer.PoolChunk, java.nio.ByteBuffer, long, int)
{
int v3;
io.netty.buffer.PoolChunk v0;
java.lang.Object v5;
long v2;
io.netty.util.internal.ObjectPool v4;
java.nio.ByteBuffer v1;
v0 := @parameter0: io.netty.buffer.PoolChunk;
v1 := @parameter1: java.nio.ByteBuffer;
v2 := @parameter2: long;
v3 := @parameter3: int;
v4 = <io.netty.buffer.PoolThreadCache$MemoryRegionCache: io.netty.util.internal.ObjectPool RECYCLER>;
v5 = virtualinvoke v4.<io.netty.util.internal.ObjectPool: java.lang.Object get()>();
v5.<io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry: io.netty.buffer.PoolChunk chunk> = v0;
v5.<io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry: java.nio.ByteBuffer nioBuffer> = v1;
v5.<io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry: long handle> = v2;
v5.<io.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry: int normCapacity> = v3;
return v5;
}
static void <clinit>()
{
io.netty.util.internal.ObjectPool v1;
io.netty.buffer.PoolThreadCache$MemoryRegionCache$1 v0;
v0 = new io.netty.buffer.PoolThreadCache$MemoryRegionCache$1;
specialinvoke v0.<io.netty.buffer.PoolThreadCache$MemoryRegionCache$1: void <init>()>();
v1 = staticinvoke <io.netty.util.internal.ObjectPool: io.netty.util.internal.ObjectPool newPool(io.netty.util.internal.ObjectPool$ObjectCreator)>(v0);
<io.netty.buffer.PoolThreadCache$MemoryRegionCache: io.netty.util.internal.ObjectPool RECYCLER> = v1;
return;
}
}