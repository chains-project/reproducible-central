public class io.netty.buffer.UnpooledDirectByteBuf extends io.netty.buffer.AbstractReferenceCountedByteBuf
{
private final io.netty.buffer.ByteBufAllocator alloc;
java.nio.ByteBuffer buffer;
private java.nio.ByteBuffer tmpNioBuf;
private int capacity;
private boolean doNotFree;
public void <init>(io.netty.buffer.ByteBufAllocator, int, int)
{
java.lang.Object[] v5;
io.netty.buffer.ByteBufAllocator v1;
java.lang.IllegalArgumentException v4;
java.lang.Integer v6, v7;
java.nio.ByteBuffer v9;
int v2, v3;
io.netty.buffer.UnpooledDirectByteBuf v0;
java.lang.String v8;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: io.netty.buffer.ByteBufAllocator;
v2 := @parameter1: int;
v3 := @parameter2: int;
specialinvoke v0.<io.netty.buffer.AbstractReferenceCountedByteBuf: void <init>(int)>(v3);
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "alloc");
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositiveOrZero(int,java.lang.String)>(v2, "initialCapacity");
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositiveOrZero(int,java.lang.String)>(v3, "maxCapacity");
if v2 <= v3 goto label1;
v4 = new java.lang.IllegalArgumentException;
v5 = newarray (java.lang.Object)[2];
v6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v2);
v5[0] = v6;
v7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v3);
v5[1] = v7;
v8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("initialCapacity(%d) > maxCapacity(%d)", v5);
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v8);
throw v4;
label1:
v0.<io.netty.buffer.UnpooledDirectByteBuf: io.netty.buffer.ByteBufAllocator alloc> = v1;
v9 = virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer allocateDirect(int)>(v2);
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void setByteBuffer(java.nio.ByteBuffer,boolean)>(v9, 0);
return;
}
protected void <init>(io.netty.buffer.ByteBufAllocator, java.nio.ByteBuffer, int)
{
io.netty.buffer.ByteBufAllocator v1;
int v3;
io.netty.buffer.UnpooledDirectByteBuf v0;
java.nio.ByteBuffer v2;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: io.netty.buffer.ByteBufAllocator;
v2 := @parameter1: java.nio.ByteBuffer;
v3 := @parameter2: int;
specialinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void <init>(io.netty.buffer.ByteBufAllocator,java.nio.ByteBuffer,int,boolean,boolean)>(v1, v2, v3, 0, 1);
return;
}
void <init>(io.netty.buffer.ByteBufAllocator, java.nio.ByteBuffer, int, boolean, boolean)
{
java.lang.Object[] v12;
io.netty.buffer.ByteBufAllocator v1;
java.lang.Integer v13, v14;
java.nio.ByteBuffer v17, v19, v2;
int v10, v3;
java.lang.String v15;
boolean v16, v4, v5, v6, v8;
java.lang.IllegalArgumentException v11, v7, v9;
java.nio.ByteOrder v18;
io.netty.buffer.UnpooledDirectByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: io.netty.buffer.ByteBufAllocator;
v2 := @parameter1: java.nio.ByteBuffer;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 := @parameter4: boolean;
specialinvoke v0.<io.netty.buffer.AbstractReferenceCountedByteBuf: void <init>(int)>(v3);
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "alloc");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "initialBuffer");
v6 = virtualinvoke v2.<java.nio.ByteBuffer: boolean isDirect()>();
if v6 != 0 goto label1;
v7 = new java.lang.IllegalArgumentException;
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("initialBuffer is not a direct buffer.");
throw v7;
label1:
v8 = virtualinvoke v2.<java.nio.ByteBuffer: boolean isReadOnly()>();
if v8 == 0 goto label2;
v9 = new java.lang.IllegalArgumentException;
specialinvoke v9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("initialBuffer is a read-only buffer.");
throw v9;
label2:
v10 = virtualinvoke v2.<java.nio.ByteBuffer: int remaining()>();
if v10 <= v3 goto label3;
v11 = new java.lang.IllegalArgumentException;
v12 = newarray (java.lang.Object)[2];
v13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v10);
v12[0] = v13;
v14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v3);
v12[1] = v14;
v15 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("initialCapacity(%d) > maxCapacity(%d)", v12);
specialinvoke v11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v15);
throw v11;
label3:
v0.<io.netty.buffer.UnpooledDirectByteBuf: io.netty.buffer.ByteBufAllocator alloc> = v1;
if v4 != 0 goto label4;
v16 = 1;
goto label5;
label4:
v16 = 0;
label5:
v0.<io.netty.buffer.UnpooledDirectByteBuf: boolean doNotFree> = v16;
if v5 == 0 goto label6;
v17 = virtualinvoke v2.<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>();
goto label7;
label6:
v17 = v2;
label7:
v18 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;
v19 = virtualinvoke v17.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>(v18);
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void setByteBuffer(java.nio.ByteBuffer,boolean)>(v19, 0);
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: io.netty.buffer.ByteBuf writerIndex(int)>(v10);
return;
}
protected java.nio.ByteBuffer allocateDirect(int)
{
int v1;
io.netty.buffer.UnpooledDirectByteBuf v0;
java.nio.ByteBuffer v2;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(v1);
return v2;
}
protected void freeDirect(java.nio.ByteBuffer)
{
io.netty.buffer.UnpooledDirectByteBuf v0;
java.nio.ByteBuffer v1;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: java.nio.ByteBuffer;
staticinvoke <io.netty.util.internal.PlatformDependent: void freeDirectBuffer(java.nio.ByteBuffer)>(v1);
return;
}
void setByteBuffer(java.nio.ByteBuffer, boolean)
{
int v5;
io.netty.buffer.UnpooledDirectByteBuf v0;
java.nio.ByteBuffer v1, v3;
boolean v2, v4;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: java.nio.ByteBuffer;
v2 := @parameter1: boolean;
if v2 == 0 goto label2;
v3 = v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer buffer>;
if v3 == null goto label2;
v4 = v0.<io.netty.buffer.UnpooledDirectByteBuf: boolean doNotFree>;
if v4 == 0 goto label1;
v0.<io.netty.buffer.UnpooledDirectByteBuf: boolean doNotFree> = 0;
goto label2;
label1:
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void freeDirect(java.nio.ByteBuffer)>(v3);
label2:
v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer buffer> = v1;
v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer tmpNioBuf> = null;
v5 = virtualinvoke v1.<java.nio.ByteBuffer: int remaining()>();
v0.<io.netty.buffer.UnpooledDirectByteBuf: int capacity> = v5;
return;
}
public boolean isDirect()
{
io.netty.buffer.UnpooledDirectByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
return 1;
}
public int capacity()
{
int v1;
io.netty.buffer.UnpooledDirectByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 = v0.<io.netty.buffer.UnpooledDirectByteBuf: int capacity>;
return v1;
}
public io.netty.buffer.ByteBuf capacity(int)
{
java.nio.ByteBuffer v4, v5, v6, v7, v8;
int v1, v2, v3;
io.netty.buffer.UnpooledDirectByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void checkNewCapacity(int)>(v1);
v2 = v0.<io.netty.buffer.UnpooledDirectByteBuf: int capacity>;
if v1 != v2 goto label1;
return v0;
label1:
if v1 <= v2 goto label2;
v3 = v2;
goto label3;
label2:
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void trimIndicesToCapacity(int)>(v1);
v3 = v1;
label3:
v4 = v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer buffer>;
v5 = virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer allocateDirect(int)>(v1);
v6 = virtualinvoke v4.<java.nio.ByteBuffer: java.nio.ByteBuffer position(int)>(0);
virtualinvoke v6.<java.nio.ByteBuffer: java.nio.ByteBuffer limit(int)>(v3);
v7 = virtualinvoke v5.<java.nio.ByteBuffer: java.nio.ByteBuffer position(int)>(0);
virtualinvoke v7.<java.nio.ByteBuffer: java.nio.ByteBuffer limit(int)>(v3);
v8 = virtualinvoke v5.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>(v4);
virtualinvoke v8.<java.nio.ByteBuffer: java.nio.ByteBuffer clear()>();
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void setByteBuffer(java.nio.ByteBuffer,boolean)>(v5, 1);
return v0;
}
public io.netty.buffer.ByteBufAllocator alloc()
{
io.netty.buffer.UnpooledDirectByteBuf v0;
io.netty.buffer.ByteBufAllocator v1;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 = v0.<io.netty.buffer.UnpooledDirectByteBuf: io.netty.buffer.ByteBufAllocator alloc>;
return v1;
}
public java.nio.ByteOrder order()
{
io.netty.buffer.UnpooledDirectByteBuf v0;
java.nio.ByteOrder v1;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;
return v1;
}
public boolean hasArray()
{
io.netty.buffer.UnpooledDirectByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
return 0;
}
public byte[] array()
{
io.netty.buffer.UnpooledDirectByteBuf v0;
java.lang.UnsupportedOperationException v1;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("direct buffer");
throw v1;
}
public int arrayOffset()
{
io.netty.buffer.UnpooledDirectByteBuf v0;
java.lang.UnsupportedOperationException v1;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("direct buffer");
throw v1;
}
public boolean hasMemoryAddress()
{
io.netty.buffer.UnpooledDirectByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
return 0;
}
public long memoryAddress()
{
io.netty.buffer.UnpooledDirectByteBuf v0;
java.lang.UnsupportedOperationException v1;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>()>();
throw v1;
}
public byte getByte(int)
{
int v1;
io.netty.buffer.UnpooledDirectByteBuf v0;
byte v2;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void ensureAccessible()>();
v2 = virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: byte _getByte(int)>(v1);
return v2;
}
protected byte _getByte(int)
{
byte v3;
int v1;
io.netty.buffer.UnpooledDirectByteBuf v0;
java.nio.ByteBuffer v2;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 = v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer buffer>;
v3 = virtualinvoke v2.<java.nio.ByteBuffer: byte get(int)>(v1);
return v3;
}
public short getShort(int)
{
int v1;
io.netty.buffer.UnpooledDirectByteBuf v0;
short v2;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void ensureAccessible()>();
v2 = virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: short _getShort(int)>(v1);
return v2;
}
protected short _getShort(int)
{
short v3;
int v1;
io.netty.buffer.UnpooledDirectByteBuf v0;
java.nio.ByteBuffer v2;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 = v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer buffer>;
v3 = virtualinvoke v2.<java.nio.ByteBuffer: short getShort(int)>(v1);
return v3;
}
protected short _getShortLE(int)
{
short v3, v4;
int v1;
io.netty.buffer.UnpooledDirectByteBuf v0;
java.nio.ByteBuffer v2;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 = v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer buffer>;
v3 = virtualinvoke v2.<java.nio.ByteBuffer: short getShort(int)>(v1);
v4 = staticinvoke <io.netty.buffer.ByteBufUtil: short swapShort(short)>(v3);
return v4;
}
public int getUnsignedMedium(int)
{
int v1, v2;
io.netty.buffer.UnpooledDirectByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void ensureAccessible()>();
v2 = virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: int _getUnsignedMedium(int)>(v1);
return v2;
}
protected int _getUnsignedMedium(int)
{
short v12, v3, v7;
byte v11, v2, v6;
int v1, v10, v13, v4, v5, v8, v9;
io.netty.buffer.UnpooledDirectByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: byte getByte(int)>(v1);
v3 = v2 & 255;
v4 = v3 << 16;
v5 = v1 + 1;
v6 = virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: byte getByte(int)>(v5);
v7 = v6 & 255;
v8 = v7 << 8;
v9 = v4 | v8;
v10 = v1 + 2;
v11 = virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: byte getByte(int)>(v10);
v12 = v11 & 255;
v13 = v9 | v12;
return v13;
}
protected int _getUnsignedMediumLE(int)
{
short v11, v3, v6;
byte v10, v2, v5;
int v1, v12, v13, v4, v7, v8, v9;
io.netty.buffer.UnpooledDirectByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: byte getByte(int)>(v1);
v3 = v2 & 255;
v4 = v1 + 1;
v5 = virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: byte getByte(int)>(v4);
v6 = v5 & 255;
v7 = v6 << 8;
v8 = v3 | v7;
v9 = v1 + 2;
v10 = virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: byte getByte(int)>(v9);
v11 = v10 & 255;
v12 = v11 << 16;
v13 = v8 | v12;
return v13;
}
public int getInt(int)
{
int v1, v2;
io.netty.buffer.UnpooledDirectByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void ensureAccessible()>();
v2 = virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: int _getInt(int)>(v1);
return v2;
}
protected int _getInt(int)
{
int v1, v3;
io.netty.buffer.UnpooledDirectByteBuf v0;
java.nio.ByteBuffer v2;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 = v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer buffer>;
v3 = virtualinvoke v2.<java.nio.ByteBuffer: int getInt(int)>(v1);
return v3;
}
protected int _getIntLE(int)
{
int v1, v3, v4;
io.netty.buffer.UnpooledDirectByteBuf v0;
java.nio.ByteBuffer v2;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 = v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer buffer>;
v3 = virtualinvoke v2.<java.nio.ByteBuffer: int getInt(int)>(v1);
v4 = staticinvoke <io.netty.buffer.ByteBufUtil: int swapInt(int)>(v3);
return v4;
}
public long getLong(int)
{
int v1;
io.netty.buffer.UnpooledDirectByteBuf v0;
long v2;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void ensureAccessible()>();
v2 = virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: long _getLong(int)>(v1);
return v2;
}
protected long _getLong(int)
{
int v1;
io.netty.buffer.UnpooledDirectByteBuf v0;
long v3;
java.nio.ByteBuffer v2;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 = v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer buffer>;
v3 = virtualinvoke v2.<java.nio.ByteBuffer: long getLong(int)>(v1);
return v3;
}
protected long _getLongLE(int)
{
int v1;
io.netty.buffer.UnpooledDirectByteBuf v0;
long v3, v4;
java.nio.ByteBuffer v2;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 = v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer buffer>;
v3 = virtualinvoke v2.<java.nio.ByteBuffer: long getLong(int)>(v1);
v4 = staticinvoke <io.netty.buffer.ByteBufUtil: long swapLong(long)>(v3);
return v4;
}
public io.netty.buffer.ByteBuf getBytes(int, io.netty.buffer.ByteBuf, int, int)
{
byte[] v7;
java.nio.ByteBuffer v14;
io.netty.buffer.ByteBuf v2;
int v1, v10, v12, v13, v15, v3, v4, v5, v8, v9;
boolean v6;
java.nio.ByteBuffer[] v11;
io.netty.buffer.UnpooledDirectByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int capacity()>();
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void checkDstIndex(int,int,int,int)>(v1, v4, v3, v5);
v6 = virtualinvoke v2.<io.netty.buffer.ByteBuf: boolean hasArray()>();
if v6 == 0 goto label1;
v7 = virtualinvoke v2.<io.netty.buffer.ByteBuf: byte[] array()>();
v8 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int arrayOffset()>();
v9 = v8 + v3;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)>(v1, v7, v9, v4);
goto label4;
label1:
v10 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int nioBufferCount()>();
if v10 <= 0 goto label3;
v11 = virtualinvoke v2.<io.netty.buffer.ByteBuf: java.nio.ByteBuffer[] nioBuffers(int,int)>(v3, v4);
v12 = lengthof v11;
v13 = 0;
label2:
if v13 >= v12 goto label4;
v14 = v11[v13];
v15 = virtualinvoke v14.<java.nio.ByteBuffer: int remaining()>();
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: io.netty.buffer.ByteBuf getBytes(int,java.nio.ByteBuffer)>(v1, v14);
v1 = v1 + v15;
v13 = v13 + 1;
goto label2;
label3:
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf setBytes(int,io.netty.buffer.ByteBuf,int,int)>(v3, v0, v1, v4);
label4:
return v0;
}
public io.netty.buffer.ByteBuf getBytes(int, byte[], int, int)
{
byte[] v2;
int v1, v3, v4;
io.netty.buffer.UnpooledDirectByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: byte[];
v3 := @parameter2: int;
v4 := @parameter3: int;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void getBytes(int,byte[],int,int,boolean)>(v1, v2, v3, v4, 0);
return v0;
}
void getBytes(int, byte[], int, int, boolean)
{
byte[] v2;
java.nio.ByteBuffer v7, v8, v9;
java.nio.Buffer v10;
int v1, v11, v3, v4, v6;
io.netty.buffer.UnpooledDirectByteBuf v0;
boolean v5;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: byte[];
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 := @parameter4: boolean;
v6 = lengthof v2;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void checkDstIndex(int,int,int,int)>(v1, v4, v3, v6);
if v5 == 0 goto label1;
v7 = specialinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer internalNioBuffer()>();
goto label2;
label1:
v8 = v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer buffer>;
v7 = virtualinvoke v8.<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>();
label2:
v9 = virtualinvoke v7.<java.nio.ByteBuffer: java.nio.ByteBuffer clear()>();
v10 = virtualinvoke v9.<java.nio.Buffer: java.nio.Buffer position(int)>(v1);
v11 = v1 + v4;
virtualinvoke v10.<java.nio.Buffer: java.nio.Buffer limit(int)>(v11);
virtualinvoke v7.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(v2, v3, v4);
return;
}
public io.netty.buffer.ByteBuf readBytes(byte[], int, int)
{
byte[] v1;
int v2, v3, v4, v5, v6;
io.netty.buffer.UnpooledDirectByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void checkReadableBytes(int)>(v3);
v4 = v0.<io.netty.buffer.UnpooledDirectByteBuf: int readerIndex>;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void getBytes(int,byte[],int,int,boolean)>(v4, v1, v2, v3, 1);
v5 = v0.<io.netty.buffer.UnpooledDirectByteBuf: int readerIndex>;
v6 = v5 + v3;
v0.<io.netty.buffer.UnpooledDirectByteBuf: int readerIndex> = v6;
return v0;
}
public io.netty.buffer.ByteBuf getBytes(int, java.nio.ByteBuffer)
{
int v1;
io.netty.buffer.UnpooledDirectByteBuf v0;
java.nio.ByteBuffer v2;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: java.nio.ByteBuffer;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void getBytes(int,java.nio.ByteBuffer,boolean)>(v1, v2, 0);
return v0;
}
void getBytes(int, java.nio.ByteBuffer, boolean)
{
java.nio.ByteBuffer v2, v5, v6, v7;
java.nio.Buffer v8;
int v1, v10, v4, v9;
io.netty.buffer.UnpooledDirectByteBuf v0;
boolean v3;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: java.nio.ByteBuffer;
v3 := @parameter2: boolean;
v4 = virtualinvoke v2.<java.nio.ByteBuffer: int remaining()>();
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void checkIndex(int,int)>(v1, v4);
if v3 == 0 goto label1;
v5 = specialinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer internalNioBuffer()>();
goto label2;
label1:
v6 = v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer buffer>;
v5 = virtualinvoke v6.<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>();
label2:
v7 = virtualinvoke v5.<java.nio.ByteBuffer: java.nio.ByteBuffer clear()>();
v8 = virtualinvoke v7.<java.nio.Buffer: java.nio.Buffer position(int)>(v1);
v9 = virtualinvoke v2.<java.nio.ByteBuffer: int remaining()>();
v10 = v1 + v9;
virtualinvoke v8.<java.nio.Buffer: java.nio.Buffer limit(int)>(v10);
virtualinvoke v2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>(v5);
return;
}
public io.netty.buffer.ByteBuf readBytes(java.nio.ByteBuffer)
{
int v2, v3, v4, v5;
io.netty.buffer.UnpooledDirectByteBuf v0;
java.nio.ByteBuffer v1;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: java.nio.ByteBuffer;
v2 = virtualinvoke v1.<java.nio.ByteBuffer: int remaining()>();
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void checkReadableBytes(int)>(v2);
v3 = v0.<io.netty.buffer.UnpooledDirectByteBuf: int readerIndex>;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void getBytes(int,java.nio.ByteBuffer,boolean)>(v3, v1, 1);
v4 = v0.<io.netty.buffer.UnpooledDirectByteBuf: int readerIndex>;
v5 = v4 + v2;
v0.<io.netty.buffer.UnpooledDirectByteBuf: int readerIndex> = v5;
return v0;
}
public io.netty.buffer.ByteBuf setByte(int, int)
{
int v1, v2;
io.netty.buffer.UnpooledDirectByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: int;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void ensureAccessible()>();
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void _setByte(int,int)>(v1, v2);
return v0;
}
protected void _setByte(int, int)
{
int v1, v2;
io.netty.buffer.UnpooledDirectByteBuf v0;
java.nio.ByteBuffer v3;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer buffer>;
virtualinvoke v3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>(v1, v2);
return;
}
public io.netty.buffer.ByteBuf setShort(int, int)
{
int v1, v2;
io.netty.buffer.UnpooledDirectByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: int;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void ensureAccessible()>();
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void _setShort(int,int)>(v1, v2);
return v0;
}
protected void _setShort(int, int)
{
int v1, v2;
io.netty.buffer.UnpooledDirectByteBuf v0;
java.nio.ByteBuffer v3;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer buffer>;
virtualinvoke v3.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(int,short)>(v1, v2);
return;
}
protected void _setShortLE(int, int)
{
short v4;
int v1, v2;
io.netty.buffer.UnpooledDirectByteBuf v0;
java.nio.ByteBuffer v3;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer buffer>;
v4 = staticinvoke <io.netty.buffer.ByteBufUtil: short swapShort(short)>(v2);
virtualinvoke v3.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(int,short)>(v1, v4);
return;
}
public io.netty.buffer.ByteBuf setMedium(int, int)
{
int v1, v2;
io.netty.buffer.UnpooledDirectByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: int;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void ensureAccessible()>();
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void _setMedium(int,int)>(v1, v2);
return v0;
}
protected void _setMedium(int, int)
{
byte v5, v6, v7;
int v1, v2, v3, v4;
io.netty.buffer.UnpooledDirectByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: int;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: io.netty.buffer.ByteBuf setByte(int,int)>(v1, v5);
v3 = v1 + 1;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: io.netty.buffer.ByteBuf setByte(int,int)>(v3, v6);
v4 = v1 + 2;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: io.netty.buffer.ByteBuf setByte(int,int)>(v4, v7);
return;
}
protected void _setMediumLE(int, int)
{
byte v5, v6, v7;
int v1, v2, v3, v4;
io.netty.buffer.UnpooledDirectByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: int;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: io.netty.buffer.ByteBuf setByte(int,int)>(v1, v5);
v3 = v1 + 1;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: io.netty.buffer.ByteBuf setByte(int,int)>(v3, v6);
v4 = v1 + 2;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: io.netty.buffer.ByteBuf setByte(int,int)>(v4, v7);
return;
}
public io.netty.buffer.ByteBuf setInt(int, int)
{
int v1, v2;
io.netty.buffer.UnpooledDirectByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: int;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void ensureAccessible()>();
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void _setInt(int,int)>(v1, v2);
return v0;
}
protected void _setInt(int, int)
{
int v1, v2;
io.netty.buffer.UnpooledDirectByteBuf v0;
java.nio.ByteBuffer v3;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer buffer>;
virtualinvoke v3.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int,int)>(v1, v2);
return;
}
protected void _setIntLE(int, int)
{
int v1, v2, v4;
io.netty.buffer.UnpooledDirectByteBuf v0;
java.nio.ByteBuffer v3;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer buffer>;
v4 = staticinvoke <io.netty.buffer.ByteBufUtil: int swapInt(int)>(v2);
virtualinvoke v3.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int,int)>(v1, v4);
return;
}
public io.netty.buffer.ByteBuf setLong(int, long)
{
int v1;
io.netty.buffer.UnpooledDirectByteBuf v0;
long v2;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: long;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void ensureAccessible()>();
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void _setLong(int,long)>(v1, v2);
return v0;
}
protected void _setLong(int, long)
{
int v1;
io.netty.buffer.UnpooledDirectByteBuf v0;
long v2;
java.nio.ByteBuffer v3;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: long;
v3 = v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer buffer>;
virtualinvoke v3.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(int,long)>(v1, v2);
return;
}
protected void _setLongLE(int, long)
{
int v1;
io.netty.buffer.UnpooledDirectByteBuf v0;
long v2, v4;
java.nio.ByteBuffer v3;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: long;
v3 = v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer buffer>;
v4 = staticinvoke <io.netty.buffer.ByteBufUtil: long swapLong(long)>(v2);
virtualinvoke v3.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(int,long)>(v1, v4);
return;
}
public io.netty.buffer.ByteBuf setBytes(int, io.netty.buffer.ByteBuf, int, int)
{
java.nio.ByteBuffer[] v7;
java.nio.ByteBuffer v10;
io.netty.buffer.ByteBuf v2;
int v1, v11, v3, v4, v5, v6, v8, v9;
io.netty.buffer.UnpooledDirectByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int capacity()>();
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void checkSrcIndex(int,int,int,int)>(v1, v4, v3, v5);
v6 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int nioBufferCount()>();
if v6 <= 0 goto label2;
v7 = virtualinvoke v2.<io.netty.buffer.ByteBuf: java.nio.ByteBuffer[] nioBuffers(int,int)>(v3, v4);
v8 = lengthof v7;
v9 = 0;
label1:
if v9 >= v8 goto label3;
v10 = v7[v9];
v11 = virtualinvoke v10.<java.nio.ByteBuffer: int remaining()>();
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: io.netty.buffer.ByteBuf setBytes(int,java.nio.ByteBuffer)>(v1, v10);
v1 = v1 + v11;
v9 = v9 + 1;
goto label1;
label2:
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf getBytes(int,io.netty.buffer.ByteBuf,int,int)>(v3, v0, v1, v4);
label3:
return v0;
}
public io.netty.buffer.ByteBuf setBytes(int, byte[], int, int)
{
byte[] v2;
java.nio.ByteBuffer v6, v7;
java.nio.Buffer v8;
int v1, v3, v4, v5, v9;
io.netty.buffer.UnpooledDirectByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: byte[];
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 = lengthof v2;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void checkSrcIndex(int,int,int,int)>(v1, v4, v3, v5);
v6 = specialinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer internalNioBuffer()>();
v7 = virtualinvoke v6.<java.nio.ByteBuffer: java.nio.ByteBuffer clear()>();
v8 = virtualinvoke v7.<java.nio.Buffer: java.nio.Buffer position(int)>(v1);
v9 = v1 + v4;
virtualinvoke v8.<java.nio.Buffer: java.nio.Buffer limit(int)>(v9);
virtualinvoke v6.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(v2, v3, v4);
return v0;
}
public io.netty.buffer.ByteBuf setBytes(int, java.nio.ByteBuffer)
{
java.nio.ByteBuffer v2, v3, v4;
java.nio.Buffer v5;
int v1, v6, v7;
io.netty.buffer.UnpooledDirectByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: java.nio.ByteBuffer;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void ensureAccessible()>();
v3 = specialinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer internalNioBuffer()>();
if v2 != v3 goto label1;
v2 = virtualinvoke v2.<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>();
label1:
v4 = virtualinvoke v3.<java.nio.ByteBuffer: java.nio.ByteBuffer clear()>();
v5 = virtualinvoke v4.<java.nio.Buffer: java.nio.Buffer position(int)>(v1);
v6 = virtualinvoke v2.<java.nio.ByteBuffer: int remaining()>();
v7 = v1 + v6;
virtualinvoke v5.<java.nio.Buffer: java.nio.Buffer limit(int)>(v7);
virtualinvoke v3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>(v2);
return v0;
}
public io.netty.buffer.ByteBuf getBytes(int, java.io.OutputStream, int) throws java.io.IOException
{
java.io.OutputStream v2;
int v1, v3;
io.netty.buffer.UnpooledDirectByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: java.io.OutputStream;
v3 := @parameter2: int;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void getBytes(int,java.io.OutputStream,int,boolean)>(v1, v2, v3, 0);
return v0;
}
void getBytes(int, java.io.OutputStream, int, boolean) throws java.io.IOException
{
java.io.OutputStream v2;
io.netty.buffer.ByteBufAllocator v5;
java.nio.ByteBuffer v6, v7;
int v1, v3;
io.netty.buffer.UnpooledDirectByteBuf v0;
boolean v4;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: java.io.OutputStream;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void ensureAccessible()>();
if v3 != 0 goto label1;
return;
label1:
v5 = virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: io.netty.buffer.ByteBufAllocator alloc()>();
if v4 == 0 goto label2;
v6 = specialinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer internalNioBuffer()>();
goto label3;
label2:
v7 = v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer buffer>;
v6 = virtualinvoke v7.<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>();
label3:
staticinvoke <io.netty.buffer.ByteBufUtil: void readBytes(io.netty.buffer.ByteBufAllocator,java.nio.ByteBuffer,int,int,java.io.OutputStream)>(v5, v6, v1, v3, v2);
return;
}
public io.netty.buffer.ByteBuf readBytes(java.io.OutputStream, int) throws java.io.IOException
{
java.io.OutputStream v1;
int v2, v3, v4, v5;
io.netty.buffer.UnpooledDirectByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: java.io.OutputStream;
v2 := @parameter1: int;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void checkReadableBytes(int)>(v2);
v3 = v0.<io.netty.buffer.UnpooledDirectByteBuf: int readerIndex>;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void getBytes(int,java.io.OutputStream,int,boolean)>(v3, v1, v2, 1);
v4 = v0.<io.netty.buffer.UnpooledDirectByteBuf: int readerIndex>;
v5 = v4 + v2;
v0.<io.netty.buffer.UnpooledDirectByteBuf: int readerIndex> = v5;
return v0;
}
public int getBytes(int, java.nio.channels.GatheringByteChannel, int) throws java.io.IOException
{
int v1, v3, v4;
io.netty.buffer.UnpooledDirectByteBuf v0;
java.nio.channels.GatheringByteChannel v2;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: java.nio.channels.GatheringByteChannel;
v3 := @parameter2: int;
v4 = specialinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: int getBytes(int,java.nio.channels.GatheringByteChannel,int,boolean)>(v1, v2, v3, 0);
return v4;
}
private int getBytes(int, java.nio.channels.GatheringByteChannel, int, boolean) throws java.io.IOException
{
java.nio.ByteBuffer v5, v6, v7;
java.nio.Buffer v8;
int v1, v10, v3, v9;
io.netty.buffer.UnpooledDirectByteBuf v0;
boolean v4;
java.nio.channels.GatheringByteChannel v2;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: java.nio.channels.GatheringByteChannel;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void ensureAccessible()>();
if v3 != 0 goto label1;
return 0;
label1:
if v4 == 0 goto label2;
v5 = specialinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer internalNioBuffer()>();
goto label3;
label2:
v6 = v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer buffer>;
v5 = virtualinvoke v6.<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>();
label3:
v7 = virtualinvoke v5.<java.nio.ByteBuffer: java.nio.ByteBuffer clear()>();
v8 = virtualinvoke v7.<java.nio.Buffer: java.nio.Buffer position(int)>(v1);
v9 = v1 + v3;
virtualinvoke v8.<java.nio.Buffer: java.nio.Buffer limit(int)>(v9);
v10 = interfaceinvoke v2.<java.nio.channels.GatheringByteChannel: int write(java.nio.ByteBuffer)>(v5);
return v10;
}
public int getBytes(int, java.nio.channels.FileChannel, long, int) throws java.io.IOException
{
int v1, v4, v5;
io.netty.buffer.UnpooledDirectByteBuf v0;
long v3;
java.nio.channels.FileChannel v2;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: java.nio.channels.FileChannel;
v3 := @parameter2: long;
v4 := @parameter3: int;
v5 = specialinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: int getBytes(int,java.nio.channels.FileChannel,long,int,boolean)>(v1, v2, v3, v4, 0);
return v5;
}
private int getBytes(int, java.nio.channels.FileChannel, long, int, boolean) throws java.io.IOException
{
long v3;
java.nio.ByteBuffer v6, v7, v8;
java.nio.Buffer v9;
int v1, v10, v11, v4;
io.netty.buffer.UnpooledDirectByteBuf v0;
java.nio.channels.FileChannel v2;
boolean v5;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: java.nio.channels.FileChannel;
v3 := @parameter2: long;
v4 := @parameter3: int;
v5 := @parameter4: boolean;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void ensureAccessible()>();
if v4 != 0 goto label1;
return 0;
label1:
if v5 == 0 goto label2;
v6 = specialinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer internalNioBuffer()>();
goto label3;
label2:
v7 = v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer buffer>;
v6 = virtualinvoke v7.<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>();
label3:
v8 = virtualinvoke v6.<java.nio.ByteBuffer: java.nio.ByteBuffer clear()>();
v9 = virtualinvoke v8.<java.nio.Buffer: java.nio.Buffer position(int)>(v1);
v10 = v1 + v4;
virtualinvoke v9.<java.nio.Buffer: java.nio.Buffer limit(int)>(v10);
v11 = virtualinvoke v2.<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer,long)>(v6, v3);
return v11;
}
public int readBytes(java.nio.channels.GatheringByteChannel, int) throws java.io.IOException
{
int v2, v3, v4, v5, v6;
io.netty.buffer.UnpooledDirectByteBuf v0;
java.nio.channels.GatheringByteChannel v1;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: java.nio.channels.GatheringByteChannel;
v2 := @parameter1: int;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void checkReadableBytes(int)>(v2);
v3 = v0.<io.netty.buffer.UnpooledDirectByteBuf: int readerIndex>;
v4 = specialinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: int getBytes(int,java.nio.channels.GatheringByteChannel,int,boolean)>(v3, v1, v2, 1);
v5 = v0.<io.netty.buffer.UnpooledDirectByteBuf: int readerIndex>;
v6 = v5 + v4;
v0.<io.netty.buffer.UnpooledDirectByteBuf: int readerIndex> = v6;
return v4;
}
public int readBytes(java.nio.channels.FileChannel, long, int) throws java.io.IOException
{
long v2;
int v3, v4, v5, v6, v7;
io.netty.buffer.UnpooledDirectByteBuf v0;
java.nio.channels.FileChannel v1;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: java.nio.channels.FileChannel;
v2 := @parameter1: long;
v3 := @parameter2: int;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void checkReadableBytes(int)>(v3);
v4 = v0.<io.netty.buffer.UnpooledDirectByteBuf: int readerIndex>;
v5 = specialinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: int getBytes(int,java.nio.channels.FileChannel,long,int,boolean)>(v4, v1, v2, v3, 1);
v6 = v0.<io.netty.buffer.UnpooledDirectByteBuf: int readerIndex>;
v7 = v6 + v5;
v0.<io.netty.buffer.UnpooledDirectByteBuf: int readerIndex> = v7;
return v5;
}
public int setBytes(int, java.io.InputStream, int) throws java.io.IOException
{
byte[] v12, v7;
java.nio.ByteBuffer v14, v15, v4, v6, v8;
int v1, v10, v11, v13, v3, v9;
boolean v5;
io.netty.buffer.UnpooledDirectByteBuf v0;
java.io.InputStream v2;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: java.io.InputStream;
v3 := @parameter2: int;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void ensureAccessible()>();
v4 = v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer buffer>;
v5 = virtualinvoke v4.<java.nio.ByteBuffer: boolean hasArray()>();
if v5 == 0 goto label1;
v6 = v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer buffer>;
v7 = virtualinvoke v6.<java.nio.ByteBuffer: byte[] array()>();
v8 = v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer buffer>;
v9 = virtualinvoke v8.<java.nio.ByteBuffer: int arrayOffset()>();
v10 = v9 + v1;
v11 = virtualinvoke v2.<java.io.InputStream: int read(byte[],int,int)>(v7, v10, v3);
return v11;
label1:
v12 = staticinvoke <io.netty.buffer.ByteBufUtil: byte[] threadLocalTempArray(int)>(v3);
v13 = virtualinvoke v2.<java.io.InputStream: int read(byte[],int,int)>(v12, 0, v3);
if v13 > 0 goto label2;
return v13;
label2:
v14 = specialinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer internalNioBuffer()>();
v15 = virtualinvoke v14.<java.nio.ByteBuffer: java.nio.ByteBuffer clear()>();
virtualinvoke v15.<java.nio.ByteBuffer: java.nio.ByteBuffer position(int)>(v1);
virtualinvoke v14.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(v12, 0, v13);
return v13;
}
public int setBytes(int, java.nio.channels.ScatteringByteChannel, int) throws java.io.IOException
{
java.nio.channels.ScatteringByteChannel v2;
java.nio.channels.ClosedChannelException v9;
java.nio.ByteBuffer v4, v5;
java.nio.Buffer v6;
int v1, v10, v3, v7, v8;
io.netty.buffer.UnpooledDirectByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: java.nio.channels.ScatteringByteChannel;
v3 := @parameter2: int;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void ensureAccessible()>();
v4 = specialinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer internalNioBuffer()>();
v5 = virtualinvoke v4.<java.nio.ByteBuffer: java.nio.ByteBuffer clear()>();
v6 = virtualinvoke v5.<java.nio.Buffer: java.nio.Buffer position(int)>(v1);
v7 = v1 + v3;
virtualinvoke v6.<java.nio.Buffer: java.nio.Buffer limit(int)>(v7);
label1:
v8 = interfaceinvoke v2.<java.nio.channels.ScatteringByteChannel: int read(java.nio.ByteBuffer)>(v4);
label2:
return v8;
label3:
v9 := @caughtexception;
v10 = (int) -1;
return v10;
catch java.nio.channels.ClosedChannelException from label1 to label2 with label3;
}
public int setBytes(int, java.nio.channels.FileChannel, long, int) throws java.io.IOException
{
java.nio.channels.ClosedChannelException v10;
long v3;
java.nio.ByteBuffer v5, v6;
java.nio.Buffer v7;
int v1, v11, v4, v8, v9;
io.netty.buffer.UnpooledDirectByteBuf v0;
java.nio.channels.FileChannel v2;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: java.nio.channels.FileChannel;
v3 := @parameter2: long;
v4 := @parameter3: int;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void ensureAccessible()>();
v5 = specialinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer internalNioBuffer()>();
v6 = virtualinvoke v5.<java.nio.ByteBuffer: java.nio.ByteBuffer clear()>();
v7 = virtualinvoke v6.<java.nio.Buffer: java.nio.Buffer position(int)>(v1);
v8 = v1 + v4;
virtualinvoke v7.<java.nio.Buffer: java.nio.Buffer limit(int)>(v8);
label1:
v9 = virtualinvoke v2.<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer,long)>(v5, v3);
label2:
return v9;
label3:
v10 := @caughtexception;
v11 = (int) -1;
return v11;
catch java.nio.channels.ClosedChannelException from label1 to label2 with label3;
}
public int nioBufferCount()
{
io.netty.buffer.UnpooledDirectByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
return 1;
}
public java.nio.ByteBuffer[] nioBuffers(int, int)
{
java.nio.ByteBuffer[] v3;
int v1, v2;
io.netty.buffer.UnpooledDirectByteBuf v0;
java.nio.ByteBuffer v4;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = newarray (java.nio.ByteBuffer)[1];
v4 = virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer nioBuffer(int,int)>(v1, v2);
v3[0] = v4;
return v3;
}
public final boolean isContiguous()
{
io.netty.buffer.UnpooledDirectByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
return 1;
}
public io.netty.buffer.ByteBuf copy(int, int)
{
java.lang.IndexOutOfBoundsException v10;
io.netty.buffer.ByteBufAllocator v13;
java.nio.ByteBuffer v3, v4, v5;
io.netty.buffer.ByteBuf v15, v16;
java.nio.Buffer v6, v8;
int v1, v11, v14, v2, v7;
java.lang.String v12;
java.lang.IllegalArgumentException v9;
io.netty.buffer.UnpooledDirectByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: int;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void ensureAccessible()>();
label1:
v3 = v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer buffer>;
v4 = virtualinvoke v3.<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>();
v5 = virtualinvoke v4.<java.nio.ByteBuffer: java.nio.ByteBuffer clear()>();
v6 = virtualinvoke v5.<java.nio.Buffer: java.nio.Buffer position(int)>(v1);
v7 = v1 + v2;
v8 = virtualinvoke v6.<java.nio.Buffer: java.nio.Buffer limit(int)>(v7);
label2:
goto label4;
label3:
v9 := @caughtexception;
v10 = new java.lang.IndexOutOfBoundsException;
v11 = v1 + v2;
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Too many bytes to read - Need \u0001");
specialinvoke v10.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v12);
throw v10;
label4:
v13 = virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: io.netty.buffer.ByteBufAllocator alloc()>();
v14 = virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: int maxCapacity()>();
v15 = interfaceinvoke v13.<io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf directBuffer(int,int)>(v2, v14);
v16 = virtualinvoke v15.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeBytes(java.nio.ByteBuffer)>(v8);
return v16;
catch java.lang.IllegalArgumentException from label1 to label2 with label3;
}
public java.nio.ByteBuffer internalNioBuffer(int, int)
{
java.nio.ByteBuffer v3, v4;
java.nio.Buffer v5, v7;
int v1, v2, v6;
io.netty.buffer.UnpooledDirectByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: int;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void checkIndex(int,int)>(v1, v2);
v3 = specialinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer internalNioBuffer()>();
v4 = virtualinvoke v3.<java.nio.ByteBuffer: java.nio.ByteBuffer clear()>();
v5 = virtualinvoke v4.<java.nio.Buffer: java.nio.Buffer position(int)>(v1);
v6 = v1 + v2;
v7 = virtualinvoke v5.<java.nio.Buffer: java.nio.Buffer limit(int)>(v6);
return v7;
}
private java.nio.ByteBuffer internalNioBuffer()
{
io.netty.buffer.UnpooledDirectByteBuf v0;
java.nio.ByteBuffer v1, v2, v3;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 = v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer tmpNioBuf>;
if v1 != null goto label1;
v2 = v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer buffer>;
v3 = virtualinvoke v2.<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>();
v1 = v3;
v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer tmpNioBuf> = v3;
label1:
return v1;
}
public java.nio.ByteBuffer nioBuffer(int, int)
{
java.nio.ByteBuffer v3, v4, v5, v8;
java.nio.Buffer v7;
int v1, v2, v6;
io.netty.buffer.UnpooledDirectByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: int;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void checkIndex(int,int)>(v1, v2);
v3 = v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer buffer>;
v4 = virtualinvoke v3.<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>();
v5 = virtualinvoke v4.<java.nio.ByteBuffer: java.nio.ByteBuffer position(int)>(v1);
v6 = v1 + v2;
v7 = virtualinvoke v5.<java.nio.Buffer: java.nio.Buffer limit(int)>(v6);
v8 = virtualinvoke v7.<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>();
return v8;
}
protected void deallocate()
{
io.netty.buffer.UnpooledDirectByteBuf v0;
java.nio.ByteBuffer v1;
boolean v2;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
v1 = v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer buffer>;
if v1 != null goto label1;
return;
label1:
v0.<io.netty.buffer.UnpooledDirectByteBuf: java.nio.ByteBuffer buffer> = null;
v2 = v0.<io.netty.buffer.UnpooledDirectByteBuf: boolean doNotFree>;
if v2 != 0 goto label2;
virtualinvoke v0.<io.netty.buffer.UnpooledDirectByteBuf: void freeDirect(java.nio.ByteBuffer)>(v1);
label2:
return;
}
public io.netty.buffer.ByteBuf unwrap()
{
io.netty.buffer.UnpooledDirectByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledDirectByteBuf;
return null;
}
}