public class io.netty.buffer.UnpooledHeapByteBuf extends io.netty.buffer.AbstractReferenceCountedByteBuf
{
private final io.netty.buffer.ByteBufAllocator alloc;
byte[] array;
private java.nio.ByteBuffer tmpNioBuf;
public void <init>(io.netty.buffer.ByteBufAllocator, int, int)
{
byte[] v10;
java.lang.Object[] v5;
io.netty.buffer.ByteBufAllocator v1;
java.lang.IllegalArgumentException v4;
java.lang.Integer v6, v7;
int v2, v3;
java.lang.Object v9;
java.lang.String v8;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: io.netty.buffer.ByteBufAllocator;
v2 := @parameter1: int;
v3 := @parameter2: int;
specialinvoke v0.<io.netty.buffer.AbstractReferenceCountedByteBuf: void <init>(int)>(v3);
if v2 <= v3 goto label1;
v4 = new java.lang.IllegalArgumentException;
v5 = newarray (java.lang.Object)[2];
v6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v2);
v5[0] = v6;
v7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v3);
v5[1] = v7;
v8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("initialCapacity(%d) > maxCapacity(%d)", v5);
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v8);
throw v4;
label1:
v9 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "alloc");
v0.<io.netty.buffer.UnpooledHeapByteBuf: io.netty.buffer.ByteBufAllocator alloc> = v9;
v10 = virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] allocateArray(int)>(v2);
specialinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void setArray(byte[])>(v10);
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: io.netty.buffer.ByteBuf setIndex(int,int)>(0, 0);
return;
}
protected void <init>(io.netty.buffer.ByteBufAllocator, byte[], int)
{
byte[] v2;
java.lang.Object[] v6;
io.netty.buffer.ByteBufAllocator v1;
java.lang.IllegalArgumentException v5;
java.lang.Integer v8, v9;
int v11, v3, v4, v7;
java.lang.String v10;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: io.netty.buffer.ByteBufAllocator;
v2 := @parameter1: byte[];
v3 := @parameter2: int;
specialinvoke v0.<io.netty.buffer.AbstractReferenceCountedByteBuf: void <init>(int)>(v3);
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "alloc");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "initialArray");
v4 = lengthof v2;
if v4 <= v3 goto label1;
v5 = new java.lang.IllegalArgumentException;
v6 = newarray (java.lang.Object)[2];
v7 = lengthof v2;
v8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v7);
v6[0] = v8;
v9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v3);
v6[1] = v9;
v10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("initialCapacity(%d) > maxCapacity(%d)", v6);
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v10);
throw v5;
label1:
v0.<io.netty.buffer.UnpooledHeapByteBuf: io.netty.buffer.ByteBufAllocator alloc> = v1;
specialinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void setArray(byte[])>(v2);
v11 = lengthof v2;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: io.netty.buffer.ByteBuf setIndex(int,int)>(0, v11);
return;
}
protected byte[] allocateArray(int)
{
int v1;
byte[] v2;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 = newarray (byte)[v1];
return v2;
}
protected void freeArray(byte[])
{
byte[] v1;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: byte[];
return;
}
private void setArray(byte[])
{
byte[] v1;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: byte[];
v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array> = v1;
v0.<io.netty.buffer.UnpooledHeapByteBuf: java.nio.ByteBuffer tmpNioBuf> = null;
return;
}
public io.netty.buffer.ByteBufAllocator alloc()
{
io.netty.buffer.ByteBufAllocator v1;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 = v0.<io.netty.buffer.UnpooledHeapByteBuf: io.netty.buffer.ByteBufAllocator alloc>;
return v1;
}
public java.nio.ByteOrder order()
{
java.nio.ByteOrder v1;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;
return v1;
}
public boolean isDirect()
{
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
return 0;
}
public int capacity()
{
int v2;
byte[] v1;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
v2 = lengthof v1;
return v2;
}
public io.netty.buffer.ByteBuf capacity(int)
{
byte[] v2, v5;
int v1, v3, v4;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void checkNewCapacity(int)>(v1);
v2 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
v3 = lengthof v2;
if v1 != v3 goto label1;
return v0;
label1:
if v1 <= v3 goto label2;
v4 = v3;
goto label3;
label2:
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void trimIndicesToCapacity(int)>(v1);
v4 = v1;
label3:
v5 = virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] allocateArray(int)>(v1);
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v2, 0, v5, 0, v4);
specialinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void setArray(byte[])>(v5);
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void freeArray(byte[])>(v2);
return v0;
}
public boolean hasArray()
{
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
return 1;
}
public byte[] array()
{
byte[] v1;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void ensureAccessible()>();
v1 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
return v1;
}
public int arrayOffset()
{
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
return 0;
}
public boolean hasMemoryAddress()
{
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
return 0;
}
public long memoryAddress()
{
java.lang.UnsupportedOperationException v1;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>()>();
throw v1;
}
public io.netty.buffer.ByteBuf getBytes(int, io.netty.buffer.ByteBuf, int, int)
{
byte[] v11, v14, v7;
long v8, v9;
io.netty.buffer.ByteBuf v2;
int v1, v12, v13, v3, v4, v5;
boolean v10, v6;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int capacity()>();
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void checkDstIndex(int,int,int,int)>(v1, v4, v3, v5);
v6 = virtualinvoke v2.<io.netty.buffer.ByteBuf: boolean hasMemoryAddress()>();
if v6 == 0 goto label1;
v7 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
v8 = virtualinvoke v2.<io.netty.buffer.ByteBuf: long memoryAddress()>();
v9 = v8 + v3;
staticinvoke <io.netty.util.internal.PlatformDependent: void copyMemory(byte[],int,long,long)>(v7, v1, v9, v4);
goto label3;
label1:
v10 = virtualinvoke v2.<io.netty.buffer.ByteBuf: boolean hasArray()>();
if v10 == 0 goto label2;
v11 = virtualinvoke v2.<io.netty.buffer.ByteBuf: byte[] array()>();
v12 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int arrayOffset()>();
v13 = v12 + v3;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)>(v1, v11, v13, v4);
goto label3;
label2:
v14 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)>(v3, v14, v1, v4);
label3:
return v0;
}
public io.netty.buffer.ByteBuf getBytes(int, byte[], int, int)
{
byte[] v2, v6;
int v1, v3, v4, v5;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: byte[];
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 = lengthof v2;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void checkDstIndex(int,int,int,int)>(v1, v4, v3, v5);
v6 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v6, v1, v2, v3, v4);
return v0;
}
public io.netty.buffer.ByteBuf getBytes(int, java.nio.ByteBuffer)
{
byte[] v3;
int v1, v4;
java.nio.ByteBuffer v2;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: java.nio.ByteBuffer;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void ensureAccessible()>();
v3 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
v4 = virtualinvoke v2.<java.nio.ByteBuffer: int remaining()>();
virtualinvoke v2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(v3, v1, v4);
return v0;
}
public io.netty.buffer.ByteBuf getBytes(int, java.io.OutputStream, int) throws java.io.IOException
{
java.io.OutputStream v2;
byte[] v4;
int v1, v3;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: java.io.OutputStream;
v3 := @parameter2: int;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void ensureAccessible()>();
v4 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
virtualinvoke v2.<java.io.OutputStream: void write(byte[],int,int)>(v4, v1, v3);
return v0;
}
public int getBytes(int, java.nio.channels.GatheringByteChannel, int) throws java.io.IOException
{
int v1, v3, v4;
io.netty.buffer.UnpooledHeapByteBuf v0;
java.nio.channels.GatheringByteChannel v2;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: java.nio.channels.GatheringByteChannel;
v3 := @parameter2: int;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void ensureAccessible()>();
v4 = specialinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: int getBytes(int,java.nio.channels.GatheringByteChannel,int,boolean)>(v1, v2, v3, 0);
return v4;
}
public int getBytes(int, java.nio.channels.FileChannel, long, int) throws java.io.IOException
{
int v1, v4, v5;
long v3;
java.nio.channels.FileChannel v2;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: java.nio.channels.FileChannel;
v3 := @parameter2: long;
v4 := @parameter3: int;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void ensureAccessible()>();
v5 = specialinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: int getBytes(int,java.nio.channels.FileChannel,long,int,boolean)>(v1, v2, v3, v4, 0);
return v5;
}
private int getBytes(int, java.nio.channels.GatheringByteChannel, int, boolean) throws java.io.IOException
{
byte[] v6;
java.nio.ByteBuffer v5, v7;
java.nio.Buffer v10, v8;
int v1, v11, v3, v9;
boolean v4;
io.netty.buffer.UnpooledHeapByteBuf v0;
java.nio.channels.GatheringByteChannel v2;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: java.nio.channels.GatheringByteChannel;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void ensureAccessible()>();
if v4 == 0 goto label1;
v5 = specialinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: java.nio.ByteBuffer internalNioBuffer()>();
goto label2;
label1:
v6 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
v5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(v6);
label2:
v7 = virtualinvoke v5.<java.nio.ByteBuffer: java.nio.ByteBuffer clear()>();
v8 = virtualinvoke v7.<java.nio.Buffer: java.nio.Buffer position(int)>(v1);
v9 = v1 + v3;
v10 = virtualinvoke v8.<java.nio.Buffer: java.nio.Buffer limit(int)>(v9);
v11 = interfaceinvoke v2.<java.nio.channels.GatheringByteChannel: int write(java.nio.ByteBuffer)>(v10);
return v11;
}
private int getBytes(int, java.nio.channels.FileChannel, long, int, boolean) throws java.io.IOException
{
byte[] v7;
long v3;
java.nio.ByteBuffer v6, v8;
java.nio.Buffer v11, v9;
int v1, v10, v12, v4;
java.nio.channels.FileChannel v2;
boolean v5;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: java.nio.channels.FileChannel;
v3 := @parameter2: long;
v4 := @parameter3: int;
v5 := @parameter4: boolean;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void ensureAccessible()>();
if v5 == 0 goto label1;
v6 = specialinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: java.nio.ByteBuffer internalNioBuffer()>();
goto label2;
label1:
v7 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
v6 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(v7);
label2:
v8 = virtualinvoke v6.<java.nio.ByteBuffer: java.nio.ByteBuffer clear()>();
v9 = virtualinvoke v8.<java.nio.Buffer: java.nio.Buffer position(int)>(v1);
v10 = v1 + v4;
v11 = virtualinvoke v9.<java.nio.Buffer: java.nio.Buffer limit(int)>(v10);
v12 = virtualinvoke v2.<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer,long)>(v11, v3);
return v12;
}
public int readBytes(java.nio.channels.GatheringByteChannel, int) throws java.io.IOException
{
int v2, v3, v4, v5, v6;
io.netty.buffer.UnpooledHeapByteBuf v0;
java.nio.channels.GatheringByteChannel v1;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: java.nio.channels.GatheringByteChannel;
v2 := @parameter1: int;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void checkReadableBytes(int)>(v2);
v3 = v0.<io.netty.buffer.UnpooledHeapByteBuf: int readerIndex>;
v4 = specialinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: int getBytes(int,java.nio.channels.GatheringByteChannel,int,boolean)>(v3, v1, v2, 1);
v5 = v0.<io.netty.buffer.UnpooledHeapByteBuf: int readerIndex>;
v6 = v5 + v4;
v0.<io.netty.buffer.UnpooledHeapByteBuf: int readerIndex> = v6;
return v4;
}
public int readBytes(java.nio.channels.FileChannel, long, int) throws java.io.IOException
{
long v2;
int v3, v4, v5, v6, v7;
java.nio.channels.FileChannel v1;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: java.nio.channels.FileChannel;
v2 := @parameter1: long;
v3 := @parameter2: int;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void checkReadableBytes(int)>(v3);
v4 = v0.<io.netty.buffer.UnpooledHeapByteBuf: int readerIndex>;
v5 = specialinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: int getBytes(int,java.nio.channels.FileChannel,long,int,boolean)>(v4, v1, v2, v3, 1);
v6 = v0.<io.netty.buffer.UnpooledHeapByteBuf: int readerIndex>;
v7 = v6 + v5;
v0.<io.netty.buffer.UnpooledHeapByteBuf: int readerIndex> = v7;
return v5;
}
public io.netty.buffer.ByteBuf setBytes(int, io.netty.buffer.ByteBuf, int, int)
{
byte[] v11, v14, v9;
long v7, v8;
io.netty.buffer.ByteBuf v2;
int v1, v12, v13, v3, v4, v5;
boolean v10, v6;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int capacity()>();
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void checkSrcIndex(int,int,int,int)>(v1, v4, v3, v5);
v6 = virtualinvoke v2.<io.netty.buffer.ByteBuf: boolean hasMemoryAddress()>();
if v6 == 0 goto label1;
v7 = virtualinvoke v2.<io.netty.buffer.ByteBuf: long memoryAddress()>();
v8 = v7 + v3;
v9 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
staticinvoke <io.netty.util.internal.PlatformDependent: void copyMemory(long,byte[],int,long)>(v8, v9, v1, v4);
goto label3;
label1:
v10 = virtualinvoke v2.<io.netty.buffer.ByteBuf: boolean hasArray()>();
if v10 == 0 goto label2;
v11 = virtualinvoke v2.<io.netty.buffer.ByteBuf: byte[] array()>();
v12 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int arrayOffset()>();
v13 = v12 + v3;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: io.netty.buffer.ByteBuf setBytes(int,byte[],int,int)>(v1, v11, v13, v4);
goto label3;
label2:
v14 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
virtualinvoke v2.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf getBytes(int,byte[],int,int)>(v3, v14, v1, v4);
label3:
return v0;
}
public io.netty.buffer.ByteBuf setBytes(int, byte[], int, int)
{
byte[] v2, v6;
int v1, v3, v4, v5;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: byte[];
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 = lengthof v2;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void checkSrcIndex(int,int,int,int)>(v1, v4, v3, v5);
v6 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v2, v3, v6, v1, v4);
return v0;
}
public io.netty.buffer.ByteBuf setBytes(int, java.nio.ByteBuffer)
{
byte[] v3;
int v1, v4;
java.nio.ByteBuffer v2;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: java.nio.ByteBuffer;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void ensureAccessible()>();
v3 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
v4 = virtualinvoke v2.<java.nio.ByteBuffer: int remaining()>();
virtualinvoke v2.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(v3, v1, v4);
return v0;
}
public int setBytes(int, java.io.InputStream, int) throws java.io.IOException
{
byte[] v4;
int v1, v3, v5;
io.netty.buffer.UnpooledHeapByteBuf v0;
java.io.InputStream v2;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: java.io.InputStream;
v3 := @parameter2: int;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void ensureAccessible()>();
v4 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
v5 = virtualinvoke v2.<java.io.InputStream: int read(byte[],int,int)>(v4, v1, v3);
return v5;
}
public int setBytes(int, java.nio.channels.ScatteringByteChannel, int) throws java.io.IOException
{
java.nio.channels.ScatteringByteChannel v2;
java.nio.channels.ClosedChannelException v10;
java.nio.ByteBuffer v4, v5;
java.nio.Buffer v6, v8;
int v1, v11, v3, v7, v9;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: java.nio.channels.ScatteringByteChannel;
v3 := @parameter2: int;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void ensureAccessible()>();
label1:
v4 = specialinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: java.nio.ByteBuffer internalNioBuffer()>();
v5 = virtualinvoke v4.<java.nio.ByteBuffer: java.nio.ByteBuffer clear()>();
v6 = virtualinvoke v5.<java.nio.Buffer: java.nio.Buffer position(int)>(v1);
v7 = v1 + v3;
v8 = virtualinvoke v6.<java.nio.Buffer: java.nio.Buffer limit(int)>(v7);
v9 = interfaceinvoke v2.<java.nio.channels.ScatteringByteChannel: int read(java.nio.ByteBuffer)>(v8);
label2:
return v9;
label3:
v10 := @caughtexception;
v11 = (int) -1;
return v11;
catch java.nio.channels.ClosedChannelException from label1 to label2 with label3;
}
public int setBytes(int, java.nio.channels.FileChannel, long, int) throws java.io.IOException
{
java.nio.channels.ClosedChannelException v11;
long v3;
java.nio.ByteBuffer v5, v6;
java.nio.Buffer v7, v9;
int v1, v10, v12, v4, v8;
java.nio.channels.FileChannel v2;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: java.nio.channels.FileChannel;
v3 := @parameter2: long;
v4 := @parameter3: int;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void ensureAccessible()>();
label1:
v5 = specialinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: java.nio.ByteBuffer internalNioBuffer()>();
v6 = virtualinvoke v5.<java.nio.ByteBuffer: java.nio.ByteBuffer clear()>();
v7 = virtualinvoke v6.<java.nio.Buffer: java.nio.Buffer position(int)>(v1);
v8 = v1 + v4;
v9 = virtualinvoke v7.<java.nio.Buffer: java.nio.Buffer limit(int)>(v8);
v10 = virtualinvoke v2.<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer,long)>(v9, v3);
label2:
return v10;
label3:
v11 := @caughtexception;
v12 = (int) -1;
return v12;
catch java.nio.channels.ClosedChannelException from label1 to label2 with label3;
}
public int nioBufferCount()
{
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
return 1;
}
public java.nio.ByteBuffer nioBuffer(int, int)
{
byte[] v3;
int v1, v2;
java.nio.ByteBuffer v4, v5;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: int;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void ensureAccessible()>();
v3 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
v4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>(v3, v1, v2);
v5 = virtualinvoke v4.<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>();
return v5;
}
public java.nio.ByteBuffer[] nioBuffers(int, int)
{
java.nio.ByteBuffer[] v3;
int v1, v2;
java.nio.ByteBuffer v4;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = newarray (java.nio.ByteBuffer)[1];
v4 = virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: java.nio.ByteBuffer nioBuffer(int,int)>(v1, v2);
v3[0] = v4;
return v3;
}
public java.nio.ByteBuffer internalNioBuffer(int, int)
{
java.nio.ByteBuffer v3, v4;
java.nio.Buffer v5, v7;
int v1, v2, v6;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: int;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void checkIndex(int,int)>(v1, v2);
v3 = specialinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: java.nio.ByteBuffer internalNioBuffer()>();
v4 = virtualinvoke v3.<java.nio.ByteBuffer: java.nio.ByteBuffer clear()>();
v5 = virtualinvoke v4.<java.nio.Buffer: java.nio.Buffer position(int)>(v1);
v6 = v1 + v2;
v7 = virtualinvoke v5.<java.nio.Buffer: java.nio.Buffer limit(int)>(v6);
return v7;
}
public final boolean isContiguous()
{
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
return 1;
}
public byte getByte(int)
{
int v1;
byte v2;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void ensureAccessible()>();
v2 = virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: byte _getByte(int)>(v1);
return v2;
}
protected byte _getByte(int)
{
byte[] v2;
byte v3;
int v1;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
v3 = staticinvoke <io.netty.buffer.HeapByteBufUtil: byte getByte(byte[],int)>(v2, v1);
return v3;
}
public short getShort(int)
{
int v1;
short v2;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void ensureAccessible()>();
v2 = virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: short _getShort(int)>(v1);
return v2;
}
protected short _getShort(int)
{
byte[] v2;
short v3;
int v1;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
v3 = staticinvoke <io.netty.buffer.HeapByteBufUtil: short getShort(byte[],int)>(v2, v1);
return v3;
}
public short getShortLE(int)
{
int v1;
short v2;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void ensureAccessible()>();
v2 = virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: short _getShortLE(int)>(v1);
return v2;
}
protected short _getShortLE(int)
{
byte[] v2;
short v3;
int v1;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
v3 = staticinvoke <io.netty.buffer.HeapByteBufUtil: short getShortLE(byte[],int)>(v2, v1);
return v3;
}
public int getUnsignedMedium(int)
{
int v1, v2;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void ensureAccessible()>();
v2 = virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: int _getUnsignedMedium(int)>(v1);
return v2;
}
protected int _getUnsignedMedium(int)
{
byte[] v2;
int v1, v3;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
v3 = staticinvoke <io.netty.buffer.HeapByteBufUtil: int getUnsignedMedium(byte[],int)>(v2, v1);
return v3;
}
public int getUnsignedMediumLE(int)
{
int v1, v2;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void ensureAccessible()>();
v2 = virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: int _getUnsignedMediumLE(int)>(v1);
return v2;
}
protected int _getUnsignedMediumLE(int)
{
byte[] v2;
int v1, v3;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
v3 = staticinvoke <io.netty.buffer.HeapByteBufUtil: int getUnsignedMediumLE(byte[],int)>(v2, v1);
return v3;
}
public int getInt(int)
{
int v1, v2;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void ensureAccessible()>();
v2 = virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: int _getInt(int)>(v1);
return v2;
}
protected int _getInt(int)
{
byte[] v2;
int v1, v3;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
v3 = staticinvoke <io.netty.buffer.HeapByteBufUtil: int getInt(byte[],int)>(v2, v1);
return v3;
}
public int getIntLE(int)
{
int v1, v2;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void ensureAccessible()>();
v2 = virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: int _getIntLE(int)>(v1);
return v2;
}
protected int _getIntLE(int)
{
byte[] v2;
int v1, v3;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
v3 = staticinvoke <io.netty.buffer.HeapByteBufUtil: int getIntLE(byte[],int)>(v2, v1);
return v3;
}
public long getLong(int)
{
int v1;
long v2;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void ensureAccessible()>();
v2 = virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: long _getLong(int)>(v1);
return v2;
}
protected long _getLong(int)
{
byte[] v2;
int v1;
long v3;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
v3 = staticinvoke <io.netty.buffer.HeapByteBufUtil: long getLong(byte[],int)>(v2, v1);
return v3;
}
public long getLongLE(int)
{
int v1;
long v2;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void ensureAccessible()>();
v2 = virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: long _getLongLE(int)>(v1);
return v2;
}
protected long _getLongLE(int)
{
byte[] v2;
int v1;
long v3;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
v3 = staticinvoke <io.netty.buffer.HeapByteBufUtil: long getLongLE(byte[],int)>(v2, v1);
return v3;
}
public io.netty.buffer.ByteBuf setByte(int, int)
{
int v1, v2;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: int;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void ensureAccessible()>();
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void _setByte(int,int)>(v1, v2);
return v0;
}
protected void _setByte(int, int)
{
byte[] v3;
int v1, v2;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
staticinvoke <io.netty.buffer.HeapByteBufUtil: void setByte(byte[],int,int)>(v3, v1, v2);
return;
}
public io.netty.buffer.ByteBuf setShort(int, int)
{
int v1, v2;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: int;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void ensureAccessible()>();
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void _setShort(int,int)>(v1, v2);
return v0;
}
protected void _setShort(int, int)
{
byte[] v3;
int v1, v2;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
staticinvoke <io.netty.buffer.HeapByteBufUtil: void setShort(byte[],int,int)>(v3, v1, v2);
return;
}
public io.netty.buffer.ByteBuf setShortLE(int, int)
{
int v1, v2;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: int;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void ensureAccessible()>();
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void _setShortLE(int,int)>(v1, v2);
return v0;
}
protected void _setShortLE(int, int)
{
byte[] v3;
int v1, v2;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
staticinvoke <io.netty.buffer.HeapByteBufUtil: void setShortLE(byte[],int,int)>(v3, v1, v2);
return;
}
public io.netty.buffer.ByteBuf setMedium(int, int)
{
int v1, v2;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: int;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void ensureAccessible()>();
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void _setMedium(int,int)>(v1, v2);
return v0;
}
protected void _setMedium(int, int)
{
byte[] v3;
int v1, v2;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
staticinvoke <io.netty.buffer.HeapByteBufUtil: void setMedium(byte[],int,int)>(v3, v1, v2);
return;
}
public io.netty.buffer.ByteBuf setMediumLE(int, int)
{
int v1, v2;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: int;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void ensureAccessible()>();
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void _setMediumLE(int,int)>(v1, v2);
return v0;
}
protected void _setMediumLE(int, int)
{
byte[] v3;
int v1, v2;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
staticinvoke <io.netty.buffer.HeapByteBufUtil: void setMediumLE(byte[],int,int)>(v3, v1, v2);
return;
}
public io.netty.buffer.ByteBuf setInt(int, int)
{
int v1, v2;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: int;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void ensureAccessible()>();
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void _setInt(int,int)>(v1, v2);
return v0;
}
protected void _setInt(int, int)
{
byte[] v3;
int v1, v2;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
staticinvoke <io.netty.buffer.HeapByteBufUtil: void setInt(byte[],int,int)>(v3, v1, v2);
return;
}
public io.netty.buffer.ByteBuf setIntLE(int, int)
{
int v1, v2;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: int;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void ensureAccessible()>();
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void _setIntLE(int,int)>(v1, v2);
return v0;
}
protected void _setIntLE(int, int)
{
byte[] v3;
int v1, v2;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
staticinvoke <io.netty.buffer.HeapByteBufUtil: void setIntLE(byte[],int,int)>(v3, v1, v2);
return;
}
public io.netty.buffer.ByteBuf setLong(int, long)
{
int v1;
long v2;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: long;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void ensureAccessible()>();
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void _setLong(int,long)>(v1, v2);
return v0;
}
protected void _setLong(int, long)
{
byte[] v3;
int v1;
long v2;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: long;
v3 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
staticinvoke <io.netty.buffer.HeapByteBufUtil: void setLong(byte[],int,long)>(v3, v1, v2);
return;
}
public io.netty.buffer.ByteBuf setLongLE(int, long)
{
int v1;
long v2;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: long;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void ensureAccessible()>();
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void _setLongLE(int,long)>(v1, v2);
return v0;
}
protected void _setLongLE(int, long)
{
byte[] v3;
int v1;
long v2;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: long;
v3 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
staticinvoke <io.netty.buffer.HeapByteBufUtil: void setLongLE(byte[],int,long)>(v3, v1, v2);
return;
}
public io.netty.buffer.ByteBuf copy(int, int)
{
byte[] v6;
io.netty.buffer.ByteBufAllocator v3;
io.netty.buffer.ByteBuf v5, v7;
int v1, v2, v4;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 := @parameter0: int;
v2 := @parameter1: int;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void checkIndex(int,int)>(v1, v2);
v3 = virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: io.netty.buffer.ByteBufAllocator alloc()>();
v4 = virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: int maxCapacity()>();
v5 = interfaceinvoke v3.<io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf heapBuffer(int,int)>(v2, v4);
v6 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
v7 = virtualinvoke v5.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeBytes(byte[],int,int)>(v6, v1, v2);
return v7;
}
private java.nio.ByteBuffer internalNioBuffer()
{
byte[] v2;
java.nio.ByteBuffer v1, v3;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 = v0.<io.netty.buffer.UnpooledHeapByteBuf: java.nio.ByteBuffer tmpNioBuf>;
if v1 != null goto label1;
v2 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
v3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(v2);
v1 = v3;
v0.<io.netty.buffer.UnpooledHeapByteBuf: java.nio.ByteBuffer tmpNioBuf> = v3;
label1:
return v1;
}
protected void deallocate()
{
byte[] v1, v2;
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
v1 = v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array>;
virtualinvoke v0.<io.netty.buffer.UnpooledHeapByteBuf: void freeArray(byte[])>(v1);
v2 = <io.netty.util.internal.EmptyArrays: byte[] EMPTY_BYTES>;
v0.<io.netty.buffer.UnpooledHeapByteBuf: byte[] array> = v2;
return;
}
public io.netty.buffer.ByteBuf unwrap()
{
io.netty.buffer.UnpooledHeapByteBuf v0;
v0 := @this: io.netty.buffer.UnpooledHeapByteBuf;
return null;
}
}