public abstract class io.netty.channel.AbstractChannel extends io.netty.util.DefaultAttributeMap implements io.netty.channel.Channel
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private final io.netty.channel.Channel parent;
private final io.netty.channel.ChannelId id;
private final io.netty.channel.Channel$Unsafe unsafe;
private final io.netty.channel.DefaultChannelPipeline pipeline;
private final io.netty.channel.VoidChannelPromise unsafeVoidPromise;
private final io.netty.channel.AbstractChannel$CloseFuture closeFuture;
private volatile java.net.SocketAddress localAddress;
private volatile java.net.SocketAddress remoteAddress;
private volatile io.netty.channel.EventLoop eventLoop;
private volatile boolean registered;
private boolean closeInitiated;
private java.lang.Throwable initialCloseCause;
private boolean strValActive;
private java.lang.String strVal;
protected void <init>(io.netty.channel.Channel)
{
io.netty.channel.AbstractChannel$CloseFuture v3;
io.netty.channel.Channel v1;
io.netty.channel.VoidChannelPromise v2;
io.netty.channel.ChannelId v4;
io.netty.channel.AbstractChannel$AbstractUnsafe v5;
io.netty.channel.AbstractChannel v0;
io.netty.channel.DefaultChannelPipeline v6;
v0 := @this: io.netty.channel.AbstractChannel;
v1 := @parameter0: io.netty.channel.Channel;
specialinvoke v0.<io.netty.util.DefaultAttributeMap: void <init>()>();
v2 = new io.netty.channel.VoidChannelPromise;
specialinvoke v2.<io.netty.channel.VoidChannelPromise: void <init>(io.netty.channel.Channel,boolean)>(v0, 0);
v0.<io.netty.channel.AbstractChannel: io.netty.channel.VoidChannelPromise unsafeVoidPromise> = v2;
v3 = new io.netty.channel.AbstractChannel$CloseFuture;
specialinvoke v3.<io.netty.channel.AbstractChannel$CloseFuture: void <init>(io.netty.channel.AbstractChannel)>(v0);
v0.<io.netty.channel.AbstractChannel: io.netty.channel.AbstractChannel$CloseFuture closeFuture> = v3;
v0.<io.netty.channel.AbstractChannel: io.netty.channel.Channel parent> = v1;
v4 = virtualinvoke v0.<io.netty.channel.AbstractChannel: io.netty.channel.ChannelId newId()>();
v0.<io.netty.channel.AbstractChannel: io.netty.channel.ChannelId id> = v4;
v5 = virtualinvoke v0.<io.netty.channel.AbstractChannel: io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()>();
v0.<io.netty.channel.AbstractChannel: io.netty.channel.Channel$Unsafe unsafe> = v5;
v6 = virtualinvoke v0.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline newChannelPipeline()>();
v0.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline pipeline> = v6;
return;
}
protected void <init>(io.netty.channel.Channel, io.netty.channel.ChannelId)
{
io.netty.channel.AbstractChannel$CloseFuture v4;
io.netty.channel.Channel v1;
io.netty.channel.VoidChannelPromise v3;
io.netty.channel.ChannelId v2;
io.netty.channel.AbstractChannel$AbstractUnsafe v5;
io.netty.channel.AbstractChannel v0;
io.netty.channel.DefaultChannelPipeline v6;
v0 := @this: io.netty.channel.AbstractChannel;
v1 := @parameter0: io.netty.channel.Channel;
v2 := @parameter1: io.netty.channel.ChannelId;
specialinvoke v0.<io.netty.util.DefaultAttributeMap: void <init>()>();
v3 = new io.netty.channel.VoidChannelPromise;
specialinvoke v3.<io.netty.channel.VoidChannelPromise: void <init>(io.netty.channel.Channel,boolean)>(v0, 0);
v0.<io.netty.channel.AbstractChannel: io.netty.channel.VoidChannelPromise unsafeVoidPromise> = v3;
v4 = new io.netty.channel.AbstractChannel$CloseFuture;
specialinvoke v4.<io.netty.channel.AbstractChannel$CloseFuture: void <init>(io.netty.channel.AbstractChannel)>(v0);
v0.<io.netty.channel.AbstractChannel: io.netty.channel.AbstractChannel$CloseFuture closeFuture> = v4;
v0.<io.netty.channel.AbstractChannel: io.netty.channel.Channel parent> = v1;
v0.<io.netty.channel.AbstractChannel: io.netty.channel.ChannelId id> = v2;
v5 = virtualinvoke v0.<io.netty.channel.AbstractChannel: io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe()>();
v0.<io.netty.channel.AbstractChannel: io.netty.channel.Channel$Unsafe unsafe> = v5;
v6 = virtualinvoke v0.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline newChannelPipeline()>();
v0.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline pipeline> = v6;
return;
}
protected final int maxMessagesPerWrite()
{
io.netty.channel.ChannelConfig v1;
io.netty.channel.ChannelOption v4;
int v3, v6;
java.lang.Object v5;
io.netty.channel.AbstractChannel v0;
boolean v2;
v0 := @this: io.netty.channel.AbstractChannel;
v1 = virtualinvoke v0.<io.netty.channel.AbstractChannel: io.netty.channel.ChannelConfig config()>();
v2 = v1 instanceof io.netty.channel.DefaultChannelConfig;
if v2 == 0 goto label1;
v3 = virtualinvoke v1.<io.netty.channel.DefaultChannelConfig: int getMaxMessagesPerWrite()>();
return v3;
label1:
v4 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption MAX_MESSAGES_PER_WRITE>;
v5 = interfaceinvoke v1.<io.netty.channel.ChannelConfig: java.lang.Object getOption(io.netty.channel.ChannelOption)>(v4);
if v5 != null goto label2;
return 2147483647;
label2:
v6 = virtualinvoke v5.<java.lang.Integer: int intValue()>();
return v6;
}
public final io.netty.channel.ChannelId id()
{
io.netty.channel.ChannelId v1;
io.netty.channel.AbstractChannel v0;
v0 := @this: io.netty.channel.AbstractChannel;
v1 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.ChannelId id>;
return v1;
}
protected io.netty.channel.ChannelId newId()
{
io.netty.channel.DefaultChannelId v1;
io.netty.channel.AbstractChannel v0;
v0 := @this: io.netty.channel.AbstractChannel;
v1 = staticinvoke <io.netty.channel.DefaultChannelId: io.netty.channel.DefaultChannelId newInstance()>();
return v1;
}
protected io.netty.channel.DefaultChannelPipeline newChannelPipeline()
{
io.netty.channel.AbstractChannel v0;
io.netty.channel.DefaultChannelPipeline v1;
v0 := @this: io.netty.channel.AbstractChannel;
v1 = new io.netty.channel.DefaultChannelPipeline;
specialinvoke v1.<io.netty.channel.DefaultChannelPipeline: void <init>(io.netty.channel.Channel)>(v0);
return v1;
}
public boolean isWritable()
{
io.netty.channel.ChannelOutboundBuffer v2;
io.netty.channel.AbstractChannel v0;
io.netty.channel.Channel$Unsafe v1;
boolean v3, v4;
v0 := @this: io.netty.channel.AbstractChannel;
v1 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.Channel$Unsafe unsafe>;
v2 = interfaceinvoke v1.<io.netty.channel.Channel$Unsafe: io.netty.channel.ChannelOutboundBuffer outboundBuffer()>();
if v2 == null goto label1;
v3 = virtualinvoke v2.<io.netty.channel.ChannelOutboundBuffer: boolean isWritable()>();
if v3 == 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public long bytesBeforeUnwritable()
{
io.netty.channel.ChannelOutboundBuffer v2;
long v3;
io.netty.channel.AbstractChannel v0;
io.netty.channel.Channel$Unsafe v1;
v0 := @this: io.netty.channel.AbstractChannel;
v1 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.Channel$Unsafe unsafe>;
v2 = interfaceinvoke v1.<io.netty.channel.Channel$Unsafe: io.netty.channel.ChannelOutboundBuffer outboundBuffer()>();
if v2 == null goto label1;
v3 = virtualinvoke v2.<io.netty.channel.ChannelOutboundBuffer: long bytesBeforeUnwritable()>();
goto label2;
label1:
v3 = 0L;
label2:
return v3;
}
public long bytesBeforeWritable()
{
io.netty.channel.ChannelOutboundBuffer v2;
long v3;
io.netty.channel.AbstractChannel v0;
io.netty.channel.Channel$Unsafe v1;
v0 := @this: io.netty.channel.AbstractChannel;
v1 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.Channel$Unsafe unsafe>;
v2 = interfaceinvoke v1.<io.netty.channel.Channel$Unsafe: io.netty.channel.ChannelOutboundBuffer outboundBuffer()>();
if v2 == null goto label1;
v3 = virtualinvoke v2.<io.netty.channel.ChannelOutboundBuffer: long bytesBeforeWritable()>();
goto label2;
label1:
v3 = 9223372036854775807L;
label2:
return v3;
}
public io.netty.channel.Channel parent()
{
io.netty.channel.Channel v1;
io.netty.channel.AbstractChannel v0;
v0 := @this: io.netty.channel.AbstractChannel;
v1 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.Channel parent>;
return v1;
}
public io.netty.channel.ChannelPipeline pipeline()
{
io.netty.channel.AbstractChannel v0;
io.netty.channel.DefaultChannelPipeline v1;
v0 := @this: io.netty.channel.AbstractChannel;
v1 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline pipeline>;
return v1;
}
public io.netty.buffer.ByteBufAllocator alloc()
{
io.netty.channel.AbstractChannel v0;
io.netty.channel.ChannelConfig v1;
io.netty.buffer.ByteBufAllocator v2;
v0 := @this: io.netty.channel.AbstractChannel;
v1 = virtualinvoke v0.<io.netty.channel.AbstractChannel: io.netty.channel.ChannelConfig config()>();
v2 = interfaceinvoke v1.<io.netty.channel.ChannelConfig: io.netty.buffer.ByteBufAllocator getAllocator()>();
return v2;
}
public io.netty.channel.EventLoop eventLoop()
{
java.lang.IllegalStateException v2;
io.netty.channel.AbstractChannel v0;
io.netty.channel.EventLoop v1;
v0 := @this: io.netty.channel.AbstractChannel;
v1 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.EventLoop eventLoop>;
if v1 != null goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("channel not registered to an event loop");
throw v2;
label1:
return v1;
}
public java.net.SocketAddress localAddress()
{
java.lang.Throwable v5;
java.net.SocketAddress v1, v3;
java.lang.Error v4;
io.netty.channel.AbstractChannel v0;
io.netty.channel.Channel$Unsafe v2;
v0 := @this: io.netty.channel.AbstractChannel;
v1 = v0.<io.netty.channel.AbstractChannel: java.net.SocketAddress localAddress>;
if v1 != null goto label5;
label1:
v2 = virtualinvoke v0.<io.netty.channel.AbstractChannel: io.netty.channel.Channel$Unsafe unsafe()>();
v3 = interfaceinvoke v2.<io.netty.channel.Channel$Unsafe: java.net.SocketAddress localAddress()>();
v1 = v3;
v0.<io.netty.channel.AbstractChannel: java.net.SocketAddress localAddress> = v3;
label2:
goto label5;
label3:
v4 := @caughtexception;
throw v4;
label4:
v5 := @caughtexception;
return null;
label5:
return v1;
catch java.lang.Error from label1 to label2 with label3;
catch java.lang.Throwable from label1 to label2 with label4;
}
protected void invalidateLocalAddress()
{
io.netty.channel.AbstractChannel v0;
v0 := @this: io.netty.channel.AbstractChannel;
v0.<io.netty.channel.AbstractChannel: java.net.SocketAddress localAddress> = null;
return;
}
public java.net.SocketAddress remoteAddress()
{
java.lang.Throwable v5;
java.net.SocketAddress v1, v3;
java.lang.Error v4;
io.netty.channel.AbstractChannel v0;
io.netty.channel.Channel$Unsafe v2;
v0 := @this: io.netty.channel.AbstractChannel;
v1 = v0.<io.netty.channel.AbstractChannel: java.net.SocketAddress remoteAddress>;
if v1 != null goto label5;
label1:
v2 = virtualinvoke v0.<io.netty.channel.AbstractChannel: io.netty.channel.Channel$Unsafe unsafe()>();
v3 = interfaceinvoke v2.<io.netty.channel.Channel$Unsafe: java.net.SocketAddress remoteAddress()>();
v1 = v3;
v0.<io.netty.channel.AbstractChannel: java.net.SocketAddress remoteAddress> = v3;
label2:
goto label5;
label3:
v4 := @caughtexception;
throw v4;
label4:
v5 := @caughtexception;
return null;
label5:
return v1;
catch java.lang.Error from label1 to label2 with label3;
catch java.lang.Throwable from label1 to label2 with label4;
}
protected void invalidateRemoteAddress()
{
io.netty.channel.AbstractChannel v0;
v0 := @this: io.netty.channel.AbstractChannel;
v0.<io.netty.channel.AbstractChannel: java.net.SocketAddress remoteAddress> = null;
return;
}
public boolean isRegistered()
{
io.netty.channel.AbstractChannel v0;
boolean v1;
v0 := @this: io.netty.channel.AbstractChannel;
v1 = v0.<io.netty.channel.AbstractChannel: boolean registered>;
return v1;
}
public io.netty.channel.ChannelFuture bind(java.net.SocketAddress)
{
java.net.SocketAddress v1;
io.netty.channel.AbstractChannel v0;
io.netty.channel.DefaultChannelPipeline v2;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.channel.AbstractChannel;
v1 := @parameter0: java.net.SocketAddress;
v2 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline pipeline>;
v3 = virtualinvoke v2.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelFuture bind(java.net.SocketAddress)>(v1);
return v3;
}
public io.netty.channel.ChannelFuture connect(java.net.SocketAddress)
{
java.net.SocketAddress v1;
io.netty.channel.AbstractChannel v0;
io.netty.channel.DefaultChannelPipeline v2;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.channel.AbstractChannel;
v1 := @parameter0: java.net.SocketAddress;
v2 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline pipeline>;
v3 = virtualinvoke v2.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelFuture connect(java.net.SocketAddress)>(v1);
return v3;
}
public io.netty.channel.ChannelFuture connect(java.net.SocketAddress, java.net.SocketAddress)
{
java.net.SocketAddress v1, v2;
io.netty.channel.AbstractChannel v0;
io.netty.channel.DefaultChannelPipeline v3;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.channel.AbstractChannel;
v1 := @parameter0: java.net.SocketAddress;
v2 := @parameter1: java.net.SocketAddress;
v3 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline pipeline>;
v4 = virtualinvoke v3.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)>(v1, v2);
return v4;
}
public io.netty.channel.ChannelFuture disconnect()
{
io.netty.channel.AbstractChannel v0;
io.netty.channel.DefaultChannelPipeline v1;
io.netty.channel.ChannelFuture v2;
v0 := @this: io.netty.channel.AbstractChannel;
v1 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline pipeline>;
v2 = virtualinvoke v1.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelFuture disconnect()>();
return v2;
}
public io.netty.channel.ChannelFuture close()
{
io.netty.channel.AbstractChannel v0;
io.netty.channel.DefaultChannelPipeline v1;
io.netty.channel.ChannelFuture v2;
v0 := @this: io.netty.channel.AbstractChannel;
v1 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline pipeline>;
v2 = virtualinvoke v1.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelFuture close()>();
return v2;
}
public io.netty.channel.ChannelFuture deregister()
{
io.netty.channel.AbstractChannel v0;
io.netty.channel.DefaultChannelPipeline v1;
io.netty.channel.ChannelFuture v2;
v0 := @this: io.netty.channel.AbstractChannel;
v1 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline pipeline>;
v2 = virtualinvoke v1.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelFuture deregister()>();
return v2;
}
public io.netty.channel.Channel flush()
{
io.netty.channel.AbstractChannel v0;
io.netty.channel.DefaultChannelPipeline v1;
v0 := @this: io.netty.channel.AbstractChannel;
v1 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline pipeline>;
virtualinvoke v1.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelPipeline flush()>();
return v0;
}
public io.netty.channel.ChannelFuture bind(java.net.SocketAddress, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v2;
java.net.SocketAddress v1;
io.netty.channel.AbstractChannel v0;
io.netty.channel.DefaultChannelPipeline v3;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.channel.AbstractChannel;
v1 := @parameter0: java.net.SocketAddress;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline pipeline>;
v4 = virtualinvoke v3.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelFuture bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)>(v1, v2);
return v4;
}
public io.netty.channel.ChannelFuture connect(java.net.SocketAddress, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v2;
java.net.SocketAddress v1;
io.netty.channel.AbstractChannel v0;
io.netty.channel.DefaultChannelPipeline v3;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.channel.AbstractChannel;
v1 := @parameter0: java.net.SocketAddress;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline pipeline>;
v4 = virtualinvoke v3.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelFuture connect(java.net.SocketAddress,io.netty.channel.ChannelPromise)>(v1, v2);
return v4;
}
public io.netty.channel.ChannelFuture connect(java.net.SocketAddress, java.net.SocketAddress, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v3;
java.net.SocketAddress v1, v2;
io.netty.channel.AbstractChannel v0;
io.netty.channel.DefaultChannelPipeline v4;
io.netty.channel.ChannelFuture v5;
v0 := @this: io.netty.channel.AbstractChannel;
v1 := @parameter0: java.net.SocketAddress;
v2 := @parameter1: java.net.SocketAddress;
v3 := @parameter2: io.netty.channel.ChannelPromise;
v4 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline pipeline>;
v5 = virtualinvoke v4.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)>(v1, v2, v3);
return v5;
}
public io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v1;
io.netty.channel.AbstractChannel v0;
io.netty.channel.DefaultChannelPipeline v2;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.channel.AbstractChannel;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline pipeline>;
v3 = virtualinvoke v2.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)>(v1);
return v3;
}
public io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v1;
io.netty.channel.AbstractChannel v0;
io.netty.channel.DefaultChannelPipeline v2;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.channel.AbstractChannel;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline pipeline>;
v3 = virtualinvoke v2.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)>(v1);
return v3;
}
public io.netty.channel.ChannelFuture deregister(io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v1;
io.netty.channel.AbstractChannel v0;
io.netty.channel.DefaultChannelPipeline v2;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.channel.AbstractChannel;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline pipeline>;
v3 = virtualinvoke v2.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelFuture deregister(io.netty.channel.ChannelPromise)>(v1);
return v3;
}
public io.netty.channel.Channel read()
{
io.netty.channel.AbstractChannel v0;
io.netty.channel.DefaultChannelPipeline v1;
v0 := @this: io.netty.channel.AbstractChannel;
v1 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline pipeline>;
virtualinvoke v1.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelPipeline read()>();
return v0;
}
public io.netty.channel.ChannelFuture write(java.lang.Object)
{
java.lang.Object v1;
io.netty.channel.AbstractChannel v0;
io.netty.channel.DefaultChannelPipeline v2;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.channel.AbstractChannel;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline pipeline>;
v3 = virtualinvoke v2.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelFuture write(java.lang.Object)>(v1);
return v3;
}
public io.netty.channel.ChannelFuture write(java.lang.Object, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v2;
java.lang.Object v1;
io.netty.channel.AbstractChannel v0;
io.netty.channel.DefaultChannelPipeline v3;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.channel.AbstractChannel;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline pipeline>;
v4 = virtualinvoke v3.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)>(v1, v2);
return v4;
}
public io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object)
{
java.lang.Object v1;
io.netty.channel.AbstractChannel v0;
io.netty.channel.DefaultChannelPipeline v2;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.channel.AbstractChannel;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline pipeline>;
v3 = virtualinvoke v2.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object)>(v1);
return v3;
}
public io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v2;
java.lang.Object v1;
io.netty.channel.AbstractChannel v0;
io.netty.channel.DefaultChannelPipeline v3;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.channel.AbstractChannel;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline pipeline>;
v4 = virtualinvoke v3.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object,io.netty.channel.ChannelPromise)>(v1, v2);
return v4;
}
public io.netty.channel.ChannelPromise newPromise()
{
io.netty.channel.AbstractChannel v0;
io.netty.channel.ChannelPromise v2;
io.netty.channel.DefaultChannelPipeline v1;
v0 := @this: io.netty.channel.AbstractChannel;
v1 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline pipeline>;
v2 = virtualinvoke v1.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelPromise newPromise()>();
return v2;
}
public io.netty.channel.ChannelProgressivePromise newProgressivePromise()
{
io.netty.channel.ChannelProgressivePromise v2;
io.netty.channel.AbstractChannel v0;
io.netty.channel.DefaultChannelPipeline v1;
v0 := @this: io.netty.channel.AbstractChannel;
v1 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline pipeline>;
v2 = virtualinvoke v1.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelProgressivePromise newProgressivePromise()>();
return v2;
}
public io.netty.channel.ChannelFuture newSucceededFuture()
{
io.netty.channel.AbstractChannel v0;
io.netty.channel.DefaultChannelPipeline v1;
io.netty.channel.ChannelFuture v2;
v0 := @this: io.netty.channel.AbstractChannel;
v1 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline pipeline>;
v2 = virtualinvoke v1.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelFuture newSucceededFuture()>();
return v2;
}
public io.netty.channel.ChannelFuture newFailedFuture(java.lang.Throwable)
{
java.lang.Throwable v1;
io.netty.channel.AbstractChannel v0;
io.netty.channel.DefaultChannelPipeline v2;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.channel.AbstractChannel;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline pipeline>;
v3 = virtualinvoke v2.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelFuture newFailedFuture(java.lang.Throwable)>(v1);
return v3;
}
public io.netty.channel.ChannelFuture closeFuture()
{
io.netty.channel.AbstractChannel$CloseFuture v1;
io.netty.channel.AbstractChannel v0;
v0 := @this: io.netty.channel.AbstractChannel;
v1 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.AbstractChannel$CloseFuture closeFuture>;
return v1;
}
public io.netty.channel.Channel$Unsafe unsafe()
{
io.netty.channel.AbstractChannel v0;
io.netty.channel.Channel$Unsafe v1;
v0 := @this: io.netty.channel.AbstractChannel;
v1 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.Channel$Unsafe unsafe>;
return v1;
}
protected abstract io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe();
public final int hashCode()
{
int v2;
io.netty.channel.ChannelId v1;
io.netty.channel.AbstractChannel v0;
v0 := @this: io.netty.channel.AbstractChannel;
v1 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.ChannelId id>;
v2 = virtualinvoke v1.<java.lang.Object: int hashCode()>();
return v2;
}
public final boolean equals(java.lang.Object)
{
java.lang.Object v1;
io.netty.channel.AbstractChannel v0;
boolean v2;
v0 := @this: io.netty.channel.AbstractChannel;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public final int compareTo(io.netty.channel.Channel)
{
io.netty.channel.Channel v1;
int v4;
io.netty.channel.ChannelId v2, v3;
io.netty.channel.AbstractChannel v0;
v0 := @this: io.netty.channel.AbstractChannel;
v1 := @parameter0: io.netty.channel.Channel;
if v0 != v1 goto label1;
return 0;
label1:
v2 = virtualinvoke v0.<io.netty.channel.AbstractChannel: io.netty.channel.ChannelId id()>();
v3 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelId id()>();
v4 = interfaceinvoke v2.<io.netty.channel.ChannelId: int compareTo(java.lang.Object)>(v3);
return v4;
}
public java.lang.String toString()
{
java.net.SocketAddress v5, v6;
io.netty.channel.ChannelId v11, v14, v7;
io.netty.channel.AbstractChannel v0;
java.lang.String v10, v12, v13, v15, v16, v17, v3, v4, v8, v9;
boolean v1, v2;
java.lang.StringBuilder v18, v19, v20;
v0 := @this: io.netty.channel.AbstractChannel;
v1 = virtualinvoke v0.<io.netty.channel.AbstractChannel: boolean isActive()>();
v2 = v0.<io.netty.channel.AbstractChannel: boolean strValActive>;
if v2 != v1 goto label1;
v3 = v0.<io.netty.channel.AbstractChannel: java.lang.String strVal>;
if v3 == null goto label1;
v4 = v0.<io.netty.channel.AbstractChannel: java.lang.String strVal>;
return v4;
label1:
v5 = virtualinvoke v0.<io.netty.channel.AbstractChannel: java.net.SocketAddress remoteAddress()>();
v6 = virtualinvoke v0.<io.netty.channel.AbstractChannel: java.net.SocketAddress localAddress()>();
if v5 == null goto label4;
specialinvoke v20.<java.lang.StringBuilder: void <init>(int)>(96);
v7 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.ChannelId id>;
v8 = interfaceinvoke v7.<io.netty.channel.ChannelId: java.lang.String asShortText()>();
if v1 == 0 goto label2;
v9 = " - ";
goto label3;
label2:
v9 = " ! ";
label3:
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.net.SocketAddress,java.lang.String,java.net.SocketAddress)>(v8, v6, v9, v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("[id: 0x\u0001, L:\u0001\u0001R:\u0001]");
v0.<io.netty.channel.AbstractChannel: java.lang.String strVal> = v10;
goto label6;
label4:
if v6 == null goto label5;
specialinvoke v19.<java.lang.StringBuilder: void <init>(int)>(64);
v11 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.ChannelId id>;
v12 = interfaceinvoke v11.<io.netty.channel.ChannelId: java.lang.String asShortText()>();
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.net.SocketAddress)>(v12, v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("[id: 0x\u0001, L:\u0001]");
v0.<io.netty.channel.AbstractChannel: java.lang.String strVal> = v13;
goto label6;
label5:
specialinvoke v18.<java.lang.StringBuilder: void <init>(int)>(16);
v14 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.ChannelId id>;
v15 = interfaceinvoke v14.<io.netty.channel.ChannelId: java.lang.String asShortText()>();
v16 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v15) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("[id: 0x\u0001]");
v0.<io.netty.channel.AbstractChannel: java.lang.String strVal> = v16;
label6:
v0.<io.netty.channel.AbstractChannel: boolean strValActive> = v1;
v17 = v0.<io.netty.channel.AbstractChannel: java.lang.String strVal>;
return v17;
}
public final io.netty.channel.ChannelPromise voidPromise()
{
io.netty.channel.AbstractChannel v0;
io.netty.channel.ChannelPromise v2;
io.netty.channel.DefaultChannelPipeline v1;
v0 := @this: io.netty.channel.AbstractChannel;
v1 = v0.<io.netty.channel.AbstractChannel: io.netty.channel.DefaultChannelPipeline pipeline>;
v2 = virtualinvoke v1.<io.netty.channel.DefaultChannelPipeline: io.netty.channel.ChannelPromise voidPromise()>();
return v2;
}
protected abstract boolean isCompatible(io.netty.channel.EventLoop);
protected abstract java.net.SocketAddress localAddress0();
protected abstract java.net.SocketAddress remoteAddress0();
protected void doRegister() throws java.lang.Exception
{
io.netty.channel.AbstractChannel v0;
v0 := @this: io.netty.channel.AbstractChannel;
return;
}
protected abstract void doBind(java.net.SocketAddress) throws java.lang.Exception;
protected abstract void doDisconnect() throws java.lang.Exception;
protected abstract void doClose() throws java.lang.Exception;
protected void doShutdownOutput() throws java.lang.Exception
{
io.netty.channel.AbstractChannel v0;
v0 := @this: io.netty.channel.AbstractChannel;
virtualinvoke v0.<io.netty.channel.AbstractChannel: void doClose()>();
return;
}
protected void doDeregister() throws java.lang.Exception
{
io.netty.channel.AbstractChannel v0;
v0 := @this: io.netty.channel.AbstractChannel;
return;
}
protected abstract void doBeginRead() throws java.lang.Exception;
protected abstract void doWrite(io.netty.channel.ChannelOutboundBuffer) throws java.lang.Exception;
protected java.lang.Object filterOutboundMessage(java.lang.Object) throws java.lang.Exception
{
java.lang.Object v1;
io.netty.channel.AbstractChannel v0;
v0 := @this: io.netty.channel.AbstractChannel;
v1 := @parameter0: java.lang.Object;
return v1;
}
protected void validateFileRegion(io.netty.channel.DefaultFileRegion, long) throws java.io.IOException
{
long v2;
io.netty.channel.AbstractChannel v0;
io.netty.channel.DefaultFileRegion v1;
v0 := @this: io.netty.channel.AbstractChannel;
v1 := @parameter0: io.netty.channel.DefaultFileRegion;
v2 := @parameter1: long;
staticinvoke <io.netty.channel.DefaultFileRegion: void validate(io.netty.channel.DefaultFileRegion,long)>(v1, v2);
return;
}
static void <clinit>()
{
io.netty.util.internal.logging.InternalLogger v0;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/channel/AbstractChannel;");
<io.netty.channel.AbstractChannel: io.netty.util.internal.logging.InternalLogger logger> = v0;
return;
}
}