public final class io.netty.channel.ChannelFlushPromiseNotifier extends java.lang.Object
{
private long writeCounter;
private final java.util.Queue flushCheckpoints;
private final boolean tryNotify;
public void <init>(boolean)
{
io.netty.channel.ChannelFlushPromiseNotifier v0;
java.util.ArrayDeque v2;
boolean v1;
v0 := @this: io.netty.channel.ChannelFlushPromiseNotifier;
v1 := @parameter0: boolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.ArrayDeque;
specialinvoke v2.<java.util.ArrayDeque: void <init>()>();
v0.<io.netty.channel.ChannelFlushPromiseNotifier: java.util.Queue flushCheckpoints> = v2;
v0.<io.netty.channel.ChannelFlushPromiseNotifier: boolean tryNotify> = v1;
return;
}
public void <init>()
{
io.netty.channel.ChannelFlushPromiseNotifier v0;
v0 := @this: io.netty.channel.ChannelFlushPromiseNotifier;
specialinvoke v0.<io.netty.channel.ChannelFlushPromiseNotifier: void <init>(boolean)>(0);
return;
}
public io.netty.channel.ChannelFlushPromiseNotifier add(io.netty.channel.ChannelPromise, int)
{
io.netty.channel.ChannelFlushPromiseNotifier v0, v3;
io.netty.channel.ChannelPromise v1;
int v2;
v0 := @this: io.netty.channel.ChannelFlushPromiseNotifier;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 := @parameter1: int;
v3 = virtualinvoke v0.<io.netty.channel.ChannelFlushPromiseNotifier: io.netty.channel.ChannelFlushPromiseNotifier add(io.netty.channel.ChannelPromise,long)>(v1, v2);
return v3;
}
public io.netty.channel.ChannelFlushPromiseNotifier add(io.netty.channel.ChannelPromise, long)
{
io.netty.channel.ChannelFlushPromiseNotifier$DefaultFlushCheckpoint v8;
long v2, v3, v4;
io.netty.channel.ChannelFlushPromiseNotifier v0;
io.netty.channel.ChannelPromise v1;
java.util.Queue v6, v7;
boolean v5;
v0 := @this: io.netty.channel.ChannelFlushPromiseNotifier;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 := @parameter1: long;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "promise");
staticinvoke <io.netty.util.internal.ObjectUtil: long checkPositiveOrZero(long,java.lang.String)>(v2, "pendingDataSize");
v3 = v0.<io.netty.channel.ChannelFlushPromiseNotifier: long writeCounter>;
v4 = v3 + v2;
v5 = v1 instanceof io.netty.channel.ChannelFlushPromiseNotifier$FlushCheckpoint;
if v5 == 0 goto label1;
interfaceinvoke v1.<io.netty.channel.ChannelFlushPromiseNotifier$FlushCheckpoint: void flushCheckpoint(long)>(v4);
v6 = v0.<io.netty.channel.ChannelFlushPromiseNotifier: java.util.Queue flushCheckpoints>;
interfaceinvoke v6.<java.util.Queue: boolean add(java.lang.Object)>(v1);
goto label2;
label1:
v7 = v0.<io.netty.channel.ChannelFlushPromiseNotifier: java.util.Queue flushCheckpoints>;
v8 = new io.netty.channel.ChannelFlushPromiseNotifier$DefaultFlushCheckpoint;
specialinvoke v8.<io.netty.channel.ChannelFlushPromiseNotifier$DefaultFlushCheckpoint: void <init>(long,io.netty.channel.ChannelPromise)>(v4, v1);
interfaceinvoke v7.<java.util.Queue: boolean add(java.lang.Object)>(v8);
label2:
return v0;
}
public io.netty.channel.ChannelFlushPromiseNotifier increaseWriteCounter(long)
{
io.netty.channel.ChannelFlushPromiseNotifier v0;
long v1, v2, v3;
v0 := @this: io.netty.channel.ChannelFlushPromiseNotifier;
v1 := @parameter0: long;
staticinvoke <io.netty.util.internal.ObjectUtil: long checkPositiveOrZero(long,java.lang.String)>(v1, "delta");
v2 = v0.<io.netty.channel.ChannelFlushPromiseNotifier: long writeCounter>;
v3 = v2 + v1;
v0.<io.netty.channel.ChannelFlushPromiseNotifier: long writeCounter> = v3;
return v0;
}
public long writeCounter()
{
long v1;
io.netty.channel.ChannelFlushPromiseNotifier v0;
v0 := @this: io.netty.channel.ChannelFlushPromiseNotifier;
v1 = v0.<io.netty.channel.ChannelFlushPromiseNotifier: long writeCounter>;
return v1;
}
public io.netty.channel.ChannelFlushPromiseNotifier notifyPromises()
{
io.netty.channel.ChannelFlushPromiseNotifier v0;
v0 := @this: io.netty.channel.ChannelFlushPromiseNotifier;
specialinvoke v0.<io.netty.channel.ChannelFlushPromiseNotifier: void notifyPromises0(java.lang.Throwable)>(null);
return v0;
}
public io.netty.channel.ChannelFlushPromiseNotifier notifyFlushFutures()
{
io.netty.channel.ChannelFlushPromiseNotifier v0, v1;
v0 := @this: io.netty.channel.ChannelFlushPromiseNotifier;
v1 = virtualinvoke v0.<io.netty.channel.ChannelFlushPromiseNotifier: io.netty.channel.ChannelFlushPromiseNotifier notifyPromises()>();
return v1;
}
public io.netty.channel.ChannelFlushPromiseNotifier notifyPromises(java.lang.Throwable)
{
java.lang.Throwable v1;
io.netty.channel.ChannelFlushPromiseNotifier v0;
io.netty.channel.ChannelPromise v5, v6;
java.lang.Object v3;
java.util.Queue v2;
boolean v4;
v0 := @this: io.netty.channel.ChannelFlushPromiseNotifier;
v1 := @parameter0: java.lang.Throwable;
virtualinvoke v0.<io.netty.channel.ChannelFlushPromiseNotifier: io.netty.channel.ChannelFlushPromiseNotifier notifyPromises()>();
label1:
v2 = v0.<io.netty.channel.ChannelFlushPromiseNotifier: java.util.Queue flushCheckpoints>;
v3 = interfaceinvoke v2.<java.util.Queue: java.lang.Object poll()>();
if v3 == null goto label3;
v4 = v0.<io.netty.channel.ChannelFlushPromiseNotifier: boolean tryNotify>;
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<io.netty.channel.ChannelFlushPromiseNotifier$FlushCheckpoint: io.netty.channel.ChannelPromise promise()>();
interfaceinvoke v5.<io.netty.channel.ChannelPromise: boolean tryFailure(java.lang.Throwable)>(v1);
goto label1;
label2:
v6 = interfaceinvoke v3.<io.netty.channel.ChannelFlushPromiseNotifier$FlushCheckpoint: io.netty.channel.ChannelPromise promise()>();
interfaceinvoke v6.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v1);
goto label1;
label3:
return v0;
}
public io.netty.channel.ChannelFlushPromiseNotifier notifyFlushFutures(java.lang.Throwable)
{
java.lang.Throwable v1;
io.netty.channel.ChannelFlushPromiseNotifier v0, v2;
v0 := @this: io.netty.channel.ChannelFlushPromiseNotifier;
v1 := @parameter0: java.lang.Throwable;
v2 = virtualinvoke v0.<io.netty.channel.ChannelFlushPromiseNotifier: io.netty.channel.ChannelFlushPromiseNotifier notifyPromises(java.lang.Throwable)>(v1);
return v2;
}
public io.netty.channel.ChannelFlushPromiseNotifier notifyPromises(java.lang.Throwable, java.lang.Throwable)
{
java.lang.Throwable v1, v2;
io.netty.channel.ChannelFlushPromiseNotifier v0;
io.netty.channel.ChannelPromise v6, v7;
java.lang.Object v4;
java.util.Queue v3;
boolean v5;
v0 := @this: io.netty.channel.ChannelFlushPromiseNotifier;
v1 := @parameter0: java.lang.Throwable;
v2 := @parameter1: java.lang.Throwable;
specialinvoke v0.<io.netty.channel.ChannelFlushPromiseNotifier: void notifyPromises0(java.lang.Throwable)>(v1);
label1:
v3 = v0.<io.netty.channel.ChannelFlushPromiseNotifier: java.util.Queue flushCheckpoints>;
v4 = interfaceinvoke v3.<java.util.Queue: java.lang.Object poll()>();
if v4 == null goto label3;
v5 = v0.<io.netty.channel.ChannelFlushPromiseNotifier: boolean tryNotify>;
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<io.netty.channel.ChannelFlushPromiseNotifier$FlushCheckpoint: io.netty.channel.ChannelPromise promise()>();
interfaceinvoke v6.<io.netty.channel.ChannelPromise: boolean tryFailure(java.lang.Throwable)>(v2);
goto label1;
label2:
v7 = interfaceinvoke v4.<io.netty.channel.ChannelFlushPromiseNotifier$FlushCheckpoint: io.netty.channel.ChannelPromise promise()>();
interfaceinvoke v7.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v2);
goto label1;
label3:
return v0;
}
public io.netty.channel.ChannelFlushPromiseNotifier notifyFlushFutures(java.lang.Throwable, java.lang.Throwable)
{
java.lang.Throwable v1, v2;
io.netty.channel.ChannelFlushPromiseNotifier v0, v3;
v0 := @this: io.netty.channel.ChannelFlushPromiseNotifier;
v1 := @parameter0: java.lang.Throwable;
v2 := @parameter1: java.lang.Throwable;
v3 = virtualinvoke v0.<io.netty.channel.ChannelFlushPromiseNotifier: io.netty.channel.ChannelFlushPromiseNotifier notifyPromises(java.lang.Throwable,java.lang.Throwable)>(v1, v2);
return v3;
}
private void notifyPromises0(java.lang.Throwable)
{
java.lang.Throwable v1;
long v12, v13, v18, v24, v25, v4, v7;
byte v19, v8, v9;
io.netty.channel.ChannelPromise v15;
int v11;
boolean v16, v17, v22, v3;
java.util.Iterator v21;
io.netty.channel.ChannelFlushPromiseNotifier v0;
java.lang.Object v23, v6;
java.util.Queue v10, v14, v2, v20, v5;
v0 := @this: io.netty.channel.ChannelFlushPromiseNotifier;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.netty.channel.ChannelFlushPromiseNotifier: java.util.Queue flushCheckpoints>;
v3 = interfaceinvoke v2.<java.util.Queue: boolean isEmpty()>();
if v3 == 0 goto label01;
v0.<io.netty.channel.ChannelFlushPromiseNotifier: long writeCounter> = 0L;
return;
label01:
v4 = v0.<io.netty.channel.ChannelFlushPromiseNotifier: long writeCounter>;
label02:
v5 = v0.<io.netty.channel.ChannelFlushPromiseNotifier: java.util.Queue flushCheckpoints>;
v6 = interfaceinvoke v5.<java.util.Queue: java.lang.Object peek()>();
if v6 != null goto label03;
v0.<io.netty.channel.ChannelFlushPromiseNotifier: long writeCounter> = 0L;
goto label08;
label03:
v7 = interfaceinvoke v6.<io.netty.channel.ChannelFlushPromiseNotifier$FlushCheckpoint: long flushCheckpoint()>();
v8 = v7 cmp v4;
if v8 <= 0 goto label04;
v9 = v4 cmp 0L;
if v9 <= 0 goto label08;
v10 = v0.<io.netty.channel.ChannelFlushPromiseNotifier: java.util.Queue flushCheckpoints>;
v11 = interfaceinvoke v10.<java.util.Queue: int size()>();
if v11 != 1 goto label08;
v0.<io.netty.channel.ChannelFlushPromiseNotifier: long writeCounter> = 0L;
v12 = interfaceinvoke v6.<io.netty.channel.ChannelFlushPromiseNotifier$FlushCheckpoint: long flushCheckpoint()>();
v13 = v12 - v4;
interfaceinvoke v6.<io.netty.channel.ChannelFlushPromiseNotifier$FlushCheckpoint: void flushCheckpoint(long)>(v13);
goto label08;
label04:
v14 = v0.<io.netty.channel.ChannelFlushPromiseNotifier: java.util.Queue flushCheckpoints>;
interfaceinvoke v14.<java.util.Queue: java.lang.Object remove()>();
v15 = interfaceinvoke v6.<io.netty.channel.ChannelFlushPromiseNotifier$FlushCheckpoint: io.netty.channel.ChannelPromise promise()>();
if v1 != null goto label06;
v16 = v0.<io.netty.channel.ChannelFlushPromiseNotifier: boolean tryNotify>;
if v16 == 0 goto label05;
interfaceinvoke v15.<io.netty.channel.ChannelPromise: boolean trySuccess()>();
goto label02;
label05:
interfaceinvoke v15.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setSuccess()>();
goto label02;
label06:
v17 = v0.<io.netty.channel.ChannelFlushPromiseNotifier: boolean tryNotify>;
if v17 == 0 goto label07;
interfaceinvoke v15.<io.netty.channel.ChannelPromise: boolean tryFailure(java.lang.Throwable)>(v1);
goto label02;
label07:
interfaceinvoke v15.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v1);
goto label02;
label08:
v18 = v0.<io.netty.channel.ChannelFlushPromiseNotifier: long writeCounter>;
v19 = v18 cmp 549755813888L;
if v19 < 0 goto label10;
v0.<io.netty.channel.ChannelFlushPromiseNotifier: long writeCounter> = 0L;
v20 = v0.<io.netty.channel.ChannelFlushPromiseNotifier: java.util.Queue flushCheckpoints>;
v21 = interfaceinvoke v20.<java.util.Queue: java.util.Iterator iterator()>();
label09:
v22 = interfaceinvoke v21.<java.util.Iterator: boolean hasNext()>();
if v22 == 0 goto label10;
v23 = interfaceinvoke v21.<java.util.Iterator: java.lang.Object next()>();
v24 = interfaceinvoke v23.<io.netty.channel.ChannelFlushPromiseNotifier$FlushCheckpoint: long flushCheckpoint()>();
v25 = v24 - v18;
interfaceinvoke v23.<io.netty.channel.ChannelFlushPromiseNotifier$FlushCheckpoint: void flushCheckpoint(long)>(v25);
goto label09;
label10:
return;
}
}