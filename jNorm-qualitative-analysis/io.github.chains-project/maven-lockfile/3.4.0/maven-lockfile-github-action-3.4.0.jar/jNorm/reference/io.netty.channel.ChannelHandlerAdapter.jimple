public abstract class io.netty.channel.ChannelHandlerAdapter extends java.lang.Object implements io.netty.channel.ChannelHandler
{
boolean added;
public void <init>()
{
io.netty.channel.ChannelHandlerAdapter v0;
v0 := @this: io.netty.channel.ChannelHandlerAdapter;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
protected void ensureNotSharable()
{
java.lang.IllegalStateException v2;
io.netty.channel.ChannelHandlerAdapter v0;
java.lang.Class v3;
java.lang.String v4, v5;
boolean v1;
v0 := @this: io.netty.channel.ChannelHandlerAdapter;
v1 = virtualinvoke v0.<io.netty.channel.ChannelHandlerAdapter: boolean isSharable()>();
if v1 == 0 goto label1;
v2 = new java.lang.IllegalStateException;
v3 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v4 = virtualinvoke v3.<java.lang.Class: java.lang.String getName()>();
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("ChannelHandler \u0001 is not allowed to be shared");
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v5);
throw v2;
label1:
return;
}
public boolean isSharable()
{
io.netty.channel.ChannelHandlerAdapter v0;
java.util.Map v3;
io.netty.util.internal.InternalThreadLocalMap v2;
java.lang.Class v1;
java.lang.Object v4;
boolean v5, v6;
v0 := @this: io.netty.channel.ChannelHandlerAdapter;
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v2 = staticinvoke <io.netty.util.internal.InternalThreadLocalMap: io.netty.util.internal.InternalThreadLocalMap get()>();
v3 = virtualinvoke v2.<io.netty.util.internal.InternalThreadLocalMap: java.util.Map handlerSharableCache()>();
v4 = interfaceinvoke v3.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v4 != null goto label1;
v5 = virtualinvoke v1.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>(class "Lio/netty/channel/ChannelHandler$Sharable;");
v4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v5);
interfaceinvoke v3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v4);
label1:
v6 = virtualinvoke v4.<java.lang.Boolean: boolean booleanValue()>();
return v6;
}
public void handlerAdded(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelHandlerAdapter v0;
v0 := @this: io.netty.channel.ChannelHandlerAdapter;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
return;
}
public void handlerRemoved(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelHandlerAdapter v0;
v0 := @this: io.netty.channel.ChannelHandlerAdapter;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
return;
}
public void exceptionCaught(io.netty.channel.ChannelHandlerContext, java.lang.Throwable) throws java.lang.Exception
{
java.lang.Throwable v2;
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelHandlerAdapter v0;
v0 := @this: io.netty.channel.ChannelHandlerAdapter;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Throwable;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireExceptionCaught(java.lang.Throwable)>(v2);
return;
}
}