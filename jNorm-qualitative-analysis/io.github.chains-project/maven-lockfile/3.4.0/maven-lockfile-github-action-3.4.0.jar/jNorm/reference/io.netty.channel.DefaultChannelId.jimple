public final class io.netty.channel.DefaultChannelId extends java.lang.Object implements io.netty.channel.ChannelId
{
private static final long serialVersionUID;
private static final io.netty.util.internal.logging.InternalLogger logger;
private static final byte[] MACHINE_ID;
private static final int PROCESS_ID_LEN;
private static final int PROCESS_ID;
private static final int SEQUENCE_LEN;
private static final int TIMESTAMP_LEN;
private static final int RANDOM_LEN;
private static final java.util.concurrent.atomic.AtomicInteger nextSequence;
private final byte[] data;
private final int hashCode;
private transient java.lang.String shortValue;
private transient java.lang.String longValue;
static final boolean $assertionsDisabled;
public static io.netty.channel.DefaultChannelId newInstance()
{
io.netty.channel.DefaultChannelId v0;
v0 = new io.netty.channel.DefaultChannelId;
specialinvoke v0.<io.netty.channel.DefaultChannelId: void <init>()>();
return v0;
}
static int processHandlePid(java.lang.ClassLoader)
{
java.lang.IllegalStateException v17;
java.lang.Object[] v5, v9;
long v13, v15;
byte v14, v16;
int v1, v19;
java.lang.String v18;
java.lang.reflect.Method v4, v8;
java.lang.Class[] v3, v7;
java.lang.Exception v11;
io.netty.util.internal.logging.InternalLogger v12;
java.lang.Class v2;
java.lang.Object v10, v6;
java.lang.ClassLoader v0;
v0 := @parameter0: java.lang.ClassLoader;
v1 = staticinvoke <io.netty.util.internal.PlatformDependent: int javaVersion()>();
if v1 < 9 goto label7;
label1:
v2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("java.lang.ProcessHandle", 1, v0);
v3 = newarray (java.lang.Class)[0];
v4 = virtualinvoke v2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("current", v3);
v5 = newarray (java.lang.Object)[0];
v6 = virtualinvoke v4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, v5);
v7 = newarray (java.lang.Class)[0];
v8 = virtualinvoke v2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("pid", v7);
v9 = newarray (java.lang.Object)[0];
v10 = virtualinvoke v8.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v6, v9);
label2:
goto label4;
label3:
v11 := @caughtexception;
v12 = <io.netty.channel.DefaultChannelId: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v12.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Throwable)>("Could not invoke ProcessHandle.current().pid();", v11);
return -1;
label4:
v13 = virtualinvoke v10.<java.lang.Long: long longValue()>();
v14 = v13 cmp 2147483647L;
if v14 > 0 goto label5;
v15 = virtualinvoke v10.<java.lang.Long: long longValue()>();
v16 = v15 cmp -2147483648L;
if v16 >= 0 goto label6;
label5:
v17 = new java.lang.IllegalStateException;
v18 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Long)>(v10) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Current process ID exceeds int range: \u0001");
specialinvoke v17.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v18);
throw v17;
label6:
v19 = virtualinvoke v10.<java.lang.Long: int intValue()>();
return v19;
label7:
return -1;
catch java.lang.Exception from label1 to label2 with label3;
}
static int jmxPid(java.lang.ClassLoader)
{
java.lang.Throwable v11, v18;
java.lang.Object[] v16, v5, v9;
java.util.Random v24;
java.lang.Integer v26;
int v20, v21, v23;
java.lang.reflect.Method v15, v4, v8;
java.lang.Class[] v14, v3, v7;
java.lang.NumberFormatException v22;
io.netty.util.internal.logging.InternalLogger v12, v19, v25;
java.lang.Class v1, v13, v2;
java.lang.Object v10, v17, v6;
java.lang.ClassLoader v0;
v0 := @parameter0: java.lang.ClassLoader;
label01:
v1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("java.lang.management.ManagementFactory", 1, v0);
v2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("java.lang.management.RuntimeMXBean", 1, v0);
v3 = <io.netty.util.internal.EmptyArrays: java.lang.Class[] EMPTY_CLASSES>;
v4 = virtualinvoke v1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getRuntimeMXBean", v3);
v5 = <io.netty.util.internal.EmptyArrays: java.lang.Object[] EMPTY_OBJECTS>;
v6 = virtualinvoke v4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, v5);
v7 = <io.netty.util.internal.EmptyArrays: java.lang.Class[] EMPTY_CLASSES>;
v8 = virtualinvoke v2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getName", v7);
v9 = <io.netty.util.internal.EmptyArrays: java.lang.Object[] EMPTY_OBJECTS>;
v10 = virtualinvoke v8.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v6, v9);
label02:
goto label07;
label03:
v11 := @caughtexception;
v12 = <io.netty.channel.DefaultChannelId: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v12.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Throwable)>("Could not invoke ManagementFactory.getRuntimeMXBean().getName(); Android?", v11);
label04:
v13 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("android.os.Process", 1, v0);
v14 = <io.netty.util.internal.EmptyArrays: java.lang.Class[] EMPTY_CLASSES>;
v15 = virtualinvoke v13.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("myPid", v14);
v16 = <io.netty.util.internal.EmptyArrays: java.lang.Object[] EMPTY_OBJECTS>;
v17 = virtualinvoke v15.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, v16);
v10 = virtualinvoke v17.<java.lang.Object: java.lang.String toString()>();
label05:
goto label07;
label06:
v18 := @caughtexception;
v19 = <io.netty.channel.DefaultChannelId: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v19.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Throwable)>("Could not invoke Process.myPid(); not Android?", v18);
v10 = "";
label07:
v20 = virtualinvoke v10.<java.lang.String: int indexOf(int)>(64);
if v20 < 0 goto label08;
v10 = virtualinvoke v10.<java.lang.String: java.lang.String substring(int,int)>(0, v20);
label08:
v21 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v10);
label09:
goto label11;
label10:
v22 := @caughtexception;
v23 = (int) -1;
v21 = v23;
label11:
if v21 >= 0 goto label12;
v24 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.Random threadLocalRandom()>();
v21 = virtualinvoke v24.<java.util.Random: int nextInt()>();
v25 = <io.netty.channel.DefaultChannelId: io.netty.util.internal.logging.InternalLogger logger>;
v26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v21);
interfaceinvoke v25.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Failed to find the current process ID from \'{}\'; using a random value: {}", v10, v26);
label12:
return v21;
catch java.lang.Throwable from label01 to label02 with label03;
catch java.lang.Throwable from label04 to label05 with label06;
catch java.lang.NumberFormatException from label08 to label09 with label10;
}
static int defaultProcessId()
{
int v1, v2, v3;
java.lang.ClassLoader v0;
v0 = staticinvoke <io.netty.util.internal.PlatformDependent: java.lang.ClassLoader getClassLoader(java.lang.Class)>(class "Lio/netty/channel/DefaultChannelId;");
v1 = staticinvoke <io.netty.channel.DefaultChannelId: int processHandlePid(java.lang.ClassLoader)>(v0);
v2 = (int) -1;
if v1 == v2 goto label1;
return v1;
label1:
v3 = staticinvoke <io.netty.channel.DefaultChannelId: int jmxPid(java.lang.ClassLoader)>(v0);
return v3;
}
private void <init>()
{
byte[] v1, v10, v12, v29, v32, v7, v8, v9;
java.util.Random v25;
java.util.concurrent.atomic.AtomicInteger v17;
boolean v28;
io.netty.channel.DefaultChannelId v0;
long v20, v21, v22, v23;
java.lang.AssertionError v31;
int v11, v13, v14, v15, v16, v18, v19, v2, v24, v26, v27, v3, v30, v33, v4, v5, v6;
v0 := @this: io.netty.channel.DefaultChannelId;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = <io.netty.channel.DefaultChannelId: byte[] MACHINE_ID>;
v2 = lengthof v1;
v3 = v2 + 4;
v4 = v3 + 4;
v5 = v4 + 8;
v6 = v5 + 4;
v7 = newarray (byte)[v6];
v0.<io.netty.channel.DefaultChannelId: byte[] data> = v7;
v8 = <io.netty.channel.DefaultChannelId: byte[] MACHINE_ID>;
v9 = v0.<io.netty.channel.DefaultChannelId: byte[] data>;
v10 = <io.netty.channel.DefaultChannelId: byte[] MACHINE_ID>;
v11 = lengthof v10;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v8, 0, v9, 0, v11);
v12 = <io.netty.channel.DefaultChannelId: byte[] MACHINE_ID>;
v13 = lengthof v12;
v14 = 0 + v13;
v15 = <io.netty.channel.DefaultChannelId: int PROCESS_ID>;
v16 = specialinvoke v0.<io.netty.channel.DefaultChannelId: int writeInt(int,int)>(v14, v15);
v17 = <io.netty.channel.DefaultChannelId: java.util.concurrent.atomic.AtomicInteger nextSequence>;
v18 = virtualinvoke v17.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
v19 = specialinvoke v0.<io.netty.channel.DefaultChannelId: int writeInt(int,int)>(v16, v18);
v20 = staticinvoke <java.lang.System: long nanoTime()>();
v21 = staticinvoke <java.lang.Long: long reverse(long)>(v20);
v22 = staticinvoke <java.lang.System: long currentTimeMillis()>();
v23 = v21 ^ v22;
v24 = specialinvoke v0.<io.netty.channel.DefaultChannelId: int writeLong(int,long)>(v19, v23);
v25 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.Random threadLocalRandom()>();
v26 = virtualinvoke v25.<java.util.Random: int nextInt()>();
v27 = specialinvoke v0.<io.netty.channel.DefaultChannelId: int writeInt(int,int)>(v24, v26);
v28 = <io.netty.channel.DefaultChannelId: boolean $assertionsDisabled>;
if v28 != 0 goto label1;
v29 = v0.<io.netty.channel.DefaultChannelId: byte[] data>;
v30 = lengthof v29;
if v27 == v30 goto label1;
v31 = new java.lang.AssertionError;
specialinvoke v31.<java.lang.AssertionError: void <init>()>();
throw v31;
label1:
v32 = v0.<io.netty.channel.DefaultChannelId: byte[] data>;
v33 = staticinvoke <java.util.Arrays: int hashCode(byte[])>(v32);
v0.<io.netty.channel.DefaultChannelId: int hashCode> = v33;
return;
}
private int writeInt(int, int)
{
byte[] v12, v3, v6, v9;
io.netty.channel.DefaultChannelId v0;
int v1, v10, v11, v13, v2, v4, v5, v7, v8;
v0 := @this: io.netty.channel.DefaultChannelId;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v0.<io.netty.channel.DefaultChannelId: byte[] data>;
v4 = v1 + 1;
v5 = v2 >>> 24;
v3[v1] = v5;
v6 = v0.<io.netty.channel.DefaultChannelId: byte[] data>;
v7 = v4 + 1;
v8 = v2 >>> 16;
v6[v4] = v8;
v9 = v0.<io.netty.channel.DefaultChannelId: byte[] data>;
v10 = v7 + 1;
v11 = v2 >>> 8;
v9[v7] = v11;
v12 = v0.<io.netty.channel.DefaultChannelId: byte[] data>;
v13 = v10 + 1;
v12[v10] = v2;
return v13;
}
private int writeLong(int, long)
{
byte[] v11, v13, v15, v17, v3, v5, v7, v9;
long v2;
int v1, v10, v12, v14, v16, v18, v19, v20, v21, v22, v23, v24, v25, v26, v4, v6, v8;
io.netty.channel.DefaultChannelId v0;
v0 := @this: io.netty.channel.DefaultChannelId;
v1 := @parameter0: int;
v2 := @parameter1: long;
v3 = v0.<io.netty.channel.DefaultChannelId: byte[] data>;
v4 = v1 + 1;
v3[v1] = v19;
v5 = v0.<io.netty.channel.DefaultChannelId: byte[] data>;
v6 = v4 + 1;
v5[v4] = v20;
v7 = v0.<io.netty.channel.DefaultChannelId: byte[] data>;
v8 = v6 + 1;
v7[v6] = v21;
v9 = v0.<io.netty.channel.DefaultChannelId: byte[] data>;
v10 = v8 + 1;
v9[v8] = v22;
v11 = v0.<io.netty.channel.DefaultChannelId: byte[] data>;
v12 = v10 + 1;
v11[v10] = v23;
v13 = v0.<io.netty.channel.DefaultChannelId: byte[] data>;
v14 = v12 + 1;
v13[v12] = v24;
v15 = v0.<io.netty.channel.DefaultChannelId: byte[] data>;
v16 = v14 + 1;
v15[v14] = v25;
v17 = v0.<io.netty.channel.DefaultChannelId: byte[] data>;
v18 = v16 + 1;
v17[v16] = v26;
return v18;
}
public java.lang.String asShortText()
{
byte[] v2, v3;
io.netty.channel.DefaultChannelId v0;
int v4, v5;
java.lang.String v1, v6;
v0 := @this: io.netty.channel.DefaultChannelId;
v1 = v0.<io.netty.channel.DefaultChannelId: java.lang.String shortValue>;
if v1 != null goto label1;
v2 = v0.<io.netty.channel.DefaultChannelId: byte[] data>;
v3 = v0.<io.netty.channel.DefaultChannelId: byte[] data>;
v4 = lengthof v3;
v5 = v4 - 4;
v6 = staticinvoke <io.netty.buffer.ByteBufUtil: java.lang.String hexDump(byte[],int,int)>(v2, v5, 4);
v1 = v6;
v0.<io.netty.channel.DefaultChannelId: java.lang.String shortValue> = v6;
label1:
return v1;
}
public java.lang.String asLongText()
{
io.netty.channel.DefaultChannelId v0;
java.lang.String v1, v2;
v0 := @this: io.netty.channel.DefaultChannelId;
v1 = v0.<io.netty.channel.DefaultChannelId: java.lang.String longValue>;
if v1 != null goto label1;
v2 = specialinvoke v0.<io.netty.channel.DefaultChannelId: java.lang.String newLongValue()>();
v1 = v2;
v0.<io.netty.channel.DefaultChannelId: java.lang.String longValue> = v2;
label1:
return v1;
}
private java.lang.String newLongValue()
{
byte[] v14, v2, v6;
java.lang.AssertionError v16;
int v10, v11, v12, v15, v17, v18, v3, v4, v5, v7, v8, v9;
java.lang.String v19;
boolean v13;
io.netty.channel.DefaultChannelId v0;
java.lang.StringBuilder v1;
v0 := @this: io.netty.channel.DefaultChannelId;
v1 = new java.lang.StringBuilder;
v2 = v0.<io.netty.channel.DefaultChannelId: byte[] data>;
v3 = lengthof v2;
v4 = 2 * v3;
v5 = v4 + 5;
specialinvoke v1.<java.lang.StringBuilder: void <init>(int)>(v5);
v6 = <io.netty.channel.DefaultChannelId: byte[] MACHINE_ID>;
v7 = lengthof v6;
v8 = specialinvoke v0.<io.netty.channel.DefaultChannelId: int appendHexDumpField(java.lang.StringBuilder,int,int)>(v1, 0, v7);
v9 = specialinvoke v0.<io.netty.channel.DefaultChannelId: int appendHexDumpField(java.lang.StringBuilder,int,int)>(v1, v8, 4);
v10 = specialinvoke v0.<io.netty.channel.DefaultChannelId: int appendHexDumpField(java.lang.StringBuilder,int,int)>(v1, v9, 4);
v11 = specialinvoke v0.<io.netty.channel.DefaultChannelId: int appendHexDumpField(java.lang.StringBuilder,int,int)>(v1, v10, 8);
v12 = specialinvoke v0.<io.netty.channel.DefaultChannelId: int appendHexDumpField(java.lang.StringBuilder,int,int)>(v1, v11, 4);
v13 = <io.netty.channel.DefaultChannelId: boolean $assertionsDisabled>;
if v13 != 0 goto label1;
v14 = v0.<io.netty.channel.DefaultChannelId: byte[] data>;
v15 = lengthof v14;
if v12 == v15 goto label1;
v16 = new java.lang.AssertionError;
specialinvoke v16.<java.lang.AssertionError: void <init>()>();
throw v16;
label1:
v17 = virtualinvoke v1.<java.lang.StringBuilder: int length()>();
v18 = v17 - 1;
v19 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.String substring(int,int)>(0, v18);
return v19;
}
private int appendHexDumpField(java.lang.StringBuilder, int, int)
{
byte[] v4;
io.netty.channel.DefaultChannelId v0;
int v2, v3, v6;
java.lang.StringBuilder v1;
java.lang.String v5;
v0 := @this: io.netty.channel.DefaultChannelId;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<io.netty.channel.DefaultChannelId: byte[] data>;
v5 = staticinvoke <io.netty.buffer.ByteBufUtil: java.lang.String hexDump(byte[],int,int)>(v4, v2, v3);
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v5);
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);
v6 = v2 + v3;
return v6;
}
public int hashCode()
{
int v1;
io.netty.channel.DefaultChannelId v0;
v0 := @this: io.netty.channel.DefaultChannelId;
v1 = v0.<io.netty.channel.DefaultChannelId: int hashCode>;
return v1;
}
public int compareTo(io.netty.channel.ChannelId)
{
byte[] v3, v4, v9;
io.netty.channel.ChannelId v1;
short v12, v13;
byte v10, v11;
int v14, v15, v18, v5, v6, v7, v8;
java.lang.String v16, v17;
boolean v2;
io.netty.channel.DefaultChannelId v0;
v0 := @this: io.netty.channel.DefaultChannelId;
v1 := @parameter0: io.netty.channel.ChannelId;
if v0 != v1 goto label1;
return 0;
label1:
v2 = v1 instanceof io.netty.channel.DefaultChannelId;
if v2 == 0 goto label5;
v3 = v1.<io.netty.channel.DefaultChannelId: byte[] data>;
v4 = v0.<io.netty.channel.DefaultChannelId: byte[] data>;
v5 = lengthof v4;
v6 = lengthof v3;
v7 = staticinvoke <java.lang.Math: int min(int,int)>(v5, v6);
v8 = 0;
label2:
if v8 >= v7 goto label4;
v9 = v0.<io.netty.channel.DefaultChannelId: byte[] data>;
v10 = v9[v8];
v11 = v3[v8];
if v10 == v11 goto label3;
v12 = v10 & 255;
v13 = v11 & 255;
v14 = v12 - v13;
return v14;
label3:
v8 = v8 + 1;
goto label2;
label4:
v15 = v5 - v6;
return v15;
label5:
v16 = virtualinvoke v0.<io.netty.channel.DefaultChannelId: java.lang.String asLongText()>();
v17 = interfaceinvoke v1.<io.netty.channel.ChannelId: java.lang.String asLongText()>();
v18 = virtualinvoke v16.<java.lang.String: int compareTo(java.lang.String)>(v17);
return v18;
}
public boolean equals(java.lang.Object)
{
byte[] v5, v6;
io.netty.channel.DefaultChannelId v0;
int v3, v4;
java.lang.Object v1;
boolean v2, v7, v8;
v0 := @this: io.netty.channel.DefaultChannelId;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
v2 = v1 instanceof io.netty.channel.DefaultChannelId;
if v2 != 0 goto label2;
return 0;
label2:
v3 = v0.<io.netty.channel.DefaultChannelId: int hashCode>;
v4 = v1.<io.netty.channel.DefaultChannelId: int hashCode>;
if v3 != v4 goto label3;
v5 = v0.<io.netty.channel.DefaultChannelId: byte[] data>;
v6 = v1.<io.netty.channel.DefaultChannelId: byte[] data>;
v7 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(v5, v6);
if v7 == 0 goto label3;
v8 = 1;
goto label4;
label3:
v8 = 0;
label4:
return v8;
}
public java.lang.String toString()
{
io.netty.channel.DefaultChannelId v0;
java.lang.String v1;
v0 := @this: io.netty.channel.DefaultChannelId;
v1 = virtualinvoke v0.<io.netty.channel.DefaultChannelId: java.lang.String asShortText()>();
return v1;
}
static void <clinit>()
{
byte[] v19;
java.lang.Integer v14, v18;
java.util.concurrent.atomic.AtomicInteger v4;
int v5, v6, v9;
java.lang.String v20, v27, v7;
boolean v1, v12, v16, v2, v25;
java.lang.NumberFormatException v8;
java.lang.Exception v21;
io.netty.util.internal.logging.InternalLogger v10, v11, v13, v15, v17, v22, v23, v24, v26, v3;
java.lang.Class v0;
v0 = class "Lio/netty/channel/DefaultChannelId;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label01;
v2 = 1;
goto label02;
label01:
v2 = 0;
label02:
<io.netty.channel.DefaultChannelId: boolean $assertionsDisabled> = v2;
v3 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/channel/DefaultChannelId;");
<io.netty.channel.DefaultChannelId: io.netty.util.internal.logging.InternalLogger logger> = v3;
v4 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v4.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
<io.netty.channel.DefaultChannelId: java.util.concurrent.atomic.AtomicInteger nextSequence> = v4;
v5 = (int) -1;
v6 = v5;
v7 = staticinvoke <io.netty.util.internal.SystemPropertyUtil: java.lang.String get(java.lang.String)>("io.netty.processId");
if v7 == null goto label08;
label03:
v6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v7);
label04:
goto label06;
label05:
v8 := @caughtexception;
label06:
if v6 >= 0 goto label07;
v9 = (int) -1;
v6 = v9;
v10 = <io.netty.channel.DefaultChannelId: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v10.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object)>("-Dio.netty.processId: {} (malformed)", v7);
goto label08;
label07:
v11 = <io.netty.channel.DefaultChannelId: io.netty.util.internal.logging.InternalLogger logger>;
v12 = interfaceinvoke v11.<io.netty.util.internal.logging.InternalLogger: boolean isDebugEnabled()>();
if v12 == 0 goto label08;
v13 = <io.netty.channel.DefaultChannelId: io.netty.util.internal.logging.InternalLogger logger>;
v14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v6);
interfaceinvoke v13.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object)>("-Dio.netty.processId: {} (user-set)", v14);
label08:
if v6 >= 0 goto label09;
v6 = staticinvoke <io.netty.channel.DefaultChannelId: int defaultProcessId()>();
v15 = <io.netty.channel.DefaultChannelId: io.netty.util.internal.logging.InternalLogger logger>;
v16 = interfaceinvoke v15.<io.netty.util.internal.logging.InternalLogger: boolean isDebugEnabled()>();
if v16 == 0 goto label09;
v17 = <io.netty.channel.DefaultChannelId: io.netty.util.internal.logging.InternalLogger logger>;
v18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v6);
interfaceinvoke v17.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object)>("-Dio.netty.processId: {} (auto-detected)", v18);
label09:
<io.netty.channel.DefaultChannelId: int PROCESS_ID> = v6;
v19 = null;
v20 = staticinvoke <io.netty.util.internal.SystemPropertyUtil: java.lang.String get(java.lang.String)>("io.netty.machineId");
if v20 == null goto label14;
label10:
v19 = staticinvoke <io.netty.util.internal.MacAddressUtil: byte[] parseMAC(java.lang.String)>(v20);
label11:
goto label13;
label12:
v21 := @caughtexception;
v22 = <io.netty.channel.DefaultChannelId: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v22.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("-Dio.netty.machineId: {} (malformed)", v20, v21);
label13:
if v19 == null goto label14;
v23 = <io.netty.channel.DefaultChannelId: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v23.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object)>("-Dio.netty.machineId: {} (user-set)", v20);
label14:
if v19 != null goto label15;
v19 = staticinvoke <io.netty.util.internal.MacAddressUtil: byte[] defaultMachineId()>();
v24 = <io.netty.channel.DefaultChannelId: io.netty.util.internal.logging.InternalLogger logger>;
v25 = interfaceinvoke v24.<io.netty.util.internal.logging.InternalLogger: boolean isDebugEnabled()>();
if v25 == 0 goto label15;
v26 = <io.netty.channel.DefaultChannelId: io.netty.util.internal.logging.InternalLogger logger>;
v27 = staticinvoke <io.netty.util.internal.MacAddressUtil: java.lang.String formatAddress(byte[])>(v19);
interfaceinvoke v26.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object)>("-Dio.netty.machineId: {} (auto-detected)", v27);
label15:
<io.netty.channel.DefaultChannelId: byte[] MACHINE_ID> = v19;
return;
catch java.lang.NumberFormatException from label03 to label04 with label05;
catch java.lang.Exception from label10 to label11 with label12;
}
}