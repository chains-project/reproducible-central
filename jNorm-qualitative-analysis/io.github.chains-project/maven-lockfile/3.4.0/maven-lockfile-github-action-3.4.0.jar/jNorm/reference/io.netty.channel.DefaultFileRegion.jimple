public class io.netty.channel.DefaultFileRegion extends io.netty.util.AbstractReferenceCounted implements io.netty.channel.FileRegion
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private final java.io.File f;
private final long position;
private final long count;
private long transferred;
private java.nio.channels.FileChannel file;
public void <init>(java.nio.channels.FileChannel, long, long)
{
io.netty.channel.DefaultFileRegion v0;
java.lang.Object v4;
long v2, v3, v5, v6;
java.nio.channels.FileChannel v1;
v0 := @this: io.netty.channel.DefaultFileRegion;
v1 := @parameter0: java.nio.channels.FileChannel;
v2 := @parameter1: long;
v3 := @parameter2: long;
specialinvoke v0.<io.netty.util.AbstractReferenceCounted: void <init>()>();
v4 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "fileChannel");
v0.<io.netty.channel.DefaultFileRegion: java.nio.channels.FileChannel file> = v4;
v5 = staticinvoke <io.netty.util.internal.ObjectUtil: long checkPositiveOrZero(long,java.lang.String)>(v2, "position");
v0.<io.netty.channel.DefaultFileRegion: long position> = v5;
v6 = staticinvoke <io.netty.util.internal.ObjectUtil: long checkPositiveOrZero(long,java.lang.String)>(v3, "count");
v0.<io.netty.channel.DefaultFileRegion: long count> = v6;
v0.<io.netty.channel.DefaultFileRegion: java.io.File f> = null;
return;
}
public void <init>(java.io.File, long, long)
{
io.netty.channel.DefaultFileRegion v0;
java.lang.Object v4;
long v2, v3, v5, v6;
java.io.File v1;
v0 := @this: io.netty.channel.DefaultFileRegion;
v1 := @parameter0: java.io.File;
v2 := @parameter1: long;
v3 := @parameter2: long;
specialinvoke v0.<io.netty.util.AbstractReferenceCounted: void <init>()>();
v4 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "file");
v0.<io.netty.channel.DefaultFileRegion: java.io.File f> = v4;
v5 = staticinvoke <io.netty.util.internal.ObjectUtil: long checkPositiveOrZero(long,java.lang.String)>(v2, "position");
v0.<io.netty.channel.DefaultFileRegion: long position> = v5;
v6 = staticinvoke <io.netty.util.internal.ObjectUtil: long checkPositiveOrZero(long,java.lang.String)>(v3, "count");
v0.<io.netty.channel.DefaultFileRegion: long count> = v6;
return;
}
public boolean isOpen()
{
java.nio.channels.FileChannel v1;
boolean v2;
io.netty.channel.DefaultFileRegion v0;
v0 := @this: io.netty.channel.DefaultFileRegion;
v1 = v0.<io.netty.channel.DefaultFileRegion: java.nio.channels.FileChannel file>;
if v1 == null goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public void open() throws java.io.IOException
{
java.io.RandomAccessFile v3;
io.netty.channel.DefaultFileRegion v0;
int v2;
java.nio.channels.FileChannel v5;
java.io.File v4;
boolean v1;
v0 := @this: io.netty.channel.DefaultFileRegion;
v1 = virtualinvoke v0.<io.netty.channel.DefaultFileRegion: boolean isOpen()>();
if v1 != 0 goto label1;
v2 = virtualinvoke v0.<io.netty.channel.DefaultFileRegion: int refCnt()>();
if v2 <= 0 goto label1;
v3 = new java.io.RandomAccessFile;
v4 = v0.<io.netty.channel.DefaultFileRegion: java.io.File f>;
specialinvoke v3.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>(v4, "r");
v5 = virtualinvoke v3.<java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()>();
v0.<io.netty.channel.DefaultFileRegion: java.nio.channels.FileChannel file> = v5;
label1:
return;
}
public long position()
{
long v1;
io.netty.channel.DefaultFileRegion v0;
v0 := @this: io.netty.channel.DefaultFileRegion;
v1 = v0.<io.netty.channel.DefaultFileRegion: long position>;
return v1;
}
public long count()
{
long v1;
io.netty.channel.DefaultFileRegion v0;
v0 := @this: io.netty.channel.DefaultFileRegion;
v1 = v0.<io.netty.channel.DefaultFileRegion: long count>;
return v1;
}
public long transfered()
{
long v1;
io.netty.channel.DefaultFileRegion v0;
v0 := @this: io.netty.channel.DefaultFileRegion;
v1 = v0.<io.netty.channel.DefaultFileRegion: long transferred>;
return v1;
}
public long transferred()
{
long v1;
io.netty.channel.DefaultFileRegion v0;
v0 := @this: io.netty.channel.DefaultFileRegion;
v1 = v0.<io.netty.channel.DefaultFileRegion: long transferred>;
return v1;
}
public long transferTo(java.nio.channels.WritableByteChannel, long) throws java.io.IOException
{
io.netty.util.IllegalReferenceCountException v13;
long v15, v16, v17, v19, v2, v20, v3, v4, v8, v9;
byte v11, v18, v21, v5, v6;
int v12;
java.lang.String v10;
java.lang.IllegalArgumentException v7;
io.netty.channel.DefaultFileRegion v0;
java.nio.channels.WritableByteChannel v1;
java.nio.channels.FileChannel v14;
v0 := @this: io.netty.channel.DefaultFileRegion;
v1 := @parameter0: java.nio.channels.WritableByteChannel;
v2 := @parameter1: long;
v3 = v0.<io.netty.channel.DefaultFileRegion: long count>;
v4 = v3 - v2;
v5 = v4 cmp 0L;
if v5 < 0 goto label1;
v6 = v2 cmp 0L;
if v6 >= 0 goto label2;
label1:
v7 = new java.lang.IllegalArgumentException;
v8 = v0.<io.netty.channel.DefaultFileRegion: long count>;
v9 = v8 - 1L;
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long,long)>(v2, v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("position out of range: \u0001 (expected: 0 - \u0001)");
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v10);
throw v7;
label2:
v11 = v4 cmp 0L;
if v11 != 0 goto label3;
return 0L;
label3:
v12 = virtualinvoke v0.<io.netty.channel.DefaultFileRegion: int refCnt()>();
if v12 != 0 goto label4;
v13 = new io.netty.util.IllegalReferenceCountException;
specialinvoke v13.<io.netty.util.IllegalReferenceCountException: void <init>(int)>(0);
throw v13;
label4:
virtualinvoke v0.<io.netty.channel.DefaultFileRegion: void open()>();
v14 = v0.<io.netty.channel.DefaultFileRegion: java.nio.channels.FileChannel file>;
v15 = v0.<io.netty.channel.DefaultFileRegion: long position>;
v16 = v15 + v2;
v17 = virtualinvoke v14.<java.nio.channels.FileChannel: long transferTo(long,long,java.nio.channels.WritableByteChannel)>(v16, v4, v1);
v18 = v17 cmp 0L;
if v18 <= 0 goto label5;
v19 = v0.<io.netty.channel.DefaultFileRegion: long transferred>;
v20 = v19 + v17;
v0.<io.netty.channel.DefaultFileRegion: long transferred> = v20;
goto label6;
label5:
v21 = v17 cmp 0L;
if v21 != 0 goto label6;
staticinvoke <io.netty.channel.DefaultFileRegion: void validate(io.netty.channel.DefaultFileRegion,long)>(v0, v2);
label6:
return v17;
}
protected void deallocate()
{
java.nio.channels.FileChannel v1;
io.netty.channel.DefaultFileRegion v0;
v0 := @this: io.netty.channel.DefaultFileRegion;
v1 = v0.<io.netty.channel.DefaultFileRegion: java.nio.channels.FileChannel file>;
if v1 != null goto label1;
return;
label1:
v0.<io.netty.channel.DefaultFileRegion: java.nio.channels.FileChannel file> = null;
return;
}
public io.netty.channel.FileRegion retain()
{
io.netty.channel.DefaultFileRegion v0;
v0 := @this: io.netty.channel.DefaultFileRegion;
specialinvoke v0.<io.netty.util.AbstractReferenceCounted: io.netty.util.ReferenceCounted retain()>();
return v0;
}
public io.netty.channel.FileRegion retain(int)
{
int v1;
io.netty.channel.DefaultFileRegion v0;
v0 := @this: io.netty.channel.DefaultFileRegion;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.util.AbstractReferenceCounted: io.netty.util.ReferenceCounted retain(int)>(v1);
return v0;
}
public io.netty.channel.FileRegion touch()
{
io.netty.channel.DefaultFileRegion v0;
v0 := @this: io.netty.channel.DefaultFileRegion;
return v0;
}
public io.netty.channel.FileRegion touch(java.lang.Object)
{
java.lang.Object v1;
io.netty.channel.DefaultFileRegion v0;
v0 := @this: io.netty.channel.DefaultFileRegion;
v1 := @parameter0: java.lang.Object;
return v0;
}
static void validate(io.netty.channel.DefaultFileRegion, long) throws java.io.IOException
{
java.io.IOException v10;
long v1, v11, v3, v4, v5, v6, v7, v8;
byte v9;
io.netty.channel.DefaultFileRegion v0;
java.lang.String v12;
java.nio.channels.FileChannel v2;
v0 := @parameter0: io.netty.channel.DefaultFileRegion;
v1 := @parameter1: long;
v2 = v0.<io.netty.channel.DefaultFileRegion: java.nio.channels.FileChannel file>;
v3 = virtualinvoke v2.<java.nio.channels.FileChannel: long size()>();
v4 = v0.<io.netty.channel.DefaultFileRegion: long count>;
v5 = v4 - v1;
v6 = v0.<io.netty.channel.DefaultFileRegion: long position>;
v7 = v6 + v5;
v8 = v7 + v1;
v9 = v8 cmp v3;
if v9 <= 0 goto label1;
v10 = new java.io.IOException;
v11 = v0.<io.netty.channel.DefaultFileRegion: long count>;
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long,long)>(v3, v11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Underlying file size \u0001 smaller then requested count \u0001");
specialinvoke v10.<java.io.IOException: void <init>(java.lang.String)>(v12);
throw v10;
label1:
return;
}
static void <clinit>()
{
io.netty.util.internal.logging.InternalLogger v0;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/channel/DefaultFileRegion;");
<io.netty.channel.DefaultFileRegion: io.netty.util.internal.logging.InternalLogger logger> = v0;
return;
}
}