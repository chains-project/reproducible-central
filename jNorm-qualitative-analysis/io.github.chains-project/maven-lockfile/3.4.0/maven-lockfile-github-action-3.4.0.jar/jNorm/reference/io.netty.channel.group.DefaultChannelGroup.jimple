public class io.netty.channel.group.DefaultChannelGroup extends java.util.AbstractSet implements io.netty.channel.group.ChannelGroup
{
private static final java.util.concurrent.atomic.AtomicInteger nextId;
private final java.lang.String name;
private final io.netty.util.concurrent.EventExecutor executor;
private final java.util.concurrent.ConcurrentMap serverChannels;
private final java.util.concurrent.ConcurrentMap nonServerChannels;
private final io.netty.channel.ChannelFutureListener remover;
private final io.netty.channel.group.VoidChannelGroupFuture voidFuture;
private final boolean stayClosed;
private volatile boolean closed;
public void <init>(io.netty.util.concurrent.EventExecutor)
{
io.netty.util.concurrent.EventExecutor v1;
io.netty.channel.group.DefaultChannelGroup v0;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 := @parameter0: io.netty.util.concurrent.EventExecutor;
specialinvoke v0.<io.netty.channel.group.DefaultChannelGroup: void <init>(io.netty.util.concurrent.EventExecutor,boolean)>(v1, 0);
return;
}
public void <init>(java.lang.String, io.netty.util.concurrent.EventExecutor)
{
io.netty.util.concurrent.EventExecutor v2;
java.lang.String v1;
io.netty.channel.group.DefaultChannelGroup v0;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.netty.util.concurrent.EventExecutor;
specialinvoke v0.<io.netty.channel.group.DefaultChannelGroup: void <init>(java.lang.String,io.netty.util.concurrent.EventExecutor,boolean)>(v1, v2, 0);
return;
}
public void <init>(io.netty.util.concurrent.EventExecutor, boolean)
{
io.netty.util.concurrent.EventExecutor v1;
java.util.concurrent.atomic.AtomicInteger v3;
io.netty.channel.group.DefaultChannelGroup v0;
int v4;
java.lang.String v5, v6;
boolean v2;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 := @parameter0: io.netty.util.concurrent.EventExecutor;
v2 := @parameter1: boolean;
v3 = <io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.atomic.AtomicInteger nextId>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();
v5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v4);
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("group-0x\u0001");
specialinvoke v0.<io.netty.channel.group.DefaultChannelGroup: void <init>(java.lang.String,io.netty.util.concurrent.EventExecutor,boolean)>(v6, v1, v2);
return;
}
public void <init>(java.lang.String, io.netty.util.concurrent.EventExecutor, boolean)
{
io.netty.util.concurrent.EventExecutor v2;
io.netty.channel.group.DefaultChannelGroup v0;
io.netty.channel.group.DefaultChannelGroup$1 v6;
java.util.concurrent.ConcurrentMap v4, v5;
io.netty.channel.group.VoidChannelGroupFuture v7;
java.lang.String v1;
boolean v3;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.netty.util.concurrent.EventExecutor;
v3 := @parameter2: boolean;
specialinvoke v0.<java.util.AbstractSet: void <init>()>();
v4 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.concurrent.ConcurrentMap newConcurrentHashMap()>();
v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap serverChannels> = v4;
v5 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.concurrent.ConcurrentMap newConcurrentHashMap()>();
v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap nonServerChannels> = v5;
v6 = new io.netty.channel.group.DefaultChannelGroup$1;
specialinvoke v6.<io.netty.channel.group.DefaultChannelGroup$1: void <init>(io.netty.channel.group.DefaultChannelGroup)>(v0);
v0.<io.netty.channel.group.DefaultChannelGroup: io.netty.channel.ChannelFutureListener remover> = v6;
v7 = new io.netty.channel.group.VoidChannelGroupFuture;
specialinvoke v7.<io.netty.channel.group.VoidChannelGroupFuture: void <init>(io.netty.channel.group.ChannelGroup)>(v0);
v0.<io.netty.channel.group.DefaultChannelGroup: io.netty.channel.group.VoidChannelGroupFuture voidFuture> = v7;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "name");
v0.<io.netty.channel.group.DefaultChannelGroup: java.lang.String name> = v1;
v0.<io.netty.channel.group.DefaultChannelGroup: io.netty.util.concurrent.EventExecutor executor> = v2;
v0.<io.netty.channel.group.DefaultChannelGroup: boolean stayClosed> = v3;
return;
}
public java.lang.String name()
{
java.lang.String v1;
io.netty.channel.group.DefaultChannelGroup v0;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 = v0.<io.netty.channel.group.DefaultChannelGroup: java.lang.String name>;
return v1;
}
public io.netty.channel.Channel find(io.netty.channel.ChannelId)
{
io.netty.channel.group.DefaultChannelGroup v0;
io.netty.channel.ChannelId v1;
java.lang.Object v3, v5;
java.util.concurrent.ConcurrentMap v2, v4;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 := @parameter0: io.netty.channel.ChannelId;
v2 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap nonServerChannels>;
v3 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v1);
if v3 == null goto label1;
return v3;
label1:
v4 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap serverChannels>;
v5 = interfaceinvoke v4.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v1);
return v5;
}
public boolean isEmpty()
{
io.netty.channel.group.DefaultChannelGroup v0;
boolean v2, v4, v5;
java.util.concurrent.ConcurrentMap v1, v3;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap nonServerChannels>;
v2 = interfaceinvoke v1.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>();
if v2 == 0 goto label1;
v3 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap serverChannels>;
v4 = interfaceinvoke v3.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>();
if v4 == 0 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
public int size()
{
io.netty.channel.group.DefaultChannelGroup v0;
int v2, v4, v5;
java.util.concurrent.ConcurrentMap v1, v3;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap nonServerChannels>;
v2 = interfaceinvoke v1.<java.util.concurrent.ConcurrentMap: int size()>();
v3 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap serverChannels>;
v4 = interfaceinvoke v3.<java.util.concurrent.ConcurrentMap: int size()>();
v5 = v2 + v4;
return v5;
}
public boolean contains(java.lang.Object)
{
io.netty.channel.group.DefaultChannelGroup v0;
java.util.concurrent.ConcurrentMap v3, v6;
java.lang.Object v1;
boolean v2, v4, v5, v7;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 := @parameter0: java.lang.Object;
v2 = v1 instanceof io.netty.channel.ServerChannel;
if v2 == 0 goto label1;
v3 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap serverChannels>;
v4 = interfaceinvoke v3.<java.util.concurrent.ConcurrentMap: boolean containsValue(java.lang.Object)>(v1);
return v4;
label1:
v5 = v1 instanceof io.netty.channel.Channel;
if v5 == 0 goto label2;
v6 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap nonServerChannels>;
v7 = interfaceinvoke v6.<java.util.concurrent.ConcurrentMap: boolean containsValue(java.lang.Object)>(v1);
return v7;
label2:
return 0;
}
public boolean add(io.netty.channel.Channel)
{
io.netty.channel.group.DefaultChannelGroup v0;
io.netty.channel.ChannelId v4;
io.netty.channel.ChannelFuture v8;
java.util.concurrent.ConcurrentMap v3;
io.netty.channel.Channel v1;
io.netty.channel.ChannelFutureListener v9;
java.lang.Object v5;
boolean v10, v11, v2, v6, v7;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 := @parameter0: io.netty.channel.Channel;
v2 = v1 instanceof io.netty.channel.ServerChannel;
if v2 == 0 goto label1;
v3 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap serverChannels>;
goto label2;
label1:
v3 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap nonServerChannels>;
label2:
v4 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelId id()>();
v5 = interfaceinvoke v3.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(v4, v1);
if v5 != null goto label3;
v6 = 1;
goto label4;
label3:
v6 = 0;
label4:
v7 = v6;
if v6 == 0 goto label5;
v8 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelFuture closeFuture()>();
v9 = v0.<io.netty.channel.group.DefaultChannelGroup: io.netty.channel.ChannelFutureListener remover>;
interfaceinvoke v8.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v9);
label5:
v10 = v0.<io.netty.channel.group.DefaultChannelGroup: boolean stayClosed>;
if v10 == 0 goto label6;
v11 = v0.<io.netty.channel.group.DefaultChannelGroup: boolean closed>;
if v11 == 0 goto label6;
interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelFuture close()>();
label6:
return v7;
}
public boolean remove(java.lang.Object)
{
io.netty.channel.group.DefaultChannelGroup v0;
io.netty.channel.ChannelId v11, v9;
io.netty.channel.ChannelFuture v12;
java.util.concurrent.ConcurrentMap v10, v3, v5, v8;
io.netty.channel.ChannelFutureListener v13;
java.lang.Object v1, v4;
boolean v2, v6, v7;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 := @parameter0: java.lang.Object;
v2 = v1 instanceof io.netty.channel.ChannelId;
if v2 == 0 goto label1;
v3 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap nonServerChannels>;
v4 = interfaceinvoke v3.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(v1);
if v4 != null goto label4;
v5 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap serverChannels>;
interfaceinvoke v5.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(v1);
goto label3;
label1:
v6 = v1 instanceof io.netty.channel.Channel;
if v6 == 0 goto label3;
v7 = v1 instanceof io.netty.channel.ServerChannel;
if v7 == 0 goto label2;
v8 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap serverChannels>;
v9 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelId id()>();
interfaceinvoke v8.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(v9);
goto label3;
label2:
v10 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap nonServerChannels>;
v11 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelId id()>();
interfaceinvoke v10.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(v11);
label3:
if v4 != null goto label4;
return 0;
label4:
v12 = interfaceinvoke v4.<io.netty.channel.Channel: io.netty.channel.ChannelFuture closeFuture()>();
v13 = v0.<io.netty.channel.group.DefaultChannelGroup: io.netty.channel.ChannelFutureListener remover>;
interfaceinvoke v12.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture removeListener(io.netty.util.concurrent.GenericFutureListener)>(v13);
return 1;
}
public void clear()
{
io.netty.channel.group.DefaultChannelGroup v0;
java.util.concurrent.ConcurrentMap v1, v2;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap nonServerChannels>;
interfaceinvoke v1.<java.util.concurrent.ConcurrentMap: void clear()>();
v2 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap serverChannels>;
interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: void clear()>();
return;
}
public java.util.Iterator iterator()
{
java.util.Iterator v4, v7;
io.netty.channel.group.DefaultChannelGroup v0;
java.util.Collection v3, v6;
java.util.concurrent.ConcurrentMap v2, v5;
io.netty.channel.group.CombinedIterator v1;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 = new io.netty.channel.group.CombinedIterator;
v2 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap serverChannels>;
v3 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();
v4 = interfaceinvoke v3.<java.util.Collection: java.util.Iterator iterator()>();
v5 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap nonServerChannels>;
v6 = interfaceinvoke v5.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();
v7 = interfaceinvoke v6.<java.util.Collection: java.util.Iterator iterator()>();
specialinvoke v1.<io.netty.channel.group.CombinedIterator: void <init>(java.util.Iterator,java.util.Iterator)>(v4, v7);
return v1;
}
public java.lang.Object[] toArray()
{
java.lang.Object[] v7;
io.netty.channel.group.DefaultChannelGroup v0;
java.util.Collection v4, v6;
java.util.ArrayList v1;
java.util.concurrent.ConcurrentMap v3, v5;
int v2;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 = new java.util.ArrayList;
v2 = virtualinvoke v0.<io.netty.channel.group.DefaultChannelGroup: int size()>();
specialinvoke v1.<java.util.ArrayList: void <init>(int)>(v2);
v3 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap serverChannels>;
v4 = interfaceinvoke v3.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();
interfaceinvoke v1.<java.util.Collection: boolean addAll(java.util.Collection)>(v4);
v5 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap nonServerChannels>;
v6 = interfaceinvoke v5.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();
interfaceinvoke v1.<java.util.Collection: boolean addAll(java.util.Collection)>(v6);
v7 = interfaceinvoke v1.<java.util.Collection: java.lang.Object[] toArray()>();
return v7;
}
public java.lang.Object[] toArray(java.lang.Object[])
{
java.lang.Object[] v1, v8;
io.netty.channel.group.DefaultChannelGroup v0;
java.util.Collection v5, v7;
java.util.ArrayList v2;
java.util.concurrent.ConcurrentMap v4, v6;
int v3;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 := @parameter0: java.lang.Object[];
v2 = new java.util.ArrayList;
v3 = virtualinvoke v0.<io.netty.channel.group.DefaultChannelGroup: int size()>();
specialinvoke v2.<java.util.ArrayList: void <init>(int)>(v3);
v4 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap serverChannels>;
v5 = interfaceinvoke v4.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();
interfaceinvoke v2.<java.util.Collection: boolean addAll(java.util.Collection)>(v5);
v6 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap nonServerChannels>;
v7 = interfaceinvoke v6.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();
interfaceinvoke v2.<java.util.Collection: boolean addAll(java.util.Collection)>(v7);
v8 = interfaceinvoke v2.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(v1);
return v8;
}
public io.netty.channel.group.ChannelGroupFuture close()
{
io.netty.channel.group.ChannelMatcher v1;
io.netty.channel.group.ChannelGroupFuture v2;
io.netty.channel.group.DefaultChannelGroup v0;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 = staticinvoke <io.netty.channel.group.ChannelMatchers: io.netty.channel.group.ChannelMatcher all()>();
v2 = virtualinvoke v0.<io.netty.channel.group.DefaultChannelGroup: io.netty.channel.group.ChannelGroupFuture close(io.netty.channel.group.ChannelMatcher)>(v1);
return v2;
}
public io.netty.channel.group.ChannelGroupFuture disconnect()
{
io.netty.channel.group.ChannelMatcher v1;
io.netty.channel.group.ChannelGroupFuture v2;
io.netty.channel.group.DefaultChannelGroup v0;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 = staticinvoke <io.netty.channel.group.ChannelMatchers: io.netty.channel.group.ChannelMatcher all()>();
v2 = virtualinvoke v0.<io.netty.channel.group.DefaultChannelGroup: io.netty.channel.group.ChannelGroupFuture disconnect(io.netty.channel.group.ChannelMatcher)>(v1);
return v2;
}
public io.netty.channel.group.ChannelGroupFuture deregister()
{
io.netty.channel.group.ChannelMatcher v1;
io.netty.channel.group.ChannelGroupFuture v2;
io.netty.channel.group.DefaultChannelGroup v0;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 = staticinvoke <io.netty.channel.group.ChannelMatchers: io.netty.channel.group.ChannelMatcher all()>();
v2 = virtualinvoke v0.<io.netty.channel.group.DefaultChannelGroup: io.netty.channel.group.ChannelGroupFuture deregister(io.netty.channel.group.ChannelMatcher)>(v1);
return v2;
}
public io.netty.channel.group.ChannelGroupFuture write(java.lang.Object)
{
io.netty.channel.group.DefaultChannelGroup v0;
io.netty.channel.group.ChannelMatcher v2;
io.netty.channel.group.ChannelGroupFuture v3;
java.lang.Object v1;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 := @parameter0: java.lang.Object;
v2 = staticinvoke <io.netty.channel.group.ChannelMatchers: io.netty.channel.group.ChannelMatcher all()>();
v3 = virtualinvoke v0.<io.netty.channel.group.DefaultChannelGroup: io.netty.channel.group.ChannelGroupFuture write(java.lang.Object,io.netty.channel.group.ChannelMatcher)>(v1, v2);
return v3;
}
private static java.lang.Object safeDuplicate(java.lang.Object)
{
io.netty.buffer.ByteBuf v2;
java.lang.Object v0, v5;
io.netty.buffer.ByteBufHolder v4;
boolean v1, v3;
v0 := @parameter0: java.lang.Object;
v1 = v0 instanceof io.netty.buffer.ByteBuf;
if v1 == 0 goto label1;
v2 = virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf retainedDuplicate()>();
return v2;
label1:
v3 = v0 instanceof io.netty.buffer.ByteBufHolder;
if v3 == 0 goto label2;
v4 = interfaceinvoke v0.<io.netty.buffer.ByteBufHolder: io.netty.buffer.ByteBufHolder retainedDuplicate()>();
return v4;
label2:
v5 = staticinvoke <io.netty.util.ReferenceCountUtil: java.lang.Object retain(java.lang.Object)>(v0);
return v5;
}
public io.netty.channel.group.ChannelGroupFuture write(java.lang.Object, io.netty.channel.group.ChannelMatcher)
{
io.netty.channel.group.DefaultChannelGroup v0;
io.netty.channel.group.ChannelMatcher v2;
io.netty.channel.group.ChannelGroupFuture v3;
java.lang.Object v1;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: io.netty.channel.group.ChannelMatcher;
v3 = virtualinvoke v0.<io.netty.channel.group.DefaultChannelGroup: io.netty.channel.group.ChannelGroupFuture write(java.lang.Object,io.netty.channel.group.ChannelMatcher,boolean)>(v1, v2, 0);
return v3;
}
public io.netty.channel.group.ChannelGroupFuture write(java.lang.Object, io.netty.channel.group.ChannelMatcher, boolean)
{
io.netty.util.concurrent.EventExecutor v25;
io.netty.channel.group.DefaultChannelGroup v0;
java.util.concurrent.ConcurrentMap v14, v16, v4;
java.util.LinkedHashMap v13;
io.netty.channel.ChannelPromise v11;
int v15;
io.netty.channel.group.ChannelMatcher v2;
boolean v19, v21, v3, v7, v9;
java.util.Iterator v18, v6;
java.util.Collection v17, v5;
io.netty.channel.ChannelFuture v23;
io.netty.channel.group.DefaultChannelGroupFuture v24;
io.netty.channel.group.ChannelGroupFuture v12;
java.lang.Object v1, v10, v20, v22, v8;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: io.netty.channel.group.ChannelMatcher;
v3 := @parameter2: boolean;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "message");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "matcher");
if v3 == 0 goto label3;
v4 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap nonServerChannels>;
v5 = interfaceinvoke v4.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();
v6 = interfaceinvoke v5.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label2;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = interfaceinvoke v2.<io.netty.channel.group.ChannelMatcher: boolean matches(io.netty.channel.Channel)>(v8);
if v9 == 0 goto label1;
v10 = staticinvoke <io.netty.channel.group.DefaultChannelGroup: java.lang.Object safeDuplicate(java.lang.Object)>(v1);
v11 = interfaceinvoke v8.<io.netty.channel.Channel: io.netty.channel.ChannelPromise voidPromise()>();
interfaceinvoke v8.<io.netty.channel.Channel: io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)>(v10, v11);
goto label1;
label2:
v12 = v0.<io.netty.channel.group.DefaultChannelGroup: io.netty.channel.group.VoidChannelGroupFuture voidFuture>;
goto label6;
label3:
v13 = new java.util.LinkedHashMap;
v14 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap nonServerChannels>;
v15 = interfaceinvoke v14.<java.util.concurrent.ConcurrentMap: int size()>();
specialinvoke v13.<java.util.LinkedHashMap: void <init>(int)>(v15);
v16 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap nonServerChannels>;
v17 = interfaceinvoke v16.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();
v18 = interfaceinvoke v17.<java.util.Collection: java.util.Iterator iterator()>();
label4:
v19 = interfaceinvoke v18.<java.util.Iterator: boolean hasNext()>();
if v19 == 0 goto label5;
v20 = interfaceinvoke v18.<java.util.Iterator: java.lang.Object next()>();
v21 = interfaceinvoke v2.<io.netty.channel.group.ChannelMatcher: boolean matches(io.netty.channel.Channel)>(v20);
if v21 == 0 goto label4;
v22 = staticinvoke <io.netty.channel.group.DefaultChannelGroup: java.lang.Object safeDuplicate(java.lang.Object)>(v1);
v23 = interfaceinvoke v20.<io.netty.channel.Channel: io.netty.channel.ChannelFuture write(java.lang.Object)>(v22);
interfaceinvoke v13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v20, v23);
goto label4;
label5:
v24 = new io.netty.channel.group.DefaultChannelGroupFuture;
v25 = v0.<io.netty.channel.group.DefaultChannelGroup: io.netty.util.concurrent.EventExecutor executor>;
specialinvoke v24.<io.netty.channel.group.DefaultChannelGroupFuture: void <init>(io.netty.channel.group.ChannelGroup,java.util.Map,io.netty.util.concurrent.EventExecutor)>(v0, v13, v25);
v12 = v24;
label6:
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v1);
return v12;
}
public io.netty.channel.group.ChannelGroup flush()
{
io.netty.channel.group.ChannelMatcher v1;
io.netty.channel.group.ChannelGroup v2;
io.netty.channel.group.DefaultChannelGroup v0;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 = staticinvoke <io.netty.channel.group.ChannelMatchers: io.netty.channel.group.ChannelMatcher all()>();
v2 = virtualinvoke v0.<io.netty.channel.group.DefaultChannelGroup: io.netty.channel.group.ChannelGroup flush(io.netty.channel.group.ChannelMatcher)>(v1);
return v2;
}
public io.netty.channel.group.ChannelGroupFuture flushAndWrite(java.lang.Object)
{
io.netty.channel.group.ChannelGroupFuture v2;
java.lang.Object v1;
io.netty.channel.group.DefaultChannelGroup v0;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.netty.channel.group.DefaultChannelGroup: io.netty.channel.group.ChannelGroupFuture writeAndFlush(java.lang.Object)>(v1);
return v2;
}
public io.netty.channel.group.ChannelGroupFuture writeAndFlush(java.lang.Object)
{
io.netty.channel.group.DefaultChannelGroup v0;
io.netty.channel.group.ChannelMatcher v2;
io.netty.channel.group.ChannelGroupFuture v3;
java.lang.Object v1;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 := @parameter0: java.lang.Object;
v2 = staticinvoke <io.netty.channel.group.ChannelMatchers: io.netty.channel.group.ChannelMatcher all()>();
v3 = virtualinvoke v0.<io.netty.channel.group.DefaultChannelGroup: io.netty.channel.group.ChannelGroupFuture writeAndFlush(java.lang.Object,io.netty.channel.group.ChannelMatcher)>(v1, v2);
return v3;
}
public io.netty.channel.group.ChannelGroupFuture disconnect(io.netty.channel.group.ChannelMatcher)
{
io.netty.util.concurrent.EventExecutor v19;
io.netty.channel.group.DefaultChannelGroup v0;
java.util.concurrent.ConcurrentMap v11, v4;
java.util.LinkedHashMap v2;
int v3;
io.netty.channel.group.ChannelMatcher v1;
boolean v14, v16, v7, v9;
java.util.Iterator v13, v6;
java.util.Collection v12, v5;
io.netty.channel.ChannelFuture v10, v17;
io.netty.channel.group.DefaultChannelGroupFuture v18;
java.lang.Object v15, v8;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 := @parameter0: io.netty.channel.group.ChannelMatcher;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "matcher");
v2 = new java.util.LinkedHashMap;
v3 = virtualinvoke v0.<io.netty.channel.group.DefaultChannelGroup: int size()>();
specialinvoke v2.<java.util.LinkedHashMap: void <init>(int)>(v3);
v4 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap serverChannels>;
v5 = interfaceinvoke v4.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();
v6 = interfaceinvoke v5.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label2;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = interfaceinvoke v1.<io.netty.channel.group.ChannelMatcher: boolean matches(io.netty.channel.Channel)>(v8);
if v9 == 0 goto label1;
v10 = interfaceinvoke v8.<io.netty.channel.Channel: io.netty.channel.ChannelFuture disconnect()>();
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v8, v10);
goto label1;
label2:
v11 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap nonServerChannels>;
v12 = interfaceinvoke v11.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();
v13 = interfaceinvoke v12.<java.util.Collection: java.util.Iterator iterator()>();
label3:
v14 = interfaceinvoke v13.<java.util.Iterator: boolean hasNext()>();
if v14 == 0 goto label4;
v15 = interfaceinvoke v13.<java.util.Iterator: java.lang.Object next()>();
v16 = interfaceinvoke v1.<io.netty.channel.group.ChannelMatcher: boolean matches(io.netty.channel.Channel)>(v15);
if v16 == 0 goto label3;
v17 = interfaceinvoke v15.<io.netty.channel.Channel: io.netty.channel.ChannelFuture disconnect()>();
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v15, v17);
goto label3;
label4:
v18 = new io.netty.channel.group.DefaultChannelGroupFuture;
v19 = v0.<io.netty.channel.group.DefaultChannelGroup: io.netty.util.concurrent.EventExecutor executor>;
specialinvoke v18.<io.netty.channel.group.DefaultChannelGroupFuture: void <init>(io.netty.channel.group.ChannelGroup,java.util.Map,io.netty.util.concurrent.EventExecutor)>(v0, v2, v19);
return v18;
}
public io.netty.channel.group.ChannelGroupFuture close(io.netty.channel.group.ChannelMatcher)
{
io.netty.util.concurrent.EventExecutor v20;
io.netty.channel.group.DefaultChannelGroup v0;
java.util.concurrent.ConcurrentMap v12, v5;
java.util.LinkedHashMap v2;
int v3;
io.netty.channel.group.ChannelMatcher v1;
boolean v10, v15, v17, v4, v8;
java.util.Iterator v14, v7;
java.util.Collection v13, v6;
io.netty.channel.ChannelFuture v11, v18;
io.netty.channel.group.DefaultChannelGroupFuture v19;
java.lang.Object v16, v9;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 := @parameter0: io.netty.channel.group.ChannelMatcher;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "matcher");
v2 = new java.util.LinkedHashMap;
v3 = virtualinvoke v0.<io.netty.channel.group.DefaultChannelGroup: int size()>();
specialinvoke v2.<java.util.LinkedHashMap: void <init>(int)>(v3);
v4 = v0.<io.netty.channel.group.DefaultChannelGroup: boolean stayClosed>;
if v4 == 0 goto label1;
v0.<io.netty.channel.group.DefaultChannelGroup: boolean closed> = 1;
label1:
v5 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap serverChannels>;
v6 = interfaceinvoke v5.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();
v7 = interfaceinvoke v6.<java.util.Collection: java.util.Iterator iterator()>();
label2:
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label3;
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
v10 = interfaceinvoke v1.<io.netty.channel.group.ChannelMatcher: boolean matches(io.netty.channel.Channel)>(v9);
if v10 == 0 goto label2;
v11 = interfaceinvoke v9.<io.netty.channel.Channel: io.netty.channel.ChannelFuture close()>();
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v9, v11);
goto label2;
label3:
v12 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap nonServerChannels>;
v13 = interfaceinvoke v12.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();
v14 = interfaceinvoke v13.<java.util.Collection: java.util.Iterator iterator()>();
label4:
v15 = interfaceinvoke v14.<java.util.Iterator: boolean hasNext()>();
if v15 == 0 goto label5;
v16 = interfaceinvoke v14.<java.util.Iterator: java.lang.Object next()>();
v17 = interfaceinvoke v1.<io.netty.channel.group.ChannelMatcher: boolean matches(io.netty.channel.Channel)>(v16);
if v17 == 0 goto label4;
v18 = interfaceinvoke v16.<io.netty.channel.Channel: io.netty.channel.ChannelFuture close()>();
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v16, v18);
goto label4;
label5:
v19 = new io.netty.channel.group.DefaultChannelGroupFuture;
v20 = v0.<io.netty.channel.group.DefaultChannelGroup: io.netty.util.concurrent.EventExecutor executor>;
specialinvoke v19.<io.netty.channel.group.DefaultChannelGroupFuture: void <init>(io.netty.channel.group.ChannelGroup,java.util.Map,io.netty.util.concurrent.EventExecutor)>(v0, v2, v20);
return v19;
}
public io.netty.channel.group.ChannelGroupFuture deregister(io.netty.channel.group.ChannelMatcher)
{
io.netty.util.concurrent.EventExecutor v19;
io.netty.channel.group.DefaultChannelGroup v0;
java.util.concurrent.ConcurrentMap v11, v4;
java.util.LinkedHashMap v2;
int v3;
io.netty.channel.group.ChannelMatcher v1;
boolean v14, v16, v7, v9;
java.util.Iterator v13, v6;
java.util.Collection v12, v5;
io.netty.channel.ChannelFuture v10, v17;
io.netty.channel.group.DefaultChannelGroupFuture v18;
java.lang.Object v15, v8;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 := @parameter0: io.netty.channel.group.ChannelMatcher;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "matcher");
v2 = new java.util.LinkedHashMap;
v3 = virtualinvoke v0.<io.netty.channel.group.DefaultChannelGroup: int size()>();
specialinvoke v2.<java.util.LinkedHashMap: void <init>(int)>(v3);
v4 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap serverChannels>;
v5 = interfaceinvoke v4.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();
v6 = interfaceinvoke v5.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label2;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = interfaceinvoke v1.<io.netty.channel.group.ChannelMatcher: boolean matches(io.netty.channel.Channel)>(v8);
if v9 == 0 goto label1;
v10 = interfaceinvoke v8.<io.netty.channel.Channel: io.netty.channel.ChannelFuture deregister()>();
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v8, v10);
goto label1;
label2:
v11 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap nonServerChannels>;
v12 = interfaceinvoke v11.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();
v13 = interfaceinvoke v12.<java.util.Collection: java.util.Iterator iterator()>();
label3:
v14 = interfaceinvoke v13.<java.util.Iterator: boolean hasNext()>();
if v14 == 0 goto label4;
v15 = interfaceinvoke v13.<java.util.Iterator: java.lang.Object next()>();
v16 = interfaceinvoke v1.<io.netty.channel.group.ChannelMatcher: boolean matches(io.netty.channel.Channel)>(v15);
if v16 == 0 goto label3;
v17 = interfaceinvoke v15.<io.netty.channel.Channel: io.netty.channel.ChannelFuture deregister()>();
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v15, v17);
goto label3;
label4:
v18 = new io.netty.channel.group.DefaultChannelGroupFuture;
v19 = v0.<io.netty.channel.group.DefaultChannelGroup: io.netty.util.concurrent.EventExecutor executor>;
specialinvoke v18.<io.netty.channel.group.DefaultChannelGroupFuture: void <init>(io.netty.channel.group.ChannelGroup,java.util.Map,io.netty.util.concurrent.EventExecutor)>(v0, v2, v19);
return v18;
}
public io.netty.channel.group.ChannelGroup flush(io.netty.channel.group.ChannelMatcher)
{
java.util.Iterator v4;
io.netty.channel.group.DefaultChannelGroup v0;
java.util.Collection v3;
java.util.concurrent.ConcurrentMap v2;
io.netty.channel.group.ChannelMatcher v1;
java.lang.Object v6;
boolean v5, v7;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 := @parameter0: io.netty.channel.group.ChannelMatcher;
v2 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap nonServerChannels>;
v3 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();
v4 = interfaceinvoke v3.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = interfaceinvoke v1.<io.netty.channel.group.ChannelMatcher: boolean matches(io.netty.channel.Channel)>(v6);
if v7 == 0 goto label1;
interfaceinvoke v6.<io.netty.channel.Channel: io.netty.channel.Channel flush()>();
goto label1;
label2:
return v0;
}
public io.netty.channel.group.ChannelGroupFuture flushAndWrite(java.lang.Object, io.netty.channel.group.ChannelMatcher)
{
io.netty.channel.group.DefaultChannelGroup v0;
io.netty.channel.group.ChannelMatcher v2;
io.netty.channel.group.ChannelGroupFuture v3;
java.lang.Object v1;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: io.netty.channel.group.ChannelMatcher;
v3 = virtualinvoke v0.<io.netty.channel.group.DefaultChannelGroup: io.netty.channel.group.ChannelGroupFuture writeAndFlush(java.lang.Object,io.netty.channel.group.ChannelMatcher)>(v1, v2);
return v3;
}
public io.netty.channel.group.ChannelGroupFuture writeAndFlush(java.lang.Object, io.netty.channel.group.ChannelMatcher)
{
io.netty.channel.group.DefaultChannelGroup v0;
io.netty.channel.group.ChannelMatcher v2;
io.netty.channel.group.ChannelGroupFuture v3;
java.lang.Object v1;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: io.netty.channel.group.ChannelMatcher;
v3 = virtualinvoke v0.<io.netty.channel.group.DefaultChannelGroup: io.netty.channel.group.ChannelGroupFuture writeAndFlush(java.lang.Object,io.netty.channel.group.ChannelMatcher,boolean)>(v1, v2, 0);
return v3;
}
public io.netty.channel.group.ChannelGroupFuture writeAndFlush(java.lang.Object, io.netty.channel.group.ChannelMatcher, boolean)
{
io.netty.util.concurrent.EventExecutor v25;
io.netty.channel.group.DefaultChannelGroup v0;
java.util.concurrent.ConcurrentMap v14, v16, v4;
java.util.LinkedHashMap v13;
io.netty.channel.ChannelPromise v11;
int v15;
io.netty.channel.group.ChannelMatcher v2;
boolean v19, v21, v3, v7, v9;
java.util.Iterator v18, v6;
java.util.Collection v17, v5;
io.netty.channel.ChannelFuture v23;
io.netty.channel.group.DefaultChannelGroupFuture v24;
io.netty.channel.group.ChannelGroupFuture v12;
java.lang.Object v1, v10, v20, v22, v8;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: io.netty.channel.group.ChannelMatcher;
v3 := @parameter2: boolean;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "message");
if v3 == 0 goto label3;
v4 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap nonServerChannels>;
v5 = interfaceinvoke v4.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();
v6 = interfaceinvoke v5.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label2;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = interfaceinvoke v2.<io.netty.channel.group.ChannelMatcher: boolean matches(io.netty.channel.Channel)>(v8);
if v9 == 0 goto label1;
v10 = staticinvoke <io.netty.channel.group.DefaultChannelGroup: java.lang.Object safeDuplicate(java.lang.Object)>(v1);
v11 = interfaceinvoke v8.<io.netty.channel.Channel: io.netty.channel.ChannelPromise voidPromise()>();
interfaceinvoke v8.<io.netty.channel.Channel: io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object,io.netty.channel.ChannelPromise)>(v10, v11);
goto label1;
label2:
v12 = v0.<io.netty.channel.group.DefaultChannelGroup: io.netty.channel.group.VoidChannelGroupFuture voidFuture>;
goto label6;
label3:
v13 = new java.util.LinkedHashMap;
v14 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap nonServerChannels>;
v15 = interfaceinvoke v14.<java.util.concurrent.ConcurrentMap: int size()>();
specialinvoke v13.<java.util.LinkedHashMap: void <init>(int)>(v15);
v16 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap nonServerChannels>;
v17 = interfaceinvoke v16.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();
v18 = interfaceinvoke v17.<java.util.Collection: java.util.Iterator iterator()>();
label4:
v19 = interfaceinvoke v18.<java.util.Iterator: boolean hasNext()>();
if v19 == 0 goto label5;
v20 = interfaceinvoke v18.<java.util.Iterator: java.lang.Object next()>();
v21 = interfaceinvoke v2.<io.netty.channel.group.ChannelMatcher: boolean matches(io.netty.channel.Channel)>(v20);
if v21 == 0 goto label4;
v22 = staticinvoke <io.netty.channel.group.DefaultChannelGroup: java.lang.Object safeDuplicate(java.lang.Object)>(v1);
v23 = interfaceinvoke v20.<io.netty.channel.Channel: io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object)>(v22);
interfaceinvoke v13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v20, v23);
goto label4;
label5:
v24 = new io.netty.channel.group.DefaultChannelGroupFuture;
v25 = v0.<io.netty.channel.group.DefaultChannelGroup: io.netty.util.concurrent.EventExecutor executor>;
specialinvoke v24.<io.netty.channel.group.DefaultChannelGroupFuture: void <init>(io.netty.channel.group.ChannelGroup,java.util.Map,io.netty.util.concurrent.EventExecutor)>(v0, v13, v25);
v12 = v24;
label6:
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v1);
return v12;
}
public io.netty.channel.group.ChannelGroupFuture newCloseFuture()
{
io.netty.channel.group.ChannelMatcher v1;
io.netty.channel.group.ChannelGroupFuture v2;
io.netty.channel.group.DefaultChannelGroup v0;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 = staticinvoke <io.netty.channel.group.ChannelMatchers: io.netty.channel.group.ChannelMatcher all()>();
v2 = virtualinvoke v0.<io.netty.channel.group.DefaultChannelGroup: io.netty.channel.group.ChannelGroupFuture newCloseFuture(io.netty.channel.group.ChannelMatcher)>(v1);
return v2;
}
public io.netty.channel.group.ChannelGroupFuture newCloseFuture(io.netty.channel.group.ChannelMatcher)
{
io.netty.util.concurrent.EventExecutor v19;
io.netty.channel.group.DefaultChannelGroup v0;
java.util.concurrent.ConcurrentMap v11, v4;
java.util.LinkedHashMap v2;
int v3;
io.netty.channel.group.ChannelMatcher v1;
boolean v14, v16, v7, v9;
java.util.Iterator v13, v6;
java.util.Collection v12, v5;
io.netty.channel.ChannelFuture v10, v17;
io.netty.channel.group.DefaultChannelGroupFuture v18;
java.lang.Object v15, v8;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 := @parameter0: io.netty.channel.group.ChannelMatcher;
v2 = new java.util.LinkedHashMap;
v3 = virtualinvoke v0.<io.netty.channel.group.DefaultChannelGroup: int size()>();
specialinvoke v2.<java.util.LinkedHashMap: void <init>(int)>(v3);
v4 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap serverChannels>;
v5 = interfaceinvoke v4.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();
v6 = interfaceinvoke v5.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label2;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = interfaceinvoke v1.<io.netty.channel.group.ChannelMatcher: boolean matches(io.netty.channel.Channel)>(v8);
if v9 == 0 goto label1;
v10 = interfaceinvoke v8.<io.netty.channel.Channel: io.netty.channel.ChannelFuture closeFuture()>();
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v8, v10);
goto label1;
label2:
v11 = v0.<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.ConcurrentMap nonServerChannels>;
v12 = interfaceinvoke v11.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();
v13 = interfaceinvoke v12.<java.util.Collection: java.util.Iterator iterator()>();
label3:
v14 = interfaceinvoke v13.<java.util.Iterator: boolean hasNext()>();
if v14 == 0 goto label4;
v15 = interfaceinvoke v13.<java.util.Iterator: java.lang.Object next()>();
v16 = interfaceinvoke v1.<io.netty.channel.group.ChannelMatcher: boolean matches(io.netty.channel.Channel)>(v15);
if v16 == 0 goto label3;
v17 = interfaceinvoke v15.<io.netty.channel.Channel: io.netty.channel.ChannelFuture closeFuture()>();
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v15, v17);
goto label3;
label4:
v18 = new io.netty.channel.group.DefaultChannelGroupFuture;
v19 = v0.<io.netty.channel.group.DefaultChannelGroup: io.netty.util.concurrent.EventExecutor executor>;
specialinvoke v18.<io.netty.channel.group.DefaultChannelGroupFuture: void <init>(io.netty.channel.group.ChannelGroup,java.util.Map,io.netty.util.concurrent.EventExecutor)>(v0, v2, v19);
return v18;
}
public int hashCode()
{
int v1;
io.netty.channel.group.DefaultChannelGroup v0;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(v0);
return v1;
}
public boolean equals(java.lang.Object)
{
java.lang.Object v1;
io.netty.channel.group.DefaultChannelGroup v0;
boolean v2;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public int compareTo(io.netty.channel.group.ChannelGroup)
{
io.netty.channel.group.ChannelGroup v1;
io.netty.channel.group.DefaultChannelGroup v0;
int v4, v5, v6, v7;
java.lang.String v2, v3;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 := @parameter0: io.netty.channel.group.ChannelGroup;
v2 = virtualinvoke v0.<io.netty.channel.group.DefaultChannelGroup: java.lang.String name()>();
v3 = interfaceinvoke v1.<io.netty.channel.group.ChannelGroup: java.lang.String name()>();
v4 = virtualinvoke v2.<java.lang.String: int compareTo(java.lang.String)>(v3);
if v4 == 0 goto label1;
return v4;
label1:
v5 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(v0);
v6 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(v1);
v7 = v5 - v6;
return v7;
}
public java.lang.String toString()
{
io.netty.channel.group.DefaultChannelGroup v0;
int v3;
java.lang.String v1, v2, v4;
v0 := @this: io.netty.channel.group.DefaultChannelGroup;
v1 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String simpleClassName(java.lang.Object)>(v0);
v2 = virtualinvoke v0.<io.netty.channel.group.DefaultChannelGroup: java.lang.String name()>();
v3 = virtualinvoke v0.<io.netty.channel.group.DefaultChannelGroup: int size()>();
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,int)>(v1, v2, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001(name: \u0001, size: \u0001)");
return v4;
}
static void <clinit>()
{
java.util.concurrent.atomic.AtomicInteger v0;
v0 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v0.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
<io.netty.channel.group.DefaultChannelGroup: java.util.concurrent.atomic.AtomicInteger nextId> = v0;
return;
}
}