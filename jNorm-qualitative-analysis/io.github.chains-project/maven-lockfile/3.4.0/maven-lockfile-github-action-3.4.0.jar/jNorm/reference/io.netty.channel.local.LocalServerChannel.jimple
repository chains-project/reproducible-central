public class io.netty.channel.local.LocalServerChannel extends io.netty.channel.AbstractServerChannel
{
private final io.netty.channel.ChannelConfig config;
private final java.util.Queue inboundBuffer;
private final java.lang.Runnable shutdownHook;
private volatile int state;
private volatile io.netty.channel.local.LocalAddress localAddress;
private volatile boolean acceptInProgress;
public void <init>()
{
io.netty.channel.local.LocalServerChannel v0;
io.netty.buffer.ByteBufAllocator v8;
io.netty.channel.ServerChannelRecvByteBufAllocator v2;
io.netty.channel.local.LocalServerChannel$1 v1;
io.netty.channel.local.LocalServerChannel$2 v4;
io.netty.channel.ChannelConfig v5, v7;
io.netty.channel.PreferHeapByteBufAllocator v6;
java.util.ArrayDeque v3;
v0 := @this: io.netty.channel.local.LocalServerChannel;
specialinvoke v0.<io.netty.channel.AbstractServerChannel: void <init>()>();
v1 = new io.netty.channel.local.LocalServerChannel$1;
v2 = new io.netty.channel.ServerChannelRecvByteBufAllocator;
specialinvoke v2.<io.netty.channel.ServerChannelRecvByteBufAllocator: void <init>()>();
specialinvoke v1.<io.netty.channel.local.LocalServerChannel$1: void <init>(io.netty.channel.local.LocalServerChannel,io.netty.channel.Channel,io.netty.channel.RecvByteBufAllocator)>(v0, v0, v2);
v0.<io.netty.channel.local.LocalServerChannel: io.netty.channel.ChannelConfig config> = v1;
v3 = new java.util.ArrayDeque;
specialinvoke v3.<java.util.ArrayDeque: void <init>()>();
v0.<io.netty.channel.local.LocalServerChannel: java.util.Queue inboundBuffer> = v3;
v4 = new io.netty.channel.local.LocalServerChannel$2;
specialinvoke v4.<io.netty.channel.local.LocalServerChannel$2: void <init>(io.netty.channel.local.LocalServerChannel)>(v0);
v0.<io.netty.channel.local.LocalServerChannel: java.lang.Runnable shutdownHook> = v4;
v5 = virtualinvoke v0.<io.netty.channel.local.LocalServerChannel: io.netty.channel.ChannelConfig config()>();
v6 = new io.netty.channel.PreferHeapByteBufAllocator;
v7 = v0.<io.netty.channel.local.LocalServerChannel: io.netty.channel.ChannelConfig config>;
v8 = interfaceinvoke v7.<io.netty.channel.ChannelConfig: io.netty.buffer.ByteBufAllocator getAllocator()>();
specialinvoke v6.<io.netty.channel.PreferHeapByteBufAllocator: void <init>(io.netty.buffer.ByteBufAllocator)>(v8);
interfaceinvoke v5.<io.netty.channel.ChannelConfig: io.netty.channel.ChannelConfig setAllocator(io.netty.buffer.ByteBufAllocator)>(v6);
return;
}
public io.netty.channel.ChannelConfig config()
{
io.netty.channel.ChannelConfig v1;
io.netty.channel.local.LocalServerChannel v0;
v0 := @this: io.netty.channel.local.LocalServerChannel;
v1 = v0.<io.netty.channel.local.LocalServerChannel: io.netty.channel.ChannelConfig config>;
return v1;
}
public io.netty.channel.local.LocalAddress localAddress()
{
java.net.SocketAddress v1;
io.netty.channel.local.LocalServerChannel v0;
v0 := @this: io.netty.channel.local.LocalServerChannel;
v1 = specialinvoke v0.<io.netty.channel.AbstractServerChannel: java.net.SocketAddress localAddress()>();
return v1;
}
public io.netty.channel.local.LocalAddress remoteAddress()
{
java.net.SocketAddress v1;
io.netty.channel.local.LocalServerChannel v0;
v0 := @this: io.netty.channel.local.LocalServerChannel;
v1 = specialinvoke v0.<io.netty.channel.AbstractServerChannel: java.net.SocketAddress remoteAddress()>();
return v1;
}
public boolean isOpen()
{
int v1;
io.netty.channel.local.LocalServerChannel v0;
boolean v2;
v0 := @this: io.netty.channel.local.LocalServerChannel;
v1 = v0.<io.netty.channel.local.LocalServerChannel: int state>;
if v1 >= 2 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public boolean isActive()
{
int v1;
io.netty.channel.local.LocalServerChannel v0;
boolean v2;
v0 := @this: io.netty.channel.local.LocalServerChannel;
v1 = v0.<io.netty.channel.local.LocalServerChannel: int state>;
if v1 != 1 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
protected boolean isCompatible(io.netty.channel.EventLoop)
{
io.netty.channel.EventLoop v1;
io.netty.channel.local.LocalServerChannel v0;
boolean v2;
v0 := @this: io.netty.channel.local.LocalServerChannel;
v1 := @parameter0: io.netty.channel.EventLoop;
v2 = v1 instanceof io.netty.channel.SingleThreadEventLoop;
return v2;
}
protected java.net.SocketAddress localAddress0()
{
io.netty.channel.local.LocalAddress v1;
io.netty.channel.local.LocalServerChannel v0;
v0 := @this: io.netty.channel.local.LocalServerChannel;
v1 = v0.<io.netty.channel.local.LocalServerChannel: io.netty.channel.local.LocalAddress localAddress>;
return v1;
}
protected void doRegister() throws java.lang.Exception
{
io.netty.channel.EventLoop v1;
io.netty.channel.local.LocalServerChannel v0;
java.lang.Runnable v2;
v0 := @this: io.netty.channel.local.LocalServerChannel;
v1 = virtualinvoke v0.<io.netty.channel.local.LocalServerChannel: io.netty.channel.EventLoop eventLoop()>();
v2 = v0.<io.netty.channel.local.LocalServerChannel: java.lang.Runnable shutdownHook>;
virtualinvoke v1.<io.netty.util.concurrent.SingleThreadEventExecutor: void addShutdownHook(java.lang.Runnable)>(v2);
return;
}
protected void doBind(java.net.SocketAddress) throws java.lang.Exception
{
io.netty.channel.local.LocalAddress v2, v3;
java.net.SocketAddress v1;
io.netty.channel.local.LocalServerChannel v0;
v0 := @this: io.netty.channel.local.LocalServerChannel;
v1 := @parameter0: java.net.SocketAddress;
v2 = v0.<io.netty.channel.local.LocalServerChannel: io.netty.channel.local.LocalAddress localAddress>;
v3 = staticinvoke <io.netty.channel.local.LocalChannelRegistry: io.netty.channel.local.LocalAddress register(io.netty.channel.Channel,io.netty.channel.local.LocalAddress,java.net.SocketAddress)>(v0, v2, v1);
v0.<io.netty.channel.local.LocalServerChannel: io.netty.channel.local.LocalAddress localAddress> = v3;
v0.<io.netty.channel.local.LocalServerChannel: int state> = 1;
return;
}
protected void doClose() throws java.lang.Exception
{
io.netty.channel.local.LocalAddress v2, v3;
io.netty.channel.local.LocalServerChannel v0;
int v1;
v0 := @this: io.netty.channel.local.LocalServerChannel;
v1 = v0.<io.netty.channel.local.LocalServerChannel: int state>;
if v1 > 1 goto label2;
v2 = v0.<io.netty.channel.local.LocalServerChannel: io.netty.channel.local.LocalAddress localAddress>;
if v2 == null goto label1;
v3 = v0.<io.netty.channel.local.LocalServerChannel: io.netty.channel.local.LocalAddress localAddress>;
staticinvoke <io.netty.channel.local.LocalChannelRegistry: void unregister(io.netty.channel.local.LocalAddress)>(v3);
v0.<io.netty.channel.local.LocalServerChannel: io.netty.channel.local.LocalAddress localAddress> = null;
label1:
v0.<io.netty.channel.local.LocalServerChannel: int state> = 2;
label2:
return;
}
protected void doDeregister() throws java.lang.Exception
{
io.netty.channel.EventLoop v1;
io.netty.channel.local.LocalServerChannel v0;
java.lang.Runnable v2;
v0 := @this: io.netty.channel.local.LocalServerChannel;
v1 = virtualinvoke v0.<io.netty.channel.local.LocalServerChannel: io.netty.channel.EventLoop eventLoop()>();
v2 = v0.<io.netty.channel.local.LocalServerChannel: java.lang.Runnable shutdownHook>;
virtualinvoke v1.<io.netty.util.concurrent.SingleThreadEventExecutor: void removeShutdownHook(java.lang.Runnable)>(v2);
return;
}
protected void doBeginRead() throws java.lang.Exception
{
io.netty.channel.local.LocalServerChannel v0;
java.util.Queue v2;
boolean v1, v3;
v0 := @this: io.netty.channel.local.LocalServerChannel;
v1 = v0.<io.netty.channel.local.LocalServerChannel: boolean acceptInProgress>;
if v1 == 0 goto label1;
return;
label1:
v2 = v0.<io.netty.channel.local.LocalServerChannel: java.util.Queue inboundBuffer>;
v3 = interfaceinvoke v2.<java.util.Queue: boolean isEmpty()>();
if v3 == 0 goto label2;
v0.<io.netty.channel.local.LocalServerChannel: boolean acceptInProgress> = 1;
return;
label2:
specialinvoke v0.<io.netty.channel.local.LocalServerChannel: void readInbound()>();
return;
}
io.netty.channel.local.LocalChannel serve(io.netty.channel.local.LocalChannel)
{
io.netty.channel.local.LocalChannel v1, v2;
io.netty.channel.local.LocalServerChannel v0;
io.netty.channel.EventLoop v3, v5;
io.netty.channel.local.LocalServerChannel$3 v6;
boolean v4;
v0 := @this: io.netty.channel.local.LocalServerChannel;
v1 := @parameter0: io.netty.channel.local.LocalChannel;
v2 = virtualinvoke v0.<io.netty.channel.local.LocalServerChannel: io.netty.channel.local.LocalChannel newLocalChannel(io.netty.channel.local.LocalChannel)>(v1);
v3 = virtualinvoke v0.<io.netty.channel.local.LocalServerChannel: io.netty.channel.EventLoop eventLoop()>();
v4 = interfaceinvoke v3.<io.netty.channel.EventLoop: boolean inEventLoop()>();
if v4 == 0 goto label1;
specialinvoke v0.<io.netty.channel.local.LocalServerChannel: void serve0(io.netty.channel.local.LocalChannel)>(v2);
goto label2;
label1:
v5 = virtualinvoke v0.<io.netty.channel.local.LocalServerChannel: io.netty.channel.EventLoop eventLoop()>();
v6 = new io.netty.channel.local.LocalServerChannel$3;
specialinvoke v6.<io.netty.channel.local.LocalServerChannel$3: void <init>(io.netty.channel.local.LocalServerChannel,io.netty.channel.local.LocalChannel)>(v0, v2);
interfaceinvoke v5.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>(v6);
label2:
return v2;
}
private void readInbound()
{
io.netty.channel.local.LocalServerChannel v0;
io.netty.channel.ChannelPipeline v4;
io.netty.channel.Channel$Unsafe v1;
io.netty.channel.RecvByteBufAllocator$Handle v2;
io.netty.channel.ChannelConfig v3;
java.lang.Object v6;
java.util.Queue v5;
boolean v7;
v0 := @this: io.netty.channel.local.LocalServerChannel;
v1 = virtualinvoke v0.<io.netty.channel.local.LocalServerChannel: io.netty.channel.Channel$Unsafe unsafe()>();
v2 = interfaceinvoke v1.<io.netty.channel.Channel$Unsafe: io.netty.channel.RecvByteBufAllocator$Handle recvBufAllocHandle()>();
v3 = virtualinvoke v0.<io.netty.channel.local.LocalServerChannel: io.netty.channel.ChannelConfig config()>();
interfaceinvoke v2.<io.netty.channel.RecvByteBufAllocator$Handle: void reset(io.netty.channel.ChannelConfig)>(v3);
v4 = virtualinvoke v0.<io.netty.channel.local.LocalServerChannel: io.netty.channel.ChannelPipeline pipeline()>();
label1:
v5 = v0.<io.netty.channel.local.LocalServerChannel: java.util.Queue inboundBuffer>;
v6 = interfaceinvoke v5.<java.util.Queue: java.lang.Object poll()>();
if v6 == null goto label2;
interfaceinvoke v4.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireChannelRead(java.lang.Object)>(v6);
v7 = interfaceinvoke v2.<io.netty.channel.RecvByteBufAllocator$Handle: boolean continueReading()>();
if v7 != 0 goto label1;
label2:
interfaceinvoke v2.<io.netty.channel.RecvByteBufAllocator$Handle: void readComplete()>();
interfaceinvoke v4.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireChannelReadComplete()>();
return;
}
protected io.netty.channel.local.LocalChannel newLocalChannel(io.netty.channel.local.LocalChannel)
{
io.netty.channel.local.LocalChannel v1, v2;
io.netty.channel.local.LocalServerChannel v0;
v0 := @this: io.netty.channel.local.LocalServerChannel;
v1 := @parameter0: io.netty.channel.local.LocalChannel;
v2 = new io.netty.channel.local.LocalChannel;
specialinvoke v2.<io.netty.channel.local.LocalChannel: void <init>(io.netty.channel.local.LocalServerChannel,io.netty.channel.local.LocalChannel)>(v0, v1);
return v2;
}
private void serve0(io.netty.channel.local.LocalChannel)
{
io.netty.channel.local.LocalChannel v1;
io.netty.channel.local.LocalServerChannel v0;
java.util.Queue v2;
boolean v3;
v0 := @this: io.netty.channel.local.LocalServerChannel;
v1 := @parameter0: io.netty.channel.local.LocalChannel;
v2 = v0.<io.netty.channel.local.LocalServerChannel: java.util.Queue inboundBuffer>;
interfaceinvoke v2.<java.util.Queue: boolean add(java.lang.Object)>(v1);
v3 = v0.<io.netty.channel.local.LocalServerChannel: boolean acceptInProgress>;
if v3 == 0 goto label1;
v0.<io.netty.channel.local.LocalServerChannel: boolean acceptInProgress> = 0;
specialinvoke v0.<io.netty.channel.local.LocalServerChannel: void readInbound()>();
label1:
return;
}
}