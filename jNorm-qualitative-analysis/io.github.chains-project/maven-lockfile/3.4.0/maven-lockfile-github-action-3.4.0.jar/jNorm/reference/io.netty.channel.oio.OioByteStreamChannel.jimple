public abstract class io.netty.channel.oio.OioByteStreamChannel extends io.netty.channel.oio.AbstractOioByteChannel
{
private static final java.io.InputStream CLOSED_IN;
private static final java.io.OutputStream CLOSED_OUT;
private java.io.InputStream is;
private java.io.OutputStream os;
private java.nio.channels.WritableByteChannel outChannel;
protected void <init>(io.netty.channel.Channel)
{
io.netty.channel.Channel v1;
io.netty.channel.oio.OioByteStreamChannel v0;
v0 := @this: io.netty.channel.oio.OioByteStreamChannel;
v1 := @parameter0: io.netty.channel.Channel;
specialinvoke v0.<io.netty.channel.oio.AbstractOioByteChannel: void <init>(io.netty.channel.Channel)>(v1);
return;
}
protected final void activate(java.io.InputStream, java.io.OutputStream)
{
java.io.OutputStream v2, v5;
java.lang.IllegalStateException v4, v6;
io.netty.channel.EventLoop v10;
java.lang.Runnable v11;
io.netty.channel.oio.OioByteStreamChannel v0;
java.lang.Object v7, v8;
boolean v9;
java.io.InputStream v1, v3;
v0 := @this: io.netty.channel.oio.OioByteStreamChannel;
v1 := @parameter0: java.io.InputStream;
v2 := @parameter1: java.io.OutputStream;
v3 = v0.<io.netty.channel.oio.OioByteStreamChannel: java.io.InputStream is>;
if v3 == null goto label1;
v4 = new java.lang.IllegalStateException;
specialinvoke v4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("input was set already");
throw v4;
label1:
v5 = v0.<io.netty.channel.oio.OioByteStreamChannel: java.io.OutputStream os>;
if v5 == null goto label2;
v6 = new java.lang.IllegalStateException;
specialinvoke v6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("output was set already");
throw v6;
label2:
v7 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "is");
v0.<io.netty.channel.oio.OioByteStreamChannel: java.io.InputStream is> = v7;
v8 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "os");
v0.<io.netty.channel.oio.OioByteStreamChannel: java.io.OutputStream os> = v8;
v9 = v0.<io.netty.channel.oio.OioByteStreamChannel: boolean readWhenInactive>;
if v9 == 0 goto label3;
v10 = virtualinvoke v0.<io.netty.channel.oio.OioByteStreamChannel: io.netty.channel.EventLoop eventLoop()>();
v11 = v0.<io.netty.channel.oio.OioByteStreamChannel: java.lang.Runnable readTask>;
interfaceinvoke v10.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>(v11);
v0.<io.netty.channel.oio.OioByteStreamChannel: boolean readWhenInactive> = 0;
label3:
return;
}
public boolean isActive()
{
java.io.OutputStream v3, v4;
io.netty.channel.oio.OioByteStreamChannel v0;
boolean v5;
java.io.InputStream v1, v2;
v0 := @this: io.netty.channel.oio.OioByteStreamChannel;
v1 = v0.<io.netty.channel.oio.OioByteStreamChannel: java.io.InputStream is>;
if v1 == null goto label1;
v2 = <io.netty.channel.oio.OioByteStreamChannel: java.io.InputStream CLOSED_IN>;
if v1 != v2 goto label2;
label1:
return 0;
label2:
v3 = v0.<io.netty.channel.oio.OioByteStreamChannel: java.io.OutputStream os>;
if v3 == null goto label3;
v4 = <io.netty.channel.oio.OioByteStreamChannel: java.io.OutputStream CLOSED_OUT>;
if v3 == v4 goto label3;
v5 = 1;
goto label4;
label3:
v5 = 0;
label4:
return v5;
}
protected int available()
{
int v2;
java.io.IOException v3;
io.netty.channel.oio.OioByteStreamChannel v0;
java.io.InputStream v1;
v0 := @this: io.netty.channel.oio.OioByteStreamChannel;
label1:
v1 = v0.<io.netty.channel.oio.OioByteStreamChannel: java.io.InputStream is>;
v2 = virtualinvoke v1.<java.io.InputStream: int available()>();
label2:
return v2;
label3:
v3 := @caughtexception;
return 0;
catch java.io.IOException from label1 to label2 with label3;
}
protected int doReadBytes(io.netty.buffer.ByteBuf) throws java.lang.Exception
{
io.netty.channel.Channel$Unsafe v2;
io.netty.channel.oio.OioByteStreamChannel v0;
io.netty.channel.RecvByteBufAllocator$Handle v3;
io.netty.buffer.ByteBuf v1;
int v10, v4, v5, v6, v7, v9;
java.io.InputStream v8;
v0 := @this: io.netty.channel.oio.OioByteStreamChannel;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 = virtualinvoke v0.<io.netty.channel.oio.OioByteStreamChannel: io.netty.channel.Channel$Unsafe unsafe()>();
v3 = interfaceinvoke v2.<io.netty.channel.Channel$Unsafe: io.netty.channel.RecvByteBufAllocator$Handle recvBufAllocHandle()>();
v4 = virtualinvoke v0.<io.netty.channel.oio.OioByteStreamChannel: int available()>();
v5 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int maxWritableBytes()>();
v6 = staticinvoke <java.lang.Math: int min(int,int)>(v4, v5);
v7 = staticinvoke <java.lang.Math: int max(int,int)>(1, v6);
interfaceinvoke v3.<io.netty.channel.RecvByteBufAllocator$Handle: void attemptedBytesRead(int)>(v7);
v8 = v0.<io.netty.channel.oio.OioByteStreamChannel: java.io.InputStream is>;
v9 = interfaceinvoke v3.<io.netty.channel.RecvByteBufAllocator$Handle: int attemptedBytesRead()>();
v10 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int writeBytes(java.io.InputStream,int)>(v8, v9);
return v10;
}
protected void doWriteBytes(io.netty.buffer.ByteBuf) throws java.lang.Exception
{
java.io.OutputStream v2;
java.nio.channels.NotYetConnectedException v3;
io.netty.buffer.ByteBuf v1;
int v4;
io.netty.channel.oio.OioByteStreamChannel v0;
v0 := @this: io.netty.channel.oio.OioByteStreamChannel;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 = v0.<io.netty.channel.oio.OioByteStreamChannel: java.io.OutputStream os>;
if v2 != null goto label1;
v3 = new java.nio.channels.NotYetConnectedException;
specialinvoke v3.<java.nio.channels.NotYetConnectedException: void <init>()>();
throw v3;
label1:
v4 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readBytes(java.io.OutputStream,int)>(v2, v4);
return;
}
protected void doWriteFileRegion(io.netty.channel.FileRegion) throws java.lang.Exception
{
java.io.OutputStream v2;
long v10, v6, v8;
io.netty.channel.oio.OioByteStreamChannel v0;
java.nio.channels.NotYetConnectedException v3;
byte v11, v9;
java.nio.channels.WritableByteChannel v4, v5, v7;
io.netty.channel.FileRegion v1;
v0 := @this: io.netty.channel.oio.OioByteStreamChannel;
v1 := @parameter0: io.netty.channel.FileRegion;
v2 = v0.<io.netty.channel.oio.OioByteStreamChannel: java.io.OutputStream os>;
if v2 != null goto label1;
v3 = new java.nio.channels.NotYetConnectedException;
specialinvoke v3.<java.nio.channels.NotYetConnectedException: void <init>()>();
throw v3;
label1:
v4 = v0.<io.netty.channel.oio.OioByteStreamChannel: java.nio.channels.WritableByteChannel outChannel>;
if v4 != null goto label2;
v5 = staticinvoke <java.nio.channels.Channels: java.nio.channels.WritableByteChannel newChannel(java.io.OutputStream)>(v2);
v0.<io.netty.channel.oio.OioByteStreamChannel: java.nio.channels.WritableByteChannel outChannel> = v5;
label2:
v6 = 0L;
label3:
v7 = v0.<io.netty.channel.oio.OioByteStreamChannel: java.nio.channels.WritableByteChannel outChannel>;
v8 = interfaceinvoke v1.<io.netty.channel.FileRegion: long transferTo(java.nio.channels.WritableByteChannel,long)>(v7, v6);
v9 = v8 cmp -1L;
if v9 != 0 goto label4;
staticinvoke <io.netty.channel.oio.OioByteStreamChannel: void checkEOF(io.netty.channel.FileRegion)>(v1);
return;
label4:
v6 = v6 + v8;
v10 = interfaceinvoke v1.<io.netty.channel.FileRegion: long count()>();
v11 = v6 cmp v10;
if v11 < 0 goto label3;
return;
}
private static void checkEOF(io.netty.channel.FileRegion) throws java.io.IOException
{
long v1, v2, v5, v6;
java.io.EOFException v4;
byte v3;
java.lang.String v7;
io.netty.channel.FileRegion v0;
v0 := @parameter0: io.netty.channel.FileRegion;
v1 = interfaceinvoke v0.<io.netty.channel.FileRegion: long transferred()>();
v2 = interfaceinvoke v0.<io.netty.channel.FileRegion: long count()>();
v3 = v1 cmp v2;
if v3 >= 0 goto label1;
v4 = new java.io.EOFException;
v5 = interfaceinvoke v0.<io.netty.channel.FileRegion: long count()>();
v6 = interfaceinvoke v0.<io.netty.channel.FileRegion: long transferred()>();
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long,long)>(v5, v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Expected to be able to write \u0001 bytes, but only wrote \u0001");
specialinvoke v4.<java.io.EOFException: void <init>(java.lang.String)>(v7);
throw v4;
label1:
return;
}
protected void doClose() throws java.lang.Exception
{
java.io.OutputStream v2, v4;
java.lang.Throwable v5;
io.netty.channel.oio.OioByteStreamChannel v0;
java.io.InputStream v1, v3;
v0 := @this: io.netty.channel.oio.OioByteStreamChannel;
v1 = v0.<io.netty.channel.oio.OioByteStreamChannel: java.io.InputStream is>;
v2 = v0.<io.netty.channel.oio.OioByteStreamChannel: java.io.OutputStream os>;
v3 = <io.netty.channel.oio.OioByteStreamChannel: java.io.InputStream CLOSED_IN>;
v0.<io.netty.channel.oio.OioByteStreamChannel: java.io.InputStream is> = v3;
v4 = <io.netty.channel.oio.OioByteStreamChannel: java.io.OutputStream CLOSED_OUT>;
v0.<io.netty.channel.oio.OioByteStreamChannel: java.io.OutputStream os> = v4;
label1:
if v1 == null goto label2;
virtualinvoke v1.<java.io.InputStream: void close()>();
label2:
if v2 == null goto label5;
virtualinvoke v2.<java.io.OutputStream: void close()>();
goto label5;
label3:
v5 := @caughtexception;
if v2 == null goto label4;
virtualinvoke v2.<java.io.OutputStream: void close()>();
label4:
throw v5;
label5:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
static void <clinit>()
{
io.netty.channel.oio.OioByteStreamChannel$2 v1;
io.netty.channel.oio.OioByteStreamChannel$1 v0;
v0 = new io.netty.channel.oio.OioByteStreamChannel$1;
specialinvoke v0.<io.netty.channel.oio.OioByteStreamChannel$1: void <init>()>();
<io.netty.channel.oio.OioByteStreamChannel: java.io.InputStream CLOSED_IN> = v0;
v1 = new io.netty.channel.oio.OioByteStreamChannel$2;
specialinvoke v1.<io.netty.channel.oio.OioByteStreamChannel$2: void <init>()>();
<io.netty.channel.oio.OioByteStreamChannel: java.io.OutputStream CLOSED_OUT> = v1;
return;
}
}