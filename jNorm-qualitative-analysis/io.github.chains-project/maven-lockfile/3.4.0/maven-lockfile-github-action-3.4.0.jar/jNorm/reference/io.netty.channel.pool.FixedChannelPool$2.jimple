class io.netty.channel.pool.FixedChannelPool$2 extends io.netty.channel.pool.FixedChannelPool$TimeoutTask
{
final io.netty.channel.pool.FixedChannelPool this$0;
void <init>(io.netty.channel.pool.FixedChannelPool)
{
io.netty.channel.pool.FixedChannelPool$2 v0;
io.netty.channel.pool.FixedChannelPool v1;
v0 := @this: io.netty.channel.pool.FixedChannelPool$2;
v1 := @parameter0: io.netty.channel.pool.FixedChannelPool;
v0.<io.netty.channel.pool.FixedChannelPool$2: io.netty.channel.pool.FixedChannelPool this$0> = v1;
specialinvoke v0.<io.netty.channel.pool.FixedChannelPool$TimeoutTask: void <init>(io.netty.channel.pool.FixedChannelPool)>(v1);
return;
}
public void onTimeout(io.netty.channel.pool.FixedChannelPool$AcquireTask)
{
io.netty.channel.pool.FixedChannelPool$2 v0;
io.netty.channel.pool.FixedChannelPool$AcquireTask v1;
io.netty.util.concurrent.Promise v3;
io.netty.channel.pool.FixedChannelPool v2;
v0 := @this: io.netty.channel.pool.FixedChannelPool$2;
v1 := @parameter0: io.netty.channel.pool.FixedChannelPool$AcquireTask;
virtualinvoke v1.<io.netty.channel.pool.FixedChannelPool$AcquireTask: void acquired()>();
v2 = v0.<io.netty.channel.pool.FixedChannelPool$2: io.netty.channel.pool.FixedChannelPool this$0>;
v3 = v1.<io.netty.channel.pool.FixedChannelPool$AcquireTask: io.netty.util.concurrent.Promise promise>;
specialinvoke v2.<io.netty.channel.pool.SimpleChannelPool: io.netty.util.concurrent.Future acquire(io.netty.util.concurrent.Promise)>(v3);
return;
}
}