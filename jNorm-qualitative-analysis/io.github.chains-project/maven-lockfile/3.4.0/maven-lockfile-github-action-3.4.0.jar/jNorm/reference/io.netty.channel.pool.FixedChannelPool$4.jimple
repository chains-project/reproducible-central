class io.netty.channel.pool.FixedChannelPool$4 extends java.lang.Object implements io.netty.util.concurrent.FutureListener
{
static final boolean $assertionsDisabled;
final io.netty.channel.Channel val$channel;
final io.netty.util.concurrent.Promise val$promise;
final io.netty.channel.pool.FixedChannelPool this$0;
void <init>(io.netty.channel.pool.FixedChannelPool, io.netty.channel.Channel, io.netty.util.concurrent.Promise)
{
io.netty.channel.Channel v2;
io.netty.channel.pool.FixedChannelPool$4 v0;
io.netty.util.concurrent.Promise v3;
io.netty.channel.pool.FixedChannelPool v1;
v0 := @this: io.netty.channel.pool.FixedChannelPool$4;
v1 := @parameter0: io.netty.channel.pool.FixedChannelPool;
v2 := @parameter1: io.netty.channel.Channel;
v3 := @parameter2: io.netty.util.concurrent.Promise;
v0.<io.netty.channel.pool.FixedChannelPool$4: io.netty.channel.pool.FixedChannelPool this$0> = v1;
v0.<io.netty.channel.pool.FixedChannelPool$4: io.netty.channel.Channel val$channel> = v2;
v0.<io.netty.channel.pool.FixedChannelPool$4: io.netty.util.concurrent.Promise val$promise> = v3;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void operationComplete(io.netty.util.concurrent.Future)
{
io.netty.util.concurrent.EventExecutor v4;
java.lang.Throwable v15, v19, v20;
java.lang.IllegalStateException v11;
java.lang.AssertionError v6;
io.netty.channel.pool.FixedChannelPool$4 v0;
io.netty.channel.pool.FixedChannelPool v13, v17, v3, v7;
boolean v12, v16, v2, v5, v8;
io.netty.util.concurrent.Promise v10, v14, v18, v21;
io.netty.channel.Channel v9;
io.netty.util.concurrent.Future v1;
v0 := @this: io.netty.channel.pool.FixedChannelPool$4;
v1 := @parameter0: io.netty.util.concurrent.Future;
label1:
v2 = <io.netty.channel.pool.FixedChannelPool$4: boolean $assertionsDisabled>;
if v2 != 0 goto label2;
v3 = v0.<io.netty.channel.pool.FixedChannelPool$4: io.netty.channel.pool.FixedChannelPool this$0>;
v4 = v3.<io.netty.channel.pool.FixedChannelPool: io.netty.util.concurrent.EventExecutor executor>;
v5 = interfaceinvoke v4.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v5 != 0 goto label2;
v6 = new java.lang.AssertionError;
specialinvoke v6.<java.lang.AssertionError: void <init>()>();
throw v6;
label2:
v7 = v0.<io.netty.channel.pool.FixedChannelPool$4: io.netty.channel.pool.FixedChannelPool this$0>;
v8 = v7.<io.netty.channel.pool.FixedChannelPool: boolean closed>;
if v8 == 0 goto label4;
v9 = v0.<io.netty.channel.pool.FixedChannelPool$4: io.netty.channel.Channel val$channel>;
interfaceinvoke v9.<io.netty.channel.Channel: io.netty.channel.ChannelFuture close()>();
v10 = v0.<io.netty.channel.pool.FixedChannelPool$4: io.netty.util.concurrent.Promise val$promise>;
v11 = new java.lang.IllegalStateException;
specialinvoke v11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("FixedChannelPool was closed");
interfaceinvoke v10.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>(v11);
label3:
return;
label4:
v12 = interfaceinvoke v1.<io.netty.util.concurrent.Future: boolean isSuccess()>();
if v12 == 0 goto label5;
v13 = v0.<io.netty.channel.pool.FixedChannelPool$4: io.netty.channel.pool.FixedChannelPool this$0>;
specialinvoke v13.<io.netty.channel.pool.FixedChannelPool: void decrementAndRunTaskQueue()>();
v14 = v0.<io.netty.channel.pool.FixedChannelPool$4: io.netty.util.concurrent.Promise val$promise>;
interfaceinvoke v14.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setSuccess(java.lang.Object)>(null);
goto label9;
label5:
v15 = interfaceinvoke v1.<io.netty.util.concurrent.Future: java.lang.Throwable cause()>();
v16 = v15 instanceof java.lang.IllegalArgumentException;
if v16 != 0 goto label6;
v17 = v0.<io.netty.channel.pool.FixedChannelPool$4: io.netty.channel.pool.FixedChannelPool this$0>;
specialinvoke v17.<io.netty.channel.pool.FixedChannelPool: void decrementAndRunTaskQueue()>();
label6:
v18 = v0.<io.netty.channel.pool.FixedChannelPool$4: io.netty.util.concurrent.Promise val$promise>;
v19 = interfaceinvoke v1.<io.netty.util.concurrent.Future: java.lang.Throwable cause()>();
interfaceinvoke v18.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>(v19);
label7:
goto label9;
label8:
v20 := @caughtexception;
v21 = v0.<io.netty.channel.pool.FixedChannelPool$4: io.netty.util.concurrent.Promise val$promise>;
interfaceinvoke v21.<io.netty.util.concurrent.Promise: boolean tryFailure(java.lang.Throwable)>(v20);
label9:
return;
catch java.lang.Throwable from label1 to label3 with label8;
catch java.lang.Throwable from label4 to label7 with label8;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/channel/pool/FixedChannelPool;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.channel.pool.FixedChannelPool$4: boolean $assertionsDisabled> = v2;
return;
}
}