class io.netty.channel.pool.FixedChannelPool$AcquireListener extends java.lang.Object implements io.netty.util.concurrent.FutureListener
{
private final io.netty.util.concurrent.Promise originalPromise;
protected boolean acquired;
static final boolean $assertionsDisabled;
final io.netty.channel.pool.FixedChannelPool this$0;
void <init>(io.netty.channel.pool.FixedChannelPool, io.netty.util.concurrent.Promise)
{
io.netty.util.concurrent.Promise v2;
io.netty.channel.pool.FixedChannelPool v1;
io.netty.channel.pool.FixedChannelPool$AcquireListener v0;
v0 := @this: io.netty.channel.pool.FixedChannelPool$AcquireListener;
v1 := @parameter0: io.netty.channel.pool.FixedChannelPool;
v2 := @parameter1: io.netty.util.concurrent.Promise;
v0.<io.netty.channel.pool.FixedChannelPool$AcquireListener: io.netty.channel.pool.FixedChannelPool this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.channel.pool.FixedChannelPool$AcquireListener: io.netty.util.concurrent.Promise originalPromise> = v2;
return;
}
public void operationComplete(io.netty.util.concurrent.Future) throws java.lang.Exception
{
io.netty.util.concurrent.EventExecutor v4;
java.lang.Throwable v20, v21;
java.lang.IllegalStateException v12;
java.lang.AssertionError v6;
io.netty.channel.pool.FixedChannelPool v17, v18, v3, v7;
boolean v13, v16, v2, v5, v8, v9;
io.netty.util.concurrent.Promise v11, v14, v19, v22;
io.netty.channel.pool.FixedChannelPool$AcquireListener v0;
java.lang.Object v10, v15;
io.netty.util.concurrent.Future v1;
v0 := @this: io.netty.channel.pool.FixedChannelPool$AcquireListener;
v1 := @parameter0: io.netty.util.concurrent.Future;
label01:
v2 = <io.netty.channel.pool.FixedChannelPool$AcquireListener: boolean $assertionsDisabled>;
if v2 != 0 goto label02;
v3 = v0.<io.netty.channel.pool.FixedChannelPool$AcquireListener: io.netty.channel.pool.FixedChannelPool this$0>;
v4 = v3.<io.netty.channel.pool.FixedChannelPool: io.netty.util.concurrent.EventExecutor executor>;
v5 = interfaceinvoke v4.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v5 != 0 goto label02;
v6 = new java.lang.AssertionError;
specialinvoke v6.<java.lang.AssertionError: void <init>()>();
throw v6;
label02:
v7 = v0.<io.netty.channel.pool.FixedChannelPool$AcquireListener: io.netty.channel.pool.FixedChannelPool this$0>;
v8 = v7.<io.netty.channel.pool.FixedChannelPool: boolean closed>;
if v8 == 0 goto label05;
v9 = interfaceinvoke v1.<io.netty.util.concurrent.Future: boolean isSuccess()>();
if v9 == 0 goto label03;
v10 = interfaceinvoke v1.<io.netty.util.concurrent.Future: java.lang.Object getNow()>();
interfaceinvoke v10.<io.netty.channel.Channel: io.netty.channel.ChannelFuture close()>();
label03:
v11 = v0.<io.netty.channel.pool.FixedChannelPool$AcquireListener: io.netty.util.concurrent.Promise originalPromise>;
v12 = new java.lang.IllegalStateException;
specialinvoke v12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("FixedChannelPool was closed");
interfaceinvoke v11.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>(v12);
label04:
return;
label05:
v13 = interfaceinvoke v1.<io.netty.util.concurrent.Future: boolean isSuccess()>();
if v13 == 0 goto label06;
v14 = v0.<io.netty.channel.pool.FixedChannelPool$AcquireListener: io.netty.util.concurrent.Promise originalPromise>;
v15 = interfaceinvoke v1.<io.netty.util.concurrent.Future: java.lang.Object getNow()>();
interfaceinvoke v14.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setSuccess(java.lang.Object)>(v15);
goto label11;
label06:
v16 = v0.<io.netty.channel.pool.FixedChannelPool$AcquireListener: boolean acquired>;
if v16 == 0 goto label07;
v17 = v0.<io.netty.channel.pool.FixedChannelPool$AcquireListener: io.netty.channel.pool.FixedChannelPool this$0>;
specialinvoke v17.<io.netty.channel.pool.FixedChannelPool: void decrementAndRunTaskQueue()>();
goto label08;
label07:
v18 = v0.<io.netty.channel.pool.FixedChannelPool$AcquireListener: io.netty.channel.pool.FixedChannelPool this$0>;
specialinvoke v18.<io.netty.channel.pool.FixedChannelPool: void runTaskQueue()>();
label08:
v19 = v0.<io.netty.channel.pool.FixedChannelPool$AcquireListener: io.netty.util.concurrent.Promise originalPromise>;
v20 = interfaceinvoke v1.<io.netty.util.concurrent.Future: java.lang.Throwable cause()>();
interfaceinvoke v19.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>(v20);
label09:
goto label11;
label10:
v21 := @caughtexception;
v22 = v0.<io.netty.channel.pool.FixedChannelPool$AcquireListener: io.netty.util.concurrent.Promise originalPromise>;
interfaceinvoke v22.<io.netty.util.concurrent.Promise: boolean tryFailure(java.lang.Throwable)>(v21);
label11:
return;
catch java.lang.Throwable from label01 to label04 with label10;
catch java.lang.Throwable from label05 to label09 with label10;
}
public void acquired()
{
io.netty.channel.pool.FixedChannelPool v2;
io.netty.channel.pool.FixedChannelPool$AcquireListener v0;
java.util.concurrent.atomic.AtomicInteger v3;
boolean v1;
v0 := @this: io.netty.channel.pool.FixedChannelPool$AcquireListener;
v1 = v0.<io.netty.channel.pool.FixedChannelPool$AcquireListener: boolean acquired>;
if v1 == 0 goto label1;
return;
label1:
v2 = v0.<io.netty.channel.pool.FixedChannelPool$AcquireListener: io.netty.channel.pool.FixedChannelPool this$0>;
v3 = v2.<io.netty.channel.pool.FixedChannelPool: java.util.concurrent.atomic.AtomicInteger acquiredChannelCount>;
virtualinvoke v3.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();
v0.<io.netty.channel.pool.FixedChannelPool$AcquireListener: boolean acquired> = 1;
return;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/channel/pool/FixedChannelPool;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.channel.pool.FixedChannelPool$AcquireListener: boolean $assertionsDisabled> = v2;
return;
}
}