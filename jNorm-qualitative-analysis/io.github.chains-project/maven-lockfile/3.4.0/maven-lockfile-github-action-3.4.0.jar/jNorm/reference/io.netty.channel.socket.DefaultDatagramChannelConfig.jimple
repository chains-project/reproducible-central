public class io.netty.channel.socket.DefaultDatagramChannelConfig extends io.netty.channel.DefaultChannelConfig implements io.netty.channel.socket.DatagramChannelConfig
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private final java.net.DatagramSocket javaSocket;
private volatile boolean activeOnOpen;
public void <init>(io.netty.channel.socket.DatagramChannel, java.net.DatagramSocket)
{
java.net.DatagramSocket v2;
io.netty.channel.socket.DatagramChannel v1;
io.netty.channel.FixedRecvByteBufAllocator v3;
java.lang.Object v4;
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
v1 := @parameter0: io.netty.channel.socket.DatagramChannel;
v2 := @parameter1: java.net.DatagramSocket;
v3 = new io.netty.channel.FixedRecvByteBufAllocator;
specialinvoke v3.<io.netty.channel.FixedRecvByteBufAllocator: void <init>(int)>(2048);
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: void <init>(io.netty.channel.Channel,io.netty.channel.RecvByteBufAllocator)>(v1, v3);
v4 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "javaSocket");
v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: java.net.DatagramSocket javaSocket> = v4;
return;
}
protected final java.net.DatagramSocket javaSocket()
{
java.net.DatagramSocket v1;
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
v1 = v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: java.net.DatagramSocket javaSocket>;
return v1;
}
public java.util.Map getOptions()
{
io.netty.channel.ChannelOption v10, v11, v12, v3, v4, v5, v6, v7, v8, v9;
io.netty.channel.ChannelOption[] v2;
java.util.Map v1, v13;
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
v1 = specialinvoke v0.<io.netty.channel.DefaultChannelConfig: java.util.Map getOptions()>();
v2 = newarray (io.netty.channel.ChannelOption)[10];
v3 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_BROADCAST>;
v2[0] = v3;
v4 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_RCVBUF>;
v2[1] = v4;
v5 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_SNDBUF>;
v2[2] = v5;
v6 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_REUSEADDR>;
v2[3] = v6;
v7 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption IP_MULTICAST_LOOP_DISABLED>;
v2[4] = v7;
v8 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption IP_MULTICAST_ADDR>;
v2[5] = v8;
v9 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption IP_MULTICAST_IF>;
v2[6] = v9;
v10 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption IP_MULTICAST_TTL>;
v2[7] = v10;
v11 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption IP_TOS>;
v2[8] = v11;
v12 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION>;
v2[9] = v12;
v13 = virtualinvoke v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: java.util.Map getOptions(java.util.Map,io.netty.channel.ChannelOption[])>(v1, v2);
return v13;
}
public java.lang.Object getOption(io.netty.channel.ChannelOption)
{
io.netty.channel.ChannelOption v1, v11, v14, v17, v19, v2, v21, v24, v27, v5, v8;
java.lang.Integer v10, v23, v26, v7;
java.net.InetAddress v18;
int v22, v25, v6, v9;
java.lang.Boolean v13, v16, v29, v4;
boolean v12, v15, v28, v3;
java.net.NetworkInterface v20;
java.lang.Object v30;
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
v1 := @parameter0: io.netty.channel.ChannelOption;
v2 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_BROADCAST>;
if v1 != v2 goto label01;
v3 = virtualinvoke v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: boolean isBroadcast()>();
v4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v3);
return v4;
label01:
v5 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_RCVBUF>;
if v1 != v5 goto label02;
v6 = virtualinvoke v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: int getReceiveBufferSize()>();
v7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v6);
return v7;
label02:
v8 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_SNDBUF>;
if v1 != v8 goto label03;
v9 = virtualinvoke v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: int getSendBufferSize()>();
v10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v9);
return v10;
label03:
v11 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_REUSEADDR>;
if v1 != v11 goto label04;
v12 = virtualinvoke v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: boolean isReuseAddress()>();
v13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v12);
return v13;
label04:
v14 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption IP_MULTICAST_LOOP_DISABLED>;
if v1 != v14 goto label05;
v15 = virtualinvoke v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: boolean isLoopbackModeDisabled()>();
v16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v15);
return v16;
label05:
v17 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption IP_MULTICAST_ADDR>;
if v1 != v17 goto label06;
v18 = virtualinvoke v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: java.net.InetAddress getInterface()>();
return v18;
label06:
v19 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption IP_MULTICAST_IF>;
if v1 != v19 goto label07;
v20 = virtualinvoke v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: java.net.NetworkInterface getNetworkInterface()>();
return v20;
label07:
v21 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption IP_MULTICAST_TTL>;
if v1 != v21 goto label08;
v22 = virtualinvoke v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: int getTimeToLive()>();
v23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v22);
return v23;
label08:
v24 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption IP_TOS>;
if v1 != v24 goto label09;
v25 = virtualinvoke v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: int getTrafficClass()>();
v26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v25);
return v26;
label09:
v27 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION>;
if v1 != v27 goto label10;
v28 = v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: boolean activeOnOpen>;
v29 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v28);
return v29;
label10:
v30 = specialinvoke v0.<io.netty.channel.DefaultChannelConfig: java.lang.Object getOption(io.netty.channel.ChannelOption)>(v1);
return v30;
}
public boolean setOption(io.netty.channel.ChannelOption, java.lang.Object)
{
io.netty.channel.ChannelOption v1, v11, v13, v14, v15, v17, v19, v3, v5, v7, v9;
int v16, v18, v6, v8;
boolean v10, v12, v20, v21, v4;
java.lang.Object v2;
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
v1 := @parameter0: io.netty.channel.ChannelOption;
v2 := @parameter1: java.lang.Object;
virtualinvoke v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: void validate(io.netty.channel.ChannelOption,java.lang.Object)>(v1, v2);
v3 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_BROADCAST>;
if v1 != v3 goto label01;
v4 = virtualinvoke v2.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: io.netty.channel.socket.DatagramChannelConfig setBroadcast(boolean)>(v4);
goto label11;
label01:
v5 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_RCVBUF>;
if v1 != v5 goto label02;
v6 = virtualinvoke v2.<java.lang.Integer: int intValue()>();
virtualinvoke v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: io.netty.channel.socket.DatagramChannelConfig setReceiveBufferSize(int)>(v6);
goto label11;
label02:
v7 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_SNDBUF>;
if v1 != v7 goto label03;
v8 = virtualinvoke v2.<java.lang.Integer: int intValue()>();
virtualinvoke v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: io.netty.channel.socket.DatagramChannelConfig setSendBufferSize(int)>(v8);
goto label11;
label03:
v9 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_REUSEADDR>;
if v1 != v9 goto label04;
v10 = virtualinvoke v2.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: io.netty.channel.socket.DatagramChannelConfig setReuseAddress(boolean)>(v10);
goto label11;
label04:
v11 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption IP_MULTICAST_LOOP_DISABLED>;
if v1 != v11 goto label05;
v12 = virtualinvoke v2.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: io.netty.channel.socket.DatagramChannelConfig setLoopbackModeDisabled(boolean)>(v12);
goto label11;
label05:
v13 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption IP_MULTICAST_ADDR>;
if v1 != v13 goto label06;
virtualinvoke v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: io.netty.channel.socket.DatagramChannelConfig setInterface(java.net.InetAddress)>(v2);
goto label11;
label06:
v14 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption IP_MULTICAST_IF>;
if v1 != v14 goto label07;
virtualinvoke v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: io.netty.channel.socket.DatagramChannelConfig setNetworkInterface(java.net.NetworkInterface)>(v2);
goto label11;
label07:
v15 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption IP_MULTICAST_TTL>;
if v1 != v15 goto label08;
v16 = virtualinvoke v2.<java.lang.Integer: int intValue()>();
virtualinvoke v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: io.netty.channel.socket.DatagramChannelConfig setTimeToLive(int)>(v16);
goto label11;
label08:
v17 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption IP_TOS>;
if v1 != v17 goto label09;
v18 = virtualinvoke v2.<java.lang.Integer: int intValue()>();
virtualinvoke v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: io.netty.channel.socket.DatagramChannelConfig setTrafficClass(int)>(v18);
goto label11;
label09:
v19 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION>;
if v1 != v19 goto label10;
v20 = virtualinvoke v2.<java.lang.Boolean: boolean booleanValue()>();
specialinvoke v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: void setActiveOnOpen(boolean)>(v20);
goto label11;
label10:
v21 = specialinvoke v0.<io.netty.channel.DefaultChannelConfig: boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)>(v1, v2);
return v21;
label11:
return 1;
}
private void setActiveOnOpen(boolean)
{
io.netty.channel.Channel v2;
java.lang.IllegalStateException v4;
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
boolean v1, v3;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
v1 := @parameter0: boolean;
v2 = v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: io.netty.channel.Channel channel>;
v3 = interfaceinvoke v2.<io.netty.channel.Channel: boolean isRegistered()>();
if v3 == 0 goto label1;
v4 = new java.lang.IllegalStateException;
specialinvoke v4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can only changed before channel was registered");
throw v4;
label1:
v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: boolean activeOnOpen> = v1;
return;
}
public boolean isBroadcast()
{
java.net.DatagramSocket v1;
io.netty.channel.ChannelException v4;
java.net.SocketException v3;
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
boolean v2;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
label1:
v1 = v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: java.net.DatagramSocket javaSocket>;
v2 = virtualinvoke v1.<java.net.DatagramSocket: boolean getBroadcast()>();
label2:
return v2;
label3:
v3 := @caughtexception;
v4 = new io.netty.channel.ChannelException;
specialinvoke v4.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v3);
throw v4;
catch java.net.SocketException from label1 to label2 with label3;
}
public io.netty.channel.socket.DatagramChannelConfig setBroadcast(boolean)
{
java.net.SocketAddress v9;
java.net.DatagramSocket v11, v2, v8;
java.net.InetAddress v3;
io.netty.channel.ChannelException v13;
java.net.SocketException v12;
io.netty.util.internal.logging.InternalLogger v7;
java.lang.String v10;
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
boolean v1, v4, v5, v6;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
v1 := @parameter0: boolean;
label1:
if v1 == 0 goto label2;
v2 = v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: java.net.DatagramSocket javaSocket>;
v3 = virtualinvoke v2.<java.net.DatagramSocket: java.net.InetAddress getLocalAddress()>();
v4 = virtualinvoke v3.<java.net.InetAddress: boolean isAnyLocalAddress()>();
if v4 != 0 goto label2;
v5 = staticinvoke <io.netty.util.internal.PlatformDependent: boolean isWindows()>();
if v5 != 0 goto label2;
v6 = staticinvoke <io.netty.util.internal.PlatformDependent: boolean maybeSuperUser()>();
if v6 != 0 goto label2;
v7 = <io.netty.channel.socket.DefaultDatagramChannelConfig: io.netty.util.internal.logging.InternalLogger logger>;
v8 = v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: java.net.DatagramSocket javaSocket>;
v9 = virtualinvoke v8.<java.net.DatagramSocket: java.net.SocketAddress getLocalSocketAddress()>();
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.net.SocketAddress)>(v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("A non-root user can\'t receive a broadcast packet if the socket is not bound to a wildcard address; setting the SO_BROADCAST flag anyway as requested on the socket which is bound to \u0001.");
interfaceinvoke v7.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String)>(v10);
label2:
v11 = v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: java.net.DatagramSocket javaSocket>;
virtualinvoke v11.<java.net.DatagramSocket: void setBroadcast(boolean)>(v1);
label3:
goto label5;
label4:
v12 := @caughtexception;
v13 = new io.netty.channel.ChannelException;
specialinvoke v13.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v12);
throw v13;
label5:
return v0;
catch java.net.SocketException from label1 to label3 with label4;
}
public java.net.InetAddress getInterface()
{
java.lang.UnsupportedOperationException v7;
java.net.DatagramSocket v1, v3;
java.net.InetAddress v4;
io.netty.channel.ChannelException v6;
java.net.SocketException v5;
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
boolean v2;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
v1 = v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: java.net.DatagramSocket javaSocket>;
v2 = v1 instanceof java.net.MulticastSocket;
if v2 == 0 goto label4;
label1:
v3 = v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: java.net.DatagramSocket javaSocket>;
v4 = virtualinvoke v3.<java.net.MulticastSocket: java.net.InetAddress getInterface()>();
label2:
return v4;
label3:
v5 := @caughtexception;
v6 = new io.netty.channel.ChannelException;
specialinvoke v6.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v5);
throw v6;
label4:
v7 = new java.lang.UnsupportedOperationException;
specialinvoke v7.<java.lang.UnsupportedOperationException: void <init>()>();
throw v7;
catch java.net.SocketException from label1 to label2 with label3;
}
public io.netty.channel.socket.DatagramChannelConfig setInterface(java.net.InetAddress)
{
java.lang.UnsupportedOperationException v7;
java.net.DatagramSocket v2, v4;
java.net.InetAddress v1;
io.netty.channel.ChannelException v6;
java.net.SocketException v5;
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
boolean v3;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
v1 := @parameter0: java.net.InetAddress;
v2 = v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: java.net.DatagramSocket javaSocket>;
v3 = v2 instanceof java.net.MulticastSocket;
if v3 == 0 goto label4;
label1:
v4 = v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: java.net.DatagramSocket javaSocket>;
virtualinvoke v4.<java.net.MulticastSocket: void setInterface(java.net.InetAddress)>(v1);
label2:
goto label5;
label3:
v5 := @caughtexception;
v6 = new io.netty.channel.ChannelException;
specialinvoke v6.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v5);
throw v6;
label4:
v7 = new java.lang.UnsupportedOperationException;
specialinvoke v7.<java.lang.UnsupportedOperationException: void <init>()>();
throw v7;
label5:
return v0;
catch java.net.SocketException from label1 to label2 with label3;
}
public boolean isLoopbackModeDisabled()
{
java.lang.UnsupportedOperationException v7;
java.net.DatagramSocket v1, v3;
io.netty.channel.ChannelException v6;
java.net.SocketException v5;
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
boolean v2, v4;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
v1 = v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: java.net.DatagramSocket javaSocket>;
v2 = v1 instanceof java.net.MulticastSocket;
if v2 == 0 goto label4;
label1:
v3 = v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: java.net.DatagramSocket javaSocket>;
v4 = virtualinvoke v3.<java.net.MulticastSocket: boolean getLoopbackMode()>();
label2:
return v4;
label3:
v5 := @caughtexception;
v6 = new io.netty.channel.ChannelException;
specialinvoke v6.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v5);
throw v6;
label4:
v7 = new java.lang.UnsupportedOperationException;
specialinvoke v7.<java.lang.UnsupportedOperationException: void <init>()>();
throw v7;
catch java.net.SocketException from label1 to label2 with label3;
}
public io.netty.channel.socket.DatagramChannelConfig setLoopbackModeDisabled(boolean)
{
java.lang.UnsupportedOperationException v7;
java.net.DatagramSocket v2, v4;
io.netty.channel.ChannelException v6;
java.net.SocketException v5;
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
boolean v1, v3;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
v1 := @parameter0: boolean;
v2 = v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: java.net.DatagramSocket javaSocket>;
v3 = v2 instanceof java.net.MulticastSocket;
if v3 == 0 goto label4;
label1:
v4 = v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: java.net.DatagramSocket javaSocket>;
virtualinvoke v4.<java.net.MulticastSocket: void setLoopbackMode(boolean)>(v1);
label2:
goto label5;
label3:
v5 := @caughtexception;
v6 = new io.netty.channel.ChannelException;
specialinvoke v6.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v5);
throw v6;
label4:
v7 = new java.lang.UnsupportedOperationException;
specialinvoke v7.<java.lang.UnsupportedOperationException: void <init>()>();
throw v7;
label5:
return v0;
catch java.net.SocketException from label1 to label2 with label3;
}
public java.net.NetworkInterface getNetworkInterface()
{
java.lang.UnsupportedOperationException v7;
java.net.NetworkInterface v4;
java.net.DatagramSocket v1, v3;
io.netty.channel.ChannelException v6;
java.net.SocketException v5;
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
boolean v2;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
v1 = v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: java.net.DatagramSocket javaSocket>;
v2 = v1 instanceof java.net.MulticastSocket;
if v2 == 0 goto label4;
label1:
v3 = v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: java.net.DatagramSocket javaSocket>;
v4 = virtualinvoke v3.<java.net.MulticastSocket: java.net.NetworkInterface getNetworkInterface()>();
label2:
return v4;
label3:
v5 := @caughtexception;
v6 = new io.netty.channel.ChannelException;
specialinvoke v6.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v5);
throw v6;
label4:
v7 = new java.lang.UnsupportedOperationException;
specialinvoke v7.<java.lang.UnsupportedOperationException: void <init>()>();
throw v7;
catch java.net.SocketException from label1 to label2 with label3;
}
public io.netty.channel.socket.DatagramChannelConfig setNetworkInterface(java.net.NetworkInterface)
{
java.lang.UnsupportedOperationException v7;
java.net.NetworkInterface v1;
java.net.DatagramSocket v2, v4;
io.netty.channel.ChannelException v6;
java.net.SocketException v5;
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
boolean v3;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
v1 := @parameter0: java.net.NetworkInterface;
v2 = v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: java.net.DatagramSocket javaSocket>;
v3 = v2 instanceof java.net.MulticastSocket;
if v3 == 0 goto label4;
label1:
v4 = v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: java.net.DatagramSocket javaSocket>;
virtualinvoke v4.<java.net.MulticastSocket: void setNetworkInterface(java.net.NetworkInterface)>(v1);
label2:
goto label5;
label3:
v5 := @caughtexception;
v6 = new io.netty.channel.ChannelException;
specialinvoke v6.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v5);
throw v6;
label4:
v7 = new java.lang.UnsupportedOperationException;
specialinvoke v7.<java.lang.UnsupportedOperationException: void <init>()>();
throw v7;
label5:
return v0;
catch java.net.SocketException from label1 to label2 with label3;
}
public boolean isReuseAddress()
{
java.net.DatagramSocket v1;
io.netty.channel.ChannelException v4;
java.net.SocketException v3;
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
boolean v2;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
label1:
v1 = v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: java.net.DatagramSocket javaSocket>;
v2 = virtualinvoke v1.<java.net.DatagramSocket: boolean getReuseAddress()>();
label2:
return v2;
label3:
v3 := @caughtexception;
v4 = new io.netty.channel.ChannelException;
specialinvoke v4.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v3);
throw v4;
catch java.net.SocketException from label1 to label2 with label3;
}
public io.netty.channel.socket.DatagramChannelConfig setReuseAddress(boolean)
{
java.net.DatagramSocket v2;
io.netty.channel.ChannelException v4;
java.net.SocketException v3;
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
boolean v1;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
v1 := @parameter0: boolean;
label1:
v2 = v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: java.net.DatagramSocket javaSocket>;
virtualinvoke v2.<java.net.DatagramSocket: void setReuseAddress(boolean)>(v1);
label2:
goto label4;
label3:
v3 := @caughtexception;
v4 = new io.netty.channel.ChannelException;
specialinvoke v4.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v3);
throw v4;
label4:
return v0;
catch java.net.SocketException from label1 to label2 with label3;
}
public int getReceiveBufferSize()
{
java.net.DatagramSocket v1;
io.netty.channel.ChannelException v4;
java.net.SocketException v3;
int v2;
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
label1:
v1 = v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: java.net.DatagramSocket javaSocket>;
v2 = virtualinvoke v1.<java.net.DatagramSocket: int getReceiveBufferSize()>();
label2:
return v2;
label3:
v3 := @caughtexception;
v4 = new io.netty.channel.ChannelException;
specialinvoke v4.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v3);
throw v4;
catch java.net.SocketException from label1 to label2 with label3;
}
public io.netty.channel.socket.DatagramChannelConfig setReceiveBufferSize(int)
{
java.net.DatagramSocket v2;
io.netty.channel.ChannelException v4;
java.net.SocketException v3;
int v1;
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
v1 := @parameter0: int;
label1:
v2 = v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: java.net.DatagramSocket javaSocket>;
virtualinvoke v2.<java.net.DatagramSocket: void setReceiveBufferSize(int)>(v1);
label2:
goto label4;
label3:
v3 := @caughtexception;
v4 = new io.netty.channel.ChannelException;
specialinvoke v4.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v3);
throw v4;
label4:
return v0;
catch java.net.SocketException from label1 to label2 with label3;
}
public int getSendBufferSize()
{
java.net.DatagramSocket v1;
io.netty.channel.ChannelException v4;
java.net.SocketException v3;
int v2;
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
label1:
v1 = v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: java.net.DatagramSocket javaSocket>;
v2 = virtualinvoke v1.<java.net.DatagramSocket: int getSendBufferSize()>();
label2:
return v2;
label3:
v3 := @caughtexception;
v4 = new io.netty.channel.ChannelException;
specialinvoke v4.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v3);
throw v4;
catch java.net.SocketException from label1 to label2 with label3;
}
public io.netty.channel.socket.DatagramChannelConfig setSendBufferSize(int)
{
java.net.DatagramSocket v2;
io.netty.channel.ChannelException v4;
java.net.SocketException v3;
int v1;
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
v1 := @parameter0: int;
label1:
v2 = v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: java.net.DatagramSocket javaSocket>;
virtualinvoke v2.<java.net.DatagramSocket: void setSendBufferSize(int)>(v1);
label2:
goto label4;
label3:
v3 := @caughtexception;
v4 = new io.netty.channel.ChannelException;
specialinvoke v4.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v3);
throw v4;
label4:
return v0;
catch java.net.SocketException from label1 to label2 with label3;
}
public int getTimeToLive()
{
java.lang.UnsupportedOperationException v7;
java.io.IOException v5;
java.net.DatagramSocket v1, v3;
io.netty.channel.ChannelException v6;
int v4;
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
boolean v2;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
v1 = v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: java.net.DatagramSocket javaSocket>;
v2 = v1 instanceof java.net.MulticastSocket;
if v2 == 0 goto label4;
label1:
v3 = v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: java.net.DatagramSocket javaSocket>;
v4 = virtualinvoke v3.<java.net.MulticastSocket: int getTimeToLive()>();
label2:
return v4;
label3:
v5 := @caughtexception;
v6 = new io.netty.channel.ChannelException;
specialinvoke v6.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v5);
throw v6;
label4:
v7 = new java.lang.UnsupportedOperationException;
specialinvoke v7.<java.lang.UnsupportedOperationException: void <init>()>();
throw v7;
catch java.io.IOException from label1 to label2 with label3;
}
public io.netty.channel.socket.DatagramChannelConfig setTimeToLive(int)
{
java.lang.UnsupportedOperationException v7;
java.io.IOException v5;
java.net.DatagramSocket v2, v4;
io.netty.channel.ChannelException v6;
int v1;
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
boolean v3;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
v1 := @parameter0: int;
v2 = v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: java.net.DatagramSocket javaSocket>;
v3 = v2 instanceof java.net.MulticastSocket;
if v3 == 0 goto label4;
label1:
v4 = v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: java.net.DatagramSocket javaSocket>;
virtualinvoke v4.<java.net.MulticastSocket: void setTimeToLive(int)>(v1);
label2:
goto label5;
label3:
v5 := @caughtexception;
v6 = new io.netty.channel.ChannelException;
specialinvoke v6.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v5);
throw v6;
label4:
v7 = new java.lang.UnsupportedOperationException;
specialinvoke v7.<java.lang.UnsupportedOperationException: void <init>()>();
throw v7;
label5:
return v0;
catch java.io.IOException from label1 to label2 with label3;
}
public int getTrafficClass()
{
java.net.DatagramSocket v1;
io.netty.channel.ChannelException v4;
java.net.SocketException v3;
int v2;
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
label1:
v1 = v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: java.net.DatagramSocket javaSocket>;
v2 = virtualinvoke v1.<java.net.DatagramSocket: int getTrafficClass()>();
label2:
return v2;
label3:
v3 := @caughtexception;
v4 = new io.netty.channel.ChannelException;
specialinvoke v4.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v3);
throw v4;
catch java.net.SocketException from label1 to label2 with label3;
}
public io.netty.channel.socket.DatagramChannelConfig setTrafficClass(int)
{
java.net.DatagramSocket v2;
io.netty.channel.ChannelException v4;
java.net.SocketException v3;
int v1;
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
v1 := @parameter0: int;
label1:
v2 = v0.<io.netty.channel.socket.DefaultDatagramChannelConfig: java.net.DatagramSocket javaSocket>;
virtualinvoke v2.<java.net.DatagramSocket: void setTrafficClass(int)>(v1);
label2:
goto label4;
label3:
v3 := @caughtexception;
v4 = new io.netty.channel.ChannelException;
specialinvoke v4.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v3);
throw v4;
label4:
return v0;
catch java.net.SocketException from label1 to label2 with label3;
}
public io.netty.channel.socket.DatagramChannelConfig setWriteSpinCount(int)
{
int v1;
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setWriteSpinCount(int)>(v1);
return v0;
}
public io.netty.channel.socket.DatagramChannelConfig setConnectTimeoutMillis(int)
{
int v1;
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setConnectTimeoutMillis(int)>(v1);
return v0;
}
public io.netty.channel.socket.DatagramChannelConfig setMaxMessagesPerRead(int)
{
int v1;
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setMaxMessagesPerRead(int)>(v1);
return v0;
}
public io.netty.channel.socket.DatagramChannelConfig setAllocator(io.netty.buffer.ByteBufAllocator)
{
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
io.netty.buffer.ByteBufAllocator v1;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
v1 := @parameter0: io.netty.buffer.ByteBufAllocator;
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setAllocator(io.netty.buffer.ByteBufAllocator)>(v1);
return v0;
}
public io.netty.channel.socket.DatagramChannelConfig setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator)
{
io.netty.channel.RecvByteBufAllocator v1;
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
v1 := @parameter0: io.netty.channel.RecvByteBufAllocator;
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator)>(v1);
return v0;
}
public io.netty.channel.socket.DatagramChannelConfig setAutoRead(boolean)
{
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
boolean v1;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
v1 := @parameter0: boolean;
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setAutoRead(boolean)>(v1);
return v0;
}
public io.netty.channel.socket.DatagramChannelConfig setAutoClose(boolean)
{
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
boolean v1;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
v1 := @parameter0: boolean;
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setAutoClose(boolean)>(v1);
return v0;
}
public io.netty.channel.socket.DatagramChannelConfig setWriteBufferHighWaterMark(int)
{
int v1;
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setWriteBufferHighWaterMark(int)>(v1);
return v0;
}
public io.netty.channel.socket.DatagramChannelConfig setWriteBufferLowWaterMark(int)
{
int v1;
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setWriteBufferLowWaterMark(int)>(v1);
return v0;
}
public io.netty.channel.socket.DatagramChannelConfig setWriteBufferWaterMark(io.netty.channel.WriteBufferWaterMark)
{
io.netty.channel.WriteBufferWaterMark v1;
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
v1 := @parameter0: io.netty.channel.WriteBufferWaterMark;
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setWriteBufferWaterMark(io.netty.channel.WriteBufferWaterMark)>(v1);
return v0;
}
public io.netty.channel.socket.DatagramChannelConfig setMessageSizeEstimator(io.netty.channel.MessageSizeEstimator)
{
io.netty.channel.MessageSizeEstimator v1;
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
v1 := @parameter0: io.netty.channel.MessageSizeEstimator;
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setMessageSizeEstimator(io.netty.channel.MessageSizeEstimator)>(v1);
return v0;
}
public io.netty.channel.socket.DatagramChannelConfig setMaxMessagesPerWrite(int)
{
int v1;
io.netty.channel.socket.DefaultDatagramChannelConfig v0;
v0 := @this: io.netty.channel.socket.DefaultDatagramChannelConfig;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.channel.DefaultChannelConfig: io.netty.channel.ChannelConfig setMaxMessagesPerWrite(int)>(v1);
return v0;
}
static void <clinit>()
{
io.netty.util.internal.logging.InternalLogger v0;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/channel/socket/DefaultDatagramChannelConfig;");
<io.netty.channel.socket.DefaultDatagramChannelConfig: io.netty.util.internal.logging.InternalLogger logger> = v0;
return;
}
}