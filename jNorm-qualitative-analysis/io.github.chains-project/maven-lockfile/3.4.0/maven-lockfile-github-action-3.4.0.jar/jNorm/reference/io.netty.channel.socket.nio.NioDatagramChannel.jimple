public final class io.netty.channel.socket.nio.NioDatagramChannel extends io.netty.channel.nio.AbstractNioMessageChannel implements io.netty.channel.socket.DatagramChannel
{
private static final io.netty.channel.ChannelMetadata METADATA;
private static final java.nio.channels.spi.SelectorProvider DEFAULT_SELECTOR_PROVIDER;
private static final java.lang.String EXPECTED_TYPES;
private final io.netty.channel.socket.DatagramChannelConfig config;
private java.util.Map memberships;
private static java.nio.channels.DatagramChannel newSocket(java.nio.channels.spi.SelectorProvider)
{
io.netty.channel.ChannelException v3;
java.nio.channels.spi.SelectorProvider v0;
java.nio.channels.DatagramChannel v1;
java.io.IOException v2;
v0 := @parameter0: java.nio.channels.spi.SelectorProvider;
label1:
v1 = virtualinvoke v0.<java.nio.channels.spi.SelectorProvider: java.nio.channels.DatagramChannel openDatagramChannel()>();
label2:
return v1;
label3:
v2 := @caughtexception;
v3 = new io.netty.channel.ChannelException;
specialinvoke v3.<io.netty.channel.ChannelException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to open a socket.", v2);
throw v3;
catch java.io.IOException from label1 to label2 with label3;
}
private static java.nio.channels.DatagramChannel newSocket(java.nio.channels.spi.SelectorProvider, io.netty.channel.socket.InternetProtocolFamily)
{
io.netty.channel.ChannelException v6;
java.nio.channels.spi.SelectorProvider v0;
java.net.ProtocolFamily v3;
java.nio.channels.DatagramChannel v2, v4;
io.netty.channel.socket.InternetProtocolFamily v1;
java.io.IOException v5;
v0 := @parameter0: java.nio.channels.spi.SelectorProvider;
v1 := @parameter1: io.netty.channel.socket.InternetProtocolFamily;
if v1 != null goto label1;
v2 = staticinvoke <io.netty.channel.socket.nio.NioDatagramChannel: java.nio.channels.DatagramChannel newSocket(java.nio.channels.spi.SelectorProvider)>(v0);
return v2;
label1:
staticinvoke <io.netty.channel.socket.nio.NioDatagramChannel: void checkJavaVersion()>();
label2:
v3 = staticinvoke <io.netty.channel.socket.nio.ProtocolFamilyConverter: java.net.ProtocolFamily convert(io.netty.channel.socket.InternetProtocolFamily)>(v1);
v4 = virtualinvoke v0.<java.nio.channels.spi.SelectorProvider: java.nio.channels.DatagramChannel openDatagramChannel(java.net.ProtocolFamily)>(v3);
label3:
return v4;
label4:
v5 := @caughtexception;
v6 = new io.netty.channel.ChannelException;
specialinvoke v6.<io.netty.channel.ChannelException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to open a socket.", v5);
throw v6;
catch java.io.IOException from label2 to label3 with label4;
}
private static void checkJavaVersion()
{
int v0;
java.lang.UnsupportedOperationException v1;
v0 = staticinvoke <io.netty.util.internal.PlatformDependent: int javaVersion()>();
if v0 >= 7 goto label1;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Only supported on java 7+.");
throw v1;
label1:
return;
}
public void <init>()
{
java.nio.channels.spi.SelectorProvider v1;
io.netty.channel.socket.nio.NioDatagramChannel v0;
java.nio.channels.DatagramChannel v2;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 = <io.netty.channel.socket.nio.NioDatagramChannel: java.nio.channels.spi.SelectorProvider DEFAULT_SELECTOR_PROVIDER>;
v2 = staticinvoke <io.netty.channel.socket.nio.NioDatagramChannel: java.nio.channels.DatagramChannel newSocket(java.nio.channels.spi.SelectorProvider)>(v1);
specialinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: void <init>(java.nio.channels.DatagramChannel)>(v2);
return;
}
public void <init>(java.nio.channels.spi.SelectorProvider)
{
java.nio.channels.spi.SelectorProvider v1;
io.netty.channel.socket.nio.NioDatagramChannel v0;
java.nio.channels.DatagramChannel v2;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 := @parameter0: java.nio.channels.spi.SelectorProvider;
v2 = staticinvoke <io.netty.channel.socket.nio.NioDatagramChannel: java.nio.channels.DatagramChannel newSocket(java.nio.channels.spi.SelectorProvider)>(v1);
specialinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: void <init>(java.nio.channels.DatagramChannel)>(v2);
return;
}
public void <init>(io.netty.channel.socket.InternetProtocolFamily)
{
java.nio.channels.spi.SelectorProvider v2;
io.netty.channel.socket.nio.NioDatagramChannel v0;
java.nio.channels.DatagramChannel v3;
io.netty.channel.socket.InternetProtocolFamily v1;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 := @parameter0: io.netty.channel.socket.InternetProtocolFamily;
v2 = <io.netty.channel.socket.nio.NioDatagramChannel: java.nio.channels.spi.SelectorProvider DEFAULT_SELECTOR_PROVIDER>;
v3 = staticinvoke <io.netty.channel.socket.nio.NioDatagramChannel: java.nio.channels.DatagramChannel newSocket(java.nio.channels.spi.SelectorProvider,io.netty.channel.socket.InternetProtocolFamily)>(v2, v1);
specialinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: void <init>(java.nio.channels.DatagramChannel)>(v3);
return;
}
public void <init>(java.nio.channels.spi.SelectorProvider, io.netty.channel.socket.InternetProtocolFamily)
{
java.nio.channels.spi.SelectorProvider v1;
io.netty.channel.socket.nio.NioDatagramChannel v0;
java.nio.channels.DatagramChannel v3;
io.netty.channel.socket.InternetProtocolFamily v2;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 := @parameter0: java.nio.channels.spi.SelectorProvider;
v2 := @parameter1: io.netty.channel.socket.InternetProtocolFamily;
v3 = staticinvoke <io.netty.channel.socket.nio.NioDatagramChannel: java.nio.channels.DatagramChannel newSocket(java.nio.channels.spi.SelectorProvider,io.netty.channel.socket.InternetProtocolFamily)>(v1, v2);
specialinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: void <init>(java.nio.channels.DatagramChannel)>(v3);
return;
}
public void <init>(java.nio.channels.DatagramChannel)
{
io.netty.channel.socket.nio.NioDatagramChannel v0;
io.netty.channel.socket.nio.NioDatagramChannelConfig v2;
java.nio.channels.DatagramChannel v1;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 := @parameter0: java.nio.channels.DatagramChannel;
specialinvoke v0.<io.netty.channel.nio.AbstractNioMessageChannel: void <init>(io.netty.channel.Channel,java.nio.channels.SelectableChannel,int)>(null, v1, 1);
v2 = new io.netty.channel.socket.nio.NioDatagramChannelConfig;
specialinvoke v2.<io.netty.channel.socket.nio.NioDatagramChannelConfig: void <init>(io.netty.channel.socket.nio.NioDatagramChannel,java.nio.channels.DatagramChannel)>(v0, v1);
v0.<io.netty.channel.socket.nio.NioDatagramChannel: io.netty.channel.socket.DatagramChannelConfig config> = v2;
return;
}
public io.netty.channel.ChannelMetadata metadata()
{
io.netty.channel.ChannelMetadata v1;
io.netty.channel.socket.nio.NioDatagramChannel v0;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 = <io.netty.channel.socket.nio.NioDatagramChannel: io.netty.channel.ChannelMetadata METADATA>;
return v1;
}
public io.netty.channel.socket.DatagramChannelConfig config()
{
io.netty.channel.socket.nio.NioDatagramChannel v0;
io.netty.channel.socket.DatagramChannelConfig v1;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 = v0.<io.netty.channel.socket.nio.NioDatagramChannel: io.netty.channel.socket.DatagramChannelConfig config>;
return v1;
}
public boolean isActive()
{
io.netty.channel.ChannelOption v4;
java.nio.channels.DatagramChannel v1;
java.net.DatagramSocket v8;
io.netty.channel.socket.nio.NioDatagramChannel v0;
io.netty.channel.socket.DatagramChannelConfig v3;
java.lang.Object v5;
boolean v10, v2, v6, v7, v9;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: java.nio.channels.DatagramChannel javaChannel()>();
v2 = virtualinvoke v1.<java.nio.channels.DatagramChannel: boolean isOpen()>();
if v2 == 0 goto label3;
v3 = v0.<io.netty.channel.socket.nio.NioDatagramChannel: io.netty.channel.socket.DatagramChannelConfig config>;
v4 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION>;
v5 = interfaceinvoke v3.<io.netty.channel.socket.DatagramChannelConfig: java.lang.Object getOption(io.netty.channel.ChannelOption)>(v4);
v6 = virtualinvoke v5.<java.lang.Boolean: boolean booleanValue()>();
if v6 == 0 goto label1;
v7 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: boolean isRegistered()>();
if v7 != 0 goto label2;
label1:
v8 = virtualinvoke v1.<java.nio.channels.DatagramChannel: java.net.DatagramSocket socket()>();
v9 = virtualinvoke v8.<java.net.DatagramSocket: boolean isBound()>();
if v9 == 0 goto label3;
label2:
v10 = 1;
goto label4;
label3:
v10 = 0;
label4:
return v10;
}
public boolean isConnected()
{
io.netty.channel.socket.nio.NioDatagramChannel v0;
boolean v2;
java.nio.channels.DatagramChannel v1;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: java.nio.channels.DatagramChannel javaChannel()>();
v2 = virtualinvoke v1.<java.nio.channels.DatagramChannel: boolean isConnected()>();
return v2;
}
protected java.nio.channels.DatagramChannel javaChannel()
{
io.netty.channel.socket.nio.NioDatagramChannel v0;
java.nio.channels.SelectableChannel v1;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 = specialinvoke v0.<io.netty.channel.nio.AbstractNioMessageChannel: java.nio.channels.SelectableChannel javaChannel()>();
return v1;
}
protected java.net.SocketAddress localAddress0()
{
java.net.DatagramSocket v2;
io.netty.channel.socket.nio.NioDatagramChannel v0;
java.net.SocketAddress v3;
java.nio.channels.DatagramChannel v1;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: java.nio.channels.DatagramChannel javaChannel()>();
v2 = virtualinvoke v1.<java.nio.channels.DatagramChannel: java.net.DatagramSocket socket()>();
v3 = virtualinvoke v2.<java.net.DatagramSocket: java.net.SocketAddress getLocalSocketAddress()>();
return v3;
}
protected java.net.SocketAddress remoteAddress0()
{
java.net.DatagramSocket v2;
io.netty.channel.socket.nio.NioDatagramChannel v0;
java.net.SocketAddress v3;
java.nio.channels.DatagramChannel v1;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: java.nio.channels.DatagramChannel javaChannel()>();
v2 = virtualinvoke v1.<java.nio.channels.DatagramChannel: java.net.DatagramSocket socket()>();
v3 = virtualinvoke v2.<java.net.DatagramSocket: java.net.SocketAddress getRemoteSocketAddress()>();
return v3;
}
protected void doBind(java.net.SocketAddress) throws java.lang.Exception
{
io.netty.channel.socket.nio.NioDatagramChannel v0;
java.net.SocketAddress v1;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 := @parameter0: java.net.SocketAddress;
specialinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: void doBind0(java.net.SocketAddress)>(v1);
return;
}
private void doBind0(java.net.SocketAddress) throws java.lang.Exception
{
java.net.DatagramSocket v5;
io.netty.channel.socket.nio.NioDatagramChannel v0;
java.net.SocketAddress v1;
java.nio.channels.DatagramChannel v3, v4;
int v2;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 := @parameter0: java.net.SocketAddress;
v2 = staticinvoke <io.netty.util.internal.PlatformDependent: int javaVersion()>();
if v2 < 7 goto label1;
v3 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: java.nio.channels.DatagramChannel javaChannel()>();
staticinvoke <io.netty.util.internal.SocketUtils: void bind(java.nio.channels.DatagramChannel,java.net.SocketAddress)>(v3, v1);
goto label2;
label1:
v4 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: java.nio.channels.DatagramChannel javaChannel()>();
v5 = virtualinvoke v4.<java.nio.channels.DatagramChannel: java.net.DatagramSocket socket()>();
virtualinvoke v5.<java.net.DatagramSocket: void bind(java.net.SocketAddress)>(v1);
label2:
return;
}
protected boolean doConnect(java.net.SocketAddress, java.net.SocketAddress) throws java.lang.Exception
{
java.lang.Throwable v4;
io.netty.channel.socket.nio.NioDatagramChannel v0;
java.net.SocketAddress v1, v2;
java.nio.channels.DatagramChannel v3;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 := @parameter0: java.net.SocketAddress;
v2 := @parameter1: java.net.SocketAddress;
if v2 == null goto label1;
specialinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: void doBind0(java.net.SocketAddress)>(v2);
label1:
v3 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: java.nio.channels.DatagramChannel javaChannel()>();
virtualinvoke v3.<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel connect(java.net.SocketAddress)>(v1);
label2:
return 1;
label3:
v4 := @caughtexception;
virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: void doClose()>();
throw v4;
catch java.lang.Throwable from label1 to label2 with label3;
}
protected void doFinishConnect() throws java.lang.Exception
{
java.lang.Error v1;
io.netty.channel.socket.nio.NioDatagramChannel v0;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 = new java.lang.Error;
specialinvoke v1.<java.lang.Error: void <init>()>();
throw v1;
}
protected void doDisconnect() throws java.lang.Exception
{
io.netty.channel.socket.nio.NioDatagramChannel v0;
java.nio.channels.DatagramChannel v1;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: java.nio.channels.DatagramChannel javaChannel()>();
virtualinvoke v1.<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel disconnect()>();
return;
}
protected void doClose() throws java.lang.Exception
{
io.netty.channel.socket.nio.NioDatagramChannel v0;
java.nio.channels.DatagramChannel v1;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: java.nio.channels.DatagramChannel javaChannel()>();
virtualinvoke v1.<java.nio.channels.DatagramChannel: void close()>();
return;
}
protected int doReadMessages(java.util.List) throws java.lang.Exception
{
java.lang.Throwable v23, v24;
java.net.SocketAddress v14;
io.netty.buffer.ByteBufAllocator v6;
java.nio.channels.DatagramChannel v2;
java.nio.ByteBuffer v12;
io.netty.buffer.ByteBuf v21, v7;
io.netty.channel.socket.DatagramChannelConfig v3;
int v10, v11, v13, v15, v16, v18, v19, v20, v8;
io.netty.channel.socket.DatagramPacket v17;
boolean v9;
io.netty.channel.nio.AbstractNioChannel$NioUnsafe v4;
java.net.InetSocketAddress v22;
java.util.List v1;
io.netty.channel.RecvByteBufAllocator$Handle v5;
io.netty.channel.socket.nio.NioDatagramChannel v0;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 := @parameter0: java.util.List;
v2 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: java.nio.channels.DatagramChannel javaChannel()>();
v3 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: io.netty.channel.socket.DatagramChannelConfig config()>();
v4 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: io.netty.channel.nio.AbstractNioChannel$NioUnsafe unsafe()>();
v5 = interfaceinvoke v4.<io.netty.channel.nio.AbstractNioChannel$NioUnsafe: io.netty.channel.RecvByteBufAllocator$Handle recvBufAllocHandle()>();
v6 = interfaceinvoke v3.<io.netty.channel.socket.DatagramChannelConfig: io.netty.buffer.ByteBufAllocator getAllocator()>();
v7 = interfaceinvoke v5.<io.netty.channel.RecvByteBufAllocator$Handle: io.netty.buffer.ByteBuf allocate(io.netty.buffer.ByteBufAllocator)>(v6);
v8 = virtualinvoke v7.<io.netty.buffer.ByteBuf: int writableBytes()>();
interfaceinvoke v5.<io.netty.channel.RecvByteBufAllocator$Handle: void attemptedBytesRead(int)>(v8);
v9 = 1;
label1:
v10 = virtualinvoke v7.<io.netty.buffer.ByteBuf: int writerIndex()>();
v11 = virtualinvoke v7.<io.netty.buffer.ByteBuf: int writableBytes()>();
v12 = virtualinvoke v7.<io.netty.buffer.ByteBuf: java.nio.ByteBuffer internalNioBuffer(int,int)>(v10, v11);
v13 = virtualinvoke v12.<java.nio.ByteBuffer: int position()>();
v14 = virtualinvoke v2.<java.nio.channels.DatagramChannel: java.net.SocketAddress receive(java.nio.ByteBuffer)>(v12);
if v14 != null goto label3;
label2:
virtualinvoke v7.<io.netty.buffer.ByteBuf: boolean release()>();
return 0;
label3:
v15 = virtualinvoke v12.<java.nio.ByteBuffer: int position()>();
v16 = v15 - v13;
interfaceinvoke v5.<io.netty.channel.RecvByteBufAllocator$Handle: void lastBytesRead(int)>(v16);
v17 = new io.netty.channel.socket.DatagramPacket;
v18 = virtualinvoke v7.<io.netty.buffer.ByteBuf: int writerIndex()>();
v19 = interfaceinvoke v5.<io.netty.channel.RecvByteBufAllocator$Handle: int lastBytesRead()>();
v20 = v18 + v19;
v21 = virtualinvoke v7.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writerIndex(int)>(v20);
v22 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: java.net.InetSocketAddress localAddress()>();
specialinvoke v17.<io.netty.channel.socket.DatagramPacket: void <init>(io.netty.buffer.ByteBuf,java.net.InetSocketAddress,java.net.InetSocketAddress)>(v21, v22, v14);
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v17);
label4:
return 1;
label5:
v23 := @caughtexception;
staticinvoke <io.netty.util.internal.PlatformDependent: void throwException(java.lang.Throwable)>(v23);
label6:
virtualinvoke v7.<io.netty.buffer.ByteBuf: boolean release()>();
return -1;
label7:
v24 := @caughtexception;
if v9 == 0 goto label8;
virtualinvoke v7.<io.netty.buffer.ByteBuf: boolean release()>();
label8:
throw v24;
catch java.lang.Throwable from label1 to label2 with label5;
catch java.lang.Throwable from label3 to label4 with label5;
catch java.lang.Throwable from label5 to label6 with label7;
}
protected boolean doWriteMessage(java.lang.Object, io.netty.channel.ChannelOutboundBuffer) throws java.lang.Exception
{
java.net.SocketAddress v4;
java.nio.channels.DatagramChannel v11, v13;
java.nio.ByteBuffer v9;
io.netty.channel.ChannelOutboundBuffer v2;
io.netty.channel.socket.nio.NioDatagramChannel v0;
int v10, v12, v6, v7, v8;
java.lang.Object v1, v5;
boolean v14, v3;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: io.netty.channel.ChannelOutboundBuffer;
v3 = v1 instanceof io.netty.channel.AddressedEnvelope;
if v3 == 0 goto label1;
v4 = interfaceinvoke v1.<io.netty.channel.AddressedEnvelope: java.net.SocketAddress recipient()>();
v5 = interfaceinvoke v1.<io.netty.channel.AddressedEnvelope: java.lang.Object content()>();
goto label2;
label1:
v4 = null;
label2:
v6 = virtualinvoke v5.<io.netty.buffer.ByteBuf: int readableBytes()>();
if v6 != 0 goto label3;
return 1;
label3:
v7 = virtualinvoke v5.<io.netty.buffer.ByteBuf: int nioBufferCount()>();
if v7 != 1 goto label4;
v8 = virtualinvoke v5.<io.netty.buffer.ByteBuf: int readerIndex()>();
v9 = virtualinvoke v5.<io.netty.buffer.ByteBuf: java.nio.ByteBuffer internalNioBuffer(int,int)>(v8, v6);
goto label5;
label4:
v10 = virtualinvoke v5.<io.netty.buffer.ByteBuf: int readerIndex()>();
v9 = virtualinvoke v5.<io.netty.buffer.ByteBuf: java.nio.ByteBuffer nioBuffer(int,int)>(v10, v6);
label5:
if v4 == null goto label6;
v11 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: java.nio.channels.DatagramChannel javaChannel()>();
v12 = virtualinvoke v11.<java.nio.channels.DatagramChannel: int send(java.nio.ByteBuffer,java.net.SocketAddress)>(v9, v4);
goto label7;
label6:
v13 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: java.nio.channels.DatagramChannel javaChannel()>();
v12 = virtualinvoke v13.<java.nio.channels.DatagramChannel: int write(java.nio.ByteBuffer)>(v9);
label7:
if v12 <= 0 goto label8;
v14 = 1;
goto label9;
label8:
v14 = 0;
label9:
return v14;
}
private static void checkUnresolved(io.netty.channel.AddressedEnvelope)
{
java.net.SocketAddress v1, v3;
java.nio.channels.UnresolvedAddressException v5;
io.netty.channel.AddressedEnvelope v0;
boolean v2, v4;
v0 := @parameter0: io.netty.channel.AddressedEnvelope;
v1 = interfaceinvoke v0.<io.netty.channel.AddressedEnvelope: java.net.SocketAddress recipient()>();
v2 = v1 instanceof java.net.InetSocketAddress;
if v2 == 0 goto label1;
v3 = interfaceinvoke v0.<io.netty.channel.AddressedEnvelope: java.net.SocketAddress recipient()>();
v4 = virtualinvoke v3.<java.net.InetSocketAddress: boolean isUnresolved()>();
if v4 == 0 goto label1;
v5 = new java.nio.channels.UnresolvedAddressException;
specialinvoke v5.<java.nio.channels.UnresolvedAddressException: void <init>()>();
throw v5;
label1:
return;
}
protected java.lang.Object filterOutboundMessage(java.lang.Object)
{
io.netty.channel.DefaultAddressedEnvelope v16;
java.net.SocketAddress v18, v7;
io.netty.buffer.ByteBuf v10, v17, v6;
io.netty.channel.socket.DatagramPacket v5;
java.lang.String v20, v21, v22;
boolean v11, v13, v15, v2, v4, v8, v9;
java.lang.UnsupportedOperationException v19;
io.netty.channel.socket.nio.NioDatagramChannel v0;
java.lang.Object v1, v12, v14, v3;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 := @parameter0: java.lang.Object;
v2 = v1 instanceof io.netty.channel.socket.DatagramPacket;
if v2 == 0 goto label2;
staticinvoke <io.netty.channel.socket.nio.NioDatagramChannel: void checkUnresolved(io.netty.channel.AddressedEnvelope)>(v1);
v3 = virtualinvoke v1.<io.netty.channel.socket.DatagramPacket: java.lang.Object content()>();
v4 = staticinvoke <io.netty.channel.socket.nio.NioDatagramChannel: boolean isSingleDirectBuffer(io.netty.buffer.ByteBuf)>(v3);
if v4 == 0 goto label1;
return v1;
label1:
v5 = new io.netty.channel.socket.DatagramPacket;
v6 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: io.netty.buffer.ByteBuf newDirectBuffer(io.netty.util.ReferenceCounted,io.netty.buffer.ByteBuf)>(v1, v3);
v7 = virtualinvoke v1.<io.netty.channel.socket.DatagramPacket: java.net.SocketAddress recipient()>();
specialinvoke v5.<io.netty.channel.socket.DatagramPacket: void <init>(io.netty.buffer.ByteBuf,java.net.InetSocketAddress)>(v6, v7);
return v5;
label2:
v8 = v1 instanceof io.netty.buffer.ByteBuf;
if v8 == 0 goto label4;
v9 = staticinvoke <io.netty.channel.socket.nio.NioDatagramChannel: boolean isSingleDirectBuffer(io.netty.buffer.ByteBuf)>(v1);
if v9 == 0 goto label3;
return v1;
label3:
v10 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: io.netty.buffer.ByteBuf newDirectBuffer(io.netty.buffer.ByteBuf)>(v1);
return v10;
label4:
v11 = v1 instanceof io.netty.channel.AddressedEnvelope;
if v11 == 0 goto label6;
staticinvoke <io.netty.channel.socket.nio.NioDatagramChannel: void checkUnresolved(io.netty.channel.AddressedEnvelope)>(v1);
v12 = interfaceinvoke v1.<io.netty.channel.AddressedEnvelope: java.lang.Object content()>();
v13 = v12 instanceof io.netty.buffer.ByteBuf;
if v13 == 0 goto label6;
v14 = interfaceinvoke v1.<io.netty.channel.AddressedEnvelope: java.lang.Object content()>();
v15 = staticinvoke <io.netty.channel.socket.nio.NioDatagramChannel: boolean isSingleDirectBuffer(io.netty.buffer.ByteBuf)>(v14);
if v15 == 0 goto label5;
return v1;
label5:
v16 = new io.netty.channel.DefaultAddressedEnvelope;
v17 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: io.netty.buffer.ByteBuf newDirectBuffer(io.netty.util.ReferenceCounted,io.netty.buffer.ByteBuf)>(v1, v14);
v18 = interfaceinvoke v1.<io.netty.channel.AddressedEnvelope: java.net.SocketAddress recipient()>();
specialinvoke v16.<io.netty.channel.DefaultAddressedEnvelope: void <init>(java.lang.Object,java.net.SocketAddress)>(v17, v18);
return v16;
label6:
v19 = new java.lang.UnsupportedOperationException;
v20 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String simpleClassName(java.lang.Object)>(v1);
v21 = <io.netty.channel.socket.nio.NioDatagramChannel: java.lang.String EXPECTED_TYPES>;
v22 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v20, v21) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unsupported message type: \u0001\u0001");
specialinvoke v19.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(v22);
throw v19;
}
private static boolean isSingleDirectBuffer(io.netty.buffer.ByteBuf)
{
io.netty.buffer.ByteBuf v0;
int v2;
boolean v1, v3;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 = virtualinvoke v0.<io.netty.buffer.ByteBuf: boolean isDirect()>();
if v1 == 0 goto label1;
v2 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int nioBufferCount()>();
if v2 != 1 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
protected boolean continueOnWriteError()
{
io.netty.channel.socket.nio.NioDatagramChannel v0;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
return 1;
}
public java.net.InetSocketAddress localAddress()
{
io.netty.channel.socket.nio.NioDatagramChannel v0;
java.net.SocketAddress v1;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 = specialinvoke v0.<io.netty.channel.nio.AbstractNioMessageChannel: java.net.SocketAddress localAddress()>();
return v1;
}
public java.net.InetSocketAddress remoteAddress()
{
io.netty.channel.socket.nio.NioDatagramChannel v0;
java.net.SocketAddress v1;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 = specialinvoke v0.<io.netty.channel.nio.AbstractNioMessageChannel: java.net.SocketAddress remoteAddress()>();
return v1;
}
public io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress)
{
java.net.InetAddress v1;
io.netty.channel.ChannelPromise v2;
io.netty.channel.socket.nio.NioDatagramChannel v0;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 := @parameter0: java.net.InetAddress;
v2 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: io.netty.channel.ChannelPromise newPromise()>();
v3 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)>(v1, v2);
return v3;
}
public io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress, io.netty.channel.ChannelPromise)
{
java.net.NetworkInterface v4;
java.net.InetSocketAddress v5;
io.netty.channel.ChannelFuture v7;
java.net.InetAddress v1, v6;
java.net.SocketException v8;
io.netty.channel.ChannelPromise v2;
io.netty.channel.socket.nio.NioDatagramChannel v0;
io.netty.channel.socket.DatagramChannelConfig v3;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 := @parameter0: java.net.InetAddress;
v2 := @parameter1: io.netty.channel.ChannelPromise;
label1:
v3 = v0.<io.netty.channel.socket.nio.NioDatagramChannel: io.netty.channel.socket.DatagramChannelConfig config>;
v4 = interfaceinvoke v3.<io.netty.channel.socket.DatagramChannelConfig: java.net.NetworkInterface getNetworkInterface()>();
if v4 != null goto label2;
v5 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: java.net.InetSocketAddress localAddress()>();
v6 = virtualinvoke v5.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
v4 = staticinvoke <java.net.NetworkInterface: java.net.NetworkInterface getByInetAddress(java.net.InetAddress)>(v6);
label2:
v7 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)>(v1, v4, null, v2);
label3:
return v7;
label4:
v8 := @caughtexception;
interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v8);
return v2;
catch java.net.SocketException from label1 to label3 with label4;
}
public io.netty.channel.ChannelFuture joinGroup(java.net.InetSocketAddress, java.net.NetworkInterface)
{
io.netty.channel.ChannelPromise v3;
io.netty.channel.socket.nio.NioDatagramChannel v0;
java.net.NetworkInterface v2;
java.net.InetSocketAddress v1;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 := @parameter0: java.net.InetSocketAddress;
v2 := @parameter1: java.net.NetworkInterface;
v3 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: io.netty.channel.ChannelPromise newPromise()>();
v4 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: io.netty.channel.ChannelFuture joinGroup(java.net.InetSocketAddress,java.net.NetworkInterface,io.netty.channel.ChannelPromise)>(v1, v2, v3);
return v4;
}
public io.netty.channel.ChannelFuture joinGroup(java.net.InetSocketAddress, java.net.NetworkInterface, io.netty.channel.ChannelPromise)
{
java.net.InetAddress v4;
io.netty.channel.ChannelPromise v3;
io.netty.channel.socket.nio.NioDatagramChannel v0;
java.net.NetworkInterface v2;
java.net.InetSocketAddress v1;
io.netty.channel.ChannelFuture v5;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 := @parameter0: java.net.InetSocketAddress;
v2 := @parameter1: java.net.NetworkInterface;
v3 := @parameter2: io.netty.channel.ChannelPromise;
v4 = virtualinvoke v1.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
v5 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)>(v4, v2, null, v3);
return v5;
}
public io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress, java.net.NetworkInterface, java.net.InetAddress)
{
java.net.InetAddress v1, v3;
io.netty.channel.ChannelPromise v4;
io.netty.channel.socket.nio.NioDatagramChannel v0;
java.net.NetworkInterface v2;
io.netty.channel.ChannelFuture v5;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 := @parameter0: java.net.InetAddress;
v2 := @parameter1: java.net.NetworkInterface;
v3 := @parameter2: java.net.InetAddress;
v4 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: io.netty.channel.ChannelPromise newPromise()>();
v5 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)>(v1, v2, v3, v4);
return v5;
}
public io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress, java.net.NetworkInterface, java.net.InetAddress, io.netty.channel.ChannelPromise)
{
java.lang.Throwable v14, v15;
java.nio.channels.DatagramChannel v5, v7;
java.util.HashMap v9;
java.nio.channels.MembershipKey v6;
java.util.ArrayList v12;
java.net.InetAddress v1, v3;
io.netty.channel.ChannelPromise v4;
java.util.Map v10, v13, v8;
java.net.NetworkInterface v2;
io.netty.channel.socket.nio.NioDatagramChannel v0;
java.lang.Object v11;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 := @parameter0: java.net.InetAddress;
v2 := @parameter1: java.net.NetworkInterface;
v3 := @parameter2: java.net.InetAddress;
v4 := @parameter3: io.netty.channel.ChannelPromise;
staticinvoke <io.netty.channel.socket.nio.NioDatagramChannel: void checkJavaVersion()>();
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "multicastAddress");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "networkInterface");
label01:
if v3 != null goto label02;
v5 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: java.nio.channels.DatagramChannel javaChannel()>();
v6 = virtualinvoke v5.<java.nio.channels.DatagramChannel: java.nio.channels.MembershipKey join(java.net.InetAddress,java.net.NetworkInterface)>(v1, v2);
goto label03;
label02:
v7 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: java.nio.channels.DatagramChannel javaChannel()>();
v6 = virtualinvoke v7.<java.nio.channels.DatagramChannel: java.nio.channels.MembershipKey join(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)>(v1, v2, v3);
label03:
entermonitor v0;
label04:
v8 = v0.<io.netty.channel.socket.nio.NioDatagramChannel: java.util.Map memberships>;
if v8 != null goto label05;
v9 = new java.util.HashMap;
specialinvoke v9.<java.util.HashMap: void <init>()>();
v0.<io.netty.channel.socket.nio.NioDatagramChannel: java.util.Map memberships> = v9;
goto label06;
label05:
v10 = v0.<io.netty.channel.socket.nio.NioDatagramChannel: java.util.Map memberships>;
v11 = interfaceinvoke v10.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
label06:
if v11 != null goto label07;
v12 = new java.util.ArrayList;
specialinvoke v12.<java.util.ArrayList: void <init>()>();
v11 = v12;
v13 = v0.<io.netty.channel.socket.nio.NioDatagramChannel: java.util.Map memberships>;
interfaceinvoke v13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v12);
label07:
interfaceinvoke v11.<java.util.List: boolean add(java.lang.Object)>(v6);
exitmonitor v0;
label08:
goto label10;
label09:
v14 := @caughtexception;
exitmonitor v0;
throw v14;
label10:
interfaceinvoke v4.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setSuccess()>();
label11:
goto label13;
label12:
v15 := @caughtexception;
interfaceinvoke v4.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v15);
label13:
return v4;
catch java.lang.Throwable from label04 to label08 with label09;
catch java.lang.Throwable from label01 to label11 with label12;
}
public io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress)
{
java.net.InetAddress v1;
io.netty.channel.ChannelPromise v2;
io.netty.channel.socket.nio.NioDatagramChannel v0;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 := @parameter0: java.net.InetAddress;
v2 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: io.netty.channel.ChannelPromise newPromise()>();
v3 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)>(v1, v2);
return v3;
}
public io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress, io.netty.channel.ChannelPromise)
{
java.net.NetworkInterface v5;
java.net.InetSocketAddress v3;
io.netty.channel.ChannelFuture v6;
java.net.InetAddress v1, v4;
java.net.SocketException v7;
io.netty.channel.ChannelPromise v2;
io.netty.channel.socket.nio.NioDatagramChannel v0;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 := @parameter0: java.net.InetAddress;
v2 := @parameter1: io.netty.channel.ChannelPromise;
label1:
v3 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: java.net.InetSocketAddress localAddress()>();
v4 = virtualinvoke v3.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
v5 = staticinvoke <java.net.NetworkInterface: java.net.NetworkInterface getByInetAddress(java.net.InetAddress)>(v4);
v6 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)>(v1, v5, null, v2);
label2:
return v6;
label3:
v7 := @caughtexception;
interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v7);
return v2;
catch java.net.SocketException from label1 to label2 with label3;
}
public io.netty.channel.ChannelFuture leaveGroup(java.net.InetSocketAddress, java.net.NetworkInterface)
{
io.netty.channel.ChannelPromise v3;
io.netty.channel.socket.nio.NioDatagramChannel v0;
java.net.NetworkInterface v2;
java.net.InetSocketAddress v1;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 := @parameter0: java.net.InetSocketAddress;
v2 := @parameter1: java.net.NetworkInterface;
v3 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: io.netty.channel.ChannelPromise newPromise()>();
v4 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: io.netty.channel.ChannelFuture leaveGroup(java.net.InetSocketAddress,java.net.NetworkInterface,io.netty.channel.ChannelPromise)>(v1, v2, v3);
return v4;
}
public io.netty.channel.ChannelFuture leaveGroup(java.net.InetSocketAddress, java.net.NetworkInterface, io.netty.channel.ChannelPromise)
{
java.net.InetAddress v4;
io.netty.channel.ChannelPromise v3;
io.netty.channel.socket.nio.NioDatagramChannel v0;
java.net.NetworkInterface v2;
java.net.InetSocketAddress v1;
io.netty.channel.ChannelFuture v5;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 := @parameter0: java.net.InetSocketAddress;
v2 := @parameter1: java.net.NetworkInterface;
v3 := @parameter2: io.netty.channel.ChannelPromise;
v4 = virtualinvoke v1.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
v5 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)>(v4, v2, null, v3);
return v5;
}
public io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress, java.net.NetworkInterface, java.net.InetAddress)
{
java.net.InetAddress v1, v3;
io.netty.channel.ChannelPromise v4;
io.netty.channel.socket.nio.NioDatagramChannel v0;
java.net.NetworkInterface v2;
io.netty.channel.ChannelFuture v5;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 := @parameter0: java.net.InetAddress;
v2 := @parameter1: java.net.NetworkInterface;
v3 := @parameter2: java.net.InetAddress;
v4 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: io.netty.channel.ChannelPromise newPromise()>();
v5 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)>(v1, v2, v3, v4);
return v5;
}
public io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress, java.net.NetworkInterface, java.net.InetAddress, io.netty.channel.ChannelPromise)
{
java.lang.Throwable v18;
java.net.InetAddress v1, v13, v14, v3;
io.netty.channel.ChannelPromise v4;
java.util.Map v17, v5, v6;
boolean v12, v15, v16, v9;
java.util.Iterator v8;
java.net.NetworkInterface v11, v2;
io.netty.channel.socket.nio.NioDatagramChannel v0;
java.lang.Object v10, v7;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 := @parameter0: java.net.InetAddress;
v2 := @parameter1: java.net.NetworkInterface;
v3 := @parameter2: java.net.InetAddress;
v4 := @parameter3: io.netty.channel.ChannelPromise;
staticinvoke <io.netty.channel.socket.nio.NioDatagramChannel: void checkJavaVersion()>();
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "multicastAddress");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "networkInterface");
entermonitor v0;
label1:
v5 = v0.<io.netty.channel.socket.nio.NioDatagramChannel: java.util.Map memberships>;
if v5 == null goto label6;
v6 = v0.<io.netty.channel.socket.nio.NioDatagramChannel: java.util.Map memberships>;
v7 = interfaceinvoke v6.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v7 == null goto label6;
v8 = interfaceinvoke v7.<java.util.List: java.util.Iterator iterator()>();
label2:
v9 = interfaceinvoke v8.<java.util.Iterator: boolean hasNext()>();
if v9 == 0 goto label5;
v10 = interfaceinvoke v8.<java.util.Iterator: java.lang.Object next()>();
v11 = virtualinvoke v10.<java.nio.channels.MembershipKey: java.net.NetworkInterface networkInterface()>();
v12 = virtualinvoke v2.<java.net.NetworkInterface: boolean equals(java.lang.Object)>(v11);
if v12 == 0 goto label2;
if v3 != null goto label3;
v13 = virtualinvoke v10.<java.nio.channels.MembershipKey: java.net.InetAddress sourceAddress()>();
if v13 == null goto label4;
label3:
if v3 == null goto label2;
v14 = virtualinvoke v10.<java.nio.channels.MembershipKey: java.net.InetAddress sourceAddress()>();
v15 = virtualinvoke v3.<java.net.InetAddress: boolean equals(java.lang.Object)>(v14);
if v15 == 0 goto label2;
label4:
virtualinvoke v10.<java.nio.channels.MembershipKey: void drop()>();
interfaceinvoke v8.<java.util.Iterator: void remove()>();
goto label2;
label5:
v16 = interfaceinvoke v7.<java.util.List: boolean isEmpty()>();
if v16 == 0 goto label6;
v17 = v0.<io.netty.channel.socket.nio.NioDatagramChannel: java.util.Map memberships>;
interfaceinvoke v17.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v1);
label6:
exitmonitor v0;
label7:
goto label9;
label8:
v18 := @caughtexception;
exitmonitor v0;
throw v18;
label9:
interfaceinvoke v4.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setSuccess()>();
return v4;
catch java.lang.Throwable from label1 to label7 with label8;
}
public io.netty.channel.ChannelFuture block(java.net.InetAddress, java.net.NetworkInterface, java.net.InetAddress)
{
java.net.InetAddress v1, v3;
io.netty.channel.ChannelPromise v4;
io.netty.channel.socket.nio.NioDatagramChannel v0;
java.net.NetworkInterface v2;
io.netty.channel.ChannelFuture v5;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 := @parameter0: java.net.InetAddress;
v2 := @parameter1: java.net.NetworkInterface;
v3 := @parameter2: java.net.InetAddress;
v4 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: io.netty.channel.ChannelPromise newPromise()>();
v5 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)>(v1, v2, v3, v4);
return v5;
}
public io.netty.channel.ChannelFuture block(java.net.InetAddress, java.net.NetworkInterface, java.net.InetAddress, io.netty.channel.ChannelPromise)
{
java.lang.Throwable v14;
java.util.Iterator v8;
java.net.NetworkInterface v11, v2;
java.io.IOException v13;
java.net.InetAddress v1, v3;
io.netty.channel.ChannelPromise v4;
io.netty.channel.socket.nio.NioDatagramChannel v0;
java.util.Map v5, v6;
java.lang.Object v10, v7;
boolean v12, v9;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 := @parameter0: java.net.InetAddress;
v2 := @parameter1: java.net.NetworkInterface;
v3 := @parameter2: java.net.InetAddress;
v4 := @parameter3: io.netty.channel.ChannelPromise;
staticinvoke <io.netty.channel.socket.nio.NioDatagramChannel: void checkJavaVersion()>();
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "multicastAddress");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v3, "sourceToBlock");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "networkInterface");
entermonitor v0;
label1:
v5 = v0.<io.netty.channel.socket.nio.NioDatagramChannel: java.util.Map memberships>;
if v5 == null goto label6;
v6 = v0.<io.netty.channel.socket.nio.NioDatagramChannel: java.util.Map memberships>;
v7 = interfaceinvoke v6.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
v8 = interfaceinvoke v7.<java.util.List: java.util.Iterator iterator()>();
label2:
v9 = interfaceinvoke v8.<java.util.Iterator: boolean hasNext()>();
if v9 == 0 goto label6;
v10 = interfaceinvoke v8.<java.util.Iterator: java.lang.Object next()>();
v11 = virtualinvoke v10.<java.nio.channels.MembershipKey: java.net.NetworkInterface networkInterface()>();
v12 = virtualinvoke v2.<java.net.NetworkInterface: boolean equals(java.lang.Object)>(v11);
if v12 == 0 goto label2;
label3:
virtualinvoke v10.<java.nio.channels.MembershipKey: java.nio.channels.MembershipKey block(java.net.InetAddress)>(v3);
label4:
goto label2;
label5:
v13 := @caughtexception;
interfaceinvoke v4.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v13);
goto label2;
label6:
exitmonitor v0;
label7:
goto label9;
label8:
v14 := @caughtexception;
exitmonitor v0;
throw v14;
label9:
interfaceinvoke v4.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setSuccess()>();
return v4;
catch java.io.IOException from label3 to label4 with label5;
catch java.lang.Throwable from label1 to label7 with label8;
}
public io.netty.channel.ChannelFuture block(java.net.InetAddress, java.net.InetAddress)
{
java.net.InetAddress v1, v2;
io.netty.channel.ChannelPromise v3;
io.netty.channel.socket.nio.NioDatagramChannel v0;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 := @parameter0: java.net.InetAddress;
v2 := @parameter1: java.net.InetAddress;
v3 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: io.netty.channel.ChannelPromise newPromise()>();
v4 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.InetAddress,io.netty.channel.ChannelPromise)>(v1, v2, v3);
return v4;
}
public io.netty.channel.ChannelFuture block(java.net.InetAddress, java.net.InetAddress, io.netty.channel.ChannelPromise)
{
java.net.NetworkInterface v6;
java.net.InetSocketAddress v4;
io.netty.channel.ChannelFuture v7;
java.net.InetAddress v1, v2, v5;
java.net.SocketException v8;
io.netty.channel.ChannelPromise v3;
io.netty.channel.socket.nio.NioDatagramChannel v0;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 := @parameter0: java.net.InetAddress;
v2 := @parameter1: java.net.InetAddress;
v3 := @parameter2: io.netty.channel.ChannelPromise;
label1:
v4 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: java.net.InetSocketAddress localAddress()>();
v5 = virtualinvoke v4.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
v6 = staticinvoke <java.net.NetworkInterface: java.net.NetworkInterface getByInetAddress(java.net.InetAddress)>(v5);
v7 = virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: io.netty.channel.ChannelFuture block(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress,io.netty.channel.ChannelPromise)>(v1, v6, v2, v3);
label2:
return v7;
label3:
v8 := @caughtexception;
interfaceinvoke v3.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v8);
return v3;
catch java.net.SocketException from label1 to label2 with label3;
}
protected void setReadPending(boolean)
{
io.netty.channel.socket.nio.NioDatagramChannel v0;
boolean v1;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 := @parameter0: boolean;
specialinvoke v0.<io.netty.channel.nio.AbstractNioMessageChannel: void setReadPending(boolean)>(v1);
return;
}
void clearReadPending0()
{
io.netty.channel.socket.nio.NioDatagramChannel v0;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
virtualinvoke v0.<io.netty.channel.socket.nio.NioDatagramChannel: void clearReadPending()>();
return;
}
protected boolean closeOnReadError(java.lang.Throwable)
{
java.lang.Throwable v1;
io.netty.channel.socket.nio.NioDatagramChannel v0;
boolean v2, v3;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 := @parameter0: java.lang.Throwable;
v2 = v1 instanceof java.net.SocketException;
if v2 == 0 goto label1;
return 0;
label1:
v3 = specialinvoke v0.<io.netty.channel.nio.AbstractNioMessageChannel: boolean closeOnReadError(java.lang.Throwable)>(v1);
return v3;
}
protected boolean continueReading(io.netty.channel.RecvByteBufAllocator$Handle)
{
io.netty.channel.RecvByteBufAllocator$Handle v1;
io.netty.channel.socket.nio.NioDatagramChannel v0;
io.netty.util.UncheckedBooleanSupplier v3;
boolean v2, v4, v5;
v0 := @this: io.netty.channel.socket.nio.NioDatagramChannel;
v1 := @parameter0: io.netty.channel.RecvByteBufAllocator$Handle;
v2 = v1 instanceof io.netty.channel.RecvByteBufAllocator$ExtendedHandle;
if v2 == 0 goto label1;
v3 = <io.netty.util.UncheckedBooleanSupplier: io.netty.util.UncheckedBooleanSupplier TRUE_SUPPLIER>;
v4 = interfaceinvoke v1.<io.netty.channel.RecvByteBufAllocator$ExtendedHandle: boolean continueReading(io.netty.util.UncheckedBooleanSupplier)>(v3);
return v4;
label1:
v5 = interfaceinvoke v1.<io.netty.channel.RecvByteBufAllocator$Handle: boolean continueReading()>();
return v5;
}
static void <clinit>()
{
java.nio.channels.spi.SelectorProvider v1;
io.netty.channel.ChannelMetadata v0;
java.lang.String v2, v3, v4, v5, v6, v7;
v0 = new io.netty.channel.ChannelMetadata;
specialinvoke v0.<io.netty.channel.ChannelMetadata: void <init>(boolean)>(1);
<io.netty.channel.socket.nio.NioDatagramChannel: io.netty.channel.ChannelMetadata METADATA> = v0;
v1 = staticinvoke <java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider()>();
<io.netty.channel.socket.nio.NioDatagramChannel: java.nio.channels.spi.SelectorProvider DEFAULT_SELECTOR_PROVIDER> = v1;
v2 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String simpleClassName(java.lang.Class)>(class "Lio/netty/channel/socket/DatagramPacket;");
v3 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String simpleClassName(java.lang.Class)>(class "Lio/netty/channel/AddressedEnvelope;");
v4 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String simpleClassName(java.lang.Class)>(class "Lio/netty/buffer/ByteBuf;");
v5 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String simpleClassName(java.lang.Class)>(class "Ljava/net/SocketAddress;");
v6 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String simpleClassName(java.lang.Class)>(class "Lio/netty/buffer/ByteBuf;");
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(v2, v3, v4, v5, v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>(" (expected: \u0001, \u0001<\u0001, \u0001>, \u0001)");
<io.netty.channel.socket.nio.NioDatagramChannel: java.lang.String EXPECTED_TYPES> = v7;
return;
}
}