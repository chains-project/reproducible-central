public class io.netty.channel.socket.nio.NioServerSocketChannel extends io.netty.channel.nio.AbstractNioMessageChannel implements io.netty.channel.socket.ServerSocketChannel
{
private static final io.netty.channel.ChannelMetadata METADATA;
private static final java.nio.channels.spi.SelectorProvider DEFAULT_SELECTOR_PROVIDER;
private static final io.netty.util.internal.logging.InternalLogger logger;
private static final java.lang.reflect.Method OPEN_SERVER_SOCKET_CHANNEL_WITH_FAMILY;
private final io.netty.channel.socket.ServerSocketChannelConfig config;
private static java.nio.channels.ServerSocketChannel newChannel(java.nio.channels.spi.SelectorProvider, io.netty.channel.socket.InternetProtocolFamily)
{
io.netty.channel.ChannelException v6;
java.nio.channels.spi.SelectorProvider v0;
io.netty.channel.socket.InternetProtocolFamily v1;
java.io.IOException v5;
java.lang.reflect.Method v2;
java.nio.channels.Channel v3;
java.nio.channels.ServerSocketChannel v4;
v0 := @parameter0: java.nio.channels.spi.SelectorProvider;
v1 := @parameter1: io.netty.channel.socket.InternetProtocolFamily;
label1:
v2 = <io.netty.channel.socket.nio.NioServerSocketChannel: java.lang.reflect.Method OPEN_SERVER_SOCKET_CHANNEL_WITH_FAMILY>;
v3 = staticinvoke <io.netty.channel.socket.nio.SelectorProviderUtil: java.nio.channels.Channel newChannel(java.lang.reflect.Method,java.nio.channels.spi.SelectorProvider,io.netty.channel.socket.InternetProtocolFamily)>(v2, v0, v1);
if v3 != null goto label2;
v4 = virtualinvoke v0.<java.nio.channels.spi.SelectorProvider: java.nio.channels.ServerSocketChannel openServerSocketChannel()>();
goto label3;
label2:
v4 = v3;
label3:
return v4;
label4:
v5 := @caughtexception;
v6 = new io.netty.channel.ChannelException;
specialinvoke v6.<io.netty.channel.ChannelException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to open a socket.", v5);
throw v6;
catch java.io.IOException from label1 to label3 with label4;
}
public void <init>()
{
io.netty.channel.socket.nio.NioServerSocketChannel v0;
java.nio.channels.spi.SelectorProvider v1;
v0 := @this: io.netty.channel.socket.nio.NioServerSocketChannel;
v1 = <io.netty.channel.socket.nio.NioServerSocketChannel: java.nio.channels.spi.SelectorProvider DEFAULT_SELECTOR_PROVIDER>;
specialinvoke v0.<io.netty.channel.socket.nio.NioServerSocketChannel: void <init>(java.nio.channels.spi.SelectorProvider)>(v1);
return;
}
public void <init>(java.nio.channels.spi.SelectorProvider)
{
io.netty.channel.socket.nio.NioServerSocketChannel v0;
java.nio.channels.spi.SelectorProvider v1;
v0 := @this: io.netty.channel.socket.nio.NioServerSocketChannel;
v1 := @parameter0: java.nio.channels.spi.SelectorProvider;
specialinvoke v0.<io.netty.channel.socket.nio.NioServerSocketChannel: void <init>(java.nio.channels.spi.SelectorProvider,io.netty.channel.socket.InternetProtocolFamily)>(v1, null);
return;
}
public void <init>(java.nio.channels.spi.SelectorProvider, io.netty.channel.socket.InternetProtocolFamily)
{
java.nio.channels.spi.SelectorProvider v1;
io.netty.channel.socket.InternetProtocolFamily v2;
io.netty.channel.socket.nio.NioServerSocketChannel v0;
java.nio.channels.ServerSocketChannel v3;
v0 := @this: io.netty.channel.socket.nio.NioServerSocketChannel;
v1 := @parameter0: java.nio.channels.spi.SelectorProvider;
v2 := @parameter1: io.netty.channel.socket.InternetProtocolFamily;
v3 = staticinvoke <io.netty.channel.socket.nio.NioServerSocketChannel: java.nio.channels.ServerSocketChannel newChannel(java.nio.channels.spi.SelectorProvider,io.netty.channel.socket.InternetProtocolFamily)>(v1, v2);
specialinvoke v0.<io.netty.channel.socket.nio.NioServerSocketChannel: void <init>(java.nio.channels.ServerSocketChannel)>(v3);
return;
}
public void <init>(java.nio.channels.ServerSocketChannel)
{
java.net.ServerSocket v4;
io.netty.channel.socket.nio.NioServerSocketChannel v0;
io.netty.channel.socket.nio.NioServerSocketChannel$NioServerSocketChannelConfig v2;
java.nio.channels.ServerSocketChannel v1, v3;
v0 := @this: io.netty.channel.socket.nio.NioServerSocketChannel;
v1 := @parameter0: java.nio.channels.ServerSocketChannel;
specialinvoke v0.<io.netty.channel.nio.AbstractNioMessageChannel: void <init>(io.netty.channel.Channel,java.nio.channels.SelectableChannel,int)>(null, v1, 16);
v2 = new io.netty.channel.socket.nio.NioServerSocketChannel$NioServerSocketChannelConfig;
v3 = virtualinvoke v0.<io.netty.channel.socket.nio.NioServerSocketChannel: java.nio.channels.ServerSocketChannel javaChannel()>();
v4 = virtualinvoke v3.<java.nio.channels.ServerSocketChannel: java.net.ServerSocket socket()>();
specialinvoke v2.<io.netty.channel.socket.nio.NioServerSocketChannel$NioServerSocketChannelConfig: void <init>(io.netty.channel.socket.nio.NioServerSocketChannel,io.netty.channel.socket.nio.NioServerSocketChannel,java.net.ServerSocket)>(v0, v0, v4);
v0.<io.netty.channel.socket.nio.NioServerSocketChannel: io.netty.channel.socket.ServerSocketChannelConfig config> = v2;
return;
}
public java.net.InetSocketAddress localAddress()
{
io.netty.channel.socket.nio.NioServerSocketChannel v0;
java.net.SocketAddress v1;
v0 := @this: io.netty.channel.socket.nio.NioServerSocketChannel;
v1 = specialinvoke v0.<io.netty.channel.nio.AbstractNioMessageChannel: java.net.SocketAddress localAddress()>();
return v1;
}
public io.netty.channel.ChannelMetadata metadata()
{
io.netty.channel.socket.nio.NioServerSocketChannel v0;
io.netty.channel.ChannelMetadata v1;
v0 := @this: io.netty.channel.socket.nio.NioServerSocketChannel;
v1 = <io.netty.channel.socket.nio.NioServerSocketChannel: io.netty.channel.ChannelMetadata METADATA>;
return v1;
}
public io.netty.channel.socket.ServerSocketChannelConfig config()
{
io.netty.channel.socket.ServerSocketChannelConfig v1;
io.netty.channel.socket.nio.NioServerSocketChannel v0;
v0 := @this: io.netty.channel.socket.nio.NioServerSocketChannel;
v1 = v0.<io.netty.channel.socket.nio.NioServerSocketChannel: io.netty.channel.socket.ServerSocketChannelConfig config>;
return v1;
}
public boolean isActive()
{
java.net.ServerSocket v3;
io.netty.channel.socket.nio.NioServerSocketChannel v0;
boolean v1, v4, v5;
java.nio.channels.ServerSocketChannel v2;
v0 := @this: io.netty.channel.socket.nio.NioServerSocketChannel;
v1 = virtualinvoke v0.<io.netty.channel.socket.nio.NioServerSocketChannel: boolean isOpen()>();
if v1 == 0 goto label1;
v2 = virtualinvoke v0.<io.netty.channel.socket.nio.NioServerSocketChannel: java.nio.channels.ServerSocketChannel javaChannel()>();
v3 = virtualinvoke v2.<java.nio.channels.ServerSocketChannel: java.net.ServerSocket socket()>();
v4 = virtualinvoke v3.<java.net.ServerSocket: boolean isBound()>();
if v4 == 0 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
public java.net.InetSocketAddress remoteAddress()
{
io.netty.channel.socket.nio.NioServerSocketChannel v0;
v0 := @this: io.netty.channel.socket.nio.NioServerSocketChannel;
return null;
}
protected java.nio.channels.ServerSocketChannel javaChannel()
{
io.netty.channel.socket.nio.NioServerSocketChannel v0;
java.nio.channels.SelectableChannel v1;
v0 := @this: io.netty.channel.socket.nio.NioServerSocketChannel;
v1 = specialinvoke v0.<io.netty.channel.nio.AbstractNioMessageChannel: java.nio.channels.SelectableChannel javaChannel()>();
return v1;
}
protected java.net.SocketAddress localAddress0()
{
java.net.ServerSocket v2;
java.net.SocketAddress v3;
io.netty.channel.socket.nio.NioServerSocketChannel v0;
java.nio.channels.ServerSocketChannel v1;
v0 := @this: io.netty.channel.socket.nio.NioServerSocketChannel;
v1 = virtualinvoke v0.<io.netty.channel.socket.nio.NioServerSocketChannel: java.nio.channels.ServerSocketChannel javaChannel()>();
v2 = virtualinvoke v1.<java.nio.channels.ServerSocketChannel: java.net.ServerSocket socket()>();
v3 = staticinvoke <io.netty.util.internal.SocketUtils: java.net.SocketAddress localSocketAddress(java.net.ServerSocket)>(v2);
return v3;
}
protected void doBind(java.net.SocketAddress) throws java.lang.Exception
{
java.net.SocketAddress v1;
io.netty.channel.socket.nio.NioServerSocketChannel v0;
java.nio.channels.ServerSocketChannel v3, v6;
io.netty.channel.socket.ServerSocketChannelConfig v4, v8;
java.net.ServerSocket v7;
int v2, v5, v9;
v0 := @this: io.netty.channel.socket.nio.NioServerSocketChannel;
v1 := @parameter0: java.net.SocketAddress;
v2 = staticinvoke <io.netty.util.internal.PlatformDependent: int javaVersion()>();
if v2 < 7 goto label1;
v3 = virtualinvoke v0.<io.netty.channel.socket.nio.NioServerSocketChannel: java.nio.channels.ServerSocketChannel javaChannel()>();
v4 = v0.<io.netty.channel.socket.nio.NioServerSocketChannel: io.netty.channel.socket.ServerSocketChannelConfig config>;
v5 = interfaceinvoke v4.<io.netty.channel.socket.ServerSocketChannelConfig: int getBacklog()>();
virtualinvoke v3.<java.nio.channels.ServerSocketChannel: java.nio.channels.ServerSocketChannel bind(java.net.SocketAddress,int)>(v1, v5);
goto label2;
label1:
v6 = virtualinvoke v0.<io.netty.channel.socket.nio.NioServerSocketChannel: java.nio.channels.ServerSocketChannel javaChannel()>();
v7 = virtualinvoke v6.<java.nio.channels.ServerSocketChannel: java.net.ServerSocket socket()>();
v8 = v0.<io.netty.channel.socket.nio.NioServerSocketChannel: io.netty.channel.socket.ServerSocketChannelConfig config>;
v9 = interfaceinvoke v8.<io.netty.channel.socket.ServerSocketChannelConfig: int getBacklog()>();
virtualinvoke v7.<java.net.ServerSocket: void bind(java.net.SocketAddress,int)>(v1, v9);
label2:
return;
}
protected void doClose() throws java.lang.Exception
{
io.netty.channel.socket.nio.NioServerSocketChannel v0;
java.nio.channels.ServerSocketChannel v1;
v0 := @this: io.netty.channel.socket.nio.NioServerSocketChannel;
v1 = virtualinvoke v0.<io.netty.channel.socket.nio.NioServerSocketChannel: java.nio.channels.ServerSocketChannel javaChannel()>();
virtualinvoke v1.<java.nio.channels.ServerSocketChannel: void close()>();
return;
}
protected int doReadMessages(java.util.List) throws java.lang.Exception
{
io.netty.channel.socket.nio.NioSocketChannel v4;
java.lang.Throwable v5;
java.util.List v1;
java.nio.channels.SocketChannel v3;
io.netty.util.internal.logging.InternalLogger v6;
io.netty.channel.socket.nio.NioServerSocketChannel v0;
java.nio.channels.ServerSocketChannel v2;
v0 := @this: io.netty.channel.socket.nio.NioServerSocketChannel;
v1 := @parameter0: java.util.List;
v2 = virtualinvoke v0.<io.netty.channel.socket.nio.NioServerSocketChannel: java.nio.channels.ServerSocketChannel javaChannel()>();
v3 = staticinvoke <io.netty.util.internal.SocketUtils: java.nio.channels.SocketChannel accept(java.nio.channels.ServerSocketChannel)>(v2);
label1:
if v3 == null goto label4;
v4 = new io.netty.channel.socket.nio.NioSocketChannel;
specialinvoke v4.<io.netty.channel.socket.nio.NioSocketChannel: void <init>(io.netty.channel.Channel,java.nio.channels.SocketChannel)>(v0, v3);
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v4);
label2:
return 1;
label3:
v5 := @caughtexception;
v6 = <io.netty.channel.socket.nio.NioServerSocketChannel: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v6.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Throwable)>("Failed to create a new channel from an accepted socket.", v5);
label4:
return 0;
catch java.lang.Throwable from label1 to label2 with label3;
}
protected boolean doConnect(java.net.SocketAddress, java.net.SocketAddress) throws java.lang.Exception
{
java.lang.UnsupportedOperationException v3;
java.net.SocketAddress v1, v2;
io.netty.channel.socket.nio.NioServerSocketChannel v0;
v0 := @this: io.netty.channel.socket.nio.NioServerSocketChannel;
v1 := @parameter0: java.net.SocketAddress;
v2 := @parameter1: java.net.SocketAddress;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>()>();
throw v3;
}
protected void doFinishConnect() throws java.lang.Exception
{
io.netty.channel.socket.nio.NioServerSocketChannel v0;
java.lang.UnsupportedOperationException v1;
v0 := @this: io.netty.channel.socket.nio.NioServerSocketChannel;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>()>();
throw v1;
}
protected java.net.SocketAddress remoteAddress0()
{
io.netty.channel.socket.nio.NioServerSocketChannel v0;
v0 := @this: io.netty.channel.socket.nio.NioServerSocketChannel;
return null;
}
protected void doDisconnect() throws java.lang.Exception
{
io.netty.channel.socket.nio.NioServerSocketChannel v0;
java.lang.UnsupportedOperationException v1;
v0 := @this: io.netty.channel.socket.nio.NioServerSocketChannel;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>()>();
throw v1;
}
protected boolean doWriteMessage(java.lang.Object, io.netty.channel.ChannelOutboundBuffer) throws java.lang.Exception
{
io.netty.channel.ChannelOutboundBuffer v2;
java.lang.UnsupportedOperationException v3;
io.netty.channel.socket.nio.NioServerSocketChannel v0;
java.lang.Object v1;
v0 := @this: io.netty.channel.socket.nio.NioServerSocketChannel;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: io.netty.channel.ChannelOutboundBuffer;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>()>();
throw v3;
}
protected final java.lang.Object filterOutboundMessage(java.lang.Object) throws java.lang.Exception
{
io.netty.channel.socket.nio.NioServerSocketChannel v0;
java.lang.UnsupportedOperationException v2;
java.lang.Object v1;
v0 := @this: io.netty.channel.socket.nio.NioServerSocketChannel;
v1 := @parameter0: java.lang.Object;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
protected boolean closeOnReadError(java.lang.Throwable)
{
java.lang.Throwable v1;
io.netty.channel.socket.nio.NioServerSocketChannel v0;
boolean v2;
v0 := @this: io.netty.channel.socket.nio.NioServerSocketChannel;
v1 := @parameter0: java.lang.Throwable;
v2 = specialinvoke v0.<io.netty.channel.nio.AbstractNioMessageChannel: boolean closeOnReadError(java.lang.Throwable)>(v1);
return v2;
}
static void <clinit>()
{
java.nio.channels.spi.SelectorProvider v1;
io.netty.util.internal.logging.InternalLogger v2;
io.netty.channel.ChannelMetadata v0;
java.lang.reflect.Method v3;
v0 = new io.netty.channel.ChannelMetadata;
specialinvoke v0.<io.netty.channel.ChannelMetadata: void <init>(boolean,int)>(0, 16);
<io.netty.channel.socket.nio.NioServerSocketChannel: io.netty.channel.ChannelMetadata METADATA> = v0;
v1 = staticinvoke <java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider()>();
<io.netty.channel.socket.nio.NioServerSocketChannel: java.nio.channels.spi.SelectorProvider DEFAULT_SELECTOR_PROVIDER> = v1;
v2 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/channel/socket/nio/NioServerSocketChannel;");
<io.netty.channel.socket.nio.NioServerSocketChannel: io.netty.util.internal.logging.InternalLogger logger> = v2;
v3 = staticinvoke <io.netty.channel.socket.nio.SelectorProviderUtil: java.lang.reflect.Method findOpenMethod(java.lang.String)>("openServerSocketChannel");
<io.netty.channel.socket.nio.NioServerSocketChannel: java.lang.reflect.Method OPEN_SERVER_SOCKET_CHANNEL_WITH_FAMILY> = v3;
return;
}
}