final class io.netty.channel.socket.nio.SelectorProviderUtil extends java.lang.Object
{
private static final io.netty.util.internal.logging.InternalLogger logger;
static java.lang.reflect.Method findOpenMethod(java.lang.String)
{
java.lang.Throwable v5;
io.netty.util.internal.logging.InternalLogger v6;
int v1;
java.lang.Class[] v3;
java.lang.Class v2;
java.lang.String v0;
java.lang.reflect.Method v4;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <io.netty.util.internal.PlatformDependent: int javaVersion()>();
if v1 < 15 goto label4;
label1:
v2 = class "Ljava/nio/channels/spi/SelectorProvider;";
v3 = newarray (java.lang.Class)[1];
v3[0] = class "Ljava/net/ProtocolFamily;";
v4 = virtualinvoke v2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(v0, v3);
label2:
return v4;
label3:
v5 := @caughtexception;
v6 = <io.netty.channel.socket.nio.SelectorProviderUtil: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v6.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("SelectorProvider.{}(ProtocolFamily) not available, will use default", v0, v5);
label4:
return null;
catch java.lang.Throwable from label1 to label2 with label3;
}
static java.nio.channels.Channel newChannel(java.lang.reflect.Method, java.nio.channels.spi.SelectorProvider, io.netty.channel.socket.InternetProtocolFamily) throws java.io.IOException
{
java.lang.IllegalAccessException v8;
java.lang.Object[] v3;
java.net.ProtocolFamily v4;
java.io.IOException v7, v9;
java.lang.reflect.InvocationTargetException v6;
java.nio.channels.spi.SelectorProvider v1;
io.netty.channel.socket.InternetProtocolFamily v2;
java.lang.Object v5;
java.lang.reflect.Method v0;
v0 := @parameter0: java.lang.reflect.Method;
v1 := @parameter1: java.nio.channels.spi.SelectorProvider;
v2 := @parameter2: io.netty.channel.socket.InternetProtocolFamily;
if v2 == null goto label5;
if v0 == null goto label5;
label1:
v3 = newarray (java.lang.Object)[1];
v4 = staticinvoke <io.netty.channel.socket.nio.ProtocolFamilyConverter: java.net.ProtocolFamily convert(io.netty.channel.socket.InternetProtocolFamily)>(v2);
v3[0] = v4;
v5 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v1, v3);
label2:
return v5;
label3:
v6 := @caughtexception;
v7 = new java.io.IOException;
specialinvoke v7.<java.io.IOException: void <init>(java.lang.Throwable)>(v6);
throw v7;
label4:
v8 := @caughtexception;
v9 = new java.io.IOException;
specialinvoke v9.<java.io.IOException: void <init>(java.lang.Throwable)>(v8);
throw v9;
label5:
return null;
catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
catch java.lang.IllegalAccessException from label1 to label2 with label4;
}
private void <init>()
{
io.netty.channel.socket.nio.SelectorProviderUtil v0;
v0 := @this: io.netty.channel.socket.nio.SelectorProviderUtil;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void <clinit>()
{
io.netty.util.internal.logging.InternalLogger v0;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/channel/socket/nio/SelectorProviderUtil;");
<io.netty.channel.socket.nio.SelectorProviderUtil: io.netty.util.internal.logging.InternalLogger logger> = v0;
return;
}
}