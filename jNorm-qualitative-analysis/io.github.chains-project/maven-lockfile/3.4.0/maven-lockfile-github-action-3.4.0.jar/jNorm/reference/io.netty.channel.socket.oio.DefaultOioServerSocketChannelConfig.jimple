public class io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig extends io.netty.channel.socket.DefaultServerSocketChannelConfig implements io.netty.channel.socket.oio.OioServerSocketChannelConfig
{
public void <init>(io.netty.channel.socket.ServerSocketChannel, java.net.ServerSocket)
{
io.netty.channel.socket.ServerSocketChannel v1;
java.net.ServerSocket v2;
io.netty.buffer.ByteBufAllocator v4;
io.netty.channel.PreferHeapByteBufAllocator v3;
io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig;
v1 := @parameter0: io.netty.channel.socket.ServerSocketChannel;
v2 := @parameter1: java.net.ServerSocket;
specialinvoke v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: void <init>(io.netty.channel.socket.ServerSocketChannel,java.net.ServerSocket)>(v1, v2);
v3 = new io.netty.channel.PreferHeapByteBufAllocator;
v4 = virtualinvoke v0.<io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig: io.netty.buffer.ByteBufAllocator getAllocator()>();
specialinvoke v3.<io.netty.channel.PreferHeapByteBufAllocator: void <init>(io.netty.buffer.ByteBufAllocator)>(v4);
virtualinvoke v0.<io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig: io.netty.channel.socket.oio.OioServerSocketChannelConfig setAllocator(io.netty.buffer.ByteBufAllocator)>(v3);
return;
}
void <init>(io.netty.channel.socket.oio.OioServerSocketChannel, java.net.ServerSocket)
{
java.net.ServerSocket v2;
io.netty.buffer.ByteBufAllocator v4;
io.netty.channel.PreferHeapByteBufAllocator v3;
io.netty.channel.socket.oio.OioServerSocketChannel v1;
io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig;
v1 := @parameter0: io.netty.channel.socket.oio.OioServerSocketChannel;
v2 := @parameter1: java.net.ServerSocket;
specialinvoke v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: void <init>(io.netty.channel.socket.ServerSocketChannel,java.net.ServerSocket)>(v1, v2);
v3 = new io.netty.channel.PreferHeapByteBufAllocator;
v4 = virtualinvoke v0.<io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig: io.netty.buffer.ByteBufAllocator getAllocator()>();
specialinvoke v3.<io.netty.channel.PreferHeapByteBufAllocator: void <init>(io.netty.buffer.ByteBufAllocator)>(v4);
virtualinvoke v0.<io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig: io.netty.channel.socket.oio.OioServerSocketChannelConfig setAllocator(io.netty.buffer.ByteBufAllocator)>(v3);
return;
}
public java.util.Map getOptions()
{
io.netty.channel.ChannelOption[] v2;
io.netty.channel.ChannelOption v3;
java.util.Map v1, v4;
io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig;
v1 = specialinvoke v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: java.util.Map getOptions()>();
v2 = newarray (io.netty.channel.ChannelOption)[1];
v3 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_TIMEOUT>;
v2[0] = v3;
v4 = virtualinvoke v0.<io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig: java.util.Map getOptions(java.util.Map,io.netty.channel.ChannelOption[])>(v1, v2);
return v4;
}
public java.lang.Object getOption(io.netty.channel.ChannelOption)
{
io.netty.channel.ChannelOption v1, v2;
int v3;
java.lang.Object v5;
io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig v0;
java.lang.Integer v4;
v0 := @this: io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig;
v1 := @parameter0: io.netty.channel.ChannelOption;
v2 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_TIMEOUT>;
if v1 != v2 goto label1;
v3 = virtualinvoke v0.<io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig: int getSoTimeout()>();
v4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v3);
return v4;
label1:
v5 = specialinvoke v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: java.lang.Object getOption(io.netty.channel.ChannelOption)>(v1);
return v5;
}
public boolean setOption(io.netty.channel.ChannelOption, java.lang.Object)
{
io.netty.channel.ChannelOption v1, v3;
int v4;
java.lang.Object v2;
io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig v0;
boolean v5;
v0 := @this: io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig;
v1 := @parameter0: io.netty.channel.ChannelOption;
v2 := @parameter1: java.lang.Object;
virtualinvoke v0.<io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig: void validate(io.netty.channel.ChannelOption,java.lang.Object)>(v1, v2);
v3 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption SO_TIMEOUT>;
if v1 != v3 goto label1;
v4 = virtualinvoke v2.<java.lang.Integer: int intValue()>();
virtualinvoke v0.<io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig: io.netty.channel.socket.oio.OioServerSocketChannelConfig setSoTimeout(int)>(v4);
goto label2;
label1:
v5 = specialinvoke v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: boolean setOption(io.netty.channel.ChannelOption,java.lang.Object)>(v1, v2);
return v5;
label2:
return 1;
}
public io.netty.channel.socket.oio.OioServerSocketChannelConfig setSoTimeout(int)
{
java.net.ServerSocket v2;
io.netty.channel.ChannelException v4;
int v1;
java.io.IOException v3;
io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig;
v1 := @parameter0: int;
label1:
v2 = v0.<io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig: java.net.ServerSocket javaSocket>;
virtualinvoke v2.<java.net.ServerSocket: void setSoTimeout(int)>(v1);
label2:
goto label4;
label3:
v3 := @caughtexception;
v4 = new io.netty.channel.ChannelException;
specialinvoke v4.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v3);
throw v4;
label4:
return v0;
catch java.io.IOException from label1 to label2 with label3;
}
public int getSoTimeout()
{
java.net.ServerSocket v1;
io.netty.channel.ChannelException v4;
int v2;
java.io.IOException v3;
io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig;
label1:
v1 = v0.<io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig: java.net.ServerSocket javaSocket>;
v2 = virtualinvoke v1.<java.net.ServerSocket: int getSoTimeout()>();
label2:
return v2;
label3:
v3 := @caughtexception;
v4 = new io.netty.channel.ChannelException;
specialinvoke v4.<io.netty.channel.ChannelException: void <init>(java.lang.Throwable)>(v3);
throw v4;
catch java.io.IOException from label1 to label2 with label3;
}
public io.netty.channel.socket.oio.OioServerSocketChannelConfig setBacklog(int)
{
int v1;
io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: io.netty.channel.socket.ServerSocketChannelConfig setBacklog(int)>(v1);
return v0;
}
public io.netty.channel.socket.oio.OioServerSocketChannelConfig setReuseAddress(boolean)
{
io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig v0;
boolean v1;
v0 := @this: io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig;
v1 := @parameter0: boolean;
specialinvoke v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: io.netty.channel.socket.ServerSocketChannelConfig setReuseAddress(boolean)>(v1);
return v0;
}
public io.netty.channel.socket.oio.OioServerSocketChannelConfig setReceiveBufferSize(int)
{
int v1;
io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: io.netty.channel.socket.ServerSocketChannelConfig setReceiveBufferSize(int)>(v1);
return v0;
}
public io.netty.channel.socket.oio.OioServerSocketChannelConfig setPerformancePreferences(int, int, int)
{
int v1, v2, v3;
io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
specialinvoke v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: io.netty.channel.socket.ServerSocketChannelConfig setPerformancePreferences(int,int,int)>(v1, v2, v3);
return v0;
}
public io.netty.channel.socket.oio.OioServerSocketChannelConfig setConnectTimeoutMillis(int)
{
int v1;
io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: io.netty.channel.socket.ServerSocketChannelConfig setConnectTimeoutMillis(int)>(v1);
return v0;
}
public io.netty.channel.socket.oio.OioServerSocketChannelConfig setMaxMessagesPerRead(int)
{
int v1;
io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: io.netty.channel.socket.ServerSocketChannelConfig setMaxMessagesPerRead(int)>(v1);
return v0;
}
public io.netty.channel.socket.oio.OioServerSocketChannelConfig setWriteSpinCount(int)
{
int v1;
io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: io.netty.channel.socket.ServerSocketChannelConfig setWriteSpinCount(int)>(v1);
return v0;
}
public io.netty.channel.socket.oio.OioServerSocketChannelConfig setAllocator(io.netty.buffer.ByteBufAllocator)
{
io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig v0;
io.netty.buffer.ByteBufAllocator v1;
v0 := @this: io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig;
v1 := @parameter0: io.netty.buffer.ByteBufAllocator;
specialinvoke v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: io.netty.channel.socket.ServerSocketChannelConfig setAllocator(io.netty.buffer.ByteBufAllocator)>(v1);
return v0;
}
public io.netty.channel.socket.oio.OioServerSocketChannelConfig setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator)
{
io.netty.channel.RecvByteBufAllocator v1;
io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig;
v1 := @parameter0: io.netty.channel.RecvByteBufAllocator;
specialinvoke v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: io.netty.channel.socket.ServerSocketChannelConfig setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator)>(v1);
return v0;
}
public io.netty.channel.socket.oio.OioServerSocketChannelConfig setAutoRead(boolean)
{
io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig v0;
boolean v1;
v0 := @this: io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig;
v1 := @parameter0: boolean;
specialinvoke v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: io.netty.channel.socket.ServerSocketChannelConfig setAutoRead(boolean)>(v1);
return v0;
}
protected void autoReadCleared()
{
io.netty.channel.Channel v1, v3;
io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig v0;
boolean v2;
v0 := @this: io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig;
v1 = v0.<io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig: io.netty.channel.Channel channel>;
v2 = v1 instanceof io.netty.channel.socket.oio.OioServerSocketChannel;
if v2 == 0 goto label1;
v3 = v0.<io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig: io.netty.channel.Channel channel>;
virtualinvoke v3.<io.netty.channel.socket.oio.OioServerSocketChannel: void clearReadPending0()>();
label1:
return;
}
public io.netty.channel.socket.oio.OioServerSocketChannelConfig setAutoClose(boolean)
{
io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig v0;
boolean v1;
v0 := @this: io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig;
v1 := @parameter0: boolean;
specialinvoke v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: io.netty.channel.ChannelConfig setAutoClose(boolean)>(v1);
return v0;
}
public io.netty.channel.socket.oio.OioServerSocketChannelConfig setWriteBufferHighWaterMark(int)
{
int v1;
io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: io.netty.channel.socket.ServerSocketChannelConfig setWriteBufferHighWaterMark(int)>(v1);
return v0;
}
public io.netty.channel.socket.oio.OioServerSocketChannelConfig setWriteBufferLowWaterMark(int)
{
int v1;
io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: io.netty.channel.socket.ServerSocketChannelConfig setWriteBufferLowWaterMark(int)>(v1);
return v0;
}
public io.netty.channel.socket.oio.OioServerSocketChannelConfig setWriteBufferWaterMark(io.netty.channel.WriteBufferWaterMark)
{
io.netty.channel.WriteBufferWaterMark v1;
io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig;
v1 := @parameter0: io.netty.channel.WriteBufferWaterMark;
specialinvoke v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: io.netty.channel.socket.ServerSocketChannelConfig setWriteBufferWaterMark(io.netty.channel.WriteBufferWaterMark)>(v1);
return v0;
}
public io.netty.channel.socket.oio.OioServerSocketChannelConfig setMessageSizeEstimator(io.netty.channel.MessageSizeEstimator)
{
io.netty.channel.MessageSizeEstimator v1;
io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig v0;
v0 := @this: io.netty.channel.socket.oio.DefaultOioServerSocketChannelConfig;
v1 := @parameter0: io.netty.channel.MessageSizeEstimator;
specialinvoke v0.<io.netty.channel.socket.DefaultServerSocketChannelConfig: io.netty.channel.socket.ServerSocketChannelConfig setMessageSizeEstimator(io.netty.channel.MessageSizeEstimator)>(v1);
return v0;
}
}