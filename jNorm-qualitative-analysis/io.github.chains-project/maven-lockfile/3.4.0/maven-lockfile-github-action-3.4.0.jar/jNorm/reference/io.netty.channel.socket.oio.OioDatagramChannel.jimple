public class io.netty.channel.socket.oio.OioDatagramChannel extends io.netty.channel.oio.AbstractOioMessageChannel implements io.netty.channel.socket.DatagramChannel
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private static final io.netty.channel.ChannelMetadata METADATA;
private static final java.lang.String EXPECTED_TYPES;
private final java.net.MulticastSocket socket;
private final io.netty.channel.socket.oio.OioDatagramChannelConfig config;
private final java.net.DatagramPacket tmpPacket;
private static java.net.MulticastSocket newSocket()
{
io.netty.channel.ChannelException v2;
java.net.MulticastSocket v0;
java.lang.Exception v1;
label1:
v0 = new java.net.MulticastSocket;
specialinvoke v0.<java.net.MulticastSocket: void <init>(java.net.SocketAddress)>(null);
label2:
return v0;
label3:
v1 := @caughtexception;
v2 = new io.netty.channel.ChannelException;
specialinvoke v2.<io.netty.channel.ChannelException: void <init>(java.lang.String,java.lang.Throwable)>("failed to create a new socket", v1);
throw v2;
catch java.lang.Exception from label1 to label2 with label3;
}
public void <init>()
{
io.netty.channel.socket.oio.OioDatagramChannel v0;
java.net.MulticastSocket v1;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 = staticinvoke <io.netty.channel.socket.oio.OioDatagramChannel: java.net.MulticastSocket newSocket()>();
specialinvoke v0.<io.netty.channel.socket.oio.OioDatagramChannel: void <init>(java.net.MulticastSocket)>(v1);
return;
}
public void <init>(java.net.MulticastSocket)
{
java.lang.Throwable v6;
byte[] v3;
io.netty.channel.socket.oio.DefaultOioDatagramChannelConfig v7;
io.netty.channel.socket.oio.OioDatagramChannel v0;
io.netty.channel.ChannelException v5;
java.net.SocketException v4;
java.net.MulticastSocket v1;
java.net.DatagramPacket v2;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 := @parameter0: java.net.MulticastSocket;
specialinvoke v0.<io.netty.channel.oio.AbstractOioMessageChannel: void <init>(io.netty.channel.Channel)>(null);
v2 = new java.net.DatagramPacket;
v3 = <io.netty.util.internal.EmptyArrays: byte[] EMPTY_BYTES>;
specialinvoke v2.<java.net.DatagramPacket: void <init>(byte[],int)>(v3, 0);
v0.<io.netty.channel.socket.oio.OioDatagramChannel: java.net.DatagramPacket tmpPacket> = v2;
label1:
virtualinvoke v1.<java.net.MulticastSocket: void setSoTimeout(int)>(1000);
virtualinvoke v1.<java.net.MulticastSocket: void setBroadcast(boolean)>(0);
label2:
goto label5;
label3:
v4 := @caughtexception;
v5 = new io.netty.channel.ChannelException;
specialinvoke v5.<io.netty.channel.ChannelException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to configure the datagram socket timeout.", v4);
throw v5;
label4:
v6 := @caughtexception;
virtualinvoke v1.<java.net.MulticastSocket: void close()>();
throw v6;
label5:
v0.<io.netty.channel.socket.oio.OioDatagramChannel: java.net.MulticastSocket socket> = v1;
v7 = new io.netty.channel.socket.oio.DefaultOioDatagramChannelConfig;
specialinvoke v7.<io.netty.channel.socket.oio.DefaultOioDatagramChannelConfig: void <init>(io.netty.channel.socket.DatagramChannel,java.net.DatagramSocket)>(v0, v1);
v0.<io.netty.channel.socket.oio.OioDatagramChannel: io.netty.channel.socket.oio.OioDatagramChannelConfig config> = v7;
return;
catch java.net.SocketException from label1 to label2 with label3;
catch java.lang.Throwable from label1 to label2 with label4;
}
public io.netty.channel.ChannelMetadata metadata()
{
io.netty.channel.socket.oio.OioDatagramChannel v0;
io.netty.channel.ChannelMetadata v1;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 = <io.netty.channel.socket.oio.OioDatagramChannel: io.netty.channel.ChannelMetadata METADATA>;
return v1;
}
public io.netty.channel.socket.DatagramChannelConfig config()
{
io.netty.channel.socket.oio.OioDatagramChannel v0;
io.netty.channel.socket.oio.OioDatagramChannelConfig v1;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 = v0.<io.netty.channel.socket.oio.OioDatagramChannel: io.netty.channel.socket.oio.OioDatagramChannelConfig config>;
return v1;
}
public boolean isOpen()
{
java.net.MulticastSocket v1;
io.netty.channel.socket.oio.OioDatagramChannel v0;
boolean v2, v3;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 = v0.<io.netty.channel.socket.oio.OioDatagramChannel: java.net.MulticastSocket socket>;
v2 = virtualinvoke v1.<java.net.MulticastSocket: boolean isClosed()>();
if v2 != 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isActive()
{
io.netty.channel.ChannelOption v3;
io.netty.channel.socket.oio.OioDatagramChannel v0;
java.net.MulticastSocket v7;
java.lang.Object v4;
boolean v1, v5, v6, v8, v9;
io.netty.channel.socket.oio.OioDatagramChannelConfig v2;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 = virtualinvoke v0.<io.netty.channel.socket.oio.OioDatagramChannel: boolean isOpen()>();
if v1 == 0 goto label3;
v2 = v0.<io.netty.channel.socket.oio.OioDatagramChannel: io.netty.channel.socket.oio.OioDatagramChannelConfig config>;
v3 = <io.netty.channel.ChannelOption: io.netty.channel.ChannelOption DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION>;
v4 = interfaceinvoke v2.<io.netty.channel.socket.oio.OioDatagramChannelConfig: java.lang.Object getOption(io.netty.channel.ChannelOption)>(v3);
v5 = virtualinvoke v4.<java.lang.Boolean: boolean booleanValue()>();
if v5 == 0 goto label1;
v6 = virtualinvoke v0.<io.netty.channel.socket.oio.OioDatagramChannel: boolean isRegistered()>();
if v6 != 0 goto label2;
label1:
v7 = v0.<io.netty.channel.socket.oio.OioDatagramChannel: java.net.MulticastSocket socket>;
v8 = virtualinvoke v7.<java.net.MulticastSocket: boolean isBound()>();
if v8 == 0 goto label3;
label2:
v9 = 1;
goto label4;
label3:
v9 = 0;
label4:
return v9;
}
public boolean isConnected()
{
io.netty.channel.socket.oio.OioDatagramChannel v0;
java.net.MulticastSocket v1;
boolean v2;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 = v0.<io.netty.channel.socket.oio.OioDatagramChannel: java.net.MulticastSocket socket>;
v2 = virtualinvoke v1.<java.net.MulticastSocket: boolean isConnected()>();
return v2;
}
protected java.net.SocketAddress localAddress0()
{
io.netty.channel.socket.oio.OioDatagramChannel v0;
java.net.SocketAddress v2;
java.net.MulticastSocket v1;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 = v0.<io.netty.channel.socket.oio.OioDatagramChannel: java.net.MulticastSocket socket>;
v2 = virtualinvoke v1.<java.net.MulticastSocket: java.net.SocketAddress getLocalSocketAddress()>();
return v2;
}
protected java.net.SocketAddress remoteAddress0()
{
io.netty.channel.socket.oio.OioDatagramChannel v0;
java.net.SocketAddress v2;
java.net.MulticastSocket v1;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 = v0.<io.netty.channel.socket.oio.OioDatagramChannel: java.net.MulticastSocket socket>;
v2 = virtualinvoke v1.<java.net.MulticastSocket: java.net.SocketAddress getRemoteSocketAddress()>();
return v2;
}
protected void doBind(java.net.SocketAddress) throws java.lang.Exception
{
io.netty.channel.socket.oio.OioDatagramChannel v0;
java.net.SocketAddress v1;
java.net.MulticastSocket v2;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 := @parameter0: java.net.SocketAddress;
v2 = v0.<io.netty.channel.socket.oio.OioDatagramChannel: java.net.MulticastSocket socket>;
virtualinvoke v2.<java.net.MulticastSocket: void bind(java.net.SocketAddress)>(v1);
return;
}
public java.net.InetSocketAddress localAddress()
{
io.netty.channel.socket.oio.OioDatagramChannel v0;
java.net.SocketAddress v1;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 = specialinvoke v0.<io.netty.channel.oio.AbstractOioMessageChannel: java.net.SocketAddress localAddress()>();
return v1;
}
public java.net.InetSocketAddress remoteAddress()
{
io.netty.channel.socket.oio.OioDatagramChannel v0;
java.net.SocketAddress v1;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 = specialinvoke v0.<io.netty.channel.oio.AbstractOioMessageChannel: java.net.SocketAddress remoteAddress()>();
return v1;
}
protected void doConnect(java.net.SocketAddress, java.net.SocketAddress) throws java.lang.Exception
{
java.lang.Throwable v5, v7;
java.net.SocketAddress v1, v2;
io.netty.channel.socket.oio.OioDatagramChannel v0;
java.net.MulticastSocket v3, v4, v6;
io.netty.util.internal.logging.InternalLogger v8;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 := @parameter0: java.net.SocketAddress;
v2 := @parameter1: java.net.SocketAddress;
if v2 == null goto label1;
v3 = v0.<io.netty.channel.socket.oio.OioDatagramChannel: java.net.MulticastSocket socket>;
virtualinvoke v3.<java.net.MulticastSocket: void bind(java.net.SocketAddress)>(v2);
label1:
v4 = v0.<io.netty.channel.socket.oio.OioDatagramChannel: java.net.MulticastSocket socket>;
virtualinvoke v4.<java.net.MulticastSocket: void connect(java.net.SocketAddress)>(v1);
label2:
goto label8;
label3:
v5 := @caughtexception;
label4:
v6 = v0.<io.netty.channel.socket.oio.OioDatagramChannel: java.net.MulticastSocket socket>;
virtualinvoke v6.<java.net.MulticastSocket: void close()>();
label5:
goto label7;
label6:
v7 := @caughtexception;
v8 = <io.netty.channel.socket.oio.OioDatagramChannel: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v8.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Throwable)>("Failed to close a socket.", v7);
label7:
throw v5;
label8:
return;
catch java.lang.Throwable from label1 to label2 with label3;
catch java.lang.Throwable from label4 to label5 with label6;
}
protected void doDisconnect() throws java.lang.Exception
{
io.netty.channel.socket.oio.OioDatagramChannel v0;
java.net.MulticastSocket v1;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 = v0.<io.netty.channel.socket.oio.OioDatagramChannel: java.net.MulticastSocket socket>;
virtualinvoke v1.<java.net.MulticastSocket: void disconnect()>();
return;
}
protected void doClose() throws java.lang.Exception
{
io.netty.channel.socket.oio.OioDatagramChannel v0;
java.net.MulticastSocket v1;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 = v0.<io.netty.channel.socket.oio.OioDatagramChannel: java.net.MulticastSocket socket>;
virtualinvoke v1.<java.net.MulticastSocket: void close()>();
return;
}
protected int doReadMessages(java.util.List) throws java.lang.Exception
{
byte[] v11;
java.net.SocketAddress v17;
io.netty.buffer.ByteBufAllocator v5;
java.util.Locale v27;
io.netty.channel.socket.DatagramPacket v20;
boolean v29, v8;
java.net.InetSocketAddress v23;
java.util.List v1;
java.net.DatagramPacket v10, v15, v16, v18, v9;
java.lang.Throwable v30, v31;
io.netty.channel.socket.oio.OioDatagramChannel v0;
java.net.SocketException v25;
io.netty.buffer.ByteBuf v22, v7;
io.netty.channel.socket.DatagramChannelConfig v2;
java.net.SocketTimeoutException v24;
int v12, v13, v19, v21, v6;
java.lang.String v26, v28;
io.netty.channel.Channel$Unsafe v3;
io.netty.channel.RecvByteBufAllocator$Handle v4;
java.net.MulticastSocket v14;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 := @parameter0: java.util.List;
v2 = virtualinvoke v0.<io.netty.channel.socket.oio.OioDatagramChannel: io.netty.channel.socket.DatagramChannelConfig config()>();
v3 = virtualinvoke v0.<io.netty.channel.socket.oio.OioDatagramChannel: io.netty.channel.Channel$Unsafe unsafe()>();
v4 = interfaceinvoke v3.<io.netty.channel.Channel$Unsafe: io.netty.channel.RecvByteBufAllocator$Handle recvBufAllocHandle()>();
v5 = interfaceinvoke v2.<io.netty.channel.socket.DatagramChannelConfig: io.netty.buffer.ByteBufAllocator getAllocator()>();
v6 = interfaceinvoke v4.<io.netty.channel.RecvByteBufAllocator$Handle: int guess()>();
v7 = interfaceinvoke v5.<io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf heapBuffer(int)>(v6);
v8 = 1;
label01:
v9 = v0.<io.netty.channel.socket.oio.OioDatagramChannel: java.net.DatagramPacket tmpPacket>;
virtualinvoke v9.<java.net.DatagramPacket: void setAddress(java.net.InetAddress)>(null);
v10 = v0.<io.netty.channel.socket.oio.OioDatagramChannel: java.net.DatagramPacket tmpPacket>;
v11 = virtualinvoke v7.<io.netty.buffer.ByteBuf: byte[] array()>();
v12 = virtualinvoke v7.<io.netty.buffer.ByteBuf: int arrayOffset()>();
v13 = virtualinvoke v7.<io.netty.buffer.ByteBuf: int capacity()>();
virtualinvoke v10.<java.net.DatagramPacket: void setData(byte[],int,int)>(v11, v12, v13);
v14 = v0.<io.netty.channel.socket.oio.OioDatagramChannel: java.net.MulticastSocket socket>;
v15 = v0.<io.netty.channel.socket.oio.OioDatagramChannel: java.net.DatagramPacket tmpPacket>;
virtualinvoke v14.<java.net.MulticastSocket: void receive(java.net.DatagramPacket)>(v15);
v16 = v0.<io.netty.channel.socket.oio.OioDatagramChannel: java.net.DatagramPacket tmpPacket>;
v17 = virtualinvoke v16.<java.net.DatagramPacket: java.net.SocketAddress getSocketAddress()>();
v18 = v0.<io.netty.channel.socket.oio.OioDatagramChannel: java.net.DatagramPacket tmpPacket>;
v19 = virtualinvoke v18.<java.net.DatagramPacket: int getLength()>();
interfaceinvoke v4.<io.netty.channel.RecvByteBufAllocator$Handle: void lastBytesRead(int)>(v19);
v20 = new io.netty.channel.socket.DatagramPacket;
v21 = interfaceinvoke v4.<io.netty.channel.RecvByteBufAllocator$Handle: int lastBytesRead()>();
v22 = virtualinvoke v7.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writerIndex(int)>(v21);
v23 = virtualinvoke v0.<io.netty.channel.socket.oio.OioDatagramChannel: java.net.InetSocketAddress localAddress()>();
specialinvoke v20.<io.netty.channel.socket.DatagramPacket: void <init>(io.netty.buffer.ByteBuf,java.net.InetSocketAddress,java.net.InetSocketAddress)>(v22, v23, v17);
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v20);
label02:
return 1;
label03:
v24 := @caughtexception;
label04:
virtualinvoke v7.<io.netty.buffer.ByteBuf: boolean release()>();
return 0;
label05:
v25 := @caughtexception;
v26 = virtualinvoke v25.<java.net.SocketException: java.lang.String getMessage()>();
v27 = <java.util.Locale: java.util.Locale US>;
v28 = virtualinvoke v26.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>(v27);
v29 = virtualinvoke v28.<java.lang.String: boolean contains(java.lang.CharSequence)>("socket closed");
if v29 != 0 goto label06;
throw v25;
label06:
virtualinvoke v7.<io.netty.buffer.ByteBuf: boolean release()>();
return -1;
label07:
v30 := @caughtexception;
staticinvoke <io.netty.util.internal.PlatformDependent: void throwException(java.lang.Throwable)>(v30);
label08:
virtualinvoke v7.<io.netty.buffer.ByteBuf: boolean release()>();
return -1;
label09:
v31 := @caughtexception;
if v8 == 0 goto label10;
virtualinvoke v7.<io.netty.buffer.ByteBuf: boolean release()>();
label10:
throw v31;
catch java.net.SocketTimeoutException from label01 to label02 with label03;
catch java.net.SocketException from label01 to label02 with label05;
catch java.lang.Throwable from label01 to label02 with label07;
catch java.lang.Throwable from label03 to label04 with label09;
catch java.lang.Throwable from label05 to label06 with label09;
catch java.lang.Throwable from label07 to label08 with label09;
}
protected void doWrite(io.netty.channel.ChannelOutboundBuffer) throws java.lang.Exception
{
byte[] v13, v19;
java.net.SocketAddress v4;
io.netty.channel.socket.oio.OioDatagramChannel v0;
java.nio.channels.NotYetConnectedException v9;
int v14, v15, v16, v18, v6;
boolean v11, v3, v8;
java.lang.Exception v22;
io.netty.channel.ChannelOutboundBuffer v1;
java.net.MulticastSocket v20;
java.lang.Object v2, v5;
java.net.DatagramPacket v10, v12, v17, v21, v7;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 := @parameter0: io.netty.channel.ChannelOutboundBuffer;
label01:
v2 = virtualinvoke v1.<io.netty.channel.ChannelOutboundBuffer: java.lang.Object current()>();
if v2 == null goto label12;
v3 = v2 instanceof io.netty.channel.AddressedEnvelope;
if v3 == 0 goto label02;
v4 = interfaceinvoke v2.<io.netty.channel.AddressedEnvelope: java.net.SocketAddress recipient()>();
v5 = interfaceinvoke v2.<io.netty.channel.AddressedEnvelope: java.lang.Object content()>();
goto label03;
label02:
v4 = null;
label03:
v6 = virtualinvoke v5.<io.netty.buffer.ByteBuf: int readableBytes()>();
label04:
if v4 == null goto label05;
v7 = v0.<io.netty.channel.socket.oio.OioDatagramChannel: java.net.DatagramPacket tmpPacket>;
virtualinvoke v7.<java.net.DatagramPacket: void setSocketAddress(java.net.SocketAddress)>(v4);
goto label07;
label05:
v8 = virtualinvoke v0.<io.netty.channel.socket.oio.OioDatagramChannel: boolean isConnected()>();
if v8 != 0 goto label06;
v9 = new java.nio.channels.NotYetConnectedException;
specialinvoke v9.<java.nio.channels.NotYetConnectedException: void <init>()>();
throw v9;
label06:
v10 = v0.<io.netty.channel.socket.oio.OioDatagramChannel: java.net.DatagramPacket tmpPacket>;
virtualinvoke v10.<java.net.DatagramPacket: void setAddress(java.net.InetAddress)>(null);
label07:
v11 = virtualinvoke v5.<io.netty.buffer.ByteBuf: boolean hasArray()>();
if v11 == 0 goto label08;
v12 = v0.<io.netty.channel.socket.oio.OioDatagramChannel: java.net.DatagramPacket tmpPacket>;
v13 = virtualinvoke v5.<io.netty.buffer.ByteBuf: byte[] array()>();
v14 = virtualinvoke v5.<io.netty.buffer.ByteBuf: int arrayOffset()>();
v15 = virtualinvoke v5.<io.netty.buffer.ByteBuf: int readerIndex()>();
v16 = v14 + v15;
virtualinvoke v12.<java.net.DatagramPacket: void setData(byte[],int,int)>(v13, v16, v6);
goto label09;
label08:
v17 = v0.<io.netty.channel.socket.oio.OioDatagramChannel: java.net.DatagramPacket tmpPacket>;
v18 = virtualinvoke v5.<io.netty.buffer.ByteBuf: int readerIndex()>();
v19 = staticinvoke <io.netty.buffer.ByteBufUtil: byte[] getBytes(io.netty.buffer.ByteBuf,int,int)>(v5, v18, v6);
virtualinvoke v17.<java.net.DatagramPacket: void setData(byte[])>(v19);
label09:
v20 = v0.<io.netty.channel.socket.oio.OioDatagramChannel: java.net.MulticastSocket socket>;
v21 = v0.<io.netty.channel.socket.oio.OioDatagramChannel: java.net.DatagramPacket tmpPacket>;
virtualinvoke v20.<java.net.MulticastSocket: void send(java.net.DatagramPacket)>(v21);
virtualinvoke v1.<io.netty.channel.ChannelOutboundBuffer: boolean remove()>();
label10:
goto label01;
label11:
v22 := @caughtexception;
virtualinvoke v1.<io.netty.channel.ChannelOutboundBuffer: boolean remove(java.lang.Throwable)>(v22);
goto label01;
label12:
return;
catch java.lang.Exception from label04 to label10 with label11;
}
private static void checkUnresolved(io.netty.channel.AddressedEnvelope)
{
java.net.SocketAddress v1, v3;
java.nio.channels.UnresolvedAddressException v5;
io.netty.channel.AddressedEnvelope v0;
boolean v2, v4;
v0 := @parameter0: io.netty.channel.AddressedEnvelope;
v1 = interfaceinvoke v0.<io.netty.channel.AddressedEnvelope: java.net.SocketAddress recipient()>();
v2 = v1 instanceof java.net.InetSocketAddress;
if v2 == 0 goto label1;
v3 = interfaceinvoke v0.<io.netty.channel.AddressedEnvelope: java.net.SocketAddress recipient()>();
v4 = virtualinvoke v3.<java.net.InetSocketAddress: boolean isUnresolved()>();
if v4 == 0 goto label1;
v5 = new java.nio.channels.UnresolvedAddressException;
specialinvoke v5.<java.nio.channels.UnresolvedAddressException: void <init>()>();
throw v5;
label1:
return;
}
protected java.lang.Object filterOutboundMessage(java.lang.Object)
{
java.lang.UnsupportedOperationException v7;
io.netty.channel.socket.oio.OioDatagramChannel v0;
java.lang.Object v1, v5;
java.lang.String v10, v8, v9;
boolean v2, v3, v4, v6;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 := @parameter0: java.lang.Object;
v2 = v1 instanceof io.netty.channel.socket.DatagramPacket;
if v2 == 0 goto label1;
staticinvoke <io.netty.channel.socket.oio.OioDatagramChannel: void checkUnresolved(io.netty.channel.AddressedEnvelope)>(v1);
return v1;
label1:
v3 = v1 instanceof io.netty.buffer.ByteBuf;
if v3 == 0 goto label2;
return v1;
label2:
v4 = v1 instanceof io.netty.channel.AddressedEnvelope;
if v4 == 0 goto label3;
staticinvoke <io.netty.channel.socket.oio.OioDatagramChannel: void checkUnresolved(io.netty.channel.AddressedEnvelope)>(v1);
v5 = interfaceinvoke v1.<io.netty.channel.AddressedEnvelope: java.lang.Object content()>();
v6 = v5 instanceof io.netty.buffer.ByteBuf;
if v6 == 0 goto label3;
return v1;
label3:
v7 = new java.lang.UnsupportedOperationException;
v8 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String simpleClassName(java.lang.Object)>(v1);
v9 = <io.netty.channel.socket.oio.OioDatagramChannel: java.lang.String EXPECTED_TYPES>;
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v8, v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unsupported message type: \u0001\u0001");
specialinvoke v7.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>(v10);
throw v7;
}
public io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress)
{
java.net.InetAddress v1;
io.netty.channel.ChannelPromise v2;
io.netty.channel.socket.oio.OioDatagramChannel v0;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 := @parameter0: java.net.InetAddress;
v2 = virtualinvoke v0.<io.netty.channel.socket.oio.OioDatagramChannel: io.netty.channel.ChannelPromise newPromise()>();
v3 = virtualinvoke v0.<io.netty.channel.socket.oio.OioDatagramChannel: io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)>(v1, v2);
return v3;
}
public io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress, io.netty.channel.ChannelPromise)
{
java.net.InetAddress v1;
io.netty.channel.ChannelPromise v2;
java.net.MulticastSocket v3;
io.netty.channel.socket.oio.OioDatagramChannel v0;
java.io.IOException v4;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 := @parameter0: java.net.InetAddress;
v2 := @parameter1: io.netty.channel.ChannelPromise;
specialinvoke v0.<io.netty.channel.socket.oio.OioDatagramChannel: void ensureBound()>();
label1:
v3 = v0.<io.netty.channel.socket.oio.OioDatagramChannel: java.net.MulticastSocket socket>;
virtualinvoke v3.<java.net.MulticastSocket: void joinGroup(java.net.InetAddress)>(v1);
interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setSuccess()>();
label2:
goto label4;
label3:
v4 := @caughtexception;
interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v4);
label4:
return v2;
catch java.io.IOException from label1 to label2 with label3;
}
public io.netty.channel.ChannelFuture joinGroup(java.net.InetSocketAddress, java.net.NetworkInterface)
{
io.netty.channel.ChannelPromise v3;
java.net.NetworkInterface v2;
io.netty.channel.socket.oio.OioDatagramChannel v0;
java.net.InetSocketAddress v1;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 := @parameter0: java.net.InetSocketAddress;
v2 := @parameter1: java.net.NetworkInterface;
v3 = virtualinvoke v0.<io.netty.channel.socket.oio.OioDatagramChannel: io.netty.channel.ChannelPromise newPromise()>();
v4 = virtualinvoke v0.<io.netty.channel.socket.oio.OioDatagramChannel: io.netty.channel.ChannelFuture joinGroup(java.net.InetSocketAddress,java.net.NetworkInterface,io.netty.channel.ChannelPromise)>(v1, v2, v3);
return v4;
}
public io.netty.channel.ChannelFuture joinGroup(java.net.InetSocketAddress, java.net.NetworkInterface, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v3;
java.net.MulticastSocket v4;
java.net.NetworkInterface v2;
io.netty.channel.socket.oio.OioDatagramChannel v0;
java.io.IOException v5;
java.net.InetSocketAddress v1;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 := @parameter0: java.net.InetSocketAddress;
v2 := @parameter1: java.net.NetworkInterface;
v3 := @parameter2: io.netty.channel.ChannelPromise;
specialinvoke v0.<io.netty.channel.socket.oio.OioDatagramChannel: void ensureBound()>();
label1:
v4 = v0.<io.netty.channel.socket.oio.OioDatagramChannel: java.net.MulticastSocket socket>;
virtualinvoke v4.<java.net.MulticastSocket: void joinGroup(java.net.SocketAddress,java.net.NetworkInterface)>(v1, v2);
interfaceinvoke v3.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setSuccess()>();
label2:
goto label4;
label3:
v5 := @caughtexception;
interfaceinvoke v3.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v5);
label4:
return v3;
catch java.io.IOException from label1 to label2 with label3;
}
public io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress, java.net.NetworkInterface, java.net.InetAddress)
{
java.net.InetAddress v1, v3;
java.lang.UnsupportedOperationException v4;
java.net.NetworkInterface v2;
io.netty.channel.socket.oio.OioDatagramChannel v0;
io.netty.channel.ChannelFuture v5;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 := @parameter0: java.net.InetAddress;
v2 := @parameter1: java.net.NetworkInterface;
v3 := @parameter2: java.net.InetAddress;
v4 = new java.lang.UnsupportedOperationException;
specialinvoke v4.<java.lang.UnsupportedOperationException: void <init>()>();
v5 = virtualinvoke v0.<io.netty.channel.socket.oio.OioDatagramChannel: io.netty.channel.ChannelFuture newFailedFuture(java.lang.Throwable)>(v4);
return v5;
}
public io.netty.channel.ChannelFuture joinGroup(java.net.InetAddress, java.net.NetworkInterface, java.net.InetAddress, io.netty.channel.ChannelPromise)
{
java.net.InetAddress v1, v3;
java.lang.UnsupportedOperationException v5;
io.netty.channel.ChannelPromise v4;
java.net.NetworkInterface v2;
io.netty.channel.socket.oio.OioDatagramChannel v0;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 := @parameter0: java.net.InetAddress;
v2 := @parameter1: java.net.NetworkInterface;
v3 := @parameter2: java.net.InetAddress;
v4 := @parameter3: io.netty.channel.ChannelPromise;
v5 = new java.lang.UnsupportedOperationException;
specialinvoke v5.<java.lang.UnsupportedOperationException: void <init>()>();
interfaceinvoke v4.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v5);
return v4;
}
private void ensureBound()
{
java.lang.IllegalStateException v2;
io.netty.channel.socket.oio.OioDatagramChannel v0;
java.lang.Class v3;
java.lang.String v4, v5;
boolean v1;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 = virtualinvoke v0.<io.netty.channel.socket.oio.OioDatagramChannel: boolean isActive()>();
if v1 != 0 goto label1;
v2 = new java.lang.IllegalStateException;
v3 = class "Lio/netty/channel/socket/DatagramChannel;";
v4 = virtualinvoke v3.<java.lang.Class: java.lang.String getName()>();
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 must be bound to join a group.");
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v5);
throw v2;
label1:
return;
}
public io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress)
{
java.net.InetAddress v1;
io.netty.channel.ChannelPromise v2;
io.netty.channel.socket.oio.OioDatagramChannel v0;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 := @parameter0: java.net.InetAddress;
v2 = virtualinvoke v0.<io.netty.channel.socket.oio.OioDatagramChannel: io.netty.channel.ChannelPromise newPromise()>();
v3 = virtualinvoke v0.<io.netty.channel.socket.oio.OioDatagramChannel: io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress,io.netty.channel.ChannelPromise)>(v1, v2);
return v3;
}
public io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress, io.netty.channel.ChannelPromise)
{
java.net.InetAddress v1;
io.netty.channel.ChannelPromise v2;
java.net.MulticastSocket v3;
io.netty.channel.socket.oio.OioDatagramChannel v0;
java.io.IOException v4;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 := @parameter0: java.net.InetAddress;
v2 := @parameter1: io.netty.channel.ChannelPromise;
label1:
v3 = v0.<io.netty.channel.socket.oio.OioDatagramChannel: java.net.MulticastSocket socket>;
virtualinvoke v3.<java.net.MulticastSocket: void leaveGroup(java.net.InetAddress)>(v1);
interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setSuccess()>();
label2:
goto label4;
label3:
v4 := @caughtexception;
interfaceinvoke v2.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v4);
label4:
return v2;
catch java.io.IOException from label1 to label2 with label3;
}
public io.netty.channel.ChannelFuture leaveGroup(java.net.InetSocketAddress, java.net.NetworkInterface)
{
io.netty.channel.ChannelPromise v3;
java.net.NetworkInterface v2;
io.netty.channel.socket.oio.OioDatagramChannel v0;
java.net.InetSocketAddress v1;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 := @parameter0: java.net.InetSocketAddress;
v2 := @parameter1: java.net.NetworkInterface;
v3 = virtualinvoke v0.<io.netty.channel.socket.oio.OioDatagramChannel: io.netty.channel.ChannelPromise newPromise()>();
v4 = virtualinvoke v0.<io.netty.channel.socket.oio.OioDatagramChannel: io.netty.channel.ChannelFuture leaveGroup(java.net.InetSocketAddress,java.net.NetworkInterface,io.netty.channel.ChannelPromise)>(v1, v2, v3);
return v4;
}
public io.netty.channel.ChannelFuture leaveGroup(java.net.InetSocketAddress, java.net.NetworkInterface, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v3;
java.net.MulticastSocket v4;
java.net.NetworkInterface v2;
io.netty.channel.socket.oio.OioDatagramChannel v0;
java.io.IOException v5;
java.net.InetSocketAddress v1;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 := @parameter0: java.net.InetSocketAddress;
v2 := @parameter1: java.net.NetworkInterface;
v3 := @parameter2: io.netty.channel.ChannelPromise;
label1:
v4 = v0.<io.netty.channel.socket.oio.OioDatagramChannel: java.net.MulticastSocket socket>;
virtualinvoke v4.<java.net.MulticastSocket: void leaveGroup(java.net.SocketAddress,java.net.NetworkInterface)>(v1, v2);
interfaceinvoke v3.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setSuccess()>();
label2:
goto label4;
label3:
v5 := @caughtexception;
interfaceinvoke v3.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v5);
label4:
return v3;
catch java.io.IOException from label1 to label2 with label3;
}
public io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress, java.net.NetworkInterface, java.net.InetAddress)
{
java.net.InetAddress v1, v3;
java.lang.UnsupportedOperationException v4;
java.net.NetworkInterface v2;
io.netty.channel.socket.oio.OioDatagramChannel v0;
io.netty.channel.ChannelFuture v5;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 := @parameter0: java.net.InetAddress;
v2 := @parameter1: java.net.NetworkInterface;
v3 := @parameter2: java.net.InetAddress;
v4 = new java.lang.UnsupportedOperationException;
specialinvoke v4.<java.lang.UnsupportedOperationException: void <init>()>();
v5 = virtualinvoke v0.<io.netty.channel.socket.oio.OioDatagramChannel: io.netty.channel.ChannelFuture newFailedFuture(java.lang.Throwable)>(v4);
return v5;
}
public io.netty.channel.ChannelFuture leaveGroup(java.net.InetAddress, java.net.NetworkInterface, java.net.InetAddress, io.netty.channel.ChannelPromise)
{
java.net.InetAddress v1, v3;
java.lang.UnsupportedOperationException v5;
io.netty.channel.ChannelPromise v4;
java.net.NetworkInterface v2;
io.netty.channel.socket.oio.OioDatagramChannel v0;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 := @parameter0: java.net.InetAddress;
v2 := @parameter1: java.net.NetworkInterface;
v3 := @parameter2: java.net.InetAddress;
v4 := @parameter3: io.netty.channel.ChannelPromise;
v5 = new java.lang.UnsupportedOperationException;
specialinvoke v5.<java.lang.UnsupportedOperationException: void <init>()>();
interfaceinvoke v4.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v5);
return v4;
}
public io.netty.channel.ChannelFuture block(java.net.InetAddress, java.net.NetworkInterface, java.net.InetAddress)
{
java.net.InetAddress v1, v3;
java.lang.UnsupportedOperationException v4;
java.net.NetworkInterface v2;
io.netty.channel.socket.oio.OioDatagramChannel v0;
io.netty.channel.ChannelFuture v5;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 := @parameter0: java.net.InetAddress;
v2 := @parameter1: java.net.NetworkInterface;
v3 := @parameter2: java.net.InetAddress;
v4 = new java.lang.UnsupportedOperationException;
specialinvoke v4.<java.lang.UnsupportedOperationException: void <init>()>();
v5 = virtualinvoke v0.<io.netty.channel.socket.oio.OioDatagramChannel: io.netty.channel.ChannelFuture newFailedFuture(java.lang.Throwable)>(v4);
return v5;
}
public io.netty.channel.ChannelFuture block(java.net.InetAddress, java.net.NetworkInterface, java.net.InetAddress, io.netty.channel.ChannelPromise)
{
java.net.InetAddress v1, v3;
java.lang.UnsupportedOperationException v5;
io.netty.channel.ChannelPromise v4;
java.net.NetworkInterface v2;
io.netty.channel.socket.oio.OioDatagramChannel v0;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 := @parameter0: java.net.InetAddress;
v2 := @parameter1: java.net.NetworkInterface;
v3 := @parameter2: java.net.InetAddress;
v4 := @parameter3: io.netty.channel.ChannelPromise;
v5 = new java.lang.UnsupportedOperationException;
specialinvoke v5.<java.lang.UnsupportedOperationException: void <init>()>();
interfaceinvoke v4.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v5);
return v4;
}
public io.netty.channel.ChannelFuture block(java.net.InetAddress, java.net.InetAddress)
{
java.net.InetAddress v1, v2;
java.lang.UnsupportedOperationException v3;
io.netty.channel.socket.oio.OioDatagramChannel v0;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 := @parameter0: java.net.InetAddress;
v2 := @parameter1: java.net.InetAddress;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>()>();
v4 = virtualinvoke v0.<io.netty.channel.socket.oio.OioDatagramChannel: io.netty.channel.ChannelFuture newFailedFuture(java.lang.Throwable)>(v3);
return v4;
}
public io.netty.channel.ChannelFuture block(java.net.InetAddress, java.net.InetAddress, io.netty.channel.ChannelPromise)
{
java.net.InetAddress v1, v2;
java.lang.UnsupportedOperationException v4;
io.netty.channel.ChannelPromise v3;
io.netty.channel.socket.oio.OioDatagramChannel v0;
v0 := @this: io.netty.channel.socket.oio.OioDatagramChannel;
v1 := @parameter0: java.net.InetAddress;
v2 := @parameter1: java.net.InetAddress;
v3 := @parameter2: io.netty.channel.ChannelPromise;
v4 = new java.lang.UnsupportedOperationException;
specialinvoke v4.<java.lang.UnsupportedOperationException: void <init>()>();
interfaceinvoke v3.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise setFailure(java.lang.Throwable)>(v4);
return v3;
}
static void <clinit>()
{
io.netty.util.internal.logging.InternalLogger v0;
io.netty.channel.ChannelMetadata v1;
java.lang.String v2, v3, v4, v5, v6, v7;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/channel/socket/oio/OioDatagramChannel;");
<io.netty.channel.socket.oio.OioDatagramChannel: io.netty.util.internal.logging.InternalLogger logger> = v0;
v1 = new io.netty.channel.ChannelMetadata;
specialinvoke v1.<io.netty.channel.ChannelMetadata: void <init>(boolean)>(1);
<io.netty.channel.socket.oio.OioDatagramChannel: io.netty.channel.ChannelMetadata METADATA> = v1;
v2 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String simpleClassName(java.lang.Class)>(class "Lio/netty/channel/socket/DatagramPacket;");
v3 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String simpleClassName(java.lang.Class)>(class "Lio/netty/channel/AddressedEnvelope;");
v4 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String simpleClassName(java.lang.Class)>(class "Lio/netty/buffer/ByteBuf;");
v5 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String simpleClassName(java.lang.Class)>(class "Ljava/net/SocketAddress;");
v6 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String simpleClassName(java.lang.Class)>(class "Lio/netty/buffer/ByteBuf;");
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(v2, v3, v4, v5, v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>(" (expected: \u0001, \u0001<\u0001, \u0001>, \u0001)");
<io.netty.channel.socket.oio.OioDatagramChannel: java.lang.String EXPECTED_TYPES> = v7;
return;
}
}