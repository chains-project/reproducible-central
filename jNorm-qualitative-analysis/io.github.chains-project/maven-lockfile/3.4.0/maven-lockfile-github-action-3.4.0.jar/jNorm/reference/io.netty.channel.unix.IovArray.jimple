public final class io.netty.channel.unix.IovArray extends java.lang.Object implements io.netty.channel.ChannelOutboundBuffer$MessageProcessor
{
private static final int ADDRESS_SIZE;
public static final int IOV_SIZE;
private static final int MAX_CAPACITY;
private final long memoryAddress;
private final io.netty.buffer.ByteBuf memory;
private int count;
private long size;
private long maxBytes;
static final boolean $assertionsDisabled;
public void <init>()
{
io.netty.buffer.ByteBuf v3, v4;
int v1;
io.netty.channel.unix.IovArray v0;
java.nio.ByteBuffer v2;
v0 := @this: io.netty.channel.unix.IovArray;
v1 = <io.netty.channel.unix.IovArray: int MAX_CAPACITY>;
v2 = staticinvoke <io.netty.channel.unix.Buffer: java.nio.ByteBuffer allocateDirectWithNativeOrder(int)>(v1);
v3 = staticinvoke <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf wrappedBuffer(java.nio.ByteBuffer)>(v2);
v4 = virtualinvoke v3.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf setIndex(int,int)>(0, 0);
specialinvoke v0.<io.netty.channel.unix.IovArray: void <init>(io.netty.buffer.ByteBuf)>(v4);
return;
}
public void <init>(io.netty.buffer.ByteBuf)
{
long v14, v17, v2;
java.lang.AssertionError v5, v8;
java.nio.ByteBuffer v16;
io.netty.buffer.ByteBuf v1, v10;
int v15, v4, v7;
io.netty.channel.unix.IovArray v0;
boolean v11, v13, v3, v6, v9;
java.nio.ByteOrder v12;
v0 := @this: io.netty.channel.unix.IovArray;
v1 := @parameter0: io.netty.buffer.ByteBuf;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = <io.netty.channel.unix.Limits: long SSIZE_MAX>;
v0.<io.netty.channel.unix.IovArray: long maxBytes> = v2;
v3 = <io.netty.channel.unix.IovArray: boolean $assertionsDisabled>;
if v3 != 0 goto label1;
v4 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int writerIndex()>();
if v4 == 0 goto label1;
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label1:
v6 = <io.netty.channel.unix.IovArray: boolean $assertionsDisabled>;
if v6 != 0 goto label2;
v7 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readerIndex()>();
if v7 == 0 goto label2;
v8 = new java.lang.AssertionError;
specialinvoke v8.<java.lang.AssertionError: void <init>()>();
throw v8;
label2:
v9 = staticinvoke <io.netty.util.internal.PlatformDependent: boolean hasUnsafe()>();
if v9 == 0 goto label3;
v10 = v1;
goto label6;
label3:
v11 = <io.netty.util.internal.PlatformDependent: boolean BIG_ENDIAN_NATIVE_ORDER>;
if v11 == 0 goto label4;
v12 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;
goto label5;
label4:
v12 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;
label5:
v10 = virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf order(java.nio.ByteOrder)>(v12);
label6:
v0.<io.netty.channel.unix.IovArray: io.netty.buffer.ByteBuf memory> = v10;
v13 = virtualinvoke v1.<io.netty.buffer.ByteBuf: boolean hasMemoryAddress()>();
if v13 == 0 goto label7;
v14 = virtualinvoke v1.<io.netty.buffer.ByteBuf: long memoryAddress()>();
v0.<io.netty.channel.unix.IovArray: long memoryAddress> = v14;
goto label8;
label7:
v15 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int capacity()>();
v16 = virtualinvoke v1.<io.netty.buffer.ByteBuf: java.nio.ByteBuffer internalNioBuffer(int,int)>(0, v15);
v17 = staticinvoke <io.netty.channel.unix.Buffer: long memoryAddress(java.nio.ByteBuffer)>(v16);
v0.<io.netty.channel.unix.IovArray: long memoryAddress> = v17;
label8:
return;
}
public void clear()
{
io.netty.channel.unix.IovArray v0;
v0 := @this: io.netty.channel.unix.IovArray;
v0.<io.netty.channel.unix.IovArray: int count> = 0;
v0.<io.netty.channel.unix.IovArray: long size> = 0L;
return;
}
public boolean add(io.netty.buffer.ByteBuf)
{
io.netty.buffer.ByteBuf v1;
int v2, v3;
io.netty.channel.unix.IovArray v0;
boolean v4;
v0 := @this: io.netty.channel.unix.IovArray;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readerIndex()>();
v3 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
v4 = virtualinvoke v0.<io.netty.channel.unix.IovArray: boolean add(io.netty.buffer.ByteBuf,int,int)>(v1, v2, v3);
return v4;
}
public boolean add(io.netty.buffer.ByteBuf, int, int)
{
long v10, v13, v14, v16, v23, v24, v26, v8, v9;
java.nio.ByteBuffer v12, v21;
io.netty.buffer.ByteBuf v1;
int v15, v19, v2, v20, v22, v25, v28, v29, v3, v4, v5, v6;
io.netty.channel.unix.IovArray v0;
boolean v11, v17, v27, v7;
java.nio.ByteBuffer[] v18;
v0 := @this: io.netty.channel.unix.IovArray;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<io.netty.channel.unix.IovArray: int count>;
v5 = <io.netty.channel.unix.Limits: int IOV_MAX>;
if v4 != v5 goto label1;
return 0;
label1:
v6 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int nioBufferCount()>();
if v6 != 1 goto label4;
if v3 != 0 goto label2;
return 1;
label2:
v7 = virtualinvoke v1.<io.netty.buffer.ByteBuf: boolean hasMemoryAddress()>();
if v7 == 0 goto label3;
v8 = v0.<io.netty.channel.unix.IovArray: long memoryAddress>;
v9 = virtualinvoke v1.<io.netty.buffer.ByteBuf: long memoryAddress()>();
v10 = v9 + v2;
v11 = specialinvoke v0.<io.netty.channel.unix.IovArray: boolean add(long,long,int)>(v8, v10, v3);
return v11;
label3:
v12 = virtualinvoke v1.<io.netty.buffer.ByteBuf: java.nio.ByteBuffer internalNioBuffer(int,int)>(v2, v3);
v13 = v0.<io.netty.channel.unix.IovArray: long memoryAddress>;
v14 = staticinvoke <io.netty.channel.unix.Buffer: long memoryAddress(java.nio.ByteBuffer)>(v12);
v15 = virtualinvoke v12.<java.nio.ByteBuffer: int position()>();
v16 = v14 + v15;
v17 = specialinvoke v0.<io.netty.channel.unix.IovArray: boolean add(long,long,int)>(v13, v16, v3);
return v17;
label4:
v18 = virtualinvoke v1.<io.netty.buffer.ByteBuf: java.nio.ByteBuffer[] nioBuffers(int,int)>(v2, v3);
v19 = lengthof v18;
v20 = 0;
label5:
if v20 >= v19 goto label8;
v21 = v18[v20];
v22 = virtualinvoke v21.<java.nio.ByteBuffer: int remaining()>();
if v22 == 0 goto label7;
v23 = v0.<io.netty.channel.unix.IovArray: long memoryAddress>;
v24 = staticinvoke <io.netty.channel.unix.Buffer: long memoryAddress(java.nio.ByteBuffer)>(v21);
v25 = virtualinvoke v21.<java.nio.ByteBuffer: int position()>();
v26 = v24 + v25;
v27 = specialinvoke v0.<io.netty.channel.unix.IovArray: boolean add(long,long,int)>(v23, v26, v22);
if v27 == 0 goto label6;
v28 = v0.<io.netty.channel.unix.IovArray: int count>;
v29 = <io.netty.channel.unix.Limits: int IOV_MAX>;
if v28 != v29 goto label7;
label6:
return 0;
label7:
v20 = v20 + 1;
goto label5;
label8:
return 1;
}
private boolean add(long, long, int)
{
byte v10, v5;
boolean v27, v32, v35, v4;
long v1, v2, v22, v23, v28, v29, v36, v37, v7, v8, v9;
java.lang.AssertionError v34, v6;
io.netty.buffer.ByteBuf v12, v30, v31, v38, v39;
int v11, v13, v14, v15, v16, v17, v18, v19, v20, v21, v24, v25, v26, v3, v33;
io.netty.channel.unix.IovArray v0;
v0 := @this: io.netty.channel.unix.IovArray;
v1 := @parameter0: long;
v2 := @parameter1: long;
v3 := @parameter2: int;
v4 = <io.netty.channel.unix.IovArray: boolean $assertionsDisabled>;
if v4 != 0 goto label1;
v5 = v2 cmp 0L;
if v5 != 0 goto label1;
v6 = new java.lang.AssertionError;
specialinvoke v6.<java.lang.AssertionError: void <init>()>();
throw v6;
label1:
v7 = v0.<io.netty.channel.unix.IovArray: long maxBytes>;
v8 = v7 - v3;
v9 = v0.<io.netty.channel.unix.IovArray: long size>;
v10 = v8 cmp v9;
if v10 >= 0 goto label2;
v11 = v0.<io.netty.channel.unix.IovArray: int count>;
if v11 > 0 goto label3;
label2:
v12 = v0.<io.netty.channel.unix.IovArray: io.netty.buffer.ByteBuf memory>;
v13 = virtualinvoke v12.<io.netty.buffer.ByteBuf: int capacity()>();
v14 = v0.<io.netty.channel.unix.IovArray: int count>;
v15 = v14 + 1;
v16 = <io.netty.channel.unix.IovArray: int IOV_SIZE>;
v17 = v15 * v16;
if v13 >= v17 goto label4;
label3:
return 0;
label4:
v18 = v0.<io.netty.channel.unix.IovArray: int count>;
v19 = staticinvoke <io.netty.channel.unix.IovArray: int idx(int)>(v18);
v20 = <io.netty.channel.unix.IovArray: int ADDRESS_SIZE>;
v21 = v19 + v20;
v22 = v0.<io.netty.channel.unix.IovArray: long size>;
v23 = v22 + v3;
v0.<io.netty.channel.unix.IovArray: long size> = v23;
v24 = v0.<io.netty.channel.unix.IovArray: int count>;
v25 = v24 + 1;
v0.<io.netty.channel.unix.IovArray: int count> = v25;
v26 = <io.netty.channel.unix.IovArray: int ADDRESS_SIZE>;
if v26 != 8 goto label6;
v27 = staticinvoke <io.netty.util.internal.PlatformDependent: boolean hasUnsafe()>();
if v27 == 0 goto label5;
v28 = v19 + v1;
staticinvoke <io.netty.util.internal.PlatformDependent: void putLong(long,long)>(v28, v2);
v29 = v21 + v1;
staticinvoke <io.netty.util.internal.PlatformDependent: void putLong(long,long)>(v29, v3);
goto label9;
label5:
v30 = v0.<io.netty.channel.unix.IovArray: io.netty.buffer.ByteBuf memory>;
virtualinvoke v30.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf setLong(int,long)>(v19, v2);
v31 = v0.<io.netty.channel.unix.IovArray: io.netty.buffer.ByteBuf memory>;
virtualinvoke v31.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf setLong(int,long)>(v21, v3);
goto label9;
label6:
v32 = <io.netty.channel.unix.IovArray: boolean $assertionsDisabled>;
if v32 != 0 goto label7;
v33 = <io.netty.channel.unix.IovArray: int ADDRESS_SIZE>;
if v33 == 4 goto label7;
v34 = new java.lang.AssertionError;
specialinvoke v34.<java.lang.AssertionError: void <init>()>();
throw v34;
label7:
v35 = staticinvoke <io.netty.util.internal.PlatformDependent: boolean hasUnsafe()>();
if v35 == 0 goto label8;
v36 = v19 + v1;
staticinvoke <io.netty.util.internal.PlatformDependent: void putInt(long,int)>(v36, v2);
v37 = v21 + v1;
staticinvoke <io.netty.util.internal.PlatformDependent: void putInt(long,int)>(v37, v3);
goto label9;
label8:
v38 = v0.<io.netty.channel.unix.IovArray: io.netty.buffer.ByteBuf memory>;
virtualinvoke v38.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf setInt(int,int)>(v19, v2);
v39 = v0.<io.netty.channel.unix.IovArray: io.netty.buffer.ByteBuf memory>;
virtualinvoke v39.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf setInt(int,int)>(v21, v3);
label9:
return 1;
}
public int count()
{
int v1;
io.netty.channel.unix.IovArray v0;
v0 := @this: io.netty.channel.unix.IovArray;
v1 = v0.<io.netty.channel.unix.IovArray: int count>;
return v1;
}
public long size()
{
long v1;
io.netty.channel.unix.IovArray v0;
v0 := @this: io.netty.channel.unix.IovArray;
v1 = v0.<io.netty.channel.unix.IovArray: long size>;
return v1;
}
public void maxBytes(long)
{
long v1, v2, v3, v4;
io.netty.channel.unix.IovArray v0;
v0 := @this: io.netty.channel.unix.IovArray;
v1 := @parameter0: long;
v2 = <io.netty.channel.unix.Limits: long SSIZE_MAX>;
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: long checkPositive(long,java.lang.String)>(v1, "maxBytes");
v4 = staticinvoke <java.lang.Math: long min(long,long)>(v2, v3);
v0.<io.netty.channel.unix.IovArray: long maxBytes> = v4;
return;
}
public long maxBytes()
{
long v1;
io.netty.channel.unix.IovArray v0;
v0 := @this: io.netty.channel.unix.IovArray;
v1 = v0.<io.netty.channel.unix.IovArray: long maxBytes>;
return v1;
}
public long memoryAddress(int)
{
int v1, v3;
long v2, v4;
io.netty.channel.unix.IovArray v0;
v0 := @this: io.netty.channel.unix.IovArray;
v1 := @parameter0: int;
v2 = v0.<io.netty.channel.unix.IovArray: long memoryAddress>;
v3 = staticinvoke <io.netty.channel.unix.IovArray: int idx(int)>(v1);
v4 = v2 + v3;
return v4;
}
public void release()
{
io.netty.buffer.ByteBuf v1;
io.netty.channel.unix.IovArray v0;
v0 := @this: io.netty.channel.unix.IovArray;
v1 = v0.<io.netty.channel.unix.IovArray: io.netty.buffer.ByteBuf memory>;
virtualinvoke v1.<io.netty.buffer.ByteBuf: boolean release()>();
return;
}
public boolean processMessage(java.lang.Object) throws java.lang.Exception
{
int v3, v4;
java.lang.Object v1;
io.netty.channel.unix.IovArray v0;
boolean v2, v5;
v0 := @this: io.netty.channel.unix.IovArray;
v1 := @parameter0: java.lang.Object;
v2 = v1 instanceof io.netty.buffer.ByteBuf;
if v2 == 0 goto label1;
v3 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readerIndex()>();
v4 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
v5 = virtualinvoke v0.<io.netty.channel.unix.IovArray: boolean add(io.netty.buffer.ByteBuf,int,int)>(v1, v3, v4);
return v5;
label1:
return 0;
}
private static int idx(int)
{
int v0, v1, v2;
v0 := @parameter0: int;
v1 = <io.netty.channel.unix.IovArray: int IOV_SIZE>;
v2 = v1 * v0;
return v2;
}
static void <clinit>()
{
int v3, v4, v5, v6, v7, v8;
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/channel/unix/IovArray;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.channel.unix.IovArray: boolean $assertionsDisabled> = v2;
v3 = staticinvoke <io.netty.channel.unix.Buffer: int addressSize()>();
<io.netty.channel.unix.IovArray: int ADDRESS_SIZE> = v3;
v4 = <io.netty.channel.unix.IovArray: int ADDRESS_SIZE>;
v5 = 2 * v4;
<io.netty.channel.unix.IovArray: int IOV_SIZE> = v5;
v6 = <io.netty.channel.unix.Limits: int IOV_MAX>;
v7 = <io.netty.channel.unix.IovArray: int IOV_SIZE>;
v8 = v6 * v7;
<io.netty.channel.unix.IovArray: int MAX_CAPACITY> = v8;
return;
}
}