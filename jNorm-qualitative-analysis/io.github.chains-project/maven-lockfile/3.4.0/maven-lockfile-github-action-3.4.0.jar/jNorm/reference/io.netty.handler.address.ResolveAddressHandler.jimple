public class io.netty.handler.address.ResolveAddressHandler extends io.netty.channel.ChannelOutboundHandlerAdapter
{
private final io.netty.resolver.AddressResolverGroup resolverGroup;
public void <init>(io.netty.resolver.AddressResolverGroup)
{
io.netty.resolver.AddressResolverGroup v1;
java.lang.Object v2;
io.netty.handler.address.ResolveAddressHandler v0;
v0 := @this: io.netty.handler.address.ResolveAddressHandler;
v1 := @parameter0: io.netty.resolver.AddressResolverGroup;
specialinvoke v0.<io.netty.channel.ChannelOutboundHandlerAdapter: void <init>()>();
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "resolverGroup");
v0.<io.netty.handler.address.ResolveAddressHandler: io.netty.resolver.AddressResolverGroup resolverGroup> = v2;
return;
}
public void connect(io.netty.channel.ChannelHandlerContext, java.net.SocketAddress, java.net.SocketAddress, io.netty.channel.ChannelPromise)
{
io.netty.util.concurrent.EventExecutor v6;
io.netty.resolver.AddressResolver v7;
io.netty.handler.address.ResolveAddressHandler$1 v11;
java.net.SocketAddress v2, v3;
io.netty.channel.ChannelPipeline v12;
io.netty.channel.ChannelHandlerContext v1;
io.netty.resolver.AddressResolverGroup v5;
io.netty.channel.ChannelPromise v4;
io.netty.handler.address.ResolveAddressHandler v0;
io.netty.util.concurrent.Future v10;
boolean v8, v9;
v0 := @this: io.netty.handler.address.ResolveAddressHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.net.SocketAddress;
v3 := @parameter2: java.net.SocketAddress;
v4 := @parameter3: io.netty.channel.ChannelPromise;
v5 = v0.<io.netty.handler.address.ResolveAddressHandler: io.netty.resolver.AddressResolverGroup resolverGroup>;
v6 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v7 = virtualinvoke v5.<io.netty.resolver.AddressResolverGroup: io.netty.resolver.AddressResolver getResolver(io.netty.util.concurrent.EventExecutor)>(v6);
v8 = interfaceinvoke v7.<io.netty.resolver.AddressResolver: boolean isSupported(java.net.SocketAddress)>(v2);
if v8 == 0 goto label1;
v9 = interfaceinvoke v7.<io.netty.resolver.AddressResolver: boolean isResolved(java.net.SocketAddress)>(v2);
if v9 != 0 goto label1;
v10 = interfaceinvoke v7.<io.netty.resolver.AddressResolver: io.netty.util.concurrent.Future resolve(java.net.SocketAddress)>(v2);
v11 = new io.netty.handler.address.ResolveAddressHandler$1;
specialinvoke v11.<io.netty.handler.address.ResolveAddressHandler$1: void <init>(io.netty.handler.address.ResolveAddressHandler,io.netty.channel.ChannelPromise,io.netty.channel.ChannelHandlerContext,java.net.SocketAddress)>(v0, v4, v1, v3);
interfaceinvoke v10.<io.netty.util.concurrent.Future: io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)>(v11);
goto label2;
label1:
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)>(v2, v3, v4);
v12 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPipeline pipeline()>();
interfaceinvoke v12.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline remove(io.netty.channel.ChannelHandler)>(v0);
label2:
return;
}
}