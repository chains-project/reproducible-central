public abstract class io.netty.handler.codec.MessageToMessageDecoder extends io.netty.channel.ChannelInboundHandlerAdapter
{
private final io.netty.util.internal.TypeParameterMatcher matcher;
protected void <init>()
{
io.netty.handler.codec.MessageToMessageDecoder v0;
io.netty.util.internal.TypeParameterMatcher v1;
v0 := @this: io.netty.handler.codec.MessageToMessageDecoder;
specialinvoke v0.<io.netty.channel.ChannelInboundHandlerAdapter: void <init>()>();
v1 = staticinvoke <io.netty.util.internal.TypeParameterMatcher: io.netty.util.internal.TypeParameterMatcher find(java.lang.Object,java.lang.Class,java.lang.String)>(v0, class "Lio/netty/handler/codec/MessageToMessageDecoder;", "I");
v0.<io.netty.handler.codec.MessageToMessageDecoder: io.netty.util.internal.TypeParameterMatcher matcher> = v1;
return;
}
protected void <init>(java.lang.Class)
{
io.netty.handler.codec.MessageToMessageDecoder v0;
io.netty.util.internal.TypeParameterMatcher v2;
java.lang.Class v1;
v0 := @this: io.netty.handler.codec.MessageToMessageDecoder;
v1 := @parameter0: java.lang.Class;
specialinvoke v0.<io.netty.channel.ChannelInboundHandlerAdapter: void <init>()>();
v2 = staticinvoke <io.netty.util.internal.TypeParameterMatcher: io.netty.util.internal.TypeParameterMatcher get(java.lang.Class)>(v1);
v0.<io.netty.handler.codec.MessageToMessageDecoder: io.netty.util.internal.TypeParameterMatcher matcher> = v2;
return;
}
public boolean acceptInboundMessage(java.lang.Object) throws java.lang.Exception
{
io.netty.handler.codec.MessageToMessageDecoder v0;
io.netty.util.internal.TypeParameterMatcher v2;
java.lang.Object v1;
boolean v3;
v0 := @this: io.netty.handler.codec.MessageToMessageDecoder;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.netty.handler.codec.MessageToMessageDecoder: io.netty.util.internal.TypeParameterMatcher matcher>;
v3 = virtualinvoke v2.<io.netty.util.internal.TypeParameterMatcher: boolean match(java.lang.Object)>(v1);
return v3;
}
public void channelRead(io.netty.channel.ChannelHandlerContext, java.lang.Object) throws java.lang.Exception
{
java.lang.Throwable v13, v17, v5, v9;
io.netty.channel.ChannelHandlerContext v1;
int v14, v15, v6, v7;
io.netty.handler.codec.CodecOutputList v3;
boolean v4;
io.netty.handler.codec.DecoderException v10, v12;
io.netty.handler.codec.MessageToMessageDecoder v0;
java.lang.Exception v11;
java.lang.Object v16, v2, v8;
v0 := @this: io.netty.handler.codec.MessageToMessageDecoder;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 = staticinvoke <io.netty.handler.codec.CodecOutputList: io.netty.handler.codec.CodecOutputList newInstance()>();
label01:
v4 = virtualinvoke v0.<io.netty.handler.codec.MessageToMessageDecoder: boolean acceptInboundMessage(java.lang.Object)>(v2);
if v4 == 0 goto label05;
label02:
virtualinvoke v0.<io.netty.handler.codec.MessageToMessageDecoder: void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)>(v1, v2, v3);
label03:
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v2);
goto label06;
label04:
v5 := @caughtexception;
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v2);
throw v5;
label05:
virtualinvoke v3.<io.netty.handler.codec.CodecOutputList: boolean add(java.lang.Object)>(v2);
label06:
v6 = virtualinvoke v3.<io.netty.handler.codec.CodecOutputList: int size()>();
v7 = 0;
label07:
if v7 >= v6 goto label08;
v8 = virtualinvoke v3.<io.netty.handler.codec.CodecOutputList: java.lang.Object getUnsafe(int)>(v7);
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)>(v8);
v7 = v7 + 1;
goto label07;
label08:
virtualinvoke v3.<io.netty.handler.codec.CodecOutputList: void recycle()>();
goto label18;
label09:
v9 := @caughtexception;
virtualinvoke v3.<io.netty.handler.codec.CodecOutputList: void recycle()>();
throw v9;
label10:
v10 := @caughtexception;
throw v10;
label11:
v11 := @caughtexception;
v12 = new io.netty.handler.codec.DecoderException;
specialinvoke v12.<io.netty.handler.codec.DecoderException: void <init>(java.lang.Throwable)>(v11);
throw v12;
label12:
v13 := @caughtexception;
label13:
v14 = virtualinvoke v3.<io.netty.handler.codec.CodecOutputList: int size()>();
v15 = 0;
label14:
if v15 >= v14 goto label15;
v16 = virtualinvoke v3.<io.netty.handler.codec.CodecOutputList: java.lang.Object getUnsafe(int)>(v15);
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)>(v16);
v15 = v15 + 1;
goto label14;
label15:
virtualinvoke v3.<io.netty.handler.codec.CodecOutputList: void recycle()>();
goto label17;
label16:
v17 := @caughtexception;
virtualinvoke v3.<io.netty.handler.codec.CodecOutputList: void recycle()>();
throw v17;
label17:
throw v13;
label18:
return;
catch java.lang.Throwable from label02 to label03 with label04;
catch java.lang.Throwable from label06 to label08 with label09;
catch io.netty.handler.codec.DecoderException from label01 to label06 with label10;
catch java.lang.Exception from label01 to label06 with label11;
catch java.lang.Throwable from label01 to label06 with label12;
catch java.lang.Throwable from label13 to label15 with label16;
}
protected abstract void decode(io.netty.channel.ChannelHandlerContext, java.lang.Object, java.util.List) throws java.lang.Exception;
}