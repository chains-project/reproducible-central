final class io.netty.handler.codec.compression.CompressionUtil extends java.lang.Object
{
private void <init>()
{
io.netty.handler.codec.compression.CompressionUtil v0;
v0 := @this: io.netty.handler.codec.compression.CompressionUtil;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void checkChecksum(io.netty.handler.codec.compression.ByteBufChecksum, io.netty.buffer.ByteBuf, int)
{
io.netty.handler.codec.compression.DecompressionException v6;
java.lang.Object[] v7;
long v5;
io.netty.handler.codec.compression.ByteBufChecksum v0;
java.lang.Integer v8, v9;
io.netty.buffer.ByteBuf v1;
int v2, v3, v4;
java.lang.String v10;
v0 := @parameter0: io.netty.handler.codec.compression.ByteBufChecksum;
v1 := @parameter1: io.netty.buffer.ByteBuf;
v2 := @parameter2: int;
virtualinvoke v0.<io.netty.handler.codec.compression.ByteBufChecksum: void reset()>();
v3 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readerIndex()>();
v4 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
virtualinvoke v0.<io.netty.handler.codec.compression.ByteBufChecksum: void update(io.netty.buffer.ByteBuf,int,int)>(v1, v3, v4);
v5 = virtualinvoke v0.<io.netty.handler.codec.compression.ByteBufChecksum: long getValue()>();
if v5 == v2 goto label1;
v6 = new io.netty.handler.codec.compression.DecompressionException;
v7 = newarray (java.lang.Object)[2];
v8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v5);
v7[0] = v8;
v9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v2);
v7[1] = v9;
v10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("stream corrupted: mismatching checksum: %d (expected: %d)", v7);
specialinvoke v6.<io.netty.handler.codec.compression.DecompressionException: void <init>(java.lang.String)>(v10);
throw v6;
label1:
return;
}
static java.nio.ByteBuffer safeNioBuffer(io.netty.buffer.ByteBuf)
{
io.netty.buffer.ByteBuf v0;
int v1, v2, v3;
java.nio.ByteBuffer v4;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int nioBufferCount()>();
if v1 != 1 goto label1;
v2 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int readerIndex()>();
v3 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int readableBytes()>();
v4 = virtualinvoke v0.<io.netty.buffer.ByteBuf: java.nio.ByteBuffer internalNioBuffer(int,int)>(v2, v3);
goto label2;
label1:
v4 = virtualinvoke v0.<io.netty.buffer.ByteBuf: java.nio.ByteBuffer nioBuffer()>();
label2:
return v4;
}
static java.nio.ByteBuffer safeNioBuffer(io.netty.buffer.ByteBuf, int, int)
{
io.netty.buffer.ByteBuf v0;
int v1, v2, v3;
java.nio.ByteBuffer v4;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int nioBufferCount()>();
if v3 != 1 goto label1;
v4 = virtualinvoke v0.<io.netty.buffer.ByteBuf: java.nio.ByteBuffer internalNioBuffer(int,int)>(v1, v2);
goto label2;
label1:
v4 = virtualinvoke v0.<io.netty.buffer.ByteBuf: java.nio.ByteBuffer nioBuffer(int,int)>(v1, v2);
label2:
return v4;
}
}