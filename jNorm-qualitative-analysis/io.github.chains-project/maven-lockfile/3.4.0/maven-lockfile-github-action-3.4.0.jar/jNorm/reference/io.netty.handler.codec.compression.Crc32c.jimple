class io.netty.handler.codec.compression.Crc32c extends io.netty.handler.codec.compression.ByteBufChecksum
{
private static final int[] CRC_TABLE;
private static final long LONG_MASK;
private static final int BYTE_MASK;
private int crc;
void <init>()
{
int v1;
io.netty.handler.codec.compression.Crc32c v0;
v0 := @this: io.netty.handler.codec.compression.Crc32c;
specialinvoke v0.<io.netty.handler.codec.compression.ByteBufChecksum: void <init>()>();
v1 = (int) -1;
v0.<io.netty.handler.codec.compression.Crc32c: int crc> = v1;
return;
}
public void update(int)
{
io.netty.handler.codec.compression.Crc32c v0;
int v1, v2, v3;
v0 := @this: io.netty.handler.codec.compression.Crc32c;
v1 := @parameter0: int;
v2 = v0.<io.netty.handler.codec.compression.Crc32c: int crc>;
v3 = staticinvoke <io.netty.handler.codec.compression.Crc32c: int crc32c(int,int)>(v2, v1);
v0.<io.netty.handler.codec.compression.Crc32c: int crc> = v3;
return;
}
public void update(byte[], int, int)
{
byte[] v1;
io.netty.handler.codec.compression.Crc32c v0;
byte v6;
int v2, v3, v4, v5;
v0 := @this: io.netty.handler.codec.compression.Crc32c;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v2 + v3;
v5 = v2;
label1:
if v5 >= v4 goto label2;
v6 = v1[v5];
virtualinvoke v0.<io.netty.handler.codec.compression.Crc32c: void update(int)>(v6);
v5 = v5 + 1;
goto label1;
label2:
return;
}
public long getValue()
{
io.netty.handler.codec.compression.Crc32c v0;
int v1;
long v2, v3;
v0 := @this: io.netty.handler.codec.compression.Crc32c;
v1 = v0.<io.netty.handler.codec.compression.Crc32c: int crc>;
v2 = v1 ^ 4294967295L;
v3 = v2 & 4294967295L;
return v3;
}
public void reset()
{
int v1;
io.netty.handler.codec.compression.Crc32c v0;
v0 := @this: io.netty.handler.codec.compression.Crc32c;
v1 = (int) -1;
v0.<io.netty.handler.codec.compression.Crc32c: int crc> = v1;
return;
}
private static int crc32c(int, int)
{
int[] v3;
int v0, v1, v2, v4, v5, v6, v7, v8;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 = v0 >>> 8;
v3 = <io.netty.handler.codec.compression.Crc32c: int[] CRC_TABLE>;
v4 = v1 & 255;
v5 = v0 ^ v4;
v6 = v5 & 255;
v7 = v3[v6];
v8 = v2 ^ v7;
return v8;
}
static void <clinit>()
{
int[] v0;
v0 = newarray (int)[256];
v0[0] = 0;
v0[1] = -227835133;
v0[2] = -516198153;
v0[3] = 324072436;
v0[4] = -946170081;
v0[5] = 904991772;
v0[6] = 648144872;
v0[7] = -724933397;
v0[8] = -1965467441;
v0[9] = 2024987596;
v0[10] = 1809983544;
v0[11] = -1719030981;
v0[12] = 1296289744;
v0[13] = -1087877933;
v0[14] = -1401372889;
v0[15] = 1578318884;
v0[16] = 274646895;
v0[17] = -499825556;
v0[18] = -244992104;
v0[19] = 51262619;
v0[20] = -675000208;
v0[21] = 632279923;
v0[22] = 922689671;
v0[23] = -996891772;
v0[24] = -1702387808;
v0[25] = 1760304291;
v0[26] = 2075979607;
v0[27] = -1982370732;
v0[28] = 1562183871;
v0[29] = -1351185476;
v0[30] = -1138329528;
v0[31] = 1313733451;
v0[32] = 549293790;
v0[33] = -757723683;
v0[34] = -1048117719;
v0[35] = 871202090;
v0[36] = -416867903;
v0[37] = 357341890;
v0[38] = 102525238;
v0[39] = -193467851;
v0[40] = -1436232175;
v0[41] = 1477399826;
v0[42] = 1264559846;
v0[43] = -1187764763;
v0[44] = 1845379342;
v0[45] = -1617575411;
v0[46] = -1933233671;
v0[47] = 2125378298;
v0[48] = 820201905;
v0[49] = -1031222606;
v0[50] = -774358714;
v0[51] = 598981189;
v0[52] = -143008082;
v0[53] = 85089709;
v0[54] = 373468761;
v0[55] = -467063462;
v0[56] = -1170599554;
v0[57] = 1213305469;
v0[58] = 1526817161;
v0[59] = -1452612982;
v0[60] = 2107672161;
v0[61] = -1882520222;
v0[62] = -1667500394;
v0[63] = 1861252501;
v0[64] = 1098587580;
v0[65] = -1290756417;
v0[66] = -1606390453;
v0[67] = 1378610760;
v0[68] = -2032039261;
v0[69] = 1955203488;
v0[70] = 1742404180;
v0[71] = -1783531177;
v0[72] = -878557837;
v0[73] = 969524848;
v0[74] = 714683780;
v0[75] = -655182201;
v0[76] = 205050476;
v0[77] = -28094097;
v0[78] = -318528869;
v0[79] = 526918040;
v0[80] = 1361435347;
v0[81] = -1555146288;
v0[82] = -1340167644;
v0[83] = 1114974503;
v0[84] = -1765847604;
v0[85] = 1691668175;
v0[86] = 2005155131;
v0[87] = -2047885768;
v0[88] = -604208612;
v0[89] = 697762079;
v0[90] = 986182379;
v0[91] = -928222744;
v0[92] = 476452099;
v0[93] = -301099520;
v0[94] = -44210700;
v0[95] = 255256311;
v0[96] = 1640403810;
v0[97] = -1817374623;
v0[98] = -2130844779;
v0[99] = 1922457750;
v0[100] = -1503918979;
v0[101] = 1412925310;
v0[102] = 1197962378;
v0[103] = -1257441399;
v0[104] = -350237779;
v0[105] = 427051182;
v0[106] = 170179418;
v0[107] = -129025959;
v0[108] = 746937522;
v0[109] = -554770511;
v0[110] = -843174843;
v0[111] = 1070968646;
v0[112] = 1905808397;
v0[113] = -2081171698;
v0[114] = -1868356358;
v0[115] = 1657317369;
v0[116] = -1241332974;
v0[117] = 1147748369;
v0[118] = 1463399397;
v0[119] = -1521340186;
v0[120] = -79622974;
v0[121] = 153784257;
v0[122] = 444234805;
v0[123] = -401473738;
v0[124] = 1021025245;
v0[125] = -827320098;
v0[126] = -572462294;
v0[127] = 797665321;
v0[128] = -2097792136;
v0[129] = 1889384571;
v0[130] = 1674398607;
v0[131] = -1851340660;
v0[132] = 1164749927;
v0[133] = -1224265884;
v0[134] = -1537745776;
v0[135] = 1446797203;
v0[136] = 137323447;
v0[137] = -96149324;
v0[138] = -384560320;
v0[139] = 461344835;
v0[140] = -810158936;
v0[141] = 1037989803;
v0[142] = 781091935;
v0[143] = -588970148;
v0[144] = -1834419177;
v0[145] = 1623424788;
v0[146] = 1939049696;
v0[147] = -2114449437;
v0[148] = 1429367560;
v0[149] = -1487280117;
v0[150] = -1274471425;
v0[151] = 1180866812;
v0[152] = 410100952;
v0[153] = -367384613;
v0[154] = -112536529;
v0[155] = 186734380;
v0[156] = -538233913;
v0[157] = 763408580;
v0[158] = 1053836080;
v0[159] = -860110797;
v0[160] = -1572096602;
v0[161] = 1344288421;
v0[162] = 1131464017;
v0[163] = -1323612590;
v0[164] = 1708204729;
v0[165] = -1749376582;
v0[166] = -2065018290;
v0[167] = 1988219213;
v0[168] = 680717673;
v0[169] = -621187478;
v0[170] = -911630946;
v0[171] = 1002577565;
v0[172] = -284657034;
v0[173] = 493091189;
v0[174] = 238226049;
v0[175] = -61306494;
v0[176] = -1307217207;
v0[177] = 1082061258;
v0[178] = 1395524158;
v0[179] = -1589280451;
v0[180] = 1972364758;
v0[181] = -2015074603;
v0[182] = -1800104671;
v0[183] = 1725896226;
v0[184] = 952904198;
v0[185] = -894981883;
v0[186] = -638100751;
v0[187] = 731699698;
v0[188] = -11092711;
v0[189] = 222117402;
v0[190] = 510512622;
v0[191] = -335130899;
v0[192] = -1014159676;
v0[193] = 837199303;
v0[194] = 582374963;
v0[195] = -790768336;
v0[196] = 68661723;
v0[197] = -159632680;
v0[198] = -450051796;
v0[199] = 390545967;
v0[200] = 1230274059;
v0[201] = -1153434360;
v0[202] = -1469116676;
v0[203] = 1510247935;
v0[204] = -1899042540;
v0[205] = 2091215383;
v0[206] = 1878366691;
v0[207] = -1650582816;
v0[208] = -741088853;
v0[209] = 565732008;
v0[210] = 854102364;
v0[211] = -1065151905;
v0[212] = 340358836;
v0[213] = -433916489;
v0[214] = -177076669;
v0[215] = 119113024;
v0[216] = 1493875044;
v0[217] = -1419691417;
v0[218] = -1204696685;
v0[219] = 1247431312;
v0[220] = -1634718085;
v0[221] = 1828433272;
v0[222] = 2141937292;
v0[223] = -1916740209;
v0[224] = -483350502;
v0[225] = 291187481;
v0[226] = 34330861;
v0[227] = -262120466;
v0[228] = 615137029;
v0[229] = -691946490;
v0[230] = -980332558;
v0[231] = 939183345;
v0[232] = 1776939221;
v0[233] = -1685949482;
v0[234] = -1999470558;
v0[235] = 2058945313;
v0[236] = -1368168502;
v0[237] = 1545135305;
v0[238] = 1330124605;
v0[239] = -1121741762;
v0[240] = -210866315;
v0[241] = 17165430;
v0[242] = 307568514;
v0[243] = -532767615;
v0[244] = 888469610;
v0[245] = -962626711;
v0[246] = -707819363;
v0[247] = 665062302;
v0[248] = 2042050490;
v0[249] = -1948470087;
v0[250] = -1735637171;
v0[251] = 1793573966;
v0[252] = -1104306011;
v0[253] = 1279665062;
v0[254] = 1595330642;
v0[255] = -1384295599;
<io.netty.handler.codec.compression.Crc32c: int[] CRC_TABLE> = v0;
return;
}
}