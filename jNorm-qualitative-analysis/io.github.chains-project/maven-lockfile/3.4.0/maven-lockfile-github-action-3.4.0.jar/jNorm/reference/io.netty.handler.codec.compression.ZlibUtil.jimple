final class io.netty.handler.codec.compression.ZlibUtil extends java.lang.Object
{
static void fail(com.jcraft.jzlib.Inflater, java.lang.String, int)
{
io.netty.handler.codec.compression.DecompressionException v3;
int v2;
com.jcraft.jzlib.Inflater v0;
java.lang.String v1;
v0 := @parameter0: com.jcraft.jzlib.Inflater;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: int;
v3 = staticinvoke <io.netty.handler.codec.compression.ZlibUtil: io.netty.handler.codec.compression.DecompressionException inflaterException(com.jcraft.jzlib.Inflater,java.lang.String,int)>(v0, v1, v2);
throw v3;
}
static void fail(com.jcraft.jzlib.Deflater, java.lang.String, int)
{
com.jcraft.jzlib.Deflater v0;
io.netty.handler.codec.compression.CompressionException v3;
int v2;
java.lang.String v1;
v0 := @parameter0: com.jcraft.jzlib.Deflater;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: int;
v3 = staticinvoke <io.netty.handler.codec.compression.ZlibUtil: io.netty.handler.codec.compression.CompressionException deflaterException(com.jcraft.jzlib.Deflater,java.lang.String,int)>(v0, v1, v2);
throw v3;
}
static io.netty.handler.codec.compression.DecompressionException inflaterException(com.jcraft.jzlib.Inflater, java.lang.String, int)
{
io.netty.handler.codec.compression.DecompressionException v3;
com.jcraft.jzlib.Inflater v0;
int v2;
java.lang.String v1, v4, v5, v6, v7;
v0 := @parameter0: com.jcraft.jzlib.Inflater;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: int;
v3 = new io.netty.handler.codec.compression.DecompressionException;
v4 = v0.<com.jcraft.jzlib.Inflater: java.lang.String msg>;
if v4 == null goto label1;
v5 = v0.<com.jcraft.jzlib.Inflater: java.lang.String msg>;
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>(": \u0001");
goto label2;
label1:
v6 = "";
label2:
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int,java.lang.String)>(v1, v2, v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 (\u0001)\u0001");
specialinvoke v3.<io.netty.handler.codec.compression.DecompressionException: void <init>(java.lang.String)>(v7);
return v3;
}
static io.netty.handler.codec.compression.CompressionException deflaterException(com.jcraft.jzlib.Deflater, java.lang.String, int)
{
com.jcraft.jzlib.Deflater v0;
io.netty.handler.codec.compression.CompressionException v3;
int v2;
java.lang.String v1, v4, v5, v6, v7;
v0 := @parameter0: com.jcraft.jzlib.Deflater;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: int;
v3 = new io.netty.handler.codec.compression.CompressionException;
v4 = v0.<com.jcraft.jzlib.Deflater: java.lang.String msg>;
if v4 == null goto label1;
v5 = v0.<com.jcraft.jzlib.Deflater: java.lang.String msg>;
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>(": \u0001");
goto label2;
label1:
v6 = "";
label2:
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int,java.lang.String)>(v1, v2, v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 (\u0001)\u0001");
specialinvoke v3.<io.netty.handler.codec.compression.CompressionException: void <init>(java.lang.String)>(v7);
return v3;
}
static com.jcraft.jzlib.JZlib$WrapperType convertWrapperType(io.netty.handler.codec.compression.ZlibWrapper)
{
int[] v1;
int v2, v3;
java.lang.Error v5;
com.jcraft.jzlib.JZlib$WrapperType v4;
io.netty.handler.codec.compression.ZlibWrapper v0;
v0 := @parameter0: io.netty.handler.codec.compression.ZlibWrapper;
v1 = <io.netty.handler.codec.compression.ZlibUtil$1: int[] $SwitchMap$io$netty$handler$codec$compression$ZlibWrapper>;
v2 = virtualinvoke v0.<io.netty.handler.codec.compression.ZlibWrapper: int ordinal()>();
v3 = v1[v2];
tableswitch(v3)
{
case 1: goto label1;
case 2: goto label2;
case 3: goto label3;
case 4: goto label4;
default: goto label5;
};
label1:
v4 = <com.jcraft.jzlib.JZlib: com.jcraft.jzlib.JZlib$WrapperType W_NONE>;
goto label6;
label2:
v4 = <com.jcraft.jzlib.JZlib: com.jcraft.jzlib.JZlib$WrapperType W_ZLIB>;
goto label6;
label3:
v4 = <com.jcraft.jzlib.JZlib: com.jcraft.jzlib.JZlib$WrapperType W_GZIP>;
goto label6;
label4:
v4 = <com.jcraft.jzlib.JZlib: com.jcraft.jzlib.JZlib$WrapperType W_ANY>;
goto label6;
label5:
v5 = new java.lang.Error;
specialinvoke v5.<java.lang.Error: void <init>()>();
throw v5;
label6:
return v4;
}
static int wrapperOverhead(io.netty.handler.codec.compression.ZlibWrapper)
{
byte v4;
int[] v1;
int v2, v3;
java.lang.Error v5;
io.netty.handler.codec.compression.ZlibWrapper v0;
v0 := @parameter0: io.netty.handler.codec.compression.ZlibWrapper;
v1 = <io.netty.handler.codec.compression.ZlibUtil$1: int[] $SwitchMap$io$netty$handler$codec$compression$ZlibWrapper>;
v2 = virtualinvoke v0.<io.netty.handler.codec.compression.ZlibWrapper: int ordinal()>();
v3 = v1[v2];
tableswitch(v3)
{
case 1: goto label1;
case 2: goto label2;
case 3: goto label3;
case 4: goto label2;
default: goto label4;
};
label1:
v4 = 0;
goto label5;
label2:
v4 = 2;
goto label5;
label3:
v4 = 10;
goto label5;
label4:
v5 = new java.lang.Error;
specialinvoke v5.<java.lang.Error: void <init>()>();
throw v5;
label5:
return v4;
}
private void <init>()
{
io.netty.handler.codec.compression.ZlibUtil v0;
v0 := @this: io.netty.handler.codec.compression.ZlibUtil;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
}