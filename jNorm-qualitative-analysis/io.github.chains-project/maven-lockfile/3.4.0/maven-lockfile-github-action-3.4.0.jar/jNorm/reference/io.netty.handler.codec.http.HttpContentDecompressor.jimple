public class io.netty.handler.codec.http.HttpContentDecompressor extends io.netty.handler.codec.http.HttpContentDecoder
{
private final boolean strict;
public void <init>()
{
io.netty.handler.codec.http.HttpContentDecompressor v0;
v0 := @this: io.netty.handler.codec.http.HttpContentDecompressor;
specialinvoke v0.<io.netty.handler.codec.http.HttpContentDecompressor: void <init>(boolean)>(0);
return;
}
public void <init>(boolean)
{
io.netty.handler.codec.http.HttpContentDecompressor v0;
boolean v1;
v0 := @this: io.netty.handler.codec.http.HttpContentDecompressor;
v1 := @parameter0: boolean;
specialinvoke v0.<io.netty.handler.codec.http.HttpContentDecoder: void <init>()>();
v0.<io.netty.handler.codec.http.HttpContentDecompressor: boolean strict> = v1;
return;
}
protected io.netty.channel.embedded.EmbeddedChannel newContentDecoder(java.lang.String) throws java.lang.Exception
{
io.netty.util.AsciiString v2, v20, v22, v4, v40, v55;
io.netty.handler.codec.compression.BrotliDecoder v54;
io.netty.channel.ChannelMetadata v12, v32, v48, v63;
java.lang.String v1;
io.netty.channel.ChannelHandler[] v17, v37, v53, v68;
io.netty.channel.Channel v11, v15, v28, v31, v35, v44, v47, v51, v59, v62, v66, v8;
io.netty.channel.ChannelId v29, v45, v60, v9;
io.netty.handler.codec.compression.ZlibDecoder v19, v38;
boolean v13, v21, v23, v24, v3, v33, v39, v41, v49, v5, v56, v64;
io.netty.channel.ChannelHandlerContext v10, v14, v27, v30, v34, v43, v46, v50, v58, v61, v65, v7;
io.netty.channel.embedded.EmbeddedChannel v26, v42, v57, v6;
io.netty.handler.codec.compression.ZlibWrapper v18, v25;
io.netty.handler.codec.compression.SnappyFrameDecoder v69;
io.netty.channel.ChannelConfig v16, v36, v52, v67;
io.netty.handler.codec.http.HttpContentDecompressor v0;
v0 := @this: io.netty.handler.codec.http.HttpContentDecompressor;
v1 := @parameter0: java.lang.String;
v2 = <io.netty.handler.codec.http.HttpHeaderValues: io.netty.util.AsciiString GZIP>;
v3 = virtualinvoke v2.<io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence)>(v1);
if v3 != 0 goto label1;
v4 = <io.netty.handler.codec.http.HttpHeaderValues: io.netty.util.AsciiString X_GZIP>;
v5 = virtualinvoke v4.<io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence)>(v1);
if v5 == 0 goto label2;
label1:
v6 = new io.netty.channel.embedded.EmbeddedChannel;
v7 = v0.<io.netty.handler.codec.http.HttpContentDecompressor: io.netty.channel.ChannelHandlerContext ctx>;
v8 = interfaceinvoke v7.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v9 = interfaceinvoke v8.<io.netty.channel.Channel: io.netty.channel.ChannelId id()>();
v10 = v0.<io.netty.handler.codec.http.HttpContentDecompressor: io.netty.channel.ChannelHandlerContext ctx>;
v11 = interfaceinvoke v10.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v12 = interfaceinvoke v11.<io.netty.channel.Channel: io.netty.channel.ChannelMetadata metadata()>();
v13 = virtualinvoke v12.<io.netty.channel.ChannelMetadata: boolean hasDisconnect()>();
v14 = v0.<io.netty.handler.codec.http.HttpContentDecompressor: io.netty.channel.ChannelHandlerContext ctx>;
v15 = interfaceinvoke v14.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v16 = interfaceinvoke v15.<io.netty.channel.Channel: io.netty.channel.ChannelConfig config()>();
v17 = newarray (io.netty.channel.ChannelHandler)[1];
v18 = <io.netty.handler.codec.compression.ZlibWrapper: io.netty.handler.codec.compression.ZlibWrapper GZIP>;
v19 = staticinvoke <io.netty.handler.codec.compression.ZlibCodecFactory: io.netty.handler.codec.compression.ZlibDecoder newZlibDecoder(io.netty.handler.codec.compression.ZlibWrapper)>(v18);
v17[0] = v19;
specialinvoke v6.<io.netty.channel.embedded.EmbeddedChannel: void <init>(io.netty.channel.ChannelId,boolean,io.netty.channel.ChannelConfig,io.netty.channel.ChannelHandler[])>(v9, v13, v16, v17);
return v6;
label2:
v20 = <io.netty.handler.codec.http.HttpHeaderValues: io.netty.util.AsciiString DEFLATE>;
v21 = virtualinvoke v20.<io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence)>(v1);
if v21 != 0 goto label3;
v22 = <io.netty.handler.codec.http.HttpHeaderValues: io.netty.util.AsciiString X_DEFLATE>;
v23 = virtualinvoke v22.<io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence)>(v1);
if v23 == 0 goto label6;
label3:
v24 = v0.<io.netty.handler.codec.http.HttpContentDecompressor: boolean strict>;
if v24 == 0 goto label4;
v25 = <io.netty.handler.codec.compression.ZlibWrapper: io.netty.handler.codec.compression.ZlibWrapper ZLIB>;
goto label5;
label4:
v25 = <io.netty.handler.codec.compression.ZlibWrapper: io.netty.handler.codec.compression.ZlibWrapper ZLIB_OR_NONE>;
label5:
v26 = new io.netty.channel.embedded.EmbeddedChannel;
v27 = v0.<io.netty.handler.codec.http.HttpContentDecompressor: io.netty.channel.ChannelHandlerContext ctx>;
v28 = interfaceinvoke v27.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v29 = interfaceinvoke v28.<io.netty.channel.Channel: io.netty.channel.ChannelId id()>();
v30 = v0.<io.netty.handler.codec.http.HttpContentDecompressor: io.netty.channel.ChannelHandlerContext ctx>;
v31 = interfaceinvoke v30.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v32 = interfaceinvoke v31.<io.netty.channel.Channel: io.netty.channel.ChannelMetadata metadata()>();
v33 = virtualinvoke v32.<io.netty.channel.ChannelMetadata: boolean hasDisconnect()>();
v34 = v0.<io.netty.handler.codec.http.HttpContentDecompressor: io.netty.channel.ChannelHandlerContext ctx>;
v35 = interfaceinvoke v34.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v36 = interfaceinvoke v35.<io.netty.channel.Channel: io.netty.channel.ChannelConfig config()>();
v37 = newarray (io.netty.channel.ChannelHandler)[1];
v38 = staticinvoke <io.netty.handler.codec.compression.ZlibCodecFactory: io.netty.handler.codec.compression.ZlibDecoder newZlibDecoder(io.netty.handler.codec.compression.ZlibWrapper)>(v25);
v37[0] = v38;
specialinvoke v26.<io.netty.channel.embedded.EmbeddedChannel: void <init>(io.netty.channel.ChannelId,boolean,io.netty.channel.ChannelConfig,io.netty.channel.ChannelHandler[])>(v29, v33, v36, v37);
return v26;
label6:
v39 = staticinvoke <io.netty.handler.codec.compression.Brotli: boolean isAvailable()>();
if v39 == 0 goto label7;
v40 = <io.netty.handler.codec.http.HttpHeaderValues: io.netty.util.AsciiString BR>;
v41 = virtualinvoke v40.<io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence)>(v1);
if v41 == 0 goto label7;
v42 = new io.netty.channel.embedded.EmbeddedChannel;
v43 = v0.<io.netty.handler.codec.http.HttpContentDecompressor: io.netty.channel.ChannelHandlerContext ctx>;
v44 = interfaceinvoke v43.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v45 = interfaceinvoke v44.<io.netty.channel.Channel: io.netty.channel.ChannelId id()>();
v46 = v0.<io.netty.handler.codec.http.HttpContentDecompressor: io.netty.channel.ChannelHandlerContext ctx>;
v47 = interfaceinvoke v46.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v48 = interfaceinvoke v47.<io.netty.channel.Channel: io.netty.channel.ChannelMetadata metadata()>();
v49 = virtualinvoke v48.<io.netty.channel.ChannelMetadata: boolean hasDisconnect()>();
v50 = v0.<io.netty.handler.codec.http.HttpContentDecompressor: io.netty.channel.ChannelHandlerContext ctx>;
v51 = interfaceinvoke v50.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v52 = interfaceinvoke v51.<io.netty.channel.Channel: io.netty.channel.ChannelConfig config()>();
v53 = newarray (io.netty.channel.ChannelHandler)[1];
v54 = new io.netty.handler.codec.compression.BrotliDecoder;
specialinvoke v54.<io.netty.handler.codec.compression.BrotliDecoder: void <init>()>();
v53[0] = v54;
specialinvoke v42.<io.netty.channel.embedded.EmbeddedChannel: void <init>(io.netty.channel.ChannelId,boolean,io.netty.channel.ChannelConfig,io.netty.channel.ChannelHandler[])>(v45, v49, v52, v53);
return v42;
label7:
v55 = <io.netty.handler.codec.http.HttpHeaderValues: io.netty.util.AsciiString SNAPPY>;
v56 = virtualinvoke v55.<io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence)>(v1);
if v56 == 0 goto label8;
v57 = new io.netty.channel.embedded.EmbeddedChannel;
v58 = v0.<io.netty.handler.codec.http.HttpContentDecompressor: io.netty.channel.ChannelHandlerContext ctx>;
v59 = interfaceinvoke v58.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v60 = interfaceinvoke v59.<io.netty.channel.Channel: io.netty.channel.ChannelId id()>();
v61 = v0.<io.netty.handler.codec.http.HttpContentDecompressor: io.netty.channel.ChannelHandlerContext ctx>;
v62 = interfaceinvoke v61.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v63 = interfaceinvoke v62.<io.netty.channel.Channel: io.netty.channel.ChannelMetadata metadata()>();
v64 = virtualinvoke v63.<io.netty.channel.ChannelMetadata: boolean hasDisconnect()>();
v65 = v0.<io.netty.handler.codec.http.HttpContentDecompressor: io.netty.channel.ChannelHandlerContext ctx>;
v66 = interfaceinvoke v65.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v67 = interfaceinvoke v66.<io.netty.channel.Channel: io.netty.channel.ChannelConfig config()>();
v68 = newarray (io.netty.channel.ChannelHandler)[1];
v69 = new io.netty.handler.codec.compression.SnappyFrameDecoder;
specialinvoke v69.<io.netty.handler.codec.compression.SnappyFrameDecoder: void <init>()>();
v68[0] = v69;
specialinvoke v57.<io.netty.channel.embedded.EmbeddedChannel: void <init>(io.netty.channel.ChannelId,boolean,io.netty.channel.ChannelConfig,io.netty.channel.ChannelHandler[])>(v60, v64, v67, v68);
return v57;
label8:
return null;
}
}