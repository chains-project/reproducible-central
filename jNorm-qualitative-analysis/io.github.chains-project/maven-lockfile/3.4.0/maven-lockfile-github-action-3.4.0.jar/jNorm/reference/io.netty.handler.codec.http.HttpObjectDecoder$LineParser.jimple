final class io.netty.handler.codec.http.HttpObjectDecoder$LineParser extends io.netty.handler.codec.http.HttpObjectDecoder$HeaderParser
{
static final boolean $assertionsDisabled;
final io.netty.handler.codec.http.HttpObjectDecoder this$0;
void <init>(io.netty.handler.codec.http.HttpObjectDecoder, io.netty.buffer.ByteBuf, int)
{
io.netty.handler.codec.http.HttpObjectDecoder v1;
io.netty.buffer.ByteBuf v2;
int v3;
io.netty.handler.codec.http.HttpObjectDecoder$LineParser v0;
v0 := @this: io.netty.handler.codec.http.HttpObjectDecoder$LineParser;
v1 := @parameter0: io.netty.handler.codec.http.HttpObjectDecoder;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 := @parameter2: int;
v0.<io.netty.handler.codec.http.HttpObjectDecoder$LineParser: io.netty.handler.codec.http.HttpObjectDecoder this$0> = v1;
specialinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder$HeaderParser: void <init>(io.netty.buffer.ByteBuf,int)>(v2, v3);
return;
}
public io.netty.buffer.ByteBuf parse(io.netty.buffer.ByteBuf)
{
io.netty.handler.codec.http.HttpObjectDecoder v4;
io.netty.handler.codec.http.HttpObjectDecoder$State v5, v6;
io.netty.buffer.ByteBuf v1, v8;
int v2, v3;
io.netty.handler.codec.http.HttpObjectDecoder$LineParser v0;
boolean v7;
v0 := @this: io.netty.handler.codec.http.HttpObjectDecoder$LineParser;
v1 := @parameter0: io.netty.buffer.ByteBuf;
virtualinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder$LineParser: void reset()>();
v2 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
if v2 != 0 goto label1;
return null;
label1:
v3 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readerIndex()>();
v4 = v0.<io.netty.handler.codec.http.HttpObjectDecoder$LineParser: io.netty.handler.codec.http.HttpObjectDecoder this$0>;
v5 = v4.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpObjectDecoder$State currentState>;
v6 = <io.netty.handler.codec.http.HttpObjectDecoder$State: io.netty.handler.codec.http.HttpObjectDecoder$State SKIP_CONTROL_CHARS>;
if v5 != v6 goto label2;
v7 = specialinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder$LineParser: boolean skipControlChars(io.netty.buffer.ByteBuf,int,int)>(v1, v2, v3);
if v7 == 0 goto label2;
return null;
label2:
v8 = specialinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder$HeaderParser: io.netty.buffer.ByteBuf parse(io.netty.buffer.ByteBuf)>(v1);
return v8;
}
private boolean skipControlChars(io.netty.buffer.ByteBuf, int, int)
{
java.lang.AssertionError v8;
io.netty.buffer.ByteBuf v1;
int v10, v12, v13, v14, v15, v2, v3, v9;
boolean v4;
io.netty.handler.codec.http.HttpObjectDecoder v17, v5;
io.netty.handler.codec.http.HttpObjectDecoder$State v18, v6, v7;
io.netty.handler.codec.TooLongFrameException v16;
io.netty.util.ByteProcessor v11;
io.netty.handler.codec.http.HttpObjectDecoder$LineParser v0;
v0 := @this: io.netty.handler.codec.http.HttpObjectDecoder$LineParser;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = <io.netty.handler.codec.http.HttpObjectDecoder$LineParser: boolean $assertionsDisabled>;
if v4 != 0 goto label1;
v5 = v0.<io.netty.handler.codec.http.HttpObjectDecoder$LineParser: io.netty.handler.codec.http.HttpObjectDecoder this$0>;
v6 = v5.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpObjectDecoder$State currentState>;
v7 = <io.netty.handler.codec.http.HttpObjectDecoder$State: io.netty.handler.codec.http.HttpObjectDecoder$State SKIP_CONTROL_CHARS>;
if v6 == v7 goto label1;
v8 = new java.lang.AssertionError;
specialinvoke v8.<java.lang.AssertionError: void <init>()>();
throw v8;
label1:
v9 = v0.<io.netty.handler.codec.http.HttpObjectDecoder$LineParser: int maxLength>;
v10 = staticinvoke <java.lang.Math: int min(int,int)>(v9, v2);
v11 = <io.netty.handler.codec.http.HttpObjectDecoder: io.netty.util.ByteProcessor SKIP_CONTROL_CHARS_BYTES>;
v12 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int forEachByte(int,int,io.netty.util.ByteProcessor)>(v3, v10, v11);
v13 = (int) -1;
if v12 != v13 goto label3;
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf skipBytes(int)>(v10);
v14 = v0.<io.netty.handler.codec.http.HttpObjectDecoder$LineParser: int maxLength>;
if v2 <= v14 goto label2;
v15 = v0.<io.netty.handler.codec.http.HttpObjectDecoder$LineParser: int maxLength>;
v16 = virtualinvoke v0.<io.netty.handler.codec.http.HttpObjectDecoder$LineParser: io.netty.handler.codec.TooLongFrameException newException(int)>(v15);
throw v16;
label2:
return 1;
label3:
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readerIndex(int)>(v12);
v17 = v0.<io.netty.handler.codec.http.HttpObjectDecoder$LineParser: io.netty.handler.codec.http.HttpObjectDecoder this$0>;
v18 = <io.netty.handler.codec.http.HttpObjectDecoder$State: io.netty.handler.codec.http.HttpObjectDecoder$State READ_INITIAL>;
v17.<io.netty.handler.codec.http.HttpObjectDecoder: io.netty.handler.codec.http.HttpObjectDecoder$State currentState> = v18;
return 0;
}
protected io.netty.handler.codec.TooLongFrameException newException(int)
{
io.netty.handler.codec.http.TooLongHttpLineException v2;
int v1;
java.lang.String v3;
io.netty.handler.codec.http.HttpObjectDecoder$LineParser v0;
v0 := @this: io.netty.handler.codec.http.HttpObjectDecoder$LineParser;
v1 := @parameter0: int;
v2 = new io.netty.handler.codec.http.TooLongHttpLineException;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("An HTTP line is larger than \u0001 bytes.");
specialinvoke v2.<io.netty.handler.codec.http.TooLongHttpLineException: void <init>(java.lang.String)>(v3);
return v2;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/handler/codec/http/HttpObjectDecoder;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.handler.codec.http.HttpObjectDecoder$LineParser: boolean $assertionsDisabled> = v2;
return;
}
}