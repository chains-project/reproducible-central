public class io.netty.handler.codec.http.HttpServerUpgradeHandler extends io.netty.handler.codec.http.HttpObjectAggregator
{
private final io.netty.handler.codec.http.HttpServerUpgradeHandler$SourceCodec sourceCodec;
private final io.netty.handler.codec.http.HttpServerUpgradeHandler$UpgradeCodecFactory upgradeCodecFactory;
private final boolean validateHeaders;
private boolean handlingUpgrade;
static final boolean $assertionsDisabled;
public void <init>(io.netty.handler.codec.http.HttpServerUpgradeHandler$SourceCodec, io.netty.handler.codec.http.HttpServerUpgradeHandler$UpgradeCodecFactory)
{
io.netty.handler.codec.http.HttpServerUpgradeHandler$SourceCodec v1;
io.netty.handler.codec.http.HttpServerUpgradeHandler$UpgradeCodecFactory v2;
io.netty.handler.codec.http.HttpServerUpgradeHandler v0;
v0 := @this: io.netty.handler.codec.http.HttpServerUpgradeHandler;
v1 := @parameter0: io.netty.handler.codec.http.HttpServerUpgradeHandler$SourceCodec;
v2 := @parameter1: io.netty.handler.codec.http.HttpServerUpgradeHandler$UpgradeCodecFactory;
specialinvoke v0.<io.netty.handler.codec.http.HttpServerUpgradeHandler: void <init>(io.netty.handler.codec.http.HttpServerUpgradeHandler$SourceCodec,io.netty.handler.codec.http.HttpServerUpgradeHandler$UpgradeCodecFactory,int)>(v1, v2, 0);
return;
}
public void <init>(io.netty.handler.codec.http.HttpServerUpgradeHandler$SourceCodec, io.netty.handler.codec.http.HttpServerUpgradeHandler$UpgradeCodecFactory, int)
{
io.netty.handler.codec.http.HttpServerUpgradeHandler$SourceCodec v1;
int v3;
io.netty.handler.codec.http.HttpServerUpgradeHandler$UpgradeCodecFactory v2;
io.netty.handler.codec.http.HttpServerUpgradeHandler v0;
v0 := @this: io.netty.handler.codec.http.HttpServerUpgradeHandler;
v1 := @parameter0: io.netty.handler.codec.http.HttpServerUpgradeHandler$SourceCodec;
v2 := @parameter1: io.netty.handler.codec.http.HttpServerUpgradeHandler$UpgradeCodecFactory;
v3 := @parameter2: int;
specialinvoke v0.<io.netty.handler.codec.http.HttpServerUpgradeHandler: void <init>(io.netty.handler.codec.http.HttpServerUpgradeHandler$SourceCodec,io.netty.handler.codec.http.HttpServerUpgradeHandler$UpgradeCodecFactory,int,boolean)>(v1, v2, v3, 1);
return;
}
public void <init>(io.netty.handler.codec.http.HttpServerUpgradeHandler$SourceCodec, io.netty.handler.codec.http.HttpServerUpgradeHandler$UpgradeCodecFactory, int, boolean)
{
io.netty.handler.codec.http.HttpServerUpgradeHandler$SourceCodec v1;
int v3;
java.lang.Object v5, v6;
io.netty.handler.codec.http.HttpServerUpgradeHandler$UpgradeCodecFactory v2;
boolean v4;
io.netty.handler.codec.http.HttpServerUpgradeHandler v0;
v0 := @this: io.netty.handler.codec.http.HttpServerUpgradeHandler;
v1 := @parameter0: io.netty.handler.codec.http.HttpServerUpgradeHandler$SourceCodec;
v2 := @parameter1: io.netty.handler.codec.http.HttpServerUpgradeHandler$UpgradeCodecFactory;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
specialinvoke v0.<io.netty.handler.codec.http.HttpObjectAggregator: void <init>(int)>(v3);
v5 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "sourceCodec");
v0.<io.netty.handler.codec.http.HttpServerUpgradeHandler: io.netty.handler.codec.http.HttpServerUpgradeHandler$SourceCodec sourceCodec> = v5;
v6 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "upgradeCodecFactory");
v0.<io.netty.handler.codec.http.HttpServerUpgradeHandler: io.netty.handler.codec.http.HttpServerUpgradeHandler$UpgradeCodecFactory upgradeCodecFactory> = v6;
v0.<io.netty.handler.codec.http.HttpServerUpgradeHandler: boolean validateHeaders> = v4;
return;
}
protected void decode(io.netty.channel.ChannelHandlerContext, io.netty.handler.codec.http.HttpObject, java.util.List) throws java.lang.Exception
{
io.netty.handler.codec.http.HttpHeaders v6;
io.netty.util.AsciiString v7;
java.lang.AssertionError v14;
io.netty.handler.codec.http.HttpObject v2;
io.netty.channel.ChannelHandlerContext v1;
int v13;
boolean v10, v11, v12, v15, v4, v5, v8, v9;
java.util.List v3;
io.netty.handler.codec.http.HttpServerUpgradeHandler v0;
v0 := @this: io.netty.handler.codec.http.HttpServerUpgradeHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.handler.codec.http.HttpObject;
v3 := @parameter2: java.util.List;
v4 = v0.<io.netty.handler.codec.http.HttpServerUpgradeHandler: boolean handlingUpgrade>;
if v4 != 0 goto label3;
v5 = v2 instanceof io.netty.handler.codec.http.HttpRequest;
if v5 == 0 goto label2;
v6 = interfaceinvoke v2.<io.netty.handler.codec.http.HttpRequest: io.netty.handler.codec.http.HttpHeaders headers()>();
v7 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString UPGRADE>;
v8 = virtualinvoke v6.<io.netty.handler.codec.http.HttpHeaders: boolean contains(java.lang.CharSequence)>(v7);
if v8 == 0 goto label1;
v9 = virtualinvoke v0.<io.netty.handler.codec.http.HttpServerUpgradeHandler: boolean shouldHandleUpgradeRequest(io.netty.handler.codec.http.HttpRequest)>(v2);
if v9 == 0 goto label1;
v0.<io.netty.handler.codec.http.HttpServerUpgradeHandler: boolean handlingUpgrade> = 1;
goto label3;
label1:
staticinvoke <io.netty.util.ReferenceCountUtil: java.lang.Object retain(java.lang.Object)>(v2);
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)>(v2);
return;
label2:
staticinvoke <io.netty.util.ReferenceCountUtil: java.lang.Object retain(java.lang.Object)>(v2);
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)>(v2);
return;
label3:
v10 = v2 instanceof io.netty.handler.codec.http.FullHttpRequest;
if v10 == 0 goto label4;
staticinvoke <io.netty.util.ReferenceCountUtil: java.lang.Object retain(java.lang.Object)>(v2);
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v2);
goto label7;
label4:
specialinvoke v0.<io.netty.handler.codec.http.HttpObjectAggregator: void decode(io.netty.channel.ChannelHandlerContext,java.lang.Object,java.util.List)>(v1, v2, v3);
v11 = interfaceinvoke v3.<java.util.List: boolean isEmpty()>();
if v11 == 0 goto label5;
return;
label5:
v12 = <io.netty.handler.codec.http.HttpServerUpgradeHandler: boolean $assertionsDisabled>;
if v12 != 0 goto label6;
v13 = interfaceinvoke v3.<java.util.List: int size()>();
if v13 == 1 goto label6;
v14 = new java.lang.AssertionError;
specialinvoke v14.<java.lang.AssertionError: void <init>()>();
throw v14;
label6:
v0.<io.netty.handler.codec.http.HttpServerUpgradeHandler: boolean handlingUpgrade> = 0;
interfaceinvoke v3.<java.util.List: java.lang.Object get(int)>(0);
label7:
v15 = specialinvoke v0.<io.netty.handler.codec.http.HttpServerUpgradeHandler: boolean upgrade(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>(v1, v2);
if v15 == 0 goto label8;
interfaceinvoke v3.<java.util.List: void clear()>();
label8:
return;
}
protected boolean shouldHandleUpgradeRequest(io.netty.handler.codec.http.HttpRequest)
{
io.netty.handler.codec.http.HttpRequest v1;
io.netty.handler.codec.http.HttpServerUpgradeHandler v0;
v0 := @this: io.netty.handler.codec.http.HttpServerUpgradeHandler;
v1 := @parameter0: io.netty.handler.codec.http.HttpRequest;
return 1;
}
private boolean upgrade(io.netty.channel.ChannelHandlerContext, io.netty.handler.codec.http.FullHttpRequest)
{
io.netty.handler.codec.http.HttpHeaders v14, v3, v35, v38;
io.netty.util.AsciiString v15, v29, v4;
io.netty.handler.codec.http.HttpServerUpgradeHandler$UpgradeEvent v40, v44;
io.netty.handler.codec.http.HttpServerUpgradeHandler$SourceCodec v42;
boolean v17, v22, v30, v31, v33, v36, v39;
java.lang.CharSequence v9;
java.util.Collection v27;
io.netty.channel.ChannelPipeline v43;
io.netty.handler.codec.http.FullHttpRequest v2;
java.util.List v16, v28, v6;
io.netty.handler.codec.http.HttpServerUpgradeHandler$UpgradeCodec v13, v8;
java.lang.StringBuilder v18, v24;
java.lang.Throwable v46;
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelFutureListener v45;
int v10, v19, v20, v25, v26, v7;
java.lang.String v5;
io.netty.handler.codec.http.HttpServerUpgradeHandler$UpgradeCodecFactory v12;
java.util.Iterator v21, v32;
io.netty.channel.ChannelFuture v41;
io.netty.handler.codec.http.FullHttpResponse v37;
java.lang.Object v11, v23, v34;
io.netty.handler.codec.http.HttpServerUpgradeHandler v0;
v0 := @this: io.netty.handler.codec.http.HttpServerUpgradeHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.handler.codec.http.FullHttpRequest;
v3 = interfaceinvoke v2.<io.netty.handler.codec.http.FullHttpRequest: io.netty.handler.codec.http.HttpHeaders headers()>();
v4 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString UPGRADE>;
v5 = virtualinvoke v3.<io.netty.handler.codec.http.HttpHeaders: java.lang.String get(java.lang.CharSequence)>(v4);
v6 = staticinvoke <io.netty.handler.codec.http.HttpServerUpgradeHandler: java.util.List splitHeader(java.lang.CharSequence)>(v5);
v7 = interfaceinvoke v6.<java.util.List: int size()>();
v8 = null;
v9 = null;
v10 = 0;
label01:
if v10 >= v7 goto label03;
v11 = interfaceinvoke v6.<java.util.List: java.lang.Object get(int)>(v10);
v12 = v0.<io.netty.handler.codec.http.HttpServerUpgradeHandler: io.netty.handler.codec.http.HttpServerUpgradeHandler$UpgradeCodecFactory upgradeCodecFactory>;
v13 = interfaceinvoke v12.<io.netty.handler.codec.http.HttpServerUpgradeHandler$UpgradeCodecFactory: io.netty.handler.codec.http.HttpServerUpgradeHandler$UpgradeCodec newUpgradeCodec(java.lang.CharSequence)>(v11);
if v13 == null goto label02;
v9 = v11;
v8 = v13;
goto label03;
label02:
v10 = v10 + 1;
goto label01;
label03:
if v8 != null goto label04;
return 0;
label04:
v14 = interfaceinvoke v2.<io.netty.handler.codec.http.FullHttpRequest: io.netty.handler.codec.http.HttpHeaders headers()>();
v15 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString CONNECTION>;
v16 = virtualinvoke v14.<io.netty.handler.codec.http.HttpHeaders: java.util.List getAll(java.lang.CharSequence)>(v15);
if v16 == null goto label05;
v17 = interfaceinvoke v16.<java.util.List: boolean isEmpty()>();
if v17 == 0 goto label06;
label05:
return 0;
label06:
v18 = new java.lang.StringBuilder;
v19 = interfaceinvoke v16.<java.util.List: int size()>();
v20 = v19 * 10;
specialinvoke v18.<java.lang.StringBuilder: void <init>(int)>(v20);
v21 = interfaceinvoke v16.<java.util.List: java.util.Iterator iterator()>();
label07:
v22 = interfaceinvoke v21.<java.util.Iterator: boolean hasNext()>();
if v22 == 0 goto label08;
v23 = interfaceinvoke v21.<java.util.Iterator: java.lang.Object next()>();
v24 = virtualinvoke v18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(v23);
virtualinvoke v24.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);
goto label07;
label08:
v25 = virtualinvoke v18.<java.lang.StringBuilder: int length()>();
v26 = v25 - 1;
virtualinvoke v18.<java.lang.StringBuilder: void setLength(int)>(v26);
v27 = interfaceinvoke v8.<io.netty.handler.codec.http.HttpServerUpgradeHandler$UpgradeCodec: java.util.Collection requiredUpgradeHeaders()>();
v28 = staticinvoke <io.netty.handler.codec.http.HttpServerUpgradeHandler: java.util.List splitHeader(java.lang.CharSequence)>(v18);
v29 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString UPGRADE>;
v30 = staticinvoke <io.netty.util.AsciiString: boolean containsContentEqualsIgnoreCase(java.util.Collection,java.lang.CharSequence)>(v28, v29);
if v30 == 0 goto label09;
v31 = staticinvoke <io.netty.util.AsciiString: boolean containsAllContentEqualsIgnoreCase(java.util.Collection,java.util.Collection)>(v28, v27);
if v31 != 0 goto label10;
label09:
return 0;
label10:
v32 = interfaceinvoke v27.<java.util.Collection: java.util.Iterator iterator()>();
label11:
v33 = interfaceinvoke v32.<java.util.Iterator: boolean hasNext()>();
if v33 == 0 goto label12;
v34 = interfaceinvoke v32.<java.util.Iterator: java.lang.Object next()>();
v35 = interfaceinvoke v2.<io.netty.handler.codec.http.FullHttpRequest: io.netty.handler.codec.http.HttpHeaders headers()>();
v36 = virtualinvoke v35.<io.netty.handler.codec.http.HttpHeaders: boolean contains(java.lang.CharSequence)>(v34);
if v36 != 0 goto label11;
return 0;
label12:
v37 = specialinvoke v0.<io.netty.handler.codec.http.HttpServerUpgradeHandler: io.netty.handler.codec.http.FullHttpResponse createUpgradeResponse(java.lang.CharSequence)>(v9);
v38 = interfaceinvoke v37.<io.netty.handler.codec.http.FullHttpResponse: io.netty.handler.codec.http.HttpHeaders headers()>();
v39 = interfaceinvoke v8.<io.netty.handler.codec.http.HttpServerUpgradeHandler$UpgradeCodec: boolean prepareUpgradeResponse(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders)>(v1, v2, v38);
if v39 != 0 goto label13;
return 0;
label13:
v40 = new io.netty.handler.codec.http.HttpServerUpgradeHandler$UpgradeEvent;
specialinvoke v40.<io.netty.handler.codec.http.HttpServerUpgradeHandler$UpgradeEvent: void <init>(java.lang.CharSequence,io.netty.handler.codec.http.FullHttpRequest)>(v9, v2);
label14:
v41 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object)>(v37);
v42 = v0.<io.netty.handler.codec.http.HttpServerUpgradeHandler: io.netty.handler.codec.http.HttpServerUpgradeHandler$SourceCodec sourceCodec>;
interfaceinvoke v42.<io.netty.handler.codec.http.HttpServerUpgradeHandler$SourceCodec: void upgradeFrom(io.netty.channel.ChannelHandlerContext)>(v1);
interfaceinvoke v8.<io.netty.handler.codec.http.HttpServerUpgradeHandler$UpgradeCodec: void upgradeTo(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)>(v1, v2);
v43 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPipeline pipeline()>();
interfaceinvoke v43.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline remove(io.netty.channel.ChannelHandler)>(v0);
v44 = virtualinvoke v40.<io.netty.handler.codec.http.HttpServerUpgradeHandler$UpgradeEvent: io.netty.handler.codec.http.HttpServerUpgradeHandler$UpgradeEvent retain()>();
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireUserEventTriggered(java.lang.Object)>(v44);
v45 = <io.netty.channel.ChannelFutureListener: io.netty.channel.ChannelFutureListener CLOSE_ON_FAILURE>;
interfaceinvoke v41.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v45);
label15:
virtualinvoke v40.<io.netty.handler.codec.http.HttpServerUpgradeHandler$UpgradeEvent: boolean release()>();
goto label17;
label16:
v46 := @caughtexception;
virtualinvoke v40.<io.netty.handler.codec.http.HttpServerUpgradeHandler$UpgradeEvent: boolean release()>();
throw v46;
label17:
return 1;
catch java.lang.Throwable from label14 to label15 with label16;
}
private io.netty.handler.codec.http.FullHttpResponse createUpgradeResponse(java.lang.CharSequence)
{
io.netty.handler.codec.http.HttpVersion v3;
io.netty.handler.codec.http.HttpHeaders v10, v7;
java.lang.CharSequence v1;
io.netty.util.AsciiString v11, v8, v9;
io.netty.handler.codec.http.HttpResponseStatus v4;
io.netty.buffer.ByteBuf v5;
io.netty.handler.codec.http.DefaultFullHttpResponse v2;
boolean v6;
io.netty.handler.codec.http.HttpServerUpgradeHandler v0;
v0 := @this: io.netty.handler.codec.http.HttpServerUpgradeHandler;
v1 := @parameter0: java.lang.CharSequence;
v2 = new io.netty.handler.codec.http.DefaultFullHttpResponse;
v3 = <io.netty.handler.codec.http.HttpVersion: io.netty.handler.codec.http.HttpVersion HTTP_1_1>;
v4 = <io.netty.handler.codec.http.HttpResponseStatus: io.netty.handler.codec.http.HttpResponseStatus SWITCHING_PROTOCOLS>;
v5 = <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf EMPTY_BUFFER>;
v6 = v0.<io.netty.handler.codec.http.HttpServerUpgradeHandler: boolean validateHeaders>;
specialinvoke v2.<io.netty.handler.codec.http.DefaultFullHttpResponse: void <init>(io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpResponseStatus,io.netty.buffer.ByteBuf,boolean)>(v3, v4, v5, v6);
v7 = virtualinvoke v2.<io.netty.handler.codec.http.DefaultFullHttpResponse: io.netty.handler.codec.http.HttpHeaders headers()>();
v8 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString CONNECTION>;
v9 = <io.netty.handler.codec.http.HttpHeaderValues: io.netty.util.AsciiString UPGRADE>;
virtualinvoke v7.<io.netty.handler.codec.http.HttpHeaders: io.netty.handler.codec.http.HttpHeaders add(java.lang.CharSequence,java.lang.Object)>(v8, v9);
v10 = virtualinvoke v2.<io.netty.handler.codec.http.DefaultFullHttpResponse: io.netty.handler.codec.http.HttpHeaders headers()>();
v11 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString UPGRADE>;
virtualinvoke v10.<io.netty.handler.codec.http.HttpHeaders: io.netty.handler.codec.http.HttpHeaders add(java.lang.CharSequence,java.lang.Object)>(v11, v1);
return v2;
}
private static java.util.List splitHeader(java.lang.CharSequence)
{
java.lang.CharSequence v0;
char v6;
java.util.ArrayList v3;
int v2, v4, v5, v9;
java.lang.StringBuilder v1;
java.lang.String v10, v8;
boolean v7;
v0 := @parameter0: java.lang.CharSequence;
v1 = new java.lang.StringBuilder;
v2 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
specialinvoke v1.<java.lang.StringBuilder: void <init>(int)>(v2);
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>(int)>(4);
v4 = 0;
label1:
v5 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
if v4 >= v5 goto label4;
v6 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v4);
v7 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(v6);
if v7 != 0 goto label3;
if v6 != 44 goto label2;
v8 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.String toString()>();
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v8);
virtualinvoke v1.<java.lang.StringBuilder: void setLength(int)>(0);
goto label3;
label2:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v6);
label3:
v4 = v4 + 1;
goto label1;
label4:
v9 = virtualinvoke v1.<java.lang.StringBuilder: int length()>();
if v9 <= 0 goto label5;
v10 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.String toString()>();
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v10);
label5:
return v3;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/handler/codec/http/HttpServerUpgradeHandler;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.handler.codec.http.HttpServerUpgradeHandler: boolean $assertionsDisabled> = v2;
return;
}
}