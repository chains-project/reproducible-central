final class io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator extends java.lang.Object implements java.util.Map$Entry, java.util.Iterator
{
private java.lang.String key;
private java.lang.String value;
private int nextNameIndex;
final io.netty.handler.codec.http.ReadOnlyHttpHeaders this$0;
private void <init>(io.netty.handler.codec.http.ReadOnlyHttpHeaders)
{
io.netty.handler.codec.http.ReadOnlyHttpHeaders v1;
io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator v0;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator;
v1 := @parameter0: io.netty.handler.codec.http.ReadOnlyHttpHeaders;
v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator: io.netty.handler.codec.http.ReadOnlyHttpHeaders this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public boolean hasNext()
{
java.lang.CharSequence[] v3;
int v1, v4;
io.netty.handler.codec.http.ReadOnlyHttpHeaders v2;
boolean v5;
io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator v0;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator;
v1 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator: int nextNameIndex>;
v2 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator: io.netty.handler.codec.http.ReadOnlyHttpHeaders this$0>;
v3 = v2.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.CharSequence[] nameValuePairs>;
v4 = lengthof v3;
if v1 == v4 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
public java.util.Map$Entry next()
{
java.lang.CharSequence[] v4, v9;
int v10, v11, v14, v15, v5;
io.netty.handler.codec.http.ReadOnlyHttpHeaders v3, v8;
java.lang.String v13, v7;
java.util.NoSuchElementException v2;
boolean v1;
java.lang.CharSequence v12, v6;
io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator v0;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator;
v1 = virtualinvoke v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator: boolean hasNext()>();
if v1 != 0 goto label1;
v2 = new java.util.NoSuchElementException;
specialinvoke v2.<java.util.NoSuchElementException: void <init>()>();
throw v2;
label1:
v3 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator: io.netty.handler.codec.http.ReadOnlyHttpHeaders this$0>;
v4 = v3.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.CharSequence[] nameValuePairs>;
v5 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator: int nextNameIndex>;
v6 = v4[v5];
v7 = virtualinvoke v6.<java.lang.Object: java.lang.String toString()>();
v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator: java.lang.String key> = v7;
v8 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator: io.netty.handler.codec.http.ReadOnlyHttpHeaders this$0>;
v9 = v8.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.CharSequence[] nameValuePairs>;
v10 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator: int nextNameIndex>;
v11 = v10 + 1;
v12 = v9[v11];
v13 = virtualinvoke v12.<java.lang.Object: java.lang.String toString()>();
v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator: java.lang.String value> = v13;
v14 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator: int nextNameIndex>;
v15 = v14 + 2;
v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator: int nextNameIndex> = v15;
return v0;
}
public void remove()
{
java.lang.UnsupportedOperationException v1;
io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator v0;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v1;
}
public java.lang.String getKey()
{
java.lang.String v1;
io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator v0;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator;
v1 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator: java.lang.String key>;
return v1;
}
public java.lang.String getValue()
{
java.lang.String v1;
io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator v0;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator;
v1 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator: java.lang.String value>;
return v1;
}
public java.lang.String setValue(java.lang.String)
{
java.lang.UnsupportedOperationException v2;
java.lang.String v1;
io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator v0;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator;
v1 := @parameter0: java.lang.String;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v2;
}
public java.lang.String toString()
{
java.lang.String v1, v2, v3;
io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator v0;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator;
v1 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator: java.lang.String key>;
v2 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator: java.lang.String value>;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v1, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001=\u0001");
return v3;
}
}