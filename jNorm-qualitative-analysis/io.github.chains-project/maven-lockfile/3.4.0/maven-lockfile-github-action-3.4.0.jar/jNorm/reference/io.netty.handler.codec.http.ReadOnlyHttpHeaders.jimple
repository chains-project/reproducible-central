public final class io.netty.handler.codec.http.ReadOnlyHttpHeaders extends io.netty.handler.codec.http.HttpHeaders
{
private final java.lang.CharSequence[] nameValuePairs;
public transient void <init>(boolean, java.lang.CharSequence[])
{
java.lang.CharSequence[] v2;
int v3, v4;
io.netty.handler.codec.http.ReadOnlyHttpHeaders v0;
java.lang.IllegalArgumentException v5;
boolean v1;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders;
v1 := @parameter0: boolean;
v2 := @parameter1: java.lang.CharSequence[];
specialinvoke v0.<io.netty.handler.codec.http.HttpHeaders: void <init>()>();
v3 = lengthof v2;
v4 = v3 & 1;
if v4 == 0 goto label1;
v5 = staticinvoke <io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.IllegalArgumentException newInvalidArraySizeException()>();
throw v5;
label1:
if v1 == 0 goto label2;
staticinvoke <io.netty.handler.codec.http.ReadOnlyHttpHeaders: void validateHeaders(java.lang.CharSequence[])>(v2);
label2:
v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.CharSequence[] nameValuePairs> = v2;
return;
}
private static java.lang.IllegalArgumentException newInvalidArraySizeException()
{
java.lang.IllegalArgumentException v0;
v0 = new java.lang.IllegalArgumentException;
specialinvoke v0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("nameValuePairs must be arrays of [name, value] pairs");
return v0;
}
private static transient void validateHeaders(java.lang.CharSequence[])
{
java.lang.CharSequence[] v0;
java.lang.CharSequence v4;
int v1, v2;
io.netty.handler.codec.DefaultHeaders$NameValidator v3;
v0 := @parameter0: java.lang.CharSequence[];
v1 = 0;
label1:
v2 = lengthof v0;
if v1 >= v2 goto label2;
v3 = <io.netty.handler.codec.http.DefaultHttpHeaders: io.netty.handler.codec.DefaultHeaders$NameValidator HttpNameValidator>;
v4 = v0[v1];
interfaceinvoke v3.<io.netty.handler.codec.DefaultHeaders$NameValidator: void validateName(java.lang.Object)>(v4);
v1 = v1 + 2;
goto label1;
label2:
return;
}
private java.lang.CharSequence get0(java.lang.CharSequence)
{
java.lang.CharSequence v1, v12, v7;
java.lang.CharSequence[] v10, v4, v6;
int v11, v2, v3, v5, v8;
io.netty.handler.codec.http.ReadOnlyHttpHeaders v0;
boolean v9;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders;
v1 := @parameter0: java.lang.CharSequence;
v2 = staticinvoke <io.netty.util.AsciiString: int hashCode(java.lang.CharSequence)>(v1);
v3 = 0;
label1:
v4 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.CharSequence[] nameValuePairs>;
v5 = lengthof v4;
if v3 >= v5 goto label3;
v6 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.CharSequence[] nameValuePairs>;
v7 = v6[v3];
v8 = staticinvoke <io.netty.util.AsciiString: int hashCode(java.lang.CharSequence)>(v7);
if v8 != v2 goto label2;
v9 = staticinvoke <io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(v7, v1);
if v9 == 0 goto label2;
v10 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.CharSequence[] nameValuePairs>;
v11 = v3 + 1;
v12 = v10[v11];
return v12;
label2:
v3 = v3 + 2;
goto label1;
label3:
return null;
}
public java.lang.String get(java.lang.String)
{
java.lang.CharSequence v2;
io.netty.handler.codec.http.ReadOnlyHttpHeaders v0;
java.lang.String v1, v3;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.CharSequence get0(java.lang.CharSequence)>(v1);
if v2 != null goto label1;
v3 = null;
goto label2;
label1:
v3 = virtualinvoke v2.<java.lang.Object: java.lang.String toString()>();
label2:
return v3;
}
public java.lang.Integer getInt(java.lang.CharSequence)
{
java.lang.CharSequence v1, v2;
int v5;
io.netty.handler.codec.http.ReadOnlyHttpHeaders v0;
io.netty.handler.codec.CharSequenceValueConverter v4;
java.lang.Integer v3;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders;
v1 := @parameter0: java.lang.CharSequence;
v2 = specialinvoke v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.CharSequence get0(java.lang.CharSequence)>(v1);
if v2 != null goto label1;
v3 = null;
goto label2;
label1:
v4 = <io.netty.handler.codec.CharSequenceValueConverter: io.netty.handler.codec.CharSequenceValueConverter INSTANCE>;
v5 = virtualinvoke v4.<io.netty.handler.codec.CharSequenceValueConverter: int convertToInt(java.lang.CharSequence)>(v2);
v3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v5);
label2:
return v3;
}
public int getInt(java.lang.CharSequence, int)
{
java.lang.CharSequence v1, v3;
int v2, v4;
io.netty.handler.codec.http.ReadOnlyHttpHeaders v0;
io.netty.handler.codec.CharSequenceValueConverter v5;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 = specialinvoke v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.CharSequence get0(java.lang.CharSequence)>(v1);
if v3 != null goto label1;
v4 = v2;
goto label2;
label1:
v5 = <io.netty.handler.codec.CharSequenceValueConverter: io.netty.handler.codec.CharSequenceValueConverter INSTANCE>;
v4 = virtualinvoke v5.<io.netty.handler.codec.CharSequenceValueConverter: int convertToInt(java.lang.CharSequence)>(v3);
label2:
return v4;
}
public java.lang.Short getShort(java.lang.CharSequence)
{
short v5;
java.lang.CharSequence v1, v2;
java.lang.Short v3;
io.netty.handler.codec.http.ReadOnlyHttpHeaders v0;
io.netty.handler.codec.CharSequenceValueConverter v4;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders;
v1 := @parameter0: java.lang.CharSequence;
v2 = specialinvoke v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.CharSequence get0(java.lang.CharSequence)>(v1);
if v2 != null goto label1;
v3 = null;
goto label2;
label1:
v4 = <io.netty.handler.codec.CharSequenceValueConverter: io.netty.handler.codec.CharSequenceValueConverter INSTANCE>;
v5 = virtualinvoke v4.<io.netty.handler.codec.CharSequenceValueConverter: short convertToShort(java.lang.CharSequence)>(v2);
v3 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(v5);
label2:
return v3;
}
public short getShort(java.lang.CharSequence, short)
{
short v2, v4;
java.lang.CharSequence v1, v3;
io.netty.handler.codec.http.ReadOnlyHttpHeaders v0;
io.netty.handler.codec.CharSequenceValueConverter v5;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: short;
v3 = specialinvoke v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.CharSequence get0(java.lang.CharSequence)>(v1);
if v3 != null goto label1;
v4 = v2;
goto label2;
label1:
v5 = <io.netty.handler.codec.CharSequenceValueConverter: io.netty.handler.codec.CharSequenceValueConverter INSTANCE>;
v4 = virtualinvoke v5.<io.netty.handler.codec.CharSequenceValueConverter: short convertToShort(java.lang.CharSequence)>(v3);
label2:
return v4;
}
public java.lang.Long getTimeMillis(java.lang.CharSequence)
{
java.lang.CharSequence v1, v2;
java.lang.Long v3;
io.netty.handler.codec.http.ReadOnlyHttpHeaders v0;
long v5;
io.netty.handler.codec.CharSequenceValueConverter v4;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders;
v1 := @parameter0: java.lang.CharSequence;
v2 = specialinvoke v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.CharSequence get0(java.lang.CharSequence)>(v1);
if v2 != null goto label1;
v3 = null;
goto label2;
label1:
v4 = <io.netty.handler.codec.CharSequenceValueConverter: io.netty.handler.codec.CharSequenceValueConverter INSTANCE>;
v5 = virtualinvoke v4.<io.netty.handler.codec.CharSequenceValueConverter: long convertToTimeMillis(java.lang.CharSequence)>(v2);
v3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v5);
label2:
return v3;
}
public long getTimeMillis(java.lang.CharSequence, long)
{
java.lang.CharSequence v1, v3;
io.netty.handler.codec.http.ReadOnlyHttpHeaders v0;
long v2, v4;
io.netty.handler.codec.CharSequenceValueConverter v5;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: long;
v3 = specialinvoke v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.CharSequence get0(java.lang.CharSequence)>(v1);
if v3 != null goto label1;
v4 = v2;
goto label2;
label1:
v5 = <io.netty.handler.codec.CharSequenceValueConverter: io.netty.handler.codec.CharSequenceValueConverter INSTANCE>;
v4 = virtualinvoke v5.<io.netty.handler.codec.CharSequenceValueConverter: long convertToTimeMillis(java.lang.CharSequence)>(v3);
label2:
return v4;
}
public java.util.List getAll(java.lang.String)
{
java.util.ArrayList v5;
java.lang.CharSequence[] v13, v7, v9;
int v11, v14, v4, v6, v8;
io.netty.handler.codec.http.ReadOnlyHttpHeaders v0;
java.lang.String v1, v16;
boolean v12, v2;
java.lang.CharSequence v10, v15;
java.util.List v3;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: boolean isEmpty()>();
if v2 == 0 goto label1;
v3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v3;
label1:
v4 = staticinvoke <io.netty.util.AsciiString: int hashCode(java.lang.CharSequence)>(v1);
v5 = new java.util.ArrayList;
specialinvoke v5.<java.util.ArrayList: void <init>(int)>(4);
v6 = 0;
label2:
v7 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.CharSequence[] nameValuePairs>;
v8 = lengthof v7;
if v6 >= v8 goto label4;
v9 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.CharSequence[] nameValuePairs>;
v10 = v9[v6];
v11 = staticinvoke <io.netty.util.AsciiString: int hashCode(java.lang.CharSequence)>(v10);
if v11 != v4 goto label3;
v12 = staticinvoke <io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(v10, v1);
if v12 == 0 goto label3;
v13 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.CharSequence[] nameValuePairs>;
v14 = v6 + 1;
v15 = v13[v14];
v16 = virtualinvoke v15.<java.lang.Object: java.lang.String toString()>();
interfaceinvoke v5.<java.util.List: boolean add(java.lang.Object)>(v16);
label3:
v6 = v6 + 2;
goto label2;
label4:
return v5;
}
public java.util.List entries()
{
java.util.ArrayList v3;
java.lang.CharSequence[] v12, v6, v9;
int v13, v4, v5, v7;
io.netty.handler.codec.http.ReadOnlyHttpHeaders v0;
java.lang.String v11, v15;
boolean v1;
java.lang.CharSequence v10, v14;
java.util.AbstractMap$SimpleImmutableEntry v8;
java.util.List v2;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders;
v1 = virtualinvoke v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: boolean isEmpty()>();
if v1 == 0 goto label1;
v2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v2;
label1:
v3 = new java.util.ArrayList;
v4 = virtualinvoke v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: int size()>();
specialinvoke v3.<java.util.ArrayList: void <init>(int)>(v4);
v5 = 0;
label2:
v6 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.CharSequence[] nameValuePairs>;
v7 = lengthof v6;
if v5 >= v7 goto label3;
v8 = new java.util.AbstractMap$SimpleImmutableEntry;
v9 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.CharSequence[] nameValuePairs>;
v10 = v9[v5];
v11 = virtualinvoke v10.<java.lang.Object: java.lang.String toString()>();
v12 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.CharSequence[] nameValuePairs>;
v13 = v5 + 1;
v14 = v12[v13];
v15 = virtualinvoke v14.<java.lang.Object: java.lang.String toString()>();
specialinvoke v8.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>(v11, v15);
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v8);
v5 = v5 + 2;
goto label2;
label3:
return v3;
}
public boolean contains(java.lang.String)
{
java.lang.CharSequence v2;
io.netty.handler.codec.http.ReadOnlyHttpHeaders v0;
java.lang.String v1;
boolean v3;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.CharSequence get0(java.lang.CharSequence)>(v1);
if v2 == null goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean contains(java.lang.String, java.lang.String, boolean)
{
io.netty.handler.codec.http.ReadOnlyHttpHeaders v0;
java.lang.String v1, v2;
boolean v3, v4;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: boolean;
v4 = virtualinvoke v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: boolean containsValue(java.lang.CharSequence,java.lang.CharSequence,boolean)>(v1, v2, v3);
return v4;
}
public boolean containsValue(java.lang.CharSequence, java.lang.CharSequence, boolean)
{
java.lang.CharSequence[] v10, v15, v17, v20, v5, v7;
int v11, v14, v16, v21, v4, v6;
io.netty.handler.codec.http.ReadOnlyHttpHeaders v0;
boolean v13, v19, v23, v3, v9;
java.lang.CharSequence v1, v12, v18, v2, v22, v8;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence;
v3 := @parameter2: boolean;
if v3 == 0 goto label3;
v4 = 0;
label1:
v5 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.CharSequence[] nameValuePairs>;
v6 = lengthof v5;
if v4 >= v6 goto label6;
v7 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.CharSequence[] nameValuePairs>;
v8 = v7[v4];
v9 = staticinvoke <io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(v8, v1);
if v9 == 0 goto label2;
v10 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.CharSequence[] nameValuePairs>;
v11 = v4 + 1;
v12 = v10[v11];
v13 = staticinvoke <io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(v12, v2);
if v13 == 0 goto label2;
return 1;
label2:
v4 = v4 + 2;
goto label1;
label3:
v14 = 0;
label4:
v15 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.CharSequence[] nameValuePairs>;
v16 = lengthof v15;
if v14 >= v16 goto label6;
v17 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.CharSequence[] nameValuePairs>;
v18 = v17[v14];
v19 = staticinvoke <io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(v18, v1);
if v19 == 0 goto label5;
v20 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.CharSequence[] nameValuePairs>;
v21 = v14 + 1;
v22 = v20[v21];
v23 = staticinvoke <io.netty.util.AsciiString: boolean contentEquals(java.lang.CharSequence,java.lang.CharSequence)>(v22, v2);
if v23 == 0 goto label5;
return 1;
label5:
v14 = v14 + 2;
goto label4;
label6:
return 0;
}
public java.util.Iterator valueStringIterator(java.lang.CharSequence)
{
io.netty.handler.codec.http.ReadOnlyHttpHeaders v0;
java.lang.CharSequence v1;
io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringValueIterator v2;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders;
v1 := @parameter0: java.lang.CharSequence;
v2 = new io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringValueIterator;
specialinvoke v2.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringValueIterator: void <init>(io.netty.handler.codec.http.ReadOnlyHttpHeaders,java.lang.CharSequence)>(v0, v1);
return v2;
}
public java.util.Iterator valueCharSequenceIterator(java.lang.CharSequence)
{
io.netty.handler.codec.http.ReadOnlyHttpHeaders v0;
io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyValueIterator v2;
java.lang.CharSequence v1;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders;
v1 := @parameter0: java.lang.CharSequence;
v2 = new io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyValueIterator;
specialinvoke v2.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyValueIterator: void <init>(io.netty.handler.codec.http.ReadOnlyHttpHeaders,java.lang.CharSequence)>(v0, v1);
return v2;
}
public java.util.Iterator iterator()
{
io.netty.handler.codec.http.ReadOnlyHttpHeaders v0;
io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator v1;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders;
v1 = new io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator;
specialinvoke v1.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyStringIterator: void <init>(io.netty.handler.codec.http.ReadOnlyHttpHeaders)>(v0);
return v1;
}
public java.util.Iterator iteratorCharSequence()
{
io.netty.handler.codec.http.ReadOnlyHttpHeaders v0;
io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator v1;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders;
v1 = new io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator;
specialinvoke v1.<io.netty.handler.codec.http.ReadOnlyHttpHeaders$ReadOnlyIterator: void <init>(io.netty.handler.codec.http.ReadOnlyHttpHeaders)>(v0);
return v1;
}
public boolean isEmpty()
{
java.lang.CharSequence[] v1;
int v2;
io.netty.handler.codec.http.ReadOnlyHttpHeaders v0;
boolean v3;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders;
v1 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.CharSequence[] nameValuePairs>;
v2 = lengthof v1;
if v2 != 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public int size()
{
java.lang.CharSequence[] v1;
int v2, v3;
io.netty.handler.codec.http.ReadOnlyHttpHeaders v0;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders;
v1 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.CharSequence[] nameValuePairs>;
v2 = lengthof v1;
v3 = v2 >>> 1;
return v3;
}
public java.util.Set names()
{
java.lang.CharSequence v9;
java.util.Set v2;
java.lang.CharSequence[] v6, v8;
int v4, v5, v7;
io.netty.handler.codec.http.ReadOnlyHttpHeaders v0;
java.lang.String v10;
java.util.LinkedHashSet v3;
boolean v1;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders;
v1 = virtualinvoke v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: boolean isEmpty()>();
if v1 == 0 goto label1;
v2 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
return v2;
label1:
v3 = new java.util.LinkedHashSet;
v4 = virtualinvoke v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: int size()>();
specialinvoke v3.<java.util.LinkedHashSet: void <init>(int)>(v4);
v5 = 0;
label2:
v6 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.CharSequence[] nameValuePairs>;
v7 = lengthof v6;
if v5 >= v7 goto label3;
v8 = v0.<io.netty.handler.codec.http.ReadOnlyHttpHeaders: java.lang.CharSequence[] nameValuePairs>;
v9 = v8[v5];
v10 = virtualinvoke v9.<java.lang.Object: java.lang.String toString()>();
interfaceinvoke v3.<java.util.Set: boolean add(java.lang.Object)>(v10);
v5 = v5 + 2;
goto label2;
label3:
return v3;
}
public io.netty.handler.codec.http.HttpHeaders add(java.lang.String, java.lang.Object)
{
java.lang.UnsupportedOperationException v3;
io.netty.handler.codec.http.ReadOnlyHttpHeaders v0;
java.lang.Object v2;
java.lang.String v1;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http.HttpHeaders add(java.lang.String, java.lang.Iterable)
{
java.lang.UnsupportedOperationException v3;
io.netty.handler.codec.http.ReadOnlyHttpHeaders v0;
java.lang.String v1;
java.lang.Iterable v2;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Iterable;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http.HttpHeaders addInt(java.lang.CharSequence, int)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
int v2;
io.netty.handler.codec.http.ReadOnlyHttpHeaders v0;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http.HttpHeaders addShort(java.lang.CharSequence, short)
{
java.lang.UnsupportedOperationException v3;
short v2;
java.lang.CharSequence v1;
io.netty.handler.codec.http.ReadOnlyHttpHeaders v0;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: short;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http.HttpHeaders set(java.lang.String, java.lang.Object)
{
java.lang.UnsupportedOperationException v3;
io.netty.handler.codec.http.ReadOnlyHttpHeaders v0;
java.lang.Object v2;
java.lang.String v1;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http.HttpHeaders set(java.lang.String, java.lang.Iterable)
{
java.lang.UnsupportedOperationException v3;
io.netty.handler.codec.http.ReadOnlyHttpHeaders v0;
java.lang.String v1;
java.lang.Iterable v2;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Iterable;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http.HttpHeaders setInt(java.lang.CharSequence, int)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
int v2;
io.netty.handler.codec.http.ReadOnlyHttpHeaders v0;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http.HttpHeaders setShort(java.lang.CharSequence, short)
{
java.lang.UnsupportedOperationException v3;
short v2;
java.lang.CharSequence v1;
io.netty.handler.codec.http.ReadOnlyHttpHeaders v0;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: short;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http.HttpHeaders remove(java.lang.String)
{
io.netty.handler.codec.http.ReadOnlyHttpHeaders v0;
java.lang.UnsupportedOperationException v2;
java.lang.String v1;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders;
v1 := @parameter0: java.lang.String;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v2;
}
public io.netty.handler.codec.http.HttpHeaders clear()
{
io.netty.handler.codec.http.ReadOnlyHttpHeaders v0;
java.lang.UnsupportedOperationException v1;
v0 := @this: io.netty.handler.codec.http.ReadOnlyHttpHeaders;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v1;
}
}