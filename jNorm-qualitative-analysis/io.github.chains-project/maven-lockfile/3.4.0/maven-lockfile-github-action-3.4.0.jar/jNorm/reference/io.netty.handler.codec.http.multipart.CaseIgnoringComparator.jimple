final class io.netty.handler.codec.http.multipart.CaseIgnoringComparator extends java.lang.Object implements java.util.Comparator, java.io.Serializable
{
private static final long serialVersionUID;
static final io.netty.handler.codec.http.multipart.CaseIgnoringComparator INSTANCE;
private void <init>()
{
io.netty.handler.codec.http.multipart.CaseIgnoringComparator v0;
v0 := @this: io.netty.handler.codec.http.multipart.CaseIgnoringComparator;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public int compare(java.lang.CharSequence, java.lang.CharSequence)
{
io.netty.handler.codec.http.multipart.CaseIgnoringComparator v0;
java.lang.CharSequence v1, v2;
char v10, v11, v12, v7, v8, v9;
int v13, v14, v3, v4, v5, v6;
v0 := @this: io.netty.handler.codec.http.multipart.CaseIgnoringComparator;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence;
v3 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
v4 = interfaceinvoke v2.<java.lang.CharSequence: int length()>();
v5 = staticinvoke <java.lang.Math: int min(int,int)>(v3, v4);
v6 = 0;
label1:
if v6 >= v5 goto label3;
v7 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v6);
v8 = interfaceinvoke v2.<java.lang.CharSequence: char charAt(int)>(v6);
if v7 == v8 goto label2;
v9 = staticinvoke <java.lang.Character: char toUpperCase(char)>(v7);
v10 = staticinvoke <java.lang.Character: char toUpperCase(char)>(v8);
if v9 == v10 goto label2;
v11 = staticinvoke <java.lang.Character: char toLowerCase(char)>(v9);
v12 = staticinvoke <java.lang.Character: char toLowerCase(char)>(v10);
if v11 == v12 goto label2;
v13 = v11 - v12;
return v13;
label2:
v6 = v6 + 1;
goto label1;
label3:
v14 = v3 - v4;
return v14;
}
private java.lang.Object readResolve()
{
io.netty.handler.codec.http.multipart.CaseIgnoringComparator v0, v1;
v0 := @this: io.netty.handler.codec.http.multipart.CaseIgnoringComparator;
v1 = <io.netty.handler.codec.http.multipart.CaseIgnoringComparator: io.netty.handler.codec.http.multipart.CaseIgnoringComparator INSTANCE>;
return v1;
}
static void <clinit>()
{
io.netty.handler.codec.http.multipart.CaseIgnoringComparator v0;
v0 = new io.netty.handler.codec.http.multipart.CaseIgnoringComparator;
specialinvoke v0.<io.netty.handler.codec.http.multipart.CaseIgnoringComparator: void <init>()>();
<io.netty.handler.codec.http.multipart.CaseIgnoringComparator: io.netty.handler.codec.http.multipart.CaseIgnoringComparator INSTANCE> = v0;
return;
}
}