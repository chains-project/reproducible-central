class io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler extends io.netty.channel.ChannelInboundHandlerAdapter
{
private static final long DEFAULT_HANDSHAKE_TIMEOUT_MS;
private final io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker handshaker;
private final long handshakeTimeoutMillis;
private io.netty.channel.ChannelHandlerContext ctx;
private io.netty.channel.ChannelPromise handshakePromise;
void <init>(io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker)
{
io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler v0;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker v1;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler;
v1 := @parameter0: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;
specialinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler: void <init>(io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker,long)>(v1, 10000L);
return;
}
void <init>(io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker, long)
{
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker v1;
long v2, v3;
io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler v0;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler;
v1 := @parameter0: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;
v2 := @parameter1: long;
specialinvoke v0.<io.netty.channel.ChannelInboundHandlerAdapter: void <init>()>();
v0.<io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker handshaker> = v1;
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: long checkPositive(long,java.lang.String)>(v2, "handshakeTimeoutMillis");
v0.<io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler: long handshakeTimeoutMillis> = v3;
return;
}
public void handlerAdded(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelPromise v2;
io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler v0;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v0.<io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler: io.netty.channel.ChannelHandlerContext ctx> = v1;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPromise newPromise()>();
v0.<io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler: io.netty.channel.ChannelPromise handshakePromise> = v2;
return;
}
public void channelActive(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.Channel v3;
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler$1 v5;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker v2;
io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler v0;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
specialinvoke v0.<io.netty.channel.ChannelInboundHandlerAdapter: void channelActive(io.netty.channel.ChannelHandlerContext)>(v1);
v2 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker handshaker>;
v3 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v4 = virtualinvoke v2.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel)>(v3);
v5 = new io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler$1;
specialinvoke v5.<io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler$1: void <init>(io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler,io.netty.channel.ChannelHandlerContext)>(v0, v1);
interfaceinvoke v4.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v5);
specialinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler: void applyHandshakeTimeout()>();
return;
}
public void channelInactive(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelPromise v2, v4;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshakeException v5;
io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler v0;
boolean v3;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler: io.netty.channel.ChannelPromise handshakePromise>;
v3 = interfaceinvoke v2.<io.netty.channel.ChannelPromise: boolean isDone()>();
if v3 != 0 goto label1;
v4 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler: io.netty.channel.ChannelPromise handshakePromise>;
v5 = new io.netty.handler.codec.http.websocketx.WebSocketClientHandshakeException;
specialinvoke v5.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshakeException: void <init>(java.lang.String)>("channel closed with handshake in progress");
interfaceinvoke v4.<io.netty.channel.ChannelPromise: boolean tryFailure(java.lang.Throwable)>(v5);
label1:
specialinvoke v0.<io.netty.channel.ChannelInboundHandlerAdapter: void channelInactive(io.netty.channel.ChannelHandlerContext)>(v1);
return;
}
public void channelRead(io.netty.channel.ChannelHandlerContext, java.lang.Object) throws java.lang.Exception
{
java.lang.Throwable v12;
java.lang.IllegalStateException v11;
io.netty.channel.ChannelPipeline v10;
io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler v0;
io.netty.channel.Channel v7;
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelPromise v8;
io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker v4, v6;
io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandler$ClientHandshakeStateEvent v9;
java.lang.Object v2;
boolean v3, v5;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 = v2 instanceof io.netty.handler.codec.http.FullHttpResponse;
if v3 != 0 goto label1;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)>(v2);
return;
label1:
v4 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker handshaker>;
v5 = virtualinvoke v4.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: boolean isHandshakeComplete()>();
if v5 != 0 goto label3;
v6 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler: io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker handshaker>;
v7 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
virtualinvoke v6.<io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker: void finishHandshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpResponse)>(v7, v2);
v8 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler: io.netty.channel.ChannelPromise handshakePromise>;
interfaceinvoke v8.<io.netty.channel.ChannelPromise: boolean trySuccess()>();
v9 = <io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandler$ClientHandshakeStateEvent: io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandler$ClientHandshakeStateEvent HANDSHAKE_COMPLETE>;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireUserEventTriggered(java.lang.Object)>(v9);
v10 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPipeline pipeline()>();
interfaceinvoke v10.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline remove(io.netty.channel.ChannelHandler)>(v0);
label2:
interfaceinvoke v2.<io.netty.handler.codec.http.FullHttpResponse: boolean release()>();
return;
label3:
v11 = new java.lang.IllegalStateException;
specialinvoke v11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("WebSocketClientHandshaker should have been non finished yet");
throw v11;
label4:
v12 := @caughtexception;
interfaceinvoke v2.<io.netty.handler.codec.http.FullHttpResponse: boolean release()>();
throw v12;
catch java.lang.Throwable from label1 to label2 with label4;
}
private void applyHandshakeTimeout()
{
io.netty.util.concurrent.EventExecutor v6;
io.netty.util.concurrent.ScheduledFuture v10;
long v2, v8;
io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler v0;
java.util.concurrent.TimeUnit v9;
io.netty.channel.ChannelHandlerContext v5;
io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler$3 v11;
io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler$2 v7;
byte v3;
io.netty.channel.ChannelPromise v1;
boolean v4;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler;
v1 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler: io.netty.channel.ChannelPromise handshakePromise>;
v2 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler: long handshakeTimeoutMillis>;
v3 = v2 cmp 0L;
if v3 <= 0 goto label1;
v4 = interfaceinvoke v1.<io.netty.channel.ChannelPromise: boolean isDone()>();
if v4 == 0 goto label2;
label1:
return;
label2:
v5 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler: io.netty.channel.ChannelHandlerContext ctx>;
v6 = interfaceinvoke v5.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v7 = new io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler$2;
specialinvoke v7.<io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler$2: void <init>(io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler,io.netty.channel.ChannelPromise)>(v0, v1);
v8 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler: long handshakeTimeoutMillis>;
v9 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
v10 = interfaceinvoke v6.<io.netty.util.concurrent.EventExecutor: io.netty.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(v7, v8, v9);
v11 = new io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler$3;
specialinvoke v11.<io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler$3: void <init>(io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler,io.netty.util.concurrent.Future)>(v0, v10);
interfaceinvoke v1.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise addListener(io.netty.util.concurrent.GenericFutureListener)>(v11);
return;
}
io.netty.channel.ChannelFuture getHandshakeFuture()
{
io.netty.channel.ChannelPromise v1;
io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler v0;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler;
v1 = v0.<io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandshakeHandler: io.netty.channel.ChannelPromise handshakePromise>;
return v1;
}
}