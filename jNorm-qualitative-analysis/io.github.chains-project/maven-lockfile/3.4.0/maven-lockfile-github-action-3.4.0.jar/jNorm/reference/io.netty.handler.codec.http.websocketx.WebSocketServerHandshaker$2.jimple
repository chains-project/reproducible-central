class io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2 extends io.netty.channel.ChannelInboundHandlerAdapter
{
private io.netty.handler.codec.http.FullHttpRequest fullHttpRequest;
static final boolean $assertionsDisabled;
final io.netty.channel.ChannelPromise val$promise;
final io.netty.channel.Channel val$channel;
final io.netty.handler.codec.http.HttpHeaders val$responseHeaders;
final io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker this$0;
void <init>(io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker, io.netty.channel.ChannelPromise, io.netty.channel.Channel, io.netty.handler.codec.http.HttpHeaders)
{
io.netty.channel.Channel v3;
io.netty.handler.codec.http.HttpHeaders v4;
io.netty.channel.ChannelPromise v2;
io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker v1;
io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2 v0;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2;
v1 := @parameter0: io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 := @parameter2: io.netty.channel.Channel;
v4 := @parameter3: io.netty.handler.codec.http.HttpHeaders;
v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2: io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker this$0> = v1;
v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2: io.netty.channel.ChannelPromise val$promise> = v2;
v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2: io.netty.channel.Channel val$channel> = v3;
v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2: io.netty.handler.codec.http.HttpHeaders val$responseHeaders> = v4;
specialinvoke v0.<io.netty.channel.ChannelInboundHandlerAdapter: void <init>()>();
return;
}
public void channelRead(io.netty.channel.ChannelHandlerContext, java.lang.Object) throws java.lang.Exception
{
java.lang.Throwable v4;
io.netty.channel.ChannelHandlerContext v1;
java.lang.Object v2;
io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2 v0;
boolean v3;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 = v2 instanceof io.netty.handler.codec.http.HttpObject;
if v3 == 0 goto label4;
label1:
specialinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2: void handleHandshakeRequest(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpObject)>(v1, v2);
label2:
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v2);
goto label5;
label3:
v4 := @caughtexception;
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v2);
throw v4;
label4:
specialinvoke v0.<io.netty.channel.ChannelInboundHandlerAdapter: void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)>(v1, v2);
label5:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void exceptionCaught(io.netty.channel.ChannelHandlerContext, java.lang.Throwable) throws java.lang.Exception
{
java.lang.Throwable v2;
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelPromise v4;
io.netty.channel.ChannelPipeline v3;
io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2 v0;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Throwable;
v3 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPipeline pipeline()>();
interfaceinvoke v3.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline remove(io.netty.channel.ChannelHandler)>(v0);
v4 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2: io.netty.channel.ChannelPromise val$promise>;
interfaceinvoke v4.<io.netty.channel.ChannelPromise: boolean tryFailure(java.lang.Throwable)>(v2);
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireExceptionCaught(java.lang.Throwable)>(v2);
return;
}
public void channelInactive(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
java.lang.Throwable v6;
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelPromise v2, v4;
java.nio.channels.ClosedChannelException v5;
io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2 v0;
boolean v3;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
label1:
v2 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2: io.netty.channel.ChannelPromise val$promise>;
v3 = interfaceinvoke v2.<io.netty.channel.ChannelPromise: boolean isDone()>();
if v3 != 0 goto label2;
v4 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2: io.netty.channel.ChannelPromise val$promise>;
v5 = new java.nio.channels.ClosedChannelException;
specialinvoke v5.<java.nio.channels.ClosedChannelException: void <init>()>();
interfaceinvoke v4.<io.netty.channel.ChannelPromise: boolean tryFailure(java.lang.Throwable)>(v5);
label2:
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelInactive()>();
label3:
specialinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2: void releaseFullHttpRequest()>();
goto label5;
label4:
v6 := @caughtexception;
specialinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2: void releaseFullHttpRequest()>();
throw v6;
label5:
return;
catch java.lang.Throwable from label1 to label3 with label4;
}
public void handlerRemoved(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2 v0;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
specialinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2: void releaseFullHttpRequest()>();
return;
}
private void handleHandshakeRequest(io.netty.channel.ChannelHandlerContext, io.netty.handler.codec.http.HttpObject)
{
io.netty.handler.codec.http.HttpHeaders v17, v26, v7;
io.netty.handler.codec.http.DefaultFullHttpRequest v21;
io.netty.handler.codec.http.HttpObject v2;
io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2 v0;
io.netty.channel.ChannelPromise v18, v8;
boolean v10, v20, v29, v3, v9;
io.netty.channel.ChannelPipeline v14, v4;
io.netty.handler.codec.http.FullHttpRequest v11, v13, v30;
io.netty.handler.codec.http.EmptyHttpHeaders v27;
io.netty.handler.codec.DecoderResult v28, v31;
java.lang.Throwable v19;
io.netty.handler.codec.http.HttpVersion v22;
java.lang.AssertionError v12;
io.netty.channel.ChannelHandlerContext v1;
io.netty.buffer.ByteBuf v25;
java.lang.String v24;
io.netty.handler.codec.http.HttpMethod v23;
io.netty.channel.Channel v16, v6;
io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker v15, v5;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.handler.codec.http.HttpObject;
v3 = v2 instanceof io.netty.handler.codec.http.FullHttpRequest;
if v3 == 0 goto label1;
v4 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPipeline pipeline()>();
interfaceinvoke v4.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline remove(io.netty.channel.ChannelHandler)>(v0);
v5 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2: io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker this$0>;
v6 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2: io.netty.channel.Channel val$channel>;
v7 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2: io.netty.handler.codec.http.HttpHeaders val$responseHeaders>;
v8 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2: io.netty.channel.ChannelPromise val$promise>;
virtualinvoke v5.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)>(v6, v2, v7, v8);
return;
label1:
v9 = v2 instanceof io.netty.handler.codec.http.LastHttpContent;
if v9 == 0 goto label7;
v10 = <io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2: boolean $assertionsDisabled>;
if v10 != 0 goto label2;
v11 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2: io.netty.handler.codec.http.FullHttpRequest fullHttpRequest>;
if v11 != null goto label2;
v12 = new java.lang.AssertionError;
specialinvoke v12.<java.lang.AssertionError: void <init>()>();
throw v12;
label2:
v13 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2: io.netty.handler.codec.http.FullHttpRequest fullHttpRequest>;
v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2: io.netty.handler.codec.http.FullHttpRequest fullHttpRequest> = null;
label3:
v14 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPipeline pipeline()>();
interfaceinvoke v14.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline remove(io.netty.channel.ChannelHandler)>(v0);
v15 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2: io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker this$0>;
v16 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2: io.netty.channel.Channel val$channel>;
v17 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2: io.netty.handler.codec.http.HttpHeaders val$responseHeaders>;
v18 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2: io.netty.channel.ChannelPromise val$promise>;
virtualinvoke v15.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.FullHttpRequest,io.netty.handler.codec.http.HttpHeaders,io.netty.channel.ChannelPromise)>(v16, v13, v17, v18);
label4:
interfaceinvoke v13.<io.netty.handler.codec.http.FullHttpRequest: boolean release()>();
goto label6;
label5:
v19 := @caughtexception;
interfaceinvoke v13.<io.netty.handler.codec.http.FullHttpRequest: boolean release()>();
throw v19;
label6:
return;
label7:
v20 = v2 instanceof io.netty.handler.codec.http.HttpRequest;
if v20 == 0 goto label8;
v21 = new io.netty.handler.codec.http.DefaultFullHttpRequest;
v22 = interfaceinvoke v2.<io.netty.handler.codec.http.HttpRequest: io.netty.handler.codec.http.HttpVersion protocolVersion()>();
v23 = interfaceinvoke v2.<io.netty.handler.codec.http.HttpRequest: io.netty.handler.codec.http.HttpMethod method()>();
v24 = interfaceinvoke v2.<io.netty.handler.codec.http.HttpRequest: java.lang.String uri()>();
v25 = <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf EMPTY_BUFFER>;
v26 = interfaceinvoke v2.<io.netty.handler.codec.http.HttpRequest: io.netty.handler.codec.http.HttpHeaders headers()>();
v27 = <io.netty.handler.codec.http.EmptyHttpHeaders: io.netty.handler.codec.http.EmptyHttpHeaders INSTANCE>;
specialinvoke v21.<io.netty.handler.codec.http.DefaultFullHttpRequest: void <init>(io.netty.handler.codec.http.HttpVersion,io.netty.handler.codec.http.HttpMethod,java.lang.String,io.netty.buffer.ByteBuf,io.netty.handler.codec.http.HttpHeaders,io.netty.handler.codec.http.HttpHeaders)>(v22, v23, v24, v25, v26, v27);
v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2: io.netty.handler.codec.http.FullHttpRequest fullHttpRequest> = v21;
v28 = interfaceinvoke v2.<io.netty.handler.codec.http.HttpRequest: io.netty.handler.codec.DecoderResult decoderResult()>();
v29 = virtualinvoke v28.<io.netty.handler.codec.DecoderResult: boolean isFailure()>();
if v29 == 0 goto label8;
v30 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2: io.netty.handler.codec.http.FullHttpRequest fullHttpRequest>;
v31 = interfaceinvoke v2.<io.netty.handler.codec.http.HttpRequest: io.netty.handler.codec.DecoderResult decoderResult()>();
interfaceinvoke v30.<io.netty.handler.codec.http.FullHttpRequest: void setDecoderResult(io.netty.handler.codec.DecoderResult)>(v31);
label8:
return;
catch java.lang.Throwable from label3 to label4 with label5;
}
private void releaseFullHttpRequest()
{
io.netty.handler.codec.http.FullHttpRequest v1, v2;
io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2 v0;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2;
v1 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2: io.netty.handler.codec.http.FullHttpRequest fullHttpRequest>;
if v1 == null goto label1;
v2 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2: io.netty.handler.codec.http.FullHttpRequest fullHttpRequest>;
interfaceinvoke v2.<io.netty.handler.codec.http.FullHttpRequest: boolean release()>();
v0.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2: io.netty.handler.codec.http.FullHttpRequest fullHttpRequest> = null;
label1:
return;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/handler/codec/http/websocketx/WebSocketServerHandshaker;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker$2: boolean $assertionsDisabled> = v2;
return;
}
}