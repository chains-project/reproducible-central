class io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler extends io.netty.channel.ChannelInboundHandlerAdapter
{
private final io.netty.handler.codec.http.websocketx.WebSocketServerProtocolConfig serverConfig;
private io.netty.channel.ChannelHandlerContext ctx;
private io.netty.channel.ChannelPromise handshakePromise;
private boolean isWebSocketPath;
void <init>(io.netty.handler.codec.http.websocketx.WebSocketServerProtocolConfig)
{
java.lang.Object v2;
io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler v0;
io.netty.handler.codec.http.websocketx.WebSocketServerProtocolConfig v1;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler;
v1 := @parameter0: io.netty.handler.codec.http.websocketx.WebSocketServerProtocolConfig;
specialinvoke v0.<io.netty.channel.ChannelInboundHandlerAdapter: void <init>()>();
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "serverConfig");
v0.<io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler: io.netty.handler.codec.http.websocketx.WebSocketServerProtocolConfig serverConfig> = v2;
return;
}
public void handlerAdded(io.netty.channel.ChannelHandlerContext)
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler v0;
io.netty.channel.ChannelPromise v2;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v0.<io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler: io.netty.channel.ChannelHandlerContext ctx> = v1;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPromise newPromise()>();
v0.<io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler: io.netty.channel.ChannelPromise handshakePromise> = v2;
return;
}
public void channelRead(io.netty.channel.ChannelHandlerContext, java.lang.Object) throws java.lang.Exception
{
java.lang.Throwable v23;
io.netty.handler.codec.http.websocketx.WebSocketServerHandshakerFactory v6;
io.netty.handler.codec.http.HttpObject v25;
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelPromise v16;
io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler$1 v22;
java.lang.String v10, v12, v9;
boolean v24, v3, v4, v5;
io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler v0;
io.netty.handler.codec.http.websocketx.WebSocketDecoderConfig v14;
io.netty.channel.ChannelPipeline v19, v7;
io.netty.channel.ChannelFuture v21;
io.netty.channel.Channel v17, v18, v20;
io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker v15;
java.lang.Object v2;
io.netty.handler.codec.http.websocketx.WebSocketServerProtocolConfig v11, v13, v8;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 = v2 instanceof io.netty.handler.codec.http.HttpRequest;
if v3 == 0 goto label5;
v4 = specialinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler: boolean isWebSocketPath(io.netty.handler.codec.http.HttpRequest)>(v25);
v0.<io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler: boolean isWebSocketPath> = v4;
v5 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler: boolean isWebSocketPath>;
if v5 != 0 goto label1;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)>(v2);
return;
label1:
v6 = new io.netty.handler.codec.http.websocketx.WebSocketServerHandshakerFactory;
v7 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPipeline pipeline()>();
v8 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler: io.netty.handler.codec.http.websocketx.WebSocketServerProtocolConfig serverConfig>;
v9 = virtualinvoke v8.<io.netty.handler.codec.http.websocketx.WebSocketServerProtocolConfig: java.lang.String websocketPath()>();
v10 = staticinvoke <io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler: java.lang.String getWebSocketLocation(io.netty.channel.ChannelPipeline,io.netty.handler.codec.http.HttpRequest,java.lang.String)>(v7, v25, v9);
v11 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler: io.netty.handler.codec.http.websocketx.WebSocketServerProtocolConfig serverConfig>;
v12 = virtualinvoke v11.<io.netty.handler.codec.http.websocketx.WebSocketServerProtocolConfig: java.lang.String subprotocols()>();
v13 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler: io.netty.handler.codec.http.websocketx.WebSocketServerProtocolConfig serverConfig>;
v14 = virtualinvoke v13.<io.netty.handler.codec.http.websocketx.WebSocketServerProtocolConfig: io.netty.handler.codec.http.websocketx.WebSocketDecoderConfig decoderConfig()>();
specialinvoke v6.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshakerFactory: void <init>(java.lang.String,java.lang.String,io.netty.handler.codec.http.websocketx.WebSocketDecoderConfig)>(v10, v12, v14);
v15 = virtualinvoke v6.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshakerFactory: io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker newHandshaker(io.netty.handler.codec.http.HttpRequest)>(v25);
v16 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler: io.netty.channel.ChannelPromise handshakePromise>;
if v15 != null goto label2;
v17 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
staticinvoke <io.netty.handler.codec.http.websocketx.WebSocketServerHandshakerFactory: io.netty.channel.ChannelFuture sendUnsupportedVersionResponse(io.netty.channel.Channel)>(v17);
goto label3;
label2:
v18 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
staticinvoke <io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler: void setHandshaker(io.netty.channel.Channel,io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker)>(v18, v15);
v19 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPipeline pipeline()>();
interfaceinvoke v19.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline remove(io.netty.channel.ChannelHandler)>(v0);
v20 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v21 = virtualinvoke v15.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpRequest)>(v20, v25);
v22 = new io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler$1;
specialinvoke v22.<io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler$1: void <init>(io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler,io.netty.channel.ChannelPromise,io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest,io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker)>(v0, v16, v1, v25, v15);
interfaceinvoke v21.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v22);
specialinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler: void applyHandshakeTimeout()>();
label3:
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v25);
goto label7;
label4:
v23 := @caughtexception;
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v25);
throw v23;
label5:
v24 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler: boolean isWebSocketPath>;
if v24 != 0 goto label6;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)>(v2);
goto label7;
label6:
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v2);
label7:
return;
catch java.lang.Throwable from label1 to label3 with label4;
}
private boolean isWebSocketPath(io.netty.handler.codec.http.HttpRequest)
{
io.netty.handler.codec.http.HttpRequest v1;
io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler v0;
java.lang.String v3, v4, v6;
io.netty.handler.codec.http.websocketx.WebSocketServerProtocolConfig v10, v2;
boolean v11, v12, v5, v7, v8, v9;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler;
v1 := @parameter0: io.netty.handler.codec.http.HttpRequest;
v2 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler: io.netty.handler.codec.http.websocketx.WebSocketServerProtocolConfig serverConfig>;
v3 = virtualinvoke v2.<io.netty.handler.codec.http.websocketx.WebSocketServerProtocolConfig: java.lang.String websocketPath()>();
v4 = interfaceinvoke v1.<io.netty.handler.codec.http.HttpRequest: java.lang.String uri()>();
v5 = virtualinvoke v4.<java.lang.String: boolean startsWith(java.lang.String)>(v3);
v6 = "/";
v7 = virtualinvoke v6.<java.lang.String: boolean equals(java.lang.Object)>(v3);
if v7 != 0 goto label1;
v8 = specialinvoke v0.<io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler: boolean checkNextUri(java.lang.String,java.lang.String)>(v4, v3);
if v8 == 0 goto label2;
label1:
v9 = 1;
goto label3;
label2:
v9 = 0;
label3:
v10 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler: io.netty.handler.codec.http.websocketx.WebSocketServerProtocolConfig serverConfig>;
v11 = virtualinvoke v10.<io.netty.handler.codec.http.websocketx.WebSocketServerProtocolConfig: boolean checkStartsWith()>();
if v11 == 0 goto label5;
if v5 == 0 goto label4;
if v9 == 0 goto label4;
v12 = 1;
goto label6;
label4:
v12 = 0;
goto label6;
label5:
v12 = virtualinvoke v4.<java.lang.String: boolean equals(java.lang.Object)>(v3);
label6:
return v12;
}
private boolean checkNextUri(java.lang.String, java.lang.String)
{
io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler v0;
int v3, v4;
char v5;
java.lang.String v1, v2;
boolean v6;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v2.<java.lang.String: int length()>();
v4 = virtualinvoke v1.<java.lang.String: int length()>();
if v4 <= v3 goto label4;
v5 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v3);
if v5 == 47 goto label1;
if v5 != 63 goto label2;
label1:
v6 = 1;
goto label3;
label2:
v6 = 0;
label3:
return v6;
label4:
return 1;
}
private static void sendHttpResponse(io.netty.channel.ChannelHandlerContext, io.netty.handler.codec.http.HttpRequest, io.netty.handler.codec.http.HttpResponse)
{
io.netty.handler.codec.http.HttpRequest v1;
io.netty.handler.codec.http.HttpResponseStatus v5;
io.netty.channel.ChannelFuture v3;
io.netty.channel.ChannelHandlerContext v0;
io.netty.channel.ChannelFutureListener v7;
int v6;
io.netty.handler.codec.http.HttpResponse v2;
boolean v4;
v0 := @parameter0: io.netty.channel.ChannelHandlerContext;
v1 := @parameter1: io.netty.handler.codec.http.HttpRequest;
v2 := @parameter2: io.netty.handler.codec.http.HttpResponse;
v3 = interfaceinvoke v0.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object)>(v2);
v4 = staticinvoke <io.netty.handler.codec.http.HttpUtil: boolean isKeepAlive(io.netty.handler.codec.http.HttpMessage)>(v1);
if v4 == 0 goto label1;
v5 = interfaceinvoke v2.<io.netty.handler.codec.http.HttpResponse: io.netty.handler.codec.http.HttpResponseStatus status()>();
v6 = virtualinvoke v5.<io.netty.handler.codec.http.HttpResponseStatus: int code()>();
if v6 == 200 goto label2;
label1:
v7 = <io.netty.channel.ChannelFutureListener: io.netty.channel.ChannelFutureListener CLOSE>;
interfaceinvoke v3.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v7);
label2:
return;
}
private static java.lang.String getWebSocketLocation(io.netty.channel.ChannelPipeline, io.netty.handler.codec.http.HttpRequest, java.lang.String)
{
io.netty.handler.codec.http.HttpHeaders v5;
io.netty.handler.codec.http.HttpRequest v1;
io.netty.util.AsciiString v6;
io.netty.channel.ChannelPipeline v0;
io.netty.channel.ChannelHandler v4;
java.lang.String v2, v3, v7, v8;
v0 := @parameter0: io.netty.channel.ChannelPipeline;
v1 := @parameter1: io.netty.handler.codec.http.HttpRequest;
v2 := @parameter2: java.lang.String;
v3 = "ws";
v4 = interfaceinvoke v0.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelHandler get(java.lang.Class)>(class "Lio/netty/handler/ssl/SslHandler;");
if v4 == null goto label1;
v3 = "wss";
label1:
v5 = interfaceinvoke v1.<io.netty.handler.codec.http.HttpRequest: io.netty.handler.codec.http.HttpHeaders headers()>();
v6 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString HOST>;
v7 = virtualinvoke v5.<io.netty.handler.codec.http.HttpHeaders: java.lang.String get(java.lang.CharSequence)>(v6);
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.String)>(v3, v7, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001://\u0001\u0001");
return v8;
}
private void applyHandshakeTimeout()
{
io.netty.util.concurrent.EventExecutor v7;
io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler v0;
io.netty.util.concurrent.ScheduledFuture v10;
long v3;
java.util.concurrent.TimeUnit v9;
io.netty.channel.ChannelHandlerContext v6;
byte v4;
io.netty.channel.ChannelPromise v1;
io.netty.handler.codec.http.websocketx.WebSocketServerProtocolConfig v2;
io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler$3 v11;
boolean v5;
io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler$2 v8;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler;
v1 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler: io.netty.channel.ChannelPromise handshakePromise>;
v2 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler: io.netty.handler.codec.http.websocketx.WebSocketServerProtocolConfig serverConfig>;
v3 = virtualinvoke v2.<io.netty.handler.codec.http.websocketx.WebSocketServerProtocolConfig: long handshakeTimeoutMillis()>();
v4 = v3 cmp 0L;
if v4 <= 0 goto label1;
v5 = interfaceinvoke v1.<io.netty.channel.ChannelPromise: boolean isDone()>();
if v5 == 0 goto label2;
label1:
return;
label2:
v6 = v0.<io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler: io.netty.channel.ChannelHandlerContext ctx>;
v7 = interfaceinvoke v6.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v8 = new io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler$2;
specialinvoke v8.<io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler$2: void <init>(io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler,io.netty.channel.ChannelPromise)>(v0, v1);
v9 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
v10 = interfaceinvoke v7.<io.netty.util.concurrent.EventExecutor: io.netty.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(v8, v3, v9);
v11 = new io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler$3;
specialinvoke v11.<io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler$3: void <init>(io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandshakeHandler,io.netty.util.concurrent.Future)>(v0, v10);
interfaceinvoke v1.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise addListener(io.netty.util.concurrent.GenericFutureListener)>(v11);
return;
}
}