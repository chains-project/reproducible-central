final class io.netty.handler.codec.http.websocketx.WebSocketUtil extends java.lang.Object
{
private static final io.netty.util.concurrent.FastThreadLocal MD5;
private static final io.netty.util.concurrent.FastThreadLocal SHA1;
static final boolean $assertionsDisabled;
static byte[] md5(byte[])
{
byte[] v0, v2;
io.netty.util.concurrent.FastThreadLocal v1;
v0 := @parameter0: byte[];
v1 = <io.netty.handler.codec.http.websocketx.WebSocketUtil: io.netty.util.concurrent.FastThreadLocal MD5>;
v2 = staticinvoke <io.netty.handler.codec.http.websocketx.WebSocketUtil: byte[] digest(io.netty.util.concurrent.FastThreadLocal,byte[])>(v1, v0);
return v2;
}
static byte[] sha1(byte[])
{
byte[] v0, v2;
io.netty.util.concurrent.FastThreadLocal v1;
v0 := @parameter0: byte[];
v1 = <io.netty.handler.codec.http.websocketx.WebSocketUtil: io.netty.util.concurrent.FastThreadLocal SHA1>;
v2 = staticinvoke <io.netty.handler.codec.http.websocketx.WebSocketUtil: byte[] digest(io.netty.util.concurrent.FastThreadLocal,byte[])>(v1, v0);
return v2;
}
private static byte[] digest(io.netty.util.concurrent.FastThreadLocal, byte[])
{
byte[] v1, v3;
io.netty.util.concurrent.FastThreadLocal v0;
java.lang.Object v2;
v0 := @parameter0: io.netty.util.concurrent.FastThreadLocal;
v1 := @parameter1: byte[];
v2 = virtualinvoke v0.<io.netty.util.concurrent.FastThreadLocal: java.lang.Object get()>();
virtualinvoke v2.<java.security.MessageDigest: void reset()>();
v3 = virtualinvoke v2.<java.security.MessageDigest: byte[] digest(byte[])>(v1);
return v3;
}
static java.lang.String base64(byte[])
{
java.lang.Throwable v8, v9;
byte[] v0;
java.util.Base64$Encoder v2;
io.netty.buffer.ByteBuf v4, v5;
java.nio.charset.Charset v6;
int v1;
java.lang.String v3, v7;
v0 := @parameter0: byte[];
v1 = staticinvoke <io.netty.util.internal.PlatformDependent: int javaVersion()>();
if v1 < 8 goto label1;
v2 = staticinvoke <java.util.Base64: java.util.Base64$Encoder getEncoder()>();
v3 = virtualinvoke v2.<java.util.Base64$Encoder: java.lang.String encodeToString(byte[])>(v0);
return v3;
label1:
v4 = staticinvoke <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf wrappedBuffer(byte[])>(v0);
label2:
v5 = staticinvoke <io.netty.handler.codec.base64.Base64: io.netty.buffer.ByteBuf encode(io.netty.buffer.ByteBuf)>(v4);
label3:
v6 = <io.netty.util.CharsetUtil: java.nio.charset.Charset UTF_8>;
v7 = virtualinvoke v5.<io.netty.buffer.ByteBuf: java.lang.String toString(java.nio.charset.Charset)>(v6);
label4:
virtualinvoke v5.<io.netty.buffer.ByteBuf: boolean release()>();
goto label6;
label5:
v8 := @caughtexception;
virtualinvoke v5.<io.netty.buffer.ByteBuf: boolean release()>();
throw v8;
label6:
virtualinvoke v4.<io.netty.buffer.ByteBuf: boolean release()>();
goto label8;
label7:
v9 := @caughtexception;
virtualinvoke v4.<io.netty.buffer.ByteBuf: boolean release()>();
throw v9;
label8:
return v7;
catch java.lang.Throwable from label3 to label4 with label5;
catch java.lang.Throwable from label2 to label6 with label7;
}
static byte[] randomBytes(int)
{
int v0;
byte[] v1;
java.util.Random v2;
v0 := @parameter0: int;
v1 = newarray (byte)[v0];
v2 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.Random threadLocalRandom()>();
virtualinvoke v2.<java.util.Random: void nextBytes(byte[])>(v1);
return v1;
}
static int randomNumber(int, int)
{
java.util.Random v4;
java.lang.AssertionError v3;
int v0, v1, v6;
boolean v2;
double v5, v7, v8;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 = <io.netty.handler.codec.http.websocketx.WebSocketUtil: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
if v0 < v1 goto label1;
v3 = new java.lang.AssertionError;
specialinvoke v3.<java.lang.AssertionError: void <init>()>();
throw v3;
label1:
v4 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.Random threadLocalRandom()>();
v5 = virtualinvoke v4.<java.util.Random: double nextDouble()>();
v6 = v1 - v0;
v7 = v5 * v6;
v8 = v0 + v7;
return v8;
}
static int byteAtIndex(int, int)
{
int v0, v1, v2, v3, v4, v5;
v0 := @parameter0: int;
v1 := @parameter1: int;
v2 = 3 - v1;
v3 = 8 * v2;
v4 = v0 >> v3;
v5 = v4 & 255;
return v5;
}
private void <init>()
{
io.netty.handler.codec.http.websocketx.WebSocketUtil v0;
v0 := @this: io.netty.handler.codec.http.websocketx.WebSocketUtil;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void <clinit>()
{
io.netty.handler.codec.http.websocketx.WebSocketUtil$1 v3;
java.lang.Class v0;
io.netty.handler.codec.http.websocketx.WebSocketUtil$2 v4;
boolean v1, v2;
v0 = class "Lio/netty/handler/codec/http/websocketx/WebSocketUtil;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.handler.codec.http.websocketx.WebSocketUtil: boolean $assertionsDisabled> = v2;
v3 = new io.netty.handler.codec.http.websocketx.WebSocketUtil$1;
specialinvoke v3.<io.netty.handler.codec.http.websocketx.WebSocketUtil$1: void <init>()>();
<io.netty.handler.codec.http.websocketx.WebSocketUtil: io.netty.util.concurrent.FastThreadLocal MD5> = v3;
v4 = new io.netty.handler.codec.http.websocketx.WebSocketUtil$2;
specialinvoke v4.<io.netty.handler.codec.http.websocketx.WebSocketUtil$2: void <init>()>();
<io.netty.handler.codec.http.websocketx.WebSocketUtil: io.netty.util.concurrent.FastThreadLocal SHA1> = v4;
return;
}
}