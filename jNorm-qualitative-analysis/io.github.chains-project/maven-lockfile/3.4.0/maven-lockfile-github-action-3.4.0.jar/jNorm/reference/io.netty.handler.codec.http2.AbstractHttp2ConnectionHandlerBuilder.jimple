public abstract class io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder extends java.lang.Object
{
private static final io.netty.handler.codec.http2.Http2HeadersEncoder$SensitivityDetector DEFAULT_HEADER_SENSITIVITY_DETECTOR;
private io.netty.handler.codec.http2.Http2Settings initialSettings;
private io.netty.handler.codec.http2.Http2FrameListener frameListener;
private long gracefulShutdownTimeoutMillis;
private boolean decoupleCloseAndGoAway;
private boolean flushPreface;
private java.lang.Boolean isServer;
private java.lang.Integer maxReservedStreams;
private io.netty.handler.codec.http2.Http2Connection connection;
private io.netty.handler.codec.http2.Http2ConnectionDecoder decoder;
private io.netty.handler.codec.http2.Http2ConnectionEncoder encoder;
private java.lang.Boolean validateHeaders;
private io.netty.handler.codec.http2.Http2FrameLogger frameLogger;
private io.netty.handler.codec.http2.Http2HeadersEncoder$SensitivityDetector headerSensitivityDetector;
private java.lang.Boolean encoderEnforceMaxConcurrentStreams;
private java.lang.Boolean encoderIgnoreMaxHeaderListSize;
private io.netty.handler.codec.http2.Http2PromisedRequestVerifier promisedRequestVerifier;
private boolean autoAckSettingsFrame;
private boolean autoAckPingFrame;
private int maxQueuedControlFrames;
private int maxConsecutiveEmptyFrames;
static final boolean $assertionsDisabled;
public void <init>()
{
io.netty.handler.codec.http2.Http2Settings v1;
io.netty.handler.codec.http2.Http2PromisedRequestVerifier v3;
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0;
long v2;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = staticinvoke <io.netty.handler.codec.http2.Http2Settings: io.netty.handler.codec.http2.Http2Settings defaultSettings()>();
v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2Settings initialSettings> = v1;
v2 = <io.netty.handler.codec.http2.Http2CodecUtil: long DEFAULT_GRACEFUL_SHUTDOWN_TIMEOUT_MILLIS>;
v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: long gracefulShutdownTimeoutMillis> = v2;
v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: boolean flushPreface> = 1;
v3 = <io.netty.handler.codec.http2.Http2PromisedRequestVerifier: io.netty.handler.codec.http2.Http2PromisedRequestVerifier ALWAYS_VERIFY>;
v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2PromisedRequestVerifier promisedRequestVerifier> = v3;
v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: boolean autoAckSettingsFrame> = 1;
v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: boolean autoAckPingFrame> = 1;
v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: int maxQueuedControlFrames> = 10000;
v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: int maxConsecutiveEmptyFrames> = 2;
return;
}
protected io.netty.handler.codec.http2.Http2Settings initialSettings()
{
io.netty.handler.codec.http2.Http2Settings v1;
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2Settings initialSettings>;
return v1;
}
protected io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder initialSettings(io.netty.handler.codec.http2.Http2Settings)
{
io.netty.handler.codec.http2.Http2Settings v1;
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0, v3;
java.lang.Object v2;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Settings;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "settings");
v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2Settings initialSettings> = v2;
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder self()>();
return v3;
}
protected io.netty.handler.codec.http2.Http2FrameListener frameListener()
{
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0;
io.netty.handler.codec.http2.Http2FrameListener v1;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2FrameListener frameListener>;
return v1;
}
protected io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder frameListener(io.netty.handler.codec.http2.Http2FrameListener)
{
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0, v3;
java.lang.Object v2;
io.netty.handler.codec.http2.Http2FrameListener v1;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 := @parameter0: io.netty.handler.codec.http2.Http2FrameListener;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "frameListener");
v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2FrameListener frameListener> = v2;
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder self()>();
return v3;
}
protected long gracefulShutdownTimeoutMillis()
{
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0;
long v1;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: long gracefulShutdownTimeoutMillis>;
return v1;
}
protected io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder gracefulShutdownTimeoutMillis(long)
{
byte v2;
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0, v5;
long v1;
java.lang.String v4;
java.lang.IllegalArgumentException v3;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 := @parameter0: long;
v2 = v1 cmp -1L;
if v2 >= 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("gracefulShutdownTimeoutMillis: \u0001 (expected: -1 for indefinite or >= 0)");
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v4);
throw v3;
label1:
v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: long gracefulShutdownTimeoutMillis> = v1;
v5 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder self()>();
return v5;
}
protected boolean isServer()
{
java.lang.Boolean v1, v2;
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0;
boolean v3;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: java.lang.Boolean isServer>;
if v1 == null goto label1;
v2 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: java.lang.Boolean isServer>;
v3 = virtualinvoke v2.<java.lang.Boolean: boolean booleanValue()>();
goto label2;
label1:
v3 = 1;
label2:
return v3;
}
protected io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder server(boolean)
{
io.netty.handler.codec.http2.Http2Connection v2;
io.netty.handler.codec.http2.Http2ConnectionEncoder v4;
java.lang.Boolean v5;
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0, v6;
boolean v1;
io.netty.handler.codec.http2.Http2ConnectionDecoder v3;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 := @parameter0: boolean;
v2 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2Connection connection>;
staticinvoke <io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: void enforceConstraint(java.lang.String,java.lang.String,java.lang.Object)>("server", "connection", v2);
v3 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2ConnectionDecoder decoder>;
staticinvoke <io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: void enforceConstraint(java.lang.String,java.lang.String,java.lang.Object)>("server", "codec", v3);
v4 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2ConnectionEncoder encoder>;
staticinvoke <io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: void enforceConstraint(java.lang.String,java.lang.String,java.lang.Object)>("server", "codec", v4);
v5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v1);
v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: java.lang.Boolean isServer> = v5;
v6 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder self()>();
return v6;
}
protected int maxReservedStreams()
{
int v3;
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0;
java.lang.Integer v1, v2;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: java.lang.Integer maxReservedStreams>;
if v1 == null goto label1;
v2 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: java.lang.Integer maxReservedStreams>;
v3 = virtualinvoke v2.<java.lang.Integer: int intValue()>();
goto label2;
label1:
v3 = 100;
label2:
return v3;
}
protected io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder maxReservedStreams(int)
{
io.netty.handler.codec.http2.Http2ConnectionEncoder v4;
java.lang.Integer v6;
io.netty.handler.codec.http2.Http2ConnectionDecoder v3;
io.netty.handler.codec.http2.Http2Connection v2;
int v1, v5;
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0, v7;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 := @parameter0: int;
v2 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2Connection connection>;
staticinvoke <io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: void enforceConstraint(java.lang.String,java.lang.String,java.lang.Object)>("server", "connection", v2);
v3 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2ConnectionDecoder decoder>;
staticinvoke <io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: void enforceConstraint(java.lang.String,java.lang.String,java.lang.Object)>("server", "codec", v3);
v4 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2ConnectionEncoder encoder>;
staticinvoke <io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: void enforceConstraint(java.lang.String,java.lang.String,java.lang.Object)>("server", "codec", v4);
v5 = staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositiveOrZero(int,java.lang.String)>(v1, "maxReservedStreams");
v6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v5);
v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: java.lang.Integer maxReservedStreams> = v6;
v7 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder self()>();
return v7;
}
protected io.netty.handler.codec.http2.Http2Connection connection()
{
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0;
io.netty.handler.codec.http2.Http2Connection v1;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2Connection connection>;
return v1;
}
protected io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder connection(io.netty.handler.codec.http2.Http2Connection)
{
io.netty.handler.codec.http2.Http2ConnectionEncoder v5;
java.lang.Integer v2;
io.netty.handler.codec.http2.Http2ConnectionDecoder v4;
io.netty.handler.codec.http2.Http2Connection v1;
java.lang.Boolean v3;
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0, v7;
java.lang.Object v6;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Connection;
v2 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: java.lang.Integer maxReservedStreams>;
staticinvoke <io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: void enforceConstraint(java.lang.String,java.lang.String,java.lang.Object)>("connection", "maxReservedStreams", v2);
v3 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: java.lang.Boolean isServer>;
staticinvoke <io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: void enforceConstraint(java.lang.String,java.lang.String,java.lang.Object)>("connection", "server", v3);
v4 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2ConnectionDecoder decoder>;
staticinvoke <io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: void enforceConstraint(java.lang.String,java.lang.String,java.lang.Object)>("connection", "codec", v4);
v5 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2ConnectionEncoder encoder>;
staticinvoke <io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: void enforceConstraint(java.lang.String,java.lang.String,java.lang.Object)>("connection", "codec", v5);
v6 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "connection");
v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2Connection connection> = v6;
v7 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder self()>();
return v7;
}
protected io.netty.handler.codec.http2.Http2ConnectionDecoder decoder()
{
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0;
io.netty.handler.codec.http2.Http2ConnectionDecoder v1;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2ConnectionDecoder decoder>;
return v1;
}
protected io.netty.handler.codec.http2.Http2ConnectionEncoder encoder()
{
io.netty.handler.codec.http2.Http2ConnectionEncoder v1;
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2ConnectionEncoder encoder>;
return v1;
}
protected io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder codec(io.netty.handler.codec.http2.Http2ConnectionDecoder, io.netty.handler.codec.http2.Http2ConnectionEncoder)
{
io.netty.handler.codec.http2.Http2ConnectionEncoder v2;
io.netty.handler.codec.http2.Http2HeadersEncoder$SensitivityDetector v8;
java.lang.IllegalArgumentException v12;
java.lang.Integer v4;
io.netty.handler.codec.http2.Http2ConnectionDecoder v1;
io.netty.handler.codec.http2.Http2Connection v10, v11, v5;
io.netty.handler.codec.http2.Http2FrameLogger v6;
java.lang.Boolean v3, v7, v9;
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0, v13;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 := @parameter0: io.netty.handler.codec.http2.Http2ConnectionDecoder;
v2 := @parameter1: io.netty.handler.codec.http2.Http2ConnectionEncoder;
v3 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: java.lang.Boolean isServer>;
staticinvoke <io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: void enforceConstraint(java.lang.String,java.lang.String,java.lang.Object)>("codec", "server", v3);
v4 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: java.lang.Integer maxReservedStreams>;
staticinvoke <io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: void enforceConstraint(java.lang.String,java.lang.String,java.lang.Object)>("codec", "maxReservedStreams", v4);
v5 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2Connection connection>;
staticinvoke <io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: void enforceConstraint(java.lang.String,java.lang.String,java.lang.Object)>("codec", "connection", v5);
v6 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2FrameLogger frameLogger>;
staticinvoke <io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: void enforceConstraint(java.lang.String,java.lang.String,java.lang.Object)>("codec", "frameLogger", v6);
v7 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: java.lang.Boolean validateHeaders>;
staticinvoke <io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: void enforceConstraint(java.lang.String,java.lang.String,java.lang.Object)>("codec", "validateHeaders", v7);
v8 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2HeadersEncoder$SensitivityDetector headerSensitivityDetector>;
staticinvoke <io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: void enforceConstraint(java.lang.String,java.lang.String,java.lang.Object)>("codec", "headerSensitivityDetector", v8);
v9 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: java.lang.Boolean encoderEnforceMaxConcurrentStreams>;
staticinvoke <io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: void enforceConstraint(java.lang.String,java.lang.String,java.lang.Object)>("codec", "encoderEnforceMaxConcurrentStreams", v9);
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "decoder");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "encoder");
v10 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2ConnectionDecoder: io.netty.handler.codec.http2.Http2Connection connection()>();
v11 = interfaceinvoke v2.<io.netty.handler.codec.http2.Http2ConnectionEncoder: io.netty.handler.codec.http2.Http2Connection connection()>();
if v10 == v11 goto label1;
v12 = new java.lang.IllegalArgumentException;
specialinvoke v12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The specified encoder and decoder have different connections.");
throw v12;
label1:
v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2ConnectionDecoder decoder> = v1;
v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2ConnectionEncoder encoder> = v2;
v13 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder self()>();
return v13;
}
protected boolean isValidateHeaders()
{
java.lang.Boolean v1, v2;
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0;
boolean v3;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: java.lang.Boolean validateHeaders>;
if v1 == null goto label1;
v2 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: java.lang.Boolean validateHeaders>;
v3 = virtualinvoke v2.<java.lang.Boolean: boolean booleanValue()>();
goto label2;
label1:
v3 = 1;
label2:
return v3;
}
protected io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder validateHeaders(boolean)
{
java.lang.Boolean v2;
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0, v3;
boolean v1;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 := @parameter0: boolean;
specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: void enforceNonCodecConstraints(java.lang.String)>("validateHeaders");
v2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v1);
v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: java.lang.Boolean validateHeaders> = v2;
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder self()>();
return v3;
}
protected io.netty.handler.codec.http2.Http2FrameLogger frameLogger()
{
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0;
io.netty.handler.codec.http2.Http2FrameLogger v1;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2FrameLogger frameLogger>;
return v1;
}
protected io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder frameLogger(io.netty.handler.codec.http2.Http2FrameLogger)
{
io.netty.handler.codec.http2.Http2FrameLogger v1;
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0, v3;
java.lang.Object v2;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 := @parameter0: io.netty.handler.codec.http2.Http2FrameLogger;
specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: void enforceNonCodecConstraints(java.lang.String)>("frameLogger");
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "frameLogger");
v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2FrameLogger frameLogger> = v2;
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder self()>();
return v3;
}
protected boolean encoderEnforceMaxConcurrentStreams()
{
java.lang.Boolean v1, v2;
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0;
boolean v3;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: java.lang.Boolean encoderEnforceMaxConcurrentStreams>;
if v1 == null goto label1;
v2 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: java.lang.Boolean encoderEnforceMaxConcurrentStreams>;
v3 = virtualinvoke v2.<java.lang.Boolean: boolean booleanValue()>();
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
protected io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder encoderEnforceMaxConcurrentStreams(boolean)
{
java.lang.Boolean v2;
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0, v3;
boolean v1;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 := @parameter0: boolean;
specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: void enforceNonCodecConstraints(java.lang.String)>("encoderEnforceMaxConcurrentStreams");
v2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v1);
v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: java.lang.Boolean encoderEnforceMaxConcurrentStreams> = v2;
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder self()>();
return v3;
}
protected int encoderEnforceMaxQueuedControlFrames()
{
int v1;
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: int maxQueuedControlFrames>;
return v1;
}
protected io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder encoderEnforceMaxQueuedControlFrames(int)
{
int v1, v2;
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0, v3;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: void enforceNonCodecConstraints(java.lang.String)>("encoderEnforceMaxQueuedControlFrames");
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositiveOrZero(int,java.lang.String)>(v1, "maxQueuedControlFrames");
v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: int maxQueuedControlFrames> = v2;
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder self()>();
return v3;
}
protected io.netty.handler.codec.http2.Http2HeadersEncoder$SensitivityDetector headerSensitivityDetector()
{
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0;
io.netty.handler.codec.http2.Http2HeadersEncoder$SensitivityDetector v1, v2;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2HeadersEncoder$SensitivityDetector headerSensitivityDetector>;
if v1 == null goto label1;
v2 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2HeadersEncoder$SensitivityDetector headerSensitivityDetector>;
goto label2;
label1:
v2 = <io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2HeadersEncoder$SensitivityDetector DEFAULT_HEADER_SENSITIVITY_DETECTOR>;
label2:
return v2;
}
protected io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder headerSensitivityDetector(io.netty.handler.codec.http2.Http2HeadersEncoder$SensitivityDetector)
{
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0, v3;
java.lang.Object v2;
io.netty.handler.codec.http2.Http2HeadersEncoder$SensitivityDetector v1;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 := @parameter0: io.netty.handler.codec.http2.Http2HeadersEncoder$SensitivityDetector;
specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: void enforceNonCodecConstraints(java.lang.String)>("headerSensitivityDetector");
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "headerSensitivityDetector");
v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2HeadersEncoder$SensitivityDetector headerSensitivityDetector> = v2;
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder self()>();
return v3;
}
protected io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder encoderIgnoreMaxHeaderListSize(boolean)
{
java.lang.Boolean v2;
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0, v3;
boolean v1;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 := @parameter0: boolean;
specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: void enforceNonCodecConstraints(java.lang.String)>("encoderIgnoreMaxHeaderListSize");
v2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v1);
v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: java.lang.Boolean encoderIgnoreMaxHeaderListSize> = v2;
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder self()>();
return v3;
}
protected io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder initialHuffmanDecodeCapacity(int)
{
int v1;
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0, v2;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder self()>();
return v2;
}
protected io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder promisedRequestVerifier(io.netty.handler.codec.http2.Http2PromisedRequestVerifier)
{
io.netty.handler.codec.http2.Http2PromisedRequestVerifier v1;
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0, v3;
java.lang.Object v2;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 := @parameter0: io.netty.handler.codec.http2.Http2PromisedRequestVerifier;
specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: void enforceNonCodecConstraints(java.lang.String)>("promisedRequestVerifier");
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "promisedRequestVerifier");
v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2PromisedRequestVerifier promisedRequestVerifier> = v2;
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder self()>();
return v3;
}
protected io.netty.handler.codec.http2.Http2PromisedRequestVerifier promisedRequestVerifier()
{
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0;
io.netty.handler.codec.http2.Http2PromisedRequestVerifier v1;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2PromisedRequestVerifier promisedRequestVerifier>;
return v1;
}
protected int decoderEnforceMaxConsecutiveEmptyDataFrames()
{
int v1;
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: int maxConsecutiveEmptyFrames>;
return v1;
}
protected io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder decoderEnforceMaxConsecutiveEmptyDataFrames(int)
{
int v1, v2;
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0, v3;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: void enforceNonCodecConstraints(java.lang.String)>("maxConsecutiveEmptyFrames");
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositiveOrZero(int,java.lang.String)>(v1, "maxConsecutiveEmptyFrames");
v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: int maxConsecutiveEmptyFrames> = v2;
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder self()>();
return v3;
}
protected io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder autoAckSettingsFrame(boolean)
{
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0, v2;
boolean v1;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 := @parameter0: boolean;
specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: void enforceNonCodecConstraints(java.lang.String)>("autoAckSettingsFrame");
v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: boolean autoAckSettingsFrame> = v1;
v2 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder self()>();
return v2;
}
protected boolean isAutoAckSettingsFrame()
{
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0;
boolean v1;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: boolean autoAckSettingsFrame>;
return v1;
}
protected io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder autoAckPingFrame(boolean)
{
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0, v2;
boolean v1;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 := @parameter0: boolean;
specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: void enforceNonCodecConstraints(java.lang.String)>("autoAckPingFrame");
v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: boolean autoAckPingFrame> = v1;
v2 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder self()>();
return v2;
}
protected boolean isAutoAckPingFrame()
{
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0;
boolean v1;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: boolean autoAckPingFrame>;
return v1;
}
protected io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder decoupleCloseAndGoAway(boolean)
{
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0, v2;
boolean v1;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 := @parameter0: boolean;
v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: boolean decoupleCloseAndGoAway> = v1;
v2 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder self()>();
return v2;
}
protected boolean decoupleCloseAndGoAway()
{
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0;
boolean v1;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: boolean decoupleCloseAndGoAway>;
return v1;
}
protected io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder flushPreface(boolean)
{
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0, v2;
boolean v1;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 := @parameter0: boolean;
v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: boolean flushPreface> = v1;
v2 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder self()>();
return v2;
}
protected boolean flushPreface()
{
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0;
boolean v1;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: boolean flushPreface>;
return v1;
}
protected io.netty.handler.codec.http2.Http2ConnectionHandler build()
{
io.netty.handler.codec.http2.Http2ConnectionEncoder v1, v6;
java.lang.AssertionError v4;
io.netty.handler.codec.http2.DefaultHttp2Connection v9;
io.netty.handler.codec.http2.Http2ConnectionHandler v12, v7;
io.netty.handler.codec.http2.Http2ConnectionDecoder v3, v5;
io.netty.handler.codec.http2.Http2Connection v8;
int v11;
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0;
boolean v10, v2;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2ConnectionEncoder encoder>;
if v1 == null goto label2;
v2 = <io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
v3 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2ConnectionDecoder decoder>;
if v3 != null goto label1;
v4 = new java.lang.AssertionError;
specialinvoke v4.<java.lang.AssertionError: void <init>()>();
throw v4;
label1:
v5 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2ConnectionDecoder decoder>;
v6 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2ConnectionEncoder encoder>;
v7 = specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2ConnectionHandler buildFromCodec(io.netty.handler.codec.http2.Http2ConnectionDecoder,io.netty.handler.codec.http2.Http2ConnectionEncoder)>(v5, v6);
return v7;
label2:
v8 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2Connection connection>;
if v8 != null goto label3;
v9 = new io.netty.handler.codec.http2.DefaultHttp2Connection;
v10 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: boolean isServer()>();
v11 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: int maxReservedStreams()>();
specialinvoke v9.<io.netty.handler.codec.http2.DefaultHttp2Connection: void <init>(boolean,int)>(v10, v11);
v8 = v9;
label3:
v12 = specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2ConnectionHandler buildFromConnection(io.netty.handler.codec.http2.Http2Connection)>(v8);
return v12;
}
private io.netty.handler.codec.http2.Http2ConnectionHandler buildFromConnection(io.netty.handler.codec.http2.Http2Connection)
{
io.netty.handler.codec.http2.StreamBufferingEncoder v33;
io.netty.handler.codec.http2.Http2FrameReader v9;
io.netty.handler.codec.http2.Http2ConnectionEncoder v25;
java.lang.Long v3;
io.netty.handler.codec.http2.Http2FrameLogger v19, v21, v23;
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0;
boolean v17, v26, v30, v36, v37, v6;
io.netty.handler.codec.http2.Http2OutboundFrameLogger v22;
io.netty.handler.codec.http2.DefaultHttp2HeadersDecoder v5;
io.netty.handler.codec.http2.Http2ConnectionHandler v38;
io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder v34;
io.netty.handler.codec.http2.Http2ControlFrameLimitEncoder v28;
long v7;
io.netty.handler.codec.http2.DefaultHttp2FrameReader v4;
int v27, v29, v8;
io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder v24;
java.lang.Boolean v10, v16;
java.lang.String v32;
io.netty.handler.codec.http2.DefaultHttp2FrameWriter v11, v12, v14;
io.netty.handler.codec.http2.Http2PromisedRequestVerifier v35;
io.netty.handler.codec.http2.Http2FrameWriter v18;
io.netty.handler.codec.http2.Http2InboundFrameLogger v20;
io.netty.handler.codec.http2.Http2HeadersEncoder$SensitivityDetector v13, v15;
java.lang.IllegalArgumentException v31;
io.netty.handler.codec.http2.Http2Settings v2;
io.netty.handler.codec.http2.Http2Connection v1;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Connection;
v2 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2Settings initialSettings>;
v3 = virtualinvoke v2.<io.netty.handler.codec.http2.Http2Settings: java.lang.Long maxHeaderListSize()>();
v4 = new io.netty.handler.codec.http2.DefaultHttp2FrameReader;
v5 = new io.netty.handler.codec.http2.DefaultHttp2HeadersDecoder;
v6 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: boolean isValidateHeaders()>();
if v3 != null goto label1;
v7 = 8192L;
goto label2;
label1:
v7 = virtualinvoke v3.<java.lang.Long: long longValue()>();
label2:
v8 = (int) -1;
specialinvoke v5.<io.netty.handler.codec.http2.DefaultHttp2HeadersDecoder: void <init>(boolean,long,int)>(v6, v7, v8);
specialinvoke v4.<io.netty.handler.codec.http2.DefaultHttp2FrameReader: void <init>(io.netty.handler.codec.http2.Http2HeadersDecoder)>(v5);
v9 = v4;
v10 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: java.lang.Boolean encoderIgnoreMaxHeaderListSize>;
if v10 != null goto label3;
v11 = new io.netty.handler.codec.http2.DefaultHttp2FrameWriter;
v12 = v11;
v13 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2HeadersEncoder$SensitivityDetector headerSensitivityDetector()>();
specialinvoke v11.<io.netty.handler.codec.http2.DefaultHttp2FrameWriter: void <init>(io.netty.handler.codec.http2.Http2HeadersEncoder$SensitivityDetector)>(v13);
goto label4;
label3:
v14 = new io.netty.handler.codec.http2.DefaultHttp2FrameWriter;
v12 = v14;
v15 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2HeadersEncoder$SensitivityDetector headerSensitivityDetector()>();
v16 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: java.lang.Boolean encoderIgnoreMaxHeaderListSize>;
v17 = virtualinvoke v16.<java.lang.Boolean: boolean booleanValue()>();
specialinvoke v14.<io.netty.handler.codec.http2.DefaultHttp2FrameWriter: void <init>(io.netty.handler.codec.http2.Http2HeadersEncoder$SensitivityDetector,boolean)>(v15, v17);
label4:
v18 = v12;
v19 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2FrameLogger frameLogger>;
if v19 == null goto label5;
v20 = new io.netty.handler.codec.http2.Http2InboundFrameLogger;
v21 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2FrameLogger frameLogger>;
specialinvoke v20.<io.netty.handler.codec.http2.Http2InboundFrameLogger: void <init>(io.netty.handler.codec.http2.Http2FrameReader,io.netty.handler.codec.http2.Http2FrameLogger)>(v4, v21);
v9 = v20;
v22 = new io.netty.handler.codec.http2.Http2OutboundFrameLogger;
v23 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2FrameLogger frameLogger>;
specialinvoke v22.<io.netty.handler.codec.http2.Http2OutboundFrameLogger: void <init>(io.netty.handler.codec.http2.Http2FrameWriter,io.netty.handler.codec.http2.Http2FrameLogger)>(v12, v23);
v18 = v22;
label5:
v24 = new io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder;
specialinvoke v24.<io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder: void <init>(io.netty.handler.codec.http2.Http2Connection,io.netty.handler.codec.http2.Http2FrameWriter)>(v1, v18);
v25 = v24;
v26 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: boolean encoderEnforceMaxConcurrentStreams()>();
v27 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: int maxQueuedControlFrames>;
if v27 == 0 goto label6;
v28 = new io.netty.handler.codec.http2.Http2ControlFrameLimitEncoder;
v29 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: int maxQueuedControlFrames>;
specialinvoke v28.<io.netty.handler.codec.http2.Http2ControlFrameLimitEncoder: void <init>(io.netty.handler.codec.http2.Http2ConnectionEncoder,int)>(v24, v29);
v25 = v28;
label6:
if v26 == 0 goto label8;
v30 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Connection: boolean isServer()>();
if v30 == 0 goto label7;
interfaceinvoke v25.<io.netty.handler.codec.http2.Http2ConnectionEncoder: void close()>();
interfaceinvoke v9.<io.netty.handler.codec.http2.Http2FrameReader: void close()>();
v31 = new java.lang.IllegalArgumentException;
v32 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (boolean)>(v26) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("encoderEnforceMaxConcurrentStreams: \u0001 not supported for server");
specialinvoke v31.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v32);
throw v31;
label7:
v33 = new io.netty.handler.codec.http2.StreamBufferingEncoder;
specialinvoke v33.<io.netty.handler.codec.http2.StreamBufferingEncoder: void <init>(io.netty.handler.codec.http2.Http2ConnectionEncoder)>(v25);
v25 = v33;
label8:
v34 = new io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder;
v35 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2PromisedRequestVerifier promisedRequestVerifier()>();
v36 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: boolean isAutoAckSettingsFrame()>();
v37 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: boolean isAutoAckPingFrame()>();
specialinvoke v34.<io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder: void <init>(io.netty.handler.codec.http2.Http2Connection,io.netty.handler.codec.http2.Http2ConnectionEncoder,io.netty.handler.codec.http2.Http2FrameReader,io.netty.handler.codec.http2.Http2PromisedRequestVerifier,boolean,boolean)>(v1, v25, v9, v35, v36, v37);
v38 = specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2ConnectionHandler buildFromCodec(io.netty.handler.codec.http2.Http2ConnectionDecoder,io.netty.handler.codec.http2.Http2ConnectionEncoder)>(v34, v25);
return v38;
}
private io.netty.handler.codec.http2.Http2ConnectionHandler buildFromCodec(io.netty.handler.codec.http2.Http2ConnectionDecoder, io.netty.handler.codec.http2.Http2ConnectionEncoder)
{
java.lang.Throwable v7;
java.lang.IllegalStateException v8;
io.netty.handler.codec.http2.Http2EmptyDataFrameConnectionDecoder v4;
io.netty.handler.codec.http2.Http2ConnectionEncoder v2;
long v9;
io.netty.handler.codec.http2.Http2ConnectionHandler v6;
io.netty.handler.codec.http2.Http2FrameListener v11, v13;
io.netty.handler.codec.http2.Http2ConnectionDecoder v1, v10, v12;
io.netty.handler.codec.http2.Http2Settings v5;
int v3;
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 := @parameter0: io.netty.handler.codec.http2.Http2ConnectionDecoder;
v2 := @parameter1: io.netty.handler.codec.http2.Http2ConnectionEncoder;
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: int decoderEnforceMaxConsecutiveEmptyDataFrames()>();
if v3 <= 0 goto label1;
v4 = new io.netty.handler.codec.http2.Http2EmptyDataFrameConnectionDecoder;
specialinvoke v4.<io.netty.handler.codec.http2.Http2EmptyDataFrameConnectionDecoder: void <init>(io.netty.handler.codec.http2.Http2ConnectionDecoder,int)>(v1, v3);
v1 = v4;
label1:
v5 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2Settings initialSettings>;
v6 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2ConnectionHandler build(io.netty.handler.codec.http2.Http2ConnectionDecoder,io.netty.handler.codec.http2.Http2ConnectionEncoder,io.netty.handler.codec.http2.Http2Settings)>(v1, v2, v5);
label2:
goto label4;
label3:
v7 := @caughtexception;
interfaceinvoke v2.<io.netty.handler.codec.http2.Http2ConnectionEncoder: void close()>();
interfaceinvoke v1.<io.netty.handler.codec.http2.Http2ConnectionDecoder: void close()>();
v8 = new java.lang.IllegalStateException;
specialinvoke v8.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("failed to build an Http2ConnectionHandler", v7);
throw v8;
label4:
v9 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: long gracefulShutdownTimeoutMillis>;
virtualinvoke v6.<io.netty.handler.codec.http2.Http2ConnectionHandler: void gracefulShutdownTimeoutMillis(long)>(v9);
v10 = virtualinvoke v6.<io.netty.handler.codec.http2.Http2ConnectionHandler: io.netty.handler.codec.http2.Http2ConnectionDecoder decoder()>();
v11 = interfaceinvoke v10.<io.netty.handler.codec.http2.Http2ConnectionDecoder: io.netty.handler.codec.http2.Http2FrameListener frameListener()>();
if v11 != null goto label5;
v12 = virtualinvoke v6.<io.netty.handler.codec.http2.Http2ConnectionHandler: io.netty.handler.codec.http2.Http2ConnectionDecoder decoder()>();
v13 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2FrameListener frameListener>;
interfaceinvoke v12.<io.netty.handler.codec.http2.Http2ConnectionDecoder: void frameListener(io.netty.handler.codec.http2.Http2FrameListener)>(v13);
label5:
return v6;
catch java.lang.Throwable from label1 to label2 with label3;
}
protected abstract io.netty.handler.codec.http2.Http2ConnectionHandler build(io.netty.handler.codec.http2.Http2ConnectionDecoder, io.netty.handler.codec.http2.Http2ConnectionEncoder, io.netty.handler.codec.http2.Http2Settings) throws java.lang.Exception;
protected final io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder self()
{
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
return v0;
}
private void enforceNonCodecConstraints(java.lang.String)
{
io.netty.handler.codec.http2.Http2ConnectionEncoder v3;
io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder v0;
java.lang.String v1;
io.netty.handler.codec.http2.Http2ConnectionDecoder v2;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2ConnectionDecoder decoder>;
staticinvoke <io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: void enforceConstraint(java.lang.String,java.lang.String,java.lang.Object)>(v1, "server/connection", v2);
v3 = v0.<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2ConnectionEncoder encoder>;
staticinvoke <io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: void enforceConstraint(java.lang.String,java.lang.String,java.lang.Object)>(v1, "server/connection", v3);
return;
}
private static void enforceConstraint(java.lang.String, java.lang.String, java.lang.Object)
{
java.lang.IllegalStateException v3;
java.lang.Object v2;
java.lang.String v0, v1, v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.Object;
if v2 == null goto label1;
v3 = new java.lang.IllegalStateException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v0, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001() cannot be called because \u0001() has been called already.");
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v4);
throw v3;
label1:
return;
}
static void <clinit>()
{
java.lang.Class v0;
io.netty.handler.codec.http2.Http2HeadersEncoder$SensitivityDetector v3;
boolean v1, v2;
v0 = class "Lio/netty/handler/codec/http2/AbstractHttp2ConnectionHandlerBuilder;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: boolean $assertionsDisabled> = v2;
v3 = <io.netty.handler.codec.http2.Http2HeadersEncoder: io.netty.handler.codec.http2.Http2HeadersEncoder$SensitivityDetector NEVER_SENSITIVE>;
<io.netty.handler.codec.http2.AbstractHttp2ConnectionHandlerBuilder: io.netty.handler.codec.http2.Http2HeadersEncoder$SensitivityDetector DEFAULT_HEADER_SENSITIVITY_DETECTOR> = v3;
return;
}
}