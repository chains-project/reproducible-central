abstract class io.netty.handler.codec.http2.AbstractHttp2StreamChannel extends io.netty.util.DefaultAttributeMap implements io.netty.handler.codec.http2.Http2StreamChannel
{
static final io.netty.handler.codec.http2.Http2FrameStreamVisitor WRITABLE_VISITOR;
private static final io.netty.util.internal.logging.InternalLogger logger;
private static final io.netty.channel.ChannelMetadata METADATA;
private static final int MIN_HTTP2_FRAME_SIZE;
private static final java.util.concurrent.atomic.AtomicLongFieldUpdater TOTAL_PENDING_SIZE_UPDATER;
private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater UNWRITABLE_UPDATER;
private final io.netty.channel.ChannelFutureListener windowUpdateFrameWriteListener;
private final io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2StreamChannelConfig config;
private final io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe unsafe;
private final io.netty.channel.ChannelId channelId;
private final io.netty.channel.ChannelPipeline pipeline;
private final io.netty.handler.codec.http2.Http2FrameCodec$DefaultHttp2FrameStream stream;
private final io.netty.channel.ChannelPromise closePromise;
private volatile boolean registered;
private volatile long totalPendingSize;
private volatile int unwritable;
private java.lang.Runnable fireChannelWritabilityChangedTask;
private boolean outboundClosed;
private int flowControlledBytes;
private io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus readStatus;
private java.util.Queue inboundBuffer;
private boolean firstFrameWritten;
private boolean readCompletePending;
static final boolean $assertionsDisabled;
private static void windowUpdateFrameWriteComplete(io.netty.channel.ChannelFuture, io.netty.channel.Channel)
{
java.lang.Throwable v2, v4;
io.netty.channel.ChannelPipeline v5;
io.netty.channel.Channel$Unsafe v6, v7;
io.netty.channel.ChannelFuture v0;
io.netty.channel.Channel v1;
io.netty.channel.ChannelPromise v8;
boolean v3;
v0 := @parameter0: io.netty.channel.ChannelFuture;
v1 := @parameter1: io.netty.channel.Channel;
v2 = interfaceinvoke v0.<io.netty.channel.ChannelFuture: java.lang.Throwable cause()>();
if v2 == null goto label2;
v3 = v2 instanceof io.netty.handler.codec.http2.Http2FrameStreamException;
if v3 == 0 goto label1;
v4 = virtualinvoke v2.<java.lang.Throwable: java.lang.Throwable getCause()>();
if v4 == null goto label1;
v2 = v4;
label1:
v5 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelPipeline pipeline()>();
interfaceinvoke v5.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireExceptionCaught(java.lang.Throwable)>(v2);
v6 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.Channel$Unsafe unsafe()>();
v7 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.Channel$Unsafe unsafe()>();
v8 = interfaceinvoke v7.<io.netty.channel.Channel$Unsafe: io.netty.channel.ChannelPromise voidPromise()>();
interfaceinvoke v6.<io.netty.channel.Channel$Unsafe: void close(io.netty.channel.ChannelPromise)>(v8);
label2:
return;
}
void <init>(io.netty.handler.codec.http2.Http2FrameCodec$DefaultHttp2FrameStream, int, io.netty.channel.ChannelHandler)
{
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v6;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
io.netty.channel.ChannelId v13;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$2 v4;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$3 v8;
io.netty.channel.ChannelPromise v10;
int v2;
io.netty.handler.codec.http2.Http2FrameCodec$DefaultHttp2FrameStream v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2StreamChannelConfig v5;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus v7;
io.netty.channel.ChannelPipeline v14, v9;
io.netty.channel.ChannelHandler[] v15;
io.netty.channel.Channel v12;
io.netty.channel.ChannelHandler v3;
io.netty.handler.codec.http2.Http2StreamChannelId v11;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 := @parameter0: io.netty.handler.codec.http2.Http2FrameCodec$DefaultHttp2FrameStream;
v2 := @parameter1: int;
v3 := @parameter2: io.netty.channel.ChannelHandler;
specialinvoke v0.<io.netty.util.DefaultAttributeMap: void <init>()>();
v4 = new io.netty.handler.codec.http2.AbstractHttp2StreamChannel$2;
specialinvoke v4.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$2: void <init>(io.netty.handler.codec.http2.AbstractHttp2StreamChannel)>(v0);
v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelFutureListener windowUpdateFrameWriteListener> = v4;
v5 = new io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2StreamChannelConfig;
specialinvoke v5.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2StreamChannelConfig: void <init>(io.netty.channel.Channel)>(v0);
v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2StreamChannelConfig config> = v5;
v6 = new io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe;
specialinvoke v6.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: void <init>(io.netty.handler.codec.http2.AbstractHttp2StreamChannel)>(v0);
v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe unsafe> = v6;
v7 = <io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus IDLE>;
v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus readStatus> = v7;
v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.Http2FrameCodec$DefaultHttp2FrameStream stream> = v1;
v1.<io.netty.handler.codec.http2.Http2FrameCodec$DefaultHttp2FrameStream: io.netty.channel.Channel attachment> = v0;
v8 = new io.netty.handler.codec.http2.AbstractHttp2StreamChannel$3;
specialinvoke v8.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$3: void <init>(io.netty.handler.codec.http2.AbstractHttp2StreamChannel,io.netty.channel.Channel)>(v0, v0);
v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPipeline pipeline> = v8;
v9 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPipeline pipeline>;
v10 = interfaceinvoke v9.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPromise newPromise()>();
v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPromise closePromise> = v10;
v11 = new io.netty.handler.codec.http2.Http2StreamChannelId;
v12 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.Channel parent()>();
v13 = interfaceinvoke v12.<io.netty.channel.Channel: io.netty.channel.ChannelId id()>();
specialinvoke v11.<io.netty.handler.codec.http2.Http2StreamChannelId: void <init>(io.netty.channel.ChannelId,int)>(v13, v2);
v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelId channelId> = v11;
if v3 == null goto label1;
v14 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPipeline pipeline>;
v15 = newarray (io.netty.channel.ChannelHandler)[1];
v15[0] = v3;
interfaceinvoke v14.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline addLast(io.netty.channel.ChannelHandler[])>(v15);
label1:
return;
}
private void incrementPendingOutboundBytes(long, boolean)
{
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
java.util.concurrent.atomic.AtomicLongFieldUpdater v4;
long v1, v5;
byte v3, v8;
io.netty.channel.ChannelConfig v6;
int v7;
boolean v2;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 := @parameter0: long;
v2 := @parameter1: boolean;
v3 = v1 cmp 0L;
if v3 != 0 goto label1;
return;
label1:
v4 = <io.netty.handler.codec.http2.AbstractHttp2StreamChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater TOTAL_PENDING_SIZE_UPDATER>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long addAndGet(java.lang.Object,long)>(v0, v1);
v6 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelConfig config()>();
v7 = interfaceinvoke v6.<io.netty.channel.ChannelConfig: int getWriteBufferHighWaterMark()>();
v8 = v5 cmp v7;
if v8 <= 0 goto label2;
specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: void setUnwritable(boolean)>(v2);
label2:
return;
}
private void decrementPendingOutboundBytes(long, boolean)
{
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
java.util.concurrent.atomic.AtomicLongFieldUpdater v4;
long v1, v5, v6;
io.netty.channel.Channel v10;
byte v3, v9;
io.netty.channel.ChannelConfig v7;
int v8;
boolean v11, v2;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 := @parameter0: long;
v2 := @parameter1: boolean;
v3 = v1 cmp 0L;
if v3 != 0 goto label1;
return;
label1:
v4 = <io.netty.handler.codec.http2.AbstractHttp2StreamChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater TOTAL_PENDING_SIZE_UPDATER>;
v5 = neg v1;
v6 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicLongFieldUpdater: long addAndGet(java.lang.Object,long)>(v0, v5);
v7 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelConfig config()>();
v8 = interfaceinvoke v7.<io.netty.channel.ChannelConfig: int getWriteBufferLowWaterMark()>();
v9 = v6 cmp v8;
if v9 >= 0 goto label2;
v10 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.Channel parent()>();
v11 = interfaceinvoke v10.<io.netty.channel.Channel: boolean isWritable()>();
if v11 == 0 goto label2;
specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: void setWritable(boolean)>(v2);
label2:
return;
}
final void trySetWritable()
{
byte v4;
io.netty.channel.ChannelConfig v2;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
int v3;
long v1;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: long totalPendingSize>;
v2 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelConfig config()>();
v3 = interfaceinvoke v2.<io.netty.channel.ChannelConfig: int getWriteBufferLowWaterMark()>();
v4 = v1 cmp v3;
if v4 >= 0 goto label1;
specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: void setWritable(boolean)>(0);
label1:
return;
}
private void setWritable(boolean)
{
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v5;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
int v2, v3, v4;
boolean v1, v6;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 := @parameter0: boolean;
label1:
v2 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: int unwritable>;
v3 = (int) -2;
v4 = v2 & v3;
v5 = <io.netty.handler.codec.http2.AbstractHttp2StreamChannel: java.util.concurrent.atomic.AtomicIntegerFieldUpdater UNWRITABLE_UPDATER>;
v6 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(v0, v2, v4);
if v6 == 0 goto label1;
if v2 == 0 goto label2;
if v4 != 0 goto label2;
specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: void fireChannelWritabilityChanged(boolean)>(v1);
label2:
return;
}
private void setUnwritable(boolean)
{
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v4;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
int v2, v3;
boolean v1, v5;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 := @parameter0: boolean;
label1:
v2 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: int unwritable>;
v3 = v2 | 1;
v4 = <io.netty.handler.codec.http2.AbstractHttp2StreamChannel: java.util.concurrent.atomic.AtomicIntegerFieldUpdater UNWRITABLE_UPDATER>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(v0, v2, v3);
if v5 == 0 goto label1;
if v2 != 0 goto label2;
specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: void fireChannelWritabilityChanged(boolean)>(v1);
label2:
return;
}
private void fireChannelWritabilityChanged(boolean)
{
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
io.netty.channel.ChannelPipeline v2;
io.netty.channel.EventLoop v5;
java.lang.Runnable v3;
boolean v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$4 v4;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 := @parameter0: boolean;
v2 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPipeline pipeline()>();
if v1 == 0 goto label2;
v3 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: java.lang.Runnable fireChannelWritabilityChangedTask>;
if v3 != null goto label1;
v4 = new io.netty.handler.codec.http2.AbstractHttp2StreamChannel$4;
specialinvoke v4.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$4: void <init>(io.netty.handler.codec.http2.AbstractHttp2StreamChannel,io.netty.channel.ChannelPipeline)>(v0, v2);
v3 = v4;
v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: java.lang.Runnable fireChannelWritabilityChangedTask> = v4;
label1:
v5 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.EventLoop eventLoop()>();
interfaceinvoke v5.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>(v3);
goto label3;
label2:
interfaceinvoke v2.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireChannelWritabilityChanged()>();
label3:
return;
}
public io.netty.handler.codec.http2.Http2FrameStream stream()
{
io.netty.handler.codec.http2.Http2FrameCodec$DefaultHttp2FrameStream v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.Http2FrameCodec$DefaultHttp2FrameStream stream>;
return v1;
}
void closeOutbound()
{
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: boolean outboundClosed> = 1;
return;
}
void streamClosed()
{
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v1, v2;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe unsafe>;
virtualinvoke v1.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: void readEOS()>();
v2 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe unsafe>;
virtualinvoke v2.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: void doBeginRead()>();
return;
}
public io.netty.channel.ChannelMetadata metadata()
{
io.netty.channel.ChannelMetadata v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 = <io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelMetadata METADATA>;
return v1;
}
public io.netty.channel.ChannelConfig config()
{
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2StreamChannelConfig v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2StreamChannelConfig config>;
return v1;
}
public boolean isOpen()
{
io.netty.channel.ChannelPromise v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
boolean v2, v3;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPromise closePromise>;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelPromise: boolean isDone()>();
if v2 != 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isActive()
{
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
boolean v1;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: boolean isOpen()>();
return v1;
}
public boolean isWritable()
{
int v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
boolean v2;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: int unwritable>;
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public io.netty.channel.ChannelId id()
{
io.netty.channel.ChannelId v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelId channelId>;
return v1;
}
public io.netty.channel.EventLoop eventLoop()
{
io.netty.channel.Channel v1;
io.netty.channel.EventLoop v2;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.Channel parent()>();
v2 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.EventLoop eventLoop()>();
return v2;
}
public io.netty.channel.Channel parent()
{
io.netty.channel.Channel v2;
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelHandlerContext parentContext()>();
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
return v2;
}
public boolean isRegistered()
{
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
boolean v1;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: boolean registered>;
return v1;
}
public java.net.SocketAddress localAddress()
{
io.netty.channel.Channel v1;
java.net.SocketAddress v2;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.Channel parent()>();
v2 = interfaceinvoke v1.<io.netty.channel.Channel: java.net.SocketAddress localAddress()>();
return v2;
}
public java.net.SocketAddress remoteAddress()
{
io.netty.channel.Channel v1;
java.net.SocketAddress v2;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.Channel parent()>();
v2 = interfaceinvoke v1.<io.netty.channel.Channel: java.net.SocketAddress remoteAddress()>();
return v2;
}
public io.netty.channel.ChannelFuture closeFuture()
{
io.netty.channel.ChannelPromise v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPromise closePromise>;
return v1;
}
public long bytesBeforeUnwritable()
{
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
long v3, v4, v7;
byte v5;
io.netty.channel.ChannelConfig v1;
int v2;
boolean v6;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelConfig config()>();
v2 = interfaceinvoke v1.<io.netty.channel.ChannelConfig: int getWriteBufferHighWaterMark()>();
v3 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: long totalPendingSize>;
v4 = v2 - v3;
v5 = v4 cmp 0L;
if v5 <= 0 goto label3;
v6 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: boolean isWritable()>();
if v6 == 0 goto label1;
v7 = v4;
goto label2;
label1:
v7 = 0L;
label2:
return v7;
label3:
return 0L;
}
public long bytesBeforeWritable()
{
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
long v1, v4, v7;
byte v5;
io.netty.channel.ChannelConfig v2;
int v3;
boolean v6;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: long totalPendingSize>;
v2 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelConfig config()>();
v3 = interfaceinvoke v2.<io.netty.channel.ChannelConfig: int getWriteBufferLowWaterMark()>();
v4 = v1 - v3;
v5 = v4 cmp 0L;
if v5 <= 0 goto label3;
v6 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: boolean isWritable()>();
if v6 == 0 goto label1;
v7 = 0L;
goto label2;
label1:
v7 = v4;
label2:
return v7;
label3:
return 0L;
}
public io.netty.channel.Channel$Unsafe unsafe()
{
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe unsafe>;
return v1;
}
public io.netty.channel.ChannelPipeline pipeline()
{
io.netty.channel.ChannelPipeline v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPipeline pipeline>;
return v1;
}
public io.netty.buffer.ByteBufAllocator alloc()
{
io.netty.channel.ChannelConfig v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
io.netty.buffer.ByteBufAllocator v2;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelConfig config()>();
v2 = interfaceinvoke v1.<io.netty.channel.ChannelConfig: io.netty.buffer.ByteBufAllocator getAllocator()>();
return v2;
}
public io.netty.channel.Channel read()
{
io.netty.channel.ChannelPipeline v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPipeline pipeline()>();
interfaceinvoke v1.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelOutboundInvoker read()>();
return v0;
}
public io.netty.channel.Channel flush()
{
io.netty.channel.ChannelPipeline v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPipeline pipeline()>();
interfaceinvoke v1.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline flush()>();
return v0;
}
public io.netty.channel.ChannelFuture bind(java.net.SocketAddress)
{
java.net.SocketAddress v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
io.netty.channel.ChannelPipeline v2;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 := @parameter0: java.net.SocketAddress;
v2 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPipeline pipeline()>();
v3 = interfaceinvoke v2.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelFuture bind(java.net.SocketAddress)>(v1);
return v3;
}
public io.netty.channel.ChannelFuture connect(java.net.SocketAddress)
{
java.net.SocketAddress v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
io.netty.channel.ChannelPipeline v2;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 := @parameter0: java.net.SocketAddress;
v2 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPipeline pipeline()>();
v3 = interfaceinvoke v2.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelFuture connect(java.net.SocketAddress)>(v1);
return v3;
}
public io.netty.channel.ChannelFuture connect(java.net.SocketAddress, java.net.SocketAddress)
{
java.net.SocketAddress v1, v2;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
io.netty.channel.ChannelPipeline v3;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 := @parameter0: java.net.SocketAddress;
v2 := @parameter1: java.net.SocketAddress;
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPipeline pipeline()>();
v4 = interfaceinvoke v3.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress)>(v1, v2);
return v4;
}
public io.netty.channel.ChannelFuture disconnect()
{
io.netty.channel.ChannelPipeline v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
io.netty.channel.ChannelFuture v2;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPipeline pipeline()>();
v2 = interfaceinvoke v1.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelFuture disconnect()>();
return v2;
}
public io.netty.channel.ChannelFuture close()
{
io.netty.channel.ChannelPipeline v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
io.netty.channel.ChannelFuture v2;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPipeline pipeline()>();
v2 = interfaceinvoke v1.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelFuture close()>();
return v2;
}
public io.netty.channel.ChannelFuture deregister()
{
io.netty.channel.ChannelPipeline v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
io.netty.channel.ChannelFuture v2;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPipeline pipeline()>();
v2 = interfaceinvoke v1.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelFuture deregister()>();
return v2;
}
public io.netty.channel.ChannelFuture bind(java.net.SocketAddress, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v2;
java.net.SocketAddress v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
io.netty.channel.ChannelPipeline v3;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 := @parameter0: java.net.SocketAddress;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPipeline pipeline()>();
v4 = interfaceinvoke v3.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelFuture bind(java.net.SocketAddress,io.netty.channel.ChannelPromise)>(v1, v2);
return v4;
}
public io.netty.channel.ChannelFuture connect(java.net.SocketAddress, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v2;
java.net.SocketAddress v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
io.netty.channel.ChannelPipeline v3;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 := @parameter0: java.net.SocketAddress;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPipeline pipeline()>();
v4 = interfaceinvoke v3.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelFuture connect(java.net.SocketAddress,io.netty.channel.ChannelPromise)>(v1, v2);
return v4;
}
public io.netty.channel.ChannelFuture connect(java.net.SocketAddress, java.net.SocketAddress, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v3;
java.net.SocketAddress v1, v2;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
io.netty.channel.ChannelPipeline v4;
io.netty.channel.ChannelFuture v5;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 := @parameter0: java.net.SocketAddress;
v2 := @parameter1: java.net.SocketAddress;
v3 := @parameter2: io.netty.channel.ChannelPromise;
v4 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPipeline pipeline()>();
v5 = interfaceinvoke v4.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelFuture connect(java.net.SocketAddress,java.net.SocketAddress,io.netty.channel.ChannelPromise)>(v1, v2, v3);
return v5;
}
public io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
io.netty.channel.ChannelPipeline v2;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPipeline pipeline()>();
v3 = interfaceinvoke v2.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelFuture disconnect(io.netty.channel.ChannelPromise)>(v1);
return v3;
}
public io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
io.netty.channel.ChannelPipeline v2;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPipeline pipeline()>();
v3 = interfaceinvoke v2.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelFuture close(io.netty.channel.ChannelPromise)>(v1);
return v3;
}
public io.netty.channel.ChannelFuture deregister(io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
io.netty.channel.ChannelPipeline v2;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 := @parameter0: io.netty.channel.ChannelPromise;
v2 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPipeline pipeline()>();
v3 = interfaceinvoke v2.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelFuture deregister(io.netty.channel.ChannelPromise)>(v1);
return v3;
}
public io.netty.channel.ChannelFuture write(java.lang.Object)
{
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
java.lang.Object v1;
io.netty.channel.ChannelPipeline v2;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPipeline pipeline()>();
v3 = interfaceinvoke v2.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelFuture write(java.lang.Object)>(v1);
return v3;
}
public io.netty.channel.ChannelFuture write(java.lang.Object, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v2;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
java.lang.Object v1;
io.netty.channel.ChannelPipeline v3;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPipeline pipeline()>();
v4 = interfaceinvoke v3.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)>(v1, v2);
return v4;
}
public io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelPromise v2;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
java.lang.Object v1;
io.netty.channel.ChannelPipeline v3;
io.netty.channel.ChannelFuture v4;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPipeline pipeline()>();
v4 = interfaceinvoke v3.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object,io.netty.channel.ChannelPromise)>(v1, v2);
return v4;
}
public io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object)
{
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
java.lang.Object v1;
io.netty.channel.ChannelPipeline v2;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPipeline pipeline()>();
v3 = interfaceinvoke v2.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object)>(v1);
return v3;
}
public io.netty.channel.ChannelPromise newPromise()
{
io.netty.channel.ChannelPipeline v1;
io.netty.channel.ChannelPromise v2;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPipeline pipeline()>();
v2 = interfaceinvoke v1.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPromise newPromise()>();
return v2;
}
public io.netty.channel.ChannelProgressivePromise newProgressivePromise()
{
io.netty.channel.ChannelProgressivePromise v2;
io.netty.channel.ChannelPipeline v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPipeline pipeline()>();
v2 = interfaceinvoke v1.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelProgressivePromise newProgressivePromise()>();
return v2;
}
public io.netty.channel.ChannelFuture newSucceededFuture()
{
io.netty.channel.ChannelPipeline v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
io.netty.channel.ChannelFuture v2;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPipeline pipeline()>();
v2 = interfaceinvoke v1.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelFuture newSucceededFuture()>();
return v2;
}
public io.netty.channel.ChannelFuture newFailedFuture(java.lang.Throwable)
{
java.lang.Throwable v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
io.netty.channel.ChannelPipeline v2;
io.netty.channel.ChannelFuture v3;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 := @parameter0: java.lang.Throwable;
v2 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPipeline pipeline()>();
v3 = interfaceinvoke v2.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelFuture newFailedFuture(java.lang.Throwable)>(v1);
return v3;
}
public io.netty.channel.ChannelPromise voidPromise()
{
io.netty.channel.ChannelPipeline v1;
io.netty.channel.ChannelPromise v2;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelPipeline pipeline()>();
v2 = interfaceinvoke v1.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPromise voidPromise()>();
return v2;
}
public int hashCode()
{
int v2;
io.netty.channel.ChannelId v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelId id()>();
v2 = virtualinvoke v1.<java.lang.Object: int hashCode()>();
return v2;
}
public boolean equals(java.lang.Object)
{
java.lang.Object v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
boolean v2;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public int compareTo(io.netty.channel.Channel)
{
io.netty.channel.Channel v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
int v4;
io.netty.channel.ChannelId v2, v3;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 := @parameter0: io.netty.channel.Channel;
if v0 != v1 goto label1;
return 0;
label1:
v2 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelId id()>();
v3 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelId id()>();
v4 = interfaceinvoke v2.<io.netty.channel.ChannelId: int compareTo(java.lang.Object)>(v3);
return v4;
}
public java.lang.String toString()
{
io.netty.channel.Channel v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
io.netty.handler.codec.http2.Http2FrameCodec$DefaultHttp2FrameStream v3;
java.lang.String v2, v4;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.Channel parent()>();
v2 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
v3 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.Http2FrameCodec$DefaultHttp2FrameStream stream>;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,io.netty.handler.codec.http2.Http2FrameCodec$DefaultHttp2FrameStream)>(v2, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001(H2 - \u0001)");
return v4;
}
void fireChildRead(io.netty.handler.codec.http2.Http2Frame)
{
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v14, v16, v18;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
java.lang.AssertionError v13, v5;
io.netty.handler.codec.http2.Http2Frame v1;
boolean v12, v17, v2, v4, v6, v9;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus v7, v8;
io.netty.channel.EventLoop v3;
io.netty.channel.RecvByteBufAllocator$Handle v15;
java.util.Queue v10, v11, v19, v21;
java.util.ArrayDeque v20;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Frame;
v2 = <io.netty.handler.codec.http2.AbstractHttp2StreamChannel: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.EventLoop eventLoop()>();
v4 = interfaceinvoke v3.<io.netty.channel.EventLoop: boolean inEventLoop()>();
if v4 != 0 goto label1;
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label1:
v6 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: boolean isActive()>();
if v6 != 0 goto label2;
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v1);
goto label7;
label2:
v7 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus readStatus>;
v8 = <io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus IDLE>;
if v7 == v8 goto label5;
v9 = <io.netty.handler.codec.http2.AbstractHttp2StreamChannel: boolean $assertionsDisabled>;
if v9 != 0 goto label3;
v10 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: java.util.Queue inboundBuffer>;
if v10 == null goto label3;
v11 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: java.util.Queue inboundBuffer>;
v12 = interfaceinvoke v11.<java.util.Queue: boolean isEmpty()>();
if v12 != 0 goto label3;
v13 = new java.lang.AssertionError;
specialinvoke v13.<java.lang.AssertionError: void <init>()>();
throw v13;
label3:
v14 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe unsafe>;
v15 = virtualinvoke v14.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.channel.RecvByteBufAllocator$Handle recvBufAllocHandle()>();
v16 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe unsafe>;
virtualinvoke v16.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: void doRead0(io.netty.handler.codec.http2.Http2Frame,io.netty.channel.RecvByteBufAllocator$Handle)>(v1, v15);
v17 = interfaceinvoke v15.<io.netty.channel.RecvByteBufAllocator$Handle: boolean continueReading()>();
if v17 == 0 goto label4;
specialinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: void maybeAddChannelToReadCompletePendingQueue()>();
goto label7;
label4:
v18 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe unsafe>;
virtualinvoke v18.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: void notifyReadComplete(io.netty.channel.RecvByteBufAllocator$Handle,boolean)>(v15, 1);
goto label7;
label5:
v19 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: java.util.Queue inboundBuffer>;
if v19 != null goto label6;
v20 = new java.util.ArrayDeque;
specialinvoke v20.<java.util.ArrayDeque: void <init>(int)>(4);
v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: java.util.Queue inboundBuffer> = v20;
label6:
v21 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: java.util.Queue inboundBuffer>;
interfaceinvoke v21.<java.util.Queue: boolean add(java.lang.Object)>(v1);
label7:
return;
}
void fireChildReadComplete()
{
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v10, v11;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus v6, v7;
java.lang.AssertionError v4, v9;
io.netty.channel.EventLoop v2;
io.netty.channel.RecvByteBufAllocator$Handle v12;
boolean v1, v3, v5, v8;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 = <io.netty.handler.codec.http2.AbstractHttp2StreamChannel: boolean $assertionsDisabled>;
if v1 != 0 goto label1;
v2 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.EventLoop eventLoop()>();
v3 = interfaceinvoke v2.<io.netty.channel.EventLoop: boolean inEventLoop()>();
if v3 != 0 goto label1;
v4 = new java.lang.AssertionError;
specialinvoke v4.<java.lang.AssertionError: void <init>()>();
throw v4;
label1:
v5 = <io.netty.handler.codec.http2.AbstractHttp2StreamChannel: boolean $assertionsDisabled>;
if v5 != 0 goto label2;
v6 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus readStatus>;
v7 = <io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$ReadStatus IDLE>;
if v6 != v7 goto label2;
v8 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: boolean readCompletePending>;
if v8 == 0 goto label2;
v9 = new java.lang.AssertionError;
specialinvoke v9.<java.lang.AssertionError: void <init>()>();
throw v9;
label2:
v10 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe unsafe>;
v11 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe unsafe>;
v12 = virtualinvoke v11.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.channel.RecvByteBufAllocator$Handle recvBufAllocHandle()>();
virtualinvoke v10.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: void notifyReadComplete(io.netty.channel.RecvByteBufAllocator$Handle,boolean)>(v12, 0);
return;
}
final void closeWithError(io.netty.handler.codec.http2.Http2Error)
{
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe v6, v7;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
java.lang.AssertionError v5;
io.netty.channel.EventLoop v3;
io.netty.channel.ChannelPromise v8;
io.netty.handler.codec.http2.Http2Error v1;
boolean v2, v4;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Error;
v2 = <io.netty.handler.codec.http2.AbstractHttp2StreamChannel: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.EventLoop eventLoop()>();
v4 = interfaceinvoke v3.<io.netty.channel.EventLoop: boolean inEventLoop()>();
if v4 != 0 goto label1;
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label1:
v6 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe unsafe>;
v7 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe unsafe>;
v8 = virtualinvoke v7.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: io.netty.channel.ChannelPromise voidPromise()>();
virtualinvoke v6.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$Http2ChannelUnsafe: void close(io.netty.channel.ChannelPromise,io.netty.handler.codec.http2.Http2Error)>(v8, v1);
return;
}
private void maybeAddChannelToReadCompletePendingQueue()
{
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
boolean v1;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 = v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: boolean readCompletePending>;
if v1 != 0 goto label1;
v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: boolean readCompletePending> = 1;
virtualinvoke v0.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: void addChannelToReadCompletePendingQueue()>();
label1:
return;
}
protected void flush0(io.netty.channel.ChannelHandlerContext)
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext flush()>();
return;
}
protected io.netty.channel.ChannelFuture write0(io.netty.channel.ChannelHandlerContext, java.lang.Object)
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelPromise v3;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel v0;
java.lang.Object v2;
v0 := @this: io.netty.handler.codec.http2.AbstractHttp2StreamChannel;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPromise newPromise()>();
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)>(v2, v3);
return v3;
}
protected abstract boolean isParentReadInProgress();
protected abstract void addChannelToReadCompletePendingQueue();
protected abstract io.netty.channel.ChannelHandlerContext parentContext();
static void <clinit>()
{
java.util.concurrent.atomic.AtomicIntegerFieldUpdater v7;
java.util.concurrent.atomic.AtomicLongFieldUpdater v6;
io.netty.handler.codec.http2.AbstractHttp2StreamChannel$1 v3;
io.netty.util.internal.logging.InternalLogger v4;
java.lang.Class v0;
io.netty.channel.ChannelMetadata v5;
boolean v1, v2;
v0 = class "Lio/netty/handler/codec/http2/AbstractHttp2StreamChannel;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: boolean $assertionsDisabled> = v2;
v3 = new io.netty.handler.codec.http2.AbstractHttp2StreamChannel$1;
specialinvoke v3.<io.netty.handler.codec.http2.AbstractHttp2StreamChannel$1: void <init>()>();
<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.handler.codec.http2.Http2FrameStreamVisitor WRITABLE_VISITOR> = v3;
v4 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/handler/codec/http2/AbstractHttp2StreamChannel;");
<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.util.internal.logging.InternalLogger logger> = v4;
v5 = new io.netty.channel.ChannelMetadata;
specialinvoke v5.<io.netty.channel.ChannelMetadata: void <init>(boolean,int)>(0, 16);
<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: io.netty.channel.ChannelMetadata METADATA> = v5;
v6 = staticinvoke <java.util.concurrent.atomic.AtomicLongFieldUpdater: java.util.concurrent.atomic.AtomicLongFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lio/netty/handler/codec/http2/AbstractHttp2StreamChannel;", "totalPendingSize");
<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: java.util.concurrent.atomic.AtomicLongFieldUpdater TOTAL_PENDING_SIZE_UPDATER> = v6;
v7 = staticinvoke <java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lio/netty/handler/codec/http2/AbstractHttp2StreamChannel;", "unwritable");
<io.netty.handler.codec.http2.AbstractHttp2StreamChannel: java.util.concurrent.atomic.AtomicIntegerFieldUpdater UNWRITABLE_UPDATER> = v7;
return;
}
}