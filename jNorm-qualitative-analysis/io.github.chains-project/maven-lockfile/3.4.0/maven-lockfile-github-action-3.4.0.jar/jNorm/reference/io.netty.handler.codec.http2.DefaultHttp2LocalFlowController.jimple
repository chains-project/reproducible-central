public class io.netty.handler.codec.http2.DefaultHttp2LocalFlowController extends java.lang.Object implements io.netty.handler.codec.http2.Http2LocalFlowController
{
public static final float DEFAULT_WINDOW_UPDATE_RATIO;
private final io.netty.handler.codec.http2.Http2Connection connection;
private final io.netty.handler.codec.http2.Http2Connection$PropertyKey stateKey;
private io.netty.handler.codec.http2.Http2FrameWriter frameWriter;
private io.netty.channel.ChannelHandlerContext ctx;
private float windowUpdateRatio;
private int initialWindowSize;
private static final io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState REDUCED_FLOW_STATE;
static final boolean $assertionsDisabled;
public void <init>(io.netty.handler.codec.http2.Http2Connection)
{
io.netty.handler.codec.http2.Http2Connection v1;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Connection;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: void <init>(io.netty.handler.codec.http2.Http2Connection,float,boolean)>(v1, 0.5F, 0);
return;
}
public void <init>(io.netty.handler.codec.http2.Http2Connection, float, boolean)
{
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$AutoRefillState v7;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController v0;
int v10, v13, v4;
io.netty.handler.codec.http2.Http2Stream v12, v14, v9;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState v11, v8;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$1 v16;
boolean v3;
io.netty.handler.codec.http2.Http2Connection v1;
io.netty.handler.codec.http2.Http2Connection$PropertyKey v15, v6;
float v2;
java.lang.Object v5;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Connection;
v2 := @parameter1: float;
v3 := @parameter2: boolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
v4 = (int) 65535;
v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: int initialWindowSize> = v4;
v5 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "connection");
v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.handler.codec.http2.Http2Connection connection> = v5;
virtualinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: void windowUpdateRatio(float)>(v2);
v6 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Connection$PropertyKey newKey()>();
v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.handler.codec.http2.Http2Connection$PropertyKey stateKey> = v6;
if v3 == 0 goto label1;
v7 = new io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$AutoRefillState;
v8 = v7;
v9 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Stream connectionStream()>();
v10 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: int initialWindowSize>;
specialinvoke v7.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$AutoRefillState: void <init>(io.netty.handler.codec.http2.DefaultHttp2LocalFlowController,io.netty.handler.codec.http2.Http2Stream,int)>(v0, v9, v10);
goto label2;
label1:
v11 = new io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState;
v8 = v11;
v12 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Stream connectionStream()>();
v13 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: int initialWindowSize>;
specialinvoke v11.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState: void <init>(io.netty.handler.codec.http2.DefaultHttp2LocalFlowController,io.netty.handler.codec.http2.Http2Stream,int)>(v0, v12, v13);
label2:
v14 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Stream connectionStream()>();
v15 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.handler.codec.http2.Http2Connection$PropertyKey stateKey>;
interfaceinvoke v14.<io.netty.handler.codec.http2.Http2Stream: java.lang.Object setProperty(io.netty.handler.codec.http2.Http2Connection$PropertyKey,java.lang.Object)>(v15, v8);
v16 = new io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$1;
specialinvoke v16.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$1: void <init>(io.netty.handler.codec.http2.DefaultHttp2LocalFlowController)>(v0);
interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Connection: void addListener(io.netty.handler.codec.http2.Http2Connection$Listener)>(v16);
return;
}
public io.netty.handler.codec.http2.DefaultHttp2LocalFlowController frameWriter(io.netty.handler.codec.http2.Http2FrameWriter)
{
io.netty.handler.codec.http2.Http2FrameWriter v1;
java.lang.Object v2;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController;
v1 := @parameter0: io.netty.handler.codec.http2.Http2FrameWriter;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "frameWriter");
v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.handler.codec.http2.Http2FrameWriter frameWriter> = v2;
return v0;
}
public void channelHandlerContext(io.netty.channel.ChannelHandlerContext)
{
io.netty.channel.ChannelHandlerContext v1;
java.lang.Object v2;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "ctx");
v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.channel.ChannelHandlerContext ctx> = v2;
return;
}
public void initialWindowSize(int) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.util.concurrent.EventExecutor v5;
java.lang.AssertionError v7;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$WindowUpdateVisitor v10;
io.netty.channel.ChannelHandlerContext v3, v4;
io.netty.handler.codec.http2.Http2Connection v11;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController v0;
int v1, v8, v9;
boolean v2, v6;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController;
v1 := @parameter0: int;
v2 = <io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
v3 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.channel.ChannelHandlerContext ctx>;
if v3 == null goto label1;
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.channel.ChannelHandlerContext ctx>;
v5 = interfaceinvoke v4.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v6 = interfaceinvoke v5.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v6 != 0 goto label1;
v7 = new java.lang.AssertionError;
specialinvoke v7.<java.lang.AssertionError: void <init>()>();
throw v7;
label1:
v8 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: int initialWindowSize>;
v9 = v1 - v8;
v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: int initialWindowSize> = v1;
v10 = new io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$WindowUpdateVisitor;
specialinvoke v10.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$WindowUpdateVisitor: void <init>(io.netty.handler.codec.http2.DefaultHttp2LocalFlowController,int)>(v0, v9);
v11 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.handler.codec.http2.Http2Connection connection>;
interfaceinvoke v11.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Stream forEachActiveStream(io.netty.handler.codec.http2.Http2StreamVisitor)>(v10);
virtualinvoke v10.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$WindowUpdateVisitor: void throwIfError()>();
return;
}
public int initialWindowSize()
{
int v1;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: int initialWindowSize>;
return v1;
}
public int windowSize(io.netty.handler.codec.http2.Http2Stream)
{
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState v2;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController v0;
int v3;
io.netty.handler.codec.http2.Http2Stream v1;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Stream;
v2 = specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState state(io.netty.handler.codec.http2.Http2Stream)>(v1);
v3 = interfaceinvoke v2.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState: int windowSize()>();
return v3;
}
public int initialWindowSize(io.netty.handler.codec.http2.Http2Stream)
{
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState v2;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController v0;
int v3;
io.netty.handler.codec.http2.Http2Stream v1;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Stream;
v2 = specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState state(io.netty.handler.codec.http2.Http2Stream)>(v1);
v3 = interfaceinvoke v2.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState: int initialWindowSize()>();
return v3;
}
public void incrementWindowSize(io.netty.handler.codec.http2.Http2Stream, int) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.util.concurrent.EventExecutor v6;
java.lang.AssertionError v8;
io.netty.channel.ChannelHandlerContext v4, v5;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState v9;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController v0;
int v2;
io.netty.handler.codec.http2.Http2Stream v1;
boolean v3, v7;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Stream;
v2 := @parameter1: int;
v3 = <io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: boolean $assertionsDisabled>;
if v3 != 0 goto label2;
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.channel.ChannelHandlerContext ctx>;
if v4 == null goto label1;
v5 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.channel.ChannelHandlerContext ctx>;
v6 = interfaceinvoke v5.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v7 = interfaceinvoke v6.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v7 != 0 goto label2;
label1:
v8 = new java.lang.AssertionError;
specialinvoke v8.<java.lang.AssertionError: void <init>()>();
throw v8;
label2:
v9 = specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState state(io.netty.handler.codec.http2.Http2Stream)>(v1);
interfaceinvoke v9.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState: void incrementInitialStreamWindow(int)>(v2);
interfaceinvoke v9.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState: boolean writeWindowUpdateIfNeeded()>();
return;
}
public boolean consumeBytes(io.netty.handler.codec.http2.Http2Stream, int) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.util.concurrent.EventExecutor v6;
java.lang.UnsupportedOperationException v11;
java.lang.AssertionError v8;
io.netty.channel.ChannelHandlerContext v4, v5;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState v12;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController v0;
int v10, v2;
io.netty.handler.codec.http2.Http2Stream v1;
boolean v13, v3, v7, v9;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Stream;
v2 := @parameter1: int;
v3 = <io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: boolean $assertionsDisabled>;
if v3 != 0 goto label2;
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.channel.ChannelHandlerContext ctx>;
if v4 == null goto label1;
v5 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.channel.ChannelHandlerContext ctx>;
v6 = interfaceinvoke v5.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v7 = interfaceinvoke v6.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v7 != 0 goto label2;
label1:
v8 = new java.lang.AssertionError;
specialinvoke v8.<java.lang.AssertionError: void <init>()>();
throw v8;
label2:
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositiveOrZero(int,java.lang.String)>(v2, "numBytes");
if v2 != 0 goto label3;
return 0;
label3:
if v1 == null goto label5;
v9 = staticinvoke <io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: boolean isClosed(io.netty.handler.codec.http2.Http2Stream)>(v1);
if v9 != 0 goto label5;
v10 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Stream: int id()>();
if v10 != 0 goto label4;
v11 = new java.lang.UnsupportedOperationException;
specialinvoke v11.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Returning bytes for the connection window is not supported");
throw v11;
label4:
v12 = specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState state(io.netty.handler.codec.http2.Http2Stream)>(v1);
v13 = specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: boolean consumeAllBytes(io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState,int)>(v12, v2);
return v13;
label5:
return 0;
}
private boolean consumeAllBytes(io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState, int) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState v1, v3;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController v0;
int v2;
boolean v4, v5, v6;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController;
v1 := @parameter0: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState;
v2 := @parameter1: int;
v3 = specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState connectionState()>();
v4 = interfaceinvoke v3.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState: boolean consumeBytes(int)>(v2);
v5 = interfaceinvoke v1.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState: boolean consumeBytes(int)>(v2);
v6 = v4 | v5;
return v6;
}
public int unconsumedBytes(io.netty.handler.codec.http2.Http2Stream)
{
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState v2;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController v0;
int v3;
io.netty.handler.codec.http2.Http2Stream v1;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Stream;
v2 = specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState state(io.netty.handler.codec.http2.Http2Stream)>(v1);
v3 = interfaceinvoke v2.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState: int unconsumedBytes()>();
return v3;
}
private static void checkValidRatio(float)
{
int v1, v2;
float v0;
java.lang.String v4;
java.lang.IllegalArgumentException v3;
v0 := @parameter0: float;
v1 = staticinvoke <java.lang.Double: int compare(double,double)>(v0, 0.0);
if v1 <= 0 goto label1;
v2 = staticinvoke <java.lang.Double: int compare(double,double)>(v0, 1.0);
if v2 < 0 goto label2;
label1:
v3 = new java.lang.IllegalArgumentException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (float)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid ratio: \u0001");
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v4);
throw v3;
label2:
return;
}
public void windowUpdateRatio(float)
{
io.netty.util.concurrent.EventExecutor v5;
java.lang.AssertionError v7;
io.netty.channel.ChannelHandlerContext v3, v4;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController v0;
float v1;
boolean v2, v6;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController;
v1 := @parameter0: float;
v2 = <io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
v3 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.channel.ChannelHandlerContext ctx>;
if v3 == null goto label1;
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.channel.ChannelHandlerContext ctx>;
v5 = interfaceinvoke v4.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v6 = interfaceinvoke v5.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v6 != 0 goto label1;
v7 = new java.lang.AssertionError;
specialinvoke v7.<java.lang.AssertionError: void <init>()>();
throw v7;
label1:
staticinvoke <io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: void checkValidRatio(float)>(v1);
v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: float windowUpdateRatio> = v1;
return;
}
public float windowUpdateRatio()
{
float v1;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: float windowUpdateRatio>;
return v1;
}
public void windowUpdateRatio(io.netty.handler.codec.http2.Http2Stream, float) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.util.concurrent.EventExecutor v6;
java.lang.AssertionError v8;
io.netty.channel.ChannelHandlerContext v4, v5;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState v9;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController v0;
io.netty.handler.codec.http2.Http2Stream v1;
float v2;
boolean v3, v7;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Stream;
v2 := @parameter1: float;
v3 = <io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: boolean $assertionsDisabled>;
if v3 != 0 goto label2;
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.channel.ChannelHandlerContext ctx>;
if v4 == null goto label1;
v5 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.channel.ChannelHandlerContext ctx>;
v6 = interfaceinvoke v5.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v7 = interfaceinvoke v6.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v7 != 0 goto label2;
label1:
v8 = new java.lang.AssertionError;
specialinvoke v8.<java.lang.AssertionError: void <init>()>();
throw v8;
label2:
staticinvoke <io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: void checkValidRatio(float)>(v2);
v9 = specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState state(io.netty.handler.codec.http2.Http2Stream)>(v1);
interfaceinvoke v9.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState: void windowUpdateRatio(float)>(v2);
interfaceinvoke v9.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState: boolean writeWindowUpdateIfNeeded()>();
return;
}
public float windowUpdateRatio(io.netty.handler.codec.http2.Http2Stream) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState v2;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController v0;
io.netty.handler.codec.http2.Http2Stream v1;
float v3;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Stream;
v2 = specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState state(io.netty.handler.codec.http2.Http2Stream)>(v1);
v3 = interfaceinvoke v2.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState: float windowUpdateRatio()>();
return v3;
}
public void receiveFlowControlledFrame(io.netty.handler.codec.http2.Http2Stream, io.netty.buffer.ByteBuf, int, boolean) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.util.concurrent.EventExecutor v8;
java.lang.AssertionError v10;
io.netty.channel.ChannelHandlerContext v6, v7;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState v13, v15;
io.netty.buffer.ByteBuf v2;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController v0;
int v11, v12, v3;
io.netty.handler.codec.http2.Http2Stream v1;
boolean v14, v4, v5, v9;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Stream;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 = <io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: boolean $assertionsDisabled>;
if v5 != 0 goto label2;
v6 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.channel.ChannelHandlerContext ctx>;
if v6 == null goto label1;
v7 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.channel.ChannelHandlerContext ctx>;
v8 = interfaceinvoke v7.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v9 = interfaceinvoke v8.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v9 != 0 goto label2;
label1:
v10 = new java.lang.AssertionError;
specialinvoke v10.<java.lang.AssertionError: void <init>()>();
throw v10;
label2:
v11 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readableBytes()>();
v12 = v11 + v3;
v13 = specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState connectionState()>();
interfaceinvoke v13.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState: void receiveFlowControlledFrame(int)>(v12);
if v1 == null goto label3;
v14 = staticinvoke <io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: boolean isClosed(io.netty.handler.codec.http2.Http2Stream)>(v1);
if v14 != 0 goto label3;
v15 = specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState state(io.netty.handler.codec.http2.Http2Stream)>(v1);
interfaceinvoke v15.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState: void endOfStream(boolean)>(v4);
interfaceinvoke v15.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState: void receiveFlowControlledFrame(int)>(v12);
goto label4;
label3:
if v12 <= 0 goto label4;
interfaceinvoke v13.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState: boolean consumeBytes(int)>(v12);
label4:
return;
}
private io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState connectionState()
{
io.netty.handler.codec.http2.Http2Connection v1;
io.netty.handler.codec.http2.Http2Connection$PropertyKey v3;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController v0;
io.netty.handler.codec.http2.Http2Stream v2;
java.lang.Object v4;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.handler.codec.http2.Http2Connection connection>;
v2 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Stream connectionStream()>();
v3 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.handler.codec.http2.Http2Connection$PropertyKey stateKey>;
v4 = interfaceinvoke v2.<io.netty.handler.codec.http2.Http2Stream: java.lang.Object getProperty(io.netty.handler.codec.http2.Http2Connection$PropertyKey)>(v3);
return v4;
}
private io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState state(io.netty.handler.codec.http2.Http2Stream)
{
io.netty.handler.codec.http2.Http2Connection$PropertyKey v2;
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController v0;
io.netty.handler.codec.http2.Http2Stream v1;
java.lang.Object v3;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Stream;
v2 = v0.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.handler.codec.http2.Http2Connection$PropertyKey stateKey>;
v3 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Stream: java.lang.Object getProperty(io.netty.handler.codec.http2.Http2Connection$PropertyKey)>(v2);
return v3;
}
private static boolean isClosed(io.netty.handler.codec.http2.Http2Stream)
{
io.netty.handler.codec.http2.Http2Stream$State v1, v2;
io.netty.handler.codec.http2.Http2Stream v0;
boolean v3;
v0 := @parameter0: io.netty.handler.codec.http2.Http2Stream;
v1 = interfaceinvoke v0.<io.netty.handler.codec.http2.Http2Stream: io.netty.handler.codec.http2.Http2Stream$State state()>();
v2 = <io.netty.handler.codec.http2.Http2Stream$State: io.netty.handler.codec.http2.Http2Stream$State CLOSED>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
static void <clinit>()
{
io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$2 v3;
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/handler/codec/http2/DefaultHttp2LocalFlowController;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: boolean $assertionsDisabled> = v2;
v3 = new io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$2;
specialinvoke v3.<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$2: void <init>()>();
<io.netty.handler.codec.http2.DefaultHttp2LocalFlowController: io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$FlowState REDUCED_FLOW_STATE> = v3;
return;
}
}