final class io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor extends io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor implements io.netty.handler.codec.http2.Http2StreamVisitor
{
private final io.netty.handler.codec.http2.Http2RemoteFlowController$Listener listener;
final io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController this$0;
void <init>(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController, io.netty.handler.codec.http2.Http2RemoteFlowController$Listener)
{
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor v0;
io.netty.handler.codec.http2.Http2RemoteFlowController$Listener v2;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v1;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor;
v1 := @parameter0: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController;
v2 := @parameter1: io.netty.handler.codec.http2.Http2RemoteFlowController$Listener;
v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController this$0> = v1;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor: void <init>(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController)>(v1);
v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor: io.netty.handler.codec.http2.Http2RemoteFlowController$Listener listener> = v2;
return;
}
public boolean visit(io.netty.handler.codec.http2.Http2Stream) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v3;
io.netty.handler.codec.http2.Http2Stream v1;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor v0;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v2;
boolean v4, v5;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Stream;
v2 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController this$0>;
v3 = specialinvoke v2.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState state(io.netty.handler.codec.http2.Http2Stream)>(v1);
v4 = virtualinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor: boolean isWritable(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState)>(v3);
v5 = virtualinvoke v3.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: boolean markedWritability()>();
if v4 == v5 goto label1;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor: void notifyWritabilityChanged(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState)>(v3);
label1:
return 1;
}
void windowSize(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState, int)
{
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v1;
io.netty.handler.codec.http2.Http2Exception v3;
int v2;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor v0;
java.lang.RuntimeException v4;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor;
v1 := @parameter0: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState;
v2 := @parameter1: int;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor: void windowSize(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState,int)>(v1, v2);
label1:
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor: void checkStateWritability(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState)>(v1);
label2:
goto label4;
label3:
v3 := @caughtexception;
v4 = new java.lang.RuntimeException;
specialinvoke v4.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Caught unexpected exception from window", v3);
throw v4;
label4:
return;
catch io.netty.handler.codec.http2.Http2Exception from label1 to label2 with label3;
}
void incrementWindowSize(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState, int) throws io.netty.handler.codec.http2.Http2Exception
{
int v2;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor v0;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v1;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor;
v1 := @parameter0: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState;
v2 := @parameter1: int;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor: void incrementWindowSize(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState,int)>(v1, v2);
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor: void checkStateWritability(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState)>(v1);
return;
}
void initialWindowSize(int) throws io.netty.handler.codec.http2.Http2Exception
{
int v1;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor v0;
boolean v2;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor: void initialWindowSize(int)>(v1);
v2 = virtualinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor: boolean isWritableConnection()>();
if v2 == 0 goto label1;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor: void checkAllWritabilityChanged()>();
label1:
return;
}
void enqueueFrame(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState, io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor v0;
io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled v2;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v1;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor;
v1 := @parameter0: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState;
v2 := @parameter1: io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor: void enqueueFrame(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState,io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled)>(v1, v2);
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor: void checkConnectionThenStreamWritabilityChanged(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState)>(v1);
return;
}
void stateCancelled(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState)
{
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v1;
io.netty.handler.codec.http2.Http2Exception v2;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor v0;
java.lang.RuntimeException v3;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor;
v1 := @parameter0: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState;
label1:
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor: void checkConnectionThenStreamWritabilityChanged(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState)>(v1);
label2:
goto label4;
label3:
v2 := @caughtexception;
v3 = new java.lang.RuntimeException;
specialinvoke v3.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Caught unexpected exception from checkAllWritabilityChanged", v2);
throw v3;
label4:
return;
catch io.netty.handler.codec.http2.Http2Exception from label1 to label2 with label3;
}
void channelWritabilityChange() throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v2;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor v0;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v1, v4;
boolean v3, v5;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController this$0>;
v2 = v1.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState connectionState>;
v3 = virtualinvoke v2.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: boolean markedWritability()>();
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController this$0>;
v5 = specialinvoke v4.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: boolean isChannelWritable()>();
if v3 == v5 goto label1;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor: void checkAllWritabilityChanged()>();
label1:
return;
}
private void checkStateWritability(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v1, v5;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor v0;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v4;
boolean v2, v3;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor;
v1 := @parameter0: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState;
v2 = virtualinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor: boolean isWritable(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState)>(v1);
v3 = virtualinvoke v1.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: boolean markedWritability()>();
if v2 == v3 goto label2;
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController this$0>;
v5 = v4.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState connectionState>;
if v1 != v5 goto label1;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor: void checkAllWritabilityChanged()>();
goto label2;
label1:
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor: void notifyWritabilityChanged(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState)>(v1);
label2:
return;
}
private void notifyWritabilityChanged(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState)
{
java.lang.Throwable v6;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v1;
io.netty.util.internal.logging.InternalLogger v7;
io.netty.handler.codec.http2.Http2Stream v5;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor v0;
io.netty.handler.codec.http2.Http2RemoteFlowController$Listener v4;
boolean v2, v3;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor;
v1 := @parameter0: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState;
v2 = virtualinvoke v1.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: boolean markedWritability()>();
if v2 != 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
virtualinvoke v1.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: void markedWritability(boolean)>(v3);
label3:
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor: io.netty.handler.codec.http2.Http2RemoteFlowController$Listener listener>;
v5 = v1.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: io.netty.handler.codec.http2.Http2Stream stream>;
interfaceinvoke v4.<io.netty.handler.codec.http2.Http2RemoteFlowController$Listener: void writabilityChanged(io.netty.handler.codec.http2.Http2Stream)>(v5);
label4:
goto label6;
label5:
v6 := @caughtexception;
v7 = <io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v7.<io.netty.util.internal.logging.InternalLogger: void error(java.lang.String,java.lang.Throwable)>("Caught Throwable from listener.writabilityChanged", v6);
label6:
return;
catch java.lang.Throwable from label3 to label4 with label5;
}
private void checkConnectionThenStreamWritabilityChanged(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v1, v4;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor v0;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v3;
boolean v2, v5, v6, v7;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor;
v1 := @parameter0: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState;
v2 = virtualinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor: boolean isWritableConnection()>();
v3 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController this$0>;
v4 = v3.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState connectionState>;
v5 = virtualinvoke v4.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: boolean markedWritability()>();
if v2 == v5 goto label1;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor: void checkAllWritabilityChanged()>();
goto label2;
label1:
v6 = virtualinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor: boolean isWritable(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState)>(v1);
v7 = virtualinvoke v1.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: boolean markedWritability()>();
if v6 == v7 goto label2;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor: void notifyWritabilityChanged(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState)>(v1);
label2:
return;
}
private void checkAllWritabilityChanged() throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v2;
io.netty.handler.codec.http2.Http2Connection v5;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor v0;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v1, v4;
boolean v3;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController this$0>;
v2 = v1.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState connectionState>;
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor: boolean isWritableConnection()>();
virtualinvoke v2.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: void markedWritability(boolean)>(v3);
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController this$0>;
v5 = v4.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.Http2Connection connection>;
interfaceinvoke v5.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Stream forEachActiveStream(io.netty.handler.codec.http2.Http2StreamVisitor)>(v0);
return;
}
}