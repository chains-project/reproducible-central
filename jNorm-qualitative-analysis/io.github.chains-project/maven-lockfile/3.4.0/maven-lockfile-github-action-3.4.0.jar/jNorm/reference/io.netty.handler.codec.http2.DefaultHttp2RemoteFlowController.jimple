public class io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController extends java.lang.Object implements io.netty.handler.codec.http2.Http2RemoteFlowController
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private static final int MIN_WRITABLE_CHUNK;
private final io.netty.handler.codec.http2.Http2Connection connection;
private final io.netty.handler.codec.http2.Http2Connection$PropertyKey stateKey;
private final io.netty.handler.codec.http2.StreamByteDistributor streamByteDistributor;
private final io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState connectionState;
private int initialWindowSize;
private io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor monitor;
private io.netty.channel.ChannelHandlerContext ctx;
static final boolean $assertionsDisabled;
public void <init>(io.netty.handler.codec.http2.Http2Connection)
{
io.netty.handler.codec.http2.Http2Connection v1;
io.netty.handler.codec.http2.Http2RemoteFlowController$Listener v2;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Connection;
v2 = null;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: void <init>(io.netty.handler.codec.http2.Http2Connection,io.netty.handler.codec.http2.Http2RemoteFlowController$Listener)>(v1, v2);
return;
}
public void <init>(io.netty.handler.codec.http2.Http2Connection, io.netty.handler.codec.http2.StreamByteDistributor)
{
io.netty.handler.codec.http2.Http2Connection v1;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v0;
io.netty.handler.codec.http2.StreamByteDistributor v2;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Connection;
v2 := @parameter1: io.netty.handler.codec.http2.StreamByteDistributor;
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: void <init>(io.netty.handler.codec.http2.Http2Connection,io.netty.handler.codec.http2.StreamByteDistributor,io.netty.handler.codec.http2.Http2RemoteFlowController$Listener)>(v1, v2, null);
return;
}
public void <init>(io.netty.handler.codec.http2.Http2Connection, io.netty.handler.codec.http2.Http2RemoteFlowController$Listener)
{
io.netty.handler.codec.http2.Http2Connection v1;
io.netty.handler.codec.http2.WeightedFairQueueByteDistributor v3;
io.netty.handler.codec.http2.Http2RemoteFlowController$Listener v2;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Connection;
v2 := @parameter1: io.netty.handler.codec.http2.Http2RemoteFlowController$Listener;
v3 = new io.netty.handler.codec.http2.WeightedFairQueueByteDistributor;
specialinvoke v3.<io.netty.handler.codec.http2.WeightedFairQueueByteDistributor: void <init>(io.netty.handler.codec.http2.Http2Connection)>(v1);
specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: void <init>(io.netty.handler.codec.http2.Http2Connection,io.netty.handler.codec.http2.StreamByteDistributor,io.netty.handler.codec.http2.Http2RemoteFlowController$Listener)>(v1, v3, v2);
return;
}
public void <init>(io.netty.handler.codec.http2.Http2Connection, io.netty.handler.codec.http2.StreamByteDistributor, io.netty.handler.codec.http2.Http2RemoteFlowController$Listener)
{
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$1 v16;
io.netty.handler.codec.http2.StreamByteDistributor v2;
int v15, v4;
io.netty.handler.codec.http2.Http2Stream v10, v9;
io.netty.handler.codec.http2.Http2RemoteFlowController$Listener v3;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v0;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor v13;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v12, v14, v8;
io.netty.handler.codec.http2.Http2Connection v1;
io.netty.handler.codec.http2.Http2Connection$PropertyKey v11, v7;
java.lang.Object v5, v6;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Connection;
v2 := @parameter1: io.netty.handler.codec.http2.StreamByteDistributor;
v3 := @parameter2: io.netty.handler.codec.http2.Http2RemoteFlowController$Listener;
specialinvoke v0.<java.lang.Object: void <init>()>();
v4 = (int) 65535;
v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: int initialWindowSize> = v4;
v5 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "connection");
v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.Http2Connection connection> = v5;
v6 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "streamWriteDistributor");
v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.StreamByteDistributor streamByteDistributor> = v6;
v7 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Connection$PropertyKey newKey()>();
v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.Http2Connection$PropertyKey stateKey> = v7;
v8 = new io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState;
v9 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Stream connectionStream()>();
specialinvoke v8.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: void <init>(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController,io.netty.handler.codec.http2.Http2Stream)>(v0, v9);
v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState connectionState> = v8;
v10 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Stream connectionStream()>();
v11 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.Http2Connection$PropertyKey stateKey>;
v12 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState connectionState>;
interfaceinvoke v10.<io.netty.handler.codec.http2.Http2Stream: java.lang.Object setProperty(io.netty.handler.codec.http2.Http2Connection$PropertyKey,java.lang.Object)>(v11, v12);
virtualinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: void listener(io.netty.handler.codec.http2.Http2RemoteFlowController$Listener)>(v3);
v13 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor monitor>;
v14 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState connectionState>;
v15 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: int initialWindowSize>;
virtualinvoke v13.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor: void windowSize(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState,int)>(v14, v15);
v16 = new io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$1;
specialinvoke v16.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$1: void <init>(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController)>(v0);
interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Connection: void addListener(io.netty.handler.codec.http2.Http2Connection$Listener)>(v16);
return;
}
public void channelHandlerContext(io.netty.channel.ChannelHandlerContext) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.channel.ChannelHandlerContext v1;
java.lang.Object v2;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v0;
boolean v3;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "ctx");
v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.channel.ChannelHandlerContext ctx> = v2;
virtualinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: void channelWritabilityChanged()>();
v3 = specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: boolean isChannelWritable()>();
if v3 == 0 goto label1;
virtualinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: void writePendingBytes()>();
label1:
return;
}
public io.netty.channel.ChannelHandlerContext channelHandlerContext()
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.channel.ChannelHandlerContext ctx>;
return v1;
}
public void initialWindowSize(int) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor v8;
io.netty.util.concurrent.EventExecutor v5;
java.lang.AssertionError v7;
io.netty.channel.ChannelHandlerContext v3, v4;
int v1;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v0;
boolean v2, v6;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController;
v1 := @parameter0: int;
v2 = <io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
v3 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.channel.ChannelHandlerContext ctx>;
if v3 == null goto label1;
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.channel.ChannelHandlerContext ctx>;
v5 = interfaceinvoke v4.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v6 = interfaceinvoke v5.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v6 != 0 goto label1;
v7 = new java.lang.AssertionError;
specialinvoke v7.<java.lang.AssertionError: void <init>()>();
throw v7;
label1:
v8 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor monitor>;
virtualinvoke v8.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor: void initialWindowSize(int)>(v1);
return;
}
public int initialWindowSize()
{
int v1;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: int initialWindowSize>;
return v1;
}
public int windowSize(io.netty.handler.codec.http2.Http2Stream)
{
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v2;
int v3;
io.netty.handler.codec.http2.Http2Stream v1;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Stream;
v2 = specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState state(io.netty.handler.codec.http2.Http2Stream)>(v1);
v3 = virtualinvoke v2.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: int windowSize()>();
return v3;
}
public boolean isWritable(io.netty.handler.codec.http2.Http2Stream)
{
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor v2;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v3;
io.netty.handler.codec.http2.Http2Stream v1;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v0;
boolean v4;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Stream;
v2 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor monitor>;
v3 = specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState state(io.netty.handler.codec.http2.Http2Stream)>(v1);
v4 = virtualinvoke v2.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor: boolean isWritable(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState)>(v3);
return v4;
}
public void channelWritabilityChanged() throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor v1;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor monitor>;
virtualinvoke v1.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor: void channelWritabilityChange()>();
return;
}
public void updateDependencyTree(int, int, short, boolean)
{
java.lang.AssertionError v10, v6, v8;
io.netty.handler.codec.http2.StreamByteDistributor v11;
short v3;
int v1, v2;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v0;
boolean v4, v5, v7, v9;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: short;
v4 := @parameter3: boolean;
v5 = <io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: boolean $assertionsDisabled>;
if v5 != 0 goto label2;
if v3 < 1 goto label1;
if v3 <= 256 goto label2;
label1:
v6 = new java.lang.AssertionError;
specialinvoke v6.<java.lang.AssertionError: void <init>(java.lang.Object)>("Invalid weight");
throw v6;
label2:
v7 = <io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: boolean $assertionsDisabled>;
if v7 != 0 goto label3;
if v1 != v2 goto label3;
v8 = new java.lang.AssertionError;
specialinvoke v8.<java.lang.AssertionError: void <init>(java.lang.Object)>("A stream cannot depend on itself");
throw v8;
label3:
v9 = <io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: boolean $assertionsDisabled>;
if v9 != 0 goto label5;
if v1 <= 0 goto label4;
if v2 >= 0 goto label5;
label4:
v10 = new java.lang.AssertionError;
specialinvoke v10.<java.lang.AssertionError: void <init>(java.lang.Object)>("childStreamId must be > 0. parentStreamId must be >= 0.");
throw v10;
label5:
v11 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.StreamByteDistributor streamByteDistributor>;
interfaceinvoke v11.<io.netty.handler.codec.http2.StreamByteDistributor: void updateDependencyTree(int,int,short,boolean)>(v1, v2, v3, v4);
return;
}
private boolean isChannelWritable()
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v0;
boolean v2, v3;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.channel.ChannelHandlerContext ctx>;
if v1 == null goto label1;
v2 = specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: boolean isChannelWritable0()>();
if v2 == 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
private boolean isChannelWritable0()
{
io.netty.channel.Channel v2;
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v0;
boolean v3;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.channel.ChannelHandlerContext ctx>;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v3 = interfaceinvoke v2.<io.netty.channel.Channel: boolean isWritable()>();
return v3;
}
public void listener(io.netty.handler.codec.http2.Http2RemoteFlowController$Listener)
{
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor v2, v3;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor v4;
io.netty.handler.codec.http2.Http2RemoteFlowController$Listener v1;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController;
v1 := @parameter0: io.netty.handler.codec.http2.Http2RemoteFlowController$Listener;
if v1 != null goto label1;
v2 = new io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor;
v3 = v2;
specialinvoke v2.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor: void <init>(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController)>(v0);
goto label2;
label1:
v4 = new io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor;
v3 = v4;
specialinvoke v4.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$ListenerWritabilityMonitor: void <init>(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController,io.netty.handler.codec.http2.Http2RemoteFlowController$Listener)>(v0, v1);
label2:
v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor monitor> = v3;
return;
}
public void incrementWindowSize(io.netty.handler.codec.http2.Http2Stream, int) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor v9;
io.netty.util.concurrent.EventExecutor v6;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v10;
java.lang.AssertionError v8;
io.netty.channel.ChannelHandlerContext v4, v5;
int v2;
io.netty.handler.codec.http2.Http2Stream v1;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v0;
boolean v3, v7;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Stream;
v2 := @parameter1: int;
v3 = <io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: boolean $assertionsDisabled>;
if v3 != 0 goto label1;
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.channel.ChannelHandlerContext ctx>;
if v4 == null goto label1;
v5 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.channel.ChannelHandlerContext ctx>;
v6 = interfaceinvoke v5.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v7 = interfaceinvoke v6.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v7 != 0 goto label1;
v8 = new java.lang.AssertionError;
specialinvoke v8.<java.lang.AssertionError: void <init>()>();
throw v8;
label1:
v9 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor monitor>;
v10 = specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState state(io.netty.handler.codec.http2.Http2Stream)>(v1);
virtualinvoke v9.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor: void incrementWindowSize(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState,int)>(v10, v2);
return;
}
public void addFlowControlled(io.netty.handler.codec.http2.Http2Stream, io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled)
{
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor v9;
io.netty.util.concurrent.EventExecutor v6;
java.lang.Throwable v11;
io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled v2;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v10;
java.lang.AssertionError v8;
io.netty.channel.ChannelHandlerContext v12, v4, v5;
io.netty.handler.codec.http2.Http2Stream v1;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v0;
boolean v3, v7;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Stream;
v2 := @parameter1: io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled;
v3 = <io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: boolean $assertionsDisabled>;
if v3 != 0 goto label1;
v4 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.channel.ChannelHandlerContext ctx>;
if v4 == null goto label1;
v5 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.channel.ChannelHandlerContext ctx>;
v6 = interfaceinvoke v5.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v7 = interfaceinvoke v6.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v7 != 0 goto label1;
v8 = new java.lang.AssertionError;
specialinvoke v8.<java.lang.AssertionError: void <init>()>();
throw v8;
label1:
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "frame");
label2:
v9 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor monitor>;
v10 = specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState state(io.netty.handler.codec.http2.Http2Stream)>(v1);
virtualinvoke v9.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor: void enqueueFrame(io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState,io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled)>(v10, v2);
label3:
goto label5;
label4:
v11 := @caughtexception;
v12 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.channel.ChannelHandlerContext ctx>;
interfaceinvoke v2.<io.netty.handler.codec.http2.Http2RemoteFlowController$FlowControlled: void error(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)>(v12, v11);
label5:
return;
catch java.lang.Throwable from label2 to label3 with label4;
}
public boolean hasFlowControlled(io.netty.handler.codec.http2.Http2Stream)
{
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v2;
io.netty.handler.codec.http2.Http2Stream v1;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v0;
boolean v3;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Stream;
v2 = specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState state(io.netty.handler.codec.http2.Http2Stream)>(v1);
v3 = virtualinvoke v2.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: boolean hasFrame()>();
return v3;
}
private io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState state(io.netty.handler.codec.http2.Http2Stream)
{
io.netty.handler.codec.http2.Http2Connection$PropertyKey v2;
io.netty.handler.codec.http2.Http2Stream v1;
java.lang.Object v3;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Stream;
v2 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.Http2Connection$PropertyKey stateKey>;
v3 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Stream: java.lang.Object getProperty(io.netty.handler.codec.http2.Http2Connection$PropertyKey)>(v2);
return v3;
}
private int connectionWindowSize()
{
int v2;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v1;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState connectionState>;
v2 = virtualinvoke v1.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: int windowSize()>();
return v2;
}
private int minUsableChannelBytes()
{
io.netty.channel.Channel v2;
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelConfig v3;
int v4, v5, v6;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.channel.ChannelHandlerContext ctx>;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v3 = interfaceinvoke v2.<io.netty.channel.Channel: io.netty.channel.ChannelConfig config()>();
v4 = interfaceinvoke v3.<io.netty.channel.ChannelConfig: int getWriteBufferLowWaterMark()>();
v5 = (int) 32768;
v6 = staticinvoke <java.lang.Math: int max(int,int)>(v4, v5);
return v6;
}
private int maxUsableChannelBytes()
{
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState v7;
long v3, v4;
io.netty.channel.Channel v2;
io.netty.channel.ChannelHandlerContext v1;
int v5, v6, v8, v9;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.channel.ChannelHandlerContext ctx>;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v3 = interfaceinvoke v2.<io.netty.channel.Channel: long bytesBeforeUnwritable()>();
v4 = staticinvoke <java.lang.Math: long min(long,long)>(2147483647L, v3);
if v4 <= 0 goto label1;
v5 = specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: int minUsableChannelBytes()>();
v6 = staticinvoke <java.lang.Math: int max(int,int)>(v4, v5);
goto label2;
label1:
v6 = 0;
label2:
v7 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState connectionState>;
v8 = virtualinvoke v7.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState: int windowSize()>();
v9 = staticinvoke <java.lang.Math: int min(int,int)>(v8, v6);
return v9;
}
private int writableBytes()
{
int v1, v2, v3;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController;
v1 = specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: int connectionWindowSize()>();
v2 = specialinvoke v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: int maxUsableChannelBytes()>();
v3 = staticinvoke <java.lang.Math: int min(int,int)>(v1, v2);
return v3;
}
public void writePendingBytes() throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor v1;
io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController v0;
v0 := @this: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController;
v1 = v0.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor monitor>;
virtualinvoke v1.<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$WritabilityMonitor: void writePendingBytes()>();
return;
}
static void <clinit>()
{
io.netty.util.internal.logging.InternalLogger v3;
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: boolean $assertionsDisabled> = v2;
v3 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/handler/codec/http2/DefaultHttp2RemoteFlowController;");
<io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController: io.netty.util.internal.logging.InternalLogger logger> = v3;
return;
}
}