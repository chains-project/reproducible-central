final class io.netty.handler.codec.http2.DelegatingDecompressorFrameListener$Http2Decompressor extends java.lang.Object
{
private final io.netty.channel.embedded.EmbeddedChannel decompressor;
private int compressed;
private int decompressed;
static final boolean $assertionsDisabled;
void <init>(io.netty.channel.embedded.EmbeddedChannel)
{
io.netty.handler.codec.http2.DelegatingDecompressorFrameListener$Http2Decompressor v0;
io.netty.channel.embedded.EmbeddedChannel v1;
v0 := @this: io.netty.handler.codec.http2.DelegatingDecompressorFrameListener$Http2Decompressor;
v1 := @parameter0: io.netty.channel.embedded.EmbeddedChannel;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.handler.codec.http2.DelegatingDecompressorFrameListener$Http2Decompressor: io.netty.channel.embedded.EmbeddedChannel decompressor> = v1;
return;
}
io.netty.channel.embedded.EmbeddedChannel decompressor()
{
io.netty.handler.codec.http2.DelegatingDecompressorFrameListener$Http2Decompressor v0;
io.netty.channel.embedded.EmbeddedChannel v1;
v0 := @this: io.netty.handler.codec.http2.DelegatingDecompressorFrameListener$Http2Decompressor;
v1 = v0.<io.netty.handler.codec.http2.DelegatingDecompressorFrameListener$Http2Decompressor: io.netty.channel.embedded.EmbeddedChannel decompressor>;
return v1;
}
void incrementCompressedBytes(int)
{
io.netty.handler.codec.http2.DelegatingDecompressorFrameListener$Http2Decompressor v0;
int v1, v4, v5;
java.lang.AssertionError v3;
boolean v2;
v0 := @this: io.netty.handler.codec.http2.DelegatingDecompressorFrameListener$Http2Decompressor;
v1 := @parameter0: int;
v2 = <io.netty.handler.codec.http2.DelegatingDecompressorFrameListener$Http2Decompressor: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
if v1 >= 0 goto label1;
v3 = new java.lang.AssertionError;
specialinvoke v3.<java.lang.AssertionError: void <init>()>();
throw v3;
label1:
v4 = v0.<io.netty.handler.codec.http2.DelegatingDecompressorFrameListener$Http2Decompressor: int compressed>;
v5 = v4 + v1;
v0.<io.netty.handler.codec.http2.DelegatingDecompressorFrameListener$Http2Decompressor: int compressed> = v5;
return;
}
void incrementDecompressedBytes(int)
{
io.netty.handler.codec.http2.DelegatingDecompressorFrameListener$Http2Decompressor v0;
int v1, v4, v5;
java.lang.AssertionError v3;
boolean v2;
v0 := @this: io.netty.handler.codec.http2.DelegatingDecompressorFrameListener$Http2Decompressor;
v1 := @parameter0: int;
v2 = <io.netty.handler.codec.http2.DelegatingDecompressorFrameListener$Http2Decompressor: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
if v1 >= 0 goto label1;
v3 = new java.lang.AssertionError;
specialinvoke v3.<java.lang.AssertionError: void <init>()>();
throw v3;
label1:
v4 = v0.<io.netty.handler.codec.http2.DelegatingDecompressorFrameListener$Http2Decompressor: int decompressed>;
v5 = v4 + v1;
v0.<io.netty.handler.codec.http2.DelegatingDecompressorFrameListener$Http2Decompressor: int decompressed> = v5;
return;
}
int consumeBytes(int, int) throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Integer v10, v23, v24, v26, v28, v29, v7, v9;
io.netty.handler.codec.http2.Http2Exception v11, v30;
io.netty.handler.codec.http2.Http2Error v21, v5;
java.lang.Object[] v22, v6;
io.netty.handler.codec.http2.DelegatingDecompressorFrameListener$Http2Decompressor v0;
int v1, v12, v14, v15, v18, v19, v2, v20, v25, v27, v3, v31, v32, v33, v34, v4, v8;
double v13, v16, v17;
v0 := @this: io.netty.handler.codec.http2.DelegatingDecompressorFrameListener$Http2Decompressor;
v1 := @parameter0: int;
v2 := @parameter1: int;
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositiveOrZero(int,java.lang.String)>(v2, "decompressedBytes");
v3 = v0.<io.netty.handler.codec.http2.DelegatingDecompressorFrameListener$Http2Decompressor: int decompressed>;
v4 = v3 - v2;
if v4 >= 0 goto label1;
v5 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error INTERNAL_ERROR>;
v6 = newarray (java.lang.Object)[3];
v7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v6[0] = v7;
v8 = v0.<io.netty.handler.codec.http2.DelegatingDecompressorFrameListener$Http2Decompressor: int decompressed>;
v9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v8);
v6[1] = v9;
v10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v2);
v6[2] = v10;
v11 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception streamError(int,io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v1, v5, "Attempting to return too many bytes for stream %d. decompressed: %d decompressedBytes: %d", v6);
throw v11;
label1:
v12 = v0.<io.netty.handler.codec.http2.DelegatingDecompressorFrameListener$Http2Decompressor: int decompressed>;
v13 = v2 / v12;
v14 = v0.<io.netty.handler.codec.http2.DelegatingDecompressorFrameListener$Http2Decompressor: int compressed>;
v15 = v0.<io.netty.handler.codec.http2.DelegatingDecompressorFrameListener$Http2Decompressor: int compressed>;
v16 = v15 * v13;
v17 = staticinvoke <java.lang.Math: double ceil(double)>(v16);
v18 = staticinvoke <java.lang.Math: int min(int,int)>(v14, v17);
v19 = v0.<io.netty.handler.codec.http2.DelegatingDecompressorFrameListener$Http2Decompressor: int compressed>;
v20 = v19 - v18;
if v20 >= 0 goto label2;
v21 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error INTERNAL_ERROR>;
v22 = newarray (java.lang.Object)[5];
v23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v22[0] = v23;
v24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v2);
v22[1] = v24;
v25 = v0.<io.netty.handler.codec.http2.DelegatingDecompressorFrameListener$Http2Decompressor: int decompressed>;
v26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v25);
v22[2] = v26;
v27 = v0.<io.netty.handler.codec.http2.DelegatingDecompressorFrameListener$Http2Decompressor: int compressed>;
v28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v27);
v22[3] = v28;
v29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v18);
v22[4] = v29;
v30 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception streamError(int,io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v1, v21, "overflow when converting decompressed bytes to compressed bytes for stream %d.decompressedBytes: %d decompressed: %d compressed: %d consumedCompressed: %d", v22);
throw v30;
label2:
v31 = v0.<io.netty.handler.codec.http2.DelegatingDecompressorFrameListener$Http2Decompressor: int decompressed>;
v32 = v31 - v2;
v0.<io.netty.handler.codec.http2.DelegatingDecompressorFrameListener$Http2Decompressor: int decompressed> = v32;
v33 = v0.<io.netty.handler.codec.http2.DelegatingDecompressorFrameListener$Http2Decompressor: int compressed>;
v34 = v33 - v18;
v0.<io.netty.handler.codec.http2.DelegatingDecompressorFrameListener$Http2Decompressor: int compressed> = v34;
return v18;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/handler/codec/http2/DelegatingDecompressorFrameListener;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.handler.codec.http2.DelegatingDecompressorFrameListener$Http2Decompressor: boolean $assertionsDisabled> = v2;
return;
}
}