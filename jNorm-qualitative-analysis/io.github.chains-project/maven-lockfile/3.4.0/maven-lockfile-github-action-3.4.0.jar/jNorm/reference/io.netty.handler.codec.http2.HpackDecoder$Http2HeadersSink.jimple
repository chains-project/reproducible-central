final class io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink extends java.lang.Object
{
private final io.netty.handler.codec.http2.Http2Headers headers;
private final long maxHeaderListSize;
private final int streamId;
private final boolean validateHeaders;
private long headersLength;
private boolean exceededMaxLength;
private io.netty.handler.codec.http2.HpackDecoder$HeaderType previousType;
private io.netty.handler.codec.http2.Http2Exception validationException;
void <init>(int, io.netty.handler.codec.http2.Http2Headers, long, boolean)
{
io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink v0;
io.netty.handler.codec.http2.Http2Headers v2;
int v1;
long v3;
boolean v4;
v0 := @this: io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink;
v1 := @parameter0: int;
v2 := @parameter1: io.netty.handler.codec.http2.Http2Headers;
v3 := @parameter2: long;
v4 := @parameter3: boolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink: io.netty.handler.codec.http2.Http2Headers headers> = v2;
v0.<io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink: long maxHeaderListSize> = v3;
v0.<io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink: int streamId> = v1;
v0.<io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink: boolean validateHeaders> = v4;
return;
}
void finish() throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink v0;
io.netty.handler.codec.http2.Http2Exception v4, v5;
int v2;
long v3;
boolean v1;
v0 := @this: io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink;
v1 = v0.<io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink: boolean exceededMaxLength>;
if v1 == 0 goto label1;
v2 = v0.<io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink: int streamId>;
v3 = v0.<io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink: long maxHeaderListSize>;
staticinvoke <io.netty.handler.codec.http2.Http2CodecUtil: void headerListSizeExceeded(int,long,boolean)>(v2, v3, 1);
goto label2;
label1:
v4 = v0.<io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink: io.netty.handler.codec.http2.Http2Exception validationException>;
if v4 == null goto label2;
v5 = v0.<io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink: io.netty.handler.codec.http2.Http2Exception validationException>;
throw v5;
label2:
return;
}
void appendToHeaderList(io.netty.util.AsciiString, io.netty.util.AsciiString)
{
java.lang.Object[] v22, v29;
io.netty.util.AsciiString v1, v2;
long v3, v4, v5, v7, v8;
byte v9;
io.netty.handler.codec.http2.Http2Exception v13, v24, v25, v30;
int v16, v20, v26;
java.lang.String v23, v28;
boolean v10, v11, v12, v15, v6;
io.netty.handler.codec.http2.HpackDecoder$HeaderType v17, v18;
java.lang.IllegalArgumentException v19;
io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink v0;
io.netty.handler.codec.http2.Http2Headers v14;
io.netty.handler.codec.http2.Http2Error v21, v27;
v0 := @this: io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink;
v1 := @parameter0: io.netty.util.AsciiString;
v2 := @parameter1: io.netty.util.AsciiString;
v3 = v0.<io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink: long headersLength>;
v4 = staticinvoke <io.netty.handler.codec.http2.HpackHeaderField: long sizeOf(java.lang.CharSequence,java.lang.CharSequence)>(v1, v2);
v5 = v3 + v4;
v0.<io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink: long headersLength> = v5;
v6 = v0.<io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink: boolean exceededMaxLength>;
v7 = v0.<io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink: long headersLength>;
v8 = v0.<io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink: long maxHeaderListSize>;
v9 = v7 cmp v8;
if v9 <= 0 goto label1;
v10 = 1;
goto label2;
label1:
v10 = 0;
label2:
v11 = v6 | v10;
v0.<io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink: boolean exceededMaxLength> = v11;
v12 = v0.<io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink: boolean exceededMaxLength>;
if v12 != 0 goto label3;
v13 = v0.<io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink: io.netty.handler.codec.http2.Http2Exception validationException>;
if v13 == null goto label4;
label3:
return;
label4:
v14 = v0.<io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink: io.netty.handler.codec.http2.Http2Headers headers>;
interfaceinvoke v14.<io.netty.handler.codec.http2.Http2Headers: io.netty.handler.codec.Headers add(java.lang.Object,java.lang.Object)>(v1, v2);
v15 = v0.<io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink: boolean validateHeaders>;
if v15 == 0 goto label8;
v16 = v0.<io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink: int streamId>;
v17 = v0.<io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink: io.netty.handler.codec.http2.HpackDecoder$HeaderType previousType>;
v18 = staticinvoke <io.netty.handler.codec.http2.HpackDecoder: io.netty.handler.codec.http2.HpackDecoder$HeaderType validateHeader(int,io.netty.util.AsciiString,java.lang.CharSequence,io.netty.handler.codec.http2.HpackDecoder$HeaderType)>(v16, v1, v2, v17);
v0.<io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink: io.netty.handler.codec.http2.HpackDecoder$HeaderType previousType> = v18;
label5:
goto label8;
label6:
v19 := @caughtexception;
v20 = v0.<io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink: int streamId>;
v21 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error PROTOCOL_ERROR>;
v22 = newarray (java.lang.Object)[2];
v22[0] = v1;
v23 = virtualinvoke v19.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();
v22[1] = v23;
v24 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception streamError(int,io.netty.handler.codec.http2.Http2Error,java.lang.Throwable,java.lang.String,java.lang.Object[])>(v20, v21, v19, "Validation failed for header \'%s\': %s", v22);
v0.<io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink: io.netty.handler.codec.http2.Http2Exception validationException> = v24;
goto label8;
label7:
v25 := @caughtexception;
v26 = v0.<io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink: int streamId>;
v27 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error PROTOCOL_ERROR>;
v28 = virtualinvoke v25.<io.netty.handler.codec.http2.Http2Exception: java.lang.String getMessage()>();
v29 = newarray (java.lang.Object)[0];
v30 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception streamError(int,io.netty.handler.codec.http2.Http2Error,java.lang.Throwable,java.lang.String,java.lang.Object[])>(v26, v27, v25, v28, v29);
v0.<io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink: io.netty.handler.codec.http2.Http2Exception validationException> = v30;
label8:
return;
catch java.lang.IllegalArgumentException from label4 to label5 with label6;
catch io.netty.handler.codec.http2.Http2Exception from label4 to label5 with label7;
}
}