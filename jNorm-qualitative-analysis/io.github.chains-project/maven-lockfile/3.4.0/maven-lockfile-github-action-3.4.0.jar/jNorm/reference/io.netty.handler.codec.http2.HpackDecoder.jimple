final class io.netty.handler.codec.http2.HpackDecoder extends java.lang.Object
{
private static final io.netty.handler.codec.http2.Http2Exception DECODE_ULE_128_DECOMPRESSION_EXCEPTION;
private static final io.netty.handler.codec.http2.Http2Exception DECODE_ULE_128_TO_LONG_DECOMPRESSION_EXCEPTION;
private static final io.netty.handler.codec.http2.Http2Exception DECODE_ULE_128_TO_INT_DECOMPRESSION_EXCEPTION;
private static final io.netty.handler.codec.http2.Http2Exception DECODE_ILLEGAL_INDEX_VALUE;
private static final io.netty.handler.codec.http2.Http2Exception INDEX_HEADER_ILLEGAL_INDEX_VALUE;
private static final io.netty.handler.codec.http2.Http2Exception READ_NAME_ILLEGAL_INDEX_VALUE;
private static final io.netty.handler.codec.http2.Http2Exception INVALID_MAX_DYNAMIC_TABLE_SIZE;
private static final io.netty.handler.codec.http2.Http2Exception MAX_DYNAMIC_TABLE_SIZE_CHANGE_REQUIRED;
private static final byte READ_HEADER_REPRESENTATION;
private static final byte READ_INDEXED_HEADER;
private static final byte READ_INDEXED_HEADER_NAME;
private static final byte READ_LITERAL_HEADER_NAME_LENGTH_PREFIX;
private static final byte READ_LITERAL_HEADER_NAME_LENGTH;
private static final byte READ_LITERAL_HEADER_NAME;
private static final byte READ_LITERAL_HEADER_VALUE_LENGTH_PREFIX;
private static final byte READ_LITERAL_HEADER_VALUE_LENGTH;
private static final byte READ_LITERAL_HEADER_VALUE;
private final io.netty.handler.codec.http2.HpackHuffmanDecoder huffmanDecoder;
private final io.netty.handler.codec.http2.HpackDynamicTable hpackDynamicTable;
private long maxHeaderListSize;
private long maxDynamicTableSize;
private long encoderMaxDynamicTableSize;
private boolean maxDynamicTableSizeChangeRequired;
static final boolean $assertionsDisabled;
void <init>(long)
{
long v1;
io.netty.handler.codec.http2.HpackDecoder v0;
v0 := @this: io.netty.handler.codec.http2.HpackDecoder;
v1 := @parameter0: long;
specialinvoke v0.<io.netty.handler.codec.http2.HpackDecoder: void <init>(long,int)>(v1, 4096);
return;
}
void <init>(long, int)
{
io.netty.handler.codec.http2.HpackDecoder v0;
io.netty.handler.codec.http2.HpackHuffmanDecoder v3;
int v2;
long v1, v4;
io.netty.handler.codec.http2.HpackDynamicTable v5;
v0 := @this: io.netty.handler.codec.http2.HpackDecoder;
v1 := @parameter0: long;
v2 := @parameter1: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new io.netty.handler.codec.http2.HpackHuffmanDecoder;
specialinvoke v3.<io.netty.handler.codec.http2.HpackHuffmanDecoder: void <init>()>();
v0.<io.netty.handler.codec.http2.HpackDecoder: io.netty.handler.codec.http2.HpackHuffmanDecoder huffmanDecoder> = v3;
v4 = staticinvoke <io.netty.util.internal.ObjectUtil: long checkPositive(long,java.lang.String)>(v1, "maxHeaderListSize");
v0.<io.netty.handler.codec.http2.HpackDecoder: long maxHeaderListSize> = v4;
v0.<io.netty.handler.codec.http2.HpackDecoder: long encoderMaxDynamicTableSize> = v2;
v0.<io.netty.handler.codec.http2.HpackDecoder: long maxDynamicTableSize> = v2;
v0.<io.netty.handler.codec.http2.HpackDecoder: boolean maxDynamicTableSizeChangeRequired> = 0;
v5 = new io.netty.handler.codec.http2.HpackDynamicTable;
specialinvoke v5.<io.netty.handler.codec.http2.HpackDynamicTable: void <init>(long)>(v2);
v0.<io.netty.handler.codec.http2.HpackDecoder: io.netty.handler.codec.http2.HpackDynamicTable hpackDynamicTable> = v5;
return;
}
void decode(int, io.netty.buffer.ByteBuf, io.netty.handler.codec.http2.Http2Headers, boolean) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink v5;
io.netty.buffer.ByteBuf v2;
io.netty.handler.codec.http2.HpackDecoder v0;
io.netty.handler.codec.http2.Http2Headers v3;
int v1;
long v6;
boolean v4;
v0 := @this: io.netty.handler.codec.http2.HpackDecoder;
v1 := @parameter0: int;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 := @parameter2: io.netty.handler.codec.http2.Http2Headers;
v4 := @parameter3: boolean;
v5 = new io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink;
v6 = v0.<io.netty.handler.codec.http2.HpackDecoder: long maxHeaderListSize>;
specialinvoke v5.<io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink: void <init>(int,io.netty.handler.codec.http2.Http2Headers,long,boolean)>(v1, v3, v6, v4);
specialinvoke v0.<io.netty.handler.codec.http2.HpackDecoder: void decodeDynamicTableSizeUpdates(io.netty.buffer.ByteBuf)>(v2);
specialinvoke v0.<io.netty.handler.codec.http2.HpackDecoder: void decode(io.netty.buffer.ByteBuf,io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink)>(v2, v5);
virtualinvoke v5.<io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink: void finish()>();
return;
}
private void decodeDynamicTableSizeUpdates(io.netty.buffer.ByteBuf) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.handler.codec.http2.HpackDecoder v0;
long v8;
short v6;
byte v4, v5, v7;
io.netty.buffer.ByteBuf v1;
int v3;
boolean v2;
v0 := @this: io.netty.handler.codec.http2.HpackDecoder;
v1 := @parameter0: io.netty.buffer.ByteBuf;
label1:
v2 = virtualinvoke v1.<io.netty.buffer.ByteBuf: boolean isReadable()>();
if v2 == 0 goto label3;
v3 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readerIndex()>();
v4 = virtualinvoke v1.<io.netty.buffer.ByteBuf: byte getByte(int)>(v3);
v5 = v4 & 32;
if v5 != 32 goto label3;
v6 = v4 & 192;
if v6 != 0 goto label3;
virtualinvoke v1.<io.netty.buffer.ByteBuf: byte readByte()>();
v7 = v4 & 31;
if v7 != 31 goto label2;
v8 = staticinvoke <io.netty.handler.codec.http2.HpackDecoder: long decodeULE128(io.netty.buffer.ByteBuf,long)>(v1, v7);
specialinvoke v0.<io.netty.handler.codec.http2.HpackDecoder: void setDynamicTableSize(long)>(v8);
goto label1;
label2:
specialinvoke v0.<io.netty.handler.codec.http2.HpackDecoder: void setDynamicTableSize(long)>(v7);
goto label1;
label3:
return;
}
private void decode(io.netty.buffer.ByteBuf, io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.handler.codec.http2.HpackDecoder v0;
io.netty.util.AsciiString v39, v42, v8;
byte v11, v19, v20, v24, v3, v31, v36, v6;
io.netty.handler.codec.http2.Http2Exception v14, v15, v23, v47;
boolean v10, v12, v33, v38, v7;
java.lang.CharSequence v17, v18, v28, v29;
io.netty.handler.codec.http2.HpackHeaderField v16, v27;
io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink v2;
io.netty.handler.codec.http2.Http2Error v21, v45;
io.netty.handler.codec.http2.HpackUtil$IndexType v25, v9;
java.lang.Object[] v22, v46;
java.lang.Error v43;
short v13, v32, v37;
io.netty.buffer.ByteBuf v1;
int v26, v30, v34, v4, v40, v5;
java.lang.String v44;
java.lang.IllegalArgumentException v35, v41;
v0 := @this: io.netty.handler.codec.http2.HpackDecoder;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 := @parameter1: io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink;
v3 = 0;
v4 = 0;
v5 = 0;
v6 = 0;
v7 = 0;
v8 = null;
v9 = <io.netty.handler.codec.http2.HpackUtil$IndexType: io.netty.handler.codec.http2.HpackUtil$IndexType NONE>;
label01:
v10 = virtualinvoke v1.<io.netty.buffer.ByteBuf: boolean isReadable()>();
if v10 == 0 goto label37;
tableswitch(v6)
{
case 0: goto label02;
case 1: goto label18;
case 2: goto label19;
case 3: goto label20;
case 4: goto label24;
case 5: goto label25;
case 6: goto label27;
case 7: goto label33;
case 8: goto label34;
default: goto label36;
};
label02:
v11 = virtualinvoke v1.<io.netty.buffer.ByteBuf: byte readByte()>();
v12 = v0.<io.netty.handler.codec.http2.HpackDecoder: boolean maxDynamicTableSizeChangeRequired>;
if v12 == 0 goto label03;
v13 = v11 & 224;
if v13 == 32 goto label03;
v14 = <io.netty.handler.codec.http2.HpackDecoder: io.netty.handler.codec.http2.Http2Exception MAX_DYNAMIC_TABLE_SIZE_CHANGE_REQUIRED>;
throw v14;
label03:
if v11 >= 0 goto label07;
v3 = v11 & 127;
lookupswitch(v3)
{
case 0: goto label04;
case 127: goto label05;
default: goto label06;
};
label04:
v15 = <io.netty.handler.codec.http2.HpackDecoder: io.netty.handler.codec.http2.Http2Exception DECODE_ILLEGAL_INDEX_VALUE>;
throw v15;
label05:
v6 = 1;
goto label01;
label06:
v16 = specialinvoke v0.<io.netty.handler.codec.http2.HpackDecoder: io.netty.handler.codec.http2.HpackHeaderField getIndexedHeader(int)>(v3);
v17 = v16.<io.netty.handler.codec.http2.HpackHeaderField: java.lang.CharSequence name>;
v18 = v16.<io.netty.handler.codec.http2.HpackHeaderField: java.lang.CharSequence value>;
virtualinvoke v2.<io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink: void appendToHeaderList(io.netty.util.AsciiString,io.netty.util.AsciiString)>(v17, v18);
goto label01;
label07:
v19 = v11 & 64;
if v19 != 64 goto label11;
v9 = <io.netty.handler.codec.http2.HpackUtil$IndexType: io.netty.handler.codec.http2.HpackUtil$IndexType INCREMENTAL>;
v3 = v11 & 63;
lookupswitch(v3)
{
case 0: goto label08;
case 63: goto label09;
default: goto label10;
};
label08:
v6 = 3;
goto label01;
label09:
v6 = 2;
goto label01;
label10:
v8 = specialinvoke v0.<io.netty.handler.codec.http2.HpackDecoder: io.netty.util.AsciiString readName(int)>(v3);
v4 = virtualinvoke v8.<io.netty.util.AsciiString: int length()>();
v6 = 6;
goto label01;
label11:
v20 = v11 & 32;
if v20 != 32 goto label12;
v21 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error COMPRESSION_ERROR>;
v22 = newarray (java.lang.Object)[0];
v23 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception connectionError(io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v21, "Dynamic table size update must happen at the beginning of the header block", v22);
throw v23;
label12:
v24 = v11 & 16;
if v24 != 16 goto label13;
v25 = <io.netty.handler.codec.http2.HpackUtil$IndexType: io.netty.handler.codec.http2.HpackUtil$IndexType NEVER>;
goto label14;
label13:
v25 = <io.netty.handler.codec.http2.HpackUtil$IndexType: io.netty.handler.codec.http2.HpackUtil$IndexType NONE>;
label14:
v9 = v25;
v3 = v11 & 15;
lookupswitch(v3)
{
case 0: goto label15;
case 15: goto label16;
default: goto label17;
};
label15:
v6 = 3;
goto label01;
label16:
v6 = 2;
goto label01;
label17:
v8 = specialinvoke v0.<io.netty.handler.codec.http2.HpackDecoder: io.netty.util.AsciiString readName(int)>(v3);
v4 = virtualinvoke v8.<io.netty.util.AsciiString: int length()>();
v6 = 6;
goto label01;
label18:
v26 = staticinvoke <io.netty.handler.codec.http2.HpackDecoder: int decodeULE128(io.netty.buffer.ByteBuf,int)>(v1, v3);
v27 = specialinvoke v0.<io.netty.handler.codec.http2.HpackDecoder: io.netty.handler.codec.http2.HpackHeaderField getIndexedHeader(int)>(v26);
v28 = v27.<io.netty.handler.codec.http2.HpackHeaderField: java.lang.CharSequence name>;
v29 = v27.<io.netty.handler.codec.http2.HpackHeaderField: java.lang.CharSequence value>;
virtualinvoke v2.<io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink: void appendToHeaderList(io.netty.util.AsciiString,io.netty.util.AsciiString)>(v28, v29);
v6 = 0;
goto label01;
label19:
v30 = staticinvoke <io.netty.handler.codec.http2.HpackDecoder: int decodeULE128(io.netty.buffer.ByteBuf,int)>(v1, v3);
v8 = specialinvoke v0.<io.netty.handler.codec.http2.HpackDecoder: io.netty.util.AsciiString readName(int)>(v30);
v4 = virtualinvoke v8.<io.netty.util.AsciiString: int length()>();
v6 = 6;
goto label01;
label20:
v31 = virtualinvoke v1.<io.netty.buffer.ByteBuf: byte readByte()>();
v32 = v31 & 128;
if v32 != 128 goto label21;
v33 = 1;
goto label22;
label21:
v33 = 0;
label22:
v7 = v33;
v3 = v31 & 127;
if v3 != 127 goto label23;
v6 = 4;
goto label01;
label23:
v4 = v3;
v6 = 5;
goto label01;
label24:
v4 = staticinvoke <io.netty.handler.codec.http2.HpackDecoder: int decodeULE128(io.netty.buffer.ByteBuf,int)>(v1, v3);
v6 = 5;
goto label01;
label25:
v34 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
if v34 >= v4 goto label26;
v35 = staticinvoke <io.netty.handler.codec.http2.HpackDecoder: java.lang.IllegalArgumentException notEnoughDataException(io.netty.buffer.ByteBuf)>(v1);
throw v35;
label26:
v8 = specialinvoke v0.<io.netty.handler.codec.http2.HpackDecoder: io.netty.util.AsciiString readStringLiteral(io.netty.buffer.ByteBuf,int,boolean)>(v1, v4, v7);
v6 = 6;
goto label01;
label27:
v36 = virtualinvoke v1.<io.netty.buffer.ByteBuf: byte readByte()>();
v37 = v36 & 128;
if v37 != 128 goto label28;
v38 = 1;
goto label29;
label28:
v38 = 0;
label29:
v7 = v38;
v3 = v36 & 127;
lookupswitch(v3)
{
case 0: goto label31;
case 127: goto label30;
default: goto label32;
};
label30:
v6 = 7;
goto label01;
label31:
v39 = <io.netty.util.AsciiString: io.netty.util.AsciiString EMPTY_STRING>;
specialinvoke v0.<io.netty.handler.codec.http2.HpackDecoder: void insertHeader(io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink,io.netty.util.AsciiString,io.netty.util.AsciiString,io.netty.handler.codec.http2.HpackUtil$IndexType)>(v2, v8, v39, v9);
v6 = 0;
goto label01;
label32:
v5 = v3;
v6 = 8;
goto label01;
label33:
v5 = staticinvoke <io.netty.handler.codec.http2.HpackDecoder: int decodeULE128(io.netty.buffer.ByteBuf,int)>(v1, v3);
v6 = 8;
goto label01;
label34:
v40 = virtualinvoke v1.<io.netty.buffer.ByteBuf: int readableBytes()>();
if v40 >= v5 goto label35;
v41 = staticinvoke <io.netty.handler.codec.http2.HpackDecoder: java.lang.IllegalArgumentException notEnoughDataException(io.netty.buffer.ByteBuf)>(v1);
throw v41;
label35:
v42 = specialinvoke v0.<io.netty.handler.codec.http2.HpackDecoder: io.netty.util.AsciiString readStringLiteral(io.netty.buffer.ByteBuf,int,boolean)>(v1, v5, v7);
specialinvoke v0.<io.netty.handler.codec.http2.HpackDecoder: void insertHeader(io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink,io.netty.util.AsciiString,io.netty.util.AsciiString,io.netty.handler.codec.http2.HpackUtil$IndexType)>(v2, v8, v42, v9);
v6 = 0;
goto label01;
label36:
v43 = new java.lang.Error;
v44 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (byte)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("should not reach here state: \u0001");
specialinvoke v43.<java.lang.Error: void <init>(java.lang.String)>(v44);
throw v43;
label37:
if v6 == 0 goto label38;
v45 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error COMPRESSION_ERROR>;
v46 = newarray (java.lang.Object)[0];
v47 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception connectionError(io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v45, "Incomplete header block fragment.", v46);
throw v47;
label38:
return;
}
void setMaxHeaderTableSize(long) throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Object[] v5;
io.netty.handler.codec.http2.HpackDecoder v0;
long v1, v10, v11, v14;
io.netty.handler.codec.http2.HpackDynamicTable v13;
byte v12, v2, v3;
java.lang.Long v6, v7, v8;
io.netty.handler.codec.http2.Http2Exception v9;
io.netty.handler.codec.http2.Http2Error v4;
v0 := @this: io.netty.handler.codec.http2.HpackDecoder;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 < 0 goto label1;
v3 = v1 cmp 4294967295L;
if v3 <= 0 goto label2;
label1:
v4 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error PROTOCOL_ERROR>;
v5 = newarray (java.lang.Object)[3];
v6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);
v5[0] = v6;
v7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(4294967295L);
v5[1] = v7;
v8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v1);
v5[2] = v8;
v9 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception connectionError(io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v4, "Header Table Size must be >= %d and <= %d but was %d", v5);
throw v9;
label2:
v0.<io.netty.handler.codec.http2.HpackDecoder: long maxDynamicTableSize> = v1;
v10 = v0.<io.netty.handler.codec.http2.HpackDecoder: long maxDynamicTableSize>;
v11 = v0.<io.netty.handler.codec.http2.HpackDecoder: long encoderMaxDynamicTableSize>;
v12 = v10 cmp v11;
if v12 >= 0 goto label3;
v0.<io.netty.handler.codec.http2.HpackDecoder: boolean maxDynamicTableSizeChangeRequired> = 1;
v13 = v0.<io.netty.handler.codec.http2.HpackDecoder: io.netty.handler.codec.http2.HpackDynamicTable hpackDynamicTable>;
v14 = v0.<io.netty.handler.codec.http2.HpackDecoder: long maxDynamicTableSize>;
virtualinvoke v13.<io.netty.handler.codec.http2.HpackDynamicTable: void setCapacity(long)>(v14);
label3:
return;
}
void setMaxHeaderListSize(long) throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Object[] v5;
io.netty.handler.codec.http2.HpackDecoder v0;
long v1;
byte v2, v3;
java.lang.Long v6, v7, v8;
io.netty.handler.codec.http2.Http2Exception v9;
io.netty.handler.codec.http2.Http2Error v4;
v0 := @this: io.netty.handler.codec.http2.HpackDecoder;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 < 0 goto label1;
v3 = v1 cmp 4294967295L;
if v3 <= 0 goto label2;
label1:
v4 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error PROTOCOL_ERROR>;
v5 = newarray (java.lang.Object)[3];
v6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);
v5[0] = v6;
v7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(4294967295L);
v5[1] = v7;
v8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v1);
v5[2] = v8;
v9 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception connectionError(io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v4, "Header List Size must be >= %d and <= %d but was %d", v5);
throw v9;
label2:
v0.<io.netty.handler.codec.http2.HpackDecoder: long maxHeaderListSize> = v1;
return;
}
long getMaxHeaderListSize()
{
long v1;
io.netty.handler.codec.http2.HpackDecoder v0;
v0 := @this: io.netty.handler.codec.http2.HpackDecoder;
v1 = v0.<io.netty.handler.codec.http2.HpackDecoder: long maxHeaderListSize>;
return v1;
}
long getMaxHeaderTableSize()
{
long v2;
io.netty.handler.codec.http2.HpackDecoder v0;
io.netty.handler.codec.http2.HpackDynamicTable v1;
v0 := @this: io.netty.handler.codec.http2.HpackDecoder;
v1 = v0.<io.netty.handler.codec.http2.HpackDecoder: io.netty.handler.codec.http2.HpackDynamicTable hpackDynamicTable>;
v2 = virtualinvoke v1.<io.netty.handler.codec.http2.HpackDynamicTable: long capacity()>();
return v2;
}
int length()
{
int v2;
io.netty.handler.codec.http2.HpackDecoder v0;
io.netty.handler.codec.http2.HpackDynamicTable v1;
v0 := @this: io.netty.handler.codec.http2.HpackDecoder;
v1 = v0.<io.netty.handler.codec.http2.HpackDecoder: io.netty.handler.codec.http2.HpackDynamicTable hpackDynamicTable>;
v2 = virtualinvoke v1.<io.netty.handler.codec.http2.HpackDynamicTable: int length()>();
return v2;
}
long size()
{
long v2;
io.netty.handler.codec.http2.HpackDecoder v0;
io.netty.handler.codec.http2.HpackDynamicTable v1;
v0 := @this: io.netty.handler.codec.http2.HpackDecoder;
v1 = v0.<io.netty.handler.codec.http2.HpackDecoder: io.netty.handler.codec.http2.HpackDynamicTable hpackDynamicTable>;
v2 = virtualinvoke v1.<io.netty.handler.codec.http2.HpackDynamicTable: long size()>();
return v2;
}
io.netty.handler.codec.http2.HpackHeaderField getHeaderField(int)
{
io.netty.handler.codec.http2.HpackDecoder v0;
int v1, v3;
io.netty.handler.codec.http2.HpackDynamicTable v2;
io.netty.handler.codec.http2.HpackHeaderField v4;
v0 := @this: io.netty.handler.codec.http2.HpackDecoder;
v1 := @parameter0: int;
v2 = v0.<io.netty.handler.codec.http2.HpackDecoder: io.netty.handler.codec.http2.HpackDynamicTable hpackDynamicTable>;
v3 = v1 + 1;
v4 = virtualinvoke v2.<io.netty.handler.codec.http2.HpackDynamicTable: io.netty.handler.codec.http2.HpackHeaderField getEntry(int)>(v3);
return v4;
}
private void setDynamicTableSize(long) throws io.netty.handler.codec.http2.Http2Exception
{
byte v3;
io.netty.handler.codec.http2.HpackDecoder v0;
io.netty.handler.codec.http2.Http2Exception v4;
long v1, v2;
io.netty.handler.codec.http2.HpackDynamicTable v5;
v0 := @this: io.netty.handler.codec.http2.HpackDecoder;
v1 := @parameter0: long;
v2 = v0.<io.netty.handler.codec.http2.HpackDecoder: long maxDynamicTableSize>;
v3 = v1 cmp v2;
if v3 <= 0 goto label1;
v4 = <io.netty.handler.codec.http2.HpackDecoder: io.netty.handler.codec.http2.Http2Exception INVALID_MAX_DYNAMIC_TABLE_SIZE>;
throw v4;
label1:
v0.<io.netty.handler.codec.http2.HpackDecoder: long encoderMaxDynamicTableSize> = v1;
v0.<io.netty.handler.codec.http2.HpackDecoder: boolean maxDynamicTableSizeChangeRequired> = 0;
v5 = v0.<io.netty.handler.codec.http2.HpackDecoder: io.netty.handler.codec.http2.HpackDynamicTable hpackDynamicTable>;
virtualinvoke v5.<io.netty.handler.codec.http2.HpackDynamicTable: void setCapacity(long)>(v1);
return;
}
private static io.netty.handler.codec.http2.HpackDecoder$HeaderType validateHeader(int, io.netty.util.AsciiString, java.lang.CharSequence, io.netty.handler.codec.http2.HpackDecoder$HeaderType) throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.Object[] v14, v18, v22, v7;
io.netty.util.AsciiString v1;
io.netty.handler.codec.http2.Http2Exception v15, v19, v23, v8;
int v0;
boolean v10, v16, v20, v4;
io.netty.handler.codec.http2.HpackDecoder$HeaderType v11, v12, v24, v3, v5;
java.lang.CharSequence v2;
io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName v9;
io.netty.handler.codec.http2.Http2Error v13, v17, v21, v6;
v0 := @parameter0: int;
v1 := @parameter1: io.netty.util.AsciiString;
v2 := @parameter2: java.lang.CharSequence;
v3 := @parameter3: io.netty.handler.codec.http2.HpackDecoder$HeaderType;
v4 = staticinvoke <io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName: boolean hasPseudoHeaderFormat(java.lang.CharSequence)>(v1);
if v4 == 0 goto label5;
v5 = <io.netty.handler.codec.http2.HpackDecoder$HeaderType: io.netty.handler.codec.http2.HpackDecoder$HeaderType REGULAR_HEADER>;
if v3 != v5 goto label1;
v6 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error PROTOCOL_ERROR>;
v7 = newarray (java.lang.Object)[1];
v7[0] = v1;
v8 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception streamError(int,io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v0, v6, "Pseudo-header field \'%s\' found after regular header.", v7);
throw v8;
label1:
v9 = staticinvoke <io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName: io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName getPseudoHeader(java.lang.CharSequence)>(v1);
v10 = virtualinvoke v9.<io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName: boolean isRequestOnly()>();
if v10 == 0 goto label2;
v11 = <io.netty.handler.codec.http2.HpackDecoder$HeaderType: io.netty.handler.codec.http2.HpackDecoder$HeaderType REQUEST_PSEUDO_HEADER>;
goto label3;
label2:
v11 = <io.netty.handler.codec.http2.HpackDecoder$HeaderType: io.netty.handler.codec.http2.HpackDecoder$HeaderType RESPONSE_PSEUDO_HEADER>;
label3:
v12 = v11;
if v3 == null goto label4;
if v11 == v3 goto label4;
v13 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error PROTOCOL_ERROR>;
v14 = newarray (java.lang.Object)[0];
v15 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception streamError(int,io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v0, v13, "Mix of request and response pseudo-headers.", v14);
throw v15;
label4:
return v12;
label5:
v16 = staticinvoke <io.netty.handler.codec.http.HttpHeaderValidationUtil: boolean isConnectionHeader(java.lang.CharSequence,boolean)>(v1, 1);
if v16 == 0 goto label6;
v17 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error PROTOCOL_ERROR>;
v18 = newarray (java.lang.Object)[1];
v18[0] = v1;
v19 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception streamError(int,io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v0, v17, "Illegal connection-specific header \'%s\' encountered.", v18);
throw v19;
label6:
v20 = staticinvoke <io.netty.handler.codec.http.HttpHeaderValidationUtil: boolean isTeNotTrailers(java.lang.CharSequence,java.lang.CharSequence)>(v1, v2);
if v20 == 0 goto label7;
v21 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error PROTOCOL_ERROR>;
v22 = newarray (java.lang.Object)[0];
v23 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception streamError(int,io.netty.handler.codec.http2.Http2Error,java.lang.String,java.lang.Object[])>(v0, v21, "Illegal value specified for the \'TE\' header (only \'trailers\' is allowed).", v22);
throw v23;
label7:
v24 = <io.netty.handler.codec.http2.HpackDecoder$HeaderType: io.netty.handler.codec.http2.HpackDecoder$HeaderType REGULAR_HEADER>;
return v24;
}
private io.netty.util.AsciiString readName(int) throws io.netty.handler.codec.http2.Http2Exception
{
java.lang.CharSequence v13, v4;
io.netty.handler.codec.http2.HpackDecoder v0;
io.netty.handler.codec.http2.HpackDynamicTable v7, v9;
io.netty.handler.codec.http2.HpackHeaderField v12, v3;
io.netty.handler.codec.http2.Http2Exception v14;
int v1, v10, v11, v2, v5, v6, v8;
v0 := @this: io.netty.handler.codec.http2.HpackDecoder;
v1 := @parameter0: int;
v2 = <io.netty.handler.codec.http2.HpackStaticTable: int length>;
if v1 > v2 goto label1;
v3 = staticinvoke <io.netty.handler.codec.http2.HpackStaticTable: io.netty.handler.codec.http2.HpackHeaderField getEntry(int)>(v1);
v4 = v3.<io.netty.handler.codec.http2.HpackHeaderField: java.lang.CharSequence name>;
return v4;
label1:
v5 = <io.netty.handler.codec.http2.HpackStaticTable: int length>;
v6 = v1 - v5;
v7 = v0.<io.netty.handler.codec.http2.HpackDecoder: io.netty.handler.codec.http2.HpackDynamicTable hpackDynamicTable>;
v8 = virtualinvoke v7.<io.netty.handler.codec.http2.HpackDynamicTable: int length()>();
if v6 > v8 goto label2;
v9 = v0.<io.netty.handler.codec.http2.HpackDecoder: io.netty.handler.codec.http2.HpackDynamicTable hpackDynamicTable>;
v10 = <io.netty.handler.codec.http2.HpackStaticTable: int length>;
v11 = v1 - v10;
v12 = virtualinvoke v9.<io.netty.handler.codec.http2.HpackDynamicTable: io.netty.handler.codec.http2.HpackHeaderField getEntry(int)>(v11);
v13 = v12.<io.netty.handler.codec.http2.HpackHeaderField: java.lang.CharSequence name>;
return v13;
label2:
v14 = <io.netty.handler.codec.http2.HpackDecoder: io.netty.handler.codec.http2.Http2Exception READ_NAME_ILLEGAL_INDEX_VALUE>;
throw v14;
}
private io.netty.handler.codec.http2.HpackHeaderField getIndexedHeader(int) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.handler.codec.http2.HpackDecoder v0;
io.netty.handler.codec.http2.HpackDynamicTable v6, v8;
io.netty.handler.codec.http2.HpackHeaderField v11, v3;
io.netty.handler.codec.http2.Http2Exception v12;
int v1, v10, v2, v4, v5, v7, v9;
v0 := @this: io.netty.handler.codec.http2.HpackDecoder;
v1 := @parameter0: int;
v2 = <io.netty.handler.codec.http2.HpackStaticTable: int length>;
if v1 > v2 goto label1;
v3 = staticinvoke <io.netty.handler.codec.http2.HpackStaticTable: io.netty.handler.codec.http2.HpackHeaderField getEntry(int)>(v1);
return v3;
label1:
v4 = <io.netty.handler.codec.http2.HpackStaticTable: int length>;
v5 = v1 - v4;
v6 = v0.<io.netty.handler.codec.http2.HpackDecoder: io.netty.handler.codec.http2.HpackDynamicTable hpackDynamicTable>;
v7 = virtualinvoke v6.<io.netty.handler.codec.http2.HpackDynamicTable: int length()>();
if v5 > v7 goto label2;
v8 = v0.<io.netty.handler.codec.http2.HpackDecoder: io.netty.handler.codec.http2.HpackDynamicTable hpackDynamicTable>;
v9 = <io.netty.handler.codec.http2.HpackStaticTable: int length>;
v10 = v1 - v9;
v11 = virtualinvoke v8.<io.netty.handler.codec.http2.HpackDynamicTable: io.netty.handler.codec.http2.HpackHeaderField getEntry(int)>(v10);
return v11;
label2:
v12 = <io.netty.handler.codec.http2.HpackDecoder: io.netty.handler.codec.http2.Http2Exception INDEX_HEADER_ILLEGAL_INDEX_VALUE>;
throw v12;
}
private void insertHeader(io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink, io.netty.util.AsciiString, io.netty.util.AsciiString, io.netty.handler.codec.http2.HpackUtil$IndexType)
{
io.netty.handler.codec.http2.HpackDecoder v0;
io.netty.util.AsciiString v2, v3;
java.lang.Error v10;
io.netty.handler.codec.http2.HpackDynamicTable v8;
io.netty.handler.codec.http2.HpackHeaderField v9;
io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink v1;
int[] v5;
int v6, v7;
io.netty.handler.codec.http2.HpackUtil$IndexType v4;
v0 := @this: io.netty.handler.codec.http2.HpackDecoder;
v1 := @parameter0: io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink;
v2 := @parameter1: io.netty.util.AsciiString;
v3 := @parameter2: io.netty.util.AsciiString;
v4 := @parameter3: io.netty.handler.codec.http2.HpackUtil$IndexType;
virtualinvoke v1.<io.netty.handler.codec.http2.HpackDecoder$Http2HeadersSink: void appendToHeaderList(io.netty.util.AsciiString,io.netty.util.AsciiString)>(v2, v3);
v5 = <io.netty.handler.codec.http2.HpackDecoder$1: int[] $SwitchMap$io$netty$handler$codec$http2$HpackUtil$IndexType>;
v6 = virtualinvoke v4.<io.netty.handler.codec.http2.HpackUtil$IndexType: int ordinal()>();
v7 = v5[v6];
tableswitch(v7)
{
case 1: goto label3;
case 2: goto label3;
case 3: goto label1;
default: goto label2;
};
label1:
v8 = v0.<io.netty.handler.codec.http2.HpackDecoder: io.netty.handler.codec.http2.HpackDynamicTable hpackDynamicTable>;
v9 = new io.netty.handler.codec.http2.HpackHeaderField;
specialinvoke v9.<io.netty.handler.codec.http2.HpackHeaderField: void <init>(java.lang.CharSequence,java.lang.CharSequence)>(v2, v3);
virtualinvoke v8.<io.netty.handler.codec.http2.HpackDynamicTable: void add(io.netty.handler.codec.http2.HpackHeaderField)>(v9);
goto label3;
label2:
v10 = new java.lang.Error;
specialinvoke v10.<java.lang.Error: void <init>(java.lang.String)>("should not reach here");
throw v10;
label3:
return;
}
private io.netty.util.AsciiString readStringLiteral(io.netty.buffer.ByteBuf, int, boolean) throws io.netty.handler.codec.http2.Http2Exception
{
byte[] v6;
io.netty.handler.codec.http2.HpackDecoder v0;
io.netty.util.AsciiString v5, v7;
io.netty.buffer.ByteBuf v1;
io.netty.handler.codec.http2.HpackHuffmanDecoder v4;
int v2;
boolean v3;
v0 := @this: io.netty.handler.codec.http2.HpackDecoder;
v1 := @parameter0: io.netty.buffer.ByteBuf;
v2 := @parameter1: int;
v3 := @parameter2: boolean;
if v3 == 0 goto label1;
v4 = v0.<io.netty.handler.codec.http2.HpackDecoder: io.netty.handler.codec.http2.HpackHuffmanDecoder huffmanDecoder>;
v5 = virtualinvoke v4.<io.netty.handler.codec.http2.HpackHuffmanDecoder: io.netty.util.AsciiString decode(io.netty.buffer.ByteBuf,int)>(v1, v2);
return v5;
label1:
v6 = newarray (byte)[v2];
virtualinvoke v1.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readBytes(byte[])>(v6);
v7 = new io.netty.util.AsciiString;
specialinvoke v7.<io.netty.util.AsciiString: void <init>(byte[],boolean)>(v6, 0);
return v7;
}
private static java.lang.IllegalArgumentException notEnoughDataException(io.netty.buffer.ByteBuf)
{
java.lang.String v2;
io.netty.buffer.ByteBuf v0;
java.lang.IllegalArgumentException v1;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 = new java.lang.IllegalArgumentException;
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.netty.buffer.ByteBuf)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("decode only works with an entire header block! \u0001");
specialinvoke v1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v2);
return v1;
}
static int decodeULE128(io.netty.buffer.ByteBuf, int) throws io.netty.handler.codec.http2.Http2Exception
{
byte v4;
io.netty.buffer.ByteBuf v0;
io.netty.handler.codec.http2.Http2Exception v5;
int v1, v2;
long v3;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: int;
v2 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int readerIndex()>();
v3 = staticinvoke <io.netty.handler.codec.http2.HpackDecoder: long decodeULE128(io.netty.buffer.ByteBuf,long)>(v0, v1);
v4 = v3 cmp 2147483647L;
if v4 <= 0 goto label1;
virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readerIndex(int)>(v2);
v5 = <io.netty.handler.codec.http2.HpackDecoder: io.netty.handler.codec.http2.Http2Exception DECODE_ULE_128_TO_INT_DECOMPRESSION_EXCEPTION>;
throw v5;
label1:
return v3;
}
static long decodeULE128(io.netty.buffer.ByteBuf, long) throws io.netty.handler.codec.http2.Http2Exception
{
long v1, v17, v18, v19, v20, v21;
java.lang.AssertionError v5;
short v13, v15;
byte v12, v3, v4, v6;
io.netty.buffer.ByteBuf v0;
io.netty.handler.codec.http2.Http2Exception v14, v22;
int v10, v11, v16, v9;
boolean v2, v7, v8;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: long;
v2 = <io.netty.handler.codec.http2.HpackDecoder: boolean $assertionsDisabled>;
if v2 != 0 goto label2;
v3 = v1 cmp 127L;
if v3 > 0 goto label1;
v4 = v1 cmp 0L;
if v4 >= 0 goto label2;
label1:
v5 = new java.lang.AssertionError;
specialinvoke v5.<java.lang.AssertionError: void <init>()>();
throw v5;
label2:
v6 = v1 cmp 0L;
if v6 != 0 goto label3;
v7 = 1;
goto label4;
label3:
v7 = 0;
label4:
v8 = v7;
v9 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int writerIndex()>();
v10 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int readerIndex()>();
v11 = 0;
label5:
if v10 >= v9 goto label9;
v12 = virtualinvoke v0.<io.netty.buffer.ByteBuf: byte getByte(int)>(v10);
if v11 != 56 goto label7;
v13 = v12 & 128;
if v13 != 0 goto label6;
if v12 != 127 goto label7;
if v8 != 0 goto label7;
label6:
v14 = <io.netty.handler.codec.http2.HpackDecoder: io.netty.handler.codec.http2.Http2Exception DECODE_ULE_128_TO_LONG_DECOMPRESSION_EXCEPTION>;
throw v14;
label7:
v15 = v12 & 128;
if v15 != 0 goto label8;
v16 = v10 + 1;
virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf readerIndex(int)>(v16);
v17 = v12 & 127L;
v18 = v17 << v11;
v19 = v1 + v18;
return v19;
label8:
v20 = v12 & 127L;
v21 = v20 << v11;
v1 = v1 + v21;
v10 = v10 + 1;
v11 = v11 + 7;
goto label5;
label9:
v22 = <io.netty.handler.codec.http2.HpackDecoder: io.netty.handler.codec.http2.Http2Exception DECODE_ULE_128_DECOMPRESSION_EXCEPTION>;
throw v22;
}
static void <clinit>()
{
io.netty.handler.codec.http2.Http2Exception v11, v14, v17, v20, v23, v26, v5, v8;
boolean v1, v2;
io.netty.handler.codec.http2.Http2Exception$ShutdownHint v10, v13, v16, v19, v22, v25, v4, v7;
io.netty.handler.codec.http2.Http2Error v12, v15, v18, v21, v24, v3, v6, v9;
java.lang.Class v0;
v0 = class "Lio/netty/handler/codec/http2/HpackDecoder;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.handler.codec.http2.HpackDecoder: boolean $assertionsDisabled> = v2;
v3 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error COMPRESSION_ERROR>;
v4 = <io.netty.handler.codec.http2.Http2Exception$ShutdownHint: io.netty.handler.codec.http2.Http2Exception$ShutdownHint HARD_SHUTDOWN>;
v5 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception newStatic(io.netty.handler.codec.http2.Http2Error,java.lang.String,io.netty.handler.codec.http2.Http2Exception$ShutdownHint,java.lang.Class,java.lang.String)>(v3, "HPACK - decompression failure", v4, class "Lio/netty/handler/codec/http2/HpackDecoder;", "decodeULE128(..)");
<io.netty.handler.codec.http2.HpackDecoder: io.netty.handler.codec.http2.Http2Exception DECODE_ULE_128_DECOMPRESSION_EXCEPTION> = v5;
v6 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error COMPRESSION_ERROR>;
v7 = <io.netty.handler.codec.http2.Http2Exception$ShutdownHint: io.netty.handler.codec.http2.Http2Exception$ShutdownHint HARD_SHUTDOWN>;
v8 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception newStatic(io.netty.handler.codec.http2.Http2Error,java.lang.String,io.netty.handler.codec.http2.Http2Exception$ShutdownHint,java.lang.Class,java.lang.String)>(v6, "HPACK - long overflow", v7, class "Lio/netty/handler/codec/http2/HpackDecoder;", "decodeULE128(..)");
<io.netty.handler.codec.http2.HpackDecoder: io.netty.handler.codec.http2.Http2Exception DECODE_ULE_128_TO_LONG_DECOMPRESSION_EXCEPTION> = v8;
v9 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error COMPRESSION_ERROR>;
v10 = <io.netty.handler.codec.http2.Http2Exception$ShutdownHint: io.netty.handler.codec.http2.Http2Exception$ShutdownHint HARD_SHUTDOWN>;
v11 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception newStatic(io.netty.handler.codec.http2.Http2Error,java.lang.String,io.netty.handler.codec.http2.Http2Exception$ShutdownHint,java.lang.Class,java.lang.String)>(v9, "HPACK - int overflow", v10, class "Lio/netty/handler/codec/http2/HpackDecoder;", "decodeULE128ToInt(..)");
<io.netty.handler.codec.http2.HpackDecoder: io.netty.handler.codec.http2.Http2Exception DECODE_ULE_128_TO_INT_DECOMPRESSION_EXCEPTION> = v11;
v12 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error COMPRESSION_ERROR>;
v13 = <io.netty.handler.codec.http2.Http2Exception$ShutdownHint: io.netty.handler.codec.http2.Http2Exception$ShutdownHint HARD_SHUTDOWN>;
v14 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception newStatic(io.netty.handler.codec.http2.Http2Error,java.lang.String,io.netty.handler.codec.http2.Http2Exception$ShutdownHint,java.lang.Class,java.lang.String)>(v12, "HPACK - illegal index value", v13, class "Lio/netty/handler/codec/http2/HpackDecoder;", "decode(..)");
<io.netty.handler.codec.http2.HpackDecoder: io.netty.handler.codec.http2.Http2Exception DECODE_ILLEGAL_INDEX_VALUE> = v14;
v15 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error COMPRESSION_ERROR>;
v16 = <io.netty.handler.codec.http2.Http2Exception$ShutdownHint: io.netty.handler.codec.http2.Http2Exception$ShutdownHint HARD_SHUTDOWN>;
v17 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception newStatic(io.netty.handler.codec.http2.Http2Error,java.lang.String,io.netty.handler.codec.http2.Http2Exception$ShutdownHint,java.lang.Class,java.lang.String)>(v15, "HPACK - illegal index value", v16, class "Lio/netty/handler/codec/http2/HpackDecoder;", "indexHeader(..)");
<io.netty.handler.codec.http2.HpackDecoder: io.netty.handler.codec.http2.Http2Exception INDEX_HEADER_ILLEGAL_INDEX_VALUE> = v17;
v18 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error COMPRESSION_ERROR>;
v19 = <io.netty.handler.codec.http2.Http2Exception$ShutdownHint: io.netty.handler.codec.http2.Http2Exception$ShutdownHint HARD_SHUTDOWN>;
v20 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception newStatic(io.netty.handler.codec.http2.Http2Error,java.lang.String,io.netty.handler.codec.http2.Http2Exception$ShutdownHint,java.lang.Class,java.lang.String)>(v18, "HPACK - illegal index value", v19, class "Lio/netty/handler/codec/http2/HpackDecoder;", "readName(..)");
<io.netty.handler.codec.http2.HpackDecoder: io.netty.handler.codec.http2.Http2Exception READ_NAME_ILLEGAL_INDEX_VALUE> = v20;
v21 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error COMPRESSION_ERROR>;
v22 = <io.netty.handler.codec.http2.Http2Exception$ShutdownHint: io.netty.handler.codec.http2.Http2Exception$ShutdownHint HARD_SHUTDOWN>;
v23 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception newStatic(io.netty.handler.codec.http2.Http2Error,java.lang.String,io.netty.handler.codec.http2.Http2Exception$ShutdownHint,java.lang.Class,java.lang.String)>(v21, "HPACK - invalid max dynamic table size", v22, class "Lio/netty/handler/codec/http2/HpackDecoder;", "setDynamicTableSize(..)");
<io.netty.handler.codec.http2.HpackDecoder: io.netty.handler.codec.http2.Http2Exception INVALID_MAX_DYNAMIC_TABLE_SIZE> = v23;
v24 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error COMPRESSION_ERROR>;
v25 = <io.netty.handler.codec.http2.Http2Exception$ShutdownHint: io.netty.handler.codec.http2.Http2Exception$ShutdownHint HARD_SHUTDOWN>;
v26 = staticinvoke <io.netty.handler.codec.http2.Http2Exception: io.netty.handler.codec.http2.Http2Exception newStatic(io.netty.handler.codec.http2.Http2Error,java.lang.String,io.netty.handler.codec.http2.Http2Exception$ShutdownHint,java.lang.Class,java.lang.String)>(v24, "HPACK - max dynamic table size change required", v25, class "Lio/netty/handler/codec/http2/HpackDecoder;", "decode(..)");
<io.netty.handler.codec.http2.HpackDecoder: io.netty.handler.codec.http2.Http2Exception MAX_DYNAMIC_TABLE_SIZE_CHANGE_REQUIRED> = v26;
return;
}
}