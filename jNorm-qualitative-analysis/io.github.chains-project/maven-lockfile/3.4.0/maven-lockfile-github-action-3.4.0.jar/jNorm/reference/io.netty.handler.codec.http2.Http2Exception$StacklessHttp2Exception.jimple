final class io.netty.handler.codec.http2.Http2Exception$StacklessHttp2Exception extends io.netty.handler.codec.http2.Http2Exception
{
private static final long serialVersionUID;
void <init>(io.netty.handler.codec.http2.Http2Error, java.lang.String, io.netty.handler.codec.http2.Http2Exception$ShutdownHint)
{
io.netty.handler.codec.http2.Http2Exception$StacklessHttp2Exception v0;
io.netty.handler.codec.http2.Http2Error v1;
io.netty.handler.codec.http2.Http2Exception$ShutdownHint v3;
java.lang.String v2;
v0 := @this: io.netty.handler.codec.http2.Http2Exception$StacklessHttp2Exception;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Error;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.netty.handler.codec.http2.Http2Exception$ShutdownHint;
specialinvoke v0.<io.netty.handler.codec.http2.Http2Exception: void <init>(io.netty.handler.codec.http2.Http2Error,java.lang.String,io.netty.handler.codec.http2.Http2Exception$ShutdownHint)>(v1, v2, v3);
return;
}
void <init>(io.netty.handler.codec.http2.Http2Error, java.lang.String, io.netty.handler.codec.http2.Http2Exception$ShutdownHint, boolean)
{
io.netty.handler.codec.http2.Http2Exception$StacklessHttp2Exception v0;
io.netty.handler.codec.http2.Http2Error v1;
io.netty.handler.codec.http2.Http2Exception$ShutdownHint v3;
java.lang.String v2;
boolean v4;
v0 := @this: io.netty.handler.codec.http2.Http2Exception$StacklessHttp2Exception;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Error;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.netty.handler.codec.http2.Http2Exception$ShutdownHint;
v4 := @parameter3: boolean;
specialinvoke v0.<io.netty.handler.codec.http2.Http2Exception: void <init>(io.netty.handler.codec.http2.Http2Error,java.lang.String,io.netty.handler.codec.http2.Http2Exception$ShutdownHint,boolean)>(v1, v2, v3, v4);
return;
}
public java.lang.Throwable fillInStackTrace()
{
io.netty.handler.codec.http2.Http2Exception$StacklessHttp2Exception v0;
v0 := @this: io.netty.handler.codec.http2.Http2Exception$StacklessHttp2Exception;
return v0;
}
}