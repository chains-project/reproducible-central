public final class io.netty.handler.codec.http2.ReadOnlyHttp2Headers extends java.lang.Object implements io.netty.handler.codec.http2.Http2Headers
{
private static final byte PSEUDO_HEADER_TOKEN;
private final io.netty.util.AsciiString[] pseudoHeaders;
private final io.netty.util.AsciiString[] otherHeaders;
static final boolean $assertionsDisabled;
public static transient io.netty.handler.codec.http2.ReadOnlyHttp2Headers trailers(boolean, io.netty.util.AsciiString[])
{
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v2;
io.netty.util.AsciiString[] v1, v3;
boolean v0;
v0 := @parameter0: boolean;
v1 := @parameter1: io.netty.util.AsciiString[];
v2 = new io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v3 = <io.netty.util.internal.EmptyArrays: io.netty.util.AsciiString[] EMPTY_ASCII_STRINGS>;
specialinvoke v2.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: void <init>(boolean,io.netty.util.AsciiString[],io.netty.util.AsciiString[])>(v0, v3, v1);
return v2;
}
public static transient io.netty.handler.codec.http2.ReadOnlyHttp2Headers clientHeaders(boolean, io.netty.util.AsciiString, io.netty.util.AsciiString, io.netty.util.AsciiString, io.netty.util.AsciiString, io.netty.util.AsciiString[])
{
io.netty.util.AsciiString v1, v11, v13, v15, v2, v3, v4, v9;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v6;
boolean v0;
io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName v10, v12, v14, v8;
io.netty.util.AsciiString[] v5, v7;
v0 := @parameter0: boolean;
v1 := @parameter1: io.netty.util.AsciiString;
v2 := @parameter2: io.netty.util.AsciiString;
v3 := @parameter3: io.netty.util.AsciiString;
v4 := @parameter4: io.netty.util.AsciiString;
v5 := @parameter5: io.netty.util.AsciiString[];
v6 = new io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v7 = newarray (io.netty.util.AsciiString)[8];
v8 = <io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName: io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName METHOD>;
v9 = virtualinvoke v8.<io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName: io.netty.util.AsciiString value()>();
v7[0] = v9;
v7[1] = v1;
v10 = <io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName: io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName PATH>;
v11 = virtualinvoke v10.<io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName: io.netty.util.AsciiString value()>();
v7[2] = v11;
v7[3] = v2;
v12 = <io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName: io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName SCHEME>;
v13 = virtualinvoke v12.<io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName: io.netty.util.AsciiString value()>();
v7[4] = v13;
v7[5] = v3;
v14 = <io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName: io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName AUTHORITY>;
v15 = virtualinvoke v14.<io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName: io.netty.util.AsciiString value()>();
v7[6] = v15;
v7[7] = v4;
specialinvoke v6.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: void <init>(boolean,io.netty.util.AsciiString[],io.netty.util.AsciiString[])>(v0, v7, v5);
return v6;
}
public static transient io.netty.handler.codec.http2.ReadOnlyHttp2Headers serverHeaders(boolean, io.netty.util.AsciiString, io.netty.util.AsciiString[])
{
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v3;
io.netty.util.AsciiString v1, v6;
io.netty.util.AsciiString[] v2, v4;
io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName v5;
boolean v0;
v0 := @parameter0: boolean;
v1 := @parameter1: io.netty.util.AsciiString;
v2 := @parameter2: io.netty.util.AsciiString[];
v3 = new io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v4 = newarray (io.netty.util.AsciiString)[2];
v5 = <io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName: io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName STATUS>;
v6 = virtualinvoke v5.<io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName: io.netty.util.AsciiString value()>();
v4[0] = v6;
v4[1] = v1;
specialinvoke v3.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: void <init>(boolean,io.netty.util.AsciiString[],io.netty.util.AsciiString[])>(v0, v4, v2);
return v3;
}
private transient void <init>(boolean, io.netty.util.AsciiString[], io.netty.util.AsciiString[])
{
java.lang.AssertionError v7;
java.lang.IllegalArgumentException v10;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
int v5, v6, v8, v9;
io.netty.util.AsciiString[] v2, v3;
boolean v1, v4;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: boolean;
v2 := @parameter1: io.netty.util.AsciiString[];
v3 := @parameter2: io.netty.util.AsciiString[];
specialinvoke v0.<java.lang.Object: void <init>()>();
v4 = <io.netty.handler.codec.http2.ReadOnlyHttp2Headers: boolean $assertionsDisabled>;
if v4 != 0 goto label1;
v5 = lengthof v2;
v6 = v5 & 1;
if v6 == 0 goto label1;
v7 = new java.lang.AssertionError;
specialinvoke v7.<java.lang.AssertionError: void <init>()>();
throw v7;
label1:
v8 = lengthof v3;
v9 = v8 & 1;
if v9 == 0 goto label2;
v10 = staticinvoke <io.netty.handler.codec.http2.ReadOnlyHttp2Headers: java.lang.IllegalArgumentException newInvalidArraySizeException()>();
throw v10;
label2:
if v1 == 0 goto label3;
staticinvoke <io.netty.handler.codec.http2.ReadOnlyHttp2Headers: void validateHeaders(io.netty.util.AsciiString[],io.netty.util.AsciiString[])>(v2, v3);
label3:
v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString[] pseudoHeaders> = v2;
v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString[] otherHeaders> = v3;
return;
}
private static java.lang.IllegalArgumentException newInvalidArraySizeException()
{
java.lang.IllegalArgumentException v0;
v0 = new java.lang.IllegalArgumentException;
specialinvoke v0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("pseudoHeaders and otherHeaders must be arrays of [name, value] pairs");
return v0;
}
private static transient void validateHeaders(io.netty.util.AsciiString[], io.netty.util.AsciiString[])
{
io.netty.util.AsciiString v18, v4, v9;
byte v12, v14;
int v17, v19, v2, v3, v6, v7, v8;
io.netty.handler.codec.DefaultHeaders$NameValidator v10;
java.lang.String v16;
boolean v11, v13, v5;
java.lang.IllegalArgumentException v15;
io.netty.util.AsciiString[] v0, v1;
v0 := @parameter0: io.netty.util.AsciiString[];
v1 := @parameter1: io.netty.util.AsciiString[];
v2 = 1;
label1:
v3 = lengthof v0;
if v2 >= v3 goto label2;
v4 = v0[v2];
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNullArrayParam(java.lang.Object,int,java.lang.String)>(v4, v2, "pseudoHeaders");
v2 = v2 + 2;
goto label1;
label2:
v5 = 0;
v6 = lengthof v1;
v7 = v6 - 1;
v8 = 0;
label3:
if v8 >= v7 goto label6;
v9 = v1[v8];
v10 = <io.netty.handler.codec.http2.DefaultHttp2Headers: io.netty.handler.codec.DefaultHeaders$NameValidator HTTP2_NAME_VALIDATOR>;
interfaceinvoke v10.<io.netty.handler.codec.DefaultHeaders$NameValidator: void validateName(java.lang.Object)>(v9);
if v5 != 0 goto label4;
v11 = virtualinvoke v9.<io.netty.util.AsciiString: boolean isEmpty()>();
if v11 != 0 goto label4;
v12 = virtualinvoke v9.<io.netty.util.AsciiString: byte byteAt(int)>(0);
if v12 == 58 goto label4;
v5 = 1;
goto label5;
label4:
if v5 == 0 goto label5;
v13 = virtualinvoke v9.<io.netty.util.AsciiString: boolean isEmpty()>();
if v13 != 0 goto label5;
v14 = virtualinvoke v9.<io.netty.util.AsciiString: byte byteAt(int)>(0);
if v14 != 58 goto label5;
v15 = new java.lang.IllegalArgumentException;
v16 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("otherHeaders name at index \u0001 is a pseudo header that appears after non-pseudo headers.");
specialinvoke v15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v16);
throw v15;
label5:
v17 = v8 + 1;
v18 = v1[v17];
v19 = v8 + 1;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNullArrayParam(java.lang.Object,int,java.lang.String)>(v18, v19, "otherHeaders");
v8 = v8 + 2;
goto label3;
label6:
return;
}
private io.netty.util.AsciiString get0(java.lang.CharSequence)
{
io.netty.util.AsciiString v13, v19, v24, v8;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
int v12, v15, v16, v17, v2, v20, v23, v4, v5, v6, v9;
boolean v10, v21;
java.lang.CharSequence v1;
io.netty.util.AsciiString[] v11, v14, v18, v22, v3, v7;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 = staticinvoke <io.netty.util.AsciiString: int hashCode(java.lang.CharSequence)>(v1);
v3 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString[] pseudoHeaders>;
v4 = lengthof v3;
v5 = v4 - 1;
v6 = 0;
label1:
if v6 >= v5 goto label3;
v7 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString[] pseudoHeaders>;
v8 = v7[v6];
v9 = virtualinvoke v8.<io.netty.util.AsciiString: int hashCode()>();
if v9 != v2 goto label2;
v10 = virtualinvoke v8.<io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence)>(v1);
if v10 == 0 goto label2;
v11 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString[] pseudoHeaders>;
v12 = v6 + 1;
v13 = v11[v12];
return v13;
label2:
v6 = v6 + 2;
goto label1;
label3:
v14 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString[] otherHeaders>;
v15 = lengthof v14;
v16 = v15 - 1;
v17 = 0;
label4:
if v17 >= v16 goto label6;
v18 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString[] otherHeaders>;
v19 = v18[v17];
v20 = virtualinvoke v19.<io.netty.util.AsciiString: int hashCode()>();
if v20 != v2 goto label5;
v21 = virtualinvoke v19.<io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence)>(v1);
if v21 == 0 goto label5;
v22 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString[] otherHeaders>;
v23 = v17 + 1;
v24 = v22[v23];
return v24;
label5:
v17 = v17 + 2;
goto label4;
label6:
return null;
}
public java.lang.CharSequence get(java.lang.CharSequence)
{
io.netty.util.AsciiString v2;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 = specialinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString get0(java.lang.CharSequence)>(v1);
return v2;
}
public java.lang.CharSequence get(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v1, v2, v3, v4;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence;
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: java.lang.CharSequence get(java.lang.CharSequence)>(v1);
if v3 == null goto label1;
v4 = v3;
goto label2;
label1:
v4 = v2;
label2:
return v4;
}
public java.lang.CharSequence getAndRemove(java.lang.CharSequence)
{
java.lang.UnsupportedOperationException v2;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v2;
}
public java.lang.CharSequence getAndRemove(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1, v2;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public java.util.List getAll(java.lang.CharSequence)
{
io.netty.util.AsciiString v14, v20, v25, v9;
java.util.ArrayList v3;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
int v10, v13, v16, v17, v18, v2, v21, v24, v5, v6, v7;
boolean v11, v22;
java.lang.CharSequence v1;
io.netty.util.AsciiString[] v12, v15, v19, v23, v4, v8;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 = staticinvoke <io.netty.util.AsciiString: int hashCode(java.lang.CharSequence)>(v1);
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
v4 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString[] pseudoHeaders>;
v5 = lengthof v4;
v6 = v5 - 1;
v7 = 0;
label1:
if v7 >= v6 goto label3;
v8 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString[] pseudoHeaders>;
v9 = v8[v7];
v10 = virtualinvoke v9.<io.netty.util.AsciiString: int hashCode()>();
if v10 != v2 goto label2;
v11 = virtualinvoke v9.<io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence)>(v1);
if v11 == 0 goto label2;
v12 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString[] pseudoHeaders>;
v13 = v7 + 1;
v14 = v12[v13];
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v14);
label2:
v7 = v7 + 2;
goto label1;
label3:
v15 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString[] otherHeaders>;
v16 = lengthof v15;
v17 = v16 - 1;
v18 = 0;
label4:
if v18 >= v17 goto label6;
v19 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString[] otherHeaders>;
v20 = v19[v18];
v21 = virtualinvoke v20.<io.netty.util.AsciiString: int hashCode()>();
if v21 != v2 goto label5;
v22 = virtualinvoke v20.<io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence)>(v1);
if v22 == 0 goto label5;
v23 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString[] otherHeaders>;
v24 = v18 + 1;
v25 = v23[v24];
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v25);
label5:
v18 = v18 + 2;
goto label4;
label6:
return v3;
}
public java.util.List getAllAndRemove(java.lang.CharSequence)
{
java.lang.UnsupportedOperationException v2;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v2;
}
public java.lang.Boolean getBoolean(java.lang.CharSequence)
{
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
io.netty.util.AsciiString v2;
java.lang.Boolean v5;
io.netty.handler.codec.CharSequenceValueConverter v3;
boolean v4;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 = specialinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString get0(java.lang.CharSequence)>(v1);
if v2 == null goto label1;
v3 = <io.netty.handler.codec.CharSequenceValueConverter: io.netty.handler.codec.CharSequenceValueConverter INSTANCE>;
v4 = virtualinvoke v3.<io.netty.handler.codec.CharSequenceValueConverter: boolean convertToBoolean(java.lang.CharSequence)>(v2);
v5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v4);
goto label2;
label1:
v5 = null;
label2:
return v5;
}
public boolean getBoolean(java.lang.CharSequence, boolean)
{
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
java.lang.Boolean v3;
boolean v2, v4;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: boolean;
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: java.lang.Boolean getBoolean(java.lang.CharSequence)>(v1);
if v3 == null goto label1;
v4 = virtualinvoke v3.<java.lang.Boolean: boolean booleanValue()>();
goto label2;
label1:
v4 = v2;
label2:
return v4;
}
public java.lang.Byte getByte(java.lang.CharSequence)
{
byte v4;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
io.netty.util.AsciiString v2;
io.netty.handler.codec.CharSequenceValueConverter v3;
java.lang.Byte v5;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 = specialinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString get0(java.lang.CharSequence)>(v1);
if v2 == null goto label1;
v3 = <io.netty.handler.codec.CharSequenceValueConverter: io.netty.handler.codec.CharSequenceValueConverter INSTANCE>;
v4 = virtualinvoke v3.<io.netty.handler.codec.CharSequenceValueConverter: byte convertToByte(java.lang.CharSequence)>(v2);
v5 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(v4);
goto label2;
label1:
v5 = null;
label2:
return v5;
}
public byte getByte(java.lang.CharSequence, byte)
{
byte v2, v4;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
java.lang.Byte v3;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: byte;
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: java.lang.Byte getByte(java.lang.CharSequence)>(v1);
if v3 == null goto label1;
v4 = virtualinvoke v3.<java.lang.Byte: byte byteValue()>();
goto label2;
label1:
v4 = v2;
label2:
return v4;
}
public java.lang.Character getChar(java.lang.CharSequence)
{
java.lang.CharSequence v1;
java.lang.Character v5;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
io.netty.util.AsciiString v2;
char v4;
io.netty.handler.codec.CharSequenceValueConverter v3;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 = specialinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString get0(java.lang.CharSequence)>(v1);
if v2 == null goto label1;
v3 = <io.netty.handler.codec.CharSequenceValueConverter: io.netty.handler.codec.CharSequenceValueConverter INSTANCE>;
v4 = virtualinvoke v3.<io.netty.handler.codec.CharSequenceValueConverter: char convertToChar(java.lang.CharSequence)>(v2);
v5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(v4);
goto label2;
label1:
v5 = null;
label2:
return v5;
}
public char getChar(java.lang.CharSequence, char)
{
java.lang.CharSequence v1;
java.lang.Character v3;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
char v2, v4;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: char;
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: java.lang.Character getChar(java.lang.CharSequence)>(v1);
if v3 == null goto label1;
v4 = virtualinvoke v3.<java.lang.Character: char charValue()>();
goto label2;
label1:
v4 = v2;
label2:
return v4;
}
public java.lang.Short getShort(java.lang.CharSequence)
{
short v4;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
java.lang.Short v5;
io.netty.util.AsciiString v2;
io.netty.handler.codec.CharSequenceValueConverter v3;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 = specialinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString get0(java.lang.CharSequence)>(v1);
if v2 == null goto label1;
v3 = <io.netty.handler.codec.CharSequenceValueConverter: io.netty.handler.codec.CharSequenceValueConverter INSTANCE>;
v4 = virtualinvoke v3.<io.netty.handler.codec.CharSequenceValueConverter: short convertToShort(java.lang.CharSequence)>(v2);
v5 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(v4);
goto label2;
label1:
v5 = null;
label2:
return v5;
}
public short getShort(java.lang.CharSequence, short)
{
short v2, v4;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
java.lang.Short v3;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: short;
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: java.lang.Short getShort(java.lang.CharSequence)>(v1);
if v3 == null goto label1;
v4 = virtualinvoke v3.<java.lang.Short: short shortValue()>();
goto label2;
label1:
v4 = v2;
label2:
return v4;
}
public java.lang.Integer getInt(java.lang.CharSequence)
{
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
int v4;
io.netty.util.AsciiString v2;
io.netty.handler.codec.CharSequenceValueConverter v3;
java.lang.Integer v5;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 = specialinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString get0(java.lang.CharSequence)>(v1);
if v2 == null goto label1;
v3 = <io.netty.handler.codec.CharSequenceValueConverter: io.netty.handler.codec.CharSequenceValueConverter INSTANCE>;
v4 = virtualinvoke v3.<io.netty.handler.codec.CharSequenceValueConverter: int convertToInt(java.lang.CharSequence)>(v2);
v5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v4);
goto label2;
label1:
v5 = null;
label2:
return v5;
}
public int getInt(java.lang.CharSequence, int)
{
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
int v2, v4;
java.lang.Integer v3;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: java.lang.Integer getInt(java.lang.CharSequence)>(v1);
if v3 == null goto label1;
v4 = virtualinvoke v3.<java.lang.Integer: int intValue()>();
goto label2;
label1:
v4 = v2;
label2:
return v4;
}
public java.lang.Long getLong(java.lang.CharSequence)
{
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
java.lang.Long v5;
io.netty.util.AsciiString v2;
long v4;
io.netty.handler.codec.CharSequenceValueConverter v3;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 = specialinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString get0(java.lang.CharSequence)>(v1);
if v2 == null goto label1;
v3 = <io.netty.handler.codec.CharSequenceValueConverter: io.netty.handler.codec.CharSequenceValueConverter INSTANCE>;
v4 = virtualinvoke v3.<io.netty.handler.codec.CharSequenceValueConverter: long convertToLong(java.lang.CharSequence)>(v2);
v5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v4);
goto label2;
label1:
v5 = null;
label2:
return v5;
}
public long getLong(java.lang.CharSequence, long)
{
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
java.lang.Long v3;
long v2, v4;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: long;
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: java.lang.Long getLong(java.lang.CharSequence)>(v1);
if v3 == null goto label1;
v4 = virtualinvoke v3.<java.lang.Long: long longValue()>();
goto label2;
label1:
v4 = v2;
label2:
return v4;
}
public java.lang.Float getFloat(java.lang.CharSequence)
{
java.lang.Float v5;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
float v4;
io.netty.util.AsciiString v2;
io.netty.handler.codec.CharSequenceValueConverter v3;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 = specialinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString get0(java.lang.CharSequence)>(v1);
if v2 == null goto label1;
v3 = <io.netty.handler.codec.CharSequenceValueConverter: io.netty.handler.codec.CharSequenceValueConverter INSTANCE>;
v4 = virtualinvoke v3.<io.netty.handler.codec.CharSequenceValueConverter: float convertToFloat(java.lang.CharSequence)>(v2);
v5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(v4);
goto label2;
label1:
v5 = null;
label2:
return v5;
}
public float getFloat(java.lang.CharSequence, float)
{
java.lang.Float v3;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
float v2, v4;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: float;
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: java.lang.Float getFloat(java.lang.CharSequence)>(v1);
if v3 == null goto label1;
v4 = virtualinvoke v3.<java.lang.Float: float floatValue()>();
goto label2;
label1:
v4 = v2;
label2:
return v4;
}
public java.lang.Double getDouble(java.lang.CharSequence)
{
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
java.lang.Double v5;
io.netty.util.AsciiString v2;
io.netty.handler.codec.CharSequenceValueConverter v3;
double v4;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 = specialinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString get0(java.lang.CharSequence)>(v1);
if v2 == null goto label1;
v3 = <io.netty.handler.codec.CharSequenceValueConverter: io.netty.handler.codec.CharSequenceValueConverter INSTANCE>;
v4 = virtualinvoke v3.<io.netty.handler.codec.CharSequenceValueConverter: double convertToDouble(java.lang.CharSequence)>(v2);
v5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(v4);
goto label2;
label1:
v5 = null;
label2:
return v5;
}
public double getDouble(java.lang.CharSequence, double)
{
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
java.lang.Double v3;
double v2, v4;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: double;
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: java.lang.Double getDouble(java.lang.CharSequence)>(v1);
if v3 == null goto label1;
v4 = virtualinvoke v3.<java.lang.Double: double doubleValue()>();
goto label2;
label1:
v4 = v2;
label2:
return v4;
}
public java.lang.Long getTimeMillis(java.lang.CharSequence)
{
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
java.lang.Long v5;
io.netty.util.AsciiString v2;
long v4;
io.netty.handler.codec.CharSequenceValueConverter v3;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 = specialinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString get0(java.lang.CharSequence)>(v1);
if v2 == null goto label1;
v3 = <io.netty.handler.codec.CharSequenceValueConverter: io.netty.handler.codec.CharSequenceValueConverter INSTANCE>;
v4 = virtualinvoke v3.<io.netty.handler.codec.CharSequenceValueConverter: long convertToTimeMillis(java.lang.CharSequence)>(v2);
v5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v4);
goto label2;
label1:
v5 = null;
label2:
return v5;
}
public long getTimeMillis(java.lang.CharSequence, long)
{
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
java.lang.Long v3;
long v2, v4;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: long;
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: java.lang.Long getTimeMillis(java.lang.CharSequence)>(v1);
if v3 == null goto label1;
v4 = virtualinvoke v3.<java.lang.Long: long longValue()>();
goto label2;
label1:
v4 = v2;
label2:
return v4;
}
public java.lang.Boolean getBooleanAndRemove(java.lang.CharSequence)
{
java.lang.UnsupportedOperationException v2;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v2;
}
public boolean getBooleanAndRemove(java.lang.CharSequence, boolean)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
boolean v2;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: boolean;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public java.lang.Byte getByteAndRemove(java.lang.CharSequence)
{
java.lang.UnsupportedOperationException v2;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v2;
}
public byte getByteAndRemove(java.lang.CharSequence, byte)
{
java.lang.UnsupportedOperationException v3;
byte v2;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: byte;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public java.lang.Character getCharAndRemove(java.lang.CharSequence)
{
java.lang.UnsupportedOperationException v2;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v2;
}
public char getCharAndRemove(java.lang.CharSequence, char)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
char v2;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: char;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public java.lang.Short getShortAndRemove(java.lang.CharSequence)
{
java.lang.UnsupportedOperationException v2;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v2;
}
public short getShortAndRemove(java.lang.CharSequence, short)
{
java.lang.UnsupportedOperationException v3;
short v2;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: short;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public java.lang.Integer getIntAndRemove(java.lang.CharSequence)
{
java.lang.UnsupportedOperationException v2;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v2;
}
public int getIntAndRemove(java.lang.CharSequence, int)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
int v2;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public java.lang.Long getLongAndRemove(java.lang.CharSequence)
{
java.lang.UnsupportedOperationException v2;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v2;
}
public long getLongAndRemove(java.lang.CharSequence, long)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
long v2;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: long;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public java.lang.Float getFloatAndRemove(java.lang.CharSequence)
{
java.lang.UnsupportedOperationException v2;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v2;
}
public float getFloatAndRemove(java.lang.CharSequence, float)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
float v2;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: float;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public java.lang.Double getDoubleAndRemove(java.lang.CharSequence)
{
java.lang.UnsupportedOperationException v2;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v2;
}
public double getDoubleAndRemove(java.lang.CharSequence, double)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
double v2;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: double;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public java.lang.Long getTimeMillisAndRemove(java.lang.CharSequence)
{
java.lang.UnsupportedOperationException v2;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v2;
}
public long getTimeMillisAndRemove(java.lang.CharSequence, long)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
long v2;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: long;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public boolean contains(java.lang.CharSequence)
{
java.lang.CharSequence v1, v2;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
boolean v3;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 = virtualinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: java.lang.CharSequence get(java.lang.CharSequence)>(v1);
if v2 == null goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean contains(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v1, v2;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
boolean v3;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence;
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)>(v1, v2, 0);
return v3;
}
public boolean containsObject(java.lang.CharSequence, java.lang.Object)
{
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
java.lang.Object v2;
java.lang.String v5;
boolean v3, v4, v6;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Object;
v3 = v2 instanceof java.lang.CharSequence;
if v3 == 0 goto label1;
v4 = virtualinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: boolean contains(java.lang.CharSequence,java.lang.CharSequence)>(v1, v2);
return v4;
label1:
v5 = virtualinvoke v2.<java.lang.Object: java.lang.String toString()>();
v6 = virtualinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: boolean contains(java.lang.CharSequence,java.lang.CharSequence)>(v1, v5);
return v6;
}
public boolean containsBoolean(java.lang.CharSequence, boolean)
{
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
java.lang.String v3;
boolean v2, v4;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: boolean;
v3 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(v2);
v4 = virtualinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: boolean contains(java.lang.CharSequence,java.lang.CharSequence)>(v1, v3);
return v4;
}
public boolean containsByte(java.lang.CharSequence, byte)
{
byte v2;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
java.lang.String v3;
boolean v4;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: byte;
v3 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(v2);
v4 = virtualinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: boolean contains(java.lang.CharSequence,java.lang.CharSequence)>(v1, v3);
return v4;
}
public boolean containsChar(java.lang.CharSequence, char)
{
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
char v2;
java.lang.String v3;
boolean v4;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: char;
v3 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(v2);
v4 = virtualinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: boolean contains(java.lang.CharSequence,java.lang.CharSequence)>(v1, v3);
return v4;
}
public boolean containsShort(java.lang.CharSequence, short)
{
short v2;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
java.lang.String v3;
boolean v4;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: short;
v3 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(v2);
v4 = virtualinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: boolean contains(java.lang.CharSequence,java.lang.CharSequence)>(v1, v3);
return v4;
}
public boolean containsInt(java.lang.CharSequence, int)
{
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
int v2;
java.lang.String v3;
boolean v4;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(v2);
v4 = virtualinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: boolean contains(java.lang.CharSequence,java.lang.CharSequence)>(v1, v3);
return v4;
}
public boolean containsLong(java.lang.CharSequence, long)
{
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
long v2;
java.lang.String v3;
boolean v4;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: long;
v3 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(v2);
v4 = virtualinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: boolean contains(java.lang.CharSequence,java.lang.CharSequence)>(v1, v3);
return v4;
}
public boolean containsFloat(java.lang.CharSequence, float)
{
float v2;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: float;
return 0;
}
public boolean containsDouble(java.lang.CharSequence, double)
{
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
java.lang.String v3;
boolean v4;
double v2;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: double;
v3 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>(v2);
v4 = virtualinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: boolean contains(java.lang.CharSequence,java.lang.CharSequence)>(v1, v3);
return v4;
}
public boolean containsTimeMillis(java.lang.CharSequence, long)
{
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
long v2;
java.lang.String v3;
boolean v4;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: long;
v3 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(v2);
v4 = virtualinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: boolean contains(java.lang.CharSequence,java.lang.CharSequence)>(v1, v3);
return v4;
}
public int size()
{
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
int v2, v4, v5, v6;
io.netty.util.AsciiString[] v1, v3;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString[] pseudoHeaders>;
v2 = lengthof v1;
v3 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString[] otherHeaders>;
v4 = lengthof v3;
v5 = v2 + v4;
v6 = v5 >>> 1;
return v6;
}
public boolean isEmpty()
{
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
int v2, v4;
io.netty.util.AsciiString[] v1, v3;
boolean v5;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString[] pseudoHeaders>;
v2 = lengthof v1;
if v2 != 0 goto label1;
v3 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString[] otherHeaders>;
v4 = lengthof v3;
if v4 != 0 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
public java.util.Set names()
{
io.netty.util.AsciiString v10, v16;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
int v12, v13, v14, v4, v6, v7, v8;
java.util.LinkedHashSet v3;
boolean v1;
java.util.Set v2;
io.netty.util.AsciiString[] v11, v15, v5, v9;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 = virtualinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: boolean isEmpty()>();
if v1 == 0 goto label1;
v2 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
return v2;
label1:
v3 = new java.util.LinkedHashSet;
v4 = virtualinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: int size()>();
specialinvoke v3.<java.util.LinkedHashSet: void <init>(int)>(v4);
v5 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString[] pseudoHeaders>;
v6 = lengthof v5;
v7 = v6 - 1;
v8 = 0;
label2:
if v8 >= v7 goto label3;
v9 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString[] pseudoHeaders>;
v10 = v9[v8];
interfaceinvoke v3.<java.util.Set: boolean add(java.lang.Object)>(v10);
v8 = v8 + 2;
goto label2;
label3:
v11 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString[] otherHeaders>;
v12 = lengthof v11;
v13 = v12 - 1;
v14 = 0;
label4:
if v14 >= v13 goto label5;
v15 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString[] otherHeaders>;
v16 = v15[v14];
interfaceinvoke v3.<java.util.Set: boolean add(java.lang.Object)>(v16);
v14 = v14 + 2;
goto label4;
label5:
return v3;
}
public io.netty.handler.codec.http2.Http2Headers add(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1, v2;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http2.Http2Headers add(java.lang.CharSequence, java.lang.Iterable)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
java.lang.Iterable v2;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Iterable;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public transient io.netty.handler.codec.http2.Http2Headers add(java.lang.CharSequence, java.lang.CharSequence[])
{
java.lang.CharSequence[] v2;
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence[];
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http2.Http2Headers addObject(java.lang.CharSequence, java.lang.Object)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
java.lang.Object v2;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Object;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http2.Http2Headers addObject(java.lang.CharSequence, java.lang.Iterable)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
java.lang.Iterable v2;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Iterable;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public transient io.netty.handler.codec.http2.Http2Headers addObject(java.lang.CharSequence, java.lang.Object[])
{
java.lang.UnsupportedOperationException v3;
java.lang.Object[] v2;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Object[];
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http2.Http2Headers addBoolean(java.lang.CharSequence, boolean)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
boolean v2;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: boolean;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http2.Http2Headers addByte(java.lang.CharSequence, byte)
{
java.lang.UnsupportedOperationException v3;
byte v2;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: byte;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http2.Http2Headers addChar(java.lang.CharSequence, char)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
char v2;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: char;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http2.Http2Headers addShort(java.lang.CharSequence, short)
{
java.lang.UnsupportedOperationException v3;
short v2;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: short;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http2.Http2Headers addInt(java.lang.CharSequence, int)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
int v2;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http2.Http2Headers addLong(java.lang.CharSequence, long)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
long v2;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: long;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http2.Http2Headers addFloat(java.lang.CharSequence, float)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
float v2;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: float;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http2.Http2Headers addDouble(java.lang.CharSequence, double)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
double v2;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: double;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http2.Http2Headers addTimeMillis(java.lang.CharSequence, long)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
long v2;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: long;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http2.Http2Headers add(io.netty.handler.codec.Headers)
{
io.netty.handler.codec.Headers v1;
java.lang.UnsupportedOperationException v2;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: io.netty.handler.codec.Headers;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v2;
}
public io.netty.handler.codec.http2.Http2Headers set(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1, v2;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http2.Http2Headers set(java.lang.CharSequence, java.lang.Iterable)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
java.lang.Iterable v2;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Iterable;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public transient io.netty.handler.codec.http2.Http2Headers set(java.lang.CharSequence, java.lang.CharSequence[])
{
java.lang.CharSequence[] v2;
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence[];
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http2.Http2Headers setObject(java.lang.CharSequence, java.lang.Object)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
java.lang.Object v2;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Object;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http2.Http2Headers setObject(java.lang.CharSequence, java.lang.Iterable)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
java.lang.Iterable v2;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Iterable;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public transient io.netty.handler.codec.http2.Http2Headers setObject(java.lang.CharSequence, java.lang.Object[])
{
java.lang.UnsupportedOperationException v3;
java.lang.Object[] v2;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.Object[];
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http2.Http2Headers setBoolean(java.lang.CharSequence, boolean)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
boolean v2;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: boolean;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http2.Http2Headers setByte(java.lang.CharSequence, byte)
{
java.lang.UnsupportedOperationException v3;
byte v2;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: byte;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http2.Http2Headers setChar(java.lang.CharSequence, char)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
char v2;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: char;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http2.Http2Headers setShort(java.lang.CharSequence, short)
{
java.lang.UnsupportedOperationException v3;
short v2;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: short;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http2.Http2Headers setInt(java.lang.CharSequence, int)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
int v2;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http2.Http2Headers setLong(java.lang.CharSequence, long)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
long v2;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: long;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http2.Http2Headers setFloat(java.lang.CharSequence, float)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
float v2;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: float;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http2.Http2Headers setDouble(java.lang.CharSequence, double)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
double v2;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: double;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http2.Http2Headers setTimeMillis(java.lang.CharSequence, long)
{
java.lang.UnsupportedOperationException v3;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
long v2;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: long;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v3;
}
public io.netty.handler.codec.http2.Http2Headers set(io.netty.handler.codec.Headers)
{
io.netty.handler.codec.Headers v1;
java.lang.UnsupportedOperationException v2;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: io.netty.handler.codec.Headers;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v2;
}
public io.netty.handler.codec.http2.Http2Headers setAll(io.netty.handler.codec.Headers)
{
io.netty.handler.codec.Headers v1;
java.lang.UnsupportedOperationException v2;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: io.netty.handler.codec.Headers;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v2;
}
public boolean remove(java.lang.CharSequence)
{
java.lang.UnsupportedOperationException v2;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v2;
}
public io.netty.handler.codec.http2.Http2Headers clear()
{
java.lang.UnsupportedOperationException v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v1;
}
public java.util.Iterator iterator()
{
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator v1;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 = new io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator;
specialinvoke v1.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyIterator: void <init>(io.netty.handler.codec.http2.ReadOnlyHttp2Headers)>(v0);
return v1;
}
public java.util.Iterator valueIterator(java.lang.CharSequence)
{
io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyValueIterator v2;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 = new io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyValueIterator;
specialinvoke v2.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers$ReadOnlyValueIterator: void <init>(io.netty.handler.codec.http2.ReadOnlyHttp2Headers,java.lang.CharSequence)>(v0, v1);
return v2;
}
public io.netty.handler.codec.http2.Http2Headers method(java.lang.CharSequence)
{
java.lang.UnsupportedOperationException v2;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v2;
}
public io.netty.handler.codec.http2.Http2Headers scheme(java.lang.CharSequence)
{
java.lang.UnsupportedOperationException v2;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v2;
}
public io.netty.handler.codec.http2.Http2Headers authority(java.lang.CharSequence)
{
java.lang.UnsupportedOperationException v2;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v2;
}
public io.netty.handler.codec.http2.Http2Headers path(java.lang.CharSequence)
{
java.lang.UnsupportedOperationException v2;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v2;
}
public io.netty.handler.codec.http2.Http2Headers status(java.lang.CharSequence)
{
java.lang.UnsupportedOperationException v2;
java.lang.CharSequence v1;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("read only");
throw v2;
}
public java.lang.CharSequence method()
{
java.lang.CharSequence v3;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
io.netty.util.AsciiString v2;
io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName v1;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 = <io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName: io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName METHOD>;
v2 = virtualinvoke v1.<io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName: io.netty.util.AsciiString value()>();
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: java.lang.CharSequence get(java.lang.CharSequence)>(v2);
return v3;
}
public java.lang.CharSequence scheme()
{
java.lang.CharSequence v3;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
io.netty.util.AsciiString v2;
io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName v1;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 = <io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName: io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName SCHEME>;
v2 = virtualinvoke v1.<io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName: io.netty.util.AsciiString value()>();
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: java.lang.CharSequence get(java.lang.CharSequence)>(v2);
return v3;
}
public java.lang.CharSequence authority()
{
java.lang.CharSequence v3;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
io.netty.util.AsciiString v2;
io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName v1;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 = <io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName: io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName AUTHORITY>;
v2 = virtualinvoke v1.<io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName: io.netty.util.AsciiString value()>();
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: java.lang.CharSequence get(java.lang.CharSequence)>(v2);
return v3;
}
public java.lang.CharSequence path()
{
java.lang.CharSequence v3;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
io.netty.util.AsciiString v2;
io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName v1;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 = <io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName: io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName PATH>;
v2 = virtualinvoke v1.<io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName: io.netty.util.AsciiString value()>();
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: java.lang.CharSequence get(java.lang.CharSequence)>(v2);
return v3;
}
public java.lang.CharSequence status()
{
java.lang.CharSequence v3;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
io.netty.util.AsciiString v2;
io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName v1;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 = <io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName: io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName STATUS>;
v2 = virtualinvoke v1.<io.netty.handler.codec.http2.Http2Headers$PseudoHeaderName: io.netty.util.AsciiString value()>();
v3 = virtualinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: java.lang.CharSequence get(java.lang.CharSequence)>(v2);
return v3;
}
public boolean contains(java.lang.CharSequence, java.lang.CharSequence, boolean)
{
java.lang.CharSequence v1, v2;
io.netty.util.HashingStrategy v5;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
int v4, v6;
io.netty.util.AsciiString[] v7, v9;
boolean v10, v11, v3, v8;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.lang.CharSequence;
v3 := @parameter2: boolean;
v4 = staticinvoke <io.netty.util.AsciiString: int hashCode(java.lang.CharSequence)>(v1);
if v3 == 0 goto label1;
v5 = <io.netty.util.AsciiString: io.netty.util.HashingStrategy CASE_INSENSITIVE_HASHER>;
goto label2;
label1:
v5 = <io.netty.util.AsciiString: io.netty.util.HashingStrategy CASE_SENSITIVE_HASHER>;
label2:
v6 = interfaceinvoke v5.<io.netty.util.HashingStrategy: int hashCode(java.lang.Object)>(v2);
v7 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString[] otherHeaders>;
v8 = staticinvoke <io.netty.handler.codec.http2.ReadOnlyHttp2Headers: boolean contains(java.lang.CharSequence,int,java.lang.CharSequence,int,io.netty.util.HashingStrategy,io.netty.util.AsciiString[])>(v1, v4, v2, v6, v5, v7);
if v8 != 0 goto label3;
v9 = v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: io.netty.util.AsciiString[] pseudoHeaders>;
v10 = staticinvoke <io.netty.handler.codec.http2.ReadOnlyHttp2Headers: boolean contains(java.lang.CharSequence,int,java.lang.CharSequence,int,io.netty.util.HashingStrategy,io.netty.util.AsciiString[])>(v1, v4, v2, v6, v5, v9);
if v10 == 0 goto label4;
label3:
v11 = 1;
goto label5;
label4:
v11 = 0;
label5:
return v11;
}
private static boolean contains(java.lang.CharSequence, int, java.lang.CharSequence, int, io.netty.util.HashingStrategy, io.netty.util.AsciiString[])
{
io.netty.util.AsciiString v11, v9;
io.netty.util.HashingStrategy v4;
int v1, v10, v12, v13, v3, v6, v7, v8;
boolean v14, v15;
java.lang.CharSequence v0, v2;
io.netty.util.AsciiString[] v5;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: int;
v2 := @parameter2: java.lang.CharSequence;
v3 := @parameter3: int;
v4 := @parameter4: io.netty.util.HashingStrategy;
v5 := @parameter5: io.netty.util.AsciiString[];
v6 = lengthof v5;
v7 = v6 - 1;
v8 = 0;
label1:
if v8 >= v7 goto label3;
v9 = v5[v8];
v10 = v8 + 1;
v11 = v5[v10];
v12 = virtualinvoke v9.<io.netty.util.AsciiString: int hashCode()>();
if v12 != v1 goto label2;
v13 = virtualinvoke v11.<io.netty.util.AsciiString: int hashCode()>();
if v13 != v3 goto label2;
v14 = virtualinvoke v9.<io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence)>(v0);
if v14 == 0 goto label2;
v15 = interfaceinvoke v4.<io.netty.util.HashingStrategy: boolean equals(java.lang.Object,java.lang.Object)>(v11, v2);
if v15 == 0 goto label2;
return 1;
label2:
v8 = v8 + 2;
goto label1;
label3:
return 0;
}
public java.lang.String toString()
{
java.util.Iterator v4;
io.netty.handler.codec.http2.ReadOnlyHttp2Headers v0;
java.lang.Class v1;
java.lang.Object v6, v7, v8;
java.lang.StringBuilder v10, v11, v12;
java.lang.String v2, v3, v9;
boolean v5;
v0 := @this: io.netty.handler.codec.http2.ReadOnlyHttp2Headers;
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v2 = virtualinvoke v1.<java.lang.Class: java.lang.String getSimpleName()>();
specialinvoke v10.<java.lang.StringBuilder: void <init>(java.lang.String)>(v2);
v3 = "";
v4 = virtualinvoke v0.<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v3);
v7 = interfaceinvoke v6.<java.util.Map$Entry: java.lang.Object getKey()>();
v8 = interfaceinvoke v6.<java.util.Map$Entry: java.lang.Object getValue()>();
virtualinvoke v12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(v8);
v3 = ", ";
goto label1;
label2:
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.CharSequence)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("[\u0001: ]");
return v9;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/handler/codec/http2/ReadOnlyHttp2Headers;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.handler.codec.http2.ReadOnlyHttp2Headers: boolean $assertionsDisabled> = v2;
return;
}
}