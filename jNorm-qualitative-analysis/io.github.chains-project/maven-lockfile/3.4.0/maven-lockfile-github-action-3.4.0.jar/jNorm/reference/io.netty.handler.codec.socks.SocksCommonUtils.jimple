final class io.netty.handler.codec.socks.SocksCommonUtils extends java.lang.Object
{
public static final io.netty.handler.codec.socks.SocksRequest UNKNOWN_SOCKS_REQUEST;
public static final io.netty.handler.codec.socks.SocksResponse UNKNOWN_SOCKS_RESPONSE;
private static final char ipv6hextetSeparator;
static final boolean $assertionsDisabled;
private void <init>()
{
io.netty.handler.codec.socks.SocksCommonUtils v0;
v0 := @this: io.netty.handler.codec.socks.SocksCommonUtils;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.lang.String ipv6toStr(byte[])
{
byte[] v0;
int v2;
java.lang.StringBuilder v4;
java.lang.AssertionError v3;
java.lang.String v5;
boolean v1;
v0 := @parameter0: byte[];
v1 = <io.netty.handler.codec.socks.SocksCommonUtils: boolean $assertionsDisabled>;
if v1 != 0 goto label1;
v2 = lengthof v0;
if v2 == 16 goto label1;
v3 = new java.lang.AssertionError;
specialinvoke v3.<java.lang.AssertionError: void <init>()>();
throw v3;
label1:
v4 = new java.lang.StringBuilder;
specialinvoke v4.<java.lang.StringBuilder: void <init>(int)>(39);
staticinvoke <io.netty.handler.codec.socks.SocksCommonUtils: void ipv6toStr(java.lang.StringBuilder,byte[],int,int)>(v4, v0, 0, 8);
v5 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.String toString()>();
return v5;
}
private static void ipv6toStr(java.lang.StringBuilder, byte[], int, int)
{
byte[] v1;
int v2, v3, v4, v5;
java.lang.StringBuilder v0;
v0 := @parameter0: java.lang.StringBuilder;
v1 := @parameter1: byte[];
v2 := @parameter2: int;
v3 := @parameter3: int;
v4 = v3 - 1;
v5 = v2;
label1:
if v5 >= v4 goto label2;
staticinvoke <io.netty.handler.codec.socks.SocksCommonUtils: void appendHextet(java.lang.StringBuilder,byte[],int)>(v0, v1, v5);
virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);
v5 = v5 + 1;
goto label1;
label2:
staticinvoke <io.netty.handler.codec.socks.SocksCommonUtils: void appendHextet(java.lang.StringBuilder,byte[],int)>(v0, v1, v5);
return;
}
private static void appendHextet(java.lang.StringBuilder, byte[], int)
{
byte[] v1;
int v2, v3;
java.lang.StringBuilder v0;
v0 := @parameter0: java.lang.StringBuilder;
v1 := @parameter1: byte[];
v2 := @parameter2: int;
v3 = v2 << 1;
staticinvoke <io.netty.util.internal.StringUtil: java.lang.Appendable toHexString(java.lang.Appendable,byte[],int,int)>(v0, v1, v3, 2);
return;
}
static java.lang.String readUsAscii(io.netty.buffer.ByteBuf, int)
{
io.netty.buffer.ByteBuf v0;
java.nio.charset.Charset v3;
int v1, v2;
java.lang.String v4;
v0 := @parameter0: io.netty.buffer.ByteBuf;
v1 := @parameter1: int;
v2 = virtualinvoke v0.<io.netty.buffer.ByteBuf: int readerIndex()>();
v3 = <io.netty.util.CharsetUtil: java.nio.charset.Charset US_ASCII>;
v4 = virtualinvoke v0.<io.netty.buffer.ByteBuf: java.lang.String toString(int,int,java.nio.charset.Charset)>(v2, v1, v3);
virtualinvoke v0.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf skipBytes(int)>(v1);
return v4;
}
static void <clinit>()
{
io.netty.handler.codec.socks.UnknownSocksResponse v4;
java.lang.Class v0;
boolean v1, v2;
io.netty.handler.codec.socks.UnknownSocksRequest v3;
v0 = class "Lio/netty/handler/codec/socks/SocksCommonUtils;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.handler.codec.socks.SocksCommonUtils: boolean $assertionsDisabled> = v2;
v3 = new io.netty.handler.codec.socks.UnknownSocksRequest;
specialinvoke v3.<io.netty.handler.codec.socks.UnknownSocksRequest: void <init>()>();
<io.netty.handler.codec.socks.SocksCommonUtils: io.netty.handler.codec.socks.SocksRequest UNKNOWN_SOCKS_REQUEST> = v3;
v4 = new io.netty.handler.codec.socks.UnknownSocksResponse;
specialinvoke v4.<io.netty.handler.codec.socks.UnknownSocksResponse: void <init>()>();
<io.netty.handler.codec.socks.SocksCommonUtils: io.netty.handler.codec.socks.SocksResponse UNKNOWN_SOCKS_RESPONSE> = v4;
return;
}
}