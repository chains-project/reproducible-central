public final class io.netty.handler.codec.socksx.v4.Socks4ClientEncoder extends io.netty.handler.codec.MessageToByteEncoder
{
public static final io.netty.handler.codec.socksx.v4.Socks4ClientEncoder INSTANCE;
private static final byte[] IPv4_DOMAIN_MARKER;
private void <init>()
{
io.netty.handler.codec.socksx.v4.Socks4ClientEncoder v0;
v0 := @this: io.netty.handler.codec.socksx.v4.Socks4ClientEncoder;
specialinvoke v0.<io.netty.handler.codec.MessageToByteEncoder: void <init>()>();
return;
}
protected void encode(io.netty.channel.ChannelHandlerContext, io.netty.handler.codec.socksx.v4.Socks4CommandRequest, io.netty.buffer.ByteBuf) throws java.lang.Exception
{
byte[] v12, v14;
io.netty.handler.codec.socksx.v4.Socks4CommandType v6;
io.netty.channel.ChannelHandlerContext v1;
byte v5, v7;
io.netty.buffer.ByteBuf v3;
io.netty.handler.codec.socksx.v4.Socks4CommandRequest v2;
int v8;
io.netty.handler.codec.socksx.v4.Socks4ClientEncoder v0;
java.lang.String v11, v13, v15, v16, v9;
boolean v10;
io.netty.handler.codec.socksx.SocksVersion v4;
v0 := @this: io.netty.handler.codec.socksx.v4.Socks4ClientEncoder;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.handler.codec.socksx.v4.Socks4CommandRequest;
v3 := @parameter2: io.netty.buffer.ByteBuf;
v4 = interfaceinvoke v2.<io.netty.handler.codec.socksx.v4.Socks4CommandRequest: io.netty.handler.codec.socksx.SocksVersion version()>();
v5 = virtualinvoke v4.<io.netty.handler.codec.socksx.SocksVersion: byte byteValue()>();
virtualinvoke v3.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeByte(int)>(v5);
v6 = interfaceinvoke v2.<io.netty.handler.codec.socksx.v4.Socks4CommandRequest: io.netty.handler.codec.socksx.v4.Socks4CommandType type()>();
v7 = virtualinvoke v6.<io.netty.handler.codec.socksx.v4.Socks4CommandType: byte byteValue()>();
virtualinvoke v3.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeByte(int)>(v7);
v8 = interfaceinvoke v2.<io.netty.handler.codec.socksx.v4.Socks4CommandRequest: int dstPort()>();
virtualinvoke v3.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeShort(int)>(v8);
v9 = interfaceinvoke v2.<io.netty.handler.codec.socksx.v4.Socks4CommandRequest: java.lang.String dstAddr()>();
v10 = staticinvoke <io.netty.util.NetUtil: boolean isValidIpV4Address(java.lang.String)>(v9);
if v10 == 0 goto label1;
v11 = interfaceinvoke v2.<io.netty.handler.codec.socksx.v4.Socks4CommandRequest: java.lang.String dstAddr()>();
v12 = staticinvoke <io.netty.util.NetUtil: byte[] createByteArrayFromIpAddressString(java.lang.String)>(v11);
virtualinvoke v3.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeBytes(byte[])>(v12);
v13 = interfaceinvoke v2.<io.netty.handler.codec.socksx.v4.Socks4CommandRequest: java.lang.String userId()>();
staticinvoke <io.netty.buffer.ByteBufUtil: int writeAscii(io.netty.buffer.ByteBuf,java.lang.CharSequence)>(v3, v13);
virtualinvoke v3.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeByte(int)>(0);
goto label2;
label1:
v14 = <io.netty.handler.codec.socksx.v4.Socks4ClientEncoder: byte[] IPv4_DOMAIN_MARKER>;
virtualinvoke v3.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeBytes(byte[])>(v14);
v15 = interfaceinvoke v2.<io.netty.handler.codec.socksx.v4.Socks4CommandRequest: java.lang.String userId()>();
staticinvoke <io.netty.buffer.ByteBufUtil: int writeAscii(io.netty.buffer.ByteBuf,java.lang.CharSequence)>(v3, v15);
virtualinvoke v3.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeByte(int)>(0);
v16 = interfaceinvoke v2.<io.netty.handler.codec.socksx.v4.Socks4CommandRequest: java.lang.String dstAddr()>();
staticinvoke <io.netty.buffer.ByteBufUtil: int writeAscii(io.netty.buffer.ByteBuf,java.lang.CharSequence)>(v3, v16);
virtualinvoke v3.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writeByte(int)>(0);
label2:
return;
}
static void <clinit>()
{
byte[] v1;
io.netty.handler.codec.socksx.v4.Socks4ClientEncoder v0;
v0 = new io.netty.handler.codec.socksx.v4.Socks4ClientEncoder;
specialinvoke v0.<io.netty.handler.codec.socksx.v4.Socks4ClientEncoder: void <init>()>();
<io.netty.handler.codec.socksx.v4.Socks4ClientEncoder: io.netty.handler.codec.socksx.v4.Socks4ClientEncoder INSTANCE> = v0;
v1 = newarray (byte)[4];
v1[0] = 0;
v1[1] = 0;
v1[2] = 0;
v1[3] = 1;
<io.netty.handler.codec.socksx.v4.Socks4ClientEncoder: byte[] IPv4_DOMAIN_MARKER> = v1;
return;
}
}