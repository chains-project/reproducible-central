final class io.netty.handler.codec.spdy.SpdySession extends java.lang.Object
{
private final java.util.concurrent.atomic.AtomicInteger activeLocalStreams;
private final java.util.concurrent.atomic.AtomicInteger activeRemoteStreams;
private final java.util.Map activeStreams;
private final io.netty.handler.codec.spdy.SpdySession$StreamComparator streamComparator;
private final java.util.concurrent.atomic.AtomicInteger sendWindowSize;
private final java.util.concurrent.atomic.AtomicInteger receiveWindowSize;
void <init>(int, int)
{
io.netty.handler.codec.spdy.SpdySession v0;
io.netty.handler.codec.spdy.SpdySession$StreamComparator v6;
java.util.concurrent.ConcurrentMap v5;
java.util.concurrent.atomic.AtomicInteger v3, v4, v7, v8;
int v1, v2;
v0 := @this: io.netty.handler.codec.spdy.SpdySession;
v1 := @parameter0: int;
v2 := @parameter1: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v3.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.netty.handler.codec.spdy.SpdySession: java.util.concurrent.atomic.AtomicInteger activeLocalStreams> = v3;
v4 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v4.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.netty.handler.codec.spdy.SpdySession: java.util.concurrent.atomic.AtomicInteger activeRemoteStreams> = v4;
v5 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.concurrent.ConcurrentMap newConcurrentHashMap()>();
v0.<io.netty.handler.codec.spdy.SpdySession: java.util.Map activeStreams> = v5;
v6 = new io.netty.handler.codec.spdy.SpdySession$StreamComparator;
specialinvoke v6.<io.netty.handler.codec.spdy.SpdySession$StreamComparator: void <init>(io.netty.handler.codec.spdy.SpdySession)>(v0);
v0.<io.netty.handler.codec.spdy.SpdySession: io.netty.handler.codec.spdy.SpdySession$StreamComparator streamComparator> = v6;
v7 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v7.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(v1);
v0.<io.netty.handler.codec.spdy.SpdySession: java.util.concurrent.atomic.AtomicInteger sendWindowSize> = v7;
v8 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v8.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(v2);
v0.<io.netty.handler.codec.spdy.SpdySession: java.util.concurrent.atomic.AtomicInteger receiveWindowSize> = v8;
return;
}
int numActiveStreams(boolean)
{
io.netty.handler.codec.spdy.SpdySession v0;
java.util.concurrent.atomic.AtomicInteger v2, v4;
int v3, v5;
boolean v1;
v0 := @this: io.netty.handler.codec.spdy.SpdySession;
v1 := @parameter0: boolean;
if v1 == 0 goto label1;
v2 = v0.<io.netty.handler.codec.spdy.SpdySession: java.util.concurrent.atomic.AtomicInteger activeRemoteStreams>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicInteger: int get()>();
return v3;
label1:
v4 = v0.<io.netty.handler.codec.spdy.SpdySession: java.util.concurrent.atomic.AtomicInteger activeLocalStreams>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicInteger: int get()>();
return v5;
}
boolean noActiveStreams()
{
io.netty.handler.codec.spdy.SpdySession v0;
boolean v2;
java.util.Map v1;
v0 := @this: io.netty.handler.codec.spdy.SpdySession;
v1 = v0.<io.netty.handler.codec.spdy.SpdySession: java.util.Map activeStreams>;
v2 = interfaceinvoke v1.<java.util.Map: boolean isEmpty()>();
return v2;
}
boolean isActiveStream(int)
{
io.netty.handler.codec.spdy.SpdySession v0;
java.util.Map v2;
int v1;
java.lang.Integer v3;
boolean v4;
v0 := @this: io.netty.handler.codec.spdy.SpdySession;
v1 := @parameter0: int;
v2 = v0.<io.netty.handler.codec.spdy.SpdySession: java.util.Map activeStreams>;
v3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v4 = interfaceinvoke v2.<java.util.Map: boolean containsKey(java.lang.Object)>(v3);
return v4;
}
java.util.Map activeStreams()
{
io.netty.handler.codec.spdy.SpdySession v0;
java.util.TreeMap v1;
io.netty.handler.codec.spdy.SpdySession$StreamComparator v2;
java.util.Map v3;
v0 := @this: io.netty.handler.codec.spdy.SpdySession;
v1 = new java.util.TreeMap;
v2 = v0.<io.netty.handler.codec.spdy.SpdySession: io.netty.handler.codec.spdy.SpdySession$StreamComparator streamComparator>;
specialinvoke v1.<java.util.TreeMap: void <init>(java.util.Comparator)>(v2);
v3 = v0.<io.netty.handler.codec.spdy.SpdySession: java.util.Map activeStreams>;
interfaceinvoke v1.<java.util.Map: void putAll(java.util.Map)>(v3);
return v1;
}
void acceptStream(int, byte, boolean, boolean, int, int, boolean)
{
io.netty.handler.codec.spdy.SpdySession v0;
io.netty.handler.codec.spdy.SpdySession$StreamState v10;
java.lang.Integer v9;
byte v2;
java.util.concurrent.atomic.AtomicInteger v12, v13;
java.util.Map v8;
int v1, v5, v6;
java.lang.Object v11;
boolean v3, v4, v7;
v0 := @this: io.netty.handler.codec.spdy.SpdySession;
v1 := @parameter0: int;
v2 := @parameter1: byte;
v3 := @parameter2: boolean;
v4 := @parameter3: boolean;
v5 := @parameter4: int;
v6 := @parameter5: int;
v7 := @parameter6: boolean;
if v3 == 0 goto label1;
if v4 != 0 goto label3;
label1:
v8 = v0.<io.netty.handler.codec.spdy.SpdySession: java.util.Map activeStreams>;
v9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v10 = new io.netty.handler.codec.spdy.SpdySession$StreamState;
specialinvoke v10.<io.netty.handler.codec.spdy.SpdySession$StreamState: void <init>(byte,boolean,boolean,int,int)>(v2, v3, v4, v5, v6);
v11 = interfaceinvoke v8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v9, v10);
if v11 != null goto label3;
if v7 == 0 goto label2;
v12 = v0.<io.netty.handler.codec.spdy.SpdySession: java.util.concurrent.atomic.AtomicInteger activeRemoteStreams>;
virtualinvoke v12.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();
goto label3;
label2:
v13 = v0.<io.netty.handler.codec.spdy.SpdySession: java.util.concurrent.atomic.AtomicInteger activeLocalStreams>;
virtualinvoke v13.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();
label3:
return;
}
private io.netty.handler.codec.spdy.SpdySession$StreamState removeActiveStream(int, boolean)
{
io.netty.handler.codec.spdy.SpdySession v0;
java.lang.Integer v4;
java.util.concurrent.atomic.AtomicInteger v6, v7;
java.util.Map v3;
int v1;
java.lang.Object v5;
boolean v2;
v0 := @this: io.netty.handler.codec.spdy.SpdySession;
v1 := @parameter0: int;
v2 := @parameter1: boolean;
v3 = v0.<io.netty.handler.codec.spdy.SpdySession: java.util.Map activeStreams>;
v4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v5 = interfaceinvoke v3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v4);
if v5 == null goto label2;
if v2 == 0 goto label1;
v6 = v0.<io.netty.handler.codec.spdy.SpdySession: java.util.concurrent.atomic.AtomicInteger activeRemoteStreams>;
virtualinvoke v6.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();
goto label2;
label1:
v7 = v0.<io.netty.handler.codec.spdy.SpdySession: java.util.concurrent.atomic.AtomicInteger activeLocalStreams>;
virtualinvoke v7.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();
label2:
return v5;
}
void removeStream(int, java.lang.Throwable, boolean)
{
java.lang.Throwable v2;
io.netty.handler.codec.spdy.SpdySession v0;
io.netty.handler.codec.spdy.SpdySession$StreamState v4;
int v1;
boolean v3;
v0 := @this: io.netty.handler.codec.spdy.SpdySession;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.Throwable;
v3 := @parameter2: boolean;
v4 = specialinvoke v0.<io.netty.handler.codec.spdy.SpdySession: io.netty.handler.codec.spdy.SpdySession$StreamState removeActiveStream(int,boolean)>(v1, v3);
if v4 == null goto label1;
virtualinvoke v4.<io.netty.handler.codec.spdy.SpdySession$StreamState: void clearPendingWrites(java.lang.Throwable)>(v2);
label1:
return;
}
boolean isRemoteSideClosed(int)
{
io.netty.handler.codec.spdy.SpdySession v0;
java.util.Map v2;
int v1;
java.lang.Object v4;
java.lang.Integer v3;
boolean v5, v6;
v0 := @this: io.netty.handler.codec.spdy.SpdySession;
v1 := @parameter0: int;
v2 = v0.<io.netty.handler.codec.spdy.SpdySession: java.util.Map activeStreams>;
v3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v4 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v3);
if v4 == null goto label1;
v5 = virtualinvoke v4.<io.netty.handler.codec.spdy.SpdySession$StreamState: boolean isRemoteSideClosed()>();
if v5 == 0 goto label2;
label1:
v6 = 1;
goto label3;
label2:
v6 = 0;
label3:
return v6;
}
void closeRemoteSide(int, boolean)
{
io.netty.handler.codec.spdy.SpdySession v0;
java.util.Map v3;
int v1;
java.lang.Object v5;
java.lang.Integer v4;
boolean v2, v6;
v0 := @this: io.netty.handler.codec.spdy.SpdySession;
v1 := @parameter0: int;
v2 := @parameter1: boolean;
v3 = v0.<io.netty.handler.codec.spdy.SpdySession: java.util.Map activeStreams>;
v4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v5 = interfaceinvoke v3.<java.util.Map: java.lang.Object get(java.lang.Object)>(v4);
if v5 == null goto label1;
virtualinvoke v5.<io.netty.handler.codec.spdy.SpdySession$StreamState: void closeRemoteSide()>();
v6 = virtualinvoke v5.<io.netty.handler.codec.spdy.SpdySession$StreamState: boolean isLocalSideClosed()>();
if v6 == 0 goto label1;
specialinvoke v0.<io.netty.handler.codec.spdy.SpdySession: io.netty.handler.codec.spdy.SpdySession$StreamState removeActiveStream(int,boolean)>(v1, v2);
label1:
return;
}
boolean isLocalSideClosed(int)
{
io.netty.handler.codec.spdy.SpdySession v0;
java.util.Map v2;
int v1;
java.lang.Object v4;
java.lang.Integer v3;
boolean v5, v6;
v0 := @this: io.netty.handler.codec.spdy.SpdySession;
v1 := @parameter0: int;
v2 = v0.<io.netty.handler.codec.spdy.SpdySession: java.util.Map activeStreams>;
v3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v4 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v3);
if v4 == null goto label1;
v5 = virtualinvoke v4.<io.netty.handler.codec.spdy.SpdySession$StreamState: boolean isLocalSideClosed()>();
if v5 == 0 goto label2;
label1:
v6 = 1;
goto label3;
label2:
v6 = 0;
label3:
return v6;
}
void closeLocalSide(int, boolean)
{
io.netty.handler.codec.spdy.SpdySession v0;
java.util.Map v3;
int v1;
java.lang.Object v5;
java.lang.Integer v4;
boolean v2, v6;
v0 := @this: io.netty.handler.codec.spdy.SpdySession;
v1 := @parameter0: int;
v2 := @parameter1: boolean;
v3 = v0.<io.netty.handler.codec.spdy.SpdySession: java.util.Map activeStreams>;
v4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v5 = interfaceinvoke v3.<java.util.Map: java.lang.Object get(java.lang.Object)>(v4);
if v5 == null goto label1;
virtualinvoke v5.<io.netty.handler.codec.spdy.SpdySession$StreamState: void closeLocalSide()>();
v6 = virtualinvoke v5.<io.netty.handler.codec.spdy.SpdySession$StreamState: boolean isRemoteSideClosed()>();
if v6 == 0 goto label1;
specialinvoke v0.<io.netty.handler.codec.spdy.SpdySession: io.netty.handler.codec.spdy.SpdySession$StreamState removeActiveStream(int,boolean)>(v1, v2);
label1:
return;
}
boolean hasReceivedReply(int)
{
io.netty.handler.codec.spdy.SpdySession v0;
java.util.Map v2;
int v1;
java.lang.Object v4;
java.lang.Integer v3;
boolean v5, v6;
v0 := @this: io.netty.handler.codec.spdy.SpdySession;
v1 := @parameter0: int;
v2 = v0.<io.netty.handler.codec.spdy.SpdySession: java.util.Map activeStreams>;
v3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v4 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v3);
if v4 == null goto label1;
v5 = virtualinvoke v4.<io.netty.handler.codec.spdy.SpdySession$StreamState: boolean hasReceivedReply()>();
if v5 == 0 goto label1;
v6 = 1;
goto label2;
label1:
v6 = 0;
label2:
return v6;
}
void receivedReply(int)
{
io.netty.handler.codec.spdy.SpdySession v0;
java.util.Map v2;
int v1;
java.lang.Object v4;
java.lang.Integer v3;
v0 := @this: io.netty.handler.codec.spdy.SpdySession;
v1 := @parameter0: int;
v2 = v0.<io.netty.handler.codec.spdy.SpdySession: java.util.Map activeStreams>;
v3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v4 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v3);
if v4 == null goto label1;
virtualinvoke v4.<io.netty.handler.codec.spdy.SpdySession$StreamState: void receivedReply()>();
label1:
return;
}
int getSendWindowSize(int)
{
io.netty.handler.codec.spdy.SpdySession v0;
java.lang.Integer v5;
java.util.concurrent.atomic.AtomicInteger v2;
java.util.Map v4;
int v1, v3, v7, v8;
java.lang.Object v6;
v0 := @this: io.netty.handler.codec.spdy.SpdySession;
v1 := @parameter0: int;
if v1 != 0 goto label1;
v2 = v0.<io.netty.handler.codec.spdy.SpdySession: java.util.concurrent.atomic.AtomicInteger sendWindowSize>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicInteger: int get()>();
return v3;
label1:
v4 = v0.<io.netty.handler.codec.spdy.SpdySession: java.util.Map activeStreams>;
v5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v6 = interfaceinvoke v4.<java.util.Map: java.lang.Object get(java.lang.Object)>(v5);
if v6 == null goto label2;
v7 = virtualinvoke v6.<io.netty.handler.codec.spdy.SpdySession$StreamState: int getSendWindowSize()>();
goto label3;
label2:
v8 = (int) -1;
v7 = v8;
label3:
return v7;
}
int updateSendWindowSize(int, int)
{
io.netty.handler.codec.spdy.SpdySession v0;
java.lang.Integer v6;
java.util.concurrent.atomic.AtomicInteger v3;
java.util.Map v5;
int v1, v2, v4, v8, v9;
java.lang.Object v7;
v0 := @this: io.netty.handler.codec.spdy.SpdySession;
v1 := @parameter0: int;
v2 := @parameter1: int;
if v1 != 0 goto label1;
v3 = v0.<io.netty.handler.codec.spdy.SpdySession: java.util.concurrent.atomic.AtomicInteger sendWindowSize>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(v2);
return v4;
label1:
v5 = v0.<io.netty.handler.codec.spdy.SpdySession: java.util.Map activeStreams>;
v6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v7 = interfaceinvoke v5.<java.util.Map: java.lang.Object get(java.lang.Object)>(v6);
if v7 == null goto label2;
v8 = virtualinvoke v7.<io.netty.handler.codec.spdy.SpdySession$StreamState: int updateSendWindowSize(int)>(v2);
goto label3;
label2:
v9 = (int) -1;
v8 = v9;
label3:
return v8;
}
int updateReceiveWindowSize(int, int)
{
io.netty.handler.codec.spdy.SpdySession v0;
java.lang.Integer v6;
java.util.concurrent.atomic.AtomicInteger v3;
java.util.Map v5;
int v1, v2, v4, v8, v9;
java.lang.Object v7;
v0 := @this: io.netty.handler.codec.spdy.SpdySession;
v1 := @parameter0: int;
v2 := @parameter1: int;
if v1 != 0 goto label1;
v3 = v0.<io.netty.handler.codec.spdy.SpdySession: java.util.concurrent.atomic.AtomicInteger receiveWindowSize>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(v2);
return v4;
label1:
v5 = v0.<io.netty.handler.codec.spdy.SpdySession: java.util.Map activeStreams>;
v6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v7 = interfaceinvoke v5.<java.util.Map: java.lang.Object get(java.lang.Object)>(v6);
if v7 != null goto label2;
v8 = (int) -1;
return v8;
label2:
if v2 <= 0 goto label3;
virtualinvoke v7.<io.netty.handler.codec.spdy.SpdySession$StreamState: void setReceiveWindowSizeLowerBound(int)>(0);
label3:
v9 = virtualinvoke v7.<io.netty.handler.codec.spdy.SpdySession$StreamState: int updateReceiveWindowSize(int)>(v2);
return v9;
}
int getReceiveWindowSizeLowerBound(int)
{
io.netty.handler.codec.spdy.SpdySession v0;
java.util.Map v2;
int v1, v5;
java.lang.Object v4;
java.lang.Integer v3;
v0 := @this: io.netty.handler.codec.spdy.SpdySession;
v1 := @parameter0: int;
if v1 != 0 goto label1;
return 0;
label1:
v2 = v0.<io.netty.handler.codec.spdy.SpdySession: java.util.Map activeStreams>;
v3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v4 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v3);
if v4 == null goto label2;
v5 = virtualinvoke v4.<io.netty.handler.codec.spdy.SpdySession$StreamState: int getReceiveWindowSizeLowerBound()>();
goto label3;
label2:
v5 = 0;
label3:
return v5;
}
void updateAllSendWindowSizes(int)
{
io.netty.handler.codec.spdy.SpdySession v0;
java.util.Iterator v4;
java.util.Collection v3;
java.util.Map v2;
int v1;
java.lang.Object v6;
boolean v5;
v0 := @this: io.netty.handler.codec.spdy.SpdySession;
v1 := @parameter0: int;
v2 = v0.<io.netty.handler.codec.spdy.SpdySession: java.util.Map activeStreams>;
v3 = interfaceinvoke v2.<java.util.Map: java.util.Collection values()>();
v4 = interfaceinvoke v3.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v6.<io.netty.handler.codec.spdy.SpdySession$StreamState: int updateSendWindowSize(int)>(v1);
goto label1;
label2:
return;
}
void updateAllReceiveWindowSizes(int)
{
io.netty.handler.codec.spdy.SpdySession v0;
java.util.Iterator v4;
java.util.Collection v3;
java.util.Map v2;
int v1;
java.lang.Object v6;
boolean v5;
v0 := @this: io.netty.handler.codec.spdy.SpdySession;
v1 := @parameter0: int;
v2 = v0.<io.netty.handler.codec.spdy.SpdySession: java.util.Map activeStreams>;
v3 = interfaceinvoke v2.<java.util.Map: java.util.Collection values()>();
v4 = interfaceinvoke v3.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v6.<io.netty.handler.codec.spdy.SpdySession$StreamState: int updateReceiveWindowSize(int)>(v1);
if v1 >= 0 goto label1;
virtualinvoke v6.<io.netty.handler.codec.spdy.SpdySession$StreamState: void setReceiveWindowSizeLowerBound(int)>(v1);
goto label1;
label2:
return;
}
boolean putPendingWrite(int, io.netty.handler.codec.spdy.SpdySession$PendingWrite)
{
io.netty.handler.codec.spdy.SpdySession v0;
java.lang.Integer v4;
io.netty.handler.codec.spdy.SpdySession$PendingWrite v2;
java.util.Map v3;
int v1;
java.lang.Object v5;
boolean v6, v7;
v0 := @this: io.netty.handler.codec.spdy.SpdySession;
v1 := @parameter0: int;
v2 := @parameter1: io.netty.handler.codec.spdy.SpdySession$PendingWrite;
v3 = v0.<io.netty.handler.codec.spdy.SpdySession: java.util.Map activeStreams>;
v4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v5 = interfaceinvoke v3.<java.util.Map: java.lang.Object get(java.lang.Object)>(v4);
if v5 == null goto label1;
v6 = virtualinvoke v5.<io.netty.handler.codec.spdy.SpdySession$StreamState: boolean putPendingWrite(io.netty.handler.codec.spdy.SpdySession$PendingWrite)>(v2);
if v6 == 0 goto label1;
v7 = 1;
goto label2;
label1:
v7 = 0;
label2:
return v7;
}
io.netty.handler.codec.spdy.SpdySession$PendingWrite getPendingWrite(int)
{
io.netty.handler.codec.spdy.SpdySession v0;
java.util.Iterator v4;
java.util.Set v3;
java.lang.Integer v11;
io.netty.handler.codec.spdy.SpdySession$PendingWrite v13, v9;
java.util.Map v10, v2;
int v1, v8;
java.lang.Object v12, v6, v7;
boolean v5;
v0 := @this: io.netty.handler.codec.spdy.SpdySession;
v1 := @parameter0: int;
if v1 != 0 goto label3;
v2 = virtualinvoke v0.<io.netty.handler.codec.spdy.SpdySession: java.util.Map activeStreams()>();
v3 = interfaceinvoke v2.<java.util.Map: java.util.Set entrySet()>();
v4 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = interfaceinvoke v6.<java.util.Map$Entry: java.lang.Object getValue()>();
v8 = virtualinvoke v7.<io.netty.handler.codec.spdy.SpdySession$StreamState: int getSendWindowSize()>();
if v8 <= 0 goto label1;
v9 = virtualinvoke v7.<io.netty.handler.codec.spdy.SpdySession$StreamState: io.netty.handler.codec.spdy.SpdySession$PendingWrite getPendingWrite()>();
if v9 == null goto label1;
return v9;
label2:
return null;
label3:
v10 = v0.<io.netty.handler.codec.spdy.SpdySession: java.util.Map activeStreams>;
v11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v12 = interfaceinvoke v10.<java.util.Map: java.lang.Object get(java.lang.Object)>(v11);
if v12 == null goto label4;
v13 = virtualinvoke v12.<io.netty.handler.codec.spdy.SpdySession$StreamState: io.netty.handler.codec.spdy.SpdySession$PendingWrite getPendingWrite()>();
goto label5;
label4:
v13 = null;
label5:
return v13;
}
io.netty.handler.codec.spdy.SpdySession$PendingWrite removePendingWrite(int)
{
io.netty.handler.codec.spdy.SpdySession v0;
io.netty.handler.codec.spdy.SpdySession$PendingWrite v5;
java.util.Map v2;
int v1;
java.lang.Object v4;
java.lang.Integer v3;
v0 := @this: io.netty.handler.codec.spdy.SpdySession;
v1 := @parameter0: int;
v2 = v0.<io.netty.handler.codec.spdy.SpdySession: java.util.Map activeStreams>;
v3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v4 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v3);
if v4 == null goto label1;
v5 = virtualinvoke v4.<io.netty.handler.codec.spdy.SpdySession$StreamState: io.netty.handler.codec.spdy.SpdySession$PendingWrite removePendingWrite()>();
goto label2;
label1:
v5 = null;
label2:
return v5;
}
}