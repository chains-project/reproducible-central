final class io.netty.handler.ipfilter.IpSubnetFilterRule$Ip6SubnetFilterRule extends java.lang.Object implements io.netty.handler.ipfilter.IpFilterRule
{
private static final java.math.BigInteger MINUS_ONE;
private final java.math.BigInteger networkAddress;
private final java.math.BigInteger subnetMask;
private final io.netty.handler.ipfilter.IpFilterRuleType ruleType;
static final boolean $assertionsDisabled;
private void <init>(java.net.Inet6Address, int, io.netty.handler.ipfilter.IpFilterRuleType)
{
java.lang.Object[] v5;
java.lang.IllegalArgumentException v4;
java.lang.Integer v6;
java.net.Inet6Address v1;
int v2;
io.netty.handler.ipfilter.IpSubnetFilterRule$Ip6SubnetFilterRule v0;
java.math.BigInteger v10, v11, v8, v9;
java.lang.String v7;
io.netty.handler.ipfilter.IpFilterRuleType v3;
v0 := @this: io.netty.handler.ipfilter.IpSubnetFilterRule$Ip6SubnetFilterRule;
v1 := @parameter0: java.net.Inet6Address;
v2 := @parameter1: int;
v3 := @parameter2: io.netty.handler.ipfilter.IpFilterRuleType;
specialinvoke v0.<java.lang.Object: void <init>()>();
if v2 < 0 goto label1;
if v2 <= 128 goto label2;
label1:
v4 = new java.lang.IllegalArgumentException;
v5 = newarray (java.lang.Object)[1];
v6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v2);
v5[0] = v6;
v7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("IPv6 requires the subnet prefix to be in range of [0,128]. The prefix was: %d", v5);
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v7);
throw v4;
label2:
v8 = staticinvoke <io.netty.handler.ipfilter.IpSubnetFilterRule$Ip6SubnetFilterRule: java.math.BigInteger prefixToSubnetMask(int)>(v2);
v0.<io.netty.handler.ipfilter.IpSubnetFilterRule$Ip6SubnetFilterRule: java.math.BigInteger subnetMask> = v8;
v9 = staticinvoke <io.netty.handler.ipfilter.IpSubnetFilterRule$Ip6SubnetFilterRule: java.math.BigInteger ipToInt(java.net.Inet6Address)>(v1);
v10 = v0.<io.netty.handler.ipfilter.IpSubnetFilterRule$Ip6SubnetFilterRule: java.math.BigInteger subnetMask>;
v11 = virtualinvoke v9.<java.math.BigInteger: java.math.BigInteger and(java.math.BigInteger)>(v10);
v0.<io.netty.handler.ipfilter.IpSubnetFilterRule$Ip6SubnetFilterRule: java.math.BigInteger networkAddress> = v11;
v0.<io.netty.handler.ipfilter.IpSubnetFilterRule$Ip6SubnetFilterRule: io.netty.handler.ipfilter.IpFilterRuleType ruleType> = v3;
return;
}
public boolean matches(java.net.InetSocketAddress)
{
java.net.InetSocketAddress v1;
java.net.InetAddress v2;
io.netty.handler.ipfilter.IpSubnetFilterRule$Ip6SubnetFilterRule v0;
java.math.BigInteger v10, v11, v4, v5, v6, v7, v9;
boolean v12, v13, v3, v8;
v0 := @this: io.netty.handler.ipfilter.IpSubnetFilterRule$Ip6SubnetFilterRule;
v1 := @parameter0: java.net.InetSocketAddress;
v2 = virtualinvoke v1.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
v3 = v2 instanceof java.net.Inet6Address;
if v3 == 0 goto label4;
v4 = staticinvoke <io.netty.handler.ipfilter.IpSubnetFilterRule$Ip6SubnetFilterRule: java.math.BigInteger ipToInt(java.net.Inet6Address)>(v2);
v5 = v0.<io.netty.handler.ipfilter.IpSubnetFilterRule$Ip6SubnetFilterRule: java.math.BigInteger subnetMask>;
v6 = virtualinvoke v4.<java.math.BigInteger: java.math.BigInteger and(java.math.BigInteger)>(v5);
v7 = v0.<io.netty.handler.ipfilter.IpSubnetFilterRule$Ip6SubnetFilterRule: java.math.BigInteger subnetMask>;
v8 = virtualinvoke v6.<java.math.BigInteger: boolean equals(java.lang.Object)>(v7);
if v8 != 0 goto label1;
v9 = v0.<io.netty.handler.ipfilter.IpSubnetFilterRule$Ip6SubnetFilterRule: java.math.BigInteger subnetMask>;
v10 = virtualinvoke v4.<java.math.BigInteger: java.math.BigInteger and(java.math.BigInteger)>(v9);
v11 = v0.<io.netty.handler.ipfilter.IpSubnetFilterRule$Ip6SubnetFilterRule: java.math.BigInteger networkAddress>;
v12 = virtualinvoke v10.<java.math.BigInteger: boolean equals(java.lang.Object)>(v11);
if v12 == 0 goto label2;
label1:
v13 = 1;
goto label3;
label2:
v13 = 0;
label3:
return v13;
label4:
return 0;
}
public io.netty.handler.ipfilter.IpFilterRuleType ruleType()
{
io.netty.handler.ipfilter.IpSubnetFilterRule$Ip6SubnetFilterRule v0;
io.netty.handler.ipfilter.IpFilterRuleType v1;
v0 := @this: io.netty.handler.ipfilter.IpSubnetFilterRule$Ip6SubnetFilterRule;
v1 = v0.<io.netty.handler.ipfilter.IpSubnetFilterRule$Ip6SubnetFilterRule: io.netty.handler.ipfilter.IpFilterRuleType ruleType>;
return v1;
}
private static java.math.BigInteger ipToInt(java.net.Inet6Address)
{
byte[] v1;
java.net.Inet6Address v0;
int v3;
java.math.BigInteger v5;
java.lang.AssertionError v4;
boolean v2;
v0 := @parameter0: java.net.Inet6Address;
v1 = virtualinvoke v0.<java.net.Inet6Address: byte[] getAddress()>();
v2 = <io.netty.handler.ipfilter.IpSubnetFilterRule$Ip6SubnetFilterRule: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
v3 = lengthof v1;
if v3 == 16 goto label1;
v4 = new java.lang.AssertionError;
specialinvoke v4.<java.lang.AssertionError: void <init>()>();
throw v4;
label1:
v5 = new java.math.BigInteger;
specialinvoke v5.<java.math.BigInteger: void <init>(byte[])>(v1);
return v5;
}
private static java.math.BigInteger prefixToSubnetMask(int)
{
int v0, v2;
java.math.BigInteger v1, v3;
v0 := @parameter0: int;
v1 = <io.netty.handler.ipfilter.IpSubnetFilterRule$Ip6SubnetFilterRule: java.math.BigInteger MINUS_ONE>;
v2 = 128 - v0;
v3 = virtualinvoke v1.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(v2);
return v3;
}
static void <clinit>()
{
java.lang.Class v0;
java.math.BigInteger v3;
boolean v1, v2;
v0 = class "Lio/netty/handler/ipfilter/IpSubnetFilterRule;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.handler.ipfilter.IpSubnetFilterRule$Ip6SubnetFilterRule: boolean $assertionsDisabled> = v2;
v3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(-1L);
<io.netty.handler.ipfilter.IpSubnetFilterRule$Ip6SubnetFilterRule: java.math.BigInteger MINUS_ONE> = v3;
return;
}
}