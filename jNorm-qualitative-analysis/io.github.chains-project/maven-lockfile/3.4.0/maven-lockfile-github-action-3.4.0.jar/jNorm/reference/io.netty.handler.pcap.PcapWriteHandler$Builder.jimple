public final class io.netty.handler.pcap.PcapWriteHandler$Builder extends java.lang.Object
{
private boolean captureZeroByte;
private boolean sharedOutputStream;
private boolean writePcapGlobalHeader;
private io.netty.handler.pcap.PcapWriteHandler$ChannelType channelType;
private java.net.InetSocketAddress initiatorAddr;
private java.net.InetSocketAddress handlerAddr;
private boolean isServerPipeline;
private void <init>()
{
io.netty.handler.pcap.PcapWriteHandler$Builder v0;
v0 := @this: io.netty.handler.pcap.PcapWriteHandler$Builder;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.handler.pcap.PcapWriteHandler$Builder: boolean writePcapGlobalHeader> = 1;
return;
}
public io.netty.handler.pcap.PcapWriteHandler$Builder captureZeroByte(boolean)
{
io.netty.handler.pcap.PcapWriteHandler$Builder v0;
boolean v1;
v0 := @this: io.netty.handler.pcap.PcapWriteHandler$Builder;
v1 := @parameter0: boolean;
v0.<io.netty.handler.pcap.PcapWriteHandler$Builder: boolean captureZeroByte> = v1;
return v0;
}
public io.netty.handler.pcap.PcapWriteHandler$Builder sharedOutputStream(boolean)
{
io.netty.handler.pcap.PcapWriteHandler$Builder v0;
boolean v1;
v0 := @this: io.netty.handler.pcap.PcapWriteHandler$Builder;
v1 := @parameter0: boolean;
v0.<io.netty.handler.pcap.PcapWriteHandler$Builder: boolean sharedOutputStream> = v1;
return v0;
}
public io.netty.handler.pcap.PcapWriteHandler$Builder writePcapGlobalHeader(boolean)
{
io.netty.handler.pcap.PcapWriteHandler$Builder v0;
boolean v1;
v0 := @this: io.netty.handler.pcap.PcapWriteHandler$Builder;
v1 := @parameter0: boolean;
v0.<io.netty.handler.pcap.PcapWriteHandler$Builder: boolean writePcapGlobalHeader> = v1;
return v0;
}
public io.netty.handler.pcap.PcapWriteHandler$Builder forceTcpChannel(java.net.InetSocketAddress, java.net.InetSocketAddress, boolean)
{
io.netty.handler.pcap.PcapWriteHandler$ChannelType v4;
java.lang.Object v5, v6;
io.netty.handler.pcap.PcapWriteHandler$Builder v0;
java.net.InetSocketAddress v1, v2;
boolean v3;
v0 := @this: io.netty.handler.pcap.PcapWriteHandler$Builder;
v1 := @parameter0: java.net.InetSocketAddress;
v2 := @parameter1: java.net.InetSocketAddress;
v3 := @parameter2: boolean;
v4 = <io.netty.handler.pcap.PcapWriteHandler$ChannelType: io.netty.handler.pcap.PcapWriteHandler$ChannelType TCP>;
v0.<io.netty.handler.pcap.PcapWriteHandler$Builder: io.netty.handler.pcap.PcapWriteHandler$ChannelType channelType> = v4;
v5 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "serverAddress");
v0.<io.netty.handler.pcap.PcapWriteHandler$Builder: java.net.InetSocketAddress handlerAddr> = v5;
v6 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "clientAddress");
v0.<io.netty.handler.pcap.PcapWriteHandler$Builder: java.net.InetSocketAddress initiatorAddr> = v6;
v0.<io.netty.handler.pcap.PcapWriteHandler$Builder: boolean isServerPipeline> = v3;
return v0;
}
public io.netty.handler.pcap.PcapWriteHandler$Builder forceUdpChannel(java.net.InetSocketAddress, java.net.InetSocketAddress)
{
io.netty.handler.pcap.PcapWriteHandler$ChannelType v3;
java.lang.Object v4, v5;
io.netty.handler.pcap.PcapWriteHandler$Builder v0;
java.net.InetSocketAddress v1, v2;
v0 := @this: io.netty.handler.pcap.PcapWriteHandler$Builder;
v1 := @parameter0: java.net.InetSocketAddress;
v2 := @parameter1: java.net.InetSocketAddress;
v3 = <io.netty.handler.pcap.PcapWriteHandler$ChannelType: io.netty.handler.pcap.PcapWriteHandler$ChannelType UDP>;
v0.<io.netty.handler.pcap.PcapWriteHandler$Builder: io.netty.handler.pcap.PcapWriteHandler$ChannelType channelType> = v3;
v4 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "remoteAddress");
v0.<io.netty.handler.pcap.PcapWriteHandler$Builder: java.net.InetSocketAddress handlerAddr> = v4;
v5 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "localAddress");
v0.<io.netty.handler.pcap.PcapWriteHandler$Builder: java.net.InetSocketAddress initiatorAddr> = v5;
return v0;
}
public io.netty.handler.pcap.PcapWriteHandler build(java.io.OutputStream)
{
java.io.OutputStream v1;
io.netty.handler.pcap.PcapWriteHandler$Builder v0;
io.netty.handler.pcap.PcapWriteHandler v2;
v0 := @this: io.netty.handler.pcap.PcapWriteHandler$Builder;
v1 := @parameter0: java.io.OutputStream;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "outputStream");
v2 = new io.netty.handler.pcap.PcapWriteHandler;
specialinvoke v2.<io.netty.handler.pcap.PcapWriteHandler: void <init>(io.netty.handler.pcap.PcapWriteHandler$Builder,java.io.OutputStream)>(v0, v1);
return v2;
}
}