public abstract class io.netty.handler.ssl.ApplicationProtocolNegotiationHandler extends io.netty.channel.ChannelInboundHandlerAdapter
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private final java.lang.String fallbackProtocol;
private final io.netty.util.internal.RecyclableArrayList bufferedMessages;
private io.netty.channel.ChannelHandlerContext ctx;
private boolean sslHandlerChecked;
protected void <init>(java.lang.String)
{
io.netty.util.internal.RecyclableArrayList v2;
io.netty.handler.ssl.ApplicationProtocolNegotiationHandler v0;
java.lang.Object v3;
java.lang.String v1;
v0 := @this: io.netty.handler.ssl.ApplicationProtocolNegotiationHandler;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<io.netty.channel.ChannelInboundHandlerAdapter: void <init>()>();
v2 = staticinvoke <io.netty.util.internal.RecyclableArrayList: io.netty.util.internal.RecyclableArrayList newInstance()>();
v0.<io.netty.handler.ssl.ApplicationProtocolNegotiationHandler: io.netty.util.internal.RecyclableArrayList bufferedMessages> = v2;
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "fallbackProtocol");
v0.<io.netty.handler.ssl.ApplicationProtocolNegotiationHandler: java.lang.String fallbackProtocol> = v3;
return;
}
public void handlerAdded(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.handler.ssl.ApplicationProtocolNegotiationHandler v0;
io.netty.channel.ChannelHandlerContext v1;
v0 := @this: io.netty.handler.ssl.ApplicationProtocolNegotiationHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v0.<io.netty.handler.ssl.ApplicationProtocolNegotiationHandler: io.netty.channel.ChannelHandlerContext ctx> = v1;
specialinvoke v0.<io.netty.channel.ChannelInboundHandlerAdapter: void handlerAdded(io.netty.channel.ChannelHandlerContext)>(v1);
return;
}
public void handlerRemoved(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.handler.ssl.ApplicationProtocolNegotiationHandler v0;
io.netty.channel.ChannelHandlerContext v1;
io.netty.util.internal.RecyclableArrayList v2;
v0 := @this: io.netty.handler.ssl.ApplicationProtocolNegotiationHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
specialinvoke v0.<io.netty.handler.ssl.ApplicationProtocolNegotiationHandler: void fireBufferedMessages()>();
v2 = v0.<io.netty.handler.ssl.ApplicationProtocolNegotiationHandler: io.netty.util.internal.RecyclableArrayList bufferedMessages>;
virtualinvoke v2.<io.netty.util.internal.RecyclableArrayList: boolean recycle()>();
specialinvoke v0.<io.netty.channel.ChannelInboundHandlerAdapter: void handlerRemoved(io.netty.channel.ChannelHandlerContext)>(v1);
return;
}
public void channelRead(io.netty.channel.ChannelHandlerContext, java.lang.Object) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.util.internal.RecyclableArrayList v3;
io.netty.handler.ssl.ApplicationProtocolNegotiationHandler v0;
io.netty.channel.ChannelHandler v6;
java.lang.Object v2;
io.netty.channel.ChannelPipeline v5;
boolean v4;
v0 := @this: io.netty.handler.ssl.ApplicationProtocolNegotiationHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 = v0.<io.netty.handler.ssl.ApplicationProtocolNegotiationHandler: io.netty.util.internal.RecyclableArrayList bufferedMessages>;
virtualinvoke v3.<io.netty.util.internal.RecyclableArrayList: boolean add(java.lang.Object)>(v2);
v4 = v0.<io.netty.handler.ssl.ApplicationProtocolNegotiationHandler: boolean sslHandlerChecked>;
if v4 != 0 goto label1;
v0.<io.netty.handler.ssl.ApplicationProtocolNegotiationHandler: boolean sslHandlerChecked> = 1;
v5 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPipeline pipeline()>();
v6 = interfaceinvoke v5.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelHandler get(java.lang.Class)>(class "Lio/netty/handler/ssl/SslHandler;");
if v6 != null goto label1;
specialinvoke v0.<io.netty.handler.ssl.ApplicationProtocolNegotiationHandler: void removeSelfIfPresent(io.netty.channel.ChannelHandlerContext)>(v1);
label1:
return;
}
private void fireBufferedMessages()
{
io.netty.channel.ChannelHandlerContext v6, v9;
io.netty.util.internal.RecyclableArrayList v1, v10, v4, v7;
int v3, v5;
io.netty.handler.ssl.ApplicationProtocolNegotiationHandler v0;
java.lang.Object v8;
boolean v2;
v0 := @this: io.netty.handler.ssl.ApplicationProtocolNegotiationHandler;
v1 = v0.<io.netty.handler.ssl.ApplicationProtocolNegotiationHandler: io.netty.util.internal.RecyclableArrayList bufferedMessages>;
v2 = virtualinvoke v1.<io.netty.util.internal.RecyclableArrayList: boolean isEmpty()>();
if v2 != 0 goto label3;
v3 = 0;
label1:
v4 = v0.<io.netty.handler.ssl.ApplicationProtocolNegotiationHandler: io.netty.util.internal.RecyclableArrayList bufferedMessages>;
v5 = virtualinvoke v4.<io.netty.util.internal.RecyclableArrayList: int size()>();
if v3 >= v5 goto label2;
v6 = v0.<io.netty.handler.ssl.ApplicationProtocolNegotiationHandler: io.netty.channel.ChannelHandlerContext ctx>;
v7 = v0.<io.netty.handler.ssl.ApplicationProtocolNegotiationHandler: io.netty.util.internal.RecyclableArrayList bufferedMessages>;
v8 = virtualinvoke v7.<io.netty.util.internal.RecyclableArrayList: java.lang.Object get(int)>(v3);
interfaceinvoke v6.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)>(v8);
v3 = v3 + 1;
goto label1;
label2:
v9 = v0.<io.netty.handler.ssl.ApplicationProtocolNegotiationHandler: io.netty.channel.ChannelHandlerContext ctx>;
interfaceinvoke v9.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelReadComplete()>();
v10 = v0.<io.netty.handler.ssl.ApplicationProtocolNegotiationHandler: io.netty.util.internal.RecyclableArrayList bufferedMessages>;
virtualinvoke v10.<io.netty.util.internal.RecyclableArrayList: void clear()>();
label3:
return;
}
public void userEventTriggered(io.netty.channel.ChannelHandlerContext, java.lang.Object) throws java.lang.Exception
{
java.lang.Throwable v11, v13;
java.lang.IllegalStateException v7;
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.ssl.ApplicationProtocolNegotiationHandler v0;
java.lang.String v8, v9;
boolean v10, v12, v14, v15, v3, v4;
io.netty.channel.ChannelPipeline v5;
io.netty.channel.ChannelHandler v6;
java.lang.Object v2;
v0 := @this: io.netty.handler.ssl.ApplicationProtocolNegotiationHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 = v2 instanceof io.netty.handler.ssl.SslHandshakeCompletionEvent;
if v3 == 0 goto label10;
label01:
v4 = virtualinvoke v2.<io.netty.handler.ssl.SslHandshakeCompletionEvent: boolean isSuccess()>();
if v4 == 0 goto label05;
v5 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPipeline pipeline()>();
v6 = interfaceinvoke v5.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelHandler get(java.lang.Class)>(class "Lio/netty/handler/ssl/SslHandler;");
if v6 != null goto label02;
v7 = new java.lang.IllegalStateException;
specialinvoke v7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cannot find an SslHandler in the pipeline (required for application-level protocol negotiation)");
throw v7;
label02:
v8 = virtualinvoke v6.<io.netty.handler.ssl.SslHandler: java.lang.String applicationProtocol()>();
if v8 == null goto label03;
v9 = v8;
goto label04;
label03:
v9 = v0.<io.netty.handler.ssl.ApplicationProtocolNegotiationHandler: java.lang.String fallbackProtocol>;
label04:
virtualinvoke v0.<io.netty.handler.ssl.ApplicationProtocolNegotiationHandler: void configurePipeline(io.netty.channel.ChannelHandlerContext,java.lang.String)>(v1, v9);
label05:
v10 = virtualinvoke v2.<io.netty.handler.ssl.SslHandshakeCompletionEvent: boolean isSuccess()>();
if v10 == 0 goto label10;
specialinvoke v0.<io.netty.handler.ssl.ApplicationProtocolNegotiationHandler: void removeSelfIfPresent(io.netty.channel.ChannelHandlerContext)>(v1);
goto label10;
label06:
v11 := @caughtexception;
virtualinvoke v0.<io.netty.handler.ssl.ApplicationProtocolNegotiationHandler: void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)>(v1, v11);
label07:
v12 = virtualinvoke v2.<io.netty.handler.ssl.SslHandshakeCompletionEvent: boolean isSuccess()>();
if v12 == 0 goto label10;
specialinvoke v0.<io.netty.handler.ssl.ApplicationProtocolNegotiationHandler: void removeSelfIfPresent(io.netty.channel.ChannelHandlerContext)>(v1);
goto label10;
label08:
v13 := @caughtexception;
v14 = virtualinvoke v2.<io.netty.handler.ssl.SslHandshakeCompletionEvent: boolean isSuccess()>();
if v14 == 0 goto label09;
specialinvoke v0.<io.netty.handler.ssl.ApplicationProtocolNegotiationHandler: void removeSelfIfPresent(io.netty.channel.ChannelHandlerContext)>(v1);
label09:
throw v13;
label10:
v15 = v2 instanceof io.netty.channel.socket.ChannelInputShutdownEvent;
if v15 == 0 goto label11;
specialinvoke v0.<io.netty.handler.ssl.ApplicationProtocolNegotiationHandler: void fireBufferedMessages()>();
label11:
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireUserEventTriggered(java.lang.Object)>(v2);
return;
catch java.lang.Throwable from label01 to label05 with label06;
catch java.lang.Throwable from label06 to label07 with label08;
}
public void channelInactive(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.handler.ssl.ApplicationProtocolNegotiationHandler v0;
io.netty.channel.ChannelHandlerContext v1;
v0 := @this: io.netty.handler.ssl.ApplicationProtocolNegotiationHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
specialinvoke v0.<io.netty.handler.ssl.ApplicationProtocolNegotiationHandler: void fireBufferedMessages()>();
specialinvoke v0.<io.netty.channel.ChannelInboundHandlerAdapter: void channelInactive(io.netty.channel.ChannelHandlerContext)>(v1);
return;
}
private void removeSelfIfPresent(io.netty.channel.ChannelHandlerContext)
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.ssl.ApplicationProtocolNegotiationHandler v0;
io.netty.channel.ChannelPipeline v2;
boolean v3;
v0 := @this: io.netty.handler.ssl.ApplicationProtocolNegotiationHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPipeline pipeline()>();
v3 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: boolean isRemoved()>();
if v3 != 0 goto label1;
interfaceinvoke v2.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline remove(io.netty.channel.ChannelHandler)>(v0);
label1:
return;
}
protected abstract void configurePipeline(io.netty.channel.ChannelHandlerContext, java.lang.String) throws java.lang.Exception;
protected void handshakeFailure(io.netty.channel.ChannelHandlerContext, java.lang.Throwable) throws java.lang.Exception
{
io.netty.channel.Channel v4;
java.lang.Throwable v2;
io.netty.channel.ChannelHandlerContext v1;
io.netty.util.internal.logging.InternalLogger v3;
io.netty.handler.ssl.ApplicationProtocolNegotiationHandler v0;
v0 := @this: io.netty.handler.ssl.ApplicationProtocolNegotiationHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Throwable;
v3 = <io.netty.handler.ssl.ApplicationProtocolNegotiationHandler: io.netty.util.internal.logging.InternalLogger logger>;
v4 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
interfaceinvoke v3.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("{} TLS handshake failed:", v4, v2);
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture close()>();
return;
}
public void exceptionCaught(io.netty.channel.ChannelHandlerContext, java.lang.Throwable) throws java.lang.Exception
{
java.lang.Throwable v2, v4, v6;
io.netty.channel.Channel v8;
io.netty.channel.ChannelHandlerContext v1;
io.netty.util.internal.logging.InternalLogger v7;
io.netty.handler.ssl.ApplicationProtocolNegotiationHandler v0;
boolean v3, v5;
v0 := @this: io.netty.handler.ssl.ApplicationProtocolNegotiationHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Throwable;
v3 = v2 instanceof io.netty.handler.codec.DecoderException;
if v3 == 0 goto label4;
v4 = virtualinvoke v2.<java.lang.Throwable: java.lang.Throwable getCause()>();
v5 = v4 instanceof javax.net.ssl.SSLException;
if v5 == 0 goto label4;
label1:
virtualinvoke v0.<io.netty.handler.ssl.ApplicationProtocolNegotiationHandler: void handshakeFailure(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)>(v1, v4);
label2:
specialinvoke v0.<io.netty.handler.ssl.ApplicationProtocolNegotiationHandler: void removeSelfIfPresent(io.netty.channel.ChannelHandlerContext)>(v1);
return;
label3:
v6 := @caughtexception;
specialinvoke v0.<io.netty.handler.ssl.ApplicationProtocolNegotiationHandler: void removeSelfIfPresent(io.netty.channel.ChannelHandlerContext)>(v1);
throw v6;
label4:
v7 = <io.netty.handler.ssl.ApplicationProtocolNegotiationHandler: io.netty.util.internal.logging.InternalLogger logger>;
v8 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
interfaceinvoke v7.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("{} Failed to select the application-level protocol:", v8, v2);
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireExceptionCaught(java.lang.Throwable)>(v2);
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture close()>();
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
static void <clinit>()
{
io.netty.util.internal.logging.InternalLogger v0;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/handler/ssl/ApplicationProtocolNegotiationHandler;");
<io.netty.handler.ssl.ApplicationProtocolNegotiationHandler: io.netty.util.internal.logging.InternalLogger logger> = v0;
return;
}
}