final class io.netty.handler.ssl.BouncyCastleAlpnSslEngine extends io.netty.handler.ssl.JdkAlpnSslEngine
{
void <init>(javax.net.ssl.SSLEngine, io.netty.handler.ssl.JdkApplicationProtocolNegotiator, boolean)
{
io.netty.handler.ssl.BouncyCastleAlpnSslEngine$1 v4;
io.netty.handler.ssl.BouncyCastleAlpnSslEngine$2 v5;
io.netty.handler.ssl.BouncyCastleAlpnSslEngine v0;
io.netty.handler.ssl.JdkApplicationProtocolNegotiator v2;
boolean v3;
javax.net.ssl.SSLEngine v1;
v0 := @this: io.netty.handler.ssl.BouncyCastleAlpnSslEngine;
v1 := @parameter0: javax.net.ssl.SSLEngine;
v2 := @parameter1: io.netty.handler.ssl.JdkApplicationProtocolNegotiator;
v3 := @parameter2: boolean;
v4 = new io.netty.handler.ssl.BouncyCastleAlpnSslEngine$1;
specialinvoke v4.<io.netty.handler.ssl.BouncyCastleAlpnSslEngine$1: void <init>()>();
v5 = new io.netty.handler.ssl.BouncyCastleAlpnSslEngine$2;
specialinvoke v5.<io.netty.handler.ssl.BouncyCastleAlpnSslEngine$2: void <init>()>();
specialinvoke v0.<io.netty.handler.ssl.JdkAlpnSslEngine: void <init>(javax.net.ssl.SSLEngine,io.netty.handler.ssl.JdkApplicationProtocolNegotiator,boolean,java.util.function.BiConsumer,java.util.function.BiConsumer)>(v1, v2, v3, v4, v5);
return;
}
public java.lang.String getApplicationProtocol()
{
io.netty.handler.ssl.BouncyCastleAlpnSslEngine v0;
java.lang.String v2;
javax.net.ssl.SSLEngine v1;
v0 := @this: io.netty.handler.ssl.BouncyCastleAlpnSslEngine;
v1 = virtualinvoke v0.<io.netty.handler.ssl.BouncyCastleAlpnSslEngine: javax.net.ssl.SSLEngine getWrappedEngine()>();
v2 = staticinvoke <io.netty.handler.ssl.BouncyCastleAlpnSslUtils: java.lang.String getApplicationProtocol(javax.net.ssl.SSLEngine)>(v1);
return v2;
}
public java.lang.String getHandshakeApplicationProtocol()
{
io.netty.handler.ssl.BouncyCastleAlpnSslEngine v0;
java.lang.String v2;
javax.net.ssl.SSLEngine v1;
v0 := @this: io.netty.handler.ssl.BouncyCastleAlpnSslEngine;
v1 = virtualinvoke v0.<io.netty.handler.ssl.BouncyCastleAlpnSslEngine: javax.net.ssl.SSLEngine getWrappedEngine()>();
v2 = staticinvoke <io.netty.handler.ssl.BouncyCastleAlpnSslUtils: java.lang.String getHandshakeApplicationProtocol(javax.net.ssl.SSLEngine)>(v1);
return v2;
}
public void setHandshakeApplicationProtocolSelector(java.util.function.BiFunction)
{
io.netty.handler.ssl.BouncyCastleAlpnSslEngine v0;
java.util.function.BiFunction v1;
javax.net.ssl.SSLEngine v2;
v0 := @this: io.netty.handler.ssl.BouncyCastleAlpnSslEngine;
v1 := @parameter0: java.util.function.BiFunction;
v2 = virtualinvoke v0.<io.netty.handler.ssl.BouncyCastleAlpnSslEngine: javax.net.ssl.SSLEngine getWrappedEngine()>();
staticinvoke <io.netty.handler.ssl.BouncyCastleAlpnSslUtils: void setHandshakeApplicationProtocolSelector(javax.net.ssl.SSLEngine,java.util.function.BiFunction)>(v2, v1);
return;
}
public java.util.function.BiFunction getHandshakeApplicationProtocolSelector()
{
io.netty.handler.ssl.BouncyCastleAlpnSslEngine v0;
java.util.function.BiFunction v2;
javax.net.ssl.SSLEngine v1;
v0 := @this: io.netty.handler.ssl.BouncyCastleAlpnSslEngine;
v1 = virtualinvoke v0.<io.netty.handler.ssl.BouncyCastleAlpnSslEngine: javax.net.ssl.SSLEngine getWrappedEngine()>();
v2 = staticinvoke <io.netty.handler.ssl.BouncyCastleAlpnSslUtils: java.util.function.BiFunction getHandshakeApplicationProtocolSelector(javax.net.ssl.SSLEngine)>(v1);
return v2;
}
}