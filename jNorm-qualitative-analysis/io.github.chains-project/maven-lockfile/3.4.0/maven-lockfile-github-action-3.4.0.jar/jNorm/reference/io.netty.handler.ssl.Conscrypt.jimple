final class io.netty.handler.ssl.Conscrypt extends java.lang.Object
{
private static final java.lang.reflect.Method IS_CONSCRYPT_SSLENGINE;
static boolean isAvailable()
{
java.lang.reflect.Method v0;
boolean v1;
v0 = <io.netty.handler.ssl.Conscrypt: java.lang.reflect.Method IS_CONSCRYPT_SSLENGINE>;
if v0 == null goto label1;
v1 = 1;
goto label2;
label1:
v1 = 0;
label2:
return v1;
}
static boolean isEngineSupported(javax.net.ssl.SSLEngine)
{
java.lang.IllegalAccessException v7;
java.lang.Object[] v3;
java.lang.RuntimeException v9;
java.lang.reflect.InvocationTargetException v8;
javax.net.ssl.SSLEngine v0;
java.lang.Object v4;
java.lang.reflect.Method v1, v2;
boolean v5, v6;
v0 := @parameter0: javax.net.ssl.SSLEngine;
label1:
v1 = <io.netty.handler.ssl.Conscrypt: java.lang.reflect.Method IS_CONSCRYPT_SSLENGINE>;
if v1 == null goto label2;
v2 = <io.netty.handler.ssl.Conscrypt: java.lang.reflect.Method IS_CONSCRYPT_SSLENGINE>;
v3 = newarray (java.lang.Object)[1];
v3[0] = v0;
v4 = virtualinvoke v2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, v3);
v5 = virtualinvoke v4.<java.lang.Boolean: boolean booleanValue()>();
if v5 == 0 goto label2;
v6 = 1;
goto label3;
label2:
v6 = 0;
label3:
return v6;
label4:
v7 := @caughtexception;
return 0;
label5:
v8 := @caughtexception;
v9 = new java.lang.RuntimeException;
specialinvoke v9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(v8);
throw v9;
catch java.lang.IllegalAccessException from label1 to label3 with label4;
catch java.lang.reflect.InvocationTargetException from label1 to label3 with label5;
}
private void <init>()
{
io.netty.handler.ssl.Conscrypt v0;
v0 := @this: io.netty.handler.ssl.Conscrypt;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void <clinit>()
{
java.lang.Throwable v9;
java.lang.Class[] v8;
int v1, v2;
java.lang.Class v5, v7;
java.lang.ClassLoader v4, v6;
java.lang.reflect.Method v0;
boolean v3;
v0 = null;
v1 = staticinvoke <io.netty.util.internal.PlatformDependent: int javaVersion()>();
if v1 < 8 goto label1;
v2 = staticinvoke <io.netty.util.internal.PlatformDependent: int javaVersion()>();
if v2 < 15 goto label2;
label1:
v3 = staticinvoke <io.netty.util.internal.PlatformDependent: boolean isAndroid()>();
if v3 == 0 goto label5;
label2:
v4 = staticinvoke <io.netty.util.internal.PlatformDependent: java.lang.ClassLoader getClassLoader(java.lang.Class)>(class "Lio/netty/handler/ssl/ConscryptAlpnSslEngine;");
v5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("org.conscrypt.OpenSSLProvider", 1, v4);
virtualinvoke v5.<java.lang.Class: java.lang.Object newInstance()>();
v6 = staticinvoke <io.netty.util.internal.PlatformDependent: java.lang.ClassLoader getClassLoader(java.lang.Class)>(class "Lio/netty/handler/ssl/ConscryptAlpnSslEngine;");
v7 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("org.conscrypt.Conscrypt", 1, v6);
v8 = newarray (java.lang.Class)[1];
v8[0] = class "Ljavax/net/ssl/SSLEngine;";
v0 = virtualinvoke v7.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("isConscrypt", v8);
label3:
goto label5;
label4:
v9 := @caughtexception;
label5:
<io.netty.handler.ssl.Conscrypt: java.lang.reflect.Method IS_CONSCRYPT_SSLENGINE> = v0;
return;
catch java.lang.Throwable from label2 to label3 with label4;
}
}