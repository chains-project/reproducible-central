public final class io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator extends io.netty.handler.ssl.JdkBaseApplicationProtocolNegotiator
{
private static final boolean AVAILABLE;
private static final io.netty.handler.ssl.JdkApplicationProtocolNegotiator$SslEngineWrapperFactory ALPN_WRAPPER;
public void <init>(java.lang.Iterable)
{
io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator v0;
java.lang.Iterable v1;
v0 := @this: io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator;
v1 := @parameter0: java.lang.Iterable;
specialinvoke v0.<io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator: void <init>(boolean,java.lang.Iterable)>(0, v1);
return;
}
public transient void <init>(java.lang.String[])
{
io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator v0;
java.lang.String[] v1;
v0 := @this: io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator;
v1 := @parameter0: java.lang.String[];
specialinvoke v0.<io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator: void <init>(boolean,java.lang.String[])>(0, v1);
return;
}
public void <init>(boolean, java.lang.Iterable)
{
io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator v0;
java.lang.Iterable v2;
boolean v1;
v0 := @this: io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator;
v1 := @parameter0: boolean;
v2 := @parameter1: java.lang.Iterable;
specialinvoke v0.<io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator: void <init>(boolean,boolean,java.lang.Iterable)>(v1, v1, v2);
return;
}
public transient void <init>(boolean, java.lang.String[])
{
io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator v0;
java.lang.String[] v2;
boolean v1;
v0 := @this: io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator;
v1 := @parameter0: boolean;
v2 := @parameter1: java.lang.String[];
specialinvoke v0.<io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator: void <init>(boolean,boolean,java.lang.String[])>(v1, v1, v2);
return;
}
public void <init>(boolean, boolean, java.lang.Iterable)
{
io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator v0;
io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectorFactory v4;
io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory v5;
java.lang.Iterable v3;
boolean v1, v2;
v0 := @this: io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator;
v1 := @parameter0: boolean;
v2 := @parameter1: boolean;
v3 := @parameter2: java.lang.Iterable;
if v2 == 0 goto label1;
v4 = <io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectorFactory FAIL_SELECTOR_FACTORY>;
goto label2;
label1:
v4 = <io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectorFactory NO_FAIL_SELECTOR_FACTORY>;
label2:
if v1 == 0 goto label3;
v5 = <io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory FAIL_SELECTION_LISTENER_FACTORY>;
goto label4;
label3:
v5 = <io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory NO_FAIL_SELECTION_LISTENER_FACTORY>;
label4:
specialinvoke v0.<io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator: void <init>(io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectorFactory,io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory,java.lang.Iterable)>(v4, v5, v3);
return;
}
public transient void <init>(boolean, boolean, java.lang.String[])
{
io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator v0;
io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectorFactory v4;
java.lang.String[] v3;
io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory v5;
boolean v1, v2;
v0 := @this: io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator;
v1 := @parameter0: boolean;
v2 := @parameter1: boolean;
v3 := @parameter2: java.lang.String[];
if v2 == 0 goto label1;
v4 = <io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectorFactory FAIL_SELECTOR_FACTORY>;
goto label2;
label1:
v4 = <io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectorFactory NO_FAIL_SELECTOR_FACTORY>;
label2:
if v1 == 0 goto label3;
v5 = <io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory FAIL_SELECTION_LISTENER_FACTORY>;
goto label4;
label3:
v5 = <io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory NO_FAIL_SELECTION_LISTENER_FACTORY>;
label4:
specialinvoke v0.<io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator: void <init>(io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectorFactory,io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory,java.lang.String[])>(v4, v5, v3);
return;
}
public void <init>(io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectorFactory, io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory, java.lang.Iterable)
{
io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator v0;
io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectorFactory v1;
io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory v2;
io.netty.handler.ssl.JdkApplicationProtocolNegotiator$SslEngineWrapperFactory v4;
java.lang.Iterable v3;
v0 := @this: io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator;
v1 := @parameter0: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectorFactory;
v2 := @parameter1: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory;
v3 := @parameter2: java.lang.Iterable;
v4 = <io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$SslEngineWrapperFactory ALPN_WRAPPER>;
specialinvoke v0.<io.netty.handler.ssl.JdkBaseApplicationProtocolNegotiator: void <init>(io.netty.handler.ssl.JdkApplicationProtocolNegotiator$SslEngineWrapperFactory,io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectorFactory,io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory,java.lang.Iterable)>(v4, v1, v2, v3);
return;
}
public transient void <init>(io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectorFactory, io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory, java.lang.String[])
{
io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator v0;
io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectorFactory v1;
java.lang.String[] v3;
io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory v2;
io.netty.handler.ssl.JdkApplicationProtocolNegotiator$SslEngineWrapperFactory v4;
v0 := @this: io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator;
v1 := @parameter0: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectorFactory;
v2 := @parameter1: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory;
v3 := @parameter2: java.lang.String[];
v4 = <io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$SslEngineWrapperFactory ALPN_WRAPPER>;
specialinvoke v0.<io.netty.handler.ssl.JdkBaseApplicationProtocolNegotiator: void <init>(io.netty.handler.ssl.JdkApplicationProtocolNegotiator$SslEngineWrapperFactory,io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectorFactory,io.netty.handler.ssl.JdkApplicationProtocolNegotiator$ProtocolSelectionListenerFactory,java.lang.String[])>(v4, v1, v2, v3);
return;
}
static boolean isAlpnSupported()
{
boolean v0;
v0 = <io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator: boolean AVAILABLE>;
return v0;
}
static void <clinit>()
{
io.netty.handler.ssl.JdkApplicationProtocolNegotiator$AllocatorAwareSslEngineWrapperFactory v7;
io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator$FailureWrapper v8;
io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator$AlpnWrapper v6;
boolean v0, v1, v2, v3, v4, v5;
v0 = staticinvoke <io.netty.handler.ssl.Conscrypt: boolean isAvailable()>();
if v0 != 0 goto label1;
v1 = staticinvoke <io.netty.handler.ssl.JdkAlpnSslUtils: boolean supportsAlpn()>();
if v1 != 0 goto label1;
v2 = staticinvoke <io.netty.handler.ssl.JettyAlpnSslEngine: boolean isAvailable()>();
if v2 != 0 goto label1;
v3 = staticinvoke <io.netty.handler.ssl.BouncyCastle: boolean isAvailable()>();
if v3 == 0 goto label2;
label1:
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
<io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator: boolean AVAILABLE> = v4;
v5 = <io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator: boolean AVAILABLE>;
if v5 == 0 goto label4;
v6 = new io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator$AlpnWrapper;
v7 = v6;
specialinvoke v6.<io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator$AlpnWrapper: void <init>()>();
goto label5;
label4:
v8 = new io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator$FailureWrapper;
v7 = v8;
specialinvoke v8.<io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator$FailureWrapper: void <init>()>();
label5:
<io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator: io.netty.handler.ssl.JdkApplicationProtocolNegotiator$SslEngineWrapperFactory ALPN_WRAPPER> = v7;
return;
}
}