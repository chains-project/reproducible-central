final class io.netty.handler.ssl.JdkAlpnSslUtils extends java.lang.Object
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private static final java.lang.reflect.Method SET_APPLICATION_PROTOCOLS;
private static final java.lang.reflect.Method GET_APPLICATION_PROTOCOL;
private static final java.lang.reflect.Method GET_HANDSHAKE_APPLICATION_PROTOCOL;
private static final java.lang.reflect.Method SET_HANDSHAKE_APPLICATION_PROTOCOL_SELECTOR;
private static final java.lang.reflect.Method GET_HANDSHAKE_APPLICATION_PROTOCOL_SELECTOR;
private void <init>()
{
io.netty.handler.ssl.JdkAlpnSslUtils v0;
v0 := @this: io.netty.handler.ssl.JdkAlpnSslUtils;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static boolean supportsAlpn()
{
java.lang.reflect.Method v0;
boolean v1;
v0 = <io.netty.handler.ssl.JdkAlpnSslUtils: java.lang.reflect.Method GET_APPLICATION_PROTOCOL>;
if v0 == null goto label1;
v1 = 1;
goto label2;
label1:
v1 = 0;
label2:
return v1;
}
static java.lang.String getApplicationProtocol(javax.net.ssl.SSLEngine)
{
java.lang.IllegalStateException v6;
java.lang.UnsupportedOperationException v4;
java.lang.Object[] v2;
java.lang.Object v3;
java.lang.reflect.Method v1;
java.lang.Exception v5;
javax.net.ssl.SSLEngine v0;
v0 := @parameter0: javax.net.ssl.SSLEngine;
label1:
v1 = <io.netty.handler.ssl.JdkAlpnSslUtils: java.lang.reflect.Method GET_APPLICATION_PROTOCOL>;
v2 = newarray (java.lang.Object)[0];
v3 = virtualinvoke v1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v0, v2);
label2:
return v3;
label3:
v4 := @caughtexception;
throw v4;
label4:
v5 := @caughtexception;
v6 = new java.lang.IllegalStateException;
specialinvoke v6.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(v5);
throw v6;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
catch java.lang.Exception from label1 to label2 with label4;
}
static java.lang.String getHandshakeApplicationProtocol(javax.net.ssl.SSLEngine)
{
java.lang.IllegalStateException v6;
java.lang.UnsupportedOperationException v4;
java.lang.Object[] v2;
java.lang.Object v3;
java.lang.reflect.Method v1;
java.lang.Exception v5;
javax.net.ssl.SSLEngine v0;
v0 := @parameter0: javax.net.ssl.SSLEngine;
label1:
v1 = <io.netty.handler.ssl.JdkAlpnSslUtils: java.lang.reflect.Method GET_HANDSHAKE_APPLICATION_PROTOCOL>;
v2 = newarray (java.lang.Object)[0];
v3 = virtualinvoke v1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v0, v2);
label2:
return v3;
label3:
v4 := @caughtexception;
throw v4;
label4:
v5 := @caughtexception;
v6 = new java.lang.IllegalStateException;
specialinvoke v6.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(v5);
throw v6;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
catch java.lang.Exception from label1 to label2 with label4;
}
static void setApplicationProtocols(javax.net.ssl.SSLEngine, java.util.List)
{
java.lang.IllegalStateException v9;
java.lang.UnsupportedOperationException v7;
java.lang.Object[] v4, v6;
javax.net.ssl.SSLParameters v2;
java.lang.String[] v3;
java.lang.Exception v8;
javax.net.ssl.SSLEngine v0;
java.util.List v1;
java.lang.reflect.Method v5;
v0 := @parameter0: javax.net.ssl.SSLEngine;
v1 := @parameter1: java.util.List;
v2 = virtualinvoke v0.<javax.net.ssl.SSLEngine: javax.net.ssl.SSLParameters getSSLParameters()>();
v3 = <io.netty.util.internal.EmptyArrays: java.lang.String[] EMPTY_STRINGS>;
v4 = interfaceinvoke v1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v3);
label1:
v5 = <io.netty.handler.ssl.JdkAlpnSslUtils: java.lang.reflect.Method SET_APPLICATION_PROTOCOLS>;
v6 = newarray (java.lang.Object)[1];
v6[0] = v4;
virtualinvoke v5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v2, v6);
label2:
goto label5;
label3:
v7 := @caughtexception;
throw v7;
label4:
v8 := @caughtexception;
v9 = new java.lang.IllegalStateException;
specialinvoke v9.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(v8);
throw v9;
label5:
virtualinvoke v0.<javax.net.ssl.SSLEngine: void setSSLParameters(javax.net.ssl.SSLParameters)>(v2);
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
catch java.lang.Exception from label1 to label2 with label4;
}
static void setHandshakeApplicationProtocolSelector(javax.net.ssl.SSLEngine, java.util.function.BiFunction)
{
java.lang.IllegalStateException v6;
java.lang.UnsupportedOperationException v4;
java.lang.Object[] v3;
java.util.function.BiFunction v1;
java.lang.reflect.Method v2;
java.lang.Exception v5;
javax.net.ssl.SSLEngine v0;
v0 := @parameter0: javax.net.ssl.SSLEngine;
v1 := @parameter1: java.util.function.BiFunction;
label1:
v2 = <io.netty.handler.ssl.JdkAlpnSslUtils: java.lang.reflect.Method SET_HANDSHAKE_APPLICATION_PROTOCOL_SELECTOR>;
v3 = newarray (java.lang.Object)[1];
v3[0] = v1;
virtualinvoke v2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v0, v3);
label2:
goto label5;
label3:
v4 := @caughtexception;
throw v4;
label4:
v5 := @caughtexception;
v6 = new java.lang.IllegalStateException;
specialinvoke v6.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(v5);
throw v6;
label5:
return;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
catch java.lang.Exception from label1 to label2 with label4;
}
static java.util.function.BiFunction getHandshakeApplicationProtocolSelector(javax.net.ssl.SSLEngine)
{
java.lang.IllegalStateException v6;
java.lang.UnsupportedOperationException v4;
java.lang.Object[] v2;
java.lang.Object v3;
java.lang.reflect.Method v1;
java.lang.Exception v5;
javax.net.ssl.SSLEngine v0;
v0 := @parameter0: javax.net.ssl.SSLEngine;
label1:
v1 = <io.netty.handler.ssl.JdkAlpnSslUtils: java.lang.reflect.Method GET_HANDSHAKE_APPLICATION_PROTOCOL_SELECTOR>;
v2 = newarray (java.lang.Object)[0];
v3 = virtualinvoke v1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v0, v2);
label2:
return v3;
label3:
v4 := @caughtexception;
throw v4;
label4:
v5 := @caughtexception;
v6 = new java.lang.IllegalStateException;
specialinvoke v6.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(v5);
throw v6;
catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
catch java.lang.Exception from label1 to label2 with label4;
}
static void <clinit>()
{
java.lang.Throwable v21;
javax.net.ssl.SSLContext v1;
java.lang.Object[] v12, v16, v20, v5, v8;
javax.net.ssl.SSLParameters v11;
java.lang.String[] v13;
java.lang.Integer v24;
javax.net.ssl.SSLEngine v2;
io.netty.handler.ssl.JdkAlpnSslUtils$2 v6;
io.netty.handler.ssl.JdkAlpnSslUtils$1 v3;
io.netty.handler.ssl.JdkAlpnSslUtils$4 v14;
io.netty.handler.ssl.JdkAlpnSslUtils$3 v9;
io.netty.handler.ssl.JdkAlpnSslUtils$6 v18;
io.netty.handler.ssl.JdkAlpnSslUtils$5 v17;
int v22;
io.netty.util.internal.logging.InternalLogger v0, v23;
java.lang.Object v10, v15, v19, v4, v7;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/handler/ssl/JdkAlpnSslUtils;");
<io.netty.handler.ssl.JdkAlpnSslUtils: io.netty.util.internal.logging.InternalLogger logger> = v0;
label1:
v1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>("TLS");
virtualinvoke v1.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(null, null, null);
v2 = virtualinvoke v1.<javax.net.ssl.SSLContext: javax.net.ssl.SSLEngine createSSLEngine()>();
v3 = new io.netty.handler.ssl.JdkAlpnSslUtils$1;
specialinvoke v3.<io.netty.handler.ssl.JdkAlpnSslUtils$1: void <init>()>();
v4 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>(v3);
v5 = newarray (java.lang.Object)[0];
virtualinvoke v4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v2, v5);
v6 = new io.netty.handler.ssl.JdkAlpnSslUtils$2;
specialinvoke v6.<io.netty.handler.ssl.JdkAlpnSslUtils$2: void <init>()>();
v7 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>(v6);
v8 = newarray (java.lang.Object)[0];
virtualinvoke v7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v2, v8);
v9 = new io.netty.handler.ssl.JdkAlpnSslUtils$3;
specialinvoke v9.<io.netty.handler.ssl.JdkAlpnSslUtils$3: void <init>()>();
v10 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>(v9);
v11 = virtualinvoke v2.<javax.net.ssl.SSLEngine: javax.net.ssl.SSLParameters getSSLParameters()>();
v12 = newarray (java.lang.Object)[1];
v13 = <io.netty.util.internal.EmptyArrays: java.lang.String[] EMPTY_STRINGS>;
v12[0] = v13;
virtualinvoke v10.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v11, v12);
v14 = new io.netty.handler.ssl.JdkAlpnSslUtils$4;
specialinvoke v14.<io.netty.handler.ssl.JdkAlpnSslUtils$4: void <init>()>();
v15 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>(v14);
v16 = newarray (java.lang.Object)[1];
v17 = new io.netty.handler.ssl.JdkAlpnSslUtils$5;
specialinvoke v17.<io.netty.handler.ssl.JdkAlpnSslUtils$5: void <init>()>();
v16[0] = v17;
virtualinvoke v15.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v2, v16);
v18 = new io.netty.handler.ssl.JdkAlpnSslUtils$6;
specialinvoke v18.<io.netty.handler.ssl.JdkAlpnSslUtils$6: void <init>()>();
v19 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>(v18);
v20 = newarray (java.lang.Object)[0];
virtualinvoke v19.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v2, v20);
label2:
goto label5;
label3:
v21 := @caughtexception;
v22 = staticinvoke <io.netty.util.internal.PlatformDependent: int javaVersion()>();
if v22 < 9 goto label4;
v23 = <io.netty.handler.ssl.JdkAlpnSslUtils: io.netty.util.internal.logging.InternalLogger logger>;
v24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v22);
interfaceinvoke v23.<io.netty.util.internal.logging.InternalLogger: void error(java.lang.String,java.lang.Object,java.lang.Object)>("Unable to initialize JdkAlpnSslUtils, but the detected java version was: {}", v24, v21);
label4:
v4 = null;
v7 = null;
v10 = null;
v15 = null;
v19 = null;
label5:
<io.netty.handler.ssl.JdkAlpnSslUtils: java.lang.reflect.Method GET_HANDSHAKE_APPLICATION_PROTOCOL> = v4;
<io.netty.handler.ssl.JdkAlpnSslUtils: java.lang.reflect.Method GET_APPLICATION_PROTOCOL> = v7;
<io.netty.handler.ssl.JdkAlpnSslUtils: java.lang.reflect.Method SET_APPLICATION_PROTOCOLS> = v10;
<io.netty.handler.ssl.JdkAlpnSslUtils: java.lang.reflect.Method SET_HANDSHAKE_APPLICATION_PROTOCOL_SELECTOR> = v15;
<io.netty.handler.ssl.JdkAlpnSslUtils: java.lang.reflect.Method GET_HANDSHAKE_APPLICATION_PROTOCOL_SELECTOR> = v19;
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
}