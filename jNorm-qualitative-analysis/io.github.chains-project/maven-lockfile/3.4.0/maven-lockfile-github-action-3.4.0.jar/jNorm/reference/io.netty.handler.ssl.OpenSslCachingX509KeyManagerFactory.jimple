public final class io.netty.handler.ssl.OpenSslCachingX509KeyManagerFactory extends javax.net.ssl.KeyManagerFactory
{
private final int maxCachedEntries;
public void <init>(javax.net.ssl.KeyManagerFactory)
{
javax.net.ssl.KeyManagerFactory v1;
io.netty.handler.ssl.OpenSslCachingX509KeyManagerFactory v0;
v0 := @this: io.netty.handler.ssl.OpenSslCachingX509KeyManagerFactory;
v1 := @parameter0: javax.net.ssl.KeyManagerFactory;
specialinvoke v0.<io.netty.handler.ssl.OpenSslCachingX509KeyManagerFactory: void <init>(javax.net.ssl.KeyManagerFactory,int)>(v1, 1024);
return;
}
public void <init>(javax.net.ssl.KeyManagerFactory, int)
{
io.netty.handler.ssl.OpenSslCachingX509KeyManagerFactory v0;
io.netty.handler.ssl.OpenSslCachingX509KeyManagerFactory$1 v3;
int v2, v6;
javax.net.ssl.KeyManagerFactory v1;
java.lang.String v5;
java.security.Provider v4;
v0 := @this: io.netty.handler.ssl.OpenSslCachingX509KeyManagerFactory;
v1 := @parameter0: javax.net.ssl.KeyManagerFactory;
v2 := @parameter1: int;
v3 = new io.netty.handler.ssl.OpenSslCachingX509KeyManagerFactory$1;
specialinvoke v3.<io.netty.handler.ssl.OpenSslCachingX509KeyManagerFactory$1: void <init>(javax.net.ssl.KeyManagerFactory)>(v1);
v4 = virtualinvoke v1.<javax.net.ssl.KeyManagerFactory: java.security.Provider getProvider()>();
v5 = virtualinvoke v1.<javax.net.ssl.KeyManagerFactory: java.lang.String getAlgorithm()>();
specialinvoke v0.<javax.net.ssl.KeyManagerFactory: void <init>(javax.net.ssl.KeyManagerFactorySpi,java.security.Provider,java.lang.String)>(v3, v4, v5);
v6 = staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositive(int,java.lang.String)>(v2, "maxCachedEntries");
v0.<io.netty.handler.ssl.OpenSslCachingX509KeyManagerFactory: int maxCachedEntries> = v6;
return;
}
io.netty.handler.ssl.OpenSslKeyMaterialProvider newProvider(java.lang.String)
{
javax.net.ssl.X509KeyManager v11, v3;
io.netty.handler.ssl.OpenSslKeyMaterialProvider v8;
io.netty.handler.ssl.OpenSslCachingKeyMaterialProvider v9;
io.netty.handler.ssl.OpenSslCachingX509KeyManagerFactory v0;
int v12;
java.lang.Class v5;
java.lang.String v1, v4, v6;
boolean v7;
javax.net.ssl.KeyManager[] v10, v2;
v0 := @this: io.netty.handler.ssl.OpenSslCachingX509KeyManagerFactory;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.netty.handler.ssl.OpenSslCachingX509KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>();
v3 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslContext: javax.net.ssl.X509KeyManager chooseX509KeyManager(javax.net.ssl.KeyManager[])>(v2);
v4 = "sun.security.ssl.X509KeyManagerImpl";
v5 = virtualinvoke v3.<java.lang.Object: java.lang.Class getClass()>();
v6 = virtualinvoke v5.<java.lang.Class: java.lang.String getName()>();
v7 = virtualinvoke v4.<java.lang.String: boolean equals(java.lang.Object)>(v6);
if v7 == 0 goto label1;
v8 = new io.netty.handler.ssl.OpenSslKeyMaterialProvider;
specialinvoke v8.<io.netty.handler.ssl.OpenSslKeyMaterialProvider: void <init>(javax.net.ssl.X509KeyManager,java.lang.String)>(v3, v1);
return v8;
label1:
v9 = new io.netty.handler.ssl.OpenSslCachingKeyMaterialProvider;
v10 = virtualinvoke v0.<io.netty.handler.ssl.OpenSslCachingX509KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>();
v11 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslContext: javax.net.ssl.X509KeyManager chooseX509KeyManager(javax.net.ssl.KeyManager[])>(v10);
v12 = v0.<io.netty.handler.ssl.OpenSslCachingX509KeyManagerFactory: int maxCachedEntries>;
specialinvoke v9.<io.netty.handler.ssl.OpenSslCachingKeyMaterialProvider: void <init>(javax.net.ssl.X509KeyManager,java.lang.String,int)>(v11, v1, v12);
return v9;
}
}