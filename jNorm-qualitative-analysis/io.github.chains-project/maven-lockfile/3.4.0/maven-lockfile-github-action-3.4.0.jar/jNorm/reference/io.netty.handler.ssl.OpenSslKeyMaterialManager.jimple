final class io.netty.handler.ssl.OpenSslKeyMaterialManager extends java.lang.Object
{
static final java.lang.String KEY_TYPE_RSA;
static final java.lang.String KEY_TYPE_DH_RSA;
static final java.lang.String KEY_TYPE_EC;
static final java.lang.String KEY_TYPE_EC_EC;
static final java.lang.String KEY_TYPE_EC_RSA;
private static final java.util.Map KEY_TYPES;
private final io.netty.handler.ssl.OpenSslKeyMaterialProvider provider;
void <init>(io.netty.handler.ssl.OpenSslKeyMaterialProvider)
{
io.netty.handler.ssl.OpenSslKeyMaterialManager v0;
io.netty.handler.ssl.OpenSslKeyMaterialProvider v1;
v0 := @this: io.netty.handler.ssl.OpenSslKeyMaterialManager;
v1 := @parameter0: io.netty.handler.ssl.OpenSslKeyMaterialProvider;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.handler.ssl.OpenSslKeyMaterialManager: io.netty.handler.ssl.OpenSslKeyMaterialProvider provider> = v1;
return;
}
void setKeyMaterialServerSide(io.netty.handler.ssl.ReferenceCountedOpenSslEngine) throws javax.net.ssl.SSLException
{
java.lang.String[] v2;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine v1;
java.util.HashSet v5;
java.util.Map v11, v6;
int v3, v7, v8, v9;
java.lang.String v10, v14, v16, v17;
boolean v13;
io.netty.handler.ssl.OpenSslKeyMaterialManager v0;
javax.net.ssl.SSLHandshakeException v15, v4;
java.lang.Object v12;
v0 := @this: io.netty.handler.ssl.OpenSslKeyMaterialManager;
v1 := @parameter0: io.netty.handler.ssl.ReferenceCountedOpenSslEngine;
v2 = virtualinvoke v1.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine: java.lang.String[] authMethods()>();
v3 = lengthof v2;
if v3 != 0 goto label1;
v4 = new javax.net.ssl.SSLHandshakeException;
specialinvoke v4.<javax.net.ssl.SSLHandshakeException: void <init>(java.lang.String)>("Unable to find key material");
throw v4;
label1:
v5 = new java.util.HashSet;
v6 = <io.netty.handler.ssl.OpenSslKeyMaterialManager: java.util.Map KEY_TYPES>;
v7 = interfaceinvoke v6.<java.util.Map: int size()>();
specialinvoke v5.<java.util.HashSet: void <init>(int)>(v7);
v8 = lengthof v2;
v9 = 0;
label2:
if v9 >= v8 goto label4;
v10 = v2[v9];
v11 = <io.netty.handler.ssl.OpenSslKeyMaterialManager: java.util.Map KEY_TYPES>;
v12 = interfaceinvoke v11.<java.util.Map: java.lang.Object get(java.lang.Object)>(v10);
if v12 == null goto label3;
v13 = interfaceinvoke v5.<java.util.Set: boolean add(java.lang.Object)>(v12);
if v13 == 0 goto label3;
v14 = specialinvoke v0.<io.netty.handler.ssl.OpenSslKeyMaterialManager: java.lang.String chooseServerAlias(io.netty.handler.ssl.ReferenceCountedOpenSslEngine,java.lang.String)>(v1, v12);
if v14 == null goto label3;
specialinvoke v0.<io.netty.handler.ssl.OpenSslKeyMaterialManager: void setKeyMaterial(io.netty.handler.ssl.ReferenceCountedOpenSslEngine,java.lang.String)>(v1, v14);
return;
label3:
v9 = v9 + 1;
goto label2;
label4:
v15 = new javax.net.ssl.SSLHandshakeException;
v16 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(v2);
v17 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v16) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unable to find key material for auth method(s): \u0001");
specialinvoke v15.<javax.net.ssl.SSLHandshakeException: void <init>(java.lang.String)>(v17);
throw v15;
}
void setKeyMaterialClientSide(io.netty.handler.ssl.ReferenceCountedOpenSslEngine, java.lang.String[], javax.security.auth.x500.X500Principal[]) throws javax.net.ssl.SSLException
{
io.netty.handler.ssl.ReferenceCountedOpenSslEngine v1;
javax.security.auth.x500.X500Principal[] v3;
io.netty.handler.ssl.OpenSslKeyMaterialManager v0;
java.lang.String[] v2;
java.lang.String v4;
v0 := @this: io.netty.handler.ssl.OpenSslKeyMaterialManager;
v1 := @parameter0: io.netty.handler.ssl.ReferenceCountedOpenSslEngine;
v2 := @parameter1: java.lang.String[];
v3 := @parameter2: javax.security.auth.x500.X500Principal[];
v4 = specialinvoke v0.<io.netty.handler.ssl.OpenSslKeyMaterialManager: java.lang.String chooseClientAlias(io.netty.handler.ssl.ReferenceCountedOpenSslEngine,java.lang.String[],javax.security.auth.x500.X500Principal[])>(v1, v2, v3);
if v4 == null goto label1;
specialinvoke v0.<io.netty.handler.ssl.OpenSslKeyMaterialManager: void setKeyMaterial(io.netty.handler.ssl.ReferenceCountedOpenSslEngine,java.lang.String)>(v1, v4);
label1:
return;
}
private void setKeyMaterial(io.netty.handler.ssl.ReferenceCountedOpenSslEngine, java.lang.String) throws javax.net.ssl.SSLException
{
java.lang.Throwable v9;
io.netty.handler.ssl.OpenSslKeyMaterialManager v0;
io.netty.buffer.ByteBufAllocator v5;
io.netty.handler.ssl.OpenSslKeyMaterialProvider v4;
java.lang.Exception v7;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine v1;
javax.net.ssl.SSLException v6, v8;
java.lang.String v2;
io.netty.handler.ssl.OpenSslKeyMaterial v3;
v0 := @this: io.netty.handler.ssl.OpenSslKeyMaterialManager;
v1 := @parameter0: io.netty.handler.ssl.ReferenceCountedOpenSslEngine;
v2 := @parameter1: java.lang.String;
v3 = null;
label1:
v4 = v0.<io.netty.handler.ssl.OpenSslKeyMaterialManager: io.netty.handler.ssl.OpenSslKeyMaterialProvider provider>;
v5 = v1.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine: io.netty.buffer.ByteBufAllocator alloc>;
v3 = virtualinvoke v4.<io.netty.handler.ssl.OpenSslKeyMaterialProvider: io.netty.handler.ssl.OpenSslKeyMaterial chooseKeyMaterial(io.netty.buffer.ByteBufAllocator,java.lang.String)>(v5, v2);
if v3 != null goto label3;
label2:
return;
label3:
virtualinvoke v1.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine: boolean setKeyMaterial(io.netty.handler.ssl.OpenSslKeyMaterial)>(v3);
label4:
interfaceinvoke v3.<io.netty.handler.ssl.OpenSslKeyMaterial: boolean release()>();
goto label9;
label5:
v6 := @caughtexception;
throw v6;
label6:
v7 := @caughtexception;
v8 = new javax.net.ssl.SSLException;
specialinvoke v8.<javax.net.ssl.SSLException: void <init>(java.lang.Throwable)>(v7);
throw v8;
label7:
v9 := @caughtexception;
if v3 == null goto label8;
interfaceinvoke v3.<io.netty.handler.ssl.OpenSslKeyMaterial: boolean release()>();
label8:
throw v9;
label9:
return;
catch javax.net.ssl.SSLException from label1 to label2 with label5;
catch javax.net.ssl.SSLException from label3 to label4 with label5;
catch java.lang.Exception from label1 to label2 with label6;
catch java.lang.Exception from label3 to label4 with label6;
catch java.lang.Throwable from label1 to label2 with label7;
catch java.lang.Throwable from label3 to label4 with label7;
}
private java.lang.String chooseClientAlias(io.netty.handler.ssl.ReferenceCountedOpenSslEngine, java.lang.String[], javax.security.auth.x500.X500Principal[])
{
javax.net.ssl.X509KeyManager v5;
io.netty.handler.ssl.OpenSslKeyMaterialManager v0;
io.netty.handler.ssl.OpenSslKeyMaterialProvider v4;
java.lang.String[] v2;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine v1;
javax.security.auth.x500.X500Principal[] v3;
java.lang.String v7, v8;
boolean v6;
v0 := @this: io.netty.handler.ssl.OpenSslKeyMaterialManager;
v1 := @parameter0: io.netty.handler.ssl.ReferenceCountedOpenSslEngine;
v2 := @parameter1: java.lang.String[];
v3 := @parameter2: javax.security.auth.x500.X500Principal[];
v4 = v0.<io.netty.handler.ssl.OpenSslKeyMaterialManager: io.netty.handler.ssl.OpenSslKeyMaterialProvider provider>;
v5 = virtualinvoke v4.<io.netty.handler.ssl.OpenSslKeyMaterialProvider: javax.net.ssl.X509KeyManager keyManager()>();
v6 = v5 instanceof javax.net.ssl.X509ExtendedKeyManager;
if v6 == 0 goto label1;
v7 = virtualinvoke v5.<javax.net.ssl.X509ExtendedKeyManager: java.lang.String chooseEngineClientAlias(java.lang.String[],java.security.Principal[],javax.net.ssl.SSLEngine)>(v2, v3, v1);
return v7;
label1:
v8 = interfaceinvoke v5.<javax.net.ssl.X509KeyManager: java.lang.String chooseClientAlias(java.lang.String[],java.security.Principal[],java.net.Socket)>(v2, v3, null);
return v8;
}
private java.lang.String chooseServerAlias(io.netty.handler.ssl.ReferenceCountedOpenSslEngine, java.lang.String)
{
javax.net.ssl.X509KeyManager v4;
io.netty.handler.ssl.OpenSslKeyMaterialManager v0;
io.netty.handler.ssl.OpenSslKeyMaterialProvider v3;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine v1;
java.lang.String v2, v6, v7;
boolean v5;
v0 := @this: io.netty.handler.ssl.OpenSslKeyMaterialManager;
v1 := @parameter0: io.netty.handler.ssl.ReferenceCountedOpenSslEngine;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.netty.handler.ssl.OpenSslKeyMaterialManager: io.netty.handler.ssl.OpenSslKeyMaterialProvider provider>;
v4 = virtualinvoke v3.<io.netty.handler.ssl.OpenSslKeyMaterialProvider: javax.net.ssl.X509KeyManager keyManager()>();
v5 = v4 instanceof javax.net.ssl.X509ExtendedKeyManager;
if v5 == 0 goto label1;
v6 = virtualinvoke v4.<javax.net.ssl.X509ExtendedKeyManager: java.lang.String chooseEngineServerAlias(java.lang.String,java.security.Principal[],javax.net.ssl.SSLEngine)>(v2, null, v1);
return v6;
label1:
v7 = interfaceinvoke v4.<javax.net.ssl.X509KeyManager: java.lang.String chooseServerAlias(java.lang.String,java.security.Principal[],java.net.Socket)>(v2, null, null);
return v7;
}
static void <clinit>()
{
java.util.HashMap v0;
java.util.Map v1, v2, v3, v4, v5, v6, v7;
v0 = new java.util.HashMap;
specialinvoke v0.<java.util.HashMap: void <init>()>();
<io.netty.handler.ssl.OpenSslKeyMaterialManager: java.util.Map KEY_TYPES> = v0;
v1 = <io.netty.handler.ssl.OpenSslKeyMaterialManager: java.util.Map KEY_TYPES>;
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("RSA", "RSA");
v2 = <io.netty.handler.ssl.OpenSslKeyMaterialManager: java.util.Map KEY_TYPES>;
interfaceinvoke v2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("DHE_RSA", "RSA");
v3 = <io.netty.handler.ssl.OpenSslKeyMaterialManager: java.util.Map KEY_TYPES>;
interfaceinvoke v3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ECDHE_RSA", "RSA");
v4 = <io.netty.handler.ssl.OpenSslKeyMaterialManager: java.util.Map KEY_TYPES>;
interfaceinvoke v4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ECDHE_ECDSA", "EC");
v5 = <io.netty.handler.ssl.OpenSslKeyMaterialManager: java.util.Map KEY_TYPES>;
interfaceinvoke v5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ECDH_RSA", "EC_RSA");
v6 = <io.netty.handler.ssl.OpenSslKeyMaterialManager: java.util.Map KEY_TYPES>;
interfaceinvoke v6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ECDH_ECDSA", "EC_EC");
v7 = <io.netty.handler.ssl.OpenSslKeyMaterialManager: java.util.Map KEY_TYPES>;
interfaceinvoke v7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("DH_RSA", "DH_RSA");
return;
}
}