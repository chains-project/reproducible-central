final class io.netty.handler.ssl.OpenSslPrivateKey extends io.netty.util.AbstractReferenceCounted implements java.security.PrivateKey
{
private long privateKeyAddress;
void <init>(long)
{
io.netty.handler.ssl.OpenSslPrivateKey v0;
long v1;
v0 := @this: io.netty.handler.ssl.OpenSslPrivateKey;
v1 := @parameter0: long;
specialinvoke v0.<io.netty.util.AbstractReferenceCounted: void <init>()>();
v0.<io.netty.handler.ssl.OpenSslPrivateKey: long privateKeyAddress> = v1;
return;
}
public java.lang.String getAlgorithm()
{
io.netty.handler.ssl.OpenSslPrivateKey v0;
v0 := @this: io.netty.handler.ssl.OpenSslPrivateKey;
return "unknown";
}
public java.lang.String getFormat()
{
io.netty.handler.ssl.OpenSslPrivateKey v0;
v0 := @this: io.netty.handler.ssl.OpenSslPrivateKey;
return null;
}
public byte[] getEncoded()
{
io.netty.handler.ssl.OpenSslPrivateKey v0;
v0 := @this: io.netty.handler.ssl.OpenSslPrivateKey;
return null;
}
private long privateKeyAddress()
{
io.netty.handler.ssl.OpenSslPrivateKey v0;
io.netty.util.IllegalReferenceCountException v2;
int v1;
long v3;
v0 := @this: io.netty.handler.ssl.OpenSslPrivateKey;
v1 = virtualinvoke v0.<io.netty.handler.ssl.OpenSslPrivateKey: int refCnt()>();
if v1 > 0 goto label1;
v2 = new io.netty.util.IllegalReferenceCountException;
specialinvoke v2.<io.netty.util.IllegalReferenceCountException: void <init>()>();
throw v2;
label1:
v3 = v0.<io.netty.handler.ssl.OpenSslPrivateKey: long privateKeyAddress>;
return v3;
}
protected void deallocate()
{
io.netty.handler.ssl.OpenSslPrivateKey v0;
long v1;
v0 := @this: io.netty.handler.ssl.OpenSslPrivateKey;
v1 = v0.<io.netty.handler.ssl.OpenSslPrivateKey: long privateKeyAddress>;
staticinvoke <io.netty.internal.tcnative.SSL: void freePrivateKey(long)>(v1);
v0.<io.netty.handler.ssl.OpenSslPrivateKey: long privateKeyAddress> = 0L;
return;
}
public io.netty.handler.ssl.OpenSslPrivateKey retain()
{
io.netty.handler.ssl.OpenSslPrivateKey v0;
v0 := @this: io.netty.handler.ssl.OpenSslPrivateKey;
specialinvoke v0.<io.netty.util.AbstractReferenceCounted: io.netty.util.ReferenceCounted retain()>();
return v0;
}
public io.netty.handler.ssl.OpenSslPrivateKey retain(int)
{
int v1;
io.netty.handler.ssl.OpenSslPrivateKey v0;
v0 := @this: io.netty.handler.ssl.OpenSslPrivateKey;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.util.AbstractReferenceCounted: io.netty.util.ReferenceCounted retain(int)>(v1);
return v0;
}
public io.netty.handler.ssl.OpenSslPrivateKey touch()
{
io.netty.handler.ssl.OpenSslPrivateKey v0;
v0 := @this: io.netty.handler.ssl.OpenSslPrivateKey;
specialinvoke v0.<io.netty.util.AbstractReferenceCounted: io.netty.util.ReferenceCounted touch()>();
return v0;
}
public io.netty.handler.ssl.OpenSslPrivateKey touch(java.lang.Object)
{
io.netty.handler.ssl.OpenSslPrivateKey v0;
java.lang.Object v1;
v0 := @this: io.netty.handler.ssl.OpenSslPrivateKey;
v1 := @parameter0: java.lang.Object;
return v0;
}
public void destroy()
{
int v1;
io.netty.handler.ssl.OpenSslPrivateKey v0;
v0 := @this: io.netty.handler.ssl.OpenSslPrivateKey;
v1 = virtualinvoke v0.<io.netty.handler.ssl.OpenSslPrivateKey: int refCnt()>();
virtualinvoke v0.<io.netty.handler.ssl.OpenSslPrivateKey: boolean release(int)>(v1);
return;
}
public boolean isDestroyed()
{
int v1;
io.netty.handler.ssl.OpenSslPrivateKey v0;
boolean v2;
v0 := @this: io.netty.handler.ssl.OpenSslPrivateKey;
v1 = virtualinvoke v0.<io.netty.handler.ssl.OpenSslPrivateKey: int refCnt()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
io.netty.handler.ssl.OpenSslKeyMaterial newKeyMaterial(long, java.security.cert.X509Certificate[])
{
io.netty.handler.ssl.OpenSslPrivateKey v0;
io.netty.handler.ssl.OpenSslPrivateKey$OpenSslPrivateKeyMaterial v3;
long v1;
java.security.cert.X509Certificate[] v2;
v0 := @this: io.netty.handler.ssl.OpenSslPrivateKey;
v1 := @parameter0: long;
v2 := @parameter1: java.security.cert.X509Certificate[];
v3 = new io.netty.handler.ssl.OpenSslPrivateKey$OpenSslPrivateKeyMaterial;
specialinvoke v3.<io.netty.handler.ssl.OpenSslPrivateKey$OpenSslPrivateKeyMaterial: void <init>(io.netty.handler.ssl.OpenSslPrivateKey,long,java.security.cert.X509Certificate[])>(v0, v1, v2);
return v3;
}
}