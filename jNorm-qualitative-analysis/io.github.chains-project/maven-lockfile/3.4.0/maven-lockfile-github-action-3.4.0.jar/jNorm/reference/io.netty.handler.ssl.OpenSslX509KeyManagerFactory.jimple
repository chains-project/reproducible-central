public final class io.netty.handler.ssl.OpenSslX509KeyManagerFactory extends javax.net.ssl.KeyManagerFactory
{
private final io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi spi;
public void <init>()
{
io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi v1;
io.netty.handler.ssl.OpenSslX509KeyManagerFactory v0;
v0 := @this: io.netty.handler.ssl.OpenSslX509KeyManagerFactory;
v1 = staticinvoke <io.netty.handler.ssl.OpenSslX509KeyManagerFactory: io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi newOpenSslKeyManagerFactorySpi(java.security.Provider)>(null);
specialinvoke v0.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory: void <init>(io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi)>(v1);
return;
}
public void <init>(java.security.Provider)
{
io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi v2;
io.netty.handler.ssl.OpenSslX509KeyManagerFactory v0;
java.security.Provider v1;
v0 := @this: io.netty.handler.ssl.OpenSslX509KeyManagerFactory;
v1 := @parameter0: java.security.Provider;
v2 = staticinvoke <io.netty.handler.ssl.OpenSslX509KeyManagerFactory: io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi newOpenSslKeyManagerFactorySpi(java.security.Provider)>(v1);
specialinvoke v0.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory: void <init>(io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi)>(v2);
return;
}
public void <init>(java.lang.String, java.security.Provider) throws java.security.NoSuchAlgorithmException
{
io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi v3;
java.lang.String v1;
io.netty.handler.ssl.OpenSslX509KeyManagerFactory v0;
java.security.Provider v2;
v0 := @this: io.netty.handler.ssl.OpenSslX509KeyManagerFactory;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.security.Provider;
v3 = staticinvoke <io.netty.handler.ssl.OpenSslX509KeyManagerFactory: io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi newOpenSslKeyManagerFactorySpi(java.lang.String,java.security.Provider)>(v1, v2);
specialinvoke v0.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory: void <init>(io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi)>(v3);
return;
}
private void <init>(io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi)
{
io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi v1;
javax.net.ssl.KeyManagerFactory v2, v4;
java.lang.String v5;
io.netty.handler.ssl.OpenSslX509KeyManagerFactory v0;
java.security.Provider v3;
v0 := @this: io.netty.handler.ssl.OpenSslX509KeyManagerFactory;
v1 := @parameter0: io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi;
v2 = v1.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi: javax.net.ssl.KeyManagerFactory kmf>;
v3 = virtualinvoke v2.<javax.net.ssl.KeyManagerFactory: java.security.Provider getProvider()>();
v4 = v1.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi: javax.net.ssl.KeyManagerFactory kmf>;
v5 = virtualinvoke v4.<javax.net.ssl.KeyManagerFactory: java.lang.String getAlgorithm()>();
specialinvoke v0.<javax.net.ssl.KeyManagerFactory: void <init>(javax.net.ssl.KeyManagerFactorySpi,java.security.Provider,java.lang.String)>(v1, v3, v5);
v0.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory: io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi spi> = v1;
return;
}
private static io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi newOpenSslKeyManagerFactorySpi(java.security.Provider)
{
java.lang.IllegalStateException v3;
java.security.NoSuchAlgorithmException v2;
io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi v1;
java.security.Provider v0;
v0 := @parameter0: java.security.Provider;
label1:
v1 = staticinvoke <io.netty.handler.ssl.OpenSslX509KeyManagerFactory: io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi newOpenSslKeyManagerFactorySpi(java.lang.String,java.security.Provider)>(null, v0);
label2:
return v1;
label3:
v2 := @caughtexception;
v3 = new java.lang.IllegalStateException;
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(v2);
throw v3;
catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
}
private static io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi newOpenSslKeyManagerFactorySpi(java.lang.String, java.security.Provider) throws java.security.NoSuchAlgorithmException
{
io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi v2;
javax.net.ssl.KeyManagerFactory v3;
java.lang.String v0;
java.security.Provider v1;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.security.Provider;
if v0 != null goto label1;
v0 = staticinvoke <javax.net.ssl.KeyManagerFactory: java.lang.String getDefaultAlgorithm()>();
label1:
v2 = new io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi;
if v1 != null goto label2;
v3 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>(v0);
goto label3;
label2:
v3 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String,java.security.Provider)>(v0, v1);
label3:
specialinvoke v2.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi: void <init>(javax.net.ssl.KeyManagerFactory)>(v3);
return v2;
}
io.netty.handler.ssl.OpenSslKeyMaterialProvider newProvider()
{
io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi v1;
io.netty.handler.ssl.OpenSslKeyMaterialProvider v2;
io.netty.handler.ssl.OpenSslX509KeyManagerFactory v0;
v0 := @this: io.netty.handler.ssl.OpenSslX509KeyManagerFactory;
v1 = v0.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory: io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi spi>;
v2 = virtualinvoke v1.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyManagerFactorySpi: io.netty.handler.ssl.OpenSslKeyMaterialProvider newProvider()>();
return v2;
}
public static io.netty.handler.ssl.OpenSslX509KeyManagerFactory newEngineBased(java.io.File, java.lang.String) throws java.security.cert.CertificateException, java.io.IOException, java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException
{
java.lang.String v1;
java.security.cert.X509Certificate[] v2;
java.io.File v0;
io.netty.handler.ssl.OpenSslX509KeyManagerFactory v3;
v0 := @parameter0: java.io.File;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <io.netty.handler.ssl.SslContext: java.security.cert.X509Certificate[] toX509Certificates(java.io.File)>(v0);
v3 = staticinvoke <io.netty.handler.ssl.OpenSslX509KeyManagerFactory: io.netty.handler.ssl.OpenSslX509KeyManagerFactory newEngineBased(java.security.cert.X509Certificate[],java.lang.String)>(v2, v1);
return v3;
}
public static io.netty.handler.ssl.OpenSslX509KeyManagerFactory newEngineBased(java.security.cert.X509Certificate[], java.lang.String) throws java.security.cert.CertificateException, java.io.IOException, java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException
{
io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore v2;
char[] v5;
java.lang.Object v3;
java.lang.String v1;
java.security.cert.X509Certificate[] v0;
io.netty.handler.ssl.OpenSslX509KeyManagerFactory v4;
v0 := @parameter0: java.security.cert.X509Certificate[];
v1 := @parameter1: java.lang.String;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, "certificateChain");
v2 = new io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore;
v3 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
specialinvoke v2.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore: void <init>(java.security.cert.X509Certificate[],boolean)>(v3, 0);
virtualinvoke v2.<java.security.KeyStore: void load(java.io.InputStream,char[])>(null, null);
v4 = new io.netty.handler.ssl.OpenSslX509KeyManagerFactory;
specialinvoke v4.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory: void <init>()>();
if v1 != null goto label1;
v5 = null;
goto label2;
label1:
v5 = virtualinvoke v1.<java.lang.String: char[] toCharArray()>();
label2:
virtualinvoke v4.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory: void init(java.security.KeyStore,char[])>(v2, v5);
return v4;
}
public static io.netty.handler.ssl.OpenSslX509KeyManagerFactory newKeyless(java.io.File) throws java.security.cert.CertificateException, java.io.IOException, java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException
{
java.security.cert.X509Certificate[] v1;
java.io.File v0;
io.netty.handler.ssl.OpenSslX509KeyManagerFactory v2;
v0 := @parameter0: java.io.File;
v1 = staticinvoke <io.netty.handler.ssl.SslContext: java.security.cert.X509Certificate[] toX509Certificates(java.io.File)>(v0);
v2 = staticinvoke <io.netty.handler.ssl.OpenSslX509KeyManagerFactory: io.netty.handler.ssl.OpenSslX509KeyManagerFactory newKeyless(java.security.cert.X509Certificate[])>(v1);
return v2;
}
public static io.netty.handler.ssl.OpenSslX509KeyManagerFactory newKeyless(java.io.InputStream) throws java.security.cert.CertificateException, java.io.IOException, java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException
{
java.security.cert.X509Certificate[] v1;
io.netty.handler.ssl.OpenSslX509KeyManagerFactory v2;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 = staticinvoke <io.netty.handler.ssl.SslContext: java.security.cert.X509Certificate[] toX509Certificates(java.io.InputStream)>(v0);
v2 = staticinvoke <io.netty.handler.ssl.OpenSslX509KeyManagerFactory: io.netty.handler.ssl.OpenSslX509KeyManagerFactory newKeyless(java.security.cert.X509Certificate[])>(v1);
return v2;
}
public static transient io.netty.handler.ssl.OpenSslX509KeyManagerFactory newKeyless(java.security.cert.X509Certificate[]) throws java.security.cert.CertificateException, java.io.IOException, java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException
{
io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore v1;
java.lang.Object v2;
java.security.cert.X509Certificate[] v0;
io.netty.handler.ssl.OpenSslX509KeyManagerFactory v3;
v0 := @parameter0: java.security.cert.X509Certificate[];
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, "certificateChain");
v1 = new io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
specialinvoke v1.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory$OpenSslKeyStore: void <init>(java.security.cert.X509Certificate[],boolean)>(v2, 1);
virtualinvoke v1.<java.security.KeyStore: void load(java.io.InputStream,char[])>(null, null);
v3 = new io.netty.handler.ssl.OpenSslX509KeyManagerFactory;
specialinvoke v3.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory: void <init>()>();
virtualinvoke v3.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory: void init(java.security.KeyStore,char[])>(v1, null);
return v3;
}
}