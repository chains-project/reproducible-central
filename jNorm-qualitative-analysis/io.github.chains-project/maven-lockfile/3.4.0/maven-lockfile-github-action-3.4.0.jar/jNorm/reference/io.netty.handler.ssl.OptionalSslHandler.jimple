public class io.netty.handler.ssl.OptionalSslHandler extends io.netty.handler.codec.ByteToMessageDecoder
{
private final io.netty.handler.ssl.SslContext sslContext;
public void <init>(io.netty.handler.ssl.SslContext)
{
io.netty.handler.ssl.OptionalSslHandler v0;
java.lang.Object v2;
io.netty.handler.ssl.SslContext v1;
v0 := @this: io.netty.handler.ssl.OptionalSslHandler;
v1 := @parameter0: io.netty.handler.ssl.SslContext;
specialinvoke v0.<io.netty.handler.codec.ByteToMessageDecoder: void <init>()>();
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "sslContext");
v0.<io.netty.handler.ssl.OptionalSslHandler: io.netty.handler.ssl.SslContext sslContext> = v2;
return;
}
protected void decode(io.netty.channel.ChannelHandlerContext, io.netty.buffer.ByteBuf, java.util.List) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
java.util.List v3;
io.netty.buffer.ByteBuf v2;
int v4;
io.netty.handler.ssl.OptionalSslHandler v0;
boolean v5;
v0 := @this: io.netty.handler.ssl.OptionalSslHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 := @parameter2: java.util.List;
v4 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readableBytes()>();
if v4 >= 5 goto label1;
return;
label1:
v5 = staticinvoke <io.netty.handler.ssl.SslHandler: boolean isEncrypted(io.netty.buffer.ByteBuf)>(v2);
if v5 == 0 goto label2;
specialinvoke v0.<io.netty.handler.ssl.OptionalSslHandler: void handleSsl(io.netty.channel.ChannelHandlerContext)>(v1);
goto label3;
label2:
specialinvoke v0.<io.netty.handler.ssl.OptionalSslHandler: void handleNonSsl(io.netty.channel.ChannelHandlerContext)>(v1);
label3:
return;
}
private void handleSsl(io.netty.channel.ChannelHandlerContext)
{
java.lang.Throwable v6;
io.netty.handler.ssl.SslContext v3;
io.netty.channel.ChannelPipeline v4;
javax.net.ssl.SSLEngine v7;
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.ssl.SslHandler v2;
io.netty.handler.ssl.OptionalSslHandler v0;
java.lang.String v5;
v0 := @this: io.netty.handler.ssl.OptionalSslHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = null;
label1:
v3 = v0.<io.netty.handler.ssl.OptionalSslHandler: io.netty.handler.ssl.SslContext sslContext>;
v2 = virtualinvoke v0.<io.netty.handler.ssl.OptionalSslHandler: io.netty.handler.ssl.SslHandler newSslHandler(io.netty.channel.ChannelHandlerContext,io.netty.handler.ssl.SslContext)>(v1, v3);
v4 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPipeline pipeline()>();
v5 = virtualinvoke v0.<io.netty.handler.ssl.OptionalSslHandler: java.lang.String newSslHandlerName()>();
interfaceinvoke v4.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline replace(io.netty.channel.ChannelHandler,java.lang.String,io.netty.channel.ChannelHandler)>(v0, v5, v2);
label2:
goto label5;
label3:
v6 := @caughtexception;
if v2 == null goto label4;
v7 = virtualinvoke v2.<io.netty.handler.ssl.SslHandler: javax.net.ssl.SSLEngine engine()>();
staticinvoke <io.netty.util.ReferenceCountUtil: void safeRelease(java.lang.Object)>(v7);
label4:
throw v6;
label5:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
private void handleNonSsl(io.netty.channel.ChannelHandlerContext)
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.ssl.OptionalSslHandler v0;
io.netty.channel.ChannelHandler v2;
io.netty.channel.ChannelPipeline v3, v5;
java.lang.String v4;
v0 := @this: io.netty.handler.ssl.OptionalSslHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = virtualinvoke v0.<io.netty.handler.ssl.OptionalSslHandler: io.netty.channel.ChannelHandler newNonSslHandler(io.netty.channel.ChannelHandlerContext)>(v1);
if v2 == null goto label1;
v3 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPipeline pipeline()>();
v4 = virtualinvoke v0.<io.netty.handler.ssl.OptionalSslHandler: java.lang.String newNonSslHandlerName()>();
interfaceinvoke v3.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline replace(io.netty.channel.ChannelHandler,java.lang.String,io.netty.channel.ChannelHandler)>(v0, v4, v2);
goto label2;
label1:
v5 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPipeline pipeline()>();
interfaceinvoke v5.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline remove(io.netty.channel.ChannelHandler)>(v0);
label2:
return;
}
protected java.lang.String newSslHandlerName()
{
io.netty.handler.ssl.OptionalSslHandler v0;
v0 := @this: io.netty.handler.ssl.OptionalSslHandler;
return null;
}
protected io.netty.handler.ssl.SslHandler newSslHandler(io.netty.channel.ChannelHandlerContext, io.netty.handler.ssl.SslContext)
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.ssl.SslContext v2;
io.netty.handler.ssl.SslHandler v4;
io.netty.buffer.ByteBufAllocator v3;
io.netty.handler.ssl.OptionalSslHandler v0;
v0 := @this: io.netty.handler.ssl.OptionalSslHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.handler.ssl.SslContext;
v3 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.buffer.ByteBufAllocator alloc()>();
v4 = virtualinvoke v2.<io.netty.handler.ssl.SslContext: io.netty.handler.ssl.SslHandler newHandler(io.netty.buffer.ByteBufAllocator)>(v3);
return v4;
}
protected java.lang.String newNonSslHandlerName()
{
io.netty.handler.ssl.OptionalSslHandler v0;
v0 := @this: io.netty.handler.ssl.OptionalSslHandler;
return null;
}
protected io.netty.channel.ChannelHandler newNonSslHandler(io.netty.channel.ChannelHandlerContext)
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.ssl.OptionalSslHandler v0;
v0 := @this: io.netty.handler.ssl.OptionalSslHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
return null;
}
}