final class io.netty.handler.ssl.PseudoRandomFunction extends java.lang.Object
{
private void <init>()
{
io.netty.handler.ssl.PseudoRandomFunction v0;
v0 := @this: io.netty.handler.ssl.PseudoRandomFunction;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static byte[] hash(byte[], byte[], byte[], int, java.lang.String)
{
byte[] v0, v1, v10, v11, v12, v14, v15, v16, v2;
javax.crypto.spec.SecretKeySpec v6;
java.security.GeneralSecurityException v17;
int v13, v3, v7;
java.lang.String v19, v4;
double v8, v9;
javax.crypto.Mac v5;
java.lang.IllegalArgumentException v18;
v0 := @parameter0: byte[];
v1 := @parameter1: byte[];
v2 := @parameter2: byte[];
v3 := @parameter3: int;
v4 := @parameter4: java.lang.String;
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositiveOrZero(int,java.lang.String)>(v3, "length");
label1:
v5 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(v4);
v6 = new javax.crypto.spec.SecretKeySpec;
specialinvoke v6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(v0, v4);
virtualinvoke v5.<javax.crypto.Mac: void init(java.security.Key)>(v6);
v7 = virtualinvoke v5.<javax.crypto.Mac: int getMacLength()>();
v8 = v3 / v7;
v9 = staticinvoke <java.lang.Math: double ceil(double)>(v8);
v10 = <io.netty.util.internal.EmptyArrays: byte[] EMPTY_BYTES>;
v11 = staticinvoke <io.netty.handler.ssl.PseudoRandomFunction: byte[] concat(byte[],byte[])>(v1, v2);
v12 = v11;
v13 = 0;
label2:
if v13 >= v9 goto label3;
v12 = virtualinvoke v5.<javax.crypto.Mac: byte[] doFinal(byte[])>(v12);
v14 = staticinvoke <io.netty.handler.ssl.PseudoRandomFunction: byte[] concat(byte[],byte[])>(v12, v11);
v15 = virtualinvoke v5.<javax.crypto.Mac: byte[] doFinal(byte[])>(v14);
v10 = staticinvoke <io.netty.handler.ssl.PseudoRandomFunction: byte[] concat(byte[],byte[])>(v10, v15);
v13 = v13 + 1;
goto label2;
label3:
v16 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(v10, v3);
label4:
return v16;
label5:
v17 := @caughtexception;
v18 = new java.lang.IllegalArgumentException;
v19 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Could not find algo: \u0001");
specialinvoke v18.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>(v19, v17);
throw v18;
catch java.security.GeneralSecurityException from label1 to label4 with label5;
}
private static byte[] concat(byte[], byte[])
{
byte[] v0, v1, v5;
int v2, v3, v4, v6, v7;
v0 := @parameter0: byte[];
v1 := @parameter1: byte[];
v2 = lengthof v0;
v3 = lengthof v1;
v4 = v2 + v3;
v5 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(v0, v4);
v6 = lengthof v0;
v7 = lengthof v1;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, 0, v5, v6, v7);
return v5;
}
}