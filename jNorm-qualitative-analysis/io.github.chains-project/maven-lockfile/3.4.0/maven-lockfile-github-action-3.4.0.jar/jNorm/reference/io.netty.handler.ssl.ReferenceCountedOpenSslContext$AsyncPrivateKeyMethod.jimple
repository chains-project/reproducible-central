final class io.netty.handler.ssl.ReferenceCountedOpenSslContext$AsyncPrivateKeyMethod extends java.lang.Object implements io.netty.internal.tcnative.AsyncSSLPrivateKeyMethod
{
private final io.netty.handler.ssl.OpenSslEngineMap engineMap;
private final io.netty.handler.ssl.OpenSslAsyncPrivateKeyMethod keyMethod;
void <init>(io.netty.handler.ssl.OpenSslEngineMap, io.netty.handler.ssl.OpenSslAsyncPrivateKeyMethod)
{
io.netty.handler.ssl.ReferenceCountedOpenSslContext$AsyncPrivateKeyMethod v0;
io.netty.handler.ssl.OpenSslAsyncPrivateKeyMethod v2;
io.netty.handler.ssl.OpenSslEngineMap v1;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslContext$AsyncPrivateKeyMethod;
v1 := @parameter0: io.netty.handler.ssl.OpenSslEngineMap;
v2 := @parameter1: io.netty.handler.ssl.OpenSslAsyncPrivateKeyMethod;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext$AsyncPrivateKeyMethod: io.netty.handler.ssl.OpenSslEngineMap engineMap> = v1;
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext$AsyncPrivateKeyMethod: io.netty.handler.ssl.OpenSslAsyncPrivateKeyMethod keyMethod> = v2;
return;
}
public void sign(long, int, byte[], io.netty.internal.tcnative.ResultCallback)
{
byte[] v3;
io.netty.handler.ssl.OpenSslEngineMap v5;
io.netty.handler.ssl.ReferenceCountedOpenSslContext$AsyncPrivateKeyMethod v0;
long v1;
io.netty.handler.ssl.OpenSslAsyncPrivateKeyMethod v7;
io.netty.internal.tcnative.ResultCallback v4;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine v6;
javax.net.ssl.SSLException v10;
int v2;
io.netty.handler.ssl.ReferenceCountedOpenSslContext$AsyncPrivateKeyMethod$ResultCallbackListener v9;
io.netty.util.concurrent.Future v8;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslContext$AsyncPrivateKeyMethod;
v1 := @parameter0: long;
v2 := @parameter1: int;
v3 := @parameter2: byte[];
v4 := @parameter3: io.netty.internal.tcnative.ResultCallback;
label1:
v5 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext$AsyncPrivateKeyMethod: io.netty.handler.ssl.OpenSslEngineMap engineMap>;
v6 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslContext: io.netty.handler.ssl.ReferenceCountedOpenSslEngine retrieveEngine(io.netty.handler.ssl.OpenSslEngineMap,long)>(v5, v1);
v7 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext$AsyncPrivateKeyMethod: io.netty.handler.ssl.OpenSslAsyncPrivateKeyMethod keyMethod>;
v8 = interfaceinvoke v7.<io.netty.handler.ssl.OpenSslAsyncPrivateKeyMethod: io.netty.util.concurrent.Future sign(javax.net.ssl.SSLEngine,int,byte[])>(v6, v2, v3);
v9 = new io.netty.handler.ssl.ReferenceCountedOpenSslContext$AsyncPrivateKeyMethod$ResultCallbackListener;
specialinvoke v9.<io.netty.handler.ssl.ReferenceCountedOpenSslContext$AsyncPrivateKeyMethod$ResultCallbackListener: void <init>(io.netty.handler.ssl.ReferenceCountedOpenSslEngine,long,io.netty.internal.tcnative.ResultCallback)>(v6, v1, v4);
interfaceinvoke v8.<io.netty.util.concurrent.Future: io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)>(v9);
label2:
goto label4;
label3:
v10 := @caughtexception;
interfaceinvoke v4.<io.netty.internal.tcnative.ResultCallback: void onError(long,java.lang.Throwable)>(v1, v10);
label4:
return;
catch javax.net.ssl.SSLException from label1 to label2 with label3;
}
public void decrypt(long, byte[], io.netty.internal.tcnative.ResultCallback)
{
byte[] v2;
io.netty.handler.ssl.OpenSslEngineMap v4;
io.netty.handler.ssl.ReferenceCountedOpenSslContext$AsyncPrivateKeyMethod v0;
long v1;
io.netty.handler.ssl.OpenSslAsyncPrivateKeyMethod v6;
io.netty.internal.tcnative.ResultCallback v3;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine v5;
javax.net.ssl.SSLException v9;
io.netty.handler.ssl.ReferenceCountedOpenSslContext$AsyncPrivateKeyMethod$ResultCallbackListener v8;
io.netty.util.concurrent.Future v7;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslContext$AsyncPrivateKeyMethod;
v1 := @parameter0: long;
v2 := @parameter1: byte[];
v3 := @parameter2: io.netty.internal.tcnative.ResultCallback;
label1:
v4 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext$AsyncPrivateKeyMethod: io.netty.handler.ssl.OpenSslEngineMap engineMap>;
v5 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslContext: io.netty.handler.ssl.ReferenceCountedOpenSslEngine retrieveEngine(io.netty.handler.ssl.OpenSslEngineMap,long)>(v4, v1);
v6 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext$AsyncPrivateKeyMethod: io.netty.handler.ssl.OpenSslAsyncPrivateKeyMethod keyMethod>;
v7 = interfaceinvoke v6.<io.netty.handler.ssl.OpenSslAsyncPrivateKeyMethod: io.netty.util.concurrent.Future decrypt(javax.net.ssl.SSLEngine,byte[])>(v5, v2);
v8 = new io.netty.handler.ssl.ReferenceCountedOpenSslContext$AsyncPrivateKeyMethod$ResultCallbackListener;
specialinvoke v8.<io.netty.handler.ssl.ReferenceCountedOpenSslContext$AsyncPrivateKeyMethod$ResultCallbackListener: void <init>(io.netty.handler.ssl.ReferenceCountedOpenSslEngine,long,io.netty.internal.tcnative.ResultCallback)>(v5, v1, v3);
interfaceinvoke v7.<io.netty.util.concurrent.Future: io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)>(v8);
label2:
goto label4;
label3:
v9 := @caughtexception;
interfaceinvoke v3.<io.netty.internal.tcnative.ResultCallback: void onError(long,java.lang.Throwable)>(v1, v9);
label4:
return;
catch javax.net.ssl.SSLException from label1 to label2 with label3;
}
}