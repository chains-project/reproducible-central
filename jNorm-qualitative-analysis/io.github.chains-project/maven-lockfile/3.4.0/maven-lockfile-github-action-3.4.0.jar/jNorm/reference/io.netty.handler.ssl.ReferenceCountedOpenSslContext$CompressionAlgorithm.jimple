final class io.netty.handler.ssl.ReferenceCountedOpenSslContext$CompressionAlgorithm extends java.lang.Object implements io.netty.internal.tcnative.CertificateCompressionAlgo
{
private final io.netty.handler.ssl.OpenSslEngineMap engineMap;
private final io.netty.handler.ssl.OpenSslCertificateCompressionAlgorithm compressionAlgorithm;
void <init>(io.netty.handler.ssl.OpenSslEngineMap, io.netty.handler.ssl.OpenSslCertificateCompressionAlgorithm)
{
io.netty.handler.ssl.OpenSslCertificateCompressionAlgorithm v2;
io.netty.handler.ssl.ReferenceCountedOpenSslContext$CompressionAlgorithm v0;
io.netty.handler.ssl.OpenSslEngineMap v1;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslContext$CompressionAlgorithm;
v1 := @parameter0: io.netty.handler.ssl.OpenSslEngineMap;
v2 := @parameter1: io.netty.handler.ssl.OpenSslCertificateCompressionAlgorithm;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext$CompressionAlgorithm: io.netty.handler.ssl.OpenSslEngineMap engineMap> = v1;
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext$CompressionAlgorithm: io.netty.handler.ssl.OpenSslCertificateCompressionAlgorithm compressionAlgorithm> = v2;
return;
}
public byte[] compress(long, byte[]) throws java.lang.Exception
{
io.netty.handler.ssl.ReferenceCountedOpenSslEngine v4;
byte[] v2, v6;
io.netty.handler.ssl.ReferenceCountedOpenSslContext$CompressionAlgorithm v0;
io.netty.handler.ssl.OpenSslEngineMap v3;
io.netty.handler.ssl.OpenSslCertificateCompressionAlgorithm v5;
long v1;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslContext$CompressionAlgorithm;
v1 := @parameter0: long;
v2 := @parameter1: byte[];
v3 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext$CompressionAlgorithm: io.netty.handler.ssl.OpenSslEngineMap engineMap>;
v4 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslContext: io.netty.handler.ssl.ReferenceCountedOpenSslEngine retrieveEngine(io.netty.handler.ssl.OpenSslEngineMap,long)>(v3, v1);
v5 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext$CompressionAlgorithm: io.netty.handler.ssl.OpenSslCertificateCompressionAlgorithm compressionAlgorithm>;
v6 = interfaceinvoke v5.<io.netty.handler.ssl.OpenSslCertificateCompressionAlgorithm: byte[] compress(javax.net.ssl.SSLEngine,byte[])>(v4, v2);
return v6;
}
public byte[] decompress(long, int, byte[]) throws java.lang.Exception
{
byte[] v3, v7;
io.netty.handler.ssl.OpenSslEngineMap v4;
long v1;
io.netty.handler.ssl.ReferenceCountedOpenSslEngine v5;
io.netty.handler.ssl.ReferenceCountedOpenSslContext$CompressionAlgorithm v0;
int v2;
io.netty.handler.ssl.OpenSslCertificateCompressionAlgorithm v6;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslContext$CompressionAlgorithm;
v1 := @parameter0: long;
v2 := @parameter1: int;
v3 := @parameter2: byte[];
v4 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext$CompressionAlgorithm: io.netty.handler.ssl.OpenSslEngineMap engineMap>;
v5 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslContext: io.netty.handler.ssl.ReferenceCountedOpenSslEngine retrieveEngine(io.netty.handler.ssl.OpenSslEngineMap,long)>(v4, v1);
v6 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext$CompressionAlgorithm: io.netty.handler.ssl.OpenSslCertificateCompressionAlgorithm compressionAlgorithm>;
v7 = interfaceinvoke v6.<io.netty.handler.ssl.OpenSslCertificateCompressionAlgorithm: byte[] decompress(javax.net.ssl.SSLEngine,int,byte[])>(v5, v2, v3);
return v7;
}
public int algorithmId()
{
int v2;
io.netty.handler.ssl.OpenSslCertificateCompressionAlgorithm v1;
io.netty.handler.ssl.ReferenceCountedOpenSslContext$CompressionAlgorithm v0;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslContext$CompressionAlgorithm;
v1 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext$CompressionAlgorithm: io.netty.handler.ssl.OpenSslCertificateCompressionAlgorithm compressionAlgorithm>;
v2 = interfaceinvoke v1.<io.netty.handler.ssl.OpenSslCertificateCompressionAlgorithm: int algorithmId()>();
return v2;
}
}