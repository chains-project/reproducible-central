public final class io.netty.handler.ssl.ReferenceCountedOpenSslServerContext extends io.netty.handler.ssl.ReferenceCountedOpenSslContext
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private static final byte[] ID;
private final io.netty.handler.ssl.OpenSslServerSessionContext sessionContext;
transient void <init>(java.security.cert.X509Certificate[], javax.net.ssl.TrustManagerFactory, java.security.cert.X509Certificate[], java.security.PrivateKey, java.lang.String, javax.net.ssl.KeyManagerFactory, java.lang.Iterable, io.netty.handler.ssl.CipherSuiteFilter, io.netty.handler.ssl.ApplicationProtocolConfig, long, long, io.netty.handler.ssl.ClientAuth, java.lang.String[], boolean, boolean, java.lang.String, java.util.Map$Entry[]) throws javax.net.ssl.SSLException
{
java.lang.String[] v13;
long v10, v11;
java.lang.Iterable v7;
io.netty.handler.ssl.CipherSuiteFilter v8;
io.netty.handler.ssl.ClientAuth v12;
java.lang.String v16, v5;
java.util.Map$Entry[] v17;
io.netty.handler.ssl.ApplicationProtocolConfig v9;
boolean v14, v15;
javax.net.ssl.TrustManagerFactory v2;
javax.net.ssl.KeyManagerFactory v6;
io.netty.handler.ssl.ReferenceCountedOpenSslServerContext v0;
java.security.PrivateKey v4;
io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator v18;
java.security.cert.X509Certificate[] v1, v3;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslServerContext;
v1 := @parameter0: java.security.cert.X509Certificate[];
v2 := @parameter1: javax.net.ssl.TrustManagerFactory;
v3 := @parameter2: java.security.cert.X509Certificate[];
v4 := @parameter3: java.security.PrivateKey;
v5 := @parameter4: java.lang.String;
v6 := @parameter5: javax.net.ssl.KeyManagerFactory;
v7 := @parameter6: java.lang.Iterable;
v8 := @parameter7: io.netty.handler.ssl.CipherSuiteFilter;
v9 := @parameter8: io.netty.handler.ssl.ApplicationProtocolConfig;
v10 := @parameter9: long;
v11 := @parameter10: long;
v12 := @parameter11: io.netty.handler.ssl.ClientAuth;
v13 := @parameter12: java.lang.String[];
v14 := @parameter13: boolean;
v15 := @parameter14: boolean;
v16 := @parameter15: java.lang.String;
v17 := @parameter16: java.util.Map$Entry[];
v18 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslServerContext: io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator toNegotiator(io.netty.handler.ssl.ApplicationProtocolConfig)>(v9);
specialinvoke v0.<io.netty.handler.ssl.ReferenceCountedOpenSslServerContext: void <init>(java.security.cert.X509Certificate[],javax.net.ssl.TrustManagerFactory,java.security.cert.X509Certificate[],java.security.PrivateKey,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,long,long,io.netty.handler.ssl.ClientAuth,java.lang.String[],boolean,boolean,java.lang.String,java.util.Map$Entry[])>(v1, v2, v3, v4, v5, v6, v7, v8, v18, v10, v11, v12, v13, v14, v15, v16, v17);
return;
}
transient void <init>(java.security.cert.X509Certificate[], javax.net.ssl.TrustManagerFactory, java.security.cert.X509Certificate[], java.security.PrivateKey, java.lang.String, javax.net.ssl.KeyManagerFactory, java.lang.Iterable, io.netty.handler.ssl.CipherSuiteFilter, io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator, long, long, io.netty.handler.ssl.ClientAuth, java.lang.String[], boolean, boolean, java.lang.String, java.util.Map$Entry[]) throws javax.net.ssl.SSLException
{
java.lang.Throwable v24;
java.lang.String[] v13;
long v10, v11, v18;
java.lang.Iterable v7;
io.netty.handler.ssl.CipherSuiteFilter v8;
io.netty.handler.ssl.OpenSslServerSessionContext v20, v22;
io.netty.handler.ssl.ClientAuth v12;
java.lang.String v16, v5;
java.util.Map$Entry[] v17;
boolean v14, v15, v21;
javax.net.ssl.TrustManagerFactory v2;
io.netty.handler.ssl.OpenSslEngineMap v19;
javax.net.ssl.KeyManagerFactory v6;
io.netty.handler.ssl.OpenSslSessionTicketKey[] v23;
io.netty.handler.ssl.ReferenceCountedOpenSslServerContext v0;
java.security.PrivateKey v4;
io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator v9;
java.security.cert.X509Certificate[] v1, v3;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslServerContext;
v1 := @parameter0: java.security.cert.X509Certificate[];
v2 := @parameter1: javax.net.ssl.TrustManagerFactory;
v3 := @parameter2: java.security.cert.X509Certificate[];
v4 := @parameter3: java.security.PrivateKey;
v5 := @parameter4: java.lang.String;
v6 := @parameter5: javax.net.ssl.KeyManagerFactory;
v7 := @parameter6: java.lang.Iterable;
v8 := @parameter7: io.netty.handler.ssl.CipherSuiteFilter;
v9 := @parameter8: io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator;
v10 := @parameter9: long;
v11 := @parameter10: long;
v12 := @parameter11: io.netty.handler.ssl.ClientAuth;
v13 := @parameter12: java.lang.String[];
v14 := @parameter13: boolean;
v15 := @parameter14: boolean;
v16 := @parameter15: java.lang.String;
v17 := @parameter16: java.util.Map$Entry[];
specialinvoke v0.<io.netty.handler.ssl.ReferenceCountedOpenSslContext: void <init>(java.lang.Iterable,io.netty.handler.ssl.CipherSuiteFilter,io.netty.handler.ssl.OpenSslApplicationProtocolNegotiator,int,java.security.cert.Certificate[],io.netty.handler.ssl.ClientAuth,java.lang.String[],boolean,boolean,boolean,java.util.Map$Entry[])>(v7, v8, v9, 1, v3, v12, v13, v14, v15, 1, v17);
label1:
v18 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslServerContext: long ctx>;
v19 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslServerContext: io.netty.handler.ssl.OpenSslEngineMap engineMap>;
v20 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslServerContext: io.netty.handler.ssl.OpenSslServerSessionContext newSessionContext(io.netty.handler.ssl.ReferenceCountedOpenSslContext,long,io.netty.handler.ssl.OpenSslEngineMap,java.security.cert.X509Certificate[],javax.net.ssl.TrustManagerFactory,java.security.cert.X509Certificate[],java.security.PrivateKey,java.lang.String,javax.net.ssl.KeyManagerFactory,java.lang.String,long,long)>(v0, v18, v19, v1, v2, v3, v4, v5, v6, v16, v10, v11);
v0.<io.netty.handler.ssl.ReferenceCountedOpenSslServerContext: io.netty.handler.ssl.OpenSslServerSessionContext sessionContext> = v20;
v21 = <io.netty.handler.ssl.ReferenceCountedOpenSslServerContext: boolean SERVER_ENABLE_SESSION_TICKET>;
if v21 == 0 goto label4;
v22 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslServerContext: io.netty.handler.ssl.OpenSslServerSessionContext sessionContext>;
v23 = newarray (io.netty.handler.ssl.OpenSslSessionTicketKey)[0];
virtualinvoke v22.<io.netty.handler.ssl.OpenSslServerSessionContext: void setTicketKeys(io.netty.handler.ssl.OpenSslSessionTicketKey[])>(v23);
label2:
goto label4;
label3:
v24 := @caughtexception;
virtualinvoke v0.<io.netty.handler.ssl.ReferenceCountedOpenSslServerContext: boolean release()>();
throw v24;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public io.netty.handler.ssl.OpenSslServerSessionContext sessionContext()
{
io.netty.handler.ssl.OpenSslServerSessionContext v1;
io.netty.handler.ssl.ReferenceCountedOpenSslServerContext v0;
v0 := @this: io.netty.handler.ssl.ReferenceCountedOpenSslServerContext;
v1 = v0.<io.netty.handler.ssl.ReferenceCountedOpenSslServerContext: io.netty.handler.ssl.OpenSslServerSessionContext sessionContext>;
return v1;
}
static io.netty.handler.ssl.OpenSslServerSessionContext newSessionContext(io.netty.handler.ssl.ReferenceCountedOpenSslContext, long, io.netty.handler.ssl.OpenSslEngineMap, java.security.cert.X509Certificate[], javax.net.ssl.TrustManagerFactory, java.security.cert.X509Certificate[], java.security.PrivateKey, java.lang.String, javax.net.ssl.KeyManagerFactory, java.lang.String, long, long) throws javax.net.ssl.SSLException
{
byte[] v45;
java.util.Enumeration v17;
io.netty.buffer.ByteBufAllocator v34;
io.netty.handler.ssl.OpenSslServerSessionContext v44;
byte v47, v49;
boolean v13, v18, v35, v46;
javax.net.ssl.TrustManagerFactory v4;
io.netty.handler.ssl.OpenSslEngineMap v2;
io.netty.handler.ssl.OpenSslKeyMaterialManager v24;
io.netty.handler.ssl.OpenSslKeyMaterialProvider v12;
io.netty.handler.ssl.ReferenceCountedOpenSslServerContext$OpenSslServerCertificateCallback v23;
java.security.KeyStore v16, v28;
java.lang.Exception v25, v42;
javax.net.ssl.SSLException v26, v36, v41, v43;
java.security.PrivateKey v6;
java.security.cert.X509Certificate[] v3, v31, v5;
java.lang.Throwable v38, v51;
long v1, v10, v11, v33, v48, v50;
io.netty.handler.ssl.OpenSslCachingX509KeyManagerFactory v20;
int v32, v39;
java.lang.String v21, v27, v37, v7, v9;
io.netty.handler.ssl.ReferenceCountedOpenSslServerContext$OpenSslSniHostnameMatcher v40;
javax.net.ssl.KeyManagerFactory v22, v8;
java.lang.IllegalArgumentException v14;
javax.net.ssl.TrustManager[] v29;
javax.net.ssl.X509TrustManager v30;
char[] v15;
io.netty.handler.ssl.ReferenceCountedOpenSslContext v0;
io.netty.handler.ssl.OpenSslX509KeyManagerFactory v19;
v0 := @parameter0: io.netty.handler.ssl.ReferenceCountedOpenSslContext;
v1 := @parameter1: long;
v2 := @parameter2: io.netty.handler.ssl.OpenSslEngineMap;
v3 := @parameter3: java.security.cert.X509Certificate[];
v4 := @parameter4: javax.net.ssl.TrustManagerFactory;
v5 := @parameter5: java.security.cert.X509Certificate[];
v6 := @parameter6: java.security.PrivateKey;
v7 := @parameter7: java.lang.String;
v8 := @parameter8: javax.net.ssl.KeyManagerFactory;
v9 := @parameter9: java.lang.String;
v10 := @parameter10: long;
v11 := @parameter11: long;
v12 = null;
label01:
staticinvoke <io.netty.internal.tcnative.SSLContext: void setVerify(long,int,int)>(v1, 0, 10);
v13 = staticinvoke <io.netty.handler.ssl.OpenSsl: boolean useKeyManagerFactory()>();
if v13 != 0 goto label03;
if v8 == null goto label02;
v14 = new java.lang.IllegalArgumentException;
specialinvoke v14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("KeyManagerFactory not supported");
throw v14;
label02:
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v5, "keyCertChain");
staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslServerContext: void setKeyMaterial(long,java.security.cert.X509Certificate[],java.security.PrivateKey,java.lang.String)>(v1, v5, v6, v7);
goto label09;
label03:
if v8 != null goto label06;
v15 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslServerContext: char[] keyStorePassword(java.lang.String)>(v7);
v16 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslServerContext: java.security.KeyStore buildKeyStore(java.security.cert.X509Certificate[],java.security.PrivateKey,char[],java.lang.String)>(v5, v6, v15, v9);
v17 = virtualinvoke v16.<java.security.KeyStore: java.util.Enumeration aliases()>();
v18 = interfaceinvoke v17.<java.util.Enumeration: boolean hasMoreElements()>();
if v18 == 0 goto label04;
v19 = new io.netty.handler.ssl.OpenSslX509KeyManagerFactory;
specialinvoke v19.<io.netty.handler.ssl.OpenSslX509KeyManagerFactory: void <init>()>();
v8 = v19;
goto label05;
label04:
v20 = new io.netty.handler.ssl.OpenSslCachingX509KeyManagerFactory;
v21 = staticinvoke <javax.net.ssl.KeyManagerFactory: java.lang.String getDefaultAlgorithm()>();
v22 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>(v21);
specialinvoke v20.<io.netty.handler.ssl.OpenSslCachingX509KeyManagerFactory: void <init>(javax.net.ssl.KeyManagerFactory)>(v22);
v8 = v20;
label05:
virtualinvoke v8.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(v16, v15);
label06:
v12 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslServerContext: io.netty.handler.ssl.OpenSslKeyMaterialProvider providerFor(javax.net.ssl.KeyManagerFactory,java.lang.String)>(v8, v7);
v23 = new io.netty.handler.ssl.ReferenceCountedOpenSslServerContext$OpenSslServerCertificateCallback;
v24 = new io.netty.handler.ssl.OpenSslKeyMaterialManager;
specialinvoke v24.<io.netty.handler.ssl.OpenSslKeyMaterialManager: void <init>(io.netty.handler.ssl.OpenSslKeyMaterialProvider)>(v12);
specialinvoke v23.<io.netty.handler.ssl.ReferenceCountedOpenSslServerContext$OpenSslServerCertificateCallback: void <init>(io.netty.handler.ssl.OpenSslEngineMap,io.netty.handler.ssl.OpenSslKeyMaterialManager)>(v2, v24);
staticinvoke <io.netty.internal.tcnative.SSLContext: void setCertificateCallback(long,io.netty.internal.tcnative.CertificateCallback)>(v1, v23);
label07:
goto label09;
label08:
v25 := @caughtexception;
v26 = new javax.net.ssl.SSLException;
specialinvoke v26.<javax.net.ssl.SSLException: void <init>(java.lang.String,java.lang.Throwable)>("failed to set certificate and key", v25);
throw v26;
label09:
if v3 == null goto label10;
v4 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslServerContext: javax.net.ssl.TrustManagerFactory buildTrustManagerFactory(java.security.cert.X509Certificate[],javax.net.ssl.TrustManagerFactory,java.lang.String)>(v3, v4, v9);
goto label11;
label10:
if v4 != null goto label11;
v27 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();
v4 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>(v27);
v28 = null;
virtualinvoke v4.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(v28);
label11:
v29 = virtualinvoke v4.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();
v30 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslServerContext: javax.net.ssl.X509TrustManager chooseTrustManager(javax.net.ssl.TrustManager[])>(v29);
staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslServerContext: void setVerifyCallback(long,io.netty.handler.ssl.OpenSslEngineMap,javax.net.ssl.X509TrustManager)>(v1, v2, v30);
v31 = interfaceinvoke v30.<javax.net.ssl.X509TrustManager: java.security.cert.X509Certificate[] getAcceptedIssuers()>();
if v31 == null goto label15;
v32 = lengthof v31;
if v32 <= 0 goto label15;
v33 = 0L;
label12:
v34 = <io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBufAllocator DEFAULT>;
v33 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslServerContext: long toBIO(io.netty.buffer.ByteBufAllocator,java.security.cert.X509Certificate[])>(v34, v31);
v35 = staticinvoke <io.netty.internal.tcnative.SSLContext: boolean setCACertificateBio(long,long)>(v1, v33);
if v35 != 0 goto label13;
v36 = new javax.net.ssl.SSLException;
v37 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (javax.net.ssl.X509TrustManager)>(v30) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unable to setup accepted issuers for trustmanager \u0001");
specialinvoke v36.<javax.net.ssl.SSLException: void <init>(java.lang.String)>(v37);
throw v36;
label13:
staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslServerContext: void freeBio(long)>(v33);
goto label15;
label14:
v38 := @caughtexception;
staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslServerContext: void freeBio(long)>(v33);
throw v38;
label15:
v39 = staticinvoke <io.netty.util.internal.PlatformDependent: int javaVersion()>();
if v39 < 8 goto label19;
v40 = new io.netty.handler.ssl.ReferenceCountedOpenSslServerContext$OpenSslSniHostnameMatcher;
specialinvoke v40.<io.netty.handler.ssl.ReferenceCountedOpenSslServerContext$OpenSslSniHostnameMatcher: void <init>(io.netty.handler.ssl.OpenSslEngineMap)>(v2);
staticinvoke <io.netty.internal.tcnative.SSLContext: void setSniHostnameMatcher(long,io.netty.internal.tcnative.SniHostNameMatcher)>(v1, v40);
label16:
goto label19;
label17:
v41 := @caughtexception;
throw v41;
label18:
v42 := @caughtexception;
v43 = new javax.net.ssl.SSLException;
specialinvoke v43.<javax.net.ssl.SSLException: void <init>(java.lang.String,java.lang.Throwable)>("unable to setup trustmanager", v42);
throw v43;
label19:
v44 = new io.netty.handler.ssl.OpenSslServerSessionContext;
specialinvoke v44.<io.netty.handler.ssl.OpenSslServerSessionContext: void <init>(io.netty.handler.ssl.ReferenceCountedOpenSslContext,io.netty.handler.ssl.OpenSslKeyMaterialProvider)>(v0, v12);
v45 = <io.netty.handler.ssl.ReferenceCountedOpenSslServerContext: byte[] ID>;
virtualinvoke v44.<io.netty.handler.ssl.OpenSslServerSessionContext: boolean setSessionIdContext(byte[])>(v45);
v46 = <io.netty.handler.ssl.ReferenceCountedOpenSslServerContext: boolean SERVER_ENABLE_SESSION_CACHE>;
virtualinvoke v44.<io.netty.handler.ssl.OpenSslServerSessionContext: void setSessionCacheEnabled(boolean)>(v46);
v47 = v10 cmp 0L;
if v47 <= 0 goto label20;
v48 = staticinvoke <java.lang.Math: long min(long,long)>(v10, 2147483647L);
virtualinvoke v44.<io.netty.handler.ssl.OpenSslServerSessionContext: void setSessionCacheSize(int)>(v48);
label20:
v49 = v11 cmp 0L;
if v49 <= 0 goto label21;
v50 = staticinvoke <java.lang.Math: long min(long,long)>(v11, 2147483647L);
virtualinvoke v44.<io.netty.handler.ssl.OpenSslServerSessionContext: void setSessionTimeout(int)>(v50);
label21:
return v44;
label22:
v51 := @caughtexception;
if v12 == null goto label23;
virtualinvoke v12.<io.netty.handler.ssl.OpenSslKeyMaterialProvider: void destroy()>();
label23:
throw v51;
catch java.lang.Exception from label01 to label07 with label08;
catch java.lang.Throwable from label12 to label13 with label14;
catch javax.net.ssl.SSLException from label09 to label16 with label17;
catch java.lang.Exception from label09 to label16 with label18;
catch java.lang.Throwable from label01 to label21 with label22;
}
private static void setVerifyCallback(long, io.netty.handler.ssl.OpenSslEngineMap, javax.net.ssl.X509TrustManager)
{
io.netty.handler.ssl.OpenSslEngineMap v1;
io.netty.handler.ssl.ReferenceCountedOpenSslServerContext$ExtendedTrustManagerVerifyCallback v4;
javax.net.ssl.X509TrustManager v2;
long v0;
io.netty.handler.ssl.ReferenceCountedOpenSslServerContext$TrustManagerVerifyCallback v5;
boolean v3;
v0 := @parameter0: long;
v1 := @parameter1: io.netty.handler.ssl.OpenSslEngineMap;
v2 := @parameter2: javax.net.ssl.X509TrustManager;
v3 = staticinvoke <io.netty.handler.ssl.ReferenceCountedOpenSslServerContext: boolean useExtendedTrustManager(javax.net.ssl.X509TrustManager)>(v2);
if v3 == 0 goto label1;
v4 = new io.netty.handler.ssl.ReferenceCountedOpenSslServerContext$ExtendedTrustManagerVerifyCallback;
specialinvoke v4.<io.netty.handler.ssl.ReferenceCountedOpenSslServerContext$ExtendedTrustManagerVerifyCallback: void <init>(io.netty.handler.ssl.OpenSslEngineMap,javax.net.ssl.X509ExtendedTrustManager)>(v1, v2);
staticinvoke <io.netty.internal.tcnative.SSLContext: void setCertVerifyCallback(long,io.netty.internal.tcnative.CertificateVerifier)>(v0, v4);
goto label2;
label1:
v5 = new io.netty.handler.ssl.ReferenceCountedOpenSslServerContext$TrustManagerVerifyCallback;
specialinvoke v5.<io.netty.handler.ssl.ReferenceCountedOpenSslServerContext$TrustManagerVerifyCallback: void <init>(io.netty.handler.ssl.OpenSslEngineMap,javax.net.ssl.X509TrustManager)>(v1, v2);
staticinvoke <io.netty.internal.tcnative.SSLContext: void setCertVerifyCallback(long,io.netty.internal.tcnative.CertificateVerifier)>(v0, v5);
label2:
return;
}
static void <clinit>()
{
byte[] v1;
io.netty.util.internal.logging.InternalLogger v0;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/handler/ssl/ReferenceCountedOpenSslServerContext;");
<io.netty.handler.ssl.ReferenceCountedOpenSslServerContext: io.netty.util.internal.logging.InternalLogger logger> = v0;
v1 = newarray (byte)[5];
v1[0] = 110;
v1[1] = 101;
v1[2] = 116;
v1[3] = 116;
v1[4] = 121;
<io.netty.handler.ssl.ReferenceCountedOpenSslServerContext: byte[] ID> = v1;
return;
}
}