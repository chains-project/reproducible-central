final class io.netty.handler.ssl.SniHandler$AsyncMappingAdapter extends java.lang.Object implements io.netty.util.AsyncMapping
{
private final io.netty.util.Mapping mapping;
private void <init>(io.netty.util.Mapping)
{
java.lang.Object v2;
io.netty.handler.ssl.SniHandler$AsyncMappingAdapter v0;
io.netty.util.Mapping v1;
v0 := @this: io.netty.handler.ssl.SniHandler$AsyncMappingAdapter;
v1 := @parameter0: io.netty.util.Mapping;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "mapping");
v0.<io.netty.handler.ssl.SniHandler$AsyncMappingAdapter: io.netty.util.Mapping mapping> = v2;
return;
}
public io.netty.util.concurrent.Future map(java.lang.String, io.netty.util.concurrent.Promise)
{
java.lang.Throwable v5;
io.netty.util.concurrent.Promise v2, v6, v7;
java.lang.Object v4;
java.lang.String v1;
io.netty.handler.ssl.SniHandler$AsyncMappingAdapter v0;
io.netty.util.Mapping v3;
v0 := @this: io.netty.handler.ssl.SniHandler$AsyncMappingAdapter;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.netty.util.concurrent.Promise;
label1:
v3 = v0.<io.netty.handler.ssl.SniHandler$AsyncMappingAdapter: io.netty.util.Mapping mapping>;
v4 = interfaceinvoke v3.<io.netty.util.Mapping: java.lang.Object map(java.lang.Object)>(v1);
label2:
goto label4;
label3:
v5 := @caughtexception;
v6 = interfaceinvoke v2.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>(v5);
return v6;
label4:
v7 = interfaceinvoke v2.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setSuccess(java.lang.Object)>(v4);
return v7;
catch java.lang.Throwable from label1 to label2 with label3;
}
}