class io.netty.handler.ssl.SslHandler$7 extends java.lang.Object implements java.lang.Runnable
{
final io.netty.util.concurrent.Promise val$localHandshakePromise;
final long val$handshakeTimeoutMillis;
final io.netty.handler.ssl.SslHandler this$0;
void <init>(io.netty.handler.ssl.SslHandler, io.netty.util.concurrent.Promise, long)
{
io.netty.util.concurrent.Promise v2;
io.netty.handler.ssl.SslHandler v1;
io.netty.handler.ssl.SslHandler$7 v0;
long v3;
v0 := @this: io.netty.handler.ssl.SslHandler$7;
v1 := @parameter0: io.netty.handler.ssl.SslHandler;
v2 := @parameter1: io.netty.util.concurrent.Promise;
v3 := @parameter2: long;
v0.<io.netty.handler.ssl.SslHandler$7: io.netty.handler.ssl.SslHandler this$0> = v1;
v0.<io.netty.handler.ssl.SslHandler$7: io.netty.util.concurrent.Promise val$localHandshakePromise> = v2;
v0.<io.netty.handler.ssl.SslHandler$7: long val$handshakeTimeoutMillis> = v3;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void run()
{
java.lang.Throwable v13;
long v4;
io.netty.channel.ChannelHandlerContext v12, v16, v9;
io.netty.handler.ssl.SslHandler$7 v0;
java.lang.String v5;
boolean v2, v7;
io.netty.util.concurrent.Promise v1, v6;
io.netty.handler.ssl.SslHandshakeTimeoutException v3;
io.netty.handler.ssl.SslHandler v10, v11, v14, v15, v8;
v0 := @this: io.netty.handler.ssl.SslHandler$7;
v1 = v0.<io.netty.handler.ssl.SslHandler$7: io.netty.util.concurrent.Promise val$localHandshakePromise>;
v2 = interfaceinvoke v1.<io.netty.util.concurrent.Promise: boolean isDone()>();
if v2 == 0 goto label1;
return;
label1:
v3 = new io.netty.handler.ssl.SslHandshakeTimeoutException;
v4 = v0.<io.netty.handler.ssl.SslHandler$7: long val$handshakeTimeoutMillis>;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("handshake timed out after \u0001ms");
specialinvoke v3.<io.netty.handler.ssl.SslHandshakeTimeoutException: void <init>(java.lang.String)>(v5);
label2:
v6 = v0.<io.netty.handler.ssl.SslHandler$7: io.netty.util.concurrent.Promise val$localHandshakePromise>;
v7 = interfaceinvoke v6.<io.netty.util.concurrent.Promise: boolean tryFailure(java.lang.Throwable)>(v3);
if v7 == 0 goto label3;
v8 = v0.<io.netty.handler.ssl.SslHandler$7: io.netty.handler.ssl.SslHandler this$0>;
v9 = v8.<io.netty.handler.ssl.SslHandler: io.netty.channel.ChannelHandlerContext ctx>;
staticinvoke <io.netty.handler.ssl.SslUtils: void handleHandshakeFailure(io.netty.channel.ChannelHandlerContext,java.lang.Throwable,boolean)>(v9, v3, 1);
label3:
v10 = v0.<io.netty.handler.ssl.SslHandler$7: io.netty.handler.ssl.SslHandler this$0>;
v11 = v0.<io.netty.handler.ssl.SslHandler$7: io.netty.handler.ssl.SslHandler this$0>;
v12 = v11.<io.netty.handler.ssl.SslHandler: io.netty.channel.ChannelHandlerContext ctx>;
specialinvoke v10.<io.netty.handler.ssl.SslHandler: void releaseAndFailAll(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)>(v12, v3);
goto label5;
label4:
v13 := @caughtexception;
v14 = v0.<io.netty.handler.ssl.SslHandler$7: io.netty.handler.ssl.SslHandler this$0>;
v15 = v0.<io.netty.handler.ssl.SslHandler$7: io.netty.handler.ssl.SslHandler this$0>;
v16 = v15.<io.netty.handler.ssl.SslHandler: io.netty.channel.ChannelHandlerContext ctx>;
specialinvoke v14.<io.netty.handler.ssl.SslHandler: void releaseAndFailAll(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)>(v16, v3);
throw v13;
label5:
return;
catch java.lang.Throwable from label2 to label3 with label4;
}
}