enum class io.netty.handler.ssl.SslHandler$SslEngineType$1 extends io.netty.handler.ssl.SslHandler$SslEngineType
{
private void <init>(java.lang.String, int, boolean, io.netty.handler.codec.ByteToMessageDecoder$Cumulator)
{
io.netty.handler.codec.ByteToMessageDecoder$Cumulator v4;
int v2;
java.lang.String v1;
io.netty.handler.ssl.SslHandler$SslEngineType$1 v0;
boolean v3;
v0 := @this: io.netty.handler.ssl.SslHandler$SslEngineType$1;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: boolean;
v4 := @parameter3: io.netty.handler.codec.ByteToMessageDecoder$Cumulator;
specialinvoke v0.<io.netty.handler.ssl.SslHandler$SslEngineType: void <init>(java.lang.String,int,boolean,io.netty.handler.codec.ByteToMessageDecoder$Cumulator)>(v1, v2, v3, v4);
return;
}
javax.net.ssl.SSLEngineResult unwrap(io.netty.handler.ssl.SslHandler, io.netty.buffer.ByteBuf, int, io.netty.buffer.ByteBuf) throws javax.net.ssl.SSLException
{
java.lang.Throwable v16;
java.nio.ByteBuffer v10, v20, v22;
javax.net.ssl.SSLEngine v18, v7;
javax.net.ssl.SSLEngineResult v14;
io.netty.buffer.ByteBuf v2, v4;
int v11, v19, v21, v23, v24, v3, v5, v6, v9;
java.nio.ByteBuffer[] v12, v13, v15, v17, v8;
io.netty.handler.ssl.SslHandler v1;
io.netty.handler.ssl.SslHandler$SslEngineType$1 v0;
v0 := @this: io.netty.handler.ssl.SslHandler$SslEngineType$1;
v1 := @parameter0: io.netty.handler.ssl.SslHandler;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 := @parameter2: int;
v4 := @parameter3: io.netty.buffer.ByteBuf;
v5 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int nioBufferCount()>();
v6 = virtualinvoke v4.<io.netty.buffer.ByteBuf: int writerIndex()>();
if v5 <= 1 goto label4;
v7 = v1.<io.netty.handler.ssl.SslHandler: javax.net.ssl.SSLEngine engine>;
label1:
v8 = v1.<io.netty.handler.ssl.SslHandler: java.nio.ByteBuffer[] singleBuffer>;
v9 = virtualinvoke v4.<io.netty.buffer.ByteBuf: int writableBytes()>();
v10 = staticinvoke <io.netty.handler.ssl.SslHandler: java.nio.ByteBuffer toByteBuffer(io.netty.buffer.ByteBuf,int,int)>(v4, v6, v9);
v8[0] = v10;
v11 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readerIndex()>();
v12 = virtualinvoke v2.<io.netty.buffer.ByteBuf: java.nio.ByteBuffer[] nioBuffers(int,int)>(v11, v3);
v13 = v1.<io.netty.handler.ssl.SslHandler: java.nio.ByteBuffer[] singleBuffer>;
v14 = virtualinvoke v7.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine: javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer[],java.nio.ByteBuffer[])>(v12, v13);
label2:
v15 = v1.<io.netty.handler.ssl.SslHandler: java.nio.ByteBuffer[] singleBuffer>;
v15[0] = null;
goto label5;
label3:
v16 := @caughtexception;
v17 = v1.<io.netty.handler.ssl.SslHandler: java.nio.ByteBuffer[] singleBuffer>;
v17[0] = null;
throw v16;
label4:
v18 = v1.<io.netty.handler.ssl.SslHandler: javax.net.ssl.SSLEngine engine>;
v19 = virtualinvoke v2.<io.netty.buffer.ByteBuf: int readerIndex()>();
v20 = staticinvoke <io.netty.handler.ssl.SslHandler: java.nio.ByteBuffer toByteBuffer(io.netty.buffer.ByteBuf,int,int)>(v2, v19, v3);
v21 = virtualinvoke v4.<io.netty.buffer.ByteBuf: int writableBytes()>();
v22 = staticinvoke <io.netty.handler.ssl.SslHandler: java.nio.ByteBuffer toByteBuffer(io.netty.buffer.ByteBuf,int,int)>(v4, v6, v21);
v14 = virtualinvoke v18.<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer)>(v20, v22);
label5:
v23 = virtualinvoke v14.<javax.net.ssl.SSLEngineResult: int bytesProduced()>();
v24 = v6 + v23;
virtualinvoke v4.<io.netty.buffer.ByteBuf: io.netty.buffer.ByteBuf writerIndex(int)>(v24);
return v14;
catch java.lang.Throwable from label1 to label2 with label3;
}
io.netty.buffer.ByteBuf allocateWrapBuffer(io.netty.handler.ssl.SslHandler, io.netty.buffer.ByteBufAllocator, int, int)
{
io.netty.buffer.ByteBufAllocator v2;
javax.net.ssl.SSLEngine v5;
io.netty.buffer.ByteBuf v7;
io.netty.handler.ssl.SslHandler v1;
int v3, v4, v6;
io.netty.handler.ssl.SslHandler$SslEngineType$1 v0;
v0 := @this: io.netty.handler.ssl.SslHandler$SslEngineType$1;
v1 := @parameter0: io.netty.handler.ssl.SslHandler;
v2 := @parameter1: io.netty.buffer.ByteBufAllocator;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 = v1.<io.netty.handler.ssl.SslHandler: javax.net.ssl.SSLEngine engine>;
v6 = virtualinvoke v5.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine: int calculateMaxLengthForWrap(int,int)>(v3, v4);
v7 = interfaceinvoke v2.<io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf directBuffer(int)>(v6);
return v7;
}
int calculatePendingData(io.netty.handler.ssl.SslHandler, int)
{
io.netty.handler.ssl.SslHandler v1;
int v2, v4, v5;
io.netty.handler.ssl.SslHandler$SslEngineType$1 v0;
javax.net.ssl.SSLEngine v3;
v0 := @this: io.netty.handler.ssl.SslHandler$SslEngineType$1;
v1 := @parameter0: io.netty.handler.ssl.SslHandler;
v2 := @parameter1: int;
v3 = v1.<io.netty.handler.ssl.SslHandler: javax.net.ssl.SSLEngine engine>;
v4 = virtualinvoke v3.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine: int sslPending()>();
if v4 <= 0 goto label1;
v5 = v4;
goto label2;
label1:
v5 = v2;
label2:
return v5;
}
boolean jdkCompatibilityMode(javax.net.ssl.SSLEngine)
{
io.netty.handler.ssl.SslHandler$SslEngineType$1 v0;
boolean v2;
javax.net.ssl.SSLEngine v1;
v0 := @this: io.netty.handler.ssl.SslHandler$SslEngineType$1;
v1 := @parameter0: javax.net.ssl.SSLEngine;
v2 = v1.<io.netty.handler.ssl.ReferenceCountedOpenSslEngine: boolean jdkCompatibilityMode>;
return v2;
}
}