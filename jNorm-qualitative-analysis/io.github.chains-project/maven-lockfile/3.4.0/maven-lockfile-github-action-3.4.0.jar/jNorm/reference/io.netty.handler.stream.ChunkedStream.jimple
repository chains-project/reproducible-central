public class io.netty.handler.stream.ChunkedStream extends java.lang.Object implements io.netty.handler.stream.ChunkedInput
{
static final int DEFAULT_CHUNK_SIZE;
private final java.io.PushbackInputStream in;
private final int chunkSize;
private long offset;
private boolean closed;
public void <init>(java.io.InputStream)
{
io.netty.handler.stream.ChunkedStream v0;
java.io.InputStream v1;
v0 := @this: io.netty.handler.stream.ChunkedStream;
v1 := @parameter0: java.io.InputStream;
specialinvoke v0.<io.netty.handler.stream.ChunkedStream: void <init>(java.io.InputStream,int)>(v1, 8192);
return;
}
public void <init>(java.io.InputStream, int)
{
java.io.PushbackInputStream v4;
int v2;
io.netty.handler.stream.ChunkedStream v0;
boolean v3;
java.io.InputStream v1;
v0 := @this: io.netty.handler.stream.ChunkedStream;
v1 := @parameter0: java.io.InputStream;
v2 := @parameter1: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "in");
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositive(int,java.lang.String)>(v2, "chunkSize");
v3 = v1 instanceof java.io.PushbackInputStream;
if v3 == 0 goto label1;
v0.<io.netty.handler.stream.ChunkedStream: java.io.PushbackInputStream in> = v1;
goto label2;
label1:
v4 = new java.io.PushbackInputStream;
specialinvoke v4.<java.io.PushbackInputStream: void <init>(java.io.InputStream)>(v1);
v0.<io.netty.handler.stream.ChunkedStream: java.io.PushbackInputStream in> = v4;
label2:
v0.<io.netty.handler.stream.ChunkedStream: int chunkSize> = v2;
return;
}
public long transferredBytes()
{
long v1;
io.netty.handler.stream.ChunkedStream v0;
v0 := @this: io.netty.handler.stream.ChunkedStream;
v1 = v0.<io.netty.handler.stream.ChunkedStream: long offset>;
return v1;
}
public boolean isEndOfInput() throws java.lang.Exception
{
java.io.PushbackInputStream v2, v4, v6;
int v3, v5;
io.netty.handler.stream.ChunkedStream v0;
boolean v1;
v0 := @this: io.netty.handler.stream.ChunkedStream;
v1 = v0.<io.netty.handler.stream.ChunkedStream: boolean closed>;
if v1 == 0 goto label1;
return 1;
label1:
v2 = v0.<io.netty.handler.stream.ChunkedStream: java.io.PushbackInputStream in>;
v3 = virtualinvoke v2.<java.io.PushbackInputStream: int available()>();
if v3 <= 0 goto label2;
return 0;
label2:
v4 = v0.<io.netty.handler.stream.ChunkedStream: java.io.PushbackInputStream in>;
v5 = virtualinvoke v4.<java.io.PushbackInputStream: int read()>();
if v5 >= 0 goto label3;
return 1;
label3:
v6 = v0.<io.netty.handler.stream.ChunkedStream: java.io.PushbackInputStream in>;
virtualinvoke v6.<java.io.PushbackInputStream: void unread(int)>(v5);
return 0;
}
public void close() throws java.lang.Exception
{
io.netty.handler.stream.ChunkedStream v0;
java.io.PushbackInputStream v1;
v0 := @this: io.netty.handler.stream.ChunkedStream;
v0.<io.netty.handler.stream.ChunkedStream: boolean closed> = 1;
v1 = v0.<io.netty.handler.stream.ChunkedStream: java.io.PushbackInputStream in>;
virtualinvoke v1.<java.io.PushbackInputStream: void close()>();
return;
}
public io.netty.buffer.ByteBuf readChunk(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.buffer.ByteBuf v3;
io.netty.buffer.ByteBufAllocator v2;
io.netty.handler.stream.ChunkedStream v0;
v0 := @this: io.netty.handler.stream.ChunkedStream;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.buffer.ByteBufAllocator alloc()>();
v3 = virtualinvoke v0.<io.netty.handler.stream.ChunkedStream: io.netty.buffer.ByteBuf readChunk(io.netty.buffer.ByteBufAllocator)>(v2);
return v3;
}
public io.netty.buffer.ByteBuf readChunk(io.netty.buffer.ByteBufAllocator) throws java.lang.Exception
{
java.lang.Throwable v14;
io.netty.buffer.ByteBufAllocator v1;
java.io.PushbackInputStream v10, v3, v7;
long v12, v13;
io.netty.handler.stream.ChunkedStream v0;
io.netty.buffer.ByteBuf v9;
int v11, v4, v5, v6, v8;
boolean v2;
v0 := @this: io.netty.handler.stream.ChunkedStream;
v1 := @parameter0: io.netty.buffer.ByteBufAllocator;
v2 = virtualinvoke v0.<io.netty.handler.stream.ChunkedStream: boolean isEndOfInput()>();
if v2 == 0 goto label1;
return null;
label1:
v3 = v0.<io.netty.handler.stream.ChunkedStream: java.io.PushbackInputStream in>;
v4 = virtualinvoke v3.<java.io.PushbackInputStream: int available()>();
if v4 > 0 goto label2;
v5 = v0.<io.netty.handler.stream.ChunkedStream: int chunkSize>;
goto label3;
label2:
v6 = v0.<io.netty.handler.stream.ChunkedStream: int chunkSize>;
v7 = v0.<io.netty.handler.stream.ChunkedStream: java.io.PushbackInputStream in>;
v8 = virtualinvoke v7.<java.io.PushbackInputStream: int available()>();
v5 = staticinvoke <java.lang.Math: int min(int,int)>(v6, v8);
label3:
v9 = interfaceinvoke v1.<io.netty.buffer.ByteBufAllocator: io.netty.buffer.ByteBuf buffer(int)>(v5);
label4:
v10 = v0.<io.netty.handler.stream.ChunkedStream: java.io.PushbackInputStream in>;
v11 = virtualinvoke v9.<io.netty.buffer.ByteBuf: int writeBytes(java.io.InputStream,int)>(v10, v5);
if v11 >= 0 goto label6;
label5:
virtualinvoke v9.<io.netty.buffer.ByteBuf: boolean release()>();
return null;
label6:
v12 = v0.<io.netty.handler.stream.ChunkedStream: long offset>;
v13 = v12 + v11;
v0.<io.netty.handler.stream.ChunkedStream: long offset> = v13;
label7:
return v9;
label8:
v14 := @caughtexception;
virtualinvoke v9.<io.netty.buffer.ByteBuf: boolean release()>();
throw v14;
catch java.lang.Throwable from label4 to label5 with label8;
catch java.lang.Throwable from label6 to label7 with label8;
}
public long length()
{
io.netty.handler.stream.ChunkedStream v0;
v0 := @this: io.netty.handler.stream.ChunkedStream;
return -1L;
}
public long progress()
{
long v1;
io.netty.handler.stream.ChunkedStream v0;
v0 := @this: io.netty.handler.stream.ChunkedStream;
v1 = v0.<io.netty.handler.stream.ChunkedStream: long offset>;
return v1;
}
}