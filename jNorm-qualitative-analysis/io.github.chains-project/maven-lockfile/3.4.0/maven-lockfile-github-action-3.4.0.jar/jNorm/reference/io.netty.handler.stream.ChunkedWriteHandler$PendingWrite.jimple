final class io.netty.handler.stream.ChunkedWriteHandler$PendingWrite extends java.lang.Object
{
final java.lang.Object msg;
final io.netty.channel.ChannelPromise promise;
void <init>(java.lang.Object, io.netty.channel.ChannelPromise)
{
java.lang.Object v1;
io.netty.channel.ChannelPromise v2;
io.netty.handler.stream.ChunkedWriteHandler$PendingWrite v0;
v0 := @this: io.netty.handler.stream.ChunkedWriteHandler$PendingWrite;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: io.netty.channel.ChannelPromise;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.handler.stream.ChunkedWriteHandler$PendingWrite: java.lang.Object msg> = v1;
v0.<io.netty.handler.stream.ChunkedWriteHandler$PendingWrite: io.netty.channel.ChannelPromise promise> = v2;
return;
}
void fail(java.lang.Throwable)
{
java.lang.Throwable v1;
io.netty.channel.ChannelPromise v3;
io.netty.handler.stream.ChunkedWriteHandler$PendingWrite v0;
java.lang.Object v2;
v0 := @this: io.netty.handler.stream.ChunkedWriteHandler$PendingWrite;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.netty.handler.stream.ChunkedWriteHandler$PendingWrite: java.lang.Object msg>;
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v2);
v3 = v0.<io.netty.handler.stream.ChunkedWriteHandler$PendingWrite: io.netty.channel.ChannelPromise promise>;
interfaceinvoke v3.<io.netty.channel.ChannelPromise: boolean tryFailure(java.lang.Throwable)>(v1);
return;
}
void success(long)
{
io.netty.channel.ChannelPromise v2, v4;
io.netty.handler.stream.ChunkedWriteHandler$PendingWrite v0;
long v1;
boolean v3;
v0 := @this: io.netty.handler.stream.ChunkedWriteHandler$PendingWrite;
v1 := @parameter0: long;
v2 = v0.<io.netty.handler.stream.ChunkedWriteHandler$PendingWrite: io.netty.channel.ChannelPromise promise>;
v3 = interfaceinvoke v2.<io.netty.channel.ChannelPromise: boolean isDone()>();
if v3 == 0 goto label1;
return;
label1:
virtualinvoke v0.<io.netty.handler.stream.ChunkedWriteHandler$PendingWrite: void progress(long,long)>(v1, v1);
v4 = v0.<io.netty.handler.stream.ChunkedWriteHandler$PendingWrite: io.netty.channel.ChannelPromise promise>;
interfaceinvoke v4.<io.netty.channel.ChannelPromise: boolean trySuccess()>();
return;
}
void progress(long, long)
{
io.netty.channel.ChannelPromise v3, v5;
io.netty.handler.stream.ChunkedWriteHandler$PendingWrite v0;
long v1, v2;
boolean v4;
v0 := @this: io.netty.handler.stream.ChunkedWriteHandler$PendingWrite;
v1 := @parameter0: long;
v2 := @parameter1: long;
v3 = v0.<io.netty.handler.stream.ChunkedWriteHandler$PendingWrite: io.netty.channel.ChannelPromise promise>;
v4 = v3 instanceof io.netty.channel.ChannelProgressivePromise;
if v4 == 0 goto label1;
v5 = v0.<io.netty.handler.stream.ChunkedWriteHandler$PendingWrite: io.netty.channel.ChannelPromise promise>;
interfaceinvoke v5.<io.netty.channel.ChannelProgressivePromise: boolean tryProgress(long,long)>(v1, v2);
label1:
return;
}
}