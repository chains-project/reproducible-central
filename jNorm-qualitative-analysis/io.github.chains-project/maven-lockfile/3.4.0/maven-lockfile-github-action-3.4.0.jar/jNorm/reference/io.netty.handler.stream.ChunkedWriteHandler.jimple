public class io.netty.handler.stream.ChunkedWriteHandler extends io.netty.channel.ChannelDuplexHandler
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private final java.util.Queue queue;
private volatile io.netty.channel.ChannelHandlerContext ctx;
public void <init>()
{
io.netty.handler.stream.ChunkedWriteHandler v0;
java.util.ArrayDeque v1;
v0 := @this: io.netty.handler.stream.ChunkedWriteHandler;
specialinvoke v0.<io.netty.channel.ChannelDuplexHandler: void <init>()>();
v1 = new java.util.ArrayDeque;
specialinvoke v1.<java.util.ArrayDeque: void <init>()>();
v0.<io.netty.handler.stream.ChunkedWriteHandler: java.util.Queue queue> = v1;
return;
}
public void <init>(int)
{
int v1;
io.netty.handler.stream.ChunkedWriteHandler v0;
java.util.ArrayDeque v2;
v0 := @this: io.netty.handler.stream.ChunkedWriteHandler;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.channel.ChannelDuplexHandler: void <init>()>();
v2 = new java.util.ArrayDeque;
specialinvoke v2.<java.util.ArrayDeque: void <init>()>();
v0.<io.netty.handler.stream.ChunkedWriteHandler: java.util.Queue queue> = v2;
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositive(int,java.lang.String)>(v1, "maxPendingWrites");
return;
}
public void handlerAdded(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.stream.ChunkedWriteHandler v0;
v0 := @this: io.netty.handler.stream.ChunkedWriteHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v0.<io.netty.handler.stream.ChunkedWriteHandler: io.netty.channel.ChannelHandlerContext ctx> = v1;
return;
}
public void resumeTransfer()
{
io.netty.util.concurrent.EventExecutor v2, v4;
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.stream.ChunkedWriteHandler v0;
io.netty.handler.stream.ChunkedWriteHandler$1 v5;
boolean v3;
v0 := @this: io.netty.handler.stream.ChunkedWriteHandler;
v1 = v0.<io.netty.handler.stream.ChunkedWriteHandler: io.netty.channel.ChannelHandlerContext ctx>;
if v1 != null goto label1;
return;
label1:
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v3 = interfaceinvoke v2.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v3 == 0 goto label2;
specialinvoke v0.<io.netty.handler.stream.ChunkedWriteHandler: void resumeTransfer0(io.netty.channel.ChannelHandlerContext)>(v1);
goto label3;
label2:
v4 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v5 = new io.netty.handler.stream.ChunkedWriteHandler$1;
specialinvoke v5.<io.netty.handler.stream.ChunkedWriteHandler$1: void <init>(io.netty.handler.stream.ChunkedWriteHandler,io.netty.channel.ChannelHandlerContext)>(v0, v1);
interfaceinvoke v4.<io.netty.util.concurrent.EventExecutor: void execute(java.lang.Runnable)>(v5);
label3:
return;
}
private void resumeTransfer0(io.netty.channel.ChannelHandlerContext)
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.util.internal.logging.InternalLogger v3;
io.netty.handler.stream.ChunkedWriteHandler v0;
java.lang.Exception v2;
v0 := @this: io.netty.handler.stream.ChunkedWriteHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
label1:
specialinvoke v0.<io.netty.handler.stream.ChunkedWriteHandler: void doFlush(io.netty.channel.ChannelHandlerContext)>(v1);
label2:
goto label4;
label3:
v2 := @caughtexception;
v3 = <io.netty.handler.stream.ChunkedWriteHandler: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v3.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Throwable)>("Unexpected exception while sending chunks.", v2);
label4:
return;
catch java.lang.Exception from label1 to label2 with label3;
}
public void write(io.netty.channel.ChannelHandlerContext, java.lang.Object, io.netty.channel.ChannelPromise) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelPromise v3;
io.netty.handler.stream.ChunkedWriteHandler$PendingWrite v5;
io.netty.handler.stream.ChunkedWriteHandler v0;
java.lang.Object v2;
java.util.Queue v4;
v0 := @this: io.netty.handler.stream.ChunkedWriteHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: io.netty.channel.ChannelPromise;
v4 = v0.<io.netty.handler.stream.ChunkedWriteHandler: java.util.Queue queue>;
v5 = new io.netty.handler.stream.ChunkedWriteHandler$PendingWrite;
specialinvoke v5.<io.netty.handler.stream.ChunkedWriteHandler$PendingWrite: void <init>(java.lang.Object,io.netty.channel.ChannelPromise)>(v2, v3);
interfaceinvoke v4.<java.util.Queue: boolean add(java.lang.Object)>(v5);
return;
}
public void flush(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.stream.ChunkedWriteHandler v0;
v0 := @this: io.netty.handler.stream.ChunkedWriteHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
specialinvoke v0.<io.netty.handler.stream.ChunkedWriteHandler: void doFlush(io.netty.channel.ChannelHandlerContext)>(v1);
return;
}
public void channelInactive(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.stream.ChunkedWriteHandler v0;
v0 := @this: io.netty.handler.stream.ChunkedWriteHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
specialinvoke v0.<io.netty.handler.stream.ChunkedWriteHandler: void doFlush(io.netty.channel.ChannelHandlerContext)>(v1);
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelInactive()>();
return;
}
public void channelWritabilityChanged(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.Channel v2;
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.stream.ChunkedWriteHandler v0;
boolean v3;
v0 := @this: io.netty.handler.stream.ChunkedWriteHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v3 = interfaceinvoke v2.<io.netty.channel.Channel: boolean isWritable()>();
if v3 == 0 goto label1;
specialinvoke v0.<io.netty.handler.stream.ChunkedWriteHandler: void doFlush(io.netty.channel.ChannelHandlerContext)>(v1);
label1:
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelWritabilityChanged()>();
return;
}
private void discard(java.lang.Throwable)
{
java.lang.Throwable v1;
io.netty.handler.stream.ChunkedWriteHandler v0;
long v7;
java.lang.String v13, v14;
boolean v10, v5, v6;
java.nio.channels.ClosedChannelException v15, v16;
java.lang.Exception v8;
io.netty.util.internal.logging.InternalLogger v11, v9;
java.lang.Class v12;
java.lang.Object v3, v4;
java.util.Queue v2;
v0 := @this: io.netty.handler.stream.ChunkedWriteHandler;
v1 := @parameter0: java.lang.Throwable;
label01:
v2 = v0.<io.netty.handler.stream.ChunkedWriteHandler: java.util.Queue queue>;
v3 = interfaceinvoke v2.<java.util.Queue: java.lang.Object poll()>();
if v3 == null goto label10;
v4 = v3.<io.netty.handler.stream.ChunkedWriteHandler$PendingWrite: java.lang.Object msg>;
v5 = v4 instanceof io.netty.handler.stream.ChunkedInput;
if v5 == 0 goto label08;
label02:
v6 = interfaceinvoke v4.<io.netty.handler.stream.ChunkedInput: boolean isEndOfInput()>();
v7 = interfaceinvoke v4.<io.netty.handler.stream.ChunkedInput: long length()>();
staticinvoke <io.netty.handler.stream.ChunkedWriteHandler: void closeInput(io.netty.handler.stream.ChunkedInput)>(v4);
label03:
goto label05;
label04:
v8 := @caughtexception;
staticinvoke <io.netty.handler.stream.ChunkedWriteHandler: void closeInput(io.netty.handler.stream.ChunkedInput)>(v4);
virtualinvoke v3.<io.netty.handler.stream.ChunkedWriteHandler$PendingWrite: void fail(java.lang.Throwable)>(v8);
v9 = <io.netty.handler.stream.ChunkedWriteHandler: io.netty.util.internal.logging.InternalLogger logger>;
v10 = interfaceinvoke v9.<io.netty.util.internal.logging.InternalLogger: boolean isWarnEnabled()>();
if v10 == 0 goto label01;
v11 = <io.netty.handler.stream.ChunkedWriteHandler: io.netty.util.internal.logging.InternalLogger logger>;
v12 = class "Lio/netty/handler/stream/ChunkedInput;";
v13 = virtualinvoke v12.<java.lang.Class: java.lang.String getSimpleName()>();
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v13) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 failed");
interfaceinvoke v11.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Throwable)>(v14, v8);
goto label01;
label05:
if v6 != 0 goto label07;
if v1 != null goto label06;
v15 = new java.nio.channels.ClosedChannelException;
specialinvoke v15.<java.nio.channels.ClosedChannelException: void <init>()>();
v1 = v15;
label06:
virtualinvoke v3.<io.netty.handler.stream.ChunkedWriteHandler$PendingWrite: void fail(java.lang.Throwable)>(v1);
goto label01;
label07:
virtualinvoke v3.<io.netty.handler.stream.ChunkedWriteHandler$PendingWrite: void success(long)>(v7);
goto label01;
label08:
if v1 != null goto label09;
v16 = new java.nio.channels.ClosedChannelException;
specialinvoke v16.<java.nio.channels.ClosedChannelException: void <init>()>();
v1 = v16;
label09:
virtualinvoke v3.<io.netty.handler.stream.ChunkedWriteHandler$PendingWrite: void fail(java.lang.Throwable)>(v1);
goto label01;
label10:
return;
catch java.lang.Exception from label02 to label03 with label04;
}
private void doFlush(io.netty.channel.ChannelHandlerContext)
{
io.netty.buffer.ByteBufAllocator v5;
io.netty.handler.stream.ChunkedWriteHandler v0;
io.netty.handler.stream.ChunkedWriteHandler$2 v23;
io.netty.handler.stream.ChunkedWriteHandler$3 v27;
io.netty.channel.ChannelPromise v29, v9;
boolean v10, v13, v15, v16, v17, v22, v24, v25, v26, v3, v30, v4, v6;
java.util.Queue v11, v19, v20, v28, v7;
java.lang.Throwable v18;
io.netty.channel.ChannelHandlerContext v1;
java.nio.channels.ClosedChannelException v31;
io.netty.channel.ChannelFuture v21;
io.netty.channel.Channel v2;
java.lang.Object v12, v14, v8;
v0 := @this: io.netty.handler.stream.ChunkedWriteHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v3 = interfaceinvoke v2.<io.netty.channel.Channel: boolean isActive()>();
if v3 != 0 goto label01;
specialinvoke v0.<io.netty.handler.stream.ChunkedWriteHandler: void discard(java.lang.Throwable)>(null);
return;
label01:
v4 = 1;
v5 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.buffer.ByteBufAllocator alloc()>();
label02:
v6 = interfaceinvoke v2.<io.netty.channel.Channel: boolean isWritable()>();
if v6 == 0 goto label22;
v7 = v0.<io.netty.handler.stream.ChunkedWriteHandler: java.util.Queue queue>;
v8 = interfaceinvoke v7.<java.util.Queue: java.lang.Object peek()>();
if v8 == null goto label22;
v9 = v8.<io.netty.handler.stream.ChunkedWriteHandler$PendingWrite: io.netty.channel.ChannelPromise promise>;
v10 = interfaceinvoke v9.<io.netty.channel.ChannelPromise: boolean isDone()>();
if v10 == 0 goto label03;
v11 = v0.<io.netty.handler.stream.ChunkedWriteHandler: java.util.Queue queue>;
interfaceinvoke v11.<java.util.Queue: java.lang.Object remove()>();
goto label02;
label03:
v12 = v8.<io.netty.handler.stream.ChunkedWriteHandler$PendingWrite: java.lang.Object msg>;
v13 = v12 instanceof io.netty.handler.stream.ChunkedInput;
if v13 == 0 goto label20;
v14 = null;
label04:
v14 = interfaceinvoke v12.<io.netty.handler.stream.ChunkedInput: java.lang.Object readChunk(io.netty.buffer.ByteBufAllocator)>(v5);
v15 = interfaceinvoke v12.<io.netty.handler.stream.ChunkedInput: boolean isEndOfInput()>();
if v14 != null goto label07;
if v15 != 0 goto label05;
v16 = 1;
goto label06;
label05:
v16 = 0;
label06:
v17 = v16;
goto label11;
label07:
v17 = 0;
label08:
goto label11;
label09:
v18 := @caughtexception;
v19 = v0.<io.netty.handler.stream.ChunkedWriteHandler: java.util.Queue queue>;
interfaceinvoke v19.<java.util.Queue: java.lang.Object remove()>();
if v14 == null goto label10;
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v14);
label10:
staticinvoke <io.netty.handler.stream.ChunkedWriteHandler: void closeInput(io.netty.handler.stream.ChunkedInput)>(v12);
virtualinvoke v8.<io.netty.handler.stream.ChunkedWriteHandler$PendingWrite: void fail(java.lang.Throwable)>(v18);
goto label22;
label11:
if v17 != 0 goto label22;
if v14 != null goto label12;
v14 = <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf EMPTY_BUFFER>;
label12:
if v15 == 0 goto label13;
v20 = v0.<io.netty.handler.stream.ChunkedWriteHandler: java.util.Queue queue>;
interfaceinvoke v20.<java.util.Queue: java.lang.Object remove()>();
label13:
v21 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture writeAndFlush(java.lang.Object)>(v14);
if v15 == 0 goto label15;
v22 = interfaceinvoke v21.<io.netty.channel.ChannelFuture: boolean isDone()>();
if v22 == 0 goto label14;
staticinvoke <io.netty.handler.stream.ChunkedWriteHandler: void handleEndOfInputFuture(io.netty.channel.ChannelFuture,io.netty.handler.stream.ChunkedWriteHandler$PendingWrite)>(v21, v8);
goto label19;
label14:
v23 = new io.netty.handler.stream.ChunkedWriteHandler$2;
specialinvoke v23.<io.netty.handler.stream.ChunkedWriteHandler$2: void <init>(io.netty.handler.stream.ChunkedWriteHandler,io.netty.handler.stream.ChunkedWriteHandler$PendingWrite)>(v0, v8);
interfaceinvoke v21.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v23);
goto label19;
label15:
v24 = interfaceinvoke v2.<io.netty.channel.Channel: boolean isWritable()>();
if v24 != 0 goto label16;
v25 = 1;
goto label17;
label16:
v25 = 0;
label17:
v26 = interfaceinvoke v21.<io.netty.channel.ChannelFuture: boolean isDone()>();
if v26 == 0 goto label18;
specialinvoke v0.<io.netty.handler.stream.ChunkedWriteHandler: void handleFuture(io.netty.channel.ChannelFuture,io.netty.handler.stream.ChunkedWriteHandler$PendingWrite,boolean)>(v21, v8, v25);
goto label19;
label18:
v27 = new io.netty.handler.stream.ChunkedWriteHandler$3;
specialinvoke v27.<io.netty.handler.stream.ChunkedWriteHandler$3: void <init>(io.netty.handler.stream.ChunkedWriteHandler,io.netty.handler.stream.ChunkedWriteHandler$PendingWrite,boolean)>(v0, v8, v25);
interfaceinvoke v21.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v27);
label19:
v4 = 0;
goto label21;
label20:
v28 = v0.<io.netty.handler.stream.ChunkedWriteHandler: java.util.Queue queue>;
interfaceinvoke v28.<java.util.Queue: java.lang.Object remove()>();
v29 = v8.<io.netty.handler.stream.ChunkedWriteHandler$PendingWrite: io.netty.channel.ChannelPromise promise>;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)>(v12, v29);
v4 = 1;
label21:
v30 = interfaceinvoke v2.<io.netty.channel.Channel: boolean isActive()>();
if v30 != 0 goto label02;
v31 = new java.nio.channels.ClosedChannelException;
specialinvoke v31.<java.nio.channels.ClosedChannelException: void <init>()>();
specialinvoke v0.<io.netty.handler.stream.ChunkedWriteHandler: void discard(java.lang.Throwable)>(v31);
label22:
if v4 == 0 goto label23;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext flush()>();
label23:
return;
catch java.lang.Throwable from label04 to label08 with label09;
}
private static void handleEndOfInputFuture(io.netty.channel.ChannelFuture, io.netty.handler.stream.ChunkedWriteHandler$PendingWrite)
{
java.lang.Throwable v4;
io.netty.handler.stream.ChunkedWriteHandler$PendingWrite v1;
java.lang.Object v2;
long v5, v6;
boolean v3;
io.netty.channel.ChannelFuture v0;
v0 := @parameter0: io.netty.channel.ChannelFuture;
v1 := @parameter1: io.netty.handler.stream.ChunkedWriteHandler$PendingWrite;
v2 = v1.<io.netty.handler.stream.ChunkedWriteHandler$PendingWrite: java.lang.Object msg>;
v3 = interfaceinvoke v0.<io.netty.channel.ChannelFuture: boolean isSuccess()>();
if v3 != 0 goto label1;
staticinvoke <io.netty.handler.stream.ChunkedWriteHandler: void closeInput(io.netty.handler.stream.ChunkedInput)>(v2);
v4 = interfaceinvoke v0.<io.netty.channel.ChannelFuture: java.lang.Throwable cause()>();
virtualinvoke v1.<io.netty.handler.stream.ChunkedWriteHandler$PendingWrite: void fail(java.lang.Throwable)>(v4);
goto label2;
label1:
v5 = interfaceinvoke v2.<io.netty.handler.stream.ChunkedInput: long progress()>();
v6 = interfaceinvoke v2.<io.netty.handler.stream.ChunkedInput: long length()>();
staticinvoke <io.netty.handler.stream.ChunkedWriteHandler: void closeInput(io.netty.handler.stream.ChunkedInput)>(v2);
virtualinvoke v1.<io.netty.handler.stream.ChunkedWriteHandler$PendingWrite: void progress(long,long)>(v5, v6);
virtualinvoke v1.<io.netty.handler.stream.ChunkedWriteHandler$PendingWrite: void success(long)>(v6);
label2:
return;
}
private void handleFuture(io.netty.channel.ChannelFuture, io.netty.handler.stream.ChunkedWriteHandler$PendingWrite, boolean)
{
java.lang.Throwable v6;
io.netty.handler.stream.ChunkedWriteHandler$PendingWrite v2;
io.netty.handler.stream.ChunkedWriteHandler v0;
long v7, v8;
io.netty.channel.ChannelFuture v1;
io.netty.channel.Channel v9;
java.lang.Object v4;
boolean v10, v3, v5;
v0 := @this: io.netty.handler.stream.ChunkedWriteHandler;
v1 := @parameter0: io.netty.channel.ChannelFuture;
v2 := @parameter1: io.netty.handler.stream.ChunkedWriteHandler$PendingWrite;
v3 := @parameter2: boolean;
v4 = v2.<io.netty.handler.stream.ChunkedWriteHandler$PendingWrite: java.lang.Object msg>;
v5 = interfaceinvoke v1.<io.netty.channel.ChannelFuture: boolean isSuccess()>();
if v5 != 0 goto label1;
staticinvoke <io.netty.handler.stream.ChunkedWriteHandler: void closeInput(io.netty.handler.stream.ChunkedInput)>(v4);
v6 = interfaceinvoke v1.<io.netty.channel.ChannelFuture: java.lang.Throwable cause()>();
virtualinvoke v2.<io.netty.handler.stream.ChunkedWriteHandler$PendingWrite: void fail(java.lang.Throwable)>(v6);
goto label2;
label1:
v7 = interfaceinvoke v4.<io.netty.handler.stream.ChunkedInput: long progress()>();
v8 = interfaceinvoke v4.<io.netty.handler.stream.ChunkedInput: long length()>();
virtualinvoke v2.<io.netty.handler.stream.ChunkedWriteHandler$PendingWrite: void progress(long,long)>(v7, v8);
if v3 == 0 goto label2;
v9 = interfaceinvoke v1.<io.netty.channel.ChannelFuture: io.netty.channel.Channel channel()>();
v10 = interfaceinvoke v9.<io.netty.channel.Channel: boolean isWritable()>();
if v10 == 0 goto label2;
virtualinvoke v0.<io.netty.handler.stream.ChunkedWriteHandler: void resumeTransfer()>();
label2:
return;
}
private static void closeInput(io.netty.handler.stream.ChunkedInput)
{
io.netty.handler.stream.ChunkedInput v0;
v0 := @parameter0: io.netty.handler.stream.ChunkedInput;
return;
}
static void <clinit>()
{
io.netty.util.internal.logging.InternalLogger v0;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/handler/stream/ChunkedWriteHandler;");
<io.netty.handler.stream.ChunkedWriteHandler: io.netty.util.internal.logging.InternalLogger logger> = v0;
return;
}
}