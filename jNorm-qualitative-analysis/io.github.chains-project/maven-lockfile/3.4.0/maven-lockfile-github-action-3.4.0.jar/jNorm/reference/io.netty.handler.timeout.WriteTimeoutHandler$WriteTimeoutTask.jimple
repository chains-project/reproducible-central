final class io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask extends java.lang.Object implements java.lang.Runnable, io.netty.channel.ChannelFutureListener
{
private final io.netty.channel.ChannelHandlerContext ctx;
private final io.netty.channel.ChannelPromise promise;
io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask prev;
io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask next;
io.netty.util.concurrent.Future scheduledFuture;
static final boolean $assertionsDisabled;
final io.netty.handler.timeout.WriteTimeoutHandler this$0;
void <init>(io.netty.handler.timeout.WriteTimeoutHandler, io.netty.channel.ChannelHandlerContext, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelHandlerContext v2;
io.netty.handler.timeout.WriteTimeoutHandler v1;
io.netty.channel.ChannelPromise v3;
io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask v0;
v0 := @this: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask;
v1 := @parameter0: io.netty.handler.timeout.WriteTimeoutHandler;
v2 := @parameter1: io.netty.channel.ChannelHandlerContext;
v3 := @parameter2: io.netty.channel.ChannelPromise;
v0.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.handler.timeout.WriteTimeoutHandler this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.channel.ChannelHandlerContext ctx> = v2;
v0.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.channel.ChannelPromise promise> = v3;
return;
}
public void run()
{
java.lang.Throwable v5;
io.netty.handler.timeout.WriteTimeoutHandler v3, v7;
io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask v0;
io.netty.channel.ChannelHandlerContext v4, v6;
io.netty.channel.ChannelPromise v1;
boolean v2;
v0 := @this: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask;
v1 = v0.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.channel.ChannelPromise promise>;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelPromise: boolean isDone()>();
if v2 != 0 goto label4;
label1:
v3 = v0.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.handler.timeout.WriteTimeoutHandler this$0>;
v4 = v0.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.channel.ChannelHandlerContext ctx>;
virtualinvoke v3.<io.netty.handler.timeout.WriteTimeoutHandler: void writeTimedOut(io.netty.channel.ChannelHandlerContext)>(v4);
label2:
goto label4;
label3:
v5 := @caughtexception;
v6 = v0.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.channel.ChannelHandlerContext ctx>;
interfaceinvoke v6.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireExceptionCaught(java.lang.Throwable)>(v5);
label4:
v7 = v0.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.handler.timeout.WriteTimeoutHandler this$0>;
specialinvoke v7.<io.netty.handler.timeout.WriteTimeoutHandler: void removeWriteTimeoutTask(io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask)>(v0);
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void operationComplete(io.netty.channel.ChannelFuture) throws java.lang.Exception
{
io.netty.util.concurrent.EventExecutor v12, v4;
io.netty.handler.timeout.WriteTimeoutHandler v6;
java.lang.AssertionError v10;
io.netty.channel.ChannelFuture v1;
io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask v0;
io.netty.channel.ChannelHandlerContext v11, v3;
io.netty.channel.ChannelPromise v8;
io.netty.util.concurrent.Future v2;
boolean v5, v7, v9;
v0 := @this: io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask;
v1 := @parameter0: io.netty.channel.ChannelFuture;
v2 = v0.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.util.concurrent.Future scheduledFuture>;
interfaceinvoke v2.<io.netty.util.concurrent.Future: boolean cancel(boolean)>(0);
v3 = v0.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.channel.ChannelHandlerContext ctx>;
v4 = interfaceinvoke v3.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v5 = interfaceinvoke v4.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v5 == 0 goto label1;
v6 = v0.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.handler.timeout.WriteTimeoutHandler this$0>;
specialinvoke v6.<io.netty.handler.timeout.WriteTimeoutHandler: void removeWriteTimeoutTask(io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask)>(v0);
goto label3;
label1:
v7 = <io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: boolean $assertionsDisabled>;
if v7 != 0 goto label2;
v8 = v0.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.channel.ChannelPromise promise>;
v9 = interfaceinvoke v8.<io.netty.channel.ChannelPromise: boolean isDone()>();
if v9 != 0 goto label2;
v10 = new java.lang.AssertionError;
specialinvoke v10.<java.lang.AssertionError: void <init>()>();
throw v10;
label2:
v11 = v0.<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: io.netty.channel.ChannelHandlerContext ctx>;
v12 = interfaceinvoke v11.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
interfaceinvoke v12.<io.netty.util.concurrent.EventExecutor: void execute(java.lang.Runnable)>(v0);
label3:
return;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/handler/timeout/WriteTimeoutHandler;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.handler.timeout.WriteTimeoutHandler$WriteTimeoutTask: boolean $assertionsDisabled> = v2;
return;
}
}