public class io.netty.handler.traffic.GlobalChannelTrafficShapingHandler extends io.netty.handler.traffic.AbstractTrafficShapingHandler
{
private static final io.netty.util.internal.logging.InternalLogger logger;
final java.util.concurrent.ConcurrentMap channelQueues;
private final java.util.concurrent.atomic.AtomicLong queuesSize;
private final java.util.concurrent.atomic.AtomicLong cumulativeWrittenBytes;
private final java.util.concurrent.atomic.AtomicLong cumulativeReadBytes;
volatile long maxGlobalWriteSize;
private volatile long writeChannelLimit;
private volatile long readChannelLimit;
private static final float DEFAULT_DEVIATION;
private static final float MAX_DEVIATION;
private static final float DEFAULT_SLOWDOWN;
private static final float DEFAULT_ACCELERATION;
private volatile float maxDeviation;
private volatile float accelerationFactor;
private volatile float slowDownFactor;
private volatile boolean readDeviationActive;
private volatile boolean writeDeviationActive;
void createGlobalTrafficCounter(java.util.concurrent.ScheduledExecutorService)
{
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
java.util.concurrent.ScheduledExecutorService v1;
long v3;
io.netty.handler.traffic.GlobalChannelTrafficCounter v2;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
v1 := @parameter0: java.util.concurrent.ScheduledExecutorService;
virtualinvoke v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: void setMaxDeviation(float,float,float)>(0.1F, 0.4F, -0.1F);
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNullWithIAE(java.lang.Object,java.lang.String)>(v1, "executor");
v2 = new io.netty.handler.traffic.GlobalChannelTrafficCounter;
v3 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long checkInterval>;
specialinvoke v2.<io.netty.handler.traffic.GlobalChannelTrafficCounter: void <init>(io.netty.handler.traffic.GlobalChannelTrafficShapingHandler,java.util.concurrent.ScheduledExecutorService,java.lang.String,long)>(v0, v1, "GlobalChannelTC", v3);
virtualinvoke v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: void setTrafficCounter(io.netty.handler.traffic.TrafficCounter)>(v2);
virtualinvoke v2.<io.netty.handler.traffic.TrafficCounter: void start()>();
return;
}
protected int userDefinedWritabilityIndex()
{
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
return 3;
}
public void <init>(java.util.concurrent.ScheduledExecutorService, long, long, long, long, long, long)
{
long v2, v3, v4, v5, v6, v7;
java.util.concurrent.ConcurrentMap v8;
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
java.util.concurrent.atomic.AtomicLong v10, v11, v9;
java.util.concurrent.ScheduledExecutorService v1;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
v1 := @parameter0: java.util.concurrent.ScheduledExecutorService;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 := @parameter3: long;
v5 := @parameter4: long;
v6 := @parameter5: long;
v7 := @parameter6: long;
specialinvoke v0.<io.netty.handler.traffic.AbstractTrafficShapingHandler: void <init>(long,long,long,long)>(v2, v3, v6, v7);
v8 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.concurrent.ConcurrentMap newConcurrentHashMap()>();
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.ConcurrentMap channelQueues> = v8;
v9 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v9.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong queuesSize> = v9;
v10 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v10.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong cumulativeWrittenBytes> = v10;
v11 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v11.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong cumulativeReadBytes> = v11;
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long maxGlobalWriteSize> = 419430400L;
virtualinvoke v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: void createGlobalTrafficCounter(java.util.concurrent.ScheduledExecutorService)>(v1);
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long writeChannelLimit> = v4;
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long readChannelLimit> = v5;
return;
}
public void <init>(java.util.concurrent.ScheduledExecutorService, long, long, long, long, long)
{
long v2, v3, v4, v5, v6;
java.util.concurrent.ConcurrentMap v7;
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
java.util.concurrent.atomic.AtomicLong v10, v8, v9;
java.util.concurrent.ScheduledExecutorService v1;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
v1 := @parameter0: java.util.concurrent.ScheduledExecutorService;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 := @parameter3: long;
v5 := @parameter4: long;
v6 := @parameter5: long;
specialinvoke v0.<io.netty.handler.traffic.AbstractTrafficShapingHandler: void <init>(long,long,long)>(v2, v3, v6);
v7 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.concurrent.ConcurrentMap newConcurrentHashMap()>();
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.ConcurrentMap channelQueues> = v7;
v8 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v8.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong queuesSize> = v8;
v9 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v9.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong cumulativeWrittenBytes> = v9;
v10 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v10.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong cumulativeReadBytes> = v10;
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long maxGlobalWriteSize> = 419430400L;
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long writeChannelLimit> = v4;
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long readChannelLimit> = v5;
virtualinvoke v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: void createGlobalTrafficCounter(java.util.concurrent.ScheduledExecutorService)>(v1);
return;
}
public void <init>(java.util.concurrent.ScheduledExecutorService, long, long, long, long)
{
long v2, v3, v4, v5;
java.util.concurrent.ConcurrentMap v6;
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
java.util.concurrent.atomic.AtomicLong v7, v8, v9;
java.util.concurrent.ScheduledExecutorService v1;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
v1 := @parameter0: java.util.concurrent.ScheduledExecutorService;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 := @parameter3: long;
v5 := @parameter4: long;
specialinvoke v0.<io.netty.handler.traffic.AbstractTrafficShapingHandler: void <init>(long,long)>(v2, v3);
v6 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.concurrent.ConcurrentMap newConcurrentHashMap()>();
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.ConcurrentMap channelQueues> = v6;
v7 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v7.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong queuesSize> = v7;
v8 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v8.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong cumulativeWrittenBytes> = v8;
v9 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v9.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong cumulativeReadBytes> = v9;
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long maxGlobalWriteSize> = 419430400L;
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long writeChannelLimit> = v4;
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long readChannelLimit> = v5;
virtualinvoke v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: void createGlobalTrafficCounter(java.util.concurrent.ScheduledExecutorService)>(v1);
return;
}
public void <init>(java.util.concurrent.ScheduledExecutorService, long)
{
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
java.util.concurrent.atomic.AtomicLong v4, v5, v6;
java.util.concurrent.ScheduledExecutorService v1;
long v2;
java.util.concurrent.ConcurrentMap v3;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
v1 := @parameter0: java.util.concurrent.ScheduledExecutorService;
v2 := @parameter1: long;
specialinvoke v0.<io.netty.handler.traffic.AbstractTrafficShapingHandler: void <init>(long)>(v2);
v3 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.concurrent.ConcurrentMap newConcurrentHashMap()>();
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.ConcurrentMap channelQueues> = v3;
v4 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v4.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong queuesSize> = v4;
v5 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v5.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong cumulativeWrittenBytes> = v5;
v6 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v6.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong cumulativeReadBytes> = v6;
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long maxGlobalWriteSize> = 419430400L;
virtualinvoke v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: void createGlobalTrafficCounter(java.util.concurrent.ScheduledExecutorService)>(v1);
return;
}
public void <init>(java.util.concurrent.ScheduledExecutorService)
{
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
java.util.concurrent.atomic.AtomicLong v3, v4, v5;
java.util.concurrent.ScheduledExecutorService v1;
java.util.concurrent.ConcurrentMap v2;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
v1 := @parameter0: java.util.concurrent.ScheduledExecutorService;
specialinvoke v0.<io.netty.handler.traffic.AbstractTrafficShapingHandler: void <init>()>();
v2 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.concurrent.ConcurrentMap newConcurrentHashMap()>();
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.ConcurrentMap channelQueues> = v2;
v3 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v3.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong queuesSize> = v3;
v4 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v4.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong cumulativeWrittenBytes> = v4;
v5 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v5.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong cumulativeReadBytes> = v5;
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long maxGlobalWriteSize> = 419430400L;
virtualinvoke v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: void createGlobalTrafficCounter(java.util.concurrent.ScheduledExecutorService)>(v1);
return;
}
public float maxDeviation()
{
float v1;
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
v1 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: float maxDeviation>;
return v1;
}
public float accelerationFactor()
{
float v1;
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
v1 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: float accelerationFactor>;
return v1;
}
public float slowDownFactor()
{
float v1;
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
v1 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: float slowDownFactor>;
return v1;
}
public void setMaxDeviation(float, float, float)
{
java.lang.IllegalArgumentException v5, v7;
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
byte v4, v6;
float v1, v2, v3, v8, v9;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
v1 := @parameter0: float;
v2 := @parameter1: float;
v3 := @parameter2: float;
v4 = v1 cmpl 0.4F;
if v4 <= 0 goto label1;
v5 = new java.lang.IllegalArgumentException;
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("maxDeviation must be <= 0.4");
throw v5;
label1:
staticinvoke <io.netty.util.internal.ObjectUtil: float checkPositiveOrZero(float,java.lang.String)>(v2, "slowDownFactor");
v6 = v3 cmpl 0.0F;
if v6 <= 0 goto label2;
v7 = new java.lang.IllegalArgumentException;
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("accelerationFactor must be <= 0");
throw v7;
label2:
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: float maxDeviation> = v1;
v8 = 1.0F + v3;
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: float accelerationFactor> = v8;
v9 = 1.0F + v2;
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: float slowDownFactor> = v9;
return;
}
private void computeDeviationCumulativeBytes()
{
io.netty.handler.traffic.TrafficCounter v10, v14;
long v1, v11, v15, v2, v22, v25, v3, v4;
java.util.concurrent.ConcurrentMap v18, v5;
byte v12, v13, v16, v17, v23, v26;
int v19;
boolean v20, v21, v24, v27, v8;
java.util.Iterator v7;
java.util.Collection v6;
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
java.util.concurrent.atomic.AtomicLong v28, v29;
java.lang.Object v9;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
v1 = 0L;
v2 = 0L;
v3 = 9223372036854775807L;
v4 = 9223372036854775807L;
v5 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.ConcurrentMap channelQueues>;
v6 = interfaceinvoke v5.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();
v7 = interfaceinvoke v6.<java.util.Collection: java.util.Iterator iterator()>();
label01:
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label05;
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
v10 = v9.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: io.netty.handler.traffic.TrafficCounter channelTrafficCounter>;
v11 = virtualinvoke v10.<io.netty.handler.traffic.TrafficCounter: long cumulativeWrittenBytes()>();
v12 = v1 cmp v11;
if v12 >= 0 goto label02;
v1 = v11;
label02:
v13 = v3 cmp v11;
if v13 <= 0 goto label03;
v3 = v11;
label03:
v14 = v9.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: io.netty.handler.traffic.TrafficCounter channelTrafficCounter>;
v15 = virtualinvoke v14.<io.netty.handler.traffic.TrafficCounter: long cumulativeReadBytes()>();
v16 = v2 cmp v15;
if v16 >= 0 goto label04;
v2 = v15;
label04:
v17 = v4 cmp v15;
if v17 <= 0 goto label01;
v4 = v15;
goto label01;
label05:
v18 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.ConcurrentMap channelQueues>;
v19 = interfaceinvoke v18.<java.util.concurrent.ConcurrentMap: int size()>();
if v19 <= 1 goto label06;
v20 = 1;
goto label07;
label06:
v20 = 0;
label07:
v21 = v20;
if v20 == 0 goto label08;
v22 = v2 / 2L;
v23 = v4 cmp v22;
if v23 >= 0 goto label08;
v24 = 1;
goto label09;
label08:
v24 = 0;
label09:
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: boolean readDeviationActive> = v24;
if v21 == 0 goto label10;
v25 = v1 / 2L;
v26 = v3 cmp v25;
if v26 >= 0 goto label10;
v27 = 1;
goto label11;
label10:
v27 = 0;
label11:
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: boolean writeDeviationActive> = v27;
v28 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong cumulativeWrittenBytes>;
virtualinvoke v28.<java.util.concurrent.atomic.AtomicLong: void set(long)>(v1);
v29 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong cumulativeReadBytes>;
virtualinvoke v29.<java.util.concurrent.atomic.AtomicLong: void set(long)>(v2);
return;
}
protected void doAccounting(io.netty.handler.traffic.TrafficCounter)
{
io.netty.handler.traffic.TrafficCounter v1;
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
v1 := @parameter0: io.netty.handler.traffic.TrafficCounter;
specialinvoke v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: void computeDeviationCumulativeBytes()>();
specialinvoke v0.<io.netty.handler.traffic.AbstractTrafficShapingHandler: void doAccounting(io.netty.handler.traffic.TrafficCounter)>(v1);
return;
}
private long computeBalancedWait(float, float, long)
{
long v3;
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
byte v10, v12, v4, v7;
float v1, v11, v13, v2, v5, v6, v8, v9;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
v1 := @parameter0: float;
v2 := @parameter1: float;
v3 := @parameter2: long;
v4 = v2 cmpl 0.0F;
if v4 != 0 goto label1;
return v3;
label1:
v5 = v1 / v2;
v6 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: float maxDeviation>;
v7 = v5 cmpl v6;
if v7 <= 0 goto label3;
v8 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: float maxDeviation>;
v9 = 1.0F - v8;
v10 = v5 cmpg v9;
if v10 >= 0 goto label2;
return v3;
label2:
v11 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: float slowDownFactor>;
v12 = v3 cmp 10L;
if v12 >= 0 goto label4;
v3 = 10L;
goto label4;
label3:
v11 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: float accelerationFactor>;
label4:
v13 = v3 * v11;
return v13;
}
public long getMaxGlobalWriteSize()
{
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
long v1;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
v1 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long maxGlobalWriteSize>;
return v1;
}
public void setMaxGlobalWriteSize(long)
{
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
long v1, v2;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
v1 := @parameter0: long;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: long checkPositive(long,java.lang.String)>(v1, "maxGlobalWriteSize");
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long maxGlobalWriteSize> = v2;
return;
}
public long queuesSize()
{
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
java.util.concurrent.atomic.AtomicLong v1;
long v2;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
v1 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong queuesSize>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: long get()>();
return v2;
}
public void configureChannel(long, long)
{
io.netty.handler.traffic.TrafficCounter v9;
java.util.Iterator v6;
java.util.Collection v5;
long v1, v2, v3;
java.util.concurrent.ConcurrentMap v4;
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
java.lang.Object v8;
boolean v7;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
v1 := @parameter0: long;
v2 := @parameter1: long;
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long writeChannelLimit> = v1;
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long readChannelLimit> = v2;
v3 = staticinvoke <io.netty.handler.traffic.TrafficCounter: long milliSecondFromNano()>();
v4 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.ConcurrentMap channelQueues>;
v5 = interfaceinvoke v4.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();
v6 = interfaceinvoke v5.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label2;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = v8.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: io.netty.handler.traffic.TrafficCounter channelTrafficCounter>;
virtualinvoke v9.<io.netty.handler.traffic.TrafficCounter: void resetAccounting(long)>(v3);
goto label1;
label2:
return;
}
public long getWriteChannelLimit()
{
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
long v1;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
v1 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long writeChannelLimit>;
return v1;
}
public void setWriteChannelLimit(long)
{
io.netty.handler.traffic.TrafficCounter v8;
java.util.Iterator v5;
java.util.Collection v4;
long v1, v2;
java.util.concurrent.ConcurrentMap v3;
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
java.lang.Object v7;
boolean v6;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
v1 := @parameter0: long;
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long writeChannelLimit> = v1;
v2 = staticinvoke <io.netty.handler.traffic.TrafficCounter: long milliSecondFromNano()>();
v3 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.ConcurrentMap channelQueues>;
v4 = interfaceinvoke v3.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();
v5 = interfaceinvoke v4.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label2;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = v7.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: io.netty.handler.traffic.TrafficCounter channelTrafficCounter>;
virtualinvoke v8.<io.netty.handler.traffic.TrafficCounter: void resetAccounting(long)>(v2);
goto label1;
label2:
return;
}
public long getReadChannelLimit()
{
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
long v1;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
v1 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long readChannelLimit>;
return v1;
}
public void setReadChannelLimit(long)
{
io.netty.handler.traffic.TrafficCounter v8;
java.util.Iterator v5;
java.util.Collection v4;
long v1, v2;
java.util.concurrent.ConcurrentMap v3;
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
java.lang.Object v7;
boolean v6;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
v1 := @parameter0: long;
v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long readChannelLimit> = v1;
v2 = staticinvoke <io.netty.handler.traffic.TrafficCounter: long milliSecondFromNano()>();
v3 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.ConcurrentMap channelQueues>;
v4 = interfaceinvoke v3.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();
v5 = interfaceinvoke v4.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label2;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = v7.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: io.netty.handler.traffic.TrafficCounter channelTrafficCounter>;
virtualinvoke v8.<io.netty.handler.traffic.TrafficCounter: void resetAccounting(long)>(v2);
goto label1;
label2:
return;
}
public final void release()
{
io.netty.handler.traffic.TrafficCounter v1;
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
v1 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: io.netty.handler.traffic.TrafficCounter trafficCounter>;
virtualinvoke v1.<io.netty.handler.traffic.TrafficCounter: void stop()>();
return;
}
private io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel getOrSetPerChannel(io.netty.channel.ChannelHandlerContext)
{
io.netty.handler.traffic.TrafficCounter v9;
long v13, v14, v15;
java.lang.Integer v4;
java.util.concurrent.ConcurrentMap v16, v5;
io.netty.channel.ChannelHandlerContext v1;
int v11, v3;
java.lang.String v12;
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel v7;
io.netty.channel.Channel v10, v2;
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
java.lang.Object v6;
java.util.ArrayDeque v8;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v3 = virtualinvoke v2.<java.lang.Object: int hashCode()>();
v4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v3);
v5 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.ConcurrentMap channelQueues>;
v6 = interfaceinvoke v5.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v4);
if v6 != null goto label1;
v7 = new io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel;
specialinvoke v7.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: void <init>()>();
v6 = v7;
v8 = new java.util.ArrayDeque;
specialinvoke v8.<java.util.ArrayDeque: void <init>()>();
v7.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: java.util.ArrayDeque messagesQueue> = v8;
v9 = new io.netty.handler.traffic.TrafficCounter;
v10 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v11 = virtualinvoke v10.<java.lang.Object: int hashCode()>();
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("ChannelTC\u0001");
v13 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long checkInterval>;
specialinvoke v9.<io.netty.handler.traffic.TrafficCounter: void <init>(io.netty.handler.traffic.AbstractTrafficShapingHandler,java.util.concurrent.ScheduledExecutorService,java.lang.String,long)>(v0, null, v12, v13);
v7.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: io.netty.handler.traffic.TrafficCounter channelTrafficCounter> = v9;
v7.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: long queueSize> = 0L;
v14 = staticinvoke <io.netty.handler.traffic.TrafficCounter: long milliSecondFromNano()>();
v7.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: long lastReadTimestamp> = v14;
v15 = v7.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: long lastReadTimestamp>;
v7.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: long lastWriteTimestamp> = v15;
v16 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.ConcurrentMap channelQueues>;
interfaceinvoke v16.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v4, v7);
label1:
return v6;
}
public void handlerAdded(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.handler.traffic.TrafficCounter v2;
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
specialinvoke v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel getOrSetPerChannel(io.netty.channel.ChannelHandlerContext)>(v1);
v2 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: io.netty.handler.traffic.TrafficCounter trafficCounter>;
virtualinvoke v2.<io.netty.handler.traffic.TrafficCounter: void resetCumulativeTime()>();
specialinvoke v0.<io.netty.handler.traffic.AbstractTrafficShapingHandler: void handlerAdded(io.netty.channel.ChannelHandlerContext)>(v1);
return;
}
public void handlerRemoved(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.handler.traffic.TrafficCounter v15, v16, v2;
java.lang.Integer v5;
io.netty.channel.ChannelPromise v22;
boolean v11, v28, v31, v8;
java.lang.Throwable v34;
long v14, v17, v18, v20, v24, v25;
java.util.concurrent.ConcurrentMap v6;
io.netty.channel.ChannelHandlerContext v1;
int v4;
java.util.Iterator v10, v27;
io.netty.channel.Channel v3;
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
java.util.concurrent.atomic.AtomicLong v19, v23;
java.lang.Object v12, v13, v21, v29, v30, v32, v7;
java.util.ArrayDeque v26, v33, v9;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: io.netty.handler.traffic.TrafficCounter trafficCounter>;
virtualinvoke v2.<io.netty.handler.traffic.TrafficCounter: void resetCumulativeTime()>();
v3 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v4 = virtualinvoke v3.<java.lang.Object: int hashCode()>();
v5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v4);
v6 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.ConcurrentMap channelQueues>;
v7 = interfaceinvoke v6.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(v5);
if v7 == null goto label8;
entermonitor v7;
label1:
v8 = interfaceinvoke v3.<io.netty.channel.Channel: boolean isActive()>();
if v8 == 0 goto label3;
v9 = v7.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: java.util.ArrayDeque messagesQueue>;
v10 = virtualinvoke v9.<java.util.ArrayDeque: java.util.Iterator iterator()>();
label2:
v11 = interfaceinvoke v10.<java.util.Iterator: boolean hasNext()>();
if v11 == 0 goto label5;
v12 = interfaceinvoke v10.<java.util.Iterator: java.lang.Object next()>();
v13 = v12.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$ToSend: java.lang.Object toSend>;
v14 = virtualinvoke v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long calculateSize(java.lang.Object)>(v13);
v15 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: io.netty.handler.traffic.TrafficCounter trafficCounter>;
virtualinvoke v15.<io.netty.handler.traffic.TrafficCounter: void bytesRealWriteFlowControl(long)>(v14);
v16 = v7.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: io.netty.handler.traffic.TrafficCounter channelTrafficCounter>;
virtualinvoke v16.<io.netty.handler.traffic.TrafficCounter: void bytesRealWriteFlowControl(long)>(v14);
v17 = v7.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: long queueSize>;
v18 = v17 - v14;
v7.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: long queueSize> = v18;
v19 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong queuesSize>;
v20 = neg v14;
virtualinvoke v19.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(v20);
v21 = v12.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$ToSend: java.lang.Object toSend>;
v22 = v12.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$ToSend: io.netty.channel.ChannelPromise promise>;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)>(v21, v22);
goto label2;
label3:
v23 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong queuesSize>;
v24 = v7.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: long queueSize>;
v25 = neg v24;
virtualinvoke v23.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(v25);
v26 = v7.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: java.util.ArrayDeque messagesQueue>;
v27 = virtualinvoke v26.<java.util.ArrayDeque: java.util.Iterator iterator()>();
label4:
v28 = interfaceinvoke v27.<java.util.Iterator: boolean hasNext()>();
if v28 == 0 goto label5;
v29 = interfaceinvoke v27.<java.util.Iterator: java.lang.Object next()>();
v30 = v29.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$ToSend: java.lang.Object toSend>;
v31 = v30 instanceof io.netty.buffer.ByteBuf;
if v31 == 0 goto label4;
v32 = v29.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$ToSend: java.lang.Object toSend>;
virtualinvoke v32.<io.netty.buffer.ByteBuf: boolean release()>();
goto label4;
label5:
v33 = v7.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: java.util.ArrayDeque messagesQueue>;
virtualinvoke v33.<java.util.ArrayDeque: void clear()>();
exitmonitor v7;
label6:
goto label8;
label7:
v34 := @caughtexception;
exitmonitor v7;
throw v34;
label8:
virtualinvoke v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: void releaseWriteSuspended(io.netty.channel.ChannelHandlerContext)>(v1);
virtualinvoke v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: void releaseReadSuspended(io.netty.channel.ChannelHandlerContext)>(v1);
specialinvoke v0.<io.netty.handler.traffic.AbstractTrafficShapingHandler: void handlerRemoved(io.netty.channel.ChannelHandlerContext)>(v1);
return;
catch java.lang.Throwable from label1 to label6 with label7;
}
public void channelRead(io.netty.channel.ChannelHandlerContext, java.lang.Object) throws java.lang.Exception
{
io.netty.handler.traffic.TrafficCounter v16, v20, v6;
io.netty.util.AttributeKey v39, v42;
java.lang.Integer v12;
byte v24, v25, v26, v28, v5;
io.netty.handler.traffic.AbstractTrafficShapingHandler$ReopenReadTimerTask v45;
boolean v19, v32, v34, v35, v37, v38, v49, v51, v52;
io.netty.util.internal.logging.InternalLogger v31, v33, v48, v50;
io.netty.util.concurrent.EventExecutor v46;
long v15, v17, v18, v21, v23, v27, v3, v4, v7, v8, v9;
java.util.concurrent.ConcurrentMap v13;
io.netty.channel.ChannelHandlerContext v1;
int v11;
java.lang.Boolean v41;
java.lang.String v36, v53;
io.netty.util.Attribute v40, v43;
io.netty.channel.Channel v10, v29;
java.util.concurrent.TimeUnit v47;
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
java.util.concurrent.atomic.AtomicLong v22;
io.netty.channel.ChannelConfig v30;
java.lang.Object v14, v2, v44;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 = virtualinvoke v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long calculateSize(java.lang.Object)>(v2);
v4 = staticinvoke <io.netty.handler.traffic.TrafficCounter: long milliSecondFromNano()>();
v5 = v3 cmp 0L;
if v5 <= 0 goto label7;
v6 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: io.netty.handler.traffic.TrafficCounter trafficCounter>;
v7 = virtualinvoke v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long getReadLimit()>();
v8 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long maxTime>;
v9 = virtualinvoke v6.<io.netty.handler.traffic.TrafficCounter: long readTimeToWait(long,long,long,long)>(v3, v7, v8, v4);
v10 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v11 = virtualinvoke v10.<java.lang.Object: int hashCode()>();
v12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v11);
v13 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.ConcurrentMap channelQueues>;
v14 = interfaceinvoke v13.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v12);
v15 = 0L;
if v14 == null goto label3;
v16 = v14.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: io.netty.handler.traffic.TrafficCounter channelTrafficCounter>;
v17 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long readChannelLimit>;
v18 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long maxTime>;
v15 = virtualinvoke v16.<io.netty.handler.traffic.TrafficCounter: long readTimeToWait(long,long,long,long)>(v3, v17, v18, v4);
v19 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: boolean readDeviationActive>;
if v19 == 0 goto label3;
v20 = v14.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: io.netty.handler.traffic.TrafficCounter channelTrafficCounter>;
v21 = virtualinvoke v20.<io.netty.handler.traffic.TrafficCounter: long cumulativeReadBytes()>();
v22 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong cumulativeReadBytes>;
v23 = virtualinvoke v22.<java.util.concurrent.atomic.AtomicLong: long get()>();
v24 = v21 cmp 0L;
if v24 > 0 goto label1;
v21 = 0L;
label1:
v25 = v23 cmp v21;
if v25 >= 0 goto label2;
v23 = v21;
label2:
v15 = specialinvoke v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long computeBalancedWait(float,float,long)>(v21, v23, v15);
label3:
v26 = v15 cmp v9;
if v26 >= 0 goto label4;
v15 = v9;
label4:
v27 = virtualinvoke v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long checkWaitReadTime(io.netty.channel.ChannelHandlerContext,long,long)>(v1, v15, v4);
v28 = v27 cmp 10L;
if v28 < 0 goto label7;
v29 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v30 = interfaceinvoke v29.<io.netty.channel.Channel: io.netty.channel.ChannelConfig config()>();
v31 = <io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: io.netty.util.internal.logging.InternalLogger logger>;
v32 = interfaceinvoke v31.<io.netty.util.internal.logging.InternalLogger: boolean isDebugEnabled()>();
if v32 == 0 goto label5;
v33 = <io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: io.netty.util.internal.logging.InternalLogger logger>;
v34 = interfaceinvoke v30.<io.netty.channel.ChannelConfig: boolean isAutoRead()>();
v35 = staticinvoke <io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: boolean isHandlerActive(io.netty.channel.ChannelHandlerContext)>(v1);
v36 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long,boolean,boolean)>(v27, v34, v35) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Read Suspend: \u0001:\u0001:\u0001");
interfaceinvoke v33.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String)>(v36);
label5:
v37 = interfaceinvoke v30.<io.netty.channel.ChannelConfig: boolean isAutoRead()>();
if v37 == 0 goto label7;
v38 = staticinvoke <io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: boolean isHandlerActive(io.netty.channel.ChannelHandlerContext)>(v1);
if v38 == 0 goto label7;
interfaceinvoke v30.<io.netty.channel.ChannelConfig: io.netty.channel.ChannelConfig setAutoRead(boolean)>(0);
v39 = <io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: io.netty.util.AttributeKey READ_SUSPENDED>;
v40 = interfaceinvoke v29.<io.netty.channel.Channel: io.netty.util.Attribute attr(io.netty.util.AttributeKey)>(v39);
v41 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);
interfaceinvoke v40.<io.netty.util.Attribute: void set(java.lang.Object)>(v41);
v42 = <io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: io.netty.util.AttributeKey REOPEN_TASK>;
v43 = interfaceinvoke v29.<io.netty.channel.Channel: io.netty.util.Attribute attr(io.netty.util.AttributeKey)>(v42);
v44 = interfaceinvoke v43.<io.netty.util.Attribute: java.lang.Object get()>();
if v44 != null goto label6;
v45 = new io.netty.handler.traffic.AbstractTrafficShapingHandler$ReopenReadTimerTask;
specialinvoke v45.<io.netty.handler.traffic.AbstractTrafficShapingHandler$ReopenReadTimerTask: void <init>(io.netty.channel.ChannelHandlerContext)>(v1);
v44 = v45;
interfaceinvoke v43.<io.netty.util.Attribute: void set(java.lang.Object)>(v45);
label6:
v46 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v47 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
interfaceinvoke v46.<io.netty.util.concurrent.EventExecutor: io.netty.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(v44, v27, v47);
v48 = <io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: io.netty.util.internal.logging.InternalLogger logger>;
v49 = interfaceinvoke v48.<io.netty.util.internal.logging.InternalLogger: boolean isDebugEnabled()>();
if v49 == 0 goto label7;
v50 = <io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: io.netty.util.internal.logging.InternalLogger logger>;
v51 = interfaceinvoke v30.<io.netty.channel.ChannelConfig: boolean isAutoRead()>();
v52 = staticinvoke <io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: boolean isHandlerActive(io.netty.channel.ChannelHandlerContext)>(v1);
v53 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (boolean,boolean,long)>(v51, v52, v27) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Suspend final status => \u0001:\u0001 will reopened at: \u0001");
interfaceinvoke v50.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String)>(v53);
label7:
virtualinvoke v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: void informReadOperation(io.netty.channel.ChannelHandlerContext,long)>(v1, v4);
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireChannelRead(java.lang.Object)>(v2);
return;
}
protected long checkWaitReadTime(io.netty.channel.ChannelHandlerContext, long, long)
{
long v11, v12, v13, v14, v2, v3, v9;
java.lang.Integer v6;
java.util.concurrent.ConcurrentMap v7;
io.netty.channel.ChannelHandlerContext v1;
byte v10, v15;
int v5;
io.netty.channel.Channel v4;
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
java.lang.Object v8;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v5 = virtualinvoke v4.<java.lang.Object: int hashCode()>();
v6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v5);
v7 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.ConcurrentMap channelQueues>;
v8 = interfaceinvoke v7.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v6);
if v8 == null goto label1;
v9 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long maxTime>;
v10 = v2 cmp v9;
if v10 <= 0 goto label1;
v11 = v3 + v2;
v12 = v8.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: long lastReadTimestamp>;
v13 = v11 - v12;
v14 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long maxTime>;
v15 = v13 cmp v14;
if v15 <= 0 goto label1;
v2 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long maxTime>;
label1:
return v2;
}
protected void informReadOperation(io.netty.channel.ChannelHandlerContext, long)
{
long v2;
java.lang.Integer v5;
java.util.concurrent.ConcurrentMap v6;
io.netty.channel.Channel v3;
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
int v4;
java.lang.Object v7;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: long;
v3 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v4 = virtualinvoke v3.<java.lang.Object: int hashCode()>();
v5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v4);
v6 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.ConcurrentMap channelQueues>;
v7 = interfaceinvoke v6.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v5);
if v7 == null goto label1;
v7.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: long lastReadTimestamp> = v2;
label1:
return;
}
protected long maximumCumulativeWrittenBytes()
{
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
java.util.concurrent.atomic.AtomicLong v1;
long v2;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
v1 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong cumulativeWrittenBytes>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: long get()>();
return v2;
}
protected long maximumCumulativeReadBytes()
{
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
java.util.concurrent.atomic.AtomicLong v1;
long v2;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
v1 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong cumulativeReadBytes>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: long get()>();
return v2;
}
public java.util.Collection channelTrafficCounters()
{
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$1 v1;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
v1 = new io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$1;
specialinvoke v1.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$1: void <init>(io.netty.handler.traffic.GlobalChannelTrafficShapingHandler)>(v0);
return v1;
}
public void write(io.netty.channel.ChannelHandlerContext, java.lang.Object, io.netty.channel.ChannelPromise) throws java.lang.Exception
{
io.netty.handler.traffic.TrafficCounter v17, v21, v7;
java.lang.Integer v13;
byte v25, v26, v27, v28, v6;
io.netty.channel.ChannelPromise v3;
boolean v20, v30, v34, v35;
io.netty.util.internal.logging.InternalLogger v29, v31;
long v10, v16, v18, v19, v22, v24, v4, v5, v8, v9;
java.util.concurrent.ConcurrentMap v14;
io.netty.channel.ChannelHandlerContext v1;
int v12;
java.lang.String v36;
io.netty.channel.Channel v11, v32;
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
java.util.concurrent.atomic.AtomicLong v23;
io.netty.channel.ChannelConfig v33;
java.lang.Object v15, v2;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: io.netty.channel.ChannelPromise;
v4 = virtualinvoke v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long calculateSize(java.lang.Object)>(v2);
v5 = staticinvoke <io.netty.handler.traffic.TrafficCounter: long milliSecondFromNano()>();
v6 = v4 cmp 0L;
if v6 <= 0 goto label6;
v7 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: io.netty.handler.traffic.TrafficCounter trafficCounter>;
v8 = virtualinvoke v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long getWriteLimit()>();
v9 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long maxTime>;
v10 = virtualinvoke v7.<io.netty.handler.traffic.TrafficCounter: long writeTimeToWait(long,long,long,long)>(v4, v8, v9, v5);
v11 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v12 = virtualinvoke v11.<java.lang.Object: int hashCode()>();
v13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v12);
v14 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.ConcurrentMap channelQueues>;
v15 = interfaceinvoke v14.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v13);
v16 = 0L;
if v15 == null goto label3;
v17 = v15.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: io.netty.handler.traffic.TrafficCounter channelTrafficCounter>;
v18 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long writeChannelLimit>;
v19 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long maxTime>;
v16 = virtualinvoke v17.<io.netty.handler.traffic.TrafficCounter: long writeTimeToWait(long,long,long,long)>(v4, v18, v19, v5);
v20 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: boolean writeDeviationActive>;
if v20 == 0 goto label3;
v21 = v15.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: io.netty.handler.traffic.TrafficCounter channelTrafficCounter>;
v22 = virtualinvoke v21.<io.netty.handler.traffic.TrafficCounter: long cumulativeWrittenBytes()>();
v23 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong cumulativeWrittenBytes>;
v24 = virtualinvoke v23.<java.util.concurrent.atomic.AtomicLong: long get()>();
v25 = v22 cmp 0L;
if v25 > 0 goto label1;
v22 = 0L;
label1:
v26 = v24 cmp v22;
if v26 >= 0 goto label2;
v24 = v22;
label2:
v16 = specialinvoke v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long computeBalancedWait(float,float,long)>(v22, v24, v16);
label3:
v27 = v16 cmp v10;
if v27 >= 0 goto label4;
v16 = v10;
label4:
v28 = v16 cmp 10L;
if v28 < 0 goto label6;
v29 = <io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: io.netty.util.internal.logging.InternalLogger logger>;
v30 = interfaceinvoke v29.<io.netty.util.internal.logging.InternalLogger: boolean isDebugEnabled()>();
if v30 == 0 goto label5;
v31 = <io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: io.netty.util.internal.logging.InternalLogger logger>;
v32 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v33 = interfaceinvoke v32.<io.netty.channel.Channel: io.netty.channel.ChannelConfig config()>();
v34 = interfaceinvoke v33.<io.netty.channel.ChannelConfig: boolean isAutoRead()>();
v35 = staticinvoke <io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: boolean isHandlerActive(io.netty.channel.ChannelHandlerContext)>(v1);
v36 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long,boolean,boolean)>(v16, v34, v35) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Write suspend: \u0001:\u0001:\u0001");
interfaceinvoke v31.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String)>(v36);
label5:
virtualinvoke v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: void submitWrite(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,long,long,io.netty.channel.ChannelPromise)>(v1, v2, v4, v16, v5, v3);
return;
label6:
virtualinvoke v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: void submitWrite(io.netty.channel.ChannelHandlerContext,java.lang.Object,long,long,long,io.netty.channel.ChannelPromise)>(v1, v2, v4, 0L, v5, v3);
return;
}
protected void submitWrite(io.netty.channel.ChannelHandlerContext, java.lang.Object, long, long, long, io.netty.channel.ChannelPromise)
{
io.netty.handler.traffic.TrafficCounter v18, v19;
java.lang.Integer v9;
byte v15, v21, v26, v37;
io.netty.channel.ChannelPromise v6;
boolean v13, v17;
io.netty.util.concurrent.EventExecutor v40;
java.lang.Throwable v38;
long v12, v20, v22, v23, v24, v25, v28, v3, v30, v31, v33, v35, v36, v39, v4, v5;
java.util.concurrent.ConcurrentMap v10;
io.netty.channel.ChannelHandlerContext v1;
int v8;
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$2 v41;
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel v14;
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$ToSend v27;
io.netty.channel.Channel v7;
java.util.concurrent.TimeUnit v42;
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
java.util.concurrent.atomic.AtomicLong v32, v34;
java.lang.Object v11, v2;
java.util.ArrayDeque v16, v29;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: long;
v4 := @parameter3: long;
v5 := @parameter4: long;
v6 := @parameter5: io.netty.channel.ChannelPromise;
v7 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
v8 = virtualinvoke v7.<java.lang.Object: int hashCode()>();
v9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v8);
v10 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.ConcurrentMap channelQueues>;
v11 = interfaceinvoke v10.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v9);
if v11 != null goto label01;
v11 = specialinvoke v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel getOrSetPerChannel(io.netty.channel.ChannelHandlerContext)>(v1);
label01:
v12 = v4;
v13 = 0;
v14 = v11;
entermonitor v11;
label02:
v15 = v4 cmp 0L;
if v15 != 0 goto label04;
v16 = v11.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: java.util.ArrayDeque messagesQueue>;
v17 = virtualinvoke v16.<java.util.ArrayDeque: boolean isEmpty()>();
if v17 == 0 goto label04;
v18 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: io.netty.handler.traffic.TrafficCounter trafficCounter>;
virtualinvoke v18.<io.netty.handler.traffic.TrafficCounter: void bytesRealWriteFlowControl(long)>(v3);
v19 = v11.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: io.netty.handler.traffic.TrafficCounter channelTrafficCounter>;
virtualinvoke v19.<io.netty.handler.traffic.TrafficCounter: void bytesRealWriteFlowControl(long)>(v3);
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)>(v2, v6);
v11.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: long lastWriteTimestamp> = v5;
exitmonitor v11;
label03:
return;
label04:
v20 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long maxTime>;
v21 = v4 cmp v20;
if v21 <= 0 goto label05;
v22 = v5 + v4;
v23 = v11.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: long lastWriteTimestamp>;
v24 = v22 - v23;
v25 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long maxTime>;
v26 = v24 cmp v25;
if v26 <= 0 goto label05;
v12 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long maxTime>;
label05:
v27 = new io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$ToSend;
v28 = v12 + v5;
specialinvoke v27.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$ToSend: void <init>(long,java.lang.Object,long,io.netty.channel.ChannelPromise)>(v28, v2, v3, v6);
v29 = v11.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: java.util.ArrayDeque messagesQueue>;
virtualinvoke v29.<java.util.ArrayDeque: void addLast(java.lang.Object)>(v27);
v30 = v11.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: long queueSize>;
v31 = v30 + v3;
v11.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: long queueSize> = v31;
v32 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong queuesSize>;
virtualinvoke v32.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(v3);
v33 = v11.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: long queueSize>;
virtualinvoke v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: void checkWriteSuspend(io.netty.channel.ChannelHandlerContext,long,long)>(v1, v12, v33);
v34 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong queuesSize>;
v35 = virtualinvoke v34.<java.util.concurrent.atomic.AtomicLong: long get()>();
v36 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long maxGlobalWriteSize>;
v37 = v35 cmp v36;
if v37 <= 0 goto label06;
v13 = 1;
label06:
exitmonitor v14;
label07:
goto label09;
label08:
v38 := @caughtexception;
exitmonitor v14;
throw v38;
label09:
if v13 == 0 goto label10;
virtualinvoke v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: void setUserDefinedWritability(io.netty.channel.ChannelHandlerContext,boolean)>(v1, 0);
label10:
v39 = v27.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$ToSend: long relativeTimeAction>;
v40 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v41 = new io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$2;
specialinvoke v41.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$2: void <init>(io.netty.handler.traffic.GlobalChannelTrafficShapingHandler,io.netty.channel.ChannelHandlerContext,io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel,long)>(v0, v1, v11, v39);
v42 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
interfaceinvoke v40.<io.netty.util.concurrent.EventExecutor: io.netty.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(v41, v12, v42);
return;
catch java.lang.Throwable from label02 to label03 with label08;
catch java.lang.Throwable from label04 to label07 with label08;
}
private void sendAllValid(io.netty.channel.ChannelHandlerContext, io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel, long)
{
io.netty.handler.traffic.TrafficCounter v10, v9;
java.lang.Throwable v21;
long v11, v12, v14, v3, v6, v8;
io.netty.channel.ChannelHandlerContext v1;
byte v7;
io.netty.channel.ChannelPromise v16;
boolean v20;
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel v2;
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
java.util.concurrent.atomic.AtomicLong v13;
java.lang.Object v15, v5;
java.util.ArrayDeque v17, v18, v19, v4;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel;
v3 := @parameter2: long;
entermonitor v2;
label1:
v4 = v2.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: java.util.ArrayDeque messagesQueue>;
v5 = virtualinvoke v4.<java.util.ArrayDeque: java.lang.Object pollFirst()>();
label2:
if v5 == null goto label5;
v6 = v5.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$ToSend: long relativeTimeAction>;
v7 = v6 cmp v3;
if v7 > 0 goto label3;
v8 = v5.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$ToSend: long size>;
v9 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: io.netty.handler.traffic.TrafficCounter trafficCounter>;
virtualinvoke v9.<io.netty.handler.traffic.TrafficCounter: void bytesRealWriteFlowControl(long)>(v8);
v10 = v2.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: io.netty.handler.traffic.TrafficCounter channelTrafficCounter>;
virtualinvoke v10.<io.netty.handler.traffic.TrafficCounter: void bytesRealWriteFlowControl(long)>(v8);
v11 = v2.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: long queueSize>;
v12 = v11 - v8;
v2.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: long queueSize> = v12;
v13 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: java.util.concurrent.atomic.AtomicLong queuesSize>;
v14 = neg v8;
virtualinvoke v13.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(v14);
v15 = v5.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$ToSend: java.lang.Object toSend>;
v16 = v5.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$ToSend: io.netty.channel.ChannelPromise promise>;
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture write(java.lang.Object,io.netty.channel.ChannelPromise)>(v15, v16);
v2.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: long lastWriteTimestamp> = v3;
goto label4;
label3:
v17 = v2.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: java.util.ArrayDeque messagesQueue>;
virtualinvoke v17.<java.util.ArrayDeque: void addFirst(java.lang.Object)>(v5);
goto label5;
label4:
v18 = v2.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: java.util.ArrayDeque messagesQueue>;
virtualinvoke v18.<java.util.ArrayDeque: java.lang.Object pollFirst()>();
goto label2;
label5:
v19 = v2.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler$PerChannel: java.util.ArrayDeque messagesQueue>;
v20 = virtualinvoke v19.<java.util.ArrayDeque: boolean isEmpty()>();
if v20 == 0 goto label6;
virtualinvoke v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: void releaseWriteSuspended(io.netty.channel.ChannelHandlerContext)>(v1);
label6:
exitmonitor v2;
label7:
goto label9;
label8:
v21 := @caughtexception;
exitmonitor v2;
throw v21;
label9:
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext flush()>();
return;
catch java.lang.Throwable from label1 to label7 with label8;
}
public java.lang.String toString()
{
io.netty.handler.traffic.GlobalChannelTrafficShapingHandler v0;
java.lang.StringBuilder v5;
long v2, v3;
java.lang.String v1, v4;
v0 := @this: io.netty.handler.traffic.GlobalChannelTrafficShapingHandler;
specialinvoke v5.<java.lang.StringBuilder: void <init>(int)>(340);
v1 = specialinvoke v0.<io.netty.handler.traffic.AbstractTrafficShapingHandler: java.lang.String toString()>();
v2 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long writeChannelLimit>;
v3 = v0.<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: long readChannelLimit>;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,long,long)>(v1, v2, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 Write Channel Limit: \u0001 Read Channel Limit: \u0001");
return v4;
}
static void <clinit>()
{
io.netty.util.internal.logging.InternalLogger v0;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/handler/traffic/GlobalChannelTrafficShapingHandler;");
<io.netty.handler.traffic.GlobalChannelTrafficShapingHandler: io.netty.util.internal.logging.InternalLogger logger> = v0;
return;
}
}