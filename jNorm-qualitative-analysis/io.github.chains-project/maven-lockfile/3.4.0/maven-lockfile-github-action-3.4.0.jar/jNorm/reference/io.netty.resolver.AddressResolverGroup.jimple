public abstract class io.netty.resolver.AddressResolverGroup extends java.lang.Object implements java.io.Closeable
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private final java.util.Map resolvers;
private final java.util.Map executorTerminationListeners;
protected void <init>()
{
io.netty.resolver.AddressResolverGroup v0;
java.util.IdentityHashMap v1, v2;
v0 := @this: io.netty.resolver.AddressResolverGroup;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.IdentityHashMap;
specialinvoke v1.<java.util.IdentityHashMap: void <init>()>();
v0.<io.netty.resolver.AddressResolverGroup: java.util.Map resolvers> = v1;
v2 = new java.util.IdentityHashMap;
specialinvoke v2.<java.util.IdentityHashMap: void <init>()>();
v0.<io.netty.resolver.AddressResolverGroup: java.util.Map executorTerminationListeners> = v2;
return;
}
public io.netty.resolver.AddressResolver getResolver(io.netty.util.concurrent.EventExecutor)
{
io.netty.util.concurrent.EventExecutor v1;
java.lang.Throwable v14;
io.netty.resolver.AddressResolver v7;
java.lang.IllegalStateException v3, v9;
java.lang.Exception v8;
io.netty.resolver.AddressResolverGroup v0;
java.util.Map v10, v12, v4, v5;
java.lang.Object v6;
io.netty.util.concurrent.Future v13;
io.netty.resolver.AddressResolverGroup$1 v11;
boolean v2;
v0 := @this: io.netty.resolver.AddressResolverGroup;
v1 := @parameter0: io.netty.util.concurrent.EventExecutor;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "executor");
v2 = interfaceinvoke v1.<io.netty.util.concurrent.EventExecutor: boolean isShuttingDown()>();
if v2 == 0 goto label01;
v3 = new java.lang.IllegalStateException;
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("executor not accepting a task");
throw v3;
label01:
v4 = v0.<io.netty.resolver.AddressResolverGroup: java.util.Map resolvers>;
entermonitor v4;
label02:
v5 = v0.<io.netty.resolver.AddressResolverGroup: java.util.Map resolvers>;
v6 = interfaceinvoke v5.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v6 != null goto label07;
label03:
v7 = virtualinvoke v0.<io.netty.resolver.AddressResolverGroup: io.netty.resolver.AddressResolver newResolver(io.netty.util.concurrent.EventExecutor)>(v1);
label04:
goto label06;
label05:
v8 := @caughtexception;
v9 = new java.lang.IllegalStateException;
specialinvoke v9.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("failed to create a new resolver", v8);
throw v9;
label06:
v10 = v0.<io.netty.resolver.AddressResolverGroup: java.util.Map resolvers>;
interfaceinvoke v10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v7);
v11 = new io.netty.resolver.AddressResolverGroup$1;
specialinvoke v11.<io.netty.resolver.AddressResolverGroup$1: void <init>(io.netty.resolver.AddressResolverGroup,io.netty.util.concurrent.EventExecutor,io.netty.resolver.AddressResolver)>(v0, v1, v7);
v12 = v0.<io.netty.resolver.AddressResolverGroup: java.util.Map executorTerminationListeners>;
interfaceinvoke v12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v11);
v13 = interfaceinvoke v1.<io.netty.util.concurrent.EventExecutor: io.netty.util.concurrent.Future terminationFuture()>();
interfaceinvoke v13.<io.netty.util.concurrent.Future: io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)>(v11);
v6 = v7;
label07:
exitmonitor v4;
label08:
goto label10;
label09:
v14 := @caughtexception;
exitmonitor v4;
throw v14;
label10:
return v6;
catch java.lang.Exception from label03 to label04 with label05;
catch java.lang.Throwable from label02 to label08 with label09;
}
protected abstract io.netty.resolver.AddressResolver newResolver(io.netty.util.concurrent.EventExecutor) throws java.lang.Exception;
public void close()
{
java.lang.Throwable v12;
java.lang.Object[] v10, v5;
io.netty.resolver.AddressResolver[] v4;
java.util.Map v1, v11, v2, v6, v7;
int v13, v14, v19, v20;
java.util.Map$Entry[] v9;
io.netty.resolver.AddressResolver v21;
java.util.Map$Entry v15;
java.util.Collection v3;
java.util.Set v8;
io.netty.resolver.AddressResolverGroup v0;
java.lang.Object v16, v18;
io.netty.util.concurrent.Future v17;
v0 := @this: io.netty.resolver.AddressResolverGroup;
v1 = v0.<io.netty.resolver.AddressResolverGroup: java.util.Map resolvers>;
entermonitor v1;
label1:
v2 = v0.<io.netty.resolver.AddressResolverGroup: java.util.Map resolvers>;
v3 = interfaceinvoke v2.<java.util.Map: java.util.Collection values()>();
v4 = newarray (io.netty.resolver.AddressResolver)[0];
v5 = interfaceinvoke v3.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(v4);
v6 = v0.<io.netty.resolver.AddressResolverGroup: java.util.Map resolvers>;
interfaceinvoke v6.<java.util.Map: void clear()>();
v7 = v0.<io.netty.resolver.AddressResolverGroup: java.util.Map executorTerminationListeners>;
v8 = interfaceinvoke v7.<java.util.Map: java.util.Set entrySet()>();
v9 = newarray (java.util.Map$Entry)[0];
v10 = interfaceinvoke v8.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(v9);
v11 = v0.<io.netty.resolver.AddressResolverGroup: java.util.Map executorTerminationListeners>;
interfaceinvoke v11.<java.util.Map: void clear()>();
exitmonitor v1;
label2:
goto label4;
label3:
v12 := @caughtexception;
exitmonitor v1;
throw v12;
label4:
v13 = lengthof v10;
v14 = 0;
label5:
if v14 >= v13 goto label6;
v15 = v10[v14];
v16 = interfaceinvoke v15.<java.util.Map$Entry: java.lang.Object getKey()>();
v17 = interfaceinvoke v16.<io.netty.util.concurrent.EventExecutor: io.netty.util.concurrent.Future terminationFuture()>();
v18 = interfaceinvoke v15.<java.util.Map$Entry: java.lang.Object getValue()>();
interfaceinvoke v17.<io.netty.util.concurrent.Future: io.netty.util.concurrent.Future removeListener(io.netty.util.concurrent.GenericFutureListener)>(v18);
v14 = v14 + 1;
goto label5;
label6:
v19 = lengthof v5;
v20 = 0;
label7:
if v20 >= v19 goto label8;
v21 = v5[v20];
v20 = v20 + 1;
goto label7;
label8:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
static void <clinit>()
{
io.netty.util.internal.logging.InternalLogger v0;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/resolver/AddressResolverGroup;");
<io.netty.resolver.AddressResolverGroup: io.netty.util.internal.logging.InternalLogger logger> = v0;
return;
}
}