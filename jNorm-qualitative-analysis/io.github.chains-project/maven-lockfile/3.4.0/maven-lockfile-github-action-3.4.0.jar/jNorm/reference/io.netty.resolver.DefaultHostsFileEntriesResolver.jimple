public final class io.netty.resolver.DefaultHostsFileEntriesResolver extends java.lang.Object implements io.netty.resolver.HostsFileEntriesResolver
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private static final long DEFAULT_REFRESH_INTERVAL;
private final long refreshInterval;
private final java.util.concurrent.atomic.AtomicLong lastRefresh;
private final io.netty.resolver.HostsFileEntriesProvider$Parser hostsFileParser;
private volatile java.util.Map inet4Entries;
private volatile java.util.Map inet6Entries;
public void <init>()
{
io.netty.resolver.HostsFileEntriesProvider$Parser v1;
long v2;
io.netty.resolver.DefaultHostsFileEntriesResolver v0;
v0 := @this: io.netty.resolver.DefaultHostsFileEntriesResolver;
v1 = staticinvoke <io.netty.resolver.HostsFileEntriesProvider: io.netty.resolver.HostsFileEntriesProvider$Parser parser()>();
v2 = <io.netty.resolver.DefaultHostsFileEntriesResolver: long DEFAULT_REFRESH_INTERVAL>;
specialinvoke v0.<io.netty.resolver.DefaultHostsFileEntriesResolver: void <init>(io.netty.resolver.HostsFileEntriesProvider$Parser,long)>(v1, v2);
return;
}
void <init>(io.netty.resolver.HostsFileEntriesProvider$Parser, long)
{
io.netty.resolver.DefaultHostsFileEntriesResolver v0;
long v2, v4, v5;
java.util.concurrent.atomic.AtomicLong v3;
io.netty.resolver.HostsFileEntriesProvider$Parser v1;
java.util.Map v7, v8;
io.netty.resolver.HostsFileEntriesProvider v6;
v0 := @this: io.netty.resolver.DefaultHostsFileEntriesResolver;
v1 := @parameter0: io.netty.resolver.HostsFileEntriesProvider$Parser;
v2 := @parameter1: long;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new java.util.concurrent.atomic.AtomicLong;
v4 = staticinvoke <java.lang.System: long nanoTime()>();
specialinvoke v3.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(v4);
v0.<io.netty.resolver.DefaultHostsFileEntriesResolver: java.util.concurrent.atomic.AtomicLong lastRefresh> = v3;
v0.<io.netty.resolver.DefaultHostsFileEntriesResolver: io.netty.resolver.HostsFileEntriesProvider$Parser hostsFileParser> = v1;
v5 = staticinvoke <io.netty.util.internal.ObjectUtil: long checkPositiveOrZero(long,java.lang.String)>(v2, "refreshInterval");
v0.<io.netty.resolver.DefaultHostsFileEntriesResolver: long refreshInterval> = v5;
v6 = staticinvoke <io.netty.resolver.DefaultHostsFileEntriesResolver: io.netty.resolver.HostsFileEntriesProvider parseEntries(io.netty.resolver.HostsFileEntriesProvider$Parser)>(v1);
v7 = virtualinvoke v6.<io.netty.resolver.HostsFileEntriesProvider: java.util.Map ipv4Entries()>();
v0.<io.netty.resolver.DefaultHostsFileEntriesResolver: java.util.Map inet4Entries> = v7;
v8 = virtualinvoke v6.<io.netty.resolver.HostsFileEntriesProvider: java.util.Map ipv6Entries()>();
v0.<io.netty.resolver.DefaultHostsFileEntriesResolver: java.util.Map inet6Entries> = v8;
return;
}
public java.net.InetAddress address(java.lang.String, io.netty.resolver.ResolvedAddressTypes)
{
java.net.InetAddress v4;
java.util.List v3;
io.netty.resolver.DefaultHostsFileEntriesResolver v0;
io.netty.resolver.ResolvedAddressTypes v2;
java.lang.String v1;
v0 := @this: io.netty.resolver.DefaultHostsFileEntriesResolver;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.netty.resolver.ResolvedAddressTypes;
v3 = virtualinvoke v0.<io.netty.resolver.DefaultHostsFileEntriesResolver: java.util.List addresses(java.lang.String,io.netty.resolver.ResolvedAddressTypes)>(v1, v2);
v4 = staticinvoke <io.netty.resolver.DefaultHostsFileEntriesResolver: java.net.InetAddress firstAddress(java.util.List)>(v3);
return v4;
}
public java.util.List addresses(java.lang.String, io.netty.resolver.ResolvedAddressTypes)
{
int[] v4;
java.util.Map v11, v13, v15, v17, v19, v21, v7, v9;
int v5, v6;
java.lang.String v1, v24, v3;
io.netty.resolver.DefaultHostsFileEntriesResolver v0;
java.lang.IllegalArgumentException v23;
io.netty.resolver.ResolvedAddressTypes v2;
java.lang.Object v10, v12, v14, v16, v18, v20, v22, v8;
v0 := @this: io.netty.resolver.DefaultHostsFileEntriesResolver;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.netty.resolver.ResolvedAddressTypes;
v3 = virtualinvoke v0.<io.netty.resolver.DefaultHostsFileEntriesResolver: java.lang.String normalize(java.lang.String)>(v1);
specialinvoke v0.<io.netty.resolver.DefaultHostsFileEntriesResolver: void ensureHostsFileEntriesAreFresh()>();
v4 = <io.netty.resolver.DefaultHostsFileEntriesResolver$1: int[] $SwitchMap$io$netty$resolver$ResolvedAddressTypes>;
v5 = virtualinvoke v2.<io.netty.resolver.ResolvedAddressTypes: int ordinal()>();
v6 = v4[v5];
tableswitch(v6)
{
case 1: goto label1;
case 2: goto label2;
case 3: goto label3;
case 4: goto label6;
default: goto label9;
};
label1:
v7 = v0.<io.netty.resolver.DefaultHostsFileEntriesResolver: java.util.Map inet4Entries>;
v8 = interfaceinvoke v7.<java.util.Map: java.lang.Object get(java.lang.Object)>(v3);
return v8;
label2:
v9 = v0.<io.netty.resolver.DefaultHostsFileEntriesResolver: java.util.Map inet6Entries>;
v10 = interfaceinvoke v9.<java.util.Map: java.lang.Object get(java.lang.Object)>(v3);
return v10;
label3:
v11 = v0.<io.netty.resolver.DefaultHostsFileEntriesResolver: java.util.Map inet4Entries>;
v12 = interfaceinvoke v11.<java.util.Map: java.lang.Object get(java.lang.Object)>(v3);
if v12 == null goto label4;
v13 = v0.<io.netty.resolver.DefaultHostsFileEntriesResolver: java.util.Map inet6Entries>;
v14 = interfaceinvoke v13.<java.util.Map: java.lang.Object get(java.lang.Object)>(v3);
staticinvoke <io.netty.resolver.DefaultHostsFileEntriesResolver: java.util.List allAddresses(java.util.List,java.util.List)>(v12, v14);
goto label5;
label4:
v15 = v0.<io.netty.resolver.DefaultHostsFileEntriesResolver: java.util.Map inet6Entries>;
v16 = interfaceinvoke v15.<java.util.Map: java.lang.Object get(java.lang.Object)>(v3);
label5:
return v16;
label6:
v17 = v0.<io.netty.resolver.DefaultHostsFileEntriesResolver: java.util.Map inet6Entries>;
v18 = interfaceinvoke v17.<java.util.Map: java.lang.Object get(java.lang.Object)>(v3);
if v18 == null goto label7;
v19 = v0.<io.netty.resolver.DefaultHostsFileEntriesResolver: java.util.Map inet4Entries>;
v20 = interfaceinvoke v19.<java.util.Map: java.lang.Object get(java.lang.Object)>(v3);
staticinvoke <io.netty.resolver.DefaultHostsFileEntriesResolver: java.util.List allAddresses(java.util.List,java.util.List)>(v18, v20);
goto label8;
label7:
v21 = v0.<io.netty.resolver.DefaultHostsFileEntriesResolver: java.util.Map inet4Entries>;
v22 = interfaceinvoke v21.<java.util.Map: java.lang.Object get(java.lang.Object)>(v3);
label8:
return v22;
label9:
v23 = new java.lang.IllegalArgumentException;
v24 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.netty.resolver.ResolvedAddressTypes)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Unknown ResolvedAddressTypes \u0001");
specialinvoke v23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v24);
throw v23;
}
private void ensureHostsFileEntriesAreFresh()
{
io.netty.resolver.DefaultHostsFileEntriesResolver v0;
long v1, v4, v5, v6;
java.util.concurrent.atomic.AtomicLong v3, v8;
io.netty.resolver.HostsFileEntriesProvider$Parser v10;
byte v2, v7;
java.util.Map v12, v13;
io.netty.resolver.HostsFileEntriesProvider v11;
boolean v9;
v0 := @this: io.netty.resolver.DefaultHostsFileEntriesResolver;
v1 = v0.<io.netty.resolver.DefaultHostsFileEntriesResolver: long refreshInterval>;
v2 = v1 cmp 0L;
if v2 != 0 goto label1;
return;
label1:
v3 = v0.<io.netty.resolver.DefaultHostsFileEntriesResolver: java.util.concurrent.atomic.AtomicLong lastRefresh>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicLong: long get()>();
v5 = staticinvoke <java.lang.System: long nanoTime()>();
v6 = v5 - v4;
v7 = v6 cmp v1;
if v7 <= 0 goto label2;
v8 = v0.<io.netty.resolver.DefaultHostsFileEntriesResolver: java.util.concurrent.atomic.AtomicLong lastRefresh>;
v9 = virtualinvoke v8.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>(v4, v5);
if v9 == 0 goto label2;
v10 = v0.<io.netty.resolver.DefaultHostsFileEntriesResolver: io.netty.resolver.HostsFileEntriesProvider$Parser hostsFileParser>;
v11 = staticinvoke <io.netty.resolver.DefaultHostsFileEntriesResolver: io.netty.resolver.HostsFileEntriesProvider parseEntries(io.netty.resolver.HostsFileEntriesProvider$Parser)>(v10);
v12 = virtualinvoke v11.<io.netty.resolver.HostsFileEntriesProvider: java.util.Map ipv4Entries()>();
v0.<io.netty.resolver.DefaultHostsFileEntriesResolver: java.util.Map inet4Entries> = v12;
v13 = virtualinvoke v11.<io.netty.resolver.HostsFileEntriesProvider: java.util.Map ipv6Entries()>();
v0.<io.netty.resolver.DefaultHostsFileEntriesResolver: java.util.Map inet6Entries> = v13;
label2:
return;
}
java.lang.String normalize(java.lang.String)
{
io.netty.resolver.DefaultHostsFileEntriesResolver v0;
java.util.Locale v2;
java.lang.String v1, v3;
v0 := @this: io.netty.resolver.DefaultHostsFileEntriesResolver;
v1 := @parameter0: java.lang.String;
v2 = <java.util.Locale: java.util.Locale ENGLISH>;
v3 = virtualinvoke v1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>(v2);
return v3;
}
private static java.util.List allAddresses(java.util.List, java.util.List)
{
java.util.List v0, v1;
int v3, v4, v5;
java.util.ArrayList v2;
v0 := @parameter0: java.util.List;
v1 := @parameter1: java.util.List;
v2 = new java.util.ArrayList;
v3 = interfaceinvoke v0.<java.util.List: int size()>();
if v1 != null goto label1;
v4 = 0;
goto label2;
label1:
v4 = interfaceinvoke v1.<java.util.List: int size()>();
label2:
v5 = v3 + v4;
specialinvoke v2.<java.util.ArrayList: void <init>(int)>(v5);
interfaceinvoke v2.<java.util.List: boolean addAll(java.util.Collection)>(v0);
if v1 == null goto label3;
interfaceinvoke v2.<java.util.List: boolean addAll(java.util.Collection)>(v1);
label3:
return v2;
}
private static java.net.InetAddress firstAddress(java.util.List)
{
java.lang.Object v2;
java.util.List v0;
boolean v1;
v0 := @parameter0: java.util.List;
if v0 == null goto label1;
v1 = interfaceinvoke v0.<java.util.List: boolean isEmpty()>();
if v1 != 0 goto label1;
v2 = interfaceinvoke v0.<java.util.List: java.lang.Object get(int)>(0);
goto label2;
label1:
v2 = null;
label2:
return v2;
}
private static io.netty.resolver.HostsFileEntriesProvider parseEntries(io.netty.resolver.HostsFileEntriesProvider$Parser)
{
io.netty.resolver.HostsFileEntriesProvider$Parser v0;
java.nio.charset.Charset v3, v4, v5;
java.nio.charset.Charset[] v2;
io.netty.resolver.HostsFileEntriesProvider v6, v7;
boolean v1;
v0 := @parameter0: io.netty.resolver.HostsFileEntriesProvider$Parser;
v1 = staticinvoke <io.netty.util.internal.PlatformDependent: boolean isWindows()>();
if v1 == 0 goto label1;
v2 = newarray (java.nio.charset.Charset)[3];
v3 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();
v2[0] = v3;
v4 = <io.netty.util.CharsetUtil: java.nio.charset.Charset UTF_16>;
v2[1] = v4;
v5 = <io.netty.util.CharsetUtil: java.nio.charset.Charset UTF_8>;
v2[2] = v5;
v6 = interfaceinvoke v0.<io.netty.resolver.HostsFileEntriesProvider$Parser: io.netty.resolver.HostsFileEntriesProvider parseSilently(java.nio.charset.Charset[])>(v2);
return v6;
label1:
v7 = interfaceinvoke v0.<io.netty.resolver.HostsFileEntriesProvider$Parser: io.netty.resolver.HostsFileEntriesProvider parseSilently()>();
return v7;
}
static void <clinit>()
{
java.lang.Long v6;
io.netty.util.internal.logging.InternalLogger v0, v2, v4;
long v1, v5;
boolean v3;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/resolver/DefaultHostsFileEntriesResolver;");
<io.netty.resolver.DefaultHostsFileEntriesResolver: io.netty.util.internal.logging.InternalLogger logger> = v0;
v1 = staticinvoke <io.netty.util.internal.SystemPropertyUtil: long getLong(java.lang.String,long)>("io.netty.hostsFileRefreshInterval", 0L);
<io.netty.resolver.DefaultHostsFileEntriesResolver: long DEFAULT_REFRESH_INTERVAL> = v1;
v2 = <io.netty.resolver.DefaultHostsFileEntriesResolver: io.netty.util.internal.logging.InternalLogger logger>;
v3 = interfaceinvoke v2.<io.netty.util.internal.logging.InternalLogger: boolean isDebugEnabled()>();
if v3 == 0 goto label1;
v4 = <io.netty.resolver.DefaultHostsFileEntriesResolver: io.netty.util.internal.logging.InternalLogger logger>;
v5 = <io.netty.resolver.DefaultHostsFileEntriesResolver: long DEFAULT_REFRESH_INTERVAL>;
v6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v5);
interfaceinvoke v4.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object)>("-Dio.netty.hostsFileRefreshInterval: {}", v6);
label1:
return;
}
}