public final class io.netty.resolver.HostsFileEntriesProvider extends java.lang.Object
{
static final io.netty.resolver.HostsFileEntriesProvider EMPTY;
private final java.util.Map ipv4Entries;
private final java.util.Map ipv6Entries;
public static io.netty.resolver.HostsFileEntriesProvider$Parser parser()
{
io.netty.resolver.HostsFileEntriesProvider$ParserImpl v0;
v0 = <io.netty.resolver.HostsFileEntriesProvider$ParserImpl: io.netty.resolver.HostsFileEntriesProvider$ParserImpl INSTANCE>;
return v0;
}
void <init>(java.util.Map, java.util.Map)
{
java.util.Map v1, v2, v4, v6;
java.util.HashMap v3, v5;
io.netty.resolver.HostsFileEntriesProvider v0;
v0 := @this: io.netty.resolver.HostsFileEntriesProvider;
v1 := @parameter0: java.util.Map;
v2 := @parameter1: java.util.Map;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new java.util.HashMap;
specialinvoke v3.<java.util.HashMap: void <init>(java.util.Map)>(v1);
v4 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(v3);
v0.<io.netty.resolver.HostsFileEntriesProvider: java.util.Map ipv4Entries> = v4;
v5 = new java.util.HashMap;
specialinvoke v5.<java.util.HashMap: void <init>(java.util.Map)>(v2);
v6 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(v5);
v0.<io.netty.resolver.HostsFileEntriesProvider: java.util.Map ipv6Entries> = v6;
return;
}
public java.util.Map ipv4Entries()
{
io.netty.resolver.HostsFileEntriesProvider v0;
java.util.Map v1;
v0 := @this: io.netty.resolver.HostsFileEntriesProvider;
v1 = v0.<io.netty.resolver.HostsFileEntriesProvider: java.util.Map ipv4Entries>;
return v1;
}
public java.util.Map ipv6Entries()
{
io.netty.resolver.HostsFileEntriesProvider v0;
java.util.Map v1;
v0 := @this: io.netty.resolver.HostsFileEntriesProvider;
v1 = v0.<io.netty.resolver.HostsFileEntriesProvider: java.util.Map ipv6Entries>;
return v1;
}
static void <clinit>()
{
io.netty.resolver.HostsFileEntriesProvider v0;
java.util.Map v1, v2;
v0 = new io.netty.resolver.HostsFileEntriesProvider;
v1 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
v2 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
specialinvoke v0.<io.netty.resolver.HostsFileEntriesProvider: void <init>(java.util.Map,java.util.Map)>(v1, v2);
<io.netty.resolver.HostsFileEntriesProvider: io.netty.resolver.HostsFileEntriesProvider EMPTY> = v0;
return;
}
}