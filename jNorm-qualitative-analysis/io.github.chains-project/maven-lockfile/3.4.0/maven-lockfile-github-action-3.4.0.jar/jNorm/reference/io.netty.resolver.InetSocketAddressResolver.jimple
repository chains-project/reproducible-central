public class io.netty.resolver.InetSocketAddressResolver extends io.netty.resolver.AbstractAddressResolver
{
final io.netty.resolver.NameResolver nameResolver;
public void <init>(io.netty.util.concurrent.EventExecutor, io.netty.resolver.NameResolver)
{
io.netty.util.concurrent.EventExecutor v1;
io.netty.resolver.InetSocketAddressResolver v0;
io.netty.resolver.NameResolver v2;
v0 := @this: io.netty.resolver.InetSocketAddressResolver;
v1 := @parameter0: io.netty.util.concurrent.EventExecutor;
v2 := @parameter1: io.netty.resolver.NameResolver;
specialinvoke v0.<io.netty.resolver.AbstractAddressResolver: void <init>(io.netty.util.concurrent.EventExecutor,java.lang.Class)>(v1, class "Ljava/net/InetSocketAddress;");
v0.<io.netty.resolver.InetSocketAddressResolver: io.netty.resolver.NameResolver nameResolver> = v2;
return;
}
protected boolean doIsResolved(java.net.InetSocketAddress)
{
io.netty.resolver.InetSocketAddressResolver v0;
java.net.InetSocketAddress v1;
boolean v2, v3;
v0 := @this: io.netty.resolver.InetSocketAddressResolver;
v1 := @parameter0: java.net.InetSocketAddress;
v2 = virtualinvoke v1.<java.net.InetSocketAddress: boolean isUnresolved()>();
if v2 != 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
protected void doResolve(java.net.InetSocketAddress, io.netty.util.concurrent.Promise) throws java.lang.Exception
{
io.netty.util.concurrent.Promise v2;
io.netty.resolver.InetSocketAddressResolver v0;
io.netty.resolver.NameResolver v3;
io.netty.resolver.InetSocketAddressResolver$1 v6;
java.lang.String v4;
io.netty.util.concurrent.Future v5;
java.net.InetSocketAddress v1;
v0 := @this: io.netty.resolver.InetSocketAddressResolver;
v1 := @parameter0: java.net.InetSocketAddress;
v2 := @parameter1: io.netty.util.concurrent.Promise;
v3 = v0.<io.netty.resolver.InetSocketAddressResolver: io.netty.resolver.NameResolver nameResolver>;
v4 = virtualinvoke v1.<java.net.InetSocketAddress: java.lang.String getHostName()>();
v5 = interfaceinvoke v3.<io.netty.resolver.NameResolver: io.netty.util.concurrent.Future resolve(java.lang.String)>(v4);
v6 = new io.netty.resolver.InetSocketAddressResolver$1;
specialinvoke v6.<io.netty.resolver.InetSocketAddressResolver$1: void <init>(io.netty.resolver.InetSocketAddressResolver,io.netty.util.concurrent.Promise,java.net.InetSocketAddress)>(v0, v2, v1);
interfaceinvoke v5.<io.netty.util.concurrent.Future: io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)>(v6);
return;
}
protected void doResolveAll(java.net.InetSocketAddress, io.netty.util.concurrent.Promise) throws java.lang.Exception
{
io.netty.util.concurrent.Promise v2;
io.netty.resolver.InetSocketAddressResolver v0;
io.netty.resolver.NameResolver v3;
io.netty.resolver.InetSocketAddressResolver$2 v6;
java.lang.String v4;
io.netty.util.concurrent.Future v5;
java.net.InetSocketAddress v1;
v0 := @this: io.netty.resolver.InetSocketAddressResolver;
v1 := @parameter0: java.net.InetSocketAddress;
v2 := @parameter1: io.netty.util.concurrent.Promise;
v3 = v0.<io.netty.resolver.InetSocketAddressResolver: io.netty.resolver.NameResolver nameResolver>;
v4 = virtualinvoke v1.<java.net.InetSocketAddress: java.lang.String getHostName()>();
v5 = interfaceinvoke v3.<io.netty.resolver.NameResolver: io.netty.util.concurrent.Future resolveAll(java.lang.String)>(v4);
v6 = new io.netty.resolver.InetSocketAddressResolver$2;
specialinvoke v6.<io.netty.resolver.InetSocketAddressResolver$2: void <init>(io.netty.resolver.InetSocketAddressResolver,java.net.InetSocketAddress,io.netty.util.concurrent.Promise)>(v0, v1, v2);
interfaceinvoke v5.<io.netty.util.concurrent.Future: io.netty.util.concurrent.Future addListener(io.netty.util.concurrent.GenericFutureListener)>(v6);
return;
}
public void close()
{
io.netty.resolver.InetSocketAddressResolver v0;
io.netty.resolver.NameResolver v1;
v0 := @this: io.netty.resolver.InetSocketAddressResolver;
v1 = v0.<io.netty.resolver.InetSocketAddressResolver: io.netty.resolver.NameResolver nameResolver>;
interfaceinvoke v1.<io.netty.resolver.NameResolver: void close()>();
return;
}
}