abstract class io.netty.resolver.dns.Cache extends java.lang.Object
{
private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater FUTURE_UPDATER;
private static final java.util.concurrent.ScheduledFuture CANCELLED;
static final int MAX_SUPPORTED_TTL_SECS;
private final java.util.concurrent.ConcurrentMap resolveCache;
void <init>()
{
io.netty.resolver.dns.Cache v0;
java.util.concurrent.ConcurrentMap v1;
v0 := @this: io.netty.resolver.dns.Cache;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.concurrent.ConcurrentMap newConcurrentHashMap()>();
v0.<io.netty.resolver.dns.Cache: java.util.concurrent.ConcurrentMap resolveCache> = v1;
return;
}
final void clear()
{
io.netty.resolver.dns.Cache v0;
java.util.Iterator v5;
java.util.Set v4;
java.util.concurrent.ConcurrentMap v1, v3;
java.lang.Object v7, v8;
boolean v2, v6;
v0 := @this: io.netty.resolver.dns.Cache;
label1:
v1 = v0.<io.netty.resolver.dns.Cache: java.util.concurrent.ConcurrentMap resolveCache>;
v2 = interfaceinvoke v1.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>();
if v2 != 0 goto label3;
v3 = v0.<io.netty.resolver.dns.Cache: java.util.concurrent.ConcurrentMap resolveCache>;
v4 = interfaceinvoke v3.<java.util.concurrent.ConcurrentMap: java.util.Set entrySet()>();
v5 = interfaceinvoke v4.<java.util.Set: java.util.Iterator iterator()>();
label2:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label1;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v5.<java.util.Iterator: void remove()>();
v8 = interfaceinvoke v7.<java.util.Map$Entry: java.lang.Object getValue()>();
virtualinvoke v8.<io.netty.resolver.dns.Cache$Entries: boolean clearAndCancel()>();
goto label2;
label3:
return;
}
final boolean clear(java.lang.String)
{
io.netty.resolver.dns.Cache v0;
java.lang.Object v3;
java.lang.String v1;
boolean v4, v5;
java.util.concurrent.ConcurrentMap v2;
v0 := @this: io.netty.resolver.dns.Cache;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.netty.resolver.dns.Cache: java.util.concurrent.ConcurrentMap resolveCache>;
v3 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(v1);
if v3 == null goto label1;
v4 = virtualinvoke v3.<io.netty.resolver.dns.Cache$Entries: boolean clearAndCancel()>();
if v4 == 0 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
final java.util.List get(java.lang.String)
{
io.netty.resolver.dns.Cache v0;
java.lang.Object v3, v4;
java.lang.String v1;
java.util.concurrent.ConcurrentMap v2;
v0 := @this: io.netty.resolver.dns.Cache;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.netty.resolver.dns.Cache: java.util.concurrent.ConcurrentMap resolveCache>;
v3 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v1);
if v3 == null goto label1;
v4 = virtualinvoke v3.<io.netty.resolver.dns.Cache$Entries: java.lang.Object get()>();
label1:
return v4;
}
final void cache(java.lang.String, java.lang.Object, int, io.netty.channel.EventLoop)
{
io.netty.resolver.dns.Cache v0;
io.netty.resolver.dns.Cache$Entries v7;
io.netty.channel.EventLoop v4;
java.util.concurrent.ConcurrentMap v5, v8;
int v3;
java.lang.Object v2, v6, v9;
java.lang.String v1;
v0 := @this: io.netty.resolver.dns.Cache;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: int;
v4 := @parameter3: io.netty.channel.EventLoop;
v5 = v0.<io.netty.resolver.dns.Cache: java.util.concurrent.ConcurrentMap resolveCache>;
v6 = interfaceinvoke v5.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v1);
if v6 != null goto label1;
v7 = new io.netty.resolver.dns.Cache$Entries;
specialinvoke v7.<io.netty.resolver.dns.Cache$Entries: void <init>(io.netty.resolver.dns.Cache,java.lang.String)>(v0, v1);
v6 = v7;
v8 = v0.<io.netty.resolver.dns.Cache: java.util.concurrent.ConcurrentMap resolveCache>;
v9 = interfaceinvoke v8.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(v1, v7);
if v9 == null goto label1;
v6 = v9;
label1:
virtualinvoke v6.<io.netty.resolver.dns.Cache$Entries: void add(java.lang.Object,int,io.netty.channel.EventLoop)>(v2, v3, v4);
return;
}
final int size()
{
int v2;
io.netty.resolver.dns.Cache v0;
java.util.concurrent.ConcurrentMap v1;
v0 := @this: io.netty.resolver.dns.Cache;
v1 = v0.<io.netty.resolver.dns.Cache: java.util.concurrent.ConcurrentMap resolveCache>;
v2 = interfaceinvoke v1.<java.util.concurrent.ConcurrentMap: int size()>();
return v2;
}
protected abstract boolean shouldReplaceAll(java.lang.Object);
protected void sortEntries(java.lang.String, java.util.List)
{
java.util.List v2;
io.netty.resolver.dns.Cache v0;
java.lang.String v1;
v0 := @this: io.netty.resolver.dns.Cache;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.util.List;
return;
}
protected abstract boolean equals(java.lang.Object, java.lang.Object);
static void <clinit>()
{
io.netty.resolver.dns.Cache$1 v1;
java.util.concurrent.TimeUnit v2;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v0;
long v3;
v0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lio/netty/resolver/dns/Cache$Entries;", class "Ljava/util/concurrent/ScheduledFuture;", "expirationFuture");
<io.netty.resolver.dns.Cache: java.util.concurrent.atomic.AtomicReferenceFieldUpdater FUTURE_UPDATER> = v0;
v1 = new io.netty.resolver.dns.Cache$1;
specialinvoke v1.<io.netty.resolver.dns.Cache$1: void <init>()>();
<io.netty.resolver.dns.Cache: java.util.concurrent.ScheduledFuture CANCELLED> = v1;
v2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit DAYS>;
v3 = virtualinvoke v2.<java.util.concurrent.TimeUnit: long toSeconds(long)>(730L);
<io.netty.resolver.dns.Cache: int MAX_SUPPORTED_TTL_SECS> = v3;
return;
}
}