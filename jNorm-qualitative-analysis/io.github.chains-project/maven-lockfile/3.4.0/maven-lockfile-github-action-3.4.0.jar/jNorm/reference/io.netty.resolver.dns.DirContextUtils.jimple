final class io.netty.resolver.dns.DirContextUtils extends java.lang.Object
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private void <init>()
{
io.netty.resolver.dns.DirContextUtils v0;
v0 := @this: io.netty.resolver.dns.DirContextUtils;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void addNameServers(java.util.List, int)
{
java.net.URISyntaxException v21;
java.lang.String[] v7;
javax.naming.NamingException v23;
javax.naming.directory.InitialDirContext v3;
int v1, v16, v18, v19, v8, v9;
java.lang.String v10, v13, v17;
java.net.URI v11, v12;
java.util.Hashtable v2, v4;
boolean v14, v6;
java.net.InetSocketAddress v20;
java.util.List v0;
io.netty.util.internal.logging.InternalLogger v15, v22;
java.lang.Object v5;
v0 := @parameter0: java.util.List;
v1 := @parameter1: int;
v2 = new java.util.Hashtable;
specialinvoke v2.<java.util.Hashtable: void <init>()>();
virtualinvoke v2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.naming.factory.initial", "com.sun.jndi.dns.DnsContextFactory");
virtualinvoke v2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.naming.provider.url", "dns://");
label01:
v3 = new javax.naming.directory.InitialDirContext;
specialinvoke v3.<javax.naming.directory.InitialDirContext: void <init>(java.util.Hashtable)>(v2);
v4 = interfaceinvoke v3.<javax.naming.directory.DirContext: java.util.Hashtable getEnvironment()>();
v5 = virtualinvoke v4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("java.naming.provider.url");
if v5 == null goto label13;
v6 = virtualinvoke v5.<java.lang.String: boolean isEmpty()>();
if v6 != 0 goto label13;
v7 = virtualinvoke v5.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");
v8 = lengthof v7;
v9 = 0;
label02:
if v9 >= v8 goto label13;
v10 = v7[v9];
label03:
v11 = new java.net.URI;
specialinvoke v11.<java.net.URI: void <init>(java.lang.String)>(v10);
v12 = new java.net.URI;
specialinvoke v12.<java.net.URI: void <init>(java.lang.String)>(v10);
v13 = virtualinvoke v12.<java.net.URI: java.lang.String getHost()>();
if v13 == null goto label04;
v14 = virtualinvoke v13.<java.lang.String: boolean isEmpty()>();
if v14 == 0 goto label06;
label04:
v15 = <io.netty.resolver.dns.DirContextUtils: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v15.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object)>("Skipping a nameserver URI as host portion could not be extracted: {}", v10);
label05:
goto label11;
label06:
v16 = virtualinvoke v11.<java.net.URI: int getPort()>();
v17 = virtualinvoke v11.<java.net.URI: java.lang.String getHost()>();
v18 = (int) -1;
if v16 != v18 goto label07;
v19 = v1;
goto label08;
label07:
v19 = v16;
label08:
v20 = staticinvoke <io.netty.util.internal.SocketUtils: java.net.InetSocketAddress socketAddress(java.lang.String,int)>(v17, v19);
interfaceinvoke v0.<java.util.List: boolean add(java.lang.Object)>(v20);
label09:
goto label11;
label10:
v21 := @caughtexception;
v22 = <io.netty.resolver.dns.DirContextUtils: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v22.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Skipping a malformed nameserver URI: {}", v10, v21);
label11:
v9 = v9 + 1;
goto label02;
label12:
v23 := @caughtexception;
label13:
return;
catch java.net.URISyntaxException from label03 to label05 with label10;
catch java.net.URISyntaxException from label06 to label09 with label10;
catch javax.naming.NamingException from label01 to label12 with label12;
}
static void <clinit>()
{
io.netty.util.internal.logging.InternalLogger v0;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/resolver/dns/DirContextUtils;");
<io.netty.resolver.dns.DirContextUtils: io.netty.util.internal.logging.InternalLogger logger> = v0;
return;
}
}