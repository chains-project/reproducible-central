class io.netty.resolver.dns.DnsNameResolver$6 extends java.lang.Object implements io.netty.util.concurrent.FutureListener
{
final io.netty.util.concurrent.Promise val$promise;
final io.netty.resolver.dns.DnsNameResolver this$0;
void <init>(io.netty.resolver.dns.DnsNameResolver, io.netty.util.concurrent.Promise)
{
io.netty.resolver.dns.DnsNameResolver$6 v0;
io.netty.resolver.dns.DnsNameResolver v1;
io.netty.util.concurrent.Promise v2;
v0 := @this: io.netty.resolver.dns.DnsNameResolver$6;
v1 := @parameter0: io.netty.resolver.dns.DnsNameResolver;
v2 := @parameter1: io.netty.util.concurrent.Promise;
v0.<io.netty.resolver.dns.DnsNameResolver$6: io.netty.resolver.dns.DnsNameResolver this$0> = v1;
v0.<io.netty.resolver.dns.DnsNameResolver$6: io.netty.util.concurrent.Promise val$promise> = v2;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void operationComplete(io.netty.util.concurrent.Future)
{
java.lang.Throwable v7;
io.netty.resolver.dns.DnsNameResolver$6 v0;
io.netty.util.concurrent.Promise v3, v6;
java.lang.Object v4, v5;
io.netty.util.concurrent.Future v1;
boolean v2;
v0 := @this: io.netty.resolver.dns.DnsNameResolver$6;
v1 := @parameter0: io.netty.util.concurrent.Future;
v2 = interfaceinvoke v1.<io.netty.util.concurrent.Future: boolean isSuccess()>();
if v2 == 0 goto label1;
v3 = v0.<io.netty.resolver.dns.DnsNameResolver$6: io.netty.util.concurrent.Promise val$promise>;
v4 = interfaceinvoke v1.<io.netty.util.concurrent.Future: java.lang.Object getNow()>();
v5 = interfaceinvoke v4.<java.util.List: java.lang.Object get(int)>(0);
staticinvoke <io.netty.resolver.dns.DnsNameResolver: boolean trySuccess(io.netty.util.concurrent.Promise,java.lang.Object)>(v3, v5);
goto label2;
label1:
v6 = v0.<io.netty.resolver.dns.DnsNameResolver$6: io.netty.util.concurrent.Promise val$promise>;
v7 = interfaceinvoke v1.<io.netty.util.concurrent.Future: java.lang.Throwable cause()>();
staticinvoke <io.netty.resolver.dns.DnsNameResolver: void tryFailure(io.netty.util.concurrent.Promise,java.lang.Throwable)>(v6, v7);
label2:
return;
}
}