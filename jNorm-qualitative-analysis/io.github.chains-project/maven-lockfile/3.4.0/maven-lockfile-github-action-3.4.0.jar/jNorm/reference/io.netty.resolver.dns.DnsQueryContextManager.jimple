final class io.netty.resolver.dns.DnsQueryContextManager extends java.lang.Object
{
final java.util.Map map;
void <init>()
{
java.util.HashMap v1;
io.netty.resolver.dns.DnsQueryContextManager v0;
v0 := @this: io.netty.resolver.dns.DnsQueryContextManager;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.HashMap;
specialinvoke v1.<java.util.HashMap: void <init>()>();
v0.<io.netty.resolver.dns.DnsQueryContextManager: java.util.Map map> = v1;
return;
}
int add(io.netty.resolver.dns.DnsQueryContext)
{
java.lang.Throwable v15;
java.lang.IllegalStateException v12;
io.netty.resolver.dns.DnsQueryContext v1;
java.util.Random v4;
io.netty.util.collection.IntObjectMap v3;
int v10, v11, v5, v6, v7, v8;
java.lang.String v14;
boolean v9;
io.netty.resolver.dns.DnsQueryContextManager v0;
io.netty.handler.codec.dns.DnsQuestion v13;
java.net.InetSocketAddress v2;
v0 := @this: io.netty.resolver.dns.DnsQueryContextManager;
v1 := @parameter0: io.netty.resolver.dns.DnsQueryContext;
v2 = virtualinvoke v1.<io.netty.resolver.dns.DnsQueryContext: java.net.InetSocketAddress nameServerAddr()>();
v3 = specialinvoke v0.<io.netty.resolver.dns.DnsQueryContextManager: io.netty.util.collection.IntObjectMap getOrCreateContextMap(java.net.InetSocketAddress)>(v2);
v4 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.Random threadLocalRandom()>();
v5 = (int) 65535;
v6 = virtualinvoke v4.<java.util.Random: int nextInt(int)>(v5);
v7 = v6 + 1;
v8 = 0;
entermonitor v3;
label1:
v9 = interfaceinvoke v3.<io.netty.util.collection.IntObjectMap: boolean containsKey(int)>(v7);
if v9 != 0 goto label3;
interfaceinvoke v3.<io.netty.util.collection.IntObjectMap: java.lang.Object put(int,java.lang.Object)>(v7, v1);
exitmonitor v3;
label2:
return v7;
label3:
v10 = v7 + 1;
v11 = (int) 65535;
v7 = v10 & v11;
v8 = v8 + 1;
if v8 < 131070 goto label1;
v12 = new java.lang.IllegalStateException;
v13 = virtualinvoke v1.<io.netty.resolver.dns.DnsQueryContext: io.netty.handler.codec.dns.DnsQuestion question()>();
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.netty.handler.codec.dns.DnsQuestion)>(v13) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("query ID space exhausted: \u0001");
specialinvoke v12.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v14);
throw v12;
label4:
v15 := @caughtexception;
exitmonitor v3;
throw v15;
catch java.lang.Throwable from label1 to label2 with label4;
}
io.netty.resolver.dns.DnsQueryContext get(java.net.InetSocketAddress, int)
{
java.lang.Throwable v5;
io.netty.resolver.dns.DnsQueryContextManager v0;
io.netty.util.collection.IntObjectMap v3;
int v2;
java.lang.Object v4;
java.net.InetSocketAddress v1;
v0 := @this: io.netty.resolver.dns.DnsQueryContextManager;
v1 := @parameter0: java.net.InetSocketAddress;
v2 := @parameter1: int;
v3 = specialinvoke v0.<io.netty.resolver.dns.DnsQueryContextManager: io.netty.util.collection.IntObjectMap getContextMap(java.net.InetSocketAddress)>(v1);
if v3 == null goto label4;
entermonitor v3;
label1:
v4 = interfaceinvoke v3.<io.netty.util.collection.IntObjectMap: java.lang.Object get(int)>(v2);
exitmonitor v3;
label2:
goto label5;
label3:
v5 := @caughtexception;
exitmonitor v3;
throw v5;
label4:
v4 = null;
label5:
return v4;
catch java.lang.Throwable from label1 to label2 with label3;
}
io.netty.resolver.dns.DnsQueryContext remove(java.net.InetSocketAddress, int)
{
java.lang.Throwable v5;
io.netty.resolver.dns.DnsQueryContextManager v0;
io.netty.util.collection.IntObjectMap v3;
int v2;
java.lang.Object v4;
java.net.InetSocketAddress v1;
v0 := @this: io.netty.resolver.dns.DnsQueryContextManager;
v1 := @parameter0: java.net.InetSocketAddress;
v2 := @parameter1: int;
v3 = specialinvoke v0.<io.netty.resolver.dns.DnsQueryContextManager: io.netty.util.collection.IntObjectMap getContextMap(java.net.InetSocketAddress)>(v1);
if v3 != null goto label1;
return null;
label1:
entermonitor v3;
label2:
v4 = interfaceinvoke v3.<io.netty.util.collection.IntObjectMap: java.lang.Object remove(int)>(v2);
exitmonitor v3;
label3:
return v4;
label4:
v5 := @caughtexception;
exitmonitor v3;
throw v5;
catch java.lang.Throwable from label2 to label3 with label4;
}
private io.netty.util.collection.IntObjectMap getContextMap(java.net.InetSocketAddress)
{
java.lang.Throwable v5;
io.netty.resolver.dns.DnsQueryContextManager v0;
java.util.Map v2, v3;
java.lang.Object v4;
java.net.InetSocketAddress v1;
v0 := @this: io.netty.resolver.dns.DnsQueryContextManager;
v1 := @parameter0: java.net.InetSocketAddress;
v2 = v0.<io.netty.resolver.dns.DnsQueryContextManager: java.util.Map map>;
entermonitor v2;
label1:
v3 = v0.<io.netty.resolver.dns.DnsQueryContextManager: java.util.Map map>;
v4 = interfaceinvoke v3.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
exitmonitor v2;
label2:
return v4;
label3:
v5 := @caughtexception;
exitmonitor v2;
throw v5;
catch java.lang.Throwable from label1 to label2 with label3;
}
private io.netty.util.collection.IntObjectMap getOrCreateContextMap(java.net.InetSocketAddress)
{
java.lang.Throwable v26;
java.net.InetAddress v6;
java.util.Map v11, v14, v19, v2, v23, v3, v8;
int v7;
io.netty.util.collection.IntObjectHashMap v5;
boolean v10, v17, v18, v22, v9;
io.netty.resolver.dns.DnsQueryContextManager v0;
java.net.Inet4Address v21, v25;
java.net.InetSocketAddress v1, v12, v15, v20, v24;
java.net.Inet6Address v13, v16;
java.lang.Object v4;
v0 := @this: io.netty.resolver.dns.DnsQueryContextManager;
v1 := @parameter0: java.net.InetSocketAddress;
v2 = v0.<io.netty.resolver.dns.DnsQueryContextManager: java.util.Map map>;
entermonitor v2;
label1:
v3 = v0.<io.netty.resolver.dns.DnsQueryContextManager: java.util.Map map>;
v4 = interfaceinvoke v3.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v4 == null goto label3;
exitmonitor v2;
label2:
return v4;
label3:
v5 = new io.netty.util.collection.IntObjectHashMap;
specialinvoke v5.<io.netty.util.collection.IntObjectHashMap: void <init>()>();
v6 = virtualinvoke v1.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();
v7 = virtualinvoke v1.<java.net.InetSocketAddress: int getPort()>();
v8 = v0.<io.netty.resolver.dns.DnsQueryContextManager: java.util.Map map>;
interfaceinvoke v8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v5);
v9 = v6 instanceof java.net.Inet4Address;
if v9 == 0 goto label5;
v10 = virtualinvoke v6.<java.net.Inet4Address: boolean isLoopbackAddress()>();
if v10 == 0 goto label4;
v11 = v0.<io.netty.resolver.dns.DnsQueryContextManager: java.util.Map map>;
v12 = new java.net.InetSocketAddress;
v13 = <io.netty.util.NetUtil: java.net.Inet6Address LOCALHOST6>;
specialinvoke v12.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(v13, v7);
interfaceinvoke v11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v12, v5);
goto label7;
label4:
v14 = v0.<io.netty.resolver.dns.DnsQueryContextManager: java.util.Map map>;
v15 = new java.net.InetSocketAddress;
v16 = staticinvoke <io.netty.resolver.dns.DnsQueryContextManager: java.net.Inet6Address toCompactAddress(java.net.Inet4Address)>(v6);
specialinvoke v15.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(v16, v7);
interfaceinvoke v14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v15, v5);
goto label7;
label5:
v17 = v6 instanceof java.net.Inet6Address;
if v17 == 0 goto label7;
v18 = virtualinvoke v6.<java.net.Inet6Address: boolean isLoopbackAddress()>();
if v18 == 0 goto label6;
v19 = v0.<io.netty.resolver.dns.DnsQueryContextManager: java.util.Map map>;
v20 = new java.net.InetSocketAddress;
v21 = <io.netty.util.NetUtil: java.net.Inet4Address LOCALHOST4>;
specialinvoke v20.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(v21, v7);
interfaceinvoke v19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v20, v5);
goto label7;
label6:
v22 = virtualinvoke v6.<java.net.Inet6Address: boolean isIPv4CompatibleAddress()>();
if v22 == 0 goto label7;
v23 = v0.<io.netty.resolver.dns.DnsQueryContextManager: java.util.Map map>;
v24 = new java.net.InetSocketAddress;
v25 = staticinvoke <io.netty.resolver.dns.DnsQueryContextManager: java.net.Inet4Address toIPv4Address(java.net.Inet6Address)>(v6);
specialinvoke v24.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(v25, v7);
interfaceinvoke v23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v24, v5);
label7:
exitmonitor v2;
label8:
return v5;
label9:
v26 := @caughtexception;
exitmonitor v2;
throw v26;
catch java.lang.Throwable from label1 to label2 with label9;
catch java.lang.Throwable from label3 to label8 with label9;
}
private static java.net.Inet6Address toCompactAddress(java.net.Inet4Address)
{
byte[] v1, v2;
java.lang.Error v9;
java.net.Inet4Address v0;
java.net.UnknownHostException v8;
java.net.InetAddress v7;
byte v3, v4, v5, v6;
v0 := @parameter0: java.net.Inet4Address;
v1 = virtualinvoke v0.<java.net.Inet4Address: byte[] getAddress()>();
v2 = newarray (byte)[16];
v2[0] = 0;
v2[1] = 0;
v2[2] = 0;
v2[3] = 0;
v2[4] = 0;
v2[5] = 0;
v2[6] = 0;
v2[7] = 0;
v2[8] = 0;
v2[9] = 0;
v2[10] = 0;
v2[11] = 0;
v3 = v1[0];
v2[12] = v3;
v4 = v1[1];
v2[13] = v4;
v5 = v1[2];
v2[14] = v5;
v6 = v1[3];
v2[15] = v6;
label1:
v7 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>(v2);
label2:
return v7;
label3:
v8 := @caughtexception;
v9 = new java.lang.Error;
specialinvoke v9.<java.lang.Error: void <init>(java.lang.Throwable)>(v8);
throw v9;
catch java.net.UnknownHostException from label1 to label2 with label3;
}
private static java.net.Inet4Address toIPv4Address(java.net.Inet6Address)
{
byte[] v1, v2;
java.lang.Error v9;
java.net.UnknownHostException v8;
java.net.InetAddress v7;
java.net.Inet6Address v0;
byte v3, v4, v5, v6;
v0 := @parameter0: java.net.Inet6Address;
v1 = virtualinvoke v0.<java.net.Inet6Address: byte[] getAddress()>();
v2 = newarray (byte)[4];
v3 = v1[12];
v2[0] = v3;
v4 = v1[13];
v2[1] = v4;
v5 = v1[14];
v2[2] = v5;
v6 = v1[15];
v2[3] = v6;
label1:
v7 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>(v2);
label2:
return v7;
label3:
v8 := @caughtexception;
v9 = new java.lang.Error;
specialinvoke v9.<java.lang.Error: void <init>(java.lang.Throwable)>(v8);
throw v9;
catch java.net.UnknownHostException from label1 to label2 with label3;
}
}