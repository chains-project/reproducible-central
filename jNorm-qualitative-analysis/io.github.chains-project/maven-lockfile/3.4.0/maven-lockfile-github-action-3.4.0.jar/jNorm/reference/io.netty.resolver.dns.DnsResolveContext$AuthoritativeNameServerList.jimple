final class io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList extends java.lang.Object
{
private final java.lang.String questionName;
private io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer head;
private int nameServerCount;
static final boolean $assertionsDisabled;
void <init>(java.lang.String)
{
java.util.Locale v2;
java.lang.String v1, v3;
io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList v0;
v0 := @this: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = <java.util.Locale: java.util.Locale US>;
v3 = virtualinvoke v1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>(v2);
v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList: java.lang.String questionName> = v3;
return;
}
void add(io.netty.handler.codec.dns.DnsRecord)
{
java.util.Locale v10;
boolean v4;
io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer v21, v22, v26, v27, v29, v31, v33, v34, v35;
io.netty.handler.codec.dns.DnsRecord v1;
long v30, v36;
io.netty.buffer.ByteBuf v24;
int v12, v13, v14, v16, v17, v23, v28, v32, v37, v38, v6, v8;
java.lang.String v11, v15, v19, v25, v5, v7, v9;
io.netty.handler.codec.dns.DnsRecordType v2, v3;
char v18, v20;
io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList v0;
v0 := @this: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList;
v1 := @parameter0: io.netty.handler.codec.dns.DnsRecord;
v2 = interfaceinvoke v1.<io.netty.handler.codec.dns.DnsRecord: io.netty.handler.codec.dns.DnsRecordType type()>();
v3 = <io.netty.handler.codec.dns.DnsRecordType: io.netty.handler.codec.dns.DnsRecordType NS>;
if v2 != v3 goto label01;
v4 = v1 instanceof io.netty.handler.codec.dns.DnsRawRecord;
if v4 != 0 goto label02;
label01:
return;
label02:
v5 = v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList: java.lang.String questionName>;
v6 = virtualinvoke v5.<java.lang.String: int length()>();
v7 = interfaceinvoke v1.<io.netty.handler.codec.dns.DnsRecord: java.lang.String name()>();
v8 = virtualinvoke v7.<java.lang.String: int length()>();
if v6 >= v8 goto label03;
return;
label03:
v9 = interfaceinvoke v1.<io.netty.handler.codec.dns.DnsRecord: java.lang.String name()>();
v10 = <java.util.Locale: java.util.Locale US>;
v11 = virtualinvoke v9.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>(v10);
v12 = 0;
v13 = virtualinvoke v11.<java.lang.String: int length()>();
v14 = v13 - 1;
v15 = v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList: java.lang.String questionName>;
v16 = virtualinvoke v15.<java.lang.String: int length()>();
v17 = v16 - 1;
label04:
if v14 < 0 goto label07;
v18 = virtualinvoke v11.<java.lang.String: char charAt(int)>(v14);
v19 = v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList: java.lang.String questionName>;
v20 = virtualinvoke v19.<java.lang.String: char charAt(int)>(v17);
if v20 == v18 goto label05;
return;
label05:
if v18 != 46 goto label06;
v12 = v12 + 1;
label06:
v14 = v14 - 1;
v17 = v17 - 1;
goto label04;
label07:
v21 = v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer head>;
if v21 == null goto label08;
v22 = v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer head>;
v23 = v22.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: int dots>;
if v23 <= v12 goto label08;
return;
label08:
v24 = interfaceinvoke v1.<io.netty.buffer.ByteBufHolder: io.netty.buffer.ByteBuf content()>();
v25 = staticinvoke <io.netty.resolver.dns.DnsResolveContext: java.lang.String decodeDomainName(io.netty.buffer.ByteBuf)>(v24);
if v25 != null goto label09;
return;
label09:
v26 = v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer head>;
if v26 == null goto label10;
v27 = v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer head>;
v28 = v27.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: int dots>;
if v28 >= v12 goto label11;
label10:
v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList: int nameServerCount> = 1;
v29 = new io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer;
v30 = interfaceinvoke v1.<io.netty.handler.codec.dns.DnsRecord: long timeToLive()>();
specialinvoke v29.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: void <init>(int,long,java.lang.String,java.lang.String)>(v12, v30, v11, v25);
v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer head> = v29;
goto label14;
label11:
v31 = v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer head>;
v32 = v31.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: int dots>;
if v32 != v12 goto label14;
v33 = v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer head>;
label12:
v34 = v33.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer next>;
if v34 == null goto label13;
v33 = v33.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer next>;
goto label12;
label13:
v35 = new io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer;
v36 = interfaceinvoke v1.<io.netty.handler.codec.dns.DnsRecord: long timeToLive()>();
specialinvoke v35.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: void <init>(int,long,java.lang.String,java.lang.String)>(v12, v36, v11, v25);
v33.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer next> = v35;
v37 = v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList: int nameServerCount>;
v38 = v37 + 1;
v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList: int nameServerCount> = v38;
label14:
return;
}
void handleWithAdditional(io.netty.resolver.dns.DnsNameResolver, io.netty.handler.codec.dns.DnsRecord, io.netty.resolver.dns.AuthoritativeDnsServerCache)
{
io.netty.handler.codec.dns.DnsRecord v2;
io.netty.resolver.dns.AuthoritativeDnsServerCache v3;
long v19;
java.net.InetAddress v7;
int v16, v17;
java.lang.String v5, v8;
boolean v13, v6, v9;
io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer v11, v12, v14, v15, v4;
io.netty.resolver.dns.DnsNameResolver v1;
io.netty.channel.EventLoop v20;
java.net.InetSocketAddress v10, v18;
io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList v0;
v0 := @this: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList;
v1 := @parameter0: io.netty.resolver.dns.DnsNameResolver;
v2 := @parameter1: io.netty.handler.codec.dns.DnsRecord;
v3 := @parameter2: io.netty.resolver.dns.AuthoritativeDnsServerCache;
v4 = v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer head>;
v5 = interfaceinvoke v2.<io.netty.handler.codec.dns.DnsRecord: java.lang.String name()>();
v6 = virtualinvoke v1.<io.netty.resolver.dns.DnsNameResolver: boolean isDecodeIdn()>();
v7 = staticinvoke <io.netty.resolver.dns.DnsAddressDecoder: java.net.InetAddress decodeAddress(io.netty.handler.codec.dns.DnsRecord,java.lang.String,boolean)>(v2, v5, v6);
if v7 != null goto label1;
return;
label1:
if v4 == null goto label6;
v8 = v4.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: java.lang.String nsName>;
v9 = virtualinvoke v8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v5);
if v9 == 0 goto label5;
v10 = v4.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: java.net.InetSocketAddress address>;
if v10 == null goto label4;
label2:
v11 = v4.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer next>;
if v11 == null goto label3;
v12 = v4.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer next>;
v13 = v12.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: boolean isCopy>;
if v13 == 0 goto label3;
v4 = v4.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer next>;
goto label2;
label3:
v14 = new io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer;
specialinvoke v14.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: void <init>(io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer)>(v4);
v15 = v4.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer next>;
v14.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer next> = v15;
v4.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer next> = v14;
v4 = v14;
v16 = v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList: int nameServerCount>;
v17 = v16 + 1;
v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList: int nameServerCount> = v17;
label4:
v18 = virtualinvoke v1.<io.netty.resolver.dns.DnsNameResolver: java.net.InetSocketAddress newRedirectServerAddress(java.net.InetAddress)>(v7);
v19 = interfaceinvoke v2.<io.netty.handler.codec.dns.DnsRecord: long timeToLive()>();
virtualinvoke v4.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: void update(java.net.InetSocketAddress,long)>(v18, v19);
v20 = virtualinvoke v1.<io.netty.resolver.dns.DnsNameResolver: io.netty.channel.EventLoop executor()>();
staticinvoke <io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList: void cache(io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer,io.netty.resolver.dns.AuthoritativeDnsServerCache,io.netty.channel.EventLoop)>(v4, v3, v20);
return;
label5:
v4 = v4.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer next>;
goto label1;
label6:
return;
}
void handleWithoutAdditionals(io.netty.resolver.dns.DnsNameResolver, io.netty.resolver.dns.DnsCache, io.netty.resolver.dns.AuthoritativeDnsServerCache)
{
io.netty.resolver.dns.AuthoritativeDnsServerCache v3;
java.lang.AssertionError v18;
io.netty.resolver.dns.DnsCache v2;
java.net.InetAddress v11, v16;
int v13, v14, v22, v23;
java.lang.String v7;
boolean v17, v9;
io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer v19, v20, v4;
io.netty.resolver.dns.DnsNameResolver v1;
io.netty.channel.EventLoop v6;
java.net.InetSocketAddress v12, v21, v5;
io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList v0;
java.util.List v8;
java.lang.Object v10, v15;
v0 := @this: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList;
v1 := @parameter0: io.netty.resolver.dns.DnsNameResolver;
v2 := @parameter1: io.netty.resolver.dns.DnsCache;
v3 := @parameter2: io.netty.resolver.dns.AuthoritativeDnsServerCache;
v4 = v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer head>;
label1:
if v4 == null goto label5;
v5 = v4.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: java.net.InetSocketAddress address>;
if v5 != null goto label4;
v6 = virtualinvoke v1.<io.netty.resolver.dns.DnsNameResolver: io.netty.channel.EventLoop executor()>();
staticinvoke <io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList: void cacheUnresolved(io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer,io.netty.resolver.dns.AuthoritativeDnsServerCache,io.netty.channel.EventLoop)>(v4, v3, v6);
v7 = v4.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: java.lang.String nsName>;
v8 = interfaceinvoke v2.<io.netty.resolver.dns.DnsCache: java.util.List get(java.lang.String,io.netty.handler.codec.dns.DnsRecord[])>(v7, null);
if v8 == null goto label4;
v9 = interfaceinvoke v8.<java.util.List: boolean isEmpty()>();
if v9 != 0 goto label4;
v10 = interfaceinvoke v8.<java.util.List: java.lang.Object get(int)>(0);
v11 = interfaceinvoke v10.<io.netty.resolver.dns.DnsCacheEntry: java.net.InetAddress address()>();
if v11 == null goto label4;
v12 = virtualinvoke v1.<io.netty.resolver.dns.DnsNameResolver: java.net.InetSocketAddress newRedirectServerAddress(java.net.InetAddress)>(v11);
virtualinvoke v4.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: void update(java.net.InetSocketAddress)>(v12);
v13 = 1;
label2:
v14 = interfaceinvoke v8.<java.util.List: int size()>();
if v13 >= v14 goto label4;
v15 = interfaceinvoke v8.<java.util.List: java.lang.Object get(int)>(v13);
v16 = interfaceinvoke v15.<io.netty.resolver.dns.DnsCacheEntry: java.net.InetAddress address()>();
v17 = <io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList: boolean $assertionsDisabled>;
if v17 != 0 goto label3;
if v16 != null goto label3;
v18 = new java.lang.AssertionError;
specialinvoke v18.<java.lang.AssertionError: void <init>(java.lang.Object)>("Cache returned a cached failure, should never return anything else");
throw v18;
label3:
v19 = new io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer;
specialinvoke v19.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: void <init>(io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer)>(v4);
v20 = v4.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer next>;
v19.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer next> = v20;
v4.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer next> = v19;
v4 = v19;
v21 = virtualinvoke v1.<io.netty.resolver.dns.DnsNameResolver: java.net.InetSocketAddress newRedirectServerAddress(java.net.InetAddress)>(v16);
virtualinvoke v19.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: void update(java.net.InetSocketAddress)>(v21);
v22 = v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList: int nameServerCount>;
v23 = v22 + 1;
v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList: int nameServerCount> = v23;
v13 = v13 + 1;
goto label2;
label4:
v4 = v4.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer next>;
goto label1;
label5:
return;
}
private static void cacheUnresolved(io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer, io.netty.resolver.dns.AuthoritativeDnsServerCache, io.netty.channel.EventLoop)
{
io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer v0;
io.netty.resolver.dns.AuthoritativeDnsServerCache v1;
java.lang.String v3;
io.netty.channel.EventLoop v2;
java.net.InetSocketAddress v4;
v0 := @parameter0: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer;
v1 := @parameter1: io.netty.resolver.dns.AuthoritativeDnsServerCache;
v2 := @parameter2: io.netty.channel.EventLoop;
v3 = v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: java.lang.String nsName>;
v4 = staticinvoke <java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>(v3, 53);
v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: java.net.InetSocketAddress address> = v4;
staticinvoke <io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList: void cache(io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer,io.netty.resolver.dns.AuthoritativeDnsServerCache,io.netty.channel.EventLoop)>(v0, v1, v2);
return;
}
private static void cache(io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer, io.netty.resolver.dns.AuthoritativeDnsServerCache, io.netty.channel.EventLoop)
{
io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer v0;
io.netty.resolver.dns.AuthoritativeDnsServerCache v1;
long v6;
java.lang.String v4;
io.netty.channel.EventLoop v2;
java.net.InetSocketAddress v5;
boolean v3;
v0 := @parameter0: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer;
v1 := @parameter1: io.netty.resolver.dns.AuthoritativeDnsServerCache;
v2 := @parameter2: io.netty.channel.EventLoop;
v3 = virtualinvoke v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: boolean isRootServer()>();
if v3 != 0 goto label1;
v4 = v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: java.lang.String domainName>;
v5 = v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: java.net.InetSocketAddress address>;
v6 = v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: long ttl>;
interfaceinvoke v1.<io.netty.resolver.dns.AuthoritativeDnsServerCache: void cache(java.lang.String,java.net.InetSocketAddress,long,io.netty.channel.EventLoop)>(v4, v5, v6, v2);
label1:
return;
}
boolean isEmpty()
{
int v1;
boolean v2;
io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList v0;
v0 := @this: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList;
v1 = v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList: int nameServerCount>;
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
java.util.List addressList()
{
io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer v3;
int v2;
java.net.InetSocketAddress v4, v5;
io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList v0;
java.util.ArrayList v1;
v0 := @this: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList;
v1 = new java.util.ArrayList;
v2 = v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList: int nameServerCount>;
specialinvoke v1.<java.util.ArrayList: void <init>(int)>(v2);
v3 = v0.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer head>;
label1:
if v3 == null goto label3;
v4 = v3.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: java.net.InetSocketAddress address>;
if v4 == null goto label2;
v5 = v3.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: java.net.InetSocketAddress address>;
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v5);
label2:
v3 = v3.<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer: io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServer next>;
goto label1;
label3:
return v1;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/resolver/dns/DnsResolveContext;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.resolver.dns.DnsResolveContext$AuthoritativeNameServerList: boolean $assertionsDisabled> = v2;
return;
}
}