public final class io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider extends java.lang.Object implements io.netty.resolver.dns.DnsServerAddressStreamProvider
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private static final java.util.regex.Pattern WHITESPACE_PATTERN;
private static final java.lang.String RES_OPTIONS;
private static final java.lang.String ETC_RESOLV_CONF_FILE;
private static final java.lang.String ETC_RESOLVER_DIR;
private static final java.lang.String NAMESERVER_ROW_LABEL;
private static final java.lang.String SORTLIST_ROW_LABEL;
private static final java.lang.String OPTIONS_ROW_LABEL;
private static final java.lang.String OPTIONS_ROTATE_FLAG;
private static final java.lang.String DOMAIN_ROW_LABEL;
private static final java.lang.String SEARCH_ROW_LABEL;
private static final java.lang.String PORT_ROW_LABEL;
private final io.netty.resolver.dns.DnsServerAddresses defaultNameServerAddresses;
private final java.util.Map domainToNameServerStreamMap;
static io.netty.resolver.dns.DnsServerAddressStreamProvider parseSilently()
{
io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider v8;
java.lang.Object[] v7;
io.netty.resolver.dns.DnsServerAddressStreamProvider v2;
java.lang.Exception v3;
io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider v0;
io.netty.util.internal.logging.InternalLogger v4, v6;
boolean v1, v5;
label1:
v0 = new io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider;
specialinvoke v0.<io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: void <init>(java.lang.String,java.lang.String)>("/etc/resolv.conf", "/etc/resolver");
v1 = specialinvoke v0.<io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: boolean mayOverrideNameServers()>();
if v1 == 0 goto label2;
v2 = v0;
goto label3;
label2:
v2 = <io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider: io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider INSTANCE>;
label3:
return v2;
label4:
v3 := @caughtexception;
v4 = <io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: io.netty.util.internal.logging.InternalLogger logger>;
v5 = interfaceinvoke v4.<io.netty.util.internal.logging.InternalLogger: boolean isDebugEnabled()>();
if v5 == 0 goto label5;
v6 = <io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: io.netty.util.internal.logging.InternalLogger logger>;
v7 = newarray (java.lang.Object)[3];
v7[0] = "/etc/resolv.conf";
v7[1] = "/etc/resolver";
v7[2] = v3;
interfaceinvoke v6.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object[])>("failed to parse {} and/or {}", v7);
label5:
v8 = <io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider: io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider INSTANCE>;
return v8;
catch java.lang.Exception from label1 to label3 with label4;
}
public transient void <init>(java.io.File, java.io.File[]) throws java.io.IOException
{
java.util.Map v18, v5, v9;
int v6;
java.lang.String v10, v15;
boolean v13, v7, v8;
java.util.Iterator v16;
java.util.Collection v12;
java.lang.IllegalArgumentException v14;
java.io.File v1;
io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider v0;
java.lang.Object v11, v17, v4;
java.io.File[] v2, v3;
v0 := @this: io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider;
v1 := @parameter0: java.io.File;
v2 := @parameter1: java.io.File[];
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = newarray (java.io.File)[1];
v4 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "etcResolvConf");
v3[0] = v4;
v5 = staticinvoke <io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: java.util.Map parse(java.io.File[])>(v3);
if v2 == null goto label1;
v6 = lengthof v2;
if v6 == 0 goto label1;
v7 = 1;
goto label2;
label1:
v7 = 0;
label2:
v8 = v7;
if v7 == 0 goto label3;
v9 = staticinvoke <io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: java.util.Map parse(java.io.File[])>(v2);
goto label4;
label3:
v9 = v5;
label4:
v0.<io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: java.util.Map domainToNameServerStreamMap> = v9;
v10 = virtualinvoke v1.<java.io.File: java.lang.String getName()>();
v11 = interfaceinvoke v5.<java.util.Map: java.lang.Object get(java.lang.Object)>(v10);
if v11 != null goto label6;
v12 = interfaceinvoke v5.<java.util.Map: java.util.Collection values()>();
v13 = interfaceinvoke v12.<java.util.Collection: boolean isEmpty()>();
if v13 == 0 goto label5;
v14 = new java.lang.IllegalArgumentException;
v15 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.io.File)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 didn\'t provide any name servers");
specialinvoke v14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v15);
throw v14;
label5:
v16 = interfaceinvoke v12.<java.util.Collection: java.util.Iterator iterator()>();
v17 = interfaceinvoke v16.<java.util.Iterator: java.lang.Object next()>();
v0.<io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: io.netty.resolver.dns.DnsServerAddresses defaultNameServerAddresses> = v17;
goto label7;
label6:
v0.<io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: io.netty.resolver.dns.DnsServerAddresses defaultNameServerAddresses> = v11;
label7:
if v8 == 0 goto label8;
v18 = v0.<io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: java.util.Map domainToNameServerStreamMap>;
interfaceinvoke v18.<java.util.Map: void putAll(java.util.Map)>(v5);
label8:
return;
}
public void <init>(java.lang.String, java.lang.String) throws java.io.IOException
{
io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider v0;
java.lang.String v1, v2;
java.io.File[] v4;
java.io.File v3, v5;
v0 := @this: io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
if v1 != null goto label1;
v3 = null;
goto label2;
label1:
v3 = new java.io.File;
specialinvoke v3.<java.io.File: void <init>(java.lang.String)>(v1);
label2:
if v2 != null goto label3;
v4 = null;
goto label4;
label3:
v5 = new java.io.File;
specialinvoke v5.<java.io.File: void <init>(java.lang.String)>(v2);
v4 = virtualinvoke v5.<java.io.File: java.io.File[] listFiles()>();
label4:
specialinvoke v0.<io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: void <init>(java.io.File,java.io.File[])>(v3, v4);
return;
}
public io.netty.resolver.dns.DnsServerAddressStream nameServerAddressStream(java.lang.String)
{
io.netty.resolver.dns.DnsServerAddressStream v6, v9;
io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider v0;
io.netty.resolver.dns.DnsServerAddresses v5;
java.util.Map v7;
int v10, v2, v3, v4;
java.lang.Object v8;
java.lang.String v1;
v0 := @this: io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider;
v1 := @parameter0: java.lang.String;
label1:
v2 = virtualinvoke v1.<java.lang.String: int indexOf(int,int)>(46, 1);
if v2 < 0 goto label2;
v3 = virtualinvoke v1.<java.lang.String: int length()>();
v4 = v3 - 1;
if v2 != v4 goto label3;
label2:
v5 = v0.<io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: io.netty.resolver.dns.DnsServerAddresses defaultNameServerAddresses>;
v6 = virtualinvoke v5.<io.netty.resolver.dns.DnsServerAddresses: io.netty.resolver.dns.DnsServerAddressStream stream()>();
return v6;
label3:
v7 = v0.<io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: java.util.Map domainToNameServerStreamMap>;
v8 = interfaceinvoke v7.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v8 == null goto label4;
v9 = virtualinvoke v8.<io.netty.resolver.dns.DnsServerAddresses: io.netty.resolver.dns.DnsServerAddressStream stream()>();
return v9;
label4:
v10 = v2 + 1;
v1 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int)>(v10);
goto label1;
}
private boolean mayOverrideNameServers()
{
io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider v0;
io.netty.resolver.dns.DnsServerAddresses v3;
io.netty.resolver.dns.DnsServerAddressStream v4;
java.util.Map v1;
java.net.InetSocketAddress v5;
boolean v2, v6;
v0 := @this: io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider;
v1 = v0.<io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: java.util.Map domainToNameServerStreamMap>;
v2 = interfaceinvoke v1.<java.util.Map: boolean isEmpty()>();
if v2 == 0 goto label1;
v3 = v0.<io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: io.netty.resolver.dns.DnsServerAddresses defaultNameServerAddresses>;
v4 = virtualinvoke v3.<io.netty.resolver.dns.DnsServerAddresses: io.netty.resolver.dns.DnsServerAddressStream stream()>();
v5 = interfaceinvoke v4.<io.netty.resolver.dns.DnsServerAddressStream: java.net.InetSocketAddress next()>();
if v5 == null goto label2;
label1:
v6 = 1;
goto label3;
label2:
v6 = 0;
label3:
return v6;
}
private static transient java.util.Map parse(java.io.File[]) throws java.io.IOException
{
io.netty.util.internal.logging.InternalLogger v66, v68;
java.lang.Throwable v70;
java.util.ArrayList v16, v17, v57;
java.lang.String v18, v21, v22, v27, v31, v34, v39, v4, v46, v48, v5, v51, v55, v59, v63, v64;
java.io.File v11;
java.io.BufferedReader v14, v15;
boolean v12, v19, v23, v25, v26, v40, v41, v50, v56, v58, v6, v65, v69, v7, v8;
java.net.InetSocketAddress v49;
java.util.HashMap v1;
int v10, v2, v20, v28, v29, v3, v32, v33, v35, v36, v42, v43, v44, v47, v52, v53, v60, v61, v9;
char v24, v37;
java.lang.IllegalArgumentException v30, v38, v45, v54, v62, v67;
java.io.FileReader v13;
java.io.File[] v0;
v0 := @parameter0: java.io.File[];
v1 = new java.util.HashMap;
v2 = lengthof v0;
v3 = v2 << 1;
specialinvoke v1.<java.util.HashMap: void <init>(int)>(v3);
v4 = <io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: java.lang.String RES_OPTIONS>;
if v4 == null goto label01;
v5 = <io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: java.lang.String RES_OPTIONS>;
v6 = virtualinvoke v5.<java.lang.String: boolean contains(java.lang.CharSequence)>("rotate");
if v6 == 0 goto label01;
v7 = 1;
goto label02;
label01:
v7 = 0;
label02:
v8 = v7;
v9 = lengthof v0;
v10 = 0;
label03:
if v10 >= v9 goto label30;
v11 = v0[v10];
v12 = virtualinvoke v11.<java.io.File: boolean isFile()>();
if v12 == 0 goto label29;
v13 = new java.io.FileReader;
specialinvoke v13.<java.io.FileReader: void <init>(java.io.File)>(v11);
v14 = null;
label04:
v15 = new java.io.BufferedReader;
specialinvoke v15.<java.io.BufferedReader: void <init>(java.io.Reader)>(v13);
v14 = v15;
v16 = new java.util.ArrayList;
specialinvoke v16.<java.util.ArrayList: void <init>(int)>(2);
v17 = v16;
v18 = virtualinvoke v11.<java.io.File: java.lang.String getName()>();
v19 = v8;
v20 = 53;
label05:
v21 = virtualinvoke v15.<java.io.BufferedReader: java.lang.String readLine()>();
if v21 == null goto label24;
v22 = virtualinvoke v21.<java.lang.String: java.lang.String trim()>();
label06:
v23 = virtualinvoke v22.<java.lang.String: boolean isEmpty()>();
if v23 != 0 goto label05;
v24 = virtualinvoke v22.<java.lang.String: char charAt(int)>(0);
if v24 == 35 goto label05;
if v24 == 59 goto label05;
label07:
if v19 != 0 goto label08;
v25 = virtualinvoke v22.<java.lang.String: boolean startsWith(java.lang.String)>("options ");
if v25 == 0 goto label08;
v19 = virtualinvoke v22.<java.lang.String: boolean contains(java.lang.CharSequence)>("rotate");
goto label05;
label08:
v26 = virtualinvoke v22.<java.lang.String: boolean startsWith(java.lang.String)>("nameserver");
if v26 == 0 goto label16;
v27 = "nameserver";
v28 = virtualinvoke v27.<java.lang.String: int length()>();
v29 = staticinvoke <io.netty.util.internal.StringUtil: int indexOfNonWhiteSpace(java.lang.CharSequence,int)>(v22, v28);
if v29 >= 0 goto label09;
v30 = new java.lang.IllegalArgumentException;
v31 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.io.File,java.lang.String)>(v11, v22) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("error parsing label nameserver in file \u0001. value: \u0001");
specialinvoke v30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v31);
throw v30;
label09:
v32 = staticinvoke <io.netty.util.internal.StringUtil: int indexOfWhiteSpace(java.lang.CharSequence,int)>(v22, v29);
v33 = (int) -1;
if v32 != v33 goto label10;
v34 = virtualinvoke v22.<java.lang.String: java.lang.String substring(int)>(v29);
goto label13;
label10:
v35 = staticinvoke <io.netty.util.internal.StringUtil: int indexOfNonWhiteSpace(java.lang.CharSequence,int)>(v22, v32);
v36 = (int) -1;
if v35 == v36 goto label11;
v37 = virtualinvoke v22.<java.lang.String: char charAt(int)>(v35);
if v37 == 35 goto label12;
label11:
v38 = new java.lang.IllegalArgumentException;
v39 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.io.File,java.lang.String)>(v11, v22) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("error parsing label nameserver in file \u0001. value: \u0001");
specialinvoke v38.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v39);
throw v38;
label12:
v34 = virtualinvoke v22.<java.lang.String: java.lang.String substring(int,int)>(v29, v32);
label13:
v40 = staticinvoke <io.netty.util.NetUtil: boolean isValidIpV4Address(java.lang.String)>(v34);
if v40 != 0 goto label15;
v41 = staticinvoke <io.netty.util.NetUtil: boolean isValidIpV6Address(java.lang.String)>(v34);
if v41 != 0 goto label15;
v42 = virtualinvoke v34.<java.lang.String: int lastIndexOf(int)>(46);
v43 = v42 + 1;
v44 = virtualinvoke v34.<java.lang.String: int length()>();
if v43 < v44 goto label14;
v45 = new java.lang.IllegalArgumentException;
v46 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.io.File,java.lang.String)>(v11, v22) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("error parsing label nameserver in file \u0001. invalid IP value: \u0001");
specialinvoke v45.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v46);
throw v45;
label14:
v47 = v42 + 1;
v48 = virtualinvoke v34.<java.lang.String: java.lang.String substring(int)>(v47);
v20 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v48);
v34 = virtualinvoke v34.<java.lang.String: java.lang.String substring(int,int)>(0, v42);
label15:
v49 = staticinvoke <io.netty.util.internal.SocketUtils: java.net.InetSocketAddress socketAddress(java.lang.String,int)>(v34, v20);
interfaceinvoke v17.<java.util.List: boolean add(java.lang.Object)>(v49);
goto label05;
label16:
v50 = virtualinvoke v22.<java.lang.String: boolean startsWith(java.lang.String)>("domain");
if v50 == 0 goto label19;
v51 = "domain";
v52 = virtualinvoke v51.<java.lang.String: int length()>();
v53 = staticinvoke <io.netty.util.internal.StringUtil: int indexOfNonWhiteSpace(java.lang.CharSequence,int)>(v22, v52);
if v53 >= 0 goto label17;
v54 = new java.lang.IllegalArgumentException;
v55 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.io.File,java.lang.String)>(v11, v22) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("error parsing label domain in file \u0001 value: \u0001");
specialinvoke v54.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v55);
throw v54;
label17:
v18 = virtualinvoke v22.<java.lang.String: java.lang.String substring(int)>(v53);
v56 = interfaceinvoke v17.<java.util.List: boolean isEmpty()>();
if v56 != 0 goto label18;
staticinvoke <io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: void putIfAbsent(java.util.Map,java.lang.String,java.util.List,boolean)>(v1, v18, v17, v19);
label18:
v57 = new java.util.ArrayList;
specialinvoke v57.<java.util.ArrayList: void <init>(int)>(2);
v17 = v57;
goto label05;
label19:
v58 = virtualinvoke v22.<java.lang.String: boolean startsWith(java.lang.String)>("port");
if v58 == 0 goto label21;
v59 = "port";
v60 = virtualinvoke v59.<java.lang.String: int length()>();
v61 = staticinvoke <io.netty.util.internal.StringUtil: int indexOfNonWhiteSpace(java.lang.CharSequence,int)>(v22, v60);
if v61 >= 0 goto label20;
v62 = new java.lang.IllegalArgumentException;
v63 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.io.File,java.lang.String)>(v11, v22) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("error parsing label port in file \u0001 value: \u0001");
specialinvoke v62.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v63);
throw v62;
label20:
v64 = virtualinvoke v22.<java.lang.String: java.lang.String substring(int)>(v61);
v20 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v64);
goto label05;
label21:
v65 = virtualinvoke v22.<java.lang.String: boolean startsWith(java.lang.String)>("sortlist");
if v65 == 0 goto label05;
v66 = <io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v66.<io.netty.util.internal.logging.InternalLogger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("row type {} not supported. Ignoring line: {}", "sortlist", v22);
label22:
goto label05;
label23:
v67 := @caughtexception;
v68 = <io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v68.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Could not parse entry. Ignoring line: {}", v22, v67);
goto label05;
label24:
v69 = interfaceinvoke v17.<java.util.List: boolean isEmpty()>();
if v69 != 0 goto label25;
staticinvoke <io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: void putIfAbsent(java.util.Map,java.lang.String,java.util.List,boolean)>(v1, v18, v17, v19);
label25:
virtualinvoke v15.<java.io.BufferedReader: void close()>();
goto label29;
label26:
v70 := @caughtexception;
if v14 != null goto label27;
virtualinvoke v13.<java.io.FileReader: void close()>();
goto label28;
label27:
virtualinvoke v14.<java.io.BufferedReader: void close()>();
label28:
throw v70;
label29:
v10 = v10 + 1;
goto label03;
label30:
return v1;
catch java.lang.IllegalArgumentException from label06 to label07 with label23;
catch java.lang.IllegalArgumentException from label07 to label22 with label23;
catch java.lang.Throwable from label04 to label25 with label26;
}
private static void putIfAbsent(java.util.Map, java.lang.String, java.util.List, boolean)
{
java.util.List v2;
io.netty.resolver.dns.DnsServerAddresses v4;
java.util.Map v0;
java.lang.String v1;
boolean v3;
v0 := @parameter0: java.util.Map;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.util.List;
v3 := @parameter3: boolean;
if v3 == 0 goto label1;
v4 = staticinvoke <io.netty.resolver.dns.DnsServerAddresses: io.netty.resolver.dns.DnsServerAddresses rotational(java.lang.Iterable)>(v2);
goto label2;
label1:
v4 = staticinvoke <io.netty.resolver.dns.DnsServerAddresses: io.netty.resolver.dns.DnsServerAddresses sequential(java.lang.Iterable)>(v2);
label2:
staticinvoke <io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: void putIfAbsent(java.util.Map,java.lang.String,io.netty.resolver.dns.DnsServerAddresses)>(v0, v1, v4);
return;
}
private static void putIfAbsent(java.util.Map, java.lang.String, io.netty.resolver.dns.DnsServerAddresses)
{
java.lang.Object[] v7;
io.netty.resolver.dns.DnsServerAddresses v2;
io.netty.util.internal.logging.InternalLogger v4, v6;
java.util.Map v0;
java.lang.Object v3;
java.lang.String v1;
boolean v5;
v0 := @parameter0: java.util.Map;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: io.netty.resolver.dns.DnsServerAddresses;
v3 = interfaceinvoke v0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v2);
if v3 == null goto label1;
interfaceinvoke v0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v3);
v4 = <io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: io.netty.util.internal.logging.InternalLogger logger>;
v5 = interfaceinvoke v4.<io.netty.util.internal.logging.InternalLogger: boolean isDebugEnabled()>();
if v5 == 0 goto label1;
v6 = <io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: io.netty.util.internal.logging.InternalLogger logger>;
v7 = newarray (java.lang.Object)[3];
v7[0] = v1;
v7[1] = v3;
v7[2] = v2;
interfaceinvoke v6.<io.netty.util.internal.logging.InternalLogger: void debug(java.lang.String,java.lang.Object[])>("Domain name {} already maps to addresses {} so new addresses {} will be discarded", v7);
label1:
return;
}
static io.netty.resolver.dns.UnixResolverOptions parseEtcResolverOptions() throws java.io.IOException
{
io.netty.resolver.dns.UnixResolverOptions v1;
java.io.File v0;
v0 = new java.io.File;
specialinvoke v0.<java.io.File: void <init>(java.lang.String)>("/etc/resolv.conf");
v1 = staticinvoke <io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: io.netty.resolver.dns.UnixResolverOptions parseEtcResolverOptions(java.io.File)>(v0);
return v1;
}
static io.netty.resolver.dns.UnixResolverOptions parseEtcResolverOptions(java.io.File) throws java.io.IOException
{
java.lang.Throwable v10;
java.io.File v0;
io.netty.resolver.dns.UnixResolverOptions$Builder v1;
io.netty.resolver.dns.UnixResolverOptions v13;
int v8;
java.io.BufferedReader v3, v4;
java.io.FileReader v2;
java.lang.String v11, v12, v5, v7, v9;
boolean v6;
v0 := @parameter0: java.io.File;
v1 = staticinvoke <io.netty.resolver.dns.UnixResolverOptions: io.netty.resolver.dns.UnixResolverOptions$Builder newBuilder()>();
v2 = new java.io.FileReader;
specialinvoke v2.<java.io.FileReader: void <init>(java.io.File)>(v0);
v3 = null;
label1:
v4 = new java.io.BufferedReader;
specialinvoke v4.<java.io.BufferedReader: void <init>(java.io.Reader)>(v2);
v3 = v4;
label2:
v5 = virtualinvoke v4.<java.io.BufferedReader: java.lang.String readLine()>();
if v5 == null goto label3;
v6 = virtualinvoke v5.<java.lang.String: boolean startsWith(java.lang.String)>("options ");
if v6 == 0 goto label2;
v7 = "options ";
v8 = virtualinvoke v7.<java.lang.String: int length()>();
v9 = virtualinvoke v5.<java.lang.String: java.lang.String substring(int)>(v8);
staticinvoke <io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: void parseResOptions(java.lang.String,io.netty.resolver.dns.UnixResolverOptions$Builder)>(v9, v1);
label3:
virtualinvoke v4.<java.io.BufferedReader: void close()>();
goto label7;
label4:
v10 := @caughtexception;
if v3 != null goto label5;
virtualinvoke v2.<java.io.FileReader: void close()>();
goto label6;
label5:
virtualinvoke v3.<java.io.BufferedReader: void close()>();
label6:
throw v10;
label7:
v11 = <io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: java.lang.String RES_OPTIONS>;
if v11 == null goto label8;
v12 = <io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: java.lang.String RES_OPTIONS>;
staticinvoke <io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: void parseResOptions(java.lang.String,io.netty.resolver.dns.UnixResolverOptions$Builder)>(v12, v1);
label8:
v13 = virtualinvoke v1.<io.netty.resolver.dns.UnixResolverOptions$Builder: io.netty.resolver.dns.UnixResolverOptions build()>();
return v13;
catch java.lang.Throwable from label1 to label3 with label4;
}
private static void parseResOptions(java.lang.String, io.netty.resolver.dns.UnixResolverOptions$Builder)
{
java.lang.NumberFormatException v13;
java.lang.String[] v3;
io.netty.resolver.dns.UnixResolverOptions$Builder v1;
int v10, v12, v4, v5, v8;
java.lang.String v0, v6;
java.util.regex.Pattern v2;
boolean v11, v7, v9;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: io.netty.resolver.dns.UnixResolverOptions$Builder;
v2 = <io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: java.util.regex.Pattern WHITESPACE_PATTERN>;
v3 = virtualinvoke v2.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>(v0);
v4 = lengthof v3;
v5 = 0;
label1:
if v5 >= v4 goto label8;
v6 = v3[v5];
label2:
v7 = virtualinvoke v6.<java.lang.String: boolean startsWith(java.lang.String)>("ndots:");
if v7 == 0 goto label3;
v8 = staticinvoke <io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: int parseResIntOption(java.lang.String,java.lang.String)>(v6, "ndots:");
virtualinvoke v1.<io.netty.resolver.dns.UnixResolverOptions$Builder: void setNdots(int)>(v8);
goto label7;
label3:
v9 = virtualinvoke v6.<java.lang.String: boolean startsWith(java.lang.String)>("attempts:");
if v9 == 0 goto label4;
v10 = staticinvoke <io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: int parseResIntOption(java.lang.String,java.lang.String)>(v6, "attempts:");
virtualinvoke v1.<io.netty.resolver.dns.UnixResolverOptions$Builder: void setAttempts(int)>(v10);
goto label7;
label4:
v11 = virtualinvoke v6.<java.lang.String: boolean startsWith(java.lang.String)>("timeout:");
if v11 == 0 goto label7;
v12 = staticinvoke <io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: int parseResIntOption(java.lang.String,java.lang.String)>(v6, "timeout:");
virtualinvoke v1.<io.netty.resolver.dns.UnixResolverOptions$Builder: void setTimeout(int)>(v12);
label5:
goto label7;
label6:
v13 := @caughtexception;
label7:
v5 = v5 + 1;
goto label1;
label8:
return;
catch java.lang.NumberFormatException from label2 to label5 with label6;
}
private static int parseResIntOption(java.lang.String, java.lang.String)
{
int v2, v4;
java.lang.String v0, v1, v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = virtualinvoke v1.<java.lang.String: int length()>();
v3 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(v2);
v4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v3);
return v4;
}
static java.util.List parseEtcResolverSearchDomains() throws java.io.IOException
{
java.util.List v1;
java.io.File v0;
v0 = new java.io.File;
specialinvoke v0.<java.io.File: void <init>(java.lang.String)>("/etc/resolv.conf");
v1 = staticinvoke <io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: java.util.List parseEtcResolverSearchDomains(java.io.File)>(v0);
return v1;
}
static java.util.List parseEtcResolverSearchDomains(java.io.File) throws java.io.IOException
{
java.lang.Throwable v18;
java.lang.String[] v17;
java.util.ArrayList v2;
int v10, v13, v14, v9;
java.lang.String v1, v12, v16, v6, v8;
boolean v11, v19, v7;
java.io.File v0;
java.util.List v20;
java.io.BufferedReader v4, v5;
java.io.FileReader v3;
java.util.regex.Pattern v15;
v0 := @parameter0: java.io.File;
v1 = null;
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
v3 = new java.io.FileReader;
specialinvoke v3.<java.io.FileReader: void <init>(java.io.File)>(v0);
v4 = null;
label01:
v5 = new java.io.BufferedReader;
specialinvoke v5.<java.io.BufferedReader: void <init>(java.io.Reader)>(v3);
v4 = v5;
label02:
v6 = virtualinvoke v5.<java.io.BufferedReader: java.lang.String readLine()>();
if v6 == null goto label04;
if v1 != null goto label03;
v7 = virtualinvoke v6.<java.lang.String: boolean startsWith(java.lang.String)>("domain");
if v7 == 0 goto label03;
v8 = "domain";
v9 = virtualinvoke v8.<java.lang.String: int length()>();
v10 = staticinvoke <io.netty.util.internal.StringUtil: int indexOfNonWhiteSpace(java.lang.CharSequence,int)>(v6, v9);
if v10 < 0 goto label02;
v1 = virtualinvoke v6.<java.lang.String: java.lang.String substring(int)>(v10);
goto label02;
label03:
v11 = virtualinvoke v6.<java.lang.String: boolean startsWith(java.lang.String)>("search");
if v11 == 0 goto label02;
v12 = "search";
v13 = virtualinvoke v12.<java.lang.String: int length()>();
v14 = staticinvoke <io.netty.util.internal.StringUtil: int indexOfNonWhiteSpace(java.lang.CharSequence,int)>(v6, v13);
if v14 < 0 goto label02;
v15 = <io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: java.util.regex.Pattern WHITESPACE_PATTERN>;
v16 = virtualinvoke v6.<java.lang.String: java.lang.String substring(int)>(v14);
v17 = virtualinvoke v15.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>(v16);
staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>(v2, v17);
goto label02;
label04:
virtualinvoke v5.<java.io.BufferedReader: void close()>();
goto label08;
label05:
v18 := @caughtexception;
if v4 != null goto label06;
virtualinvoke v3.<java.io.FileReader: void close()>();
goto label07;
label06:
virtualinvoke v4.<java.io.BufferedReader: void close()>();
label07:
throw v18;
label08:
if v1 == null goto label09;
v19 = interfaceinvoke v2.<java.util.List: boolean isEmpty()>();
if v19 == 0 goto label09;
v20 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(v1);
goto label10;
label09:
v20 = v2;
label10:
return v20;
catch java.lang.Throwable from label01 to label04 with label05;
}
static void <clinit>()
{
java.lang.String v2;
java.util.regex.Pattern v1;
io.netty.util.internal.logging.InternalLogger v0;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/resolver/dns/UnixResolverDnsServerAddressStreamProvider;");
<io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: io.netty.util.internal.logging.InternalLogger logger> = v0;
v1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\s+");
<io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: java.util.regex.Pattern WHITESPACE_PATTERN> = v1;
v2 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("RES_OPTIONS");
<io.netty.resolver.dns.UnixResolverDnsServerAddressStreamProvider: java.lang.String RES_OPTIONS> = v2;
return;
}
}