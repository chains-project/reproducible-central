public final class io.netty.util.AsciiString extends java.lang.Object implements java.lang.CharSequence, java.lang.Comparable
{
public static final io.netty.util.AsciiString EMPTY_STRING;
private static final char MAX_CHAR_VALUE;
public static final int INDEX_NOT_FOUND;
private final byte[] value;
private final int offset;
private final int length;
private int hash;
private java.lang.String string;
public static final io.netty.util.HashingStrategy CASE_INSENSITIVE_HASHER;
public static final io.netty.util.HashingStrategy CASE_SENSITIVE_HASHER;
public void <init>(byte[])
{
byte[] v1;
io.netty.util.AsciiString v0;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: byte[];
specialinvoke v0.<io.netty.util.AsciiString: void <init>(byte[],boolean)>(v1, 1);
return;
}
public void <init>(byte[], boolean)
{
byte[] v1;
int v3;
io.netty.util.AsciiString v0;
boolean v2;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: byte[];
v2 := @parameter1: boolean;
v3 = lengthof v1;
specialinvoke v0.<io.netty.util.AsciiString: void <init>(byte[],int,int,boolean)>(v1, 0, v3, v2);
return;
}
public void <init>(byte[], int, int, boolean)
{
byte[] v1, v5;
java.lang.IndexOutOfBoundsException v9;
io.netty.util.AsciiString v0;
int v10, v2, v3, v6, v7;
java.lang.String v11;
boolean v4, v8;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
if v4 == 0 goto label1;
v5 = newarray (byte)[v3];
v6 = lengthof v5;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v1, v2, v5, 0, v6);
v0.<io.netty.util.AsciiString: byte[] value> = v5;
v0.<io.netty.util.AsciiString: int offset> = 0;
goto label3;
label1:
v7 = lengthof v1;
v8 = staticinvoke <io.netty.util.internal.MathUtil: boolean isOutOfBounds(int,int,int)>(v2, v3, v7);
if v8 == 0 goto label2;
v9 = new java.lang.IndexOutOfBoundsException;
v10 = lengthof v1;
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int,int)>(v2, v3, v10) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("expected: 0 <= start(\u0001) <= start + length(\u0001) <= value.length(\u0001)");
specialinvoke v9.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v11);
throw v9;
label2:
v0.<io.netty.util.AsciiString: byte[] value> = v1;
v0.<io.netty.util.AsciiString: int offset> = v2;
label3:
v0.<io.netty.util.AsciiString: int length> = v3;
return;
}
public void <init>(java.nio.ByteBuffer)
{
io.netty.util.AsciiString v0;
java.nio.ByteBuffer v1;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: java.nio.ByteBuffer;
specialinvoke v0.<io.netty.util.AsciiString: void <init>(java.nio.ByteBuffer,boolean)>(v1, 1);
return;
}
public void <init>(java.nio.ByteBuffer, boolean)
{
int v3, v4;
io.netty.util.AsciiString v0;
java.nio.ByteBuffer v1;
boolean v2;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: java.nio.ByteBuffer;
v2 := @parameter1: boolean;
v3 = virtualinvoke v1.<java.nio.ByteBuffer: int position()>();
v4 = virtualinvoke v1.<java.nio.ByteBuffer: int remaining()>();
specialinvoke v0.<io.netty.util.AsciiString: void <init>(java.nio.ByteBuffer,int,int,boolean)>(v1, v3, v4, v2);
return;
}
public void <init>(java.nio.ByteBuffer, int, int, boolean)
{
byte[] v13, v15, v16, v17, v19;
java.lang.IndexOutOfBoundsException v7;
io.netty.util.AsciiString v0;
java.nio.ByteBuffer v1;
int v11, v12, v14, v18, v2, v3, v5, v8;
java.lang.String v9;
boolean v10, v4, v6;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: java.nio.ByteBuffer;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
v5 = virtualinvoke v1.<java.nio.ByteBuffer: int capacity()>();
v6 = staticinvoke <io.netty.util.internal.MathUtil: boolean isOutOfBounds(int,int,int)>(v2, v3, v5);
if v6 == 0 goto label1;
v7 = new java.lang.IndexOutOfBoundsException;
v8 = virtualinvoke v1.<java.nio.ByteBuffer: int capacity()>();
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int,int)>(v2, v3, v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("expected: 0 <= start(\u0001) <= start + length(\u0001) <= value.capacity(\u0001)");
specialinvoke v7.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v9);
throw v7;
label1:
v10 = virtualinvoke v1.<java.nio.ByteBuffer: boolean hasArray()>();
if v10 == 0 goto label3;
if v4 == 0 goto label2;
v11 = virtualinvoke v1.<java.nio.ByteBuffer: int arrayOffset()>();
v12 = v11 + v2;
v13 = virtualinvoke v1.<java.nio.ByteBuffer: byte[] array()>();
v14 = v12 + v3;
v15 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(v13, v12, v14);
v0.<io.netty.util.AsciiString: byte[] value> = v15;
v0.<io.netty.util.AsciiString: int offset> = 0;
goto label4;
label2:
v16 = virtualinvoke v1.<java.nio.ByteBuffer: byte[] array()>();
v0.<io.netty.util.AsciiString: byte[] value> = v16;
v0.<io.netty.util.AsciiString: int offset> = v2;
goto label4;
label3:
v17 = staticinvoke <io.netty.util.internal.PlatformDependent: byte[] allocateUninitializedArray(int)>(v3);
v0.<io.netty.util.AsciiString: byte[] value> = v17;
v18 = virtualinvoke v1.<java.nio.ByteBuffer: int position()>();
v19 = v0.<io.netty.util.AsciiString: byte[] value>;
virtualinvoke v1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(v19, 0, v3);
virtualinvoke v1.<java.nio.ByteBuffer: java.nio.ByteBuffer position(int)>(v18);
v0.<io.netty.util.AsciiString: int offset> = 0;
label4:
v0.<io.netty.util.AsciiString: int length> = v3;
return;
}
public void <init>(char[])
{
int v2;
char[] v1;
io.netty.util.AsciiString v0;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: char[];
v2 = lengthof v1;
specialinvoke v0.<io.netty.util.AsciiString: void <init>(char[],int,int)>(v1, 0, v2);
return;
}
public void <init>(char[], int, int)
{
byte[] v12, v9;
java.lang.IndexOutOfBoundsException v6;
io.netty.util.AsciiString v0;
char v13;
byte v14;
int v10, v11, v2, v3, v4, v7;
char[] v1;
java.lang.String v8;
boolean v5;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v4 = lengthof v1;
v5 = staticinvoke <io.netty.util.internal.MathUtil: boolean isOutOfBounds(int,int,int)>(v2, v3, v4);
if v5 == 0 goto label1;
v6 = new java.lang.IndexOutOfBoundsException;
v7 = lengthof v1;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int,int)>(v2, v3, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("expected: 0 <= start(\u0001) <= start + length(\u0001) <= value.length(\u0001)");
specialinvoke v6.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v8);
throw v6;
label1:
v9 = staticinvoke <io.netty.util.internal.PlatformDependent: byte[] allocateUninitializedArray(int)>(v3);
v0.<io.netty.util.AsciiString: byte[] value> = v9;
v10 = 0;
v11 = v2;
label2:
if v10 >= v3 goto label3;
v12 = v0.<io.netty.util.AsciiString: byte[] value>;
v13 = v1[v11];
v14 = staticinvoke <io.netty.util.AsciiString: byte c2b(char)>(v13);
v12[v10] = v14;
v10 = v10 + 1;
v11 = v11 + 1;
goto label2;
label3:
v0.<io.netty.util.AsciiString: int offset> = 0;
v0.<io.netty.util.AsciiString: int length> = v3;
return;
}
public void <init>(char[], java.nio.charset.Charset)
{
java.nio.charset.Charset v2;
int v3;
char[] v1;
io.netty.util.AsciiString v0;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: char[];
v2 := @parameter1: java.nio.charset.Charset;
v3 = lengthof v1;
specialinvoke v0.<io.netty.util.AsciiString: void <init>(char[],java.nio.charset.Charset,int,int)>(v1, v2, 0, v3);
return;
}
public void <init>(char[], java.nio.charset.Charset, int, int)
{
byte[] v11, v14, v15;
io.netty.util.AsciiString v0;
java.nio.ByteBuffer v9;
java.nio.charset.Charset v2;
int v10, v12, v13, v16, v3, v4;
java.nio.CharBuffer v5;
java.nio.charset.CharsetEncoder v6;
char[] v1;
float v7, v8;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: char[];
v2 := @parameter1: java.nio.charset.Charset;
v3 := @parameter2: int;
v4 := @parameter3: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v5 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[],int,int)>(v1, v3, v4);
v6 = staticinvoke <io.netty.util.CharsetUtil: java.nio.charset.CharsetEncoder encoder(java.nio.charset.Charset)>(v2);
v7 = virtualinvoke v6.<java.nio.charset.CharsetEncoder: float maxBytesPerChar()>();
v8 = v7 * v4;
v9 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(v8);
virtualinvoke v6.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>(v5, v9, 1);
v10 = virtualinvoke v9.<java.nio.ByteBuffer: int arrayOffset()>();
v11 = virtualinvoke v9.<java.nio.ByteBuffer: byte[] array()>();
v12 = virtualinvoke v9.<java.nio.ByteBuffer: int position()>();
v13 = v10 + v12;
v14 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(v11, v10, v13);
v0.<io.netty.util.AsciiString: byte[] value> = v14;
v0.<io.netty.util.AsciiString: int offset> = 0;
v15 = v0.<io.netty.util.AsciiString: byte[] value>;
v16 = lengthof v15;
v0.<io.netty.util.AsciiString: int length> = v16;
return;
}
public void <init>(java.lang.CharSequence)
{
int v2;
io.netty.util.AsciiString v0;
java.lang.CharSequence v1;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: java.lang.CharSequence;
v2 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
specialinvoke v0.<io.netty.util.AsciiString: void <init>(java.lang.CharSequence,int,int)>(v1, 0, v2);
return;
}
public void <init>(java.lang.CharSequence, int, int)
{
byte[] v12, v9;
java.lang.IndexOutOfBoundsException v6;
java.lang.CharSequence v1;
io.netty.util.AsciiString v0;
char v13;
byte v14;
int v10, v11, v2, v3, v4, v7;
java.lang.String v8;
boolean v5;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 := @parameter2: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v4 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
v5 = staticinvoke <io.netty.util.internal.MathUtil: boolean isOutOfBounds(int,int,int)>(v2, v3, v4);
if v5 == 0 goto label1;
v6 = new java.lang.IndexOutOfBoundsException;
v7 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int,int)>(v2, v3, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("expected: 0 <= start(\u0001) <= start + length(\u0001) <= value.length(\u0001)");
specialinvoke v6.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v8);
throw v6;
label1:
v9 = staticinvoke <io.netty.util.internal.PlatformDependent: byte[] allocateUninitializedArray(int)>(v3);
v0.<io.netty.util.AsciiString: byte[] value> = v9;
v10 = 0;
v11 = v2;
label2:
if v10 >= v3 goto label3;
v12 = v0.<io.netty.util.AsciiString: byte[] value>;
v13 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v11);
v14 = staticinvoke <io.netty.util.AsciiString: byte c2b(char)>(v13);
v12[v10] = v14;
v10 = v10 + 1;
v11 = v11 + 1;
goto label2;
label3:
v0.<io.netty.util.AsciiString: int offset> = 0;
v0.<io.netty.util.AsciiString: int length> = v3;
return;
}
public void <init>(java.lang.CharSequence, java.nio.charset.Charset)
{
java.lang.CharSequence v1;
java.nio.charset.Charset v2;
int v3;
io.netty.util.AsciiString v0;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.nio.charset.Charset;
v3 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
specialinvoke v0.<io.netty.util.AsciiString: void <init>(java.lang.CharSequence,java.nio.charset.Charset,int,int)>(v1, v2, 0, v3);
return;
}
public void <init>(java.lang.CharSequence, java.nio.charset.Charset, int, int)
{
byte[] v12, v15, v16;
io.netty.util.AsciiString v0;
java.nio.ByteBuffer v10;
java.nio.charset.Charset v2;
int v11, v13, v14, v17, v3, v4, v5;
java.lang.CharSequence v1;
java.nio.CharBuffer v6;
java.nio.charset.CharsetEncoder v7;
float v8, v9;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: java.nio.charset.Charset;
v3 := @parameter2: int;
v4 := @parameter3: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v5 = v3 + v4;
v6 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence,int,int)>(v1, v3, v5);
v7 = staticinvoke <io.netty.util.CharsetUtil: java.nio.charset.CharsetEncoder encoder(java.nio.charset.Charset)>(v2);
v8 = virtualinvoke v7.<java.nio.charset.CharsetEncoder: float maxBytesPerChar()>();
v9 = v8 * v4;
v10 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(v9);
virtualinvoke v7.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>(v6, v10, 1);
v11 = virtualinvoke v10.<java.nio.ByteBuffer: int arrayOffset()>();
v12 = virtualinvoke v10.<java.nio.ByteBuffer: byte[] array()>();
v13 = virtualinvoke v10.<java.nio.ByteBuffer: int position()>();
v14 = v11 + v13;
v15 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(v12, v11, v14);
v0.<io.netty.util.AsciiString: byte[] value> = v15;
v0.<io.netty.util.AsciiString: int offset> = 0;
v16 = v0.<io.netty.util.AsciiString: byte[] value>;
v17 = lengthof v16;
v0.<io.netty.util.AsciiString: int length> = v17;
return;
}
public int forEachByte(io.netty.util.ByteProcessor) throws java.lang.Exception
{
int v2, v3;
io.netty.util.AsciiString v0;
io.netty.util.ByteProcessor v1;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: io.netty.util.ByteProcessor;
v2 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v3 = specialinvoke v0.<io.netty.util.AsciiString: int forEachByte0(int,int,io.netty.util.ByteProcessor)>(0, v2, v1);
return v3;
}
public int forEachByte(int, int, io.netty.util.ByteProcessor) throws java.lang.Exception
{
java.lang.IndexOutOfBoundsException v6;
io.netty.util.AsciiString v0;
io.netty.util.ByteProcessor v3;
int v1, v2, v4, v7, v9;
java.lang.String v8;
boolean v5;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: io.netty.util.ByteProcessor;
v4 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v5 = staticinvoke <io.netty.util.internal.MathUtil: boolean isOutOfBounds(int,int,int)>(v1, v2, v4);
if v5 == 0 goto label1;
v6 = new java.lang.IndexOutOfBoundsException;
v7 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int,int)>(v1, v2, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("expected: 0 <= index(\u0001) <= start + length(\u0001) <= length(\u0001)");
specialinvoke v6.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v8);
throw v6;
label1:
v9 = specialinvoke v0.<io.netty.util.AsciiString: int forEachByte0(int,int,io.netty.util.ByteProcessor)>(v1, v2, v3);
return v9;
}
private int forEachByte0(int, int, io.netty.util.ByteProcessor) throws java.lang.Exception
{
byte[] v9;
io.netty.util.AsciiString v0;
io.netty.util.ByteProcessor v3;
byte v10;
int v1, v12, v13, v14, v2, v4, v5, v6, v7, v8;
boolean v11;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: io.netty.util.ByteProcessor;
v4 = v0.<io.netty.util.AsciiString: int offset>;
v5 = v4 + v1;
v6 = v5 + v2;
v7 = v0.<io.netty.util.AsciiString: int offset>;
v8 = v7 + v1;
label1:
if v8 >= v6 goto label3;
v9 = v0.<io.netty.util.AsciiString: byte[] value>;
v10 = v9[v8];
v11 = interfaceinvoke v3.<io.netty.util.ByteProcessor: boolean process(byte)>(v10);
if v11 != 0 goto label2;
v12 = v0.<io.netty.util.AsciiString: int offset>;
v13 = v8 - v12;
return v13;
label2:
v8 = v8 + 1;
goto label1;
label3:
v14 = (int) -1;
return v14;
}
public int forEachByteDesc(io.netty.util.ByteProcessor) throws java.lang.Exception
{
int v2, v3;
io.netty.util.AsciiString v0;
io.netty.util.ByteProcessor v1;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: io.netty.util.ByteProcessor;
v2 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v3 = specialinvoke v0.<io.netty.util.AsciiString: int forEachByteDesc0(int,int,io.netty.util.ByteProcessor)>(0, v2, v1);
return v3;
}
public int forEachByteDesc(int, int, io.netty.util.ByteProcessor) throws java.lang.Exception
{
java.lang.IndexOutOfBoundsException v6;
io.netty.util.AsciiString v0;
io.netty.util.ByteProcessor v3;
int v1, v2, v4, v7, v9;
java.lang.String v8;
boolean v5;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: io.netty.util.ByteProcessor;
v4 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v5 = staticinvoke <io.netty.util.internal.MathUtil: boolean isOutOfBounds(int,int,int)>(v1, v2, v4);
if v5 == 0 goto label1;
v6 = new java.lang.IndexOutOfBoundsException;
v7 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int,int)>(v1, v2, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("expected: 0 <= index(\u0001) <= start + length(\u0001) <= length(\u0001)");
specialinvoke v6.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v8);
throw v6;
label1:
v9 = specialinvoke v0.<io.netty.util.AsciiString: int forEachByteDesc0(int,int,io.netty.util.ByteProcessor)>(v1, v2, v3);
return v9;
}
private int forEachByteDesc0(int, int, io.netty.util.ByteProcessor) throws java.lang.Exception
{
byte[] v10;
io.netty.util.AsciiString v0;
byte v11;
int v1, v13, v14, v15, v2, v4, v5, v6, v7, v8, v9;
boolean v12;
io.netty.util.ByteProcessor v3;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: io.netty.util.ByteProcessor;
v4 = v0.<io.netty.util.AsciiString: int offset>;
v5 = v4 + v1;
v6 = v0.<io.netty.util.AsciiString: int offset>;
v7 = v6 + v1;
v8 = v7 + v2;
v9 = v8 - 1;
label1:
if v9 < v5 goto label3;
v10 = v0.<io.netty.util.AsciiString: byte[] value>;
v11 = v10[v9];
v12 = interfaceinvoke v3.<io.netty.util.ByteProcessor: boolean process(byte)>(v11);
if v12 != 0 goto label2;
v13 = v0.<io.netty.util.AsciiString: int offset>;
v14 = v9 - v13;
return v14;
label2:
v9 = v9 - 1;
goto label1;
label3:
v15 = (int) -1;
return v15;
}
public byte byteAt(int)
{
byte[] v11, v7;
java.lang.IndexOutOfBoundsException v3;
io.netty.util.AsciiString v0;
byte v10, v14;
int v1, v12, v13, v2, v4, v8, v9;
java.lang.String v5;
boolean v6;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: int;
if v1 < 0 goto label1;
v2 = v0.<io.netty.util.AsciiString: int length>;
if v1 < v2 goto label2;
label1:
v3 = new java.lang.IndexOutOfBoundsException;
v4 = v0.<io.netty.util.AsciiString: int length>;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v1, v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("index: \u0001 must be in the range [0,\u0001)");
specialinvoke v3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v5);
throw v3;
label2:
v6 = staticinvoke <io.netty.util.internal.PlatformDependent: boolean hasUnsafe()>();
if v6 == 0 goto label3;
v7 = v0.<io.netty.util.AsciiString: byte[] value>;
v8 = v0.<io.netty.util.AsciiString: int offset>;
v9 = v1 + v8;
v10 = staticinvoke <io.netty.util.internal.PlatformDependent: byte getByte(byte[],int)>(v7, v9);
return v10;
label3:
v11 = v0.<io.netty.util.AsciiString: byte[] value>;
v12 = v0.<io.netty.util.AsciiString: int offset>;
v13 = v1 + v12;
v14 = v11[v13];
return v14;
}
public boolean isEmpty()
{
int v1;
io.netty.util.AsciiString v0;
boolean v2;
v0 := @this: io.netty.util.AsciiString;
v1 = v0.<io.netty.util.AsciiString: int length>;
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public int length()
{
int v1;
io.netty.util.AsciiString v0;
v0 := @this: io.netty.util.AsciiString;
v1 = v0.<io.netty.util.AsciiString: int length>;
return v1;
}
public void arrayChanged()
{
io.netty.util.AsciiString v0;
v0 := @this: io.netty.util.AsciiString;
v0.<io.netty.util.AsciiString: java.lang.String string> = null;
v0.<io.netty.util.AsciiString: int hash> = 0;
return;
}
public byte[] array()
{
byte[] v1;
io.netty.util.AsciiString v0;
v0 := @this: io.netty.util.AsciiString;
v1 = v0.<io.netty.util.AsciiString: byte[] value>;
return v1;
}
public int arrayOffset()
{
int v1;
io.netty.util.AsciiString v0;
v0 := @this: io.netty.util.AsciiString;
v1 = v0.<io.netty.util.AsciiString: int offset>;
return v1;
}
public boolean isEntireArrayUsed()
{
byte[] v3;
int v1, v2, v4;
io.netty.util.AsciiString v0;
boolean v5;
v0 := @this: io.netty.util.AsciiString;
v1 = v0.<io.netty.util.AsciiString: int offset>;
if v1 != 0 goto label1;
v2 = v0.<io.netty.util.AsciiString: int length>;
v3 = v0.<io.netty.util.AsciiString: byte[] value>;
v4 = lengthof v3;
if v2 != v4 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
public byte[] toByteArray()
{
int v1;
byte[] v2;
io.netty.util.AsciiString v0;
v0 := @this: io.netty.util.AsciiString;
v1 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v2 = virtualinvoke v0.<io.netty.util.AsciiString: byte[] toByteArray(int,int)>(0, v1);
return v2;
}
public byte[] toByteArray(int, int)
{
byte[] v3, v8;
io.netty.util.AsciiString v0;
int v1, v2, v4, v5, v6, v7;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v0.<io.netty.util.AsciiString: byte[] value>;
v4 = v0.<io.netty.util.AsciiString: int offset>;
v5 = v1 + v4;
v6 = v0.<io.netty.util.AsciiString: int offset>;
v7 = v2 + v6;
v8 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(v3, v5, v7);
return v8;
}
public void copy(int, byte[], int, int)
{
byte[] v10, v2;
java.lang.IndexOutOfBoundsException v7;
io.netty.util.AsciiString v0;
int v1, v11, v12, v3, v4, v5, v8;
java.lang.Object v13;
java.lang.String v9;
boolean v6;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: int;
v2 := @parameter1: byte[];
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v6 = staticinvoke <io.netty.util.internal.MathUtil: boolean isOutOfBounds(int,int,int)>(v1, v4, v5);
if v6 == 0 goto label1;
v7 = new java.lang.IndexOutOfBoundsException;
v8 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int,int)>(v1, v4, v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("expected: 0 <= srcIdx(\u0001) <= srcIdx + length(\u0001) <= srcLen(\u0001)");
specialinvoke v7.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v9);
throw v7;
label1:
v10 = v0.<io.netty.util.AsciiString: byte[] value>;
v11 = v0.<io.netty.util.AsciiString: int offset>;
v12 = v1 + v11;
v13 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "dst");
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v10, v12, v13, v3, v4);
return;
}
public char charAt(int)
{
byte v2;
int v1;
io.netty.util.AsciiString v0;
char v3;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<io.netty.util.AsciiString: byte byteAt(int)>(v1);
v3 = staticinvoke <io.netty.util.AsciiString: char b2c(byte)>(v2);
return v3;
}
public boolean contains(java.lang.CharSequence)
{
java.lang.CharSequence v1;
int v2;
io.netty.util.AsciiString v0;
boolean v3;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: java.lang.CharSequence;
v2 = virtualinvoke v0.<io.netty.util.AsciiString: int indexOf(java.lang.CharSequence)>(v1);
if v2 < 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public int compareTo(java.lang.CharSequence)
{
byte[] v7;
java.lang.CharSequence v1;
io.netty.util.AsciiString v0;
char v10, v9;
byte v8;
int v11, v12, v2, v3, v4, v5, v6;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: java.lang.CharSequence;
if v0 != v1 goto label1;
return 0;
label1:
v2 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v3 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
v4 = staticinvoke <java.lang.Math: int min(int,int)>(v2, v3);
v5 = 0;
v6 = virtualinvoke v0.<io.netty.util.AsciiString: int arrayOffset()>();
label2:
if v5 >= v4 goto label4;
v7 = v0.<io.netty.util.AsciiString: byte[] value>;
v8 = v7[v6];
v9 = staticinvoke <io.netty.util.AsciiString: char b2c(byte)>(v8);
v10 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v5);
v11 = v9 - v10;
if v11 == 0 goto label3;
return v11;
label3:
v5 = v5 + 1;
v6 = v6 + 1;
goto label2;
label4:
v12 = v2 - v3;
return v12;
}
public io.netty.util.AsciiString concat(java.lang.CharSequence)
{
byte[] v10, v16, v17, v7, v8;
io.netty.util.AsciiString v0, v12, v14, v24;
byte v23;
int v11, v15, v18, v19, v2, v20, v21, v3, v6, v9;
boolean v13, v4, v5;
java.lang.CharSequence v1;
char v22;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: java.lang.CharSequence;
v2 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v3 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
if v3 != 0 goto label1;
return v0;
label1:
v4 = v1 instanceof io.netty.util.AsciiString;
if v4 == 0 goto label3;
v5 = virtualinvoke v0.<io.netty.util.AsciiString: boolean isEmpty()>();
if v5 == 0 goto label2;
return v1;
label2:
v6 = v2 + v3;
v7 = staticinvoke <io.netty.util.internal.PlatformDependent: byte[] allocateUninitializedArray(int)>(v6);
v8 = v0.<io.netty.util.AsciiString: byte[] value>;
v9 = virtualinvoke v0.<io.netty.util.AsciiString: int arrayOffset()>();
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v8, v9, v7, 0, v2);
v10 = v1.<io.netty.util.AsciiString: byte[] value>;
v11 = virtualinvoke v1.<io.netty.util.AsciiString: int arrayOffset()>();
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v10, v11, v7, v2, v3);
v12 = new io.netty.util.AsciiString;
specialinvoke v12.<io.netty.util.AsciiString: void <init>(byte[],boolean)>(v7, 0);
return v12;
label3:
v13 = virtualinvoke v0.<io.netty.util.AsciiString: boolean isEmpty()>();
if v13 == 0 goto label4;
v14 = new io.netty.util.AsciiString;
specialinvoke v14.<io.netty.util.AsciiString: void <init>(java.lang.CharSequence)>(v1);
return v14;
label4:
v15 = v2 + v3;
v16 = staticinvoke <io.netty.util.internal.PlatformDependent: byte[] allocateUninitializedArray(int)>(v15);
v17 = v0.<io.netty.util.AsciiString: byte[] value>;
v18 = virtualinvoke v0.<io.netty.util.AsciiString: int arrayOffset()>();
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v17, v18, v16, 0, v2);
v19 = v2;
v20 = 0;
label5:
v21 = lengthof v16;
if v19 >= v21 goto label6;
v22 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v20);
v23 = staticinvoke <io.netty.util.AsciiString: byte c2b(char)>(v22);
v16[v19] = v23;
v19 = v19 + 1;
v20 = v20 + 1;
goto label5;
label6:
v24 = new io.netty.util.AsciiString;
specialinvoke v24.<io.netty.util.AsciiString: void <init>(byte[],boolean)>(v16, 0);
return v24;
}
public boolean endsWith(java.lang.CharSequence)
{
java.lang.CharSequence v1;
int v2, v3, v4;
io.netty.util.AsciiString v0;
boolean v5;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: java.lang.CharSequence;
v2 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
v3 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v4 = v3 - v2;
v5 = virtualinvoke v0.<io.netty.util.AsciiString: boolean regionMatches(int,java.lang.CharSequence,int,int)>(v4, v1, 0, v2);
return v5;
}
public boolean contentEqualsIgnoreCase(java.lang.CharSequence)
{
byte[] v11, v17, v9;
io.netty.util.AsciiString v0;
byte v10, v12, v18;
int v14, v15, v16, v2, v3, v5, v6, v7, v8;
boolean v13, v21, v4;
java.lang.CharSequence v1;
char v19, v20;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: java.lang.CharSequence;
if v0 != v1 goto label01;
return 1;
label01:
if v1 == null goto label02;
v2 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
v3 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
if v2 == v3 goto label03;
label02:
return 0;
label03:
v4 = v1 instanceof io.netty.util.AsciiString;
if v4 == 0 goto label07;
v5 = virtualinvoke v0.<io.netty.util.AsciiString: int arrayOffset()>();
v6 = virtualinvoke v1.<io.netty.util.AsciiString: int arrayOffset()>();
v7 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v8 = v5 + v7;
label04:
if v5 >= v8 goto label06;
v9 = v0.<io.netty.util.AsciiString: byte[] value>;
v10 = v9[v5];
v11 = v1.<io.netty.util.AsciiString: byte[] value>;
v12 = v11[v6];
v13 = staticinvoke <io.netty.util.AsciiString: boolean equalsIgnoreCase(byte,byte)>(v10, v12);
if v13 != 0 goto label05;
return 0;
label05:
v5 = v5 + 1;
v6 = v6 + 1;
goto label04;
label06:
return 1;
label07:
v14 = virtualinvoke v0.<io.netty.util.AsciiString: int arrayOffset()>();
v15 = 0;
v16 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
label08:
if v15 >= v16 goto label10;
v17 = v0.<io.netty.util.AsciiString: byte[] value>;
v18 = v17[v14];
v19 = staticinvoke <io.netty.util.AsciiString: char b2c(byte)>(v18);
v20 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v15);
v21 = staticinvoke <io.netty.util.AsciiString: boolean equalsIgnoreCase(char,char)>(v19, v20);
if v21 != 0 goto label09;
return 0;
label09:
v14 = v14 + 1;
v15 = v15 + 1;
goto label08;
label10:
return 1;
}
public char[] toCharArray()
{
int v1;
char[] v2;
io.netty.util.AsciiString v0;
v0 := @this: io.netty.util.AsciiString;
v1 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v2 = virtualinvoke v0.<io.netty.util.AsciiString: char[] toCharArray(int,int)>(0, v1);
return v2;
}
public char[] toCharArray(int, int)
{
byte[] v14;
java.lang.IndexOutOfBoundsException v7;
io.netty.util.AsciiString v0;
byte v15;
int v1, v11, v12, v13, v2, v3, v5, v8;
java.lang.String v9;
boolean v6;
char v16;
char[] v10, v4;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v2 - v1;
if v3 != 0 goto label1;
v4 = <io.netty.util.internal.EmptyArrays: char[] EMPTY_CHARS>;
return v4;
label1:
v5 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v6 = staticinvoke <io.netty.util.internal.MathUtil: boolean isOutOfBounds(int,int,int)>(v1, v3, v5);
if v6 == 0 goto label2;
v7 = new java.lang.IndexOutOfBoundsException;
v8 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int,int)>(v1, v3, v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("expected: 0 <= start(\u0001) <= srcIdx + length(\u0001) <= srcLen(\u0001)");
specialinvoke v7.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v9);
throw v7;
label2:
v10 = newarray (char)[v3];
v11 = 0;
v12 = virtualinvoke v0.<io.netty.util.AsciiString: int arrayOffset()>();
v13 = v1 + v12;
label3:
if v11 >= v3 goto label4;
v14 = v0.<io.netty.util.AsciiString: byte[] value>;
v15 = v14[v13];
v16 = staticinvoke <io.netty.util.AsciiString: char b2c(byte)>(v15);
v10[v11] = v16;
v11 = v11 + 1;
v13 = v13 + 1;
goto label3;
label4:
return v10;
}
public void copy(int, char[], int, int)
{
byte[] v14;
java.lang.IndexOutOfBoundsException v7;
io.netty.util.AsciiString v0;
byte v15;
int v1, v10, v11, v12, v13, v3, v4, v5, v8;
java.lang.String v9;
boolean v6;
char v16;
char[] v2;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: int;
v2 := @parameter1: char[];
v3 := @parameter2: int;
v4 := @parameter3: int;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "dst");
v5 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v6 = staticinvoke <io.netty.util.internal.MathUtil: boolean isOutOfBounds(int,int,int)>(v1, v4, v5);
if v6 == 0 goto label1;
v7 = new java.lang.IndexOutOfBoundsException;
v8 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int,int)>(v1, v4, v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("expected: 0 <= srcIdx(\u0001) <= srcIdx + length(\u0001) <= srcLen(\u0001)");
specialinvoke v7.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v9);
throw v7;
label1:
v10 = v3 + v4;
v11 = v3;
v12 = virtualinvoke v0.<io.netty.util.AsciiString: int arrayOffset()>();
v13 = v1 + v12;
label2:
if v11 >= v10 goto label3;
v14 = v0.<io.netty.util.AsciiString: byte[] value>;
v15 = v14[v13];
v16 = staticinvoke <io.netty.util.AsciiString: char b2c(byte)>(v15);
v2[v11] = v16;
v11 = v11 + 1;
v13 = v13 + 1;
goto label2;
label3:
return;
}
public io.netty.util.AsciiString subSequence(int)
{
int v1, v2;
io.netty.util.AsciiString v0, v3;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v3 = virtualinvoke v0.<io.netty.util.AsciiString: io.netty.util.AsciiString subSequence(int,int)>(v1, v2);
return v3;
}
public io.netty.util.AsciiString subSequence(int, int)
{
int v1, v2;
io.netty.util.AsciiString v0, v3;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = virtualinvoke v0.<io.netty.util.AsciiString: io.netty.util.AsciiString subSequence(int,int,boolean)>(v1, v2, 1);
return v3;
}
public io.netty.util.AsciiString subSequence(int, int, boolean)
{
byte[] v13;
java.lang.IndexOutOfBoundsException v7;
io.netty.util.AsciiString v0, v11, v12;
int v1, v10, v14, v15, v16, v2, v4, v5, v8;
java.lang.String v9;
boolean v3, v6;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: boolean;
v4 = v2 - v1;
v5 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v6 = staticinvoke <io.netty.util.internal.MathUtil: boolean isOutOfBounds(int,int,int)>(v1, v4, v5);
if v6 == 0 goto label1;
v7 = new java.lang.IndexOutOfBoundsException;
v8 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int,int)>(v1, v2, v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("expected: 0 <= start(\u0001) <= end (\u0001) <= length(\u0001)");
specialinvoke v7.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v9);
throw v7;
label1:
if v1 != 0 goto label2;
v10 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
if v2 != v10 goto label2;
return v0;
label2:
if v2 != v1 goto label3;
v11 = <io.netty.util.AsciiString: io.netty.util.AsciiString EMPTY_STRING>;
return v11;
label3:
v12 = new io.netty.util.AsciiString;
v13 = v0.<io.netty.util.AsciiString: byte[] value>;
v14 = v0.<io.netty.util.AsciiString: int offset>;
v15 = v1 + v14;
v16 = v2 - v1;
specialinvoke v12.<io.netty.util.AsciiString: void <init>(byte[],int,int,boolean)>(v13, v15, v16, v3);
return v12;
}
public int indexOf(java.lang.CharSequence)
{
int v2;
io.netty.util.AsciiString v0;
java.lang.CharSequence v1;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: java.lang.CharSequence;
v2 = virtualinvoke v0.<io.netty.util.AsciiString: int indexOf(java.lang.CharSequence,int)>(v1, 0);
return v2;
}
public int indexOf(java.lang.CharSequence, int)
{
byte[] v18, v22;
io.netty.util.AsciiString v0;
byte v11, v19, v23;
int v10, v12, v13, v14, v15, v16, v17, v2, v20, v21, v26, v27, v28, v3, v4, v5, v6, v7, v8;
java.lang.CharSequence v1;
char v24, v25, v9;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
if v2 >= 0 goto label01;
v2 = 0;
label01:
if v3 > 0 goto label04;
v4 = v0.<io.netty.util.AsciiString: int length>;
if v2 >= v4 goto label02;
v5 = v2;
goto label03;
label02:
v5 = v0.<io.netty.util.AsciiString: int length>;
label03:
return v5;
label04:
v6 = v0.<io.netty.util.AsciiString: int length>;
v7 = v6 - v2;
if v3 <= v7 goto label05;
v8 = (int) -1;
return v8;
label05:
v9 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(0);
if v9 <= 255 goto label06;
v10 = (int) -1;
return v10;
label06:
v11 = staticinvoke <io.netty.util.AsciiString: byte c2b0(char)>(v9);
v12 = v0.<io.netty.util.AsciiString: int offset>;
v13 = v0.<io.netty.util.AsciiString: int length>;
v14 = v12 + v13;
v15 = v14 - v3;
v16 = v0.<io.netty.util.AsciiString: int offset>;
v17 = v2 + v16;
label07:
if v17 > v15 goto label11;
v18 = v0.<io.netty.util.AsciiString: byte[] value>;
v19 = v18[v17];
if v19 != v11 goto label10;
v20 = v17;
v21 = 0;
label08:
v21 = v21 + 1;
if v21 >= v3 goto label09;
v22 = v0.<io.netty.util.AsciiString: byte[] value>;
v20 = v20 + 1;
v23 = v22[v20];
v24 = staticinvoke <io.netty.util.AsciiString: char b2c(byte)>(v23);
v25 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v21);
if v24 == v25 goto label08;
label09:
if v21 != v3 goto label10;
v26 = v0.<io.netty.util.AsciiString: int offset>;
v27 = v17 - v26;
return v27;
label10:
v17 = v17 + 1;
goto label07;
label11:
v28 = (int) -1;
return v28;
}
public int indexOf(char, int)
{
byte[] v10;
io.netty.util.AsciiString v0;
char v1;
byte v11, v4;
int v12, v13, v14, v2, v3, v5, v6, v7, v8, v9;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: char;
v2 := @parameter1: int;
if v1 <= 255 goto label1;
v3 = (int) -1;
return v3;
label1:
if v2 >= 0 goto label2;
v2 = 0;
label2:
v4 = staticinvoke <io.netty.util.AsciiString: byte c2b0(char)>(v1);
v5 = v0.<io.netty.util.AsciiString: int offset>;
v6 = v0.<io.netty.util.AsciiString: int length>;
v7 = v5 + v6;
v8 = v0.<io.netty.util.AsciiString: int offset>;
v9 = v2 + v8;
label3:
if v9 >= v7 goto label5;
v10 = v0.<io.netty.util.AsciiString: byte[] value>;
v11 = v10[v9];
if v11 != v4 goto label4;
v12 = v0.<io.netty.util.AsciiString: int offset>;
v13 = v9 - v12;
return v13;
label4:
v9 = v9 + 1;
goto label3;
label5:
v14 = (int) -1;
return v14;
}
public int lastIndexOf(java.lang.CharSequence)
{
java.lang.CharSequence v1;
int v2, v3;
io.netty.util.AsciiString v0;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: java.lang.CharSequence;
v2 = v0.<io.netty.util.AsciiString: int length>;
v3 = virtualinvoke v0.<io.netty.util.AsciiString: int lastIndexOf(java.lang.CharSequence,int)>(v1, v2);
return v3;
}
public int lastIndexOf(java.lang.CharSequence, int)
{
byte[] v13, v17;
io.netty.util.AsciiString v0;
byte v10, v14, v18;
int v11, v12, v15, v16, v2, v21, v22, v23, v3, v4, v5, v6, v7, v9;
java.lang.CharSequence v1;
char v19, v20, v8;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
v4 = v0.<io.netty.util.AsciiString: int length>;
v5 = v4 - v3;
v6 = staticinvoke <java.lang.Math: int min(int,int)>(v2, v5);
if v6 >= 0 goto label1;
v7 = (int) -1;
return v7;
label1:
if v3 != 0 goto label2;
return v6;
label2:
v8 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(0);
if v8 <= 255 goto label3;
v9 = (int) -1;
return v9;
label3:
v10 = staticinvoke <io.netty.util.AsciiString: byte c2b0(char)>(v8);
v11 = v0.<io.netty.util.AsciiString: int offset>;
v12 = v11 + v6;
label4:
if v12 < 0 goto label8;
v13 = v0.<io.netty.util.AsciiString: byte[] value>;
v14 = v13[v12];
if v14 != v10 goto label7;
v15 = v12;
v16 = 0;
label5:
v16 = v16 + 1;
if v16 >= v3 goto label6;
v17 = v0.<io.netty.util.AsciiString: byte[] value>;
v15 = v15 + 1;
v18 = v17[v15];
v19 = staticinvoke <io.netty.util.AsciiString: char b2c(byte)>(v18);
v20 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v16);
if v19 == v20 goto label5;
label6:
if v16 != v3 goto label7;
v21 = v0.<io.netty.util.AsciiString: int offset>;
v22 = v12 - v21;
return v22;
label7:
v12 = v12 - 1;
goto label4;
label8:
v23 = (int) -1;
return v23;
}
public boolean regionMatches(int, java.lang.CharSequence, int, int)
{
byte[] v13;
io.netty.util.AsciiString v0;
byte v14;
int v1, v10, v11, v12, v3, v4, v5, v6, v7, v8, v9;
java.lang.CharSequence v2;
char v15, v16;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: int;
v2 := @parameter1: java.lang.CharSequence;
v3 := @parameter2: int;
v4 := @parameter3: int;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "string");
if v3 < 0 goto label1;
v5 = interfaceinvoke v2.<java.lang.CharSequence: int length()>();
v6 = v5 - v3;
if v6 >= v4 goto label2;
label1:
return 0;
label2:
v7 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
if v1 < 0 goto label3;
v8 = v7 - v1;
if v8 >= v4 goto label4;
label3:
return 0;
label4:
if v4 > 0 goto label5;
return 1;
label5:
v9 = v3 + v4;
v10 = v3;
v11 = virtualinvoke v0.<io.netty.util.AsciiString: int arrayOffset()>();
v12 = v1 + v11;
label6:
if v10 >= v9 goto label8;
v13 = v0.<io.netty.util.AsciiString: byte[] value>;
v14 = v13[v12];
v15 = staticinvoke <io.netty.util.AsciiString: char b2c(byte)>(v14);
v16 = interfaceinvoke v2.<java.lang.CharSequence: char charAt(int)>(v10);
if v15 == v16 goto label7;
return 0;
label7:
v10 = v10 + 1;
v12 = v12 + 1;
goto label6;
label8:
return 1;
}
public boolean regionMatches(boolean, int, java.lang.CharSequence, int, int)
{
byte[] v14;
io.netty.util.AsciiString v0;
byte v16;
int v10, v11, v12, v13, v15, v18, v2, v4, v5, v7, v8, v9;
boolean v1, v20, v6;
java.lang.CharSequence v3;
char v17, v19;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: boolean;
v2 := @parameter1: int;
v3 := @parameter2: java.lang.CharSequence;
v4 := @parameter3: int;
v5 := @parameter4: int;
if v1 != 0 goto label1;
v6 = virtualinvoke v0.<io.netty.util.AsciiString: boolean regionMatches(int,java.lang.CharSequence,int,int)>(v2, v3, v4, v5);
return v6;
label1:
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v3, "string");
v7 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
if v2 < 0 goto label2;
v8 = v7 - v2;
if v5 <= v8 goto label3;
label2:
return 0;
label3:
if v4 < 0 goto label4;
v9 = interfaceinvoke v3.<java.lang.CharSequence: int length()>();
v10 = v9 - v4;
if v5 <= v10 goto label5;
label4:
return 0;
label5:
v11 = virtualinvoke v0.<io.netty.util.AsciiString: int arrayOffset()>();
v12 = v2 + v11;
v13 = v12 + v5;
label6:
if v12 >= v13 goto label7;
v14 = v0.<io.netty.util.AsciiString: byte[] value>;
v15 = v12;
v12 = v12 + 1;
v16 = v14[v15];
v17 = staticinvoke <io.netty.util.AsciiString: char b2c(byte)>(v16);
v18 = v4;
v4 = v4 + 1;
v19 = interfaceinvoke v3.<java.lang.CharSequence: char charAt(int)>(v18);
v20 = staticinvoke <io.netty.util.AsciiString: boolean equalsIgnoreCase(char,char)>(v17, v19);
if v20 != 0 goto label6;
return 0;
label7:
return 1;
}
public io.netty.util.AsciiString replace(char, char)
{
byte[] v12, v13, v20, v9;
io.netty.util.AsciiString v0, v25;
byte v10, v21, v24, v3, v4;
int v11, v14, v15, v16, v17, v18, v19, v22, v23, v5, v6, v7, v8;
char v1, v2;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: char;
v2 := @parameter1: char;
if v1 <= 255 goto label1;
return v0;
label1:
v3 = staticinvoke <io.netty.util.AsciiString: byte c2b0(char)>(v1);
v4 = staticinvoke <io.netty.util.AsciiString: byte c2b(char)>(v2);
v5 = v0.<io.netty.util.AsciiString: int offset>;
v6 = v0.<io.netty.util.AsciiString: int length>;
v7 = v5 + v6;
v8 = v0.<io.netty.util.AsciiString: int offset>;
label2:
if v8 >= v7 goto label8;
v9 = v0.<io.netty.util.AsciiString: byte[] value>;
v10 = v9[v8];
if v10 != v3 goto label7;
v11 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v12 = staticinvoke <io.netty.util.internal.PlatformDependent: byte[] allocateUninitializedArray(int)>(v11);
v13 = v0.<io.netty.util.AsciiString: byte[] value>;
v14 = v0.<io.netty.util.AsciiString: int offset>;
v15 = v0.<io.netty.util.AsciiString: int offset>;
v16 = v8 - v15;
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v13, v14, v12, 0, v16);
v17 = v0.<io.netty.util.AsciiString: int offset>;
v18 = v8 - v17;
v12[v18] = v4;
v19 = v8 + 1;
label3:
if v19 >= v7 goto label6;
v20 = v0.<io.netty.util.AsciiString: byte[] value>;
v21 = v20[v19];
v22 = v0.<io.netty.util.AsciiString: int offset>;
v23 = v19 - v22;
if v21 == v3 goto label4;
v24 = v21;
goto label5;
label4:
v24 = v4;
label5:
v12[v23] = v24;
v19 = v19 + 1;
goto label3;
label6:
v25 = new io.netty.util.AsciiString;
specialinvoke v25.<io.netty.util.AsciiString: void <init>(byte[],boolean)>(v12, 0);
return v25;
label7:
v8 = v8 + 1;
goto label2;
label8:
return v0;
}
public boolean startsWith(java.lang.CharSequence)
{
io.netty.util.AsciiString v0;
java.lang.CharSequence v1;
boolean v2;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: java.lang.CharSequence;
v2 = virtualinvoke v0.<io.netty.util.AsciiString: boolean startsWith(java.lang.CharSequence,int)>(v1, 0);
return v2;
}
public boolean startsWith(java.lang.CharSequence, int)
{
java.lang.CharSequence v1;
int v2, v3;
io.netty.util.AsciiString v0;
boolean v4;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
v4 = virtualinvoke v0.<io.netty.util.AsciiString: boolean regionMatches(int,java.lang.CharSequence,int,int)>(v2, v1, 0, v3);
return v4;
}
public io.netty.util.AsciiString toLowerCase()
{
byte[] v13, v6, v9;
io.netty.util.AsciiString v0, v16;
byte v14, v15, v7;
int v10, v11, v12, v2, v3, v4, v5, v8;
boolean v1;
v0 := @this: io.netty.util.AsciiString;
v1 = 1;
v2 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v3 = virtualinvoke v0.<io.netty.util.AsciiString: int arrayOffset()>();
v4 = v2 + v3;
v5 = virtualinvoke v0.<io.netty.util.AsciiString: int arrayOffset()>();
label1:
if v5 >= v4 goto label3;
v6 = v0.<io.netty.util.AsciiString: byte[] value>;
v7 = v6[v5];
if v7 < 65 goto label2;
if v7 > 90 goto label2;
v1 = 0;
goto label3;
label2:
v5 = v5 + 1;
goto label1;
label3:
if v1 == 0 goto label4;
return v0;
label4:
v8 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v9 = staticinvoke <io.netty.util.internal.PlatformDependent: byte[] allocateUninitializedArray(int)>(v8);
v10 = 0;
v11 = virtualinvoke v0.<io.netty.util.AsciiString: int arrayOffset()>();
label5:
v12 = lengthof v9;
if v10 >= v12 goto label6;
v13 = v0.<io.netty.util.AsciiString: byte[] value>;
v14 = v13[v11];
v15 = staticinvoke <io.netty.util.AsciiString: byte toLowerCase(byte)>(v14);
v9[v10] = v15;
v10 = v10 + 1;
v11 = v11 + 1;
goto label5;
label6:
v16 = new io.netty.util.AsciiString;
specialinvoke v16.<io.netty.util.AsciiString: void <init>(byte[],boolean)>(v9, 0);
return v16;
}
public io.netty.util.AsciiString toUpperCase()
{
byte[] v13, v6, v9;
io.netty.util.AsciiString v0, v16;
byte v14, v15, v7;
int v10, v11, v12, v2, v3, v4, v5, v8;
boolean v1;
v0 := @this: io.netty.util.AsciiString;
v1 = 1;
v2 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v3 = virtualinvoke v0.<io.netty.util.AsciiString: int arrayOffset()>();
v4 = v2 + v3;
v5 = virtualinvoke v0.<io.netty.util.AsciiString: int arrayOffset()>();
label1:
if v5 >= v4 goto label3;
v6 = v0.<io.netty.util.AsciiString: byte[] value>;
v7 = v6[v5];
if v7 < 97 goto label2;
if v7 > 122 goto label2;
v1 = 0;
goto label3;
label2:
v5 = v5 + 1;
goto label1;
label3:
if v1 == 0 goto label4;
return v0;
label4:
v8 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v9 = staticinvoke <io.netty.util.internal.PlatformDependent: byte[] allocateUninitializedArray(int)>(v8);
v10 = 0;
v11 = virtualinvoke v0.<io.netty.util.AsciiString: int arrayOffset()>();
label5:
v12 = lengthof v9;
if v10 >= v12 goto label6;
v13 = v0.<io.netty.util.AsciiString: byte[] value>;
v14 = v13[v11];
v15 = staticinvoke <io.netty.util.AsciiString: byte toUpperCase(byte)>(v14);
v9[v10] = v15;
v10 = v10 + 1;
v11 = v11 + 1;
goto label5;
label6:
v16 = new io.netty.util.AsciiString;
specialinvoke v16.<io.netty.util.AsciiString: void <init>(byte[],boolean)>(v9, 0);
return v16;
}
public static java.lang.CharSequence trim(java.lang.CharSequence)
{
java.lang.CharSequence v0, v11;
io.netty.util.AsciiString v2;
char v10, v9;
int v5, v6, v7, v8;
java.lang.String v4;
boolean v1, v3;
v0 := @parameter0: java.lang.CharSequence;
v1 = v0 instanceof io.netty.util.AsciiString;
if v1 == 0 goto label1;
v2 = virtualinvoke v0.<io.netty.util.AsciiString: io.netty.util.AsciiString trim()>();
return v2;
label1:
v3 = v0 instanceof java.lang.String;
if v3 == 0 goto label2;
v4 = virtualinvoke v0.<java.lang.String: java.lang.String trim()>();
return v4;
label2:
v5 = 0;
v6 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v7 = v6 - 1;
v8 = v7;
label3:
if v5 > v7 goto label4;
v9 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v5);
if v9 > 32 goto label4;
v5 = v5 + 1;
goto label3;
label4:
if v8 < v5 goto label5;
v10 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v8);
if v10 > 32 goto label5;
v8 = v8 - 1;
goto label4;
label5:
if v5 != 0 goto label6;
if v8 != v7 goto label6;
return v0;
label6:
v11 = interfaceinvoke v0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(v5, v8);
return v11;
}
public io.netty.util.AsciiString trim()
{
byte[] v12, v7, v9;
io.netty.util.AsciiString v0, v11;
byte v10, v8;
int v1, v13, v14, v2, v3, v4, v5, v6;
v0 := @this: io.netty.util.AsciiString;
v1 = virtualinvoke v0.<io.netty.util.AsciiString: int arrayOffset()>();
v2 = virtualinvoke v0.<io.netty.util.AsciiString: int arrayOffset()>();
v3 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v4 = v2 + v3;
v5 = v4 - 1;
v6 = v5;
label1:
if v1 > v5 goto label2;
v7 = v0.<io.netty.util.AsciiString: byte[] value>;
v8 = v7[v1];
if v8 > 32 goto label2;
v1 = v1 + 1;
goto label1;
label2:
if v6 < v1 goto label3;
v9 = v0.<io.netty.util.AsciiString: byte[] value>;
v10 = v9[v6];
if v10 > 32 goto label3;
v6 = v6 - 1;
goto label2;
label3:
if v1 != 0 goto label4;
if v6 != v5 goto label4;
return v0;
label4:
v11 = new io.netty.util.AsciiString;
v12 = v0.<io.netty.util.AsciiString: byte[] value>;
v13 = v6 - v1;
v14 = v13 + 1;
specialinvoke v11.<io.netty.util.AsciiString: void <init>(byte[],int,int,boolean)>(v12, v1, v14, 0);
return v11;
}
public boolean contentEquals(java.lang.CharSequence)
{
byte[] v9;
java.lang.CharSequence v1;
io.netty.util.AsciiString v0;
char v11, v12;
byte v10;
int v2, v3, v6, v7, v8;
boolean v4, v5;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: java.lang.CharSequence;
if v0 != v1 goto label1;
return 1;
label1:
if v1 == null goto label2;
v2 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
v3 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
if v2 == v3 goto label3;
label2:
return 0;
label3:
v4 = v1 instanceof io.netty.util.AsciiString;
if v4 == 0 goto label4;
v5 = virtualinvoke v0.<io.netty.util.AsciiString: boolean equals(java.lang.Object)>(v1);
return v5;
label4:
v6 = virtualinvoke v0.<io.netty.util.AsciiString: int arrayOffset()>();
v7 = 0;
label5:
v8 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
if v7 >= v8 goto label7;
v9 = v0.<io.netty.util.AsciiString: byte[] value>;
v10 = v9[v6];
v11 = staticinvoke <io.netty.util.AsciiString: char b2c(byte)>(v10);
v12 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v7);
if v11 == v12 goto label6;
return 0;
label6:
v6 = v6 + 1;
v7 = v7 + 1;
goto label5;
label7:
return 1;
}
public boolean matches(java.lang.String)
{
io.netty.util.AsciiString v0;
java.lang.String v1;
boolean v2;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <java.util.regex.Pattern: boolean matches(java.lang.String,java.lang.CharSequence)>(v1, v0);
return v2;
}
public io.netty.util.AsciiString[] split(java.lang.String, int)
{
int v2;
io.netty.util.AsciiString v0;
io.netty.util.AsciiString[] v5;
java.lang.String[] v4;
java.lang.String v1;
java.util.regex.Pattern v3;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(v1);
v4 = virtualinvoke v3.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>(v0, v2);
v5 = staticinvoke <io.netty.util.AsciiString: io.netty.util.AsciiString[] toAsciiStringArray(java.lang.String[])>(v4);
return v5;
}
public io.netty.util.AsciiString[] split(char)
{
byte[] v10, v15;
java.lang.Object[] v24;
io.netty.util.internal.InternalThreadLocalMap v2;
io.netty.util.AsciiString v0, v14, v8, v9;
java.util.ArrayList v3;
int v11, v12, v13, v16, v17, v18, v19, v20, v4, v5, v6;
boolean v22;
char v1, v7;
io.netty.util.AsciiString[] v23;
java.lang.Object v21;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: char;
v2 = staticinvoke <io.netty.util.internal.InternalThreadLocalMap: io.netty.util.internal.InternalThreadLocalMap get()>();
v3 = virtualinvoke v2.<io.netty.util.internal.InternalThreadLocalMap: java.util.ArrayList arrayList()>();
v4 = 0;
v5 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v6 = 0;
label1:
if v6 >= v5 goto label5;
v7 = virtualinvoke v0.<io.netty.util.AsciiString: char charAt(int)>(v6);
if v7 != v1 goto label4;
if v4 != v6 goto label2;
v8 = <io.netty.util.AsciiString: io.netty.util.AsciiString EMPTY_STRING>;
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v8);
goto label3;
label2:
v9 = new io.netty.util.AsciiString;
v10 = v0.<io.netty.util.AsciiString: byte[] value>;
v11 = virtualinvoke v0.<io.netty.util.AsciiString: int arrayOffset()>();
v12 = v4 + v11;
v13 = v6 - v4;
specialinvoke v9.<io.netty.util.AsciiString: void <init>(byte[],int,int,boolean)>(v10, v12, v13, 0);
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v9);
label3:
v4 = v6 + 1;
label4:
v6 = v6 + 1;
goto label1;
label5:
if v4 != 0 goto label6;
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v0);
goto label9;
label6:
if v4 == v5 goto label7;
v14 = new io.netty.util.AsciiString;
v15 = v0.<io.netty.util.AsciiString: byte[] value>;
v16 = virtualinvoke v0.<io.netty.util.AsciiString: int arrayOffset()>();
v17 = v4 + v16;
v18 = v5 - v4;
specialinvoke v14.<io.netty.util.AsciiString: void <init>(byte[],int,int,boolean)>(v15, v17, v18, 0);
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v14);
goto label9;
label7:
v19 = interfaceinvoke v3.<java.util.List: int size()>();
v20 = v19 - 1;
label8:
if v20 < 0 goto label9;
v21 = interfaceinvoke v3.<java.util.List: java.lang.Object get(int)>(v20);
v22 = virtualinvoke v21.<io.netty.util.AsciiString: boolean isEmpty()>();
if v22 == 0 goto label9;
interfaceinvoke v3.<java.util.List: java.lang.Object remove(int)>(v20);
v20 = v20 - 1;
goto label8;
label9:
v23 = newarray (io.netty.util.AsciiString)[0];
v24 = interfaceinvoke v3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v23);
return v24;
}
public int hashCode()
{
byte[] v2;
int v1, v3, v4;
io.netty.util.AsciiString v0;
v0 := @this: io.netty.util.AsciiString;
v1 = v0.<io.netty.util.AsciiString: int hash>;
if v1 != 0 goto label1;
v2 = v0.<io.netty.util.AsciiString: byte[] value>;
v3 = v0.<io.netty.util.AsciiString: int offset>;
v4 = v0.<io.netty.util.AsciiString: int length>;
v1 = staticinvoke <io.netty.util.internal.PlatformDependent: int hashCodeAscii(byte[],int,int)>(v2, v3, v4);
v0.<io.netty.util.AsciiString: int hash> = v1;
label1:
return v1;
}
public boolean equals(java.lang.Object)
{
byte[] v7, v9;
io.netty.util.AsciiString v0;
int v10, v11, v3, v4, v5, v6, v8;
java.lang.Class v2;
java.lang.Object v1;
boolean v12, v13;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: java.lang.Object;
if v1 == null goto label1;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v2 == class "Lio/netty/util/AsciiString;" goto label2;
label1:
return 0;
label2:
if v0 != v1 goto label3;
return 1;
label3:
v3 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v4 = virtualinvoke v1.<io.netty.util.AsciiString: int length()>();
if v3 != v4 goto label4;
v5 = virtualinvoke v0.<io.netty.util.AsciiString: int hashCode()>();
v6 = virtualinvoke v1.<io.netty.util.AsciiString: int hashCode()>();
if v5 != v6 goto label4;
v7 = virtualinvoke v0.<io.netty.util.AsciiString: byte[] array()>();
v8 = virtualinvoke v0.<io.netty.util.AsciiString: int arrayOffset()>();
v9 = virtualinvoke v1.<io.netty.util.AsciiString: byte[] array()>();
v10 = virtualinvoke v1.<io.netty.util.AsciiString: int arrayOffset()>();
v11 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v12 = staticinvoke <io.netty.util.internal.PlatformDependent: boolean equals(byte[],int,byte[],int,int)>(v7, v8, v9, v10, v11);
if v12 == 0 goto label4;
v13 = 1;
goto label5;
label4:
v13 = 0;
label5:
return v13;
}
public java.lang.String toString()
{
io.netty.util.AsciiString v0;
java.lang.String v1;
v0 := @this: io.netty.util.AsciiString;
v1 = v0.<io.netty.util.AsciiString: java.lang.String string>;
if v1 != null goto label1;
v1 = virtualinvoke v0.<io.netty.util.AsciiString: java.lang.String toString(int)>(0);
v0.<io.netty.util.AsciiString: java.lang.String string> = v1;
label1:
return v1;
}
public java.lang.String toString(int)
{
int v1, v2;
io.netty.util.AsciiString v0;
java.lang.String v3;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v3 = virtualinvoke v0.<io.netty.util.AsciiString: java.lang.String toString(int,int)>(v1, v2);
return v3;
}
public java.lang.String toString(int, int)
{
byte[] v10;
java.lang.IndexOutOfBoundsException v6;
io.netty.util.AsciiString v0;
int v1, v11, v12, v2, v3, v4, v7;
java.lang.String v8, v9;
boolean v5;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v2 - v1;
if v3 != 0 goto label1;
return "";
label1:
v4 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v5 = staticinvoke <io.netty.util.internal.MathUtil: boolean isOutOfBounds(int,int,int)>(v1, v3, v4);
if v5 == 0 goto label2;
v6 = new java.lang.IndexOutOfBoundsException;
v7 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int,int)>(v1, v3, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("expected: 0 <= start(\u0001) <= srcIdx + length(\u0001) <= srcLen(\u0001)");
specialinvoke v6.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v8);
throw v6;
label2:
v9 = new java.lang.String;
v10 = v0.<io.netty.util.AsciiString: byte[] value>;
v11 = v0.<io.netty.util.AsciiString: int offset>;
v12 = v1 + v11;
specialinvoke v9.<java.lang.String: void <init>(byte[],int,int,int)>(v10, 0, v12, v3);
return v9;
}
public boolean parseBoolean()
{
byte[] v2;
byte v4;
int v1, v3;
io.netty.util.AsciiString v0;
boolean v5;
v0 := @this: io.netty.util.AsciiString;
v1 = v0.<io.netty.util.AsciiString: int length>;
if v1 < 1 goto label1;
v2 = v0.<io.netty.util.AsciiString: byte[] value>;
v3 = v0.<io.netty.util.AsciiString: int offset>;
v4 = v2[v3];
if v4 == 0 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
public char parseChar()
{
io.netty.util.AsciiString v0;
char v1;
v0 := @this: io.netty.util.AsciiString;
v1 = virtualinvoke v0.<io.netty.util.AsciiString: char parseChar(int)>(0);
return v1;
}
public char parseChar(int)
{
byte[] v12, v8;
java.lang.IndexOutOfBoundsException v4;
io.netty.util.AsciiString v0;
byte v14, v9;
int v1, v11, v13, v16, v2, v3, v6, v7;
java.lang.String v5;
char v10, v15;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: int;
v2 = v1 + 1;
v3 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
if v2 < v3 goto label1;
v4 = new java.lang.IndexOutOfBoundsException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("2 bytes required to convert to character. index \u0001 would go out of bounds.");
specialinvoke v4.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v5);
throw v4;
label1:
v6 = v0.<io.netty.util.AsciiString: int offset>;
v7 = v1 + v6;
v8 = v0.<io.netty.util.AsciiString: byte[] value>;
v9 = v8[v7];
v10 = staticinvoke <io.netty.util.AsciiString: char b2c(byte)>(v9);
v11 = v10 << 8;
v12 = v0.<io.netty.util.AsciiString: byte[] value>;
v13 = v7 + 1;
v14 = v12[v13];
v15 = staticinvoke <io.netty.util.AsciiString: char b2c(byte)>(v14);
v16 = v11 | v15;
return v16;
}
public short parseShort()
{
int v1;
io.netty.util.AsciiString v0;
short v2;
v0 := @this: io.netty.util.AsciiString;
v1 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v2 = virtualinvoke v0.<io.netty.util.AsciiString: short parseShort(int,int,int)>(0, v1, 10);
return v2;
}
public short parseShort(int)
{
short v3;
int v1, v2;
io.netty.util.AsciiString v0;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v3 = virtualinvoke v0.<io.netty.util.AsciiString: short parseShort(int,int,int)>(0, v2, v1);
return v3;
}
public short parseShort(int, int)
{
short v3;
int v1, v2;
io.netty.util.AsciiString v0;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = virtualinvoke v0.<io.netty.util.AsciiString: short parseShort(int,int,int)>(v1, v2, 10);
return v3;
}
public short parseShort(int, int, int)
{
io.netty.util.AsciiString v0, v6;
java.lang.NumberFormatException v5;
short v8;
int v1, v2, v3, v4;
java.lang.String v7;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = virtualinvoke v0.<io.netty.util.AsciiString: int parseInt(int,int,int)>(v1, v2, v3);
if v8 == v4 goto label1;
v5 = new java.lang.NumberFormatException;
v6 = virtualinvoke v0.<io.netty.util.AsciiString: io.netty.util.AsciiString subSequence(int,int,boolean)>(v1, v2, 0);
v7 = virtualinvoke v6.<io.netty.util.AsciiString: java.lang.String toString()>();
specialinvoke v5.<java.lang.NumberFormatException: void <init>(java.lang.String)>(v7);
throw v5;
label1:
return v4;
}
public int parseInt()
{
int v1, v2;
io.netty.util.AsciiString v0;
v0 := @this: io.netty.util.AsciiString;
v1 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v2 = virtualinvoke v0.<io.netty.util.AsciiString: int parseInt(int,int,int)>(0, v1, 10);
return v2;
}
public int parseInt(int)
{
int v1, v2, v3;
io.netty.util.AsciiString v0;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v3 = virtualinvoke v0.<io.netty.util.AsciiString: int parseInt(int,int,int)>(0, v2, v1);
return v3;
}
public int parseInt(int, int)
{
int v1, v2, v3;
io.netty.util.AsciiString v0;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = virtualinvoke v0.<io.netty.util.AsciiString: int parseInt(int,int,int)>(v1, v2, 10);
return v3;
}
public int parseInt(int, int, int)
{
io.netty.util.AsciiString v0, v11;
java.lang.NumberFormatException v10, v4, v5;
byte v7;
int v1, v13, v2, v3, v6;
java.lang.String v12;
boolean v8, v9;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
if v3 < 2 goto label1;
if v3 <= 36 goto label2;
label1:
v4 = new java.lang.NumberFormatException;
specialinvoke v4.<java.lang.NumberFormatException: void <init>()>();
throw v4;
label2:
if v1 != v2 goto label3;
v5 = new java.lang.NumberFormatException;
specialinvoke v5.<java.lang.NumberFormatException: void <init>()>();
throw v5;
label3:
v6 = v1;
v7 = virtualinvoke v0.<io.netty.util.AsciiString: byte byteAt(int)>(v1);
if v7 != 45 goto label4;
v8 = 1;
goto label5;
label4:
v8 = 0;
label5:
v9 = v8;
if v8 == 0 goto label6;
v6 = v1 + 1;
if v6 != v2 goto label6;
v10 = new java.lang.NumberFormatException;
v11 = virtualinvoke v0.<io.netty.util.AsciiString: io.netty.util.AsciiString subSequence(int,int,boolean)>(v1, v2, 0);
v12 = virtualinvoke v11.<io.netty.util.AsciiString: java.lang.String toString()>();
specialinvoke v10.<java.lang.NumberFormatException: void <init>(java.lang.String)>(v12);
throw v10;
label6:
v13 = specialinvoke v0.<io.netty.util.AsciiString: int parseInt(int,int,int,boolean)>(v6, v2, v3, v9);
return v13;
}
private int parseInt(int, int, int, boolean)
{
byte[] v8;
io.netty.util.AsciiString v0, v17, v20, v25, v28;
short v13;
byte v12;
int v1, v10, v11, v14, v15, v2, v22, v23, v3, v5, v6, v7, v9;
java.lang.String v18, v21, v26, v29;
boolean v4;
java.lang.NumberFormatException v16, v19, v24, v27;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 = -2147483648 / v3;
v6 = 0;
v7 = v1;
label1:
if v7 >= v2 goto label5;
v8 = v0.<io.netty.util.AsciiString: byte[] value>;
v9 = v7;
v7 = v7 + 1;
v10 = v0.<io.netty.util.AsciiString: int offset>;
v11 = v9 + v10;
v12 = v8[v11];
v13 = v12 & 255;
v14 = staticinvoke <java.lang.Character: int digit(char,int)>(v13, v3);
v15 = (int) -1;
if v14 != v15 goto label2;
v16 = new java.lang.NumberFormatException;
v17 = virtualinvoke v0.<io.netty.util.AsciiString: io.netty.util.AsciiString subSequence(int,int,boolean)>(v1, v2, 0);
v18 = virtualinvoke v17.<io.netty.util.AsciiString: java.lang.String toString()>();
specialinvoke v16.<java.lang.NumberFormatException: void <init>(java.lang.String)>(v18);
throw v16;
label2:
if v5 <= v6 goto label3;
v19 = new java.lang.NumberFormatException;
v20 = virtualinvoke v0.<io.netty.util.AsciiString: io.netty.util.AsciiString subSequence(int,int,boolean)>(v1, v2, 0);
v21 = virtualinvoke v20.<io.netty.util.AsciiString: java.lang.String toString()>();
specialinvoke v19.<java.lang.NumberFormatException: void <init>(java.lang.String)>(v21);
throw v19;
label3:
v22 = v6 * v3;
v23 = v22 - v14;
if v23 <= v6 goto label4;
v24 = new java.lang.NumberFormatException;
v25 = virtualinvoke v0.<io.netty.util.AsciiString: io.netty.util.AsciiString subSequence(int,int,boolean)>(v1, v2, 0);
v26 = virtualinvoke v25.<io.netty.util.AsciiString: java.lang.String toString()>();
specialinvoke v24.<java.lang.NumberFormatException: void <init>(java.lang.String)>(v26);
throw v24;
label4:
v6 = v23;
goto label1;
label5:
if v4 != 0 goto label6;
v6 = neg v6;
if v6 >= 0 goto label6;
v27 = new java.lang.NumberFormatException;
v28 = virtualinvoke v0.<io.netty.util.AsciiString: io.netty.util.AsciiString subSequence(int,int,boolean)>(v1, v2, 0);
v29 = virtualinvoke v28.<io.netty.util.AsciiString: java.lang.String toString()>();
specialinvoke v27.<java.lang.NumberFormatException: void <init>(java.lang.String)>(v29);
throw v27;
label6:
return v6;
}
public long parseLong()
{
int v1;
io.netty.util.AsciiString v0;
long v2;
v0 := @this: io.netty.util.AsciiString;
v1 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v2 = virtualinvoke v0.<io.netty.util.AsciiString: long parseLong(int,int,int)>(0, v1, 10);
return v2;
}
public long parseLong(int)
{
int v1, v2;
io.netty.util.AsciiString v0;
long v3;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: int;
v2 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v3 = virtualinvoke v0.<io.netty.util.AsciiString: long parseLong(int,int,int)>(0, v2, v1);
return v3;
}
public long parseLong(int, int)
{
int v1, v2;
io.netty.util.AsciiString v0;
long v3;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = virtualinvoke v0.<io.netty.util.AsciiString: long parseLong(int,int,int)>(v1, v2, 10);
return v3;
}
public long parseLong(int, int, int)
{
io.netty.util.AsciiString v0, v11;
java.lang.NumberFormatException v10, v4, v5;
long v13;
byte v7;
int v1, v2, v3, v6;
java.lang.String v12;
boolean v8, v9;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
if v3 < 2 goto label1;
if v3 <= 36 goto label2;
label1:
v4 = new java.lang.NumberFormatException;
specialinvoke v4.<java.lang.NumberFormatException: void <init>()>();
throw v4;
label2:
if v1 != v2 goto label3;
v5 = new java.lang.NumberFormatException;
specialinvoke v5.<java.lang.NumberFormatException: void <init>()>();
throw v5;
label3:
v6 = v1;
v7 = virtualinvoke v0.<io.netty.util.AsciiString: byte byteAt(int)>(v1);
if v7 != 45 goto label4;
v8 = 1;
goto label5;
label4:
v8 = 0;
label5:
v9 = v8;
if v8 == 0 goto label6;
v6 = v1 + 1;
if v6 != v2 goto label6;
v10 = new java.lang.NumberFormatException;
v11 = virtualinvoke v0.<io.netty.util.AsciiString: io.netty.util.AsciiString subSequence(int,int,boolean)>(v1, v2, 0);
v12 = virtualinvoke v11.<io.netty.util.AsciiString: java.lang.String toString()>();
specialinvoke v10.<java.lang.NumberFormatException: void <init>(java.lang.String)>(v12);
throw v10;
label6:
v13 = specialinvoke v0.<io.netty.util.AsciiString: long parseLong(int,int,int,boolean)>(v6, v2, v3, v9);
return v13;
}
private long parseLong(int, int, int, boolean)
{
byte[] v8;
io.netty.util.AsciiString v0, v17, v21, v27, v31;
byte v12, v19, v25, v29;
boolean v4;
long v23, v24, v5, v6;
short v13;
int v1, v10, v11, v14, v15, v2, v3, v7, v9;
java.lang.String v18, v22, v28, v32;
java.lang.NumberFormatException v16, v20, v26, v30;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v5 = -9223372036854775808L / v3;
v6 = 0L;
v7 = v1;
label1:
if v7 >= v2 goto label5;
v8 = v0.<io.netty.util.AsciiString: byte[] value>;
v9 = v7;
v7 = v7 + 1;
v10 = v0.<io.netty.util.AsciiString: int offset>;
v11 = v9 + v10;
v12 = v8[v11];
v13 = v12 & 255;
v14 = staticinvoke <java.lang.Character: int digit(char,int)>(v13, v3);
v15 = (int) -1;
if v14 != v15 goto label2;
v16 = new java.lang.NumberFormatException;
v17 = virtualinvoke v0.<io.netty.util.AsciiString: io.netty.util.AsciiString subSequence(int,int,boolean)>(v1, v2, 0);
v18 = virtualinvoke v17.<io.netty.util.AsciiString: java.lang.String toString()>();
specialinvoke v16.<java.lang.NumberFormatException: void <init>(java.lang.String)>(v18);
throw v16;
label2:
v19 = v5 cmp v6;
if v19 <= 0 goto label3;
v20 = new java.lang.NumberFormatException;
v21 = virtualinvoke v0.<io.netty.util.AsciiString: io.netty.util.AsciiString subSequence(int,int,boolean)>(v1, v2, 0);
v22 = virtualinvoke v21.<io.netty.util.AsciiString: java.lang.String toString()>();
specialinvoke v20.<java.lang.NumberFormatException: void <init>(java.lang.String)>(v22);
throw v20;
label3:
v23 = v6 * v3;
v24 = v23 - v14;
v25 = v24 cmp v6;
if v25 <= 0 goto label4;
v26 = new java.lang.NumberFormatException;
v27 = virtualinvoke v0.<io.netty.util.AsciiString: io.netty.util.AsciiString subSequence(int,int,boolean)>(v1, v2, 0);
v28 = virtualinvoke v27.<io.netty.util.AsciiString: java.lang.String toString()>();
specialinvoke v26.<java.lang.NumberFormatException: void <init>(java.lang.String)>(v28);
throw v26;
label4:
v6 = v24;
goto label1;
label5:
if v4 != 0 goto label6;
v6 = neg v6;
v29 = v6 cmp 0L;
if v29 >= 0 goto label6;
v30 = new java.lang.NumberFormatException;
v31 = virtualinvoke v0.<io.netty.util.AsciiString: io.netty.util.AsciiString subSequence(int,int,boolean)>(v1, v2, 0);
v32 = virtualinvoke v31.<io.netty.util.AsciiString: java.lang.String toString()>();
specialinvoke v30.<java.lang.NumberFormatException: void <init>(java.lang.String)>(v32);
throw v30;
label6:
return v6;
}
public float parseFloat()
{
int v1;
float v2;
io.netty.util.AsciiString v0;
v0 := @this: io.netty.util.AsciiString;
v1 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v2 = virtualinvoke v0.<io.netty.util.AsciiString: float parseFloat(int,int)>(0, v1);
return v2;
}
public float parseFloat(int, int)
{
int v1, v2;
float v4;
io.netty.util.AsciiString v0;
java.lang.String v3;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = virtualinvoke v0.<io.netty.util.AsciiString: java.lang.String toString(int,int)>(v1, v2);
v4 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(v3);
return v4;
}
public double parseDouble()
{
int v1;
io.netty.util.AsciiString v0;
double v2;
v0 := @this: io.netty.util.AsciiString;
v1 = virtualinvoke v0.<io.netty.util.AsciiString: int length()>();
v2 = virtualinvoke v0.<io.netty.util.AsciiString: double parseDouble(int,int)>(0, v1);
return v2;
}
public double parseDouble(int, int)
{
int v1, v2;
io.netty.util.AsciiString v0;
java.lang.String v3;
double v4;
v0 := @this: io.netty.util.AsciiString;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = virtualinvoke v0.<io.netty.util.AsciiString: java.lang.String toString(int,int)>(v1, v2);
v4 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(v3);
return v4;
}
public static io.netty.util.AsciiString of(java.lang.CharSequence)
{
java.lang.CharSequence v0;
boolean v1;
v0 := @parameter0: java.lang.CharSequence;
v1 = v0 instanceof io.netty.util.AsciiString;
if v1 != 0 goto label1;
v0 = new io.netty.util.AsciiString;
specialinvoke v0.<io.netty.util.AsciiString: void <init>(java.lang.CharSequence)>(v0);
label1:
return v0;
}
public static io.netty.util.AsciiString cached(java.lang.String)
{
io.netty.util.AsciiString v1;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = new io.netty.util.AsciiString;
specialinvoke v1.<io.netty.util.AsciiString: void <init>(java.lang.CharSequence)>(v0);
v1.<io.netty.util.AsciiString: java.lang.String string> = v0;
return v1;
}
public static int hashCode(java.lang.CharSequence)
{
java.lang.CharSequence v0;
int v2, v3;
boolean v1;
v0 := @parameter0: java.lang.CharSequence;
if v0 != null goto label1;
return 0;
label1:
v1 = v0 instanceof io.netty.util.AsciiString;
if v1 == 0 goto label2;
v2 = virtualinvoke v0.<java.lang.Object: int hashCode()>();
return v2;
label2:
v3 = staticinvoke <io.netty.util.internal.PlatformDependent: int hashCodeAscii(java.lang.CharSequence)>(v0);
return v3;
}
public static boolean contains(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v0, v1;
io.netty.util.AsciiString$DefaultCharEqualityComparator v2;
boolean v3;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
v2 = <io.netty.util.AsciiString$DefaultCharEqualityComparator: io.netty.util.AsciiString$DefaultCharEqualityComparator INSTANCE>;
v3 = staticinvoke <io.netty.util.AsciiString: boolean contains(java.lang.CharSequence,java.lang.CharSequence,io.netty.util.AsciiString$CharEqualityComparator)>(v0, v1, v2);
return v3;
}
public static boolean containsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v0, v1;
io.netty.util.AsciiString$AsciiCaseInsensitiveCharEqualityComparator v2;
boolean v3;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
v2 = <io.netty.util.AsciiString$AsciiCaseInsensitiveCharEqualityComparator: io.netty.util.AsciiString$AsciiCaseInsensitiveCharEqualityComparator INSTANCE>;
v3 = staticinvoke <io.netty.util.AsciiString: boolean contains(java.lang.CharSequence,java.lang.CharSequence,io.netty.util.AsciiString$CharEqualityComparator)>(v0, v1, v2);
return v3;
}
public static boolean contentEqualsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v0, v1;
char v11, v12;
int v10, v7, v8, v9;
boolean v13, v2, v3, v4, v5, v6;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
if v0 == null goto label01;
if v1 != null goto label04;
label01:
if v0 != v1 goto label02;
v2 = 1;
goto label03;
label02:
v2 = 0;
label03:
return v2;
label04:
v3 = v0 instanceof io.netty.util.AsciiString;
if v3 == 0 goto label05;
v4 = virtualinvoke v0.<io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence)>(v1);
return v4;
label05:
v5 = v1 instanceof io.netty.util.AsciiString;
if v5 == 0 goto label06;
v6 = virtualinvoke v1.<io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence)>(v0);
return v6;
label06:
v7 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v8 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
if v7 == v8 goto label07;
return 0;
label07:
v9 = 0;
label08:
v10 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
if v9 >= v10 goto label10;
v11 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v9);
v12 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v9);
v13 = staticinvoke <io.netty.util.AsciiString: boolean equalsIgnoreCase(char,char)>(v11, v12);
if v13 != 0 goto label09;
return 0;
label09:
v9 = v9 + 1;
goto label08;
label10:
return 1;
}
public static boolean containsContentEqualsIgnoreCase(java.util.Collection, java.lang.CharSequence)
{
java.lang.CharSequence v1;
java.util.Iterator v2;
java.util.Collection v0;
java.lang.Object v4;
boolean v3, v5;
v0 := @parameter0: java.util.Collection;
v1 := @parameter1: java.lang.CharSequence;
v2 = interfaceinvoke v0.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = staticinvoke <io.netty.util.AsciiString: boolean contentEqualsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)>(v1, v4);
if v5 == 0 goto label1;
return 1;
label2:
return 0;
}
public static boolean containsAllContentEqualsIgnoreCase(java.util.Collection, java.util.Collection)
{
java.util.Iterator v2;
java.util.Collection v0, v1;
java.lang.Object v4;
boolean v3, v5;
v0 := @parameter0: java.util.Collection;
v1 := @parameter1: java.util.Collection;
v2 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = staticinvoke <io.netty.util.AsciiString: boolean containsContentEqualsIgnoreCase(java.util.Collection,java.lang.CharSequence)>(v0, v4);
if v5 != 0 goto label1;
return 0;
label2:
return 1;
}
public static boolean contentEquals(java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v0, v1;
char v11, v12;
int v10, v7, v8, v9;
boolean v2, v3, v4, v5, v6;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
if v0 == null goto label01;
if v1 != null goto label04;
label01:
if v0 != v1 goto label02;
v2 = 1;
goto label03;
label02:
v2 = 0;
label03:
return v2;
label04:
v3 = v0 instanceof io.netty.util.AsciiString;
if v3 == 0 goto label05;
v4 = virtualinvoke v0.<io.netty.util.AsciiString: boolean contentEquals(java.lang.CharSequence)>(v1);
return v4;
label05:
v5 = v1 instanceof io.netty.util.AsciiString;
if v5 == 0 goto label06;
v6 = virtualinvoke v1.<io.netty.util.AsciiString: boolean contentEquals(java.lang.CharSequence)>(v0);
return v6;
label06:
v7 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v8 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
if v7 == v8 goto label07;
return 0;
label07:
v9 = 0;
label08:
v10 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
if v9 >= v10 goto label10;
v11 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v9);
v12 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v9);
if v11 == v12 goto label09;
return 0;
label09:
v9 = v9 + 1;
goto label08;
label10:
return 1;
}
private static io.netty.util.AsciiString[] toAsciiStringArray(java.lang.String[])
{
int v1, v3, v4;
io.netty.util.AsciiString v5;
io.netty.util.AsciiString[] v2;
java.lang.String[] v0;
java.lang.String v6;
v0 := @parameter0: java.lang.String[];
v1 = lengthof v0;
v2 = newarray (io.netty.util.AsciiString)[v1];
v3 = 0;
label1:
v4 = lengthof v0;
if v3 >= v4 goto label2;
v5 = new io.netty.util.AsciiString;
v6 = v0[v3];
specialinvoke v5.<io.netty.util.AsciiString: void <init>(java.lang.CharSequence)>(v6);
v2[v3] = v5;
v3 = v3 + 1;
goto label1;
label2:
return v2;
}
private static boolean contains(java.lang.CharSequence, java.lang.CharSequence, io.netty.util.AsciiString$CharEqualityComparator)
{
int v12, v13, v14, v15, v3, v4, v5, v6, v7, v8;
boolean v11;
java.lang.CharSequence v0, v1;
io.netty.util.AsciiString$CharEqualityComparator v2;
char v10, v9;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
v2 := @parameter2: io.netty.util.AsciiString$CharEqualityComparator;
if v0 == null goto label1;
if v1 == null goto label1;
v3 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v4 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
if v3 >= v4 goto label2;
label1:
return 0;
label2:
v5 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
if v5 != 0 goto label3;
return 1;
label3:
v6 = 0;
v7 = 0;
label4:
v8 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
if v7 >= v8 goto label8;
v9 = interfaceinvoke v1.<java.lang.CharSequence: char charAt(int)>(v6);
v10 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v7);
v11 = interfaceinvoke v2.<io.netty.util.AsciiString$CharEqualityComparator: boolean equals(char,char)>(v9, v10);
if v11 == 0 goto label5;
v6 = v6 + 1;
v12 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
if v6 != v12 goto label7;
return 1;
label5:
v13 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v14 = v13 - v7;
v15 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
if v14 >= v15 goto label6;
return 0;
label6:
v6 = 0;
label7:
v7 = v7 + 1;
goto label4;
label8:
return 0;
}
private static boolean regionMatchesCharSequences(java.lang.CharSequence, int, java.lang.CharSequence, int, int, io.netty.util.AsciiString$CharEqualityComparator)
{
int v1, v10, v11, v12, v13, v15, v3, v4, v6, v7, v8, v9;
boolean v17;
java.lang.CharSequence v0, v2;
io.netty.util.AsciiString$CharEqualityComparator v5;
char v14, v16;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: int;
v2 := @parameter2: java.lang.CharSequence;
v3 := @parameter3: int;
v4 := @parameter4: int;
v5 := @parameter5: io.netty.util.AsciiString$CharEqualityComparator;
if v1 < 0 goto label1;
v6 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v7 = v6 - v1;
if v4 <= v7 goto label2;
label1:
return 0;
label2:
if v3 < 0 goto label3;
v8 = interfaceinvoke v2.<java.lang.CharSequence: int length()>();
v9 = v8 - v3;
if v4 <= v9 goto label4;
label3:
return 0;
label4:
v10 = v1;
v11 = v1 + v4;
v12 = v3;
label5:
if v10 >= v11 goto label6;
v13 = v10;
v10 = v10 + 1;
v14 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v13);
v15 = v12;
v12 = v12 + 1;
v16 = interfaceinvoke v2.<java.lang.CharSequence: char charAt(int)>(v15);
v17 = interfaceinvoke v5.<io.netty.util.AsciiString$CharEqualityComparator: boolean equals(char,char)>(v14, v16);
if v17 != 0 goto label5;
return 0;
label6:
return 1;
}
public static boolean regionMatches(java.lang.CharSequence, boolean, int, java.lang.CharSequence, int, int)
{
java.lang.CharSequence v0, v3;
io.netty.util.AsciiString$CharEqualityComparator v11;
int v2, v4, v5;
boolean v1, v10, v12, v6, v7, v8, v9;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: boolean;
v2 := @parameter2: int;
v3 := @parameter3: java.lang.CharSequence;
v4 := @parameter4: int;
v5 := @parameter5: int;
if v0 == null goto label1;
if v3 != null goto label2;
label1:
return 0;
label2:
v6 = v0 instanceof java.lang.String;
if v6 == 0 goto label3;
v7 = v3 instanceof java.lang.String;
if v7 == 0 goto label3;
v8 = virtualinvoke v0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(v1, v2, v3, v4, v5);
return v8;
label3:
v9 = v0 instanceof io.netty.util.AsciiString;
if v9 == 0 goto label4;
v10 = virtualinvoke v0.<io.netty.util.AsciiString: boolean regionMatches(boolean,int,java.lang.CharSequence,int,int)>(v1, v2, v3, v4, v5);
return v10;
label4:
if v1 == 0 goto label5;
v11 = <io.netty.util.AsciiString$GeneralCaseInsensitiveCharEqualityComparator: io.netty.util.AsciiString$GeneralCaseInsensitiveCharEqualityComparator INSTANCE>;
goto label6;
label5:
v11 = <io.netty.util.AsciiString$DefaultCharEqualityComparator: io.netty.util.AsciiString$DefaultCharEqualityComparator INSTANCE>;
label6:
v12 = staticinvoke <io.netty.util.AsciiString: boolean regionMatchesCharSequences(java.lang.CharSequence,int,java.lang.CharSequence,int,int,io.netty.util.AsciiString$CharEqualityComparator)>(v0, v2, v3, v4, v5, v11);
return v12;
}
public static boolean regionMatchesAscii(java.lang.CharSequence, boolean, int, java.lang.CharSequence, int, int)
{
java.lang.CharSequence v0, v3;
io.netty.util.AsciiString$CharEqualityComparator v11;
int v2, v4, v5;
boolean v1, v10, v12, v6, v7, v8, v9;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: boolean;
v2 := @parameter2: int;
v3 := @parameter3: java.lang.CharSequence;
v4 := @parameter4: int;
v5 := @parameter5: int;
if v0 == null goto label1;
if v3 != null goto label2;
label1:
return 0;
label2:
if v1 != 0 goto label3;
v6 = v0 instanceof java.lang.String;
if v6 == 0 goto label3;
v7 = v3 instanceof java.lang.String;
if v7 == 0 goto label3;
v8 = virtualinvoke v0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(0, v2, v3, v4, v5);
return v8;
label3:
v9 = v0 instanceof io.netty.util.AsciiString;
if v9 == 0 goto label4;
v10 = virtualinvoke v0.<io.netty.util.AsciiString: boolean regionMatches(boolean,int,java.lang.CharSequence,int,int)>(v1, v2, v3, v4, v5);
return v10;
label4:
if v1 == 0 goto label5;
v11 = <io.netty.util.AsciiString$AsciiCaseInsensitiveCharEqualityComparator: io.netty.util.AsciiString$AsciiCaseInsensitiveCharEqualityComparator INSTANCE>;
goto label6;
label5:
v11 = <io.netty.util.AsciiString$DefaultCharEqualityComparator: io.netty.util.AsciiString$DefaultCharEqualityComparator INSTANCE>;
label6:
v12 = staticinvoke <io.netty.util.AsciiString: boolean regionMatchesCharSequences(java.lang.CharSequence,int,java.lang.CharSequence,int,int,io.netty.util.AsciiString$CharEqualityComparator)>(v0, v2, v3, v4, v5, v11);
return v12;
}
public static int indexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence, int)
{
java.lang.CharSequence v0, v1;
int v11, v2, v3, v4, v5, v6, v7, v8, v9;
boolean v10;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
v2 := @parameter2: int;
if v0 == null goto label1;
if v1 != null goto label2;
label1:
v3 = (int) -1;
return v3;
label2:
if v2 >= 0 goto label3;
v2 = 0;
label3:
v4 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
v5 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v6 = v5 - v4;
v7 = v6 + 1;
if v2 <= v7 goto label4;
v8 = (int) -1;
return v8;
label4:
if v4 != 0 goto label5;
return v2;
label5:
v9 = v2;
label6:
if v9 >= v7 goto label8;
v10 = staticinvoke <io.netty.util.AsciiString: boolean regionMatches(java.lang.CharSequence,boolean,int,java.lang.CharSequence,int,int)>(v0, 1, v9, v1, 0, v4);
if v10 == 0 goto label7;
return v9;
label7:
v9 = v9 + 1;
goto label6;
label8:
v11 = (int) -1;
return v11;
}
public static int indexOfIgnoreCaseAscii(java.lang.CharSequence, java.lang.CharSequence, int)
{
java.lang.CharSequence v0, v1;
int v11, v2, v3, v4, v5, v6, v7, v8, v9;
boolean v10;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence;
v2 := @parameter2: int;
if v0 == null goto label1;
if v1 != null goto label2;
label1:
v3 = (int) -1;
return v3;
label2:
if v2 >= 0 goto label3;
v2 = 0;
label3:
v4 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
v5 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
v6 = v5 - v4;
v7 = v6 + 1;
if v2 <= v7 goto label4;
v8 = (int) -1;
return v8;
label4:
if v4 != 0 goto label5;
return v2;
label5:
v9 = v2;
label6:
if v9 >= v7 goto label8;
v10 = staticinvoke <io.netty.util.AsciiString: boolean regionMatchesAscii(java.lang.CharSequence,boolean,int,java.lang.CharSequence,int,int)>(v0, 1, v9, v1, 0, v4);
if v10 == 0 goto label7;
return v9;
label7:
v9 = v9 + 1;
goto label6;
label8:
v11 = (int) -1;
return v11;
}
public static int indexOf(java.lang.CharSequence, char, int)
{
java.lang.CharSequence v0;
char v1, v11;
int v10, v12, v2, v4, v6, v7, v8, v9;
boolean v3, v5;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: char;
v2 := @parameter2: int;
v3 = v0 instanceof java.lang.String;
if v3 == 0 goto label1;
v4 = virtualinvoke v0.<java.lang.String: int indexOf(int,int)>(v1, v2);
return v4;
label1:
v5 = v0 instanceof io.netty.util.AsciiString;
if v5 == 0 goto label2;
v6 = virtualinvoke v0.<io.netty.util.AsciiString: int indexOf(char,int)>(v1, v2);
return v6;
label2:
if v0 != null goto label3;
v7 = (int) -1;
return v7;
label3:
v8 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
if v2 >= 0 goto label4;
v9 = 0;
goto label5;
label4:
v9 = v2;
label5:
v10 = v9;
label6:
if v10 >= v8 goto label8;
v11 = interfaceinvoke v0.<java.lang.CharSequence: char charAt(int)>(v10);
if v11 != v1 goto label7;
return v10;
label7:
v10 = v10 + 1;
goto label6;
label8:
v12 = (int) -1;
return v12;
}
private static boolean equalsIgnoreCase(byte, byte)
{
byte v0, v1, v2, v3;
boolean v4;
v0 := @parameter0: byte;
v1 := @parameter1: byte;
if v0 == v1 goto label1;
v2 = staticinvoke <io.netty.util.AsciiString: byte toLowerCase(byte)>(v0);
v3 = staticinvoke <io.netty.util.AsciiString: byte toLowerCase(byte)>(v1);
if v2 != v3 goto label2;
label1:
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
return v4;
}
private static boolean equalsIgnoreCase(char, char)
{
char v0, v1, v2, v3;
boolean v4;
v0 := @parameter0: char;
v1 := @parameter1: char;
if v0 == v1 goto label1;
v2 = staticinvoke <io.netty.util.AsciiString: char toLowerCase(char)>(v0);
v3 = staticinvoke <io.netty.util.AsciiString: char toLowerCase(char)>(v1);
if v2 != v3 goto label2;
label1:
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
return v4;
}
private static byte toLowerCase(byte)
{
int v2;
byte v0;
boolean v1;
v0 := @parameter0: byte;
v1 = staticinvoke <io.netty.util.AsciiString: boolean isUpperCase(byte)>(v0);
if v1 == 0 goto label1;
v2 = v0 + 32;
goto label2;
label1:
v2 = v0;
label2:
return v2;
}
public static char toLowerCase(char)
{
int v2;
char v0;
boolean v1;
v0 := @parameter0: char;
v1 = staticinvoke <io.netty.util.AsciiString: boolean isUpperCase(char)>(v0);
if v1 == 0 goto label1;
v2 = v0 + 32;
goto label2;
label1:
v2 = v0;
label2:
return v2;
}
private static byte toUpperCase(byte)
{
int v2;
byte v0;
boolean v1;
v0 := @parameter0: byte;
v1 = staticinvoke <io.netty.util.AsciiString: boolean isLowerCase(byte)>(v0);
if v1 == 0 goto label1;
v2 = v0 - 32;
goto label2;
label1:
v2 = v0;
label2:
return v2;
}
private static boolean isLowerCase(byte)
{
byte v0;
boolean v1;
v0 := @parameter0: byte;
if v0 < 97 goto label1;
if v0 > 122 goto label1;
v1 = 1;
goto label2;
label1:
v1 = 0;
label2:
return v1;
}
public static boolean isUpperCase(byte)
{
byte v0;
boolean v1;
v0 := @parameter0: byte;
if v0 < 65 goto label1;
if v0 > 90 goto label1;
v1 = 1;
goto label2;
label1:
v1 = 0;
label2:
return v1;
}
public static boolean isUpperCase(char)
{
char v0;
boolean v1;
v0 := @parameter0: char;
if v0 < 65 goto label1;
if v0 > 90 goto label1;
v1 = 1;
goto label2;
label1:
v1 = 0;
label2:
return v1;
}
public static byte c2b(char)
{
char v0;
byte v1;
v0 := @parameter0: char;
if v0 <= 255 goto label1;
v1 = (byte) 63;
return v1;
label1:
return v0;
}
private static byte c2b0(char)
{
char v0;
v0 := @parameter0: char;
return v0;
}
public static char b2c(byte)
{
short v1;
byte v0;
v0 := @parameter0: byte;
v1 = v0 & 255;
return v1;
}
static void <clinit>()
{
io.netty.util.AsciiString v0;
io.netty.util.AsciiString$2 v2;
io.netty.util.AsciiString$1 v1;
v0 = staticinvoke <io.netty.util.AsciiString: io.netty.util.AsciiString cached(java.lang.String)>("");
<io.netty.util.AsciiString: io.netty.util.AsciiString EMPTY_STRING> = v0;
v1 = new io.netty.util.AsciiString$1;
specialinvoke v1.<io.netty.util.AsciiString$1: void <init>()>();
<io.netty.util.AsciiString: io.netty.util.HashingStrategy CASE_INSENSITIVE_HASHER> = v1;
v2 = new io.netty.util.AsciiString$2;
specialinvoke v2.<io.netty.util.AsciiString$2: void <init>()>();
<io.netty.util.AsciiString: io.netty.util.HashingStrategy CASE_SENSITIVE_HASHER> = v2;
return;
}
}