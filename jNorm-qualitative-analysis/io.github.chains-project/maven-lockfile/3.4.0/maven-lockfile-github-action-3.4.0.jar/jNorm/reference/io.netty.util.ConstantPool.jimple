public abstract class io.netty.util.ConstantPool extends java.lang.Object
{
private final java.util.concurrent.ConcurrentMap constants;
private final java.util.concurrent.atomic.AtomicInteger nextId;
public void <init>()
{
java.util.concurrent.atomic.AtomicInteger v2;
io.netty.util.ConstantPool v0;
java.util.concurrent.ConcurrentMap v1;
v0 := @this: io.netty.util.ConstantPool;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.concurrent.ConcurrentMap newConcurrentHashMap()>();
v0.<io.netty.util.ConstantPool: java.util.concurrent.ConcurrentMap constants> = v1;
v2 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v2.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(1);
v0.<io.netty.util.ConstantPool: java.util.concurrent.atomic.AtomicInteger nextId> = v2;
return;
}
public io.netty.util.Constant valueOf(java.lang.Class, java.lang.String)
{
io.netty.util.Constant v7;
io.netty.util.ConstantPool v0;
java.lang.Class v1;
java.lang.Object v3, v5;
java.lang.String v2, v4, v6;
v0 := @this: io.netty.util.ConstantPool;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "firstNameComponent");
v4 = virtualinvoke v3.<java.lang.Class: java.lang.String getName()>();
v5 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "secondNameComponent");
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.Object)>(v4, v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001#\u0001");
v7 = virtualinvoke v0.<io.netty.util.ConstantPool: io.netty.util.Constant valueOf(java.lang.String)>(v6);
return v7;
}
public io.netty.util.Constant valueOf(java.lang.String)
{
io.netty.util.Constant v3;
io.netty.util.ConstantPool v0;
java.lang.String v1, v2;
v0 := @this: io.netty.util.ConstantPool;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.String checkNonEmpty(java.lang.String,java.lang.String)>(v1, "name");
v3 = specialinvoke v0.<io.netty.util.ConstantPool: io.netty.util.Constant getOrCreate(java.lang.String)>(v2);
return v3;
}
private io.netty.util.Constant getOrCreate(java.lang.String)
{
io.netty.util.Constant v5;
io.netty.util.ConstantPool v0;
int v4;
java.lang.Object v3;
java.lang.String v1;
java.util.concurrent.ConcurrentMap v2, v6;
v0 := @this: io.netty.util.ConstantPool;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.netty.util.ConstantPool: java.util.concurrent.ConcurrentMap constants>;
v3 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v1);
if v3 != null goto label1;
v4 = virtualinvoke v0.<io.netty.util.ConstantPool: int nextId()>();
v5 = virtualinvoke v0.<io.netty.util.ConstantPool: io.netty.util.Constant newConstant(int,java.lang.String)>(v4, v1);
v6 = v0.<io.netty.util.ConstantPool: java.util.concurrent.ConcurrentMap constants>;
interfaceinvoke v6.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(v1, v5);
return v5;
label1:
return v3;
}
public boolean exists(java.lang.String)
{
io.netty.util.ConstantPool v0;
java.lang.String v1, v3;
boolean v4;
java.util.concurrent.ConcurrentMap v2;
v0 := @this: io.netty.util.ConstantPool;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.netty.util.ConstantPool: java.util.concurrent.ConcurrentMap constants>;
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.String checkNonEmpty(java.lang.String,java.lang.String)>(v1, "name");
v4 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(v3);
return v4;
}
public io.netty.util.Constant newInstance(java.lang.String)
{
io.netty.util.Constant v3;
io.netty.util.ConstantPool v0;
java.lang.String v1, v2;
v0 := @this: io.netty.util.ConstantPool;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.String checkNonEmpty(java.lang.String,java.lang.String)>(v1, "name");
v3 = specialinvoke v0.<io.netty.util.ConstantPool: io.netty.util.Constant createOrThrow(java.lang.String)>(v2);
return v3;
}
private io.netty.util.Constant createOrThrow(java.lang.String)
{
io.netty.util.Constant v5;
java.lang.Object[] v9;
io.netty.util.ConstantPool v0;
java.lang.IllegalArgumentException v8;
java.util.concurrent.ConcurrentMap v2, v6;
int v4;
java.lang.Object v3, v7;
java.lang.String v1, v10;
v0 := @this: io.netty.util.ConstantPool;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.netty.util.ConstantPool: java.util.concurrent.ConcurrentMap constants>;
v3 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v1);
if v3 != null goto label1;
v4 = virtualinvoke v0.<io.netty.util.ConstantPool: int nextId()>();
v5 = virtualinvoke v0.<io.netty.util.ConstantPool: io.netty.util.Constant newConstant(int,java.lang.String)>(v4, v1);
v6 = v0.<io.netty.util.ConstantPool: java.util.concurrent.ConcurrentMap constants>;
v7 = interfaceinvoke v6.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(v1, v5);
if v7 != null goto label1;
return v5;
label1:
v8 = new java.lang.IllegalArgumentException;
v9 = newarray (java.lang.Object)[1];
v9[0] = v1;
v10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\'%s\' is already in use", v9);
specialinvoke v8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v10);
throw v8;
}
protected abstract io.netty.util.Constant newConstant(int, java.lang.String);
public final int nextId()
{
int v2;
java.util.concurrent.atomic.AtomicInteger v1;
io.netty.util.ConstantPool v0;
v0 := @this: io.netty.util.ConstantPool;
v1 = v0.<io.netty.util.ConstantPool: java.util.concurrent.atomic.AtomicInteger nextId>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
return v2;
}
}