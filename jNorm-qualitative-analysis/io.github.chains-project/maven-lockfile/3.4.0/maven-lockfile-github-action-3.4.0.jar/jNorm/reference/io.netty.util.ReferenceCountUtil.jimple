public final class io.netty.util.ReferenceCountUtil extends java.lang.Object
{
private static final io.netty.util.internal.logging.InternalLogger logger;
public static java.lang.Object retain(java.lang.Object)
{
java.lang.Object v0;
io.netty.util.ReferenceCounted v2;
boolean v1;
v0 := @parameter0: java.lang.Object;
v1 = v0 instanceof io.netty.util.ReferenceCounted;
if v1 == 0 goto label1;
v2 = interfaceinvoke v0.<io.netty.util.ReferenceCounted: io.netty.util.ReferenceCounted retain()>();
return v2;
label1:
return v0;
}
public static java.lang.Object retain(java.lang.Object, int)
{
int v1;
java.lang.Object v0;
io.netty.util.ReferenceCounted v3;
boolean v2;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: int;
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositive(int,java.lang.String)>(v1, "increment");
v2 = v0 instanceof io.netty.util.ReferenceCounted;
if v2 == 0 goto label1;
v3 = interfaceinvoke v0.<io.netty.util.ReferenceCounted: io.netty.util.ReferenceCounted retain(int)>(v1);
return v3;
label1:
return v0;
}
public static java.lang.Object touch(java.lang.Object)
{
java.lang.Object v0;
io.netty.util.ReferenceCounted v2;
boolean v1;
v0 := @parameter0: java.lang.Object;
v1 = v0 instanceof io.netty.util.ReferenceCounted;
if v1 == 0 goto label1;
v2 = interfaceinvoke v0.<io.netty.util.ReferenceCounted: io.netty.util.ReferenceCounted touch()>();
return v2;
label1:
return v0;
}
public static java.lang.Object touch(java.lang.Object, java.lang.Object)
{
java.lang.Object v0, v1;
io.netty.util.ReferenceCounted v3;
boolean v2;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 = v0 instanceof io.netty.util.ReferenceCounted;
if v2 == 0 goto label1;
v3 = interfaceinvoke v0.<io.netty.util.ReferenceCounted: io.netty.util.ReferenceCounted touch(java.lang.Object)>(v1);
return v3;
label1:
return v0;
}
public static boolean release(java.lang.Object)
{
java.lang.Object v0;
boolean v1, v2;
v0 := @parameter0: java.lang.Object;
v1 = v0 instanceof io.netty.util.ReferenceCounted;
if v1 == 0 goto label1;
v2 = interfaceinvoke v0.<io.netty.util.ReferenceCounted: boolean release()>();
return v2;
label1:
return 0;
}
public static boolean release(java.lang.Object, int)
{
int v1;
java.lang.Object v0;
boolean v2, v3;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: int;
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositive(int,java.lang.String)>(v1, "decrement");
v2 = v0 instanceof io.netty.util.ReferenceCounted;
if v2 == 0 goto label1;
v3 = interfaceinvoke v0.<io.netty.util.ReferenceCounted: boolean release(int)>(v1);
return v3;
label1:
return 0;
}
public static void safeRelease(java.lang.Object)
{
java.lang.Throwable v1;
java.lang.Object v0;
io.netty.util.internal.logging.InternalLogger v2;
v0 := @parameter0: java.lang.Object;
label1:
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v0);
label2:
goto label4;
label3:
v1 := @caughtexception;
v2 = <io.netty.util.ReferenceCountUtil: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v2.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Failed to release a message: {}", v0, v1);
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public static void safeRelease(java.lang.Object, int)
{
java.lang.Throwable v2;
java.lang.Object[] v6;
java.lang.Integer v7;
io.netty.util.internal.logging.InternalLogger v3, v5;
int v1;
java.lang.Object v0;
boolean v4;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: int;
label1:
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositive(int,java.lang.String)>(v1, "decrement");
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object,int)>(v0, v1);
label2:
goto label4;
label3:
v2 := @caughtexception;
v3 = <io.netty.util.ReferenceCountUtil: io.netty.util.internal.logging.InternalLogger logger>;
v4 = interfaceinvoke v3.<io.netty.util.internal.logging.InternalLogger: boolean isWarnEnabled()>();
if v4 == 0 goto label4;
v5 = <io.netty.util.ReferenceCountUtil: io.netty.util.internal.logging.InternalLogger logger>;
v6 = newarray (java.lang.Object)[3];
v6[0] = v0;
v7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v6[1] = v7;
v6[2] = v2;
interfaceinvoke v5.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object[])>("Failed to release a message: {} (decrement: {})", v6);
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public static java.lang.Object releaseLater(java.lang.Object)
{
java.lang.Object v0, v1;
v0 := @parameter0: java.lang.Object;
v1 = staticinvoke <io.netty.util.ReferenceCountUtil: java.lang.Object releaseLater(java.lang.Object,int)>(v0, 1);
return v1;
}
public static java.lang.Object releaseLater(java.lang.Object, int)
{
io.netty.util.ReferenceCountUtil$ReleasingTask v4;
java.lang.Thread v3;
int v1;
java.lang.Object v0;
boolean v2;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: int;
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositive(int,java.lang.String)>(v1, "decrement");
v2 = v0 instanceof io.netty.util.ReferenceCounted;
if v2 == 0 goto label1;
v3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v4 = new io.netty.util.ReferenceCountUtil$ReleasingTask;
specialinvoke v4.<io.netty.util.ReferenceCountUtil$ReleasingTask: void <init>(io.netty.util.ReferenceCounted,int)>(v0, v1);
staticinvoke <io.netty.util.ThreadDeathWatcher: void watch(java.lang.Thread,java.lang.Runnable)>(v3, v4);
label1:
return v0;
}
public static int refCnt(java.lang.Object)
{
int v2, v3;
java.lang.Object v0;
boolean v1;
v0 := @parameter0: java.lang.Object;
v1 = v0 instanceof io.netty.util.ReferenceCounted;
if v1 == 0 goto label1;
v2 = interfaceinvoke v0.<io.netty.util.ReferenceCounted: int refCnt()>();
goto label2;
label1:
v3 = (int) -1;
v2 = v3;
label2:
return v2;
}
private void <init>()
{
io.netty.util.ReferenceCountUtil v0;
v0 := @this: io.netty.util.ReferenceCountUtil;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void <clinit>()
{
java.lang.String[] v1;
io.netty.util.internal.logging.InternalLogger v0;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/util/ReferenceCountUtil;");
<io.netty.util.ReferenceCountUtil: io.netty.util.internal.logging.InternalLogger logger> = v0;
v1 = newarray (java.lang.String)[1];
v1[0] = "touch";
staticinvoke <io.netty.util.ResourceLeakDetector: void addExclusions(java.lang.Class,java.lang.String[])>(class "Lio/netty/util/ReferenceCountUtil;", v1);
return;
}
}