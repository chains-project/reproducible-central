public abstract class io.netty.util.ResourceLeakDetectorFactory extends java.lang.Object
{
private static final io.netty.util.internal.logging.InternalLogger logger;
private static volatile io.netty.util.ResourceLeakDetectorFactory factoryInstance;
public void <init>()
{
io.netty.util.ResourceLeakDetectorFactory v0;
v0 := @this: io.netty.util.ResourceLeakDetectorFactory;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static io.netty.util.ResourceLeakDetectorFactory instance()
{
io.netty.util.ResourceLeakDetectorFactory v0;
v0 = <io.netty.util.ResourceLeakDetectorFactory: io.netty.util.ResourceLeakDetectorFactory factoryInstance>;
return v0;
}
public static void setResourceLeakDetectorFactory(io.netty.util.ResourceLeakDetectorFactory)
{
io.netty.util.ResourceLeakDetectorFactory v0;
java.lang.Object v1;
v0 := @parameter0: io.netty.util.ResourceLeakDetectorFactory;
v1 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, "factory");
<io.netty.util.ResourceLeakDetectorFactory: io.netty.util.ResourceLeakDetectorFactory factoryInstance> = v1;
return;
}
public final io.netty.util.ResourceLeakDetector newResourceLeakDetector(java.lang.Class)
{
int v2;
io.netty.util.ResourceLeakDetectorFactory v0;
java.lang.Class v1;
io.netty.util.ResourceLeakDetector v3;
v0 := @this: io.netty.util.ResourceLeakDetectorFactory;
v1 := @parameter0: java.lang.Class;
v2 = <io.netty.util.ResourceLeakDetector: int SAMPLING_INTERVAL>;
v3 = virtualinvoke v0.<io.netty.util.ResourceLeakDetectorFactory: io.netty.util.ResourceLeakDetector newResourceLeakDetector(java.lang.Class,int)>(v1, v2);
return v3;
}
public abstract io.netty.util.ResourceLeakDetector newResourceLeakDetector(java.lang.Class, int, long);
public io.netty.util.ResourceLeakDetector newResourceLeakDetector(java.lang.Class, int)
{
int v2;
io.netty.util.ResourceLeakDetectorFactory v0;
java.lang.Class v1;
io.netty.util.ResourceLeakDetector v3;
v0 := @this: io.netty.util.ResourceLeakDetectorFactory;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: int;
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositive(int,java.lang.String)>(v2, "samplingInterval");
v3 = virtualinvoke v0.<io.netty.util.ResourceLeakDetectorFactory: io.netty.util.ResourceLeakDetector newResourceLeakDetector(java.lang.Class,int,long)>(v1, v2, 9223372036854775807L);
return v3;
}
static void <clinit>()
{
io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory v1;
io.netty.util.internal.logging.InternalLogger v0;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/util/ResourceLeakDetectorFactory;");
<io.netty.util.ResourceLeakDetectorFactory: io.netty.util.internal.logging.InternalLogger logger> = v0;
v1 = new io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory;
specialinvoke v1.<io.netty.util.ResourceLeakDetectorFactory$DefaultResourceLeakDetectorFactory: void <init>()>();
<io.netty.util.ResourceLeakDetectorFactory: io.netty.util.ResourceLeakDetectorFactory factoryInstance> = v1;
return;
}
}