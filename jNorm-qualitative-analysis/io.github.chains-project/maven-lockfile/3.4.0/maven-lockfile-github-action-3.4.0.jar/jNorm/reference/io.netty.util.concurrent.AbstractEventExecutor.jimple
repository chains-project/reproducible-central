public abstract class io.netty.util.concurrent.AbstractEventExecutor extends java.util.concurrent.AbstractExecutorService implements io.netty.util.concurrent.EventExecutor
{
private static final io.netty.util.internal.logging.InternalLogger logger;
static final long DEFAULT_SHUTDOWN_QUIET_PERIOD;
static final long DEFAULT_SHUTDOWN_TIMEOUT;
private final io.netty.util.concurrent.EventExecutorGroup parent;
private final java.util.Collection selfCollection;
protected void <init>()
{
io.netty.util.concurrent.AbstractEventExecutor v0;
v0 := @this: io.netty.util.concurrent.AbstractEventExecutor;
specialinvoke v0.<io.netty.util.concurrent.AbstractEventExecutor: void <init>(io.netty.util.concurrent.EventExecutorGroup)>(null);
return;
}
protected void <init>(io.netty.util.concurrent.EventExecutorGroup)
{
java.util.Set v2;
io.netty.util.concurrent.EventExecutorGroup v1;
io.netty.util.concurrent.AbstractEventExecutor v0;
v0 := @this: io.netty.util.concurrent.AbstractEventExecutor;
v1 := @parameter0: io.netty.util.concurrent.EventExecutorGroup;
specialinvoke v0.<java.util.concurrent.AbstractExecutorService: void <init>()>();
v2 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(v0);
v0.<io.netty.util.concurrent.AbstractEventExecutor: java.util.Collection selfCollection> = v2;
v0.<io.netty.util.concurrent.AbstractEventExecutor: io.netty.util.concurrent.EventExecutorGroup parent> = v1;
return;
}
public io.netty.util.concurrent.EventExecutorGroup parent()
{
io.netty.util.concurrent.EventExecutorGroup v1;
io.netty.util.concurrent.AbstractEventExecutor v0;
v0 := @this: io.netty.util.concurrent.AbstractEventExecutor;
v1 = v0.<io.netty.util.concurrent.AbstractEventExecutor: io.netty.util.concurrent.EventExecutorGroup parent>;
return v1;
}
public io.netty.util.concurrent.EventExecutor next()
{
io.netty.util.concurrent.AbstractEventExecutor v0;
v0 := @this: io.netty.util.concurrent.AbstractEventExecutor;
return v0;
}
public boolean inEventLoop()
{
boolean v2;
io.netty.util.concurrent.AbstractEventExecutor v0;
java.lang.Thread v1;
v0 := @this: io.netty.util.concurrent.AbstractEventExecutor;
v1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v2 = virtualinvoke v0.<io.netty.util.concurrent.AbstractEventExecutor: boolean inEventLoop(java.lang.Thread)>(v1);
return v2;
}
public java.util.Iterator iterator()
{
java.util.Iterator v2;
io.netty.util.concurrent.AbstractEventExecutor v0;
java.util.Collection v1;
v0 := @this: io.netty.util.concurrent.AbstractEventExecutor;
v1 = v0.<io.netty.util.concurrent.AbstractEventExecutor: java.util.Collection selfCollection>;
v2 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
return v2;
}
public io.netty.util.concurrent.Future shutdownGracefully()
{
java.util.concurrent.TimeUnit v1;
io.netty.util.concurrent.Future v2;
io.netty.util.concurrent.AbstractEventExecutor v0;
v0 := @this: io.netty.util.concurrent.AbstractEventExecutor;
v1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
v2 = virtualinvoke v0.<io.netty.util.concurrent.AbstractEventExecutor: io.netty.util.concurrent.Future shutdownGracefully(long,long,java.util.concurrent.TimeUnit)>(2L, 15L, v1);
return v2;
}
public abstract void shutdown();
public java.util.List shutdownNow()
{
java.util.List v1;
io.netty.util.concurrent.AbstractEventExecutor v0;
v0 := @this: io.netty.util.concurrent.AbstractEventExecutor;
virtualinvoke v0.<io.netty.util.concurrent.AbstractEventExecutor: void shutdown()>();
v1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v1;
}
public io.netty.util.concurrent.Promise newPromise()
{
io.netty.util.concurrent.DefaultPromise v1;
io.netty.util.concurrent.AbstractEventExecutor v0;
v0 := @this: io.netty.util.concurrent.AbstractEventExecutor;
v1 = new io.netty.util.concurrent.DefaultPromise;
specialinvoke v1.<io.netty.util.concurrent.DefaultPromise: void <init>(io.netty.util.concurrent.EventExecutor)>(v0);
return v1;
}
public io.netty.util.concurrent.ProgressivePromise newProgressivePromise()
{
io.netty.util.concurrent.DefaultProgressivePromise v1;
io.netty.util.concurrent.AbstractEventExecutor v0;
v0 := @this: io.netty.util.concurrent.AbstractEventExecutor;
v1 = new io.netty.util.concurrent.DefaultProgressivePromise;
specialinvoke v1.<io.netty.util.concurrent.DefaultProgressivePromise: void <init>(io.netty.util.concurrent.EventExecutor)>(v0);
return v1;
}
public io.netty.util.concurrent.Future newSucceededFuture(java.lang.Object)
{
java.lang.Object v1;
io.netty.util.concurrent.SucceededFuture v2;
io.netty.util.concurrent.AbstractEventExecutor v0;
v0 := @this: io.netty.util.concurrent.AbstractEventExecutor;
v1 := @parameter0: java.lang.Object;
v2 = new io.netty.util.concurrent.SucceededFuture;
specialinvoke v2.<io.netty.util.concurrent.SucceededFuture: void <init>(io.netty.util.concurrent.EventExecutor,java.lang.Object)>(v0, v1);
return v2;
}
public io.netty.util.concurrent.Future newFailedFuture(java.lang.Throwable)
{
java.lang.Throwable v1;
io.netty.util.concurrent.AbstractEventExecutor v0;
io.netty.util.concurrent.FailedFuture v2;
v0 := @this: io.netty.util.concurrent.AbstractEventExecutor;
v1 := @parameter0: java.lang.Throwable;
v2 = new io.netty.util.concurrent.FailedFuture;
specialinvoke v2.<io.netty.util.concurrent.FailedFuture: void <init>(io.netty.util.concurrent.EventExecutor,java.lang.Throwable)>(v0, v1);
return v2;
}
public io.netty.util.concurrent.Future submit(java.lang.Runnable)
{
java.util.concurrent.Future v2;
java.lang.Runnable v1;
io.netty.util.concurrent.AbstractEventExecutor v0;
v0 := @this: io.netty.util.concurrent.AbstractEventExecutor;
v1 := @parameter0: java.lang.Runnable;
v2 = specialinvoke v0.<java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>(v1);
return v2;
}
public io.netty.util.concurrent.Future submit(java.lang.Runnable, java.lang.Object)
{
java.util.concurrent.Future v3;
java.lang.Object v2;
java.lang.Runnable v1;
io.netty.util.concurrent.AbstractEventExecutor v0;
v0 := @this: io.netty.util.concurrent.AbstractEventExecutor;
v1 := @parameter0: java.lang.Runnable;
v2 := @parameter1: java.lang.Object;
v3 = specialinvoke v0.<java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object)>(v1, v2);
return v3;
}
public io.netty.util.concurrent.Future submit(java.util.concurrent.Callable)
{
java.util.concurrent.Callable v1;
java.util.concurrent.Future v2;
io.netty.util.concurrent.AbstractEventExecutor v0;
v0 := @this: io.netty.util.concurrent.AbstractEventExecutor;
v1 := @parameter0: java.util.concurrent.Callable;
v2 = specialinvoke v0.<java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>(v1);
return v2;
}
protected final java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable, java.lang.Object)
{
java.lang.Object v2;
io.netty.util.concurrent.PromiseTask v3;
java.lang.Runnable v1;
io.netty.util.concurrent.AbstractEventExecutor v0;
v0 := @this: io.netty.util.concurrent.AbstractEventExecutor;
v1 := @parameter0: java.lang.Runnable;
v2 := @parameter1: java.lang.Object;
v3 = new io.netty.util.concurrent.PromiseTask;
specialinvoke v3.<io.netty.util.concurrent.PromiseTask: void <init>(io.netty.util.concurrent.EventExecutor,java.lang.Runnable,java.lang.Object)>(v0, v1, v2);
return v3;
}
protected final java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable)
{
java.util.concurrent.Callable v1;
io.netty.util.concurrent.PromiseTask v2;
io.netty.util.concurrent.AbstractEventExecutor v0;
v0 := @this: io.netty.util.concurrent.AbstractEventExecutor;
v1 := @parameter0: java.util.concurrent.Callable;
v2 = new io.netty.util.concurrent.PromiseTask;
specialinvoke v2.<io.netty.util.concurrent.PromiseTask: void <init>(io.netty.util.concurrent.EventExecutor,java.util.concurrent.Callable)>(v0, v1);
return v2;
}
public io.netty.util.concurrent.ScheduledFuture schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v3;
java.lang.UnsupportedOperationException v4;
long v2;
java.lang.Runnable v1;
io.netty.util.concurrent.AbstractEventExecutor v0;
v0 := @this: io.netty.util.concurrent.AbstractEventExecutor;
v1 := @parameter0: java.lang.Runnable;
v2 := @parameter1: long;
v3 := @parameter2: java.util.concurrent.TimeUnit;
v4 = new java.lang.UnsupportedOperationException;
specialinvoke v4.<java.lang.UnsupportedOperationException: void <init>()>();
throw v4;
}
public io.netty.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable, long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v3;
java.lang.UnsupportedOperationException v4;
java.util.concurrent.Callable v1;
long v2;
io.netty.util.concurrent.AbstractEventExecutor v0;
v0 := @this: io.netty.util.concurrent.AbstractEventExecutor;
v1 := @parameter0: java.util.concurrent.Callable;
v2 := @parameter1: long;
v3 := @parameter2: java.util.concurrent.TimeUnit;
v4 = new java.lang.UnsupportedOperationException;
specialinvoke v4.<java.lang.UnsupportedOperationException: void <init>()>();
throw v4;
}
public io.netty.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v4;
java.lang.UnsupportedOperationException v5;
long v2, v3;
java.lang.Runnable v1;
io.netty.util.concurrent.AbstractEventExecutor v0;
v0 := @this: io.netty.util.concurrent.AbstractEventExecutor;
v1 := @parameter0: java.lang.Runnable;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 := @parameter3: java.util.concurrent.TimeUnit;
v5 = new java.lang.UnsupportedOperationException;
specialinvoke v5.<java.lang.UnsupportedOperationException: void <init>()>();
throw v5;
}
public io.netty.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v4;
java.lang.UnsupportedOperationException v5;
long v2, v3;
java.lang.Runnable v1;
io.netty.util.concurrent.AbstractEventExecutor v0;
v0 := @this: io.netty.util.concurrent.AbstractEventExecutor;
v1 := @parameter0: java.lang.Runnable;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 := @parameter3: java.util.concurrent.TimeUnit;
v5 = new java.lang.UnsupportedOperationException;
specialinvoke v5.<java.lang.UnsupportedOperationException: void <init>()>();
throw v5;
}
protected static void safeExecute(java.lang.Runnable)
{
java.lang.Throwable v1;
java.lang.Runnable v0;
io.netty.util.internal.logging.InternalLogger v2;
v0 := @parameter0: java.lang.Runnable;
label1:
staticinvoke <io.netty.util.concurrent.AbstractEventExecutor: void runTask(java.lang.Runnable)>(v0);
label2:
goto label4;
label3:
v1 := @caughtexception;
v2 = <io.netty.util.concurrent.AbstractEventExecutor: io.netty.util.internal.logging.InternalLogger logger>;
interfaceinvoke v2.<io.netty.util.internal.logging.InternalLogger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("A task raised an exception. Task: {}", v0, v1);
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
protected static void runTask(java.lang.Runnable)
{
java.lang.Runnable v0;
v0 := @parameter0: java.lang.Runnable;
interfaceinvoke v0.<java.lang.Runnable: void run()>();
return;
}
public void lazyExecute(java.lang.Runnable)
{
java.lang.Runnable v1;
io.netty.util.concurrent.AbstractEventExecutor v0;
v0 := @this: io.netty.util.concurrent.AbstractEventExecutor;
v1 := @parameter0: java.lang.Runnable;
virtualinvoke v0.<io.netty.util.concurrent.AbstractEventExecutor: void execute(java.lang.Runnable)>(v1);
return;
}
static void <clinit>()
{
io.netty.util.internal.logging.InternalLogger v0;
v0 = staticinvoke <io.netty.util.internal.logging.InternalLoggerFactory: io.netty.util.internal.logging.InternalLogger getInstance(java.lang.Class)>(class "Lio/netty/util/concurrent/AbstractEventExecutor;");
<io.netty.util.concurrent.AbstractEventExecutor: io.netty.util.internal.logging.InternalLogger logger> = v0;
return;
}
}