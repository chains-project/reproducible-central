public class io.netty.util.concurrent.DefaultThreadFactory extends java.lang.Object implements java.util.concurrent.ThreadFactory
{
private static final java.util.concurrent.atomic.AtomicInteger poolId;
private final java.util.concurrent.atomic.AtomicInteger nextId;
private final java.lang.String prefix;
private final boolean daemon;
private final int priority;
protected final java.lang.ThreadGroup threadGroup;
public void <init>(java.lang.Class)
{
java.lang.Class v1;
io.netty.util.concurrent.DefaultThreadFactory v0;
v0 := @this: io.netty.util.concurrent.DefaultThreadFactory;
v1 := @parameter0: java.lang.Class;
specialinvoke v0.<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.Class,boolean,int)>(v1, 0, 5);
return;
}
public void <init>(java.lang.String)
{
io.netty.util.concurrent.DefaultThreadFactory v0;
java.lang.String v1;
v0 := @this: io.netty.util.concurrent.DefaultThreadFactory;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.String,boolean,int)>(v1, 0, 5);
return;
}
public void <init>(java.lang.Class, boolean)
{
java.lang.Class v1;
io.netty.util.concurrent.DefaultThreadFactory v0;
boolean v2;
v0 := @this: io.netty.util.concurrent.DefaultThreadFactory;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: boolean;
specialinvoke v0.<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.Class,boolean,int)>(v1, v2, 5);
return;
}
public void <init>(java.lang.String, boolean)
{
io.netty.util.concurrent.DefaultThreadFactory v0;
java.lang.String v1;
boolean v2;
v0 := @this: io.netty.util.concurrent.DefaultThreadFactory;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
specialinvoke v0.<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.String,boolean,int)>(v1, v2, 5);
return;
}
public void <init>(java.lang.Class, int)
{
int v2;
java.lang.Class v1;
io.netty.util.concurrent.DefaultThreadFactory v0;
v0 := @this: io.netty.util.concurrent.DefaultThreadFactory;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: int;
specialinvoke v0.<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.Class,boolean,int)>(v1, 0, v2);
return;
}
public void <init>(java.lang.String, int)
{
int v2;
io.netty.util.concurrent.DefaultThreadFactory v0;
java.lang.String v1;
v0 := @this: io.netty.util.concurrent.DefaultThreadFactory;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
specialinvoke v0.<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.String,boolean,int)>(v1, 0, v2);
return;
}
public void <init>(java.lang.Class, boolean, int)
{
io.netty.util.concurrent.DefaultThreadFactory v0;
int v3;
java.lang.Class v1;
java.lang.String v4;
boolean v2;
v0 := @this: io.netty.util.concurrent.DefaultThreadFactory;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: boolean;
v3 := @parameter2: int;
v4 = staticinvoke <io.netty.util.concurrent.DefaultThreadFactory: java.lang.String toPoolName(java.lang.Class)>(v1);
specialinvoke v0.<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.String,boolean,int)>(v4, v2, v3);
return;
}
public static java.lang.String toPoolName(java.lang.Class)
{
char v10, v5, v7, v9;
java.util.Locale v3;
int v2;
java.lang.Class v0;
java.lang.String v1, v11, v12, v4;
boolean v6, v8;
v0 := @parameter0: java.lang.Class;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, "poolType");
v1 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String simpleClassName(java.lang.Class)>(v0);
v2 = virtualinvoke v1.<java.lang.String: int length()>();
lookupswitch(v2)
{
case 0: goto label1;
case 1: goto label2;
default: goto label3;
};
label1:
return "unknown";
label2:
v3 = <java.util.Locale: java.util.Locale US>;
v4 = virtualinvoke v1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>(v3);
return v4;
label3:
v5 = virtualinvoke v1.<java.lang.String: char charAt(int)>(0);
v6 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>(v5);
if v6 == 0 goto label4;
v7 = virtualinvoke v1.<java.lang.String: char charAt(int)>(1);
v8 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>(v7);
if v8 == 0 goto label4;
v9 = virtualinvoke v1.<java.lang.String: char charAt(int)>(0);
v10 = staticinvoke <java.lang.Character: char toLowerCase(char)>(v9);
v11 = virtualinvoke v1.<java.lang.String: java.lang.String substring(int)>(1);
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (char,java.lang.String)>(v10, v11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001");
return v12;
label4:
return v1;
}
public void <init>(java.lang.String, boolean, int, java.lang.ThreadGroup)
{
io.netty.util.concurrent.DefaultThreadFactory v0;
java.lang.ThreadGroup v4;
java.lang.IllegalArgumentException v6;
java.util.concurrent.atomic.AtomicInteger v5, v8;
int v3, v9;
java.lang.String v1, v10, v7;
boolean v2;
v0 := @this: io.netty.util.concurrent.DefaultThreadFactory;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
v3 := @parameter2: int;
v4 := @parameter3: java.lang.ThreadGroup;
specialinvoke v0.<java.lang.Object: void <init>()>();
v5 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v5.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.netty.util.concurrent.DefaultThreadFactory: java.util.concurrent.atomic.AtomicInteger nextId> = v5;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "poolName");
if v3 < 1 goto label1;
if v3 <= 10 goto label2;
label1:
v6 = new java.lang.IllegalArgumentException;
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("priority: \u0001 (expected: Thread.MIN_PRIORITY <= priority <= Thread.MAX_PRIORITY)");
specialinvoke v6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v7);
throw v6;
label2:
v8 = <io.netty.util.concurrent.DefaultThreadFactory: java.util.concurrent.atomic.AtomicInteger poolId>;
v9 = virtualinvoke v8.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int)>(v1, v9) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001-\u0001-");
v0.<io.netty.util.concurrent.DefaultThreadFactory: java.lang.String prefix> = v10;
v0.<io.netty.util.concurrent.DefaultThreadFactory: boolean daemon> = v2;
v0.<io.netty.util.concurrent.DefaultThreadFactory: int priority> = v3;
v0.<io.netty.util.concurrent.DefaultThreadFactory: java.lang.ThreadGroup threadGroup> = v4;
return;
}
public void <init>(java.lang.String, boolean, int)
{
io.netty.util.concurrent.DefaultThreadFactory v0;
int v3;
java.lang.String v1;
boolean v2;
v0 := @this: io.netty.util.concurrent.DefaultThreadFactory;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
v3 := @parameter2: int;
specialinvoke v0.<io.netty.util.concurrent.DefaultThreadFactory: void <init>(java.lang.String,boolean,int,java.lang.ThreadGroup)>(v1, v2, v3, null);
return;
}
public java.lang.Thread newThread(java.lang.Runnable)
{
io.netty.util.concurrent.DefaultThreadFactory v0;
java.lang.Runnable v1, v2;
java.lang.Exception v14;
java.util.concurrent.atomic.AtomicInteger v4;
java.lang.Thread v7;
int v11, v12, v13, v5;
java.lang.String v3, v6;
boolean v10, v8, v9;
v0 := @this: io.netty.util.concurrent.DefaultThreadFactory;
v1 := @parameter0: java.lang.Runnable;
v2 = staticinvoke <io.netty.util.concurrent.FastThreadLocalRunnable: java.lang.Runnable wrap(java.lang.Runnable)>(v1);
v3 = v0.<io.netty.util.concurrent.DefaultThreadFactory: java.lang.String prefix>;
v4 = v0.<io.netty.util.concurrent.DefaultThreadFactory: java.util.concurrent.atomic.AtomicInteger nextId>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int)>(v3, v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001");
v7 = virtualinvoke v0.<io.netty.util.concurrent.DefaultThreadFactory: java.lang.Thread newThread(java.lang.Runnable,java.lang.String)>(v2, v6);
label1:
v8 = virtualinvoke v7.<java.lang.Thread: boolean isDaemon()>();
v9 = v0.<io.netty.util.concurrent.DefaultThreadFactory: boolean daemon>;
if v8 == v9 goto label2;
v10 = v0.<io.netty.util.concurrent.DefaultThreadFactory: boolean daemon>;
virtualinvoke v7.<java.lang.Thread: void setDaemon(boolean)>(v10);
label2:
v11 = virtualinvoke v7.<java.lang.Thread: int getPriority()>();
v12 = v0.<io.netty.util.concurrent.DefaultThreadFactory: int priority>;
if v11 == v12 goto label5;
v13 = v0.<io.netty.util.concurrent.DefaultThreadFactory: int priority>;
virtualinvoke v7.<java.lang.Thread: void setPriority(int)>(v13);
label3:
goto label5;
label4:
v14 := @caughtexception;
label5:
return v7;
catch java.lang.Exception from label1 to label3 with label4;
}
protected java.lang.Thread newThread(java.lang.Runnable, java.lang.String)
{
io.netty.util.concurrent.DefaultThreadFactory v0;
io.netty.util.concurrent.FastThreadLocalThread v3;
java.lang.String v2;
java.lang.ThreadGroup v4;
java.lang.Runnable v1;
v0 := @this: io.netty.util.concurrent.DefaultThreadFactory;
v1 := @parameter0: java.lang.Runnable;
v2 := @parameter1: java.lang.String;
v3 = new io.netty.util.concurrent.FastThreadLocalThread;
v4 = v0.<io.netty.util.concurrent.DefaultThreadFactory: java.lang.ThreadGroup threadGroup>;
specialinvoke v3.<io.netty.util.concurrent.FastThreadLocalThread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)>(v4, v1, v2);
return v3;
}
static void <clinit>()
{
java.util.concurrent.atomic.AtomicInteger v0;
v0 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v0.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
<io.netty.util.concurrent.DefaultThreadFactory: java.util.concurrent.atomic.AtomicInteger poolId> = v0;
return;
}
}