public final class io.netty.util.concurrent.FailedFuture extends io.netty.util.concurrent.CompleteFuture
{
private final java.lang.Throwable cause;
public void <init>(io.netty.util.concurrent.EventExecutor, java.lang.Throwable)
{
io.netty.util.concurrent.EventExecutor v1;
java.lang.Throwable v2;
java.lang.Object v3;
io.netty.util.concurrent.FailedFuture v0;
v0 := @this: io.netty.util.concurrent.FailedFuture;
v1 := @parameter0: io.netty.util.concurrent.EventExecutor;
v2 := @parameter1: java.lang.Throwable;
specialinvoke v0.<io.netty.util.concurrent.CompleteFuture: void <init>(io.netty.util.concurrent.EventExecutor)>(v1);
v3 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v2, "cause");
v0.<io.netty.util.concurrent.FailedFuture: java.lang.Throwable cause> = v3;
return;
}
public java.lang.Throwable cause()
{
java.lang.Throwable v1;
io.netty.util.concurrent.FailedFuture v0;
v0 := @this: io.netty.util.concurrent.FailedFuture;
v1 = v0.<io.netty.util.concurrent.FailedFuture: java.lang.Throwable cause>;
return v1;
}
public boolean isSuccess()
{
io.netty.util.concurrent.FailedFuture v0;
v0 := @this: io.netty.util.concurrent.FailedFuture;
return 0;
}
public io.netty.util.concurrent.Future sync()
{
java.lang.Throwable v1;
io.netty.util.concurrent.FailedFuture v0;
v0 := @this: io.netty.util.concurrent.FailedFuture;
v1 = v0.<io.netty.util.concurrent.FailedFuture: java.lang.Throwable cause>;
staticinvoke <io.netty.util.internal.PlatformDependent: void throwException(java.lang.Throwable)>(v1);
return v0;
}
public io.netty.util.concurrent.Future syncUninterruptibly()
{
java.lang.Throwable v1;
io.netty.util.concurrent.FailedFuture v0;
v0 := @this: io.netty.util.concurrent.FailedFuture;
v1 = v0.<io.netty.util.concurrent.FailedFuture: java.lang.Throwable cause>;
staticinvoke <io.netty.util.internal.PlatformDependent: void throwException(java.lang.Throwable)>(v1);
return v0;
}
public java.lang.Object getNow()
{
io.netty.util.concurrent.FailedFuture v0;
v0 := @this: io.netty.util.concurrent.FailedFuture;
return null;
}
}