class io.netty.util.concurrent.PromiseTask extends io.netty.util.concurrent.DefaultPromise implements java.util.concurrent.RunnableFuture
{
private static final java.lang.Runnable COMPLETED;
private static final java.lang.Runnable CANCELLED;
private static final java.lang.Runnable FAILED;
private java.lang.Object task;
void <init>(io.netty.util.concurrent.EventExecutor, java.lang.Runnable, java.lang.Object)
{
io.netty.util.concurrent.EventExecutor v1;
io.netty.util.concurrent.PromiseTask$RunnableAdapter v5;
java.lang.Object v3, v4;
io.netty.util.concurrent.PromiseTask v0;
java.lang.Runnable v2;
v0 := @this: io.netty.util.concurrent.PromiseTask;
v1 := @parameter0: io.netty.util.concurrent.EventExecutor;
v2 := @parameter1: java.lang.Runnable;
v3 := @parameter2: java.lang.Object;
specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: void <init>(io.netty.util.concurrent.EventExecutor)>(v1);
if v3 != null goto label1;
v4 = v2;
goto label2;
label1:
v5 = new io.netty.util.concurrent.PromiseTask$RunnableAdapter;
v4 = v5;
specialinvoke v5.<io.netty.util.concurrent.PromiseTask$RunnableAdapter: void <init>(java.lang.Runnable,java.lang.Object)>(v2, v3);
label2:
v0.<io.netty.util.concurrent.PromiseTask: java.lang.Object task> = v4;
return;
}
void <init>(io.netty.util.concurrent.EventExecutor, java.lang.Runnable)
{
io.netty.util.concurrent.EventExecutor v1;
io.netty.util.concurrent.PromiseTask v0;
java.lang.Runnable v2;
v0 := @this: io.netty.util.concurrent.PromiseTask;
v1 := @parameter0: io.netty.util.concurrent.EventExecutor;
v2 := @parameter1: java.lang.Runnable;
specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: void <init>(io.netty.util.concurrent.EventExecutor)>(v1);
v0.<io.netty.util.concurrent.PromiseTask: java.lang.Object task> = v2;
return;
}
void <init>(io.netty.util.concurrent.EventExecutor, java.util.concurrent.Callable)
{
io.netty.util.concurrent.EventExecutor v1;
java.util.concurrent.Callable v2;
io.netty.util.concurrent.PromiseTask v0;
v0 := @this: io.netty.util.concurrent.PromiseTask;
v1 := @parameter0: io.netty.util.concurrent.EventExecutor;
v2 := @parameter1: java.util.concurrent.Callable;
specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: void <init>(io.netty.util.concurrent.EventExecutor)>(v1);
v0.<io.netty.util.concurrent.PromiseTask: java.lang.Object task> = v2;
return;
}
public final int hashCode()
{
int v1;
io.netty.util.concurrent.PromiseTask v0;
v0 := @this: io.netty.util.concurrent.PromiseTask;
v1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(v0);
return v1;
}
public final boolean equals(java.lang.Object)
{
java.lang.Object v1;
io.netty.util.concurrent.PromiseTask v0;
boolean v2;
v0 := @this: io.netty.util.concurrent.PromiseTask;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
java.lang.Object runTask() throws java.lang.Throwable
{
java.lang.Object v1, v3;
io.netty.util.concurrent.PromiseTask v0;
boolean v2;
v0 := @this: io.netty.util.concurrent.PromiseTask;
v1 = v0.<io.netty.util.concurrent.PromiseTask: java.lang.Object task>;
v2 = v1 instanceof java.util.concurrent.Callable;
if v2 == 0 goto label1;
v3 = interfaceinvoke v1.<java.util.concurrent.Callable: java.lang.Object call()>();
return v3;
label1:
interfaceinvoke v1.<java.lang.Runnable: void run()>();
return null;
}
public void run()
{
java.lang.Throwable v3;
java.lang.Object v2;
io.netty.util.concurrent.PromiseTask v0;
boolean v1;
v0 := @this: io.netty.util.concurrent.PromiseTask;
label1:
v1 = virtualinvoke v0.<io.netty.util.concurrent.PromiseTask: boolean setUncancellableInternal()>();
if v1 == 0 goto label4;
v2 = virtualinvoke v0.<io.netty.util.concurrent.PromiseTask: java.lang.Object runTask()>();
virtualinvoke v0.<io.netty.util.concurrent.PromiseTask: io.netty.util.concurrent.Promise setSuccessInternal(java.lang.Object)>(v2);
label2:
goto label4;
label3:
v3 := @caughtexception;
virtualinvoke v0.<io.netty.util.concurrent.PromiseTask: io.netty.util.concurrent.Promise setFailureInternal(java.lang.Throwable)>(v3);
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
private boolean clearTaskAfterCompletion(boolean, java.lang.Runnable)
{
io.netty.util.concurrent.PromiseTask v0;
java.lang.Runnable v2;
boolean v1;
v0 := @this: io.netty.util.concurrent.PromiseTask;
v1 := @parameter0: boolean;
v2 := @parameter1: java.lang.Runnable;
if v1 == 0 goto label1;
v0.<io.netty.util.concurrent.PromiseTask: java.lang.Object task> = v2;
label1:
return v1;
}
public final io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
java.lang.IllegalStateException v2;
io.netty.util.concurrent.PromiseTask v0;
v0 := @this: io.netty.util.concurrent.PromiseTask;
v1 := @parameter0: java.lang.Throwable;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>()>();
throw v2;
}
protected final io.netty.util.concurrent.Promise setFailureInternal(java.lang.Throwable)
{
java.lang.Throwable v1;
io.netty.util.concurrent.PromiseTask v0;
java.lang.Runnable v2;
v0 := @this: io.netty.util.concurrent.PromiseTask;
v1 := @parameter0: java.lang.Throwable;
specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>(v1);
v2 = <io.netty.util.concurrent.PromiseTask: java.lang.Runnable FAILED>;
specialinvoke v0.<io.netty.util.concurrent.PromiseTask: boolean clearTaskAfterCompletion(boolean,java.lang.Runnable)>(1, v2);
return v0;
}
public final boolean tryFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
io.netty.util.concurrent.PromiseTask v0;
v0 := @this: io.netty.util.concurrent.PromiseTask;
v1 := @parameter0: java.lang.Throwable;
return 0;
}
protected final boolean tryFailureInternal(java.lang.Throwable)
{
java.lang.Throwable v1;
io.netty.util.concurrent.PromiseTask v0;
java.lang.Runnable v3;
boolean v2, v4;
v0 := @this: io.netty.util.concurrent.PromiseTask;
v1 := @parameter0: java.lang.Throwable;
v2 = specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: boolean tryFailure(java.lang.Throwable)>(v1);
v3 = <io.netty.util.concurrent.PromiseTask: java.lang.Runnable FAILED>;
v4 = specialinvoke v0.<io.netty.util.concurrent.PromiseTask: boolean clearTaskAfterCompletion(boolean,java.lang.Runnable)>(v2, v3);
return v4;
}
public final io.netty.util.concurrent.Promise setSuccess(java.lang.Object)
{
java.lang.IllegalStateException v2;
java.lang.Object v1;
io.netty.util.concurrent.PromiseTask v0;
v0 := @this: io.netty.util.concurrent.PromiseTask;
v1 := @parameter0: java.lang.Object;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>()>();
throw v2;
}
protected final io.netty.util.concurrent.Promise setSuccessInternal(java.lang.Object)
{
java.lang.Object v1;
io.netty.util.concurrent.PromiseTask v0;
java.lang.Runnable v2;
v0 := @this: io.netty.util.concurrent.PromiseTask;
v1 := @parameter0: java.lang.Object;
specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: io.netty.util.concurrent.Promise setSuccess(java.lang.Object)>(v1);
v2 = <io.netty.util.concurrent.PromiseTask: java.lang.Runnable COMPLETED>;
specialinvoke v0.<io.netty.util.concurrent.PromiseTask: boolean clearTaskAfterCompletion(boolean,java.lang.Runnable)>(1, v2);
return v0;
}
public final boolean trySuccess(java.lang.Object)
{
java.lang.Object v1;
io.netty.util.concurrent.PromiseTask v0;
v0 := @this: io.netty.util.concurrent.PromiseTask;
v1 := @parameter0: java.lang.Object;
return 0;
}
protected final boolean trySuccessInternal(java.lang.Object)
{
java.lang.Object v1;
io.netty.util.concurrent.PromiseTask v0;
java.lang.Runnable v3;
boolean v2, v4;
v0 := @this: io.netty.util.concurrent.PromiseTask;
v1 := @parameter0: java.lang.Object;
v2 = specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: boolean trySuccess(java.lang.Object)>(v1);
v3 = <io.netty.util.concurrent.PromiseTask: java.lang.Runnable COMPLETED>;
v4 = specialinvoke v0.<io.netty.util.concurrent.PromiseTask: boolean clearTaskAfterCompletion(boolean,java.lang.Runnable)>(v2, v3);
return v4;
}
public final boolean setUncancellable()
{
java.lang.IllegalStateException v1;
io.netty.util.concurrent.PromiseTask v0;
v0 := @this: io.netty.util.concurrent.PromiseTask;
v1 = new java.lang.IllegalStateException;
specialinvoke v1.<java.lang.IllegalStateException: void <init>()>();
throw v1;
}
protected final boolean setUncancellableInternal()
{
io.netty.util.concurrent.PromiseTask v0;
boolean v1;
v0 := @this: io.netty.util.concurrent.PromiseTask;
v1 = specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: boolean setUncancellable()>();
return v1;
}
public boolean cancel(boolean)
{
io.netty.util.concurrent.PromiseTask v0;
java.lang.Runnable v3;
boolean v1, v2, v4;
v0 := @this: io.netty.util.concurrent.PromiseTask;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: boolean cancel(boolean)>(v1);
v3 = <io.netty.util.concurrent.PromiseTask: java.lang.Runnable CANCELLED>;
v4 = specialinvoke v0.<io.netty.util.concurrent.PromiseTask: boolean clearTaskAfterCompletion(boolean,java.lang.Runnable)>(v2, v3);
return v4;
}
protected java.lang.StringBuilder toStringBuilder()
{
io.netty.util.concurrent.PromiseTask v0;
int v2, v3;
java.lang.Object v5;
java.lang.StringBuilder v1, v4, v6, v7;
v0 := @this: io.netty.util.concurrent.PromiseTask;
v1 = specialinvoke v0.<io.netty.util.concurrent.DefaultPromise: java.lang.StringBuilder toStringBuilder()>();
v2 = virtualinvoke v1.<java.lang.StringBuilder: int length()>();
v3 = v2 - 1;
virtualinvoke v1.<java.lang.StringBuilder: void setCharAt(int,char)>(v3, 44);
v4 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" task: ");
v5 = v0.<io.netty.util.concurrent.PromiseTask: java.lang.Object task>;
v6 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v5);
v7 = virtualinvoke v6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);
return v7;
}
static void <clinit>()
{
io.netty.util.concurrent.PromiseTask$SentinelRunnable v0, v1, v2;
v0 = new io.netty.util.concurrent.PromiseTask$SentinelRunnable;
specialinvoke v0.<io.netty.util.concurrent.PromiseTask$SentinelRunnable: void <init>(java.lang.String)>("COMPLETED");
<io.netty.util.concurrent.PromiseTask: java.lang.Runnable COMPLETED> = v0;
v1 = new io.netty.util.concurrent.PromiseTask$SentinelRunnable;
specialinvoke v1.<io.netty.util.concurrent.PromiseTask$SentinelRunnable: void <init>(java.lang.String)>("CANCELLED");
<io.netty.util.concurrent.PromiseTask: java.lang.Runnable CANCELLED> = v1;
v2 = new io.netty.util.concurrent.PromiseTask$SentinelRunnable;
specialinvoke v2.<io.netty.util.concurrent.PromiseTask$SentinelRunnable: void <init>(java.lang.String)>("FAILED");
<io.netty.util.concurrent.PromiseTask: java.lang.Runnable FAILED> = v2;
return;
}
}