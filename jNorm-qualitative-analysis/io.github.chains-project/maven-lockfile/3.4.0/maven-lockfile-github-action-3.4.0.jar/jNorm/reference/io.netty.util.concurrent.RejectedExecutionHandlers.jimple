public final class io.netty.util.concurrent.RejectedExecutionHandlers extends java.lang.Object
{
private static final io.netty.util.concurrent.RejectedExecutionHandler REJECT;
private void <init>()
{
io.netty.util.concurrent.RejectedExecutionHandlers v0;
v0 := @this: io.netty.util.concurrent.RejectedExecutionHandlers;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static io.netty.util.concurrent.RejectedExecutionHandler reject()
{
io.netty.util.concurrent.RejectedExecutionHandler v0;
v0 = <io.netty.util.concurrent.RejectedExecutionHandlers: io.netty.util.concurrent.RejectedExecutionHandler REJECT>;
return v0;
}
public static io.netty.util.concurrent.RejectedExecutionHandler backoff(int, long, java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v2;
io.netty.util.concurrent.RejectedExecutionHandlers$2 v4;
int v0;
long v1, v3;
v0 := @parameter0: int;
v1 := @parameter1: long;
v2 := @parameter2: java.util.concurrent.TimeUnit;
staticinvoke <io.netty.util.internal.ObjectUtil: int checkPositive(int,java.lang.String)>(v0, "retries");
v3 = virtualinvoke v2.<java.util.concurrent.TimeUnit: long toNanos(long)>(v1);
v4 = new io.netty.util.concurrent.RejectedExecutionHandlers$2;
specialinvoke v4.<io.netty.util.concurrent.RejectedExecutionHandlers$2: void <init>(int,long)>(v0, v3);
return v4;
}
static void <clinit>()
{
io.netty.util.concurrent.RejectedExecutionHandlers$1 v0;
v0 = new io.netty.util.concurrent.RejectedExecutionHandlers$1;
specialinvoke v0.<io.netty.util.concurrent.RejectedExecutionHandlers$1: void <init>()>();
<io.netty.util.concurrent.RejectedExecutionHandlers: io.netty.util.concurrent.RejectedExecutionHandler REJECT> = v0;
return;
}
}