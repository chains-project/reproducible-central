public final class io.netty.util.concurrent.ThreadPerTaskExecutor extends java.lang.Object implements java.util.concurrent.Executor
{
private final java.util.concurrent.ThreadFactory threadFactory;
public void <init>(java.util.concurrent.ThreadFactory)
{
io.netty.util.concurrent.ThreadPerTaskExecutor v0;
java.lang.Object v2;
java.util.concurrent.ThreadFactory v1;
v0 := @this: io.netty.util.concurrent.ThreadPerTaskExecutor;
v1 := @parameter0: java.util.concurrent.ThreadFactory;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "threadFactory");
v0.<io.netty.util.concurrent.ThreadPerTaskExecutor: java.util.concurrent.ThreadFactory threadFactory> = v2;
return;
}
public void execute(java.lang.Runnable)
{
io.netty.util.concurrent.ThreadPerTaskExecutor v0;
java.lang.Thread v3;
java.util.concurrent.ThreadFactory v2;
java.lang.Runnable v1;
v0 := @this: io.netty.util.concurrent.ThreadPerTaskExecutor;
v1 := @parameter0: java.lang.Runnable;
v2 = v0.<io.netty.util.concurrent.ThreadPerTaskExecutor: java.util.concurrent.ThreadFactory threadFactory>;
v3 = interfaceinvoke v2.<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>(v1);
virtualinvoke v3.<java.lang.Thread: void start()>();
return;
}
}