public final class io.netty.util.internal.ReflectionUtil extends java.lang.Object
{
private void <init>()
{
io.netty.util.internal.ReflectionUtil v0;
v0 := @this: io.netty.util.internal.ReflectionUtil;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.lang.Throwable trySetAccessible(java.lang.reflect.AccessibleObject, boolean)
{
java.lang.UnsupportedOperationException v3;
java.lang.reflect.AccessibleObject v0;
java.lang.SecurityException v4;
java.lang.RuntimeException v5, v6;
boolean v1, v2;
v0 := @parameter0: java.lang.reflect.AccessibleObject;
v1 := @parameter1: boolean;
if v1 == 0 goto label1;
v2 = staticinvoke <io.netty.util.internal.PlatformDependent0: boolean isExplicitTryReflectionSetAccessible()>();
if v2 != 0 goto label1;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Reflective setAccessible(true) disabled");
return v3;
label1:
virtualinvoke v0.<java.lang.reflect.AccessibleObject: void setAccessible(boolean)>(1);
label2:
return null;
label3:
v4 := @caughtexception;
return v4;
label4:
v5 := @caughtexception;
v6 = staticinvoke <io.netty.util.internal.ReflectionUtil: java.lang.RuntimeException handleInaccessibleObjectException(java.lang.RuntimeException)>(v5);
return v6;
catch java.lang.SecurityException from label1 to label2 with label3;
catch java.lang.RuntimeException from label1 to label2 with label4;
}
private static java.lang.RuntimeException handleInaccessibleObjectException(java.lang.RuntimeException)
{
java.lang.Class v2;
java.lang.RuntimeException v0;
java.lang.String v1, v3;
boolean v4;
v0 := @parameter0: java.lang.RuntimeException;
v1 = "java.lang.reflect.InaccessibleObjectException";
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v2.<java.lang.Class: java.lang.String getName()>();
v4 = virtualinvoke v1.<java.lang.String: boolean equals(java.lang.Object)>(v3);
if v4 == 0 goto label1;
return v0;
label1:
throw v0;
}
}