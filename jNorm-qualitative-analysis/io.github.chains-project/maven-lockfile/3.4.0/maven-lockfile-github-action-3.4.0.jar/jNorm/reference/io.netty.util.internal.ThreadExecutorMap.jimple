public final class io.netty.util.internal.ThreadExecutorMap extends java.lang.Object
{
private static final io.netty.util.concurrent.FastThreadLocal mappings;
private void <init>()
{
io.netty.util.internal.ThreadExecutorMap v0;
v0 := @this: io.netty.util.internal.ThreadExecutorMap;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static io.netty.util.concurrent.EventExecutor currentExecutor()
{
java.lang.Object v1;
io.netty.util.concurrent.FastThreadLocal v0;
v0 = <io.netty.util.internal.ThreadExecutorMap: io.netty.util.concurrent.FastThreadLocal mappings>;
v1 = virtualinvoke v0.<io.netty.util.concurrent.FastThreadLocal: java.lang.Object get()>();
return v1;
}
private static void setCurrentEventExecutor(io.netty.util.concurrent.EventExecutor)
{
io.netty.util.concurrent.EventExecutor v0;
io.netty.util.concurrent.FastThreadLocal v1;
v0 := @parameter0: io.netty.util.concurrent.EventExecutor;
v1 = <io.netty.util.internal.ThreadExecutorMap: io.netty.util.concurrent.FastThreadLocal mappings>;
virtualinvoke v1.<io.netty.util.concurrent.FastThreadLocal: void set(java.lang.Object)>(v0);
return;
}
public static java.util.concurrent.Executor apply(java.util.concurrent.Executor, io.netty.util.concurrent.EventExecutor)
{
io.netty.util.concurrent.EventExecutor v1;
io.netty.util.internal.ThreadExecutorMap$1 v2;
java.util.concurrent.Executor v0;
v0 := @parameter0: java.util.concurrent.Executor;
v1 := @parameter1: io.netty.util.concurrent.EventExecutor;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, "executor");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "eventExecutor");
v2 = new io.netty.util.internal.ThreadExecutorMap$1;
specialinvoke v2.<io.netty.util.internal.ThreadExecutorMap$1: void <init>(java.util.concurrent.Executor,io.netty.util.concurrent.EventExecutor)>(v0, v1);
return v2;
}
public static java.lang.Runnable apply(java.lang.Runnable, io.netty.util.concurrent.EventExecutor)
{
io.netty.util.concurrent.EventExecutor v1;
io.netty.util.internal.ThreadExecutorMap$2 v2;
java.lang.Runnable v0;
v0 := @parameter0: java.lang.Runnable;
v1 := @parameter1: io.netty.util.concurrent.EventExecutor;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, "command");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "eventExecutor");
v2 = new io.netty.util.internal.ThreadExecutorMap$2;
specialinvoke v2.<io.netty.util.internal.ThreadExecutorMap$2: void <init>(io.netty.util.concurrent.EventExecutor,java.lang.Runnable)>(v1, v0);
return v2;
}
public static java.util.concurrent.ThreadFactory apply(java.util.concurrent.ThreadFactory, io.netty.util.concurrent.EventExecutor)
{
io.netty.util.concurrent.EventExecutor v1;
java.util.concurrent.ThreadFactory v0;
io.netty.util.internal.ThreadExecutorMap$3 v2;
v0 := @parameter0: java.util.concurrent.ThreadFactory;
v1 := @parameter1: io.netty.util.concurrent.EventExecutor;
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v0, "threadFactory");
staticinvoke <io.netty.util.internal.ObjectUtil: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>(v1, "eventExecutor");
v2 = new io.netty.util.internal.ThreadExecutorMap$3;
specialinvoke v2.<io.netty.util.internal.ThreadExecutorMap$3: void <init>(java.util.concurrent.ThreadFactory,io.netty.util.concurrent.EventExecutor)>(v0, v1);
return v2;
}
static void <clinit>()
{
io.netty.util.concurrent.FastThreadLocal v0;
v0 = new io.netty.util.concurrent.FastThreadLocal;
specialinvoke v0.<io.netty.util.concurrent.FastThreadLocal: void <init>()>();
<io.netty.util.internal.ThreadExecutorMap: io.netty.util.concurrent.FastThreadLocal mappings> = v0;
return;
}
}