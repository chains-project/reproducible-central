public class io.netty.util.internal.logging.Slf4JLoggerFactory extends io.netty.util.internal.logging.InternalLoggerFactory
{
public static final io.netty.util.internal.logging.InternalLoggerFactory INSTANCE;
static final boolean $assertionsDisabled;
public void <init>()
{
io.netty.util.internal.logging.Slf4JLoggerFactory v0;
v0 := @this: io.netty.util.internal.logging.Slf4JLoggerFactory;
specialinvoke v0.<io.netty.util.internal.logging.InternalLoggerFactory: void <init>()>();
return;
}
void <init>(boolean)
{
io.netty.util.internal.logging.Slf4JLoggerFactory v0;
java.lang.AssertionError v3;
java.lang.NoClassDefFoundError v6;
org.slf4j.ILoggerFactory v4;
boolean v1, v2, v5;
v0 := @this: io.netty.util.internal.logging.Slf4JLoggerFactory;
v1 := @parameter0: boolean;
specialinvoke v0.<io.netty.util.internal.logging.InternalLoggerFactory: void <init>()>();
v2 = <io.netty.util.internal.logging.Slf4JLoggerFactory: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
if v1 != 0 goto label1;
v3 = new java.lang.AssertionError;
specialinvoke v3.<java.lang.AssertionError: void <init>()>();
throw v3;
label1:
v4 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.ILoggerFactory getILoggerFactory()>();
v5 = v4 instanceof org.slf4j.helpers.NOPLoggerFactory;
if v5 == 0 goto label2;
v6 = new java.lang.NoClassDefFoundError;
specialinvoke v6.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>("NOPLoggerFactory not supported");
throw v6;
label2:
return;
}
public io.netty.util.internal.logging.InternalLogger newInstance(java.lang.String)
{
io.netty.util.internal.logging.Slf4JLoggerFactory v0;
org.slf4j.Logger v2;
io.netty.util.internal.logging.InternalLogger v3;
java.lang.String v1;
v0 := @this: io.netty.util.internal.logging.Slf4JLoggerFactory;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.String)>(v1);
v3 = staticinvoke <io.netty.util.internal.logging.Slf4JLoggerFactory: io.netty.util.internal.logging.InternalLogger wrapLogger(org.slf4j.Logger)>(v2);
return v3;
}
static io.netty.util.internal.logging.InternalLogger wrapLogger(org.slf4j.Logger)
{
io.netty.util.internal.logging.AbstractInternalLogger v3;
org.slf4j.Logger v0;
io.netty.util.internal.logging.Slf4JLogger v4;
io.netty.util.internal.logging.LocationAwareSlf4JLogger v2;
boolean v1;
v0 := @parameter0: org.slf4j.Logger;
v1 = v0 instanceof org.slf4j.spi.LocationAwareLogger;
if v1 == 0 goto label1;
v2 = new io.netty.util.internal.logging.LocationAwareSlf4JLogger;
v3 = v2;
specialinvoke v2.<io.netty.util.internal.logging.LocationAwareSlf4JLogger: void <init>(org.slf4j.spi.LocationAwareLogger)>(v0);
goto label2;
label1:
v4 = new io.netty.util.internal.logging.Slf4JLogger;
v3 = v4;
specialinvoke v4.<io.netty.util.internal.logging.Slf4JLogger: void <init>(org.slf4j.Logger)>(v0);
label2:
return v3;
}
static io.netty.util.internal.logging.InternalLoggerFactory getInstanceWithNopCheck()
{
io.netty.util.internal.logging.InternalLoggerFactory v0;
v0 = <io.netty.util.internal.logging.Slf4JLoggerFactory$NopInstanceHolder: io.netty.util.internal.logging.InternalLoggerFactory INSTANCE_WITH_NOP_CHECK>;
return v0;
}
static void <clinit>()
{
io.netty.util.internal.logging.Slf4JLoggerFactory v3;
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/netty/util/internal/logging/Slf4JLoggerFactory;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.netty.util.internal.logging.Slf4JLoggerFactory: boolean $assertionsDisabled> = v2;
v3 = new io.netty.util.internal.logging.Slf4JLoggerFactory;
specialinvoke v3.<io.netty.util.internal.logging.Slf4JLoggerFactory: void <init>()>();
<io.netty.util.internal.logging.Slf4JLoggerFactory: io.netty.util.internal.logging.InternalLoggerFactory INSTANCE> = v3;
return;
}
}