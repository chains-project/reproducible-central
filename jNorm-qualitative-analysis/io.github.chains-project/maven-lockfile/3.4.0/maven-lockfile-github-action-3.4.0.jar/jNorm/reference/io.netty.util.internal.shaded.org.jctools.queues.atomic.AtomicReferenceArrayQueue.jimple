abstract class io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue extends java.util.AbstractQueue implements io.netty.util.internal.shaded.org.jctools.queues.IndexedQueueSizeUtil$IndexedQueue, io.netty.util.internal.shaded.org.jctools.queues.QueueProgressIndicators, io.netty.util.internal.shaded.org.jctools.queues.MessagePassingQueue, io.netty.util.internal.shaded.org.jctools.queues.SupportsIterator
{
protected final java.util.concurrent.atomic.AtomicReferenceArray buffer;
protected final int mask;
public void <init>(int)
{
io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue v0;
int v1, v2, v3;
java.util.concurrent.atomic.AtomicReferenceArray v4;
v0 := @this: io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue;
v1 := @parameter0: int;
specialinvoke v0.<java.util.AbstractQueue: void <init>()>();
v2 = staticinvoke <io.netty.util.internal.shaded.org.jctools.util.Pow2: int roundToPowerOfTwo(int)>(v1);
v3 = v2 - 1;
v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue: int mask> = v3;
v4 = new java.util.concurrent.atomic.AtomicReferenceArray;
specialinvoke v4.<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>(v2);
v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue: java.util.concurrent.atomic.AtomicReferenceArray buffer> = v4;
return;
}
public java.lang.String toString()
{
io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue v0;
java.lang.Class v1;
java.lang.String v2;
v0 := @this: io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue;
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v2 = virtualinvoke v1.<java.lang.Class: java.lang.String getName()>();
return v2;
}
public void clear()
{
io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue v0;
java.lang.Object v1;
v0 := @this: io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue;
label1:
v1 = virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue: java.lang.Object poll()>();
if v1 != null goto label1;
return;
}
public final int capacity()
{
int v1, v2;
io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue v0;
v0 := @this: io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue;
v1 = v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue: int mask>;
v2 = v1 + 1;
return v2;
}
public final int size()
{
int v1;
io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue v0;
v0 := @this: io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue;
v1 = staticinvoke <io.netty.util.internal.shaded.org.jctools.queues.IndexedQueueSizeUtil: int size(io.netty.util.internal.shaded.org.jctools.queues.IndexedQueueSizeUtil$IndexedQueue)>(v0);
return v1;
}
public final boolean isEmpty()
{
io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue v0;
boolean v1;
v0 := @this: io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue;
v1 = staticinvoke <io.netty.util.internal.shaded.org.jctools.queues.IndexedQueueSizeUtil: boolean isEmpty(io.netty.util.internal.shaded.org.jctools.queues.IndexedQueueSizeUtil$IndexedQueue)>(v0);
return v1;
}
public final long currentProducerIndex()
{
io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue v0;
long v1;
v0 := @this: io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue;
v1 = virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue: long lvProducerIndex()>();
return v1;
}
public final long currentConsumerIndex()
{
io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue v0;
long v1;
v0 := @this: io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue;
v1 = virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue: long lvConsumerIndex()>();
return v1;
}
public final java.util.Iterator iterator()
{
io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue v0;
io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue$WeakIterator v3;
int v4;
long v1, v2;
java.util.concurrent.atomic.AtomicReferenceArray v5;
v0 := @this: io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue;
v1 = virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue: long lvConsumerIndex()>();
v2 = virtualinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue: long lvProducerIndex()>();
v3 = new io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue$WeakIterator;
v4 = v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue: int mask>;
v5 = v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue: java.util.concurrent.atomic.AtomicReferenceArray buffer>;
specialinvoke v3.<io.netty.util.internal.shaded.org.jctools.queues.atomic.AtomicReferenceArrayQueue$WeakIterator: void <init>(long,long,int,java.util.concurrent.atomic.AtomicReferenceArray)>(v1, v2, v4, v5);
return v3;
}
}