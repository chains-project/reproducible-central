abstract class io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueProducerLimitField extends io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueMidPad
{
private static final java.util.concurrent.atomic.AtomicLongFieldUpdater P_LIMIT_UPDATER;
private volatile long producerLimit;
void <init>(int)
{
int v1;
io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueProducerLimitField v0;
v0 := @this: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueProducerLimitField;
v1 := @parameter0: int;
specialinvoke v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueMidPad: void <init>(int)>(v1);
v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueProducerLimitField: long producerLimit> = v1;
return;
}
final long lvProducerLimit()
{
long v1;
io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueProducerLimitField v0;
v0 := @this: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueProducerLimitField;
v1 = v0.<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueProducerLimitField: long producerLimit>;
return v1;
}
final void soProducerLimit(long)
{
java.util.concurrent.atomic.AtomicLongFieldUpdater v2;
long v1;
io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueProducerLimitField v0;
v0 := @this: io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueProducerLimitField;
v1 := @parameter0: long;
v2 = <io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueProducerLimitField: java.util.concurrent.atomic.AtomicLongFieldUpdater P_LIMIT_UPDATER>;
virtualinvoke v2.<java.util.concurrent.atomic.AtomicLongFieldUpdater: void lazySet(java.lang.Object,long)>(v0, v1);
return;
}
static void <clinit>()
{
java.util.concurrent.atomic.AtomicLongFieldUpdater v0;
v0 = staticinvoke <java.util.concurrent.atomic.AtomicLongFieldUpdater: java.util.concurrent.atomic.AtomicLongFieldUpdater newUpdater(java.lang.Class,java.lang.String)>(class "Lio/netty/util/internal/shaded/org/jctools/queues/atomic/MpscAtomicArrayQueueProducerLimitField;", "producerLimit");
<io.netty.util.internal.shaded.org.jctools.queues.atomic.MpscAtomicArrayQueueProducerLimitField: java.util.concurrent.atomic.AtomicLongFieldUpdater P_LIMIT_UPDATER> = v0;
return;
}
}