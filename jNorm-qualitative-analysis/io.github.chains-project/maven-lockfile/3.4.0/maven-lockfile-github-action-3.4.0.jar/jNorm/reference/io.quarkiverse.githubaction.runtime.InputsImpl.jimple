class io.quarkiverse.githubaction.runtime.InputsImpl extends java.lang.Object implements io.quarkiverse.githubaction.Inputs
{
private static final java.lang.String INPUT_PREFIX;
private static final java.lang.String JSON_INPUTS;
private final java.util.Map inputs;
void <init>(com.fasterxml.jackson.databind.ObjectMapper)
{
java.lang.IllegalStateException v7;
java.util.HashMap v8;
java.util.Locale v20;
java.util.Map v23, v9;
int v18;
java.lang.String v17, v19, v2, v21;
boolean v12, v15, v3;
java.util.Iterator v11;
com.fasterxml.jackson.databind.ObjectMapper v1;
java.util.Set v10;
com.fasterxml.jackson.core.JsonProcessingException v6;
io.quarkiverse.githubaction.runtime.InputsImpl$1 v4;
io.quarkiverse.githubaction.runtime.InputsImpl v0;
java.lang.Object v13, v14, v16, v22, v5;
v0 := @this: io.quarkiverse.githubaction.runtime.InputsImpl;
v1 := @parameter0: com.fasterxml.jackson.databind.ObjectMapper;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("JSON_INPUTS");
if v2 == null goto label4;
v3 = virtualinvoke v2.<java.lang.String: boolean isBlank()>();
if v3 != 0 goto label4;
label1:
v4 = new io.quarkiverse.githubaction.runtime.InputsImpl$1;
specialinvoke v4.<io.quarkiverse.githubaction.runtime.InputsImpl$1: void <init>(io.quarkiverse.githubaction.runtime.InputsImpl)>(v0);
v5 = virtualinvoke v1.<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(java.lang.String,com.fasterxml.jackson.core.type.TypeReference)>(v2, v4);
label2:
goto label6;
label3:
v6 := @caughtexception;
v7 = new java.lang.IllegalStateException;
specialinvoke v7.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to parse JSON inputs to a map", v6);
throw v7;
label4:
v8 = new java.util.HashMap;
specialinvoke v8.<java.util.HashMap: void <init>()>();
v5 = v8;
v9 = staticinvoke <java.lang.System: java.util.Map getenv()>();
v10 = interfaceinvoke v9.<java.util.Map: java.util.Set entrySet()>();
v11 = interfaceinvoke v10.<java.util.Set: java.util.Iterator iterator()>();
label5:
v12 = interfaceinvoke v11.<java.util.Iterator: boolean hasNext()>();
if v12 == 0 goto label6;
v13 = interfaceinvoke v11.<java.util.Iterator: java.lang.Object next()>();
v14 = interfaceinvoke v13.<java.util.Map$Entry: java.lang.Object getKey()>();
v15 = virtualinvoke v14.<java.lang.String: boolean startsWith(java.lang.String)>("INPUT_");
if v15 == 0 goto label5;
v16 = interfaceinvoke v13.<java.util.Map$Entry: java.lang.Object getKey()>();
v17 = "INPUT_";
v18 = virtualinvoke v17.<java.lang.String: int length()>();
v19 = virtualinvoke v16.<java.lang.String: java.lang.String substring(int)>(v18);
v20 = <java.util.Locale: java.util.Locale ROOT>;
v21 = virtualinvoke v19.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>(v20);
v22 = interfaceinvoke v13.<java.util.Map$Entry: java.lang.Object getValue()>();
interfaceinvoke v8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v21, v22);
goto label5;
label6:
v23 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(v5);
v0.<io.quarkiverse.githubaction.runtime.InputsImpl: java.util.Map inputs> = v23;
return;
catch com.fasterxml.jackson.core.JsonProcessingException from label1 to label2 with label3;
}
public java.util.Map all()
{
io.quarkiverse.githubaction.runtime.InputsImpl v0;
java.util.Map v1;
v0 := @this: io.quarkiverse.githubaction.runtime.InputsImpl;
v1 = v0.<io.quarkiverse.githubaction.runtime.InputsImpl: java.util.Map inputs>;
return v1;
}
}