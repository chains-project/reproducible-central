public class io.quarkus.arc.impl.ArcCDIProvider extends java.lang.Object implements jakarta.enterprise.inject.spi.CDIProvider
{
private final io.quarkus.arc.impl.ArcCDIProvider$ArcCDI arcCDI;
public void <init>()
{
io.quarkus.arc.impl.ArcCDIProvider$ArcCDI v1;
io.quarkus.arc.impl.ArcCDIProvider v0;
v0 := @this: io.quarkus.arc.impl.ArcCDIProvider;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new io.quarkus.arc.impl.ArcCDIProvider$ArcCDI;
specialinvoke v1.<io.quarkus.arc.impl.ArcCDIProvider$ArcCDI: void <init>()>();
v0.<io.quarkus.arc.impl.ArcCDIProvider: io.quarkus.arc.impl.ArcCDIProvider$ArcCDI arcCDI> = v1;
return;
}
public jakarta.enterprise.inject.spi.CDI getCDI()
{
java.lang.IllegalStateException v2;
io.quarkus.arc.impl.ArcCDIProvider$ArcCDI v3;
io.quarkus.arc.ArcContainer v1;
io.quarkus.arc.impl.ArcCDIProvider v0;
v0 := @this: io.quarkus.arc.impl.ArcCDIProvider;
v1 = staticinvoke <io.quarkus.arc.Arc: io.quarkus.arc.ArcContainer container()>();
if v1 != null goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No CDI container is available");
throw v2;
label1:
v3 = v0.<io.quarkus.arc.impl.ArcCDIProvider: io.quarkus.arc.impl.ArcCDIProvider$ArcCDI arcCDI>;
return v3;
}
}