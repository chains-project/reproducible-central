public class io.quarkus.arc.impl.ComputingCache extends java.lang.Object
{
private final java.util.concurrent.ConcurrentMap map;
private final java.util.function.Function computingFunction;
public void <init>()
{
io.quarkus.arc.impl.ComputingCache v0;
v0 := @this: io.quarkus.arc.impl.ComputingCache;
specialinvoke v0.<io.quarkus.arc.impl.ComputingCache: void <init>(java.util.function.Function)>(null);
return;
}
public void <init>(java.util.function.Function)
{
java.util.concurrent.ConcurrentHashMap v2;
io.quarkus.arc.impl.ComputingCache v0;
java.util.function.Function v1;
v0 := @this: io.quarkus.arc.impl.ComputingCache;
v1 := @parameter0: java.util.function.Function;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v0.<io.quarkus.arc.impl.ComputingCache: java.util.concurrent.ConcurrentMap map> = v2;
v0.<io.quarkus.arc.impl.ComputingCache: java.util.function.Function computingFunction> = v1;
return;
}
public java.lang.Object getValue(java.lang.Object)
{
io.quarkus.arc.impl.ComputingCache v0;
java.lang.Object v1, v3;
java.util.function.Function v2;
v0 := @this: io.quarkus.arc.impl.ComputingCache;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.quarkus.arc.impl.ComputingCache: java.util.function.Function computingFunction>;
v3 = virtualinvoke v0.<io.quarkus.arc.impl.ComputingCache: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(v1, v2);
return v3;
}
public java.lang.Object getValueIfPresent(java.lang.Object)
{
io.quarkus.arc.impl.ComputingCache v0;
java.lang.Object v1, v3, v4;
java.util.concurrent.ConcurrentMap v2;
v0 := @this: io.quarkus.arc.impl.ComputingCache;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.quarkus.arc.impl.ComputingCache: java.util.concurrent.ConcurrentMap map>;
v3 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v1);
if v3 == null goto label1;
v4 = virtualinvoke v3.<io.quarkus.arc.impl.LazyValue: java.lang.Object getIfPresent()>();
goto label2;
label1:
v4 = null;
label2:
return v4;
}
public java.lang.Object computeIfAbsent(java.lang.Object, java.util.function.Function)
{
io.quarkus.arc.impl.ComputingCache v0;
java.lang.Object v1, v4;
io.quarkus.arc.impl.ComputingCache$1 v3;
java.util.function.Function v2;
v0 := @this: io.quarkus.arc.impl.ComputingCache;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.util.function.Function;
v3 = new io.quarkus.arc.impl.ComputingCache$1;
specialinvoke v3.<io.quarkus.arc.impl.ComputingCache$1: void <init>(io.quarkus.arc.impl.ComputingCache,java.util.function.Function,java.lang.Object)>(v0, v2, v1);
v4 = virtualinvoke v0.<io.quarkus.arc.impl.ComputingCache: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Supplier)>(v1, v3);
return v4;
}
public java.lang.Object computeIfAbsent(java.lang.Object, java.util.function.Supplier)
{
io.quarkus.arc.impl.LazyValue v6;
java.lang.IllegalStateException v3;
io.quarkus.arc.impl.ComputingCache v0;
java.util.function.Supplier v2;
java.util.concurrent.ConcurrentMap v4, v7;
java.lang.Object v1, v5, v8, v9;
v0 := @this: io.quarkus.arc.impl.ComputingCache;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.util.function.Supplier;
if v2 != null goto label1;
v3 = new java.lang.IllegalStateException;
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Computing function not defined");
throw v3;
label1:
v4 = v0.<io.quarkus.arc.impl.ComputingCache: java.util.concurrent.ConcurrentMap map>;
v5 = interfaceinvoke v4.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v1);
if v5 != null goto label2;
v6 = new io.quarkus.arc.impl.LazyValue;
specialinvoke v6.<io.quarkus.arc.impl.LazyValue: void <init>(java.util.function.Supplier)>(v2);
v5 = v6;
v7 = v0.<io.quarkus.arc.impl.ComputingCache: java.util.concurrent.ConcurrentMap map>;
v8 = interfaceinvoke v7.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(v1, v6);
if v8 == null goto label2;
v5 = v8;
label2:
v9 = virtualinvoke v5.<io.quarkus.arc.impl.LazyValue: java.lang.Object get()>();
return v9;
}
public java.lang.Object remove(java.lang.Object)
{
io.quarkus.arc.impl.ComputingCache v0;
java.lang.Object v1, v3, v4;
java.util.concurrent.ConcurrentMap v2;
v0 := @this: io.quarkus.arc.impl.ComputingCache;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.quarkus.arc.impl.ComputingCache: java.util.concurrent.ConcurrentMap map>;
v3 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(v1);
if v3 == null goto label1;
v4 = virtualinvoke v3.<io.quarkus.arc.impl.LazyValue: java.lang.Object get()>();
goto label2;
label1:
v4 = null;
label2:
return v4;
}
public void clear()
{
io.quarkus.arc.impl.ComputingCache v0;
java.util.concurrent.ConcurrentMap v1;
v0 := @this: io.quarkus.arc.impl.ComputingCache;
v1 = v0.<io.quarkus.arc.impl.ComputingCache: java.util.concurrent.ConcurrentMap map>;
interfaceinvoke v1.<java.util.concurrent.ConcurrentMap: void clear()>();
return;
}
public void forEachValue(java.util.function.Consumer)
{
java.util.Iterator v4;
java.util.Collection v3;
io.quarkus.arc.impl.ComputingCache v0;
java.util.concurrent.ConcurrentMap v2;
java.util.function.Consumer v1;
java.lang.Object v6, v7;
boolean v5;
v0 := @this: io.quarkus.arc.impl.ComputingCache;
v1 := @parameter0: java.util.function.Consumer;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = v0.<io.quarkus.arc.impl.ComputingCache: java.util.concurrent.ConcurrentMap map>;
v3 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();
v4 = interfaceinvoke v3.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = virtualinvoke v6.<io.quarkus.arc.impl.LazyValue: java.lang.Object get()>();
interfaceinvoke v1.<java.util.function.Consumer: void accept(java.lang.Object)>(v7);
goto label1;
label2:
return;
}
public void forEachExistingValue(java.util.function.Consumer)
{
java.util.Iterator v4;
java.util.Collection v3;
io.quarkus.arc.impl.ComputingCache v0;
java.util.concurrent.ConcurrentMap v2;
java.util.function.Consumer v1;
java.lang.Object v6, v8;
boolean v5, v7;
v0 := @this: io.quarkus.arc.impl.ComputingCache;
v1 := @parameter0: java.util.function.Consumer;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = v0.<io.quarkus.arc.impl.ComputingCache: java.util.concurrent.ConcurrentMap map>;
v3 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();
v4 = interfaceinvoke v3.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = virtualinvoke v6.<io.quarkus.arc.impl.LazyValue: boolean isSet()>();
if v7 == 0 goto label1;
v8 = virtualinvoke v6.<io.quarkus.arc.impl.LazyValue: java.lang.Object get()>();
interfaceinvoke v1.<java.util.function.Consumer: void accept(java.lang.Object)>(v8);
goto label1;
label2:
return;
}
public java.util.Set getPresentValues()
{
java.util.function.Predicate v6;
java.util.Collection v2;
io.quarkus.arc.impl.ComputingCache v0;
java.util.function.Function v4;
java.util.concurrent.ConcurrentMap v1;
java.util.stream.Stream v3, v5, v7;
java.lang.Object v9;
java.util.stream.Collector v8;
v0 := @this: io.quarkus.arc.impl.ComputingCache;
v1 = v0.<io.quarkus.arc.impl.ComputingCache: java.util.concurrent.ConcurrentMap map>;
v2 = interfaceinvoke v1.<java.util.concurrent.ConcurrentMap: java.util.Collection values()>();
v3 = interfaceinvoke v2.<java.util.Collection: java.util.stream.Stream stream()>();
v4 = staticinvoke <io.quarkus.arc.impl.ComputingCache$getIfPresent__2573: java.util.function.Function bootstrap$()>();
v5 = interfaceinvoke v3.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v4);
v6 = staticinvoke <io.quarkus.arc.impl.ComputingCache$nonNull__2574: java.util.function.Predicate bootstrap$()>();
v7 = interfaceinvoke v5.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(v6);
v8 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toSet()>();
v9 = interfaceinvoke v7.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v8);
return v9;
}
public void forEachEntry(java.util.function.BiConsumer)
{
java.util.Iterator v4;
io.quarkus.arc.impl.ComputingCache v0;
java.util.Set v3;
java.util.concurrent.ConcurrentMap v2;
java.util.function.BiConsumer v1;
java.lang.Object v6, v7, v8, v9;
boolean v5;
v0 := @this: io.quarkus.arc.impl.ComputingCache;
v1 := @parameter0: java.util.function.BiConsumer;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = v0.<io.quarkus.arc.impl.ComputingCache: java.util.concurrent.ConcurrentMap map>;
v3 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.util.Set entrySet()>();
v4 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = interfaceinvoke v6.<java.util.Map$Entry: java.lang.Object getKey()>();
v8 = interfaceinvoke v6.<java.util.Map$Entry: java.lang.Object getValue()>();
v9 = virtualinvoke v8.<io.quarkus.arc.impl.LazyValue: java.lang.Object get()>();
interfaceinvoke v1.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>(v7, v9);
goto label1;
label2:
return;
}
public boolean isEmpty()
{
io.quarkus.arc.impl.ComputingCache v0;
boolean v2;
java.util.concurrent.ConcurrentMap v1;
v0 := @this: io.quarkus.arc.impl.ComputingCache;
v1 = v0.<io.quarkus.arc.impl.ComputingCache: java.util.concurrent.ConcurrentMap map>;
v2 = interfaceinvoke v1.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>();
return v2;
}
}