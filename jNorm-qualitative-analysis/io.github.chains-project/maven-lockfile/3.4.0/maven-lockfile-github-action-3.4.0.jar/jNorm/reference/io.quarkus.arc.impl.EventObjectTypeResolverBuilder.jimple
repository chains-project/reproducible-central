class io.quarkus.arc.impl.EventObjectTypeResolverBuilder extends java.lang.Object
{
private final java.util.Map selectedTypeVariables;
private final java.util.Map eventTypeVariables;
private final java.util.Map resolvedTypes;
public void <init>(java.util.Map, java.util.Map)
{
java.util.Map v1, v2;
io.quarkus.arc.impl.EventObjectTypeResolverBuilder v0;
java.util.HashMap v3;
v0 := @this: io.quarkus.arc.impl.EventObjectTypeResolverBuilder;
v1 := @parameter0: java.util.Map;
v2 := @parameter1: java.util.Map;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.quarkus.arc.impl.EventObjectTypeResolverBuilder: java.util.Map selectedTypeVariables> = v1;
v0.<io.quarkus.arc.impl.EventObjectTypeResolverBuilder: java.util.Map eventTypeVariables> = v2;
v3 = new java.util.HashMap;
specialinvoke v3.<java.util.HashMap: void <init>()>();
v0.<io.quarkus.arc.impl.EventObjectTypeResolverBuilder: java.util.Map resolvedTypes> = v3;
return;
}
public io.quarkus.arc.impl.TypeResolver build()
{
java.util.Map v2, v3, v4;
io.quarkus.arc.impl.TypeResolver v5;
io.quarkus.arc.impl.EventObjectTypeResolverBuilder v0;
java.util.HashMap v1;
v0 := @this: io.quarkus.arc.impl.EventObjectTypeResolverBuilder;
virtualinvoke v0.<io.quarkus.arc.impl.EventObjectTypeResolverBuilder: void resolveTypeVariables()>();
v1 = new java.util.HashMap;
v2 = v0.<io.quarkus.arc.impl.EventObjectTypeResolverBuilder: java.util.Map eventTypeVariables>;
specialinvoke v1.<java.util.HashMap: void <init>(java.util.Map)>(v2);
v3 = v0.<io.quarkus.arc.impl.EventObjectTypeResolverBuilder: java.util.Map selectedTypeVariables>;
interfaceinvoke v1.<java.util.Map: void putAll(java.util.Map)>(v3);
v4 = v0.<io.quarkus.arc.impl.EventObjectTypeResolverBuilder: java.util.Map resolvedTypes>;
interfaceinvoke v1.<java.util.Map: void putAll(java.util.Map)>(v4);
v5 = new io.quarkus.arc.impl.TypeResolver;
specialinvoke v5.<io.quarkus.arc.impl.TypeResolver: void <init>(java.util.Map)>(v1);
return v5;
}
protected void resolveTypeVariables()
{
java.util.Iterator v3;
java.util.Set v2;
java.util.Map v1, v8;
io.quarkus.arc.impl.EventObjectTypeResolverBuilder v0;
java.lang.Object v5, v6, v7, v9;
boolean v4;
v0 := @this: io.quarkus.arc.impl.EventObjectTypeResolverBuilder;
v1 = v0.<io.quarkus.arc.impl.EventObjectTypeResolverBuilder: java.util.Map eventTypeVariables>;
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getKey()>();
v7 = interfaceinvoke v5.<java.util.Map$Entry: java.lang.Object getValue()>();
v8 = v0.<io.quarkus.arc.impl.EventObjectTypeResolverBuilder: java.util.Map selectedTypeVariables>;
v9 = interfaceinvoke v8.<java.util.Map: java.lang.Object get(java.lang.Object)>(v6);
if v9 == null goto label1;
virtualinvoke v0.<io.quarkus.arc.impl.EventObjectTypeResolverBuilder: void resolveTypeVariables(java.lang.reflect.Type,java.lang.reflect.Type)>(v7, v9);
goto label1;
label2:
return;
}
protected void resolveTypeVariables(java.lang.reflect.Type, java.lang.reflect.Type)
{
java.lang.reflect.ParameterizedType v5;
java.lang.reflect.Type v1, v2;
io.quarkus.arc.impl.EventObjectTypeResolverBuilder v0;
boolean v3, v4;
v0 := @this: io.quarkus.arc.impl.EventObjectTypeResolverBuilder;
v1 := @parameter0: java.lang.reflect.Type;
v2 := @parameter1: java.lang.reflect.Type;
v3 = v1 instanceof java.lang.reflect.TypeVariable;
if v3 == 0 goto label1;
virtualinvoke v0.<io.quarkus.arc.impl.EventObjectTypeResolverBuilder: void resolveTypeVariables(java.lang.reflect.TypeVariable,java.lang.reflect.Type)>(v1, v2);
label1:
v4 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: boolean isParameterizedType(java.lang.Object)>(v1);
if v4 == 0 goto label2;
v5 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: java.lang.reflect.ParameterizedType asParameterizedType(java.lang.Object)>(v1);
virtualinvoke v0.<io.quarkus.arc.impl.EventObjectTypeResolverBuilder: void resolveTypeVariables(java.lang.reflect.ParameterizedType,java.lang.reflect.Type)>(v5, v2);
label2:
return;
}
protected void resolveTypeVariables(java.lang.reflect.TypeVariable, java.lang.reflect.Type)
{
java.lang.reflect.Type v2;
java.lang.reflect.TypeVariable v1;
java.util.Map v4;
io.quarkus.arc.impl.EventObjectTypeResolverBuilder v0;
boolean v3;
v0 := @this: io.quarkus.arc.impl.EventObjectTypeResolverBuilder;
v1 := @parameter0: java.lang.reflect.TypeVariable;
v2 := @parameter1: java.lang.reflect.Type;
v3 = v2 instanceof java.lang.reflect.TypeVariable;
if v3 == 0 goto label1;
return;
label1:
v4 = v0.<io.quarkus.arc.impl.EventObjectTypeResolverBuilder: java.util.Map resolvedTypes>;
interfaceinvoke v4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v2);
return;
}
protected void resolveTypeVariables(java.lang.reflect.ParameterizedType, java.lang.reflect.Type)
{
java.lang.reflect.ParameterizedType v1, v5;
java.lang.reflect.Type v11, v12, v2;
int v10, v7, v8, v9;
java.lang.reflect.Type[] v4, v6;
io.quarkus.arc.impl.EventObjectTypeResolverBuilder v0;
boolean v3;
v0 := @this: io.quarkus.arc.impl.EventObjectTypeResolverBuilder;
v1 := @parameter0: java.lang.reflect.ParameterizedType;
v2 := @parameter1: java.lang.reflect.Type;
v3 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: boolean isParameterizedType(java.lang.Object)>(v2);
if v3 == 0 goto label2;
v4 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v5 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: java.lang.reflect.ParameterizedType asParameterizedType(java.lang.Object)>(v2);
v6 = interfaceinvoke v5.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v7 = lengthof v4;
v8 = lengthof v6;
if v7 != v8 goto label2;
v9 = 0;
label1:
v10 = lengthof v4;
if v9 >= v10 goto label2;
v11 = v4[v9];
v12 = v6[v9];
virtualinvoke v0.<io.quarkus.arc.impl.EventObjectTypeResolverBuilder: void resolveTypeVariables(java.lang.reflect.Type,java.lang.reflect.Type)>(v11, v12);
v9 = v9 + 1;
goto label1;
label2:
return;
}
public java.util.Map getResolvedTypes()
{
io.quarkus.arc.impl.EventObjectTypeResolverBuilder v0;
java.util.Map v1;
v0 := @this: io.quarkus.arc.impl.EventObjectTypeResolverBuilder;
v1 = v0.<io.quarkus.arc.impl.EventObjectTypeResolverBuilder: java.util.Map resolvedTypes>;
return v1;
}
}