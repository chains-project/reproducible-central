final class io.quarkus.arc.impl.EventTypeAssignabilityRules extends java.lang.Object
{
private static final io.quarkus.arc.impl.EventTypeAssignabilityRules INSTANCE;
public static io.quarkus.arc.impl.EventTypeAssignabilityRules instance()
{
io.quarkus.arc.impl.EventTypeAssignabilityRules v0;
v0 = <io.quarkus.arc.impl.EventTypeAssignabilityRules: io.quarkus.arc.impl.EventTypeAssignabilityRules INSTANCE>;
return v0;
}
private void <init>()
{
io.quarkus.arc.impl.EventTypeAssignabilityRules v0;
v0 := @this: io.quarkus.arc.impl.EventTypeAssignabilityRules;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public boolean matches(java.lang.reflect.Type, java.util.Set)
{
java.util.Iterator v3;
java.lang.reflect.Type v1;
io.quarkus.arc.impl.EventTypeAssignabilityRules v0;
java.util.Set v2;
java.lang.Object v5;
boolean v4, v6;
v0 := @this: io.quarkus.arc.impl.EventTypeAssignabilityRules;
v1 := @parameter0: java.lang.reflect.Type;
v2 := @parameter1: java.util.Set;
v3 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = virtualinvoke v0.<io.quarkus.arc.impl.EventTypeAssignabilityRules: boolean matches(java.lang.reflect.Type,java.lang.reflect.Type)>(v1, v5);
if v6 == 0 goto label1;
return 1;
label2:
return 0;
}
public boolean matches(java.lang.reflect.Type, java.lang.reflect.Type)
{
java.lang.reflect.Type v1, v2, v3, v4;
io.quarkus.arc.impl.EventTypeAssignabilityRules v0;
boolean v5;
v0 := @this: io.quarkus.arc.impl.EventTypeAssignabilityRules;
v1 := @parameter0: java.lang.reflect.Type;
v2 := @parameter1: java.lang.reflect.Type;
v3 = staticinvoke <io.quarkus.arc.impl.Types: java.lang.reflect.Type boxedType(java.lang.reflect.Type)>(v1);
v4 = staticinvoke <io.quarkus.arc.impl.Types: java.lang.reflect.Type boxedType(java.lang.reflect.Type)>(v2);
v5 = virtualinvoke v0.<io.quarkus.arc.impl.EventTypeAssignabilityRules: boolean matchesNoBoxing(java.lang.reflect.Type,java.lang.reflect.Type)>(v3, v4);
return v5;
}
boolean matchesNoBoxing(java.lang.reflect.Type, java.lang.reflect.Type)
{
io.quarkus.arc.impl.EventTypeAssignabilityRules v0;
boolean v10, v12, v13, v14, v15, v16, v18, v19, v20, v23, v24, v25, v26, v3, v4;
java.util.Iterator v9;
java.util.Set v8;
io.quarkus.arc.impl.HierarchyDiscovery v6;
java.lang.reflect.ParameterizedType v21, v22;
java.lang.reflect.Type v1, v2, v5, v7;
java.lang.Class v17;
java.lang.Object v11;
v0 := @this: io.quarkus.arc.impl.EventTypeAssignabilityRules;
v1 := @parameter0: java.lang.reflect.Type;
v2 := @parameter1: java.lang.reflect.Type;
v3 = staticinvoke <io.quarkus.arc.impl.Types: boolean isArray(java.lang.reflect.Type)>(v1);
if v3 == 0 goto label3;
v4 = staticinvoke <io.quarkus.arc.impl.Types: boolean isArray(java.lang.reflect.Type)>(v2);
if v4 == 0 goto label3;
v5 = staticinvoke <io.quarkus.arc.impl.Types: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)>(v1);
v6 = new io.quarkus.arc.impl.HierarchyDiscovery;
v7 = staticinvoke <io.quarkus.arc.impl.Types: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)>(v2);
specialinvoke v6.<io.quarkus.arc.impl.HierarchyDiscovery: void <init>(java.lang.reflect.Type)>(v7);
v8 = virtualinvoke v6.<io.quarkus.arc.impl.HierarchyDiscovery: java.util.Set getTypeClosure()>();
v9 = interfaceinvoke v8.<java.util.Set: java.util.Iterator iterator()>();
label1:
v10 = interfaceinvoke v9.<java.util.Iterator: boolean hasNext()>();
if v10 == 0 goto label2;
v11 = interfaceinvoke v9.<java.util.Iterator: java.lang.Object next()>();
v12 = virtualinvoke v0.<io.quarkus.arc.impl.EventTypeAssignabilityRules: boolean matchesNoBoxing(java.lang.reflect.Type,java.lang.reflect.Type)>(v5, v11);
if v12 == 0 goto label1;
return 1;
label2:
return 0;
label3:
v13 = v1 instanceof java.lang.reflect.TypeVariable;
if v13 == 0 goto label4;
v14 = specialinvoke v0.<io.quarkus.arc.impl.EventTypeAssignabilityRules: boolean matches(java.lang.reflect.TypeVariable,java.lang.reflect.Type)>(v1, v2);
return v14;
label4:
v15 = v1 instanceof java.lang.Class;
if v15 == 0 goto label5;
v16 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: boolean isParameterizedType(java.lang.Object)>(v2);
if v16 == 0 goto label5;
v17 = staticinvoke <io.quarkus.arc.impl.Types: java.lang.Class getRawType(java.lang.reflect.Type)>(v2);
v18 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(v17);
return v18;
label5:
v19 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: boolean isParameterizedType(java.lang.Object)>(v1);
if v19 == 0 goto label6;
v20 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: boolean isParameterizedType(java.lang.Object)>(v2);
if v20 == 0 goto label6;
v21 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: java.lang.reflect.ParameterizedType asParameterizedType(java.lang.Object)>(v1);
v22 = staticinvoke <io.quarkus.arc.impl.TypeCachePollutionUtils: java.lang.reflect.ParameterizedType asParameterizedType(java.lang.Object)>(v2);
v23 = specialinvoke v0.<io.quarkus.arc.impl.EventTypeAssignabilityRules: boolean matches(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>(v21, v22);
return v23;
label6:
v24 = v1 instanceof java.lang.Class;
if v24 == 0 goto label7;
v25 = v2 instanceof java.lang.Class;
if v25 == 0 goto label7;
v26 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(v2);
return v26;
label7:
return 0;
}
private boolean matches(java.lang.reflect.TypeVariable, java.lang.reflect.Type)
{
java.lang.reflect.TypeVariable v1;
io.quarkus.arc.impl.EventTypeAssignabilityRules v0;
java.lang.reflect.Type v2, v6;
int v4, v5;
java.lang.reflect.Type[] v3;
boolean v7;
v0 := @this: io.quarkus.arc.impl.EventTypeAssignabilityRules;
v1 := @parameter0: java.lang.reflect.TypeVariable;
v2 := @parameter1: java.lang.reflect.Type;
staticinvoke <io.quarkus.arc.impl.BeanTypeAssignabilityRules: io.quarkus.arc.impl.BeanTypeAssignabilityRules instance()>();
v3 = staticinvoke <io.quarkus.arc.impl.BeanTypeAssignabilityRules: java.lang.reflect.Type[] getUppermostTypeVariableBounds(java.lang.reflect.TypeVariable)>(v1);
v4 = lengthof v3;
v5 = 0;
label1:
if v5 >= v4 goto label3;
v6 = v3[v5];
v7 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.Type,java.lang.reflect.Type)>(v6, v2);
if v7 != 0 goto label2;
return 0;
label2:
v5 = v5 + 1;
goto label1;
label3:
return 1;
}
private boolean matches(java.lang.reflect.ParameterizedType, java.lang.reflect.ParameterizedType)
{
io.quarkus.arc.impl.EventTypeAssignabilityRules v0;
int v12, v14, v7, v9;
java.lang.String v11;
boolean v19, v5;
java.lang.IllegalArgumentException v10;
java.lang.reflect.ParameterizedType v1, v2;
java.lang.reflect.Type v16, v18, v3, v4;
java.lang.reflect.Type[] v13, v15, v17, v6, v8;
v0 := @this: io.quarkus.arc.impl.EventTypeAssignabilityRules;
v1 := @parameter0: java.lang.reflect.ParameterizedType;
v2 := @parameter1: java.lang.reflect.ParameterizedType;
v3 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
v4 = interfaceinvoke v2.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
v5 = virtualinvoke v3.<java.lang.Object: boolean equals(java.lang.Object)>(v4);
if v5 != 0 goto label1;
return 0;
label1:
v6 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v7 = lengthof v6;
v8 = interfaceinvoke v2.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v9 = lengthof v8;
if v7 == v9 goto label2;
v10 = new java.lang.IllegalArgumentException;
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType)>(v1, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid argument combination \u0001; \u0001");
specialinvoke v10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v11);
throw v10;
label2:
v12 = 0;
label3:
v13 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v14 = lengthof v13;
if v12 >= v14 goto label5;
v15 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v16 = v15[v12];
v17 = interfaceinvoke v2.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v18 = v17[v12];
v19 = specialinvoke v0.<io.quarkus.arc.impl.EventTypeAssignabilityRules: boolean parametersMatch(java.lang.reflect.Type,java.lang.reflect.Type)>(v16, v18);
if v19 != 0 goto label4;
return 0;
label4:
v12 = v12 + 1;
goto label3;
label5:
return 1;
}
private boolean parametersMatch(java.lang.reflect.Type, java.lang.reflect.Type)
{
io.quarkus.arc.impl.EventTypeAssignabilityRules v0;
java.lang.reflect.Type v1, v2;
boolean v10, v11, v12, v3, v4, v5, v6, v7, v8, v9;
v0 := @this: io.quarkus.arc.impl.EventTypeAssignabilityRules;
v1 := @parameter0: java.lang.reflect.Type;
v2 := @parameter1: java.lang.reflect.Type;
v3 = staticinvoke <io.quarkus.arc.impl.Types: boolean isActualType(java.lang.reflect.Type)>(v1);
if v3 == 0 goto label1;
v4 = staticinvoke <io.quarkus.arc.impl.Types: boolean isActualType(java.lang.reflect.Type)>(v2);
if v4 == 0 goto label1;
v5 = virtualinvoke v0.<io.quarkus.arc.impl.EventTypeAssignabilityRules: boolean matches(java.lang.reflect.Type,java.lang.reflect.Type)>(v1, v2);
return v5;
label1:
v6 = v1 instanceof java.lang.reflect.WildcardType;
if v6 == 0 goto label2;
v7 = v2 instanceof java.lang.reflect.WildcardType;
if v7 == 0 goto label2;
v8 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.Type,java.lang.reflect.Type)>(v1, v2);
return v8;
label2:
v9 = v1 instanceof java.lang.reflect.WildcardType;
if v9 == 0 goto label3;
v10 = specialinvoke v0.<io.quarkus.arc.impl.EventTypeAssignabilityRules: boolean parametersMatch(java.lang.reflect.WildcardType,java.lang.reflect.Type)>(v1, v2);
return v10;
label3:
v11 = v1 instanceof java.lang.reflect.TypeVariable;
if v11 == 0 goto label4;
v12 = specialinvoke v0.<io.quarkus.arc.impl.EventTypeAssignabilityRules: boolean parametersMatch(java.lang.reflect.TypeVariable,java.lang.reflect.Type)>(v1, v2);
return v12;
label4:
return 0;
}
private boolean parametersMatch(java.lang.reflect.TypeVariable, java.lang.reflect.Type)
{
java.lang.reflect.TypeVariable v1;
io.quarkus.arc.impl.EventTypeAssignabilityRules v0;
java.lang.reflect.Type v2, v6;
int v4, v5;
java.lang.reflect.Type[] v3;
boolean v7;
v0 := @this: io.quarkus.arc.impl.EventTypeAssignabilityRules;
v1 := @parameter0: java.lang.reflect.TypeVariable;
v2 := @parameter1: java.lang.reflect.Type;
staticinvoke <io.quarkus.arc.impl.BeanTypeAssignabilityRules: io.quarkus.arc.impl.BeanTypeAssignabilityRules instance()>();
v3 = staticinvoke <io.quarkus.arc.impl.BeanTypeAssignabilityRules: java.lang.reflect.Type[] getUppermostTypeVariableBounds(java.lang.reflect.TypeVariable)>(v1);
v4 = lengthof v3;
v5 = 0;
label1:
if v5 >= v4 goto label3;
v6 = v3[v5];
v7 = staticinvoke <io.quarkus.arc.impl.CovariantTypes: boolean isAssignableFrom(java.lang.reflect.Type,java.lang.reflect.Type)>(v6, v2);
if v7 != 0 goto label2;
return 0;
label2:
v5 = v5 + 1;
goto label1;
label3:
return 1;
}
private boolean parametersMatch(java.lang.reflect.WildcardType, java.lang.reflect.Type)
{
io.quarkus.arc.impl.BeanTypeAssignabilityRules v3, v5;
java.lang.reflect.WildcardType v1;
io.quarkus.arc.impl.EventTypeAssignabilityRules v0;
java.lang.reflect.Type v2;
boolean v4, v6, v7;
v0 := @this: io.quarkus.arc.impl.EventTypeAssignabilityRules;
v1 := @parameter0: java.lang.reflect.WildcardType;
v2 := @parameter1: java.lang.reflect.Type;
v3 = staticinvoke <io.quarkus.arc.impl.BeanTypeAssignabilityRules: io.quarkus.arc.impl.BeanTypeAssignabilityRules instance()>();
v4 = virtualinvoke v3.<io.quarkus.arc.impl.BeanTypeAssignabilityRules: boolean lowerBoundsOfWildcardMatch(java.lang.reflect.Type,java.lang.reflect.WildcardType)>(v2, v1);
if v4 == 0 goto label1;
v5 = staticinvoke <io.quarkus.arc.impl.BeanTypeAssignabilityRules: io.quarkus.arc.impl.BeanTypeAssignabilityRules instance()>();
v6 = virtualinvoke v5.<io.quarkus.arc.impl.BeanTypeAssignabilityRules: boolean upperBoundsOfWildcardMatch(java.lang.reflect.WildcardType,java.lang.reflect.Type)>(v1, v2);
if v6 == 0 goto label1;
v7 = 1;
goto label2;
label1:
v7 = 0;
label2:
return v7;
}
static void <clinit>()
{
io.quarkus.arc.impl.EventTypeAssignabilityRules v0;
v0 = new io.quarkus.arc.impl.EventTypeAssignabilityRules;
specialinvoke v0.<io.quarkus.arc.impl.EventTypeAssignabilityRules: void <init>()>();
<io.quarkus.arc.impl.EventTypeAssignabilityRules: io.quarkus.arc.impl.EventTypeAssignabilityRules INSTANCE> = v0;
return;
}
}