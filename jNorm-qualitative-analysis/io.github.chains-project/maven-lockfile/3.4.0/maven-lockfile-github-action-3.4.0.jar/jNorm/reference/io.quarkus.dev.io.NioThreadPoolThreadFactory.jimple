public class io.quarkus.dev.io.NioThreadPoolThreadFactory extends java.lang.Object implements java.util.concurrent.ThreadFactory
{
private static final java.util.concurrent.CopyOnWriteArrayList allThreads;
private static volatile java.lang.ClassLoader currentCl;
public void <init>()
{
io.quarkus.dev.io.NioThreadPoolThreadFactory v0;
v0 := @this: io.quarkus.dev.io.NioThreadPoolThreadFactory;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public java.lang.Thread newThread(java.lang.Runnable)
{
io.quarkus.dev.io.NioThreadPoolThreadFactory v0;
java.lang.Thread v3;
java.lang.ClassLoader v6;
java.lang.Runnable v1;
java.util.concurrent.atomic.AtomicReference v2;
io.quarkus.dev.io.NioThreadPoolThreadFactory$1 v4;
java.util.concurrent.CopyOnWriteArrayList v5;
v0 := @this: io.quarkus.dev.io.NioThreadPoolThreadFactory;
v1 := @parameter0: java.lang.Runnable;
v2 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v2.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v3 = new java.lang.Thread;
v4 = new io.quarkus.dev.io.NioThreadPoolThreadFactory$1;
specialinvoke v4.<io.quarkus.dev.io.NioThreadPoolThreadFactory$1: void <init>(io.quarkus.dev.io.NioThreadPoolThreadFactory,java.lang.Runnable,java.util.concurrent.atomic.AtomicReference)>(v0, v1, v2);
specialinvoke v3.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>(v4, "NIO IO Thread (created by Quarkus)");
virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(v3);
virtualinvoke v3.<java.lang.Thread: void setDaemon(boolean)>(1);
v5 = <io.quarkus.dev.io.NioThreadPoolThreadFactory: java.util.concurrent.CopyOnWriteArrayList allThreads>;
virtualinvoke v5.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>(v3);
v6 = <io.quarkus.dev.io.NioThreadPoolThreadFactory: java.lang.ClassLoader currentCl>;
virtualinvoke v3.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(v6);
return v3;
}
public static java.lang.ClassLoader updateTccl(java.lang.ClassLoader)
{
java.util.Iterator v3;
java.lang.Object v5;
java.lang.ClassLoader v0, v1;
boolean v4;
java.util.concurrent.CopyOnWriteArrayList v2;
v0 := @parameter0: java.lang.ClassLoader;
v1 = <io.quarkus.dev.io.NioThreadPoolThreadFactory: java.lang.ClassLoader currentCl>;
<io.quarkus.dev.io.NioThreadPoolThreadFactory: java.lang.ClassLoader currentCl> = v0;
v2 = <io.quarkus.dev.io.NioThreadPoolThreadFactory: java.util.concurrent.CopyOnWriteArrayList allThreads>;
v3 = virtualinvoke v2.<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v5.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(v0);
goto label1;
label2:
return v1;
}
static void <clinit>()
{
java.lang.ClassLoader v2;
java.lang.Thread v1;
java.util.concurrent.CopyOnWriteArrayList v0;
v0 = new java.util.concurrent.CopyOnWriteArrayList;
specialinvoke v0.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();
<io.quarkus.dev.io.NioThreadPoolThreadFactory: java.util.concurrent.CopyOnWriteArrayList allThreads> = v0;
v1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v2 = virtualinvoke v1.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
<io.quarkus.dev.io.NioThreadPoolThreadFactory: java.lang.ClassLoader currentCl> = v2;
return;
}
}