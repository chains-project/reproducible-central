public class io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State extends java.lang.Object
{
public final long lastRun;
public final boolean running;
public final boolean inProgress;
public final long run;
public final long passed;
public final long failed;
public final long skipped;
public final long currentPassed;
public final long currentFailed;
public final long currentSkipped;
public final boolean isBrokenOnly;
public final boolean isTestOutput;
public final boolean isInstrumentationBasedReload;
public final boolean isLiveReload;
public void <init>(io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder)
{
long v10, v11, v2, v5, v6, v7, v8, v9;
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State v0;
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v1;
boolean v12, v13, v14, v15, v3, v4;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State;
v1 := @parameter0: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = v1.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: long lastRun>;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: long lastRun> = v2;
v3 = v1.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: boolean running>;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: boolean running> = v3;
v4 = v1.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: boolean inProgress>;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: boolean inProgress> = v4;
v5 = v1.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: long run>;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: long run> = v5;
v6 = v1.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: long passed>;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: long passed> = v6;
v7 = v1.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: long failed>;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: long failed> = v7;
v8 = v1.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: long skipped>;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: long skipped> = v8;
v9 = v1.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: long currentPassed>;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: long currentPassed> = v9;
v10 = v1.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: long currentFailed>;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: long currentFailed> = v10;
v11 = v1.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: long currentSkipped>;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: long currentSkipped> = v11;
v12 = v1.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: boolean isBrokenOnly>;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: boolean isBrokenOnly> = v12;
v13 = v1.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: boolean isTestOutput>;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: boolean isTestOutput> = v13;
v14 = v1.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: boolean isInstrumentationBasedReload>;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: boolean isInstrumentationBasedReload> = v14;
v15 = v1.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: boolean isLiveReload>;
v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: boolean isLiveReload> = v15;
return;
}
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder builder()
{
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder v1;
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State v0;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State;
v1 = new io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder;
specialinvoke v1.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$StateBuilder: void <init>(io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State)>(v0);
return v1;
}
public java.lang.String toString()
{
long v1, v4, v5, v6, v7;
io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State v0;
java.lang.String v12;
boolean v10, v11, v2, v3, v8, v9;
v0 := @this: io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State;
v1 = v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: long lastRun>;
v2 = v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: boolean running>;
v3 = v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: boolean inProgress>;
v4 = v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: long run>;
v5 = v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: long passed>;
v6 = v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: long failed>;
v7 = v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: long skipped>;
v8 = v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: boolean isBrokenOnly>;
v9 = v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: boolean isTestOutput>;
v10 = v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: boolean isInstrumentationBasedReload>;
v11 = v0.<io.quarkus.dev.testing.ContinuousTestingSharedStateManager$State: boolean isLiveReload>;
v12 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long,boolean,boolean,long,long,long,long,boolean,boolean,boolean,boolean)>(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("State{lastRun=\u0001, running=\u0001, inProgress=\u0001, run=\u0001, passed=\u0001, failed=\u0001, skipped=\u0001, isBrokenOnly=\u0001, isTestOutput=\u0001, isInstrumentationBasedReload=\u0001, isLiveReload=\u0001}");
return v12;
}
}