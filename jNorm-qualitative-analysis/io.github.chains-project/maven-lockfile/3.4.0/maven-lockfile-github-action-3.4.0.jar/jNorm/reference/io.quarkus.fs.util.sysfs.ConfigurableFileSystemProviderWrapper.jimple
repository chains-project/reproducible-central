public class io.quarkus.fs.util.sysfs.ConfigurableFileSystemProviderWrapper extends io.quarkus.fs.util.base.DelegatingFileSystemProvider
{
private final java.util.Set allowedAccessModes;
public void <init>(java.nio.file.spi.FileSystemProvider, java.util.Set)
{
io.quarkus.fs.util.sysfs.ConfigurableFileSystemProviderWrapper v0;
java.util.Set v2, v3;
java.lang.Object v4;
java.nio.file.spi.FileSystemProvider v1;
v0 := @this: io.quarkus.fs.util.sysfs.ConfigurableFileSystemProviderWrapper;
v1 := @parameter0: java.nio.file.spi.FileSystemProvider;
v2 := @parameter1: java.util.Set;
specialinvoke v0.<io.quarkus.fs.util.base.DelegatingFileSystemProvider: void <init>(java.nio.file.spi.FileSystemProvider)>(v1);
v3 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
v4 = staticinvoke <java.util.Objects: java.lang.Object requireNonNullElse(java.lang.Object,java.lang.Object)>(v2, v3);
v0.<io.quarkus.fs.util.sysfs.ConfigurableFileSystemProviderWrapper: java.util.Set allowedAccessModes> = v4;
return;
}
public transient void checkAccess(java.nio.file.Path, java.nio.file.AccessMode[]) throws java.io.IOException
{
io.quarkus.fs.util.sysfs.ConfigurableFileSystemProviderWrapper v0;
java.lang.Object[] v14;
java.nio.file.spi.FileSystemProvider v15;
java.nio.file.AccessMode v9;
java.util.ArrayList v6;
int v3, v7, v8;
java.nio.file.Path v1, v16;
java.nio.file.AccessMode[] v13, v2;
boolean v11, v12, v5;
java.util.Set v10, v4;
v0 := @this: io.quarkus.fs.util.sysfs.ConfigurableFileSystemProviderWrapper;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.AccessMode[];
v3 = lengthof v2;
if v3 <= 0 goto label5;
v4 = v0.<io.quarkus.fs.util.sysfs.ConfigurableFileSystemProviderWrapper: java.util.Set allowedAccessModes>;
v5 = interfaceinvoke v4.<java.util.Set: boolean isEmpty()>();
if v5 != 0 goto label5;
v6 = new java.util.ArrayList;
specialinvoke v6.<java.util.ArrayList: void <init>(int)>(3);
v7 = lengthof v2;
v8 = 0;
label1:
if v8 >= v7 goto label3;
v9 = v2[v8];
v10 = v0.<io.quarkus.fs.util.sysfs.ConfigurableFileSystemProviderWrapper: java.util.Set allowedAccessModes>;
v11 = interfaceinvoke v10.<java.util.Set: boolean contains(java.lang.Object)>(v9);
if v11 != 0 goto label2;
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v9);
label2:
v8 = v8 + 1;
goto label1;
label3:
v12 = interfaceinvoke v6.<java.util.List: boolean isEmpty()>();
if v12 == 0 goto label4;
return;
label4:
v13 = newarray (java.nio.file.AccessMode)[0];
v14 = interfaceinvoke v6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v13);
label5:
v15 = v0.<io.quarkus.fs.util.sysfs.ConfigurableFileSystemProviderWrapper: java.nio.file.spi.FileSystemProvider delegate>;
v16 = staticinvoke <io.quarkus.fs.util.base.DelegatingPath: java.nio.file.Path unwrap(java.nio.file.Path)>(v1);
virtualinvoke v15.<java.nio.file.spi.FileSystemProvider: void checkAccess(java.nio.file.Path,java.nio.file.AccessMode[])>(v16, v14);
return;
}
}