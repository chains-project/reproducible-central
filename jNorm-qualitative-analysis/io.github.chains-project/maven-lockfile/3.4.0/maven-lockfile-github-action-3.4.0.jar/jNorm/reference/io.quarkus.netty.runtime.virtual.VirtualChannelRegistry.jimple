final class io.quarkus.netty.runtime.virtual.VirtualChannelRegistry extends java.lang.Object
{
private static final java.util.concurrent.ConcurrentMap boundChannels;
static io.quarkus.netty.runtime.virtual.VirtualAddress register(io.netty.channel.Channel, io.quarkus.netty.runtime.virtual.VirtualAddress, java.net.SocketAddress)
{
io.quarkus.netty.runtime.virtual.VirtualAddress v1, v10, v8;
java.net.SocketAddress v2;
java.util.concurrent.ConcurrentMap v11;
io.netty.channel.Channel v0;
io.netty.channel.ChannelException v13, v3, v5;
java.lang.Object v12;
java.lang.String v14, v6, v7;
boolean v4, v9;
v0 := @parameter0: io.netty.channel.Channel;
v1 := @parameter1: io.quarkus.netty.runtime.virtual.VirtualAddress;
v2 := @parameter2: java.net.SocketAddress;
if v1 == null goto label1;
v3 = new io.netty.channel.ChannelException;
specialinvoke v3.<io.netty.channel.ChannelException: void <init>(java.lang.String)>("already bound");
throw v3;
label1:
v4 = v2 instanceof io.quarkus.netty.runtime.virtual.VirtualAddress;
if v4 != 0 goto label2;
v5 = new io.netty.channel.ChannelException;
v6 = staticinvoke <io.netty.util.internal.StringUtil: java.lang.String simpleClassName(java.lang.Object)>(v2);
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("unsupported address type: \u0001");
specialinvoke v5.<io.netty.channel.ChannelException: void <init>(java.lang.String)>(v7);
throw v5;
label2:
v8 = <io.quarkus.netty.runtime.virtual.VirtualAddress: io.quarkus.netty.runtime.virtual.VirtualAddress ANY>;
v9 = virtualinvoke v8.<io.quarkus.netty.runtime.virtual.VirtualAddress: boolean equals(java.lang.Object)>(v2);
if v9 == 0 goto label3;
v10 = new io.quarkus.netty.runtime.virtual.VirtualAddress;
specialinvoke v10.<io.quarkus.netty.runtime.virtual.VirtualAddress: void <init>(io.netty.channel.Channel)>(v0);
v2 = v10;
label3:
v11 = <io.quarkus.netty.runtime.virtual.VirtualChannelRegistry: java.util.concurrent.ConcurrentMap boundChannels>;
v12 = interfaceinvoke v11.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(v2, v0);
if v12 == null goto label4;
v13 = new io.netty.channel.ChannelException;
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (io.netty.channel.Channel)>(v12) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("address already in use by: \u0001");
specialinvoke v13.<io.netty.channel.ChannelException: void <init>(java.lang.String)>(v14);
throw v13;
label4:
return v2;
}
static io.netty.channel.Channel get(java.net.SocketAddress)
{
java.lang.Object v2;
java.net.SocketAddress v0;
java.util.concurrent.ConcurrentMap v1;
v0 := @parameter0: java.net.SocketAddress;
v1 = <io.quarkus.netty.runtime.virtual.VirtualChannelRegistry: java.util.concurrent.ConcurrentMap boundChannels>;
v2 = interfaceinvoke v1.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v0);
return v2;
}
static void unregister(io.quarkus.netty.runtime.virtual.VirtualAddress)
{
io.quarkus.netty.runtime.virtual.VirtualAddress v0;
java.util.concurrent.ConcurrentMap v1;
v0 := @parameter0: io.quarkus.netty.runtime.virtual.VirtualAddress;
v1 = <io.quarkus.netty.runtime.virtual.VirtualChannelRegistry: java.util.concurrent.ConcurrentMap boundChannels>;
interfaceinvoke v1.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(v0);
return;
}
private void <init>()
{
io.quarkus.netty.runtime.virtual.VirtualChannelRegistry v0;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualChannelRegistry;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void <clinit>()
{
java.util.concurrent.ConcurrentMap v0;
v0 = staticinvoke <io.netty.util.internal.PlatformDependent: java.util.concurrent.ConcurrentMap newConcurrentHashMap()>();
<io.quarkus.netty.runtime.virtual.VirtualChannelRegistry: java.util.concurrent.ConcurrentMap boundChannels> = v0;
return;
}
}