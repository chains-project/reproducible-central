public class io.quarkus.netty.runtime.virtual.VirtualServerChannel extends io.netty.channel.AbstractServerChannel
{
private final io.netty.channel.ChannelConfig config;
private final java.util.Queue inboundBuffer;
private final java.lang.Runnable shutdownHook;
private volatile int state;
private volatile io.quarkus.netty.runtime.virtual.VirtualAddress localAddress;
private volatile boolean acceptInProgress;
public void <init>()
{
io.quarkus.netty.runtime.virtual.VirtualServerChannel v0;
io.netty.buffer.ByteBufAllocator v7;
io.netty.channel.DefaultChannelConfig v1;
io.netty.channel.ChannelConfig v4, v6;
io.netty.channel.PreferHeapByteBufAllocator v5;
io.quarkus.netty.runtime.virtual.VirtualServerChannel$1 v3;
java.util.ArrayDeque v2;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualServerChannel;
specialinvoke v0.<io.netty.channel.AbstractServerChannel: void <init>()>();
v1 = new io.netty.channel.DefaultChannelConfig;
specialinvoke v1.<io.netty.channel.DefaultChannelConfig: void <init>(io.netty.channel.Channel)>(v0);
v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: io.netty.channel.ChannelConfig config> = v1;
v2 = new java.util.ArrayDeque;
specialinvoke v2.<java.util.ArrayDeque: void <init>()>();
v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: java.util.Queue inboundBuffer> = v2;
v3 = new io.quarkus.netty.runtime.virtual.VirtualServerChannel$1;
specialinvoke v3.<io.quarkus.netty.runtime.virtual.VirtualServerChannel$1: void <init>(io.quarkus.netty.runtime.virtual.VirtualServerChannel)>(v0);
v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: java.lang.Runnable shutdownHook> = v3;
v4 = virtualinvoke v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: io.netty.channel.ChannelConfig config()>();
v5 = new io.netty.channel.PreferHeapByteBufAllocator;
v6 = v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: io.netty.channel.ChannelConfig config>;
v7 = interfaceinvoke v6.<io.netty.channel.ChannelConfig: io.netty.buffer.ByteBufAllocator getAllocator()>();
specialinvoke v5.<io.netty.channel.PreferHeapByteBufAllocator: void <init>(io.netty.buffer.ByteBufAllocator)>(v7);
interfaceinvoke v4.<io.netty.channel.ChannelConfig: io.netty.channel.ChannelConfig setAllocator(io.netty.buffer.ByteBufAllocator)>(v5);
return;
}
public io.netty.channel.ChannelConfig config()
{
io.quarkus.netty.runtime.virtual.VirtualServerChannel v0;
io.netty.channel.ChannelConfig v1;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualServerChannel;
v1 = v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: io.netty.channel.ChannelConfig config>;
return v1;
}
public io.quarkus.netty.runtime.virtual.VirtualAddress localAddress()
{
io.quarkus.netty.runtime.virtual.VirtualServerChannel v0;
java.net.SocketAddress v1;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualServerChannel;
v1 = specialinvoke v0.<io.netty.channel.AbstractServerChannel: java.net.SocketAddress localAddress()>();
return v1;
}
public io.quarkus.netty.runtime.virtual.VirtualAddress remoteAddress()
{
io.quarkus.netty.runtime.virtual.VirtualServerChannel v0;
java.net.SocketAddress v1;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualServerChannel;
v1 = specialinvoke v0.<io.netty.channel.AbstractServerChannel: java.net.SocketAddress remoteAddress()>();
return v1;
}
public boolean isOpen()
{
int v1;
io.quarkus.netty.runtime.virtual.VirtualServerChannel v0;
boolean v2;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualServerChannel;
v1 = v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: int state>;
if v1 >= 2 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public boolean isActive()
{
int v1;
io.quarkus.netty.runtime.virtual.VirtualServerChannel v0;
boolean v2;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualServerChannel;
v1 = v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: int state>;
if v1 != 1 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
protected boolean isCompatible(io.netty.channel.EventLoop)
{
io.quarkus.netty.runtime.virtual.VirtualServerChannel v0;
io.netty.channel.EventLoop v1;
boolean v2;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualServerChannel;
v1 := @parameter0: io.netty.channel.EventLoop;
v2 = v1 instanceof io.netty.channel.SingleThreadEventLoop;
return v2;
}
protected java.net.SocketAddress localAddress0()
{
io.quarkus.netty.runtime.virtual.VirtualAddress v1;
io.quarkus.netty.runtime.virtual.VirtualServerChannel v0;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualServerChannel;
v1 = v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: io.quarkus.netty.runtime.virtual.VirtualAddress localAddress>;
return v1;
}
protected void doRegister() throws java.lang.Exception
{
io.quarkus.netty.runtime.virtual.VirtualServerChannel v0;
io.netty.channel.EventLoop v1;
java.lang.Runnable v2;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualServerChannel;
v1 = virtualinvoke v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: io.netty.channel.EventLoop eventLoop()>();
v2 = v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: java.lang.Runnable shutdownHook>;
virtualinvoke v1.<io.netty.util.concurrent.SingleThreadEventExecutor: void addShutdownHook(java.lang.Runnable)>(v2);
return;
}
protected void doBind(java.net.SocketAddress) throws java.lang.Exception
{
io.quarkus.netty.runtime.virtual.VirtualAddress v2, v3;
io.quarkus.netty.runtime.virtual.VirtualServerChannel v0;
java.net.SocketAddress v1;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualServerChannel;
v1 := @parameter0: java.net.SocketAddress;
v2 = v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: io.quarkus.netty.runtime.virtual.VirtualAddress localAddress>;
v3 = staticinvoke <io.quarkus.netty.runtime.virtual.VirtualChannelRegistry: io.quarkus.netty.runtime.virtual.VirtualAddress register(io.netty.channel.Channel,io.quarkus.netty.runtime.virtual.VirtualAddress,java.net.SocketAddress)>(v0, v2, v1);
v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: io.quarkus.netty.runtime.virtual.VirtualAddress localAddress> = v3;
v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: int state> = 1;
return;
}
protected void doClose() throws java.lang.Exception
{
io.quarkus.netty.runtime.virtual.VirtualAddress v2, v3;
io.quarkus.netty.runtime.virtual.VirtualServerChannel v0;
int v1;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualServerChannel;
v1 = v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: int state>;
if v1 > 1 goto label2;
v2 = v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: io.quarkus.netty.runtime.virtual.VirtualAddress localAddress>;
if v2 == null goto label1;
v3 = v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: io.quarkus.netty.runtime.virtual.VirtualAddress localAddress>;
staticinvoke <io.quarkus.netty.runtime.virtual.VirtualChannelRegistry: void unregister(io.quarkus.netty.runtime.virtual.VirtualAddress)>(v3);
v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: io.quarkus.netty.runtime.virtual.VirtualAddress localAddress> = null;
label1:
v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: int state> = 2;
label2:
return;
}
protected void doDeregister() throws java.lang.Exception
{
io.quarkus.netty.runtime.virtual.VirtualServerChannel v0;
io.netty.channel.EventLoop v1;
java.lang.Runnable v2;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualServerChannel;
v1 = virtualinvoke v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: io.netty.channel.EventLoop eventLoop()>();
v2 = v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: java.lang.Runnable shutdownHook>;
virtualinvoke v1.<io.netty.util.concurrent.SingleThreadEventExecutor: void removeShutdownHook(java.lang.Runnable)>(v2);
return;
}
protected void doBeginRead() throws java.lang.Exception
{
io.quarkus.netty.runtime.virtual.VirtualServerChannel v0;
java.util.Queue v2;
boolean v1, v3;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualServerChannel;
v1 = v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: boolean acceptInProgress>;
if v1 == 0 goto label1;
return;
label1:
v2 = v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: java.util.Queue inboundBuffer>;
v3 = interfaceinvoke v2.<java.util.Queue: boolean isEmpty()>();
if v3 == 0 goto label2;
v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: boolean acceptInProgress> = 1;
return;
label2:
specialinvoke v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: void readInbound()>();
return;
}
io.quarkus.netty.runtime.virtual.VirtualChannel serve(io.quarkus.netty.runtime.virtual.VirtualClientConnection)
{
io.quarkus.netty.runtime.virtual.VirtualServerChannel v0;
io.quarkus.netty.runtime.virtual.VirtualClientConnection v1;
io.quarkus.netty.runtime.virtual.VirtualServerChannel$2 v6;
io.quarkus.netty.runtime.virtual.VirtualChannel v2;
io.netty.channel.EventLoop v3, v5;
boolean v4;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualServerChannel;
v1 := @parameter0: io.quarkus.netty.runtime.virtual.VirtualClientConnection;
v2 = virtualinvoke v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: io.quarkus.netty.runtime.virtual.VirtualChannel newLocalChannel(io.quarkus.netty.runtime.virtual.VirtualClientConnection)>(v1);
v3 = virtualinvoke v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: io.netty.channel.EventLoop eventLoop()>();
v4 = interfaceinvoke v3.<io.netty.channel.EventLoop: boolean inEventLoop()>();
if v4 == 0 goto label1;
specialinvoke v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: void serve0(io.quarkus.netty.runtime.virtual.VirtualChannel)>(v2);
goto label2;
label1:
v5 = virtualinvoke v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: io.netty.channel.EventLoop eventLoop()>();
v6 = new io.quarkus.netty.runtime.virtual.VirtualServerChannel$2;
specialinvoke v6.<io.quarkus.netty.runtime.virtual.VirtualServerChannel$2: void <init>(io.quarkus.netty.runtime.virtual.VirtualServerChannel,io.quarkus.netty.runtime.virtual.VirtualChannel)>(v0, v2);
interfaceinvoke v5.<io.netty.channel.EventLoop: void execute(java.lang.Runnable)>(v6);
label2:
return v2;
}
private void readInbound()
{
io.quarkus.netty.runtime.virtual.VirtualServerChannel v0;
io.netty.channel.ChannelPipeline v4;
io.netty.channel.Channel$Unsafe v1;
io.netty.channel.RecvByteBufAllocator$Handle v2;
io.netty.channel.ChannelConfig v3;
java.lang.Object v6;
java.util.Queue v5;
boolean v7;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualServerChannel;
v1 = virtualinvoke v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: io.netty.channel.Channel$Unsafe unsafe()>();
v2 = interfaceinvoke v1.<io.netty.channel.Channel$Unsafe: io.netty.channel.RecvByteBufAllocator$Handle recvBufAllocHandle()>();
v3 = virtualinvoke v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: io.netty.channel.ChannelConfig config()>();
interfaceinvoke v2.<io.netty.channel.RecvByteBufAllocator$Handle: void reset(io.netty.channel.ChannelConfig)>(v3);
v4 = virtualinvoke v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: io.netty.channel.ChannelPipeline pipeline()>();
label1:
v5 = v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: java.util.Queue inboundBuffer>;
v6 = interfaceinvoke v5.<java.util.Queue: java.lang.Object poll()>();
if v6 == null goto label2;
interfaceinvoke v4.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireChannelRead(java.lang.Object)>(v6);
v7 = interfaceinvoke v2.<io.netty.channel.RecvByteBufAllocator$Handle: boolean continueReading()>();
if v7 != 0 goto label1;
label2:
interfaceinvoke v4.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline fireChannelReadComplete()>();
return;
}
protected io.quarkus.netty.runtime.virtual.VirtualChannel newLocalChannel(io.quarkus.netty.runtime.virtual.VirtualClientConnection)
{
io.quarkus.netty.runtime.virtual.VirtualClientConnection v1;
io.quarkus.netty.runtime.virtual.VirtualChannel v2;
io.quarkus.netty.runtime.virtual.VirtualServerChannel v0;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualServerChannel;
v1 := @parameter0: io.quarkus.netty.runtime.virtual.VirtualClientConnection;
v2 = new io.quarkus.netty.runtime.virtual.VirtualChannel;
specialinvoke v2.<io.quarkus.netty.runtime.virtual.VirtualChannel: void <init>(io.quarkus.netty.runtime.virtual.VirtualServerChannel,io.quarkus.netty.runtime.virtual.VirtualClientConnection)>(v0, v1);
return v2;
}
private void serve0(io.quarkus.netty.runtime.virtual.VirtualChannel)
{
io.quarkus.netty.runtime.virtual.VirtualServerChannel v0;
io.quarkus.netty.runtime.virtual.VirtualChannel v1;
java.util.Queue v2;
boolean v3;
v0 := @this: io.quarkus.netty.runtime.virtual.VirtualServerChannel;
v1 := @parameter0: io.quarkus.netty.runtime.virtual.VirtualChannel;
v2 = v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: java.util.Queue inboundBuffer>;
interfaceinvoke v2.<java.util.Queue: boolean add(java.lang.Object)>(v1);
v3 = v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: boolean acceptInProgress>;
if v3 == 0 goto label1;
v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: boolean acceptInProgress> = 0;
specialinvoke v0.<io.quarkus.netty.runtime.virtual.VirtualServerChannel: void readInbound()>();
label1:
return;
}
}