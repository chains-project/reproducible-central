public class io.quarkus.runtime.PreloadClassesRecorder extends java.lang.Object
{
public static final java.lang.String QUARKUS_GENERATED_PRELOAD_CLASSES_FILE;
public void <init>()
{
io.quarkus.runtime.PreloadClassesRecorder v0;
v0 := @this: io.quarkus.runtime.PreloadClassesRecorder;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static void preloadClass(java.lang.String, boolean)
{
java.lang.Throwable v4;
java.lang.Class v2;
java.lang.ClassLoader v3;
java.lang.String v0;
boolean v1;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: boolean;
label1:
v2 = class "Lio/quarkus/runtime/PreloadClassesRecorder;";
v3 = virtualinvoke v2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(v0, v1, v3);
label2:
goto label4;
label3:
v4 := @caughtexception;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public static void preloadClasses(boolean)
{
java.util.Enumeration v3;
java.io.IOException v8;
java.net.URLConnection v6;
java.lang.Class v1, v9;
java.lang.Object v5;
java.lang.ClassLoader v2;
boolean v0, v4;
java.io.InputStream v10, v7;
v0 := @parameter0: boolean;
label1:
v1 = class "Lio/quarkus/runtime/PreloadClassesRecorder;";
v2 = virtualinvoke v1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
v3 = virtualinvoke v2.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>("META-INF/quarkus-preload-classes.txt");
label2:
v4 = interfaceinvoke v3.<java.util.Enumeration: boolean hasMoreElements()>();
if v4 == 0 goto label4;
v5 = interfaceinvoke v3.<java.util.Enumeration: java.lang.Object nextElement()>();
v6 = virtualinvoke v5.<java.net.URL: java.net.URLConnection openConnection()>();
virtualinvoke v6.<java.net.URLConnection: void setUseCaches(boolean)>(0);
v7 = virtualinvoke v6.<java.net.URLConnection: java.io.InputStream getInputStream()>();
staticinvoke <io.quarkus.runtime.PreloadClassesRecorder: void preloadClassesFromStream(java.io.InputStream,boolean)>(v7, v0);
goto label2;
label3:
v8 := @caughtexception;
label4:
v9 = class "Lio/quarkus/runtime/PreloadClassesRecorder;";
v10 = virtualinvoke v9.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("/META-INF/quarkus-generated-preload-classes.txt");
if v10 == null goto label5;
staticinvoke <io.quarkus.runtime.PreloadClassesRecorder: void preloadClassesFromStream(java.io.InputStream,boolean)>(v10, v0);
label5:
return;
catch java.io.IOException from label1 to label3 with label3;
}
public static void preloadClassesFromStream(java.io.InputStream, boolean)
{
java.lang.Throwable v10, v11, v12;
java.io.InputStreamReader v2;
java.lang.Exception v13;
int v6, v7;
java.io.BufferedReader v3;
java.lang.String v4, v5, v8;
boolean v1, v9;
java.io.InputStream v0;
v0 := @parameter0: java.io.InputStream;
v1 := @parameter1: boolean;
label01:
v2 = new java.io.InputStreamReader;
specialinvoke v2.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(v0);
label02:
v3 = new java.io.BufferedReader;
specialinvoke v3.<java.io.BufferedReader: void <init>(java.io.Reader)>(v2);
label03:
v4 = virtualinvoke v3.<java.io.BufferedReader: java.lang.String readLine()>();
v5 = v4;
if v4 == null goto label05;
v6 = virtualinvoke v4.<java.lang.String: int indexOf(int)>(35);
v7 = (int) -1;
if v6 == v7 goto label04;
v5 = virtualinvoke v4.<java.lang.String: java.lang.String substring(int,int)>(0, v6);
label04:
v8 = virtualinvoke v5.<java.lang.String: java.lang.String stripTrailing()>();
v9 = virtualinvoke v8.<java.lang.String: boolean isBlank()>();
if v9 != 0 goto label03;
staticinvoke <io.quarkus.runtime.PreloadClassesRecorder: void preloadClass(java.lang.String,boolean)>(v8, v1);
goto label03;
label05:
virtualinvoke v3.<java.io.BufferedReader: void close()>();
goto label07;
label06:
v10 := @caughtexception;
throw v10;
label07:
virtualinvoke v2.<java.io.InputStreamReader: void close()>();
goto label09;
label08:
v11 := @caughtexception;
throw v11;
label09:
if v0 == null goto label12;
virtualinvoke v0.<java.io.InputStream: void close()>();
goto label12;
label10:
v12 := @caughtexception;
throw v12;
label11:
v13 := @caughtexception;
label12:
return;
catch java.lang.Throwable from label03 to label05 with label06;
catch java.lang.Throwable from label02 to label07 with label08;
catch java.lang.Throwable from label01 to label09 with label10;
catch java.lang.Exception from label01 to label11 with label11;
}
public void invokePreloadClasses(boolean)
{
boolean v1;
io.quarkus.runtime.PreloadClassesRecorder v0;
v0 := @this: io.quarkus.runtime.PreloadClassesRecorder;
v1 := @parameter0: boolean;
staticinvoke <io.quarkus.runtime.PreloadClassesRecorder: void preloadClasses(boolean)>(v1);
return;
}
}