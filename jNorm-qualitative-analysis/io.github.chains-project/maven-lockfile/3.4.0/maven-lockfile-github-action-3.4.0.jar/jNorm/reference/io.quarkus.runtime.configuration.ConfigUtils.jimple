public final class io.quarkus.runtime.configuration.ConfigUtils extends java.lang.Object
{
static final java.lang.String UUID_KEY;
private void <init>()
{
io.quarkus.runtime.configuration.ConfigUtils v0;
v0 := @this: io.quarkus.runtime.configuration.ConfigUtils;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.util.function.IntFunction listFactory()
{
java.util.function.IntFunction v0;
v0 = staticinvoke <io.quarkus.runtime.configuration.ConfigUtils$init__3037: java.util.function.IntFunction bootstrap$()>();
return v0;
}
public static java.util.function.IntFunction setFactory()
{
java.util.function.IntFunction v0;
v0 = staticinvoke <io.quarkus.runtime.configuration.ConfigUtils$init__3038: java.util.function.IntFunction bootstrap$()>();
return v0;
}
public static java.util.function.IntFunction sortedSetFactory()
{
java.util.function.IntFunction v0;
v0 = staticinvoke <io.quarkus.runtime.configuration.ConfigUtils$lambda_sortedSetFactory_0__3039: java.util.function.IntFunction bootstrap$()>();
return v0;
}
public static io.smallrye.config.SmallRyeConfigBuilder configBuilder(boolean, io.quarkus.runtime.LaunchMode)
{
io.quarkus.runtime.LaunchMode v1;
boolean v0;
io.smallrye.config.SmallRyeConfigBuilder v2;
v0 := @parameter0: boolean;
v1 := @parameter1: io.quarkus.runtime.LaunchMode;
v2 = staticinvoke <io.quarkus.runtime.configuration.ConfigUtils: io.smallrye.config.SmallRyeConfigBuilder configBuilder(boolean,boolean,io.quarkus.runtime.LaunchMode)>(v0, 1, v1);
return v2;
}
public static io.smallrye.config.SmallRyeConfigBuilder configBuilder(boolean, boolean, io.quarkus.runtime.LaunchMode)
{
io.smallrye.config.SmallRyeConfigBuilder v3;
io.quarkus.runtime.LaunchMode v2;
boolean v0, v1;
v0 := @parameter0: boolean;
v1 := @parameter1: boolean;
v2 := @parameter2: io.quarkus.runtime.LaunchMode;
v3 = staticinvoke <io.quarkus.runtime.configuration.ConfigUtils: io.smallrye.config.SmallRyeConfigBuilder configBuilder(boolean,boolean,boolean,io.quarkus.runtime.LaunchMode)>(v0, 0, v1, v2);
return v3;
}
public static io.smallrye.config.SmallRyeConfigBuilder configBuilder(boolean, boolean, boolean, io.quarkus.runtime.LaunchMode)
{
io.quarkus.runtime.configuration.RuntimeOverrideConfigSource v7;
io.quarkus.runtime.LaunchMode v3;
java.util.UUID v10;
org.eclipse.microprofile.config.spi.ConfigSource[] v6;
io.smallrye.config.SmallRyeConfigBuilder v4;
java.lang.Thread v8;
java.lang.ClassLoader v9;
java.lang.String v11;
boolean v0, v1, v2, v5;
v0 := @parameter0: boolean;
v1 := @parameter1: boolean;
v2 := @parameter2: boolean;
v3 := @parameter3: io.quarkus.runtime.LaunchMode;
v4 = staticinvoke <io.quarkus.runtime.configuration.ConfigUtils: io.smallrye.config.SmallRyeConfigBuilder emptyConfigBuilder()>();
v5 = virtualinvoke v3.<io.quarkus.runtime.LaunchMode: boolean isDevOrTest()>();
if v5 == 0 goto label2;
if v0 != 0 goto label1;
if v1 == 0 goto label2;
label1:
v6 = newarray (org.eclipse.microprofile.config.spi.ConfigSource)[1];
v7 = new io.quarkus.runtime.configuration.RuntimeOverrideConfigSource;
v8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v9 = virtualinvoke v8.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
specialinvoke v7.<io.quarkus.runtime.configuration.RuntimeOverrideConfigSource: void <init>(java.lang.ClassLoader)>(v9);
v6[0] = v7;
virtualinvoke v4.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.SmallRyeConfigBuilder withSources(org.eclipse.microprofile.config.spi.ConfigSource[])>(v6);
label2:
if v0 != 0 goto label3;
if v1 == 0 goto label4;
label3:
v10 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();
v11 = virtualinvoke v10.<java.util.UUID: java.lang.String toString()>();
virtualinvoke v4.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.SmallRyeConfigBuilder withDefaultValue(java.lang.String,java.lang.String)>("quarkus.uuid", v11);
label4:
if v2 == 0 goto label5;
virtualinvoke v4.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.SmallRyeConfigBuilder addDiscoveredSources()>();
label5:
return v4;
}
public static io.smallrye.config.SmallRyeConfigBuilder emptyConfigBuilder()
{
io.smallrye.config.ConfigSourceInterceptorFactory[] v4, v6, v8;
io.quarkus.runtime.LaunchMode v1;
io.quarkus.runtime.configuration.ApplicationPropertiesConfigSourceLoader$InClassPath v20;
java.lang.Thread v10;
java.lang.String v2, v3;
io.quarkus.runtime.configuration.ConfigUtils$1 v5;
io.quarkus.runtime.configuration.ConfigUtils$2 v7;
io.quarkus.runtime.configuration.ConfigUtils$3 v9;
io.smallrye.config.DotEnvConfigSourceProvider v22;
io.smallrye.config.SmallRyeConfigBuilder v0, v12, v13, v14, v15, v16, v17, v19, v21;
io.quarkus.runtime.configuration.ApplicationPropertiesConfigSourceLoader$InFileSystem v18;
java.lang.ClassLoader v11;
v0 = new io.smallrye.config.SmallRyeConfigBuilder;
specialinvoke v0.<io.smallrye.config.SmallRyeConfigBuilder: void <init>()>();
v1 = staticinvoke <io.quarkus.runtime.configuration.ProfileManager: io.quarkus.runtime.LaunchMode getLaunchMode()>();
v2 = virtualinvoke v1.<io.quarkus.runtime.LaunchMode: java.lang.String getProfileKey()>();
v3 = virtualinvoke v1.<io.quarkus.runtime.LaunchMode: java.lang.String getDefaultProfile()>();
virtualinvoke v0.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.SmallRyeConfigBuilder withDefaultValue(java.lang.String,java.lang.String)>(v2, v3);
v4 = newarray (io.smallrye.config.ConfigSourceInterceptorFactory)[1];
v5 = new io.quarkus.runtime.configuration.ConfigUtils$1;
specialinvoke v5.<io.quarkus.runtime.configuration.ConfigUtils$1: void <init>(io.quarkus.runtime.LaunchMode)>(v1);
v4[0] = v5;
virtualinvoke v0.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.SmallRyeConfigBuilder withInterceptorFactories(io.smallrye.config.ConfigSourceInterceptorFactory[])>(v4);
v6 = newarray (io.smallrye.config.ConfigSourceInterceptorFactory)[1];
v7 = new io.quarkus.runtime.configuration.ConfigUtils$2;
specialinvoke v7.<io.quarkus.runtime.configuration.ConfigUtils$2: void <init>()>();
v6[0] = v7;
virtualinvoke v0.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.SmallRyeConfigBuilder withInterceptorFactories(io.smallrye.config.ConfigSourceInterceptorFactory[])>(v6);
v8 = newarray (io.smallrye.config.ConfigSourceInterceptorFactory)[1];
v9 = new io.quarkus.runtime.configuration.ConfigUtils$3;
specialinvoke v9.<io.quarkus.runtime.configuration.ConfigUtils$3: void <init>()>();
v8[0] = v9;
virtualinvoke v0.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.SmallRyeConfigBuilder withInterceptorFactories(io.smallrye.config.ConfigSourceInterceptorFactory[])>(v8);
virtualinvoke v0.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.SmallRyeConfigBuilder withMappingIgnore(java.lang.String)>("quarkus.**");
v10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v11 = virtualinvoke v10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
v12 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.SmallRyeConfigBuilder forClassLoader(java.lang.ClassLoader)>(v11);
v13 = virtualinvoke v12.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.SmallRyeConfigBuilder addDiscoveredConverters()>();
v14 = virtualinvoke v13.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.SmallRyeConfigBuilder addDefaultInterceptors()>();
v15 = virtualinvoke v14.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.SmallRyeConfigBuilder addDiscoveredInterceptors()>();
v16 = virtualinvoke v15.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.SmallRyeConfigBuilder addDiscoveredSecretKeysHandlers()>();
v17 = virtualinvoke v16.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.SmallRyeConfigBuilder addDefaultSources()>();
v18 = new io.quarkus.runtime.configuration.ApplicationPropertiesConfigSourceLoader$InFileSystem;
specialinvoke v18.<io.quarkus.runtime.configuration.ApplicationPropertiesConfigSourceLoader$InFileSystem: void <init>()>();
v19 = virtualinvoke v17.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.SmallRyeConfigBuilder withSources(org.eclipse.microprofile.config.spi.ConfigSourceProvider)>(v18);
v20 = new io.quarkus.runtime.configuration.ApplicationPropertiesConfigSourceLoader$InClassPath;
specialinvoke v20.<io.quarkus.runtime.configuration.ApplicationPropertiesConfigSourceLoader$InClassPath: void <init>()>();
v21 = virtualinvoke v19.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.SmallRyeConfigBuilder withSources(org.eclipse.microprofile.config.spi.ConfigSourceProvider)>(v20);
v22 = new io.smallrye.config.DotEnvConfigSourceProvider;
specialinvoke v22.<io.smallrye.config.DotEnvConfigSourceProvider: void <init>()>();
virtualinvoke v21.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.SmallRyeConfigBuilder withSources(org.eclipse.microprofile.config.spi.ConfigSourceProvider)>(v22);
return v0;
}
public static io.smallrye.config.SmallRyeConfigBuilder configBuilder(io.smallrye.config.SmallRyeConfigBuilder, java.util.List)
{
java.lang.Object[] v11;
java.lang.ReflectiveOperationException v21;
java.lang.reflect.Constructor v10;
java.util.ArrayList v4;
java.lang.Thread v2;
java.lang.String v19, v20;
boolean v15, v6;
java.util.Iterator v14, v5;
java.lang.Class[] v9;
io.quarkus.runtime.configuration.ConfigUtils$ConfigBuilderComparator v13;
io.quarkus.runtime.configuration.ConfigurationException v17, v22;
java.util.List v1;
io.smallrye.config.SmallRyeConfigBuilder v0;
java.lang.Class v18, v8;
java.lang.Object v12, v16, v7;
java.lang.ClassLoader v3;
v0 := @parameter0: io.smallrye.config.SmallRyeConfigBuilder;
v1 := @parameter1: java.util.List;
v2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v3 = virtualinvoke v2.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
label1:
v4 = new java.util.ArrayList;
specialinvoke v4.<java.util.ArrayList: void <init>()>();
v5 = interfaceinvoke v1.<java.util.List: java.util.Iterator iterator()>();
label2:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label3;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = virtualinvoke v3.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(v7);
v9 = newarray (java.lang.Class)[0];
v10 = virtualinvoke v8.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(v9);
v11 = newarray (java.lang.Object)[0];
v12 = virtualinvoke v10.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(v11);
interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(v12);
goto label2;
label3:
v13 = <io.quarkus.runtime.configuration.ConfigUtils$ConfigBuilderComparator: io.quarkus.runtime.configuration.ConfigUtils$ConfigBuilderComparator INSTANCE>;
interfaceinvoke v4.<java.util.List: void sort(java.util.Comparator)>(v13);
v14 = interfaceinvoke v4.<java.util.List: java.util.Iterator iterator()>();
label4:
v15 = interfaceinvoke v14.<java.util.Iterator: boolean hasNext()>();
if v15 == 0 goto label6;
v16 = interfaceinvoke v14.<java.util.Iterator: java.lang.Object next()>();
v0 = interfaceinvoke v16.<io.quarkus.runtime.configuration.ConfigBuilder: io.smallrye.config.SmallRyeConfigBuilder configBuilder(io.smallrye.config.SmallRyeConfigBuilder)>(v0);
if v0 != null goto label4;
v17 = new io.quarkus.runtime.configuration.ConfigurationException;
v18 = virtualinvoke v16.<java.lang.Object: java.lang.Class getClass()>();
v19 = virtualinvoke v18.<java.lang.Class: java.lang.String getName()>();
v20 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v19) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 returned a null builder");
specialinvoke v17.<io.quarkus.runtime.configuration.ConfigurationException: void <init>(java.lang.String)>(v20);
throw v17;
label5:
v21 := @caughtexception;
v22 = new io.quarkus.runtime.configuration.ConfigurationException;
specialinvoke v22.<io.quarkus.runtime.configuration.ConfigurationException: void <init>(java.lang.Throwable)>(v21);
throw v22;
label6:
return v0;
catch java.lang.ClassNotFoundException from label1 to label5 with label5;
catch java.lang.InstantiationException from label1 to label5 with label5;
catch java.lang.reflect.InvocationTargetException from label1 to label5 with label5;
catch java.lang.NoSuchMethodException from label1 to label5 with label5;
catch java.lang.IllegalAccessException from label1 to label5 with label5;
}
public static void addSourceProvider(io.smallrye.config.SmallRyeConfigBuilder, org.eclipse.microprofile.config.spi.ConfigSourceProvider)
{
java.util.Iterator v5;
java.lang.Iterable v4;
org.eclipse.microprofile.config.spi.ConfigSourceProvider v1;
org.eclipse.microprofile.config.spi.ConfigSource[] v8;
io.smallrye.config.SmallRyeConfigBuilder v0;
java.lang.Thread v2;
java.lang.Object v7;
java.lang.ClassLoader v3;
boolean v6;
v0 := @parameter0: io.smallrye.config.SmallRyeConfigBuilder;
v1 := @parameter1: org.eclipse.microprofile.config.spi.ConfigSourceProvider;
v2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v3 = virtualinvoke v2.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
v4 = interfaceinvoke v1.<org.eclipse.microprofile.config.spi.ConfigSourceProvider: java.lang.Iterable getConfigSources(java.lang.ClassLoader)>(v3);
v5 = interfaceinvoke v4.<java.lang.Iterable: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label2;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = newarray (org.eclipse.microprofile.config.spi.ConfigSource)[1];
v8[0] = v7;
virtualinvoke v0.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.SmallRyeConfigBuilder withSources(org.eclipse.microprofile.config.spi.ConfigSource[])>(v8);
goto label1;
label2:
return;
}
public static void addSourceProviders(io.smallrye.config.SmallRyeConfigBuilder, java.util.Collection)
{
java.util.Iterator v2;
io.smallrye.config.SmallRyeConfigBuilder v0;
java.util.Collection v1;
java.lang.Object v4;
boolean v3;
v0 := @parameter0: io.smallrye.config.SmallRyeConfigBuilder;
v1 := @parameter1: java.util.Collection;
v2 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
staticinvoke <io.quarkus.runtime.configuration.ConfigUtils: void addSourceProvider(io.smallrye.config.SmallRyeConfigBuilder,org.eclipse.microprofile.config.spi.ConfigSourceProvider)>(v0, v4);
goto label1;
label2:
return;
}
public static void addSourceFactoryProvider(io.smallrye.config.SmallRyeConfigBuilder, io.quarkus.runtime.configuration.ConfigSourceFactoryProvider)
{
io.smallrye.config.ConfigSourceFactory[] v2;
io.smallrye.config.ConfigSourceFactory v5;
io.quarkus.runtime.configuration.ConfigSourceFactoryProvider v1;
io.smallrye.config.SmallRyeConfigBuilder v0;
java.lang.Thread v3;
java.lang.ClassLoader v4;
v0 := @parameter0: io.smallrye.config.SmallRyeConfigBuilder;
v1 := @parameter1: io.quarkus.runtime.configuration.ConfigSourceFactoryProvider;
v2 = newarray (io.smallrye.config.ConfigSourceFactory)[1];
v3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v4 = virtualinvoke v3.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
v5 = interfaceinvoke v1.<io.quarkus.runtime.configuration.ConfigSourceFactoryProvider: io.smallrye.config.ConfigSourceFactory getConfigSourceFactory(java.lang.ClassLoader)>(v4);
v2[0] = v5;
virtualinvoke v0.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.SmallRyeConfigBuilder withSources(io.smallrye.config.ConfigSourceFactory[])>(v2);
return;
}
public static java.util.List getProfiles()
{
java.lang.Object v1;
java.util.List v2;
org.eclipse.microprofile.config.Config v0;
v0 = staticinvoke <org.eclipse.microprofile.config.ConfigProvider: org.eclipse.microprofile.config.Config getConfig()>();
v1 = interfaceinvoke v0.<org.eclipse.microprofile.config.Config: java.lang.Object unwrap(java.lang.Class)>(class "Lio/smallrye/config/SmallRyeConfig;");
v2 = virtualinvoke v1.<io.smallrye.config.SmallRyeConfig: java.util.List getProfiles()>();
return v2;
}
public static boolean isProfileActive(java.lang.String)
{
java.util.List v1;
java.lang.String v0;
boolean v2;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <io.quarkus.runtime.configuration.ConfigUtils: java.util.List getProfiles()>();
v2 = interfaceinvoke v1.<java.util.List: boolean contains(java.lang.Object)>(v0);
return v2;
}
public static boolean isPropertyPresent(java.lang.String)
{
java.lang.Object v2;
java.lang.String v0;
org.eclipse.microprofile.config.Config v1;
boolean v3;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.eclipse.microprofile.config.ConfigProvider: org.eclipse.microprofile.config.Config getConfig()>();
v2 = interfaceinvoke v1.<org.eclipse.microprofile.config.Config: java.lang.Object unwrap(java.lang.Class)>(class "Lio/smallrye/config/SmallRyeConfig;");
v3 = virtualinvoke v2.<io.smallrye.config.SmallRyeConfig: boolean isPropertyPresent(java.lang.String)>(v0);
return v3;
}
public static boolean isAnyPropertyPresent(java.util.Collection)
{
java.util.Iterator v1;
java.util.Collection v0;
java.lang.Object v3;
boolean v2, v4;
v0 := @parameter0: java.util.Collection;
v1 = interfaceinvoke v0.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v2 = interfaceinvoke v1.<java.util.Iterator: boolean hasNext()>();
if v2 == 0 goto label2;
v3 = interfaceinvoke v1.<java.util.Iterator: java.lang.Object next()>();
v4 = staticinvoke <io.quarkus.runtime.configuration.ConfigUtils: boolean isPropertyPresent(java.lang.String)>(v3);
if v4 == 0 goto label1;
return 1;
label2:
return 0;
}
public static java.util.Optional getFirstOptionalValue(java.util.List, java.lang.Class)
{
java.util.Iterator v3;
org.eclipse.microprofile.config.Config v2;
java.util.List v0;
java.util.Optional v6, v8;
java.lang.Class v1;
java.lang.Object v5;
boolean v4, v7;
v0 := @parameter0: java.util.List;
v1 := @parameter1: java.lang.Class;
v2 = staticinvoke <org.eclipse.microprofile.config.ConfigProvider: org.eclipse.microprofile.config.Config getConfig()>();
v3 = interfaceinvoke v0.<java.util.List: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = interfaceinvoke v2.<org.eclipse.microprofile.config.Config: java.util.Optional getOptionalValue(java.lang.String,java.lang.Class)>(v5, v1);
v7 = virtualinvoke v6.<java.util.Optional: boolean isPresent()>();
if v7 == 0 goto label1;
return v6;
label2:
v8 = staticinvoke <java.util.Optional: java.util.Optional empty()>();
return v8;
}
}