public final class io.quarkus.runtime.util.ContainerRuntimeUtil extends java.lang.Object
{
private static final org.jboss.logging.Logger log;
private static final java.lang.String CONTAINER_EXECUTABLE;
private static final java.util.regex.Pattern PODMAN_PATTERN;
private static final java.lang.String CONTAINER_RUNTIME_SYS_PROP;
private void <init>()
{
io.quarkus.runtime.util.ContainerRuntimeUtil v0;
v0 := @this: io.quarkus.runtime.util.ContainerRuntimeUtil;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime detectContainerRuntime()
{
io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime v0;
v0 = staticinvoke <io.quarkus.runtime.util.ContainerRuntimeUtil: io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime detectContainerRuntime(boolean)>(1);
return v0;
}
public static io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime detectContainerRuntime(boolean)
{
java.lang.IllegalStateException v5;
io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime v1, v2, v3, v4, v6, v7;
boolean v0;
v0 := @parameter0: boolean;
v1 = staticinvoke <io.quarkus.runtime.util.ContainerRuntimeUtil: io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime loadContainerRuntimeFromSystemProperty()>();
if v1 == null goto label1;
return v1;
label1:
v2 = staticinvoke <io.quarkus.runtime.util.ContainerRuntimeUtil: io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime getContainerRuntimeEnvironment()>();
v3 = <io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime: io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime UNAVAILABLE>;
if v2 != v3 goto label3;
v4 = <io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime: io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime UNAVAILABLE>;
staticinvoke <io.quarkus.runtime.util.ContainerRuntimeUtil: void storeContainerRuntimeInSystemProperty(io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime)>(v4);
if v0 == 0 goto label2;
v5 = new java.lang.IllegalStateException;
specialinvoke v5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No container runtime was found. Make sure you have either Docker or Podman installed in your environment.");
throw v5;
label2:
v6 = <io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime: io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime UNAVAILABLE>;
return v6;
label3:
v7 = staticinvoke <io.quarkus.runtime.util.ContainerRuntimeUtil: io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime fullyResolveContainerRuntime(io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime)>(v2);
staticinvoke <io.quarkus.runtime.util.ContainerRuntimeUtil: void storeContainerRuntimeInSystemProperty(io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime)>(v7);
return v7;
}
private static io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime getContainerRuntimeEnvironment()
{
java.util.regex.Matcher v14, v22, v29;
boolean v10, v15, v20, v23, v3, v30, v6;
java.util.regex.Pattern v13, v21, v28;
org.jboss.logging.Logger v17;
java.lang.String v0, v1, v12, v19, v2, v27, v5, v8, v9;
io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime v11, v16, v18, v24, v25, v26, v31, v32, v4, v7;
v0 = <io.quarkus.runtime.util.ContainerRuntimeUtil: java.lang.String CONTAINER_EXECUTABLE>;
if v0 == null goto label3;
v1 = <io.quarkus.runtime.util.ContainerRuntimeUtil: java.lang.String CONTAINER_EXECUTABLE>;
v2 = virtualinvoke v1.<java.lang.String: java.lang.String trim()>();
v3 = virtualinvoke v2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("docker");
if v3 == 0 goto label1;
v4 = <io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime: io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime DOCKER>;
v5 = staticinvoke <io.quarkus.runtime.util.ContainerRuntimeUtil: java.lang.String getVersionOutputFor(io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime)>(v4);
v6 = virtualinvoke v5.<java.lang.String: boolean contains(java.lang.CharSequence)>("Docker version");
if v6 == 0 goto label1;
v7 = <io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime: io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime DOCKER>;
return v7;
label1:
v8 = <io.quarkus.runtime.util.ContainerRuntimeUtil: java.lang.String CONTAINER_EXECUTABLE>;
v9 = virtualinvoke v8.<java.lang.String: java.lang.String trim()>();
v10 = virtualinvoke v9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("podman");
if v10 == 0 goto label2;
v11 = <io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime: io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime PODMAN>;
v12 = staticinvoke <io.quarkus.runtime.util.ContainerRuntimeUtil: java.lang.String getVersionOutputFor(io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime)>(v11);
v13 = <io.quarkus.runtime.util.ContainerRuntimeUtil: java.util.regex.Pattern PODMAN_PATTERN>;
v14 = virtualinvoke v13.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v12);
v15 = virtualinvoke v14.<java.util.regex.Matcher: boolean matches()>();
if v15 == 0 goto label2;
v16 = <io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime: io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime PODMAN>;
return v16;
label2:
v17 = <io.quarkus.runtime.util.ContainerRuntimeUtil: org.jboss.logging.Logger log>;
virtualinvoke v17.<org.jboss.logging.Logger: void warn(java.lang.Object)>("quarkus.native.container-runtime config property must be set to either podman or docker and the executable must be available. Ignoring it.");
label3:
v18 = <io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime: io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime DOCKER>;
v19 = staticinvoke <io.quarkus.runtime.util.ContainerRuntimeUtil: java.lang.String getVersionOutputFor(io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime)>(v18);
v20 = virtualinvoke v19.<java.lang.String: boolean contains(java.lang.CharSequence)>("Docker version");
if v20 == 0 goto label5;
v21 = <io.quarkus.runtime.util.ContainerRuntimeUtil: java.util.regex.Pattern PODMAN_PATTERN>;
v22 = virtualinvoke v21.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v19);
v23 = virtualinvoke v22.<java.util.regex.Matcher: boolean matches()>();
if v23 == 0 goto label4;
v24 = <io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime: io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime PODMAN>;
return v24;
label4:
v25 = <io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime: io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime DOCKER>;
return v25;
label5:
v26 = <io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime: io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime PODMAN>;
v27 = staticinvoke <io.quarkus.runtime.util.ContainerRuntimeUtil: java.lang.String getVersionOutputFor(io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime)>(v26);
v28 = <io.quarkus.runtime.util.ContainerRuntimeUtil: java.util.regex.Pattern PODMAN_PATTERN>;
v29 = virtualinvoke v28.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v27);
v30 = virtualinvoke v29.<java.util.regex.Matcher: boolean matches()>();
if v30 == 0 goto label6;
v31 = <io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime: io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime PODMAN>;
return v31;
label6:
v32 = <io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime: io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime UNAVAILABLE>;
return v32;
}
private static io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime fullyResolveContainerRuntime(io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime)
{
io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime v0, v2, v3;
boolean v1;
v0 := @parameter0: io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime;
v1 = staticinvoke <io.quarkus.runtime.util.ContainerRuntimeUtil: boolean getRootlessStateFor(io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime)>(v0);
if v1 != 0 goto label1;
return v0;
label1:
v2 = <io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime: io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime DOCKER>;
if v0 != v2 goto label2;
v3 = <io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime: io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime DOCKER_ROOTLESS>;
goto label3;
label2:
v3 = <io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime: io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime PODMAN_ROOTLESS>;
label3:
return v3;
}
private static io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime loadContainerRuntimeFromSystemProperty()
{
java.lang.String v0;
io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime v1;
org.jboss.logging.Logger v2;
v0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("quarkus-local-container-runtime");
if v0 != null goto label1;
return null;
label1:
v1 = staticinvoke <io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime: io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime of(java.lang.String)>(v0);
if v1 != null goto label2;
v2 = <io.quarkus.runtime.util.ContainerRuntimeUtil: org.jboss.logging.Logger log>;
virtualinvoke v2.<org.jboss.logging.Logger: void warnf(java.lang.String,java.lang.Object,java.lang.Object)>("System property %s contains an unknown value %s. Ignoring it.", "quarkus-local-container-runtime", v0);
label2:
return v1;
}
private static void storeContainerRuntimeInSystemProperty(io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime)
{
java.lang.String v1;
io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime v0;
v0 := @parameter0: io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime;
v1 = virtualinvoke v0.<io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime: java.lang.String name()>();
staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("quarkus-local-container-runtime", v1);
return;
}
private static java.lang.String getVersionOutputFor(io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime)
{
java.lang.Throwable v18;
byte[] v10;
org.jboss.logging.Logger v12, v16;
java.lang.String[] v3;
java.lang.Integer v14;
java.nio.charset.Charset v11;
java.lang.ProcessBuilder v2, v5;
java.lang.String v13, v17, v4, v8;
boolean v7;
java.lang.Process v1;
io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime v0;
java.lang.Exception v15;
java.util.concurrent.TimeUnit v6;
java.io.InputStream v9;
v0 := @parameter0: io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime;
v1 = null;
label1:
v2 = new java.lang.ProcessBuilder;
v3 = newarray (java.lang.String)[2];
v4 = virtualinvoke v0.<io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime: java.lang.String getExecutableName()>();
v3[0] = v4;
v3[1] = "--version";
specialinvoke v2.<java.lang.ProcessBuilder: void <init>(java.lang.String[])>(v3);
v5 = virtualinvoke v2.<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectErrorStream(boolean)>(1);
v1 = virtualinvoke v5.<java.lang.ProcessBuilder: java.lang.Process start()>();
v6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
v7 = virtualinvoke v1.<java.lang.Process: boolean waitFor(long,java.util.concurrent.TimeUnit)>(10L, v6);
if v7 == 0 goto label3;
v8 = new java.lang.String;
v9 = virtualinvoke v1.<java.lang.Process: java.io.InputStream getInputStream()>();
v10 = virtualinvoke v9.<java.io.InputStream: byte[] readAllBytes()>();
v11 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;
specialinvoke v8.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(v10, v11);
label2:
virtualinvoke v1.<java.lang.Process: void destroy()>();
return v8;
label3:
v12 = <io.quarkus.runtime.util.ContainerRuntimeUtil: org.jboss.logging.Logger log>;
v13 = virtualinvoke v0.<io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime: java.lang.String getExecutableName()>();
v14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);
virtualinvoke v12.<org.jboss.logging.Logger: void debugf(java.lang.String,java.lang.Object,java.lang.Object)>("Failure. It took command %s more than %d seconds to execute.", v13, v14);
label4:
virtualinvoke v1.<java.lang.Process: void destroy()>();
return "";
label5:
v15 := @caughtexception;
v16 = <io.quarkus.runtime.util.ContainerRuntimeUtil: org.jboss.logging.Logger log>;
v17 = virtualinvoke v0.<io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime: java.lang.String getExecutableName()>();
virtualinvoke v16.<org.jboss.logging.Logger: void debugf(java.lang.Throwable,java.lang.String,java.lang.Object)>(v15, "Failure to read version output from %s", v17);
label6:
if v1 == null goto label7;
virtualinvoke v1.<java.lang.Process: void destroy()>();
label7:
return "";
label8:
v18 := @caughtexception;
if v1 == null goto label9;
virtualinvoke v1.<java.lang.Process: void destroy()>();
label9:
throw v18;
catch java.io.IOException from label1 to label2 with label5;
catch java.lang.InterruptedException from label1 to label2 with label5;
catch java.io.IOException from label3 to label4 with label5;
catch java.lang.InterruptedException from label3 to label4 with label5;
catch java.lang.Throwable from label1 to label2 with label8;
catch java.lang.Throwable from label3 to label4 with label8;
catch java.lang.Throwable from label5 to label6 with label8;
}
private static boolean getRootlessStateFor(io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime)
{
java.lang.Integer v10;
java.util.stream.Collector v19;
boolean v24;
java.lang.Process v1;
java.util.function.Predicate v22;
java.lang.Exception v28;
java.util.List v15, v30, v8;
java.util.stream.Stream v17, v23;
java.lang.Throwable v25, v26, v27, v32;
org.jboss.logging.Logger v14, v29, v7;
java.lang.String[] v4;
int v6;
java.lang.ProcessBuilder v2, v3;
java.lang.String v16, v18, v31, v5, v9;
io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime v0, v21;
java.io.InputStreamReader v12;
java.lang.Object v20;
java.io.BufferedReader v13;
java.io.InputStream v11;
v0 := @parameter0: io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime;
v1 = null;
v2 = null;
label01:
v3 = new java.lang.ProcessBuilder;
v4 = newarray (java.lang.String)[2];
v5 = virtualinvoke v0.<io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime: java.lang.String getExecutableName()>();
v4[0] = v5;
v4[1] = "info";
specialinvoke v3.<java.lang.ProcessBuilder: void <init>(java.lang.String[])>(v4);
v2 = virtualinvoke v3.<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectErrorStream(boolean)>(1);
v1 = virtualinvoke v2.<java.lang.ProcessBuilder: java.lang.Process start()>();
v6 = virtualinvoke v1.<java.lang.Process: int waitFor()>();
if v6 == 0 goto label02;
v7 = <io.quarkus.runtime.util.ContainerRuntimeUtil: org.jboss.logging.Logger log>;
v8 = virtualinvoke v2.<java.lang.ProcessBuilder: java.util.List command()>();
v9 = staticinvoke <java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(" ", v8);
v10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v6);
virtualinvoke v7.<org.jboss.logging.Logger: void warnf(java.lang.String,java.lang.Object,java.lang.Object)>("Command \"%s\" exited with error code %d. Rootless container runtime detection might not be reliable or the container service is not running at all.", v9, v10);
label02:
v11 = virtualinvoke v1.<java.lang.Process: java.io.InputStream getInputStream()>();
label03:
v12 = new java.io.InputStreamReader;
specialinvoke v12.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(v11);
label04:
v13 = new java.io.BufferedReader;
specialinvoke v13.<java.io.BufferedReader: void <init>(java.io.Reader)>(v12);
label05:
if v6 == 0 goto label10;
v14 = <io.quarkus.runtime.util.ContainerRuntimeUtil: org.jboss.logging.Logger log>;
v15 = virtualinvoke v2.<java.lang.ProcessBuilder: java.util.List command()>();
v16 = staticinvoke <java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(" ", v15);
v17 = virtualinvoke v13.<java.io.BufferedReader: java.util.stream.Stream lines()>();
v18 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();
v19 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>(v18);
v20 = interfaceinvoke v17.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v19);
virtualinvoke v14.<org.jboss.logging.Logger: void debugf(java.lang.String,java.lang.Object,java.lang.Object)>("Command \"%s\" output: %s", v16, v20);
label06:
virtualinvoke v13.<java.io.BufferedReader: void close()>();
label07:
virtualinvoke v12.<java.io.InputStreamReader: void close()>();
label08:
if v11 == null goto label09;
virtualinvoke v11.<java.io.InputStream: void close()>();
label09:
virtualinvoke v1.<java.lang.Process: void destroy()>();
return 0;
label10:
v21 = <io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime: io.quarkus.runtime.util.ContainerRuntimeUtil$ContainerRuntime DOCKER>;
if v0 != v21 goto label11;
v22 = staticinvoke <io.quarkus.runtime.util.ContainerRuntimeUtil$lambda_getRootlessStateFor_0__3034: java.util.function.Predicate bootstrap$()>();
goto label12;
label11:
v22 = staticinvoke <io.quarkus.runtime.util.ContainerRuntimeUtil$lambda_getRootlessStateFor_1__3033: java.util.function.Predicate bootstrap$()>();
label12:
v23 = virtualinvoke v13.<java.io.BufferedReader: java.util.stream.Stream lines()>();
v24 = interfaceinvoke v23.<java.util.stream.Stream: boolean anyMatch(java.util.function.Predicate)>(v22);
label13:
virtualinvoke v13.<java.io.BufferedReader: void close()>();
label14:
virtualinvoke v12.<java.io.InputStreamReader: void close()>();
label15:
if v11 == null goto label16;
virtualinvoke v11.<java.io.InputStream: void close()>();
label16:
virtualinvoke v1.<java.lang.Process: void destroy()>();
return v24;
label17:
v25 := @caughtexception;
throw v25;
label18:
v26 := @caughtexception;
throw v26;
label19:
v27 := @caughtexception;
throw v27;
label20:
v28 := @caughtexception;
v29 = <io.quarkus.runtime.util.ContainerRuntimeUtil: org.jboss.logging.Logger log>;
v30 = virtualinvoke v2.<java.lang.ProcessBuilder: java.util.List command()>();
v31 = staticinvoke <java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(" ", v30);
virtualinvoke v29.<org.jboss.logging.Logger: void debugf(java.lang.Throwable,java.lang.String,java.lang.Object)>(v28, "Failure to read info output from %s", v31);
label21:
if v1 == null goto label22;
virtualinvoke v1.<java.lang.Process: void destroy()>();
label22:
return 0;
label23:
v32 := @caughtexception;
if v1 == null goto label24;
virtualinvoke v1.<java.lang.Process: void destroy()>();
label24:
throw v32;
catch java.lang.Throwable from label05 to label06 with label17;
catch java.lang.Throwable from label10 to label13 with label17;
catch java.lang.Throwable from label04 to label07 with label18;
catch java.lang.Throwable from label10 to label14 with label18;
catch java.lang.Throwable from label03 to label08 with label19;
catch java.lang.Throwable from label10 to label15 with label19;
catch java.io.IOException from label01 to label09 with label20;
catch java.lang.InterruptedException from label01 to label09 with label20;
catch java.io.IOException from label10 to label16 with label20;
catch java.lang.InterruptedException from label10 to label16 with label20;
catch java.lang.Throwable from label01 to label09 with label23;
catch java.lang.Throwable from label10 to label16 with label23;
catch java.lang.Throwable from label17 to label21 with label23;
}
static void <clinit>()
{
org.jboss.logging.Logger v0;
java.util.Optional v3;
java.lang.Object v2, v4;
java.util.regex.Pattern v5;
org.eclipse.microprofile.config.Config v1;
v0 = staticinvoke <org.jboss.logging.Logger: org.jboss.logging.Logger getLogger(java.lang.Class)>(class "Lio/quarkus/runtime/util/ContainerRuntimeUtil;");
<io.quarkus.runtime.util.ContainerRuntimeUtil: org.jboss.logging.Logger log> = v0;
v1 = staticinvoke <org.eclipse.microprofile.config.ConfigProvider: org.eclipse.microprofile.config.Config getConfig()>();
v2 = interfaceinvoke v1.<org.eclipse.microprofile.config.Config: java.lang.Object unwrap(java.lang.Class)>(class "Lio/smallrye/config/SmallRyeConfig;");
v3 = virtualinvoke v2.<io.smallrye.config.SmallRyeConfig: java.util.Optional getOptionalValue(java.lang.String,java.lang.Class)>("quarkus.native.container-runtime", class "Ljava/lang/String;");
v4 = virtualinvoke v3.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(null);
<io.quarkus.runtime.util.ContainerRuntimeUtil: java.lang.String CONTAINER_EXECUTABLE> = v4;
v5 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>("^podman(?:\\.exe)? version.*", 32);
<io.quarkus.runtime.util.ContainerRuntimeUtil: java.util.regex.Pattern PODMAN_PATTERN> = v5;
return;
}
}