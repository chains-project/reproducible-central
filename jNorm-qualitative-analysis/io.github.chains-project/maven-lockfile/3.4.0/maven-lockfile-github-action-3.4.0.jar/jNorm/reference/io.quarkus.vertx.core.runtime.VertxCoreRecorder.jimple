public class io.quarkus.vertx.core.runtime.VertxCoreRecorder extends java.lang.Object
{
private static final org.jboss.logging.Logger LOGGER;
public static final java.lang.String VERTX_CACHE;
static volatile io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxSupplier vertx;
static volatile int blockingThreadPoolSize;
private static volatile java.lang.String webDeploymentId;
private static final java.util.Set devModeThreads;
private static volatile java.lang.ClassLoader currentDevModeNewThreadCreationClassLoader;
public void <init>()
{
io.quarkus.vertx.core.runtime.VertxCoreRecorder v0;
v0 := @this: io.quarkus.vertx.core.runtime.VertxCoreRecorder;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public java.util.function.Supplier configureVertx(io.quarkus.vertx.core.runtime.config.VertxConfiguration, io.quarkus.runtime.LaunchMode, io.quarkus.runtime.ShutdownContext, java.util.List, java.util.concurrent.ExecutorService)
{
io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxSupplier v10, v11, v14, v7, v9;
io.vertx.core.Vertx v12;
io.quarkus.runtime.LaunchMode v2, v6;
io.quarkus.vertx.core.runtime.VertxCoreRecorder v0;
io.quarkus.vertx.core.runtime.config.VertxConfiguration v1;
java.util.List v4;
io.quarkus.vertx.core.runtime.VertxCoreRecorder$1 v8;
io.quarkus.runtime.ShutdownContext v3;
java.util.concurrent.ExecutorService v5;
io.quarkus.vertx.core.runtime.VertxCoreRecorder$2 v13;
v0 := @this: io.quarkus.vertx.core.runtime.VertxCoreRecorder;
v1 := @parameter0: io.quarkus.vertx.core.runtime.config.VertxConfiguration;
v2 := @parameter1: io.quarkus.runtime.LaunchMode;
v3 := @parameter2: io.quarkus.runtime.ShutdownContext;
v4 := @parameter3: java.util.List;
v5 := @parameter4: java.util.concurrent.ExecutorService;
<io.quarkus.vertx.core.runtime.QuarkusExecutorFactory: java.util.concurrent.ExecutorService sharedExecutor> = v5;
v6 = <io.quarkus.runtime.LaunchMode: io.quarkus.runtime.LaunchMode DEVELOPMENT>;
if v2 == v6 goto label1;
v7 = new io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxSupplier;
specialinvoke v7.<io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxSupplier: void <init>(io.quarkus.runtime.LaunchMode,io.quarkus.vertx.core.runtime.config.VertxConfiguration,java.util.List,io.quarkus.runtime.ShutdownContext)>(v2, v1, v4, v3);
<io.quarkus.vertx.core.runtime.VertxCoreRecorder: io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxSupplier vertx> = v7;
v8 = new io.quarkus.vertx.core.runtime.VertxCoreRecorder$1;
specialinvoke v8.<io.quarkus.vertx.core.runtime.VertxCoreRecorder$1: void <init>(io.quarkus.vertx.core.runtime.VertxCoreRecorder)>(v0);
interfaceinvoke v3.<io.quarkus.runtime.ShutdownContext: void addLastShutdownTask(java.lang.Runnable)>(v8);
goto label4;
label1:
v9 = <io.quarkus.vertx.core.runtime.VertxCoreRecorder: io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxSupplier vertx>;
if v9 != null goto label2;
v10 = new io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxSupplier;
specialinvoke v10.<io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxSupplier: void <init>(io.quarkus.runtime.LaunchMode,io.quarkus.vertx.core.runtime.config.VertxConfiguration,java.util.List,io.quarkus.runtime.ShutdownContext)>(v2, v1, v4, v3);
<io.quarkus.vertx.core.runtime.VertxCoreRecorder: io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxSupplier vertx> = v10;
goto label3;
label2:
v11 = <io.quarkus.vertx.core.runtime.VertxCoreRecorder: io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxSupplier vertx>;
v12 = v11.<io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxSupplier: io.vertx.core.Vertx v>;
if v12 == null goto label3;
specialinvoke v0.<io.quarkus.vertx.core.runtime.VertxCoreRecorder: void tryCleanTccl()>();
label3:
v13 = new io.quarkus.vertx.core.runtime.VertxCoreRecorder$2;
specialinvoke v13.<io.quarkus.vertx.core.runtime.VertxCoreRecorder$2: void <init>(io.quarkus.vertx.core.runtime.VertxCoreRecorder)>(v0);
interfaceinvoke v3.<io.quarkus.runtime.ShutdownContext: void addLastShutdownTask(java.lang.Runnable)>(v13);
label4:
v14 = <io.quarkus.vertx.core.runtime.VertxCoreRecorder: io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxSupplier vertx>;
return v14;
}
private void tryCleanTccl()
{
java.lang.Throwable v8;
java.util.Iterator v5;
java.util.Set v3, v4;
io.quarkus.vertx.core.runtime.VertxCoreRecorder v0;
java.lang.Thread v1;
java.lang.Object v7;
java.lang.ClassLoader v2;
boolean v6;
v0 := @this: io.quarkus.vertx.core.runtime.VertxCoreRecorder;
v1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v2 = virtualinvoke v1.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
v3 = <io.quarkus.vertx.core.runtime.VertxCoreRecorder: java.util.Set devModeThreads>;
entermonitor v3;
label1:
<io.quarkus.vertx.core.runtime.VertxCoreRecorder: java.lang.ClassLoader currentDevModeNewThreadCreationClassLoader> = v2;
v4 = <io.quarkus.vertx.core.runtime.VertxCoreRecorder: java.util.Set devModeThreads>;
v5 = interfaceinvoke v4.<java.util.Set: java.util.Iterator iterator()>();
label2:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label3;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v7.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(v2);
goto label2;
label3:
exitmonitor v3;
label4:
goto label6;
label5:
v8 := @caughtexception;
exitmonitor v3;
throw v8;
label6:
return;
catch java.lang.Throwable from label1 to label4 with label5;
}
public io.quarkus.runtime.IOThreadDetector detector()
{
io.quarkus.vertx.core.runtime.VertxCoreRecorder$3 v1;
io.quarkus.vertx.core.runtime.VertxCoreRecorder v0;
v0 := @this: io.quarkus.vertx.core.runtime.VertxCoreRecorder;
v1 = new io.quarkus.vertx.core.runtime.VertxCoreRecorder$3;
specialinvoke v1.<io.quarkus.vertx.core.runtime.VertxCoreRecorder$3: void <init>(io.quarkus.vertx.core.runtime.VertxCoreRecorder)>(v0);
return v1;
}
static void shutdownDevMode()
{
java.lang.Throwable v10, v13, v7;
io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxSupplier v0, v2;
io.vertx.core.Vertx v3;
java.util.Set v11, v12, v5, v6;
java.lang.RuntimeException v9;
io.quarkus.vertx.core.runtime.VertxCoreRecorder$4 v4;
java.util.concurrent.CountDownLatch v1;
java.lang.InterruptedException v8;
v0 = <io.quarkus.vertx.core.runtime.VertxCoreRecorder: io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxSupplier vertx>;
if v0 == null goto label12;
v1 = new java.util.concurrent.CountDownLatch;
specialinvoke v1.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);
v2 = <io.quarkus.vertx.core.runtime.VertxCoreRecorder: io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxSupplier vertx>;
v3 = virtualinvoke v2.<io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxSupplier: io.vertx.core.Vertx get()>();
v4 = new io.quarkus.vertx.core.runtime.VertxCoreRecorder$4;
specialinvoke v4.<io.quarkus.vertx.core.runtime.VertxCoreRecorder$4: void <init>(java.util.concurrent.CountDownLatch)>(v1);
interfaceinvoke v3.<io.vertx.core.Vertx: void close(io.vertx.core.Handler)>(v4);
label01:
virtualinvoke v1.<java.util.concurrent.CountDownLatch: void await()>();
label02:
v5 = <io.quarkus.vertx.core.runtime.VertxCoreRecorder: java.util.Set devModeThreads>;
entermonitor v5;
label03:
v6 = <io.quarkus.vertx.core.runtime.VertxCoreRecorder: java.util.Set devModeThreads>;
interfaceinvoke v6.<java.util.Set: void clear()>();
<io.quarkus.vertx.core.runtime.VertxCoreRecorder: java.lang.ClassLoader currentDevModeNewThreadCreationClassLoader> = null;
exitmonitor v5;
label04:
goto label12;
label05:
v7 := @caughtexception;
exitmonitor v5;
throw v7;
label06:
v8 := @caughtexception;
v9 = new java.lang.RuntimeException;
specialinvoke v9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(v8);
throw v9;
label07:
v10 := @caughtexception;
v11 = <io.quarkus.vertx.core.runtime.VertxCoreRecorder: java.util.Set devModeThreads>;
entermonitor v11;
label08:
v12 = <io.quarkus.vertx.core.runtime.VertxCoreRecorder: java.util.Set devModeThreads>;
interfaceinvoke v12.<java.util.Set: void clear()>();
<io.quarkus.vertx.core.runtime.VertxCoreRecorder: java.lang.ClassLoader currentDevModeNewThreadCreationClassLoader> = null;
exitmonitor v11;
label09:
goto label11;
label10:
v13 := @caughtexception;
exitmonitor v11;
throw v13;
label11:
throw v10;
label12:
return;
catch java.lang.Throwable from label03 to label04 with label05;
catch java.lang.InterruptedException from label01 to label02 with label06;
catch java.lang.Throwable from label01 to label02 with label07;
catch java.lang.Throwable from label08 to label09 with label10;
}
public static java.util.function.Supplier getVertx()
{
io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxSupplier v0;
v0 = <io.quarkus.vertx.core.runtime.VertxCoreRecorder: io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxSupplier vertx>;
return v0;
}
public static io.vertx.core.Vertx initialize(io.quarkus.vertx.core.runtime.config.VertxConfiguration, io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxOptionsCustomizer, io.quarkus.runtime.ShutdownContext, io.quarkus.runtime.LaunchMode)
{
io.quarkus.vertx.core.runtime.VertxMDC v24;
io.quarkus.runtime.LaunchMode v3;
io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxOptionsCustomizer v1;
java.util.concurrent.CompletableFuture v10;
io.quarkus.vertx.core.runtime.config.VertxConfiguration v0;
io.quarkus.vertx.core.runtime.VertxCoreRecorder$5 v6;
io.quarkus.vertx.core.runtime.VertxCoreRecorder$7 v23;
io.quarkus.vertx.core.runtime.VertxCoreRecorder$6 v16;
io.quarkus.runtime.ShutdownContext v2;
boolean v9;
io.vertx.core.Vertx v25;
io.vertx.core.VertxOptions v4;
io.vertx.core.impl.VertxBuilder v11, v12, v14, v15, v18, v19, v21, v22;
java.util.Optional v5;
java.lang.Object v17;
io.quarkus.vertx.core.runtime.QuarkusExecutorFactory v13, v20;
io.quarkus.vertx.core.runtime.config.ClusterConfiguration v7, v8;
v0 := @parameter0: io.quarkus.vertx.core.runtime.config.VertxConfiguration;
v1 := @parameter1: io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxOptionsCustomizer;
v2 := @parameter2: io.quarkus.runtime.ShutdownContext;
v3 := @parameter3: io.quarkus.runtime.LaunchMode;
v4 = new io.vertx.core.VertxOptions;
specialinvoke v4.<io.vertx.core.VertxOptions: void <init>()>();
if v0 == null goto label1;
staticinvoke <io.quarkus.vertx.core.runtime.VertxCoreRecorder: io.vertx.core.VertxOptions convertToVertxOptions(io.quarkus.vertx.core.runtime.config.VertxConfiguration,io.vertx.core.VertxOptions,boolean,io.quarkus.runtime.ShutdownContext)>(v0, v4, 1, v2);
label1:
if v1 == null goto label2;
virtualinvoke v1.<io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxOptionsCustomizer: io.vertx.core.VertxOptions customize(io.vertx.core.VertxOptions)>(v4);
label2:
v5 = staticinvoke <io.quarkus.vertx.core.runtime.VertxCoreRecorder: java.util.Optional setupThreadFactoryTccl(io.quarkus.runtime.LaunchMode)>(v3);
v6 = new io.quarkus.vertx.core.runtime.VertxCoreRecorder$5;
specialinvoke v6.<io.quarkus.vertx.core.runtime.VertxCoreRecorder$5: void <init>(io.quarkus.runtime.LaunchMode,java.util.Optional)>(v3, v5);
if v0 == null goto label3;
v7 = v0.<io.quarkus.vertx.core.runtime.config.VertxConfiguration: io.quarkus.vertx.core.runtime.config.ClusterConfiguration cluster>;
if v7 == null goto label3;
v8 = v0.<io.quarkus.vertx.core.runtime.config.VertxConfiguration: io.quarkus.vertx.core.runtime.config.ClusterConfiguration cluster>;
v9 = v8.<io.quarkus.vertx.core.runtime.config.ClusterConfiguration: boolean clustered>;
if v9 == 0 goto label3;
v10 = new java.util.concurrent.CompletableFuture;
specialinvoke v10.<java.util.concurrent.CompletableFuture: void <init>()>();
v11 = new io.vertx.core.impl.VertxBuilder;
specialinvoke v11.<io.vertx.core.impl.VertxBuilder: void <init>(io.vertx.core.VertxOptions)>(v4);
v12 = virtualinvoke v11.<io.vertx.core.impl.VertxBuilder: io.vertx.core.impl.VertxBuilder threadFactory(io.vertx.core.spi.VertxThreadFactory)>(v6);
v13 = new io.quarkus.vertx.core.runtime.QuarkusExecutorFactory;
specialinvoke v13.<io.quarkus.vertx.core.runtime.QuarkusExecutorFactory: void <init>(io.quarkus.vertx.core.runtime.config.VertxConfiguration,io.quarkus.runtime.LaunchMode)>(v0, v3);
v14 = virtualinvoke v12.<io.vertx.core.impl.VertxBuilder: io.vertx.core.impl.VertxBuilder executorServiceFactory(io.vertx.core.spi.ExecutorServiceFactory)>(v13);
v15 = virtualinvoke v14.<io.vertx.core.impl.VertxBuilder: io.vertx.core.impl.VertxBuilder init()>();
v16 = new io.quarkus.vertx.core.runtime.VertxCoreRecorder$6;
specialinvoke v16.<io.quarkus.vertx.core.runtime.VertxCoreRecorder$6: void <init>(java.util.concurrent.CompletableFuture)>(v10);
virtualinvoke v15.<io.vertx.core.impl.VertxBuilder: void clusteredVertx(io.vertx.core.Handler)>(v16);
v17 = virtualinvoke v10.<java.util.concurrent.CompletableFuture: java.lang.Object join()>();
goto label4;
label3:
v18 = new io.vertx.core.impl.VertxBuilder;
specialinvoke v18.<io.vertx.core.impl.VertxBuilder: void <init>(io.vertx.core.VertxOptions)>(v4);
v19 = virtualinvoke v18.<io.vertx.core.impl.VertxBuilder: io.vertx.core.impl.VertxBuilder threadFactory(io.vertx.core.spi.VertxThreadFactory)>(v6);
v20 = new io.quarkus.vertx.core.runtime.QuarkusExecutorFactory;
specialinvoke v20.<io.quarkus.vertx.core.runtime.QuarkusExecutorFactory: void <init>(io.quarkus.vertx.core.runtime.config.VertxConfiguration,io.quarkus.runtime.LaunchMode)>(v0, v3);
v21 = virtualinvoke v19.<io.vertx.core.impl.VertxBuilder: io.vertx.core.impl.VertxBuilder executorServiceFactory(io.vertx.core.spi.ExecutorServiceFactory)>(v20);
v22 = virtualinvoke v21.<io.vertx.core.impl.VertxBuilder: io.vertx.core.impl.VertxBuilder init()>();
v17 = virtualinvoke v22.<io.vertx.core.impl.VertxBuilder: io.vertx.core.Vertx vertx()>();
label4:
v23 = new io.quarkus.vertx.core.runtime.VertxCoreRecorder$7;
specialinvoke v23.<io.quarkus.vertx.core.runtime.VertxCoreRecorder$7: void <init>()>();
interfaceinvoke v17.<io.vertx.core.Vertx: io.vertx.core.Vertx exceptionHandler(io.vertx.core.Handler)>(v23);
v24 = <io.quarkus.vertx.core.runtime.VertxMDC: io.quarkus.vertx.core.runtime.VertxMDC INSTANCE>;
staticinvoke <io.quarkus.vertx.mdc.provider.LateBoundMDCProvider: void setMDCProviderDelegate(org.jboss.logmanager.MDCProvider)>(v24);
v25 = staticinvoke <io.quarkus.vertx.core.runtime.VertxCoreRecorder: io.vertx.core.Vertx logVertxInitialization(io.vertx.core.Vertx)>(v17);
return v25;
}
private static java.util.Optional setupThreadFactoryTccl(io.quarkus.runtime.LaunchMode)
{
java.lang.Thread v2, v5;
io.quarkus.runtime.LaunchMode v0, v1;
java.util.Optional v4;
java.lang.ClassLoader v3, v6;
v0 := @parameter0: io.quarkus.runtime.LaunchMode;
v1 = <io.quarkus.runtime.LaunchMode: io.quarkus.runtime.LaunchMode DEVELOPMENT>;
if v0 != v1 goto label1;
v2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v3 = virtualinvoke v2.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
<io.quarkus.vertx.core.runtime.VertxCoreRecorder: java.lang.ClassLoader currentDevModeNewThreadCreationClassLoader> = v3;
v4 = staticinvoke <java.util.Optional: java.util.Optional empty()>();
goto label2;
label1:
v5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v6 = virtualinvoke v5.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
v4 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>(v6);
label2:
return v4;
}
private static io.vertx.core.impl.VertxThread createVertxThread(java.lang.Runnable, java.lang.String, boolean, long, java.util.concurrent.TimeUnit, io.quarkus.runtime.LaunchMode, java.util.Optional)
{
java.lang.Throwable v12;
io.vertx.core.impl.VertxThread v8;
io.vertx.core.spi.VertxThreadFactory v7;
io.quarkus.runtime.LaunchMode v5, v9;
java.util.Set v10, v11;
long v3;
java.lang.Runnable v0;
java.util.concurrent.TimeUnit v4;
java.util.Optional v6;
java.lang.Object v13;
java.lang.String v1;
boolean v2;
v0 := @parameter0: java.lang.Runnable;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: boolean;
v3 := @parameter3: long;
v4 := @parameter4: java.util.concurrent.TimeUnit;
v5 := @parameter5: io.quarkus.runtime.LaunchMode;
v6 := @parameter6: java.util.Optional;
v7 = <io.vertx.core.spi.VertxThreadFactory: io.vertx.core.spi.VertxThreadFactory INSTANCE>;
v8 = interfaceinvoke v7.<io.vertx.core.spi.VertxThreadFactory: io.vertx.core.impl.VertxThread newVertxThread(java.lang.Runnable,java.lang.String,boolean,long,java.util.concurrent.TimeUnit)>(v0, v1, v2, v3, v4);
v9 = <io.quarkus.runtime.LaunchMode: io.quarkus.runtime.LaunchMode DEVELOPMENT>;
if v5 != v9 goto label4;
v10 = <io.quarkus.vertx.core.runtime.VertxCoreRecorder: java.util.Set devModeThreads>;
entermonitor v10;
label1:
staticinvoke <io.quarkus.vertx.core.runtime.VertxCoreRecorder: void setNewThreadTccl(io.vertx.core.impl.VertxThread)>(v8);
v11 = <io.quarkus.vertx.core.runtime.VertxCoreRecorder: java.util.Set devModeThreads>;
interfaceinvoke v11.<java.util.Set: boolean add(java.lang.Object)>(v8);
exitmonitor v10;
label2:
goto label5;
label3:
v12 := @caughtexception;
exitmonitor v10;
throw v12;
label4:
v13 = virtualinvoke v6.<java.util.Optional: java.lang.Object get()>();
virtualinvoke v8.<io.vertx.core.impl.VertxThread: void setContextClassLoader(java.lang.ClassLoader)>(v13);
label5:
return v8;
catch java.lang.Throwable from label1 to label2 with label3;
}
private static io.vertx.core.Vertx logVertxInitialization(io.vertx.core.Vertx)
{
org.jboss.logging.Logger v1;
io.vertx.core.Vertx v0;
java.lang.Boolean v3;
boolean v2;
v0 := @parameter0: io.vertx.core.Vertx;
v1 = <io.quarkus.vertx.core.runtime.VertxCoreRecorder: org.jboss.logging.Logger LOGGER>;
v2 = interfaceinvoke v0.<io.vertx.core.Vertx: boolean isNativeTransportEnabled()>();
v3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v2);
virtualinvoke v1.<org.jboss.logging.Logger: void debugf(java.lang.String,java.lang.Object)>("Vertx has Native Transport Enabled: %s", v3);
return v0;
}
private static io.vertx.core.VertxOptions convertToVertxOptions(io.quarkus.vertx.core.runtime.config.VertxConfiguration, io.vertx.core.VertxOptions, boolean, io.quarkus.runtime.ShutdownContext)
{
io.quarkus.vertx.core.runtime.config.VertxConfiguration v0;
java.util.Locale v24;
java.time.Duration v39, v46, v49, v52;
boolean v15, v16, v17, v18, v19, v2, v20, v26, v27, v28, v4, v42, v54, v6, v8;
io.vertx.core.VertxOptions v1;
org.jboss.logging.Logger v21, v29, v32;
long v40, v47, v50, v53;
java.util.OptionalInt v41, v43;
io.quarkus.vertx.core.runtime.VertxCoreRecorder$8 v35;
int v36, v37, v38, v44, v45;
java.lang.String v10, v12, v13, v14, v22, v23, v25, v30, v33, v34;
io.quarkus.runtime.ShutdownContext v3;
io.vertx.core.file.FileSystemOptions v5, v7, v9;
java.io.File v11, v31;
java.util.concurrent.TimeUnit v48, v51;
v0 := @parameter0: io.quarkus.vertx.core.runtime.config.VertxConfiguration;
v1 := @parameter1: io.vertx.core.VertxOptions;
v2 := @parameter2: boolean;
v3 := @parameter3: io.quarkus.runtime.ShutdownContext;
v4 = v0.<io.quarkus.vertx.core.runtime.config.VertxConfiguration: boolean useAsyncDNS>;
if v4 != 0 goto label01;
staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("vertx.disableDnsResolver", "true");
label01:
staticinvoke <io.quarkus.vertx.core.runtime.VertxCoreRecorder: void setAddressResolverOptions(io.quarkus.vertx.core.runtime.config.VertxConfiguration,io.vertx.core.VertxOptions)>(v0, v1);
if v2 == 0 goto label02;
staticinvoke <io.quarkus.vertx.core.runtime.VertxCoreRecorder: void setEventBusOptions(io.quarkus.vertx.core.runtime.config.VertxConfiguration,io.vertx.core.VertxOptions)>(v0, v1);
staticinvoke <io.quarkus.vertx.core.runtime.VertxCoreRecorder: void initializeClusterOptions(io.quarkus.vertx.core.runtime.config.VertxConfiguration,io.vertx.core.VertxOptions)>(v0, v1);
label02:
v5 = new io.vertx.core.file.FileSystemOptions;
specialinvoke v5.<io.vertx.core.file.FileSystemOptions: void <init>()>();
v6 = v0.<io.quarkus.vertx.core.runtime.config.VertxConfiguration: boolean caching>;
v7 = virtualinvoke v5.<io.vertx.core.file.FileSystemOptions: io.vertx.core.file.FileSystemOptions setFileCachingEnabled(boolean)>(v6);
v8 = v0.<io.quarkus.vertx.core.runtime.config.VertxConfiguration: boolean classpathResolving>;
v9 = virtualinvoke v7.<io.vertx.core.file.FileSystemOptions: io.vertx.core.file.FileSystemOptions setClassPathResolvingEnabled(boolean)>(v8);
v10 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("vertx.cacheDirBase");
if v10 != null goto label09;
v11 = new java.io.File;
v12 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("java.io.tmpdir", ".");
v13 = <java.io.File: java.lang.String separator>;
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v12, v13) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001vertx-cache");
specialinvoke v11.<java.io.File: void <init>(java.lang.String)>(v14);
v15 = v0.<io.quarkus.vertx.core.runtime.config.VertxConfiguration: boolean caching>;
if v15 != 0 goto label03;
v16 = v0.<io.quarkus.vertx.core.runtime.config.VertxConfiguration: boolean classpathResolving>;
if v16 == 0 goto label04;
label03:
v17 = 1;
goto label05;
label04:
v17 = 0;
label05:
v18 = v17;
v19 = virtualinvoke v11.<java.io.File: boolean isDirectory()>();
if v19 != 0 goto label08;
if v17 == 0 goto label08;
v20 = virtualinvoke v11.<java.io.File: boolean mkdirs()>();
if v20 != 0 goto label06;
v21 = <io.quarkus.vertx.core.runtime.VertxCoreRecorder: org.jboss.logging.Logger LOGGER>;
v22 = virtualinvoke v11.<java.io.File: java.lang.String getAbsolutePath()>();
virtualinvoke v21.<org.jboss.logging.Logger: void warnf(java.lang.String,java.lang.Object)>("Unable to create Vert.x cache directory : %s", v22);
label06:
v23 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");
v24 = <java.util.Locale: java.util.Locale ENGLISH>;
v25 = virtualinvoke v23.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>(v24);
v26 = virtualinvoke v25.<java.lang.String: boolean contains(java.lang.CharSequence)>("windows");
if v26 != 0 goto label08;
v27 = virtualinvoke v11.<java.io.File: boolean setReadable(boolean,boolean)>(1, 0);
if v27 == 0 goto label07;
v28 = virtualinvoke v11.<java.io.File: boolean setWritable(boolean,boolean)>(1, 0);
if v28 != 0 goto label08;
label07:
v29 = <io.quarkus.vertx.core.runtime.VertxCoreRecorder: org.jboss.logging.Logger LOGGER>;
v30 = virtualinvoke v11.<java.io.File: java.lang.String getAbsolutePath()>();
virtualinvoke v29.<org.jboss.logging.Logger: void warnf(java.lang.String,java.lang.Object)>("Unable to make the Vert.x cache directory (%s) world readable and writable", v30);
label08:
if v18 == 0 goto label09;
v31 = staticinvoke <io.quarkus.vertx.core.runtime.VertxCoreRecorder: java.io.File getRandomDirectory(java.io.File)>(v11);
v32 = <io.quarkus.vertx.core.runtime.VertxCoreRecorder: org.jboss.logging.Logger LOGGER>;
v33 = virtualinvoke v31.<java.io.File: java.lang.String getAbsolutePath()>();
virtualinvoke v32.<org.jboss.logging.Logger: void debugf(java.lang.String,java.lang.Object)>("Vert.x Cache configured to: %s", v33);
v34 = virtualinvoke v31.<java.io.File: java.lang.String getAbsolutePath()>();
virtualinvoke v9.<io.vertx.core.file.FileSystemOptions: io.vertx.core.file.FileSystemOptions setFileCacheDir(java.lang.String)>(v34);
if v3 == null goto label09;
v35 = new io.quarkus.vertx.core.runtime.VertxCoreRecorder$8;
specialinvoke v35.<io.quarkus.vertx.core.runtime.VertxCoreRecorder$8: void <init>(java.io.File)>(v31);
interfaceinvoke v3.<io.quarkus.runtime.ShutdownContext: void addLastShutdownTask(java.lang.Runnable)>(v35);
label09:
virtualinvoke v1.<io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setFileSystemOptions(io.vertx.core.file.FileSystemOptions)>(v9);
v36 = v0.<io.quarkus.vertx.core.runtime.config.VertxConfiguration: int workerPoolSize>;
virtualinvoke v1.<io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setWorkerPoolSize(int)>(v36);
v37 = v0.<io.quarkus.vertx.core.runtime.config.VertxConfiguration: int internalBlockingPoolSize>;
virtualinvoke v1.<io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setInternalBlockingPoolSize(int)>(v37);
v38 = v0.<io.quarkus.vertx.core.runtime.config.VertxConfiguration: int internalBlockingPoolSize>;
<io.quarkus.vertx.core.runtime.VertxCoreRecorder: int blockingThreadPoolSize> = v38;
v39 = v0.<io.quarkus.vertx.core.runtime.config.VertxConfiguration: java.time.Duration warningExceptionTime>;
v40 = virtualinvoke v39.<java.time.Duration: long toMillis()>();
virtualinvoke v1.<io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setBlockedThreadCheckInterval(long)>(v40);
v41 = v0.<io.quarkus.vertx.core.runtime.config.VertxConfiguration: java.util.OptionalInt eventLoopsPoolSize>;
v42 = virtualinvoke v41.<java.util.OptionalInt: boolean isPresent()>();
if v42 == 0 goto label10;
v43 = v0.<io.quarkus.vertx.core.runtime.config.VertxConfiguration: java.util.OptionalInt eventLoopsPoolSize>;
v44 = virtualinvoke v43.<java.util.OptionalInt: int getAsInt()>();
virtualinvoke v1.<io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setEventLoopPoolSize(int)>(v44);
goto label11;
label10:
v45 = staticinvoke <io.quarkus.vertx.core.runtime.VertxCoreRecorder: int calculateDefaultIOThreads()>();
virtualinvoke v1.<io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setEventLoopPoolSize(int)>(v45);
label11:
v46 = v0.<io.quarkus.vertx.core.runtime.config.VertxConfiguration: java.time.Duration maxEventLoopExecuteTime>;
v47 = virtualinvoke v46.<java.time.Duration: long toMillis()>();
virtualinvoke v1.<io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setMaxEventLoopExecuteTime(long)>(v47);
v48 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
virtualinvoke v1.<io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setMaxEventLoopExecuteTimeUnit(java.util.concurrent.TimeUnit)>(v48);
v49 = v0.<io.quarkus.vertx.core.runtime.config.VertxConfiguration: java.time.Duration maxWorkerExecuteTime>;
v50 = virtualinvoke v49.<java.time.Duration: long toMillis()>();
virtualinvoke v1.<io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setMaxWorkerExecuteTime(long)>(v50);
v51 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
virtualinvoke v1.<io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setMaxWorkerExecuteTimeUnit(java.util.concurrent.TimeUnit)>(v51);
v52 = v0.<io.quarkus.vertx.core.runtime.config.VertxConfiguration: java.time.Duration warningExceptionTime>;
v53 = virtualinvoke v52.<java.time.Duration: long toNanos()>();
virtualinvoke v1.<io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setWarningExceptionTime(long)>(v53);
v54 = v0.<io.quarkus.vertx.core.runtime.config.VertxConfiguration: boolean preferNativeTransport>;
virtualinvoke v1.<io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setPreferNativeTransport(boolean)>(v54);
return v1;
}
private static java.io.File getRandomDirectory(java.io.File)
{
long v2, v3;
java.util.UUID v1;
java.io.File v0, v4, v7;
java.lang.String v5;
boolean v6;
v0 := @parameter0: java.io.File;
v1 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();
v2 = virtualinvoke v1.<java.util.UUID: long getMostSignificantBits()>();
v3 = staticinvoke <java.lang.Math: long abs(long)>(v2);
v4 = new java.io.File;
v5 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(v3);
specialinvoke v4.<java.io.File: void <init>(java.io.File,java.lang.String)>(v0, v5);
v6 = virtualinvoke v4.<java.io.File: boolean isDirectory()>();
if v6 == 0 goto label1;
v7 = staticinvoke <io.quarkus.vertx.core.runtime.VertxCoreRecorder: java.io.File getRandomDirectory(java.io.File)>(v0);
return v7;
label1:
return v4;
}
private static int calculateDefaultIOThreads()
{
java.lang.Runtime v1;
int v0;
long v2, v3, v4, v5, v6;
v0 = staticinvoke <org.wildfly.common.cpu.ProcessorInfo: int availableProcessors()>();
v1 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();
v2 = virtualinvoke v1.<java.lang.Runtime: long maxMemory()>();
v3 = v2 / 1048576L;
v4 = v3 / 10L;
v5 = staticinvoke <java.lang.Math: long min(long,long)>(v4, v0);
v6 = staticinvoke <java.lang.Math: long max(long,long)>(2L, v5);
return v6;
}
void destroy()
{
java.lang.IllegalStateException v10, v14;
io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxSupplier v1, v2, v6;
io.vertx.core.Vertx v3, v7;
java.util.concurrent.atomic.AtomicReference v5;
io.quarkus.vertx.core.runtime.VertxCoreRecorder v0;
java.util.concurrent.CountDownLatch v4;
io.quarkus.vertx.core.runtime.VertxCoreRecorder$9 v8;
java.lang.InterruptedException v12;
java.lang.Thread v13;
java.lang.Object v11, v9;
v0 := @this: io.quarkus.vertx.core.runtime.VertxCoreRecorder;
v1 = <io.quarkus.vertx.core.runtime.VertxCoreRecorder: io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxSupplier vertx>;
if v1 == null goto label4;
v2 = <io.quarkus.vertx.core.runtime.VertxCoreRecorder: io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxSupplier vertx>;
v3 = v2.<io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxSupplier: io.vertx.core.Vertx v>;
if v3 == null goto label4;
staticinvoke <io.netty.util.concurrent.FastThreadLocal: void destroy()>();
v4 = new java.util.concurrent.CountDownLatch;
specialinvoke v4.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);
v5 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v5.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v6 = <io.quarkus.vertx.core.runtime.VertxCoreRecorder: io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxSupplier vertx>;
v7 = v6.<io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxSupplier: io.vertx.core.Vertx v>;
v8 = new io.quarkus.vertx.core.runtime.VertxCoreRecorder$9;
specialinvoke v8.<io.quarkus.vertx.core.runtime.VertxCoreRecorder$9: void <init>(io.quarkus.vertx.core.runtime.VertxCoreRecorder,java.util.concurrent.atomic.AtomicReference,java.util.concurrent.CountDownLatch)>(v0, v5, v4);
interfaceinvoke v7.<io.vertx.core.Vertx: void close(io.vertx.core.Handler)>(v8);
label1:
virtualinvoke v4.<java.util.concurrent.CountDownLatch: void await()>();
v9 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v9 == null goto label3;
v10 = new java.lang.IllegalStateException;
v11 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
specialinvoke v10.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Error when closing Vert.x instance", v11);
throw v10;
label2:
v12 := @caughtexception;
v13 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
virtualinvoke v13.<java.lang.Thread: void interrupt()>();
v14 = new java.lang.IllegalStateException;
specialinvoke v14.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Exception when closing Vert.x instance", v12);
throw v14;
label3:
<io.quarkus.vertx.core.runtime.VertxCoreRecorder: io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxSupplier vertx> = null;
label4:
return;
catch java.lang.InterruptedException from label1 to label2 with label2;
}
private static void initializeClusterOptions(io.quarkus.vertx.core.runtime.config.VertxConfiguration, io.vertx.core.VertxOptions)
{
long v5, v8;
java.util.OptionalInt v12, v15, v22, v25;
io.quarkus.vertx.core.runtime.config.VertxConfiguration v0;
java.time.Duration v4, v7;
int v16, v26;
io.vertx.core.eventbus.EventBusOptions v10, v14, v19, v24, v3, v6;
java.lang.String v11, v9;
boolean v13, v18, v23;
io.vertx.core.VertxOptions v1;
java.util.Optional v17, v20;
java.lang.Object v21;
io.quarkus.vertx.core.runtime.config.ClusterConfiguration v2;
v0 := @parameter0: io.quarkus.vertx.core.runtime.config.VertxConfiguration;
v1 := @parameter1: io.vertx.core.VertxOptions;
v2 = v0.<io.quarkus.vertx.core.runtime.config.VertxConfiguration: io.quarkus.vertx.core.runtime.config.ClusterConfiguration cluster>;
v3 = virtualinvoke v1.<io.vertx.core.VertxOptions: io.vertx.core.eventbus.EventBusOptions getEventBusOptions()>();
v4 = v2.<io.quarkus.vertx.core.runtime.config.ClusterConfiguration: java.time.Duration pingReplyInterval>;
v5 = virtualinvoke v4.<java.time.Duration: long toMillis()>();
virtualinvoke v3.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setClusterPingReplyInterval(long)>(v5);
v6 = virtualinvoke v1.<io.vertx.core.VertxOptions: io.vertx.core.eventbus.EventBusOptions getEventBusOptions()>();
v7 = v2.<io.quarkus.vertx.core.runtime.config.ClusterConfiguration: java.time.Duration pingInterval>;
v8 = virtualinvoke v7.<java.time.Duration: long toMillis()>();
virtualinvoke v6.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setClusterPingInterval(long)>(v8);
v9 = v2.<io.quarkus.vertx.core.runtime.config.ClusterConfiguration: java.lang.String host>;
if v9 == null goto label1;
v10 = virtualinvoke v1.<io.vertx.core.VertxOptions: io.vertx.core.eventbus.EventBusOptions getEventBusOptions()>();
v11 = v2.<io.quarkus.vertx.core.runtime.config.ClusterConfiguration: java.lang.String host>;
virtualinvoke v10.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setHost(java.lang.String)>(v11);
label1:
v12 = v2.<io.quarkus.vertx.core.runtime.config.ClusterConfiguration: java.util.OptionalInt port>;
v13 = virtualinvoke v12.<java.util.OptionalInt: boolean isPresent()>();
if v13 == 0 goto label2;
v14 = virtualinvoke v1.<io.vertx.core.VertxOptions: io.vertx.core.eventbus.EventBusOptions getEventBusOptions()>();
v15 = v2.<io.quarkus.vertx.core.runtime.config.ClusterConfiguration: java.util.OptionalInt port>;
v16 = virtualinvoke v15.<java.util.OptionalInt: int getAsInt()>();
virtualinvoke v14.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setPort(int)>(v16);
label2:
v17 = v2.<io.quarkus.vertx.core.runtime.config.ClusterConfiguration: java.util.Optional publicHost>;
v18 = virtualinvoke v17.<java.util.Optional: boolean isPresent()>();
if v18 == 0 goto label3;
v19 = virtualinvoke v1.<io.vertx.core.VertxOptions: io.vertx.core.eventbus.EventBusOptions getEventBusOptions()>();
v20 = v2.<io.quarkus.vertx.core.runtime.config.ClusterConfiguration: java.util.Optional publicHost>;
v21 = virtualinvoke v20.<java.util.Optional: java.lang.Object get()>();
virtualinvoke v19.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setClusterPublicHost(java.lang.String)>(v21);
label3:
v22 = v2.<io.quarkus.vertx.core.runtime.config.ClusterConfiguration: java.util.OptionalInt publicPort>;
v23 = virtualinvoke v22.<java.util.OptionalInt: boolean isPresent()>();
if v23 == 0 goto label4;
v24 = virtualinvoke v1.<io.vertx.core.VertxOptions: io.vertx.core.eventbus.EventBusOptions getEventBusOptions()>();
v25 = v2.<io.quarkus.vertx.core.runtime.config.ClusterConfiguration: java.util.OptionalInt publicPort>;
v26 = virtualinvoke v25.<java.util.OptionalInt: int getAsInt()>();
virtualinvoke v24.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setPort(int)>(v26);
label4:
return;
}
private static void setEventBusOptions(io.quarkus.vertx.core.runtime.config.VertxConfiguration, io.vertx.core.VertxOptions)
{
io.quarkus.vertx.core.runtime.config.VertxConfiguration v0;
java.time.Duration v10, v31;
boolean v14, v26, v33, v34, v38, v39, v40;
io.vertx.core.VertxOptions v1;
io.quarkus.vertx.core.runtime.config.PfxConfiguration v43, v46;
io.quarkus.vertx.core.runtime.config.PemKeyCertConfiguration v41;
java.util.Optional v13, v15;
io.quarkus.vertx.core.runtime.config.PemTrustCertConfiguration v44;
long v11, v12, v17, v18, v19, v32;
io.quarkus.vertx.core.runtime.config.JksConfiguration v42, v45;
java.util.OptionalInt v20, v23, v27, v35, v4;
int v21, v22, v24, v25, v28, v29, v30, v36, v37, v5, v6;
io.vertx.core.eventbus.EventBusOptions v3;
java.lang.String v7, v8;
io.quarkus.vertx.core.runtime.config.EventBusConfiguration v2;
io.vertx.core.http.ClientAuth v9;
java.lang.Object v16;
v0 := @parameter0: io.quarkus.vertx.core.runtime.config.VertxConfiguration;
v1 := @parameter1: io.vertx.core.VertxOptions;
v2 = v0.<io.quarkus.vertx.core.runtime.config.VertxConfiguration: io.quarkus.vertx.core.runtime.config.EventBusConfiguration eventbus>;
v3 = new io.vertx.core.eventbus.EventBusOptions;
specialinvoke v3.<io.vertx.core.eventbus.EventBusOptions: void <init>()>();
v4 = v2.<io.quarkus.vertx.core.runtime.config.EventBusConfiguration: java.util.OptionalInt acceptBacklog>;
v5 = (int) -1;
v6 = virtualinvoke v4.<java.util.OptionalInt: int orElse(int)>(v5);
virtualinvoke v3.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setAcceptBacklog(int)>(v6);
v7 = v2.<io.quarkus.vertx.core.runtime.config.EventBusConfiguration: java.lang.String clientAuth>;
v8 = virtualinvoke v7.<java.lang.String: java.lang.String toUpperCase()>();
v9 = staticinvoke <io.vertx.core.http.ClientAuth: io.vertx.core.http.ClientAuth valueOf(java.lang.String)>(v8);
virtualinvoke v3.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setClientAuth(io.vertx.core.http.ClientAuth)>(v9);
v10 = v2.<io.quarkus.vertx.core.runtime.config.EventBusConfiguration: java.time.Duration connectTimeout>;
v11 = virtualinvoke v10.<java.time.Duration: long toMillis()>();
v12 = staticinvoke <java.lang.Math: long min(long,long)>(2147483647L, v11);
virtualinvoke v3.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setConnectTimeout(int)>(v12);
v13 = v2.<io.quarkus.vertx.core.runtime.config.EventBusConfiguration: java.util.Optional idleTimeout>;
v14 = virtualinvoke v13.<java.util.Optional: boolean isPresent()>();
if v14 == 0 goto label1;
v15 = v2.<io.quarkus.vertx.core.runtime.config.EventBusConfiguration: java.util.Optional idleTimeout>;
v16 = virtualinvoke v15.<java.util.Optional: java.lang.Object get()>();
v17 = virtualinvoke v16.<java.time.Duration: long getSeconds()>();
v18 = staticinvoke <java.lang.Math: long min(long,long)>(2147483647L, v17);
v19 = staticinvoke <java.lang.Math: long max(long,long)>(1L, v18);
goto label2;
label1:
v19 = 0;
label2:
virtualinvoke v3.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setIdleTimeout(int)>(v19);
v20 = v2.<io.quarkus.vertx.core.runtime.config.EventBusConfiguration: java.util.OptionalInt sendBufferSize>;
v21 = (int) -1;
v22 = virtualinvoke v20.<java.util.OptionalInt: int orElse(int)>(v21);
virtualinvoke v3.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setSendBufferSize(int)>(v22);
v23 = v2.<io.quarkus.vertx.core.runtime.config.EventBusConfiguration: java.util.OptionalInt soLinger>;
v24 = (int) -1;
v25 = virtualinvoke v23.<java.util.OptionalInt: int orElse(int)>(v24);
virtualinvoke v3.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setSoLinger(int)>(v25);
v26 = v2.<io.quarkus.vertx.core.runtime.config.EventBusConfiguration: boolean ssl>;
virtualinvoke v3.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setSsl(boolean)>(v26);
v27 = v2.<io.quarkus.vertx.core.runtime.config.EventBusConfiguration: java.util.OptionalInt receiveBufferSize>;
v28 = (int) -1;
v29 = virtualinvoke v27.<java.util.OptionalInt: int orElse(int)>(v28);
virtualinvoke v3.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setReceiveBufferSize(int)>(v29);
v30 = v2.<io.quarkus.vertx.core.runtime.config.EventBusConfiguration: int reconnectAttempts>;
virtualinvoke v3.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setReconnectAttempts(int)>(v30);
v31 = v2.<io.quarkus.vertx.core.runtime.config.EventBusConfiguration: java.time.Duration reconnectInterval>;
v32 = virtualinvoke v31.<java.time.Duration: long toMillis()>();
virtualinvoke v3.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setReconnectInterval(long)>(v32);
v33 = v2.<io.quarkus.vertx.core.runtime.config.EventBusConfiguration: boolean reuseAddress>;
virtualinvoke v3.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setReuseAddress(boolean)>(v33);
v34 = v2.<io.quarkus.vertx.core.runtime.config.EventBusConfiguration: boolean reusePort>;
virtualinvoke v3.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setReusePort(boolean)>(v34);
v35 = v2.<io.quarkus.vertx.core.runtime.config.EventBusConfiguration: java.util.OptionalInt trafficClass>;
v36 = (int) -1;
v37 = virtualinvoke v35.<java.util.OptionalInt: int orElse(int)>(v36);
virtualinvoke v3.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setTrafficClass(int)>(v37);
v38 = v2.<io.quarkus.vertx.core.runtime.config.EventBusConfiguration: boolean tcpKeepAlive>;
virtualinvoke v3.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setTcpKeepAlive(boolean)>(v38);
v39 = v2.<io.quarkus.vertx.core.runtime.config.EventBusConfiguration: boolean tcpNoDelay>;
virtualinvoke v3.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setTcpNoDelay(boolean)>(v39);
v40 = v2.<io.quarkus.vertx.core.runtime.config.EventBusConfiguration: boolean trustAll>;
virtualinvoke v3.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.eventbus.EventBusOptions setTrustAll(boolean)>(v40);
v41 = v2.<io.quarkus.vertx.core.runtime.config.EventBusConfiguration: io.quarkus.vertx.core.runtime.config.PemKeyCertConfiguration keyCertificatePem>;
staticinvoke <io.quarkus.vertx.core.runtime.SSLConfigHelper: void configurePemKeyCertOptions(io.vertx.core.net.TCPSSLOptions,io.quarkus.vertx.core.runtime.config.PemKeyCertConfiguration)>(v3, v41);
v42 = v2.<io.quarkus.vertx.core.runtime.config.EventBusConfiguration: io.quarkus.vertx.core.runtime.config.JksConfiguration keyCertificateJks>;
staticinvoke <io.quarkus.vertx.core.runtime.SSLConfigHelper: void configureJksKeyCertOptions(io.vertx.core.net.TCPSSLOptions,io.quarkus.vertx.core.runtime.config.JksConfiguration)>(v3, v42);
v43 = v2.<io.quarkus.vertx.core.runtime.config.EventBusConfiguration: io.quarkus.vertx.core.runtime.config.PfxConfiguration keyCertificatePfx>;
staticinvoke <io.quarkus.vertx.core.runtime.SSLConfigHelper: void configurePfxKeyCertOptions(io.vertx.core.net.TCPSSLOptions,io.quarkus.vertx.core.runtime.config.PfxConfiguration)>(v3, v43);
v44 = v2.<io.quarkus.vertx.core.runtime.config.EventBusConfiguration: io.quarkus.vertx.core.runtime.config.PemTrustCertConfiguration trustCertificatePem>;
staticinvoke <io.quarkus.vertx.core.runtime.SSLConfigHelper: void configurePemTrustOptions(io.vertx.core.net.TCPSSLOptions,io.quarkus.vertx.core.runtime.config.PemTrustCertConfiguration)>(v3, v44);
v45 = v2.<io.quarkus.vertx.core.runtime.config.EventBusConfiguration: io.quarkus.vertx.core.runtime.config.JksConfiguration trustCertificateJks>;
staticinvoke <io.quarkus.vertx.core.runtime.SSLConfigHelper: void configureJksKeyCertOptions(io.vertx.core.net.TCPSSLOptions,io.quarkus.vertx.core.runtime.config.JksConfiguration)>(v3, v45);
v46 = v2.<io.quarkus.vertx.core.runtime.config.EventBusConfiguration: io.quarkus.vertx.core.runtime.config.PfxConfiguration trustCertificatePfx>;
staticinvoke <io.quarkus.vertx.core.runtime.SSLConfigHelper: void configurePfxTrustOptions(io.vertx.core.net.TCPSSLOptions,io.quarkus.vertx.core.runtime.config.PfxConfiguration)>(v3, v46);
virtualinvoke v1.<io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setEventBusOptions(io.vertx.core.eventbus.EventBusOptions)>(v3);
return;
}
private static void setAddressResolverOptions(io.quarkus.vertx.core.runtime.config.VertxConfiguration, io.vertx.core.VertxOptions)
{
io.vertx.core.VertxOptions v1;
long v9;
io.vertx.core.dns.AddressResolverOptions v3;
io.quarkus.vertx.core.runtime.config.VertxConfiguration v0;
io.quarkus.vertx.core.runtime.config.AddressResolverConfiguration v2;
java.time.Duration v8;
int v4, v5, v6, v7;
v0 := @parameter0: io.quarkus.vertx.core.runtime.config.VertxConfiguration;
v1 := @parameter1: io.vertx.core.VertxOptions;
v2 = v0.<io.quarkus.vertx.core.runtime.config.VertxConfiguration: io.quarkus.vertx.core.runtime.config.AddressResolverConfiguration resolver>;
v3 = new io.vertx.core.dns.AddressResolverOptions;
specialinvoke v3.<io.vertx.core.dns.AddressResolverOptions: void <init>()>();
v4 = v2.<io.quarkus.vertx.core.runtime.config.AddressResolverConfiguration: int cacheMaxTimeToLive>;
virtualinvoke v3.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.dns.AddressResolverOptions setCacheMaxTimeToLive(int)>(v4);
v5 = v2.<io.quarkus.vertx.core.runtime.config.AddressResolverConfiguration: int cacheMinTimeToLive>;
virtualinvoke v3.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.dns.AddressResolverOptions setCacheMinTimeToLive(int)>(v5);
v6 = v2.<io.quarkus.vertx.core.runtime.config.AddressResolverConfiguration: int cacheNegativeTimeToLive>;
virtualinvoke v3.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.dns.AddressResolverOptions setCacheNegativeTimeToLive(int)>(v6);
v7 = v2.<io.quarkus.vertx.core.runtime.config.AddressResolverConfiguration: int maxQueries>;
virtualinvoke v3.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.dns.AddressResolverOptions setMaxQueries(int)>(v7);
v8 = v2.<io.quarkus.vertx.core.runtime.config.AddressResolverConfiguration: java.time.Duration queryTimeout>;
v9 = virtualinvoke v8.<java.time.Duration: long toMillis()>();
virtualinvoke v3.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.dns.AddressResolverOptions setQueryTimeout(long)>(v9);
virtualinvoke v1.<io.vertx.core.VertxOptions: io.vertx.core.VertxOptions setAddressResolverOptions(io.vertx.core.dns.AddressResolverOptions)>(v3);
return;
}
public java.util.function.Supplier bossSupplier()
{
io.quarkus.vertx.core.runtime.VertxCoreRecorder v0;
io.quarkus.vertx.core.runtime.VertxCoreRecorder$10 v1;
v0 := @this: io.quarkus.vertx.core.runtime.VertxCoreRecorder;
v1 = new io.quarkus.vertx.core.runtime.VertxCoreRecorder$10;
specialinvoke v1.<io.quarkus.vertx.core.runtime.VertxCoreRecorder$10: void <init>(io.quarkus.vertx.core.runtime.VertxCoreRecorder)>(v0);
return v1;
}
public java.util.function.Supplier mainSupplier()
{
io.quarkus.vertx.core.runtime.VertxCoreRecorder$11 v1;
io.quarkus.vertx.core.runtime.VertxCoreRecorder v0;
v0 := @this: io.quarkus.vertx.core.runtime.VertxCoreRecorder;
v1 = new io.quarkus.vertx.core.runtime.VertxCoreRecorder$11;
specialinvoke v1.<io.quarkus.vertx.core.runtime.VertxCoreRecorder$11: void <init>(io.quarkus.vertx.core.runtime.VertxCoreRecorder)>(v0);
return v1;
}
public java.util.function.Supplier calculateEventLoopThreads(io.quarkus.vertx.core.runtime.config.VertxConfiguration)
{
int v5;
io.quarkus.vertx.core.runtime.VertxCoreRecorder$12 v6;
java.util.OptionalInt v2, v4;
boolean v3;
io.quarkus.vertx.core.runtime.VertxCoreRecorder v0;
io.quarkus.vertx.core.runtime.config.VertxConfiguration v1;
v0 := @this: io.quarkus.vertx.core.runtime.VertxCoreRecorder;
v1 := @parameter0: io.quarkus.vertx.core.runtime.config.VertxConfiguration;
v2 = v1.<io.quarkus.vertx.core.runtime.config.VertxConfiguration: java.util.OptionalInt eventLoopsPoolSize>;
v3 = virtualinvoke v2.<java.util.OptionalInt: boolean isPresent()>();
if v3 == 0 goto label1;
v4 = v1.<io.quarkus.vertx.core.runtime.config.VertxConfiguration: java.util.OptionalInt eventLoopsPoolSize>;
v5 = virtualinvoke v4.<java.util.OptionalInt: int getAsInt()>();
goto label2;
label1:
v5 = staticinvoke <io.quarkus.vertx.core.runtime.VertxCoreRecorder: int calculateDefaultIOThreads()>();
label2:
v6 = new io.quarkus.vertx.core.runtime.VertxCoreRecorder$12;
specialinvoke v6.<io.quarkus.vertx.core.runtime.VertxCoreRecorder$12: void <init>(io.quarkus.vertx.core.runtime.VertxCoreRecorder,int)>(v0, v5);
return v6;
}
public java.util.concurrent.ThreadFactory createThreadFactory(io.quarkus.runtime.LaunchMode)
{
java.util.concurrent.atomic.AtomicInteger v3;
io.quarkus.runtime.LaunchMode v1;
java.util.Optional v2;
io.quarkus.vertx.core.runtime.VertxCoreRecorder$13 v4;
io.quarkus.vertx.core.runtime.VertxCoreRecorder v0;
v0 := @this: io.quarkus.vertx.core.runtime.VertxCoreRecorder;
v1 := @parameter0: io.quarkus.runtime.LaunchMode;
v2 = staticinvoke <io.quarkus.vertx.core.runtime.VertxCoreRecorder: java.util.Optional setupThreadFactoryTccl(io.quarkus.runtime.LaunchMode)>(v1);
v3 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v3.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);
v4 = new io.quarkus.vertx.core.runtime.VertxCoreRecorder$13;
specialinvoke v4.<io.quarkus.vertx.core.runtime.VertxCoreRecorder$13: void <init>(io.quarkus.vertx.core.runtime.VertxCoreRecorder,java.util.concurrent.atomic.AtomicInteger,io.quarkus.runtime.LaunchMode,java.util.Optional)>(v0, v3, v1, v2);
return v4;
}
private static void setNewThreadTccl(io.vertx.core.impl.VertxThread)
{
io.vertx.core.impl.VertxThread v0;
java.lang.Class v2;
java.lang.ClassLoader v1;
v0 := @parameter0: io.vertx.core.impl.VertxThread;
v1 = <io.quarkus.vertx.core.runtime.VertxCoreRecorder: java.lang.ClassLoader currentDevModeNewThreadCreationClassLoader>;
if v1 != null goto label1;
v2 = class "Lio/quarkus/vertx/core/runtime/VertxCoreRecorder;";
v1 = virtualinvoke v2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
label1:
virtualinvoke v0.<io.vertx.core.impl.VertxThread: void setContextClassLoader(java.lang.ClassLoader)>(v1);
return;
}
public org.jboss.threads.ContextHandler executionContextHandler()
{
io.quarkus.vertx.core.runtime.VertxCoreRecorder$14 v1;
io.quarkus.vertx.core.runtime.VertxCoreRecorder v0;
v0 := @this: io.quarkus.vertx.core.runtime.VertxCoreRecorder;
v1 = new io.quarkus.vertx.core.runtime.VertxCoreRecorder$14;
specialinvoke v1.<io.quarkus.vertx.core.runtime.VertxCoreRecorder$14: void <init>(io.quarkus.vertx.core.runtime.VertxCoreRecorder)>(v0);
return v1;
}
public static java.util.function.Supplier recoverFailedStart(io.quarkus.vertx.core.runtime.config.VertxConfiguration)
{
io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxSupplier v1;
java.util.List v3;
io.quarkus.runtime.LaunchMode v2;
io.quarkus.vertx.core.runtime.config.VertxConfiguration v0;
v0 := @parameter0: io.quarkus.vertx.core.runtime.config.VertxConfiguration;
v1 = new io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxSupplier;
v2 = <io.quarkus.runtime.LaunchMode: io.quarkus.runtime.LaunchMode DEVELOPMENT>;
v3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
specialinvoke v1.<io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxSupplier: void <init>(io.quarkus.runtime.LaunchMode,io.quarkus.vertx.core.runtime.config.VertxConfiguration,java.util.List,io.quarkus.runtime.ShutdownContext)>(v2, v0, v3, null);
<io.quarkus.vertx.core.runtime.VertxCoreRecorder: io.quarkus.vertx.core.runtime.VertxCoreRecorder$VertxSupplier vertx> = v1;
return v1;
}
public static void setWebDeploymentId(java.lang.String)
{
java.lang.String v0;
v0 := @parameter0: java.lang.String;
<io.quarkus.vertx.core.runtime.VertxCoreRecorder: java.lang.String webDeploymentId> = v0;
return;
}
private static void deleteDirectory(java.io.File)
{
int v2, v3;
java.io.File[] v1;
java.io.File v0, v4;
v0 := @parameter0: java.io.File;
v1 = virtualinvoke v0.<java.io.File: java.io.File[] listFiles()>();
if v1 == null goto label2;
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label2;
v4 = v1[v3];
staticinvoke <io.quarkus.vertx.core.runtime.VertxCoreRecorder: void deleteDirectory(java.io.File)>(v4);
v3 = v3 + 1;
goto label1;
label2:
virtualinvoke v0.<java.io.File: boolean delete()>();
return;
}
static void <clinit>()
{
java.util.HashSet v3;
org.jboss.logging.Logger v2;
java.lang.Class v0;
java.lang.String v1;
staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("vertx.disableTCCL", "true");
v0 = class "Lio/quarkus/vertx/core/runtime/VertxCoreRecorder;";
v1 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v2 = staticinvoke <org.jboss.logging.Logger: org.jboss.logging.Logger getLogger(java.lang.String)>(v1);
<io.quarkus.vertx.core.runtime.VertxCoreRecorder: org.jboss.logging.Logger LOGGER> = v2;
v3 = new java.util.HashSet;
specialinvoke v3.<java.util.HashSet: void <init>()>();
<io.quarkus.vertx.core.runtime.VertxCoreRecorder: java.util.Set devModeThreads> = v3;
return;
}
}