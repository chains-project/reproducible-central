public final class io.smallrye.common.expression.ResolveContext extends java.lang.Object
{
private final io.smallrye.common.function.ExceptionBiConsumer function;
private java.lang.StringBuilder builder;
private io.smallrye.common.expression.ExpressionNode current;
void <init>(io.smallrye.common.function.ExceptionBiConsumer, java.lang.StringBuilder)
{
io.smallrye.common.function.ExceptionBiConsumer v1;
java.lang.StringBuilder v2;
io.smallrye.common.expression.ResolveContext v0;
v0 := @this: io.smallrye.common.expression.ResolveContext;
v1 := @parameter0: io.smallrye.common.function.ExceptionBiConsumer;
v2 := @parameter1: java.lang.StringBuilder;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.smallrye.common.expression.ResolveContext: io.smallrye.common.function.ExceptionBiConsumer function> = v1;
v0.<io.smallrye.common.expression.ResolveContext: java.lang.StringBuilder builder> = v2;
return;
}
public java.lang.String getKey() throws java.lang.Exception
{
java.lang.IllegalStateException v2;
io.smallrye.common.expression.ResolveContext v0;
io.smallrye.common.expression.Node v4, v7;
io.smallrye.common.expression.ExpressionNode v1, v3;
java.lang.StringBuilder v8;
java.lang.String v6, v9;
boolean v5;
v0 := @this: io.smallrye.common.expression.ResolveContext;
v1 = v0.<io.smallrye.common.expression.ResolveContext: io.smallrye.common.expression.ExpressionNode current>;
if v1 != null goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>()>();
throw v2;
label1:
v3 = v0.<io.smallrye.common.expression.ResolveContext: io.smallrye.common.expression.ExpressionNode current>;
v4 = virtualinvoke v3.<io.smallrye.common.expression.ExpressionNode: io.smallrye.common.expression.Node getKey()>();
v5 = v4 instanceof io.smallrye.common.expression.LiteralNode;
if v5 == 0 goto label2;
v6 = virtualinvoke v4.<java.lang.Object: java.lang.String toString()>();
return v6;
label2:
v7 = <io.smallrye.common.expression.Node: io.smallrye.common.expression.Node NULL>;
if v4 != v7 goto label3;
return "";
label3:
v8 = new java.lang.StringBuilder;
specialinvoke v8.<java.lang.StringBuilder: void <init>()>();
specialinvoke v0.<io.smallrye.common.expression.ResolveContext: void emitToBuilder(java.lang.StringBuilder,io.smallrye.common.expression.Node)>(v8, v4);
v9 = virtualinvoke v8.<java.lang.StringBuilder: java.lang.String toString()>();
return v9;
}
public void expandDefault(java.lang.StringBuilder) throws java.lang.Exception
{
io.smallrye.common.expression.ExpressionNode v2, v4;
java.lang.IllegalStateException v3;
io.smallrye.common.expression.ResolveContext v0;
io.smallrye.common.expression.Node v5;
java.lang.StringBuilder v1;
v0 := @this: io.smallrye.common.expression.ResolveContext;
v1 := @parameter0: java.lang.StringBuilder;
v2 = v0.<io.smallrye.common.expression.ResolveContext: io.smallrye.common.expression.ExpressionNode current>;
if v2 != null goto label1;
v3 = new java.lang.IllegalStateException;
specialinvoke v3.<java.lang.IllegalStateException: void <init>()>();
throw v3;
label1:
v4 = v0.<io.smallrye.common.expression.ResolveContext: io.smallrye.common.expression.ExpressionNode current>;
v5 = virtualinvoke v4.<io.smallrye.common.expression.ExpressionNode: io.smallrye.common.expression.Node getDefaultValue()>();
specialinvoke v0.<io.smallrye.common.expression.ResolveContext: void emitToBuilder(java.lang.StringBuilder,io.smallrye.common.expression.Node)>(v1, v5);
return;
}
private void emitToBuilder(java.lang.StringBuilder, io.smallrye.common.expression.Node) throws java.lang.Exception
{
java.lang.Throwable v8;
io.smallrye.common.function.ExceptionBiConsumer v7;
io.smallrye.common.expression.ResolveContext v0;
io.smallrye.common.expression.Node v2, v3;
java.lang.StringBuilder v1, v6;
java.lang.String v5;
boolean v4;
v0 := @this: io.smallrye.common.expression.ResolveContext;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: io.smallrye.common.expression.Node;
v3 = <io.smallrye.common.expression.Node: io.smallrye.common.expression.Node NULL>;
if v2 != v3 goto label1;
return;
label1:
v4 = v2 instanceof io.smallrye.common.expression.LiteralNode;
if v4 == 0 goto label2;
v5 = virtualinvoke v2.<java.lang.Object: java.lang.String toString()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v5);
return;
label2:
v6 = v0.<io.smallrye.common.expression.ResolveContext: java.lang.StringBuilder builder>;
label3:
v0.<io.smallrye.common.expression.ResolveContext: java.lang.StringBuilder builder> = v1;
v7 = v0.<io.smallrye.common.expression.ResolveContext: io.smallrye.common.function.ExceptionBiConsumer function>;
virtualinvoke v2.<io.smallrye.common.expression.Node: void emit(io.smallrye.common.expression.ResolveContext,io.smallrye.common.function.ExceptionBiConsumer)>(v0, v7);
label4:
v0.<io.smallrye.common.expression.ResolveContext: java.lang.StringBuilder builder> = v6;
goto label6;
label5:
v8 := @caughtexception;
v0.<io.smallrye.common.expression.ResolveContext: java.lang.StringBuilder builder> = v6;
throw v8;
label6:
return;
catch java.lang.Throwable from label3 to label4 with label5;
}
public void expandDefault() throws java.lang.Exception
{
java.lang.StringBuilder v1;
io.smallrye.common.expression.ResolveContext v0;
v0 := @this: io.smallrye.common.expression.ResolveContext;
v1 = v0.<io.smallrye.common.expression.ResolveContext: java.lang.StringBuilder builder>;
virtualinvoke v0.<io.smallrye.common.expression.ResolveContext: void expandDefault(java.lang.StringBuilder)>(v1);
return;
}
public java.lang.String getExpandedDefault() throws java.lang.Exception
{
java.lang.IllegalStateException v2;
io.smallrye.common.expression.ResolveContext v0;
io.smallrye.common.expression.Node v4, v7;
io.smallrye.common.expression.ExpressionNode v1, v3;
java.lang.StringBuilder v8;
java.lang.String v6, v9;
boolean v5;
v0 := @this: io.smallrye.common.expression.ResolveContext;
v1 = v0.<io.smallrye.common.expression.ResolveContext: io.smallrye.common.expression.ExpressionNode current>;
if v1 != null goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>()>();
throw v2;
label1:
v3 = v0.<io.smallrye.common.expression.ResolveContext: io.smallrye.common.expression.ExpressionNode current>;
v4 = virtualinvoke v3.<io.smallrye.common.expression.ExpressionNode: io.smallrye.common.expression.Node getDefaultValue()>();
v5 = v4 instanceof io.smallrye.common.expression.LiteralNode;
if v5 == 0 goto label2;
v6 = virtualinvoke v4.<java.lang.Object: java.lang.String toString()>();
return v6;
label2:
v7 = <io.smallrye.common.expression.Node: io.smallrye.common.expression.Node NULL>;
if v4 != v7 goto label3;
return "";
label3:
v8 = new java.lang.StringBuilder;
specialinvoke v8.<java.lang.StringBuilder: void <init>()>();
specialinvoke v0.<io.smallrye.common.expression.ResolveContext: void emitToBuilder(java.lang.StringBuilder,io.smallrye.common.expression.Node)>(v8, v4);
v9 = virtualinvoke v8.<java.lang.StringBuilder: java.lang.String toString()>();
return v9;
}
public boolean hasDefault()
{
io.smallrye.common.expression.ExpressionNode v1;
io.smallrye.common.expression.ResolveContext v0;
io.smallrye.common.expression.Node v2, v3;
boolean v4;
v0 := @this: io.smallrye.common.expression.ResolveContext;
v1 = v0.<io.smallrye.common.expression.ResolveContext: io.smallrye.common.expression.ExpressionNode current>;
v2 = virtualinvoke v1.<io.smallrye.common.expression.ExpressionNode: io.smallrye.common.expression.Node getDefaultValue()>();
v3 = <io.smallrye.common.expression.Node: io.smallrye.common.expression.Node NULL>;
if v2 == v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
java.lang.StringBuilder getStringBuilder()
{
java.lang.StringBuilder v1;
io.smallrye.common.expression.ResolveContext v0;
v0 := @this: io.smallrye.common.expression.ResolveContext;
v1 = v0.<io.smallrye.common.expression.ResolveContext: java.lang.StringBuilder builder>;
return v1;
}
io.smallrye.common.expression.ExpressionNode setCurrent(io.smallrye.common.expression.ExpressionNode)
{
io.smallrye.common.expression.ExpressionNode v1, v2;
java.lang.Throwable v3;
io.smallrye.common.expression.ResolveContext v0;
v0 := @this: io.smallrye.common.expression.ResolveContext;
v1 := @parameter0: io.smallrye.common.expression.ExpressionNode;
label1:
v2 = v0.<io.smallrye.common.expression.ResolveContext: io.smallrye.common.expression.ExpressionNode current>;
label2:
v0.<io.smallrye.common.expression.ResolveContext: io.smallrye.common.expression.ExpressionNode current> = v1;
return v2;
label3:
v3 := @caughtexception;
v0.<io.smallrye.common.expression.ResolveContext: io.smallrye.common.expression.ExpressionNode current> = v1;
throw v3;
catch java.lang.Throwable from label1 to label2 with label3;
}
}