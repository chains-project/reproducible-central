public interface  io.smallrye.common.function.ExceptionBiFunction extends java.lang.Object
{
public abstract java.lang.Object apply(java.lang.Object, java.lang.Object) throws java.lang.Exception;
public io.smallrye.common.function.ExceptionBiFunction andThen(io.smallrye.common.function.ExceptionFunction)
{
io.smallrye.common.function.ExceptionFunction v1;
io.smallrye.common.function.ExceptionBiFunction v0, v2;
v0 := @this: io.smallrye.common.function.ExceptionBiFunction;
v1 := @parameter0: io.smallrye.common.function.ExceptionFunction;
staticinvoke <io.smallrye.common.constraint.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("after", v1);
v2 = staticinvoke <io.smallrye.common.function.ExceptionBiFunction$lambda_andThen_0__3174: io.smallrye.common.function.ExceptionBiFunction bootstrap$(io.smallrye.common.function.ExceptionBiFunction,io.smallrye.common.function.ExceptionFunction)>(v0, v1);
return v2;
}
public io.smallrye.common.function.ExceptionBiConsumer andThen(io.smallrye.common.function.ExceptionConsumer)
{
io.smallrye.common.function.ExceptionBiConsumer v2;
io.smallrye.common.function.ExceptionBiFunction v0;
io.smallrye.common.function.ExceptionConsumer v1;
v0 := @this: io.smallrye.common.function.ExceptionBiFunction;
v1 := @parameter0: io.smallrye.common.function.ExceptionConsumer;
staticinvoke <io.smallrye.common.constraint.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("after", v1);
v2 = staticinvoke <io.smallrye.common.function.ExceptionBiFunction$lambda_andThen_1__3175: io.smallrye.common.function.ExceptionBiConsumer bootstrap$(io.smallrye.common.function.ExceptionBiFunction,io.smallrye.common.function.ExceptionConsumer)>(v0, v1);
return v2;
}
public io.smallrye.common.function.ExceptionSupplier compose(io.smallrye.common.function.ExceptionSupplier, io.smallrye.common.function.ExceptionSupplier)
{
io.smallrye.common.function.ExceptionBiFunction v0;
io.smallrye.common.function.ExceptionSupplier v1, v2, v3;
v0 := @this: io.smallrye.common.function.ExceptionBiFunction;
v1 := @parameter0: io.smallrye.common.function.ExceptionSupplier;
v2 := @parameter1: io.smallrye.common.function.ExceptionSupplier;
staticinvoke <io.smallrye.common.constraint.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("before1", v1);
staticinvoke <io.smallrye.common.constraint.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("before2", v2);
v3 = staticinvoke <io.smallrye.common.function.ExceptionBiFunction$lambda_compose_2__3176: io.smallrye.common.function.ExceptionSupplier bootstrap$(io.smallrye.common.function.ExceptionBiFunction,io.smallrye.common.function.ExceptionSupplier,io.smallrye.common.function.ExceptionSupplier)>(v0, v1, v2);
return v3;
}
}