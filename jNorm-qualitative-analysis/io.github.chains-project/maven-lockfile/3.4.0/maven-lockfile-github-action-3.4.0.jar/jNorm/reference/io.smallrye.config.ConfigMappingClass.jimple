final class io.smallrye.config.ConfigMappingClass extends java.lang.Object implements io.smallrye.config.ConfigMappingMetadata
{
private static final java.lang.ClassValue cv;
private final java.lang.Class classType;
private final java.lang.String interfaceName;
static io.smallrye.config.ConfigMappingClass getConfigurationClass(java.lang.Class)
{
java.lang.Class v0;
java.lang.Object v2;
java.lang.ClassValue v1;
v0 := @parameter0: java.lang.Class;
staticinvoke <io.smallrye.common.constraint.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("classType", v0);
v1 = <io.smallrye.config.ConfigMappingClass: java.lang.ClassValue cv>;
v2 = virtualinvoke v1.<java.lang.ClassValue: java.lang.Object get(java.lang.Class)>(v0);
return v2;
}
private static io.smallrye.config.ConfigMappingClass createConfigurationClass(java.lang.Class)
{
io.smallrye.config.ConfigMappingClass v7;
java.lang.reflect.TypeVariable[] v2;
int v3, v4;
java.lang.Class v0;
boolean v1, v5, v6;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: boolean isInterface()>();
if v1 == 0 goto label1;
v2 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();
v3 = lengthof v2;
if v3 == 0 goto label2;
label1:
v4 = virtualinvoke v0.<java.lang.Class: int getModifiers()>();
v5 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>(v4);
if v5 != 0 goto label2;
v6 = virtualinvoke v0.<java.lang.Class: boolean isEnum()>();
if v6 == 0 goto label3;
label2:
return null;
label3:
v7 = new io.smallrye.config.ConfigMappingClass;
specialinvoke v7.<io.smallrye.config.ConfigMappingClass: void <init>(java.lang.Class)>(v0);
return v7;
}
private static java.lang.String generateInterfaceName(java.lang.Class)
{
java.lang.Package v8;
java.lang.IllegalArgumentException v7;
java.lang.reflect.TypeVariable[] v2;
int v12, v3, v4;
java.lang.Class v0;
java.lang.String v10, v11, v13, v9;
boolean v1, v5, v6;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: boolean isInterface()>();
if v1 == 0 goto label1;
v2 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>();
v3 = lengthof v2;
if v3 == 0 goto label2;
label1:
v4 = virtualinvoke v0.<java.lang.Class: int getModifiers()>();
v5 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>(v4);
if v5 != 0 goto label2;
v6 = virtualinvoke v0.<java.lang.Class: boolean isEnum()>();
if v6 == 0 goto label3;
label2:
v7 = new java.lang.IllegalArgumentException;
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>()>();
throw v7;
label3:
v8 = virtualinvoke v0.<java.lang.Class: java.lang.Package getPackage()>();
v9 = virtualinvoke v8.<java.lang.Package: java.lang.String getName()>();
v10 = virtualinvoke v0.<java.lang.Class: java.lang.String getSimpleName()>();
v11 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v12 = virtualinvoke v11.<java.lang.String: int hashCode()>();
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,int)>(v9, v10, v12) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.\u0001\u0001I");
return v13;
}
public void <init>(java.lang.Class)
{
java.lang.Class v1;
java.lang.String v2;
io.smallrye.config.ConfigMappingClass v0;
v0 := @this: io.smallrye.config.ConfigMappingClass;
v1 := @parameter0: java.lang.Class;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.smallrye.config.ConfigMappingClass: java.lang.Class classType> = v1;
v2 = staticinvoke <io.smallrye.config.ConfigMappingClass: java.lang.String generateInterfaceName(java.lang.Class)>(v1);
v0.<io.smallrye.config.ConfigMappingClass: java.lang.String interfaceName> = v2;
return;
}
public java.lang.Class getInterfaceType()
{
java.lang.Class v1;
io.smallrye.config.ConfigMappingClass v0;
v0 := @this: io.smallrye.config.ConfigMappingClass;
v1 = v0.<io.smallrye.config.ConfigMappingClass: java.lang.Class classType>;
return v1;
}
public java.lang.String getClassName()
{
java.lang.String v1;
io.smallrye.config.ConfigMappingClass v0;
v0 := @this: io.smallrye.config.ConfigMappingClass;
v1 = v0.<io.smallrye.config.ConfigMappingClass: java.lang.String interfaceName>;
return v1;
}
public byte[] getClassBytes()
{
byte[] v3;
io.smallrye.config.ConfigMappingClass v0;
java.lang.Class v1;
java.lang.String v2;
v0 := @this: io.smallrye.config.ConfigMappingClass;
v1 = v0.<io.smallrye.config.ConfigMappingClass: java.lang.Class classType>;
v2 = v0.<io.smallrye.config.ConfigMappingClass: java.lang.String interfaceName>;
v3 = staticinvoke <io.smallrye.config.ConfigMappingGenerator: byte[] generate(java.lang.Class,java.lang.String)>(v1, v2);
return v3;
}
static void <clinit>()
{
io.smallrye.config.ConfigMappingClass$1 v0;
v0 = new io.smallrye.config.ConfigMappingClass$1;
specialinvoke v0.<io.smallrye.config.ConfigMappingClass$1: void <init>()>();
<io.smallrye.config.ConfigMappingClass: java.lang.ClassValue cv> = v0;
return;
}
}