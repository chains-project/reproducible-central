public final class io.smallrye.config.ConfigMappingContext extends java.lang.Object
{
private final java.util.Map enclosedThings;
private final java.util.Map roots;
private final java.util.Map convertersByTypeAndField;
private final java.util.List keyConvertersByDegreeTypeAndField;
private final java.util.Map converterInstances;
private final java.util.List allInstances;
private final io.smallrye.config.SmallRyeConfig config;
private final java.lang.StringBuilder stringBuilder;
private final java.util.Set unknownProperties;
private final java.util.List problems;
private io.smallrye.config.ConfigMappingInterface$NamingStrategy namingStrategy;
void <init>(io.smallrye.config.SmallRyeConfig)
{
java.util.IdentityHashMap v2, v3, v4, v6;
io.smallrye.config.SmallRyeConfig v1;
io.smallrye.config.ConfigMappingContext v0;
java.util.ArrayList v10, v5, v7;
java.util.HashSet v9;
java.lang.StringBuilder v8;
v0 := @this: io.smallrye.config.ConfigMappingContext;
v1 := @parameter0: io.smallrye.config.SmallRyeConfig;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.IdentityHashMap;
specialinvoke v2.<java.util.IdentityHashMap: void <init>()>();
v0.<io.smallrye.config.ConfigMappingContext: java.util.Map enclosedThings> = v2;
v3 = new java.util.IdentityHashMap;
specialinvoke v3.<java.util.IdentityHashMap: void <init>()>();
v0.<io.smallrye.config.ConfigMappingContext: java.util.Map roots> = v3;
v4 = new java.util.IdentityHashMap;
specialinvoke v4.<java.util.IdentityHashMap: void <init>()>();
v0.<io.smallrye.config.ConfigMappingContext: java.util.Map convertersByTypeAndField> = v4;
v5 = new java.util.ArrayList;
specialinvoke v5.<java.util.ArrayList: void <init>()>();
v0.<io.smallrye.config.ConfigMappingContext: java.util.List keyConvertersByDegreeTypeAndField> = v5;
v6 = new java.util.IdentityHashMap;
specialinvoke v6.<java.util.IdentityHashMap: void <init>()>();
v0.<io.smallrye.config.ConfigMappingContext: java.util.Map converterInstances> = v6;
v7 = new java.util.ArrayList;
specialinvoke v7.<java.util.ArrayList: void <init>()>();
v0.<io.smallrye.config.ConfigMappingContext: java.util.List allInstances> = v7;
v8 = new java.lang.StringBuilder;
specialinvoke v8.<java.lang.StringBuilder: void <init>()>();
v0.<io.smallrye.config.ConfigMappingContext: java.lang.StringBuilder stringBuilder> = v8;
v9 = new java.util.HashSet;
specialinvoke v9.<java.util.HashSet: void <init>()>();
v0.<io.smallrye.config.ConfigMappingContext: java.util.Set unknownProperties> = v9;
v10 = new java.util.ArrayList;
specialinvoke v10.<java.util.ArrayList: void <init>()>();
v0.<io.smallrye.config.ConfigMappingContext: java.util.List problems> = v10;
v0.<io.smallrye.config.ConfigMappingContext: io.smallrye.config.ConfigMappingInterface$NamingStrategy namingStrategy> = null;
v0.<io.smallrye.config.ConfigMappingContext: io.smallrye.config.SmallRyeConfig config> = v1;
return;
}
public io.smallrye.config.ConfigMappingObject getRoot(java.lang.Class, java.lang.String)
{
java.util.Map v3, v4;
java.lang.Class v1;
java.lang.Object v5, v6;
java.lang.String v2;
io.smallrye.config.ConfigMappingContext v0;
v0 := @this: io.smallrye.config.ConfigMappingContext;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.smallrye.config.ConfigMappingContext: java.util.Map roots>;
v4 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
v5 = interfaceinvoke v3.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>(v1, v4);
v6 = interfaceinvoke v5.<java.util.Map: java.lang.Object get(java.lang.Object)>(v2);
return v6;
}
public void registerRoot(java.lang.Class, java.lang.String, io.smallrye.config.ConfigMappingObject)
{
io.smallrye.config.ConfigMappingObject v3;
java.util.Map v4;
java.lang.Class v1;
java.lang.Object v6;
java.lang.String v2;
java.util.function.Function v5;
io.smallrye.config.ConfigMappingContext v0;
v0 := @this: io.smallrye.config.ConfigMappingContext;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.smallrye.config.ConfigMappingObject;
v4 = v0.<io.smallrye.config.ConfigMappingContext: java.util.Map roots>;
v5 = staticinvoke <io.smallrye.config.ConfigMappingContext$lambda_registerRoot_0__3093: java.util.function.Function bootstrap$()>();
v6 = interfaceinvoke v4.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(v1, v5);
interfaceinvoke v6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v2, v3);
return;
}
public java.lang.Object getEnclosedField(java.lang.Class, java.lang.String, java.lang.Object)
{
io.smallrye.config.ConfigMappingContext v0;
java.util.Map v4, v5, v7;
java.lang.Class v1;
java.lang.Object v3, v6, v8, v9;
java.lang.String v2;
v0 := @this: io.smallrye.config.ConfigMappingContext;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.Object;
v4 = v0.<io.smallrye.config.ConfigMappingContext: java.util.Map enclosedThings>;
v5 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
v6 = interfaceinvoke v4.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>(v1, v5);
v7 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();
v8 = interfaceinvoke v6.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>(v2, v7);
v9 = interfaceinvoke v8.<java.util.Map: java.lang.Object get(java.lang.Object)>(v3);
return v9;
}
public void registerEnclosedField(java.lang.Class, java.lang.String, java.lang.Object, java.lang.Object)
{
java.util.function.Function v6, v8;
io.smallrye.config.ConfigMappingContext v0;
java.util.Map v5;
java.lang.Class v1;
java.lang.Object v3, v4, v7, v9;
java.lang.String v2;
v0 := @this: io.smallrye.config.ConfigMappingContext;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.Object;
v4 := @parameter3: java.lang.Object;
v5 = v0.<io.smallrye.config.ConfigMappingContext: java.util.Map enclosedThings>;
v6 = staticinvoke <io.smallrye.config.ConfigMappingContext$lambda_registerEnclosedField_1__3094: java.util.function.Function bootstrap$()>();
v7 = interfaceinvoke v5.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(v1, v6);
v8 = staticinvoke <io.smallrye.config.ConfigMappingContext$lambda_registerEnclosedField_2__3095: java.util.function.Function bootstrap$()>();
v9 = interfaceinvoke v7.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(v2, v8);
interfaceinvoke v9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v3, v4);
return;
}
public java.lang.Object constructRoot(java.lang.Class)
{
io.smallrye.config.ConfigMappingInterface v2;
java.lang.Class v1;
java.lang.Object v4;
io.smallrye.config.ConfigMappingContext v0;
io.smallrye.config.ConfigMappingInterface$NamingStrategy v3;
v0 := @this: io.smallrye.config.ConfigMappingContext;
v1 := @parameter0: java.lang.Class;
v2 = staticinvoke <io.smallrye.config.ConfigMappingInterface: io.smallrye.config.ConfigMappingInterface getConfigurationInterface(java.lang.Class)>(v1);
v3 = virtualinvoke v2.<io.smallrye.config.ConfigMappingInterface: io.smallrye.config.ConfigMappingInterface$NamingStrategy getNamingStrategy()>();
v0.<io.smallrye.config.ConfigMappingContext: io.smallrye.config.ConfigMappingInterface$NamingStrategy namingStrategy> = v3;
v4 = virtualinvoke v0.<io.smallrye.config.ConfigMappingContext: java.lang.Object constructGroup(java.lang.Class)>(v1);
return v4;
}
public java.lang.Object constructGroup(java.lang.Class)
{
java.util.List v3;
java.lang.Class v1;
java.lang.Object v2;
io.smallrye.config.ConfigMappingContext v0;
v0 := @this: io.smallrye.config.ConfigMappingContext;
v1 := @parameter0: java.lang.Class;
v2 = staticinvoke <io.smallrye.config.ConfigMappingLoader: java.lang.Object configMappingObject(java.lang.Class,io.smallrye.config.ConfigMappingContext)>(v1, v0);
v3 = v0.<io.smallrye.config.ConfigMappingContext: java.util.List allInstances>;
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v2);
return v2;
}
public org.eclipse.microprofile.config.spi.Converter getValueConverter(java.lang.Class, java.lang.String)
{
java.util.function.Function v4, v6;
io.smallrye.config.ConfigMappingContext v0;
java.util.Map v3;
java.lang.Class v1;
java.lang.Object v5, v7;
java.lang.String v2;
v0 := @this: io.smallrye.config.ConfigMappingContext;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.smallrye.config.ConfigMappingContext: java.util.Map convertersByTypeAndField>;
v4 = staticinvoke <io.smallrye.config.ConfigMappingContext$lambda_getValueConverter_3__3096: java.util.function.Function bootstrap$()>();
v5 = interfaceinvoke v3.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(v1, v4);
v6 = staticinvoke <io.smallrye.config.ConfigMappingContext$lambda_getValueConverter_4__3097: java.util.function.Function bootstrap$(io.smallrye.config.ConfigMappingContext,java.lang.Class,java.lang.String)>(v0, v1, v2);
v7 = interfaceinvoke v5.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(v2, v6);
return v7;
}
private org.eclipse.microprofile.config.spi.Converter getConverter(io.smallrye.config.ConfigMappingInterface$Property)
{
java.lang.IllegalStateException v43;
org.eclipse.microprofile.config.spi.Converter v12, v18, v23, v25, v30, v33, v42;
io.smallrye.config.ConfigMappingInterface$MayBeOptionalProperty v36, v39, v5, v8;
boolean v10, v2, v26, v28, v3, v34, v37, v6;
io.smallrye.config.ConfigMappingInterface$LeafProperty v9;
io.smallrye.config.ConfigMappingInterface$OptionalProperty v35, v38, v4, v7;
java.lang.reflect.Type v15, v16, v20, v21;
io.smallrye.config.ConfigMappingInterface$PrimitiveProperty v27;
io.smallrye.config.ConfigMappingInterface$Property v1, v41;
io.smallrye.config.ConfigMappingInterface$CollectionProperty v40;
io.smallrye.config.SmallRyeConfig v14, v19, v24, v31;
io.smallrye.config.ConfigMappingContext v0;
java.lang.Class v11, v13, v17, v22, v29, v32;
v0 := @this: io.smallrye.config.ConfigMappingContext;
v1 := @parameter0: io.smallrye.config.ConfigMappingInterface$Property;
v2 = virtualinvoke v1.<io.smallrye.config.ConfigMappingInterface$Property: boolean isOptional()>();
v3 = virtualinvoke v1.<io.smallrye.config.ConfigMappingInterface$Property: boolean isLeaf()>();
if v3 != 0 goto label01;
if v2 == 0 goto label07;
v4 = virtualinvoke v1.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$OptionalProperty asOptional()>();
v5 = virtualinvoke v4.<io.smallrye.config.ConfigMappingInterface$OptionalProperty: io.smallrye.config.ConfigMappingInterface$MayBeOptionalProperty getNestedProperty()>();
v6 = virtualinvoke v5.<io.smallrye.config.ConfigMappingInterface$MayBeOptionalProperty: boolean isLeaf()>();
if v6 == 0 goto label07;
label01:
if v2 == 0 goto label02;
v7 = virtualinvoke v1.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$OptionalProperty asOptional()>();
v8 = virtualinvoke v7.<io.smallrye.config.ConfigMappingInterface$OptionalProperty: io.smallrye.config.ConfigMappingInterface$MayBeOptionalProperty getNestedProperty()>();
v9 = virtualinvoke v8.<io.smallrye.config.ConfigMappingInterface$MayBeOptionalProperty: io.smallrye.config.ConfigMappingInterface$LeafProperty asLeaf()>();
goto label03;
label02:
v9 = virtualinvoke v1.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$LeafProperty asLeaf()>();
label03:
v10 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$LeafProperty: boolean hasConvertWith()>();
if v10 == 0 goto label04;
v11 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$LeafProperty: java.lang.Class getConvertWith()>();
v12 = virtualinvoke v0.<io.smallrye.config.ConfigMappingContext: org.eclipse.microprofile.config.spi.Converter getConverterInstance(java.lang.Class)>(v11);
return v12;
label04:
v13 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$LeafProperty: java.lang.Class getValueRawType()>();
if v13 != class "Ljava/util/List;" goto label05;
v14 = v0.<io.smallrye.config.ConfigMappingContext: io.smallrye.config.SmallRyeConfig config>;
v15 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$LeafProperty: java.lang.reflect.Type getValueType()>();
v16 = staticinvoke <io.smallrye.config.ConfigMappingInterface: java.lang.reflect.Type typeOfParameter(java.lang.reflect.Type,int)>(v15, 0);
v17 = staticinvoke <io.smallrye.config.ConfigMappingInterface: java.lang.Class rawTypeOf(java.lang.reflect.Type)>(v16);
v18 = virtualinvoke v14.<io.smallrye.config.SmallRyeConfig: org.eclipse.microprofile.config.spi.Converter requireConverter(java.lang.Class)>(v17);
return v18;
label05:
if v13 != class "Ljava/util/Set;" goto label06;
v19 = v0.<io.smallrye.config.ConfigMappingContext: io.smallrye.config.SmallRyeConfig config>;
v20 = virtualinvoke v9.<io.smallrye.config.ConfigMappingInterface$LeafProperty: java.lang.reflect.Type getValueType()>();
v21 = staticinvoke <io.smallrye.config.ConfigMappingInterface: java.lang.reflect.Type typeOfParameter(java.lang.reflect.Type,int)>(v20, 0);
v22 = staticinvoke <io.smallrye.config.ConfigMappingInterface: java.lang.Class rawTypeOf(java.lang.reflect.Type)>(v21);
v23 = virtualinvoke v19.<io.smallrye.config.SmallRyeConfig: org.eclipse.microprofile.config.spi.Converter requireConverter(java.lang.Class)>(v22);
return v23;
label06:
v24 = v0.<io.smallrye.config.ConfigMappingContext: io.smallrye.config.SmallRyeConfig config>;
v25 = virtualinvoke v24.<io.smallrye.config.SmallRyeConfig: org.eclipse.microprofile.config.spi.Converter requireConverter(java.lang.Class)>(v13);
return v25;
label07:
v26 = virtualinvoke v1.<io.smallrye.config.ConfigMappingInterface$Property: boolean isPrimitive()>();
if v26 == 0 goto label09;
v27 = virtualinvoke v1.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$PrimitiveProperty asPrimitive()>();
v28 = virtualinvoke v27.<io.smallrye.config.ConfigMappingInterface$PrimitiveProperty: boolean hasConvertWith()>();
if v28 == 0 goto label08;
v29 = virtualinvoke v27.<io.smallrye.config.ConfigMappingInterface$PrimitiveProperty: java.lang.Class getConvertWith()>();
v30 = virtualinvoke v0.<io.smallrye.config.ConfigMappingContext: org.eclipse.microprofile.config.spi.Converter getConverterInstance(java.lang.Class)>(v29);
return v30;
label08:
v31 = v0.<io.smallrye.config.ConfigMappingContext: io.smallrye.config.SmallRyeConfig config>;
v32 = virtualinvoke v27.<io.smallrye.config.ConfigMappingInterface$PrimitiveProperty: java.lang.Class getBoxType()>();
v33 = virtualinvoke v31.<io.smallrye.config.SmallRyeConfig: org.eclipse.microprofile.config.spi.Converter requireConverter(java.lang.Class)>(v32);
return v33;
label09:
v34 = virtualinvoke v1.<io.smallrye.config.ConfigMappingInterface$Property: boolean isCollection()>();
if v34 != 0 goto label10;
if v2 == 0 goto label13;
v35 = virtualinvoke v1.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$OptionalProperty asOptional()>();
v36 = virtualinvoke v35.<io.smallrye.config.ConfigMappingInterface$OptionalProperty: io.smallrye.config.ConfigMappingInterface$MayBeOptionalProperty getNestedProperty()>();
v37 = virtualinvoke v36.<io.smallrye.config.ConfigMappingInterface$MayBeOptionalProperty: boolean isCollection()>();
if v37 == 0 goto label13;
label10:
if v2 == 0 goto label11;
v38 = virtualinvoke v1.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$OptionalProperty asOptional()>();
v39 = virtualinvoke v38.<io.smallrye.config.ConfigMappingInterface$OptionalProperty: io.smallrye.config.ConfigMappingInterface$MayBeOptionalProperty getNestedProperty()>();
v40 = virtualinvoke v39.<io.smallrye.config.ConfigMappingInterface$MayBeOptionalProperty: io.smallrye.config.ConfigMappingInterface$CollectionProperty asCollection()>();
goto label12;
label11:
v40 = virtualinvoke v1.<io.smallrye.config.ConfigMappingInterface$Property: io.smallrye.config.ConfigMappingInterface$CollectionProperty asCollection()>();
label12:
v41 = virtualinvoke v40.<io.smallrye.config.ConfigMappingInterface$CollectionProperty: io.smallrye.config.ConfigMappingInterface$Property getElement()>();
v42 = specialinvoke v0.<io.smallrye.config.ConfigMappingContext: org.eclipse.microprofile.config.spi.Converter getConverter(io.smallrye.config.ConfigMappingInterface$Property)>(v41);
return v42;
label13:
v43 = new java.lang.IllegalStateException;
specialinvoke v43.<java.lang.IllegalStateException: void <init>()>();
throw v43;
}
public org.eclipse.microprofile.config.spi.Converter getKeyConverter(java.lang.Class, java.lang.String, int)
{
java.util.IdentityHashMap v6;
java.util.function.Function v10, v8;
io.smallrye.config.ConfigMappingContext v0;
java.util.List v4;
int v3, v5;
java.lang.Class v1;
java.lang.Object v11, v7, v9;
java.lang.String v2;
v0 := @this: io.smallrye.config.ConfigMappingContext;
v1 := @parameter0: java.lang.Class;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: int;
v4 = v0.<io.smallrye.config.ConfigMappingContext: java.util.List keyConvertersByDegreeTypeAndField>;
label1:
v5 = interfaceinvoke v4.<java.util.List: int size()>();
if v5 > v3 goto label2;
v6 = new java.util.IdentityHashMap;
specialinvoke v6.<java.util.IdentityHashMap: void <init>()>();
interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(v6);
goto label1;
label2:
v7 = interfaceinvoke v4.<java.util.List: java.lang.Object get(int)>(v3);
v8 = staticinvoke <io.smallrye.config.ConfigMappingContext$lambda_getKeyConverter_5__3098: java.util.function.Function bootstrap$()>();
v9 = interfaceinvoke v7.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(v1, v8);
v10 = staticinvoke <io.smallrye.config.ConfigMappingContext$lambda_getKeyConverter_6__3099: java.util.function.Function bootstrap$(io.smallrye.config.ConfigMappingContext,java.lang.Class,java.lang.String,int)>(v0, v1, v2, v3);
v11 = interfaceinvoke v9.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(v2, v10);
return v11;
}
public org.eclipse.microprofile.config.spi.Converter getConverterInstance(java.lang.Class)
{
java.util.Map v2;
java.lang.Class v1;
java.lang.Object v4;
java.util.function.Function v3;
io.smallrye.config.ConfigMappingContext v0;
v0 := @this: io.smallrye.config.ConfigMappingContext;
v1 := @parameter0: java.lang.Class;
v2 = v0.<io.smallrye.config.ConfigMappingContext: java.util.Map converterInstances>;
v3 = staticinvoke <io.smallrye.config.ConfigMappingContext$lambda_getConverterInstance_7__3100: java.util.function.Function bootstrap$()>();
v4 = interfaceinvoke v2.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(v1, v3);
return v4;
}
void applyNamingStrategy(io.smallrye.config.ConfigMappingInterface$NamingStrategy)
{
io.smallrye.config.ConfigMappingContext v0;
boolean v2;
io.smallrye.config.ConfigMappingInterface$NamingStrategy v1;
v0 := @this: io.smallrye.config.ConfigMappingContext;
v1 := @parameter0: io.smallrye.config.ConfigMappingInterface$NamingStrategy;
v2 = interfaceinvoke v1.<io.smallrye.config.ConfigMappingInterface$NamingStrategy: boolean isDefault()>();
if v2 != 0 goto label1;
v0.<io.smallrye.config.ConfigMappingContext: io.smallrye.config.ConfigMappingInterface$NamingStrategy namingStrategy> = v1;
label1:
return;
}
public java.lang.String applyNamingStrategy(java.lang.String)
{
java.lang.Object v3;
java.lang.String v1;
io.smallrye.config.ConfigMappingContext v0;
io.smallrye.config.ConfigMappingInterface$NamingStrategy v2;
v0 := @this: io.smallrye.config.ConfigMappingContext;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.smallrye.config.ConfigMappingContext: io.smallrye.config.ConfigMappingInterface$NamingStrategy namingStrategy>;
v3 = interfaceinvoke v2.<io.smallrye.config.ConfigMappingInterface$NamingStrategy: java.lang.Object apply(java.lang.Object)>(v1);
return v3;
}
public static java.util.function.IntFunction createCollectionFactory(java.lang.Class)
{
java.lang.Class v0;
java.lang.IllegalArgumentException v3;
java.util.function.IntFunction v1, v2;
v0 := @parameter0: java.lang.Class;
if v0 != class "Ljava/util/List;" goto label1;
v1 = staticinvoke <io.smallrye.config.ConfigMappingContext$init__3102: java.util.function.IntFunction bootstrap$()>();
return v1;
label1:
if v0 != class "Ljava/util/Set;" goto label2;
v2 = staticinvoke <io.smallrye.config.ConfigMappingContext$init__3101: java.util.function.IntFunction bootstrap$()>();
return v2;
label2:
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>()>();
throw v3;
}
public java.util.NoSuchElementException noSuchElement(java.lang.Class)
{
java.lang.Class v1;
java.lang.String v3, v4;
java.util.NoSuchElementException v2;
io.smallrye.config.ConfigMappingContext v0;
v0 := @this: io.smallrye.config.ConfigMappingContext;
v1 := @parameter0: java.lang.Class;
v2 = new java.util.NoSuchElementException;
v3 = virtualinvoke v1.<java.lang.Class: java.lang.String getName()>();
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("A required configuration group of type \u0001 was not provided");
specialinvoke v2.<java.util.NoSuchElementException: void <init>(java.lang.String)>(v4);
return v2;
}
void unknownProperty(java.lang.String)
{
java.util.Set v2;
java.lang.String v1;
io.smallrye.config.ConfigMappingContext v0;
v0 := @this: io.smallrye.config.ConfigMappingContext;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.smallrye.config.ConfigMappingContext: java.util.Set unknownProperties>;
interfaceinvoke v2.<java.util.Set: boolean add(java.lang.Object)>(v1);
return;
}
void validateUnknown(boolean)
{
java.lang.Iterable v4;
java.util.HashSet v2;
java.lang.String v10, v17, v24;
io.smallrye.config.ConfigValidationException$Problem v23;
boolean v1, v14, v16, v19, v21, v6, v9;
java.util.Iterator v13, v18, v5;
java.util.Set v11, v12, v8;
io.smallrye.config.SmallRyeConfig v3;
io.smallrye.config.ConfigMappingContext v0;
java.util.List v22;
java.lang.Object v15, v20, v7;
v0 := @this: io.smallrye.config.ConfigMappingContext;
v1 := @parameter0: boolean;
v2 = new java.util.HashSet;
specialinvoke v2.<java.util.HashSet: void <init>()>();
v3 = v0.<io.smallrye.config.ConfigMappingContext: io.smallrye.config.SmallRyeConfig config>;
v4 = virtualinvoke v3.<io.smallrye.config.SmallRyeConfig: java.lang.Iterable getPropertyNames()>();
v5 = interfaceinvoke v4.<java.lang.Iterable: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label2;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = v0.<io.smallrye.config.ConfigMappingContext: java.util.Set unknownProperties>;
v9 = interfaceinvoke v8.<java.util.Set: boolean contains(java.lang.Object)>(v7);
if v9 != 0 goto label1;
v10 = staticinvoke <io.smallrye.config.common.utils.StringUtil: java.lang.String replaceNonAlphanumericByUnderscores(java.lang.String)>(v7);
interfaceinvoke v2.<java.util.Set: boolean add(java.lang.Object)>(v10);
goto label1;
label2:
v11 = v0.<io.smallrye.config.ConfigMappingContext: java.util.Set unknownProperties>;
interfaceinvoke v2.<java.util.Set: boolean removeAll(java.util.Collection)>(v11);
v12 = v0.<io.smallrye.config.ConfigMappingContext: java.util.Set unknownProperties>;
v13 = interfaceinvoke v12.<java.util.Set: java.util.Iterator iterator()>();
label3:
v14 = interfaceinvoke v13.<java.util.Iterator: boolean hasNext()>();
if v14 == 0 goto label6;
v15 = interfaceinvoke v13.<java.util.Iterator: java.lang.Object next()>();
v16 = 0;
v17 = staticinvoke <io.smallrye.config.common.utils.StringUtil: java.lang.String replaceNonAlphanumericByUnderscores(java.lang.String)>(v15);
v18 = interfaceinvoke v2.<java.util.Set: java.util.Iterator iterator()>();
label4:
v19 = interfaceinvoke v18.<java.util.Iterator: boolean hasNext()>();
if v19 == 0 goto label5;
v20 = interfaceinvoke v18.<java.util.Iterator: java.lang.Object next()>();
v21 = virtualinvoke v20.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v17);
if v21 == 0 goto label4;
v16 = 1;
label5:
if v16 != 0 goto label3;
if v1 == 0 goto label3;
v22 = v0.<io.smallrye.config.ConfigMappingContext: java.util.List problems>;
v23 = new io.smallrye.config.ConfigValidationException$Problem;
v24 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v15) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 does not map to any root");
specialinvoke v23.<io.smallrye.config.ConfigValidationException$Problem: void <init>(java.lang.String)>(v24);
interfaceinvoke v22.<java.util.List: boolean add(java.lang.Object)>(v23);
goto label3;
label6:
return;
}
void fillInOptionals()
{
java.util.List v1;
java.util.Iterator v2;
java.lang.Object v4;
io.smallrye.config.ConfigMappingContext v0;
boolean v3;
v0 := @this: io.smallrye.config.ConfigMappingContext;
v1 = v0.<io.smallrye.config.ConfigMappingContext: java.util.List allInstances>;
v2 = interfaceinvoke v1.<java.util.List: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
interfaceinvoke v4.<io.smallrye.config.ConfigMappingObject: void fillInOptionals(io.smallrye.config.ConfigMappingContext)>(v0);
goto label1;
label2:
return;
}
public io.smallrye.config.SmallRyeConfig getConfig()
{
io.smallrye.config.SmallRyeConfig v1;
io.smallrye.config.ConfigMappingContext v0;
v0 := @this: io.smallrye.config.ConfigMappingContext;
v1 = v0.<io.smallrye.config.ConfigMappingContext: io.smallrye.config.SmallRyeConfig config>;
return v1;
}
public java.lang.StringBuilder getStringBuilder()
{
java.lang.StringBuilder v1;
io.smallrye.config.ConfigMappingContext v0;
v0 := @this: io.smallrye.config.ConfigMappingContext;
v1 = v0.<io.smallrye.config.ConfigMappingContext: java.lang.StringBuilder stringBuilder>;
return v1;
}
public void reportProblem(java.lang.RuntimeException)
{
java.util.List v2;
java.lang.RuntimeException v1;
java.lang.String v4;
io.smallrye.config.ConfigValidationException$Problem v3;
io.smallrye.config.ConfigMappingContext v0;
v0 := @this: io.smallrye.config.ConfigMappingContext;
v1 := @parameter0: java.lang.RuntimeException;
v2 = v0.<io.smallrye.config.ConfigMappingContext: java.util.List problems>;
v3 = new io.smallrye.config.ConfigValidationException$Problem;
v4 = virtualinvoke v1.<java.lang.RuntimeException: java.lang.String toString()>();
specialinvoke v3.<io.smallrye.config.ConfigValidationException$Problem: void <init>(java.lang.String)>(v4);
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v3);
return;
}
java.util.List getProblems()
{
java.util.List v1;
io.smallrye.config.ConfigMappingContext v0;
v0 := @this: io.smallrye.config.ConfigMappingContext;
v1 = v0.<io.smallrye.config.ConfigMappingContext: java.util.List problems>;
return v1;
}
java.util.Map getRootsMap()
{
io.smallrye.config.ConfigMappingContext v0;
java.util.Map v1;
v0 := @this: io.smallrye.config.ConfigMappingContext;
v1 = v0.<io.smallrye.config.ConfigMappingContext: java.util.Map roots>;
return v1;
}
}