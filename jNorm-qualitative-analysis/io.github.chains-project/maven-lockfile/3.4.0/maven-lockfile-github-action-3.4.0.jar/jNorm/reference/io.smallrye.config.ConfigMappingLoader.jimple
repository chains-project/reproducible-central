public final class io.smallrye.config.ConfigMappingLoader extends java.lang.Object
{
private static final java.lang.invoke.MethodHandles$Lookup LOOKUP;
private static final java.util.concurrent.ConcurrentHashMap classLoaderLocks;
private static final java.lang.ClassValue CACHE;
public void <init>()
{
io.smallrye.config.ConfigMappingLoader v0;
v0 := @this: io.smallrye.config.ConfigMappingLoader;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.util.List getConfigMappingsMetadata(java.lang.Class)
{
io.smallrye.config.ConfigMappingClass v9;
io.smallrye.config.ConfigMappingInterface v10, v2, v7;
java.util.ArrayList v1;
java.util.List v12, v3, v8;
int v5, v6;
io.smallrye.config.ConfigMappingInterface[] v4;
java.lang.Class v0, v11;
v0 := @parameter0: java.lang.Class;
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v2 = staticinvoke <io.smallrye.config.ConfigMappingInterface: io.smallrye.config.ConfigMappingInterface getConfigurationInterface(java.lang.Class)>(v0);
if v2 == null goto label2;
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v2);
v3 = virtualinvoke v2.<io.smallrye.config.ConfigMappingInterface: java.util.List getNested()>();
interfaceinvoke v1.<java.util.List: boolean addAll(java.util.Collection)>(v3);
v4 = virtualinvoke v2.<io.smallrye.config.ConfigMappingInterface: io.smallrye.config.ConfigMappingInterface[] getSuperTypes()>();
v5 = lengthof v4;
v6 = 0;
label1:
if v6 >= v5 goto label2;
v7 = v4[v6];
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v7);
v8 = virtualinvoke v7.<io.smallrye.config.ConfigMappingInterface: java.util.List getNested()>();
interfaceinvoke v1.<java.util.List: boolean addAll(java.util.Collection)>(v8);
v6 = v6 + 1;
goto label1;
label2:
v9 = staticinvoke <io.smallrye.config.ConfigMappingClass: io.smallrye.config.ConfigMappingClass getConfigurationClass(java.lang.Class)>(v0);
if v9 == null goto label3;
interfaceinvoke v1.<java.util.List: boolean add(java.lang.Object)>(v9);
v10 = staticinvoke <io.smallrye.config.ConfigMappingLoader: io.smallrye.config.ConfigMappingInterface getConfigMapping(java.lang.Class)>(v0);
v11 = virtualinvoke v10.<io.smallrye.config.ConfigMappingInterface: java.lang.Class getInterfaceType()>();
v12 = staticinvoke <io.smallrye.config.ConfigMappingLoader: java.util.List getConfigMappingsMetadata(java.lang.Class)>(v11);
interfaceinvoke v1.<java.util.List: boolean addAll(java.util.Collection)>(v12);
label3:
return v1;
}
public static io.smallrye.config.ConfigMappingInterface getConfigMapping(java.lang.Class)
{
io.smallrye.config.ConfigMappingInterface v2;
java.lang.Class v0, v1;
v0 := @parameter0: java.lang.Class;
v1 = staticinvoke <io.smallrye.config.ConfigMappingLoader: java.lang.Class getConfigMappingClass(java.lang.Class)>(v0);
v2 = staticinvoke <io.smallrye.config.ConfigMappingInterface: io.smallrye.config.ConfigMappingInterface getConfigurationInterface(java.lang.Class)>(v1);
return v2;
}
static java.lang.Class getConfigMappingClass(java.lang.Class)
{
java.lang.Class v0, v2;
io.smallrye.config.ConfigMappingClass v1;
v0 := @parameter0: java.lang.Class;
staticinvoke <io.smallrye.config.ConfigMappingLoader: void validateAnnotations(java.lang.Class)>(v0);
v1 = staticinvoke <io.smallrye.config.ConfigMappingClass: io.smallrye.config.ConfigMappingClass getConfigurationClass(java.lang.Class)>(v0);
if v1 != null goto label1;
return v0;
label1:
v2 = staticinvoke <io.smallrye.config.ConfigMappingLoader: java.lang.Class loadClass(java.lang.Class,io.smallrye.config.ConfigMappingMetadata)>(v0, v1);
return v2;
}
static java.lang.Object configMappingObject(java.lang.Class, io.smallrye.config.ConfigMappingContext)
{
java.lang.Throwable v19, v20;
java.lang.Object[] v7;
java.lang.NoSuchMethodException v9;
java.lang.reflect.Constructor v6;
java.lang.InstantiationException v12;
java.lang.String v11, v14, v17;
java.lang.IllegalAccessException v15;
java.lang.NoSuchMethodError v10;
java.lang.Class[] v5;
java.lang.reflect.UndeclaredThrowableException v21;
io.smallrye.config.ConfigMappingContext v1;
java.lang.reflect.InvocationTargetException v18;
java.lang.ClassValue v2;
java.lang.InstantiationError v13;
java.lang.IllegalAccessError v16;
java.lang.Class v0, v4;
java.lang.Object v22, v3, v8;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: io.smallrye.config.ConfigMappingContext;
label1:
v2 = <io.smallrye.config.ConfigMappingLoader: java.lang.ClassValue CACHE>;
v3 = virtualinvoke v2.<java.lang.ClassValue: java.lang.Object get(java.lang.Class)>(v0);
v4 = virtualinvoke v3.<io.smallrye.config.ConfigMappingLoader$ConfigMappingObjectHolder: java.lang.Class getImplementationClass()>();
v5 = newarray (java.lang.Class)[1];
v5[0] = class "Lio/smallrye/config/ConfigMappingContext;";
v6 = virtualinvoke v4.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>(v5);
v7 = newarray (java.lang.Object)[1];
v7[0] = v1;
v8 = virtualinvoke v6.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(v7);
label2:
goto label9;
label3:
v9 := @caughtexception;
v10 = new java.lang.NoSuchMethodError;
v11 = virtualinvoke v9.<java.lang.NoSuchMethodException: java.lang.String getMessage()>();
specialinvoke v10.<java.lang.NoSuchMethodError: void <init>(java.lang.String)>(v11);
throw v10;
label4:
v12 := @caughtexception;
v13 = new java.lang.InstantiationError;
v14 = virtualinvoke v12.<java.lang.InstantiationException: java.lang.String getMessage()>();
specialinvoke v13.<java.lang.InstantiationError: void <init>(java.lang.String)>(v14);
throw v13;
label5:
v15 := @caughtexception;
v16 = new java.lang.IllegalAccessError;
v17 = virtualinvoke v15.<java.lang.IllegalAccessException: java.lang.String getMessage()>();
specialinvoke v16.<java.lang.IllegalAccessError: void <init>(java.lang.String)>(v17);
throw v16;
label6:
v18 := @caughtexception;
label7:
v19 = virtualinvoke v18.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();
throw v19;
label8:
v20 := @caughtexception;
v21 = new java.lang.reflect.UndeclaredThrowableException;
specialinvoke v21.<java.lang.reflect.UndeclaredThrowableException: void <init>(java.lang.Throwable)>(v20);
throw v21;
label9:
v22 = virtualinvoke v0.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(v8);
return v22;
catch java.lang.NoSuchMethodException from label1 to label2 with label3;
catch java.lang.InstantiationException from label1 to label2 with label4;
catch java.lang.IllegalAccessException from label1 to label2 with label5;
catch java.lang.reflect.InvocationTargetException from label1 to label2 with label6;
catch java.lang.Throwable from label7 to label8 with label8;
}
public static java.lang.Class getImplementationClass(java.lang.Class)
{
io.smallrye.config.ConfigMessages v2;
io.smallrye.config.ConfigMappingInterface v1;
java.lang.Class v0, v4;
java.lang.IllegalArgumentException v3;
v0 := @parameter0: java.lang.Class;
v1 = staticinvoke <io.smallrye.config.ConfigMappingInterface: io.smallrye.config.ConfigMappingInterface getConfigurationInterface(java.lang.Class)>(v0);
if v1 != null goto label1;
v2 = <io.smallrye.config.ConfigMessages: io.smallrye.config.ConfigMessages msg>;
v3 = interfaceinvoke v2.<io.smallrye.config.ConfigMessages: java.lang.IllegalArgumentException classIsNotAMapping(java.lang.Class)>(v0);
throw v3;
label1:
v4 = staticinvoke <io.smallrye.config.ConfigMappingLoader: java.lang.Class loadClass(java.lang.Class,io.smallrye.config.ConfigMappingMetadata)>(v0, v1);
return v4;
}
static java.lang.Class loadClass(java.lang.Class, io.smallrye.config.ConfigMappingMetadata)
{
java.lang.Throwable v16;
byte[] v10, v14;
io.smallrye.config.ConfigMappingMetadata v1;
java.lang.String v13, v2, v5, v9;
boolean v7, v8;
java.lang.Class v0, v11, v15, v6;
java.lang.ClassNotFoundException v12;
java.lang.Object v3;
java.lang.ClassLoader v4;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: io.smallrye.config.ConfigMappingMetadata;
v2 = interfaceinvoke v1.<io.smallrye.config.ConfigMappingMetadata: java.lang.String getClassName()>();
v3 = staticinvoke <io.smallrye.config.ConfigMappingLoader: java.lang.Object getClassLoaderLock(java.lang.String)>(v2);
entermonitor v3;
label01:
v4 = virtualinvoke v0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
v5 = interfaceinvoke v1.<io.smallrye.config.ConfigMappingMetadata: java.lang.String getClassName()>();
v6 = virtualinvoke v4.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(v5);
v7 = virtualinvoke v0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v6);
if v7 == 0 goto label04;
label02:
exitmonitor v3;
label03:
return v6;
label04:
v8 = v1 instanceof io.smallrye.config.ConfigMappingClass;
if v8 == 0 goto label07;
label05:
exitmonitor v3;
label06:
return v6;
label07:
v9 = interfaceinvoke v1.<io.smallrye.config.ConfigMappingMetadata: java.lang.String getClassName()>();
v10 = interfaceinvoke v1.<io.smallrye.config.ConfigMappingMetadata: byte[] getClassBytes()>();
v11 = staticinvoke <io.smallrye.config.ConfigMappingLoader: java.lang.Class defineClass(java.lang.Class,java.lang.String,byte[])>(v0, v9, v10);
label08:
exitmonitor v3;
label09:
return v11;
label10:
v12 := @caughtexception;
v13 = interfaceinvoke v1.<io.smallrye.config.ConfigMappingMetadata: java.lang.String getClassName()>();
v14 = interfaceinvoke v1.<io.smallrye.config.ConfigMappingMetadata: byte[] getClassBytes()>();
v15 = staticinvoke <io.smallrye.config.ConfigMappingLoader: java.lang.Class defineClass(java.lang.Class,java.lang.String,byte[])>(v0, v13, v14);
exitmonitor v3;
label11:
return v15;
label12:
v16 := @caughtexception;
exitmonitor v3;
throw v16;
catch java.lang.ClassNotFoundException from label01 to label02 with label10;
catch java.lang.ClassNotFoundException from label04 to label05 with label10;
catch java.lang.ClassNotFoundException from label07 to label08 with label10;
catch java.lang.Throwable from label01 to label03 with label12;
catch java.lang.Throwable from label04 to label06 with label12;
catch java.lang.Throwable from label07 to label09 with label12;
catch java.lang.Throwable from label10 to label11 with label12;
}
static void validateAnnotations(java.lang.Class)
{
java.lang.IllegalStateException v4, v8;
io.smallrye.config.ConfigMessages v3, v7;
java.lang.Class v0;
boolean v1, v2, v5, v6;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: boolean isInterface()>();
if v1 != 0 goto label1;
v2 = virtualinvoke v0.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>(class "Lio/smallrye/config/ConfigMapping;");
if v2 == 0 goto label1;
v3 = <io.smallrye.config.ConfigMessages: io.smallrye.config.ConfigMessages msg>;
v4 = interfaceinvoke v3.<io.smallrye.config.ConfigMessages: java.lang.IllegalStateException mappingAnnotationNotSupportedInClass(java.lang.Class)>(v0);
throw v4;
label1:
v5 = virtualinvoke v0.<java.lang.Class: boolean isInterface()>();
if v5 == 0 goto label2;
v6 = virtualinvoke v0.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/eclipse/microprofile/config/inject/ConfigProperties;");
if v6 == 0 goto label2;
v7 = <io.smallrye.config.ConfigMessages: io.smallrye.config.ConfigMessages msg>;
v8 = interfaceinvoke v7.<io.smallrye.config.ConfigMessages: java.lang.IllegalStateException propertiesAnnotationNotSupportedInInterface(java.lang.Class)>(v0);
throw v8;
label2:
return;
}
private static java.lang.Class defineClass(java.lang.Class, java.lang.String, byte[])
{
byte[] v2;
java.lang.invoke.MethodHandles$Lookup v3;
java.lang.Class v0, v4;
java.lang.String v1;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: byte[];
v3 = <io.smallrye.config.ConfigMappingLoader: java.lang.invoke.MethodHandles$Lookup LOOKUP>;
v4 = staticinvoke <io.smallrye.common.classloader.ClassDefiner: java.lang.Class defineClass(java.lang.invoke.MethodHandles$Lookup,java.lang.Class,java.lang.String,byte[])>(v3, v0, v1, v2);
return v4;
}
private static java.lang.Object getClassLoaderLock(java.lang.String)
{
java.util.concurrent.ConcurrentHashMap v1;
java.lang.Object v3;
java.lang.String v0;
java.util.function.Function v2;
v0 := @parameter0: java.lang.String;
v1 = <io.smallrye.config.ConfigMappingLoader: java.util.concurrent.ConcurrentHashMap classLoaderLocks>;
v2 = staticinvoke <io.smallrye.config.ConfigMappingLoader$lambda_getClassLoaderLock_0__3111: java.util.function.Function bootstrap$()>();
v3 = virtualinvoke v1.<java.util.concurrent.ConcurrentHashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(v0, v2);
return v3;
}
static void <clinit>()
{
java.util.concurrent.ConcurrentHashMap v1;
java.lang.invoke.MethodHandles$Lookup v0;
io.smallrye.config.ConfigMappingLoader$1 v2;
v0 = staticinvoke <java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles$Lookup lookup()>();
<io.smallrye.config.ConfigMappingLoader: java.lang.invoke.MethodHandles$Lookup LOOKUP> = v0;
v1 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
<io.smallrye.config.ConfigMappingLoader: java.util.concurrent.ConcurrentHashMap classLoaderLocks> = v1;
v2 = new io.smallrye.config.ConfigMappingLoader$1;
specialinvoke v2.<io.smallrye.config.ConfigMappingLoader$1: void <init>()>();
<io.smallrye.config.ConfigMappingLoader: java.lang.ClassValue CACHE> = v2;
return;
}
}