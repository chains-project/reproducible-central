class io.smallrye.config.ImplicitConverters extends java.lang.Object
{
private void <init>()
{
io.smallrye.config.ImplicitConverters v0;
v0 := @this: io.smallrye.config.ImplicitConverters;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static org.eclipse.microprofile.config.spi.Converter getConverter(java.lang.Class)
{
org.eclipse.microprofile.config.spi.Converter v3;
java.lang.Class v0;
io.smallrye.config.ImplicitConverters$HyphenateEnumConverter v2;
boolean v1;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: boolean isEnum()>();
if v1 == 0 goto label1;
v2 = new io.smallrye.config.ImplicitConverters$HyphenateEnumConverter;
specialinvoke v2.<io.smallrye.config.ImplicitConverters$HyphenateEnumConverter: void <init>(java.lang.Class)>(v0);
return v2;
label1:
v3 = staticinvoke <io.smallrye.config.ImplicitConverters: org.eclipse.microprofile.config.spi.Converter getConverterFromStaticMethod(java.lang.Class,java.lang.String,java.lang.Class)>(v0, "of", class "Ljava/lang/String;");
if v3 != null goto label2;
v3 = staticinvoke <io.smallrye.config.ImplicitConverters: org.eclipse.microprofile.config.spi.Converter getConverterFromStaticMethod(java.lang.Class,java.lang.String,java.lang.Class)>(v0, "of", class "Ljava/lang/CharSequence;");
if v3 != null goto label2;
v3 = staticinvoke <io.smallrye.config.ImplicitConverters: org.eclipse.microprofile.config.spi.Converter getConverterFromStaticMethod(java.lang.Class,java.lang.String,java.lang.Class)>(v0, "valueOf", class "Ljava/lang/String;");
if v3 != null goto label2;
v3 = staticinvoke <io.smallrye.config.ImplicitConverters: org.eclipse.microprofile.config.spi.Converter getConverterFromStaticMethod(java.lang.Class,java.lang.String,java.lang.Class)>(v0, "valueOf", class "Ljava/lang/CharSequence;");
if v3 != null goto label2;
v3 = staticinvoke <io.smallrye.config.ImplicitConverters: org.eclipse.microprofile.config.spi.Converter getConverterFromStaticMethod(java.lang.Class,java.lang.String,java.lang.Class)>(v0, "parse", class "Ljava/lang/String;");
if v3 != null goto label2;
v3 = staticinvoke <io.smallrye.config.ImplicitConverters: org.eclipse.microprofile.config.spi.Converter getConverterFromStaticMethod(java.lang.Class,java.lang.String,java.lang.Class)>(v0, "parse", class "Ljava/lang/CharSequence;");
if v3 != null goto label2;
v3 = staticinvoke <io.smallrye.config.ImplicitConverters: org.eclipse.microprofile.config.spi.Converter getConverterFromConstructor(java.lang.Class,java.lang.Class)>(v0, class "Ljava/lang/String;");
if v3 != null goto label2;
v3 = staticinvoke <io.smallrye.config.ImplicitConverters: org.eclipse.microprofile.config.spi.Converter getConverterFromConstructor(java.lang.Class,java.lang.Class)>(v0, class "Ljava/lang/CharSequence;");
label2:
return v3;
}
private static org.eclipse.microprofile.config.spi.Converter getConverterFromConstructor(java.lang.Class, java.lang.Class)
{
io.smallrye.config.ImplicitConverters$ConstructorConverter v5;
java.lang.NoSuchMethodException v6;
java.lang.Class[] v2;
java.lang.Class v0, v1;
java.lang.reflect.Constructor v3;
boolean v4;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Class;
label1:
v2 = newarray (java.lang.Class)[1];
v2[0] = v1;
v3 = staticinvoke <io.smallrye.config.SecuritySupport: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class,java.lang.Class[])>(v0, v2);
v4 = staticinvoke <io.smallrye.config.ImplicitConverters: boolean isAccessible(java.lang.reflect.Executable)>(v3);
if v4 != 0 goto label2;
staticinvoke <io.smallrye.config.SecuritySupport: void setAccessible(java.lang.reflect.AccessibleObject,boolean)>(v3, 1);
label2:
v5 = new io.smallrye.config.ImplicitConverters$ConstructorConverter;
specialinvoke v5.<io.smallrye.config.ImplicitConverters$ConstructorConverter: void <init>(java.lang.reflect.Constructor)>(v3);
label3:
return v5;
label4:
v6 := @caughtexception;
return null;
catch java.lang.NoSuchMethodException from label1 to label3 with label4;
}
private static org.eclipse.microprofile.config.spi.Converter getConverterFromStaticMethod(java.lang.Class, java.lang.String, java.lang.Class)
{
io.smallrye.config.ImplicitConverters$StaticMethodConverter v9;
java.lang.NoSuchMethodException v10;
java.lang.Class[] v3;
int v6;
java.lang.Class v0, v2, v5;
java.lang.String v1;
java.lang.reflect.Method v4;
boolean v7, v8;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.Class;
label1:
v3 = newarray (java.lang.Class)[1];
v3[0] = v2;
v4 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(v1, v3);
v5 = virtualinvoke v4.<java.lang.reflect.Method: java.lang.Class getReturnType()>();
if v0 == v5 goto label3;
label2:
return null;
label3:
v6 = virtualinvoke v4.<java.lang.reflect.Method: int getModifiers()>();
v7 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(v6);
if v7 != 0 goto label5;
label4:
return null;
label5:
v8 = staticinvoke <io.smallrye.config.ImplicitConverters: boolean isAccessible(java.lang.reflect.Executable)>(v4);
if v8 != 0 goto label6;
staticinvoke <io.smallrye.config.SecuritySupport: void setAccessible(java.lang.reflect.AccessibleObject,boolean)>(v4, 1);
label6:
v9 = new io.smallrye.config.ImplicitConverters$StaticMethodConverter;
specialinvoke v9.<io.smallrye.config.ImplicitConverters$StaticMethodConverter: void <init>(java.lang.Class,java.lang.reflect.Method)>(v0, v4);
label7:
return v9;
label8:
v10 := @caughtexception;
return null;
catch java.lang.NoSuchMethodException from label1 to label2 with label8;
catch java.lang.NoSuchMethodException from label3 to label4 with label8;
catch java.lang.NoSuchMethodException from label5 to label7 with label8;
}
private static boolean isAccessible(java.lang.reflect.Executable)
{
int v1, v4;
java.lang.reflect.Executable v0;
java.lang.Class v3;
boolean v2, v5, v6, v7;
v0 := @parameter0: java.lang.reflect.Executable;
v1 = virtualinvoke v0.<java.lang.reflect.Executable: int getModifiers()>();
v2 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>(v1);
if v2 == 0 goto label1;
v3 = virtualinvoke v0.<java.lang.reflect.Executable: java.lang.Class getDeclaringClass()>();
v4 = virtualinvoke v3.<java.lang.Class: int getModifiers()>();
v5 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>(v4);
if v5 != 0 goto label2;
label1:
v6 = virtualinvoke v0.<java.lang.reflect.Executable: boolean isAccessible()>();
if v6 == 0 goto label3;
label2:
v7 = 1;
goto label4;
label3:
v7 = 0;
label4:
return v7;
}
}