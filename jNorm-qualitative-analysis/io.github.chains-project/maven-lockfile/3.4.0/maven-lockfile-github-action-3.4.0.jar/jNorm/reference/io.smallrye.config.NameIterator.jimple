public final class io.smallrye.config.NameIterator extends java.lang.Object
{
public static final int MAX_LENGTH;
private static final int POS_MASK;
private static final int POS_BITS;
private static final int SE_SHIFT;
private final java.lang.String name;
private int pos;
private static final int FS_INITIAL;
private static final int FS_QUOTE;
private static final int FS_BACKSLASH;
private static final int FS_QUOTE_BACKSLASH;
static final boolean $assertionsDisabled;
public void <init>(java.lang.String)
{
java.lang.String v1;
io.smallrye.config.NameIterator v0;
v0 := @this: io.smallrye.config.NameIterator;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<io.smallrye.config.NameIterator: void <init>(java.lang.String,boolean)>(v1, 0);
return;
}
public void <init>(java.lang.String, boolean)
{
io.smallrye.config.NameIterator v0;
int v3, v4;
java.lang.String v1;
boolean v2;
v0 := @this: io.smallrye.config.NameIterator;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: boolean;
if v2 == 0 goto label1;
v3 = virtualinvoke v1.<java.lang.String: int length()>();
goto label2;
label1:
v4 = (int) -1;
v3 = v4;
label2:
specialinvoke v0.<io.smallrye.config.NameIterator: void <init>(java.lang.String,int)>(v1, v3);
return;
}
public void <init>(java.lang.String, int)
{
char v9;
java.lang.IllegalArgumentException v10, v4;
io.smallrye.config.NameIterator v0;
int v2, v3, v5, v6, v7, v8;
java.lang.String v1;
v0 := @this: io.smallrye.config.NameIterator;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
staticinvoke <io.smallrye.common.constraint.Assert: java.lang.Object checkNotNullParam(java.lang.String,java.lang.Object)>("name", v1);
v3 = virtualinvoke v1.<java.lang.String: int length()>();
if v3 <= 2048 goto label1;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Name is too long");
throw v4;
label1:
v5 = (int) -1;
staticinvoke <io.smallrye.common.constraint.Assert: void checkMinimumParameter(java.lang.String,int,int)>("pos", v5, v2);
v6 = virtualinvoke v1.<java.lang.String: int length()>();
staticinvoke <io.smallrye.common.constraint.Assert: void checkMaximumParameter(java.lang.String,int,int)>("pos", v6, v2);
v7 = (int) -1;
if v2 == v7 goto label2;
v8 = virtualinvoke v1.<java.lang.String: int length()>();
if v2 == v8 goto label2;
v9 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v2);
if v9 == 46 goto label2;
v10 = new java.lang.IllegalArgumentException;
specialinvoke v10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Position is not located at a delimiter");
throw v10;
label2:
v0.<io.smallrye.config.NameIterator: java.lang.String name> = v1;
v0.<io.smallrye.config.NameIterator: int pos> = v2;
return;
}
public void goToEnd()
{
int v2;
java.lang.String v1;
io.smallrye.config.NameIterator v0;
v0 := @this: io.smallrye.config.NameIterator;
v1 = v0.<io.smallrye.config.NameIterator: java.lang.String name>;
v2 = virtualinvoke v1.<java.lang.String: int length()>();
v0.<io.smallrye.config.NameIterator: int pos> = v2;
return;
}
public void goToStart()
{
int v1;
io.smallrye.config.NameIterator v0;
v0 := @this: io.smallrye.config.NameIterator;
v1 = (int) -1;
v0.<io.smallrye.config.NameIterator: int pos> = v1;
return;
}
public int getPosition()
{
int v1;
io.smallrye.config.NameIterator v0;
v0 := @this: io.smallrye.config.NameIterator;
v1 = v0.<io.smallrye.config.NameIterator: int pos>;
return v1;
}
private int initIteration()
{
int v1, v2;
io.smallrye.config.NameIterator v0;
v0 := @this: io.smallrye.config.NameIterator;
v1 = v0.<io.smallrye.config.NameIterator: int pos>;
v2 = v1 & 4095;
return v2;
}
private int cookieOf(int, int)
{
io.smallrye.config.NameIterator v0;
int v1, v2, v3, v4, v5;
v0 := @this: io.smallrye.config.NameIterator;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 = v1 << 12;
v4 = v2 & 4095;
v5 = v3 | v4;
return v5;
}
private int getPosition(int)
{
io.smallrye.config.NameIterator v0;
int v1, v2, v3, v4;
v0 := @this: io.smallrye.config.NameIterator;
v1 := @parameter0: int;
v2 = v1 & 4095;
v3 = v2 << 20;
v4 = v3 >> 20;
return v4;
}
private int getState(int)
{
int v1, v2;
io.smallrye.config.NameIterator v0;
v0 := @this: io.smallrye.config.NameIterator;
v1 := @parameter0: int;
v2 = v1 >> 12;
return v2;
}
private int nextPos(int)
{
java.lang.AssertionError v16;
int v1, v11, v12, v13, v14, v17, v2, v5, v7, v8;
java.lang.String v6, v9;
java.util.NoSuchElementException v4;
boolean v15, v3;
char v10;
io.smallrye.config.NameIterator v0;
v0 := @this: io.smallrye.config.NameIterator;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.smallrye.config.NameIterator: int getPosition(int)>(v1);
v3 = specialinvoke v0.<io.smallrye.config.NameIterator: boolean isEndOfString(int)>(v1);
if v3 == 0 goto label01;
v4 = new java.util.NoSuchElementException;
specialinvoke v4.<java.util.NoSuchElementException: void <init>()>();
throw v4;
label01:
v5 = specialinvoke v0.<io.smallrye.config.NameIterator: int getState(int)>(v1);
label02:
v2 = v2 + 1;
v6 = v0.<io.smallrye.config.NameIterator: java.lang.String name>;
v7 = virtualinvoke v6.<java.lang.String: int length()>();
if v2 != v7 goto label03;
v8 = specialinvoke v0.<io.smallrye.config.NameIterator: int cookieOf(int,int)>(v5, v2);
return v8;
label03:
v9 = v0.<io.smallrye.config.NameIterator: java.lang.String name>;
v10 = virtualinvoke v9.<java.lang.String: char charAt(int)>(v2);
if v5 != 0 goto label07;
if v10 != 46 goto label04;
v11 = specialinvoke v0.<io.smallrye.config.NameIterator: int cookieOf(int,int)>(v5, v2);
return v11;
label04:
if v10 != 34 goto label05;
v5 = 1;
goto label02;
label05:
if v10 != 92 goto label06;
v5 = 2;
goto label02;
label06:
v12 = specialinvoke v0.<io.smallrye.config.NameIterator: int cookieOf(int,int)>(v5, v2);
return v12;
label07:
if v5 != 1 goto label10;
if v10 != 34 goto label08;
v5 = 0;
goto label02;
label08:
if v10 != 92 goto label09;
v5 = 3;
goto label02;
label09:
v13 = specialinvoke v0.<io.smallrye.config.NameIterator: int cookieOf(int,int)>(v5, v2);
return v13;
label10:
if v5 != 2 goto label11;
v14 = specialinvoke v0.<io.smallrye.config.NameIterator: int cookieOf(int,int)>(0, v2);
return v14;
label11:
v15 = <io.smallrye.config.NameIterator: boolean $assertionsDisabled>;
if v15 != 0 goto label12;
if v5 == 3 goto label12;
v16 = new java.lang.AssertionError;
specialinvoke v16.<java.lang.AssertionError: void <init>()>();
throw v16;
label12:
v17 = specialinvoke v0.<io.smallrye.config.NameIterator: int cookieOf(int,int)>(1, v2);
return v17;
}
private int prevPos(int)
{
java.lang.IllegalStateException v21;
int v1, v11, v13, v14, v15, v17, v19, v2, v20, v5, v6, v7;
java.lang.String v10, v16, v8;
java.util.NoSuchElementException v4;
boolean v3;
char v12, v18, v9;
io.smallrye.config.NameIterator v0;
v0 := @this: io.smallrye.config.NameIterator;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.smallrye.config.NameIterator: int getPosition(int)>(v1);
v3 = specialinvoke v0.<io.smallrye.config.NameIterator: boolean isStartOfString(int)>(v1);
if v3 == 0 goto label01;
v4 = new java.util.NoSuchElementException;
specialinvoke v4.<java.util.NoSuchElementException: void <init>()>();
throw v4;
label01:
v5 = specialinvoke v0.<io.smallrye.config.NameIterator: int getState(int)>(v1);
label02:
v2 = v2 - 1;
v6 = (int) -1;
if v2 != v6 goto label03;
v7 = specialinvoke v0.<io.smallrye.config.NameIterator: int cookieOf(int,int)>(v5, v2);
return v7;
label03:
v8 = v0.<io.smallrye.config.NameIterator: java.lang.String name>;
v9 = virtualinvoke v8.<java.lang.String: char charAt(int)>(v2);
if v5 != 0 goto label07;
if v2 < 1 goto label04;
v10 = v0.<io.smallrye.config.NameIterator: java.lang.String name>;
v11 = v2 - 1;
v12 = virtualinvoke v10.<java.lang.String: char charAt(int)>(v11);
if v12 != 92 goto label04;
v13 = specialinvoke v0.<io.smallrye.config.NameIterator: int cookieOf(int,int)>(v5, v2);
return v13;
label04:
if v9 != 46 goto label05;
v14 = specialinvoke v0.<io.smallrye.config.NameIterator: int cookieOf(int,int)>(v5, v2);
return v14;
label05:
if v9 != 34 goto label06;
v5 = 1;
goto label02;
label06:
if v9 == 92 goto label02;
v15 = specialinvoke v0.<io.smallrye.config.NameIterator: int cookieOf(int,int)>(v5, v2);
return v15;
label07:
if v5 != 1 goto label10;
if v2 < 1 goto label08;
v16 = v0.<io.smallrye.config.NameIterator: java.lang.String name>;
v17 = v2 - 1;
v18 = virtualinvoke v16.<java.lang.String: char charAt(int)>(v17);
if v18 != 92 goto label08;
v19 = specialinvoke v0.<io.smallrye.config.NameIterator: int cookieOf(int,int)>(v5, v2);
return v19;
label08:
if v9 != 34 goto label09;
v5 = 0;
goto label02;
label09:
if v9 == 92 goto label02;
v20 = specialinvoke v0.<io.smallrye.config.NameIterator: int cookieOf(int,int)>(v5, v2);
return v20;
label10:
v21 = staticinvoke <io.smallrye.common.constraint.Assert: java.lang.IllegalStateException unreachableCode()>();
throw v21;
}
private boolean isSegmentDelimiter(int)
{
io.smallrye.config.NameIterator v0;
int v1, v4, v5;
boolean v2, v3, v6;
v0 := @this: io.smallrye.config.NameIterator;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.smallrye.config.NameIterator: boolean isStartOfString(int)>(v1);
if v2 != 0 goto label1;
v3 = specialinvoke v0.<io.smallrye.config.NameIterator: boolean isEndOfString(int)>(v1);
if v3 != 0 goto label1;
v4 = specialinvoke v0.<io.smallrye.config.NameIterator: int getState(int)>(v1);
if v4 != 0 goto label2;
v5 = specialinvoke v0.<io.smallrye.config.NameIterator: int charAt(int)>(v1);
if v5 != 46 goto label2;
label1:
v6 = 1;
goto label3;
label2:
v6 = 0;
label3:
return v6;
}
private boolean isEndOfString(int)
{
io.smallrye.config.NameIterator v0;
int v1, v2, v4;
java.lang.String v3;
boolean v5;
v0 := @this: io.smallrye.config.NameIterator;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.smallrye.config.NameIterator: int getPosition(int)>(v1);
v3 = v0.<io.smallrye.config.NameIterator: java.lang.String name>;
v4 = virtualinvoke v3.<java.lang.String: int length()>();
if v2 != v4 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
private boolean isStartOfString(int)
{
io.smallrye.config.NameIterator v0;
int v1, v2, v3;
boolean v4;
v0 := @this: io.smallrye.config.NameIterator;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.smallrye.config.NameIterator: int getPosition(int)>(v1);
v3 = (int) -1;
if v2 != v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
private int charAt(int)
{
io.smallrye.config.NameIterator v0;
int v1, v3;
char v4;
java.lang.String v2;
v0 := @this: io.smallrye.config.NameIterator;
v1 := @parameter0: int;
v2 = v0.<io.smallrye.config.NameIterator: java.lang.String name>;
v3 = specialinvoke v0.<io.smallrye.config.NameIterator: int getPosition(int)>(v1);
v4 = virtualinvoke v2.<java.lang.String: char charAt(int)>(v3);
return v4;
}
public int getPreviousStart()
{
io.smallrye.config.NameIterator v0;
int v1, v3, v4;
boolean v2;
v0 := @this: io.smallrye.config.NameIterator;
v1 = specialinvoke v0.<io.smallrye.config.NameIterator: int initIteration()>();
label1:
v1 = specialinvoke v0.<io.smallrye.config.NameIterator: int prevPos(int)>(v1);
v2 = specialinvoke v0.<io.smallrye.config.NameIterator: boolean isSegmentDelimiter(int)>(v1);
if v2 == 0 goto label1;
v3 = specialinvoke v0.<io.smallrye.config.NameIterator: int getPosition(int)>(v1);
v4 = v3 + 1;
return v4;
}
public int getNextEnd()
{
io.smallrye.config.NameIterator v0;
int v1, v3;
boolean v2;
v0 := @this: io.smallrye.config.NameIterator;
v1 = specialinvoke v0.<io.smallrye.config.NameIterator: int initIteration()>();
label1:
v1 = specialinvoke v0.<io.smallrye.config.NameIterator: int nextPos(int)>(v1);
v2 = specialinvoke v0.<io.smallrye.config.NameIterator: boolean isSegmentDelimiter(int)>(v1);
if v2 == 0 goto label1;
v3 = specialinvoke v0.<io.smallrye.config.NameIterator: int getPosition(int)>(v1);
return v3;
}
public boolean nextSegmentEquals(java.lang.String)
{
io.smallrye.config.NameIterator v0;
int v2;
java.lang.String v1;
boolean v3;
v0 := @this: io.smallrye.config.NameIterator;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v1.<java.lang.String: int length()>();
v3 = virtualinvoke v0.<io.smallrye.config.NameIterator: boolean nextSegmentEquals(java.lang.String,int,int)>(v1, 0, v2);
return v3;
}
public boolean nextSegmentEquals(java.lang.String, int, int)
{
char v9;
io.smallrye.config.NameIterator v0;
int v10, v2, v3, v4, v5, v8;
java.lang.String v1;
boolean v6, v7;
v0 := @this: io.smallrye.config.NameIterator;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = specialinvoke v0.<io.smallrye.config.NameIterator: int initIteration()>();
v5 = 0;
label1:
v4 = specialinvoke v0.<io.smallrye.config.NameIterator: int nextPos(int)>(v4);
v6 = specialinvoke v0.<io.smallrye.config.NameIterator: boolean isSegmentDelimiter(int)>(v4);
if v6 == 0 goto label4;
if v5 != v3 goto label2;
v7 = 1;
goto label3;
label2:
v7 = 0;
label3:
return v7;
label4:
if v5 != v3 goto label5;
return 0;
label5:
v8 = v2 + v5;
v9 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v8);
v10 = specialinvoke v0.<io.smallrye.config.NameIterator: int charAt(int)>(v4);
if v9 == v10 goto label6;
return 0;
label6:
v5 = v5 + 1;
goto label1;
}
public java.lang.String getNextSegment()
{
io.smallrye.config.NameIterator v0;
int v2, v5;
java.lang.StringBuilder v1;
java.lang.String v4;
boolean v3;
v0 := @this: io.smallrye.config.NameIterator;
v1 = new java.lang.StringBuilder;
specialinvoke v1.<java.lang.StringBuilder: void <init>()>();
v2 = specialinvoke v0.<io.smallrye.config.NameIterator: int initIteration()>();
label1:
v2 = specialinvoke v0.<io.smallrye.config.NameIterator: int nextPos(int)>(v2);
v3 = specialinvoke v0.<io.smallrye.config.NameIterator: boolean isSegmentDelimiter(int)>(v2);
if v3 == 0 goto label2;
v4 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.String toString()>();
return v4;
label2:
v5 = specialinvoke v0.<io.smallrye.config.NameIterator: int charAt(int)>(v2);
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v5);
goto label1;
}
public boolean previousSegmentEquals(java.lang.String)
{
io.smallrye.config.NameIterator v0;
int v2;
java.lang.String v1;
boolean v3;
v0 := @this: io.smallrye.config.NameIterator;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v1.<java.lang.String: int length()>();
v3 = virtualinvoke v0.<io.smallrye.config.NameIterator: boolean previousSegmentEquals(java.lang.String,int,int)>(v1, 0, v2);
return v3;
}
public boolean previousSegmentEquals(java.lang.String, int, int)
{
char v11;
io.smallrye.config.NameIterator v0;
int v10, v12, v2, v3, v4, v5, v7, v9;
java.lang.String v1;
boolean v6, v8;
v0 := @this: io.smallrye.config.NameIterator;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = specialinvoke v0.<io.smallrye.config.NameIterator: int initIteration()>();
v5 = v3;
label1:
v5 = v5 - 1;
v4 = specialinvoke v0.<io.smallrye.config.NameIterator: int prevPos(int)>(v4);
v6 = specialinvoke v0.<io.smallrye.config.NameIterator: boolean isSegmentDelimiter(int)>(v4);
if v6 == 0 goto label4;
v7 = (int) -1;
if v5 != v7 goto label2;
v8 = 1;
goto label3;
label2:
v8 = 0;
label3:
return v8;
label4:
v9 = (int) -1;
if v5 != v9 goto label5;
return 0;
label5:
v10 = v2 + v5;
v11 = virtualinvoke v1.<java.lang.String: char charAt(int)>(v10);
v12 = specialinvoke v0.<io.smallrye.config.NameIterator: int charAt(int)>(v4);
if v11 == v12 goto label1;
return 0;
}
public java.lang.String getPreviousSegment()
{
io.smallrye.config.NameIterator v0;
int v2, v6;
java.lang.StringBuilder v1, v4;
java.lang.String v5;
boolean v3;
v0 := @this: io.smallrye.config.NameIterator;
v1 = new java.lang.StringBuilder;
specialinvoke v1.<java.lang.StringBuilder: void <init>()>();
v2 = specialinvoke v0.<io.smallrye.config.NameIterator: int initIteration()>();
label1:
v2 = specialinvoke v0.<io.smallrye.config.NameIterator: int prevPos(int)>(v2);
v3 = specialinvoke v0.<io.smallrye.config.NameIterator: boolean isSegmentDelimiter(int)>(v2);
if v3 == 0 goto label2;
v4 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder reverse()>();
v5 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.String toString()>();
return v5;
label2:
v6 = specialinvoke v0.<io.smallrye.config.NameIterator: int charAt(int)>(v2);
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v6);
goto label1;
}
public java.lang.String getAllPreviousSegments()
{
io.smallrye.config.NameIterator v0;
int v1, v2;
java.lang.String v3, v4;
v0 := @this: io.smallrye.config.NameIterator;
v1 = virtualinvoke v0.<io.smallrye.config.NameIterator: int getPosition()>();
v2 = (int) -1;
if v1 != v2 goto label1;
return "";
label1:
v3 = v0.<io.smallrye.config.NameIterator: java.lang.String name>;
v4 = virtualinvoke v3.<java.lang.String: java.lang.String substring(int,int)>(0, v1);
return v4;
}
public java.lang.String getAllPreviousSegmentsWith(java.lang.String)
{
io.smallrye.config.NameIterator v0;
int v2, v3;
java.lang.String v1, v4, v5, v6;
v0 := @this: io.smallrye.config.NameIterator;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.smallrye.config.NameIterator: int getPosition()>();
v3 = (int) -1;
if v2 != v3 goto label1;
return v1;
label1:
v4 = v0.<io.smallrye.config.NameIterator: java.lang.String name>;
v5 = virtualinvoke v4.<java.lang.String: java.lang.String substring(int,int)>(0, v2);
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v5, v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.\u0001");
return v6;
}
public boolean hasNext()
{
io.smallrye.config.NameIterator v0;
int v1, v3;
java.lang.String v2;
boolean v4;
v0 := @this: io.smallrye.config.NameIterator;
v1 = v0.<io.smallrye.config.NameIterator: int pos>;
v2 = v0.<io.smallrye.config.NameIterator: java.lang.String name>;
v3 = virtualinvoke v2.<java.lang.String: int length()>();
if v1 >= v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public boolean hasPrevious()
{
io.smallrye.config.NameIterator v0;
int v1, v2;
boolean v3;
v0 := @this: io.smallrye.config.NameIterator;
v1 = v0.<io.smallrye.config.NameIterator: int pos>;
v2 = (int) -1;
if v1 <= v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public void next()
{
int v1;
io.smallrye.config.NameIterator v0;
v0 := @this: io.smallrye.config.NameIterator;
v1 = virtualinvoke v0.<io.smallrye.config.NameIterator: int getNextEnd()>();
v0.<io.smallrye.config.NameIterator: int pos> = v1;
return;
}
public void previous()
{
int v1, v2;
io.smallrye.config.NameIterator v0;
v0 := @this: io.smallrye.config.NameIterator;
v1 = virtualinvoke v0.<io.smallrye.config.NameIterator: int getPreviousStart()>();
v2 = v1 - 1;
v0.<io.smallrye.config.NameIterator: int pos> = v2;
return;
}
public java.lang.String getName()
{
java.lang.String v1;
io.smallrye.config.NameIterator v0;
v0 := @this: io.smallrye.config.NameIterator;
v1 = v0.<io.smallrye.config.NameIterator: java.lang.String name>;
return v1;
}
public java.lang.String toString()
{
int v1, v11, v14, v15, v2, v5, v7;
java.lang.String v10, v12, v13, v16, v17, v3, v4, v6, v8, v9;
io.smallrye.config.NameIterator v0;
v0 := @this: io.smallrye.config.NameIterator;
v1 = v0.<io.smallrye.config.NameIterator: int pos>;
v2 = (int) -1;
if v1 != v2 goto label1;
v3 = v0.<io.smallrye.config.NameIterator: java.lang.String name>;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("*\u0001");
return v4;
label1:
v5 = v0.<io.smallrye.config.NameIterator: int pos>;
v6 = v0.<io.smallrye.config.NameIterator: java.lang.String name>;
v7 = virtualinvoke v6.<java.lang.String: int length()>();
if v5 != v7 goto label2;
v8 = v0.<io.smallrye.config.NameIterator: java.lang.String name>;
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001*");
return v9;
label2:
v10 = v0.<io.smallrye.config.NameIterator: java.lang.String name>;
v11 = v0.<io.smallrye.config.NameIterator: int pos>;
v12 = virtualinvoke v10.<java.lang.String: java.lang.String substring(int,int)>(0, v11);
v13 = v0.<io.smallrye.config.NameIterator: java.lang.String name>;
v14 = v0.<io.smallrye.config.NameIterator: int pos>;
v15 = v14 + 1;
v16 = virtualinvoke v13.<java.lang.String: java.lang.String substring(int)>(v15);
v17 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v12, v16) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001*\u0001");
return v17;
}
public void appendTo(java.lang.StringBuilder)
{
java.lang.StringBuilder v1;
java.lang.String v2;
io.smallrye.config.NameIterator v0;
v0 := @this: io.smallrye.config.NameIterator;
v1 := @parameter0: java.lang.StringBuilder;
v2 = virtualinvoke v0.<io.smallrye.config.NameIterator: java.lang.String getAllPreviousSegments()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v2);
return;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/smallrye/config/NameIterator;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.smallrye.config.NameIterator: boolean $assertionsDisabled> = v2;
return;
}
}