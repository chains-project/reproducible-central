public class io.smallrye.config.SmallRyeConfigProviderResolver extends org.eclipse.microprofile.config.spi.ConfigProviderResolver
{
private final java.util.Map configsForClassLoader;
static final java.lang.ClassLoader SYSTEM_CL;
public void <init>()
{
java.util.concurrent.ConcurrentHashMap v1;
io.smallrye.config.SmallRyeConfigProviderResolver v0;
v0 := @this: io.smallrye.config.SmallRyeConfigProviderResolver;
specialinvoke v0.<org.eclipse.microprofile.config.spi.ConfigProviderResolver: void <init>()>();
v1 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v0.<io.smallrye.config.SmallRyeConfigProviderResolver: java.util.Map configsForClassLoader> = v1;
return;
}
public static java.lang.ClassLoader calculateSystemClassLoader()
{
java.lang.ClassLoader v0;
io.smallrye.config.SmallRyeConfigProviderResolver$1 v1;
v0 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();
if v0 != null goto label1;
v1 = new io.smallrye.config.SmallRyeConfigProviderResolver$1;
specialinvoke v1.<io.smallrye.config.SmallRyeConfigProviderResolver$1: void <init>(java.lang.ClassLoader)>(null);
v0 = v1;
label1:
return v0;
}
public org.eclipse.microprofile.config.Config getConfig()
{
java.lang.ClassLoader v1;
org.eclipse.microprofile.config.Config v2;
io.smallrye.config.SmallRyeConfigProviderResolver v0;
v0 := @this: io.smallrye.config.SmallRyeConfigProviderResolver;
v1 = staticinvoke <io.smallrye.config.SecuritySupport: java.lang.ClassLoader getContextClassLoader()>();
v2 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfigProviderResolver: org.eclipse.microprofile.config.Config getConfig(java.lang.ClassLoader)>(v1);
return v2;
}
public org.eclipse.microprofile.config.Config getConfig(java.lang.ClassLoader)
{
java.lang.Throwable v8;
java.lang.IllegalStateException v7;
io.smallrye.config.SmallRyeConfigFactory v5;
io.smallrye.config.ConfigMessages v6;
io.smallrye.config.SmallRyeConfigProviderResolver v0;
java.util.Map v3;
java.lang.Object v4;
java.lang.ClassLoader v1, v2;
v0 := @this: io.smallrye.config.SmallRyeConfigProviderResolver;
v1 := @parameter0: java.lang.ClassLoader;
v2 = staticinvoke <io.smallrye.config.SmallRyeConfigProviderResolver: java.lang.ClassLoader getRealClassLoader(java.lang.ClassLoader)>(v1);
v3 = v0.<io.smallrye.config.SmallRyeConfigProviderResolver: java.util.Map configsForClassLoader>;
v4 = interfaceinvoke v3.<java.util.Map: java.lang.Object get(java.lang.Object)>(v2);
if v4 != null goto label5;
entermonitor v3;
label1:
interfaceinvoke v3.<java.util.Map: java.lang.Object get(java.lang.Object)>(v2);
v5 = virtualinvoke v0.<io.smallrye.config.SmallRyeConfigProviderResolver: io.smallrye.config.SmallRyeConfigFactory getFactoryFor(java.lang.ClassLoader,boolean)>(v2, 0);
v4 = virtualinvoke v5.<io.smallrye.config.SmallRyeConfigFactory: io.smallrye.config.SmallRyeConfig getConfigFor(io.smallrye.config.SmallRyeConfigProviderResolver,java.lang.ClassLoader)>(v0, v1);
if v4 != null goto label2;
v6 = <io.smallrye.config.ConfigMessages: io.smallrye.config.ConfigMessages msg>;
v7 = interfaceinvoke v6.<io.smallrye.config.ConfigMessages: java.lang.IllegalStateException noConfigForClassloader()>();
throw v7;
label2:
interfaceinvoke v3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v2, v4);
exitmonitor v3;
label3:
goto label5;
label4:
v8 := @caughtexception;
exitmonitor v3;
throw v8;
label5:
return v4;
catch java.lang.Throwable from label1 to label3 with label4;
}
io.smallrye.config.SmallRyeConfigFactory getFactoryFor(java.lang.ClassLoader, boolean)
{
java.util.Iterator v7;
java.util.ServiceLoader v6;
io.smallrye.config.SmallRyeConfigProviderResolver$2 v4;
java.lang.SecurityManager v3;
io.smallrye.config.SmallRyeConfigProviderResolver v0;
java.lang.Object v5, v9;
java.lang.ClassLoader v1;
boolean v2, v8;
v0 := @this: io.smallrye.config.SmallRyeConfigProviderResolver;
v1 := @parameter0: java.lang.ClassLoader;
v2 := @parameter1: boolean;
v3 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
if v3 == null goto label1;
if v2 != 0 goto label1;
v4 = new io.smallrye.config.SmallRyeConfigProviderResolver$2;
specialinvoke v4.<io.smallrye.config.SmallRyeConfigProviderResolver$2: void <init>(io.smallrye.config.SmallRyeConfigProviderResolver,java.lang.ClassLoader)>(v0, v1);
v5 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>(v4);
return v5;
label1:
v6 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>(class "Lio/smallrye/config/SmallRyeConfigFactory;", v1);
v7 = virtualinvoke v6.<java.util.ServiceLoader: java.util.Iterator iterator()>();
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label2;
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
goto label3;
label2:
v9 = <io.smallrye.config.SmallRyeConfigFactory$Default: io.smallrye.config.SmallRyeConfigFactory$Default INSTANCE>;
label3:
return v9;
}
public io.smallrye.config.SmallRyeConfigBuilder getBuilder()
{
io.smallrye.config.SmallRyeConfigProviderResolver v0;
io.smallrye.config.SmallRyeConfigBuilder v1, v2;
v0 := @this: io.smallrye.config.SmallRyeConfigProviderResolver;
v1 = new io.smallrye.config.SmallRyeConfigBuilder;
specialinvoke v1.<io.smallrye.config.SmallRyeConfigBuilder: void <init>()>();
v2 = virtualinvoke v1.<io.smallrye.config.SmallRyeConfigBuilder: io.smallrye.config.SmallRyeConfigBuilder addDefaultInterceptors()>();
return v2;
}
public void registerConfig(org.eclipse.microprofile.config.Config, java.lang.ClassLoader)
{
java.lang.Throwable v10;
java.lang.IllegalStateException v9;
org.eclipse.microprofile.config.Config v1;
java.lang.IllegalArgumentException v4;
io.smallrye.config.ConfigMessages v3, v8;
io.smallrye.config.SmallRyeConfigProviderResolver v0;
java.util.Map v6;
java.lang.Object v7;
java.lang.ClassLoader v2, v5;
v0 := @this: io.smallrye.config.SmallRyeConfigProviderResolver;
v1 := @parameter0: org.eclipse.microprofile.config.Config;
v2 := @parameter1: java.lang.ClassLoader;
if v1 != null goto label1;
v3 = <io.smallrye.config.ConfigMessages: io.smallrye.config.ConfigMessages msg>;
v4 = interfaceinvoke v3.<io.smallrye.config.ConfigMessages: java.lang.IllegalArgumentException configIsNull()>();
throw v4;
label1:
v5 = staticinvoke <io.smallrye.config.SmallRyeConfigProviderResolver: java.lang.ClassLoader getRealClassLoader(java.lang.ClassLoader)>(v2);
v6 = v0.<io.smallrye.config.SmallRyeConfigProviderResolver: java.util.Map configsForClassLoader>;
entermonitor v6;
label2:
v7 = interfaceinvoke v6.<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(v5, v1);
if v7 == null goto label3;
v8 = <io.smallrye.config.ConfigMessages: io.smallrye.config.ConfigMessages msg>;
v9 = interfaceinvoke v8.<io.smallrye.config.ConfigMessages: java.lang.IllegalStateException configAlreadyRegistered()>();
throw v9;
label3:
exitmonitor v6;
label4:
goto label6;
label5:
v10 := @caughtexception;
exitmonitor v6;
throw v10;
label6:
return;
catch java.lang.Throwable from label2 to label4 with label5;
}
public void releaseConfig(org.eclipse.microprofile.config.Config)
{
java.lang.Throwable v5;
io.smallrye.config.SmallRyeConfigProviderResolver v0;
java.util.function.Predicate v4;
java.util.Collection v3;
java.util.Map v2;
org.eclipse.microprofile.config.Config v1;
v0 := @this: io.smallrye.config.SmallRyeConfigProviderResolver;
v1 := @parameter0: org.eclipse.microprofile.config.Config;
v2 = v0.<io.smallrye.config.SmallRyeConfigProviderResolver: java.util.Map configsForClassLoader>;
entermonitor v2;
label1:
v3 = interfaceinvoke v2.<java.util.Map: java.util.Collection values()>();
v4 = staticinvoke <io.smallrye.config.SmallRyeConfigProviderResolver$lambda_releaseConfig_0__3150: java.util.function.Predicate bootstrap$(org.eclipse.microprofile.config.Config)>(v1);
interfaceinvoke v3.<java.util.Collection: boolean removeIf(java.util.function.Predicate)>(v4);
exitmonitor v2;
label2:
goto label4;
label3:
v5 := @caughtexception;
exitmonitor v2;
throw v5;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void releaseConfig(java.lang.ClassLoader)
{
java.lang.Throwable v4;
io.smallrye.config.SmallRyeConfigProviderResolver v0;
java.util.Map v3;
java.lang.ClassLoader v1, v2;
v0 := @this: io.smallrye.config.SmallRyeConfigProviderResolver;
v1 := @parameter0: java.lang.ClassLoader;
v2 = staticinvoke <io.smallrye.config.SmallRyeConfigProviderResolver: java.lang.ClassLoader getRealClassLoader(java.lang.ClassLoader)>(v1);
v3 = v0.<io.smallrye.config.SmallRyeConfigProviderResolver: java.util.Map configsForClassLoader>;
entermonitor v3;
label1:
interfaceinvoke v3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v2);
exitmonitor v3;
label2:
goto label4;
label3:
v4 := @caughtexception;
exitmonitor v3;
throw v4;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
static java.lang.ClassLoader getRealClassLoader(java.lang.ClassLoader)
{
java.lang.ClassLoader v0;
v0 := @parameter0: java.lang.ClassLoader;
if v0 != null goto label1;
v0 = staticinvoke <io.smallrye.config.SecuritySupport: java.lang.ClassLoader getContextClassLoader()>();
if v0 != null goto label1;
v0 = <io.smallrye.config.SmallRyeConfigProviderResolver: java.lang.ClassLoader SYSTEM_CL>;
label1:
return v0;
}
static void <clinit>()
{
java.lang.Object v2;
java.lang.ClassLoader v3;
java.security.PrivilegedAction v1;
java.lang.SecurityManager v0;
v0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
if v0 == null goto label1;
v1 = staticinvoke <io.smallrye.config.SmallRyeConfigProviderResolver$calculateSystemClassLoader__3151: java.security.PrivilegedAction bootstrap$()>();
v2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>(v1);
<io.smallrye.config.SmallRyeConfigProviderResolver: java.lang.ClassLoader SYSTEM_CL> = v2;
goto label2;
label1:
v3 = staticinvoke <io.smallrye.config.SmallRyeConfigProviderResolver: java.lang.ClassLoader calculateSystemClassLoader()>();
<io.smallrye.config.SmallRyeConfigProviderResolver: java.lang.ClassLoader SYSTEM_CL> = v3;
label2:
return;
}
}