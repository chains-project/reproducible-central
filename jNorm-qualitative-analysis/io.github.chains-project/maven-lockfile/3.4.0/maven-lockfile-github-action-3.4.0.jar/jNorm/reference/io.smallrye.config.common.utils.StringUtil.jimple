public class io.smallrye.config.common.utils.StringUtil extends java.lang.Object
{
private static final java.lang.String[] NO_STRINGS;
private static final java.util.regex.Pattern ITEM_PATTERN;
static final boolean $assertionsDisabled;
private void <init>()
{
io.smallrye.config.common.utils.StringUtil v0;
v0 := @this: io.smallrye.config.common.utils.StringUtil;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.lang.String[] split(java.lang.String)
{
java.lang.IllegalStateException v22, v24;
java.lang.Object[] v26;
java.lang.String[] v2, v25;
java.lang.AssertionError v12;
java.util.ArrayList v7;
java.util.regex.Matcher v4;
java.lang.String v0, v10, v13, v15, v17, v18, v19, v20, v21, v23, v5, v9;
boolean v1, v11, v16, v8;
java.lang.StringBuilder v14, v6;
java.util.regex.Pattern v3;
v0 := @parameter0: java.lang.String;
if v0 == null goto label01;
v1 = virtualinvoke v0.<java.lang.String: boolean isEmpty()>();
if v1 == 0 goto label02;
label01:
v2 = <io.smallrye.config.common.utils.StringUtil: java.lang.String[] NO_STRINGS>;
return v2;
label02:
v3 = <io.smallrye.config.common.utils.StringUtil: java.util.regex.Pattern ITEM_PATTERN>;
v4 = virtualinvoke v3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v0);
v5 = null;
v6 = null;
v7 = new java.util.ArrayList;
specialinvoke v7.<java.util.ArrayList: void <init>(int)>(4);
label03:
v8 = virtualinvoke v4.<java.util.regex.Matcher: boolean find()>();
if v8 == 0 goto label14;
v9 = virtualinvoke v4.<java.util.regex.Matcher: java.lang.String group(int)>(1);
if v9 == null goto label04;
if v5 == null goto label03;
virtualinvoke v7.<java.util.ArrayList: boolean add(java.lang.Object)>(v5);
v5 = null;
goto label03;
label04:
v10 = virtualinvoke v4.<java.util.regex.Matcher: java.lang.String group(int)>(2);
if v10 == null goto label06;
v11 = <io.smallrye.config.common.utils.StringUtil: boolean $assertionsDisabled>;
if v11 != 0 goto label05;
if v5 == null goto label05;
v12 = new java.lang.AssertionError;
specialinvoke v12.<java.lang.AssertionError: void <init>(java.lang.Object)>("Regular expression matching malfunctioned");
throw v12;
label05:
v5 = virtualinvoke v4.<java.util.regex.Matcher: java.lang.String group(int)>(2);
goto label03;
label06:
v13 = virtualinvoke v4.<java.util.regex.Matcher: java.lang.String group(int)>(3);
if v13 == null goto label13;
if v6 != null goto label07;
v14 = new java.lang.StringBuilder;
specialinvoke v14.<java.lang.StringBuilder: void <init>()>();
v6 = v14;
label07:
if v5 == null goto label08;
virtualinvoke v6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v5);
v5 = null;
label08:
v15 = virtualinvoke v4.<java.util.regex.Matcher: java.lang.String group(int)>(3);
virtualinvoke v6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v15);
label09:
v16 = virtualinvoke v4.<java.util.regex.Matcher: boolean find()>();
if v16 == 0 goto label12;
v17 = virtualinvoke v4.<java.util.regex.Matcher: java.lang.String group(int)>(1);
if v17 != null goto label12;
v18 = virtualinvoke v4.<java.util.regex.Matcher: java.lang.String group(int)>(2);
if v18 == null goto label10;
v19 = virtualinvoke v4.<java.util.regex.Matcher: java.lang.String group(int)>(2);
virtualinvoke v6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v19);
goto label09;
label10:
v20 = virtualinvoke v4.<java.util.regex.Matcher: java.lang.String group(int)>(3);
if v20 == null goto label11;
v21 = virtualinvoke v4.<java.util.regex.Matcher: java.lang.String group(int)>(3);
virtualinvoke v6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v21);
goto label09;
label11:
v22 = new java.lang.IllegalStateException;
specialinvoke v22.<java.lang.IllegalStateException: void <init>()>();
throw v22;
label12:
v23 = virtualinvoke v6.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke v7.<java.util.ArrayList: boolean add(java.lang.Object)>(v23);
virtualinvoke v6.<java.lang.StringBuilder: void setLength(int)>(0);
goto label03;
label13:
v24 = new java.lang.IllegalStateException;
specialinvoke v24.<java.lang.IllegalStateException: void <init>()>();
throw v24;
label14:
if v5 == null goto label15;
virtualinvoke v7.<java.util.ArrayList: boolean add(java.lang.Object)>(v5);
label15:
v25 = <io.smallrye.config.common.utils.StringUtil: java.lang.String[] NO_STRINGS>;
v26 = virtualinvoke v7.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(v25);
return v26;
}
public static java.lang.String replaceNonAlphanumericByUnderscores(java.lang.String)
{
int v1, v3, v5;
char v4;
java.lang.StringBuilder v2;
java.lang.String v0, v6;
v0 := @parameter0: java.lang.String;
v1 = virtualinvoke v0.<java.lang.String: int length()>();
v2 = new java.lang.StringBuilder;
specialinvoke v2.<java.lang.StringBuilder: void <init>(int)>(v1);
v3 = 0;
label1:
if v3 >= v1 goto label7;
v4 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v3);
if 97 > v4 goto label2;
if v4 <= 122 goto label4;
label2:
if 65 > v4 goto label3;
if v4 <= 90 goto label4;
label3:
if 48 > v4 goto label5;
if v4 > 57 goto label5;
label4:
virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v4);
goto label6;
label5:
virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);
if v4 != 34 goto label6;
v5 = v3 + 1;
if v5 != v1 goto label6;
virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);
label6:
v3 = v3 + 1;
goto label1;
label7:
v6 = virtualinvoke v2.<java.lang.StringBuilder: java.lang.String toString()>();
return v6;
}
public static java.lang.String toLowerCaseAndDotted(java.lang.String)
{
int v1, v10, v13, v16, v2, v5, v8;
java.lang.String v0, v18, v7;
boolean v3;
char v11, v14, v15, v17, v6;
java.lang.NumberFormatException v12;
java.lang.StringBuilder v4, v9;
v0 := @parameter0: java.lang.String;
v1 = virtualinvoke v0.<java.lang.String: int length()>();
v2 = 0;
v3 = 0;
v4 = new java.lang.StringBuilder;
specialinvoke v4.<java.lang.StringBuilder: void <init>()>();
v5 = 0;
label01:
if v5 >= v1 goto label14;
v6 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v5);
if 95 != v6 goto label12;
if v5 != 0 goto label02;
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%");
goto label13;
label02:
if v2 <= 0 goto label06;
label03:
v7 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.String substring(int,int)>(v2, v5);
staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(v7);
v8 = v2 - 1;
v9 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>(v8, v2, "[");
virtualinvoke v9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
v10 = v5 + 1;
if v10 >= v1 goto label13;
v11 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v10);
if 95 != v11 goto label13;
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
v5 = v10;
label04:
goto label13;
label05:
v12 := @caughtexception;
label06:
v13 = v5 + 1;
if v13 >= v1 goto label10;
v14 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v13);
if 95 != v14 goto label07;
if v3 != 0 goto label07;
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");
v5 = v13;
v3 = 1;
goto label11;
label07:
v15 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v13);
if 95 != v15 goto label09;
if v3 == 0 goto label09;
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");
v16 = v13 + 1;
if v16 >= v1 goto label08;
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
label08:
v5 = v13;
v3 = 0;
goto label11;
label09:
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
goto label11;
label10:
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");
label11:
v2 = v13;
goto label13;
label12:
v17 = staticinvoke <java.lang.Character: char toLowerCase(char)>(v6);
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v17);
label13:
v5 = v5 + 1;
goto label01;
label14:
v18 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.String toString()>();
return v18;
catch java.lang.NumberFormatException from label03 to label04 with label05;
}
public static java.lang.String skewer(java.lang.String)
{
java.lang.String v0, v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <io.smallrye.config.common.utils.StringUtil: java.lang.String skewer(java.lang.String,char)>(v0, 45);
return v1;
}
public static java.lang.String skewer(java.lang.String, char)
{
int v2;
char v1;
java.lang.StringBuilder v3;
java.lang.String v0, v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: char;
v2 = virtualinvoke v0.<java.lang.String: int length()>();
v3 = new java.lang.StringBuilder;
specialinvoke v3.<java.lang.StringBuilder: void <init>()>();
v4 = staticinvoke <io.smallrye.config.common.utils.StringUtil: java.lang.String skewer(java.lang.String,int,int,java.lang.StringBuilder,char)>(v0, 0, v2, v3, v1);
return v4;
}
private static java.lang.String skewer(java.lang.String, int, int, java.lang.StringBuilder, char)
{
boolean v12, v14, v18, v24, v28, v5;
java.lang.StringBuilder v3;
int v1, v10, v13, v15, v16, v2, v20, v21, v23, v26, v27, v30, v7, v8, v9;
java.lang.String v0, v11, v17, v19, v22, v25, v29, v31;
char v4;
java.lang.IllegalArgumentException v6;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 := @parameter3: java.lang.StringBuilder;
v4 := @parameter4: char;
v5 = virtualinvoke v0.<java.lang.String: boolean isEmpty()>();
if v5 == 0 goto label01;
v6 = new java.lang.IllegalArgumentException;
specialinvoke v6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Method seems to have an empty name");
throw v6;
label01:
v7 = virtualinvoke v0.<java.lang.String: int codePointAt(int)>(v1);
v8 = staticinvoke <java.lang.Character: int toLowerCase(int)>(v7);
virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)>(v8);
v9 = staticinvoke <java.lang.Character: int charCount(int)>(v7);
v10 = v1 + v9;
if v10 != v2 goto label02;
v11 = virtualinvoke v3.<java.lang.StringBuilder: java.lang.String toString()>();
return v11;
label02:
v12 = staticinvoke <java.lang.Character: boolean isUpperCase(int)>(v7);
if v12 == 0 goto label09;
v13 = virtualinvoke v0.<java.lang.String: int codePointAt(int)>(v10);
v14 = staticinvoke <java.lang.Character: boolean isUpperCase(int)>(v13);
if v14 == 0 goto label05;
label03:
v15 = staticinvoke <java.lang.Character: int toLowerCase(int)>(v13);
virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)>(v15);
v16 = staticinvoke <java.lang.Character: int charCount(int)>(v7);
v10 = v10 + v16;
v7 = v13;
if v10 != v2 goto label04;
v17 = virtualinvoke v3.<java.lang.StringBuilder: java.lang.String toString()>();
return v17;
label04:
v13 = virtualinvoke v0.<java.lang.String: int codePointAt(int)>(v10);
v18 = staticinvoke <java.lang.Character: boolean isLowerCase(int)>(v13);
if v18 == 0 goto label03;
virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v4);
v19 = staticinvoke <io.smallrye.config.common.utils.StringUtil: java.lang.String skewer(java.lang.String,int,int,java.lang.StringBuilder,char)>(v0, v10, v2, v3, v4);
return v19;
label05:
virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)>(v13);
v20 = staticinvoke <java.lang.Character: int charCount(int)>(v13);
v21 = v10 + v20;
label06:
if v21 != v2 goto label07;
v22 = virtualinvoke v3.<java.lang.StringBuilder: java.lang.String toString()>();
return v22;
label07:
v23 = virtualinvoke v0.<java.lang.String: int codePointAt(int)>(v21);
v24 = staticinvoke <java.lang.Character: boolean isUpperCase(int)>(v23);
if v24 == 0 goto label08;
virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v4);
v25 = staticinvoke <io.smallrye.config.common.utils.StringUtil: java.lang.String skewer(java.lang.String,int,int,java.lang.StringBuilder,char)>(v0, v21, v2, v3, v4);
return v25;
label08:
virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)>(v23);
v26 = staticinvoke <java.lang.Character: int charCount(int)>(v23);
v21 = v21 + v26;
goto label06;
label09:
v27 = virtualinvoke v0.<java.lang.String: int codePointAt(int)>(v10);
v28 = staticinvoke <java.lang.Character: boolean isUpperCase(int)>(v27);
if v28 == 0 goto label10;
virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v4);
v29 = staticinvoke <io.smallrye.config.common.utils.StringUtil: java.lang.String skewer(java.lang.String,int,int,java.lang.StringBuilder,char)>(v0, v10, v2, v3, v4);
return v29;
label10:
virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)>(v27);
v30 = staticinvoke <java.lang.Character: int charCount(int)>(v27);
v10 = v10 + v30;
if v10 != v2 goto label09;
v31 = virtualinvoke v3.<java.lang.StringBuilder: java.lang.String toString()>();
return v31;
}
static void <clinit>()
{
java.lang.Class v0;
java.lang.String[] v3;
java.util.regex.Pattern v4;
boolean v1, v2;
v0 = class "Lio/smallrye/config/common/utils/StringUtil;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.smallrye.config.common.utils.StringUtil: boolean $assertionsDisabled> = v2;
v3 = newarray (java.lang.String)[0];
<io.smallrye.config.common.utils.StringUtil: java.lang.String[] NO_STRINGS> = v3;
v4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(,+)|([^\\\\,]+)|\\\\(.)");
<io.smallrye.config.common.utils.StringUtil: java.util.regex.Pattern ITEM_PATTERN> = v4;
return;
}
}