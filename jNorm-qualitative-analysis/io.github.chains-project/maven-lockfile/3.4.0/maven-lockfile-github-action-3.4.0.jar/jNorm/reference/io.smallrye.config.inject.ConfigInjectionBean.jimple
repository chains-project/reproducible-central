public class io.smallrye.config.inject.ConfigInjectionBean extends java.lang.Object implements jakarta.enterprise.inject.spi.Bean, jakarta.enterprise.inject.spi.PassivationCapable
{
private static final java.util.Set QUALIFIERS;
private final jakarta.enterprise.inject.spi.BeanManager bm;
private final java.lang.Class clazz;
private org.eclipse.microprofile.config.Config _config;
public void <init>(jakarta.enterprise.inject.spi.BeanManager, java.lang.Class)
{
java.lang.Class v2;
io.smallrye.config.inject.ConfigInjectionBean v0;
jakarta.enterprise.inject.spi.BeanManager v1;
v0 := @this: io.smallrye.config.inject.ConfigInjectionBean;
v1 := @parameter0: jakarta.enterprise.inject.spi.BeanManager;
v2 := @parameter1: java.lang.Class;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.smallrye.config.inject.ConfigInjectionBean: jakarta.enterprise.inject.spi.BeanManager bm> = v1;
v0.<io.smallrye.config.inject.ConfigInjectionBean: java.lang.Class clazz> = v2;
return;
}
public java.util.Set getInjectionPoints()
{
java.util.Set v1;
io.smallrye.config.inject.ConfigInjectionBean v0;
v0 := @this: io.smallrye.config.inject.ConfigInjectionBean;
v1 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
return v1;
}
public java.lang.Class getBeanClass()
{
io.smallrye.config.inject.ConfigInjectionBean v0;
v0 := @this: io.smallrye.config.inject.ConfigInjectionBean;
return class "Lio/smallrye/config/inject/ConfigInjectionBean;";
}
public java.lang.Object create(jakarta.enterprise.context.spi.CreationalContext)
{
java.lang.IllegalStateException v31;
boolean v10, v13, v14, v15;
jakarta.enterprise.inject.spi.BeanManager v2;
io.smallrye.config.inject.MetadataInjectionPoint v3;
org.eclipse.microprofile.config.Config v20, v24, v26;
java.lang.reflect.Type v11, v12, v19, v22, v9;
java.lang.'annotation'.Annotation v6;
java.lang.reflect.Type[] v16, v18;
java.util.Optional v27;
java.util.function.Supplier v28;
io.smallrye.config.inject.ConfigInjectionBean v0;
int v17, v23;
java.lang.String v7, v8;
io.smallrye.config.inject.InjectionMessages v30;
jakarta.enterprise.context.spi.CreationalContext v1;
jakarta.enterprise.inject.spi.Annotated v5;
java.lang.Object v21, v25, v29, v4;
v0 := @this: io.smallrye.config.inject.ConfigInjectionBean;
v1 := @parameter0: jakarta.enterprise.context.spi.CreationalContext;
v2 = v0.<io.smallrye.config.inject.ConfigInjectionBean: jakarta.enterprise.inject.spi.BeanManager bm>;
v3 = new io.smallrye.config.inject.MetadataInjectionPoint;
specialinvoke v3.<io.smallrye.config.inject.MetadataInjectionPoint: void <init>()>();
v4 = interfaceinvoke v2.<jakarta.enterprise.inject.spi.BeanManager: java.lang.Object getInjectableReference(jakarta.enterprise.inject.spi.InjectionPoint,jakarta.enterprise.context.spi.CreationalContext)>(v3, v1);
v5 = interfaceinvoke v4.<jakarta.enterprise.inject.spi.InjectionPoint: jakarta.enterprise.inject.spi.Annotated getAnnotated()>();
v6 = interfaceinvoke v5.<jakarta.enterprise.inject.spi.Annotated: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/eclipse/microprofile/config/inject/ConfigProperty;");
v7 = staticinvoke <io.smallrye.config.inject.ConfigProducerUtil: java.lang.String getConfigKey(jakarta.enterprise.inject.spi.InjectionPoint,org.eclipse.microprofile.config.inject.ConfigProperty)>(v4, v6);
v8 = interfaceinvoke v6.<org.eclipse.microprofile.config.inject.ConfigProperty: java.lang.String defaultValue()>();
v9 = interfaceinvoke v5.<jakarta.enterprise.inject.spi.Annotated: java.lang.reflect.Type getBaseType()>();
v10 = v9 instanceof java.lang.reflect.ParameterizedType;
if v10 == 0 goto label2;
v11 = interfaceinvoke v5.<jakarta.enterprise.inject.spi.Annotated: java.lang.reflect.Type getBaseType()>();
v12 = interfaceinvoke v11.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();
v13 = v12 instanceof java.lang.Class;
if v13 == 0 goto label4;
v14 = virtualinvoke v12.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljakarta/inject/Provider;");
if v14 != 0 goto label1;
v15 = virtualinvoke v12.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(class "Ljakarta/enterprise/inject/Instance;");
if v15 == 0 goto label4;
label1:
v16 = interfaceinvoke v11.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v17 = lengthof v16;
if v17 != 1 goto label4;
v18 = interfaceinvoke v11.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v19 = v18[0];
v20 = virtualinvoke v0.<io.smallrye.config.inject.ConfigInjectionBean: org.eclipse.microprofile.config.Config getConfig()>();
v21 = interfaceinvoke v20.<org.eclipse.microprofile.config.Config: java.lang.Object getValue(java.lang.String,java.lang.Class)>(v7, v19);
return v21;
label2:
v22 = interfaceinvoke v5.<jakarta.enterprise.inject.spi.Annotated: java.lang.reflect.Type getBaseType()>();
v23 = virtualinvoke v8.<java.lang.String: int length()>();
if v23 != 0 goto label3;
v24 = virtualinvoke v0.<io.smallrye.config.inject.ConfigInjectionBean: org.eclipse.microprofile.config.Config getConfig()>();
v25 = interfaceinvoke v24.<org.eclipse.microprofile.config.Config: java.lang.Object getValue(java.lang.String,java.lang.Class)>(v7, v22);
return v25;
label3:
v26 = virtualinvoke v0.<io.smallrye.config.inject.ConfigInjectionBean: org.eclipse.microprofile.config.Config getConfig()>();
v27 = interfaceinvoke v26.<org.eclipse.microprofile.config.Config: java.util.Optional getOptionalValue(java.lang.String,java.lang.Class)>(v7, v22);
v28 = staticinvoke <io.smallrye.config.inject.ConfigInjectionBean$lambda_create_0__3070: java.util.function.Supplier bootstrap$(io.smallrye.config.inject.ConfigInjectionBean,java.lang.String,java.lang.Class)>(v0, v8, v22);
v29 = virtualinvoke v27.<java.util.Optional: java.lang.Object orElseGet(java.util.function.Supplier)>(v28);
return v29;
label4:
v30 = <io.smallrye.config.inject.InjectionMessages: io.smallrye.config.inject.InjectionMessages msg>;
v31 = interfaceinvoke v30.<io.smallrye.config.inject.InjectionMessages: java.lang.IllegalStateException unhandledConfigProperty()>();
throw v31;
}
public org.eclipse.microprofile.config.Config getConfig()
{
io.smallrye.config.inject.ConfigInjectionBean v0;
org.eclipse.microprofile.config.Config v1, v2, v3;
v0 := @this: io.smallrye.config.inject.ConfigInjectionBean;
v1 = v0.<io.smallrye.config.inject.ConfigInjectionBean: org.eclipse.microprofile.config.Config _config>;
if v1 != null goto label1;
v2 = staticinvoke <org.eclipse.microprofile.config.ConfigProvider: org.eclipse.microprofile.config.Config getConfig()>();
v0.<io.smallrye.config.inject.ConfigInjectionBean: org.eclipse.microprofile.config.Config _config> = v2;
label1:
v3 = v0.<io.smallrye.config.inject.ConfigInjectionBean: org.eclipse.microprofile.config.Config _config>;
return v3;
}
public void destroy(java.lang.Object, jakarta.enterprise.context.spi.CreationalContext)
{
java.lang.Object v1;
jakarta.enterprise.context.spi.CreationalContext v2;
io.smallrye.config.inject.ConfigInjectionBean v0;
v0 := @this: io.smallrye.config.inject.ConfigInjectionBean;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: jakarta.enterprise.context.spi.CreationalContext;
return;
}
public java.util.Set getTypes()
{
java.util.Set v2;
java.lang.Class v1;
io.smallrye.config.inject.ConfigInjectionBean v0;
v0 := @this: io.smallrye.config.inject.ConfigInjectionBean;
v1 = v0.<io.smallrye.config.inject.ConfigInjectionBean: java.lang.Class clazz>;
v2 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(v1);
return v2;
}
public java.util.Set getQualifiers()
{
java.util.Set v1;
io.smallrye.config.inject.ConfigInjectionBean v0;
v0 := @this: io.smallrye.config.inject.ConfigInjectionBean;
v1 = <io.smallrye.config.inject.ConfigInjectionBean: java.util.Set QUALIFIERS>;
return v1;
}
public java.lang.Class getScope()
{
io.smallrye.config.inject.ConfigInjectionBean v0;
v0 := @this: io.smallrye.config.inject.ConfigInjectionBean;
return class "Ljakarta/enterprise/context/Dependent;";
}
public java.lang.String getName()
{
java.lang.Class v1;
java.lang.String v2;
io.smallrye.config.inject.ConfigInjectionBean v0;
v0 := @this: io.smallrye.config.inject.ConfigInjectionBean;
v1 = v0.<io.smallrye.config.inject.ConfigInjectionBean: java.lang.Class clazz>;
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Class)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("ConfigInjectionBean_\u0001");
return v2;
}
public java.util.Set getStereotypes()
{
java.util.Set v1;
io.smallrye.config.inject.ConfigInjectionBean v0;
v0 := @this: io.smallrye.config.inject.ConfigInjectionBean;
v1 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
return v1;
}
public boolean isAlternative()
{
io.smallrye.config.inject.ConfigInjectionBean v0;
v0 := @this: io.smallrye.config.inject.ConfigInjectionBean;
return 0;
}
public java.lang.String getId()
{
java.lang.Class v1;
java.lang.String v2;
io.smallrye.config.inject.ConfigInjectionBean v0;
v0 := @this: io.smallrye.config.inject.ConfigInjectionBean;
v1 = v0.<io.smallrye.config.inject.ConfigInjectionBean: java.lang.Class clazz>;
v2 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Class)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("ConfigInjectionBean_\u0001");
return v2;
}
static void <clinit>()
{
java.util.HashSet v0;
java.util.Set v1;
io.smallrye.config.inject.ConfigInjectionBean$ConfigPropertyLiteral v2;
v0 = new java.util.HashSet;
specialinvoke v0.<java.util.HashSet: void <init>()>();
<io.smallrye.config.inject.ConfigInjectionBean: java.util.Set QUALIFIERS> = v0;
v1 = <io.smallrye.config.inject.ConfigInjectionBean: java.util.Set QUALIFIERS>;
v2 = new io.smallrye.config.inject.ConfigInjectionBean$ConfigPropertyLiteral;
specialinvoke v2.<io.smallrye.config.inject.ConfigInjectionBean$ConfigPropertyLiteral: void <init>()>();
interfaceinvoke v1.<java.util.Set: boolean add(java.lang.Object)>(v2);
return;
}
}