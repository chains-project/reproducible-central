public class io.smallrye.context.SmallRyeThreadContext extends java.lang.Object implements org.eclipse.microprofile.context.ThreadContext
{
static final java.lang.ThreadLocal currentThreadContext;
private static final io.smallrye.context.CleanAutoCloseable NULL_THREAD_STATE;
private static final java.util.concurrent.Executor PASSTHROUGH_EXECUTOR;
private final io.smallrye.context.impl.ThreadContextProviderPlan plan;
private final java.lang.String injectionPointName;
private final java.util.concurrent.ExecutorService defaultExecutor;
public static io.smallrye.context.CleanAutoCloseable withThreadContext(io.smallrye.context.SmallRyeThreadContext)
{
io.smallrye.context.SmallRyeThreadContext$3 v5;
java.lang.ThreadLocal v1, v3;
io.smallrye.context.SmallRyeThreadContext v0;
java.lang.Object v2;
io.smallrye.context.CleanAutoCloseable v4;
v0 := @parameter0: io.smallrye.context.SmallRyeThreadContext;
v1 = <io.smallrye.context.SmallRyeThreadContext: java.lang.ThreadLocal currentThreadContext>;
v2 = virtualinvoke v1.<java.lang.ThreadLocal: java.lang.Object get()>();
v3 = <io.smallrye.context.SmallRyeThreadContext: java.lang.ThreadLocal currentThreadContext>;
virtualinvoke v3.<java.lang.ThreadLocal: void set(java.lang.Object)>(v0);
if v2 != null goto label1;
v4 = <io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.CleanAutoCloseable NULL_THREAD_STATE>;
return v4;
label1:
v5 = new io.smallrye.context.SmallRyeThreadContext$3;
specialinvoke v5.<io.smallrye.context.SmallRyeThreadContext$3: void <init>(io.smallrye.context.SmallRyeThreadContext)>(v2);
return v5;
}
public static void withThreadContext(io.smallrye.context.SmallRyeThreadContext, java.lang.Runnable)
{
java.lang.Throwable v7;
java.lang.ThreadLocal v2, v4, v5, v6, v8, v9;
java.lang.Runnable v1;
io.smallrye.context.SmallRyeThreadContext v0;
java.lang.Object v3;
v0 := @parameter0: io.smallrye.context.SmallRyeThreadContext;
v1 := @parameter1: java.lang.Runnable;
v2 = <io.smallrye.context.SmallRyeThreadContext: java.lang.ThreadLocal currentThreadContext>;
v3 = virtualinvoke v2.<java.lang.ThreadLocal: java.lang.Object get()>();
v4 = <io.smallrye.context.SmallRyeThreadContext: java.lang.ThreadLocal currentThreadContext>;
virtualinvoke v4.<java.lang.ThreadLocal: void set(java.lang.Object)>(v0);
label1:
interfaceinvoke v1.<java.lang.Runnable: void run()>();
label2:
if v3 != null goto label3;
v5 = <io.smallrye.context.SmallRyeThreadContext: java.lang.ThreadLocal currentThreadContext>;
virtualinvoke v5.<java.lang.ThreadLocal: void remove()>();
goto label7;
label3:
v6 = <io.smallrye.context.SmallRyeThreadContext: java.lang.ThreadLocal currentThreadContext>;
virtualinvoke v6.<java.lang.ThreadLocal: void set(java.lang.Object)>(v3);
goto label7;
label4:
v7 := @caughtexception;
if v3 != null goto label5;
v8 = <io.smallrye.context.SmallRyeThreadContext: java.lang.ThreadLocal currentThreadContext>;
virtualinvoke v8.<java.lang.ThreadLocal: void remove()>();
goto label6;
label5:
v9 = <io.smallrye.context.SmallRyeThreadContext: java.lang.ThreadLocal currentThreadContext>;
virtualinvoke v9.<java.lang.ThreadLocal: void set(java.lang.Object)>(v3);
label6:
throw v7;
label7:
return;
catch java.lang.Throwable from label1 to label2 with label4;
}
public static java.lang.Object withThreadContext(io.smallrye.context.SmallRyeThreadContext, java.util.function.Supplier)
{
java.lang.Throwable v8;
java.lang.ThreadLocal v10, v2, v4, v6, v7, v9;
java.util.function.Supplier v1;
io.smallrye.context.SmallRyeThreadContext v0;
java.lang.Object v3, v5;
v0 := @parameter0: io.smallrye.context.SmallRyeThreadContext;
v1 := @parameter1: java.util.function.Supplier;
v2 = <io.smallrye.context.SmallRyeThreadContext: java.lang.ThreadLocal currentThreadContext>;
v3 = virtualinvoke v2.<java.lang.ThreadLocal: java.lang.Object get()>();
v4 = <io.smallrye.context.SmallRyeThreadContext: java.lang.ThreadLocal currentThreadContext>;
virtualinvoke v4.<java.lang.ThreadLocal: void set(java.lang.Object)>(v0);
label1:
v5 = interfaceinvoke v1.<java.util.function.Supplier: java.lang.Object get()>();
label2:
if v3 != null goto label3;
v6 = <io.smallrye.context.SmallRyeThreadContext: java.lang.ThreadLocal currentThreadContext>;
virtualinvoke v6.<java.lang.ThreadLocal: void remove()>();
goto label4;
label3:
v7 = <io.smallrye.context.SmallRyeThreadContext: java.lang.ThreadLocal currentThreadContext>;
virtualinvoke v7.<java.lang.ThreadLocal: void set(java.lang.Object)>(v3);
label4:
return v5;
label5:
v8 := @caughtexception;
if v3 != null goto label6;
v9 = <io.smallrye.context.SmallRyeThreadContext: java.lang.ThreadLocal currentThreadContext>;
virtualinvoke v9.<java.lang.ThreadLocal: void remove()>();
goto label7;
label6:
v10 = <io.smallrye.context.SmallRyeThreadContext: java.lang.ThreadLocal currentThreadContext>;
virtualinvoke v10.<java.lang.ThreadLocal: void set(java.lang.Object)>(v3);
label7:
throw v8;
catch java.lang.Throwable from label1 to label2 with label5;
}
public static io.smallrye.context.SmallRyeThreadContext getCurrentThreadContextOrDefaultContexts()
{
io.smallrye.context.SmallRyeContextManager v0;
io.smallrye.context.SmallRyeThreadContext v1, v2;
v0 = staticinvoke <io.smallrye.context.SmallRyeContextManagerProvider: io.smallrye.context.SmallRyeContextManager getManager()>();
v1 = virtualinvoke v0.<io.smallrye.context.SmallRyeContextManager: io.smallrye.context.SmallRyeThreadContext defaultThreadContext()>();
v2 = staticinvoke <io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.SmallRyeThreadContext getCurrentThreadContext(io.smallrye.context.SmallRyeThreadContext)>(v1);
return v2;
}
public static io.smallrye.context.SmallRyeThreadContext getCurrentThreadContextOrPropagatedContexts()
{
io.smallrye.context.SmallRyeContextManager v0;
io.smallrye.context.SmallRyeThreadContext v1, v2;
v0 = staticinvoke <io.smallrye.context.SmallRyeContextManagerProvider: io.smallrye.context.SmallRyeContextManager getManager()>();
v1 = virtualinvoke v0.<io.smallrye.context.SmallRyeContextManager: io.smallrye.context.SmallRyeThreadContext allPropagatedThreadContext()>();
v2 = staticinvoke <io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.SmallRyeThreadContext getCurrentThreadContext(io.smallrye.context.SmallRyeThreadContext)>(v1);
return v2;
}
public static io.smallrye.context.SmallRyeThreadContext getCurrentThreadContextOrClearedContexts()
{
io.smallrye.context.SmallRyeContextManager v0;
io.smallrye.context.SmallRyeThreadContext v1, v2;
v0 = staticinvoke <io.smallrye.context.SmallRyeContextManagerProvider: io.smallrye.context.SmallRyeContextManager getManager()>();
v1 = virtualinvoke v0.<io.smallrye.context.SmallRyeContextManager: io.smallrye.context.SmallRyeThreadContext allClearedThreadContext()>();
v2 = staticinvoke <io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.SmallRyeThreadContext getCurrentThreadContext(io.smallrye.context.SmallRyeThreadContext)>(v1);
return v2;
}
public static io.smallrye.context.SmallRyeThreadContext getCurrentThreadContext(io.smallrye.context.SmallRyeThreadContext)
{
java.lang.ThreadLocal v1;
io.smallrye.context.SmallRyeThreadContext v0, v3;
java.lang.Object v2;
v0 := @parameter0: io.smallrye.context.SmallRyeThreadContext;
v1 = <io.smallrye.context.SmallRyeThreadContext: java.lang.ThreadLocal currentThreadContext>;
v2 = virtualinvoke v1.<java.lang.ThreadLocal: java.lang.Object get()>();
if v2 == null goto label1;
v3 = v2;
goto label2;
label1:
v3 = v0;
label2:
return v3;
}
public static io.smallrye.context.SmallRyeThreadContext getCurrentThreadContext()
{
io.smallrye.context.SmallRyeThreadContext v0;
v0 = staticinvoke <io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.SmallRyeThreadContext getCurrentThreadContext(io.smallrye.context.SmallRyeThreadContext)>(null);
return v0;
}
public void <init>(io.smallrye.context.SmallRyeContextManager, java.lang.String[], java.lang.String[], java.lang.String[], java.lang.String, java.util.concurrent.ExecutorService)
{
java.lang.String[] v2, v3, v4;
io.smallrye.context.SmallRyeContextManager v1;
io.smallrye.context.impl.ThreadContextProviderPlan v7;
io.smallrye.context.SmallRyeThreadContext v0;
java.lang.String v5;
java.util.concurrent.ExecutorService v6;
v0 := @this: io.smallrye.context.SmallRyeThreadContext;
v1 := @parameter0: io.smallrye.context.SmallRyeContextManager;
v2 := @parameter1: java.lang.String[];
v3 := @parameter2: java.lang.String[];
v4 := @parameter3: java.lang.String[];
v5 := @parameter4: java.lang.String;
v6 := @parameter5: java.util.concurrent.ExecutorService;
specialinvoke v0.<java.lang.Object: void <init>()>();
v7 = virtualinvoke v1.<io.smallrye.context.SmallRyeContextManager: io.smallrye.context.impl.ThreadContextProviderPlan getProviderPlan(java.lang.String[],java.lang.String[],java.lang.String[])>(v2, v3, v4);
v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan> = v7;
v0.<io.smallrye.context.SmallRyeThreadContext: java.lang.String injectionPointName> = v5;
v0.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.ExecutorService defaultExecutor> = v6;
return;
}
private void checkPrecontextualized(java.lang.Object)
{
io.smallrye.context.SmallRyeThreadContext v0;
java.lang.Object v1;
java.lang.IllegalArgumentException v3;
boolean v2;
v0 := @this: io.smallrye.context.SmallRyeThreadContext;
v1 := @parameter0: java.lang.Object;
v2 = v1 instanceof io.smallrye.context.impl.Contextualized;
if v2 == 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Action is already contextualized");
throw v3;
label1:
return;
}
public io.smallrye.context.impl.ThreadContextProviderPlan getPlan()
{
io.smallrye.context.impl.ThreadContextProviderPlan v1;
io.smallrye.context.SmallRyeThreadContext v0;
v0 := @this: io.smallrye.context.SmallRyeThreadContext;
v1 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
return v1;
}
public java.util.concurrent.ExecutorService getDefaultExecutor()
{
io.smallrye.context.SmallRyeThreadContext v0;
java.util.concurrent.ExecutorService v1;
v0 := @this: io.smallrye.context.SmallRyeThreadContext;
v1 = v0.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.ExecutorService defaultExecutor>;
return v1;
}
public boolean isEmpty()
{
io.smallrye.context.impl.ThreadContextProviderPlan v1;
io.smallrye.context.SmallRyeThreadContext v0;
boolean v2;
v0 := @this: io.smallrye.context.SmallRyeThreadContext;
v1 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v2 = virtualinvoke v1.<io.smallrye.context.impl.ThreadContextProviderPlan: boolean isEmpty()>();
return v2;
}
public boolean isContextualized(java.lang.Object)
{
java.lang.Object v1;
io.smallrye.context.SmallRyeThreadContext v0;
boolean v2;
v0 := @this: io.smallrye.context.SmallRyeThreadContext;
v1 := @parameter0: java.lang.Object;
v2 = v1 instanceof io.smallrye.context.impl.Contextualized;
return v2;
}
public static io.smallrye.context.SmallRyeThreadContext$Builder builder()
{
io.smallrye.context.SmallRyeContextManager v1;
io.smallrye.context.SmallRyeContextManagerProvider v0;
io.smallrye.context.SmallRyeThreadContext$Builder v2;
v0 = staticinvoke <io.smallrye.context.SmallRyeContextManagerProvider: io.smallrye.context.SmallRyeContextManagerProvider instance()>();
v1 = virtualinvoke v0.<io.smallrye.context.SmallRyeContextManagerProvider: io.smallrye.context.SmallRyeContextManager getContextManager()>();
v2 = virtualinvoke v1.<io.smallrye.context.SmallRyeContextManager: io.smallrye.context.SmallRyeThreadContext$Builder newThreadContextBuilder()>();
return v2;
}
public java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture)
{
io.smallrye.context.SmallRyeThreadContext v0;
java.util.concurrent.CompletableFuture v1, v3;
java.util.concurrent.ExecutorService v2;
v0 := @this: io.smallrye.context.SmallRyeThreadContext;
v1 := @parameter0: java.util.concurrent.CompletableFuture;
v2 = v0.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.ExecutorService defaultExecutor>;
v3 = virtualinvoke v0.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v1, v2, 2);
return v3;
}
public java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture, java.util.concurrent.Executor, int)
{
java.util.concurrent.Executor v2;
io.smallrye.context.SmallRyeThreadContext v0;
int v3;
java.util.concurrent.CompletableFuture v1, v4;
v0 := @this: io.smallrye.context.SmallRyeThreadContext;
v1 := @parameter0: java.util.concurrent.CompletableFuture;
v2 := @parameter1: java.util.concurrent.Executor;
v3 := @parameter2: int;
v4 = staticinvoke <io.smallrye.context.JdkSpecific: java.util.concurrent.CompletableFuture newCompletableFutureWrapper(io.smallrye.context.SmallRyeThreadContext,java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v0, v1, v2, v3);
return v4;
}
public java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage)
{
java.util.concurrent.CompletionStage v1, v3;
io.smallrye.context.SmallRyeThreadContext v0;
java.util.concurrent.ExecutorService v2;
v0 := @this: io.smallrye.context.SmallRyeThreadContext;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 = v0.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.ExecutorService defaultExecutor>;
v3 = virtualinvoke v0.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage,java.util.concurrent.Executor)>(v1, v2);
return v3;
}
public java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage, java.util.concurrent.Executor)
{
java.util.concurrent.CompletionStage v1, v5;
java.util.concurrent.Executor v2;
io.smallrye.context.SmallRyeThreadContext v0;
java.util.concurrent.CompletableFuture v4;
boolean v3;
v0 := @this: io.smallrye.context.SmallRyeThreadContext;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 := @parameter1: java.util.concurrent.Executor;
v3 = v1 instanceof java.util.concurrent.CompletableFuture;
if v3 == 0 goto label1;
v4 = staticinvoke <io.smallrye.context.JdkSpecific: java.util.concurrent.CompletableFuture newCompletableFutureWrapper(io.smallrye.context.SmallRyeThreadContext,java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v0, v1, v2, 3);
return v4;
label1:
v5 = staticinvoke <io.smallrye.context.JdkSpecific: java.util.concurrent.CompletionStage newCompletionStageWrapper(io.smallrye.context.SmallRyeThreadContext,java.util.concurrent.CompletionStage,java.util.concurrent.Executor)>(v0, v1, v2);
return v5;
}
public java.util.concurrent.CompletableFuture completedFuture(java.lang.Object)
{
io.smallrye.context.SmallRyeThreadContext v0;
java.lang.Object v1;
java.util.concurrent.CompletableFuture v2, v4;
java.util.concurrent.ExecutorService v3;
v0 := @this: io.smallrye.context.SmallRyeThreadContext;
v1 := @parameter0: java.lang.Object;
v2 = staticinvoke <java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture completedFuture(java.lang.Object)>(v1);
v3 = v0.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.ExecutorService defaultExecutor>;
v4 = virtualinvoke v0.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v2, v3, 0);
return v4;
}
public java.util.concurrent.CompletionStage completedStage(java.lang.Object)
{
java.lang.Object v1;
java.util.concurrent.CompletableFuture v2;
io.smallrye.context.SmallRyeThreadContext v0;
v0 := @this: io.smallrye.context.SmallRyeThreadContext;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture completedFuture(java.lang.Object)>(v1);
return v2;
}
public java.util.concurrent.CompletableFuture failedFuture(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.context.SmallRyeThreadContext v0;
java.util.concurrent.CompletableFuture v2, v4;
java.util.concurrent.ExecutorService v3;
v0 := @this: io.smallrye.context.SmallRyeThreadContext;
v1 := @parameter0: java.lang.Throwable;
v2 = new java.util.concurrent.CompletableFuture;
specialinvoke v2.<java.util.concurrent.CompletableFuture: void <init>()>();
virtualinvoke v2.<java.util.concurrent.CompletableFuture: boolean completeExceptionally(java.lang.Throwable)>(v1);
v3 = v0.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.ExecutorService defaultExecutor>;
v4 = virtualinvoke v0.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v2, v3, 0);
return v4;
}
public java.util.concurrent.CompletionStage failedStage(java.lang.Throwable)
{
java.lang.Throwable v1;
java.util.concurrent.CompletableFuture v2;
io.smallrye.context.SmallRyeThreadContext v0;
v0 := @this: io.smallrye.context.SmallRyeThreadContext;
v1 := @parameter0: java.lang.Throwable;
v2 = virtualinvoke v0.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture failedFuture(java.lang.Throwable)>(v1);
return v2;
}
public java.util.concurrent.CompletableFuture newIncompleteFuture()
{
io.smallrye.context.SmallRyeThreadContext v0;
java.util.concurrent.CompletableFuture v1, v3;
java.util.concurrent.ExecutorService v2;
v0 := @this: io.smallrye.context.SmallRyeThreadContext;
v1 = new java.util.concurrent.CompletableFuture;
specialinvoke v1.<java.util.concurrent.CompletableFuture: void <init>()>();
v2 = v0.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.ExecutorService defaultExecutor>;
v3 = virtualinvoke v0.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v1, v2, 0);
return v3;
}
public java.util.concurrent.CompletableFuture copy(java.util.concurrent.CompletableFuture)
{
io.smallrye.context.SmallRyeThreadContext v0;
java.util.concurrent.CompletableFuture v1, v3;
java.util.concurrent.ExecutorService v2;
v0 := @this: io.smallrye.context.SmallRyeThreadContext;
v1 := @parameter0: java.util.concurrent.CompletableFuture;
v2 = v0.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.ExecutorService defaultExecutor>;
v3 = virtualinvoke v0.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletableFuture withContextCapture(java.util.concurrent.CompletableFuture,java.util.concurrent.Executor,int)>(v1, v2, 0);
return v3;
}
public java.util.concurrent.CompletionStage copy(java.util.concurrent.CompletionStage)
{
java.util.concurrent.CompletionStage v1, v3;
io.smallrye.context.SmallRyeThreadContext v0;
java.util.concurrent.ExecutorService v2;
v0 := @this: io.smallrye.context.SmallRyeThreadContext;
v1 := @parameter0: java.util.concurrent.CompletionStage;
v2 = v0.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.ExecutorService defaultExecutor>;
v3 = virtualinvoke v0.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.CompletionStage withContextCapture(java.util.concurrent.CompletionStage,java.util.concurrent.Executor)>(v1, v2);
return v3;
}
public java.util.concurrent.Executor currentContextExecutor()
{
io.smallrye.context.impl.CapturedContextState v17;
io.smallrye.context.impl.wrappers.ContextualExecutor2 v10;
int v13, v7;
boolean v2, v5;
io.smallrye.context.impl.wrappers.ContextualExecutorN v11;
java.lang.ThreadLocal v15;
java.util.concurrent.Executor v3;
io.smallrye.context.impl.wrappers.SlowContextualExecutor v16;
io.smallrye.context.impl.ThreadContextProviderPlan v1, v12, v14, v4, v6;
io.smallrye.context.SmallRyeThreadContext v0;
io.smallrye.context.impl.wrappers.ContextualExecutor1 v8;
io.smallrye.context.impl.wrappers.ContextualExecutor v9;
v0 := @this: io.smallrye.context.SmallRyeThreadContext;
v1 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v2 = virtualinvoke v1.<io.smallrye.context.impl.ThreadContextProviderPlan: boolean isEmpty()>();
if v2 == 0 goto label1;
v3 = <io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.Executor PASSTHROUGH_EXECUTOR>;
return v3;
label1:
v4 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v5 = virtualinvoke v4.<io.smallrye.context.impl.ThreadContextProviderPlan: boolean isFast()>();
if v5 == 0 goto label6;
v6 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v7 = virtualinvoke v6.<io.smallrye.context.impl.ThreadContextProviderPlan: int size()>();
lookupswitch(v7)
{
case 1: goto label2;
case 2: goto label3;
default: goto label4;
};
label2:
v8 = new io.smallrye.context.impl.wrappers.ContextualExecutor1;
specialinvoke v8.<io.smallrye.context.impl.wrappers.ContextualExecutor1: void <init>()>();
v9 = v8;
goto label5;
label3:
v10 = new io.smallrye.context.impl.wrappers.ContextualExecutor2;
specialinvoke v10.<io.smallrye.context.impl.wrappers.ContextualExecutor2: void <init>()>();
v9 = v10;
goto label5;
label4:
v11 = new io.smallrye.context.impl.wrappers.ContextualExecutorN;
v12 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v13 = virtualinvoke v12.<io.smallrye.context.impl.ThreadContextProviderPlan: int size()>();
specialinvoke v11.<io.smallrye.context.impl.wrappers.ContextualExecutorN: void <init>(int)>(v13);
v9 = v11;
label5:
v14 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v15 = <io.smallrye.context.SmallRyeThreadContext: java.lang.ThreadLocal currentThreadContext>;
virtualinvoke v14.<io.smallrye.context.impl.ThreadContextProviderPlan: void takeThreadContextSnapshotsFast(io.smallrye.context.SmallRyeThreadContext,java.lang.ThreadLocal,io.smallrye.context.impl.ContextHolder)>(v0, v15, v9);
return v9;
label6:
v16 = new io.smallrye.context.impl.wrappers.SlowContextualExecutor;
v17 = specialinvoke v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.CapturedContextState captureContext()>();
specialinvoke v16.<io.smallrye.context.impl.wrappers.SlowContextualExecutor: void <init>(io.smallrye.context.impl.CapturedContextState)>(v17);
return v16;
}
public java.util.function.BiConsumer contextualConsumer(java.util.function.BiConsumer)
{
io.smallrye.context.impl.CapturedContextState v17;
io.smallrye.context.impl.wrappers.SlowContextualBiConsumer v16;
int v13, v7;
java.util.function.BiConsumer v1;
io.smallrye.context.impl.wrappers.ContextualBiConsumerN v11;
boolean v3, v5;
java.lang.ThreadLocal v15;
io.smallrye.context.impl.ThreadContextProviderPlan v12, v14, v2, v4, v6;
io.smallrye.context.SmallRyeThreadContext v0;
io.smallrye.context.impl.wrappers.ContextualBiConsumer1 v8;
io.smallrye.context.impl.wrappers.ContextualBiConsumer2 v10;
io.smallrye.context.impl.wrappers.ContextualBiConsumer v9;
v0 := @this: io.smallrye.context.SmallRyeThreadContext;
v1 := @parameter0: java.util.function.BiConsumer;
specialinvoke v0.<io.smallrye.context.SmallRyeThreadContext: void checkPrecontextualized(java.lang.Object)>(v1);
v2 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v3 = virtualinvoke v2.<io.smallrye.context.impl.ThreadContextProviderPlan: boolean isEmpty()>();
if v3 == 0 goto label1;
return v1;
label1:
v4 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v5 = virtualinvoke v4.<io.smallrye.context.impl.ThreadContextProviderPlan: boolean isFast()>();
if v5 == 0 goto label6;
v6 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v7 = virtualinvoke v6.<io.smallrye.context.impl.ThreadContextProviderPlan: int size()>();
lookupswitch(v7)
{
case 1: goto label2;
case 2: goto label3;
default: goto label4;
};
label2:
v8 = new io.smallrye.context.impl.wrappers.ContextualBiConsumer1;
specialinvoke v8.<io.smallrye.context.impl.wrappers.ContextualBiConsumer1: void <init>(java.util.function.BiConsumer)>(v1);
v9 = v8;
goto label5;
label3:
v10 = new io.smallrye.context.impl.wrappers.ContextualBiConsumer2;
specialinvoke v10.<io.smallrye.context.impl.wrappers.ContextualBiConsumer2: void <init>(java.util.function.BiConsumer)>(v1);
v9 = v10;
goto label5;
label4:
v11 = new io.smallrye.context.impl.wrappers.ContextualBiConsumerN;
v12 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v13 = virtualinvoke v12.<io.smallrye.context.impl.ThreadContextProviderPlan: int size()>();
specialinvoke v11.<io.smallrye.context.impl.wrappers.ContextualBiConsumerN: void <init>(java.util.function.BiConsumer,int)>(v1, v13);
v9 = v11;
label5:
v14 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v15 = <io.smallrye.context.SmallRyeThreadContext: java.lang.ThreadLocal currentThreadContext>;
virtualinvoke v14.<io.smallrye.context.impl.ThreadContextProviderPlan: void takeThreadContextSnapshotsFast(io.smallrye.context.SmallRyeThreadContext,java.lang.ThreadLocal,io.smallrye.context.impl.ContextHolder)>(v0, v15, v9);
return v9;
label6:
v16 = new io.smallrye.context.impl.wrappers.SlowContextualBiConsumer;
v17 = specialinvoke v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.CapturedContextState captureContext()>();
specialinvoke v16.<io.smallrye.context.impl.wrappers.SlowContextualBiConsumer: void <init>(io.smallrye.context.impl.CapturedContextState,java.util.function.BiConsumer)>(v17, v1);
return v16;
}
java.util.function.BiConsumer contextualConsumerUnlessContextualized(java.util.function.BiConsumer)
{
io.smallrye.context.SmallRyeThreadContext v0;
java.util.function.BiConsumer v1, v3;
boolean v2;
v0 := @this: io.smallrye.context.SmallRyeThreadContext;
v1 := @parameter0: java.util.function.BiConsumer;
v2 = v1 instanceof io.smallrye.context.impl.Contextualized;
if v2 == 0 goto label1;
return v1;
label1:
v3 = virtualinvoke v0.<io.smallrye.context.SmallRyeThreadContext: java.util.function.BiConsumer contextualConsumer(java.util.function.BiConsumer)>(v1);
return v3;
}
public java.util.function.BiFunction contextualFunction(java.util.function.BiFunction)
{
io.smallrye.context.impl.wrappers.SlowContextualBiFunction v16;
io.smallrye.context.impl.CapturedContextState v17;
java.util.function.BiFunction v1;
io.smallrye.context.impl.wrappers.ContextualBiFunction1 v8;
io.smallrye.context.impl.wrappers.ContextualBiFunction2 v10;
int v13, v7;
boolean v3, v5;
java.lang.ThreadLocal v15;
io.smallrye.context.impl.ThreadContextProviderPlan v12, v14, v2, v4, v6;
io.smallrye.context.impl.wrappers.ContextualBiFunctionN v11;
io.smallrye.context.SmallRyeThreadContext v0;
io.smallrye.context.impl.wrappers.ContextualBiFunction v9;
v0 := @this: io.smallrye.context.SmallRyeThreadContext;
v1 := @parameter0: java.util.function.BiFunction;
specialinvoke v0.<io.smallrye.context.SmallRyeThreadContext: void checkPrecontextualized(java.lang.Object)>(v1);
v2 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v3 = virtualinvoke v2.<io.smallrye.context.impl.ThreadContextProviderPlan: boolean isEmpty()>();
if v3 == 0 goto label1;
return v1;
label1:
v4 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v5 = virtualinvoke v4.<io.smallrye.context.impl.ThreadContextProviderPlan: boolean isFast()>();
if v5 == 0 goto label6;
v6 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v7 = virtualinvoke v6.<io.smallrye.context.impl.ThreadContextProviderPlan: int size()>();
lookupswitch(v7)
{
case 1: goto label2;
case 2: goto label3;
default: goto label4;
};
label2:
v8 = new io.smallrye.context.impl.wrappers.ContextualBiFunction1;
specialinvoke v8.<io.smallrye.context.impl.wrappers.ContextualBiFunction1: void <init>(java.util.function.BiFunction)>(v1);
v9 = v8;
goto label5;
label3:
v10 = new io.smallrye.context.impl.wrappers.ContextualBiFunction2;
specialinvoke v10.<io.smallrye.context.impl.wrappers.ContextualBiFunction2: void <init>(java.util.function.BiFunction)>(v1);
v9 = v10;
goto label5;
label4:
v11 = new io.smallrye.context.impl.wrappers.ContextualBiFunctionN;
v12 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v13 = virtualinvoke v12.<io.smallrye.context.impl.ThreadContextProviderPlan: int size()>();
specialinvoke v11.<io.smallrye.context.impl.wrappers.ContextualBiFunctionN: void <init>(java.util.function.BiFunction,int)>(v1, v13);
v9 = v11;
label5:
v14 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v15 = <io.smallrye.context.SmallRyeThreadContext: java.lang.ThreadLocal currentThreadContext>;
virtualinvoke v14.<io.smallrye.context.impl.ThreadContextProviderPlan: void takeThreadContextSnapshotsFast(io.smallrye.context.SmallRyeThreadContext,java.lang.ThreadLocal,io.smallrye.context.impl.ContextHolder)>(v0, v15, v9);
return v9;
label6:
v16 = new io.smallrye.context.impl.wrappers.SlowContextualBiFunction;
v17 = specialinvoke v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.CapturedContextState captureContext()>();
specialinvoke v16.<io.smallrye.context.impl.wrappers.SlowContextualBiFunction: void <init>(io.smallrye.context.impl.CapturedContextState,java.util.function.BiFunction)>(v17, v1);
return v16;
}
java.util.function.BiFunction contextualFunctionUnlessContextualized(java.util.function.BiFunction)
{
io.smallrye.context.SmallRyeThreadContext v0;
java.util.function.BiFunction v1, v3;
boolean v2;
v0 := @this: io.smallrye.context.SmallRyeThreadContext;
v1 := @parameter0: java.util.function.BiFunction;
v2 = v1 instanceof io.smallrye.context.impl.Contextualized;
if v2 == 0 goto label1;
return v1;
label1:
v3 = virtualinvoke v0.<io.smallrye.context.SmallRyeThreadContext: java.util.function.BiFunction contextualFunction(java.util.function.BiFunction)>(v1);
return v3;
}
public java.util.concurrent.Callable contextualCallable(java.util.concurrent.Callable)
{
io.smallrye.context.impl.CapturedContextState v17;
io.smallrye.context.impl.wrappers.SlowContextualCallable v16;
java.util.concurrent.Callable v1;
io.smallrye.context.impl.wrappers.ContextualCallableN v11;
io.smallrye.context.impl.wrappers.ContextualCallable v9;
int v13, v7;
boolean v3, v5;
java.lang.ThreadLocal v15;
io.smallrye.context.impl.ThreadContextProviderPlan v12, v14, v2, v4, v6;
io.smallrye.context.SmallRyeThreadContext v0;
io.smallrye.context.impl.wrappers.ContextualCallable2 v10;
io.smallrye.context.impl.wrappers.ContextualCallable1 v8;
v0 := @this: io.smallrye.context.SmallRyeThreadContext;
v1 := @parameter0: java.util.concurrent.Callable;
specialinvoke v0.<io.smallrye.context.SmallRyeThreadContext: void checkPrecontextualized(java.lang.Object)>(v1);
v2 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v3 = virtualinvoke v2.<io.smallrye.context.impl.ThreadContextProviderPlan: boolean isEmpty()>();
if v3 == 0 goto label1;
return v1;
label1:
v4 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v5 = virtualinvoke v4.<io.smallrye.context.impl.ThreadContextProviderPlan: boolean isFast()>();
if v5 == 0 goto label6;
v6 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v7 = virtualinvoke v6.<io.smallrye.context.impl.ThreadContextProviderPlan: int size()>();
lookupswitch(v7)
{
case 1: goto label2;
case 2: goto label3;
default: goto label4;
};
label2:
v8 = new io.smallrye.context.impl.wrappers.ContextualCallable1;
specialinvoke v8.<io.smallrye.context.impl.wrappers.ContextualCallable1: void <init>(java.util.concurrent.Callable)>(v1);
v9 = v8;
goto label5;
label3:
v10 = new io.smallrye.context.impl.wrappers.ContextualCallable2;
specialinvoke v10.<io.smallrye.context.impl.wrappers.ContextualCallable2: void <init>(java.util.concurrent.Callable)>(v1);
v9 = v10;
goto label5;
label4:
v11 = new io.smallrye.context.impl.wrappers.ContextualCallableN;
v12 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v13 = virtualinvoke v12.<io.smallrye.context.impl.ThreadContextProviderPlan: int size()>();
specialinvoke v11.<io.smallrye.context.impl.wrappers.ContextualCallableN: void <init>(java.util.concurrent.Callable,int)>(v1, v13);
v9 = v11;
label5:
v14 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v15 = <io.smallrye.context.SmallRyeThreadContext: java.lang.ThreadLocal currentThreadContext>;
virtualinvoke v14.<io.smallrye.context.impl.ThreadContextProviderPlan: void takeThreadContextSnapshotsFast(io.smallrye.context.SmallRyeThreadContext,java.lang.ThreadLocal,io.smallrye.context.impl.ContextHolder)>(v0, v15, v9);
return v9;
label6:
v16 = new io.smallrye.context.impl.wrappers.SlowContextualCallable;
v17 = specialinvoke v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.CapturedContextState captureContext()>();
specialinvoke v16.<io.smallrye.context.impl.wrappers.SlowContextualCallable: void <init>(io.smallrye.context.impl.CapturedContextState,java.util.concurrent.Callable)>(v17, v1);
return v16;
}
java.util.concurrent.Callable contextualCallableUnlessContextualized(java.util.concurrent.Callable)
{
io.smallrye.context.SmallRyeThreadContext v0;
java.util.concurrent.Callable v1, v3;
boolean v2;
v0 := @this: io.smallrye.context.SmallRyeThreadContext;
v1 := @parameter0: java.util.concurrent.Callable;
v2 = v1 instanceof io.smallrye.context.impl.Contextualized;
if v2 == 0 goto label1;
return v1;
label1:
v3 = virtualinvoke v0.<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.Callable contextualCallable(java.util.concurrent.Callable)>(v1);
return v3;
}
public java.util.function.Consumer contextualConsumer(java.util.function.Consumer)
{
io.smallrye.context.impl.CapturedContextState v17;
io.smallrye.context.impl.wrappers.ContextualConsumer1 v8;
io.smallrye.context.impl.wrappers.ContextualConsumer2 v10;
int v13, v7;
boolean v3, v5;
java.lang.ThreadLocal v15;
io.smallrye.context.impl.wrappers.ContextualConsumerN v11;
io.smallrye.context.impl.wrappers.SlowContextualConsumer v16;
io.smallrye.context.impl.ThreadContextProviderPlan v12, v14, v2, v4, v6;
java.util.function.Consumer v1;
io.smallrye.context.SmallRyeThreadContext v0;
io.smallrye.context.impl.wrappers.ContextualConsumer v9;
v0 := @this: io.smallrye.context.SmallRyeThreadContext;
v1 := @parameter0: java.util.function.Consumer;
specialinvoke v0.<io.smallrye.context.SmallRyeThreadContext: void checkPrecontextualized(java.lang.Object)>(v1);
v2 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v3 = virtualinvoke v2.<io.smallrye.context.impl.ThreadContextProviderPlan: boolean isEmpty()>();
if v3 == 0 goto label1;
return v1;
label1:
v4 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v5 = virtualinvoke v4.<io.smallrye.context.impl.ThreadContextProviderPlan: boolean isFast()>();
if v5 == 0 goto label6;
v6 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v7 = virtualinvoke v6.<io.smallrye.context.impl.ThreadContextProviderPlan: int size()>();
lookupswitch(v7)
{
case 1: goto label2;
case 2: goto label3;
default: goto label4;
};
label2:
v8 = new io.smallrye.context.impl.wrappers.ContextualConsumer1;
specialinvoke v8.<io.smallrye.context.impl.wrappers.ContextualConsumer1: void <init>(java.util.function.Consumer)>(v1);
v9 = v8;
goto label5;
label3:
v10 = new io.smallrye.context.impl.wrappers.ContextualConsumer2;
specialinvoke v10.<io.smallrye.context.impl.wrappers.ContextualConsumer2: void <init>(java.util.function.Consumer)>(v1);
v9 = v10;
goto label5;
label4:
v11 = new io.smallrye.context.impl.wrappers.ContextualConsumerN;
v12 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v13 = virtualinvoke v12.<io.smallrye.context.impl.ThreadContextProviderPlan: int size()>();
specialinvoke v11.<io.smallrye.context.impl.wrappers.ContextualConsumerN: void <init>(java.util.function.Consumer,int)>(v1, v13);
v9 = v11;
label5:
v14 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v15 = <io.smallrye.context.SmallRyeThreadContext: java.lang.ThreadLocal currentThreadContext>;
virtualinvoke v14.<io.smallrye.context.impl.ThreadContextProviderPlan: void takeThreadContextSnapshotsFast(io.smallrye.context.SmallRyeThreadContext,java.lang.ThreadLocal,io.smallrye.context.impl.ContextHolder)>(v0, v15, v9);
return v9;
label6:
v16 = new io.smallrye.context.impl.wrappers.SlowContextualConsumer;
v17 = specialinvoke v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.CapturedContextState captureContext()>();
specialinvoke v16.<io.smallrye.context.impl.wrappers.SlowContextualConsumer: void <init>(io.smallrye.context.impl.CapturedContextState,java.util.function.Consumer)>(v17, v1);
return v16;
}
java.util.function.Consumer contextualConsumerUnlessContextualized(java.util.function.Consumer)
{
java.util.function.Consumer v1, v3;
io.smallrye.context.SmallRyeThreadContext v0;
boolean v2;
v0 := @this: io.smallrye.context.SmallRyeThreadContext;
v1 := @parameter0: java.util.function.Consumer;
v2 = v1 instanceof io.smallrye.context.impl.Contextualized;
if v2 == 0 goto label1;
return v1;
label1:
v3 = virtualinvoke v0.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Consumer contextualConsumer(java.util.function.Consumer)>(v1);
return v3;
}
public java.util.function.Function contextualFunction(java.util.function.Function)
{
io.smallrye.context.impl.CapturedContextState v17;
java.util.function.Function v1;
int v13, v7;
io.smallrye.context.impl.wrappers.SlowContextualFunction v16;
io.smallrye.context.impl.wrappers.ContextualFunctionN v11;
boolean v3, v5;
io.smallrye.context.impl.wrappers.ContextualFunction v9;
java.lang.ThreadLocal v15;
io.smallrye.context.impl.ThreadContextProviderPlan v12, v14, v2, v4, v6;
io.smallrye.context.impl.wrappers.ContextualFunction2 v10;
io.smallrye.context.impl.wrappers.ContextualFunction1 v8;
io.smallrye.context.SmallRyeThreadContext v0;
v0 := @this: io.smallrye.context.SmallRyeThreadContext;
v1 := @parameter0: java.util.function.Function;
specialinvoke v0.<io.smallrye.context.SmallRyeThreadContext: void checkPrecontextualized(java.lang.Object)>(v1);
v2 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v3 = virtualinvoke v2.<io.smallrye.context.impl.ThreadContextProviderPlan: boolean isEmpty()>();
if v3 == 0 goto label1;
return v1;
label1:
v4 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v5 = virtualinvoke v4.<io.smallrye.context.impl.ThreadContextProviderPlan: boolean isFast()>();
if v5 == 0 goto label6;
v6 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v7 = virtualinvoke v6.<io.smallrye.context.impl.ThreadContextProviderPlan: int size()>();
lookupswitch(v7)
{
case 1: goto label2;
case 2: goto label3;
default: goto label4;
};
label2:
v8 = new io.smallrye.context.impl.wrappers.ContextualFunction1;
specialinvoke v8.<io.smallrye.context.impl.wrappers.ContextualFunction1: void <init>(java.util.function.Function)>(v1);
v9 = v8;
goto label5;
label3:
v10 = new io.smallrye.context.impl.wrappers.ContextualFunction2;
specialinvoke v10.<io.smallrye.context.impl.wrappers.ContextualFunction2: void <init>(java.util.function.Function)>(v1);
v9 = v10;
goto label5;
label4:
v11 = new io.smallrye.context.impl.wrappers.ContextualFunctionN;
v12 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v13 = virtualinvoke v12.<io.smallrye.context.impl.ThreadContextProviderPlan: int size()>();
specialinvoke v11.<io.smallrye.context.impl.wrappers.ContextualFunctionN: void <init>(java.util.function.Function,int)>(v1, v13);
v9 = v11;
label5:
v14 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v15 = <io.smallrye.context.SmallRyeThreadContext: java.lang.ThreadLocal currentThreadContext>;
virtualinvoke v14.<io.smallrye.context.impl.ThreadContextProviderPlan: void takeThreadContextSnapshotsFast(io.smallrye.context.SmallRyeThreadContext,java.lang.ThreadLocal,io.smallrye.context.impl.ContextHolder)>(v0, v15, v9);
return v9;
label6:
v16 = new io.smallrye.context.impl.wrappers.SlowContextualFunction;
v17 = specialinvoke v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.CapturedContextState captureContext()>();
specialinvoke v16.<io.smallrye.context.impl.wrappers.SlowContextualFunction: void <init>(io.smallrye.context.impl.CapturedContextState,java.util.function.Function)>(v17, v1);
return v16;
}
java.util.function.Function contextualFunctionUnlessContextualized(java.util.function.Function)
{
io.smallrye.context.SmallRyeThreadContext v0;
java.util.function.Function v1, v3;
boolean v2;
v0 := @this: io.smallrye.context.SmallRyeThreadContext;
v1 := @parameter0: java.util.function.Function;
v2 = v1 instanceof io.smallrye.context.impl.Contextualized;
if v2 == 0 goto label1;
return v1;
label1:
v3 = virtualinvoke v0.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Function contextualFunction(java.util.function.Function)>(v1);
return v3;
}
public java.lang.Runnable contextualRunnable(java.lang.Runnable)
{
io.smallrye.context.impl.CapturedContextState v17;
io.smallrye.context.impl.wrappers.ContextualRunnableN v11;
io.smallrye.context.impl.wrappers.ContextualRunnable v9;
java.lang.Runnable v1;
int v13, v7;
boolean v3, v5;
io.smallrye.context.impl.wrappers.ContextualRunnable1 v8;
java.lang.ThreadLocal v15;
io.smallrye.context.impl.wrappers.ContextualRunnable2 v10;
io.smallrye.context.impl.ThreadContextProviderPlan v12, v14, v2, v4, v6;
io.smallrye.context.SmallRyeThreadContext v0;
io.smallrye.context.impl.wrappers.SlowContextualRunnable v16;
v0 := @this: io.smallrye.context.SmallRyeThreadContext;
v1 := @parameter0: java.lang.Runnable;
specialinvoke v0.<io.smallrye.context.SmallRyeThreadContext: void checkPrecontextualized(java.lang.Object)>(v1);
v2 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v3 = virtualinvoke v2.<io.smallrye.context.impl.ThreadContextProviderPlan: boolean isEmpty()>();
if v3 == 0 goto label1;
return v1;
label1:
v4 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v5 = virtualinvoke v4.<io.smallrye.context.impl.ThreadContextProviderPlan: boolean isFast()>();
if v5 == 0 goto label6;
v6 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v7 = virtualinvoke v6.<io.smallrye.context.impl.ThreadContextProviderPlan: int size()>();
lookupswitch(v7)
{
case 1: goto label2;
case 2: goto label3;
default: goto label4;
};
label2:
v8 = new io.smallrye.context.impl.wrappers.ContextualRunnable1;
specialinvoke v8.<io.smallrye.context.impl.wrappers.ContextualRunnable1: void <init>(java.lang.Runnable)>(v1);
v9 = v8;
goto label5;
label3:
v10 = new io.smallrye.context.impl.wrappers.ContextualRunnable2;
specialinvoke v10.<io.smallrye.context.impl.wrappers.ContextualRunnable2: void <init>(java.lang.Runnable)>(v1);
v9 = v10;
goto label5;
label4:
v11 = new io.smallrye.context.impl.wrappers.ContextualRunnableN;
v12 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v13 = virtualinvoke v12.<io.smallrye.context.impl.ThreadContextProviderPlan: int size()>();
specialinvoke v11.<io.smallrye.context.impl.wrappers.ContextualRunnableN: void <init>(java.lang.Runnable,int)>(v1, v13);
v9 = v11;
label5:
v14 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v15 = <io.smallrye.context.SmallRyeThreadContext: java.lang.ThreadLocal currentThreadContext>;
virtualinvoke v14.<io.smallrye.context.impl.ThreadContextProviderPlan: void takeThreadContextSnapshotsFast(io.smallrye.context.SmallRyeThreadContext,java.lang.ThreadLocal,io.smallrye.context.impl.ContextHolder)>(v0, v15, v9);
return v9;
label6:
v16 = new io.smallrye.context.impl.wrappers.SlowContextualRunnable;
v17 = specialinvoke v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.CapturedContextState captureContext()>();
specialinvoke v16.<io.smallrye.context.impl.wrappers.SlowContextualRunnable: void <init>(io.smallrye.context.impl.CapturedContextState,java.lang.Runnable)>(v17, v1);
return v16;
}
java.lang.Runnable contextualRunnableUnlessContextualized(java.lang.Runnable)
{
io.smallrye.context.SmallRyeThreadContext v0;
java.lang.Runnable v1, v3;
boolean v2;
v0 := @this: io.smallrye.context.SmallRyeThreadContext;
v1 := @parameter0: java.lang.Runnable;
v2 = v1 instanceof io.smallrye.context.impl.Contextualized;
if v2 == 0 goto label1;
return v1;
label1:
v3 = virtualinvoke v0.<io.smallrye.context.SmallRyeThreadContext: java.lang.Runnable contextualRunnable(java.lang.Runnable)>(v1);
return v3;
}
public java.util.function.Supplier contextualSupplier(java.util.function.Supplier)
{
io.smallrye.context.impl.CapturedContextState v17;
io.smallrye.context.impl.wrappers.ContextualSupplier1 v8;
io.smallrye.context.impl.wrappers.ContextualSupplier v9;
io.smallrye.context.impl.wrappers.ContextualSupplier2 v10;
java.util.function.Supplier v1;
int v13, v7;
io.smallrye.context.impl.wrappers.SlowContextualSupplier v16;
boolean v3, v5;
java.lang.ThreadLocal v15;
io.smallrye.context.impl.ThreadContextProviderPlan v12, v14, v2, v4, v6;
io.smallrye.context.impl.wrappers.ContextualSupplierN v11;
io.smallrye.context.SmallRyeThreadContext v0;
v0 := @this: io.smallrye.context.SmallRyeThreadContext;
v1 := @parameter0: java.util.function.Supplier;
specialinvoke v0.<io.smallrye.context.SmallRyeThreadContext: void checkPrecontextualized(java.lang.Object)>(v1);
v2 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v3 = virtualinvoke v2.<io.smallrye.context.impl.ThreadContextProviderPlan: boolean isEmpty()>();
if v3 == 0 goto label1;
return v1;
label1:
v4 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v5 = virtualinvoke v4.<io.smallrye.context.impl.ThreadContextProviderPlan: boolean isFast()>();
if v5 == 0 goto label6;
v6 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v7 = virtualinvoke v6.<io.smallrye.context.impl.ThreadContextProviderPlan: int size()>();
lookupswitch(v7)
{
case 1: goto label2;
case 2: goto label3;
default: goto label4;
};
label2:
v8 = new io.smallrye.context.impl.wrappers.ContextualSupplier1;
specialinvoke v8.<io.smallrye.context.impl.wrappers.ContextualSupplier1: void <init>(java.util.function.Supplier)>(v1);
v9 = v8;
goto label5;
label3:
v10 = new io.smallrye.context.impl.wrappers.ContextualSupplier2;
specialinvoke v10.<io.smallrye.context.impl.wrappers.ContextualSupplier2: void <init>(java.util.function.Supplier)>(v1);
v9 = v10;
goto label5;
label4:
v11 = new io.smallrye.context.impl.wrappers.ContextualSupplierN;
v12 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v13 = virtualinvoke v12.<io.smallrye.context.impl.ThreadContextProviderPlan: int size()>();
specialinvoke v11.<io.smallrye.context.impl.wrappers.ContextualSupplierN: void <init>(java.util.function.Supplier,int)>(v1, v13);
v9 = v11;
label5:
v14 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v15 = <io.smallrye.context.SmallRyeThreadContext: java.lang.ThreadLocal currentThreadContext>;
virtualinvoke v14.<io.smallrye.context.impl.ThreadContextProviderPlan: void takeThreadContextSnapshotsFast(io.smallrye.context.SmallRyeThreadContext,java.lang.ThreadLocal,io.smallrye.context.impl.ContextHolder)>(v0, v15, v9);
return v9;
label6:
v16 = new io.smallrye.context.impl.wrappers.SlowContextualSupplier;
v17 = specialinvoke v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.CapturedContextState captureContext()>();
specialinvoke v16.<io.smallrye.context.impl.wrappers.SlowContextualSupplier: void <init>(io.smallrye.context.impl.CapturedContextState,java.util.function.Supplier)>(v17, v1);
return v16;
}
java.util.function.Supplier contextualSupplierUnlessContextualized(java.util.function.Supplier)
{
io.smallrye.context.SmallRyeThreadContext v0;
java.util.function.Supplier v1, v3;
boolean v2;
v0 := @this: io.smallrye.context.SmallRyeThreadContext;
v1 := @parameter0: java.util.function.Supplier;
v2 = v1 instanceof io.smallrye.context.impl.Contextualized;
if v2 == 0 goto label1;
return v1;
label1:
v3 = virtualinvoke v0.<io.smallrye.context.SmallRyeThreadContext: java.util.function.Supplier contextualSupplier(java.util.function.Supplier)>(v1);
return v3;
}
private io.smallrye.context.impl.CapturedContextState captureContext()
{
io.smallrye.context.SmallRyeThreadContext v0;
io.smallrye.context.impl.SlowCapturedContextState v1;
v0 := @this: io.smallrye.context.SmallRyeThreadContext;
v1 = new io.smallrye.context.impl.SlowCapturedContextState;
specialinvoke v1.<io.smallrye.context.impl.SlowCapturedContextState: void <init>(io.smallrye.context.SmallRyeThreadContext)>(v0);
return v1;
}
public java.lang.String toString()
{
java.lang.String v16, v19, v20, v3;
java.util.Set v11, v15, v7;
io.smallrye.context.impl.ThreadContextProviderPlan v10, v14, v6;
io.smallrye.context.SmallRyeThreadContext v0;
java.lang.Class v2;
java.lang.StringBuilder v1, v12, v13, v17, v18, v4, v5, v8, v9;
v0 := @this: io.smallrye.context.SmallRyeThreadContext;
v1 = new java.lang.StringBuilder;
specialinvoke v1.<java.lang.StringBuilder: void <init>()>();
v2 = class "Lio/smallrye/context/SmallRyeThreadContext;";
v3 = virtualinvoke v2.<java.lang.Class: java.lang.String getName()>();
v4 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v3);
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
v5 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("with cleared contexts: ");
v6 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v7 = v6.<io.smallrye.context.impl.ThreadContextProviderPlan: java.util.Set clearedProviders>;
v8 = virtualinvoke v5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v7);
virtualinvoke v8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
v9 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("with propagated contexts: ");
v10 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v11 = v10.<io.smallrye.context.impl.ThreadContextProviderPlan: java.util.Set propagatedProviders>;
v12 = virtualinvoke v9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v11);
virtualinvoke v12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
v13 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("with unchanged contexts: ");
v14 = v0.<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.impl.ThreadContextProviderPlan plan>;
v15 = v14.<io.smallrye.context.impl.ThreadContextProviderPlan: java.util.Set unchangedProviders>;
virtualinvoke v13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v15);
v16 = v0.<io.smallrye.context.SmallRyeThreadContext: java.lang.String injectionPointName>;
if v16 == null goto label1;
v17 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
v18 = virtualinvoke v17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with injection point name: ");
v19 = v0.<io.smallrye.context.SmallRyeThreadContext: java.lang.String injectionPointName>;
virtualinvoke v18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v19);
label1:
v20 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.String toString()>();
return v20;
}
static void <clinit>()
{
io.smallrye.context.SmallRyeThreadContext$2 v2;
java.lang.ThreadLocal v0;
io.smallrye.context.SmallRyeThreadContext$1 v1;
v0 = staticinvoke <io.smallrye.context.storage.spi.StorageManager: java.lang.ThreadLocal threadLocal(java.lang.Class)>(class "Lio/smallrye/context/impl/SmallRyeThreadContextStorageDeclaration;");
<io.smallrye.context.SmallRyeThreadContext: java.lang.ThreadLocal currentThreadContext> = v0;
v1 = new io.smallrye.context.SmallRyeThreadContext$1;
specialinvoke v1.<io.smallrye.context.SmallRyeThreadContext$1: void <init>()>();
<io.smallrye.context.SmallRyeThreadContext: io.smallrye.context.CleanAutoCloseable NULL_THREAD_STATE> = v1;
v2 = new io.smallrye.context.SmallRyeThreadContext$2;
specialinvoke v2.<io.smallrye.context.SmallRyeThreadContext$2: void <init>()>();
<io.smallrye.context.SmallRyeThreadContext: java.util.concurrent.Executor PASSTHROUGH_EXECUTOR> = v2;
return;
}
}