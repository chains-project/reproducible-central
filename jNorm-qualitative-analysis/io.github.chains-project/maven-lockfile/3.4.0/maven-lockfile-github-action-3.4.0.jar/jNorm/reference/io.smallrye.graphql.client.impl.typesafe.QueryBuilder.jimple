public class io.smallrye.graphql.client.impl.typesafe.QueryBuilder extends java.lang.Object
{
private final io.smallrye.graphql.client.impl.typesafe.reflection.MethodInvocation method;
private final java.util.Stack typeStack;
private final java.util.Stack expressionStack;
public void <init>(io.smallrye.graphql.client.impl.typesafe.reflection.MethodInvocation)
{
io.smallrye.graphql.client.impl.typesafe.QueryBuilder v0;
io.smallrye.graphql.client.impl.typesafe.reflection.MethodInvocation v1;
java.util.Stack v2, v3;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.QueryBuilder;
v1 := @parameter0: io.smallrye.graphql.client.impl.typesafe.reflection.MethodInvocation;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.Stack;
specialinvoke v2.<java.util.Stack: void <init>()>();
v0.<io.smallrye.graphql.client.impl.typesafe.QueryBuilder: java.util.Stack typeStack> = v2;
v3 = new java.util.Stack;
specialinvoke v3.<java.util.Stack: void <init>()>();
v0.<io.smallrye.graphql.client.impl.typesafe.QueryBuilder: java.util.Stack expressionStack> = v3;
v0.<io.smallrye.graphql.client.impl.typesafe.QueryBuilder: io.smallrye.graphql.client.impl.typesafe.reflection.MethodInvocation method> = v1;
return;
}
public java.lang.String build()
{
int[] v2;
io.smallrye.graphql.client.impl.typesafe.reflection.MethodInvocation v11, v17, v19, v21, v23, v29, v3, v32, v7, v9;
java.util.stream.Collector v15, v27;
boolean v10, v18, v22, v33;
java.util.stream.Stream v12, v14, v24, v26;
java.lang.StringBuilder v1;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v30;
java.util.function.Function v13, v25;
int v5, v6;
java.lang.String v20, v31, v34, v8;
io.smallrye.graphql.client.core.OperationType v4;
io.smallrye.graphql.client.impl.typesafe.QueryBuilder v0;
java.lang.Object v16, v28;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.QueryBuilder;
v1 = new java.lang.StringBuilder;
specialinvoke v1.<java.lang.StringBuilder: void <init>()>();
v2 = <io.smallrye.graphql.client.impl.typesafe.QueryBuilder$1: int[] $SwitchMap$io$smallrye$graphql$client$core$OperationType>;
v3 = v0.<io.smallrye.graphql.client.impl.typesafe.QueryBuilder: io.smallrye.graphql.client.impl.typesafe.reflection.MethodInvocation method>;
v4 = virtualinvoke v3.<io.smallrye.graphql.client.impl.typesafe.reflection.MethodInvocation: io.smallrye.graphql.client.core.OperationType getOperationType()>();
v5 = virtualinvoke v4.<io.smallrye.graphql.client.core.OperationType: int ordinal()>();
v6 = v2[v5];
tableswitch(v6)
{
case 1: goto label1;
case 2: goto label2;
case 3: goto label3;
default: goto label4;
};
label1:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("query ");
goto label4;
label2:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mutation ");
goto label4;
label3:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("subscription ");
label4:
v7 = v0.<io.smallrye.graphql.client.impl.typesafe.QueryBuilder: io.smallrye.graphql.client.impl.typesafe.reflection.MethodInvocation method>;
v8 = virtualinvoke v7.<io.smallrye.graphql.client.impl.typesafe.reflection.MethodInvocation: java.lang.String getName()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v8);
v9 = v0.<io.smallrye.graphql.client.impl.typesafe.QueryBuilder: io.smallrye.graphql.client.impl.typesafe.reflection.MethodInvocation method>;
v10 = virtualinvoke v9.<io.smallrye.graphql.client.impl.typesafe.reflection.MethodInvocation: boolean hasValueParameters()>();
if v10 == 0 goto label5;
v11 = v0.<io.smallrye.graphql.client.impl.typesafe.QueryBuilder: io.smallrye.graphql.client.impl.typesafe.reflection.MethodInvocation method>;
v12 = virtualinvoke v11.<io.smallrye.graphql.client.impl.typesafe.reflection.MethodInvocation: java.util.stream.Stream valueParameters()>();
v13 = staticinvoke <io.smallrye.graphql.client.impl.typesafe.QueryBuilder$declare__721: java.util.function.Function bootstrap$(io.smallrye.graphql.client.impl.typesafe.QueryBuilder)>(v0);
v14 = interfaceinvoke v12.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v13);
v15 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>(", ", "(", ")");
v16 = interfaceinvoke v14.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v15);
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v16);
label5:
v17 = v0.<io.smallrye.graphql.client.impl.typesafe.QueryBuilder: io.smallrye.graphql.client.impl.typesafe.reflection.MethodInvocation method>;
v18 = virtualinvoke v17.<io.smallrye.graphql.client.impl.typesafe.reflection.MethodInvocation: boolean isSingle()>();
if v18 == 0 goto label6;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" { ");
v19 = v0.<io.smallrye.graphql.client.impl.typesafe.QueryBuilder: io.smallrye.graphql.client.impl.typesafe.reflection.MethodInvocation method>;
v20 = virtualinvoke v19.<io.smallrye.graphql.client.impl.typesafe.reflection.MethodInvocation: java.lang.String getName()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v20);
v21 = v0.<io.smallrye.graphql.client.impl.typesafe.QueryBuilder: io.smallrye.graphql.client.impl.typesafe.reflection.MethodInvocation method>;
v22 = virtualinvoke v21.<io.smallrye.graphql.client.impl.typesafe.reflection.MethodInvocation: boolean hasRootParameters()>();
if v22 == 0 goto label6;
v23 = v0.<io.smallrye.graphql.client.impl.typesafe.QueryBuilder: io.smallrye.graphql.client.impl.typesafe.reflection.MethodInvocation method>;
v24 = virtualinvoke v23.<io.smallrye.graphql.client.impl.typesafe.reflection.MethodInvocation: java.util.stream.Stream rootParameters()>();
v25 = staticinvoke <io.smallrye.graphql.client.impl.typesafe.QueryBuilder$bind__720: java.util.function.Function bootstrap$(io.smallrye.graphql.client.impl.typesafe.QueryBuilder)>(v0);
v26 = interfaceinvoke v24.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v25);
v27 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>(", ", "(", ")");
v28 = interfaceinvoke v26.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v27);
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v28);
label6:
v29 = v0.<io.smallrye.graphql.client.impl.typesafe.QueryBuilder: io.smallrye.graphql.client.impl.typesafe.reflection.MethodInvocation method>;
v30 = virtualinvoke v29.<io.smallrye.graphql.client.impl.typesafe.reflection.MethodInvocation: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo getReturnType()>();
v31 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.QueryBuilder: java.lang.String fields(io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo)>(v30);
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v31);
v32 = v0.<io.smallrye.graphql.client.impl.typesafe.QueryBuilder: io.smallrye.graphql.client.impl.typesafe.reflection.MethodInvocation method>;
v33 = virtualinvoke v32.<io.smallrye.graphql.client.impl.typesafe.reflection.MethodInvocation: boolean isSingle()>();
if v33 == 0 goto label7;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" }");
label7:
v34 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.String toString()>();
return v34;
}
public java.lang.String declare(io.smallrye.graphql.client.impl.typesafe.reflection.ParameterInfo)
{
io.smallrye.graphql.client.impl.typesafe.QueryBuilder v0;
io.smallrye.graphql.client.impl.typesafe.reflection.ParameterInfo v1;
java.lang.String v2, v3, v4;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.QueryBuilder;
v1 := @parameter0: io.smallrye.graphql.client.impl.typesafe.reflection.ParameterInfo;
v2 = virtualinvoke v1.<io.smallrye.graphql.client.impl.typesafe.reflection.ParameterInfo: java.lang.String getRawName()>();
v3 = virtualinvoke v1.<io.smallrye.graphql.client.impl.typesafe.reflection.ParameterInfo: java.lang.String graphQlInputTypeName()>();
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v2, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("$\u0001: \u0001");
return v4;
}
public java.lang.String bind(io.smallrye.graphql.client.impl.typesafe.reflection.ParameterInfo)
{
io.smallrye.graphql.client.impl.typesafe.QueryBuilder v0;
io.smallrye.graphql.client.impl.typesafe.reflection.ParameterInfo v1;
java.lang.String v2, v3, v4;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.QueryBuilder;
v1 := @parameter0: io.smallrye.graphql.client.impl.typesafe.reflection.ParameterInfo;
v2 = virtualinvoke v1.<io.smallrye.graphql.client.impl.typesafe.reflection.ParameterInfo: java.lang.String getName()>();
v3 = virtualinvoke v1.<io.smallrye.graphql.client.impl.typesafe.reflection.ParameterInfo: java.lang.String getRawName()>();
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v2, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001: $\u0001");
return v4;
}
private java.lang.String fields(io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo)
{
java.lang.Throwable v11;
java.lang.IllegalStateException v6;
java.util.Stack v10, v12, v2, v7;
io.smallrye.graphql.client.impl.typesafe.QueryBuilder v0;
java.lang.String v3, v8, v9;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v1;
io.smallrye.graphql.client.impl.SmallRyeGraphQLClientMessages v5;
boolean v4;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.QueryBuilder;
v1 := @parameter0: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
v2 = v0.<io.smallrye.graphql.client.impl.typesafe.QueryBuilder: java.util.Stack typeStack>;
v3 = virtualinvoke v1.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.String getTypeName()>();
v4 = virtualinvoke v2.<java.util.Stack: boolean contains(java.lang.Object)>(v3);
if v4 == 0 goto label1;
v5 = <io.smallrye.graphql.client.impl.SmallRyeGraphQLClientMessages: io.smallrye.graphql.client.impl.SmallRyeGraphQLClientMessages msg>;
v6 = interfaceinvoke v5.<io.smallrye.graphql.client.impl.SmallRyeGraphQLClientMessages: java.lang.IllegalStateException fieldRecursionFound()>();
throw v6;
label1:
v7 = v0.<io.smallrye.graphql.client.impl.typesafe.QueryBuilder: java.util.Stack typeStack>;
v8 = virtualinvoke v1.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.lang.String getTypeName()>();
virtualinvoke v7.<java.util.Stack: java.lang.Object push(java.lang.Object)>(v8);
v9 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.QueryBuilder: java.lang.String recursionCheckedFields(io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo)>(v1);
label2:
v10 = v0.<io.smallrye.graphql.client.impl.typesafe.QueryBuilder: java.util.Stack typeStack>;
virtualinvoke v10.<java.util.Stack: java.lang.Object pop()>();
return v9;
label3:
v11 := @caughtexception;
v12 = v0.<io.smallrye.graphql.client.impl.typesafe.QueryBuilder: java.util.Stack typeStack>;
virtualinvoke v12.<java.util.Stack: java.lang.Object pop()>();
throw v11;
catch java.lang.Throwable from label1 to label2 with label3;
}
private java.lang.String recursionCheckedFields(io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo)
{
java.util.function.Function v17;
java.lang.String v12, v14, v15, v9;
java.util.stream.Collector v19;
boolean v10, v2, v3, v4, v5, v6, v7;
java.util.stream.Stream v16, v18;
io.smallrye.graphql.client.impl.typesafe.QueryBuilder v0;
java.lang.Object v20;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v1, v11, v13, v8;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.QueryBuilder;
v1 := @parameter0: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo;
label1:
v2 = virtualinvoke v1.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: boolean isOptional()>();
if v2 != 0 goto label2;
v3 = virtualinvoke v1.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: boolean isErrorOr()>();
if v3 != 0 goto label2;
v4 = virtualinvoke v1.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: boolean isTypesafeResponse()>();
if v4 == 0 goto label3;
label2:
v1 = virtualinvoke v1.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo getItemType()>();
goto label1;
label3:
v5 = virtualinvoke v1.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: boolean isScalar()>();
if v5 == 0 goto label4;
return "";
label4:
v6 = virtualinvoke v1.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: boolean isCollection()>();
if v6 != 0 goto label5;
v7 = virtualinvoke v1.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: boolean isAsync()>();
if v7 == 0 goto label6;
label5:
v8 = virtualinvoke v1.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo getItemType()>();
v9 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.QueryBuilder: java.lang.String fields(io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo)>(v8);
return v9;
label6:
v10 = virtualinvoke v1.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: boolean isMap()>();
if v10 == 0 goto label7;
v11 = virtualinvoke v1.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo getKeyType()>();
v12 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.QueryBuilder: java.lang.String fields(io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo)>(v11);
v13 = virtualinvoke v1.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo getValueType()>();
v14 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.QueryBuilder: java.lang.String fields(io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo)>(v13);
v15 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v12, v14) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("{ key \u0001 value \u0001}");
return v15;
label7:
v16 = virtualinvoke v1.<io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo: java.util.stream.Stream fields()>();
v17 = staticinvoke <io.smallrye.graphql.client.impl.typesafe.QueryBuilder$field__722: java.util.function.Function bootstrap$(io.smallrye.graphql.client.impl.typesafe.QueryBuilder)>(v0);
v18 = interfaceinvoke v16.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v17);
v19 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>(" ", " {", "}");
v20 = interfaceinvoke v18.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v19);
return v20;
}
public java.lang.String field(io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo)
{
java.util.function.Function v14;
java.util.Stack v18, v20;
io.smallrye.graphql.client.impl.typesafe.reflection.MethodInvocation v10;
java.lang.String v19, v21, v6, v7, v8, v9;
java.util.stream.Collector v16;
boolean v12;
io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo v1;
java.util.function.Consumer v5;
java.util.List v11;
java.util.stream.Stream v13, v15;
io.smallrye.graphql.client.impl.typesafe.QueryBuilder v0;
java.util.Optional v4;
java.lang.Object v17;
java.lang.StringBuilder v3;
io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo v2;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.QueryBuilder;
v1 := @parameter0: io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo;
v2 = virtualinvoke v1.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo getType()>();
v3 = new java.lang.StringBuilder;
specialinvoke v3.<java.lang.StringBuilder: void <init>()>();
v4 = virtualinvoke v1.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: java.util.Optional getAlias()>();
v5 = staticinvoke <io.smallrye.graphql.client.impl.typesafe.QueryBuilder$lambda_field_0__723: java.util.function.Consumer bootstrap$(java.lang.StringBuilder)>(v3);
virtualinvoke v4.<java.util.Optional: void ifPresent(java.util.function.Consumer)>(v5);
v6 = virtualinvoke v1.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: java.lang.String getName()>();
virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v6);
v7 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.QueryBuilder: java.lang.String nestedExpressionPrefix()>();
v8 = virtualinvoke v1.<io.smallrye.graphql.client.impl.typesafe.reflection.FieldInfo: java.lang.String getRawName()>();
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v7, v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001");
v10 = v0.<io.smallrye.graphql.client.impl.typesafe.QueryBuilder: io.smallrye.graphql.client.impl.typesafe.reflection.MethodInvocation method>;
v11 = virtualinvoke v10.<io.smallrye.graphql.client.impl.typesafe.reflection.MethodInvocation: java.util.List nestedParameters(java.lang.String)>(v9);
v12 = interfaceinvoke v11.<java.util.List: boolean isEmpty()>();
if v12 != 0 goto label1;
v13 = interfaceinvoke v11.<java.util.List: java.util.stream.Stream stream()>();
v14 = staticinvoke <io.smallrye.graphql.client.impl.typesafe.QueryBuilder$bind__724: java.util.function.Function bootstrap$(io.smallrye.graphql.client.impl.typesafe.QueryBuilder)>(v0);
v15 = interfaceinvoke v13.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v14);
v16 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>(", ", "(", ")");
v17 = interfaceinvoke v15.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v16);
virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v17);
label1:
v18 = v0.<io.smallrye.graphql.client.impl.typesafe.QueryBuilder: java.util.Stack expressionStack>;
virtualinvoke v18.<java.util.Stack: java.lang.Object push(java.lang.Object)>(v9);
v19 = specialinvoke v0.<io.smallrye.graphql.client.impl.typesafe.QueryBuilder: java.lang.String fields(io.smallrye.graphql.client.impl.typesafe.reflection.TypeInfo)>(v2);
virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v19);
v20 = v0.<io.smallrye.graphql.client.impl.typesafe.QueryBuilder: java.util.Stack expressionStack>;
virtualinvoke v20.<java.util.Stack: java.lang.Object pop()>();
v21 = virtualinvoke v3.<java.lang.StringBuilder: java.lang.String toString()>();
return v21;
}
private java.lang.String nestedExpressionPrefix()
{
io.smallrye.graphql.client.impl.typesafe.QueryBuilder v0;
java.lang.Object v5;
java.lang.String v3;
java.util.Stack v1, v4;
boolean v2;
v0 := @this: io.smallrye.graphql.client.impl.typesafe.QueryBuilder;
v1 = v0.<io.smallrye.graphql.client.impl.typesafe.QueryBuilder: java.util.Stack expressionStack>;
v2 = virtualinvoke v1.<java.util.Stack: boolean isEmpty()>();
if v2 == 0 goto label1;
v3 = "";
goto label2;
label1:
v4 = v0.<io.smallrye.graphql.client.impl.typesafe.QueryBuilder: java.util.Stack expressionStack>;
v5 = virtualinvoke v4.<java.util.Stack: java.lang.Object peek()>();
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.");
label2:
return v3;
}
}