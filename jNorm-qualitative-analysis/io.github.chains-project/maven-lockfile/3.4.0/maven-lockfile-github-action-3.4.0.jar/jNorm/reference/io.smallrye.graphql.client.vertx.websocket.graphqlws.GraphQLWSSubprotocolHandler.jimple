public class io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler extends java.lang.Object implements io.smallrye.graphql.client.vertx.websocket.WebSocketSubprotocolHandler
{
private static final org.jboss.logging.Logger log;
private final java.lang.Integer subscriptionInitializationTimeout;
private final io.vertx.core.http.WebSocket webSocket;
private final java.util.concurrent.CompletableFuture initialization;
private final java.util.Map uniOperations;
private final java.util.Map multiOperations;
private final java.lang.Runnable onClose;
private final io.smallrye.graphql.client.vertx.websocket.opid.OperationIDGenerator operationIdGenerator;
private final java.util.Map initPayload;
public void <init>(io.vertx.core.http.WebSocket, java.lang.Integer, java.util.Map, java.lang.Runnable)
{
java.util.concurrent.ConcurrentHashMap v7, v8;
java.util.HashMap v5;
java.util.concurrent.CompletableFuture v10;
io.vertx.core.http.WebSocket v1;
java.lang.Integer v2;
java.lang.Runnable v4;
io.smallrye.mutiny.Uni v9;
io.smallrye.graphql.client.vertx.websocket.opid.IncrementingNumberOperationIDGenerator v11;
java.util.Map v3, v6;
io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler v0;
v0 := @this: io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler;
v1 := @parameter0: io.vertx.core.http.WebSocket;
v2 := @parameter1: java.lang.Integer;
v3 := @parameter2: java.util.Map;
v4 := @parameter3: java.lang.Runnable;
specialinvoke v0.<java.lang.Object: void <init>()>();
v5 = new java.util.HashMap;
specialinvoke v5.<java.util.HashMap: void <init>()>();
v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: java.util.Map initPayload> = v5;
if v3 == null goto label1;
v6 = v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: java.util.Map initPayload>;
interfaceinvoke v6.<java.util.Map: void putAll(java.util.Map)>(v3);
label1:
v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: io.vertx.core.http.WebSocket webSocket> = v1;
v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: java.lang.Integer subscriptionInitializationTimeout> = v2;
v7 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v7.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: java.util.Map uniOperations> = v7;
v8 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v8.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: java.util.Map multiOperations> = v8;
v9 = specialinvoke v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: io.smallrye.mutiny.Uni initialize()>();
v10 = interfaceinvoke v9.<io.smallrye.mutiny.Uni: java.util.concurrent.CompletableFuture subscribeAsCompletionStage()>();
v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: java.util.concurrent.CompletableFuture initialization> = v10;
v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: java.lang.Runnable onClose> = v4;
v11 = new io.smallrye.graphql.client.vertx.websocket.opid.IncrementingNumberOperationIDGenerator;
specialinvoke v11.<io.smallrye.graphql.client.vertx.websocket.opid.IncrementingNumberOperationIDGenerator: void <init>()>();
v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: io.smallrye.graphql.client.vertx.websocket.opid.OperationIDGenerator operationIdGenerator> = v11;
return;
}
private io.smallrye.mutiny.Uni initialize()
{
java.util.function.Consumer v2;
io.smallrye.mutiny.groups.UniCreate v1;
io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler;
v1 = staticinvoke <io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniCreate createFrom()>();
v2 = staticinvoke <io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler$lambda_initialize_9__608: java.util.function.Consumer bootstrap$(io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler)>(v0);
v3 = virtualinvoke v1.<io.smallrye.mutiny.groups.UniCreate: io.smallrye.mutiny.Uni emitter(java.util.function.Consumer)>(v2);
return v3;
}
public io.smallrye.mutiny.Uni ensureInitialized()
{
io.smallrye.mutiny.groups.UniCreate v1;
java.util.concurrent.CompletableFuture v2;
io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler;
v1 = staticinvoke <io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniCreate createFrom()>();
v2 = v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: java.util.concurrent.CompletableFuture initialization>;
v3 = virtualinvoke v1.<io.smallrye.mutiny.groups.UniCreate: io.smallrye.mutiny.Uni completionStage(java.util.concurrent.CompletionStage)>(v2);
return v3;
}
public java.lang.String executeUni(jakarta.json.JsonObject, io.smallrye.mutiny.subscription.UniEmitter)
{
io.smallrye.mutiny.subscription.UniEmitter v2;
io.smallrye.mutiny.Uni v5;
java.util.function.Consumer v7, v8;
io.smallrye.graphql.client.vertx.websocket.opid.OperationIDGenerator v3;
jakarta.json.JsonObject v1;
io.smallrye.mutiny.groups.UniSubscribe v6;
java.lang.String v4;
io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler v0;
v0 := @this: io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler;
v1 := @parameter0: jakarta.json.JsonObject;
v2 := @parameter1: io.smallrye.mutiny.subscription.UniEmitter;
v3 = v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: io.smallrye.graphql.client.vertx.websocket.opid.OperationIDGenerator operationIdGenerator>;
v4 = interfaceinvoke v3.<io.smallrye.graphql.client.vertx.websocket.opid.OperationIDGenerator: java.lang.String generate()>();
v5 = virtualinvoke v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: io.smallrye.mutiny.Uni ensureInitialized()>();
v6 = interfaceinvoke v5.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v7 = staticinvoke <io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler$lambda_executeUni_10__609: java.util.function.Consumer bootstrap$(io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler,java.lang.String,io.smallrye.mutiny.subscription.UniEmitter,jakarta.json.JsonObject)>(v0, v4, v2, v1);
virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v8 = staticinvoke <io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler$fail__610: java.util.function.Consumer bootstrap$(io.smallrye.mutiny.subscription.UniEmitter)>(v2);
virtualinvoke v6.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer,java.util.function.Consumer)>(v7, v8);
return v4;
}
public java.lang.String executeMulti(jakarta.json.JsonObject, io.smallrye.mutiny.subscription.MultiEmitter)
{
io.smallrye.mutiny.subscription.MultiEmitter v2;
io.smallrye.mutiny.Uni v5;
java.util.function.Consumer v7, v8;
io.smallrye.graphql.client.vertx.websocket.opid.OperationIDGenerator v3;
jakarta.json.JsonObject v1;
io.smallrye.mutiny.groups.UniSubscribe v6;
java.lang.String v4;
io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler v0;
v0 := @this: io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler;
v1 := @parameter0: jakarta.json.JsonObject;
v2 := @parameter1: io.smallrye.mutiny.subscription.MultiEmitter;
v3 = v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: io.smallrye.graphql.client.vertx.websocket.opid.OperationIDGenerator operationIdGenerator>;
v4 = interfaceinvoke v3.<io.smallrye.graphql.client.vertx.websocket.opid.OperationIDGenerator: java.lang.String generate()>();
v5 = virtualinvoke v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: io.smallrye.mutiny.Uni ensureInitialized()>();
v6 = interfaceinvoke v5.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v7 = staticinvoke <io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler$lambda_executeMulti_11__611: java.util.function.Consumer bootstrap$(io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler,java.lang.String,io.smallrye.mutiny.subscription.MultiEmitter,jakarta.json.JsonObject)>(v0, v4, v2, v1);
virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v8 = staticinvoke <io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler$fail__612: java.util.function.Consumer bootstrap$(io.smallrye.mutiny.subscription.MultiEmitter)>(v2);
virtualinvoke v6.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer,java.util.function.Consumer)>(v7, v8);
return v4;
}
public void cancelUni(java.lang.String)
{
java.util.Map v2;
jakarta.json.JsonObject v4;
io.vertx.core.http.WebSocket v3;
java.lang.String v1;
io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler v0;
v0 := @this: io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: java.util.Map uniOperations>;
interfaceinvoke v2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v1);
v3 = v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: io.vertx.core.http.WebSocket webSocket>;
v4 = specialinvoke v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: jakarta.json.JsonObject createStopMessage(java.lang.String)>(v1);
specialinvoke v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: io.smallrye.mutiny.Uni send(io.vertx.core.http.WebSocket,jakarta.json.JsonObject)>(v3, v4);
return;
}
public void cancelMulti(java.lang.String)
{
java.util.Map v2;
jakarta.json.JsonObject v4;
io.vertx.core.http.WebSocket v3;
java.lang.String v1;
io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler v0;
v0 := @this: io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: java.util.Map multiOperations>;
interfaceinvoke v2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v1);
v3 = v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: io.vertx.core.http.WebSocket webSocket>;
v4 = specialinvoke v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: jakarta.json.JsonObject createStopMessage(java.lang.String)>(v1);
specialinvoke v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: io.smallrye.mutiny.Uni send(io.vertx.core.http.WebSocket,jakarta.json.JsonObject)>(v3, v4);
return;
}
public void close()
{
io.vertx.core.http.WebSocket v1, v2, v4;
io.smallrye.mutiny.Uni v6;
java.util.function.Consumer v8;
jakarta.json.JsonObject v5;
io.smallrye.mutiny.groups.UniSubscribe v7;
io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler v0;
boolean v3;
v0 := @this: io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler;
v1 = v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: io.vertx.core.http.WebSocket webSocket>;
if v1 == null goto label1;
v2 = v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: io.vertx.core.http.WebSocket webSocket>;
v3 = interfaceinvoke v2.<io.vertx.core.http.WebSocket: boolean isClosed()>();
if v3 != 0 goto label1;
v4 = v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: io.vertx.core.http.WebSocket webSocket>;
v5 = specialinvoke v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: jakarta.json.JsonObject createConnectionTerminateMessage()>();
v6 = specialinvoke v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: io.smallrye.mutiny.Uni send(io.vertx.core.http.WebSocket,jakarta.json.JsonObject)>(v4, v5);
v7 = interfaceinvoke v6.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v8 = staticinvoke <io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler$lambda_close_12__613: java.util.function.Consumer bootstrap$(io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler)>(v0);
virtualinvoke v7.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v8);
label1:
return;
}
private jakarta.json.JsonObject parseIncomingMessage(java.lang.String)
{
java.io.StringReader v2;
jakarta.json.JsonObject v4;
jakarta.json.JsonReader v3;
java.lang.String v1;
io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler v0;
v0 := @this: io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler;
v1 := @parameter0: java.lang.String;
v2 = new java.io.StringReader;
specialinvoke v2.<java.io.StringReader: void <init>(java.lang.String)>(v1);
v3 = staticinvoke <jakarta.json.Json: jakarta.json.JsonReader createReader(java.io.Reader)>(v2);
v4 = interfaceinvoke v3.<jakarta.json.JsonReader: jakarta.json.JsonObject readObject()>();
return v4;
}
private io.smallrye.graphql.client.vertx.websocket.graphqlws.MessageType getMessageType(jakarta.json.JsonObject)
{
io.smallrye.graphql.client.vertx.websocket.graphqlws.MessageType v3;
jakarta.json.JsonObject v1;
java.lang.String v2;
io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler v0;
v0 := @this: io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler;
v1 := @parameter0: jakarta.json.JsonObject;
v2 = interfaceinvoke v1.<jakarta.json.JsonObject: java.lang.String getString(java.lang.String)>("type");
v3 = staticinvoke <io.smallrye.graphql.client.vertx.websocket.graphqlws.MessageType: io.smallrye.graphql.client.vertx.websocket.graphqlws.MessageType fromString(java.lang.String)>(v2);
return v3;
}
private io.smallrye.mutiny.Uni send(io.vertx.core.http.WebSocket, jakarta.json.JsonObject)
{
org.jboss.logging.Logger v4, v6;
io.vertx.core.http.WebSocket v1;
io.vertx.core.Future v9;
io.smallrye.mutiny.Uni v11;
io.smallrye.mutiny.groups.UniCreate v8;
java.util.concurrent.CompletionStage v10;
jakarta.json.JsonObject v2;
java.lang.String v3, v7;
io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler v0;
boolean v5;
v0 := @this: io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler;
v1 := @parameter0: io.vertx.core.http.WebSocket;
v2 := @parameter1: jakarta.json.JsonObject;
v3 = virtualinvoke v2.<java.lang.Object: java.lang.String toString()>();
v4 = <io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: org.jboss.logging.Logger log>;
v5 = virtualinvoke v4.<org.jboss.logging.Logger: boolean isTraceEnabled()>();
if v5 == 0 goto label1;
v6 = <io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: org.jboss.logging.Logger log>;
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>(">>> \u0001");
virtualinvoke v6.<org.jboss.logging.Logger: void trace(java.lang.Object)>(v7);
label1:
v8 = staticinvoke <io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniCreate createFrom()>();
v9 = interfaceinvoke v1.<io.vertx.core.http.WebSocket: io.vertx.core.Future writeTextMessage(java.lang.String)>(v3);
v10 = interfaceinvoke v9.<io.vertx.core.Future: java.util.concurrent.CompletionStage toCompletionStage()>();
v11 = virtualinvoke v8.<io.smallrye.mutiny.groups.UniCreate: io.smallrye.mutiny.Uni completionStage(java.util.concurrent.CompletionStage)>(v10);
return v11;
}
private jakarta.json.JsonObject createConnectionInitMessage()
{
jakarta.json.JsonObjectBuilder v1, v5, v6, v7, v8;
java.util.Map v2, v4;
jakarta.json.JsonObject v9;
io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler v0;
boolean v3;
v0 := @this: io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler;
v1 = staticinvoke <jakarta.json.Json: jakarta.json.JsonObjectBuilder createObjectBuilder()>();
v2 = v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: java.util.Map initPayload>;
v3 = interfaceinvoke v2.<java.util.Map: boolean isEmpty()>();
if v3 != 0 goto label1;
v4 = v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: java.util.Map initPayload>;
v5 = staticinvoke <jakarta.json.Json: jakarta.json.JsonObjectBuilder createObjectBuilder(java.util.Map)>(v4);
interfaceinvoke v1.<jakarta.json.JsonObjectBuilder: jakarta.json.JsonObjectBuilder add(java.lang.String,jakarta.json.JsonObjectBuilder)>("payload", v5);
label1:
v6 = staticinvoke <jakarta.json.Json: jakarta.json.JsonObjectBuilder createObjectBuilder()>();
v7 = interfaceinvoke v6.<jakarta.json.JsonObjectBuilder: jakarta.json.JsonObjectBuilder add(java.lang.String,java.lang.String)>("type", "connection_init");
v8 = interfaceinvoke v7.<jakarta.json.JsonObjectBuilder: jakarta.json.JsonObjectBuilder addAll(jakarta.json.JsonObjectBuilder)>(v1);
v9 = interfaceinvoke v8.<jakarta.json.JsonObjectBuilder: jakarta.json.JsonObject build()>();
return v9;
}
private jakarta.json.JsonObject createStopMessage(java.lang.String)
{
jakarta.json.JsonObjectBuilder v2, v3, v4;
jakarta.json.JsonObject v5;
java.lang.String v1;
io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler v0;
v0 := @this: io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <jakarta.json.Json: jakarta.json.JsonObjectBuilder createObjectBuilder()>();
v3 = interfaceinvoke v2.<jakarta.json.JsonObjectBuilder: jakarta.json.JsonObjectBuilder add(java.lang.String,java.lang.String)>("type", "stop");
v4 = interfaceinvoke v3.<jakarta.json.JsonObjectBuilder: jakarta.json.JsonObjectBuilder add(java.lang.String,java.lang.String)>("id", v1);
v5 = interfaceinvoke v4.<jakarta.json.JsonObjectBuilder: jakarta.json.JsonObject build()>();
return v5;
}
private jakarta.json.JsonObject createConnectionTerminateMessage()
{
jakarta.json.JsonObjectBuilder v1, v2;
jakarta.json.JsonObject v3;
io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler v0;
v0 := @this: io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler;
v1 = staticinvoke <jakarta.json.Json: jakarta.json.JsonObjectBuilder createObjectBuilder()>();
v2 = interfaceinvoke v1.<jakarta.json.JsonObjectBuilder: jakarta.json.JsonObjectBuilder add(java.lang.String,java.lang.String)>("type", "connection_terminate");
v3 = interfaceinvoke v2.<jakarta.json.JsonObjectBuilder: jakarta.json.JsonObject build()>();
return v3;
}
private jakarta.json.JsonObject createSubscribeMessage(jakarta.json.JsonObject, java.lang.String)
{
jakarta.json.JsonObjectBuilder v10, v11, v3, v8, v9;
jakarta.json.JsonObject v1, v12, v7;
java.lang.Object v5;
java.lang.String v2, v4;
io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler v0;
boolean v6;
v0 := @this: io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler;
v1 := @parameter0: jakarta.json.JsonObject;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <jakarta.json.Json: jakarta.json.JsonObjectBuilder createObjectBuilder()>();
v4 = interfaceinvoke v1.<jakarta.json.JsonObject: java.lang.String getString(java.lang.String)>("query");
interfaceinvoke v3.<jakarta.json.JsonObjectBuilder: jakarta.json.JsonObjectBuilder add(java.lang.String,java.lang.String)>("query", v4);
v5 = interfaceinvoke v1.<jakarta.json.JsonObject: java.lang.Object get(java.lang.Object)>("operationName");
v6 = v5 instanceof jakarta.json.JsonString;
if v6 == 0 goto label1;
interfaceinvoke v3.<jakarta.json.JsonObjectBuilder: jakarta.json.JsonObjectBuilder add(java.lang.String,jakarta.json.JsonValue)>("operationName", v5);
label1:
v7 = interfaceinvoke v1.<jakarta.json.JsonObject: jakarta.json.JsonObject getJsonObject(java.lang.String)>("variables");
if v7 == null goto label2;
interfaceinvoke v3.<jakarta.json.JsonObjectBuilder: jakarta.json.JsonObjectBuilder add(java.lang.String,jakarta.json.JsonValue)>("variables", v7);
label2:
v8 = staticinvoke <jakarta.json.Json: jakarta.json.JsonObjectBuilder createObjectBuilder()>();
v9 = interfaceinvoke v8.<jakarta.json.JsonObjectBuilder: jakarta.json.JsonObjectBuilder add(java.lang.String,java.lang.String)>("type", "start");
v10 = interfaceinvoke v9.<jakarta.json.JsonObjectBuilder: jakarta.json.JsonObjectBuilder add(java.lang.String,java.lang.String)>("id", v2);
v11 = interfaceinvoke v10.<jakarta.json.JsonObjectBuilder: jakarta.json.JsonObjectBuilder add(java.lang.String,jakarta.json.JsonObjectBuilder)>("payload", v3);
v12 = interfaceinvoke v11.<jakarta.json.JsonObjectBuilder: jakarta.json.JsonObject build()>();
return v12;
}
public void failAllActiveOperationsWith(java.lang.Throwable)
{
java.lang.Throwable v1;
org.jboss.logging.Logger v2;
java.util.Map v10, v15, v3, v8;
io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler v0;
boolean v13, v6;
java.util.Iterator v12, v5;
java.util.Set v11, v4;
java.lang.Object v14, v16, v7, v9;
v0 := @this: io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler;
v1 := @parameter0: java.lang.Throwable;
v2 = <io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: org.jboss.logging.Logger log>;
virtualinvoke v2.<org.jboss.logging.Logger: void debug(java.lang.Object)>("Failing all active operations");
v3 = v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: java.util.Map uniOperations>;
v4 = interfaceinvoke v3.<java.util.Map: java.util.Set keySet()>();
v5 = interfaceinvoke v4.<java.util.Set: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label2;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: java.util.Map uniOperations>;
v9 = interfaceinvoke v8.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v7);
if v9 == null goto label1;
interfaceinvoke v9.<io.smallrye.mutiny.subscription.UniEmitter: void fail(java.lang.Throwable)>(v1);
goto label1;
label2:
v10 = v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: java.util.Map multiOperations>;
v11 = interfaceinvoke v10.<java.util.Map: java.util.Set keySet()>();
v12 = interfaceinvoke v11.<java.util.Set: java.util.Iterator iterator()>();
label3:
v13 = interfaceinvoke v12.<java.util.Iterator: boolean hasNext()>();
if v13 == 0 goto label4;
v14 = interfaceinvoke v12.<java.util.Iterator: java.lang.Object next()>();
v15 = v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: java.util.Map multiOperations>;
v16 = interfaceinvoke v15.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v14);
if v16 == null goto label3;
interfaceinvoke v16.<io.smallrye.mutiny.subscription.MultiEmitter: void fail(java.lang.Throwable)>(v1);
goto label3;
label4:
return;
}
private void handleData(java.lang.String, jakarta.json.JsonObject)
{
org.jboss.logging.Logger v13, v16, v5, v7;
java.util.Map v10, v3;
jakarta.json.JsonObject v2;
java.lang.String v1, v14, v15, v17, v8, v9;
io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler v0;
boolean v12, v6;
java.lang.Object v11, v4;
v0 := @this: io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: jakarta.json.JsonObject;
v3 = v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: java.util.Map uniOperations>;
v4 = interfaceinvoke v3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v1);
if v4 == null goto label2;
v5 = <io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: org.jboss.logging.Logger log>;
v6 = virtualinvoke v5.<org.jboss.logging.Logger: boolean isTraceEnabled()>();
if v6 == 0 goto label1;
v7 = <io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: org.jboss.logging.Logger log>;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Received data for single-result operation \u0001");
virtualinvoke v7.<org.jboss.logging.Logger: void trace(java.lang.Object)>(v8);
label1:
v9 = virtualinvoke v2.<java.lang.Object: java.lang.String toString()>();
interfaceinvoke v4.<io.smallrye.mutiny.subscription.UniEmitter: void complete(java.lang.Object)>(v9);
goto label5;
label2:
v10 = v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: java.util.Map multiOperations>;
v11 = interfaceinvoke v10.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v11 == null goto label4;
v12 = interfaceinvoke v11.<io.smallrye.mutiny.subscription.MultiEmitter: boolean isCancelled()>();
if v12 == 0 goto label3;
v13 = <io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: org.jboss.logging.Logger log>;
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Received data for already cancelled operation \u0001");
virtualinvoke v13.<org.jboss.logging.Logger: void warn(java.lang.Object)>(v14);
goto label5;
label3:
v15 = virtualinvoke v2.<java.lang.Object: java.lang.String toString()>();
interfaceinvoke v11.<io.smallrye.mutiny.subscription.MultiEmitter: io.smallrye.mutiny.subscription.MultiEmitter emit(java.lang.Object)>(v15);
goto label5;
label4:
v16 = <io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: org.jboss.logging.Logger log>;
v17 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Received event for an unknown subscription ID: \u0001");
virtualinvoke v16.<org.jboss.logging.Logger: void warn(java.lang.Object)>(v17);
label5:
return;
}
private void handleOperationError(java.lang.String, jakarta.json.JsonObject)
{
io.smallrye.graphql.client.GraphQLClientException v4;
io.smallrye.graphql.client.GraphQLError v3;
java.util.Map v5, v7;
jakarta.json.JsonObject v2;
java.lang.Object v6, v8;
java.lang.String v1;
io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler v0;
v0 := @this: io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: jakarta.json.JsonObject;
v3 = staticinvoke <io.smallrye.graphql.client.impl.ResponseReader: io.smallrye.graphql.client.GraphQLError readError(jakarta.json.JsonValue)>(v2);
v4 = new io.smallrye.graphql.client.GraphQLClientException;
specialinvoke v4.<io.smallrye.graphql.client.GraphQLClientException: void <init>(java.lang.String,io.smallrye.graphql.client.GraphQLError)>("Received an error", v3);
v5 = v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: java.util.Map uniOperations>;
v6 = interfaceinvoke v5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v1);
if v6 == null goto label1;
interfaceinvoke v6.<io.smallrye.mutiny.subscription.UniEmitter: void fail(java.lang.Throwable)>(v4);
goto label2;
label1:
v7 = v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: java.util.Map multiOperations>;
v8 = interfaceinvoke v7.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v1);
if v8 == null goto label2;
interfaceinvoke v8.<io.smallrye.mutiny.subscription.MultiEmitter: void fail(java.lang.Throwable)>(v4);
label2:
return;
}
private void handleComplete(java.lang.String)
{
org.jboss.logging.Logger v7;
java.util.Map v2, v5;
java.lang.Object v3, v6;
java.lang.String v1, v8;
io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler v0;
io.smallrye.graphql.client.InvalidResponseException v4;
v0 := @this: io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: java.util.Map uniOperations>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v1);
if v3 == null goto label1;
v4 = new io.smallrye.graphql.client.InvalidResponseException;
specialinvoke v4.<io.smallrye.graphql.client.InvalidResponseException: void <init>(java.lang.String)>("Protocol error: received a \'complete\' message for this operation before the actual data");
interfaceinvoke v3.<io.smallrye.mutiny.subscription.UniEmitter: void fail(java.lang.Throwable)>(v4);
goto label2;
label1:
v5 = v0.<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: java.util.Map multiOperations>;
v6 = interfaceinvoke v5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v1);
if v6 == null goto label2;
v7 = <io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: org.jboss.logging.Logger log>;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Completed operation \u0001");
virtualinvoke v7.<org.jboss.logging.Logger: void debug(java.lang.Object)>(v8);
interfaceinvoke v6.<io.smallrye.mutiny.subscription.MultiEmitter: void complete()>();
label2:
return;
}
static void <clinit>()
{
org.jboss.logging.Logger v0;
v0 = staticinvoke <org.jboss.logging.Logger: org.jboss.logging.Logger getLogger(java.lang.Class)>(class "Lio/smallrye/graphql/client/vertx/websocket/graphqlws/GraphQLWSSubprotocolHandler;");
<io.smallrye.graphql.client.vertx.websocket.graphqlws.GraphQLWSSubprotocolHandler: org.jboss.logging.Logger log> = v0;
return;
}
}