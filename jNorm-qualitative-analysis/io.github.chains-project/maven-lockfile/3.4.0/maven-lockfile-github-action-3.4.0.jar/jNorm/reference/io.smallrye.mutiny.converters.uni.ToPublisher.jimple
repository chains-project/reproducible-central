public class io.smallrye.mutiny.converters.uni.ToPublisher extends java.lang.Object implements java.util.function.Function
{
public static final io.smallrye.mutiny.converters.uni.ToPublisher INSTANCE;
private void <init>()
{
io.smallrye.mutiny.converters.uni.ToPublisher v0;
v0 := @this: io.smallrye.mutiny.converters.uni.ToPublisher;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public java.util.concurrent.Flow$Publisher apply(io.smallrye.mutiny.Uni)
{
io.smallrye.mutiny.converters.uni.ToPublisher v0;
io.smallrye.mutiny.converters.uni.UniToMultiPublisher v2;
java.lang.Object v3;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.smallrye.mutiny.converters.uni.ToPublisher;
v1 := @parameter0: io.smallrye.mutiny.Uni;
v2 = new io.smallrye.mutiny.converters.uni.UniToMultiPublisher;
v3 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "uni");
specialinvoke v2.<io.smallrye.mutiny.converters.uni.UniToMultiPublisher: void <init>(io.smallrye.mutiny.Uni)>(v3);
return v2;
}
static void <clinit>()
{
io.smallrye.mutiny.converters.uni.ToPublisher v0;
v0 = new io.smallrye.mutiny.converters.uni.ToPublisher;
specialinvoke v0.<io.smallrye.mutiny.converters.uni.ToPublisher: void <init>()>();
<io.smallrye.mutiny.converters.uni.ToPublisher: io.smallrye.mutiny.converters.uni.ToPublisher INSTANCE> = v0;
return;
}
}