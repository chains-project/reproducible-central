class io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription extends java.lang.Object implements io.smallrye.mutiny.subscription.UniSubscription, java.util.concurrent.Flow$Subscription, io.smallrye.mutiny.subscription.UniSubscriber, io.smallrye.mutiny.subscription.ContextSupport
{
private final io.smallrye.mutiny.Uni uni;
private final java.util.concurrent.Flow$Subscriber downstream;
private volatile io.smallrye.mutiny.subscription.UniSubscription upstream;
private volatile io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription$State state;
private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater STATE_UPDATER;
private void <init>(io.smallrye.mutiny.Uni, java.util.concurrent.Flow$Subscriber)
{
java.util.concurrent.Flow$Subscriber v2;
io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription v0;
io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription$State v3;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription;
v1 := @parameter0: io.smallrye.mutiny.Uni;
v2 := @parameter1: java.util.concurrent.Flow$Subscriber;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = <io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription$State: io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription$State INIT>;
v0.<io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription: io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription$State state> = v3;
v0.<io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription: io.smallrye.mutiny.Uni uni> = v1;
v0.<io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription: java.util.concurrent.Flow$Subscriber downstream> = v2;
return;
}
public io.smallrye.mutiny.Context context()
{
java.util.concurrent.Flow$Subscriber v1, v3;
io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription v0;
io.smallrye.mutiny.Context v4, v5;
boolean v2;
v0 := @this: io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription;
v1 = v0.<io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription: java.util.concurrent.Flow$Subscriber downstream>;
v2 = v1 instanceof io.smallrye.mutiny.subscription.ContextSupport;
if v2 == 0 goto label1;
v3 = v0.<io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription: java.util.concurrent.Flow$Subscriber downstream>;
v4 = interfaceinvoke v3.<io.smallrye.mutiny.subscription.ContextSupport: io.smallrye.mutiny.Context context()>();
return v4;
label1:
v5 = staticinvoke <io.smallrye.mutiny.Context: io.smallrye.mutiny.Context empty()>();
return v5;
}
public void cancel()
{
io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription v0;
io.smallrye.mutiny.subscription.UniSubscription v1, v2;
v0 := @this: io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription;
v1 = v0.<io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription: io.smallrye.mutiny.subscription.UniSubscription upstream>;
if v1 == null goto label1;
v2 = v0.<io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription: io.smallrye.mutiny.subscription.UniSubscription upstream>;
interfaceinvoke v2.<io.smallrye.mutiny.subscription.UniSubscription: void cancel()>();
label1:
return;
}
public void request(long)
{
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v5;
long v1;
java.lang.IllegalArgumentException v4;
io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription$State v6, v7;
io.smallrye.mutiny.Uni v9;
java.util.concurrent.Flow$Subscriber v3;
byte v2;
io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription v0;
boolean v8;
v0 := @this: io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 > 0 goto label1;
v3 = v0.<io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription: java.util.concurrent.Flow$Subscriber downstream>;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid request");
interfaceinvoke v3.<java.util.concurrent.Flow$Subscriber: void onError(java.lang.Throwable)>(v4);
return;
label1:
v5 = <io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription: java.util.concurrent.atomic.AtomicReferenceFieldUpdater STATE_UPDATER>;
v6 = <io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription$State: io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription$State INIT>;
v7 = <io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription$State: io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription$State UNI_REQUESTED>;
v8 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(v0, v6, v7);
if v8 == 0 goto label2;
v9 = v0.<io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription: io.smallrye.mutiny.Uni uni>;
staticinvoke <io.smallrye.mutiny.operators.AbstractUni: void subscribe(io.smallrye.mutiny.Uni,io.smallrye.mutiny.subscription.UniSubscriber)>(v9, v0);
label2:
return;
}
public void onSubscribe(io.smallrye.mutiny.subscription.UniSubscription)
{
io.smallrye.mutiny.subscription.UniSubscription v1, v2;
java.lang.IllegalStateException v4;
java.util.concurrent.Flow$Subscriber v3;
io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription v0;
v0 := @this: io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription;
v1 := @parameter0: io.smallrye.mutiny.subscription.UniSubscription;
v2 = v0.<io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription: io.smallrye.mutiny.subscription.UniSubscription upstream>;
if v2 != null goto label1;
v0.<io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription: io.smallrye.mutiny.subscription.UniSubscription upstream> = v1;
goto label2;
label1:
interfaceinvoke v1.<io.smallrye.mutiny.subscription.UniSubscription: void cancel()>();
v3 = v0.<io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription: java.util.concurrent.Flow$Subscriber downstream>;
v4 = new java.lang.IllegalStateException;
specialinvoke v4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid subscription state - already have a subscription for upstream");
interfaceinvoke v3.<java.util.concurrent.Flow$Subscriber: void onError(java.lang.Throwable)>(v4);
label2:
return;
}
public void onItem(java.lang.Object)
{
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v2;
io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription$State v3, v4;
java.util.concurrent.Flow$Subscriber v6, v7;
io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription v0;
java.lang.Object v1;
boolean v5;
v0 := @this: io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription;
v1 := @parameter0: java.lang.Object;
v2 = <io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription: java.util.concurrent.atomic.AtomicReferenceFieldUpdater STATE_UPDATER>;
v3 = <io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription$State: io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription$State UNI_REQUESTED>;
v4 = <io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription$State: io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription$State DONE>;
v5 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(v0, v3, v4);
if v5 == 0 goto label2;
if v1 == null goto label1;
v6 = v0.<io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription: java.util.concurrent.Flow$Subscriber downstream>;
interfaceinvoke v6.<java.util.concurrent.Flow$Subscriber: void onNext(java.lang.Object)>(v1);
label1:
v7 = v0.<io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription: java.util.concurrent.Flow$Subscriber downstream>;
interfaceinvoke v7.<java.util.concurrent.Flow$Subscriber: void onComplete()>();
label2:
return;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
java.util.concurrent.Flow$Subscriber v6;
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v2;
io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription v0;
io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription$State v3, v4;
boolean v5;
v0 := @this: io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription;
v1 := @parameter0: java.lang.Throwable;
v2 = <io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription: java.util.concurrent.atomic.AtomicReferenceFieldUpdater STATE_UPDATER>;
v3 = <io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription$State: io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription$State UNI_REQUESTED>;
v4 = <io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription$State: io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription$State DONE>;
v5 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(v0, v3, v4);
if v5 == 0 goto label1;
v6 = v0.<io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription: java.util.concurrent.Flow$Subscriber downstream>;
interfaceinvoke v6.<java.util.concurrent.Flow$Subscriber: void onError(java.lang.Throwable)>(v1);
label1:
return;
}
static void <clinit>()
{
java.util.concurrent.atomic.AtomicReferenceFieldUpdater v0;
v0 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>(class "Lio/smallrye/mutiny/converters/uni/UniToMultiPublisher$UniToMultiSubscription;", class "Lio/smallrye/mutiny/converters/uni/UniToMultiPublisher$UniToMultiSubscription$State;", "state");
<io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription: java.util.concurrent.atomic.AtomicReferenceFieldUpdater STATE_UPDATER> = v0;
return;
}
}