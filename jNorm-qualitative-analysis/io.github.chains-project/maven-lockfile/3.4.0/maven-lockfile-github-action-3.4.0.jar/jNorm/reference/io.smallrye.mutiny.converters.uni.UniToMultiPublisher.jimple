public final class io.smallrye.mutiny.converters.uni.UniToMultiPublisher extends java.lang.Object implements java.util.concurrent.Flow$Publisher
{
private final io.smallrye.mutiny.Uni uni;
public void <init>(io.smallrye.mutiny.Uni)
{
io.smallrye.mutiny.converters.uni.UniToMultiPublisher v0;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.smallrye.mutiny.converters.uni.UniToMultiPublisher;
v1 := @parameter0: io.smallrye.mutiny.Uni;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.smallrye.mutiny.converters.uni.UniToMultiPublisher: io.smallrye.mutiny.Uni uni> = v1;
return;
}
public void subscribe(java.util.concurrent.Flow$Subscriber)
{
java.util.concurrent.Flow$Subscriber v1;
io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription v2;
io.smallrye.mutiny.converters.uni.UniToMultiPublisher v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.smallrye.mutiny.converters.uni.UniToMultiPublisher;
v1 := @parameter0: java.util.concurrent.Flow$Subscriber;
v2 = new io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription;
v3 = v0.<io.smallrye.mutiny.converters.uni.UniToMultiPublisher: io.smallrye.mutiny.Uni uni>;
specialinvoke v2.<io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription: void <init>(io.smallrye.mutiny.Uni,java.util.concurrent.Flow$Subscriber)>(v3, v1);
interfaceinvoke v1.<java.util.concurrent.Flow$Subscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v2);
return;
}
}