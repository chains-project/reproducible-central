public class io.smallrye.mutiny.groups.MultiConcat extends java.lang.Object
{
private boolean collectFailures;
public void <init>(boolean)
{
io.smallrye.mutiny.groups.MultiConcat v0;
boolean v1;
v0 := @this: io.smallrye.mutiny.groups.MultiConcat;
v1 := @parameter0: boolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.smallrye.mutiny.groups.MultiConcat: boolean collectFailures> = v1;
return;
}
public final transient io.smallrye.mutiny.Multi streams(java.util.concurrent.Flow$Publisher[])
{
io.smallrye.mutiny.operators.multi.MultiConcatOp v2;
java.util.concurrent.Flow$Publisher[] v1;
io.smallrye.mutiny.groups.MultiConcat v0;
io.smallrye.mutiny.Multi v4;
boolean v3;
v0 := @this: io.smallrye.mutiny.groups.MultiConcat;
v1 := @parameter0: java.util.concurrent.Flow$Publisher[];
v2 = new io.smallrye.mutiny.operators.multi.MultiConcatOp;
v3 = v0.<io.smallrye.mutiny.groups.MultiConcat: boolean collectFailures>;
specialinvoke v2.<io.smallrye.mutiny.operators.multi.MultiConcatOp: void <init>(boolean,java.util.concurrent.Flow$Publisher[])>(v3, v1);
v4 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v2);
return v4;
}
public io.smallrye.mutiny.Multi streams(java.lang.Iterable)
{
java.lang.Object[] v7;
java.util.concurrent.Flow$Publisher[] v6;
io.smallrye.mutiny.groups.MultiConcat v0;
io.smallrye.mutiny.Multi v8;
java.lang.Iterable v1;
java.util.ArrayList v2;
java.util.function.Consumer v3;
io.smallrye.mutiny.operators.multi.MultiConcatOp v4;
boolean v5;
v0 := @this: io.smallrye.mutiny.groups.MultiConcat;
v1 := @parameter0: java.lang.Iterable;
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v3 = staticinvoke <io.smallrye.mutiny.groups.MultiConcat$add__2981: java.util.function.Consumer bootstrap$(java.util.List)>(v2);
interfaceinvoke v1.<java.lang.Iterable: void forEach(java.util.function.Consumer)>(v3);
v4 = new io.smallrye.mutiny.operators.multi.MultiConcatOp;
v5 = v0.<io.smallrye.mutiny.groups.MultiConcat: boolean collectFailures>;
v6 = newarray (java.util.concurrent.Flow$Publisher)[0];
v7 = interfaceinvoke v2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v6);
specialinvoke v4.<io.smallrye.mutiny.operators.multi.MultiConcatOp: void <init>(boolean,java.util.concurrent.Flow$Publisher[])>(v5, v7);
v8 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v4);
return v8;
}
public io.smallrye.mutiny.groups.MultiConcat collectFailures()
{
io.smallrye.mutiny.groups.MultiConcat v0;
v0 := @this: io.smallrye.mutiny.groups.MultiConcat;
v0.<io.smallrye.mutiny.groups.MultiConcat: boolean collectFailures> = 1;
return v0;
}
}