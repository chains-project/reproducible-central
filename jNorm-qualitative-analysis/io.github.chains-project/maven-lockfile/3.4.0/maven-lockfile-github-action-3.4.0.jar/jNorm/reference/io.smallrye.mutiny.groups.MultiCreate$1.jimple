class io.smallrye.mutiny.groups.MultiCreate$1 extends io.smallrye.mutiny.operators.AbstractMulti
{
final java.util.concurrent.Flow$Publisher val$actual;
final io.smallrye.mutiny.groups.MultiCreate this$0;
void <init>(io.smallrye.mutiny.groups.MultiCreate, java.util.concurrent.Flow$Publisher)
{
io.smallrye.mutiny.groups.MultiCreate$1 v0;
java.util.concurrent.Flow$Publisher v2;
io.smallrye.mutiny.groups.MultiCreate v1;
v0 := @this: io.smallrye.mutiny.groups.MultiCreate$1;
v1 := @parameter0: io.smallrye.mutiny.groups.MultiCreate;
v2 := @parameter1: java.util.concurrent.Flow$Publisher;
v0.<io.smallrye.mutiny.groups.MultiCreate$1: io.smallrye.mutiny.groups.MultiCreate this$0> = v1;
v0.<io.smallrye.mutiny.groups.MultiCreate$1: java.util.concurrent.Flow$Publisher val$actual> = v2;
specialinvoke v0.<io.smallrye.mutiny.operators.AbstractMulti: void <init>()>();
return;
}
public void subscribe(java.util.concurrent.Flow$Subscriber)
{
io.smallrye.mutiny.groups.MultiCreate$1 v0;
java.util.concurrent.Flow$Subscriber v1;
java.util.concurrent.Flow$Publisher v2;
v0 := @this: io.smallrye.mutiny.groups.MultiCreate$1;
v1 := @parameter0: java.util.concurrent.Flow$Subscriber;
v2 = v0.<io.smallrye.mutiny.groups.MultiCreate$1: java.util.concurrent.Flow$Publisher val$actual>;
interfaceinvoke v2.<java.util.concurrent.Flow$Publisher: void subscribe(java.util.concurrent.Flow$Subscriber)>(v1);
return;
}
}