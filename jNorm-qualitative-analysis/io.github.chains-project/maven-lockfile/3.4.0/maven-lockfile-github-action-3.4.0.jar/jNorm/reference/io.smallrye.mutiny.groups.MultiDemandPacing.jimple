public class io.smallrye.mutiny.groups.MultiDemandPacing extends java.lang.Object
{
private final io.smallrye.mutiny.operators.AbstractMulti upstream;
private java.util.concurrent.ScheduledExecutorService executor;
public void <init>(io.smallrye.mutiny.operators.AbstractMulti)
{
java.util.concurrent.ScheduledExecutorService v2;
io.smallrye.mutiny.operators.AbstractMulti v1;
io.smallrye.mutiny.groups.MultiDemandPacing v0;
v0 := @this: io.smallrye.mutiny.groups.MultiDemandPacing;
v1 := @parameter0: io.smallrye.mutiny.operators.AbstractMulti;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.ScheduledExecutorService getDefaultWorkerPool()>();
v0.<io.smallrye.mutiny.groups.MultiDemandPacing: java.util.concurrent.ScheduledExecutorService executor> = v2;
v0.<io.smallrye.mutiny.groups.MultiDemandPacing: io.smallrye.mutiny.operators.AbstractMulti upstream> = v1;
return;
}
public io.smallrye.mutiny.groups.MultiDemandPacing on(java.util.concurrent.ScheduledExecutorService)
{
java.util.concurrent.ScheduledExecutorService v1;
java.lang.Object v2;
io.smallrye.mutiny.groups.MultiDemandPacing v0;
v0 := @this: io.smallrye.mutiny.groups.MultiDemandPacing;
v1 := @parameter0: java.util.concurrent.ScheduledExecutorService;
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "executor");
v0.<io.smallrye.mutiny.groups.MultiDemandPacing: java.util.concurrent.ScheduledExecutorService executor> = v2;
return v0;
}
public io.smallrye.mutiny.Multi using(io.smallrye.mutiny.subscription.DemandPacer)
{
io.smallrye.mutiny.operators.AbstractMulti v3;
io.smallrye.mutiny.subscription.DemandPacer v1;
io.smallrye.mutiny.groups.MultiDemandPacing v0;
java.util.concurrent.ScheduledExecutorService v4;
io.smallrye.mutiny.operators.multi.MultiDemandPacer v2;
java.lang.Object v5;
io.smallrye.mutiny.Multi v6;
v0 := @this: io.smallrye.mutiny.groups.MultiDemandPacing;
v1 := @parameter0: io.smallrye.mutiny.subscription.DemandPacer;
v2 = new io.smallrye.mutiny.operators.multi.MultiDemandPacer;
v3 = v0.<io.smallrye.mutiny.groups.MultiDemandPacing: io.smallrye.mutiny.operators.AbstractMulti upstream>;
v4 = v0.<io.smallrye.mutiny.groups.MultiDemandPacing: java.util.concurrent.ScheduledExecutorService executor>;
v5 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "pacer");
specialinvoke v2.<io.smallrye.mutiny.operators.multi.MultiDemandPacer: void <init>(io.smallrye.mutiny.Multi,java.util.concurrent.ScheduledExecutorService,io.smallrye.mutiny.subscription.DemandPacer)>(v3, v4, v5);
v6 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v2);
return v6;
}
}