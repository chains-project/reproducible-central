public class io.smallrye.mutiny.groups.MultiSkip extends java.lang.Object
{
private final io.smallrye.mutiny.Multi upstream;
public void <init>(io.smallrye.mutiny.Multi)
{
io.smallrye.mutiny.groups.MultiSkip v0;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.smallrye.mutiny.groups.MultiSkip;
v1 := @parameter0: io.smallrye.mutiny.Multi;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.smallrye.mutiny.groups.MultiSkip: io.smallrye.mutiny.Multi upstream> = v1;
return;
}
public io.smallrye.mutiny.Multi first(long)
{
io.smallrye.mutiny.operators.multi.MultiSkipFirstOp v2;
long v1, v4;
io.smallrye.mutiny.groups.MultiSkip v0;
io.smallrye.mutiny.Multi v3, v5;
v0 := @this: io.smallrye.mutiny.groups.MultiSkip;
v1 := @parameter0: long;
v2 = new io.smallrye.mutiny.operators.multi.MultiSkipFirstOp;
v3 = v0.<io.smallrye.mutiny.groups.MultiSkip: io.smallrye.mutiny.Multi upstream>;
v4 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: long positiveOrZero(long,java.lang.String)>(v1, "n");
specialinvoke v2.<io.smallrye.mutiny.operators.multi.MultiSkipFirstOp: void <init>(io.smallrye.mutiny.Multi,long)>(v3, v4);
v5 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v2);
return v5;
}
public io.smallrye.mutiny.Multi first()
{
io.smallrye.mutiny.groups.MultiSkip v0;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.smallrye.mutiny.groups.MultiSkip;
v1 = virtualinvoke v0.<io.smallrye.mutiny.groups.MultiSkip: io.smallrye.mutiny.Multi first(long)>(1L);
return v1;
}
public io.smallrye.mutiny.Multi first(java.util.function.Predicate)
{
io.smallrye.mutiny.operators.multi.MultiSkipFirstUntilOp v4;
java.util.function.Predicate v1, v3;
java.lang.Object v2;
io.smallrye.mutiny.groups.MultiSkip v0;
io.smallrye.mutiny.Multi v5, v6;
v0 := @this: io.smallrye.mutiny.groups.MultiSkip;
v1 := @parameter0: java.util.function.Predicate;
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "predicate");
v3 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.Predicate decorate(java.util.function.Predicate)>(v2);
v4 = new io.smallrye.mutiny.operators.multi.MultiSkipFirstUntilOp;
v5 = v0.<io.smallrye.mutiny.groups.MultiSkip: io.smallrye.mutiny.Multi upstream>;
specialinvoke v4.<io.smallrye.mutiny.operators.multi.MultiSkipFirstUntilOp: void <init>(io.smallrye.mutiny.Multi,java.util.function.Predicate)>(v5, v3);
v6 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v4);
return v6;
}
public io.smallrye.mutiny.Multi first(java.time.Duration)
{
io.smallrye.mutiny.groups.MultiTimePeriod v3, v4;
io.smallrye.mutiny.Multi v5, v7, v8;
io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp v6;
io.smallrye.mutiny.groups.MultiCreate v2;
java.time.Duration v1;
io.smallrye.mutiny.groups.MultiSkip v0;
v0 := @this: io.smallrye.mutiny.groups.MultiSkip;
v1 := @parameter0: java.time.Duration;
v2 = staticinvoke <io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiCreate createFrom()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.MultiCreate: io.smallrye.mutiny.groups.MultiTimePeriod ticks()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.MultiTimePeriod: io.smallrye.mutiny.groups.MultiTimePeriod startingAfter(java.time.Duration)>(v1);
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.MultiTimePeriod: io.smallrye.mutiny.Multi every(java.time.Duration)>(v1);
v6 = new io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp;
v7 = v0.<io.smallrye.mutiny.groups.MultiSkip: io.smallrye.mutiny.Multi upstream>;
specialinvoke v6.<io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp: void <init>(io.smallrye.mutiny.Multi,java.util.concurrent.Flow$Publisher)>(v7, v5);
v8 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v6);
return v8;
}
public io.smallrye.mutiny.Multi last(int)
{
io.smallrye.mutiny.operators.multi.MultiSkipLastOp v2;
int v1;
io.smallrye.mutiny.groups.MultiSkip v0;
io.smallrye.mutiny.Multi v3, v4;
v0 := @this: io.smallrye.mutiny.groups.MultiSkip;
v1 := @parameter0: int;
v2 = new io.smallrye.mutiny.operators.multi.MultiSkipLastOp;
v3 = v0.<io.smallrye.mutiny.groups.MultiSkip: io.smallrye.mutiny.Multi upstream>;
specialinvoke v2.<io.smallrye.mutiny.operators.multi.MultiSkipLastOp: void <init>(io.smallrye.mutiny.Multi,int)>(v3, v1);
v4 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v2);
return v4;
}
public io.smallrye.mutiny.Multi last()
{
io.smallrye.mutiny.groups.MultiSkip v0;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.smallrye.mutiny.groups.MultiSkip;
v1 = virtualinvoke v0.<io.smallrye.mutiny.groups.MultiSkip: io.smallrye.mutiny.Multi last(int)>(1);
return v1;
}
public io.smallrye.mutiny.Multi repetitions()
{
io.smallrye.mutiny.operators.multi.MultiSkipRepetitionsOp v1;
io.smallrye.mutiny.groups.MultiSkip v0;
io.smallrye.mutiny.Multi v2, v3;
v0 := @this: io.smallrye.mutiny.groups.MultiSkip;
v1 = new io.smallrye.mutiny.operators.multi.MultiSkipRepetitionsOp;
v2 = v0.<io.smallrye.mutiny.groups.MultiSkip: io.smallrye.mutiny.Multi upstream>;
specialinvoke v1.<io.smallrye.mutiny.operators.multi.MultiSkipRepetitionsOp: void <init>(io.smallrye.mutiny.Multi)>(v2);
v3 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v1);
return v3;
}
public io.smallrye.mutiny.Multi repetitions(java.util.Comparator)
{
io.smallrye.mutiny.operators.multi.MultiSkipRepetitionsOp v2;
io.smallrye.mutiny.groups.MultiSkip v0;
java.util.Comparator v1;
io.smallrye.mutiny.Multi v3, v4;
v0 := @this: io.smallrye.mutiny.groups.MultiSkip;
v1 := @parameter0: java.util.Comparator;
v2 = new io.smallrye.mutiny.operators.multi.MultiSkipRepetitionsOp;
v3 = v0.<io.smallrye.mutiny.groups.MultiSkip: io.smallrye.mutiny.Multi upstream>;
specialinvoke v2.<io.smallrye.mutiny.operators.multi.MultiSkipRepetitionsOp: void <init>(io.smallrye.mutiny.Multi,java.util.Comparator)>(v3, v1);
v4 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v2);
return v4;
}
public io.smallrye.mutiny.Multi where(java.util.function.Predicate)
{
java.util.function.Predicate v1, v3, v6;
io.smallrye.mutiny.Multi v4, v7;
io.smallrye.mutiny.groups.MultiSelect v5;
java.lang.Object v2;
io.smallrye.mutiny.groups.MultiSkip v0;
v0 := @this: io.smallrye.mutiny.groups.MultiSkip;
v1 := @parameter0: java.util.function.Predicate;
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "predicate");
v3 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.Predicate decorate(java.util.function.Predicate)>(v2);
v4 = v0.<io.smallrye.mutiny.groups.MultiSkip: io.smallrye.mutiny.Multi upstream>;
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiSelect select()>();
v6 = interfaceinvoke v3.<java.util.function.Predicate: java.util.function.Predicate negate()>();
v7 = virtualinvoke v5.<io.smallrye.mutiny.groups.MultiSelect: io.smallrye.mutiny.Multi where(java.util.function.Predicate)>(v6);
return v7;
}
public io.smallrye.mutiny.Multi when(java.util.function.Function)
{
java.util.function.Function v1, v3, v6;
io.smallrye.mutiny.Multi v4, v7;
io.smallrye.mutiny.groups.MultiOnItem v5;
java.lang.Object v2;
io.smallrye.mutiny.groups.MultiSkip v0;
v0 := @this: io.smallrye.mutiny.groups.MultiSkip;
v1 := @parameter0: java.util.function.Function;
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "predicate");
v3 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.Function decorate(java.util.function.Function)>(v2);
v4 = v0.<io.smallrye.mutiny.groups.MultiSkip: io.smallrye.mutiny.Multi upstream>;
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiOnItem onItem()>();
v6 = staticinvoke <io.smallrye.mutiny.groups.MultiSkip$lambda_when_1__2886: java.util.function.Function bootstrap$(java.util.function.Function)>(v3);
v7 = virtualinvoke v5.<io.smallrye.mutiny.groups.MultiOnItem: io.smallrye.mutiny.Multi transformToMultiAndConcatenate(java.util.function.Function)>(v6);
return v7;
}
}