public class io.smallrye.mutiny.groups.UniOr extends java.lang.Object
{
private final io.smallrye.mutiny.Uni upstream;
public void <init>(io.smallrye.mutiny.Uni)
{
java.lang.Object v2;
io.smallrye.mutiny.groups.UniOr v0;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.smallrye.mutiny.groups.UniOr;
v1 := @parameter0: io.smallrye.mutiny.Uni;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "upstream");
v0.<io.smallrye.mutiny.groups.UniOr: io.smallrye.mutiny.Uni upstream> = v2;
return;
}
public final transient io.smallrye.mutiny.Uni unis(io.smallrye.mutiny.Uni[])
{
java.util.List v4;
io.smallrye.mutiny.groups.UniOr v0;
io.smallrye.mutiny.operators.uni.UniOrCombination v5;
io.smallrye.mutiny.Uni[] v1;
io.smallrye.mutiny.Uni v3, v6;
java.util.ArrayList v2;
v0 := @this: io.smallrye.mutiny.groups.UniOr;
v1 := @parameter0: io.smallrye.mutiny.Uni[];
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
v3 = v0.<io.smallrye.mutiny.groups.UniOr: io.smallrye.mutiny.Uni upstream>;
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v3);
v4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v1);
interfaceinvoke v2.<java.util.List: boolean addAll(java.util.Collection)>(v4);
v5 = new io.smallrye.mutiny.operators.uni.UniOrCombination;
specialinvoke v5.<io.smallrye.mutiny.operators.uni.UniOrCombination: void <init>(java.lang.Iterable)>(v2);
v6 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Uni onUniCreation(io.smallrye.mutiny.Uni)>(v5);
return v6;
}
}