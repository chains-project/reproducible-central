class io.smallrye.mutiny.helpers.MultiEmitterProcessor$1$1 extends java.lang.Object implements java.util.concurrent.Flow$Subscription
{
final java.util.concurrent.Flow$Subscription val$subscription;
final io.smallrye.mutiny.helpers.MultiEmitterProcessor$1 this$1;
void <init>(io.smallrye.mutiny.helpers.MultiEmitterProcessor$1, java.util.concurrent.Flow$Subscription)
{
io.smallrye.mutiny.helpers.MultiEmitterProcessor$1$1 v0;
io.smallrye.mutiny.helpers.MultiEmitterProcessor$1 v1;
java.util.concurrent.Flow$Subscription v2;
v0 := @this: io.smallrye.mutiny.helpers.MultiEmitterProcessor$1$1;
v1 := @parameter0: io.smallrye.mutiny.helpers.MultiEmitterProcessor$1;
v2 := @parameter1: java.util.concurrent.Flow$Subscription;
v0.<io.smallrye.mutiny.helpers.MultiEmitterProcessor$1$1: io.smallrye.mutiny.helpers.MultiEmitterProcessor$1 this$1> = v1;
v0.<io.smallrye.mutiny.helpers.MultiEmitterProcessor$1$1: java.util.concurrent.Flow$Subscription val$subscription> = v2;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void request(long)
{
java.util.concurrent.atomic.AtomicLong v4;
io.smallrye.mutiny.helpers.MultiEmitterProcessor$1$1 v0;
io.smallrye.mutiny.helpers.MultiEmitterProcessor$1 v2;
long v1;
io.smallrye.mutiny.helpers.MultiEmitterProcessor v3;
java.util.concurrent.Flow$Subscription v5;
v0 := @this: io.smallrye.mutiny.helpers.MultiEmitterProcessor$1$1;
v1 := @parameter0: long;
v2 = v0.<io.smallrye.mutiny.helpers.MultiEmitterProcessor$1$1: io.smallrye.mutiny.helpers.MultiEmitterProcessor$1 this$1>;
v3 = v2.<io.smallrye.mutiny.helpers.MultiEmitterProcessor$1: io.smallrye.mutiny.helpers.MultiEmitterProcessor this$0>;
v4 = v3.<io.smallrye.mutiny.helpers.MultiEmitterProcessor: java.util.concurrent.atomic.AtomicLong requested>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(java.util.concurrent.atomic.AtomicLong,long)>(v4, v1);
v5 = v0.<io.smallrye.mutiny.helpers.MultiEmitterProcessor$1$1: java.util.concurrent.Flow$Subscription val$subscription>;
interfaceinvoke v5.<java.util.concurrent.Flow$Subscription: void request(long)>(v1);
return;
}
public void cancel()
{
io.smallrye.mutiny.helpers.MultiEmitterProcessor$1$1 v0;
io.smallrye.mutiny.helpers.MultiEmitterProcessor$1 v2;
io.smallrye.mutiny.helpers.MultiEmitterProcessor v3;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.helpers.MultiEmitterProcessor$1$1;
v1 = v0.<io.smallrye.mutiny.helpers.MultiEmitterProcessor$1$1: java.util.concurrent.Flow$Subscription val$subscription>;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void cancel()>();
v2 = v0.<io.smallrye.mutiny.helpers.MultiEmitterProcessor$1$1: io.smallrye.mutiny.helpers.MultiEmitterProcessor$1 this$1>;
v3 = v2.<io.smallrye.mutiny.helpers.MultiEmitterProcessor$1: io.smallrye.mutiny.helpers.MultiEmitterProcessor this$0>;
specialinvoke v3.<io.smallrye.mutiny.helpers.MultiEmitterProcessor: void fireTermination()>();
return;
}
}