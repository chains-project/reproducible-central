class io.smallrye.mutiny.helpers.MultiEmitterProcessor$1 extends java.lang.Object implements java.util.concurrent.Flow$Subscriber
{
final java.util.concurrent.Flow$Subscriber val$subscriber;
final io.smallrye.mutiny.helpers.MultiEmitterProcessor this$0;
void <init>(io.smallrye.mutiny.helpers.MultiEmitterProcessor, java.util.concurrent.Flow$Subscriber)
{
java.util.concurrent.Flow$Subscriber v2;
io.smallrye.mutiny.helpers.MultiEmitterProcessor$1 v0;
io.smallrye.mutiny.helpers.MultiEmitterProcessor v1;
v0 := @this: io.smallrye.mutiny.helpers.MultiEmitterProcessor$1;
v1 := @parameter0: io.smallrye.mutiny.helpers.MultiEmitterProcessor;
v2 := @parameter1: java.util.concurrent.Flow$Subscriber;
v0.<io.smallrye.mutiny.helpers.MultiEmitterProcessor$1: io.smallrye.mutiny.helpers.MultiEmitterProcessor this$0> = v1;
v0.<io.smallrye.mutiny.helpers.MultiEmitterProcessor$1: java.util.concurrent.Flow$Subscriber val$subscriber> = v2;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
java.util.concurrent.Flow$Subscriber v2;
io.smallrye.mutiny.helpers.MultiEmitterProcessor$1$1 v3;
io.smallrye.mutiny.helpers.MultiEmitterProcessor$1 v0;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.helpers.MultiEmitterProcessor$1;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = v0.<io.smallrye.mutiny.helpers.MultiEmitterProcessor$1: java.util.concurrent.Flow$Subscriber val$subscriber>;
v3 = new io.smallrye.mutiny.helpers.MultiEmitterProcessor$1$1;
specialinvoke v3.<io.smallrye.mutiny.helpers.MultiEmitterProcessor$1$1: void <init>(io.smallrye.mutiny.helpers.MultiEmitterProcessor$1,java.util.concurrent.Flow$Subscription)>(v0, v1);
interfaceinvoke v2.<java.util.concurrent.Flow$Subscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v3);
return;
}
public void onNext(java.lang.Object)
{
java.util.concurrent.Flow$Subscriber v2;
io.smallrye.mutiny.helpers.MultiEmitterProcessor$1 v0;
java.lang.Object v1;
v0 := @this: io.smallrye.mutiny.helpers.MultiEmitterProcessor$1;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.helpers.MultiEmitterProcessor$1: java.util.concurrent.Flow$Subscriber val$subscriber>;
interfaceinvoke v2.<java.util.concurrent.Flow$Subscriber: void onNext(java.lang.Object)>(v1);
return;
}
public void onError(java.lang.Throwable)
{
java.lang.Throwable v1;
java.util.concurrent.Flow$Subscriber v2;
io.smallrye.mutiny.helpers.MultiEmitterProcessor$1 v0;
io.smallrye.mutiny.helpers.MultiEmitterProcessor v3;
v0 := @this: io.smallrye.mutiny.helpers.MultiEmitterProcessor$1;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.smallrye.mutiny.helpers.MultiEmitterProcessor$1: java.util.concurrent.Flow$Subscriber val$subscriber>;
interfaceinvoke v2.<java.util.concurrent.Flow$Subscriber: void onError(java.lang.Throwable)>(v1);
v3 = v0.<io.smallrye.mutiny.helpers.MultiEmitterProcessor$1: io.smallrye.mutiny.helpers.MultiEmitterProcessor this$0>;
specialinvoke v3.<io.smallrye.mutiny.helpers.MultiEmitterProcessor: void fireTermination()>();
return;
}
public void onComplete()
{
java.util.concurrent.Flow$Subscriber v1;
io.smallrye.mutiny.helpers.MultiEmitterProcessor$1 v0;
io.smallrye.mutiny.helpers.MultiEmitterProcessor v2;
v0 := @this: io.smallrye.mutiny.helpers.MultiEmitterProcessor$1;
v1 = v0.<io.smallrye.mutiny.helpers.MultiEmitterProcessor$1: java.util.concurrent.Flow$Subscriber val$subscriber>;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscriber: void onComplete()>();
v2 = v0.<io.smallrye.mutiny.helpers.MultiEmitterProcessor$1: io.smallrye.mutiny.helpers.MultiEmitterProcessor this$0>;
specialinvoke v2.<io.smallrye.mutiny.helpers.MultiEmitterProcessor: void fireTermination()>();
return;
}
}