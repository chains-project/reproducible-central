public class io.smallrye.mutiny.helpers.queues.DrainUtils extends java.lang.Object
{
protected static final long COMPLETED_MASK;
protected static final long REQUESTED_MASK;
private void <init>()
{
io.smallrye.mutiny.helpers.queues.DrainUtils v0;
v0 := @this: io.smallrye.mutiny.helpers.queues.DrainUtils;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static boolean postCompleteRequest(long, java.util.concurrent.Flow$Subscriber, java.util.Queue, java.util.concurrent.atomic.AtomicLong, java.util.function.BooleanSupplier)
{
long v0, v12, v5, v6, v7, v8, v9;
java.util.function.BooleanSupplier v4;
java.util.concurrent.Flow$Subscriber v1;
java.util.concurrent.atomic.AtomicLong v3;
byte v11;
java.util.Queue v2;
boolean v10;
v0 := @parameter0: long;
v1 := @parameter1: java.util.concurrent.Flow$Subscriber;
v2 := @parameter2: java.util.Queue;
v3 := @parameter3: java.util.concurrent.atomic.AtomicLong;
v4 := @parameter4: java.util.function.BooleanSupplier;
label1:
v5 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicLong: long get()>();
v6 = v5 & 9223372036854775807L;
v7 = v5 & -9223372036854775808L;
v8 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(long,long)>(v6, v0);
v9 = v7 | v8;
v10 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>(v5, v9);
if v10 == 0 goto label1;
v11 = v5 cmp -9223372036854775808L;
if v11 != 0 goto label2;
v12 = v0 | -9223372036854775808L;
staticinvoke <io.smallrye.mutiny.helpers.queues.DrainUtils: boolean postCompleteDrain(long,java.util.concurrent.Flow$Subscriber,java.util.Queue,java.util.concurrent.atomic.AtomicLong,java.util.function.BooleanSupplier)>(v12, v1, v2, v3, v4);
return 1;
label2:
return 0;
}
private static boolean postCompleteDrain(long, java.util.concurrent.Flow$Subscriber, java.util.Queue, java.util.concurrent.atomic.AtomicLong, java.util.function.BooleanSupplier)
{
long v0, v12, v13, v14, v5;
java.util.function.BooleanSupplier v4;
byte v11, v15, v6;
boolean v10, v7, v9;
java.util.concurrent.Flow$Subscriber v1;
java.util.concurrent.atomic.AtomicLong v3;
java.lang.Object v8;
java.util.Queue v2;
v0 := @parameter0: long;
v1 := @parameter1: java.util.concurrent.Flow$Subscriber;
v2 := @parameter2: java.util.Queue;
v3 := @parameter3: java.util.concurrent.atomic.AtomicLong;
v4 := @parameter4: java.util.function.BooleanSupplier;
v5 = v0 & -9223372036854775808L;
label1:
v6 = v5 cmp v0;
if v6 == 0 goto label4;
v7 = interfaceinvoke v4.<java.util.function.BooleanSupplier: boolean getAsBoolean()>();
if v7 == 0 goto label2;
return 1;
label2:
v8 = interfaceinvoke v2.<java.util.Queue: java.lang.Object poll()>();
if v8 != null goto label3;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscriber: void onComplete()>();
return 1;
label3:
interfaceinvoke v1.<java.util.concurrent.Flow$Subscriber: void onNext(java.lang.Object)>(v8);
v5 = v5 + 1L;
goto label1;
label4:
v9 = interfaceinvoke v4.<java.util.function.BooleanSupplier: boolean getAsBoolean()>();
if v9 == 0 goto label5;
return 1;
label5:
v10 = interfaceinvoke v2.<java.util.Queue: boolean isEmpty()>();
if v10 == 0 goto label6;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscriber: void onComplete()>();
return 1;
label6:
v0 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicLong: long get()>();
v11 = v0 cmp v5;
if v11 != 0 goto label1;
v12 = v5 & 9223372036854775807L;
v13 = neg v12;
v0 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(v13);
v14 = v0 & 9223372036854775807L;
v15 = v14 cmp 0L;
if v15 != 0 goto label7;
return 0;
label7:
v5 = v0 & -9223372036854775808L;
goto label1;
}
public static void postComplete(java.util.concurrent.Flow$Subscriber, java.util.Queue, java.util.concurrent.atomic.AtomicLong, java.util.function.BooleanSupplier)
{
long v10, v5, v7, v8;
java.util.function.BooleanSupplier v3;
java.util.concurrent.Flow$Subscriber v0;
java.util.concurrent.atomic.AtomicLong v2;
byte v12, v9;
java.util.Queue v1;
boolean v11, v4, v6;
v0 := @parameter0: java.util.concurrent.Flow$Subscriber;
v1 := @parameter1: java.util.Queue;
v2 := @parameter2: java.util.concurrent.atomic.AtomicLong;
v3 := @parameter3: java.util.function.BooleanSupplier;
v4 = interfaceinvoke v1.<java.util.Queue: boolean isEmpty()>();
if v4 == 0 goto label1;
interfaceinvoke v0.<java.util.concurrent.Flow$Subscriber: void onComplete()>();
return;
label1:
v5 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicLong: long get()>();
v6 = staticinvoke <io.smallrye.mutiny.helpers.queues.DrainUtils: boolean postCompleteDrain(long,java.util.concurrent.Flow$Subscriber,java.util.Queue,java.util.concurrent.atomic.AtomicLong,java.util.function.BooleanSupplier)>(v5, v0, v1, v2, v3);
if v6 == 0 goto label2;
return;
label2:
v7 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicLong: long get()>();
v8 = v7 & -9223372036854775808L;
v9 = v8 cmp 0L;
if v9 == 0 goto label3;
return;
label3:
v10 = v7 | -9223372036854775808L;
v11 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>(v7, v10);
if v11 == 0 goto label2;
v12 = v7 cmp 0L;
if v12 == 0 goto label4;
staticinvoke <io.smallrye.mutiny.helpers.queues.DrainUtils: boolean postCompleteDrain(long,java.util.concurrent.Flow$Subscriber,java.util.Queue,java.util.concurrent.atomic.AtomicLong,java.util.function.BooleanSupplier)>(v10, v0, v1, v2, v3);
label4:
return;
}
}