final class io.smallrye.mutiny.helpers.queues.SingletonQueue extends java.lang.Object implements java.util.Queue
{
private final java.util.concurrent.atomic.AtomicReference element;
void <init>()
{
io.smallrye.mutiny.helpers.queues.SingletonQueue v0;
java.util.concurrent.atomic.AtomicReference v1;
v0 := @this: io.smallrye.mutiny.helpers.queues.SingletonQueue;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v1.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.helpers.queues.SingletonQueue: java.util.concurrent.atomic.AtomicReference element> = v1;
return;
}
public boolean add(java.lang.Object)
{
io.smallrye.mutiny.helpers.queues.SingletonQueue v0;
java.lang.Object v1;
boolean v2;
v0 := @this: io.smallrye.mutiny.helpers.queues.SingletonQueue;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.smallrye.mutiny.helpers.queues.SingletonQueue: boolean offer(java.lang.Object)>(v1);
return v2;
}
public boolean addAll(java.util.Collection)
{
io.smallrye.mutiny.helpers.queues.SingletonQueue v0;
java.util.Iterator v4;
java.util.Collection v1;
int v3;
java.lang.Object v5;
boolean v2, v6;
v0 := @this: io.smallrye.mutiny.helpers.queues.SingletonQueue;
v1 := @parameter0: java.util.Collection;
v2 = interfaceinvoke v1.<java.util.Collection: boolean isEmpty()>();
if v2 == 0 goto label1;
return 1;
label1:
v3 = interfaceinvoke v1.<java.util.Collection: int size()>();
if v3 != 1 goto label2;
v4 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
v5 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v6 = virtualinvoke v0.<io.smallrye.mutiny.helpers.queues.SingletonQueue: boolean offer(java.lang.Object)>(v5);
return v6;
label2:
return 0;
}
public void clear()
{
io.smallrye.mutiny.helpers.queues.SingletonQueue v0;
java.util.concurrent.atomic.AtomicReference v1;
v0 := @this: io.smallrye.mutiny.helpers.queues.SingletonQueue;
v1 = v0.<io.smallrye.mutiny.helpers.queues.SingletonQueue: java.util.concurrent.atomic.AtomicReference element>;
virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(null);
return;
}
public boolean contains(java.lang.Object)
{
io.smallrye.mutiny.helpers.queues.SingletonQueue v0;
java.lang.Object v1, v3;
java.util.concurrent.atomic.AtomicReference v2;
boolean v4;
v0 := @this: io.smallrye.mutiny.helpers.queues.SingletonQueue;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.helpers.queues.SingletonQueue: java.util.concurrent.atomic.AtomicReference element>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v4 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(v3, v1);
return v4;
}
public boolean containsAll(java.util.Collection)
{
java.util.Iterator v4;
java.util.Collection v1;
io.smallrye.mutiny.helpers.queues.SingletonQueue v0;
int v3;
java.lang.Object v5, v6;
boolean v2, v7;
v0 := @this: io.smallrye.mutiny.helpers.queues.SingletonQueue;
v1 := @parameter0: java.util.Collection;
v2 = interfaceinvoke v1.<java.util.Collection: boolean isEmpty()>();
if v2 == 0 goto label1;
return 1;
label1:
v3 = interfaceinvoke v1.<java.util.Collection: int size()>();
if v3 != 1 goto label2;
v4 = interfaceinvoke v1.<java.util.Collection: java.util.Iterator iterator()>();
v5 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v6 = virtualinvoke v0.<io.smallrye.mutiny.helpers.queues.SingletonQueue: java.lang.Object peek()>();
v7 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(v5, v6);
return v7;
label2:
return 0;
}
public java.lang.Object element()
{
io.smallrye.mutiny.helpers.queues.SingletonQueue v0;
java.lang.Object v2;
java.util.concurrent.atomic.AtomicReference v1;
v0 := @this: io.smallrye.mutiny.helpers.queues.SingletonQueue;
v1 = v0.<io.smallrye.mutiny.helpers.queues.SingletonQueue: java.util.concurrent.atomic.AtomicReference element>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
return v2;
}
public boolean isEmpty()
{
io.smallrye.mutiny.helpers.queues.SingletonQueue v0;
java.lang.Object v2;
java.util.concurrent.atomic.AtomicReference v1;
boolean v3;
v0 := @this: io.smallrye.mutiny.helpers.queues.SingletonQueue;
v1 = v0.<io.smallrye.mutiny.helpers.queues.SingletonQueue: java.util.concurrent.atomic.AtomicReference element>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v2 != null goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public java.util.Iterator iterator()
{
io.smallrye.mutiny.helpers.queues.SingletonQueue v0;
io.smallrye.mutiny.helpers.queues.SingletonQueue$SingletonIterator v1;
v0 := @this: io.smallrye.mutiny.helpers.queues.SingletonQueue;
v1 = new io.smallrye.mutiny.helpers.queues.SingletonQueue$SingletonIterator;
specialinvoke v1.<io.smallrye.mutiny.helpers.queues.SingletonQueue$SingletonIterator: void <init>(io.smallrye.mutiny.helpers.queues.SingletonQueue)>(v0);
return v1;
}
public boolean offer(java.lang.Object)
{
io.smallrye.mutiny.helpers.queues.SingletonQueue v0;
java.lang.Object v1, v3;
java.util.concurrent.atomic.AtomicReference v2, v4;
v0 := @this: io.smallrye.mutiny.helpers.queues.SingletonQueue;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.helpers.queues.SingletonQueue: java.util.concurrent.atomic.AtomicReference element>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v3 == null goto label1;
return 0;
label1:
v4 = v0.<io.smallrye.mutiny.helpers.queues.SingletonQueue: java.util.concurrent.atomic.AtomicReference element>;
virtualinvoke v4.<java.util.concurrent.atomic.AtomicReference: void lazySet(java.lang.Object)>(v1);
return 1;
}
public java.lang.Object peek()
{
io.smallrye.mutiny.helpers.queues.SingletonQueue v0;
java.lang.Object v2;
java.util.concurrent.atomic.AtomicReference v1;
v0 := @this: io.smallrye.mutiny.helpers.queues.SingletonQueue;
v1 = v0.<io.smallrye.mutiny.helpers.queues.SingletonQueue: java.util.concurrent.atomic.AtomicReference element>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
return v2;
}
public java.lang.Object poll()
{
io.smallrye.mutiny.helpers.queues.SingletonQueue v0;
java.lang.Object v2;
java.util.concurrent.atomic.AtomicReference v1, v3;
v0 := @this: io.smallrye.mutiny.helpers.queues.SingletonQueue;
v1 = v0.<io.smallrye.mutiny.helpers.queues.SingletonQueue: java.util.concurrent.atomic.AtomicReference element>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v2 == null goto label1;
v3 = v0.<io.smallrye.mutiny.helpers.queues.SingletonQueue: java.util.concurrent.atomic.AtomicReference element>;
virtualinvoke v3.<java.util.concurrent.atomic.AtomicReference: void lazySet(java.lang.Object)>(null);
label1:
return v2;
}
public java.lang.Object remove()
{
io.smallrye.mutiny.helpers.queues.SingletonQueue v0;
java.lang.Object v2;
java.util.concurrent.atomic.AtomicReference v1;
v0 := @this: io.smallrye.mutiny.helpers.queues.SingletonQueue;
v1 = v0.<io.smallrye.mutiny.helpers.queues.SingletonQueue: java.util.concurrent.atomic.AtomicReference element>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(null);
return v2;
}
public boolean remove(java.lang.Object)
{
io.smallrye.mutiny.helpers.queues.SingletonQueue v0;
java.lang.Object v1;
java.lang.ClassCastException v4;
java.util.concurrent.atomic.AtomicReference v2;
boolean v3;
v0 := @this: io.smallrye.mutiny.helpers.queues.SingletonQueue;
v1 := @parameter0: java.lang.Object;
label1:
v2 = v0.<io.smallrye.mutiny.helpers.queues.SingletonQueue: java.util.concurrent.atomic.AtomicReference element>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(v1, null);
label2:
return v3;
label3:
v4 := @caughtexception;
return 0;
catch java.lang.ClassCastException from label1 to label2 with label3;
}
public boolean removeAll(java.util.Collection)
{
io.smallrye.mutiny.helpers.queues.SingletonQueue v0;
java.util.Collection v1;
v0 := @this: io.smallrye.mutiny.helpers.queues.SingletonQueue;
v1 := @parameter0: java.util.Collection;
return 0;
}
public boolean retainAll(java.util.Collection)
{
io.smallrye.mutiny.helpers.queues.SingletonQueue v0;
java.util.Collection v1;
v0 := @this: io.smallrye.mutiny.helpers.queues.SingletonQueue;
v1 := @parameter0: java.util.Collection;
return 0;
}
public int size()
{
io.smallrye.mutiny.helpers.queues.SingletonQueue v0;
byte v3;
java.lang.Object v2;
java.util.concurrent.atomic.AtomicReference v1;
v0 := @this: io.smallrye.mutiny.helpers.queues.SingletonQueue;
v1 = v0.<io.smallrye.mutiny.helpers.queues.SingletonQueue: java.util.concurrent.atomic.AtomicReference element>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v2 != null goto label1;
v3 = 0;
goto label2;
label1:
v3 = 1;
label2:
return v3;
}
public java.lang.Object[] toArray()
{
io.smallrye.mutiny.helpers.queues.SingletonQueue v0;
java.lang.Object[] v3, v4;
java.lang.Object v2;
java.util.concurrent.atomic.AtomicReference v1;
v0 := @this: io.smallrye.mutiny.helpers.queues.SingletonQueue;
v1 = v0.<io.smallrye.mutiny.helpers.queues.SingletonQueue: java.util.concurrent.atomic.AtomicReference element>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v2 != null goto label1;
v3 = newarray (java.lang.Object)[0];
return v3;
label1:
v4 = newarray (java.lang.Object)[1];
v4[0] = v2;
return v4;
}
public java.lang.Object[] toArray(java.lang.Object[])
{
java.lang.Object[] v1;
java.util.concurrent.atomic.AtomicReference v7;
io.smallrye.mutiny.helpers.queues.SingletonQueue v0;
int v2, v3, v9;
java.lang.Class v4, v5;
java.lang.Object v6, v8;
v0 := @this: io.smallrye.mutiny.helpers.queues.SingletonQueue;
v1 := @parameter0: java.lang.Object[];
v2 = virtualinvoke v0.<io.smallrye.mutiny.helpers.queues.SingletonQueue: int size()>();
v3 = lengthof v1;
if v3 >= v2 goto label1;
v4 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v5 = virtualinvoke v4.<java.lang.Class: java.lang.Class getComponentType()>();
v6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(v5, v2);
label1:
if v2 != 1 goto label2;
v7 = v0.<io.smallrye.mutiny.helpers.queues.SingletonQueue: java.util.concurrent.atomic.AtomicReference element>;
v8 = virtualinvoke v7.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v6[0] = v8;
label2:
v9 = lengthof v6;
if v9 <= v2 goto label3;
v6[v2] = null;
label3:
return v6;
}
}