abstract class io.smallrye.mutiny.operators.multi.FlatMapManager extends java.lang.Object
{
protected java.util.concurrent.atomic.AtomicReference inners;
private int[] free;
private long producerIndex;
private long consumerIndex;
private final java.util.concurrent.atomic.AtomicInteger size;
private static final int[] FREE_EMPTY;
void <init>()
{
java.lang.Object[] v2;
int[] v3;
java.util.concurrent.atomic.AtomicInteger v4;
io.smallrye.mutiny.operators.multi.FlatMapManager v0;
java.util.concurrent.atomic.AtomicReference v1;
v0 := @this: io.smallrye.mutiny.operators.multi.FlatMapManager;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.concurrent.atomic.AtomicReference;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: java.lang.Object[] empty()>();
specialinvoke v1.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(v2);
v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: java.util.concurrent.atomic.AtomicReference inners> = v1;
v3 = <io.smallrye.mutiny.operators.multi.FlatMapManager: int[] FREE_EMPTY>;
v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: int[] free> = v3;
v4 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v4.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: java.util.concurrent.atomic.AtomicInteger size> = v4;
return;
}
abstract java.lang.Object[] empty();
abstract java.lang.Object[] terminated();
abstract java.lang.Object[] newArray(int);
abstract void unsubscribeEntry(java.lang.Object, boolean);
abstract void setIndex(java.lang.Object, int);
final void unsubscribe()
{
io.smallrye.mutiny.operators.multi.FlatMapManager v0;
v0 := @this: io.smallrye.mutiny.operators.multi.FlatMapManager;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: void unsubscribe(boolean)>(0);
return;
}
final void unsubscribe(boolean)
{
java.lang.Throwable v7;
java.lang.Object[] v2;
java.util.concurrent.atomic.AtomicReference v3, v6;
java.util.concurrent.atomic.AtomicInteger v5;
int v8, v9;
io.smallrye.mutiny.operators.multi.FlatMapManager v0;
java.lang.Object v10, v4;
boolean v1;
v0 := @this: io.smallrye.mutiny.operators.multi.FlatMapManager;
v1 := @parameter0: boolean;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: java.lang.Object[] terminated()>();
entermonitor v0;
label1:
v3 = v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: java.util.concurrent.atomic.AtomicReference inners>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v4 != v2 goto label3;
exitmonitor v0;
label2:
return;
label3:
v5 = v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: java.util.concurrent.atomic.AtomicInteger size>;
virtualinvoke v5.<java.util.concurrent.atomic.AtomicInteger: void lazySet(int)>(0);
v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: int[] free> = null;
v6 = v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: java.util.concurrent.atomic.AtomicReference inners>;
virtualinvoke v6.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(v2);
exitmonitor v0;
label4:
goto label6;
label5:
v7 := @caughtexception;
exitmonitor v0;
throw v7;
label6:
v8 = lengthof v4;
v9 = 0;
label7:
if v9 >= v8 goto label9;
v10 = v4[v9];
if v10 == null goto label8;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: void unsubscribeEntry(java.lang.Object,boolean)>(v10, v1);
label8:
v9 = v9 + 1;
goto label7;
label9:
return;
catch java.lang.Throwable from label1 to label2 with label5;
catch java.lang.Throwable from label3 to label4 with label5;
}
final java.lang.Object[] get()
{
io.smallrye.mutiny.operators.multi.FlatMapManager v0;
java.lang.Object v2;
java.util.concurrent.atomic.AtomicReference v1;
v0 := @this: io.smallrye.mutiny.operators.multi.FlatMapManager;
v1 = v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: java.util.concurrent.atomic.AtomicReference inners>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
return v2;
}
final boolean add(java.lang.Object)
{
java.lang.Throwable v18;
java.lang.Object[] v11, v4, v7;
long v16;
java.util.concurrent.atomic.AtomicReference v12, v2, v5;
int[] v14;
java.util.concurrent.atomic.AtomicInteger v17;
int v10, v13, v15, v8, v9;
io.smallrye.mutiny.operators.multi.FlatMapManager v0;
java.lang.Object v1, v3, v6;
v0 := @this: io.smallrye.mutiny.operators.multi.FlatMapManager;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: java.util.concurrent.atomic.AtomicReference inners>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v4 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: java.lang.Object[] terminated()>();
if v3 != v4 goto label01;
return 0;
label01:
entermonitor v0;
label02:
v5 = v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: java.util.concurrent.atomic.AtomicReference inners>;
v6 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v7 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: java.lang.Object[] terminated()>();
if v6 != v7 goto label04;
exitmonitor v0;
label03:
return 0;
label04:
v8 = specialinvoke v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: int pollFree()>();
if v8 >= 0 goto label09;
v9 = lengthof v6;
if v9 == 0 goto label05;
v10 = v9 << 1;
v11 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: java.lang.Object[] newArray(int)>(v10);
goto label06;
label05:
v11 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: java.lang.Object[] newArray(int)>(4);
label06:
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(v6, 0, v11, 0, v9);
v12 = v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: java.util.concurrent.atomic.AtomicReference inners>;
virtualinvoke v12.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(v11);
v6 = v11;
v13 = lengthof v11;
v14 = newarray (int)[v13];
v15 = v9 + 1;
label07:
if v15 >= v13 goto label08;
v14[v15] = v15;
v15 = v15 + 1;
goto label07;
label08:
v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: int[] free> = v14;
v16 = v9 + 1L;
v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: long consumerIndex> = v16;
v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: long producerIndex> = v13;
v8 = v9;
label09:
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: void setIndex(java.lang.Object,int)>(v1, v8);
v6[v8] = v1;
v17 = v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: java.util.concurrent.atomic.AtomicInteger size>;
virtualinvoke v17.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();
exitmonitor v0;
label10:
goto label12;
label11:
v18 := @caughtexception;
exitmonitor v0;
throw v18;
label12:
return 1;
catch java.lang.Throwable from label02 to label03 with label11;
catch java.lang.Throwable from label04 to label10 with label11;
}
final void remove(int)
{
java.lang.Throwable v6;
java.lang.Object[] v4;
java.util.concurrent.atomic.AtomicInteger v5;
int v1;
io.smallrye.mutiny.operators.multi.FlatMapManager v0;
java.lang.Object v3;
java.util.concurrent.atomic.AtomicReference v2;
v0 := @this: io.smallrye.mutiny.operators.multi.FlatMapManager;
v1 := @parameter0: int;
entermonitor v0;
label1:
v2 = v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: java.util.concurrent.atomic.AtomicReference inners>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v4 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: java.lang.Object[] terminated()>();
if v3 == v4 goto label2;
v3[v1] = null;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: void offerFree(int)>(v1);
v5 = v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: java.util.concurrent.atomic.AtomicInteger size>;
virtualinvoke v5.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();
label2:
exitmonitor v0;
label3:
goto label5;
label4:
v6 := @caughtexception;
exitmonitor v0;
throw v6;
label5:
return;
catch java.lang.Throwable from label1 to label3 with label4;
}
private int pollFree()
{
long v4, v5, v9;
byte v6;
int[] v1;
int v10, v2, v3, v7, v8;
io.smallrye.mutiny.operators.multi.FlatMapManager v0;
v0 := @this: io.smallrye.mutiny.operators.multi.FlatMapManager;
v1 = v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: int[] free>;
v2 = lengthof v1;
v3 = v2 - 1;
v4 = v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: long consumerIndex>;
v5 = v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: long producerIndex>;
v6 = v5 cmp v4;
if v6 != 0 goto label1;
v7 = (int) -1;
return v7;
label1:
v8 = v4 & v3;
v9 = v4 + 1L;
v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: long consumerIndex> = v9;
v10 = v1[v8];
return v10;
}
private void offerFree(int)
{
long v5, v7;
int[] v2;
int v1, v3, v4, v6;
io.smallrye.mutiny.operators.multi.FlatMapManager v0;
v0 := @this: io.smallrye.mutiny.operators.multi.FlatMapManager;
v1 := @parameter0: int;
v2 = v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: int[] free>;
v3 = lengthof v2;
v4 = v3 - 1;
v5 = v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: long producerIndex>;
v6 = v5 & v4;
v2[v6] = v1;
v7 = v5 + 1L;
v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: long producerIndex> = v7;
return;
}
final boolean isEmpty()
{
java.util.concurrent.atomic.AtomicInteger v1;
int v2;
io.smallrye.mutiny.operators.multi.FlatMapManager v0;
boolean v3;
v0 := @this: io.smallrye.mutiny.operators.multi.FlatMapManager;
v1 = v0.<io.smallrye.mutiny.operators.multi.FlatMapManager: java.util.concurrent.atomic.AtomicInteger size>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int get()>();
if v2 != 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
static void <clinit>()
{
int[] v0;
v0 = newarray (int)[0];
<io.smallrye.mutiny.operators.multi.FlatMapManager: int[] FREE_EMPTY> = v0;
return;
}
}