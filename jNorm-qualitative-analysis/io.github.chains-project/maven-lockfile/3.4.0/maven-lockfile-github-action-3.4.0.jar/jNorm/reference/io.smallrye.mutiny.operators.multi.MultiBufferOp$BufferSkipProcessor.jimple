final class io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor extends io.smallrye.mutiny.operators.multi.MultiOperatorProcessor
{
private final java.util.function.Supplier supplier;
private final int size;
private final int skip;
private java.util.List current;
private long index;
private final java.util.concurrent.atomic.AtomicInteger wip;
void <init>(io.smallrye.mutiny.subscription.MultiSubscriber, int, int, java.util.function.Supplier)
{
io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor v0;
java.util.concurrent.atomic.AtomicInteger v5;
int v2, v3;
java.util.function.Supplier v4;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: java.util.function.Supplier;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v1);
v5 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v5.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor: java.util.concurrent.atomic.AtomicInteger wip> = v5;
v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor: int size> = v2;
v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor: int skip> = v3;
v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor: java.util.function.Supplier supplier> = v4;
return;
}
public void request(long)
{
long v1, v10, v11, v13, v5, v8, v9;
io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor v0;
java.util.concurrent.atomic.AtomicInteger v2;
int v12, v4, v6, v7;
boolean v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor;
v1 := @parameter0: long;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor: java.util.concurrent.atomic.AtomicInteger wip>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(0, 1);
if v3 == 0 goto label1;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor: int size>;
v5 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long multiply(long,long)>(v1, v4);
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor: int skip>;
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor: int size>;
v8 = v6 - v7;
v9 = v1 - 1L;
v10 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long multiply(long,long)>(v8, v9);
v11 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(long,long)>(v5, v10);
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void request(long)>(v11);
goto label2;
label1:
v12 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor: int skip>;
v13 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long multiply(long,long)>(v12, v1);
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void request(long)>(v13);
label2:
return;
}
public void onItem(java.lang.Object)
{
long v12, v3, v5;
java.util.function.Supplier v7;
io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor v0;
byte v6;
int v10, v4, v9;
java.lang.Object v1, v8;
io.smallrye.mutiny.subscription.MultiSubscriber v11;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor: boolean isDone()>();
if v2 == 0 goto label1;
return;
label1:
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor: long index>;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor: int skip>;
v5 = v3 % v4;
v6 = v5 cmp 0L;
if v6 != 0 goto label2;
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor: java.util.function.Supplier supplier>;
v8 = interfaceinvoke v7.<java.util.function.Supplier: java.lang.Object get()>();
v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor: java.util.List current> = v8;
label2:
if v8 == null goto label3;
interfaceinvoke v8.<java.util.List: boolean add(java.lang.Object)>(v1);
v9 = interfaceinvoke v8.<java.util.List: int size()>();
v10 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor: int size>;
if v9 != v10 goto label3;
v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor: java.util.List current> = null;
v11 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v11.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v8);
label3:
v12 = v3 + 1L;
v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor: long index> = v12;
return;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor v0;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v2, v4;
io.smallrye.mutiny.subscription.MultiSubscriber v5;
java.util.concurrent.Flow$Subscription v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor;
v1 := @parameter0: java.lang.Throwable;
v2 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
v3 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor: java.util.concurrent.Flow$Subscription getAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription)>(v2);
v4 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v3 == v4 goto label1;
v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor: java.util.List current> = null;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v5.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v1);
goto label2;
label1:
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v1);
label2:
return;
}
public void onCompletion()
{
io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor v0;
java.util.List v4;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v1, v3;
io.smallrye.mutiny.subscription.MultiSubscriber v5, v6;
java.util.concurrent.Flow$Subscription v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor;
v1 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor: java.util.concurrent.Flow$Subscription getAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription)>(v1);
v3 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v2 == v3 goto label2;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor: java.util.List current>;
v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor: java.util.List current> = null;
if v4 == null goto label1;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v5.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v4);
label1:
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferOp$BufferSkipProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v6.<io.smallrye.mutiny.subscription.MultiSubscriber: void onCompletion()>();
label2:
return;
}
}