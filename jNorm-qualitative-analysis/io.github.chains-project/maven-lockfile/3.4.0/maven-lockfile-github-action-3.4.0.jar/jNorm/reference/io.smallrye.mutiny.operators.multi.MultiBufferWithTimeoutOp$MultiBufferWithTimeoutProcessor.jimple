class io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor extends io.smallrye.mutiny.operators.multi.MultiOperatorProcessor
{
private static final int RUNNING;
private static final int SUCCEED;
private static final int FAILED;
private static final int CANCELLED;
private final int size;
private final java.time.Duration duration;
private final java.util.concurrent.ScheduledExecutorService executor;
private final java.util.function.Supplier supplier;
private final java.lang.Runnable flush;
private final java.util.concurrent.atomic.AtomicInteger terminated;
private final java.util.concurrent.atomic.AtomicLong requested;
private final java.util.concurrent.atomic.AtomicInteger index;
private java.util.List current;
private java.util.concurrent.ScheduledFuture task;
void <init>(io.smallrye.mutiny.subscription.MultiSubscriber, int, java.time.Duration, java.util.concurrent.ScheduledExecutorService, java.util.function.Supplier)
{
java.lang.Runnable v9;
java.util.function.Supplier v5;
io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor v0;
java.util.concurrent.atomic.AtomicLong v7;
java.util.concurrent.atomic.AtomicInteger v6, v8;
java.time.Duration v3;
int v2;
java.util.concurrent.ScheduledExecutorService v4;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 := @parameter1: int;
v3 := @parameter2: java.time.Duration;
v4 := @parameter3: java.util.concurrent.ScheduledExecutorService;
v5 := @parameter4: java.util.function.Supplier;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v1);
v6 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v6.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);
v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.concurrent.atomic.AtomicInteger terminated> = v6;
v7 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v7.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.concurrent.atomic.AtomicLong requested> = v7;
v8 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v8.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.concurrent.atomic.AtomicInteger index> = v8;
v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.time.Duration duration> = v3;
v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.concurrent.ScheduledExecutorService executor> = v4;
v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.function.Supplier supplier> = v5;
v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: int size> = v2;
v9 = staticinvoke <io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor$lambda_new_0__2661: java.lang.Runnable bootstrap$(io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor)>(v0);
v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.lang.Runnable flush> = v9;
return;
}
private void doOnSubscribe()
{
io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor v0;
java.lang.Object v2;
java.util.function.Supplier v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.function.Supplier supplier>;
v2 = interfaceinvoke v1.<java.util.function.Supplier: java.lang.Object get()>();
v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.List current> = v2;
return;
}
void nextCallback(java.lang.Object)
{
io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor v0;
java.lang.Throwable v6;
java.util.List v2, v5;
java.lang.Object v1, v4;
java.util.function.Supplier v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor;
v1 := @parameter0: java.lang.Object;
entermonitor v0;
label1:
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.List current>;
if v2 != null goto label2;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.function.Supplier supplier>;
v4 = interfaceinvoke v3.<java.util.function.Supplier: java.lang.Object get()>();
v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.List current> = v4;
label2:
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.List current>;
interfaceinvoke v5.<java.util.List: boolean add(java.lang.Object)>(v1);
exitmonitor v0;
label3:
goto label5;
label4:
v6 := @caughtexception;
exitmonitor v0;
throw v6;
label5:
return;
catch java.lang.Throwable from label1 to label3 with label4;
}
private void flushCallback()
{
java.lang.Throwable v9;
long v11, v15;
java.util.function.Supplier v7;
java.util.ArrayList v3;
io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor v0;
byte v13, v14, v19;
io.smallrye.mutiny.subscription.BackPressureFailure v20;
io.smallrye.mutiny.subscription.MultiSubscriber v12;
boolean v1, v17, v6;
java.util.concurrent.atomic.AtomicLong v10, v16, v18;
java.util.List v2, v4, v5;
java.lang.Object v8;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor;
v1 = 0;
entermonitor v0;
label01:
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.List current>;
if v2 == null goto label02;
v3 = new java.util.ArrayList;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.List current>;
specialinvoke v3.<java.util.ArrayList: void <init>(java.util.Collection)>(v4);
v5 = v3;
goto label03;
label02:
v5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
label03:
v6 = interfaceinvoke v5.<java.util.List: boolean isEmpty()>();
if v6 != 0 goto label04;
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.function.Supplier supplier>;
v8 = interfaceinvoke v7.<java.util.function.Supplier: java.lang.Object get()>();
v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.List current> = v8;
v1 = 1;
label04:
exitmonitor v0;
label05:
goto label07;
label06:
v9 := @caughtexception;
exitmonitor v0;
throw v9;
label07:
if v1 == 0 goto label12;
v10 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.concurrent.atomic.AtomicLong requested>;
v11 = virtualinvoke v10.<java.util.concurrent.atomic.AtomicLong: long get()>();
v12 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v13 = v11 cmp 0L;
if v13 == 0 goto label11;
v14 = v11 cmp 9223372036854775807L;
if v14 == 0 goto label10;
label08:
v15 = v11 - 1L;
v16 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.concurrent.atomic.AtomicLong requested>;
v17 = virtualinvoke v16.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>(v11, v15);
if v17 == 0 goto label09;
interfaceinvoke v12.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v5);
return;
label09:
v18 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.concurrent.atomic.AtomicLong requested>;
v11 = virtualinvoke v18.<java.util.concurrent.atomic.AtomicLong: long get()>();
v19 = v11 cmp 0L;
if v19 > 0 goto label08;
goto label11;
label10:
interfaceinvoke v12.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v5);
return;
label11:
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: void cancel()>();
v20 = new io.smallrye.mutiny.subscription.BackPressureFailure;
specialinvoke v20.<io.smallrye.mutiny.subscription.BackPressureFailure: void <init>(java.lang.String)>("Cannot emit item due to lack of requests");
interfaceinvoke v12.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v20);
label12:
return;
catch java.lang.Throwable from label01 to label05 with label06;
}
public void onItem(java.lang.Object)
{
java.util.concurrent.ScheduledFuture v13, v20, v21;
long v11;
java.lang.Runnable v9;
io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor v0;
java.util.concurrent.RejectedExecutionException v14;
java.util.concurrent.atomic.AtomicInteger v15, v19, v2, v5;
java.time.Duration v10;
int v16, v17, v18, v3, v4, v6;
java.util.concurrent.ScheduledExecutorService v8;
boolean v7;
java.util.concurrent.TimeUnit v12;
java.lang.Object v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor;
v1 := @parameter0: java.lang.Object;
label1:
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.concurrent.atomic.AtomicInteger index>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicInteger: int get()>();
v4 = v3 + 1;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.concurrent.atomic.AtomicInteger index>;
v6 = v4 - 1;
v7 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(v6, v4);
if v7 == 0 goto label1;
if v4 != 1 goto label5;
label2:
v8 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.concurrent.ScheduledExecutorService executor>;
v9 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.lang.Runnable flush>;
v10 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.time.Duration duration>;
v11 = virtualinvoke v10.<java.time.Duration: long toMillis()>();
v12 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
v13 = interfaceinvoke v8.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(v9, v11, v12);
v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.concurrent.ScheduledFuture task> = v13;
label3:
goto label5;
label4:
v14 := @caughtexception;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: void onFailure(java.lang.Throwable)>(v14);
return;
label5:
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: void nextCallback(java.lang.Object)>(v1);
v15 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.concurrent.atomic.AtomicInteger index>;
v16 = virtualinvoke v15.<java.util.concurrent.atomic.AtomicInteger: int get()>();
v17 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: int size>;
v18 = v16 % v17;
if v18 != 0 goto label7;
v19 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.concurrent.atomic.AtomicInteger index>;
virtualinvoke v19.<java.util.concurrent.atomic.AtomicInteger: void lazySet(int)>(0);
v20 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.concurrent.ScheduledFuture task>;
if v20 == null goto label6;
v21 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.concurrent.ScheduledFuture task>;
interfaceinvoke v21.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(0);
v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.concurrent.ScheduledFuture task> = null;
label6:
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: void flushCallback()>();
label7:
return;
catch java.util.concurrent.RejectedExecutionException from label2 to label3 with label4;
}
void checkedComplete()
{
io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor v0;
java.lang.Throwable v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor;
label1:
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: void flushCallback()>();
label2:
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void onCompletion()>();
goto label4;
label3:
v1 := @caughtexception;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void onCompletion()>();
throw v1;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void request(long)
{
long v1, v9;
io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor v0;
java.util.concurrent.atomic.AtomicLong v3;
byte v2, v7;
java.util.concurrent.atomic.AtomicInteger v4;
int v5, v6, v8;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 <= 0 goto label4;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.concurrent.atomic.AtomicLong requested>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(java.util.concurrent.atomic.AtomicLong,long)>(v3, v1);
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.concurrent.atomic.AtomicInteger terminated>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicInteger: int get()>();
if v5 == 0 goto label1;
return;
label1:
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: int size>;
if v6 == 2147483647 goto label2;
v7 = v1 cmp 9223372036854775807L;
if v7 != 0 goto label3;
label2:
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void request(long)>(9223372036854775807L);
goto label4;
label3:
v8 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: int size>;
v9 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long multiply(long,long)>(v1, v8);
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void request(long)>(v9);
label4:
return;
}
public void onCompletion()
{
io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor v0;
java.util.concurrent.ScheduledFuture v3, v4;
java.util.concurrent.atomic.AtomicInteger v1;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.concurrent.atomic.AtomicInteger terminated>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(0, 1);
if v2 == 0 goto label2;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.concurrent.ScheduledFuture task>;
if v3 == null goto label1;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.concurrent.ScheduledFuture task>;
interfaceinvoke v4.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(1);
v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.concurrent.ScheduledFuture task> = null;
label1:
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: void checkedComplete()>();
label2:
return;
}
public void onFailure(java.lang.Throwable)
{
io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor v0;
java.lang.Throwable v1, v6;
java.util.List v4, v5;
java.util.concurrent.atomic.AtomicInteger v2;
boolean v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.concurrent.atomic.AtomicInteger terminated>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(0, 2);
if v3 == 0 goto label6;
entermonitor v0;
label1:
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.List current>;
if v4 == null goto label2;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.List current>;
interfaceinvoke v5.<java.util.List: void clear()>();
v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.List current> = null;
label2:
exitmonitor v0;
label3:
goto label5;
label4:
v6 := @caughtexception;
exitmonitor v0;
throw v6;
label5:
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void onFailure(java.lang.Throwable)>(v1);
goto label7;
label6:
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v1);
label7:
return;
catch java.lang.Throwable from label1 to label3 with label4;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor v0;
io.smallrye.mutiny.subscription.MultiSubscriber v3;
boolean v2;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: boolean compareAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription,java.util.concurrent.Flow$Subscription)>(null, v1);
if v2 == 0 goto label1;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: void doOnSubscribe()>();
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v3.<io.smallrye.mutiny.subscription.MultiSubscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v0);
goto label2;
label1:
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void cancel()>();
label2:
return;
}
public void cancel()
{
io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor v0;
java.util.List v3;
java.util.concurrent.atomic.AtomicInteger v1;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.concurrent.atomic.AtomicInteger terminated>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(0, 3);
if v2 == 0 goto label1;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void cancel()>();
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: java.util.List current>;
if v3 == null goto label1;
interfaceinvoke v3.<java.util.List: void clear()>();
label1:
return;
}
}