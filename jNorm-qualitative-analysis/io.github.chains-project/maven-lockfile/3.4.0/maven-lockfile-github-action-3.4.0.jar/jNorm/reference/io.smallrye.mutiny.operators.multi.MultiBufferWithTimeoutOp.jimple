public final class io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp extends io.smallrye.mutiny.operators.multi.AbstractMultiOperator
{
private final int size;
private final java.util.function.Supplier supplier;
private final java.util.concurrent.ScheduledExecutorService scheduler;
private final java.time.Duration timeout;
public void <init>(io.smallrye.mutiny.Multi, int, java.time.Duration, java.util.concurrent.ScheduledExecutorService)
{
java.util.function.Supplier v8;
io.smallrye.mutiny.Multi v1;
java.time.Duration v3, v5;
int v2, v6;
java.util.concurrent.ScheduledExecutorService v4;
io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp v0;
java.lang.Object v7;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp;
v1 := @parameter0: io.smallrye.mutiny.Multi;
v2 := @parameter1: int;
v3 := @parameter2: java.time.Duration;
v4 := @parameter3: java.util.concurrent.ScheduledExecutorService;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.AbstractMultiOperator: void <init>(io.smallrye.mutiny.Multi)>(v1);
v5 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.time.Duration validate(java.time.Duration,java.lang.String)>(v3, "timeout");
v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp: java.time.Duration timeout> = v5;
v6 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: int positive(int,java.lang.String)>(v2, "size");
v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp: int size> = v6;
v7 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v4, "scheduler");
v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp: java.util.concurrent.ScheduledExecutorService scheduler> = v7;
v8 = staticinvoke <io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$lambda_new_0__2667: java.util.function.Supplier bootstrap$(int)>(v2);
v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp: java.util.function.Supplier supplier> = v8;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)
{
io.smallrye.mutiny.groups.MultiSubscribe v9;
io.smallrye.mutiny.subscription.SerializedSubscriber v3;
java.util.function.Supplier v7;
io.smallrye.mutiny.Multi v8;
io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor v2;
java.time.Duration v5;
int v4;
java.util.concurrent.ScheduledExecutorService v6;
io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp v0;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 = new io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor;
v3 = new io.smallrye.mutiny.subscription.SerializedSubscriber;
specialinvoke v3.<io.smallrye.mutiny.subscription.SerializedSubscriber: void <init>(java.util.concurrent.Flow$Subscriber)>(v1);
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp: int size>;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp: java.time.Duration timeout>;
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp: java.util.concurrent.ScheduledExecutorService scheduler>;
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp: java.util.function.Supplier supplier>;
specialinvoke v2.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp$MultiBufferWithTimeoutProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber,int,java.time.Duration,java.util.concurrent.ScheduledExecutorService,java.util.function.Supplier)>(v3, v4, v5, v6, v7);
v8 = v0.<io.smallrye.mutiny.operators.multi.MultiBufferWithTimeoutOp: io.smallrye.mutiny.Multi upstream>;
v9 = interfaceinvoke v8.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiSubscribe subscribe()>();
virtualinvoke v9.<io.smallrye.mutiny.groups.MultiSubscribe: io.smallrye.mutiny.subscription.MultiSubscriber withSubscriber(io.smallrye.mutiny.subscription.MultiSubscriber)>(v2);
return;
}
}