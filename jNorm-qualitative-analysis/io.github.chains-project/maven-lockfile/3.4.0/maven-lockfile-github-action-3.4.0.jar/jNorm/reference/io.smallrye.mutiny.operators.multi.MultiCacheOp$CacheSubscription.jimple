final class io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription extends java.lang.Object implements java.util.concurrent.Flow$Subscription
{
private final io.smallrye.mutiny.subscription.MultiSubscriber downstream;
private final io.smallrye.mutiny.operators.multi.MultiCacheOp cache;
private final java.util.concurrent.atomic.AtomicLong requested;
private final java.util.concurrent.atomic.AtomicInteger wip;
private int lastIndex;
void <init>(io.smallrye.mutiny.subscription.MultiSubscriber, io.smallrye.mutiny.operators.multi.MultiCacheOp)
{
java.util.concurrent.atomic.AtomicLong v3;
java.util.concurrent.atomic.AtomicInteger v4;
int v5;
io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription v0;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
io.smallrye.mutiny.operators.multi.MultiCacheOp v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 := @parameter1: io.smallrye.mutiny.operators.multi.MultiCacheOp;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v3.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription: java.util.concurrent.atomic.AtomicLong requested> = v3;
v4 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v4.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription: java.util.concurrent.atomic.AtomicInteger wip> = v4;
v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription: io.smallrye.mutiny.subscription.MultiSubscriber downstream> = v1;
v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription: io.smallrye.mutiny.operators.multi.MultiCacheOp cache> = v2;
v5 = (int) -1;
v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription: int lastIndex> = v5;
return;
}
public void request(long)
{
java.util.concurrent.atomic.AtomicLong v3;
byte v2;
io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription v0;
long v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 <= 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription: java.util.concurrent.atomic.AtomicLong requested>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(java.util.concurrent.atomic.AtomicLong,long)>(v3, v1);
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription: void replay()>();
label1:
return;
}
public void replay()
{
java.lang.Throwable v10, v13;
io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription v0;
long v16;
byte v17, v18;
java.util.concurrent.atomic.AtomicInteger v1, v27;
int v2, v20, v21, v22, v28, v3;
io.smallrye.mutiny.subscription.MultiSubscriber v11, v14, v24;
boolean v19, v7, v8;
io.smallrye.mutiny.operators.multi.MultiCacheOp v12, v4, v6, v9;
java.util.concurrent.atomic.AtomicLong v15, v26;
java.lang.Object v23, v25;
java.util.concurrent.CopyOnWriteArrayList v5;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription: java.util.concurrent.atomic.AtomicInteger wip>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
if v2 == 0 goto label1;
return;
label1:
v3 = 1;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription: io.smallrye.mutiny.operators.multi.MultiCacheOp cache>;
v5 = v4.<io.smallrye.mutiny.operators.multi.MultiCacheOp: java.util.concurrent.CopyOnWriteArrayList history>;
label2:
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription: io.smallrye.mutiny.operators.multi.MultiCacheOp cache>;
v7 = v6.<io.smallrye.mutiny.operators.multi.MultiCacheOp: boolean done>;
if v7 == 0 goto label5;
v8 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription: boolean hasNext()>();
if v8 != 0 goto label5;
v9 = v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription: io.smallrye.mutiny.operators.multi.MultiCacheOp cache>;
v10 = v9.<io.smallrye.mutiny.operators.multi.MultiCacheOp: java.lang.Throwable failure>;
if v10 == null goto label3;
v11 = v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v12 = v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription: io.smallrye.mutiny.operators.multi.MultiCacheOp cache>;
v13 = v12.<io.smallrye.mutiny.operators.multi.MultiCacheOp: java.lang.Throwable failure>;
interfaceinvoke v11.<io.smallrye.mutiny.subscription.MultiSubscriber: void onError(java.lang.Throwable)>(v13);
goto label4;
label3:
v14 = v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v14.<io.smallrye.mutiny.subscription.MultiSubscriber: void onCompletion()>();
label4:
return;
label5:
v15 = v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription: java.util.concurrent.atomic.AtomicLong requested>;
v16 = virtualinvoke v15.<java.util.concurrent.atomic.AtomicLong: long get()>();
v17 = v16 cmp -9223372036854775808L;
if v17 != 0 goto label6;
return;
label6:
v18 = v16 cmp 0L;
if v18 <= 0 goto label7;
v19 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription: boolean hasNext()>();
if v19 == 0 goto label7;
v20 = v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription: int lastIndex>;
v21 = v20 + 1;
v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription: int lastIndex> = v21;
v22 = v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription: int lastIndex>;
v23 = virtualinvoke v5.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>(v22);
v24 = v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v25 = v23.<io.smallrye.mutiny.operators.multi.MultiCacheOp$Node: java.lang.Object item>;
interfaceinvoke v24.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v25);
v26 = v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription: java.util.concurrent.atomic.AtomicLong requested>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long subtract(java.util.concurrent.atomic.AtomicLong,long)>(v26, 1L);
goto label2;
label7:
v27 = v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription: java.util.concurrent.atomic.AtomicInteger wip>;
v28 = neg v3;
v3 = virtualinvoke v27.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(v28);
if v3 != 0 goto label2;
return;
}
public void cancel()
{
java.util.concurrent.atomic.AtomicLong v1;
byte v3;
io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription v0;
long v2;
io.smallrye.mutiny.operators.multi.MultiCacheOp v4;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription: java.util.concurrent.atomic.AtomicLong requested>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: long getAndSet(long)>(-9223372036854775808L);
v3 = v2 cmp -9223372036854775808L;
if v3 == 0 goto label1;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription: io.smallrye.mutiny.operators.multi.MultiCacheOp cache>;
specialinvoke v4.<io.smallrye.mutiny.operators.multi.MultiCacheOp: void remove(io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription)>(v0);
label1:
return;
}
boolean hasNext()
{
int v1, v4, v5;
io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription v0;
boolean v6;
io.smallrye.mutiny.operators.multi.MultiCacheOp v2;
java.util.concurrent.CopyOnWriteArrayList v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription: int lastIndex>;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiCacheOp$CacheSubscription: io.smallrye.mutiny.operators.multi.MultiCacheOp cache>;
v3 = v2.<io.smallrye.mutiny.operators.multi.MultiCacheOp: java.util.concurrent.CopyOnWriteArrayList history>;
v4 = virtualinvoke v3.<java.util.concurrent.CopyOnWriteArrayList: int size()>();
v5 = v4 - 1;
if v1 >= v5 goto label1;
v6 = 1;
goto label2;
label1:
v6 = 0;
label2:
return v6;
}
}