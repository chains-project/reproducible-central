final class io.smallrye.mutiny.operators.multi.MultiDistinctOp$DistinctProcessor extends io.smallrye.mutiny.operators.multi.MultiOperatorProcessor
{
final java.util.Collection collection;
void <init>(io.smallrye.mutiny.subscription.MultiSubscriber, java.util.Comparator)
{
java.util.HashSet v3;
io.smallrye.mutiny.operators.multi.MultiDistinctOp$DistinctProcessor v0;
java.util.Comparator v2;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
java.util.TreeSet v4;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiDistinctOp$DistinctProcessor;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 := @parameter1: java.util.Comparator;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v1);
if v2 != null goto label1;
v3 = new java.util.HashSet;
specialinvoke v3.<java.util.HashSet: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiDistinctOp$DistinctProcessor: java.util.Collection collection> = v3;
goto label2;
label1:
v4 = new java.util.TreeSet;
specialinvoke v4.<java.util.TreeSet: void <init>(java.util.Comparator)>(v2);
v0.<io.smallrye.mutiny.operators.multi.MultiDistinctOp$DistinctProcessor: java.util.Collection collection> = v4;
label2:
return;
}
public void onItem(java.lang.Object)
{
java.lang.Throwable v5;
io.smallrye.mutiny.operators.multi.MultiDistinctOp$DistinctProcessor v0;
java.util.Collection v3;
java.lang.Object v1;
io.smallrye.mutiny.subscription.MultiSubscriber v6;
boolean v2, v4;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiDistinctOp$DistinctProcessor;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiDistinctOp$DistinctProcessor: boolean isDone()>();
if v2 == 0 goto label1;
return;
label1:
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiDistinctOp$DistinctProcessor: java.util.Collection collection>;
v4 = interfaceinvoke v3.<java.util.Collection: boolean add(java.lang.Object)>(v1);
label2:
goto label4;
label3:
v5 := @caughtexception;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiDistinctOp$DistinctProcessor: void failAndCancel(java.lang.Throwable)>(v5);
return;
label4:
if v4 == 0 goto label5;
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiDistinctOp$DistinctProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v6.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v1);
goto label6;
label5:
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiDistinctOp$DistinctProcessor: void request(long)>(1L);
label6:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.operators.multi.MultiDistinctOp$DistinctProcessor v0;
java.util.Collection v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiDistinctOp$DistinctProcessor;
v1 := @parameter0: java.lang.Throwable;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void onFailure(java.lang.Throwable)>(v1);
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiDistinctOp$DistinctProcessor: java.util.Collection collection>;
interfaceinvoke v2.<java.util.Collection: void clear()>();
return;
}
public void onCompletion()
{
io.smallrye.mutiny.operators.multi.MultiDistinctOp$DistinctProcessor v0;
java.util.Collection v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiDistinctOp$DistinctProcessor;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void onCompletion()>();
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiDistinctOp$DistinctProcessor: java.util.Collection collection>;
interfaceinvoke v1.<java.util.Collection: void clear()>();
return;
}
public void cancel()
{
io.smallrye.mutiny.operators.multi.MultiDistinctOp$DistinctProcessor v0;
java.util.Collection v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiDistinctOp$DistinctProcessor;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void cancel()>();
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiDistinctOp$DistinctProcessor: java.util.Collection collection>;
interfaceinvoke v1.<java.util.Collection: void clear()>();
return;
}
}