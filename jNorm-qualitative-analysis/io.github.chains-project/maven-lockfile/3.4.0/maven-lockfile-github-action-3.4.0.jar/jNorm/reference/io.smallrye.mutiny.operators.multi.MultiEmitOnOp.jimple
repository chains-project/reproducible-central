public class io.smallrye.mutiny.operators.multi.MultiEmitOnOp extends io.smallrye.mutiny.operators.multi.AbstractMultiOperator
{
private final java.util.concurrent.Executor executor;
private final java.util.function.Supplier queueSupplier;
public void <init>(io.smallrye.mutiny.Multi, java.util.concurrent.Executor)
{
java.util.concurrent.Executor v2;
int v3;
java.lang.Object v5;
java.util.function.Supplier v4;
io.smallrye.mutiny.Multi v1;
io.smallrye.mutiny.operators.multi.MultiEmitOnOp v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiEmitOnOp;
v1 := @parameter0: io.smallrye.mutiny.Multi;
v2 := @parameter1: java.util.concurrent.Executor;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.AbstractMultiOperator: void <init>(io.smallrye.mutiny.Multi)>(v1);
v3 = <io.smallrye.mutiny.helpers.queues.Queues: int BUFFER_S>;
v4 = staticinvoke <io.smallrye.mutiny.helpers.queues.Queues: java.util.function.Supplier get(int)>(v3);
v0.<io.smallrye.mutiny.operators.multi.MultiEmitOnOp: java.util.function.Supplier queueSupplier> = v4;
v5 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v2, "executor");
v0.<io.smallrye.mutiny.operators.multi.MultiEmitOnOp: java.util.concurrent.Executor executor> = v5;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)
{
io.smallrye.mutiny.groups.MultiSubscribe v3;
java.util.concurrent.Executor v5;
io.smallrye.mutiny.operators.multi.MultiEmitOnOp$MultiEmitOnProcessor v4;
java.util.function.Supplier v6;
io.smallrye.mutiny.Multi v2;
io.smallrye.mutiny.operators.multi.MultiEmitOnOp v0;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiEmitOnOp;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNullNpe(java.lang.Object,java.lang.String)>(v1, "subscriber");
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiEmitOnOp: io.smallrye.mutiny.Multi upstream>;
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiSubscribe subscribe()>();
v4 = new io.smallrye.mutiny.operators.multi.MultiEmitOnOp$MultiEmitOnProcessor;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiEmitOnOp: java.util.concurrent.Executor executor>;
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiEmitOnOp: java.util.function.Supplier queueSupplier>;
specialinvoke v4.<io.smallrye.mutiny.operators.multi.MultiEmitOnOp$MultiEmitOnProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber,java.util.concurrent.Executor,java.util.function.Supplier)>(v1, v5, v6);
virtualinvoke v3.<io.smallrye.mutiny.groups.MultiSubscribe: io.smallrye.mutiny.subscription.MultiSubscriber withSubscriber(io.smallrye.mutiny.subscription.MultiSubscriber)>(v4);
return;
}
}