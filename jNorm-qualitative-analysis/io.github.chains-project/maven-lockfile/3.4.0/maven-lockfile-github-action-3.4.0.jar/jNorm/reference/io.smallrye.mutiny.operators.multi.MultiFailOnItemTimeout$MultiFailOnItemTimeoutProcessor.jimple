public class io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor extends io.smallrye.mutiny.operators.multi.MultiOperatorProcessor
{
private volatile java.util.concurrent.ScheduledFuture timeoutFuture;
final io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout this$0;
public void <init>(io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout, io.smallrye.mutiny.subscription.MultiSubscriber)
{
io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor v0;
io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout v1;
io.smallrye.mutiny.subscription.MultiSubscriber v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor;
v1 := @parameter0: io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout;
v2 := @parameter1: io.smallrye.mutiny.subscription.MultiSubscriber;
v0.<io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor: io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout this$0> = v1;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v2);
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
io.smallrye.mutiny.subscription.UniSubscription v4;
io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor v0;
io.smallrye.mutiny.subscription.MultiSubscriber v3;
boolean v2;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor: boolean scheduleTimeout()>();
if v2 != 0 goto label1;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void cancel()>();
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v4 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription DONE>;
interfaceinvoke v3.<io.smallrye.mutiny.subscription.MultiSubscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v4);
label1:
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v1);
return;
}
public void onItem(java.lang.Object)
{
java.util.concurrent.ScheduledFuture v4, v5;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v3;
io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor v0;
java.lang.Object v1;
io.smallrye.mutiny.subscription.MultiSubscriber v7;
boolean v6;
java.util.concurrent.Flow$Subscription v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor: java.util.concurrent.Flow$Subscription getUpstreamSubscription()>();
v3 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v2 == v3 goto label2;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor: java.util.concurrent.ScheduledFuture timeoutFuture>;
if v4 == null goto label1;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor: java.util.concurrent.ScheduledFuture timeoutFuture>;
interfaceinvoke v5.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(0);
v6 = specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor: boolean scheduleTimeout()>();
if v6 != 0 goto label1;
return;
label1:
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v7.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v1);
label2:
return;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
java.util.concurrent.ScheduledFuture v5, v6;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v2, v4;
io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor v0;
io.smallrye.mutiny.subscription.MultiSubscriber v7;
java.util.concurrent.Flow$Subscription v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor;
v1 := @parameter0: java.lang.Throwable;
v2 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
v3 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor: java.util.concurrent.Flow$Subscription getAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription)>(v2);
v4 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v3 == v4 goto label2;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor: java.util.concurrent.ScheduledFuture timeoutFuture>;
if v5 == null goto label1;
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor: java.util.concurrent.ScheduledFuture timeoutFuture>;
interfaceinvoke v6.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(0);
label1:
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v7.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v1);
goto label3;
label2:
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v1);
label3:
return;
}
public void onCompletion()
{
io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor v0;
java.util.concurrent.ScheduledFuture v4, v5;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v1, v3;
io.smallrye.mutiny.subscription.MultiSubscriber v6;
java.util.concurrent.Flow$Subscription v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor;
v1 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor: java.util.concurrent.Flow$Subscription getAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription)>(v1);
v3 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v2 == v3 goto label2;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor: java.util.concurrent.ScheduledFuture timeoutFuture>;
if v4 == null goto label1;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor: java.util.concurrent.ScheduledFuture timeoutFuture>;
interfaceinvoke v5.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(0);
label1:
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v6.<io.smallrye.mutiny.subscription.MultiSubscriber: void onCompletion()>();
label2:
return;
}
public void cancel()
{
io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor v0;
java.util.concurrent.ScheduledFuture v1, v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor: java.util.concurrent.ScheduledFuture timeoutFuture>;
if v1 == null goto label1;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor: java.util.concurrent.ScheduledFuture timeoutFuture>;
interfaceinvoke v2.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(0);
label1:
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void cancel()>();
return;
}
public void doTimeout()
{
java.lang.Throwable v5;
java.util.function.Supplier v3;
java.lang.NullPointerException v8;
io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor v0;
io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout v2;
java.lang.Object v4;
io.smallrye.mutiny.subscription.MultiSubscriber v6, v7, v9;
boolean v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor;
v1 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor: boolean isCancelled()>();
if v1 == 0 goto label1;
return;
label1:
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void cancel()>();
label2:
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor: io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout this$0>;
v3 = v2.<io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout: java.util.function.Supplier supplier>;
v4 = interfaceinvoke v3.<java.util.function.Supplier: java.lang.Object get()>();
label3:
goto label5;
label4:
v5 := @caughtexception;
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v6.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v5);
return;
label5:
if v4 != null goto label6;
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v8 = new java.lang.NullPointerException;
specialinvoke v8.<java.lang.NullPointerException: void <init>(java.lang.String)>("The supplier returned `null`");
interfaceinvoke v7.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v8);
goto label7;
label6:
v9 = v0.<io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v9.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v4);
label7:
return;
catch java.lang.Throwable from label2 to label3 with label4;
}
private boolean scheduleTimeout()
{
java.util.concurrent.ScheduledFuture v8;
long v6;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v10;
java.lang.Runnable v3;
java.util.concurrent.TimeUnit v7;
io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor v0;
java.util.concurrent.RejectedExecutionException v9;
io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout v1, v4;
java.time.Duration v5;
java.util.concurrent.ScheduledExecutorService v2;
io.smallrye.mutiny.subscription.MultiSubscriber v11;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor;
label1:
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor: io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout this$0>;
v2 = v1.<io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout: java.util.concurrent.ScheduledExecutorService executor>;
v3 = staticinvoke <io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor$doTimeout__2660: java.lang.Runnable bootstrap$(io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor)>(v0);
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor: io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout this$0>;
v5 = v4.<io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout: java.time.Duration timeout>;
v6 = virtualinvoke v5.<java.time.Duration: long toMillis()>();
v7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
v8 = interfaceinvoke v2.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(v3, v6, v7);
v0.<io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor: java.util.concurrent.ScheduledFuture timeoutFuture> = v8;
label2:
return 1;
label3:
v9 := @caughtexception;
v10 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor: java.util.concurrent.Flow$Subscription getAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription)>(v10);
v11 = v0.<io.smallrye.mutiny.operators.multi.MultiFailOnItemTimeout$MultiFailOnItemTimeoutProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v11.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v9);
return 0;
catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
}
}