public final class io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor extends io.smallrye.mutiny.operators.multi.MultiOperatorProcessor
{
private final java.util.function.Function keySelector;
private final java.util.function.Function valueSelector;
private final java.util.Map groups;
private final java.util.Queue queue;
private static final java.lang.Object NO_KEY;
private final java.util.concurrent.atomic.AtomicBoolean cancelled;
private final java.util.concurrent.atomic.AtomicLong requested;
private final java.util.concurrent.atomic.AtomicInteger groupCount;
private final java.util.concurrent.atomic.AtomicInteger wip;
java.lang.Throwable failure;
volatile boolean finished;
boolean done;
public void <init>(io.smallrye.mutiny.subscription.MultiSubscriber, java.util.function.Function, java.util.function.Function, java.util.Map)
{
io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor v0;
java.util.concurrent.atomic.AtomicBoolean v5;
java.util.function.Function v2, v3;
java.util.function.Supplier v10;
java.util.concurrent.atomic.AtomicLong v6;
java.util.concurrent.atomic.AtomicInteger v7, v8;
java.util.Map v4;
int v9;
java.lang.Object v11;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 := @parameter1: java.util.function.Function;
v3 := @parameter2: java.util.function.Function;
v4 := @parameter3: java.util.Map;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v1);
v5 = new java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v5.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.util.concurrent.atomic.AtomicBoolean cancelled> = v5;
v6 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v6.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.util.concurrent.atomic.AtomicLong requested> = v6;
v7 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v7.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(1);
v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.util.concurrent.atomic.AtomicInteger groupCount> = v7;
v8 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v8.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.util.concurrent.atomic.AtomicInteger wip> = v8;
v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.util.function.Function keySelector> = v2;
v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.util.function.Function valueSelector> = v3;
v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.util.Map groups> = v4;
v9 = <io.smallrye.mutiny.helpers.queues.Queues: int BUFFER_S>;
v10 = staticinvoke <io.smallrye.mutiny.helpers.queues.Queues: java.util.function.Supplier unbounded(int)>(v9);
v11 = interfaceinvoke v10.<java.util.function.Supplier: java.lang.Object get()>();
v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.util.Queue queue> = v11;
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor v0;
io.smallrye.mutiny.subscription.MultiSubscriber v3;
boolean v2;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: boolean compareAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription,java.util.concurrent.Flow$Subscription)>(null, v1);
if v2 == 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v3.<io.smallrye.mutiny.subscription.MultiSubscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v0);
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void request(long)>(128L);
goto label2;
label1:
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void cancel()>();
label2:
return;
}
public void onItem(java.lang.Object)
{
java.lang.Throwable v16, v5;
java.util.function.Function v13, v3;
java.lang.NullPointerException v15;
java.util.concurrent.atomic.AtomicInteger v12;
java.util.Map v11, v8;
boolean v10, v2, v6;
io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor v0;
java.lang.Object v1, v14, v4, v7, v9;
java.util.Queue v17;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: boolean isDone()>();
if v2 == 0 goto label01;
return;
label01:
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.util.function.Function keySelector>;
v4 = interfaceinvoke v3.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v1);
label02:
goto label04;
label03:
v5 := @caughtexception;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void onFailure(java.lang.Throwable)>(v5);
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void cancel()>();
return;
label04:
v6 = 0;
if v4 == null goto label05;
v7 = v4;
goto label06;
label05:
v7 = <io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.lang.Object NO_KEY>;
label06:
v8 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.util.Map groups>;
v9 = interfaceinvoke v8.<java.util.Map: java.lang.Object get(java.lang.Object)>(v7);
if v9 != null goto label08;
v10 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: boolean isCancelled()>();
if v10 == 0 goto label07;
return;
label07:
v9 = staticinvoke <io.smallrye.mutiny.operators.multi.MultiGroupByOp$GroupedUnicast: io.smallrye.mutiny.operators.multi.MultiGroupByOp$GroupedUnicast createWith(java.lang.Object,io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor)>(v4, v0);
v11 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.util.Map groups>;
interfaceinvoke v11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v7, v9);
v12 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.util.concurrent.atomic.AtomicInteger groupCount>;
virtualinvoke v12.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
v6 = 1;
label08:
v13 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.util.function.Function valueSelector>;
v14 = interfaceinvoke v13.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v1);
if v14 != null goto label10;
v15 = new java.lang.NullPointerException;
specialinvoke v15.<java.lang.NullPointerException: void <init>(java.lang.String)>("The selector returned `null`");
throw v15;
label09:
v16 := @caughtexception;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void onFailure(java.lang.Throwable)>(v16);
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void cancel()>();
return;
label10:
virtualinvoke v9.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$GroupedUnicast: void onItem(java.lang.Object)>(v14);
if v6 == 0 goto label11;
v17 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.util.Queue queue>;
interfaceinvoke v17.<java.util.Queue: boolean offer(java.lang.Object)>(v9);
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: void drain()>();
label11:
return;
catch java.lang.Throwable from label01 to label02 with label03;
catch java.lang.Throwable from label08 to label09 with label09;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
java.util.Collection v6;
io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor v0;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v2, v4;
java.util.function.Consumer v7;
java.util.Map v5, v8;
java.util.concurrent.Flow$Subscription v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor;
v1 := @parameter0: java.lang.Throwable;
v2 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
v3 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.util.concurrent.Flow$Subscription getAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription)>(v2);
v4 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v3 == v4 goto label1;
v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: boolean done> = 1;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.util.Map groups>;
v6 = interfaceinvoke v5.<java.util.Map: java.util.Collection values()>();
v7 = staticinvoke <io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor$lambda_onFailure_0__2657: java.util.function.Consumer bootstrap$(java.lang.Throwable)>(v1);
interfaceinvoke v6.<java.util.Collection: void forEach(java.util.function.Consumer)>(v7);
v8 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.util.Map groups>;
interfaceinvoke v8.<java.util.Map: void clear()>();
v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.lang.Throwable failure> = v1;
v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: boolean finished> = 1;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: void drain()>();
goto label2;
label1:
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v1);
label2:
return;
}
public void onCompletion()
{
java.util.Collection v5;
io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor v0;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v1, v3;
java.util.function.Consumer v6;
java.util.Map v4, v7;
java.util.concurrent.Flow$Subscription v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor;
v1 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.util.concurrent.Flow$Subscription getAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription)>(v1);
v3 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v2 == v3 goto label1;
v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: boolean done> = 1;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.util.Map groups>;
v5 = interfaceinvoke v4.<java.util.Map: java.util.Collection values()>();
v6 = staticinvoke <io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor$onComplete__2658: java.util.function.Consumer bootstrap$()>();
interfaceinvoke v5.<java.util.Collection: void forEach(java.util.function.Consumer)>(v6);
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.util.Map groups>;
interfaceinvoke v7.<java.util.Map: void clear()>();
v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: boolean finished> = 1;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: void drain()>();
label1:
return;
}
public void request(long)
{
java.util.concurrent.atomic.AtomicLong v3;
byte v2;
io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor v0;
long v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 <= 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.util.concurrent.atomic.AtomicLong requested>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(java.util.concurrent.atomic.AtomicLong,long)>(v3, v1);
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: void drain()>();
label1:
return;
}
public void cancel()
{
java.util.concurrent.atomic.AtomicInteger v3;
int v4;
io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor v0;
java.util.concurrent.atomic.AtomicBoolean v1;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.util.concurrent.atomic.AtomicBoolean cancelled>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);
if v2 == 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.util.concurrent.atomic.AtomicInteger groupCount>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();
if v4 != 0 goto label1;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: void cancelUpstream()>();
label1:
return;
}
public void cancel(java.lang.Object)
{
io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor v0;
java.util.concurrent.atomic.AtomicInteger v4, v6;
java.util.Map v3;
int v5, v7;
java.lang.Object v1, v2;
java.util.Queue v8;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor;
v1 := @parameter0: java.lang.Object;
if v1 == null goto label1;
v2 = v1;
goto label2;
label1:
v2 = <io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.lang.Object NO_KEY>;
label2:
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.util.Map groups>;
interfaceinvoke v3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v2);
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.util.concurrent.atomic.AtomicInteger groupCount>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();
if v5 != 0 goto label3;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: void cancelUpstream()>();
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.util.concurrent.atomic.AtomicInteger wip>;
v7 = virtualinvoke v6.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
if v7 != 0 goto label3;
v8 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.util.Queue queue>;
interfaceinvoke v8.<java.util.Queue: void clear()>();
label3:
return;
}
private void drain()
{
long v21, v6, v7;
byte v14, v18, v19, v8;
java.util.concurrent.atomic.AtomicInteger v1, v22;
int v2, v23, v3;
io.smallrye.mutiny.subscription.MultiSubscriber v13;
boolean v11, v12, v15, v16, v17, v9;
io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor v0;
java.util.concurrent.atomic.AtomicLong v20, v5;
java.lang.Object v10;
java.util.Queue v4;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.util.concurrent.atomic.AtomicInteger wip>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
if v2 == 0 goto label01;
return;
label01:
v3 = 1;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.util.Queue queue>;
label02:
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.util.concurrent.atomic.AtomicLong requested>;
v6 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicLong: long get()>();
v7 = 0L;
label03:
v8 = v7 cmp v6;
if v8 == 0 goto label07;
v9 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: boolean finished>;
v10 = interfaceinvoke v4.<java.util.Queue: java.lang.Object poll()>();
if v10 != null goto label04;
v11 = 1;
goto label05;
label04:
v11 = 0;
label05:
v12 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: boolean isDoneOrCancelled(boolean,boolean,java.util.Queue)>(v9, v11, v4);
if v12 == 0 goto label06;
return;
label06:
if v11 != 0 goto label07;
v13 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v13.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v10);
v7 = v7 + 1L;
goto label03;
label07:
v14 = v7 cmp v6;
if v14 != 0 goto label08;
v15 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: boolean finished>;
v16 = interfaceinvoke v4.<java.util.Queue: boolean isEmpty()>();
v17 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: boolean isDoneOrCancelled(boolean,boolean,java.util.Queue)>(v15, v16, v4);
if v17 == 0 goto label08;
return;
label08:
v18 = v7 cmp 0L;
if v18 == 0 goto label10;
v19 = v6 cmp 9223372036854775807L;
if v19 == 0 goto label09;
v20 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.util.concurrent.atomic.AtomicLong requested>;
v21 = neg v7;
virtualinvoke v20.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(v21);
label09:
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void request(long)>(v7);
label10:
v22 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.util.concurrent.atomic.AtomicInteger wip>;
v23 = neg v3;
v3 = virtualinvoke v22.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(v23);
if v3 != 0 goto label02;
return;
}
boolean isDoneOrCancelled(boolean, boolean, java.util.Queue)
{
java.lang.Throwable v5;
io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor v0;
java.util.Queue v3;
io.smallrye.mutiny.subscription.MultiSubscriber v6, v7;
boolean v1, v2, v4;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor;
v1 := @parameter0: boolean;
v2 := @parameter1: boolean;
v3 := @parameter2: java.util.Queue;
v4 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: boolean isCancelled()>();
if v4 == 0 goto label1;
interfaceinvoke v3.<java.util.Queue: void clear()>();
return 1;
label1:
if v1 == 0 goto label3;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.lang.Throwable failure>;
if v5 == null goto label2;
interfaceinvoke v3.<java.util.Queue: void clear()>();
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v6.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v5);
return 1;
label2:
if v2 == 0 goto label3;
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v7.<io.smallrye.mutiny.subscription.MultiSubscriber: void onCompletion()>();
return 1;
label3:
return 0;
}
static void <clinit>()
{
java.lang.Object v0;
v0 = new java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
<io.smallrye.mutiny.operators.multi.MultiGroupByOp$MultiGroupByProcessor: java.lang.Object NO_KEY> = v0;
return;
}
}