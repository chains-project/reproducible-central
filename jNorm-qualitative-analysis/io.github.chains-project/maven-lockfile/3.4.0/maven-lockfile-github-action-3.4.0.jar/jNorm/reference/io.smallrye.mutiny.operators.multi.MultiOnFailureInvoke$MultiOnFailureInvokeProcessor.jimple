class io.smallrye.mutiny.operators.multi.MultiOnFailureInvoke$MultiOnFailureInvokeProcessor extends io.smallrye.mutiny.operators.multi.MultiOperatorProcessor
{
final io.smallrye.mutiny.operators.multi.MultiOnFailureInvoke this$0;
public void <init>(io.smallrye.mutiny.operators.multi.MultiOnFailureInvoke, io.smallrye.mutiny.subscription.MultiSubscriber)
{
io.smallrye.mutiny.operators.multi.MultiOnFailureInvoke$MultiOnFailureInvokeProcessor v0;
io.smallrye.mutiny.operators.multi.MultiOnFailureInvoke v1;
io.smallrye.mutiny.subscription.MultiSubscriber v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiOnFailureInvoke$MultiOnFailureInvokeProcessor;
v1 := @parameter0: io.smallrye.mutiny.operators.multi.MultiOnFailureInvoke;
v2 := @parameter1: io.smallrye.mutiny.subscription.MultiSubscriber;
v0.<io.smallrye.mutiny.operators.multi.MultiOnFailureInvoke$MultiOnFailureInvokeProcessor: io.smallrye.mutiny.operators.multi.MultiOnFailureInvoke this$0> = v1;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v2);
return;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1, v11;
io.smallrye.mutiny.operators.multi.MultiOnFailureInvoke v6, v9;
java.util.function.Predicate v7;
io.smallrye.mutiny.operators.multi.MultiOnFailureInvoke$MultiOnFailureInvokeProcessor v0;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v2, v5;
java.util.function.Consumer v10;
io.smallrye.mutiny.CompositeException v12;
java.lang.Throwable[] v13;
io.smallrye.mutiny.subscription.MultiSubscriber v4;
boolean v8;
java.util.concurrent.Flow$Subscription v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiOnFailureInvoke$MultiOnFailureInvokeProcessor;
v1 := @parameter0: java.lang.Throwable;
v2 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
v3 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOnFailureInvoke$MultiOnFailureInvokeProcessor: java.util.concurrent.Flow$Subscription getAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription)>(v2);
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiOnFailureInvoke$MultiOnFailureInvokeProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v5 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v3 == v5 goto label5;
label1:
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiOnFailureInvoke$MultiOnFailureInvokeProcessor: io.smallrye.mutiny.operators.multi.MultiOnFailureInvoke this$0>;
v7 = v6.<io.smallrye.mutiny.operators.multi.MultiOnFailureInvoke: java.util.function.Predicate predicate>;
v8 = interfaceinvoke v7.<java.util.function.Predicate: boolean test(java.lang.Object)>(v1);
if v8 == 0 goto label4;
v9 = v0.<io.smallrye.mutiny.operators.multi.MultiOnFailureInvoke$MultiOnFailureInvokeProcessor: io.smallrye.mutiny.operators.multi.MultiOnFailureInvoke this$0>;
v10 = v9.<io.smallrye.mutiny.operators.multi.MultiOnFailureInvoke: java.util.function.Consumer callback>;
interfaceinvoke v10.<java.util.function.Consumer: void accept(java.lang.Object)>(v1);
label2:
goto label4;
label3:
v11 := @caughtexception;
v12 = new io.smallrye.mutiny.CompositeException;
v13 = newarray (java.lang.Throwable)[2];
v13[0] = v1;
v13[1] = v11;
specialinvoke v12.<io.smallrye.mutiny.CompositeException: void <init>(java.lang.Throwable[])>(v13);
v1 = v12;
label4:
interfaceinvoke v4.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v1);
label5:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
}