public abstract class io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp$RepeatProcessor extends io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber
{
protected final io.smallrye.mutiny.Multi upstream;
protected final java.util.function.Predicate predicate;
protected final java.util.concurrent.atomic.AtomicInteger wip;
private final io.smallrye.mutiny.Uni delay;
protected long remaining;
protected long emitted;
public void <init>(io.smallrye.mutiny.Multi, io.smallrye.mutiny.subscription.MultiSubscriber, long, java.util.function.Predicate, io.smallrye.mutiny.Uni)
{
io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp$RepeatProcessor v0;
java.util.concurrent.atomic.AtomicInteger v6;
java.util.function.Predicate v4;
long v3;
io.smallrye.mutiny.Multi v1;
io.smallrye.mutiny.subscription.MultiSubscriber v2;
io.smallrye.mutiny.Uni v5;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp$RepeatProcessor;
v1 := @parameter0: io.smallrye.mutiny.Multi;
v2 := @parameter1: io.smallrye.mutiny.subscription.MultiSubscriber;
v3 := @parameter2: long;
v4 := @parameter3: java.util.function.Predicate;
v5 := @parameter4: io.smallrye.mutiny.Uni;
specialinvoke v0.<io.smallrye.mutiny.subscription.SwitchableSubscriptionSubscriber: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v2);
v6 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v6.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp$RepeatProcessor: java.util.concurrent.atomic.AtomicInteger wip> = v6;
v0.<io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp$RepeatProcessor: io.smallrye.mutiny.Multi upstream> = v1;
v0.<io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp$RepeatProcessor: java.util.function.Predicate predicate> = v4;
v0.<io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp$RepeatProcessor: long remaining> = v3;
v0.<io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp$RepeatProcessor: io.smallrye.mutiny.Uni delay> = v5;
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp$RepeatProcessor v0;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp$RepeatProcessor;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp$RepeatProcessor: void setOrSwitchUpstream(java.util.concurrent.Flow$Subscription)>(v1);
return;
}
protected void subscribeNext()
{
io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp$RepeatProcessor v0;
java.util.function.Consumer v4, v5;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.smallrye.mutiny.Uni v1, v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp$RepeatProcessor;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp$RepeatProcessor: io.smallrye.mutiny.Uni delay>;
if v1 != null goto label1;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp$RepeatProcessor: void drainLoop()>();
goto label2;
label1:
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp$RepeatProcessor: io.smallrye.mutiny.Uni delay>;
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = staticinvoke <io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp$RepeatProcessor$lambda_subscribeNext_0__2641: java.util.function.Consumer bootstrap$(io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp$RepeatProcessor)>(v0);
v5 = staticinvoke <io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp$RepeatProcessor$lambda_subscribeNext_1__2642: java.util.function.Consumer bootstrap$(io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp$RepeatProcessor)>(v0);
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer,java.util.function.Consumer)>(v4, v5);
label2:
return;
}
private void drainLoop()
{
long v5;
io.smallrye.mutiny.Multi v7;
io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp$RepeatProcessor v0;
byte v6;
java.util.concurrent.atomic.AtomicInteger v1, v8;
int v2, v3, v9;
boolean v4;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp$RepeatProcessor;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp$RepeatProcessor: java.util.concurrent.atomic.AtomicInteger wip>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
if v2 != 0 goto label3;
v3 = 1;
label1:
v4 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp$RepeatProcessor: boolean isCancelled()>();
if v4 != 0 goto label3;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp$RepeatProcessor: long emitted>;
v6 = v5 cmp 0L;
if v6 == 0 goto label2;
v0.<io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp$RepeatProcessor: long emitted> = 0L;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp$RepeatProcessor: void emitted(long)>(v5);
label2:
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp$RepeatProcessor: io.smallrye.mutiny.Multi upstream>;
interfaceinvoke v7.<io.smallrye.mutiny.Multi: void subscribe(java.util.concurrent.Flow$Subscriber)>(v0);
v8 = v0.<io.smallrye.mutiny.operators.multi.MultiRepeatUntilOp$RepeatProcessor: java.util.concurrent.atomic.AtomicInteger wip>;
v9 = neg v3;
v3 = virtualinvoke v8.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(v9);
if v3 != 0 goto label1;
label3:
return;
}
}