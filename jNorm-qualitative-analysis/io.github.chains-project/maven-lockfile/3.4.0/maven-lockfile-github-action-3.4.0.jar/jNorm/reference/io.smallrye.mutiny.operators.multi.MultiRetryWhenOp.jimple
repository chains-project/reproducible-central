public final class io.smallrye.mutiny.operators.multi.MultiRetryWhenOp extends io.smallrye.mutiny.operators.multi.AbstractMultiOperator
{
private final java.util.function.Function triggerStreamFactory;
private final java.util.function.Predicate onFailurePredicate;
public void <init>(io.smallrye.mutiny.Multi, java.util.function.Predicate, java.util.function.Function)
{
java.util.function.Predicate v2;
io.smallrye.mutiny.operators.multi.MultiRetryWhenOp v0;
java.util.function.Function v3;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiRetryWhenOp;
v1 := @parameter0: io.smallrye.mutiny.Multi;
v2 := @parameter1: java.util.function.Predicate;
v3 := @parameter2: java.util.function.Function;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.AbstractMultiOperator: void <init>(io.smallrye.mutiny.Multi)>(v1);
v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp: java.util.function.Predicate onFailurePredicate> = v2;
v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp: java.util.function.Function triggerStreamFactory> = v3;
return;
}
private static void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber, java.util.function.Predicate, java.util.function.Function, io.smallrye.mutiny.Multi)
{
java.lang.Throwable v12;
java.util.function.Predicate v1;
io.smallrye.mutiny.subscription.SerializedSubscriber v5, v8;
java.util.function.Function v2;
io.smallrye.mutiny.Multi v3;
io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator v9;
java.lang.NullPointerException v11;
java.util.concurrent.Flow$Processor v6;
io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$TriggerSubscriber v4;
java.lang.Object v10;
io.smallrye.mutiny.subscription.MultiSubscriber v0;
boolean v13;
java.util.concurrent.Flow$Subscription v7;
v0 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v1 := @parameter1: java.util.function.Predicate;
v2 := @parameter2: java.util.function.Function;
v3 := @parameter3: io.smallrye.mutiny.Multi;
v4 = new io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$TriggerSubscriber;
specialinvoke v4.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$TriggerSubscriber: void <init>()>();
v5 = new io.smallrye.mutiny.subscription.SerializedSubscriber;
v6 = v4.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$TriggerSubscriber: java.util.concurrent.Flow$Processor processor>;
specialinvoke v5.<io.smallrye.mutiny.subscription.SerializedSubscriber: void <init>(java.util.concurrent.Flow$Subscriber)>(v6);
v7 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: java.util.concurrent.Flow$Subscription empty()>();
interfaceinvoke v5.<java.util.concurrent.Flow$Subscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v7);
v8 = new io.smallrye.mutiny.subscription.SerializedSubscriber;
specialinvoke v8.<io.smallrye.mutiny.subscription.SerializedSubscriber: void <init>(java.util.concurrent.Flow$Subscriber)>(v0);
v9 = new io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator;
specialinvoke v9.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: void <init>(java.util.concurrent.Flow$Publisher,java.util.function.Predicate,io.smallrye.mutiny.subscription.MultiSubscriber,java.util.concurrent.Flow$Subscriber)>(v3, v1, v8, v5);
v4.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$TriggerSubscriber: io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator operator> = v9;
interfaceinvoke v8.<io.smallrye.mutiny.subscription.MultiSubscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v9);
label1:
v10 = interfaceinvoke v2.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v4);
if v10 != null goto label3;
v11 = new java.lang.NullPointerException;
specialinvoke v11.<java.lang.NullPointerException: void <init>(java.lang.String)>("The stream factory returned `null`");
throw v11;
label2:
v12 := @caughtexception;
interfaceinvoke v0.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v12);
return;
label3:
interfaceinvoke v10.<java.util.concurrent.Flow$Publisher: void subscribe(java.util.concurrent.Flow$Subscriber)>(v4);
v13 = virtualinvoke v9.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator: boolean isCancelled()>();
if v13 != 0 goto label4;
interfaceinvoke v3.<io.smallrye.mutiny.Multi: void subscribe(java.util.concurrent.Flow$Subscriber)>(v9);
label4:
return;
catch java.lang.Throwable from label1 to label2 with label2;
}
public void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)
{
java.util.function.Predicate v2;
io.smallrye.mutiny.operators.multi.MultiRetryWhenOp v0;
java.util.function.Function v3;
io.smallrye.mutiny.Multi v4;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiRetryWhenOp;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp: java.util.function.Predicate onFailurePredicate>;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp: java.util.function.Function triggerStreamFactory>;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiRetryWhenOp: io.smallrye.mutiny.Multi upstream>;
staticinvoke <io.smallrye.mutiny.operators.multi.MultiRetryWhenOp: void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber,java.util.function.Predicate,java.util.function.Function,io.smallrye.mutiny.Multi)>(v1, v2, v3, v4);
return;
}
}