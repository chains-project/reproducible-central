public final class io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor extends io.smallrye.mutiny.operators.multi.MultiOperatorProcessor
{
private final java.util.concurrent.atomic.AtomicReference other;
public void <init>(java.util.concurrent.Flow$Subscriber)
{
java.util.concurrent.Flow$Subscriber v1;
io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor v0;
io.smallrye.mutiny.subscription.SerializedSubscriber v2;
java.util.concurrent.atomic.AtomicReference v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor;
v1 := @parameter0: java.util.concurrent.Flow$Subscriber;
v2 = new io.smallrye.mutiny.subscription.SerializedSubscriber;
specialinvoke v2.<io.smallrye.mutiny.subscription.SerializedSubscriber: void <init>(java.util.concurrent.Flow$Subscriber)>(v1);
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v2);
v3 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v3.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor: java.util.concurrent.atomic.AtomicReference other> = v3;
return;
}
void setOtherSubscription(java.util.concurrent.Flow$Subscription)
{
io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor v0;
java.util.concurrent.atomic.AtomicReference v2;
boolean v3;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor: java.util.concurrent.atomic.AtomicReference other>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, v1);
if v3 == 0 goto label1;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void request(long)>(1L);
goto label2;
label1:
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void cancel()>();
label2:
return;
}
public void cancel()
{
java.util.concurrent.atomic.AtomicReference v1;
io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void cancel()>();
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor: java.util.concurrent.atomic.AtomicReference other>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void cancel(java.util.concurrent.atomic.AtomicReference)>(v1);
return;
}
public void onItem(java.lang.Object)
{
io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor v0;
java.lang.Object v1;
io.smallrye.mutiny.subscription.MultiSubscriber v3;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor: boolean isDone()>();
if v2 != 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v3.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v1);
label1:
return;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
java.util.concurrent.atomic.AtomicReference v2;
io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor;
v1 := @parameter0: java.lang.Throwable;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void onFailure(java.lang.Throwable)>(v1);
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor: java.util.concurrent.atomic.AtomicReference other>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void cancel(java.util.concurrent.atomic.AtomicReference)>(v2);
return;
}
public void onOtherFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor;
v1 := @parameter0: java.lang.Throwable;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void onFailure(java.lang.Throwable)>(v1);
return;
}
public void onCompletion()
{
java.util.concurrent.atomic.AtomicReference v1;
io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void onCompletion()>();
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor: java.util.concurrent.atomic.AtomicReference other>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void cancel(java.util.concurrent.atomic.AtomicReference)>(v1);
return;
}
public void onOtherCompletion()
{
io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void onCompletion()>();
return;
}
}