public final class io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilOtherSubscriber extends java.lang.Object implements io.smallrye.mutiny.subscription.MultiSubscriber, io.smallrye.mutiny.subscription.ContextSupport
{
final io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor main;
boolean once;
public void <init>(io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor)
{
io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilOtherSubscriber v0;
io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilOtherSubscriber;
v1 := @parameter0: io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilOtherSubscriber: io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor main> = v1;
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilOtherSubscriber v0;
io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor v2;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilOtherSubscriber;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilOtherSubscriber: io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor main>;
virtualinvoke v2.<io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor: void setOtherSubscription(java.util.concurrent.Flow$Subscription)>(v1);
return;
}
public void onItem(java.lang.Object)
{
io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilOtherSubscriber v0;
java.lang.Object v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilOtherSubscriber;
v1 := @parameter0: java.lang.Object;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilOtherSubscriber: void onCompletion()>();
return;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor v3;
io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilOtherSubscriber v0;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilOtherSubscriber;
v1 := @parameter0: java.lang.Throwable;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilOtherSubscriber: boolean once>;
if v2 == 0 goto label1;
return;
label1:
v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilOtherSubscriber: boolean once> = 1;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilOtherSubscriber: io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor main>;
virtualinvoke v3.<io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor: void onOtherFailure(java.lang.Throwable)>(v1);
return;
}
public void onCompletion()
{
io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilOtherSubscriber v0;
io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor v2;
boolean v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilOtherSubscriber;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilOtherSubscriber: boolean once>;
if v1 == 0 goto label1;
return;
label1:
v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilOtherSubscriber: boolean once> = 1;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilOtherSubscriber: io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor main>;
virtualinvoke v2.<io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor: void onOtherCompletion()>();
return;
}
public io.smallrye.mutiny.Context context()
{
io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilOtherSubscriber v0;
io.smallrye.mutiny.Context v2;
io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilOtherSubscriber;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilOtherSubscriber: io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor main>;
v2 = virtualinvoke v1.<io.smallrye.mutiny.operators.multi.MultiSelectFirstUntilOtherOp$TakeUntilMainProcessor: io.smallrye.mutiny.Context context()>();
return v2;
}
}