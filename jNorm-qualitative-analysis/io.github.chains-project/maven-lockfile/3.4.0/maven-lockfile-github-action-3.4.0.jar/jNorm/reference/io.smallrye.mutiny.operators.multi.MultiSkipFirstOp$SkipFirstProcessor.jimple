final class io.smallrye.mutiny.operators.multi.MultiSkipFirstOp$SkipFirstProcessor extends io.smallrye.mutiny.operators.multi.MultiOperatorProcessor
{
private final java.util.concurrent.atomic.AtomicLong remaining;
void <init>(io.smallrye.mutiny.subscription.MultiSubscriber, long)
{
java.util.concurrent.atomic.AtomicLong v3;
long v2;
io.smallrye.mutiny.operators.multi.MultiSkipFirstOp$SkipFirstProcessor v0;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSkipFirstOp$SkipFirstProcessor;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 := @parameter1: long;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v1);
v3 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v3.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(v2);
v0.<io.smallrye.mutiny.operators.multi.MultiSkipFirstOp$SkipFirstProcessor: java.util.concurrent.atomic.AtomicLong remaining> = v3;
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
java.util.concurrent.atomic.AtomicLong v4;
byte v6;
long v5;
io.smallrye.mutiny.operators.multi.MultiSkipFirstOp$SkipFirstProcessor v0;
io.smallrye.mutiny.subscription.MultiSubscriber v3;
boolean v2;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSkipFirstOp$SkipFirstProcessor;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiSkipFirstOp$SkipFirstProcessor: boolean compareAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription,java.util.concurrent.Flow$Subscription)>(null, v1);
if v2 == 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiSkipFirstOp$SkipFirstProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v3.<io.smallrye.mutiny.subscription.MultiSubscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v0);
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiSkipFirstOp$SkipFirstProcessor: java.util.concurrent.atomic.AtomicLong remaining>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicLong: long get()>();
v6 = v5 cmp 0L;
if v6 <= 0 goto label2;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void request(long)>(v5);
goto label2;
label1:
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void cancel()>();
label2:
return;
}
public void onItem(java.lang.Object)
{
java.util.concurrent.atomic.AtomicLong v2;
byte v4;
java.lang.Object v1;
long v3;
io.smallrye.mutiny.operators.multi.MultiSkipFirstOp$SkipFirstProcessor v0;
io.smallrye.mutiny.subscription.MultiSubscriber v5;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSkipFirstOp$SkipFirstProcessor;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiSkipFirstOp$SkipFirstProcessor: java.util.concurrent.atomic.AtomicLong remaining>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicLong: long getAndDecrement()>();
v4 = v3 cmp 0L;
if v4 > 0 goto label1;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiSkipFirstOp$SkipFirstProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v5.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v1);
label1:
return;
}
}