final class io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$OtherStreamTracker extends java.lang.Object implements io.smallrye.mutiny.subscription.MultiSubscriber, io.smallrye.mutiny.subscription.ContextSupport
{
private final io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$SkipUntilMainProcessor main;
void <init>(io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$SkipUntilMainProcessor)
{
io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$SkipUntilMainProcessor v1;
io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$OtherStreamTracker v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$OtherStreamTracker;
v1 := @parameter0: io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$SkipUntilMainProcessor;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$OtherStreamTracker: io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$SkipUntilMainProcessor main> = v1;
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$SkipUntilMainProcessor v2;
io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$OtherStreamTracker v0;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$OtherStreamTracker;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$OtherStreamTracker: io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$SkipUntilMainProcessor main>;
virtualinvoke v2.<io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$SkipUntilMainProcessor: void setOtherSubscription(java.util.concurrent.Flow$Subscription)>(v1);
return;
}
public void onItem(java.lang.Object)
{
java.lang.Object v1;
io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$SkipUntilMainProcessor v2;
io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$OtherStreamTracker v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$OtherStreamTracker;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$OtherStreamTracker: io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$SkipUntilMainProcessor main>;
virtualinvoke v2.<io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$SkipUntilMainProcessor: void open()>();
return;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$SkipUntilMainProcessor v2, v4;
io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$OtherStreamTracker v0;
boolean v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$OtherStreamTracker;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$OtherStreamTracker: io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$SkipUntilMainProcessor main>;
v3 = virtualinvoke v2.<io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$SkipUntilMainProcessor: boolean isOpened()>();
if v3 != 0 goto label1;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$OtherStreamTracker: io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$SkipUntilMainProcessor main>;
virtualinvoke v4.<io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$SkipUntilMainProcessor: void onFailure(java.lang.Throwable)>(v1);
label1:
return;
}
public void onCompletion()
{
io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$SkipUntilMainProcessor v1;
io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$OtherStreamTracker v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$OtherStreamTracker;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$OtherStreamTracker: io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$SkipUntilMainProcessor main>;
virtualinvoke v1.<io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$SkipUntilMainProcessor: void open()>();
return;
}
public io.smallrye.mutiny.Context context()
{
io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$SkipUntilMainProcessor v1;
io.smallrye.mutiny.Context v2;
io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$OtherStreamTracker v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$OtherStreamTracker;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$OtherStreamTracker: io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$SkipUntilMainProcessor main>;
v2 = virtualinvoke v1.<io.smallrye.mutiny.operators.multi.MultiSkipUntilOtherOp$SkipUntilMainProcessor: io.smallrye.mutiny.Context context()>();
return v2;
}
}