final class io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber$Tick extends java.lang.Object implements java.lang.Runnable
{
private final io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber parent;
void <init>(io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber)
{
io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber v1;
io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber$Tick v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber$Tick;
v1 := @parameter0: io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber$Tick: io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber parent> = v1;
return;
}
public void run()
{
io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder v4;
io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber v1;
io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber$Tick v0;
java.util.Queue v3;
boolean v2, v5;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber$Tick;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber$Tick: io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber parent>;
v2 = virtualinvoke v1.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: boolean isCancelled()>();
if v2 != 0 goto label1;
v3 = v1.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: java.util.Queue queue>;
interfaceinvoke v3.<java.util.Queue: boolean offer(java.lang.Object)>(v0);
goto label2;
label1:
v1.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: boolean terminated> = 1;
v4 = v1.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder timer>;
virtualinvoke v4.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder: void cancel()>();
label2:
v5 = virtualinvoke v1.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: boolean canStartWork()>();
if v5 == 0 goto label3;
virtualinvoke v1.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: void drainLoop()>();
label3:
return;
}
}