final class io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber extends io.smallrye.mutiny.operators.multi.MultiOperatorProcessor
{
private final java.time.Duration duration;
private final java.util.concurrent.ScheduledExecutorService scheduler;
private final java.util.Queue queue;
private java.lang.Throwable failure;
private io.smallrye.mutiny.operators.multi.processors.UnicastProcessor current;
private final java.util.concurrent.atomic.AtomicLong requested;
private final java.util.concurrent.atomic.AtomicInteger wip;
private final io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder timer;
volatile boolean done;
volatile boolean terminated;
void <init>(io.smallrye.mutiny.subscription.MultiSubscriber, java.time.Duration, java.util.concurrent.ScheduledExecutorService)
{
io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber v0;
io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder v6;
java.util.concurrent.atomic.AtomicLong v4;
java.util.concurrent.atomic.AtomicInteger v5;
java.time.Duration v2;
java.util.concurrent.ScheduledExecutorService v3;
java.util.Queue v7;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 := @parameter1: java.time.Duration;
v3 := @parameter2: java.util.concurrent.ScheduledExecutorService;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v1);
v4 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v4.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: java.util.concurrent.atomic.AtomicLong requested> = v4;
v5 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v5.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: java.util.concurrent.atomic.AtomicInteger wip> = v5;
v6 = new io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder;
specialinvoke v6.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder timer> = v6;
v7 = staticinvoke <io.smallrye.mutiny.helpers.queues.Queues: java.util.Queue createMpscQueue()>();
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: java.util.Queue queue> = v7;
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: java.time.Duration duration> = v2;
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: java.util.concurrent.ScheduledExecutorService scheduler> = v3;
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
long v7;
io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder v14;
java.util.concurrent.Future v15;
byte v10, v8;
io.smallrye.mutiny.subscription.BackPressureFailure v13;
io.smallrye.mutiny.operators.multi.processors.UnicastProcessor v5;
io.smallrye.mutiny.subscription.MultiSubscriber v12, v3, v9;
boolean v16, v2, v4;
java.util.concurrent.Flow$Subscription v1;
io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber v0;
java.util.concurrent.atomic.AtomicLong v11, v6;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: boolean compareAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription,java.util.concurrent.Flow$Subscription)>(null, v1);
if v2 == 0 goto label4;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v3.<io.smallrye.mutiny.subscription.MultiSubscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v0);
v4 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: boolean isCancelled()>();
if v4 == 0 goto label1;
return;
label1:
v5 = staticinvoke <io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor create()>();
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor current> = v5;
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: java.util.concurrent.atomic.AtomicLong requested>;
v7 = virtualinvoke v6.<java.util.concurrent.atomic.AtomicLong: long get()>();
v8 = v7 cmp 0L;
if v8 == 0 goto label2;
v9 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v9.<io.smallrye.mutiny.subscription.MultiSubscriber: void onNext(java.lang.Object)>(v5);
v10 = v7 cmp 9223372036854775807L;
if v10 == 0 goto label3;
v11 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: java.util.concurrent.atomic.AtomicLong requested>;
virtualinvoke v11.<java.util.concurrent.atomic.AtomicLong: long decrementAndGet()>();
goto label3;
label2:
v12 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v13 = new io.smallrye.mutiny.subscription.BackPressureFailure;
specialinvoke v13.<io.smallrye.mutiny.subscription.BackPressureFailure: void <init>(java.lang.String)>("no requests");
interfaceinvoke v12.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v13);
return;
label3:
v14 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder timer>;
v15 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: java.util.concurrent.Future newPeriod()>();
v16 = virtualinvoke v14.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder: boolean replace(java.util.concurrent.Future)>(v15);
if v16 == 0 goto label4;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void request(long)>(9223372036854775807L);
label4:
return;
}
java.util.concurrent.Future newPeriod()
{
java.lang.Throwable v9;
java.util.concurrent.ScheduledFuture v8;
io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber v0;
long v4, v6;
java.util.concurrent.TimeUnit v7;
java.util.concurrent.Future v11;
io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber$Tick v2;
java.time.Duration v3, v5;
java.util.concurrent.ScheduledExecutorService v1;
io.smallrye.mutiny.subscription.MultiSubscriber v10;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber;
label1:
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: java.util.concurrent.ScheduledExecutorService scheduler>;
v2 = new io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber$Tick;
specialinvoke v2.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber$Tick: void <init>(io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber)>(v0);
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: java.time.Duration duration>;
v4 = virtualinvoke v3.<java.time.Duration: long toMillis()>();
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: java.time.Duration duration>;
v6 = virtualinvoke v5.<java.time.Duration: long toMillis()>();
v7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
v8 = interfaceinvoke v1.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>(v2, v4, v6, v7);
label2:
return v8;
label3:
v9 := @caughtexception;
v10 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v10.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v9);
v11 = <io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder: java.util.concurrent.Future NONE>;
return v11;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void onItem(java.lang.Object)
{
io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber v0;
java.util.concurrent.atomic.AtomicInteger v3, v6;
io.smallrye.mutiny.operators.multi.processors.UnicastProcessor v5;
int v7;
java.lang.Object v1;
java.util.Queue v8;
boolean v2, v4, v9;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: boolean terminated>;
if v2 == 0 goto label1;
return;
label1:
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: java.util.concurrent.atomic.AtomicInteger wip>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(0, 1);
if v4 == 0 goto label2;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor current>;
virtualinvoke v5.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: void onNext(java.lang.Object)>(v1);
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: java.util.concurrent.atomic.AtomicInteger wip>;
v7 = virtualinvoke v6.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();
if v7 != 0 goto label3;
return;
label2:
v8 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: java.util.Queue queue>;
interfaceinvoke v8.<java.util.Queue: boolean offer(java.lang.Object)>(v1);
v9 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: boolean canStartWork()>();
if v9 != 0 goto label3;
return;
label3:
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: void drainLoop()>();
return;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber v0;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v2, v4;
io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder v7;
io.smallrye.mutiny.subscription.MultiSubscriber v6;
boolean v5;
java.util.concurrent.Flow$Subscription v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber;
v1 := @parameter0: java.lang.Throwable;
v2 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
v3 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: java.util.concurrent.Flow$Subscription getAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription)>(v2);
v4 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v3 == v4 goto label2;
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: boolean done> = 1;
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: java.lang.Throwable failure> = v1;
v5 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: boolean canStartWork()>();
if v5 == 0 goto label1;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: void drainLoop()>();
label1:
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v6.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v1);
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder timer>;
virtualinvoke v7.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder: void cancel()>();
goto label3;
label2:
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v1);
label3:
return;
}
public void onCompletion()
{
io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder v6;
io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber v0;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v1, v3;
io.smallrye.mutiny.subscription.MultiSubscriber v5;
boolean v4;
java.util.concurrent.Flow$Subscription v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber;
v1 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: java.util.concurrent.Flow$Subscription getAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription)>(v1);
v3 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
if v2 == v3 goto label2;
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: boolean done> = 1;
v4 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: boolean canStartWork()>();
if v4 == 0 goto label1;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: void drainLoop()>();
label1:
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v5.<io.smallrye.mutiny.subscription.MultiSubscriber: void onCompletion()>();
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder timer>;
virtualinvoke v6.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder: void cancel()>();
label2:
return;
}
public void request(long)
{
java.util.concurrent.atomic.AtomicLong v3;
byte v2;
io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber v0;
long v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 <= 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: java.util.concurrent.atomic.AtomicLong requested>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(java.util.concurrent.atomic.AtomicLong,long)>(v3, v1);
label1:
return;
}
void drainLoop()
{
java.lang.Throwable v12;
long v15;
io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder v13, v21, v6;
byte v16, v17;
io.smallrye.mutiny.subscription.BackPressureFailure v20;
java.util.concurrent.atomic.AtomicInteger v22;
io.smallrye.mutiny.operators.multi.processors.UnicastProcessor v3;
int v23, v4;
io.smallrye.mutiny.subscription.MultiSubscriber v2;
boolean v10, v11, v5, v7, v9;
io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber v0;
java.util.concurrent.atomic.AtomicLong v14, v18;
java.lang.Object v8;
java.util.Queue v1, v19;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: java.util.Queue queue>;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor current>;
v4 = 1;
label01:
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: boolean terminated>;
if v5 == 0 goto label02;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void cancel()>();
interfaceinvoke v1.<java.util.Queue: void clear()>();
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder timer>;
virtualinvoke v6.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder: void cancel()>();
return;
label02:
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: boolean done>;
v8 = interfaceinvoke v1.<java.util.Queue: java.lang.Object poll()>();
if v8 != null goto label03;
v9 = 1;
goto label04;
label03:
v9 = 0;
label04:
v10 = v9;
v11 = v8 instanceof io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber$Tick;
if v7 == 0 goto label08;
if v9 != 0 goto label05;
if v11 == 0 goto label08;
label05:
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor current> = null;
interfaceinvoke v1.<java.util.Queue: void clear()>();
v12 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: java.lang.Throwable failure>;
if v12 == null goto label06;
virtualinvoke v3.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: void onError(java.lang.Throwable)>(v12);
goto label07;
label06:
virtualinvoke v3.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: void onComplete()>();
label07:
v13 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder timer>;
virtualinvoke v13.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder: void cancel()>();
return;
label08:
if v10 != 0 goto label11;
if v11 == 0 goto label10;
virtualinvoke v3.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: void onComplete()>();
v3 = staticinvoke <io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor create()>();
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor current> = v3;
v14 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: java.util.concurrent.atomic.AtomicLong requested>;
v15 = virtualinvoke v14.<java.util.concurrent.atomic.AtomicLong: long get()>();
v16 = v15 cmp 0L;
if v16 == 0 goto label09;
interfaceinvoke v2.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v3);
v17 = v15 cmp 9223372036854775807L;
if v17 == 0 goto label01;
v18 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: java.util.concurrent.atomic.AtomicLong requested>;
virtualinvoke v18.<java.util.concurrent.atomic.AtomicLong: long decrementAndGet()>();
goto label01;
label09:
v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: io.smallrye.mutiny.operators.multi.processors.UnicastProcessor current> = null;
v19 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: java.util.Queue queue>;
interfaceinvoke v19.<java.util.Queue: void clear()>();
v20 = new io.smallrye.mutiny.subscription.BackPressureFailure;
specialinvoke v20.<io.smallrye.mutiny.subscription.BackPressureFailure: void <init>(java.lang.String)>("no requests");
interfaceinvoke v2.<io.smallrye.mutiny.subscription.MultiSubscriber: void onError(java.lang.Throwable)>(v20);
v21 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder timer>;
virtualinvoke v21.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$TaskHolder: void cancel()>();
return;
label10:
virtualinvoke v3.<io.smallrye.mutiny.operators.multi.processors.UnicastProcessor: void onNext(java.lang.Object)>(v8);
goto label01;
label11:
v22 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: java.util.concurrent.atomic.AtomicInteger wip>;
v23 = neg v4;
v4 = virtualinvoke v22.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(v23);
if v4 != 0 goto label01;
return;
}
boolean canStartWork()
{
java.util.concurrent.atomic.AtomicInteger v1;
io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber v0;
int v2;
boolean v3;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiWindowOnDurationOp$WindowTimeoutSubscriber: java.util.concurrent.atomic.AtomicInteger wip>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
if v2 != 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
}