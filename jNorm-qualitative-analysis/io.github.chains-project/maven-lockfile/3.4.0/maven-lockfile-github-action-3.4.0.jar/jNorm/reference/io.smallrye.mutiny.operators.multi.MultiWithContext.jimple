public class io.smallrye.mutiny.operators.multi.MultiWithContext extends io.smallrye.mutiny.operators.multi.AbstractMultiOperator
{
private final java.util.function.BiFunction builder;
public void <init>(io.smallrye.mutiny.Multi, java.util.function.BiFunction)
{
io.smallrye.mutiny.operators.multi.MultiWithContext v0;
io.smallrye.mutiny.Multi v1;
java.util.function.BiFunction v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiWithContext;
v1 := @parameter0: io.smallrye.mutiny.Multi;
v2 := @parameter1: java.util.function.BiFunction;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.AbstractMultiOperator: void <init>(io.smallrye.mutiny.Multi)>(v1);
v0.<io.smallrye.mutiny.operators.multi.MultiWithContext: java.util.function.BiFunction builder> = v2;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)
{
java.lang.Throwable v9;
io.smallrye.mutiny.groups.MultiSubscribe v12;
io.smallrye.mutiny.operators.multi.MultiWithContext v0;
java.util.function.BiFunction v4;
io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription v10, v7;
io.smallrye.mutiny.Context v3;
io.smallrye.mutiny.Multi v11, v5;
java.lang.NullPointerException v8;
java.lang.Object v6;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiWithContext;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "downstream");
v2 = v1 instanceof io.smallrye.mutiny.subscription.ContextSupport;
if v2 == 0 goto label1;
v3 = interfaceinvoke v1.<io.smallrye.mutiny.subscription.ContextSupport: io.smallrye.mutiny.Context context()>();
goto label2;
label1:
v3 = staticinvoke <io.smallrye.mutiny.Context: io.smallrye.mutiny.Context empty()>();
label2:
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiWithContext: java.util.function.BiFunction builder>;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiWithContext: io.smallrye.mutiny.Multi upstream>;
v6 = interfaceinvoke v4.<java.util.function.BiFunction: java.lang.Object apply(java.lang.Object,java.lang.Object)>(v5, v3);
if v6 != null goto label5;
v7 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
interfaceinvoke v1.<io.smallrye.mutiny.subscription.MultiSubscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v7);
v8 = new java.lang.NullPointerException;
specialinvoke v8.<java.lang.NullPointerException: void <init>(java.lang.String)>("The builder function returned null");
interfaceinvoke v1.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v8);
label3:
return;
label4:
v9 := @caughtexception;
v10 = <io.smallrye.mutiny.helpers.Subscriptions: io.smallrye.mutiny.helpers.Subscriptions$EmptySubscription CANCELLED>;
interfaceinvoke v1.<io.smallrye.mutiny.subscription.MultiSubscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v10);
interfaceinvoke v1.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v9);
return;
label5:
v11 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: io.smallrye.mutiny.Multi onMultiCreation(io.smallrye.mutiny.Multi)>(v6);
v12 = interfaceinvoke v11.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiSubscribe subscribe()>();
virtualinvoke v12.<io.smallrye.mutiny.groups.MultiSubscribe: io.smallrye.mutiny.subscription.MultiSubscriber withSubscriber(io.smallrye.mutiny.subscription.MultiSubscriber)>(v1);
return;
catch java.lang.Throwable from label2 to label3 with label4;
}
}