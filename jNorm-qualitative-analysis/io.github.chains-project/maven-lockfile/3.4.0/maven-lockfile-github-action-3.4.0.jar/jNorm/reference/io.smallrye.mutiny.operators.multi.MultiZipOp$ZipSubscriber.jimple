final class io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber extends java.lang.Object implements io.smallrye.mutiny.subscription.MultiSubscriber, java.util.concurrent.Flow$Subscription, io.smallrye.mutiny.subscription.ContextSupport
{
private final java.util.concurrent.atomic.AtomicReference upstream;
private final io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator parent;
private final int prefetch;
private final int limit;
private final io.smallrye.mutiny.Context context;
private java.util.Queue queue;
private long produced;
private volatile boolean done;
void <init>(io.smallrye.mutiny.Context, io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator, int)
{
io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator v2;
int v3, v5, v6;
io.smallrye.mutiny.Context v1;
java.util.concurrent.atomic.AtomicReference v4;
io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber;
v1 := @parameter0: io.smallrye.mutiny.Context;
v2 := @parameter1: io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator;
v3 := @parameter2: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v4 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v4.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber: java.util.concurrent.atomic.AtomicReference upstream> = v4;
v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber: io.smallrye.mutiny.Context context> = v1;
v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber: io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator parent> = v2;
v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber: int prefetch> = v3;
v5 = v3 >> 2;
v6 = v3 - v5;
v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber: int limit> = v6;
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
java.util.concurrent.atomic.AtomicReference v2;
java.util.function.Supplier v5;
io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber v0;
int v4, v7;
java.lang.Object v6;
boolean v3;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber: java.util.concurrent.atomic.AtomicReference upstream>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, v1);
if v3 == 0 goto label1;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber: int prefetch>;
v5 = staticinvoke <io.smallrye.mutiny.helpers.queues.Queues: java.util.function.Supplier get(int)>(v4);
v6 = interfaceinvoke v5.<java.util.function.Supplier: java.lang.Object get()>();
v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber: java.util.Queue queue> = v6;
v7 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber: int prefetch>;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void request(long)>(v7);
label1:
return;
}
public void onItem(java.lang.Object)
{
io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator v3;
java.lang.Object v1;
java.util.Queue v2;
io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber: java.util.Queue queue>;
interfaceinvoke v2.<java.util.Queue: boolean offer(java.lang.Object)>(v1);
v3 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber: io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator parent>;
specialinvoke v3.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: void drain()>();
return;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator v2;
io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber: io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator parent>;
virtualinvoke v2.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: void error(io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber,java.lang.Throwable)>(v0, v1);
return;
}
public void onCompletion()
{
io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator v1;
io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber;
v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber: boolean done> = 1;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber: io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator parent>;
specialinvoke v1.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: void drain()>();
return;
}
public void cancel()
{
java.util.concurrent.atomic.AtomicReference v1;
io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber: java.util.concurrent.atomic.AtomicReference upstream>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void cancel(java.util.concurrent.atomic.AtomicReference)>(v1);
return;
}
public void request(long)
{
long v1, v2, v3;
java.util.concurrent.atomic.AtomicReference v6;
io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber v0;
byte v5;
int v4;
java.lang.Object v7;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber;
v1 := @parameter0: long;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber: long produced>;
v3 = v2 + v1;
v4 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber: int limit>;
v5 = v3 cmp v4;
if v5 < 0 goto label1;
v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber: long produced> = 0L;
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber: java.util.concurrent.atomic.AtomicReference upstream>;
v7 = virtualinvoke v6.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
interfaceinvoke v7.<java.util.concurrent.Flow$Subscription: void request(long)>(v3);
goto label2;
label1:
v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber: long produced> = v3;
label2:
return;
}
public io.smallrye.mutiny.Context context()
{
io.smallrye.mutiny.Context v1;
io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber v0;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber;
v1 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipSubscriber: io.smallrye.mutiny.Context context>;
return v1;
}
}