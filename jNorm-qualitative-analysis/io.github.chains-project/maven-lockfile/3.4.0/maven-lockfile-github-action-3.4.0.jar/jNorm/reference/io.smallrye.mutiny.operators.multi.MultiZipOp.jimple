public final class io.smallrye.mutiny.operators.multi.MultiZipOp extends io.smallrye.mutiny.operators.AbstractMulti
{
private final java.util.List upstreams;
private final java.util.function.Function combinator;
private final int bufferSize;
private final boolean collectFailures;
public void <init>(java.lang.Iterable, java.util.function.Function, int, boolean)
{
java.util.function.Function v2;
java.lang.Iterable v1;
io.smallrye.mutiny.operators.multi.MultiZipOp v0;
java.util.function.Consumer v7;
java.util.List v6;
int v3;
java.util.LinkedList v5;
boolean v4;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiZipOp;
v1 := @parameter0: java.lang.Iterable;
v2 := @parameter1: java.util.function.Function;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
specialinvoke v0.<io.smallrye.mutiny.operators.AbstractMulti: void <init>()>();
v5 = new java.util.LinkedList;
specialinvoke v5.<java.util.LinkedList: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.MultiZipOp: java.util.List upstreams> = v5;
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp: java.util.List upstreams>;
virtualinvoke v6.<java.lang.Object: java.lang.Class getClass()>();
v7 = staticinvoke <io.smallrye.mutiny.operators.multi.MultiZipOp$add__2659: java.util.function.Consumer bootstrap$(java.util.List)>(v6);
interfaceinvoke v1.<java.lang.Iterable: void forEach(java.util.function.Consumer)>(v7);
v0.<io.smallrye.mutiny.operators.multi.MultiZipOp: java.util.function.Function combinator> = v2;
v0.<io.smallrye.mutiny.operators.multi.MultiZipOp: int bufferSize> = v3;
v0.<io.smallrye.mutiny.operators.multi.MultiZipOp: boolean collectFailures> = v4;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.MultiSubscriber)
{
io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator v4;
java.util.function.Function v5;
io.smallrye.mutiny.operators.multi.MultiZipOp v0;
java.util.List v10, v2, v6;
int v3, v7, v8;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
boolean v9;
v0 := @this: io.smallrye.mutiny.operators.multi.MultiZipOp;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp: java.util.List upstreams>;
v3 = interfaceinvoke v2.<java.util.List: int size()>();
if v3 != 0 goto label1;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void complete(java.util.concurrent.Flow$Subscriber)>(v1);
return;
label1:
v4 = new io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator;
v5 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp: java.util.function.Function combinator>;
v6 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp: java.util.List upstreams>;
v7 = interfaceinvoke v6.<java.util.List: int size()>();
v8 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp: int bufferSize>;
v9 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp: boolean collectFailures>;
specialinvoke v4.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber,java.util.function.Function,int,int,boolean)>(v1, v5, v7, v8, v9);
interfaceinvoke v1.<io.smallrye.mutiny.subscription.MultiSubscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v4);
v10 = v0.<io.smallrye.mutiny.operators.multi.MultiZipOp: java.util.List upstreams>;
virtualinvoke v4.<io.smallrye.mutiny.operators.multi.MultiZipOp$ZipCoordinator: void subscribe(java.util.List)>(v10);
return;
}
}