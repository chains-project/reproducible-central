final class io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable extends java.lang.Object implements java.lang.Runnable, java.util.concurrent.Flow$Subscription
{
private final io.smallrye.mutiny.subscription.MultiSubscriber actual;
private final java.util.concurrent.atomic.AtomicLong requested;
private final java.time.Duration period;
private final java.time.Duration initialDelay;
private final java.util.concurrent.ScheduledExecutorService executor;
private volatile boolean cancelled;
private volatile boolean once;
private final java.util.concurrent.atomic.AtomicLong count;
private java.util.concurrent.ScheduledFuture future;
void <init>(io.smallrye.mutiny.subscription.MultiSubscriber, java.time.Duration, java.time.Duration, java.util.concurrent.ScheduledExecutorService)
{
java.util.concurrent.atomic.AtomicLong v5, v6;
java.time.Duration v2, v3;
java.util.concurrent.ScheduledExecutorService v4;
io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable v0;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 := @parameter1: java.time.Duration;
v3 := @parameter2: java.time.Duration;
v4 := @parameter3: java.util.concurrent.ScheduledExecutorService;
specialinvoke v0.<java.lang.Object: void <init>()>();
v5 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v5.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable: java.util.concurrent.atomic.AtomicLong requested> = v5;
v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable: boolean once> = 1;
v6 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v6.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable: java.util.concurrent.atomic.AtomicLong count> = v6;
v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable: io.smallrye.mutiny.subscription.MultiSubscriber actual> = v1;
v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable: java.time.Duration period> = v2;
v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable: java.time.Duration initialDelay> = v3;
v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable: java.util.concurrent.ScheduledExecutorService executor> = v4;
return;
}
public void start()
{
java.lang.Throwable v14;
java.util.concurrent.ScheduledFuture v13, v8;
long v11, v4, v6;
io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable v0;
java.util.concurrent.RejectedExecutionException v15, v18;
java.time.Duration v1, v10, v3, v5;
java.util.concurrent.ScheduledExecutorService v2, v9;
io.smallrye.mutiny.subscription.MultiSubscriber v17;
boolean v16;
java.util.concurrent.TimeUnit v12, v7;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable;
label1:
entermonitor v0;
label2:
v1 = v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable: java.time.Duration initialDelay>;
if v1 == null goto label3;
v2 = v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable: java.util.concurrent.ScheduledExecutorService executor>;
v3 = v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable: java.time.Duration initialDelay>;
v4 = virtualinvoke v3.<java.time.Duration: long toMillis()>();
v5 = v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable: java.time.Duration period>;
v6 = virtualinvoke v5.<java.time.Duration: long toMillis()>();
v7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
v8 = interfaceinvoke v2.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>(v0, v4, v6, v7);
v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable: java.util.concurrent.ScheduledFuture future> = v8;
goto label4;
label3:
v9 = v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable: java.util.concurrent.ScheduledExecutorService executor>;
v10 = v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable: java.time.Duration period>;
v11 = virtualinvoke v10.<java.time.Duration: long toMillis()>();
v12 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
v13 = interfaceinvoke v9.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>(v0, 0L, v11, v12);
v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable: java.util.concurrent.ScheduledFuture future> = v13;
label4:
exitmonitor v0;
label5:
goto label8;
label6:
v14 := @caughtexception;
exitmonitor v0;
throw v14;
label7:
v15 := @caughtexception;
v16 = v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable: boolean cancelled>;
if v16 != 0 goto label8;
v17 = v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable: io.smallrye.mutiny.subscription.MultiSubscriber actual>;
v18 = new java.util.concurrent.RejectedExecutionException;
specialinvoke v18.<java.util.concurrent.RejectedExecutionException: void <init>(java.lang.Throwable)>(v15);
interfaceinvoke v17.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v18);
label8:
return;
catch java.lang.Throwable from label2 to label5 with label6;
catch java.util.concurrent.RejectedExecutionException from label1 to label7 with label7;
}
public void run()
{
long v10, v3, v7;
io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable v0;
byte v11, v4;
io.smallrye.mutiny.subscription.BackPressureFailure v14;
java.lang.Long v8;
java.lang.String v16;
io.smallrye.mutiny.subscription.MultiSubscriber v13, v5;
boolean v1;
java.util.concurrent.atomic.AtomicLong v12, v15, v2, v6, v9;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable;
v1 = v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable: boolean cancelled>;
if v1 != 0 goto label2;
v2 = v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable: java.util.concurrent.atomic.AtomicLong requested>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicLong: long get()>();
v4 = v3 cmp 0L;
if v4 == 0 goto label1;
v5 = v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable: io.smallrye.mutiny.subscription.MultiSubscriber actual>;
v6 = v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable: java.util.concurrent.atomic.AtomicLong count>;
v7 = virtualinvoke v6.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();
v8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v7);
interfaceinvoke v5.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v8);
v9 = v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable: java.util.concurrent.atomic.AtomicLong requested>;
v10 = virtualinvoke v9.<java.util.concurrent.atomic.AtomicLong: long get()>();
v11 = v10 cmp 9223372036854775807L;
if v11 == 0 goto label2;
v12 = v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable: java.util.concurrent.atomic.AtomicLong requested>;
virtualinvoke v12.<java.util.concurrent.atomic.AtomicLong: long decrementAndGet()>();
goto label2;
label1:
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable: void cancel()>();
v13 = v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable: io.smallrye.mutiny.subscription.MultiSubscriber actual>;
v14 = new io.smallrye.mutiny.subscription.BackPressureFailure;
v15 = v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable: java.util.concurrent.atomic.AtomicLong count>;
v16 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.util.concurrent.atomic.AtomicLong)>(v15) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Could not emit tick \u0001 due to lack of requests");
specialinvoke v14.<io.smallrye.mutiny.subscription.BackPressureFailure: void <init>(java.lang.String)>(v16);
interfaceinvoke v13.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v14);
label2:
return;
}
public void request(long)
{
java.util.concurrent.atomic.AtomicLong v3;
byte v2;
long v1;
io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable v0;
boolean v4;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 <= 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable: java.util.concurrent.atomic.AtomicLong requested>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(java.util.concurrent.atomic.AtomicLong,long)>(v3, v1);
label1:
v4 = v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable: boolean once>;
if v4 == 0 goto label2;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable: void start()>();
v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable: boolean once> = 0;
label2:
return;
}
public synchronized void cancel()
{
java.util.concurrent.ScheduledFuture v1, v2;
io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable v0;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable;
v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable: boolean cancelled> = 1;
v1 = v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable: java.util.concurrent.ScheduledFuture future>;
if v1 == null goto label1;
v2 = v0.<io.smallrye.mutiny.operators.multi.builders.IntervalMulti$IntervalRunnable: java.util.concurrent.ScheduledFuture future>;
interfaceinvoke v2.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(0);
label1:
return;
}
}