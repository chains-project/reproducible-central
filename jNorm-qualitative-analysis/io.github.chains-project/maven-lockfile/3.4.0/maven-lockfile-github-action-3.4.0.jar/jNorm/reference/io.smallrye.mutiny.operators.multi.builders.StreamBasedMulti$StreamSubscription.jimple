class io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription extends java.lang.Object implements java.util.concurrent.Flow$Subscription
{
private final java.util.Iterator iterator;
private final java.lang.AutoCloseable closeable;
private final java.util.concurrent.atomic.AtomicLong requested;
private final io.smallrye.mutiny.subscription.MultiSubscriber downstream;
private volatile boolean cancelled;
void <init>(io.smallrye.mutiny.subscription.MultiSubscriber, java.util.Iterator, java.lang.AutoCloseable)
{
java.util.concurrent.atomic.AtomicLong v4;
java.util.Iterator v2;
io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription v0;
java.lang.AutoCloseable v3;
io.smallrye.mutiny.subscription.MultiSubscriber v1;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription;
v1 := @parameter0: io.smallrye.mutiny.subscription.MultiSubscriber;
v2 := @parameter1: java.util.Iterator;
v3 := @parameter2: java.lang.AutoCloseable;
specialinvoke v0.<java.lang.Object: void <init>()>();
v4 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v4.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription: java.util.concurrent.atomic.AtomicLong requested> = v4;
v0.<io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription: java.util.Iterator iterator> = v2;
v0.<io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription: java.lang.AutoCloseable closeable> = v3;
v0.<io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription: io.smallrye.mutiny.subscription.MultiSubscriber downstream> = v1;
return;
}
public void request(long)
{
io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription v0;
long v1, v4;
java.lang.IllegalArgumentException v7;
java.util.concurrent.atomic.AtomicLong v3;
byte v2, v5;
io.smallrye.mutiny.subscription.MultiSubscriber v6;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 <= 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription: java.util.concurrent.atomic.AtomicLong requested>;
v4 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(java.util.concurrent.atomic.AtomicLong,long)>(v3, v1);
v5 = v4 cmp 0L;
if v5 != 0 goto label2;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription: void pull(long)>(v1);
goto label2;
label1:
v6 = v0.<io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v7 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: java.lang.IllegalArgumentException getInvalidRequestException()>();
interfaceinvoke v6.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v7);
label2:
return;
}
public void pull(long)
{
java.lang.Throwable v8;
io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription v0;
long v1, v13, v2;
java.lang.AutoCloseable v4;
java.lang.NullPointerException v7;
byte v14, v16;
io.smallrye.mutiny.subscription.MultiSubscriber v10, v9;
boolean v11, v12, v18, v3;
java.util.Iterator v5;
java.util.concurrent.atomic.AtomicLong v15, v17, v19;
java.lang.Object v6;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription;
v1 := @parameter0: long;
v2 = 0L;
label1:
v3 = v0.<io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription: boolean cancelled>;
if v3 == 0 goto label2;
v4 = v0.<io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription: java.lang.AutoCloseable closeable>;
staticinvoke <io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti: void closeQuietly(java.lang.AutoCloseable)>(v4);
return;
label2:
v5 = v0.<io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription: java.util.Iterator iterator>;
v6 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
if v6 != null goto label4;
v7 = new java.lang.NullPointerException;
specialinvoke v7.<java.lang.NullPointerException: void <init>(java.lang.String)>("The stream iterator produced `null`");
throw v7;
label3:
v8 := @caughtexception;
v9 = v0.<io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v9.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v8);
v0.<io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription: boolean cancelled> = 1;
goto label1;
label4:
v10 = v0.<io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v10.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v6);
v11 = v0.<io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription: boolean cancelled>;
if v11 != 0 goto label1;
v12 = specialinvoke v0.<io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription: boolean handleCompletion()>();
if v12 != 0 goto label1;
v13 = v2 + 1L;
v2 = v13;
v14 = v13 cmp v1;
if v14 != 0 goto label1;
v15 = v0.<io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription: java.util.concurrent.atomic.AtomicLong requested>;
v1 = virtualinvoke v15.<java.util.concurrent.atomic.AtomicLong: long get()>();
v16 = v13 cmp v1;
if v16 != 0 goto label1;
v17 = v0.<io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription: java.util.concurrent.atomic.AtomicLong requested>;
v18 = virtualinvoke v17.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>(v1, 0L);
if v18 != 0 goto label5;
v19 = v0.<io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription: java.util.concurrent.atomic.AtomicLong requested>;
v1 = virtualinvoke v19.<java.util.concurrent.atomic.AtomicLong: long get()>();
goto label1;
label5:
return;
catch java.lang.Throwable from label2 to label3 with label3;
}
private boolean handleCompletion()
{
java.lang.Throwable v4;
java.util.Iterator v1;
io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription v0;
io.smallrye.mutiny.subscription.MultiSubscriber v3, v5;
boolean v2;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription;
label1:
v1 = v0.<io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription: java.util.Iterator iterator>;
v2 = interfaceinvoke v1.<java.util.Iterator: boolean hasNext()>();
if v2 != 0 goto label4;
v3 = v0.<io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v3.<io.smallrye.mutiny.subscription.MultiSubscriber: void onCompletion()>();
v0.<io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription: boolean cancelled> = 1;
label2:
return 1;
label3:
v4 := @caughtexception;
v5 = v0.<io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v5.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v4);
v0.<io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription: boolean cancelled> = 1;
return 1;
label4:
return 0;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void cancel()
{
io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription v0;
v0 := @this: io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription;
v0.<io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription: boolean cancelled> = 1;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.builders.StreamBasedMulti$StreamSubscription: void request(long)>(1L);
return;
}
}