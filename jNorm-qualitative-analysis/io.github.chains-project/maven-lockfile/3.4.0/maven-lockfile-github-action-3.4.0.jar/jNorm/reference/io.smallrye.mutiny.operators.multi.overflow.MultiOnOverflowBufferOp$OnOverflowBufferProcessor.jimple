class io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor extends io.smallrye.mutiny.operators.multi.MultiOperatorProcessor
{
private final java.util.Queue queue;
java.lang.Throwable failure;
private final java.util.concurrent.atomic.AtomicLong requested;
private final java.util.concurrent.atomic.AtomicInteger wip;
volatile boolean cancelled;
volatile boolean done;
final io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp this$0;
void <init>(io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp, io.smallrye.mutiny.subscription.MultiSubscriber, int, boolean)
{
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp v1;
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor v0;
java.util.function.Supplier v7;
java.util.concurrent.atomic.AtomicLong v5;
java.util.concurrent.atomic.AtomicInteger v6;
int v3;
java.lang.Object v8;
io.smallrye.mutiny.subscription.MultiSubscriber v2;
boolean v4;
v0 := @this: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor;
v1 := @parameter0: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp;
v2 := @parameter1: io.smallrye.mutiny.subscription.MultiSubscriber;
v3 := @parameter2: int;
v4 := @parameter3: boolean;
v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp this$0> = v1;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void <init>(io.smallrye.mutiny.subscription.MultiSubscriber)>(v2);
v5 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v5.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: java.util.concurrent.atomic.AtomicLong requested> = v5;
v6 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v6.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: java.util.concurrent.atomic.AtomicInteger wip> = v6;
if v4 == 0 goto label1;
v7 = staticinvoke <io.smallrye.mutiny.helpers.queues.Queues: java.util.function.Supplier unbounded(int)>(v3);
v8 = interfaceinvoke v7.<java.util.function.Supplier: java.lang.Object get()>();
goto label2;
label1:
v8 = staticinvoke <io.smallrye.mutiny.helpers.queues.Queues: java.util.Queue createStrictSizeQueue(int)>(v3);
label2:
v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: java.util.Queue queue> = v8;
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor v0;
io.smallrye.mutiny.subscription.MultiSubscriber v3;
boolean v2;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: boolean compareAndSetUpstreamSubscription(java.util.concurrent.Flow$Subscription,java.util.concurrent.Flow$Subscription)>(null, v1);
if v2 == 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v3.<io.smallrye.mutiny.subscription.MultiSubscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v0);
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void request(long)>(9223372036854775807L);
goto label2;
label1:
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void cancel()>();
label2:
return;
}
public void onItem(java.lang.Object)
{
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp v5;
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor v0;
io.smallrye.mutiny.subscription.BackPressureFailure v4;
java.lang.Object v1;
java.util.Queue v2;
java.util.function.Function v6;
boolean v3;
v0 := @this: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: java.util.Queue queue>;
v3 = interfaceinvoke v2.<java.util.Queue: boolean offer(java.lang.Object)>(v1);
if v3 != 0 goto label2;
v4 = new io.smallrye.mutiny.subscription.BackPressureFailure;
specialinvoke v4.<io.smallrye.mutiny.subscription.BackPressureFailure: void <init>(java.lang.String)>("The overflow buffer is full, which is due to the upstream sending too many items w.r.t. the downstream capacity and/or the downstream not consuming items fast enough");
v5 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp this$0>;
v6 = v5.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp: java.util.function.Function dropUniMapper>;
if v6 == null goto label1;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: void notifyOnOverflowCall(java.lang.Object,io.smallrye.mutiny.subscription.BackPressureFailure)>(v1, v4);
goto label3;
label1:
specialinvoke v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: void notifyOnOverflowInvoke(java.lang.Object,io.smallrye.mutiny.subscription.BackPressureFailure)>(v1, v4);
goto label3;
label2:
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: void drain()>();
label3:
return;
}
private void notifyOnOverflowInvoke(java.lang.Object, io.smallrye.mutiny.subscription.BackPressureFailure)
{
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp v3, v5;
java.lang.Throwable v7;
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor v0;
java.util.function.Consumer v4, v6;
io.smallrye.mutiny.subscription.BackPressureFailure v2;
java.lang.Object v1;
v0 := @this: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: io.smallrye.mutiny.subscription.BackPressureFailure;
v3 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp this$0>;
v4 = v3.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp: java.util.function.Consumer dropConsumer>;
if v4 == null goto label4;
label1:
v5 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp this$0>;
v6 = v5.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp: java.util.function.Consumer dropConsumer>;
interfaceinvoke v6.<java.util.function.Consumer: void accept(java.lang.Object)>(v1);
label2:
goto label4;
label3:
v7 := @caughtexception;
virtualinvoke v2.<io.smallrye.mutiny.subscription.BackPressureFailure: void addSuppressed(java.lang.Throwable)>(v7);
label4:
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: void onFailure(java.lang.Throwable)>(v2);
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
private void notifyOnOverflowCall(java.lang.Object, io.smallrye.mutiny.subscription.BackPressureFailure)
{
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp v4;
java.lang.Throwable v11;
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor v0;
java.util.function.Function v5;
java.util.function.Consumer v10, v9;
io.smallrye.mutiny.subscription.BackPressureFailure v2;
io.smallrye.mutiny.groups.UniSubscribe v8;
java.lang.Object v1, v6, v7;
io.smallrye.mutiny.subscription.MultiSubscriber v3;
v0 := @this: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: io.smallrye.mutiny.subscription.BackPressureFailure;
v3 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void cancel()>();
label1:
v4 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp this$0>;
v5 = v4.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp: java.util.function.Function dropUniMapper>;
v6 = interfaceinvoke v5.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v1);
v7 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v6, "uni");
v8 = interfaceinvoke v7.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v9 = staticinvoke <io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor$lambda_notifyOnOverflowCall_0__2695: java.util.function.Consumer bootstrap$(io.smallrye.mutiny.subscription.MultiSubscriber,io.smallrye.mutiny.subscription.BackPressureFailure)>(v3, v2);
v10 = staticinvoke <io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor$lambda_notifyOnOverflowCall_1__2696: java.util.function.Consumer bootstrap$(io.smallrye.mutiny.subscription.BackPressureFailure,io.smallrye.mutiny.subscription.MultiSubscriber)>(v2, v3);
virtualinvoke v8.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer,java.util.function.Consumer)>(v9, v10);
label2:
goto label4;
label3:
v11 := @caughtexception;
virtualinvoke v2.<io.smallrye.mutiny.subscription.BackPressureFailure: void addSuppressed(java.lang.Throwable)>(v11);
interfaceinvoke v3.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v2);
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor;
v1 := @parameter0: java.lang.Throwable;
v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: java.lang.Throwable failure> = v1;
v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: boolean done> = 1;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: void drain()>();
return;
}
public void onCompletion()
{
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor;
v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: boolean done> = 1;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: void drain()>();
return;
}
public void request(long)
{
java.util.concurrent.atomic.AtomicLong v3;
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor v0;
byte v2;
long v1;
v0 := @this: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 <= 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: java.util.concurrent.atomic.AtomicLong requested>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(java.util.concurrent.atomic.AtomicLong,long)>(v3, v1);
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: void drain()>();
label1:
return;
}
public void cancel()
{
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor v0;
java.util.concurrent.atomic.AtomicInteger v2;
int v3;
java.util.Queue v4;
boolean v1;
v0 := @this: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor;
v1 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: boolean cancelled>;
if v1 != 0 goto label1;
v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: boolean cancelled> = 1;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void cancel()>();
v2 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: java.util.concurrent.atomic.AtomicInteger wip>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
if v3 != 0 goto label1;
v4 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: java.util.Queue queue>;
interfaceinvoke v4.<java.util.Queue: void clear()>();
label1:
return;
}
void drain()
{
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor v0;
long v10, v24, v8;
byte v11, v17, v21, v22;
java.util.concurrent.atomic.AtomicInteger v1, v25;
int v2, v26, v3;
io.smallrye.mutiny.subscription.MultiSubscriber v16;
boolean v12, v14, v15, v18, v19, v20, v5, v6, v7;
java.util.concurrent.atomic.AtomicLong v23, v9;
java.lang.Object v13;
java.util.Queue v4;
v0 := @this: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor;
v1 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: java.util.concurrent.atomic.AtomicInteger wip>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
if v2 != 0 goto label10;
v3 = 1;
v4 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: java.util.Queue queue>;
label01:
v5 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: boolean done>;
v6 = interfaceinvoke v4.<java.util.Queue: boolean isEmpty()>();
v7 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: boolean checkTerminated(boolean,boolean)>(v5, v6);
if v7 == 0 goto label02;
return;
label02:
v8 = 0L;
v9 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: java.util.concurrent.atomic.AtomicLong requested>;
v10 = virtualinvoke v9.<java.util.concurrent.atomic.AtomicLong: long get()>();
label03:
v11 = v8 cmp v10;
if v11 == 0 goto label07;
v12 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: boolean done>;
v13 = interfaceinvoke v4.<java.util.Queue: java.lang.Object poll()>();
if v13 != null goto label04;
v14 = 1;
goto label05;
label04:
v14 = 0;
label05:
v15 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: boolean checkTerminated(boolean,boolean)>(v12, v14);
if v15 == 0 goto label06;
return;
label06:
if v14 != 0 goto label07;
v16 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v16.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v13);
v8 = v8 + 1L;
goto label03;
label07:
v17 = v8 cmp v10;
if v17 != 0 goto label08;
v18 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: boolean done>;
v19 = interfaceinvoke v4.<java.util.Queue: boolean isEmpty()>();
v20 = virtualinvoke v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: boolean checkTerminated(boolean,boolean)>(v18, v19);
if v20 == 0 goto label08;
return;
label08:
v21 = v8 cmp 0L;
if v21 == 0 goto label09;
v22 = v10 cmp 9223372036854775807L;
if v22 == 0 goto label09;
v23 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: java.util.concurrent.atomic.AtomicLong requested>;
v24 = neg v8;
virtualinvoke v23.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(v24);
label09:
v25 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: java.util.concurrent.atomic.AtomicInteger wip>;
v26 = neg v3;
v3 = virtualinvoke v25.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(v26);
if v3 != 0 goto label01;
label10:
return;
}
boolean checkTerminated(boolean, boolean)
{
java.lang.Throwable v10, v11, v5, v7;
io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor v0;
java.util.Queue v4, v6;
io.smallrye.mutiny.subscription.MultiSubscriber v9;
boolean v1, v2, v3, v8;
v0 := @this: io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor;
v1 := @parameter0: boolean;
v2 := @parameter1: boolean;
v3 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: boolean cancelled>;
if v3 == 0 goto label1;
v4 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: java.util.Queue queue>;
interfaceinvoke v4.<java.util.Queue: void clear()>();
return 1;
label1:
if v1 == 0 goto label5;
v5 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: java.lang.Throwable failure>;
if v5 == null goto label4;
v6 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: java.util.Queue queue>;
interfaceinvoke v6.<java.util.Queue: void clear()>();
v7 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: java.lang.Throwable failure>;
v8 = v7 instanceof io.smallrye.mutiny.subscription.BackPressureFailure;
if v8 == 0 goto label2;
v9 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void cancel()>();
v10 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: java.lang.Throwable failure>;
interfaceinvoke v9.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v10);
goto label3;
label2:
v11 = v0.<io.smallrye.mutiny.operators.multi.overflow.MultiOnOverflowBufferOp$OnOverflowBufferProcessor: java.lang.Throwable failure>;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void onFailure(java.lang.Throwable)>(v11);
label3:
return 1;
label4:
if v2 == 0 goto label5;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.MultiOperatorProcessor: void onCompletion()>();
return 1;
label5:
return 0;
}
}