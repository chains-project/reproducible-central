final class io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription extends java.lang.Object implements java.util.concurrent.Flow$Subscription
{
private final java.util.concurrent.Flow$Subscriber downstream;
private final io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor parent;
private final java.util.concurrent.atomic.AtomicLong requests;
void <init>(java.util.concurrent.Flow$Subscriber, io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor)
{
java.util.concurrent.Flow$Subscriber v1;
java.util.concurrent.atomic.AtomicLong v3;
io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor v2;
io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription v0;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription;
v1 := @parameter0: java.util.concurrent.Flow$Subscriber;
v2 := @parameter1: io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v3.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription: java.util.concurrent.atomic.AtomicLong requests> = v3;
v0.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription: java.util.concurrent.Flow$Subscriber downstream> = v1;
v0.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription: io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor parent> = v2;
return;
}
public void onNext(java.lang.Object)
{
long v3;
io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription v0;
java.util.concurrent.Flow$Subscriber v6, v8;
java.util.concurrent.atomic.AtomicLong v2, v7;
byte v4, v5;
io.smallrye.mutiny.subscription.BackPressureFailure v9;
java.lang.Object v1;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription: java.util.concurrent.atomic.AtomicLong requests>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicLong: long get()>();
v4 = v3 cmp -9223372036854775808L;
if v4 != 0 goto label1;
return;
label1:
v5 = v3 cmp 0L;
if v5 == 0 goto label2;
v6 = v0.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription: java.util.concurrent.Flow$Subscriber downstream>;
interfaceinvoke v6.<java.util.concurrent.Flow$Subscriber: void onNext(java.lang.Object)>(v1);
v7 = v0.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription: java.util.concurrent.atomic.AtomicLong requests>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long producedAndHandleAlreadyCancelled(java.util.concurrent.atomic.AtomicLong,long)>(v7, 1L);
goto label3;
label2:
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription: void cancel()>();
v8 = v0.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription: java.util.concurrent.Flow$Subscriber downstream>;
v9 = new io.smallrye.mutiny.subscription.BackPressureFailure;
specialinvoke v9.<io.smallrye.mutiny.subscription.BackPressureFailure: void <init>(java.lang.String)>("Could not emit item downstream due to lack of requests");
interfaceinvoke v8.<java.util.concurrent.Flow$Subscriber: void onError(java.lang.Throwable)>(v9);
label3:
return;
}
public void onError(java.lang.Throwable)
{
java.lang.Throwable v1;
java.util.concurrent.Flow$Subscriber v5;
java.util.concurrent.atomic.AtomicLong v2;
byte v4;
long v3;
io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription v0;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription: java.util.concurrent.atomic.AtomicLong requests>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicLong: long get()>();
v4 = v3 cmp -9223372036854775808L;
if v4 == 0 goto label1;
v5 = v0.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription: java.util.concurrent.Flow$Subscriber downstream>;
interfaceinvoke v5.<java.util.concurrent.Flow$Subscriber: void onError(java.lang.Throwable)>(v1);
label1:
return;
}
public void onComplete()
{
java.util.concurrent.Flow$Subscriber v4;
java.util.concurrent.atomic.AtomicLong v1;
byte v3;
long v2;
io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription v0;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription;
v1 = v0.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription: java.util.concurrent.atomic.AtomicLong requests>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: long get()>();
v3 = v2 cmp -9223372036854775808L;
if v3 == 0 goto label1;
v4 = v0.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription: java.util.concurrent.Flow$Subscriber downstream>;
interfaceinvoke v4.<java.util.concurrent.Flow$Subscriber: void onComplete()>();
label1:
return;
}
public void request(long)
{
java.util.concurrent.atomic.AtomicLong v3;
byte v2;
long v1;
io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription v0;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 <= 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription: java.util.concurrent.atomic.AtomicLong requests>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long addAndHandledAlreadyCancelled(java.util.concurrent.atomic.AtomicLong,long)>(v3, v1);
label1:
return;
}
public void cancel()
{
java.util.concurrent.atomic.AtomicLong v1;
byte v3;
io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor v4;
long v2;
io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription v0;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription;
v1 = v0.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription: java.util.concurrent.atomic.AtomicLong requests>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: long getAndSet(long)>(-9223372036854775808L);
v3 = v2 cmp -9223372036854775808L;
if v3 == 0 goto label1;
v4 = v0.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription: io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor parent>;
virtualinvoke v4.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor: void remove(io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription)>(v0);
label1:
return;
}
public boolean isCancelled()
{
java.util.concurrent.atomic.AtomicLong v1;
byte v3;
long v2;
io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription v0;
boolean v4;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription;
v1 = v0.<io.smallrye.mutiny.operators.multi.processors.BroadcastProcessor$BroadcastSubscription: java.util.concurrent.atomic.AtomicLong requests>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: long get()>();
v3 = v2 cmp -9223372036854775808L;
if v3 != 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
}