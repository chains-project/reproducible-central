public class io.smallrye.mutiny.operators.multi.processors.SerializedProcessor extends java.lang.Object implements java.util.concurrent.Flow$Processor
{
private final java.util.concurrent.Flow$Processor actual;
boolean emitting;
private java.util.List queue;
volatile boolean done;
public void <init>(java.util.concurrent.Flow$Processor)
{
java.util.concurrent.Flow$Processor v1;
io.smallrye.mutiny.operators.multi.processors.SerializedProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.SerializedProcessor;
v1 := @parameter0: java.util.concurrent.Flow$Processor;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: java.util.concurrent.Flow$Processor actual> = v1;
return;
}
public void subscribe(java.util.concurrent.Flow$Subscriber)
{
java.util.concurrent.Flow$Processor v2;
java.util.concurrent.Flow$Subscriber v1;
io.smallrye.mutiny.operators.multi.processors.SerializedProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.SerializedProcessor;
v1 := @parameter0: java.util.concurrent.Flow$Subscriber;
v2 = v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: java.util.concurrent.Flow$Processor actual>;
interfaceinvoke v2.<java.util.concurrent.Flow$Processor: void subscribe(java.util.concurrent.Flow$Subscriber)>(v1);
return;
}
public void onSubscribe(java.util.concurrent.Flow$Subscription)
{
java.lang.Throwable v8;
io.smallrye.mutiny.operators.multi.processors.SerializedProcessor$SubscriptionEvent v7;
java.util.concurrent.Flow$Processor v9;
java.util.List v6;
boolean v2, v3, v4, v5;
io.smallrye.mutiny.operators.multi.processors.SerializedProcessor v0;
java.util.concurrent.Flow$Subscription v1;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.SerializedProcessor;
v1 := @parameter0: java.util.concurrent.Flow$Subscription;
v2 = v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: boolean done>;
if v2 != 0 goto label08;
entermonitor v0;
label01:
v3 = v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: boolean done>;
if v3 == 0 goto label02;
v4 = 1;
goto label05;
label02:
v5 = v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: boolean emitting>;
if v5 == 0 goto label04;
v6 = specialinvoke v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: java.util.List getOrCreateQueue()>();
v7 = new io.smallrye.mutiny.operators.multi.processors.SerializedProcessor$SubscriptionEvent;
specialinvoke v7.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor$SubscriptionEvent: void <init>(java.util.concurrent.Flow$Subscription)>(v1);
interfaceinvoke v6.<java.util.List: boolean add(java.lang.Object)>(v7);
exitmonitor v0;
label03:
return;
label04:
v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: boolean emitting> = 1;
v4 = 0;
label05:
exitmonitor v0;
label06:
goto label09;
label07:
v8 := @caughtexception;
exitmonitor v0;
throw v8;
label08:
v4 = 1;
label09:
if v4 == 0 goto label10;
interfaceinvoke v1.<java.util.concurrent.Flow$Subscription: void cancel()>();
goto label11;
label10:
v9 = v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: java.util.concurrent.Flow$Processor actual>;
interfaceinvoke v9.<java.util.concurrent.Flow$Processor: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v1);
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: void emitLoop()>();
label11:
return;
catch java.lang.Throwable from label01 to label03 with label07;
catch java.lang.Throwable from label04 to label06 with label07;
}
private java.util.List getOrCreateQueue()
{
java.util.List v1;
io.smallrye.mutiny.operators.multi.processors.SerializedProcessor v0;
java.util.ArrayList v2;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.SerializedProcessor;
v1 = v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: java.util.List queue>;
if v1 != null goto label1;
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>(int)>(4);
v1 = v2;
v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: java.util.List queue> = v2;
label1:
return v1;
}
public void onNext(java.lang.Object)
{
java.lang.Throwable v7;
io.smallrye.mutiny.operators.multi.processors.SerializedProcessor$ItemEvent v6;
java.util.concurrent.Flow$Processor v8;
java.util.List v5;
java.lang.Object v1;
boolean v2, v3, v4;
io.smallrye.mutiny.operators.multi.processors.SerializedProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.SerializedProcessor;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: boolean done>;
if v2 == 0 goto label1;
return;
label1:
entermonitor v0;
label2:
v3 = v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: boolean done>;
if v3 == 0 goto label4;
exitmonitor v0;
label3:
return;
label4:
v4 = v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: boolean emitting>;
if v4 == 0 goto label6;
v5 = specialinvoke v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: java.util.List getOrCreateQueue()>();
v6 = new io.smallrye.mutiny.operators.multi.processors.SerializedProcessor$ItemEvent;
specialinvoke v6.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor$ItemEvent: void <init>(java.lang.Object)>(v1);
interfaceinvoke v5.<java.util.List: boolean add(java.lang.Object)>(v6);
exitmonitor v0;
label5:
return;
label6:
v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: boolean emitting> = 1;
exitmonitor v0;
label7:
goto label9;
label8:
v7 := @caughtexception;
exitmonitor v0;
throw v7;
label9:
v8 = v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: java.util.concurrent.Flow$Processor actual>;
interfaceinvoke v8.<java.util.concurrent.Flow$Processor: void onNext(java.lang.Object)>(v1);
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: void emitLoop()>();
return;
catch java.lang.Throwable from label2 to label3 with label8;
catch java.lang.Throwable from label4 to label5 with label8;
catch java.lang.Throwable from label6 to label7 with label8;
}
public void onError(java.lang.Throwable)
{
java.lang.Throwable v1, v7;
java.util.concurrent.Flow$Processor v8;
java.util.List v5;
io.smallrye.mutiny.operators.multi.processors.SerializedProcessor$FailureEvent v6;
boolean v2, v3, v4;
io.smallrye.mutiny.operators.multi.processors.SerializedProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.SerializedProcessor;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: boolean done>;
if v2 == 0 goto label1;
return;
label1:
entermonitor v0;
label2:
v3 = v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: boolean done>;
if v3 == 0 goto label4;
exitmonitor v0;
label3:
return;
label4:
v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: boolean done> = 1;
v4 = v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: boolean emitting>;
if v4 == 0 goto label6;
v5 = specialinvoke v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: java.util.List getOrCreateQueue()>();
v6 = new io.smallrye.mutiny.operators.multi.processors.SerializedProcessor$FailureEvent;
specialinvoke v6.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor$FailureEvent: void <init>(java.lang.Throwable)>(v1);
interfaceinvoke v5.<java.util.List: void add(int,java.lang.Object)>(0, v6);
exitmonitor v0;
label5:
return;
label6:
v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: boolean emitting> = 1;
exitmonitor v0;
label7:
goto label9;
label8:
v7 := @caughtexception;
exitmonitor v0;
throw v7;
label9:
v8 = v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: java.util.concurrent.Flow$Processor actual>;
interfaceinvoke v8.<java.util.concurrent.Flow$Processor: void onError(java.lang.Throwable)>(v1);
return;
catch java.lang.Throwable from label2 to label3 with label8;
catch java.lang.Throwable from label4 to label5 with label8;
catch java.lang.Throwable from label6 to label7 with label8;
}
public void onComplete()
{
java.lang.Throwable v6;
io.smallrye.mutiny.operators.multi.processors.SerializedProcessor$CompletionEvent v5;
java.util.concurrent.Flow$Processor v7;
java.util.List v4;
boolean v1, v2, v3;
io.smallrye.mutiny.operators.multi.processors.SerializedProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.SerializedProcessor;
v1 = v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: boolean done>;
if v1 == 0 goto label1;
return;
label1:
entermonitor v0;
label2:
v2 = v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: boolean done>;
if v2 == 0 goto label4;
exitmonitor v0;
label3:
return;
label4:
v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: boolean done> = 1;
v3 = v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: boolean emitting>;
if v3 == 0 goto label6;
v4 = specialinvoke v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: java.util.List getOrCreateQueue()>();
v5 = new io.smallrye.mutiny.operators.multi.processors.SerializedProcessor$CompletionEvent;
specialinvoke v5.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor$CompletionEvent: void <init>()>();
interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(v5);
exitmonitor v0;
label5:
return;
label6:
v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: boolean emitting> = 1;
exitmonitor v0;
label7:
goto label9;
label8:
v6 := @caughtexception;
exitmonitor v0;
throw v6;
label9:
v7 = v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: java.util.concurrent.Flow$Processor actual>;
interfaceinvoke v7.<java.util.concurrent.Flow$Processor: void onComplete()>();
return;
catch java.lang.Throwable from label2 to label3 with label8;
catch java.lang.Throwable from label4 to label5 with label8;
catch java.lang.Throwable from label6 to label7 with label8;
}
void emitLoop()
{
java.lang.Throwable v2;
java.util.concurrent.Flow$Processor v3;
java.util.List v1;
io.smallrye.mutiny.operators.multi.processors.SerializedProcessor v0;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.SerializedProcessor;
label1:
entermonitor v0;
label2:
v1 = v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: java.util.List queue>;
if v1 != null goto label4;
v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: boolean emitting> = 0;
exitmonitor v0;
label3:
return;
label4:
v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: java.util.List queue> = null;
exitmonitor v0;
label5:
goto label7;
label6:
v2 := @caughtexception;
exitmonitor v0;
throw v2;
label7:
v3 = v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: java.util.concurrent.Flow$Processor actual>;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor: void dispatch(java.util.List,java.util.concurrent.Flow$Subscriber)>(v1, v3);
goto label1;
catch java.lang.Throwable from label2 to label3 with label6;
catch java.lang.Throwable from label4 to label5 with label6;
}
public void dispatch(java.util.List, java.util.concurrent.Flow$Subscriber)
{
java.lang.Throwable v9;
java.util.Iterator v3;
java.util.concurrent.Flow$Subscriber v2;
java.util.List v1;
java.lang.Object v12, v5;
boolean v10, v11, v4, v6, v8;
io.smallrye.mutiny.operators.multi.processors.SerializedProcessor v0;
java.util.concurrent.Flow$Subscription v7;
v0 := @this: io.smallrye.mutiny.operators.multi.processors.SerializedProcessor;
v1 := @parameter0: java.util.List;
v2 := @parameter1: java.util.concurrent.Flow$Subscriber;
v3 = interfaceinvoke v1.<java.util.List: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label5;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
if v5 == null goto label1;
v6 = v5 instanceof io.smallrye.mutiny.operators.multi.processors.SerializedProcessor$SubscriptionEvent;
if v6 == 0 goto label2;
v7 = v5.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor$SubscriptionEvent: java.util.concurrent.Flow$Subscription subscription>;
interfaceinvoke v2.<java.util.concurrent.Flow$Subscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v7);
label2:
v8 = v5 instanceof io.smallrye.mutiny.operators.multi.processors.SerializedProcessor$FailureEvent;
if v8 == 0 goto label3;
v9 = v5.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor$FailureEvent: java.lang.Throwable failure>;
interfaceinvoke v2.<java.util.concurrent.Flow$Subscriber: void onError(java.lang.Throwable)>(v9);
return;
label3:
v10 = v5 instanceof io.smallrye.mutiny.operators.multi.processors.SerializedProcessor$CompletionEvent;
if v10 == 0 goto label4;
interfaceinvoke v2.<java.util.concurrent.Flow$Subscriber: void onComplete()>();
return;
label4:
v11 = v5 instanceof io.smallrye.mutiny.operators.multi.processors.SerializedProcessor$ItemEvent;
if v11 == 0 goto label1;
v12 = v5.<io.smallrye.mutiny.operators.multi.processors.SerializedProcessor$ItemEvent: java.lang.Object item>;
interfaceinvoke v2.<java.util.concurrent.Flow$Subscriber: void onNext(java.lang.Object)>(v12);
goto label1;
label5:
return;
}
}