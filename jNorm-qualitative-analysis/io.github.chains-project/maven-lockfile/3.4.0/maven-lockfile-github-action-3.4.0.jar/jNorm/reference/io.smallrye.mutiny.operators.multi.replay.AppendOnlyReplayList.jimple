public class io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList extends java.lang.Object
{
private static final io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell SENTINEL_END;
private static final io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell SENTINEL_EMPTY;
private final long itemsToReplay;
private long numberOfItemsRecorded;
private volatile io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell head;
private volatile io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell tail;
static final boolean $assertionsDisabled;
public void <init>(long)
{
io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList v0;
long v1;
v0 := @this: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList;
v1 := @parameter0: long;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: void <init>(long,java.lang.Iterable)>(v1, null);
return;
}
public void <init>(long, java.lang.Iterable)
{
long v1;
java.lang.AssertionError v7;
io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell v3, v4;
java.lang.Iterable v2;
java.util.function.Consumer v8;
io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList v0;
byte v6;
boolean v5;
v0 := @this: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList;
v1 := @parameter0: long;
v2 := @parameter1: java.lang.Iterable;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: long numberOfItemsRecorded> = 0L;
v3 = <io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell SENTINEL_EMPTY>;
v0.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell head> = v3;
v4 = <io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell SENTINEL_EMPTY>;
v0.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell tail> = v4;
v5 = <io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: boolean $assertionsDisabled>;
if v5 != 0 goto label1;
v6 = v1 cmp 0L;
if v6 > 0 goto label1;
v7 = new java.lang.AssertionError;
specialinvoke v7.<java.lang.AssertionError: void <init>()>();
throw v7;
label1:
v0.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: long itemsToReplay> = v1;
if v2 == null goto label2;
v8 = staticinvoke <io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$push__2681: java.util.function.Consumer bootstrap$(io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList)>(v0);
interfaceinvoke v2.<java.lang.Iterable: void forEach(java.util.function.Consumer)>(v8);
label2:
return;
}
public void push(java.lang.Object)
{
java.lang.Throwable v23;
long v13, v16, v17, v18, v19;
java.lang.AssertionError v6;
byte v14, v20;
boolean v15, v2, v5;
io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell v10, v11, v12, v21, v22, v3, v7, v9;
io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList v0;
java.lang.Object v1, v4, v8;
v0 := @this: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList;
v1 := @parameter0: java.lang.Object;
v2 = <io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: boolean $assertionsDisabled>;
if v2 != 0 goto label1;
v3 = v0.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell tail>;
v4 = v3.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell: java.lang.Object value>;
v5 = v4 instanceof io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Terminal;
if v5 == 0 goto label1;
v6 = new java.lang.AssertionError;
specialinvoke v6.<java.lang.AssertionError: void <init>()>();
throw v6;
label1:
v7 = new io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell;
v8 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "item");
v9 = <io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell SENTINEL_END>;
specialinvoke v7.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell: void <init>(java.lang.Object,io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell)>(v8, v9);
v10 = v0.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell head>;
v11 = <io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell SENTINEL_EMPTY>;
if v10 != v11 goto label2;
v0.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell head> = v7;
goto label3;
label2:
v12 = v0.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell tail>;
v12.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell next> = v7;
label3:
v0.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell tail> = v7;
v13 = v0.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: long itemsToReplay>;
v14 = v13 cmp 9223372036854775807L;
if v14 == 0 goto label7;
v15 = v1 instanceof io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Terminal;
if v15 != 0 goto label7;
v16 = v0.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: long numberOfItemsRecorded>;
v17 = v16 + 1L;
v0.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: long numberOfItemsRecorded> = v17;
v18 = v0.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: long numberOfItemsRecorded>;
v19 = v0.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: long itemsToReplay>;
v20 = v18 cmp v19;
if v20 <= 0 goto label7;
entermonitor v0;
label4:
v21 = v0.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell head>;
v22 = v21.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell next>;
v0.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell head> = v22;
exitmonitor v0;
label5:
goto label7;
label6:
v23 := @caughtexception;
exitmonitor v0;
throw v23;
label7:
return;
catch java.lang.Throwable from label4 to label5 with label6;
}
public void pushFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList v0;
io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Failure v2;
v0 := @this: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList;
v1 := @parameter0: java.lang.Throwable;
v2 = new io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Failure;
specialinvoke v2.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Failure: void <init>(java.lang.Throwable)>(v1);
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: void push(java.lang.Object)>(v2);
return;
}
public void pushCompletion()
{
io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList v0;
io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Completion v1;
v0 := @this: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList;
v1 = new io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Completion;
specialinvoke v1.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Completion: void <init>()>();
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: void push(java.lang.Object)>(v1);
return;
}
public io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cursor newCursor()
{
io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cursor v1;
io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList v0;
v0 := @this: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList;
v1 = new io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cursor;
specialinvoke v1.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cursor: void <init>(io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList)>(v0);
return v1;
}
static void <clinit>()
{
java.lang.Class v0;
io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell v3, v4, v5;
boolean v1, v2;
v0 = class "Lio/smallrye/mutiny/operators/multi/replay/AppendOnlyReplayList;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: boolean $assertionsDisabled> = v2;
v3 = new io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell;
specialinvoke v3.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell: void <init>(java.lang.Object,io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell)>(null, null);
<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell SENTINEL_END> = v3;
v4 = new io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell;
v5 = <io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell SENTINEL_END>;
specialinvoke v4.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell: void <init>(java.lang.Object,io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell)>(null, v5);
<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cell SENTINEL_EMPTY> = v4;
return;
}
}