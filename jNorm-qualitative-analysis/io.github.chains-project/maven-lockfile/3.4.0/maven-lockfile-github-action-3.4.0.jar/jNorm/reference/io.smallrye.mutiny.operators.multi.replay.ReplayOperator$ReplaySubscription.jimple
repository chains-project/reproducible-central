class io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription extends java.lang.Object implements java.util.concurrent.Flow$Subscription
{
private final io.smallrye.mutiny.subscription.MultiSubscriber downstream;
private final java.util.concurrent.atomic.AtomicLong demand;
private volatile boolean done;
private final io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cursor cursor;
private final java.util.concurrent.atomic.AtomicInteger wip;
static final boolean $assertionsDisabled;
final io.smallrye.mutiny.operators.multi.replay.ReplayOperator this$0;
private void <init>(io.smallrye.mutiny.operators.multi.replay.ReplayOperator, io.smallrye.mutiny.subscription.MultiSubscriber)
{
io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cursor v6, v7;
io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription v0;
io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList v5;
java.util.concurrent.atomic.AtomicLong v3;
io.smallrye.mutiny.operators.multi.replay.ReplayOperator v1;
java.util.concurrent.atomic.AtomicInteger v4;
io.smallrye.mutiny.subscription.MultiSubscriber v2;
v0 := @this: io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription;
v1 := @parameter0: io.smallrye.mutiny.operators.multi.replay.ReplayOperator;
v2 := @parameter1: io.smallrye.mutiny.subscription.MultiSubscriber;
v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: io.smallrye.mutiny.operators.multi.replay.ReplayOperator this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v3.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: java.util.concurrent.atomic.AtomicLong demand> = v3;
v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: boolean done> = 0;
v4 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v4.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: java.util.concurrent.atomic.AtomicInteger wip> = v4;
v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: io.smallrye.mutiny.subscription.MultiSubscriber downstream> = v2;
v5 = v1.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList replayList>;
v6 = virtualinvoke v5.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cursor newCursor()>();
v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cursor cursor> = v6;
v7 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cursor cursor>;
virtualinvoke v7.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cursor: boolean hasNext()>();
return;
}
public void request(long)
{
io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cursor v7;
long v1;
java.lang.IllegalArgumentException v5;
io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription v0;
java.util.concurrent.atomic.AtomicLong v6;
byte v3;
io.smallrye.mutiny.subscription.MultiSubscriber v4;
boolean v2, v8;
v0 := @this: io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription;
v1 := @parameter0: long;
v2 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: boolean done>;
if v2 == 0 goto label1;
return;
label1:
v3 = v1 cmp 0L;
if v3 > 0 goto label2;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: void cancel()>();
v4 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v5 = staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: java.lang.IllegalArgumentException getInvalidRequestException()>();
interfaceinvoke v4.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v5);
return;
label2:
v6 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: java.util.concurrent.atomic.AtomicLong demand>;
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: long add(java.util.concurrent.atomic.AtomicLong,long)>(v6, v1);
v7 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cursor cursor>;
v8 = virtualinvoke v7.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cursor: boolean hasNext()>();
if v8 == 0 goto label3;
specialinvoke v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: void drain()>();
label3:
return;
}
public void cancel()
{
io.smallrye.mutiny.operators.multi.replay.ReplayOperator v1;
io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription v0;
java.util.concurrent.CopyOnWriteArrayList v2;
v0 := @this: io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription;
v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: boolean done> = 1;
v1 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: io.smallrye.mutiny.operators.multi.replay.ReplayOperator this$0>;
v2 = v1.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator: java.util.concurrent.CopyOnWriteArrayList subscriptions>;
virtualinvoke v2.<java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>(v0);
return;
}
private void drain()
{
java.lang.Throwable v21;
long v28, v6, v7;
java.lang.AssertionError v25;
io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription v0;
byte v8;
java.util.concurrent.atomic.AtomicInteger v2, v29;
int v3, v30;
io.smallrye.mutiny.subscription.MultiSubscriber v16, v19, v26;
boolean v1, v10, v11, v14, v18, v24, v4;
io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cursor v12, v13, v15, v17, v20, v22, v9;
java.util.concurrent.atomic.AtomicLong v27, v5;
java.lang.Object v23;
v0 := @this: io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription;
v1 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: boolean done>;
if v1 == 0 goto label1;
return;
label1:
v2 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: java.util.concurrent.atomic.AtomicInteger wip>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();
if v3 <= 0 goto label2;
return;
label2:
v4 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: boolean done>;
if v4 == 0 goto label3;
return;
label3:
v5 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: java.util.concurrent.atomic.AtomicLong demand>;
v6 = virtualinvoke v5.<java.util.concurrent.atomic.AtomicLong: long get()>();
v7 = 0L;
label4:
v8 = v7 cmp v6;
if v8 >= 0 goto label9;
v9 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cursor cursor>;
v10 = virtualinvoke v9.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cursor: boolean hasNext()>();
if v10 == 0 goto label9;
v11 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: boolean done>;
if v11 == 0 goto label5;
return;
label5:
v12 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cursor cursor>;
virtualinvoke v12.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cursor: void moveToNext()>();
v13 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cursor cursor>;
v14 = virtualinvoke v13.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cursor: boolean hasReachedCompletion()>();
if v14 == 0 goto label6;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: void cancel()>();
v15 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cursor cursor>;
virtualinvoke v15.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cursor: void readCompletion()>();
v16 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v16.<io.smallrye.mutiny.subscription.MultiSubscriber: void onComplete()>();
return;
label6:
v17 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cursor cursor>;
v18 = virtualinvoke v17.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cursor: boolean hasReachedFailure()>();
if v18 == 0 goto label7;
virtualinvoke v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: void cancel()>();
v19 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
v20 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cursor cursor>;
v21 = virtualinvoke v20.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cursor: java.lang.Throwable readFailure()>();
interfaceinvoke v19.<io.smallrye.mutiny.subscription.MultiSubscriber: void onFailure(java.lang.Throwable)>(v21);
return;
label7:
v22 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cursor cursor>;
v23 = virtualinvoke v22.<io.smallrye.mutiny.operators.multi.replay.AppendOnlyReplayList$Cursor: java.lang.Object read()>();
v24 = <io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: boolean $assertionsDisabled>;
if v24 != 0 goto label8;
if v23 != null goto label8;
v25 = new java.lang.AssertionError;
specialinvoke v25.<java.lang.AssertionError: void <init>()>();
throw v25;
label8:
v26 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: io.smallrye.mutiny.subscription.MultiSubscriber downstream>;
interfaceinvoke v26.<io.smallrye.mutiny.subscription.MultiSubscriber: void onItem(java.lang.Object)>(v23);
v7 = v7 + 1L;
goto label4;
label9:
v27 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: java.util.concurrent.atomic.AtomicLong demand>;
v28 = neg v7;
virtualinvoke v27.<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>(v28);
v29 = v0.<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: java.util.concurrent.atomic.AtomicInteger wip>;
v30 = virtualinvoke v29.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();
if v30 != 0 goto label2;
return;
}
static void <clinit>()
{
java.lang.Class v0;
boolean v1, v2;
v0 = class "Lio/smallrye/mutiny/operators/multi/replay/ReplayOperator;";
v1 = virtualinvoke v0.<java.lang.Class: boolean desiredAssertionStatus()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
<io.smallrye.mutiny.operators.multi.replay.ReplayOperator$ReplaySubscription: boolean $assertionsDisabled> = v2;
return;
}
}