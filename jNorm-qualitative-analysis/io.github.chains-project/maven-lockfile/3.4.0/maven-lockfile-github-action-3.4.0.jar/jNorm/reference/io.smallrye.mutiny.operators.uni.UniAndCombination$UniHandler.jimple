class io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler extends java.lang.Object implements io.smallrye.mutiny.subscription.UniSubscription, io.smallrye.mutiny.subscription.UniSubscriber
{
final java.util.concurrent.atomic.AtomicReference subscription;
private final io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor supervisor;
private final io.smallrye.mutiny.Uni uni;
private final io.smallrye.mutiny.Context context;
java.lang.Object item;
java.lang.Throwable failure;
final io.smallrye.mutiny.operators.uni.UniAndCombination this$0;
void <init>(io.smallrye.mutiny.operators.uni.UniAndCombination, io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor, io.smallrye.mutiny.Uni, io.smallrye.mutiny.Context)
{
io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor v2;
io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler v0;
java.lang.Object v6;
io.smallrye.mutiny.operators.uni.UniAndCombination v1;
io.smallrye.mutiny.Context v4;
java.util.concurrent.atomic.AtomicReference v5;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler;
v1 := @parameter0: io.smallrye.mutiny.operators.uni.UniAndCombination;
v2 := @parameter1: io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor;
v3 := @parameter2: io.smallrye.mutiny.Uni;
v4 := @parameter3: io.smallrye.mutiny.Context;
v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler: io.smallrye.mutiny.operators.uni.UniAndCombination this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v5 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v5.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler: java.util.concurrent.atomic.AtomicReference subscription> = v5;
v6 = <io.smallrye.mutiny.operators.uni.UniAndCombination: java.lang.Object SENTINEL>;
v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler: java.lang.Object item> = v6;
v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler: io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor supervisor> = v2;
v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler: io.smallrye.mutiny.Uni uni> = v3;
v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler: io.smallrye.mutiny.Context context> = v4;
return;
}
public io.smallrye.mutiny.Context context()
{
io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler v0;
io.smallrye.mutiny.Context v1;
v0 := @this: io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler;
v1 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler: io.smallrye.mutiny.Context context>;
return v1;
}
public final void onSubscribe(io.smallrye.mutiny.subscription.UniSubscription)
{
io.smallrye.mutiny.subscription.UniSubscription v1;
io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler v0;
java.util.concurrent.atomic.AtomicReference v2;
boolean v3;
v0 := @this: io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler;
v1 := @parameter0: io.smallrye.mutiny.subscription.UniSubscription;
v2 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler: java.util.concurrent.atomic.AtomicReference subscription>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, v1);
if v3 != 0 goto label1;
interfaceinvoke v1.<io.smallrye.mutiny.subscription.UniSubscription: void cancel()>();
label1:
return;
}
public final void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.subscription.UniSubscription v3, v5;
io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor v6;
io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler v0;
java.lang.Object v4;
java.util.concurrent.atomic.AtomicReference v2;
v0 := @this: io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler: java.util.concurrent.atomic.AtomicReference subscription>;
v3 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription CANCELLED>;
v4 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(v3);
v5 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription CANCELLED>;
if v4 != v5 goto label1;
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v1);
return;
label1:
v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler: java.lang.Throwable failure> = v1;
v6 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler: io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor supervisor>;
virtualinvoke v6.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: void check(io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler,boolean)>(v0, 1);
return;
}
public final void onItem(java.lang.Object)
{
io.smallrye.mutiny.subscription.UniSubscription v3, v5;
io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor v6;
io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler v0;
java.lang.Object v1, v4;
java.util.concurrent.atomic.AtomicReference v2;
v0 := @this: io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler: java.util.concurrent.atomic.AtomicReference subscription>;
v3 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription CANCELLED>;
v4 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(v3);
v5 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription CANCELLED>;
if v4 != v5 goto label1;
return;
label1:
v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler: java.lang.Object item> = v1;
v6 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler: io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor supervisor>;
virtualinvoke v6.<io.smallrye.mutiny.operators.uni.UniAndCombination$AndSupervisor: void check(io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler,boolean)>(v0, 0);
return;
}
public void cancel()
{
io.smallrye.mutiny.subscription.UniSubscription v2;
io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler v0;
java.lang.Object v3;
java.util.concurrent.atomic.AtomicReference v1;
v0 := @this: io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler;
v1 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler: java.util.concurrent.atomic.AtomicReference subscription>;
v2 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription CANCELLED>;
v3 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>(v2);
if v3 == null goto label1;
interfaceinvoke v3.<java.util.concurrent.Flow$Subscription: void cancel()>();
label1:
return;
}
public void subscribe()
{
io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler v0;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler;
v1 = v0.<io.smallrye.mutiny.operators.uni.UniAndCombination$UniHandler: io.smallrye.mutiny.Uni uni>;
staticinvoke <io.smallrye.mutiny.operators.AbstractUni: void subscribe(io.smallrye.mutiny.Uni,io.smallrye.mutiny.subscription.UniSubscriber)>(v1, v0);
return;
}
}