class io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor extends io.smallrye.mutiny.operators.uni.UniOperatorProcessor
{
private volatile java.util.concurrent.ScheduledFuture timeoutFuture;
final io.smallrye.mutiny.operators.uni.UniFailOnTimeout this$0;
public void <init>(io.smallrye.mutiny.operators.uni.UniFailOnTimeout, io.smallrye.mutiny.subscription.UniSubscriber)
{
io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor v0;
io.smallrye.mutiny.operators.uni.UniFailOnTimeout v1;
io.smallrye.mutiny.subscription.UniSubscriber v2;
v0 := @this: io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor;
v1 := @parameter0: io.smallrye.mutiny.operators.uni.UniFailOnTimeout;
v2 := @parameter1: io.smallrye.mutiny.subscription.UniSubscriber;
v0.<io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor: io.smallrye.mutiny.operators.uni.UniFailOnTimeout this$0> = v1;
specialinvoke v0.<io.smallrye.mutiny.operators.uni.UniOperatorProcessor: void <init>(io.smallrye.mutiny.subscription.UniSubscriber)>(v2);
return;
}
public void onSubscribe(io.smallrye.mutiny.subscription.UniSubscription)
{
io.smallrye.mutiny.subscription.UniSubscription v1, v11, v13;
java.util.concurrent.ScheduledFuture v9;
io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor v0;
long v7;
io.smallrye.mutiny.operators.uni.UniFailOnTimeout v2, v5;
io.smallrye.mutiny.subscription.UniSubscriber v12, v14;
java.lang.Runnable v4;
java.util.concurrent.TimeUnit v8;
java.util.concurrent.RejectedExecutionException v10;
java.time.Duration v6;
java.util.concurrent.ScheduledExecutorService v3;
v0 := @this: io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor;
v1 := @parameter0: io.smallrye.mutiny.subscription.UniSubscription;
label1:
v2 = v0.<io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor: io.smallrye.mutiny.operators.uni.UniFailOnTimeout this$0>;
v3 = v2.<io.smallrye.mutiny.operators.uni.UniFailOnTimeout: java.util.concurrent.ScheduledExecutorService executor>;
v4 = staticinvoke <io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor$doTimeout__2731: java.lang.Runnable bootstrap$(io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor)>(v0);
v5 = v0.<io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor: io.smallrye.mutiny.operators.uni.UniFailOnTimeout this$0>;
v6 = v5.<io.smallrye.mutiny.operators.uni.UniFailOnTimeout: java.time.Duration timeout>;
v7 = virtualinvoke v6.<java.time.Duration: long toMillis()>();
v8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
v9 = interfaceinvoke v3.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(v4, v7, v8);
v0.<io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor: java.util.concurrent.ScheduledFuture timeoutFuture> = v9;
label2:
goto label4;
label3:
v10 := @caughtexception;
v11 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription CANCELLED>;
virtualinvoke v0.<io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor: io.smallrye.mutiny.subscription.UniSubscription getAndSetUpstreamSubscription(io.smallrye.mutiny.subscription.UniSubscription)>(v11);
interfaceinvoke v1.<io.smallrye.mutiny.subscription.UniSubscription: void cancel()>();
v12 = v0.<io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
v13 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription DONE>;
interfaceinvoke v12.<io.smallrye.mutiny.subscription.UniSubscriber: void onSubscribe(io.smallrye.mutiny.subscription.UniSubscription)>(v13);
v14 = v0.<io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
interfaceinvoke v14.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v10);
return;
label4:
specialinvoke v0.<io.smallrye.mutiny.operators.uni.UniOperatorProcessor: void onSubscribe(io.smallrye.mutiny.subscription.UniSubscription)>(v1);
return;
catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
}
public void onItem(java.lang.Object)
{
io.smallrye.mutiny.subscription.UniSubscription v2, v3, v4;
java.util.concurrent.ScheduledFuture v5, v6;
io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor v0;
io.smallrye.mutiny.subscription.UniSubscriber v7;
java.lang.Object v1;
v0 := @this: io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor;
v1 := @parameter0: java.lang.Object;
v2 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription CANCELLED>;
v3 = virtualinvoke v0.<io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor: io.smallrye.mutiny.subscription.UniSubscription getAndSetUpstreamSubscription(io.smallrye.mutiny.subscription.UniSubscription)>(v2);
v4 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription CANCELLED>;
if v3 == v4 goto label2;
v5 = v0.<io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor: java.util.concurrent.ScheduledFuture timeoutFuture>;
if v5 == null goto label1;
v6 = v0.<io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor: java.util.concurrent.ScheduledFuture timeoutFuture>;
interfaceinvoke v6.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(0);
label1:
v7 = v0.<io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
interfaceinvoke v7.<io.smallrye.mutiny.subscription.UniSubscriber: void onItem(java.lang.Object)>(v1);
label2:
return;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.subscription.UniSubscription v2, v3, v4;
java.util.concurrent.ScheduledFuture v5, v6;
io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor v0;
io.smallrye.mutiny.subscription.UniSubscriber v7;
v0 := @this: io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor;
v1 := @parameter0: java.lang.Throwable;
v2 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription CANCELLED>;
v3 = virtualinvoke v0.<io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor: io.smallrye.mutiny.subscription.UniSubscription getAndSetUpstreamSubscription(io.smallrye.mutiny.subscription.UniSubscription)>(v2);
v4 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription CANCELLED>;
if v3 == v4 goto label2;
v5 = v0.<io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor: java.util.concurrent.ScheduledFuture timeoutFuture>;
if v5 == null goto label1;
v6 = v0.<io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor: java.util.concurrent.ScheduledFuture timeoutFuture>;
interfaceinvoke v6.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(0);
label1:
v7 = v0.<io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
interfaceinvoke v7.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v1);
goto label3;
label2:
staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: void handleDroppedException(java.lang.Throwable)>(v1);
label3:
return;
}
public void cancel()
{
io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor v0;
java.util.concurrent.ScheduledFuture v1, v2;
v0 := @this: io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor;
v1 = v0.<io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor: java.util.concurrent.ScheduledFuture timeoutFuture>;
if v1 == null goto label1;
v2 = v0.<io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor: java.util.concurrent.ScheduledFuture timeoutFuture>;
interfaceinvoke v2.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(0);
label1:
specialinvoke v0.<io.smallrye.mutiny.operators.uni.UniOperatorProcessor: void cancel()>();
return;
}
public void doTimeout()
{
java.lang.Throwable v5;
io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor v0;
io.smallrye.mutiny.operators.uni.UniFailOnTimeout v2;
io.smallrye.mutiny.subscription.UniSubscriber v6, v7, v9;
java.util.function.Supplier v3;
java.lang.NullPointerException v8;
java.lang.Object v4;
boolean v1;
v0 := @this: io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor;
v1 = virtualinvoke v0.<io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor: boolean isCancelled()>();
if v1 == 0 goto label1;
return;
label1:
specialinvoke v0.<io.smallrye.mutiny.operators.uni.UniOperatorProcessor: void cancel()>();
label2:
v2 = v0.<io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor: io.smallrye.mutiny.operators.uni.UniFailOnTimeout this$0>;
v3 = v2.<io.smallrye.mutiny.operators.uni.UniFailOnTimeout: java.util.function.Supplier supplier>;
v4 = interfaceinvoke v3.<java.util.function.Supplier: java.lang.Object get()>();
label3:
goto label5;
label4:
v5 := @caughtexception;
v6 = v0.<io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
interfaceinvoke v6.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v5);
return;
label5:
if v4 != null goto label6;
v7 = v0.<io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
v8 = new java.lang.NullPointerException;
specialinvoke v8.<java.lang.NullPointerException: void <init>(java.lang.String)>("The supplier returned `null`");
interfaceinvoke v7.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v8);
goto label7;
label6:
v9 = v0.<io.smallrye.mutiny.operators.uni.UniFailOnTimeout$UniFailOnTimeoutProcessor: io.smallrye.mutiny.subscription.UniSubscriber downstream>;
interfaceinvoke v9.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v4);
label7:
return;
catch java.lang.Throwable from label2 to label3 with label4;
}
}