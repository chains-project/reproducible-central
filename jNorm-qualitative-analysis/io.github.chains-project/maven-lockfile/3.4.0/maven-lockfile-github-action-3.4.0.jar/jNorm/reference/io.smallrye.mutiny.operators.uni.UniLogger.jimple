public class io.smallrye.mutiny.operators.uni.UniLogger extends io.smallrye.mutiny.operators.UniOperator
{
private final java.lang.String identifier;
private final java.util.concurrent.atomic.AtomicLong increment;
public void <init>(io.smallrye.mutiny.Uni, java.lang.String)
{
java.lang.IllegalArgumentException v7;
io.smallrye.mutiny.Uni v1;
java.util.concurrent.atomic.AtomicLong v4;
io.smallrye.mutiny.operators.uni.UniLogger v0;
java.lang.Object v3, v5;
java.lang.String v2;
boolean v6;
v0 := @this: io.smallrye.mutiny.operators.uni.UniLogger;
v1 := @parameter0: io.smallrye.mutiny.Uni;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v1, "upstream");
specialinvoke v0.<io.smallrye.mutiny.operators.UniOperator: void <init>(io.smallrye.mutiny.Uni)>(v3);
v4 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v4.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);
v0.<io.smallrye.mutiny.operators.uni.UniLogger: java.util.concurrent.atomic.AtomicLong increment> = v4;
v5 = staticinvoke <io.smallrye.mutiny.helpers.ParameterValidation: java.lang.Object nonNull(java.lang.Object,java.lang.String)>(v2, "identifier");
v6 = virtualinvoke v5.<java.lang.String: boolean isEmpty()>();
if v6 == 0 goto label1;
v7 = new java.lang.IllegalArgumentException;
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The identifier cannot be an empty string");
throw v7;
label1:
v0.<io.smallrye.mutiny.operators.uni.UniLogger: java.lang.String identifier> = v5;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.UniSubscriber)
{
java.util.concurrent.atomic.AtomicLong v4;
io.smallrye.mutiny.operators.uni.UniLogger v0;
long v5;
io.smallrye.mutiny.operators.uni.UniLogger$UniLoggerProcessor v3;
io.smallrye.mutiny.subscription.UniSubscriber v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.smallrye.mutiny.operators.uni.UniLogger;
v1 := @parameter0: io.smallrye.mutiny.subscription.UniSubscriber;
v2 = virtualinvoke v0.<io.smallrye.mutiny.operators.uni.UniLogger: io.smallrye.mutiny.Uni upstream()>();
v3 = new io.smallrye.mutiny.operators.uni.UniLogger$UniLoggerProcessor;
v4 = v0.<io.smallrye.mutiny.operators.uni.UniLogger: java.util.concurrent.atomic.AtomicLong increment>;
v5 = virtualinvoke v4.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();
specialinvoke v3.<io.smallrye.mutiny.operators.uni.UniLogger$UniLoggerProcessor: void <init>(io.smallrye.mutiny.operators.uni.UniLogger,io.smallrye.mutiny.subscription.UniSubscriber,long)>(v0, v1, v5);
staticinvoke <io.smallrye.mutiny.operators.AbstractUni: void subscribe(io.smallrye.mutiny.Uni,io.smallrye.mutiny.subscription.UniSubscriber)>(v2, v3);
return;
}
}