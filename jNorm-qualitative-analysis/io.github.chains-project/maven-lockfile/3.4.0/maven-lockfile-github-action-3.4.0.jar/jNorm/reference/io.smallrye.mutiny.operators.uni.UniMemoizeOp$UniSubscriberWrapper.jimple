class io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper extends java.lang.Object
{
final io.smallrye.mutiny.subscription.UniSubscriber subscriber;
final java.util.concurrent.atomic.AtomicReference status;
void <init>(io.smallrye.mutiny.subscription.UniSubscriber)
{
io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper v0;
io.smallrye.mutiny.subscription.UniSubscriber v1;
java.util.concurrent.atomic.AtomicReference v2;
io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper$Status v3;
v0 := @this: io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper;
v1 := @parameter0: io.smallrye.mutiny.subscription.UniSubscriber;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.concurrent.atomic.AtomicReference;
v3 = <io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper$Status: io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper$Status AWAITING_SUBSCRIPTION>;
specialinvoke v2.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(v3);
v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper: java.util.concurrent.atomic.AtomicReference status> = v2;
v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper: io.smallrye.mutiny.subscription.UniSubscriber subscriber> = v1;
return;
}
void markCancelled()
{
java.util.concurrent.atomic.AtomicReference v1;
io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper$Status v2;
io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper v0;
v0 := @this: io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper;
v1 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper: java.util.concurrent.atomic.AtomicReference status>;
v2 = <io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper$Status: io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper$Status CANCELLED>;
virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(v2);
return;
}
void markSubscribed()
{
io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper v0;
java.util.concurrent.atomic.AtomicReference v1;
io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper$Status v2, v3;
v0 := @this: io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper;
v1 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper: java.util.concurrent.atomic.AtomicReference status>;
v2 = <io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper$Status: io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper$Status AWAITING_SUBSCRIPTION>;
v3 = <io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper$Status: io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper$Status AWAITING_RESULT>;
virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(v2, v3);
return;
}
boolean isCancelled()
{
io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper v0;
java.lang.Object v2;
java.util.concurrent.atomic.AtomicReference v1;
io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper$Status v3;
boolean v4;
v0 := @this: io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper;
v1 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper: java.util.concurrent.atomic.AtomicReference status>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v3 = <io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper$Status: io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper$Status CANCELLED>;
if v2 != v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
boolean isAwaitingSubscription()
{
io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper v0;
java.lang.Object v2;
java.util.concurrent.atomic.AtomicReference v1;
io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper$Status v3;
boolean v4;
v0 := @this: io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper;
v1 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper: java.util.concurrent.atomic.AtomicReference status>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v3 = <io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper$Status: io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper$Status AWAITING_SUBSCRIPTION>;
if v2 != v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
boolean isAwaitingResult()
{
io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper v0;
java.lang.Object v2;
java.util.concurrent.atomic.AtomicReference v1;
io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper$Status v3;
boolean v4;
v0 := @this: io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper;
v1 = v0.<io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper: java.util.concurrent.atomic.AtomicReference status>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v3 = <io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper$Status: io.smallrye.mutiny.operators.uni.UniMemoizeOp$UniSubscriberWrapper$Status AWAITING_RESULT>;
if v2 != v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
}