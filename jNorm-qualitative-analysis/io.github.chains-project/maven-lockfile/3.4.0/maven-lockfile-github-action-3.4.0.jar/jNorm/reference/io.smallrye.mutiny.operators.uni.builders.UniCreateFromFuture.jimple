public class io.smallrye.mutiny.operators.uni.builders.UniCreateFromFuture extends io.smallrye.mutiny.operators.AbstractUni
{
private final java.util.function.Supplier supplier;
private final java.time.Duration timeout;
public void <init>(java.util.function.Supplier)
{
io.smallrye.mutiny.operators.uni.builders.UniCreateFromFuture v0;
java.util.function.Supplier v1;
v0 := @this: io.smallrye.mutiny.operators.uni.builders.UniCreateFromFuture;
v1 := @parameter0: java.util.function.Supplier;
specialinvoke v0.<io.smallrye.mutiny.operators.uni.builders.UniCreateFromFuture: void <init>(java.util.function.Supplier,java.time.Duration)>(v1, null);
return;
}
public void <init>(java.util.function.Supplier, java.time.Duration)
{
io.smallrye.mutiny.operators.uni.builders.UniCreateFromFuture v0;
java.util.function.Supplier v1;
java.time.Duration v2;
v0 := @this: io.smallrye.mutiny.operators.uni.builders.UniCreateFromFuture;
v1 := @parameter0: java.util.function.Supplier;
v2 := @parameter1: java.time.Duration;
specialinvoke v0.<io.smallrye.mutiny.operators.AbstractUni: void <init>()>();
v0.<io.smallrye.mutiny.operators.uni.builders.UniCreateFromFuture: java.util.function.Supplier supplier> = v1;
v0.<io.smallrye.mutiny.operators.uni.builders.UniCreateFromFuture: java.time.Duration timeout> = v2;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.UniSubscriber)
{
io.smallrye.mutiny.operators.uni.builders.UniCreateFromFuture v0;
java.util.concurrent.Future v2;
io.smallrye.mutiny.subscription.UniSubscriber v1;
boolean v3;
v0 := @this: io.smallrye.mutiny.operators.uni.builders.UniCreateFromFuture;
v1 := @parameter0: io.smallrye.mutiny.subscription.UniSubscriber;
v2 = specialinvoke v0.<io.smallrye.mutiny.operators.uni.builders.UniCreateFromFuture: java.util.concurrent.Future obtainFuture(io.smallrye.mutiny.subscription.UniSubscriber)>(v1);
if v2 != null goto label1;
return;
label1:
v3 = interfaceinvoke v2.<java.util.concurrent.Future: boolean isDone()>();
if v3 == 0 goto label2;
specialinvoke v0.<io.smallrye.mutiny.operators.uni.builders.UniCreateFromFuture: void dispatchImmediateResult(java.util.concurrent.Future,io.smallrye.mutiny.subscription.UniSubscriber)>(v2, v1);
goto label3;
label2:
specialinvoke v0.<io.smallrye.mutiny.operators.uni.builders.UniCreateFromFuture: void dispatchDeferredResult(java.util.concurrent.Future,io.smallrye.mutiny.subscription.UniSubscriber)>(v2, v1);
label3:
return;
}
private java.util.concurrent.Future obtainFuture(io.smallrye.mutiny.subscription.UniSubscriber)
{
java.lang.Throwable v4;
io.smallrye.mutiny.subscription.UniSubscription v5, v6;
io.smallrye.mutiny.subscription.UniSubscriber v1;
java.util.function.Supplier v2;
java.lang.NullPointerException v7;
io.smallrye.mutiny.operators.uni.builders.UniCreateFromFuture v0;
java.lang.Object v3;
v0 := @this: io.smallrye.mutiny.operators.uni.builders.UniCreateFromFuture;
v1 := @parameter0: io.smallrye.mutiny.subscription.UniSubscriber;
label1:
v2 = v0.<io.smallrye.mutiny.operators.uni.builders.UniCreateFromFuture: java.util.function.Supplier supplier>;
v3 = interfaceinvoke v2.<java.util.function.Supplier: java.lang.Object get()>();
label2:
goto label4;
label3:
v4 := @caughtexception;
v5 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription DONE>;
interfaceinvoke v1.<io.smallrye.mutiny.subscription.UniSubscriber: void onSubscribe(io.smallrye.mutiny.subscription.UniSubscription)>(v5);
interfaceinvoke v1.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v4);
return null;
label4:
if v3 != null goto label5;
v6 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription DONE>;
interfaceinvoke v1.<io.smallrye.mutiny.subscription.UniSubscriber: void onSubscribe(io.smallrye.mutiny.subscription.UniSubscription)>(v6);
v7 = new java.lang.NullPointerException;
specialinvoke v7.<java.lang.NullPointerException: void <init>(java.lang.String)>("The produced Future is `null`");
interfaceinvoke v1.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v7);
return null;
label5:
return v3;
catch java.lang.Throwable from label1 to label2 with label3;
}
private void dispatchImmediateResult(java.util.concurrent.Future, io.smallrye.mutiny.subscription.UniSubscriber)
{
java.lang.Throwable v6, v7;
io.smallrye.mutiny.subscription.UniSubscription v10, v11, v5;
io.smallrye.mutiny.subscription.UniSubscriber v2;
java.util.concurrent.ExecutionException v4;
io.smallrye.mutiny.operators.uni.builders.UniCreateFromFuture v0;
java.util.concurrent.Future v1;
java.lang.Thread v9;
java.lang.Object v3;
boolean v8;
v0 := @this: io.smallrye.mutiny.operators.uni.builders.UniCreateFromFuture;
v1 := @parameter0: java.util.concurrent.Future;
v2 := @parameter1: io.smallrye.mutiny.subscription.UniSubscriber;
label1:
v3 = interfaceinvoke v1.<java.util.concurrent.Future: java.lang.Object get()>();
label2:
goto label6;
label3:
v4 := @caughtexception;
v5 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription DONE>;
interfaceinvoke v2.<io.smallrye.mutiny.subscription.UniSubscriber: void onSubscribe(io.smallrye.mutiny.subscription.UniSubscription)>(v5);
v6 = virtualinvoke v4.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();
interfaceinvoke v2.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v6);
return;
label4:
v7 := @caughtexception;
v8 = v7 instanceof java.lang.InterruptedException;
if v8 == 0 goto label5;
v9 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
virtualinvoke v9.<java.lang.Thread: void interrupt()>();
label5:
v10 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription DONE>;
interfaceinvoke v2.<io.smallrye.mutiny.subscription.UniSubscriber: void onSubscribe(io.smallrye.mutiny.subscription.UniSubscription)>(v10);
interfaceinvoke v2.<io.smallrye.mutiny.subscription.UniSubscriber: void onFailure(java.lang.Throwable)>(v7);
return;
label6:
v11 = <io.smallrye.mutiny.helpers.EmptyUniSubscription: io.smallrye.mutiny.subscription.UniSubscription DONE>;
interfaceinvoke v2.<io.smallrye.mutiny.subscription.UniSubscriber: void onSubscribe(io.smallrye.mutiny.subscription.UniSubscription)>(v11);
interfaceinvoke v2.<io.smallrye.mutiny.subscription.UniSubscriber: void onItem(java.lang.Object)>(v3);
return;
catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
catch java.lang.Throwable from label1 to label2 with label4;
}
private void dispatchDeferredResult(java.util.concurrent.Future, io.smallrye.mutiny.subscription.UniSubscriber)
{
io.smallrye.mutiny.operators.uni.builders.UniCreateFromFuture v0;
io.smallrye.mutiny.subscription.UniSubscription v4;
java.util.concurrent.Future v1;
java.util.concurrent.Executor v5;
java.util.concurrent.atomic.AtomicBoolean v3;
io.smallrye.mutiny.subscription.UniSubscriber v2;
java.lang.Runnable v6;
v0 := @this: io.smallrye.mutiny.operators.uni.builders.UniCreateFromFuture;
v1 := @parameter0: java.util.concurrent.Future;
v2 := @parameter1: io.smallrye.mutiny.subscription.UniSubscriber;
v3 = new java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v3.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);
v4 = staticinvoke <io.smallrye.mutiny.operators.uni.builders.UniCreateFromFuture$lambda_dispatchDeferredResult_0__2738: io.smallrye.mutiny.subscription.UniSubscription bootstrap$(java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.Future)>(v3, v1);
interfaceinvoke v2.<io.smallrye.mutiny.subscription.UniSubscriber: void onSubscribe(io.smallrye.mutiny.subscription.UniSubscription)>(v4);
v5 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.concurrent.Executor getDefaultExecutor()>();
v6 = staticinvoke <io.smallrye.mutiny.operators.uni.builders.UniCreateFromFuture$lambda_dispatchDeferredResult_1__2739: java.lang.Runnable bootstrap$(io.smallrye.mutiny.operators.uni.builders.UniCreateFromFuture,java.util.concurrent.Future,java.util.concurrent.atomic.AtomicBoolean,io.smallrye.mutiny.subscription.UniSubscriber)>(v0, v1, v3, v2);
interfaceinvoke v5.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(v6);
return;
}
}