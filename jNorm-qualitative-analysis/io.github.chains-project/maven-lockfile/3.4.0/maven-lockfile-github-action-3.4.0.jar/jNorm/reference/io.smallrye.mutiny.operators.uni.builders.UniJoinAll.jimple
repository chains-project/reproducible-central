public class io.smallrye.mutiny.operators.uni.builders.UniJoinAll extends io.smallrye.mutiny.operators.AbstractUni
{
private final java.util.List unis;
private final io.smallrye.mutiny.operators.uni.builders.UniJoinAll$Mode mode;
private final int concurrency;
public void <init>(java.util.List, io.smallrye.mutiny.operators.uni.builders.UniJoinAll$Mode, int)
{
java.util.List v1;
io.smallrye.mutiny.operators.uni.builders.UniJoinAll$Mode v2;
int v3;
io.smallrye.mutiny.operators.uni.builders.UniJoinAll v0;
v0 := @this: io.smallrye.mutiny.operators.uni.builders.UniJoinAll;
v1 := @parameter0: java.util.List;
v2 := @parameter1: io.smallrye.mutiny.operators.uni.builders.UniJoinAll$Mode;
v3 := @parameter2: int;
specialinvoke v0.<io.smallrye.mutiny.operators.AbstractUni: void <init>()>();
v0.<io.smallrye.mutiny.operators.uni.builders.UniJoinAll: java.util.List unis> = v1;
v0.<io.smallrye.mutiny.operators.uni.builders.UniJoinAll: io.smallrye.mutiny.operators.uni.builders.UniJoinAll$Mode mode> = v2;
v0.<io.smallrye.mutiny.operators.uni.builders.UniJoinAll: int concurrency> = v3;
return;
}
public void subscribe(io.smallrye.mutiny.subscription.UniSubscriber)
{
io.smallrye.mutiny.subscription.UniSubscriber v1;
io.smallrye.mutiny.operators.uni.builders.UniJoinAll$UniJoinAllSubscription v2;
io.smallrye.mutiny.operators.uni.builders.UniJoinAll v0;
v0 := @this: io.smallrye.mutiny.operators.uni.builders.UniJoinAll;
v1 := @parameter0: io.smallrye.mutiny.subscription.UniSubscriber;
v2 = new io.smallrye.mutiny.operators.uni.builders.UniJoinAll$UniJoinAllSubscription;
specialinvoke v2.<io.smallrye.mutiny.operators.uni.builders.UniJoinAll$UniJoinAllSubscription: void <init>(io.smallrye.mutiny.operators.uni.builders.UniJoinAll,io.smallrye.mutiny.subscription.UniSubscriber)>(v0, v1);
interfaceinvoke v1.<io.smallrye.mutiny.subscription.UniSubscriber: void onSubscribe(io.smallrye.mutiny.subscription.UniSubscription)>(v2);
virtualinvoke v2.<io.smallrye.mutiny.operators.uni.builders.UniJoinAll$UniJoinAllSubscription: void triggerSubscriptions()>();
return;
}
}