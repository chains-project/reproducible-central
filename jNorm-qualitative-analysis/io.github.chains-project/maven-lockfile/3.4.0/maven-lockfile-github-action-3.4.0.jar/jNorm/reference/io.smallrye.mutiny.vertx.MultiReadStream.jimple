public class io.smallrye.mutiny.vertx.MultiReadStream extends io.smallrye.mutiny.operators.AbstractMulti implements io.smallrye.mutiny.Multi
{
private final io.vertx.core.streams.ReadStream source;
private final java.util.function.Function transformation;
private final java.util.concurrent.atomic.AtomicReference upstream;
public void <init>(io.vertx.core.streams.ReadStream, java.util.function.Function)
{
io.vertx.core.streams.ReadStream v1;
io.smallrye.mutiny.vertx.MultiReadStream v0;
java.util.concurrent.atomic.AtomicReference v4;
java.util.function.Function v2, v3;
v0 := @this: io.smallrye.mutiny.vertx.MultiReadStream;
v1 := @parameter0: io.vertx.core.streams.ReadStream;
v2 := @parameter1: java.util.function.Function;
specialinvoke v0.<io.smallrye.mutiny.operators.AbstractMulti: void <init>()>();
interfaceinvoke v1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>();
v0.<io.smallrye.mutiny.vertx.MultiReadStream: io.vertx.core.streams.ReadStream source> = v1;
v3 = staticinvoke <io.smallrye.mutiny.infrastructure.Infrastructure: java.util.function.Function decorate(java.util.function.Function)>(v2);
v0.<io.smallrye.mutiny.vertx.MultiReadStream: java.util.function.Function transformation> = v3;
v4 = new java.util.concurrent.atomic.AtomicReference;
specialinvoke v4.<java.util.concurrent.atomic.AtomicReference: void <init>()>();
v0.<io.smallrye.mutiny.vertx.MultiReadStream: java.util.concurrent.atomic.AtomicReference upstream> = v4;
return;
}
private void release()
{
java.lang.Throwable v13;
java.util.concurrent.atomic.AtomicReference v1, v3;
io.vertx.core.streams.ReadStream v11, v14, v5, v6, v7, v8;
boolean v4;
io.smallrye.mutiny.vertx.MultiReadStream v0;
java.lang.Exception v10, v12, v15, v9;
java.lang.Object v2;
v0 := @this: io.smallrye.mutiny.vertx.MultiReadStream;
v1 = v0.<io.smallrye.mutiny.vertx.MultiReadStream: java.util.concurrent.atomic.AtomicReference upstream>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
if v2 == null goto label14;
v3 = v0.<io.smallrye.mutiny.vertx.MultiReadStream: java.util.concurrent.atomic.AtomicReference upstream>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(v2, null);
if v4 == 0 goto label14;
label01:
v5 = v0.<io.smallrye.mutiny.vertx.MultiReadStream: io.vertx.core.streams.ReadStream source>;
interfaceinvoke v5.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream exceptionHandler(io.vertx.core.Handler)>(null);
v6 = v0.<io.smallrye.mutiny.vertx.MultiReadStream: io.vertx.core.streams.ReadStream source>;
interfaceinvoke v6.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream endHandler(io.vertx.core.Handler)>(null);
v7 = v0.<io.smallrye.mutiny.vertx.MultiReadStream: io.vertx.core.streams.ReadStream source>;
interfaceinvoke v7.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream handler(io.vertx.core.Handler)>(null);
label02:
v8 = v0.<io.smallrye.mutiny.vertx.MultiReadStream: io.vertx.core.streams.ReadStream source>;
interfaceinvoke v8.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>();
label03:
goto label14;
label04:
v9 := @caughtexception;
goto label14;
label05:
v10 := @caughtexception;
label06:
v11 = v0.<io.smallrye.mutiny.vertx.MultiReadStream: io.vertx.core.streams.ReadStream source>;
interfaceinvoke v11.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>();
label07:
goto label14;
label08:
v12 := @caughtexception;
goto label14;
label09:
v13 := @caughtexception;
label10:
v14 = v0.<io.smallrye.mutiny.vertx.MultiReadStream: io.vertx.core.streams.ReadStream source>;
interfaceinvoke v14.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>();
label11:
goto label13;
label12:
v15 := @caughtexception;
label13:
throw v13;
label14:
return;
catch java.lang.Exception from label02 to label03 with label04;
catch java.lang.Exception from label01 to label02 with label05;
catch java.lang.Exception from label06 to label07 with label08;
catch java.lang.Throwable from label01 to label02 with label09;
catch java.lang.Exception from label10 to label11 with label12;
}
public void subscribe(java.util.concurrent.Flow$Subscriber)
{
io.smallrye.mutiny.vertx.MultiReadStream$1 v2;
java.lang.IllegalStateException v5;
io.smallrye.mutiny.vertx.MultiReadStream v0;
java.util.concurrent.atomic.AtomicReference v3;
java.util.concurrent.Flow$Subscriber v1;
io.vertx.core.streams.ReadStream v11, v6, v7, v9;
io.vertx.core.Handler v10, v12, v8;
boolean v4;
v0 := @this: io.smallrye.mutiny.vertx.MultiReadStream;
v1 := @parameter0: java.util.concurrent.Flow$Subscriber;
v2 = new io.smallrye.mutiny.vertx.MultiReadStream$1;
specialinvoke v2.<io.smallrye.mutiny.vertx.MultiReadStream$1: void <init>(io.smallrye.mutiny.vertx.MultiReadStream)>(v0);
v3 = v0.<io.smallrye.mutiny.vertx.MultiReadStream: java.util.concurrent.atomic.AtomicReference upstream>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, v2);
if v4 != 0 goto label1;
v5 = new java.lang.IllegalStateException;
specialinvoke v5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This processor allows only a single Subscriber");
staticinvoke <io.smallrye.mutiny.helpers.Subscriptions: void fail(java.util.concurrent.Flow$Subscriber,java.lang.Throwable)>(v1, v5);
return;
label1:
v6 = v0.<io.smallrye.mutiny.vertx.MultiReadStream: io.vertx.core.streams.ReadStream source>;
interfaceinvoke v6.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>();
v7 = v0.<io.smallrye.mutiny.vertx.MultiReadStream: io.vertx.core.streams.ReadStream source>;
v8 = staticinvoke <io.smallrye.mutiny.vertx.MultiReadStream$lambda_subscribe_0__2326: io.vertx.core.Handler bootstrap$(io.smallrye.mutiny.vertx.MultiReadStream,java.util.concurrent.Flow$Subscriber)>(v0, v1);
interfaceinvoke v7.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream endHandler(io.vertx.core.Handler)>(v8);
v9 = v0.<io.smallrye.mutiny.vertx.MultiReadStream: io.vertx.core.streams.ReadStream source>;
v10 = staticinvoke <io.smallrye.mutiny.vertx.MultiReadStream$lambda_subscribe_1__2327: io.vertx.core.Handler bootstrap$(io.smallrye.mutiny.vertx.MultiReadStream,java.util.concurrent.Flow$Subscriber)>(v0, v1);
interfaceinvoke v9.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream exceptionHandler(io.vertx.core.Handler)>(v10);
v11 = v0.<io.smallrye.mutiny.vertx.MultiReadStream: io.vertx.core.streams.ReadStream source>;
v12 = staticinvoke <io.smallrye.mutiny.vertx.MultiReadStream$lambda_subscribe_2__2328: io.vertx.core.Handler bootstrap$(io.smallrye.mutiny.vertx.MultiReadStream,java.util.concurrent.Flow$Subscriber)>(v0, v1);
interfaceinvoke v11.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream handler(io.vertx.core.Handler)>(v12);
interfaceinvoke v1.<java.util.concurrent.Flow$Subscriber: void onSubscribe(java.util.concurrent.Flow$Subscription)>(v2);
return;
}
}