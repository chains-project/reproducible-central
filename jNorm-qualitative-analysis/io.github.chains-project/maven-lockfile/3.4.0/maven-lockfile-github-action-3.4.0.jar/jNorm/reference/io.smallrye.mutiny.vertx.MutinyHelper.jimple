public class io.smallrye.mutiny.vertx.MutinyHelper extends java.lang.Object
{
public void <init>()
{
io.smallrye.mutiny.vertx.MutinyHelper v0;
v0 := @this: io.smallrye.mutiny.vertx.MutinyHelper;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.util.concurrent.Executor executor(io.vertx.core.Vertx)
{
io.vertx.core.Vertx v0;
java.util.concurrent.Executor v1;
v0 := @parameter0: io.vertx.core.Vertx;
v1 = staticinvoke <io.smallrye.mutiny.vertx.MutinyHelper$lambda_executor_1__2309: java.util.concurrent.Executor bootstrap$(io.vertx.core.Vertx)>(v0);
return v1;
}
public static java.util.concurrent.Executor executor(io.vertx.core.Context)
{
io.vertx.core.Context v0;
java.util.concurrent.Executor v1;
v0 := @parameter0: io.vertx.core.Context;
v1 = staticinvoke <io.smallrye.mutiny.vertx.MutinyHelper$lambda_executor_3__2310: java.util.concurrent.Executor bootstrap$(io.vertx.core.Context)>(v0);
return v1;
}
public static java.util.concurrent.Executor blockingExecutor(io.vertx.core.Vertx)
{
io.vertx.core.Vertx v0;
java.util.concurrent.Executor v1;
v0 := @parameter0: io.vertx.core.Vertx;
v1 = staticinvoke <io.smallrye.mutiny.vertx.MutinyHelper$lambda_blockingExecutor_5__2311: java.util.concurrent.Executor bootstrap$(io.vertx.core.Vertx)>(v0);
return v1;
}
public static java.util.concurrent.Executor blockingExecutor(io.vertx.core.Vertx, boolean)
{
io.vertx.core.Vertx v0;
java.util.concurrent.Executor v2;
boolean v1;
v0 := @parameter0: io.vertx.core.Vertx;
v1 := @parameter1: boolean;
v2 = staticinvoke <io.smallrye.mutiny.vertx.MutinyHelper$lambda_blockingExecutor_7__2312: java.util.concurrent.Executor bootstrap$(io.vertx.core.Vertx,boolean)>(v0, v1);
return v2;
}
public static java.util.concurrent.Executor blockingExecutor(io.vertx.core.WorkerExecutor)
{
java.util.concurrent.Executor v1;
io.vertx.core.WorkerExecutor v0;
v0 := @parameter0: io.vertx.core.WorkerExecutor;
v1 = staticinvoke <io.smallrye.mutiny.vertx.MutinyHelper$lambda_blockingExecutor_9__2313: java.util.concurrent.Executor bootstrap$(io.vertx.core.WorkerExecutor)>(v0);
return v1;
}
public static java.lang.Class unwrap(java.lang.Class)
{
java.lang.'annotation'.Annotation v1;
java.lang.Class v0, v2;
v0 := @parameter0: java.lang.Class;
if v0 == null goto label1;
v1 = virtualinvoke v0.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/smallrye/mutiny/vertx/MutinyGen;");
if v1 == null goto label1;
v2 = interfaceinvoke v1.<io.smallrye.mutiny.vertx.MutinyGen: java.lang.Class value()>();
return v2;
label1:
return v0;
}
public static io.smallrye.mutiny.vertx.WriteStreamSubscriber toSubscriber(io.vertx.core.streams.WriteStream)
{
io.smallrye.mutiny.vertx.WriteStreamSubscriber v2;
java.util.function.Function v1;
io.vertx.core.streams.WriteStream v0;
v0 := @parameter0: io.vertx.core.streams.WriteStream;
v1 = staticinvoke <java.util.function.Function: java.util.function.Function identity()>();
v2 = staticinvoke <io.smallrye.mutiny.vertx.MutinyHelper: io.smallrye.mutiny.vertx.WriteStreamSubscriber toSubscriber(io.vertx.core.streams.WriteStream,java.util.function.Function)>(v0, v1);
return v2;
}
public static io.smallrye.mutiny.vertx.WriteStreamSubscriber toSubscriber(io.vertx.core.streams.WriteStream, java.util.function.Function)
{
java.util.function.Function v1;
io.vertx.core.streams.WriteStream v0;
io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl v2;
v0 := @parameter0: io.vertx.core.streams.WriteStream;
v1 := @parameter1: java.util.function.Function;
v2 = new io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl;
specialinvoke v2.<io.smallrye.mutiny.vertx.impl.WriteStreamSubscriberImpl: void <init>(io.vertx.core.streams.WriteStream,java.util.function.Function)>(v0, v1);
return v2;
}
}