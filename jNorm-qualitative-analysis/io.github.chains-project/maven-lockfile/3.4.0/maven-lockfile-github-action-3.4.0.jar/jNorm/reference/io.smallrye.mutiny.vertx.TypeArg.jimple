public class io.smallrye.mutiny.vertx.TypeArg extends java.lang.Object
{
private static final io.smallrye.mutiny.vertx.TypeArg UNKNOWN;
public final java.util.function.Function wrap;
public final java.util.function.Function unwrap;
public static io.smallrye.mutiny.vertx.TypeArg of(java.lang.Class)
{
io.smallrye.mutiny.vertx.TypeArg v5;
java.lang.'annotation'.Annotation v1;
java.lang.Class v0;
java.lang.Object v3;
java.lang.reflect.Field v2;
java.lang.Exception v4;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lio/smallrye/mutiny/vertx/MutinyGen;");
if v1 == null goto label4;
label1:
v2 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("__TYPE_ARG");
v3 = virtualinvoke v2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);
label2:
return v3;
label3:
v4 := @caughtexception;
label4:
v5 = staticinvoke <io.smallrye.mutiny.vertx.TypeArg: io.smallrye.mutiny.vertx.TypeArg 'unknown'()>();
return v5;
catch java.lang.Exception from label1 to label2 with label3;
}
public static io.smallrye.mutiny.vertx.TypeArg 'unknown'()
{
io.smallrye.mutiny.vertx.TypeArg v0;
v0 = <io.smallrye.mutiny.vertx.TypeArg: io.smallrye.mutiny.vertx.TypeArg UNKNOWN>;
return v0;
}
public void <init>(java.util.function.Function, java.util.function.Function)
{
java.util.function.Function v1, v2;
io.smallrye.mutiny.vertx.TypeArg v0;
v0 := @this: io.smallrye.mutiny.vertx.TypeArg;
v1 := @parameter0: java.util.function.Function;
v2 := @parameter1: java.util.function.Function;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.smallrye.mutiny.vertx.TypeArg: java.util.function.Function wrap> = v1;
v0.<io.smallrye.mutiny.vertx.TypeArg: java.util.function.Function unwrap> = v2;
return;
}
public java.lang.Object wrap(java.lang.Object)
{
io.smallrye.mutiny.vertx.TypeArg v0;
java.lang.Object v1, v3;
java.util.function.Function v2;
v0 := @this: io.smallrye.mutiny.vertx.TypeArg;
v1 := @parameter0: java.lang.Object;
if v1 == null goto label1;
v2 = v0.<io.smallrye.mutiny.vertx.TypeArg: java.util.function.Function wrap>;
v3 = interfaceinvoke v2.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v1);
goto label2;
label1:
v3 = null;
label2:
return v3;
}
public java.lang.Object unwrap(java.lang.Object)
{
io.smallrye.mutiny.vertx.TypeArg v0;
java.lang.Object v1, v3;
java.util.function.Function v2;
v0 := @this: io.smallrye.mutiny.vertx.TypeArg;
v1 := @parameter0: java.lang.Object;
if v1 == null goto label1;
v2 = v0.<io.smallrye.mutiny.vertx.TypeArg: java.util.function.Function unwrap>;
v3 = interfaceinvoke v2.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v1);
goto label2;
label1:
v3 = null;
label2:
return v3;
}
static void <clinit>()
{
java.util.function.Function v1, v2;
io.smallrye.mutiny.vertx.TypeArg v0;
v0 = new io.smallrye.mutiny.vertx.TypeArg;
v1 = staticinvoke <java.util.function.Function: java.util.function.Function identity()>();
v2 = staticinvoke <java.util.function.Function: java.util.function.Function identity()>();
specialinvoke v0.<io.smallrye.mutiny.vertx.TypeArg: void <init>(java.util.function.Function,java.util.function.Function)>(v1, v2);
<io.smallrye.mutiny.vertx.TypeArg: io.smallrye.mutiny.vertx.TypeArg UNKNOWN> = v0;
return;
}
}