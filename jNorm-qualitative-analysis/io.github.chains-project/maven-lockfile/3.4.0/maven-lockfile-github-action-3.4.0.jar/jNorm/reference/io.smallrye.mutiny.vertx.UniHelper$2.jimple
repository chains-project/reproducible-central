class io.smallrye.mutiny.vertx.UniHelper$2 extends java.lang.Object implements io.smallrye.mutiny.subscription.UniSubscriber
{
final java.util.concurrent.atomic.AtomicBoolean val$terminated;
final io.vertx.core.Handler val$handler;
void <init>(java.util.concurrent.atomic.AtomicBoolean, io.vertx.core.Handler)
{
java.util.concurrent.atomic.AtomicBoolean v1;
io.vertx.core.Handler v2;
io.smallrye.mutiny.vertx.UniHelper$2 v0;
v0 := @this: io.smallrye.mutiny.vertx.UniHelper$2;
v1 := @parameter0: java.util.concurrent.atomic.AtomicBoolean;
v2 := @parameter1: io.vertx.core.Handler;
v0.<io.smallrye.mutiny.vertx.UniHelper$2: java.util.concurrent.atomic.AtomicBoolean val$terminated> = v1;
v0.<io.smallrye.mutiny.vertx.UniHelper$2: io.vertx.core.Handler val$handler> = v2;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void onSubscribe(io.smallrye.mutiny.subscription.UniSubscription)
{
io.smallrye.mutiny.subscription.UniSubscription v1;
io.smallrye.mutiny.vertx.UniHelper$2 v0;
v0 := @this: io.smallrye.mutiny.vertx.UniHelper$2;
v1 := @parameter0: io.smallrye.mutiny.subscription.UniSubscription;
return;
}
public void onItem(java.lang.Object)
{
io.smallrye.mutiny.vertx.UniHelper$2 v0;
java.util.concurrent.atomic.AtomicBoolean v2;
java.lang.Object v1;
io.vertx.core.Handler v4;
io.vertx.core.Future v5;
boolean v3;
v0 := @this: io.smallrye.mutiny.vertx.UniHelper$2;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.smallrye.mutiny.vertx.UniHelper$2: java.util.concurrent.atomic.AtomicBoolean val$terminated>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);
if v3 == 0 goto label1;
v4 = v0.<io.smallrye.mutiny.vertx.UniHelper$2: io.vertx.core.Handler val$handler>;
v5 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture(java.lang.Object)>(v1);
interfaceinvoke v4.<io.vertx.core.Handler: void handle(java.lang.Object)>(v5);
label1:
return;
}
public void onFailure(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.mutiny.vertx.UniHelper$2 v0;
java.util.concurrent.atomic.AtomicBoolean v2;
io.vertx.core.Handler v4;
io.vertx.core.Future v5;
boolean v3;
v0 := @this: io.smallrye.mutiny.vertx.UniHelper$2;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.smallrye.mutiny.vertx.UniHelper$2: java.util.concurrent.atomic.AtomicBoolean val$terminated>;
v3 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);
if v3 == 0 goto label1;
v4 = v0.<io.smallrye.mutiny.vertx.UniHelper$2: io.vertx.core.Handler val$handler>;
v5 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.Throwable)>(v1);
interfaceinvoke v4.<io.vertx.core.Handler: void handle(java.lang.Object)>(v5);
label1:
return;
}
}