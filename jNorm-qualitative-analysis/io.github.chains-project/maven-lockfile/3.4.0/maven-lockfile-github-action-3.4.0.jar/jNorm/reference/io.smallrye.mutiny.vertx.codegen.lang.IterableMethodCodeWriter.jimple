public class io.smallrye.mutiny.vertx.codegen.lang.IterableMethodCodeWriter extends java.lang.Object implements io.smallrye.mutiny.vertx.codegen.lang.ConditionalCodeWriter
{
public void <init>()
{
io.smallrye.mutiny.vertx.codegen.lang.IterableMethodCodeWriter v0;
v0 := @this: io.smallrye.mutiny.vertx.codegen.lang.IterableMethodCodeWriter;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void generate(io.vertx.codegen.ClassModel, java.io.PrintWriter)
{
java.lang.Object[] v12, v19, v24, v8;
io.smallrye.mutiny.vertx.codegen.lang.IterableMethodCodeWriter v0;
java.lang.String v13, v15, v16, v18, v25, v9;
io.vertx.codegen.type.ClassKind v10, v11;
boolean v17, v23, v7;
java.io.PrintWriter v2;
io.vertx.codegen.type.ClassTypeInfo v14;
java.util.function.Predicate v22, v6;
io.vertx.codegen.type.TypeInfo v3;
io.vertx.codegen.ClassModel v1;
java.util.List v20, v4;
java.util.stream.Stream v21, v5;
v0 := @this: io.smallrye.mutiny.vertx.codegen.lang.IterableMethodCodeWriter;
v1 := @parameter0: io.vertx.codegen.ClassModel;
v2 := @parameter1: java.io.PrintWriter;
v3 = virtualinvoke v1.<io.vertx.codegen.ClassModel: io.vertx.codegen.type.TypeInfo getIterableArg()>();
v4 = virtualinvoke v1.<io.vertx.codegen.ClassModel: java.util.List getMethods()>();
v5 = interfaceinvoke v4.<java.util.List: java.util.stream.Stream stream()>();
v6 = staticinvoke <io.smallrye.mutiny.vertx.codegen.lang.IterableMethodCodeWriter$lambda_generate_0__2365: java.util.function.Predicate bootstrap$()>();
v7 = interfaceinvoke v5.<java.util.stream.Stream: boolean noneMatch(java.util.function.Predicate)>(v6);
if v7 == 0 goto label4;
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("  @Override");
v8 = newarray (java.lang.Object)[1];
v9 = virtualinvoke v0.<io.smallrye.mutiny.vertx.codegen.lang.IterableMethodCodeWriter: java.lang.String genTypeName(io.vertx.codegen.type.TypeInfo)>(v3);
v8[0] = v9;
virtualinvoke v2.<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>("  public java.util.Iterator<%s> iterator() {%n", v8);
v10 = virtualinvoke v3.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassKind getKind()>();
v11 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind API>;
if v10 != v11 goto label1;
v12 = newarray (java.lang.Object)[3];
v13 = virtualinvoke v3.<io.vertx.codegen.type.TypeInfo: java.lang.String getName()>();
v12[0] = v13;
v14 = virtualinvoke v3.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassTypeInfo getRaw()>();
v15 = virtualinvoke v0.<io.smallrye.mutiny.vertx.codegen.lang.IterableMethodCodeWriter: java.lang.String genTypeName(io.vertx.codegen.type.TypeInfo)>(v14);
v12[1] = v15;
v16 = virtualinvoke v0.<io.smallrye.mutiny.vertx.codegen.lang.IterableMethodCodeWriter: java.lang.String genTypeName(io.vertx.codegen.type.TypeInfo)>(v3);
v12[2] = v16;
virtualinvoke v2.<java.io.PrintWriter: java.io.PrintWriter format(java.lang.String,java.lang.Object[])>("    java.util.function.Function<%s, %s> conv = %s::newInstance;%n", v12);
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("    return new io.smallrye.mutiny.vertx.impl.MappingIterator<>(delegate.iterator(), conv);");
goto label3;
label1:
v17 = virtualinvoke v3.<io.vertx.codegen.type.TypeInfo: boolean isVariable()>();
if v17 == 0 goto label2;
v18 = virtualinvoke v3.<io.vertx.codegen.type.TypeInfo: java.lang.String getSimpleName()>();
v19 = newarray (java.lang.Object)[4];
v19[0] = v18;
v19[1] = v18;
v19[2] = v18;
v19[3] = v18;
virtualinvoke v2.<java.io.PrintWriter: java.io.PrintWriter format(java.lang.String,java.lang.Object[])>("    java.util.function.Function<%s, %s> conv = (java.util.function.Function<%s, %s>) __typeArg_0.wrap;%n", v19);
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("    return new io.smallrye.mutiny.vertx.impl.MappingIterator<>(delegate.iterator(), conv);");
goto label3;
label2:
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("    return delegate.iterator();");
label3:
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("  }");
virtualinvoke v2.<java.io.PrintWriter: void println()>();
label4:
v20 = virtualinvoke v1.<io.vertx.codegen.ClassModel: java.util.List getMethods()>();
v21 = interfaceinvoke v20.<java.util.List: java.util.stream.Stream stream()>();
v22 = staticinvoke <io.smallrye.mutiny.vertx.codegen.lang.IterableMethodCodeWriter$lambda_generate_1__2366: java.util.function.Predicate bootstrap$()>();
v23 = interfaceinvoke v21.<java.util.stream.Stream: boolean noneMatch(java.util.function.Predicate)>(v22);
if v23 == 0 goto label5;
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("  @CheckReturnValue\n");
v24 = newarray (java.lang.Object)[1];
v25 = virtualinvoke v0.<io.smallrye.mutiny.vertx.codegen.lang.IterableMethodCodeWriter: java.lang.String genTypeName(io.vertx.codegen.type.TypeInfo)>(v3);
v24[0] = v25;
virtualinvoke v2.<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>("  public Multi<%s> toMulti() {%n", v24);
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("    return Multi.createFrom().iterable(this);");
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("  }");
virtualinvoke v2.<java.io.PrintWriter: void println()>();
label5:
return;
}
public boolean test(io.vertx.codegen.ClassModel)
{
io.smallrye.mutiny.vertx.codegen.lang.IterableMethodCodeWriter v0;
io.vertx.codegen.ClassModel v1;
boolean v2, v3, v4;
v0 := @this: io.smallrye.mutiny.vertx.codegen.lang.IterableMethodCodeWriter;
v1 := @parameter0: io.vertx.codegen.ClassModel;
v2 = virtualinvoke v1.<io.vertx.codegen.ClassModel: boolean isConcrete()>();
if v2 == 0 goto label1;
v3 = virtualinvoke v1.<io.vertx.codegen.ClassModel: boolean isIterable()>();
if v3 == 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
}