public class io.smallrye.mutiny.vertx.codegen.lang.ToMultiMethodCodeWriter extends java.lang.Object implements io.smallrye.mutiny.vertx.codegen.lang.ConditionalCodeWriter
{
public void <init>()
{
io.smallrye.mutiny.vertx.codegen.lang.ToMultiMethodCodeWriter v0;
v0 := @this: io.smallrye.mutiny.vertx.codegen.lang.ToMultiMethodCodeWriter;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public void generate(io.vertx.codegen.ClassModel, java.io.PrintWriter)
{
java.io.PrintWriter v2;
io.smallrye.mutiny.vertx.codegen.lang.ToMultiMethodCodeWriter v0;
io.vertx.codegen.type.TypeInfo v3, v5, v6, v7;
io.vertx.codegen.ClassModel v1;
java.lang.String v4;
v0 := @this: io.smallrye.mutiny.vertx.codegen.lang.ToMultiMethodCodeWriter;
v1 := @parameter0: io.vertx.codegen.ClassModel;
v2 := @parameter1: java.io.PrintWriter;
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("  private Multi<");
v3 = virtualinvoke v1.<io.vertx.codegen.ClassModel: io.vertx.codegen.type.TypeInfo getReadStreamArg()>();
v4 = virtualinvoke v0.<io.smallrye.mutiny.vertx.codegen.lang.ToMultiMethodCodeWriter: java.lang.String genTypeName(io.vertx.codegen.type.TypeInfo)>(v3);
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>(v4);
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("> multi;\n");
v5 = virtualinvoke v1.<io.vertx.codegen.ClassModel: io.vertx.codegen.type.TypeInfo getReadStreamArg()>();
specialinvoke v0.<io.smallrye.mutiny.vertx.codegen.lang.ToMultiMethodCodeWriter: void genToMulti(io.vertx.codegen.type.TypeInfo,java.io.PrintWriter)>(v5, v2);
v6 = virtualinvoke v1.<io.vertx.codegen.ClassModel: io.vertx.codegen.type.TypeInfo getReadStreamArg()>();
specialinvoke v0.<io.smallrye.mutiny.vertx.codegen.lang.ToMultiMethodCodeWriter: void genToBlockingIterable(io.vertx.codegen.type.TypeInfo,java.io.PrintWriter)>(v6, v2);
v7 = virtualinvoke v1.<io.vertx.codegen.ClassModel: io.vertx.codegen.type.TypeInfo getReadStreamArg()>();
specialinvoke v0.<io.smallrye.mutiny.vertx.codegen.lang.ToMultiMethodCodeWriter: void genToBlockingStream(io.vertx.codegen.type.TypeInfo,java.io.PrintWriter)>(v7, v2);
return;
}
public boolean test(io.vertx.codegen.ClassModel)
{
io.smallrye.mutiny.vertx.codegen.lang.ToMultiMethodCodeWriter v0;
io.vertx.codegen.ClassModel v1;
boolean v2, v3, v4;
v0 := @this: io.smallrye.mutiny.vertx.codegen.lang.ToMultiMethodCodeWriter;
v1 := @parameter0: io.vertx.codegen.ClassModel;
v2 = virtualinvoke v1.<io.vertx.codegen.ClassModel: boolean isReadStream()>();
if v2 == 0 goto label1;
v3 = virtualinvoke v1.<io.vertx.codegen.ClassModel: boolean isConcrete()>();
if v3 == 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
private void genToMulti(io.vertx.codegen.type.TypeInfo, java.io.PrintWriter)
{
java.io.PrintWriter v2;
io.vertx.codegen.type.ClassTypeInfo v8;
io.smallrye.mutiny.vertx.codegen.lang.ToMultiMethodCodeWriter v0;
io.vertx.codegen.type.TypeInfo v1;
java.lang.String v11, v3, v6, v7, v9;
io.vertx.codegen.type.ClassKind v4, v5;
boolean v10;
v0 := @this: io.smallrye.mutiny.vertx.codegen.lang.ToMultiMethodCodeWriter;
v1 := @parameter0: io.vertx.codegen.type.TypeInfo;
v2 := @parameter1: java.io.PrintWriter;
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("  @CheckReturnValue\n");
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("  public synchronized Multi");
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("<");
v3 = virtualinvoke v0.<io.smallrye.mutiny.vertx.codegen.lang.ToMultiMethodCodeWriter: java.lang.String genTypeName(io.vertx.codegen.type.TypeInfo)>(v1);
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>(v3);
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("> toMulti");
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("() {");
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("    ");
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("if (");
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("multi");
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>(" == null) {");
v4 = virtualinvoke v1.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassKind getKind()>();
v5 = <io.vertx.codegen.type.ClassKind: io.vertx.codegen.type.ClassKind API>;
if v4 != v5 goto label1;
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("      java.util.function.Function<");
v6 = virtualinvoke v1.<io.vertx.codegen.type.TypeInfo: java.lang.String getName()>();
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>(v6);
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>(", ");
v7 = virtualinvoke v0.<io.smallrye.mutiny.vertx.codegen.lang.ToMultiMethodCodeWriter: java.lang.String genTypeName(io.vertx.codegen.type.TypeInfo)>(v1);
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>(v7);
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("> conv = ");
v8 = virtualinvoke v1.<io.vertx.codegen.type.TypeInfo: io.vertx.codegen.type.ClassTypeInfo getRaw()>();
v9 = virtualinvoke v0.<io.smallrye.mutiny.vertx.codegen.lang.ToMultiMethodCodeWriter: java.lang.String genTypeName(io.vertx.codegen.type.TypeInfo)>(v8);
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>(v9);
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("::newInstance;");
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("      ");
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("multi");
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>(" = io.smallrye.mutiny.vertx.MultiHelper.toMulti(delegate, conv);");
goto label3;
label1:
v10 = virtualinvoke v1.<io.vertx.codegen.type.TypeInfo: boolean isVariable()>();
if v10 == 0 goto label2;
v11 = virtualinvoke v1.<io.vertx.codegen.type.TypeInfo: java.lang.String getSimpleName()>();
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("      java.util.function.Function<");
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>(v11);
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>(", ");
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>(v11);
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("> conv = (java.util.function.Function<");
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>(v11);
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>(", ");
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>(v11);
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>(">) __typeArg_0.wrap;");
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("      ");
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("multi");
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>(" = io.smallrye.mutiny.vertx.MultiHelper.toMulti(delegate, conv);");
goto label3;
label2:
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("      ");
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("multi");
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>(" = io.smallrye.mutiny.vertx.MultiHelper.toMulti(this.getDelegate());");
label3:
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("    }");
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("    return ");
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("multi");
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>(";");
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("  }");
virtualinvoke v2.<java.io.PrintWriter: void println()>();
return;
}
private void genToBlockingIterable(io.vertx.codegen.type.TypeInfo, java.io.PrintWriter)
{
java.io.PrintWriter v2;
io.smallrye.mutiny.vertx.codegen.lang.ToMultiMethodCodeWriter v0;
io.vertx.codegen.type.TypeInfo v1;
java.lang.String v3;
v0 := @this: io.smallrye.mutiny.vertx.codegen.lang.ToMultiMethodCodeWriter;
v1 := @parameter0: io.vertx.codegen.type.TypeInfo;
v2 := @parameter1: java.io.PrintWriter;
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("  public java.lang.Iterable");
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("<");
v3 = virtualinvoke v0.<io.smallrye.mutiny.vertx.codegen.lang.ToMultiMethodCodeWriter: java.lang.String genTypeName(io.vertx.codegen.type.TypeInfo)>(v1);
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>(v3);
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("> toBlockingIterable");
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("() {");
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("    ");
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("return toMulti().subscribe().asIterable();\n");
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("  }");
virtualinvoke v2.<java.io.PrintWriter: void println()>();
return;
}
private void genToBlockingStream(io.vertx.codegen.type.TypeInfo, java.io.PrintWriter)
{
java.io.PrintWriter v2;
io.smallrye.mutiny.vertx.codegen.lang.ToMultiMethodCodeWriter v0;
io.vertx.codegen.type.TypeInfo v1;
java.lang.String v3;
v0 := @this: io.smallrye.mutiny.vertx.codegen.lang.ToMultiMethodCodeWriter;
v1 := @parameter0: io.vertx.codegen.type.TypeInfo;
v2 := @parameter1: java.io.PrintWriter;
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("  public java.util.stream.Stream");
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("<");
v3 = virtualinvoke v0.<io.smallrye.mutiny.vertx.codegen.lang.ToMultiMethodCodeWriter: java.lang.String genTypeName(io.vertx.codegen.type.TypeInfo)>(v1);
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>(v3);
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("> toBlockingStream");
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("() {");
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("    ");
virtualinvoke v2.<java.io.PrintWriter: void print(java.lang.String)>("return toMulti().subscribe().asStream();\n");
virtualinvoke v2.<java.io.PrintWriter: void println(java.lang.String)>("  }");
virtualinvoke v2.<java.io.PrintWriter: void println()>();
return;
}
}