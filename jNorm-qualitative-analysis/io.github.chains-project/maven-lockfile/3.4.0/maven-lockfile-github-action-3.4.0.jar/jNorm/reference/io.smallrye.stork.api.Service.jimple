public class io.smallrye.stork.api.Service extends java.lang.Object
{
private final java.util.concurrent.Semaphore instanceSelectionLock;
private final io.smallrye.stork.api.LoadBalancer loadBalancer;
private final io.smallrye.stork.api.ServiceDiscovery serviceDiscovery;
private final java.lang.String serviceName;
public void <init>(java.lang.String, io.smallrye.stork.api.LoadBalancer, io.smallrye.stork.api.ServiceDiscovery, boolean)
{
io.smallrye.stork.api.LoadBalancer v2;
io.smallrye.stork.api.Service v0;
java.util.concurrent.Semaphore v5;
java.lang.String v1;
boolean v4;
io.smallrye.stork.api.ServiceDiscovery v3;
v0 := @this: io.smallrye.stork.api.Service;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.smallrye.stork.api.LoadBalancer;
v3 := @parameter2: io.smallrye.stork.api.ServiceDiscovery;
v4 := @parameter3: boolean;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.smallrye.stork.api.Service: io.smallrye.stork.api.LoadBalancer loadBalancer> = v2;
v0.<io.smallrye.stork.api.Service: io.smallrye.stork.api.ServiceDiscovery serviceDiscovery> = v3;
v0.<io.smallrye.stork.api.Service: java.lang.String serviceName> = v1;
if v4 == 0 goto label1;
v5 = new java.util.concurrent.Semaphore;
specialinvoke v5.<java.util.concurrent.Semaphore: void <init>(int)>(1);
goto label2;
label1:
v5 = null;
label2:
v0.<io.smallrye.stork.api.Service: java.util.concurrent.Semaphore instanceSelectionLock> = v5;
return;
}
public io.smallrye.mutiny.Uni selectInstance()
{
io.smallrye.stork.api.Service v0;
java.util.function.Function v3;
io.smallrye.mutiny.Uni v2, v4;
io.smallrye.stork.api.ServiceDiscovery v1;
v0 := @this: io.smallrye.stork.api.Service;
v1 = v0.<io.smallrye.stork.api.Service: io.smallrye.stork.api.ServiceDiscovery serviceDiscovery>;
v2 = interfaceinvoke v1.<io.smallrye.stork.api.ServiceDiscovery: io.smallrye.mutiny.Uni getServiceInstances()>();
v3 = staticinvoke <io.smallrye.stork.api.Service$selectInstance__594: java.util.function.Function bootstrap$(io.smallrye.stork.api.Service)>(v0);
v4 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.Uni map(java.util.function.Function)>(v3);
return v4;
}
public io.smallrye.stork.api.ServiceInstance selectInstance(java.util.Collection)
{
io.smallrye.stork.api.ServiceInstance v3;
io.smallrye.stork.api.LoadBalancer v2;
io.smallrye.stork.api.Service v0;
java.util.Collection v1;
v0 := @this: io.smallrye.stork.api.Service;
v1 := @parameter0: java.util.Collection;
v2 = v0.<io.smallrye.stork.api.Service: io.smallrye.stork.api.LoadBalancer loadBalancer>;
v3 = interfaceinvoke v2.<io.smallrye.stork.api.LoadBalancer: io.smallrye.stork.api.ServiceInstance selectServiceInstance(java.util.Collection)>(v1);
return v3;
}
public io.smallrye.mutiny.Uni selectInstanceAndRecordStart(boolean)
{
io.smallrye.stork.api.Service v0;
java.util.function.Function v4;
boolean v1;
io.smallrye.mutiny.Uni v3, v5;
io.smallrye.stork.api.ServiceDiscovery v2;
v0 := @this: io.smallrye.stork.api.Service;
v1 := @parameter0: boolean;
v2 = v0.<io.smallrye.stork.api.Service: io.smallrye.stork.api.ServiceDiscovery serviceDiscovery>;
v3 = interfaceinvoke v2.<io.smallrye.stork.api.ServiceDiscovery: io.smallrye.mutiny.Uni getServiceInstances()>();
v4 = staticinvoke <io.smallrye.stork.api.Service$lambda_selectInstanceAndRecordStart_0__595: java.util.function.Function bootstrap$(io.smallrye.stork.api.Service,boolean)>(v0, v1);
v5 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.Uni map(java.util.function.Function)>(v4);
return v5;
}
public io.smallrye.stork.api.ServiceInstance selectInstanceAndRecordStart(java.util.Collection, boolean)
{
java.lang.Throwable v12;
io.smallrye.stork.api.LoadBalancer v4, v8;
io.smallrye.stork.api.Service v0;
java.lang.Thread v15;
boolean v10, v2, v6;
java.util.concurrent.Semaphore v11, v13, v3, v7;
java.util.Collection v1;
java.lang.RuntimeException v16;
io.smallrye.stork.api.ServiceInstance v5, v9;
java.lang.InterruptedException v14;
v0 := @this: io.smallrye.stork.api.Service;
v1 := @parameter0: java.util.Collection;
v2 := @parameter1: boolean;
v3 = v0.<io.smallrye.stork.api.Service: java.util.concurrent.Semaphore instanceSelectionLock>;
if v3 != null goto label2;
v4 = v0.<io.smallrye.stork.api.Service: io.smallrye.stork.api.LoadBalancer loadBalancer>;
v5 = interfaceinvoke v4.<io.smallrye.stork.api.LoadBalancer: io.smallrye.stork.api.ServiceInstance selectServiceInstance(java.util.Collection)>(v1);
v6 = interfaceinvoke v5.<io.smallrye.stork.api.ServiceInstance: boolean gatherStatistics()>();
if v6 == 0 goto label1;
interfaceinvoke v5.<io.smallrye.stork.api.ServiceInstance: void recordStart(boolean)>(v2);
label1:
return v5;
label2:
v7 = v0.<io.smallrye.stork.api.Service: java.util.concurrent.Semaphore instanceSelectionLock>;
virtualinvoke v7.<java.util.concurrent.Semaphore: void acquire()>();
label3:
v8 = v0.<io.smallrye.stork.api.Service: io.smallrye.stork.api.LoadBalancer loadBalancer>;
v9 = interfaceinvoke v8.<io.smallrye.stork.api.LoadBalancer: io.smallrye.stork.api.ServiceInstance selectServiceInstance(java.util.Collection)>(v1);
v10 = interfaceinvoke v9.<io.smallrye.stork.api.ServiceInstance: boolean gatherStatistics()>();
if v10 == 0 goto label4;
interfaceinvoke v9.<io.smallrye.stork.api.ServiceInstance: void recordStart(boolean)>(v2);
label4:
v11 = v0.<io.smallrye.stork.api.Service: java.util.concurrent.Semaphore instanceSelectionLock>;
virtualinvoke v11.<java.util.concurrent.Semaphore: void release()>();
label5:
return v9;
label6:
v12 := @caughtexception;
v13 = v0.<io.smallrye.stork.api.Service: java.util.concurrent.Semaphore instanceSelectionLock>;
virtualinvoke v13.<java.util.concurrent.Semaphore: void release()>();
throw v12;
label7:
v14 := @caughtexception;
v15 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
virtualinvoke v15.<java.lang.Thread: void interrupt()>();
v16 = new java.lang.RuntimeException;
specialinvoke v16.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to lock for ServiceInstance selection", v14);
throw v16;
catch java.lang.Throwable from label3 to label4 with label6;
catch java.lang.InterruptedException from label2 to label5 with label7;
}
public io.smallrye.mutiny.Uni getInstances()
{
io.smallrye.stork.api.Service v0;
io.smallrye.mutiny.Uni v2;
io.smallrye.stork.api.ServiceDiscovery v1;
v0 := @this: io.smallrye.stork.api.Service;
v1 = v0.<io.smallrye.stork.api.Service: io.smallrye.stork.api.ServiceDiscovery serviceDiscovery>;
v2 = interfaceinvoke v1.<io.smallrye.stork.api.ServiceDiscovery: io.smallrye.mutiny.Uni getServiceInstances()>();
return v2;
}
public io.smallrye.stork.api.LoadBalancer getLoadBalancer()
{
io.smallrye.stork.api.LoadBalancer v1;
io.smallrye.stork.api.Service v0;
v0 := @this: io.smallrye.stork.api.Service;
v1 = v0.<io.smallrye.stork.api.Service: io.smallrye.stork.api.LoadBalancer loadBalancer>;
return v1;
}
public io.smallrye.stork.api.ServiceDiscovery getServiceDiscovery()
{
io.smallrye.stork.api.Service v0;
io.smallrye.stork.api.ServiceDiscovery v1;
v0 := @this: io.smallrye.stork.api.Service;
v1 = v0.<io.smallrye.stork.api.Service: io.smallrye.stork.api.ServiceDiscovery serviceDiscovery>;
return v1;
}
public java.lang.String getServiceName()
{
java.lang.String v1;
io.smallrye.stork.api.Service v0;
v0 := @this: io.smallrye.stork.api.Service;
v1 = v0.<io.smallrye.stork.api.Service: java.lang.String serviceName>;
return v1;
}
}