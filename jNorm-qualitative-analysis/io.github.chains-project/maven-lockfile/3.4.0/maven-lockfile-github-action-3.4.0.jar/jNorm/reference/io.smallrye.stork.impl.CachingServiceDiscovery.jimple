public abstract class io.smallrye.stork.impl.CachingServiceDiscovery extends java.lang.Object implements io.smallrye.stork.api.ServiceDiscovery
{
private static final org.slf4j.Logger log;
public static final java.lang.String REFRESH_PERIOD;
public final java.time.Duration refreshPeriod;
public static final java.lang.String DEFAULT_REFRESH_INTERVAL;
private volatile java.util.List lastResults;
private final io.smallrye.mutiny.Uni instances;
public void <init>(java.lang.String)
{
io.smallrye.stork.impl.CachingServiceDiscovery v0;
java.lang.IllegalArgumentException v4;
java.util.function.Supplier v8;
io.smallrye.mutiny.Uni v10, v9;
io.smallrye.mutiny.groups.UniCreate v7;
java.time.format.DateTimeParseException v3;
java.util.List v6;
java.time.Duration v2;
java.lang.String v1, v5;
v0 := @this: io.smallrye.stork.impl.CachingServiceDiscovery;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<java.lang.Object: void <init>()>();
label1:
v2 = staticinvoke <io.smallrye.stork.utils.DurationUtils: java.time.Duration parseDuration(java.lang.String,java.lang.String)>(v1, "refresh-period");
v0.<io.smallrye.stork.impl.CachingServiceDiscovery: java.time.Duration refreshPeriod> = v2;
label2:
goto label4;
label3:
v3 := @caughtexception;
v4 = new java.lang.IllegalArgumentException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("refresh-period for service discovery should be a number, got: \u0001");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>(v5, v3);
throw v4;
label4:
v6 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
v0.<io.smallrye.stork.impl.CachingServiceDiscovery: java.util.List lastResults> = v6;
v7 = staticinvoke <io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniCreate createFrom()>();
v8 = staticinvoke <io.smallrye.stork.impl.CachingServiceDiscovery$lambda_new_1__604: java.util.function.Supplier bootstrap$(io.smallrye.stork.impl.CachingServiceDiscovery)>(v0);
v9 = virtualinvoke v7.<io.smallrye.mutiny.groups.UniCreate: io.smallrye.mutiny.Uni deferred(java.util.function.Supplier)>(v8);
v10 = virtualinvoke v0.<io.smallrye.stork.impl.CachingServiceDiscovery: io.smallrye.mutiny.Uni cache(io.smallrye.mutiny.Uni)>(v9);
v0.<io.smallrye.stork.impl.CachingServiceDiscovery: io.smallrye.mutiny.Uni instances> = v10;
return;
catch java.time.format.DateTimeParseException from label1 to label2 with label3;
}
public io.smallrye.mutiny.Uni cache(io.smallrye.mutiny.Uni)
{
java.time.Duration v3;
io.smallrye.stork.impl.CachingServiceDiscovery v0;
io.smallrye.mutiny.groups.UniMemoize v2;
io.smallrye.mutiny.Uni v1, v4;
v0 := @this: io.smallrye.stork.impl.CachingServiceDiscovery;
v1 := @parameter0: io.smallrye.mutiny.Uni;
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniMemoize memoize()>();
v3 = v0.<io.smallrye.stork.impl.CachingServiceDiscovery: java.time.Duration refreshPeriod>;
v4 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniMemoize: io.smallrye.mutiny.Uni atLeast(java.time.Duration)>(v3);
return v4;
}
public io.smallrye.mutiny.Uni getServiceInstances()
{
io.smallrye.stork.impl.CachingServiceDiscovery v0;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.smallrye.stork.impl.CachingServiceDiscovery;
v1 = v0.<io.smallrye.stork.impl.CachingServiceDiscovery: io.smallrye.mutiny.Uni instances>;
return v1;
}
public void handleFetchError(java.lang.Throwable)
{
java.lang.Throwable v1;
io.smallrye.stork.impl.CachingServiceDiscovery v0;
org.slf4j.Logger v2;
v0 := @this: io.smallrye.stork.impl.CachingServiceDiscovery;
v1 := @parameter0: java.lang.Throwable;
v2 = <io.smallrye.stork.impl.CachingServiceDiscovery: org.slf4j.Logger log>;
interfaceinvoke v2.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Failed to fetch service instances", v1);
return;
}
public abstract io.smallrye.mutiny.Uni fetchNewServiceInstances(java.util.List);
static void <clinit>()
{
org.slf4j.Logger v0;
v0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lio/smallrye/stork/impl/CachingServiceDiscovery;");
<io.smallrye.stork.impl.CachingServiceDiscovery: org.slf4j.Logger log> = v0;
return;
}
}