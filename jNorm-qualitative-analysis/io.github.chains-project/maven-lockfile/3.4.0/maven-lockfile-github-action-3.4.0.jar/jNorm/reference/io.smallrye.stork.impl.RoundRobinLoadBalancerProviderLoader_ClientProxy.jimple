public class io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader_ClientProxy extends io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader implements io.quarkus.arc.ClientProxy
{
private final io.quarkus.arc.InjectableBean bean;
private final io.quarkus.arc.InjectableContext context;
public void <init>(java.lang.String)
{
io.quarkus.arc.ArcContainer v2;
io.quarkus.arc.InjectableBean v3;
io.quarkus.arc.InjectableContext v5;
java.lang.Class v4;
java.lang.String v1;
io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader_ClientProxy v0;
v0 := @this: io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader_ClientProxy;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader: void <init>()>();
v2 = staticinvoke <io.quarkus.arc.Arc: io.quarkus.arc.ArcContainer container()>();
v3 = interfaceinvoke v2.<io.quarkus.arc.ArcContainer: io.quarkus.arc.InjectableBean bean(java.lang.String)>(v1);
v0.<io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader_ClientProxy: io.quarkus.arc.InjectableBean bean> = v3;
v4 = interfaceinvoke v3.<io.quarkus.arc.InjectableBean: java.lang.Class getScope()>();
v5 = interfaceinvoke v2.<io.quarkus.arc.ArcContainer: io.quarkus.arc.InjectableContext getActiveContext(java.lang.Class)>(v4);
v0.<io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader_ClientProxy: io.quarkus.arc.InjectableContext context> = v5;
return;
}
private io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader arc$delegate()
{
io.quarkus.arc.InjectableBean v1;
io.quarkus.arc.InjectableContext v2;
java.lang.Object v3;
io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader_ClientProxy v0;
v0 := @this: io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader_ClientProxy;
v1 = v0.<io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader_ClientProxy: io.quarkus.arc.InjectableBean bean>;
v2 = v0.<io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader_ClientProxy: io.quarkus.arc.InjectableContext context>;
v3 = staticinvoke <io.quarkus.arc.impl.ClientProxies: java.lang.Object getApplicationScopedDelegate(io.quarkus.arc.InjectableContext,io.quarkus.arc.InjectableBean)>(v2, v1);
return v3;
}
public java.lang.Object arc_contextualInstance()
{
io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader v1;
io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader_ClientProxy v0;
v0 := @this: io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader_ClientProxy;
v1 = specialinvoke v0.<io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader_ClientProxy: io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader arc$delegate()>();
return v1;
}
public io.quarkus.arc.InjectableBean arc_bean()
{
io.quarkus.arc.InjectableBean v1;
io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader_ClientProxy v0;
v0 := @this: io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader_ClientProxy;
v1 = v0.<io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader_ClientProxy: io.quarkus.arc.InjectableBean bean>;
return v1;
}
public java.lang.String type()
{
io.quarkus.arc.InjectableBean v1;
java.lang.String v2, v4;
io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader v3;
io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader_ClientProxy v0;
v0 := @this: io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader_ClientProxy;
v1 = v0.<io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader_ClientProxy: io.quarkus.arc.InjectableBean bean>;
if v1 != null goto label1;
v2 = specialinvoke v0.<io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader: java.lang.String type()>();
return v2;
label1:
v3 = specialinvoke v0.<io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader_ClientProxy: io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader arc$delegate()>();
v4 = virtualinvoke v3.<io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader: java.lang.String type()>();
return v4;
}
public java.lang.String toString()
{
io.quarkus.arc.InjectableBean v1;
java.lang.String v2, v4;
io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader v3;
io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader_ClientProxy v0;
v0 := @this: io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader_ClientProxy;
v1 = v0.<io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader_ClientProxy: io.quarkus.arc.InjectableBean bean>;
if v1 != null goto label1;
v2 = specialinvoke v0.<io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader: java.lang.String toString()>();
return v2;
label1:
v3 = specialinvoke v0.<io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader_ClientProxy: io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader arc$delegate()>();
v4 = virtualinvoke v3.<java.lang.Object: java.lang.String toString()>();
return v4;
}
public io.smallrye.stork.api.LoadBalancer createLoadBalancer(io.smallrye.stork.api.config.ConfigWithType, io.smallrye.stork.api.ServiceDiscovery)
{
io.smallrye.stork.api.LoadBalancer v4, v6;
io.quarkus.arc.InjectableBean v3;
io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader v5;
io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader_ClientProxy v0;
io.smallrye.stork.api.config.ConfigWithType v1;
io.smallrye.stork.api.ServiceDiscovery v2;
v0 := @this: io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader_ClientProxy;
v1 := @parameter0: io.smallrye.stork.api.config.ConfigWithType;
v2 := @parameter1: io.smallrye.stork.api.ServiceDiscovery;
v3 = v0.<io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader_ClientProxy: io.quarkus.arc.InjectableBean bean>;
if v3 != null goto label1;
v4 = specialinvoke v0.<io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader: io.smallrye.stork.api.LoadBalancer createLoadBalancer(io.smallrye.stork.api.config.ConfigWithType,io.smallrye.stork.api.ServiceDiscovery)>(v1, v2);
return v4;
label1:
v5 = specialinvoke v0.<io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader_ClientProxy: io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader arc$delegate()>();
v6 = virtualinvoke v5.<io.smallrye.stork.impl.RoundRobinLoadBalancerProviderLoader: io.smallrye.stork.api.LoadBalancer createLoadBalancer(io.smallrye.stork.api.config.ConfigWithType,io.smallrye.stork.api.ServiceDiscovery)>(v1, v2);
return v6;
}
}