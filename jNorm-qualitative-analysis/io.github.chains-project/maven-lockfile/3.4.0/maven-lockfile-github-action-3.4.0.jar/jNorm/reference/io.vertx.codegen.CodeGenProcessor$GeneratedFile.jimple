class io.vertx.codegen.CodeGenProcessor$GeneratedFile extends java.util.ArrayList
{
private final java.lang.String uri;
private final java.util.Map session;
public void <init>(java.lang.String)
{
java.util.HashMap v2;
java.lang.String v1;
io.vertx.codegen.CodeGenProcessor$GeneratedFile v0;
v0 := @this: io.vertx.codegen.CodeGenProcessor$GeneratedFile;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<java.util.ArrayList: void <init>()>();
v2 = new java.util.HashMap;
specialinvoke v2.<java.util.HashMap: void <init>()>();
v0.<io.vertx.codegen.CodeGenProcessor$GeneratedFile: java.util.Map session> = v2;
v0.<io.vertx.codegen.CodeGenProcessor$GeneratedFile: java.lang.String uri> = v1;
return;
}
public boolean add(io.vertx.codegen.CodeGenProcessor$ModelProcessing)
{
io.vertx.codegen.Generator v2;
io.vertx.codegen.CodeGenProcessor$ModelProcessing v1;
boolean v3, v4;
io.vertx.codegen.CodeGenProcessor$GeneratedFile v0;
v0 := @this: io.vertx.codegen.CodeGenProcessor$GeneratedFile;
v1 := @parameter0: io.vertx.codegen.CodeGenProcessor$ModelProcessing;
v2 = v1.<io.vertx.codegen.CodeGenProcessor$ModelProcessing: io.vertx.codegen.Generator generator>;
v3 = v2.<io.vertx.codegen.Generator: boolean incremental>;
if v3 != 0 goto label1;
virtualinvoke v0.<io.vertx.codegen.CodeGenProcessor$GeneratedFile: void clear()>();
label1:
v4 = specialinvoke v0.<java.util.ArrayList: boolean add(java.lang.Object)>(v1);
return v4;
}
java.lang.String generate()
{
io.vertx.codegen.Generator v6;
io.vertx.codegen.Model v14, v7;
io.vertx.codegen.CodeGenProcessor$GeneratedFile v0;
io.vertx.codegen.GenException v11, v13;
java.util.Map v9;
int v3, v4, v8;
java.lang.String v10, v16, v17;
javax.lang.model.element.Element v15;
java.lang.Exception v12;
java.lang.Object v5;
java.lang.StringBuilder v2;
java.util.Comparator v1;
v0 := @this: io.vertx.codegen.CodeGenProcessor$GeneratedFile;
v1 = staticinvoke <io.vertx.codegen.CodeGenProcessor$GeneratedFile$lambda_generate_0__2503: java.util.Comparator bootstrap$()>();
staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(v0, v1);
v2 = new java.lang.StringBuilder;
specialinvoke v2.<java.lang.StringBuilder: void <init>()>();
v3 = 0;
label1:
v4 = virtualinvoke v0.<io.vertx.codegen.CodeGenProcessor$GeneratedFile: int size()>();
if v3 >= v4 goto label7;
v5 = virtualinvoke v0.<io.vertx.codegen.CodeGenProcessor$GeneratedFile: java.lang.Object get(int)>(v3);
label2:
v6 = v5.<io.vertx.codegen.CodeGenProcessor$ModelProcessing: io.vertx.codegen.Generator generator>;
v7 = v5.<io.vertx.codegen.CodeGenProcessor$ModelProcessing: io.vertx.codegen.Model model>;
v8 = virtualinvoke v0.<io.vertx.codegen.CodeGenProcessor$GeneratedFile: int size()>();
v9 = v0.<io.vertx.codegen.CodeGenProcessor$GeneratedFile: java.util.Map session>;
v10 = virtualinvoke v6.<io.vertx.codegen.Generator: java.lang.String render(io.vertx.codegen.Model,int,int,java.util.Map)>(v7, v3, v8, v9);
if v10 == null goto label6;
virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v10);
label3:
goto label6;
label4:
v11 := @caughtexception;
throw v11;
label5:
v12 := @caughtexception;
v13 = new io.vertx.codegen.GenException;
v14 = v5.<io.vertx.codegen.CodeGenProcessor$ModelProcessing: io.vertx.codegen.Model model>;
v15 = interfaceinvoke v14.<io.vertx.codegen.Model: javax.lang.model.element.Element getElement()>();
v16 = virtualinvoke v12.<java.lang.Exception: java.lang.String getMessage()>();
specialinvoke v13.<io.vertx.codegen.GenException: void <init>(javax.lang.model.element.Element,java.lang.String)>(v15, v16);
virtualinvoke v13.<io.vertx.codegen.GenException: java.lang.Throwable initCause(java.lang.Throwable)>(v12);
throw v13;
label6:
v3 = v3 + 1;
goto label1;
label7:
v17 = virtualinvoke v2.<java.lang.StringBuilder: java.lang.String toString()>();
return v17;
catch io.vertx.codegen.GenException from label2 to label3 with label4;
catch java.lang.Exception from label2 to label3 with label5;
}
}