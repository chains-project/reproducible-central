class io.vertx.codegen.type.TypeUse$1 extends java.lang.Object implements io.vertx.codegen.type.TypeUse$TypeInternalProvider
{
void <init>()
{
io.vertx.codegen.type.TypeUse$1 v0;
v0 := @this: io.vertx.codegen.type.TypeUse$1;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
private java.lang.reflect.Method getMethod(javax.'annotation'.processing.ProcessingEnvironment, javax.lang.model.element.ExecutableElement)
{
java.lang.Thread v3;
javax.lang.model.element.ExecutableElement v2;
javax.'annotation'.processing.ProcessingEnvironment v1;
java.lang.ClassLoader v4;
java.lang.reflect.Method v5;
io.vertx.codegen.type.TypeUse$1 v0;
v0 := @this: io.vertx.codegen.type.TypeUse$1;
v1 := @parameter0: javax.'annotation'.processing.ProcessingEnvironment;
v2 := @parameter1: javax.lang.model.element.ExecutableElement;
v3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v4 = virtualinvoke v3.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
v5 = staticinvoke <io.vertx.codegen.Helper: java.lang.reflect.Method getReflectMethod(java.lang.ClassLoader,javax.lang.model.element.ExecutableElement)>(v4, v2);
if v5 != null goto label1;
v5 = staticinvoke <io.vertx.codegen.Helper: java.lang.reflect.Method getReflectMethod(javax.'annotation'.processing.ProcessingEnvironment,javax.lang.model.element.ExecutableElement)>(v1, v2);
label1:
return v5;
}
public io.vertx.codegen.type.TypeUse$TypeInternal forParam(javax.'annotation'.processing.ProcessingEnvironment, javax.lang.model.element.ExecutableElement, int)
{
io.vertx.codegen.type.TypeUse$ReflectType v7;
javax.lang.model.element.ExecutableElement v2;
java.lang.reflect.AnnotatedType v6;
io.vertx.codegen.type.TypeUse$1 v0;
int v3;
javax.'annotation'.processing.ProcessingEnvironment v1;
java.lang.reflect.AnnotatedType[] v5;
java.lang.reflect.Method v4;
v0 := @this: io.vertx.codegen.type.TypeUse$1;
v1 := @parameter0: javax.'annotation'.processing.ProcessingEnvironment;
v2 := @parameter1: javax.lang.model.element.ExecutableElement;
v3 := @parameter2: int;
v4 = specialinvoke v0.<io.vertx.codegen.type.TypeUse$1: java.lang.reflect.Method getMethod(javax.'annotation'.processing.ProcessingEnvironment,javax.lang.model.element.ExecutableElement)>(v1, v2);
if v4 != null goto label1;
return null;
label1:
v5 = virtualinvoke v4.<java.lang.reflect.Method: java.lang.reflect.AnnotatedType[] getAnnotatedParameterTypes()>();
v6 = v5[v3];
v7 = new io.vertx.codegen.type.TypeUse$ReflectType;
specialinvoke v7.<io.vertx.codegen.type.TypeUse$ReflectType: void <init>(java.lang.reflect.AnnotatedType)>(v6);
return v7;
}
public io.vertx.codegen.type.TypeUse$TypeInternal forReturn(javax.'annotation'.processing.ProcessingEnvironment, javax.lang.model.element.ExecutableElement)
{
io.vertx.codegen.type.TypeUse$ReflectType v5;
javax.lang.model.element.ExecutableElement v2;
java.lang.reflect.AnnotatedType v4;
javax.'annotation'.processing.ProcessingEnvironment v1;
java.lang.reflect.Method v3;
io.vertx.codegen.type.TypeUse$1 v0;
v0 := @this: io.vertx.codegen.type.TypeUse$1;
v1 := @parameter0: javax.'annotation'.processing.ProcessingEnvironment;
v2 := @parameter1: javax.lang.model.element.ExecutableElement;
v3 = specialinvoke v0.<io.vertx.codegen.type.TypeUse$1: java.lang.reflect.Method getMethod(javax.'annotation'.processing.ProcessingEnvironment,javax.lang.model.element.ExecutableElement)>(v1, v2);
if v3 != null goto label1;
return null;
label1:
v4 = virtualinvoke v3.<java.lang.reflect.Method: java.lang.reflect.AnnotatedType getAnnotatedReturnType()>();
v5 = new io.vertx.codegen.type.TypeUse$ReflectType;
specialinvoke v5.<io.vertx.codegen.type.TypeUse$ReflectType: void <init>(java.lang.reflect.AnnotatedType)>(v4);
return v5;
}
}