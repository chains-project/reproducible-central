public class io.vertx.core.cli.ArgumentConverter extends java.lang.Object
{
private static final java.util.Base64$Decoder BASE64_DECODER;
private static final java.util.Base64$Encoder BASE64_ENCODER;
public void <init>()
{
io.vertx.core.cli.ArgumentConverter v0;
v0 := @this: io.vertx.core.cli.ArgumentConverter;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void fromJson(java.lang.Iterable, io.vertx.core.cli.Argument)
{
byte v6;
boolean v10, v11, v12, v13, v14, v16, v19, v22, v25, v27, v29, v3, v33, v35, v37, v39, v8, v9;
io.vertx.core.cli.Argument v1;
java.lang.Iterable v0;
int v31, v7;
java.util.Iterator v2;
java.lang.Object v15, v17, v18, v20, v21, v23, v24, v26, v28, v30, v32, v34, v36, v38, v4, v5;
v0 := @parameter0: java.lang.Iterable;
v1 := @parameter1: io.vertx.core.cli.Argument;
v2 = interfaceinvoke v0.<java.lang.Iterable: java.util.Iterator iterator()>();
label01:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label17;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
v5 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getKey()>();
v6 = -1;
v7 = virtualinvoke v5.<java.lang.String: int hashCode()>();
lookupswitch(v7)
{
case -1724546052: goto label04;
case -1217487446: goto label05;
case -745189887: goto label02;
case -659125328: goto label03;
case -393139297: goto label08;
case -191836244: goto label07;
case 100346066: goto label06;
default: goto label09;
};
label02:
v8 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("argName");
if v8 == 0 goto label09;
v6 = 0;
goto label09;
label03:
v9 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("defaultValue");
if v9 == 0 goto label09;
v6 = 1;
goto label09;
label04:
v10 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("description");
if v10 == 0 goto label09;
v6 = 2;
goto label09;
label05:
v11 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("hidden");
if v11 == 0 goto label09;
v6 = 3;
goto label09;
label06:
v12 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("index");
if v12 == 0 goto label09;
v6 = 4;
goto label09;
label07:
v13 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("multiValued");
if v13 == 0 goto label09;
v6 = 5;
goto label09;
label08:
v14 = virtualinvoke v5.<java.lang.String: boolean equals(java.lang.Object)>("required");
if v14 == 0 goto label09;
v6 = 6;
label09:
tableswitch(v6)
{
case 0: goto label10;
case 1: goto label11;
case 2: goto label12;
case 3: goto label13;
case 4: goto label14;
case 5: goto label15;
case 6: goto label16;
default: goto label01;
};
label10:
v15 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v16 = v15 instanceof java.lang.String;
if v16 == 0 goto label01;
v17 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
virtualinvoke v1.<io.vertx.core.cli.Argument: io.vertx.core.cli.Argument setArgName(java.lang.String)>(v17);
goto label01;
label11:
v18 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v19 = v18 instanceof java.lang.String;
if v19 == 0 goto label01;
v20 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
virtualinvoke v1.<io.vertx.core.cli.Argument: io.vertx.core.cli.Argument setDefaultValue(java.lang.String)>(v20);
goto label01;
label12:
v21 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v22 = v21 instanceof java.lang.String;
if v22 == 0 goto label01;
v23 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
virtualinvoke v1.<io.vertx.core.cli.Argument: io.vertx.core.cli.Argument setDescription(java.lang.String)>(v23);
goto label01;
label13:
v24 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v25 = v24 instanceof java.lang.Boolean;
if v25 == 0 goto label01;
v26 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v27 = virtualinvoke v26.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.cli.Argument: io.vertx.core.cli.Argument setHidden(boolean)>(v27);
goto label01;
label14:
v28 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v29 = v28 instanceof java.lang.Number;
if v29 == 0 goto label01;
v30 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v31 = virtualinvoke v30.<java.lang.Number: int intValue()>();
virtualinvoke v1.<io.vertx.core.cli.Argument: io.vertx.core.cli.Argument setIndex(int)>(v31);
goto label01;
label15:
v32 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v33 = v32 instanceof java.lang.Boolean;
if v33 == 0 goto label01;
v34 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v35 = virtualinvoke v34.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.cli.Argument: io.vertx.core.cli.Argument setMultiValued(boolean)>(v35);
goto label01;
label16:
v36 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v37 = v36 instanceof java.lang.Boolean;
if v37 == 0 goto label01;
v38 = interfaceinvoke v4.<java.util.Map$Entry: java.lang.Object getValue()>();
v39 = virtualinvoke v38.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<io.vertx.core.cli.Argument: io.vertx.core.cli.Argument setRequired(boolean)>(v39);
goto label01;
label17:
return;
}
static void toJson(io.vertx.core.cli.Argument, io.vertx.core.json.JsonObject)
{
io.vertx.core.json.JsonObject v1;
io.vertx.core.cli.Argument v0;
java.util.Map v2;
v0 := @parameter0: io.vertx.core.cli.Argument;
v1 := @parameter1: io.vertx.core.json.JsonObject;
v2 = virtualinvoke v1.<io.vertx.core.json.JsonObject: java.util.Map getMap()>();
staticinvoke <io.vertx.core.cli.ArgumentConverter: void toJson(io.vertx.core.cli.Argument,java.util.Map)>(v0, v2);
return;
}
static void toJson(io.vertx.core.cli.Argument, java.util.Map)
{
java.lang.Integer v11;
java.util.Map v1;
int v10;
java.lang.Boolean v13, v15, v9;
java.lang.String v2, v3, v4, v5, v6, v7;
boolean v12, v14, v8;
io.vertx.core.cli.Argument v0;
v0 := @parameter0: io.vertx.core.cli.Argument;
v1 := @parameter1: java.util.Map;
v2 = virtualinvoke v0.<io.vertx.core.cli.Argument: java.lang.String getArgName()>();
if v2 == null goto label1;
v3 = virtualinvoke v0.<io.vertx.core.cli.Argument: java.lang.String getArgName()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("argName", v3);
label1:
v4 = virtualinvoke v0.<io.vertx.core.cli.Argument: java.lang.String getDefaultValue()>();
if v4 == null goto label2;
v5 = virtualinvoke v0.<io.vertx.core.cli.Argument: java.lang.String getDefaultValue()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("defaultValue", v5);
label2:
v6 = virtualinvoke v0.<io.vertx.core.cli.Argument: java.lang.String getDescription()>();
if v6 == null goto label3;
v7 = virtualinvoke v0.<io.vertx.core.cli.Argument: java.lang.String getDescription()>();
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("description", v7);
label3:
v8 = virtualinvoke v0.<io.vertx.core.cli.Argument: boolean isHidden()>();
v9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v8);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hidden", v9);
v10 = virtualinvoke v0.<io.vertx.core.cli.Argument: int getIndex()>();
v11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v10);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("index", v11);
v12 = virtualinvoke v0.<io.vertx.core.cli.Argument: boolean isMultiValued()>();
v13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v12);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("multiValued", v13);
v14 = virtualinvoke v0.<io.vertx.core.cli.Argument: boolean isRequired()>();
v15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v14);
interfaceinvoke v1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("required", v15);
return;
}
static void <clinit>()
{
java.util.Base64$Encoder v1;
java.util.Base64$Decoder v0;
v0 = <io.vertx.core.json.impl.JsonUtil: java.util.Base64$Decoder BASE64_DECODER>;
<io.vertx.core.cli.ArgumentConverter: java.util.Base64$Decoder BASE64_DECODER> = v0;
v1 = <io.vertx.core.json.impl.JsonUtil: java.util.Base64$Encoder BASE64_ENCODER>;
<io.vertx.core.cli.ArgumentConverter: java.util.Base64$Encoder BASE64_ENCODER> = v1;
return;
}
}