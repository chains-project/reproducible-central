public class io.vertx.core.cli.UsageMessageFormatter extends java.lang.Object
{
public static final int DEFAULT_WIDTH;
public static final int DEFAULT_LEFT_PAD;
public static final int DEFAULT_DESC_PAD;
public static final java.lang.String DEFAULT_USAGE_PREFIX;
public static final java.lang.String DEFAULT_OPT_PREFIX;
public static final java.lang.String DEFAULT_LONG_OPT_PREFIX;
public static final java.lang.String DEFAULT_LONG_OPT_SEPARATOR;
public static final java.lang.String DEFAULT_ARG_NAME;
private int width;
private int leftPad;
private int descPad;
private java.lang.String usagePrefix;
private java.lang.String newLine;
private java.lang.String defaultOptionPrefix;
private java.lang.String defaultLongOptPrefix;
private java.lang.String defaultArgName;
private java.lang.String longOptSeparator;
protected java.util.Comparator optionComparator;
public void <init>()
{
io.vertx.core.cli.UsageMessageFormatter v0;
java.lang.String v1;
java.util.Comparator v2;
v0 := @this: io.vertx.core.cli.UsageMessageFormatter;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.cli.UsageMessageFormatter: int width> = 80;
v0.<io.vertx.core.cli.UsageMessageFormatter: int leftPad> = 1;
v0.<io.vertx.core.cli.UsageMessageFormatter: int descPad> = 3;
v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String usagePrefix> = "Usage: ";
v1 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();
v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String newLine> = v1;
v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String defaultOptionPrefix> = "-";
v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String defaultLongOptPrefix> = "--";
v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String defaultArgName> = "arg";
v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String longOptSeparator> = " ";
v2 = staticinvoke <io.vertx.core.cli.UsageMessageFormatter$lambda_new_0__1214: java.util.Comparator bootstrap$()>();
v0.<io.vertx.core.cli.UsageMessageFormatter: java.util.Comparator optionComparator> = v2;
return;
}
public void setWidth(int)
{
int v1;
io.vertx.core.cli.UsageMessageFormatter v0;
v0 := @this: io.vertx.core.cli.UsageMessageFormatter;
v1 := @parameter0: int;
v0.<io.vertx.core.cli.UsageMessageFormatter: int width> = v1;
return;
}
public int getWidth()
{
int v1;
io.vertx.core.cli.UsageMessageFormatter v0;
v0 := @this: io.vertx.core.cli.UsageMessageFormatter;
v1 = v0.<io.vertx.core.cli.UsageMessageFormatter: int width>;
return v1;
}
public void setLeftPadding(int)
{
int v1;
io.vertx.core.cli.UsageMessageFormatter v0;
v0 := @this: io.vertx.core.cli.UsageMessageFormatter;
v1 := @parameter0: int;
v0.<io.vertx.core.cli.UsageMessageFormatter: int leftPad> = v1;
return;
}
public int getLeftPadding()
{
int v1;
io.vertx.core.cli.UsageMessageFormatter v0;
v0 := @this: io.vertx.core.cli.UsageMessageFormatter;
v1 = v0.<io.vertx.core.cli.UsageMessageFormatter: int leftPad>;
return v1;
}
public void setDescPadding(int)
{
int v1;
io.vertx.core.cli.UsageMessageFormatter v0;
v0 := @this: io.vertx.core.cli.UsageMessageFormatter;
v1 := @parameter0: int;
v0.<io.vertx.core.cli.UsageMessageFormatter: int descPad> = v1;
return;
}
public int getDescPadding()
{
int v1;
io.vertx.core.cli.UsageMessageFormatter v0;
v0 := @this: io.vertx.core.cli.UsageMessageFormatter;
v1 = v0.<io.vertx.core.cli.UsageMessageFormatter: int descPad>;
return v1;
}
public void setUsagePrefix(java.lang.String)
{
io.vertx.core.cli.UsageMessageFormatter v0;
java.lang.String v1;
v0 := @this: io.vertx.core.cli.UsageMessageFormatter;
v1 := @parameter0: java.lang.String;
v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String usagePrefix> = v1;
return;
}
public java.lang.String getUsagePrefix()
{
io.vertx.core.cli.UsageMessageFormatter v0;
java.lang.String v1;
v0 := @this: io.vertx.core.cli.UsageMessageFormatter;
v1 = v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String usagePrefix>;
return v1;
}
public void setNewLine(java.lang.String)
{
io.vertx.core.cli.UsageMessageFormatter v0;
java.lang.String v1;
v0 := @this: io.vertx.core.cli.UsageMessageFormatter;
v1 := @parameter0: java.lang.String;
v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String newLine> = v1;
return;
}
public java.lang.String getNewLine()
{
io.vertx.core.cli.UsageMessageFormatter v0;
java.lang.String v1;
v0 := @this: io.vertx.core.cli.UsageMessageFormatter;
v1 = v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String newLine>;
return v1;
}
public void setOptionPrefix(java.lang.String)
{
io.vertx.core.cli.UsageMessageFormatter v0;
java.lang.String v1;
v0 := @this: io.vertx.core.cli.UsageMessageFormatter;
v1 := @parameter0: java.lang.String;
v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String defaultOptionPrefix> = v1;
return;
}
public java.lang.String getOptionPrefix()
{
io.vertx.core.cli.UsageMessageFormatter v0;
java.lang.String v1;
v0 := @this: io.vertx.core.cli.UsageMessageFormatter;
v1 = v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String defaultOptionPrefix>;
return v1;
}
public void setLongOptionPrefix(java.lang.String)
{
io.vertx.core.cli.UsageMessageFormatter v0;
java.lang.String v1;
v0 := @this: io.vertx.core.cli.UsageMessageFormatter;
v1 := @parameter0: java.lang.String;
v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String defaultLongOptPrefix> = v1;
return;
}
public java.lang.String getLongOptionPrefix()
{
io.vertx.core.cli.UsageMessageFormatter v0;
java.lang.String v1;
v0 := @this: io.vertx.core.cli.UsageMessageFormatter;
v1 = v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String defaultLongOptPrefix>;
return v1;
}
public void setLongOptionSeparator(java.lang.String)
{
io.vertx.core.cli.UsageMessageFormatter v0;
java.lang.String v1;
v0 := @this: io.vertx.core.cli.UsageMessageFormatter;
v1 := @parameter0: java.lang.String;
v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String longOptSeparator> = v1;
return;
}
public java.lang.String getLongOptionSeparator()
{
io.vertx.core.cli.UsageMessageFormatter v0;
java.lang.String v1;
v0 := @this: io.vertx.core.cli.UsageMessageFormatter;
v1 = v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String longOptSeparator>;
return v1;
}
public void setArgName(java.lang.String)
{
io.vertx.core.cli.UsageMessageFormatter v0;
java.lang.String v1;
v0 := @this: io.vertx.core.cli.UsageMessageFormatter;
v1 := @parameter0: java.lang.String;
v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String defaultArgName> = v1;
return;
}
public java.lang.String getArgName()
{
io.vertx.core.cli.UsageMessageFormatter v0;
java.lang.String v1;
v0 := @this: io.vertx.core.cli.UsageMessageFormatter;
v1 = v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String defaultArgName>;
return v1;
}
public java.util.Comparator getOptionComparator()
{
io.vertx.core.cli.UsageMessageFormatter v0;
java.util.Comparator v1;
v0 := @this: io.vertx.core.cli.UsageMessageFormatter;
v1 = v0.<io.vertx.core.cli.UsageMessageFormatter: java.util.Comparator optionComparator>;
return v1;
}
public void setOptionComparator(java.util.Comparator)
{
io.vertx.core.cli.UsageMessageFormatter v0;
java.util.Comparator v1;
v0 := @this: io.vertx.core.cli.UsageMessageFormatter;
v1 := @parameter0: java.util.Comparator;
v0.<io.vertx.core.cli.UsageMessageFormatter: java.util.Comparator optionComparator> = v1;
return;
}
protected void appendOption(java.lang.StringBuilder, io.vertx.core.cli.Option)
{
io.vertx.core.cli.Option v2;
java.util.stream.Collector v18;
boolean v12, v14, v20, v25, v3, v31, v4, v6;
java.util.Set v11, v16;
java.util.stream.Stream v17;
java.lang.StringBuilder v1, v27, v30, v7, v9;
int v23;
java.lang.String v10, v13, v15, v21, v22, v24, v26, v28, v29, v5, v8;
io.vertx.core.cli.UsageMessageFormatter v0;
java.lang.Object v19;
v0 := @this: io.vertx.core.cli.UsageMessageFormatter;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: io.vertx.core.cli.Option;
v3 = virtualinvoke v2.<io.vertx.core.cli.Option: boolean isHidden()>();
if v3 == 0 goto label01;
return;
label01:
v4 = virtualinvoke v2.<io.vertx.core.cli.Option: boolean isRequired()>();
if v4 != 0 goto label02;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");
label02:
v5 = virtualinvoke v2.<io.vertx.core.cli.Option: java.lang.String getShortName()>();
v6 = staticinvoke <io.vertx.core.cli.UsageMessageFormatter: boolean isNullOrEmpty(java.lang.String)>(v5);
if v6 != 0 goto label03;
v7 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");
v8 = virtualinvoke v2.<io.vertx.core.cli.Option: java.lang.String getShortName()>();
virtualinvoke v7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v8);
goto label04;
label03:
v9 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--");
v10 = virtualinvoke v2.<io.vertx.core.cli.Option: java.lang.String getLongName()>();
virtualinvoke v9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v10);
label04:
v11 = virtualinvoke v2.<io.vertx.core.cli.Option: java.util.Set getChoices()>();
v12 = interfaceinvoke v11.<java.util.Set: boolean isEmpty()>();
if v12 != 0 goto label07;
v13 = virtualinvoke v2.<io.vertx.core.cli.Option: java.lang.String getShortName()>();
v14 = staticinvoke <io.vertx.core.cli.UsageMessageFormatter: boolean isNullOrEmpty(java.lang.String)>(v13);
if v14 == 0 goto label05;
v15 = virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String getLongOptionSeparator()>();
goto label06;
label05:
v15 = " ";
label06:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v15);
v16 = virtualinvoke v2.<io.vertx.core.cli.Option: java.util.Set getChoices()>();
v17 = interfaceinvoke v16.<java.util.Set: java.util.stream.Stream stream()>();
v18 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>(", ", "{", "}");
v19 = interfaceinvoke v17.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v18);
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v19);
goto label13;
label07:
v20 = virtualinvoke v2.<io.vertx.core.cli.Option: boolean acceptValue()>();
if v20 == 0 goto label13;
v21 = virtualinvoke v2.<io.vertx.core.cli.Option: java.lang.String getArgName()>();
if v21 == null goto label08;
v22 = virtualinvoke v2.<io.vertx.core.cli.Option: java.lang.String getArgName()>();
v23 = virtualinvoke v22.<java.lang.String: int length()>();
if v23 == 0 goto label13;
label08:
v24 = virtualinvoke v2.<io.vertx.core.cli.Option: java.lang.String getShortName()>();
v25 = staticinvoke <io.vertx.core.cli.UsageMessageFormatter: boolean isNullOrEmpty(java.lang.String)>(v24);
if v25 == 0 goto label09;
v26 = virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String getLongOptionSeparator()>();
goto label10;
label09:
v26 = " ";
label10:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v26);
v27 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");
v28 = virtualinvoke v2.<io.vertx.core.cli.Option: java.lang.String getArgName()>();
if v28 == null goto label11;
v29 = virtualinvoke v2.<io.vertx.core.cli.Option: java.lang.String getArgName()>();
goto label12;
label11:
v29 = virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String getArgName()>();
label12:
v30 = virtualinvoke v27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v29);
virtualinvoke v30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");
label13:
v31 = virtualinvoke v2.<io.vertx.core.cli.Option: boolean isRequired()>();
if v31 != 0 goto label14;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
label14:
return;
}
protected void appendArgument(java.lang.StringBuilder, io.vertx.core.cli.Argument, boolean)
{
io.vertx.core.cli.UsageMessageFormatter v0;
java.lang.StringBuilder v1;
java.lang.String v5;
io.vertx.core.cli.Argument v2;
boolean v3, v4, v6;
v0 := @this: io.vertx.core.cli.UsageMessageFormatter;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: io.vertx.core.cli.Argument;
v3 := @parameter2: boolean;
v4 = virtualinvoke v2.<io.vertx.core.cli.Argument: boolean isHidden()>();
if v4 == 0 goto label1;
return;
label1:
if v3 != 0 goto label2;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");
label2:
v5 = virtualinvoke v2.<io.vertx.core.cli.Argument: java.lang.String getArgName()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v5);
v6 = virtualinvoke v2.<io.vertx.core.cli.Argument: boolean isMultiValued()>();
if v6 == 0 goto label3;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...");
label3:
if v3 != 0 goto label4;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");
label4:
return;
}
public void usage(java.lang.StringBuilder, io.vertx.core.cli.CLI)
{
io.vertx.core.cli.UsageMessageFormatter v0;
java.lang.StringBuilder v1;
io.vertx.core.cli.CLI v2;
v0 := @this: io.vertx.core.cli.UsageMessageFormatter;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: io.vertx.core.cli.CLI;
virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: void usage(java.lang.StringBuilder,java.lang.String,io.vertx.core.cli.CLI)>(v1, null, v2);
return;
}
public void usage(java.lang.StringBuilder, java.lang.String, io.vertx.core.cli.CLI)
{
int v13, v7;
java.lang.String v10, v11, v12, v14, v15, v2, v4, v5, v6, v8, v9;
boolean v17, v19;
io.vertx.core.cli.UsageMessageFormatter v0;
java.util.List v16, v18, v20, v21;
io.vertx.core.cli.CLI v3;
java.lang.StringBuilder v1;
v0 := @this: io.vertx.core.cli.UsageMessageFormatter;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.cli.CLI;
virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: void computeUsageLine(java.lang.StringBuilder,java.lang.String,io.vertx.core.cli.CLI)>(v1, v2, v3);
v4 = interfaceinvoke v3.<io.vertx.core.cli.CLI: java.lang.String getSummary()>();
if v4 == null goto label1;
v5 = interfaceinvoke v3.<io.vertx.core.cli.CLI: java.lang.String getSummary()>();
v6 = virtualinvoke v5.<java.lang.String: java.lang.String trim()>();
v7 = virtualinvoke v6.<java.lang.String: int length()>();
if v7 <= 0 goto label1;
v8 = interfaceinvoke v3.<io.vertx.core.cli.CLI: java.lang.String getSummary()>();
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\n\u0001");
virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: void buildWrapped(java.lang.StringBuilder,java.lang.String)>(v1, v9);
label1:
v10 = interfaceinvoke v3.<io.vertx.core.cli.CLI: java.lang.String getDescription()>();
if v10 == null goto label2;
v11 = interfaceinvoke v3.<io.vertx.core.cli.CLI: java.lang.String getDescription()>();
v12 = virtualinvoke v11.<java.lang.String: java.lang.String trim()>();
v13 = virtualinvoke v12.<java.lang.String: int length()>();
if v13 <= 0 goto label2;
v14 = interfaceinvoke v3.<io.vertx.core.cli.CLI: java.lang.String getDescription()>();
v15 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v14) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\n\u0001");
virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: void buildWrapped(java.lang.StringBuilder,java.lang.String)>(v1, v15);
label2:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
v16 = interfaceinvoke v3.<io.vertx.core.cli.CLI: java.util.List getOptions()>();
v17 = interfaceinvoke v16.<java.util.List: boolean isEmpty()>();
if v17 == 0 goto label3;
v18 = interfaceinvoke v3.<io.vertx.core.cli.CLI: java.util.List getArguments()>();
v19 = interfaceinvoke v18.<java.util.List: boolean isEmpty()>();
if v19 == 0 goto label3;
return;
label3:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Options and Arguments:\n");
v20 = interfaceinvoke v3.<io.vertx.core.cli.CLI: java.util.List getOptions()>();
v21 = interfaceinvoke v3.<io.vertx.core.cli.CLI: java.util.List getArguments()>();
virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: void computeOptionsAndArguments(java.lang.StringBuilder,java.util.List,java.util.List)>(v1, v20, v21);
return;
}
public void computeUsage(java.lang.StringBuilder, java.lang.String)
{
io.vertx.core.cli.UsageMessageFormatter v0;
int v3, v4, v6, v7;
java.lang.StringBuilder v1;
java.lang.String v2, v5, v8, v9;
v0 := @this: io.vertx.core.cli.UsageMessageFormatter;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v2.<java.lang.String: int indexOf(int)>(32);
v4 = v3 + 1;
v5 = virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String getUsagePrefix()>();
v6 = virtualinvoke v5.<java.lang.String: int length()>();
v7 = v6 + v4;
v8 = virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String getUsagePrefix()>();
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v8, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001");
virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: void buildWrapped(java.lang.StringBuilder,int,java.lang.String)>(v1, v7, v9);
return;
}
public void computeUsageLine(java.lang.StringBuilder, java.lang.String, io.vertx.core.cli.CLI)
{
int v22, v23;
java.lang.String v2, v21, v24, v5, v6, v8;
boolean v14, v18, v20, v7;
java.util.Iterator v13, v17;
io.vertx.core.cli.UsageMessageFormatter v0;
java.util.List v10, v12, v16;
io.vertx.core.cli.CLI v3;
java.lang.Object v15, v19;
java.lang.StringBuilder v1, v25, v26, v4;
java.util.Comparator v11, v9;
v0 := @this: io.vertx.core.cli.UsageMessageFormatter;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: io.vertx.core.cli.CLI;
if v2 != null goto label1;
v4 = new java.lang.StringBuilder;
v5 = virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String getUsagePrefix()>();
specialinvoke v4.<java.lang.StringBuilder: void <init>(java.lang.String)>(v5);
goto label2;
label1:
v6 = virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String getUsagePrefix()>();
specialinvoke v25.<java.lang.StringBuilder: void <init>(java.lang.String)>(v6);
v7 = virtualinvoke v2.<java.lang.String: boolean endsWith(java.lang.String)>(" ");
if v7 != 0 goto label2;
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
label2:
v8 = interfaceinvoke v3.<io.vertx.core.cli.CLI: java.lang.String getName()>();
virtualinvoke v26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
v9 = virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: java.util.Comparator getOptionComparator()>();
if v9 == null goto label3;
v10 = interfaceinvoke v3.<io.vertx.core.cli.CLI: java.util.List getOptions()>();
v11 = virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: java.util.Comparator getOptionComparator()>();
staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(v10, v11);
label3:
v12 = interfaceinvoke v3.<io.vertx.core.cli.CLI: java.util.List getOptions()>();
v13 = interfaceinvoke v12.<java.util.List: java.util.Iterator iterator()>();
label4:
v14 = interfaceinvoke v13.<java.util.Iterator: boolean hasNext()>();
if v14 == 0 goto label5;
v15 = interfaceinvoke v13.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: void appendOption(java.lang.StringBuilder,io.vertx.core.cli.Option)>(v4, v15);
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
goto label4;
label5:
v16 = interfaceinvoke v3.<io.vertx.core.cli.CLI: java.util.List getArguments()>();
v17 = interfaceinvoke v16.<java.util.List: java.util.Iterator iterator()>();
label6:
v18 = interfaceinvoke v17.<java.util.Iterator: boolean hasNext()>();
if v18 == 0 goto label7;
v19 = interfaceinvoke v17.<java.util.Iterator: java.lang.Object next()>();
v20 = virtualinvoke v19.<io.vertx.core.cli.Argument: boolean isRequired()>();
virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: void appendArgument(java.lang.StringBuilder,io.vertx.core.cli.Argument,boolean)>(v4, v19, v20);
virtualinvoke v4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");
goto label6;
label7:
v21 = virtualinvoke v4.<java.lang.StringBuilder: java.lang.String toString()>();
v22 = virtualinvoke v21.<java.lang.String: int indexOf(int)>(32);
v23 = v22 + 1;
v24 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v2, v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001");
virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: void buildWrapped(java.lang.StringBuilder,int,java.lang.String)>(v1, v23, v24);
return;
}
public void computeOptionsAndArguments(java.lang.StringBuilder, java.util.List, java.util.List)
{
io.vertx.core.cli.UsageMessageFormatter v0;
java.util.List v2, v3;
java.lang.StringBuilder v1;
java.lang.String v4;
v0 := @this: io.vertx.core.cli.UsageMessageFormatter;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: java.util.List;
v3 := @parameter2: java.util.List;
virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.StringBuilder renderOptionsAndArguments(java.lang.StringBuilder,java.util.List,java.util.List)>(v1, v2, v3);
v4 = v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String newLine>;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v4);
return;
}
public void buildWrapped(java.lang.StringBuilder, java.lang.String)
{
io.vertx.core.cli.UsageMessageFormatter v0;
java.lang.StringBuilder v1;
java.lang.String v2;
v0 := @this: io.vertx.core.cli.UsageMessageFormatter;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: java.lang.String;
virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: void buildWrapped(java.lang.StringBuilder,int,java.lang.String)>(v1, 0, v2);
return;
}
public void buildWrapped(java.lang.StringBuilder, int, java.lang.String)
{
io.vertx.core.cli.UsageMessageFormatter v0;
int v2, v4;
java.lang.StringBuilder v1;
java.lang.String v3, v5;
v0 := @this: io.vertx.core.cli.UsageMessageFormatter;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: int;
v3 := @parameter2: java.lang.String;
v4 = v0.<io.vertx.core.cli.UsageMessageFormatter: int width>;
virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.Appendable renderWrappedTextBlock(java.lang.StringBuilder,int,int,java.lang.String)>(v1, v4, v2, v3);
v5 = v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String newLine>;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v5);
return;
}
protected java.lang.StringBuilder renderCommands(java.lang.StringBuilder, java.util.Collection)
{
boolean v10, v12, v20, v22, v36;
java.util.Collection v2;
java.lang.StringBuilder v1, v13, v14, v15, v23;
java.util.ArrayList v8;
int v17, v18, v24, v27, v28, v29, v3, v31, v32, v34, v5, v7;
java.lang.String v16, v26, v30, v33, v35, v37, v4, v6;
java.util.Iterator v19, v9;
io.vertx.core.cli.UsageMessageFormatter v0;
java.lang.Object v11, v21, v25;
v0 := @this: io.vertx.core.cli.UsageMessageFormatter;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: java.util.Collection;
v3 = v0.<io.vertx.core.cli.UsageMessageFormatter: int leftPad>;
v4 = staticinvoke <io.vertx.core.cli.UsageMessageFormatter: java.lang.String createPadding(int)>(v3);
v5 = v0.<io.vertx.core.cli.UsageMessageFormatter: int descPad>;
v6 = staticinvoke <io.vertx.core.cli.UsageMessageFormatter: java.lang.String createPadding(int)>(v5);
v7 = 0;
v8 = new java.util.ArrayList;
specialinvoke v8.<java.util.ArrayList: void <init>()>();
v9 = interfaceinvoke v2.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v10 = interfaceinvoke v9.<java.util.Iterator: boolean hasNext()>();
if v10 == 0 goto label2;
v11 = interfaceinvoke v9.<java.util.Iterator: java.lang.Object next()>();
v12 = interfaceinvoke v11.<io.vertx.core.cli.CLI: boolean isHidden()>();
if v12 != 0 goto label1;
v13 = new java.lang.StringBuilder;
specialinvoke v13.<java.lang.StringBuilder: void <init>()>();
v14 = virtualinvoke v13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v4);
v15 = virtualinvoke v14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   ");
v16 = interfaceinvoke v11.<io.vertx.core.cli.CLI: java.lang.String getName()>();
virtualinvoke v15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v16);
interfaceinvoke v8.<java.util.List: boolean add(java.lang.Object)>(v13);
v17 = virtualinvoke v13.<java.lang.StringBuilder: int length()>();
v7 = staticinvoke <java.lang.Math: int max(int,int)>(v17, v7);
goto label1;
label2:
v18 = 0;
v19 = interfaceinvoke v2.<java.util.Collection: java.util.Iterator iterator()>();
label3:
v20 = interfaceinvoke v19.<java.util.Iterator: boolean hasNext()>();
if v20 == 0 goto label5;
v21 = interfaceinvoke v19.<java.util.Iterator: java.lang.Object next()>();
v22 = interfaceinvoke v21.<io.vertx.core.cli.CLI: boolean isHidden()>();
if v22 != 0 goto label3;
v23 = new java.lang.StringBuilder;
v24 = v18;
v18 = v18 + 1;
v25 = interfaceinvoke v8.<java.util.List: java.lang.Object get(int)>(v24);
v26 = virtualinvoke v25.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke v23.<java.lang.StringBuilder: void <init>(java.lang.String)>(v26);
v27 = virtualinvoke v23.<java.lang.StringBuilder: int length()>();
if v27 >= v7 goto label4;
v28 = virtualinvoke v23.<java.lang.StringBuilder: int length()>();
v29 = v7 - v28;
v30 = staticinvoke <io.vertx.core.cli.UsageMessageFormatter: java.lang.String createPadding(int)>(v29);
virtualinvoke v23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v30);
label4:
virtualinvoke v23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v6);
v31 = v0.<io.vertx.core.cli.UsageMessageFormatter: int descPad>;
v32 = v7 + v31;
v33 = interfaceinvoke v21.<io.vertx.core.cli.CLI: java.lang.String getSummary()>();
virtualinvoke v23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v33);
v34 = v0.<io.vertx.core.cli.UsageMessageFormatter: int width>;
v35 = virtualinvoke v23.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.StringBuilder renderWrappedText(java.lang.StringBuilder,int,int,java.lang.String)>(v1, v34, v32, v35);
v36 = interfaceinvoke v19.<java.util.Iterator: boolean hasNext()>();
if v36 == 0 goto label3;
v37 = virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String getNewLine()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v37);
goto label3;
label5:
return v1;
}
public static boolean isNullOrEmpty(java.lang.String)
{
int v2;
java.lang.String v0, v1;
boolean v3;
v0 := @parameter0: java.lang.String;
if v0 == null goto label1;
v1 = virtualinvoke v0.<java.lang.String: java.lang.String trim()>();
v2 = virtualinvoke v1.<java.lang.String: int length()>();
if v2 != 0 goto label2;
label1:
v3 = 1;
goto label3;
label2:
v3 = 0;
label3:
return v3;
}
protected java.lang.StringBuilder renderOptionsAndArguments(java.lang.StringBuilder, java.util.List, java.util.List)
{
java.util.stream.Collector v41;
java.util.Set v34, v39;
java.util.stream.Stream v40;
java.lang.StringBuilder v1, v15, v19, v20, v22, v24, v26, v30, v32, v49, v51, v56, v58, v59, v61, v68, v91;
java.util.ArrayList v9;
java.lang.String v101, v102, v104, v106, v17, v21, v23, v25, v27, v28, v31, v33, v36, v38, v44, v46, v48, v5, v50, v60, v7, v71, v75, v78, v79, v81, v83, v86, v94, v98;
io.vertx.core.cli.UsageMessageFormatter v0;
boolean v105, v13, v16, v18, v29, v35, v37, v43, v47, v54, v57, v65, v67, v82, v84, v85, v88, v90;
java.util.List v2, v3;
int v100, v103, v4, v45, v52, v6, v62, v63, v69, v72, v73, v74, v76, v77, v8, v80, v92, v95, v96, v97, v99;
java.util.Iterator v12, v53, v64, v87;
java.lang.Object v14, v42, v55, v66, v70, v89, v93;
java.util.Comparator v10, v11;
v0 := @this: io.vertx.core.cli.UsageMessageFormatter;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: java.util.List;
v3 := @parameter2: java.util.List;
v4 = v0.<io.vertx.core.cli.UsageMessageFormatter: int leftPad>;
v5 = staticinvoke <io.vertx.core.cli.UsageMessageFormatter: java.lang.String createPadding(int)>(v4);
v6 = v0.<io.vertx.core.cli.UsageMessageFormatter: int descPad>;
v7 = staticinvoke <io.vertx.core.cli.UsageMessageFormatter: java.lang.String createPadding(int)>(v6);
v8 = 0;
v9 = new java.util.ArrayList;
specialinvoke v9.<java.util.ArrayList: void <init>()>();
v10 = virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: java.util.Comparator getOptionComparator()>();
if v10 == null goto label01;
v11 = virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: java.util.Comparator getOptionComparator()>();
staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(v2, v11);
label01:
v12 = interfaceinvoke v2.<java.util.List: java.util.Iterator iterator()>();
label02:
v13 = interfaceinvoke v12.<java.util.Iterator: boolean hasNext()>();
if v13 == 0 goto label14;
v14 = interfaceinvoke v12.<java.util.Iterator: java.lang.Object next()>();
v15 = new java.lang.StringBuilder;
specialinvoke v15.<java.lang.StringBuilder: void <init>()>();
v16 = virtualinvoke v14.<io.vertx.core.cli.Option: boolean isHidden()>();
if v16 != 0 goto label02;
v17 = virtualinvoke v14.<io.vertx.core.cli.Option: java.lang.String getShortName()>();
v18 = staticinvoke <io.vertx.core.cli.UsageMessageFormatter: boolean isNullOrEmpty(java.lang.String)>(v17);
if v18 == 0 goto label03;
v19 = virtualinvoke v15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v5);
v20 = virtualinvoke v19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   ");
v21 = virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String getLongOptionPrefix()>();
v22 = virtualinvoke v20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v21);
v23 = virtualinvoke v14.<io.vertx.core.cli.Option: java.lang.String getLongName()>();
virtualinvoke v22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v23);
goto label04;
label03:
v24 = virtualinvoke v15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v5);
v25 = virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String getOptionPrefix()>();
v26 = virtualinvoke v24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v25);
v27 = virtualinvoke v14.<io.vertx.core.cli.Option: java.lang.String getShortName()>();
virtualinvoke v26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v27);
v28 = virtualinvoke v14.<io.vertx.core.cli.Option: java.lang.String getLongName()>();
v29 = staticinvoke <io.vertx.core.cli.UsageMessageFormatter: boolean isNullOrEmpty(java.lang.String)>(v28);
if v29 != 0 goto label04;
v30 = virtualinvoke v15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);
v31 = virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String getLongOptionPrefix()>();
v32 = virtualinvoke v30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v31);
v33 = virtualinvoke v14.<io.vertx.core.cli.Option: java.lang.String getLongName()>();
virtualinvoke v32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v33);
label04:
v34 = virtualinvoke v14.<io.vertx.core.cli.Option: java.util.Set getChoices()>();
v35 = interfaceinvoke v34.<java.util.Set: boolean isEmpty()>();
if v35 != 0 goto label07;
v36 = virtualinvoke v14.<io.vertx.core.cli.Option: java.lang.String getLongName()>();
v37 = staticinvoke <io.vertx.core.cli.UsageMessageFormatter: boolean isNullOrEmpty(java.lang.String)>(v36);
if v37 != 0 goto label05;
v38 = v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String longOptSeparator>;
goto label06;
label05:
v38 = " ";
label06:
virtualinvoke v15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v38);
v39 = virtualinvoke v14.<io.vertx.core.cli.Option: java.util.Set getChoices()>();
v40 = interfaceinvoke v39.<java.util.Set: java.util.stream.Stream stream()>();
v41 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>(", ", "{", "}");
v42 = interfaceinvoke v40.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v41);
virtualinvoke v15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v42);
goto label13;
label07:
v43 = virtualinvoke v14.<io.vertx.core.cli.Option: boolean acceptValue()>();
if v43 == 0 goto label13;
v44 = virtualinvoke v14.<io.vertx.core.cli.Option: java.lang.String getArgName()>();
if v44 == null goto label08;
v45 = virtualinvoke v44.<java.lang.String: int length()>();
if v45 != 0 goto label08;
virtualinvoke v15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);
goto label13;
label08:
v46 = virtualinvoke v14.<io.vertx.core.cli.Option: java.lang.String getLongName()>();
v47 = staticinvoke <io.vertx.core.cli.UsageMessageFormatter: boolean isNullOrEmpty(java.lang.String)>(v46);
if v47 != 0 goto label09;
v48 = v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String longOptSeparator>;
goto label10;
label09:
v48 = " ";
label10:
virtualinvoke v15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v48);
v49 = virtualinvoke v15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");
if v44 == null goto label11;
v50 = virtualinvoke v14.<io.vertx.core.cli.Option: java.lang.String getArgName()>();
goto label12;
label11:
v50 = virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String getArgName()>();
label12:
v51 = virtualinvoke v49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v50);
virtualinvoke v51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");
label13:
interfaceinvoke v9.<java.util.List: boolean add(java.lang.Object)>(v15);
v52 = virtualinvoke v15.<java.lang.StringBuilder: int length()>();
v8 = staticinvoke <java.lang.Math: int max(int,int)>(v52, v8);
goto label02;
label14:
v53 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
label15:
v54 = interfaceinvoke v53.<java.util.Iterator: boolean hasNext()>();
if v54 == 0 goto label16;
v55 = interfaceinvoke v53.<java.util.Iterator: java.lang.Object next()>();
v56 = new java.lang.StringBuilder;
specialinvoke v56.<java.lang.StringBuilder: void <init>()>();
v57 = virtualinvoke v55.<io.vertx.core.cli.Argument: boolean isHidden()>();
if v57 != 0 goto label15;
v58 = virtualinvoke v56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v5);
v59 = virtualinvoke v58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");
v60 = virtualinvoke v55.<io.vertx.core.cli.Argument: java.lang.String getArgName()>();
v61 = virtualinvoke v59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v60);
virtualinvoke v61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");
interfaceinvoke v9.<java.util.List: boolean add(java.lang.Object)>(v56);
v62 = virtualinvoke v56.<java.lang.StringBuilder: int length()>();
v8 = staticinvoke <java.lang.Math: int max(int,int)>(v62, v8);
goto label15;
label16:
v63 = 0;
v64 = interfaceinvoke v2.<java.util.List: java.util.Iterator iterator()>();
label17:
v65 = interfaceinvoke v64.<java.util.Iterator: boolean hasNext()>();
if v65 == 0 goto label20;
v66 = interfaceinvoke v64.<java.util.Iterator: java.lang.Object next()>();
v67 = virtualinvoke v66.<io.vertx.core.cli.Option: boolean isHidden()>();
if v67 != 0 goto label17;
v68 = new java.lang.StringBuilder;
v69 = v63;
v63 = v63 + 1;
v70 = interfaceinvoke v9.<java.util.List: java.lang.Object get(int)>(v69);
v71 = virtualinvoke v70.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke v68.<java.lang.StringBuilder: void <init>(java.lang.String)>(v71);
v72 = virtualinvoke v68.<java.lang.StringBuilder: int length()>();
if v72 >= v8 goto label18;
v73 = virtualinvoke v68.<java.lang.StringBuilder: int length()>();
v74 = v8 - v73;
v75 = staticinvoke <io.vertx.core.cli.UsageMessageFormatter: java.lang.String createPadding(int)>(v74);
virtualinvoke v68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v75);
label18:
virtualinvoke v68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v7);
v76 = v0.<io.vertx.core.cli.UsageMessageFormatter: int descPad>;
v77 = v8 + v76;
v78 = virtualinvoke v66.<io.vertx.core.cli.Option: java.lang.String getDescription()>();
if v78 == null goto label19;
v79 = virtualinvoke v66.<io.vertx.core.cli.Option: java.lang.String getDescription()>();
virtualinvoke v68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v79);
label19:
v80 = v0.<io.vertx.core.cli.UsageMessageFormatter: int width>;
v81 = virtualinvoke v68.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.StringBuilder renderWrappedText(java.lang.StringBuilder,int,int,java.lang.String)>(v1, v80, v77, v81);
v82 = interfaceinvoke v64.<java.util.Iterator: boolean hasNext()>();
if v82 == 0 goto label17;
v83 = virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String getNewLine()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v83);
goto label17;
label20:
v84 = interfaceinvoke v2.<java.util.List: boolean isEmpty()>();
if v84 != 0 goto label21;
v85 = interfaceinvoke v3.<java.util.List: boolean isEmpty()>();
if v85 != 0 goto label21;
v86 = virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String getNewLine()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v86);
label21:
v87 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
label22:
v88 = interfaceinvoke v87.<java.util.Iterator: boolean hasNext()>();
if v88 == 0 goto label25;
v89 = interfaceinvoke v87.<java.util.Iterator: java.lang.Object next()>();
v90 = virtualinvoke v89.<io.vertx.core.cli.Argument: boolean isHidden()>();
if v90 != 0 goto label22;
v91 = new java.lang.StringBuilder;
v92 = v63;
v63 = v63 + 1;
v93 = interfaceinvoke v9.<java.util.List: java.lang.Object get(int)>(v92);
v94 = virtualinvoke v93.<java.lang.StringBuilder: java.lang.String toString()>();
specialinvoke v91.<java.lang.StringBuilder: void <init>(java.lang.String)>(v94);
v95 = virtualinvoke v91.<java.lang.StringBuilder: int length()>();
if v95 >= v8 goto label23;
v96 = virtualinvoke v91.<java.lang.StringBuilder: int length()>();
v97 = v8 - v96;
v98 = staticinvoke <io.vertx.core.cli.UsageMessageFormatter: java.lang.String createPadding(int)>(v97);
virtualinvoke v91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v98);
label23:
virtualinvoke v91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v7);
v99 = v0.<io.vertx.core.cli.UsageMessageFormatter: int descPad>;
v100 = v8 + v99;
v101 = virtualinvoke v89.<io.vertx.core.cli.Argument: java.lang.String getDescription()>();
if v101 == null goto label24;
v102 = virtualinvoke v89.<io.vertx.core.cli.Argument: java.lang.String getDescription()>();
virtualinvoke v91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v102);
label24:
v103 = v0.<io.vertx.core.cli.UsageMessageFormatter: int width>;
v104 = virtualinvoke v91.<java.lang.StringBuilder: java.lang.String toString()>();
virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.StringBuilder renderWrappedText(java.lang.StringBuilder,int,int,java.lang.String)>(v1, v103, v100, v104);
v105 = interfaceinvoke v87.<java.util.Iterator: boolean hasNext()>();
if v105 == 0 goto label22;
v106 = virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String getNewLine()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v106);
goto label22;
label25:
return v1;
}
protected java.lang.StringBuilder renderWrappedText(java.lang.StringBuilder, int, int, java.lang.String)
{
int v15, v16, v17, v2, v3, v5, v6;
java.lang.String v11, v12, v13, v14, v18, v19, v21, v4, v7, v8, v9;
io.vertx.core.cli.UsageMessageFormatter v0;
java.lang.StringBuilder v1, v10, v20;
v0 := @this: io.vertx.core.cli.UsageMessageFormatter;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: java.lang.String;
v5 = staticinvoke <io.vertx.core.cli.UsageMessageFormatter: int findWrapPos(java.lang.String,int,int)>(v4, v2, 0);
v6 = (int) -1;
if v5 != v6 goto label1;
v7 = staticinvoke <io.vertx.core.cli.UsageMessageFormatter: java.lang.String rtrim(java.lang.String)>(v4);
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v7);
return v1;
label1:
v8 = virtualinvoke v4.<java.lang.String: java.lang.String substring(int,int)>(0, v5);
v9 = staticinvoke <io.vertx.core.cli.UsageMessageFormatter: java.lang.String rtrim(java.lang.String)>(v8);
v10 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v9);
v11 = virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String getNewLine()>();
virtualinvoke v10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v11);
if v3 < v2 goto label2;
v3 = 1;
label2:
v12 = staticinvoke <io.vertx.core.cli.UsageMessageFormatter: java.lang.String createPadding(int)>(v3);
label3:
v13 = virtualinvoke v4.<java.lang.String: java.lang.String substring(int)>(v5);
v14 = virtualinvoke v13.<java.lang.String: java.lang.String trim()>();
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v12, v14) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001");
v5 = staticinvoke <io.vertx.core.cli.UsageMessageFormatter: int findWrapPos(java.lang.String,int,int)>(v4, v2, 0);
v15 = (int) -1;
if v5 != v15 goto label4;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v4);
return v1;
label4:
v16 = virtualinvoke v4.<java.lang.String: int length()>();
if v16 <= v2 goto label5;
v17 = v3 - 1;
if v5 != v17 goto label5;
v5 = v2;
label5:
v18 = virtualinvoke v4.<java.lang.String: java.lang.String substring(int,int)>(0, v5);
v19 = staticinvoke <io.vertx.core.cli.UsageMessageFormatter: java.lang.String rtrim(java.lang.String)>(v18);
v20 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v19);
v21 = virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String getNewLine()>();
virtualinvoke v20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v21);
goto label3;
}
public java.lang.Appendable renderWrappedTextBlock(java.lang.StringBuilder, int, int, java.lang.String)
{
java.lang.Throwable v10;
java.io.IOException v11;
io.vertx.core.cli.UsageMessageFormatter v0;
java.io.StringReader v6;
int v2, v3;
java.lang.StringBuilder v1;
java.io.BufferedReader v5;
java.lang.String v4, v8, v9;
boolean v7;
v0 := @this: io.vertx.core.cli.UsageMessageFormatter;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: java.lang.String;
label1:
v5 = new java.io.BufferedReader;
v6 = new java.io.StringReader;
specialinvoke v6.<java.io.StringReader: void <init>(java.lang.String)>(v4);
specialinvoke v5.<java.io.BufferedReader: void <init>(java.io.Reader)>(v6);
label2:
v7 = 1;
label3:
v8 = virtualinvoke v5.<java.io.BufferedReader: java.lang.String readLine()>();
if v8 == null goto label6;
if v7 != 0 goto label4;
v9 = virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.String getNewLine()>();
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v9);
goto label5;
label4:
v7 = 0;
label5:
virtualinvoke v0.<io.vertx.core.cli.UsageMessageFormatter: java.lang.StringBuilder renderWrappedText(java.lang.StringBuilder,int,int,java.lang.String)>(v1, v2, v3, v8);
goto label3;
label6:
virtualinvoke v5.<java.io.BufferedReader: void close()>();
goto label9;
label7:
v10 := @caughtexception;
throw v10;
label8:
v11 := @caughtexception;
label9:
return v1;
catch java.lang.Throwable from label2 to label6 with label7;
catch java.io.IOException from label1 to label8 with label8;
}
public static int findWrapPos(java.lang.String, int, int)
{
int v1, v10, v11, v12, v14, v15, v16, v17, v2, v3, v4, v5, v6, v7, v8, v9;
java.lang.String v0;
char v13;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 := @parameter2: int;
v3 = virtualinvoke v0.<java.lang.String: int indexOf(int,int)>(10, v2);
v4 = (int) -1;
if v3 == v4 goto label1;
if v3 > v1 goto label1;
v5 = v3 + 1;
return v5;
label1:
v6 = virtualinvoke v0.<java.lang.String: int indexOf(int,int)>(9, v2);
v7 = (int) -1;
if v6 == v7 goto label2;
if v6 > v1 goto label2;
v8 = v6 + 1;
return v8;
label2:
v9 = v2 + v1;
v10 = virtualinvoke v0.<java.lang.String: int length()>();
if v9 < v10 goto label3;
v11 = (int) -1;
return v11;
label3:
v12 = v2 + v1;
label4:
if v12 < v2 goto label5;
v13 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v12);
if v13 == 32 goto label5;
if v13 == 10 goto label5;
if v13 == 13 goto label5;
v12 = v12 - 1;
goto label4;
label5:
if v12 <= v2 goto label6;
return v12;
label6:
v14 = v2 + v1;
v15 = virtualinvoke v0.<java.lang.String: int length()>();
if v14 != v15 goto label7;
v16 = (int) -1;
v17 = v16;
goto label8;
label7:
v17 = v14;
label8:
return v17;
}
public static java.lang.String createPadding(int)
{
int v0;
char[] v1;
java.lang.String v2;
v0 := @parameter0: int;
v1 = newarray (char)[v0];
staticinvoke <java.util.Arrays: void fill(char[],char)>(v1, 32);
v2 = new java.lang.String;
specialinvoke v2.<java.lang.String: void <init>(char[])>(v1);
return v2;
}
public static java.lang.String rtrim(java.lang.String)
{
int v1, v2, v3;
char v4;
java.lang.String v0, v6;
boolean v5;
v0 := @parameter0: java.lang.String;
if v0 == null goto label1;
v1 = virtualinvoke v0.<java.lang.String: int length()>();
if v1 != 0 goto label2;
label1:
return v0;
label2:
v2 = virtualinvoke v0.<java.lang.String: int length()>();
label3:
if v2 <= 0 goto label4;
v3 = v2 - 1;
v4 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v3);
v5 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(v4);
if v5 == 0 goto label4;
v2 = v2 - 1;
goto label3;
label4:
v6 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(0, v2);
return v6;
}
}