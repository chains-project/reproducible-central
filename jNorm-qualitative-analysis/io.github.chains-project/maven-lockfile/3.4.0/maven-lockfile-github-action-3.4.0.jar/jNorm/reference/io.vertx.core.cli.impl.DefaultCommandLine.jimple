public class io.vertx.core.cli.impl.DefaultCommandLine extends java.lang.Object implements io.vertx.core.cli.CommandLine
{
protected final io.vertx.core.cli.CLI cli;
protected java.util.List allArgs;
protected java.util.Map optionValues;
protected java.util.List optionsSeenInCommandLine;
protected java.util.Map argumentValues;
protected boolean valid;
public void <init>(io.vertx.core.cli.CLI)
{
io.vertx.core.cli.CLI v1;
io.vertx.core.cli.impl.DefaultCommandLine v0;
java.util.HashMap v3, v5;
java.util.ArrayList v2, v4;
v0 := @this: io.vertx.core.cli.impl.DefaultCommandLine;
v1 := @parameter0: io.vertx.core.cli.CLI;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
v0.<io.vertx.core.cli.impl.DefaultCommandLine: java.util.List allArgs> = v2;
v3 = new java.util.HashMap;
specialinvoke v3.<java.util.HashMap: void <init>()>();
v0.<io.vertx.core.cli.impl.DefaultCommandLine: java.util.Map optionValues> = v3;
v4 = new java.util.ArrayList;
specialinvoke v4.<java.util.ArrayList: void <init>()>();
v0.<io.vertx.core.cli.impl.DefaultCommandLine: java.util.List optionsSeenInCommandLine> = v4;
v5 = new java.util.HashMap;
specialinvoke v5.<java.util.HashMap: void <init>()>();
v0.<io.vertx.core.cli.impl.DefaultCommandLine: java.util.Map argumentValues> = v5;
v0.<io.vertx.core.cli.impl.DefaultCommandLine: io.vertx.core.cli.CLI cli> = v1;
return;
}
public io.vertx.core.cli.CLI cli()
{
io.vertx.core.cli.CLI v1;
io.vertx.core.cli.impl.DefaultCommandLine v0;
v0 := @this: io.vertx.core.cli.impl.DefaultCommandLine;
v1 = v0.<io.vertx.core.cli.impl.DefaultCommandLine: io.vertx.core.cli.CLI cli>;
return v1;
}
public java.util.List allArguments()
{
java.util.List v1;
io.vertx.core.cli.impl.DefaultCommandLine v0;
v0 := @this: io.vertx.core.cli.impl.DefaultCommandLine;
v1 = v0.<io.vertx.core.cli.impl.DefaultCommandLine: java.util.List allArgs>;
return v1;
}
public io.vertx.core.cli.CommandLine addArgumentValue(java.lang.String)
{
java.util.List v2;
java.lang.String v1;
io.vertx.core.cli.impl.DefaultCommandLine v0;
v0 := @this: io.vertx.core.cli.impl.DefaultCommandLine;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.cli.impl.DefaultCommandLine: java.util.List allArgs>;
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v1);
return v0;
}
public java.lang.Object getOptionValue(java.lang.String)
{
io.vertx.core.cli.Option v3;
io.vertx.core.cli.CLI v2;
io.vertx.core.cli.impl.DefaultCommandLine v0;
java.lang.Object v5;
java.lang.String v1, v6;
boolean v4;
v0 := @this: io.vertx.core.cli.impl.DefaultCommandLine;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.cli.impl.DefaultCommandLine: io.vertx.core.cli.CLI cli>;
v3 = interfaceinvoke v2.<io.vertx.core.cli.CLI: io.vertx.core.cli.Option getOption(java.lang.String)>(v1);
if v3 != null goto label1;
return null;
label1:
v4 = v3 instanceof io.vertx.core.cli.TypedOption;
if v4 == 0 goto label2;
v5 = specialinvoke v0.<io.vertx.core.cli.impl.DefaultCommandLine: java.lang.Object getValue(io.vertx.core.cli.TypedOption)>(v3);
return v5;
label2:
v6 = virtualinvoke v0.<io.vertx.core.cli.impl.DefaultCommandLine: java.lang.String getRawValueForOption(io.vertx.core.cli.Option)>(v3);
return v6;
}
public boolean isFlagEnabled(java.lang.String)
{
java.lang.IllegalStateException v9;
java.lang.IllegalArgumentException v4;
io.vertx.core.cli.Option v3;
java.util.List v7;
io.vertx.core.cli.CLI v2;
io.vertx.core.cli.impl.DefaultCommandLine v0;
java.lang.String v1, v10, v5;
boolean v6, v8;
v0 := @this: io.vertx.core.cli.impl.DefaultCommandLine;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.cli.impl.DefaultCommandLine: io.vertx.core.cli.CLI cli>;
v3 = interfaceinvoke v2.<io.vertx.core.cli.CLI: io.vertx.core.cli.Option getOption(java.lang.String)>(v1);
if v3 != null goto label1;
v4 = new java.lang.IllegalArgumentException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot find the option \'\u0001\'");
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v5);
throw v4;
label1:
v6 = virtualinvoke v3.<io.vertx.core.cli.Option: boolean isFlag()>();
if v6 == 0 goto label2;
v7 = v0.<io.vertx.core.cli.impl.DefaultCommandLine: java.util.List optionsSeenInCommandLine>;
v8 = interfaceinvoke v7.<java.util.List: boolean contains(java.lang.Object)>(v3);
return v8;
label2:
v9 = new java.lang.IllegalStateException;
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot retrieve the flag value on a non-flag option (\u0001)");
specialinvoke v9.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v10);
throw v9;
}
public java.util.List getOptionValues(java.lang.String)
{
java.util.function.Function v10;
io.vertx.core.cli.Option v3;
java.util.List v14, v7, v8;
java.util.stream.Stream v11, v9;
io.vertx.core.cli.CLI v2;
io.vertx.core.cli.impl.DefaultCommandLine v0;
java.lang.Object v13;
java.lang.String v1, v6;
java.util.stream.Collector v12;
boolean v4, v5;
v0 := @this: io.vertx.core.cli.impl.DefaultCommandLine;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.cli.impl.DefaultCommandLine: io.vertx.core.cli.CLI cli>;
v3 = interfaceinvoke v2.<io.vertx.core.cli.CLI: io.vertx.core.cli.Option getOption(java.lang.String)>(v1);
if v3 != null goto label1;
return null;
label1:
v4 = v3 instanceof io.vertx.core.cli.TypedOption;
if v4 == 0 goto label3;
v5 = virtualinvoke v3.<io.vertx.core.cli.TypedOption: boolean isParsedAsList()>();
if v5 == 0 goto label2;
v6 = virtualinvoke v0.<io.vertx.core.cli.impl.DefaultCommandLine: java.lang.String getRawValueForOption(io.vertx.core.cli.Option)>(v3);
v7 = staticinvoke <io.vertx.core.cli.impl.DefaultCommandLine: java.util.List createFromList(java.lang.String,io.vertx.core.cli.TypedOption)>(v6, v3);
return v7;
label2:
v8 = virtualinvoke v0.<io.vertx.core.cli.impl.DefaultCommandLine: java.util.List getRawValuesForOption(io.vertx.core.cli.Option)>(v3);
v9 = interfaceinvoke v8.<java.util.List: java.util.stream.Stream stream()>();
v10 = staticinvoke <io.vertx.core.cli.impl.DefaultCommandLine$lambda_getOptionValues_0__1238: java.util.function.Function bootstrap$(io.vertx.core.cli.TypedOption)>(v3);
v11 = interfaceinvoke v9.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v10);
v12 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();
v13 = interfaceinvoke v11.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v12);
return v13;
label3:
v14 = virtualinvoke v0.<io.vertx.core.cli.impl.DefaultCommandLine: java.util.List getRawValuesForOption(io.vertx.core.cli.Option)>(v3);
return v14;
}
public java.util.List getArgumentValues(int)
{
io.vertx.core.cli.Argument v3;
java.util.function.Function v7;
java.util.List v11, v5;
java.util.stream.Stream v6, v8;
io.vertx.core.cli.CLI v2;
io.vertx.core.cli.impl.DefaultCommandLine v0;
int v1;
java.lang.Object v10;
java.util.stream.Collector v9;
boolean v4;
v0 := @this: io.vertx.core.cli.impl.DefaultCommandLine;
v1 := @parameter0: int;
v2 = v0.<io.vertx.core.cli.impl.DefaultCommandLine: io.vertx.core.cli.CLI cli>;
v3 = interfaceinvoke v2.<io.vertx.core.cli.CLI: io.vertx.core.cli.Argument getArgument(int)>(v1);
if v3 != null goto label1;
return null;
label1:
v4 = v3 instanceof io.vertx.core.cli.TypedArgument;
if v4 == 0 goto label2;
v5 = virtualinvoke v0.<io.vertx.core.cli.impl.DefaultCommandLine: java.util.List getRawValuesForArgument(io.vertx.core.cli.Argument)>(v3);
v6 = interfaceinvoke v5.<java.util.List: java.util.stream.Stream stream()>();
v7 = staticinvoke <io.vertx.core.cli.impl.DefaultCommandLine$lambda_getArgumentValues_1__1239: java.util.function.Function bootstrap$(io.vertx.core.cli.TypedArgument)>(v3);
v8 = interfaceinvoke v6.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v7);
v9 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();
v10 = interfaceinvoke v8.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v9);
return v10;
label2:
v11 = virtualinvoke v0.<io.vertx.core.cli.impl.DefaultCommandLine: java.util.List getRawValuesForArgument(io.vertx.core.cli.Argument)>(v3);
return v11;
}
public java.lang.Object getArgumentValue(java.lang.String)
{
io.vertx.core.cli.CLI v2;
io.vertx.core.cli.impl.DefaultCommandLine v0;
int v4;
java.lang.Object v5;
java.lang.String v1;
io.vertx.core.cli.Argument v3;
v0 := @this: io.vertx.core.cli.impl.DefaultCommandLine;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.cli.impl.DefaultCommandLine: io.vertx.core.cli.CLI cli>;
v3 = interfaceinvoke v2.<io.vertx.core.cli.CLI: io.vertx.core.cli.Argument getArgument(java.lang.String)>(v1);
if v3 != null goto label1;
return null;
label1:
v4 = virtualinvoke v3.<io.vertx.core.cli.Argument: int getIndex()>();
v5 = virtualinvoke v0.<io.vertx.core.cli.impl.DefaultCommandLine: java.lang.Object getArgumentValue(int)>(v4);
return v5;
}
public java.lang.Object getArgumentValue(int)
{
io.vertx.core.cli.Argument v3;
io.vertx.core.cli.CLI v2;
io.vertx.core.cli.impl.DefaultCommandLine v0;
int v1;
java.lang.Object v6;
java.lang.String v5, v7;
boolean v4;
v0 := @this: io.vertx.core.cli.impl.DefaultCommandLine;
v1 := @parameter0: int;
v2 = v0.<io.vertx.core.cli.impl.DefaultCommandLine: io.vertx.core.cli.CLI cli>;
v3 = interfaceinvoke v2.<io.vertx.core.cli.CLI: io.vertx.core.cli.Argument getArgument(int)>(v1);
if v3 != null goto label1;
return null;
label1:
v4 = v3 instanceof io.vertx.core.cli.TypedArgument;
if v4 == 0 goto label2;
v5 = virtualinvoke v0.<io.vertx.core.cli.impl.DefaultCommandLine: java.lang.String getRawValueForArgument(io.vertx.core.cli.Argument)>(v3);
v6 = staticinvoke <io.vertx.core.cli.impl.DefaultCommandLine: java.lang.Object create(java.lang.String,io.vertx.core.cli.TypedArgument)>(v5, v3);
return v6;
label2:
v7 = virtualinvoke v0.<io.vertx.core.cli.impl.DefaultCommandLine: java.lang.String getRawValueForArgument(io.vertx.core.cli.Argument)>(v3);
return v7;
}
public boolean isOptionAssigned(io.vertx.core.cli.Option)
{
io.vertx.core.cli.Option v1;
java.util.List v2;
io.vertx.core.cli.impl.DefaultCommandLine v0;
boolean v3, v4;
v0 := @this: io.vertx.core.cli.impl.DefaultCommandLine;
v1 := @parameter0: io.vertx.core.cli.Option;
v2 = virtualinvoke v0.<io.vertx.core.cli.impl.DefaultCommandLine: java.util.List getRawValuesForOption(io.vertx.core.cli.Option)>(v1);
v3 = interfaceinvoke v2.<java.util.List: boolean isEmpty()>();
if v3 != 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public java.util.List getRawValuesForOption(io.vertx.core.cli.Option)
{
java.util.function.Function v5;
io.vertx.core.cli.Option v1;
java.util.List v9;
java.util.stream.Stream v4, v6;
io.vertx.core.cli.impl.DefaultCommandLine v0;
java.util.Map v2;
java.lang.Object v3, v8;
java.util.stream.Collector v7;
v0 := @this: io.vertx.core.cli.impl.DefaultCommandLine;
v1 := @parameter0: io.vertx.core.cli.Option;
v2 = v0.<io.vertx.core.cli.impl.DefaultCommandLine: java.util.Map optionValues>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v3 == null goto label1;
v4 = interfaceinvoke v3.<java.util.List: java.util.stream.Stream stream()>();
v5 = staticinvoke <io.vertx.core.cli.impl.DefaultCommandLine$toString__1240: java.util.function.Function bootstrap$()>();
v6 = interfaceinvoke v4.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v5);
v7 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();
v8 = interfaceinvoke v6.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v7);
return v8;
label1:
v9 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v9;
}
public java.util.List getRawValuesForArgument(io.vertx.core.cli.Argument)
{
io.vertx.core.cli.Argument v1;
java.util.function.Function v5;
java.util.List v9;
java.util.stream.Stream v4, v6;
io.vertx.core.cli.impl.DefaultCommandLine v0;
java.util.Map v2;
java.lang.Object v3, v8;
java.util.stream.Collector v7;
v0 := @this: io.vertx.core.cli.impl.DefaultCommandLine;
v1 := @parameter0: io.vertx.core.cli.Argument;
v2 = v0.<io.vertx.core.cli.impl.DefaultCommandLine: java.util.Map argumentValues>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v3 == null goto label1;
v4 = interfaceinvoke v3.<java.util.List: java.util.stream.Stream stream()>();
v5 = staticinvoke <io.vertx.core.cli.impl.DefaultCommandLine$toString__1241: java.util.function.Function bootstrap$()>();
v6 = interfaceinvoke v4.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v5);
v7 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();
v8 = interfaceinvoke v6.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v7);
return v8;
label1:
v9 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v9;
}
public io.vertx.core.cli.impl.DefaultCommandLine addRawValue(io.vertx.core.cli.Option, java.lang.String)
{
io.vertx.core.cli.InvalidValueException v12;
java.util.ArrayList v15;
io.vertx.core.cli.Option v1;
java.util.Map v13, v16;
java.lang.String v2, v6, v7;
boolean v11, v3, v4, v9;
io.vertx.core.cli.CLIException v5;
java.util.Set v10, v8;
io.vertx.core.cli.impl.DefaultCommandLine v0;
java.lang.Object v14;
v0 := @this: io.vertx.core.cli.impl.DefaultCommandLine;
v1 := @parameter0: io.vertx.core.cli.Option;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.core.cli.impl.DefaultCommandLine: boolean acceptMoreValues(io.vertx.core.cli.Option)>(v1);
if v3 != 0 goto label1;
v4 = virtualinvoke v1.<io.vertx.core.cli.Option: boolean isFlag()>();
if v4 != 0 goto label1;
v5 = new io.vertx.core.cli.CLIException;
v6 = virtualinvoke v1.<io.vertx.core.cli.Option: java.lang.String getName()>();
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("The option \u0001 does not accept value or has already been set");
specialinvoke v5.<io.vertx.core.cli.CLIException: void <init>(java.lang.String)>(v7);
throw v5;
label1:
v8 = virtualinvoke v1.<io.vertx.core.cli.Option: java.util.Set getChoices()>();
v9 = interfaceinvoke v8.<java.util.Set: boolean isEmpty()>();
if v9 != 0 goto label2;
v10 = virtualinvoke v1.<io.vertx.core.cli.Option: java.util.Set getChoices()>();
v11 = interfaceinvoke v10.<java.util.Set: boolean contains(java.lang.Object)>(v2);
if v11 != 0 goto label2;
v12 = new io.vertx.core.cli.InvalidValueException;
specialinvoke v12.<io.vertx.core.cli.InvalidValueException: void <init>(io.vertx.core.cli.Option,java.lang.String)>(v1, v2);
throw v12;
label2:
v13 = v0.<io.vertx.core.cli.impl.DefaultCommandLine: java.util.Map optionValues>;
v14 = interfaceinvoke v13.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v14 != null goto label3;
v15 = new java.util.ArrayList;
specialinvoke v15.<java.util.ArrayList: void <init>()>();
v14 = v15;
v16 = v0.<io.vertx.core.cli.impl.DefaultCommandLine: java.util.Map optionValues>;
interfaceinvoke v16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v15);
label3:
interfaceinvoke v14.<java.util.List: boolean add(java.lang.Object)>(v2);
return v0;
}
public java.lang.String getRawValueForOption(io.vertx.core.cli.Option)
{
io.vertx.core.cli.Option v1;
java.util.List v3;
io.vertx.core.cli.impl.DefaultCommandLine v0;
java.lang.Object v4;
java.lang.String v5;
boolean v2;
v0 := @this: io.vertx.core.cli.impl.DefaultCommandLine;
v1 := @parameter0: io.vertx.core.cli.Option;
v2 = virtualinvoke v0.<io.vertx.core.cli.impl.DefaultCommandLine: boolean isOptionAssigned(io.vertx.core.cli.Option)>(v1);
if v2 == 0 goto label1;
v3 = virtualinvoke v0.<io.vertx.core.cli.impl.DefaultCommandLine: java.util.List getRawValuesForOption(io.vertx.core.cli.Option)>(v1);
v4 = interfaceinvoke v3.<java.util.List: java.lang.Object get(int)>(0);
return v4;
label1:
v5 = virtualinvoke v1.<io.vertx.core.cli.Option: java.lang.String getDefaultValue()>();
return v5;
}
public boolean acceptMoreValues(io.vertx.core.cli.Option)
{
io.vertx.core.cli.Option v1;
io.vertx.core.cli.impl.DefaultCommandLine v0;
boolean v2, v3, v4, v5;
v0 := @this: io.vertx.core.cli.impl.DefaultCommandLine;
v1 := @parameter0: io.vertx.core.cli.Option;
v2 = virtualinvoke v1.<io.vertx.core.cli.Option: boolean isMultiValued()>();
if v2 != 0 goto label1;
v3 = virtualinvoke v1.<io.vertx.core.cli.Option: boolean isSingleValued()>();
if v3 == 0 goto label2;
v4 = virtualinvoke v0.<io.vertx.core.cli.impl.DefaultCommandLine: boolean isOptionAssigned(io.vertx.core.cli.Option)>(v1);
if v4 != 0 goto label2;
label1:
v5 = 1;
goto label3;
label2:
v5 = 0;
label3:
return v5;
}
public java.lang.String getRawValueForArgument(io.vertx.core.cli.Argument)
{
io.vertx.core.cli.Argument v1;
io.vertx.core.cli.impl.DefaultCommandLine v0;
java.util.Map v2;
java.lang.Object v3, v6;
java.lang.String v5, v7;
boolean v4;
v0 := @this: io.vertx.core.cli.impl.DefaultCommandLine;
v1 := @parameter0: io.vertx.core.cli.Argument;
v2 = v0.<io.vertx.core.cli.impl.DefaultCommandLine: java.util.Map argumentValues>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v3 == null goto label1;
v4 = interfaceinvoke v3.<java.util.List: boolean isEmpty()>();
if v4 == 0 goto label2;
label1:
v5 = virtualinvoke v1.<io.vertx.core.cli.Argument: java.lang.String getDefaultValue()>();
return v5;
label2:
v6 = interfaceinvoke v3.<java.util.List: java.lang.Object get(int)>(0);
v7 = virtualinvoke v6.<java.lang.Object: java.lang.String toString()>();
return v7;
}
public io.vertx.core.cli.impl.DefaultCommandLine setRawValue(io.vertx.core.cli.Argument, java.lang.String)
{
io.vertx.core.cli.impl.DefaultCommandLine v0;
java.util.Map v3, v6;
java.lang.Object v4;
java.lang.String v2;
io.vertx.core.cli.Argument v1;
java.util.ArrayList v5;
v0 := @this: io.vertx.core.cli.impl.DefaultCommandLine;
v1 := @parameter0: io.vertx.core.cli.Argument;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.vertx.core.cli.impl.DefaultCommandLine: java.util.Map argumentValues>;
v4 = interfaceinvoke v3.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v4 != null goto label1;
v5 = new java.util.ArrayList;
specialinvoke v5.<java.util.ArrayList: void <init>()>();
v4 = v5;
v6 = v0.<io.vertx.core.cli.impl.DefaultCommandLine: java.util.Map argumentValues>;
interfaceinvoke v6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v5);
label1:
interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(v2);
return v0;
}
public boolean isArgumentAssigned(io.vertx.core.cli.Argument)
{
io.vertx.core.cli.impl.DefaultCommandLine v0;
java.util.Map v2;
java.lang.Object v3;
io.vertx.core.cli.Argument v1;
boolean v4;
v0 := @this: io.vertx.core.cli.impl.DefaultCommandLine;
v1 := @parameter0: io.vertx.core.cli.Argument;
v2 = v0.<io.vertx.core.cli.impl.DefaultCommandLine: java.util.Map argumentValues>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
if v3 == null goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public io.vertx.core.cli.impl.DefaultCommandLine setSeenInCommandLine(io.vertx.core.cli.Option)
{
io.vertx.core.cli.Option v1;
java.util.List v2;
io.vertx.core.cli.impl.DefaultCommandLine v0;
v0 := @this: io.vertx.core.cli.impl.DefaultCommandLine;
v1 := @parameter0: io.vertx.core.cli.Option;
v2 = v0.<io.vertx.core.cli.impl.DefaultCommandLine: java.util.List optionsSeenInCommandLine>;
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v1);
return v0;
}
public boolean isSeenInCommandLine(io.vertx.core.cli.Option)
{
io.vertx.core.cli.Option v1;
java.util.List v2;
io.vertx.core.cli.impl.DefaultCommandLine v0;
boolean v3;
v0 := @this: io.vertx.core.cli.impl.DefaultCommandLine;
v1 := @parameter0: io.vertx.core.cli.Option;
v2 = v0.<io.vertx.core.cli.impl.DefaultCommandLine: java.util.List optionsSeenInCommandLine>;
v3 = interfaceinvoke v2.<java.util.List: boolean contains(java.lang.Object)>(v1);
return v3;
}
private java.lang.Object getValue(io.vertx.core.cli.TypedOption)
{
io.vertx.core.cli.InvalidValueException v13;
java.lang.IllegalArgumentException v14;
io.vertx.core.cli.impl.DefaultCommandLine v0;
java.lang.Boolean v11, v12;
java.lang.Object v4, v7;
java.lang.String v3, v5, v6;
io.vertx.core.cli.TypedOption v1;
boolean v10, v2, v8, v9;
v0 := @this: io.vertx.core.cli.impl.DefaultCommandLine;
v1 := @parameter0: io.vertx.core.cli.TypedOption;
v2 = virtualinvoke v0.<io.vertx.core.cli.impl.DefaultCommandLine: boolean isOptionAssigned(io.vertx.core.cli.Option)>(v1);
if v2 == 0 goto label1;
v3 = virtualinvoke v0.<io.vertx.core.cli.impl.DefaultCommandLine: java.lang.String getRawValueForOption(io.vertx.core.cli.Option)>(v1);
v4 = staticinvoke <io.vertx.core.cli.impl.DefaultCommandLine: java.lang.Object create(java.lang.String,io.vertx.core.cli.TypedOption)>(v3, v1);
return v4;
label1:
v5 = virtualinvoke v1.<io.vertx.core.cli.TypedOption: java.lang.String getDefaultValue()>();
if v5 == null goto label2;
v6 = virtualinvoke v0.<io.vertx.core.cli.impl.DefaultCommandLine: java.lang.String getRawValueForOption(io.vertx.core.cli.Option)>(v1);
v7 = staticinvoke <io.vertx.core.cli.impl.DefaultCommandLine: java.lang.Object create(java.lang.String,io.vertx.core.cli.TypedOption)>(v6, v1);
return v7;
label2:
v8 = virtualinvoke v1.<io.vertx.core.cli.TypedOption: boolean isFlag()>();
if v8 != 0 goto label3;
v9 = specialinvoke v0.<io.vertx.core.cli.impl.DefaultCommandLine: boolean isBoolean(io.vertx.core.cli.TypedOption)>(v1);
if v9 == 0 goto label8;
label3:
v10 = virtualinvoke v0.<io.vertx.core.cli.impl.DefaultCommandLine: boolean isSeenInCommandLine(io.vertx.core.cli.Option)>(v1);
if v10 == 0 goto label5;
v11 = <java.lang.Boolean: java.lang.Boolean TRUE>;
label4:
return v11;
label5:
v12 = <java.lang.Boolean: java.lang.Boolean FALSE>;
label6:
return v12;
label7:
v13 := @caughtexception;
v14 = new java.lang.IllegalArgumentException;
specialinvoke v14.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(v13);
throw v14;
label8:
return null;
catch io.vertx.core.cli.InvalidValueException from label3 to label4 with label7;
catch io.vertx.core.cli.InvalidValueException from label5 to label6 with label7;
}
private boolean isBoolean(io.vertx.core.cli.TypedOption)
{
io.vertx.core.cli.impl.DefaultCommandLine v0;
java.lang.Class v2, v3;
io.vertx.core.cli.TypedOption v1;
boolean v4;
v0 := @this: io.vertx.core.cli.impl.DefaultCommandLine;
v1 := @parameter0: io.vertx.core.cli.TypedOption;
v2 = virtualinvoke v1.<io.vertx.core.cli.TypedOption: java.lang.Class getType()>();
v3 = <java.lang.Boolean: java.lang.Class TYPE>;
if v2 == v3 goto label1;
if v2 != class "Ljava/lang/Boolean;" goto label2;
label1:
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
return v4;
}
public static java.lang.Object create(java.lang.String, io.vertx.core.cli.TypedArgument)
{
io.vertx.core.cli.InvalidValueException v8;
io.vertx.core.cli.converters.Converter v2, v3;
java.lang.Exception v7;
java.lang.Class v5;
java.lang.Object v4, v6;
java.lang.String v0;
io.vertx.core.cli.TypedArgument v1;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: io.vertx.core.cli.TypedArgument;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v0 != null goto label1;
v0 = virtualinvoke v1.<io.vertx.core.cli.TypedArgument: java.lang.String getDefaultValue()>();
if v0 != null goto label1;
return null;
label1:
v2 = virtualinvoke v1.<io.vertx.core.cli.TypedArgument: io.vertx.core.cli.converters.Converter getConverter()>();
if v2 == null goto label3;
v3 = virtualinvoke v1.<io.vertx.core.cli.TypedArgument: io.vertx.core.cli.converters.Converter getConverter()>();
v4 = staticinvoke <io.vertx.core.cli.converters.Converters: java.lang.Object create(java.lang.String,io.vertx.core.cli.converters.Converter)>(v0, v3);
label2:
return v4;
label3:
v5 = virtualinvoke v1.<io.vertx.core.cli.TypedArgument: java.lang.Class getType()>();
v6 = staticinvoke <io.vertx.core.cli.converters.Converters: java.lang.Object create(java.lang.Class,java.lang.String)>(v5, v0);
label4:
return v6;
label5:
v7 := @caughtexception;
v8 = new io.vertx.core.cli.InvalidValueException;
specialinvoke v8.<io.vertx.core.cli.InvalidValueException: void <init>(io.vertx.core.cli.Argument,java.lang.String,java.lang.Exception)>(v1, v0, v7);
throw v8;
catch java.lang.Exception from label1 to label2 with label5;
catch java.lang.Exception from label3 to label4 with label5;
}
public static java.lang.Object create(java.lang.String, io.vertx.core.cli.TypedOption)
{
io.vertx.core.cli.InvalidValueException v8;
io.vertx.core.cli.converters.Converter v2, v3;
java.lang.Exception v7;
java.lang.Class v5;
java.lang.Object v4, v6;
java.lang.String v0;
io.vertx.core.cli.TypedOption v1;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: io.vertx.core.cli.TypedOption;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v0 != null goto label1;
v0 = virtualinvoke v1.<io.vertx.core.cli.TypedOption: java.lang.String getDefaultValue()>();
if v0 != null goto label1;
return null;
label1:
v2 = virtualinvoke v1.<io.vertx.core.cli.TypedOption: io.vertx.core.cli.converters.Converter getConverter()>();
if v2 == null goto label3;
v3 = virtualinvoke v1.<io.vertx.core.cli.TypedOption: io.vertx.core.cli.converters.Converter getConverter()>();
v4 = staticinvoke <io.vertx.core.cli.converters.Converters: java.lang.Object create(java.lang.String,io.vertx.core.cli.converters.Converter)>(v0, v3);
label2:
return v4;
label3:
v5 = virtualinvoke v1.<io.vertx.core.cli.TypedOption: java.lang.Class getType()>();
v6 = staticinvoke <io.vertx.core.cli.converters.Converters: java.lang.Object create(java.lang.Class,java.lang.String)>(v5, v0);
label4:
return v6;
label5:
v7 := @caughtexception;
v8 = new io.vertx.core.cli.InvalidValueException;
specialinvoke v8.<io.vertx.core.cli.InvalidValueException: void <init>(io.vertx.core.cli.Option,java.lang.String,java.lang.Exception)>(v1, v0, v7);
throw v8;
catch java.lang.Exception from label1 to label2 with label5;
catch java.lang.Exception from label3 to label4 with label5;
}
public static java.util.List createFromList(java.lang.String, io.vertx.core.cli.TypedOption)
{
java.lang.String[] v4;
java.util.function.Function v6;
java.util.List v2;
java.util.stream.Stream v5, v7;
java.lang.Object v9;
java.lang.String v0, v3;
java.util.stream.Collector v8;
io.vertx.core.cli.TypedOption v1;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: io.vertx.core.cli.TypedOption;
if v0 != null goto label1;
v2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v2;
label1:
v3 = virtualinvoke v1.<io.vertx.core.cli.TypedOption: java.lang.String getListSeparator()>();
v4 = virtualinvoke v0.<java.lang.String: java.lang.String[] split(java.lang.String)>(v3);
v5 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>(v4);
v6 = staticinvoke <io.vertx.core.cli.impl.DefaultCommandLine$lambda_createFromList_2__1242: java.util.function.Function bootstrap$(io.vertx.core.cli.TypedOption)>(v1);
v7 = interfaceinvoke v5.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v6);
v8 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();
v9 = interfaceinvoke v7.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v8);
return v9;
}
public boolean isValid()
{
io.vertx.core.cli.impl.DefaultCommandLine v0;
boolean v1;
v0 := @this: io.vertx.core.cli.impl.DefaultCommandLine;
v1 = v0.<io.vertx.core.cli.impl.DefaultCommandLine: boolean valid>;
return v1;
}
void setValidity(boolean)
{
io.vertx.core.cli.impl.DefaultCommandLine v0;
boolean v1;
v0 := @this: io.vertx.core.cli.impl.DefaultCommandLine;
v1 := @parameter0: boolean;
v0.<io.vertx.core.cli.impl.DefaultCommandLine: boolean valid> = v1;
return;
}
public boolean isAskingForHelp()
{
java.util.Iterator v3;
java.util.List v2;
io.vertx.core.cli.CLI v1;
io.vertx.core.cli.impl.DefaultCommandLine v0;
java.lang.Object v5;
boolean v4, v6, v7;
v0 := @this: io.vertx.core.cli.impl.DefaultCommandLine;
v1 = v0.<io.vertx.core.cli.impl.DefaultCommandLine: io.vertx.core.cli.CLI cli>;
v2 = interfaceinvoke v1.<io.vertx.core.cli.CLI: java.util.List getOptions()>();
v3 = interfaceinvoke v2.<java.util.List: java.util.Iterator iterator()>();
label1:
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
v5 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v6 = virtualinvoke v5.<io.vertx.core.cli.Option: boolean isHelp()>();
if v6 == 0 goto label1;
v7 = virtualinvoke v0.<io.vertx.core.cli.impl.DefaultCommandLine: boolean isSeenInCommandLine(io.vertx.core.cli.Option)>(v5);
if v7 == 0 goto label1;
return 1;
label2:
return 0;
}
}