public class io.vertx.core.dns.AddressResolverOptions extends java.lang.Object
{
public static final java.util.List DEFAULT_SERVERS;
public static final boolean DEFAULT_OPT_RESOURCE_ENABLED;
public static final int DEFAULT_CACHE_MIN_TIME_TO_LIVE;
public static final int DEFAULT_CACHE_MAX_TIME_TO_LIVE;
public static final int DEFAULT_CACHE_NEGATIVE_TIME_TO_LIVE;
public static final int DEFAULT_QUERY_TIMEOUT;
public static final int DEFAULT_MAX_QUERIES;
public static final boolean DEFAULT_RD_FLAG;
public static final java.util.List DEFAULT_SEACH_DOMAINS;
public static final int DEFAULT_NDOTS;
public static final boolean DEFAULT_ROTATE_SERVERS;
public static final boolean DEFAULT_ROUND_ROBIN_INET_ADDRESS;
private java.lang.String hostsPath;
private io.vertx.core.buffer.Buffer hostsValue;
private java.util.List servers;
private boolean optResourceEnabled;
private int cacheMinTimeToLive;
private int cacheMaxTimeToLive;
private int cacheNegativeTimeToLive;
private long queryTimeout;
private int maxQueries;
private boolean rdFlag;
private java.util.List searchDomains;
private int ndots;
private boolean rotateServers;
private boolean roundRobinInetAddress;
public void <init>()
{
java.util.List v1, v2;
int v3;
io.vertx.core.dns.AddressResolverOptions v0;
boolean v4;
v0 := @this: io.vertx.core.dns.AddressResolverOptions;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = <io.vertx.core.dns.AddressResolverOptions: java.util.List DEFAULT_SERVERS>;
v0.<io.vertx.core.dns.AddressResolverOptions: java.util.List servers> = v1;
v0.<io.vertx.core.dns.AddressResolverOptions: boolean optResourceEnabled> = 0;
v0.<io.vertx.core.dns.AddressResolverOptions: int cacheMinTimeToLive> = 0;
v0.<io.vertx.core.dns.AddressResolverOptions: int cacheMaxTimeToLive> = 2147483647;
v0.<io.vertx.core.dns.AddressResolverOptions: int cacheNegativeTimeToLive> = 0;
v0.<io.vertx.core.dns.AddressResolverOptions: long queryTimeout> = 5000L;
v0.<io.vertx.core.dns.AddressResolverOptions: int maxQueries> = 4;
v0.<io.vertx.core.dns.AddressResolverOptions: boolean rdFlag> = 1;
v2 = <io.vertx.core.dns.AddressResolverOptions: java.util.List DEFAULT_SEACH_DOMAINS>;
v0.<io.vertx.core.dns.AddressResolverOptions: java.util.List searchDomains> = v2;
v3 = <io.vertx.core.dns.AddressResolverOptions: int DEFAULT_NDOTS>;
v0.<io.vertx.core.dns.AddressResolverOptions: int ndots> = v3;
v4 = <io.vertx.core.dns.AddressResolverOptions: boolean DEFAULT_ROTATE_SERVERS>;
v0.<io.vertx.core.dns.AddressResolverOptions: boolean rotateServers> = v4;
v0.<io.vertx.core.dns.AddressResolverOptions: boolean roundRobinInetAddress> = 0;
return;
}
public void <init>(io.vertx.core.dns.AddressResolverOptions)
{
long v13;
io.vertx.core.dns.AddressResolverOptions v0, v1;
java.util.ArrayList v17, v7;
int v10, v11, v12, v14, v19;
java.lang.String v2;
boolean v15, v20, v21, v9;
java.util.List v16, v18, v6, v8;
io.vertx.core.buffer.Buffer v3, v4, v5;
v0 := @this: io.vertx.core.dns.AddressResolverOptions;
v1 := @parameter0: io.vertx.core.dns.AddressResolverOptions;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = v1.<io.vertx.core.dns.AddressResolverOptions: java.lang.String hostsPath>;
v0.<io.vertx.core.dns.AddressResolverOptions: java.lang.String hostsPath> = v2;
v3 = v1.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.buffer.Buffer hostsValue>;
if v3 == null goto label1;
v4 = v1.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.buffer.Buffer hostsValue>;
v5 = interfaceinvoke v4.<io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer copy()>();
goto label2;
label1:
v5 = null;
label2:
v0.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.buffer.Buffer hostsValue> = v5;
v6 = v1.<io.vertx.core.dns.AddressResolverOptions: java.util.List servers>;
if v6 == null goto label3;
v7 = new java.util.ArrayList;
v8 = v1.<io.vertx.core.dns.AddressResolverOptions: java.util.List servers>;
specialinvoke v7.<java.util.ArrayList: void <init>(java.util.Collection)>(v8);
goto label4;
label3:
v7 = null;
label4:
v0.<io.vertx.core.dns.AddressResolverOptions: java.util.List servers> = v7;
v9 = v1.<io.vertx.core.dns.AddressResolverOptions: boolean optResourceEnabled>;
v0.<io.vertx.core.dns.AddressResolverOptions: boolean optResourceEnabled> = v9;
v10 = v1.<io.vertx.core.dns.AddressResolverOptions: int cacheMinTimeToLive>;
v0.<io.vertx.core.dns.AddressResolverOptions: int cacheMinTimeToLive> = v10;
v11 = v1.<io.vertx.core.dns.AddressResolverOptions: int cacheMaxTimeToLive>;
v0.<io.vertx.core.dns.AddressResolverOptions: int cacheMaxTimeToLive> = v11;
v12 = v1.<io.vertx.core.dns.AddressResolverOptions: int cacheNegativeTimeToLive>;
v0.<io.vertx.core.dns.AddressResolverOptions: int cacheNegativeTimeToLive> = v12;
v13 = v1.<io.vertx.core.dns.AddressResolverOptions: long queryTimeout>;
v0.<io.vertx.core.dns.AddressResolverOptions: long queryTimeout> = v13;
v14 = v1.<io.vertx.core.dns.AddressResolverOptions: int maxQueries>;
v0.<io.vertx.core.dns.AddressResolverOptions: int maxQueries> = v14;
v15 = v1.<io.vertx.core.dns.AddressResolverOptions: boolean rdFlag>;
v0.<io.vertx.core.dns.AddressResolverOptions: boolean rdFlag> = v15;
v16 = v1.<io.vertx.core.dns.AddressResolverOptions: java.util.List searchDomains>;
if v16 == null goto label5;
v17 = new java.util.ArrayList;
v18 = v1.<io.vertx.core.dns.AddressResolverOptions: java.util.List searchDomains>;
specialinvoke v17.<java.util.ArrayList: void <init>(java.util.Collection)>(v18);
goto label6;
label5:
v17 = null;
label6:
v0.<io.vertx.core.dns.AddressResolverOptions: java.util.List searchDomains> = v17;
v19 = v1.<io.vertx.core.dns.AddressResolverOptions: int ndots>;
v0.<io.vertx.core.dns.AddressResolverOptions: int ndots> = v19;
v20 = v1.<io.vertx.core.dns.AddressResolverOptions: boolean rotateServers>;
v0.<io.vertx.core.dns.AddressResolverOptions: boolean rotateServers> = v20;
v21 = v1.<io.vertx.core.dns.AddressResolverOptions: boolean roundRobinInetAddress>;
v0.<io.vertx.core.dns.AddressResolverOptions: boolean roundRobinInetAddress> = v21;
return;
}
public void <init>(io.vertx.core.json.JsonObject)
{
io.vertx.core.json.JsonObject v1;
io.vertx.core.dns.AddressResolverOptions v0;
v0 := @this: io.vertx.core.dns.AddressResolverOptions;
v1 := @parameter0: io.vertx.core.json.JsonObject;
specialinvoke v0.<io.vertx.core.dns.AddressResolverOptions: void <init>()>();
staticinvoke <io.vertx.core.dns.AddressResolverOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.dns.AddressResolverOptions)>(v1, v0);
return;
}
public java.lang.String getHostsPath()
{
java.lang.String v1;
io.vertx.core.dns.AddressResolverOptions v0;
v0 := @this: io.vertx.core.dns.AddressResolverOptions;
v1 = v0.<io.vertx.core.dns.AddressResolverOptions: java.lang.String hostsPath>;
return v1;
}
public io.vertx.core.dns.AddressResolverOptions setHostsPath(java.lang.String)
{
java.lang.String v1;
io.vertx.core.dns.AddressResolverOptions v0;
v0 := @this: io.vertx.core.dns.AddressResolverOptions;
v1 := @parameter0: java.lang.String;
v0.<io.vertx.core.dns.AddressResolverOptions: java.lang.String hostsPath> = v1;
return v0;
}
public io.vertx.core.buffer.Buffer getHostsValue()
{
io.vertx.core.buffer.Buffer v1;
io.vertx.core.dns.AddressResolverOptions v0;
v0 := @this: io.vertx.core.dns.AddressResolverOptions;
v1 = v0.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.buffer.Buffer hostsValue>;
return v1;
}
public io.vertx.core.dns.AddressResolverOptions setHostsValue(io.vertx.core.buffer.Buffer)
{
io.vertx.core.buffer.Buffer v1;
io.vertx.core.dns.AddressResolverOptions v0;
v0 := @this: io.vertx.core.dns.AddressResolverOptions;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v0.<io.vertx.core.dns.AddressResolverOptions: io.vertx.core.buffer.Buffer hostsValue> = v1;
return v0;
}
public java.util.List getServers()
{
java.util.List v1;
io.vertx.core.dns.AddressResolverOptions v0;
v0 := @this: io.vertx.core.dns.AddressResolverOptions;
v1 = v0.<io.vertx.core.dns.AddressResolverOptions: java.util.List servers>;
return v1;
}
public io.vertx.core.dns.AddressResolverOptions setServers(java.util.List)
{
java.util.List v1;
io.vertx.core.dns.AddressResolverOptions v0;
v0 := @this: io.vertx.core.dns.AddressResolverOptions;
v1 := @parameter0: java.util.List;
v0.<io.vertx.core.dns.AddressResolverOptions: java.util.List servers> = v1;
return v0;
}
public io.vertx.core.dns.AddressResolverOptions addServer(java.lang.String)
{
java.util.List v2, v4;
java.lang.String v1;
io.vertx.core.dns.AddressResolverOptions v0;
java.util.ArrayList v3;
v0 := @this: io.vertx.core.dns.AddressResolverOptions;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.dns.AddressResolverOptions: java.util.List servers>;
if v2 != null goto label1;
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
v0.<io.vertx.core.dns.AddressResolverOptions: java.util.List servers> = v3;
label1:
v4 = v0.<io.vertx.core.dns.AddressResolverOptions: java.util.List servers>;
interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(v1);
return v0;
}
public boolean isOptResourceEnabled()
{
io.vertx.core.dns.AddressResolverOptions v0;
boolean v1;
v0 := @this: io.vertx.core.dns.AddressResolverOptions;
v1 = v0.<io.vertx.core.dns.AddressResolverOptions: boolean optResourceEnabled>;
return v1;
}
public io.vertx.core.dns.AddressResolverOptions setOptResourceEnabled(boolean)
{
io.vertx.core.dns.AddressResolverOptions v0;
boolean v1;
v0 := @this: io.vertx.core.dns.AddressResolverOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.dns.AddressResolverOptions: boolean optResourceEnabled> = v1;
return v0;
}
public int getCacheMinTimeToLive()
{
int v1;
io.vertx.core.dns.AddressResolverOptions v0;
v0 := @this: io.vertx.core.dns.AddressResolverOptions;
v1 = v0.<io.vertx.core.dns.AddressResolverOptions: int cacheMinTimeToLive>;
return v1;
}
public io.vertx.core.dns.AddressResolverOptions setCacheMinTimeToLive(int)
{
int v1;
io.vertx.core.dns.AddressResolverOptions v0;
java.lang.IllegalArgumentException v2;
v0 := @this: io.vertx.core.dns.AddressResolverOptions;
v1 := @parameter0: int;
if v1 >= 0 goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cacheMinTimeToLive must be >= 0");
throw v2;
label1:
v0.<io.vertx.core.dns.AddressResolverOptions: int cacheMinTimeToLive> = v1;
return v0;
}
public int getCacheMaxTimeToLive()
{
int v1;
io.vertx.core.dns.AddressResolverOptions v0;
v0 := @this: io.vertx.core.dns.AddressResolverOptions;
v1 = v0.<io.vertx.core.dns.AddressResolverOptions: int cacheMaxTimeToLive>;
return v1;
}
public io.vertx.core.dns.AddressResolverOptions setCacheMaxTimeToLive(int)
{
int v1;
io.vertx.core.dns.AddressResolverOptions v0;
java.lang.IllegalArgumentException v2;
v0 := @this: io.vertx.core.dns.AddressResolverOptions;
v1 := @parameter0: int;
if v1 >= 0 goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cacheMaxTimeToLive must be >= 0");
throw v2;
label1:
v0.<io.vertx.core.dns.AddressResolverOptions: int cacheMaxTimeToLive> = v1;
return v0;
}
public int getCacheNegativeTimeToLive()
{
int v1;
io.vertx.core.dns.AddressResolverOptions v0;
v0 := @this: io.vertx.core.dns.AddressResolverOptions;
v1 = v0.<io.vertx.core.dns.AddressResolverOptions: int cacheNegativeTimeToLive>;
return v1;
}
public io.vertx.core.dns.AddressResolverOptions setCacheNegativeTimeToLive(int)
{
int v1;
io.vertx.core.dns.AddressResolverOptions v0;
java.lang.IllegalArgumentException v2;
v0 := @this: io.vertx.core.dns.AddressResolverOptions;
v1 := @parameter0: int;
if v1 >= 0 goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cacheNegativeTimeToLive must be >= 0");
throw v2;
label1:
v0.<io.vertx.core.dns.AddressResolverOptions: int cacheNegativeTimeToLive> = v1;
return v0;
}
public long getQueryTimeout()
{
long v1;
io.vertx.core.dns.AddressResolverOptions v0;
v0 := @this: io.vertx.core.dns.AddressResolverOptions;
v1 = v0.<io.vertx.core.dns.AddressResolverOptions: long queryTimeout>;
return v1;
}
public io.vertx.core.dns.AddressResolverOptions setQueryTimeout(long)
{
byte v2;
long v1;
io.vertx.core.dns.AddressResolverOptions v0;
java.lang.IllegalArgumentException v3;
v0 := @this: io.vertx.core.dns.AddressResolverOptions;
v1 := @parameter0: long;
v2 = v1 cmp 1L;
if v2 >= 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("queryTimeout must be > 0");
throw v3;
label1:
v0.<io.vertx.core.dns.AddressResolverOptions: long queryTimeout> = v1;
return v0;
}
public int getMaxQueries()
{
int v1;
io.vertx.core.dns.AddressResolverOptions v0;
v0 := @this: io.vertx.core.dns.AddressResolverOptions;
v1 = v0.<io.vertx.core.dns.AddressResolverOptions: int maxQueries>;
return v1;
}
public io.vertx.core.dns.AddressResolverOptions setMaxQueries(int)
{
int v1;
io.vertx.core.dns.AddressResolverOptions v0;
java.lang.IllegalArgumentException v2;
v0 := @this: io.vertx.core.dns.AddressResolverOptions;
v1 := @parameter0: int;
if v1 >= 1 goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("maxQueries must be > 0");
throw v2;
label1:
v0.<io.vertx.core.dns.AddressResolverOptions: int maxQueries> = v1;
return v0;
}
public boolean getRdFlag()
{
io.vertx.core.dns.AddressResolverOptions v0;
boolean v1;
v0 := @this: io.vertx.core.dns.AddressResolverOptions;
v1 = v0.<io.vertx.core.dns.AddressResolverOptions: boolean rdFlag>;
return v1;
}
public io.vertx.core.dns.AddressResolverOptions setRdFlag(boolean)
{
io.vertx.core.dns.AddressResolverOptions v0;
boolean v1;
v0 := @this: io.vertx.core.dns.AddressResolverOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.dns.AddressResolverOptions: boolean rdFlag> = v1;
return v0;
}
public java.util.List getSearchDomains()
{
java.util.List v1;
io.vertx.core.dns.AddressResolverOptions v0;
v0 := @this: io.vertx.core.dns.AddressResolverOptions;
v1 = v0.<io.vertx.core.dns.AddressResolverOptions: java.util.List searchDomains>;
return v1;
}
public io.vertx.core.dns.AddressResolverOptions setSearchDomains(java.util.List)
{
java.util.List v1;
io.vertx.core.dns.AddressResolverOptions v0;
v0 := @this: io.vertx.core.dns.AddressResolverOptions;
v1 := @parameter0: java.util.List;
v0.<io.vertx.core.dns.AddressResolverOptions: java.util.List searchDomains> = v1;
return v0;
}
public io.vertx.core.dns.AddressResolverOptions addSearchDomain(java.lang.String)
{
java.util.List v2, v4;
java.lang.String v1;
io.vertx.core.dns.AddressResolverOptions v0;
java.util.ArrayList v3;
v0 := @this: io.vertx.core.dns.AddressResolverOptions;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.dns.AddressResolverOptions: java.util.List searchDomains>;
if v2 != null goto label1;
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
v0.<io.vertx.core.dns.AddressResolverOptions: java.util.List searchDomains> = v3;
label1:
v4 = v0.<io.vertx.core.dns.AddressResolverOptions: java.util.List searchDomains>;
interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(v1);
return v0;
}
public int getNdots()
{
int v1;
io.vertx.core.dns.AddressResolverOptions v0;
v0 := @this: io.vertx.core.dns.AddressResolverOptions;
v1 = v0.<io.vertx.core.dns.AddressResolverOptions: int ndots>;
return v1;
}
public io.vertx.core.dns.AddressResolverOptions setNdots(int)
{
int v1, v2;
io.vertx.core.dns.AddressResolverOptions v0;
java.lang.IllegalArgumentException v3;
v0 := @this: io.vertx.core.dns.AddressResolverOptions;
v1 := @parameter0: int;
v2 = (int) -1;
if v1 >= v2 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ndots must be >= -1");
throw v3;
label1:
v0.<io.vertx.core.dns.AddressResolverOptions: int ndots> = v1;
return v0;
}
public boolean isRotateServers()
{
io.vertx.core.dns.AddressResolverOptions v0;
boolean v1;
v0 := @this: io.vertx.core.dns.AddressResolverOptions;
v1 = v0.<io.vertx.core.dns.AddressResolverOptions: boolean rotateServers>;
return v1;
}
public io.vertx.core.dns.AddressResolverOptions setRotateServers(boolean)
{
io.vertx.core.dns.AddressResolverOptions v0;
boolean v1;
v0 := @this: io.vertx.core.dns.AddressResolverOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.dns.AddressResolverOptions: boolean rotateServers> = v1;
return v0;
}
public boolean isRoundRobinInetAddress()
{
io.vertx.core.dns.AddressResolverOptions v0;
boolean v1;
v0 := @this: io.vertx.core.dns.AddressResolverOptions;
v1 = v0.<io.vertx.core.dns.AddressResolverOptions: boolean roundRobinInetAddress>;
return v1;
}
public io.vertx.core.dns.AddressResolverOptions setRoundRobinInetAddress(boolean)
{
io.vertx.core.dns.AddressResolverOptions v0;
boolean v1;
v0 := @this: io.vertx.core.dns.AddressResolverOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.dns.AddressResolverOptions: boolean roundRobinInetAddress> = v1;
return v0;
}
public io.vertx.core.json.JsonObject toJson()
{
io.vertx.core.json.JsonObject v1;
io.vertx.core.dns.AddressResolverOptions v0;
v0 := @this: io.vertx.core.dns.AddressResolverOptions;
v1 = new io.vertx.core.json.JsonObject;
specialinvoke v1.<io.vertx.core.json.JsonObject: void <init>()>();
staticinvoke <io.vertx.core.dns.AddressResolverOptionsConverter: void toJson(io.vertx.core.dns.AddressResolverOptions,io.vertx.core.json.JsonObject)>(v0, v1);
return v1;
}
static void <clinit>()
{
int v0;
boolean v1;
<io.vertx.core.dns.AddressResolverOptions: java.util.List DEFAULT_SERVERS> = null;
<io.vertx.core.dns.AddressResolverOptions: java.util.List DEFAULT_SEACH_DOMAINS> = null;
v0 = <io.vertx.core.impl.AddressResolver: int DEFAULT_NDOTS_RESOLV_OPTION>;
<io.vertx.core.dns.AddressResolverOptions: int DEFAULT_NDOTS> = v0;
v1 = <io.vertx.core.impl.AddressResolver: boolean DEFAULT_ROTATE_RESOLV_OPTION>;
<io.vertx.core.dns.AddressResolverOptions: boolean DEFAULT_ROTATE_SERVERS> = v1;
return;
}
}