public class io.vertx.core.eventbus.EventBusOptions extends io.vertx.core.net.TCPSSLOptions
{
public static final java.lang.String DEFAULT_CLUSTER_HOST;
public static final int DEFAULT_CLUSTER_PORT;
public static final java.lang.String DEFAULT_CLUSTER_PUBLIC_HOST;
public static final int DEFAULT_CLUSTER_PUBLIC_PORT;
public static final long DEFAULT_CLUSTER_PING_INTERVAL;
public static final long DEFAULT_CLUSTER_PING_REPLY_INTERVAL;
private java.lang.String clusterPublicHost;
private int clusterPublicPort;
private long clusterPingInterval;
private long clusterPingReplyInterval;
private io.vertx.core.json.JsonObject clusterNodeMetadata;
public static final int DEFAULT_ACCEPT_BACKLOG;
public static final io.vertx.core.http.ClientAuth DEFAULT_CLIENT_AUTH;
private int port;
private java.lang.String host;
private int acceptBacklog;
private io.vertx.core.http.ClientAuth clientAuth;
public static final int DEFAULT_RECONNECT_ATTEMPTS;
public static final long DEFAULT_RECONNECT_INTERVAL;
public static final int DEFAULT_CONNECT_TIMEOUT;
public static final boolean DEFAULT_TRUST_ALL;
private int reconnectAttempts;
private long reconnectInterval;
private int connectTimeout;
private boolean trustAll;
public void <init>()
{
long v3, v4;
int v2, v7, v9;
io.vertx.core.http.ClientAuth v5, v8;
io.vertx.core.eventbus.EventBusOptions v0;
java.lang.String v1, v6;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: void <init>()>();
v1 = <io.vertx.core.eventbus.EventBusOptions: java.lang.String DEFAULT_CLUSTER_PUBLIC_HOST>;
v0.<io.vertx.core.eventbus.EventBusOptions: java.lang.String clusterPublicHost> = v1;
v2 = (int) -1;
v0.<io.vertx.core.eventbus.EventBusOptions: int clusterPublicPort> = v2;
v3 = <io.vertx.core.eventbus.EventBusOptions: long DEFAULT_CLUSTER_PING_INTERVAL>;
v0.<io.vertx.core.eventbus.EventBusOptions: long clusterPingInterval> = v3;
v4 = <io.vertx.core.eventbus.EventBusOptions: long DEFAULT_CLUSTER_PING_REPLY_INTERVAL>;
v0.<io.vertx.core.eventbus.EventBusOptions: long clusterPingReplyInterval> = v4;
v5 = <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.http.ClientAuth DEFAULT_CLIENT_AUTH>;
v0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.http.ClientAuth clientAuth> = v5;
v0.<io.vertx.core.eventbus.EventBusOptions: int port> = 0;
v6 = <io.vertx.core.eventbus.EventBusOptions: java.lang.String DEFAULT_CLUSTER_HOST>;
v0.<io.vertx.core.eventbus.EventBusOptions: java.lang.String host> = v6;
v7 = (int) -1;
v0.<io.vertx.core.eventbus.EventBusOptions: int acceptBacklog> = v7;
v8 = <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.http.ClientAuth DEFAULT_CLIENT_AUTH>;
v0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.http.ClientAuth clientAuth> = v8;
v0.<io.vertx.core.eventbus.EventBusOptions: int reconnectAttempts> = 0;
v0.<io.vertx.core.eventbus.EventBusOptions: long reconnectInterval> = 1000L;
v9 = (int) 60000;
v0.<io.vertx.core.eventbus.EventBusOptions: int connectTimeout> = v9;
v0.<io.vertx.core.eventbus.EventBusOptions: boolean trustAll> = 1;
return;
}
public void <init>(io.vertx.core.eventbus.EventBusOptions)
{
long v10, v18, v4, v5, v9;
int v14, v16, v19, v20, v3, v8;
io.vertx.core.json.JsonObject v11, v12, v13;
io.vertx.core.eventbus.EventBusOptions v0, v1;
java.lang.String v15, v2, v7;
boolean v21;
io.vertx.core.http.ClientAuth v17, v6;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: io.vertx.core.eventbus.EventBusOptions;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)>(v1);
v2 = <io.vertx.core.eventbus.EventBusOptions: java.lang.String DEFAULT_CLUSTER_PUBLIC_HOST>;
v0.<io.vertx.core.eventbus.EventBusOptions: java.lang.String clusterPublicHost> = v2;
v3 = (int) -1;
v0.<io.vertx.core.eventbus.EventBusOptions: int clusterPublicPort> = v3;
v4 = <io.vertx.core.eventbus.EventBusOptions: long DEFAULT_CLUSTER_PING_INTERVAL>;
v0.<io.vertx.core.eventbus.EventBusOptions: long clusterPingInterval> = v4;
v5 = <io.vertx.core.eventbus.EventBusOptions: long DEFAULT_CLUSTER_PING_REPLY_INTERVAL>;
v0.<io.vertx.core.eventbus.EventBusOptions: long clusterPingReplyInterval> = v5;
v6 = <io.vertx.core.eventbus.EventBusOptions: io.vertx.core.http.ClientAuth DEFAULT_CLIENT_AUTH>;
v0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.http.ClientAuth clientAuth> = v6;
v7 = v1.<io.vertx.core.eventbus.EventBusOptions: java.lang.String clusterPublicHost>;
v0.<io.vertx.core.eventbus.EventBusOptions: java.lang.String clusterPublicHost> = v7;
v8 = v1.<io.vertx.core.eventbus.EventBusOptions: int clusterPublicPort>;
v0.<io.vertx.core.eventbus.EventBusOptions: int clusterPublicPort> = v8;
v9 = v1.<io.vertx.core.eventbus.EventBusOptions: long clusterPingInterval>;
v0.<io.vertx.core.eventbus.EventBusOptions: long clusterPingInterval> = v9;
v10 = v1.<io.vertx.core.eventbus.EventBusOptions: long clusterPingReplyInterval>;
v0.<io.vertx.core.eventbus.EventBusOptions: long clusterPingReplyInterval> = v10;
v11 = v1.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.json.JsonObject clusterNodeMetadata>;
if v11 != null goto label1;
v12 = null;
goto label2;
label1:
v13 = v1.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.json.JsonObject clusterNodeMetadata>;
v12 = virtualinvoke v13.<io.vertx.core.json.JsonObject: io.vertx.core.json.JsonObject copy()>();
label2:
v0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.json.JsonObject clusterNodeMetadata> = v12;
v14 = v1.<io.vertx.core.eventbus.EventBusOptions: int port>;
v0.<io.vertx.core.eventbus.EventBusOptions: int port> = v14;
v15 = v1.<io.vertx.core.eventbus.EventBusOptions: java.lang.String host>;
v0.<io.vertx.core.eventbus.EventBusOptions: java.lang.String host> = v15;
v16 = v1.<io.vertx.core.eventbus.EventBusOptions: int acceptBacklog>;
v0.<io.vertx.core.eventbus.EventBusOptions: int acceptBacklog> = v16;
v17 = v1.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.http.ClientAuth clientAuth>;
v0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.http.ClientAuth clientAuth> = v17;
v18 = v1.<io.vertx.core.eventbus.EventBusOptions: long reconnectInterval>;
v0.<io.vertx.core.eventbus.EventBusOptions: long reconnectInterval> = v18;
v19 = v1.<io.vertx.core.eventbus.EventBusOptions: int reconnectAttempts>;
v0.<io.vertx.core.eventbus.EventBusOptions: int reconnectAttempts> = v19;
v20 = v1.<io.vertx.core.eventbus.EventBusOptions: int connectTimeout>;
v0.<io.vertx.core.eventbus.EventBusOptions: int connectTimeout> = v20;
v21 = v1.<io.vertx.core.eventbus.EventBusOptions: boolean trustAll>;
v0.<io.vertx.core.eventbus.EventBusOptions: boolean trustAll> = v21;
return;
}
public void <init>(io.vertx.core.json.JsonObject)
{
io.vertx.core.json.JsonObject v1;
io.vertx.core.eventbus.EventBusOptions v0;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: io.vertx.core.json.JsonObject;
specialinvoke v0.<io.vertx.core.eventbus.EventBusOptions: void <init>()>();
staticinvoke <io.vertx.core.eventbus.EventBusOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.eventbus.EventBusOptions)>(v1, v0);
return;
}
public io.vertx.core.json.JsonObject toJson()
{
int v4, v5;
io.vertx.core.json.JsonObject v1;
io.vertx.core.eventbus.EventBusOptions v0;
java.lang.Integer v3;
boolean v2;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 = new io.vertx.core.json.JsonObject;
specialinvoke v1.<io.vertx.core.json.JsonObject: void <init>()>();
staticinvoke <io.vertx.core.eventbus.EventBusOptionsConverter: void toJson(io.vertx.core.eventbus.EventBusOptions,io.vertx.core.json.JsonObject)>(v0, v1);
v2 = virtualinvoke v1.<io.vertx.core.json.JsonObject: boolean containsKey(java.lang.String)>("clusterPublicPort");
if v2 == 0 goto label1;
v3 = virtualinvoke v1.<io.vertx.core.json.JsonObject: java.lang.Integer getInteger(java.lang.String)>("clusterPublicPort");
v4 = virtualinvoke v3.<java.lang.Integer: int intValue()>();
v5 = (int) -1;
if v4 != v5 goto label1;
virtualinvoke v1.<io.vertx.core.json.JsonObject: java.lang.Object remove(java.lang.String)>("clusterPublicPort");
label1:
return v1;
}
public io.vertx.core.http.ClientAuth getClientAuth()
{
io.vertx.core.http.ClientAuth v1;
io.vertx.core.eventbus.EventBusOptions v0;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 = v0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.http.ClientAuth clientAuth>;
return v1;
}
public io.vertx.core.eventbus.EventBusOptions setClientAuth(io.vertx.core.http.ClientAuth)
{
io.vertx.core.http.ClientAuth v1;
io.vertx.core.eventbus.EventBusOptions v0;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: io.vertx.core.http.ClientAuth;
v0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.http.ClientAuth clientAuth> = v1;
return v0;
}
public int getAcceptBacklog()
{
int v1;
io.vertx.core.eventbus.EventBusOptions v0;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 = v0.<io.vertx.core.eventbus.EventBusOptions: int acceptBacklog>;
return v1;
}
public io.vertx.core.eventbus.EventBusOptions setAcceptBacklog(int)
{
int v1;
io.vertx.core.eventbus.EventBusOptions v0;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: int;
v0.<io.vertx.core.eventbus.EventBusOptions: int acceptBacklog> = v1;
return v0;
}
public java.lang.String getHost()
{
io.vertx.core.eventbus.EventBusOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 = v0.<io.vertx.core.eventbus.EventBusOptions: java.lang.String host>;
return v1;
}
public io.vertx.core.eventbus.EventBusOptions setHost(java.lang.String)
{
io.vertx.core.eventbus.EventBusOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: java.lang.String;
v0.<io.vertx.core.eventbus.EventBusOptions: java.lang.String host> = v1;
return v0;
}
public int getPort()
{
int v1;
io.vertx.core.eventbus.EventBusOptions v0;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 = v0.<io.vertx.core.eventbus.EventBusOptions: int port>;
return v1;
}
public io.vertx.core.eventbus.EventBusOptions setPort(int)
{
int v1, v2;
io.vertx.core.eventbus.EventBusOptions v0;
java.lang.IllegalArgumentException v3;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: int;
if v1 < 0 goto label1;
v2 = (int) 65535;
if v1 <= v2 goto label2;
label1:
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("clusterPort p must be in range 0 <= p <= 65535");
throw v3;
label2:
v0.<io.vertx.core.eventbus.EventBusOptions: int port> = v1;
return v0;
}
public int getReconnectAttempts()
{
int v1;
io.vertx.core.eventbus.EventBusOptions v0;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 = v0.<io.vertx.core.eventbus.EventBusOptions: int reconnectAttempts>;
return v1;
}
public io.vertx.core.eventbus.EventBusOptions setReconnectAttempts(int)
{
int v1;
io.vertx.core.eventbus.EventBusOptions v0;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: int;
v0.<io.vertx.core.eventbus.EventBusOptions: int reconnectAttempts> = v1;
return v0;
}
public long getReconnectInterval()
{
long v1;
io.vertx.core.eventbus.EventBusOptions v0;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 = v0.<io.vertx.core.eventbus.EventBusOptions: long reconnectInterval>;
return v1;
}
public io.vertx.core.eventbus.EventBusOptions setReconnectInterval(long)
{
long v1;
io.vertx.core.eventbus.EventBusOptions v0;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: long;
v0.<io.vertx.core.eventbus.EventBusOptions: long reconnectInterval> = v1;
return v0;
}
public io.vertx.core.eventbus.EventBusOptions addCrlPath(java.lang.String) throws java.lang.NullPointerException
{
io.vertx.core.eventbus.EventBusOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions addCrlPath(java.lang.String)>(v1);
return v0;
}
public io.vertx.core.eventbus.EventBusOptions addCrlValue(io.vertx.core.buffer.Buffer) throws java.lang.NullPointerException
{
io.vertx.core.eventbus.EventBusOptions v0;
io.vertx.core.buffer.Buffer v1;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions addCrlValue(io.vertx.core.buffer.Buffer)>(v1);
return v0;
}
public io.vertx.core.eventbus.EventBusOptions addEnabledCipherSuite(java.lang.String)
{
io.vertx.core.eventbus.EventBusOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions addEnabledCipherSuite(java.lang.String)>(v1);
return v0;
}
public io.vertx.core.eventbus.EventBusOptions removeEnabledCipherSuite(java.lang.String)
{
io.vertx.core.eventbus.EventBusOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions removeEnabledCipherSuite(java.lang.String)>(v1);
return v0;
}
public io.vertx.core.eventbus.EventBusOptions setIdleTimeout(int)
{
int v1;
io.vertx.core.eventbus.EventBusOptions v0;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeout(int)>(v1);
return v0;
}
public io.vertx.core.eventbus.EventBusOptions setReadIdleTimeout(int)
{
int v1;
io.vertx.core.eventbus.EventBusOptions v0;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReadIdleTimeout(int)>(v1);
return v0;
}
public io.vertx.core.eventbus.EventBusOptions setWriteIdleTimeout(int)
{
int v1;
io.vertx.core.eventbus.EventBusOptions v0;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setWriteIdleTimeout(int)>(v1);
return v0;
}
public io.vertx.core.eventbus.EventBusOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v1;
io.vertx.core.eventbus.EventBusOptions v0;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: java.util.concurrent.TimeUnit;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>(v1);
return v0;
}
public io.vertx.core.eventbus.EventBusOptions setKeyCertOptions(io.vertx.core.net.KeyCertOptions)
{
io.vertx.core.eventbus.EventBusOptions v0;
io.vertx.core.net.KeyCertOptions v1;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: io.vertx.core.net.KeyCertOptions;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setKeyCertOptions(io.vertx.core.net.KeyCertOptions)>(v1);
return v0;
}
public io.vertx.core.eventbus.EventBusOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)
{
io.vertx.core.eventbus.EventBusOptions v0;
io.vertx.core.net.JksOptions v1;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: io.vertx.core.net.JksOptions;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>(v1);
return v0;
}
public io.vertx.core.eventbus.EventBusOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)
{
io.vertx.core.eventbus.EventBusOptions v0;
io.vertx.core.net.PemKeyCertOptions v1;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: io.vertx.core.net.PemKeyCertOptions;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>(v1);
return v0;
}
public io.vertx.core.eventbus.EventBusOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)
{
io.vertx.core.eventbus.EventBusOptions v0;
io.vertx.core.net.PemTrustOptions v1;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: io.vertx.core.net.PemTrustOptions;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>(v1);
return v0;
}
public io.vertx.core.eventbus.EventBusOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)
{
io.vertx.core.eventbus.EventBusOptions v0;
io.vertx.core.net.PfxOptions v1;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: io.vertx.core.net.PfxOptions;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>(v1);
return v0;
}
public io.vertx.core.eventbus.EventBusOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)
{
io.vertx.core.eventbus.EventBusOptions v0;
io.vertx.core.net.PfxOptions v1;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: io.vertx.core.net.PfxOptions;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>(v1);
return v0;
}
public io.vertx.core.eventbus.EventBusOptions setSoLinger(int)
{
int v1;
io.vertx.core.eventbus.EventBusOptions v0;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSoLinger(int)>(v1);
return v0;
}
public io.vertx.core.eventbus.EventBusOptions setSsl(boolean)
{
io.vertx.core.eventbus.EventBusOptions v0;
boolean v1;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: boolean;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSsl(boolean)>(v1);
return v0;
}
public io.vertx.core.eventbus.EventBusOptions setTcpKeepAlive(boolean)
{
io.vertx.core.eventbus.EventBusOptions v0;
boolean v1;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: boolean;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpKeepAlive(boolean)>(v1);
return v0;
}
public io.vertx.core.eventbus.EventBusOptions setTcpNoDelay(boolean)
{
io.vertx.core.eventbus.EventBusOptions v0;
boolean v1;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: boolean;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpNoDelay(boolean)>(v1);
return v0;
}
public io.vertx.core.eventbus.EventBusOptions setTrustOptions(io.vertx.core.net.TrustOptions)
{
io.vertx.core.net.TrustOptions v1;
io.vertx.core.eventbus.EventBusOptions v0;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: io.vertx.core.net.TrustOptions;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrustOptions(io.vertx.core.net.TrustOptions)>(v1);
return v0;
}
public io.vertx.core.eventbus.EventBusOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)
{
io.vertx.core.eventbus.EventBusOptions v0;
io.vertx.core.net.JksOptions v1;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: io.vertx.core.net.JksOptions;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>(v1);
return v0;
}
public io.vertx.core.eventbus.EventBusOptions setReceiveBufferSize(int)
{
int v1;
io.vertx.core.eventbus.EventBusOptions v0;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReceiveBufferSize(int)>(v1);
return v0;
}
public io.vertx.core.eventbus.EventBusOptions setReuseAddress(boolean)
{
io.vertx.core.eventbus.EventBusOptions v0;
boolean v1;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: boolean;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReuseAddress(boolean)>(v1);
return v0;
}
public io.vertx.core.eventbus.EventBusOptions setReusePort(boolean)
{
io.vertx.core.eventbus.EventBusOptions v0;
boolean v1;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: boolean;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReusePort(boolean)>(v1);
return v0;
}
public io.vertx.core.eventbus.EventBusOptions setSendBufferSize(int)
{
int v1;
io.vertx.core.eventbus.EventBusOptions v0;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSendBufferSize(int)>(v1);
return v0;
}
public io.vertx.core.eventbus.EventBusOptions setTrafficClass(int)
{
int v1;
io.vertx.core.eventbus.EventBusOptions v0;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: int;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrafficClass(int)>(v1);
return v0;
}
public io.vertx.core.eventbus.EventBusOptions setUseAlpn(boolean)
{
io.vertx.core.eventbus.EventBusOptions v0;
boolean v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setUseAlpn(boolean)>(v1);
return v2;
}
public io.vertx.core.eventbus.EventBusOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)
{
io.vertx.core.net.SSLEngineOptions v1;
io.vertx.core.eventbus.EventBusOptions v0;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: io.vertx.core.net.SSLEngineOptions;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(v1);
return v2;
}
public io.vertx.core.eventbus.EventBusOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)
{
io.vertx.core.eventbus.EventBusOptions v0;
io.vertx.core.net.JdkSSLEngineOptions v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: io.vertx.core.net.JdkSSLEngineOptions;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>(v1);
return v2;
}
public io.vertx.core.eventbus.EventBusOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)
{
io.vertx.core.net.OpenSSLEngineOptions v1;
io.vertx.core.eventbus.EventBusOptions v0;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: io.vertx.core.net.OpenSSLEngineOptions;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>(v1);
return v2;
}
public io.vertx.core.eventbus.EventBusOptions setEnabledSecureTransportProtocols(java.util.Set)
{
java.util.Set v1;
io.vertx.core.eventbus.EventBusOptions v0;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: java.util.Set;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setEnabledSecureTransportProtocols(java.util.Set)>(v1);
return v2;
}
public io.vertx.core.eventbus.EventBusOptions addEnabledSecureTransportProtocol(java.lang.String)
{
io.vertx.core.eventbus.EventBusOptions v0;
java.lang.String v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions addEnabledSecureTransportProtocol(java.lang.String)>(v1);
return v2;
}
public io.vertx.core.eventbus.EventBusOptions removeEnabledSecureTransportProtocol(java.lang.String)
{
io.vertx.core.eventbus.EventBusOptions v0;
java.lang.String v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions removeEnabledSecureTransportProtocol(java.lang.String)>(v1);
return v2;
}
public io.vertx.core.eventbus.EventBusOptions setTcpFastOpen(boolean)
{
io.vertx.core.eventbus.EventBusOptions v0;
boolean v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpFastOpen(boolean)>(v1);
return v2;
}
public io.vertx.core.eventbus.EventBusOptions setTcpCork(boolean)
{
io.vertx.core.eventbus.EventBusOptions v0;
boolean v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpCork(boolean)>(v1);
return v2;
}
public io.vertx.core.eventbus.EventBusOptions setTcpQuickAck(boolean)
{
io.vertx.core.eventbus.EventBusOptions v0;
boolean v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpQuickAck(boolean)>(v1);
return v2;
}
public io.vertx.core.eventbus.EventBusOptions setTcpUserTimeout(int)
{
int v1;
io.vertx.core.eventbus.EventBusOptions v0;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpUserTimeout(int)>(v1);
return v2;
}
public io.vertx.core.eventbus.EventBusOptions setLogActivity(boolean)
{
io.vertx.core.eventbus.EventBusOptions v0;
boolean v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setLogActivity(boolean)>(v1);
return v2;
}
public io.vertx.core.eventbus.EventBusOptions setSslHandshakeTimeout(long)
{
long v1;
io.vertx.core.eventbus.EventBusOptions v0;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: long;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslHandshakeTimeout(long)>(v1);
return v2;
}
public io.vertx.core.eventbus.EventBusOptions setSslHandshakeTimeoutUnit(java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v1;
io.vertx.core.eventbus.EventBusOptions v0;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: java.util.concurrent.TimeUnit;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslHandshakeTimeoutUnit(java.util.concurrent.TimeUnit)>(v1);
return v2;
}
public io.vertx.core.eventbus.EventBusOptions setTrustAll(boolean)
{
io.vertx.core.eventbus.EventBusOptions v0;
boolean v1;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.eventbus.EventBusOptions: boolean trustAll> = v1;
return v0;
}
public boolean isTrustAll()
{
io.vertx.core.eventbus.EventBusOptions v0;
boolean v1;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 = v0.<io.vertx.core.eventbus.EventBusOptions: boolean trustAll>;
return v1;
}
public int getConnectTimeout()
{
int v1;
io.vertx.core.eventbus.EventBusOptions v0;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 = v0.<io.vertx.core.eventbus.EventBusOptions: int connectTimeout>;
return v1;
}
public io.vertx.core.eventbus.EventBusOptions setConnectTimeout(int)
{
int v1;
io.vertx.core.eventbus.EventBusOptions v0;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: int;
v0.<io.vertx.core.eventbus.EventBusOptions: int connectTimeout> = v1;
return v0;
}
public long getClusterPingInterval()
{
long v1;
io.vertx.core.eventbus.EventBusOptions v0;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 = v0.<io.vertx.core.eventbus.EventBusOptions: long clusterPingInterval>;
return v1;
}
public io.vertx.core.eventbus.EventBusOptions setClusterPingInterval(long)
{
byte v2;
long v1;
io.vertx.core.eventbus.EventBusOptions v0;
java.lang.IllegalArgumentException v3;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: long;
v2 = v1 cmp 1L;
if v2 >= 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("clusterPingInterval must be greater than 0");
throw v3;
label1:
v0.<io.vertx.core.eventbus.EventBusOptions: long clusterPingInterval> = v1;
return v0;
}
public long getClusterPingReplyInterval()
{
long v1;
io.vertx.core.eventbus.EventBusOptions v0;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 = v0.<io.vertx.core.eventbus.EventBusOptions: long clusterPingReplyInterval>;
return v1;
}
public io.vertx.core.eventbus.EventBusOptions setClusterPingReplyInterval(long)
{
byte v2;
long v1;
io.vertx.core.eventbus.EventBusOptions v0;
java.lang.IllegalArgumentException v3;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: long;
v2 = v1 cmp 1L;
if v2 >= 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("clusterPingReplyInterval must be greater than 0");
throw v3;
label1:
v0.<io.vertx.core.eventbus.EventBusOptions: long clusterPingReplyInterval> = v1;
return v0;
}
public java.lang.String getClusterPublicHost()
{
io.vertx.core.eventbus.EventBusOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 = v0.<io.vertx.core.eventbus.EventBusOptions: java.lang.String clusterPublicHost>;
return v1;
}
public io.vertx.core.eventbus.EventBusOptions setClusterPublicHost(java.lang.String)
{
io.vertx.core.eventbus.EventBusOptions v0;
java.lang.String v1;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: java.lang.String;
v0.<io.vertx.core.eventbus.EventBusOptions: java.lang.String clusterPublicHost> = v1;
return v0;
}
public int getClusterPublicPort()
{
int v1;
io.vertx.core.eventbus.EventBusOptions v0;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 = v0.<io.vertx.core.eventbus.EventBusOptions: int clusterPublicPort>;
return v1;
}
public io.vertx.core.eventbus.EventBusOptions setClusterPublicPort(int)
{
int v1, v2;
io.vertx.core.eventbus.EventBusOptions v0;
java.lang.IllegalArgumentException v3;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: int;
if v1 < 0 goto label1;
v2 = (int) 65535;
if v1 <= v2 goto label2;
label1:
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("clusterPublicPort p must be in range 0 <= p <= 65535");
throw v3;
label2:
v0.<io.vertx.core.eventbus.EventBusOptions: int clusterPublicPort> = v1;
return v0;
}
public io.vertx.core.json.JsonObject getClusterNodeMetadata()
{
io.vertx.core.json.JsonObject v1;
io.vertx.core.eventbus.EventBusOptions v0;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 = v0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.json.JsonObject clusterNodeMetadata>;
return v1;
}
public io.vertx.core.eventbus.EventBusOptions setClusterNodeMetadata(io.vertx.core.json.JsonObject)
{
io.vertx.core.json.JsonObject v1;
io.vertx.core.eventbus.EventBusOptions v0;
v0 := @this: io.vertx.core.eventbus.EventBusOptions;
v1 := @parameter0: io.vertx.core.json.JsonObject;
v0.<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.json.JsonObject clusterNodeMetadata> = v1;
return v0;
}
static void <clinit>()
{
java.util.concurrent.TimeUnit v0, v2;
io.vertx.core.http.ClientAuth v4;
long v1, v3;
<io.vertx.core.eventbus.EventBusOptions: java.lang.String DEFAULT_CLUSTER_HOST> = null;
<io.vertx.core.eventbus.EventBusOptions: java.lang.String DEFAULT_CLUSTER_PUBLIC_HOST> = null;
v0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
v1 = virtualinvoke v0.<java.util.concurrent.TimeUnit: long toMillis(long)>(20L);
<io.vertx.core.eventbus.EventBusOptions: long DEFAULT_CLUSTER_PING_INTERVAL> = v1;
v2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;
v3 = virtualinvoke v2.<java.util.concurrent.TimeUnit: long toMillis(long)>(20L);
<io.vertx.core.eventbus.EventBusOptions: long DEFAULT_CLUSTER_PING_REPLY_INTERVAL> = v3;
v4 = <io.vertx.core.http.ClientAuth: io.vertx.core.http.ClientAuth NONE>;
<io.vertx.core.eventbus.EventBusOptions: io.vertx.core.http.ClientAuth DEFAULT_CLIENT_AUTH> = v4;
return;
}
}