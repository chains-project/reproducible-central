class io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue extends java.lang.Object
{
private final java.util.Queue tasks;
private final java.lang.String address;
private boolean running;
private boolean closed;
final io.vertx.core.eventbus.impl.clustered.Serializer this$0;
void <init>(io.vertx.core.eventbus.impl.clustered.Serializer, java.lang.String)
{
io.vertx.core.eventbus.impl.clustered.Serializer v1;
io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue v0;
java.lang.String v2;
java.util.LinkedList v3;
v0 := @this: io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue;
v1 := @parameter0: io.vertx.core.eventbus.impl.clustered.Serializer;
v2 := @parameter1: java.lang.String;
v0.<io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue: io.vertx.core.eventbus.impl.clustered.Serializer this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue: java.lang.String address> = v2;
v3 = new java.util.LinkedList;
specialinvoke v3.<java.util.LinkedList: void <init>()>();
v0.<io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue: java.util.Queue tasks> = v3;
return;
}
void checkPending()
{
io.vertx.core.eventbus.impl.clustered.Serializer v6;
io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue v0;
java.util.Map v7;
java.lang.Object v3, v5;
java.lang.String v8;
java.util.Queue v2, v4;
boolean v1;
v0 := @this: io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue;
v1 = v0.<io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue: boolean running>;
if v1 != 0 goto label4;
v0.<io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue: boolean running> = 1;
label1:
v2 = v0.<io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue: java.util.Queue tasks>;
v3 = interfaceinvoke v2.<java.util.Queue: java.lang.Object peek()>();
if v3 == null goto label2;
virtualinvoke v3.<io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue$SerializedTask: void process()>();
v4 = v0.<io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue: java.util.Queue tasks>;
v5 = interfaceinvoke v4.<java.util.Queue: java.lang.Object peek()>();
if v5 != v3 goto label1;
goto label3;
label2:
v6 = v0.<io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue: io.vertx.core.eventbus.impl.clustered.Serializer this$0>;
v7 = v6.<io.vertx.core.eventbus.impl.clustered.Serializer: java.util.Map queues>;
v8 = v0.<io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue: java.lang.String address>;
interfaceinvoke v7.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v8);
label3:
v0.<io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue: boolean running> = 0;
label4:
return;
}
void add(io.vertx.core.eventbus.Message, java.util.function.BiConsumer, io.vertx.core.Promise)
{
io.vertx.core.Promise v3, v7;
io.vertx.core.eventbus.Message v1;
io.vertx.core.impl.ContextInternal v6;
io.vertx.core.Future v8;
io.vertx.core.eventbus.impl.clustered.Serializer v5;
io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue v0;
java.util.function.BiConsumer v2;
java.util.Queue v9;
io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue$SerializedTask v4;
v0 := @this: io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue;
v1 := @parameter0: io.vertx.core.eventbus.Message;
v2 := @parameter1: java.util.function.BiConsumer;
v3 := @parameter2: io.vertx.core.Promise;
v4 = new io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue$SerializedTask;
v5 = v0.<io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue: io.vertx.core.eventbus.impl.clustered.Serializer this$0>;
v6 = v5.<io.vertx.core.eventbus.impl.clustered.Serializer: io.vertx.core.impl.ContextInternal ctx>;
specialinvoke v4.<io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue$SerializedTask: void <init>(io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue,io.vertx.core.impl.ContextInternal,io.vertx.core.eventbus.Message,java.util.function.BiConsumer)>(v0, v6, v1, v2);
v7 = v4.<io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue$SerializedTask: io.vertx.core.Promise internalPromise>;
v8 = interfaceinvoke v7.<io.vertx.core.Promise: io.vertx.core.Future future()>();
interfaceinvoke v8.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v3);
interfaceinvoke v8.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v4);
v9 = v0.<io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue: java.util.Queue tasks>;
interfaceinvoke v9.<java.util.Queue: boolean add(java.lang.Object)>(v4);
virtualinvoke v0.<io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue: void checkPending()>();
return;
}
void processed()
{
io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue v0;
java.util.Queue v2;
boolean v1;
v0 := @this: io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue;
v1 = v0.<io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue: boolean closed>;
if v1 != 0 goto label1;
v2 = v0.<io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue: java.util.Queue tasks>;
interfaceinvoke v2.<java.util.Queue: java.lang.Object poll()>();
virtualinvoke v0.<io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue: void checkPending()>();
label1:
return;
}
void close()
{
io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue v0;
io.vertx.core.Promise v5;
java.lang.Object v4;
java.util.Queue v1, v3;
boolean v2;
v0 := @this: io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue;
v0.<io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue: boolean closed> = 1;
label1:
v1 = v0.<io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue: java.util.Queue tasks>;
v2 = interfaceinvoke v1.<java.util.Queue: boolean isEmpty()>();
if v2 != 0 goto label2;
v3 = v0.<io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue: java.util.Queue tasks>;
v4 = interfaceinvoke v3.<java.util.Queue: java.lang.Object remove()>();
v5 = v4.<io.vertx.core.eventbus.impl.clustered.Serializer$SerializerQueue$SerializedTask: io.vertx.core.Promise internalPromise>;
interfaceinvoke v5.<io.vertx.core.Promise: boolean tryFail(java.lang.String)>("Context is closing");
goto label1;
label2:
return;
}
}