public class io.vertx.core.file.impl.AsyncFileLockImpl extends java.lang.Object implements io.vertx.core.file.AsyncFileLock
{
private final io.vertx.core.impl.VertxInternal vertx;
private final java.nio.channels.FileLock fileLock;
public void <init>(io.vertx.core.impl.VertxInternal, java.nio.channels.FileLock)
{
io.vertx.core.file.impl.AsyncFileLockImpl v0;
io.vertx.core.impl.VertxInternal v1;
java.lang.Object v3, v4;
java.nio.channels.FileLock v2;
v0 := @this: io.vertx.core.file.impl.AsyncFileLockImpl;
v1 := @parameter0: io.vertx.core.impl.VertxInternal;
v2 := @parameter1: java.nio.channels.FileLock;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "vertx is null");
v0.<io.vertx.core.file.impl.AsyncFileLockImpl: io.vertx.core.impl.VertxInternal vertx> = v3;
v4 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v2, "fileLock is null");
v0.<io.vertx.core.file.impl.AsyncFileLockImpl: java.nio.channels.FileLock fileLock> = v4;
return;
}
public long position()
{
io.vertx.core.file.impl.AsyncFileLockImpl v0;
long v2;
java.nio.channels.FileLock v1;
v0 := @this: io.vertx.core.file.impl.AsyncFileLockImpl;
v1 = v0.<io.vertx.core.file.impl.AsyncFileLockImpl: java.nio.channels.FileLock fileLock>;
v2 = virtualinvoke v1.<java.nio.channels.FileLock: long position()>();
return v2;
}
public long size()
{
io.vertx.core.file.impl.AsyncFileLockImpl v0;
long v2;
java.nio.channels.FileLock v1;
v0 := @this: io.vertx.core.file.impl.AsyncFileLockImpl;
v1 = v0.<io.vertx.core.file.impl.AsyncFileLockImpl: java.nio.channels.FileLock fileLock>;
v2 = virtualinvoke v1.<java.nio.channels.FileLock: long size()>();
return v2;
}
public boolean isShared()
{
io.vertx.core.file.impl.AsyncFileLockImpl v0;
boolean v2;
java.nio.channels.FileLock v1;
v0 := @this: io.vertx.core.file.impl.AsyncFileLockImpl;
v1 = v0.<io.vertx.core.file.impl.AsyncFileLockImpl: java.nio.channels.FileLock fileLock>;
v2 = virtualinvoke v1.<java.nio.channels.FileLock: boolean isShared()>();
return v2;
}
public boolean overlaps(long, long)
{
io.vertx.core.file.impl.AsyncFileLockImpl v0;
long v1, v2;
boolean v4;
java.nio.channels.FileLock v3;
v0 := @this: io.vertx.core.file.impl.AsyncFileLockImpl;
v1 := @parameter0: long;
v2 := @parameter1: long;
v3 = v0.<io.vertx.core.file.impl.AsyncFileLockImpl: java.nio.channels.FileLock fileLock>;
v4 = virtualinvoke v3.<java.nio.channels.FileLock: boolean overlaps(long,long)>(v1, v2);
return v4;
}
public boolean isValidBlocking()
{
io.vertx.core.file.impl.AsyncFileLockImpl v0;
boolean v2;
java.nio.channels.FileLock v1;
v0 := @this: io.vertx.core.file.impl.AsyncFileLockImpl;
v1 = v0.<io.vertx.core.file.impl.AsyncFileLockImpl: java.nio.channels.FileLock fileLock>;
v2 = virtualinvoke v1.<java.nio.channels.FileLock: boolean isValid()>();
return v2;
}
public io.vertx.core.Future isValid()
{
io.vertx.core.file.impl.AsyncFileLockImpl v0;
io.vertx.core.impl.VertxInternal v1;
io.vertx.core.impl.ContextInternal v2;
io.vertx.core.Handler v3;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.file.impl.AsyncFileLockImpl;
v1 = v0.<io.vertx.core.file.impl.AsyncFileLockImpl: io.vertx.core.impl.VertxInternal vertx>;
v2 = interfaceinvoke v1.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v3 = staticinvoke <io.vertx.core.file.impl.AsyncFileLockImpl$lambda_isValid_0__1270: io.vertx.core.Handler bootstrap$(io.vertx.core.file.impl.AsyncFileLockImpl)>(v0);
v4 = interfaceinvoke v2.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future executeBlockingInternal(io.vertx.core.Handler)>(v3);
return v4;
}
public void isValid(io.vertx.core.Handler)
{
io.vertx.core.file.impl.AsyncFileLockImpl v0;
io.vertx.core.Handler v1;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.file.impl.AsyncFileLockImpl;
v1 := @parameter0: io.vertx.core.Handler;
v2 = virtualinvoke v0.<io.vertx.core.file.impl.AsyncFileLockImpl: io.vertx.core.Future isValid()>();
if v1 == null goto label1;
interfaceinvoke v2.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v1);
label1:
return;
}
public void releaseBlocking()
{
io.vertx.core.file.impl.AsyncFileLockImpl v0;
java.io.IOException v2;
io.vertx.core.file.FileSystemException v3;
java.nio.channels.FileLock v1;
v0 := @this: io.vertx.core.file.impl.AsyncFileLockImpl;
label1:
v1 = v0.<io.vertx.core.file.impl.AsyncFileLockImpl: java.nio.channels.FileLock fileLock>;
virtualinvoke v1.<java.nio.channels.FileLock: void release()>();
label2:
goto label4;
label3:
v2 := @caughtexception;
v3 = new io.vertx.core.file.FileSystemException;
specialinvoke v3.<io.vertx.core.file.FileSystemException: void <init>(java.lang.Throwable)>(v2);
throw v3;
label4:
return;
catch java.io.IOException from label1 to label2 with label3;
}
public io.vertx.core.Future release()
{
io.vertx.core.file.impl.AsyncFileLockImpl v0;
io.vertx.core.impl.VertxInternal v1;
io.vertx.core.impl.ContextInternal v2;
io.vertx.core.Handler v3;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.file.impl.AsyncFileLockImpl;
v1 = v0.<io.vertx.core.file.impl.AsyncFileLockImpl: io.vertx.core.impl.VertxInternal vertx>;
v2 = interfaceinvoke v1.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v3 = staticinvoke <io.vertx.core.file.impl.AsyncFileLockImpl$lambda_release_1__1271: io.vertx.core.Handler bootstrap$(io.vertx.core.file.impl.AsyncFileLockImpl)>(v0);
v4 = interfaceinvoke v2.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future executeBlockingInternal(io.vertx.core.Handler)>(v3);
return v4;
}
public void release(io.vertx.core.Handler)
{
io.vertx.core.file.impl.AsyncFileLockImpl v0;
io.vertx.core.Handler v1;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.file.impl.AsyncFileLockImpl;
v1 := @parameter0: io.vertx.core.Handler;
v2 = virtualinvoke v0.<io.vertx.core.file.impl.AsyncFileLockImpl: io.vertx.core.Future release()>();
if v1 == null goto label1;
interfaceinvoke v2.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v1);
label1:
return;
}
}