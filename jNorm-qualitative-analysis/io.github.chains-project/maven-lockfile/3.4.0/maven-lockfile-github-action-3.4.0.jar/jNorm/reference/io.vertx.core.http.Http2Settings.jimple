public class io.vertx.core.http.Http2Settings extends java.lang.Object
{
public static final long DEFAULT_HEADER_TABLE_SIZE;
public static final boolean DEFAULT_ENABLE_PUSH;
public static final long DEFAULT_MAX_CONCURRENT_STREAMS;
public static final int DEFAULT_INITIAL_WINDOW_SIZE;
public static final int DEFAULT_MAX_FRAME_SIZE;
public static final int DEFAULT_MAX_HEADER_LIST_SIZE;
public static final java.util.Map DEFAULT_EXTRA_SETTINGS;
private long headerTableSize;
private boolean pushEnabled;
private long maxConcurrentStreams;
private int initialWindowSize;
private int maxFrameSize;
private long maxHeaderListSize;
private java.util.Map extraSettings;
public void <init>()
{
int v1;
io.vertx.core.http.Http2Settings v0;
java.util.Map v2;
v0 := @this: io.vertx.core.http.Http2Settings;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.http.Http2Settings: long headerTableSize> = 4096L;
v0.<io.vertx.core.http.Http2Settings: boolean pushEnabled> = 1;
v0.<io.vertx.core.http.Http2Settings: long maxConcurrentStreams> = 4294967295L;
v1 = (int) 65535;
v0.<io.vertx.core.http.Http2Settings: int initialWindowSize> = v1;
v0.<io.vertx.core.http.Http2Settings: int maxFrameSize> = 16384;
v0.<io.vertx.core.http.Http2Settings: long maxHeaderListSize> = 8192L;
v2 = <io.vertx.core.http.Http2Settings: java.util.Map DEFAULT_EXTRA_SETTINGS>;
v0.<io.vertx.core.http.Http2Settings: java.util.Map extraSettings> = v2;
return;
}
public void <init>(io.vertx.core.json.JsonObject)
{
io.vertx.core.json.JsonObject v1;
io.vertx.core.http.Http2Settings v0;
v0 := @this: io.vertx.core.http.Http2Settings;
v1 := @parameter0: io.vertx.core.json.JsonObject;
specialinvoke v0.<io.vertx.core.http.Http2Settings: void <init>()>();
staticinvoke <io.vertx.core.http.Http2SettingsConverter: void fromJson(java.lang.Iterable,io.vertx.core.http.Http2Settings)>(v1, v0);
return;
}
public void <init>(io.vertx.core.http.Http2Settings)
{
java.util.HashMap v9;
long v2, v4, v7;
io.vertx.core.http.Http2Settings v0, v1;
java.util.Map v10, v8;
int v5, v6;
boolean v3;
v0 := @this: io.vertx.core.http.Http2Settings;
v1 := @parameter0: io.vertx.core.http.Http2Settings;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = v1.<io.vertx.core.http.Http2Settings: long headerTableSize>;
v0.<io.vertx.core.http.Http2Settings: long headerTableSize> = v2;
v3 = v1.<io.vertx.core.http.Http2Settings: boolean pushEnabled>;
v0.<io.vertx.core.http.Http2Settings: boolean pushEnabled> = v3;
v4 = v1.<io.vertx.core.http.Http2Settings: long maxConcurrentStreams>;
v0.<io.vertx.core.http.Http2Settings: long maxConcurrentStreams> = v4;
v5 = v1.<io.vertx.core.http.Http2Settings: int initialWindowSize>;
v0.<io.vertx.core.http.Http2Settings: int initialWindowSize> = v5;
v6 = v1.<io.vertx.core.http.Http2Settings: int maxFrameSize>;
v0.<io.vertx.core.http.Http2Settings: int maxFrameSize> = v6;
v7 = v1.<io.vertx.core.http.Http2Settings: long maxHeaderListSize>;
v0.<io.vertx.core.http.Http2Settings: long maxHeaderListSize> = v7;
v8 = v1.<io.vertx.core.http.Http2Settings: java.util.Map extraSettings>;
if v8 == null goto label1;
v9 = new java.util.HashMap;
v10 = v1.<io.vertx.core.http.Http2Settings: java.util.Map extraSettings>;
specialinvoke v9.<java.util.HashMap: void <init>(java.util.Map)>(v10);
goto label2;
label1:
v9 = null;
label2:
v0.<io.vertx.core.http.Http2Settings: java.util.Map extraSettings> = v9;
return;
}
public long getHeaderTableSize()
{
long v1;
io.vertx.core.http.Http2Settings v0;
v0 := @this: io.vertx.core.http.Http2Settings;
v1 = v0.<io.vertx.core.http.Http2Settings: long headerTableSize>;
return v1;
}
public io.vertx.core.http.Http2Settings setHeaderTableSize(long)
{
byte v2, v4;
long v1;
io.vertx.core.http.Http2Settings v0;
boolean v3, v5;
v0 := @this: io.vertx.core.http.Http2Settings;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 < 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>(v3, "headerTableSize must be >= 0");
v4 = v1 cmp 4294967295L;
if v4 > 0 goto label3;
v5 = 1;
goto label4;
label3:
v5 = 0;
label4:
staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>(v5, "headerTableSize must be <= 4294967295");
v0.<io.vertx.core.http.Http2Settings: long headerTableSize> = v1;
return v0;
}
public boolean isPushEnabled()
{
io.vertx.core.http.Http2Settings v0;
boolean v1;
v0 := @this: io.vertx.core.http.Http2Settings;
v1 = v0.<io.vertx.core.http.Http2Settings: boolean pushEnabled>;
return v1;
}
public io.vertx.core.http.Http2Settings setPushEnabled(boolean)
{
io.vertx.core.http.Http2Settings v0;
boolean v1;
v0 := @this: io.vertx.core.http.Http2Settings;
v1 := @parameter0: boolean;
v0.<io.vertx.core.http.Http2Settings: boolean pushEnabled> = v1;
return v0;
}
public long getMaxConcurrentStreams()
{
long v1;
io.vertx.core.http.Http2Settings v0;
v0 := @this: io.vertx.core.http.Http2Settings;
v1 = v0.<io.vertx.core.http.Http2Settings: long maxConcurrentStreams>;
return v1;
}
public io.vertx.core.http.Http2Settings setMaxConcurrentStreams(long)
{
byte v2, v4;
long v1;
io.vertx.core.http.Http2Settings v0;
boolean v3, v5;
v0 := @this: io.vertx.core.http.Http2Settings;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 < 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>(v3, "maxConcurrentStreams must be >= 0");
v4 = v1 cmp 4294967295L;
if v4 > 0 goto label3;
v5 = 1;
goto label4;
label3:
v5 = 0;
label4:
staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>(v5, "maxConcurrentStreams must be < 4294967295");
v0.<io.vertx.core.http.Http2Settings: long maxConcurrentStreams> = v1;
return v0;
}
public int getInitialWindowSize()
{
int v1;
io.vertx.core.http.Http2Settings v0;
v0 := @this: io.vertx.core.http.Http2Settings;
v1 = v0.<io.vertx.core.http.Http2Settings: int initialWindowSize>;
return v1;
}
public io.vertx.core.http.Http2Settings setInitialWindowSize(int)
{
int v1;
io.vertx.core.http.Http2Settings v0;
boolean v2;
v0 := @this: io.vertx.core.http.Http2Settings;
v1 := @parameter0: int;
if v1 < 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>(v2, "initialWindowSize must be >= 0");
v0.<io.vertx.core.http.Http2Settings: int initialWindowSize> = v1;
return v0;
}
public int getMaxFrameSize()
{
int v1;
io.vertx.core.http.Http2Settings v0;
v0 := @this: io.vertx.core.http.Http2Settings;
v1 = v0.<io.vertx.core.http.Http2Settings: int maxFrameSize>;
return v1;
}
public io.vertx.core.http.Http2Settings setMaxFrameSize(int)
{
int v1;
io.vertx.core.http.Http2Settings v0;
boolean v2, v3;
v0 := @this: io.vertx.core.http.Http2Settings;
v1 := @parameter0: int;
if v1 < 16384 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>(v2, "maxFrameSize must be >= 16384");
if v1 > 16777215 goto label3;
v3 = 1;
goto label4;
label3:
v3 = 0;
label4:
staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>(v3, "maxFrameSize must be <= 16777215");
v0.<io.vertx.core.http.Http2Settings: int maxFrameSize> = v1;
return v0;
}
public long getMaxHeaderListSize()
{
long v1;
io.vertx.core.http.Http2Settings v0;
v0 := @this: io.vertx.core.http.Http2Settings;
v1 = v0.<io.vertx.core.http.Http2Settings: long maxHeaderListSize>;
return v1;
}
public io.vertx.core.http.Http2Settings setMaxHeaderListSize(long)
{
byte v2, v4;
long v1;
io.vertx.core.http.Http2Settings v0;
boolean v3, v5;
v0 := @this: io.vertx.core.http.Http2Settings;
v1 := @parameter0: long;
v2 = v1 cmp 0L;
if v2 < 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>(v3, "maxHeaderListSize must be >= 0");
v4 = v1 cmp 0L;
if v4 < 0 goto label3;
v5 = 1;
goto label4;
label3:
v5 = 0;
label4:
staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>(v5, "maxHeaderListSize must be >= 0");
v0.<io.vertx.core.http.Http2Settings: long maxHeaderListSize> = v1;
return v0;
}
public java.util.Map getExtraSettings()
{
io.vertx.core.http.Http2Settings v0;
java.util.Map v1;
v0 := @this: io.vertx.core.http.Http2Settings;
v1 = v0.<io.vertx.core.http.Http2Settings: java.util.Map extraSettings>;
return v1;
}
public io.vertx.core.http.Http2Settings setExtraSettings(java.util.Map)
{
io.vertx.core.http.Http2Settings v0;
java.util.Map v1;
v0 := @this: io.vertx.core.http.Http2Settings;
v1 := @parameter0: java.util.Map;
v0.<io.vertx.core.http.Http2Settings: java.util.Map extraSettings> = v1;
return v0;
}
public java.lang.Long get(int)
{
long v13, v2, v5, v7;
io.vertx.core.http.Http2Settings v0;
java.lang.Integer v17;
java.lang.Long v10, v12, v14, v3, v6, v8;
java.util.Map v15, v16;
int v1, v11, v9;
boolean v4;
java.lang.Object v18;
v0 := @this: io.vertx.core.http.Http2Settings;
v1 := @parameter0: int;
tableswitch(v1)
{
case 1: goto label01;
case 2: goto label02;
case 3: goto label05;
case 4: goto label06;
case 5: goto label07;
case 6: goto label08;
default: goto label09;
};
label01:
v2 = v0.<io.vertx.core.http.Http2Settings: long headerTableSize>;
v3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v2);
return v3;
label02:
v4 = v0.<io.vertx.core.http.Http2Settings: boolean pushEnabled>;
if v4 == 0 goto label03;
v5 = 1L;
goto label04;
label03:
v5 = 0L;
label04:
v6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v5);
return v6;
label05:
v7 = v0.<io.vertx.core.http.Http2Settings: long maxConcurrentStreams>;
v8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v7);
return v8;
label06:
v9 = v0.<io.vertx.core.http.Http2Settings: int initialWindowSize>;
v10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v9);
return v10;
label07:
v11 = v0.<io.vertx.core.http.Http2Settings: int maxFrameSize>;
v12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v11);
return v12;
label08:
v13 = v0.<io.vertx.core.http.Http2Settings: long maxHeaderListSize>;
v14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v13);
return v14;
label09:
v15 = v0.<io.vertx.core.http.Http2Settings: java.util.Map extraSettings>;
if v15 == null goto label10;
v16 = v0.<io.vertx.core.http.Http2Settings: java.util.Map extraSettings>;
v17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v18 = interfaceinvoke v16.<java.util.Map: java.lang.Object get(java.lang.Object)>(v17);
goto label11;
label10:
v18 = null;
label11:
return v18;
}
public io.vertx.core.http.Http2Settings set(int, long)
{
java.util.HashMap v16;
long v2;
io.vertx.core.http.Http2Settings v0;
java.lang.Integer v18;
byte v11, v13, v5, v6, v8, v9;
java.lang.Long v19;
java.util.Map v15, v17;
int v1, v20, v3;
boolean v10, v12, v14, v4, v7;
v0 := @this: io.vertx.core.http.Http2Settings;
v1 := @parameter0: int;
v2 := @parameter1: long;
if v1 < 0 goto label01;
v3 = (int) 65535;
if v1 > v3 goto label01;
v4 = 1;
goto label02;
label01:
v4 = 0;
label02:
staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>(v4, "Setting id must me an unsigned 16-bit value");
v5 = v2 cmp 0L;
if v5 < 0 goto label03;
v6 = v2 cmp 4294967295L;
if v6 > 0 goto label03;
v7 = 1;
goto label04;
label03:
v7 = 0;
label04:
staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>(v7, "Setting value must me an unsigned 32-bit value");
tableswitch(v1)
{
case 1: goto label05;
case 2: goto label06;
case 3: goto label12;
case 4: goto label13;
case 5: goto label14;
case 6: goto label15;
default: goto label18;
};
label05:
virtualinvoke v0.<io.vertx.core.http.Http2Settings: io.vertx.core.http.Http2Settings setHeaderTableSize(long)>(v2);
goto label20;
label06:
v8 = v2 cmp 0L;
if v8 == 0 goto label07;
v9 = v2 cmp 1L;
if v9 != 0 goto label08;
label07:
v10 = 1;
goto label09;
label08:
v10 = 0;
label09:
staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>(v10, "enablePush must be 0 or 1");
v11 = v2 cmp 1L;
if v11 != 0 goto label10;
v12 = 1;
goto label11;
label10:
v12 = 0;
label11:
virtualinvoke v0.<io.vertx.core.http.Http2Settings: io.vertx.core.http.Http2Settings setPushEnabled(boolean)>(v12);
goto label20;
label12:
virtualinvoke v0.<io.vertx.core.http.Http2Settings: io.vertx.core.http.Http2Settings setMaxConcurrentStreams(long)>(v2);
goto label20;
label13:
virtualinvoke v0.<io.vertx.core.http.Http2Settings: io.vertx.core.http.Http2Settings setInitialWindowSize(int)>(v2);
goto label20;
label14:
virtualinvoke v0.<io.vertx.core.http.Http2Settings: io.vertx.core.http.Http2Settings setMaxFrameSize(int)>(v2);
goto label20;
label15:
v13 = v2 cmp 2147483647L;
if v13 > 0 goto label16;
v14 = 1;
goto label17;
label16:
v14 = 0;
label17:
staticinvoke <io.vertx.core.impl.Arguments: void require(boolean,java.lang.String)>(v14, "maxHeaderListSize must be <= 2147483647");
virtualinvoke v0.<io.vertx.core.http.Http2Settings: io.vertx.core.http.Http2Settings setMaxHeaderListSize(long)>(v20);
goto label20;
label18:
v15 = v0.<io.vertx.core.http.Http2Settings: java.util.Map extraSettings>;
if v15 != null goto label19;
v16 = new java.util.HashMap;
specialinvoke v16.<java.util.HashMap: void <init>()>();
v0.<io.vertx.core.http.Http2Settings: java.util.Map extraSettings> = v16;
label19:
v17 = v0.<io.vertx.core.http.Http2Settings: java.util.Map extraSettings>;
v18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v19 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v2);
interfaceinvoke v17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v18, v19);
label20:
return v0;
}
public boolean equals(java.lang.Object)
{
long v10, v16, v17, v4, v5, v9;
io.vertx.core.http.Http2Settings v0;
byte v11, v18, v6;
int v12, v13, v14, v15;
boolean v7, v8;
java.lang.Class v2, v3;
java.lang.Object v1;
v0 := @this: io.vertx.core.http.Http2Settings;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v1 == null goto label2;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v2 == v3 goto label3;
label2:
return 0;
label3:
v4 = v0.<io.vertx.core.http.Http2Settings: long headerTableSize>;
v5 = v1.<io.vertx.core.http.Http2Settings: long headerTableSize>;
v6 = v4 cmp v5;
if v6 == 0 goto label4;
return 0;
label4:
v7 = v0.<io.vertx.core.http.Http2Settings: boolean pushEnabled>;
v8 = v1.<io.vertx.core.http.Http2Settings: boolean pushEnabled>;
if v7 == v8 goto label5;
return 0;
label5:
v9 = v0.<io.vertx.core.http.Http2Settings: long maxConcurrentStreams>;
v10 = v1.<io.vertx.core.http.Http2Settings: long maxConcurrentStreams>;
v11 = v9 cmp v10;
if v11 == 0 goto label6;
return 0;
label6:
v12 = v0.<io.vertx.core.http.Http2Settings: int initialWindowSize>;
v13 = v1.<io.vertx.core.http.Http2Settings: int initialWindowSize>;
if v12 == v13 goto label7;
return 0;
label7:
v14 = v0.<io.vertx.core.http.Http2Settings: int maxFrameSize>;
v15 = v1.<io.vertx.core.http.Http2Settings: int maxFrameSize>;
if v14 == v15 goto label8;
return 0;
label8:
v16 = v0.<io.vertx.core.http.Http2Settings: long maxHeaderListSize>;
v17 = v1.<io.vertx.core.http.Http2Settings: long maxHeaderListSize>;
v18 = v16 cmp v17;
if v18 == 0 goto label9;
return 0;
label9:
return 1;
}
public int hashCode()
{
long v1, v10, v11, v12, v13, v2, v22, v23, v24, v25, v3, v4;
io.vertx.core.http.Http2Settings v0;
int v14, v15, v16, v17, v18, v19, v20, v21, v26, v5, v8, v9;
boolean v6, v7;
v0 := @this: io.vertx.core.http.Http2Settings;
v1 = v0.<io.vertx.core.http.Http2Settings: long headerTableSize>;
v2 = v0.<io.vertx.core.http.Http2Settings: long headerTableSize>;
v3 = v2 >>> 32;
v4 = v1 ^ v3;
v5 = 31 * v4;
v6 = v0.<io.vertx.core.http.Http2Settings: boolean pushEnabled>;
if v6 == 0 goto label1;
v7 = 1;
goto label2;
label1:
v7 = 0;
label2:
v8 = v5 + v7;
v9 = 31 * v8;
v10 = v0.<io.vertx.core.http.Http2Settings: long maxConcurrentStreams>;
v11 = v0.<io.vertx.core.http.Http2Settings: long maxConcurrentStreams>;
v12 = v11 >>> 32;
v13 = v10 ^ v12;
v14 = v9 + v13;
v15 = 31 * v14;
v16 = v0.<io.vertx.core.http.Http2Settings: int initialWindowSize>;
v17 = v15 + v16;
v18 = 31 * v17;
v19 = v0.<io.vertx.core.http.Http2Settings: int maxFrameSize>;
v20 = v18 + v19;
v21 = 31 * v20;
v22 = v0.<io.vertx.core.http.Http2Settings: long maxHeaderListSize>;
v23 = v0.<io.vertx.core.http.Http2Settings: long maxHeaderListSize>;
v24 = v23 >>> 32;
v25 = v22 ^ v24;
v26 = v21 + v25;
return v26;
}
public java.lang.String toString()
{
io.vertx.core.json.JsonObject v1;
io.vertx.core.http.Http2Settings v0;
java.lang.String v2;
v0 := @this: io.vertx.core.http.Http2Settings;
v1 = virtualinvoke v0.<io.vertx.core.http.Http2Settings: io.vertx.core.json.JsonObject toJson()>();
v2 = virtualinvoke v1.<io.vertx.core.json.JsonObject: java.lang.String encode()>();
return v2;
}
public io.vertx.core.json.JsonObject toJson()
{
io.vertx.core.json.JsonObject v1;
io.vertx.core.http.Http2Settings v0;
v0 := @this: io.vertx.core.http.Http2Settings;
v1 = new io.vertx.core.json.JsonObject;
specialinvoke v1.<io.vertx.core.json.JsonObject: void <init>()>();
staticinvoke <io.vertx.core.http.Http2SettingsConverter: void toJson(io.vertx.core.http.Http2Settings,io.vertx.core.json.JsonObject)>(v0, v1);
return v1;
}
static void <clinit>()
{
<io.vertx.core.http.Http2Settings: java.util.Map DEFAULT_EXTRA_SETTINGS> = null;
return;
}
}