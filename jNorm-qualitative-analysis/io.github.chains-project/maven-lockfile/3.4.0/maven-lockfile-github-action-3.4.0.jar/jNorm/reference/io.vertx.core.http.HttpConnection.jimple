public interface  io.vertx.core.http.HttpConnection extends java.lang.Object
{
public int getWindowSize()
{
int v1;
io.vertx.core.http.HttpConnection v0;
v0 := @this: io.vertx.core.http.HttpConnection;
v1 = (int) -1;
return v1;
}
public io.vertx.core.http.HttpConnection setWindowSize(int)
{
int v1;
io.vertx.core.http.HttpConnection v0;
v0 := @this: io.vertx.core.http.HttpConnection;
v1 := @parameter0: int;
return v0;
}
public io.vertx.core.http.HttpConnection goAway(long)
{
int v2;
long v1;
io.vertx.core.http.HttpConnection v0, v3;
v0 := @this: io.vertx.core.http.HttpConnection;
v1 := @parameter0: long;
v2 = (int) -1;
v3 = interfaceinvoke v0.<io.vertx.core.http.HttpConnection: io.vertx.core.http.HttpConnection goAway(long,int)>(v1, v2);
return v3;
}
public io.vertx.core.http.HttpConnection goAway(long, int)
{
int v2;
long v1;
io.vertx.core.http.HttpConnection v0, v3;
v0 := @this: io.vertx.core.http.HttpConnection;
v1 := @parameter0: long;
v2 := @parameter1: int;
v3 = interfaceinvoke v0.<io.vertx.core.http.HttpConnection: io.vertx.core.http.HttpConnection goAway(long,int,io.vertx.core.buffer.Buffer)>(v1, v2, null);
return v3;
}
public abstract io.vertx.core.http.HttpConnection goAway(long, int, io.vertx.core.buffer.Buffer);
public abstract io.vertx.core.http.HttpConnection goAwayHandler(io.vertx.core.Handler);
public abstract io.vertx.core.http.HttpConnection shutdownHandler(io.vertx.core.Handler);
public void shutdown(io.vertx.core.Handler)
{
io.vertx.core.http.HttpConnection v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.HttpConnection;
v1 := @parameter0: io.vertx.core.Handler;
interfaceinvoke v0.<io.vertx.core.http.HttpConnection: void shutdown(long,io.vertx.core.Handler)>(30000L, v1);
return;
}
public io.vertx.core.Future shutdown()
{
io.vertx.core.http.HttpConnection v0;
io.vertx.core.Future v1;
v0 := @this: io.vertx.core.http.HttpConnection;
v1 = interfaceinvoke v0.<io.vertx.core.http.HttpConnection: io.vertx.core.Future shutdown(long)>(30000L);
return v1;
}
public abstract void shutdown(long, io.vertx.core.Handler);
public abstract io.vertx.core.Future shutdown(long);
public abstract io.vertx.core.http.HttpConnection closeHandler(io.vertx.core.Handler);
public abstract io.vertx.core.Future close();
public void close(io.vertx.core.Handler)
{
io.vertx.core.http.HttpConnection v0;
io.vertx.core.Handler v1;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.http.HttpConnection;
v1 := @parameter0: io.vertx.core.Handler;
v2 = interfaceinvoke v0.<io.vertx.core.http.HttpConnection: io.vertx.core.Future close()>();
interfaceinvoke v2.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v1);
return;
}
public abstract io.vertx.core.http.Http2Settings settings();
public abstract io.vertx.core.Future updateSettings(io.vertx.core.http.Http2Settings);
public abstract io.vertx.core.http.HttpConnection updateSettings(io.vertx.core.http.Http2Settings, io.vertx.core.Handler);
public abstract io.vertx.core.http.Http2Settings remoteSettings();
public abstract io.vertx.core.http.HttpConnection remoteSettingsHandler(io.vertx.core.Handler);
public abstract io.vertx.core.http.HttpConnection ping(io.vertx.core.buffer.Buffer, io.vertx.core.Handler);
public abstract io.vertx.core.Future ping(io.vertx.core.buffer.Buffer);
public abstract io.vertx.core.http.HttpConnection pingHandler(io.vertx.core.Handler);
public abstract io.vertx.core.http.HttpConnection exceptionHandler(io.vertx.core.Handler);
public abstract io.vertx.core.net.SocketAddress remoteAddress();
public abstract io.vertx.core.net.SocketAddress remoteAddress(boolean);
public abstract io.vertx.core.net.SocketAddress localAddress();
public abstract io.vertx.core.net.SocketAddress localAddress(boolean);
public abstract boolean isSsl();
public abstract javax.net.ssl.SSLSession sslSession();
public abstract javax.security.cert.X509Certificate[] peerCertificateChain() throws javax.net.ssl.SSLPeerUnverifiedException;
public abstract java.util.List peerCertificates() throws javax.net.ssl.SSLPeerUnverifiedException;
public abstract java.lang.String indicatedServerName();
}