class io.vertx.core.http.impl.Http1xServerConnection$1 extends io.vertx.core.net.impl.NetSocketImpl
{
final io.vertx.core.http.impl.Http1xServerConnection this$0;
void <init>(io.vertx.core.http.impl.Http1xServerConnection, io.vertx.core.impl.ContextInternal, io.netty.channel.ChannelHandlerContext, io.vertx.core.net.impl.SslChannelProvider, io.vertx.core.spi.metrics.TCPMetrics, boolean)
{
io.netty.channel.ChannelHandlerContext v3;
io.vertx.core.http.impl.Http1xServerConnection$1 v0;
io.vertx.core.net.impl.SslChannelProvider v4;
io.vertx.core.impl.ContextInternal v2;
io.vertx.core.spi.metrics.TCPMetrics v5;
io.vertx.core.http.impl.Http1xServerConnection v1;
boolean v6;
v0 := @this: io.vertx.core.http.impl.Http1xServerConnection$1;
v1 := @parameter0: io.vertx.core.http.impl.Http1xServerConnection;
v2 := @parameter1: io.vertx.core.impl.ContextInternal;
v3 := @parameter2: io.netty.channel.ChannelHandlerContext;
v4 := @parameter3: io.vertx.core.net.impl.SslChannelProvider;
v5 := @parameter4: io.vertx.core.spi.metrics.TCPMetrics;
v6 := @parameter5: boolean;
v0.<io.vertx.core.http.impl.Http1xServerConnection$1: io.vertx.core.http.impl.Http1xServerConnection this$0> = v1;
specialinvoke v0.<io.vertx.core.net.impl.NetSocketImpl: void <init>(io.vertx.core.impl.ContextInternal,io.netty.channel.ChannelHandlerContext,io.vertx.core.net.impl.SslChannelProvider,io.vertx.core.spi.metrics.TCPMetrics,boolean)>(v2, v3, v4, v5, v6);
return;
}
protected void handleClosed()
{
io.vertx.core.http.impl.Http1xServerConnection$1 v0;
long v10;
io.vertx.core.http.impl.Http1xServerConnection v1, v3, v5;
io.vertx.core.http.impl.Http1xServerResponse v8, v9;
io.vertx.core.http.impl.Http1xServerRequest v4;
io.vertx.core.spi.metrics.HttpServerMetrics v2, v6;
java.lang.Object v7;
v0 := @this: io.vertx.core.http.impl.Http1xServerConnection$1;
v1 = v0.<io.vertx.core.http.impl.Http1xServerConnection$1: io.vertx.core.http.impl.Http1xServerConnection this$0>;
v2 = v1.<io.vertx.core.http.impl.Http1xServerConnection: io.vertx.core.spi.metrics.HttpServerMetrics metrics>;
if v2 == null goto label1;
v3 = v0.<io.vertx.core.http.impl.Http1xServerConnection$1: io.vertx.core.http.impl.Http1xServerConnection this$0>;
v4 = v3.<io.vertx.core.http.impl.Http1xServerConnection: io.vertx.core.http.impl.Http1xServerRequest responseInProgress>;
v5 = v0.<io.vertx.core.http.impl.Http1xServerConnection$1: io.vertx.core.http.impl.Http1xServerConnection this$0>;
v6 = v5.<io.vertx.core.http.impl.Http1xServerConnection: io.vertx.core.spi.metrics.HttpServerMetrics metrics>;
v7 = virtualinvoke v4.<io.vertx.core.http.impl.Http1xServerRequest: java.lang.Object metric()>();
v8 = virtualinvoke v4.<io.vertx.core.http.impl.Http1xServerRequest: io.vertx.core.http.impl.Http1xServerResponse response()>();
v9 = virtualinvoke v4.<io.vertx.core.http.impl.Http1xServerRequest: io.vertx.core.http.impl.Http1xServerResponse response()>();
v10 = virtualinvoke v9.<io.vertx.core.http.impl.Http1xServerResponse: long bytesWritten()>();
interfaceinvoke v6.<io.vertx.core.spi.metrics.HttpServerMetrics: void responseEnd(java.lang.Object,io.vertx.core.spi.observability.HttpResponse,long)>(v7, v8, v10);
label1:
specialinvoke v0.<io.vertx.core.net.impl.NetSocketImpl: void handleClosed()>();
return;
}
public synchronized void handleMessage(java.lang.Object)
{
io.vertx.core.http.impl.Http1xServerConnection$1 v0;
java.lang.Object v1;
boolean v2;
v0 := @this: io.vertx.core.http.impl.Http1xServerConnection$1;
v1 := @parameter0: java.lang.Object;
v2 = v1 instanceof io.netty.handler.codec.http.HttpContent;
if v2 == 0 goto label1;
staticinvoke <io.netty.util.ReferenceCountUtil: boolean release(java.lang.Object)>(v1);
return;
label1:
specialinvoke v0.<io.vertx.core.net.impl.NetSocketImpl: void handleMessage(java.lang.Object)>(v1);
return;
}
}