class io.vertx.core.http.impl.Http2ServerConnection$Push extends java.lang.Object implements io.vertx.core.http.impl.Http2ServerStreamHandler
{
protected final io.vertx.core.impl.ContextInternal context;
protected final io.vertx.core.http.impl.Http2ServerStream stream;
protected final io.vertx.core.http.impl.Http2ServerResponse response;
private final io.vertx.core.Promise promise;
final io.vertx.core.http.impl.Http2ServerConnection this$0;
public void <init>(io.vertx.core.http.impl.Http2ServerConnection, io.vertx.core.http.impl.Http2ServerStream, java.lang.String, io.vertx.core.Promise)
{
io.vertx.core.http.impl.Http2ServerConnection v1;
io.vertx.core.Promise v4;
io.vertx.core.impl.ContextInternal v5;
io.vertx.core.http.impl.Http2ServerConnection$Push v0;
io.vertx.core.http.impl.Http2ServerStream v2;
io.vertx.core.http.impl.Http2ServerResponse v6;
java.lang.String v3;
io.vertx.core.http.impl.Http2ConnectionBase v7;
v0 := @this: io.vertx.core.http.impl.Http2ServerConnection$Push;
v1 := @parameter0: io.vertx.core.http.impl.Http2ServerConnection;
v2 := @parameter1: io.vertx.core.http.impl.Http2ServerStream;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: io.vertx.core.Promise;
v0.<io.vertx.core.http.impl.Http2ServerConnection$Push: io.vertx.core.http.impl.Http2ServerConnection this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v5 = v2.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.impl.ContextInternal context>;
v0.<io.vertx.core.http.impl.Http2ServerConnection$Push: io.vertx.core.impl.ContextInternal context> = v5;
v0.<io.vertx.core.http.impl.Http2ServerConnection$Push: io.vertx.core.http.impl.Http2ServerStream stream> = v2;
v6 = new io.vertx.core.http.impl.Http2ServerResponse;
v7 = v2.<io.vertx.core.http.impl.Http2ServerStream: io.vertx.core.http.impl.Http2ConnectionBase conn>;
specialinvoke v6.<io.vertx.core.http.impl.Http2ServerResponse: void <init>(io.vertx.core.http.impl.Http2ServerConnection,io.vertx.core.http.impl.Http2ServerStream,boolean,java.lang.String)>(v7, v2, 1, v3);
v0.<io.vertx.core.http.impl.Http2ServerConnection$Push: io.vertx.core.http.impl.Http2ServerResponse response> = v6;
v0.<io.vertx.core.http.impl.Http2ServerConnection$Push: io.vertx.core.Promise promise> = v4;
return;
}
public io.vertx.core.http.impl.Http2ServerResponse response()
{
io.vertx.core.http.impl.Http2ServerConnection$Push v0;
io.vertx.core.http.impl.Http2ServerResponse v1;
v0 := @this: io.vertx.core.http.impl.Http2ServerConnection$Push;
v1 = v0.<io.vertx.core.http.impl.Http2ServerConnection$Push: io.vertx.core.http.impl.Http2ServerResponse response>;
return v1;
}
public void dispatch(io.vertx.core.Handler)
{
io.vertx.core.http.impl.Http2ServerConnection$Push v0;
java.lang.UnsupportedOperationException v2;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.Http2ServerConnection$Push;
v1 := @parameter0: io.vertx.core.Handler;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public void handleReset(long)
{
io.vertx.core.http.impl.Http2ServerConnection$Push v0;
io.vertx.core.Promise v2;
io.vertx.core.http.impl.Http2ServerResponse v5;
long v1;
boolean v4;
io.vertx.core.http.StreamResetException v3;
v0 := @this: io.vertx.core.http.impl.Http2ServerConnection$Push;
v1 := @parameter0: long;
v2 = v0.<io.vertx.core.http.impl.Http2ServerConnection$Push: io.vertx.core.Promise promise>;
v3 = new io.vertx.core.http.StreamResetException;
specialinvoke v3.<io.vertx.core.http.StreamResetException: void <init>(long)>(v1);
v4 = interfaceinvoke v2.<io.vertx.core.Promise: boolean tryFail(java.lang.Throwable)>(v3);
if v4 != 0 goto label1;
v5 = v0.<io.vertx.core.http.impl.Http2ServerConnection$Push: io.vertx.core.http.impl.Http2ServerResponse response>;
virtualinvoke v5.<io.vertx.core.http.impl.Http2ServerResponse: void handleReset(long)>(v1);
label1:
return;
}
public void handleException(java.lang.Throwable)
{
io.vertx.core.http.impl.Http2ServerConnection$Push v0;
java.lang.Throwable v1;
io.vertx.core.http.impl.Http2ServerResponse v2, v3;
v0 := @this: io.vertx.core.http.impl.Http2ServerConnection$Push;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.vertx.core.http.impl.Http2ServerConnection$Push: io.vertx.core.http.impl.Http2ServerResponse response>;
if v2 == null goto label1;
v3 = v0.<io.vertx.core.http.impl.Http2ServerConnection$Push: io.vertx.core.http.impl.Http2ServerResponse response>;
virtualinvoke v3.<io.vertx.core.http.impl.Http2ServerResponse: void handleException(java.lang.Throwable)>(v1);
label1:
return;
}
public void handleClose()
{
io.vertx.core.http.impl.Http2ServerConnection$Push v0;
int v10, v13, v8;
io.vertx.core.http.impl.Http2ServerResponse v18;
boolean v3;
io.vertx.core.http.impl.Http2ServerConnection v1, v11, v14, v17, v5, v6, v9;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v7;
io.vertx.core.Promise v4;
java.lang.Object v16;
java.util.ArrayDeque v12, v15, v2;
v0 := @this: io.vertx.core.http.impl.Http2ServerConnection$Push;
v1 = v0.<io.vertx.core.http.impl.Http2ServerConnection$Push: io.vertx.core.http.impl.Http2ServerConnection this$0>;
v2 = v1.<io.vertx.core.http.impl.Http2ServerConnection: java.util.ArrayDeque pendingPushes>;
v3 = virtualinvoke v2.<java.util.ArrayDeque: boolean remove(java.lang.Object)>(v0);
if v3 == 0 goto label1;
v4 = v0.<io.vertx.core.http.impl.Http2ServerConnection$Push: io.vertx.core.Promise promise>;
interfaceinvoke v4.<io.vertx.core.Promise: void fail(java.lang.String)>("Push reset by client");
goto label4;
label1:
v5 = v0.<io.vertx.core.http.impl.Http2ServerConnection$Push: io.vertx.core.http.impl.Http2ServerConnection this$0>;
staticinvoke <io.vertx.core.http.impl.Http2ServerConnection: int access$110(io.vertx.core.http.impl.Http2ServerConnection)>(v5);
v6 = v0.<io.vertx.core.http.impl.Http2ServerConnection$Push: io.vertx.core.http.impl.Http2ServerConnection this$0>;
v7 = v6.<io.vertx.core.http.impl.Http2ServerConnection: io.vertx.core.http.impl.VertxHttp2ConnectionHandler handler>;
v8 = virtualinvoke v7.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: int maxConcurrentStreams()>();
label2:
v9 = v0.<io.vertx.core.http.impl.Http2ServerConnection$Push: io.vertx.core.http.impl.Http2ServerConnection this$0>;
v10 = v9.<io.vertx.core.http.impl.Http2ServerConnection: int concurrentStreams>;
if v10 >= v8 goto label3;
v11 = v0.<io.vertx.core.http.impl.Http2ServerConnection$Push: io.vertx.core.http.impl.Http2ServerConnection this$0>;
v12 = v11.<io.vertx.core.http.impl.Http2ServerConnection: java.util.ArrayDeque pendingPushes>;
v13 = virtualinvoke v12.<java.util.ArrayDeque: int size()>();
if v13 <= 0 goto label3;
v14 = v0.<io.vertx.core.http.impl.Http2ServerConnection$Push: io.vertx.core.http.impl.Http2ServerConnection this$0>;
v15 = v14.<io.vertx.core.http.impl.Http2ServerConnection: java.util.ArrayDeque pendingPushes>;
v16 = virtualinvoke v15.<java.util.ArrayDeque: java.lang.Object pop()>();
v17 = v0.<io.vertx.core.http.impl.Http2ServerConnection$Push: io.vertx.core.http.impl.Http2ServerConnection this$0>;
staticinvoke <io.vertx.core.http.impl.Http2ServerConnection: int access$108(io.vertx.core.http.impl.Http2ServerConnection)>(v17);
virtualinvoke v16.<io.vertx.core.http.impl.Http2ServerConnection$Push: void complete()>();
goto label2;
label3:
v18 = v0.<io.vertx.core.http.impl.Http2ServerConnection$Push: io.vertx.core.http.impl.Http2ServerResponse response>;
virtualinvoke v18.<io.vertx.core.http.impl.Http2ServerResponse: void handleClose()>();
label4:
return;
}
void complete()
{
io.vertx.core.http.impl.Http2ServerConnection$Push v0;
io.vertx.core.Promise v2;
io.vertx.core.http.impl.Http2ServerStream v1;
io.vertx.core.http.impl.Http2ServerResponse v3;
v0 := @this: io.vertx.core.http.impl.Http2ServerConnection$Push;
v1 = v0.<io.vertx.core.http.impl.Http2ServerConnection$Push: io.vertx.core.http.impl.Http2ServerStream stream>;
virtualinvoke v1.<io.vertx.core.http.impl.Http2ServerStream: void registerMetrics()>();
v2 = v0.<io.vertx.core.http.impl.Http2ServerConnection$Push: io.vertx.core.Promise promise>;
v3 = v0.<io.vertx.core.http.impl.Http2ServerConnection$Push: io.vertx.core.http.impl.Http2ServerResponse response>;
interfaceinvoke v2.<io.vertx.core.Promise: void complete(java.lang.Object)>(v3);
return;
}
}