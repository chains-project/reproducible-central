final class io.vertx.core.http.impl.HttpChunkContentCompressor extends io.netty.handler.codec.http.HttpContentCompressor
{
public transient void <init>(io.netty.handler.codec.compression.CompressionOptions[])
{
io.vertx.core.http.impl.HttpChunkContentCompressor v0;
io.netty.handler.codec.compression.CompressionOptions[] v1;
v0 := @this: io.vertx.core.http.impl.HttpChunkContentCompressor;
v1 := @parameter0: io.netty.handler.codec.compression.CompressionOptions[];
specialinvoke v0.<io.netty.handler.codec.http.HttpContentCompressor: void <init>(int,io.netty.handler.codec.compression.CompressionOptions[])>(0, v1);
return;
}
public void write(io.netty.channel.ChannelHandlerContext, java.lang.Object, io.netty.channel.ChannelPromise) throws java.lang.Exception
{
io.netty.handler.codec.http.DefaultHttpContent v6;
io.netty.channel.ChannelHandlerContext v1;
io.netty.channel.ChannelPromise v3;
io.vertx.core.http.impl.HttpChunkContentCompressor v0;
java.lang.Object v2;
boolean v4, v5;
v0 := @this: io.vertx.core.http.impl.HttpChunkContentCompressor;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: io.netty.channel.ChannelPromise;
v4 = v2 instanceof io.netty.buffer.ByteBuf;
if v4 == 0 goto label1;
v5 = virtualinvoke v2.<io.netty.buffer.ByteBuf: boolean isReadable()>();
if v5 == 0 goto label1;
v6 = new io.netty.handler.codec.http.DefaultHttpContent;
specialinvoke v6.<io.netty.handler.codec.http.DefaultHttpContent: void <init>(io.netty.buffer.ByteBuf)>(v2);
v2 = v6;
label1:
specialinvoke v0.<io.netty.handler.codec.http.HttpContentCompressor: void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)>(v1, v2, v3);
return;
}
protected io.netty.handler.codec.http.HttpContentEncoder$Result beginEncode(io.netty.handler.codec.http.HttpResponse, java.lang.String) throws java.lang.Exception
{
io.netty.handler.codec.http.HttpHeaders v4, v7;
io.netty.util.AsciiString v5, v8;
io.netty.handler.codec.http.HttpResponse v1;
io.vertx.core.http.impl.HttpChunkContentCompressor v0;
io.netty.handler.codec.http.HttpContentEncoder$Result v3;
java.lang.String v2;
boolean v6;
v0 := @this: io.vertx.core.http.impl.HttpChunkContentCompressor;
v1 := @parameter0: io.netty.handler.codec.http.HttpResponse;
v2 := @parameter1: java.lang.String;
v3 = specialinvoke v0.<io.netty.handler.codec.http.HttpContentCompressor: io.netty.handler.codec.http.HttpContentEncoder$Result beginEncode(io.netty.handler.codec.http.HttpResponse,java.lang.String)>(v1, v2);
if v3 != null goto label1;
v4 = interfaceinvoke v1.<io.netty.handler.codec.http.HttpResponse: io.netty.handler.codec.http.HttpHeaders headers()>();
v5 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString CONTENT_ENCODING>;
v6 = virtualinvoke v4.<io.netty.handler.codec.http.HttpHeaders: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)>(v5, "identity", 1);
if v6 == 0 goto label1;
v7 = interfaceinvoke v1.<io.netty.handler.codec.http.HttpResponse: io.netty.handler.codec.http.HttpHeaders headers()>();
v8 = <io.netty.handler.codec.http.HttpHeaderNames: io.netty.util.AsciiString CONTENT_ENCODING>;
virtualinvoke v7.<io.netty.handler.codec.http.HttpHeaders: io.netty.handler.codec.http.HttpHeaders remove(java.lang.CharSequence)>(v8);
label1:
return v3;
}
}