public interface  io.vertx.core.http.impl.HttpClientConnection extends java.lang.Object implements io.vertx.core.http.HttpConnection
{
public static final io.vertx.core.impl.logging.Logger log;
public static final io.vertx.core.Handler DEFAULT_EVICTION_HANDLER;
public static final io.vertx.core.Handler DEFAULT_CONCURRENCY_CHANGE_HANDLER;
public abstract io.vertx.core.http.impl.HttpClientConnection evictionHandler(io.vertx.core.Handler);
public abstract io.vertx.core.http.impl.HttpClientConnection concurrencyChangeHandler(io.vertx.core.Handler);
public abstract long concurrency();
public abstract io.netty.channel.Channel channel();
public abstract io.netty.channel.ChannelHandlerContext channelHandlerContext();
public abstract void createStream(io.vertx.core.impl.ContextInternal, io.vertx.core.Handler);
public abstract io.vertx.core.impl.ContextInternal getContext();
public abstract boolean isValid();
public abstract java.lang.Object metric();
public abstract long lastResponseReceivedTimestamp();
static void <clinit>()
{
io.vertx.core.impl.logging.Logger v0;
io.vertx.core.Handler v1, v2;
v0 = staticinvoke <io.vertx.core.impl.logging.LoggerFactory: io.vertx.core.impl.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/http/impl/HttpClientConnection;");
<io.vertx.core.http.impl.HttpClientConnection: io.vertx.core.impl.logging.Logger log> = v0;
v1 = staticinvoke <io.vertx.core.http.impl.HttpClientConnection$lambda_static_0__1015: io.vertx.core.Handler bootstrap$()>();
<io.vertx.core.http.impl.HttpClientConnection: io.vertx.core.Handler DEFAULT_EVICTION_HANDLER> = v1;
v2 = staticinvoke <io.vertx.core.http.impl.HttpClientConnection$lambda_static_1__1016: io.vertx.core.Handler bootstrap$()>();
<io.vertx.core.http.impl.HttpClientConnection: io.vertx.core.Handler DEFAULT_CONCURRENCY_CHANGE_HANDLER> = v2;
return;
}
}