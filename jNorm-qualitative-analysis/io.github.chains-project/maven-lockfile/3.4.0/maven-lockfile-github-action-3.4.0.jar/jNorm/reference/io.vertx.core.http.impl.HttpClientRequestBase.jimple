public abstract class io.vertx.core.http.impl.HttpClientRequestBase extends java.lang.Object implements io.vertx.core.http.HttpClientRequest
{
protected final io.vertx.core.http.impl.HttpClientImpl client;
protected final io.vertx.core.impl.ContextInternal context;
protected final io.vertx.core.http.impl.HttpClientStream stream;
protected final io.vertx.core.net.SocketAddress server;
protected final boolean ssl;
private io.vertx.core.http.HttpMethod method;
private java.lang.String host;
private int port;
private java.lang.String uri;
private java.lang.String path;
private java.lang.String query;
private final io.vertx.core.impl.future.PromiseInternal responsePromise;
private io.vertx.core.Handler pushHandler;
private long currentTimeoutTimerId;
private long currentTimeoutMs;
private long lastDataReceived;
void <init>(io.vertx.core.http.impl.HttpClientImpl, io.vertx.core.http.impl.HttpClientStream, io.vertx.core.impl.future.PromiseInternal, boolean, io.vertx.core.http.HttpMethod, io.vertx.core.net.SocketAddress, java.lang.String, int, java.lang.String)
{
io.vertx.core.http.impl.HttpClientRequestBase v0;
io.vertx.core.impl.future.PromiseInternal v3;
io.vertx.core.http.impl.HttpClientImpl v1;
io.vertx.core.impl.ContextInternal v10;
io.vertx.core.http.impl.HttpClientStream v2;
io.vertx.core.http.HttpMethod v5;
int v8;
java.lang.String v7, v9;
io.vertx.core.Handler v11, v12;
boolean v4;
io.vertx.core.net.SocketAddress v6;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestBase;
v1 := @parameter0: io.vertx.core.http.impl.HttpClientImpl;
v2 := @parameter1: io.vertx.core.http.impl.HttpClientStream;
v3 := @parameter2: io.vertx.core.impl.future.PromiseInternal;
v4 := @parameter3: boolean;
v5 := @parameter4: io.vertx.core.http.HttpMethod;
v6 := @parameter5: io.vertx.core.net.SocketAddress;
v7 := @parameter6: java.lang.String;
v8 := @parameter7: int;
v9 := @parameter8: java.lang.String;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.http.impl.HttpClientRequestBase: long currentTimeoutTimerId> = -1L;
v0.<io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.http.impl.HttpClientImpl client> = v1;
v0.<io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.http.impl.HttpClientStream stream> = v2;
v0.<io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.impl.future.PromiseInternal responsePromise> = v3;
v10 = interfaceinvoke v3.<io.vertx.core.impl.future.PromiseInternal: io.vertx.core.impl.ContextInternal context()>();
v0.<io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.impl.ContextInternal context> = v10;
v0.<io.vertx.core.http.impl.HttpClientRequestBase: java.lang.String uri> = v9;
v0.<io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.http.HttpMethod method> = v5;
v0.<io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.net.SocketAddress server> = v6;
v0.<io.vertx.core.http.impl.HttpClientRequestBase: java.lang.String host> = v7;
v0.<io.vertx.core.http.impl.HttpClientRequestBase: int port> = v8;
v0.<io.vertx.core.http.impl.HttpClientRequestBase: boolean ssl> = v4;
v11 = staticinvoke <io.vertx.core.http.impl.HttpClientRequestBase$handlePush__1003: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.HttpClientRequestBase)>(v0);
interfaceinvoke v2.<io.vertx.core.http.impl.HttpClientStream: void pushHandler(io.vertx.core.Handler)>(v11);
v12 = staticinvoke <io.vertx.core.http.impl.HttpClientRequestBase$lambda_new_0__1004: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.HttpClientRequestBase,io.vertx.core.http.impl.HttpClientStream)>(v0, v2);
interfaceinvoke v2.<io.vertx.core.http.impl.HttpClientStream: void headHandler(io.vertx.core.Handler)>(v12);
return;
}
protected java.lang.String authority()
{
io.vertx.core.http.impl.HttpClientRequestBase v0;
int v1, v3, v7;
java.lang.String v5, v6, v8;
boolean v2, v4;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestBase;
v1 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: int port>;
if v1 != 80 goto label1;
v2 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: boolean ssl>;
if v2 == 0 goto label2;
label1:
v3 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: int port>;
if v3 != 443 goto label3;
v4 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: boolean ssl>;
if v4 == 0 goto label3;
label2:
v5 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: java.lang.String host>;
return v5;
label3:
v6 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: java.lang.String host>;
v7 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: int port>;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int)>(v6, v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001:\u0001");
return v8;
}
public int streamId()
{
int v2;
io.vertx.core.http.impl.HttpClientRequestBase v0;
io.vertx.core.http.impl.HttpClientStream v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestBase;
v1 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.http.impl.HttpClientStream stream>;
v2 = interfaceinvoke v1.<io.vertx.core.http.impl.HttpClientStream: int id()>();
return v2;
}
public java.lang.String absoluteURI()
{
io.vertx.core.http.impl.HttpClientRequestBase v0;
java.lang.String v2, v3, v4, v5;
boolean v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestBase;
v1 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: boolean ssl>;
if v1 == 0 goto label1;
v2 = "https://";
goto label2;
label1:
v2 = "http://";
label2:
v3 = virtualinvoke v0.<io.vertx.core.http.impl.HttpClientRequestBase: java.lang.String authority()>();
v4 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: java.lang.String uri>;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String,java.lang.String)>(v2, v3, v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001\u0001");
return v5;
}
public java.lang.String query()
{
io.vertx.core.http.impl.HttpClientRequestBase v0;
java.lang.String v1, v2, v3, v4;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestBase;
v1 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: java.lang.String query>;
if v1 != null goto label1;
v2 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: java.lang.String uri>;
v3 = staticinvoke <io.vertx.core.http.impl.HttpUtils: java.lang.String parseQuery(java.lang.String)>(v2);
v0.<io.vertx.core.http.impl.HttpClientRequestBase: java.lang.String query> = v3;
label1:
v4 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: java.lang.String query>;
return v4;
}
public java.lang.String path()
{
io.vertx.core.http.impl.HttpClientRequestBase v0;
java.lang.String v1, v2, v3, v4;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestBase;
v1 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: java.lang.String path>;
if v1 != null goto label1;
v2 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: java.lang.String uri>;
v3 = staticinvoke <io.vertx.core.http.impl.HttpUtils: java.lang.String parsePath(java.lang.String)>(v2);
v0.<io.vertx.core.http.impl.HttpClientRequestBase: java.lang.String path> = v3;
label1:
v4 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: java.lang.String path>;
return v4;
}
public synchronized java.lang.String getURI()
{
io.vertx.core.http.impl.HttpClientRequestBase v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestBase;
v1 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: java.lang.String uri>;
return v1;
}
public synchronized io.vertx.core.http.HttpClientRequest setURI(java.lang.String)
{
io.vertx.core.http.impl.HttpClientRequestBase v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestBase;
v1 := @parameter0: java.lang.String;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v0.<io.vertx.core.http.impl.HttpClientRequestBase: java.lang.String uri> = v1;
v0.<io.vertx.core.http.impl.HttpClientRequestBase: java.lang.String path> = null;
v0.<io.vertx.core.http.impl.HttpClientRequestBase: java.lang.String query> = null;
return v0;
}
public java.lang.String getHost()
{
io.vertx.core.http.impl.HttpClientRequestBase v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestBase;
v1 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: java.lang.String host>;
return v1;
}
public synchronized io.vertx.core.http.HttpClientRequest setHost(java.lang.String)
{
io.vertx.core.http.impl.HttpClientRequestBase v0;
java.lang.String v1, v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestBase;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: java.lang.String uri>;
virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v0.<io.vertx.core.http.impl.HttpClientRequestBase: java.lang.String host> = v1;
return v0;
}
public int getPort()
{
int v1;
io.vertx.core.http.impl.HttpClientRequestBase v0;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestBase;
v1 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: int port>;
return v1;
}
public synchronized io.vertx.core.http.HttpClientRequest setPort(int)
{
int v1;
io.vertx.core.http.impl.HttpClientRequestBase v0;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestBase;
v1 := @parameter0: int;
v0.<io.vertx.core.http.impl.HttpClientRequestBase: int port> = v1;
return v0;
}
public synchronized io.vertx.core.http.HttpMethod getMethod()
{
io.vertx.core.http.impl.HttpClientRequestBase v0;
io.vertx.core.http.HttpMethod v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestBase;
v1 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.http.HttpMethod method>;
return v1;
}
public synchronized io.vertx.core.http.HttpClientRequest setMethod(io.vertx.core.http.HttpMethod)
{
io.vertx.core.http.impl.HttpClientRequestBase v0;
java.lang.String v2;
io.vertx.core.http.HttpMethod v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestBase;
v1 := @parameter0: io.vertx.core.http.HttpMethod;
v2 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: java.lang.String uri>;
virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v0.<io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.http.HttpMethod method> = v1;
return v0;
}
public synchronized io.vertx.core.http.HttpClientRequest setTimeout(long)
{
io.vertx.core.http.impl.HttpClientRequestBase v0;
io.vertx.core.impl.ContextInternal v2;
long v1, v4;
io.vertx.core.Handler v3;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestBase;
v1 := @parameter0: long;
specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestBase: long cancelTimeout()>();
v0.<io.vertx.core.http.impl.HttpClientRequestBase: long currentTimeoutMs> = v1;
v2 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.impl.ContextInternal context>;
v3 = staticinvoke <io.vertx.core.http.impl.HttpClientRequestBase$lambda_setTimeout_1__1005: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.HttpClientRequestBase,long)>(v0, v1);
v4 = interfaceinvoke v2.<io.vertx.core.impl.ContextInternal: long setTimer(long,io.vertx.core.Handler)>(v1, v3);
v0.<io.vertx.core.http.impl.HttpClientRequestBase: long currentTimeoutTimerId> = v4;
return v0;
}
void handleException(java.lang.Throwable)
{
java.lang.Throwable v1;
io.vertx.core.http.impl.HttpClientRequestBase v0;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestBase;
v1 := @parameter0: java.lang.Throwable;
virtualinvoke v0.<io.vertx.core.http.impl.HttpClientRequestBase: void fail(java.lang.Throwable)>(v1);
return;
}
void fail(java.lang.Throwable)
{
java.lang.Throwable v1;
io.vertx.core.http.impl.HttpClientRequestBase v0;
io.vertx.core.impl.future.PromiseInternal v2, v3;
java.lang.Object v5;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestBase;
v1 := @parameter0: java.lang.Throwable;
specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestBase: long cancelTimeout()>();
v2 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.impl.future.PromiseInternal responsePromise>;
interfaceinvoke v2.<io.vertx.core.impl.future.PromiseInternal: boolean tryFail(java.lang.Throwable)>(v1);
v3 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.impl.future.PromiseInternal responsePromise>;
v4 = interfaceinvoke v3.<io.vertx.core.impl.future.PromiseInternal: io.vertx.core.Future future()>();
v5 = interfaceinvoke v4.<io.vertx.core.Future: java.lang.Object result()>();
if v5 == null goto label1;
virtualinvoke v5.<io.vertx.core.http.impl.HttpClientResponseImpl: void handleException(java.lang.Throwable)>(v1);
label1:
return;
}
void handlePush(io.vertx.core.http.impl.HttpClientPush)
{
io.vertx.core.http.impl.HttpClientRequestBase v0;
io.vertx.core.http.impl.HttpClientImpl v4;
io.vertx.core.MultiMap v10;
long v14;
io.vertx.core.http.impl.HttpClientStream v3;
io.vertx.core.http.impl.HttpClientRequestPushPromise v2;
io.vertx.core.http.impl.HttpClientPush v1;
io.vertx.core.http.HttpMethod v6;
int v9;
io.netty.handler.codec.http2.Http2Error v13;
java.lang.String v7, v8;
io.vertx.core.Handler v11, v12;
boolean v5;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestBase;
v1 := @parameter0: io.vertx.core.http.impl.HttpClientPush;
v2 = new io.vertx.core.http.impl.HttpClientRequestPushPromise;
v3 = v1.<io.vertx.core.http.impl.HttpClientPush: io.vertx.core.http.impl.HttpClientStream stream>;
v4 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.http.impl.HttpClientImpl client>;
v5 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: boolean ssl>;
v6 = v1.<io.vertx.core.http.impl.HttpClientPush: io.vertx.core.http.HttpMethod method>;
v7 = v1.<io.vertx.core.http.impl.HttpClientPush: java.lang.String uri>;
v8 = v1.<io.vertx.core.http.impl.HttpClientPush: java.lang.String host>;
v9 = v1.<io.vertx.core.http.impl.HttpClientPush: int port>;
v10 = v1.<io.vertx.core.http.impl.HttpClientPush: io.vertx.core.MultiMap headers>;
specialinvoke v2.<io.vertx.core.http.impl.HttpClientRequestPushPromise: void <init>(io.vertx.core.http.impl.HttpClientStream,io.vertx.core.http.impl.HttpClientImpl,boolean,io.vertx.core.http.HttpMethod,java.lang.String,java.lang.String,int,io.vertx.core.MultiMap)>(v3, v4, v5, v6, v7, v8, v9, v10);
v11 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.Handler pushHandler>;
if v11 == null goto label1;
v12 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.Handler pushHandler>;
interfaceinvoke v12.<io.vertx.core.Handler: void handle(java.lang.Object)>(v2);
goto label2;
label1:
v13 = <io.netty.handler.codec.http2.Http2Error: io.netty.handler.codec.http2.Http2Error CANCEL>;
v14 = virtualinvoke v13.<io.netty.handler.codec.http2.Http2Error: long code()>();
virtualinvoke v2.<io.vertx.core.http.impl.HttpClientRequestPushPromise: boolean reset(long)>(v14);
label2:
return;
}
void handleResponse(io.vertx.core.http.HttpClientResponse)
{
io.vertx.core.http.HttpClientResponse v1;
io.vertx.core.http.impl.HttpClientRequestBase v0;
io.vertx.core.impl.future.PromiseInternal v2;
long v3;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestBase;
v1 := @parameter0: io.vertx.core.http.HttpClientResponse;
v2 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.impl.future.PromiseInternal responsePromise>;
v3 = specialinvoke v0.<io.vertx.core.http.impl.HttpClientRequestBase: long cancelTimeout()>();
virtualinvoke v0.<io.vertx.core.http.impl.HttpClientRequestBase: void handleResponse(io.vertx.core.Promise,io.vertx.core.http.HttpClientResponse,long)>(v2, v1, v3);
return;
}
abstract void handleResponse(io.vertx.core.Promise, io.vertx.core.http.HttpClientResponse, long);
private synchronized long cancelTimeout()
{
io.vertx.core.http.impl.HttpClientRequestBase v0;
io.vertx.core.impl.VertxInternal v5;
byte v3;
io.vertx.core.http.impl.HttpClientImpl v4;
long v1, v2, v6;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestBase;
v1 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: long currentTimeoutTimerId>;
v2 = v1;
v3 = v1 cmp -1L;
if v3 == 0 goto label1;
v4 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.http.impl.HttpClientImpl client>;
v5 = virtualinvoke v4.<io.vertx.core.http.impl.HttpClientImpl: io.vertx.core.impl.VertxInternal vertx()>();
v6 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: long currentTimeoutTimerId>;
interfaceinvoke v5.<io.vertx.core.impl.VertxInternal: boolean cancelTimer(long)>(v6);
v0.<io.vertx.core.http.impl.HttpClientRequestBase: long currentTimeoutTimerId> = -1L;
v2 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: long currentTimeoutMs>;
v0.<io.vertx.core.http.impl.HttpClientRequestBase: long currentTimeoutMs> = 0L;
label1:
return v2;
}
private void handleTimeout(long)
{
java.lang.Throwable v9;
io.vertx.core.http.impl.HttpClientRequestBase v0;
io.vertx.core.http.impl.NoStackTraceTimeoutException v13;
long v1, v2, v4, v5, v6, v8;
byte v3, v7;
io.vertx.core.http.HttpMethod v10;
java.lang.String v12;
io.vertx.core.net.SocketAddress v11;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestBase;
v1 := @parameter0: long;
entermonitor v0;
label1:
v0.<io.vertx.core.http.impl.HttpClientRequestBase: long currentTimeoutTimerId> = -1L;
v0.<io.vertx.core.http.impl.HttpClientRequestBase: long currentTimeoutMs> = 0L;
v2 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: long lastDataReceived>;
v3 = v2 cmp 0L;
if v3 <= 0 goto label3;
v4 = staticinvoke <java.lang.System: long currentTimeMillis()>();
v5 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: long lastDataReceived>;
v6 = v4 - v5;
v7 = v6 cmp v1;
if v7 >= 0 goto label3;
v0.<io.vertx.core.http.impl.HttpClientRequestBase: long lastDataReceived> = 0L;
v8 = v1 - v6;
virtualinvoke v0.<io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.http.HttpClientRequest setTimeout(long)>(v8);
exitmonitor v0;
label2:
return;
label3:
exitmonitor v0;
label4:
goto label6;
label5:
v9 := @caughtexception;
exitmonitor v0;
throw v9;
label6:
v10 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.http.HttpMethod method>;
v11 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.net.SocketAddress server>;
v12 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: java.lang.String uri>;
v13 = staticinvoke <io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.http.impl.NoStackTraceTimeoutException timeoutEx(long,io.vertx.core.http.HttpMethod,io.vertx.core.net.SocketAddress,java.lang.String)>(v1, v10, v11, v12);
virtualinvoke v0.<io.vertx.core.http.impl.HttpClientRequestBase: boolean reset(java.lang.Throwable)>(v13);
return;
catch java.lang.Throwable from label1 to label2 with label5;
catch java.lang.Throwable from label3 to label4 with label5;
}
static io.vertx.core.http.impl.NoStackTraceTimeoutException timeoutEx(long, io.vertx.core.http.HttpMethod, io.vertx.core.net.SocketAddress, java.lang.String)
{
io.vertx.core.http.HttpMethod v1;
io.vertx.core.http.impl.NoStackTraceTimeoutException v4;
long v0;
java.lang.String v3, v5;
io.vertx.core.net.SocketAddress v2;
v0 := @parameter0: long;
v1 := @parameter1: io.vertx.core.http.HttpMethod;
v2 := @parameter2: io.vertx.core.net.SocketAddress;
v3 := @parameter3: java.lang.String;
v4 = new io.vertx.core.http.impl.NoStackTraceTimeoutException;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long,io.vertx.core.http.HttpMethod,java.lang.String,io.vertx.core.net.SocketAddress)>(v0, v1, v3, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("The timeout period of \u0001ms has been exceeded while executing \u0001 \u0001 for server \u0001");
specialinvoke v4.<io.vertx.core.http.impl.NoStackTraceTimeoutException: void <init>(java.lang.String)>(v5);
return v4;
}
synchronized void dataReceived()
{
io.vertx.core.http.impl.HttpClientRequestBase v0;
byte v2;
long v1, v3;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestBase;
v1 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: long currentTimeoutTimerId>;
v2 = v1 cmp -1L;
if v2 == 0 goto label1;
v3 = staticinvoke <java.lang.System: long currentTimeMillis()>();
v0.<io.vertx.core.http.impl.HttpClientRequestBase: long lastDataReceived> = v3;
label1:
return;
}
public boolean reset(long)
{
io.vertx.core.http.impl.HttpClientRequestBase v0;
long v1;
boolean v3;
io.vertx.core.http.StreamResetException v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestBase;
v1 := @parameter0: long;
v2 = new io.vertx.core.http.StreamResetException;
specialinvoke v2.<io.vertx.core.http.StreamResetException: void <init>(long)>(v1);
v3 = virtualinvoke v0.<io.vertx.core.http.impl.HttpClientRequestBase: boolean reset(java.lang.Throwable)>(v2);
return v3;
}
public boolean reset(long, java.lang.Throwable)
{
java.lang.Throwable v2;
io.vertx.core.http.impl.HttpClientRequestBase v0;
long v1;
boolean v4;
io.vertx.core.http.StreamResetException v3;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestBase;
v1 := @parameter0: long;
v2 := @parameter1: java.lang.Throwable;
v3 = new io.vertx.core.http.StreamResetException;
specialinvoke v3.<io.vertx.core.http.StreamResetException: void <init>(long,java.lang.Throwable)>(v1, v2);
v4 = virtualinvoke v0.<io.vertx.core.http.impl.HttpClientRequestBase: boolean reset(java.lang.Throwable)>(v3);
return v4;
}
abstract boolean reset(java.lang.Throwable);
public io.vertx.core.http.HttpClientRequest response(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpClientRequestBase v0;
io.vertx.core.impl.future.PromiseInternal v2;
io.vertx.core.Handler v1;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestBase;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.impl.future.PromiseInternal responsePromise>;
v3 = interfaceinvoke v2.<io.vertx.core.impl.future.PromiseInternal: io.vertx.core.Future future()>();
interfaceinvoke v3.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.core.Future response()
{
io.vertx.core.http.impl.HttpClientRequestBase v0;
io.vertx.core.impl.future.PromiseInternal v1;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestBase;
v1 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.impl.future.PromiseInternal responsePromise>;
v2 = interfaceinvoke v1.<io.vertx.core.impl.future.PromiseInternal: io.vertx.core.Future future()>();
return v2;
}
synchronized io.vertx.core.Handler pushHandler()
{
io.vertx.core.http.impl.HttpClientRequestBase v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestBase;
v1 = v0.<io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.Handler pushHandler>;
return v1;
}
public synchronized io.vertx.core.http.HttpClientRequest pushHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpClientRequestBase v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpClientRequestBase;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.http.impl.HttpClientRequestBase: io.vertx.core.Handler pushHandler> = v1;
return v0;
}
}