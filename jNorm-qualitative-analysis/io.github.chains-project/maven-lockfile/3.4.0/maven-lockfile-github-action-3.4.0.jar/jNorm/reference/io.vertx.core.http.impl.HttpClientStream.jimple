public interface  io.vertx.core.http.impl.HttpClientStream extends java.lang.Object implements io.vertx.core.streams.WriteStream
{
public abstract int id();
public abstract java.lang.Object metric();
public abstract java.lang.Object trace();
public abstract io.vertx.core.http.HttpVersion version();
public abstract io.vertx.core.http.impl.HttpClientConnection connection();
public abstract io.vertx.core.impl.ContextInternal getContext();
public abstract void writeHead(io.vertx.core.http.impl.HttpRequestHead, boolean, io.netty.buffer.ByteBuf, boolean, io.vertx.core.http.StreamPriority, boolean, io.vertx.core.Handler);
public abstract void writeBuffer(io.netty.buffer.ByteBuf, boolean, io.vertx.core.Handler);
public abstract void writeFrame(int, int, io.netty.buffer.ByteBuf);
public abstract void continueHandler(io.vertx.core.Handler);
public abstract void earlyHintsHandler(io.vertx.core.Handler);
public abstract void pushHandler(io.vertx.core.Handler);
public abstract void unknownFrameHandler(io.vertx.core.Handler);
public io.vertx.core.Future write(io.vertx.core.buffer.Buffer)
{
io.vertx.core.impl.future.PromiseInternal v3;
io.netty.buffer.ByteBuf v4;
io.vertx.core.buffer.Buffer v1;
io.vertx.core.impl.ContextInternal v2;
io.vertx.core.http.impl.HttpClientStream v0;
io.vertx.core.Future v5;
v0 := @this: io.vertx.core.http.impl.HttpClientStream;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 = interfaceinvoke v0.<io.vertx.core.http.impl.HttpClientStream: io.vertx.core.impl.ContextInternal getContext()>();
v3 = interfaceinvoke v2.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
v4 = interfaceinvoke v1.<io.vertx.core.buffer.Buffer: io.netty.buffer.ByteBuf getByteBuf()>();
interfaceinvoke v0.<io.vertx.core.http.impl.HttpClientStream: void writeBuffer(io.netty.buffer.ByteBuf,boolean,io.vertx.core.Handler)>(v4, 0, v3);
v5 = interfaceinvoke v3.<io.vertx.core.impl.future.PromiseInternal: io.vertx.core.Future future()>();
return v5;
}
public void write(io.vertx.core.buffer.Buffer, io.vertx.core.Handler)
{
io.netty.buffer.ByteBuf v3;
io.vertx.core.buffer.Buffer v1;
io.vertx.core.Handler v2;
io.vertx.core.http.impl.HttpClientStream v0;
v0 := @this: io.vertx.core.http.impl.HttpClientStream;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 := @parameter1: io.vertx.core.Handler;
v3 = interfaceinvoke v1.<io.vertx.core.buffer.Buffer: io.netty.buffer.ByteBuf getByteBuf()>();
interfaceinvoke v0.<io.vertx.core.http.impl.HttpClientStream: void writeBuffer(io.netty.buffer.ByteBuf,boolean,io.vertx.core.Handler)>(v3, 0, v2);
return;
}
public io.vertx.core.Future end(io.vertx.core.buffer.Buffer)
{
io.vertx.core.impl.future.PromiseInternal v3;
io.netty.buffer.ByteBuf v4;
io.vertx.core.buffer.Buffer v1;
io.vertx.core.impl.ContextInternal v2;
io.vertx.core.http.impl.HttpClientStream v0;
io.vertx.core.Future v5;
v0 := @this: io.vertx.core.http.impl.HttpClientStream;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 = interfaceinvoke v0.<io.vertx.core.http.impl.HttpClientStream: io.vertx.core.impl.ContextInternal getContext()>();
v3 = interfaceinvoke v2.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
v4 = interfaceinvoke v1.<io.vertx.core.buffer.Buffer: io.netty.buffer.ByteBuf getByteBuf()>();
interfaceinvoke v0.<io.vertx.core.http.impl.HttpClientStream: void writeBuffer(io.netty.buffer.ByteBuf,boolean,io.vertx.core.Handler)>(v4, 1, v3);
v5 = interfaceinvoke v3.<io.vertx.core.impl.future.PromiseInternal: io.vertx.core.Future future()>();
return v5;
}
public void end(io.vertx.core.buffer.Buffer, io.vertx.core.Handler)
{
io.netty.buffer.ByteBuf v3;
io.vertx.core.buffer.Buffer v1;
io.vertx.core.Handler v2;
io.vertx.core.http.impl.HttpClientStream v0;
v0 := @this: io.vertx.core.http.impl.HttpClientStream;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 := @parameter1: io.vertx.core.Handler;
v3 = interfaceinvoke v1.<io.vertx.core.buffer.Buffer: io.netty.buffer.ByteBuf getByteBuf()>();
interfaceinvoke v0.<io.vertx.core.http.impl.HttpClientStream: void writeBuffer(io.netty.buffer.ByteBuf,boolean,io.vertx.core.Handler)>(v3, 1, v2);
return;
}
public io.vertx.core.Future end()
{
io.vertx.core.impl.future.PromiseInternal v2;
io.netty.buffer.ByteBuf v3;
io.vertx.core.impl.ContextInternal v1;
io.vertx.core.http.impl.HttpClientStream v0;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.http.impl.HttpClientStream;
v1 = interfaceinvoke v0.<io.vertx.core.http.impl.HttpClientStream: io.vertx.core.impl.ContextInternal getContext()>();
v2 = interfaceinvoke v1.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
v3 = <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf EMPTY_BUFFER>;
interfaceinvoke v0.<io.vertx.core.http.impl.HttpClientStream: void writeBuffer(io.netty.buffer.ByteBuf,boolean,io.vertx.core.Handler)>(v3, 1, v2);
v4 = interfaceinvoke v2.<io.vertx.core.impl.future.PromiseInternal: io.vertx.core.Future future()>();
return v4;
}
public void end(io.vertx.core.Handler)
{
io.netty.buffer.ByteBuf v2;
io.vertx.core.Handler v1;
io.vertx.core.http.impl.HttpClientStream v0;
v0 := @this: io.vertx.core.http.impl.HttpClientStream;
v1 := @parameter0: io.vertx.core.Handler;
v2 = <io.netty.buffer.Unpooled: io.netty.buffer.ByteBuf EMPTY_BUFFER>;
interfaceinvoke v0.<io.vertx.core.http.impl.HttpClientStream: void writeBuffer(io.netty.buffer.ByteBuf,boolean,io.vertx.core.Handler)>(v2, 1, v1);
return;
}
public abstract void headHandler(io.vertx.core.Handler);
public abstract void chunkHandler(io.vertx.core.Handler);
public abstract void endHandler(io.vertx.core.Handler);
public abstract void priorityHandler(io.vertx.core.Handler);
public abstract void closeHandler(io.vertx.core.Handler);
public abstract void doSetWriteQueueMaxSize(int);
public abstract boolean isNotWritable();
public abstract void doPause();
public abstract void doFetch(long);
public abstract void reset(java.lang.Throwable);
public abstract io.vertx.core.http.StreamPriority priority();
public abstract void updatePriority(io.vertx.core.http.StreamPriority);
}