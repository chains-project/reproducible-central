public class io.vertx.core.http.impl.HttpServerConnectionHandler extends java.lang.Object implements io.vertx.core.Handler
{
final io.vertx.core.http.impl.HttpServerImpl server;
final io.vertx.core.Handler requestHandler;
final io.vertx.core.Handler invalidRequestHandler;
final io.vertx.core.Handler wsHandler;
final io.vertx.core.Handler connectionHandler;
final io.vertx.core.Handler exceptionHandler;
public void <init>(io.vertx.core.http.impl.HttpServerImpl, io.vertx.core.Handler, io.vertx.core.Handler, io.vertx.core.Handler, io.vertx.core.Handler, io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpServerImpl v1;
io.vertx.core.http.impl.HttpServerConnectionHandler v0;
io.vertx.core.Handler v2, v3, v4, v5, v6, v7;
v0 := @this: io.vertx.core.http.impl.HttpServerConnectionHandler;
v1 := @parameter0: io.vertx.core.http.impl.HttpServerImpl;
v2 := @parameter1: io.vertx.core.Handler;
v3 := @parameter2: io.vertx.core.Handler;
v4 := @parameter3: io.vertx.core.Handler;
v5 := @parameter4: io.vertx.core.Handler;
v6 := @parameter5: io.vertx.core.Handler;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.http.impl.HttpServerConnectionHandler: io.vertx.core.http.impl.HttpServerImpl server> = v1;
v0.<io.vertx.core.http.impl.HttpServerConnectionHandler: io.vertx.core.Handler requestHandler> = v2;
if v3 != null goto label1;
v7 = <io.vertx.core.http.HttpServerRequest: io.vertx.core.Handler DEFAULT_INVALID_REQUEST_HANDLER>;
goto label2;
label1:
v7 = v3;
label2:
v0.<io.vertx.core.http.impl.HttpServerConnectionHandler: io.vertx.core.Handler invalidRequestHandler> = v7;
v0.<io.vertx.core.http.impl.HttpServerConnectionHandler: io.vertx.core.Handler wsHandler> = v4;
v0.<io.vertx.core.http.impl.HttpServerConnectionHandler: io.vertx.core.Handler connectionHandler> = v5;
v0.<io.vertx.core.http.impl.HttpServerConnectionHandler: io.vertx.core.Handler exceptionHandler> = v6;
return;
}
public void handle(io.vertx.core.http.impl.HttpServerConnection)
{
java.lang.Throwable v15;
io.vertx.core.impl.ContextInternal v11, v12;
io.netty.channel.ChannelHandlerContext v6;
boolean v3, v4;
io.vertx.core.http.impl.HttpServerConnectionHandler v0;
io.vertx.core.http.impl.Http1xServerRequestHandler v5;
io.netty.channel.ChannelPipeline v7;
java.lang.Exception v14;
io.vertx.core.http.impl.HttpServerConnection v1;
io.vertx.core.Handler v10, v13, v2, v8, v9;
v0 := @this: io.vertx.core.http.impl.HttpServerConnectionHandler;
v1 := @parameter0: io.vertx.core.http.impl.HttpServerConnection;
v2 = v0.<io.vertx.core.http.impl.HttpServerConnectionHandler: io.vertx.core.Handler requestHandler>;
v3 = <io.vertx.core.http.impl.HttpServerImpl: boolean DISABLE_WEBSOCKETS>;
if v3 != 0 goto label1;
v4 = v1 instanceof io.vertx.core.http.impl.Http1xServerConnection;
if v4 == 0 goto label1;
v5 = new io.vertx.core.http.impl.Http1xServerRequestHandler;
specialinvoke v5.<io.vertx.core.http.impl.Http1xServerRequestHandler: void <init>(io.vertx.core.http.impl.HttpServerConnectionHandler)>(v0);
v2 = v5;
v6 = virtualinvoke v1.<io.vertx.core.http.impl.Http1xServerConnection: io.netty.channel.ChannelHandlerContext channelHandlerContext()>();
v7 = interfaceinvoke v6.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPipeline pipeline()>();
specialinvoke v0.<io.vertx.core.http.impl.HttpServerConnectionHandler: void initializeWebSocketExtensions(io.netty.channel.ChannelPipeline)>(v7);
label1:
v8 = v0.<io.vertx.core.http.impl.HttpServerConnectionHandler: io.vertx.core.Handler exceptionHandler>;
interfaceinvoke v1.<io.vertx.core.http.impl.HttpServerConnection: io.vertx.core.http.HttpConnection exceptionHandler(io.vertx.core.Handler)>(v8);
interfaceinvoke v1.<io.vertx.core.http.impl.HttpServerConnection: io.vertx.core.http.impl.HttpServerConnection handler(io.vertx.core.Handler)>(v2);
v9 = v0.<io.vertx.core.http.impl.HttpServerConnectionHandler: io.vertx.core.Handler invalidRequestHandler>;
interfaceinvoke v1.<io.vertx.core.http.impl.HttpServerConnection: io.vertx.core.http.impl.HttpServerConnection invalidRequestHandler(io.vertx.core.Handler)>(v9);
v10 = v0.<io.vertx.core.http.impl.HttpServerConnectionHandler: io.vertx.core.Handler connectionHandler>;
if v10 == null goto label7;
v11 = interfaceinvoke v1.<io.vertx.core.http.impl.HttpServerConnection: io.vertx.core.impl.ContextInternal getContext()>();
v12 = interfaceinvoke v11.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.ContextInternal beginDispatch()>();
label2:
v13 = v0.<io.vertx.core.http.impl.HttpServerConnectionHandler: io.vertx.core.Handler connectionHandler>;
interfaceinvoke v13.<io.vertx.core.Handler: void handle(java.lang.Object)>(v1);
label3:
interfaceinvoke v11.<io.vertx.core.impl.ContextInternal: void endDispatch(io.vertx.core.impl.ContextInternal)>(v12);
goto label7;
label4:
v14 := @caughtexception;
interfaceinvoke v11.<io.vertx.core.impl.ContextInternal: void reportException(java.lang.Throwable)>(v14);
label5:
interfaceinvoke v11.<io.vertx.core.impl.ContextInternal: void endDispatch(io.vertx.core.impl.ContextInternal)>(v12);
goto label7;
label6:
v15 := @caughtexception;
interfaceinvoke v11.<io.vertx.core.impl.ContextInternal: void endDispatch(io.vertx.core.impl.ContextInternal)>(v12);
throw v15;
label7:
return;
catch java.lang.Exception from label2 to label3 with label4;
catch java.lang.Throwable from label2 to label3 with label6;
catch java.lang.Throwable from label4 to label5 with label6;
}
private void initializeWebSocketExtensions(io.netty.channel.ChannelPipeline)
{
io.vertx.core.http.impl.HttpServerImpl v10, v14, v18, v21, v3, v7;
io.netty.handler.codec.http.websocketx.extensions.compression.DeflateFrameServerExtensionHandshaker v6;
java.lang.Object[] v27;
java.util.ArrayList v2;
io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandshaker[] v26;
int v16, v9;
boolean v12, v17, v20, v23, v24, v5;
io.vertx.core.http.impl.HttpServerConnectionHandler v0;
io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateServerExtensionHandshaker v13;
io.netty.channel.ChannelPipeline v1;
io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler v25;
io.vertx.core.http.HttpServerOptions v11, v15, v19, v22, v4, v8;
v0 := @this: io.vertx.core.http.impl.HttpServerConnectionHandler;
v1 := @parameter0: io.netty.channel.ChannelPipeline;
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
v3 = v0.<io.vertx.core.http.impl.HttpServerConnectionHandler: io.vertx.core.http.impl.HttpServerImpl server>;
v4 = v3.<io.vertx.core.http.impl.HttpServerImpl: io.vertx.core.http.HttpServerOptions options>;
v5 = virtualinvoke v4.<io.vertx.core.http.HttpServerOptions: boolean getPerFrameWebSocketCompressionSupported()>();
if v5 == 0 goto label1;
v6 = new io.netty.handler.codec.http.websocketx.extensions.compression.DeflateFrameServerExtensionHandshaker;
v7 = v0.<io.vertx.core.http.impl.HttpServerConnectionHandler: io.vertx.core.http.impl.HttpServerImpl server>;
v8 = v7.<io.vertx.core.http.impl.HttpServerImpl: io.vertx.core.http.HttpServerOptions options>;
v9 = virtualinvoke v8.<io.vertx.core.http.HttpServerOptions: int getWebSocketCompressionLevel()>();
specialinvoke v6.<io.netty.handler.codec.http.websocketx.extensions.compression.DeflateFrameServerExtensionHandshaker: void <init>(int)>(v9);
virtualinvoke v2.<java.util.ArrayList: boolean add(java.lang.Object)>(v6);
label1:
v10 = v0.<io.vertx.core.http.impl.HttpServerConnectionHandler: io.vertx.core.http.impl.HttpServerImpl server>;
v11 = v10.<io.vertx.core.http.impl.HttpServerImpl: io.vertx.core.http.HttpServerOptions options>;
v12 = virtualinvoke v11.<io.vertx.core.http.HttpServerOptions: boolean getPerMessageWebSocketCompressionSupported()>();
if v12 == 0 goto label2;
v13 = new io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateServerExtensionHandshaker;
v14 = v0.<io.vertx.core.http.impl.HttpServerConnectionHandler: io.vertx.core.http.impl.HttpServerImpl server>;
v15 = v14.<io.vertx.core.http.impl.HttpServerImpl: io.vertx.core.http.HttpServerOptions options>;
v16 = virtualinvoke v15.<io.vertx.core.http.HttpServerOptions: int getWebSocketCompressionLevel()>();
v17 = staticinvoke <io.netty.handler.codec.compression.ZlibCodecFactory: boolean isSupportingWindowSizeAndMemLevel()>();
v18 = v0.<io.vertx.core.http.impl.HttpServerConnectionHandler: io.vertx.core.http.impl.HttpServerImpl server>;
v19 = v18.<io.vertx.core.http.impl.HttpServerImpl: io.vertx.core.http.HttpServerOptions options>;
v20 = virtualinvoke v19.<io.vertx.core.http.HttpServerOptions: boolean getWebSocketAllowServerNoContext()>();
v21 = v0.<io.vertx.core.http.impl.HttpServerConnectionHandler: io.vertx.core.http.impl.HttpServerImpl server>;
v22 = v21.<io.vertx.core.http.impl.HttpServerImpl: io.vertx.core.http.HttpServerOptions options>;
v23 = virtualinvoke v22.<io.vertx.core.http.HttpServerOptions: boolean getWebSocketPreferredClientNoContext()>();
specialinvoke v13.<io.netty.handler.codec.http.websocketx.extensions.compression.PerMessageDeflateServerExtensionHandshaker: void <init>(int,boolean,int,boolean,boolean)>(v16, v17, 15, v20, v23);
virtualinvoke v2.<java.util.ArrayList: boolean add(java.lang.Object)>(v13);
label2:
v24 = virtualinvoke v2.<java.util.ArrayList: boolean isEmpty()>();
if v24 != 0 goto label3;
v25 = new io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler;
v26 = newarray (io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandshaker)[0];
v27 = virtualinvoke v2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(v26);
specialinvoke v25.<io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandler: void <init>(io.netty.handler.codec.http.websocketx.extensions.WebSocketServerExtensionHandshaker[])>(v27);
interfaceinvoke v1.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline addBefore(java.lang.String,java.lang.String,io.netty.channel.ChannelHandler)>("handler", "webSocketExtensionHandler", v25);
label3:
return;
}
}