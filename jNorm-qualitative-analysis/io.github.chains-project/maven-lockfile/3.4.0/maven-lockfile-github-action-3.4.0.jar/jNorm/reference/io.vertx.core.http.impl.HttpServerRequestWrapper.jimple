public class io.vertx.core.http.impl.HttpServerRequestWrapper extends io.vertx.core.http.impl.HttpServerRequestInternal
{
protected final io.vertx.core.http.impl.HttpServerRequestInternal delegate;
public void <init>(io.vertx.core.http.impl.HttpServerRequestInternal)
{
io.vertx.core.http.impl.HttpServerRequestInternal v1;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
java.lang.NullPointerException v2;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 := @parameter0: io.vertx.core.http.impl.HttpServerRequestInternal;
specialinvoke v0.<io.vertx.core.http.impl.HttpServerRequestInternal: void <init>()>();
if v1 != null goto label1;
v2 = new java.lang.NullPointerException;
specialinvoke v2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null delegate not allowed");
throw v2;
label1:
v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate> = v1;
return;
}
public io.vertx.core.http.HttpServerRequest exceptionHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpServerRequestInternal v2;
io.vertx.core.http.HttpServerRequest v3;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v3 = virtualinvoke v2.<io.vertx.core.http.impl.HttpServerRequestInternal: io.vertx.core.http.HttpServerRequest exceptionHandler(io.vertx.core.Handler)>(v1);
return v3;
}
public io.vertx.core.http.HttpServerRequest handler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpServerRequestInternal v2;
io.vertx.core.http.HttpServerRequest v3;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v3 = virtualinvoke v2.<io.vertx.core.http.impl.HttpServerRequestInternal: io.vertx.core.http.HttpServerRequest handler(io.vertx.core.Handler)>(v1);
return v3;
}
public io.vertx.core.http.HttpServerRequest pause()
{
io.vertx.core.http.impl.HttpServerRequestInternal v1;
io.vertx.core.http.HttpServerRequest v2;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: io.vertx.core.http.HttpServerRequest pause()>();
return v2;
}
public io.vertx.core.http.HttpServerRequest resume()
{
io.vertx.core.http.impl.HttpServerRequestInternal v1;
io.vertx.core.http.HttpServerRequest v2;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: io.vertx.core.http.HttpServerRequest resume()>();
return v2;
}
public io.vertx.core.http.HttpServerRequest fetch(long)
{
io.vertx.core.http.impl.HttpServerRequestInternal v2;
io.vertx.core.http.HttpServerRequest v3;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
long v1;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 := @parameter0: long;
v2 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v3 = virtualinvoke v2.<io.vertx.core.http.impl.HttpServerRequestInternal: io.vertx.core.http.HttpServerRequest fetch(long)>(v1);
return v3;
}
public io.vertx.core.http.HttpServerRequest endHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpServerRequestInternal v2;
io.vertx.core.http.HttpServerRequest v3;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v3 = virtualinvoke v2.<io.vertx.core.http.impl.HttpServerRequestInternal: io.vertx.core.http.HttpServerRequest endHandler(io.vertx.core.Handler)>(v1);
return v3;
}
public io.vertx.core.http.HttpVersion version()
{
io.vertx.core.http.impl.HttpServerRequestInternal v1;
io.vertx.core.http.HttpVersion v2;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: io.vertx.core.http.HttpVersion version()>();
return v2;
}
public io.vertx.core.http.HttpMethod method()
{
io.vertx.core.http.impl.HttpServerRequestInternal v1;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
io.vertx.core.http.HttpMethod v2;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: io.vertx.core.http.HttpMethod method()>();
return v2;
}
public boolean isSSL()
{
io.vertx.core.http.impl.HttpServerRequestInternal v1;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
boolean v2;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: boolean isSSL()>();
return v2;
}
public java.lang.String scheme()
{
io.vertx.core.http.impl.HttpServerRequestInternal v1;
java.lang.String v2;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: java.lang.String scheme()>();
return v2;
}
public java.lang.String uri()
{
io.vertx.core.http.impl.HttpServerRequestInternal v1;
java.lang.String v2;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: java.lang.String uri()>();
return v2;
}
public java.lang.String path()
{
io.vertx.core.http.impl.HttpServerRequestInternal v1;
java.lang.String v2;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: java.lang.String path()>();
return v2;
}
public java.lang.String query()
{
io.vertx.core.http.impl.HttpServerRequestInternal v1;
java.lang.String v2;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: java.lang.String query()>();
return v2;
}
public java.lang.String host()
{
io.vertx.core.http.impl.HttpServerRequestInternal v1;
java.lang.String v2;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: java.lang.String host()>();
return v2;
}
public long bytesRead()
{
io.vertx.core.http.impl.HttpServerRequestInternal v1;
long v2;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: long bytesRead()>();
return v2;
}
public io.vertx.core.http.HttpServerResponse response()
{
io.vertx.core.http.impl.HttpServerRequestInternal v1;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
io.vertx.core.http.HttpServerResponse v2;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: io.vertx.core.http.HttpServerResponse response()>();
return v2;
}
public io.vertx.core.MultiMap headers()
{
io.vertx.core.MultiMap v2;
io.vertx.core.http.impl.HttpServerRequestInternal v1;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: io.vertx.core.MultiMap headers()>();
return v2;
}
public java.lang.String getHeader(java.lang.String)
{
io.vertx.core.http.impl.HttpServerRequestInternal v2;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
java.lang.String v1, v3;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v3 = virtualinvoke v2.<io.vertx.core.http.impl.HttpServerRequestInternal: java.lang.String getHeader(java.lang.String)>(v1);
return v3;
}
public java.lang.String getHeader(java.lang.CharSequence)
{
io.vertx.core.http.impl.HttpServerRequestInternal v2;
java.lang.CharSequence v1;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
java.lang.String v3;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 := @parameter0: java.lang.CharSequence;
v2 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v3 = virtualinvoke v2.<io.vertx.core.http.impl.HttpServerRequestInternal: java.lang.String getHeader(java.lang.CharSequence)>(v1);
return v3;
}
public io.vertx.core.http.HttpServerRequest setParamsCharset(java.lang.String)
{
io.vertx.core.http.impl.HttpServerRequestInternal v2;
io.vertx.core.http.HttpServerRequest v3;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v3 = virtualinvoke v2.<io.vertx.core.http.impl.HttpServerRequestInternal: io.vertx.core.http.HttpServerRequest setParamsCharset(java.lang.String)>(v1);
return v3;
}
public java.lang.String getParamsCharset()
{
io.vertx.core.http.impl.HttpServerRequestInternal v1;
java.lang.String v2;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: java.lang.String getParamsCharset()>();
return v2;
}
public io.vertx.core.MultiMap params()
{
io.vertx.core.MultiMap v2;
io.vertx.core.http.impl.HttpServerRequestInternal v1;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: io.vertx.core.MultiMap params()>();
return v2;
}
public java.lang.String getParam(java.lang.String)
{
io.vertx.core.http.impl.HttpServerRequestInternal v2;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
java.lang.String v1, v3;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v3 = virtualinvoke v2.<io.vertx.core.http.impl.HttpServerRequestInternal: java.lang.String getParam(java.lang.String)>(v1);
return v3;
}
public java.lang.String getParam(java.lang.String, java.lang.String)
{
io.vertx.core.http.impl.HttpServerRequestInternal v3;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
java.lang.String v1, v2, v4;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v4 = virtualinvoke v3.<io.vertx.core.http.impl.HttpServerRequestInternal: java.lang.String getParam(java.lang.String,java.lang.String)>(v1, v2);
return v4;
}
public io.vertx.core.net.SocketAddress remoteAddress()
{
io.vertx.core.http.impl.HttpServerRequestInternal v1;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
io.vertx.core.net.SocketAddress v2;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: io.vertx.core.net.SocketAddress remoteAddress()>();
return v2;
}
public io.vertx.core.net.SocketAddress localAddress()
{
io.vertx.core.http.impl.HttpServerRequestInternal v1;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
io.vertx.core.net.SocketAddress v2;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: io.vertx.core.net.SocketAddress localAddress()>();
return v2;
}
public javax.net.ssl.SSLSession sslSession()
{
io.vertx.core.http.impl.HttpServerRequestInternal v1;
javax.net.ssl.SSLSession v2;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: javax.net.ssl.SSLSession sslSession()>();
return v2;
}
public javax.security.cert.X509Certificate[] peerCertificateChain() throws javax.net.ssl.SSLPeerUnverifiedException
{
io.vertx.core.http.impl.HttpServerRequestInternal v1;
javax.security.cert.X509Certificate[] v2;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: javax.security.cert.X509Certificate[] peerCertificateChain()>();
return v2;
}
public java.lang.String absoluteURI()
{
io.vertx.core.http.impl.HttpServerRequestInternal v1;
java.lang.String v2;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: java.lang.String absoluteURI()>();
return v2;
}
public io.vertx.core.http.HttpServerRequest bodyHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpServerRequestInternal v2;
io.vertx.core.http.HttpServerRequest v3;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v3 = virtualinvoke v2.<io.vertx.core.http.impl.HttpServerRequestInternal: io.vertx.core.http.HttpServerRequest bodyHandler(io.vertx.core.Handler)>(v1);
return v3;
}
public io.vertx.core.http.HttpServerRequest body(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpServerRequestInternal v2;
io.vertx.core.http.HttpServerRequest v3;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v3 = virtualinvoke v2.<io.vertx.core.http.impl.HttpServerRequestInternal: io.vertx.core.http.HttpServerRequest body(io.vertx.core.Handler)>(v1);
return v3;
}
public io.vertx.core.Future body()
{
io.vertx.core.http.impl.HttpServerRequestInternal v1;
io.vertx.core.Future v2;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: io.vertx.core.Future body()>();
return v2;
}
public void end(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpServerRequestInternal v2;
io.vertx.core.Handler v1;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
virtualinvoke v2.<io.vertx.core.http.impl.HttpServerRequestInternal: void end(io.vertx.core.Handler)>(v1);
return;
}
public io.vertx.core.Future end()
{
io.vertx.core.http.impl.HttpServerRequestInternal v1;
io.vertx.core.Future v2;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: io.vertx.core.Future end()>();
return v2;
}
public void toNetSocket(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpServerRequestInternal v2;
io.vertx.core.Handler v1;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
virtualinvoke v2.<io.vertx.core.http.impl.HttpServerRequestInternal: void toNetSocket(io.vertx.core.Handler)>(v1);
return;
}
public io.vertx.core.Future toNetSocket()
{
io.vertx.core.http.impl.HttpServerRequestInternal v1;
io.vertx.core.Future v2;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: io.vertx.core.Future toNetSocket()>();
return v2;
}
public io.vertx.core.http.HttpServerRequest setExpectMultipart(boolean)
{
io.vertx.core.http.impl.HttpServerRequestInternal v2;
io.vertx.core.http.HttpServerRequest v3;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
boolean v1;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 := @parameter0: boolean;
v2 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v3 = virtualinvoke v2.<io.vertx.core.http.impl.HttpServerRequestInternal: io.vertx.core.http.HttpServerRequest setExpectMultipart(boolean)>(v1);
return v3;
}
public boolean isExpectMultipart()
{
io.vertx.core.http.impl.HttpServerRequestInternal v1;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
boolean v2;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: boolean isExpectMultipart()>();
return v2;
}
public io.vertx.core.http.HttpServerRequest uploadHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpServerRequestInternal v2;
io.vertx.core.http.HttpServerRequest v3;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v3 = virtualinvoke v2.<io.vertx.core.http.impl.HttpServerRequestInternal: io.vertx.core.http.HttpServerRequest uploadHandler(io.vertx.core.Handler)>(v1);
return v3;
}
public io.vertx.core.MultiMap formAttributes()
{
io.vertx.core.MultiMap v2;
io.vertx.core.http.impl.HttpServerRequestInternal v1;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: io.vertx.core.MultiMap formAttributes()>();
return v2;
}
public java.lang.String getFormAttribute(java.lang.String)
{
io.vertx.core.http.impl.HttpServerRequestInternal v2;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
java.lang.String v1, v3;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v3 = virtualinvoke v2.<io.vertx.core.http.impl.HttpServerRequestInternal: java.lang.String getFormAttribute(java.lang.String)>(v1);
return v3;
}
public int streamId()
{
int v2;
io.vertx.core.http.impl.HttpServerRequestInternal v1;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: int streamId()>();
return v2;
}
public void toWebSocket(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpServerRequestInternal v2;
io.vertx.core.Handler v1;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
virtualinvoke v2.<io.vertx.core.http.impl.HttpServerRequestInternal: void toWebSocket(io.vertx.core.Handler)>(v1);
return;
}
public io.vertx.core.Future toWebSocket()
{
io.vertx.core.http.impl.HttpServerRequestInternal v1;
io.vertx.core.Future v2;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: io.vertx.core.Future toWebSocket()>();
return v2;
}
public boolean isEnded()
{
io.vertx.core.http.impl.HttpServerRequestInternal v1;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
boolean v2;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: boolean isEnded()>();
return v2;
}
public io.vertx.core.http.HttpServerRequest customFrameHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpServerRequestInternal v2;
io.vertx.core.http.HttpServerRequest v3;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v3 = virtualinvoke v2.<io.vertx.core.http.impl.HttpServerRequestInternal: io.vertx.core.http.HttpServerRequest customFrameHandler(io.vertx.core.Handler)>(v1);
return v3;
}
public io.vertx.core.http.HttpConnection connection()
{
io.vertx.core.http.impl.HttpServerRequestInternal v1;
io.vertx.core.http.HttpConnection v2;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: io.vertx.core.http.HttpConnection connection()>();
return v2;
}
public io.vertx.core.http.StreamPriority streamPriority()
{
io.vertx.core.http.impl.HttpServerRequestInternal v1;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
io.vertx.core.http.StreamPriority v2;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: io.vertx.core.http.StreamPriority streamPriority()>();
return v2;
}
public io.vertx.core.http.HttpServerRequest streamPriorityHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpServerRequestInternal v2;
io.vertx.core.http.HttpServerRequest v3;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v3 = virtualinvoke v2.<io.vertx.core.http.impl.HttpServerRequestInternal: io.vertx.core.http.HttpServerRequest streamPriorityHandler(io.vertx.core.Handler)>(v1);
return v3;
}
public io.netty.handler.codec.DecoderResult decoderResult()
{
io.vertx.core.http.impl.HttpServerRequestInternal v1;
io.netty.handler.codec.DecoderResult v2;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: io.netty.handler.codec.DecoderResult decoderResult()>();
return v2;
}
public io.vertx.core.http.Cookie getCookie(java.lang.String)
{
io.vertx.core.http.impl.HttpServerRequestInternal v2;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
java.lang.String v1;
io.vertx.core.http.Cookie v3;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v3 = virtualinvoke v2.<io.vertx.core.http.impl.HttpServerRequestInternal: io.vertx.core.http.Cookie getCookie(java.lang.String)>(v1);
return v3;
}
public io.vertx.core.http.Cookie getCookie(java.lang.String, java.lang.String, java.lang.String)
{
io.vertx.core.http.impl.HttpServerRequestInternal v4;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
java.lang.String v1, v2, v3;
io.vertx.core.http.Cookie v5;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: java.lang.String;
v4 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v5 = virtualinvoke v4.<io.vertx.core.http.impl.HttpServerRequestInternal: io.vertx.core.http.Cookie getCookie(java.lang.String,java.lang.String,java.lang.String)>(v1, v2, v3);
return v5;
}
public int cookieCount()
{
int v2;
io.vertx.core.http.impl.HttpServerRequestInternal v1;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: int cookieCount()>();
return v2;
}
public java.util.Map cookieMap()
{
io.vertx.core.http.impl.HttpServerRequestInternal v1;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
java.util.Map v2;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: java.util.Map cookieMap()>();
return v2;
}
public java.util.Set cookies(java.lang.String)
{
io.vertx.core.http.impl.HttpServerRequestInternal v2;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
java.util.Set v3;
java.lang.String v1;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v3 = virtualinvoke v2.<io.vertx.core.http.impl.HttpServerRequestInternal: java.util.Set cookies(java.lang.String)>(v1);
return v3;
}
public java.util.Set cookies()
{
io.vertx.core.http.impl.HttpServerRequestInternal v1;
java.util.Set v2;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: java.util.Set cookies()>();
return v2;
}
public io.vertx.core.http.HttpServerRequest routed(java.lang.String)
{
io.vertx.core.http.impl.HttpServerRequestInternal v2;
io.vertx.core.http.HttpServerRequest v3;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v3 = virtualinvoke v2.<io.vertx.core.http.impl.HttpServerRequestInternal: io.vertx.core.http.HttpServerRequest routed(java.lang.String)>(v1);
return v3;
}
public io.vertx.core.Context context()
{
io.vertx.core.http.impl.HttpServerRequestInternal v1;
io.vertx.core.Context v2;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: io.vertx.core.Context context()>();
return v2;
}
public java.lang.Object metric()
{
io.vertx.core.http.impl.HttpServerRequestInternal v1;
java.lang.Object v2;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: java.lang.Object metric()>();
return v2;
}
public io.vertx.core.streams.Pipe pipe()
{
io.vertx.core.http.impl.HttpServerRequestInternal v1;
io.vertx.core.streams.Pipe v2;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.HttpServerRequestInternal: io.vertx.core.streams.Pipe pipe()>();
return v2;
}
public io.vertx.core.Future pipeTo(io.vertx.core.streams.WriteStream)
{
io.vertx.core.http.impl.HttpServerRequestInternal v2;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
io.vertx.core.streams.WriteStream v1;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 := @parameter0: io.vertx.core.streams.WriteStream;
v2 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
v3 = virtualinvoke v2.<io.vertx.core.http.impl.HttpServerRequestInternal: io.vertx.core.Future pipeTo(io.vertx.core.streams.WriteStream)>(v1);
return v3;
}
public void pipeTo(io.vertx.core.streams.WriteStream, io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpServerRequestInternal v3;
io.vertx.core.http.impl.HttpServerRequestWrapper v0;
io.vertx.core.streams.WriteStream v1;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.http.impl.HttpServerRequestWrapper;
v1 := @parameter0: io.vertx.core.streams.WriteStream;
v2 := @parameter1: io.vertx.core.Handler;
v3 = v0.<io.vertx.core.http.impl.HttpServerRequestWrapper: io.vertx.core.http.impl.HttpServerRequestInternal delegate>;
virtualinvoke v3.<io.vertx.core.http.impl.HttpServerRequestInternal: void pipeTo(io.vertx.core.streams.WriteStream,io.vertx.core.Handler)>(v1, v2);
return;
}
}