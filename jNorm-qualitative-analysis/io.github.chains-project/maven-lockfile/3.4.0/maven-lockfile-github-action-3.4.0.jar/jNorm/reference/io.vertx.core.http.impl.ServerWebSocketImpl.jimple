public class io.vertx.core.http.impl.ServerWebSocketImpl extends io.vertx.core.http.impl.WebSocketImplBase implements io.vertx.core.http.ServerWebSocket
{
private final io.vertx.core.http.impl.Http1xServerConnection conn;
private final long closingTimeoutMS;
private final java.lang.String scheme;
private final java.lang.String host;
private final java.lang.String uri;
private final java.lang.String path;
private final java.lang.String query;
private final io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker handshaker;
private io.vertx.core.http.impl.Http1xServerRequest request;
private java.lang.Integer status;
private io.vertx.core.Promise handshakePromise;
void <init>(io.vertx.core.impl.ContextInternal, io.vertx.core.http.impl.Http1xServerConnection, boolean, long, io.vertx.core.http.impl.Http1xServerRequest, io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker, int, int, boolean)
{
io.vertx.core.MultiMap v17;
io.vertx.core.impl.ContextInternal v1;
long v11, v4;
io.vertx.core.http.impl.Http1xServerRequest v5;
byte v10;
int v7, v8;
io.vertx.core.http.impl.ServerWebSocketImpl v0;
java.lang.String v12, v13, v14, v15, v16;
boolean v3, v9;
io.vertx.core.http.impl.Http1xServerConnection v2;
io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker v6;
v0 := @this: io.vertx.core.http.impl.ServerWebSocketImpl;
v1 := @parameter0: io.vertx.core.impl.ContextInternal;
v2 := @parameter1: io.vertx.core.http.impl.Http1xServerConnection;
v3 := @parameter2: boolean;
v4 := @parameter3: long;
v5 := @parameter4: io.vertx.core.http.impl.Http1xServerRequest;
v6 := @parameter5: io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker;
v7 := @parameter6: int;
v8 := @parameter7: int;
v9 := @parameter8: boolean;
specialinvoke v0.<io.vertx.core.http.impl.WebSocketImplBase: void <init>(io.vertx.core.impl.ContextInternal,io.vertx.core.http.impl.Http1xConnectionBase,boolean,int,int,boolean)>(v1, v2, v3, v7, v8, v9);
v0.<io.vertx.core.http.impl.ServerWebSocketImpl: io.vertx.core.http.impl.Http1xServerConnection conn> = v2;
v10 = v4 cmp 0L;
if v10 < 0 goto label1;
v11 = v4 * 1000L;
goto label2;
label1:
v11 = -1L;
label2:
v0.<io.vertx.core.http.impl.ServerWebSocketImpl: long closingTimeoutMS> = v11;
v12 = virtualinvoke v5.<io.vertx.core.http.impl.Http1xServerRequest: java.lang.String scheme()>();
v0.<io.vertx.core.http.impl.ServerWebSocketImpl: java.lang.String scheme> = v12;
v13 = virtualinvoke v5.<io.vertx.core.http.impl.Http1xServerRequest: java.lang.String host()>();
v0.<io.vertx.core.http.impl.ServerWebSocketImpl: java.lang.String host> = v13;
v14 = virtualinvoke v5.<io.vertx.core.http.impl.Http1xServerRequest: java.lang.String uri()>();
v0.<io.vertx.core.http.impl.ServerWebSocketImpl: java.lang.String uri> = v14;
v15 = virtualinvoke v5.<io.vertx.core.http.impl.Http1xServerRequest: java.lang.String path()>();
v0.<io.vertx.core.http.impl.ServerWebSocketImpl: java.lang.String path> = v15;
v16 = virtualinvoke v5.<io.vertx.core.http.impl.Http1xServerRequest: java.lang.String query()>();
v0.<io.vertx.core.http.impl.ServerWebSocketImpl: java.lang.String query> = v16;
v0.<io.vertx.core.http.impl.ServerWebSocketImpl: io.vertx.core.http.impl.Http1xServerRequest request> = v5;
v0.<io.vertx.core.http.impl.ServerWebSocketImpl: io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker handshaker> = v6;
v17 = virtualinvoke v5.<io.vertx.core.http.impl.Http1xServerRequest: io.vertx.core.MultiMap headers()>();
virtualinvoke v0.<io.vertx.core.http.impl.ServerWebSocketImpl: void headers(io.vertx.core.MultiMap)>(v17);
return;
}
public java.lang.String scheme()
{
io.vertx.core.http.impl.ServerWebSocketImpl v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.impl.ServerWebSocketImpl;
v1 = v0.<io.vertx.core.http.impl.ServerWebSocketImpl: java.lang.String scheme>;
return v1;
}
public java.lang.String host()
{
io.vertx.core.http.impl.ServerWebSocketImpl v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.impl.ServerWebSocketImpl;
v1 = v0.<io.vertx.core.http.impl.ServerWebSocketImpl: java.lang.String host>;
return v1;
}
public java.lang.String uri()
{
io.vertx.core.http.impl.ServerWebSocketImpl v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.impl.ServerWebSocketImpl;
v1 = v0.<io.vertx.core.http.impl.ServerWebSocketImpl: java.lang.String uri>;
return v1;
}
public java.lang.String path()
{
io.vertx.core.http.impl.ServerWebSocketImpl v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.impl.ServerWebSocketImpl;
v1 = v0.<io.vertx.core.http.impl.ServerWebSocketImpl: java.lang.String path>;
return v1;
}
public java.lang.String query()
{
io.vertx.core.http.impl.ServerWebSocketImpl v0;
java.lang.String v1;
v0 := @this: io.vertx.core.http.impl.ServerWebSocketImpl;
v1 = v0.<io.vertx.core.http.impl.ServerWebSocketImpl: java.lang.String query>;
return v1;
}
public void accept()
{
java.lang.IllegalStateException v3;
io.vertx.core.http.impl.ServerWebSocketImpl v0;
java.lang.Boolean v1, v2;
v0 := @this: io.vertx.core.http.impl.ServerWebSocketImpl;
v1 = virtualinvoke v0.<io.vertx.core.http.impl.ServerWebSocketImpl: java.lang.Boolean tryHandshake(int)>(101);
v2 = <java.lang.Boolean: java.lang.Boolean TRUE>;
if v1 == v2 goto label1;
v3 = new java.lang.IllegalStateException;
specialinvoke v3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("WebSocket already rejected");
throw v3;
label1:
return;
}
public void reject()
{
io.vertx.core.http.impl.ServerWebSocketImpl v0;
v0 := @this: io.vertx.core.http.impl.ServerWebSocketImpl;
virtualinvoke v0.<io.vertx.core.http.impl.ServerWebSocketImpl: void reject(int)>(502);
return;
}
public void reject(int)
{
java.lang.IllegalStateException v5;
int v1;
io.vertx.core.http.impl.ServerWebSocketImpl v0;
java.lang.Boolean v3, v4;
java.lang.IllegalArgumentException v2;
v0 := @this: io.vertx.core.http.impl.ServerWebSocketImpl;
v1 := @parameter0: int;
if v1 != 101 goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid WebSocket rejection status code: 101");
throw v2;
label1:
v3 = virtualinvoke v0.<io.vertx.core.http.impl.ServerWebSocketImpl: java.lang.Boolean tryHandshake(int)>(v1);
v4 = <java.lang.Boolean: java.lang.Boolean TRUE>;
if v3 == v4 goto label2;
v5 = new java.lang.IllegalStateException;
specialinvoke v5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot reject WebSocket, it has already been written to");
throw v5;
label2:
return;
}
public io.vertx.core.Future close(short, java.lang.String)
{
java.lang.Throwable v8;
io.vertx.core.Promise v5, v6;
io.vertx.core.http.impl.Http1xServerConnection v3;
io.vertx.core.Future v9;
java.lang.Integer v4, v7;
short v1;
io.vertx.core.http.impl.ServerWebSocketImpl v0;
java.lang.String v2;
io.vertx.core.Handler v10;
v0 := @this: io.vertx.core.http.impl.ServerWebSocketImpl;
v1 := @parameter0: short;
v2 := @parameter1: java.lang.String;
v3 = v0.<io.vertx.core.http.impl.ServerWebSocketImpl: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v3;
label1:
v4 = v0.<io.vertx.core.http.impl.ServerWebSocketImpl: java.lang.Integer status>;
if v4 != null goto label3;
v5 = v0.<io.vertx.core.http.impl.ServerWebSocketImpl: io.vertx.core.Promise handshakePromise>;
if v5 != null goto label2;
virtualinvoke v0.<io.vertx.core.http.impl.ServerWebSocketImpl: java.lang.Boolean tryHandshake(int)>(101);
goto label3;
label2:
v6 = v0.<io.vertx.core.http.impl.ServerWebSocketImpl: io.vertx.core.Promise handshakePromise>;
v7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(101);
interfaceinvoke v6.<io.vertx.core.Promise: boolean tryComplete(java.lang.Object)>(v7);
label3:
exitmonitor v3;
label4:
goto label6;
label5:
v8 := @caughtexception;
exitmonitor v3;
throw v8;
label6:
v9 = specialinvoke v0.<io.vertx.core.http.impl.WebSocketImplBase: io.vertx.core.Future close(short,java.lang.String)>(v1, v2);
v10 = staticinvoke <io.vertx.core.http.impl.ServerWebSocketImpl$lambda_close_0__1129: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.ServerWebSocketImpl)>(v0);
interfaceinvoke v9.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v10);
return v9;
catch java.lang.Throwable from label1 to label4 with label5;
}
public io.vertx.core.Future writeFrame(io.vertx.core.http.WebSocketFrame)
{
java.lang.Throwable v8;
java.lang.IllegalStateException v4, v6;
io.vertx.core.http.impl.Http1xServerConnection v2;
io.vertx.core.Future v7;
io.vertx.core.http.impl.ServerWebSocketImpl v0;
java.lang.Boolean v3;
io.vertx.core.http.WebSocketFrame v1;
boolean v5;
v0 := @this: io.vertx.core.http.impl.ServerWebSocketImpl;
v1 := @parameter0: io.vertx.core.http.WebSocketFrame;
v2 = v0.<io.vertx.core.http.impl.ServerWebSocketImpl: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v2;
label1:
v3 = specialinvoke v0.<io.vertx.core.http.impl.ServerWebSocketImpl: java.lang.Boolean checkAccept()>();
if v3 != null goto label2;
v4 = new java.lang.IllegalStateException;
specialinvoke v4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot write to WebSocket, it is pending accept or reject");
throw v4;
label2:
v5 = virtualinvoke v3.<java.lang.Boolean: boolean booleanValue()>();
if v5 != 0 goto label3;
v6 = new java.lang.IllegalStateException;
specialinvoke v6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot write to WebSocket, it has been rejected");
throw v6;
label3:
v7 = specialinvoke v0.<io.vertx.core.http.impl.WebSocketImplBase: io.vertx.core.Future writeFrame(io.vertx.core.http.WebSocketFrame)>(v1);
exitmonitor v2;
label4:
return v7;
label5:
v8 := @caughtexception;
exitmonitor v2;
throw v8;
catch java.lang.Throwable from label1 to label4 with label5;
}
private java.lang.Boolean checkAccept()
{
io.vertx.core.http.impl.ServerWebSocketImpl v0;
java.lang.Boolean v1;
v0 := @this: io.vertx.core.http.impl.ServerWebSocketImpl;
v1 = virtualinvoke v0.<io.vertx.core.http.impl.ServerWebSocketImpl: java.lang.Boolean tryHandshake(int)>(101);
return v1;
}
private void handleHandshake(int)
{
java.lang.Throwable v8;
io.netty.handler.codec.http.HttpResponseStatus v7;
io.vertx.core.http.impl.Http1xServerConnection v2, v5;
java.lang.Integer v3, v4;
io.netty.channel.Channel v6;
int v1;
io.vertx.core.http.impl.ServerWebSocketImpl v0;
v0 := @this: io.vertx.core.http.impl.ServerWebSocketImpl;
v1 := @parameter0: int;
v2 = v0.<io.vertx.core.http.impl.ServerWebSocketImpl: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v2;
label1:
v3 = v0.<io.vertx.core.http.impl.ServerWebSocketImpl: java.lang.Integer status>;
if v3 != null goto label3;
if v1 != 101 goto label2;
specialinvoke v0.<io.vertx.core.http.impl.ServerWebSocketImpl: void doHandshake()>();
goto label3;
label2:
v4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v0.<io.vertx.core.http.impl.ServerWebSocketImpl: java.lang.Integer status> = v4;
v5 = v0.<io.vertx.core.http.impl.ServerWebSocketImpl: io.vertx.core.http.impl.Http1xServerConnection conn>;
v6 = virtualinvoke v5.<io.vertx.core.http.impl.Http1xServerConnection: io.netty.channel.Channel channel()>();
v7 = staticinvoke <io.netty.handler.codec.http.HttpResponseStatus: io.netty.handler.codec.http.HttpResponseStatus valueOf(int)>(v1);
staticinvoke <io.vertx.core.http.impl.HttpUtils: void sendError(io.netty.channel.Channel,io.netty.handler.codec.http.HttpResponseStatus)>(v6, v7);
label3:
exitmonitor v2;
label4:
goto label6;
label5:
v8 := @caughtexception;
exitmonitor v2;
throw v8;
label6:
return;
catch java.lang.Throwable from label1 to label4 with label5;
}
private void doHandshake()
{
java.lang.Throwable v12;
io.vertx.core.impl.ContextInternal v21;
java.lang.Integer v15;
io.vertx.core.http.impl.Http1xServerResponse v4;
io.vertx.core.eventbus.EventBus v23;
io.vertx.core.http.impl.Http1xServerRequest v3, v6;
int v10, v14;
io.vertx.core.http.impl.ServerWebSocketImpl v0;
java.lang.String v17;
io.netty.handler.codec.http.HttpRequest v7;
io.vertx.core.impl.VertxInternal v22;
io.netty.handler.codec.http.HttpResponseStatus v13, v9;
io.netty.channel.ChannelPipeline v18;
io.vertx.core.http.impl.Http1xServerConnection v1, v20;
java.lang.Exception v8;
io.netty.channel.Channel v2;
io.vertx.core.http.HttpServerResponse v11;
io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker v16, v5;
io.netty.channel.ChannelHandler v19;
v0 := @this: io.vertx.core.http.impl.ServerWebSocketImpl;
v1 = v0.<io.vertx.core.http.impl.ServerWebSocketImpl: io.vertx.core.http.impl.Http1xServerConnection conn>;
v2 = virtualinvoke v1.<io.vertx.core.http.impl.Http1xServerConnection: io.netty.channel.Channel channel()>();
v3 = v0.<io.vertx.core.http.impl.ServerWebSocketImpl: io.vertx.core.http.impl.Http1xServerRequest request>;
v4 = virtualinvoke v3.<io.vertx.core.http.impl.Http1xServerRequest: io.vertx.core.http.impl.Http1xServerResponse response()>();
label1:
v5 = v0.<io.vertx.core.http.impl.ServerWebSocketImpl: io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker handshaker>;
v6 = v0.<io.vertx.core.http.impl.ServerWebSocketImpl: io.vertx.core.http.impl.Http1xServerRequest request>;
v7 = virtualinvoke v6.<io.vertx.core.http.impl.Http1xServerRequest: io.netty.handler.codec.http.HttpRequest nettyRequest()>();
virtualinvoke v5.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: io.netty.channel.ChannelFuture handshake(io.netty.channel.Channel,io.netty.handler.codec.http.HttpRequest)>(v2, v7);
label2:
v0.<io.vertx.core.http.impl.ServerWebSocketImpl: io.vertx.core.http.impl.Http1xServerRequest request> = null;
goto label5;
label3:
v8 := @caughtexception;
v9 = <io.netty.handler.codec.http.HttpResponseStatus: io.netty.handler.codec.http.HttpResponseStatus BAD_REQUEST>;
v10 = virtualinvoke v9.<io.netty.handler.codec.http.HttpResponseStatus: int code()>();
v11 = virtualinvoke v4.<io.vertx.core.http.impl.Http1xServerResponse: io.vertx.core.http.HttpServerResponse setStatusCode(int)>(v10);
interfaceinvoke v11.<io.vertx.core.http.HttpServerResponse: io.vertx.core.Future end()>();
throw v8;
label4:
v12 := @caughtexception;
v0.<io.vertx.core.http.impl.ServerWebSocketImpl: io.vertx.core.http.impl.Http1xServerRequest request> = null;
throw v12;
label5:
virtualinvoke v4.<io.vertx.core.http.impl.Http1xServerResponse: void completeHandshake()>();
v13 = <io.netty.handler.codec.http.HttpResponseStatus: io.netty.handler.codec.http.HttpResponseStatus SWITCHING_PROTOCOLS>;
v14 = virtualinvoke v13.<io.netty.handler.codec.http.HttpResponseStatus: int code()>();
v15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v14);
v0.<io.vertx.core.http.impl.ServerWebSocketImpl: java.lang.Integer status> = v15;
v16 = v0.<io.vertx.core.http.impl.ServerWebSocketImpl: io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker handshaker>;
v17 = virtualinvoke v16.<io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker: java.lang.String selectedSubprotocol()>();
virtualinvoke v0.<io.vertx.core.http.impl.ServerWebSocketImpl: void subProtocol(java.lang.String)>(v17);
v18 = interfaceinvoke v2.<io.netty.channel.Channel: io.netty.channel.ChannelPipeline pipeline()>();
v19 = interfaceinvoke v18.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelHandler get(java.lang.Class)>(class "Lio/vertx/core/http/impl/HttpChunkContentCompressor;");
if v19 == null goto label6;
interfaceinvoke v18.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline remove(io.netty.channel.ChannelHandler)>(v19);
label6:
v20 = v0.<io.vertx.core.http.impl.ServerWebSocketImpl: io.vertx.core.http.impl.Http1xServerConnection conn>;
v21 = virtualinvoke v20.<io.vertx.core.http.impl.Http1xServerConnection: io.vertx.core.impl.ContextInternal getContext()>();
v22 = interfaceinvoke v21.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.VertxInternal owner()>();
v23 = interfaceinvoke v22.<io.vertx.core.impl.VertxInternal: io.vertx.core.eventbus.EventBus eventBus()>();
virtualinvoke v0.<io.vertx.core.http.impl.ServerWebSocketImpl: void registerHandler(io.vertx.core.eventbus.EventBus)>(v23);
return;
catch java.lang.Exception from label1 to label2 with label3;
catch java.lang.Throwable from label1 to label2 with label4;
}
java.lang.Boolean tryHandshake(int)
{
java.lang.Throwable v12;
io.vertx.core.Promise v4;
io.vertx.core.http.impl.Http1xServerConnection v2;
io.vertx.core.Future v6;
java.lang.Integer v3, v5, v7, v9;
int v1, v10;
io.vertx.core.http.impl.ServerWebSocketImpl v0;
java.lang.Boolean v8;
boolean v11;
v0 := @this: io.vertx.core.http.impl.ServerWebSocketImpl;
v1 := @parameter0: int;
v2 = v0.<io.vertx.core.http.impl.ServerWebSocketImpl: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v2;
label1:
v3 = v0.<io.vertx.core.http.impl.ServerWebSocketImpl: java.lang.Integer status>;
if v3 != null goto label2;
v4 = v0.<io.vertx.core.http.impl.ServerWebSocketImpl: io.vertx.core.Promise handshakePromise>;
if v4 != null goto label2;
v5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(v1);
v6 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future succeededFuture(java.lang.Object)>(v5);
virtualinvoke v0.<io.vertx.core.http.impl.ServerWebSocketImpl: io.vertx.core.Future setHandshake(io.vertx.core.Future)>(v6);
label2:
v7 = v0.<io.vertx.core.http.impl.ServerWebSocketImpl: java.lang.Integer status>;
if v7 != null goto label3;
v8 = null;
goto label6;
label3:
v9 = v0.<io.vertx.core.http.impl.ServerWebSocketImpl: java.lang.Integer status>;
v10 = virtualinvoke v9.<java.lang.Integer: int intValue()>();
if v10 != v1 goto label4;
v11 = 1;
goto label5;
label4:
v11 = 0;
label5:
v8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(v11);
label6:
exitmonitor v2;
label7:
return v8;
label8:
v12 := @caughtexception;
exitmonitor v2;
throw v12;
catch java.lang.Throwable from label1 to label7 with label8;
}
public void setHandshake(io.vertx.core.Future, io.vertx.core.Handler)
{
io.vertx.core.http.impl.ServerWebSocketImpl v0;
io.vertx.core.Handler v2;
io.vertx.core.Future v1, v3;
v0 := @this: io.vertx.core.http.impl.ServerWebSocketImpl;
v1 := @parameter0: io.vertx.core.Future;
v2 := @parameter1: io.vertx.core.Handler;
v3 = virtualinvoke v0.<io.vertx.core.http.impl.ServerWebSocketImpl: io.vertx.core.Future setHandshake(io.vertx.core.Future)>(v1);
interfaceinvoke v3.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
return;
}
public io.vertx.core.Future setHandshake(io.vertx.core.Future)
{
java.lang.Throwable v8;
java.lang.IllegalStateException v7;
io.vertx.core.Promise v3, v4, v6;
io.vertx.core.http.impl.Http1xServerConnection v5;
io.vertx.core.Future v1, v11, v9;
java.lang.NullPointerException v2;
io.vertx.core.http.impl.ServerWebSocketImpl v0;
io.vertx.core.Handler v10;
v0 := @this: io.vertx.core.http.impl.ServerWebSocketImpl;
v1 := @parameter0: io.vertx.core.Future;
if v1 != null goto label1;
v2 = new java.lang.NullPointerException;
specialinvoke v2.<java.lang.NullPointerException: void <init>()>();
throw v2;
label1:
v3 = staticinvoke <io.vertx.core.Promise: io.vertx.core.Promise promise()>();
v4 = staticinvoke <io.vertx.core.Promise: io.vertx.core.Promise promise()>();
v5 = v0.<io.vertx.core.http.impl.ServerWebSocketImpl: io.vertx.core.http.impl.Http1xServerConnection conn>;
entermonitor v5;
label2:
v6 = v0.<io.vertx.core.http.impl.ServerWebSocketImpl: io.vertx.core.Promise handshakePromise>;
if v6 == null goto label3;
v7 = new java.lang.IllegalStateException;
specialinvoke v7.<java.lang.IllegalStateException: void <init>()>();
throw v7;
label3:
v0.<io.vertx.core.http.impl.ServerWebSocketImpl: io.vertx.core.Promise handshakePromise> = v3;
exitmonitor v5;
label4:
goto label6;
label5:
v8 := @caughtexception;
exitmonitor v5;
throw v8;
label6:
interfaceinvoke v1.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v3);
v9 = interfaceinvoke v3.<io.vertx.core.Promise: io.vertx.core.Future future()>();
v10 = staticinvoke <io.vertx.core.http.impl.ServerWebSocketImpl$lambda_setHandshake_1__1130: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.ServerWebSocketImpl,io.vertx.core.Promise)>(v0, v4);
interfaceinvoke v9.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v10);
v11 = interfaceinvoke v4.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v11;
catch java.lang.Throwable from label2 to label4 with label5;
}
protected void handleCloseConnection()
{
io.vertx.core.http.impl.ServerWebSocketImpl v0;
v0 := @this: io.vertx.core.http.impl.ServerWebSocketImpl;
virtualinvoke v0.<io.vertx.core.http.impl.ServerWebSocketImpl: void closeConnection()>();
return;
}
protected void handleClose(boolean)
{
io.vertx.core.spi.metrics.HttpServerMetrics v3;
io.vertx.core.http.impl.ServerWebSocketImpl v0;
java.lang.Object v5;
io.vertx.core.http.impl.Http1xServerConnection v2;
boolean v1, v4;
v0 := @this: io.vertx.core.http.impl.ServerWebSocketImpl;
v1 := @parameter0: boolean;
v2 = v0.<io.vertx.core.http.impl.ServerWebSocketImpl: io.vertx.core.http.impl.Http1xServerConnection conn>;
v3 = v2.<io.vertx.core.http.impl.Http1xServerConnection: io.vertx.core.spi.metrics.HttpServerMetrics metrics>;
v4 = <io.vertx.core.spi.metrics.Metrics: boolean METRICS_ENABLED>;
if v4 == 0 goto label1;
if v3 == null goto label1;
v5 = virtualinvoke v0.<io.vertx.core.http.impl.ServerWebSocketImpl: java.lang.Object getMetric()>();
interfaceinvoke v3.<io.vertx.core.spi.metrics.HttpServerMetrics: void disconnected(java.lang.Object)>(v5);
virtualinvoke v0.<io.vertx.core.http.impl.ServerWebSocketImpl: void setMetric(java.lang.Object)>(null);
label1:
specialinvoke v0.<io.vertx.core.http.impl.WebSocketImplBase: void handleClose(boolean)>(v1);
return;
}
}