class io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request extends java.lang.Object implements io.vertx.core.net.impl.pool.PoolWaiter$Listener, io.vertx.core.Handler
{
private final io.vertx.core.impl.ContextInternal context;
private final io.vertx.core.http.HttpVersion protocol;
private final long timeout;
private final io.vertx.core.Handler handler;
private long timerID;
final io.vertx.core.http.impl.SharedClientHttpStreamEndpoint this$0;
void <init>(io.vertx.core.http.impl.SharedClientHttpStreamEndpoint, io.vertx.core.impl.ContextInternal, io.vertx.core.http.HttpVersion, long, io.vertx.core.Handler)
{
io.vertx.core.http.HttpVersion v3;
io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request v0;
io.vertx.core.impl.ContextInternal v2;
long v4;
io.vertx.core.Handler v5;
io.vertx.core.http.impl.SharedClientHttpStreamEndpoint v1;
v0 := @this: io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request;
v1 := @parameter0: io.vertx.core.http.impl.SharedClientHttpStreamEndpoint;
v2 := @parameter1: io.vertx.core.impl.ContextInternal;
v3 := @parameter2: io.vertx.core.http.HttpVersion;
v4 := @parameter3: long;
v5 := @parameter4: io.vertx.core.Handler;
v0.<io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request: io.vertx.core.http.impl.SharedClientHttpStreamEndpoint this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request: io.vertx.core.impl.ContextInternal context> = v2;
v0.<io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request: io.vertx.core.http.HttpVersion protocol> = v3;
v0.<io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request: long timeout> = v4;
v0.<io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request: io.vertx.core.Handler handler> = v5;
v0.<io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request: long timerID> = -1L;
return;
}
public void onEnqueue(io.vertx.core.net.impl.pool.PoolWaiter)
{
io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request v0;
io.vertx.core.net.impl.pool.PoolWaiter v1;
v0 := @this: io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request;
v1 := @parameter0: io.vertx.core.net.impl.pool.PoolWaiter;
virtualinvoke v0.<io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request: void onConnect(io.vertx.core.net.impl.pool.PoolWaiter)>(v1);
return;
}
public void onConnect(io.vertx.core.net.impl.pool.PoolWaiter)
{
io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request v0;
io.vertx.core.impl.ContextInternal v6;
long v2, v4, v7, v9;
byte v3, v5;
io.vertx.core.net.impl.pool.PoolWaiter v1;
io.vertx.core.Handler v8;
v0 := @this: io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request;
v1 := @parameter0: io.vertx.core.net.impl.pool.PoolWaiter;
v2 = v0.<io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request: long timeout>;
v3 = v2 cmp 0L;
if v3 <= 0 goto label1;
v4 = v0.<io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request: long timerID>;
v5 = v4 cmp -1L;
if v5 != 0 goto label1;
v6 = v0.<io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request: io.vertx.core.impl.ContextInternal context>;
v7 = v0.<io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request: long timeout>;
v8 = staticinvoke <io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request$lambda_onConnect_1__1013: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request,io.vertx.core.net.impl.pool.PoolWaiter)>(v0, v1);
v9 = interfaceinvoke v6.<io.vertx.core.impl.ContextInternal: long setTimer(long,io.vertx.core.Handler)>(v7, v8);
v0.<io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request: long timerID> = v9;
label1:
return;
}
public void handle(io.vertx.core.AsyncResult)
{
io.vertx.core.impl.VertxInternal v5;
io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request v0;
io.vertx.core.impl.ContextInternal v4;
long v2, v6;
byte v3;
io.vertx.core.AsyncResult v1;
io.vertx.core.Handler v7;
v0 := @this: io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request;
v1 := @parameter0: io.vertx.core.AsyncResult;
v2 = v0.<io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request: long timerID>;
v3 = v2 cmp 0L;
if v3 < 0 goto label1;
v4 = v0.<io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request: io.vertx.core.impl.ContextInternal context>;
v5 = interfaceinvoke v4.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.VertxInternal owner()>();
v6 = v0.<io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request: long timerID>;
interfaceinvoke v5.<io.vertx.core.impl.VertxInternal: boolean cancelTimer(long)>(v6);
label1:
v7 = v0.<io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request: io.vertx.core.Handler handler>;
interfaceinvoke v7.<io.vertx.core.Handler: void handle(java.lang.Object)>(v1);
return;
}
void acquire()
{
byte v6;
io.vertx.core.http.HttpVersion v4, v5;
io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request v0;
io.vertx.core.net.impl.pool.ConnectionPool v2;
io.vertx.core.impl.ContextInternal v3;
io.vertx.core.http.impl.SharedClientHttpStreamEndpoint v1;
v0 := @this: io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request;
v1 = v0.<io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request: io.vertx.core.http.impl.SharedClientHttpStreamEndpoint this$0>;
v2 = v1.<io.vertx.core.http.impl.SharedClientHttpStreamEndpoint: io.vertx.core.net.impl.pool.ConnectionPool pool>;
v3 = v0.<io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request: io.vertx.core.impl.ContextInternal context>;
v4 = v0.<io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request: io.vertx.core.http.HttpVersion protocol>;
v5 = <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion HTTP_2>;
if v4 != v5 goto label1;
v6 = 1;
goto label2;
label1:
v6 = 0;
label2:
interfaceinvoke v2.<io.vertx.core.net.impl.pool.ConnectionPool: void acquire(io.vertx.core.impl.ContextInternal,io.vertx.core.net.impl.pool.PoolWaiter$Listener,int,io.vertx.core.Handler)>(v3, v0, v6, v0);
return;
}
}