class io.vertx.core.http.impl.SharedClientHttpStreamEndpoint extends io.vertx.core.http.impl.ClientHttpEndpointBase implements io.vertx.core.net.impl.pool.PoolConnector
{
private static final java.util.function.BiFunction LIFO_SELECTOR;
private final io.vertx.core.http.impl.HttpClientImpl client;
private final io.vertx.core.http.impl.HttpChannelConnector connector;
private final io.vertx.core.net.impl.pool.ConnectionPool pool;
public void <init>(io.vertx.core.http.impl.HttpClientImpl, io.vertx.core.spi.metrics.ClientMetrics, int, int, int, io.vertx.core.http.impl.HttpChannelConnector, java.lang.Runnable)
{
io.vertx.core.http.impl.HttpChannelConnector v6;
io.vertx.core.http.impl.HttpClientImpl v1;
java.util.function.BiFunction v10;
io.vertx.core.net.impl.pool.ConnectionPool v11, v13, v9;
java.lang.Runnable v7;
java.util.function.Function v12;
int[] v8;
int v3, v4, v5;
io.vertx.core.spi.metrics.ClientMetrics v2;
io.vertx.core.http.impl.SharedClientHttpStreamEndpoint v0;
v0 := @this: io.vertx.core.http.impl.SharedClientHttpStreamEndpoint;
v1 := @parameter0: io.vertx.core.http.impl.HttpClientImpl;
v2 := @parameter1: io.vertx.core.spi.metrics.ClientMetrics;
v3 := @parameter2: int;
v4 := @parameter3: int;
v5 := @parameter4: int;
v6 := @parameter5: io.vertx.core.http.impl.HttpChannelConnector;
v7 := @parameter6: java.lang.Runnable;
specialinvoke v0.<io.vertx.core.http.impl.ClientHttpEndpointBase: void <init>(io.vertx.core.spi.metrics.ClientMetrics,java.lang.Runnable)>(v2, v7);
v8 = newarray (int)[2];
v8[0] = v4;
v8[1] = v5;
v9 = staticinvoke <io.vertx.core.net.impl.pool.ConnectionPool: io.vertx.core.net.impl.pool.ConnectionPool pool(io.vertx.core.net.impl.pool.PoolConnector,int[],int)>(v0, v8, v3);
v10 = <io.vertx.core.http.impl.SharedClientHttpStreamEndpoint: java.util.function.BiFunction LIFO_SELECTOR>;
v11 = interfaceinvoke v9.<io.vertx.core.net.impl.pool.ConnectionPool: io.vertx.core.net.impl.pool.ConnectionPool connectionSelector(java.util.function.BiFunction)>(v10);
v12 = virtualinvoke v1.<io.vertx.core.http.impl.HttpClientImpl: java.util.function.Function contextProvider()>();
v13 = interfaceinvoke v11.<io.vertx.core.net.impl.pool.ConnectionPool: io.vertx.core.net.impl.pool.ConnectionPool contextProvider(java.util.function.Function)>(v12);
v0.<io.vertx.core.http.impl.SharedClientHttpStreamEndpoint: io.vertx.core.http.impl.HttpClientImpl client> = v1;
v0.<io.vertx.core.http.impl.SharedClientHttpStreamEndpoint: io.vertx.core.http.impl.HttpChannelConnector connector> = v6;
v0.<io.vertx.core.http.impl.SharedClientHttpStreamEndpoint: io.vertx.core.net.impl.pool.ConnectionPool pool> = v13;
return;
}
public void connect(io.vertx.core.impl.EventLoopContext, io.vertx.core.net.impl.pool.PoolConnector$Listener, io.vertx.core.Handler)
{
io.vertx.core.impl.EventLoopContext v1;
io.vertx.core.http.impl.HttpChannelConnector v4;
io.vertx.core.Handler v3, v5;
io.vertx.core.http.impl.SharedClientHttpStreamEndpoint v0;
io.vertx.core.net.impl.pool.PoolConnector$Listener v2;
v0 := @this: io.vertx.core.http.impl.SharedClientHttpStreamEndpoint;
v1 := @parameter0: io.vertx.core.impl.EventLoopContext;
v2 := @parameter1: io.vertx.core.net.impl.pool.PoolConnector$Listener;
v3 := @parameter2: io.vertx.core.Handler;
v4 = v0.<io.vertx.core.http.impl.SharedClientHttpStreamEndpoint: io.vertx.core.http.impl.HttpChannelConnector connector>;
v5 = staticinvoke <io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$lambda_connect_2__989: io.vertx.core.Handler bootstrap$(io.vertx.core.http.impl.SharedClientHttpStreamEndpoint,io.vertx.core.net.impl.pool.PoolConnector$Listener,io.vertx.core.impl.EventLoopContext,io.vertx.core.Handler)>(v0, v2, v1, v3);
virtualinvoke v4.<io.vertx.core.http.impl.HttpChannelConnector: void httpConnect(io.vertx.core.impl.EventLoopContext,io.vertx.core.Handler)>(v1, v5);
return;
}
public boolean isValid(io.vertx.core.http.impl.HttpClientConnection)
{
io.vertx.core.http.impl.HttpClientConnection v1;
io.vertx.core.http.impl.SharedClientHttpStreamEndpoint v0;
boolean v2;
v0 := @this: io.vertx.core.http.impl.SharedClientHttpStreamEndpoint;
v1 := @parameter0: io.vertx.core.http.impl.HttpClientConnection;
v2 = interfaceinvoke v1.<io.vertx.core.http.impl.HttpClientConnection: boolean isValid()>();
return v2;
}
void checkExpired()
{
java.util.function.Predicate v2;
io.vertx.core.net.impl.pool.ConnectionPool v1;
io.vertx.core.Handler v3;
io.vertx.core.http.impl.SharedClientHttpStreamEndpoint v0;
v0 := @this: io.vertx.core.http.impl.SharedClientHttpStreamEndpoint;
v1 = v0.<io.vertx.core.http.impl.SharedClientHttpStreamEndpoint: io.vertx.core.net.impl.pool.ConnectionPool pool>;
v2 = staticinvoke <io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$lambda_checkExpired_3__990: java.util.function.Predicate bootstrap$()>();
v3 = staticinvoke <io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$lambda_checkExpired_4__991: io.vertx.core.Handler bootstrap$()>();
interfaceinvoke v1.<io.vertx.core.net.impl.pool.ConnectionPool: void evict(java.util.function.Predicate,io.vertx.core.Handler)>(v2, v3);
return;
}
public void requestConnection2(io.vertx.core.impl.ContextInternal, long, io.vertx.core.Handler)
{
io.vertx.core.http.impl.HttpClientImpl v5;
io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request v4;
io.vertx.core.impl.ContextInternal v1;
long v2;
io.vertx.core.http.HttpVersion v7;
io.vertx.core.http.HttpClientOptions v6;
io.vertx.core.Handler v3;
io.vertx.core.http.impl.SharedClientHttpStreamEndpoint v0;
v0 := @this: io.vertx.core.http.impl.SharedClientHttpStreamEndpoint;
v1 := @parameter0: io.vertx.core.impl.ContextInternal;
v2 := @parameter1: long;
v3 := @parameter2: io.vertx.core.Handler;
v4 = new io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request;
v5 = v0.<io.vertx.core.http.impl.SharedClientHttpStreamEndpoint: io.vertx.core.http.impl.HttpClientImpl client>;
v6 = virtualinvoke v5.<io.vertx.core.http.impl.HttpClientImpl: io.vertx.core.http.HttpClientOptions options()>();
v7 = virtualinvoke v6.<io.vertx.core.http.HttpClientOptions: io.vertx.core.http.HttpVersion getProtocolVersion()>();
specialinvoke v4.<io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request: void <init>(io.vertx.core.http.impl.SharedClientHttpStreamEndpoint,io.vertx.core.impl.ContextInternal,io.vertx.core.http.HttpVersion,long,io.vertx.core.Handler)>(v0, v1, v7, v2, v3);
virtualinvoke v4.<io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$Request: void acquire()>();
return;
}
static void <clinit>()
{
java.util.function.BiFunction v0;
v0 = staticinvoke <io.vertx.core.http.impl.SharedClientHttpStreamEndpoint$lambda_static_0__995: java.util.function.BiFunction bootstrap$()>();
<io.vertx.core.http.impl.SharedClientHttpStreamEndpoint: java.util.function.BiFunction LIFO_SELECTOR> = v0;
return;
}
}