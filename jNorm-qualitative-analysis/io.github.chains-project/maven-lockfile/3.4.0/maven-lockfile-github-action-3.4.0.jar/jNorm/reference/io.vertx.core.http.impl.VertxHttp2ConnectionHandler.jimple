class io.vertx.core.http.impl.VertxHttp2ConnectionHandler extends io.netty.handler.codec.http2.Http2ConnectionHandler implements io.netty.handler.codec.http2.Http2FrameListener, io.netty.handler.codec.http2.Http2Connection$Listener
{
private final java.util.function.Function connectionFactory;
private io.vertx.core.http.impl.Http2ConnectionBase connection;
private io.netty.channel.ChannelHandlerContext chctx;
private io.netty.util.concurrent.Promise connectFuture;
private boolean settingsRead;
private io.vertx.core.Handler addHandler;
private io.vertx.core.Handler removeHandler;
private final boolean useDecompressor;
private final io.netty.handler.codec.http2.Http2Settings initialSettings;
public boolean upgraded;
private boolean read;
public void <init>(java.util.function.Function, boolean, io.netty.handler.codec.http2.Http2ConnectionDecoder, io.netty.handler.codec.http2.Http2ConnectionEncoder, io.netty.handler.codec.http2.Http2Settings)
{
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
io.netty.handler.codec.http2.Http2ConnectionEncoder v4, v6;
java.util.function.Function v1;
io.netty.handler.codec.http2.Http2ConnectionDecoder v3;
io.netty.handler.codec.http2.Http2Settings v5;
io.netty.handler.codec.http2.Http2Connection v9;
io.netty.handler.codec.http2.Http2RemoteFlowController$Listener v8;
io.netty.handler.codec.http2.Http2RemoteFlowController v7;
boolean v2;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: java.util.function.Function;
v2 := @parameter1: boolean;
v3 := @parameter2: io.netty.handler.codec.http2.Http2ConnectionDecoder;
v4 := @parameter3: io.netty.handler.codec.http2.Http2ConnectionEncoder;
v5 := @parameter4: io.netty.handler.codec.http2.Http2Settings;
specialinvoke v0.<io.netty.handler.codec.http2.Http2ConnectionHandler: void <init>(io.netty.handler.codec.http2.Http2ConnectionDecoder,io.netty.handler.codec.http2.Http2ConnectionEncoder,io.netty.handler.codec.http2.Http2Settings)>(v3, v4, v5);
v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: java.util.function.Function connectionFactory> = v1;
v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: boolean useDecompressor> = v2;
v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.handler.codec.http2.Http2Settings initialSettings> = v5;
v6 = virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.handler.codec.http2.Http2ConnectionEncoder encoder()>();
v7 = interfaceinvoke v6.<io.netty.handler.codec.http2.Http2ConnectionEncoder: io.netty.handler.codec.http2.Http2RemoteFlowController flowController()>();
v8 = staticinvoke <io.vertx.core.http.impl.VertxHttp2ConnectionHandler$lambda_new_0__974: io.netty.handler.codec.http2.Http2RemoteFlowController$Listener bootstrap$(io.vertx.core.http.impl.VertxHttp2ConnectionHandler)>(v0);
interfaceinvoke v7.<io.netty.handler.codec.http2.Http2RemoteFlowController: void listener(io.netty.handler.codec.http2.Http2RemoteFlowController$Listener)>(v8);
v9 = virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.handler.codec.http2.Http2Connection connection()>();
interfaceinvoke v9.<io.netty.handler.codec.http2.Http2Connection: void addListener(io.netty.handler.codec.http2.Http2Connection$Listener)>(v0);
return;
}
public io.netty.util.concurrent.Future connectFuture()
{
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
java.lang.IllegalStateException v2;
io.netty.util.concurrent.Promise v1, v3;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.util.concurrent.Promise connectFuture>;
if v1 != null goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>()>();
throw v2;
label1:
v3 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.util.concurrent.Promise connectFuture>;
return v3;
}
public io.netty.channel.ChannelHandlerContext context()
{
io.netty.channel.ChannelHandlerContext v1;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.channel.ChannelHandlerContext chctx>;
return v1;
}
public io.netty.handler.codec.http2.Http2Settings initialSettings()
{
io.netty.handler.codec.http2.Http2Settings v1;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.handler.codec.http2.Http2Settings initialSettings>;
return v1;
}
public io.vertx.core.http.impl.VertxHttp2ConnectionHandler addHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.vertx.core.Handler addHandler> = v1;
return v0;
}
public io.vertx.core.http.impl.VertxHttp2ConnectionHandler removeHandler(io.vertx.core.Handler)
{
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.vertx.core.Handler removeHandler> = v1;
v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.vertx.core.http.impl.Http2ConnectionBase connection> = null;
return v0;
}
public void handlerAdded(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.util.concurrent.EventExecutor v3;
io.netty.channel.ChannelHandlerContext v1;
io.netty.util.concurrent.DefaultPromise v2;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
java.lang.Object v5;
java.util.function.Function v4;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
specialinvoke v0.<io.netty.handler.codec.http2.Http2ConnectionHandler: void handlerAdded(io.netty.channel.ChannelHandlerContext)>(v1);
v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.channel.ChannelHandlerContext chctx> = v1;
v2 = new io.netty.util.concurrent.DefaultPromise;
v3 = interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
specialinvoke v2.<io.netty.util.concurrent.DefaultPromise: void <init>(io.netty.util.concurrent.EventExecutor)>(v3);
v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.util.concurrent.Promise connectFuture> = v2;
v4 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: java.util.function.Function connectionFactory>;
v5 = interfaceinvoke v4.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v0);
v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.vertx.core.http.impl.Http2ConnectionBase connection> = v5;
return;
}
public void exceptionCaught(io.netty.channel.ChannelHandlerContext, java.lang.Throwable) throws java.lang.Exception
{
java.lang.Throwable v2;
io.netty.channel.ChannelHandlerContext v1;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
io.netty.handler.codec.http2.Http2Exception v3;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Throwable;
v3 = staticinvoke <io.netty.handler.codec.http2.Http2CodecUtil: io.netty.handler.codec.http2.Http2Exception getEmbeddedHttp2Exception(java.lang.Throwable)>(v2);
if v3 == null goto label1;
specialinvoke v0.<io.netty.handler.codec.http2.Http2ConnectionHandler: void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)>(v1, v3);
label1:
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelFuture close()>();
return;
}
public void serverUpgrade(io.netty.channel.ChannelHandlerContext, io.netty.handler.codec.http2.Http2Settings) throws java.lang.Exception
{
io.netty.handler.codec.http2.Http2Settings v2;
io.netty.channel.ChannelHandlerContext v1;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.handler.codec.http2.Http2Settings;
v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: boolean upgraded> = 1;
virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void onHttpServerUpgrade(io.netty.handler.codec.http2.Http2Settings)>(v2);
virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void onSettingsRead(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http2.Http2Settings)>(v1, v2);
return;
}
public void clientUpgrade(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: boolean upgraded> = 1;
virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void onHttpClientUpgrade()>();
specialinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void checkFlush()>();
return;
}
public void channelInactive(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.vertx.core.VertxException v8;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
io.netty.util.concurrent.Promise v7;
io.netty.channel.ChannelHandlerContext v1;
io.vertx.core.Handler v4, v5;
boolean v3;
io.vertx.core.http.impl.Http2ConnectionBase v2, v6, v9;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.vertx.core.http.impl.Http2ConnectionBase connection>;
if v2 == null goto label3;
v3 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: boolean settingsRead>;
if v3 == 0 goto label1;
v4 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.vertx.core.Handler removeHandler>;
if v4 == null goto label2;
v5 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.vertx.core.Handler removeHandler>;
v6 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.vertx.core.http.impl.Http2ConnectionBase connection>;
interfaceinvoke v5.<io.vertx.core.Handler: void handle(java.lang.Object)>(v6);
goto label2;
label1:
v7 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.util.concurrent.Promise connectFuture>;
v8 = <io.vertx.core.net.impl.ConnectionBase: io.vertx.core.VertxException CLOSED_EXCEPTION>;
interfaceinvoke v7.<io.netty.util.concurrent.Promise: boolean tryFailure(java.lang.Throwable)>(v8);
label2:
specialinvoke v0.<io.netty.handler.codec.http2.Http2ConnectionHandler: void channelInactive(io.netty.channel.ChannelHandlerContext)>(v1);
v9 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.vertx.core.http.impl.Http2ConnectionBase connection>;
virtualinvoke v9.<io.vertx.core.http.impl.Http2ConnectionBase: void handleClosed()>();
goto label4;
label3:
specialinvoke v0.<io.netty.handler.codec.http2.Http2ConnectionHandler: void channelInactive(io.netty.channel.ChannelHandlerContext)>(v1);
label4:
return;
}
protected void onConnectionError(io.netty.channel.ChannelHandlerContext, boolean, java.lang.Throwable, io.netty.handler.codec.http2.Http2Exception)
{
java.lang.Throwable v3;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
io.netty.util.concurrent.Promise v7;
io.netty.channel.ChannelHandlerContext v1;
io.netty.handler.codec.http2.Http2Exception v4;
boolean v2, v6;
io.vertx.core.http.impl.Http2ConnectionBase v5;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: boolean;
v3 := @parameter2: java.lang.Throwable;
v4 := @parameter3: io.netty.handler.codec.http2.Http2Exception;
v5 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.vertx.core.http.impl.Http2ConnectionBase connection>;
virtualinvoke v5.<io.vertx.core.http.impl.Http2ConnectionBase: void onConnectionError(java.lang.Throwable)>(v3);
v6 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: boolean settingsRead>;
if v6 != 0 goto label1;
v7 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.util.concurrent.Promise connectFuture>;
interfaceinvoke v7.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>(v4);
label1:
specialinvoke v0.<io.netty.handler.codec.http2.Http2ConnectionHandler: void onConnectionError(io.netty.channel.ChannelHandlerContext,boolean,java.lang.Throwable,io.netty.handler.codec.http2.Http2Exception)>(v1, v2, v3, v4);
return;
}
protected void onStreamError(io.netty.channel.ChannelHandlerContext, boolean, java.lang.Throwable, io.netty.handler.codec.http2.Http2Exception$StreamException)
{
java.lang.Throwable v3;
io.netty.channel.ChannelHandlerContext v1;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
int v6;
boolean v2;
io.netty.handler.codec.http2.Http2Exception$StreamException v4;
io.vertx.core.http.impl.Http2ConnectionBase v5;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: boolean;
v3 := @parameter2: java.lang.Throwable;
v4 := @parameter3: io.netty.handler.codec.http2.Http2Exception$StreamException;
v5 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.vertx.core.http.impl.Http2ConnectionBase connection>;
v6 = virtualinvoke v4.<io.netty.handler.codec.http2.Http2Exception$StreamException: int streamId()>();
virtualinvoke v5.<io.vertx.core.http.impl.Http2ConnectionBase: void onStreamError(int,java.lang.Throwable)>(v6, v4);
specialinvoke v0.<io.netty.handler.codec.http2.Http2ConnectionHandler: void onStreamError(io.netty.channel.ChannelHandlerContext,boolean,java.lang.Throwable,io.netty.handler.codec.http2.Http2Exception$StreamException)>(v1, v2, v3, v4);
return;
}
public void userEventTriggered(io.netty.channel.ChannelHandlerContext, java.lang.Object) throws java.lang.Exception
{
java.lang.Throwable v5;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
io.netty.channel.ChannelHandlerContext v1;
java.lang.Object v2;
boolean v3, v6;
io.vertx.core.http.impl.Http2ConnectionBase v4, v7;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
label1:
specialinvoke v0.<io.netty.handler.codec.http2.Http2ConnectionHandler: void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)>(v1, v2);
label2:
v3 = v2 instanceof io.netty.handler.timeout.IdleStateEvent;
if v3 == 0 goto label5;
v4 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.vertx.core.http.impl.Http2ConnectionBase connection>;
virtualinvoke v4.<io.vertx.core.http.impl.Http2ConnectionBase: void handleIdle(io.netty.handler.timeout.IdleStateEvent)>(v2);
goto label5;
label3:
v5 := @caughtexception;
v6 = v2 instanceof io.netty.handler.timeout.IdleStateEvent;
if v6 == 0 goto label4;
v7 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.vertx.core.http.impl.Http2ConnectionBase connection>;
virtualinvoke v7.<io.vertx.core.http.impl.Http2ConnectionBase: void handleIdle(io.netty.handler.timeout.IdleStateEvent)>(v2);
label4:
throw v5;
label5:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
public void onStreamClosed(io.netty.handler.codec.http2.Http2Stream)
{
io.netty.handler.codec.http2.Http2Stream v1;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
io.vertx.core.http.impl.Http2ConnectionBase v2;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Stream;
v2 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.vertx.core.http.impl.Http2ConnectionBase connection>;
virtualinvoke v2.<io.vertx.core.http.impl.Http2ConnectionBase: void onStreamClosed(io.netty.handler.codec.http2.Http2Stream)>(v1);
return;
}
public void onStreamAdded(io.netty.handler.codec.http2.Http2Stream)
{
io.netty.handler.codec.http2.Http2Stream v1;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Stream;
return;
}
public void onStreamActive(io.netty.handler.codec.http2.Http2Stream)
{
io.netty.handler.codec.http2.Http2Stream v1;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Stream;
return;
}
public void onStreamHalfClosed(io.netty.handler.codec.http2.Http2Stream)
{
io.netty.handler.codec.http2.Http2Stream v1;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Stream;
return;
}
public void onStreamRemoved(io.netty.handler.codec.http2.Http2Stream)
{
io.netty.handler.codec.http2.Http2Stream v1;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Stream;
return;
}
public void onGoAwaySent(int, long, io.netty.buffer.ByteBuf)
{
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
io.vertx.core.http.GoAway v5, v6, v7, v9;
long v2;
io.netty.buffer.ByteBuf v3;
io.vertx.core.buffer.Buffer v8;
int v1;
io.vertx.core.http.impl.Http2ConnectionBase v4;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: int;
v2 := @parameter1: long;
v3 := @parameter2: io.netty.buffer.ByteBuf;
v4 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.vertx.core.http.impl.Http2ConnectionBase connection>;
v5 = new io.vertx.core.http.GoAway;
specialinvoke v5.<io.vertx.core.http.GoAway: void <init>()>();
v6 = virtualinvoke v5.<io.vertx.core.http.GoAway: io.vertx.core.http.GoAway setErrorCode(long)>(v2);
v7 = virtualinvoke v6.<io.vertx.core.http.GoAway: io.vertx.core.http.GoAway setLastStreamId(int)>(v1);
v8 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(io.netty.buffer.ByteBuf)>(v3);
v9 = virtualinvoke v7.<io.vertx.core.http.GoAway: io.vertx.core.http.GoAway setDebugData(io.vertx.core.buffer.Buffer)>(v8);
virtualinvoke v4.<io.vertx.core.http.impl.Http2ConnectionBase: boolean onGoAwaySent(io.vertx.core.http.GoAway)>(v9);
return;
}
public void onGoAwayReceived(int, long, io.netty.buffer.ByteBuf)
{
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
io.vertx.core.http.GoAway v5, v6, v7, v9;
long v2;
io.netty.buffer.ByteBuf v3;
io.vertx.core.buffer.Buffer v8;
int v1;
io.vertx.core.http.impl.Http2ConnectionBase v4;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: int;
v2 := @parameter1: long;
v3 := @parameter2: io.netty.buffer.ByteBuf;
v4 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.vertx.core.http.impl.Http2ConnectionBase connection>;
v5 = new io.vertx.core.http.GoAway;
specialinvoke v5.<io.vertx.core.http.GoAway: void <init>()>();
v6 = virtualinvoke v5.<io.vertx.core.http.GoAway: io.vertx.core.http.GoAway setErrorCode(long)>(v2);
v7 = virtualinvoke v6.<io.vertx.core.http.GoAway: io.vertx.core.http.GoAway setLastStreamId(int)>(v1);
v8 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(io.netty.buffer.ByteBuf)>(v3);
v9 = virtualinvoke v7.<io.vertx.core.http.GoAway: io.vertx.core.http.GoAway setDebugData(io.vertx.core.buffer.Buffer)>(v8);
virtualinvoke v4.<io.vertx.core.http.impl.Http2ConnectionBase: boolean onGoAwayReceived(io.vertx.core.http.GoAway)>(v9);
return;
}
void writeHeaders(io.netty.handler.codec.http2.Http2Stream, io.netty.handler.codec.http2.Http2Headers, boolean, int, short, boolean, io.netty.util.concurrent.FutureListener)
{
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
io.netty.util.concurrent.FutureListener v7;
io.netty.handler.codec.http2.Http2ConnectionEncoder v12;
io.netty.channel.ChannelHandlerContext v10, v13, v8;
short v5;
io.netty.channel.ChannelPromise v11, v9;
io.netty.handler.codec.http2.Http2Headers v2;
int v14, v4;
io.netty.handler.codec.http2.Http2Stream v1;
boolean v3, v6;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Stream;
v2 := @parameter1: io.netty.handler.codec.http2.Http2Headers;
v3 := @parameter2: boolean;
v4 := @parameter3: int;
v5 := @parameter4: short;
v6 := @parameter5: boolean;
v7 := @parameter6: io.netty.util.concurrent.FutureListener;
if v7 != null goto label1;
v8 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.channel.ChannelHandlerContext chctx>;
v9 = interfaceinvoke v8.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPromise voidPromise()>();
goto label2;
label1:
v10 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.channel.ChannelHandlerContext chctx>;
v11 = interfaceinvoke v10.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPromise newPromise()>();
v9 = interfaceinvoke v11.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise addListener(io.netty.util.concurrent.GenericFutureListener)>(v7);
label2:
v12 = virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.handler.codec.http2.Http2ConnectionEncoder encoder()>();
v13 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.channel.ChannelHandlerContext chctx>;
v14 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Stream: int id()>();
interfaceinvoke v12.<io.netty.handler.codec.http2.Http2ConnectionEncoder: io.netty.channel.ChannelFuture writeHeaders(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.http2.Http2Headers,int,short,boolean,int,boolean,io.netty.channel.ChannelPromise)>(v13, v14, v2, v4, v5, v6, 0, v3, v9);
specialinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void checkFlush()>();
return;
}
void writeData(io.netty.handler.codec.http2.Http2Stream, io.netty.buffer.ByteBuf, boolean, io.netty.util.concurrent.FutureListener)
{
io.netty.handler.codec.http2.Http2ConnectionEncoder v12, v15, v9;
io.netty.channel.ChannelHandlerContext v10, v18, v5, v7;
io.netty.buffer.ByteBuf v2;
io.netty.channel.ChannelPromise v6, v8;
io.netty.handler.codec.http2.Http2Exception v17;
int v11;
io.netty.handler.codec.http2.Http2Stream v1;
boolean v14, v3;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
io.netty.util.concurrent.FutureListener v4;
io.netty.handler.codec.http2.Http2RemoteFlowController v13, v16;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Stream;
v2 := @parameter1: io.netty.buffer.ByteBuf;
v3 := @parameter2: boolean;
v4 := @parameter3: io.netty.util.concurrent.FutureListener;
if v4 != null goto label1;
v5 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.channel.ChannelHandlerContext chctx>;
v6 = interfaceinvoke v5.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPromise voidPromise()>();
goto label2;
label1:
v7 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.channel.ChannelHandlerContext chctx>;
v8 = interfaceinvoke v7.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPromise newPromise()>();
v6 = interfaceinvoke v8.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise addListener(io.netty.util.concurrent.GenericFutureListener)>(v4);
label2:
v9 = virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.handler.codec.http2.Http2ConnectionEncoder encoder()>();
v10 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.channel.ChannelHandlerContext chctx>;
v11 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Stream: int id()>();
interfaceinvoke v9.<io.netty.handler.codec.http2.Http2ConnectionEncoder: io.netty.channel.ChannelFuture writeData(io.netty.channel.ChannelHandlerContext,int,io.netty.buffer.ByteBuf,int,boolean,io.netty.channel.ChannelPromise)>(v10, v11, v2, 0, v3, v6);
v12 = virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.handler.codec.http2.Http2ConnectionEncoder encoder()>();
v13 = interfaceinvoke v12.<io.netty.handler.codec.http2.Http2ConnectionEncoder: io.netty.handler.codec.http2.Http2RemoteFlowController flowController()>();
v14 = interfaceinvoke v13.<io.netty.handler.codec.http2.Http2RemoteFlowController: boolean isWritable(io.netty.handler.codec.http2.Http2Stream)>(v1);
if v14 == 0 goto label3;
if v3 == 0 goto label6;
label3:
v15 = virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.handler.codec.http2.Http2ConnectionEncoder encoder()>();
v16 = interfaceinvoke v15.<io.netty.handler.codec.http2.Http2ConnectionEncoder: io.netty.handler.codec.http2.Http2RemoteFlowController flowController()>();
interfaceinvoke v16.<io.netty.handler.codec.http2.Http2RemoteFlowController: void writePendingBytes()>();
label4:
goto label6;
label5:
v17 := @caughtexception;
v18 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.channel.ChannelHandlerContext chctx>;
virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void onError(io.netty.channel.ChannelHandlerContext,boolean,java.lang.Throwable)>(v18, 1, v17);
label6:
specialinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void checkFlush()>();
return;
catch io.netty.handler.codec.http2.Http2Exception from label3 to label4 with label5;
}
private void checkFlush()
{
io.netty.channel.Channel v3;
io.netty.channel.ChannelHandlerContext v2;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
boolean v1;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: boolean read>;
if v1 != 0 goto label1;
v2 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.channel.ChannelHandlerContext chctx>;
v3 = interfaceinvoke v2.<io.netty.channel.ChannelHandlerContext: io.netty.channel.Channel channel()>();
interfaceinvoke v3.<io.netty.channel.Channel: io.netty.channel.Channel flush()>();
label1:
return;
}
io.netty.channel.ChannelFuture writePing(long)
{
io.netty.util.concurrent.EventExecutor v5;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
long v1;
java.lang.Runnable v7;
io.netty.channel.ChannelHandlerContext v2, v4;
io.netty.channel.ChannelPromise v3;
boolean v6;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: long;
v2 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.channel.ChannelHandlerContext chctx>;
v3 = interfaceinvoke v2.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPromise newPromise()>();
v4 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.channel.ChannelHandlerContext chctx>;
v5 = interfaceinvoke v4.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v6 = interfaceinvoke v5.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v6 == 0 goto label1;
specialinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void _writePing(long,io.netty.channel.ChannelPromise)>(v1, v3);
goto label2;
label1:
v7 = staticinvoke <io.vertx.core.http.impl.VertxHttp2ConnectionHandler$lambda_writePing_1__975: java.lang.Runnable bootstrap$(io.vertx.core.http.impl.VertxHttp2ConnectionHandler,long,io.netty.channel.ChannelPromise)>(v0, v1, v3);
interfaceinvoke v5.<io.netty.util.concurrent.EventExecutor: void execute(java.lang.Runnable)>(v7);
label2:
return v3;
}
private void _writePing(long, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelHandlerContext v4;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
io.netty.channel.ChannelPromise v2;
io.netty.handler.codec.http2.Http2ConnectionEncoder v3;
long v1;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: long;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.handler.codec.http2.Http2ConnectionEncoder encoder()>();
v4 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.channel.ChannelHandlerContext chctx>;
interfaceinvoke v3.<io.netty.handler.codec.http2.Http2ConnectionEncoder: io.netty.channel.ChannelFuture writePing(io.netty.channel.ChannelHandlerContext,boolean,long,io.netty.channel.ChannelPromise)>(v4, 0, v1, v2);
specialinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void checkFlush()>();
return;
}
void consume(io.netty.handler.codec.http2.Http2Stream, int)
{
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
io.netty.handler.codec.http2.Http2ConnectionDecoder v3;
io.netty.channel.ChannelHandlerContext v7;
io.netty.handler.codec.http2.Http2Exception v6;
int v2;
io.netty.handler.codec.http2.Http2Stream v1;
io.netty.handler.codec.http2.Http2LocalFlowController v4;
boolean v5;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Stream;
v2 := @parameter1: int;
label1:
v3 = virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.handler.codec.http2.Http2ConnectionDecoder decoder()>();
v4 = interfaceinvoke v3.<io.netty.handler.codec.http2.Http2ConnectionDecoder: io.netty.handler.codec.http2.Http2LocalFlowController flowController()>();
v5 = interfaceinvoke v4.<io.netty.handler.codec.http2.Http2LocalFlowController: boolean consumeBytes(io.netty.handler.codec.http2.Http2Stream,int)>(v1, v2);
if v5 == 0 goto label4;
specialinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void checkFlush()>();
label2:
goto label4;
label3:
v6 := @caughtexception;
v7 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.channel.ChannelHandlerContext chctx>;
virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void onError(io.netty.channel.ChannelHandlerContext,boolean,java.lang.Throwable)>(v7, 1, v6);
label4:
return;
catch io.netty.handler.codec.http2.Http2Exception from label1 to label2 with label3;
}
void writeFrame(io.netty.handler.codec.http2.Http2Stream, byte, short, io.netty.buffer.ByteBuf)
{
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
io.netty.handler.codec.http2.Http2Flags v8;
io.netty.handler.codec.http2.Http2ConnectionEncoder v5;
io.netty.channel.ChannelHandlerContext v6, v9;
short v3;
byte v2;
io.netty.buffer.ByteBuf v4;
io.netty.channel.ChannelPromise v10;
int v7;
io.netty.handler.codec.http2.Http2Stream v1;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Stream;
v2 := @parameter1: byte;
v3 := @parameter2: short;
v4 := @parameter3: io.netty.buffer.ByteBuf;
v5 = virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.handler.codec.http2.Http2ConnectionEncoder encoder()>();
v6 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.channel.ChannelHandlerContext chctx>;
v7 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Stream: int id()>();
v8 = new io.netty.handler.codec.http2.Http2Flags;
specialinvoke v8.<io.netty.handler.codec.http2.Http2Flags: void <init>(short)>(v3);
v9 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.channel.ChannelHandlerContext chctx>;
v10 = interfaceinvoke v9.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPromise newPromise()>();
interfaceinvoke v5.<io.netty.handler.codec.http2.Http2ConnectionEncoder: io.netty.channel.ChannelFuture writeFrame(io.netty.channel.ChannelHandlerContext,byte,int,io.netty.handler.codec.http2.Http2Flags,io.netty.buffer.ByteBuf,io.netty.channel.ChannelPromise)>(v6, v2, v7, v8, v4, v10);
specialinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void checkFlush()>();
return;
}
void writeReset(int, long)
{
io.netty.channel.ChannelHandlerContext v4, v5;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
io.netty.channel.ChannelPromise v6;
int v1;
io.netty.handler.codec.http2.Http2ConnectionEncoder v3;
long v2;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: int;
v2 := @parameter1: long;
v3 = virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.handler.codec.http2.Http2ConnectionEncoder encoder()>();
v4 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.channel.ChannelHandlerContext chctx>;
v5 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.channel.ChannelHandlerContext chctx>;
v6 = interfaceinvoke v5.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPromise newPromise()>();
interfaceinvoke v3.<io.netty.handler.codec.http2.Http2ConnectionEncoder: io.netty.channel.ChannelFuture writeRstStream(io.netty.channel.ChannelHandlerContext,int,long,io.netty.channel.ChannelPromise)>(v4, v1, v2, v6);
specialinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void checkFlush()>();
return;
}
void writeGoAway(long, int, io.netty.buffer.ByteBuf)
{
io.netty.util.concurrent.EventExecutor v5;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
long v1;
java.lang.Runnable v7;
io.netty.channel.ChannelHandlerContext v4;
io.netty.buffer.ByteBuf v3;
int v2;
boolean v6;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: long;
v2 := @parameter1: int;
v3 := @parameter2: io.netty.buffer.ByteBuf;
v4 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.channel.ChannelHandlerContext chctx>;
v5 = interfaceinvoke v4.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v6 = interfaceinvoke v5.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v6 == 0 goto label1;
specialinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void _writeGoAway(long,int,io.netty.buffer.ByteBuf)>(v1, v2, v3);
goto label2;
label1:
v7 = staticinvoke <io.vertx.core.http.impl.VertxHttp2ConnectionHandler$lambda_writeGoAway_2__976: java.lang.Runnable bootstrap$(io.vertx.core.http.impl.VertxHttp2ConnectionHandler,long,int,io.netty.buffer.ByteBuf)>(v0, v1, v2, v3);
interfaceinvoke v5.<io.netty.util.concurrent.EventExecutor: void execute(java.lang.Runnable)>(v7);
label2:
return;
}
private void _writeGoAway(long, int, io.netty.buffer.ByteBuf)
{
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
io.netty.handler.codec.http2.Http2ConnectionEncoder v4;
long v1;
io.netty.channel.ChannelHandlerContext v5, v6;
io.netty.buffer.ByteBuf v3;
io.netty.channel.ChannelPromise v7;
int v2;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: long;
v2 := @parameter1: int;
v3 := @parameter2: io.netty.buffer.ByteBuf;
v4 = virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.handler.codec.http2.Http2ConnectionEncoder encoder()>();
v5 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.channel.ChannelHandlerContext chctx>;
v6 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.channel.ChannelHandlerContext chctx>;
v7 = interfaceinvoke v6.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPromise newPromise()>();
interfaceinvoke v4.<io.netty.handler.codec.http2.Http2ConnectionEncoder: io.netty.channel.ChannelFuture writeGoAway(io.netty.channel.ChannelHandlerContext,int,long,io.netty.buffer.ByteBuf,io.netty.channel.ChannelPromise)>(v5, v2, v1, v3, v7);
specialinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void checkFlush()>();
return;
}
io.netty.channel.ChannelFuture writeSettings(io.netty.handler.codec.http2.Http2Settings)
{
io.netty.util.concurrent.EventExecutor v5;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
java.lang.Runnable v7;
io.netty.handler.codec.http2.Http2Settings v1;
io.netty.channel.ChannelHandlerContext v2, v4;
io.netty.channel.ChannelPromise v3;
boolean v6;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Settings;
v2 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.channel.ChannelHandlerContext chctx>;
v3 = interfaceinvoke v2.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPromise newPromise()>();
v4 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.channel.ChannelHandlerContext chctx>;
v5 = interfaceinvoke v4.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v6 = interfaceinvoke v5.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v6 == 0 goto label1;
specialinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void _writeSettings(io.netty.handler.codec.http2.Http2Settings,io.netty.channel.ChannelPromise)>(v1, v3);
goto label2;
label1:
v7 = staticinvoke <io.vertx.core.http.impl.VertxHttp2ConnectionHandler$lambda_writeSettings_3__977: java.lang.Runnable bootstrap$(io.vertx.core.http.impl.VertxHttp2ConnectionHandler,io.netty.handler.codec.http2.Http2Settings,io.netty.channel.ChannelPromise)>(v0, v1, v3);
interfaceinvoke v5.<io.netty.util.concurrent.EventExecutor: void execute(java.lang.Runnable)>(v7);
label2:
return v3;
}
private void _writeSettings(io.netty.handler.codec.http2.Http2Settings, io.netty.channel.ChannelPromise)
{
io.netty.handler.codec.http2.Http2Settings v1;
io.netty.channel.ChannelHandlerContext v4;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
io.netty.channel.ChannelPromise v2;
io.netty.handler.codec.http2.Http2ConnectionEncoder v3;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Settings;
v2 := @parameter1: io.netty.channel.ChannelPromise;
v3 = virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.handler.codec.http2.Http2ConnectionEncoder encoder()>();
v4 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.channel.ChannelHandlerContext chctx>;
interfaceinvoke v3.<io.netty.handler.codec.http2.Http2ConnectionEncoder: io.netty.channel.ChannelFuture writeSettings(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http2.Http2Settings,io.netty.channel.ChannelPromise)>(v4, v1, v2);
specialinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void checkFlush()>();
return;
}
io.netty.util.concurrent.Future writePushPromise(int, io.netty.handler.codec.http2.Http2Headers)
{
io.netty.util.concurrent.EventExecutor v13, v8;
java.lang.Runnable v15;
io.netty.channel.ChannelHandlerContext v12, v7, v9;
io.netty.channel.ChannelPromise v10;
int v1, v5;
boolean v14;
io.netty.handler.codec.http2.Http2Connection$Endpoint v4;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
io.netty.util.concurrent.GenericFutureListener v11;
io.netty.util.concurrent.DefaultPromise v6;
io.netty.handler.codec.http2.Http2Connection v3;
io.netty.handler.codec.http2.Http2Headers v2;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: int;
v2 := @parameter1: io.netty.handler.codec.http2.Http2Headers;
v3 = virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.handler.codec.http2.Http2Connection connection()>();
v4 = interfaceinvoke v3.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Connection$Endpoint local()>();
v5 = interfaceinvoke v4.<io.netty.handler.codec.http2.Http2Connection$Endpoint: int incrementAndGetNextStreamId()>();
v6 = new io.netty.util.concurrent.DefaultPromise;
v7 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.channel.ChannelHandlerContext chctx>;
v8 = interfaceinvoke v7.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
specialinvoke v6.<io.netty.util.concurrent.DefaultPromise: void <init>(io.netty.util.concurrent.EventExecutor)>(v8);
v9 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.channel.ChannelHandlerContext chctx>;
v10 = interfaceinvoke v9.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPromise newPromise()>();
v11 = staticinvoke <io.vertx.core.http.impl.VertxHttp2ConnectionHandler$lambda_writePushPromise_4__978: io.netty.util.concurrent.GenericFutureListener bootstrap$(io.netty.util.concurrent.DefaultPromise,int)>(v6, v5);
interfaceinvoke v10.<io.netty.channel.ChannelPromise: io.netty.channel.ChannelPromise addListener(io.netty.util.concurrent.GenericFutureListener)>(v11);
v12 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.channel.ChannelHandlerContext chctx>;
v13 = interfaceinvoke v12.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v14 = interfaceinvoke v13.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v14 == 0 goto label1;
specialinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void _writePushPromise(int,int,io.netty.handler.codec.http2.Http2Headers,io.netty.channel.ChannelPromise)>(v1, v5, v2, v10);
goto label2;
label1:
v15 = staticinvoke <io.vertx.core.http.impl.VertxHttp2ConnectionHandler$lambda_writePushPromise_5__979: java.lang.Runnable bootstrap$(io.vertx.core.http.impl.VertxHttp2ConnectionHandler,int,int,io.netty.handler.codec.http2.Http2Headers,io.netty.channel.ChannelPromise)>(v0, v1, v5, v2, v10);
interfaceinvoke v13.<io.netty.util.concurrent.EventExecutor: void execute(java.lang.Runnable)>(v15);
label2:
return v6;
}
int maxConcurrentStreams()
{
io.netty.handler.codec.http2.Http2Connection$Endpoint v2;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
io.netty.handler.codec.http2.Http2Connection v1;
int v3;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 = virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.handler.codec.http2.Http2Connection connection()>();
v2 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Connection$Endpoint local()>();
v3 = interfaceinvoke v2.<io.netty.handler.codec.http2.Http2Connection$Endpoint: int maxActiveStreams()>();
return v3;
}
private void _writePushPromise(int, int, io.netty.handler.codec.http2.Http2Headers, io.netty.channel.ChannelPromise)
{
io.netty.channel.ChannelHandlerContext v6;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
io.netty.channel.ChannelPromise v4;
io.netty.handler.codec.http2.Http2Headers v3;
int v1, v2;
io.netty.handler.codec.http2.Http2ConnectionEncoder v5;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: int;
v2 := @parameter1: int;
v3 := @parameter2: io.netty.handler.codec.http2.Http2Headers;
v4 := @parameter3: io.netty.channel.ChannelPromise;
v5 = virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.handler.codec.http2.Http2ConnectionEncoder encoder()>();
v6 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.channel.ChannelHandlerContext chctx>;
interfaceinvoke v5.<io.netty.handler.codec.http2.Http2ConnectionEncoder: io.netty.channel.ChannelFuture writePushPromise(io.netty.channel.ChannelHandlerContext,int,int,io.netty.handler.codec.http2.Http2Headers,int,io.netty.channel.ChannelPromise)>(v6, v1, v2, v3, 0, v4);
return;
}
public int onDataRead(io.netty.channel.ChannelHandlerContext, int, io.netty.buffer.ByteBuf, int, boolean) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
java.lang.UnsupportedOperationException v6;
io.netty.buffer.ByteBuf v3;
int v2, v4;
boolean v5;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: int;
v3 := @parameter2: io.netty.buffer.ByteBuf;
v4 := @parameter3: int;
v5 := @parameter4: boolean;
v6 = new java.lang.UnsupportedOperationException;
specialinvoke v6.<java.lang.UnsupportedOperationException: void <init>()>();
throw v6;
}
public void onHeadersRead(io.netty.channel.ChannelHandlerContext, int, io.netty.handler.codec.http2.Http2Headers, int, boolean) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
java.lang.UnsupportedOperationException v6;
io.netty.handler.codec.http2.Http2Headers v3;
int v2, v4;
boolean v5;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: int;
v3 := @parameter2: io.netty.handler.codec.http2.Http2Headers;
v4 := @parameter3: int;
v5 := @parameter4: boolean;
v6 = new java.lang.UnsupportedOperationException;
specialinvoke v6.<java.lang.UnsupportedOperationException: void <init>()>();
throw v6;
}
public void onHeadersRead(io.netty.channel.ChannelHandlerContext, int, io.netty.handler.codec.http2.Http2Headers, int, short, boolean, int, boolean) throws io.netty.handler.codec.http2.Http2Exception
{
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
io.netty.channel.ChannelHandlerContext v1;
short v5;
io.netty.handler.codec.http2.Http2Headers v3;
int v2, v4, v7;
boolean v6, v8;
io.vertx.core.http.impl.Http2ConnectionBase v9;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: int;
v3 := @parameter2: io.netty.handler.codec.http2.Http2Headers;
v4 := @parameter3: int;
v5 := @parameter4: short;
v6 := @parameter5: boolean;
v7 := @parameter6: int;
v8 := @parameter7: boolean;
v9 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.vertx.core.http.impl.Http2ConnectionBase connection>;
virtualinvoke v9.<io.vertx.core.http.impl.Http2ConnectionBase: void onHeadersRead(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.http2.Http2Headers,int,short,boolean,int,boolean)>(v1, v2, v3, v4, v5, v6, v7, v8);
return;
}
public void onPriorityRead(io.netty.channel.ChannelHandlerContext, int, int, short, boolean) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
java.lang.UnsupportedOperationException v6;
short v4;
int v2, v3;
boolean v5;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: short;
v5 := @parameter4: boolean;
v6 = new java.lang.UnsupportedOperationException;
specialinvoke v6.<java.lang.UnsupportedOperationException: void <init>()>();
throw v6;
}
public void onRstStreamRead(io.netty.channel.ChannelHandlerContext, int, long) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
java.lang.UnsupportedOperationException v4;
int v2;
long v3;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: int;
v3 := @parameter2: long;
v4 = new java.lang.UnsupportedOperationException;
specialinvoke v4.<java.lang.UnsupportedOperationException: void <init>()>();
throw v4;
}
public void onSettingsAckRead(io.netty.channel.ChannelHandlerContext) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
java.lang.UnsupportedOperationException v2;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 = new java.lang.UnsupportedOperationException;
specialinvoke v2.<java.lang.UnsupportedOperationException: void <init>()>();
throw v2;
}
public void onSettingsRead(io.netty.channel.ChannelHandlerContext, io.netty.handler.codec.http2.Http2Settings) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.handler.codec.http2.Http2ConnectionDecoder v4, v6, v9;
io.netty.channel.ChannelHandlerContext v1;
boolean v3;
io.vertx.core.http.impl.Http2ConnectionBase v10, v11, v14, v16, v8;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
io.netty.util.concurrent.Promise v15;
io.netty.handler.codec.http2.Http2Settings v2;
io.netty.handler.codec.http2.Http2Connection v7;
io.netty.handler.codec.http2.DelegatingDecompressorFrameListener v5;
io.vertx.core.Handler v12, v13;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: io.netty.handler.codec.http2.Http2Settings;
v3 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: boolean useDecompressor>;
if v3 == 0 goto label1;
v4 = virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.handler.codec.http2.Http2ConnectionDecoder decoder()>();
v5 = new io.netty.handler.codec.http2.DelegatingDecompressorFrameListener;
v6 = virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.handler.codec.http2.Http2ConnectionDecoder decoder()>();
v7 = interfaceinvoke v6.<io.netty.handler.codec.http2.Http2ConnectionDecoder: io.netty.handler.codec.http2.Http2Connection connection()>();
v8 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.vertx.core.http.impl.Http2ConnectionBase connection>;
specialinvoke v5.<io.netty.handler.codec.http2.DelegatingDecompressorFrameListener: void <init>(io.netty.handler.codec.http2.Http2Connection,io.netty.handler.codec.http2.Http2FrameListener)>(v7, v8);
interfaceinvoke v4.<io.netty.handler.codec.http2.Http2ConnectionDecoder: void frameListener(io.netty.handler.codec.http2.Http2FrameListener)>(v5);
goto label2;
label1:
v9 = virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.handler.codec.http2.Http2ConnectionDecoder decoder()>();
v10 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.vertx.core.http.impl.Http2ConnectionBase connection>;
interfaceinvoke v9.<io.netty.handler.codec.http2.Http2ConnectionDecoder: void frameListener(io.netty.handler.codec.http2.Http2FrameListener)>(v10);
label2:
v11 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.vertx.core.http.impl.Http2ConnectionBase connection>;
virtualinvoke v11.<io.vertx.core.http.impl.Http2ConnectionBase: void onSettingsRead(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http2.Http2Settings)>(v1, v2);
v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: boolean settingsRead> = 1;
v12 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.vertx.core.Handler addHandler>;
if v12 == null goto label3;
v13 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.vertx.core.Handler addHandler>;
v14 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.vertx.core.http.impl.Http2ConnectionBase connection>;
interfaceinvoke v13.<io.vertx.core.Handler: void handle(java.lang.Object)>(v14);
label3:
v15 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.util.concurrent.Promise connectFuture>;
v16 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.vertx.core.http.impl.Http2ConnectionBase connection>;
interfaceinvoke v15.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setSuccess(java.lang.Object)>(v16);
return;
}
public void channelRead(io.netty.channel.ChannelHandlerContext, java.lang.Object) throws java.lang.Exception
{
io.netty.handler.codec.http2.Http2ConnectionDecoder v10, v12;
io.netty.channel.ChannelHandlerContext v1;
io.netty.buffer.ByteBuf v15, v19;
int v16, v20, v7;
io.netty.handler.codec.http2.Http2Stream v14;
boolean v17, v21, v3, v4, v8, v9;
io.vertx.core.http.impl.Http2ConnectionBase v18, v5;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
io.netty.handler.codec.http2.Http2Connection v13;
io.netty.handler.codec.http2.Http2Headers v6;
java.lang.Object v2;
io.netty.handler.codec.http2.Http2LocalFlowController v11;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: boolean read> = 1;
v3 = v2 instanceof io.netty.handler.codec.http2.Http2StreamFrame;
if v3 == 0 goto label2;
v4 = v2 instanceof io.netty.handler.codec.http2.Http2HeadersFrame;
if v4 == 0 goto label1;
v5 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.vertx.core.http.impl.Http2ConnectionBase connection>;
v6 = interfaceinvoke v2.<io.netty.handler.codec.http2.Http2HeadersFrame: io.netty.handler.codec.http2.Http2Headers headers()>();
v7 = interfaceinvoke v2.<io.netty.handler.codec.http2.Http2HeadersFrame: int padding()>();
v8 = interfaceinvoke v2.<io.netty.handler.codec.http2.Http2HeadersFrame: boolean isEndStream()>();
virtualinvoke v5.<io.vertx.core.http.impl.Http2ConnectionBase: void onHeadersRead(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.http2.Http2Headers,int,boolean)>(v1, 1, v6, v7, v8);
goto label3;
label1:
v9 = v2 instanceof io.netty.handler.codec.http2.Http2DataFrame;
if v9 == 0 goto label3;
v10 = virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.handler.codec.http2.Http2ConnectionDecoder decoder()>();
v11 = interfaceinvoke v10.<io.netty.handler.codec.http2.Http2ConnectionDecoder: io.netty.handler.codec.http2.Http2LocalFlowController flowController()>();
v12 = virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.handler.codec.http2.Http2ConnectionDecoder decoder()>();
v13 = interfaceinvoke v12.<io.netty.handler.codec.http2.Http2ConnectionDecoder: io.netty.handler.codec.http2.Http2Connection connection()>();
v14 = interfaceinvoke v13.<io.netty.handler.codec.http2.Http2Connection: io.netty.handler.codec.http2.Http2Stream stream(int)>(1);
v15 = interfaceinvoke v2.<io.netty.handler.codec.http2.Http2DataFrame: io.netty.buffer.ByteBuf content()>();
v16 = interfaceinvoke v2.<io.netty.handler.codec.http2.Http2DataFrame: int padding()>();
v17 = interfaceinvoke v2.<io.netty.handler.codec.http2.Http2DataFrame: boolean isEndStream()>();
interfaceinvoke v11.<io.netty.handler.codec.http2.Http2LocalFlowController: void receiveFlowControlledFrame(io.netty.handler.codec.http2.Http2Stream,io.netty.buffer.ByteBuf,int,boolean)>(v14, v15, v16, v17);
v18 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.vertx.core.http.impl.Http2ConnectionBase connection>;
v19 = interfaceinvoke v2.<io.netty.handler.codec.http2.Http2DataFrame: io.netty.buffer.ByteBuf content()>();
v20 = interfaceinvoke v2.<io.netty.handler.codec.http2.Http2DataFrame: int padding()>();
v21 = interfaceinvoke v2.<io.netty.handler.codec.http2.Http2DataFrame: boolean isEndStream()>();
virtualinvoke v18.<io.vertx.core.http.impl.Http2ConnectionBase: int onDataRead(io.netty.channel.ChannelHandlerContext,int,io.netty.buffer.ByteBuf,int,boolean)>(v1, 1, v19, v20, v21);
goto label3;
label2:
specialinvoke v0.<io.netty.handler.codec.http2.Http2ConnectionHandler: void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)>(v1, v2);
label3:
return;
}
public void channelReadComplete(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: boolean read> = 0;
specialinvoke v0.<io.netty.handler.codec.http2.Http2ConnectionHandler: void channelReadComplete(io.netty.channel.ChannelHandlerContext)>(v1);
return;
}
public void onPingRead(io.netty.channel.ChannelHandlerContext, long) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
java.lang.UnsupportedOperationException v3;
long v2;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: long;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>()>();
throw v3;
}
public void onPingAckRead(io.netty.channel.ChannelHandlerContext, long) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
java.lang.UnsupportedOperationException v3;
long v2;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: long;
v3 = new java.lang.UnsupportedOperationException;
specialinvoke v3.<java.lang.UnsupportedOperationException: void <init>()>();
throw v3;
}
public void onPushPromiseRead(io.netty.channel.ChannelHandlerContext, int, int, io.netty.handler.codec.http2.Http2Headers, int) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
java.lang.UnsupportedOperationException v6;
io.netty.handler.codec.http2.Http2Headers v4;
int v2, v3, v5;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 := @parameter3: io.netty.handler.codec.http2.Http2Headers;
v5 := @parameter4: int;
v6 = new java.lang.UnsupportedOperationException;
specialinvoke v6.<java.lang.UnsupportedOperationException: void <init>()>();
throw v6;
}
public void onGoAwayRead(io.netty.channel.ChannelHandlerContext, int, long, io.netty.buffer.ByteBuf) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
java.lang.UnsupportedOperationException v5;
io.netty.buffer.ByteBuf v4;
int v2;
long v3;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: int;
v3 := @parameter2: long;
v4 := @parameter3: io.netty.buffer.ByteBuf;
v5 = new java.lang.UnsupportedOperationException;
specialinvoke v5.<java.lang.UnsupportedOperationException: void <init>()>();
throw v5;
}
public void onWindowUpdateRead(io.netty.channel.ChannelHandlerContext, int, int) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
java.lang.UnsupportedOperationException v4;
int v2, v3;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = new java.lang.UnsupportedOperationException;
specialinvoke v4.<java.lang.UnsupportedOperationException: void <init>()>();
throw v4;
}
public void onUnknownFrame(io.netty.channel.ChannelHandlerContext, byte, int, io.netty.handler.codec.http2.Http2Flags, io.netty.buffer.ByteBuf) throws io.netty.handler.codec.http2.Http2Exception
{
io.netty.channel.ChannelHandlerContext v1;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
java.lang.UnsupportedOperationException v6;
byte v2;
io.netty.buffer.ByteBuf v5;
io.netty.handler.codec.http2.Http2Flags v4;
int v3;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: byte;
v3 := @parameter2: int;
v4 := @parameter3: io.netty.handler.codec.http2.Http2Flags;
v5 := @parameter4: io.netty.buffer.ByteBuf;
v6 = new java.lang.UnsupportedOperationException;
specialinvoke v6.<java.lang.UnsupportedOperationException: void <init>()>();
throw v6;
}
private void _writePriority(io.netty.handler.codec.http2.Http2Stream, int, short, boolean)
{
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
io.netty.handler.codec.http2.Http2ConnectionEncoder v5;
io.netty.channel.ChannelHandlerContext v6, v8;
short v3;
io.netty.channel.ChannelPromise v9;
int v2, v7;
io.netty.handler.codec.http2.Http2Stream v1;
boolean v4;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Stream;
v2 := @parameter1: int;
v3 := @parameter2: short;
v4 := @parameter3: boolean;
v5 = virtualinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.handler.codec.http2.Http2ConnectionEncoder encoder()>();
v6 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.channel.ChannelHandlerContext chctx>;
v7 = interfaceinvoke v1.<io.netty.handler.codec.http2.Http2Stream: int id()>();
v8 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.channel.ChannelHandlerContext chctx>;
v9 = interfaceinvoke v8.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelPromise newPromise()>();
interfaceinvoke v5.<io.netty.handler.codec.http2.Http2ConnectionEncoder: io.netty.channel.ChannelFuture writePriority(io.netty.channel.ChannelHandlerContext,int,int,short,boolean,io.netty.channel.ChannelPromise)>(v6, v7, v2, v3, v4, v9);
return;
}
void writePriority(io.netty.handler.codec.http2.Http2Stream, int, short, boolean)
{
io.netty.util.concurrent.EventExecutor v6;
io.vertx.core.http.impl.VertxHttp2ConnectionHandler v0;
java.lang.Runnable v8;
io.netty.channel.ChannelHandlerContext v5;
short v3;
int v2;
io.netty.handler.codec.http2.Http2Stream v1;
boolean v4, v7;
v0 := @this: io.vertx.core.http.impl.VertxHttp2ConnectionHandler;
v1 := @parameter0: io.netty.handler.codec.http2.Http2Stream;
v2 := @parameter1: int;
v3 := @parameter2: short;
v4 := @parameter3: boolean;
v5 = v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: io.netty.channel.ChannelHandlerContext chctx>;
v6 = interfaceinvoke v5.<io.netty.channel.ChannelHandlerContext: io.netty.util.concurrent.EventExecutor executor()>();
v7 = interfaceinvoke v6.<io.netty.util.concurrent.EventExecutor: boolean inEventLoop()>();
if v7 == 0 goto label1;
specialinvoke v0.<io.vertx.core.http.impl.VertxHttp2ConnectionHandler: void _writePriority(io.netty.handler.codec.http2.Http2Stream,int,short,boolean)>(v1, v2, v3, v4);
goto label2;
label1:
v8 = staticinvoke <io.vertx.core.http.impl.VertxHttp2ConnectionHandler$lambda_writePriority_6__980: java.lang.Runnable bootstrap$(io.vertx.core.http.impl.VertxHttp2ConnectionHandler,io.netty.handler.codec.http2.Http2Stream,int,short,boolean)>(v0, v1, v2, v3, v4);
interfaceinvoke v6.<io.netty.util.concurrent.EventExecutor: void execute(java.lang.Runnable)>(v8);
label2:
return;
}
}