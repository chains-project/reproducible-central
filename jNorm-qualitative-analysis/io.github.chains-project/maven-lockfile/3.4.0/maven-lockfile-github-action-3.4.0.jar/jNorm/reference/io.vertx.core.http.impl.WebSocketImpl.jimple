public class io.vertx.core.http.impl.WebSocketImpl extends io.vertx.core.http.impl.WebSocketImplBase implements io.vertx.core.http.WebSocket
{
private final io.vertx.core.http.impl.Http1xClientConnection conn;
private final long closingTimeoutMS;
public void <init>(io.vertx.core.impl.ContextInternal, io.vertx.core.http.impl.Http1xClientConnection, boolean, long, int, int, boolean)
{
io.vertx.core.impl.ContextInternal v1;
long v4, v9;
byte v8;
int v5, v6;
io.vertx.core.http.impl.Http1xClientConnection v2;
io.vertx.core.http.impl.WebSocketImpl v0;
boolean v3, v7;
v0 := @this: io.vertx.core.http.impl.WebSocketImpl;
v1 := @parameter0: io.vertx.core.impl.ContextInternal;
v2 := @parameter1: io.vertx.core.http.impl.Http1xClientConnection;
v3 := @parameter2: boolean;
v4 := @parameter3: long;
v5 := @parameter4: int;
v6 := @parameter5: int;
v7 := @parameter6: boolean;
specialinvoke v0.<io.vertx.core.http.impl.WebSocketImplBase: void <init>(io.vertx.core.impl.ContextInternal,io.vertx.core.http.impl.Http1xConnectionBase,boolean,int,int,boolean)>(v1, v2, v3, v5, v6, v7);
v0.<io.vertx.core.http.impl.WebSocketImpl: io.vertx.core.http.impl.Http1xClientConnection conn> = v2;
v8 = v4 cmp 0L;
if v8 < 0 goto label1;
v9 = v4 * 1000L;
goto label2;
label1:
v9 = -1L;
label2:
v0.<io.vertx.core.http.impl.WebSocketImpl: long closingTimeoutMS> = v9;
return;
}
protected void handleCloseConnection()
{
byte v2, v4;
long v1, v3, v5;
io.vertx.core.http.impl.WebSocketImpl v0;
v0 := @this: io.vertx.core.http.impl.WebSocketImpl;
v1 = v0.<io.vertx.core.http.impl.WebSocketImpl: long closingTimeoutMS>;
v2 = v1 cmp 0L;
if v2 != 0 goto label1;
virtualinvoke v0.<io.vertx.core.http.impl.WebSocketImpl: void closeConnection()>();
goto label2;
label1:
v3 = v0.<io.vertx.core.http.impl.WebSocketImpl: long closingTimeoutMS>;
v4 = v3 cmp 0L;
if v4 <= 0 goto label2;
v5 = v0.<io.vertx.core.http.impl.WebSocketImpl: long closingTimeoutMS>;
virtualinvoke v0.<io.vertx.core.http.impl.WebSocketImpl: void initiateConnectionCloseTimeout(long)>(v5);
label2:
return;
}
protected void handleClose(boolean)
{
io.vertx.core.spi.metrics.HttpClientMetrics v3;
java.lang.Object v5;
io.vertx.core.http.impl.Http1xClientConnection v2;
io.vertx.core.http.impl.WebSocketImpl v0;
boolean v1, v4;
v0 := @this: io.vertx.core.http.impl.WebSocketImpl;
v1 := @parameter0: boolean;
v2 = v0.<io.vertx.core.http.impl.WebSocketImpl: io.vertx.core.http.impl.Http1xClientConnection conn>;
v3 = virtualinvoke v2.<io.vertx.core.http.impl.Http1xClientConnection: io.vertx.core.spi.metrics.HttpClientMetrics metrics()>();
v4 = <io.vertx.core.spi.metrics.Metrics: boolean METRICS_ENABLED>;
if v4 == 0 goto label1;
if v3 == null goto label1;
v5 = virtualinvoke v0.<io.vertx.core.http.impl.WebSocketImpl: java.lang.Object getMetric()>();
interfaceinvoke v3.<io.vertx.core.spi.metrics.HttpClientMetrics: void disconnected(java.lang.Object)>(v5);
virtualinvoke v0.<io.vertx.core.http.impl.WebSocketImpl: void setMetric(java.lang.Object)>(null);
label1:
specialinvoke v0.<io.vertx.core.http.impl.WebSocketImplBase: void handleClose(boolean)>(v1);
return;
}
}