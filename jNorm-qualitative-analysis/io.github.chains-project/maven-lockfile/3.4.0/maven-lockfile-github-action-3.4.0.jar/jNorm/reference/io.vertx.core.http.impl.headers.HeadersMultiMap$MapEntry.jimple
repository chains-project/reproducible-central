final class io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry extends java.lang.Object implements java.util.Map$Entry
{
final int hash;
final java.lang.CharSequence key;
java.lang.CharSequence value;
io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry next;
io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry before;
io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry after;
final io.vertx.core.http.impl.headers.HeadersMultiMap this$0;
void <init>(io.vertx.core.http.impl.headers.HeadersMultiMap)
{
int v2;
io.vertx.core.http.impl.headers.HeadersMultiMap v1;
io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry;
v1 := @parameter0: io.vertx.core.http.impl.headers.HeadersMultiMap;
v0.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = (int) -1;
v0.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: int hash> = v2;
v0.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: java.lang.CharSequence key> = null;
v0.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: java.lang.CharSequence value> = null;
return;
}
void <init>(io.vertx.core.http.impl.headers.HeadersMultiMap, int, java.lang.CharSequence, java.lang.CharSequence)
{
java.lang.CharSequence v3, v4;
int v2;
io.vertx.core.http.impl.headers.HeadersMultiMap v1;
io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry;
v1 := @parameter0: io.vertx.core.http.impl.headers.HeadersMultiMap;
v2 := @parameter1: int;
v3 := @parameter2: java.lang.CharSequence;
v4 := @parameter3: java.lang.CharSequence;
v0.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: int hash> = v2;
v0.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: java.lang.CharSequence key> = v3;
v0.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: java.lang.CharSequence value> = v4;
return;
}
void remove()
{
io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry v0, v1, v2, v3, v4;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry;
v1 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry before>;
v2 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry after>;
v1.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry after> = v2;
v3 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry after>;
v4 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry before>;
v3.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry before> = v4;
v0.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry after> = null;
v0.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry before> = null;
return;
}
void addBefore(io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry)
{
io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry v0, v1, v2, v3, v4;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry;
v1 := @parameter0: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry;
v0.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry after> = v1;
v2 = v1.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry before>;
v0.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry before> = v2;
v3 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry before>;
v3.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry after> = v0;
v4 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry after>;
v4.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry before> = v0;
return;
}
public java.lang.CharSequence getKey()
{
java.lang.CharSequence v1;
io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry;
v1 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: java.lang.CharSequence key>;
return v1;
}
public java.lang.CharSequence getValue()
{
java.lang.CharSequence v1;
io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry;
v1 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: java.lang.CharSequence value>;
return v1;
}
public java.lang.CharSequence setValue(java.lang.CharSequence)
{
java.lang.CharSequence v1, v6;
java.util.function.BiConsumer v3, v5;
io.vertx.core.http.impl.headers.HeadersMultiMap v2, v4;
io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry;
v1 := @parameter0: java.lang.CharSequence;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "value");
v2 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap this$0>;
v3 = v2.<io.vertx.core.http.impl.headers.HeadersMultiMap: java.util.function.BiConsumer validator>;
if v3 == null goto label1;
v4 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: io.vertx.core.http.impl.headers.HeadersMultiMap this$0>;
v5 = v4.<io.vertx.core.http.impl.headers.HeadersMultiMap: java.util.function.BiConsumer validator>;
interfaceinvoke v5.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>("", v1);
label1:
v6 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: java.lang.CharSequence value>;
v0.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: java.lang.CharSequence value> = v1;
return v6;
}
public java.lang.String toString()
{
java.lang.CharSequence v1, v2;
java.lang.String v3;
io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry;
v1 = virtualinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: java.lang.CharSequence getKey()>();
v2 = virtualinvoke v0.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: java.lang.CharSequence getValue()>();
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.CharSequence,java.lang.CharSequence)>(v1, v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001=\u0001");
return v3;
}
private java.util.Map$Entry stringEntry()
{
java.lang.CharSequence v1, v3, v6, v8;
java.util.AbstractMap$SimpleEntry v5;
java.lang.String v7, v9;
boolean v2, v4;
io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry v0;
v0 := @this: io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry;
v1 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: java.lang.CharSequence key>;
v2 = v1 instanceof java.lang.String;
if v2 == 0 goto label1;
v3 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: java.lang.CharSequence value>;
v4 = v3 instanceof java.lang.String;
if v4 == 0 goto label1;
return v0;
label1:
v5 = new java.util.AbstractMap$SimpleEntry;
v6 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: java.lang.CharSequence key>;
v7 = virtualinvoke v6.<java.lang.Object: java.lang.String toString()>();
v8 = v0.<io.vertx.core.http.impl.headers.HeadersMultiMap$MapEntry: java.lang.CharSequence value>;
v9 = virtualinvoke v8.<java.lang.Object: java.lang.String toString()>();
specialinvoke v5.<java.util.AbstractMap$SimpleEntry: void <init>(java.lang.Object,java.lang.Object)>(v7, v9);
return v5;
}
}