public abstract class io.vertx.core.impl.ContextBase extends java.lang.Object implements io.vertx.core.impl.ContextInternal
{
private static final io.vertx.core.impl.logging.Logger log;
private static final java.lang.String DISABLE_TIMINGS_PROP_NAME;
static final boolean DISABLE_TIMINGS;
private final io.vertx.core.impl.VertxInternal owner;
private final io.vertx.core.json.JsonObject config;
private final io.vertx.core.impl.Deployment deployment;
private final io.vertx.core.impl.CloseFuture closeFuture;
private final java.lang.ClassLoader tccl;
private final io.netty.channel.EventLoop eventLoop;
private java.util.concurrent.ConcurrentMap data;
private java.util.concurrent.ConcurrentMap localData;
private volatile io.vertx.core.Handler exceptionHandler;
final io.vertx.core.impl.TaskQueue internalOrderedTasks;
final io.vertx.core.impl.WorkerPool internalWorkerPool;
final io.vertx.core.impl.WorkerPool workerPool;
final io.vertx.core.impl.TaskQueue orderedTasks;
static void setResultHandler(io.vertx.core.impl.ContextInternal, io.vertx.core.Future, io.vertx.core.Handler)
{
io.vertx.core.impl.ContextInternal v0;
io.vertx.core.Handler v2, v3;
io.vertx.core.Future v1;
v0 := @parameter0: io.vertx.core.impl.ContextInternal;
v1 := @parameter1: io.vertx.core.Future;
v2 := @parameter2: io.vertx.core.Handler;
if v2 == null goto label1;
interfaceinvoke v1.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v2);
goto label2;
label1:
virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = staticinvoke <io.vertx.core.impl.ContextBase$reportException__1529: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.ContextInternal)>(v0);
interfaceinvoke v1.<io.vertx.core.Future: io.vertx.core.Future onFailure(io.vertx.core.Handler)>(v3);
label2:
return;
}
protected void <init>(io.vertx.core.impl.VertxInternal, io.netty.channel.EventLoop, io.vertx.core.impl.WorkerPool, io.vertx.core.impl.WorkerPool, io.vertx.core.impl.Deployment, io.vertx.core.impl.CloseFuture, java.lang.ClassLoader)
{
io.vertx.core.impl.VertxInternal v1;
io.vertx.core.impl.WorkerPool v3, v4;
io.netty.channel.EventLoop v2;
io.vertx.core.impl.ContextBase v0;
io.vertx.core.impl.Deployment v5;
io.vertx.core.impl.CloseFuture v6;
io.vertx.core.impl.TaskQueue v10, v9;
io.vertx.core.json.JsonObject v8;
java.lang.ClassLoader v7;
v0 := @this: io.vertx.core.impl.ContextBase;
v1 := @parameter0: io.vertx.core.impl.VertxInternal;
v2 := @parameter1: io.netty.channel.EventLoop;
v3 := @parameter2: io.vertx.core.impl.WorkerPool;
v4 := @parameter3: io.vertx.core.impl.WorkerPool;
v5 := @parameter4: io.vertx.core.impl.Deployment;
v6 := @parameter5: io.vertx.core.impl.CloseFuture;
v7 := @parameter6: java.lang.ClassLoader;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.impl.ContextBase: io.vertx.core.impl.Deployment deployment> = v5;
if v5 == null goto label1;
v8 = interfaceinvoke v5.<io.vertx.core.impl.Deployment: io.vertx.core.json.JsonObject config()>();
goto label2;
label1:
v8 = new io.vertx.core.json.JsonObject;
specialinvoke v8.<io.vertx.core.json.JsonObject: void <init>()>();
label2:
v0.<io.vertx.core.impl.ContextBase: io.vertx.core.json.JsonObject config> = v8;
v0.<io.vertx.core.impl.ContextBase: io.netty.channel.EventLoop eventLoop> = v2;
v0.<io.vertx.core.impl.ContextBase: java.lang.ClassLoader tccl> = v7;
v0.<io.vertx.core.impl.ContextBase: io.vertx.core.impl.VertxInternal owner> = v1;
v0.<io.vertx.core.impl.ContextBase: io.vertx.core.impl.WorkerPool workerPool> = v4;
v0.<io.vertx.core.impl.ContextBase: io.vertx.core.impl.CloseFuture closeFuture> = v6;
v0.<io.vertx.core.impl.ContextBase: io.vertx.core.impl.WorkerPool internalWorkerPool> = v3;
v9 = new io.vertx.core.impl.TaskQueue;
specialinvoke v9.<io.vertx.core.impl.TaskQueue: void <init>()>();
v0.<io.vertx.core.impl.ContextBase: io.vertx.core.impl.TaskQueue orderedTasks> = v9;
v10 = new io.vertx.core.impl.TaskQueue;
specialinvoke v10.<io.vertx.core.impl.TaskQueue: void <init>()>();
v0.<io.vertx.core.impl.ContextBase: io.vertx.core.impl.TaskQueue internalOrderedTasks> = v10;
return;
}
public io.vertx.core.impl.Deployment getDeployment()
{
io.vertx.core.impl.ContextBase v0;
io.vertx.core.impl.Deployment v1;
v0 := @this: io.vertx.core.impl.ContextBase;
v1 = v0.<io.vertx.core.impl.ContextBase: io.vertx.core.impl.Deployment deployment>;
return v1;
}
public io.vertx.core.impl.CloseFuture closeFuture()
{
io.vertx.core.impl.ContextBase v0;
io.vertx.core.impl.CloseFuture v1;
v0 := @this: io.vertx.core.impl.ContextBase;
v1 = v0.<io.vertx.core.impl.ContextBase: io.vertx.core.impl.CloseFuture closeFuture>;
return v1;
}
public io.vertx.core.json.JsonObject config()
{
io.vertx.core.json.JsonObject v1;
io.vertx.core.impl.ContextBase v0;
v0 := @this: io.vertx.core.impl.ContextBase;
v1 = v0.<io.vertx.core.impl.ContextBase: io.vertx.core.json.JsonObject config>;
return v1;
}
public io.netty.channel.EventLoop nettyEventLoop()
{
io.vertx.core.impl.ContextBase v0;
io.netty.channel.EventLoop v1;
v0 := @this: io.vertx.core.impl.ContextBase;
v1 = v0.<io.vertx.core.impl.ContextBase: io.netty.channel.EventLoop eventLoop>;
return v1;
}
public io.vertx.core.impl.VertxInternal owner()
{
io.vertx.core.impl.ContextBase v0;
io.vertx.core.impl.VertxInternal v1;
v0 := @this: io.vertx.core.impl.ContextBase;
v1 = v0.<io.vertx.core.impl.ContextBase: io.vertx.core.impl.VertxInternal owner>;
return v1;
}
public io.vertx.core.Future executeBlockingInternal(io.vertx.core.Handler)
{
io.vertx.core.impl.ContextBase v0;
io.vertx.core.impl.TaskQueue v3;
io.vertx.core.impl.WorkerPool v2;
io.vertx.core.Handler v1;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.impl.ContextBase;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.impl.ContextBase: io.vertx.core.impl.WorkerPool internalWorkerPool>;
v3 = v0.<io.vertx.core.impl.ContextBase: io.vertx.core.impl.TaskQueue internalOrderedTasks>;
v4 = staticinvoke <io.vertx.core.impl.ContextBase: io.vertx.core.Future executeBlocking(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.TaskQueue)>(v0, v1, v2, v3);
return v4;
}
public io.vertx.core.Future executeBlockingInternal(io.vertx.core.Handler, boolean)
{
io.vertx.core.impl.ContextBase v0;
io.vertx.core.impl.TaskQueue v4;
io.vertx.core.impl.WorkerPool v3;
io.vertx.core.Handler v1;
io.vertx.core.Future v5;
boolean v2;
v0 := @this: io.vertx.core.impl.ContextBase;
v1 := @parameter0: io.vertx.core.Handler;
v2 := @parameter1: boolean;
v3 = v0.<io.vertx.core.impl.ContextBase: io.vertx.core.impl.WorkerPool internalWorkerPool>;
if v2 == 0 goto label1;
v4 = v0.<io.vertx.core.impl.ContextBase: io.vertx.core.impl.TaskQueue internalOrderedTasks>;
goto label2;
label1:
v4 = null;
label2:
v5 = staticinvoke <io.vertx.core.impl.ContextBase: io.vertx.core.Future executeBlocking(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.TaskQueue)>(v0, v1, v3, v4);
return v5;
}
public io.vertx.core.Future executeBlocking(io.vertx.core.Handler, boolean)
{
io.vertx.core.impl.ContextBase v0;
io.vertx.core.impl.TaskQueue v4;
io.vertx.core.impl.WorkerPool v3;
io.vertx.core.Handler v1;
io.vertx.core.Future v5;
boolean v2;
v0 := @this: io.vertx.core.impl.ContextBase;
v1 := @parameter0: io.vertx.core.Handler;
v2 := @parameter1: boolean;
v3 = v0.<io.vertx.core.impl.ContextBase: io.vertx.core.impl.WorkerPool workerPool>;
if v2 == 0 goto label1;
v4 = v0.<io.vertx.core.impl.ContextBase: io.vertx.core.impl.TaskQueue orderedTasks>;
goto label2;
label1:
v4 = null;
label2:
v5 = staticinvoke <io.vertx.core.impl.ContextBase: io.vertx.core.Future executeBlocking(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.TaskQueue)>(v0, v1, v3, v4);
return v5;
}
public io.vertx.core.Future executeBlocking(io.vertx.core.Handler, io.vertx.core.impl.TaskQueue)
{
io.vertx.core.impl.ContextBase v0;
io.vertx.core.impl.TaskQueue v2;
io.vertx.core.impl.WorkerPool v3;
io.vertx.core.Handler v1;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.impl.ContextBase;
v1 := @parameter0: io.vertx.core.Handler;
v2 := @parameter1: io.vertx.core.impl.TaskQueue;
v3 = v0.<io.vertx.core.impl.ContextBase: io.vertx.core.impl.WorkerPool workerPool>;
v4 = staticinvoke <io.vertx.core.impl.ContextBase: io.vertx.core.Future executeBlocking(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.TaskQueue)>(v0, v1, v3, v2);
return v4;
}
static io.vertx.core.Future executeBlocking(io.vertx.core.impl.ContextInternal, io.vertx.core.Handler, io.vertx.core.impl.WorkerPool, io.vertx.core.impl.TaskQueue)
{
io.vertx.core.impl.future.PromiseInternal v7;
io.vertx.core.impl.ContextInternal v0;
io.vertx.core.impl.WorkerPool v2;
io.vertx.core.Future v8;
java.lang.Runnable v9;
io.vertx.core.spi.metrics.PoolMetrics v4;
java.util.concurrent.RejectedExecutionException v11;
io.vertx.core.impl.TaskQueue v3;
java.lang.Object v5, v6;
io.vertx.core.Handler v1;
java.util.concurrent.ExecutorService v10;
v0 := @parameter0: io.vertx.core.impl.ContextInternal;
v1 := @parameter1: io.vertx.core.Handler;
v2 := @parameter2: io.vertx.core.impl.WorkerPool;
v3 := @parameter3: io.vertx.core.impl.TaskQueue;
v4 = virtualinvoke v2.<io.vertx.core.impl.WorkerPool: io.vertx.core.spi.metrics.PoolMetrics metrics()>();
if v4 == null goto label1;
v5 = interfaceinvoke v4.<io.vertx.core.spi.metrics.PoolMetrics: java.lang.Object submitted()>();
goto label2;
label1:
v5 = null;
label2:
v6 = v5;
v7 = interfaceinvoke v0.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
v8 = interfaceinvoke v7.<io.vertx.core.Promise: io.vertx.core.Future future()>();
label3:
v9 = staticinvoke <io.vertx.core.impl.ContextBase$lambda_executeBlocking_1__1530: java.lang.Runnable bootstrap$(io.vertx.core.spi.metrics.PoolMetrics,java.lang.Object,io.vertx.core.impl.ContextInternal,io.vertx.core.Promise,io.vertx.core.Handler,io.vertx.core.Future)>(v4, v5, v0, v7, v1, v8);
v10 = virtualinvoke v2.<io.vertx.core.impl.WorkerPool: java.util.concurrent.ExecutorService executor()>();
if v3 == null goto label4;
virtualinvoke v3.<io.vertx.core.impl.TaskQueue: void execute(java.lang.Runnable,java.util.concurrent.Executor)>(v9, v10);
goto label8;
label4:
interfaceinvoke v10.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(v9);
label5:
goto label8;
label6:
v11 := @caughtexception;
if v4 == null goto label7;
interfaceinvoke v4.<io.vertx.core.spi.metrics.PoolMetrics: void rejected(java.lang.Object)>(v6);
label7:
throw v11;
label8:
return v8;
catch java.util.concurrent.RejectedExecutionException from label3 to label5 with label6;
}
public io.vertx.core.spi.tracing.VertxTracer tracer()
{
io.vertx.core.spi.tracing.VertxTracer v2;
io.vertx.core.impl.ContextBase v0;
io.vertx.core.impl.VertxInternal v1;
v0 := @this: io.vertx.core.impl.ContextBase;
v1 = v0.<io.vertx.core.impl.ContextBase: io.vertx.core.impl.VertxInternal owner>;
v2 = interfaceinvoke v1.<io.vertx.core.impl.VertxInternal: io.vertx.core.spi.tracing.VertxTracer tracer()>();
return v2;
}
public java.lang.ClassLoader classLoader()
{
io.vertx.core.impl.ContextBase v0;
java.lang.ClassLoader v1;
v0 := @this: io.vertx.core.impl.ContextBase;
v1 = v0.<io.vertx.core.impl.ContextBase: java.lang.ClassLoader tccl>;
return v1;
}
public io.vertx.core.impl.WorkerPool workerPool()
{
io.vertx.core.impl.ContextBase v0;
io.vertx.core.impl.WorkerPool v1;
v0 := @this: io.vertx.core.impl.ContextBase;
v1 = v0.<io.vertx.core.impl.ContextBase: io.vertx.core.impl.WorkerPool workerPool>;
return v1;
}
public synchronized java.util.concurrent.ConcurrentMap contextData()
{
io.vertx.core.impl.ContextBase v0;
java.util.concurrent.ConcurrentHashMap v2;
java.util.concurrent.ConcurrentMap v1, v3;
v0 := @this: io.vertx.core.impl.ContextBase;
v1 = v0.<io.vertx.core.impl.ContextBase: java.util.concurrent.ConcurrentMap data>;
if v1 != null goto label1;
v2 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v0.<io.vertx.core.impl.ContextBase: java.util.concurrent.ConcurrentMap data> = v2;
label1:
v3 = v0.<io.vertx.core.impl.ContextBase: java.util.concurrent.ConcurrentMap data>;
return v3;
}
public synchronized java.util.concurrent.ConcurrentMap localContextData()
{
io.vertx.core.impl.ContextBase v0;
java.util.concurrent.ConcurrentHashMap v2;
java.util.concurrent.ConcurrentMap v1, v3;
v0 := @this: io.vertx.core.impl.ContextBase;
v1 = v0.<io.vertx.core.impl.ContextBase: java.util.concurrent.ConcurrentMap localData>;
if v1 != null goto label1;
v2 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v0.<io.vertx.core.impl.ContextBase: java.util.concurrent.ConcurrentMap localData> = v2;
label1:
v3 = v0.<io.vertx.core.impl.ContextBase: java.util.concurrent.ConcurrentMap localData>;
return v3;
}
public void reportException(java.lang.Throwable)
{
io.vertx.core.impl.logging.Logger v4;
java.lang.Throwable v1;
io.vertx.core.impl.ContextBase v0;
io.vertx.core.impl.VertxInternal v3;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.impl.ContextBase;
v1 := @parameter0: java.lang.Throwable;
v2 = v0.<io.vertx.core.impl.ContextBase: io.vertx.core.Handler exceptionHandler>;
if v2 != null goto label1;
v3 = v0.<io.vertx.core.impl.ContextBase: io.vertx.core.impl.VertxInternal owner>;
v2 = interfaceinvoke v3.<io.vertx.core.impl.VertxInternal: io.vertx.core.Handler exceptionHandler()>();
label1:
if v2 == null goto label2;
interfaceinvoke v2.<io.vertx.core.Handler: void handle(java.lang.Object)>(v1);
goto label3;
label2:
v4 = <io.vertx.core.impl.ContextBase: io.vertx.core.impl.logging.Logger log>;
interfaceinvoke v4.<io.vertx.core.impl.logging.Logger: void error(java.lang.Object,java.lang.Throwable)>("Unhandled exception", v1);
label3:
return;
}
public io.vertx.core.Context exceptionHandler(io.vertx.core.Handler)
{
io.vertx.core.impl.ContextBase v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.impl.ContextBase;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.impl.ContextBase: io.vertx.core.Handler exceptionHandler> = v1;
return v0;
}
public io.vertx.core.Handler exceptionHandler()
{
io.vertx.core.impl.ContextBase v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.impl.ContextBase;
v1 = v0.<io.vertx.core.impl.ContextBase: io.vertx.core.Handler exceptionHandler>;
return v1;
}
public final void runOnContext(io.vertx.core.Handler)
{
io.vertx.core.impl.ContextBase v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.impl.ContextBase;
v1 := @parameter0: io.vertx.core.Handler;
virtualinvoke v0.<io.vertx.core.impl.ContextBase: void runOnContext(io.vertx.core.impl.ContextInternal,io.vertx.core.Handler)>(v0, v1);
return;
}
protected abstract void runOnContext(io.vertx.core.impl.ContextInternal, io.vertx.core.Handler);
public void execute(java.lang.Runnable)
{
io.vertx.core.impl.ContextBase v0;
java.lang.Runnable v1;
v0 := @this: io.vertx.core.impl.ContextBase;
v1 := @parameter0: java.lang.Runnable;
virtualinvoke v0.<io.vertx.core.impl.ContextBase: void execute(io.vertx.core.impl.ContextInternal,java.lang.Runnable)>(v0, v1);
return;
}
protected abstract void execute(io.vertx.core.impl.ContextInternal, java.lang.Runnable);
public final void execute(java.lang.Object, io.vertx.core.Handler)
{
java.lang.Object v1;
io.vertx.core.impl.ContextBase v0;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.impl.ContextBase;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: io.vertx.core.Handler;
virtualinvoke v0.<io.vertx.core.impl.ContextBase: void execute(io.vertx.core.impl.ContextInternal,java.lang.Object,io.vertx.core.Handler)>(v0, v1, v2);
return;
}
protected abstract void execute(io.vertx.core.impl.ContextInternal, java.lang.Object, io.vertx.core.Handler);
public void emit(java.lang.Object, io.vertx.core.Handler)
{
java.lang.Object v1;
io.vertx.core.impl.ContextBase v0;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.impl.ContextBase;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: io.vertx.core.Handler;
virtualinvoke v0.<io.vertx.core.impl.ContextBase: void emit(io.vertx.core.impl.ContextInternal,java.lang.Object,io.vertx.core.Handler)>(v0, v1, v2);
return;
}
protected abstract void emit(io.vertx.core.impl.ContextInternal, java.lang.Object, io.vertx.core.Handler);
public io.vertx.core.impl.ContextInternal duplicate()
{
io.vertx.core.impl.ContextBase v0;
io.vertx.core.impl.DuplicatedContext v1;
v0 := @this: io.vertx.core.impl.ContextBase;
v1 = new io.vertx.core.impl.DuplicatedContext;
specialinvoke v1.<io.vertx.core.impl.DuplicatedContext: void <init>(io.vertx.core.impl.ContextBase)>(v0);
return v1;
}
static void <clinit>()
{
io.vertx.core.impl.logging.Logger v0;
boolean v1;
v0 = staticinvoke <io.vertx.core.impl.logging.LoggerFactory: io.vertx.core.impl.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/impl/ContextBase;");
<io.vertx.core.impl.ContextBase: io.vertx.core.impl.logging.Logger log> = v0;
v1 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("vertx.disableContextTimings");
<io.vertx.core.impl.ContextBase: boolean DISABLE_TIMINGS> = v1;
return;
}
}