public class io.vertx.core.impl.DeploymentManager extends java.lang.Object
{
private static final io.vertx.core.impl.logging.Logger log;
private final io.vertx.core.impl.VertxInternal vertx;
private final java.util.Map deployments;
public void <init>(io.vertx.core.impl.VertxInternal)
{
java.util.concurrent.ConcurrentHashMap v2;
io.vertx.core.impl.VertxInternal v1;
io.vertx.core.impl.DeploymentManager v0;
v0 := @this: io.vertx.core.impl.DeploymentManager;
v1 := @parameter0: io.vertx.core.impl.VertxInternal;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v0.<io.vertx.core.impl.DeploymentManager: java.util.Map deployments> = v2;
v0.<io.vertx.core.impl.DeploymentManager: io.vertx.core.impl.VertxInternal vertx> = v1;
return;
}
private java.lang.String generateDeploymentID()
{
java.lang.String v2;
java.util.UUID v1;
io.vertx.core.impl.DeploymentManager v0;
v0 := @this: io.vertx.core.impl.DeploymentManager;
v1 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();
v2 = virtualinvoke v1.<java.util.UUID: java.lang.String toString()>();
return v2;
}
public io.vertx.core.Future deployVerticle(java.util.concurrent.Callable, io.vertx.core.DeploymentOptions)
{
io.vertx.core.impl.VertxInternal v5;
io.vertx.core.impl.ContextInternal v6;
java.util.concurrent.Callable v1;
java.lang.IllegalArgumentException v4;
io.vertx.core.Future v11, v13;
java.util.function.Function v10, v12;
io.vertx.core.DeploymentOptions v2;
io.vertx.core.impl.DeploymentManager v0;
java.lang.Thread v8;
int v3;
java.lang.Class v9;
java.lang.ClassLoader v7;
v0 := @this: io.vertx.core.impl.DeploymentManager;
v1 := @parameter0: java.util.concurrent.Callable;
v2 := @parameter1: io.vertx.core.DeploymentOptions;
v3 = virtualinvoke v2.<io.vertx.core.DeploymentOptions: int getInstances()>();
if v3 >= 1 goto label1;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t specify < 1 instances to deploy");
throw v4;
label1:
virtualinvoke v2.<io.vertx.core.DeploymentOptions: void checkIsolationNotDefined()>();
v5 = v0.<io.vertx.core.impl.DeploymentManager: io.vertx.core.impl.VertxInternal vertx>;
v6 = interfaceinvoke v5.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v7 = virtualinvoke v2.<io.vertx.core.DeploymentOptions: java.lang.ClassLoader getClassLoader()>();
if v7 != null goto label2;
v8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v7 = virtualinvoke v8.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();
if v7 != null goto label2;
v9 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v7 = virtualinvoke v9.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
label2:
v10 = staticinvoke <io.vertx.core.impl.DeploymentManager$lambda_deployVerticle_0__1533: java.util.function.Function bootstrap$()>();
v11 = virtualinvoke v0.<io.vertx.core.impl.DeploymentManager: io.vertx.core.Future doDeploy(io.vertx.core.DeploymentOptions,java.util.function.Function,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,java.util.concurrent.Callable)>(v2, v10, v6, v6, v7, v1);
v12 = staticinvoke <io.vertx.core.impl.DeploymentManager$deploymentID__1534: java.util.function.Function bootstrap$()>();
v13 = interfaceinvoke v11.<io.vertx.core.Future: io.vertx.core.Future map(java.util.function.Function)>(v12);
return v13;
}
public io.vertx.core.Future undeployVerticle(java.lang.String)
{
java.lang.IllegalStateException v6;
io.vertx.core.impl.VertxInternal v4, v8;
io.vertx.core.impl.ContextInternal v5, v9;
io.vertx.core.Future v10, v7;
io.vertx.core.impl.DeploymentManager v0;
java.util.Map v2;
java.lang.Object v3;
java.lang.String v1;
v0 := @this: io.vertx.core.impl.DeploymentManager;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.impl.DeploymentManager: java.util.Map deployments>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
v4 = v0.<io.vertx.core.impl.DeploymentManager: io.vertx.core.impl.VertxInternal vertx>;
v5 = interfaceinvoke v4.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
if v3 != null goto label1;
v6 = new java.lang.IllegalStateException;
specialinvoke v6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unknown deployment");
v7 = interfaceinvoke v5.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future failedFuture(java.lang.Throwable)>(v6);
return v7;
label1:
v8 = v0.<io.vertx.core.impl.DeploymentManager: io.vertx.core.impl.VertxInternal vertx>;
v9 = interfaceinvoke v8.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v10 = interfaceinvoke v3.<io.vertx.core.impl.Deployment: io.vertx.core.Future doUndeploy(io.vertx.core.impl.ContextInternal)>(v9);
return v10;
}
public java.util.Set deployments()
{
io.vertx.core.impl.DeploymentManager v0;
java.util.Map v1;
java.util.Set v2, v3;
v0 := @this: io.vertx.core.impl.DeploymentManager;
v1 = v0.<io.vertx.core.impl.DeploymentManager: java.util.Map deployments>;
v2 = interfaceinvoke v1.<java.util.Map: java.util.Set keySet()>();
v3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(v2);
return v3;
}
public io.vertx.core.impl.Deployment getDeployment(java.lang.String)
{
io.vertx.core.impl.DeploymentManager v0;
java.util.Map v2;
java.lang.Object v3;
java.lang.String v1;
v0 := @this: io.vertx.core.impl.DeploymentManager;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.impl.DeploymentManager: java.util.Map deployments>;
v3 = interfaceinvoke v2.<java.util.Map: java.lang.Object get(java.lang.Object)>(v1);
return v3;
}
public io.vertx.core.Future undeployAll()
{
io.vertx.core.impl.ContextInternal v20, v26;
java.util.ArrayList v10;
java.util.HashSet v1;
io.vertx.core.CompositeFuture v22;
io.vertx.core.impl.DeploymentManager v0;
java.util.Map v2;
boolean v11, v13, v5, v8;
io.vertx.core.impl.VertxInternal v19, v25;
io.vertx.core.impl.future.PromiseInternal v21;
java.util.Iterator v12, v4;
io.vertx.core.Promise v15;
java.util.Set v3;
io.vertx.core.Future v16, v17, v23, v24, v27;
java.lang.Object v14, v6, v7, v9;
io.vertx.core.Handler v18;
v0 := @this: io.vertx.core.impl.DeploymentManager;
v1 = new java.util.HashSet;
specialinvoke v1.<java.util.HashSet: void <init>()>();
v2 = v0.<io.vertx.core.impl.DeploymentManager: java.util.Map deployments>;
v3 = interfaceinvoke v2.<java.util.Map: java.util.Set entrySet()>();
v4 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = interfaceinvoke v6.<java.util.Map$Entry: java.lang.Object getValue()>();
v8 = interfaceinvoke v7.<io.vertx.core.impl.Deployment: boolean isChild()>();
if v8 != 0 goto label1;
v9 = interfaceinvoke v6.<java.util.Map$Entry: java.lang.Object getKey()>();
interfaceinvoke v1.<java.util.Set: boolean add(java.lang.Object)>(v9);
goto label1;
label2:
v10 = new java.util.ArrayList;
specialinvoke v10.<java.util.ArrayList: void <init>()>();
v11 = interfaceinvoke v1.<java.util.Set: boolean isEmpty()>();
if v11 != 0 goto label5;
v12 = interfaceinvoke v1.<java.util.Set: java.util.Iterator iterator()>();
label3:
v13 = interfaceinvoke v12.<java.util.Iterator: boolean hasNext()>();
if v13 == 0 goto label4;
v14 = interfaceinvoke v12.<java.util.Iterator: java.lang.Object next()>();
v15 = staticinvoke <io.vertx.core.Promise: io.vertx.core.Promise promise()>();
v16 = interfaceinvoke v15.<io.vertx.core.Promise: io.vertx.core.Future future()>();
interfaceinvoke v10.<java.util.List: boolean add(java.lang.Object)>(v16);
v17 = virtualinvoke v0.<io.vertx.core.impl.DeploymentManager: io.vertx.core.Future undeployVerticle(java.lang.String)>(v14);
v18 = staticinvoke <io.vertx.core.impl.DeploymentManager$lambda_undeployAll_1__1535: io.vertx.core.Handler bootstrap$(io.vertx.core.Promise)>(v15);
interfaceinvoke v17.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v18);
goto label3;
label4:
v19 = v0.<io.vertx.core.impl.DeploymentManager: io.vertx.core.impl.VertxInternal vertx>;
v20 = interfaceinvoke v19.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v21 = interfaceinvoke v20.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
v22 = staticinvoke <io.vertx.core.CompositeFuture: io.vertx.core.CompositeFuture join(java.util.List)>(v10);
v23 = interfaceinvoke v22.<io.vertx.core.CompositeFuture: io.vertx.core.Future mapEmpty()>();
interfaceinvoke v23.<io.vertx.core.Future: io.vertx.core.Future onComplete(io.vertx.core.Handler)>(v21);
v24 = interfaceinvoke v21.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v24;
label5:
v25 = v0.<io.vertx.core.impl.DeploymentManager: io.vertx.core.impl.VertxInternal vertx>;
v26 = interfaceinvoke v25.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.ContextInternal getOrCreateContext()>();
v27 = interfaceinvoke v26.<io.vertx.core.impl.ContextInternal: io.vertx.core.Future succeededFuture()>();
return v27;
}
private void reportFailure(java.lang.Throwable, io.vertx.core.Context, io.vertx.core.Handler)
{
io.vertx.core.impl.logging.Logger v5;
java.lang.Throwable v1;
io.vertx.core.impl.DeploymentManager v0;
java.lang.String v6;
io.vertx.core.Handler v3;
io.vertx.core.Context v2;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.impl.DeploymentManager;
v1 := @parameter0: java.lang.Throwable;
v2 := @parameter1: io.vertx.core.Context;
v3 := @parameter2: io.vertx.core.Handler;
if v3 == null goto label1;
v4 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.Throwable)>(v1);
specialinvoke v0.<io.vertx.core.impl.DeploymentManager: void reportResult(io.vertx.core.Context,io.vertx.core.Handler,io.vertx.core.AsyncResult)>(v2, v3, v4);
goto label2;
label1:
v5 = <io.vertx.core.impl.DeploymentManager: io.vertx.core.impl.logging.Logger log>;
v6 = virtualinvoke v1.<java.lang.Throwable: java.lang.String getMessage()>();
interfaceinvoke v5.<io.vertx.core.impl.logging.Logger: void error(java.lang.Object,java.lang.Throwable)>(v6, v1);
label2:
return;
}
private void reportResult(io.vertx.core.Context, io.vertx.core.Handler, io.vertx.core.AsyncResult)
{
io.vertx.core.impl.DeploymentManager v0;
io.vertx.core.AsyncResult v3;
io.vertx.core.Handler v2, v4;
io.vertx.core.Context v1;
v0 := @this: io.vertx.core.impl.DeploymentManager;
v1 := @parameter0: io.vertx.core.Context;
v2 := @parameter1: io.vertx.core.Handler;
v3 := @parameter2: io.vertx.core.AsyncResult;
v4 = staticinvoke <io.vertx.core.impl.DeploymentManager$lambda_reportResult_2__1536: io.vertx.core.Handler bootstrap$(io.vertx.core.Handler,io.vertx.core.AsyncResult)>(v2, v3);
interfaceinvoke v1.<io.vertx.core.Context: void runOnContext(io.vertx.core.Handler)>(v4);
return;
}
io.vertx.core.Future doDeploy(io.vertx.core.DeploymentOptions, java.util.function.Function, io.vertx.core.impl.ContextInternal, io.vertx.core.impl.ContextInternal, java.lang.ClassLoader, java.util.concurrent.Callable)
{
java.lang.Object[] v18;
io.vertx.core.impl.ContextInternal v3, v4;
java.util.concurrent.Callable v6;
java.util.function.Function v2;
io.vertx.core.impl.DeploymentManager v0;
int v10, v15, v7;
io.vertx.core.Verticle[] v17;
java.util.IdentityHashMap v8;
java.util.Set v9;
io.vertx.core.Verticle v19;
io.vertx.core.Future v13, v14, v16, v21;
java.lang.Exception v12;
io.vertx.core.DeploymentOptions v1;
java.lang.Object v11, v20;
java.lang.ClassLoader v5;
v0 := @this: io.vertx.core.impl.DeploymentManager;
v1 := @parameter0: io.vertx.core.DeploymentOptions;
v2 := @parameter1: java.util.function.Function;
v3 := @parameter2: io.vertx.core.impl.ContextInternal;
v4 := @parameter3: io.vertx.core.impl.ContextInternal;
v5 := @parameter4: java.lang.ClassLoader;
v6 := @parameter5: java.util.concurrent.Callable;
v7 = virtualinvoke v1.<io.vertx.core.DeploymentOptions: int getInstances()>();
v8 = new java.util.IdentityHashMap;
specialinvoke v8.<java.util.IdentityHashMap: void <init>()>();
v9 = staticinvoke <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>(v8);
v10 = 0;
label1:
if v10 >= v7 goto label7;
label2:
v11 = interfaceinvoke v6.<java.util.concurrent.Callable: java.lang.Object call()>();
label3:
goto label5;
label4:
v12 := @caughtexception;
v13 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.Throwable)>(v12);
return v13;
label5:
if v11 != null goto label6;
v14 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.String)>("Supplied verticle is null");
return v14;
label6:
interfaceinvoke v9.<java.util.Set: boolean add(java.lang.Object)>(v11);
v10 = v10 + 1;
goto label1;
label7:
v15 = interfaceinvoke v9.<java.util.Set: int size()>();
if v15 == v7 goto label8;
v16 = staticinvoke <io.vertx.core.Future: io.vertx.core.Future failedFuture(java.lang.String)>("Same verticle supplied more than once");
return v16;
label8:
v17 = newarray (io.vertx.core.Verticle)[0];
v18 = interfaceinvoke v9.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(v17);
v19 = v18[0];
v20 = interfaceinvoke v2.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(v19);
v21 = specialinvoke v0.<io.vertx.core.impl.DeploymentManager: io.vertx.core.Future doDeploy(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.ContextInternal,java.lang.ClassLoader,io.vertx.core.Verticle[])>(v20, v1, v3, v4, v5, v18);
return v21;
catch java.lang.Exception from label2 to label3 with label4;
}
private transient io.vertx.core.Future doDeploy(java.lang.String, io.vertx.core.DeploymentOptions, io.vertx.core.impl.ContextInternal, io.vertx.core.impl.ContextInternal, java.lang.ClassLoader, io.vertx.core.Verticle[])
{
java.util.concurrent.atomic.AtomicInteger v12;
io.vertx.core.impl.DeploymentManager$VerticleHolder v29;
boolean v25;
io.vertx.core.impl.DeploymentManager$DeploymentImpl v11;
io.vertx.core.impl.logging.Logger v18;
io.vertx.core.Future v31;
io.vertx.core.impl.ContextBase v27;
io.vertx.core.impl.CloseFuture v17;
java.lang.ClassLoader v5;
io.vertx.core.impl.ContextInternal v3, v4;
java.util.concurrent.atomic.AtomicBoolean v13;
long v21;
io.vertx.core.impl.DeploymentManager v0;
int v14, v15, v20;
io.vertx.core.Verticle[] v6;
java.lang.String v1, v10, v8;
io.vertx.core.impl.VertxInternal v19, v26, v28;
io.vertx.core.impl.future.PromiseInternal v7;
io.vertx.core.Verticle v16;
io.vertx.core.impl.WorkerPool v23, v24;
java.util.concurrent.TimeUnit v22;
io.vertx.core.impl.Deployment v9;
io.vertx.core.DeploymentOptions v2;
io.vertx.core.Handler v30;
v0 := @this: io.vertx.core.impl.DeploymentManager;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.DeploymentOptions;
v3 := @parameter2: io.vertx.core.impl.ContextInternal;
v4 := @parameter3: io.vertx.core.impl.ContextInternal;
v5 := @parameter4: java.lang.ClassLoader;
v6 := @parameter5: io.vertx.core.Verticle[];
v7 = interfaceinvoke v4.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.future.PromiseInternal promise()>();
v8 = virtualinvoke v2.<io.vertx.core.DeploymentOptions: java.lang.String getWorkerPoolName()>();
v9 = interfaceinvoke v3.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.Deployment getDeployment()>();
v10 = specialinvoke v0.<io.vertx.core.impl.DeploymentManager: java.lang.String generateDeploymentID()>();
v11 = new io.vertx.core.impl.DeploymentManager$DeploymentImpl;
specialinvoke v11.<io.vertx.core.impl.DeploymentManager$DeploymentImpl: void <init>(io.vertx.core.impl.DeploymentManager,io.vertx.core.impl.Deployment,java.lang.String,java.lang.String,io.vertx.core.DeploymentOptions)>(v0, v9, v10, v1, v2);
v12 = new java.util.concurrent.atomic.AtomicInteger;
specialinvoke v12.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();
v13 = new java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v13.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();
v14 = lengthof v6;
v15 = 0;
label1:
if v15 >= v14 goto label6;
v16 = v6[v15];
v17 = new io.vertx.core.impl.CloseFuture;
v18 = <io.vertx.core.impl.DeploymentManager: io.vertx.core.impl.logging.Logger log>;
specialinvoke v17.<io.vertx.core.impl.CloseFuture: void <init>(io.vertx.core.impl.logging.Logger)>(v18);
if v8 == null goto label2;
v19 = v0.<io.vertx.core.impl.DeploymentManager: io.vertx.core.impl.VertxInternal vertx>;
v20 = virtualinvoke v2.<io.vertx.core.DeploymentOptions: int getWorkerPoolSize()>();
v21 = virtualinvoke v2.<io.vertx.core.DeploymentOptions: long getMaxWorkerExecuteTime()>();
v22 = virtualinvoke v2.<io.vertx.core.DeploymentOptions: java.util.concurrent.TimeUnit getMaxWorkerExecuteTimeUnit()>();
v23 = interfaceinvoke v19.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.WorkerPool createSharedWorkerPool(java.lang.String,int,long,java.util.concurrent.TimeUnit)>(v8, v20, v21, v22);
goto label3;
label2:
v23 = null;
label3:
v24 = v23;
v25 = virtualinvoke v2.<io.vertx.core.DeploymentOptions: boolean isWorker()>();
if v25 == 0 goto label4;
v26 = v0.<io.vertx.core.impl.DeploymentManager: io.vertx.core.impl.VertxInternal vertx>;
v27 = interfaceinvoke v26.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.WorkerContext createWorkerContext(io.vertx.core.impl.Deployment,io.vertx.core.impl.CloseFuture,io.vertx.core.impl.WorkerPool,java.lang.ClassLoader)>(v11, v17, v23, v5);
goto label5;
label4:
v28 = v0.<io.vertx.core.impl.DeploymentManager: io.vertx.core.impl.VertxInternal vertx>;
v27 = interfaceinvoke v28.<io.vertx.core.impl.VertxInternal: io.vertx.core.impl.EventLoopContext createEventLoopContext(io.vertx.core.impl.Deployment,io.vertx.core.impl.CloseFuture,io.vertx.core.impl.WorkerPool,java.lang.ClassLoader)>(v11, v17, v23, v5);
label5:
v29 = new io.vertx.core.impl.DeploymentManager$VerticleHolder;
specialinvoke v29.<io.vertx.core.impl.DeploymentManager$VerticleHolder: void <init>(io.vertx.core.Verticle,io.vertx.core.impl.ContextBase,io.vertx.core.impl.WorkerPool,io.vertx.core.impl.CloseFuture)>(v16, v27, v24, v17);
virtualinvoke v11.<io.vertx.core.impl.DeploymentManager$DeploymentImpl: void addVerticle(io.vertx.core.impl.DeploymentManager$VerticleHolder)>(v29);
v30 = staticinvoke <io.vertx.core.impl.DeploymentManager$lambda_doDeploy_5__1537: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.DeploymentManager,io.vertx.core.Verticle,io.vertx.core.impl.ContextBase,io.vertx.core.impl.Deployment,io.vertx.core.impl.DeploymentManager$DeploymentImpl,io.vertx.core.Promise,java.lang.String,java.util.concurrent.atomic.AtomicInteger,io.vertx.core.Verticle[],java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.impl.ContextInternal,io.vertx.core.impl.DeploymentManager$VerticleHolder)>(v0, v16, v27, v9, v11, v7, v10, v12, v6, v13, v4, v29);
virtualinvoke v27.<io.vertx.core.impl.ContextBase: void runOnContext(io.vertx.core.Handler)>(v30);
v15 = v15 + 1;
goto label1;
label6:
v31 = interfaceinvoke v7.<io.vertx.core.Promise: io.vertx.core.Future future()>();
return v31;
}
static void <clinit>()
{
io.vertx.core.impl.logging.Logger v0;
v0 = staticinvoke <io.vertx.core.impl.logging.LoggerFactory: io.vertx.core.impl.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/impl/DeploymentManager;");
<io.vertx.core.impl.DeploymentManager: io.vertx.core.impl.logging.Logger log> = v0;
return;
}
}