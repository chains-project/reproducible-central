class io.vertx.core.impl.VertxImpl$InternalTimerHandler extends java.lang.Object implements io.vertx.core.Handler, io.vertx.core.Closeable, java.lang.Runnable
{
private final io.vertx.core.Handler handler;
private final boolean periodic;
private final long id;
private final io.vertx.core.impl.ContextInternal context;
private final java.util.concurrent.atomic.AtomicBoolean disposed;
private volatile java.util.concurrent.Future future;
final io.vertx.core.impl.VertxImpl this$0;
void <init>(io.vertx.core.impl.VertxImpl, long, io.vertx.core.Handler, boolean, io.vertx.core.impl.ContextInternal)
{
io.vertx.core.impl.VertxImpl v1;
io.vertx.core.impl.VertxImpl$InternalTimerHandler v0;
io.vertx.core.impl.ContextInternal v5;
java.util.concurrent.atomic.AtomicBoolean v6;
long v2;
io.vertx.core.Handler v3;
boolean v4;
v0 := @this: io.vertx.core.impl.VertxImpl$InternalTimerHandler;
v1 := @parameter0: io.vertx.core.impl.VertxImpl;
v2 := @parameter1: long;
v3 := @parameter2: io.vertx.core.Handler;
v4 := @parameter3: boolean;
v5 := @parameter4: io.vertx.core.impl.ContextInternal;
v0.<io.vertx.core.impl.VertxImpl$InternalTimerHandler: io.vertx.core.impl.VertxImpl this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v6 = new java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v6.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();
v0.<io.vertx.core.impl.VertxImpl$InternalTimerHandler: java.util.concurrent.atomic.AtomicBoolean disposed> = v6;
v0.<io.vertx.core.impl.VertxImpl$InternalTimerHandler: io.vertx.core.impl.ContextInternal context> = v5;
v0.<io.vertx.core.impl.VertxImpl$InternalTimerHandler: long id> = v2;
v0.<io.vertx.core.impl.VertxImpl$InternalTimerHandler: io.vertx.core.Handler handler> = v3;
v0.<io.vertx.core.impl.VertxImpl$InternalTimerHandler: boolean periodic> = v4;
return;
}
public void run()
{
io.vertx.core.impl.ContextInternal v1;
io.vertx.core.impl.VertxImpl$InternalTimerHandler v0;
v0 := @this: io.vertx.core.impl.VertxImpl$InternalTimerHandler;
v1 = v0.<io.vertx.core.impl.VertxImpl$InternalTimerHandler: io.vertx.core.impl.ContextInternal context>;
interfaceinvoke v1.<io.vertx.core.impl.ContextInternal: void emit(io.vertx.core.Handler)>(v0);
return;
}
public void handle(java.lang.Void)
{
java.lang.Throwable v18;
io.vertx.core.impl.ContextInternal v17, v19;
java.util.concurrent.atomic.AtomicBoolean v3, v8;
long v12, v15, v6;
java.util.concurrent.ConcurrentMap v11;
java.lang.Long v13, v16, v7;
io.vertx.core.impl.VertxImpl$InternalTimerHandler v0;
boolean v2, v4, v9;
java.lang.Void v1;
io.vertx.core.impl.VertxImpl v10;
io.vertx.core.Handler v14, v5;
v0 := @this: io.vertx.core.impl.VertxImpl$InternalTimerHandler;
v1 := @parameter0: java.lang.Void;
v2 = v0.<io.vertx.core.impl.VertxImpl$InternalTimerHandler: boolean periodic>;
if v2 == 0 goto label1;
v3 = v0.<io.vertx.core.impl.VertxImpl$InternalTimerHandler: java.util.concurrent.atomic.AtomicBoolean disposed>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();
if v4 != 0 goto label5;
v5 = v0.<io.vertx.core.impl.VertxImpl$InternalTimerHandler: io.vertx.core.Handler handler>;
v6 = v0.<io.vertx.core.impl.VertxImpl$InternalTimerHandler: long id>;
v7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v6);
interfaceinvoke v5.<io.vertx.core.Handler: void handle(java.lang.Object)>(v7);
goto label5;
label1:
v8 = v0.<io.vertx.core.impl.VertxImpl$InternalTimerHandler: java.util.concurrent.atomic.AtomicBoolean disposed>;
v9 = virtualinvoke v8.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);
if v9 == 0 goto label5;
v10 = v0.<io.vertx.core.impl.VertxImpl$InternalTimerHandler: io.vertx.core.impl.VertxImpl this$0>;
v11 = v10.<io.vertx.core.impl.VertxImpl: java.util.concurrent.ConcurrentMap timeouts>;
v12 = v0.<io.vertx.core.impl.VertxImpl$InternalTimerHandler: long id>;
v13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v12);
interfaceinvoke v11.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(v13);
label2:
v14 = v0.<io.vertx.core.impl.VertxImpl$InternalTimerHandler: io.vertx.core.Handler handler>;
v15 = v0.<io.vertx.core.impl.VertxImpl$InternalTimerHandler: long id>;
v16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v15);
interfaceinvoke v14.<io.vertx.core.Handler: void handle(java.lang.Object)>(v16);
label3:
v17 = v0.<io.vertx.core.impl.VertxImpl$InternalTimerHandler: io.vertx.core.impl.ContextInternal context>;
interfaceinvoke v17.<io.vertx.core.impl.ContextInternal: void removeCloseHook(io.vertx.core.Closeable)>(v0);
goto label5;
label4:
v18 := @caughtexception;
v19 = v0.<io.vertx.core.impl.VertxImpl$InternalTimerHandler: io.vertx.core.impl.ContextInternal context>;
interfaceinvoke v19.<io.vertx.core.impl.ContextInternal: void removeCloseHook(io.vertx.core.Closeable)>(v0);
throw v18;
label5:
return;
catch java.lang.Throwable from label2 to label3 with label4;
}
private boolean cancel()
{
io.vertx.core.impl.VertxImpl$InternalTimerHandler v0;
io.vertx.core.impl.ContextInternal v2, v4;
boolean v1, v3;
v0 := @this: io.vertx.core.impl.VertxImpl$InternalTimerHandler;
v1 = specialinvoke v0.<io.vertx.core.impl.VertxImpl$InternalTimerHandler: boolean tryCancel()>();
if v1 == 0 goto label1;
v2 = v0.<io.vertx.core.impl.VertxImpl$InternalTimerHandler: io.vertx.core.impl.ContextInternal context>;
v3 = interfaceinvoke v2.<io.vertx.core.impl.ContextInternal: boolean isDeployment()>();
if v3 == 0 goto label1;
v4 = v0.<io.vertx.core.impl.VertxImpl$InternalTimerHandler: io.vertx.core.impl.ContextInternal context>;
interfaceinvoke v4.<io.vertx.core.impl.ContextInternal: void removeCloseHook(io.vertx.core.Closeable)>(v0);
label1:
return v1;
}
private boolean tryCancel()
{
io.vertx.core.impl.VertxImpl v3;
java.util.concurrent.atomic.AtomicBoolean v1;
long v5;
java.util.concurrent.ConcurrentMap v4;
java.util.concurrent.Future v7;
java.lang.Long v6;
io.vertx.core.impl.VertxImpl$InternalTimerHandler v0;
boolean v2;
v0 := @this: io.vertx.core.impl.VertxImpl$InternalTimerHandler;
v1 = v0.<io.vertx.core.impl.VertxImpl$InternalTimerHandler: java.util.concurrent.atomic.AtomicBoolean disposed>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);
if v2 == 0 goto label1;
v3 = v0.<io.vertx.core.impl.VertxImpl$InternalTimerHandler: io.vertx.core.impl.VertxImpl this$0>;
v4 = v3.<io.vertx.core.impl.VertxImpl: java.util.concurrent.ConcurrentMap timeouts>;
v5 = v0.<io.vertx.core.impl.VertxImpl$InternalTimerHandler: long id>;
v6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v5);
interfaceinvoke v4.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(v6);
v7 = v0.<io.vertx.core.impl.VertxImpl$InternalTimerHandler: java.util.concurrent.Future future>;
interfaceinvoke v7.<java.util.concurrent.Future: boolean cancel(boolean)>(0);
return 1;
label1:
return 0;
}
public void close(io.vertx.core.Promise)
{
io.vertx.core.impl.VertxImpl$InternalTimerHandler v0;
io.vertx.core.Promise v1;
v0 := @this: io.vertx.core.impl.VertxImpl$InternalTimerHandler;
v1 := @parameter0: io.vertx.core.Promise;
specialinvoke v0.<io.vertx.core.impl.VertxImpl$InternalTimerHandler: boolean tryCancel()>();
interfaceinvoke v1.<io.vertx.core.Promise: void complete()>();
return;
}
}