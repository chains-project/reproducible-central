public class io.vertx.core.impl.cpu.CpuCoreSensor extends java.lang.Object
{
private static final java.lang.String CPUS_ALLOWED;
private static final byte[] BITS;
public void <init>()
{
io.vertx.core.impl.cpu.CpuCoreSensor v0;
v0 := @this: io.vertx.core.impl.cpu.CpuCoreSensor;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static int availableProcessors()
{
int v3, v4;
java.lang.Object v2;
java.security.PrivilegedAction v1;
java.lang.SecurityManager v0;
v0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();
if v0 == null goto label1;
v1 = staticinvoke <io.vertx.core.impl.cpu.CpuCoreSensor$lambda_availableProcessors_0__1561: java.security.PrivilegedAction bootstrap$()>();
v2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>(v1);
v3 = virtualinvoke v2.<java.lang.Integer: int intValue()>();
return v3;
label1:
v4 = staticinvoke <io.vertx.core.impl.cpu.CpuCoreSensor: int determineProcessors()>();
return v4;
}
private static int determineProcessors()
{
java.lang.Runtime v0;
int v1, v2, v6;
java.io.File v4;
java.lang.Exception v5;
boolean v3;
v0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();
v1 = virtualinvoke v0.<java.lang.Runtime: int availableProcessors()>();
v2 = 0;
v3 = staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: boolean isLinux()>();
if v3 != 0 goto label1;
return v1;
label1:
v4 = new java.io.File;
specialinvoke v4.<java.io.File: void <init>(java.lang.String)>("/proc/self/status");
v2 = staticinvoke <io.vertx.core.impl.cpu.CpuCoreSensor: int readCPUMask(java.io.File)>(v4);
label2:
goto label4;
label3:
v5 := @caughtexception;
label4:
if v2 <= 0 goto label5;
v6 = staticinvoke <java.lang.Math: int min(int,int)>(v1, v2);
goto label6;
label5:
v6 = v1;
label6:
return v6;
catch java.lang.Exception from label1 to label2 with label3;
}
protected static int readCPUMask(java.io.File) throws java.io.IOException
{
java.lang.Throwable v27, v28, v29;
byte[] v15, v18, v22;
byte v17, v21, v25;
java.nio.charset.Charset v5;
int v11, v12, v13, v16, v19, v2, v20, v23, v24, v26, v30, v9;
java.lang.String v10, v7;
boolean v1, v8;
char v14;
java.io.FileInputStream v3;
java.io.InputStreamReader v4;
java.io.File v0;
java.io.BufferedReader v6;
v0 := @parameter0: java.io.File;
if v0 == null goto label01;
v1 = virtualinvoke v0.<java.io.File: boolean exists()>();
if v1 != 0 goto label02;
label01:
v2 = (int) -1;
return v2;
label02:
v3 = new java.io.FileInputStream;
specialinvoke v3.<java.io.FileInputStream: void <init>(java.io.File)>(v0);
label03:
v4 = new java.io.InputStreamReader;
v5 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>;
specialinvoke v4.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>(v3, v5);
label04:
v6 = new java.io.BufferedReader;
specialinvoke v6.<java.io.BufferedReader: void <init>(java.io.Reader)>(v4);
label05:
v7 = virtualinvoke v6.<java.io.BufferedReader: java.lang.String readLine()>();
if v7 == null goto label14;
v8 = virtualinvoke v7.<java.lang.String: boolean startsWith(java.lang.String)>("Cpus_allowed:");
if v8 == 0 goto label05;
v9 = 0;
v10 = "Cpus_allowed:";
v11 = virtualinvoke v10.<java.lang.String: int length()>();
v12 = v11;
label06:
v13 = virtualinvoke v7.<java.lang.String: int length()>();
if v12 >= v13 goto label10;
v14 = virtualinvoke v7.<java.lang.String: char charAt(int)>(v12);
if v14 < 48 goto label07;
if v14 > 57 goto label07;
v15 = <io.vertx.core.impl.cpu.CpuCoreSensor: byte[] BITS>;
v16 = v14 - 48;
v17 = v15[v16];
v9 = v9 + v17;
goto label09;
label07:
if v14 < 97 goto label08;
if v14 > 102 goto label08;
v18 = <io.vertx.core.impl.cpu.CpuCoreSensor: byte[] BITS>;
v19 = v14 - 97;
v20 = v19 + 10;
v21 = v18[v20];
v9 = v9 + v21;
goto label09;
label08:
if v14 < 65 goto label09;
if v14 > 70 goto label09;
v22 = <io.vertx.core.impl.cpu.CpuCoreSensor: byte[] BITS>;
v23 = v14 - 65;
v24 = v23 + 10;
v25 = v22[v24];
v9 = v9 + v25;
label09:
v12 = v12 + 1;
goto label06;
label10:
v26 = v9;
label11:
virtualinvoke v6.<java.io.BufferedReader: void close()>();
label12:
virtualinvoke v4.<java.io.InputStreamReader: void close()>();
label13:
virtualinvoke v3.<java.io.FileInputStream: void close()>();
return v26;
label14:
virtualinvoke v6.<java.io.BufferedReader: void close()>();
goto label16;
label15:
v27 := @caughtexception;
throw v27;
label16:
virtualinvoke v4.<java.io.InputStreamReader: void close()>();
goto label18;
label17:
v28 := @caughtexception;
throw v28;
label18:
virtualinvoke v3.<java.io.FileInputStream: void close()>();
goto label20;
label19:
v29 := @caughtexception;
throw v29;
label20:
v30 = (int) -1;
return v30;
catch java.lang.Throwable from label05 to label11 with label15;
catch java.lang.Throwable from label04 to label12 with label17;
catch java.lang.Throwable from label14 to label16 with label17;
catch java.lang.Throwable from label03 to label13 with label19;
catch java.lang.Throwable from label14 to label18 with label19;
}
static void <clinit>()
{
byte[] v0;
v0 = newarray (byte)[16];
v0[0] = 0;
v0[1] = 1;
v0[2] = 1;
v0[3] = 2;
v0[4] = 1;
v0[5] = 2;
v0[6] = 2;
v0[7] = 3;
v0[8] = 1;
v0[9] = 2;
v0[10] = 2;
v0[11] = 3;
v0[12] = 2;
v0[13] = 3;
v0[14] = 3;
v0[15] = 4;
<io.vertx.core.impl.cpu.CpuCoreSensor: byte[] BITS> = v0;
return;
}
}