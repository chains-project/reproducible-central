public class io.vertx.core.impl.launcher.commands.VersionCommand extends io.vertx.core.spi.launcher.DefaultCommand
{
private static final io.vertx.core.impl.logging.Logger log;
private static java.lang.String version;
public void <init>()
{
io.vertx.core.impl.launcher.commands.VersionCommand v0;
v0 := @this: io.vertx.core.impl.launcher.commands.VersionCommand;
specialinvoke v0.<io.vertx.core.spi.launcher.DefaultCommand: void <init>()>();
return;
}
public void run() throws io.vertx.core.cli.CLIException
{
io.vertx.core.impl.logging.Logger v1;
java.lang.String v2;
io.vertx.core.impl.launcher.commands.VersionCommand v0;
v0 := @this: io.vertx.core.impl.launcher.commands.VersionCommand;
v1 = <io.vertx.core.impl.launcher.commands.VersionCommand: io.vertx.core.impl.logging.Logger log>;
v2 = staticinvoke <io.vertx.core.impl.launcher.commands.VersionCommand: java.lang.String getVersion()>();
interfaceinvoke v1.<io.vertx.core.impl.logging.Logger: void info(java.lang.Object)>(v2);
return;
}
public static java.lang.String getVersion()
{
java.lang.Throwable v12, v13;
java.lang.IllegalStateException v15, v5;
java.util.Scanner v6, v7;
java.lang.String v0, v1, v10, v11, v16, v9;
boolean v8;
java.io.IOException v14;
java.lang.Class v2;
java.lang.ClassLoader v3;
java.io.InputStream v4;
v0 = <io.vertx.core.impl.launcher.commands.VersionCommand: java.lang.String version>;
if v0 == null goto label01;
v1 = <io.vertx.core.impl.launcher.commands.VersionCommand: java.lang.String version>;
return v1;
label01:
v2 = class "Lio/vertx/core/impl/launcher/commands/VersionCommand;";
v3 = virtualinvoke v2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
v4 = virtualinvoke v3.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("META-INF/vertx/vertx-version.txt");
label02:
if v4 != null goto label03;
v5 = new java.lang.IllegalStateException;
specialinvoke v5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot find vertx-version.txt on classpath");
throw v5;
label03:
v6 = new java.util.Scanner;
specialinvoke v6.<java.util.Scanner: void <init>(java.io.InputStream,java.lang.String)>(v4, "UTF-8");
v7 = virtualinvoke v6.<java.util.Scanner: java.util.Scanner useDelimiter(java.lang.String)>("\\A");
label04:
v8 = virtualinvoke v7.<java.util.Scanner: boolean hasNext()>();
if v8 == 0 goto label05;
v9 = virtualinvoke v7.<java.util.Scanner: java.lang.String next()>();
v10 = virtualinvoke v9.<java.lang.String: java.lang.String trim()>();
goto label06;
label05:
v10 = "";
label06:
<io.vertx.core.impl.launcher.commands.VersionCommand: java.lang.String version> = v10;
v11 = v10;
label07:
virtualinvoke v7.<java.util.Scanner: void close()>();
label08:
virtualinvoke v4.<java.io.InputStream: void close()>();
label09:
return v11;
label10:
v12 := @caughtexception;
throw v12;
label11:
v13 := @caughtexception;
throw v13;
label12:
v14 := @caughtexception;
v15 = new java.lang.IllegalStateException;
v16 = virtualinvoke v14.<java.io.IOException: java.lang.String getMessage()>();
specialinvoke v15.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v16);
throw v15;
catch java.lang.Throwable from label04 to label07 with label10;
catch java.lang.Throwable from label02 to label08 with label11;
catch java.io.IOException from label01 to label09 with label12;
}
static void <clinit>()
{
io.vertx.core.impl.logging.Logger v0;
v0 = staticinvoke <io.vertx.core.impl.logging.LoggerFactory: io.vertx.core.impl.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/impl/launcher/commands/VersionCommand;");
<io.vertx.core.impl.launcher.commands.VersionCommand: io.vertx.core.impl.logging.Logger log> = v0;
return;
}
}