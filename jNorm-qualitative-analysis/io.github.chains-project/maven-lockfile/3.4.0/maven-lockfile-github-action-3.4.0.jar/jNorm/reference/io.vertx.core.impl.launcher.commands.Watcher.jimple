public class io.vertx.core.impl.launcher.commands.Watcher extends java.lang.Object implements java.lang.Runnable
{
private static final io.vertx.core.impl.logging.Logger LOGGER;
private final long gracePeriod;
private final java.util.Map fileMap;
private final java.util.Set filesToWatch;
private final long scanPeriod;
private final java.util.List roots;
private final java.io.File cwd;
private long lastChange;
private final java.util.List includes;
private final io.vertx.core.Handler deploy;
private final io.vertx.core.Handler undeploy;
private final java.lang.String cmd;
private volatile boolean closed;
public void <init>(java.io.File, java.util.List, io.vertx.core.Handler, io.vertx.core.Handler, java.lang.String, long, long)
{
long v6, v7;
java.util.HashSet v9;
java.util.LinkedHashMap v8;
java.lang.String v15, v5;
io.vertx.core.impl.logging.Logger v13;
java.io.File v1;
java.util.List v10, v11, v12, v14, v16, v2;
io.vertx.core.impl.launcher.commands.Watcher v0;
io.vertx.core.Handler v3, v4;
v0 := @this: io.vertx.core.impl.launcher.commands.Watcher;
v1 := @parameter0: java.io.File;
v2 := @parameter1: java.util.List;
v3 := @parameter2: io.vertx.core.Handler;
v4 := @parameter3: io.vertx.core.Handler;
v5 := @parameter4: java.lang.String;
v6 := @parameter5: long;
v7 := @parameter6: long;
specialinvoke v0.<java.lang.Object: void <init>()>();
v8 = new java.util.LinkedHashMap;
specialinvoke v8.<java.util.LinkedHashMap: void <init>()>();
v0.<io.vertx.core.impl.launcher.commands.Watcher: java.util.Map fileMap> = v8;
v9 = new java.util.HashSet;
specialinvoke v9.<java.util.HashSet: void <init>()>();
v0.<io.vertx.core.impl.launcher.commands.Watcher: java.util.Set filesToWatch> = v9;
v0.<io.vertx.core.impl.launcher.commands.Watcher: long lastChange> = -1L;
v0.<io.vertx.core.impl.launcher.commands.Watcher: long gracePeriod> = v6;
v10 = specialinvoke v0.<io.vertx.core.impl.launcher.commands.Watcher: java.util.List sanitizeIncludePatterns(java.util.List)>(v2);
v0.<io.vertx.core.impl.launcher.commands.Watcher: java.util.List includes> = v10;
v11 = v0.<io.vertx.core.impl.launcher.commands.Watcher: java.util.List includes>;
v12 = staticinvoke <io.vertx.core.impl.launcher.commands.Watcher: java.util.List extractRoots(java.io.File,java.util.List)>(v1, v11);
v0.<io.vertx.core.impl.launcher.commands.Watcher: java.util.List roots> = v12;
v0.<io.vertx.core.impl.launcher.commands.Watcher: java.io.File cwd> = v1;
v13 = <io.vertx.core.impl.launcher.commands.Watcher: io.vertx.core.impl.logging.Logger LOGGER>;
v14 = v0.<io.vertx.core.impl.launcher.commands.Watcher: java.util.List roots>;
v15 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.util.List)>(v14) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Watched paths: \u0001");
interfaceinvoke v13.<io.vertx.core.impl.logging.Logger: void info(java.lang.Object)>(v15);
v0.<io.vertx.core.impl.launcher.commands.Watcher: io.vertx.core.Handler deploy> = v3;
v0.<io.vertx.core.impl.launcher.commands.Watcher: io.vertx.core.Handler undeploy> = v4;
v0.<io.vertx.core.impl.launcher.commands.Watcher: java.lang.String cmd> = v5;
v0.<io.vertx.core.impl.launcher.commands.Watcher: long scanPeriod> = v7;
v16 = v0.<io.vertx.core.impl.launcher.commands.Watcher: java.util.List roots>;
specialinvoke v0.<io.vertx.core.impl.launcher.commands.Watcher: void addFilesToWatchedList(java.util.List)>(v16);
return;
}
static java.util.List extractRoots(java.io.File, java.util.List)
{
java.util.function.Function v3, v8;
java.io.File v0;
java.util.List v1;
java.util.stream.Stream v2, v4, v7, v9;
java.lang.Object v11, v6;
java.util.stream.Collector v10, v5;
v0 := @parameter0: java.io.File;
v1 := @parameter1: java.util.List;
v2 = interfaceinvoke v1.<java.util.List: java.util.stream.Stream stream()>();
v3 = staticinvoke <io.vertx.core.impl.launcher.commands.Watcher$lambda_extractRoots_0__1589: java.util.function.Function bootstrap$(java.io.File)>(v0);
v4 = interfaceinvoke v2.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v3);
v5 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toSet()>();
v6 = interfaceinvoke v4.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v5);
v7 = interfaceinvoke v6.<java.util.Set: java.util.stream.Stream stream()>();
v8 = staticinvoke <io.vertx.core.impl.launcher.commands.Watcher$init__1590: java.util.function.Function bootstrap$()>();
v9 = interfaceinvoke v7.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v8);
v10 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();
v11 = interfaceinvoke v9.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v10);
return v11;
}
private java.util.List sanitizeIncludePatterns(java.util.List)
{
java.util.List v1;
io.vertx.core.impl.launcher.commands.Watcher v0;
java.util.stream.Stream v2, v4;
java.lang.Object v6;
java.util.stream.Collector v5;
java.util.function.Function v3;
v0 := @this: io.vertx.core.impl.launcher.commands.Watcher;
v1 := @parameter0: java.util.List;
v2 = interfaceinvoke v1.<java.util.List: java.util.stream.Stream stream()>();
v3 = staticinvoke <io.vertx.core.impl.launcher.commands.Watcher$lambda_sanitizeIncludePatterns_1__1591: java.util.function.Function bootstrap$()>();
v4 = interfaceinvoke v2.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v3);
v5 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();
v6 = interfaceinvoke v4.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v5);
return v6;
}
private void addFilesToWatchedList(java.util.List)
{
java.util.function.Consumer v2;
java.util.List v1;
io.vertx.core.impl.launcher.commands.Watcher v0;
v0 := @this: io.vertx.core.impl.launcher.commands.Watcher;
v1 := @parameter0: java.util.List;
v2 = staticinvoke <io.vertx.core.impl.launcher.commands.Watcher$addFileToWatchedList__1592: java.util.function.Consumer bootstrap$(io.vertx.core.impl.launcher.commands.Watcher)>(v0);
interfaceinvoke v1.<java.util.List: void forEach(java.util.function.Consumer)>(v2);
return;
}
public void addFileToWatchedList(java.io.File)
{
java.util.HashMap v3;
long v10, v11, v14, v15;
io.vertx.core.impl.launcher.commands.Watcher$FileInfo v13, v9;
java.util.Map v16;
int v6, v7;
boolean v12, v4;
java.util.Set v2;
java.io.File v1, v8;
io.vertx.core.impl.launcher.commands.Watcher v0;
java.io.File[] v5;
v0 := @this: io.vertx.core.impl.launcher.commands.Watcher;
v1 := @parameter0: java.io.File;
v2 = v0.<io.vertx.core.impl.launcher.commands.Watcher: java.util.Set filesToWatch>;
interfaceinvoke v2.<java.util.Set: boolean add(java.lang.Object)>(v1);
v3 = new java.util.HashMap;
specialinvoke v3.<java.util.HashMap: void <init>()>();
v4 = virtualinvoke v1.<java.io.File: boolean isDirectory()>();
if v4 == 0 goto label3;
v5 = virtualinvoke v1.<java.io.File: java.io.File[] listFiles()>();
if v5 == null goto label4;
v6 = lengthof v5;
v7 = 0;
label1:
if v7 >= v6 goto label4;
v8 = v5[v7];
v9 = new io.vertx.core.impl.launcher.commands.Watcher$FileInfo;
v10 = virtualinvoke v8.<java.io.File: long lastModified()>();
v11 = virtualinvoke v8.<java.io.File: long length()>();
specialinvoke v9.<io.vertx.core.impl.launcher.commands.Watcher$FileInfo: void <init>(long,long)>(v10, v11);
interfaceinvoke v3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v8, v9);
v12 = virtualinvoke v8.<java.io.File: boolean isDirectory()>();
if v12 == 0 goto label2;
specialinvoke v0.<io.vertx.core.impl.launcher.commands.Watcher: void addFileToWatchedList(java.io.File)>(v8);
label2:
v7 = v7 + 1;
goto label1;
label3:
v13 = new io.vertx.core.impl.launcher.commands.Watcher$FileInfo;
v14 = virtualinvoke v1.<java.io.File: long lastModified()>();
v15 = virtualinvoke v1.<java.io.File: long length()>();
specialinvoke v13.<io.vertx.core.impl.launcher.commands.Watcher$FileInfo: void <init>(long,long)>(v14, v15);
interfaceinvoke v3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v13);
label4:
v16 = v0.<io.vertx.core.impl.launcher.commands.Watcher: java.util.Map fileMap>;
interfaceinvoke v16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v3);
return;
}
private boolean changesHaveOccurred()
{
java.lang.IllegalStateException v11;
byte v34, v37, v58, v62;
java.util.Map v16, v27;
boolean v1, v21, v26, v31, v43, v46, v48, v5, v52, v55, v8, v9;
io.vertx.core.impl.logging.Logger v29, v41, v53;
java.util.Set v19, v28, v3, v44;
io.vertx.core.impl.launcher.commands.Watcher v0;
java.util.HashMap v18;
long v32, v33, v35, v36, v39, v40, v50, v51, v56, v57, v59, v60, v61;
io.vertx.core.impl.launcher.commands.Watcher$FileInfo v38, v49;
java.util.HashSet v2;
java.util.LinkedHashMap v7;
int v13, v14;
java.lang.String v30, v42, v54;
java.util.Iterator v20, v4, v45;
java.io.File v15;
java.lang.Object v17, v22, v23, v24, v25, v47, v6;
java.io.File[] v10, v12;
v0 := @this: io.vertx.core.impl.launcher.commands.Watcher;
v1 = 0;
v2 = new java.util.HashSet;
v3 = v0.<io.vertx.core.impl.launcher.commands.Watcher: java.util.Set filesToWatch>;
specialinvoke v2.<java.util.HashSet: void <init>(java.util.Collection)>(v3);
v4 = virtualinvoke v2.<java.util.HashSet: java.util.Iterator iterator()>();
label01:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label15;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = new java.util.LinkedHashMap;
specialinvoke v7.<java.util.LinkedHashMap: void <init>()>();
v8 = virtualinvoke v6.<java.io.File: boolean isDirectory()>();
if v8 == 0 goto label06;
v9 = virtualinvoke v6.<java.io.File: boolean exists()>();
if v9 == 0 goto label02;
v10 = virtualinvoke v6.<java.io.File: java.io.File[] listFiles()>();
goto label03;
label02:
v10 = newarray (java.io.File)[0];
label03:
if v10 != null goto label04;
v11 = new java.lang.IllegalStateException;
specialinvoke v11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot scan the file system to detect file changes");
throw v11;
label04:
v12 = v10;
v13 = lengthof v10;
v14 = 0;
label05:
if v14 >= v13 goto label07;
v15 = v12[v14];
interfaceinvoke v7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v15, v15);
v14 = v14 + 1;
goto label05;
label06:
interfaceinvoke v7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v6, v6);
label07:
v16 = v0.<io.vertx.core.impl.launcher.commands.Watcher: java.util.Map fileMap>;
v17 = interfaceinvoke v16.<java.util.Map: java.lang.Object get(java.lang.Object)>(v6);
v18 = new java.util.HashMap;
specialinvoke v18.<java.util.HashMap: void <init>(java.util.Map)>(v17);
v19 = virtualinvoke v18.<java.util.HashMap: java.util.Set entrySet()>();
v20 = interfaceinvoke v19.<java.util.Set: java.util.Iterator iterator()>();
label08:
v21 = interfaceinvoke v20.<java.util.Iterator: boolean hasNext()>();
if v21 == 0 goto label12;
v22 = interfaceinvoke v20.<java.util.Iterator: java.lang.Object next()>();
v23 = interfaceinvoke v22.<java.util.Map$Entry: java.lang.Object getKey()>();
v24 = interfaceinvoke v22.<java.util.Map$Entry: java.lang.Object getValue()>();
v25 = interfaceinvoke v7.<java.util.Map: java.lang.Object get(java.lang.Object)>(v23);
if v25 != null goto label10;
interfaceinvoke v17.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v23);
v26 = interfaceinvoke v17.<java.util.Map: boolean isEmpty()>();
if v26 == 0 goto label09;
v27 = v0.<io.vertx.core.impl.launcher.commands.Watcher: java.util.Map fileMap>;
interfaceinvoke v27.<java.util.Map: java.lang.Object remove(java.lang.Object)>(v6);
v28 = v0.<io.vertx.core.impl.launcher.commands.Watcher: java.util.Set filesToWatch>;
interfaceinvoke v28.<java.util.Set: boolean remove(java.lang.Object)>(v6);
label09:
v29 = <io.vertx.core.impl.launcher.commands.Watcher: io.vertx.core.impl.logging.Logger LOGGER>;
v30 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.io.File)>(v23) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("File: \u0001 has been deleted");
interfaceinvoke v29.<io.vertx.core.impl.logging.Logger: void trace(java.lang.Object)>(v30);
v31 = virtualinvoke v0.<io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)>(v23);
if v31 == 0 goto label08;
v1 = 1;
goto label08;
label10:
v32 = virtualinvoke v25.<java.io.File: long lastModified()>();
v33 = v24.<io.vertx.core.impl.launcher.commands.Watcher$FileInfo: long lastModified>;
v34 = v32 cmp v33;
if v34 != 0 goto label11;
v35 = virtualinvoke v25.<java.io.File: long length()>();
v36 = v24.<io.vertx.core.impl.launcher.commands.Watcher$FileInfo: long length>;
v37 = v35 cmp v36;
if v37 == 0 goto label08;
label11:
v38 = new io.vertx.core.impl.launcher.commands.Watcher$FileInfo;
v39 = virtualinvoke v25.<java.io.File: long lastModified()>();
v40 = virtualinvoke v25.<java.io.File: long length()>();
specialinvoke v38.<io.vertx.core.impl.launcher.commands.Watcher$FileInfo: void <init>(long,long)>(v39, v40);
interfaceinvoke v17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v25, v38);
v41 = <io.vertx.core.impl.launcher.commands.Watcher: io.vertx.core.impl.logging.Logger LOGGER>;
v42 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.io.File)>(v23) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("File: \u0001 has been modified");
interfaceinvoke v41.<io.vertx.core.impl.logging.Logger: void trace(java.lang.Object)>(v42);
v43 = virtualinvoke v0.<io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)>(v23);
if v43 == 0 goto label08;
v1 = 1;
goto label08;
label12:
v44 = interfaceinvoke v7.<java.util.Map: java.util.Set keySet()>();
v45 = interfaceinvoke v44.<java.util.Set: java.util.Iterator iterator()>();
label13:
v46 = interfaceinvoke v45.<java.util.Iterator: boolean hasNext()>();
if v46 == 0 goto label01;
v47 = interfaceinvoke v45.<java.util.Iterator: java.lang.Object next()>();
v48 = interfaceinvoke v17.<java.util.Map: boolean containsKey(java.lang.Object)>(v47);
if v48 != 0 goto label13;
v49 = new io.vertx.core.impl.launcher.commands.Watcher$FileInfo;
v50 = virtualinvoke v47.<java.io.File: long lastModified()>();
v51 = virtualinvoke v47.<java.io.File: long length()>();
specialinvoke v49.<io.vertx.core.impl.launcher.commands.Watcher$FileInfo: void <init>(long,long)>(v50, v51);
interfaceinvoke v17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v47, v49);
v52 = virtualinvoke v47.<java.io.File: boolean isDirectory()>();
if v52 == 0 goto label14;
specialinvoke v0.<io.vertx.core.impl.launcher.commands.Watcher: void addFileToWatchedList(java.io.File)>(v47);
label14:
v53 = <io.vertx.core.impl.launcher.commands.Watcher: io.vertx.core.impl.logging.Logger LOGGER>;
v54 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.io.File)>(v47) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("File was added: \u0001");
interfaceinvoke v53.<io.vertx.core.impl.logging.Logger: void trace(java.lang.Object)>(v54);
v55 = virtualinvoke v0.<io.vertx.core.impl.launcher.commands.Watcher: boolean match(java.io.File)>(v47);
if v55 == 0 goto label13;
v1 = 1;
goto label13;
label15:
v56 = staticinvoke <java.lang.System: long currentTimeMillis()>();
if v1 == 0 goto label16;
v0.<io.vertx.core.impl.launcher.commands.Watcher: long lastChange> = v56;
label16:
v57 = v0.<io.vertx.core.impl.launcher.commands.Watcher: long lastChange>;
v58 = v57 cmp -1L;
if v58 == 0 goto label17;
v59 = v0.<io.vertx.core.impl.launcher.commands.Watcher: long lastChange>;
v60 = v56 - v59;
v61 = v0.<io.vertx.core.impl.launcher.commands.Watcher: long gracePeriod>;
v62 = v60 cmp v61;
if v62 < 0 goto label17;
v0.<io.vertx.core.impl.launcher.commands.Watcher: long lastChange> = -1L;
return 1;
label17:
return 0;
}
protected boolean match(java.io.File)
{
boolean v10, v13, v25, v33, v36, v37, v38, v40, v41, v42, v6;
io.vertx.core.impl.logging.Logger v18;
java.util.List v20, v31, v4;
io.vertx.core.impl.launcher.commands.Watcher v0;
int v16, v17, v29, v30;
java.lang.String v11, v12, v14, v15, v19, v2, v21, v22, v24, v26, v28, v3, v35, v39, v8, v9;
java.util.Iterator v32, v5;
java.io.File v1, v23, v27;
java.lang.Object v34, v7;
v0 := @this: io.vertx.core.impl.launcher.commands.Watcher;
v1 := @parameter0: java.io.File;
v2 = null;
v3 = null;
v4 = v0.<io.vertx.core.impl.launcher.commands.Watcher: java.util.List roots>;
v5 = interfaceinvoke v4.<java.util.List: java.util.Iterator iterator()>();
label01:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label03;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = virtualinvoke v1.<java.io.File: java.lang.String getAbsolutePath()>();
v9 = virtualinvoke v7.<java.io.File: java.lang.String getAbsolutePath()>();
v10 = virtualinvoke v8.<java.lang.String: boolean startsWith(java.lang.String)>(v9);
if v10 == 0 goto label01;
v11 = virtualinvoke v1.<java.io.File: java.lang.String getAbsolutePath()>();
v12 = virtualinvoke v7.<java.io.File: java.lang.String getAbsolutePath()>();
v13 = virtualinvoke v11.<java.lang.String: boolean equals(java.lang.Object)>(v12);
if v13 == 0 goto label02;
v2 = virtualinvoke v1.<java.io.File: java.lang.String getAbsolutePath()>();
goto label01;
label02:
v14 = virtualinvoke v1.<java.io.File: java.lang.String getAbsolutePath()>();
v15 = virtualinvoke v7.<java.io.File: java.lang.String getAbsolutePath()>();
v16 = virtualinvoke v15.<java.lang.String: int length()>();
v17 = v16 + 1;
v2 = virtualinvoke v14.<java.lang.String: java.lang.String substring(int)>(v17);
goto label01;
label03:
if v2 != null goto label04;
v18 = <io.vertx.core.impl.launcher.commands.Watcher: io.vertx.core.impl.logging.Logger LOGGER>;
v19 = virtualinvoke v1.<java.io.File: java.lang.String getAbsolutePath()>();
v20 = v0.<io.vertx.core.impl.launcher.commands.Watcher: java.util.List roots>;
v21 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.util.List)>(v19, v20) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("A change in \u0001 has been detected, but the file does not belong to a watched roots: \u0001");
interfaceinvoke v18.<io.vertx.core.impl.logging.Logger: void warn(java.lang.Object)>(v21);
return 0;
label04:
v22 = virtualinvoke v1.<java.io.File: java.lang.String getAbsolutePath()>();
v23 = v0.<io.vertx.core.impl.launcher.commands.Watcher: java.io.File cwd>;
v24 = virtualinvoke v23.<java.io.File: java.lang.String getAbsolutePath()>();
v25 = virtualinvoke v22.<java.lang.String: boolean startsWith(java.lang.String)>(v24);
if v25 == 0 goto label05;
v26 = virtualinvoke v1.<java.io.File: java.lang.String getAbsolutePath()>();
v27 = v0.<io.vertx.core.impl.launcher.commands.Watcher: java.io.File cwd>;
v28 = virtualinvoke v27.<java.io.File: java.lang.String getAbsolutePath()>();
v29 = virtualinvoke v28.<java.lang.String: int length()>();
v30 = v29 + 1;
v3 = virtualinvoke v26.<java.lang.String: java.lang.String substring(int)>(v30);
label05:
v31 = v0.<io.vertx.core.impl.launcher.commands.Watcher: java.util.List includes>;
v32 = interfaceinvoke v31.<java.util.List: java.util.Iterator iterator()>();
label06:
v33 = interfaceinvoke v32.<java.util.Iterator: boolean hasNext()>();
if v33 == 0 goto label13;
v34 = interfaceinvoke v32.<java.util.Iterator: java.lang.Object next()>();
if v3 == null goto label09;
v35 = v3;
v36 = staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: boolean isWindows()>();
if v36 != 0 goto label07;
v37 = 1;
goto label08;
label07:
v37 = 0;
label08:
v38 = staticinvoke <io.vertx.core.impl.launcher.commands.FileSelector: boolean matchPath(java.lang.String,java.lang.String,boolean)>(v34, v35, v37);
if v38 != 0 goto label12;
label09:
v39 = virtualinvoke v1.<java.io.File: java.lang.String getAbsolutePath()>();
v40 = staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: boolean isWindows()>();
if v40 != 0 goto label10;
v41 = 1;
goto label11;
label10:
v41 = 0;
label11:
v42 = staticinvoke <io.vertx.core.impl.launcher.commands.FileSelector: boolean matchPath(java.lang.String,java.lang.String,boolean)>(v34, v39, v41);
if v42 == 0 goto label06;
label12:
return 1;
label13:
return 0;
}
public io.vertx.core.impl.launcher.commands.Watcher watch()
{
io.vertx.core.impl.logging.Logger v2;
io.vertx.core.impl.launcher.commands.Watcher v0;
java.lang.Thread v1;
io.vertx.core.Handler v3;
v0 := @this: io.vertx.core.impl.launcher.commands.Watcher;
v1 = new java.lang.Thread;
specialinvoke v1.<java.lang.Thread: void <init>(java.lang.Runnable)>(v0);
virtualinvoke v1.<java.lang.Thread: void start()>();
v2 = <io.vertx.core.impl.launcher.commands.Watcher: io.vertx.core.impl.logging.Logger LOGGER>;
interfaceinvoke v2.<io.vertx.core.impl.logging.Logger: void info(java.lang.Object)>("Starting the vert.x application in redeploy mode");
v3 = v0.<io.vertx.core.impl.launcher.commands.Watcher: io.vertx.core.Handler deploy>;
interfaceinvoke v3.<io.vertx.core.Handler: void handle(java.lang.Object)>(null);
return v0;
}
public void close()
{
io.vertx.core.impl.logging.Logger v1;
io.vertx.core.impl.launcher.commands.Watcher v0;
io.vertx.core.Handler v2;
v0 := @this: io.vertx.core.impl.launcher.commands.Watcher;
v1 = <io.vertx.core.impl.launcher.commands.Watcher: io.vertx.core.impl.logging.Logger LOGGER>;
interfaceinvoke v1.<io.vertx.core.impl.logging.Logger: void info(java.lang.Object)>("Stopping redeployment");
v0.<io.vertx.core.impl.launcher.commands.Watcher: boolean closed> = 1;
v2 = v0.<io.vertx.core.impl.launcher.commands.Watcher: io.vertx.core.Handler undeploy>;
interfaceinvoke v2.<io.vertx.core.Handler: void handle(java.lang.Object)>(null);
return;
}
public void run()
{
io.vertx.core.impl.logging.Logger v5;
java.lang.Throwable v4;
io.vertx.core.impl.launcher.commands.Watcher v0;
long v3;
boolean v1, v2;
v0 := @this: io.vertx.core.impl.launcher.commands.Watcher;
label1:
v1 = v0.<io.vertx.core.impl.launcher.commands.Watcher: boolean closed>;
if v1 != 0 goto label4;
v2 = specialinvoke v0.<io.vertx.core.impl.launcher.commands.Watcher: boolean changesHaveOccurred()>();
if v2 == 0 goto label2;
specialinvoke v0.<io.vertx.core.impl.launcher.commands.Watcher: void trigger()>();
label2:
v3 = v0.<io.vertx.core.impl.launcher.commands.Watcher: long scanPeriod>;
staticinvoke <java.lang.Thread: void sleep(long)>(v3);
goto label1;
label3:
v4 := @caughtexception;
v5 = <io.vertx.core.impl.launcher.commands.Watcher: io.vertx.core.impl.logging.Logger LOGGER>;
interfaceinvoke v5.<io.vertx.core.impl.logging.Logger: void error(java.lang.Object,java.lang.Throwable)>("An error have been encountered while watching resources - leaving the redeploy mode", v4);
virtualinvoke v0.<io.vertx.core.impl.launcher.commands.Watcher: void close()>();
label4:
return;
catch java.lang.Throwable from label1 to label3 with label3;
}
private void trigger()
{
io.vertx.core.impl.logging.Logger v2;
io.vertx.core.impl.launcher.commands.Watcher v0;
long v1;
io.vertx.core.Handler v3, v4;
v0 := @this: io.vertx.core.impl.launcher.commands.Watcher;
v1 = staticinvoke <java.lang.System: long currentTimeMillis()>();
v2 = <io.vertx.core.impl.launcher.commands.Watcher: io.vertx.core.impl.logging.Logger LOGGER>;
interfaceinvoke v2.<io.vertx.core.impl.logging.Logger: void info(java.lang.Object)>("Redeploying!");
v3 = v0.<io.vertx.core.impl.launcher.commands.Watcher: io.vertx.core.Handler undeploy>;
v4 = staticinvoke <io.vertx.core.impl.launcher.commands.Watcher$lambda_trigger_4__1593: io.vertx.core.Handler bootstrap$(io.vertx.core.impl.launcher.commands.Watcher,long)>(v0, v1);
interfaceinvoke v3.<io.vertx.core.Handler: void handle(java.lang.Object)>(v4);
return;
}
private void executeUserCommand(io.vertx.core.Handler)
{
java.lang.ProcessBuilder$Redirect v7, v9;
java.lang.Throwable v15;
java.util.ArrayList v3;
int v12;
java.lang.ProcessBuilder v10, v6, v8;
java.lang.String v14, v17, v18, v2, v5;
boolean v4;
io.vertx.core.impl.logging.Logger v13, v16;
java.lang.Process v11;
io.vertx.core.impl.launcher.commands.Watcher v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.impl.launcher.commands.Watcher;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.impl.launcher.commands.Watcher: java.lang.String cmd>;
if v2 == null goto label6;
label1:
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
v4 = staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: boolean isWindows()>();
if v4 == 0 goto label2;
staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: void addArgument(java.util.List,java.lang.String)>(v3, "cmd");
staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: void addArgument(java.util.List,java.lang.String)>(v3, "/c");
goto label3;
label2:
staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: void addArgument(java.util.List,java.lang.String)>(v3, "sh");
staticinvoke <io.vertx.core.impl.launcher.commands.ExecUtils: void addArgument(java.util.List,java.lang.String)>(v3, "-c");
label3:
v5 = v0.<io.vertx.core.impl.launcher.commands.Watcher: java.lang.String cmd>;
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v5);
v6 = new java.lang.ProcessBuilder;
specialinvoke v6.<java.lang.ProcessBuilder: void <init>(java.util.List)>(v3);
v7 = <java.lang.ProcessBuilder$Redirect: java.lang.ProcessBuilder$Redirect INHERIT>;
v8 = virtualinvoke v6.<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectError(java.lang.ProcessBuilder$Redirect)>(v7);
v9 = <java.lang.ProcessBuilder$Redirect: java.lang.ProcessBuilder$Redirect INHERIT>;
v10 = virtualinvoke v8.<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectOutput(java.lang.ProcessBuilder$Redirect)>(v9);
v11 = virtualinvoke v10.<java.lang.ProcessBuilder: java.lang.Process start()>();
v12 = virtualinvoke v11.<java.lang.Process: int waitFor()>();
v13 = <io.vertx.core.impl.launcher.commands.Watcher: io.vertx.core.impl.logging.Logger LOGGER>;
v14 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v12) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("User command terminated with status \u0001");
interfaceinvoke v13.<io.vertx.core.impl.logging.Logger: void info(java.lang.Object)>(v14);
label4:
goto label6;
label5:
v15 := @caughtexception;
v16 = <io.vertx.core.impl.launcher.commands.Watcher: io.vertx.core.impl.logging.Logger LOGGER>;
v17 = v0.<io.vertx.core.impl.launcher.commands.Watcher: java.lang.String cmd>;
v18 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v17) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Error while executing the on-redeploy command : \'\u0001\'");
interfaceinvoke v16.<io.vertx.core.impl.logging.Logger: void error(java.lang.Object,java.lang.Throwable)>(v18, v15);
label6:
interfaceinvoke v1.<io.vertx.core.Handler: void handle(java.lang.Object)>(null);
return;
catch java.lang.Throwable from label1 to label4 with label5;
}
static void <clinit>()
{
io.vertx.core.impl.logging.Logger v0;
v0 = staticinvoke <io.vertx.core.impl.logging.LoggerFactory: io.vertx.core.impl.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/impl/launcher/commands/Watcher;");
<io.vertx.core.impl.launcher.commands.Watcher: io.vertx.core.impl.logging.Logger LOGGER> = v0;
return;
}
}