class io.vertx.core.impl.resolver.DnsResolverProvider$2 extends io.netty.resolver.dns.DnsAddressResolverGroup
{
final io.vertx.core.dns.AddressResolverOptions val$options;
final io.vertx.core.impl.resolver.DnsResolverProvider this$0;
void <init>(io.vertx.core.impl.resolver.DnsResolverProvider, io.netty.resolver.dns.DnsNameResolverBuilder, io.vertx.core.dns.AddressResolverOptions)
{
io.netty.resolver.dns.DnsNameResolverBuilder v2;
io.vertx.core.impl.resolver.DnsResolverProvider v1;
io.vertx.core.dns.AddressResolverOptions v3;
io.vertx.core.impl.resolver.DnsResolverProvider$2 v0;
v0 := @this: io.vertx.core.impl.resolver.DnsResolverProvider$2;
v1 := @parameter0: io.vertx.core.impl.resolver.DnsResolverProvider;
v2 := @parameter1: io.netty.resolver.dns.DnsNameResolverBuilder;
v3 := @parameter2: io.vertx.core.dns.AddressResolverOptions;
v0.<io.vertx.core.impl.resolver.DnsResolverProvider$2: io.vertx.core.impl.resolver.DnsResolverProvider this$0> = v1;
v0.<io.vertx.core.impl.resolver.DnsResolverProvider$2: io.vertx.core.dns.AddressResolverOptions val$options> = v3;
specialinvoke v0.<io.netty.resolver.dns.DnsAddressResolverGroup: void <init>(io.netty.resolver.dns.DnsNameResolverBuilder)>(v2);
return;
}
protected io.netty.resolver.AddressResolver newAddressResolver(io.netty.channel.EventLoop, io.netty.resolver.NameResolver) throws java.lang.Exception
{
io.netty.resolver.AddressResolver v6;
io.vertx.core.impl.resolver.DnsResolverProvider v7;
io.netty.resolver.NameResolver v2;
io.vertx.core.impl.resolver.DnsResolverProvider$ResolverRegistration v9;
io.netty.channel.EventLoop v1;
io.vertx.core.dns.AddressResolverOptions v3;
io.vertx.core.impl.resolver.DnsResolverProvider$2 v0;
java.util.List v8;
io.netty.resolver.RoundRobinInetAddressResolver v5;
boolean v4;
v0 := @this: io.vertx.core.impl.resolver.DnsResolverProvider$2;
v1 := @parameter0: io.netty.channel.EventLoop;
v2 := @parameter1: io.netty.resolver.NameResolver;
v3 = v0.<io.vertx.core.impl.resolver.DnsResolverProvider$2: io.vertx.core.dns.AddressResolverOptions val$options>;
v4 = virtualinvoke v3.<io.vertx.core.dns.AddressResolverOptions: boolean isRoundRobinInetAddress()>();
if v4 == 0 goto label1;
v5 = new io.netty.resolver.RoundRobinInetAddressResolver;
specialinvoke v5.<io.netty.resolver.RoundRobinInetAddressResolver: void <init>(io.netty.util.concurrent.EventExecutor,io.netty.resolver.NameResolver)>(v1, v2);
v6 = virtualinvoke v5.<io.netty.resolver.RoundRobinInetAddressResolver: io.netty.resolver.AddressResolver asAddressResolver()>();
goto label2;
label1:
v6 = specialinvoke v0.<io.netty.resolver.dns.DnsAddressResolverGroup: io.netty.resolver.AddressResolver newAddressResolver(io.netty.channel.EventLoop,io.netty.resolver.NameResolver)>(v1, v2);
label2:
v7 = v0.<io.vertx.core.impl.resolver.DnsResolverProvider$2: io.vertx.core.impl.resolver.DnsResolverProvider this$0>;
v8 = v7.<io.vertx.core.impl.resolver.DnsResolverProvider: java.util.List resolvers>;
v9 = new io.vertx.core.impl.resolver.DnsResolverProvider$ResolverRegistration;
specialinvoke v9.<io.vertx.core.impl.resolver.DnsResolverProvider$ResolverRegistration: void <init>(io.netty.resolver.AddressResolver,io.netty.channel.EventLoop)>(v6, v1);
interfaceinvoke v8.<java.util.List: boolean add(java.lang.Object)>(v9);
return v6;
}
}