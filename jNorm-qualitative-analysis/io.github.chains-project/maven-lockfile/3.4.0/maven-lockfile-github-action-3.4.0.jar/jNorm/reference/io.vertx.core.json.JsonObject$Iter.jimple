class io.vertx.core.json.JsonObject$Iter extends java.lang.Object implements java.util.Iterator
{
final java.util.Iterator mapIter;
void <init>(java.util.Iterator)
{
io.vertx.core.json.JsonObject$Iter v0;
java.util.Iterator v1;
v0 := @this: io.vertx.core.json.JsonObject$Iter;
v1 := @parameter0: java.util.Iterator;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.json.JsonObject$Iter: java.util.Iterator mapIter> = v1;
return;
}
public boolean hasNext()
{
io.vertx.core.json.JsonObject$Iter v0;
java.util.Iterator v1;
boolean v2;
v0 := @this: io.vertx.core.json.JsonObject$Iter;
v1 = v0.<io.vertx.core.json.JsonObject$Iter: java.util.Iterator mapIter>;
v2 = interfaceinvoke v1.<java.util.Iterator: boolean hasNext()>();
return v2;
}
public java.util.Map$Entry next()
{
io.vertx.core.json.JsonObject$Iter v0;
java.util.Iterator v1;
io.vertx.core.json.JsonObject$Entry v5;
java.lang.Object v2, v3, v4, v6;
v0 := @this: io.vertx.core.json.JsonObject$Iter;
v1 = v0.<io.vertx.core.json.JsonObject$Iter: java.util.Iterator mapIter>;
v2 = interfaceinvoke v1.<java.util.Iterator: java.lang.Object next()>();
v3 = interfaceinvoke v2.<java.util.Map$Entry: java.lang.Object getValue()>();
v4 = staticinvoke <io.vertx.core.json.impl.JsonUtil: java.lang.Object wrapJsonValue(java.lang.Object)>(v3);
if v3 == v4 goto label1;
v5 = new io.vertx.core.json.JsonObject$Entry;
v6 = interfaceinvoke v2.<java.util.Map$Entry: java.lang.Object getKey()>();
specialinvoke v5.<io.vertx.core.json.JsonObject$Entry: void <init>(java.lang.String,java.lang.Object)>(v6, v4);
return v5;
label1:
return v2;
}
public void remove()
{
io.vertx.core.json.JsonObject$Iter v0;
java.util.Iterator v1;
v0 := @this: io.vertx.core.json.JsonObject$Iter;
v1 = v0.<io.vertx.core.json.JsonObject$Iter: java.util.Iterator mapIter>;
interfaceinvoke v1.<java.util.Iterator: void remove()>();
return;
}
}