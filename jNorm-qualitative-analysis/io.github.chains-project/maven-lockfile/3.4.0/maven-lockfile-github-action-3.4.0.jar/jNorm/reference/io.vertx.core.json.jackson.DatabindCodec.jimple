public class io.vertx.core.json.jackson.DatabindCodec extends io.vertx.core.json.jackson.JacksonCodec
{
private static final com.fasterxml.jackson.databind.ObjectMapper mapper;
private static final com.fasterxml.jackson.databind.ObjectMapper prettyMapper;
public void <init>()
{
io.vertx.core.json.jackson.DatabindCodec v0;
v0 := @this: io.vertx.core.json.jackson.DatabindCodec;
specialinvoke v0.<io.vertx.core.json.jackson.JacksonCodec: void <init>()>();
return;
}
private static void initialize()
{
com.fasterxml.jackson.databind.ObjectMapper v0, v2, v4, v7, v8;
com.fasterxml.jackson.core.JsonParser$Feature v1, v3;
io.vertx.core.json.jackson.VertxModule v6;
com.fasterxml.jackson.databind.SerializationFeature v5;
v0 = <io.vertx.core.json.jackson.DatabindCodec: com.fasterxml.jackson.databind.ObjectMapper mapper>;
v1 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_COMMENTS>;
virtualinvoke v0.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectMapper configure(com.fasterxml.jackson.core.JsonParser$Feature,boolean)>(v1, 1);
v2 = <io.vertx.core.json.jackson.DatabindCodec: com.fasterxml.jackson.databind.ObjectMapper prettyMapper>;
v3 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_COMMENTS>;
virtualinvoke v2.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectMapper configure(com.fasterxml.jackson.core.JsonParser$Feature,boolean)>(v3, 1);
v4 = <io.vertx.core.json.jackson.DatabindCodec: com.fasterxml.jackson.databind.ObjectMapper prettyMapper>;
v5 = <com.fasterxml.jackson.databind.SerializationFeature: com.fasterxml.jackson.databind.SerializationFeature INDENT_OUTPUT>;
virtualinvoke v4.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectMapper configure(com.fasterxml.jackson.databind.SerializationFeature,boolean)>(v5, 1);
v6 = new io.vertx.core.json.jackson.VertxModule;
specialinvoke v6.<io.vertx.core.json.jackson.VertxModule: void <init>()>();
v7 = <io.vertx.core.json.jackson.DatabindCodec: com.fasterxml.jackson.databind.ObjectMapper mapper>;
virtualinvoke v7.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectMapper registerModule(com.fasterxml.jackson.databind.Module)>(v6);
v8 = <io.vertx.core.json.jackson.DatabindCodec: com.fasterxml.jackson.databind.ObjectMapper prettyMapper>;
virtualinvoke v8.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectMapper registerModule(com.fasterxml.jackson.databind.Module)>(v6);
return;
}
public static com.fasterxml.jackson.databind.ObjectMapper mapper()
{
com.fasterxml.jackson.databind.ObjectMapper v0;
v0 = <io.vertx.core.json.jackson.DatabindCodec: com.fasterxml.jackson.databind.ObjectMapper mapper>;
return v0;
}
public static com.fasterxml.jackson.databind.ObjectMapper prettyMapper()
{
com.fasterxml.jackson.databind.ObjectMapper v0;
v0 = <io.vertx.core.json.jackson.DatabindCodec: com.fasterxml.jackson.databind.ObjectMapper prettyMapper>;
return v0;
}
public java.lang.Object fromValue(java.lang.Object, java.lang.Class)
{
io.vertx.core.json.jackson.DatabindCodec v0;
com.fasterxml.jackson.databind.ObjectMapper v3;
java.lang.Class v2;
java.lang.Object v1, v4;
v0 := @this: io.vertx.core.json.jackson.DatabindCodec;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Class;
v3 = <io.vertx.core.json.jackson.DatabindCodec: com.fasterxml.jackson.databind.ObjectMapper mapper>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object convertValue(java.lang.Object,java.lang.Class)>(v1, v2);
if v2 != class "Ljava/lang/Object;" goto label1;
v4 = staticinvoke <io.vertx.core.json.jackson.DatabindCodec: java.lang.Object adapt(java.lang.Object)>(v4);
label1:
return v4;
}
public java.lang.Object fromValue(java.lang.Object, com.fasterxml.jackson.core.type.TypeReference)
{
io.vertx.core.json.jackson.DatabindCodec v0;
java.lang.reflect.Type v5;
com.fasterxml.jackson.databind.ObjectMapper v3;
java.lang.Object v1, v4;
com.fasterxml.jackson.core.type.TypeReference v2;
v0 := @this: io.vertx.core.json.jackson.DatabindCodec;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: com.fasterxml.jackson.core.type.TypeReference;
v3 = <io.vertx.core.json.jackson.DatabindCodec: com.fasterxml.jackson.databind.ObjectMapper mapper>;
v4 = virtualinvoke v3.<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object convertValue(java.lang.Object,com.fasterxml.jackson.core.type.TypeReference)>(v1, v2);
v5 = virtualinvoke v2.<com.fasterxml.jackson.core.type.TypeReference: java.lang.reflect.Type getType()>();
if v5 != class "Ljava/lang/Object;" goto label1;
v4 = staticinvoke <io.vertx.core.json.jackson.DatabindCodec: java.lang.Object adapt(java.lang.Object)>(v4);
label1:
return v4;
}
public java.lang.Object fromString(java.lang.String, java.lang.Class) throws io.vertx.core.json.DecodeException
{
io.vertx.core.json.jackson.DatabindCodec v0;
com.fasterxml.jackson.core.JsonParser v3;
java.lang.Class v2;
java.lang.Object v4;
java.lang.String v1;
v0 := @this: io.vertx.core.json.jackson.DatabindCodec;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Class;
v3 = staticinvoke <io.vertx.core.json.jackson.DatabindCodec: com.fasterxml.jackson.core.JsonParser createParser(java.lang.String)>(v1);
v4 = staticinvoke <io.vertx.core.json.jackson.DatabindCodec: java.lang.Object fromParser(com.fasterxml.jackson.core.JsonParser,java.lang.Class)>(v3, v2);
return v4;
}
public java.lang.Object fromString(java.lang.String, com.fasterxml.jackson.core.type.TypeReference) throws io.vertx.core.json.DecodeException
{
io.vertx.core.json.jackson.DatabindCodec v0;
com.fasterxml.jackson.core.JsonParser v3;
java.lang.Object v4;
java.lang.String v1;
com.fasterxml.jackson.core.type.TypeReference v2;
v0 := @this: io.vertx.core.json.jackson.DatabindCodec;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: com.fasterxml.jackson.core.type.TypeReference;
v3 = staticinvoke <io.vertx.core.json.jackson.DatabindCodec: com.fasterxml.jackson.core.JsonParser createParser(java.lang.String)>(v1);
v4 = staticinvoke <io.vertx.core.json.jackson.DatabindCodec: java.lang.Object fromParser(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.TypeReference)>(v3, v2);
return v4;
}
public java.lang.Object fromBuffer(io.vertx.core.buffer.Buffer, java.lang.Class) throws io.vertx.core.json.DecodeException
{
io.vertx.core.json.jackson.DatabindCodec v0;
com.fasterxml.jackson.core.JsonParser v3;
io.vertx.core.buffer.Buffer v1;
java.lang.Class v2;
java.lang.Object v4;
v0 := @this: io.vertx.core.json.jackson.DatabindCodec;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 := @parameter1: java.lang.Class;
v3 = staticinvoke <io.vertx.core.json.jackson.DatabindCodec: com.fasterxml.jackson.core.JsonParser createParser(io.vertx.core.buffer.Buffer)>(v1);
v4 = staticinvoke <io.vertx.core.json.jackson.DatabindCodec: java.lang.Object fromParser(com.fasterxml.jackson.core.JsonParser,java.lang.Class)>(v3, v2);
return v4;
}
public java.lang.Object fromBuffer(io.vertx.core.buffer.Buffer, com.fasterxml.jackson.core.type.TypeReference) throws io.vertx.core.json.DecodeException
{
io.vertx.core.json.jackson.DatabindCodec v0;
com.fasterxml.jackson.core.JsonParser v3;
io.vertx.core.buffer.Buffer v1;
java.lang.Object v4;
com.fasterxml.jackson.core.type.TypeReference v2;
v0 := @this: io.vertx.core.json.jackson.DatabindCodec;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 := @parameter1: com.fasterxml.jackson.core.type.TypeReference;
v3 = staticinvoke <io.vertx.core.json.jackson.DatabindCodec: com.fasterxml.jackson.core.JsonParser createParser(io.vertx.core.buffer.Buffer)>(v1);
v4 = staticinvoke <io.vertx.core.json.jackson.DatabindCodec: java.lang.Object fromParser(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.TypeReference)>(v3, v2);
return v4;
}
public static com.fasterxml.jackson.core.JsonParser createParser(io.vertx.core.buffer.Buffer)
{
com.fasterxml.jackson.core.JsonParser v5;
io.vertx.core.json.DecodeException v7;
com.fasterxml.jackson.databind.ObjectMapper v1;
java.io.IOException v6;
com.fasterxml.jackson.core.JsonFactory v2;
io.netty.buffer.ByteBuf v4;
io.vertx.core.buffer.Buffer v0;
java.lang.String v8, v9;
io.netty.buffer.ByteBufInputStream v3;
v0 := @parameter0: io.vertx.core.buffer.Buffer;
label1:
v1 = <io.vertx.core.json.jackson.DatabindCodec: com.fasterxml.jackson.databind.ObjectMapper mapper>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.core.JsonFactory getFactory()>();
v3 = new io.netty.buffer.ByteBufInputStream;
v4 = interfaceinvoke v0.<io.vertx.core.buffer.Buffer: io.netty.buffer.ByteBuf getByteBuf()>();
specialinvoke v3.<io.netty.buffer.ByteBufInputStream: void <init>(io.netty.buffer.ByteBuf)>(v4);
v5 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonFactory: com.fasterxml.jackson.core.JsonParser createParser(java.io.InputStream)>(v3);
label2:
return v5;
label3:
v6 := @caughtexception;
v7 = new io.vertx.core.json.DecodeException;
v8 = virtualinvoke v6.<java.io.IOException: java.lang.String getMessage()>();
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to decode:\u0001");
specialinvoke v7.<io.vertx.core.json.DecodeException: void <init>(java.lang.String,java.lang.Throwable)>(v9, v6);
throw v7;
catch java.io.IOException from label1 to label2 with label3;
}
public static com.fasterxml.jackson.core.JsonParser createParser(java.lang.String)
{
com.fasterxml.jackson.core.JsonParser v3;
io.vertx.core.json.DecodeException v5;
com.fasterxml.jackson.databind.ObjectMapper v1;
java.io.IOException v4;
com.fasterxml.jackson.core.JsonFactory v2;
java.lang.String v0, v6, v7;
v0 := @parameter0: java.lang.String;
label1:
v1 = <io.vertx.core.json.jackson.DatabindCodec: com.fasterxml.jackson.databind.ObjectMapper mapper>;
v2 = virtualinvoke v1.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.core.JsonFactory getFactory()>();
v3 = virtualinvoke v2.<com.fasterxml.jackson.core.JsonFactory: com.fasterxml.jackson.core.JsonParser createParser(java.lang.String)>(v0);
label2:
return v3;
label3:
v4 := @caughtexception;
v5 = new io.vertx.core.json.DecodeException;
v6 = virtualinvoke v4.<java.io.IOException: java.lang.String getMessage()>();
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to decode:\u0001");
specialinvoke v5.<io.vertx.core.json.DecodeException: void <init>(java.lang.String,java.lang.Throwable)>(v7, v4);
throw v5;
catch java.io.IOException from label1 to label2 with label3;
}
public static java.lang.Object fromParser(com.fasterxml.jackson.core.JsonParser, java.lang.Class) throws io.vertx.core.json.DecodeException
{
java.lang.Throwable v9;
com.fasterxml.jackson.core.JsonParser v0;
io.vertx.core.json.DecodeException v10, v6;
com.fasterxml.jackson.databind.ObjectMapper v2;
java.lang.Exception v5;
java.lang.Class v1;
java.lang.Object v3;
com.fasterxml.jackson.core.JsonToken v4;
java.lang.String v7, v8;
v0 := @parameter0: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter1: java.lang.Class;
label1:
v2 = <io.vertx.core.json.jackson.DatabindCodec: com.fasterxml.jackson.databind.ObjectMapper mapper>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(com.fasterxml.jackson.core.JsonParser,java.lang.Class)>(v0, v1);
v4 = virtualinvoke v0.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>();
label2:
staticinvoke <io.vertx.core.json.jackson.DatabindCodec: void close(java.io.Closeable)>(v0);
goto label5;
label3:
v5 := @caughtexception;
v6 = new io.vertx.core.json.DecodeException;
v7 = virtualinvoke v5.<java.lang.Exception: java.lang.String getMessage()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to decode:\u0001");
specialinvoke v6.<io.vertx.core.json.DecodeException: void <init>(java.lang.String,java.lang.Throwable)>(v8, v5);
throw v6;
label4:
v9 := @caughtexception;
staticinvoke <io.vertx.core.json.jackson.DatabindCodec: void close(java.io.Closeable)>(v0);
throw v9;
label5:
if v4 == null goto label6;
v10 = new io.vertx.core.json.DecodeException;
specialinvoke v10.<io.vertx.core.json.DecodeException: void <init>(java.lang.String)>("Unexpected trailing token");
throw v10;
label6:
if v1 != class "Ljava/lang/Object;" goto label7;
v3 = staticinvoke <io.vertx.core.json.jackson.DatabindCodec: java.lang.Object adapt(java.lang.Object)>(v3);
label7:
return v3;
catch java.lang.Exception from label1 to label2 with label3;
catch java.lang.Throwable from label1 to label2 with label4;
}
private static java.lang.Object fromParser(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.core.type.TypeReference) throws io.vertx.core.json.DecodeException
{
java.lang.Throwable v8;
com.fasterxml.jackson.core.JsonParser v0;
io.vertx.core.json.DecodeException v5;
com.fasterxml.jackson.databind.ObjectMapper v2;
java.lang.Exception v4;
java.lang.reflect.Type v9;
java.lang.Object v3;
java.lang.String v6, v7;
com.fasterxml.jackson.core.type.TypeReference v1;
v0 := @parameter0: com.fasterxml.jackson.core.JsonParser;
v1 := @parameter1: com.fasterxml.jackson.core.type.TypeReference;
label1:
v2 = <io.vertx.core.json.jackson.DatabindCodec: com.fasterxml.jackson.databind.ObjectMapper mapper>;
v3 = virtualinvoke v2.<com.fasterxml.jackson.databind.ObjectMapper: java.lang.Object readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.TypeReference)>(v0, v1);
label2:
staticinvoke <io.vertx.core.json.jackson.DatabindCodec: void close(java.io.Closeable)>(v0);
goto label5;
label3:
v4 := @caughtexception;
v5 = new io.vertx.core.json.DecodeException;
v6 = virtualinvoke v4.<java.lang.Exception: java.lang.String getMessage()>();
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to decode:\u0001");
specialinvoke v5.<io.vertx.core.json.DecodeException: void <init>(java.lang.String,java.lang.Throwable)>(v7, v4);
throw v5;
label4:
v8 := @caughtexception;
staticinvoke <io.vertx.core.json.jackson.DatabindCodec: void close(java.io.Closeable)>(v0);
throw v8;
label5:
v9 = virtualinvoke v1.<com.fasterxml.jackson.core.type.TypeReference: java.lang.reflect.Type getType()>();
if v9 != class "Ljava/lang/Object;" goto label6;
v3 = staticinvoke <io.vertx.core.json.jackson.DatabindCodec: java.lang.Object adapt(java.lang.Object)>(v3);
label6:
return v3;
catch java.lang.Exception from label1 to label2 with label3;
catch java.lang.Throwable from label1 to label2 with label4;
}
public java.lang.String toString(java.lang.Object, boolean) throws io.vertx.core.json.EncodeException
{
io.vertx.core.json.jackson.DatabindCodec v0;
com.fasterxml.jackson.databind.ObjectMapper v3;
java.lang.Exception v5;
io.vertx.core.json.EncodeException v6;
java.lang.Object v1;
java.lang.String v4, v7, v8;
boolean v2;
v0 := @this: io.vertx.core.json.jackson.DatabindCodec;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: boolean;
label1:
if v2 == 0 goto label2;
v3 = <io.vertx.core.json.jackson.DatabindCodec: com.fasterxml.jackson.databind.ObjectMapper prettyMapper>;
goto label3;
label2:
v3 = <io.vertx.core.json.jackson.DatabindCodec: com.fasterxml.jackson.databind.ObjectMapper mapper>;
label3:
v4 = virtualinvoke v3.<com.fasterxml.jackson.databind.ObjectMapper: java.lang.String writeValueAsString(java.lang.Object)>(v1);
label4:
return v4;
label5:
v5 := @caughtexception;
v6 = new io.vertx.core.json.EncodeException;
v7 = virtualinvoke v5.<java.lang.Exception: java.lang.String getMessage()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to encode as JSON: \u0001");
specialinvoke v6.<io.vertx.core.json.EncodeException: void <init>(java.lang.String)>(v8);
throw v6;
catch java.lang.Exception from label1 to label4 with label5;
}
public io.vertx.core.buffer.Buffer toBuffer(java.lang.Object, boolean) throws io.vertx.core.json.EncodeException
{
byte[] v4;
io.vertx.core.json.jackson.DatabindCodec v0;
com.fasterxml.jackson.databind.ObjectMapper v3;
java.lang.Exception v6;
io.vertx.core.buffer.Buffer v5;
io.vertx.core.json.EncodeException v7;
java.lang.Object v1;
java.lang.String v8, v9;
boolean v2;
v0 := @this: io.vertx.core.json.jackson.DatabindCodec;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: boolean;
label1:
if v2 == 0 goto label2;
v3 = <io.vertx.core.json.jackson.DatabindCodec: com.fasterxml.jackson.databind.ObjectMapper prettyMapper>;
goto label3;
label2:
v3 = <io.vertx.core.json.jackson.DatabindCodec: com.fasterxml.jackson.databind.ObjectMapper mapper>;
label3:
v4 = virtualinvoke v3.<com.fasterxml.jackson.databind.ObjectMapper: byte[] writeValueAsBytes(java.lang.Object)>(v1);
v5 = staticinvoke <io.vertx.core.buffer.Buffer: io.vertx.core.buffer.Buffer buffer(byte[])>(v4);
label4:
return v5;
label5:
v6 := @caughtexception;
v7 = new io.vertx.core.json.EncodeException;
v8 = virtualinvoke v6.<java.lang.Exception: java.lang.String getMessage()>();
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to encode as JSON: \u0001");
specialinvoke v7.<io.vertx.core.json.EncodeException: void <init>(java.lang.String)>(v9);
throw v7;
catch java.lang.Exception from label1 to label4 with label5;
}
private static java.lang.Object adapt(java.lang.Object)
{
io.vertx.core.json.DecodeException v6;
java.lang.Exception v5;
io.vertx.core.json.JsonArray v2;
io.vertx.core.json.JsonObject v4;
java.lang.Object v0;
java.lang.String v7, v8;
boolean v1, v3;
v0 := @parameter0: java.lang.Object;
label1:
v1 = v0 instanceof java.util.List;
if v1 == 0 goto label3;
v2 = new io.vertx.core.json.JsonArray;
specialinvoke v2.<io.vertx.core.json.JsonArray: void <init>(java.util.List)>(v0);
label2:
return v2;
label3:
v3 = v0 instanceof java.util.Map;
if v3 == 0 goto label5;
v4 = new io.vertx.core.json.JsonObject;
specialinvoke v4.<io.vertx.core.json.JsonObject: void <init>(java.util.Map)>(v0);
label4:
return v4;
label5:
return v0;
label6:
v5 := @caughtexception;
v6 = new io.vertx.core.json.DecodeException;
v7 = virtualinvoke v5.<java.lang.Exception: java.lang.String getMessage()>();
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v7) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Failed to decode: \u0001");
specialinvoke v6.<io.vertx.core.json.DecodeException: void <init>(java.lang.String)>(v8);
throw v6;
catch java.lang.Exception from label1 to label2 with label6;
catch java.lang.Exception from label3 to label4 with label6;
}
static void <clinit>()
{
com.fasterxml.jackson.databind.ObjectMapper v0, v1;
v0 = new com.fasterxml.jackson.databind.ObjectMapper;
specialinvoke v0.<com.fasterxml.jackson.databind.ObjectMapper: void <init>()>();
<io.vertx.core.json.jackson.DatabindCodec: com.fasterxml.jackson.databind.ObjectMapper mapper> = v0;
v1 = new com.fasterxml.jackson.databind.ObjectMapper;
specialinvoke v1.<com.fasterxml.jackson.databind.ObjectMapper: void <init>()>();
<io.vertx.core.json.jackson.DatabindCodec: com.fasterxml.jackson.databind.ObjectMapper prettyMapper> = v1;
staticinvoke <io.vertx.core.json.jackson.DatabindCodec: void initialize()>();
return;
}
}