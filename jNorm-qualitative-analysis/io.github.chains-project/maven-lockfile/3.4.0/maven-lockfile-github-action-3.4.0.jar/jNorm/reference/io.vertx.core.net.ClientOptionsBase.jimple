public abstract class io.vertx.core.net.ClientOptionsBase extends io.vertx.core.net.TCPSSLOptions
{
public static final int DEFAULT_CONNECT_TIMEOUT;
public static final boolean DEFAULT_TRUST_ALL;
public static final java.lang.String DEFAULT_METRICS_NAME;
private int connectTimeout;
private boolean trustAll;
private java.lang.String metricsName;
private io.vertx.core.net.ProxyOptions proxyOptions;
private java.lang.String localAddress;
private java.util.List nonProxyHosts;
public void <init>()
{
io.vertx.core.net.ClientOptionsBase v0;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: void <init>()>();
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: void init()>();
return;
}
public void <init>(io.vertx.core.net.ClientOptionsBase)
{
io.vertx.core.net.ProxyOptions v5, v6, v7;
java.util.ArrayList v10;
java.util.List v11, v9;
io.vertx.core.net.ClientOptionsBase v0, v1;
int v2;
java.lang.String v4, v8;
boolean v3;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: io.vertx.core.net.ClientOptionsBase;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.net.TCPSSLOptions)>(v1);
v2 = virtualinvoke v1.<io.vertx.core.net.ClientOptionsBase: int getConnectTimeout()>();
v0.<io.vertx.core.net.ClientOptionsBase: int connectTimeout> = v2;
v3 = virtualinvoke v1.<io.vertx.core.net.ClientOptionsBase: boolean isTrustAll()>();
v0.<io.vertx.core.net.ClientOptionsBase: boolean trustAll> = v3;
v4 = v1.<io.vertx.core.net.ClientOptionsBase: java.lang.String metricsName>;
v0.<io.vertx.core.net.ClientOptionsBase: java.lang.String metricsName> = v4;
v5 = v1.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ProxyOptions proxyOptions>;
if v5 == null goto label1;
v6 = new io.vertx.core.net.ProxyOptions;
v7 = v1.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ProxyOptions proxyOptions>;
specialinvoke v6.<io.vertx.core.net.ProxyOptions: void <init>(io.vertx.core.net.ProxyOptions)>(v7);
goto label2;
label1:
v6 = null;
label2:
v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ProxyOptions proxyOptions> = v6;
v8 = v1.<io.vertx.core.net.ClientOptionsBase: java.lang.String localAddress>;
v0.<io.vertx.core.net.ClientOptionsBase: java.lang.String localAddress> = v8;
v9 = v1.<io.vertx.core.net.ClientOptionsBase: java.util.List nonProxyHosts>;
if v9 == null goto label3;
v10 = new java.util.ArrayList;
v11 = v1.<io.vertx.core.net.ClientOptionsBase: java.util.List nonProxyHosts>;
specialinvoke v10.<java.util.ArrayList: void <init>(java.util.Collection)>(v11);
goto label4;
label3:
v10 = null;
label4:
v0.<io.vertx.core.net.ClientOptionsBase: java.util.List nonProxyHosts> = v10;
return;
}
public void <init>(io.vertx.core.json.JsonObject)
{
io.vertx.core.json.JsonObject v1;
io.vertx.core.net.ClientOptionsBase v0;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: io.vertx.core.json.JsonObject;
specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: void <init>(io.vertx.core.json.JsonObject)>(v1);
specialinvoke v0.<io.vertx.core.net.ClientOptionsBase: void init()>();
staticinvoke <io.vertx.core.net.ClientOptionsBaseConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.ClientOptionsBase)>(v1, v0);
return;
}
public io.vertx.core.json.JsonObject toJson()
{
io.vertx.core.json.JsonObject v1;
io.vertx.core.net.ClientOptionsBase v0;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.json.JsonObject toJson()>();
staticinvoke <io.vertx.core.net.ClientOptionsBaseConverter: void toJson(io.vertx.core.net.ClientOptionsBase,io.vertx.core.json.JsonObject)>(v0, v1);
return v1;
}
private void init()
{
int v1;
io.vertx.core.net.ClientOptionsBase v0;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 = (int) 60000;
v0.<io.vertx.core.net.ClientOptionsBase: int connectTimeout> = v1;
v0.<io.vertx.core.net.ClientOptionsBase: boolean trustAll> = 0;
v0.<io.vertx.core.net.ClientOptionsBase: java.lang.String metricsName> = "";
v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ProxyOptions proxyOptions> = null;
v0.<io.vertx.core.net.ClientOptionsBase: java.lang.String localAddress> = null;
return;
}
public boolean isTrustAll()
{
io.vertx.core.net.ClientOptionsBase v0;
boolean v1;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 = v0.<io.vertx.core.net.ClientOptionsBase: boolean trustAll>;
return v1;
}
public io.vertx.core.net.ClientOptionsBase setTrustAll(boolean)
{
io.vertx.core.net.ClientOptionsBase v0;
boolean v1;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: boolean;
v0.<io.vertx.core.net.ClientOptionsBase: boolean trustAll> = v1;
return v0;
}
public int getConnectTimeout()
{
int v1;
io.vertx.core.net.ClientOptionsBase v0;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 = v0.<io.vertx.core.net.ClientOptionsBase: int connectTimeout>;
return v1;
}
public io.vertx.core.net.ClientOptionsBase setConnectTimeout(int)
{
int v1;
io.vertx.core.net.ClientOptionsBase v0;
java.lang.IllegalArgumentException v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: int;
if v1 >= 0 goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("connectTimeout must be >= 0");
throw v2;
label1:
v0.<io.vertx.core.net.ClientOptionsBase: int connectTimeout> = v1;
return v0;
}
public java.lang.String getMetricsName()
{
java.lang.String v1;
io.vertx.core.net.ClientOptionsBase v0;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 = v0.<io.vertx.core.net.ClientOptionsBase: java.lang.String metricsName>;
return v1;
}
public io.vertx.core.net.ClientOptionsBase setMetricsName(java.lang.String)
{
java.lang.String v1;
io.vertx.core.net.ClientOptionsBase v0;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: java.lang.String;
v0.<io.vertx.core.net.ClientOptionsBase: java.lang.String metricsName> = v1;
return v0;
}
public io.vertx.core.net.ClientOptionsBase setProxyOptions(io.vertx.core.net.ProxyOptions)
{
io.vertx.core.net.ProxyOptions v1;
io.vertx.core.net.ClientOptionsBase v0;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: io.vertx.core.net.ProxyOptions;
v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ProxyOptions proxyOptions> = v1;
return v0;
}
public io.vertx.core.net.ProxyOptions getProxyOptions()
{
io.vertx.core.net.ProxyOptions v1;
io.vertx.core.net.ClientOptionsBase v0;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 = v0.<io.vertx.core.net.ClientOptionsBase: io.vertx.core.net.ProxyOptions proxyOptions>;
return v1;
}
public java.util.List getNonProxyHosts()
{
java.util.List v1;
io.vertx.core.net.ClientOptionsBase v0;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 = v0.<io.vertx.core.net.ClientOptionsBase: java.util.List nonProxyHosts>;
return v1;
}
public io.vertx.core.net.ClientOptionsBase setNonProxyHosts(java.util.List)
{
java.util.List v1;
io.vertx.core.net.ClientOptionsBase v0;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: java.util.List;
v0.<io.vertx.core.net.ClientOptionsBase: java.util.List nonProxyHosts> = v1;
return v0;
}
public io.vertx.core.net.ClientOptionsBase addNonProxyHost(java.lang.String)
{
java.util.List v2, v4;
io.vertx.core.net.ClientOptionsBase v0;
java.lang.String v1;
java.util.ArrayList v3;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: java.lang.String;
v2 = v0.<io.vertx.core.net.ClientOptionsBase: java.util.List nonProxyHosts>;
if v2 != null goto label1;
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>()>();
v0.<io.vertx.core.net.ClientOptionsBase: java.util.List nonProxyHosts> = v3;
label1:
v4 = v0.<io.vertx.core.net.ClientOptionsBase: java.util.List nonProxyHosts>;
interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(v1);
return v0;
}
public java.lang.String getLocalAddress()
{
java.lang.String v1;
io.vertx.core.net.ClientOptionsBase v0;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 = v0.<io.vertx.core.net.ClientOptionsBase: java.lang.String localAddress>;
return v1;
}
public io.vertx.core.net.ClientOptionsBase setLocalAddress(java.lang.String)
{
java.lang.String v1;
io.vertx.core.net.ClientOptionsBase v0;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: java.lang.String;
v0.<io.vertx.core.net.ClientOptionsBase: java.lang.String localAddress> = v1;
return v0;
}
public io.vertx.core.net.ClientOptionsBase setLogActivity(boolean)
{
io.vertx.core.net.ClientOptionsBase v0;
boolean v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setLogActivity(boolean)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase setActivityLogDataFormat(io.netty.handler.logging.ByteBufFormat)
{
io.vertx.core.net.ClientOptionsBase v0;
io.netty.handler.logging.ByteBufFormat v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: io.netty.handler.logging.ByteBufFormat;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setActivityLogDataFormat(io.netty.handler.logging.ByteBufFormat)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase setTcpNoDelay(boolean)
{
io.vertx.core.net.ClientOptionsBase v0;
boolean v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpNoDelay(boolean)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase setTcpKeepAlive(boolean)
{
io.vertx.core.net.ClientOptionsBase v0;
boolean v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpKeepAlive(boolean)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase setSoLinger(int)
{
int v1;
io.vertx.core.net.ClientOptionsBase v0;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSoLinger(int)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase setIdleTimeout(int)
{
int v1;
io.vertx.core.net.ClientOptionsBase v0;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeout(int)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase setReadIdleTimeout(int)
{
int v1;
io.vertx.core.net.ClientOptionsBase v0;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReadIdleTimeout(int)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase setWriteIdleTimeout(int)
{
int v1;
io.vertx.core.net.ClientOptionsBase v0;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setWriteIdleTimeout(int)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase setIdleTimeoutUnit(java.util.concurrent.TimeUnit)
{
java.util.concurrent.TimeUnit v1;
io.vertx.core.net.ClientOptionsBase v0;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: java.util.concurrent.TimeUnit;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setIdleTimeoutUnit(java.util.concurrent.TimeUnit)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase setSsl(boolean)
{
io.vertx.core.net.ClientOptionsBase v0;
boolean v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSsl(boolean)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase setKeyCertOptions(io.vertx.core.net.KeyCertOptions)
{
io.vertx.core.net.ClientOptionsBase v0;
io.vertx.core.net.KeyCertOptions v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: io.vertx.core.net.KeyCertOptions;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setKeyCertOptions(io.vertx.core.net.KeyCertOptions)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase setKeyStoreOptions(io.vertx.core.net.JksOptions)
{
io.vertx.core.net.ClientOptionsBase v0;
io.vertx.core.net.JksOptions v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: io.vertx.core.net.JksOptions;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setKeyStoreOptions(io.vertx.core.net.JksOptions)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)
{
io.vertx.core.net.ClientOptionsBase v0;
io.vertx.core.net.PfxOptions v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: io.vertx.core.net.PfxOptions;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxKeyCertOptions(io.vertx.core.net.PfxOptions)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)
{
io.vertx.core.net.ClientOptionsBase v0;
io.vertx.core.net.PemKeyCertOptions v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: io.vertx.core.net.PemKeyCertOptions;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemKeyCertOptions(io.vertx.core.net.PemKeyCertOptions)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase setTrustOptions(io.vertx.core.net.TrustOptions)
{
io.vertx.core.net.TrustOptions v1;
io.vertx.core.net.ClientOptionsBase v0;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: io.vertx.core.net.TrustOptions;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrustOptions(io.vertx.core.net.TrustOptions)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase setTrustStoreOptions(io.vertx.core.net.JksOptions)
{
io.vertx.core.net.ClientOptionsBase v0;
io.vertx.core.net.JksOptions v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: io.vertx.core.net.JksOptions;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrustStoreOptions(io.vertx.core.net.JksOptions)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase setPfxTrustOptions(io.vertx.core.net.PfxOptions)
{
io.vertx.core.net.ClientOptionsBase v0;
io.vertx.core.net.PfxOptions v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: io.vertx.core.net.PfxOptions;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPfxTrustOptions(io.vertx.core.net.PfxOptions)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase setPemTrustOptions(io.vertx.core.net.PemTrustOptions)
{
io.vertx.core.net.ClientOptionsBase v0;
io.vertx.core.net.PemTrustOptions v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: io.vertx.core.net.PemTrustOptions;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setPemTrustOptions(io.vertx.core.net.PemTrustOptions)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase setUseAlpn(boolean)
{
io.vertx.core.net.ClientOptionsBase v0;
boolean v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setUseAlpn(boolean)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)
{
io.vertx.core.net.SSLEngineOptions v1;
io.vertx.core.net.ClientOptionsBase v0;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: io.vertx.core.net.SSLEngineOptions;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSslEngineOptions(io.vertx.core.net.SSLEngineOptions)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)
{
io.vertx.core.net.ClientOptionsBase v0;
io.vertx.core.net.JdkSSLEngineOptions v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: io.vertx.core.net.JdkSSLEngineOptions;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setJdkSslEngineOptions(io.vertx.core.net.JdkSSLEngineOptions)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)
{
io.vertx.core.net.OpenSSLEngineOptions v1;
io.vertx.core.net.ClientOptionsBase v0;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: io.vertx.core.net.OpenSSLEngineOptions;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setOpenSslEngineOptions(io.vertx.core.net.OpenSSLEngineOptions)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase setSendBufferSize(int)
{
int v1;
io.vertx.core.net.ClientOptionsBase v0;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setSendBufferSize(int)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase setReceiveBufferSize(int)
{
int v1;
io.vertx.core.net.ClientOptionsBase v0;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReceiveBufferSize(int)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase setReuseAddress(boolean)
{
io.vertx.core.net.ClientOptionsBase v0;
boolean v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReuseAddress(boolean)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase setReusePort(boolean)
{
io.vertx.core.net.ClientOptionsBase v0;
boolean v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setReusePort(boolean)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase setTrafficClass(int)
{
int v1;
io.vertx.core.net.ClientOptionsBase v0;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTrafficClass(int)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase addEnabledCipherSuite(java.lang.String)
{
java.lang.String v1;
io.vertx.core.net.ClientOptionsBase v0;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions addEnabledCipherSuite(java.lang.String)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase removeEnabledCipherSuite(java.lang.String)
{
java.lang.String v1;
io.vertx.core.net.ClientOptionsBase v0;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions removeEnabledCipherSuite(java.lang.String)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase addCrlPath(java.lang.String) throws java.lang.NullPointerException
{
java.lang.String v1;
io.vertx.core.net.ClientOptionsBase v0;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions addCrlPath(java.lang.String)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase addCrlValue(io.vertx.core.buffer.Buffer) throws java.lang.NullPointerException
{
io.vertx.core.buffer.Buffer v1;
io.vertx.core.net.ClientOptionsBase v0;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: io.vertx.core.buffer.Buffer;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions addCrlValue(io.vertx.core.buffer.Buffer)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase addEnabledSecureTransportProtocol(java.lang.String)
{
java.lang.String v1;
io.vertx.core.net.ClientOptionsBase v0;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions addEnabledSecureTransportProtocol(java.lang.String)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase removeEnabledSecureTransportProtocol(java.lang.String)
{
java.lang.String v1;
io.vertx.core.net.ClientOptionsBase v0;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: java.lang.String;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions removeEnabledSecureTransportProtocol(java.lang.String)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase setTcpFastOpen(boolean)
{
io.vertx.core.net.ClientOptionsBase v0;
boolean v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpFastOpen(boolean)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase setTcpCork(boolean)
{
io.vertx.core.net.ClientOptionsBase v0;
boolean v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpCork(boolean)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase setTcpQuickAck(boolean)
{
io.vertx.core.net.ClientOptionsBase v0;
boolean v1;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpQuickAck(boolean)>(v1);
return v2;
}
public io.vertx.core.net.ClientOptionsBase setTcpUserTimeout(int)
{
int v1;
io.vertx.core.net.ClientOptionsBase v0;
io.vertx.core.net.TCPSSLOptions v2;
v0 := @this: io.vertx.core.net.ClientOptionsBase;
v1 := @parameter0: int;
v2 = specialinvoke v0.<io.vertx.core.net.TCPSSLOptions: io.vertx.core.net.TCPSSLOptions setTcpUserTimeout(int)>(v1);
return v2;
}
}