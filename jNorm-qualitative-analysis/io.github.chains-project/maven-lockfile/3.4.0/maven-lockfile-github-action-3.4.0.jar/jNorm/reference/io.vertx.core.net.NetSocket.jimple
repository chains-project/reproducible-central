public interface  io.vertx.core.net.NetSocket extends java.lang.Object implements io.vertx.core.streams.ReadStream, io.vertx.core.streams.WriteStream
{
public abstract io.vertx.core.net.NetSocket exceptionHandler(io.vertx.core.Handler);
public abstract io.vertx.core.net.NetSocket handler(io.vertx.core.Handler);
public abstract io.vertx.core.net.NetSocket pause();
public abstract io.vertx.core.net.NetSocket resume();
public abstract io.vertx.core.net.NetSocket fetch(long);
public abstract io.vertx.core.net.NetSocket endHandler(io.vertx.core.Handler);
public abstract io.vertx.core.net.NetSocket setWriteQueueMaxSize(int);
public abstract io.vertx.core.net.NetSocket drainHandler(io.vertx.core.Handler);
public abstract java.lang.String writeHandlerID();
public abstract void write(java.lang.String, io.vertx.core.Handler);
public abstract io.vertx.core.Future write(java.lang.String);
public abstract void write(java.lang.String, java.lang.String, io.vertx.core.Handler);
public abstract io.vertx.core.Future write(java.lang.String, java.lang.String);
public abstract void write(io.vertx.core.buffer.Buffer, io.vertx.core.Handler);
public io.vertx.core.Future sendFile(java.lang.String)
{
java.lang.String v1;
io.vertx.core.Future v2;
io.vertx.core.net.NetSocket v0;
v0 := @this: io.vertx.core.net.NetSocket;
v1 := @parameter0: java.lang.String;
v2 = interfaceinvoke v0.<io.vertx.core.net.NetSocket: io.vertx.core.Future sendFile(java.lang.String,long,long)>(v1, 0L, 9223372036854775807L);
return v2;
}
public io.vertx.core.Future sendFile(java.lang.String, long)
{
long v2;
java.lang.String v1;
io.vertx.core.Future v3;
io.vertx.core.net.NetSocket v0;
v0 := @this: io.vertx.core.net.NetSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
v3 = interfaceinvoke v0.<io.vertx.core.net.NetSocket: io.vertx.core.Future sendFile(java.lang.String,long,long)>(v1, v2, 9223372036854775807L);
return v3;
}
public abstract io.vertx.core.Future sendFile(java.lang.String, long, long);
public io.vertx.core.net.NetSocket sendFile(java.lang.String, io.vertx.core.Handler)
{
java.lang.String v1;
io.vertx.core.Handler v2;
io.vertx.core.net.NetSocket v0, v3;
v0 := @this: io.vertx.core.net.NetSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: io.vertx.core.Handler;
v3 = interfaceinvoke v0.<io.vertx.core.net.NetSocket: io.vertx.core.net.NetSocket sendFile(java.lang.String,long,long,io.vertx.core.Handler)>(v1, 0L, 9223372036854775807L, v2);
return v3;
}
public io.vertx.core.net.NetSocket sendFile(java.lang.String, long, io.vertx.core.Handler)
{
long v2;
java.lang.String v1;
io.vertx.core.Handler v3;
io.vertx.core.net.NetSocket v0, v4;
v0 := @this: io.vertx.core.net.NetSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
v3 := @parameter2: io.vertx.core.Handler;
v4 = interfaceinvoke v0.<io.vertx.core.net.NetSocket: io.vertx.core.net.NetSocket sendFile(java.lang.String,long,long,io.vertx.core.Handler)>(v1, v2, 9223372036854775807L, v3);
return v4;
}
public abstract io.vertx.core.net.NetSocket sendFile(java.lang.String, long, long, io.vertx.core.Handler);
public abstract io.vertx.core.net.SocketAddress remoteAddress();
public abstract io.vertx.core.net.SocketAddress remoteAddress(boolean);
public abstract io.vertx.core.net.SocketAddress localAddress();
public abstract io.vertx.core.net.SocketAddress localAddress(boolean);
public abstract io.vertx.core.Future end();
public abstract void end(io.vertx.core.Handler);
public abstract io.vertx.core.Future close();
public abstract void close(io.vertx.core.Handler);
public abstract io.vertx.core.net.NetSocket closeHandler(io.vertx.core.Handler);
public abstract io.vertx.core.net.NetSocket upgradeToSsl(io.vertx.core.Handler);
public abstract io.vertx.core.Future upgradeToSsl();
public abstract io.vertx.core.net.NetSocket upgradeToSsl(java.lang.String, io.vertx.core.Handler);
public abstract io.vertx.core.Future upgradeToSsl(java.lang.String);
public abstract boolean isSsl();
public abstract javax.net.ssl.SSLSession sslSession();
public abstract javax.security.cert.X509Certificate[] peerCertificateChain() throws javax.net.ssl.SSLPeerUnverifiedException;
public abstract java.util.List peerCertificates() throws javax.net.ssl.SSLPeerUnverifiedException;
public abstract java.lang.String indicatedServerName();
public abstract java.lang.String applicationLayerProtocol();
}