public class io.vertx.core.net.OpenSSLEngineOptions extends io.vertx.core.net.SSLEngineOptions
{
public static final boolean DEFAULT_SESSION_CACHE_ENABLED;
private boolean sessionCacheEnabled;
public static boolean isAvailable()
{
boolean v0;
v0 = staticinvoke <io.netty.handler.ssl.OpenSsl: boolean isAvailable()>();
return v0;
}
public static boolean isAlpnAvailable()
{
boolean v0;
v0 = staticinvoke <io.netty.handler.ssl.OpenSsl: boolean isAlpnSupported()>();
return v0;
}
public void <init>()
{
io.vertx.core.net.OpenSSLEngineOptions v0;
v0 := @this: io.vertx.core.net.OpenSSLEngineOptions;
specialinvoke v0.<io.vertx.core.net.SSLEngineOptions: void <init>()>();
v0.<io.vertx.core.net.OpenSSLEngineOptions: boolean sessionCacheEnabled> = 1;
return;
}
public void <init>(io.vertx.core.json.JsonObject)
{
io.vertx.core.json.JsonObject v1;
io.vertx.core.net.OpenSSLEngineOptions v0;
v0 := @this: io.vertx.core.net.OpenSSLEngineOptions;
v1 := @parameter0: io.vertx.core.json.JsonObject;
specialinvoke v0.<io.vertx.core.net.SSLEngineOptions: void <init>(io.vertx.core.json.JsonObject)>(v1);
staticinvoke <io.vertx.core.net.OpenSSLEngineOptionsConverter: void fromJson(java.lang.Iterable,io.vertx.core.net.OpenSSLEngineOptions)>(v1, v0);
return;
}
public void <init>(io.vertx.core.net.OpenSSLEngineOptions)
{
io.vertx.core.net.OpenSSLEngineOptions v0, v1;
boolean v2;
v0 := @this: io.vertx.core.net.OpenSSLEngineOptions;
v1 := @parameter0: io.vertx.core.net.OpenSSLEngineOptions;
specialinvoke v0.<io.vertx.core.net.SSLEngineOptions: void <init>(io.vertx.core.net.SSLEngineOptions)>(v1);
v2 = virtualinvoke v1.<io.vertx.core.net.OpenSSLEngineOptions: boolean isSessionCacheEnabled()>();
v0.<io.vertx.core.net.OpenSSLEngineOptions: boolean sessionCacheEnabled> = v2;
return;
}
public io.vertx.core.net.OpenSSLEngineOptions setSessionCacheEnabled(boolean)
{
io.vertx.core.net.OpenSSLEngineOptions v0;
boolean v1;
v0 := @this: io.vertx.core.net.OpenSSLEngineOptions;
v1 := @parameter0: boolean;
v0.<io.vertx.core.net.OpenSSLEngineOptions: boolean sessionCacheEnabled> = v1;
return v0;
}
public boolean isSessionCacheEnabled()
{
io.vertx.core.net.OpenSSLEngineOptions v0;
boolean v1;
v0 := @this: io.vertx.core.net.OpenSSLEngineOptions;
v1 = v0.<io.vertx.core.net.OpenSSLEngineOptions: boolean sessionCacheEnabled>;
return v1;
}
public io.vertx.core.net.OpenSSLEngineOptions setUseWorkerThread(boolean)
{
io.vertx.core.net.SSLEngineOptions v2;
io.vertx.core.net.OpenSSLEngineOptions v0;
boolean v1;
v0 := @this: io.vertx.core.net.OpenSSLEngineOptions;
v1 := @parameter0: boolean;
v2 = specialinvoke v0.<io.vertx.core.net.SSLEngineOptions: io.vertx.core.net.SSLEngineOptions setUseWorkerThread(boolean)>(v1);
return v2;
}
public io.vertx.core.json.JsonObject toJson()
{
io.vertx.core.json.JsonObject v1;
io.vertx.core.net.OpenSSLEngineOptions v0;
v0 := @this: io.vertx.core.net.OpenSSLEngineOptions;
v1 = new io.vertx.core.json.JsonObject;
specialinvoke v1.<io.vertx.core.json.JsonObject: void <init>()>();
staticinvoke <io.vertx.core.net.OpenSSLEngineOptionsConverter: void toJson(io.vertx.core.net.OpenSSLEngineOptions,io.vertx.core.json.JsonObject)>(v0, v1);
return v1;
}
public io.vertx.core.net.OpenSSLEngineOptions copy()
{
io.vertx.core.net.OpenSSLEngineOptions v0, v1;
v0 := @this: io.vertx.core.net.OpenSSLEngineOptions;
v1 = new io.vertx.core.net.OpenSSLEngineOptions;
specialinvoke v1.<io.vertx.core.net.OpenSSLEngineOptions: void <init>(io.vertx.core.net.OpenSSLEngineOptions)>(v0);
return v1;
}
public io.vertx.core.spi.tls.SslContextFactory sslContextFactory()
{
io.vertx.core.net.OpenSSLEngineOptions v0;
io.netty.handler.ssl.SslProvider v2;
io.vertx.core.spi.tls.DefaultSslContextFactory v1;
boolean v3;
v0 := @this: io.vertx.core.net.OpenSSLEngineOptions;
v1 = new io.vertx.core.spi.tls.DefaultSslContextFactory;
v2 = <io.netty.handler.ssl.SslProvider: io.netty.handler.ssl.SslProvider OPENSSL>;
v3 = v0.<io.vertx.core.net.OpenSSLEngineOptions: boolean sessionCacheEnabled>;
specialinvoke v1.<io.vertx.core.spi.tls.DefaultSslContextFactory: void <init>(io.netty.handler.ssl.SslProvider,boolean)>(v2, v3);
return v1;
}
}