class io.vertx.core.net.TrustManagerFactoryWrapper extends javax.net.ssl.TrustManagerFactory
{
private static final org.slf4j.Logger LOGGER;
private static final java.lang.String KEY_MANAGER_FACTORY_ALGORITHM;
private static final java.security.Provider PROVIDER;
void <init>(javax.net.ssl.TrustManager)
{
io.vertx.core.net.TrustManagerFactoryWrapper$TrustManagerFactorySpiWrapper v2;
io.vertx.core.net.TrustManagerFactoryWrapper v0;
javax.net.ssl.TrustManager v1;
java.security.Provider v3;
v0 := @this: io.vertx.core.net.TrustManagerFactoryWrapper;
v1 := @parameter0: javax.net.ssl.TrustManager;
v2 = new io.vertx.core.net.TrustManagerFactoryWrapper$TrustManagerFactorySpiWrapper;
specialinvoke v2.<io.vertx.core.net.TrustManagerFactoryWrapper$TrustManagerFactorySpiWrapper: void <init>(javax.net.ssl.TrustManager)>(v1);
v3 = <io.vertx.core.net.TrustManagerFactoryWrapper: java.security.Provider PROVIDER>;
specialinvoke v0.<javax.net.ssl.TrustManagerFactory: void <init>(javax.net.ssl.TrustManagerFactorySpi,java.security.Provider,java.lang.String)>(v2, v3, "no-algorithm");
return;
}
static void <clinit>()
{
io.vertx.core.net.TrustManagerFactoryWrapper$1 v1;
org.slf4j.Logger v0;
v0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lio/vertx/core/net/TrustManagerFactoryWrapper;");
<io.vertx.core.net.TrustManagerFactoryWrapper: org.slf4j.Logger LOGGER> = v0;
v1 = new io.vertx.core.net.TrustManagerFactoryWrapper$1;
specialinvoke v1.<io.vertx.core.net.TrustManagerFactoryWrapper$1: void <init>(java.lang.String,double,java.lang.String)>("", 1.0, "");
<io.vertx.core.net.TrustManagerFactoryWrapper: java.security.Provider PROVIDER> = v1;
return;
}
}