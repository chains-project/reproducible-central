class io.vertx.core.net.impl.ChannelProvider$3$1 extends io.netty.channel.ChannelInboundHandlerAdapter
{
final io.netty.channel.ChannelPipeline val$pipeline;
final io.netty.channel.Channel val$ch;
final io.vertx.core.net.impl.ChannelProvider$3 this$1;
void <init>(io.vertx.core.net.impl.ChannelProvider$3, io.netty.channel.ChannelPipeline, io.netty.channel.Channel)
{
io.netty.channel.Channel v3;
io.vertx.core.net.impl.ChannelProvider$3$1 v0;
io.vertx.core.net.impl.ChannelProvider$3 v1;
io.netty.channel.ChannelPipeline v2;
v0 := @this: io.vertx.core.net.impl.ChannelProvider$3$1;
v1 := @parameter0: io.vertx.core.net.impl.ChannelProvider$3;
v2 := @parameter1: io.netty.channel.ChannelPipeline;
v3 := @parameter2: io.netty.channel.Channel;
v0.<io.vertx.core.net.impl.ChannelProvider$3$1: io.vertx.core.net.impl.ChannelProvider$3 this$1> = v1;
v0.<io.vertx.core.net.impl.ChannelProvider$3$1: io.netty.channel.ChannelPipeline val$pipeline> = v2;
v0.<io.vertx.core.net.impl.ChannelProvider$3$1: io.netty.channel.Channel val$ch> = v3;
specialinvoke v0.<io.netty.channel.ChannelInboundHandlerAdapter: void <init>()>();
return;
}
public void userEventTriggered(io.netty.channel.ChannelHandlerContext, java.lang.Object)
{
io.vertx.core.net.impl.ChannelProvider$3$1 v0;
io.netty.handler.proxy.ProxyHandler v6;
io.vertx.core.net.impl.ChannelProvider$3 v10, v12, v14, v16, v18, v21, v23, v25, v28, v30, v5, v8;
io.vertx.core.net.impl.ChannelProvider v24, v9;
boolean v17, v19, v29, v3;
io.netty.channel.ChannelPipeline v4, v7;
io.netty.channel.ChannelHandlerContext v1;
java.lang.String v15;
io.vertx.core.net.SocketAddress v13;
io.netty.util.concurrent.Promise v22, v31;
io.netty.channel.Channel v20, v27;
java.lang.Object v2;
io.vertx.core.Handler v11, v26;
v0 := @this: io.vertx.core.net.impl.ChannelProvider$3$1;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Object;
v3 = v2 instanceof io.netty.handler.proxy.ProxyConnectionEvent;
if v3 == 0 goto label1;
v4 = v0.<io.vertx.core.net.impl.ChannelProvider$3$1: io.netty.channel.ChannelPipeline val$pipeline>;
v5 = v0.<io.vertx.core.net.impl.ChannelProvider$3$1: io.vertx.core.net.impl.ChannelProvider$3 this$1>;
v6 = v5.<io.vertx.core.net.impl.ChannelProvider$3: io.netty.handler.proxy.ProxyHandler val$proxy>;
interfaceinvoke v4.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline remove(io.netty.channel.ChannelHandler)>(v6);
v7 = v0.<io.vertx.core.net.impl.ChannelProvider$3$1: io.netty.channel.ChannelPipeline val$pipeline>;
interfaceinvoke v7.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline remove(io.netty.channel.ChannelHandler)>(v0);
v8 = v0.<io.vertx.core.net.impl.ChannelProvider$3$1: io.vertx.core.net.impl.ChannelProvider$3 this$1>;
v9 = v8.<io.vertx.core.net.impl.ChannelProvider$3: io.vertx.core.net.impl.ChannelProvider this$0>;
v10 = v0.<io.vertx.core.net.impl.ChannelProvider$3$1: io.vertx.core.net.impl.ChannelProvider$3 this$1>;
v11 = v10.<io.vertx.core.net.impl.ChannelProvider$3: io.vertx.core.Handler val$handler>;
v12 = v0.<io.vertx.core.net.impl.ChannelProvider$3$1: io.vertx.core.net.impl.ChannelProvider$3 this$1>;
v13 = v12.<io.vertx.core.net.impl.ChannelProvider$3: io.vertx.core.net.SocketAddress val$peerAddress>;
v14 = v0.<io.vertx.core.net.impl.ChannelProvider$3$1: io.vertx.core.net.impl.ChannelProvider$3 this$1>;
v15 = v14.<io.vertx.core.net.impl.ChannelProvider$3: java.lang.String val$serverName>;
v16 = v0.<io.vertx.core.net.impl.ChannelProvider$3$1: io.vertx.core.net.impl.ChannelProvider$3 this$1>;
v17 = v16.<io.vertx.core.net.impl.ChannelProvider$3: boolean val$ssl>;
v18 = v0.<io.vertx.core.net.impl.ChannelProvider$3$1: io.vertx.core.net.impl.ChannelProvider$3 this$1>;
v19 = v18.<io.vertx.core.net.impl.ChannelProvider$3: boolean val$useAlpn>;
v20 = v0.<io.vertx.core.net.impl.ChannelProvider$3$1: io.netty.channel.Channel val$ch>;
v21 = v0.<io.vertx.core.net.impl.ChannelProvider$3$1: io.vertx.core.net.impl.ChannelProvider$3 this$1>;
v22 = v21.<io.vertx.core.net.impl.ChannelProvider$3: io.netty.util.concurrent.Promise val$channelHandler>;
specialinvoke v9.<io.vertx.core.net.impl.ChannelProvider: void initSSL(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,java.lang.String,boolean,boolean,io.netty.channel.Channel,io.netty.util.concurrent.Promise)>(v11, v13, v15, v17, v19, v20, v22);
v23 = v0.<io.vertx.core.net.impl.ChannelProvider$3$1: io.vertx.core.net.impl.ChannelProvider$3 this$1>;
v24 = v23.<io.vertx.core.net.impl.ChannelProvider$3: io.vertx.core.net.impl.ChannelProvider this$0>;
v25 = v0.<io.vertx.core.net.impl.ChannelProvider$3$1: io.vertx.core.net.impl.ChannelProvider$3 this$1>;
v26 = v25.<io.vertx.core.net.impl.ChannelProvider$3: io.vertx.core.Handler val$handler>;
v27 = v0.<io.vertx.core.net.impl.ChannelProvider$3$1: io.netty.channel.Channel val$ch>;
v28 = v0.<io.vertx.core.net.impl.ChannelProvider$3$1: io.vertx.core.net.impl.ChannelProvider$3 this$1>;
v29 = v28.<io.vertx.core.net.impl.ChannelProvider$3: boolean val$ssl>;
v30 = v0.<io.vertx.core.net.impl.ChannelProvider$3$1: io.vertx.core.net.impl.ChannelProvider$3 this$1>;
v31 = v30.<io.vertx.core.net.impl.ChannelProvider$3: io.netty.util.concurrent.Promise val$channelHandler>;
specialinvoke v24.<io.vertx.core.net.impl.ChannelProvider: void connected(io.vertx.core.Handler,io.netty.channel.Channel,boolean,io.netty.util.concurrent.Promise)>(v26, v27, v29, v31);
label1:
interfaceinvoke v1.<io.netty.channel.ChannelHandlerContext: io.netty.channel.ChannelHandlerContext fireUserEventTriggered(java.lang.Object)>(v2);
return;
}
public void exceptionCaught(io.netty.channel.ChannelHandlerContext, java.lang.Throwable)
{
java.lang.Throwable v2;
io.netty.channel.ChannelHandlerContext v1;
io.vertx.core.net.impl.ChannelProvider$3$1 v0;
io.netty.util.concurrent.Promise v4;
io.vertx.core.net.impl.ChannelProvider$3 v3;
v0 := @this: io.vertx.core.net.impl.ChannelProvider$3$1;
v1 := @parameter0: io.netty.channel.ChannelHandlerContext;
v2 := @parameter1: java.lang.Throwable;
v3 = v0.<io.vertx.core.net.impl.ChannelProvider$3$1: io.vertx.core.net.impl.ChannelProvider$3 this$1>;
v4 = v3.<io.vertx.core.net.impl.ChannelProvider$3: io.netty.util.concurrent.Promise val$channelHandler>;
interfaceinvoke v4.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>(v2);
return;
}
}