public final class io.vertx.core.net.impl.ChannelProvider extends java.lang.Object
{
private final io.netty.bootstrap.Bootstrap bootstrap;
private final io.vertx.core.net.impl.SslChannelProvider sslContextProvider;
private final io.vertx.core.impl.ContextInternal context;
private io.vertx.core.net.ProxyOptions proxyOptions;
private java.lang.String applicationProtocol;
private io.vertx.core.Handler handler;
public void <init>(io.netty.bootstrap.Bootstrap, io.vertx.core.net.impl.SslChannelProvider, io.vertx.core.impl.ContextInternal)
{
io.netty.bootstrap.Bootstrap v1;
io.vertx.core.net.impl.SslChannelProvider v2;
io.vertx.core.net.impl.ChannelProvider v0;
io.vertx.core.impl.ContextInternal v3;
v0 := @this: io.vertx.core.net.impl.ChannelProvider;
v1 := @parameter0: io.netty.bootstrap.Bootstrap;
v2 := @parameter1: io.vertx.core.net.impl.SslChannelProvider;
v3 := @parameter2: io.vertx.core.impl.ContextInternal;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.net.impl.ChannelProvider: io.netty.bootstrap.Bootstrap bootstrap> = v1;
v0.<io.vertx.core.net.impl.ChannelProvider: io.vertx.core.impl.ContextInternal context> = v3;
v0.<io.vertx.core.net.impl.ChannelProvider: io.vertx.core.net.impl.SslChannelProvider sslContextProvider> = v2;
return;
}
public io.vertx.core.net.impl.ChannelProvider proxyOptions(io.vertx.core.net.ProxyOptions)
{
io.vertx.core.net.ProxyOptions v1;
io.vertx.core.net.impl.ChannelProvider v0;
v0 := @this: io.vertx.core.net.impl.ChannelProvider;
v1 := @parameter0: io.vertx.core.net.ProxyOptions;
v0.<io.vertx.core.net.impl.ChannelProvider: io.vertx.core.net.ProxyOptions proxyOptions> = v1;
return v0;
}
public io.vertx.core.net.impl.ChannelProvider handler(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.core.net.impl.ChannelProvider v0;
v0 := @this: io.vertx.core.net.impl.ChannelProvider;
v1 := @parameter0: io.vertx.core.Handler;
v0.<io.vertx.core.net.impl.ChannelProvider: io.vertx.core.Handler handler> = v1;
return v0;
}
public java.lang.String applicationProtocol()
{
java.lang.String v1;
io.vertx.core.net.impl.ChannelProvider v0;
v0 := @this: io.vertx.core.net.impl.ChannelProvider;
v1 = v0.<io.vertx.core.net.impl.ChannelProvider: java.lang.String applicationProtocol>;
return v1;
}
public io.netty.util.concurrent.Future connect(io.vertx.core.net.SocketAddress, io.vertx.core.net.SocketAddress, java.lang.String, boolean, boolean)
{
io.netty.util.concurrent.Promise v8;
io.vertx.core.impl.ContextInternal v6;
io.netty.channel.EventLoop v7;
io.vertx.core.net.impl.ChannelProvider v0;
java.lang.String v3;
io.vertx.core.Handler v9;
boolean v4, v5;
io.vertx.core.net.SocketAddress v1, v2;
v0 := @this: io.vertx.core.net.impl.ChannelProvider;
v1 := @parameter0: io.vertx.core.net.SocketAddress;
v2 := @parameter1: io.vertx.core.net.SocketAddress;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: boolean;
v5 := @parameter4: boolean;
v6 = v0.<io.vertx.core.net.impl.ChannelProvider: io.vertx.core.impl.ContextInternal context>;
v7 = interfaceinvoke v6.<io.vertx.core.impl.ContextInternal: io.netty.channel.EventLoop nettyEventLoop()>();
v8 = interfaceinvoke v7.<io.netty.channel.EventLoop: io.netty.util.concurrent.Promise newPromise()>();
v9 = v0.<io.vertx.core.net.impl.ChannelProvider: io.vertx.core.Handler handler>;
specialinvoke v0.<io.vertx.core.net.impl.ChannelProvider: void connect(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,boolean,boolean,io.netty.util.concurrent.Promise)>(v9, v1, v2, v3, v4, v5, v8);
return v8;
}
private void connect(io.vertx.core.Handler, io.vertx.core.net.SocketAddress, io.vertx.core.net.SocketAddress, java.lang.String, boolean, boolean, io.netty.util.concurrent.Promise)
{
io.vertx.core.impl.ContextInternal v9;
io.vertx.core.spi.transport.Transport v11;
io.vertx.core.net.impl.ChannelProvider v0;
io.netty.channel.ChannelFactory v13;
java.lang.String v4;
boolean v12, v5, v6;
io.vertx.core.net.SocketAddress v2, v3;
io.vertx.core.net.ProxyOptions v15;
io.vertx.core.impl.VertxInternal v10;
io.netty.util.concurrent.Promise v7;
java.lang.Exception v14;
io.netty.bootstrap.Bootstrap v8;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.net.impl.ChannelProvider;
v1 := @parameter0: io.vertx.core.Handler;
v2 := @parameter1: io.vertx.core.net.SocketAddress;
v3 := @parameter2: io.vertx.core.net.SocketAddress;
v4 := @parameter3: java.lang.String;
v5 := @parameter4: boolean;
v6 := @parameter5: boolean;
v7 := @parameter6: io.netty.util.concurrent.Promise;
label1:
v8 = v0.<io.vertx.core.net.impl.ChannelProvider: io.netty.bootstrap.Bootstrap bootstrap>;
v9 = v0.<io.vertx.core.net.impl.ChannelProvider: io.vertx.core.impl.ContextInternal context>;
v10 = interfaceinvoke v9.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.VertxInternal owner()>();
v11 = interfaceinvoke v10.<io.vertx.core.impl.VertxInternal: io.vertx.core.spi.transport.Transport transport()>();
v12 = interfaceinvoke v2.<io.vertx.core.net.SocketAddress: boolean isDomainSocket()>();
v13 = interfaceinvoke v11.<io.vertx.core.spi.transport.Transport: io.netty.channel.ChannelFactory channelFactory(boolean)>(v12);
virtualinvoke v8.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.AbstractBootstrap channelFactory(io.netty.channel.ChannelFactory)>(v13);
label2:
goto label4;
label3:
v14 := @caughtexception;
interfaceinvoke v7.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setFailure(java.lang.Throwable)>(v14);
return;
label4:
v15 = v0.<io.vertx.core.net.impl.ChannelProvider: io.vertx.core.net.ProxyOptions proxyOptions>;
if v15 == null goto label5;
specialinvoke v0.<io.vertx.core.net.impl.ChannelProvider: void handleProxyConnect(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,boolean,boolean,io.netty.util.concurrent.Promise)>(v1, v2, v3, v4, v5, v6, v7);
goto label6;
label5:
specialinvoke v0.<io.vertx.core.net.impl.ChannelProvider: void handleConnect(io.vertx.core.Handler,io.vertx.core.net.SocketAddress,io.vertx.core.net.SocketAddress,java.lang.String,boolean,boolean,io.netty.util.concurrent.Promise)>(v1, v2, v3, v4, v5, v6, v7);
label6:
return;
catch java.lang.Exception from label1 to label2 with label3;
}
private void initSSL(io.vertx.core.Handler, io.vertx.core.net.SocketAddress, java.lang.String, boolean, boolean, io.netty.channel.Channel, io.netty.util.concurrent.Promise)
{
io.netty.util.concurrent.Promise v7;
io.vertx.core.net.impl.ChannelProvider$1 v12;
io.netty.channel.ChannelPipeline v10;
io.netty.channel.ChannelHandler[] v11;
io.netty.channel.Channel v6;
io.vertx.core.net.impl.SslChannelProvider v8;
io.netty.handler.ssl.SslHandler v9;
io.vertx.core.net.impl.ChannelProvider v0;
java.lang.String v3;
io.vertx.core.Handler v1;
boolean v4, v5;
io.vertx.core.net.SocketAddress v2;
v0 := @this: io.vertx.core.net.impl.ChannelProvider;
v1 := @parameter0: io.vertx.core.Handler;
v2 := @parameter1: io.vertx.core.net.SocketAddress;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: boolean;
v5 := @parameter4: boolean;
v6 := @parameter5: io.netty.channel.Channel;
v7 := @parameter6: io.netty.util.concurrent.Promise;
if v4 == 0 goto label1;
v8 = v0.<io.vertx.core.net.impl.ChannelProvider: io.vertx.core.net.impl.SslChannelProvider sslContextProvider>;
v9 = virtualinvoke v8.<io.vertx.core.net.impl.SslChannelProvider: io.netty.handler.ssl.SslHandler createClientSslHandler(io.vertx.core.net.SocketAddress,java.lang.String,boolean)>(v2, v3, v5);
v10 = interfaceinvoke v6.<io.netty.channel.Channel: io.netty.channel.ChannelPipeline pipeline()>();
interfaceinvoke v10.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline addLast(java.lang.String,io.netty.channel.ChannelHandler)>("ssl", v9);
v11 = newarray (io.netty.channel.ChannelHandler)[1];
v12 = new io.vertx.core.net.impl.ChannelProvider$1;
specialinvoke v12.<io.vertx.core.net.impl.ChannelProvider$1: void <init>(io.vertx.core.net.impl.ChannelProvider,io.netty.handler.ssl.SslHandler,io.vertx.core.Handler,io.netty.channel.Channel,io.netty.util.concurrent.Promise)>(v0, v9, v1, v6, v7);
v11[0] = v12;
interfaceinvoke v10.<io.netty.channel.ChannelPipeline: io.netty.channel.ChannelPipeline addLast(io.netty.channel.ChannelHandler[])>(v11);
label1:
return;
}
private void handleConnect(io.vertx.core.Handler, io.vertx.core.net.SocketAddress, io.vertx.core.net.SocketAddress, java.lang.String, boolean, boolean, io.netty.util.concurrent.Promise)
{
java.net.SocketAddress v16;
io.vertx.core.impl.ContextInternal v8;
io.vertx.core.net.impl.ChannelProvider$2 v13;
io.vertx.core.spi.transport.Transport v15;
io.vertx.core.net.impl.ChannelProvider v0;
java.lang.String v4;
boolean v5, v6;
io.vertx.core.net.SocketAddress v2, v3;
io.vertx.core.impl.VertxInternal v9;
io.netty.util.concurrent.Promise v7;
io.netty.util.concurrent.GenericFutureListener v18;
io.netty.channel.ChannelFuture v17;
io.netty.bootstrap.Bootstrap v10, v12, v14;
io.netty.resolver.AddressResolverGroup v11;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.net.impl.ChannelProvider;
v1 := @parameter0: io.vertx.core.Handler;
v2 := @parameter1: io.vertx.core.net.SocketAddress;
v3 := @parameter2: io.vertx.core.net.SocketAddress;
v4 := @parameter3: java.lang.String;
v5 := @parameter4: boolean;
v6 := @parameter5: boolean;
v7 := @parameter6: io.netty.util.concurrent.Promise;
v8 = v0.<io.vertx.core.net.impl.ChannelProvider: io.vertx.core.impl.ContextInternal context>;
v9 = interfaceinvoke v8.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.VertxInternal owner()>();
v10 = v0.<io.vertx.core.net.impl.ChannelProvider: io.netty.bootstrap.Bootstrap bootstrap>;
v11 = interfaceinvoke v9.<io.vertx.core.impl.VertxInternal: io.netty.resolver.AddressResolverGroup nettyAddressResolverGroup()>();
virtualinvoke v10.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.Bootstrap resolver(io.netty.resolver.AddressResolverGroup)>(v11);
v12 = v0.<io.vertx.core.net.impl.ChannelProvider: io.netty.bootstrap.Bootstrap bootstrap>;
v13 = new io.vertx.core.net.impl.ChannelProvider$2;
specialinvoke v13.<io.vertx.core.net.impl.ChannelProvider$2: void <init>(io.vertx.core.net.impl.ChannelProvider,io.vertx.core.Handler,io.vertx.core.net.SocketAddress,java.lang.String,boolean,boolean,io.netty.util.concurrent.Promise)>(v0, v1, v3, v4, v5, v6, v7);
virtualinvoke v12.<io.netty.bootstrap.Bootstrap: io.netty.bootstrap.AbstractBootstrap handler(io.netty.channel.ChannelHandler)>(v13);
v14 = v0.<io.vertx.core.net.impl.ChannelProvider: io.netty.bootstrap.Bootstrap bootstrap>;
v15 = interfaceinvoke v9.<io.vertx.core.impl.VertxInternal: io.vertx.core.spi.transport.Transport transport()>();
v16 = interfaceinvoke v15.<io.vertx.core.spi.transport.Transport: java.net.SocketAddress convert(io.vertx.core.net.SocketAddress)>(v2);
v17 = virtualinvoke v14.<io.netty.bootstrap.Bootstrap: io.netty.channel.ChannelFuture connect(java.net.SocketAddress)>(v16);
v18 = staticinvoke <io.vertx.core.net.impl.ChannelProvider$lambda_handleConnect_0__1348: io.netty.util.concurrent.GenericFutureListener bootstrap$(io.vertx.core.net.impl.ChannelProvider,io.vertx.core.Handler,io.netty.channel.ChannelFuture,boolean,io.netty.util.concurrent.Promise)>(v0, v1, v17, v5, v7);
interfaceinvoke v17.<io.netty.channel.ChannelFuture: io.netty.channel.ChannelFuture addListener(io.netty.util.concurrent.GenericFutureListener)>(v18);
return;
}
private void connected(io.vertx.core.Handler, io.netty.channel.Channel, boolean, io.netty.util.concurrent.Promise)
{
io.netty.channel.Channel v2;
io.netty.util.concurrent.Promise v4;
io.vertx.core.net.impl.ChannelProvider v0;
io.vertx.core.impl.ContextInternal v5;
io.vertx.core.Handler v1;
boolean v3;
v0 := @this: io.vertx.core.net.impl.ChannelProvider;
v1 := @parameter0: io.vertx.core.Handler;
v2 := @parameter1: io.netty.channel.Channel;
v3 := @parameter2: boolean;
v4 := @parameter3: io.netty.util.concurrent.Promise;
if v3 != 0 goto label2;
if v1 == null goto label1;
v5 = v0.<io.vertx.core.net.impl.ChannelProvider: io.vertx.core.impl.ContextInternal context>;
interfaceinvoke v5.<io.vertx.core.impl.ContextInternal: void dispatch(java.lang.Object,io.vertx.core.Handler)>(v2, v1);
label1:
interfaceinvoke v4.<io.netty.util.concurrent.Promise: io.netty.util.concurrent.Promise setSuccess(java.lang.Object)>(v2);
label2:
return;
}
private void handleProxyConnect(io.vertx.core.Handler, io.vertx.core.net.SocketAddress, io.vertx.core.net.SocketAddress, java.lang.String, boolean, boolean, io.netty.util.concurrent.Promise)
{
io.vertx.core.impl.ContextInternal v8;
io.vertx.core.net.impl.ChannelProvider v0;
int v13;
java.lang.String v11, v15, v17, v4;
boolean v5, v6;
io.vertx.core.net.SocketAddress v2, v3;
io.vertx.core.net.ProxyOptions v10, v12, v14, v16, v18;
io.vertx.core.impl.VertxInternal v9;
io.netty.util.concurrent.Promise v7;
io.vertx.core.net.ProxyType v19;
io.vertx.core.Handler v1, v20;
v0 := @this: io.vertx.core.net.impl.ChannelProvider;
v1 := @parameter0: io.vertx.core.Handler;
v2 := @parameter1: io.vertx.core.net.SocketAddress;
v3 := @parameter2: io.vertx.core.net.SocketAddress;
v4 := @parameter3: java.lang.String;
v5 := @parameter4: boolean;
v6 := @parameter5: boolean;
v7 := @parameter6: io.netty.util.concurrent.Promise;
v8 = v0.<io.vertx.core.net.impl.ChannelProvider: io.vertx.core.impl.ContextInternal context>;
v9 = interfaceinvoke v8.<io.vertx.core.impl.ContextInternal: io.vertx.core.impl.VertxInternal owner()>();
v10 = v0.<io.vertx.core.net.impl.ChannelProvider: io.vertx.core.net.ProxyOptions proxyOptions>;
v11 = virtualinvoke v10.<io.vertx.core.net.ProxyOptions: java.lang.String getHost()>();
v12 = v0.<io.vertx.core.net.impl.ChannelProvider: io.vertx.core.net.ProxyOptions proxyOptions>;
v13 = virtualinvoke v12.<io.vertx.core.net.ProxyOptions: int getPort()>();
v14 = v0.<io.vertx.core.net.impl.ChannelProvider: io.vertx.core.net.ProxyOptions proxyOptions>;
v15 = virtualinvoke v14.<io.vertx.core.net.ProxyOptions: java.lang.String getUsername()>();
v16 = v0.<io.vertx.core.net.impl.ChannelProvider: io.vertx.core.net.ProxyOptions proxyOptions>;
v17 = virtualinvoke v16.<io.vertx.core.net.ProxyOptions: java.lang.String getPassword()>();
v18 = v0.<io.vertx.core.net.impl.ChannelProvider: io.vertx.core.net.ProxyOptions proxyOptions>;
v19 = virtualinvoke v18.<io.vertx.core.net.ProxyOptions: io.vertx.core.net.ProxyType getType()>();
v20 = staticinvoke <io.vertx.core.net.impl.ChannelProvider$lambda_handleProxyConnect_2__1349: io.vertx.core.Handler bootstrap$(io.vertx.core.net.impl.ChannelProvider,int,io.vertx.core.net.ProxyType,java.lang.String,java.lang.String,io.vertx.core.impl.VertxInternal,io.vertx.core.net.SocketAddress,io.vertx.core.Handler,io.vertx.core.net.SocketAddress,java.lang.String,boolean,boolean,io.netty.util.concurrent.Promise)>(v0, v13, v19, v15, v17, v9, v2, v1, v3, v4, v5, v6, v7);
interfaceinvoke v9.<io.vertx.core.impl.VertxInternal: void resolveAddress(java.lang.String,io.vertx.core.Handler)>(v11, v20);
return;
}
}