final class io.vertx.core.net.impl.ServerChannelLoadBalancer$WorkerList extends java.lang.Object
{
private int pos;
private final java.util.List list;
private void <init>()
{
io.vertx.core.net.impl.ServerChannelLoadBalancer$WorkerList v0;
java.util.concurrent.CopyOnWriteArrayList v1;
v0 := @this: io.vertx.core.net.impl.ServerChannelLoadBalancer$WorkerList;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.concurrent.CopyOnWriteArrayList;
specialinvoke v1.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();
v0.<io.vertx.core.net.impl.ServerChannelLoadBalancer$WorkerList: java.util.List list> = v1;
return;
}
io.vertx.core.Handler chooseHandler()
{
java.util.List v1;
io.vertx.core.net.impl.ServerChannelLoadBalancer$WorkerList v0;
int v2, v4, v5;
java.lang.Object v3;
v0 := @this: io.vertx.core.net.impl.ServerChannelLoadBalancer$WorkerList;
v1 = v0.<io.vertx.core.net.impl.ServerChannelLoadBalancer$WorkerList: java.util.List list>;
v2 = v0.<io.vertx.core.net.impl.ServerChannelLoadBalancer$WorkerList: int pos>;
v3 = interfaceinvoke v1.<java.util.List: java.lang.Object get(int)>(v2);
v4 = v0.<io.vertx.core.net.impl.ServerChannelLoadBalancer$WorkerList: int pos>;
v5 = v4 + 1;
v0.<io.vertx.core.net.impl.ServerChannelLoadBalancer$WorkerList: int pos> = v5;
virtualinvoke v0.<io.vertx.core.net.impl.ServerChannelLoadBalancer$WorkerList: void checkPos()>();
return v3;
}
void addWorker(io.vertx.core.Handler)
{
java.util.List v2;
io.vertx.core.net.impl.ServerChannelLoadBalancer$WorkerList v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.core.net.impl.ServerChannelLoadBalancer$WorkerList;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.net.impl.ServerChannelLoadBalancer$WorkerList: java.util.List list>;
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v1);
return;
}
boolean removeWorker(io.vertx.core.Handler)
{
java.util.List v2;
io.vertx.core.net.impl.ServerChannelLoadBalancer$WorkerList v0;
io.vertx.core.Handler v1;
boolean v3;
v0 := @this: io.vertx.core.net.impl.ServerChannelLoadBalancer$WorkerList;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.core.net.impl.ServerChannelLoadBalancer$WorkerList: java.util.List list>;
v3 = interfaceinvoke v2.<java.util.List: boolean remove(java.lang.Object)>(v1);
if v3 == 0 goto label1;
virtualinvoke v0.<io.vertx.core.net.impl.ServerChannelLoadBalancer$WorkerList: void checkPos()>();
return 1;
label1:
return 0;
}
boolean isEmpty()
{
java.util.List v1;
io.vertx.core.net.impl.ServerChannelLoadBalancer$WorkerList v0;
boolean v2;
v0 := @this: io.vertx.core.net.impl.ServerChannelLoadBalancer$WorkerList;
v1 = v0.<io.vertx.core.net.impl.ServerChannelLoadBalancer$WorkerList: java.util.List list>;
v2 = interfaceinvoke v1.<java.util.List: boolean isEmpty()>();
return v2;
}
void checkPos()
{
java.util.List v2;
io.vertx.core.net.impl.ServerChannelLoadBalancer$WorkerList v0;
int v1, v3;
v0 := @this: io.vertx.core.net.impl.ServerChannelLoadBalancer$WorkerList;
v1 = v0.<io.vertx.core.net.impl.ServerChannelLoadBalancer$WorkerList: int pos>;
v2 = v0.<io.vertx.core.net.impl.ServerChannelLoadBalancer$WorkerList: java.util.List list>;
v3 = interfaceinvoke v2.<java.util.List: int size()>();
if v1 != v3 goto label1;
v0.<io.vertx.core.net.impl.ServerChannelLoadBalancer$WorkerList: int pos> = 0;
label1:
return;
}
}