class io.vertx.core.net.impl.ServerChannelLoadBalancer extends io.netty.channel.ChannelInitializer
{
private final io.vertx.core.net.impl.VertxEventLoopGroup workers;
private final java.util.concurrent.ConcurrentMap workerMap;
private final io.netty.channel.group.ChannelGroup channelGroup;
private volatile boolean hasHandlers;
void <init>(io.netty.util.concurrent.EventExecutor)
{
io.netty.util.concurrent.EventExecutor v1;
io.netty.channel.group.DefaultChannelGroup v4;
io.vertx.core.net.impl.ServerChannelLoadBalancer v0;
java.util.concurrent.ConcurrentHashMap v2;
io.vertx.core.net.impl.VertxEventLoopGroup v3;
v0 := @this: io.vertx.core.net.impl.ServerChannelLoadBalancer;
v1 := @parameter0: io.netty.util.concurrent.EventExecutor;
specialinvoke v0.<io.netty.channel.ChannelInitializer: void <init>()>();
v2 = new java.util.concurrent.ConcurrentHashMap;
specialinvoke v2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();
v0.<io.vertx.core.net.impl.ServerChannelLoadBalancer: java.util.concurrent.ConcurrentMap workerMap> = v2;
v3 = new io.vertx.core.net.impl.VertxEventLoopGroup;
specialinvoke v3.<io.vertx.core.net.impl.VertxEventLoopGroup: void <init>()>();
v0.<io.vertx.core.net.impl.ServerChannelLoadBalancer: io.vertx.core.net.impl.VertxEventLoopGroup workers> = v3;
v4 = new io.netty.channel.group.DefaultChannelGroup;
specialinvoke v4.<io.netty.channel.group.DefaultChannelGroup: void <init>(io.netty.util.concurrent.EventExecutor)>(v1);
v0.<io.vertx.core.net.impl.ServerChannelLoadBalancer: io.netty.channel.group.ChannelGroup channelGroup> = v4;
return;
}
public io.vertx.core.net.impl.VertxEventLoopGroup workers()
{
io.vertx.core.net.impl.ServerChannelLoadBalancer v0;
io.vertx.core.net.impl.VertxEventLoopGroup v1;
v0 := @this: io.vertx.core.net.impl.ServerChannelLoadBalancer;
v1 = v0.<io.vertx.core.net.impl.ServerChannelLoadBalancer: io.vertx.core.net.impl.VertxEventLoopGroup workers>;
return v1;
}
public boolean hasHandlers()
{
io.vertx.core.net.impl.ServerChannelLoadBalancer v0;
boolean v1;
v0 := @this: io.vertx.core.net.impl.ServerChannelLoadBalancer;
v1 = v0.<io.vertx.core.net.impl.ServerChannelLoadBalancer: boolean hasHandlers>;
return v1;
}
protected void initChannel(io.netty.channel.Channel)
{
io.netty.channel.Channel v1;
io.netty.channel.group.ChannelGroup v4;
io.vertx.core.net.impl.ServerChannelLoadBalancer v0;
io.netty.channel.EventLoop v2;
io.vertx.core.Handler v3;
v0 := @this: io.vertx.core.net.impl.ServerChannelLoadBalancer;
v1 := @parameter0: io.netty.channel.Channel;
v2 = interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.EventLoop eventLoop()>();
v3 = specialinvoke v0.<io.vertx.core.net.impl.ServerChannelLoadBalancer: io.vertx.core.Handler chooseInitializer(io.netty.channel.EventLoop)>(v2);
if v3 != null goto label1;
interfaceinvoke v1.<io.netty.channel.Channel: io.netty.channel.ChannelFuture close()>();
goto label2;
label1:
v4 = v0.<io.vertx.core.net.impl.ServerChannelLoadBalancer: io.netty.channel.group.ChannelGroup channelGroup>;
interfaceinvoke v4.<io.netty.channel.group.ChannelGroup: boolean add(java.lang.Object)>(v1);
interfaceinvoke v3.<io.vertx.core.Handler: void handle(java.lang.Object)>(v1);
label2:
return;
}
private io.vertx.core.Handler chooseInitializer(io.netty.channel.EventLoop)
{
io.vertx.core.net.impl.ServerChannelLoadBalancer v0;
java.lang.Object v3;
io.netty.channel.EventLoop v1;
io.vertx.core.Handler v4;
java.util.concurrent.ConcurrentMap v2;
v0 := @this: io.vertx.core.net.impl.ServerChannelLoadBalancer;
v1 := @parameter0: io.netty.channel.EventLoop;
v2 = v0.<io.vertx.core.net.impl.ServerChannelLoadBalancer: java.util.concurrent.ConcurrentMap workerMap>;
v3 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v1);
if v3 != null goto label1;
v4 = null;
goto label2;
label1:
v4 = virtualinvoke v3.<io.vertx.core.net.impl.ServerChannelLoadBalancer$WorkerList: io.vertx.core.Handler chooseHandler()>();
label2:
return v4;
}
public synchronized void addWorker(io.netty.channel.EventLoop, io.vertx.core.Handler)
{
io.vertx.core.net.impl.ServerChannelLoadBalancer$WorkerList v4, v5;
io.netty.channel.EventLoop v1;
java.util.concurrent.ConcurrentMap v6;
io.vertx.core.net.impl.ServerChannelLoadBalancer v0;
java.lang.Object v7;
io.vertx.core.Handler v2;
io.vertx.core.net.impl.VertxEventLoopGroup v3;
v0 := @this: io.vertx.core.net.impl.ServerChannelLoadBalancer;
v1 := @parameter0: io.netty.channel.EventLoop;
v2 := @parameter1: io.vertx.core.Handler;
v3 = v0.<io.vertx.core.net.impl.ServerChannelLoadBalancer: io.vertx.core.net.impl.VertxEventLoopGroup workers>;
virtualinvoke v3.<io.vertx.core.net.impl.VertxEventLoopGroup: void addWorker(io.netty.channel.EventLoop)>(v1);
v4 = new io.vertx.core.net.impl.ServerChannelLoadBalancer$WorkerList;
specialinvoke v4.<io.vertx.core.net.impl.ServerChannelLoadBalancer$WorkerList: void <init>()>();
v5 = v4;
v6 = v0.<io.vertx.core.net.impl.ServerChannelLoadBalancer: java.util.concurrent.ConcurrentMap workerMap>;
v7 = interfaceinvoke v6.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(v1, v4);
if v7 == null goto label1;
v5 = v7;
label1:
virtualinvoke v5.<io.vertx.core.net.impl.ServerChannelLoadBalancer$WorkerList: void addWorker(io.vertx.core.Handler)>(v2);
v0.<io.vertx.core.net.impl.ServerChannelLoadBalancer: boolean hasHandlers> = 1;
return;
}
public synchronized boolean removeWorker(io.netty.channel.EventLoop, io.vertx.core.Handler)
{
io.netty.channel.EventLoop v1;
java.util.concurrent.ConcurrentMap v3, v7, v8;
io.vertx.core.net.impl.ServerChannelLoadBalancer v0;
java.lang.Object v4;
io.vertx.core.Handler v2;
io.vertx.core.net.impl.VertxEventLoopGroup v10;
boolean v5, v6, v9;
v0 := @this: io.vertx.core.net.impl.ServerChannelLoadBalancer;
v1 := @parameter0: io.netty.channel.EventLoop;
v2 := @parameter1: io.vertx.core.Handler;
v3 = v0.<io.vertx.core.net.impl.ServerChannelLoadBalancer: java.util.concurrent.ConcurrentMap workerMap>;
v4 = interfaceinvoke v3.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v1);
if v4 == null goto label1;
v5 = virtualinvoke v4.<io.vertx.core.net.impl.ServerChannelLoadBalancer$WorkerList: boolean removeWorker(io.vertx.core.Handler)>(v2);
if v5 != 0 goto label2;
label1:
return 0;
label2:
v6 = virtualinvoke v4.<io.vertx.core.net.impl.ServerChannelLoadBalancer$WorkerList: boolean isEmpty()>();
if v6 == 0 goto label3;
v7 = v0.<io.vertx.core.net.impl.ServerChannelLoadBalancer: java.util.concurrent.ConcurrentMap workerMap>;
interfaceinvoke v7.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>(v1);
label3:
v8 = v0.<io.vertx.core.net.impl.ServerChannelLoadBalancer: java.util.concurrent.ConcurrentMap workerMap>;
v9 = interfaceinvoke v8.<java.util.concurrent.ConcurrentMap: boolean isEmpty()>();
if v9 == 0 goto label4;
v0.<io.vertx.core.net.impl.ServerChannelLoadBalancer: boolean hasHandlers> = 0;
label4:
v10 = v0.<io.vertx.core.net.impl.ServerChannelLoadBalancer: io.vertx.core.net.impl.VertxEventLoopGroup workers>;
virtualinvoke v10.<io.vertx.core.net.impl.VertxEventLoopGroup: void removeWorker(io.netty.channel.EventLoop)>(v1);
return 1;
}
public void close()
{
io.vertx.core.net.impl.ServerChannelLoadBalancer v0;
io.netty.channel.group.ChannelGroup v1;
v0 := @this: io.vertx.core.net.impl.ServerChannelLoadBalancer;
v1 = v0.<io.vertx.core.net.impl.ServerChannelLoadBalancer: io.netty.channel.group.ChannelGroup channelGroup>;
interfaceinvoke v1.<io.netty.channel.group.ChannelGroup: io.netty.channel.group.ChannelGroupFuture close()>();
return;
}
}