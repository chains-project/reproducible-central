public class io.vertx.core.net.impl.pool.SemaphoreExecutor extends java.lang.Object implements io.vertx.core.net.impl.pool.Executor
{
private final java.util.concurrent.locks.Lock lock;
private final java.lang.Object state;
public void <init>(java.lang.Object)
{
io.vertx.core.net.impl.pool.SemaphoreExecutor v0;
java.lang.Object v1;
java.util.concurrent.locks.ReentrantLock v2;
v0 := @this: io.vertx.core.net.impl.pool.SemaphoreExecutor;
v1 := @parameter0: java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = new java.util.concurrent.locks.ReentrantLock;
specialinvoke v2.<java.util.concurrent.locks.ReentrantLock: void <init>()>();
v0.<io.vertx.core.net.impl.pool.SemaphoreExecutor: java.util.concurrent.locks.Lock lock> = v2;
v0.<io.vertx.core.net.impl.pool.SemaphoreExecutor: java.lang.Object state> = v1;
return;
}
public void submit(io.vertx.core.net.impl.pool.Executor$Action)
{
java.lang.Throwable v6;
io.vertx.core.net.impl.pool.Executor$Action v1;
io.vertx.core.net.impl.pool.Task v4;
java.util.concurrent.locks.Lock v2, v5, v7;
io.vertx.core.net.impl.pool.SemaphoreExecutor v0;
java.lang.Object v3;
v0 := @this: io.vertx.core.net.impl.pool.SemaphoreExecutor;
v1 := @parameter0: io.vertx.core.net.impl.pool.Executor$Action;
v2 = v0.<io.vertx.core.net.impl.pool.SemaphoreExecutor: java.util.concurrent.locks.Lock lock>;
interfaceinvoke v2.<java.util.concurrent.locks.Lock: void lock()>();
label1:
v3 = v0.<io.vertx.core.net.impl.pool.SemaphoreExecutor: java.lang.Object state>;
v4 = interfaceinvoke v1.<io.vertx.core.net.impl.pool.Executor$Action: io.vertx.core.net.impl.pool.Task execute(java.lang.Object)>(v3);
label2:
v5 = v0.<io.vertx.core.net.impl.pool.SemaphoreExecutor: java.util.concurrent.locks.Lock lock>;
interfaceinvoke v5.<java.util.concurrent.locks.Lock: void unlock()>();
if v4 == null goto label4;
virtualinvoke v4.<io.vertx.core.net.impl.pool.Task: void run()>();
goto label4;
label3:
v6 := @caughtexception;
v7 = v0.<io.vertx.core.net.impl.pool.SemaphoreExecutor: java.util.concurrent.locks.Lock lock>;
interfaceinvoke v7.<java.util.concurrent.locks.Lock: void unlock()>();
throw v6;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
}