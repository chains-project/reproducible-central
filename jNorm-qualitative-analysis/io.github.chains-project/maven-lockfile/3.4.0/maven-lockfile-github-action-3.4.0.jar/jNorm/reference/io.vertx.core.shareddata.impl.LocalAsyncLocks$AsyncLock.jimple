class io.vertx.core.shareddata.impl.LocalAsyncLocks$AsyncLock extends java.lang.Object implements io.vertx.core.shareddata.impl.LockInternal
{
final java.lang.String lockName;
final java.util.concurrent.atomic.AtomicBoolean invoked;
final io.vertx.core.shareddata.impl.LocalAsyncLocks this$0;
void <init>(io.vertx.core.shareddata.impl.LocalAsyncLocks, java.lang.String)
{
io.vertx.core.shareddata.impl.LocalAsyncLocks v1;
io.vertx.core.shareddata.impl.LocalAsyncLocks$AsyncLock v0;
java.util.concurrent.atomic.AtomicBoolean v3;
java.lang.String v2;
v0 := @this: io.vertx.core.shareddata.impl.LocalAsyncLocks$AsyncLock;
v1 := @parameter0: io.vertx.core.shareddata.impl.LocalAsyncLocks;
v2 := @parameter1: java.lang.String;
v0.<io.vertx.core.shareddata.impl.LocalAsyncLocks$AsyncLock: io.vertx.core.shareddata.impl.LocalAsyncLocks this$0> = v1;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = new java.util.concurrent.atomic.AtomicBoolean;
specialinvoke v3.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();
v0.<io.vertx.core.shareddata.impl.LocalAsyncLocks$AsyncLock: java.util.concurrent.atomic.AtomicBoolean invoked> = v3;
v0.<io.vertx.core.shareddata.impl.LocalAsyncLocks$AsyncLock: java.lang.String lockName> = v2;
return;
}
public void release()
{
io.vertx.core.shareddata.impl.LocalAsyncLocks v3;
io.vertx.core.shareddata.impl.LocalAsyncLocks$AsyncLock v0;
java.util.concurrent.atomic.AtomicBoolean v1;
java.lang.String v4;
boolean v2;
v0 := @this: io.vertx.core.shareddata.impl.LocalAsyncLocks$AsyncLock;
v1 = v0.<io.vertx.core.shareddata.impl.LocalAsyncLocks$AsyncLock: java.util.concurrent.atomic.AtomicBoolean invoked>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);
if v2 == 0 goto label1;
v3 = v0.<io.vertx.core.shareddata.impl.LocalAsyncLocks$AsyncLock: io.vertx.core.shareddata.impl.LocalAsyncLocks this$0>;
v4 = v0.<io.vertx.core.shareddata.impl.LocalAsyncLocks$AsyncLock: java.lang.String lockName>;
specialinvoke v3.<io.vertx.core.shareddata.impl.LocalAsyncLocks: void nextWaiter(java.lang.String)>(v4);
label1:
return;
}
public int waiters()
{
io.vertx.core.shareddata.impl.LocalAsyncLocks v1;
io.vertx.core.shareddata.impl.LocalAsyncLocks$AsyncLock v0;
int v5, v6;
java.lang.Object v4;
java.lang.String v3;
java.util.concurrent.ConcurrentMap v2;
v0 := @this: io.vertx.core.shareddata.impl.LocalAsyncLocks$AsyncLock;
v1 = v0.<io.vertx.core.shareddata.impl.LocalAsyncLocks$AsyncLock: io.vertx.core.shareddata.impl.LocalAsyncLocks this$0>;
v2 = v1.<io.vertx.core.shareddata.impl.LocalAsyncLocks: java.util.concurrent.ConcurrentMap waitersMap>;
v3 = v0.<io.vertx.core.shareddata.impl.LocalAsyncLocks$AsyncLock: java.lang.String lockName>;
v4 = interfaceinvoke v2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(v3);
if v4 != null goto label1;
v5 = 0;
goto label2;
label1:
v6 = interfaceinvoke v4.<java.util.List: int size()>();
v5 = v6 - 1;
label2:
return v5;
}
}