class io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder extends java.lang.Object
{
final java.lang.Object value;
final long timerId;
final long ttl;
final long timestamp;
void <init>(java.lang.Object)
{
io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder v0;
java.lang.Object v1;
v0 := @this: io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder;
v1 := @parameter0: java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: java.lang.Object value> = v1;
v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: long timerId> = 0L;
v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: long ttl> = 0L;
v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: long timestamp> = 0L;
return;
}
void <init>(java.lang.Object, long, long, long)
{
io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder v0;
long v2, v3, v4;
java.lang.IllegalArgumentException v6;
byte v5;
java.lang.Object v1;
java.lang.String v7;
v0 := @this: io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 := @parameter3: long;
specialinvoke v0.<java.lang.Object: void <init>()>();
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v5 = v3 cmp 1L;
if v5 >= 0 goto label1;
v6 = new java.lang.IllegalArgumentException;
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (long)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("ttl must be positive: \u0001");
specialinvoke v6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v7);
throw v6;
label1:
v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: java.lang.Object value> = v1;
v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: long timerId> = v2;
v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: long ttl> = v3;
v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: long timestamp> = v4;
return;
}
boolean expires()
{
io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder v0;
byte v2;
long v1;
boolean v3;
v0 := @this: io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder;
v1 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: long ttl>;
v2 = v1 cmp 0L;
if v2 <= 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
boolean hasNotExpired()
{
io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder v0;
long v3, v4, v5, v7, v8;
java.util.concurrent.TimeUnit v2, v6;
byte v9;
boolean v1, v10;
v0 := @this: io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder;
v1 = virtualinvoke v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: boolean expires()>();
if v1 == 0 goto label1;
v2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;
v3 = staticinvoke <java.lang.System: long nanoTime()>();
v4 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: long timestamp>;
v5 = v3 - v4;
v6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;
v7 = virtualinvoke v2.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>(v5, v6);
v8 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: long ttl>;
v9 = v7 cmp v8;
if v9 >= 0 goto label2;
label1:
v10 = 1;
goto label3;
label2:
v10 = 0;
label3:
return v10;
}
public java.lang.String toString()
{
io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder v0;
java.lang.Object v1;
long v2, v3, v4;
java.lang.String v5;
v0 := @this: io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder;
v1 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: java.lang.Object value>;
v2 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: long timerId>;
v3 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: long ttl>;
v4 = v0.<io.vertx.core.shareddata.impl.LocalAsyncMapImpl$Holder: long timestamp>;
v5 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Object,long,long,long)>(v1, v2, v3, v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Holder{value=\u0001, timerId=\u0001, ttl=\u0001, timestamp=\u0001}");
return v5;
}
}