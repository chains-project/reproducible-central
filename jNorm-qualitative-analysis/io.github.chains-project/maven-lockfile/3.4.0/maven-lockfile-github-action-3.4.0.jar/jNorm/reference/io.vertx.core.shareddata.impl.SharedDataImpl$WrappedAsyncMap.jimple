public final class io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap extends java.lang.Object implements io.vertx.core.shareddata.AsyncMap
{
private final io.vertx.core.shareddata.AsyncMap delegate;
void <init>(io.vertx.core.shareddata.AsyncMap)
{
io.vertx.core.shareddata.AsyncMap v1;
io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap v0;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap;
v1 := @parameter0: io.vertx.core.shareddata.AsyncMap;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap: io.vertx.core.shareddata.AsyncMap delegate> = v1;
return;
}
public io.vertx.core.Future get(java.lang.Object)
{
io.vertx.core.shareddata.AsyncMap v2;
io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap v0;
java.lang.Object v1;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap;
v1 := @parameter0: java.lang.Object;
staticinvoke <io.vertx.core.shareddata.impl.SharedDataImpl: void checkType(java.lang.Object)>(v1);
v2 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap: io.vertx.core.shareddata.AsyncMap delegate>;
v3 = interfaceinvoke v2.<io.vertx.core.shareddata.AsyncMap: io.vertx.core.Future get(java.lang.Object)>(v1);
return v3;
}
public io.vertx.core.Future put(java.lang.Object, java.lang.Object)
{
io.vertx.core.shareddata.AsyncMap v3;
io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap v0;
java.lang.Object v1, v2;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
staticinvoke <io.vertx.core.shareddata.impl.SharedDataImpl: void checkType(java.lang.Object)>(v1);
staticinvoke <io.vertx.core.shareddata.impl.SharedDataImpl: void checkType(java.lang.Object)>(v2);
v3 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap: io.vertx.core.shareddata.AsyncMap delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.shareddata.AsyncMap: io.vertx.core.Future put(java.lang.Object,java.lang.Object)>(v1, v2);
return v4;
}
public io.vertx.core.Future put(java.lang.Object, java.lang.Object, long)
{
io.vertx.core.shareddata.AsyncMap v4;
io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap v0;
java.lang.Object v1, v2;
long v3;
io.vertx.core.Future v5;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: long;
staticinvoke <io.vertx.core.shareddata.impl.SharedDataImpl: void checkType(java.lang.Object)>(v1);
staticinvoke <io.vertx.core.shareddata.impl.SharedDataImpl: void checkType(java.lang.Object)>(v2);
v4 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap: io.vertx.core.shareddata.AsyncMap delegate>;
v5 = interfaceinvoke v4.<io.vertx.core.shareddata.AsyncMap: io.vertx.core.Future put(java.lang.Object,java.lang.Object,long)>(v1, v2, v3);
return v5;
}
public io.vertx.core.Future putIfAbsent(java.lang.Object, java.lang.Object)
{
io.vertx.core.shareddata.AsyncMap v3;
io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap v0;
java.lang.Object v1, v2;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
staticinvoke <io.vertx.core.shareddata.impl.SharedDataImpl: void checkType(java.lang.Object)>(v1);
staticinvoke <io.vertx.core.shareddata.impl.SharedDataImpl: void checkType(java.lang.Object)>(v2);
v3 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap: io.vertx.core.shareddata.AsyncMap delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.shareddata.AsyncMap: io.vertx.core.Future putIfAbsent(java.lang.Object,java.lang.Object)>(v1, v2);
return v4;
}
public io.vertx.core.Future putIfAbsent(java.lang.Object, java.lang.Object, long)
{
io.vertx.core.shareddata.AsyncMap v4;
io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap v0;
java.lang.Object v1, v2;
long v3;
io.vertx.core.Future v5;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: long;
staticinvoke <io.vertx.core.shareddata.impl.SharedDataImpl: void checkType(java.lang.Object)>(v1);
staticinvoke <io.vertx.core.shareddata.impl.SharedDataImpl: void checkType(java.lang.Object)>(v2);
v4 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap: io.vertx.core.shareddata.AsyncMap delegate>;
v5 = interfaceinvoke v4.<io.vertx.core.shareddata.AsyncMap: io.vertx.core.Future putIfAbsent(java.lang.Object,java.lang.Object,long)>(v1, v2, v3);
return v5;
}
public io.vertx.core.Future remove(java.lang.Object)
{
io.vertx.core.shareddata.AsyncMap v2;
io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap v0;
java.lang.Object v1;
io.vertx.core.Future v3;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap;
v1 := @parameter0: java.lang.Object;
staticinvoke <io.vertx.core.shareddata.impl.SharedDataImpl: void checkType(java.lang.Object)>(v1);
v2 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap: io.vertx.core.shareddata.AsyncMap delegate>;
v3 = interfaceinvoke v2.<io.vertx.core.shareddata.AsyncMap: io.vertx.core.Future remove(java.lang.Object)>(v1);
return v3;
}
public io.vertx.core.Future removeIfPresent(java.lang.Object, java.lang.Object)
{
io.vertx.core.shareddata.AsyncMap v3;
io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap v0;
java.lang.Object v1, v2;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
staticinvoke <io.vertx.core.shareddata.impl.SharedDataImpl: void checkType(java.lang.Object)>(v1);
staticinvoke <io.vertx.core.shareddata.impl.SharedDataImpl: void checkType(java.lang.Object)>(v2);
v3 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap: io.vertx.core.shareddata.AsyncMap delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.shareddata.AsyncMap: io.vertx.core.Future removeIfPresent(java.lang.Object,java.lang.Object)>(v1, v2);
return v4;
}
public io.vertx.core.Future replace(java.lang.Object, java.lang.Object)
{
io.vertx.core.shareddata.AsyncMap v3;
io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap v0;
java.lang.Object v1, v2;
io.vertx.core.Future v4;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
staticinvoke <io.vertx.core.shareddata.impl.SharedDataImpl: void checkType(java.lang.Object)>(v1);
staticinvoke <io.vertx.core.shareddata.impl.SharedDataImpl: void checkType(java.lang.Object)>(v2);
v3 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap: io.vertx.core.shareddata.AsyncMap delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.shareddata.AsyncMap: io.vertx.core.Future replace(java.lang.Object,java.lang.Object)>(v1, v2);
return v4;
}
public io.vertx.core.Future replace(java.lang.Object, java.lang.Object, long)
{
io.vertx.core.shareddata.AsyncMap v4;
io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap v0;
java.lang.Object v1, v2;
long v3;
io.vertx.core.Future v5;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: long;
staticinvoke <io.vertx.core.shareddata.impl.SharedDataImpl: void checkType(java.lang.Object)>(v1);
staticinvoke <io.vertx.core.shareddata.impl.SharedDataImpl: void checkType(java.lang.Object)>(v2);
v4 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap: io.vertx.core.shareddata.AsyncMap delegate>;
v5 = interfaceinvoke v4.<io.vertx.core.shareddata.AsyncMap: io.vertx.core.Future replace(java.lang.Object,java.lang.Object,long)>(v1, v2, v3);
return v5;
}
public io.vertx.core.Future replaceIfPresent(java.lang.Object, java.lang.Object, java.lang.Object)
{
io.vertx.core.shareddata.AsyncMap v4;
io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap v0;
java.lang.Object v1, v2, v3;
io.vertx.core.Future v5;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.lang.Object;
staticinvoke <io.vertx.core.shareddata.impl.SharedDataImpl: void checkType(java.lang.Object)>(v1);
staticinvoke <io.vertx.core.shareddata.impl.SharedDataImpl: void checkType(java.lang.Object)>(v2);
staticinvoke <io.vertx.core.shareddata.impl.SharedDataImpl: void checkType(java.lang.Object)>(v3);
v4 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap: io.vertx.core.shareddata.AsyncMap delegate>;
v5 = interfaceinvoke v4.<io.vertx.core.shareddata.AsyncMap: io.vertx.core.Future replaceIfPresent(java.lang.Object,java.lang.Object,java.lang.Object)>(v1, v2, v3);
return v5;
}
public io.vertx.core.Future replaceIfPresent(java.lang.Object, java.lang.Object, java.lang.Object, long)
{
io.vertx.core.shareddata.AsyncMap v5;
io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap v0;
java.lang.Object v1, v2, v3;
long v4;
io.vertx.core.Future v6;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap;
v1 := @parameter0: java.lang.Object;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.lang.Object;
v4 := @parameter3: long;
staticinvoke <io.vertx.core.shareddata.impl.SharedDataImpl: void checkType(java.lang.Object)>(v1);
staticinvoke <io.vertx.core.shareddata.impl.SharedDataImpl: void checkType(java.lang.Object)>(v2);
staticinvoke <io.vertx.core.shareddata.impl.SharedDataImpl: void checkType(java.lang.Object)>(v3);
v5 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap: io.vertx.core.shareddata.AsyncMap delegate>;
v6 = interfaceinvoke v5.<io.vertx.core.shareddata.AsyncMap: io.vertx.core.Future replaceIfPresent(java.lang.Object,java.lang.Object,java.lang.Object,long)>(v1, v2, v3, v4);
return v6;
}
public io.vertx.core.Future clear()
{
io.vertx.core.shareddata.AsyncMap v1;
io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap v0;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap;
v1 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap: io.vertx.core.shareddata.AsyncMap delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.shareddata.AsyncMap: io.vertx.core.Future clear()>();
return v2;
}
public io.vertx.core.Future size()
{
io.vertx.core.shareddata.AsyncMap v1;
io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap v0;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap;
v1 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap: io.vertx.core.shareddata.AsyncMap delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.shareddata.AsyncMap: io.vertx.core.Future size()>();
return v2;
}
public io.vertx.core.Future keys()
{
io.vertx.core.shareddata.AsyncMap v1;
io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap v0;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap;
v1 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap: io.vertx.core.shareddata.AsyncMap delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.shareddata.AsyncMap: io.vertx.core.Future keys()>();
return v2;
}
public io.vertx.core.Future values()
{
io.vertx.core.shareddata.AsyncMap v1;
io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap v0;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap;
v1 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap: io.vertx.core.shareddata.AsyncMap delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.shareddata.AsyncMap: io.vertx.core.Future values()>();
return v2;
}
public io.vertx.core.Future entries()
{
io.vertx.core.shareddata.AsyncMap v1;
io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap v0;
io.vertx.core.Future v2;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap;
v1 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap: io.vertx.core.shareddata.AsyncMap delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.shareddata.AsyncMap: io.vertx.core.Future entries()>();
return v2;
}
public io.vertx.core.shareddata.AsyncMap getDelegate()
{
io.vertx.core.shareddata.AsyncMap v1;
io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap v0;
v0 := @this: io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap;
v1 = v0.<io.vertx.core.shareddata.impl.SharedDataImpl$WrappedAsyncMap: io.vertx.core.shareddata.AsyncMap delegate>;
return v1;
}
}