public interface  io.vertx.core.spi.logging.LogDelegate extends java.lang.Object
{
public abstract boolean isWarnEnabled();
public abstract boolean isInfoEnabled();
public abstract boolean isDebugEnabled();
public abstract boolean isTraceEnabled();
public abstract void fatal(java.lang.Object);
public abstract void fatal(java.lang.Object, java.lang.Throwable);
public abstract void error(java.lang.Object);
public abstract transient void error(java.lang.Object, java.lang.Object[]);
public abstract void error(java.lang.Object, java.lang.Throwable);
public abstract transient void error(java.lang.Object, java.lang.Throwable, java.lang.Object[]);
public abstract void warn(java.lang.Object);
public abstract transient void warn(java.lang.Object, java.lang.Object[]);
public abstract void warn(java.lang.Object, java.lang.Throwable);
public abstract transient void warn(java.lang.Object, java.lang.Throwable, java.lang.Object[]);
public abstract void info(java.lang.Object);
public abstract transient void info(java.lang.Object, java.lang.Object[]);
public abstract void info(java.lang.Object, java.lang.Throwable);
public abstract transient void info(java.lang.Object, java.lang.Throwable, java.lang.Object[]);
public abstract void debug(java.lang.Object);
public abstract transient void debug(java.lang.Object, java.lang.Object[]);
public abstract void debug(java.lang.Object, java.lang.Throwable);
public abstract transient void debug(java.lang.Object, java.lang.Throwable, java.lang.Object[]);
public abstract void trace(java.lang.Object);
public abstract transient void trace(java.lang.Object, java.lang.Object[]);
public abstract void trace(java.lang.Object, java.lang.Throwable);
public abstract transient void trace(java.lang.Object, java.lang.Throwable, java.lang.Object[]);
public java.lang.Object unwrap()
{
io.vertx.core.spi.logging.LogDelegate v0;
v0 := @this: io.vertx.core.spi.logging.LogDelegate;
return null;
}
}