public final class io.vertx.core.streams.impl.PipeImpl$handleWriteResult__1252 extends java.lang.Object implements io.vertx.core.Handler
{
io.vertx.core.streams.impl.PipeImpl cap0;
public static io.vertx.core.Handler bootstrap$(io.vertx.core.streams.impl.PipeImpl)
{
io.vertx.core.streams.impl.PipeImpl v0;
io.vertx.core.streams.impl.PipeImpl$handleWriteResult__1252 v1;
v0 := @parameter0: io.vertx.core.streams.impl.PipeImpl;
v1 = new io.vertx.core.streams.impl.PipeImpl$handleWriteResult__1252;
specialinvoke v1.<io.vertx.core.streams.impl.PipeImpl$handleWriteResult__1252: void <init>(io.vertx.core.streams.impl.PipeImpl)>(v0);
return v1;
}
public void <init>(io.vertx.core.streams.impl.PipeImpl)
{
io.vertx.core.streams.impl.PipeImpl v1;
io.vertx.core.streams.impl.PipeImpl$handleWriteResult__1252 v0;
v0 := @this: io.vertx.core.streams.impl.PipeImpl$handleWriteResult__1252;
v1 := @parameter0: io.vertx.core.streams.impl.PipeImpl;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.core.streams.impl.PipeImpl$handleWriteResult__1252: io.vertx.core.streams.impl.PipeImpl cap0> = v1;
return;
}
public void handle(java.lang.Object)
{
io.vertx.core.streams.impl.PipeImpl v2;
java.lang.Object v1;
io.vertx.core.streams.impl.PipeImpl$handleWriteResult__1252 v0;
v0 := @this: io.vertx.core.streams.impl.PipeImpl$handleWriteResult__1252;
v1 := @parameter0: java.lang.Object;
v2 = v0.<io.vertx.core.streams.impl.PipeImpl$handleWriteResult__1252: io.vertx.core.streams.impl.PipeImpl cap0>;
specialinvoke v2.<io.vertx.core.streams.impl.PipeImpl: void handleWriteResult(io.vertx.core.AsyncResult)>(v1);
return;
}
}