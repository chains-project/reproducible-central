public interface  io.vertx.ext.auth.HashingStrategy extends java.lang.Object
{
public static io.vertx.ext.auth.HashingStrategy load()
{
java.util.Iterator v2;
java.lang.Object v4;
java.util.ServiceLoader v1;
io.vertx.ext.auth.impl.HashingStrategyImpl v0;
boolean v3;
v0 = new io.vertx.ext.auth.impl.HashingStrategyImpl;
specialinvoke v0.<io.vertx.ext.auth.impl.HashingStrategyImpl: void <init>()>();
v1 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class)>(class "Lio/vertx/ext/auth/HashingAlgorithm;");
v2 = virtualinvoke v1.<java.util.ServiceLoader: java.util.Iterator iterator()>();
label1:
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 == 0 goto label2;
v4 = interfaceinvoke v2.<java.util.Iterator: java.lang.Object next()>();
virtualinvoke v0.<io.vertx.ext.auth.impl.HashingStrategyImpl: void add(io.vertx.ext.auth.HashingAlgorithm)>(v4);
goto label1;
label2:
return v0;
}
public abstract java.lang.String hash(java.lang.String, java.util.Map, java.lang.String, java.lang.String);
public abstract boolean verify(java.lang.String, java.lang.String);
public abstract io.vertx.ext.auth.HashingAlgorithm get(java.lang.String);
public abstract io.vertx.ext.auth.HashingStrategy put(java.lang.String, io.vertx.ext.auth.HashingAlgorithm);
}