class io.vertx.ext.auth.authorization.impl.WildcardExpression extends java.lang.Object
{
protected static final java.lang.String PART_DIVIDER_TOKEN;
protected static final java.lang.String SUBPART_DIVIDER_TOKEN;
protected static final java.lang.String WILDCARD_TOKEN;
private java.util.List parts;
private final java.lang.String value;
public void <init>(java.lang.String)
{
io.vertx.ext.auth.authorization.impl.WildcardExpression v0;
java.lang.String v1, v2;
java.lang.IllegalArgumentException v4;
boolean v3;
v0 := @this: io.vertx.ext.auth.authorization.impl.WildcardExpression;
v1 := @parameter0: java.lang.String;
specialinvoke v0.<java.lang.Object: void <init>()>();
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = virtualinvoke v1.<java.lang.String: java.lang.String trim()>();
v0.<io.vertx.ext.auth.authorization.impl.WildcardExpression: java.lang.String value> = v2;
v3 = virtualinvoke v1.<java.lang.String: boolean isEmpty()>();
if v3 == 0 goto label1;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Wildcard value cannot be empty");
throw v4;
label1:
virtualinvoke v0.<io.vertx.ext.auth.authorization.impl.WildcardExpression: void setParts(java.lang.String)>(v1);
return;
}
public boolean equals(java.lang.Object)
{
java.util.List v3, v4;
io.vertx.ext.auth.authorization.impl.WildcardExpression v0;
java.lang.Object v1;
boolean v2, v5;
v0 := @this: io.vertx.ext.auth.authorization.impl.WildcardExpression;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v1 != null goto label2;
return 0;
label2:
v2 = v1 instanceof io.vertx.ext.auth.authorization.impl.WildcardExpression;
if v2 != 0 goto label3;
return 0;
label3:
v3 = v0.<io.vertx.ext.auth.authorization.impl.WildcardExpression: java.util.List parts>;
v4 = v1.<io.vertx.ext.auth.authorization.impl.WildcardExpression: java.util.List parts>;
v5 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(v3, v4);
return v5;
}
public int hashCode()
{
java.util.List v2;
java.lang.Object[] v1;
io.vertx.ext.auth.authorization.impl.WildcardExpression v0;
int v3;
v0 := @this: io.vertx.ext.auth.authorization.impl.WildcardExpression;
v1 = newarray (java.lang.Object)[1];
v2 = v0.<io.vertx.ext.auth.authorization.impl.WildcardExpression: java.util.List parts>;
v1[0] = v2;
v3 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>(v1);
return v3;
}
public boolean implies(java.lang.String)
{
io.vertx.ext.auth.authorization.impl.WildcardExpression v0, v4;
java.lang.String v1, v2;
boolean v3, v5;
v0 := @this: io.vertx.ext.auth.authorization.impl.WildcardExpression;
v1 := @parameter0: java.lang.String;
if v1 != null goto label1;
return 0;
label1:
v2 = v0.<io.vertx.ext.auth.authorization.impl.WildcardExpression: java.lang.String value>;
v3 = virtualinvoke v2.<java.lang.String: boolean equals(java.lang.Object)>(v1);
if v3 == 0 goto label2;
return 1;
label2:
v4 = new io.vertx.ext.auth.authorization.impl.WildcardExpression;
specialinvoke v4.<io.vertx.ext.auth.authorization.impl.WildcardExpression: void <init>(java.lang.String)>(v1);
v5 = virtualinvoke v0.<io.vertx.ext.auth.authorization.impl.WildcardExpression: boolean implies(io.vertx.ext.auth.authorization.impl.WildcardExpression)>(v4);
return v5;
}
public boolean implies(io.vertx.ext.auth.authorization.impl.WildcardExpression)
{
int v15, v3, v8, v9;
boolean v12, v13, v18, v5;
io.vertx.ext.auth.authorization.impl.WildcardExpression v0, v1;
java.util.Iterator v4;
java.util.List v10, v14, v16, v2, v7;
java.lang.Object v11, v17, v6;
v0 := @this: io.vertx.ext.auth.authorization.impl.WildcardExpression;
v1 := @parameter0: io.vertx.ext.auth.authorization.impl.WildcardExpression;
if v1 != null goto label1;
return 0;
label1:
v2 = v1.<io.vertx.ext.auth.authorization.impl.WildcardExpression: java.util.List parts>;
v3 = 0;
v4 = interfaceinvoke v2.<java.util.List: java.util.Iterator iterator()>();
label2:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label5;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = v0.<io.vertx.ext.auth.authorization.impl.WildcardExpression: java.util.List parts>;
v8 = interfaceinvoke v7.<java.util.List: int size()>();
v9 = v8 - 1;
if v9 >= v3 goto label3;
return 1;
label3:
v10 = v0.<io.vertx.ext.auth.authorization.impl.WildcardExpression: java.util.List parts>;
v11 = interfaceinvoke v10.<java.util.List: java.lang.Object get(int)>(v3);
v12 = interfaceinvoke v11.<java.util.Set: boolean contains(java.lang.Object)>("*");
if v12 != 0 goto label4;
v13 = interfaceinvoke v11.<java.util.Set: boolean containsAll(java.util.Collection)>(v6);
if v13 != 0 goto label4;
return 0;
label4:
v3 = v3 + 1;
goto label2;
label5:
v14 = v0.<io.vertx.ext.auth.authorization.impl.WildcardExpression: java.util.List parts>;
v15 = interfaceinvoke v14.<java.util.List: int size()>();
if v3 >= v15 goto label7;
v16 = v0.<io.vertx.ext.auth.authorization.impl.WildcardExpression: java.util.List parts>;
v17 = interfaceinvoke v16.<java.util.List: java.lang.Object get(int)>(v3);
v18 = interfaceinvoke v17.<java.util.Set: boolean contains(java.lang.Object)>("*");
if v18 != 0 goto label6;
return 0;
label6:
v3 = v3 + 1;
goto label5;
label7:
return 1;
}
protected void setParts(java.lang.String)
{
java.lang.String[] v11, v6;
java.util.ArrayList v5;
int v7, v8;
java.lang.String v1, v2, v9;
java.util.LinkedHashSet v10;
boolean v13, v17, v3;
io.vertx.ext.auth.authorization.impl.WildcardExpression v0;
java.lang.IllegalArgumentException v14, v18, v4;
java.util.List v12, v15, v16;
v0 := @this: io.vertx.ext.auth.authorization.impl.WildcardExpression;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v1.<java.lang.String: java.lang.String trim()>();
v3 = virtualinvoke v2.<java.lang.String: boolean isEmpty()>();
if v3 == 0 goto label1;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Wildcard string cannot be empty");
throw v4;
label1:
v5 = new java.util.ArrayList;
specialinvoke v5.<java.util.ArrayList: void <init>()>();
v0.<io.vertx.ext.auth.authorization.impl.WildcardExpression: java.util.List parts> = v5;
v6 = virtualinvoke v2.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");
v7 = lengthof v6;
v8 = 0;
label2:
if v8 >= v7 goto label4;
v9 = v6[v8];
v10 = new java.util.LinkedHashSet;
v11 = virtualinvoke v9.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");
v12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v11);
specialinvoke v10.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(v12);
v13 = interfaceinvoke v10.<java.util.Set: boolean isEmpty()>();
if v13 == 0 goto label3;
v14 = new java.lang.IllegalArgumentException;
specialinvoke v14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Wildcard string cannot contain parts with only dividers. Make sure permission strings are properly formatted.");
throw v14;
label3:
v15 = v0.<io.vertx.ext.auth.authorization.impl.WildcardExpression: java.util.List parts>;
interfaceinvoke v15.<java.util.List: boolean add(java.lang.Object)>(v10);
v8 = v8 + 1;
goto label2;
label4:
v16 = v0.<io.vertx.ext.auth.authorization.impl.WildcardExpression: java.util.List parts>;
v17 = interfaceinvoke v16.<java.util.List: boolean isEmpty()>();
if v17 == 0 goto label5;
v18 = new java.lang.IllegalArgumentException;
specialinvoke v18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Wildcard string cannot contain only dividers. Make sure permission strings are properly formatted.");
throw v18;
label5:
return;
}
public java.lang.String toString()
{
java.lang.String v1;
io.vertx.ext.auth.authorization.impl.WildcardExpression v0;
v0 := @this: io.vertx.ext.auth.authorization.impl.WildcardExpression;
v1 = v0.<io.vertx.ext.auth.authorization.impl.WildcardExpression: java.lang.String value>;
return v1;
}
}