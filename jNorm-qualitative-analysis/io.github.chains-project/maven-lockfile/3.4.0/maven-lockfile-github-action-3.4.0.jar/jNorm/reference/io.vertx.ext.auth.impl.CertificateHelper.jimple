public final class io.vertx.ext.auth.impl.CertificateHelper extends java.lang.Object
{
private static final io.vertx.core.impl.logging.Logger LOG;
private void <init>()
{
io.vertx.ext.auth.impl.CertificateHelper v0;
v0 := @this: io.vertx.ext.auth.impl.CertificateHelper;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static void checkValidity(java.util.List, java.util.List) throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.SignatureException, java.security.NoSuchProviderException
{
java.util.List v0, v1;
v0 := @parameter0: java.util.List;
v1 := @parameter1: java.util.List;
staticinvoke <io.vertx.ext.auth.impl.CertificateHelper: void checkValidity(java.util.List,boolean,java.util.List)>(v0, 1, v1);
return;
}
public static void checkValidity(java.util.List, boolean, java.util.List) throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.SignatureException, java.security.NoSuchProviderException
{
java.util.Date v12;
byte v14;
boolean v1, v10, v16, v25;
io.vertx.core.impl.logging.Logger v15;
java.util.List v0, v2;
javax.security.auth.x500.X500Principal v23, v24, v27, v28;
long v13, v5;
int v18, v19, v20, v21, v3, v31, v32, v6, v7;
java.lang.String v29;
java.util.Iterator v9;
java.security.PublicKey v30, v34;
java.security.cert.CertificateException v17, v26, v4;
java.lang.Object v11, v22, v33, v8;
v0 := @parameter0: java.util.List;
v1 := @parameter1: boolean;
v2 := @parameter2: java.util.List;
if v0 == null goto label01;
v3 = interfaceinvoke v0.<java.util.List: int size()>();
if v3 != 0 goto label02;
label01:
v4 = new java.security.cert.CertificateException;
specialinvoke v4.<java.security.cert.CertificateException: void <init>(java.lang.String)>("empty chain");
throw v4;
label02:
v5 = staticinvoke <java.lang.System: long currentTimeMillis()>();
v6 = 0;
label03:
v7 = interfaceinvoke v0.<java.util.List: int size()>();
if v6 >= v7 goto label10;
v8 = interfaceinvoke v0.<java.util.List: java.lang.Object get(int)>(v6);
virtualinvoke v8.<java.security.cert.X509Certificate: void checkValidity()>();
if v2 == null goto label06;
v9 = interfaceinvoke v2.<java.util.List: java.util.Iterator iterator()>();
label04:
v10 = interfaceinvoke v9.<java.util.Iterator: boolean hasNext()>();
if v10 == 0 goto label06;
v11 = interfaceinvoke v9.<java.util.Iterator: java.lang.Object next()>();
v12 = virtualinvoke v11.<java.security.cert.X509CRL: java.util.Date getNextUpdate()>();
v13 = virtualinvoke v12.<java.util.Date: long getTime()>();
v14 = v13 cmp v5;
if v14 >= 0 goto label05;
v15 = <io.vertx.ext.auth.impl.CertificateHelper: io.vertx.core.impl.logging.Logger LOG>;
interfaceinvoke v15.<io.vertx.core.impl.logging.Logger: void warn(java.lang.Object)>("CRL is out of date nextUpdate < now");
label05:
v16 = virtualinvoke v11.<java.security.cert.X509CRL: boolean isRevoked(java.security.cert.Certificate)>(v8);
if v16 == 0 goto label04;
v17 = new java.security.cert.CertificateException;
specialinvoke v17.<java.security.cert.CertificateException: void <init>(java.lang.String)>("Certificate is revoked");
throw v17;
label06:
v18 = interfaceinvoke v0.<java.util.List: int size()>();
if v18 != 1 goto label07;
return;
label07:
v19 = v6 + 1;
v20 = interfaceinvoke v0.<java.util.List: int size()>();
if v19 >= v20 goto label09;
v21 = v6 + 1;
v22 = interfaceinvoke v0.<java.util.List: java.lang.Object get(int)>(v21);
v23 = virtualinvoke v8.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();
v24 = virtualinvoke v22.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();
v25 = virtualinvoke v23.<javax.security.auth.x500.X500Principal: boolean equals(java.lang.Object)>(v24);
if v25 != 0 goto label08;
v26 = new java.security.cert.CertificateException;
v27 = virtualinvoke v8.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();
v28 = virtualinvoke v22.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();
v29 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (javax.security.auth.x500.X500Principal,javax.security.auth.x500.X500Principal)>(v27, v28) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Certificate path issuers dont match: [\u0001] != [\u0001]");
specialinvoke v26.<java.security.cert.CertificateException: void <init>(java.lang.String)>(v29);
throw v26;
label08:
v30 = virtualinvoke v22.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();
virtualinvoke v8.<java.security.cert.X509Certificate: void verify(java.security.PublicKey)>(v30);
label09:
v6 = v6 + 1;
goto label03;
label10:
if v1 == 0 goto label11;
v31 = interfaceinvoke v0.<java.util.List: int size()>();
v32 = v31 - 1;
v33 = interfaceinvoke v0.<java.util.List: java.lang.Object get(int)>(v32);
v34 = virtualinvoke v33.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();
virtualinvoke v33.<java.security.cert.X509Certificate: void verify(java.security.PublicKey)>(v34);
label11:
return;
}
public static io.vertx.ext.auth.impl.CertificateHelper$CertInfo getCertInfo(java.security.cert.X509Certificate)
{
java.security.cert.X509Certificate v0;
javax.naming.ldap.LdapName v6;
javax.security.auth.x500.X500Principal v1;
java.util.HashMap v3, v7;
int v11, v12, v14, v18, v19, v8, v9;
java.lang.String v10, v13, v15, v2, v4;
boolean v5;
io.vertx.ext.auth.impl.CertificateHelper$CertInfo v17;
javax.naming.InvalidNameException v16;
v0 := @parameter0: java.security.cert.X509Certificate;
v1 = virtualinvoke v0.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();
v2 = virtualinvoke v1.<javax.security.auth.x500.X500Principal: java.lang.String getName(java.lang.String)>("RFC2253");
v3 = null;
if v2 == null goto label6;
v4 = "";
v5 = virtualinvoke v4.<java.lang.String: boolean equals(java.lang.Object)>(v2);
if v5 != 0 goto label6;
label1:
v6 = new javax.naming.ldap.LdapName;
specialinvoke v6.<javax.naming.ldap.LdapName: void <init>(java.lang.String)>(v2);
v7 = new java.util.HashMap;
specialinvoke v7.<java.util.HashMap: void <init>()>();
v3 = v7;
v8 = 0;
label2:
v9 = virtualinvoke v6.<javax.naming.ldap.LdapName: int size()>();
if v8 >= v9 goto label6;
v10 = virtualinvoke v6.<javax.naming.ldap.LdapName: java.lang.String get(int)>(v8);
v11 = virtualinvoke v10.<java.lang.String: int indexOf(int)>(61);
v12 = (int) -1;
if v11 == v12 goto label3;
v13 = virtualinvoke v10.<java.lang.String: java.lang.String substring(int,int)>(0, v11);
v14 = v11 + 1;
v15 = virtualinvoke v10.<java.lang.String: java.lang.String substring(int)>(v14);
interfaceinvoke v7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v13, v15);
goto label4;
label3:
interfaceinvoke v7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v10, null);
label4:
v8 = v8 + 1;
goto label2;
label5:
v16 := @caughtexception;
label6:
v17 = new io.vertx.ext.auth.impl.CertificateHelper$CertInfo;
v18 = virtualinvoke v0.<java.security.cert.X509Certificate: int getVersion()>();
v19 = virtualinvoke v0.<java.security.cert.X509Certificate: int getBasicConstraints()>();
specialinvoke v17.<io.vertx.ext.auth.impl.CertificateHelper$CertInfo: void <init>(java.util.Map,int,int)>(v3, v18, v19);
return v17;
catch javax.naming.InvalidNameException from label1 to label5 with label5;
}
static void <clinit>()
{
io.vertx.core.impl.logging.Logger v0;
v0 = staticinvoke <io.vertx.core.impl.logging.LoggerFactory: io.vertx.core.impl.logging.Logger getLogger(java.lang.Class)>(class "Lio/vertx/ext/auth/impl/CertificateHelper;");
<io.vertx.ext.auth.impl.CertificateHelper: io.vertx.core.impl.logging.Logger LOG> = v0;
return;
}
}