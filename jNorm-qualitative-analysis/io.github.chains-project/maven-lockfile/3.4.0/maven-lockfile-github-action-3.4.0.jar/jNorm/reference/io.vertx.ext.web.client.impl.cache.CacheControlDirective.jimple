public final enum class io.vertx.ext.web.client.impl.cache.CacheControlDirective extends java.lang.Enum
{
public static final enum io.vertx.ext.web.client.impl.cache.CacheControlDirective PUBLIC;
public static final enum io.vertx.ext.web.client.impl.cache.CacheControlDirective PRIVATE;
public static final enum io.vertx.ext.web.client.impl.cache.CacheControlDirective NO_STORE;
public static final enum io.vertx.ext.web.client.impl.cache.CacheControlDirective NO_CACHE;
public static final enum io.vertx.ext.web.client.impl.cache.CacheControlDirective SHARED_MAX_AGE;
public static final enum io.vertx.ext.web.client.impl.cache.CacheControlDirective MAX_AGE;
public static final enum io.vertx.ext.web.client.impl.cache.CacheControlDirective STALE_IF_ERROR;
public static final enum io.vertx.ext.web.client.impl.cache.CacheControlDirective STALE_WHILE_REVALIDATE;
public static final enum io.vertx.ext.web.client.impl.cache.CacheControlDirective MUST_REVALIDATE;
private final java.lang.String value;
private static final java.util.Map VALUE_MAP;
private static final io.vertx.ext.web.client.impl.cache.CacheControlDirective[] $VALUES;
public static io.vertx.ext.web.client.impl.cache.CacheControlDirective[] values()
{
io.vertx.ext.web.client.impl.cache.CacheControlDirective[] v0;
java.lang.Object v1;
v0 = <io.vertx.ext.web.client.impl.cache.CacheControlDirective: io.vertx.ext.web.client.impl.cache.CacheControlDirective[] $VALUES>;
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
return v1;
}
public static io.vertx.ext.web.client.impl.cache.CacheControlDirective valueOf(java.lang.String)
{
java.lang.String v0;
java.lang.Enum v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lio/vertx/ext/web/client/impl/cache/CacheControlDirective;", v0);
return v1;
}
public static java.util.Optional fromHeader(java.lang.String)
{
java.util.Map v1, v3;
java.util.Optional v5, v6;
java.lang.Object v4;
java.lang.String v0;
boolean v2;
v0 := @parameter0: java.lang.String;
v1 = <io.vertx.ext.web.client.impl.cache.CacheControlDirective: java.util.Map VALUE_MAP>;
v2 = interfaceinvoke v1.<java.util.Map: boolean containsKey(java.lang.Object)>(v0);
if v2 == 0 goto label1;
v3 = <io.vertx.ext.web.client.impl.cache.CacheControlDirective: java.util.Map VALUE_MAP>;
v4 = interfaceinvoke v3.<java.util.Map: java.lang.Object get(java.lang.Object)>(v0);
v5 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>(v4);
return v5;
label1:
v6 = staticinvoke <java.util.Optional: java.util.Optional empty()>();
return v6;
}
private void <init>(java.lang.String, int, java.lang.String)
{
io.vertx.ext.web.client.impl.cache.CacheControlDirective v0;
int v2;
java.lang.String v1, v3;
v0 := @this: io.vertx.ext.web.client.impl.cache.CacheControlDirective;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: java.lang.String;
specialinvoke v0.<java.lang.Enum: void <init>(java.lang.String,int)>(v1, v2);
v0.<io.vertx.ext.web.client.impl.cache.CacheControlDirective: java.lang.String value> = v3;
return;
}
private static io.vertx.ext.web.client.impl.cache.CacheControlDirective[] $values()
{
io.vertx.ext.web.client.impl.cache.CacheControlDirective[] v0;
io.vertx.ext.web.client.impl.cache.CacheControlDirective v1, v2, v3, v4, v5, v6, v7, v8, v9;
v0 = newarray (io.vertx.ext.web.client.impl.cache.CacheControlDirective)[9];
v1 = <io.vertx.ext.web.client.impl.cache.CacheControlDirective: io.vertx.ext.web.client.impl.cache.CacheControlDirective PUBLIC>;
v0[0] = v1;
v2 = <io.vertx.ext.web.client.impl.cache.CacheControlDirective: io.vertx.ext.web.client.impl.cache.CacheControlDirective PRIVATE>;
v0[1] = v2;
v3 = <io.vertx.ext.web.client.impl.cache.CacheControlDirective: io.vertx.ext.web.client.impl.cache.CacheControlDirective NO_STORE>;
v0[2] = v3;
v4 = <io.vertx.ext.web.client.impl.cache.CacheControlDirective: io.vertx.ext.web.client.impl.cache.CacheControlDirective NO_CACHE>;
v0[3] = v4;
v5 = <io.vertx.ext.web.client.impl.cache.CacheControlDirective: io.vertx.ext.web.client.impl.cache.CacheControlDirective SHARED_MAX_AGE>;
v0[4] = v5;
v6 = <io.vertx.ext.web.client.impl.cache.CacheControlDirective: io.vertx.ext.web.client.impl.cache.CacheControlDirective MAX_AGE>;
v0[5] = v6;
v7 = <io.vertx.ext.web.client.impl.cache.CacheControlDirective: io.vertx.ext.web.client.impl.cache.CacheControlDirective STALE_IF_ERROR>;
v0[6] = v7;
v8 = <io.vertx.ext.web.client.impl.cache.CacheControlDirective: io.vertx.ext.web.client.impl.cache.CacheControlDirective STALE_WHILE_REVALIDATE>;
v0[7] = v8;
v9 = <io.vertx.ext.web.client.impl.cache.CacheControlDirective: io.vertx.ext.web.client.impl.cache.CacheControlDirective MUST_REVALIDATE>;
v0[8] = v9;
return v0;
}
static void <clinit>()
{
io.vertx.ext.web.client.impl.cache.CacheControlDirective[] v10, v9;
java.util.function.Function v12, v13;
io.vertx.ext.web.client.impl.cache.CacheControlDirective v0, v1, v2, v3, v4, v5, v6, v7, v8;
java.util.stream.Collector v14;
java.util.stream.Stream v11;
java.lang.Object v15;
v0 = new io.vertx.ext.web.client.impl.cache.CacheControlDirective;
specialinvoke v0.<io.vertx.ext.web.client.impl.cache.CacheControlDirective: void <init>(java.lang.String,int,java.lang.String)>("PUBLIC", 0, "public");
<io.vertx.ext.web.client.impl.cache.CacheControlDirective: io.vertx.ext.web.client.impl.cache.CacheControlDirective PUBLIC> = v0;
v1 = new io.vertx.ext.web.client.impl.cache.CacheControlDirective;
specialinvoke v1.<io.vertx.ext.web.client.impl.cache.CacheControlDirective: void <init>(java.lang.String,int,java.lang.String)>("PRIVATE", 1, "private");
<io.vertx.ext.web.client.impl.cache.CacheControlDirective: io.vertx.ext.web.client.impl.cache.CacheControlDirective PRIVATE> = v1;
v2 = new io.vertx.ext.web.client.impl.cache.CacheControlDirective;
specialinvoke v2.<io.vertx.ext.web.client.impl.cache.CacheControlDirective: void <init>(java.lang.String,int,java.lang.String)>("NO_STORE", 2, "no-store");
<io.vertx.ext.web.client.impl.cache.CacheControlDirective: io.vertx.ext.web.client.impl.cache.CacheControlDirective NO_STORE> = v2;
v3 = new io.vertx.ext.web.client.impl.cache.CacheControlDirective;
specialinvoke v3.<io.vertx.ext.web.client.impl.cache.CacheControlDirective: void <init>(java.lang.String,int,java.lang.String)>("NO_CACHE", 3, "no-cache");
<io.vertx.ext.web.client.impl.cache.CacheControlDirective: io.vertx.ext.web.client.impl.cache.CacheControlDirective NO_CACHE> = v3;
v4 = new io.vertx.ext.web.client.impl.cache.CacheControlDirective;
specialinvoke v4.<io.vertx.ext.web.client.impl.cache.CacheControlDirective: void <init>(java.lang.String,int,java.lang.String)>("SHARED_MAX_AGE", 4, "s-maxage");
<io.vertx.ext.web.client.impl.cache.CacheControlDirective: io.vertx.ext.web.client.impl.cache.CacheControlDirective SHARED_MAX_AGE> = v4;
v5 = new io.vertx.ext.web.client.impl.cache.CacheControlDirective;
specialinvoke v5.<io.vertx.ext.web.client.impl.cache.CacheControlDirective: void <init>(java.lang.String,int,java.lang.String)>("MAX_AGE", 5, "max-age");
<io.vertx.ext.web.client.impl.cache.CacheControlDirective: io.vertx.ext.web.client.impl.cache.CacheControlDirective MAX_AGE> = v5;
v6 = new io.vertx.ext.web.client.impl.cache.CacheControlDirective;
specialinvoke v6.<io.vertx.ext.web.client.impl.cache.CacheControlDirective: void <init>(java.lang.String,int,java.lang.String)>("STALE_IF_ERROR", 6, "stale-if-error");
<io.vertx.ext.web.client.impl.cache.CacheControlDirective: io.vertx.ext.web.client.impl.cache.CacheControlDirective STALE_IF_ERROR> = v6;
v7 = new io.vertx.ext.web.client.impl.cache.CacheControlDirective;
specialinvoke v7.<io.vertx.ext.web.client.impl.cache.CacheControlDirective: void <init>(java.lang.String,int,java.lang.String)>("STALE_WHILE_REVALIDATE", 7, "stale-while-revalidate");
<io.vertx.ext.web.client.impl.cache.CacheControlDirective: io.vertx.ext.web.client.impl.cache.CacheControlDirective STALE_WHILE_REVALIDATE> = v7;
v8 = new io.vertx.ext.web.client.impl.cache.CacheControlDirective;
specialinvoke v8.<io.vertx.ext.web.client.impl.cache.CacheControlDirective: void <init>(java.lang.String,int,java.lang.String)>("MUST_REVALIDATE", 8, "must-revalidate");
<io.vertx.ext.web.client.impl.cache.CacheControlDirective: io.vertx.ext.web.client.impl.cache.CacheControlDirective MUST_REVALIDATE> = v8;
v9 = staticinvoke <io.vertx.ext.web.client.impl.cache.CacheControlDirective: io.vertx.ext.web.client.impl.cache.CacheControlDirective[] $values()>();
<io.vertx.ext.web.client.impl.cache.CacheControlDirective: io.vertx.ext.web.client.impl.cache.CacheControlDirective[] $VALUES> = v9;
v10 = staticinvoke <io.vertx.ext.web.client.impl.cache.CacheControlDirective: io.vertx.ext.web.client.impl.cache.CacheControlDirective[] values()>();
v11 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>(v10);
v12 = staticinvoke <io.vertx.ext.web.client.impl.cache.CacheControlDirective$lambda_static_0__843: java.util.function.Function bootstrap$()>();
v13 = staticinvoke <java.util.function.Function: java.util.function.Function identity()>();
v14 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>(v12, v13);
v15 = interfaceinvoke v11.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v14);
<io.vertx.ext.web.client.impl.cache.CacheControlDirective: java.util.Map VALUE_MAP> = v15;
return;
}
}