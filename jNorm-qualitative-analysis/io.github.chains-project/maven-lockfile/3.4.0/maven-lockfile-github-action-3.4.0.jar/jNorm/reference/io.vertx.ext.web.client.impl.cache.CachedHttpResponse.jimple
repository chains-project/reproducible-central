public class io.vertx.ext.web.client.impl.cache.CachedHttpResponse extends java.lang.Object
{
private final java.lang.String version;
private final int statusCode;
private final java.lang.String statusMessage;
private final io.vertx.core.buffer.Buffer body;
private final io.vertx.core.MultiMap responseHeaders;
private final java.time.Instant timestamp;
private final io.vertx.ext.web.client.impl.cache.CacheControl cacheControl;
static io.vertx.ext.web.client.impl.cache.CachedHttpResponse wrap(io.vertx.ext.web.client.HttpResponse)
{
io.vertx.ext.web.client.HttpResponse v0;
io.vertx.core.MultiMap v1;
io.vertx.ext.web.client.impl.cache.CachedHttpResponse v3;
io.vertx.ext.web.client.impl.cache.CacheControl v2;
v0 := @parameter0: io.vertx.ext.web.client.HttpResponse;
v1 = interfaceinvoke v0.<io.vertx.ext.web.client.HttpResponse: io.vertx.core.MultiMap headers()>();
v2 = staticinvoke <io.vertx.ext.web.client.impl.cache.CacheControl: io.vertx.ext.web.client.impl.cache.CacheControl parse(io.vertx.core.MultiMap)>(v1);
v3 = staticinvoke <io.vertx.ext.web.client.impl.cache.CachedHttpResponse: io.vertx.ext.web.client.impl.cache.CachedHttpResponse wrap(io.vertx.ext.web.client.HttpResponse,io.vertx.ext.web.client.impl.cache.CacheControl)>(v0, v2);
return v3;
}
static io.vertx.ext.web.client.impl.cache.CachedHttpResponse wrap(io.vertx.ext.web.client.HttpResponse, io.vertx.ext.web.client.impl.cache.CacheControl)
{
io.vertx.ext.web.client.HttpResponse v0;
io.vertx.core.MultiMap v8;
io.vertx.core.buffer.Buffer v7;
io.vertx.core.http.HttpVersion v3;
int v5;
io.vertx.ext.web.client.impl.cache.CachedHttpResponse v2;
java.lang.String v4, v6;
io.vertx.ext.web.client.impl.cache.CacheControl v1;
v0 := @parameter0: io.vertx.ext.web.client.HttpResponse;
v1 := @parameter1: io.vertx.ext.web.client.impl.cache.CacheControl;
v2 = new io.vertx.ext.web.client.impl.cache.CachedHttpResponse;
v3 = interfaceinvoke v0.<io.vertx.ext.web.client.HttpResponse: io.vertx.core.http.HttpVersion version()>();
v4 = virtualinvoke v3.<io.vertx.core.http.HttpVersion: java.lang.String name()>();
v5 = interfaceinvoke v0.<io.vertx.ext.web.client.HttpResponse: int statusCode()>();
v6 = interfaceinvoke v0.<io.vertx.ext.web.client.HttpResponse: java.lang.String statusMessage()>();
v7 = interfaceinvoke v0.<io.vertx.ext.web.client.HttpResponse: io.vertx.core.buffer.Buffer bodyAsBuffer()>();
v8 = interfaceinvoke v0.<io.vertx.ext.web.client.HttpResponse: io.vertx.core.MultiMap headers()>();
specialinvoke v2.<io.vertx.ext.web.client.impl.cache.CachedHttpResponse: void <init>(java.lang.String,int,java.lang.String,io.vertx.core.buffer.Buffer,io.vertx.core.MultiMap,io.vertx.ext.web.client.impl.cache.CacheControl)>(v4, v5, v6, v7, v8, v1);
return v2;
}
void <init>(java.lang.String, int, java.lang.String, io.vertx.core.buffer.Buffer, io.vertx.core.MultiMap, io.vertx.ext.web.client.impl.cache.CacheControl)
{
io.vertx.core.MultiMap v5;
java.time.Instant v7;
io.vertx.core.buffer.Buffer v4;
int v2;
io.vertx.ext.web.client.impl.cache.CachedHttpResponse v0;
java.lang.String v1, v3;
io.vertx.ext.web.client.impl.cache.CacheControl v6;
v0 := @this: io.vertx.ext.web.client.impl.cache.CachedHttpResponse;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: java.lang.String;
v4 := @parameter3: io.vertx.core.buffer.Buffer;
v5 := @parameter4: io.vertx.core.MultiMap;
v6 := @parameter5: io.vertx.ext.web.client.impl.cache.CacheControl;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.ext.web.client.impl.cache.CachedHttpResponse: java.lang.String version> = v1;
v0.<io.vertx.ext.web.client.impl.cache.CachedHttpResponse: int statusCode> = v2;
v0.<io.vertx.ext.web.client.impl.cache.CachedHttpResponse: java.lang.String statusMessage> = v3;
v0.<io.vertx.ext.web.client.impl.cache.CachedHttpResponse: io.vertx.core.buffer.Buffer body> = v4;
v0.<io.vertx.ext.web.client.impl.cache.CachedHttpResponse: io.vertx.core.MultiMap responseHeaders> = v5;
v7 = staticinvoke <java.time.Instant: java.time.Instant now()>();
v0.<io.vertx.ext.web.client.impl.cache.CachedHttpResponse: java.time.Instant timestamp> = v7;
v0.<io.vertx.ext.web.client.impl.cache.CachedHttpResponse: io.vertx.ext.web.client.impl.cache.CacheControl cacheControl> = v6;
return;
}
public java.lang.String getVersion()
{
io.vertx.ext.web.client.impl.cache.CachedHttpResponse v0;
java.lang.String v1;
v0 := @this: io.vertx.ext.web.client.impl.cache.CachedHttpResponse;
v1 = v0.<io.vertx.ext.web.client.impl.cache.CachedHttpResponse: java.lang.String version>;
return v1;
}
public int getStatusCode()
{
int v1;
io.vertx.ext.web.client.impl.cache.CachedHttpResponse v0;
v0 := @this: io.vertx.ext.web.client.impl.cache.CachedHttpResponse;
v1 = v0.<io.vertx.ext.web.client.impl.cache.CachedHttpResponse: int statusCode>;
return v1;
}
public java.lang.String getStatusMessage()
{
io.vertx.ext.web.client.impl.cache.CachedHttpResponse v0;
java.lang.String v1;
v0 := @this: io.vertx.ext.web.client.impl.cache.CachedHttpResponse;
v1 = v0.<io.vertx.ext.web.client.impl.cache.CachedHttpResponse: java.lang.String statusMessage>;
return v1;
}
public io.vertx.core.buffer.Buffer getBody()
{
io.vertx.ext.web.client.impl.cache.CachedHttpResponse v0;
io.vertx.core.buffer.Buffer v1;
v0 := @this: io.vertx.ext.web.client.impl.cache.CachedHttpResponse;
v1 = v0.<io.vertx.ext.web.client.impl.cache.CachedHttpResponse: io.vertx.core.buffer.Buffer body>;
return v1;
}
public io.vertx.core.MultiMap getResponseHeaders()
{
io.vertx.core.MultiMap v1;
io.vertx.ext.web.client.impl.cache.CachedHttpResponse v0;
v0 := @this: io.vertx.ext.web.client.impl.cache.CachedHttpResponse;
v1 = v0.<io.vertx.ext.web.client.impl.cache.CachedHttpResponse: io.vertx.core.MultiMap responseHeaders>;
return v1;
}
public java.time.Instant getTimestamp()
{
io.vertx.ext.web.client.impl.cache.CachedHttpResponse v0;
java.time.Instant v1;
v0 := @this: io.vertx.ext.web.client.impl.cache.CachedHttpResponse;
v1 = v0.<io.vertx.ext.web.client.impl.cache.CachedHttpResponse: java.time.Instant timestamp>;
return v1;
}
public io.vertx.ext.web.client.impl.cache.CacheControl getCacheControl()
{
io.vertx.ext.web.client.impl.cache.CachedHttpResponse v0;
io.vertx.ext.web.client.impl.cache.CacheControl v1;
v0 := @this: io.vertx.ext.web.client.impl.cache.CachedHttpResponse;
v1 = v0.<io.vertx.ext.web.client.impl.cache.CachedHttpResponse: io.vertx.ext.web.client.impl.cache.CacheControl cacheControl>;
return v1;
}
public boolean isFresh()
{
byte v4;
io.vertx.ext.web.client.impl.cache.CachedHttpResponse v0;
long v1, v3;
io.vertx.ext.web.client.impl.cache.CacheControl v2;
boolean v5;
v0 := @this: io.vertx.ext.web.client.impl.cache.CachedHttpResponse;
v1 = virtualinvoke v0.<io.vertx.ext.web.client.impl.cache.CachedHttpResponse: long age()>();
v2 = v0.<io.vertx.ext.web.client.impl.cache.CachedHttpResponse: io.vertx.ext.web.client.impl.cache.CacheControl cacheControl>;
v3 = virtualinvoke v2.<io.vertx.ext.web.client.impl.cache.CacheControl: long getMaxAge()>();
v4 = v1 cmp v3;
if v4 > 0 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
public boolean useStaleWhileRevalidate()
{
io.vertx.ext.web.client.impl.cache.CachedHttpResponse v0;
io.vertx.ext.web.client.impl.cache.CacheControlDirective v1;
boolean v2;
v0 := @this: io.vertx.ext.web.client.impl.cache.CachedHttpResponse;
v1 = <io.vertx.ext.web.client.impl.cache.CacheControlDirective: io.vertx.ext.web.client.impl.cache.CacheControlDirective STALE_WHILE_REVALIDATE>;
v2 = specialinvoke v0.<io.vertx.ext.web.client.impl.cache.CachedHttpResponse: boolean useStale(io.vertx.ext.web.client.impl.cache.CacheControlDirective)>(v1);
return v2;
}
public boolean useStaleIfError()
{
io.vertx.ext.web.client.impl.cache.CachedHttpResponse v0;
io.vertx.ext.web.client.impl.cache.CacheControlDirective v1;
boolean v2;
v0 := @this: io.vertx.ext.web.client.impl.cache.CachedHttpResponse;
v1 = <io.vertx.ext.web.client.impl.cache.CacheControlDirective: io.vertx.ext.web.client.impl.cache.CacheControlDirective STALE_IF_ERROR>;
v2 = specialinvoke v0.<io.vertx.ext.web.client.impl.cache.CachedHttpResponse: boolean useStale(io.vertx.ext.web.client.impl.cache.CacheControlDirective)>(v1);
return v2;
}
public long age()
{
java.time.Duration v3;
io.vertx.ext.web.client.impl.cache.CachedHttpResponse v0;
long v4;
java.time.Instant v1, v2;
v0 := @this: io.vertx.ext.web.client.impl.cache.CachedHttpResponse;
v1 = v0.<io.vertx.ext.web.client.impl.cache.CachedHttpResponse: java.time.Instant timestamp>;
v2 = staticinvoke <java.time.Instant: java.time.Instant now()>();
v3 = staticinvoke <java.time.Duration: java.time.Duration between(java.time.temporal.Temporal,java.time.temporal.Temporal)>(v1, v2);
v4 = virtualinvoke v3.<java.time.Duration: long getSeconds()>();
return v4;
}
public io.vertx.ext.web.client.HttpResponse rehydrate()
{
io.vertx.core.MultiMap v6, v7;
io.vertx.ext.web.client.impl.HttpResponseImpl v1;
java.util.List v10, v8;
io.vertx.core.buffer.Buffer v9;
io.vertx.core.http.HttpVersion v3;
int v4;
io.vertx.ext.web.client.impl.cache.CachedHttpResponse v0;
java.lang.String v2, v5;
v0 := @this: io.vertx.ext.web.client.impl.cache.CachedHttpResponse;
v1 = new io.vertx.ext.web.client.impl.HttpResponseImpl;
v2 = v0.<io.vertx.ext.web.client.impl.cache.CachedHttpResponse: java.lang.String version>;
v3 = staticinvoke <io.vertx.core.http.HttpVersion: io.vertx.core.http.HttpVersion valueOf(java.lang.String)>(v2);
v4 = v0.<io.vertx.ext.web.client.impl.cache.CachedHttpResponse: int statusCode>;
v5 = v0.<io.vertx.ext.web.client.impl.cache.CachedHttpResponse: java.lang.String statusMessage>;
v6 = v0.<io.vertx.ext.web.client.impl.cache.CachedHttpResponse: io.vertx.core.MultiMap responseHeaders>;
v7 = staticinvoke <io.vertx.core.MultiMap: io.vertx.core.MultiMap caseInsensitiveMultiMap()>();
v8 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
v9 = v0.<io.vertx.ext.web.client.impl.cache.CachedHttpResponse: io.vertx.core.buffer.Buffer body>;
v10 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
specialinvoke v1.<io.vertx.ext.web.client.impl.HttpResponseImpl: void <init>(io.vertx.core.http.HttpVersion,int,java.lang.String,io.vertx.core.MultiMap,io.vertx.core.MultiMap,java.util.List,java.lang.Object,java.util.List)>(v3, v4, v5, v6, v7, v8, v9, v10);
return v1;
}
private boolean useStale(io.vertx.ext.web.client.impl.cache.CacheControlDirective)
{
long v11, v2, v4, v5, v6;
byte v12;
io.vertx.ext.web.client.impl.cache.CacheControlDirective v1;
java.lang.Long v9;
java.util.Map v8;
io.vertx.ext.web.client.impl.cache.CachedHttpResponse v0;
java.lang.Object v10;
io.vertx.ext.web.client.impl.cache.CacheControl v3, v7;
boolean v13;
v0 := @this: io.vertx.ext.web.client.impl.cache.CachedHttpResponse;
v1 := @parameter0: io.vertx.ext.web.client.impl.cache.CacheControlDirective;
v2 = virtualinvoke v0.<io.vertx.ext.web.client.impl.cache.CachedHttpResponse: long age()>();
v3 = virtualinvoke v0.<io.vertx.ext.web.client.impl.cache.CachedHttpResponse: io.vertx.ext.web.client.impl.cache.CacheControl getCacheControl()>();
v4 = virtualinvoke v3.<io.vertx.ext.web.client.impl.cache.CacheControl: long getMaxAge()>();
v5 = v2 - v4;
v6 = staticinvoke <java.lang.Math: long max(long,long)>(0L, v5);
v7 = virtualinvoke v0.<io.vertx.ext.web.client.impl.cache.CachedHttpResponse: io.vertx.ext.web.client.impl.cache.CacheControl getCacheControl()>();
v8 = virtualinvoke v7.<io.vertx.ext.web.client.impl.cache.CacheControl: java.util.Map getTimeDirectives()>();
v9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);
v10 = interfaceinvoke v8.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>(v1, v9);
v11 = virtualinvoke v10.<java.lang.Long: long longValue()>();
v12 = v6 cmp v11;
if v12 > 0 goto label1;
v13 = 1;
goto label2;
label1:
v13 = 0;
label2:
return v13;
}
}