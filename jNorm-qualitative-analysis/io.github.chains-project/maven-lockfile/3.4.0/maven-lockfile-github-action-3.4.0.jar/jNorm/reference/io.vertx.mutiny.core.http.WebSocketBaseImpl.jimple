class io.vertx.mutiny.core.http.WebSocketBaseImpl extends java.lang.Object implements io.vertx.mutiny.core.http.WebSocketBase
{
private final io.vertx.core.http.WebSocketBase delegate;
private io.smallrye.mutiny.Multi multi;
private io.vertx.mutiny.core.net.SocketAddress cached_0;
private io.vertx.mutiny.core.net.SocketAddress cached_1;
public io.vertx.core.http.WebSocketBase getDelegate()
{
io.vertx.core.http.WebSocketBase v1;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 = v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.core.http.WebSocketBase delegate>;
return v1;
}
void <init>()
{
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.core.http.WebSocketBase delegate> = null;
return;
}
public void <init>(io.vertx.core.http.WebSocketBase)
{
io.vertx.core.http.WebSocketBase v1;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: io.vertx.core.http.WebSocketBase;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.core.http.WebSocketBase delegate> = v1;
return;
}
public synchronized io.smallrye.mutiny.Multi toMulti()
{
io.vertx.core.http.WebSocketBase v3;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
java.util.function.Function v2;
io.smallrye.mutiny.Multi v1, v4, v5;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 = v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.smallrye.mutiny.Multi multi>;
if v1 != null goto label1;
v2 = staticinvoke <io.vertx.mutiny.core.http.WebSocketBaseImpl$newInstance__1869: java.util.function.Function bootstrap$()>();
v3 = v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.core.http.WebSocketBase delegate>;
v4 = staticinvoke <io.smallrye.mutiny.vertx.MultiHelper: io.smallrye.mutiny.Multi toMulti(io.vertx.core.streams.ReadStream,java.util.function.Function)>(v3, v2);
v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.smallrye.mutiny.Multi multi> = v4;
label1:
v5 = v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.smallrye.mutiny.Multi multi>;
return v5;
}
public java.lang.Iterable toBlockingIterable()
{
io.smallrye.mutiny.groups.MultiSubscribe v2;
io.smallrye.mutiny.helpers.BlockingIterable v3;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.smallrye.mutiny.Multi toMulti()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiSubscribe subscribe()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.MultiSubscribe: io.smallrye.mutiny.helpers.BlockingIterable asIterable()>();
return v3;
}
public java.util.stream.Stream toBlockingStream()
{
io.smallrye.mutiny.groups.MultiSubscribe v2;
java.util.stream.Stream v3;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.smallrye.mutiny.Multi toMulti()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiSubscribe subscribe()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.MultiSubscribe: java.util.stream.Stream asStream()>();
return v3;
}
public io.smallrye.mutiny.Uni write(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = staticinvoke <io.vertx.mutiny.core.http.WebSocketBaseImpl$lambda_write_0__1870: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.WebSocketBaseImpl,io.vertx.mutiny.core.buffer.Buffer)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void writeAndAwait(io.vertx.mutiny.core.buffer.Buffer)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.buffer.Buffer v1;
java.lang.Object v4;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.smallrye.mutiny.Uni write(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void writeAndForget(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.buffer.Buffer v1;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.smallrye.mutiny.Uni write(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public io.smallrye.mutiny.Uni end(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = staticinvoke <io.vertx.mutiny.core.http.WebSocketBaseImpl$lambda_end_1__1871: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.WebSocketBaseImpl,io.vertx.mutiny.core.buffer.Buffer)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void endAndAwait(io.vertx.mutiny.core.buffer.Buffer)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.buffer.Buffer v1;
java.lang.Object v4;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.smallrye.mutiny.Uni end(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void endAndForget(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.buffer.Buffer v1;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.smallrye.mutiny.Uni end(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public boolean writeQueueFull()
{
io.vertx.core.http.WebSocketBase v1;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
boolean v2;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 = v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.core.http.WebSocketBase delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.WebSocketBase: boolean writeQueueFull()>();
return v2;
}
public io.vertx.mutiny.core.streams.Pipe pipe()
{
io.vertx.mutiny.core.streams.Pipe v4;
io.vertx.core.streams.Pipe v2;
io.vertx.core.http.WebSocketBase v1;
io.smallrye.mutiny.vertx.TypeArg v3;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 = v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.core.http.WebSocketBase delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.WebSocketBase: io.vertx.core.streams.Pipe pipe()>();
v3 = <io.vertx.mutiny.core.http.WebSocketBaseImpl: io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_0>;
v4 = staticinvoke <io.vertx.mutiny.core.streams.Pipe: io.vertx.mutiny.core.streams.Pipe newInstance(io.vertx.core.streams.Pipe,io.smallrye.mutiny.vertx.TypeArg)>(v2, v3);
return v4;
}
public io.smallrye.mutiny.Uni pipeTo(io.vertx.mutiny.core.streams.WriteStream)
{
io.vertx.mutiny.core.streams.WriteStream v1;
java.util.function.Consumer v2;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: io.vertx.mutiny.core.streams.WriteStream;
v2 = staticinvoke <io.vertx.mutiny.core.http.WebSocketBaseImpl$lambda_pipeTo_2__1872: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.WebSocketBaseImpl,io.vertx.mutiny.core.streams.WriteStream)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void pipeToAndAwait(io.vertx.mutiny.core.streams.WriteStream)
{
io.vertx.mutiny.core.streams.WriteStream v1;
io.smallrye.mutiny.groups.UniAwait v3;
java.lang.Object v4;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: io.vertx.mutiny.core.streams.WriteStream;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.smallrye.mutiny.Uni pipeTo(io.vertx.mutiny.core.streams.WriteStream)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void pipeToAndForget(io.vertx.mutiny.core.streams.WriteStream)
{
io.vertx.mutiny.core.streams.WriteStream v1;
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: io.vertx.mutiny.core.streams.WriteStream;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.smallrye.mutiny.Uni pipeTo(io.vertx.mutiny.core.streams.WriteStream)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
private io.vertx.mutiny.core.http.WebSocketBase __exceptionHandler(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.core.http.WebSocketBase v2;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.core.http.WebSocketBase delegate>;
interfaceinvoke v2.<io.vertx.core.http.WebSocketBase: io.vertx.core.http.WebSocketBase exceptionHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.WebSocketBase exceptionHandler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.http.WebSocketBase v3;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.mutiny.core.http.WebSocketBase __exceptionHandler(io.vertx.core.Handler)>(v2);
return v3;
}
private io.vertx.mutiny.core.http.WebSocketBase __handler(io.vertx.core.Handler)
{
io.vertx.core.http.WebSocketBase v2;
io.smallrye.mutiny.vertx.DelegatingHandler v3;
io.vertx.core.Handler v1;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
java.util.function.Function v4;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.core.http.WebSocketBase delegate>;
v3 = new io.smallrye.mutiny.vertx.DelegatingHandler;
v4 = staticinvoke <io.vertx.mutiny.core.http.WebSocketBaseImpl$lambda___handler_3__1873: java.util.function.Function bootstrap$()>();
specialinvoke v3.<io.smallrye.mutiny.vertx.DelegatingHandler: void <init>(io.vertx.core.Handler,java.util.function.Function)>(v1, v4);
interfaceinvoke v2.<io.vertx.core.http.WebSocketBase: io.vertx.core.http.WebSocketBase handler(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.mutiny.core.http.WebSocketBase handler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.http.WebSocketBase v3;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.mutiny.core.http.WebSocketBase __handler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.vertx.mutiny.core.http.WebSocketBase pause()
{
io.vertx.core.http.WebSocketBase v1;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 = v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.core.http.WebSocketBase delegate>;
interfaceinvoke v1.<io.vertx.core.http.WebSocketBase: io.vertx.core.http.WebSocketBase pause()>();
return v0;
}
public io.vertx.mutiny.core.http.WebSocketBase resume()
{
io.vertx.core.http.WebSocketBase v1;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 = v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.core.http.WebSocketBase delegate>;
interfaceinvoke v1.<io.vertx.core.http.WebSocketBase: io.vertx.core.http.WebSocketBase resume()>();
return v0;
}
public io.vertx.mutiny.core.http.WebSocketBase fetch(long)
{
long v1;
io.vertx.core.http.WebSocketBase v2;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: long;
v2 = v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.core.http.WebSocketBase delegate>;
interfaceinvoke v2.<io.vertx.core.http.WebSocketBase: io.vertx.core.http.WebSocketBase fetch(long)>(v1);
return v0;
}
private io.vertx.mutiny.core.http.WebSocketBase __endHandler(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.core.http.WebSocketBase v2;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.core.http.WebSocketBase delegate>;
interfaceinvoke v2.<io.vertx.core.http.WebSocketBase: io.vertx.core.http.WebSocketBase endHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.WebSocketBase endHandler(java.lang.Runnable)
{
io.vertx.mutiny.core.http.WebSocketBase v3;
io.vertx.core.Handler v2;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
java.lang.Runnable v1;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: java.lang.Runnable;
v2 = staticinvoke <io.vertx.mutiny.core.http.WebSocketBaseImpl$lambda_endHandler_4__1874: io.vertx.core.Handler bootstrap$(java.lang.Runnable)>(v1);
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.mutiny.core.http.WebSocketBase __endHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.vertx.mutiny.core.http.WebSocketBase setWriteQueueMaxSize(int)
{
int v1;
io.vertx.core.http.WebSocketBase v2;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: int;
v2 = v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.core.http.WebSocketBase delegate>;
interfaceinvoke v2.<io.vertx.core.http.WebSocketBase: io.vertx.core.http.WebSocketBase setWriteQueueMaxSize(int)>(v1);
return v0;
}
private io.vertx.mutiny.core.http.WebSocketBase __drainHandler(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.core.http.WebSocketBase v2;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.core.http.WebSocketBase delegate>;
interfaceinvoke v2.<io.vertx.core.http.WebSocketBase: io.vertx.core.http.WebSocketBase drainHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.WebSocketBase drainHandler(java.lang.Runnable)
{
io.vertx.mutiny.core.http.WebSocketBase v3;
io.vertx.core.Handler v2;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
java.lang.Runnable v1;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: java.lang.Runnable;
v2 = staticinvoke <io.vertx.mutiny.core.http.WebSocketBaseImpl$lambda_drainHandler_5__1875: io.vertx.core.Handler bootstrap$(java.lang.Runnable)>(v1);
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.mutiny.core.http.WebSocketBase __drainHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public java.lang.String binaryHandlerID()
{
java.lang.String v2;
io.vertx.core.http.WebSocketBase v1;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 = v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.core.http.WebSocketBase delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.WebSocketBase: java.lang.String binaryHandlerID()>();
return v2;
}
public java.lang.String textHandlerID()
{
java.lang.String v2;
io.vertx.core.http.WebSocketBase v1;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 = v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.core.http.WebSocketBase delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.WebSocketBase: java.lang.String textHandlerID()>();
return v2;
}
public java.lang.String subProtocol()
{
java.lang.String v2;
io.vertx.core.http.WebSocketBase v1;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 = v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.core.http.WebSocketBase delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.WebSocketBase: java.lang.String subProtocol()>();
return v2;
}
public java.lang.Short closeStatusCode()
{
io.vertx.core.http.WebSocketBase v1;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
java.lang.Short v2;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 = v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.core.http.WebSocketBase delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.WebSocketBase: java.lang.Short closeStatusCode()>();
return v2;
}
public java.lang.String closeReason()
{
java.lang.String v2;
io.vertx.core.http.WebSocketBase v1;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 = v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.core.http.WebSocketBase delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.WebSocketBase: java.lang.String closeReason()>();
return v2;
}
public io.vertx.mutiny.core.MultiMap headers()
{
io.vertx.core.http.WebSocketBase v1;
io.vertx.core.MultiMap v2;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.vertx.mutiny.core.MultiMap v3;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 = v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.core.http.WebSocketBase delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.WebSocketBase: io.vertx.core.MultiMap headers()>();
v3 = staticinvoke <io.vertx.mutiny.core.MultiMap: io.vertx.mutiny.core.MultiMap newInstance(io.vertx.core.MultiMap)>(v2);
return v3;
}
public io.smallrye.mutiny.Uni writeFrame(io.vertx.mutiny.core.http.WebSocketFrame)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v3;
io.vertx.mutiny.core.http.WebSocketFrame v1;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: io.vertx.mutiny.core.http.WebSocketFrame;
v2 = staticinvoke <io.vertx.mutiny.core.http.WebSocketBaseImpl$lambda_writeFrame_6__1876: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.WebSocketBaseImpl,io.vertx.mutiny.core.http.WebSocketFrame)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void writeFrameAndAwait(io.vertx.mutiny.core.http.WebSocketFrame)
{
io.smallrye.mutiny.groups.UniAwait v3;
java.lang.Object v4;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v2;
io.vertx.mutiny.core.http.WebSocketFrame v1;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: io.vertx.mutiny.core.http.WebSocketFrame;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.smallrye.mutiny.Uni writeFrame(io.vertx.mutiny.core.http.WebSocketFrame)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.http.WebSocketBase writeFrameAndForget(io.vertx.mutiny.core.http.WebSocketFrame)
{
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v2;
io.vertx.mutiny.core.http.WebSocketFrame v1;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: io.vertx.mutiny.core.http.WebSocketFrame;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.smallrye.mutiny.Uni writeFrame(io.vertx.mutiny.core.http.WebSocketFrame)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.smallrye.mutiny.Uni writeFinalTextFrame(java.lang.String)
{
java.util.function.Consumer v2;
java.lang.String v1;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.http.WebSocketBaseImpl$lambda_writeFinalTextFrame_7__1877: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.WebSocketBaseImpl,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void writeFinalTextFrameAndAwait(java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v3;
java.lang.Object v4;
java.lang.String v1;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.smallrye.mutiny.Uni writeFinalTextFrame(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.http.WebSocketBase writeFinalTextFrameAndForget(java.lang.String)
{
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.smallrye.mutiny.Uni writeFinalTextFrame(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.smallrye.mutiny.Uni writeFinalBinaryFrame(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = staticinvoke <io.vertx.mutiny.core.http.WebSocketBaseImpl$lambda_writeFinalBinaryFrame_8__1878: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.WebSocketBaseImpl,io.vertx.mutiny.core.buffer.Buffer)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void writeFinalBinaryFrameAndAwait(io.vertx.mutiny.core.buffer.Buffer)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.buffer.Buffer v1;
java.lang.Object v4;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.smallrye.mutiny.Uni writeFinalBinaryFrame(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.http.WebSocketBase writeFinalBinaryFrameAndForget(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.buffer.Buffer v1;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.smallrye.mutiny.Uni writeFinalBinaryFrame(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.smallrye.mutiny.Uni writeBinaryMessage(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = staticinvoke <io.vertx.mutiny.core.http.WebSocketBaseImpl$lambda_writeBinaryMessage_9__1879: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.WebSocketBaseImpl,io.vertx.mutiny.core.buffer.Buffer)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void writeBinaryMessageAndAwait(io.vertx.mutiny.core.buffer.Buffer)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.buffer.Buffer v1;
java.lang.Object v4;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.smallrye.mutiny.Uni writeBinaryMessage(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.http.WebSocketBase writeBinaryMessageAndForget(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.buffer.Buffer v1;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.smallrye.mutiny.Uni writeBinaryMessage(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.smallrye.mutiny.Uni writeTextMessage(java.lang.String)
{
java.util.function.Consumer v2;
java.lang.String v1;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.http.WebSocketBaseImpl$lambda_writeTextMessage_10__1880: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.WebSocketBaseImpl,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void writeTextMessageAndAwait(java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v3;
java.lang.Object v4;
java.lang.String v1;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.smallrye.mutiny.Uni writeTextMessage(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.http.WebSocketBase writeTextMessageAndForget(java.lang.String)
{
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.smallrye.mutiny.Uni writeTextMessage(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.smallrye.mutiny.Uni writePing(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = staticinvoke <io.vertx.mutiny.core.http.WebSocketBaseImpl$lambda_writePing_11__1881: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.WebSocketBaseImpl,io.vertx.mutiny.core.buffer.Buffer)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void writePingAndAwait(io.vertx.mutiny.core.buffer.Buffer)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.buffer.Buffer v1;
java.lang.Object v4;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.smallrye.mutiny.Uni writePing(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.http.WebSocketBase writePingAndForget(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.buffer.Buffer v1;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.smallrye.mutiny.Uni writePing(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.smallrye.mutiny.Uni writePong(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = staticinvoke <io.vertx.mutiny.core.http.WebSocketBaseImpl$lambda_writePong_12__1882: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.WebSocketBaseImpl,io.vertx.mutiny.core.buffer.Buffer)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void writePongAndAwait(io.vertx.mutiny.core.buffer.Buffer)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.buffer.Buffer v1;
java.lang.Object v4;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.smallrye.mutiny.Uni writePong(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.http.WebSocketBase writePongAndForget(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.buffer.Buffer v1;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.smallrye.mutiny.Uni writePong(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
private io.vertx.mutiny.core.http.WebSocketBase __closeHandler(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.core.http.WebSocketBase v2;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.core.http.WebSocketBase delegate>;
interfaceinvoke v2.<io.vertx.core.http.WebSocketBase: io.vertx.core.http.WebSocketBase closeHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.WebSocketBase closeHandler(java.lang.Runnable)
{
io.vertx.mutiny.core.http.WebSocketBase v3;
io.vertx.core.Handler v2;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
java.lang.Runnable v1;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: java.lang.Runnable;
v2 = staticinvoke <io.vertx.mutiny.core.http.WebSocketBaseImpl$lambda_closeHandler_13__1883: io.vertx.core.Handler bootstrap$(java.lang.Runnable)>(v1);
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.mutiny.core.http.WebSocketBase __closeHandler(io.vertx.core.Handler)>(v2);
return v3;
}
private io.vertx.mutiny.core.http.WebSocketBase __frameHandler(io.vertx.core.Handler)
{
io.vertx.core.http.WebSocketBase v2;
io.smallrye.mutiny.vertx.DelegatingHandler v3;
io.vertx.core.Handler v1;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
java.util.function.Function v4;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.core.http.WebSocketBase delegate>;
v3 = new io.smallrye.mutiny.vertx.DelegatingHandler;
v4 = staticinvoke <io.vertx.mutiny.core.http.WebSocketBaseImpl$lambda___frameHandler_14__1884: java.util.function.Function bootstrap$()>();
specialinvoke v3.<io.smallrye.mutiny.vertx.DelegatingHandler: void <init>(io.vertx.core.Handler,java.util.function.Function)>(v1, v4);
interfaceinvoke v2.<io.vertx.core.http.WebSocketBase: io.vertx.core.http.WebSocketBase frameHandler(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.mutiny.core.http.WebSocketBase frameHandler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.http.WebSocketBase v3;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.mutiny.core.http.WebSocketBase __frameHandler(io.vertx.core.Handler)>(v2);
return v3;
}
private io.vertx.mutiny.core.http.WebSocketBase __textMessageHandler(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.core.http.WebSocketBase v2;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.core.http.WebSocketBase delegate>;
interfaceinvoke v2.<io.vertx.core.http.WebSocketBase: io.vertx.core.http.WebSocketBase textMessageHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.http.WebSocketBase textMessageHandler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.http.WebSocketBase v3;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.mutiny.core.http.WebSocketBase __textMessageHandler(io.vertx.core.Handler)>(v2);
return v3;
}
private io.vertx.mutiny.core.http.WebSocketBase __binaryMessageHandler(io.vertx.core.Handler)
{
io.vertx.core.http.WebSocketBase v2;
io.smallrye.mutiny.vertx.DelegatingHandler v3;
io.vertx.core.Handler v1;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
java.util.function.Function v4;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.core.http.WebSocketBase delegate>;
v3 = new io.smallrye.mutiny.vertx.DelegatingHandler;
v4 = staticinvoke <io.vertx.mutiny.core.http.WebSocketBaseImpl$lambda___binaryMessageHandler_15__1885: java.util.function.Function bootstrap$()>();
specialinvoke v3.<io.smallrye.mutiny.vertx.DelegatingHandler: void <init>(io.vertx.core.Handler,java.util.function.Function)>(v1, v4);
interfaceinvoke v2.<io.vertx.core.http.WebSocketBase: io.vertx.core.http.WebSocketBase binaryMessageHandler(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.mutiny.core.http.WebSocketBase binaryMessageHandler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.http.WebSocketBase v3;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.mutiny.core.http.WebSocketBase __binaryMessageHandler(io.vertx.core.Handler)>(v2);
return v3;
}
private io.vertx.mutiny.core.http.WebSocketBase __pongHandler(io.vertx.core.Handler)
{
io.vertx.core.http.WebSocketBase v2;
io.smallrye.mutiny.vertx.DelegatingHandler v3;
io.vertx.core.Handler v1;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
java.util.function.Function v4;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.core.http.WebSocketBase delegate>;
v3 = new io.smallrye.mutiny.vertx.DelegatingHandler;
v4 = staticinvoke <io.vertx.mutiny.core.http.WebSocketBaseImpl$lambda___pongHandler_16__1886: java.util.function.Function bootstrap$()>();
specialinvoke v3.<io.smallrye.mutiny.vertx.DelegatingHandler: void <init>(io.vertx.core.Handler,java.util.function.Function)>(v1, v4);
interfaceinvoke v2.<io.vertx.core.http.WebSocketBase: io.vertx.core.http.WebSocketBase pongHandler(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.mutiny.core.http.WebSocketBase pongHandler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.http.WebSocketBase v3;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.mutiny.core.http.WebSocketBase __pongHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.smallrye.mutiny.Uni end()
{
java.util.function.Consumer v1;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 = staticinvoke <io.vertx.mutiny.core.http.WebSocketBaseImpl$lambda_end_17__1887: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.WebSocketBaseImpl)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public java.lang.Void endAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
java.lang.Object v3;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.smallrye.mutiny.Uni end()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public void endAndForget()
{
java.util.function.Consumer v3;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.smallrye.mutiny.Uni end()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return;
}
public io.smallrye.mutiny.Uni close()
{
java.util.function.Consumer v1;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 = staticinvoke <io.vertx.mutiny.core.http.WebSocketBaseImpl$lambda_close_18__1888: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.WebSocketBaseImpl)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public java.lang.Void closeAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
java.lang.Object v3;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.smallrye.mutiny.Uni close()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public void closeAndForget()
{
java.util.function.Consumer v3;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.smallrye.mutiny.Uni close()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return;
}
public io.smallrye.mutiny.Uni close(short)
{
java.util.function.Consumer v2;
short v1;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: short;
v2 = staticinvoke <io.vertx.mutiny.core.http.WebSocketBaseImpl$lambda_close_19__1889: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.WebSocketBaseImpl,short)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void closeAndAwait(short)
{
io.smallrye.mutiny.groups.UniAwait v3;
short v1;
java.lang.Object v4;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: short;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.smallrye.mutiny.Uni close(short)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void closeAndForget(short)
{
java.util.function.Consumer v4;
short v1;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: short;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.smallrye.mutiny.Uni close(short)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public io.smallrye.mutiny.Uni close(short, java.lang.String)
{
java.util.function.Consumer v3;
short v1;
java.lang.String v2;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: short;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <io.vertx.mutiny.core.http.WebSocketBaseImpl$lambda_close_20__1890: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.http.WebSocketBaseImpl,short,java.lang.String)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public java.lang.Void closeAndAwait(short, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v4;
short v1;
java.lang.Object v5;
java.lang.String v2;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: short;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.smallrye.mutiny.Uni close(short,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public void closeAndForget(short, java.lang.String)
{
java.util.function.Consumer v5;
short v1;
io.smallrye.mutiny.groups.UniSubscribe v4;
java.lang.String v2;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 := @parameter0: short;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.smallrye.mutiny.Uni close(short,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return;
}
public io.vertx.mutiny.core.net.SocketAddress remoteAddress()
{
io.vertx.core.http.WebSocketBase v3;
io.vertx.mutiny.core.net.SocketAddress v1, v2, v5;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.vertx.core.net.SocketAddress v4;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 = v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.mutiny.core.net.SocketAddress cached_0>;
if v1 == null goto label1;
v2 = v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.mutiny.core.net.SocketAddress cached_0>;
return v2;
label1:
v3 = v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.core.http.WebSocketBase delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.http.WebSocketBase: io.vertx.core.net.SocketAddress remoteAddress()>();
v5 = staticinvoke <io.vertx.mutiny.core.net.SocketAddress: io.vertx.mutiny.core.net.SocketAddress newInstance(io.vertx.core.net.SocketAddress)>(v4);
v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.mutiny.core.net.SocketAddress cached_0> = v5;
return v5;
}
public io.vertx.mutiny.core.net.SocketAddress localAddress()
{
io.vertx.core.http.WebSocketBase v3;
io.vertx.mutiny.core.net.SocketAddress v1, v2, v5;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
io.vertx.core.net.SocketAddress v4;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 = v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.mutiny.core.net.SocketAddress cached_1>;
if v1 == null goto label1;
v2 = v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.mutiny.core.net.SocketAddress cached_1>;
return v2;
label1:
v3 = v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.core.http.WebSocketBase delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.http.WebSocketBase: io.vertx.core.net.SocketAddress localAddress()>();
v5 = staticinvoke <io.vertx.mutiny.core.net.SocketAddress: io.vertx.mutiny.core.net.SocketAddress newInstance(io.vertx.core.net.SocketAddress)>(v4);
v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.mutiny.core.net.SocketAddress cached_1> = v5;
return v5;
}
public boolean isSsl()
{
io.vertx.core.http.WebSocketBase v1;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
boolean v2;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 = v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.core.http.WebSocketBase delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.WebSocketBase: boolean isSsl()>();
return v2;
}
public boolean isClosed()
{
io.vertx.core.http.WebSocketBase v1;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
boolean v2;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 = v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.core.http.WebSocketBase delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.WebSocketBase: boolean isClosed()>();
return v2;
}
public javax.net.ssl.SSLSession sslSession()
{
javax.net.ssl.SSLSession v2;
io.vertx.core.http.WebSocketBase v1;
io.vertx.mutiny.core.http.WebSocketBaseImpl v0;
v0 := @this: io.vertx.mutiny.core.http.WebSocketBaseImpl;
v1 = v0.<io.vertx.mutiny.core.http.WebSocketBaseImpl: io.vertx.core.http.WebSocketBase delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.http.WebSocketBase: javax.net.ssl.SSLSession sslSession()>();
return v2;
}
}