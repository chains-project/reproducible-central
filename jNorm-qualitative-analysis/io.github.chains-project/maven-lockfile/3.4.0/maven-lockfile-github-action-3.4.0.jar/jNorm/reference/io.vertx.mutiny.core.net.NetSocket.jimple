public class io.vertx.mutiny.core.net.NetSocket extends java.lang.Object implements io.vertx.mutiny.core.streams.ReadStream, io.vertx.mutiny.core.streams.WriteStream
{
public static final io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG;
private final io.vertx.core.net.NetSocket delegate;
static final io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_0;
private io.smallrye.mutiny.vertx.WriteStreamSubscriber subscriber;
private io.vertx.mutiny.core.net.SocketAddress cached_0;
private io.vertx.mutiny.core.net.SocketAddress cached_1;
private io.smallrye.mutiny.Multi multi;
public void <init>(io.vertx.core.net.NetSocket)
{
io.vertx.mutiny.core.net.NetSocket v0;
io.vertx.core.net.NetSocket v1;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: io.vertx.core.net.NetSocket;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.core.net.NetSocket delegate> = v1;
return;
}
public void <init>(java.lang.Object)
{
java.lang.Object v1;
io.vertx.mutiny.core.net.NetSocket v0;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: java.lang.Object;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.core.net.NetSocket delegate> = v1;
return;
}
void <init>()
{
io.vertx.mutiny.core.net.NetSocket v0;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.core.net.NetSocket delegate> = null;
return;
}
public io.vertx.core.net.NetSocket getDelegate()
{
io.vertx.mutiny.core.net.NetSocket v0;
io.vertx.core.net.NetSocket v1;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 = v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.core.net.NetSocket delegate>;
return v1;
}
public java.lang.String toString()
{
java.lang.String v2;
io.vertx.mutiny.core.net.NetSocket v0;
io.vertx.core.net.NetSocket v1;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 = v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.core.net.NetSocket delegate>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
return v2;
}
public boolean equals(java.lang.Object)
{
java.lang.Class v2, v3;
java.lang.Object v1;
io.vertx.mutiny.core.net.NetSocket v0;
boolean v6;
io.vertx.core.net.NetSocket v4, v5;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v1 == null goto label2;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
if v2 == v3 goto label3;
label2:
return 0;
label3:
v4 = v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.core.net.NetSocket delegate>;
v5 = v1.<io.vertx.mutiny.core.net.NetSocket: io.vertx.core.net.NetSocket delegate>;
v6 = virtualinvoke v4.<java.lang.Object: boolean equals(java.lang.Object)>(v5);
return v6;
}
public int hashCode()
{
int v2;
io.vertx.mutiny.core.net.NetSocket v0;
io.vertx.core.net.NetSocket v1;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 = v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.core.net.NetSocket delegate>;
v2 = virtualinvoke v1.<java.lang.Object: int hashCode()>();
return v2;
}
public synchronized io.smallrye.mutiny.vertx.WriteStreamSubscriber toSubscriber()
{
io.smallrye.mutiny.vertx.WriteStreamSubscriber v1, v4, v5;
java.util.function.Function v2;
io.vertx.mutiny.core.net.NetSocket v0;
io.vertx.core.net.NetSocket v3;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 = v0.<io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.vertx.WriteStreamSubscriber subscriber>;
if v1 != null goto label1;
v2 = staticinvoke <io.vertx.mutiny.core.net.NetSocket$getDelegate__2012: java.util.function.Function bootstrap$()>();
v3 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.core.net.NetSocket getDelegate()>();
v4 = staticinvoke <io.smallrye.mutiny.vertx.MutinyHelper: io.smallrye.mutiny.vertx.WriteStreamSubscriber toSubscriber(io.vertx.core.streams.WriteStream,java.util.function.Function)>(v3, v2);
v0.<io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.vertx.WriteStreamSubscriber subscriber> = v4;
label1:
v5 = v0.<io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.vertx.WriteStreamSubscriber subscriber>;
return v5;
}
public io.smallrye.mutiny.Uni end(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = staticinvoke <io.vertx.mutiny.core.net.NetSocket$lambda_end_3__2013: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.net.NetSocket,io.vertx.mutiny.core.buffer.Buffer)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void endAndAwait(io.vertx.mutiny.core.buffer.Buffer)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.buffer.Buffer v1;
java.lang.Object v4;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.Uni end(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void endAndForget(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.buffer.Buffer v1;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.Uni end(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public boolean writeQueueFull()
{
io.vertx.mutiny.core.net.NetSocket v0;
boolean v2;
io.vertx.core.net.NetSocket v1;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 = v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.core.net.NetSocket delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.net.NetSocket: boolean writeQueueFull()>();
return v2;
}
public io.vertx.mutiny.core.streams.Pipe pipe()
{
io.vertx.mutiny.core.streams.Pipe v4;
io.vertx.core.streams.Pipe v2;
io.smallrye.mutiny.vertx.TypeArg v3;
io.vertx.mutiny.core.net.NetSocket v0;
io.vertx.core.net.NetSocket v1;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 = v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.core.net.NetSocket delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.net.NetSocket: io.vertx.core.streams.Pipe pipe()>();
v3 = <io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_0>;
v4 = staticinvoke <io.vertx.mutiny.core.streams.Pipe: io.vertx.mutiny.core.streams.Pipe newInstance(io.vertx.core.streams.Pipe,io.smallrye.mutiny.vertx.TypeArg)>(v2, v3);
return v4;
}
public io.smallrye.mutiny.Uni pipeTo(io.vertx.mutiny.core.streams.WriteStream)
{
io.vertx.mutiny.core.streams.WriteStream v1;
java.util.function.Consumer v2;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: io.vertx.mutiny.core.streams.WriteStream;
v2 = staticinvoke <io.vertx.mutiny.core.net.NetSocket$lambda_pipeTo_4__2014: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.net.NetSocket,io.vertx.mutiny.core.streams.WriteStream)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void pipeToAndAwait(io.vertx.mutiny.core.streams.WriteStream)
{
io.vertx.mutiny.core.streams.WriteStream v1;
io.smallrye.mutiny.groups.UniAwait v3;
java.lang.Object v4;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: io.vertx.mutiny.core.streams.WriteStream;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.Uni pipeTo(io.vertx.mutiny.core.streams.WriteStream)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void pipeToAndForget(io.vertx.mutiny.core.streams.WriteStream)
{
io.vertx.mutiny.core.streams.WriteStream v1;
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: io.vertx.mutiny.core.streams.WriteStream;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.Uni pipeTo(io.vertx.mutiny.core.streams.WriteStream)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
private io.vertx.mutiny.core.net.NetSocket __exceptionHandler(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.mutiny.core.net.NetSocket v0;
io.vertx.core.net.NetSocket v2;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.core.net.NetSocket delegate>;
interfaceinvoke v2.<io.vertx.core.net.NetSocket: io.vertx.core.net.NetSocket exceptionHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.net.NetSocket exceptionHandler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.net.NetSocket v0, v3;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.mutiny.core.net.NetSocket __exceptionHandler(io.vertx.core.Handler)>(v2);
return v3;
}
private io.vertx.mutiny.core.net.NetSocket __handler(io.vertx.core.Handler)
{
io.smallrye.mutiny.vertx.DelegatingHandler v3;
io.vertx.core.Handler v1;
java.util.function.Function v4;
io.vertx.mutiny.core.net.NetSocket v0;
io.vertx.core.net.NetSocket v2;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.core.net.NetSocket delegate>;
v3 = new io.smallrye.mutiny.vertx.DelegatingHandler;
v4 = staticinvoke <io.vertx.mutiny.core.net.NetSocket$lambda___handler_5__2015: java.util.function.Function bootstrap$()>();
specialinvoke v3.<io.smallrye.mutiny.vertx.DelegatingHandler: void <init>(io.vertx.core.Handler,java.util.function.Function)>(v1, v4);
interfaceinvoke v2.<io.vertx.core.net.NetSocket: io.vertx.core.net.NetSocket handler(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.mutiny.core.net.NetSocket handler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.net.NetSocket v0, v3;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.mutiny.core.net.NetSocket __handler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.vertx.mutiny.core.net.NetSocket pause()
{
io.vertx.mutiny.core.net.NetSocket v0;
io.vertx.core.net.NetSocket v1;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 = v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.core.net.NetSocket delegate>;
interfaceinvoke v1.<io.vertx.core.net.NetSocket: io.vertx.core.net.NetSocket pause()>();
return v0;
}
public io.vertx.mutiny.core.net.NetSocket resume()
{
io.vertx.mutiny.core.net.NetSocket v0;
io.vertx.core.net.NetSocket v1;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 = v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.core.net.NetSocket delegate>;
interfaceinvoke v1.<io.vertx.core.net.NetSocket: io.vertx.core.net.NetSocket resume()>();
return v0;
}
public io.vertx.mutiny.core.net.NetSocket fetch(long)
{
long v1;
io.vertx.mutiny.core.net.NetSocket v0;
io.vertx.core.net.NetSocket v2;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: long;
v2 = v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.core.net.NetSocket delegate>;
interfaceinvoke v2.<io.vertx.core.net.NetSocket: io.vertx.core.net.NetSocket fetch(long)>(v1);
return v0;
}
private io.vertx.mutiny.core.net.NetSocket __endHandler(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.mutiny.core.net.NetSocket v0;
io.vertx.core.net.NetSocket v2;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.core.net.NetSocket delegate>;
interfaceinvoke v2.<io.vertx.core.net.NetSocket: io.vertx.core.net.NetSocket endHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.net.NetSocket endHandler(java.lang.Runnable)
{
io.vertx.core.Handler v2;
java.lang.Runnable v1;
io.vertx.mutiny.core.net.NetSocket v0, v3;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: java.lang.Runnable;
v2 = staticinvoke <io.vertx.mutiny.core.net.NetSocket$lambda_endHandler_6__2016: io.vertx.core.Handler bootstrap$(java.lang.Runnable)>(v1);
v3 = specialinvoke v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.mutiny.core.net.NetSocket __endHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.vertx.mutiny.core.net.NetSocket setWriteQueueMaxSize(int)
{
int v1;
io.vertx.mutiny.core.net.NetSocket v0;
io.vertx.core.net.NetSocket v2;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: int;
v2 = v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.core.net.NetSocket delegate>;
interfaceinvoke v2.<io.vertx.core.net.NetSocket: io.vertx.core.net.NetSocket setWriteQueueMaxSize(int)>(v1);
return v0;
}
private io.vertx.mutiny.core.net.NetSocket __drainHandler(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.mutiny.core.net.NetSocket v0;
io.vertx.core.net.NetSocket v2;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.core.net.NetSocket delegate>;
interfaceinvoke v2.<io.vertx.core.net.NetSocket: io.vertx.core.net.NetSocket drainHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.net.NetSocket drainHandler(java.lang.Runnable)
{
io.vertx.core.Handler v2;
java.lang.Runnable v1;
io.vertx.mutiny.core.net.NetSocket v0, v3;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: java.lang.Runnable;
v2 = staticinvoke <io.vertx.mutiny.core.net.NetSocket$lambda_drainHandler_7__2017: io.vertx.core.Handler bootstrap$(java.lang.Runnable)>(v1);
v3 = specialinvoke v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.mutiny.core.net.NetSocket __drainHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public java.lang.String writeHandlerID()
{
java.lang.String v2;
io.vertx.mutiny.core.net.NetSocket v0;
io.vertx.core.net.NetSocket v1;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 = v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.core.net.NetSocket delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.net.NetSocket: java.lang.String writeHandlerID()>();
return v2;
}
public io.smallrye.mutiny.Uni write(java.lang.String)
{
java.util.function.Consumer v2;
java.lang.String v1;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.net.NetSocket$lambda_write_8__2018: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.net.NetSocket,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void writeAndAwait(java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v3;
java.lang.Object v4;
java.lang.String v1;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.Uni write(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void writeAndForget(java.lang.String)
{
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.Uni write(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public io.smallrye.mutiny.Uni write(java.lang.String, java.lang.String)
{
java.util.function.Consumer v3;
java.lang.String v1, v2;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = staticinvoke <io.vertx.mutiny.core.net.NetSocket$lambda_write_9__2019: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.net.NetSocket,java.lang.String,java.lang.String)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public java.lang.Void writeAndAwait(java.lang.String, java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v4;
java.lang.Object v5;
java.lang.String v1, v2;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.Uni write(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public void writeAndForget(java.lang.String, java.lang.String)
{
java.util.function.Consumer v5;
io.smallrye.mutiny.groups.UniSubscribe v4;
java.lang.String v1, v2;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.Uni write(java.lang.String,java.lang.String)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return;
}
public io.smallrye.mutiny.Uni write(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.buffer.Buffer v1;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = staticinvoke <io.vertx.mutiny.core.net.NetSocket$lambda_write_10__2020: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.net.NetSocket,io.vertx.mutiny.core.buffer.Buffer)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void writeAndAwait(io.vertx.mutiny.core.buffer.Buffer)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.buffer.Buffer v1;
java.lang.Object v4;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.Uni write(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void writeAndForget(io.vertx.mutiny.core.buffer.Buffer)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.buffer.Buffer v1;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: io.vertx.mutiny.core.buffer.Buffer;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.Uni write(io.vertx.mutiny.core.buffer.Buffer)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public io.smallrye.mutiny.Uni sendFile(java.lang.String)
{
java.util.function.Consumer v2;
java.lang.String v1;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.net.NetSocket$lambda_sendFile_11__2021: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.net.NetSocket,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void sendFileAndAwait(java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v3;
java.lang.Object v4;
java.lang.String v1;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.Uni sendFile(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.net.NetSocket sendFileAndForget(java.lang.String)
{
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.Uni sendFile(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public io.smallrye.mutiny.Uni sendFile(java.lang.String, long)
{
java.util.function.Consumer v3;
long v2;
java.lang.String v1;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
v3 = staticinvoke <io.vertx.mutiny.core.net.NetSocket$lambda_sendFile_12__2022: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.net.NetSocket,java.lang.String,long)>(v0, v1, v2);
v4 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v3);
return v4;
}
public java.lang.Void sendFileAndAwait(java.lang.String, long)
{
io.smallrye.mutiny.groups.UniAwait v4;
java.lang.Object v5;
long v2;
java.lang.String v1;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.Uni sendFile(java.lang.String,long)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v5 = virtualinvoke v4.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v5;
}
public io.vertx.mutiny.core.net.NetSocket sendFileAndForget(java.lang.String, long)
{
java.util.function.Consumer v5;
io.smallrye.mutiny.groups.UniSubscribe v4;
long v2;
java.lang.String v1;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
v3 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.Uni sendFile(java.lang.String,long)>(v1, v2);
v4 = interfaceinvoke v3.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v5 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v4.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v5);
return v0;
}
public io.smallrye.mutiny.Uni sendFile(java.lang.String, long, long)
{
java.util.function.Consumer v4;
long v2, v3;
java.lang.String v1;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v5;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 = staticinvoke <io.vertx.mutiny.core.net.NetSocket$lambda_sendFile_13__2023: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.net.NetSocket,java.lang.String,long,long)>(v0, v1, v2, v3);
v5 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v4);
return v5;
}
public java.lang.Void sendFileAndAwait(java.lang.String, long, long)
{
io.smallrye.mutiny.groups.UniAwait v5;
java.lang.Object v6;
long v2, v3;
java.lang.String v1;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.Uni sendFile(java.lang.String,long,long)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v6 = virtualinvoke v5.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v6;
}
public io.vertx.mutiny.core.net.NetSocket sendFileAndForget(java.lang.String, long, long)
{
java.util.function.Consumer v6;
io.smallrye.mutiny.groups.UniSubscribe v5;
long v2, v3;
java.lang.String v1;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v4;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: long;
v3 := @parameter2: long;
v4 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.Uni sendFile(java.lang.String,long,long)>(v1, v2, v3);
v5 = interfaceinvoke v4.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v6 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v5.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v6);
return v0;
}
public io.vertx.mutiny.core.net.SocketAddress remoteAddress()
{
io.vertx.mutiny.core.net.SocketAddress v1, v2, v5;
io.vertx.mutiny.core.net.NetSocket v0;
io.vertx.core.net.NetSocket v3;
io.vertx.core.net.SocketAddress v4;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 = v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.mutiny.core.net.SocketAddress cached_0>;
if v1 == null goto label1;
v2 = v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.mutiny.core.net.SocketAddress cached_0>;
return v2;
label1:
v3 = v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.core.net.NetSocket delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.net.NetSocket: io.vertx.core.net.SocketAddress remoteAddress()>();
v5 = staticinvoke <io.vertx.mutiny.core.net.SocketAddress: io.vertx.mutiny.core.net.SocketAddress newInstance(io.vertx.core.net.SocketAddress)>(v4);
v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.mutiny.core.net.SocketAddress cached_0> = v5;
return v5;
}
public io.vertx.mutiny.core.net.SocketAddress remoteAddress(boolean)
{
io.vertx.mutiny.core.net.SocketAddress v4;
io.vertx.mutiny.core.net.NetSocket v0;
boolean v1;
io.vertx.core.net.NetSocket v2;
io.vertx.core.net.SocketAddress v3;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: boolean;
v2 = v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.core.net.NetSocket delegate>;
v3 = interfaceinvoke v2.<io.vertx.core.net.NetSocket: io.vertx.core.net.SocketAddress remoteAddress(boolean)>(v1);
v4 = staticinvoke <io.vertx.mutiny.core.net.SocketAddress: io.vertx.mutiny.core.net.SocketAddress newInstance(io.vertx.core.net.SocketAddress)>(v3);
return v4;
}
public io.vertx.mutiny.core.net.SocketAddress localAddress()
{
io.vertx.mutiny.core.net.SocketAddress v1, v2, v5;
io.vertx.mutiny.core.net.NetSocket v0;
io.vertx.core.net.NetSocket v3;
io.vertx.core.net.SocketAddress v4;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 = v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.mutiny.core.net.SocketAddress cached_1>;
if v1 == null goto label1;
v2 = v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.mutiny.core.net.SocketAddress cached_1>;
return v2;
label1:
v3 = v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.core.net.NetSocket delegate>;
v4 = interfaceinvoke v3.<io.vertx.core.net.NetSocket: io.vertx.core.net.SocketAddress localAddress()>();
v5 = staticinvoke <io.vertx.mutiny.core.net.SocketAddress: io.vertx.mutiny.core.net.SocketAddress newInstance(io.vertx.core.net.SocketAddress)>(v4);
v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.mutiny.core.net.SocketAddress cached_1> = v5;
return v5;
}
public io.vertx.mutiny.core.net.SocketAddress localAddress(boolean)
{
io.vertx.mutiny.core.net.SocketAddress v4;
io.vertx.mutiny.core.net.NetSocket v0;
boolean v1;
io.vertx.core.net.NetSocket v2;
io.vertx.core.net.SocketAddress v3;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: boolean;
v2 = v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.core.net.NetSocket delegate>;
v3 = interfaceinvoke v2.<io.vertx.core.net.NetSocket: io.vertx.core.net.SocketAddress localAddress(boolean)>(v1);
v4 = staticinvoke <io.vertx.mutiny.core.net.SocketAddress: io.vertx.mutiny.core.net.SocketAddress newInstance(io.vertx.core.net.SocketAddress)>(v3);
return v4;
}
public io.smallrye.mutiny.Uni end()
{
java.util.function.Consumer v1;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 = staticinvoke <io.vertx.mutiny.core.net.NetSocket$lambda_end_14__2024: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.net.NetSocket)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public java.lang.Void endAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
java.lang.Object v3;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.Uni end()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public void endAndForget()
{
java.util.function.Consumer v3;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.Uni end()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return;
}
public io.smallrye.mutiny.Uni close()
{
java.util.function.Consumer v1;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 = staticinvoke <io.vertx.mutiny.core.net.NetSocket$lambda_close_15__2025: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.net.NetSocket)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public java.lang.Void closeAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
java.lang.Object v3;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.Uni close()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public void closeAndForget()
{
java.util.function.Consumer v3;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.Uni close()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return;
}
private io.vertx.mutiny.core.net.NetSocket __closeHandler(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.mutiny.core.net.NetSocket v0;
io.vertx.core.net.NetSocket v2;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.core.net.NetSocket delegate>;
interfaceinvoke v2.<io.vertx.core.net.NetSocket: io.vertx.core.net.NetSocket closeHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.net.NetSocket closeHandler(java.lang.Runnable)
{
io.vertx.core.Handler v2;
java.lang.Runnable v1;
io.vertx.mutiny.core.net.NetSocket v0, v3;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: java.lang.Runnable;
v2 = staticinvoke <io.vertx.mutiny.core.net.NetSocket$lambda_closeHandler_16__2026: io.vertx.core.Handler bootstrap$(java.lang.Runnable)>(v1);
v3 = specialinvoke v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.mutiny.core.net.NetSocket __closeHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.smallrye.mutiny.Uni upgradeToSsl()
{
java.util.function.Consumer v1;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 = staticinvoke <io.vertx.mutiny.core.net.NetSocket$lambda_upgradeToSsl_17__2027: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.net.NetSocket)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public java.lang.Void upgradeToSslAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
java.lang.Object v3;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.Uni upgradeToSsl()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public io.vertx.mutiny.core.net.NetSocket upgradeToSslAndForget()
{
java.util.function.Consumer v3;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.Uni upgradeToSsl()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return v0;
}
public io.smallrye.mutiny.Uni upgradeToSsl(java.lang.String)
{
java.util.function.Consumer v2;
java.lang.String v1;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: java.lang.String;
v2 = staticinvoke <io.vertx.mutiny.core.net.NetSocket$lambda_upgradeToSsl_18__2028: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.net.NetSocket,java.lang.String)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void upgradeToSslAndAwait(java.lang.String)
{
io.smallrye.mutiny.groups.UniAwait v3;
java.lang.Object v4;
java.lang.String v1;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.Uni upgradeToSsl(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public io.vertx.mutiny.core.net.NetSocket upgradeToSslAndForget(java.lang.String)
{
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.String v1;
io.vertx.mutiny.core.net.NetSocket v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 := @parameter0: java.lang.String;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.Uni upgradeToSsl(java.lang.String)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return v0;
}
public boolean isSsl()
{
io.vertx.mutiny.core.net.NetSocket v0;
boolean v2;
io.vertx.core.net.NetSocket v1;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 = v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.core.net.NetSocket delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.net.NetSocket: boolean isSsl()>();
return v2;
}
public java.lang.String indicatedServerName()
{
java.lang.String v2;
io.vertx.mutiny.core.net.NetSocket v0;
io.vertx.core.net.NetSocket v1;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 = v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.core.net.NetSocket delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.net.NetSocket: java.lang.String indicatedServerName()>();
return v2;
}
public java.lang.String applicationLayerProtocol()
{
java.lang.String v2;
io.vertx.mutiny.core.net.NetSocket v0;
io.vertx.core.net.NetSocket v1;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 = v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.core.net.NetSocket delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.net.NetSocket: java.lang.String applicationLayerProtocol()>();
return v2;
}
public javax.net.ssl.SSLSession sslSession()
{
javax.net.ssl.SSLSession v2;
io.vertx.mutiny.core.net.NetSocket v0;
io.vertx.core.net.NetSocket v1;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 = v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.core.net.NetSocket delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.net.NetSocket: javax.net.ssl.SSLSession sslSession()>();
return v2;
}
public synchronized io.smallrye.mutiny.Multi toMulti()
{
java.util.function.Function v2;
io.smallrye.mutiny.Multi v1, v4, v5;
io.vertx.mutiny.core.net.NetSocket v0;
io.vertx.core.net.NetSocket v3;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 = v0.<io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.Multi multi>;
if v1 != null goto label1;
v2 = staticinvoke <io.vertx.mutiny.core.net.NetSocket$newInstance__2029: java.util.function.Function bootstrap$()>();
v3 = v0.<io.vertx.mutiny.core.net.NetSocket: io.vertx.core.net.NetSocket delegate>;
v4 = staticinvoke <io.smallrye.mutiny.vertx.MultiHelper: io.smallrye.mutiny.Multi toMulti(io.vertx.core.streams.ReadStream,java.util.function.Function)>(v3, v2);
v0.<io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.Multi multi> = v4;
label1:
v5 = v0.<io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.Multi multi>;
return v5;
}
public java.lang.Iterable toBlockingIterable()
{
io.smallrye.mutiny.groups.MultiSubscribe v2;
io.smallrye.mutiny.helpers.BlockingIterable v3;
io.smallrye.mutiny.Multi v1;
io.vertx.mutiny.core.net.NetSocket v0;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.Multi toMulti()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiSubscribe subscribe()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.MultiSubscribe: io.smallrye.mutiny.helpers.BlockingIterable asIterable()>();
return v3;
}
public java.util.stream.Stream toBlockingStream()
{
io.smallrye.mutiny.groups.MultiSubscribe v2;
java.util.stream.Stream v3;
io.smallrye.mutiny.Multi v1;
io.vertx.mutiny.core.net.NetSocket v0;
v0 := @this: io.vertx.mutiny.core.net.NetSocket;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.Multi toMulti()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiSubscribe subscribe()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.MultiSubscribe: java.util.stream.Stream asStream()>();
return v3;
}
public static io.vertx.mutiny.core.net.NetSocket newInstance(io.vertx.core.net.NetSocket)
{
io.vertx.mutiny.core.net.NetSocket v1;
io.vertx.core.net.NetSocket v0;
v0 := @parameter0: io.vertx.core.net.NetSocket;
if v0 == null goto label1;
v1 = new io.vertx.mutiny.core.net.NetSocket;
specialinvoke v1.<io.vertx.mutiny.core.net.NetSocket: void <init>(io.vertx.core.net.NetSocket)>(v0);
goto label2;
label1:
v1 = null;
label2:
return v1;
}
static void <clinit>()
{
io.smallrye.mutiny.vertx.TypeArg v0, v3;
java.util.function.Function v1, v2, v4, v5;
v0 = new io.smallrye.mutiny.vertx.TypeArg;
v1 = staticinvoke <io.vertx.mutiny.core.net.NetSocket$lambda_static_0__2030: java.util.function.Function bootstrap$()>();
v2 = staticinvoke <io.vertx.mutiny.core.net.NetSocket$getDelegate__2031: java.util.function.Function bootstrap$()>();
specialinvoke v0.<io.smallrye.mutiny.vertx.TypeArg: void <init>(java.util.function.Function,java.util.function.Function)>(v1, v2);
<io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.vertx.TypeArg __TYPE_ARG> = v0;
v3 = new io.smallrye.mutiny.vertx.TypeArg;
v4 = staticinvoke <io.vertx.mutiny.core.net.NetSocket$lambda_static_1__2032: java.util.function.Function bootstrap$()>();
v5 = staticinvoke <io.vertx.mutiny.core.net.NetSocket$lambda_static_2__2033: java.util.function.Function bootstrap$()>();
specialinvoke v3.<io.smallrye.mutiny.vertx.TypeArg: void <init>(java.util.function.Function,java.util.function.Function)>(v4, v5);
<io.vertx.mutiny.core.net.NetSocket: io.smallrye.mutiny.vertx.TypeArg TYPE_ARG_0> = v3;
return;
}
}