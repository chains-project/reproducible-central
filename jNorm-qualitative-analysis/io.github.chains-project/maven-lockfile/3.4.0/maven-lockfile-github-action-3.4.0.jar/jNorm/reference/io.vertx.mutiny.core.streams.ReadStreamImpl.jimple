class io.vertx.mutiny.core.streams.ReadStreamImpl extends java.lang.Object implements io.vertx.mutiny.core.streams.ReadStream
{
private final io.vertx.core.streams.ReadStream delegate;
public final io.smallrye.mutiny.vertx.TypeArg __typeArg_0;
private io.smallrye.mutiny.Multi multi;
public io.vertx.core.streams.ReadStream getDelegate()
{
io.vertx.core.streams.ReadStream v1;
io.vertx.mutiny.core.streams.ReadStreamImpl v0;
v0 := @this: io.vertx.mutiny.core.streams.ReadStreamImpl;
v1 = v0.<io.vertx.mutiny.core.streams.ReadStreamImpl: io.vertx.core.streams.ReadStream delegate>;
return v1;
}
void <init>()
{
io.vertx.mutiny.core.streams.ReadStreamImpl v0;
io.smallrye.mutiny.vertx.TypeArg v1;
v0 := @this: io.vertx.mutiny.core.streams.ReadStreamImpl;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.streams.ReadStreamImpl: io.vertx.core.streams.ReadStream delegate> = null;
v1 = staticinvoke <io.smallrye.mutiny.vertx.TypeArg: io.smallrye.mutiny.vertx.TypeArg 'unknown'()>();
v0.<io.vertx.mutiny.core.streams.ReadStreamImpl: io.smallrye.mutiny.vertx.TypeArg __typeArg_0> = v1;
return;
}
public void <init>(io.vertx.core.streams.ReadStream)
{
io.vertx.core.streams.ReadStream v1;
io.vertx.mutiny.core.streams.ReadStreamImpl v0;
io.smallrye.mutiny.vertx.TypeArg v2;
v0 := @this: io.vertx.mutiny.core.streams.ReadStreamImpl;
v1 := @parameter0: io.vertx.core.streams.ReadStream;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.streams.ReadStreamImpl: io.vertx.core.streams.ReadStream delegate> = v1;
v2 = staticinvoke <io.smallrye.mutiny.vertx.TypeArg: io.smallrye.mutiny.vertx.TypeArg 'unknown'()>();
v0.<io.vertx.mutiny.core.streams.ReadStreamImpl: io.smallrye.mutiny.vertx.TypeArg __typeArg_0> = v2;
return;
}
public void <init>(io.vertx.core.streams.ReadStream, io.smallrye.mutiny.vertx.TypeArg)
{
io.vertx.core.streams.ReadStream v1;
io.vertx.mutiny.core.streams.ReadStreamImpl v0;
io.smallrye.mutiny.vertx.TypeArg v2;
v0 := @this: io.vertx.mutiny.core.streams.ReadStreamImpl;
v1 := @parameter0: io.vertx.core.streams.ReadStream;
v2 := @parameter1: io.smallrye.mutiny.vertx.TypeArg;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.streams.ReadStreamImpl: io.vertx.core.streams.ReadStream delegate> = v1;
v0.<io.vertx.mutiny.core.streams.ReadStreamImpl: io.smallrye.mutiny.vertx.TypeArg __typeArg_0> = v2;
return;
}
public synchronized io.smallrye.mutiny.Multi toMulti()
{
io.smallrye.mutiny.vertx.TypeArg v2;
io.vertx.core.streams.ReadStream v4;
io.vertx.mutiny.core.streams.ReadStreamImpl v0;
java.util.function.Function v3;
io.smallrye.mutiny.Multi v1, v5, v6;
v0 := @this: io.vertx.mutiny.core.streams.ReadStreamImpl;
v1 = v0.<io.vertx.mutiny.core.streams.ReadStreamImpl: io.smallrye.mutiny.Multi multi>;
if v1 != null goto label1;
v2 = v0.<io.vertx.mutiny.core.streams.ReadStreamImpl: io.smallrye.mutiny.vertx.TypeArg __typeArg_0>;
v3 = v2.<io.smallrye.mutiny.vertx.TypeArg: java.util.function.Function wrap>;
v4 = v0.<io.vertx.mutiny.core.streams.ReadStreamImpl: io.vertx.core.streams.ReadStream delegate>;
v5 = staticinvoke <io.smallrye.mutiny.vertx.MultiHelper: io.smallrye.mutiny.Multi toMulti(io.vertx.core.streams.ReadStream,java.util.function.Function)>(v4, v3);
v0.<io.vertx.mutiny.core.streams.ReadStreamImpl: io.smallrye.mutiny.Multi multi> = v5;
label1:
v6 = v0.<io.vertx.mutiny.core.streams.ReadStreamImpl: io.smallrye.mutiny.Multi multi>;
return v6;
}
public java.lang.Iterable toBlockingIterable()
{
io.smallrye.mutiny.groups.MultiSubscribe v2;
io.smallrye.mutiny.helpers.BlockingIterable v3;
io.vertx.mutiny.core.streams.ReadStreamImpl v0;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.vertx.mutiny.core.streams.ReadStreamImpl;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.streams.ReadStreamImpl: io.smallrye.mutiny.Multi toMulti()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiSubscribe subscribe()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.MultiSubscribe: io.smallrye.mutiny.helpers.BlockingIterable asIterable()>();
return v3;
}
public java.util.stream.Stream toBlockingStream()
{
io.smallrye.mutiny.groups.MultiSubscribe v2;
java.util.stream.Stream v3;
io.vertx.mutiny.core.streams.ReadStreamImpl v0;
io.smallrye.mutiny.Multi v1;
v0 := @this: io.vertx.mutiny.core.streams.ReadStreamImpl;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.streams.ReadStreamImpl: io.smallrye.mutiny.Multi toMulti()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Multi: io.smallrye.mutiny.groups.MultiSubscribe subscribe()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.MultiSubscribe: java.util.stream.Stream asStream()>();
return v3;
}
private io.vertx.mutiny.core.streams.ReadStream __exceptionHandler(io.vertx.core.Handler)
{
io.vertx.core.streams.ReadStream v2;
io.vertx.mutiny.core.streams.ReadStreamImpl v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.mutiny.core.streams.ReadStreamImpl;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.streams.ReadStreamImpl: io.vertx.core.streams.ReadStream delegate>;
interfaceinvoke v2.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream exceptionHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.streams.ReadStream exceptionHandler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.streams.ReadStream v3;
io.vertx.mutiny.core.streams.ReadStreamImpl v0;
v0 := @this: io.vertx.mutiny.core.streams.ReadStreamImpl;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.streams.ReadStreamImpl: io.vertx.mutiny.core.streams.ReadStream __exceptionHandler(io.vertx.core.Handler)>(v2);
return v3;
}
private io.vertx.mutiny.core.streams.ReadStream __handler(io.vertx.core.Handler)
{
io.smallrye.mutiny.vertx.DelegatingHandler v3;
io.vertx.core.streams.ReadStream v2;
io.vertx.mutiny.core.streams.ReadStreamImpl v0;
io.vertx.core.Handler v1;
java.util.function.Function v4;
v0 := @this: io.vertx.mutiny.core.streams.ReadStreamImpl;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.streams.ReadStreamImpl: io.vertx.core.streams.ReadStream delegate>;
v3 = new io.smallrye.mutiny.vertx.DelegatingHandler;
v4 = staticinvoke <io.vertx.mutiny.core.streams.ReadStreamImpl$lambda___handler_0__2306: java.util.function.Function bootstrap$(io.vertx.mutiny.core.streams.ReadStreamImpl)>(v0);
specialinvoke v3.<io.smallrye.mutiny.vertx.DelegatingHandler: void <init>(io.vertx.core.Handler,java.util.function.Function)>(v1, v4);
interfaceinvoke v2.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream handler(io.vertx.core.Handler)>(v3);
return v0;
}
public io.vertx.mutiny.core.streams.ReadStream handler(java.util.function.Consumer)
{
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.streams.ReadStream v3;
io.vertx.mutiny.core.streams.ReadStreamImpl v0;
v0 := @this: io.vertx.mutiny.core.streams.ReadStreamImpl;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.streams.ReadStreamImpl: io.vertx.mutiny.core.streams.ReadStream __handler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.vertx.mutiny.core.streams.ReadStream pause()
{
io.vertx.core.streams.ReadStream v1;
io.vertx.mutiny.core.streams.ReadStreamImpl v0;
v0 := @this: io.vertx.mutiny.core.streams.ReadStreamImpl;
v1 = v0.<io.vertx.mutiny.core.streams.ReadStreamImpl: io.vertx.core.streams.ReadStream delegate>;
interfaceinvoke v1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream pause()>();
return v0;
}
public io.vertx.mutiny.core.streams.ReadStream resume()
{
io.vertx.core.streams.ReadStream v1;
io.vertx.mutiny.core.streams.ReadStreamImpl v0;
v0 := @this: io.vertx.mutiny.core.streams.ReadStreamImpl;
v1 = v0.<io.vertx.mutiny.core.streams.ReadStreamImpl: io.vertx.core.streams.ReadStream delegate>;
interfaceinvoke v1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream resume()>();
return v0;
}
public io.vertx.mutiny.core.streams.ReadStream fetch(long)
{
io.vertx.core.streams.ReadStream v2;
io.vertx.mutiny.core.streams.ReadStreamImpl v0;
long v1;
v0 := @this: io.vertx.mutiny.core.streams.ReadStreamImpl;
v1 := @parameter0: long;
v2 = v0.<io.vertx.mutiny.core.streams.ReadStreamImpl: io.vertx.core.streams.ReadStream delegate>;
interfaceinvoke v2.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream fetch(long)>(v1);
return v0;
}
private io.vertx.mutiny.core.streams.ReadStream __endHandler(io.vertx.core.Handler)
{
io.vertx.core.streams.ReadStream v2;
io.vertx.mutiny.core.streams.ReadStreamImpl v0;
io.vertx.core.Handler v1;
v0 := @this: io.vertx.mutiny.core.streams.ReadStreamImpl;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.streams.ReadStreamImpl: io.vertx.core.streams.ReadStream delegate>;
interfaceinvoke v2.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.ReadStream endHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.streams.ReadStream endHandler(java.lang.Runnable)
{
io.vertx.mutiny.core.streams.ReadStream v3;
io.vertx.mutiny.core.streams.ReadStreamImpl v0;
io.vertx.core.Handler v2;
java.lang.Runnable v1;
v0 := @this: io.vertx.mutiny.core.streams.ReadStreamImpl;
v1 := @parameter0: java.lang.Runnable;
v2 = staticinvoke <io.vertx.mutiny.core.streams.ReadStreamImpl$lambda_endHandler_1__2307: io.vertx.core.Handler bootstrap$(java.lang.Runnable)>(v1);
v3 = specialinvoke v0.<io.vertx.mutiny.core.streams.ReadStreamImpl: io.vertx.mutiny.core.streams.ReadStream __endHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.vertx.mutiny.core.streams.Pipe pipe()
{
io.vertx.mutiny.core.streams.Pipe v4;
io.vertx.core.streams.Pipe v2;
io.smallrye.mutiny.vertx.TypeArg v3;
io.vertx.core.streams.ReadStream v1;
io.vertx.mutiny.core.streams.ReadStreamImpl v0;
v0 := @this: io.vertx.mutiny.core.streams.ReadStreamImpl;
v1 = v0.<io.vertx.mutiny.core.streams.ReadStreamImpl: io.vertx.core.streams.ReadStream delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.streams.ReadStream: io.vertx.core.streams.Pipe pipe()>();
v3 = v0.<io.vertx.mutiny.core.streams.ReadStreamImpl: io.smallrye.mutiny.vertx.TypeArg __typeArg_0>;
v4 = staticinvoke <io.vertx.mutiny.core.streams.Pipe: io.vertx.mutiny.core.streams.Pipe newInstance(io.vertx.core.streams.Pipe,io.smallrye.mutiny.vertx.TypeArg)>(v2, v3);
return v4;
}
public io.smallrye.mutiny.Uni pipeTo(io.vertx.mutiny.core.streams.WriteStream)
{
io.vertx.mutiny.core.streams.WriteStream v1;
java.util.function.Consumer v2;
io.vertx.mutiny.core.streams.ReadStreamImpl v0;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.streams.ReadStreamImpl;
v1 := @parameter0: io.vertx.mutiny.core.streams.WriteStream;
v2 = staticinvoke <io.vertx.mutiny.core.streams.ReadStreamImpl$lambda_pipeTo_2__2308: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.streams.ReadStreamImpl,io.vertx.mutiny.core.streams.WriteStream)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void pipeToAndAwait(io.vertx.mutiny.core.streams.WriteStream)
{
io.vertx.mutiny.core.streams.WriteStream v1;
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.streams.ReadStreamImpl v0;
java.lang.Object v4;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.streams.ReadStreamImpl;
v1 := @parameter0: io.vertx.mutiny.core.streams.WriteStream;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.streams.ReadStreamImpl: io.smallrye.mutiny.Uni pipeTo(io.vertx.mutiny.core.streams.WriteStream)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void pipeToAndForget(io.vertx.mutiny.core.streams.WriteStream)
{
io.vertx.mutiny.core.streams.WriteStream v1;
java.util.function.Consumer v4;
io.smallrye.mutiny.groups.UniSubscribe v3;
io.vertx.mutiny.core.streams.ReadStreamImpl v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.streams.ReadStreamImpl;
v1 := @parameter0: io.vertx.mutiny.core.streams.WriteStream;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.streams.ReadStreamImpl: io.smallrye.mutiny.Uni pipeTo(io.vertx.mutiny.core.streams.WriteStream)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
}