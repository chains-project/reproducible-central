class io.vertx.mutiny.core.streams.WriteStreamImpl extends java.lang.Object implements io.vertx.mutiny.core.streams.WriteStream
{
private final io.vertx.core.streams.WriteStream delegate;
public final io.smallrye.mutiny.vertx.TypeArg __typeArg_0;
public io.vertx.core.streams.WriteStream getDelegate()
{
io.vertx.mutiny.core.streams.WriteStreamImpl v0;
io.vertx.core.streams.WriteStream v1;
v0 := @this: io.vertx.mutiny.core.streams.WriteStreamImpl;
v1 = v0.<io.vertx.mutiny.core.streams.WriteStreamImpl: io.vertx.core.streams.WriteStream delegate>;
return v1;
}
void <init>()
{
io.vertx.mutiny.core.streams.WriteStreamImpl v0;
io.smallrye.mutiny.vertx.TypeArg v1;
v0 := @this: io.vertx.mutiny.core.streams.WriteStreamImpl;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.streams.WriteStreamImpl: io.vertx.core.streams.WriteStream delegate> = null;
v1 = staticinvoke <io.smallrye.mutiny.vertx.TypeArg: io.smallrye.mutiny.vertx.TypeArg 'unknown'()>();
v0.<io.vertx.mutiny.core.streams.WriteStreamImpl: io.smallrye.mutiny.vertx.TypeArg __typeArg_0> = v1;
return;
}
public void <init>(io.vertx.core.streams.WriteStream)
{
io.vertx.mutiny.core.streams.WriteStreamImpl v0;
io.vertx.core.streams.WriteStream v1;
io.smallrye.mutiny.vertx.TypeArg v2;
v0 := @this: io.vertx.mutiny.core.streams.WriteStreamImpl;
v1 := @parameter0: io.vertx.core.streams.WriteStream;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.streams.WriteStreamImpl: io.vertx.core.streams.WriteStream delegate> = v1;
v2 = staticinvoke <io.smallrye.mutiny.vertx.TypeArg: io.smallrye.mutiny.vertx.TypeArg 'unknown'()>();
v0.<io.vertx.mutiny.core.streams.WriteStreamImpl: io.smallrye.mutiny.vertx.TypeArg __typeArg_0> = v2;
return;
}
public void <init>(io.vertx.core.streams.WriteStream, io.smallrye.mutiny.vertx.TypeArg)
{
io.vertx.mutiny.core.streams.WriteStreamImpl v0;
io.vertx.core.streams.WriteStream v1;
io.smallrye.mutiny.vertx.TypeArg v2;
v0 := @this: io.vertx.mutiny.core.streams.WriteStreamImpl;
v1 := @parameter0: io.vertx.core.streams.WriteStream;
v2 := @parameter1: io.smallrye.mutiny.vertx.TypeArg;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<io.vertx.mutiny.core.streams.WriteStreamImpl: io.vertx.core.streams.WriteStream delegate> = v1;
v0.<io.vertx.mutiny.core.streams.WriteStreamImpl: io.smallrye.mutiny.vertx.TypeArg __typeArg_0> = v2;
return;
}
private io.vertx.mutiny.core.streams.WriteStream __exceptionHandler(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.mutiny.core.streams.WriteStreamImpl v0;
io.vertx.core.streams.WriteStream v2;
v0 := @this: io.vertx.mutiny.core.streams.WriteStreamImpl;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.streams.WriteStreamImpl: io.vertx.core.streams.WriteStream delegate>;
interfaceinvoke v2.<io.vertx.core.streams.WriteStream: io.vertx.core.streams.WriteStream exceptionHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.streams.WriteStream exceptionHandler(java.util.function.Consumer)
{
io.vertx.mutiny.core.streams.WriteStream v3;
java.util.function.Consumer v1;
io.smallrye.mutiny.vertx.DelegatingConsumerHandler v2;
io.vertx.mutiny.core.streams.WriteStreamImpl v0;
v0 := @this: io.vertx.mutiny.core.streams.WriteStreamImpl;
v1 := @parameter0: java.util.function.Consumer;
if v1 == null goto label1;
v2 = new io.smallrye.mutiny.vertx.DelegatingConsumerHandler;
specialinvoke v2.<io.smallrye.mutiny.vertx.DelegatingConsumerHandler: void <init>(java.util.function.Consumer)>(v1);
goto label2;
label1:
v2 = null;
label2:
v3 = specialinvoke v0.<io.vertx.mutiny.core.streams.WriteStreamImpl: io.vertx.mutiny.core.streams.WriteStream __exceptionHandler(io.vertx.core.Handler)>(v2);
return v3;
}
public io.smallrye.mutiny.Uni write(java.lang.Object)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.streams.WriteStreamImpl v0;
java.lang.Object v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.streams.WriteStreamImpl;
v1 := @parameter0: java.lang.Object;
v2 = staticinvoke <io.vertx.mutiny.core.streams.WriteStreamImpl$lambda_write_0__2297: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.streams.WriteStreamImpl,java.lang.Object)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void writeAndAwait(java.lang.Object)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.streams.WriteStreamImpl v0;
java.lang.Object v1, v4;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.streams.WriteStreamImpl;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.streams.WriteStreamImpl: io.smallrye.mutiny.Uni write(java.lang.Object)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void writeAndForget(java.lang.Object)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.streams.WriteStreamImpl v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.Object v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.streams.WriteStreamImpl;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.streams.WriteStreamImpl: io.smallrye.mutiny.Uni write(java.lang.Object)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public io.smallrye.mutiny.Uni end()
{
java.util.function.Consumer v1;
io.vertx.mutiny.core.streams.WriteStreamImpl v0;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.streams.WriteStreamImpl;
v1 = staticinvoke <io.vertx.mutiny.core.streams.WriteStreamImpl$lambda_end_1__2298: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.streams.WriteStreamImpl)>(v0);
v2 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v1);
return v2;
}
public java.lang.Void endAndAwait()
{
io.smallrye.mutiny.groups.UniAwait v2;
io.vertx.mutiny.core.streams.WriteStreamImpl v0;
java.lang.Object v3;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.streams.WriteStreamImpl;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.streams.WriteStreamImpl: io.smallrye.mutiny.Uni end()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v3 = virtualinvoke v2.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v3;
}
public void endAndForget()
{
java.util.function.Consumer v3;
io.vertx.mutiny.core.streams.WriteStreamImpl v0;
io.smallrye.mutiny.groups.UniSubscribe v2;
io.smallrye.mutiny.Uni v1;
v0 := @this: io.vertx.mutiny.core.streams.WriteStreamImpl;
v1 = virtualinvoke v0.<io.vertx.mutiny.core.streams.WriteStreamImpl: io.smallrye.mutiny.Uni end()>();
v2 = interfaceinvoke v1.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v3 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v2.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v3);
return;
}
public io.smallrye.mutiny.Uni end(java.lang.Object)
{
java.util.function.Consumer v2;
io.vertx.mutiny.core.streams.WriteStreamImpl v0;
java.lang.Object v1;
io.smallrye.mutiny.Uni v3;
v0 := @this: io.vertx.mutiny.core.streams.WriteStreamImpl;
v1 := @parameter0: java.lang.Object;
v2 = staticinvoke <io.vertx.mutiny.core.streams.WriteStreamImpl$lambda_end_2__2299: java.util.function.Consumer bootstrap$(io.vertx.mutiny.core.streams.WriteStreamImpl,java.lang.Object)>(v0, v1);
v3 = staticinvoke <io.smallrye.mutiny.vertx.AsyncResultUni: io.smallrye.mutiny.Uni toUni(java.util.function.Consumer)>(v2);
return v3;
}
public java.lang.Void endAndAwait(java.lang.Object)
{
io.smallrye.mutiny.groups.UniAwait v3;
io.vertx.mutiny.core.streams.WriteStreamImpl v0;
java.lang.Object v1, v4;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.streams.WriteStreamImpl;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.streams.WriteStreamImpl: io.smallrye.mutiny.Uni end(java.lang.Object)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniAwait await()>();
v4 = virtualinvoke v3.<io.smallrye.mutiny.groups.UniAwait: java.lang.Object indefinitely()>();
return v4;
}
public void endAndForget(java.lang.Object)
{
java.util.function.Consumer v4;
io.vertx.mutiny.core.streams.WriteStreamImpl v0;
io.smallrye.mutiny.groups.UniSubscribe v3;
java.lang.Object v1;
io.smallrye.mutiny.Uni v2;
v0 := @this: io.vertx.mutiny.core.streams.WriteStreamImpl;
v1 := @parameter0: java.lang.Object;
v2 = virtualinvoke v0.<io.vertx.mutiny.core.streams.WriteStreamImpl: io.smallrye.mutiny.Uni end(java.lang.Object)>(v1);
v3 = interfaceinvoke v2.<io.smallrye.mutiny.Uni: io.smallrye.mutiny.groups.UniSubscribe subscribe()>();
v4 = <io.smallrye.mutiny.vertx.UniHelper: java.util.function.Consumer NOOP>;
virtualinvoke v3.<io.smallrye.mutiny.groups.UniSubscribe: io.smallrye.mutiny.subscription.Cancellable 'with'(java.util.function.Consumer)>(v4);
return;
}
public io.vertx.mutiny.core.streams.WriteStream setWriteQueueMaxSize(int)
{
int v1;
io.vertx.mutiny.core.streams.WriteStreamImpl v0;
io.vertx.core.streams.WriteStream v2;
v0 := @this: io.vertx.mutiny.core.streams.WriteStreamImpl;
v1 := @parameter0: int;
v2 = v0.<io.vertx.mutiny.core.streams.WriteStreamImpl: io.vertx.core.streams.WriteStream delegate>;
interfaceinvoke v2.<io.vertx.core.streams.WriteStream: io.vertx.core.streams.WriteStream setWriteQueueMaxSize(int)>(v1);
return v0;
}
public boolean writeQueueFull()
{
io.vertx.mutiny.core.streams.WriteStreamImpl v0;
io.vertx.core.streams.WriteStream v1;
boolean v2;
v0 := @this: io.vertx.mutiny.core.streams.WriteStreamImpl;
v1 = v0.<io.vertx.mutiny.core.streams.WriteStreamImpl: io.vertx.core.streams.WriteStream delegate>;
v2 = interfaceinvoke v1.<io.vertx.core.streams.WriteStream: boolean writeQueueFull()>();
return v2;
}
private io.vertx.mutiny.core.streams.WriteStream __drainHandler(io.vertx.core.Handler)
{
io.vertx.core.Handler v1;
io.vertx.mutiny.core.streams.WriteStreamImpl v0;
io.vertx.core.streams.WriteStream v2;
v0 := @this: io.vertx.mutiny.core.streams.WriteStreamImpl;
v1 := @parameter0: io.vertx.core.Handler;
v2 = v0.<io.vertx.mutiny.core.streams.WriteStreamImpl: io.vertx.core.streams.WriteStream delegate>;
interfaceinvoke v2.<io.vertx.core.streams.WriteStream: io.vertx.core.streams.WriteStream drainHandler(io.vertx.core.Handler)>(v1);
return v0;
}
public io.vertx.mutiny.core.streams.WriteStream drainHandler(java.lang.Runnable)
{
io.vertx.mutiny.core.streams.WriteStream v3;
io.vertx.mutiny.core.streams.WriteStreamImpl v0;
io.vertx.core.Handler v2;
java.lang.Runnable v1;
v0 := @this: io.vertx.mutiny.core.streams.WriteStreamImpl;
v1 := @parameter0: java.lang.Runnable;
v2 = staticinvoke <io.vertx.mutiny.core.streams.WriteStreamImpl$lambda_drainHandler_3__2300: io.vertx.core.Handler bootstrap$(java.lang.Runnable)>(v1);
v3 = specialinvoke v0.<io.vertx.mutiny.core.streams.WriteStreamImpl: io.vertx.mutiny.core.streams.WriteStream __drainHandler(io.vertx.core.Handler)>(v2);
return v3;
}
}