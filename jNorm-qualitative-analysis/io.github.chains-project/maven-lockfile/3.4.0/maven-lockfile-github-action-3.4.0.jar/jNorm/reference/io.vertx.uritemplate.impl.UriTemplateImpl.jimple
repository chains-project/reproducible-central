public class io.vertx.uritemplate.impl.UriTemplateImpl extends java.lang.Object implements io.vertx.uritemplate.UriTemplate
{
private static final java.lang.String HEX_ALPHABET;
private static final io.netty.util.collection.CharObjectMap mapping;
private final java.util.List terms;
private static final java.lang.ThreadLocal PCT_ENCODER;
public void <init>()
{
io.vertx.uritemplate.impl.UriTemplateImpl v0;
java.util.ArrayList v1;
v0 := @this: io.vertx.uritemplate.impl.UriTemplateImpl;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.ArrayList;
specialinvoke v1.<java.util.ArrayList: void <init>()>();
v0.<io.vertx.uritemplate.impl.UriTemplateImpl: java.util.List terms> = v1;
return;
}
public java.lang.String expandToString(io.vertx.uritemplate.Variables, io.vertx.uritemplate.ExpandOptions)
{
io.vertx.uritemplate.impl.UriTemplateImpl v0;
java.lang.String v4;
io.vertx.uritemplate.ExpandOptions v2;
io.vertx.uritemplate.Variables v1;
boolean v3;
v0 := @this: io.vertx.uritemplate.impl.UriTemplateImpl;
v1 := @parameter0: io.vertx.uritemplate.Variables;
v2 := @parameter1: io.vertx.uritemplate.ExpandOptions;
v3 = virtualinvoke v2.<io.vertx.uritemplate.ExpandOptions: boolean getAllowVariableMiss()>();
v4 = specialinvoke v0.<io.vertx.uritemplate.impl.UriTemplateImpl: java.lang.String expandToString(io.vertx.uritemplate.Variables,boolean)>(v1, v3);
return v4;
}
public java.lang.String expandToString(io.vertx.uritemplate.Variables)
{
java.lang.String v2;
io.vertx.uritemplate.impl.UriTemplateImpl v0;
io.vertx.uritemplate.Variables v1;
v0 := @this: io.vertx.uritemplate.impl.UriTemplateImpl;
v1 := @parameter0: io.vertx.uritemplate.Variables;
v2 = specialinvoke v0.<io.vertx.uritemplate.impl.UriTemplateImpl: java.lang.String expandToString(io.vertx.uritemplate.Variables,boolean)>(v1, 1);
return v2;
}
private java.lang.String expandToString(io.vertx.uritemplate.Variables, boolean)
{
io.vertx.uritemplate.impl.UriTemplateImpl$Term v13;
java.util.Iterator v5;
java.util.List v11, v4;
io.vertx.uritemplate.impl.UriTemplateImpl v0;
java.lang.Object v7;
java.lang.StringBuilder v3;
java.lang.String v12, v9;
io.vertx.uritemplate.impl.UriTemplateImpl$Operator v10;
io.vertx.uritemplate.Variables v1;
boolean v2, v6, v8;
v0 := @this: io.vertx.uritemplate.impl.UriTemplateImpl;
v1 := @parameter0: io.vertx.uritemplate.Variables;
v2 := @parameter1: boolean;
v3 = new java.lang.StringBuilder;
specialinvoke v3.<java.lang.StringBuilder: void <init>()>();
v4 = v0.<io.vertx.uritemplate.impl.UriTemplateImpl: java.util.List terms>;
v5 = interfaceinvoke v4.<java.util.List: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label3;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = v7 instanceof io.vertx.uritemplate.impl.UriTemplateImpl$Literals;
if v8 == 0 goto label2;
v9 = v13.<io.vertx.uritemplate.impl.UriTemplateImpl$Literals: java.lang.String value>;
virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v9);
goto label1;
label2:
v10 = v13.<io.vertx.uritemplate.impl.UriTemplateImpl$Expression: io.vertx.uritemplate.impl.UriTemplateImpl$Operator operator>;
v11 = v13.<io.vertx.uritemplate.impl.UriTemplateImpl$Expression: java.util.List value>;
virtualinvoke v10.<io.vertx.uritemplate.impl.UriTemplateImpl$Operator: void expand(java.util.List,io.vertx.uritemplate.Variables,boolean,java.lang.StringBuilder)>(v11, v1, v2, v3);
goto label1;
label3:
v12 = virtualinvoke v3.<java.lang.StringBuilder: java.lang.String toString()>();
return v12;
}
private static void encodeString(java.lang.String, io.vertx.uritemplate.impl.UriTemplateImpl$CharSet, boolean, java.lang.StringBuilder)
{
int v11, v13, v14, v17, v20, v21, v4, v5, v6;
io.vertx.uritemplate.impl.UriTemplateImpl$CharSet v1;
java.lang.String v0;
boolean v16, v19, v2, v8;
java.lang.ThreadLocal v9;
char v12, v15, v18, v7;
java.lang.Object v10;
java.lang.StringBuilder v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: io.vertx.uritemplate.impl.UriTemplateImpl$CharSet;
v2 := @parameter2: boolean;
v3 := @parameter3: java.lang.StringBuilder;
v4 = 0;
label1:
v5 = virtualinvoke v0.<java.lang.String: int length()>();
if v4 >= v5 goto label4;
v6 = v4;
v4 = v4 + 1;
v7 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v6);
v8 = staticinvoke <java.lang.Character: boolean isSurrogate(char)>(v7);
if v8 == 0 goto label2;
v9 = <io.vertx.uritemplate.impl.UriTemplateImpl: java.lang.ThreadLocal PCT_ENCODER>;
v10 = virtualinvoke v9.<java.lang.ThreadLocal: java.lang.Object get()>();
v11 = v4;
v4 = v4 + 1;
v12 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v11);
virtualinvoke v10.<io.vertx.uritemplate.impl.UriTemplateImpl$PctEncoder: void encodeChars(char,char,java.lang.StringBuilder)>(v7, v12, v3);
goto label1;
label2:
if v2 == 0 goto label3;
if v7 != 37 goto label3;
v13 = v4 + 1;
v14 = virtualinvoke v0.<java.lang.String: int length()>();
if v13 >= v14 goto label3;
v15 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v4);
v16 = staticinvoke <io.vertx.uritemplate.impl.UriTemplateImpl$Parser: boolean isHEXDIG(char)>(v15);
if v16 == 0 goto label3;
v17 = v4 + 1;
v18 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v17);
v19 = staticinvoke <io.vertx.uritemplate.impl.UriTemplateImpl$Parser: boolean isHEXDIG(char)>(v18);
if v19 == 0 goto label3;
v20 = v4 - 1;
v21 = v4 + 2;
virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(v0, v20, v21);
v4 = v4 + 2;
goto label1;
label3:
staticinvoke <io.vertx.uritemplate.impl.UriTemplateImpl: void encodeChar(char,io.vertx.uritemplate.impl.UriTemplateImpl$CharSet,java.lang.StringBuilder)>(v7, v1, v3);
goto label1;
label4:
return;
}
private static void encodeChar(char, io.vertx.uritemplate.impl.UriTemplateImpl$CharSet, java.lang.StringBuilder)
{
java.lang.ThreadLocal v4;
io.vertx.uritemplate.impl.UriTemplateImpl$CharSet v1;
char v0;
java.lang.Object v5;
java.lang.StringBuilder v2;
boolean v3;
v0 := @parameter0: char;
v1 := @parameter1: io.vertx.uritemplate.impl.UriTemplateImpl$CharSet;
v2 := @parameter2: java.lang.StringBuilder;
v3 = interfaceinvoke v1.<io.vertx.uritemplate.impl.UriTemplateImpl$CharSet: boolean contains(char)>(v0);
if v3 == 0 goto label1;
virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(v0);
goto label2;
label1:
v4 = <io.vertx.uritemplate.impl.UriTemplateImpl: java.lang.ThreadLocal PCT_ENCODER>;
v5 = virtualinvoke v4.<java.lang.ThreadLocal: java.lang.Object get()>();
virtualinvoke v5.<io.vertx.uritemplate.impl.UriTemplateImpl$PctEncoder: void encodeChar(char,java.lang.StringBuilder)>(v0, v2);
label2:
return;
}
private static void pctEncode(java.lang.String, java.lang.StringBuilder)
{
byte[] v3;
byte v6;
java.nio.charset.Charset v2;
int v4, v5;
java.lang.StringBuilder v1;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.StringBuilder;
v2 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;
v3 = virtualinvoke v0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(v2);
v4 = lengthof v3;
v5 = 0;
label1:
if v5 >= v4 goto label2;
v6 = v3[v5];
staticinvoke <io.vertx.uritemplate.impl.UriTemplateImpl: void pctEncode(byte,java.lang.StringBuilder)>(v6, v1);
v5 = v5 + 1;
goto label1;
label2:
return;
}
private static void pctEncode(byte, java.lang.StringBuilder)
{
short v2;
byte v0, v4;
int v3, v5, v6;
java.lang.StringBuilder v1;
v0 := @parameter0: byte;
v1 := @parameter1: java.lang.StringBuilder;
v2 = v0 & 240;
v3 = v2 >> 4;
v4 = v0 & 15;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(37);
v5 = v3 + 1;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>("0123456789ABCDEF", v3, v5);
v6 = v4 + 1;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>("0123456789ABCDEF", v4, v6);
return;
}
static void <clinit>()
{
java.lang.ThreadLocal v11;
io.vertx.uritemplate.impl.UriTemplateImpl$Operator[] v1;
char v9;
java.util.function.Supplier v10;
io.vertx.uritemplate.impl.UriTemplateImpl$SOperator v5;
int v2, v3, v7, v8;
char[] v6;
io.vertx.uritemplate.impl.UriTemplateImpl$Operator v4;
io.netty.util.collection.CharObjectHashMap v0;
v0 = new io.netty.util.collection.CharObjectHashMap;
specialinvoke v0.<io.netty.util.collection.CharObjectHashMap: void <init>()>();
v1 = staticinvoke <io.vertx.uritemplate.impl.UriTemplateImpl$Operator: io.vertx.uritemplate.impl.UriTemplateImpl$Operator[] values()>();
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label4;
v4 = v1[v3];
v5 = v4.<io.vertx.uritemplate.impl.UriTemplateImpl$Operator: io.vertx.uritemplate.impl.UriTemplateImpl$SOperator so>;
v6 = v5.<io.vertx.uritemplate.impl.UriTemplateImpl$SOperator: char[] chars>;
v7 = lengthof v6;
v8 = 0;
label2:
if v8 >= v7 goto label3;
v9 = v6[v8];
interfaceinvoke v0.<io.netty.util.collection.CharObjectMap: java.lang.Object put(char,java.lang.Object)>(v9, v4);
v8 = v8 + 1;
goto label2;
label3:
v3 = v3 + 1;
goto label1;
label4:
<io.vertx.uritemplate.impl.UriTemplateImpl: io.netty.util.collection.CharObjectMap mapping> = v0;
v10 = staticinvoke <io.vertx.uritemplate.impl.UriTemplateImpl$lambda_static_0__854: java.util.function.Supplier bootstrap$()>();
v11 = staticinvoke <java.lang.ThreadLocal: java.lang.ThreadLocal withInitial(java.util.function.Supplier)>(v10);
<io.vertx.uritemplate.impl.UriTemplateImpl: java.lang.ThreadLocal PCT_ENCODER> = v11;
return;
}
}