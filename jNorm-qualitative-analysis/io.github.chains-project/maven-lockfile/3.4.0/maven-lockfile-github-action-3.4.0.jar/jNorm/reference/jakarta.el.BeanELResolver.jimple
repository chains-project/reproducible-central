public class jakarta.el.BeanELResolver extends jakarta.el.ELResolver
{
private boolean isReadOnly;
private final jakarta.el.BeanELResolver$SoftConcurrentHashMap properties;
public void <init>()
{
jakarta.el.BeanELResolver v0;
jakarta.el.BeanELResolver$SoftConcurrentHashMap v1;
v0 := @this: jakarta.el.BeanELResolver;
specialinvoke v0.<jakarta.el.ELResolver: void <init>()>();
v1 = new jakarta.el.BeanELResolver$SoftConcurrentHashMap;
specialinvoke v1.<jakarta.el.BeanELResolver$SoftConcurrentHashMap: void <init>()>();
v0.<jakarta.el.BeanELResolver: jakarta.el.BeanELResolver$SoftConcurrentHashMap properties> = v1;
v0.<jakarta.el.BeanELResolver: boolean isReadOnly> = 0;
return;
}
public void <init>(boolean)
{
jakarta.el.BeanELResolver v0;
jakarta.el.BeanELResolver$SoftConcurrentHashMap v2;
boolean v1;
v0 := @this: jakarta.el.BeanELResolver;
v1 := @parameter0: boolean;
specialinvoke v0.<jakarta.el.ELResolver: void <init>()>();
v2 = new jakarta.el.BeanELResolver$SoftConcurrentHashMap;
specialinvoke v2.<jakarta.el.BeanELResolver$SoftConcurrentHashMap: void <init>()>();
v0.<jakarta.el.BeanELResolver: jakarta.el.BeanELResolver$SoftConcurrentHashMap properties> = v2;
v0.<jakarta.el.BeanELResolver: boolean isReadOnly> = v1;
return;
}
public java.lang.Class getType(jakarta.el.ELContext, java.lang.Object, java.lang.Object)
{
jakarta.el.ELContext v1;
jakarta.el.BeanELResolver$BeanProperty v5;
jakarta.el.BeanELResolver v0;
java.lang.NullPointerException v4;
java.lang.Class v8;
java.lang.Object v2, v3;
boolean v6, v7;
v0 := @this: jakarta.el.BeanELResolver;
v1 := @parameter0: jakarta.el.ELContext;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.lang.Object;
if v1 != null goto label1;
v4 = new java.lang.NullPointerException;
specialinvoke v4.<java.lang.NullPointerException: void <init>()>();
throw v4;
label1:
if v2 == null goto label2;
if v3 != null goto label3;
label2:
return null;
label3:
v5 = specialinvoke v0.<jakarta.el.BeanELResolver: jakarta.el.BeanELResolver$BeanProperty getBeanProperty(jakarta.el.ELContext,java.lang.Object,java.lang.Object)>(v1, v2, v3);
virtualinvoke v1.<jakarta.el.ELContext: void setPropertyResolved(boolean)>(1);
v6 = v0.<jakarta.el.BeanELResolver: boolean isReadOnly>;
if v6 != 0 goto label4;
v7 = virtualinvoke v5.<jakarta.el.BeanELResolver$BeanProperty: boolean isReadOnly(java.lang.Object)>(v2);
if v7 == 0 goto label5;
label4:
return null;
label5:
v8 = virtualinvoke v5.<jakarta.el.BeanELResolver$BeanProperty: java.lang.Class getPropertyType()>();
return v8;
}
public java.lang.Object getValue(jakarta.el.ELContext, java.lang.Object, java.lang.Object)
{
java.lang.Throwable v18;
jakarta.el.BeanELResolver$BeanProperty v5;
java.lang.Object[] v13, v8;
jakarta.el.BeanELResolver v0;
jakarta.el.ELException v15, v17, v20;
java.lang.NullPointerException v4;
jakarta.el.PropertyNotFoundException v7;
java.lang.String v10, v11, v12;
java.lang.reflect.Method v6;
jakarta.el.ELContext v1;
java.lang.Exception v19;
java.lang.reflect.InvocationTargetException v16;
java.lang.Class v9;
java.lang.Object v14, v2, v3;
v0 := @this: jakarta.el.BeanELResolver;
v1 := @parameter0: jakarta.el.ELContext;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.lang.Object;
if v1 != null goto label1;
v4 = new java.lang.NullPointerException;
specialinvoke v4.<java.lang.NullPointerException: void <init>()>();
throw v4;
label1:
if v2 == null goto label2;
if v3 != null goto label3;
label2:
return null;
label3:
v5 = specialinvoke v0.<jakarta.el.BeanELResolver: jakarta.el.BeanELResolver$BeanProperty getBeanProperty(jakarta.el.ELContext,java.lang.Object,java.lang.Object)>(v1, v2, v3);
v6 = virtualinvoke v5.<jakarta.el.BeanELResolver$BeanProperty: java.lang.reflect.Method getReadMethod(java.lang.Object)>(v2);
if v6 != null goto label4;
v7 = new jakarta.el.PropertyNotFoundException;
v8 = newarray (java.lang.Object)[2];
v9 = virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v10 = virtualinvoke v9.<java.lang.Class: java.lang.String getName()>();
v8[0] = v10;
v11 = virtualinvoke v3.<java.lang.Object: java.lang.String toString()>();
v8[1] = v11;
v12 = staticinvoke <jakarta.el.ELUtil: java.lang.String getExceptionMessageString(jakarta.el.ELContext,java.lang.String,java.lang.Object[])>(v1, "propertyNotReadable", v8);
specialinvoke v7.<jakarta.el.PropertyNotFoundException: void <init>(java.lang.String)>(v12);
throw v7;
label4:
v13 = newarray (java.lang.Object)[0];
v14 = virtualinvoke v6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v2, v13);
virtualinvoke v1.<jakarta.el.ELContext: void setPropertyResolved(java.lang.Object,java.lang.Object)>(v2, v3);
label5:
goto label9;
label6:
v15 := @caughtexception;
throw v15;
label7:
v16 := @caughtexception;
v17 = new jakarta.el.ELException;
v18 = virtualinvoke v16.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();
specialinvoke v17.<jakarta.el.ELException: void <init>(java.lang.Throwable)>(v18);
throw v17;
label8:
v19 := @caughtexception;
v20 = new jakarta.el.ELException;
specialinvoke v20.<jakarta.el.ELException: void <init>(java.lang.Throwable)>(v19);
throw v20;
label9:
return v14;
catch jakarta.el.ELException from label4 to label5 with label6;
catch java.lang.reflect.InvocationTargetException from label4 to label5 with label7;
catch java.lang.Exception from label4 to label5 with label8;
}
public void setValue(jakarta.el.ELContext, java.lang.Object, java.lang.Object, java.lang.Object)
{
jakarta.el.BeanELResolver$BeanProperty v12;
jakarta.el.BeanELResolver v0;
jakarta.el.ELException v21, v23, v31;
java.lang.NullPointerException v5;
jakarta.el.PropertyNotWritableException v14, v7;
java.lang.reflect.Method v13;
boolean v6;
jakarta.el.ELContext v1;
java.lang.Exception v25;
java.lang.reflect.InvocationTargetException v22;
java.lang.Throwable v24;
java.lang.Object[] v15, v20, v26, v8;
java.lang.String v10, v11, v17, v18, v19, v27, v29, v30;
java.lang.Class v16, v28, v9;
java.lang.Object v2, v3, v4;
v0 := @this: jakarta.el.BeanELResolver;
v1 := @parameter0: jakarta.el.ELContext;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.lang.Object;
v4 := @parameter3: java.lang.Object;
if v1 != null goto label01;
v5 = new java.lang.NullPointerException;
specialinvoke v5.<java.lang.NullPointerException: void <init>()>();
throw v5;
label01:
if v2 == null goto label02;
if v3 != null goto label03;
label02:
return;
label03:
v6 = v0.<jakarta.el.BeanELResolver: boolean isReadOnly>;
if v6 == 0 goto label04;
v7 = new jakarta.el.PropertyNotWritableException;
v8 = newarray (java.lang.Object)[1];
v9 = virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v10 = virtualinvoke v9.<java.lang.Class: java.lang.String getName()>();
v8[0] = v10;
v11 = staticinvoke <jakarta.el.ELUtil: java.lang.String getExceptionMessageString(jakarta.el.ELContext,java.lang.String,java.lang.Object[])>(v1, "resolverNotwritable", v8);
specialinvoke v7.<jakarta.el.PropertyNotWritableException: void <init>(java.lang.String)>(v11);
throw v7;
label04:
v12 = specialinvoke v0.<jakarta.el.BeanELResolver: jakarta.el.BeanELResolver$BeanProperty getBeanProperty(jakarta.el.ELContext,java.lang.Object,java.lang.Object)>(v1, v2, v3);
v13 = virtualinvoke v12.<jakarta.el.BeanELResolver$BeanProperty: java.lang.reflect.Method getWriteMethod(java.lang.Object)>(v2);
if v13 != null goto label05;
v14 = new jakarta.el.PropertyNotWritableException;
v15 = newarray (java.lang.Object)[2];
v16 = virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v17 = virtualinvoke v16.<java.lang.Class: java.lang.String getName()>();
v15[0] = v17;
v18 = virtualinvoke v3.<java.lang.Object: java.lang.String toString()>();
v15[1] = v18;
v19 = staticinvoke <jakarta.el.ELUtil: java.lang.String getExceptionMessageString(jakarta.el.ELContext,java.lang.String,java.lang.Object[])>(v1, "propertyNotWritable", v15);
specialinvoke v14.<jakarta.el.PropertyNotWritableException: void <init>(java.lang.String)>(v19);
throw v14;
label05:
v20 = newarray (java.lang.Object)[1];
v20[0] = v4;
virtualinvoke v13.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v2, v20);
virtualinvoke v1.<jakarta.el.ELContext: void setPropertyResolved(java.lang.Object,java.lang.Object)>(v2, v3);
label06:
goto label11;
label07:
v21 := @caughtexception;
throw v21;
label08:
v22 := @caughtexception;
v23 = new jakarta.el.ELException;
v24 = virtualinvoke v22.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();
specialinvoke v23.<jakarta.el.ELException: void <init>(java.lang.Throwable)>(v24);
throw v23;
label09:
v25 := @caughtexception;
if null != v4 goto label10;
v4 = "null";
label10:
v26 = newarray (java.lang.Object)[3];
v27 = virtualinvoke v3.<java.lang.Object: java.lang.String toString()>();
v26[0] = v27;
v28 = virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v29 = virtualinvoke v28.<java.lang.Class: java.lang.String getName()>();
v26[1] = v29;
v26[2] = v4;
v30 = staticinvoke <jakarta.el.ELUtil: java.lang.String getExceptionMessageString(jakarta.el.ELContext,java.lang.String,java.lang.Object[])>(v1, "setPropertyFailed", v26);
v31 = new jakarta.el.ELException;
specialinvoke v31.<jakarta.el.ELException: void <init>(java.lang.String,java.lang.Throwable)>(v30, v25);
throw v31;
label11:
return;
catch jakarta.el.ELException from label05 to label06 with label07;
catch java.lang.reflect.InvocationTargetException from label05 to label06 with label08;
catch java.lang.Exception from label05 to label06 with label09;
}
public java.lang.Object invoke(jakarta.el.ELContext, java.lang.Object, java.lang.Object, java.lang.Class[], java.lang.Object[])
{
jakarta.el.ELContext v1;
java.lang.Object[] v5;
java.lang.Class[] v4;
jakarta.el.BeanELResolver v0;
int v10, v9;
java.lang.Class v6;
java.lang.Object v11, v13, v2, v3;
java.lang.String v7;
java.lang.reflect.Method v8;
boolean v12;
v0 := @this: jakarta.el.BeanELResolver;
v1 := @parameter0: jakarta.el.ELContext;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.lang.Object;
v4 := @parameter3: java.lang.Class[];
v5 := @parameter4: java.lang.Object[];
if v2 == null goto label1;
if v3 != null goto label2;
label1:
return null;
label2:
v6 = virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v7 = virtualinvoke v3.<java.lang.Object: java.lang.String toString()>();
v8 = staticinvoke <jakarta.el.ELUtil: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Class[],java.lang.Object[],boolean)>(v6, v2, v7, v4, v5, 0);
v9 = lengthof v5;
v10 = 0;
label3:
if v10 >= v9 goto label5;
v11 = v5[v10];
v12 = v11 instanceof jakarta.el.LambdaExpression;
if v12 == 0 goto label4;
virtualinvoke v11.<jakarta.el.LambdaExpression: void setELContext(jakarta.el.ELContext)>(v1);
label4:
v10 = v10 + 1;
goto label3;
label5:
v13 = staticinvoke <jakarta.el.ELUtil: java.lang.Object invokeMethod(jakarta.el.ELContext,java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>(v1, v8, v2, v5);
virtualinvoke v1.<jakarta.el.ELContext: void setPropertyResolved(java.lang.Object,java.lang.Object)>(v2, v3);
return v13;
}
public boolean isReadOnly(jakarta.el.ELContext, java.lang.Object, java.lang.Object)
{
jakarta.el.ELContext v1;
jakarta.el.BeanELResolver$BeanProperty v6;
jakarta.el.BeanELResolver v0;
java.lang.NullPointerException v4;
java.lang.Object v2, v3;
boolean v5, v7;
v0 := @this: jakarta.el.BeanELResolver;
v1 := @parameter0: jakarta.el.ELContext;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.lang.Object;
if v1 != null goto label1;
v4 = new java.lang.NullPointerException;
specialinvoke v4.<java.lang.NullPointerException: void <init>()>();
throw v4;
label1:
if v2 == null goto label2;
if v3 != null goto label3;
label2:
return 0;
label3:
virtualinvoke v1.<jakarta.el.ELContext: void setPropertyResolved(boolean)>(1);
v5 = v0.<jakarta.el.BeanELResolver: boolean isReadOnly>;
if v5 == 0 goto label4;
return 1;
label4:
v6 = specialinvoke v0.<jakarta.el.BeanELResolver: jakarta.el.BeanELResolver$BeanProperty getBeanProperty(jakarta.el.ELContext,java.lang.Object,java.lang.Object)>(v1, v2, v3);
v7 = virtualinvoke v6.<jakarta.el.BeanELResolver$BeanProperty: boolean isReadOnly(java.lang.Object)>(v2);
return v7;
}
public java.util.Iterator getFeatureDescriptors(jakarta.el.ELContext, java.lang.Object)
{
java.beans.PropertyDescriptor[] v7, v9;
jakarta.el.BeanELResolver v0;
java.util.ArrayList v6;
java.beans.BeanInfo v3;
int v10, v11, v8;
java.lang.Boolean v14;
jakarta.el.ELContext v1;
java.util.Iterator v15;
java.lang.Exception v5;
java.beans.PropertyDescriptor v12;
java.lang.Class v13, v4;
java.lang.Object v2;
v0 := @this: jakarta.el.BeanELResolver;
v1 := @parameter0: jakarta.el.ELContext;
v2 := @parameter1: java.lang.Object;
if v2 != null goto label1;
return null;
label1:
v3 = null;
label2:
v4 = virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v3 = staticinvoke <java.beans.Introspector: java.beans.BeanInfo getBeanInfo(java.lang.Class)>(v4);
label3:
goto label5;
label4:
v5 := @caughtexception;
label5:
if v3 != null goto label6;
return null;
label6:
v6 = new java.util.ArrayList;
v7 = interfaceinvoke v3.<java.beans.BeanInfo: java.beans.PropertyDescriptor[] getPropertyDescriptors()>();
v8 = lengthof v7;
specialinvoke v6.<java.util.ArrayList: void <init>(int)>(v8);
v9 = interfaceinvoke v3.<java.beans.BeanInfo: java.beans.PropertyDescriptor[] getPropertyDescriptors()>();
v10 = lengthof v9;
v11 = 0;
label7:
if v11 >= v10 goto label8;
v12 = v9[v11];
v13 = virtualinvoke v12.<java.beans.PropertyDescriptor: java.lang.Class getPropertyType()>();
virtualinvoke v12.<java.beans.PropertyDescriptor: void setValue(java.lang.String,java.lang.Object)>("type", v13);
v14 = <java.lang.Boolean: java.lang.Boolean TRUE>;
virtualinvoke v12.<java.beans.PropertyDescriptor: void setValue(java.lang.String,java.lang.Object)>("resolvableAtDesignTime", v14);
virtualinvoke v6.<java.util.ArrayList: boolean add(java.lang.Object)>(v12);
v11 = v11 + 1;
goto label7;
label8:
v15 = virtualinvoke v6.<java.util.ArrayList: java.util.Iterator iterator()>();
return v15;
catch java.lang.Exception from label2 to label3 with label4;
}
public java.lang.Class getCommonPropertyType(jakarta.el.ELContext, java.lang.Object)
{
jakarta.el.ELContext v1;
java.lang.Object v2;
jakarta.el.BeanELResolver v0;
v0 := @this: jakarta.el.BeanELResolver;
v1 := @parameter0: jakarta.el.ELContext;
v2 := @parameter1: java.lang.Object;
if v2 != null goto label1;
return null;
label1:
return class "Ljava/lang/Object;";
}
private jakarta.el.BeanELResolver$BeanProperty getBeanProperty(jakarta.el.ELContext, java.lang.Object, java.lang.Object)
{
jakarta.el.ELContext v1;
jakarta.el.BeanELResolver$BeanProperty v10;
java.lang.Object[] v12;
jakarta.el.BeanELResolver v0;
jakarta.el.PropertyNotFoundException v11;
jakarta.el.BeanELResolver$SoftConcurrentHashMap v6, v9;
jakarta.el.BeanELResolver$BeanProperties v7, v8;
java.lang.Class v5;
java.lang.Object v2, v3;
java.lang.String v13, v14, v4;
v0 := @this: jakarta.el.BeanELResolver;
v1 := @parameter0: jakarta.el.ELContext;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: java.lang.Object;
v4 = virtualinvoke v3.<java.lang.Object: java.lang.String toString()>();
v5 = virtualinvoke v2.<java.lang.Object: java.lang.Class getClass()>();
v6 = v0.<jakarta.el.BeanELResolver: jakarta.el.BeanELResolver$SoftConcurrentHashMap properties>;
v7 = virtualinvoke v6.<jakarta.el.BeanELResolver$SoftConcurrentHashMap: jakarta.el.BeanELResolver$BeanProperties get(java.lang.Object)>(v5);
if v7 != null goto label1;
v8 = new jakarta.el.BeanELResolver$BeanProperties;
specialinvoke v8.<jakarta.el.BeanELResolver$BeanProperties: void <init>(java.lang.Class)>(v5);
v7 = v8;
v9 = v0.<jakarta.el.BeanELResolver: jakarta.el.BeanELResolver$SoftConcurrentHashMap properties>;
virtualinvoke v9.<jakarta.el.BeanELResolver$SoftConcurrentHashMap: jakarta.el.BeanELResolver$BeanProperties put(java.lang.Class,jakarta.el.BeanELResolver$BeanProperties)>(v5, v8);
label1:
v10 = virtualinvoke v7.<jakarta.el.BeanELResolver$BeanProperties: jakarta.el.BeanELResolver$BeanProperty getBeanProperty(java.lang.String)>(v4);
if v10 != null goto label2;
v11 = new jakarta.el.PropertyNotFoundException;
v12 = newarray (java.lang.Object)[2];
v13 = virtualinvoke v5.<java.lang.Class: java.lang.String getName()>();
v12[0] = v13;
v12[1] = v4;
v14 = staticinvoke <jakarta.el.ELUtil: java.lang.String getExceptionMessageString(jakarta.el.ELContext,java.lang.String,java.lang.Object[])>(v1, "propertyNotFound", v12);
specialinvoke v11.<jakarta.el.PropertyNotFoundException: void <init>(java.lang.String)>(v14);
throw v11;
label2:
return v10;
}
}