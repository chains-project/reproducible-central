public abstract class jakarta.el.ExpressionFactory extends java.lang.Object
{
public void <init>()
{
jakarta.el.ExpressionFactory v0;
v0 := @this: jakarta.el.ExpressionFactory;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static jakarta.el.ExpressionFactory newInstance()
{
jakarta.el.ExpressionFactory v0;
v0 = staticinvoke <jakarta.el.ExpressionFactory: jakarta.el.ExpressionFactory newInstance(java.util.Properties)>(null);
return v0;
}
public static jakarta.el.ExpressionFactory newInstance(java.util.Properties)
{
java.lang.Object v1;
java.util.Properties v0;
v0 := @parameter0: java.util.Properties;
v1 = staticinvoke <jakarta.el.FactoryFinder: java.lang.Object find(java.lang.Class,java.lang.String,java.lang.String,java.util.Properties)>(class "Ljakarta/el/ExpressionFactory;", "jakarta.el.ExpressionFactory", "com.sun.el.ExpressionFactoryImpl", v0);
return v1;
}
public abstract jakarta.el.ValueExpression createValueExpression(jakarta.el.ELContext, java.lang.String, java.lang.Class);
public abstract jakarta.el.ValueExpression createValueExpression(java.lang.Object, java.lang.Class);
public abstract jakarta.el.MethodExpression createMethodExpression(jakarta.el.ELContext, java.lang.String, java.lang.Class, java.lang.Class[]);
public abstract java.lang.Object coerceToType(java.lang.Object, java.lang.Class);
public jakarta.el.ELResolver getStreamELResolver()
{
jakarta.el.ExpressionFactory v0;
v0 := @this: jakarta.el.ExpressionFactory;
return null;
}
public java.util.Map getInitFunctionMap()
{
jakarta.el.ExpressionFactory v0;
v0 := @this: jakarta.el.ExpressionFactory;
return null;
}
}