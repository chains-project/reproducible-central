public interface  jakarta.enterprise.inject.build.compatible.spi.BeanInfo extends java.lang.Object
{
public abstract jakarta.enterprise.inject.build.compatible.spi.ScopeInfo scope();
public abstract java.util.Collection types();
public abstract java.util.Collection qualifiers();
public abstract jakarta.enterprise.lang.model.declarations.ClassInfo declaringClass();
public abstract boolean isClassBean();
public abstract boolean isProducerMethod();
public abstract boolean isProducerField();
public abstract boolean isSynthetic();
public abstract jakarta.enterprise.lang.model.declarations.MethodInfo producerMethod();
public abstract jakarta.enterprise.lang.model.declarations.FieldInfo producerField();
public abstract boolean isAlternative();
public abstract java.lang.Integer priority();
public abstract java.lang.String name();
public abstract jakarta.enterprise.inject.build.compatible.spi.DisposerInfo disposer();
public abstract java.util.Collection stereotypes();
public abstract java.util.Collection injectionPoints();
public boolean isInterceptor()
{
jakarta.enterprise.inject.build.compatible.spi.BeanInfo v0;
v0 := @this: jakarta.enterprise.inject.build.compatible.spi.BeanInfo;
return 0;
}
public jakarta.enterprise.inject.build.compatible.spi.InterceptorInfo asInterceptor()
{
java.lang.IllegalStateException v1;
jakarta.enterprise.inject.build.compatible.spi.BeanInfo v0;
v0 := @this: jakarta.enterprise.inject.build.compatible.spi.BeanInfo;
v1 = new java.lang.IllegalStateException;
specialinvoke v1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not an interceptor");
throw v1;
}
}