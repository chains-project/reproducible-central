public abstract class jakarta.enterprise.inject.se.SeContainerInitializer extends java.lang.Object
{
public void <init>()
{
jakarta.enterprise.inject.se.SeContainerInitializer v0;
v0 := @this: jakarta.enterprise.inject.se.SeContainerInitializer;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static jakarta.enterprise.inject.se.SeContainerInitializer newInstance()
{
jakarta.enterprise.inject.se.SeContainerInitializer v0;
v0 = staticinvoke <jakarta.enterprise.inject.se.SeContainerInitializer: jakarta.enterprise.inject.se.SeContainerInitializer findSeContainerInitializer()>();
return v0;
}
private static jakarta.enterprise.inject.se.SeContainerInitializer findSeContainerInitializer()
{
java.lang.IllegalStateException v10, v5, v8;
java.util.Iterator v3;
java.util.ServiceLoader v2;
java.util.ServiceConfigurationError v7;
java.lang.Class v0;
java.lang.Object v6;
java.lang.ClassLoader v1;
boolean v4, v9;
v0 = class "Ljakarta/enterprise/inject/se/SeContainerInitializer;";
v1 = virtualinvoke v0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();
v2 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>(class "Ljakarta/enterprise/inject/se/SeContainerInitializer;", v1);
v3 = virtualinvoke v2.<java.util.ServiceLoader: java.util.Iterator iterator()>();
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 != 0 goto label1;
v5 = new java.lang.IllegalStateException;
specialinvoke v5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No valid CDI implementation found");
throw v5;
label1:
v6 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
label2:
goto label4;
label3:
v7 := @caughtexception;
v8 = new java.lang.IllegalStateException;
specialinvoke v8.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Error while instantiating SeContainerInitializer", v7);
throw v8;
label4:
v9 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v9 == 0 goto label5;
v10 = new java.lang.IllegalStateException;
specialinvoke v10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Two or more CDI implementations found, only one is supported");
throw v10;
label5:
return v6;
catch java.util.ServiceConfigurationError from label1 to label2 with label3;
}
public abstract transient jakarta.enterprise.inject.se.SeContainerInitializer addBeanClasses(java.lang.Class[]);
public abstract transient jakarta.enterprise.inject.se.SeContainerInitializer addPackages(java.lang.Class[]);
public abstract transient jakarta.enterprise.inject.se.SeContainerInitializer addPackages(boolean, java.lang.Class[]);
public abstract transient jakarta.enterprise.inject.se.SeContainerInitializer addPackages(java.lang.Package[]);
public abstract transient jakarta.enterprise.inject.se.SeContainerInitializer addPackages(boolean, java.lang.Package[]);
public abstract transient jakarta.enterprise.inject.se.SeContainerInitializer addExtensions(jakarta.enterprise.inject.spi.Extension[]);
public abstract transient jakarta.enterprise.inject.se.SeContainerInitializer addExtensions(java.lang.Class[]);
public abstract transient jakarta.enterprise.inject.se.SeContainerInitializer enableInterceptors(java.lang.Class[]);
public abstract transient jakarta.enterprise.inject.se.SeContainerInitializer enableDecorators(java.lang.Class[]);
public abstract transient jakarta.enterprise.inject.se.SeContainerInitializer selectAlternatives(java.lang.Class[]);
public abstract transient jakarta.enterprise.inject.se.SeContainerInitializer selectAlternativeStereotypes(java.lang.Class[]);
public abstract jakarta.enterprise.inject.se.SeContainerInitializer addProperty(java.lang.String, java.lang.Object);
public abstract jakarta.enterprise.inject.se.SeContainerInitializer setProperties(java.util.Map);
public abstract jakarta.enterprise.inject.se.SeContainerInitializer disableDiscovery();
public abstract jakarta.enterprise.inject.se.SeContainerInitializer setClassLoader(java.lang.ClassLoader);
public abstract jakarta.enterprise.inject.se.SeContainer initialize();
}