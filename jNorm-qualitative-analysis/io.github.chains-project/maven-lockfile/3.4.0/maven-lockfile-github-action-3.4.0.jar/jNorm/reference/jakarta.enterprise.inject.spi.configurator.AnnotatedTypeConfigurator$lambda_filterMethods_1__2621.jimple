public final class jakarta.enterprise.inject.spi.configurator.AnnotatedTypeConfigurator$lambda_filterMethods_1__2621 extends java.lang.Object implements java.util.function.Predicate
{
java.util.function.Predicate cap0;
public static java.util.function.Predicate bootstrap$(java.util.function.Predicate)
{
jakarta.enterprise.inject.spi.configurator.AnnotatedTypeConfigurator$lambda_filterMethods_1__2621 v1;
java.util.function.Predicate v0;
v0 := @parameter0: java.util.function.Predicate;
v1 = new jakarta.enterprise.inject.spi.configurator.AnnotatedTypeConfigurator$lambda_filterMethods_1__2621;
specialinvoke v1.<jakarta.enterprise.inject.spi.configurator.AnnotatedTypeConfigurator$lambda_filterMethods_1__2621: void <init>(java.util.function.Predicate)>(v0);
return v1;
}
public void <init>(java.util.function.Predicate)
{
jakarta.enterprise.inject.spi.configurator.AnnotatedTypeConfigurator$lambda_filterMethods_1__2621 v0;
java.util.function.Predicate v1;
v0 := @this: jakarta.enterprise.inject.spi.configurator.AnnotatedTypeConfigurator$lambda_filterMethods_1__2621;
v1 := @parameter0: java.util.function.Predicate;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<jakarta.enterprise.inject.spi.configurator.AnnotatedTypeConfigurator$lambda_filterMethods_1__2621: java.util.function.Predicate cap0> = v1;
return;
}
public boolean test(java.lang.Object)
{
java.util.function.Predicate v2;
java.lang.Object v1;
jakarta.enterprise.inject.spi.configurator.AnnotatedTypeConfigurator$lambda_filterMethods_1__2621 v0;
boolean v3;
v0 := @this: jakarta.enterprise.inject.spi.configurator.AnnotatedTypeConfigurator$lambda_filterMethods_1__2621;
v1 := @parameter0: java.lang.Object;
v2 = v0.<jakarta.enterprise.inject.spi.configurator.AnnotatedTypeConfigurator$lambda_filterMethods_1__2621: java.util.function.Predicate cap0>;
v3 = staticinvoke <jakarta.enterprise.inject.spi.configurator.AnnotatedTypeConfigurator: boolean lambda$filterMethods$1(java.util.function.Predicate,jakarta.enterprise.inject.spi.configurator.AnnotatedMethodConfigurator)>(v2, v1);
return v3;
}
}