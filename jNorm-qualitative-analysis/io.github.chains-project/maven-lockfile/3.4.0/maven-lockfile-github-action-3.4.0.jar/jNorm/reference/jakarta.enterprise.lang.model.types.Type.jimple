public interface  jakarta.enterprise.lang.model.types.Type extends java.lang.Object implements jakarta.enterprise.lang.model.AnnotationTarget
{
public boolean isDeclaration()
{
jakarta.enterprise.lang.model.types.Type v0;
v0 := @this: jakarta.enterprise.lang.model.types.Type;
return 0;
}
public boolean isType()
{
jakarta.enterprise.lang.model.types.Type v0;
v0 := @this: jakarta.enterprise.lang.model.types.Type;
return 1;
}
public jakarta.enterprise.lang.model.declarations.DeclarationInfo asDeclaration()
{
java.lang.IllegalStateException v1;
jakarta.enterprise.lang.model.types.Type v0;
v0 := @this: jakarta.enterprise.lang.model.types.Type;
v1 = new java.lang.IllegalStateException;
specialinvoke v1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not a declaration");
throw v1;
}
public jakarta.enterprise.lang.model.types.Type asType()
{
jakarta.enterprise.lang.model.types.Type v0;
v0 := @this: jakarta.enterprise.lang.model.types.Type;
return v0;
}
public abstract jakarta.enterprise.lang.model.types.Type$Kind kind();
public boolean isVoid()
{
jakarta.enterprise.lang.model.types.Type$Kind v1, v2;
jakarta.enterprise.lang.model.types.Type v0;
boolean v3;
v0 := @this: jakarta.enterprise.lang.model.types.Type;
v1 = interfaceinvoke v0.<jakarta.enterprise.lang.model.types.Type: jakarta.enterprise.lang.model.types.Type$Kind kind()>();
v2 = <jakarta.enterprise.lang.model.types.Type$Kind: jakarta.enterprise.lang.model.types.Type$Kind VOID>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isPrimitive()
{
jakarta.enterprise.lang.model.types.Type$Kind v1, v2;
jakarta.enterprise.lang.model.types.Type v0;
boolean v3;
v0 := @this: jakarta.enterprise.lang.model.types.Type;
v1 = interfaceinvoke v0.<jakarta.enterprise.lang.model.types.Type: jakarta.enterprise.lang.model.types.Type$Kind kind()>();
v2 = <jakarta.enterprise.lang.model.types.Type$Kind: jakarta.enterprise.lang.model.types.Type$Kind PRIMITIVE>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isClass()
{
jakarta.enterprise.lang.model.types.Type$Kind v1, v2;
jakarta.enterprise.lang.model.types.Type v0;
boolean v3;
v0 := @this: jakarta.enterprise.lang.model.types.Type;
v1 = interfaceinvoke v0.<jakarta.enterprise.lang.model.types.Type: jakarta.enterprise.lang.model.types.Type$Kind kind()>();
v2 = <jakarta.enterprise.lang.model.types.Type$Kind: jakarta.enterprise.lang.model.types.Type$Kind CLASS>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isArray()
{
jakarta.enterprise.lang.model.types.Type$Kind v1, v2;
jakarta.enterprise.lang.model.types.Type v0;
boolean v3;
v0 := @this: jakarta.enterprise.lang.model.types.Type;
v1 = interfaceinvoke v0.<jakarta.enterprise.lang.model.types.Type: jakarta.enterprise.lang.model.types.Type$Kind kind()>();
v2 = <jakarta.enterprise.lang.model.types.Type$Kind: jakarta.enterprise.lang.model.types.Type$Kind ARRAY>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isParameterizedType()
{
jakarta.enterprise.lang.model.types.Type$Kind v1, v2;
jakarta.enterprise.lang.model.types.Type v0;
boolean v3;
v0 := @this: jakarta.enterprise.lang.model.types.Type;
v1 = interfaceinvoke v0.<jakarta.enterprise.lang.model.types.Type: jakarta.enterprise.lang.model.types.Type$Kind kind()>();
v2 = <jakarta.enterprise.lang.model.types.Type$Kind: jakarta.enterprise.lang.model.types.Type$Kind PARAMETERIZED_TYPE>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isTypeVariable()
{
jakarta.enterprise.lang.model.types.Type$Kind v1, v2;
jakarta.enterprise.lang.model.types.Type v0;
boolean v3;
v0 := @this: jakarta.enterprise.lang.model.types.Type;
v1 = interfaceinvoke v0.<jakarta.enterprise.lang.model.types.Type: jakarta.enterprise.lang.model.types.Type$Kind kind()>();
v2 = <jakarta.enterprise.lang.model.types.Type$Kind: jakarta.enterprise.lang.model.types.Type$Kind TYPE_VARIABLE>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public boolean isWildcardType()
{
jakarta.enterprise.lang.model.types.Type$Kind v1, v2;
jakarta.enterprise.lang.model.types.Type v0;
boolean v3;
v0 := @this: jakarta.enterprise.lang.model.types.Type;
v1 = interfaceinvoke v0.<jakarta.enterprise.lang.model.types.Type: jakarta.enterprise.lang.model.types.Type$Kind kind()>();
v2 = <jakarta.enterprise.lang.model.types.Type$Kind: jakarta.enterprise.lang.model.types.Type$Kind WILDCARD_TYPE>;
if v1 != v2 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public jakarta.enterprise.lang.model.types.VoidType asVoid()
{
java.lang.IllegalStateException v1;
jakarta.enterprise.lang.model.types.Type v0;
v0 := @this: jakarta.enterprise.lang.model.types.Type;
v1 = new java.lang.IllegalStateException;
specialinvoke v1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not a void");
throw v1;
}
public jakarta.enterprise.lang.model.types.PrimitiveType asPrimitive()
{
java.lang.IllegalStateException v1;
jakarta.enterprise.lang.model.types.Type v0;
v0 := @this: jakarta.enterprise.lang.model.types.Type;
v1 = new java.lang.IllegalStateException;
specialinvoke v1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not a primitive");
throw v1;
}
public jakarta.enterprise.lang.model.types.ClassType asClass()
{
java.lang.IllegalStateException v1;
jakarta.enterprise.lang.model.types.Type v0;
v0 := @this: jakarta.enterprise.lang.model.types.Type;
v1 = new java.lang.IllegalStateException;
specialinvoke v1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not a class");
throw v1;
}
public jakarta.enterprise.lang.model.types.ArrayType asArray()
{
java.lang.IllegalStateException v1;
jakarta.enterprise.lang.model.types.Type v0;
v0 := @this: jakarta.enterprise.lang.model.types.Type;
v1 = new java.lang.IllegalStateException;
specialinvoke v1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not an array");
throw v1;
}
public jakarta.enterprise.lang.model.types.ParameterizedType asParameterizedType()
{
java.lang.IllegalStateException v1;
jakarta.enterprise.lang.model.types.Type v0;
v0 := @this: jakarta.enterprise.lang.model.types.Type;
v1 = new java.lang.IllegalStateException;
specialinvoke v1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not a parameterized type");
throw v1;
}
public jakarta.enterprise.lang.model.types.TypeVariable asTypeVariable()
{
java.lang.IllegalStateException v1;
jakarta.enterprise.lang.model.types.Type v0;
v0 := @this: jakarta.enterprise.lang.model.types.Type;
v1 = new java.lang.IllegalStateException;
specialinvoke v1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not a type variable");
throw v1;
}
public jakarta.enterprise.lang.model.types.WildcardType asWildcardType()
{
java.lang.IllegalStateException v1;
jakarta.enterprise.lang.model.types.Type v0;
v0 := @this: jakarta.enterprise.lang.model.types.Type;
v1 = new java.lang.IllegalStateException;
specialinvoke v1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not a wildcard type");
throw v1;
}
}