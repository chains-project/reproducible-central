public abstract class jakarta.enterprise.util.AnnotationLiteral extends java.lang.Object implements java.lang.'annotation'.Annotation, java.io.Serializable
{
private static final long serialVersionUID;
private transient java.lang.Class annotationType;
private transient java.lang.reflect.Method[] members;
private transient java.lang.Integer cachedHashCode;
protected void <init>()
{
jakarta.enterprise.util.AnnotationLiteral v0;
v0 := @this: jakarta.enterprise.util.AnnotationLiteral;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
private java.lang.reflect.Method[] getMembers()
{
jakarta.enterprise.util.AnnotationLiteral v0;
java.lang.Integer v16;
java.lang.reflect.Method[] v1, v14, v17, v3, v4;
int v15, v5;
java.lang.String v12, v13;
boolean v8;
java.lang.RuntimeException v9;
java.lang.Class v10, v11, v2, v6, v7;
v0 := @this: jakarta.enterprise.util.AnnotationLiteral;
v1 = v0.<jakarta.enterprise.util.AnnotationLiteral: java.lang.reflect.Method[] members>;
if v1 != null goto label3;
v2 = virtualinvoke v0.<jakarta.enterprise.util.AnnotationLiteral: java.lang.Class annotationType()>();
v3 = staticinvoke <jakarta.enterprise.util.SecurityActions: java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)>(v2);
v0.<jakarta.enterprise.util.AnnotationLiteral: java.lang.reflect.Method[] members> = v3;
v4 = v0.<jakarta.enterprise.util.AnnotationLiteral: java.lang.reflect.Method[] members>;
v5 = lengthof v4;
if v5 <= 0 goto label1;
v6 = virtualinvoke v0.<jakarta.enterprise.util.AnnotationLiteral: java.lang.Class annotationType()>();
v7 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v8 = virtualinvoke v6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(v7);
if v8 != 0 goto label1;
v9 = new java.lang.RuntimeException;
v10 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v11 = virtualinvoke v0.<jakarta.enterprise.util.AnnotationLiteral: java.lang.Class annotationType()>();
v12 = virtualinvoke v11.<java.lang.Class: java.lang.String getName()>();
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Class,java.lang.String)>(v10, v12) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 does not implement the annotation type with members \u0001");
specialinvoke v9.<java.lang.RuntimeException: void <init>(java.lang.String)>(v13);
throw v9;
label1:
v14 = v0.<jakarta.enterprise.util.AnnotationLiteral: java.lang.reflect.Method[] members>;
v15 = lengthof v14;
if v15 != 0 goto label2;
v16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);
v0.<jakarta.enterprise.util.AnnotationLiteral: java.lang.Integer cachedHashCode> = v16;
goto label3;
label2:
v0.<jakarta.enterprise.util.AnnotationLiteral: java.lang.Integer cachedHashCode> = null;
label3:
v17 = v0.<jakarta.enterprise.util.AnnotationLiteral: java.lang.reflect.Method[] members>;
return v17;
}
private static java.lang.Class getAnnotationLiteralSubclass(java.lang.Class)
{
java.lang.Class v0, v1, v4;
boolean v2, v3;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: java.lang.Class getSuperclass()>();
v2 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljakarta/enterprise/util/AnnotationLiteral;");
if v2 == 0 goto label1;
return v0;
label1:
v3 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Object;");
if v3 == 0 goto label2;
return null;
label2:
v4 = staticinvoke <jakarta.enterprise.util.AnnotationLiteral: java.lang.Class getAnnotationLiteralSubclass(java.lang.Class)>(v1);
return v4;
}
private static java.lang.Class getTypeParameter(java.lang.Class)
{
java.lang.reflect.Type v1, v6;
int v4;
java.lang.reflect.Type[] v3, v5;
java.lang.Class v0;
boolean v2;
v0 := @parameter0: java.lang.Class;
v1 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>();
v2 = v1 instanceof java.lang.reflect.ParameterizedType;
if v2 == 0 goto label1;
v3 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v4 = lengthof v3;
if v4 != 1 goto label1;
v5 = interfaceinvoke v1.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();
v6 = v5[0];
return v6;
label1:
return null;
}
public java.lang.Class annotationType()
{
jakarta.enterprise.util.AnnotationLiteral v0;
java.lang.RuntimeException v4, v9;
java.lang.Class v1, v10, v12, v2, v3, v5, v7, v8;
java.lang.String v11, v6;
v0 := @this: jakarta.enterprise.util.AnnotationLiteral;
v1 = v0.<jakarta.enterprise.util.AnnotationLiteral: java.lang.Class annotationType>;
if v1 != null goto label2;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = staticinvoke <jakarta.enterprise.util.AnnotationLiteral: java.lang.Class getAnnotationLiteralSubclass(java.lang.Class)>(v2);
if v3 != null goto label1;
v4 = new java.lang.RuntimeException;
v5 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Class)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 is not a subclass of AnnotationLiteral");
specialinvoke v4.<java.lang.RuntimeException: void <init>(java.lang.String)>(v6);
throw v4;
label1:
v7 = staticinvoke <jakarta.enterprise.util.AnnotationLiteral: java.lang.Class getTypeParameter(java.lang.Class)>(v3);
v0.<jakarta.enterprise.util.AnnotationLiteral: java.lang.Class annotationType> = v7;
v8 = v0.<jakarta.enterprise.util.AnnotationLiteral: java.lang.Class annotationType>;
if v8 != null goto label2;
v9 = new java.lang.RuntimeException;
v10 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v11 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.Class)>(v10) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001 does not specify the type parameter T of AnnotationLiteral<T>");
specialinvoke v9.<java.lang.RuntimeException: void <init>(java.lang.String)>(v11);
throw v9;
label2:
v12 = v0.<jakarta.enterprise.util.AnnotationLiteral: java.lang.Class annotationType>;
return v12;
}
public java.lang.String toString()
{
jakarta.enterprise.util.AnnotationLiteral v0;
java.lang.reflect.Method[] v13, v57, v7, v9;
java.lang.reflect.Method v10, v14;
boolean v16, v18, v20, v22, v24, v26, v28, v30, v32, v40, v49, v51, v54;
java.lang.StringBuilder v1, v12, v2, v5, v52, v53, v56, v60;
java.lang.String[] v34, v42;
int v33, v35, v36, v41, v43, v44, v58, v59, v6, v8;
java.lang.String v11, v17, v19, v21, v23, v25, v27, v29, v31, v37, v38, v39, v4, v46, v47, v48, v50, v55, v61;
java.lang.Class v3, v45;
java.lang.Object v15;
v0 := @this: jakarta.enterprise.util.AnnotationLiteral;
v1 = new java.lang.StringBuilder;
specialinvoke v1.<java.lang.StringBuilder: void <init>()>();
v2 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(64);
v3 = virtualinvoke v0.<jakarta.enterprise.util.AnnotationLiteral: java.lang.Class annotationType()>();
v4 = virtualinvoke v3.<java.lang.Class: java.lang.String getName()>();
v5 = virtualinvoke v2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v4);
virtualinvoke v5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);
v6 = 0;
label01:
v7 = specialinvoke v0.<jakarta.enterprise.util.AnnotationLiteral: java.lang.reflect.Method[] getMembers()>();
v8 = lengthof v7;
if v6 >= v8 goto label21;
v9 = specialinvoke v0.<jakarta.enterprise.util.AnnotationLiteral: java.lang.reflect.Method[] getMembers()>();
v10 = v9[v6];
v11 = virtualinvoke v10.<java.lang.reflect.Method: java.lang.String getName()>();
v12 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v11);
virtualinvoke v12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);
v13 = specialinvoke v0.<jakarta.enterprise.util.AnnotationLiteral: java.lang.reflect.Method[] getMembers()>();
v14 = v13[v6];
v15 = staticinvoke <jakarta.enterprise.util.AnnotationLiteral: java.lang.Object getMemberValue(java.lang.reflect.Method,java.lang.'annotation'.Annotation)>(v14, v0);
v16 = v15 instanceof boolean[];
if v16 == 0 goto label02;
v17 = staticinvoke <java.util.Arrays: java.lang.String toString(boolean[])>(v15);
specialinvoke v0.<jakarta.enterprise.util.AnnotationLiteral: void appendInBraces(java.lang.StringBuilder,java.lang.String)>(v1, v17);
goto label19;
label02:
v18 = v15 instanceof byte[];
if v18 == 0 goto label03;
v19 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>(v15);
specialinvoke v0.<jakarta.enterprise.util.AnnotationLiteral: void appendInBraces(java.lang.StringBuilder,java.lang.String)>(v1, v19);
goto label19;
label03:
v20 = v15 instanceof short[];
if v20 == 0 goto label04;
v21 = staticinvoke <java.util.Arrays: java.lang.String toString(short[])>(v15);
specialinvoke v0.<jakarta.enterprise.util.AnnotationLiteral: void appendInBraces(java.lang.StringBuilder,java.lang.String)>(v1, v21);
goto label19;
label04:
v22 = v15 instanceof int[];
if v22 == 0 goto label05;
v23 = staticinvoke <java.util.Arrays: java.lang.String toString(int[])>(v15);
specialinvoke v0.<jakarta.enterprise.util.AnnotationLiteral: void appendInBraces(java.lang.StringBuilder,java.lang.String)>(v1, v23);
goto label19;
label05:
v24 = v15 instanceof long[];
if v24 == 0 goto label06;
v25 = staticinvoke <java.util.Arrays: java.lang.String toString(long[])>(v15);
specialinvoke v0.<jakarta.enterprise.util.AnnotationLiteral: void appendInBraces(java.lang.StringBuilder,java.lang.String)>(v1, v25);
goto label19;
label06:
v26 = v15 instanceof float[];
if v26 == 0 goto label07;
v27 = staticinvoke <java.util.Arrays: java.lang.String toString(float[])>(v15);
specialinvoke v0.<jakarta.enterprise.util.AnnotationLiteral: void appendInBraces(java.lang.StringBuilder,java.lang.String)>(v1, v27);
goto label19;
label07:
v28 = v15 instanceof double[];
if v28 == 0 goto label08;
v29 = staticinvoke <java.util.Arrays: java.lang.String toString(double[])>(v15);
specialinvoke v0.<jakarta.enterprise.util.AnnotationLiteral: void appendInBraces(java.lang.StringBuilder,java.lang.String)>(v1, v29);
goto label19;
label08:
v30 = v15 instanceof char[];
if v30 == 0 goto label09;
v31 = staticinvoke <java.util.Arrays: java.lang.String toString(char[])>(v15);
specialinvoke v0.<jakarta.enterprise.util.AnnotationLiteral: void appendInBraces(java.lang.StringBuilder,java.lang.String)>(v1, v31);
goto label19;
label09:
v32 = v15 instanceof java.lang.String[];
if v32 == 0 goto label12;
v33 = lengthof v15;
v34 = newarray (java.lang.String)[v33];
v35 = 0;
label10:
v36 = lengthof v15;
if v35 >= v36 goto label11;
v37 = v15[v35];
v38 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v37) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\"\u0001\"");
v34[v35] = v38;
v35 = v35 + 1;
goto label10;
label11:
v39 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(v34);
specialinvoke v0.<jakarta.enterprise.util.AnnotationLiteral: void appendInBraces(java.lang.StringBuilder,java.lang.String)>(v1, v39);
goto label19;
label12:
v40 = v15 instanceof java.lang.Class[];
if v40 == 0 goto label15;
v41 = lengthof v15;
v42 = newarray (java.lang.String)[v41];
v43 = 0;
label13:
v44 = lengthof v15;
if v43 >= v44 goto label14;
v45 = v15[v43];
v46 = virtualinvoke v45.<java.lang.Class: java.lang.String getName()>();
v47 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v46) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001.class");
v42[v43] = v47;
v43 = v43 + 1;
goto label13;
label14:
v48 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(v42);
specialinvoke v0.<jakarta.enterprise.util.AnnotationLiteral: void appendInBraces(java.lang.StringBuilder,java.lang.String)>(v1, v48);
goto label19;
label15:
v49 = v15 instanceof java.lang.Object[];
if v49 == 0 goto label16;
v50 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(v15);
specialinvoke v0.<jakarta.enterprise.util.AnnotationLiteral: void appendInBraces(java.lang.StringBuilder,java.lang.String)>(v1, v50);
goto label19;
label16:
v51 = v15 instanceof java.lang.String;
if v51 == 0 goto label17;
v52 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);
v53 = virtualinvoke v52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v15);
virtualinvoke v53.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);
goto label19;
label17:
v54 = v15 instanceof java.lang.Class;
if v54 == 0 goto label18;
v55 = virtualinvoke v15.<java.lang.Class: java.lang.String getName()>();
v56 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v55);
virtualinvoke v56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class");
goto label19;
label18:
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(v15);
label19:
v57 = specialinvoke v0.<jakarta.enterprise.util.AnnotationLiteral: java.lang.reflect.Method[] getMembers()>();
v58 = lengthof v57;
v59 = v58 - 1;
if v6 >= v59 goto label20;
virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");
label20:
v6 = v6 + 1;
goto label01;
label21:
v60 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);
v61 = virtualinvoke v60.<java.lang.StringBuilder: java.lang.String toString()>();
return v61;
}
private void appendInBraces(java.lang.StringBuilder, java.lang.String)
{
jakarta.enterprise.util.AnnotationLiteral v0;
int v4, v5;
java.lang.StringBuilder v1, v3, v6;
java.lang.String v2;
v0 := @this: jakarta.enterprise.util.AnnotationLiteral;
v1 := @parameter0: java.lang.StringBuilder;
v2 := @parameter1: java.lang.String;
v3 = virtualinvoke v1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);
v4 = virtualinvoke v2.<java.lang.String: int length()>();
v5 = v4 - 1;
v6 = virtualinvoke v3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(v2, 1, v5);
virtualinvoke v6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);
return;
}
public boolean equals(java.lang.Object)
{
jakarta.enterprise.util.AnnotationLiteral v0;
java.lang.reflect.Method[] v6;
java.lang.reflect.Method v9;
boolean v12, v13, v14, v15, v16, v17, v18, v19, v2, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v5;
int v7, v8;
java.lang.Class v3, v4;
java.lang.Object v1, v10, v11;
v0 := @this: jakarta.enterprise.util.AnnotationLiteral;
v1 := @parameter0: java.lang.Object;
if v1 != v0 goto label01;
return 1;
label01:
if v1 != null goto label02;
return 0;
label02:
v2 = v1 instanceof java.lang.'annotation'.Annotation;
if v2 == 0 goto label15;
v3 = virtualinvoke v0.<jakarta.enterprise.util.AnnotationLiteral: java.lang.Class annotationType()>();
v4 = interfaceinvoke v1.<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>();
v5 = virtualinvoke v3.<java.lang.Object: boolean equals(java.lang.Object)>(v4);
if v5 == 0 goto label15;
v6 = specialinvoke v0.<jakarta.enterprise.util.AnnotationLiteral: java.lang.reflect.Method[] getMembers()>();
v7 = lengthof v6;
v8 = 0;
label03:
if v8 >= v7 goto label14;
v9 = v6[v8];
v10 = staticinvoke <jakarta.enterprise.util.AnnotationLiteral: java.lang.Object getMemberValue(java.lang.reflect.Method,java.lang.'annotation'.Annotation)>(v9, v0);
v11 = staticinvoke <jakarta.enterprise.util.AnnotationLiteral: java.lang.Object getMemberValue(java.lang.reflect.Method,java.lang.'annotation'.Annotation)>(v9, v1);
v12 = v10 instanceof byte[];
if v12 == 0 goto label04;
v13 = v11 instanceof byte[];
if v13 == 0 goto label04;
v14 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(v10, v11);
if v14 != 0 goto label13;
return 0;
label04:
v15 = v10 instanceof short[];
if v15 == 0 goto label05;
v16 = v11 instanceof short[];
if v16 == 0 goto label05;
v17 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>(v10, v11);
if v17 != 0 goto label13;
return 0;
label05:
v18 = v10 instanceof int[];
if v18 == 0 goto label06;
v19 = v11 instanceof int[];
if v19 == 0 goto label06;
v20 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>(v10, v11);
if v20 != 0 goto label13;
return 0;
label06:
v21 = v10 instanceof long[];
if v21 == 0 goto label07;
v22 = v11 instanceof long[];
if v22 == 0 goto label07;
v23 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>(v10, v11);
if v23 != 0 goto label13;
return 0;
label07:
v24 = v10 instanceof float[];
if v24 == 0 goto label08;
v25 = v11 instanceof float[];
if v25 == 0 goto label08;
v26 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>(v10, v11);
if v26 != 0 goto label13;
return 0;
label08:
v27 = v10 instanceof double[];
if v27 == 0 goto label09;
v28 = v11 instanceof double[];
if v28 == 0 goto label09;
v29 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>(v10, v11);
if v29 != 0 goto label13;
return 0;
label09:
v30 = v10 instanceof char[];
if v30 == 0 goto label10;
v31 = v11 instanceof char[];
if v31 == 0 goto label10;
v32 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>(v10, v11);
if v32 != 0 goto label13;
return 0;
label10:
v33 = v10 instanceof boolean[];
if v33 == 0 goto label11;
v34 = v11 instanceof boolean[];
if v34 == 0 goto label11;
v35 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>(v10, v11);
if v35 != 0 goto label13;
return 0;
label11:
v36 = v10 instanceof java.lang.Object[];
if v36 == 0 goto label12;
v37 = v11 instanceof java.lang.Object[];
if v37 == 0 goto label12;
v38 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>(v10, v11);
if v38 != 0 goto label13;
return 0;
label12:
v39 = virtualinvoke v10.<java.lang.Object: boolean equals(java.lang.Object)>(v11);
if v39 != 0 goto label13;
return 0;
label13:
v8 = v8 + 1;
goto label03;
label14:
return 1;
label15:
return 0;
}
public int hashCode()
{
jakarta.enterprise.util.AnnotationLiteral v0;
java.lang.Integer v2, v3;
java.lang.reflect.Method[] v1;
int v10, v11, v14, v23, v4, v5, v6, v7;
java.lang.String v9;
java.lang.reflect.Method v8;
boolean v13, v15, v16, v17, v18, v19, v20, v21, v22;
java.lang.Object v12;
v0 := @this: jakarta.enterprise.util.AnnotationLiteral;
v1 = specialinvoke v0.<jakarta.enterprise.util.AnnotationLiteral: java.lang.reflect.Method[] getMembers()>();
v2 = v0.<jakarta.enterprise.util.AnnotationLiteral: java.lang.Integer cachedHashCode>;
if v2 == null goto label01;
v3 = v0.<jakarta.enterprise.util.AnnotationLiteral: java.lang.Integer cachedHashCode>;
v4 = virtualinvoke v3.<java.lang.Integer: int intValue()>();
return v4;
label01:
v5 = 0;
v6 = lengthof v1;
v7 = 0;
label02:
if v7 >= v6 goto label13;
v8 = v1[v7];
v9 = virtualinvoke v8.<java.lang.reflect.Method: java.lang.String getName()>();
v10 = virtualinvoke v9.<java.lang.String: int hashCode()>();
v11 = 127 * v10;
v12 = staticinvoke <jakarta.enterprise.util.AnnotationLiteral: java.lang.Object getMemberValue(java.lang.reflect.Method,java.lang.'annotation'.Annotation)>(v8, v0);
v13 = v12 instanceof boolean[];
if v13 == 0 goto label03;
v14 = staticinvoke <java.util.Arrays: int hashCode(boolean[])>(v12);
goto label12;
label03:
v15 = v12 instanceof short[];
if v15 == 0 goto label04;
v14 = staticinvoke <java.util.Arrays: int hashCode(short[])>(v12);
goto label12;
label04:
v16 = v12 instanceof int[];
if v16 == 0 goto label05;
v14 = staticinvoke <java.util.Arrays: int hashCode(int[])>(v12);
goto label12;
label05:
v17 = v12 instanceof long[];
if v17 == 0 goto label06;
v14 = staticinvoke <java.util.Arrays: int hashCode(long[])>(v12);
goto label12;
label06:
v18 = v12 instanceof float[];
if v18 == 0 goto label07;
v14 = staticinvoke <java.util.Arrays: int hashCode(float[])>(v12);
goto label12;
label07:
v19 = v12 instanceof double[];
if v19 == 0 goto label08;
v14 = staticinvoke <java.util.Arrays: int hashCode(double[])>(v12);
goto label12;
label08:
v20 = v12 instanceof byte[];
if v20 == 0 goto label09;
v14 = staticinvoke <java.util.Arrays: int hashCode(byte[])>(v12);
goto label12;
label09:
v21 = v12 instanceof char[];
if v21 == 0 goto label10;
v14 = staticinvoke <java.util.Arrays: int hashCode(char[])>(v12);
goto label12;
label10:
v22 = v12 instanceof java.lang.Object[];
if v22 == 0 goto label11;
v14 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>(v12);
goto label12;
label11:
v14 = virtualinvoke v12.<java.lang.Object: int hashCode()>();
label12:
v23 = v11 ^ v14;
v5 = v5 + v23;
v7 = v7 + 1;
goto label02;
label13:
return v5;
}
private static java.lang.Object getMemberValue(java.lang.reflect.Method, java.lang.'annotation'.Annotation)
{
java.lang.IllegalArgumentException v3;
java.lang.'annotation'.Annotation v1;
java.lang.Class v4;
java.lang.Object v2;
java.lang.String v5, v6, v7;
java.lang.reflect.Method v0;
v0 := @parameter0: java.lang.reflect.Method;
v1 := @parameter1: java.lang.'annotation'.Annotation;
v2 = staticinvoke <jakarta.enterprise.util.AnnotationLiteral: java.lang.Object invoke(java.lang.reflect.Method,java.lang.Object)>(v0, v1);
if v2 != null goto label1;
v3 = new java.lang.IllegalArgumentException;
v4 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v5 = virtualinvoke v4.<java.lang.Class: java.lang.String getName()>();
v6 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.String getName()>();
v7 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v5, v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Annotation member value \u0001.\u0001 must not be null");
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v7);
throw v3;
label1:
return v2;
}
private static java.lang.Object invoke(java.lang.reflect.Method, java.lang.Object)
{
java.lang.Object[] v3;
java.lang.RuntimeException v6;
java.lang.Exception v5;
java.lang.Class v8;
java.lang.Object v1, v4;
java.lang.String v7, v9;
java.lang.reflect.Method v0;
boolean v2;
v0 := @parameter0: java.lang.reflect.Method;
v1 := @parameter1: java.lang.Object;
label1:
v2 = virtualinvoke v0.<java.lang.reflect.Method: boolean canAccess(java.lang.Object)>(v1);
if v2 != 0 goto label2;
staticinvoke <jakarta.enterprise.util.SecurityActions: void setAccessible(java.lang.reflect.Method)>(v0);
label2:
v3 = newarray (java.lang.Object)[0];
v4 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v1, v3);
label3:
return v4;
label4:
v5 := @caughtexception;
v6 = new java.lang.RuntimeException;
v7 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.String getName()>();
v8 = virtualinvoke v0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.Class)>(v7, v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Error checking value of member method \u0001 on \u0001");
specialinvoke v6.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(v9, v5);
throw v6;
catch java.lang.IllegalArgumentException from label1 to label3 with label4;
catch java.lang.IllegalAccessException from label1 to label3 with label4;
catch java.lang.reflect.InvocationTargetException from label1 to label3 with label4;
}
}