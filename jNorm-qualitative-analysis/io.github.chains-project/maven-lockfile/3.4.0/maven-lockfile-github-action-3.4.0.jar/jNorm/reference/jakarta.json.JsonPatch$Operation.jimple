public final enum class jakarta.json.JsonPatch$Operation extends java.lang.Enum
{
public static final enum jakarta.json.JsonPatch$Operation ADD;
public static final enum jakarta.json.JsonPatch$Operation REMOVE;
public static final enum jakarta.json.JsonPatch$Operation REPLACE;
public static final enum jakarta.json.JsonPatch$Operation MOVE;
public static final enum jakarta.json.JsonPatch$Operation COPY;
public static final enum jakarta.json.JsonPatch$Operation TEST;
private final java.lang.String operationName;
private static final jakarta.json.JsonPatch$Operation[] $VALUES;
public static jakarta.json.JsonPatch$Operation[] values()
{
java.lang.Object v1;
jakarta.json.JsonPatch$Operation[] v0;
v0 = <jakarta.json.JsonPatch$Operation: jakarta.json.JsonPatch$Operation[] $VALUES>;
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
return v1;
}
public static jakarta.json.JsonPatch$Operation valueOf(java.lang.String)
{
java.lang.String v0;
java.lang.Enum v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Ljakarta/json/JsonPatch$Operation;", v0);
return v1;
}
private void <init>(java.lang.String, int, java.lang.String)
{
int v2;
jakarta.json.JsonPatch$Operation v0;
java.lang.String v1, v3;
v0 := @this: jakarta.json.JsonPatch$Operation;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: int;
v3 := @parameter2: java.lang.String;
specialinvoke v0.<java.lang.Enum: void <init>(java.lang.String,int)>(v1, v2);
v0.<jakarta.json.JsonPatch$Operation: java.lang.String operationName> = v3;
return;
}
public java.lang.String operationName()
{
jakarta.json.JsonPatch$Operation v0;
java.lang.String v1;
v0 := @this: jakarta.json.JsonPatch$Operation;
v1 = v0.<jakarta.json.JsonPatch$Operation: java.lang.String operationName>;
return v1;
}
public static jakarta.json.JsonPatch$Operation fromOperationName(java.lang.String)
{
jakarta.json.JsonPatch$Operation[] v1;
int v2, v3;
jakarta.json.JsonPatch$Operation v4;
jakarta.json.JsonException v7;
java.lang.String v0, v5, v8;
boolean v6;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <jakarta.json.JsonPatch$Operation: jakarta.json.JsonPatch$Operation[] values()>();
v2 = lengthof v1;
v3 = 0;
label1:
if v3 >= v2 goto label3;
v4 = v1[v3];
v5 = virtualinvoke v4.<jakarta.json.JsonPatch$Operation: java.lang.String operationName()>();
v6 = virtualinvoke v5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v0);
if v6 == 0 goto label2;
return v4;
label2:
v3 = v3 + 1;
goto label1;
label3:
v7 = new jakarta.json.JsonException;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Illegal value for the operationName of the JSON patch operation: \u0001");
specialinvoke v7.<jakarta.json.JsonException: void <init>(java.lang.String)>(v8);
throw v7;
}
private static jakarta.json.JsonPatch$Operation[] $values()
{
jakarta.json.JsonPatch$Operation[] v0;
jakarta.json.JsonPatch$Operation v1, v2, v3, v4, v5, v6;
v0 = newarray (jakarta.json.JsonPatch$Operation)[6];
v1 = <jakarta.json.JsonPatch$Operation: jakarta.json.JsonPatch$Operation ADD>;
v0[0] = v1;
v2 = <jakarta.json.JsonPatch$Operation: jakarta.json.JsonPatch$Operation REMOVE>;
v0[1] = v2;
v3 = <jakarta.json.JsonPatch$Operation: jakarta.json.JsonPatch$Operation REPLACE>;
v0[2] = v3;
v4 = <jakarta.json.JsonPatch$Operation: jakarta.json.JsonPatch$Operation MOVE>;
v0[3] = v4;
v5 = <jakarta.json.JsonPatch$Operation: jakarta.json.JsonPatch$Operation COPY>;
v0[4] = v5;
v6 = <jakarta.json.JsonPatch$Operation: jakarta.json.JsonPatch$Operation TEST>;
v0[5] = v6;
return v0;
}
static void <clinit>()
{
jakarta.json.JsonPatch$Operation[] v6;
jakarta.json.JsonPatch$Operation v0, v1, v2, v3, v4, v5;
v0 = new jakarta.json.JsonPatch$Operation;
specialinvoke v0.<jakarta.json.JsonPatch$Operation: void <init>(java.lang.String,int,java.lang.String)>("ADD", 0, "add");
<jakarta.json.JsonPatch$Operation: jakarta.json.JsonPatch$Operation ADD> = v0;
v1 = new jakarta.json.JsonPatch$Operation;
specialinvoke v1.<jakarta.json.JsonPatch$Operation: void <init>(java.lang.String,int,java.lang.String)>("REMOVE", 1, "remove");
<jakarta.json.JsonPatch$Operation: jakarta.json.JsonPatch$Operation REMOVE> = v1;
v2 = new jakarta.json.JsonPatch$Operation;
specialinvoke v2.<jakarta.json.JsonPatch$Operation: void <init>(java.lang.String,int,java.lang.String)>("REPLACE", 2, "replace");
<jakarta.json.JsonPatch$Operation: jakarta.json.JsonPatch$Operation REPLACE> = v2;
v3 = new jakarta.json.JsonPatch$Operation;
specialinvoke v3.<jakarta.json.JsonPatch$Operation: void <init>(java.lang.String,int,java.lang.String)>("MOVE", 3, "move");
<jakarta.json.JsonPatch$Operation: jakarta.json.JsonPatch$Operation MOVE> = v3;
v4 = new jakarta.json.JsonPatch$Operation;
specialinvoke v4.<jakarta.json.JsonPatch$Operation: void <init>(java.lang.String,int,java.lang.String)>("COPY", 4, "copy");
<jakarta.json.JsonPatch$Operation: jakarta.json.JsonPatch$Operation COPY> = v4;
v5 = new jakarta.json.JsonPatch$Operation;
specialinvoke v5.<jakarta.json.JsonPatch$Operation: void <init>(java.lang.String,int,java.lang.String)>("TEST", 5, "test");
<jakarta.json.JsonPatch$Operation: jakarta.json.JsonPatch$Operation TEST> = v5;
v6 = staticinvoke <jakarta.json.JsonPatch$Operation: jakarta.json.JsonPatch$Operation[] $values()>();
<jakarta.json.JsonPatch$Operation: jakarta.json.JsonPatch$Operation[] $VALUES> = v6;
return;
}
}