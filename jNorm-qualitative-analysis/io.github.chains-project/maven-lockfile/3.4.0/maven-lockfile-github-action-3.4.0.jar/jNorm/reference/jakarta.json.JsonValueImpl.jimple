final class jakarta.json.JsonValueImpl extends java.lang.Object implements jakarta.json.JsonValue, java.io.Serializable
{
private static final long serialVersionUID;
private final jakarta.json.JsonValue$ValueType valueType;
void <init>(jakarta.json.JsonValue$ValueType)
{
jakarta.json.JsonValue$ValueType v1;
jakarta.json.JsonValueImpl v0;
v0 := @this: jakarta.json.JsonValueImpl;
v1 := @parameter0: jakarta.json.JsonValue$ValueType;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<jakarta.json.JsonValueImpl: jakarta.json.JsonValue$ValueType valueType> = v1;
return;
}
public jakarta.json.JsonValue$ValueType getValueType()
{
jakarta.json.JsonValue$ValueType v1;
jakarta.json.JsonValueImpl v0;
v0 := @this: jakarta.json.JsonValueImpl;
v1 = v0.<jakarta.json.JsonValueImpl: jakarta.json.JsonValue$ValueType valueType>;
return v1;
}
public boolean equals(java.lang.Object)
{
jakarta.json.JsonValueImpl v0;
jakarta.json.JsonValue$ValueType v3, v4;
java.lang.Object v1;
boolean v2, v5;
v0 := @this: jakarta.json.JsonValueImpl;
v1 := @parameter0: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
v2 = v1 instanceof jakarta.json.JsonValue;
if v2 == 0 goto label2;
v3 = virtualinvoke v0.<jakarta.json.JsonValueImpl: jakarta.json.JsonValue$ValueType getValueType()>();
v4 = interfaceinvoke v1.<jakarta.json.JsonValue: jakarta.json.JsonValue$ValueType getValueType()>();
v5 = virtualinvoke v3.<jakarta.json.JsonValue$ValueType: boolean equals(java.lang.Object)>(v4);
return v5;
label2:
return 0;
}
public int hashCode()
{
int v2;
jakarta.json.JsonValue$ValueType v1;
jakarta.json.JsonValueImpl v0;
v0 := @this: jakarta.json.JsonValueImpl;
v1 = v0.<jakarta.json.JsonValueImpl: jakarta.json.JsonValue$ValueType valueType>;
v2 = virtualinvoke v1.<jakarta.json.JsonValue$ValueType: int hashCode()>();
return v2;
}
public java.lang.String toString()
{
jakarta.json.JsonValueImpl v0;
jakarta.json.JsonValue$ValueType v1;
java.lang.String v2, v3;
v0 := @this: jakarta.json.JsonValueImpl;
v1 = v0.<jakarta.json.JsonValueImpl: jakarta.json.JsonValue$ValueType valueType>;
v2 = virtualinvoke v1.<jakarta.json.JsonValue$ValueType: java.lang.String name()>();
v3 = virtualinvoke v2.<java.lang.String: java.lang.String toLowerCase()>();
return v3;
}
}