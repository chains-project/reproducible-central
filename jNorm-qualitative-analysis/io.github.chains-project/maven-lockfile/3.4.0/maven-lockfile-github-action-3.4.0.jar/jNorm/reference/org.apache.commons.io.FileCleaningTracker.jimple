public class org.apache.commons.io.FileCleaningTracker extends java.lang.Object
{
java.lang.ref.ReferenceQueue q;
final java.util.Collection trackers;
final java.util.List deleteFailures;
volatile boolean exitWhenFinished;
java.lang.Thread reaper;
public void <init>()
{
java.util.HashSet v2;
org.apache.commons.io.FileCleaningTracker v0;
java.util.List v5;
java.util.Set v3;
java.lang.ref.ReferenceQueue v1;
java.util.ArrayList v4;
v0 := @this: org.apache.commons.io.FileCleaningTracker;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.lang.ref.ReferenceQueue;
specialinvoke v1.<java.lang.ref.ReferenceQueue: void <init>()>();
v0.<org.apache.commons.io.FileCleaningTracker: java.lang.ref.ReferenceQueue q> = v1;
v2 = new java.util.HashSet;
specialinvoke v2.<java.util.HashSet: void <init>()>();
v3 = staticinvoke <java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>(v2);
v0.<org.apache.commons.io.FileCleaningTracker: java.util.Collection trackers> = v3;
v4 = new java.util.ArrayList;
specialinvoke v4.<java.util.ArrayList: void <init>()>();
v5 = staticinvoke <java.util.Collections: java.util.List synchronizedList(java.util.List)>(v4);
v0.<org.apache.commons.io.FileCleaningTracker: java.util.List deleteFailures> = v5;
return;
}
public void track(java.io.File, java.lang.Object)
{
org.apache.commons.io.FileCleaningTracker v0;
java.lang.Object v2;
java.io.File v1;
v0 := @this: org.apache.commons.io.FileCleaningTracker;
v1 := @parameter0: java.io.File;
v2 := @parameter1: java.lang.Object;
virtualinvoke v0.<org.apache.commons.io.FileCleaningTracker: void track(java.io.File,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>(v1, v2, null);
return;
}
public void track(java.io.File, java.lang.Object, org.apache.commons.io.FileDeleteStrategy)
{
org.apache.commons.io.FileCleaningTracker v0;
org.apache.commons.io.FileDeleteStrategy v3;
java.lang.Object v2;
java.lang.String v4;
java.io.File v1;
v0 := @this: org.apache.commons.io.FileCleaningTracker;
v1 := @parameter0: java.io.File;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: org.apache.commons.io.FileDeleteStrategy;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "file");
v4 = virtualinvoke v1.<java.io.File: java.lang.String getPath()>();
specialinvoke v0.<org.apache.commons.io.FileCleaningTracker: void addTracker(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>(v4, v2, v3);
return;
}
public void track(java.lang.String, java.lang.Object)
{
org.apache.commons.io.FileCleaningTracker v0;
java.lang.Object v2;
java.lang.String v1;
v0 := @this: org.apache.commons.io.FileCleaningTracker;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object;
virtualinvoke v0.<org.apache.commons.io.FileCleaningTracker: void track(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>(v1, v2, null);
return;
}
public void track(java.lang.String, java.lang.Object, org.apache.commons.io.FileDeleteStrategy)
{
org.apache.commons.io.FileCleaningTracker v0;
org.apache.commons.io.FileDeleteStrategy v3;
java.lang.Object v2;
java.lang.String v1;
v0 := @this: org.apache.commons.io.FileCleaningTracker;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: org.apache.commons.io.FileDeleteStrategy;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "path");
specialinvoke v0.<org.apache.commons.io.FileCleaningTracker: void addTracker(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)>(v1, v2, v3);
return;
}
private synchronized void addTracker(java.lang.String, java.lang.Object, org.apache.commons.io.FileDeleteStrategy)
{
java.lang.IllegalStateException v5;
org.apache.commons.io.FileCleaningTracker v0;
java.util.Collection v9;
org.apache.commons.io.FileDeleteStrategy v3;
java.lang.ref.ReferenceQueue v11;
org.apache.commons.io.FileCleaningTracker$Tracker v10;
org.apache.commons.io.FileCleaningTracker$Reaper v7;
java.lang.Thread v6, v8;
java.lang.Object v2;
java.lang.String v1;
boolean v4;
v0 := @this: org.apache.commons.io.FileCleaningTracker;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: java.lang.Object;
v3 := @parameter2: org.apache.commons.io.FileDeleteStrategy;
v4 = v0.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished>;
if v4 == 0 goto label1;
v5 = new java.lang.IllegalStateException;
specialinvoke v5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No new trackers can be added once exitWhenFinished() is called");
throw v5;
label1:
v6 = v0.<org.apache.commons.io.FileCleaningTracker: java.lang.Thread reaper>;
if v6 != null goto label2;
v7 = new org.apache.commons.io.FileCleaningTracker$Reaper;
specialinvoke v7.<org.apache.commons.io.FileCleaningTracker$Reaper: void <init>(org.apache.commons.io.FileCleaningTracker)>(v0);
v0.<org.apache.commons.io.FileCleaningTracker: java.lang.Thread reaper> = v7;
v8 = v0.<org.apache.commons.io.FileCleaningTracker: java.lang.Thread reaper>;
virtualinvoke v8.<java.lang.Thread: void start()>();
label2:
v9 = v0.<org.apache.commons.io.FileCleaningTracker: java.util.Collection trackers>;
v10 = new org.apache.commons.io.FileCleaningTracker$Tracker;
v11 = v0.<org.apache.commons.io.FileCleaningTracker: java.lang.ref.ReferenceQueue q>;
specialinvoke v10.<org.apache.commons.io.FileCleaningTracker$Tracker: void <init>(java.lang.String,org.apache.commons.io.FileDeleteStrategy,java.lang.Object,java.lang.ref.ReferenceQueue)>(v1, v3, v2, v11);
interfaceinvoke v9.<java.util.Collection: boolean add(java.lang.Object)>(v10);
return;
}
public int getTrackCount()
{
int v2;
org.apache.commons.io.FileCleaningTracker v0;
java.util.Collection v1;
v0 := @this: org.apache.commons.io.FileCleaningTracker;
v1 = v0.<org.apache.commons.io.FileCleaningTracker: java.util.Collection trackers>;
v2 = interfaceinvoke v1.<java.util.Collection: int size()>();
return v2;
}
public java.util.List getDeleteFailures()
{
org.apache.commons.io.FileCleaningTracker v0;
java.util.List v1;
v0 := @this: org.apache.commons.io.FileCleaningTracker;
v1 = v0.<org.apache.commons.io.FileCleaningTracker: java.util.List deleteFailures>;
return v1;
}
public synchronized void exitWhenFinished()
{
java.lang.Throwable v4;
org.apache.commons.io.FileCleaningTracker v0;
java.lang.Thread v1, v2, v3;
v0 := @this: org.apache.commons.io.FileCleaningTracker;
v0.<org.apache.commons.io.FileCleaningTracker: boolean exitWhenFinished> = 1;
v1 = v0.<org.apache.commons.io.FileCleaningTracker: java.lang.Thread reaper>;
if v1 == null goto label4;
v2 = v0.<org.apache.commons.io.FileCleaningTracker: java.lang.Thread reaper>;
entermonitor v2;
label1:
v3 = v0.<org.apache.commons.io.FileCleaningTracker: java.lang.Thread reaper>;
virtualinvoke v3.<java.lang.Thread: void interrupt()>();
exitmonitor v2;
label2:
goto label4;
label3:
v4 := @caughtexception;
exitmonitor v2;
throw v4;
label4:
return;
catch java.lang.Throwable from label1 to label2 with label3;
}
}