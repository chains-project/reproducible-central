class org.apache.commons.io.StreamIterator extends java.lang.Object implements java.util.Iterator, java.io.Closeable
{
private final java.util.Iterator iterator;
private final java.util.stream.Stream stream;
public static java.util.Iterator iterator(java.util.stream.Stream)
{
org.apache.commons.io.StreamIterator v1;
java.util.stream.Stream v0;
java.util.Iterator v2;
v0 := @parameter0: java.util.stream.Stream;
v1 = new org.apache.commons.io.StreamIterator;
specialinvoke v1.<org.apache.commons.io.StreamIterator: void <init>(java.util.stream.Stream)>(v0);
v2 = v1.<org.apache.commons.io.StreamIterator: java.util.Iterator iterator>;
return v2;
}
private void <init>(java.util.stream.Stream)
{
org.apache.commons.io.StreamIterator v0;
java.util.stream.Stream v1;
java.util.Iterator v3;
java.lang.Object v2;
v0 := @this: org.apache.commons.io.StreamIterator;
v1 := @parameter0: java.util.stream.Stream;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "stream");
v0.<org.apache.commons.io.StreamIterator: java.util.stream.Stream stream> = v2;
v3 = interfaceinvoke v1.<java.util.stream.Stream: java.util.Iterator iterator()>();
v0.<org.apache.commons.io.StreamIterator: java.util.Iterator iterator> = v3;
return;
}
public boolean hasNext()
{
org.apache.commons.io.StreamIterator v0;
java.util.Iterator v1;
boolean v2;
v0 := @this: org.apache.commons.io.StreamIterator;
v1 = v0.<org.apache.commons.io.StreamIterator: java.util.Iterator iterator>;
v2 = interfaceinvoke v1.<java.util.Iterator: boolean hasNext()>();
if v2 != 0 goto label1;
virtualinvoke v0.<org.apache.commons.io.StreamIterator: void close()>();
label1:
return v2;
}
public java.lang.Object next()
{
org.apache.commons.io.StreamIterator v0;
java.lang.Object v2;
java.util.Iterator v1;
v0 := @this: org.apache.commons.io.StreamIterator;
v1 = v0.<org.apache.commons.io.StreamIterator: java.util.Iterator iterator>;
v2 = interfaceinvoke v1.<java.util.Iterator: java.lang.Object next()>();
if v2 != null goto label1;
virtualinvoke v0.<org.apache.commons.io.StreamIterator: void close()>();
label1:
return v2;
}
public void close()
{
org.apache.commons.io.StreamIterator v0;
java.util.stream.Stream v1;
v0 := @this: org.apache.commons.io.StreamIterator;
v1 = v0.<org.apache.commons.io.StreamIterator: java.util.stream.Stream stream>;
interfaceinvoke v1.<java.util.stream.Stream: void close()>();
return;
}
}