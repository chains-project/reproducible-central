public final class org.apache.commons.io.file.PathUtils extends java.lang.Object
{
public static final java.nio.file.CopyOption[] EMPTY_COPY_OPTIONS;
public static final org.apache.commons.io.file.DeleteOption[] EMPTY_DELETE_OPTION_ARRAY;
public static final java.nio.file.FileVisitOption[] EMPTY_FILE_VISIT_OPTION_ARRAY;
public static final java.nio.file.LinkOption[] EMPTY_LINK_OPTION_ARRAY;
public static final java.nio.file.LinkOption[] NOFOLLOW_LINK_OPTION_ARRAY;
public static final java.nio.file.OpenOption[] EMPTY_OPEN_OPTION_ARRAY;
public static final java.nio.file.Path[] EMPTY_PATH_ARRAY;
private static org.apache.commons.io.file.AccumulatorPathVisitor accumulate(java.nio.file.Path, int, java.nio.file.FileVisitOption[]) throws java.io.IOException
{
java.nio.file.FileVisitOption[] v2;
java.nio.file.FileVisitor v5;
int v1;
java.util.Set v4;
java.nio.file.Path v0;
org.apache.commons.io.file.AccumulatorPathVisitor v3;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: int;
v2 := @parameter2: java.nio.file.FileVisitOption[];
v3 = staticinvoke <org.apache.commons.io.file.AccumulatorPathVisitor: org.apache.commons.io.file.AccumulatorPathVisitor withLongCounters()>();
v4 = staticinvoke <org.apache.commons.io.file.PathUtils: java.util.Set toFileVisitOptionSet(java.nio.file.FileVisitOption[])>(v2);
v5 = staticinvoke <org.apache.commons.io.file.PathUtils: java.nio.file.FileVisitor visitFileTree(java.nio.file.FileVisitor,java.nio.file.Path,java.util.Set,int)>(v3, v0, v4, v1);
return v5;
}
public static org.apache.commons.io.file.Counters$PathCounters cleanDirectory(java.nio.file.Path) throws java.io.IOException
{
org.apache.commons.io.file.Counters$PathCounters v2;
java.nio.file.Path v0;
org.apache.commons.io.file.DeleteOption[] v1;
v0 := @parameter0: java.nio.file.Path;
v1 = <org.apache.commons.io.file.PathUtils: org.apache.commons.io.file.DeleteOption[] EMPTY_DELETE_OPTION_ARRAY>;
v2 = staticinvoke <org.apache.commons.io.file.PathUtils: org.apache.commons.io.file.Counters$PathCounters cleanDirectory(java.nio.file.Path,org.apache.commons.io.file.DeleteOption[])>(v0, v1);
return v2;
}
public static transient org.apache.commons.io.file.Counters$PathCounters cleanDirectory(java.nio.file.Path, org.apache.commons.io.file.DeleteOption[]) throws java.io.IOException
{
java.nio.file.FileVisitor v5;
org.apache.commons.io.file.Counters$PathCounters v3, v6;
org.apache.commons.io.file.CleaningPathVisitor v2;
java.lang.String[] v4;
java.nio.file.Path v0;
org.apache.commons.io.file.DeleteOption[] v1;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: org.apache.commons.io.file.DeleteOption[];
v2 = new org.apache.commons.io.file.CleaningPathVisitor;
v3 = staticinvoke <org.apache.commons.io.file.Counters: org.apache.commons.io.file.Counters$PathCounters longPathCounters()>();
v4 = newarray (java.lang.String)[0];
specialinvoke v2.<org.apache.commons.io.file.CleaningPathVisitor: void <init>(org.apache.commons.io.file.Counters$PathCounters,org.apache.commons.io.file.DeleteOption[],java.lang.String[])>(v3, v1, v4);
v5 = staticinvoke <org.apache.commons.io.file.PathUtils: java.nio.file.FileVisitor visitFileTree(java.nio.file.FileVisitor,java.nio.file.Path)>(v2, v0);
v6 = virtualinvoke v5.<org.apache.commons.io.file.CleaningPathVisitor: org.apache.commons.io.file.Counters$PathCounters getPathCounters()>();
return v6;
}
public static transient org.apache.commons.io.file.Counters$PathCounters copyDirectory(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption[]) throws java.io.IOException
{
java.nio.file.CopyOption[] v2;
java.nio.file.FileVisitor v6;
org.apache.commons.io.file.Counters$PathCounters v5, v7;
org.apache.commons.io.file.CopyDirectoryVisitor v4;
java.nio.file.Path v0, v1, v3;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: java.nio.file.Path;
v2 := @parameter2: java.nio.file.CopyOption[];
v3 = interfaceinvoke v0.<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>();
v4 = new org.apache.commons.io.file.CopyDirectoryVisitor;
v5 = staticinvoke <org.apache.commons.io.file.Counters: org.apache.commons.io.file.Counters$PathCounters longPathCounters()>();
specialinvoke v4.<org.apache.commons.io.file.CopyDirectoryVisitor: void <init>(org.apache.commons.io.file.Counters$PathCounters,java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>(v5, v3, v1, v2);
v6 = staticinvoke <org.apache.commons.io.file.PathUtils: java.nio.file.FileVisitor visitFileTree(java.nio.file.FileVisitor,java.nio.file.Path)>(v4, v3);
v7 = virtualinvoke v6.<org.apache.commons.io.file.CopyDirectoryVisitor: org.apache.commons.io.file.Counters$PathCounters getPathCounters()>();
return v7;
}
public static transient java.nio.file.Path copyFile(java.net.URL, java.nio.file.Path, java.nio.file.CopyOption[]) throws java.io.IOException
{
java.lang.Throwable v4;
java.nio.file.CopyOption[] v2;
java.net.URL v0;
java.nio.file.Path v1;
java.io.InputStream v3;
v0 := @parameter0: java.net.URL;
v1 := @parameter1: java.nio.file.Path;
v2 := @parameter2: java.nio.file.CopyOption[];
v3 = virtualinvoke v0.<java.net.URL: java.io.InputStream openStream()>();
label1:
staticinvoke <java.nio.file.Files: long copy(java.io.InputStream,java.nio.file.Path,java.nio.file.CopyOption[])>(v3, v1, v2);
label2:
if v3 == null goto label3;
virtualinvoke v3.<java.io.InputStream: void close()>();
label3:
return v1;
label4:
v4 := @caughtexception;
throw v4;
catch java.lang.Throwable from label1 to label2 with label4;
}
public static transient java.nio.file.Path copyFileToDirectory(java.nio.file.Path, java.nio.file.Path, java.nio.file.CopyOption[]) throws java.io.IOException
{
java.nio.file.CopyOption[] v2;
java.nio.file.Path v0, v1, v3, v4, v5;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: java.nio.file.Path;
v2 := @parameter2: java.nio.file.CopyOption[];
v3 = interfaceinvoke v0.<java.nio.file.Path: java.nio.file.Path getFileName()>();
v4 = interfaceinvoke v1.<java.nio.file.Path: java.nio.file.Path resolve(java.nio.file.Path)>(v3);
v5 = staticinvoke <java.nio.file.Files: java.nio.file.Path copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>(v0, v4, v2);
return v5;
}
public static transient java.nio.file.Path copyFileToDirectory(java.net.URL, java.nio.file.Path, java.nio.file.CopyOption[]) throws java.io.IOException
{
java.lang.Throwable v6;
java.nio.file.CopyOption[] v2;
java.net.URL v0;
java.lang.String v4;
java.nio.file.Path v1, v5;
java.io.InputStream v3;
v0 := @parameter0: java.net.URL;
v1 := @parameter1: java.nio.file.Path;
v2 := @parameter2: java.nio.file.CopyOption[];
v3 = virtualinvoke v0.<java.net.URL: java.io.InputStream openStream()>();
label1:
v4 = virtualinvoke v0.<java.net.URL: java.lang.String getFile()>();
v5 = interfaceinvoke v1.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>(v4);
staticinvoke <java.nio.file.Files: long copy(java.io.InputStream,java.nio.file.Path,java.nio.file.CopyOption[])>(v3, v5, v2);
label2:
if v3 == null goto label3;
virtualinvoke v3.<java.io.InputStream: void close()>();
label3:
return v1;
label4:
v6 := @caughtexception;
throw v6;
catch java.lang.Throwable from label1 to label2 with label4;
}
public static org.apache.commons.io.file.Counters$PathCounters countDirectory(java.nio.file.Path) throws java.io.IOException
{
org.apache.commons.io.file.CountingPathVisitor v1;
java.nio.file.FileVisitor v3;
org.apache.commons.io.file.Counters$PathCounters v2, v4;
java.nio.file.Path v0;
v0 := @parameter0: java.nio.file.Path;
v1 = new org.apache.commons.io.file.CountingPathVisitor;
v2 = staticinvoke <org.apache.commons.io.file.Counters: org.apache.commons.io.file.Counters$PathCounters longPathCounters()>();
specialinvoke v1.<org.apache.commons.io.file.CountingPathVisitor: void <init>(org.apache.commons.io.file.Counters$PathCounters)>(v2);
v3 = staticinvoke <org.apache.commons.io.file.PathUtils: java.nio.file.FileVisitor visitFileTree(java.nio.file.FileVisitor,java.nio.file.Path)>(v1, v0);
v4 = virtualinvoke v3.<org.apache.commons.io.file.CountingPathVisitor: org.apache.commons.io.file.Counters$PathCounters getPathCounters()>();
return v4;
}
public static transient java.nio.file.Path createParentDirectories(java.nio.file.Path, java.nio.file.attribute.FileAttribute[]) throws java.io.IOException
{
java.nio.file.attribute.FileAttribute[] v1;
java.nio.file.Path v0, v2, v3;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: java.nio.file.attribute.FileAttribute[];
v2 = interfaceinvoke v0.<java.nio.file.Path: java.nio.file.Path getParent()>();
if v2 != null goto label1;
return null;
label1:
v3 = staticinvoke <java.nio.file.Files: java.nio.file.Path createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>(v2, v1);
return v3;
}
public static java.nio.file.Path current()
{
java.lang.String[] v0;
java.nio.file.Path v1;
v0 = newarray (java.lang.String)[0];
v1 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>("", v0);
return v1;
}
public static org.apache.commons.io.file.Counters$PathCounters delete(java.nio.file.Path) throws java.io.IOException
{
org.apache.commons.io.file.Counters$PathCounters v2;
java.nio.file.Path v0;
org.apache.commons.io.file.DeleteOption[] v1;
v0 := @parameter0: java.nio.file.Path;
v1 = <org.apache.commons.io.file.PathUtils: org.apache.commons.io.file.DeleteOption[] EMPTY_DELETE_OPTION_ARRAY>;
v2 = staticinvoke <org.apache.commons.io.file.PathUtils: org.apache.commons.io.file.Counters$PathCounters delete(java.nio.file.Path,org.apache.commons.io.file.DeleteOption[])>(v0, v1);
return v2;
}
public static transient org.apache.commons.io.file.Counters$PathCounters delete(java.nio.file.Path, org.apache.commons.io.file.DeleteOption[]) throws java.io.IOException
{
java.nio.file.LinkOption v3;
java.nio.file.LinkOption[] v2;
org.apache.commons.io.file.Counters$PathCounters v5;
java.nio.file.Path v0;
org.apache.commons.io.file.DeleteOption[] v1;
boolean v4;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: org.apache.commons.io.file.DeleteOption[];
v2 = newarray (java.nio.file.LinkOption)[1];
v3 = <java.nio.file.LinkOption: java.nio.file.LinkOption NOFOLLOW_LINKS>;
v2[0] = v3;
v4 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>(v0, v2);
if v4 == 0 goto label1;
v5 = staticinvoke <org.apache.commons.io.file.PathUtils: org.apache.commons.io.file.Counters$PathCounters deleteDirectory(java.nio.file.Path,org.apache.commons.io.file.DeleteOption[])>(v0, v1);
goto label2;
label1:
v5 = staticinvoke <org.apache.commons.io.file.PathUtils: org.apache.commons.io.file.Counters$PathCounters deleteFile(java.nio.file.Path,org.apache.commons.io.file.DeleteOption[])>(v0, v1);
label2:
return v5;
}
public static transient org.apache.commons.io.file.Counters$PathCounters delete(java.nio.file.Path, java.nio.file.LinkOption[], org.apache.commons.io.file.DeleteOption[]) throws java.io.IOException
{
java.nio.file.LinkOption[] v1;
org.apache.commons.io.file.Counters$PathCounters v4;
java.nio.file.Path v0;
org.apache.commons.io.file.DeleteOption[] v2;
boolean v3;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: java.nio.file.LinkOption[];
v2 := @parameter2: org.apache.commons.io.file.DeleteOption[];
v3 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>(v0, v1);
if v3 == 0 goto label1;
v4 = staticinvoke <org.apache.commons.io.file.PathUtils: org.apache.commons.io.file.Counters$PathCounters deleteDirectory(java.nio.file.Path,java.nio.file.LinkOption[],org.apache.commons.io.file.DeleteOption[])>(v0, v1, v2);
goto label2;
label1:
v4 = staticinvoke <org.apache.commons.io.file.PathUtils: org.apache.commons.io.file.Counters$PathCounters deleteFile(java.nio.file.Path,java.nio.file.LinkOption[],org.apache.commons.io.file.DeleteOption[])>(v0, v1, v2);
label2:
return v4;
}
public static org.apache.commons.io.file.Counters$PathCounters deleteDirectory(java.nio.file.Path) throws java.io.IOException
{
org.apache.commons.io.file.Counters$PathCounters v2;
java.nio.file.Path v0;
org.apache.commons.io.file.DeleteOption[] v1;
v0 := @parameter0: java.nio.file.Path;
v1 = <org.apache.commons.io.file.PathUtils: org.apache.commons.io.file.DeleteOption[] EMPTY_DELETE_OPTION_ARRAY>;
v2 = staticinvoke <org.apache.commons.io.file.PathUtils: org.apache.commons.io.file.Counters$PathCounters deleteDirectory(java.nio.file.Path,org.apache.commons.io.file.DeleteOption[])>(v0, v1);
return v2;
}
public static transient org.apache.commons.io.file.Counters$PathCounters deleteDirectory(java.nio.file.Path, org.apache.commons.io.file.DeleteOption[]) throws java.io.IOException
{
java.nio.file.FileVisitor v6;
java.nio.file.LinkOption[] v4;
java.lang.String[] v5;
org.apache.commons.io.file.DeleteOption[] v1;
org.apache.commons.io.file.Counters$PathCounters v3, v7;
org.apache.commons.io.file.DeletingPathVisitor v2;
java.nio.file.Path v0;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: org.apache.commons.io.file.DeleteOption[];
v2 = new org.apache.commons.io.file.DeletingPathVisitor;
v3 = staticinvoke <org.apache.commons.io.file.Counters: org.apache.commons.io.file.Counters$PathCounters longPathCounters()>();
v4 = <org.apache.commons.io.file.PathUtils: java.nio.file.LinkOption[] NOFOLLOW_LINK_OPTION_ARRAY>;
v5 = newarray (java.lang.String)[0];
specialinvoke v2.<org.apache.commons.io.file.DeletingPathVisitor: void <init>(org.apache.commons.io.file.Counters$PathCounters,java.nio.file.LinkOption[],org.apache.commons.io.file.DeleteOption[],java.lang.String[])>(v3, v4, v1, v5);
v6 = staticinvoke <org.apache.commons.io.file.PathUtils: java.nio.file.FileVisitor visitFileTree(java.nio.file.FileVisitor,java.nio.file.Path)>(v2, v0);
v7 = virtualinvoke v6.<org.apache.commons.io.file.DeletingPathVisitor: org.apache.commons.io.file.Counters$PathCounters getPathCounters()>();
return v7;
}
public static transient org.apache.commons.io.file.Counters$PathCounters deleteDirectory(java.nio.file.Path, java.nio.file.LinkOption[], org.apache.commons.io.file.DeleteOption[]) throws java.io.IOException
{
java.nio.file.FileVisitor v6;
java.nio.file.LinkOption[] v1;
java.lang.String[] v5;
org.apache.commons.io.file.DeleteOption[] v2;
org.apache.commons.io.file.Counters$PathCounters v4, v7;
org.apache.commons.io.file.DeletingPathVisitor v3;
java.nio.file.Path v0;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: java.nio.file.LinkOption[];
v2 := @parameter2: org.apache.commons.io.file.DeleteOption[];
v3 = new org.apache.commons.io.file.DeletingPathVisitor;
v4 = staticinvoke <org.apache.commons.io.file.Counters: org.apache.commons.io.file.Counters$PathCounters longPathCounters()>();
v5 = newarray (java.lang.String)[0];
specialinvoke v3.<org.apache.commons.io.file.DeletingPathVisitor: void <init>(org.apache.commons.io.file.Counters$PathCounters,java.nio.file.LinkOption[],org.apache.commons.io.file.DeleteOption[],java.lang.String[])>(v4, v1, v2, v5);
v6 = staticinvoke <org.apache.commons.io.file.PathUtils: java.nio.file.FileVisitor visitFileTree(java.nio.file.FileVisitor,java.nio.file.Path)>(v3, v0);
v7 = virtualinvoke v6.<org.apache.commons.io.file.DeletingPathVisitor: org.apache.commons.io.file.Counters$PathCounters getPathCounters()>();
return v7;
}
public static org.apache.commons.io.file.Counters$PathCounters deleteFile(java.nio.file.Path) throws java.io.IOException
{
org.apache.commons.io.file.Counters$PathCounters v2;
java.nio.file.Path v0;
org.apache.commons.io.file.DeleteOption[] v1;
v0 := @parameter0: java.nio.file.Path;
v1 = <org.apache.commons.io.file.PathUtils: org.apache.commons.io.file.DeleteOption[] EMPTY_DELETE_OPTION_ARRAY>;
v2 = staticinvoke <org.apache.commons.io.file.PathUtils: org.apache.commons.io.file.Counters$PathCounters deleteFile(java.nio.file.Path,org.apache.commons.io.file.DeleteOption[])>(v0, v1);
return v2;
}
public static transient org.apache.commons.io.file.Counters$PathCounters deleteFile(java.nio.file.Path, org.apache.commons.io.file.DeleteOption[]) throws java.io.IOException
{
java.nio.file.LinkOption[] v2;
org.apache.commons.io.file.Counters$PathCounters v3;
java.nio.file.Path v0;
org.apache.commons.io.file.DeleteOption[] v1;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: org.apache.commons.io.file.DeleteOption[];
v2 = <org.apache.commons.io.file.PathUtils: java.nio.file.LinkOption[] NOFOLLOW_LINK_OPTION_ARRAY>;
v3 = staticinvoke <org.apache.commons.io.file.PathUtils: org.apache.commons.io.file.Counters$PathCounters deleteFile(java.nio.file.Path,java.nio.file.LinkOption[],org.apache.commons.io.file.DeleteOption[])>(v0, v2, v1);
return v3;
}
public static transient org.apache.commons.io.file.Counters$PathCounters deleteFile(java.nio.file.Path, java.nio.file.LinkOption[], org.apache.commons.io.file.DeleteOption[]) throws java.nio.file.NoSuchFileException, java.io.IOException
{
java.nio.file.NoSuchFileException v4;
java.nio.file.LinkOption[] v1;
long v10, v9;
org.apache.commons.io.file.DeleteOption[] v2;
org.apache.commons.io.file.Counters$Counter v13, v14;
org.apache.commons.io.file.Counters$PathCounters v6;
java.lang.String v5;
java.nio.file.Path v0;
boolean v11, v12, v3, v7, v8;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: java.nio.file.LinkOption[];
v2 := @parameter2: org.apache.commons.io.file.DeleteOption[];
v3 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>(v0, v1);
if v3 == 0 goto label1;
v4 = new java.nio.file.NoSuchFileException;
v5 = interfaceinvoke v0.<java.nio.file.Path: java.lang.String toString()>();
specialinvoke v4.<java.nio.file.NoSuchFileException: void <init>(java.lang.String)>(v5);
throw v4;
label1:
v6 = staticinvoke <org.apache.commons.io.file.Counters: org.apache.commons.io.file.Counters$PathCounters longPathCounters()>();
v7 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>(v0, v1);
if v7 == 0 goto label2;
v8 = staticinvoke <java.nio.file.Files: boolean isSymbolicLink(java.nio.file.Path)>(v0);
if v8 != 0 goto label2;
v9 = staticinvoke <java.nio.file.Files: long size(java.nio.file.Path)>(v0);
goto label3;
label2:
v9 = 0L;
label3:
v10 = v9;
v11 = staticinvoke <org.apache.commons.io.file.PathUtils: boolean overrideReadOnly(org.apache.commons.io.file.DeleteOption[])>(v2);
if v11 == 0 goto label4;
if v7 == 0 goto label4;
staticinvoke <org.apache.commons.io.file.PathUtils: java.nio.file.Path setReadOnly(java.nio.file.Path,boolean,java.nio.file.LinkOption[])>(v0, 0, v1);
label4:
v12 = staticinvoke <java.nio.file.Files: boolean deleteIfExists(java.nio.file.Path)>(v0);
if v12 == 0 goto label5;
v13 = interfaceinvoke v6.<org.apache.commons.io.file.Counters$PathCounters: org.apache.commons.io.file.Counters$Counter getFileCounter()>();
interfaceinvoke v13.<org.apache.commons.io.file.Counters$Counter: void increment()>();
v14 = interfaceinvoke v6.<org.apache.commons.io.file.Counters$PathCounters: org.apache.commons.io.file.Counters$Counter getByteCounter()>();
interfaceinvoke v14.<org.apache.commons.io.file.Counters$Counter: void add(long)>(v10);
label5:
return v6;
}
public static boolean directoryAndFileContentEquals(java.nio.file.Path, java.nio.file.Path) throws java.io.IOException
{
java.nio.file.FileVisitOption[] v4;
java.nio.file.LinkOption[] v2;
java.nio.file.OpenOption[] v3;
java.nio.file.Path v0, v1;
boolean v5;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: java.nio.file.Path;
v2 = <org.apache.commons.io.file.PathUtils: java.nio.file.LinkOption[] EMPTY_LINK_OPTION_ARRAY>;
v3 = <org.apache.commons.io.file.PathUtils: java.nio.file.OpenOption[] EMPTY_OPEN_OPTION_ARRAY>;
v4 = <org.apache.commons.io.file.PathUtils: java.nio.file.FileVisitOption[] EMPTY_FILE_VISIT_OPTION_ARRAY>;
v5 = staticinvoke <org.apache.commons.io.file.PathUtils: boolean directoryAndFileContentEquals(java.nio.file.Path,java.nio.file.Path,java.nio.file.LinkOption[],java.nio.file.OpenOption[],java.nio.file.FileVisitOption[])>(v0, v1, v2, v3, v4);
return v5;
}
public static boolean directoryAndFileContentEquals(java.nio.file.Path, java.nio.file.Path, java.nio.file.LinkOption[], java.nio.file.OpenOption[], java.nio.file.FileVisitOption[]) throws java.io.IOException
{
java.lang.IllegalStateException v18;
java.nio.file.FileVisitOption[] v4;
java.nio.file.OpenOption[] v3;
int v16, v17;
java.nio.file.Path v0, v1, v19, v20;
boolean v10, v14, v21, v6, v8;
java.nio.file.LinkOption[] v2, v5, v7;
java.util.Iterator v13;
java.util.List v11, v12;
org.apache.commons.io.file.PathUtils$RelativeSortedPaths v9;
java.lang.Object v15;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: java.nio.file.Path;
v2 := @parameter2: java.nio.file.LinkOption[];
v3 := @parameter3: java.nio.file.OpenOption[];
v4 := @parameter4: java.nio.file.FileVisitOption[];
if v0 != null goto label1;
if v1 != null goto label1;
return 1;
label1:
if v0 == null goto label2;
if v1 != null goto label3;
label2:
return 0;
label3:
v5 = newarray (java.nio.file.LinkOption)[0];
v6 = staticinvoke <java.nio.file.Files: boolean notExists(java.nio.file.Path,java.nio.file.LinkOption[])>(v0, v5);
if v6 == 0 goto label4;
v7 = newarray (java.nio.file.LinkOption)[0];
v8 = staticinvoke <java.nio.file.Files: boolean notExists(java.nio.file.Path,java.nio.file.LinkOption[])>(v1, v7);
if v8 == 0 goto label4;
return 1;
label4:
v9 = new org.apache.commons.io.file.PathUtils$RelativeSortedPaths;
specialinvoke v9.<org.apache.commons.io.file.PathUtils$RelativeSortedPaths: void <init>(java.nio.file.Path,java.nio.file.Path,int,java.nio.file.LinkOption[],java.nio.file.FileVisitOption[])>(v0, v1, 2147483647, v2, v4);
v10 = v9.<org.apache.commons.io.file.PathUtils$RelativeSortedPaths: boolean equals>;
if v10 != 0 goto label5;
return 0;
label5:
v11 = v9.<org.apache.commons.io.file.PathUtils$RelativeSortedPaths: java.util.List relativeFileList1>;
v12 = v9.<org.apache.commons.io.file.PathUtils$RelativeSortedPaths: java.util.List relativeFileList2>;
v13 = interfaceinvoke v11.<java.util.List: java.util.Iterator iterator()>();
label6:
v14 = interfaceinvoke v13.<java.util.Iterator: boolean hasNext()>();
if v14 == 0 goto label8;
v15 = interfaceinvoke v13.<java.util.Iterator: java.lang.Object next()>();
v16 = staticinvoke <java.util.Collections: int binarySearch(java.util.List,java.lang.Object)>(v12, v15);
v17 = (int) -1;
if v16 > v17 goto label7;
v18 = new java.lang.IllegalStateException;
specialinvoke v18.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unexpected mismatch.");
throw v18;
label7:
v19 = interfaceinvoke v0.<java.nio.file.Path: java.nio.file.Path resolve(java.nio.file.Path)>(v15);
v20 = interfaceinvoke v1.<java.nio.file.Path: java.nio.file.Path resolve(java.nio.file.Path)>(v15);
v21 = staticinvoke <org.apache.commons.io.file.PathUtils: boolean fileContentEquals(java.nio.file.Path,java.nio.file.Path,java.nio.file.LinkOption[],java.nio.file.OpenOption[])>(v19, v20, v2, v3);
if v21 != 0 goto label6;
return 0;
label8:
return 1;
}
public static boolean directoryContentEquals(java.nio.file.Path, java.nio.file.Path) throws java.io.IOException
{
java.nio.file.FileVisitOption[] v3;
java.nio.file.LinkOption[] v2;
java.nio.file.Path v0, v1;
boolean v4;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: java.nio.file.Path;
v2 = <org.apache.commons.io.file.PathUtils: java.nio.file.LinkOption[] EMPTY_LINK_OPTION_ARRAY>;
v3 = <org.apache.commons.io.file.PathUtils: java.nio.file.FileVisitOption[] EMPTY_FILE_VISIT_OPTION_ARRAY>;
v4 = staticinvoke <org.apache.commons.io.file.PathUtils: boolean directoryContentEquals(java.nio.file.Path,java.nio.file.Path,int,java.nio.file.LinkOption[],java.nio.file.FileVisitOption[])>(v0, v1, 2147483647, v2, v3);
return v4;
}
public static boolean directoryContentEquals(java.nio.file.Path, java.nio.file.Path, int, java.nio.file.LinkOption[], java.nio.file.FileVisitOption[]) throws java.io.IOException
{
java.nio.file.FileVisitOption[] v4;
java.nio.file.LinkOption[] v3;
org.apache.commons.io.file.PathUtils$RelativeSortedPaths v5;
int v2;
java.nio.file.Path v0, v1;
boolean v6;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: java.nio.file.Path;
v2 := @parameter2: int;
v3 := @parameter3: java.nio.file.LinkOption[];
v4 := @parameter4: java.nio.file.FileVisitOption[];
v5 = new org.apache.commons.io.file.PathUtils$RelativeSortedPaths;
specialinvoke v5.<org.apache.commons.io.file.PathUtils$RelativeSortedPaths: void <init>(java.nio.file.Path,java.nio.file.Path,int,java.nio.file.LinkOption[],java.nio.file.FileVisitOption[])>(v0, v1, v2, v3, v4);
v6 = v5.<org.apache.commons.io.file.PathUtils$RelativeSortedPaths: boolean equals>;
return v6;
}
public static boolean fileContentEquals(java.nio.file.Path, java.nio.file.Path) throws java.io.IOException
{
java.nio.file.LinkOption[] v2;
java.nio.file.OpenOption[] v3;
java.nio.file.Path v0, v1;
boolean v4;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: java.nio.file.Path;
v2 = <org.apache.commons.io.file.PathUtils: java.nio.file.LinkOption[] EMPTY_LINK_OPTION_ARRAY>;
v3 = <org.apache.commons.io.file.PathUtils: java.nio.file.OpenOption[] EMPTY_OPEN_OPTION_ARRAY>;
v4 = staticinvoke <org.apache.commons.io.file.PathUtils: boolean fileContentEquals(java.nio.file.Path,java.nio.file.Path,java.nio.file.LinkOption[],java.nio.file.OpenOption[])>(v0, v1, v2, v3);
return v4;
}
public static boolean fileContentEquals(java.nio.file.Path, java.nio.file.Path, java.nio.file.LinkOption[], java.nio.file.OpenOption[]) throws java.io.IOException
{
java.lang.Throwable v21, v22;
long v14, v15;
byte v16;
java.nio.file.OpenOption[] v3;
java.lang.String v10, v13;
java.nio.file.Path v0, v1, v4, v5;
boolean v11, v17, v20, v6, v7, v8;
java.nio.file.LinkOption[] v2;
java.io.IOException v12, v9;
java.io.InputStream v18, v19;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: java.nio.file.Path;
v2 := @parameter2: java.nio.file.LinkOption[];
v3 := @parameter3: java.nio.file.OpenOption[];
if v0 != null goto label01;
if v1 != null goto label01;
return 1;
label01:
if v0 == null goto label02;
if v1 != null goto label03;
label02:
return 0;
label03:
v4 = interfaceinvoke v0.<java.nio.file.Path: java.nio.file.Path normalize()>();
v5 = interfaceinvoke v1.<java.nio.file.Path: java.nio.file.Path normalize()>();
v6 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>(v4, v2);
v7 = staticinvoke <java.nio.file.Files: boolean exists(java.nio.file.Path,java.nio.file.LinkOption[])>(v5, v2);
if v6 == v7 goto label04;
return 0;
label04:
if v6 != 0 goto label05;
return 1;
label05:
v8 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>(v4, v2);
if v8 == 0 goto label06;
v9 = new java.io.IOException;
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.nio.file.Path)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Can\'t compare directories, only files: \u0001");
specialinvoke v9.<java.io.IOException: void <init>(java.lang.String)>(v10);
throw v9;
label06:
v11 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>(v5, v2);
if v11 == 0 goto label07;
v12 = new java.io.IOException;
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.nio.file.Path)>(v5) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Can\'t compare directories, only files: \u0001");
specialinvoke v12.<java.io.IOException: void <init>(java.lang.String)>(v13);
throw v12;
label07:
v14 = staticinvoke <java.nio.file.Files: long size(java.nio.file.Path)>(v4);
v15 = staticinvoke <java.nio.file.Files: long size(java.nio.file.Path)>(v5);
v16 = v14 cmp v15;
if v16 == 0 goto label08;
return 0;
label08:
v17 = interfaceinvoke v0.<java.nio.file.Path: boolean equals(java.lang.Object)>(v1);
if v17 == 0 goto label09;
return 1;
label09:
v18 = staticinvoke <java.nio.file.Files: java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])>(v4, v3);
label10:
v19 = staticinvoke <java.nio.file.Files: java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])>(v5, v3);
label11:
v20 = staticinvoke <org.apache.commons.io.IOUtils: boolean contentEquals(java.io.InputStream,java.io.InputStream)>(v18, v19);
label12:
if v19 == null goto label13;
virtualinvoke v19.<java.io.InputStream: void close()>();
label13:
if v18 == null goto label14;
virtualinvoke v18.<java.io.InputStream: void close()>();
label14:
return v20;
label15:
v21 := @caughtexception;
throw v21;
label16:
v22 := @caughtexception;
throw v22;
catch java.lang.Throwable from label11 to label12 with label15;
catch java.lang.Throwable from label10 to label13 with label16;
}
public static transient java.nio.file.Path[] filter(org.apache.commons.io.file.PathFilter, java.nio.file.Path[])
{
java.lang.Object[] v7;
java.nio.file.Path[] v1, v2, v6;
java.util.stream.Stream v3;
java.lang.Object v5;
java.util.stream.Collector v4;
org.apache.commons.io.file.PathFilter v0;
v0 := @parameter0: org.apache.commons.io.file.PathFilter;
v1 := @parameter1: java.nio.file.Path[];
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v0, "filter");
if v1 != null goto label1;
v2 = <org.apache.commons.io.file.PathUtils: java.nio.file.Path[] EMPTY_PATH_ARRAY>;
return v2;
label1:
v3 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object[])>(v1);
v4 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();
v5 = staticinvoke <org.apache.commons.io.file.PathUtils: java.lang.Object filterPaths(org.apache.commons.io.file.PathFilter,java.util.stream.Stream,java.util.stream.Collector)>(v0, v3, v4);
v6 = <org.apache.commons.io.file.PathUtils: java.nio.file.Path[] EMPTY_PATH_ARRAY>;
v7 = interfaceinvoke v5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v6);
return v7;
}
private static java.lang.Object filterPaths(org.apache.commons.io.file.PathFilter, java.util.stream.Stream, java.util.stream.Collector)
{
java.util.function.Predicate v5;
java.util.stream.Stream v1, v3, v6;
java.lang.Object v4, v7;
java.util.stream.Collector v2;
org.apache.commons.io.file.PathFilter v0;
v0 := @parameter0: org.apache.commons.io.file.PathFilter;
v1 := @parameter1: java.util.stream.Stream;
v2 := @parameter2: java.util.stream.Collector;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v0, "filter");
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v2, "collector");
if v1 != null goto label1;
v3 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream empty()>();
v4 = interfaceinvoke v3.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v2);
return v4;
label1:
v5 = staticinvoke <org.apache.commons.io.file.PathUtils$lambda_filterPaths_0__288: java.util.function.Predicate bootstrap$(org.apache.commons.io.file.PathFilter)>(v0);
v6 = interfaceinvoke v1.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(v5);
v7 = interfaceinvoke v6.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v2);
return v7;
}
public static java.util.List getAclEntryList(java.nio.file.Path) throws java.io.IOException
{
java.util.List v3;
java.nio.file.LinkOption[] v1;
java.nio.file.attribute.FileAttributeView v2;
java.nio.file.Path v0;
v0 := @parameter0: java.nio.file.Path;
v1 = newarray (java.nio.file.LinkOption)[0];
v2 = staticinvoke <java.nio.file.Files: java.nio.file.attribute.FileAttributeView getFileAttributeView(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>(v0, class "Ljava/nio/file/attribute/AclFileAttributeView;", v1);
if v2 != null goto label1;
v3 = null;
goto label2;
label1:
v3 = interfaceinvoke v2.<java.nio.file.attribute.AclFileAttributeView: java.util.List getAcl()>();
label2:
return v3;
}
public static transient boolean isDirectory(java.nio.file.Path, java.nio.file.LinkOption[])
{
java.nio.file.LinkOption[] v1;
java.nio.file.Path v0;
boolean v2, v3;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: java.nio.file.LinkOption[];
if v0 == null goto label1;
v2 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>(v0, v1);
if v2 == 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public static boolean isEmpty(java.nio.file.Path) throws java.io.IOException
{
java.nio.file.LinkOption[] v1;
java.nio.file.Path v0;
boolean v2, v3;
v0 := @parameter0: java.nio.file.Path;
v1 = newarray (java.nio.file.LinkOption)[0];
v2 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>(v0, v1);
if v2 == 0 goto label1;
v3 = staticinvoke <org.apache.commons.io.file.PathUtils: boolean isEmptyDirectory(java.nio.file.Path)>(v0);
goto label2;
label1:
v3 = staticinvoke <org.apache.commons.io.file.PathUtils: boolean isEmptyFile(java.nio.file.Path)>(v0);
label2:
return v3;
}
public static boolean isEmptyDirectory(java.nio.file.Path) throws java.io.IOException
{
java.lang.Throwable v6;
java.nio.file.DirectoryStream v1;
java.util.Iterator v2;
java.nio.file.Path v0;
boolean v3, v4, v5;
v0 := @parameter0: java.nio.file.Path;
v1 = staticinvoke <java.nio.file.Files: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path)>(v0);
label1:
v2 = interfaceinvoke v1.<java.nio.file.DirectoryStream: java.util.Iterator iterator()>();
v3 = interfaceinvoke v2.<java.util.Iterator: boolean hasNext()>();
if v3 != 0 goto label2;
v4 = 1;
goto label3;
label2:
v4 = 0;
label3:
v5 = v4;
label4:
interfaceinvoke v1.<java.nio.file.DirectoryStream: void close()>();
return v5;
label5:
v6 := @caughtexception;
throw v6;
catch java.lang.Throwable from label1 to label4 with label5;
}
public static boolean isEmptyFile(java.nio.file.Path) throws java.io.IOException
{
byte v2;
long v1;
java.nio.file.Path v0;
boolean v3;
v0 := @parameter0: java.nio.file.Path;
v1 = staticinvoke <java.nio.file.Files: long size(java.nio.file.Path)>(v0);
v2 = v1 cmp 0L;
if v2 > 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public static transient boolean isNewer(java.nio.file.Path, long, java.nio.file.LinkOption[]) throws java.io.IOException
{
java.nio.file.LinkOption[] v2, v3;
java.nio.file.attribute.FileTime v5;
long v1, v6;
byte v7;
java.nio.file.Path v0;
boolean v4, v8;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: long;
v2 := @parameter2: java.nio.file.LinkOption[];
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v0, "file");
v3 = newarray (java.nio.file.LinkOption)[0];
v4 = staticinvoke <java.nio.file.Files: boolean notExists(java.nio.file.Path,java.nio.file.LinkOption[])>(v0, v3);
if v4 == 0 goto label1;
return 0;
label1:
v5 = staticinvoke <java.nio.file.Files: java.nio.file.attribute.FileTime getLastModifiedTime(java.nio.file.Path,java.nio.file.LinkOption[])>(v0, v2);
v6 = virtualinvoke v5.<java.nio.file.attribute.FileTime: long toMillis()>();
v7 = v6 cmp v1;
if v7 <= 0 goto label2;
v8 = 1;
goto label3;
label2:
v8 = 0;
label3:
return v8;
}
public static transient boolean isRegularFile(java.nio.file.Path, java.nio.file.LinkOption[])
{
java.nio.file.LinkOption[] v1;
java.nio.file.Path v0;
boolean v2, v3;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: java.nio.file.LinkOption[];
if v0 == null goto label1;
v2 = staticinvoke <java.nio.file.Files: boolean isRegularFile(java.nio.file.Path,java.nio.file.LinkOption[])>(v0, v1);
if v2 == 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public static java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path, org.apache.commons.io.file.PathFilter) throws java.io.IOException
{
java.nio.file.DirectoryStream v3;
java.nio.file.Path v0;
org.apache.commons.io.file.PathFilter v1;
org.apache.commons.io.file.DirectoryStreamFilter v2;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: org.apache.commons.io.file.PathFilter;
v2 = new org.apache.commons.io.file.DirectoryStreamFilter;
specialinvoke v2.<org.apache.commons.io.file.DirectoryStreamFilter: void <init>(org.apache.commons.io.file.PathFilter)>(v1);
v3 = staticinvoke <java.nio.file.Files: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path,java.nio.file.DirectoryStream$Filter)>(v0, v2);
return v3;
}
private static transient boolean overrideReadOnly(org.apache.commons.io.file.DeleteOption[])
{
java.util.stream.Stream v1;
java.util.function.Predicate v2;
org.apache.commons.io.file.DeleteOption[] v0;
boolean v3;
v0 := @parameter0: org.apache.commons.io.file.DeleteOption[];
if v0 != null goto label1;
return 0;
label1:
v1 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object[])>(v0);
v2 = staticinvoke <org.apache.commons.io.file.PathUtils$lambda_overrideReadOnly_1__289: java.util.function.Predicate bootstrap$()>();
v3 = interfaceinvoke v1.<java.util.stream.Stream: boolean anyMatch(java.util.function.Predicate)>(v2);
return v3;
}
public static java.nio.file.attribute.BasicFileAttributes readBasicFileAttributes(java.nio.file.Path) throws java.io.IOException
{
java.nio.file.LinkOption[] v1;
java.nio.file.attribute.BasicFileAttributes v2;
java.nio.file.Path v0;
v0 := @parameter0: java.nio.file.Path;
v1 = newarray (java.nio.file.LinkOption)[0];
v2 = staticinvoke <java.nio.file.Files: java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>(v0, class "Ljava/nio/file/attribute/BasicFileAttributes;", v1);
return v2;
}
public static java.nio.file.attribute.BasicFileAttributes readBasicFileAttributesUnchecked(java.nio.file.Path)
{
java.io.UncheckedIOException v3;
java.io.IOException v2;
java.nio.file.attribute.BasicFileAttributes v1;
java.nio.file.Path v0;
v0 := @parameter0: java.nio.file.Path;
label1:
v1 = staticinvoke <org.apache.commons.io.file.PathUtils: java.nio.file.attribute.BasicFileAttributes readBasicFileAttributes(java.nio.file.Path)>(v0);
label2:
return v1;
label3:
v2 := @caughtexception;
v3 = new java.io.UncheckedIOException;
specialinvoke v3.<java.io.UncheckedIOException: void <init>(java.io.IOException)>(v2);
throw v3;
catch java.io.IOException from label1 to label2 with label3;
}
static java.util.List relativize(java.util.Collection, java.nio.file.Path, boolean, java.util.Comparator)
{
java.util.Collection v0;
java.util.function.Function v5;
java.util.stream.Stream v4, v6, v7;
java.lang.Object v9;
java.util.stream.Collector v8;
java.util.Comparator v3;
java.nio.file.Path v1;
boolean v2;
v0 := @parameter0: java.util.Collection;
v1 := @parameter1: java.nio.file.Path;
v2 := @parameter2: boolean;
v3 := @parameter3: java.util.Comparator;
v4 = interfaceinvoke v0.<java.util.Collection: java.util.stream.Stream stream()>();
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v5 = staticinvoke <org.apache.commons.io.file.PathUtils$relativize__290: java.util.function.Function bootstrap$(java.nio.file.Path)>(v1);
v6 = interfaceinvoke v4.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(v5);
if v2 == 0 goto label3;
if v3 != null goto label1;
v7 = interfaceinvoke v6.<java.util.stream.Stream: java.util.stream.Stream sorted()>();
goto label2;
label1:
v7 = interfaceinvoke v6.<java.util.stream.Stream: java.util.stream.Stream sorted(java.util.Comparator)>(v3);
label2:
v6 = v7;
label3:
v8 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();
v9 = interfaceinvoke v6.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v8);
return v9;
}
public static transient java.nio.file.Path setReadOnly(java.nio.file.Path, boolean, java.nio.file.LinkOption[]) throws java.io.IOException
{
java.lang.Object[] v18;
java.util.ArrayList v3;
java.lang.String v16, v19, v20;
java.nio.file.Path v0, v12;
boolean v1, v14;
java.nio.file.attribute.PosixFileAttributes v7;
java.nio.file.attribute.PosixFilePermission v10, v11, v9;
java.nio.file.LinkOption[] v2;
java.nio.file.attribute.FileAttributeView v4, v6;
java.util.Set v8;
java.io.IOException v13, v17, v5;
org.apache.commons.io.IOExceptionList v15;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: boolean;
v2 := @parameter2: java.nio.file.LinkOption[];
v3 = new java.util.ArrayList;
specialinvoke v3.<java.util.ArrayList: void <init>(int)>(2);
v4 = staticinvoke <java.nio.file.Files: java.nio.file.attribute.FileAttributeView getFileAttributeView(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>(v0, class "Ljava/nio/file/attribute/DosFileAttributeView;", v2);
if v4 == null goto label4;
label1:
interfaceinvoke v4.<java.nio.file.attribute.DosFileAttributeView: void setReadOnly(boolean)>(v1);
label2:
return v0;
label3:
v5 := @caughtexception;
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v5);
label4:
v6 = staticinvoke <java.nio.file.Files: java.nio.file.attribute.FileAttributeView getFileAttributeView(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>(v0, class "Ljava/nio/file/attribute/PosixFileAttributeView;", v2);
if v6 == null goto label8;
v7 = interfaceinvoke v6.<java.nio.file.attribute.PosixFileAttributeView: java.nio.file.attribute.PosixFileAttributes readAttributes()>();
v8 = interfaceinvoke v7.<java.nio.file.attribute.PosixFileAttributes: java.util.Set permissions()>();
v9 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission OWNER_WRITE>;
interfaceinvoke v8.<java.util.Set: boolean remove(java.lang.Object)>(v9);
v10 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission GROUP_WRITE>;
interfaceinvoke v8.<java.util.Set: boolean remove(java.lang.Object)>(v10);
v11 = <java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission OTHERS_WRITE>;
interfaceinvoke v8.<java.util.Set: boolean remove(java.lang.Object)>(v11);
label5:
v12 = staticinvoke <java.nio.file.Files: java.nio.file.Path setPosixFilePermissions(java.nio.file.Path,java.util.Set)>(v0, v8);
label6:
return v12;
label7:
v13 := @caughtexception;
interfaceinvoke v3.<java.util.List: boolean add(java.lang.Object)>(v13);
label8:
v14 = interfaceinvoke v3.<java.util.List: boolean isEmpty()>();
if v14 != 0 goto label9;
v15 = new org.apache.commons.io.IOExceptionList;
v16 = interfaceinvoke v0.<java.nio.file.Path: java.lang.String toString()>();
specialinvoke v15.<org.apache.commons.io.IOExceptionList: void <init>(java.lang.String,java.util.List)>(v16, v3);
throw v15;
label9:
v17 = new java.io.IOException;
v18 = newarray (java.lang.Object)[2];
v18[0] = v0;
v19 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(v2);
v18[1] = v19;
v20 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("No DosFileAttributeView or PosixFileAttributeView for \'%s\' (linkOptions=%s)", v18);
specialinvoke v17.<java.io.IOException: void <init>(java.lang.String)>(v20);
throw v17;
catch java.io.IOException from label1 to label2 with label3;
catch java.io.IOException from label5 to label6 with label7;
}
static transient java.util.Set toFileVisitOptionSet(java.nio.file.FileVisitOption[])
{
java.nio.file.FileVisitOption[] v0;
java.util.stream.Stream v1;
java.lang.Object v3;
java.util.stream.Collector v2;
v0 := @parameter0: java.nio.file.FileVisitOption[];
if v0 != null goto label1;
staticinvoke <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>(class "Ljava/nio/file/FileVisitOption;");
goto label2;
label1:
v1 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object[])>(v0);
v2 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toSet()>();
v3 = interfaceinvoke v1.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v2);
label2:
return v3;
}
public static java.nio.file.FileVisitor visitFileTree(java.nio.file.FileVisitor, java.nio.file.Path) throws java.io.IOException
{
java.nio.file.FileVisitor v0;
java.nio.file.Path v1;
v0 := @parameter0: java.nio.file.FileVisitor;
v1 := @parameter1: java.nio.file.Path;
staticinvoke <java.nio.file.Files: java.nio.file.Path walkFileTree(java.nio.file.Path,java.nio.file.FileVisitor)>(v1, v0);
return v0;
}
public static java.nio.file.FileVisitor visitFileTree(java.nio.file.FileVisitor, java.nio.file.Path, java.util.Set, int) throws java.io.IOException
{
java.nio.file.FileVisitor v0;
int v3;
java.util.Set v2;
java.nio.file.Path v1;
v0 := @parameter0: java.nio.file.FileVisitor;
v1 := @parameter1: java.nio.file.Path;
v2 := @parameter2: java.util.Set;
v3 := @parameter3: int;
staticinvoke <java.nio.file.Files: java.nio.file.Path walkFileTree(java.nio.file.Path,java.util.Set,int,java.nio.file.FileVisitor)>(v1, v2, v3, v0);
return v0;
}
public static transient java.nio.file.FileVisitor visitFileTree(java.nio.file.FileVisitor, java.lang.String, java.lang.String[]) throws java.io.IOException
{
java.nio.file.FileVisitor v0, v4;
java.lang.String[] v2;
java.lang.String v1;
java.nio.file.Path v3;
v0 := @parameter0: java.nio.file.FileVisitor;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.String[];
v3 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>(v1, v2);
v4 = staticinvoke <org.apache.commons.io.file.PathUtils: java.nio.file.FileVisitor visitFileTree(java.nio.file.FileVisitor,java.nio.file.Path)>(v0, v3);
return v4;
}
public static java.nio.file.FileVisitor visitFileTree(java.nio.file.FileVisitor, java.net.URI) throws java.io.IOException
{
java.nio.file.FileVisitor v0, v3;
java.net.URI v1;
java.nio.file.Path v2;
v0 := @parameter0: java.nio.file.FileVisitor;
v1 := @parameter1: java.net.URI;
v2 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.net.URI)>(v1);
v3 = staticinvoke <org.apache.commons.io.file.PathUtils: java.nio.file.FileVisitor visitFileTree(java.nio.file.FileVisitor,java.nio.file.Path)>(v0, v2);
return v3;
}
public static transient java.util.stream.Stream walk(java.nio.file.Path, org.apache.commons.io.file.PathFilter, int, boolean, java.nio.file.FileVisitOption[]) throws java.io.IOException
{
java.nio.file.FileVisitOption[] v4;
java.util.function.Predicate v6;
java.util.stream.Stream v5, v7;
int v2;
java.nio.file.Path v0;
org.apache.commons.io.file.PathFilter v1;
boolean v3;
v0 := @parameter0: java.nio.file.Path;
v1 := @parameter1: org.apache.commons.io.file.PathFilter;
v2 := @parameter2: int;
v3 := @parameter3: boolean;
v4 := @parameter4: java.nio.file.FileVisitOption[];
v5 = staticinvoke <java.nio.file.Files: java.util.stream.Stream walk(java.nio.file.Path,int,java.nio.file.FileVisitOption[])>(v0, v2, v4);
v6 = staticinvoke <org.apache.commons.io.file.PathUtils$lambda_walk_2__291: java.util.function.Predicate bootstrap$(org.apache.commons.io.file.PathFilter,boolean)>(v1, v3);
v7 = interfaceinvoke v5.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(v6);
return v7;
}
private void <init>()
{
org.apache.commons.io.file.PathUtils v0;
v0 := @this: org.apache.commons.io.file.PathUtils;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void <clinit>()
{
java.nio.file.CopyOption[] v0;
java.nio.file.FileVisitOption[] v2;
java.nio.file.LinkOption[] v3, v4;
java.nio.file.Path[] v7;
org.apache.commons.io.file.DeleteOption[] v1;
java.nio.file.LinkOption v5;
java.nio.file.OpenOption[] v6;
v0 = newarray (java.nio.file.CopyOption)[0];
<org.apache.commons.io.file.PathUtils: java.nio.file.CopyOption[] EMPTY_COPY_OPTIONS> = v0;
v1 = newarray (org.apache.commons.io.file.DeleteOption)[0];
<org.apache.commons.io.file.PathUtils: org.apache.commons.io.file.DeleteOption[] EMPTY_DELETE_OPTION_ARRAY> = v1;
v2 = newarray (java.nio.file.FileVisitOption)[0];
<org.apache.commons.io.file.PathUtils: java.nio.file.FileVisitOption[] EMPTY_FILE_VISIT_OPTION_ARRAY> = v2;
v3 = newarray (java.nio.file.LinkOption)[0];
<org.apache.commons.io.file.PathUtils: java.nio.file.LinkOption[] EMPTY_LINK_OPTION_ARRAY> = v3;
v4 = newarray (java.nio.file.LinkOption)[1];
v5 = <java.nio.file.LinkOption: java.nio.file.LinkOption NOFOLLOW_LINKS>;
v4[0] = v5;
<org.apache.commons.io.file.PathUtils: java.nio.file.LinkOption[] NOFOLLOW_LINK_OPTION_ARRAY> = v4;
v6 = newarray (java.nio.file.OpenOption)[0];
<org.apache.commons.io.file.PathUtils: java.nio.file.OpenOption[] EMPTY_OPEN_OPTION_ARRAY> = v6;
v7 = newarray (java.nio.file.Path)[0];
<org.apache.commons.io.file.PathUtils: java.nio.file.Path[] EMPTY_PATH_ARRAY> = v7;
return;
}
}