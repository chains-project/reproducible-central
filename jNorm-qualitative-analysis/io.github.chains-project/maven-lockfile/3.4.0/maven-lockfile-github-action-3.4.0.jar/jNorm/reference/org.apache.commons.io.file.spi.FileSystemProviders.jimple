public class org.apache.commons.io.file.spi.FileSystemProviders extends java.lang.Object
{
private static final org.apache.commons.io.file.spi.FileSystemProviders INSTALLED;
private final java.util.List providers;
public static java.nio.file.spi.FileSystemProvider getFileSystemProvider(java.nio.file.Path)
{
java.lang.Object v1;
java.nio.file.FileSystem v2;
java.nio.file.spi.FileSystemProvider v3;
java.nio.file.Path v0;
v0 := @parameter0: java.nio.file.Path;
v1 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v0, "path");
v2 = interfaceinvoke v1.<java.nio.file.Path: java.nio.file.FileSystem getFileSystem()>();
v3 = virtualinvoke v2.<java.nio.file.FileSystem: java.nio.file.spi.FileSystemProvider provider()>();
return v3;
}
public static org.apache.commons.io.file.spi.FileSystemProviders installed()
{
org.apache.commons.io.file.spi.FileSystemProviders v0;
v0 = <org.apache.commons.io.file.spi.FileSystemProviders: org.apache.commons.io.file.spi.FileSystemProviders INSTALLED>;
return v0;
}
private void <init>(java.util.List)
{
java.util.List v1;
org.apache.commons.io.file.spi.FileSystemProviders v0;
v0 := @this: org.apache.commons.io.file.spi.FileSystemProviders;
v1 := @parameter0: java.util.List;
specialinvoke v0.<java.lang.Object: void <init>()>();
v0.<org.apache.commons.io.file.spi.FileSystemProviders: java.util.List providers> = v1;
return;
}
public java.nio.file.spi.FileSystemProvider getFileSystemProvider(java.lang.String)
{
java.util.Iterator v7;
org.apache.commons.io.file.spi.FileSystemProviders v0;
java.nio.file.FileSystem v3;
java.nio.file.spi.FileSystemProvider v4;
java.util.List v5, v6;
java.lang.Object v9;
java.lang.String v1, v10;
boolean v11, v2, v8;
v0 := @this: org.apache.commons.io.file.spi.FileSystemProviders;
v1 := @parameter0: java.lang.String;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "scheme");
v2 = virtualinvoke v1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("file");
if v2 == 0 goto label1;
v3 = staticinvoke <java.nio.file.FileSystems: java.nio.file.FileSystem getDefault()>();
v4 = virtualinvoke v3.<java.nio.file.FileSystem: java.nio.file.spi.FileSystemProvider provider()>();
return v4;
label1:
v5 = v0.<org.apache.commons.io.file.spi.FileSystemProviders: java.util.List providers>;
if v5 == null goto label3;
v6 = v0.<org.apache.commons.io.file.spi.FileSystemProviders: java.util.List providers>;
v7 = interfaceinvoke v6.<java.util.List: java.util.Iterator iterator()>();
label2:
v8 = interfaceinvoke v7.<java.util.Iterator: boolean hasNext()>();
if v8 == 0 goto label3;
v9 = interfaceinvoke v7.<java.util.Iterator: java.lang.Object next()>();
v10 = virtualinvoke v9.<java.nio.file.spi.FileSystemProvider: java.lang.String getScheme()>();
v11 = virtualinvoke v10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(v1);
if v11 == 0 goto label2;
return v9;
label3:
return null;
}
public java.nio.file.spi.FileSystemProvider getFileSystemProvider(java.net.URI)
{
org.apache.commons.io.file.spi.FileSystemProviders v0;
java.lang.Object v2;
java.lang.String v3;
java.net.URI v1;
java.nio.file.spi.FileSystemProvider v4;
v0 := @this: org.apache.commons.io.file.spi.FileSystemProviders;
v1 := @parameter0: java.net.URI;
v2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "uri");
v3 = virtualinvoke v2.<java.net.URI: java.lang.String getScheme()>();
v4 = virtualinvoke v0.<org.apache.commons.io.file.spi.FileSystemProviders: java.nio.file.spi.FileSystemProvider getFileSystemProvider(java.lang.String)>(v3);
return v4;
}
public java.nio.file.spi.FileSystemProvider getFileSystemProvider(java.net.URL)
{
org.apache.commons.io.file.spi.FileSystemProviders v0;
java.net.URL v1;
java.lang.Object v2;
java.lang.String v3;
java.nio.file.spi.FileSystemProvider v4;
v0 := @this: org.apache.commons.io.file.spi.FileSystemProviders;
v1 := @parameter0: java.net.URL;
v2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "url");
v3 = virtualinvoke v2.<java.net.URL: java.lang.String getProtocol()>();
v4 = virtualinvoke v0.<org.apache.commons.io.file.spi.FileSystemProviders: java.nio.file.spi.FileSystemProvider getFileSystemProvider(java.lang.String)>(v3);
return v4;
}
static void <clinit>()
{
java.util.List v1;
org.apache.commons.io.file.spi.FileSystemProviders v0;
v0 = new org.apache.commons.io.file.spi.FileSystemProviders;
v1 = staticinvoke <java.nio.file.spi.FileSystemProvider: java.util.List installedProviders()>();
specialinvoke v0.<org.apache.commons.io.file.spi.FileSystemProviders: void <init>(java.util.List)>(v1);
<org.apache.commons.io.file.spi.FileSystemProviders: org.apache.commons.io.file.spi.FileSystemProviders INSTALLED> = v0;
return;
}
}