public class org.apache.commons.io.filefilter.FileFilterUtils extends java.lang.Object
{
private static final org.apache.commons.io.filefilter.IOFileFilter cvsFilter;
private static final org.apache.commons.io.filefilter.IOFileFilter svnFilter;
public static org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(java.util.Date)
{
org.apache.commons.io.filefilter.AgeFileFilter v1;
java.util.Date v0;
v0 := @parameter0: java.util.Date;
v1 = new org.apache.commons.io.filefilter.AgeFileFilter;
specialinvoke v1.<org.apache.commons.io.filefilter.AgeFileFilter: void <init>(java.util.Date)>(v0);
return v1;
}
public static org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(java.util.Date, boolean)
{
org.apache.commons.io.filefilter.AgeFileFilter v2;
java.util.Date v0;
boolean v1;
v0 := @parameter0: java.util.Date;
v1 := @parameter1: boolean;
v2 = new org.apache.commons.io.filefilter.AgeFileFilter;
specialinvoke v2.<org.apache.commons.io.filefilter.AgeFileFilter: void <init>(java.util.Date,boolean)>(v0, v1);
return v2;
}
public static org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(java.io.File)
{
org.apache.commons.io.filefilter.AgeFileFilter v1;
java.io.File v0;
v0 := @parameter0: java.io.File;
v1 = new org.apache.commons.io.filefilter.AgeFileFilter;
specialinvoke v1.<org.apache.commons.io.filefilter.AgeFileFilter: void <init>(java.io.File)>(v0);
return v1;
}
public static org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(java.io.File, boolean)
{
org.apache.commons.io.filefilter.AgeFileFilter v2;
java.io.File v0;
boolean v1;
v0 := @parameter0: java.io.File;
v1 := @parameter1: boolean;
v2 = new org.apache.commons.io.filefilter.AgeFileFilter;
specialinvoke v2.<org.apache.commons.io.filefilter.AgeFileFilter: void <init>(java.io.File,boolean)>(v0, v1);
return v2;
}
public static org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(long)
{
long v0;
org.apache.commons.io.filefilter.AgeFileFilter v1;
v0 := @parameter0: long;
v1 = new org.apache.commons.io.filefilter.AgeFileFilter;
specialinvoke v1.<org.apache.commons.io.filefilter.AgeFileFilter: void <init>(long)>(v0);
return v1;
}
public static org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(long, boolean)
{
long v0;
org.apache.commons.io.filefilter.AgeFileFilter v2;
boolean v1;
v0 := @parameter0: long;
v1 := @parameter1: boolean;
v2 = new org.apache.commons.io.filefilter.AgeFileFilter;
specialinvoke v2.<org.apache.commons.io.filefilter.AgeFileFilter: void <init>(long,boolean)>(v0, v1);
return v2;
}
public static transient org.apache.commons.io.filefilter.IOFileFilter and(org.apache.commons.io.filefilter.IOFileFilter[])
{
java.util.List v2;
org.apache.commons.io.filefilter.AndFileFilter v1;
org.apache.commons.io.filefilter.IOFileFilter[] v0;
v0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter[];
v1 = new org.apache.commons.io.filefilter.AndFileFilter;
v2 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.util.List toList(org.apache.commons.io.filefilter.IOFileFilter[])>(v0);
specialinvoke v1.<org.apache.commons.io.filefilter.AndFileFilter: void <init>(java.util.List)>(v2);
return v1;
}
public static org.apache.commons.io.filefilter.IOFileFilter andFileFilter(org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.filefilter.IOFileFilter)
{
org.apache.commons.io.filefilter.IOFileFilter v0, v1;
org.apache.commons.io.filefilter.AndFileFilter v2;
v0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;
v1 := @parameter1: org.apache.commons.io.filefilter.IOFileFilter;
v2 = new org.apache.commons.io.filefilter.AndFileFilter;
specialinvoke v2.<org.apache.commons.io.filefilter.AndFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(v0, v1);
return v2;
}
public static org.apache.commons.io.filefilter.IOFileFilter asFileFilter(java.io.FileFilter)
{
org.apache.commons.io.filefilter.DelegateFileFilter v1;
java.io.FileFilter v0;
v0 := @parameter0: java.io.FileFilter;
v1 = new org.apache.commons.io.filefilter.DelegateFileFilter;
specialinvoke v1.<org.apache.commons.io.filefilter.DelegateFileFilter: void <init>(java.io.FileFilter)>(v0);
return v1;
}
public static org.apache.commons.io.filefilter.IOFileFilter asFileFilter(java.io.FilenameFilter)
{
java.io.FilenameFilter v0;
org.apache.commons.io.filefilter.DelegateFileFilter v1;
v0 := @parameter0: java.io.FilenameFilter;
v1 = new org.apache.commons.io.filefilter.DelegateFileFilter;
specialinvoke v1.<org.apache.commons.io.filefilter.DelegateFileFilter: void <init>(java.io.FilenameFilter)>(v0);
return v1;
}
public static org.apache.commons.io.filefilter.IOFileFilter directoryFileFilter()
{
org.apache.commons.io.filefilter.IOFileFilter v0;
v0 = <org.apache.commons.io.filefilter.DirectoryFileFilter: org.apache.commons.io.filefilter.IOFileFilter DIRECTORY>;
return v0;
}
public static org.apache.commons.io.filefilter.IOFileFilter falseFileFilter()
{
org.apache.commons.io.filefilter.IOFileFilter v0;
v0 = <org.apache.commons.io.filefilter.FalseFileFilter: org.apache.commons.io.filefilter.IOFileFilter FALSE>;
return v0;
}
public static org.apache.commons.io.filefilter.IOFileFilter fileFileFilter()
{
org.apache.commons.io.filefilter.IOFileFilter v0;
v0 = <org.apache.commons.io.filefilter.FileFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;
return v0;
}
public static transient java.io.File[] filter(org.apache.commons.io.filefilter.IOFileFilter, java.io.File[])
{
org.apache.commons.io.filefilter.IOFileFilter v0;
java.lang.Object[] v8;
java.lang.IllegalArgumentException v2;
java.util.stream.Stream v4;
java.lang.Object v6;
java.util.stream.Collector v5;
java.io.File[] v1, v3, v7;
v0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;
v1 := @parameter1: java.io.File[];
if v0 != null goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("file filter is null");
throw v2;
label1:
if v1 != null goto label2;
v3 = <org.apache.commons.io.FileUtils: java.io.File[] EMPTY_FILE_ARRAY>;
return v3;
label2:
v4 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object[])>(v1);
v5 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();
v6 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.lang.Object filterFiles(org.apache.commons.io.filefilter.IOFileFilter,java.util.stream.Stream,java.util.stream.Collector)>(v0, v4, v5);
v7 = <org.apache.commons.io.FileUtils: java.io.File[] EMPTY_FILE_ARRAY>;
v8 = interfaceinvoke v6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v7);
return v8;
}
private static java.lang.Object filterFiles(org.apache.commons.io.filefilter.IOFileFilter, java.util.stream.Stream, java.util.stream.Collector)
{
org.apache.commons.io.filefilter.IOFileFilter v0;
java.util.function.Predicate v6;
java.lang.IllegalArgumentException v3;
java.util.stream.Stream v1, v4, v7;
java.lang.Object v5, v8;
java.util.stream.Collector v2;
v0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;
v1 := @parameter1: java.util.stream.Stream;
v2 := @parameter2: java.util.stream.Collector;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v2, "collector");
if v0 != null goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("file filter is null");
throw v3;
label1:
if v1 != null goto label2;
v4 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream empty()>();
v5 = interfaceinvoke v4.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v2);
return v5;
label2:
virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v6 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils$accept__287: java.util.function.Predicate bootstrap$(org.apache.commons.io.filefilter.IOFileFilter)>(v0);
v7 = interfaceinvoke v1.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(v6);
v8 = interfaceinvoke v7.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>(v2);
return v8;
}
public static java.io.File[] filter(org.apache.commons.io.filefilter.IOFileFilter, java.lang.Iterable)
{
org.apache.commons.io.filefilter.IOFileFilter v0;
java.util.List v2;
java.lang.Object[] v4;
java.io.File[] v3;
java.lang.Iterable v1;
v0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;
v1 := @parameter1: java.lang.Iterable;
v2 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.util.List filterList(org.apache.commons.io.filefilter.IOFileFilter,java.lang.Iterable)>(v0, v1);
v3 = <org.apache.commons.io.FileUtils: java.io.File[] EMPTY_FILE_ARRAY>;
v4 = interfaceinvoke v2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v3);
return v4;
}
public static transient java.util.List filterList(org.apache.commons.io.filefilter.IOFileFilter, java.io.File[])
{
org.apache.commons.io.filefilter.IOFileFilter v0;
java.util.List v3;
java.io.File[] v1, v2;
v0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;
v1 := @parameter1: java.io.File[];
v2 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.io.File[] filter(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])>(v0, v1);
v3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v2);
return v3;
}
public static java.util.List filterList(org.apache.commons.io.filefilter.IOFileFilter, java.lang.Iterable)
{
org.apache.commons.io.filefilter.IOFileFilter v0;
java.util.List v2;
java.util.stream.Stream v4;
java.lang.Object v6;
java.util.stream.Collector v5;
java.util.Spliterator v3;
java.lang.Iterable v1;
v0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;
v1 := @parameter1: java.lang.Iterable;
if v1 != null goto label1;
v2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v2;
label1:
v3 = interfaceinvoke v1.<java.lang.Iterable: java.util.Spliterator spliterator()>();
v4 = staticinvoke <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>(v3, 0);
v5 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();
v6 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.lang.Object filterFiles(org.apache.commons.io.filefilter.IOFileFilter,java.util.stream.Stream,java.util.stream.Collector)>(v0, v4, v5);
return v6;
}
public static transient java.util.Set filterSet(org.apache.commons.io.filefilter.IOFileFilter, java.io.File[])
{
java.util.HashSet v2;
org.apache.commons.io.filefilter.IOFileFilter v0;
java.util.List v4;
java.io.File[] v1, v3;
v0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;
v1 := @parameter1: java.io.File[];
v2 = new java.util.HashSet;
v3 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.io.File[] filter(org.apache.commons.io.filefilter.IOFileFilter,java.io.File[])>(v0, v1);
v4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(v3);
specialinvoke v2.<java.util.HashSet: void <init>(java.util.Collection)>(v4);
return v2;
}
public static java.util.Set filterSet(org.apache.commons.io.filefilter.IOFileFilter, java.lang.Iterable)
{
org.apache.commons.io.filefilter.IOFileFilter v0;
java.util.stream.Stream v4;
java.util.Set v2;
java.lang.Object v6;
java.util.stream.Collector v5;
java.util.Spliterator v3;
java.lang.Iterable v1;
v0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;
v1 := @parameter1: java.lang.Iterable;
if v1 != null goto label1;
v2 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
return v2;
label1:
v3 = interfaceinvoke v1.<java.lang.Iterable: java.util.Spliterator spliterator()>();
v4 = staticinvoke <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>(v3, 0);
v5 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toSet()>();
v6 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.lang.Object filterFiles(org.apache.commons.io.filefilter.IOFileFilter,java.util.stream.Stream,java.util.stream.Collector)>(v0, v4, v5);
return v6;
}
public static org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(byte[])
{
byte[] v0;
org.apache.commons.io.filefilter.MagicNumberFileFilter v1;
v0 := @parameter0: byte[];
v1 = new org.apache.commons.io.filefilter.MagicNumberFileFilter;
specialinvoke v1.<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(byte[])>(v0);
return v1;
}
public static org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(byte[], long)
{
byte[] v0;
long v1;
org.apache.commons.io.filefilter.MagicNumberFileFilter v2;
v0 := @parameter0: byte[];
v1 := @parameter1: long;
v2 = new org.apache.commons.io.filefilter.MagicNumberFileFilter;
specialinvoke v2.<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(byte[],long)>(v0, v1);
return v2;
}
public static org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(java.lang.String)
{
java.lang.String v0;
org.apache.commons.io.filefilter.MagicNumberFileFilter v1;
v0 := @parameter0: java.lang.String;
v1 = new org.apache.commons.io.filefilter.MagicNumberFileFilter;
specialinvoke v1.<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(java.lang.String)>(v0);
return v1;
}
public static org.apache.commons.io.filefilter.IOFileFilter magicNumberFileFilter(java.lang.String, long)
{
long v1;
java.lang.String v0;
org.apache.commons.io.filefilter.MagicNumberFileFilter v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: long;
v2 = new org.apache.commons.io.filefilter.MagicNumberFileFilter;
specialinvoke v2.<org.apache.commons.io.filefilter.MagicNumberFileFilter: void <init>(java.lang.String,long)>(v0, v1);
return v2;
}
public static org.apache.commons.io.filefilter.IOFileFilter makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)
{
org.apache.commons.io.filefilter.IOFileFilter v0, v1, v3;
org.apache.commons.io.filefilter.IOFileFilter[] v2;
v0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;
if v0 != null goto label1;
v1 = <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter cvsFilter>;
goto label2;
label1:
v2 = newarray (org.apache.commons.io.filefilter.IOFileFilter)[2];
v2[0] = v0;
v3 = <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter cvsFilter>;
v2[1] = v3;
v1 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter and(org.apache.commons.io.filefilter.IOFileFilter[])>(v2);
label2:
return v1;
}
public static org.apache.commons.io.filefilter.IOFileFilter makeDirectoryOnly(org.apache.commons.io.filefilter.IOFileFilter)
{
org.apache.commons.io.filefilter.IOFileFilter v0, v1, v2, v3;
v0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;
if v0 != null goto label1;
v1 = <org.apache.commons.io.filefilter.DirectoryFileFilter: org.apache.commons.io.filefilter.IOFileFilter DIRECTORY>;
return v1;
label1:
v2 = <org.apache.commons.io.filefilter.DirectoryFileFilter: org.apache.commons.io.filefilter.IOFileFilter DIRECTORY>;
v3 = interfaceinvoke v2.<org.apache.commons.io.filefilter.IOFileFilter: org.apache.commons.io.filefilter.IOFileFilter and(org.apache.commons.io.filefilter.IOFileFilter)>(v0);
return v3;
}
public static org.apache.commons.io.filefilter.IOFileFilter makeFileOnly(org.apache.commons.io.filefilter.IOFileFilter)
{
org.apache.commons.io.filefilter.IOFileFilter v0, v1, v2, v3;
v0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;
if v0 != null goto label1;
v1 = <org.apache.commons.io.filefilter.FileFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;
return v1;
label1:
v2 = <org.apache.commons.io.filefilter.FileFileFilter: org.apache.commons.io.filefilter.IOFileFilter INSTANCE>;
v3 = interfaceinvoke v2.<org.apache.commons.io.filefilter.IOFileFilter: org.apache.commons.io.filefilter.IOFileFilter and(org.apache.commons.io.filefilter.IOFileFilter)>(v0);
return v3;
}
public static org.apache.commons.io.filefilter.IOFileFilter makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)
{
org.apache.commons.io.filefilter.IOFileFilter v0, v1, v3;
org.apache.commons.io.filefilter.IOFileFilter[] v2;
v0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;
if v0 != null goto label1;
v1 = <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter svnFilter>;
goto label2;
label1:
v2 = newarray (org.apache.commons.io.filefilter.IOFileFilter)[2];
v2[0] = v0;
v3 = <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter svnFilter>;
v2[1] = v3;
v1 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter and(org.apache.commons.io.filefilter.IOFileFilter[])>(v2);
label2:
return v1;
}
public static org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String)
{
java.lang.String v0;
org.apache.commons.io.filefilter.NameFileFilter v1;
v0 := @parameter0: java.lang.String;
v1 = new org.apache.commons.io.filefilter.NameFileFilter;
specialinvoke v1.<org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.lang.String)>(v0);
return v1;
}
public static org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String, org.apache.commons.io.IOCase)
{
java.lang.String v0;
org.apache.commons.io.IOCase v1;
org.apache.commons.io.filefilter.NameFileFilter v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: org.apache.commons.io.IOCase;
v2 = new org.apache.commons.io.filefilter.NameFileFilter;
specialinvoke v2.<org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.lang.String,org.apache.commons.io.IOCase)>(v0, v1);
return v2;
}
public static org.apache.commons.io.filefilter.IOFileFilter notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)
{
org.apache.commons.io.filefilter.IOFileFilter v0, v1;
v0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;
v1 = interfaceinvoke v0.<org.apache.commons.io.filefilter.IOFileFilter: org.apache.commons.io.filefilter.IOFileFilter negate()>();
return v1;
}
public static transient org.apache.commons.io.filefilter.IOFileFilter or(org.apache.commons.io.filefilter.IOFileFilter[])
{
java.util.List v2;
org.apache.commons.io.filefilter.OrFileFilter v1;
org.apache.commons.io.filefilter.IOFileFilter[] v0;
v0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter[];
v1 = new org.apache.commons.io.filefilter.OrFileFilter;
v2 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: java.util.List toList(org.apache.commons.io.filefilter.IOFileFilter[])>(v0);
specialinvoke v1.<org.apache.commons.io.filefilter.OrFileFilter: void <init>(java.util.List)>(v2);
return v1;
}
public static org.apache.commons.io.filefilter.IOFileFilter orFileFilter(org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.filefilter.IOFileFilter)
{
org.apache.commons.io.filefilter.IOFileFilter v0, v1;
org.apache.commons.io.filefilter.OrFileFilter v2;
v0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;
v1 := @parameter1: org.apache.commons.io.filefilter.IOFileFilter;
v2 = new org.apache.commons.io.filefilter.OrFileFilter;
specialinvoke v2.<org.apache.commons.io.filefilter.OrFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(v0, v1);
return v2;
}
public static org.apache.commons.io.filefilter.IOFileFilter prefixFileFilter(java.lang.String)
{
java.lang.String v0;
org.apache.commons.io.filefilter.PrefixFileFilter v1;
v0 := @parameter0: java.lang.String;
v1 = new org.apache.commons.io.filefilter.PrefixFileFilter;
specialinvoke v1.<org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.lang.String)>(v0);
return v1;
}
public static org.apache.commons.io.filefilter.IOFileFilter prefixFileFilter(java.lang.String, org.apache.commons.io.IOCase)
{
java.lang.String v0;
org.apache.commons.io.IOCase v1;
org.apache.commons.io.filefilter.PrefixFileFilter v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: org.apache.commons.io.IOCase;
v2 = new org.apache.commons.io.filefilter.PrefixFileFilter;
specialinvoke v2.<org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.lang.String,org.apache.commons.io.IOCase)>(v0, v1);
return v2;
}
public static org.apache.commons.io.filefilter.IOFileFilter sizeFileFilter(long)
{
long v0;
org.apache.commons.io.filefilter.SizeFileFilter v1;
v0 := @parameter0: long;
v1 = new org.apache.commons.io.filefilter.SizeFileFilter;
specialinvoke v1.<org.apache.commons.io.filefilter.SizeFileFilter: void <init>(long)>(v0);
return v1;
}
public static org.apache.commons.io.filefilter.IOFileFilter sizeFileFilter(long, boolean)
{
long v0;
boolean v1;
org.apache.commons.io.filefilter.SizeFileFilter v2;
v0 := @parameter0: long;
v1 := @parameter1: boolean;
v2 = new org.apache.commons.io.filefilter.SizeFileFilter;
specialinvoke v2.<org.apache.commons.io.filefilter.SizeFileFilter: void <init>(long,boolean)>(v0, v1);
return v2;
}
public static org.apache.commons.io.filefilter.IOFileFilter sizeRangeFileFilter(long, long)
{
org.apache.commons.io.filefilter.IOFileFilter v5;
long v0, v1, v4;
org.apache.commons.io.filefilter.SizeFileFilter v2, v3;
v0 := @parameter0: long;
v1 := @parameter1: long;
v2 = new org.apache.commons.io.filefilter.SizeFileFilter;
specialinvoke v2.<org.apache.commons.io.filefilter.SizeFileFilter: void <init>(long,boolean)>(v0, 1);
v3 = new org.apache.commons.io.filefilter.SizeFileFilter;
v4 = v1 + 1L;
specialinvoke v3.<org.apache.commons.io.filefilter.SizeFileFilter: void <init>(long,boolean)>(v4, 0);
v5 = interfaceinvoke v2.<org.apache.commons.io.filefilter.IOFileFilter: org.apache.commons.io.filefilter.IOFileFilter and(org.apache.commons.io.filefilter.IOFileFilter)>(v3);
return v5;
}
public static org.apache.commons.io.filefilter.IOFileFilter suffixFileFilter(java.lang.String)
{
java.lang.String v0;
org.apache.commons.io.filefilter.SuffixFileFilter v1;
v0 := @parameter0: java.lang.String;
v1 = new org.apache.commons.io.filefilter.SuffixFileFilter;
specialinvoke v1.<org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.lang.String)>(v0);
return v1;
}
public static org.apache.commons.io.filefilter.IOFileFilter suffixFileFilter(java.lang.String, org.apache.commons.io.IOCase)
{
java.lang.String v0;
org.apache.commons.io.IOCase v1;
org.apache.commons.io.filefilter.SuffixFileFilter v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: org.apache.commons.io.IOCase;
v2 = new org.apache.commons.io.filefilter.SuffixFileFilter;
specialinvoke v2.<org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.lang.String,org.apache.commons.io.IOCase)>(v0, v1);
return v2;
}
public static transient java.util.List toList(org.apache.commons.io.filefilter.IOFileFilter[])
{
org.apache.commons.io.filefilter.IOFileFilter v6, v9;
java.lang.IllegalArgumentException v1, v7;
java.util.ArrayList v2;
int v3, v4, v5;
java.lang.String v8;
org.apache.commons.io.filefilter.IOFileFilter[] v0;
v0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter[];
if v0 != null goto label1;
v1 = new java.lang.IllegalArgumentException;
specialinvoke v1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The filters must not be null");
throw v1;
label1:
v2 = new java.util.ArrayList;
v3 = lengthof v0;
specialinvoke v2.<java.util.ArrayList: void <init>(int)>(v3);
v4 = 0;
label2:
v5 = lengthof v0;
if v4 >= v5 goto label4;
v6 = v0[v4];
if v6 != null goto label3;
v7 = new java.lang.IllegalArgumentException;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v4) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("The filter[\u0001] is null");
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v8);
throw v7;
label3:
v9 = v0[v4];
interfaceinvoke v2.<java.util.List: boolean add(java.lang.Object)>(v9);
v4 = v4 + 1;
goto label2;
label4:
return v2;
}
public static org.apache.commons.io.filefilter.IOFileFilter trueFileFilter()
{
org.apache.commons.io.filefilter.IOFileFilter v0;
v0 = <org.apache.commons.io.filefilter.TrueFileFilter: org.apache.commons.io.filefilter.IOFileFilter TRUE>;
return v0;
}
public void <init>()
{
org.apache.commons.io.filefilter.FileFilterUtils v0;
v0 := @this: org.apache.commons.io.filefilter.FileFilterUtils;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void <clinit>()
{
org.apache.commons.io.filefilter.IOFileFilter v1, v2, v3, v4, v6, v7, v8, v9;
org.apache.commons.io.filefilter.IOFileFilter[] v0, v5;
v0 = newarray (org.apache.commons.io.filefilter.IOFileFilter)[2];
v1 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter directoryFileFilter()>();
v0[0] = v1;
v2 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String)>("CVS");
v0[1] = v2;
v3 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter and(org.apache.commons.io.filefilter.IOFileFilter[])>(v0);
v4 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>(v3);
<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter cvsFilter> = v4;
v5 = newarray (org.apache.commons.io.filefilter.IOFileFilter)[2];
v6 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter directoryFileFilter()>();
v5[0] = v6;
v7 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String)>(".svn");
v5[1] = v7;
v8 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter and(org.apache.commons.io.filefilter.IOFileFilter[])>(v5);
v9 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>(v8);
<org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter svnFilter> = v9;
return;
}
}