public interface  org.apache.commons.io.filefilter.IOFileFilter extends java.lang.Object implements java.io.FileFilter, java.io.FilenameFilter, org.apache.commons.io.file.PathFilter
{
public static final java.lang.String[] EMPTY_STRING_ARRAY;
public abstract boolean accept(java.io.File);
public abstract boolean accept(java.io.File, java.lang.String);
public java.nio.file.FileVisitResult accept(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)
{
org.apache.commons.io.filefilter.IOFileFilter v0;
java.nio.file.FileVisitResult v5;
java.nio.file.attribute.BasicFileAttributes v2;
java.nio.file.Path v1;
java.io.File v3;
boolean v4;
v0 := @this: org.apache.commons.io.filefilter.IOFileFilter;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;
v3 = interfaceinvoke v1.<java.nio.file.Path: java.io.File toFile()>();
v4 = interfaceinvoke v0.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(v3);
v5 = staticinvoke <org.apache.commons.io.filefilter.AbstractFileFilter: java.nio.file.FileVisitResult toFileVisitResult(boolean,java.nio.file.Path)>(v4, v1);
return v5;
}
public org.apache.commons.io.filefilter.IOFileFilter and(org.apache.commons.io.filefilter.IOFileFilter)
{
org.apache.commons.io.filefilter.IOFileFilter v0, v1;
org.apache.commons.io.filefilter.AndFileFilter v2;
v0 := @this: org.apache.commons.io.filefilter.IOFileFilter;
v1 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;
v2 = new org.apache.commons.io.filefilter.AndFileFilter;
specialinvoke v2.<org.apache.commons.io.filefilter.AndFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(v0, v1);
return v2;
}
public org.apache.commons.io.filefilter.IOFileFilter negate()
{
org.apache.commons.io.filefilter.IOFileFilter v0;
org.apache.commons.io.filefilter.NotFileFilter v1;
v0 := @this: org.apache.commons.io.filefilter.IOFileFilter;
v1 = new org.apache.commons.io.filefilter.NotFileFilter;
specialinvoke v1.<org.apache.commons.io.filefilter.NotFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter)>(v0);
return v1;
}
public org.apache.commons.io.filefilter.IOFileFilter or(org.apache.commons.io.filefilter.IOFileFilter)
{
org.apache.commons.io.filefilter.IOFileFilter v0, v1;
org.apache.commons.io.filefilter.OrFileFilter v2;
v0 := @this: org.apache.commons.io.filefilter.IOFileFilter;
v1 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;
v2 = new org.apache.commons.io.filefilter.OrFileFilter;
specialinvoke v2.<org.apache.commons.io.filefilter.OrFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(v0, v1);
return v2;
}
static void <clinit>()
{
java.lang.String[] v0;
v0 = newarray (java.lang.String)[0];
<org.apache.commons.io.filefilter.IOFileFilter: java.lang.String[] EMPTY_STRING_ARRAY> = v0;
return;
}
}