public class org.apache.commons.io.filefilter.NotFileFilter extends org.apache.commons.io.filefilter.AbstractFileFilter implements java.io.Serializable
{
private static final long serialVersionUID;
private final org.apache.commons.io.filefilter.IOFileFilter filter;
public void <init>(org.apache.commons.io.filefilter.IOFileFilter)
{
org.apache.commons.io.filefilter.IOFileFilter v1;
org.apache.commons.io.filefilter.NotFileFilter v0;
java.lang.IllegalArgumentException v2;
v0 := @this: org.apache.commons.io.filefilter.NotFileFilter;
v1 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;
specialinvoke v0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>();
if v1 != null goto label1;
v2 = new java.lang.IllegalArgumentException;
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The filter must not be null");
throw v2;
label1:
v0.<org.apache.commons.io.filefilter.NotFileFilter: org.apache.commons.io.filefilter.IOFileFilter filter> = v1;
return;
}
public boolean accept(java.io.File)
{
org.apache.commons.io.filefilter.IOFileFilter v2;
org.apache.commons.io.filefilter.NotFileFilter v0;
java.io.File v1;
boolean v3, v4;
v0 := @this: org.apache.commons.io.filefilter.NotFileFilter;
v1 := @parameter0: java.io.File;
v2 = v0.<org.apache.commons.io.filefilter.NotFileFilter: org.apache.commons.io.filefilter.IOFileFilter filter>;
v3 = interfaceinvoke v2.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File)>(v1);
if v3 != 0 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public boolean accept(java.io.File, java.lang.String)
{
org.apache.commons.io.filefilter.IOFileFilter v3;
java.lang.String v2;
org.apache.commons.io.filefilter.NotFileFilter v0;
java.io.File v1;
boolean v4, v5;
v0 := @this: org.apache.commons.io.filefilter.NotFileFilter;
v1 := @parameter0: java.io.File;
v2 := @parameter1: java.lang.String;
v3 = v0.<org.apache.commons.io.filefilter.NotFileFilter: org.apache.commons.io.filefilter.IOFileFilter filter>;
v4 = interfaceinvoke v3.<org.apache.commons.io.filefilter.IOFileFilter: boolean accept(java.io.File,java.lang.String)>(v1, v2);
if v4 != 0 goto label1;
v5 = 1;
goto label2;
label1:
v5 = 0;
label2:
return v5;
}
public java.nio.file.FileVisitResult accept(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)
{
org.apache.commons.io.filefilter.IOFileFilter v3;
java.nio.file.FileVisitResult v4, v5;
org.apache.commons.io.filefilter.NotFileFilter v0;
java.nio.file.attribute.BasicFileAttributes v2;
java.nio.file.Path v1;
v0 := @this: org.apache.commons.io.filefilter.NotFileFilter;
v1 := @parameter0: java.nio.file.Path;
v2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;
v3 = v0.<org.apache.commons.io.filefilter.NotFileFilter: org.apache.commons.io.filefilter.IOFileFilter filter>;
v4 = interfaceinvoke v3.<org.apache.commons.io.filefilter.IOFileFilter: java.nio.file.FileVisitResult accept(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)>(v1, v2);
v5 = specialinvoke v0.<org.apache.commons.io.filefilter.NotFileFilter: java.nio.file.FileVisitResult not(java.nio.file.FileVisitResult)>(v4);
return v5;
}
private java.nio.file.FileVisitResult not(java.nio.file.FileVisitResult)
{
java.nio.file.FileVisitResult v1, v2, v3;
org.apache.commons.io.filefilter.NotFileFilter v0;
v0 := @this: org.apache.commons.io.filefilter.NotFileFilter;
v1 := @parameter0: java.nio.file.FileVisitResult;
v2 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;
if v1 != v2 goto label1;
v3 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult TERMINATE>;
goto label2;
label1:
v3 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;
label2:
return v3;
}
public java.lang.String toString()
{
org.apache.commons.io.filefilter.IOFileFilter v1;
java.lang.String v2, v3;
org.apache.commons.io.filefilter.NotFileFilter v0;
v0 := @this: org.apache.commons.io.filefilter.NotFileFilter;
v1 = v0.<org.apache.commons.io.filefilter.NotFileFilter: org.apache.commons.io.filefilter.IOFileFilter filter>;
v2 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("NOT (\u0001)");
return v3;
}
}