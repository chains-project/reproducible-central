public class org.apache.commons.io.input.ReaderInputStream extends java.io.InputStream
{
private static final int DEFAULT_BUFFER_SIZE;
private final java.io.Reader reader;
private final java.nio.charset.CharsetEncoder encoder;
private final java.nio.CharBuffer encoderIn;
private final java.nio.ByteBuffer encoderOut;
private java.nio.charset.CoderResult lastCoderResult;
private boolean endOfInput;
public void <init>(java.io.Reader, java.nio.charset.CharsetEncoder)
{
java.io.Reader v1;
org.apache.commons.io.input.ReaderInputStream v0;
java.nio.charset.CharsetEncoder v2;
v0 := @this: org.apache.commons.io.input.ReaderInputStream;
v1 := @parameter0: java.io.Reader;
v2 := @parameter1: java.nio.charset.CharsetEncoder;
specialinvoke v0.<org.apache.commons.io.input.ReaderInputStream: void <init>(java.io.Reader,java.nio.charset.CharsetEncoder,int)>(v1, v2, 1024);
return;
}
public void <init>(java.io.Reader, java.nio.charset.CharsetEncoder, int)
{
java.nio.CharBuffer v4, v5;
java.io.Reader v1;
org.apache.commons.io.input.ReaderInputStream v0;
java.nio.ByteBuffer v6, v7;
java.nio.charset.CharsetEncoder v2;
int v3;
v0 := @this: org.apache.commons.io.input.ReaderInputStream;
v1 := @parameter0: java.io.Reader;
v2 := @parameter1: java.nio.charset.CharsetEncoder;
v3 := @parameter2: int;
specialinvoke v0.<java.io.InputStream: void <init>()>();
v0.<org.apache.commons.io.input.ReaderInputStream: java.io.Reader reader> = v1;
v0.<org.apache.commons.io.input.ReaderInputStream: java.nio.charset.CharsetEncoder encoder> = v2;
v4 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>(v3);
v0.<org.apache.commons.io.input.ReaderInputStream: java.nio.CharBuffer encoderIn> = v4;
v5 = v0.<org.apache.commons.io.input.ReaderInputStream: java.nio.CharBuffer encoderIn>;
virtualinvoke v5.<java.nio.CharBuffer: java.nio.CharBuffer flip()>();
v6 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(128);
v0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut> = v6;
v7 = v0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut>;
virtualinvoke v7.<java.nio.ByteBuffer: java.nio.ByteBuffer flip()>();
return;
}
public void <init>(java.io.Reader, java.nio.charset.Charset, int)
{
java.io.Reader v1;
org.apache.commons.io.input.ReaderInputStream v0;
java.nio.charset.Charset v2;
java.nio.charset.CharsetEncoder v4, v6, v8;
java.nio.charset.CodingErrorAction v5, v7;
int v3;
v0 := @this: org.apache.commons.io.input.ReaderInputStream;
v1 := @parameter0: java.io.Reader;
v2 := @parameter1: java.nio.charset.Charset;
v3 := @parameter2: int;
v4 = virtualinvoke v2.<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>();
v5 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;
v6 = virtualinvoke v4.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>(v5);
v7 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;
v8 = virtualinvoke v6.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>(v7);
specialinvoke v0.<org.apache.commons.io.input.ReaderInputStream: void <init>(java.io.Reader,java.nio.charset.CharsetEncoder,int)>(v1, v8, v3);
return;
}
public void <init>(java.io.Reader, java.nio.charset.Charset)
{
java.io.Reader v1;
org.apache.commons.io.input.ReaderInputStream v0;
java.nio.charset.Charset v2;
v0 := @this: org.apache.commons.io.input.ReaderInputStream;
v1 := @parameter0: java.io.Reader;
v2 := @parameter1: java.nio.charset.Charset;
specialinvoke v0.<org.apache.commons.io.input.ReaderInputStream: void <init>(java.io.Reader,java.nio.charset.Charset,int)>(v1, v2, 1024);
return;
}
public void <init>(java.io.Reader, java.lang.String, int)
{
java.nio.charset.Charset v4;
int v3;
java.io.Reader v1;
java.lang.String v2;
org.apache.commons.io.input.ReaderInputStream v0;
v0 := @this: org.apache.commons.io.input.ReaderInputStream;
v1 := @parameter0: java.io.Reader;
v2 := @parameter1: java.lang.String;
v3 := @parameter2: int;
v4 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(v2);
specialinvoke v0.<org.apache.commons.io.input.ReaderInputStream: void <init>(java.io.Reader,java.nio.charset.Charset,int)>(v1, v4, v3);
return;
}
public void <init>(java.io.Reader, java.lang.String)
{
java.io.Reader v1;
java.lang.String v2;
org.apache.commons.io.input.ReaderInputStream v0;
v0 := @this: org.apache.commons.io.input.ReaderInputStream;
v1 := @parameter0: java.io.Reader;
v2 := @parameter1: java.lang.String;
specialinvoke v0.<org.apache.commons.io.input.ReaderInputStream: void <init>(java.io.Reader,java.lang.String,int)>(v1, v2, 1024);
return;
}
public void <init>(java.io.Reader)
{
java.io.Reader v1;
org.apache.commons.io.input.ReaderInputStream v0;
java.nio.charset.Charset v2;
v0 := @this: org.apache.commons.io.input.ReaderInputStream;
v1 := @parameter0: java.io.Reader;
v2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();
specialinvoke v0.<org.apache.commons.io.input.ReaderInputStream: void <init>(java.io.Reader,java.nio.charset.Charset)>(v1, v2);
return;
}
private void fillBuffer() throws java.io.IOException
{
org.apache.commons.io.input.ReaderInputStream v0;
java.nio.ByteBuffer v18, v21, v24;
java.nio.charset.CoderResult v2, v23, v3;
int v12, v13, v14, v16, v7;
boolean v1, v22, v4;
java.nio.CharBuffer v11, v15, v17, v20, v5, v6, v9;
java.io.Reader v8;
java.nio.charset.CharsetEncoder v19;
char[] v10;
v0 := @this: org.apache.commons.io.input.ReaderInputStream;
v1 = v0.<org.apache.commons.io.input.ReaderInputStream: boolean endOfInput>;
if v1 != 0 goto label4;
v2 = v0.<org.apache.commons.io.input.ReaderInputStream: java.nio.charset.CoderResult lastCoderResult>;
if v2 == null goto label1;
v3 = v0.<org.apache.commons.io.input.ReaderInputStream: java.nio.charset.CoderResult lastCoderResult>;
v4 = virtualinvoke v3.<java.nio.charset.CoderResult: boolean isUnderflow()>();
if v4 == 0 goto label4;
label1:
v5 = v0.<org.apache.commons.io.input.ReaderInputStream: java.nio.CharBuffer encoderIn>;
virtualinvoke v5.<java.nio.CharBuffer: java.nio.CharBuffer compact()>();
v6 = v0.<org.apache.commons.io.input.ReaderInputStream: java.nio.CharBuffer encoderIn>;
v7 = virtualinvoke v6.<java.nio.CharBuffer: int position()>();
v8 = v0.<org.apache.commons.io.input.ReaderInputStream: java.io.Reader reader>;
v9 = v0.<org.apache.commons.io.input.ReaderInputStream: java.nio.CharBuffer encoderIn>;
v10 = virtualinvoke v9.<java.nio.CharBuffer: char[] array()>();
v11 = v0.<org.apache.commons.io.input.ReaderInputStream: java.nio.CharBuffer encoderIn>;
v12 = virtualinvoke v11.<java.nio.CharBuffer: int remaining()>();
v13 = virtualinvoke v8.<java.io.Reader: int read(char[],int,int)>(v10, v7, v12);
v14 = (int) -1;
if v13 != v14 goto label2;
v0.<org.apache.commons.io.input.ReaderInputStream: boolean endOfInput> = 1;
goto label3;
label2:
v15 = v0.<org.apache.commons.io.input.ReaderInputStream: java.nio.CharBuffer encoderIn>;
v16 = v7 + v13;
virtualinvoke v15.<java.nio.CharBuffer: java.nio.CharBuffer position(int)>(v16);
label3:
v17 = v0.<org.apache.commons.io.input.ReaderInputStream: java.nio.CharBuffer encoderIn>;
virtualinvoke v17.<java.nio.CharBuffer: java.nio.CharBuffer flip()>();
label4:
v18 = v0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut>;
virtualinvoke v18.<java.nio.ByteBuffer: java.nio.ByteBuffer compact()>();
v19 = v0.<org.apache.commons.io.input.ReaderInputStream: java.nio.charset.CharsetEncoder encoder>;
v20 = v0.<org.apache.commons.io.input.ReaderInputStream: java.nio.CharBuffer encoderIn>;
v21 = v0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut>;
v22 = v0.<org.apache.commons.io.input.ReaderInputStream: boolean endOfInput>;
v23 = virtualinvoke v19.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>(v20, v21, v22);
v0.<org.apache.commons.io.input.ReaderInputStream: java.nio.charset.CoderResult lastCoderResult> = v23;
v24 = v0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut>;
virtualinvoke v24.<java.nio.ByteBuffer: java.nio.ByteBuffer flip()>();
return;
}
public int read(byte[], int, int) throws java.io.IOException
{
byte[] v1;
java.lang.IndexOutOfBoundsException v6;
org.apache.commons.io.input.ReaderInputStream v0;
java.nio.ByteBuffer v10, v12, v15, v17;
int v13, v14, v2, v20, v21, v3, v4, v5, v7, v9;
java.lang.String v8;
boolean v11, v16, v18, v19;
v0 := @this: org.apache.commons.io.input.ReaderInputStream;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "array");
if v3 < 0 goto label1;
if v2 < 0 goto label1;
v4 = v2 + v3;
v5 = lengthof v1;
if v4 <= v5 goto label2;
label1:
v6 = new java.lang.IndexOutOfBoundsException;
v7 = lengthof v1;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int,int)>(v7, v2, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Array Size=\u0001, offset=\u0001, length=\u0001");
specialinvoke v6.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>(v8);
throw v6;
label2:
v9 = 0;
if v3 != 0 goto label3;
return 0;
label3:
if v3 <= 0 goto label5;
v10 = v0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut>;
v11 = virtualinvoke v10.<java.nio.ByteBuffer: boolean hasRemaining()>();
if v11 == 0 goto label4;
v12 = v0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut>;
v13 = virtualinvoke v12.<java.nio.ByteBuffer: int remaining()>();
v14 = staticinvoke <java.lang.Math: int min(int,int)>(v13, v3);
v15 = v0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut>;
virtualinvoke v15.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(v1, v2, v14);
v2 = v2 + v14;
v3 = v3 - v14;
v9 = v9 + v14;
goto label3;
label4:
specialinvoke v0.<org.apache.commons.io.input.ReaderInputStream: void fillBuffer()>();
v16 = v0.<org.apache.commons.io.input.ReaderInputStream: boolean endOfInput>;
if v16 == 0 goto label3;
v17 = v0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut>;
v18 = virtualinvoke v17.<java.nio.ByteBuffer: boolean hasRemaining()>();
if v18 != 0 goto label3;
label5:
if v9 != 0 goto label6;
v19 = v0.<org.apache.commons.io.input.ReaderInputStream: boolean endOfInput>;
if v19 == 0 goto label6;
v20 = (int) -1;
v21 = v20;
goto label7;
label6:
v21 = v9;
label7:
return v21;
}
public int read(byte[]) throws java.io.IOException
{
byte[] v1;
int v2, v3;
org.apache.commons.io.input.ReaderInputStream v0;
v0 := @this: org.apache.commons.io.input.ReaderInputStream;
v1 := @parameter0: byte[];
v2 = lengthof v1;
v3 = virtualinvoke v0.<org.apache.commons.io.input.ReaderInputStream: int read(byte[],int,int)>(v1, 0, v2);
return v3;
}
public int read() throws java.io.IOException
{
org.apache.commons.io.input.ReaderInputStream v0;
java.nio.ByteBuffer v1, v3, v7;
short v5;
byte v4;
int v9;
boolean v2, v6, v8;
v0 := @this: org.apache.commons.io.input.ReaderInputStream;
label1:
v1 = v0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut>;
v2 = virtualinvoke v1.<java.nio.ByteBuffer: boolean hasRemaining()>();
if v2 == 0 goto label2;
v3 = v0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut>;
v4 = virtualinvoke v3.<java.nio.ByteBuffer: byte get()>();
v5 = v4 & 255;
return v5;
label2:
specialinvoke v0.<org.apache.commons.io.input.ReaderInputStream: void fillBuffer()>();
v6 = v0.<org.apache.commons.io.input.ReaderInputStream: boolean endOfInput>;
if v6 == 0 goto label1;
v7 = v0.<org.apache.commons.io.input.ReaderInputStream: java.nio.ByteBuffer encoderOut>;
v8 = virtualinvoke v7.<java.nio.ByteBuffer: boolean hasRemaining()>();
if v8 != 0 goto label1;
v9 = (int) -1;
return v9;
}
public void close() throws java.io.IOException
{
java.io.Reader v1;
org.apache.commons.io.input.ReaderInputStream v0;
v0 := @this: org.apache.commons.io.input.ReaderInputStream;
v1 = v0.<org.apache.commons.io.input.ReaderInputStream: java.io.Reader reader>;
virtualinvoke v1.<java.io.Reader: void close()>();
return;
}
}