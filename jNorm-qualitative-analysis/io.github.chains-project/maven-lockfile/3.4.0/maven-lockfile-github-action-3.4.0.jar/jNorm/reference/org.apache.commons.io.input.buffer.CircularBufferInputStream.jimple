public class org.apache.commons.io.input.buffer.CircularBufferInputStream extends java.io.InputStream
{
protected final java.io.InputStream in;
protected final org.apache.commons.io.input.buffer.CircularByteBuffer buffer;
protected final int bufferSize;
private boolean eof;
public void <init>(java.io.InputStream, int)
{
org.apache.commons.io.input.buffer.CircularByteBuffer v6;
int v2;
java.lang.Object v5;
java.lang.String v4;
java.lang.IllegalArgumentException v3;
org.apache.commons.io.input.buffer.CircularBufferInputStream v0;
java.io.InputStream v1;
v0 := @this: org.apache.commons.io.input.buffer.CircularBufferInputStream;
v1 := @parameter0: java.io.InputStream;
v2 := @parameter1: int;
specialinvoke v0.<java.io.InputStream: void <init>()>();
if v2 > 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
v4 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid bufferSize: \u0001");
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v4);
throw v3;
label1:
v5 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "inputStream");
v0.<org.apache.commons.io.input.buffer.CircularBufferInputStream: java.io.InputStream in> = v5;
v6 = new org.apache.commons.io.input.buffer.CircularByteBuffer;
specialinvoke v6.<org.apache.commons.io.input.buffer.CircularByteBuffer: void <init>(int)>(v2);
v0.<org.apache.commons.io.input.buffer.CircularBufferInputStream: org.apache.commons.io.input.buffer.CircularByteBuffer buffer> = v6;
v0.<org.apache.commons.io.input.buffer.CircularBufferInputStream: int bufferSize> = v2;
v0.<org.apache.commons.io.input.buffer.CircularBufferInputStream: boolean eof> = 0;
return;
}
public void <init>(java.io.InputStream)
{
org.apache.commons.io.input.buffer.CircularBufferInputStream v0;
java.io.InputStream v1;
v0 := @this: org.apache.commons.io.input.buffer.CircularBufferInputStream;
v1 := @parameter0: java.io.InputStream;
specialinvoke v0.<org.apache.commons.io.input.buffer.CircularBufferInputStream: void <init>(java.io.InputStream,int)>(v1, 8192);
return;
}
protected void fillBuffer() throws java.io.IOException
{
byte[] v4;
org.apache.commons.io.input.buffer.CircularBufferInputStream v0;
org.apache.commons.io.input.buffer.CircularByteBuffer v2, v8;
int v3, v6, v7;
boolean v1;
java.io.InputStream v5;
v0 := @this: org.apache.commons.io.input.buffer.CircularBufferInputStream;
v1 = v0.<org.apache.commons.io.input.buffer.CircularBufferInputStream: boolean eof>;
if v1 == 0 goto label1;
return;
label1:
v2 = v0.<org.apache.commons.io.input.buffer.CircularBufferInputStream: org.apache.commons.io.input.buffer.CircularByteBuffer buffer>;
v3 = virtualinvoke v2.<org.apache.commons.io.input.buffer.CircularByteBuffer: int getSpace()>();
v4 = staticinvoke <org.apache.commons.io.IOUtils: byte[] byteArray(int)>(v3);
label2:
if v3 <= 0 goto label4;
v5 = v0.<org.apache.commons.io.input.buffer.CircularBufferInputStream: java.io.InputStream in>;
v6 = virtualinvoke v5.<java.io.InputStream: int read(byte[],int,int)>(v4, 0, v3);
v7 = (int) -1;
if v6 != v7 goto label3;
v0.<org.apache.commons.io.input.buffer.CircularBufferInputStream: boolean eof> = 1;
return;
label3:
if v6 <= 0 goto label2;
v8 = v0.<org.apache.commons.io.input.buffer.CircularBufferInputStream: org.apache.commons.io.input.buffer.CircularByteBuffer buffer>;
virtualinvoke v8.<org.apache.commons.io.input.buffer.CircularByteBuffer: void add(byte[],int,int)>(v4, 0, v6);
v3 = v3 - v6;
goto label2;
label4:
return;
}
protected boolean haveBytes(int) throws java.io.IOException
{
org.apache.commons.io.input.buffer.CircularByteBuffer v2, v4;
int v1, v3;
org.apache.commons.io.input.buffer.CircularBufferInputStream v0;
boolean v5;
v0 := @this: org.apache.commons.io.input.buffer.CircularBufferInputStream;
v1 := @parameter0: int;
v2 = v0.<org.apache.commons.io.input.buffer.CircularBufferInputStream: org.apache.commons.io.input.buffer.CircularByteBuffer buffer>;
v3 = virtualinvoke v2.<org.apache.commons.io.input.buffer.CircularByteBuffer: int getCurrentNumberOfBytes()>();
if v3 >= v1 goto label1;
virtualinvoke v0.<org.apache.commons.io.input.buffer.CircularBufferInputStream: void fillBuffer()>();
label1:
v4 = v0.<org.apache.commons.io.input.buffer.CircularBufferInputStream: org.apache.commons.io.input.buffer.CircularByteBuffer buffer>;
v5 = virtualinvoke v4.<org.apache.commons.io.input.buffer.CircularByteBuffer: boolean hasBytes()>();
return v5;
}
public int read() throws java.io.IOException
{
org.apache.commons.io.input.buffer.CircularByteBuffer v3;
short v5;
byte v4;
int v2;
org.apache.commons.io.input.buffer.CircularBufferInputStream v0;
boolean v1;
v0 := @this: org.apache.commons.io.input.buffer.CircularBufferInputStream;
v1 = virtualinvoke v0.<org.apache.commons.io.input.buffer.CircularBufferInputStream: boolean haveBytes(int)>(1);
if v1 != 0 goto label1;
v2 = (int) -1;
return v2;
label1:
v3 = v0.<org.apache.commons.io.input.buffer.CircularBufferInputStream: org.apache.commons.io.input.buffer.CircularByteBuffer buffer>;
v4 = virtualinvoke v3.<org.apache.commons.io.input.buffer.CircularByteBuffer: byte read()>();
v5 = v4 & 255;
return v5;
}
public int read(byte[]) throws java.io.IOException
{
byte[] v1;
int v2, v3;
org.apache.commons.io.input.buffer.CircularBufferInputStream v0;
v0 := @this: org.apache.commons.io.input.buffer.CircularBufferInputStream;
v1 := @parameter0: byte[];
v2 = lengthof v1;
v3 = virtualinvoke v0.<org.apache.commons.io.input.buffer.CircularBufferInputStream: int read(byte[],int,int)>(v1, 0, v2);
return v3;
}
public int read(byte[], int, int) throws java.io.IOException
{
byte[] v1;
java.lang.IllegalArgumentException v4, v5;
org.apache.commons.io.input.buffer.CircularBufferInputStream v0;
org.apache.commons.io.input.buffer.CircularByteBuffer v13, v8;
byte v14;
int v10, v11, v12, v2, v3, v7, v9;
boolean v6;
v0 := @this: org.apache.commons.io.input.buffer.CircularBufferInputStream;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "targetBuffer");
if v2 >= 0 goto label1;
v4 = new java.lang.IllegalArgumentException;
specialinvoke v4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Offset must not be negative");
throw v4;
label1:
if v3 >= 0 goto label2;
v5 = new java.lang.IllegalArgumentException;
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Length must not be negative");
throw v5;
label2:
v6 = virtualinvoke v0.<org.apache.commons.io.input.buffer.CircularBufferInputStream: boolean haveBytes(int)>(v3);
if v6 != 0 goto label3;
v7 = (int) -1;
return v7;
label3:
v8 = v0.<org.apache.commons.io.input.buffer.CircularBufferInputStream: org.apache.commons.io.input.buffer.CircularByteBuffer buffer>;
v9 = virtualinvoke v8.<org.apache.commons.io.input.buffer.CircularByteBuffer: int getCurrentNumberOfBytes()>();
v10 = staticinvoke <java.lang.Math: int min(int,int)>(v3, v9);
v11 = 0;
label4:
if v11 >= v10 goto label5;
v12 = v2 + v11;
v13 = v0.<org.apache.commons.io.input.buffer.CircularBufferInputStream: org.apache.commons.io.input.buffer.CircularByteBuffer buffer>;
v14 = virtualinvoke v13.<org.apache.commons.io.input.buffer.CircularByteBuffer: byte read()>();
v1[v12] = v14;
v11 = v11 + 1;
goto label4;
label5:
return v10;
}
public void close() throws java.io.IOException
{
org.apache.commons.io.input.buffer.CircularByteBuffer v2;
org.apache.commons.io.input.buffer.CircularBufferInputStream v0;
java.io.InputStream v1;
v0 := @this: org.apache.commons.io.input.buffer.CircularBufferInputStream;
v1 = v0.<org.apache.commons.io.input.buffer.CircularBufferInputStream: java.io.InputStream in>;
virtualinvoke v1.<java.io.InputStream: void close()>();
v0.<org.apache.commons.io.input.buffer.CircularBufferInputStream: boolean eof> = 1;
v2 = v0.<org.apache.commons.io.input.buffer.CircularBufferInputStream: org.apache.commons.io.input.buffer.CircularByteBuffer buffer>;
virtualinvoke v2.<org.apache.commons.io.input.buffer.CircularByteBuffer: void clear()>();
return;
}
}