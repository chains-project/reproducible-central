public class org.apache.commons.io.input.buffer.CircularByteBuffer extends java.lang.Object
{
private final byte[] buffer;
private int startOffset;
private int endOffset;
private int currentNumberOfBytes;
public void <init>(int)
{
int v1;
byte[] v2;
org.apache.commons.io.input.buffer.CircularByteBuffer v0;
v0 := @this: org.apache.commons.io.input.buffer.CircularByteBuffer;
v1 := @parameter0: int;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = staticinvoke <org.apache.commons.io.IOUtils: byte[] byteArray(int)>(v1);
v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: byte[] buffer> = v2;
v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int startOffset> = 0;
v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int endOffset> = 0;
v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int currentNumberOfBytes> = 0;
return;
}
public void <init>()
{
org.apache.commons.io.input.buffer.CircularByteBuffer v0;
v0 := @this: org.apache.commons.io.input.buffer.CircularByteBuffer;
specialinvoke v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: void <init>(int)>(8192);
return;
}
public byte read()
{
byte[] v10, v3;
java.lang.IllegalStateException v2;
org.apache.commons.io.input.buffer.CircularByteBuffer v0;
byte v5;
int v1, v11, v4, v6, v7, v8, v9;
v0 := @this: org.apache.commons.io.input.buffer.CircularByteBuffer;
v1 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int currentNumberOfBytes>;
if v1 > 0 goto label1;
v2 = new java.lang.IllegalStateException;
specialinvoke v2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No bytes available.");
throw v2;
label1:
v3 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: byte[] buffer>;
v4 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int startOffset>;
v5 = v3[v4];
v6 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int currentNumberOfBytes>;
v7 = v6 - 1;
v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int currentNumberOfBytes> = v7;
v8 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int startOffset>;
v9 = v8 + 1;
v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int startOffset> = v9;
v10 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: byte[] buffer>;
v11 = lengthof v10;
if v9 != v11 goto label2;
v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int startOffset> = 0;
label2:
return v5;
}
public void read(byte[], int, int)
{
byte[] v1, v25, v32, v7;
java.lang.IllegalStateException v19;
byte v27;
org.apache.commons.io.input.buffer.CircularByteBuffer v0;
int v11, v12, v14, v15, v16, v18, v2, v20, v22, v23, v24, v26, v28, v29, v3, v30, v31, v33, v4, v8;
java.lang.String v10, v17, v21, v6;
java.lang.IllegalArgumentException v13, v5, v9;
v0 := @this: org.apache.commons.io.input.buffer.CircularByteBuffer;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "targetBuffer");
if v2 < 0 goto label1;
v4 = lengthof v1;
if v2 < v4 goto label2;
label1:
v5 = new java.lang.IllegalArgumentException;
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid offset: \u0001");
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v6);
throw v5;
label2:
if v3 < 0 goto label3;
v7 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: byte[] buffer>;
v8 = lengthof v7;
if v3 <= v8 goto label4;
label3:
v9 = new java.lang.IllegalArgumentException;
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid length: \u0001");
specialinvoke v9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v10);
throw v9;
label4:
v11 = v2 + v3;
v12 = lengthof v1;
if v11 <= v12 goto label5;
v13 = new java.lang.IllegalArgumentException;
v14 = lengthof v1;
v15 = v2 + v3;
v16 = v15 - 1;
v17 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v14, v16) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("The supplied byte array contains only \u0001 bytes, but offset, and length would require \u0001");
specialinvoke v13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v17);
throw v13;
label5:
v18 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int currentNumberOfBytes>;
if v18 >= v3 goto label6;
v19 = new java.lang.IllegalStateException;
v20 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int currentNumberOfBytes>;
v21 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v20, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Currently, there are only \u0001in the buffer, not \u0001");
specialinvoke v19.<java.lang.IllegalStateException: void <init>(java.lang.String)>(v21);
throw v19;
label6:
v22 = v2;
v23 = 0;
label7:
if v23 >= v3 goto label9;
v24 = v22;
v22 = v22 + 1;
v25 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: byte[] buffer>;
v26 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int startOffset>;
v27 = v25[v26];
v1[v24] = v27;
v28 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int currentNumberOfBytes>;
v29 = v28 - 1;
v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int currentNumberOfBytes> = v29;
v30 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int startOffset>;
v31 = v30 + 1;
v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int startOffset> = v31;
v32 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: byte[] buffer>;
v33 = lengthof v32;
if v31 != v33 goto label8;
v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int startOffset> = 0;
label8:
v23 = v23 + 1;
goto label7;
label9:
return;
}
public void add(byte)
{
byte[] v12, v3, v6;
java.lang.IllegalStateException v5;
org.apache.commons.io.input.buffer.CircularByteBuffer v0;
byte v1;
int v10, v11, v13, v2, v4, v7, v8, v9;
v0 := @this: org.apache.commons.io.input.buffer.CircularByteBuffer;
v1 := @parameter0: byte;
v2 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int currentNumberOfBytes>;
v3 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: byte[] buffer>;
v4 = lengthof v3;
if v2 < v4 goto label1;
v5 = new java.lang.IllegalStateException;
specialinvoke v5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No space available");
throw v5;
label1:
v6 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: byte[] buffer>;
v7 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int endOffset>;
v6[v7] = v1;
v8 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int currentNumberOfBytes>;
v9 = v8 + 1;
v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int currentNumberOfBytes> = v9;
v10 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int endOffset>;
v11 = v10 + 1;
v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int endOffset> = v11;
v12 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: byte[] buffer>;
v13 = lengthof v12;
if v11 != v13 goto label2;
v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int endOffset> = 0;
label2:
return;
}
public boolean peek(byte[], int, int)
{
byte[] v1, v14, v18, v7;
byte v15, v17;
int v11, v12, v13, v16, v19, v2, v3, v4, v8;
java.lang.String v10, v6;
java.lang.IllegalArgumentException v5, v9;
org.apache.commons.io.input.buffer.CircularByteBuffer v0;
v0 := @this: org.apache.commons.io.input.buffer.CircularByteBuffer;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "Buffer");
if v2 < 0 goto label1;
v4 = lengthof v1;
if v2 < v4 goto label2;
label1:
v5 = new java.lang.IllegalArgumentException;
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid offset: \u0001");
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v6);
throw v5;
label2:
if v3 < 0 goto label3;
v7 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: byte[] buffer>;
v8 = lengthof v7;
if v3 <= v8 goto label4;
label3:
v9 = new java.lang.IllegalArgumentException;
v10 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid length: \u0001");
specialinvoke v9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v10);
throw v9;
label4:
v11 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int currentNumberOfBytes>;
if v3 >= v11 goto label5;
return 0;
label5:
v12 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int startOffset>;
v13 = 0;
label6:
if v13 >= v3 goto label9;
v14 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: byte[] buffer>;
v15 = v14[v12];
v16 = v13 + v2;
v17 = v1[v16];
if v15 == v17 goto label7;
return 0;
label7:
v12 = v12 + 1;
v18 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: byte[] buffer>;
v19 = lengthof v18;
if v12 != v19 goto label8;
v12 = 0;
label8:
v13 = v13 + 1;
goto label6;
label9:
return 1;
}
public void add(byte[], int, int)
{
byte[] v1, v11, v15, v21;
java.lang.IllegalStateException v13;
byte v18;
int v10, v12, v14, v16, v17, v19, v2, v20, v22, v23, v24, v3, v4, v9;
java.lang.String v6, v8;
java.lang.IllegalArgumentException v5, v7;
org.apache.commons.io.input.buffer.CircularByteBuffer v0;
v0 := @this: org.apache.commons.io.input.buffer.CircularByteBuffer;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "Buffer");
if v2 < 0 goto label1;
v4 = lengthof v1;
if v2 < v4 goto label2;
label1:
v5 = new java.lang.IllegalArgumentException;
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v2) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid offset: \u0001");
specialinvoke v5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v6);
throw v5;
label2:
if v3 >= 0 goto label3;
v7 = new java.lang.IllegalArgumentException;
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Invalid length: \u0001");
specialinvoke v7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v8);
throw v7;
label3:
v9 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int currentNumberOfBytes>;
v10 = v9 + v3;
v11 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: byte[] buffer>;
v12 = lengthof v11;
if v10 <= v12 goto label4;
v13 = new java.lang.IllegalStateException;
specialinvoke v13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No space available");
throw v13;
label4:
v14 = 0;
label5:
if v14 >= v3 goto label7;
v15 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: byte[] buffer>;
v16 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int endOffset>;
v17 = v2 + v14;
v18 = v1[v17];
v15[v16] = v18;
v19 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int endOffset>;
v20 = v19 + 1;
v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int endOffset> = v20;
v21 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: byte[] buffer>;
v22 = lengthof v21;
if v20 != v22 goto label6;
v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int endOffset> = 0;
label6:
v14 = v14 + 1;
goto label5;
label7:
v23 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int currentNumberOfBytes>;
v24 = v23 + v3;
v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int currentNumberOfBytes> = v24;
return;
}
public boolean hasSpace()
{
byte[] v2;
org.apache.commons.io.input.buffer.CircularByteBuffer v0;
int v1, v3;
boolean v4;
v0 := @this: org.apache.commons.io.input.buffer.CircularByteBuffer;
v1 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int currentNumberOfBytes>;
v2 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: byte[] buffer>;
v3 = lengthof v2;
if v1 >= v3 goto label1;
v4 = 1;
goto label2;
label1:
v4 = 0;
label2:
return v4;
}
public boolean hasSpace(int)
{
byte[] v4;
org.apache.commons.io.input.buffer.CircularByteBuffer v0;
int v1, v2, v3, v5;
boolean v6;
v0 := @this: org.apache.commons.io.input.buffer.CircularByteBuffer;
v1 := @parameter0: int;
v2 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int currentNumberOfBytes>;
v3 = v2 + v1;
v4 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: byte[] buffer>;
v5 = lengthof v4;
if v3 > v5 goto label1;
v6 = 1;
goto label2;
label1:
v6 = 0;
label2:
return v6;
}
public boolean hasBytes()
{
int v1;
org.apache.commons.io.input.buffer.CircularByteBuffer v0;
boolean v2;
v0 := @this: org.apache.commons.io.input.buffer.CircularByteBuffer;
v1 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int currentNumberOfBytes>;
if v1 <= 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public int getSpace()
{
byte[] v1;
org.apache.commons.io.input.buffer.CircularByteBuffer v0;
int v2, v3, v4;
v0 := @this: org.apache.commons.io.input.buffer.CircularByteBuffer;
v1 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: byte[] buffer>;
v2 = lengthof v1;
v3 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int currentNumberOfBytes>;
v4 = v2 - v3;
return v4;
}
public int getCurrentNumberOfBytes()
{
int v1;
org.apache.commons.io.input.buffer.CircularByteBuffer v0;
v0 := @this: org.apache.commons.io.input.buffer.CircularByteBuffer;
v1 = v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int currentNumberOfBytes>;
return v1;
}
public void clear()
{
org.apache.commons.io.input.buffer.CircularByteBuffer v0;
v0 := @this: org.apache.commons.io.input.buffer.CircularByteBuffer;
v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int startOffset> = 0;
v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int endOffset> = 0;
v0.<org.apache.commons.io.input.buffer.CircularByteBuffer: int currentNumberOfBytes> = 0;
return;
}
}