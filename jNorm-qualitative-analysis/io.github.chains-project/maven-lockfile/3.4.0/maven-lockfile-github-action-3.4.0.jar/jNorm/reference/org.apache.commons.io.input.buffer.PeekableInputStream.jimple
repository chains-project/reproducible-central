public class org.apache.commons.io.input.buffer.PeekableInputStream extends org.apache.commons.io.input.buffer.CircularBufferInputStream
{
public void <init>(java.io.InputStream, int)
{
int v2;
org.apache.commons.io.input.buffer.PeekableInputStream v0;
java.io.InputStream v1;
v0 := @this: org.apache.commons.io.input.buffer.PeekableInputStream;
v1 := @parameter0: java.io.InputStream;
v2 := @parameter1: int;
specialinvoke v0.<org.apache.commons.io.input.buffer.CircularBufferInputStream: void <init>(java.io.InputStream,int)>(v1, v2);
return;
}
public void <init>(java.io.InputStream)
{
org.apache.commons.io.input.buffer.PeekableInputStream v0;
java.io.InputStream v1;
v0 := @this: org.apache.commons.io.input.buffer.PeekableInputStream;
v1 := @parameter0: java.io.InputStream;
specialinvoke v0.<org.apache.commons.io.input.buffer.CircularBufferInputStream: void <init>(java.io.InputStream)>(v1);
return;
}
public boolean peek(byte[]) throws java.io.IOException
{
byte[] v1;
int v2;
org.apache.commons.io.input.buffer.PeekableInputStream v0;
boolean v3;
v0 := @this: org.apache.commons.io.input.buffer.PeekableInputStream;
v1 := @parameter0: byte[];
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "sourceBuffer");
v2 = lengthof v1;
v3 = virtualinvoke v0.<org.apache.commons.io.input.buffer.PeekableInputStream: boolean peek(byte[],int,int)>(v1, 0, v2);
return v3;
}
public boolean peek(byte[], int, int) throws java.io.IOException
{
byte[] v1;
java.lang.IllegalArgumentException v6;
org.apache.commons.io.input.buffer.CircularByteBuffer v10, v13;
int v11, v12, v2, v3, v4, v5, v7, v8;
java.lang.String v9;
org.apache.commons.io.input.buffer.PeekableInputStream v0;
boolean v14;
v0 := @this: org.apache.commons.io.input.buffer.PeekableInputStream;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v1, "sourceBuffer");
v4 = lengthof v1;
v5 = v0.<org.apache.commons.io.input.buffer.PeekableInputStream: int bufferSize>;
if v4 <= v5 goto label1;
v6 = new java.lang.IllegalArgumentException;
v7 = lengthof v1;
v8 = v0.<org.apache.commons.io.input.buffer.PeekableInputStream: int bufferSize>;
v9 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int,int)>(v7, v8) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Peek request size of \u0001 bytes exceeds buffer size of \u0001 bytes");
specialinvoke v6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v9);
throw v6;
label1:
v10 = v0.<org.apache.commons.io.input.buffer.PeekableInputStream: org.apache.commons.io.input.buffer.CircularByteBuffer buffer>;
v11 = virtualinvoke v10.<org.apache.commons.io.input.buffer.CircularByteBuffer: int getCurrentNumberOfBytes()>();
v12 = lengthof v1;
if v11 >= v12 goto label2;
virtualinvoke v0.<org.apache.commons.io.input.buffer.PeekableInputStream: void fillBuffer()>();
label2:
v13 = v0.<org.apache.commons.io.input.buffer.PeekableInputStream: org.apache.commons.io.input.buffer.CircularByteBuffer buffer>;
v14 = virtualinvoke v13.<org.apache.commons.io.input.buffer.CircularByteBuffer: boolean peek(byte[],int,int)>(v1, v2, v3);
return v14;
}
}