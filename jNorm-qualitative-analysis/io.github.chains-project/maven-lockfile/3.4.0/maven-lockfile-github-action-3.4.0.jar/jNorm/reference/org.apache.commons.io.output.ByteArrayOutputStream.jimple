public class org.apache.commons.io.output.ByteArrayOutputStream extends org.apache.commons.io.output.AbstractByteArrayOutputStream
{
public void <init>()
{
org.apache.commons.io.output.ByteArrayOutputStream v0;
v0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;
specialinvoke v0.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>(int)>(1024);
return;
}
public void <init>(int)
{
java.lang.Throwable v4;
int v1;
org.apache.commons.io.output.ByteArrayOutputStream v0;
java.lang.String v3;
java.lang.IllegalArgumentException v2;
v0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;
v1 := @parameter0: int;
specialinvoke v0.<org.apache.commons.io.output.AbstractByteArrayOutputStream: void <init>()>();
if v1 >= 0 goto label1;
v2 = new java.lang.IllegalArgumentException;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v1) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Negative initial size: \u0001");
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v3);
throw v2;
label1:
entermonitor v0;
label2:
virtualinvoke v0.<org.apache.commons.io.output.ByteArrayOutputStream: void needNewBuffer(int)>(v1);
exitmonitor v0;
label3:
goto label5;
label4:
v4 := @caughtexception;
exitmonitor v0;
throw v4;
label5:
return;
catch java.lang.Throwable from label2 to label3 with label4;
}
public void write(byte[], int, int)
{
java.lang.Throwable v9;
byte[] v1;
java.lang.IndexOutOfBoundsException v8;
org.apache.commons.io.output.ByteArrayOutputStream v0;
int v2, v3, v4, v5, v6, v7;
v0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;
v1 := @parameter0: byte[];
v2 := @parameter1: int;
v3 := @parameter2: int;
if v2 < 0 goto label1;
v4 = lengthof v1;
if v2 > v4 goto label1;
if v3 < 0 goto label1;
v5 = v2 + v3;
v6 = lengthof v1;
if v5 > v6 goto label1;
v7 = v2 + v3;
if v7 >= 0 goto label2;
label1:
v8 = new java.lang.IndexOutOfBoundsException;
specialinvoke v8.<java.lang.IndexOutOfBoundsException: void <init>()>();
throw v8;
label2:
if v3 != 0 goto label3;
return;
label3:
entermonitor v0;
label4:
virtualinvoke v0.<org.apache.commons.io.output.ByteArrayOutputStream: void writeImpl(byte[],int,int)>(v1, v2, v3);
exitmonitor v0;
label5:
goto label7;
label6:
v9 := @caughtexception;
exitmonitor v0;
throw v9;
label7:
return;
catch java.lang.Throwable from label4 to label5 with label6;
}
public synchronized void write(int)
{
int v1;
org.apache.commons.io.output.ByteArrayOutputStream v0;
v0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;
v1 := @parameter0: int;
virtualinvoke v0.<org.apache.commons.io.output.ByteArrayOutputStream: void writeImpl(int)>(v1);
return;
}
public synchronized int write(java.io.InputStream) throws java.io.IOException
{
int v2;
org.apache.commons.io.output.ByteArrayOutputStream v0;
java.io.InputStream v1;
v0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;
v1 := @parameter0: java.io.InputStream;
v2 = virtualinvoke v0.<org.apache.commons.io.output.ByteArrayOutputStream: int writeImpl(java.io.InputStream)>(v1);
return v2;
}
public synchronized int size()
{
int v1;
org.apache.commons.io.output.ByteArrayOutputStream v0;
v0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;
v1 = v0.<org.apache.commons.io.output.ByteArrayOutputStream: int count>;
return v1;
}
public synchronized void reset()
{
org.apache.commons.io.output.ByteArrayOutputStream v0;
v0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;
virtualinvoke v0.<org.apache.commons.io.output.ByteArrayOutputStream: void resetImpl()>();
return;
}
public synchronized void writeTo(java.io.OutputStream) throws java.io.IOException
{
java.io.OutputStream v1;
org.apache.commons.io.output.ByteArrayOutputStream v0;
v0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;
v1 := @parameter0: java.io.OutputStream;
virtualinvoke v0.<org.apache.commons.io.output.ByteArrayOutputStream: void writeToImpl(java.io.OutputStream)>(v1);
return;
}
public static java.io.InputStream toBufferedInputStream(java.io.InputStream) throws java.io.IOException
{
java.io.InputStream v0, v1;
v0 := @parameter0: java.io.InputStream;
v1 = staticinvoke <org.apache.commons.io.output.ByteArrayOutputStream: java.io.InputStream toBufferedInputStream(java.io.InputStream,int)>(v0, 1024);
return v1;
}
public static java.io.InputStream toBufferedInputStream(java.io.InputStream, int) throws java.io.IOException
{
java.lang.Throwable v4;
int v1;
org.apache.commons.io.output.ByteArrayOutputStream v2;
java.io.InputStream v0, v3;
v0 := @parameter0: java.io.InputStream;
v1 := @parameter1: int;
v2 = new org.apache.commons.io.output.ByteArrayOutputStream;
specialinvoke v2.<org.apache.commons.io.output.ByteArrayOutputStream: void <init>(int)>(v1);
label1:
virtualinvoke v2.<org.apache.commons.io.output.ByteArrayOutputStream: int write(java.io.InputStream)>(v0);
v3 = virtualinvoke v2.<org.apache.commons.io.output.ByteArrayOutputStream: java.io.InputStream toInputStream()>();
label2:
virtualinvoke v2.<org.apache.commons.io.output.ByteArrayOutputStream: void close()>();
return v3;
label3:
v4 := @caughtexception;
throw v4;
catch java.lang.Throwable from label1 to label2 with label3;
}
public synchronized java.io.InputStream toInputStream()
{
org.apache.commons.io.output.ByteArrayOutputStream v0;
org.apache.commons.io.output.AbstractByteArrayOutputStream$InputStreamConstructor v1;
java.io.InputStream v2;
v0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;
v1 = staticinvoke <org.apache.commons.io.output.ByteArrayOutputStream$init__266: org.apache.commons.io.output.AbstractByteArrayOutputStream$InputStreamConstructor bootstrap$()>();
v2 = virtualinvoke v0.<org.apache.commons.io.output.ByteArrayOutputStream: java.io.InputStream toInputStream(org.apache.commons.io.output.AbstractByteArrayOutputStream$InputStreamConstructor)>(v1);
return v2;
}
public synchronized byte[] toByteArray()
{
org.apache.commons.io.output.ByteArrayOutputStream v0;
byte[] v1;
v0 := @this: org.apache.commons.io.output.ByteArrayOutputStream;
v1 = virtualinvoke v0.<org.apache.commons.io.output.ByteArrayOutputStream: byte[] toByteArrayImpl()>();
return v1;
}
}