public class org.apache.commons.io.output.ChunkedWriter extends java.io.FilterWriter
{
private static final int DEFAULT_CHUNK_SIZE;
private final int chunkSize;
public void <init>(java.io.Writer, int)
{
int v2;
java.io.Writer v1;
org.apache.commons.io.output.ChunkedWriter v0;
java.lang.IllegalArgumentException v3;
v0 := @this: org.apache.commons.io.output.ChunkedWriter;
v1 := @parameter0: java.io.Writer;
v2 := @parameter1: int;
specialinvoke v0.<java.io.FilterWriter: void <init>(java.io.Writer)>(v1);
if v2 > 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>()>();
throw v3;
label1:
v0.<org.apache.commons.io.output.ChunkedWriter: int chunkSize> = v2;
return;
}
public void <init>(java.io.Writer)
{
java.io.Writer v1;
org.apache.commons.io.output.ChunkedWriter v0;
v0 := @this: org.apache.commons.io.output.ChunkedWriter;
v1 := @parameter0: java.io.Writer;
specialinvoke v0.<org.apache.commons.io.output.ChunkedWriter: void <init>(java.io.Writer,int)>(v1, 4096);
return;
}
public void write(char[], int, int) throws java.io.IOException
{
org.apache.commons.io.output.ChunkedWriter v0;
int v2, v3, v4, v5, v6, v7;
java.io.Writer v8;
char[] v1;
v0 := @this: org.apache.commons.io.output.ChunkedWriter;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v3;
v5 = v2;
label1:
if v4 <= 0 goto label2;
v6 = v0.<org.apache.commons.io.output.ChunkedWriter: int chunkSize>;
v7 = staticinvoke <java.lang.Math: int min(int,int)>(v4, v6);
v8 = v0.<org.apache.commons.io.output.ChunkedWriter: java.io.Writer out>;
virtualinvoke v8.<java.io.Writer: void write(char[],int,int)>(v1, v5, v7);
v4 = v4 - v7;
v5 = v5 + v7;
goto label1;
label2:
return;
}
}