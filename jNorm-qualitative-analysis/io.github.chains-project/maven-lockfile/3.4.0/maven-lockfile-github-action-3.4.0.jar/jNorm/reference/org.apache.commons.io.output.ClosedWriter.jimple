public class org.apache.commons.io.output.ClosedWriter extends java.io.Writer
{
public static final org.apache.commons.io.output.ClosedWriter CLOSED_WRITER;
public void <init>()
{
org.apache.commons.io.output.ClosedWriter v0;
v0 := @this: org.apache.commons.io.output.ClosedWriter;
specialinvoke v0.<java.io.Writer: void <init>()>();
return;
}
public void write(char[], int, int) throws java.io.IOException
{
org.apache.commons.io.output.ClosedWriter v0;
int v2, v3;
char[] v1;
java.io.IOException v4;
java.lang.String v5, v6;
v0 := @this: org.apache.commons.io.output.ClosedWriter;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = new java.io.IOException;
v5 = new java.lang.String;
specialinvoke v5.<java.lang.String: void <init>(char[])>(v1);
v6 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,int,int)>(v5, v2, v3) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("write(\u0001, \u0001, \u0001) failed: stream is closed");
specialinvoke v4.<java.io.IOException: void <init>(java.lang.String)>(v6);
throw v4;
}
public void flush() throws java.io.IOException
{
org.apache.commons.io.output.ClosedWriter v0;
java.io.IOException v1;
v0 := @this: org.apache.commons.io.output.ClosedWriter;
v1 = new java.io.IOException;
specialinvoke v1.<java.io.IOException: void <init>(java.lang.String)>("flush() failed: stream is closed");
throw v1;
}
public void close() throws java.io.IOException
{
org.apache.commons.io.output.ClosedWriter v0;
v0 := @this: org.apache.commons.io.output.ClosedWriter;
return;
}
static void <clinit>()
{
org.apache.commons.io.output.ClosedWriter v0;
v0 = new org.apache.commons.io.output.ClosedWriter;
specialinvoke v0.<org.apache.commons.io.output.ClosedWriter: void <init>()>();
<org.apache.commons.io.output.ClosedWriter: org.apache.commons.io.output.ClosedWriter CLOSED_WRITER> = v0;
return;
}
}