public class org.apache.commons.io.output.XmlStreamWriter extends java.io.Writer
{
private static final int BUFFER_SIZE;
private final java.io.OutputStream out;
private final java.lang.String defaultEncoding;
private java.io.StringWriter xmlPrologWriter;
private java.io.Writer writer;
private java.lang.String encoding;
static final java.util.regex.Pattern ENCODING_PATTERN;
public void <init>(java.io.OutputStream)
{
java.io.OutputStream v1;
org.apache.commons.io.output.XmlStreamWriter v0;
v0 := @this: org.apache.commons.io.output.XmlStreamWriter;
v1 := @parameter0: java.io.OutputStream;
specialinvoke v0.<org.apache.commons.io.output.XmlStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(v1, null);
return;
}
public void <init>(java.io.OutputStream, java.lang.String)
{
java.io.OutputStream v1;
org.apache.commons.io.output.XmlStreamWriter v0;
java.io.StringWriter v3;
java.lang.String v2, v4;
v0 := @this: org.apache.commons.io.output.XmlStreamWriter;
v1 := @parameter0: java.io.OutputStream;
v2 := @parameter1: java.lang.String;
specialinvoke v0.<java.io.Writer: void <init>()>();
v3 = new java.io.StringWriter;
specialinvoke v3.<java.io.StringWriter: void <init>(int)>(8192);
v0.<org.apache.commons.io.output.XmlStreamWriter: java.io.StringWriter xmlPrologWriter> = v3;
v0.<org.apache.commons.io.output.XmlStreamWriter: java.io.OutputStream out> = v1;
if v2 == null goto label1;
v4 = v2;
goto label2;
label1:
v4 = "UTF-8";
label2:
v0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String defaultEncoding> = v4;
return;
}
public void <init>(java.io.File) throws java.io.FileNotFoundException
{
org.apache.commons.io.output.XmlStreamWriter v0;
java.io.File v1;
v0 := @this: org.apache.commons.io.output.XmlStreamWriter;
v1 := @parameter0: java.io.File;
specialinvoke v0.<org.apache.commons.io.output.XmlStreamWriter: void <init>(java.io.File,java.lang.String)>(v1, null);
return;
}
public void <init>(java.io.File, java.lang.String) throws java.io.FileNotFoundException
{
org.apache.commons.io.output.XmlStreamWriter v0;
java.io.FileOutputStream v3;
java.lang.String v2;
java.io.File v1;
v0 := @this: org.apache.commons.io.output.XmlStreamWriter;
v1 := @parameter0: java.io.File;
v2 := @parameter1: java.lang.String;
v3 = new java.io.FileOutputStream;
specialinvoke v3.<java.io.FileOutputStream: void <init>(java.io.File)>(v1);
specialinvoke v0.<org.apache.commons.io.output.XmlStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(v3, v2);
return;
}
public java.lang.String getEncoding()
{
org.apache.commons.io.output.XmlStreamWriter v0;
java.lang.String v1;
v0 := @this: org.apache.commons.io.output.XmlStreamWriter;
v1 = v0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding>;
return v1;
}
public java.lang.String getDefaultEncoding()
{
org.apache.commons.io.output.XmlStreamWriter v0;
java.lang.String v1;
v0 := @this: org.apache.commons.io.output.XmlStreamWriter;
v1 = v0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String defaultEncoding>;
return v1;
}
public void close() throws java.io.IOException
{
java.io.OutputStream v4;
org.apache.commons.io.output.XmlStreamWriter v0;
java.io.StringWriter v7;
java.io.Writer v1, v6, v9;
java.io.OutputStreamWriter v3;
java.lang.String v2, v5, v8;
v0 := @this: org.apache.commons.io.output.XmlStreamWriter;
v1 = v0.<org.apache.commons.io.output.XmlStreamWriter: java.io.Writer writer>;
if v1 != null goto label1;
v2 = v0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String defaultEncoding>;
v0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding> = v2;
v3 = new java.io.OutputStreamWriter;
v4 = v0.<org.apache.commons.io.output.XmlStreamWriter: java.io.OutputStream out>;
v5 = v0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding>;
specialinvoke v3.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(v4, v5);
v0.<org.apache.commons.io.output.XmlStreamWriter: java.io.Writer writer> = v3;
v6 = v0.<org.apache.commons.io.output.XmlStreamWriter: java.io.Writer writer>;
v7 = v0.<org.apache.commons.io.output.XmlStreamWriter: java.io.StringWriter xmlPrologWriter>;
v8 = virtualinvoke v7.<java.io.StringWriter: java.lang.String toString()>();
virtualinvoke v6.<java.io.Writer: void write(java.lang.String)>(v8);
label1:
v9 = v0.<org.apache.commons.io.output.XmlStreamWriter: java.io.Writer writer>;
virtualinvoke v9.<java.io.Writer: void close()>();
return;
}
public void flush() throws java.io.IOException
{
java.io.Writer v1, v2;
org.apache.commons.io.output.XmlStreamWriter v0;
v0 := @this: org.apache.commons.io.output.XmlStreamWriter;
v1 = v0.<org.apache.commons.io.output.XmlStreamWriter: java.io.Writer writer>;
if v1 == null goto label1;
v2 = v0.<org.apache.commons.io.output.XmlStreamWriter: java.io.Writer writer>;
virtualinvoke v2.<java.io.Writer: void flush()>();
label1:
return;
}
private void detectEncoding(char[], int, int) throws java.io.IOException
{
java.util.regex.Matcher v17;
java.util.Locale v20;
boolean v13, v18;
java.io.Writer v35, v37;
java.util.regex.Pattern v15;
java.lang.StringBuffer v6;
int v11, v14, v2, v24, v25, v28, v3, v38, v39, v4, v7, v8, v9;
java.io.OutputStreamWriter v32;
java.lang.String v12, v16, v19, v21, v22, v23, v26, v27, v29, v30, v31, v34, v36;
java.io.OutputStream v33;
org.apache.commons.io.output.XmlStreamWriter v0;
java.io.StringWriter v10, v5;
char[] v1;
v0 := @this: org.apache.commons.io.output.XmlStreamWriter;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v3;
v5 = v0.<org.apache.commons.io.output.XmlStreamWriter: java.io.StringWriter xmlPrologWriter>;
v6 = virtualinvoke v5.<java.io.StringWriter: java.lang.StringBuffer getBuffer()>();
v7 = virtualinvoke v6.<java.lang.StringBuffer: int length()>();
v8 = v7 + v3;
if v8 <= 8192 goto label1;
v9 = virtualinvoke v6.<java.lang.StringBuffer: int length()>();
v4 = 8192 - v9;
label1:
v10 = v0.<org.apache.commons.io.output.XmlStreamWriter: java.io.StringWriter xmlPrologWriter>;
virtualinvoke v10.<java.io.StringWriter: void write(char[],int,int)>(v1, v2, v4);
v11 = virtualinvoke v6.<java.lang.StringBuffer: int length()>();
if v11 < 5 goto label6;
v12 = virtualinvoke v6.<java.lang.StringBuffer: java.lang.String substring(int,int)>(0, 5);
v13 = virtualinvoke v12.<java.lang.String: boolean equals(java.lang.Object)>("<?xml");
if v13 == 0 goto label4;
v14 = virtualinvoke v6.<java.lang.StringBuffer: int indexOf(java.lang.String)>("?>");
if v14 <= 0 goto label3;
v15 = <org.apache.commons.io.output.XmlStreamWriter: java.util.regex.Pattern ENCODING_PATTERN>;
v16 = virtualinvoke v6.<java.lang.StringBuffer: java.lang.String substring(int,int)>(0, v14);
v17 = virtualinvoke v15.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v16);
v18 = virtualinvoke v17.<java.util.regex.Matcher: boolean find()>();
if v18 == 0 goto label2;
v19 = virtualinvoke v17.<java.util.regex.Matcher: java.lang.String group(int)>(1);
v20 = <java.util.Locale: java.util.Locale ROOT>;
v21 = virtualinvoke v19.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>(v20);
v0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding> = v21;
v22 = v0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding>;
v23 = v0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding>;
v24 = virtualinvoke v23.<java.lang.String: int length()>();
v25 = v24 - 1;
v26 = virtualinvoke v22.<java.lang.String: java.lang.String substring(int,int)>(1, v25);
v0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding> = v26;
goto label5;
label2:
v27 = v0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String defaultEncoding>;
v0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding> = v27;
goto label5;
label3:
v28 = virtualinvoke v6.<java.lang.StringBuffer: int length()>();
if v28 < 8192 goto label5;
v29 = v0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String defaultEncoding>;
v0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding> = v29;
goto label5;
label4:
v30 = v0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String defaultEncoding>;
v0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding> = v30;
label5:
v31 = v0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding>;
if v31 == null goto label6;
v0.<org.apache.commons.io.output.XmlStreamWriter: java.io.StringWriter xmlPrologWriter> = null;
v32 = new java.io.OutputStreamWriter;
v33 = v0.<org.apache.commons.io.output.XmlStreamWriter: java.io.OutputStream out>;
v34 = v0.<org.apache.commons.io.output.XmlStreamWriter: java.lang.String encoding>;
specialinvoke v32.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(v33, v34);
v0.<org.apache.commons.io.output.XmlStreamWriter: java.io.Writer writer> = v32;
v35 = v0.<org.apache.commons.io.output.XmlStreamWriter: java.io.Writer writer>;
v36 = virtualinvoke v6.<java.lang.StringBuffer: java.lang.String toString()>();
virtualinvoke v35.<java.io.Writer: void write(java.lang.String)>(v36);
if v3 <= v4 goto label6;
v37 = v0.<org.apache.commons.io.output.XmlStreamWriter: java.io.Writer writer>;
v38 = v2 + v4;
v39 = v3 - v4;
virtualinvoke v37.<java.io.Writer: void write(char[],int,int)>(v1, v38, v39);
label6:
return;
}
public void write(char[], int, int) throws java.io.IOException
{
org.apache.commons.io.output.XmlStreamWriter v0;
java.io.StringWriter v4;
int v2, v3;
java.io.Writer v5;
char[] v1;
v0 := @this: org.apache.commons.io.output.XmlStreamWriter;
v1 := @parameter0: char[];
v2 := @parameter1: int;
v3 := @parameter2: int;
v4 = v0.<org.apache.commons.io.output.XmlStreamWriter: java.io.StringWriter xmlPrologWriter>;
if v4 == null goto label1;
specialinvoke v0.<org.apache.commons.io.output.XmlStreamWriter: void detectEncoding(char[],int,int)>(v1, v2, v3);
goto label2;
label1:
v5 = v0.<org.apache.commons.io.output.XmlStreamWriter: java.io.Writer writer>;
virtualinvoke v5.<java.io.Writer: void write(char[],int,int)>(v1, v2, v3);
label2:
return;
}
static void <clinit>()
{
java.util.regex.Pattern v0;
v0 = <org.apache.commons.io.input.XmlStreamReader: java.util.regex.Pattern ENCODING_PATTERN>;
<org.apache.commons.io.output.XmlStreamWriter: java.util.regex.Pattern ENCODING_PATTERN> = v0;
return;
}
}