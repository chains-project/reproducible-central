public class org.apache.commons.lang3.CharUtils extends java.lang.Object
{
private static final java.lang.String[] CHAR_STRING_ARRAY;
private static final char[] HEX_DIGITS;
public static final char LF;
public static final char CR;
public static final char NUL;
public void <init>()
{
org.apache.commons.lang3.CharUtils v0;
v0 := @this: org.apache.commons.lang3.CharUtils;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.lang.Character toCharacterObject(char)
{
char v0;
java.lang.Character v1;
v0 := @parameter0: char;
v1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(v0);
return v1;
}
public static java.lang.Character toCharacterObject(java.lang.String)
{
java.lang.Character v3;
char v2;
java.lang.String v0;
boolean v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v1 == 0 goto label1;
return null;
label1:
v2 = virtualinvoke v0.<java.lang.String: char charAt(int)>(0);
v3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(v2);
return v3;
}
public static char toChar(java.lang.Character)
{
char v2;
java.lang.Object[] v1;
java.lang.Character v0;
v0 := @parameter0: java.lang.Character;
v1 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v0, "ch", v1);
v2 = virtualinvoke v0.<java.lang.Character: char charValue()>();
return v2;
}
public static char toChar(java.lang.Character, char)
{
char v1, v2;
java.lang.Character v0;
v0 := @parameter0: java.lang.Character;
v1 := @parameter1: char;
if v0 != null goto label1;
return v1;
label1:
v2 = virtualinvoke v0.<java.lang.Character: char charValue()>();
return v2;
}
public static char toChar(java.lang.String)
{
char v2;
java.lang.Object[] v1;
java.lang.String v0;
v0 := @parameter0: java.lang.String;
v1 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.CharSequence notEmpty(java.lang.CharSequence,java.lang.String,java.lang.Object[])>(v0, "The String must not be empty", v1);
v2 = virtualinvoke v0.<java.lang.String: char charAt(int)>(0);
return v2;
}
public static char toChar(java.lang.String, char)
{
char v1, v3;
java.lang.String v0;
boolean v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: char;
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 == 0 goto label1;
return v1;
label1:
v3 = virtualinvoke v0.<java.lang.String: char charAt(int)>(0);
return v3;
}
public static int toIntValue(char)
{
int v4;
char v0;
java.lang.String v3;
java.lang.IllegalArgumentException v2;
boolean v1;
v0 := @parameter0: char;
v1 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiNumeric(char)>(v0);
if v1 != 0 goto label1;
v2 = new java.lang.IllegalArgumentException;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (char)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("The character \u0001 is not in the range \'0\' - \'9\'");
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v3);
throw v2;
label1:
v4 = v0 - 48;
return v4;
}
public static int toIntValue(char, int)
{
int v1, v3;
char v0;
boolean v2;
v0 := @parameter0: char;
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiNumeric(char)>(v0);
if v2 != 0 goto label1;
return v1;
label1:
v3 = v0 - 48;
return v3;
}
public static int toIntValue(java.lang.Character)
{
java.lang.Object[] v1;
java.lang.Character v0;
int v3;
char v2;
v0 := @parameter0: java.lang.Character;
v1 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v0, "ch", v1);
v2 = virtualinvoke v0.<java.lang.Character: char charValue()>();
v3 = staticinvoke <org.apache.commons.lang3.CharUtils: int toIntValue(char)>(v2);
return v3;
}
public static int toIntValue(java.lang.Character, int)
{
java.lang.Character v0;
int v1, v3;
char v2;
v0 := @parameter0: java.lang.Character;
v1 := @parameter1: int;
if v0 != null goto label1;
return v1;
label1:
v2 = virtualinvoke v0.<java.lang.Character: char charValue()>();
v3 = staticinvoke <org.apache.commons.lang3.CharUtils: int toIntValue(char,int)>(v2, v1);
return v3;
}
public static java.lang.String toString(char)
{
char[] v4;
char v0;
java.lang.String[] v1;
java.lang.String v2, v3;
v0 := @parameter0: char;
if v0 >= 128 goto label1;
v1 = <org.apache.commons.lang3.CharUtils: java.lang.String[] CHAR_STRING_ARRAY>;
v2 = v1[v0];
return v2;
label1:
v3 = new java.lang.String;
v4 = newarray (char)[1];
v4[0] = v0;
specialinvoke v3.<java.lang.String: void <init>(char[])>(v4);
return v3;
}
public static java.lang.String toString(java.lang.Character)
{
char v1;
java.lang.String v2;
java.lang.Character v0;
v0 := @parameter0: java.lang.Character;
if v0 != null goto label1;
return null;
label1:
v1 = virtualinvoke v0.<java.lang.Character: char charValue()>();
v2 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.String toString(char)>(v1);
return v2;
}
public static java.lang.String unicodeEscaped(char)
{
int v10, v11, v2, v3, v6, v7;
java.lang.String v16;
char v0, v12, v14, v15, v4, v8;
char[] v1, v13, v5, v9;
v0 := @parameter0: char;
v1 = <org.apache.commons.lang3.CharUtils: char[] HEX_DIGITS>;
v2 = v0 >> 12;
v3 = v2 & 15;
v4 = v1[v3];
v5 = <org.apache.commons.lang3.CharUtils: char[] HEX_DIGITS>;
v6 = v0 >> 8;
v7 = v6 & 15;
v8 = v5[v7];
v9 = <org.apache.commons.lang3.CharUtils: char[] HEX_DIGITS>;
v10 = v0 >> 4;
v11 = v10 & 15;
v12 = v9[v11];
v13 = <org.apache.commons.lang3.CharUtils: char[] HEX_DIGITS>;
v14 = v0 & 15;
v15 = v13[v14];
v16 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (char,char,char,char)>(v4, v8, v12, v15) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\\u\u0001\u0001\u0001\u0001");
return v16;
}
public static java.lang.String unicodeEscaped(java.lang.Character)
{
char v1;
java.lang.String v2;
java.lang.Character v0;
v0 := @parameter0: java.lang.Character;
if v0 != null goto label1;
return null;
label1:
v1 = virtualinvoke v0.<java.lang.Character: char charValue()>();
v2 = staticinvoke <org.apache.commons.lang3.CharUtils: java.lang.String unicodeEscaped(char)>(v1);
return v2;
}
public static boolean isAscii(char)
{
char v0;
boolean v1;
v0 := @parameter0: char;
if v0 >= 128 goto label1;
v1 = 1;
goto label2;
label1:
v1 = 0;
label2:
return v1;
}
public static boolean isAsciiPrintable(char)
{
char v0;
boolean v1;
v0 := @parameter0: char;
if v0 < 32 goto label1;
if v0 >= 127 goto label1;
v1 = 1;
goto label2;
label1:
v1 = 0;
label2:
return v1;
}
public static boolean isAsciiControl(char)
{
char v0;
boolean v1;
v0 := @parameter0: char;
if v0 < 32 goto label1;
if v0 != 127 goto label2;
label1:
v1 = 1;
goto label3;
label2:
v1 = 0;
label3:
return v1;
}
public static boolean isAsciiAlpha(char)
{
char v0;
boolean v1, v2, v3;
v0 := @parameter0: char;
v1 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlphaUpper(char)>(v0);
if v1 != 0 goto label1;
v2 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlphaLower(char)>(v0);
if v2 == 0 goto label2;
label1:
v3 = 1;
goto label3;
label2:
v3 = 0;
label3:
return v3;
}
public static boolean isAsciiAlphaUpper(char)
{
char v0;
boolean v1;
v0 := @parameter0: char;
if v0 < 65 goto label1;
if v0 > 90 goto label1;
v1 = 1;
goto label2;
label1:
v1 = 0;
label2:
return v1;
}
public static boolean isAsciiAlphaLower(char)
{
char v0;
boolean v1;
v0 := @parameter0: char;
if v0 < 97 goto label1;
if v0 > 122 goto label1;
v1 = 1;
goto label2;
label1:
v1 = 0;
label2:
return v1;
}
public static boolean isAsciiNumeric(char)
{
char v0;
boolean v1;
v0 := @parameter0: char;
if v0 < 48 goto label1;
if v0 > 57 goto label1;
v1 = 1;
goto label2;
label1:
v1 = 0;
label2:
return v1;
}
public static boolean isAsciiAlphanumeric(char)
{
char v0;
boolean v1, v2, v3;
v0 := @parameter0: char;
v1 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiAlpha(char)>(v0);
if v1 != 0 goto label1;
v2 = staticinvoke <org.apache.commons.lang3.CharUtils: boolean isAsciiNumeric(char)>(v0);
if v2 == 0 goto label2;
label1:
v3 = 1;
goto label3;
label2:
v3 = 0;
label3:
return v3;
}
public static int compare(char, char)
{
int v2;
char v0, v1;
v0 := @parameter0: char;
v1 := @parameter1: char;
v2 = v0 - v1;
return v2;
}
static void <clinit>()
{
int v3;
char[] v1;
java.lang.String[] v0, v2, v4;
java.lang.String v5;
v0 = newarray (java.lang.String)[128];
<org.apache.commons.lang3.CharUtils: java.lang.String[] CHAR_STRING_ARRAY> = v0;
v1 = newarray (char)[16];
v1[0] = 48;
v1[1] = 49;
v1[2] = 50;
v1[3] = 51;
v1[4] = 52;
v1[5] = 53;
v1[6] = 54;
v1[7] = 55;
v1[8] = 56;
v1[9] = 57;
v1[10] = 97;
v1[11] = 98;
v1[12] = 99;
v1[13] = 100;
v1[14] = 101;
v1[15] = 102;
<org.apache.commons.lang3.CharUtils: char[] HEX_DIGITS> = v1;
label1:
v2 = <org.apache.commons.lang3.CharUtils: java.lang.String[] CHAR_STRING_ARRAY>;
v3 = lengthof v2;
if 0 >= v3 goto label2;
v4 = <org.apache.commons.lang3.CharUtils: java.lang.String[] CHAR_STRING_ARRAY>;
v5 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(0);
v4[0] = v5;
goto label1;
label2:
return;
}
}