class org.apache.commons.lang3.ClassUtils$2 extends java.lang.Object implements java.util.Iterator
{
java.util.Iterator interfaces;
final java.util.Iterator val$wrapped;
final java.util.Set val$seenInterfaces;
void <init>(java.util.Iterator, java.util.Set)
{
org.apache.commons.lang3.ClassUtils$2 v0;
java.util.Iterator v1, v4;
java.util.Set v2, v3;
v0 := @this: org.apache.commons.lang3.ClassUtils$2;
v1 := @parameter0: java.util.Iterator;
v2 := @parameter1: java.util.Set;
v0.<org.apache.commons.lang3.ClassUtils$2: java.util.Iterator val$wrapped> = v1;
v0.<org.apache.commons.lang3.ClassUtils$2: java.util.Set val$seenInterfaces> = v2;
specialinvoke v0.<java.lang.Object: void <init>()>();
v3 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();
v4 = interfaceinvoke v3.<java.util.Set: java.util.Iterator iterator()>();
v0.<org.apache.commons.lang3.ClassUtils$2: java.util.Iterator interfaces> = v4;
return;
}
public boolean hasNext()
{
org.apache.commons.lang3.ClassUtils$2 v0;
java.util.Iterator v1, v3;
boolean v2, v4, v5;
v0 := @this: org.apache.commons.lang3.ClassUtils$2;
v1 = v0.<org.apache.commons.lang3.ClassUtils$2: java.util.Iterator interfaces>;
v2 = interfaceinvoke v1.<java.util.Iterator: boolean hasNext()>();
if v2 != 0 goto label1;
v3 = v0.<org.apache.commons.lang3.ClassUtils$2: java.util.Iterator val$wrapped>;
v4 = interfaceinvoke v3.<java.util.Iterator: boolean hasNext()>();
if v4 == 0 goto label2;
label1:
v5 = 1;
goto label3;
label2:
v5 = 0;
label3:
return v5;
}
public java.lang.Class next()
{
java.util.Iterator v1, v3, v6, v9;
java.util.Set v5;
org.apache.commons.lang3.ClassUtils$2 v0;
java.lang.Object v4, v7;
java.util.LinkedHashSet v8;
boolean v2;
v0 := @this: org.apache.commons.lang3.ClassUtils$2;
v1 = v0.<org.apache.commons.lang3.ClassUtils$2: java.util.Iterator interfaces>;
v2 = interfaceinvoke v1.<java.util.Iterator: boolean hasNext()>();
if v2 == 0 goto label1;
v3 = v0.<org.apache.commons.lang3.ClassUtils$2: java.util.Iterator interfaces>;
v4 = interfaceinvoke v3.<java.util.Iterator: java.lang.Object next()>();
v5 = v0.<org.apache.commons.lang3.ClassUtils$2: java.util.Set val$seenInterfaces>;
interfaceinvoke v5.<java.util.Set: boolean add(java.lang.Object)>(v4);
return v4;
label1:
v6 = v0.<org.apache.commons.lang3.ClassUtils$2: java.util.Iterator val$wrapped>;
v7 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v8 = new java.util.LinkedHashSet;
specialinvoke v8.<java.util.LinkedHashSet: void <init>()>();
specialinvoke v0.<org.apache.commons.lang3.ClassUtils$2: void walkInterfaces(java.util.Set,java.lang.Class)>(v8, v7);
v9 = interfaceinvoke v8.<java.util.Set: java.util.Iterator iterator()>();
v0.<org.apache.commons.lang3.ClassUtils$2: java.util.Iterator interfaces> = v9;
return v7;
}
private void walkInterfaces(java.util.Set, java.lang.Class)
{
java.lang.Class[] v3;
java.util.Set v1, v7;
org.apache.commons.lang3.ClassUtils$2 v0;
int v4, v5;
java.lang.Class v2, v6;
boolean v8;
v0 := @this: org.apache.commons.lang3.ClassUtils$2;
v1 := @parameter0: java.util.Set;
v2 := @parameter1: java.lang.Class;
v3 = virtualinvoke v2.<java.lang.Class: java.lang.Class[] getInterfaces()>();
v4 = lengthof v3;
v5 = 0;
label1:
if v5 >= v4 goto label3;
v6 = v3[v5];
v7 = v0.<org.apache.commons.lang3.ClassUtils$2: java.util.Set val$seenInterfaces>;
v8 = interfaceinvoke v7.<java.util.Set: boolean contains(java.lang.Object)>(v6);
if v8 != 0 goto label2;
interfaceinvoke v1.<java.util.Set: boolean add(java.lang.Object)>(v6);
label2:
specialinvoke v0.<org.apache.commons.lang3.ClassUtils$2: void walkInterfaces(java.util.Set,java.lang.Class)>(v1, v6);
v5 = v5 + 1;
goto label1;
label3:
return;
}
public void remove()
{
org.apache.commons.lang3.ClassUtils$2 v0;
java.lang.UnsupportedOperationException v1;
v0 := @this: org.apache.commons.lang3.ClassUtils$2;
v1 = new java.lang.UnsupportedOperationException;
specialinvoke v1.<java.lang.UnsupportedOperationException: void <init>()>();
throw v1;
}
}