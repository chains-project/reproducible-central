public class org.apache.commons.lang3.ObjectUtils extends java.lang.Object
{
private static final char AT_SIGN;
public static final org.apache.commons.lang3.ObjectUtils$Null NULL;
public static transient boolean allNotNull(java.lang.Object[])
{
java.lang.Object[] v0;
int v1, v2;
java.lang.Object v3;
v0 := @parameter0: java.lang.Object[];
if v0 != null goto label1;
return 0;
label1:
v1 = lengthof v0;
v2 = 0;
label2:
if v2 >= v1 goto label4;
v3 = v0[v2];
if v3 != null goto label3;
return 0;
label3:
v2 = v2 + 1;
goto label2;
label4:
return 1;
}
public static transient boolean allNull(java.lang.Object[])
{
java.lang.Object[] v0;
boolean v1, v2;
v0 := @parameter0: java.lang.Object[];
v1 = staticinvoke <org.apache.commons.lang3.ObjectUtils: boolean anyNotNull(java.lang.Object[])>(v0);
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public static transient boolean anyNotNull(java.lang.Object[])
{
java.lang.Object v1;
java.lang.Object[] v0;
boolean v2;
v0 := @parameter0: java.lang.Object[];
v1 = staticinvoke <org.apache.commons.lang3.ObjectUtils: java.lang.Object firstNonNull(java.lang.Object[])>(v0);
if v1 == null goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public static transient boolean anyNull(java.lang.Object[])
{
java.lang.Object[] v0;
boolean v1, v2;
v0 := @parameter0: java.lang.Object[];
v1 = staticinvoke <org.apache.commons.lang3.ObjectUtils: boolean allNotNull(java.lang.Object[])>(v0);
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public static java.lang.Object clone(java.lang.Object)
{
java.lang.Throwable v30;
java.lang.Object[] v14;
java.lang.NoSuchMethodException v15;
int v7, v9;
java.lang.String v18, v19, v23, v24, v28, v29;
java.lang.reflect.Method v13;
boolean v1, v3, v6;
java.lang.IllegalAccessException v20;
java.lang.Class[] v12;
java.lang.reflect.InvocationTargetException v25;
java.lang.Class v11, v17, v2, v22, v27, v4, v5;
java.lang.Object v0, v10, v8;
org.apache.commons.lang3.exception.CloneFailedException v16, v21, v26;
v0 := @parameter0: java.lang.Object;
v1 = v0 instanceof java.lang.Cloneable;
if v1 == 0 goto label9;
v2 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v3 = virtualinvoke v2.<java.lang.Class: boolean isArray()>();
if v3 == 0 goto label3;
v4 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v5 = virtualinvoke v4.<java.lang.Class: java.lang.Class getComponentType()>();
v6 = virtualinvoke v5.<java.lang.Class: boolean isPrimitive()>();
if v6 == 0 goto label2;
v7 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(v0);
v8 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(v5, v7);
label1:
v9 = v7;
v7 = v7 - 1;
if v9 <= 0 goto label8;
v10 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>(v0, v7);
staticinvoke <java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>(v8, v7, v10);
goto label1;
label2:
v8 = virtualinvoke v0.<java.lang.Object: java.lang.Object clone()>();
goto label8;
label3:
v11 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v12 = newarray (java.lang.Class)[0];
v13 = virtualinvoke v11.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("clone", v12);
v14 = newarray (java.lang.Object)[0];
v8 = virtualinvoke v13.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(v0, v14);
label4:
goto label8;
label5:
v15 := @caughtexception;
v16 = new org.apache.commons.lang3.exception.CloneFailedException;
v17 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v18 = virtualinvoke v17.<java.lang.Class: java.lang.String getName()>();
v19 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v18) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cloneable type \u0001 has no clone method");
specialinvoke v16.<org.apache.commons.lang3.exception.CloneFailedException: void <init>(java.lang.String,java.lang.Throwable)>(v19, v15);
throw v16;
label6:
v20 := @caughtexception;
v21 = new org.apache.commons.lang3.exception.CloneFailedException;
v22 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v23 = virtualinvoke v22.<java.lang.Class: java.lang.String getName()>();
v24 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v23) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Cannot clone Cloneable type \u0001");
specialinvoke v21.<org.apache.commons.lang3.exception.CloneFailedException: void <init>(java.lang.String,java.lang.Throwable)>(v24, v20);
throw v21;
label7:
v25 := @caughtexception;
v26 = new org.apache.commons.lang3.exception.CloneFailedException;
v27 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v28 = virtualinvoke v27.<java.lang.Class: java.lang.String getName()>();
v29 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String)>(v28) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Exception cloning Cloneable type \u0001");
v30 = virtualinvoke v25.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();
specialinvoke v26.<org.apache.commons.lang3.exception.CloneFailedException: void <init>(java.lang.String,java.lang.Throwable)>(v29, v30);
throw v26;
label8:
return v8;
label9:
return null;
catch java.lang.NoSuchMethodException from label3 to label4 with label5;
catch java.lang.IllegalAccessException from label3 to label4 with label6;
catch java.lang.reflect.InvocationTargetException from label3 to label4 with label7;
}
public static java.lang.Object cloneIfPossible(java.lang.Object)
{
java.lang.Object v0, v1, v2;
v0 := @parameter0: java.lang.Object;
v1 = staticinvoke <org.apache.commons.lang3.ObjectUtils: java.lang.Object clone(java.lang.Object)>(v0);
if v1 != null goto label1;
v2 = v0;
goto label2;
label1:
v2 = v1;
label2:
return v2;
}
public static int compare(java.lang.Comparable, java.lang.Comparable)
{
int v2;
java.lang.Comparable v0, v1;
v0 := @parameter0: java.lang.Comparable;
v1 := @parameter1: java.lang.Comparable;
v2 = staticinvoke <org.apache.commons.lang3.ObjectUtils: int compare(java.lang.Comparable,java.lang.Comparable,boolean)>(v0, v1, 0);
return v2;
}
public static int compare(java.lang.Comparable, java.lang.Comparable, boolean)
{
byte v3, v4;
int v5;
java.lang.Comparable v0, v1;
boolean v2;
v0 := @parameter0: java.lang.Comparable;
v1 := @parameter1: java.lang.Comparable;
v2 := @parameter2: boolean;
if v0 != v1 goto label1;
return 0;
label1:
if v0 != null goto label4;
if v2 == 0 goto label2;
v3 = 1;
goto label3;
label2:
v3 = -1;
label3:
return v3;
label4:
if v1 != null goto label7;
if v2 == 0 goto label5;
v4 = -1;
goto label6;
label5:
v4 = 1;
label6:
return v4;
label7:
v5 = interfaceinvoke v0.<java.lang.Comparable: int compareTo(java.lang.Object)>(v1);
return v5;
}
public static boolean CONST(boolean)
{
boolean v0;
v0 := @parameter0: boolean;
return v0;
}
public static byte CONST(byte)
{
byte v0;
v0 := @parameter0: byte;
return v0;
}
public static char CONST(char)
{
char v0;
v0 := @parameter0: char;
return v0;
}
public static double CONST(double)
{
double v0;
v0 := @parameter0: double;
return v0;
}
public static float CONST(float)
{
float v0;
v0 := @parameter0: float;
return v0;
}
public static int CONST(int)
{
int v0;
v0 := @parameter0: int;
return v0;
}
public static long CONST(long)
{
long v0;
v0 := @parameter0: long;
return v0;
}
public static short CONST(short)
{
short v0;
v0 := @parameter0: short;
return v0;
}
public static java.lang.Object CONST(java.lang.Object)
{
java.lang.Object v0;
v0 := @parameter0: java.lang.Object;
return v0;
}
public static byte CONST_BYTE(int)
{
int v0, v1;
java.lang.String v3;
java.lang.IllegalArgumentException v2;
v0 := @parameter0: int;
v1 = (int) -128;
if v0 < v1 goto label1;
if v0 <= 127 goto label2;
label1:
v2 = new java.lang.IllegalArgumentException;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Supplied value must be a valid byte literal between -128 and 127: [\u0001]");
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v3);
throw v2;
label2:
return v0;
}
public static short CONST_SHORT(int)
{
int v0, v1;
java.lang.String v3;
java.lang.IllegalArgumentException v2;
v0 := @parameter0: int;
v1 = (int) -32768;
if v0 < v1 goto label1;
if v0 <= 32767 goto label2;
label1:
v2 = new java.lang.IllegalArgumentException;
v3 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (int)>(v0) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("Supplied value must be a valid byte literal between -32768 and 32767: [\u0001]");
specialinvoke v2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v3);
throw v2;
label2:
return v0;
}
public static java.lang.Object defaultIfNull(java.lang.Object, java.lang.Object)
{
java.lang.Object v0, v1, v2;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
if v0 == null goto label1;
v2 = v0;
goto label2;
label1:
v2 = v1;
label2:
return v2;
}
public static boolean equals(java.lang.Object, java.lang.Object)
{
java.lang.Object v0, v1;
boolean v2;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
if v0 != v1 goto label1;
return 1;
label1:
if v0 == null goto label2;
if v1 != null goto label3;
label2:
return 0;
label3:
v2 = virtualinvoke v0.<java.lang.Object: boolean equals(java.lang.Object)>(v1);
return v2;
}
public static transient java.lang.Object firstNonNull(java.lang.Object[])
{
java.lang.Object[] v0;
int v1, v2;
java.lang.Object v3;
v0 := @parameter0: java.lang.Object[];
if v0 == null goto label3;
v1 = lengthof v0;
v2 = 0;
label1:
if v2 >= v1 goto label3;
v3 = v0[v2];
if v3 == null goto label2;
return v3;
label2:
v2 = v2 + 1;
goto label1;
label3:
return null;
}
public static transient java.lang.Object getFirstNonNull(java.util.function.Supplier[])
{
int v1, v2;
java.lang.Object v4;
java.util.function.Supplier v3;
java.util.function.Supplier[] v0;
v0 := @parameter0: java.util.function.Supplier[];
if v0 == null goto label3;
v1 = lengthof v0;
v2 = 0;
label1:
if v2 >= v1 goto label3;
v3 = v0[v2];
if v3 == null goto label2;
v4 = interfaceinvoke v3.<java.util.function.Supplier: java.lang.Object get()>();
if v4 == null goto label2;
return v4;
label2:
v2 = v2 + 1;
goto label1;
label3:
return null;
}
public static java.lang.Object getIfNull(java.lang.Object, java.util.function.Supplier)
{
java.lang.Object v0, v2;
java.util.function.Supplier v1;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.util.function.Supplier;
if v0 == null goto label1;
v2 = v0;
goto label3;
label1:
if v1 != null goto label2;
v2 = null;
goto label3;
label2:
v2 = interfaceinvoke v1.<java.util.function.Supplier: java.lang.Object get()>();
label3:
return v2;
}
public static int hashCode(java.lang.Object)
{
int v1;
java.lang.Object v0;
v0 := @parameter0: java.lang.Object;
if v0 != null goto label1;
v1 = 0;
goto label2;
label1:
v1 = virtualinvoke v0.<java.lang.Object: int hashCode()>();
label2:
return v1;
}
public static transient int hashCodeMulti(java.lang.Object[])
{
java.lang.Object[] v0;
int v1, v2, v3, v5, v6;
java.lang.Object v4;
v0 := @parameter0: java.lang.Object[];
v1 = 1;
if v0 == null goto label2;
v2 = lengthof v0;
v3 = 0;
label1:
if v3 >= v2 goto label2;
v4 = v0[v3];
v5 = staticinvoke <org.apache.commons.lang3.ObjectUtils: int hashCode(java.lang.Object)>(v4);
v6 = v1 * 31;
v1 = v6 + v5;
v3 = v3 + 1;
goto label1;
label2:
return v1;
}
public static void identityToString(java.lang.Appendable, java.lang.Object) throws java.io.IOException
{
java.lang.Object[] v2;
java.lang.Appendable v0, v5, v6;
int v7;
java.lang.Class v3;
java.lang.Object v1;
java.lang.String v4, v8;
v0 := @parameter0: java.lang.Appendable;
v1 := @parameter1: java.lang.Object;
v2 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v1, "object", v2);
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v4 = virtualinvoke v3.<java.lang.Class: java.lang.String getName()>();
v5 = interfaceinvoke v0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>(v4);
v6 = interfaceinvoke v5.<java.lang.Appendable: java.lang.Appendable append(char)>(64);
v7 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(v1);
v8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v7);
interfaceinvoke v6.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>(v8);
return;
}
public static java.lang.String identityToString(java.lang.Object)
{
int v3, v6, v7, v8, v9;
java.lang.Class v1;
java.lang.Object v0;
java.lang.StringBuilder v10, v11, v5;
java.lang.String v12, v2, v4;
v0 := @parameter0: java.lang.Object;
if v0 != null goto label1;
return null;
label1:
v1 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v2 = virtualinvoke v1.<java.lang.Class: java.lang.String getName()>();
v3 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(v0);
v4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v3);
v5 = new java.lang.StringBuilder;
v6 = virtualinvoke v2.<java.lang.String: int length()>();
v7 = v6 + 1;
v8 = virtualinvoke v4.<java.lang.String: int length()>();
v9 = v7 + v8;
specialinvoke v5.<java.lang.StringBuilder: void <init>(int)>(v9);
v10 = virtualinvoke v5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v2);
v11 = virtualinvoke v10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(64);
virtualinvoke v11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v4);
v12 = virtualinvoke v5.<java.lang.StringBuilder: java.lang.String toString()>();
return v12;
}
public static void identityToString(org.apache.commons.lang3.text.StrBuilder, java.lang.Object)
{
java.lang.Object[] v2;
int v10, v11, v12, v5, v7, v8, v9;
java.lang.Class v3;
java.lang.Object v1;
java.lang.String v4, v6;
org.apache.commons.lang3.text.StrBuilder v0, v13, v14;
v0 := @parameter0: org.apache.commons.lang3.text.StrBuilder;
v1 := @parameter1: java.lang.Object;
v2 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v1, "object", v2);
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v4 = virtualinvoke v3.<java.lang.Class: java.lang.String getName()>();
v5 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(v1);
v6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v5);
v7 = virtualinvoke v0.<org.apache.commons.lang3.text.StrBuilder: int length()>();
v8 = virtualinvoke v4.<java.lang.String: int length()>();
v9 = v7 + v8;
v10 = v9 + 1;
v11 = virtualinvoke v6.<java.lang.String: int length()>();
v12 = v10 + v11;
virtualinvoke v0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder ensureCapacity(int)>(v12);
v13 = virtualinvoke v0.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>(v4);
v14 = virtualinvoke v13.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(char)>(64);
virtualinvoke v14.<org.apache.commons.lang3.text.StrBuilder: org.apache.commons.lang3.text.StrBuilder append(java.lang.String)>(v6);
return;
}
public static void identityToString(java.lang.StringBuffer, java.lang.Object)
{
java.lang.Object[] v2;
java.lang.StringBuffer v0, v13, v14;
int v10, v11, v12, v5, v7, v8, v9;
java.lang.Class v3;
java.lang.Object v1;
java.lang.String v4, v6;
v0 := @parameter0: java.lang.StringBuffer;
v1 := @parameter1: java.lang.Object;
v2 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v1, "object", v2);
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v4 = virtualinvoke v3.<java.lang.Class: java.lang.String getName()>();
v5 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(v1);
v6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v5);
v7 = virtualinvoke v0.<java.lang.StringBuffer: int length()>();
v8 = virtualinvoke v4.<java.lang.String: int length()>();
v9 = v7 + v8;
v10 = v9 + 1;
v11 = virtualinvoke v6.<java.lang.String: int length()>();
v12 = v10 + v11;
virtualinvoke v0.<java.lang.StringBuffer: void ensureCapacity(int)>(v12);
v13 = virtualinvoke v0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(v4);
v14 = virtualinvoke v13.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(64);
virtualinvoke v14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(v6);
return;
}
public static void identityToString(java.lang.StringBuilder, java.lang.Object)
{
java.lang.Object[] v2;
int v10, v11, v12, v5, v7, v8, v9;
java.lang.Class v3;
java.lang.Object v1;
java.lang.StringBuilder v0, v13, v14;
java.lang.String v4, v6;
v0 := @parameter0: java.lang.StringBuilder;
v1 := @parameter1: java.lang.Object;
v2 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v1, "object", v2);
v3 = virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v4 = virtualinvoke v3.<java.lang.Class: java.lang.String getName()>();
v5 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(v1);
v6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(v5);
v7 = virtualinvoke v0.<java.lang.StringBuilder: int length()>();
v8 = virtualinvoke v4.<java.lang.String: int length()>();
v9 = v7 + v8;
v10 = v9 + 1;
v11 = virtualinvoke v6.<java.lang.String: int length()>();
v12 = v10 + v11;
virtualinvoke v0.<java.lang.StringBuilder: void ensureCapacity(int)>(v12);
v13 = virtualinvoke v0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v4);
v14 = virtualinvoke v13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(64);
virtualinvoke v14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v6);
return;
}
public static boolean isEmpty(java.lang.Object)
{
int v2, v6;
java.lang.Class v4;
java.lang.Object v0;
boolean v1, v10, v11, v3, v5, v7, v8, v9;
v0 := @parameter0: java.lang.Object;
if v0 != null goto label1;
return 1;
label1:
v1 = v0 instanceof java.lang.CharSequence;
if v1 == 0 goto label4;
v2 = interfaceinvoke v0.<java.lang.CharSequence: int length()>();
if v2 != 0 goto label2;
v3 = 1;
goto label3;
label2:
v3 = 0;
label3:
return v3;
label4:
v4 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v5 = virtualinvoke v4.<java.lang.Class: boolean isArray()>();
if v5 == 0 goto label7;
v6 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(v0);
if v6 != 0 goto label5;
v7 = 1;
goto label6;
label5:
v7 = 0;
label6:
return v7;
label7:
v8 = v0 instanceof java.util.Collection;
if v8 == 0 goto label8;
v9 = interfaceinvoke v0.<java.util.Collection: boolean isEmpty()>();
return v9;
label8:
v10 = v0 instanceof java.util.Map;
if v10 == 0 goto label9;
v11 = interfaceinvoke v0.<java.util.Map: boolean isEmpty()>();
return v11;
label9:
return 0;
}
public static boolean isNotEmpty(java.lang.Object)
{
java.lang.Object v0;
boolean v1, v2;
v0 := @parameter0: java.lang.Object;
v1 = staticinvoke <org.apache.commons.lang3.ObjectUtils: boolean isEmpty(java.lang.Object)>(v0);
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public static transient java.lang.Comparable max(java.lang.Comparable[])
{
int v2, v3, v5;
java.lang.Comparable v1, v4;
java.lang.Comparable[] v0;
v0 := @parameter0: java.lang.Comparable[];
v1 = null;
if v0 == null goto label3;
v2 = lengthof v0;
v3 = 0;
label1:
if v3 >= v2 goto label3;
v4 = v0[v3];
v5 = staticinvoke <org.apache.commons.lang3.ObjectUtils: int compare(java.lang.Comparable,java.lang.Comparable,boolean)>(v4, v1, 0);
if v5 <= 0 goto label2;
v1 = v4;
label2:
v3 = v3 + 1;
goto label1;
label3:
return v1;
}
public static transient java.lang.Object median(java.util.Comparator, java.lang.Object[])
{
java.lang.Object[] v1, v2, v3, v5;
java.util.TreeSet v4;
int v6, v7, v8;
java.lang.Object v9;
java.util.Comparator v0;
v0 := @parameter0: java.util.Comparator;
v1 := @parameter1: java.lang.Object[];
v2 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object[] notEmpty(java.lang.Object[],java.lang.String,java.lang.Object[])>(v1, "null/empty items", v2);
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object[] noNullElements(java.lang.Object[])>(v1);
v3 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v0, "comparator", v3);
v4 = new java.util.TreeSet;
specialinvoke v4.<java.util.TreeSet: void <init>(java.util.Comparator)>(v0);
staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>(v4, v1);
v5 = virtualinvoke v4.<java.util.TreeSet: java.lang.Object[] toArray()>();
v6 = virtualinvoke v4.<java.util.TreeSet: int size()>();
v7 = v6 - 1;
v8 = v7 / 2;
v9 = v5[v8];
return v9;
}
public static transient java.lang.Comparable median(java.lang.Comparable[])
{
java.lang.Object[] v2;
int v3, v4, v5;
java.lang.Object v6;
java.lang.Comparable[] v0;
java.util.TreeSet v1;
v0 := @parameter0: java.lang.Comparable[];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object[] notEmpty(java.lang.Object[])>(v0);
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object[] noNullElements(java.lang.Object[])>(v0);
v1 = new java.util.TreeSet;
specialinvoke v1.<java.util.TreeSet: void <init>()>();
staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>(v1, v0);
v2 = virtualinvoke v1.<java.util.TreeSet: java.lang.Object[] toArray()>();
v3 = virtualinvoke v1.<java.util.TreeSet: int size()>();
v4 = v3 - 1;
v5 = v4 / 2;
v6 = v2[v5];
return v6;
}
public static transient java.lang.Comparable min(java.lang.Comparable[])
{
int v2, v3, v5;
java.lang.Comparable v1, v4;
java.lang.Comparable[] v0;
v0 := @parameter0: java.lang.Comparable[];
v1 = null;
if v0 == null goto label3;
v2 = lengthof v0;
v3 = 0;
label1:
if v3 >= v2 goto label3;
v4 = v0[v3];
v5 = staticinvoke <org.apache.commons.lang3.ObjectUtils: int compare(java.lang.Comparable,java.lang.Comparable,boolean)>(v4, v1, 1);
if v5 >= 0 goto label2;
v1 = v4;
label2:
v3 = v3 + 1;
goto label1;
label3:
return v1;
}
public static transient java.lang.Object mode(java.lang.Object[])
{
java.lang.Object[] v0;
org.apache.commons.lang3.mutable.MutableInt v8;
java.util.HashMap v2;
int v10, v16, v3, v4, v5;
boolean v1, v13;
java.util.Iterator v12;
java.util.Set v11;
java.lang.Object v14, v15, v6, v7, v9;
v0 := @parameter0: java.lang.Object[];
v1 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isNotEmpty(java.lang.Object[])>(v0);
if v1 == 0 goto label8;
v2 = new java.util.HashMap;
v3 = lengthof v0;
specialinvoke v2.<java.util.HashMap: void <init>(int)>(v3);
v4 = lengthof v0;
v5 = 0;
label1:
if v5 >= v4 goto label4;
v6 = v0[v5];
v7 = virtualinvoke v2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(v6);
if v7 != null goto label2;
v8 = new org.apache.commons.lang3.mutable.MutableInt;
specialinvoke v8.<org.apache.commons.lang3.mutable.MutableInt: void <init>(int)>(1);
virtualinvoke v2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(v6, v8);
goto label3;
label2:
virtualinvoke v7.<org.apache.commons.lang3.mutable.MutableInt: void increment()>();
label3:
v5 = v5 + 1;
goto label1;
label4:
v9 = null;
v10 = 0;
v11 = virtualinvoke v2.<java.util.HashMap: java.util.Set entrySet()>();
v12 = interfaceinvoke v11.<java.util.Set: java.util.Iterator iterator()>();
label5:
v13 = interfaceinvoke v12.<java.util.Iterator: boolean hasNext()>();
if v13 == 0 goto label7;
v14 = interfaceinvoke v12.<java.util.Iterator: java.lang.Object next()>();
v15 = interfaceinvoke v14.<java.util.Map$Entry: java.lang.Object getValue()>();
v16 = virtualinvoke v15.<org.apache.commons.lang3.mutable.MutableInt: int intValue()>();
if v16 != v10 goto label6;
v9 = null;
goto label5;
label6:
if v16 <= v10 goto label5;
v10 = v16;
v9 = interfaceinvoke v14.<java.util.Map$Entry: java.lang.Object getKey()>();
goto label5;
label7:
return v9;
label8:
return null;
}
public static boolean notEqual(java.lang.Object, java.lang.Object)
{
java.lang.Object v0, v1;
boolean v2, v3;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <org.apache.commons.lang3.ObjectUtils: boolean equals(java.lang.Object,java.lang.Object)>(v0, v1);
if v2 != 0 goto label1;
v3 = 1;
goto label2;
label1:
v3 = 0;
label2:
return v3;
}
public static java.lang.Object requireNonEmpty(java.lang.Object)
{
java.lang.Object v0, v1;
v0 := @parameter0: java.lang.Object;
v1 = staticinvoke <org.apache.commons.lang3.ObjectUtils: java.lang.Object requireNonEmpty(java.lang.Object,java.lang.String)>(v0, "object");
return v1;
}
public static java.lang.Object requireNonEmpty(java.lang.Object, java.lang.String)
{
java.lang.Object v0;
java.lang.String v1;
java.lang.IllegalArgumentException v3;
boolean v2;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.String;
staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(v0, v1);
v2 = staticinvoke <org.apache.commons.lang3.ObjectUtils: boolean isEmpty(java.lang.Object)>(v0);
if v2 == 0 goto label1;
v3 = new java.lang.IllegalArgumentException;
specialinvoke v3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(v1);
throw v3;
label1:
return v0;
}
public static java.lang.String toString(java.lang.Object)
{
java.lang.Object v0;
java.lang.String v1;
v0 := @parameter0: java.lang.Object;
if v0 != null goto label1;
v1 = "";
goto label2;
label1:
v1 = virtualinvoke v0.<java.lang.Object: java.lang.String toString()>();
label2:
return v1;
}
public static java.lang.String toString(java.lang.Object, java.lang.String)
{
java.lang.Object v0;
java.lang.String v1, v2;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.String;
if v0 != null goto label1;
v2 = v1;
goto label2;
label1:
v2 = virtualinvoke v0.<java.lang.Object: java.lang.String toString()>();
label2:
return v2;
}
public static java.lang.String toString(java.lang.Object, java.util.function.Supplier)
{
java.lang.Object v0, v2;
java.util.function.Supplier v1;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.util.function.Supplier;
if v0 != null goto label1;
if v1 == null goto label2;
v2 = interfaceinvoke v1.<java.util.function.Supplier: java.lang.Object get()>();
goto label2;
label1:
v2 = virtualinvoke v0.<java.lang.Object: java.lang.String toString()>();
label2:
return v2;
}
public static void wait(java.lang.Object, java.time.Duration) throws java.lang.InterruptedException
{
java.time.Duration v1, v3;
java.lang.Object v0;
org.apache.commons.lang3.function.FailableBiConsumer v2;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.time.Duration;
virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v2 = staticinvoke <org.apache.commons.lang3.ObjectUtils$wait__107: org.apache.commons.lang3.function.FailableBiConsumer bootstrap$(java.lang.Object)>(v0);
v3 = staticinvoke <org.apache.commons.lang3.time.DurationUtils: java.time.Duration zeroIfNull(java.time.Duration)>(v1);
staticinvoke <org.apache.commons.lang3.time.DurationUtils: void accept(org.apache.commons.lang3.function.FailableBiConsumer,java.time.Duration)>(v2, v3);
return;
}
public void <init>()
{
org.apache.commons.lang3.ObjectUtils v0;
v0 := @this: org.apache.commons.lang3.ObjectUtils;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void <clinit>()
{
org.apache.commons.lang3.ObjectUtils$Null v0;
v0 = new org.apache.commons.lang3.ObjectUtils$Null;
specialinvoke v0.<org.apache.commons.lang3.ObjectUtils$Null: void <init>()>();
<org.apache.commons.lang3.ObjectUtils: org.apache.commons.lang3.ObjectUtils$Null NULL> = v0;
return;
}
}