class org.apache.commons.lang3.StringEscapeUtils$CsvEscaper extends org.apache.commons.lang3.text.translate.CharSequenceTranslator
{
private static final char CSV_DELIMITER;
private static final char CSV_QUOTE;
private static final java.lang.String CSV_QUOTE_STR;
private static final char[] CSV_SEARCH_CHARS;
void <init>()
{
org.apache.commons.lang3.StringEscapeUtils$CsvEscaper v0;
v0 := @this: org.apache.commons.lang3.StringEscapeUtils$CsvEscaper;
specialinvoke v0.<org.apache.commons.lang3.text.translate.CharSequenceTranslator: void <init>()>();
return;
}
public int translate(java.lang.CharSequence, int, java.io.Writer) throws java.io.IOException
{
java.lang.IllegalStateException v4;
int v15, v16, v2;
java.lang.String v10, v11, v12, v13, v14, v5, v8, v9;
boolean v7;
java.lang.CharSequence v1;
org.apache.commons.lang3.StringEscapeUtils$CsvEscaper v0;
java.io.Writer v3;
char[] v6;
v0 := @this: org.apache.commons.lang3.StringEscapeUtils$CsvEscaper;
v1 := @parameter0: java.lang.CharSequence;
v2 := @parameter1: int;
v3 := @parameter2: java.io.Writer;
if v2 == 0 goto label1;
v4 = new java.lang.IllegalStateException;
specialinvoke v4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("CsvEscaper should never reach the [1] index");
throw v4;
label1:
v5 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
v6 = <org.apache.commons.lang3.StringEscapeUtils$CsvEscaper: char[] CSV_SEARCH_CHARS>;
v7 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean containsNone(java.lang.CharSequence,char[])>(v5, v6);
if v7 == 0 goto label2;
v8 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
virtualinvoke v3.<java.io.Writer: void write(java.lang.String)>(v8);
goto label3;
label2:
virtualinvoke v3.<java.io.Writer: void write(int)>(34);
v9 = virtualinvoke v1.<java.lang.Object: java.lang.String toString()>();
v10 = <org.apache.commons.lang3.StringEscapeUtils$CsvEscaper: java.lang.String CSV_QUOTE_STR>;
v11 = <org.apache.commons.lang3.StringEscapeUtils$CsvEscaper: java.lang.String CSV_QUOTE_STR>;
v12 = <org.apache.commons.lang3.StringEscapeUtils$CsvEscaper: java.lang.String CSV_QUOTE_STR>;
v13 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.String,java.lang.String)>(v11, v12) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>("\u0001\u0001");
v14 = staticinvoke <org.apache.commons.lang3.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>(v9, v10, v13);
virtualinvoke v3.<java.io.Writer: void write(java.lang.String)>(v14);
virtualinvoke v3.<java.io.Writer: void write(int)>(34);
label3:
v15 = interfaceinvoke v1.<java.lang.CharSequence: int length()>();
v16 = staticinvoke <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>(v1, 0, v15);
return v16;
}
static void <clinit>()
{
char[] v1;
java.lang.String v0;
v0 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(34);
<org.apache.commons.lang3.StringEscapeUtils$CsvEscaper: java.lang.String CSV_QUOTE_STR> = v0;
v1 = newarray (char)[4];
v1[0] = 44;
v1[1] = 34;
v1[2] = 13;
v1[3] = 10;
<org.apache.commons.lang3.StringEscapeUtils$CsvEscaper: char[] CSV_SEARCH_CHARS> = v1;
return;
}
}