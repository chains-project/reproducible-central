public class org.apache.commons.lang3.ThreadUtils extends java.lang.Object
{
public static final org.apache.commons.lang3.ThreadUtils$AlwaysTruePredicate ALWAYS_TRUE_PREDICATE;
public static java.lang.Thread findThreadById(long)
{
java.util.Iterator v4;
java.util.Collection v2;
org.apache.commons.lang3.ThreadUtils$ThreadIdPredicate v1;
java.lang.Object v5;
long v0;
boolean v3;
v0 := @parameter0: long;
v1 = new org.apache.commons.lang3.ThreadUtils$ThreadIdPredicate;
specialinvoke v1.<org.apache.commons.lang3.ThreadUtils$ThreadIdPredicate: void <init>(long)>(v0);
v2 = staticinvoke <org.apache.commons.lang3.ThreadUtils: java.util.Collection findThreads(org.apache.commons.lang3.ThreadUtils$ThreadPredicate)>(v1);
v3 = interfaceinvoke v2.<java.util.Collection: boolean isEmpty()>();
if v3 != 0 goto label1;
v4 = interfaceinvoke v2.<java.util.Collection: java.util.Iterator iterator()>();
v5 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
label1:
return v5;
}
public static java.lang.Thread findThreadById(long, java.lang.String)
{
java.lang.Object[] v2;
long v0;
java.lang.ThreadGroup v4, v5;
java.lang.Thread v3;
java.lang.String v1, v6;
boolean v7;
v0 := @parameter0: long;
v1 := @parameter1: java.lang.String;
v2 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v1, "threadGroupName", v2);
v3 = staticinvoke <org.apache.commons.lang3.ThreadUtils: java.lang.Thread findThreadById(long)>(v0);
if v3 == null goto label1;
v4 = virtualinvoke v3.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();
if v4 == null goto label1;
v5 = virtualinvoke v3.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();
v6 = virtualinvoke v5.<java.lang.ThreadGroup: java.lang.String getName()>();
v7 = virtualinvoke v6.<java.lang.String: boolean equals(java.lang.Object)>(v1);
if v7 == 0 goto label1;
return v3;
label1:
return null;
}
public static java.lang.Thread findThreadById(long, java.lang.ThreadGroup)
{
java.lang.Object[] v2;
java.lang.Thread v3;
long v0;
java.lang.ThreadGroup v1, v4;
boolean v5;
v0 := @parameter0: long;
v1 := @parameter1: java.lang.ThreadGroup;
v2 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v1, "threadGroup", v2);
v3 = staticinvoke <org.apache.commons.lang3.ThreadUtils: java.lang.Thread findThreadById(long)>(v0);
if v3 == null goto label1;
v4 = virtualinvoke v3.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();
v5 = virtualinvoke v1.<java.lang.Object: boolean equals(java.lang.Object)>(v4);
if v5 == 0 goto label1;
return v3;
label1:
return null;
}
public static java.util.Collection findThreadGroups(java.lang.ThreadGroup, boolean, org.apache.commons.lang3.ThreadUtils$ThreadGroupPredicate)
{
java.lang.Object[] v3, v4;
java.lang.ThreadGroup v0, v13, v15;
java.util.ArrayList v11;
int v10, v12, v5, v6, v7, v8;
org.apache.commons.lang3.ThreadUtils$ThreadGroupPredicate v2;
boolean v1, v14;
java.util.Collection v16;
java.lang.ThreadGroup[] v9;
v0 := @parameter0: java.lang.ThreadGroup;
v1 := @parameter1: boolean;
v2 := @parameter2: org.apache.commons.lang3.ThreadUtils$ThreadGroupPredicate;
v3 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v0, "group", v3);
v4 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v2, "predicate", v4);
v5 = virtualinvoke v0.<java.lang.ThreadGroup: int activeGroupCount()>();
label1:
v6 = v5 / 2;
v7 = v5 + v6;
v8 = v7 + 1;
v9 = newarray (java.lang.ThreadGroup)[v8];
v5 = virtualinvoke v0.<java.lang.ThreadGroup: int enumerate(java.lang.ThreadGroup[],boolean)>(v9, v1);
v10 = lengthof v9;
if v5 >= v10 goto label1;
v11 = new java.util.ArrayList;
specialinvoke v11.<java.util.ArrayList: void <init>(int)>(v5);
v12 = 0;
label2:
if v12 >= v5 goto label4;
v13 = v9[v12];
v14 = interfaceinvoke v2.<org.apache.commons.lang3.ThreadUtils$ThreadGroupPredicate: boolean test(java.lang.ThreadGroup)>(v13);
if v14 == 0 goto label3;
v15 = v9[v12];
interfaceinvoke v11.<java.util.List: boolean add(java.lang.Object)>(v15);
label3:
v12 = v12 + 1;
goto label2;
label4:
v16 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>(v11);
return v16;
}
public static java.util.Collection findThreadGroups(org.apache.commons.lang3.ThreadUtils$ThreadGroupPredicate)
{
java.lang.ThreadGroup v1;
org.apache.commons.lang3.ThreadUtils$ThreadGroupPredicate v0;
java.util.Collection v2;
v0 := @parameter0: org.apache.commons.lang3.ThreadUtils$ThreadGroupPredicate;
v1 = staticinvoke <org.apache.commons.lang3.ThreadUtils: java.lang.ThreadGroup getSystemThreadGroup()>();
v2 = staticinvoke <org.apache.commons.lang3.ThreadUtils: java.util.Collection findThreadGroups(java.lang.ThreadGroup,boolean,org.apache.commons.lang3.ThreadUtils$ThreadGroupPredicate)>(v1, 1, v0);
return v2;
}
public static java.util.Collection findThreadGroupsByName(java.lang.String)
{
org.apache.commons.lang3.ThreadUtils$NamePredicate v1;
java.lang.String v0;
java.util.Collection v2;
v0 := @parameter0: java.lang.String;
v1 = new org.apache.commons.lang3.ThreadUtils$NamePredicate;
specialinvoke v1.<org.apache.commons.lang3.ThreadUtils$NamePredicate: void <init>(java.lang.String)>(v0);
v2 = staticinvoke <org.apache.commons.lang3.ThreadUtils: java.util.Collection findThreadGroups(org.apache.commons.lang3.ThreadUtils$ThreadGroupPredicate)>(v1);
return v2;
}
public static java.util.Collection findThreads(java.lang.ThreadGroup, boolean, org.apache.commons.lang3.ThreadUtils$ThreadPredicate)
{
java.lang.Object[] v3, v4;
java.lang.ThreadGroup v0;
java.util.ArrayList v11;
org.apache.commons.lang3.ThreadUtils$ThreadPredicate v2;
java.lang.Thread v13, v15;
int v10, v12, v5, v6, v7, v8;
boolean v1, v14;
java.util.Collection v16;
java.lang.Thread[] v9;
v0 := @parameter0: java.lang.ThreadGroup;
v1 := @parameter1: boolean;
v2 := @parameter2: org.apache.commons.lang3.ThreadUtils$ThreadPredicate;
v3 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v0, "The group must not be null", v3);
v4 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v2, "The predicate must not be null", v4);
v5 = virtualinvoke v0.<java.lang.ThreadGroup: int activeCount()>();
label1:
v6 = v5 / 2;
v7 = v5 + v6;
v8 = v7 + 1;
v9 = newarray (java.lang.Thread)[v8];
v5 = virtualinvoke v0.<java.lang.ThreadGroup: int enumerate(java.lang.Thread[],boolean)>(v9, v1);
v10 = lengthof v9;
if v5 >= v10 goto label1;
v11 = new java.util.ArrayList;
specialinvoke v11.<java.util.ArrayList: void <init>(int)>(v5);
v12 = 0;
label2:
if v12 >= v5 goto label4;
v13 = v9[v12];
v14 = interfaceinvoke v2.<org.apache.commons.lang3.ThreadUtils$ThreadPredicate: boolean test(java.lang.Thread)>(v13);
if v14 == 0 goto label3;
v15 = v9[v12];
interfaceinvoke v11.<java.util.List: boolean add(java.lang.Object)>(v15);
label3:
v12 = v12 + 1;
goto label2;
label4:
v16 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>(v11);
return v16;
}
public static java.util.Collection findThreads(org.apache.commons.lang3.ThreadUtils$ThreadPredicate)
{
java.lang.ThreadGroup v1;
org.apache.commons.lang3.ThreadUtils$ThreadPredicate v0;
java.util.Collection v2;
v0 := @parameter0: org.apache.commons.lang3.ThreadUtils$ThreadPredicate;
v1 = staticinvoke <org.apache.commons.lang3.ThreadUtils: java.lang.ThreadGroup getSystemThreadGroup()>();
v2 = staticinvoke <org.apache.commons.lang3.ThreadUtils: java.util.Collection findThreads(java.lang.ThreadGroup,boolean,org.apache.commons.lang3.ThreadUtils$ThreadPredicate)>(v1, 1, v0);
return v2;
}
public static java.util.Collection findThreadsByName(java.lang.String)
{
org.apache.commons.lang3.ThreadUtils$NamePredicate v1;
java.lang.String v0;
java.util.Collection v2;
v0 := @parameter0: java.lang.String;
v1 = new org.apache.commons.lang3.ThreadUtils$NamePredicate;
specialinvoke v1.<org.apache.commons.lang3.ThreadUtils$NamePredicate: void <init>(java.lang.String)>(v0);
v2 = staticinvoke <org.apache.commons.lang3.ThreadUtils: java.util.Collection findThreads(org.apache.commons.lang3.ThreadUtils$ThreadPredicate)>(v1);
return v2;
}
public static java.util.Collection findThreadsByName(java.lang.String, java.lang.String)
{
java.lang.Object[] v2, v3;
java.util.Iterator v10;
java.util.Collection v13, v14, v5;
org.apache.commons.lang3.ThreadUtils$NamePredicate v4, v9;
java.util.ArrayList v8;
java.util.List v7;
java.lang.Object v12;
java.lang.String v0, v1;
boolean v11, v6;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.String;
v2 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v0, "threadName", v2);
v3 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v1, "threadGroupName", v3);
v4 = new org.apache.commons.lang3.ThreadUtils$NamePredicate;
specialinvoke v4.<org.apache.commons.lang3.ThreadUtils$NamePredicate: void <init>(java.lang.String)>(v1);
v5 = staticinvoke <org.apache.commons.lang3.ThreadUtils: java.util.Collection findThreadGroups(org.apache.commons.lang3.ThreadUtils$ThreadGroupPredicate)>(v4);
v6 = interfaceinvoke v5.<java.util.Collection: boolean isEmpty()>();
if v6 == 0 goto label1;
v7 = staticinvoke <java.util.Collections: java.util.List emptyList()>();
return v7;
label1:
v8 = new java.util.ArrayList;
specialinvoke v8.<java.util.ArrayList: void <init>()>();
v9 = new org.apache.commons.lang3.ThreadUtils$NamePredicate;
specialinvoke v9.<org.apache.commons.lang3.ThreadUtils$NamePredicate: void <init>(java.lang.String)>(v0);
v10 = interfaceinvoke v5.<java.util.Collection: java.util.Iterator iterator()>();
label2:
v11 = interfaceinvoke v10.<java.util.Iterator: boolean hasNext()>();
if v11 == 0 goto label3;
v12 = interfaceinvoke v10.<java.util.Iterator: java.lang.Object next()>();
v13 = staticinvoke <org.apache.commons.lang3.ThreadUtils: java.util.Collection findThreads(java.lang.ThreadGroup,boolean,org.apache.commons.lang3.ThreadUtils$ThreadPredicate)>(v12, 0, v9);
interfaceinvoke v8.<java.util.Collection: boolean addAll(java.util.Collection)>(v13);
goto label2;
label3:
v14 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>(v8);
return v14;
}
public static java.util.Collection findThreadsByName(java.lang.String, java.lang.ThreadGroup)
{
java.util.Collection v3;
org.apache.commons.lang3.ThreadUtils$NamePredicate v2;
java.lang.String v0;
java.lang.ThreadGroup v1;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: java.lang.ThreadGroup;
v2 = new org.apache.commons.lang3.ThreadUtils$NamePredicate;
specialinvoke v2.<org.apache.commons.lang3.ThreadUtils$NamePredicate: void <init>(java.lang.String)>(v0);
v3 = staticinvoke <org.apache.commons.lang3.ThreadUtils: java.util.Collection findThreads(java.lang.ThreadGroup,boolean,org.apache.commons.lang3.ThreadUtils$ThreadPredicate)>(v1, 0, v2);
return v3;
}
public static java.util.Collection getAllThreadGroups()
{
org.apache.commons.lang3.ThreadUtils$AlwaysTruePredicate v0;
java.util.Collection v1;
v0 = <org.apache.commons.lang3.ThreadUtils: org.apache.commons.lang3.ThreadUtils$AlwaysTruePredicate ALWAYS_TRUE_PREDICATE>;
v1 = staticinvoke <org.apache.commons.lang3.ThreadUtils: java.util.Collection findThreadGroups(org.apache.commons.lang3.ThreadUtils$ThreadGroupPredicate)>(v0);
return v1;
}
public static java.util.Collection getAllThreads()
{
org.apache.commons.lang3.ThreadUtils$AlwaysTruePredicate v0;
java.util.Collection v1;
v0 = <org.apache.commons.lang3.ThreadUtils: org.apache.commons.lang3.ThreadUtils$AlwaysTruePredicate ALWAYS_TRUE_PREDICATE>;
v1 = staticinvoke <org.apache.commons.lang3.ThreadUtils: java.util.Collection findThreads(org.apache.commons.lang3.ThreadUtils$ThreadPredicate)>(v0);
return v1;
}
public static java.lang.ThreadGroup getSystemThreadGroup()
{
java.lang.ThreadGroup v1, v2;
java.lang.Thread v0;
v0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
v1 = virtualinvoke v0.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();
label1:
v2 = virtualinvoke v1.<java.lang.ThreadGroup: java.lang.ThreadGroup getParent()>();
if v2 == null goto label2;
v1 = virtualinvoke v1.<java.lang.ThreadGroup: java.lang.ThreadGroup getParent()>();
goto label1;
label2:
return v1;
}
public static void join(java.lang.Thread, java.time.Duration) throws java.lang.InterruptedException
{
org.apache.commons.lang3.function.FailableBiConsumer v2;
java.lang.Thread v0;
java.time.Duration v1;
v0 := @parameter0: java.lang.Thread;
v1 := @parameter1: java.time.Duration;
virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v2 = staticinvoke <org.apache.commons.lang3.ThreadUtils$join__99: org.apache.commons.lang3.function.FailableBiConsumer bootstrap$(java.lang.Thread)>(v0);
staticinvoke <org.apache.commons.lang3.time.DurationUtils: void accept(org.apache.commons.lang3.function.FailableBiConsumer,java.time.Duration)>(v2, v1);
return;
}
public static void sleep(java.time.Duration) throws java.lang.InterruptedException
{
org.apache.commons.lang3.function.FailableBiConsumer v1;
java.time.Duration v0;
v0 := @parameter0: java.time.Duration;
v1 = staticinvoke <org.apache.commons.lang3.ThreadUtils$sleep__100: org.apache.commons.lang3.function.FailableBiConsumer bootstrap$()>();
staticinvoke <org.apache.commons.lang3.time.DurationUtils: void accept(org.apache.commons.lang3.function.FailableBiConsumer,java.time.Duration)>(v1, v0);
return;
}
public void <init>()
{
org.apache.commons.lang3.ThreadUtils v0;
v0 := @this: org.apache.commons.lang3.ThreadUtils;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
static void <clinit>()
{
org.apache.commons.lang3.ThreadUtils$AlwaysTruePredicate v0;
v0 = new org.apache.commons.lang3.ThreadUtils$AlwaysTruePredicate;
specialinvoke v0.<org.apache.commons.lang3.ThreadUtils$AlwaysTruePredicate: void <init>()>();
<org.apache.commons.lang3.ThreadUtils: org.apache.commons.lang3.ThreadUtils$AlwaysTruePredicate ALWAYS_TRUE_PREDICATE> = v0;
return;
}
}