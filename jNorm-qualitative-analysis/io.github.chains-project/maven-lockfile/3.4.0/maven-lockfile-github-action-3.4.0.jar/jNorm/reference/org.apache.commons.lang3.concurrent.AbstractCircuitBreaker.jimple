public abstract class org.apache.commons.lang3.concurrent.AbstractCircuitBreaker extends java.lang.Object implements org.apache.commons.lang3.concurrent.CircuitBreaker
{
public static final java.lang.String PROPERTY_NAME;
protected final java.util.concurrent.atomic.AtomicReference state;
private final java.beans.PropertyChangeSupport changeSupport;
public void <init>()
{
org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State v2;
org.apache.commons.lang3.concurrent.AbstractCircuitBreaker v0;
java.beans.PropertyChangeSupport v3;
java.util.concurrent.atomic.AtomicReference v1;
v0 := @this: org.apache.commons.lang3.concurrent.AbstractCircuitBreaker;
specialinvoke v0.<java.lang.Object: void <init>()>();
v1 = new java.util.concurrent.atomic.AtomicReference;
v2 = <org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State: org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State CLOSED>;
specialinvoke v1.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(v2);
v0.<org.apache.commons.lang3.concurrent.AbstractCircuitBreaker: java.util.concurrent.atomic.AtomicReference state> = v1;
v3 = new java.beans.PropertyChangeSupport;
specialinvoke v3.<java.beans.PropertyChangeSupport: void <init>(java.lang.Object)>(v0);
v0.<org.apache.commons.lang3.concurrent.AbstractCircuitBreaker: java.beans.PropertyChangeSupport changeSupport> = v3;
return;
}
public boolean isOpen()
{
org.apache.commons.lang3.concurrent.AbstractCircuitBreaker v0;
java.lang.Object v2;
java.util.concurrent.atomic.AtomicReference v1;
boolean v3;
v0 := @this: org.apache.commons.lang3.concurrent.AbstractCircuitBreaker;
v1 = v0.<org.apache.commons.lang3.concurrent.AbstractCircuitBreaker: java.util.concurrent.atomic.AtomicReference state>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();
v3 = staticinvoke <org.apache.commons.lang3.concurrent.AbstractCircuitBreaker: boolean isOpen(org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State)>(v2);
return v3;
}
public boolean isClosed()
{
boolean v1, v2;
org.apache.commons.lang3.concurrent.AbstractCircuitBreaker v0;
v0 := @this: org.apache.commons.lang3.concurrent.AbstractCircuitBreaker;
v1 = virtualinvoke v0.<org.apache.commons.lang3.concurrent.AbstractCircuitBreaker: boolean isOpen()>();
if v1 != 0 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
public abstract boolean checkState();
public abstract boolean incrementAndCheckState(java.lang.Object);
public void close()
{
org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State v1;
org.apache.commons.lang3.concurrent.AbstractCircuitBreaker v0;
v0 := @this: org.apache.commons.lang3.concurrent.AbstractCircuitBreaker;
v1 = <org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State: org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State CLOSED>;
virtualinvoke v0.<org.apache.commons.lang3.concurrent.AbstractCircuitBreaker: void changeState(org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State)>(v1);
return;
}
public void open()
{
org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State v1;
org.apache.commons.lang3.concurrent.AbstractCircuitBreaker v0;
v0 := @this: org.apache.commons.lang3.concurrent.AbstractCircuitBreaker;
v1 = <org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State: org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State OPEN>;
virtualinvoke v0.<org.apache.commons.lang3.concurrent.AbstractCircuitBreaker: void changeState(org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State)>(v1);
return;
}
protected static boolean isOpen(org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State)
{
org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State v0, v1;
boolean v2;
v0 := @parameter0: org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State;
v1 = <org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State: org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State OPEN>;
if v0 != v1 goto label1;
v2 = 1;
goto label2;
label1:
v2 = 0;
label2:
return v2;
}
protected void changeState(org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State)
{
org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State v1, v3;
java.util.concurrent.atomic.AtomicReference v2;
org.apache.commons.lang3.concurrent.AbstractCircuitBreaker v0;
java.beans.PropertyChangeSupport v5;
boolean v4, v6, v7, v8;
v0 := @this: org.apache.commons.lang3.concurrent.AbstractCircuitBreaker;
v1 := @parameter0: org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State;
v2 = v0.<org.apache.commons.lang3.concurrent.AbstractCircuitBreaker: java.util.concurrent.atomic.AtomicReference state>;
v3 = virtualinvoke v1.<org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State: org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State oppositeState()>();
v4 = virtualinvoke v2.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(v3, v1);
if v4 == 0 goto label3;
v5 = v0.<org.apache.commons.lang3.concurrent.AbstractCircuitBreaker: java.beans.PropertyChangeSupport changeSupport>;
v6 = staticinvoke <org.apache.commons.lang3.concurrent.AbstractCircuitBreaker: boolean isOpen(org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State)>(v1);
if v6 != 0 goto label1;
v7 = 1;
goto label2;
label1:
v7 = 0;
label2:
v8 = staticinvoke <org.apache.commons.lang3.concurrent.AbstractCircuitBreaker: boolean isOpen(org.apache.commons.lang3.concurrent.AbstractCircuitBreaker$State)>(v1);
virtualinvoke v5.<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,boolean,boolean)>("open", v7, v8);
label3:
return;
}
public void addChangeListener(java.beans.PropertyChangeListener)
{
java.beans.PropertyChangeSupport v2;
java.beans.PropertyChangeListener v1;
org.apache.commons.lang3.concurrent.AbstractCircuitBreaker v0;
v0 := @this: org.apache.commons.lang3.concurrent.AbstractCircuitBreaker;
v1 := @parameter0: java.beans.PropertyChangeListener;
v2 = v0.<org.apache.commons.lang3.concurrent.AbstractCircuitBreaker: java.beans.PropertyChangeSupport changeSupport>;
virtualinvoke v2.<java.beans.PropertyChangeSupport: void addPropertyChangeListener(java.beans.PropertyChangeListener)>(v1);
return;
}
public void removeChangeListener(java.beans.PropertyChangeListener)
{
java.beans.PropertyChangeSupport v2;
java.beans.PropertyChangeListener v1;
org.apache.commons.lang3.concurrent.AbstractCircuitBreaker v0;
v0 := @this: org.apache.commons.lang3.concurrent.AbstractCircuitBreaker;
v1 := @parameter0: java.beans.PropertyChangeListener;
v2 = v0.<org.apache.commons.lang3.concurrent.AbstractCircuitBreaker: java.beans.PropertyChangeSupport changeSupport>;
virtualinvoke v2.<java.beans.PropertyChangeSupport: void removePropertyChangeListener(java.beans.PropertyChangeListener)>(v1);
return;
}
}