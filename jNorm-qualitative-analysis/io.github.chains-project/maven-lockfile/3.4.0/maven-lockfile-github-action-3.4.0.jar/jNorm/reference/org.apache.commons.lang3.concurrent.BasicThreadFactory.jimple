public class org.apache.commons.lang3.concurrent.BasicThreadFactory extends java.lang.Object implements java.util.concurrent.ThreadFactory
{
private final java.util.concurrent.atomic.AtomicLong threadCounter;
private final java.util.concurrent.ThreadFactory wrappedFactory;
private final java.lang.Thread$UncaughtExceptionHandler uncaughtExceptionHandler;
private final java.lang.String namingPattern;
private final java.lang.Integer priority;
private final java.lang.Boolean daemon;
private void <init>(org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder)
{
org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder v1;
org.apache.commons.lang3.concurrent.BasicThreadFactory v0;
java.lang.Integer v6;
java.util.concurrent.atomic.AtomicLong v9;
java.lang.Thread$UncaughtExceptionHandler v8;
java.lang.Boolean v7;
java.lang.String v5;
java.util.concurrent.ThreadFactory v2, v3, v4;
v0 := @this: org.apache.commons.lang3.concurrent.BasicThreadFactory;
v1 := @parameter0: org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder;
specialinvoke v0.<java.lang.Object: void <init>()>();
v2 = v1.<org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder: java.util.concurrent.ThreadFactory wrappedFactory>;
if v2 != null goto label1;
v3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();
v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory: java.util.concurrent.ThreadFactory wrappedFactory> = v3;
goto label2;
label1:
v4 = v1.<org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder: java.util.concurrent.ThreadFactory wrappedFactory>;
v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory: java.util.concurrent.ThreadFactory wrappedFactory> = v4;
label2:
v5 = v1.<org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder: java.lang.String namingPattern>;
v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory: java.lang.String namingPattern> = v5;
v6 = v1.<org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder: java.lang.Integer priority>;
v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory: java.lang.Integer priority> = v6;
v7 = v1.<org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder: java.lang.Boolean daemon>;
v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory: java.lang.Boolean daemon> = v7;
v8 = v1.<org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder: java.lang.Thread$UncaughtExceptionHandler exceptionHandler>;
v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory: java.lang.Thread$UncaughtExceptionHandler uncaughtExceptionHandler> = v8;
v9 = new java.util.concurrent.atomic.AtomicLong;
specialinvoke v9.<java.util.concurrent.atomic.AtomicLong: void <init>()>();
v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory: java.util.concurrent.atomic.AtomicLong threadCounter> = v9;
return;
}
public final java.util.concurrent.ThreadFactory getWrappedFactory()
{
org.apache.commons.lang3.concurrent.BasicThreadFactory v0;
java.util.concurrent.ThreadFactory v1;
v0 := @this: org.apache.commons.lang3.concurrent.BasicThreadFactory;
v1 = v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory: java.util.concurrent.ThreadFactory wrappedFactory>;
return v1;
}
public final java.lang.String getNamingPattern()
{
org.apache.commons.lang3.concurrent.BasicThreadFactory v0;
java.lang.String v1;
v0 := @this: org.apache.commons.lang3.concurrent.BasicThreadFactory;
v1 = v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory: java.lang.String namingPattern>;
return v1;
}
public final java.lang.Boolean getDaemonFlag()
{
java.lang.Boolean v1;
org.apache.commons.lang3.concurrent.BasicThreadFactory v0;
v0 := @this: org.apache.commons.lang3.concurrent.BasicThreadFactory;
v1 = v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory: java.lang.Boolean daemon>;
return v1;
}
public final java.lang.Integer getPriority()
{
org.apache.commons.lang3.concurrent.BasicThreadFactory v0;
java.lang.Integer v1;
v0 := @this: org.apache.commons.lang3.concurrent.BasicThreadFactory;
v1 = v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory: java.lang.Integer priority>;
return v1;
}
public final java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()
{
org.apache.commons.lang3.concurrent.BasicThreadFactory v0;
java.lang.Thread$UncaughtExceptionHandler v1;
v0 := @this: org.apache.commons.lang3.concurrent.BasicThreadFactory;
v1 = v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory: java.lang.Thread$UncaughtExceptionHandler uncaughtExceptionHandler>;
return v1;
}
public long getThreadCount()
{
java.util.concurrent.atomic.AtomicLong v1;
long v2;
org.apache.commons.lang3.concurrent.BasicThreadFactory v0;
v0 := @this: org.apache.commons.lang3.concurrent.BasicThreadFactory;
v1 = v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory: java.util.concurrent.atomic.AtomicLong threadCounter>;
v2 = virtualinvoke v1.<java.util.concurrent.atomic.AtomicLong: long get()>();
return v2;
}
public java.lang.Thread newThread(java.lang.Runnable)
{
java.lang.Thread v3;
org.apache.commons.lang3.concurrent.BasicThreadFactory v0;
java.util.concurrent.ThreadFactory v2;
java.lang.Runnable v1;
v0 := @this: org.apache.commons.lang3.concurrent.BasicThreadFactory;
v1 := @parameter0: java.lang.Runnable;
v2 = virtualinvoke v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory: java.util.concurrent.ThreadFactory getWrappedFactory()>();
v3 = interfaceinvoke v2.<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>(v1);
specialinvoke v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory: void initializeThread(java.lang.Thread)>(v3);
return v3;
}
private void initializeThread(java.lang.Thread)
{
java.lang.Object[] v7;
long v4;
java.lang.Integer v11, v12;
java.lang.Thread$UncaughtExceptionHandler v10, v9;
java.lang.Long v5;
java.lang.Thread v1;
int v13;
java.lang.Boolean v14, v15;
java.lang.String v2, v6, v8;
boolean v16;
org.apache.commons.lang3.concurrent.BasicThreadFactory v0;
java.util.concurrent.atomic.AtomicLong v3;
v0 := @this: org.apache.commons.lang3.concurrent.BasicThreadFactory;
v1 := @parameter0: java.lang.Thread;
v2 = virtualinvoke v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory: java.lang.String getNamingPattern()>();
if v2 == null goto label1;
v3 = v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory: java.util.concurrent.atomic.AtomicLong threadCounter>;
v4 = virtualinvoke v3.<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>();
v5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(v4);
v6 = virtualinvoke v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory: java.lang.String getNamingPattern()>();
v7 = newarray (java.lang.Object)[1];
v7[0] = v5;
v8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(v6, v7);
virtualinvoke v1.<java.lang.Thread: void setName(java.lang.String)>(v8);
label1:
v9 = virtualinvoke v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()>();
if v9 == null goto label2;
v10 = virtualinvoke v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()>();
virtualinvoke v1.<java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>(v10);
label2:
v11 = virtualinvoke v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory: java.lang.Integer getPriority()>();
if v11 == null goto label3;
v12 = virtualinvoke v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory: java.lang.Integer getPriority()>();
v13 = virtualinvoke v12.<java.lang.Integer: int intValue()>();
virtualinvoke v1.<java.lang.Thread: void setPriority(int)>(v13);
label3:
v14 = virtualinvoke v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory: java.lang.Boolean getDaemonFlag()>();
if v14 == null goto label4;
v15 = virtualinvoke v0.<org.apache.commons.lang3.concurrent.BasicThreadFactory: java.lang.Boolean getDaemonFlag()>();
v16 = virtualinvoke v15.<java.lang.Boolean: boolean booleanValue()>();
virtualinvoke v1.<java.lang.Thread: void setDaemon(boolean)>(v16);
label4:
return;
}
}