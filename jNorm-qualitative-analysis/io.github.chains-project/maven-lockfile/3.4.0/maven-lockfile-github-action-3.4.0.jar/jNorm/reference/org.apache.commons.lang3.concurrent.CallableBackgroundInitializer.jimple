public class org.apache.commons.lang3.concurrent.CallableBackgroundInitializer extends org.apache.commons.lang3.concurrent.BackgroundInitializer
{
private final java.util.concurrent.Callable callable;
public void <init>(java.util.concurrent.Callable)
{
java.util.concurrent.Callable v1;
org.apache.commons.lang3.concurrent.CallableBackgroundInitializer v0;
v0 := @this: org.apache.commons.lang3.concurrent.CallableBackgroundInitializer;
v1 := @parameter0: java.util.concurrent.Callable;
specialinvoke v0.<org.apache.commons.lang3.concurrent.BackgroundInitializer: void <init>()>();
specialinvoke v0.<org.apache.commons.lang3.concurrent.CallableBackgroundInitializer: void checkCallable(java.util.concurrent.Callable)>(v1);
v0.<org.apache.commons.lang3.concurrent.CallableBackgroundInitializer: java.util.concurrent.Callable callable> = v1;
return;
}
public void <init>(java.util.concurrent.Callable, java.util.concurrent.ExecutorService)
{
java.util.concurrent.Callable v1;
java.util.concurrent.ExecutorService v2;
org.apache.commons.lang3.concurrent.CallableBackgroundInitializer v0;
v0 := @this: org.apache.commons.lang3.concurrent.CallableBackgroundInitializer;
v1 := @parameter0: java.util.concurrent.Callable;
v2 := @parameter1: java.util.concurrent.ExecutorService;
specialinvoke v0.<org.apache.commons.lang3.concurrent.BackgroundInitializer: void <init>(java.util.concurrent.ExecutorService)>(v2);
specialinvoke v0.<org.apache.commons.lang3.concurrent.CallableBackgroundInitializer: void checkCallable(java.util.concurrent.Callable)>(v1);
v0.<org.apache.commons.lang3.concurrent.CallableBackgroundInitializer: java.util.concurrent.Callable callable> = v1;
return;
}
protected java.lang.Object initialize() throws java.lang.Exception
{
java.lang.Object v2;
java.util.concurrent.Callable v1;
org.apache.commons.lang3.concurrent.CallableBackgroundInitializer v0;
v0 := @this: org.apache.commons.lang3.concurrent.CallableBackgroundInitializer;
v1 = v0.<org.apache.commons.lang3.concurrent.CallableBackgroundInitializer: java.util.concurrent.Callable callable>;
v2 = interfaceinvoke v1.<java.util.concurrent.Callable: java.lang.Object call()>();
return v2;
}
private void checkCallable(java.util.concurrent.Callable)
{
java.util.concurrent.Callable v1;
java.lang.Object[] v2;
org.apache.commons.lang3.concurrent.CallableBackgroundInitializer v0;
v0 := @this: org.apache.commons.lang3.concurrent.CallableBackgroundInitializer;
v1 := @parameter0: java.util.concurrent.Callable;
v2 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v1, "callable", v2);
return;
}
}