abstract class org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategy extends java.lang.Object
{
private void <init>()
{
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategy v0;
v0 := @this: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategy;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public boolean isCheckIntervalFinished(org.apache.commons.lang3.concurrent.EventCountCircuitBreaker, org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData, long)
{
long v3, v4, v5, v6;
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData v2;
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker v1;
byte v7;
org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategy v0;
boolean v8;
v0 := @this: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategy;
v1 := @parameter0: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker;
v2 := @parameter1: org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData;
v3 := @parameter2: long;
v4 = virtualinvoke v2.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData: long getCheckIntervalStart()>();
v5 = v3 - v4;
v6 = virtualinvoke v0.<org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategy: long fetchCheckInterval(org.apache.commons.lang3.concurrent.EventCountCircuitBreaker)>(v1);
v7 = v5 cmp v6;
if v7 <= 0 goto label1;
v8 = 1;
goto label2;
label1:
v8 = 0;
label2:
return v8;
}
public abstract boolean isStateTransition(org.apache.commons.lang3.concurrent.EventCountCircuitBreaker, org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData, org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData);
protected abstract long fetchCheckInterval(org.apache.commons.lang3.concurrent.EventCountCircuitBreaker);
}