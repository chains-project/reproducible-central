public class org.apache.commons.lang3.concurrent.MultiBackgroundInitializer extends org.apache.commons.lang3.concurrent.BackgroundInitializer
{
private final java.util.Map childInitializers;
public void <init>()
{
org.apache.commons.lang3.concurrent.MultiBackgroundInitializer v0;
java.util.HashMap v1;
v0 := @this: org.apache.commons.lang3.concurrent.MultiBackgroundInitializer;
specialinvoke v0.<org.apache.commons.lang3.concurrent.BackgroundInitializer: void <init>()>();
v1 = new java.util.HashMap;
specialinvoke v1.<java.util.HashMap: void <init>()>();
v0.<org.apache.commons.lang3.concurrent.MultiBackgroundInitializer: java.util.Map childInitializers> = v1;
return;
}
public void <init>(java.util.concurrent.ExecutorService)
{
org.apache.commons.lang3.concurrent.MultiBackgroundInitializer v0;
java.util.HashMap v2;
java.util.concurrent.ExecutorService v1;
v0 := @this: org.apache.commons.lang3.concurrent.MultiBackgroundInitializer;
v1 := @parameter0: java.util.concurrent.ExecutorService;
specialinvoke v0.<org.apache.commons.lang3.concurrent.BackgroundInitializer: void <init>(java.util.concurrent.ExecutorService)>(v1);
v2 = new java.util.HashMap;
specialinvoke v2.<java.util.HashMap: void <init>()>();
v0.<org.apache.commons.lang3.concurrent.MultiBackgroundInitializer: java.util.Map childInitializers> = v2;
return;
}
public void addInitializer(java.lang.String, org.apache.commons.lang3.concurrent.BackgroundInitializer)
{
java.lang.Throwable v8;
java.lang.IllegalStateException v6;
java.lang.Object[] v3, v4;
org.apache.commons.lang3.concurrent.MultiBackgroundInitializer v0;
org.apache.commons.lang3.concurrent.BackgroundInitializer v2;
java.util.Map v7;
java.lang.String v1;
boolean v5;
v0 := @this: org.apache.commons.lang3.concurrent.MultiBackgroundInitializer;
v1 := @parameter0: java.lang.String;
v2 := @parameter1: org.apache.commons.lang3.concurrent.BackgroundInitializer;
v3 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v1, "name", v3);
v4 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v2, "backgroundInitializer", v4);
entermonitor v0;
label1:
v5 = virtualinvoke v0.<org.apache.commons.lang3.concurrent.MultiBackgroundInitializer: boolean isStarted()>();
if v5 == 0 goto label2;
v6 = new java.lang.IllegalStateException;
specialinvoke v6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("addInitializer() must not be called after start()!");
throw v6;
label2:
v7 = v0.<org.apache.commons.lang3.concurrent.MultiBackgroundInitializer: java.util.Map childInitializers>;
interfaceinvoke v7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v1, v2);
exitmonitor v0;
label3:
goto label5;
label4:
v8 := @caughtexception;
exitmonitor v0;
throw v8;
label5:
return;
catch java.lang.Throwable from label1 to label3 with label4;
}
protected int getTaskCount()
{
java.util.Iterator v4;
java.util.Collection v3;
org.apache.commons.lang3.concurrent.MultiBackgroundInitializer v0;
java.util.Map v2;
int v1, v7;
java.lang.Object v6;
boolean v5;
v0 := @this: org.apache.commons.lang3.concurrent.MultiBackgroundInitializer;
v1 = 1;
v2 = v0.<org.apache.commons.lang3.concurrent.MultiBackgroundInitializer: java.util.Map childInitializers>;
v3 = interfaceinvoke v2.<java.util.Map: java.util.Collection values()>();
v4 = interfaceinvoke v3.<java.util.Collection: java.util.Iterator iterator()>();
label1:
v5 = interfaceinvoke v4.<java.util.Iterator: boolean hasNext()>();
if v5 == 0 goto label2;
v6 = interfaceinvoke v4.<java.util.Iterator: java.lang.Object next()>();
v7 = virtualinvoke v6.<org.apache.commons.lang3.concurrent.BackgroundInitializer: int getTaskCount()>();
v1 = v1 + v7;
goto label1;
label2:
return v1;
}
protected org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults initialize() throws java.lang.Exception
{
java.lang.Throwable v3;
org.apache.commons.lang3.concurrent.MultiBackgroundInitializer v0;
java.util.HashMap v1, v10, v11;
org.apache.commons.lang3.concurrent.ConcurrentException v19;
java.util.Map v2;
java.util.concurrent.ExecutorService v4, v9;
boolean v14, v7;
java.util.Iterator v13, v6;
java.util.Collection v5;
java.util.Set v12;
org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults v21;
java.lang.Object v15, v16, v17, v18, v20, v8;
v0 := @this: org.apache.commons.lang3.concurrent.MultiBackgroundInitializer;
entermonitor v0;
label01:
v1 = new java.util.HashMap;
v2 = v0.<org.apache.commons.lang3.concurrent.MultiBackgroundInitializer: java.util.Map childInitializers>;
specialinvoke v1.<java.util.HashMap: void <init>(java.util.Map)>(v2);
exitmonitor v0;
label02:
goto label04;
label03:
v3 := @caughtexception;
exitmonitor v0;
throw v3;
label04:
v4 = virtualinvoke v0.<org.apache.commons.lang3.concurrent.MultiBackgroundInitializer: java.util.concurrent.ExecutorService getActiveExecutor()>();
v5 = interfaceinvoke v1.<java.util.Map: java.util.Collection values()>();
v6 = interfaceinvoke v5.<java.util.Collection: java.util.Iterator iterator()>();
label05:
v7 = interfaceinvoke v6.<java.util.Iterator: boolean hasNext()>();
if v7 == 0 goto label07;
v8 = interfaceinvoke v6.<java.util.Iterator: java.lang.Object next()>();
v9 = virtualinvoke v8.<org.apache.commons.lang3.concurrent.BackgroundInitializer: java.util.concurrent.ExecutorService getExternalExecutor()>();
if v9 != null goto label06;
virtualinvoke v8.<org.apache.commons.lang3.concurrent.BackgroundInitializer: void setExternalExecutor(java.util.concurrent.ExecutorService)>(v4);
label06:
virtualinvoke v8.<org.apache.commons.lang3.concurrent.BackgroundInitializer: boolean start()>();
goto label05;
label07:
v10 = new java.util.HashMap;
specialinvoke v10.<java.util.HashMap: void <init>()>();
v11 = new java.util.HashMap;
specialinvoke v11.<java.util.HashMap: void <init>()>();
v12 = interfaceinvoke v1.<java.util.Map: java.util.Set entrySet()>();
v13 = interfaceinvoke v12.<java.util.Set: java.util.Iterator iterator()>();
label08:
v14 = interfaceinvoke v13.<java.util.Iterator: boolean hasNext()>();
if v14 == 0 goto label12;
v15 = interfaceinvoke v13.<java.util.Iterator: java.lang.Object next()>();
label09:
v16 = interfaceinvoke v15.<java.util.Map$Entry: java.lang.Object getKey()>();
v17 = interfaceinvoke v15.<java.util.Map$Entry: java.lang.Object getValue()>();
v18 = virtualinvoke v17.<org.apache.commons.lang3.concurrent.BackgroundInitializer: java.lang.Object get()>();
interfaceinvoke v10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v16, v18);
label10:
goto label08;
label11:
v19 := @caughtexception;
v20 = interfaceinvoke v15.<java.util.Map$Entry: java.lang.Object getKey()>();
interfaceinvoke v11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(v20, v19);
goto label08;
label12:
v21 = new org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults;
specialinvoke v21.<org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults: void <init>(java.util.Map,java.util.Map,java.util.Map)>(v1, v10, v11);
return v21;
catch java.lang.Throwable from label01 to label02 with label03;
catch org.apache.commons.lang3.concurrent.ConcurrentException from label09 to label10 with label11;
}
}