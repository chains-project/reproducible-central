public interface  org.apache.commons.lang3.function.FailableDoublePredicate extends java.lang.Object
{
public static final org.apache.commons.lang3.function.FailableDoublePredicate FALSE;
public static final org.apache.commons.lang3.function.FailableDoublePredicate TRUE;
public static org.apache.commons.lang3.function.FailableDoublePredicate falsePredicate()
{
org.apache.commons.lang3.function.FailableDoublePredicate v0;
v0 = <org.apache.commons.lang3.function.FailableDoublePredicate: org.apache.commons.lang3.function.FailableDoublePredicate FALSE>;
return v0;
}
public static org.apache.commons.lang3.function.FailableDoublePredicate truePredicate()
{
org.apache.commons.lang3.function.FailableDoublePredicate v0;
v0 = <org.apache.commons.lang3.function.FailableDoublePredicate: org.apache.commons.lang3.function.FailableDoublePredicate TRUE>;
return v0;
}
public org.apache.commons.lang3.function.FailableDoublePredicate and(org.apache.commons.lang3.function.FailableDoublePredicate)
{
org.apache.commons.lang3.function.FailableDoublePredicate v0, v1, v2;
v0 := @this: org.apache.commons.lang3.function.FailableDoublePredicate;
v1 := @parameter0: org.apache.commons.lang3.function.FailableDoublePredicate;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = staticinvoke <org.apache.commons.lang3.function.FailableDoublePredicate$lambda_and_2__198: org.apache.commons.lang3.function.FailableDoublePredicate bootstrap$(org.apache.commons.lang3.function.FailableDoublePredicate,org.apache.commons.lang3.function.FailableDoublePredicate)>(v0, v1);
return v2;
}
public org.apache.commons.lang3.function.FailableDoublePredicate negate()
{
org.apache.commons.lang3.function.FailableDoublePredicate v0, v1;
v0 := @this: org.apache.commons.lang3.function.FailableDoublePredicate;
v1 = staticinvoke <org.apache.commons.lang3.function.FailableDoublePredicate$lambda_negate_3__199: org.apache.commons.lang3.function.FailableDoublePredicate bootstrap$(org.apache.commons.lang3.function.FailableDoublePredicate)>(v0);
return v1;
}
public org.apache.commons.lang3.function.FailableDoublePredicate or(org.apache.commons.lang3.function.FailableDoublePredicate)
{
org.apache.commons.lang3.function.FailableDoublePredicate v0, v1, v2;
v0 := @this: org.apache.commons.lang3.function.FailableDoublePredicate;
v1 := @parameter0: org.apache.commons.lang3.function.FailableDoublePredicate;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = staticinvoke <org.apache.commons.lang3.function.FailableDoublePredicate$lambda_or_4__200: org.apache.commons.lang3.function.FailableDoublePredicate bootstrap$(org.apache.commons.lang3.function.FailableDoublePredicate,org.apache.commons.lang3.function.FailableDoublePredicate)>(v0, v1);
return v2;
}
public abstract boolean test(double) throws java.lang.Throwable;
static void <clinit>()
{
org.apache.commons.lang3.function.FailableDoublePredicate v0, v1;
v0 = staticinvoke <org.apache.commons.lang3.function.FailableDoublePredicate$lambda_static_0__201: org.apache.commons.lang3.function.FailableDoublePredicate bootstrap$()>();
<org.apache.commons.lang3.function.FailableDoublePredicate: org.apache.commons.lang3.function.FailableDoublePredicate FALSE> = v0;
v1 = staticinvoke <org.apache.commons.lang3.function.FailableDoublePredicate$lambda_static_1__202: org.apache.commons.lang3.function.FailableDoublePredicate bootstrap$()>();
<org.apache.commons.lang3.function.FailableDoublePredicate: org.apache.commons.lang3.function.FailableDoublePredicate TRUE> = v1;
return;
}
}