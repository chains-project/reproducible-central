public interface  org.apache.commons.lang3.function.FailablePredicate extends java.lang.Object
{
public static final org.apache.commons.lang3.function.FailablePredicate FALSE;
public static final org.apache.commons.lang3.function.FailablePredicate TRUE;
public static org.apache.commons.lang3.function.FailablePredicate falsePredicate()
{
org.apache.commons.lang3.function.FailablePredicate v0;
v0 = <org.apache.commons.lang3.function.FailablePredicate: org.apache.commons.lang3.function.FailablePredicate FALSE>;
return v0;
}
public static org.apache.commons.lang3.function.FailablePredicate truePredicate()
{
org.apache.commons.lang3.function.FailablePredicate v0;
v0 = <org.apache.commons.lang3.function.FailablePredicate: org.apache.commons.lang3.function.FailablePredicate TRUE>;
return v0;
}
public org.apache.commons.lang3.function.FailablePredicate and(org.apache.commons.lang3.function.FailablePredicate)
{
org.apache.commons.lang3.function.FailablePredicate v0, v1, v2;
v0 := @this: org.apache.commons.lang3.function.FailablePredicate;
v1 := @parameter0: org.apache.commons.lang3.function.FailablePredicate;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = staticinvoke <org.apache.commons.lang3.function.FailablePredicate$lambda_and_2__152: org.apache.commons.lang3.function.FailablePredicate bootstrap$(org.apache.commons.lang3.function.FailablePredicate,org.apache.commons.lang3.function.FailablePredicate)>(v0, v1);
return v2;
}
public org.apache.commons.lang3.function.FailablePredicate negate()
{
org.apache.commons.lang3.function.FailablePredicate v0, v1;
v0 := @this: org.apache.commons.lang3.function.FailablePredicate;
v1 = staticinvoke <org.apache.commons.lang3.function.FailablePredicate$lambda_negate_3__153: org.apache.commons.lang3.function.FailablePredicate bootstrap$(org.apache.commons.lang3.function.FailablePredicate)>(v0);
return v1;
}
public org.apache.commons.lang3.function.FailablePredicate or(org.apache.commons.lang3.function.FailablePredicate)
{
org.apache.commons.lang3.function.FailablePredicate v0, v1, v2;
v0 := @this: org.apache.commons.lang3.function.FailablePredicate;
v1 := @parameter0: org.apache.commons.lang3.function.FailablePredicate;
virtualinvoke v1.<java.lang.Object: java.lang.Class getClass()>();
v2 = staticinvoke <org.apache.commons.lang3.function.FailablePredicate$lambda_or_4__154: org.apache.commons.lang3.function.FailablePredicate bootstrap$(org.apache.commons.lang3.function.FailablePredicate,org.apache.commons.lang3.function.FailablePredicate)>(v0, v1);
return v2;
}
public abstract boolean test(java.lang.Object) throws java.lang.Throwable;
static void <clinit>()
{
org.apache.commons.lang3.function.FailablePredicate v0, v1;
v0 = staticinvoke <org.apache.commons.lang3.function.FailablePredicate$lambda_static_0__155: org.apache.commons.lang3.function.FailablePredicate bootstrap$()>();
<org.apache.commons.lang3.function.FailablePredicate: org.apache.commons.lang3.function.FailablePredicate FALSE> = v0;
v1 = staticinvoke <org.apache.commons.lang3.function.FailablePredicate$lambda_static_1__156: org.apache.commons.lang3.function.FailablePredicate bootstrap$()>();
<org.apache.commons.lang3.function.FailablePredicate: org.apache.commons.lang3.function.FailablePredicate TRUE> = v1;
return;
}
}