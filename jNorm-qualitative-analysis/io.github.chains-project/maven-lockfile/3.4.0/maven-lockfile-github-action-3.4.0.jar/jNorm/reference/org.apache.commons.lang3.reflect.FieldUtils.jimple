public class org.apache.commons.lang3.reflect.FieldUtils extends java.lang.Object
{
public void <init>()
{
org.apache.commons.lang3.reflect.FieldUtils v0;
v0 := @this: org.apache.commons.lang3.reflect.FieldUtils;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.lang.reflect.Field getField(java.lang.Class, java.lang.String)
{
java.lang.Class v0;
java.lang.String v1;
java.lang.reflect.Field v2;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.reflect.Field getField(java.lang.Class,java.lang.String,boolean)>(v0, v1, 0);
staticinvoke <org.apache.commons.lang3.reflect.MemberUtils: boolean setAccessibleWorkaround(java.lang.reflect.AccessibleObject)>(v2);
return v2;
}
public static java.lang.reflect.Field getField(java.lang.Class, java.lang.String, boolean)
{
java.lang.Object[] v18, v3, v5;
java.lang.NoSuchFieldException v10, v19;
int v8;
java.lang.String v1;
boolean v14, v17, v2, v4, v9;
java.util.Iterator v13;
java.lang.reflect.Field v11, v16, v7;
java.util.List v12;
java.lang.Class v0, v6;
java.lang.Object v15;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: boolean;
v3 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v0, "cls", v3);
v4 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>(v1);
v5 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>(v4, "The field name must not be blank/empty", v5);
v6 = v0;
label01:
if v6 == null goto label06;
label02:
v7 = virtualinvoke v6.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(v1);
v8 = virtualinvoke v7.<java.lang.reflect.Field: int getModifiers()>();
v9 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>(v8);
if v9 != 0 goto label03;
if v2 == 0 goto label05;
virtualinvoke v7.<java.lang.reflect.Field: void setAccessible(boolean)>(1);
label03:
return v7;
label04:
v10 := @caughtexception;
label05:
v6 = virtualinvoke v6.<java.lang.Class: java.lang.Class getSuperclass()>();
goto label01;
label06:
v11 = null;
v12 = staticinvoke <org.apache.commons.lang3.ClassUtils: java.util.List getAllInterfaces(java.lang.Class)>(v0);
v13 = interfaceinvoke v12.<java.util.List: java.util.Iterator iterator()>();
label07:
v14 = interfaceinvoke v13.<java.util.Iterator: boolean hasNext()>();
if v14 == 0 goto label13;
v15 = interfaceinvoke v13.<java.util.Iterator: java.lang.Object next()>();
label08:
v16 = virtualinvoke v15.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(v1);
if v11 != null goto label09;
v17 = 1;
goto label10;
label09:
v17 = 0;
label10:
v18 = newarray (java.lang.Object)[2];
v18[0] = v1;
v18[1] = v0;
staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>(v17, "Reference to field %s is ambiguous relative to %s; a matching field exists on two or more implemented interfaces.", v18);
v11 = v16;
label11:
goto label07;
label12:
v19 := @caughtexception;
goto label07;
label13:
return v11;
catch java.lang.NoSuchFieldException from label02 to label03 with label04;
catch java.lang.NoSuchFieldException from label08 to label11 with label12;
}
public static java.lang.reflect.Field getDeclaredField(java.lang.Class, java.lang.String)
{
java.lang.Class v0;
java.lang.String v1;
java.lang.reflect.Field v2;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.reflect.Field getDeclaredField(java.lang.Class,java.lang.String,boolean)>(v0, v1, 0);
return v2;
}
public static java.lang.reflect.Field getDeclaredField(java.lang.Class, java.lang.String, boolean)
{
java.lang.Object[] v3, v5;
java.lang.reflect.Field v6;
java.lang.NoSuchFieldException v8;
java.lang.Class v0;
java.lang.String v1;
boolean v2, v4, v7;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: boolean;
v3 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v0, "cls", v3);
v4 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNotBlank(java.lang.CharSequence)>(v1);
v5 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>(v4, "The field name must not be blank/empty", v5);
label1:
v6 = virtualinvoke v0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(v1);
v7 = staticinvoke <org.apache.commons.lang3.reflect.MemberUtils: boolean isAccessible(java.lang.reflect.Member)>(v6);
if v7 != 0 goto label3;
if v2 == 0 goto label2;
virtualinvoke v6.<java.lang.reflect.Field: void setAccessible(boolean)>(1);
goto label3;
label2:
return null;
label3:
return v6;
label4:
v8 := @caughtexception;
return null;
catch java.lang.NoSuchFieldException from label1 to label2 with label4;
}
public static java.lang.reflect.Field[] getAllFields(java.lang.Class)
{
java.lang.reflect.Field[] v2;
java.util.List v1;
java.lang.Object[] v3;
java.lang.Class v0;
v0 := @parameter0: java.lang.Class;
v1 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.util.List getAllFieldsList(java.lang.Class)>(v0);
v2 = <org.apache.commons.lang3.ArrayUtils: java.lang.reflect.Field[] EMPTY_FIELD_ARRAY>;
v3 = interfaceinvoke v1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v2);
return v3;
}
public static java.util.List getAllFieldsList(java.lang.Class)
{
java.lang.reflect.Field[] v4;
java.lang.Object[] v1;
java.lang.Class v0, v3;
java.util.ArrayList v2;
v0 := @parameter0: java.lang.Class;
v1 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v0, "cls", v1);
v2 = new java.util.ArrayList;
specialinvoke v2.<java.util.ArrayList: void <init>()>();
v3 = v0;
label1:
if v3 == null goto label2;
v4 = virtualinvoke v3.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();
staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>(v2, v4);
v3 = virtualinvoke v3.<java.lang.Class: java.lang.Class getSuperclass()>();
goto label1;
label2:
return v2;
}
public static java.lang.reflect.Field[] getFieldsWithAnnotation(java.lang.Class, java.lang.Class)
{
java.lang.reflect.Field[] v3;
java.util.List v2;
java.lang.Object[] v4;
java.lang.Class v0, v1;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Class;
v2 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.util.List getFieldsListWithAnnotation(java.lang.Class,java.lang.Class)>(v0, v1);
v3 = <org.apache.commons.lang3.ArrayUtils: java.lang.reflect.Field[] EMPTY_FIELD_ARRAY>;
v4 = interfaceinvoke v2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(v3);
return v4;
}
public static java.util.List getFieldsListWithAnnotation(java.lang.Class, java.lang.Class)
{
java.lang.Object[] v2;
java.util.Iterator v5;
java.util.ArrayList v4;
java.util.List v3;
java.lang.'annotation'.Annotation v8;
java.lang.Class v0, v1;
java.lang.Object v7;
boolean v6;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.Class;
v2 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v1, "annotationCls", v2);
v3 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.util.List getAllFieldsList(java.lang.Class)>(v0);
v4 = new java.util.ArrayList;
specialinvoke v4.<java.util.ArrayList: void <init>()>();
v5 = interfaceinvoke v3.<java.util.List: java.util.Iterator iterator()>();
label1:
v6 = interfaceinvoke v5.<java.util.Iterator: boolean hasNext()>();
if v6 == 0 goto label2;
v7 = interfaceinvoke v5.<java.util.Iterator: java.lang.Object next()>();
v8 = virtualinvoke v7.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(v1);
if v8 == null goto label1;
interfaceinvoke v4.<java.util.List: boolean add(java.lang.Object)>(v7);
goto label1;
label2:
return v4;
}
public static java.lang.Object readStaticField(java.lang.reflect.Field) throws java.lang.IllegalAccessException
{
java.lang.Object v1;
java.lang.reflect.Field v0;
v0 := @parameter0: java.lang.reflect.Field;
v1 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.Object readStaticField(java.lang.reflect.Field,boolean)>(v0, 0);
return v1;
}
public static java.lang.Object readStaticField(java.lang.reflect.Field, boolean) throws java.lang.IllegalAccessException
{
java.lang.Object[] v2, v5;
java.lang.reflect.Field v0;
int v3;
java.lang.Object v7;
java.lang.String v6;
boolean v1, v4;
v0 := @parameter0: java.lang.reflect.Field;
v1 := @parameter1: boolean;
v2 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v0, "field", v2);
v3 = virtualinvoke v0.<java.lang.reflect.Field: int getModifiers()>();
v4 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(v3);
v5 = newarray (java.lang.Object)[1];
v6 = virtualinvoke v0.<java.lang.reflect.Field: java.lang.String getName()>();
v5[0] = v6;
staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>(v4, "The field \'%s\' is not static", v5);
v7 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.Object readField(java.lang.reflect.Field,java.lang.Object,boolean)>(v0, null, v1);
return v7;
}
public static java.lang.Object readStaticField(java.lang.Class, java.lang.String) throws java.lang.IllegalAccessException
{
java.lang.Class v0;
java.lang.Object v2;
java.lang.String v1;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.Object readStaticField(java.lang.Class,java.lang.String,boolean)>(v0, v1, 0);
return v2;
}
public static java.lang.Object readStaticField(java.lang.Class, java.lang.String, boolean) throws java.lang.IllegalAccessException
{
java.lang.Object[] v4;
java.lang.Class v0;
java.lang.Object v5;
java.lang.String v1;
java.lang.reflect.Field v3;
boolean v2;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: boolean;
v3 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.reflect.Field getField(java.lang.Class,java.lang.String,boolean)>(v0, v1, v2);
v4 = newarray (java.lang.Object)[2];
v4[0] = v1;
v4[1] = v0;
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v3, "Cannot locate field \'%s\' on %s", v4);
v5 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.Object readStaticField(java.lang.reflect.Field,boolean)>(v3, 0);
return v5;
}
public static java.lang.Object readDeclaredStaticField(java.lang.Class, java.lang.String) throws java.lang.IllegalAccessException
{
java.lang.Class v0;
java.lang.Object v2;
java.lang.String v1;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.Object readDeclaredStaticField(java.lang.Class,java.lang.String,boolean)>(v0, v1, 0);
return v2;
}
public static java.lang.Object readDeclaredStaticField(java.lang.Class, java.lang.String, boolean) throws java.lang.IllegalAccessException
{
java.lang.Object[] v4;
java.lang.Class v0;
java.lang.Object v6;
java.lang.String v1, v5;
java.lang.reflect.Field v3;
boolean v2;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: boolean;
v3 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.reflect.Field getDeclaredField(java.lang.Class,java.lang.String,boolean)>(v0, v1, v2);
v4 = newarray (java.lang.Object)[2];
v5 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v4[0] = v5;
v4[1] = v1;
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v3, "Cannot locate declared field %s.%s", v4);
v6 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.Object readStaticField(java.lang.reflect.Field,boolean)>(v3, 0);
return v6;
}
public static java.lang.Object readField(java.lang.reflect.Field, java.lang.Object) throws java.lang.IllegalAccessException
{
java.lang.Object v1, v2;
java.lang.reflect.Field v0;
v0 := @parameter0: java.lang.reflect.Field;
v1 := @parameter1: java.lang.Object;
v2 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.Object readField(java.lang.reflect.Field,java.lang.Object,boolean)>(v0, v1, 0);
return v2;
}
public static java.lang.Object readField(java.lang.reflect.Field, java.lang.Object, boolean) throws java.lang.IllegalAccessException
{
java.lang.Object[] v3;
java.lang.Object v1, v5;
java.lang.reflect.Field v0;
boolean v2, v4;
v0 := @parameter0: java.lang.reflect.Field;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: boolean;
v3 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v0, "field", v3);
if v2 == 0 goto label1;
v4 = virtualinvoke v0.<java.lang.reflect.Field: boolean isAccessible()>();
if v4 != 0 goto label1;
virtualinvoke v0.<java.lang.reflect.Field: void setAccessible(boolean)>(1);
goto label2;
label1:
staticinvoke <org.apache.commons.lang3.reflect.MemberUtils: boolean setAccessibleWorkaround(java.lang.reflect.AccessibleObject)>(v0);
label2:
v5 = virtualinvoke v0.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(v1);
return v5;
}
public static java.lang.Object readField(java.lang.Object, java.lang.String) throws java.lang.IllegalAccessException
{
java.lang.Object v0, v2;
java.lang.String v1;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.Object readField(java.lang.Object,java.lang.String,boolean)>(v0, v1, 0);
return v2;
}
public static java.lang.Object readField(java.lang.Object, java.lang.String, boolean) throws java.lang.IllegalAccessException
{
java.lang.Object[] v3, v7;
java.lang.reflect.Field v5;
java.lang.Class v4;
java.lang.Object v0, v8;
java.lang.String v1;
boolean v2, v6;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: boolean;
v3 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v0, "target", v3);
v4 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v5 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.reflect.Field getField(java.lang.Class,java.lang.String,boolean)>(v4, v1, v2);
if v5 == null goto label1;
v6 = 1;
goto label2;
label1:
v6 = 0;
label2:
v7 = newarray (java.lang.Object)[2];
v7[0] = v1;
v7[1] = v4;
staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>(v6, "Cannot locate field %s on %s", v7);
v8 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.Object readField(java.lang.reflect.Field,java.lang.Object,boolean)>(v5, v0, 0);
return v8;
}
public static java.lang.Object readDeclaredField(java.lang.Object, java.lang.String) throws java.lang.IllegalAccessException
{
java.lang.Object v0, v2;
java.lang.String v1;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.String;
v2 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.Object readDeclaredField(java.lang.Object,java.lang.String,boolean)>(v0, v1, 0);
return v2;
}
public static java.lang.Object readDeclaredField(java.lang.Object, java.lang.String, boolean) throws java.lang.IllegalAccessException
{
java.lang.Object[] v3, v7;
java.lang.reflect.Field v5;
java.lang.Class v4;
java.lang.Object v0, v8;
java.lang.String v1;
boolean v2, v6;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: boolean;
v3 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v0, "target", v3);
v4 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v5 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.reflect.Field getDeclaredField(java.lang.Class,java.lang.String,boolean)>(v4, v1, v2);
if v5 == null goto label1;
v6 = 1;
goto label2;
label1:
v6 = 0;
label2:
v7 = newarray (java.lang.Object)[2];
v7[0] = v4;
v7[1] = v1;
staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>(v6, "Cannot locate declared field %s.%s", v7);
v8 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.Object readField(java.lang.reflect.Field,java.lang.Object,boolean)>(v5, v0, 0);
return v8;
}
public static void writeStaticField(java.lang.reflect.Field, java.lang.Object) throws java.lang.IllegalAccessException
{
java.lang.Object v1;
java.lang.reflect.Field v0;
v0 := @parameter0: java.lang.reflect.Field;
v1 := @parameter1: java.lang.Object;
staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: void writeStaticField(java.lang.reflect.Field,java.lang.Object,boolean)>(v0, v1, 0);
return;
}
public static void writeStaticField(java.lang.reflect.Field, java.lang.Object, boolean) throws java.lang.IllegalAccessException
{
java.lang.Object[] v3, v6;
java.lang.reflect.Field v0;
int v4;
java.lang.Class v7;
java.lang.Object v1;
java.lang.String v8, v9;
boolean v2, v5;
v0 := @parameter0: java.lang.reflect.Field;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: boolean;
v3 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v0, "field", v3);
v4 = virtualinvoke v0.<java.lang.reflect.Field: int getModifiers()>();
v5 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(v4);
v6 = newarray (java.lang.Object)[2];
v7 = virtualinvoke v0.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();
v8 = virtualinvoke v7.<java.lang.Class: java.lang.String getName()>();
v6[0] = v8;
v9 = virtualinvoke v0.<java.lang.reflect.Field: java.lang.String getName()>();
v6[1] = v9;
staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>(v5, "The field %s.%s is not static", v6);
staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: void writeField(java.lang.reflect.Field,java.lang.Object,java.lang.Object,boolean)>(v0, null, v1, v2);
return;
}
public static void writeStaticField(java.lang.Class, java.lang.String, java.lang.Object) throws java.lang.IllegalAccessException
{
java.lang.Class v0;
java.lang.Object v2;
java.lang.String v1;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.Object;
staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: void writeStaticField(java.lang.Class,java.lang.String,java.lang.Object,boolean)>(v0, v1, v2, 0);
return;
}
public static void writeStaticField(java.lang.Class, java.lang.String, java.lang.Object, boolean) throws java.lang.IllegalAccessException
{
java.lang.Object[] v5;
java.lang.Class v0;
java.lang.Object v2;
java.lang.String v1;
java.lang.reflect.Field v4;
boolean v3;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.Object;
v3 := @parameter3: boolean;
v4 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.reflect.Field getField(java.lang.Class,java.lang.String,boolean)>(v0, v1, v3);
v5 = newarray (java.lang.Object)[2];
v5[0] = v1;
v5[1] = v0;
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v4, "Cannot locate field %s on %s", v5);
staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: void writeStaticField(java.lang.reflect.Field,java.lang.Object,boolean)>(v4, v2, 0);
return;
}
public static void writeDeclaredStaticField(java.lang.Class, java.lang.String, java.lang.Object) throws java.lang.IllegalAccessException
{
java.lang.Class v0;
java.lang.Object v2;
java.lang.String v1;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.Object;
staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: void writeDeclaredStaticField(java.lang.Class,java.lang.String,java.lang.Object,boolean)>(v0, v1, v2, 0);
return;
}
public static void writeDeclaredStaticField(java.lang.Class, java.lang.String, java.lang.Object, boolean) throws java.lang.IllegalAccessException
{
java.lang.Object[] v5;
java.lang.Class v0;
java.lang.Object v2;
java.lang.String v1, v6;
java.lang.reflect.Field v4;
boolean v3;
v0 := @parameter0: java.lang.Class;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.Object;
v3 := @parameter3: boolean;
v4 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.reflect.Field getDeclaredField(java.lang.Class,java.lang.String,boolean)>(v0, v1, v3);
v5 = newarray (java.lang.Object)[2];
v6 = virtualinvoke v0.<java.lang.Class: java.lang.String getName()>();
v5[0] = v6;
v5[1] = v1;
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v4, "Cannot locate declared field %s.%s", v5);
staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: void writeField(java.lang.reflect.Field,java.lang.Object,java.lang.Object,boolean)>(v4, null, v2, 0);
return;
}
public static void writeField(java.lang.reflect.Field, java.lang.Object, java.lang.Object) throws java.lang.IllegalAccessException
{
java.lang.Object v1, v2;
java.lang.reflect.Field v0;
v0 := @parameter0: java.lang.reflect.Field;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: java.lang.Object;
staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: void writeField(java.lang.reflect.Field,java.lang.Object,java.lang.Object,boolean)>(v0, v1, v2, 0);
return;
}
public static void writeField(java.lang.reflect.Field, java.lang.Object, java.lang.Object, boolean) throws java.lang.IllegalAccessException
{
java.lang.Object[] v4;
java.lang.Object v1, v2;
java.lang.reflect.Field v0;
boolean v3, v5;
v0 := @parameter0: java.lang.reflect.Field;
v1 := @parameter1: java.lang.Object;
v2 := @parameter2: java.lang.Object;
v3 := @parameter3: boolean;
v4 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v0, "field", v4);
if v3 == 0 goto label1;
v5 = virtualinvoke v0.<java.lang.reflect.Field: boolean isAccessible()>();
if v5 != 0 goto label1;
virtualinvoke v0.<java.lang.reflect.Field: void setAccessible(boolean)>(1);
goto label2;
label1:
staticinvoke <org.apache.commons.lang3.reflect.MemberUtils: boolean setAccessibleWorkaround(java.lang.reflect.AccessibleObject)>(v0);
label2:
virtualinvoke v0.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(v1, v2);
return;
}
public static void removeFinalModifier(java.lang.reflect.Field)
{
java.lang.reflect.Field v0;
v0 := @parameter0: java.lang.reflect.Field;
staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: void removeFinalModifier(java.lang.reflect.Field,boolean)>(v0, 1);
return;
}
public static void removeFinalModifier(java.lang.reflect.Field, boolean)
{
java.lang.Throwable v13;
java.lang.Object[] v2;
java.lang.ReflectiveOperationException v14;
int v10, v11, v12, v3;
boolean v1, v16, v4, v7, v8, v9;
java.lang.UnsupportedOperationException v17;
org.apache.commons.lang3.JavaVersion v15;
java.lang.reflect.Field v0, v6;
java.lang.Class v5;
v0 := @parameter0: java.lang.reflect.Field;
v1 := @parameter1: boolean;
v2 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v0, "field", v2);
label1:
v3 = virtualinvoke v0.<java.lang.reflect.Field: int getModifiers()>();
v4 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>(v3);
if v4 == 0 goto label9;
v5 = class "Ljava/lang/reflect/Field;";
v6 = virtualinvoke v5.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("modifiers");
if v1 == 0 goto label2;
v7 = virtualinvoke v6.<java.lang.reflect.Field: boolean isAccessible()>();
if v7 != 0 goto label2;
v8 = 1;
goto label3;
label2:
v8 = 0;
label3:
v9 = v8;
if v8 == 0 goto label4;
virtualinvoke v6.<java.lang.reflect.Field: void setAccessible(boolean)>(1);
label4:
v10 = virtualinvoke v0.<java.lang.reflect.Field: int getModifiers()>();
v11 = (int) -17;
v12 = v10 & v11;
virtualinvoke v6.<java.lang.reflect.Field: void setInt(java.lang.Object,int)>(v0, v12);
label5:
if v9 == 0 goto label9;
virtualinvoke v6.<java.lang.reflect.Field: void setAccessible(boolean)>(0);
goto label9;
label6:
v13 := @caughtexception;
if v9 == 0 goto label7;
virtualinvoke v6.<java.lang.reflect.Field: void setAccessible(boolean)>(0);
label7:
throw v13;
label8:
v14 := @caughtexception;
v15 = <org.apache.commons.lang3.JavaVersion: org.apache.commons.lang3.JavaVersion JAVA_12>;
v16 = staticinvoke <org.apache.commons.lang3.SystemUtils: boolean isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion)>(v15);
if v16 == 0 goto label9;
v17 = new java.lang.UnsupportedOperationException;
specialinvoke v17.<java.lang.UnsupportedOperationException: void <init>(java.lang.String,java.lang.Throwable)>("In java 12+ final cannot be removed.", v14);
throw v17;
label9:
return;
catch java.lang.Throwable from label4 to label5 with label6;
catch java.lang.NoSuchFieldException from label1 to label8 with label8;
catch java.lang.IllegalAccessException from label1 to label8 with label8;
}
public static void writeField(java.lang.Object, java.lang.String, java.lang.Object) throws java.lang.IllegalAccessException
{
java.lang.Object v0, v2;
java.lang.String v1;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.Object;
staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: void writeField(java.lang.Object,java.lang.String,java.lang.Object,boolean)>(v0, v1, v2, 0);
return;
}
public static void writeField(java.lang.Object, java.lang.String, java.lang.Object, boolean) throws java.lang.IllegalAccessException
{
java.lang.Object[] v4, v8;
java.lang.reflect.Field v6;
java.lang.Class v5;
java.lang.Object v0, v2;
java.lang.String v1, v9;
boolean v3, v7;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.Object;
v3 := @parameter3: boolean;
v4 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v0, "target", v4);
v5 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v6 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.reflect.Field getField(java.lang.Class,java.lang.String,boolean)>(v5, v1, v3);
if v6 == null goto label1;
v7 = 1;
goto label2;
label1:
v7 = 0;
label2:
v8 = newarray (java.lang.Object)[2];
v9 = virtualinvoke v5.<java.lang.Class: java.lang.String getName()>();
v8[0] = v9;
v8[1] = v1;
staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>(v7, "Cannot locate declared field %s.%s", v8);
staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: void writeField(java.lang.reflect.Field,java.lang.Object,java.lang.Object,boolean)>(v6, v0, v2, 0);
return;
}
public static void writeDeclaredField(java.lang.Object, java.lang.String, java.lang.Object) throws java.lang.IllegalAccessException
{
java.lang.Object v0, v2;
java.lang.String v1;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.Object;
staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: void writeDeclaredField(java.lang.Object,java.lang.String,java.lang.Object,boolean)>(v0, v1, v2, 0);
return;
}
public static void writeDeclaredField(java.lang.Object, java.lang.String, java.lang.Object, boolean) throws java.lang.IllegalAccessException
{
java.lang.Object[] v4, v8;
java.lang.reflect.Field v6;
java.lang.Class v5;
java.lang.Object v0, v2;
java.lang.String v1, v9;
boolean v3, v7;
v0 := @parameter0: java.lang.Object;
v1 := @parameter1: java.lang.String;
v2 := @parameter2: java.lang.Object;
v3 := @parameter3: boolean;
v4 = newarray (java.lang.Object)[0];
staticinvoke <org.apache.commons.lang3.Validate: java.lang.Object notNull(java.lang.Object,java.lang.String,java.lang.Object[])>(v0, "target", v4);
v5 = virtualinvoke v0.<java.lang.Object: java.lang.Class getClass()>();
v6 = staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: java.lang.reflect.Field getDeclaredField(java.lang.Class,java.lang.String,boolean)>(v5, v1, v3);
if v6 == null goto label1;
v7 = 1;
goto label2;
label1:
v7 = 0;
label2:
v8 = newarray (java.lang.Object)[2];
v9 = virtualinvoke v5.<java.lang.Class: java.lang.String getName()>();
v8[0] = v9;
v8[1] = v1;
staticinvoke <org.apache.commons.lang3.Validate: void isTrue(boolean,java.lang.String,java.lang.Object[])>(v7, "Cannot locate declared field %s.%s", v8);
staticinvoke <org.apache.commons.lang3.reflect.FieldUtils: void writeField(java.lang.reflect.Field,java.lang.Object,java.lang.Object,boolean)>(v6, v0, v2, 0);
return;
}
}