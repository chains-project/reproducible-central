public class org.apache.commons.lang3.text.WordUtils extends java.lang.Object
{
public void <init>()
{
org.apache.commons.lang3.text.WordUtils v0;
v0 := @this: org.apache.commons.lang3.text.WordUtils;
specialinvoke v0.<java.lang.Object: void <init>()>();
return;
}
public static java.lang.String wrap(java.lang.String, int)
{
int v1;
java.lang.String v0, v2;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 = staticinvoke <org.apache.commons.lang3.text.WordUtils: java.lang.String wrap(java.lang.String,int,java.lang.String,boolean)>(v0, v1, null, 0);
return v2;
}
public static java.lang.String wrap(java.lang.String, int, java.lang.String, boolean)
{
int v1;
java.lang.String v0, v2, v4;
boolean v3;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 := @parameter2: java.lang.String;
v3 := @parameter3: boolean;
v4 = staticinvoke <org.apache.commons.lang3.text.WordUtils: java.lang.String wrap(java.lang.String,int,java.lang.String,boolean,java.lang.String)>(v0, v1, v2, v3, " ");
return v4;
}
public static java.lang.String wrap(java.lang.String, int, java.lang.String, boolean, java.lang.String)
{
java.util.regex.Matcher v18, v29;
boolean v19, v24, v3, v30, v5;
java.lang.StringBuilder v9;
java.util.regex.Pattern v6;
long v14, v15;
int v1, v10, v11, v12, v13, v16, v20, v21, v22, v23, v25, v26, v27, v31, v32, v33, v34, v7, v8;
java.lang.String v0, v17, v2, v28, v35, v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: int;
v2 := @parameter2: java.lang.String;
v3 := @parameter3: boolean;
v4 := @parameter4: java.lang.String;
if v0 != null goto label01;
return null;
label01:
if v2 != null goto label02;
v2 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();
label02:
if v1 >= 1 goto label03;
v1 = 1;
label03:
v5 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>(v4);
if v5 == 0 goto label04;
v4 = " ";
label04:
v6 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(v4);
v7 = virtualinvoke v0.<java.lang.String: int length()>();
v8 = 0;
v9 = new java.lang.StringBuilder;
v10 = v7 + 32;
specialinvoke v9.<java.lang.StringBuilder: void <init>(int)>(v10);
label05:
if v8 >= v7 goto label14;
v11 = (int) -1;
v12 = v11;
v13 = v8 + v1;
v14 = v13 + 1L;
v15 = staticinvoke <java.lang.Math: long min(long,long)>(2147483647L, v14);
v16 = staticinvoke <java.lang.Math: int min(int,int)>(v15, v7);
v17 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int,int)>(v8, v16);
v18 = virtualinvoke v6.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v17);
v19 = virtualinvoke v18.<java.util.regex.Matcher: boolean find()>();
if v19 == 0 goto label07;
v20 = virtualinvoke v18.<java.util.regex.Matcher: int start()>();
if v20 != 0 goto label06;
v21 = virtualinvoke v18.<java.util.regex.Matcher: int end()>();
v8 = v8 + v21;
goto label05;
label06:
v22 = virtualinvoke v18.<java.util.regex.Matcher: int start()>();
v12 = v22 + v8;
label07:
v23 = v7 - v8;
if v23 <= v1 goto label14;
label08:
v24 = virtualinvoke v18.<java.util.regex.Matcher: boolean find()>();
if v24 == 0 goto label09;
v25 = virtualinvoke v18.<java.util.regex.Matcher: int start()>();
v12 = v25 + v8;
goto label08;
label09:
if v12 < v8 goto label10;
virtualinvoke v9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(v0, v8, v12);
virtualinvoke v9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v2);
v8 = v12 + 1;
goto label05;
label10:
if v3 == 0 goto label11;
v26 = v1 + v8;
virtualinvoke v9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(v0, v8, v26);
virtualinvoke v9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v2);
v8 = v8 + v1;
goto label05;
label11:
v27 = v8 + v1;
v28 = virtualinvoke v0.<java.lang.String: java.lang.String substring(int)>(v27);
v29 = virtualinvoke v6.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v28);
v30 = virtualinvoke v29.<java.util.regex.Matcher: boolean find()>();
if v30 == 0 goto label12;
v31 = virtualinvoke v29.<java.util.regex.Matcher: int start()>();
v32 = v31 + v8;
v12 = v32 + v1;
label12:
if v12 < 0 goto label13;
virtualinvoke v9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(v0, v8, v12);
virtualinvoke v9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(v2);
v8 = v12 + 1;
goto label05;
label13:
v33 = virtualinvoke v0.<java.lang.String: int length()>();
virtualinvoke v9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(v0, v8, v33);
v8 = v7;
goto label05;
label14:
v34 = virtualinvoke v0.<java.lang.String: int length()>();
virtualinvoke v9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(v0, v8, v34);
v35 = virtualinvoke v9.<java.lang.StringBuilder: java.lang.String toString()>();
return v35;
}
public static java.lang.String capitalize(java.lang.String)
{
java.lang.String v0, v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.lang3.text.WordUtils: java.lang.String capitalize(java.lang.String,char[])>(v0, null);
return v1;
}
public static transient java.lang.String capitalize(java.lang.String, char[])
{
char v11, v9;
int v2, v3, v7, v8;
char[] v1, v5;
java.lang.String v0, v12;
boolean v10, v4, v6;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: char[];
if v1 != null goto label1;
v2 = (int) -1;
v3 = v2;
goto label2;
label1:
v3 = lengthof v1;
label2:
v4 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v4 != 0 goto label3;
if v3 != 0 goto label4;
label3:
return v0;
label4:
v5 = virtualinvoke v0.<java.lang.String: char[] toCharArray()>();
v6 = 1;
v7 = 0;
label5:
v8 = lengthof v5;
if v7 >= v8 goto label8;
v9 = v5[v7];
v10 = staticinvoke <org.apache.commons.lang3.text.WordUtils: boolean isDelimiter(char,char[])>(v9, v1);
if v10 == 0 goto label6;
v6 = 1;
goto label7;
label6:
if v6 == 0 goto label7;
v11 = staticinvoke <java.lang.Character: char toTitleCase(char)>(v9);
v5[v7] = v11;
v6 = 0;
label7:
v7 = v7 + 1;
goto label5;
label8:
v12 = new java.lang.String;
specialinvoke v12.<java.lang.String: void <init>(char[])>(v5);
return v12;
}
public static java.lang.String capitalizeFully(java.lang.String)
{
java.lang.String v0, v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.lang3.text.WordUtils: java.lang.String capitalizeFully(java.lang.String,char[])>(v0, null);
return v1;
}
public static transient java.lang.String capitalizeFully(java.lang.String, char[])
{
int v2, v3;
char[] v1;
java.lang.String v0, v5, v6;
boolean v4;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: char[];
if v1 != null goto label1;
v2 = (int) -1;
v3 = v2;
goto label2;
label1:
v3 = lengthof v1;
label2:
v4 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v4 != 0 goto label3;
if v3 != 0 goto label4;
label3:
return v0;
label4:
v5 = virtualinvoke v0.<java.lang.String: java.lang.String toLowerCase()>();
v6 = staticinvoke <org.apache.commons.lang3.text.WordUtils: java.lang.String capitalize(java.lang.String,char[])>(v5, v1);
return v6;
}
public static java.lang.String uncapitalize(java.lang.String)
{
java.lang.String v0, v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.lang3.text.WordUtils: java.lang.String uncapitalize(java.lang.String,char[])>(v0, null);
return v1;
}
public static transient java.lang.String uncapitalize(java.lang.String, char[])
{
char v11, v9;
int v2, v3, v7, v8;
char[] v1, v5;
java.lang.String v0, v12;
boolean v10, v4, v6;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: char[];
if v1 != null goto label1;
v2 = (int) -1;
v3 = v2;
goto label2;
label1:
v3 = lengthof v1;
label2:
v4 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v4 != 0 goto label3;
if v3 != 0 goto label4;
label3:
return v0;
label4:
v5 = virtualinvoke v0.<java.lang.String: char[] toCharArray()>();
v6 = 1;
v7 = 0;
label5:
v8 = lengthof v5;
if v7 >= v8 goto label8;
v9 = v5[v7];
v10 = staticinvoke <org.apache.commons.lang3.text.WordUtils: boolean isDelimiter(char,char[])>(v9, v1);
if v10 == 0 goto label6;
v6 = 1;
goto label7;
label6:
if v6 == 0 goto label7;
v11 = staticinvoke <java.lang.Character: char toLowerCase(char)>(v9);
v5[v7] = v11;
v6 = 0;
label7:
v7 = v7 + 1;
goto label5;
label8:
v12 = new java.lang.String;
specialinvoke v12.<java.lang.String: void <init>(char[])>(v5);
return v12;
}
public static java.lang.String swapCase(java.lang.String)
{
char v11, v12, v6, v9;
int v4, v5;
char[] v2;
java.lang.String v0, v13;
boolean v1, v10, v3, v7, v8;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v1 == 0 goto label1;
return v0;
label1:
v2 = virtualinvoke v0.<java.lang.String: char[] toCharArray()>();
v3 = 1;
v4 = 0;
label2:
v5 = lengthof v2;
if v4 >= v5 goto label8;
v6 = v2[v4];
v7 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>(v6);
if v7 != 0 goto label3;
v8 = staticinvoke <java.lang.Character: boolean isTitleCase(char)>(v6);
if v8 == 0 goto label4;
label3:
v9 = staticinvoke <java.lang.Character: char toLowerCase(char)>(v6);
v2[v4] = v9;
v3 = 0;
goto label7;
label4:
v10 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>(v6);
if v10 == 0 goto label6;
if v3 == 0 goto label5;
v11 = staticinvoke <java.lang.Character: char toTitleCase(char)>(v6);
v2[v4] = v11;
v3 = 0;
goto label7;
label5:
v12 = staticinvoke <java.lang.Character: char toUpperCase(char)>(v6);
v2[v4] = v12;
goto label7;
label6:
v3 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(v6);
label7:
v4 = v4 + 1;
goto label2;
label8:
v13 = new java.lang.String;
specialinvoke v13.<java.lang.String: void <init>(char[])>(v2);
return v13;
}
public static java.lang.String initials(java.lang.String)
{
java.lang.String v0, v1;
v0 := @parameter0: java.lang.String;
v1 = staticinvoke <org.apache.commons.lang3.text.WordUtils: java.lang.String initials(java.lang.String,char[])>(v0, null);
return v1;
}
public static transient java.lang.String initials(java.lang.String, char[])
{
char v11;
int v10, v13, v3, v4, v5, v6, v8;
char[] v1, v7;
java.lang.String v0, v14;
boolean v12, v2, v9;
v0 := @parameter0: java.lang.String;
v1 := @parameter1: char[];
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 == 0 goto label1;
return v0;
label1:
if v1 == null goto label2;
v3 = lengthof v1;
if v3 != 0 goto label2;
return "";
label2:
v4 = virtualinvoke v0.<java.lang.String: int length()>();
v5 = v4 / 2;
v6 = v5 + 1;
v7 = newarray (char)[v6];
v8 = 0;
v9 = 1;
v10 = 0;
label3:
if v10 >= v4 goto label6;
v11 = virtualinvoke v0.<java.lang.String: char charAt(int)>(v10);
v12 = staticinvoke <org.apache.commons.lang3.text.WordUtils: boolean isDelimiter(char,char[])>(v11, v1);
if v12 == 0 goto label4;
v9 = 1;
goto label5;
label4:
if v9 == 0 goto label5;
v13 = v8;
v8 = v8 + 1;
v7[v13] = v11;
v9 = 0;
label5:
v10 = v10 + 1;
goto label3;
label6:
v14 = new java.lang.String;
specialinvoke v14.<java.lang.String: void <init>(char[],int,int)>(v7, 0, v8);
return v14;
}
public static transient boolean containsAllWords(java.lang.CharSequence, java.lang.CharSequence[])
{
java.lang.CharSequence v0, v6;
java.lang.CharSequence[] v1;
java.util.regex.Matcher v10;
int v4, v5;
java.lang.String v8;
java.util.regex.Pattern v9;
boolean v11, v2, v3, v7;
v0 := @parameter0: java.lang.CharSequence;
v1 := @parameter1: java.lang.CharSequence[];
v2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(v0);
if v2 != 0 goto label1;
v3 = staticinvoke <org.apache.commons.lang3.ArrayUtils: boolean isEmpty(java.lang.Object[])>(v1);
if v3 == 0 goto label2;
label1:
return 0;
label2:
v4 = lengthof v1;
v5 = 0;
label3:
if v5 >= v4 goto label6;
v6 = v1[v5];
v7 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isBlank(java.lang.CharSequence)>(v6);
if v7 == 0 goto label4;
return 0;
label4:
v8 = dynamicinvoke "makeConcatWithConstants" <java.lang.String (java.lang.CharSequence)>(v6) <java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite makeConcatWithConstants(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])>(".*\\b\u0001\\b.*");
v9 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(v8);
v10 = virtualinvoke v9.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(v0);
v11 = virtualinvoke v10.<java.util.regex.Matcher: boolean matches()>();
if v11 != 0 goto label5;
return 0;
label5:
v5 = v5 + 1;
goto label3;
label6:
return 1;
}
private static boolean isDelimiter(char, char[])
{
int v3, v4;
char[] v1;
char v0, v5;
boolean v2;
v0 := @parameter0: char;
v1 := @parameter1: char[];
if v1 != null goto label1;
v2 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(v0);
return v2;
label1:
v3 = lengthof v1;
v4 = 0;
label2:
if v4 >= v3 goto label4;
v5 = v1[v4];
if v0 != v5 goto label3;
return 1;
label3:
v4 = v4 + 1;
goto label2;
label4:
return 0;
}
}